

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Sun Feb 24 01:41:43 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F18345
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    11                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	psect	text14,local,class=CODE,merge=1,delta=2
    30                           	psect	text15,local,class=CODE,merge=1,delta=2
    31                           	psect	text16,local,class=CODE,merge=1,inline,delta=2
    32                           	psect	text17,local,class=CODE,merge=1,delta=2
    33                           	psect	text18,local,class=CODE,merge=1,delta=2
    34                           	psect	text19,local,class=CODE,merge=1,delta=2
    35                           	psect	text20,local,class=CODE,merge=1,delta=2
    36                           	psect	text21,local,class=CODE,merge=1,delta=2
    37                           	psect	text22,local,class=CODE,merge=1,delta=2
    38                           	psect	text23,local,class=CODE,merge=1,delta=2
    39                           	psect	text24,local,class=CODE,merge=1,delta=2
    40                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text26,local,class=CODE,merge=1,delta=2
    42                           	psect	text27,local,class=CODE,merge=1,delta=2
    43                           	psect	text28,local,class=CODE,merge=1,inline,delta=2
    44                           	psect	text29,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text30,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text31,local,class=CODE,merge=1,inline,delta=2
    47                           	psect	text32,local,class=CODE,merge=1,inline,delta=2
    48                           	psect	text33,local,class=CODE,merge=1,inline,delta=2
    49                           	psect	text34,local,class=CODE,merge=1,inline,delta=2
    50                           	psect	text35,local,class=CODE,merge=1,delta=2
    51                           	psect	text36,local,class=CODE,merge=1,delta=2
    52                           	psect	text37,local,class=CODE,merge=1,delta=2
    53                           	psect	text38,local,class=CODE,merge=1,delta=2
    54                           	psect	text39,local,class=CODE,merge=1,delta=2
    55                           	psect	intentry,global,class=CODE,delta=2
    56                           	psect	text41,local,class=CODE,merge=1,delta=2
    57                           	psect	text42,local,class=CODE,merge=1,delta=2
    58                           	psect	text43,local,class=CODE,merge=1,delta=2
    59                           	psect	text44,local,class=CODE,merge=1,delta=2
    60                           	psect	text45,local,class=CODE,merge=1,delta=2
    61                           	psect	text46,local,class=CODE,merge=1,inline,delta=2
    62                           	psect	text47,local,class=CODE,merge=1,delta=2
    63                           	psect	text48,local,class=CODE,merge=1,delta=2,group=1
    64                           	psect	text49,local,class=CODE,merge=1,delta=2,group=1
    65                           	psect	text50,local,class=CODE,merge=1,delta=2
    66                           	psect	text51,local,class=CODE,merge=1,delta=2
    67                           	psect	text52,local,class=CODE,merge=1,inline,delta=2
    68                           	psect	text53,local,class=CODE,merge=1,inline,delta=2
    69                           	psect	text54,local,class=CODE,merge=1,inline,delta=2
    70                           	psect	text55,local,class=CODE,merge=1,inline,delta=2
    71                           	psect	text56,local,class=CODE,merge=1,inline,delta=2
    72                           	psect	text57,local,class=CODE,merge=1,inline,delta=2
    73                           	psect	text58,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text59,local,class=CODE,merge=1,delta=2
    75                           	psect	text60,local,class=CODE,merge=1,inline,delta=2
    76                           	psect	text61,local,class=CODE,merge=1,delta=2
    77                           	dabs	1,0x7E,2
    78  0000                     
    79                           ; Version 2.05
    80                           ; Generated 20/12/2018 GMT
    81                           ; 
    82                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    83                           ; All rights reserved.
    84                           ; 
    85                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    86                           ; 
    87                           ; Redistribution and use in source and binary forms, with or without modification, are
    88                           ; permitted provided that the following conditions are met:
    89                           ; 
    90                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    91                           ;        conditions and the following disclaimer.
    92                           ; 
    93                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    94                           ;        of conditions and the following disclaimer in the documentation and/or other
    95                           ;        materials provided with the distribution.
    96                           ; 
    97                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    98                           ;        software without specific prior written permission.
    99                           ; 
   100                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   101                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   102                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   103                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   104                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   105                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   106                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   107                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   108                           ; 
   109                           ; 
   110                           ; Code-generator required, PIC16F18345 Definitions
   111                           ; 
   112                           ; SFR Addresses
   113  0000                     	;# 
   114  0001                     	;# 
   115  0002                     	;# 
   116  0003                     	;# 
   117  0004                     	;# 
   118  0005                     	;# 
   119  0006                     	;# 
   120  0007                     	;# 
   121  0008                     	;# 
   122  0009                     	;# 
   123  000A                     	;# 
   124  000B                     	;# 
   125  000C                     	;# 
   126  000D                     	;# 
   127  000E                     	;# 
   128  0010                     	;# 
   129  0011                     	;# 
   130  0012                     	;# 
   131  0013                     	;# 
   132  0014                     	;# 
   133  0015                     	;# 
   134  0015                     	;# 
   135  0016                     	;# 
   136  0016                     	;# 
   137  0017                     	;# 
   138  0018                     	;# 
   139  0019                     	;# 
   140  0019                     	;# 
   141  001A                     	;# 
   142  001B                     	;# 
   143  001C                     	;# 
   144  001D                     	;# 
   145  001E                     	;# 
   146  001F                     	;# 
   147  008C                     	;# 
   148  008D                     	;# 
   149  008E                     	;# 
   150  0090                     	;# 
   151  0091                     	;# 
   152  0092                     	;# 
   153  0093                     	;# 
   154  0094                     	;# 
   155  0097                     	;# 
   156  009B                     	;# 
   157  009B                     	;# 
   158  009C                     	;# 
   159  009D                     	;# 
   160  009E                     	;# 
   161  009F                     	;# 
   162  010C                     	;# 
   163  010D                     	;# 
   164  010E                     	;# 
   165  0111                     	;# 
   166  0112                     	;# 
   167  0113                     	;# 
   168  0114                     	;# 
   169  0115                     	;# 
   170  0116                     	;# 
   171  0117                     	;# 
   172  0118                     	;# 
   173  0119                     	;# 
   174  018C                     	;# 
   175  018D                     	;# 
   176  018E                     	;# 
   177  0197                     	;# 
   178  0199                     	;# 
   179  0199                     	;# 
   180  0199                     	;# 
   181  019A                     	;# 
   182  019A                     	;# 
   183  019A                     	;# 
   184  019B                     	;# 
   185  019B                     	;# 
   186  019B                     	;# 
   187  019B                     	;# 
   188  019B                     	;# 
   189  019C                     	;# 
   190  019C                     	;# 
   191  019C                     	;# 
   192  019D                     	;# 
   193  019D                     	;# 
   194  019D                     	;# 
   195  019E                     	;# 
   196  019E                     	;# 
   197  019E                     	;# 
   198  019F                     	;# 
   199  019F                     	;# 
   200  019F                     	;# 
   201  019F                     	;# 
   202  019F                     	;# 
   203  020C                     	;# 
   204  020D                     	;# 
   205  020E                     	;# 
   206  0211                     	;# 
   207  0211                     	;# 
   208  0212                     	;# 
   209  0212                     	;# 
   210  0213                     	;# 
   211  0213                     	;# 
   212  0214                     	;# 
   213  0214                     	;# 
   214  0215                     	;# 
   215  0215                     	;# 
   216  0215                     	;# 
   217  0215                     	;# 
   218  0216                     	;# 
   219  0216                     	;# 
   220  0217                     	;# 
   221  0217                     	;# 
   222  0219                     	;# 
   223  021A                     	;# 
   224  021B                     	;# 
   225  021C                     	;# 
   226  021D                     	;# 
   227  021D                     	;# 
   228  021E                     	;# 
   229  021F                     	;# 
   230  028C                     	;# 
   231  028D                     	;# 
   232  028E                     	;# 
   233  0291                     	;# 
   234  0291                     	;# 
   235  0292                     	;# 
   236  0293                     	;# 
   237  0294                     	;# 
   238  0295                     	;# 
   239  0295                     	;# 
   240  0296                     	;# 
   241  0297                     	;# 
   242  0298                     	;# 
   243  029F                     	;# 
   244  030C                     	;# 
   245  030D                     	;# 
   246  030E                     	;# 
   247  0311                     	;# 
   248  0311                     	;# 
   249  0312                     	;# 
   250  0313                     	;# 
   251  0314                     	;# 
   252  0315                     	;# 
   253  0315                     	;# 
   254  0316                     	;# 
   255  0317                     	;# 
   256  0318                     	;# 
   257  038C                     	;# 
   258  038D                     	;# 
   259  038E                     	;# 
   260  0391                     	;# 
   261  0392                     	;# 
   262  0393                     	;# 
   263  0394                     	;# 
   264  0395                     	;# 
   265  0396                     	;# 
   266  0397                     	;# 
   267  0398                     	;# 
   268  0399                     	;# 
   269  039A                     	;# 
   270  039C                     	;# 
   271  039D                     	;# 
   272  039E                     	;# 
   273  039F                     	;# 
   274  0411                     	;# 
   275  0411                     	;# 
   276  0412                     	;# 
   277  0413                     	;# 
   278  0414                     	;# 
   279  0415                     	;# 
   280  0416                     	;# 
   281  0417                     	;# 
   282  0418                     	;# 
   283  0418                     	;# 
   284  0419                     	;# 
   285  041A                     	;# 
   286  041B                     	;# 
   287  041C                     	;# 
   288  041D                     	;# 
   289  041E                     	;# 
   290  041F                     	;# 
   291  0498                     	;# 
   292  0498                     	;# 
   293  0499                     	;# 
   294  049A                     	;# 
   295  049B                     	;# 
   296  049B                     	;# 
   297  049C                     	;# 
   298  049D                     	;# 
   299  049E                     	;# 
   300  049F                     	;# 
   301  0617                     	;# 
   302  0618                     	;# 
   303  0619                     	;# 
   304  0619                     	;# 
   305  061A                     	;# 
   306  061B                     	;# 
   307  061C                     	;# 
   308  061C                     	;# 
   309  061F                     	;# 
   310  0691                     	;# 
   311  0692                     	;# 
   312  0693                     	;# 
   313  0694                     	;# 
   314  0695                     	;# 
   315  0696                     	;# 
   316  0697                     	;# 
   317  0698                     	;# 
   318  0699                     	;# 
   319  0711                     	;# 
   320  0712                     	;# 
   321  0713                     	;# 
   322  0714                     	;# 
   323  0715                     	;# 
   324  0716                     	;# 
   325  0717                     	;# 
   326  0718                     	;# 
   327  0719                     	;# 
   328  0891                     	;# 
   329  0891                     	;# 
   330  0891                     	;# 
   331  0891                     	;# 
   332  0891                     	;# 
   333  0891                     	;# 
   334  0892                     	;# 
   335  0892                     	;# 
   336  0892                     	;# 
   337  0893                     	;# 
   338  0893                     	;# 
   339  0893                     	;# 
   340  0893                     	;# 
   341  0893                     	;# 
   342  0893                     	;# 
   343  0894                     	;# 
   344  0894                     	;# 
   345  0894                     	;# 
   346  0895                     	;# 
   347  0895                     	;# 
   348  0895                     	;# 
   349  0896                     	;# 
   350  0896                     	;# 
   351  0896                     	;# 
   352  089B                     	;# 
   353  0911                     	;# 
   354  0912                     	;# 
   355  0913                     	;# 
   356  0914                     	;# 
   357  0915                     	;# 
   358  0916                     	;# 
   359  0918                     	;# 
   360  0919                     	;# 
   361  091A                     	;# 
   362  091B                     	;# 
   363  091C                     	;# 
   364  091D                     	;# 
   365  091E                     	;# 
   366  091F                     	;# 
   367  0E0F                     	;# 
   368  0E10                     	;# 
   369  0E11                     	;# 
   370  0E12                     	;# 
   371  0E13                     	;# 
   372  0E14                     	;# 
   373  0E15                     	;# 
   374  0E16                     	;# 
   375  0E17                     	;# 
   376  0E18                     	;# 
   377  0E19                     	;# 
   378  0E1A                     	;# 
   379  0E1B                     	;# 
   380  0E1C                     	;# 
   381  0E1D                     	;# 
   382  0E1E                     	;# 
   383  0E1F                     	;# 
   384  0E20                     	;# 
   385  0E21                     	;# 
   386  0E22                     	;# 
   387  0E24                     	;# 
   388  0E25                     	;# 
   389  0E28                     	;# 
   390  0E29                     	;# 
   391  0E2A                     	;# 
   392  0E2B                     	;# 
   393  0E2C                     	;# 
   394  0E2D                     	;# 
   395  0E2E                     	;# 
   396  0E2F                     	;# 
   397  0E90                     	;# 
   398  0E91                     	;# 
   399  0E92                     	;# 
   400  0E94                     	;# 
   401  0E95                     	;# 
   402  0E9C                     	;# 
   403  0E9D                     	;# 
   404  0E9E                     	;# 
   405  0E9F                     	;# 
   406  0EA0                     	;# 
   407  0EA1                     	;# 
   408  0EA2                     	;# 
   409  0EA3                     	;# 
   410  0EA4                     	;# 
   411  0EA5                     	;# 
   412  0EA6                     	;# 
   413  0EA7                     	;# 
   414  0F0F                     	;# 
   415  0F10                     	;# 
   416  0F11                     	;# 
   417  0F12                     	;# 
   418  0F13                     	;# 
   419  0F14                     	;# 
   420  0F15                     	;# 
   421  0F16                     	;# 
   422  0F17                     	;# 
   423  0F18                     	;# 
   424  0F19                     	;# 
   425  0F1A                     	;# 
   426  0F1B                     	;# 
   427  0F1C                     	;# 
   428  0F1D                     	;# 
   429  0F1E                     	;# 
   430  0F1F                     	;# 
   431  0F20                     	;# 
   432  0F21                     	;# 
   433  0F22                     	;# 
   434  0F23                     	;# 
   435  0F24                     	;# 
   436  0F25                     	;# 
   437  0F26                     	;# 
   438  0F27                     	;# 
   439  0F28                     	;# 
   440  0F29                     	;# 
   441  0F2A                     	;# 
   442  0F2B                     	;# 
   443  0F2C                     	;# 
   444  0F2D                     	;# 
   445  0F2E                     	;# 
   446  0F2F                     	;# 
   447  0F30                     	;# 
   448  0F31                     	;# 
   449  0F32                     	;# 
   450  0F33                     	;# 
   451  0F34                     	;# 
   452  0F35                     	;# 
   453  0F36                     	;# 
   454  0F37                     	;# 
   455  0FE4                     	;# 
   456  0FE5                     	;# 
   457  0FE6                     	;# 
   458  0FE7                     	;# 
   459  0FE8                     	;# 
   460  0FE9                     	;# 
   461  0FEA                     	;# 
   462  0FEB                     	;# 
   463  0FED                     	;# 
   464  0FEE                     	;# 
   465  0FEF                     	;# 
   466  0000                     	;# 
   467  0001                     	;# 
   468  0002                     	;# 
   469  0003                     	;# 
   470  0004                     	;# 
   471  0005                     	;# 
   472  0006                     	;# 
   473  0007                     	;# 
   474  0008                     	;# 
   475  0009                     	;# 
   476  000A                     	;# 
   477  000B                     	;# 
   478  000C                     	;# 
   479  000D                     	;# 
   480  000E                     	;# 
   481  0010                     	;# 
   482  0011                     	;# 
   483  0012                     	;# 
   484  0013                     	;# 
   485  0014                     	;# 
   486  0015                     	;# 
   487  0015                     	;# 
   488  0016                     	;# 
   489  0016                     	;# 
   490  0017                     	;# 
   491  0018                     	;# 
   492  0019                     	;# 
   493  0019                     	;# 
   494  001A                     	;# 
   495  001B                     	;# 
   496  001C                     	;# 
   497  001D                     	;# 
   498  001E                     	;# 
   499  001F                     	;# 
   500  008C                     	;# 
   501  008D                     	;# 
   502  008E                     	;# 
   503  0090                     	;# 
   504  0091                     	;# 
   505  0092                     	;# 
   506  0093                     	;# 
   507  0094                     	;# 
   508  0097                     	;# 
   509  009B                     	;# 
   510  009B                     	;# 
   511  009C                     	;# 
   512  009D                     	;# 
   513  009E                     	;# 
   514  009F                     	;# 
   515  010C                     	;# 
   516  010D                     	;# 
   517  010E                     	;# 
   518  0111                     	;# 
   519  0112                     	;# 
   520  0113                     	;# 
   521  0114                     	;# 
   522  0115                     	;# 
   523  0116                     	;# 
   524  0117                     	;# 
   525  0118                     	;# 
   526  0119                     	;# 
   527  018C                     	;# 
   528  018D                     	;# 
   529  018E                     	;# 
   530  0197                     	;# 
   531  0199                     	;# 
   532  0199                     	;# 
   533  0199                     	;# 
   534  019A                     	;# 
   535  019A                     	;# 
   536  019A                     	;# 
   537  019B                     	;# 
   538  019B                     	;# 
   539  019B                     	;# 
   540  019B                     	;# 
   541  019B                     	;# 
   542  019C                     	;# 
   543  019C                     	;# 
   544  019C                     	;# 
   545  019D                     	;# 
   546  019D                     	;# 
   547  019D                     	;# 
   548  019E                     	;# 
   549  019E                     	;# 
   550  019E                     	;# 
   551  019F                     	;# 
   552  019F                     	;# 
   553  019F                     	;# 
   554  019F                     	;# 
   555  019F                     	;# 
   556  020C                     	;# 
   557  020D                     	;# 
   558  020E                     	;# 
   559  0211                     	;# 
   560  0211                     	;# 
   561  0212                     	;# 
   562  0212                     	;# 
   563  0213                     	;# 
   564  0213                     	;# 
   565  0214                     	;# 
   566  0214                     	;# 
   567  0215                     	;# 
   568  0215                     	;# 
   569  0215                     	;# 
   570  0215                     	;# 
   571  0216                     	;# 
   572  0216                     	;# 
   573  0217                     	;# 
   574  0217                     	;# 
   575  0219                     	;# 
   576  021A                     	;# 
   577  021B                     	;# 
   578  021C                     	;# 
   579  021D                     	;# 
   580  021D                     	;# 
   581  021E                     	;# 
   582  021F                     	;# 
   583  028C                     	;# 
   584  028D                     	;# 
   585  028E                     	;# 
   586  0291                     	;# 
   587  0291                     	;# 
   588  0292                     	;# 
   589  0293                     	;# 
   590  0294                     	;# 
   591  0295                     	;# 
   592  0295                     	;# 
   593  0296                     	;# 
   594  0297                     	;# 
   595  0298                     	;# 
   596  029F                     	;# 
   597  030C                     	;# 
   598  030D                     	;# 
   599  030E                     	;# 
   600  0311                     	;# 
   601  0311                     	;# 
   602  0312                     	;# 
   603  0313                     	;# 
   604  0314                     	;# 
   605  0315                     	;# 
   606  0315                     	;# 
   607  0316                     	;# 
   608  0317                     	;# 
   609  0318                     	;# 
   610  038C                     	;# 
   611  038D                     	;# 
   612  038E                     	;# 
   613  0391                     	;# 
   614  0392                     	;# 
   615  0393                     	;# 
   616  0394                     	;# 
   617  0395                     	;# 
   618  0396                     	;# 
   619  0397                     	;# 
   620  0398                     	;# 
   621  0399                     	;# 
   622  039A                     	;# 
   623  039C                     	;# 
   624  039D                     	;# 
   625  039E                     	;# 
   626  039F                     	;# 
   627  0411                     	;# 
   628  0411                     	;# 
   629  0412                     	;# 
   630  0413                     	;# 
   631  0414                     	;# 
   632  0415                     	;# 
   633  0416                     	;# 
   634  0417                     	;# 
   635  0418                     	;# 
   636  0418                     	;# 
   637  0419                     	;# 
   638  041A                     	;# 
   639  041B                     	;# 
   640  041C                     	;# 
   641  041D                     	;# 
   642  041E                     	;# 
   643  041F                     	;# 
   644  0498                     	;# 
   645  0498                     	;# 
   646  0499                     	;# 
   647  049A                     	;# 
   648  049B                     	;# 
   649  049B                     	;# 
   650  049C                     	;# 
   651  049D                     	;# 
   652  049E                     	;# 
   653  049F                     	;# 
   654  0617                     	;# 
   655  0618                     	;# 
   656  0619                     	;# 
   657  0619                     	;# 
   658  061A                     	;# 
   659  061B                     	;# 
   660  061C                     	;# 
   661  061C                     	;# 
   662  061F                     	;# 
   663  0691                     	;# 
   664  0692                     	;# 
   665  0693                     	;# 
   666  0694                     	;# 
   667  0695                     	;# 
   668  0696                     	;# 
   669  0697                     	;# 
   670  0698                     	;# 
   671  0699                     	;# 
   672  0711                     	;# 
   673  0712                     	;# 
   674  0713                     	;# 
   675  0714                     	;# 
   676  0715                     	;# 
   677  0716                     	;# 
   678  0717                     	;# 
   679  0718                     	;# 
   680  0719                     	;# 
   681  0891                     	;# 
   682  0891                     	;# 
   683  0891                     	;# 
   684  0891                     	;# 
   685  0891                     	;# 
   686  0891                     	;# 
   687  0892                     	;# 
   688  0892                     	;# 
   689  0892                     	;# 
   690  0893                     	;# 
   691  0893                     	;# 
   692  0893                     	;# 
   693  0893                     	;# 
   694  0893                     	;# 
   695  0893                     	;# 
   696  0894                     	;# 
   697  0894                     	;# 
   698  0894                     	;# 
   699  0895                     	;# 
   700  0895                     	;# 
   701  0895                     	;# 
   702  0896                     	;# 
   703  0896                     	;# 
   704  0896                     	;# 
   705  089B                     	;# 
   706  0911                     	;# 
   707  0912                     	;# 
   708  0913                     	;# 
   709  0914                     	;# 
   710  0915                     	;# 
   711  0916                     	;# 
   712  0918                     	;# 
   713  0919                     	;# 
   714  091A                     	;# 
   715  091B                     	;# 
   716  091C                     	;# 
   717  091D                     	;# 
   718  091E                     	;# 
   719  091F                     	;# 
   720  0E0F                     	;# 
   721  0E10                     	;# 
   722  0E11                     	;# 
   723  0E12                     	;# 
   724  0E13                     	;# 
   725  0E14                     	;# 
   726  0E15                     	;# 
   727  0E16                     	;# 
   728  0E17                     	;# 
   729  0E18                     	;# 
   730  0E19                     	;# 
   731  0E1A                     	;# 
   732  0E1B                     	;# 
   733  0E1C                     	;# 
   734  0E1D                     	;# 
   735  0E1E                     	;# 
   736  0E1F                     	;# 
   737  0E20                     	;# 
   738  0E21                     	;# 
   739  0E22                     	;# 
   740  0E24                     	;# 
   741  0E25                     	;# 
   742  0E28                     	;# 
   743  0E29                     	;# 
   744  0E2A                     	;# 
   745  0E2B                     	;# 
   746  0E2C                     	;# 
   747  0E2D                     	;# 
   748  0E2E                     	;# 
   749  0E2F                     	;# 
   750  0E90                     	;# 
   751  0E91                     	;# 
   752  0E92                     	;# 
   753  0E94                     	;# 
   754  0E95                     	;# 
   755  0E9C                     	;# 
   756  0E9D                     	;# 
   757  0E9E                     	;# 
   758  0E9F                     	;# 
   759  0EA0                     	;# 
   760  0EA1                     	;# 
   761  0EA2                     	;# 
   762  0EA3                     	;# 
   763  0EA4                     	;# 
   764  0EA5                     	;# 
   765  0EA6                     	;# 
   766  0EA7                     	;# 
   767  0F0F                     	;# 
   768  0F10                     	;# 
   769  0F11                     	;# 
   770  0F12                     	;# 
   771  0F13                     	;# 
   772  0F14                     	;# 
   773  0F15                     	;# 
   774  0F16                     	;# 
   775  0F17                     	;# 
   776  0F18                     	;# 
   777  0F19                     	;# 
   778  0F1A                     	;# 
   779  0F1B                     	;# 
   780  0F1C                     	;# 
   781  0F1D                     	;# 
   782  0F1E                     	;# 
   783  0F1F                     	;# 
   784  0F20                     	;# 
   785  0F21                     	;# 
   786  0F22                     	;# 
   787  0F23                     	;# 
   788  0F24                     	;# 
   789  0F25                     	;# 
   790  0F26                     	;# 
   791  0F27                     	;# 
   792  0F28                     	;# 
   793  0F29                     	;# 
   794  0F2A                     	;# 
   795  0F2B                     	;# 
   796  0F2C                     	;# 
   797  0F2D                     	;# 
   798  0F2E                     	;# 
   799  0F2F                     	;# 
   800  0F30                     	;# 
   801  0F31                     	;# 
   802  0F32                     	;# 
   803  0F33                     	;# 
   804  0F34                     	;# 
   805  0F35                     	;# 
   806  0F36                     	;# 
   807  0F37                     	;# 
   808  0FE4                     	;# 
   809  0FE5                     	;# 
   810  0FE6                     	;# 
   811  0FE7                     	;# 
   812  0FE8                     	;# 
   813  0FE9                     	;# 
   814  0FEA                     	;# 
   815  0FEB                     	;# 
   816  0FED                     	;# 
   817  0FEE                     	;# 
   818  0FEF                     	;# 
   819  0000                     	;# 
   820  0001                     	;# 
   821  0002                     	;# 
   822  0003                     	;# 
   823  0004                     	;# 
   824  0005                     	;# 
   825  0006                     	;# 
   826  0007                     	;# 
   827  0008                     	;# 
   828  0009                     	;# 
   829  000A                     	;# 
   830  000B                     	;# 
   831  000C                     	;# 
   832  000D                     	;# 
   833  000E                     	;# 
   834  0010                     	;# 
   835  0011                     	;# 
   836  0012                     	;# 
   837  0013                     	;# 
   838  0014                     	;# 
   839  0015                     	;# 
   840  0015                     	;# 
   841  0016                     	;# 
   842  0016                     	;# 
   843  0017                     	;# 
   844  0018                     	;# 
   845  0019                     	;# 
   846  0019                     	;# 
   847  001A                     	;# 
   848  001B                     	;# 
   849  001C                     	;# 
   850  001D                     	;# 
   851  001E                     	;# 
   852  001F                     	;# 
   853  008C                     	;# 
   854  008D                     	;# 
   855  008E                     	;# 
   856  0090                     	;# 
   857  0091                     	;# 
   858  0092                     	;# 
   859  0093                     	;# 
   860  0094                     	;# 
   861  0097                     	;# 
   862  009B                     	;# 
   863  009B                     	;# 
   864  009C                     	;# 
   865  009D                     	;# 
   866  009E                     	;# 
   867  009F                     	;# 
   868  010C                     	;# 
   869  010D                     	;# 
   870  010E                     	;# 
   871  0111                     	;# 
   872  0112                     	;# 
   873  0113                     	;# 
   874  0114                     	;# 
   875  0115                     	;# 
   876  0116                     	;# 
   877  0117                     	;# 
   878  0118                     	;# 
   879  0119                     	;# 
   880  018C                     	;# 
   881  018D                     	;# 
   882  018E                     	;# 
   883  0197                     	;# 
   884  0199                     	;# 
   885  0199                     	;# 
   886  0199                     	;# 
   887  019A                     	;# 
   888  019A                     	;# 
   889  019A                     	;# 
   890  019B                     	;# 
   891  019B                     	;# 
   892  019B                     	;# 
   893  019B                     	;# 
   894  019B                     	;# 
   895  019C                     	;# 
   896  019C                     	;# 
   897  019C                     	;# 
   898  019D                     	;# 
   899  019D                     	;# 
   900  019D                     	;# 
   901  019E                     	;# 
   902  019E                     	;# 
   903  019E                     	;# 
   904  019F                     	;# 
   905  019F                     	;# 
   906  019F                     	;# 
   907  019F                     	;# 
   908  019F                     	;# 
   909  020C                     	;# 
   910  020D                     	;# 
   911  020E                     	;# 
   912  0211                     	;# 
   913  0211                     	;# 
   914  0212                     	;# 
   915  0212                     	;# 
   916  0213                     	;# 
   917  0213                     	;# 
   918  0214                     	;# 
   919  0214                     	;# 
   920  0215                     	;# 
   921  0215                     	;# 
   922  0215                     	;# 
   923  0215                     	;# 
   924  0216                     	;# 
   925  0216                     	;# 
   926  0217                     	;# 
   927  0217                     	;# 
   928  0219                     	;# 
   929  021A                     	;# 
   930  021B                     	;# 
   931  021C                     	;# 
   932  021D                     	;# 
   933  021D                     	;# 
   934  021E                     	;# 
   935  021F                     	;# 
   936  028C                     	;# 
   937  028D                     	;# 
   938  028E                     	;# 
   939  0291                     	;# 
   940  0291                     	;# 
   941  0292                     	;# 
   942  0293                     	;# 
   943  0294                     	;# 
   944  0295                     	;# 
   945  0295                     	;# 
   946  0296                     	;# 
   947  0297                     	;# 
   948  0298                     	;# 
   949  029F                     	;# 
   950  030C                     	;# 
   951  030D                     	;# 
   952  030E                     	;# 
   953  0311                     	;# 
   954  0311                     	;# 
   955  0312                     	;# 
   956  0313                     	;# 
   957  0314                     	;# 
   958  0315                     	;# 
   959  0315                     	;# 
   960  0316                     	;# 
   961  0317                     	;# 
   962  0318                     	;# 
   963  038C                     	;# 
   964  038D                     	;# 
   965  038E                     	;# 
   966  0391                     	;# 
   967  0392                     	;# 
   968  0393                     	;# 
   969  0394                     	;# 
   970  0395                     	;# 
   971  0396                     	;# 
   972  0397                     	;# 
   973  0398                     	;# 
   974  0399                     	;# 
   975  039A                     	;# 
   976  039C                     	;# 
   977  039D                     	;# 
   978  039E                     	;# 
   979  039F                     	;# 
   980  0411                     	;# 
   981  0411                     	;# 
   982  0412                     	;# 
   983  0413                     	;# 
   984  0414                     	;# 
   985  0415                     	;# 
   986  0416                     	;# 
   987  0417                     	;# 
   988  0418                     	;# 
   989  0418                     	;# 
   990  0419                     	;# 
   991  041A                     	;# 
   992  041B                     	;# 
   993  041C                     	;# 
   994  041D                     	;# 
   995  041E                     	;# 
   996  041F                     	;# 
   997  0498                     	;# 
   998  0498                     	;# 
   999  0499                     	;# 
  1000  049A                     	;# 
  1001  049B                     	;# 
  1002  049B                     	;# 
  1003  049C                     	;# 
  1004  049D                     	;# 
  1005  049E                     	;# 
  1006  049F                     	;# 
  1007  0617                     	;# 
  1008  0618                     	;# 
  1009  0619                     	;# 
  1010  0619                     	;# 
  1011  061A                     	;# 
  1012  061B                     	;# 
  1013  061C                     	;# 
  1014  061C                     	;# 
  1015  061F                     	;# 
  1016  0691                     	;# 
  1017  0692                     	;# 
  1018  0693                     	;# 
  1019  0694                     	;# 
  1020  0695                     	;# 
  1021  0696                     	;# 
  1022  0697                     	;# 
  1023  0698                     	;# 
  1024  0699                     	;# 
  1025  0711                     	;# 
  1026  0712                     	;# 
  1027  0713                     	;# 
  1028  0714                     	;# 
  1029  0715                     	;# 
  1030  0716                     	;# 
  1031  0717                     	;# 
  1032  0718                     	;# 
  1033  0719                     	;# 
  1034  0891                     	;# 
  1035  0891                     	;# 
  1036  0891                     	;# 
  1037  0891                     	;# 
  1038  0891                     	;# 
  1039  0891                     	;# 
  1040  0892                     	;# 
  1041  0892                     	;# 
  1042  0892                     	;# 
  1043  0893                     	;# 
  1044  0893                     	;# 
  1045  0893                     	;# 
  1046  0893                     	;# 
  1047  0893                     	;# 
  1048  0893                     	;# 
  1049  0894                     	;# 
  1050  0894                     	;# 
  1051  0894                     	;# 
  1052  0895                     	;# 
  1053  0895                     	;# 
  1054  0895                     	;# 
  1055  0896                     	;# 
  1056  0896                     	;# 
  1057  0896                     	;# 
  1058  089B                     	;# 
  1059  0911                     	;# 
  1060  0912                     	;# 
  1061  0913                     	;# 
  1062  0914                     	;# 
  1063  0915                     	;# 
  1064  0916                     	;# 
  1065  0918                     	;# 
  1066  0919                     	;# 
  1067  091A                     	;# 
  1068  091B                     	;# 
  1069  091C                     	;# 
  1070  091D                     	;# 
  1071  091E                     	;# 
  1072  091F                     	;# 
  1073  0E0F                     	;# 
  1074  0E10                     	;# 
  1075  0E11                     	;# 
  1076  0E12                     	;# 
  1077  0E13                     	;# 
  1078  0E14                     	;# 
  1079  0E15                     	;# 
  1080  0E16                     	;# 
  1081  0E17                     	;# 
  1082  0E18                     	;# 
  1083  0E19                     	;# 
  1084  0E1A                     	;# 
  1085  0E1B                     	;# 
  1086  0E1C                     	;# 
  1087  0E1D                     	;# 
  1088  0E1E                     	;# 
  1089  0E1F                     	;# 
  1090  0E20                     	;# 
  1091  0E21                     	;# 
  1092  0E22                     	;# 
  1093  0E24                     	;# 
  1094  0E25                     	;# 
  1095  0E28                     	;# 
  1096  0E29                     	;# 
  1097  0E2A                     	;# 
  1098  0E2B                     	;# 
  1099  0E2C                     	;# 
  1100  0E2D                     	;# 
  1101  0E2E                     	;# 
  1102  0E2F                     	;# 
  1103  0E90                     	;# 
  1104  0E91                     	;# 
  1105  0E92                     	;# 
  1106  0E94                     	;# 
  1107  0E95                     	;# 
  1108  0E9C                     	;# 
  1109  0E9D                     	;# 
  1110  0E9E                     	;# 
  1111  0E9F                     	;# 
  1112  0EA0                     	;# 
  1113  0EA1                     	;# 
  1114  0EA2                     	;# 
  1115  0EA3                     	;# 
  1116  0EA4                     	;# 
  1117  0EA5                     	;# 
  1118  0EA6                     	;# 
  1119  0EA7                     	;# 
  1120  0F0F                     	;# 
  1121  0F10                     	;# 
  1122  0F11                     	;# 
  1123  0F12                     	;# 
  1124  0F13                     	;# 
  1125  0F14                     	;# 
  1126  0F15                     	;# 
  1127  0F16                     	;# 
  1128  0F17                     	;# 
  1129  0F18                     	;# 
  1130  0F19                     	;# 
  1131  0F1A                     	;# 
  1132  0F1B                     	;# 
  1133  0F1C                     	;# 
  1134  0F1D                     	;# 
  1135  0F1E                     	;# 
  1136  0F1F                     	;# 
  1137  0F20                     	;# 
  1138  0F21                     	;# 
  1139  0F22                     	;# 
  1140  0F23                     	;# 
  1141  0F24                     	;# 
  1142  0F25                     	;# 
  1143  0F26                     	;# 
  1144  0F27                     	;# 
  1145  0F28                     	;# 
  1146  0F29                     	;# 
  1147  0F2A                     	;# 
  1148  0F2B                     	;# 
  1149  0F2C                     	;# 
  1150  0F2D                     	;# 
  1151  0F2E                     	;# 
  1152  0F2F                     	;# 
  1153  0F30                     	;# 
  1154  0F31                     	;# 
  1155  0F32                     	;# 
  1156  0F33                     	;# 
  1157  0F34                     	;# 
  1158  0F35                     	;# 
  1159  0F36                     	;# 
  1160  0F37                     	;# 
  1161  0FE4                     	;# 
  1162  0FE5                     	;# 
  1163  0FE6                     	;# 
  1164  0FE7                     	;# 
  1165  0FE8                     	;# 
  1166  0FE9                     	;# 
  1167  0FEA                     	;# 
  1168  0FEB                     	;# 
  1169  0FED                     	;# 
  1170  0FEE                     	;# 
  1171  0FEF                     	;# 
  1172  0000                     	;# 
  1173  0001                     	;# 
  1174  0002                     	;# 
  1175  0003                     	;# 
  1176  0004                     	;# 
  1177  0005                     	;# 
  1178  0006                     	;# 
  1179  0007                     	;# 
  1180  0008                     	;# 
  1181  0009                     	;# 
  1182  000A                     	;# 
  1183  000B                     	;# 
  1184  000C                     	;# 
  1185  000D                     	;# 
  1186  000E                     	;# 
  1187  0010                     	;# 
  1188  0011                     	;# 
  1189  0012                     	;# 
  1190  0013                     	;# 
  1191  0014                     	;# 
  1192  0015                     	;# 
  1193  0015                     	;# 
  1194  0016                     	;# 
  1195  0016                     	;# 
  1196  0017                     	;# 
  1197  0018                     	;# 
  1198  0019                     	;# 
  1199  0019                     	;# 
  1200  001A                     	;# 
  1201  001B                     	;# 
  1202  001C                     	;# 
  1203  001D                     	;# 
  1204  001E                     	;# 
  1205  001F                     	;# 
  1206  008C                     	;# 
  1207  008D                     	;# 
  1208  008E                     	;# 
  1209  0090                     	;# 
  1210  0091                     	;# 
  1211  0092                     	;# 
  1212  0093                     	;# 
  1213  0094                     	;# 
  1214  0097                     	;# 
  1215  009B                     	;# 
  1216  009B                     	;# 
  1217  009C                     	;# 
  1218  009D                     	;# 
  1219  009E                     	;# 
  1220  009F                     	;# 
  1221  010C                     	;# 
  1222  010D                     	;# 
  1223  010E                     	;# 
  1224  0111                     	;# 
  1225  0112                     	;# 
  1226  0113                     	;# 
  1227  0114                     	;# 
  1228  0115                     	;# 
  1229  0116                     	;# 
  1230  0117                     	;# 
  1231  0118                     	;# 
  1232  0119                     	;# 
  1233  018C                     	;# 
  1234  018D                     	;# 
  1235  018E                     	;# 
  1236  0197                     	;# 
  1237  0199                     	;# 
  1238  0199                     	;# 
  1239  0199                     	;# 
  1240  019A                     	;# 
  1241  019A                     	;# 
  1242  019A                     	;# 
  1243  019B                     	;# 
  1244  019B                     	;# 
  1245  019B                     	;# 
  1246  019B                     	;# 
  1247  019B                     	;# 
  1248  019C                     	;# 
  1249  019C                     	;# 
  1250  019C                     	;# 
  1251  019D                     	;# 
  1252  019D                     	;# 
  1253  019D                     	;# 
  1254  019E                     	;# 
  1255  019E                     	;# 
  1256  019E                     	;# 
  1257  019F                     	;# 
  1258  019F                     	;# 
  1259  019F                     	;# 
  1260  019F                     	;# 
  1261  019F                     	;# 
  1262  020C                     	;# 
  1263  020D                     	;# 
  1264  020E                     	;# 
  1265  0211                     	;# 
  1266  0211                     	;# 
  1267  0212                     	;# 
  1268  0212                     	;# 
  1269  0213                     	;# 
  1270  0213                     	;# 
  1271  0214                     	;# 
  1272  0214                     	;# 
  1273  0215                     	;# 
  1274  0215                     	;# 
  1275  0215                     	;# 
  1276  0215                     	;# 
  1277  0216                     	;# 
  1278  0216                     	;# 
  1279  0217                     	;# 
  1280  0217                     	;# 
  1281  0219                     	;# 
  1282  021A                     	;# 
  1283  021B                     	;# 
  1284  021C                     	;# 
  1285  021D                     	;# 
  1286  021D                     	;# 
  1287  021E                     	;# 
  1288  021F                     	;# 
  1289  028C                     	;# 
  1290  028D                     	;# 
  1291  028E                     	;# 
  1292  0291                     	;# 
  1293  0291                     	;# 
  1294  0292                     	;# 
  1295  0293                     	;# 
  1296  0294                     	;# 
  1297  0295                     	;# 
  1298  0295                     	;# 
  1299  0296                     	;# 
  1300  0297                     	;# 
  1301  0298                     	;# 
  1302  029F                     	;# 
  1303  030C                     	;# 
  1304  030D                     	;# 
  1305  030E                     	;# 
  1306  0311                     	;# 
  1307  0311                     	;# 
  1308  0312                     	;# 
  1309  0313                     	;# 
  1310  0314                     	;# 
  1311  0315                     	;# 
  1312  0315                     	;# 
  1313  0316                     	;# 
  1314  0317                     	;# 
  1315  0318                     	;# 
  1316  038C                     	;# 
  1317  038D                     	;# 
  1318  038E                     	;# 
  1319  0391                     	;# 
  1320  0392                     	;# 
  1321  0393                     	;# 
  1322  0394                     	;# 
  1323  0395                     	;# 
  1324  0396                     	;# 
  1325  0397                     	;# 
  1326  0398                     	;# 
  1327  0399                     	;# 
  1328  039A                     	;# 
  1329  039C                     	;# 
  1330  039D                     	;# 
  1331  039E                     	;# 
  1332  039F                     	;# 
  1333  0411                     	;# 
  1334  0411                     	;# 
  1335  0412                     	;# 
  1336  0413                     	;# 
  1337  0414                     	;# 
  1338  0415                     	;# 
  1339  0416                     	;# 
  1340  0417                     	;# 
  1341  0418                     	;# 
  1342  0418                     	;# 
  1343  0419                     	;# 
  1344  041A                     	;# 
  1345  041B                     	;# 
  1346  041C                     	;# 
  1347  041D                     	;# 
  1348  041E                     	;# 
  1349  041F                     	;# 
  1350  0498                     	;# 
  1351  0498                     	;# 
  1352  0499                     	;# 
  1353  049A                     	;# 
  1354  049B                     	;# 
  1355  049B                     	;# 
  1356  049C                     	;# 
  1357  049D                     	;# 
  1358  049E                     	;# 
  1359  049F                     	;# 
  1360  0617                     	;# 
  1361  0618                     	;# 
  1362  0619                     	;# 
  1363  0619                     	;# 
  1364  061A                     	;# 
  1365  061B                     	;# 
  1366  061C                     	;# 
  1367  061C                     	;# 
  1368  061F                     	;# 
  1369  0691                     	;# 
  1370  0692                     	;# 
  1371  0693                     	;# 
  1372  0694                     	;# 
  1373  0695                     	;# 
  1374  0696                     	;# 
  1375  0697                     	;# 
  1376  0698                     	;# 
  1377  0699                     	;# 
  1378  0711                     	;# 
  1379  0712                     	;# 
  1380  0713                     	;# 
  1381  0714                     	;# 
  1382  0715                     	;# 
  1383  0716                     	;# 
  1384  0717                     	;# 
  1385  0718                     	;# 
  1386  0719                     	;# 
  1387  0891                     	;# 
  1388  0891                     	;# 
  1389  0891                     	;# 
  1390  0891                     	;# 
  1391  0891                     	;# 
  1392  0891                     	;# 
  1393  0892                     	;# 
  1394  0892                     	;# 
  1395  0892                     	;# 
  1396  0893                     	;# 
  1397  0893                     	;# 
  1398  0893                     	;# 
  1399  0893                     	;# 
  1400  0893                     	;# 
  1401  0893                     	;# 
  1402  0894                     	;# 
  1403  0894                     	;# 
  1404  0894                     	;# 
  1405  0895                     	;# 
  1406  0895                     	;# 
  1407  0895                     	;# 
  1408  0896                     	;# 
  1409  0896                     	;# 
  1410  0896                     	;# 
  1411  089B                     	;# 
  1412  0911                     	;# 
  1413  0912                     	;# 
  1414  0913                     	;# 
  1415  0914                     	;# 
  1416  0915                     	;# 
  1417  0916                     	;# 
  1418  0918                     	;# 
  1419  0919                     	;# 
  1420  091A                     	;# 
  1421  091B                     	;# 
  1422  091C                     	;# 
  1423  091D                     	;# 
  1424  091E                     	;# 
  1425  091F                     	;# 
  1426  0E0F                     	;# 
  1427  0E10                     	;# 
  1428  0E11                     	;# 
  1429  0E12                     	;# 
  1430  0E13                     	;# 
  1431  0E14                     	;# 
  1432  0E15                     	;# 
  1433  0E16                     	;# 
  1434  0E17                     	;# 
  1435  0E18                     	;# 
  1436  0E19                     	;# 
  1437  0E1A                     	;# 
  1438  0E1B                     	;# 
  1439  0E1C                     	;# 
  1440  0E1D                     	;# 
  1441  0E1E                     	;# 
  1442  0E1F                     	;# 
  1443  0E20                     	;# 
  1444  0E21                     	;# 
  1445  0E22                     	;# 
  1446  0E24                     	;# 
  1447  0E25                     	;# 
  1448  0E28                     	;# 
  1449  0E29                     	;# 
  1450  0E2A                     	;# 
  1451  0E2B                     	;# 
  1452  0E2C                     	;# 
  1453  0E2D                     	;# 
  1454  0E2E                     	;# 
  1455  0E2F                     	;# 
  1456  0E90                     	;# 
  1457  0E91                     	;# 
  1458  0E92                     	;# 
  1459  0E94                     	;# 
  1460  0E95                     	;# 
  1461  0E9C                     	;# 
  1462  0E9D                     	;# 
  1463  0E9E                     	;# 
  1464  0E9F                     	;# 
  1465  0EA0                     	;# 
  1466  0EA1                     	;# 
  1467  0EA2                     	;# 
  1468  0EA3                     	;# 
  1469  0EA4                     	;# 
  1470  0EA5                     	;# 
  1471  0EA6                     	;# 
  1472  0EA7                     	;# 
  1473  0F0F                     	;# 
  1474  0F10                     	;# 
  1475  0F11                     	;# 
  1476  0F12                     	;# 
  1477  0F13                     	;# 
  1478  0F14                     	;# 
  1479  0F15                     	;# 
  1480  0F16                     	;# 
  1481  0F17                     	;# 
  1482  0F18                     	;# 
  1483  0F19                     	;# 
  1484  0F1A                     	;# 
  1485  0F1B                     	;# 
  1486  0F1C                     	;# 
  1487  0F1D                     	;# 
  1488  0F1E                     	;# 
  1489  0F1F                     	;# 
  1490  0F20                     	;# 
  1491  0F21                     	;# 
  1492  0F22                     	;# 
  1493  0F23                     	;# 
  1494  0F24                     	;# 
  1495  0F25                     	;# 
  1496  0F26                     	;# 
  1497  0F27                     	;# 
  1498  0F28                     	;# 
  1499  0F29                     	;# 
  1500  0F2A                     	;# 
  1501  0F2B                     	;# 
  1502  0F2C                     	;# 
  1503  0F2D                     	;# 
  1504  0F2E                     	;# 
  1505  0F2F                     	;# 
  1506  0F30                     	;# 
  1507  0F31                     	;# 
  1508  0F32                     	;# 
  1509  0F33                     	;# 
  1510  0F34                     	;# 
  1511  0F35                     	;# 
  1512  0F36                     	;# 
  1513  0F37                     	;# 
  1514  0FE4                     	;# 
  1515  0FE5                     	;# 
  1516  0FE6                     	;# 
  1517  0FE7                     	;# 
  1518  0FE8                     	;# 
  1519  0FE9                     	;# 
  1520  0FEA                     	;# 
  1521  0FEB                     	;# 
  1522  0FED                     	;# 
  1523  0FEE                     	;# 
  1524  0FEF                     	;# 
  1525  0000                     	;# 
  1526  0001                     	;# 
  1527  0002                     	;# 
  1528  0003                     	;# 
  1529  0004                     	;# 
  1530  0005                     	;# 
  1531  0006                     	;# 
  1532  0007                     	;# 
  1533  0008                     	;# 
  1534  0009                     	;# 
  1535  000A                     	;# 
  1536  000B                     	;# 
  1537  000C                     	;# 
  1538  000D                     	;# 
  1539  000E                     	;# 
  1540  0010                     	;# 
  1541  0011                     	;# 
  1542  0012                     	;# 
  1543  0013                     	;# 
  1544  0014                     	;# 
  1545  0015                     	;# 
  1546  0015                     	;# 
  1547  0016                     	;# 
  1548  0016                     	;# 
  1549  0017                     	;# 
  1550  0018                     	;# 
  1551  0019                     	;# 
  1552  0019                     	;# 
  1553  001A                     	;# 
  1554  001B                     	;# 
  1555  001C                     	;# 
  1556  001D                     	;# 
  1557  001E                     	;# 
  1558  001F                     	;# 
  1559  008C                     	;# 
  1560  008D                     	;# 
  1561  008E                     	;# 
  1562  0090                     	;# 
  1563  0091                     	;# 
  1564  0092                     	;# 
  1565  0093                     	;# 
  1566  0094                     	;# 
  1567  0097                     	;# 
  1568  009B                     	;# 
  1569  009B                     	;# 
  1570  009C                     	;# 
  1571  009D                     	;# 
  1572  009E                     	;# 
  1573  009F                     	;# 
  1574  010C                     	;# 
  1575  010D                     	;# 
  1576  010E                     	;# 
  1577  0111                     	;# 
  1578  0112                     	;# 
  1579  0113                     	;# 
  1580  0114                     	;# 
  1581  0115                     	;# 
  1582  0116                     	;# 
  1583  0117                     	;# 
  1584  0118                     	;# 
  1585  0119                     	;# 
  1586  018C                     	;# 
  1587  018D                     	;# 
  1588  018E                     	;# 
  1589  0197                     	;# 
  1590  0199                     	;# 
  1591  0199                     	;# 
  1592  0199                     	;# 
  1593  019A                     	;# 
  1594  019A                     	;# 
  1595  019A                     	;# 
  1596  019B                     	;# 
  1597  019B                     	;# 
  1598  019B                     	;# 
  1599  019B                     	;# 
  1600  019B                     	;# 
  1601  019C                     	;# 
  1602  019C                     	;# 
  1603  019C                     	;# 
  1604  019D                     	;# 
  1605  019D                     	;# 
  1606  019D                     	;# 
  1607  019E                     	;# 
  1608  019E                     	;# 
  1609  019E                     	;# 
  1610  019F                     	;# 
  1611  019F                     	;# 
  1612  019F                     	;# 
  1613  019F                     	;# 
  1614  019F                     	;# 
  1615  020C                     	;# 
  1616  020D                     	;# 
  1617  020E                     	;# 
  1618  0211                     	;# 
  1619  0211                     	;# 
  1620  0212                     	;# 
  1621  0212                     	;# 
  1622  0213                     	;# 
  1623  0213                     	;# 
  1624  0214                     	;# 
  1625  0214                     	;# 
  1626  0215                     	;# 
  1627  0215                     	;# 
  1628  0215                     	;# 
  1629  0215                     	;# 
  1630  0216                     	;# 
  1631  0216                     	;# 
  1632  0217                     	;# 
  1633  0217                     	;# 
  1634  0219                     	;# 
  1635  021A                     	;# 
  1636  021B                     	;# 
  1637  021C                     	;# 
  1638  021D                     	;# 
  1639  021D                     	;# 
  1640  021E                     	;# 
  1641  021F                     	;# 
  1642  028C                     	;# 
  1643  028D                     	;# 
  1644  028E                     	;# 
  1645  0291                     	;# 
  1646  0291                     	;# 
  1647  0292                     	;# 
  1648  0293                     	;# 
  1649  0294                     	;# 
  1650  0295                     	;# 
  1651  0295                     	;# 
  1652  0296                     	;# 
  1653  0297                     	;# 
  1654  0298                     	;# 
  1655  029F                     	;# 
  1656  030C                     	;# 
  1657  030D                     	;# 
  1658  030E                     	;# 
  1659  0311                     	;# 
  1660  0311                     	;# 
  1661  0312                     	;# 
  1662  0313                     	;# 
  1663  0314                     	;# 
  1664  0315                     	;# 
  1665  0315                     	;# 
  1666  0316                     	;# 
  1667  0317                     	;# 
  1668  0318                     	;# 
  1669  038C                     	;# 
  1670  038D                     	;# 
  1671  038E                     	;# 
  1672  0391                     	;# 
  1673  0392                     	;# 
  1674  0393                     	;# 
  1675  0394                     	;# 
  1676  0395                     	;# 
  1677  0396                     	;# 
  1678  0397                     	;# 
  1679  0398                     	;# 
  1680  0399                     	;# 
  1681  039A                     	;# 
  1682  039C                     	;# 
  1683  039D                     	;# 
  1684  039E                     	;# 
  1685  039F                     	;# 
  1686  0411                     	;# 
  1687  0411                     	;# 
  1688  0412                     	;# 
  1689  0413                     	;# 
  1690  0414                     	;# 
  1691  0415                     	;# 
  1692  0416                     	;# 
  1693  0417                     	;# 
  1694  0418                     	;# 
  1695  0418                     	;# 
  1696  0419                     	;# 
  1697  041A                     	;# 
  1698  041B                     	;# 
  1699  041C                     	;# 
  1700  041D                     	;# 
  1701  041E                     	;# 
  1702  041F                     	;# 
  1703  0498                     	;# 
  1704  0498                     	;# 
  1705  0499                     	;# 
  1706  049A                     	;# 
  1707  049B                     	;# 
  1708  049B                     	;# 
  1709  049C                     	;# 
  1710  049D                     	;# 
  1711  049E                     	;# 
  1712  049F                     	;# 
  1713  0617                     	;# 
  1714  0618                     	;# 
  1715  0619                     	;# 
  1716  0619                     	;# 
  1717  061A                     	;# 
  1718  061B                     	;# 
  1719  061C                     	;# 
  1720  061C                     	;# 
  1721  061F                     	;# 
  1722  0691                     	;# 
  1723  0692                     	;# 
  1724  0693                     	;# 
  1725  0694                     	;# 
  1726  0695                     	;# 
  1727  0696                     	;# 
  1728  0697                     	;# 
  1729  0698                     	;# 
  1730  0699                     	;# 
  1731  0711                     	;# 
  1732  0712                     	;# 
  1733  0713                     	;# 
  1734  0714                     	;# 
  1735  0715                     	;# 
  1736  0716                     	;# 
  1737  0717                     	;# 
  1738  0718                     	;# 
  1739  0719                     	;# 
  1740  0891                     	;# 
  1741  0891                     	;# 
  1742  0891                     	;# 
  1743  0891                     	;# 
  1744  0891                     	;# 
  1745  0891                     	;# 
  1746  0892                     	;# 
  1747  0892                     	;# 
  1748  0892                     	;# 
  1749  0893                     	;# 
  1750  0893                     	;# 
  1751  0893                     	;# 
  1752  0893                     	;# 
  1753  0893                     	;# 
  1754  0893                     	;# 
  1755  0894                     	;# 
  1756  0894                     	;# 
  1757  0894                     	;# 
  1758  0895                     	;# 
  1759  0895                     	;# 
  1760  0895                     	;# 
  1761  0896                     	;# 
  1762  0896                     	;# 
  1763  0896                     	;# 
  1764  089B                     	;# 
  1765  0911                     	;# 
  1766  0912                     	;# 
  1767  0913                     	;# 
  1768  0914                     	;# 
  1769  0915                     	;# 
  1770  0916                     	;# 
  1771  0918                     	;# 
  1772  0919                     	;# 
  1773  091A                     	;# 
  1774  091B                     	;# 
  1775  091C                     	;# 
  1776  091D                     	;# 
  1777  091E                     	;# 
  1778  091F                     	;# 
  1779  0E0F                     	;# 
  1780  0E10                     	;# 
  1781  0E11                     	;# 
  1782  0E12                     	;# 
  1783  0E13                     	;# 
  1784  0E14                     	;# 
  1785  0E15                     	;# 
  1786  0E16                     	;# 
  1787  0E17                     	;# 
  1788  0E18                     	;# 
  1789  0E19                     	;# 
  1790  0E1A                     	;# 
  1791  0E1B                     	;# 
  1792  0E1C                     	;# 
  1793  0E1D                     	;# 
  1794  0E1E                     	;# 
  1795  0E1F                     	;# 
  1796  0E20                     	;# 
  1797  0E21                     	;# 
  1798  0E22                     	;# 
  1799  0E24                     	;# 
  1800  0E25                     	;# 
  1801  0E28                     	;# 
  1802  0E29                     	;# 
  1803  0E2A                     	;# 
  1804  0E2B                     	;# 
  1805  0E2C                     	;# 
  1806  0E2D                     	;# 
  1807  0E2E                     	;# 
  1808  0E2F                     	;# 
  1809  0E90                     	;# 
  1810  0E91                     	;# 
  1811  0E92                     	;# 
  1812  0E94                     	;# 
  1813  0E95                     	;# 
  1814  0E9C                     	;# 
  1815  0E9D                     	;# 
  1816  0E9E                     	;# 
  1817  0E9F                     	;# 
  1818  0EA0                     	;# 
  1819  0EA1                     	;# 
  1820  0EA2                     	;# 
  1821  0EA3                     	;# 
  1822  0EA4                     	;# 
  1823  0EA5                     	;# 
  1824  0EA6                     	;# 
  1825  0EA7                     	;# 
  1826  0F0F                     	;# 
  1827  0F10                     	;# 
  1828  0F11                     	;# 
  1829  0F12                     	;# 
  1830  0F13                     	;# 
  1831  0F14                     	;# 
  1832  0F15                     	;# 
  1833  0F16                     	;# 
  1834  0F17                     	;# 
  1835  0F18                     	;# 
  1836  0F19                     	;# 
  1837  0F1A                     	;# 
  1838  0F1B                     	;# 
  1839  0F1C                     	;# 
  1840  0F1D                     	;# 
  1841  0F1E                     	;# 
  1842  0F1F                     	;# 
  1843  0F20                     	;# 
  1844  0F21                     	;# 
  1845  0F22                     	;# 
  1846  0F23                     	;# 
  1847  0F24                     	;# 
  1848  0F25                     	;# 
  1849  0F26                     	;# 
  1850  0F27                     	;# 
  1851  0F28                     	;# 
  1852  0F29                     	;# 
  1853  0F2A                     	;# 
  1854  0F2B                     	;# 
  1855  0F2C                     	;# 
  1856  0F2D                     	;# 
  1857  0F2E                     	;# 
  1858  0F2F                     	;# 
  1859  0F30                     	;# 
  1860  0F31                     	;# 
  1861  0F32                     	;# 
  1862  0F33                     	;# 
  1863  0F34                     	;# 
  1864  0F35                     	;# 
  1865  0F36                     	;# 
  1866  0F37                     	;# 
  1867  0FE4                     	;# 
  1868  0FE5                     	;# 
  1869  0FE6                     	;# 
  1870  0FE7                     	;# 
  1871  0FE8                     	;# 
  1872  0FE9                     	;# 
  1873  0FEA                     	;# 
  1874  0FEB                     	;# 
  1875  0FED                     	;# 
  1876  0FEE                     	;# 
  1877  0FEF                     	;# 
  1878  0000                     	;# 
  1879  0001                     	;# 
  1880  0002                     	;# 
  1881  0003                     	;# 
  1882  0004                     	;# 
  1883  0005                     	;# 
  1884  0006                     	;# 
  1885  0007                     	;# 
  1886  0008                     	;# 
  1887  0009                     	;# 
  1888  000A                     	;# 
  1889  000B                     	;# 
  1890  000C                     	;# 
  1891  000D                     	;# 
  1892  000E                     	;# 
  1893  0010                     	;# 
  1894  0011                     	;# 
  1895  0012                     	;# 
  1896  0013                     	;# 
  1897  0014                     	;# 
  1898  0015                     	;# 
  1899  0015                     	;# 
  1900  0016                     	;# 
  1901  0016                     	;# 
  1902  0017                     	;# 
  1903  0018                     	;# 
  1904  0019                     	;# 
  1905  0019                     	;# 
  1906  001A                     	;# 
  1907  001B                     	;# 
  1908  001C                     	;# 
  1909  001D                     	;# 
  1910  001E                     	;# 
  1911  001F                     	;# 
  1912  008C                     	;# 
  1913  008D                     	;# 
  1914  008E                     	;# 
  1915  0090                     	;# 
  1916  0091                     	;# 
  1917  0092                     	;# 
  1918  0093                     	;# 
  1919  0094                     	;# 
  1920  0097                     	;# 
  1921  009B                     	;# 
  1922  009B                     	;# 
  1923  009C                     	;# 
  1924  009D                     	;# 
  1925  009E                     	;# 
  1926  009F                     	;# 
  1927  010C                     	;# 
  1928  010D                     	;# 
  1929  010E                     	;# 
  1930  0111                     	;# 
  1931  0112                     	;# 
  1932  0113                     	;# 
  1933  0114                     	;# 
  1934  0115                     	;# 
  1935  0116                     	;# 
  1936  0117                     	;# 
  1937  0118                     	;# 
  1938  0119                     	;# 
  1939  018C                     	;# 
  1940  018D                     	;# 
  1941  018E                     	;# 
  1942  0197                     	;# 
  1943  0199                     	;# 
  1944  0199                     	;# 
  1945  0199                     	;# 
  1946  019A                     	;# 
  1947  019A                     	;# 
  1948  019A                     	;# 
  1949  019B                     	;# 
  1950  019B                     	;# 
  1951  019B                     	;# 
  1952  019B                     	;# 
  1953  019B                     	;# 
  1954  019C                     	;# 
  1955  019C                     	;# 
  1956  019C                     	;# 
  1957  019D                     	;# 
  1958  019D                     	;# 
  1959  019D                     	;# 
  1960  019E                     	;# 
  1961  019E                     	;# 
  1962  019E                     	;# 
  1963  019F                     	;# 
  1964  019F                     	;# 
  1965  019F                     	;# 
  1966  019F                     	;# 
  1967  019F                     	;# 
  1968  020C                     	;# 
  1969  020D                     	;# 
  1970  020E                     	;# 
  1971  0211                     	;# 
  1972  0211                     	;# 
  1973  0212                     	;# 
  1974  0212                     	;# 
  1975  0213                     	;# 
  1976  0213                     	;# 
  1977  0214                     	;# 
  1978  0214                     	;# 
  1979  0215                     	;# 
  1980  0215                     	;# 
  1981  0215                     	;# 
  1982  0215                     	;# 
  1983  0216                     	;# 
  1984  0216                     	;# 
  1985  0217                     	;# 
  1986  0217                     	;# 
  1987  0219                     	;# 
  1988  021A                     	;# 
  1989  021B                     	;# 
  1990  021C                     	;# 
  1991  021D                     	;# 
  1992  021D                     	;# 
  1993  021E                     	;# 
  1994  021F                     	;# 
  1995  028C                     	;# 
  1996  028D                     	;# 
  1997  028E                     	;# 
  1998  0291                     	;# 
  1999  0291                     	;# 
  2000  0292                     	;# 
  2001  0293                     	;# 
  2002  0294                     	;# 
  2003  0295                     	;# 
  2004  0295                     	;# 
  2005  0296                     	;# 
  2006  0297                     	;# 
  2007  0298                     	;# 
  2008  029F                     	;# 
  2009  030C                     	;# 
  2010  030D                     	;# 
  2011  030E                     	;# 
  2012  0311                     	;# 
  2013  0311                     	;# 
  2014  0312                     	;# 
  2015  0313                     	;# 
  2016  0314                     	;# 
  2017  0315                     	;# 
  2018  0315                     	;# 
  2019  0316                     	;# 
  2020  0317                     	;# 
  2021  0318                     	;# 
  2022  038C                     	;# 
  2023  038D                     	;# 
  2024  038E                     	;# 
  2025  0391                     	;# 
  2026  0392                     	;# 
  2027  0393                     	;# 
  2028  0394                     	;# 
  2029  0395                     	;# 
  2030  0396                     	;# 
  2031  0397                     	;# 
  2032  0398                     	;# 
  2033  0399                     	;# 
  2034  039A                     	;# 
  2035  039C                     	;# 
  2036  039D                     	;# 
  2037  039E                     	;# 
  2038  039F                     	;# 
  2039  0411                     	;# 
  2040  0411                     	;# 
  2041  0412                     	;# 
  2042  0413                     	;# 
  2043  0414                     	;# 
  2044  0415                     	;# 
  2045  0416                     	;# 
  2046  0417                     	;# 
  2047  0418                     	;# 
  2048  0418                     	;# 
  2049  0419                     	;# 
  2050  041A                     	;# 
  2051  041B                     	;# 
  2052  041C                     	;# 
  2053  041D                     	;# 
  2054  041E                     	;# 
  2055  041F                     	;# 
  2056  0498                     	;# 
  2057  0498                     	;# 
  2058  0499                     	;# 
  2059  049A                     	;# 
  2060  049B                     	;# 
  2061  049B                     	;# 
  2062  049C                     	;# 
  2063  049D                     	;# 
  2064  049E                     	;# 
  2065  049F                     	;# 
  2066  0617                     	;# 
  2067  0618                     	;# 
  2068  0619                     	;# 
  2069  0619                     	;# 
  2070  061A                     	;# 
  2071  061B                     	;# 
  2072  061C                     	;# 
  2073  061C                     	;# 
  2074  061F                     	;# 
  2075  0691                     	;# 
  2076  0692                     	;# 
  2077  0693                     	;# 
  2078  0694                     	;# 
  2079  0695                     	;# 
  2080  0696                     	;# 
  2081  0697                     	;# 
  2082  0698                     	;# 
  2083  0699                     	;# 
  2084  0711                     	;# 
  2085  0712                     	;# 
  2086  0713                     	;# 
  2087  0714                     	;# 
  2088  0715                     	;# 
  2089  0716                     	;# 
  2090  0717                     	;# 
  2091  0718                     	;# 
  2092  0719                     	;# 
  2093  0891                     	;# 
  2094  0891                     	;# 
  2095  0891                     	;# 
  2096  0891                     	;# 
  2097  0891                     	;# 
  2098  0891                     	;# 
  2099  0892                     	;# 
  2100  0892                     	;# 
  2101  0892                     	;# 
  2102  0893                     	;# 
  2103  0893                     	;# 
  2104  0893                     	;# 
  2105  0893                     	;# 
  2106  0893                     	;# 
  2107  0893                     	;# 
  2108  0894                     	;# 
  2109  0894                     	;# 
  2110  0894                     	;# 
  2111  0895                     	;# 
  2112  0895                     	;# 
  2113  0895                     	;# 
  2114  0896                     	;# 
  2115  0896                     	;# 
  2116  0896                     	;# 
  2117  089B                     	;# 
  2118  0911                     	;# 
  2119  0912                     	;# 
  2120  0913                     	;# 
  2121  0914                     	;# 
  2122  0915                     	;# 
  2123  0916                     	;# 
  2124  0918                     	;# 
  2125  0919                     	;# 
  2126  091A                     	;# 
  2127  091B                     	;# 
  2128  091C                     	;# 
  2129  091D                     	;# 
  2130  091E                     	;# 
  2131  091F                     	;# 
  2132  0E0F                     	;# 
  2133  0E10                     	;# 
  2134  0E11                     	;# 
  2135  0E12                     	;# 
  2136  0E13                     	;# 
  2137  0E14                     	;# 
  2138  0E15                     	;# 
  2139  0E16                     	;# 
  2140  0E17                     	;# 
  2141  0E18                     	;# 
  2142  0E19                     	;# 
  2143  0E1A                     	;# 
  2144  0E1B                     	;# 
  2145  0E1C                     	;# 
  2146  0E1D                     	;# 
  2147  0E1E                     	;# 
  2148  0E1F                     	;# 
  2149  0E20                     	;# 
  2150  0E21                     	;# 
  2151  0E22                     	;# 
  2152  0E24                     	;# 
  2153  0E25                     	;# 
  2154  0E28                     	;# 
  2155  0E29                     	;# 
  2156  0E2A                     	;# 
  2157  0E2B                     	;# 
  2158  0E2C                     	;# 
  2159  0E2D                     	;# 
  2160  0E2E                     	;# 
  2161  0E2F                     	;# 
  2162  0E90                     	;# 
  2163  0E91                     	;# 
  2164  0E92                     	;# 
  2165  0E94                     	;# 
  2166  0E95                     	;# 
  2167  0E9C                     	;# 
  2168  0E9D                     	;# 
  2169  0E9E                     	;# 
  2170  0E9F                     	;# 
  2171  0EA0                     	;# 
  2172  0EA1                     	;# 
  2173  0EA2                     	;# 
  2174  0EA3                     	;# 
  2175  0EA4                     	;# 
  2176  0EA5                     	;# 
  2177  0EA6                     	;# 
  2178  0EA7                     	;# 
  2179  0F0F                     	;# 
  2180  0F10                     	;# 
  2181  0F11                     	;# 
  2182  0F12                     	;# 
  2183  0F13                     	;# 
  2184  0F14                     	;# 
  2185  0F15                     	;# 
  2186  0F16                     	;# 
  2187  0F17                     	;# 
  2188  0F18                     	;# 
  2189  0F19                     	;# 
  2190  0F1A                     	;# 
  2191  0F1B                     	;# 
  2192  0F1C                     	;# 
  2193  0F1D                     	;# 
  2194  0F1E                     	;# 
  2195  0F1F                     	;# 
  2196  0F20                     	;# 
  2197  0F21                     	;# 
  2198  0F22                     	;# 
  2199  0F23                     	;# 
  2200  0F24                     	;# 
  2201  0F25                     	;# 
  2202  0F26                     	;# 
  2203  0F27                     	;# 
  2204  0F28                     	;# 
  2205  0F29                     	;# 
  2206  0F2A                     	;# 
  2207  0F2B                     	;# 
  2208  0F2C                     	;# 
  2209  0F2D                     	;# 
  2210  0F2E                     	;# 
  2211  0F2F                     	;# 
  2212  0F30                     	;# 
  2213  0F31                     	;# 
  2214  0F32                     	;# 
  2215  0F33                     	;# 
  2216  0F34                     	;# 
  2217  0F35                     	;# 
  2218  0F36                     	;# 
  2219  0F37                     	;# 
  2220  0FE4                     	;# 
  2221  0FE5                     	;# 
  2222  0FE6                     	;# 
  2223  0FE7                     	;# 
  2224  0FE8                     	;# 
  2225  0FE9                     	;# 
  2226  0FEA                     	;# 
  2227  0FEB                     	;# 
  2228  0FED                     	;# 
  2229  0FEE                     	;# 
  2230  0FEF                     	;# 
  2231  0000                     	;# 
  2232  0001                     	;# 
  2233  0002                     	;# 
  2234  0003                     	;# 
  2235  0004                     	;# 
  2236  0005                     	;# 
  2237  0006                     	;# 
  2238  0007                     	;# 
  2239  0008                     	;# 
  2240  0009                     	;# 
  2241  000A                     	;# 
  2242  000B                     	;# 
  2243  000C                     	;# 
  2244  000D                     	;# 
  2245  000E                     	;# 
  2246  0010                     	;# 
  2247  0011                     	;# 
  2248  0012                     	;# 
  2249  0013                     	;# 
  2250  0014                     	;# 
  2251  0015                     	;# 
  2252  0015                     	;# 
  2253  0016                     	;# 
  2254  0016                     	;# 
  2255  0017                     	;# 
  2256  0018                     	;# 
  2257  0019                     	;# 
  2258  0019                     	;# 
  2259  001A                     	;# 
  2260  001B                     	;# 
  2261  001C                     	;# 
  2262  001D                     	;# 
  2263  001E                     	;# 
  2264  001F                     	;# 
  2265  008C                     	;# 
  2266  008D                     	;# 
  2267  008E                     	;# 
  2268  0090                     	;# 
  2269  0091                     	;# 
  2270  0092                     	;# 
  2271  0093                     	;# 
  2272  0094                     	;# 
  2273  0097                     	;# 
  2274  009B                     	;# 
  2275  009B                     	;# 
  2276  009C                     	;# 
  2277  009D                     	;# 
  2278  009E                     	;# 
  2279  009F                     	;# 
  2280  010C                     	;# 
  2281  010D                     	;# 
  2282  010E                     	;# 
  2283  0111                     	;# 
  2284  0112                     	;# 
  2285  0113                     	;# 
  2286  0114                     	;# 
  2287  0115                     	;# 
  2288  0116                     	;# 
  2289  0117                     	;# 
  2290  0118                     	;# 
  2291  0119                     	;# 
  2292  018C                     	;# 
  2293  018D                     	;# 
  2294  018E                     	;# 
  2295  0197                     	;# 
  2296  0199                     	;# 
  2297  0199                     	;# 
  2298  0199                     	;# 
  2299  019A                     	;# 
  2300  019A                     	;# 
  2301  019A                     	;# 
  2302  019B                     	;# 
  2303  019B                     	;# 
  2304  019B                     	;# 
  2305  019B                     	;# 
  2306  019B                     	;# 
  2307  019C                     	;# 
  2308  019C                     	;# 
  2309  019C                     	;# 
  2310  019D                     	;# 
  2311  019D                     	;# 
  2312  019D                     	;# 
  2313  019E                     	;# 
  2314  019E                     	;# 
  2315  019E                     	;# 
  2316  019F                     	;# 
  2317  019F                     	;# 
  2318  019F                     	;# 
  2319  019F                     	;# 
  2320  019F                     	;# 
  2321  020C                     	;# 
  2322  020D                     	;# 
  2323  020E                     	;# 
  2324  0211                     	;# 
  2325  0211                     	;# 
  2326  0212                     	;# 
  2327  0212                     	;# 
  2328  0213                     	;# 
  2329  0213                     	;# 
  2330  0214                     	;# 
  2331  0214                     	;# 
  2332  0215                     	;# 
  2333  0215                     	;# 
  2334  0215                     	;# 
  2335  0215                     	;# 
  2336  0216                     	;# 
  2337  0216                     	;# 
  2338  0217                     	;# 
  2339  0217                     	;# 
  2340  0219                     	;# 
  2341  021A                     	;# 
  2342  021B                     	;# 
  2343  021C                     	;# 
  2344  021D                     	;# 
  2345  021D                     	;# 
  2346  021E                     	;# 
  2347  021F                     	;# 
  2348  028C                     	;# 
  2349  028D                     	;# 
  2350  028E                     	;# 
  2351  0291                     	;# 
  2352  0291                     	;# 
  2353  0292                     	;# 
  2354  0293                     	;# 
  2355  0294                     	;# 
  2356  0295                     	;# 
  2357  0295                     	;# 
  2358  0296                     	;# 
  2359  0297                     	;# 
  2360  0298                     	;# 
  2361  029F                     	;# 
  2362  030C                     	;# 
  2363  030D                     	;# 
  2364  030E                     	;# 
  2365  0311                     	;# 
  2366  0311                     	;# 
  2367  0312                     	;# 
  2368  0313                     	;# 
  2369  0314                     	;# 
  2370  0315                     	;# 
  2371  0315                     	;# 
  2372  0316                     	;# 
  2373  0317                     	;# 
  2374  0318                     	;# 
  2375  038C                     	;# 
  2376  038D                     	;# 
  2377  038E                     	;# 
  2378  0391                     	;# 
  2379  0392                     	;# 
  2380  0393                     	;# 
  2381  0394                     	;# 
  2382  0395                     	;# 
  2383  0396                     	;# 
  2384  0397                     	;# 
  2385  0398                     	;# 
  2386  0399                     	;# 
  2387  039A                     	;# 
  2388  039C                     	;# 
  2389  039D                     	;# 
  2390  039E                     	;# 
  2391  039F                     	;# 
  2392  0411                     	;# 
  2393  0411                     	;# 
  2394  0412                     	;# 
  2395  0413                     	;# 
  2396  0414                     	;# 
  2397  0415                     	;# 
  2398  0416                     	;# 
  2399  0417                     	;# 
  2400  0418                     	;# 
  2401  0418                     	;# 
  2402  0419                     	;# 
  2403  041A                     	;# 
  2404  041B                     	;# 
  2405  041C                     	;# 
  2406  041D                     	;# 
  2407  041E                     	;# 
  2408  041F                     	;# 
  2409  0498                     	;# 
  2410  0498                     	;# 
  2411  0499                     	;# 
  2412  049A                     	;# 
  2413  049B                     	;# 
  2414  049B                     	;# 
  2415  049C                     	;# 
  2416  049D                     	;# 
  2417  049E                     	;# 
  2418  049F                     	;# 
  2419  0617                     	;# 
  2420  0618                     	;# 
  2421  0619                     	;# 
  2422  0619                     	;# 
  2423  061A                     	;# 
  2424  061B                     	;# 
  2425  061C                     	;# 
  2426  061C                     	;# 
  2427  061F                     	;# 
  2428  0691                     	;# 
  2429  0692                     	;# 
  2430  0693                     	;# 
  2431  0694                     	;# 
  2432  0695                     	;# 
  2433  0696                     	;# 
  2434  0697                     	;# 
  2435  0698                     	;# 
  2436  0699                     	;# 
  2437  0711                     	;# 
  2438  0712                     	;# 
  2439  0713                     	;# 
  2440  0714                     	;# 
  2441  0715                     	;# 
  2442  0716                     	;# 
  2443  0717                     	;# 
  2444  0718                     	;# 
  2445  0719                     	;# 
  2446  0891                     	;# 
  2447  0891                     	;# 
  2448  0891                     	;# 
  2449  0891                     	;# 
  2450  0891                     	;# 
  2451  0891                     	;# 
  2452  0892                     	;# 
  2453  0892                     	;# 
  2454  0892                     	;# 
  2455  0893                     	;# 
  2456  0893                     	;# 
  2457  0893                     	;# 
  2458  0893                     	;# 
  2459  0893                     	;# 
  2460  0893                     	;# 
  2461  0894                     	;# 
  2462  0894                     	;# 
  2463  0894                     	;# 
  2464  0895                     	;# 
  2465  0895                     	;# 
  2466  0895                     	;# 
  2467  0896                     	;# 
  2468  0896                     	;# 
  2469  0896                     	;# 
  2470  089B                     	;# 
  2471  0911                     	;# 
  2472  0912                     	;# 
  2473  0913                     	;# 
  2474  0914                     	;# 
  2475  0915                     	;# 
  2476  0916                     	;# 
  2477  0918                     	;# 
  2478  0919                     	;# 
  2479  091A                     	;# 
  2480  091B                     	;# 
  2481  091C                     	;# 
  2482  091D                     	;# 
  2483  091E                     	;# 
  2484  091F                     	;# 
  2485  0E0F                     	;# 
  2486  0E10                     	;# 
  2487  0E11                     	;# 
  2488  0E12                     	;# 
  2489  0E13                     	;# 
  2490  0E14                     	;# 
  2491  0E15                     	;# 
  2492  0E16                     	;# 
  2493  0E17                     	;# 
  2494  0E18                     	;# 
  2495  0E19                     	;# 
  2496  0E1A                     	;# 
  2497  0E1B                     	;# 
  2498  0E1C                     	;# 
  2499  0E1D                     	;# 
  2500  0E1E                     	;# 
  2501  0E1F                     	;# 
  2502  0E20                     	;# 
  2503  0E21                     	;# 
  2504  0E22                     	;# 
  2505  0E24                     	;# 
  2506  0E25                     	;# 
  2507  0E28                     	;# 
  2508  0E29                     	;# 
  2509  0E2A                     	;# 
  2510  0E2B                     	;# 
  2511  0E2C                     	;# 
  2512  0E2D                     	;# 
  2513  0E2E                     	;# 
  2514  0E2F                     	;# 
  2515  0E90                     	;# 
  2516  0E91                     	;# 
  2517  0E92                     	;# 
  2518  0E94                     	;# 
  2519  0E95                     	;# 
  2520  0E9C                     	;# 
  2521  0E9D                     	;# 
  2522  0E9E                     	;# 
  2523  0E9F                     	;# 
  2524  0EA0                     	;# 
  2525  0EA1                     	;# 
  2526  0EA2                     	;# 
  2527  0EA3                     	;# 
  2528  0EA4                     	;# 
  2529  0EA5                     	;# 
  2530  0EA6                     	;# 
  2531  0EA7                     	;# 
  2532  0F0F                     	;# 
  2533  0F10                     	;# 
  2534  0F11                     	;# 
  2535  0F12                     	;# 
  2536  0F13                     	;# 
  2537  0F14                     	;# 
  2538  0F15                     	;# 
  2539  0F16                     	;# 
  2540  0F17                     	;# 
  2541  0F18                     	;# 
  2542  0F19                     	;# 
  2543  0F1A                     	;# 
  2544  0F1B                     	;# 
  2545  0F1C                     	;# 
  2546  0F1D                     	;# 
  2547  0F1E                     	;# 
  2548  0F1F                     	;# 
  2549  0F20                     	;# 
  2550  0F21                     	;# 
  2551  0F22                     	;# 
  2552  0F23                     	;# 
  2553  0F24                     	;# 
  2554  0F25                     	;# 
  2555  0F26                     	;# 
  2556  0F27                     	;# 
  2557  0F28                     	;# 
  2558  0F29                     	;# 
  2559  0F2A                     	;# 
  2560  0F2B                     	;# 
  2561  0F2C                     	;# 
  2562  0F2D                     	;# 
  2563  0F2E                     	;# 
  2564  0F2F                     	;# 
  2565  0F30                     	;# 
  2566  0F31                     	;# 
  2567  0F32                     	;# 
  2568  0F33                     	;# 
  2569  0F34                     	;# 
  2570  0F35                     	;# 
  2571  0F36                     	;# 
  2572  0F37                     	;# 
  2573  0FE4                     	;# 
  2574  0FE5                     	;# 
  2575  0FE6                     	;# 
  2576  0FE7                     	;# 
  2577  0FE8                     	;# 
  2578  0FE9                     	;# 
  2579  0FEA                     	;# 
  2580  0FEB                     	;# 
  2581  0FED                     	;# 
  2582  0FEE                     	;# 
  2583  0FEF                     	;# 
  2584                           
  2585                           	psect	nvBANK0
  2586  0067                     __pnvBANK0:	
  2587  0067                     _i2c2_driver_i2cISR:	
  2588  0067                     	ds	2
  2589  0012                     _PIR2bits	set	18
  2590  000B                     _INTCONbits	set	11
  2591  008E                     _TRISC	set	142
  2592  008D                     _TRISB	set	141
  2593  008C                     _TRISA	set	140
  2594  0097                     _WDTCON	set	151
  2595  0092                     _PIE2bits	set	146
  2596  010C                     _LATAbits	set	268
  2597  010E                     _LATCbits	set	270
  2598  010E                     _LATC	set	270
  2599  010D                     _LATB	set	269
  2600  010C                     _LATA	set	268
  2601  018C                     _ANSELA	set	396
  2602  018D                     _ANSELB	set	397
  2603  018E                     _ANSELC	set	398
  2604  021C                     _SSP2STATbits	set	540
  2605  021B                     _SSP2MSK	set	539
  2606  0219                     _SSP2BUF	set	537
  2607  021E                     _SSP2CON2bits	set	542
  2608  021A                     _SSP2ADD	set	538
  2609  021E                     _SSP2CON2	set	542
  2610  021D                     _SSP2CON1	set	541
  2611  021C                     _SSP2STAT	set	540
  2612  021D                     _SSP2CON1bits	set	541
  2613  020E                     _WPUC	set	526
  2614  020C                     _WPUA	set	524
  2615  020D                     _WPUB	set	525
  2616  028E                     _ODCONC	set	654
  2617  028D                     _ODCONB	set	653
  2618  028C                     _ODCONA	set	652
  2619  030E                     _SLRCONC	set	782
  2620  030D                     _SLRCONB	set	781
  2621  030C                     _SLRCONA	set	780
  2622  0916                     _PMD5	set	2326
  2623  0915                     _PMD4	set	2325
  2624  0914                     _PMD3	set	2324
  2625  0913                     _PMD2	set	2323
  2626  0912                     _PMD1	set	2322
  2627  0911                     _PMD0	set	2321
  2628  091E                     _OSCTUNE	set	2334
  2629  091F                     _OSCFRQ	set	2335
  2630  091D                     _OSCEN	set	2333
  2631  091B                     _OSCCON3	set	2331
  2632  0919                     _OSCCON1	set	2329
  2633  0E1D                     _SSP2CLKPPS	set	3613
  2634  0E1E                     _SSP2DATPPS	set	3614
  2635  0EA6                     _RC6PPS	set	3750
  2636  0EA4                     _RC4PPS	set	3748
  2637                           
  2638                           ; #config settings
  2639  0000                     
  2640                           	psect	cinit
  2641  001C                     start_initialization:	
  2642  001C                     __initialization:	
  2643                           
  2644                           ; Clear objects allocated to COMMON
  2645  001C  01FD               	clrf	__pbssCOMMON& (0+127)
  2646                           
  2647                           ; Clear objects allocated to BANK0
  2648  001D  3050               	movlw	low __pbssBANK0
  2649  001E  0084               	movwf	4
  2650  001F  3000               	movlw	high __pbssBANK0
  2651  0020  0085               	movwf	5
  2652  0021  3017               	movlw	23
  2653  0022  318C  2481  3180   	fcall	clear_ram0
  2654                           
  2655                           ; Clear objects allocated to BANK4
  2656  0025  3020               	movlw	low __pbssBANK4
  2657  0026  0084               	movwf	4
  2658  0027  3002               	movlw	high __pbssBANK4
  2659  0028  0085               	movwf	5
  2660  0029  3044               	movlw	68
  2661  002A  318C  2481         	fcall	clear_ram0
  2662  002C                     end_of_initialization:	
  2663                           ;End of C runtime variable initialization code
  2664                           
  2665  002C                     __end_of__initialization:	
  2666  002C  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2667  002D  0020               	movlb	0
  2668  002E  318D  2D94         	ljmp	_main	;jump to C main() function
  2669                           
  2670                           	psect	bssCOMMON
  2671  007D                     __pbssCOMMON:	
  2672  007D                     _b_i2c_error_flag:	
  2673  007D                     	ds	1
  2674                           
  2675                           	psect	bssBANK0
  2676  0050                     __pbssBANK0:	
  2677  0050                     _t:	
  2678  0050                     	ds	2
  2679  0052                     _id:	
  2680  0052                     	ds	2
  2681  0054                     _gesture_motion_:	
  2682  0054                     	ds	2
  2683  0056                     _gesture_state_:	
  2684  0056                     	ds	2
  2685  0058                     _gesture_far_count_:	
  2686  0058                     	ds	2
  2687  005A                     _gesture_near_count_:	
  2688  005A                     	ds	2
  2689  005C                     _gesture_lr_count_:	
  2690  005C                     	ds	2
  2691  005E                     _gesture_ud_count_:	
  2692  005E                     	ds	2
  2693  0060                     _gesture_lr_delta_:	
  2694  0060                     	ds	2
  2695  0062                     _gesture_ud_delta_:	
  2696  0062                     	ds	2
  2697  0064                     _i2c2_driver_busCollisionISR:	
  2698  0064                     	ds	2
  2699  0066                     _handleGestureFlag:	
  2700  0066                     	ds	1
  2701                           
  2702                           	psect	bssBANK4
  2703  0220                     __pbssBANK4:	
  2704  0220                     _gesture_data_:	
  2705  0220                     	ds	68
  2706                           
  2707                           	psect	clrtext
  2708  0C81                     clear_ram0:	
  2709                           ;	Called with FSR0 containing the base address, and
  2710                           ;	WREG with the size to clear
  2711                           
  2712  0C81  0064               	clrwdt	;clear the watchdog before getting into this loop
  2713  0C82                     clrloop0:	
  2714  0C82  0180               	clrf	0	;clear RAM location pointed to by FSR
  2715  0C83  3101               	addfsr 0,1
  2716  0C84  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2717  0C85  2C82               	goto	clrloop0	;have we reached the end yet?
  2718  0C86  3400               	retlw	0	;all done for this memory range, return
  2719                           
  2720                           	psect	cstackBANK3
  2721  01A0                     __pcstackBANK3:	
  2722  01A0                     ??_PMD_Initialize:	
  2723  01A0                     ??_PIN_MANAGER_Initialize:	
  2724                           ; 1 bytes @ 0x0
  2725                           
  2726  01A0                     ??_OSCILLATOR_Initialize:	
  2727                           ; 1 bytes @ 0x0
  2728                           
  2729  01A0                     ??_WDT_Initialize:	
  2730                           ; 1 bytes @ 0x0
  2731                           
  2732  01A0                     ??_resetGestureParameters:	
  2733                           ; 1 bytes @ 0x0
  2734                           
  2735  01A0                     ??_SYSTEM_Initialize:	
  2736                           ; 1 bytes @ 0x0
  2737                           
  2738  01A0                     ??_mssp2_enableIRQ:	
  2739                           ; 1 bytes @ 0x0
  2740                           
  2741  01A0                     ??_i2c2_driver_open:	
  2742                           ; 1 bytes @ 0x0
  2743                           
  2744  01A0                     ??_i2c2_driver_start:	
  2745                           ; 1 bytes @ 0x0
  2746                           
  2747  01A0                     ??_i2c2_driver_restart:	
  2748                           ; 1 bytes @ 0x0
  2749                           
  2750  01A0                     ??_i2c2_driver_stop:	
  2751                           ; 1 bytes @ 0x0
  2752                           
  2753  01A0                     ??_i2c2_driver_isNACK:	
  2754                           ; 1 bytes @ 0x0
  2755                           
  2756  01A0                     ??_i2c2_driver_startRX:	
  2757                           ; 1 bytes @ 0x0
  2758                           
  2759  01A0                     ??_i2c2_driver_getRXData:	
  2760                           ; 1 bytes @ 0x0
  2761                           
  2762  01A0                     ??_i2c2_driver_setAddr:	
  2763                           ; 1 bytes @ 0x0
  2764                           
  2765  01A0                     ??_i2c2_driver_TXData:	
  2766                           ; 1 bytes @ 0x0
  2767                           
  2768  01A0                     ?_i2c2_driver_setI2cISR:	
  2769                           ; 1 bytes @ 0x0
  2770                           
  2771  01A0                     i2c2_driver_setAddr@addr:	
  2772                           ; 1 bytes @ 0x0
  2773                           
  2774  01A0                     i2c2_driver_TXData@d:	
  2775                           ; 1 bytes @ 0x0
  2776                           
  2777  01A0                     i2c2_driver_setI2cISR@handler:	
  2778                           ; 1 bytes @ 0x0
  2779                           
  2780                           
  2781                           ; 2 bytes @ 0x0
  2782  01A0                     	ds	1
  2783  01A1                     ??_wireReadDataByte:	
  2784  01A1                     ?_wireWriteDataByte:	
  2785                           ; 1 bytes @ 0x1
  2786                           
  2787  01A1                     wireWriteDataByte@val:	
  2788                           ; 2 bytes @ 0x1
  2789                           
  2790                           
  2791                           ; 1 bytes @ 0x1
  2792  01A1                     	ds	1
  2793  01A2                     ??_i2c2_driver_setI2cISR:	
  2794  01A2                     wireReadDataByte@reg:	
  2795                           ; 1 bytes @ 0x2
  2796                           
  2797                           
  2798                           ; 1 bytes @ 0x2
  2799  01A2                     	ds	1
  2800  01A3                     wireReadDataByte@val:	
  2801                           
  2802                           ; 1 bytes @ 0x3
  2803  01A3                     	ds	1
  2804  01A4                     ??_wireWriteDataByte:	
  2805  01A4                     ??_getMode:	
  2806                           ; 1 bytes @ 0x4
  2807                           
  2808  01A4                     wireWriteDataByte@reg:	
  2809                           ; 1 bytes @ 0x4
  2810                           
  2811                           
  2812                           ; 1 bytes @ 0x4
  2813  01A4                     	ds	1
  2814  01A5                     ??_setLEDDrive:	
  2815  01A5                     ??_setProximityGain:	
  2816                           ; 1 bytes @ 0x5
  2817                           
  2818  01A5                     ??_setAmbientLightGain:	
  2819                           ; 1 bytes @ 0x5
  2820                           
  2821  01A5                     ??_setProxIntLowThresh:	
  2822                           ; 1 bytes @ 0x5
  2823                           
  2824  01A5                     ??_setProxIntHighThresh:	
  2825                           ; 1 bytes @ 0x5
  2826                           
  2827  01A5                     ?_setLightIntLowThreshold:	
  2828                           ; 1 bytes @ 0x5
  2829                           
  2830  01A5                     ?_setLightIntHighThreshold:	
  2831                           ; 1 bytes @ 0x5
  2832                           
  2833  01A5                     ??_setGestureEnterThresh:	
  2834                           ; 1 bytes @ 0x5
  2835                           
  2836  01A5                     ??_setGestureExitThresh:	
  2837                           ; 1 bytes @ 0x5
  2838                           
  2839  01A5                     ??_setGestureGain:	
  2840                           ; 1 bytes @ 0x5
  2841                           
  2842  01A5                     ??_setGestureLEDDrive:	
  2843                           ; 1 bytes @ 0x5
  2844                           
  2845  01A5                     ??_setGestureWaitTime:	
  2846                           ; 1 bytes @ 0x5
  2847                           
  2848  01A5                     ??_setGestureIntEnable:	
  2849                           ; 1 bytes @ 0x5
  2850                           
  2851  01A5                     ??_setLEDBoost:	
  2852                           ; 1 bytes @ 0x5
  2853                           
  2854  01A5                     ??_setGestureMode:	
  2855                           ; 1 bytes @ 0x5
  2856                           
  2857  01A5                     getMode@enable_value:	
  2858                           ; 1 bytes @ 0x5
  2859                           
  2860  01A5                     setLightIntLowThreshold@threshold:	
  2861                           ; 1 bytes @ 0x5
  2862                           
  2863  01A5                     setLightIntHighThreshold@threshold:	
  2864                           ; 2 bytes @ 0x5
  2865                           
  2866                           
  2867                           ; 2 bytes @ 0x5
  2868  01A5                     	ds	1
  2869  01A6                     ?_setMode:	
  2870  01A6                     setMode@enable:	
  2871                           ; 1 bytes @ 0x6
  2872                           
  2873  01A6                     setAmbientLightGain@drive:	
  2874                           ; 1 bytes @ 0x6
  2875                           
  2876  01A6                     setProxIntLowThresh@threshold:	
  2877                           ; 1 bytes @ 0x6
  2878                           
  2879  01A6                     setProxIntHighThresh@threshold:	
  2880                           ; 1 bytes @ 0x6
  2881                           
  2882  01A6                     setGestureEnterThresh@threshold:	
  2883                           ; 1 bytes @ 0x6
  2884                           
  2885  01A6                     setGestureExitThresh@threshold:	
  2886                           ; 1 bytes @ 0x6
  2887                           
  2888  01A6                     setGestureWaitTime@time:	
  2889                           ; 1 bytes @ 0x6
  2890                           
  2891  01A6                     setGestureIntEnable@val:	
  2892                           ; 1 bytes @ 0x6
  2893                           
  2894  01A6                     setGestureMode@mode:	
  2895                           ; 1 bytes @ 0x6
  2896                           
  2897                           
  2898                           ; 1 bytes @ 0x6
  2899  01A6                     	ds	1
  2900  01A7                     ??_setMode:	
  2901  01A7                     ??_setLightIntLowThreshold:	
  2902                           ; 1 bytes @ 0x7
  2903                           
  2904  01A7                     ??_setLightIntHighThreshold:	
  2905                           ; 1 bytes @ 0x7
  2906                           
  2907  01A7                     setLEDDrive@val:	
  2908                           ; 1 bytes @ 0x7
  2909                           
  2910  01A7                     setProximityGain@val:	
  2911                           ; 1 bytes @ 0x7
  2912                           
  2913  01A7                     setAmbientLightGain@val:	
  2914                           ; 1 bytes @ 0x7
  2915                           
  2916  01A7                     setGestureGain@val:	
  2917                           ; 1 bytes @ 0x7
  2918                           
  2919  01A7                     setGestureLEDDrive@val:	
  2920                           ; 1 bytes @ 0x7
  2921                           
  2922  01A7                     setGestureWaitTime@val:	
  2923                           ; 1 bytes @ 0x7
  2924                           
  2925  01A7                     setGestureIntEnable@enable:	
  2926                           ; 1 bytes @ 0x7
  2927                           
  2928  01A7                     setLEDBoost@val:	
  2929                           ; 1 bytes @ 0x7
  2930                           
  2931  01A7                     setGestureMode@val:	
  2932                           ; 1 bytes @ 0x7
  2933                           
  2934                           
  2935                           ; 1 bytes @ 0x7
  2936  01A7                     	ds	1
  2937  01A8                     setLEDDrive@drive:	
  2938  01A8                     setProximityGain@drive:	
  2939                           ; 1 bytes @ 0x8
  2940                           
  2941  01A8                     setLightIntLowThreshold@val_low:	
  2942                           ; 1 bytes @ 0x8
  2943                           
  2944  01A8                     setLightIntHighThreshold@val_low:	
  2945                           ; 1 bytes @ 0x8
  2946                           
  2947  01A8                     setGestureGain@gain:	
  2948                           ; 1 bytes @ 0x8
  2949                           
  2950  01A8                     setGestureLEDDrive@drive:	
  2951                           ; 1 bytes @ 0x8
  2952                           
  2953  01A8                     setLEDBoost@boost:	
  2954                           ; 1 bytes @ 0x8
  2955                           
  2956                           
  2957                           ; 1 bytes @ 0x8
  2958  01A8                     	ds	1
  2959  01A9                     setMode@reg_val:	
  2960  01A9                     setLightIntLowThreshold@val_high:	
  2961                           ; 1 bytes @ 0x9
  2962                           
  2963  01A9                     setLightIntHighThreshold@val_high:	
  2964                           ; 1 bytes @ 0x9
  2965                           
  2966                           
  2967                           ; 1 bytes @ 0x9
  2968  01A9                     	ds	1
  2969  01AA                     setMode@mode:	
  2970                           
  2971                           ; 1 bytes @ 0xA
  2972  01AA                     	ds	1
  2973  01AB                     ??_initialize:	
  2974  01AB                     ??_enablePower:	
  2975                           ; 1 bytes @ 0xB
  2976                           
  2977  01AB                     ??_enableGestureSensor:	
  2978                           ; 1 bytes @ 0xB
  2979                           
  2980                           
  2981                           ; 1 bytes @ 0xB
  2982  01AB                     	ds	1
  2983  01AC                     initialize@id:	
  2984  01AC                     enableGestureSensor@interrupts:	
  2985                           ; 1 bytes @ 0xC
  2986                           
  2987                           
  2988                           ; 1 bytes @ 0xC
  2989  01AC                     	ds	1
  2990  01AD                     ??_main:	
  2991                           
  2992                           	psect	cstackBANK2
  2993  0120                     __pcstackBANK2:	
  2994                           ; 1 bytes @ 0xD
  2995                           
  2996  0120                     readGesture@fifo_data:	
  2997                           
  2998                           ; 64 bytes @ 0x0
  2999  0120                     	ds	64
  3000                           
  3001                           	psect	cstackBANK1
  3002  00A0                     __pcstackBANK1:	
  3003  00A0                     readGesture@fifo_data2:	
  3004                           
  3005                           ; 64 bytes @ 0x0
  3006  00A0                     	ds	64
  3007                           
  3008                           	psect	cstackCOMMON
  3009  0070                     __pcstackCOMMON:	
  3010  0070                     ?_i2c2_driver_open:	
  3011  0070                     ?_i2c2_driver_isNACK:	
  3012                           ; 1 bit 
  3013                           
  3014  0070                     ?i1_i2c2_driver_isNACK:	
  3015                           ; 1 bit 
  3016                           
  3017  0070                     ?_PMD_Initialize:	
  3018                           ; 1 bit 
  3019                           
  3020  0070                     ?_PIN_MANAGER_Initialize:	
  3021                           ; 1 bytes @ 0x0
  3022                           
  3023  0070                     ?_OSCILLATOR_Initialize:	
  3024                           ; 1 bytes @ 0x0
  3025                           
  3026  0070                     ?_WDT_Initialize:	
  3027                           ; 1 bytes @ 0x0
  3028                           
  3029  0070                     ?_handleGesture:	
  3030                           ; 1 bytes @ 0x0
  3031                           
  3032  0070                     ?_initialize:	
  3033                           ; 1 bytes @ 0x0
  3034                           
  3035  0070                     ?_enablePower:	
  3036                           ; 1 bytes @ 0x0
  3037                           
  3038  0070                     ?_enableGestureSensor:	
  3039                           ; 1 bytes @ 0x0
  3040                           
  3041  0070                     ?_isGestureAvailable:	
  3042                           ; 1 bytes @ 0x0
  3043                           
  3044  0070                     ?_wireReadDataByte:	
  3045                           ; 1 bytes @ 0x0
  3046                           
  3047  0070                     ?_setLEDDrive:	
  3048                           ; 1 bytes @ 0x0
  3049                           
  3050  0070                     ?_setProximityGain:	
  3051                           ; 1 bytes @ 0x0
  3052                           
  3053  0070                     ?_setAmbientLightGain:	
  3054                           ; 1 bytes @ 0x0
  3055                           
  3056  0070                     ?_setProxIntLowThresh:	
  3057                           ; 1 bytes @ 0x0
  3058                           
  3059  0070                     ?_setProxIntHighThresh:	
  3060                           ; 1 bytes @ 0x0
  3061                           
  3062  0070                     ?_setGestureEnterThresh:	
  3063                           ; 1 bytes @ 0x0
  3064                           
  3065  0070                     ?_setGestureExitThresh:	
  3066                           ; 1 bytes @ 0x0
  3067                           
  3068  0070                     ?_setGestureGain:	
  3069                           ; 1 bytes @ 0x0
  3070                           
  3071  0070                     ?_setGestureLEDDrive:	
  3072                           ; 1 bytes @ 0x0
  3073                           
  3074  0070                     ?_setGestureWaitTime:	
  3075                           ; 1 bytes @ 0x0
  3076                           
  3077  0070                     ?_setGestureIntEnable:	
  3078                           ; 1 bytes @ 0x0
  3079                           
  3080  0070                     ?_getMode:	
  3081                           ; 1 bytes @ 0x0
  3082                           
  3083  0070                     ?_resetGestureParameters:	
  3084                           ; 1 bytes @ 0x0
  3085                           
  3086  0070                     ?_setLEDBoost:	
  3087                           ; 1 bytes @ 0x0
  3088                           
  3089  0070                     ?_setGestureMode:	
  3090                           ; 1 bytes @ 0x0
  3091                           
  3092  0070                     ?_processGestureData:	
  3093                           ; 1 bytes @ 0x0
  3094                           
  3095  0070                     ?_decodeGesture:	
  3096                           ; 1 bytes @ 0x0
  3097                           
  3098  0070                     ??_decodeGesture:	
  3099                           ; 1 bytes @ 0x0
  3100                           
  3101  0070                     ?_INTERRUPT_InterruptManager:	
  3102                           ; 1 bytes @ 0x0
  3103                           
  3104  0070                     ?_SYSTEM_Initialize:	
  3105                           ; 1 bytes @ 0x0
  3106                           
  3107  0070                     ?_mssp2_enableIRQ:	
  3108                           ; 1 bytes @ 0x0
  3109                           
  3110  0070                     ?_mssp2_clearIRQ:	
  3111                           ; 1 bytes @ 0x0
  3112                           
  3113  0070                     ??_mssp2_clearIRQ:	
  3114                           ; 1 bytes @ 0x0
  3115                           
  3116  0070                     ?_i2c2_driver_start:	
  3117                           ; 1 bytes @ 0x0
  3118                           
  3119  0070                     ?_i2c2_driver_restart:	
  3120                           ; 1 bytes @ 0x0
  3121                           
  3122  0070                     ?_i2c2_driver_stop:	
  3123                           ; 1 bytes @ 0x0
  3124                           
  3125  0070                     ?_i2c2_driver_startRX:	
  3126                           ; 1 bytes @ 0x0
  3127                           
  3128  0070                     ?_i2c2_driver_getRXData:	
  3129                           ; 1 bytes @ 0x0
  3130                           
  3131  0070                     ?_i2c2_driver_setAddr:	
  3132                           ; 1 bytes @ 0x0
  3133                           
  3134  0070                     ?_i2c2_driver_TXData:	
  3135                           ; 1 bytes @ 0x0
  3136                           
  3137  0070                     ?_i2c2_driver_sendNACK:	
  3138                           ; 1 bytes @ 0x0
  3139                           
  3140  0070                     ??_i2c2_driver_sendNACK:	
  3141                           ; 1 bytes @ 0x0
  3142                           
  3143  0070                     ?_main:	
  3144                           ; 1 bytes @ 0x0
  3145                           
  3146  0070                     ?_LEDs_SetLow:	
  3147                           ; 1 bytes @ 0x0
  3148                           
  3149  0070                     ??_LEDs_SetLow:	
  3150                           ; 1 bytes @ 0x0
  3151                           
  3152  0070                     ?i1_i2c2_driver_start:	
  3153                           ; 1 bytes @ 0x0
  3154                           
  3155  0070                     ??i1_i2c2_driver_start:	
  3156                           ; 1 bytes @ 0x0
  3157                           
  3158  0070                     ?i1_i2c2_driver_restart:	
  3159                           ; 1 bytes @ 0x0
  3160                           
  3161  0070                     ??i1_i2c2_driver_restart:	
  3162                           ; 1 bytes @ 0x0
  3163                           
  3164  0070                     ?i1_i2c2_driver_stop:	
  3165                           ; 1 bytes @ 0x0
  3166                           
  3167  0070                     ??i1_i2c2_driver_stop:	
  3168                           ; 1 bytes @ 0x0
  3169                           
  3170  0070                     ??i1_i2c2_driver_isNACK:	
  3171                           ; 1 bytes @ 0x0
  3172                           
  3173  0070                     ?i1_i2c2_driver_startRX:	
  3174                           ; 1 bytes @ 0x0
  3175                           
  3176  0070                     ??i1_i2c2_driver_startRX:	
  3177                           ; 1 bytes @ 0x0
  3178                           
  3179  0070                     ?i1_i2c2_driver_getRXData:	
  3180                           ; 1 bytes @ 0x0
  3181                           
  3182  0070                     ??i1_i2c2_driver_getRXData:	
  3183                           ; 1 bytes @ 0x0
  3184                           
  3185  0070                     ?i1_i2c2_driver_setAddr:	
  3186                           ; 1 bytes @ 0x0
  3187                           
  3188  0070                     ??i1_i2c2_driver_setAddr:	
  3189                           ; 1 bytes @ 0x0
  3190                           
  3191  0070                     ?i1_getMode:	
  3192                           ; 1 bytes @ 0x0
  3193                           
  3194  0070                     ?i1_resetGestureParameters:	
  3195                           ; 1 bytes @ 0x0
  3196                           
  3197  0070                     ??i1_resetGestureParameters:	
  3198                           ; 1 bytes @ 0x0
  3199                           
  3200  0070                     ?i1_wireReadDataByte:	
  3201                           ; 1 bytes @ 0x0
  3202                           
  3203  0070                     ?___wmul:	
  3204                           ; 1 bytes @ 0x0
  3205                           
  3206  0070                     i1i2c2_driver_setAddr@addr:	
  3207                           ; 2 bytes @ 0x0
  3208                           
  3209  0070                     ___wmul@multiplier:	
  3210                           ; 1 bytes @ 0x0
  3211                           
  3212                           
  3213                           ; 2 bytes @ 0x0
  3214  0070                     	ds	1
  3215  0071                     ??i1_wireReadDataByte:	
  3216  0071                     ?_wireReadDataBlock:	
  3217                           ; 1 bytes @ 0x1
  3218                           
  3219  0071                     wireReadDataBlock@val:	
  3220                           ; 2 bytes @ 0x1
  3221                           
  3222                           
  3223                           ; 2 bytes @ 0x1
  3224  0071                     	ds	1
  3225  0072                     i1wireReadDataByte@reg:	
  3226  0072                     ___wmul@multiplicand:	
  3227                           ; 1 bytes @ 0x2
  3228                           
  3229                           
  3230                           ; 2 bytes @ 0x2
  3231  0072                     	ds	1
  3232  0073                     i1wireReadDataByte@val:	
  3233  0073                     wireReadDataBlock@len:	
  3234                           ; 1 bytes @ 0x3
  3235                           
  3236                           
  3237                           ; 2 bytes @ 0x3
  3238  0073                     	ds	1
  3239  0074                     ??_isGestureAvailable:	
  3240  0074                     ??___wmul:	
  3241                           ; 1 bytes @ 0x4
  3242                           
  3243  0074                     ??i1_getMode:	
  3244                           ; 1 bytes @ 0x4
  3245                           
  3246  0074                     ___wmul@product:	
  3247                           ; 1 bytes @ 0x4
  3248                           
  3249                           
  3250                           ; 2 bytes @ 0x4
  3251  0074                     	ds	1
  3252  0075                     ??_wireReadDataBlock:	
  3253  0075                     isGestureAvailable@val:	
  3254                           ; 1 bytes @ 0x5
  3255                           
  3256  0075                     i1getMode@enable_value:	
  3257                           ; 1 bytes @ 0x5
  3258                           
  3259                           
  3260                           ; 1 bytes @ 0x5
  3261  0075                     	ds	1
  3262  0076                     ?___awdiv:	
  3263  0076                     ___awdiv@divisor:	
  3264                           ; 2 bytes @ 0x6
  3265                           
  3266                           
  3267                           ; 2 bytes @ 0x6
  3268  0076                     	ds	2
  3269  0078                     ___awdiv@dividend:	
  3270                           
  3271                           ; 2 bytes @ 0x8
  3272  0078                     	ds	2
  3273  007A                     ??___awdiv:	
  3274  007A                     wireReadDataBlock@reg:	
  3275                           ; 1 bytes @ 0xA
  3276                           
  3277                           
  3278                           ; 1 bytes @ 0xA
  3279  007A                     	ds	1
  3280  007B                     ??_processGestureData:	
  3281  007B                     wireReadDataBlock@j:	
  3282                           ; 1 bytes @ 0xB
  3283                           
  3284                           
  3285                           ; 1 bytes @ 0xB
  3286  007B                     	ds	2
  3287  007D                     ??_INTERRUPT_InterruptManager:	
  3288                           
  3289                           	psect	cstackBANK0
  3290  0020                     __pcstackBANK0:	
  3291                           ; 1 bytes @ 0xD
  3292                           
  3293  0020                     ___awdiv@counter:	
  3294  0020                     _decodeGesture$783:	
  3295                           ; 1 bytes @ 0x0
  3296                           
  3297                           
  3298                           ; 2 bytes @ 0x0
  3299  0020                     	ds	1
  3300  0021                     ___awdiv@sign:	
  3301                           
  3302                           ; 1 bytes @ 0x1
  3303  0021                     	ds	1
  3304  0022                     _decodeGesture$784:	
  3305  0022                     ___awdiv@quotient:	
  3306                           ; 2 bytes @ 0x2
  3307                           
  3308                           
  3309                           ; 2 bytes @ 0x2
  3310  0022                     	ds	2
  3311  0024                     processGestureData@ud_ratio_first:	
  3312  0024                     _decodeGesture$785:	
  3313                           ; 2 bytes @ 0x4
  3314                           
  3315                           
  3316                           ; 2 bytes @ 0x4
  3317  0024                     	ds	2
  3318  0026                     processGestureData@lr_ratio_first:	
  3319  0026                     _decodeGesture$786:	
  3320                           ; 2 bytes @ 0x6
  3321                           
  3322                           
  3323                           ; 2 bytes @ 0x6
  3324  0026                     	ds	2
  3325  0028                     processGestureData@ud_ratio_last:	
  3326  0028                     _decodeGesture$787:	
  3327                           ; 2 bytes @ 0x8
  3328                           
  3329                           
  3330                           ; 2 bytes @ 0x8
  3331  0028                     	ds	2
  3332  002A                     processGestureData@lr_ratio_last:	
  3333  002A                     _decodeGesture$788:	
  3334                           ; 2 bytes @ 0xA
  3335                           
  3336                           
  3337                           ; 2 bytes @ 0xA
  3338  002A                     	ds	2
  3339  002C                     _processGestureData$778:	
  3340  002C                     _decodeGesture$789:	
  3341                           ; 2 bytes @ 0xC
  3342                           
  3343                           
  3344                           ; 2 bytes @ 0xC
  3345  002C                     	ds	2
  3346  002E                     _processGestureData$779:	
  3347  002E                     _decodeGesture$790:	
  3348                           ; 2 bytes @ 0xE
  3349                           
  3350                           
  3351                           ; 2 bytes @ 0xE
  3352  002E                     	ds	2
  3353  0030                     _processGestureData$780:	
  3354                           
  3355                           ; 2 bytes @ 0x10
  3356  0030                     	ds	2
  3357  0032                     _processGestureData$781:	
  3358                           
  3359                           ; 2 bytes @ 0x12
  3360  0032                     	ds	2
  3361  0034                     processGestureData@u_last:	
  3362                           
  3363                           ; 1 bytes @ 0x14
  3364  0034                     	ds	1
  3365  0035                     processGestureData@d_last:	
  3366                           
  3367                           ; 1 bytes @ 0x15
  3368  0035                     	ds	1
  3369  0036                     processGestureData@l_last:	
  3370                           
  3371                           ; 1 bytes @ 0x16
  3372  0036                     	ds	1
  3373  0037                     processGestureData@r_last:	
  3374                           
  3375                           ; 1 bytes @ 0x17
  3376  0037                     	ds	1
  3377  0038                     processGestureData@u_first:	
  3378                           
  3379                           ; 1 bytes @ 0x18
  3380  0038                     	ds	1
  3381  0039                     processGestureData@d_first:	
  3382                           
  3383                           ; 1 bytes @ 0x19
  3384  0039                     	ds	1
  3385  003A                     processGestureData@l_first:	
  3386                           
  3387                           ; 1 bytes @ 0x1A
  3388  003A                     	ds	1
  3389  003B                     processGestureData@r_first:	
  3390                           
  3391                           ; 1 bytes @ 0x1B
  3392  003B                     	ds	1
  3393  003C                     processGestureData@ud_delta:	
  3394                           
  3395                           ; 2 bytes @ 0x1C
  3396  003C                     	ds	2
  3397  003E                     processGestureData@lr_delta:	
  3398                           
  3399                           ; 2 bytes @ 0x1E
  3400  003E                     	ds	2
  3401  0040                     processGestureData@i:	
  3402                           
  3403                           ; 2 bytes @ 0x20
  3404  0040                     	ds	2
  3405  0042                     ?_readGesture:	
  3406                           
  3407                           ; 2 bytes @ 0x22
  3408  0042                     	ds	2
  3409  0044                     ??_readGesture:	
  3410                           
  3411                           ; 1 bytes @ 0x24
  3412  0044                     	ds	2
  3413  0046                     readGesture@motion:	
  3414                           
  3415                           ; 2 bytes @ 0x26
  3416  0046                     	ds	2
  3417  0048                     readGesture@gstatus:	
  3418                           
  3419                           ; 1 bytes @ 0x28
  3420  0048                     	ds	1
  3421  0049                     readGesture@bytes_read:	
  3422                           
  3423                           ; 2 bytes @ 0x29
  3424  0049                     	ds	2
  3425  004B                     readGesture@fifo_level:	
  3426                           
  3427                           ; 1 bytes @ 0x2B
  3428  004B                     	ds	1
  3429  004C                     readGesture@i:	
  3430                           
  3431                           ; 2 bytes @ 0x2C
  3432  004C                     	ds	2
  3433  004E                     ??_handleGesture:	
  3434                           
  3435                           ; 1 bytes @ 0x2E
  3436  004E                     	ds	2
  3437                           
  3438                           	psect	maintext
  3439  0D94                     __pmaintext:	
  3440 ;;
  3441 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3442 ;;
  3443 ;; *************** function _main *****************
  3444 ;; Defined at:
  3445 ;;		line 63 in file "main.c"
  3446 ;; Parameters:    Size  Location     Type
  3447 ;;		None
  3448 ;; Auto vars:     Size  Location     Type
  3449 ;;		None
  3450 ;; Return value:  Size  Location     Type
  3451 ;;                  1    wreg      void 
  3452 ;; Registers used:
  3453 ;;		wreg, status,2, status,0, pclath, cstack
  3454 ;; Tracked objects:
  3455 ;;		On entry : B1F/0
  3456 ;;		On exit  : 0/0
  3457 ;;		Unchanged: 0/0
  3458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3459 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3460 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3461 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3462 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3463 ;;Total ram usage:        0 bytes
  3464 ;; Hardware stack levels required when called:   12
  3465 ;; This function calls:
  3466 ;;		_SYSTEM_Initialize
  3467 ;;		_enableGestureSensor
  3468 ;;		_enablePower
  3469 ;;		_i2c2_driver_setI2cISR
  3470 ;;		_initialize
  3471 ;;		_mssp2_enableIRQ
  3472 ;; This function is called by:
  3473 ;;		Startup code after reset
  3474 ;; This function uses a non-reentrant model
  3475 ;;
  3476                           
  3477                           
  3478                           ;psect for function _main
  3479  0D94                     _main:	
  3480                           
  3481                           ;main.c: 66: SYSTEM_Initialize();
  3482                           
  3483                           ;incstack = 0
  3484                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
  3485  0D94  318C  24BC  318D   	fcall	_SYSTEM_Initialize
  3486                           
  3487                           ;main.c: 67: i2c2_driver_setI2cISR(handleGesture);
  3488  0D97  307F               	movlw	low _handleGesture
  3489  0D98  0023               	movlb	3	; select bank3
  3490  0D99  00A0               	movwf	i2c2_driver_setI2cISR@handler^(0+384)
  3491  0D9A  3007               	movlw	high _handleGesture
  3492  0D9B  00A1               	movwf	(i2c2_driver_setI2cISR@handler^(0+384)+1)
  3493  0D9C  318C  24A9  318D   	fcall	_i2c2_driver_setI2cISR
  3494                           
  3495                           ;main.c: 69: initialize();
  3496  0D9F  3184  2485  318D   	fcall	_initialize
  3497                           
  3498                           ;main.c: 70: enablePower();
  3499  0DA2  318C  24C8  318D   	fcall	_enablePower
  3500                           
  3501                           ;main.c: 71: enableGestureSensor(1);
  3502  0DA5  3001               	movlw	1
  3503  0DA6  3186  2682  318D   	fcall	_enableGestureSensor
  3504                           
  3505                           ;main.c: 78: (INTCONbits.GIE = 1);
  3506  0DA9  178B               	bsf	11,7	;volatile
  3507                           
  3508                           ;main.c: 81: (INTCONbits.PEIE = 1);
  3509  0DAA  170B               	bsf	11,6	;volatile
  3510                           
  3511                           ;main.c: 82: mssp2_enableIRQ();
  3512  0DAB  318C  245F  318D   	fcall	_mssp2_enableIRQ
  3513  0DAE                     l323:	
  3514                           ;main.c: 90: while (1)
  3515                           
  3516                           
  3517                           ;main.c: 91: {
  3518  0DAE  2DAE               	goto	l323
  3519  0DAF                     __end_of_main:	
  3520                           
  3521                           	psect	text1
  3522  0C5F                     __ptext1:	
  3523 ;; *************** function _mssp2_enableIRQ *****************
  3524 ;; Defined at:
  3525 ;;		line 38 in file "mcc_generated_files/i2c2_driver.c"
  3526 ;; Parameters:    Size  Location     Type
  3527 ;;		None
  3528 ;; Auto vars:     Size  Location     Type
  3529 ;;		None
  3530 ;; Return value:  Size  Location     Type
  3531 ;;                  1    wreg      void 
  3532 ;; Registers used:
  3533 ;;		None
  3534 ;; Tracked objects:
  3535 ;;		On entry : 0/0
  3536 ;;		On exit  : 0/0
  3537 ;;		Unchanged: 0/0
  3538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3539 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3540 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3542 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3543 ;;Total ram usage:        0 bytes
  3544 ;; Hardware stack levels used:    1
  3545 ;; Hardware stack levels required when called:    6
  3546 ;; This function calls:
  3547 ;;		Nothing
  3548 ;; This function is called by:
  3549 ;;		_main
  3550 ;; This function uses a non-reentrant model
  3551 ;;
  3552                           
  3553                           
  3554                           ;psect for function _mssp2_enableIRQ
  3555  0C5F                     _mssp2_enableIRQ:	
  3556                           
  3557                           ;i2c2_driver.c: 40: PIE2bits.SSP2IE = 1;
  3558                           
  3559                           ;incstack = 0
  3560                           ; Regs used in _mssp2_enableIRQ: []
  3561  0C5F  0021               	movlb	1	; select bank1
  3562  0C60  1592               	bsf	18,3	;volatile
  3563  0C61  0008               	return
  3564  0C62                     __end_of_mssp2_enableIRQ:	
  3565                           
  3566                           	psect	text2
  3567  0485                     __ptext2:	
  3568 ;; *************** function _initialize *****************
  3569 ;; Defined at:
  3570 ;;		line 21 in file "APDS9960.c"
  3571 ;; Parameters:    Size  Location     Type
  3572 ;;		None
  3573 ;; Auto vars:     Size  Location     Type
  3574 ;;  id              1   12[BANK3 ] unsigned char 
  3575 ;; Return value:  Size  Location     Type
  3576 ;;                  1    wreg      unsigned char 
  3577 ;; Registers used:
  3578 ;;		wreg, status,2, status,0, pclath, cstack
  3579 ;; Tracked objects:
  3580 ;;		On entry : 0/0
  3581 ;;		On exit  : 0/0
  3582 ;;		Unchanged: 0/0
  3583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3584 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3585 ;;      Locals:         0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  3586 ;;      Temps:          0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  3587 ;;      Totals:         0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0
  3588 ;;Total ram usage:        2 bytes
  3589 ;; Hardware stack levels used:    1
  3590 ;; Hardware stack levels required when called:   10
  3591 ;; This function calls:
  3592 ;;		_i2c2_driver_open
  3593 ;;		_setAmbientLightGain
  3594 ;;		_setGestureEnterThresh
  3595 ;;		_setGestureExitThresh
  3596 ;;		_setGestureGain
  3597 ;;		_setGestureIntEnable
  3598 ;;		_setGestureLEDDrive
  3599 ;;		_setGestureWaitTime
  3600 ;;		_setLEDDrive
  3601 ;;		_setLightIntHighThreshold
  3602 ;;		_setLightIntLowThreshold
  3603 ;;		_setMode
  3604 ;;		_setProxIntHighThresh
  3605 ;;		_setProxIntLowThresh
  3606 ;;		_setProximityGain
  3607 ;;		_wireReadDataByte
  3608 ;;		_wireWriteDataByte
  3609 ;; This function is called by:
  3610 ;;		_main
  3611 ;; This function uses a non-reentrant model
  3612 ;;
  3613                           
  3614                           
  3615                           ;psect for function _initialize
  3616  0485                     _initialize:	
  3617                           
  3618                           ;APDS9960.c: 26: i2c2_driver_open();
  3619                           
  3620                           ;incstack = 0
  3621                           ; Regs used in _initialize: [wreg+status,2+status,0+pclath+cstack]
  3622  0485  318C  24B2  3184   	fcall	_i2c2_driver_open
  3623                           
  3624                           ;APDS9960.c: 29: id = wireReadDataByte(0x92);
  3625  0488  3092               	movlw	146
  3626  0489  318D  25EC  3184   	fcall	_wireReadDataByte
  3627  048C  0023               	movlb	3	; select bank3
  3628  048D  00AB               	movwf	??_initialize^(0+384)
  3629  048E  082B               	movf	??_initialize^(0+384),w
  3630  048F  00AC               	movwf	initialize@id^(0+384)
  3631                           
  3632                           ;APDS9960.c: 32: if( !(id == 0xAB ||id == 0x9C ) )
  3633  0490  30AB               	movlw	171
  3634  0491  062C               	xorwf	initialize@id^(0+384),w
  3635  0492  1903               	btfsc	3,2
  3636  0493  2C98               	goto	l3481
  3637  0494  309C               	movlw	156
  3638  0495  062C               	xorwf	initialize@id^(0+384),w
  3639  0496  1D03               	btfss	3,2
  3640  0497  0008               	return
  3641  0498                     l3481:	
  3642                           
  3643                           ;APDS9960.c: 35: };APDS9960.c: 37: setMode(7, 0);
  3644  0498  01A6               	clrf	setMode@enable^(0+384)
  3645  0499  3007               	movlw	7
  3646  049A  3187  2730  3184   	fcall	_setMode
  3647                           
  3648                           ;APDS9960.c: 39: wireWriteDataByte(0x81, 219);
  3649  049D  30DB               	movlw	219
  3650  049E  0023               	movlb	3	; select bank3
  3651  049F  00AB               	movwf	??_initialize^(0+384)
  3652  04A0  082B               	movf	??_initialize^(0+384),w
  3653  04A1  00A1               	movwf	wireWriteDataByte@val^(0+384)
  3654  04A2  3081               	movlw	129
  3655  04A3  318D  2579  3184   	fcall	_wireWriteDataByte
  3656                           
  3657                           ;APDS9960.c: 40: wireWriteDataByte(0x83, 246);
  3658  04A6  30F6               	movlw	246
  3659  04A7  0023               	movlb	3	; select bank3
  3660  04A8  00AB               	movwf	??_initialize^(0+384)
  3661  04A9  082B               	movf	??_initialize^(0+384),w
  3662  04AA  00A1               	movwf	wireWriteDataByte@val^(0+384)
  3663  04AB  3083               	movlw	131
  3664  04AC  318D  2579  3184   	fcall	_wireWriteDataByte
  3665                           
  3666                           ;APDS9960.c: 41: wireWriteDataByte(0x8E, 0x87);
  3667  04AF  3087               	movlw	135
  3668  04B0  0023               	movlb	3	; select bank3
  3669  04B1  00AB               	movwf	??_initialize^(0+384)
  3670  04B2  082B               	movf	??_initialize^(0+384),w
  3671  04B3  00A1               	movwf	wireWriteDataByte@val^(0+384)
  3672  04B4  308E               	movlw	142
  3673  04B5  318D  2579  3184   	fcall	_wireWriteDataByte
  3674                           
  3675                           ;APDS9960.c: 42: wireWriteDataByte(0x9D, 0) ;
  3676  04B8  0023               	movlb	3	; select bank3
  3677  04B9  01A1               	clrf	wireWriteDataByte@val^(0+384)
  3678  04BA  309D               	movlw	157
  3679  04BB  318D  2579  3184   	fcall	_wireWriteDataByte
  3680                           
  3681                           ;APDS9960.c: 43: wireWriteDataByte(0x9E, 0) ;
  3682  04BE  0023               	movlb	3	; select bank3
  3683  04BF  01A1               	clrf	wireWriteDataByte@val^(0+384)
  3684  04C0  309E               	movlw	158
  3685  04C1  318D  2579  3184   	fcall	_wireWriteDataByte
  3686                           
  3687                           ;APDS9960.c: 44: wireWriteDataByte(0x8D, 0x60) ;
  3688  04C4  3060               	movlw	96
  3689  04C5  0023               	movlb	3	; select bank3
  3690  04C6  00AB               	movwf	??_initialize^(0+384)
  3691  04C7  082B               	movf	??_initialize^(0+384),w
  3692  04C8  00A1               	movwf	wireWriteDataByte@val^(0+384)
  3693  04C9  308D               	movlw	141
  3694  04CA  318D  2579  3184   	fcall	_wireWriteDataByte
  3695                           
  3696                           ;APDS9960.c: 45: setLEDDrive(0);
  3697  04CD  3000               	movlw	0
  3698  04CE  318E  26AB  3184   	fcall	_setLEDDrive
  3699                           
  3700                           ;APDS9960.c: 46: setProximityGain(2);
  3701  04D1  3002               	movlw	2
  3702  04D2  318E  26D4  3184   	fcall	_setProximityGain
  3703                           
  3704                           ;APDS9960.c: 47: setAmbientLightGain(1);
  3705  04D5  3001               	movlw	1
  3706  04D6  318D  25AF  3184   	fcall	_setAmbientLightGain
  3707                           
  3708                           ;APDS9960.c: 48: if( !setProxIntLowThresh(0) ) {
  3709  04D9  3000               	movlw	0
  3710  04DA  318D  2521  3184   	fcall	_setProxIntLowThresh
  3711  04DD  3A00               	xorlw	0
  3712  04DE  1903               	btfsc	3,2
  3713  04DF  0008               	return
  3714                           
  3715                           ;APDS9960.c: 51: };APDS9960.c: 52: if( !setProxIntHighThresh(50) ) {
  3716  04E0  3032               	movlw	50
  3717  04E1  318D  250E  3184   	fcall	_setProxIntHighThresh
  3718  04E4  3A00               	xorlw	0
  3719  04E5  1903               	btfsc	3,2
  3720  04E6  0008               	return
  3721                           
  3722                           ;APDS9960.c: 55: };APDS9960.c: 57: if( !setLightIntLowThreshold(0xFFFF) ) {
  3723  04E7  30FF               	movlw	255
  3724  04E8  0023               	movlb	3	; select bank3
  3725  04E9  00A5               	movwf	setLightIntLowThreshold@threshold^(0+384)
  3726  04EA  30FF               	movlw	255
  3727  04EB  00A6               	movwf	(setLightIntLowThreshold@threshold^(0+384)+1)
  3728  04EC  318E  2684  3184   	fcall	_setLightIntLowThreshold
  3729  04EF  3A00               	xorlw	0
  3730  04F0  1903               	btfsc	3,2
  3731  04F1  0008               	return
  3732                           
  3733                           ;APDS9960.c: 59: };APDS9960.c: 60: if( !setLightIntHighThreshold(0) ) {
  3734  04F2  3000               	movlw	0
  3735  04F3  0023               	movlb	3	; select bank3
  3736  04F4  00A5               	movwf	setLightIntHighThreshold@threshold^(0+384)
  3737  04F5  00A6               	movwf	(setLightIntHighThreshold@threshold+1)^(0+384)
  3738  04F6  318E  265D  3184   	fcall	_setLightIntHighThreshold
  3739  04F9  3A00               	xorlw	0
  3740  04FA  1903               	btfsc	3,2
  3741  04FB  0008               	return
  3742                           
  3743                           ;APDS9960.c: 63: };APDS9960.c: 64: if( !wireWriteDataByte(0x8C, 0x11) ) {
  3744  04FC  3011               	movlw	17
  3745  04FD  0023               	movlb	3	; select bank3
  3746  04FE  00AB               	movwf	??_initialize^(0+384)
  3747  04FF  082B               	movf	??_initialize^(0+384),w
  3748  0500  00A1               	movwf	wireWriteDataByte@val^(0+384)
  3749  0501  308C               	movlw	140
  3750  0502  318D  2579  3184   	fcall	_wireWriteDataByte
  3751  0505  0023               	movlb	3	; select bank3
  3752  0506  0821               	movf	?_wireWriteDataByte^(0+384),w
  3753  0507  0422               	iorwf	(?_wireWriteDataByte+1)^(0+384),w
  3754  0508  1903               	btfsc	3,2
  3755  0509  0008               	return
  3756                           
  3757                           ;APDS9960.c: 67: };APDS9960.c: 68: if( !wireWriteDataByte(0x90, 0x01) ) {
  3758  050A  01A1               	clrf	wireWriteDataByte@val^(0+384)
  3759  050B  0AA1               	incf	wireWriteDataByte@val^(0+384),f
  3760  050C  3090               	movlw	144
  3761  050D  318D  2579  3184   	fcall	_wireWriteDataByte
  3762  0510  0023               	movlb	3	; select bank3
  3763  0511  0821               	movf	?_wireWriteDataByte^(0+384),w
  3764  0512  0422               	iorwf	(?_wireWriteDataByte+1)^(0+384),w
  3765  0513  1903               	btfsc	3,2
  3766  0514  0008               	return
  3767                           
  3768                           ;APDS9960.c: 70: };APDS9960.c: 71: if( !wireWriteDataByte(0x9F, 0) ) {
  3769  0515  01A1               	clrf	wireWriteDataByte@val^(0+384)
  3770  0516  309F               	movlw	159
  3771  0517  318D  2579  3184   	fcall	_wireWriteDataByte
  3772  051A  0023               	movlb	3	; select bank3
  3773  051B  0821               	movf	?_wireWriteDataByte^(0+384),w
  3774  051C  0422               	iorwf	(?_wireWriteDataByte+1)^(0+384),w
  3775  051D  1903               	btfsc	3,2
  3776  051E  0008               	return
  3777                           
  3778                           ;APDS9960.c: 73: };APDS9960.c: 75: if( !setGestureEnterThresh(40) ) {
  3779  051F  3028               	movlw	40
  3780  0520  318C  24E8  3184   	fcall	_setGestureEnterThresh
  3781  0523  3A00               	xorlw	0
  3782  0524  1903               	btfsc	3,2
  3783  0525  0008               	return
  3784                           
  3785                           ;APDS9960.c: 78: };APDS9960.c: 79: if( !setGestureExitThresh(30) ) {
  3786  0526  301E               	movlw	30
  3787  0527  318C  24FB  3184   	fcall	_setGestureExitThresh
  3788  052A  3A00               	xorlw	0
  3789  052B  1903               	btfsc	3,2
  3790  052C  0008               	return
  3791                           
  3792                           ;APDS9960.c: 81: };APDS9960.c: 82: if( !wireWriteDataByte(0xA2, 0x40) ) {
  3793  052D  3040               	movlw	64
  3794  052E  0023               	movlb	3	; select bank3
  3795  052F  00AB               	movwf	??_initialize^(0+384)
  3796  0530  082B               	movf	??_initialize^(0+384),w
  3797  0531  00A1               	movwf	wireWriteDataByte@val^(0+384)
  3798  0532  30A2               	movlw	162
  3799  0533  318D  2579  3184   	fcall	_wireWriteDataByte
  3800  0536  0023               	movlb	3	; select bank3
  3801  0537  0821               	movf	?_wireWriteDataByte^(0+384),w
  3802  0538  0422               	iorwf	(?_wireWriteDataByte+1)^(0+384),w
  3803  0539  1903               	btfsc	3,2
  3804  053A  0008               	return
  3805                           
  3806                           ;APDS9960.c: 84: };APDS9960.c: 85: if( !setGestureGain(2) ) {
  3807  053B  3002               	movlw	2
  3808  053C  318F  2787  3184   	fcall	_setGestureGain
  3809  053F  3A00               	xorlw	0
  3810  0540  1903               	btfsc	3,2
  3811  0541  0008               	return
  3812                           
  3813                           ;APDS9960.c: 87: };APDS9960.c: 88: if( !setGestureLEDDrive(0) ) {
  3814  0542  3000               	movlw	0
  3815  0543  3187  27CE  3184   	fcall	_setGestureLEDDrive
  3816  0546  3A00               	xorlw	0
  3817  0547  1903               	btfsc	3,2
  3818  0548  0008               	return
  3819                           
  3820                           ;APDS9960.c: 90: };APDS9960.c: 91: if( !setGestureWaitTime(1) ) {
  3821  0549  3001               	movlw	1
  3822  054A  318E  2636  3184   	fcall	_setGestureWaitTime
  3823  054D  3A00               	xorlw	0
  3824  054E  1903               	btfsc	3,2
  3825  054F  0008               	return
  3826                           
  3827                           ;APDS9960.c: 93: };APDS9960.c: 94: if( !wireWriteDataByte(0xA4, 0) ) {
  3828  0550  0023               	movlb	3	; select bank3
  3829  0551  01A1               	clrf	wireWriteDataByte@val^(0+384)
  3830  0552  30A4               	movlw	164
  3831  0553  318D  2579  3184   	fcall	_wireWriteDataByte
  3832  0556  0023               	movlb	3	; select bank3
  3833  0557  0821               	movf	?_wireWriteDataByte^(0+384),w
  3834  0558  0422               	iorwf	(?_wireWriteDataByte+1)^(0+384),w
  3835  0559  1903               	btfsc	3,2
  3836  055A  0008               	return
  3837                           
  3838                           ;APDS9960.c: 96: };APDS9960.c: 97: if( !wireWriteDataByte(0xA5, 0) ) {
  3839  055B  01A1               	clrf	wireWriteDataByte@val^(0+384)
  3840  055C  30A5               	movlw	165
  3841  055D  318D  2579  3184   	fcall	_wireWriteDataByte
  3842  0560  0023               	movlb	3	; select bank3
  3843  0561  0821               	movf	?_wireWriteDataByte^(0+384),w
  3844  0562  0422               	iorwf	(?_wireWriteDataByte+1)^(0+384),w
  3845  0563  1903               	btfsc	3,2
  3846  0564  0008               	return
  3847                           
  3848                           ;APDS9960.c: 99: };APDS9960.c: 100: if( !wireWriteDataByte(0xA7, 0) ) {
  3849  0565  01A1               	clrf	wireWriteDataByte@val^(0+384)
  3850  0566  30A7               	movlw	167
  3851  0567  318D  2579  3184   	fcall	_wireWriteDataByte
  3852  056A  0023               	movlb	3	; select bank3
  3853  056B  0821               	movf	?_wireWriteDataByte^(0+384),w
  3854  056C  0422               	iorwf	(?_wireWriteDataByte+1)^(0+384),w
  3855  056D  1903               	btfsc	3,2
  3856  056E  0008               	return
  3857                           
  3858                           ;APDS9960.c: 102: };APDS9960.c: 103: if( !wireWriteDataByte(0xA9, 0) ) {
  3859  056F  01A1               	clrf	wireWriteDataByte@val^(0+384)
  3860  0570  30A9               	movlw	169
  3861  0571  318D  2579  3184   	fcall	_wireWriteDataByte
  3862  0574  0023               	movlb	3	; select bank3
  3863  0575  0821               	movf	?_wireWriteDataByte^(0+384),w
  3864  0576  0422               	iorwf	(?_wireWriteDataByte+1)^(0+384),w
  3865  0577  1903               	btfsc	3,2
  3866  0578  0008               	return
  3867                           
  3868                           ;APDS9960.c: 105: };APDS9960.c: 106: if( !wireWriteDataByte(0xA6, 0xC9) ) {
  3869  0579  30C9               	movlw	201
  3870  057A  00AB               	movwf	??_initialize^(0+384)
  3871  057B  082B               	movf	??_initialize^(0+384),w
  3872  057C  00A1               	movwf	wireWriteDataByte@val^(0+384)
  3873  057D  30A6               	movlw	166
  3874  057E  318D  2579  3184   	fcall	_wireWriteDataByte
  3875  0581  0023               	movlb	3	; select bank3
  3876  0582  0821               	movf	?_wireWriteDataByte^(0+384),w
  3877  0583  0422               	iorwf	(?_wireWriteDataByte+1)^(0+384),w
  3878  0584  1903               	btfsc	3,2
  3879  0585  0008               	return
  3880                           
  3881                           ;APDS9960.c: 108: };APDS9960.c: 109: if( !wireWriteDataByte(0xAA, 0) ) {
  3882  0586  01A1               	clrf	wireWriteDataByte@val^(0+384)
  3883  0587  30AA               	movlw	170
  3884  0588  318D  2579  3184   	fcall	_wireWriteDataByte
  3885  058B  0023               	movlb	3	; select bank3
  3886  058C  0821               	movf	?_wireWriteDataByte^(0+384),w
  3887  058D  0422               	iorwf	(?_wireWriteDataByte+1)^(0+384),w
  3888  058E  1903               	btfsc	3,2
  3889  058F  0008               	return
  3890                           
  3891                           ;APDS9960.c: 111: };APDS9960.c: 112: if( !setGestureIntEnable(0) ) {
  3892  0590  3000               	movlw	0
  3893  0591  318E  26FD         	fcall	_setGestureIntEnable
  3894  0593  0008               	return
  3895  0594                     __end_of_initialize:	
  3896                           
  3897                           	psect	text3
  3898  0ED4                     __ptext3:	
  3899 ;; *************** function _setProximityGain *****************
  3900 ;; Defined at:
  3901 ;;		line 188 in file "APDS9960.c"
  3902 ;; Parameters:    Size  Location     Type
  3903 ;;  drive           1    wreg     unsigned char 
  3904 ;; Auto vars:     Size  Location     Type
  3905 ;;  drive           1    8[BANK3 ] unsigned char 
  3906 ;;  val             1    7[BANK3 ] unsigned char 
  3907 ;; Return value:  Size  Location     Type
  3908 ;;                  1    wreg      unsigned char 
  3909 ;; Registers used:
  3910 ;;		wreg, status,2, status,0, pclath, cstack
  3911 ;; Tracked objects:
  3912 ;;		On entry : 0/0
  3913 ;;		On exit  : 0/0
  3914 ;;		Unchanged: 0/0
  3915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3917 ;;      Locals:         0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0
  3918 ;;      Temps:          0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0
  3919 ;;      Totals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  3920 ;;Total ram usage:        4 bytes
  3921 ;; Hardware stack levels used:    1
  3922 ;; Hardware stack levels required when called:    8
  3923 ;; This function calls:
  3924 ;;		_wireReadDataByte
  3925 ;;		_wireWriteDataByte
  3926 ;; This function is called by:
  3927 ;;		_initialize
  3928 ;; This function uses a non-reentrant model
  3929 ;;
  3930                           
  3931                           
  3932                           ;psect for function _setProximityGain
  3933  0ED4                     _setProximityGain:	
  3934                           
  3935                           ;incstack = 0
  3936                           ; Regs used in _setProximityGain: [wreg+status,2+status,0+pclath+cstack]
  3937                           ;setProximityGain@drive stored from wreg
  3938  0ED4  0023               	movlb	3	; select bank3
  3939  0ED5  00A8               	movwf	setProximityGain@drive^(0+384)
  3940                           
  3941                           ;APDS9960.c: 190: uint8_t val;;APDS9960.c: 193: val=wireReadDataByte(0x8F);
  3942  0ED6  308F               	movlw	143
  3943  0ED7  318D  25EC  318E   	fcall	_wireReadDataByte
  3944  0EDA  0023               	movlb	3	; select bank3
  3945  0EDB  00A5               	movwf	??_setProximityGain^(0+384)
  3946  0EDC  0825               	movf	??_setProximityGain^(0+384),w
  3947  0EDD  00A7               	movwf	setProximityGain@val^(0+384)
  3948                           
  3949                           ;APDS9960.c: 195: drive &= 0b00000011;
  3950  0EDE  3003               	movlw	3
  3951  0EDF  00A5               	movwf	??_setProximityGain^(0+384)
  3952  0EE0  0825               	movf	??_setProximityGain^(0+384),w
  3953  0EE1  05A8               	andwf	setProximityGain@drive^(0+384),f
  3954                           
  3955                           ;APDS9960.c: 196: drive = drive << 2;
  3956  0EE2  0828               	movf	setProximityGain@drive^(0+384),w
  3957  0EE3  00A5               	movwf	??_setProximityGain^(0+384)
  3958  0EE4  3001               	movlw	1
  3959  0EE5                     u2795:	
  3960  0EE5  35A5               	lslf	??_setProximityGain^(0+384),f
  3961  0EE6  3EFF               	addlw	-1
  3962  0EE7  1D03               	skipz
  3963  0EE8  2EE5               	goto	u2795
  3964  0EE9  3525               	lslf	??_setProximityGain^(0+384),w
  3965  0EEA  00A6               	movwf	(??_setProximityGain+1)^(0+384)
  3966  0EEB  0826               	movf	(??_setProximityGain+1)^(0+384),w
  3967  0EEC  00A8               	movwf	setProximityGain@drive^(0+384)
  3968                           
  3969                           ;APDS9960.c: 197: val &= 0b11110011;
  3970  0EED  30F3               	movlw	243
  3971  0EEE  00A5               	movwf	??_setProximityGain^(0+384)
  3972  0EEF  0825               	movf	??_setProximityGain^(0+384),w
  3973  0EF0  05A7               	andwf	setProximityGain@val^(0+384),f
  3974                           
  3975                           ;APDS9960.c: 198: val |= drive;
  3976  0EF1  0828               	movf	setProximityGain@drive^(0+384),w
  3977  0EF2  00A5               	movwf	??_setProximityGain^(0+384)
  3978  0EF3  0825               	movf	??_setProximityGain^(0+384),w
  3979  0EF4  04A7               	iorwf	setProximityGain@val^(0+384),f
  3980                           
  3981                           ;APDS9960.c: 201: if( !wireWriteDataByte(0x8F, val) ) {
  3982  0EF5  0827               	movf	setProximityGain@val^(0+384),w
  3983  0EF6  00A5               	movwf	??_setProximityGain^(0+384)
  3984  0EF7  0825               	movf	??_setProximityGain^(0+384),w
  3985  0EF8  00A1               	movwf	wireWriteDataByte@val^(0+384)
  3986  0EF9  308F               	movlw	143
  3987  0EFA  318D  2579         	fcall	_wireWriteDataByte
  3988  0EFC  0008               	return
  3989  0EFD                     __end_of_setProximityGain:	
  3990                           
  3991                           	psect	text4
  3992  0D21                     __ptext4:	
  3993 ;; *************** function _setProxIntLowThresh *****************
  3994 ;; Defined at:
  3995 ;;		line 230 in file "APDS9960.c"
  3996 ;; Parameters:    Size  Location     Type
  3997 ;;  threshold       1    wreg     unsigned char 
  3998 ;; Auto vars:     Size  Location     Type
  3999 ;;  threshold       1    6[BANK3 ] unsigned char 
  4000 ;; Return value:  Size  Location     Type
  4001 ;;                  1    wreg      unsigned char 
  4002 ;; Registers used:
  4003 ;;		wreg, status,2, status,0, pclath, cstack
  4004 ;; Tracked objects:
  4005 ;;		On entry : 0/0
  4006 ;;		On exit  : 0/0
  4007 ;;		Unchanged: 0/0
  4008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4010 ;;      Locals:         0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  4011 ;;      Temps:          0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  4012 ;;      Totals:         0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0
  4013 ;;Total ram usage:        2 bytes
  4014 ;; Hardware stack levels used:    1
  4015 ;; Hardware stack levels required when called:    8
  4016 ;; This function calls:
  4017 ;;		_wireWriteDataByte
  4018 ;; This function is called by:
  4019 ;;		_initialize
  4020 ;; This function uses a non-reentrant model
  4021 ;;
  4022                           
  4023                           
  4024                           ;psect for function _setProxIntLowThresh
  4025  0D21                     _setProxIntLowThresh:	
  4026                           
  4027                           ;incstack = 0
  4028                           ; Regs used in _setProxIntLowThresh: [wreg+status,2+status,0+pclath+cstack]
  4029                           ;setProxIntLowThresh@threshold stored from wreg
  4030  0D21  0023               	movlb	3	; select bank3
  4031  0D22  00A6               	movwf	setProxIntLowThresh@threshold^(0+384)
  4032                           
  4033                           ;APDS9960.c: 232: if( !wireWriteDataByte(0x89, threshold) ) {
  4034  0D23  0826               	movf	setProxIntLowThresh@threshold^(0+384),w
  4035  0D24  00A5               	movwf	??_setProxIntLowThresh^(0+384)
  4036  0D25  0825               	movf	??_setProxIntLowThresh^(0+384),w
  4037  0D26  00A1               	movwf	wireWriteDataByte@val^(0+384)
  4038  0D27  3089               	movlw	137
  4039  0D28  318D  2579  318D   	fcall	_wireWriteDataByte
  4040  0D2B  0023               	movlb	3	; select bank3
  4041  0D2C  0821               	movf	?_wireWriteDataByte^(0+384),w
  4042  0D2D  0422               	iorwf	(?_wireWriteDataByte+1)^(0+384),w
  4043  0D2E  1D03               	btfss	3,2
  4044  0D2F  2D32               	goto	l3273
  4045                           
  4046                           ;APDS9960.c: 233: return 0;
  4047  0D30  3000               	movlw	0
  4048  0D31  0008               	return
  4049  0D32                     l3273:	
  4050                           
  4051                           ;APDS9960.c: 234: };APDS9960.c: 236: return 1;
  4052  0D32  3001               	movlw	1
  4053  0D33  0008               	return
  4054  0D34                     __end_of_setProxIntLowThresh:	
  4055                           
  4056                           	psect	text5
  4057  0D0E                     __ptext5:	
  4058 ;; *************** function _setProxIntHighThresh *****************
  4059 ;; Defined at:
  4060 ;;		line 240 in file "APDS9960.c"
  4061 ;; Parameters:    Size  Location     Type
  4062 ;;  threshold       1    wreg     unsigned char 
  4063 ;; Auto vars:     Size  Location     Type
  4064 ;;  threshold       1    6[BANK3 ] unsigned char 
  4065 ;; Return value:  Size  Location     Type
  4066 ;;                  1    wreg      unsigned char 
  4067 ;; Registers used:
  4068 ;;		wreg, status,2, status,0, pclath, cstack
  4069 ;; Tracked objects:
  4070 ;;		On entry : 0/0
  4071 ;;		On exit  : 0/0
  4072 ;;		Unchanged: 0/0
  4073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4074 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4075 ;;      Locals:         0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  4076 ;;      Temps:          0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  4077 ;;      Totals:         0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0
  4078 ;;Total ram usage:        2 bytes
  4079 ;; Hardware stack levels used:    1
  4080 ;; Hardware stack levels required when called:    8
  4081 ;; This function calls:
  4082 ;;		_wireWriteDataByte
  4083 ;; This function is called by:
  4084 ;;		_initialize
  4085 ;; This function uses a non-reentrant model
  4086 ;;
  4087                           
  4088                           
  4089                           ;psect for function _setProxIntHighThresh
  4090  0D0E                     _setProxIntHighThresh:	
  4091                           
  4092                           ;incstack = 0
  4093                           ; Regs used in _setProxIntHighThresh: [wreg+status,2+status,0+pclath+cstack]
  4094                           ;setProxIntHighThresh@threshold stored from wreg
  4095  0D0E  0023               	movlb	3	; select bank3
  4096  0D0F  00A6               	movwf	setProxIntHighThresh@threshold^(0+384)
  4097                           
  4098                           ;APDS9960.c: 242: if( !wireWriteDataByte(0x8B, threshold) ) {
  4099  0D10  0826               	movf	setProxIntHighThresh@threshold^(0+384),w
  4100  0D11  00A5               	movwf	??_setProxIntHighThresh^(0+384)
  4101  0D12  0825               	movf	??_setProxIntHighThresh^(0+384),w
  4102  0D13  00A1               	movwf	wireWriteDataByte@val^(0+384)
  4103  0D14  308B               	movlw	139
  4104  0D15  318D  2579  318D   	fcall	_wireWriteDataByte
  4105  0D18  0023               	movlb	3	; select bank3
  4106  0D19  0821               	movf	?_wireWriteDataByte^(0+384),w
  4107  0D1A  0422               	iorwf	(?_wireWriteDataByte+1)^(0+384),w
  4108  0D1B  1D03               	btfss	3,2
  4109  0D1C  2D1F               	goto	l3283
  4110                           
  4111                           ;APDS9960.c: 243: return 0;
  4112  0D1D  3000               	movlw	0
  4113  0D1E  0008               	return
  4114  0D1F                     l3283:	
  4115                           
  4116                           ;APDS9960.c: 244: };APDS9960.c: 246: return 1;
  4117  0D1F  3001               	movlw	1
  4118  0D20  0008               	return
  4119  0D21                     __end_of_setProxIntHighThresh:	
  4120                           
  4121                           	psect	text6
  4122  0E84                     __ptext6:	
  4123 ;; *************** function _setLightIntLowThreshold *****************
  4124 ;; Defined at:
  4125 ;;		line 250 in file "APDS9960.c"
  4126 ;; Parameters:    Size  Location     Type
  4127 ;;  threshold       2    5[BANK3 ] unsigned int 
  4128 ;; Auto vars:     Size  Location     Type
  4129 ;;  val_high        1    9[BANK3 ] unsigned char 
  4130 ;;  val_low         1    8[BANK3 ] unsigned char 
  4131 ;; Return value:  Size  Location     Type
  4132 ;;                  1    wreg      unsigned char 
  4133 ;; Registers used:
  4134 ;;		wreg, status,2, status,0, pclath, cstack
  4135 ;; Tracked objects:
  4136 ;;		On entry : 0/0
  4137 ;;		On exit  : 0/0
  4138 ;;		Unchanged: 0/0
  4139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4140 ;;      Params:         0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0
  4141 ;;      Locals:         0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0
  4142 ;;      Temps:          0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  4143 ;;      Totals:         0       0       0       0       5       0       0       0       0       0       0       0       
      +0       0
  4144 ;;Total ram usage:        5 bytes
  4145 ;; Hardware stack levels used:    1
  4146 ;; Hardware stack levels required when called:    8
  4147 ;; This function calls:
  4148 ;;		_wireWriteDataByte
  4149 ;; This function is called by:
  4150 ;;		_initialize
  4151 ;; This function uses a non-reentrant model
  4152 ;;
  4153                           
  4154                           
  4155                           ;psect for function _setLightIntLowThreshold
  4156  0E84                     _setLightIntLowThreshold:	
  4157                           
  4158                           ;APDS9960.c: 252: uint8_t val_low;;APDS9960.c: 253: uint8_t val_high;;APDS9960.c: 256: v
      +                          al_low = threshold & 0x00FF;
  4159                           
  4160                           ;incstack = 0
  4161                           ; Regs used in _setLightIntLowThreshold: [wreg+status,2+status,0+pclath+cstack]
  4162  0E84  0023               	movlb	3	; select bank3
  4163  0E85  0825               	movf	setLightIntLowThreshold@threshold^(0+384),w
  4164  0E86  00A7               	movwf	??_setLightIntLowThreshold^(0+384)
  4165  0E87  0827               	movf	??_setLightIntLowThreshold^(0+384),w
  4166  0E88  00A8               	movwf	setLightIntLowThreshold@val_low^(0+384)
  4167                           
  4168                           ;APDS9960.c: 257: val_high = (threshold & 0xFF00) >> 8;
  4169  0E89  0826               	movf	(setLightIntLowThreshold@threshold+1)^(0+384),w
  4170  0E8A  00A7               	movwf	??_setLightIntLowThreshold^(0+384)
  4171  0E8B  0827               	movf	??_setLightIntLowThreshold^(0+384),w
  4172  0E8C  00A9               	movwf	setLightIntLowThreshold@val_high^(0+384)
  4173                           
  4174                           ;APDS9960.c: 260: if( !wireWriteDataByte(0x84, val_low) ) {
  4175  0E8D  0828               	movf	setLightIntLowThreshold@val_low^(0+384),w
  4176  0E8E  00A7               	movwf	??_setLightIntLowThreshold^(0+384)
  4177  0E8F  0827               	movf	??_setLightIntLowThreshold^(0+384),w
  4178  0E90  00A1               	movwf	wireWriteDataByte@val^(0+384)
  4179  0E91  3084               	movlw	132
  4180  0E92  318D  2579  318E   	fcall	_wireWriteDataByte
  4181  0E95  0023               	movlb	3	; select bank3
  4182  0E96  0821               	movf	?_wireWriteDataByte^(0+384),w
  4183  0E97  0422               	iorwf	(?_wireWriteDataByte+1)^(0+384),w
  4184  0E98  1D03               	btfss	3,2
  4185  0E99  2E9C               	goto	l3297
  4186  0E9A                     l3293:	
  4187                           
  4188                           ;APDS9960.c: 261: return 0;
  4189  0E9A  3000               	movlw	0
  4190  0E9B  0008               	return
  4191  0E9C                     l3297:	
  4192                           
  4193                           ;APDS9960.c: 262: };APDS9960.c: 265: if( !wireWriteDataByte(0x85, val_high) ) {
  4194  0E9C  0829               	movf	setLightIntLowThreshold@val_high^(0+384),w
  4195  0E9D  00A7               	movwf	??_setLightIntLowThreshold^(0+384)
  4196  0E9E  0827               	movf	??_setLightIntLowThreshold^(0+384),w
  4197  0E9F  00A1               	movwf	wireWriteDataByte@val^(0+384)
  4198  0EA0  3085               	movlw	133
  4199  0EA1  318D  2579  318E   	fcall	_wireWriteDataByte
  4200  0EA4  0023               	movlb	3	; select bank3
  4201  0EA5  0821               	movf	?_wireWriteDataByte^(0+384),w
  4202  0EA6  0422               	iorwf	(?_wireWriteDataByte+1)^(0+384),w
  4203  0EA7  1903               	btfsc	3,2
  4204  0EA8  2E9A               	goto	l3293
  4205                           
  4206                           ;APDS9960.c: 267: };APDS9960.c: 269: return 1;
  4207  0EA9  3001               	movlw	1
  4208  0EAA  0008               	return
  4209  0EAB                     __end_of_setLightIntLowThreshold:	
  4210                           
  4211                           	psect	text7
  4212  0E5D                     __ptext7:	
  4213 ;; *************** function _setLightIntHighThreshold *****************
  4214 ;; Defined at:
  4215 ;;		line 273 in file "APDS9960.c"
  4216 ;; Parameters:    Size  Location     Type
  4217 ;;  threshold       2    5[BANK3 ] unsigned int 
  4218 ;; Auto vars:     Size  Location     Type
  4219 ;;  val_high        1    9[BANK3 ] unsigned char 
  4220 ;;  val_low         1    8[BANK3 ] unsigned char 
  4221 ;; Return value:  Size  Location     Type
  4222 ;;                  1    wreg      unsigned char 
  4223 ;; Registers used:
  4224 ;;		wreg, status,2, status,0, pclath, cstack
  4225 ;; Tracked objects:
  4226 ;;		On entry : 0/0
  4227 ;;		On exit  : 0/0
  4228 ;;		Unchanged: 0/0
  4229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4230 ;;      Params:         0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0
  4231 ;;      Locals:         0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0
  4232 ;;      Temps:          0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  4233 ;;      Totals:         0       0       0       0       5       0       0       0       0       0       0       0       
      +0       0
  4234 ;;Total ram usage:        5 bytes
  4235 ;; Hardware stack levels used:    1
  4236 ;; Hardware stack levels required when called:    8
  4237 ;; This function calls:
  4238 ;;		_wireWriteDataByte
  4239 ;; This function is called by:
  4240 ;;		_initialize
  4241 ;; This function uses a non-reentrant model
  4242 ;;
  4243                           
  4244                           
  4245                           ;psect for function _setLightIntHighThreshold
  4246  0E5D                     _setLightIntHighThreshold:	
  4247                           
  4248                           ;APDS9960.c: 275: uint8_t val_low;;APDS9960.c: 276: uint8_t val_high;;APDS9960.c: 279: v
      +                          al_low = threshold & 0x00FF;
  4249                           
  4250                           ;incstack = 0
  4251                           ; Regs used in _setLightIntHighThreshold: [wreg+status,2+status,0+pclath+cstack]
  4252  0E5D  0023               	movlb	3	; select bank3
  4253  0E5E  0825               	movf	setLightIntHighThreshold@threshold^(0+384),w
  4254  0E5F  00A7               	movwf	??_setLightIntHighThreshold^(0+384)
  4255  0E60  0827               	movf	??_setLightIntHighThreshold^(0+384),w
  4256  0E61  00A8               	movwf	setLightIntHighThreshold@val_low^(0+384)
  4257                           
  4258                           ;APDS9960.c: 280: val_high = (threshold & 0xFF00) >> 8;
  4259  0E62  0826               	movf	(setLightIntHighThreshold@threshold+1)^(0+384),w
  4260  0E63  00A7               	movwf	??_setLightIntHighThreshold^(0+384)
  4261  0E64  0827               	movf	??_setLightIntHighThreshold^(0+384),w
  4262  0E65  00A9               	movwf	setLightIntHighThreshold@val_high^(0+384)
  4263                           
  4264                           ;APDS9960.c: 283: if( !wireWriteDataByte(0x86, val_low) ) {
  4265  0E66  0828               	movf	setLightIntHighThreshold@val_low^(0+384),w
  4266  0E67  00A7               	movwf	??_setLightIntHighThreshold^(0+384)
  4267  0E68  0827               	movf	??_setLightIntHighThreshold^(0+384),w
  4268  0E69  00A1               	movwf	wireWriteDataByte@val^(0+384)
  4269  0E6A  3086               	movlw	134
  4270  0E6B  318D  2579  318E   	fcall	_wireWriteDataByte
  4271  0E6E  0023               	movlb	3	; select bank3
  4272  0E6F  0821               	movf	?_wireWriteDataByte^(0+384),w
  4273  0E70  0422               	iorwf	(?_wireWriteDataByte+1)^(0+384),w
  4274  0E71  1D03               	btfss	3,2
  4275  0E72  2E75               	goto	l3317
  4276  0E73                     l3313:	
  4277                           
  4278                           ;APDS9960.c: 284: return 0;
  4279  0E73  3000               	movlw	0
  4280  0E74  0008               	return
  4281  0E75                     l3317:	
  4282                           
  4283                           ;APDS9960.c: 285: };APDS9960.c: 288: if( !wireWriteDataByte(0x87, val_high) ) {
  4284  0E75  0829               	movf	setLightIntHighThreshold@val_high^(0+384),w
  4285  0E76  00A7               	movwf	??_setLightIntHighThreshold^(0+384)
  4286  0E77  0827               	movf	??_setLightIntHighThreshold^(0+384),w
  4287  0E78  00A1               	movwf	wireWriteDataByte@val^(0+384)
  4288  0E79  3087               	movlw	135
  4289  0E7A  318D  2579  318E   	fcall	_wireWriteDataByte
  4290  0E7D  0023               	movlb	3	; select bank3
  4291  0E7E  0821               	movf	?_wireWriteDataByte^(0+384),w
  4292  0E7F  0422               	iorwf	(?_wireWriteDataByte+1)^(0+384),w
  4293  0E80  1903               	btfsc	3,2
  4294  0E81  2E73               	goto	l3313
  4295                           
  4296                           ;APDS9960.c: 290: };APDS9960.c: 292: return 1;
  4297  0E82  3001               	movlw	1
  4298  0E83  0008               	return
  4299  0E84                     __end_of_setLightIntHighThreshold:	
  4300                           
  4301                           	psect	text8
  4302  0EAB                     __ptext8:	
  4303 ;; *************** function _setLEDDrive *****************
  4304 ;; Defined at:
  4305 ;;		line 166 in file "APDS9960.c"
  4306 ;; Parameters:    Size  Location     Type
  4307 ;;  drive           1    wreg     unsigned char 
  4308 ;; Auto vars:     Size  Location     Type
  4309 ;;  drive           1    8[BANK3 ] unsigned char 
  4310 ;;  val             1    7[BANK3 ] unsigned char 
  4311 ;; Return value:  Size  Location     Type
  4312 ;;                  1    wreg      unsigned char 
  4313 ;; Registers used:
  4314 ;;		wreg, status,2, status,0, pclath, cstack
  4315 ;; Tracked objects:
  4316 ;;		On entry : 0/0
  4317 ;;		On exit  : 0/0
  4318 ;;		Unchanged: 0/0
  4319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4320 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4321 ;;      Locals:         0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0
  4322 ;;      Temps:          0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0
  4323 ;;      Totals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  4324 ;;Total ram usage:        4 bytes
  4325 ;; Hardware stack levels used:    1
  4326 ;; Hardware stack levels required when called:    8
  4327 ;; This function calls:
  4328 ;;		_wireReadDataByte
  4329 ;;		_wireWriteDataByte
  4330 ;; This function is called by:
  4331 ;;		_initialize
  4332 ;; This function uses a non-reentrant model
  4333 ;;
  4334                           
  4335                           
  4336                           ;psect for function _setLEDDrive
  4337  0EAB                     _setLEDDrive:	
  4338                           
  4339                           ;incstack = 0
  4340                           ; Regs used in _setLEDDrive: [wreg+status,2+status,0+pclath+cstack]
  4341                           ;setLEDDrive@drive stored from wreg
  4342  0EAB  0023               	movlb	3	; select bank3
  4343  0EAC  00A8               	movwf	setLEDDrive@drive^(0+384)
  4344                           
  4345                           ;APDS9960.c: 168: uint8_t val;;APDS9960.c: 171: val=wireReadDataByte(0x8F);
  4346  0EAD  308F               	movlw	143
  4347  0EAE  318D  25EC  318E   	fcall	_wireReadDataByte
  4348  0EB1  0023               	movlb	3	; select bank3
  4349  0EB2  00A5               	movwf	??_setLEDDrive^(0+384)
  4350  0EB3  0825               	movf	??_setLEDDrive^(0+384),w
  4351  0EB4  00A7               	movwf	setLEDDrive@val^(0+384)
  4352                           
  4353                           ;APDS9960.c: 174: drive &= 0b00000011;
  4354  0EB5  3003               	movlw	3
  4355  0EB6  00A5               	movwf	??_setLEDDrive^(0+384)
  4356  0EB7  0825               	movf	??_setLEDDrive^(0+384),w
  4357  0EB8  05A8               	andwf	setLEDDrive@drive^(0+384),f
  4358                           
  4359                           ;APDS9960.c: 175: drive = drive << 6;
  4360  0EB9  0828               	movf	setLEDDrive@drive^(0+384),w
  4361  0EBA  00A5               	movwf	??_setLEDDrive^(0+384)
  4362  0EBB  3005               	movlw	5
  4363  0EBC                     u2785:	
  4364  0EBC  35A5               	lslf	??_setLEDDrive^(0+384),f
  4365  0EBD  3EFF               	addlw	-1
  4366  0EBE  1D03               	skipz
  4367  0EBF  2EBC               	goto	u2785
  4368  0EC0  3525               	lslf	??_setLEDDrive^(0+384),w
  4369  0EC1  00A6               	movwf	(??_setLEDDrive+1)^(0+384)
  4370  0EC2  0826               	movf	(??_setLEDDrive+1)^(0+384),w
  4371  0EC3  00A8               	movwf	setLEDDrive@drive^(0+384)
  4372                           
  4373                           ;APDS9960.c: 176: val &= 0b00111111;
  4374  0EC4  303F               	movlw	63
  4375  0EC5  00A5               	movwf	??_setLEDDrive^(0+384)
  4376  0EC6  0825               	movf	??_setLEDDrive^(0+384),w
  4377  0EC7  05A7               	andwf	setLEDDrive@val^(0+384),f
  4378                           
  4379                           ;APDS9960.c: 177: val |= drive;
  4380  0EC8  0828               	movf	setLEDDrive@drive^(0+384),w
  4381  0EC9  00A5               	movwf	??_setLEDDrive^(0+384)
  4382  0ECA  0825               	movf	??_setLEDDrive^(0+384),w
  4383  0ECB  04A7               	iorwf	setLEDDrive@val^(0+384),f
  4384                           
  4385                           ;APDS9960.c: 180: if( !wireWriteDataByte(0x8F, val) ) {
  4386  0ECC  0827               	movf	setLEDDrive@val^(0+384),w
  4387  0ECD  00A5               	movwf	??_setLEDDrive^(0+384)
  4388  0ECE  0825               	movf	??_setLEDDrive^(0+384),w
  4389  0ECF  00A1               	movwf	wireWriteDataByte@val^(0+384)
  4390  0ED0  308F               	movlw	143
  4391  0ED1  318D  2579         	fcall	_wireWriteDataByte
  4392  0ED3  0008               	return
  4393  0ED4                     __end_of_setLEDDrive:	
  4394                           
  4395                           	psect	text9
  4396  0E36                     __ptext9:	
  4397 ;; *************** function _setGestureWaitTime *****************
  4398 ;; Defined at:
  4399 ;;		line 362 in file "APDS9960.c"
  4400 ;; Parameters:    Size  Location     Type
  4401 ;;  time            1    wreg     unsigned char 
  4402 ;; Auto vars:     Size  Location     Type
  4403 ;;  time            1    6[BANK3 ] unsigned char 
  4404 ;;  val             1    7[BANK3 ] unsigned char 
  4405 ;; Return value:  Size  Location     Type
  4406 ;;                  1    wreg      unsigned char 
  4407 ;; Registers used:
  4408 ;;		wreg, status,2, status,0, pclath, cstack
  4409 ;; Tracked objects:
  4410 ;;		On entry : 0/0
  4411 ;;		On exit  : 0/0
  4412 ;;		Unchanged: 0/0
  4413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4414 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4415 ;;      Locals:         0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0
  4416 ;;      Temps:          0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  4417 ;;      Totals:         0       0       0       0       3       0       0       0       0       0       0       0       
      +0       0
  4418 ;;Total ram usage:        3 bytes
  4419 ;; Hardware stack levels used:    1
  4420 ;; Hardware stack levels required when called:    8
  4421 ;; This function calls:
  4422 ;;		_wireReadDataByte
  4423 ;;		_wireWriteDataByte
  4424 ;; This function is called by:
  4425 ;;		_initialize
  4426 ;; This function uses a non-reentrant model
  4427 ;;
  4428                           
  4429                           
  4430                           ;psect for function _setGestureWaitTime
  4431  0E36                     _setGestureWaitTime:	
  4432                           
  4433                           ;incstack = 0
  4434                           ; Regs used in _setGestureWaitTime: [wreg+status,2+status,0+pclath+cstack]
  4435                           ;setGestureWaitTime@time stored from wreg
  4436  0E36  0023               	movlb	3	; select bank3
  4437  0E37  00A6               	movwf	setGestureWaitTime@time^(0+384)
  4438                           
  4439                           ;APDS9960.c: 364: uint8_t val;;APDS9960.c: 367: val = wireReadDataByte(0xA3);
  4440  0E38  30A3               	movlw	163
  4441  0E39  318D  25EC  318E   	fcall	_wireReadDataByte
  4442  0E3C  0023               	movlb	3	; select bank3
  4443  0E3D  00A5               	movwf	??_setGestureWaitTime^(0+384)
  4444  0E3E  0825               	movf	??_setGestureWaitTime^(0+384),w
  4445  0E3F  00A7               	movwf	setGestureWaitTime@val^(0+384)
  4446                           
  4447                           ;APDS9960.c: 370: time &= 0b00000111;
  4448  0E40  3007               	movlw	7
  4449  0E41  00A5               	movwf	??_setGestureWaitTime^(0+384)
  4450  0E42  0825               	movf	??_setGestureWaitTime^(0+384),w
  4451  0E43  05A6               	andwf	setGestureWaitTime@time^(0+384),f
  4452                           
  4453                           ;APDS9960.c: 371: val &= 0b11111000;
  4454  0E44  30F8               	movlw	248
  4455  0E45  00A5               	movwf	??_setGestureWaitTime^(0+384)
  4456  0E46  0825               	movf	??_setGestureWaitTime^(0+384),w
  4457  0E47  05A7               	andwf	setGestureWaitTime@val^(0+384),f
  4458                           
  4459                           ;APDS9960.c: 372: val |= time;
  4460  0E48  0826               	movf	setGestureWaitTime@time^(0+384),w
  4461  0E49  00A5               	movwf	??_setGestureWaitTime^(0+384)
  4462  0E4A  0825               	movf	??_setGestureWaitTime^(0+384),w
  4463  0E4B  04A7               	iorwf	setGestureWaitTime@val^(0+384),f
  4464                           
  4465                           ;APDS9960.c: 375: if( !wireWriteDataByte(0xA3, val) ) {
  4466  0E4C  0827               	movf	setGestureWaitTime@val^(0+384),w
  4467  0E4D  00A5               	movwf	??_setGestureWaitTime^(0+384)
  4468  0E4E  0825               	movf	??_setGestureWaitTime^(0+384),w
  4469  0E4F  00A1               	movwf	wireWriteDataByte@val^(0+384)
  4470  0E50  30A3               	movlw	163
  4471  0E51  318D  2579  318E   	fcall	_wireWriteDataByte
  4472  0E54  0023               	movlb	3	; select bank3
  4473  0E55  0821               	movf	?_wireWriteDataByte^(0+384),w
  4474  0E56  0422               	iorwf	(?_wireWriteDataByte+1)^(0+384),w
  4475  0E57  1D03               	btfss	3,2
  4476  0E58  2E5B               	goto	l3397
  4477                           
  4478                           ;APDS9960.c: 376: return 0;
  4479  0E59  3000               	movlw	0
  4480  0E5A  0008               	return
  4481  0E5B                     l3397:	
  4482                           
  4483                           ;APDS9960.c: 377: };APDS9960.c: 379: return 1;
  4484  0E5B  3001               	movlw	1
  4485  0E5C  0008               	return
  4486  0E5D                     __end_of_setGestureWaitTime:	
  4487                           
  4488                           	psect	text10
  4489  07CE                     __ptext10:	
  4490 ;; *************** function _setGestureLEDDrive *****************
  4491 ;; Defined at:
  4492 ;;		line 339 in file "APDS9960.c"
  4493 ;; Parameters:    Size  Location     Type
  4494 ;;  drive           1    wreg     unsigned char 
  4495 ;; Auto vars:     Size  Location     Type
  4496 ;;  drive           1    8[BANK3 ] unsigned char 
  4497 ;;  val             1    7[BANK3 ] unsigned char 
  4498 ;; Return value:  Size  Location     Type
  4499 ;;                  1    wreg      unsigned char 
  4500 ;; Registers used:
  4501 ;;		wreg, status,2, status,0, pclath, cstack
  4502 ;; Tracked objects:
  4503 ;;		On entry : 0/0
  4504 ;;		On exit  : 0/0
  4505 ;;		Unchanged: 0/0
  4506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4507 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4508 ;;      Locals:         0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0
  4509 ;;      Temps:          0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0
  4510 ;;      Totals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  4511 ;;Total ram usage:        4 bytes
  4512 ;; Hardware stack levels used:    1
  4513 ;; Hardware stack levels required when called:    8
  4514 ;; This function calls:
  4515 ;;		_wireReadDataByte
  4516 ;;		_wireWriteDataByte
  4517 ;; This function is called by:
  4518 ;;		_initialize
  4519 ;; This function uses a non-reentrant model
  4520 ;;
  4521                           
  4522                           
  4523                           ;psect for function _setGestureLEDDrive
  4524  07CE                     _setGestureLEDDrive:	
  4525                           
  4526                           ;incstack = 0
  4527                           ; Regs used in _setGestureLEDDrive: [wreg+status,2+status,0+pclath+cstack]
  4528                           ;setGestureLEDDrive@drive stored from wreg
  4529  07CE  0023               	movlb	3	; select bank3
  4530  07CF  00A8               	movwf	setGestureLEDDrive@drive^(0+384)
  4531                           
  4532                           ;APDS9960.c: 341: uint8_t val;;APDS9960.c: 344: val = wireReadDataByte(0xA3);
  4533  07D0  30A3               	movlw	163
  4534  07D1  318D  25EC  3187   	fcall	_wireReadDataByte
  4535  07D4  0023               	movlb	3	; select bank3
  4536  07D5  00A5               	movwf	??_setGestureLEDDrive^(0+384)
  4537  07D6  0825               	movf	??_setGestureLEDDrive^(0+384),w
  4538  07D7  00A7               	movwf	setGestureLEDDrive@val^(0+384)
  4539                           
  4540                           ;APDS9960.c: 348: drive &= 0b00000011;
  4541  07D8  3003               	movlw	3
  4542  07D9  00A5               	movwf	??_setGestureLEDDrive^(0+384)
  4543  07DA  0825               	movf	??_setGestureLEDDrive^(0+384),w
  4544  07DB  05A8               	andwf	setGestureLEDDrive@drive^(0+384),f
  4545                           
  4546                           ;APDS9960.c: 349: drive = drive << 3;
  4547  07DC  0828               	movf	setGestureLEDDrive@drive^(0+384),w
  4548  07DD  00A5               	movwf	??_setGestureLEDDrive^(0+384)
  4549  07DE  3002               	movlw	2
  4550  07DF                     u2905:	
  4551  07DF  35A5               	lslf	??_setGestureLEDDrive^(0+384),f
  4552  07E0  3EFF               	addlw	-1
  4553  07E1  1D03               	skipz
  4554  07E2  2FDF               	goto	u2905
  4555  07E3  3525               	lslf	??_setGestureLEDDrive^(0+384),w
  4556  07E4  00A6               	movwf	(??_setGestureLEDDrive+1)^(0+384)
  4557  07E5  0826               	movf	(??_setGestureLEDDrive+1)^(0+384),w
  4558  07E6  00A8               	movwf	setGestureLEDDrive@drive^(0+384)
  4559                           
  4560                           ;APDS9960.c: 350: val &= 0b11100111;
  4561  07E7  30E7               	movlw	231
  4562  07E8  00A5               	movwf	??_setGestureLEDDrive^(0+384)
  4563  07E9  0825               	movf	??_setGestureLEDDrive^(0+384),w
  4564  07EA  05A7               	andwf	setGestureLEDDrive@val^(0+384),f
  4565                           
  4566                           ;APDS9960.c: 351: val |= drive;
  4567  07EB  0828               	movf	setGestureLEDDrive@drive^(0+384),w
  4568  07EC  00A5               	movwf	??_setGestureLEDDrive^(0+384)
  4569  07ED  0825               	movf	??_setGestureLEDDrive^(0+384),w
  4570  07EE  04A7               	iorwf	setGestureLEDDrive@val^(0+384),f
  4571                           
  4572                           ;APDS9960.c: 354: if( !wireWriteDataByte(0xA3, val) ) {
  4573  07EF  0827               	movf	setGestureLEDDrive@val^(0+384),w
  4574  07F0  00A5               	movwf	??_setGestureLEDDrive^(0+384)
  4575  07F1  0825               	movf	??_setGestureLEDDrive^(0+384),w
  4576  07F2  00A1               	movwf	wireWriteDataByte@val^(0+384)
  4577  07F3  30A3               	movlw	163
  4578  07F4  318D  2579  3187   	fcall	_wireWriteDataByte
  4579  07F7  0023               	movlb	3	; select bank3
  4580  07F8  0821               	movf	?_wireWriteDataByte^(0+384),w
  4581  07F9  0422               	iorwf	(?_wireWriteDataByte+1)^(0+384),w
  4582  07FA  1D03               	btfss	3,2
  4583  07FB  2FFE               	goto	l3379
  4584                           
  4585                           ;APDS9960.c: 355: return 0;
  4586  07FC  3000               	movlw	0
  4587  07FD  0008               	return
  4588  07FE                     l3379:	
  4589                           
  4590                           ;APDS9960.c: 356: };APDS9960.c: 358: return 1;
  4591  07FE  3001               	movlw	1
  4592  07FF  0008               	return
  4593  0800                     __end_of_setGestureLEDDrive:	
  4594                           
  4595                           	psect	text11
  4596  0F87                     __ptext11:	
  4597 ;; *************** function _setGestureGain *****************
  4598 ;; Defined at:
  4599 ;;		line 316 in file "APDS9960.c"
  4600 ;; Parameters:    Size  Location     Type
  4601 ;;  gain            1    wreg     unsigned char 
  4602 ;; Auto vars:     Size  Location     Type
  4603 ;;  gain            1    8[BANK3 ] unsigned char 
  4604 ;;  val             1    7[BANK3 ] unsigned char 
  4605 ;; Return value:  Size  Location     Type
  4606 ;;                  1    wreg      unsigned char 
  4607 ;; Registers used:
  4608 ;;		wreg, status,2, status,0, pclath, cstack
  4609 ;; Tracked objects:
  4610 ;;		On entry : 0/0
  4611 ;;		On exit  : 0/0
  4612 ;;		Unchanged: 0/0
  4613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4614 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4615 ;;      Locals:         0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0
  4616 ;;      Temps:          0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0
  4617 ;;      Totals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  4618 ;;Total ram usage:        4 bytes
  4619 ;; Hardware stack levels used:    1
  4620 ;; Hardware stack levels required when called:    8
  4621 ;; This function calls:
  4622 ;;		_wireReadDataByte
  4623 ;;		_wireWriteDataByte
  4624 ;; This function is called by:
  4625 ;;		_initialize
  4626 ;; This function uses a non-reentrant model
  4627 ;;
  4628                           
  4629                           
  4630                           ;psect for function _setGestureGain
  4631  0F87                     _setGestureGain:	
  4632                           
  4633                           ;incstack = 0
  4634                           ; Regs used in _setGestureGain: [wreg+status,2+status,0+pclath+cstack]
  4635                           ;setGestureGain@gain stored from wreg
  4636  0F87  0023               	movlb	3	; select bank3
  4637  0F88  00A8               	movwf	setGestureGain@gain^(0+384)
  4638                           
  4639                           ;APDS9960.c: 318: uint8_t val;;APDS9960.c: 321: val = wireReadDataByte(0xA3);
  4640  0F89  30A3               	movlw	163
  4641  0F8A  318D  25EC  318F   	fcall	_wireReadDataByte
  4642  0F8D  0023               	movlb	3	; select bank3
  4643  0F8E  00A5               	movwf	??_setGestureGain^(0+384)
  4644  0F8F  0825               	movf	??_setGestureGain^(0+384),w
  4645  0F90  00A7               	movwf	setGestureGain@val^(0+384)
  4646                           
  4647                           ;APDS9960.c: 325: gain &= 0b00000011;
  4648  0F91  3003               	movlw	3
  4649  0F92  00A5               	movwf	??_setGestureGain^(0+384)
  4650  0F93  0825               	movf	??_setGestureGain^(0+384),w
  4651  0F94  05A8               	andwf	setGestureGain@gain^(0+384),f
  4652                           
  4653                           ;APDS9960.c: 326: gain = gain << 5;
  4654  0F95  0828               	movf	setGestureGain@gain^(0+384),w
  4655  0F96  00A5               	movwf	??_setGestureGain^(0+384)
  4656  0F97  3004               	movlw	4
  4657  0F98                     u2885:	
  4658  0F98  35A5               	lslf	??_setGestureGain^(0+384),f
  4659  0F99  3EFF               	addlw	-1
  4660  0F9A  1D03               	skipz
  4661  0F9B  2F98               	goto	u2885
  4662  0F9C  3525               	lslf	??_setGestureGain^(0+384),w
  4663  0F9D  00A6               	movwf	(??_setGestureGain+1)^(0+384)
  4664  0F9E  0826               	movf	(??_setGestureGain+1)^(0+384),w
  4665  0F9F  00A8               	movwf	setGestureGain@gain^(0+384)
  4666                           
  4667                           ;APDS9960.c: 327: val &= 0b10011111;
  4668  0FA0  309F               	movlw	159
  4669  0FA1  00A5               	movwf	??_setGestureGain^(0+384)
  4670  0FA2  0825               	movf	??_setGestureGain^(0+384),w
  4671  0FA3  05A7               	andwf	setGestureGain@val^(0+384),f
  4672                           
  4673                           ;APDS9960.c: 328: val |= gain;
  4674  0FA4  0828               	movf	setGestureGain@gain^(0+384),w
  4675  0FA5  00A5               	movwf	??_setGestureGain^(0+384)
  4676  0FA6  0825               	movf	??_setGestureGain^(0+384),w
  4677  0FA7  04A7               	iorwf	setGestureGain@val^(0+384),f
  4678                           
  4679                           ;APDS9960.c: 331: if( !wireWriteDataByte(0xA3, val) ) {
  4680  0FA8  0827               	movf	setGestureGain@val^(0+384),w
  4681  0FA9  00A5               	movwf	??_setGestureGain^(0+384)
  4682  0FAA  0825               	movf	??_setGestureGain^(0+384),w
  4683  0FAB  00A1               	movwf	wireWriteDataByte@val^(0+384)
  4684  0FAC  30A3               	movlw	163
  4685  0FAD  318D  2579  318F   	fcall	_wireWriteDataByte
  4686  0FB0  0023               	movlb	3	; select bank3
  4687  0FB1  0821               	movf	?_wireWriteDataByte^(0+384),w
  4688  0FB2  0422               	iorwf	(?_wireWriteDataByte+1)^(0+384),w
  4689  0FB3  1D03               	btfss	3,2
  4690  0FB4  2FB7               	goto	l3361
  4691                           
  4692                           ;APDS9960.c: 332: return 0;
  4693  0FB5  3000               	movlw	0
  4694  0FB6  0008               	return
  4695  0FB7                     l3361:	
  4696                           
  4697                           ;APDS9960.c: 333: };APDS9960.c: 335: return 1;
  4698  0FB7  3001               	movlw	1
  4699  0FB8  0008               	return
  4700  0FB9                     __end_of_setGestureGain:	
  4701                           
  4702                           	psect	text12
  4703  0CFB                     __ptext12:	
  4704 ;; *************** function _setGestureExitThresh *****************
  4705 ;; Defined at:
  4706 ;;		line 306 in file "APDS9960.c"
  4707 ;; Parameters:    Size  Location     Type
  4708 ;;  threshold       1    wreg     unsigned char 
  4709 ;; Auto vars:     Size  Location     Type
  4710 ;;  threshold       1    6[BANK3 ] unsigned char 
  4711 ;; Return value:  Size  Location     Type
  4712 ;;                  1    wreg      unsigned char 
  4713 ;; Registers used:
  4714 ;;		wreg, status,2, status,0, pclath, cstack
  4715 ;; Tracked objects:
  4716 ;;		On entry : 0/0
  4717 ;;		On exit  : 0/0
  4718 ;;		Unchanged: 0/0
  4719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4720 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4721 ;;      Locals:         0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  4722 ;;      Temps:          0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  4723 ;;      Totals:         0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0
  4724 ;;Total ram usage:        2 bytes
  4725 ;; Hardware stack levels used:    1
  4726 ;; Hardware stack levels required when called:    8
  4727 ;; This function calls:
  4728 ;;		_wireWriteDataByte
  4729 ;; This function is called by:
  4730 ;;		_initialize
  4731 ;; This function uses a non-reentrant model
  4732 ;;
  4733                           
  4734                           
  4735                           ;psect for function _setGestureExitThresh
  4736  0CFB                     _setGestureExitThresh:	
  4737                           
  4738                           ;incstack = 0
  4739                           ; Regs used in _setGestureExitThresh: [wreg+status,2+status,0+pclath+cstack]
  4740                           ;setGestureExitThresh@threshold stored from wreg
  4741  0CFB  0023               	movlb	3	; select bank3
  4742  0CFC  00A6               	movwf	setGestureExitThresh@threshold^(0+384)
  4743                           
  4744                           ;APDS9960.c: 308: if( !wireWriteDataByte(0xA1, threshold) ) {
  4745  0CFD  0826               	movf	setGestureExitThresh@threshold^(0+384),w
  4746  0CFE  00A5               	movwf	??_setGestureExitThresh^(0+384)
  4747  0CFF  0825               	movf	??_setGestureExitThresh^(0+384),w
  4748  0D00  00A1               	movwf	wireWriteDataByte@val^(0+384)
  4749  0D01  30A1               	movlw	161
  4750  0D02  318D  2579  318C   	fcall	_wireWriteDataByte
  4751  0D05  0023               	movlb	3	; select bank3
  4752  0D06  0821               	movf	?_wireWriteDataByte^(0+384),w
  4753  0D07  0422               	iorwf	(?_wireWriteDataByte+1)^(0+384),w
  4754  0D08  1D03               	btfss	3,2
  4755  0D09  2D0C               	goto	l3343
  4756                           
  4757                           ;APDS9960.c: 309: return 0;
  4758  0D0A  3000               	movlw	0
  4759  0D0B  0008               	return
  4760  0D0C                     l3343:	
  4761                           
  4762                           ;APDS9960.c: 310: };APDS9960.c: 312: return 1;
  4763  0D0C  3001               	movlw	1
  4764  0D0D  0008               	return
  4765  0D0E                     __end_of_setGestureExitThresh:	
  4766                           
  4767                           	psect	text13
  4768  0CE8                     __ptext13:	
  4769 ;; *************** function _setGestureEnterThresh *****************
  4770 ;; Defined at:
  4771 ;;		line 296 in file "APDS9960.c"
  4772 ;; Parameters:    Size  Location     Type
  4773 ;;  threshold       1    wreg     unsigned char 
  4774 ;; Auto vars:     Size  Location     Type
  4775 ;;  threshold       1    6[BANK3 ] unsigned char 
  4776 ;; Return value:  Size  Location     Type
  4777 ;;                  1    wreg      unsigned char 
  4778 ;; Registers used:
  4779 ;;		wreg, status,2, status,0, pclath, cstack
  4780 ;; Tracked objects:
  4781 ;;		On entry : 0/0
  4782 ;;		On exit  : 0/0
  4783 ;;		Unchanged: 0/0
  4784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4785 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4786 ;;      Locals:         0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  4787 ;;      Temps:          0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  4788 ;;      Totals:         0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0
  4789 ;;Total ram usage:        2 bytes
  4790 ;; Hardware stack levels used:    1
  4791 ;; Hardware stack levels required when called:    8
  4792 ;; This function calls:
  4793 ;;		_wireWriteDataByte
  4794 ;; This function is called by:
  4795 ;;		_initialize
  4796 ;; This function uses a non-reentrant model
  4797 ;;
  4798                           
  4799                           
  4800                           ;psect for function _setGestureEnterThresh
  4801  0CE8                     _setGestureEnterThresh:	
  4802                           
  4803                           ;incstack = 0
  4804                           ; Regs used in _setGestureEnterThresh: [wreg+status,2+status,0+pclath+cstack]
  4805                           ;setGestureEnterThresh@threshold stored from wreg
  4806  0CE8  0023               	movlb	3	; select bank3
  4807  0CE9  00A6               	movwf	setGestureEnterThresh@threshold^(0+384)
  4808                           
  4809                           ;APDS9960.c: 298: if( !wireWriteDataByte(0xA0, threshold) ) {
  4810  0CEA  0826               	movf	setGestureEnterThresh@threshold^(0+384),w
  4811  0CEB  00A5               	movwf	??_setGestureEnterThresh^(0+384)
  4812  0CEC  0825               	movf	??_setGestureEnterThresh^(0+384),w
  4813  0CED  00A1               	movwf	wireWriteDataByte@val^(0+384)
  4814  0CEE  30A0               	movlw	160
  4815  0CEF  318D  2579  318C   	fcall	_wireWriteDataByte
  4816  0CF2  0023               	movlb	3	; select bank3
  4817  0CF3  0821               	movf	?_wireWriteDataByte^(0+384),w
  4818  0CF4  0422               	iorwf	(?_wireWriteDataByte+1)^(0+384),w
  4819  0CF5  1D03               	btfss	3,2
  4820  0CF6  2CF9               	goto	l3333
  4821                           
  4822                           ;APDS9960.c: 299: return 0;
  4823  0CF7  3000               	movlw	0
  4824  0CF8  0008               	return
  4825  0CF9                     l3333:	
  4826                           
  4827                           ;APDS9960.c: 300: };APDS9960.c: 302: return 1;
  4828  0CF9  3001               	movlw	1
  4829  0CFA  0008               	return
  4830  0CFB                     __end_of_setGestureEnterThresh:	
  4831                           
  4832                           	psect	text14
  4833  0DAF                     __ptext14:	
  4834 ;; *************** function _setAmbientLightGain *****************
  4835 ;; Defined at:
  4836 ;;		line 209 in file "APDS9960.c"
  4837 ;; Parameters:    Size  Location     Type
  4838 ;;  drive           1    wreg     unsigned char 
  4839 ;; Auto vars:     Size  Location     Type
  4840 ;;  drive           1    6[BANK3 ] unsigned char 
  4841 ;;  val             1    7[BANK3 ] unsigned char 
  4842 ;; Return value:  Size  Location     Type
  4843 ;;                  1    wreg      unsigned char 
  4844 ;; Registers used:
  4845 ;;		wreg, status,2, status,0, pclath, cstack
  4846 ;; Tracked objects:
  4847 ;;		On entry : 0/0
  4848 ;;		On exit  : 0/0
  4849 ;;		Unchanged: 0/0
  4850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4851 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4852 ;;      Locals:         0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0
  4853 ;;      Temps:          0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  4854 ;;      Totals:         0       0       0       0       3       0       0       0       0       0       0       0       
      +0       0
  4855 ;;Total ram usage:        3 bytes
  4856 ;; Hardware stack levels used:    1
  4857 ;; Hardware stack levels required when called:    8
  4858 ;; This function calls:
  4859 ;;		_wireReadDataByte
  4860 ;;		_wireWriteDataByte
  4861 ;; This function is called by:
  4862 ;;		_initialize
  4863 ;; This function uses a non-reentrant model
  4864 ;;
  4865                           
  4866                           
  4867                           ;psect for function _setAmbientLightGain
  4868  0DAF                     _setAmbientLightGain:	
  4869                           
  4870                           ;incstack = 0
  4871                           ; Regs used in _setAmbientLightGain: [wreg+status,2+status,0+pclath+cstack]
  4872                           ;setAmbientLightGain@drive stored from wreg
  4873  0DAF  0023               	movlb	3	; select bank3
  4874  0DB0  00A6               	movwf	setAmbientLightGain@drive^(0+384)
  4875                           
  4876                           ;APDS9960.c: 211: uint8_t val;;APDS9960.c: 214: val= wireReadDataByte(0x8F);
  4877  0DB1  308F               	movlw	143
  4878  0DB2  318D  25EC  318D   	fcall	_wireReadDataByte
  4879  0DB5  0023               	movlb	3	; select bank3
  4880  0DB6  00A5               	movwf	??_setAmbientLightGain^(0+384)
  4881  0DB7  0825               	movf	??_setAmbientLightGain^(0+384),w
  4882  0DB8  00A7               	movwf	setAmbientLightGain@val^(0+384)
  4883                           
  4884                           ;APDS9960.c: 217: drive &= 0b00000011;
  4885  0DB9  3003               	movlw	3
  4886  0DBA  00A5               	movwf	??_setAmbientLightGain^(0+384)
  4887  0DBB  0825               	movf	??_setAmbientLightGain^(0+384),w
  4888  0DBC  05A6               	andwf	setAmbientLightGain@drive^(0+384),f
  4889                           
  4890                           ;APDS9960.c: 218: val &= 0b11111100;
  4891  0DBD  30FC               	movlw	252
  4892  0DBE  00A5               	movwf	??_setAmbientLightGain^(0+384)
  4893  0DBF  0825               	movf	??_setAmbientLightGain^(0+384),w
  4894  0DC0  05A7               	andwf	setAmbientLightGain@val^(0+384),f
  4895                           
  4896                           ;APDS9960.c: 219: val |= drive;
  4897  0DC1  0826               	movf	setAmbientLightGain@drive^(0+384),w
  4898  0DC2  00A5               	movwf	??_setAmbientLightGain^(0+384)
  4899  0DC3  0825               	movf	??_setAmbientLightGain^(0+384),w
  4900  0DC4  04A7               	iorwf	setAmbientLightGain@val^(0+384),f
  4901                           
  4902                           ;APDS9960.c: 222: if( !wireWriteDataByte(0x8F, val) ) {
  4903  0DC5  0827               	movf	setAmbientLightGain@val^(0+384),w
  4904  0DC6  00A5               	movwf	??_setAmbientLightGain^(0+384)
  4905  0DC7  0825               	movf	??_setAmbientLightGain^(0+384),w
  4906  0DC8  00A1               	movwf	wireWriteDataByte@val^(0+384)
  4907  0DC9  308F               	movlw	143
  4908  0DCA  318D  2579         	fcall	_wireWriteDataByte
  4909  0DCC  0008               	return
  4910  0DCD                     __end_of_setAmbientLightGain:	
  4911                           
  4912                           	psect	text15
  4913  0CB2                     __ptext15:	
  4914 ;; *************** function _i2c2_driver_open *****************
  4915 ;; Defined at:
  4916 ;;		line 83 in file "mcc_generated_files/i2c2_driver.c"
  4917 ;; Parameters:    Size  Location     Type
  4918 ;;		None
  4919 ;; Auto vars:     Size  Location     Type
  4920 ;;		None
  4921 ;; Return value:  Size  Location     Type
  4922 ;;		None               void
  4923 ;; Registers used:
  4924 ;;		wreg, status,2
  4925 ;; Tracked objects:
  4926 ;;		On entry : 0/0
  4927 ;;		On exit  : 0/0
  4928 ;;		Unchanged: 0/0
  4929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4931 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4932 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4933 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4934 ;;Total ram usage:        0 bytes
  4935 ;; Hardware stack levels used:    1
  4936 ;; Hardware stack levels required when called:    6
  4937 ;; This function calls:
  4938 ;;		Nothing
  4939 ;; This function is called by:
  4940 ;;		_initialize
  4941 ;; This function uses a non-reentrant model
  4942 ;;
  4943                           
  4944                           
  4945                           ;psect for function _i2c2_driver_open
  4946  0CB2                     _i2c2_driver_open:	
  4947                           
  4948                           ;i2c2_driver.c: 85: if(!SSP2CON1bits.SSPEN)
  4949                           
  4950                           ;incstack = 0
  4951                           ; Regs used in _i2c2_driver_open: [wreg+status,2]
  4952  0CB2  0024               	movlb	4	; select bank4
  4953  0CB3  1A9D               	btfsc	29,5	;volatile
  4954  0CB4  0008               	return
  4955                           
  4956                           ;i2c2_driver.c: 86: {;i2c2_driver.c: 87: SSP2STAT = 0x00;
  4957  0CB5  019C               	clrf	28	;volatile
  4958                           
  4959                           ;i2c2_driver.c: 88: SSP2CON1 = 0x28;
  4960  0CB6  3028               	movlw	40
  4961  0CB7  009D               	movwf	29	;volatile
  4962                           
  4963                           ;i2c2_driver.c: 89: SSP2CON2 = 0x00;
  4964  0CB8  019E               	clrf	30	;volatile
  4965                           
  4966                           ;i2c2_driver.c: 90: SSP2ADD = 0x9;
  4967  0CB9  3009               	movlw	9
  4968  0CBA  009A               	movwf	26	;volatile
  4969  0CBB  0008               	return
  4970  0CBC                     __end_of_i2c2_driver_open:	
  4971                           
  4972                           	psect	text16
  4973  0CA9                     __ptext16:	
  4974 ;; *************** function _i2c2_driver_setI2cISR *****************
  4975 ;; Defined at:
  4976 ;;		line 262 in file "mcc_generated_files/i2c2_driver.c"
  4977 ;; Parameters:    Size  Location     Type
  4978 ;;  handler         2    0[BANK3 ] PTR FTN()void 
  4979 ;;		 -> handleGesture(1), 
  4980 ;; Auto vars:     Size  Location     Type
  4981 ;;		None
  4982 ;; Return value:  Size  Location     Type
  4983 ;;                  1    wreg      void 
  4984 ;; Registers used:
  4985 ;;		wreg
  4986 ;; Tracked objects:
  4987 ;;		On entry : 0/0
  4988 ;;		On exit  : 0/0
  4989 ;;		Unchanged: 0/0
  4990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4991 ;;      Params:         0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0
  4992 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4993 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4994 ;;      Totals:         0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0
  4995 ;;Total ram usage:        2 bytes
  4996 ;; Hardware stack levels used:    1
  4997 ;; Hardware stack levels required when called:    6
  4998 ;; This function calls:
  4999 ;;		Nothing
  5000 ;; This function is called by:
  5001 ;;		_main
  5002 ;; This function uses a non-reentrant model
  5003 ;;
  5004                           
  5005                           
  5006                           ;psect for function _i2c2_driver_setI2cISR
  5007  0CA9                     _i2c2_driver_setI2cISR:	
  5008                           
  5009                           ;i2c2_driver.c: 263: i2c2_driver_i2cISR = handler;
  5010                           
  5011                           ;incstack = 0
  5012                           ; Regs used in _i2c2_driver_setI2cISR: [wreg]
  5013  0CA9  0023               	movlb	3	; select bank3
  5014  0CAA  0821               	movf	(i2c2_driver_setI2cISR@handler+1)^(0+384),w
  5015  0CAB  0020               	movlb	0	; select bank0
  5016  0CAC  00E8               	movwf	_i2c2_driver_i2cISR+1
  5017  0CAD  0023               	movlb	3	; select bank3
  5018  0CAE  0820               	movf	i2c2_driver_setI2cISR@handler^(0+384),w
  5019  0CAF  0020               	movlb	0	; select bank0
  5020  0CB0  00E7               	movwf	_i2c2_driver_i2cISR
  5021  0CB1  0008               	return
  5022  0CB2                     __end_of_i2c2_driver_setI2cISR:	
  5023                           
  5024                           	psect	text17
  5025  0682                     __ptext17:	
  5026 ;; *************** function _enableGestureSensor *****************
  5027 ;; Defined at:
  5028 ;;		line 405 in file "APDS9960.c"
  5029 ;; Parameters:    Size  Location     Type
  5030 ;;  interrupts      1    wreg     unsigned char 
  5031 ;; Auto vars:     Size  Location     Type
  5032 ;;  interrupts      1   12[BANK3 ] unsigned char 
  5033 ;; Return value:  Size  Location     Type
  5034 ;;                  1    wreg      unsigned char 
  5035 ;; Registers used:
  5036 ;;		wreg, status,2, status,0, pclath, cstack
  5037 ;; Tracked objects:
  5038 ;;		On entry : 0/0
  5039 ;;		On exit  : 0/0
  5040 ;;		Unchanged: 0/0
  5041 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5043 ;;      Locals:         0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  5044 ;;      Temps:          0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  5045 ;;      Totals:         0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0
  5046 ;;Total ram usage:        2 bytes
  5047 ;; Hardware stack levels used:    1
  5048 ;; Hardware stack levels required when called:   11
  5049 ;; This function calls:
  5050 ;;		_enablePower
  5051 ;;		_resetGestureParameters
  5052 ;;		_setGestureIntEnable
  5053 ;;		_setGestureMode
  5054 ;;		_setLEDBoost
  5055 ;;		_setMode
  5056 ;;		_wireWriteDataByte
  5057 ;; This function is called by:
  5058 ;;		_main
  5059 ;; This function uses a non-reentrant model
  5060 ;;
  5061                           
  5062                           
  5063                           ;psect for function _enableGestureSensor
  5064  0682                     _enableGestureSensor:	
  5065                           
  5066                           ;incstack = 0
  5067                           ; Regs used in _enableGestureSensor: [wreg+status,2+status,0+pclath+cstack]
  5068                           ;enableGestureSensor@interrupts stored from wreg
  5069  0682  0023               	movlb	3	; select bank3
  5070  0683  00AC               	movwf	enableGestureSensor@interrupts^(0+384)
  5071                           
  5072                           ;APDS9960.c: 414: resetGestureParameters();
  5073  0684  318D  2549  3186   	fcall	_resetGestureParameters
  5074                           
  5075                           ;APDS9960.c: 415: if( !wireWriteDataByte(0x83, 0xFF) ) {
  5076  0687  30FF               	movlw	255
  5077  0688  0023               	movlb	3	; select bank3
  5078  0689  00AB               	movwf	??_enableGestureSensor^(0+384)
  5079  068A  082B               	movf	??_enableGestureSensor^(0+384),w
  5080  068B  00A1               	movwf	wireWriteDataByte@val^(0+384)
  5081  068C  3083               	movlw	131
  5082  068D  318D  2579  3186   	fcall	_wireWriteDataByte
  5083  0690  0023               	movlb	3	; select bank3
  5084  0691  0821               	movf	?_wireWriteDataByte^(0+384),w
  5085  0692  0422               	iorwf	(?_wireWriteDataByte+1)^(0+384),w
  5086  0693  1903               	btfsc	3,2
  5087  0694  0008               	return
  5088                           
  5089                           ;APDS9960.c: 417: };APDS9960.c: 418: if( !wireWriteDataByte(0x8E, 0x89) ) {
  5090  0695  3089               	movlw	137
  5091  0696  00AB               	movwf	??_enableGestureSensor^(0+384)
  5092  0697  082B               	movf	??_enableGestureSensor^(0+384),w
  5093  0698  00A1               	movwf	wireWriteDataByte@val^(0+384)
  5094  0699  308E               	movlw	142
  5095  069A  318D  2579  3186   	fcall	_wireWriteDataByte
  5096  069D  0023               	movlb	3	; select bank3
  5097  069E  0821               	movf	?_wireWriteDataByte^(0+384),w
  5098  069F  0422               	iorwf	(?_wireWriteDataByte+1)^(0+384),w
  5099  06A0  1903               	btfsc	3,2
  5100  06A1  0008               	return
  5101                           
  5102                           ;APDS9960.c: 420: };APDS9960.c: 421: if( !setLEDBoost(3) ) {
  5103  06A2  3003               	movlw	3
  5104  06A3  318F  2755  3186   	fcall	_setLEDBoost
  5105  06A6  3A00               	xorlw	0
  5106  06A7  1903               	btfsc	3,2
  5107  06A8  0008               	return
  5108                           
  5109                           ;APDS9960.c: 423: };APDS9960.c: 424: if( interrupts ) {
  5110  06A9  0023               	movlb	3	; select bank3
  5111  06AA  082C               	movf	enableGestureSensor@interrupts^(0+384),w
  5112  06AB  1903               	btfsc	3,2
  5113  06AC  2EAF               	goto	l3581
  5114                           
  5115                           ;APDS9960.c: 425: if( !setGestureIntEnable(1) ) {
  5116  06AD  3001               	movlw	1
  5117  06AE  2EB0               	goto	L1
  5118  06AF                     l3581:	
  5119                           
  5120                           ;APDS9960.c: 429: if( !setGestureIntEnable(0) ) {
  5121  06AF  3000               	movlw	0
  5122  06B0                     L1:	
  5123  06B0  318E  26FD  3186   	fcall	_setGestureIntEnable
  5124  06B3  3A00               	xorlw	0
  5125  06B4  1903               	btfsc	3,2
  5126  06B5  0008               	return
  5127                           
  5128                           ;APDS9960.c: 431: };APDS9960.c: 432: };APDS9960.c: 433: if( !setGestureMode(1) ) {
  5129  06B6  3001               	movlw	1
  5130  06B7  318E  260F  3186   	fcall	_setGestureMode
  5131  06BA  3A00               	xorlw	0
  5132  06BB  1903               	btfsc	3,2
  5133  06BC  0008               	return
  5134                           
  5135                           ;APDS9960.c: 435: };APDS9960.c: 436: if( !enablePower() ){
  5136  06BD  318C  24C8  3186   	fcall	_enablePower
  5137  06C0  3A00               	xorlw	0
  5138  06C1  1903               	btfsc	3,2
  5139  06C2  0008               	return
  5140                           
  5141                           ;APDS9960.c: 438: };APDS9960.c: 439: if( !setMode(3, 1) ) {
  5142  06C3  0023               	movlb	3	; select bank3
  5143  06C4  01A6               	clrf	setMode@enable^(0+384)
  5144  06C5  0AA6               	incf	setMode@enable^(0+384),f
  5145  06C6  3003               	movlw	3
  5146  06C7  3187  2730  3186   	fcall	_setMode
  5147  06CA  3A00               	xorlw	0
  5148  06CB  1903               	btfsc	3,2
  5149  06CC  0008               	return
  5150                           
  5151                           ;APDS9960.c: 441: };APDS9960.c: 442: if( !setMode(2, 1) ) {
  5152  06CD  0023               	movlb	3	; select bank3
  5153  06CE  01A6               	clrf	setMode@enable^(0+384)
  5154  06CF  0AA6               	incf	setMode@enable^(0+384),f
  5155  06D0  3002               	movlw	2
  5156  06D1  3187  2730  3186   	fcall	_setMode
  5157  06D4  3A00               	xorlw	0
  5158  06D5  1903               	btfsc	3,2
  5159  06D6  0008               	return
  5160                           
  5161                           ;APDS9960.c: 444: };APDS9960.c: 445: if( !setMode(6, 1) ) {
  5162  06D7  0023               	movlb	3	; select bank3
  5163  06D8  01A6               	clrf	setMode@enable^(0+384)
  5164  06D9  0AA6               	incf	setMode@enable^(0+384),f
  5165  06DA  3006               	movlw	6
  5166  06DB  3187  2730         	fcall	_setMode
  5167  06DD  0008               	return
  5168  06DE                     __end_of_enableGestureSensor:	
  5169                           
  5170                           	psect	text18
  5171  0F55                     __ptext18:	
  5172 ;; *************** function _setLEDBoost *****************
  5173 ;; Defined at:
  5174 ;;		line 480 in file "APDS9960.c"
  5175 ;; Parameters:    Size  Location     Type
  5176 ;;  boost           1    wreg     unsigned char 
  5177 ;; Auto vars:     Size  Location     Type
  5178 ;;  boost           1    8[BANK3 ] unsigned char 
  5179 ;;  val             1    7[BANK3 ] unsigned char 
  5180 ;; Return value:  Size  Location     Type
  5181 ;;                  1    wreg      unsigned char 
  5182 ;; Registers used:
  5183 ;;		wreg, status,2, status,0, pclath, cstack
  5184 ;; Tracked objects:
  5185 ;;		On entry : 0/0
  5186 ;;		On exit  : 0/0
  5187 ;;		Unchanged: 0/0
  5188 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5189 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5190 ;;      Locals:         0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0
  5191 ;;      Temps:          0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0
  5192 ;;      Totals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  5193 ;;Total ram usage:        4 bytes
  5194 ;; Hardware stack levels used:    1
  5195 ;; Hardware stack levels required when called:    8
  5196 ;; This function calls:
  5197 ;;		_wireReadDataByte
  5198 ;;		_wireWriteDataByte
  5199 ;; This function is called by:
  5200 ;;		_enableGestureSensor
  5201 ;; This function uses a non-reentrant model
  5202 ;;
  5203                           
  5204                           
  5205                           ;psect for function _setLEDBoost
  5206  0F55                     _setLEDBoost:	
  5207                           
  5208                           ;incstack = 0
  5209                           ; Regs used in _setLEDBoost: [wreg+status,2+status,0+pclath+cstack]
  5210                           ;setLEDBoost@boost stored from wreg
  5211  0F55  0023               	movlb	3	; select bank3
  5212  0F56  00A8               	movwf	setLEDBoost@boost^(0+384)
  5213                           
  5214                           ;APDS9960.c: 482: uint8_t val;;APDS9960.c: 485: val=wireReadDataByte(0x90);
  5215  0F57  3090               	movlw	144
  5216  0F58  318D  25EC  318F   	fcall	_wireReadDataByte
  5217  0F5B  0023               	movlb	3	; select bank3
  5218  0F5C  00A5               	movwf	??_setLEDBoost^(0+384)
  5219  0F5D  0825               	movf	??_setLEDBoost^(0+384),w
  5220  0F5E  00A7               	movwf	setLEDBoost@val^(0+384)
  5221                           
  5222                           ;APDS9960.c: 488: boost &= 0b00000011;
  5223  0F5F  3003               	movlw	3
  5224  0F60  00A5               	movwf	??_setLEDBoost^(0+384)
  5225  0F61  0825               	movf	??_setLEDBoost^(0+384),w
  5226  0F62  05A8               	andwf	setLEDBoost@boost^(0+384),f
  5227                           
  5228                           ;APDS9960.c: 489: boost = boost << 4;
  5229  0F63  0828               	movf	setLEDBoost@boost^(0+384),w
  5230  0F64  00A5               	movwf	??_setLEDBoost^(0+384)
  5231  0F65  3003               	movlw	3
  5232  0F66                     u2945:	
  5233  0F66  35A5               	lslf	??_setLEDBoost^(0+384),f
  5234  0F67  3EFF               	addlw	-1
  5235  0F68  1D03               	skipz
  5236  0F69  2F66               	goto	u2945
  5237  0F6A  3525               	lslf	??_setLEDBoost^(0+384),w
  5238  0F6B  00A6               	movwf	(??_setLEDBoost+1)^(0+384)
  5239  0F6C  0826               	movf	(??_setLEDBoost+1)^(0+384),w
  5240  0F6D  00A8               	movwf	setLEDBoost@boost^(0+384)
  5241                           
  5242                           ;APDS9960.c: 490: val &= 0b11001111;
  5243  0F6E  30CF               	movlw	207
  5244  0F6F  00A5               	movwf	??_setLEDBoost^(0+384)
  5245  0F70  0825               	movf	??_setLEDBoost^(0+384),w
  5246  0F71  05A7               	andwf	setLEDBoost@val^(0+384),f
  5247                           
  5248                           ;APDS9960.c: 491: val |= boost;
  5249  0F72  0828               	movf	setLEDBoost@boost^(0+384),w
  5250  0F73  00A5               	movwf	??_setLEDBoost^(0+384)
  5251  0F74  0825               	movf	??_setLEDBoost^(0+384),w
  5252  0F75  04A7               	iorwf	setLEDBoost@val^(0+384),f
  5253                           
  5254                           ;APDS9960.c: 494: if( !wireWriteDataByte(0x90, val) ) {
  5255  0F76  0827               	movf	setLEDBoost@val^(0+384),w
  5256  0F77  00A5               	movwf	??_setLEDBoost^(0+384)
  5257  0F78  0825               	movf	??_setLEDBoost^(0+384),w
  5258  0F79  00A1               	movwf	wireWriteDataByte@val^(0+384)
  5259  0F7A  3090               	movlw	144
  5260  0F7B  318D  2579  318F   	fcall	_wireWriteDataByte
  5261  0F7E  0023               	movlb	3	; select bank3
  5262  0F7F  0821               	movf	?_wireWriteDataByte^(0+384),w
  5263  0F80  0422               	iorwf	(?_wireWriteDataByte+1)^(0+384),w
  5264  0F81  1D03               	btfss	3,2
  5265  0F82  2F85               	goto	l3435
  5266                           
  5267                           ;APDS9960.c: 495: return 0;
  5268  0F83  3000               	movlw	0
  5269  0F84  0008               	return
  5270  0F85                     l3435:	
  5271                           
  5272                           ;APDS9960.c: 496: };APDS9960.c: 498: return 1;
  5273  0F85  3001               	movlw	1
  5274  0F86  0008               	return
  5275  0F87                     __end_of_setLEDBoost:	
  5276                           
  5277                           	psect	text19
  5278  0E0F                     __ptext19:	
  5279 ;; *************** function _setGestureMode *****************
  5280 ;; Defined at:
  5281 ;;		line 502 in file "APDS9960.c"
  5282 ;; Parameters:    Size  Location     Type
  5283 ;;  mode            1    wreg     unsigned char 
  5284 ;; Auto vars:     Size  Location     Type
  5285 ;;  mode            1    6[BANK3 ] unsigned char 
  5286 ;;  val             1    7[BANK3 ] unsigned char 
  5287 ;; Return value:  Size  Location     Type
  5288 ;;                  1    wreg      unsigned char 
  5289 ;; Registers used:
  5290 ;;		wreg, status,2, status,0, pclath, cstack
  5291 ;; Tracked objects:
  5292 ;;		On entry : 0/0
  5293 ;;		On exit  : 0/0
  5294 ;;		Unchanged: 0/0
  5295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5297 ;;      Locals:         0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0
  5298 ;;      Temps:          0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  5299 ;;      Totals:         0       0       0       0       3       0       0       0       0       0       0       0       
      +0       0
  5300 ;;Total ram usage:        3 bytes
  5301 ;; Hardware stack levels used:    1
  5302 ;; Hardware stack levels required when called:    8
  5303 ;; This function calls:
  5304 ;;		_wireReadDataByte
  5305 ;;		_wireWriteDataByte
  5306 ;; This function is called by:
  5307 ;;		_enableGestureSensor
  5308 ;; This function uses a non-reentrant model
  5309 ;;
  5310                           
  5311                           
  5312                           ;psect for function _setGestureMode
  5313  0E0F                     _setGestureMode:	
  5314                           
  5315                           ;incstack = 0
  5316                           ; Regs used in _setGestureMode: [wreg+status,2+status,0+pclath+cstack]
  5317                           ;setGestureMode@mode stored from wreg
  5318  0E0F  0023               	movlb	3	; select bank3
  5319  0E10  00A6               	movwf	setGestureMode@mode^(0+384)
  5320                           
  5321                           ;APDS9960.c: 504: uint8_t val;;APDS9960.c: 507: val = wireReadDataByte(0xAB);
  5322  0E11  30AB               	movlw	171
  5323  0E12  318D  25EC  318E   	fcall	_wireReadDataByte
  5324  0E15  0023               	movlb	3	; select bank3
  5325  0E16  00A5               	movwf	??_setGestureMode^(0+384)
  5326  0E17  0825               	movf	??_setGestureMode^(0+384),w
  5327  0E18  00A7               	movwf	setGestureMode@val^(0+384)
  5328                           
  5329                           ;APDS9960.c: 510: mode &= 0b00000001;
  5330  0E19  3001               	movlw	1
  5331  0E1A  00A5               	movwf	??_setGestureMode^(0+384)
  5332  0E1B  0825               	movf	??_setGestureMode^(0+384),w
  5333  0E1C  05A6               	andwf	setGestureMode@mode^(0+384),f
  5334                           
  5335                           ;APDS9960.c: 511: val &= 0b11111110;
  5336  0E1D  30FE               	movlw	254
  5337  0E1E  00A5               	movwf	??_setGestureMode^(0+384)
  5338  0E1F  0825               	movf	??_setGestureMode^(0+384),w
  5339  0E20  05A7               	andwf	setGestureMode@val^(0+384),f
  5340                           
  5341                           ;APDS9960.c: 512: val |= mode;
  5342  0E21  0826               	movf	setGestureMode@mode^(0+384),w
  5343  0E22  00A5               	movwf	??_setGestureMode^(0+384)
  5344  0E23  0825               	movf	??_setGestureMode^(0+384),w
  5345  0E24  04A7               	iorwf	setGestureMode@val^(0+384),f
  5346                           
  5347                           ;APDS9960.c: 515: if( !wireWriteDataByte(0xAB, val) ) {
  5348  0E25  0827               	movf	setGestureMode@val^(0+384),w
  5349  0E26  00A5               	movwf	??_setGestureMode^(0+384)
  5350  0E27  0825               	movf	??_setGestureMode^(0+384),w
  5351  0E28  00A1               	movwf	wireWriteDataByte@val^(0+384)
  5352  0E29  30AB               	movlw	171
  5353  0E2A  318D  2579  318E   	fcall	_wireWriteDataByte
  5354  0E2D  0023               	movlb	3	; select bank3
  5355  0E2E  0821               	movf	?_wireWriteDataByte^(0+384),w
  5356  0E2F  0422               	iorwf	(?_wireWriteDataByte+1)^(0+384),w
  5357  0E30  1D03               	btfss	3,2
  5358  0E31  2E34               	goto	l3453
  5359                           
  5360                           ;APDS9960.c: 516: return 0;
  5361  0E32  3000               	movlw	0
  5362  0E33  0008               	return
  5363  0E34                     l3453:	
  5364                           
  5365                           ;APDS9960.c: 517: };APDS9960.c: 519: return 1;
  5366  0E34  3001               	movlw	1
  5367  0E35  0008               	return
  5368  0E36                     __end_of_setGestureMode:	
  5369                           
  5370                           	psect	text20
  5371  0EFD                     __ptext20:	
  5372 ;; *************** function _setGestureIntEnable *****************
  5373 ;; Defined at:
  5374 ;;		line 383 in file "APDS9960.c"
  5375 ;; Parameters:    Size  Location     Type
  5376 ;;  enable          1    wreg     unsigned char 
  5377 ;; Auto vars:     Size  Location     Type
  5378 ;;  enable          1    7[BANK3 ] unsigned char 
  5379 ;;  val             1    6[BANK3 ] unsigned char 
  5380 ;; Return value:  Size  Location     Type
  5381 ;;                  1    wreg      unsigned char 
  5382 ;; Registers used:
  5383 ;;		wreg, status,2, status,0, pclath, cstack
  5384 ;; Tracked objects:
  5385 ;;		On entry : 0/0
  5386 ;;		On exit  : 0/0
  5387 ;;		Unchanged: 0/0
  5388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5389 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5390 ;;      Locals:         0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0
  5391 ;;      Temps:          0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  5392 ;;      Totals:         0       0       0       0       3       0       0       0       0       0       0       0       
      +0       0
  5393 ;;Total ram usage:        3 bytes
  5394 ;; Hardware stack levels used:    1
  5395 ;; Hardware stack levels required when called:    8
  5396 ;; This function calls:
  5397 ;;		_wireReadDataByte
  5398 ;;		_wireWriteDataByte
  5399 ;; This function is called by:
  5400 ;;		_initialize
  5401 ;;		_enableGestureSensor
  5402 ;; This function uses a non-reentrant model
  5403 ;;
  5404                           
  5405                           
  5406                           ;psect for function _setGestureIntEnable
  5407  0EFD                     _setGestureIntEnable:	
  5408                           
  5409                           ;incstack = 0
  5410                           ; Regs used in _setGestureIntEnable: [wreg+status,2+status,0+pclath+cstack]
  5411                           ;setGestureIntEnable@enable stored from wreg
  5412  0EFD  0023               	movlb	3	; select bank3
  5413  0EFE  00A7               	movwf	setGestureIntEnable@enable^(0+384)
  5414                           
  5415                           ;APDS9960.c: 385: uint8_t val;;APDS9960.c: 388: val = wireReadDataByte(0xAB);
  5416  0EFF  30AB               	movlw	171
  5417  0F00  318D  25EC  318E   	fcall	_wireReadDataByte
  5418  0F03  0023               	movlb	3	; select bank3
  5419  0F04  00A5               	movwf	??_setGestureIntEnable^(0+384)
  5420  0F05  0825               	movf	??_setGestureIntEnable^(0+384),w
  5421  0F06  00A6               	movwf	setGestureIntEnable@val^(0+384)
  5422                           
  5423                           ;APDS9960.c: 391: enable &= 0b00000001;
  5424  0F07  3001               	movlw	1
  5425  0F08  00A5               	movwf	??_setGestureIntEnable^(0+384)
  5426  0F09  0825               	movf	??_setGestureIntEnable^(0+384),w
  5427  0F0A  05A7               	andwf	setGestureIntEnable@enable^(0+384),f
  5428                           
  5429                           ;APDS9960.c: 392: enable = enable << 1;
  5430  0F0B  3527               	lslf	setGestureIntEnable@enable^(0+384),w
  5431  0F0C  00A5               	movwf	??_setGestureIntEnable^(0+384)
  5432  0F0D  0825               	movf	??_setGestureIntEnable^(0+384),w
  5433  0F0E  00A7               	movwf	setGestureIntEnable@enable^(0+384)
  5434                           
  5435                           ;APDS9960.c: 393: val &= 0b11111101;
  5436  0F0F  30FD               	movlw	253
  5437  0F10  00A5               	movwf	??_setGestureIntEnable^(0+384)
  5438  0F11  0825               	movf	??_setGestureIntEnable^(0+384),w
  5439  0F12  05A6               	andwf	setGestureIntEnable@val^(0+384),f
  5440                           
  5441                           ;APDS9960.c: 394: val |= enable;
  5442  0F13  0827               	movf	setGestureIntEnable@enable^(0+384),w
  5443  0F14  00A5               	movwf	??_setGestureIntEnable^(0+384)
  5444  0F15  0825               	movf	??_setGestureIntEnable^(0+384),w
  5445  0F16  04A6               	iorwf	setGestureIntEnable@val^(0+384),f
  5446                           
  5447                           ;APDS9960.c: 397: if( !wireWriteDataByte(0xAB, val) ) {
  5448  0F17  0826               	movf	setGestureIntEnable@val^(0+384),w
  5449  0F18  00A5               	movwf	??_setGestureIntEnable^(0+384)
  5450  0F19  0825               	movf	??_setGestureIntEnable^(0+384),w
  5451  0F1A  00A1               	movwf	wireWriteDataByte@val^(0+384)
  5452  0F1B  30AB               	movlw	171
  5453  0F1C  318D  2579  318E   	fcall	_wireWriteDataByte
  5454  0F1F  0023               	movlb	3	; select bank3
  5455  0F20  0821               	movf	?_wireWriteDataByte^(0+384),w
  5456  0F21  0422               	iorwf	(?_wireWriteDataByte+1)^(0+384),w
  5457  0F22  1D03               	btfss	3,2
  5458  0F23  2F26               	goto	l3415
  5459                           
  5460                           ;APDS9960.c: 398: return 0;
  5461  0F24  3000               	movlw	0
  5462  0F25  0008               	return
  5463  0F26                     l3415:	
  5464                           
  5465                           ;APDS9960.c: 399: };APDS9960.c: 401: return 1;
  5466  0F26  3001               	movlw	1
  5467  0F27  0008               	return
  5468  0F28                     __end_of_setGestureIntEnable:	
  5469                           
  5470                           	psect	text21
  5471  0D49                     __ptext21:	
  5472 ;; *************** function _resetGestureParameters *****************
  5473 ;; Defined at:
  5474 ;;		line 453 in file "APDS9960.c"
  5475 ;; Parameters:    Size  Location     Type
  5476 ;;		None
  5477 ;; Auto vars:     Size  Location     Type
  5478 ;;		None
  5479 ;; Return value:  Size  Location     Type
  5480 ;;                  1    wreg      void 
  5481 ;; Registers used:
  5482 ;;		status,2
  5483 ;; Tracked objects:
  5484 ;;		On entry : 0/0
  5485 ;;		On exit  : 0/0
  5486 ;;		Unchanged: 0/0
  5487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5489 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5490 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5491 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5492 ;;Total ram usage:        0 bytes
  5493 ;; Hardware stack levels used:    1
  5494 ;; Hardware stack levels required when called:    6
  5495 ;; This function calls:
  5496 ;;		Nothing
  5497 ;; This function is called by:
  5498 ;;		_enableGestureSensor
  5499 ;; This function uses a non-reentrant model
  5500 ;;
  5501                           
  5502                           
  5503                           ;psect for function _resetGestureParameters
  5504  0D49                     _resetGestureParameters:	
  5505                           
  5506                           ;APDS9960.c: 456: gesture_data_.index = 0;
  5507                           
  5508                           ;incstack = 0
  5509                           ; Regs used in _resetGestureParameters: [status,2]
  5510  0D49  0024               	movlb	4	; select bank4
  5511  0D4A  01E0               	clrf	(_gesture_data_^(0+512)+64)
  5512                           
  5513                           ;APDS9960.c: 457: gesture_data_.total_gestures = 0;
  5514  0D4B  01E1               	clrf	(_gesture_data_^(0+512)+65)
  5515                           
  5516                           ;APDS9960.c: 459: gesture_ud_delta_ = 0;
  5517  0D4C  0020               	movlb	0	; select bank0
  5518  0D4D  01E2               	clrf	_gesture_ud_delta_
  5519  0D4E  01E3               	clrf	_gesture_ud_delta_+1
  5520                           
  5521                           ;APDS9960.c: 460: gesture_lr_delta_ = 0;
  5522  0D4F  01E0               	clrf	_gesture_lr_delta_
  5523  0D50  01E1               	clrf	_gesture_lr_delta_+1
  5524                           
  5525                           ;APDS9960.c: 462: gesture_ud_count_ = 0;
  5526  0D51  01DE               	clrf	_gesture_ud_count_
  5527  0D52  01DF               	clrf	_gesture_ud_count_+1
  5528                           
  5529                           ;APDS9960.c: 463: gesture_lr_count_ = 0;
  5530  0D53  01DC               	clrf	_gesture_lr_count_
  5531  0D54  01DD               	clrf	_gesture_lr_count_+1
  5532                           
  5533                           ;APDS9960.c: 465: gesture_near_count_ = 0;
  5534  0D55  01DA               	clrf	_gesture_near_count_
  5535  0D56  01DB               	clrf	_gesture_near_count_+1
  5536                           
  5537                           ;APDS9960.c: 466: gesture_far_count_ = 0;
  5538  0D57  01D8               	clrf	_gesture_far_count_
  5539  0D58  01D9               	clrf	_gesture_far_count_+1
  5540                           
  5541                           ;APDS9960.c: 468: gesture_state_ = 0;
  5542  0D59  01D6               	clrf	_gesture_state_
  5543  0D5A  01D7               	clrf	_gesture_state_+1
  5544                           
  5545                           ;APDS9960.c: 469: gesture_motion_ = DIR_NONE;
  5546  0D5B  01D4               	clrf	_gesture_motion_
  5547  0D5C  01D5               	clrf	_gesture_motion_+1
  5548  0D5D  0008               	return
  5549  0D5E                     __end_of_resetGestureParameters:	
  5550                           
  5551                           	psect	text22
  5552  0CC8                     __ptext22:	
  5553 ;; *************** function _enablePower *****************
  5554 ;; Defined at:
  5555 ;;		line 523 in file "APDS9960.c"
  5556 ;; Parameters:    Size  Location     Type
  5557 ;;		None
  5558 ;; Auto vars:     Size  Location     Type
  5559 ;;		None
  5560 ;; Return value:  Size  Location     Type
  5561 ;;                  1    wreg      unsigned char 
  5562 ;; Registers used:
  5563 ;;		wreg, status,2, status,0, pclath, cstack
  5564 ;; Tracked objects:
  5565 ;;		On entry : 0/0
  5566 ;;		On exit  : 0/0
  5567 ;;		Unchanged: 0/0
  5568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5569 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5570 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5571 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5572 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5573 ;;Total ram usage:        0 bytes
  5574 ;; Hardware stack levels used:    1
  5575 ;; Hardware stack levels required when called:   10
  5576 ;; This function calls:
  5577 ;;		_setMode
  5578 ;; This function is called by:
  5579 ;;		_main
  5580 ;;		_enableGestureSensor
  5581 ;; This function uses a non-reentrant model
  5582 ;;
  5583                           
  5584                           
  5585                           ;psect for function _enablePower
  5586  0CC8                     _enablePower:	
  5587                           
  5588                           ;APDS9960.c: 525: if( !setMode(0, 1) ) {
  5589                           
  5590                           ;incstack = 0
  5591                           ; Regs used in _enablePower: [wreg+status,2+status,0+pclath+cstack]
  5592  0CC8  0023               	movlb	3	; select bank3
  5593  0CC9  01A6               	clrf	setMode@enable^(0+384)
  5594  0CCA  0AA6               	incf	setMode@enable^(0+384),f
  5595  0CCB  3000               	movlw	0
  5596  0CCC  3187  2730  318C   	fcall	_setMode
  5597  0CCF  3A00               	xorlw	0
  5598  0CD0  1D03               	skipz
  5599  0CD1  2CD4               	goto	l3165
  5600                           
  5601                           ;APDS9960.c: 526: return 0;
  5602  0CD2  3000               	movlw	0
  5603  0CD3  0008               	return
  5604  0CD4                     l3165:	
  5605                           
  5606                           ;APDS9960.c: 527: };APDS9960.c: 529: return 1;
  5607  0CD4  3001               	movlw	1
  5608  0CD5  0008               	return
  5609  0CD6                     __end_of_enablePower:	
  5610                           
  5611                           	psect	text23
  5612  0730                     __ptext23:	
  5613 ;; *************** function _setMode *****************
  5614 ;; Defined at:
  5615 ;;		line 120 in file "APDS9960.c"
  5616 ;; Parameters:    Size  Location     Type
  5617 ;;  mode            1    wreg     unsigned char 
  5618 ;;  enable          1    6[BANK3 ] unsigned char 
  5619 ;; Auto vars:     Size  Location     Type
  5620 ;;  mode            1   10[BANK3 ] unsigned char 
  5621 ;;  reg_val         1    9[BANK3 ] unsigned char 
  5622 ;; Return value:  Size  Location     Type
  5623 ;;                  1    wreg      unsigned char 
  5624 ;; Registers used:
  5625 ;;		wreg, status,2, status,0, pclath, cstack
  5626 ;; Tracked objects:
  5627 ;;		On entry : 0/0
  5628 ;;		On exit  : 0/0
  5629 ;;		Unchanged: 0/0
  5630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5631 ;;      Params:         0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  5632 ;;      Locals:         0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0
  5633 ;;      Temps:          0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0
  5634 ;;      Totals:         0       0       0       0       5       0       0       0       0       0       0       0       
      +0       0
  5635 ;;Total ram usage:        5 bytes
  5636 ;; Hardware stack levels used:    1
  5637 ;; Hardware stack levels required when called:    9
  5638 ;; This function calls:
  5639 ;;		_getMode
  5640 ;;		_wireWriteDataByte
  5641 ;; This function is called by:
  5642 ;;		_initialize
  5643 ;;		_enableGestureSensor
  5644 ;;		_enablePower
  5645 ;; This function uses a non-reentrant model
  5646 ;;
  5647                           
  5648                           
  5649                           ;psect for function _setMode
  5650  0730                     _setMode:	
  5651                           
  5652                           ;incstack = 0
  5653                           ; Regs used in _setMode: [wreg+status,2+status,0+pclath+cstack]
  5654                           ;setMode@mode stored from wreg
  5655  0730  0023               	movlb	3	; select bank3
  5656  0731  00AA               	movwf	setMode@mode^(0+384)
  5657                           
  5658                           ;APDS9960.c: 122: uint8_t reg_val;;APDS9960.c: 125: reg_val = getMode();
  5659  0732  318C  24A0  3187   	fcall	_getMode
  5660  0735  0023               	movlb	3	; select bank3
  5661  0736  00A7               	movwf	??_setMode^(0+384)
  5662  0737  0827               	movf	??_setMode^(0+384),w
  5663  0738  00A9               	movwf	setMode@reg_val^(0+384)
  5664                           
  5665                           ;APDS9960.c: 126: if( reg_val == 0xFF ) {
  5666  0739  0A29               	incf	setMode@reg_val^(0+384),w
  5667  073A  1D03               	btfss	3,2
  5668  073B  2F3E               	goto	l2767
  5669  073C                     l2763:	
  5670                           
  5671                           ;APDS9960.c: 127: return 0;
  5672  073C  3000               	movlw	0
  5673  073D  0008               	return
  5674  073E                     l2767:	
  5675                           
  5676                           ;APDS9960.c: 128: };APDS9960.c: 131: enable = enable & 0x01;
  5677  073E  0826               	movf	setMode@enable^(0+384),w
  5678  073F  3901               	andlw	1
  5679  0740  00A7               	movwf	??_setMode^(0+384)
  5680  0741  0827               	movf	??_setMode^(0+384),w
  5681  0742  00A6               	movwf	setMode@enable^(0+384)
  5682                           
  5683                           ;APDS9960.c: 132: if( mode >= 0 && mode <= 6 ) {
  5684  0743  3007               	movlw	7
  5685  0744  022A               	subwf	setMode@mode^(0+384),w
  5686  0745  1803               	skipnc
  5687  0746  2F63               	goto	l2777
  5688                           
  5689                           ;APDS9960.c: 133: if (enable) {
  5690  0747  0826               	movf	setMode@enable^(0+384),w
  5691  0748  1903               	btfsc	3,2
  5692  0749  2F56               	goto	l2775
  5693                           
  5694                           ;APDS9960.c: 134: reg_val |= (1 << mode);
  5695  074A  3001               	movlw	1
  5696  074B  00A7               	movwf	??_setMode^(0+384)
  5697  074C  0A2A               	incf	setMode@mode^(0+384),w
  5698  074D  2F4F               	goto	u1874
  5699  074E                     u1875:	
  5700  074E  35A7               	lslf	??_setMode^(0+384),f
  5701  074F                     u1874:	
  5702  074F  0B89               	decfsz	9,f
  5703  0750  2F4E               	goto	u1875
  5704  0751  0827               	movf	??_setMode^(0+384),w
  5705  0752  00A8               	movwf	(??_setMode+1)^(0+384)
  5706  0753  0828               	movf	(??_setMode+1)^(0+384),w
  5707  0754  04A9               	iorwf	setMode@reg_val^(0+384),f
  5708                           
  5709                           ;APDS9960.c: 135: } else {
  5710  0755  2F70               	goto	l2785
  5711  0756                     l2775:	
  5712                           
  5713                           ;APDS9960.c: 136: reg_val &= ~(1 << mode);
  5714  0756  3001               	movlw	1
  5715  0757  00A7               	movwf	??_setMode^(0+384)
  5716  0758  0A2A               	incf	setMode@mode^(0+384),w
  5717  0759  2F5B               	goto	u1884
  5718  075A                     u1885:	
  5719  075A  35A7               	lslf	??_setMode^(0+384),f
  5720  075B                     u1884:	
  5721  075B  0B89               	decfsz	9,f
  5722  075C  2F5A               	goto	u1885
  5723  075D  0827               	movf	??_setMode^(0+384),w
  5724  075E  3AFF               	xorlw	255
  5725  075F  00A8               	movwf	(??_setMode+1)^(0+384)
  5726  0760  0828               	movf	(??_setMode+1)^(0+384),w
  5727  0761  05A9               	andwf	setMode@reg_val^(0+384),f
  5728  0762  2F70               	goto	l2785
  5729  0763                     l2777:	
  5730  0763  3007               	movlw	7
  5731  0764  062A               	xorwf	setMode@mode^(0+384),w
  5732  0765  1D03               	btfss	3,2
  5733  0766  2F70               	goto	l2785
  5734                           
  5735                           ;APDS9960.c: 139: if (enable) {
  5736  0767  0826               	movf	setMode@enable^(0+384),w
  5737  0768  1903               	btfsc	3,2
  5738  0769  2F6F               	goto	l2783
  5739                           
  5740                           ;APDS9960.c: 140: reg_val = 0x7F;
  5741  076A  307F               	movlw	127
  5742  076B  00A7               	movwf	??_setMode^(0+384)
  5743  076C  0827               	movf	??_setMode^(0+384),w
  5744  076D  00A9               	movwf	setMode@reg_val^(0+384)
  5745                           
  5746                           ;APDS9960.c: 141: } else {
  5747  076E  2F70               	goto	l2785
  5748  076F                     l2783:	
  5749                           
  5750                           ;APDS9960.c: 142: reg_val = 0x00;
  5751  076F  01A9               	clrf	setMode@reg_val^(0+384)
  5752  0770                     l2785:	
  5753                           
  5754                           ;APDS9960.c: 143: };APDS9960.c: 144: };APDS9960.c: 147: if( !wireWriteDataByte(0x80, reg
      +                          _val) ) {
  5755  0770  0829               	movf	setMode@reg_val^(0+384),w
  5756  0771  00A7               	movwf	??_setMode^(0+384)
  5757  0772  0827               	movf	??_setMode^(0+384),w
  5758  0773  00A1               	movwf	wireWriteDataByte@val^(0+384)
  5759  0774  3080               	movlw	128
  5760  0775  318D  2579  3187   	fcall	_wireWriteDataByte
  5761  0778  0023               	movlb	3	; select bank3
  5762  0779  0821               	movf	?_wireWriteDataByte^(0+384),w
  5763  077A  0422               	iorwf	(?_wireWriteDataByte+1)^(0+384),w
  5764  077B  1903               	btfsc	3,2
  5765  077C  2F3C               	goto	l2763
  5766                           
  5767                           ;APDS9960.c: 149: };APDS9960.c: 151: return 1;
  5768  077D  3001               	movlw	1
  5769  077E  0008               	return
  5770  077F                     __end_of_setMode:	
  5771                           
  5772                           	psect	text24
  5773  0D79                     __ptext24:	
  5774 ;; *************** function _wireWriteDataByte *****************
  5775 ;; Defined at:
  5776 ;;		line 878 in file "APDS9960.c"
  5777 ;; Parameters:    Size  Location     Type
  5778 ;;  reg             1    wreg     unsigned char 
  5779 ;;  val             1    1[BANK3 ] unsigned char 
  5780 ;; Auto vars:     Size  Location     Type
  5781 ;;  reg             1    4[BANK3 ] unsigned char 
  5782 ;; Return value:  Size  Location     Type
  5783 ;;                  2    1[BANK3 ] int 
  5784 ;; Registers used:
  5785 ;;		wreg, status,2, status,0, pclath, cstack
  5786 ;; Tracked objects:
  5787 ;;		On entry : 0/0
  5788 ;;		On exit  : 0/0
  5789 ;;		Unchanged: 0/0
  5790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5791 ;;      Params:         0       0       0       0       3       0       0       0       0       0       0       0       
      +0       0
  5792 ;;      Locals:         0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  5793 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5794 ;;      Totals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  5795 ;;Total ram usage:        4 bytes
  5796 ;; Hardware stack levels used:    1
  5797 ;; Hardware stack levels required when called:    7
  5798 ;; This function calls:
  5799 ;;		_i2c2_driver_TXData
  5800 ;;		_i2c2_driver_setAddr
  5801 ;;		_i2c2_driver_start
  5802 ;;		_i2c2_driver_stop
  5803 ;; This function is called by:
  5804 ;;		_initialize
  5805 ;;		_setMode
  5806 ;;		_setLEDDrive
  5807 ;;		_setProximityGain
  5808 ;;		_setAmbientLightGain
  5809 ;;		_setProxIntLowThresh
  5810 ;;		_setProxIntHighThresh
  5811 ;;		_setLightIntLowThreshold
  5812 ;;		_setLightIntHighThreshold
  5813 ;;		_setGestureEnterThresh
  5814 ;;		_setGestureExitThresh
  5815 ;;		_setGestureGain
  5816 ;;		_setGestureLEDDrive
  5817 ;;		_setGestureWaitTime
  5818 ;;		_setGestureIntEnable
  5819 ;;		_enableGestureSensor
  5820 ;;		_setLEDBoost
  5821 ;;		_setGestureMode
  5822 ;; This function uses a non-reentrant model
  5823 ;;
  5824                           
  5825                           
  5826                           ;psect for function _wireWriteDataByte
  5827  0D79                     _wireWriteDataByte:	
  5828                           
  5829                           ;incstack = 0
  5830                           ; Regs used in _wireWriteDataByte: [wreg+status,2+status,0+pclath+cstack]
  5831                           ;wireWriteDataByte@reg stored from wreg
  5832  0D79  0023               	movlb	3	; select bank3
  5833  0D7A  00A4               	movwf	wireWriteDataByte@reg^(0+384)
  5834                           
  5835                           ;APDS9960.c: 895: i2c2_driver_start();
  5836  0D7B  318C  2456  318D   	fcall	_i2c2_driver_start
  5837                           
  5838                           ;APDS9960.c: 896: i2c2_driver_setAddr(0x39);
  5839  0D7E  3039               	movlw	57
  5840  0D7F  318C  2475  318D   	fcall	_i2c2_driver_setAddr
  5841                           
  5842                           ;APDS9960.c: 897: i2c2_driver_setAddr(reg);
  5843  0D82  0023               	movlb	3	; select bank3
  5844  0D83  0824               	movf	wireWriteDataByte@reg^(0+384),w
  5845  0D84  318C  2475  318D   	fcall	_i2c2_driver_setAddr
  5846                           
  5847                           ;APDS9960.c: 898: i2c2_driver_TXData(val);
  5848  0D87  0023               	movlb	3	; select bank3
  5849  0D88  0821               	movf	wireWriteDataByte@val^(0+384),w
  5850  0D89  318C  247B  318D   	fcall	_i2c2_driver_TXData
  5851                           
  5852                           ;APDS9960.c: 899: i2c2_driver_stop();
  5853  0D8C  318C  245C         	fcall	_i2c2_driver_stop
  5854                           
  5855                           ;APDS9960.c: 902: return 1;
  5856  0D8E  3001               	movlw	1
  5857  0D8F  0023               	movlb	3	; select bank3
  5858  0D90  00A1               	movwf	?_wireWriteDataByte^(0+384)
  5859  0D91  3000               	movlw	0
  5860  0D92  00A2               	movwf	(?_wireWriteDataByte^(0+384)+1)
  5861  0D93  0008               	return
  5862  0D94                     __end_of_wireWriteDataByte:	
  5863                           
  5864                           	psect	text25
  5865  0C7B                     __ptext25:	
  5866 ;; *************** function _i2c2_driver_TXData *****************
  5867 ;; Defined at:
  5868 ;;		line 186 in file "mcc_generated_files/i2c2_driver.c"
  5869 ;; Parameters:    Size  Location     Type
  5870 ;;  d               1    wreg     unsigned char 
  5871 ;; Auto vars:     Size  Location     Type
  5872 ;;  d               1    0[BANK3 ] unsigned char 
  5873 ;; Return value:  Size  Location     Type
  5874 ;;                  1    wreg      void 
  5875 ;; Registers used:
  5876 ;;		wreg
  5877 ;; Tracked objects:
  5878 ;;		On entry : 0/0
  5879 ;;		On exit  : 0/0
  5880 ;;		Unchanged: 0/0
  5881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5882 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5883 ;;      Locals:         0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  5884 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5885 ;;      Totals:         0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  5886 ;;Total ram usage:        1 bytes
  5887 ;; Hardware stack levels used:    1
  5888 ;; Hardware stack levels required when called:    6
  5889 ;; This function calls:
  5890 ;;		Nothing
  5891 ;; This function is called by:
  5892 ;;		_wireWriteDataByte
  5893 ;; This function uses a non-reentrant model
  5894 ;;
  5895                           
  5896                           
  5897                           ;psect for function _i2c2_driver_TXData
  5898  0C7B                     _i2c2_driver_TXData:	
  5899                           
  5900                           ;incstack = 0
  5901                           ; Regs used in _i2c2_driver_TXData: [wreg]
  5902                           ;i2c2_driver_TXData@d stored from wreg
  5903  0C7B  0023               	movlb	3	; select bank3
  5904  0C7C  00A0               	movwf	i2c2_driver_TXData@d^(0+384)
  5905                           
  5906                           ;i2c2_driver.c: 188: SSP2BUF = d;
  5907  0C7D  0820               	movf	i2c2_driver_TXData@d^(0+384),w
  5908  0C7E  0024               	movlb	4	; select bank4
  5909  0C7F  0099               	movwf	25	;volatile
  5910  0C80  0008               	return
  5911  0C81                     __end_of_i2c2_driver_TXData:	
  5912                           
  5913                           	psect	text26
  5914  0CA0                     __ptext26:	
  5915 ;; *************** function _getMode *****************
  5916 ;; Defined at:
  5917 ;;		line 155 in file "APDS9960.c"
  5918 ;; Parameters:    Size  Location     Type
  5919 ;;		None
  5920 ;; Auto vars:     Size  Location     Type
  5921 ;;  enable_value    1    5[BANK3 ] unsigned char 
  5922 ;; Return value:  Size  Location     Type
  5923 ;;                  1    wreg      unsigned char 
  5924 ;; Registers used:
  5925 ;;		wreg, status,2, status,0, pclath, cstack
  5926 ;; Tracked objects:
  5927 ;;		On entry : 0/0
  5928 ;;		On exit  : 0/0
  5929 ;;		Unchanged: 0/0
  5930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5931 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5932 ;;      Locals:         0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  5933 ;;      Temps:          0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  5934 ;;      Totals:         0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0
  5935 ;;Total ram usage:        2 bytes
  5936 ;; Hardware stack levels used:    1
  5937 ;; Hardware stack levels required when called:    8
  5938 ;; This function calls:
  5939 ;;		_wireReadDataByte
  5940 ;; This function is called by:
  5941 ;;		_setMode
  5942 ;; This function uses a non-reentrant model
  5943 ;;
  5944                           
  5945                           
  5946                           ;psect for function _getMode
  5947  0CA0                     _getMode:	
  5948                           
  5949                           ;APDS9960.c: 157: uint8_t enable_value;;APDS9960.c: 160: enable_value = wireReadDataByte
      +                          (0x80);
  5950                           
  5951                           ;incstack = 0
  5952                           ; Regs used in _getMode: [wreg+status,2+status,0+pclath+cstack]
  5953  0CA0  3080               	movlw	128
  5954  0CA1  318D  25EC         	fcall	_wireReadDataByte
  5955  0CA3  0023               	movlb	3	; select bank3
  5956  0CA4  00A4               	movwf	??_getMode^(0+384)
  5957  0CA5  0824               	movf	??_getMode^(0+384),w
  5958  0CA6  00A5               	movwf	getMode@enable_value^(0+384)
  5959                           
  5960                           ;APDS9960.c: 162: return enable_value;
  5961  0CA7  0825               	movf	getMode@enable_value^(0+384),w
  5962  0CA8  0008               	return
  5963  0CA9                     __end_of_getMode:	
  5964                           
  5965                           	psect	text27
  5966  0DEC                     __ptext27:	
  5967 ;; *************** function _wireReadDataByte *****************
  5968 ;; Defined at:
  5969 ;;		line 906 in file "APDS9960.c"
  5970 ;; Parameters:    Size  Location     Type
  5971 ;;  reg             1    wreg     unsigned char 
  5972 ;; Auto vars:     Size  Location     Type
  5973 ;;  reg             1    2[BANK3 ] unsigned char 
  5974 ;;  val             1    3[BANK3 ] unsigned char 
  5975 ;; Return value:  Size  Location     Type
  5976 ;;                  1    wreg      unsigned char 
  5977 ;; Registers used:
  5978 ;;		wreg, status,2, status,0, pclath, cstack
  5979 ;; Tracked objects:
  5980 ;;		On entry : 0/0
  5981 ;;		On exit  : 0/0
  5982 ;;		Unchanged: 0/0
  5983 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5984 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5985 ;;      Locals:         0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0
  5986 ;;      Temps:          0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  5987 ;;      Totals:         0       0       0       0       3       0       0       0       0       0       0       0       
      +0       0
  5988 ;;Total ram usage:        3 bytes
  5989 ;; Hardware stack levels used:    1
  5990 ;; Hardware stack levels required when called:    7
  5991 ;; This function calls:
  5992 ;;		_i2c2_driver_getRXData
  5993 ;;		_i2c2_driver_isNACK
  5994 ;;		_i2c2_driver_restart
  5995 ;;		_i2c2_driver_setAddr
  5996 ;;		_i2c2_driver_start
  5997 ;;		_i2c2_driver_startRX
  5998 ;;		_i2c2_driver_stop
  5999 ;; This function is called by:
  6000 ;;		_initialize
  6001 ;;		_getMode
  6002 ;;		_setLEDDrive
  6003 ;;		_setProximityGain
  6004 ;;		_setAmbientLightGain
  6005 ;;		_setGestureGain
  6006 ;;		_setGestureLEDDrive
  6007 ;;		_setGestureWaitTime
  6008 ;;		_setGestureIntEnable
  6009 ;;		_setLEDBoost
  6010 ;;		_setGestureMode
  6011 ;; This function uses a non-reentrant model
  6012 ;;
  6013                           
  6014                           
  6015                           ;psect for function _wireReadDataByte
  6016  0DEC                     _wireReadDataByte:	
  6017                           
  6018                           ;incstack = 0
  6019                           ; Regs used in _wireReadDataByte: [wreg+status,2+status,0+pclath+cstack]
  6020                           ;wireReadDataByte@reg stored from wreg
  6021  0DEC  0023               	movlb	3	; select bank3
  6022  0DED  00A2               	movwf	wireReadDataByte@reg^(0+384)
  6023                           
  6024                           ;APDS9960.c: 909: unsigned char val;;APDS9960.c: 929: i2c2_driver_start();
  6025  0DEE  318C  2456  318D   	fcall	_i2c2_driver_start
  6026                           
  6027                           ;APDS9960.c: 930: i2c2_driver_setAddr(0x39 << 1);
  6028  0DF1  3072               	movlw	114
  6029  0DF2  318C  2475  318D   	fcall	_i2c2_driver_setAddr
  6030                           
  6031                           ;APDS9960.c: 931: i2c2_driver_setAddr(reg);
  6032  0DF5  0023               	movlb	3	; select bank3
  6033  0DF6  0822               	movf	wireReadDataByte@reg^(0+384),w
  6034  0DF7  318C  2475  318D   	fcall	_i2c2_driver_setAddr
  6035                           
  6036                           ;APDS9960.c: 932: i2c2_driver_restart();
  6037  0DFA  318C  2453  318D   	fcall	_i2c2_driver_restart
  6038                           
  6039                           ;APDS9960.c: 933: i2c2_driver_startRX();
  6040  0DFD  318C  2459  318D   	fcall	_i2c2_driver_startRX
  6041                           
  6042                           ;APDS9960.c: 934: val = i2c2_driver_getRXData();
  6043  0E00  318C  244D  318D   	fcall	_i2c2_driver_getRXData
  6044  0E03  0023               	movlb	3	; select bank3
  6045  0E04  00A1               	movwf	??_wireReadDataByte^(0+384)
  6046  0E05  0821               	movf	??_wireReadDataByte^(0+384),w
  6047  0E06  00A3               	movwf	wireReadDataByte@val^(0+384)
  6048                           
  6049                           ;APDS9960.c: 935: i2c2_driver_isNACK();
  6050  0E07  318C  2450  318D   	fcall	_i2c2_driver_isNACK
  6051                           
  6052                           ;APDS9960.c: 936: i2c2_driver_stop();
  6053  0E0A  318C  245C         	fcall	_i2c2_driver_stop
  6054                           
  6055                           ;APDS9960.c: 938: return (val);
  6056  0E0C  0023               	movlb	3	; select bank3
  6057  0E0D  0823               	movf	wireReadDataByte@val^(0+384),w
  6058  0E0E  0008               	return
  6059  0E0F                     __end_of_wireReadDataByte:	
  6060                           
  6061                           	psect	text28
  6062  0C5C                     __ptext28:	
  6063 ;; *************** function _i2c2_driver_stop *****************
  6064 ;; Defined at:
  6065 ;;		line 156 in file "mcc_generated_files/i2c2_driver.c"
  6066 ;; Parameters:    Size  Location     Type
  6067 ;;		None
  6068 ;; Auto vars:     Size  Location     Type
  6069 ;;		None
  6070 ;; Return value:  Size  Location     Type
  6071 ;;                  1    wreg      void 
  6072 ;; Registers used:
  6073 ;;		None
  6074 ;; Tracked objects:
  6075 ;;		On entry : 0/0
  6076 ;;		On exit  : 0/0
  6077 ;;		Unchanged: 0/0
  6078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6080 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6082 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6083 ;;Total ram usage:        0 bytes
  6084 ;; Hardware stack levels used:    1
  6085 ;; Hardware stack levels required when called:    6
  6086 ;; This function calls:
  6087 ;;		Nothing
  6088 ;; This function is called by:
  6089 ;;		_wireWriteDataByte
  6090 ;;		_wireReadDataByte
  6091 ;; This function uses a non-reentrant model
  6092 ;;
  6093                           
  6094                           
  6095                           ;psect for function _i2c2_driver_stop
  6096  0C5C                     _i2c2_driver_stop:	
  6097                           
  6098                           ;i2c2_driver.c: 158: SSP2CON2bits.PEN = 1;
  6099                           
  6100                           ;incstack = 0
  6101                           ; Regs used in _i2c2_driver_stop: []
  6102  0C5C  0024               	movlb	4	; select bank4
  6103  0C5D  151E               	bsf	30,2	;volatile
  6104  0C5E  0008               	return
  6105  0C5F                     __end_of_i2c2_driver_stop:	
  6106                           
  6107                           	psect	text29
  6108  0C59                     __ptext29:	
  6109 ;; *************** function _i2c2_driver_startRX *****************
  6110 ;; Defined at:
  6111 ;;		line 166 in file "mcc_generated_files/i2c2_driver.c"
  6112 ;; Parameters:    Size  Location     Type
  6113 ;;		None
  6114 ;; Auto vars:     Size  Location     Type
  6115 ;;		None
  6116 ;; Return value:  Size  Location     Type
  6117 ;;                  1    wreg      void 
  6118 ;; Registers used:
  6119 ;;		None
  6120 ;; Tracked objects:
  6121 ;;		On entry : 0/0
  6122 ;;		On exit  : 0/0
  6123 ;;		Unchanged: 0/0
  6124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6125 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6126 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6127 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6128 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6129 ;;Total ram usage:        0 bytes
  6130 ;; Hardware stack levels used:    1
  6131 ;; Hardware stack levels required when called:    6
  6132 ;; This function calls:
  6133 ;;		Nothing
  6134 ;; This function is called by:
  6135 ;;		_wireReadDataByte
  6136 ;; This function uses a non-reentrant model
  6137 ;;
  6138                           
  6139                           
  6140                           ;psect for function _i2c2_driver_startRX
  6141  0C59                     _i2c2_driver_startRX:	
  6142                           
  6143                           ;i2c2_driver.c: 168: SSP2CON2bits.RCEN = 1;
  6144                           
  6145                           ;incstack = 0
  6146                           ; Regs used in _i2c2_driver_startRX: []
  6147  0C59  0024               	movlb	4	; select bank4
  6148  0C5A  159E               	bsf	30,3	;volatile
  6149  0C5B  0008               	return
  6150  0C5C                     __end_of_i2c2_driver_startRX:	
  6151                           
  6152                           	psect	text30
  6153  0C56                     __ptext30:	
  6154 ;; *************** function _i2c2_driver_start *****************
  6155 ;; Defined at:
  6156 ;;		line 146 in file "mcc_generated_files/i2c2_driver.c"
  6157 ;; Parameters:    Size  Location     Type
  6158 ;;		None
  6159 ;; Auto vars:     Size  Location     Type
  6160 ;;		None
  6161 ;; Return value:  Size  Location     Type
  6162 ;;                  1    wreg      void 
  6163 ;; Registers used:
  6164 ;;		None
  6165 ;; Tracked objects:
  6166 ;;		On entry : 0/0
  6167 ;;		On exit  : 0/0
  6168 ;;		Unchanged: 0/0
  6169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6170 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6171 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6172 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6173 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6174 ;;Total ram usage:        0 bytes
  6175 ;; Hardware stack levels used:    1
  6176 ;; Hardware stack levels required when called:    6
  6177 ;; This function calls:
  6178 ;;		Nothing
  6179 ;; This function is called by:
  6180 ;;		_wireWriteDataByte
  6181 ;;		_wireReadDataByte
  6182 ;; This function uses a non-reentrant model
  6183 ;;
  6184                           
  6185                           
  6186                           ;psect for function _i2c2_driver_start
  6187  0C56                     _i2c2_driver_start:	
  6188                           
  6189                           ;i2c2_driver.c: 148: SSP2CON2bits.SEN = 1;
  6190                           
  6191                           ;incstack = 0
  6192                           ; Regs used in _i2c2_driver_start: []
  6193  0C56  0024               	movlb	4	; select bank4
  6194  0C57  141E               	bsf	30,0	;volatile
  6195  0C58  0008               	return
  6196  0C59                     __end_of_i2c2_driver_start:	
  6197                           
  6198                           	psect	text31
  6199  0C75                     __ptext31:	
  6200 ;; *************** function _i2c2_driver_setAddr *****************
  6201 ;; Defined at:
  6202 ;;		line 176 in file "mcc_generated_files/i2c2_driver.c"
  6203 ;; Parameters:    Size  Location     Type
  6204 ;;  addr            1    wreg     unsigned char 
  6205 ;; Auto vars:     Size  Location     Type
  6206 ;;  addr            1    0[BANK3 ] unsigned char 
  6207 ;; Return value:  Size  Location     Type
  6208 ;;                  1    wreg      void 
  6209 ;; Registers used:
  6210 ;;		wreg
  6211 ;; Tracked objects:
  6212 ;;		On entry : 0/0
  6213 ;;		On exit  : 0/0
  6214 ;;		Unchanged: 0/0
  6215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6217 ;;      Locals:         0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  6218 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6219 ;;      Totals:         0       0       0       0       1       0       0       0       0       0       0       0       
      +0       0
  6220 ;;Total ram usage:        1 bytes
  6221 ;; Hardware stack levels used:    1
  6222 ;; Hardware stack levels required when called:    6
  6223 ;; This function calls:
  6224 ;;		Nothing
  6225 ;; This function is called by:
  6226 ;;		_wireWriteDataByte
  6227 ;;		_wireReadDataByte
  6228 ;; This function uses a non-reentrant model
  6229 ;;
  6230                           
  6231                           
  6232                           ;psect for function _i2c2_driver_setAddr
  6233  0C75                     _i2c2_driver_setAddr:	
  6234                           
  6235                           ;incstack = 0
  6236                           ; Regs used in _i2c2_driver_setAddr: [wreg]
  6237                           ;i2c2_driver_setAddr@addr stored from wreg
  6238  0C75  0023               	movlb	3	; select bank3
  6239  0C76  00A0               	movwf	i2c2_driver_setAddr@addr^(0+384)
  6240                           
  6241                           ;i2c2_driver.c: 178: SSP2ADD = addr;
  6242  0C77  0820               	movf	i2c2_driver_setAddr@addr^(0+384),w
  6243  0C78  0024               	movlb	4	; select bank4
  6244  0C79  009A               	movwf	26	;volatile
  6245  0C7A  0008               	return
  6246  0C7B                     __end_of_i2c2_driver_setAddr:	
  6247                           
  6248                           	psect	text32
  6249  0C53                     __ptext32:	
  6250 ;; *************** function _i2c2_driver_restart *****************
  6251 ;; Defined at:
  6252 ;;		line 151 in file "mcc_generated_files/i2c2_driver.c"
  6253 ;; Parameters:    Size  Location     Type
  6254 ;;		None
  6255 ;; Auto vars:     Size  Location     Type
  6256 ;;		None
  6257 ;; Return value:  Size  Location     Type
  6258 ;;                  1    wreg      void 
  6259 ;; Registers used:
  6260 ;;		None
  6261 ;; Tracked objects:
  6262 ;;		On entry : 0/0
  6263 ;;		On exit  : 0/0
  6264 ;;		Unchanged: 0/0
  6265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6266 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6267 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6268 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6269 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6270 ;;Total ram usage:        0 bytes
  6271 ;; Hardware stack levels used:    1
  6272 ;; Hardware stack levels required when called:    6
  6273 ;; This function calls:
  6274 ;;		Nothing
  6275 ;; This function is called by:
  6276 ;;		_wireReadDataByte
  6277 ;; This function uses a non-reentrant model
  6278 ;;
  6279                           
  6280                           
  6281                           ;psect for function _i2c2_driver_restart
  6282  0C53                     _i2c2_driver_restart:	
  6283                           
  6284                           ;i2c2_driver.c: 153: SSP2CON2bits.RSEN = 1;
  6285                           
  6286                           ;incstack = 0
  6287                           ; Regs used in _i2c2_driver_restart: []
  6288  0C53  0024               	movlb	4	; select bank4
  6289  0C54  149E               	bsf	30,1	;volatile
  6290  0C55  0008               	return
  6291  0C56                     __end_of_i2c2_driver_restart:	
  6292                           
  6293                           	psect	text33
  6294  0C50                     __ptext33:	
  6295 ;; *************** function _i2c2_driver_isNACK *****************
  6296 ;; Defined at:
  6297 ;;		line 161 in file "mcc_generated_files/i2c2_driver.c"
  6298 ;; Parameters:    Size  Location     Type
  6299 ;;		None
  6300 ;; Auto vars:     Size  Location     Type
  6301 ;;		None
  6302 ;; Return value:  Size  Location     Type
  6303 ;;		None               void
  6304 ;; Registers used:
  6305 ;;		wreg
  6306 ;; Tracked objects:
  6307 ;;		On entry : 0/0
  6308 ;;		On exit  : 0/0
  6309 ;;		Unchanged: 0/0
  6310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6312 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6314 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6315 ;;Total ram usage:        0 bytes
  6316 ;; Hardware stack levels used:    1
  6317 ;; Hardware stack levels required when called:    6
  6318 ;; This function calls:
  6319 ;;		Nothing
  6320 ;; This function is called by:
  6321 ;;		_wireReadDataByte
  6322 ;; This function uses a non-reentrant model
  6323 ;;
  6324                           
  6325                           
  6326                           ;psect for function _i2c2_driver_isNACK
  6327  0C50                     _i2c2_driver_isNACK:	
  6328                           
  6329                           ;i2c2_driver.c: 163: return SSP2CON2bits.ACKSTAT;;	Return value of _i2c2_driver_isNACK i
      +                          s never used
  6330                           
  6331                           ;incstack = 0
  6332                           ; Regs used in _i2c2_driver_isNACK: [wreg]
  6333  0C50  0024               	movlb	4	; select bank4
  6334  0C51  081E               	movf	30,w	;volatile
  6335  0C52  0008               	return
  6336  0C53                     __end_of_i2c2_driver_isNACK:	
  6337                           
  6338                           	psect	text34
  6339  0C4D                     __ptext34:	
  6340 ;; *************** function _i2c2_driver_getRXData *****************
  6341 ;; Defined at:
  6342 ;;		line 171 in file "mcc_generated_files/i2c2_driver.c"
  6343 ;; Parameters:    Size  Location     Type
  6344 ;;		None
  6345 ;; Auto vars:     Size  Location     Type
  6346 ;;		None
  6347 ;; Return value:  Size  Location     Type
  6348 ;;                  1    wreg      unsigned char 
  6349 ;; Registers used:
  6350 ;;		wreg
  6351 ;; Tracked objects:
  6352 ;;		On entry : 0/0
  6353 ;;		On exit  : 0/0
  6354 ;;		Unchanged: 0/0
  6355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6357 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6358 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6359 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6360 ;;Total ram usage:        0 bytes
  6361 ;; Hardware stack levels used:    1
  6362 ;; Hardware stack levels required when called:    6
  6363 ;; This function calls:
  6364 ;;		Nothing
  6365 ;; This function is called by:
  6366 ;;		_wireReadDataByte
  6367 ;; This function uses a non-reentrant model
  6368 ;;
  6369                           
  6370                           
  6371                           ;psect for function _i2c2_driver_getRXData
  6372  0C4D                     _i2c2_driver_getRXData:	
  6373                           
  6374                           ;i2c2_driver.c: 173: return SSP2BUF;
  6375                           
  6376                           ;incstack = 0
  6377                           ; Regs used in _i2c2_driver_getRXData: [wreg]
  6378  0C4D  0024               	movlb	4	; select bank4
  6379  0C4E  0819               	movf	25,w	;volatile
  6380  0C4F  0008               	return
  6381  0C50                     __end_of_i2c2_driver_getRXData:	
  6382                           
  6383                           	psect	text35
  6384  0CBC                     __ptext35:	
  6385 ;; *************** function _SYSTEM_Initialize *****************
  6386 ;; Defined at:
  6387 ;;		line 50 in file "mcc_generated_files/mcc.c"
  6388 ;; Parameters:    Size  Location     Type
  6389 ;;		None
  6390 ;; Auto vars:     Size  Location     Type
  6391 ;;		None
  6392 ;; Return value:  Size  Location     Type
  6393 ;;                  1    wreg      void 
  6394 ;; Registers used:
  6395 ;;		wreg, status,2, status,0, pclath, cstack
  6396 ;; Tracked objects:
  6397 ;;		On entry : 0/0
  6398 ;;		On exit  : 0/0
  6399 ;;		Unchanged: 0/0
  6400 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6401 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6402 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6403 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6404 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6405 ;;Total ram usage:        0 bytes
  6406 ;; Hardware stack levels used:    1
  6407 ;; Hardware stack levels required when called:    7
  6408 ;; This function calls:
  6409 ;;		_OSCILLATOR_Initialize
  6410 ;;		_PIN_MANAGER_Initialize
  6411 ;;		_PMD_Initialize
  6412 ;;		_WDT_Initialize
  6413 ;; This function is called by:
  6414 ;;		_main
  6415 ;; This function uses a non-reentrant model
  6416 ;;
  6417                           
  6418                           
  6419                           ;psect for function _SYSTEM_Initialize
  6420  0CBC                     _SYSTEM_Initialize:	
  6421                           
  6422                           ;mcc.c: 53: PMD_Initialize();
  6423                           
  6424                           ;incstack = 0
  6425                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6426  0CBC  318C  248F  318C   	fcall	_PMD_Initialize
  6427                           
  6428                           ;mcc.c: 54: PIN_MANAGER_Initialize();
  6429  0CBF  318F  2728  318C   	fcall	_PIN_MANAGER_Initialize
  6430                           
  6431                           ;mcc.c: 55: OSCILLATOR_Initialize();
  6432  0CC2  318C  2497  318C   	fcall	_OSCILLATOR_Initialize
  6433                           
  6434                           ;mcc.c: 56: WDT_Initialize();
  6435  0CC5  318C  2466         	fcall	_WDT_Initialize
  6436  0CC7  0008               	return
  6437  0CC8                     __end_of_SYSTEM_Initialize:	
  6438                           
  6439                           	psect	text36
  6440  0C66                     __ptext36:	
  6441 ;; *************** function _WDT_Initialize *****************
  6442 ;; Defined at:
  6443 ;;		line 73 in file "mcc_generated_files/mcc.c"
  6444 ;; Parameters:    Size  Location     Type
  6445 ;;		None
  6446 ;; Auto vars:     Size  Location     Type
  6447 ;;		None
  6448 ;; Return value:  Size  Location     Type
  6449 ;;                  1    wreg      void 
  6450 ;; Registers used:
  6451 ;;		wreg
  6452 ;; Tracked objects:
  6453 ;;		On entry : 0/0
  6454 ;;		On exit  : 0/0
  6455 ;;		Unchanged: 0/0
  6456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6457 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6458 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6459 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6460 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6461 ;;Total ram usage:        0 bytes
  6462 ;; Hardware stack levels used:    1
  6463 ;; Hardware stack levels required when called:    6
  6464 ;; This function calls:
  6465 ;;		Nothing
  6466 ;; This function is called by:
  6467 ;;		_SYSTEM_Initialize
  6468 ;; This function uses a non-reentrant model
  6469 ;;
  6470                           
  6471                           
  6472                           ;psect for function _WDT_Initialize
  6473  0C66                     _WDT_Initialize:	
  6474                           
  6475                           ;mcc.c: 76: WDTCON = 0x16;
  6476                           
  6477                           ;incstack = 0
  6478                           ; Regs used in _WDT_Initialize: [wreg]
  6479  0C66  3016               	movlw	22
  6480  0C67  0021               	movlb	1	; select bank1
  6481  0C68  0097               	movwf	23	;volatile
  6482  0C69  0008               	return
  6483  0C6A                     __end_of_WDT_Initialize:	
  6484                           
  6485                           	psect	text37
  6486  0C8F                     __ptext37:	
  6487 ;; *************** function _PMD_Initialize *****************
  6488 ;; Defined at:
  6489 ;;		line 79 in file "mcc_generated_files/mcc.c"
  6490 ;; Parameters:    Size  Location     Type
  6491 ;;		None
  6492 ;; Auto vars:     Size  Location     Type
  6493 ;;		None
  6494 ;; Return value:  Size  Location     Type
  6495 ;;                  1    wreg      void 
  6496 ;; Registers used:
  6497 ;;		status,2
  6498 ;; Tracked objects:
  6499 ;;		On entry : 0/0
  6500 ;;		On exit  : 0/0
  6501 ;;		Unchanged: 0/0
  6502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6503 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6504 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6505 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6506 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6507 ;;Total ram usage:        0 bytes
  6508 ;; Hardware stack levels used:    1
  6509 ;; Hardware stack levels required when called:    6
  6510 ;; This function calls:
  6511 ;;		Nothing
  6512 ;; This function is called by:
  6513 ;;		_SYSTEM_Initialize
  6514 ;; This function uses a non-reentrant model
  6515 ;;
  6516                           
  6517                           
  6518                           ;psect for function _PMD_Initialize
  6519  0C8F                     _PMD_Initialize:	
  6520                           
  6521                           ;mcc.c: 82: PMD0 = 0x00;
  6522                           
  6523                           ;incstack = 0
  6524                           ; Regs used in _PMD_Initialize: [status,2]
  6525  0C8F  0032               	movlb	18	; select bank18
  6526  0C90  0191               	clrf	17	;volatile
  6527                           
  6528                           ;mcc.c: 84: PMD1 = 0x00;
  6529  0C91  0192               	clrf	18	;volatile
  6530                           
  6531                           ;mcc.c: 86: PMD2 = 0x00;
  6532  0C92  0193               	clrf	19	;volatile
  6533                           
  6534                           ;mcc.c: 88: PMD3 = 0x00;
  6535  0C93  0194               	clrf	20	;volatile
  6536                           
  6537                           ;mcc.c: 90: PMD4 = 0x00;
  6538  0C94  0195               	clrf	21	;volatile
  6539                           
  6540                           ;mcc.c: 92: PMD5 = 0x00;
  6541  0C95  0196               	clrf	22	;volatile
  6542  0C96  0008               	return
  6543  0C97                     __end_of_PMD_Initialize:	
  6544                           
  6545                           	psect	text38
  6546  0F28                     __ptext38:	
  6547 ;; *************** function _PIN_MANAGER_Initialize *****************
  6548 ;; Defined at:
  6549 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  6550 ;; Parameters:    Size  Location     Type
  6551 ;;		None
  6552 ;; Auto vars:     Size  Location     Type
  6553 ;;		None
  6554 ;; Return value:  Size  Location     Type
  6555 ;;                  1    wreg      void 
  6556 ;; Registers used:
  6557 ;;		wreg, status,2
  6558 ;; Tracked objects:
  6559 ;;		On entry : 0/0
  6560 ;;		On exit  : 0/0
  6561 ;;		Unchanged: 0/0
  6562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6563 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6564 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6565 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6566 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6567 ;;Total ram usage:        0 bytes
  6568 ;; Hardware stack levels used:    1
  6569 ;; Hardware stack levels required when called:    6
  6570 ;; This function calls:
  6571 ;;		Nothing
  6572 ;; This function is called by:
  6573 ;;		_SYSTEM_Initialize
  6574 ;; This function uses a non-reentrant model
  6575 ;;
  6576                           
  6577                           
  6578                           ;psect for function _PIN_MANAGER_Initialize
  6579  0F28                     _PIN_MANAGER_Initialize:	
  6580                           
  6581                           ;pin_manager.c: 60: LATA = 0x00;
  6582                           
  6583                           ;incstack = 0
  6584                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  6585  0F28  0022               	movlb	2	; select bank2
  6586  0F29  018C               	clrf	12	;volatile
  6587                           
  6588                           ;pin_manager.c: 61: LATB = 0x00;
  6589  0F2A  018D               	clrf	13	;volatile
  6590                           
  6591                           ;pin_manager.c: 62: LATC = 0x00;
  6592  0F2B  018E               	clrf	14	;volatile
  6593                           
  6594                           ;pin_manager.c: 67: TRISA = 0x11;
  6595  0F2C  3011               	movlw	17
  6596  0F2D  0021               	movlb	1	; select bank1
  6597  0F2E  008C               	movwf	12	;volatile
  6598                           
  6599                           ;pin_manager.c: 68: TRISB = 0xF0;
  6600  0F2F  30F0               	movlw	240
  6601  0F30  008D               	movwf	13	;volatile
  6602                           
  6603                           ;pin_manager.c: 69: TRISC = 0xDF;
  6604  0F31  30DF               	movlw	223
  6605  0F32  008E               	movwf	14	;volatile
  6606                           
  6607                           ;pin_manager.c: 74: ANSELC = 0x8F;
  6608  0F33  308F               	movlw	143
  6609  0F34  0023               	movlb	3	; select bank3
  6610  0F35  008E               	movwf	14	;volatile
  6611                           
  6612                           ;pin_manager.c: 75: ANSELB = 0xF0;
  6613  0F36  30F0               	movlw	240
  6614  0F37  008D               	movwf	13	;volatile
  6615                           
  6616                           ;pin_manager.c: 76: ANSELA = 0x11;
  6617  0F38  3011               	movlw	17
  6618  0F39  008C               	movwf	12	;volatile
  6619                           
  6620                           ;pin_manager.c: 81: WPUB = 0x00;
  6621  0F3A  0024               	movlb	4	; select bank4
  6622  0F3B  018D               	clrf	13	;volatile
  6623                           
  6624                           ;pin_manager.c: 82: WPUA = 0x00;
  6625  0F3C  018C               	clrf	12	;volatile
  6626                           
  6627                           ;pin_manager.c: 83: WPUC = 0x00;
  6628  0F3D  018E               	clrf	14	;volatile
  6629                           
  6630                           ;pin_manager.c: 88: ODCONA = 0x00;
  6631  0F3E  0025               	movlb	5	; select bank5
  6632  0F3F  018C               	clrf	12	;volatile
  6633                           
  6634                           ;pin_manager.c: 89: ODCONB = 0x00;
  6635  0F40  018D               	clrf	13	;volatile
  6636                           
  6637                           ;pin_manager.c: 90: ODCONC = 0x00;
  6638  0F41  018E               	clrf	14	;volatile
  6639                           
  6640                           ;pin_manager.c: 95: SLRCONA = 0x37;
  6641  0F42  3037               	movlw	55
  6642  0F43  0026               	movlb	6	; select bank6
  6643  0F44  008C               	movwf	12	;volatile
  6644                           
  6645                           ;pin_manager.c: 96: SLRCONB = 0xF0;
  6646  0F45  30F0               	movlw	240
  6647  0F46  008D               	movwf	13	;volatile
  6648                           
  6649                           ;pin_manager.c: 97: SLRCONC = 0xFF;
  6650  0F47  30FF               	movlw	255
  6651  0F48  008E               	movwf	14	;volatile
  6652                           
  6653                           ;pin_manager.c: 106: SSP2DATPPS = 0x16;
  6654  0F49  3016               	movlw	22
  6655  0F4A  003C               	movlb	28	; select bank28
  6656  0F4B  009E               	movwf	30	;volatile
  6657                           
  6658                           ;pin_manager.c: 107: RC4PPS = 0x1A;
  6659  0F4C  301A               	movlw	26
  6660  0F4D  003D               	movlb	29	; select bank29
  6661  0F4E  00A4               	movwf	36	;volatile
  6662                           
  6663                           ;pin_manager.c: 108: RC6PPS = 0x1B;
  6664  0F4F  301B               	movlw	27
  6665  0F50  00A6               	movwf	38	;volatile
  6666                           
  6667                           ;pin_manager.c: 109: SSP2CLKPPS = 0x14;
  6668  0F51  3014               	movlw	20
  6669  0F52  003C               	movlb	28	; select bank28
  6670  0F53  009D               	movwf	29	;volatile
  6671  0F54  0008               	return
  6672  0F55                     __end_of_PIN_MANAGER_Initialize:	
  6673                           
  6674                           	psect	text39
  6675  0C97                     __ptext39:	
  6676 ;; *************** function _OSCILLATOR_Initialize *****************
  6677 ;; Defined at:
  6678 ;;		line 59 in file "mcc_generated_files/mcc.c"
  6679 ;; Parameters:    Size  Location     Type
  6680 ;;		None
  6681 ;; Auto vars:     Size  Location     Type
  6682 ;;		None
  6683 ;; Return value:  Size  Location     Type
  6684 ;;                  1    wreg      void 
  6685 ;; Registers used:
  6686 ;;		wreg, status,2
  6687 ;; Tracked objects:
  6688 ;;		On entry : 0/0
  6689 ;;		On exit  : 0/0
  6690 ;;		Unchanged: 0/0
  6691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6692 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6693 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6694 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6695 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6696 ;;Total ram usage:        0 bytes
  6697 ;; Hardware stack levels used:    1
  6698 ;; Hardware stack levels required when called:    6
  6699 ;; This function calls:
  6700 ;;		Nothing
  6701 ;; This function is called by:
  6702 ;;		_SYSTEM_Initialize
  6703 ;; This function uses a non-reentrant model
  6704 ;;
  6705                           
  6706                           
  6707                           ;psect for function _OSCILLATOR_Initialize
  6708  0C97                     _OSCILLATOR_Initialize:	
  6709                           
  6710                           ;mcc.c: 62: OSCCON1 = 0x60;
  6711                           
  6712                           ;incstack = 0
  6713                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  6714  0C97  3060               	movlw	96
  6715  0C98  0032               	movlb	18	; select bank18
  6716  0C99  0099               	movwf	25	;volatile
  6717                           
  6718                           ;mcc.c: 64: OSCCON3 = 0x00;
  6719  0C9A  019B               	clrf	27	;volatile
  6720                           
  6721                           ;mcc.c: 66: OSCEN = 0x00;
  6722  0C9B  019D               	clrf	29	;volatile
  6723                           
  6724                           ;mcc.c: 68: OSCFRQ = 0x03;
  6725  0C9C  3003               	movlw	3
  6726  0C9D  009F               	movwf	31	;volatile
  6727                           
  6728                           ;mcc.c: 70: OSCTUNE = 0x00;
  6729  0C9E  019E               	clrf	30	;volatile
  6730  0C9F  0008               	return
  6731  0CA0                     __end_of_OSCILLATOR_Initialize:	
  6732                           
  6733                           	psect	intentry
  6734  0004                     __pintentry:	
  6735 ;; *************** function _INTERRUPT_InterruptManager *****************
  6736 ;; Defined at:
  6737 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  6738 ;; Parameters:    Size  Location     Type
  6739 ;;		None
  6740 ;; Auto vars:     Size  Location     Type
  6741 ;;		None
  6742 ;; Return value:  Size  Location     Type
  6743 ;;                  1    wreg      void 
  6744 ;; Registers used:
  6745 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6746 ;; Tracked objects:
  6747 ;;		On entry : 0/0
  6748 ;;		On exit  : 0/0
  6749 ;;		Unchanged: 0/0
  6750 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6751 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6752 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6753 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6754 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6755 ;;Total ram usage:        0 bytes
  6756 ;; Hardware stack levels used:    1
  6757 ;; Hardware stack levels required when called:    5
  6758 ;; This function calls:
  6759 ;;		Absolute function
  6760 ;;		_handleGesture
  6761 ;; This function is called by:
  6762 ;;		Interrupt level 1
  6763 ;; This function uses a non-reentrant model
  6764 ;;
  6765                           
  6766  0004                     _INTERRUPT_InterruptManager:	
  6767                           
  6768                           ;incstack = 0
  6769  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  6770                           
  6771                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6772  0005  3180               	pagesel	$
  6773                           
  6774                           ;interrupt_manager.c: 55: if(INTCONbits.PEIE == 1)
  6775  0006  1F0B               	btfss	11,6	;volatile
  6776  0007  2818               	goto	i1l21
  6777                           
  6778                           ;interrupt_manager.c: 56: {;interrupt_manager.c: 57: if(PIE2bits.BCL2IE == 1 && PIR2bits
      +                          .BCL2IF == 1)
  6779  0008  0021               	movlb	1	; select bank1
  6780  0009  1912               	btfsc	18,2	;volatile
  6781                           
  6782                           ;interrupt_manager.c: 58: {;interrupt_manager.c: 59: i2c2_driver_busCollisionISR();
  6783  000A  0020               	movlb	0	; select bank0
  6784  000B  1912               	btfsc	18,2	;volatile
  6785  000C  2818               	goto	i1l21
  6786                           
  6787                           ;interrupt_manager.c: 61: else if(PIE2bits.SSP2IE == 1 && PIR2bits.SSP2IF == 1)
  6788  000D  0021               	movlb	1	; select bank1
  6789  000E  1D92               	btfss	18,3	;volatile
  6790  000F  2818               	goto	i1l21
  6791  0010  0020               	movlb	0	; select bank0
  6792  0011  1D92               	btfss	18,3	;volatile
  6793  0012  2818               	goto	i1l21
  6794                           
  6795                           ;interrupt_manager.c: 62: {;interrupt_manager.c: 64: i2c2_driver_i2cISR();
  6796  0013  0868               	movf	_i2c2_driver_i2cISR+1,w
  6797  0014  008A               	movwf	10
  6798  0015  0867               	movf	_i2c2_driver_i2cISR,w
  6799  0016  000A               	callw
  6800  0017  3180               	pagesel	$
  6801  0018                     i1l21:	
  6802                           ;interrupt_manager.c: 70: };interrupt_manager.c: 71: }
  6803                           
  6804                           ;interrupt_manager.c: 66: }
  6805                           
  6806  0018  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  6807  0019  0009               	retfie
  6808  001A                     __end_of_INTERRUPT_InterruptManager:	
  6809                           
  6810                           	psect	text41
  6811  077F                     __ptext41:	
  6812 ;; *************** function _handleGesture *****************
  6813 ;; Defined at:
  6814 ;;		line 105 in file "main.c"
  6815 ;; Parameters:    Size  Location     Type
  6816 ;;		None
  6817 ;; Auto vars:     Size  Location     Type
  6818 ;;		None
  6819 ;; Return value:  Size  Location     Type
  6820 ;;                  1    wreg      void 
  6821 ;; Registers used:
  6822 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6823 ;; Tracked objects:
  6824 ;;		On entry : 0/0
  6825 ;;		On exit  : 0/0
  6826 ;;		Unchanged: 0/0
  6827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6828 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6829 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6830 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6831 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6832 ;;Total ram usage:        2 bytes
  6833 ;; Hardware stack levels used:    1
  6834 ;; Hardware stack levels required when called:    4
  6835 ;; This function calls:
  6836 ;;		_LEDs_SetLow
  6837 ;;		_isGestureAvailable
  6838 ;;		_mssp2_clearIRQ
  6839 ;;		_readGesture
  6840 ;; This function is called by:
  6841 ;;		_main
  6842 ;;		_INTERRUPT_InterruptManager
  6843 ;; This function uses a non-reentrant model
  6844 ;;
  6845                           
  6846                           
  6847                           ;psect for function _handleGesture
  6848  077F                     _handleGesture:	
  6849                           
  6850                           ;main.c: 107: if(isGestureAvailable())
  6851                           
  6852                           ;incstack = 0
  6853                           ; Regs used in _handleGesture: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6854  077F  318C  24D6  3187   	fcall	_isGestureAvailable
  6855  0782  3A00               	xorlw	0
  6856  0783  1903               	skipnz
  6857  0784  0008               	return
  6858                           
  6859                           ;main.c: 108: {;main.c: 109: mssp2_clearIRQ();
  6860  0785  318C  2438  3187   	fcall	_mssp2_clearIRQ
  6861                           
  6862                           ;main.c: 111: switch(readGesture())
  6863  0788  2FB4               	goto	i1l3643
  6864  0789                     i1l3609:	
  6865                           
  6866                           ;main.c: 115: LEDs_SetLow();
  6867  0789  318C  246F  3187   	fcall	_LEDs_SetLow
  6868  078C  0022               	movlb	2	; select bank2
  6869  078D  168E               	bsf	14,5	;volatile
  6870  078E                     i1l3613:	
  6871                           
  6872                           ;main.c: 117: _delay((unsigned long)((1000)*(4000000/4000.0)));
  6873  078E  3006               	movlw	6
  6874  078F  0020               	movlb	0	; select bank0
  6875  0790  00CF               	movwf	??_handleGesture+1
  6876  0791  3013               	movlw	19
  6877  0792  00CE               	movwf	??_handleGesture
  6878  0793  30AD               	movlw	173
  6879  0794                     u334_27:	
  6880  0794  0B89               	decfsz	9,f
  6881  0795  2F94               	goto	u334_27
  6882  0796  0BCE               	decfsz	??_handleGesture,f
  6883  0797  2F94               	goto	u334_27
  6884  0798  0BCF               	decfsz	??_handleGesture+1,f
  6885  0799  2F94               	goto	u334_27
  6886  079A  3200               	nop2
  6887                           
  6888                           ;main.c: 118: break;
  6889  079B  2FCB               	goto	i1l3645
  6890  079C                     i1l3615:	
  6891                           
  6892                           ;main.c: 120: LEDs_SetLow();
  6893  079C  318C  246F  3187   	fcall	_LEDs_SetLow
  6894  079F  0022               	movlb	2	; select bank2
  6895  07A0  2FB2               	goto	i1l3637
  6896  07A1                     i1l3621:	
  6897                           
  6898                           ;main.c: 125: LEDs_SetLow();
  6899  07A1  318C  246F  3187   	fcall	_LEDs_SetLow
  6900  07A4  0022               	movlb	2	; select bank2
  6901  07A5  148C               	bsf	12,1	;volatile
  6902  07A6  2F8E               	goto	i1l3613
  6903  07A7                     i1l3627:	
  6904                           
  6905                           ;main.c: 130: LEDs_SetLow();
  6906  07A7  318C  246F  3187   	fcall	_LEDs_SetLow
  6907  07AA  0022               	movlb	2	; select bank2
  6908  07AB  168C               	bsf	12,5	;volatile
  6909  07AC  2F8E               	goto	i1l3613
  6910  07AD                     i1l3633:	
  6911                           
  6912                           ;main.c: 146: LEDs_SetLow();
  6913  07AD  318C  246F  3187   	fcall	_LEDs_SetLow
  6914  07B0  0022               	movlb	2	; select bank2
  6915  07B1  168E               	bsf	14,5	;volatile
  6916  07B2                     i1l3637:	
  6917  07B2  150C               	bsf	12,2	;volatile
  6918  07B3  2F8E               	goto	i1l3613
  6919  07B4                     i1l3643:	
  6920  07B4  3185  2594  3187   	fcall	_readGesture
  6921                           
  6922                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6923                           ; Switch size 1, requested type "simple"
  6924                           ; Number of cases is 1, Range of values is 0 to 0
  6925                           ; switch strategies available:
  6926                           ; Name         Instructions Cycles
  6927                           ; simple_byte            4     3 (average)
  6928                           ; direct_byte            8     6 (fixed)
  6929                           ; jumptable            260     6 (fixed)
  6930                           ;	Chosen strategy is simple_byte
  6931  07B7  0020               	movlb	0	; select bank0
  6932  07B8  0843               	movf	?_readGesture+1,w
  6933  07B9  3A00               	xorlw	0	; case 0
  6934  07BA  1903               	skipnz
  6935  07BB  2FBD               	goto	i1l3693
  6936  07BC  2FAD               	goto	i1l3633
  6937  07BD                     i1l3693:	
  6938                           
  6939                           ; Switch size 1, requested type "simple"
  6940                           ; Number of cases is 4, Range of values is 1 to 4
  6941                           ; switch strategies available:
  6942                           ; Name         Instructions Cycles
  6943                           ; simple_byte           13     7 (average)
  6944                           ; direct_byte           17     9 (fixed)
  6945                           ; jumptable            263     9 (fixed)
  6946                           ;	Chosen strategy is simple_byte
  6947  07BD  0842               	movf	?_readGesture,w
  6948  07BE  3A01               	xorlw	1	; case 1
  6949  07BF  1903               	skipnz
  6950  07C0  2FA1               	goto	i1l3621
  6951  07C1  3A03               	xorlw	3	; case 2
  6952  07C2  1903               	skipnz
  6953  07C3  2FA7               	goto	i1l3627
  6954  07C4  3A01               	xorlw	1	; case 3
  6955  07C5  1903               	skipnz
  6956  07C6  2F89               	goto	i1l3609
  6957  07C7  3A07               	xorlw	7	; case 4
  6958  07C8  1903               	skipnz
  6959  07C9  2F9C               	goto	i1l3615
  6960  07CA  2FAD               	goto	i1l3633
  6961  07CB                     i1l3645:	
  6962                           
  6963                           ;main.c: 154: LEDs_SetLow();
  6964  07CB  318C  246F         	fcall	_LEDs_SetLow
  6965  07CD  0008               	return
  6966  07CE                     __end_of_handleGesture:	
  6967                           
  6968                           	psect	text42
  6969  0594                     __ptext42:	
  6970 ;; *************** function _readGesture *****************
  6971 ;; Defined at:
  6972 ;;		line 552 in file "APDS9960.c"
  6973 ;; Parameters:    Size  Location     Type
  6974 ;;		None
  6975 ;; Auto vars:     Size  Location     Type
  6976 ;;  fifo_data      64    0[BANK2 ] unsigned char [64]
  6977 ;;  fifo_data2     64    0[BANK1 ] unsigned char [64]
  6978 ;;  i               2   44[BANK0 ] int 
  6979 ;;  bytes_read      2   41[BANK0 ] int 
  6980 ;;  motion          2   38[BANK0 ] int 
  6981 ;;  fifo_level      1   43[BANK0 ] unsigned char 
  6982 ;;  gstatus         1   40[BANK0 ] unsigned char 
  6983 ;; Return value:  Size  Location     Type
  6984 ;;                  2   34[BANK0 ] int 
  6985 ;; Registers used:
  6986 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6987 ;; Tracked objects:
  6988 ;;		On entry : 0/0
  6989 ;;		On exit  : 0/0
  6990 ;;		Unchanged: 0/0
  6991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6992 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6993 ;;      Locals:         0       8      64      64       0       0       0       0       0       0       0       0       
      +0       0
  6994 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6995 ;;      Totals:         0      12      64      64       0       0       0       0       0       0       0       0       
      +0       0
  6996 ;;Total ram usage:      140 bytes
  6997 ;; Hardware stack levels used:    1
  6998 ;; Hardware stack levels required when called:    3
  6999 ;; This function calls:
  7000 ;;		_decodeGesture
  7001 ;;		_isGestureAvailable
  7002 ;;		_processGestureData
  7003 ;;		_wireReadDataBlock
  7004 ;;		i1_getMode
  7005 ;;		i1_resetGestureParameters
  7006 ;;		i1_wireReadDataByte
  7007 ;; This function is called by:
  7008 ;;		_handleGesture
  7009 ;; This function uses a non-reentrant model
  7010 ;;
  7011                           
  7012                           
  7013                           ;psect for function _readGesture
  7014  0594                     _readGesture:	
  7015                           
  7016                           ;APDS9960.c: 555: int bytes_read = 0;
  7017                           
  7018                           ;incstack = 0
  7019                           ; Regs used in _readGesture: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7020  0594  0020               	movlb	0	; select bank0
  7021  0595  01C9               	clrf	readGesture@bytes_read
  7022  0596  01CA               	clrf	readGesture@bytes_read+1
  7023                           
  7024                           ;APDS9960.c: 556: uint8_t fifo_data[64];;APDS9960.c: 557: uint8_t fifo_data2[64];;APDS99
      +                          60.c: 558: uint8_t gstatus;;APDS9960.c: 559: int motion;;APDS9960.c: 560: int i;;APDS996
      +                          0.c: 563: if( !isGestureAvailable() || !(getMode() & 0b01000001) ) {
  7025  0597  318C  24D6  3185   	fcall	_isGestureAvailable
  7026  059A  3A00               	xorlw	0
  7027  059B  1903               	skipnz
  7028  059C  2DA3               	goto	i1l3175
  7029  059D  318C  2487  3185   	fcall	i1_getMode
  7030  05A0  3941               	andlw	65
  7031  05A1  1D03               	btfss	3,2
  7032  05A2  2E58               	goto	i1l3179
  7033  05A3                     i1l3175:	
  7034                           
  7035                           ;APDS9960.c: 564: return DIR_NONE;
  7036  05A3  0020               	movlb	0	; select bank0
  7037  05A4  01C2               	clrf	?_readGesture
  7038  05A5  01C3               	clrf	?_readGesture+1
  7039  05A6  0008               	return
  7040  05A7                     i1l3185:	
  7041                           
  7042                           ;APDS9960.c: 580: {;APDS9960.c: 582: fifo_level= wireReadDataByte(0xAE);
  7043  05A7  30AE               	movlw	174
  7044  05A8  318D  25CD  3185   	fcall	i1_wireReadDataByte
  7045  05AB  0020               	movlb	0	; select bank0
  7046  05AC  00C4               	movwf	??_readGesture
  7047  05AD  0844               	movf	??_readGesture,w
  7048  05AE  00CB               	movwf	readGesture@fifo_level
  7049                           
  7050                           ;APDS9960.c: 586: if( fifo_level > 0) {
  7051  05AF  084B               	movf	readGesture@fifo_level,w
  7052  05B0  1903               	btfsc	3,2
  7053  05B1  2E58               	goto	i1l3179
  7054                           
  7055                           ;APDS9960.c: 588: if(fifo_level < 17)
  7056  05B2  3011               	movlw	17
  7057  05B3  024B               	subwf	readGesture@fifo_level,w
  7058  05B4  1803               	skipnc
  7059  05B5  2DBA               	goto	i1l3193
  7060                           
  7061                           ;APDS9960.c: 589: {;APDS9960.c: 590: bytes_read = wireReadDataBlock( 0xFC,;APDS9960.c: 5
      +                          91: (uint8_t*)fifo_data,;APDS9960.c: 592: (fifo_level * 4) );
  7062  05B6  3020               	movlw	low readGesture@fifo_data
  7063  05B7  00F1               	movwf	wireReadDataBlock@val
  7064  05B8  3001               	movlw	high readGesture@fifo_data
  7065  05B9  2DBD               	goto	L2
  7066  05BA                     i1l3193:	
  7067                           ;APDS9960.c: 593: } else
  7068                           
  7069                           
  7070                           ;APDS9960.c: 594: {;APDS9960.c: 595: bytes_read = wireReadDataBlock( 0xFC,;APDS9960.c: 5
      +                          96: (uint8_t*)fifo_data2,;APDS9960.c: 597: (fifo_level * 4) );
  7071  05BA  30A0               	movlw	low readGesture@fifo_data2
  7072  05BB  00F1               	movwf	wireReadDataBlock@val
  7073  05BC  3000               	movlw	high readGesture@fifo_data2
  7074  05BD                     L2:	
  7075  05BD  00F2               	movwf	wireReadDataBlock@val+1
  7076  05BE  084B               	movf	readGesture@fifo_level,w
  7077  05BF  00C4               	movwf	??_readGesture
  7078  05C0  01C5               	clrf	??_readGesture+1
  7079  05C1  35C4               	lslf	??_readGesture,f
  7080  05C2  0DC5               	rlf	??_readGesture+1,f
  7081  05C3  35C4               	lslf	??_readGesture,f
  7082  05C4  0DC5               	rlf	??_readGesture+1,f
  7083  05C5  0844               	movf	??_readGesture,w
  7084  05C6  00F3               	movwf	wireReadDataBlock@len
  7085  05C7  0845               	movf	??_readGesture+1,w
  7086  05C8  00F4               	movwf	wireReadDataBlock@len+1
  7087  05C9  30FC               	movlw	252
  7088  05CA  318F  27B9  3185   	fcall	_wireReadDataBlock
  7089  05CD  0872               	movf	?_wireReadDataBlock+1,w
  7090  05CE  0020               	movlb	0	; select bank0
  7091  05CF  00CA               	movwf	readGesture@bytes_read+1
  7092  05D0  0871               	movf	?_wireReadDataBlock,w
  7093  05D1  00C9               	movwf	readGesture@bytes_read
  7094                           
  7095                           ;APDS9960.c: 598: };APDS9960.c: 601: if( bytes_read == -1 )
  7096  05D2  0A49               	incf	readGesture@bytes_read,w
  7097  05D3  1D03               	skipz
  7098  05D4  2DDD               	goto	i1l3201
  7099  05D5  0A4A               	incf	readGesture@bytes_read+1,w
  7100  05D6  1D03               	btfss	3,2
  7101  05D7  2DDD               	goto	i1l3201
  7102                           
  7103                           ;APDS9960.c: 602: {;APDS9960.c: 603: return 0xFF;
  7104  05D8  30FF               	movlw	255
  7105  05D9  00C2               	movwf	?_readGesture
  7106  05DA  3000               	movlw	0
  7107  05DB  00C3               	movwf	?_readGesture+1
  7108  05DC  0008               	return
  7109  05DD                     i1l3201:	
  7110                           
  7111                           ;APDS9960.c: 604: };APDS9960.c: 608: if( bytes_read >= 4 )
  7112  05DD  084A               	movf	readGesture@bytes_read+1,w
  7113  05DE  3A80               	xorlw	128
  7114  05DF  00C4               	movwf	??_readGesture
  7115  05E0  3080               	movlw	128
  7116  05E1  0244               	subwf	??_readGesture,w
  7117  05E2  1D03               	skipz
  7118  05E3  2DE6               	goto	u275_25
  7119  05E4  3004               	movlw	4
  7120  05E5  0249               	subwf	readGesture@bytes_read,w
  7121  05E6                     u275_25:	
  7122  05E6  1C03               	skipc
  7123  05E7  2E58               	goto	i1l3179
  7124                           
  7125                           ;APDS9960.c: 609: {;APDS9960.c: 611: for( i = 0; i < bytes_read; i += 4 ) {
  7126  05E8  0020               	movlb	0	; select bank0
  7127  05E9  01CC               	clrf	readGesture@i
  7128  05EA  01CD               	clrf	readGesture@i+1
  7129  05EB                     i1l3213:	
  7130  05EB  084D               	movf	readGesture@i+1,w
  7131  05EC  3A80               	xorlw	128
  7132  05ED  00C4               	movwf	??_readGesture
  7133  05EE  084A               	movf	readGesture@bytes_read+1,w
  7134  05EF  3A80               	xorlw	128
  7135  05F0  0244               	subwf	??_readGesture,w
  7136  05F1  1D03               	skipz
  7137  05F2  2DF5               	goto	u276_25
  7138  05F3  0849               	movf	readGesture@bytes_read,w
  7139  05F4  024C               	subwf	readGesture@i,w
  7140  05F5                     u276_25:	
  7141  05F5  1803               	btfsc	3,0
  7142  05F6  2E4C               	goto	i1l3215
  7143                           
  7144                           ;APDS9960.c: 612: gesture_data_.u_data[gesture_data_.index] = fifo_data[i + 0];
  7145  05F7  0020               	movlb	0	; select bank0
  7146  05F8  084C               	movf	readGesture@i,w
  7147  05F9  3E20               	addlw	(low (readGesture@fifo_data| (0+256)))& (0+255)
  7148  05FA  0086               	movwf	6
  7149  05FB  3001               	movlw	1	; select bank2/3
  7150  05FC  0087               	movwf	7
  7151  05FD  0801               	movf	1,w
  7152  05FE  00C4               	movwf	??_readGesture
  7153  05FF  0024               	movlb	4	; select bank4
  7154  0600  0860               	movf	(_gesture_data_^(0+512)+64),w
  7155  0601  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  7156  0602  0086               	movwf	6
  7157  0603  3002               	movlw	2	; select bank4/5
  7158  0604  0087               	movwf	7
  7159  0605  0020               	movlb	0	; select bank0
  7160  0606  0844               	movf	??_readGesture,w
  7161  0607  0081               	movwf	1
  7162                           
  7163                           ;APDS9960.c: 614: gesture_data_.d_data[gesture_data_.index] = fifo_data[i + 1];
  7164  0608  084C               	movf	readGesture@i,w
  7165  0609  3E01               	addlw	1
  7166  060A  3E20               	addlw	(low (readGesture@fifo_data| (0+256)))& (0+255)
  7167  060B  0086               	movwf	6
  7168  060C  3001               	movlw	1	; select bank2/3
  7169  060D  0087               	movwf	7
  7170  060E  0801               	movf	1,w
  7171  060F  00C4               	movwf	??_readGesture
  7172  0610  0024               	movlb	4	; select bank4
  7173  0611  0860               	movf	(_gesture_data_^(0+512)+64),w
  7174  0612  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  7175  0613  0086               	movwf	6
  7176  0614  3002               	movlw	2	; select bank4/5
  7177  0615  0087               	movwf	7
  7178  0616  0020               	movlb	0	; select bank0
  7179  0617  0844               	movf	??_readGesture,w
  7180  0618  0081               	movwf	1
  7181                           
  7182                           ;APDS9960.c: 616: gesture_data_.l_data[gesture_data_.index] = fifo_data[i + 2];
  7183  0619  084C               	movf	readGesture@i,w
  7184  061A  3E02               	addlw	2
  7185  061B  3E20               	addlw	(low (readGesture@fifo_data| (0+256)))& (0+255)
  7186  061C  0086               	movwf	6
  7187  061D  3001               	movlw	1	; select bank2/3
  7188  061E  0087               	movwf	7
  7189  061F  0801               	movf	1,w
  7190  0620  00C4               	movwf	??_readGesture
  7191  0621  0024               	movlb	4	; select bank4
  7192  0622  0860               	movf	(_gesture_data_^(0+512)+64),w
  7193  0623  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  7194  0624  0086               	movwf	6
  7195  0625  3002               	movlw	2	; select bank4/5
  7196  0626  0087               	movwf	7
  7197  0627  0020               	movlb	0	; select bank0
  7198  0628  0844               	movf	??_readGesture,w
  7199  0629  0081               	movwf	1
  7200                           
  7201                           ;APDS9960.c: 618: gesture_data_.r_data[gesture_data_.index] = fifo_data[i + 3];
  7202  062A  084C               	movf	readGesture@i,w
  7203  062B  3E03               	addlw	3
  7204  062C  3E20               	addlw	(low (readGesture@fifo_data| (0+256)))& (0+255)
  7205  062D  0086               	movwf	6
  7206  062E  3001               	movlw	1	; select bank2/3
  7207  062F  0087               	movwf	7
  7208  0630  0801               	movf	1,w
  7209  0631  00C4               	movwf	??_readGesture
  7210  0632  0024               	movlb	4	; select bank4
  7211  0633  0860               	movf	(_gesture_data_^(0+512)+64),w
  7212  0634  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  7213  0635  0086               	movwf	6
  7214  0636  3002               	movlw	2	; select bank4/5
  7215  0637  0087               	movwf	7
  7216  0638  0020               	movlb	0	; select bank0
  7217  0639  0844               	movf	??_readGesture,w
  7218  063A  0081               	movwf	1
  7219                           
  7220                           ;APDS9960.c: 620: gesture_data_.index++;
  7221  063B  3001               	movlw	1
  7222  063C  00C4               	movwf	??_readGesture
  7223  063D  0844               	movf	??_readGesture,w
  7224  063E  0024               	movlb	4	; select bank4
  7225  063F  07E0               	addwf	(_gesture_data_^(0+512)+64),f
  7226                           
  7227                           ;APDS9960.c: 621: gesture_data_.total_gestures++;
  7228  0640  3001               	movlw	1
  7229  0641  0020               	movlb	0	; select bank0
  7230  0642  00C4               	movwf	??_readGesture
  7231  0643  0844               	movf	??_readGesture,w
  7232  0644  0024               	movlb	4	; select bank4
  7233  0645  07E1               	addwf	(_gesture_data_^(0+512)+65),f
  7234  0646  3004               	movlw	4
  7235  0647  0020               	movlb	0	; select bank0
  7236  0648  07CC               	addwf	readGesture@i,f
  7237  0649  3000               	movlw	0
  7238  064A  3DCD               	addwfc	readGesture@i+1,f
  7239  064B  2DEB               	goto	i1l3213
  7240  064C                     i1l3215:	
  7241                           
  7242                           ;APDS9960.c: 622: };APDS9960.c: 625: if( processGestureData() )
  7243  064C  3180  2030  3185   	fcall	_processGestureData
  7244  064F  3A00               	xorlw	0
  7245  0650  1903               	skipnz
  7246  0651  2E55               	goto	i1l3219
  7247                           
  7248                           ;APDS9960.c: 626: {;APDS9960.c: 628: if( decodeGesture() ) {
  7249  0652  3182  22F7  3185   	fcall	_decodeGesture
  7250  0655                     i1l3219:	
  7251                           
  7252                           ;APDS9960.c: 630: };APDS9960.c: 631: };APDS9960.c: 634: gesture_data_.index = 0;
  7253  0655  0024               	movlb	4	; select bank4
  7254  0656  01E0               	clrf	(_gesture_data_^(0+512)+64)
  7255                           
  7256                           ;APDS9960.c: 635: gesture_data_.total_gestures = 0;
  7257  0657  01E1               	clrf	(_gesture_data_^(0+512)+65)
  7258  0658                     i1l3179:	
  7259                           
  7260                           ;APDS9960.c: 571: _delay((unsigned long)((30)*(4000000/4000.0)));
  7261  0658  3027               	movlw	39
  7262  0659  0020               	movlb	0	; select bank0
  7263  065A  00C4               	movwf	??_readGesture
  7264  065B  30F5               	movlw	245
  7265  065C                     u335_27:	
  7266  065C  0B89               	decfsz	9,f
  7267  065D  2E5C               	goto	u335_27
  7268  065E  0BC4               	decfsz	??_readGesture,f
  7269  065F  2E5C               	goto	u335_27
  7270                           
  7271                           ;APDS9960.c: 574: gstatus = wireReadDataByte(0xAF);
  7272  0660  30AF               	movlw	175
  7273  0661  318D  25CD  3185   	fcall	i1_wireReadDataByte
  7274  0664  0020               	movlb	0	; select bank0
  7275  0665  00C4               	movwf	??_readGesture
  7276  0666  0844               	movf	??_readGesture,w
  7277  0667  00C8               	movwf	readGesture@gstatus
  7278                           
  7279                           ;APDS9960.c: 579: if( (gstatus & 0b00000001) == 0b00000001 )
  7280  0668  1848               	btfsc	readGesture@gstatus,0
  7281  0669  2DA7               	goto	i1l3185
  7282                           
  7283                           ;APDS9960.c: 641: _delay((unsigned long)((30)*(4000000/4000.0)));
  7284  066A  3027               	movlw	39
  7285  066B  0020               	movlb	0	; select bank0
  7286  066C  00C4               	movwf	??_readGesture
  7287  066D  30F5               	movlw	245
  7288  066E                     u336_27:	
  7289  066E  0B89               	decfsz	9,f
  7290  066F  2E6E               	goto	u336_27
  7291  0670  0BC4               	decfsz	??_readGesture,f
  7292  0671  2E6E               	goto	u336_27
  7293                           
  7294                           ;APDS9960.c: 642: decodeGesture();
  7295  0672  3182  22F7  3185   	fcall	_decodeGesture
  7296                           
  7297                           ;APDS9960.c: 643: motion = gesture_motion_;
  7298  0675  0020               	movlb	0	; select bank0
  7299  0676  0855               	movf	_gesture_motion_+1,w
  7300  0677  00C7               	movwf	readGesture@motion+1
  7301  0678  0854               	movf	_gesture_motion_,w
  7302  0679  00C6               	movwf	readGesture@motion
  7303                           
  7304                           ;APDS9960.c: 645: resetGestureParameters();
  7305  067A  318D  2534         	fcall	i1_resetGestureParameters
  7306                           
  7307                           ;APDS9960.c: 647: return motion;
  7308  067C  0020               	movlb	0	; select bank0
  7309  067D  0847               	movf	readGesture@motion+1,w
  7310  067E  00C3               	movwf	?_readGesture+1
  7311  067F  0846               	movf	readGesture@motion,w
  7312  0680  00C2               	movwf	?_readGesture
  7313  0681  0008               	return
  7314  0682                     __end_of_readGesture:	
  7315                           
  7316                           	psect	text43
  7317  0D34                     __ptext43:	
  7318 ;; *************** function i1_resetGestureParameters *****************
  7319 ;; Defined at:
  7320 ;;		line 453 in file "APDS9960.c"
  7321 ;; Parameters:    Size  Location     Type
  7322 ;;		None
  7323 ;; Auto vars:     Size  Location     Type
  7324 ;;		None
  7325 ;; Return value:  Size  Location     Type
  7326 ;;                  1    wreg      void 
  7327 ;; Registers used:
  7328 ;;		status,2
  7329 ;; Tracked objects:
  7330 ;;		On entry : 0/0
  7331 ;;		On exit  : 0/0
  7332 ;;		Unchanged: 0/0
  7333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7335 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7336 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7337 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7338 ;;Total ram usage:        0 bytes
  7339 ;; Hardware stack levels used:    1
  7340 ;; This function calls:
  7341 ;;		Nothing
  7342 ;; This function is called by:
  7343 ;;		_readGesture
  7344 ;; This function uses a non-reentrant model
  7345 ;;
  7346                           
  7347                           
  7348                           ;psect for function i1_resetGestureParameters
  7349  0D34                     i1_resetGestureParameters:	
  7350                           
  7351                           ;APDS9960.c: 456: gesture_data_.index = 0;
  7352                           
  7353                           ;incstack = 0
  7354                           ; Regs used in i1_resetGestureParameters: [status,2]
  7355  0D34  0024               	movlb	4	; select bank4
  7356  0D35  01E0               	clrf	(_gesture_data_^(0+512)+64)
  7357                           
  7358                           ;APDS9960.c: 457: gesture_data_.total_gestures = 0;
  7359  0D36  01E1               	clrf	(_gesture_data_^(0+512)+65)
  7360                           
  7361                           ;APDS9960.c: 459: gesture_ud_delta_ = 0;
  7362  0D37  0020               	movlb	0	; select bank0
  7363  0D38  01E2               	clrf	_gesture_ud_delta_
  7364  0D39  01E3               	clrf	_gesture_ud_delta_+1
  7365                           
  7366                           ;APDS9960.c: 460: gesture_lr_delta_ = 0;
  7367  0D3A  01E0               	clrf	_gesture_lr_delta_
  7368  0D3B  01E1               	clrf	_gesture_lr_delta_+1
  7369                           
  7370                           ;APDS9960.c: 462: gesture_ud_count_ = 0;
  7371  0D3C  01DE               	clrf	_gesture_ud_count_
  7372  0D3D  01DF               	clrf	_gesture_ud_count_+1
  7373                           
  7374                           ;APDS9960.c: 463: gesture_lr_count_ = 0;
  7375  0D3E  01DC               	clrf	_gesture_lr_count_
  7376  0D3F  01DD               	clrf	_gesture_lr_count_+1
  7377                           
  7378                           ;APDS9960.c: 465: gesture_near_count_ = 0;
  7379  0D40  01DA               	clrf	_gesture_near_count_
  7380  0D41  01DB               	clrf	_gesture_near_count_+1
  7381                           
  7382                           ;APDS9960.c: 466: gesture_far_count_ = 0;
  7383  0D42  01D8               	clrf	_gesture_far_count_
  7384  0D43  01D9               	clrf	_gesture_far_count_+1
  7385                           
  7386                           ;APDS9960.c: 468: gesture_state_ = 0;
  7387  0D44  01D6               	clrf	_gesture_state_
  7388  0D45  01D7               	clrf	_gesture_state_+1
  7389                           
  7390                           ;APDS9960.c: 469: gesture_motion_ = DIR_NONE;
  7391  0D46  01D4               	clrf	_gesture_motion_
  7392  0D47  01D5               	clrf	_gesture_motion_+1
  7393  0D48  0008               	return
  7394  0D49                     __end_ofi1_resetGestureParameters:	
  7395                           
  7396                           	psect	text44
  7397  0C87                     __ptext44:	
  7398 ;; *************** function i1_getMode *****************
  7399 ;; Defined at:
  7400 ;;		line 155 in file "APDS9960.c"
  7401 ;; Parameters:    Size  Location     Type
  7402 ;;		None
  7403 ;; Auto vars:     Size  Location     Type
  7404 ;;  getMode         1    5[COMMON] unsigned char 
  7405 ;; Return value:  Size  Location     Type
  7406 ;;                  1    wreg      unsigned char 
  7407 ;; Registers used:
  7408 ;;		wreg, status,2, status,0, pclath, cstack
  7409 ;; Tracked objects:
  7410 ;;		On entry : 0/0
  7411 ;;		On exit  : 0/0
  7412 ;;		Unchanged: 0/0
  7413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7414 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7415 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7416 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7417 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7418 ;;Total ram usage:        2 bytes
  7419 ;; Hardware stack levels used:    1
  7420 ;; Hardware stack levels required when called:    2
  7421 ;; This function calls:
  7422 ;;		i1_wireReadDataByte
  7423 ;; This function is called by:
  7424 ;;		_readGesture
  7425 ;; This function uses a non-reentrant model
  7426 ;;
  7427                           
  7428                           
  7429                           ;psect for function i1_getMode
  7430  0C87                     i1_getMode:	
  7431                           
  7432                           ;APDS9960.c: 157: uint8_t enable_value;;APDS9960.c: 160: enable_value = wireReadDataByte
      +                          (0x80);
  7433                           
  7434                           ;incstack = 0
  7435                           ; Regs used in i1_getMode: [wreg+status,2+status,0+pclath+cstack]
  7436  0C87  3080               	movlw	128
  7437  0C88  318D  25CD         	fcall	i1_wireReadDataByte
  7438  0C8A  00F4               	movwf	??i1_getMode
  7439  0C8B  0874               	movf	??i1_getMode,w
  7440  0C8C  00F5               	movwf	i1getMode@enable_value
  7441                           
  7442                           ;APDS9960.c: 162: return enable_value;
  7443  0C8D  0875               	movf	i1getMode@enable_value,w
  7444  0C8E  0008               	return
  7445  0C8F                     __end_ofi1_getMode:	
  7446                           
  7447                           	psect	text45
  7448  0FB9                     __ptext45:	
  7449 ;; *************** function _wireReadDataBlock *****************
  7450 ;; Defined at:
  7451 ;;		line 843 in file "APDS9960.c"
  7452 ;; Parameters:    Size  Location     Type
  7453 ;;  reg             1    wreg     unsigned char 
  7454 ;;  val             2    1[COMMON] PTR unsigned char 
  7455 ;;		 -> readGesture@fifo_data2(64), readGesture@fifo_data(64), 
  7456 ;;  len             2    3[COMMON] unsigned int 
  7457 ;; Auto vars:     Size  Location     Type
  7458 ;;  reg             1   10[COMMON] unsigned char 
  7459 ;;  j               1   11[COMMON] unsigned char 
  7460 ;; Return value:  Size  Location     Type
  7461 ;;                  2    1[COMMON] int 
  7462 ;; Registers used:
  7463 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7464 ;; Tracked objects:
  7465 ;;		On entry : 0/0
  7466 ;;		On exit  : 0/0
  7467 ;;		Unchanged: 0/0
  7468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7469 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7470 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7471 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7472 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7473 ;;Total ram usage:       11 bytes
  7474 ;; Hardware stack levels used:    1
  7475 ;; Hardware stack levels required when called:    1
  7476 ;; This function calls:
  7477 ;;		_i2c2_driver_sendNACK
  7478 ;;		i1_i2c2_driver_getRXData
  7479 ;;		i1_i2c2_driver_restart
  7480 ;;		i1_i2c2_driver_setAddr
  7481 ;;		i1_i2c2_driver_start
  7482 ;;		i1_i2c2_driver_startRX
  7483 ;;		i1_i2c2_driver_stop
  7484 ;; This function is called by:
  7485 ;;		_readGesture
  7486 ;; This function uses a non-reentrant model
  7487 ;;
  7488                           
  7489                           
  7490                           ;psect for function _wireReadDataBlock
  7491  0FB9                     _wireReadDataBlock:	
  7492                           
  7493                           ;incstack = 0
  7494                           ; Regs used in _wireReadDataBlock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7495                           ;wireReadDataBlock@reg stored from wreg
  7496  0FB9  00FA               	movwf	wireReadDataBlock@reg
  7497                           
  7498                           ;APDS9960.c: 861: i2c2_driver_start();
  7499  0FBA  318C  2444  318F   	fcall	i1_i2c2_driver_start
  7500                           
  7501                           ;APDS9960.c: 862: i2c2_driver_setAddr((0x39 << 1));
  7502  0FBD  3072               	movlw	114
  7503  0FBE  318C  246A  318F   	fcall	i1_i2c2_driver_setAddr
  7504                           
  7505                           ;APDS9960.c: 863: i2c2_driver_setAddr(reg);
  7506  0FC1  087A               	movf	wireReadDataBlock@reg,w
  7507  0FC2  318C  246A  318F   	fcall	i1_i2c2_driver_setAddr
  7508                           
  7509                           ;APDS9960.c: 865: for(j=0; j<len; j++)
  7510  0FC5  01FB               	clrf	wireReadDataBlock@j
  7511  0FC6                     i1l2815:	
  7512  0FC6  087B               	movf	wireReadDataBlock@j,w
  7513  0FC7  00F5               	movwf	??_wireReadDataBlock
  7514  0FC8  01F6               	clrf	??_wireReadDataBlock+1
  7515  0FC9  0874               	movf	wireReadDataBlock@len+1,w
  7516  0FCA  0276               	subwf	??_wireReadDataBlock+1,w
  7517  0FCB  1D03               	skipz
  7518  0FCC  2FCF               	goto	u192_25
  7519  0FCD  0873               	movf	wireReadDataBlock@len,w
  7520  0FCE  0275               	subwf	??_wireReadDataBlock,w
  7521  0FCF                     u192_25:	
  7522  0FCF  1803               	btfsc	3,0
  7523  0FD0  2FF6               	goto	i1l2817
  7524                           
  7525                           ;APDS9960.c: 866: {;APDS9960.c: 867: i2c2_driver_restart();
  7526  0FD1  318C  2441  318F   	fcall	i1_i2c2_driver_restart
  7527                           
  7528                           ;APDS9960.c: 868: i2c2_driver_startRX();
  7529  0FD4  318C  2447  318F   	fcall	i1_i2c2_driver_startRX
  7530                           
  7531                           ;APDS9960.c: 869: i2c2_driver_setAddr(0x39 << 1);
  7532  0FD7  3072               	movlw	114
  7533  0FD8  318C  246A  318F   	fcall	i1_i2c2_driver_setAddr
  7534                           
  7535                           ;APDS9960.c: 870: val[j] = i2c2_driver_getRXData();
  7536  0FDB  318C  243B  318F   	fcall	i1_i2c2_driver_getRXData
  7537  0FDE  00F5               	movwf	??_wireReadDataBlock
  7538  0FDF  087B               	movf	wireReadDataBlock@j,w
  7539  0FE0  00F6               	movwf	??_wireReadDataBlock+1
  7540  0FE1  01F7               	clrf	??_wireReadDataBlock+2
  7541  0FE2  0876               	movf	??_wireReadDataBlock+1,w
  7542  0FE3  0771               	addwf	wireReadDataBlock@val,w
  7543  0FE4  00F8               	movwf	??_wireReadDataBlock+3
  7544  0FE5  0877               	movf	??_wireReadDataBlock+2,w
  7545  0FE6  3D72               	addwfc	wireReadDataBlock@val+1,w
  7546  0FE7  00F9               	movwf	??_wireReadDataBlock+4
  7547  0FE8  0878               	movf	??_wireReadDataBlock+3,w
  7548  0FE9  0086               	movwf	6
  7549  0FEA  0879               	movf	??_wireReadDataBlock+4,w
  7550  0FEB  0087               	movwf	7
  7551  0FEC  0875               	movf	??_wireReadDataBlock,w
  7552  0FED  0081               	movwf	1
  7553                           
  7554                           ;APDS9960.c: 871: i2c2_driver_sendNACK();
  7555  0FEE  318C  2462  318F   	fcall	_i2c2_driver_sendNACK
  7556  0FF1  3001               	movlw	1
  7557  0FF2  00F5               	movwf	??_wireReadDataBlock
  7558  0FF3  0875               	movf	??_wireReadDataBlock,w
  7559  0FF4  07FB               	addwf	wireReadDataBlock@j,f
  7560  0FF5  2FC6               	goto	i1l2815
  7561  0FF6                     i1l2817:	
  7562                           
  7563                           ;APDS9960.c: 872: };APDS9960.c: 873: i2c2_driver_stop();
  7564  0FF6  318C  244A         	fcall	i1_i2c2_driver_stop
  7565                           
  7566                           ;APDS9960.c: 874: return (int)j;
  7567  0FF8  087B               	movf	wireReadDataBlock@j,w
  7568  0FF9  00F5               	movwf	??_wireReadDataBlock
  7569  0FFA  01F6               	clrf	??_wireReadDataBlock+1
  7570  0FFB  0875               	movf	??_wireReadDataBlock,w
  7571  0FFC  00F1               	movwf	?_wireReadDataBlock
  7572  0FFD  0876               	movf	??_wireReadDataBlock+1,w
  7573  0FFE  00F2               	movwf	?_wireReadDataBlock+1
  7574  0FFF  0008               	return
  7575  1000                     __end_of_wireReadDataBlock:	
  7576                           
  7577                           	psect	text46
  7578  0C62                     __ptext46:	
  7579 ;; *************** function _i2c2_driver_sendNACK *****************
  7580 ;; Defined at:
  7581 ;;		line 202 in file "mcc_generated_files/i2c2_driver.c"
  7582 ;; Parameters:    Size  Location     Type
  7583 ;;		None
  7584 ;; Auto vars:     Size  Location     Type
  7585 ;;		None
  7586 ;; Return value:  Size  Location     Type
  7587 ;;                  1    wreg      void 
  7588 ;; Registers used:
  7589 ;;		None
  7590 ;; Tracked objects:
  7591 ;;		On entry : 0/0
  7592 ;;		On exit  : 0/0
  7593 ;;		Unchanged: 0/0
  7594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7595 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7596 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7597 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7598 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7599 ;;Total ram usage:        0 bytes
  7600 ;; Hardware stack levels used:    1
  7601 ;; This function calls:
  7602 ;;		Nothing
  7603 ;; This function is called by:
  7604 ;;		_wireReadDataBlock
  7605 ;; This function uses a non-reentrant model
  7606 ;;
  7607                           
  7608                           
  7609                           ;psect for function _i2c2_driver_sendNACK
  7610  0C62                     _i2c2_driver_sendNACK:	
  7611                           
  7612                           ;i2c2_driver.c: 204: SSP2CON2bits.ACKDT = 1;
  7613                           
  7614                           ;incstack = 0
  7615                           ; Regs used in _i2c2_driver_sendNACK: []
  7616  0C62  0024               	movlb	4	; select bank4
  7617  0C63  169E               	bsf	30,5	;volatile
  7618                           
  7619                           ;i2c2_driver.c: 205: SSP2CON2bits.ACKEN = 1;
  7620  0C64  161E               	bsf	30,4	;volatile
  7621  0C65  0008               	return
  7622  0C66                     __end_of_i2c2_driver_sendNACK:	
  7623                           
  7624                           	psect	text47
  7625  0030                     __ptext47:	
  7626 ;; *************** function _processGestureData *****************
  7627 ;; Defined at:
  7628 ;;		line 653 in file "APDS9960.c"
  7629 ;; Parameters:    Size  Location     Type
  7630 ;;		None
  7631 ;; Auto vars:     Size  Location     Type
  7632 ;;  i               2   32[BANK0 ] int 
  7633 ;;  lr_delta        2   30[BANK0 ] int 
  7634 ;;  ud_delta        2   28[BANK0 ] int 
  7635 ;;  lr_ratio_las    2   10[BANK0 ] int 
  7636 ;;  ud_ratio_las    2    8[BANK0 ] int 
  7637 ;;  lr_ratio_fir    2    6[BANK0 ] int 
  7638 ;;  ud_ratio_fir    2    4[BANK0 ] int 
  7639 ;;  r_first         1   27[BANK0 ] unsigned char 
  7640 ;;  l_first         1   26[BANK0 ] unsigned char 
  7641 ;;  d_first         1   25[BANK0 ] unsigned char 
  7642 ;;  u_first         1   24[BANK0 ] unsigned char 
  7643 ;;  r_last          1   23[BANK0 ] unsigned char 
  7644 ;;  l_last          1   22[BANK0 ] unsigned char 
  7645 ;;  d_last          1   21[BANK0 ] unsigned char 
  7646 ;;  u_last          1   20[BANK0 ] unsigned char 
  7647 ;; Return value:  Size  Location     Type
  7648 ;;                  1    wreg      unsigned char 
  7649 ;; Registers used:
  7650 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7651 ;; Tracked objects:
  7652 ;;		On entry : 0/0
  7653 ;;		On exit  : 0/0
  7654 ;;		Unchanged: 0/0
  7655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7657 ;;      Locals:         0      30       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7658 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7659 ;;      Totals:         2      30       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7660 ;;Total ram usage:       32 bytes
  7661 ;; Hardware stack levels used:    1
  7662 ;; Hardware stack levels required when called:    1
  7663 ;; This function calls:
  7664 ;;		___awdiv
  7665 ;;		___wmul
  7666 ;; This function is called by:
  7667 ;;		_readGesture
  7668 ;; This function uses a non-reentrant model
  7669 ;;
  7670                           
  7671                           
  7672                           ;psect for function _processGestureData
  7673  0030                     _processGestureData:	
  7674                           
  7675                           ;APDS9960.c: 655: uint8_t u_first = 0;
  7676                           
  7677                           ;incstack = 0
  7678                           ; Regs used in _processGestureData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7679  0030  0020               	movlb	0	; select bank0
  7680  0031  01B8               	clrf	processGestureData@u_first
  7681                           
  7682                           ;APDS9960.c: 656: uint8_t d_first = 0;
  7683  0032  01B9               	clrf	processGestureData@d_first
  7684                           
  7685                           ;APDS9960.c: 657: uint8_t l_first = 0;
  7686  0033  01BA               	clrf	processGestureData@l_first
  7687                           
  7688                           ;APDS9960.c: 658: uint8_t r_first = 0;
  7689  0034  01BB               	clrf	processGestureData@r_first
  7690                           
  7691                           ;APDS9960.c: 659: uint8_t u_last = 0;
  7692  0035  01B4               	clrf	processGestureData@u_last
  7693                           
  7694                           ;APDS9960.c: 660: uint8_t d_last = 0;
  7695  0036  01B5               	clrf	processGestureData@d_last
  7696                           
  7697                           ;APDS9960.c: 661: uint8_t l_last = 0;
  7698  0037  01B6               	clrf	processGestureData@l_last
  7699                           
  7700                           ;APDS9960.c: 662: uint8_t r_last = 0;
  7701  0038  01B7               	clrf	processGestureData@r_last
  7702                           
  7703                           ;APDS9960.c: 663: int ud_ratio_first;;APDS9960.c: 664: int lr_ratio_first;;APDS9960.c: 6
      +                          65: int ud_ratio_last;;APDS9960.c: 666: int lr_ratio_last;;APDS9960.c: 667: int ud_delta
      +                          ;;APDS9960.c: 668: int lr_delta;;APDS9960.c: 669: int i;;APDS9960.c: 672: if( gesture_da
      +                          ta_.total_gestures <= 4 ) {
  7704  0039  3005               	movlw	5
  7705  003A  0024               	movlb	4	; select bank4
  7706  003B  0261               	subwf	(_gesture_data_^(0+512)+65),w
  7707  003C  1803               	skipnc
  7708  003D  2840               	goto	i1l2831
  7709  003E                     i1l2827:	
  7710                           
  7711                           ;APDS9960.c: 673: return 0;
  7712  003E  3000               	movlw	0
  7713  003F  0008               	return
  7714  0040                     i1l2831:	
  7715                           
  7716                           ;APDS9960.c: 674: };APDS9960.c: 677: if( (gesture_data_.total_gestures <= 32) && (gestur
      +                          e_data_.total_gestures > 0) ) {
  7717  0040  3021               	movlw	33
  7718  0041  0261               	subwf	(_gesture_data_^(0+512)+65),w
  7719  0042  1803               	skipnc
  7720  0043  290A               	goto	i1l2881
  7721  0044  0861               	movf	(_gesture_data_^(0+512)+65),w
  7722  0045  1903               	btfsc	3,2
  7723  0046  290A               	goto	i1l2881
  7724                           
  7725                           ;APDS9960.c: 681: for( i = 0; i < gesture_data_.total_gestures; i++ ) {
  7726  0047  0020               	movlb	0	; select bank0
  7727  0048  01C0               	clrf	processGestureData@i
  7728  0049  01C1               	clrf	processGestureData@i+1
  7729  004A  284F               	goto	i1l609
  7730  004B                     i1l2847:	
  7731                           ;APDS9960.c: 691: break;
  7732                           
  7733  004B  3001               	movlw	1
  7734  004C  07C0               	addwf	processGestureData@i,f
  7735  004D  3000               	movlw	0
  7736  004E  3DC1               	addwfc	processGestureData@i+1,f
  7737  004F                     i1l609:	
  7738  004F  0841               	movf	processGestureData@i+1,w
  7739  0050  3A80               	xorlw	128
  7740  0051  00FB               	movwf	??_processGestureData
  7741  0052  3080               	movlw	128
  7742  0053  027B               	subwf	??_processGestureData,w
  7743  0054  1D03               	skipz
  7744  0055  285A               	goto	u200_25
  7745  0056  0024               	movlb	4	; select bank4
  7746  0057  0861               	movf	(_gesture_data_^(0+512)+65),w
  7747  0058  0020               	movlb	0	; select bank0
  7748  0059  0240               	subwf	processGestureData@i,w
  7749  005A                     u200_25:	
  7750  005A  1803               	btfsc	3,0
  7751  005B  28A5               	goto	i1l2849
  7752                           
  7753                           ;APDS9960.c: 682: if( (gesture_data_.u_data[i] > 10) &&;APDS9960.c: 683: (gesture_data_.
      +                          d_data[i] > 10) &&;APDS9960.c: 684: (gesture_data_.l_data[i] > 10) &&;APDS9960.c: 685: (
      +                          gesture_data_.r_data[i] > 10) ) {
  7754  005C  0020               	movlb	0	; select bank0
  7755  005D  0840               	movf	processGestureData@i,w
  7756  005E  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  7757  005F  0086               	movwf	6
  7758  0060  3002               	movlw	2	; select bank4/5
  7759  0061  0087               	movwf	7
  7760  0062  300B               	movlw	11
  7761  0063  0201               	subwf	1,w
  7762  0064  1C03               	skipc
  7763  0065  284B               	goto	i1l2847
  7764  0066  0840               	movf	processGestureData@i,w
  7765  0067  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  7766  0068  0086               	movwf	6
  7767  0069  3002               	movlw	2	; select bank4/5
  7768  006A  0087               	movwf	7
  7769  006B  300B               	movlw	11
  7770  006C  0201               	subwf	1,w
  7771  006D  1C03               	skipc
  7772  006E  284B               	goto	i1l2847
  7773  006F  0840               	movf	processGestureData@i,w
  7774  0070  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  7775  0071  0086               	movwf	6
  7776  0072  3002               	movlw	2	; select bank4/5
  7777  0073  0087               	movwf	7
  7778  0074  300B               	movlw	11
  7779  0075  0201               	subwf	1,w
  7780  0076  1C03               	skipc
  7781  0077  284B               	goto	i1l2847
  7782  0078  0840               	movf	processGestureData@i,w
  7783  0079  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  7784  007A  0086               	movwf	6
  7785  007B  3002               	movlw	2	; select bank4/5
  7786  007C  0087               	movwf	7
  7787  007D  300B               	movlw	11
  7788  007E  0201               	subwf	1,w
  7789  007F  1C03               	skipc
  7790  0080  284B               	goto	i1l2847
  7791                           
  7792                           ;APDS9960.c: 687: u_first = gesture_data_.u_data[i];
  7793  0081  0840               	movf	processGestureData@i,w
  7794  0082  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  7795  0083  0086               	movwf	6
  7796  0084  3002               	movlw	2	; select bank4/5
  7797  0085  0087               	movwf	7
  7798  0086  0801               	movf	1,w
  7799  0087  00FB               	movwf	??_processGestureData
  7800  0088  087B               	movf	??_processGestureData,w
  7801  0089  00B8               	movwf	processGestureData@u_first
  7802                           
  7803                           ;APDS9960.c: 688: d_first = gesture_data_.d_data[i];
  7804  008A  0840               	movf	processGestureData@i,w
  7805  008B  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  7806  008C  0086               	movwf	6
  7807  008D  3002               	movlw	2	; select bank4/5
  7808  008E  0087               	movwf	7
  7809  008F  0801               	movf	1,w
  7810  0090  00FB               	movwf	??_processGestureData
  7811  0091  087B               	movf	??_processGestureData,w
  7812  0092  00B9               	movwf	processGestureData@d_first
  7813                           
  7814                           ;APDS9960.c: 689: l_first = gesture_data_.l_data[i];
  7815  0093  0840               	movf	processGestureData@i,w
  7816  0094  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  7817  0095  0086               	movwf	6
  7818  0096  3002               	movlw	2	; select bank4/5
  7819  0097  0087               	movwf	7
  7820  0098  0801               	movf	1,w
  7821  0099  00FB               	movwf	??_processGestureData
  7822  009A  087B               	movf	??_processGestureData,w
  7823  009B  00BA               	movwf	processGestureData@l_first
  7824                           
  7825                           ;APDS9960.c: 690: r_first = gesture_data_.r_data[i];
  7826  009C  0840               	movf	processGestureData@i,w
  7827  009D  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  7828  009E  0086               	movwf	6
  7829  009F  3002               	movlw	2	; select bank4/5
  7830  00A0  0087               	movwf	7
  7831  00A1  0801               	movf	1,w
  7832  00A2  00FB               	movwf	??_processGestureData
  7833  00A3  087B               	movf	??_processGestureData,w
  7834  00A4  00BB               	movwf	processGestureData@r_first
  7835  00A5                     i1l2849:	
  7836                           
  7837                           ;APDS9960.c: 692: };APDS9960.c: 693: };APDS9960.c: 696: if( (u_first == 0) || (d_first =
      +                          = 0) || (l_first == 0) || (r_first == 0) ) {
  7838  00A5  0020               	movlb	0	; select bank0
  7839  00A6  0838               	movf	processGestureData@u_first,w
  7840  00A7  1903               	btfsc	3,2
  7841  00A8  283E               	goto	i1l2827
  7842  00A9  0839               	movf	processGestureData@d_first,w
  7843  00AA  1903               	btfsc	3,2
  7844  00AB  283E               	goto	i1l2827
  7845  00AC  083A               	movf	processGestureData@l_first,w
  7846  00AD  1903               	btfsc	3,2
  7847  00AE  283E               	goto	i1l2827
  7848  00AF  083B               	movf	processGestureData@r_first,w
  7849  00B0  1903               	btfsc	3,2
  7850  00B1  283E               	goto	i1l2827
  7851                           
  7852                           ;APDS9960.c: 700: };APDS9960.c: 702: for( i = gesture_data_.total_gestures - 1; i >= 0; 
      +                          i-- ) {
  7853  00B2  0024               	movlb	4	; select bank4
  7854  00B3  0861               	movf	(_gesture_data_^(0+512)+65),w
  7855  00B4  3EFF               	addlw	255
  7856  00B5  0020               	movlb	0	; select bank0
  7857  00B6  00C0               	movwf	processGestureData@i
  7858  00B7  30FF               	movlw	255
  7859  00B8  1803               	skipnc
  7860  00B9  3000               	movlw	0
  7861  00BA  00C1               	movwf	processGestureData@i+1
  7862                           
  7863                           ;APDS9960.c: 713: break;
  7864  00BB  28C0               	goto	i1l2863
  7865  00BC                     i1l2877:	
  7866  00BC  30FF               	movlw	255
  7867  00BD  07C0               	addwf	processGestureData@i,f
  7868  00BE  30FF               	movlw	255
  7869  00BF  3DC1               	addwfc	processGestureData@i+1,f
  7870  00C0                     i1l2863:	
  7871  00C0  1BC1               	btfsc	processGestureData@i+1,7
  7872  00C1  290A               	goto	i1l2881
  7873                           
  7874                           ;APDS9960.c: 704: if( (gesture_data_.u_data[i] > 10) &&;APDS9960.c: 705: (gesture_data_.
      +                          d_data[i] > 10) &&;APDS9960.c: 706: (gesture_data_.l_data[i] > 10) &&;APDS9960.c: 707: (
      +                          gesture_data_.r_data[i] > 10) ) {
  7875  00C2  0840               	movf	processGestureData@i,w
  7876  00C3  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  7877  00C4  0086               	movwf	6
  7878  00C5  3002               	movlw	2	; select bank4/5
  7879  00C6  0087               	movwf	7
  7880  00C7  300B               	movlw	11
  7881  00C8  0201               	subwf	1,w
  7882  00C9  1C03               	skipc
  7883  00CA  28BC               	goto	i1l2877
  7884  00CB  0840               	movf	processGestureData@i,w
  7885  00CC  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  7886  00CD  0086               	movwf	6
  7887  00CE  3002               	movlw	2	; select bank4/5
  7888  00CF  0087               	movwf	7
  7889  00D0  300B               	movlw	11
  7890  00D1  0201               	subwf	1,w
  7891  00D2  1C03               	skipc
  7892  00D3  28BC               	goto	i1l2877
  7893  00D4  0840               	movf	processGestureData@i,w
  7894  00D5  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  7895  00D6  0086               	movwf	6
  7896  00D7  3002               	movlw	2	; select bank4/5
  7897  00D8  0087               	movwf	7
  7898  00D9  300B               	movlw	11
  7899  00DA  0201               	subwf	1,w
  7900  00DB  1C03               	skipc
  7901  00DC  28BC               	goto	i1l2877
  7902  00DD  0840               	movf	processGestureData@i,w
  7903  00DE  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  7904  00DF  0086               	movwf	6
  7905  00E0  3002               	movlw	2	; select bank4/5
  7906  00E1  0087               	movwf	7
  7907  00E2  300B               	movlw	11
  7908  00E3  0201               	subwf	1,w
  7909  00E4  1C03               	skipc
  7910  00E5  28BC               	goto	i1l2877
  7911                           
  7912                           ;APDS9960.c: 709: u_last = gesture_data_.u_data[i];
  7913  00E6  0840               	movf	processGestureData@i,w
  7914  00E7  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  7915  00E8  0086               	movwf	6
  7916  00E9  3002               	movlw	2	; select bank4/5
  7917  00EA  0087               	movwf	7
  7918  00EB  0801               	movf	1,w
  7919  00EC  00FB               	movwf	??_processGestureData
  7920  00ED  087B               	movf	??_processGestureData,w
  7921  00EE  00B4               	movwf	processGestureData@u_last
  7922                           
  7923                           ;APDS9960.c: 710: d_last = gesture_data_.d_data[i];
  7924  00EF  0840               	movf	processGestureData@i,w
  7925  00F0  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  7926  00F1  0086               	movwf	6
  7927  00F2  3002               	movlw	2	; select bank4/5
  7928  00F3  0087               	movwf	7
  7929  00F4  0801               	movf	1,w
  7930  00F5  00FB               	movwf	??_processGestureData
  7931  00F6  087B               	movf	??_processGestureData,w
  7932  00F7  00B5               	movwf	processGestureData@d_last
  7933                           
  7934                           ;APDS9960.c: 711: l_last = gesture_data_.l_data[i];
  7935  00F8  0840               	movf	processGestureData@i,w
  7936  00F9  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  7937  00FA  0086               	movwf	6
  7938  00FB  3002               	movlw	2	; select bank4/5
  7939  00FC  0087               	movwf	7
  7940  00FD  0801               	movf	1,w
  7941  00FE  00FB               	movwf	??_processGestureData
  7942  00FF  087B               	movf	??_processGestureData,w
  7943  0100  00B6               	movwf	processGestureData@l_last
  7944                           
  7945                           ;APDS9960.c: 712: r_last = gesture_data_.r_data[i];
  7946  0101  0840               	movf	processGestureData@i,w
  7947  0102  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  7948  0103  0086               	movwf	6
  7949  0104  3002               	movlw	2	; select bank4/5
  7950  0105  0087               	movwf	7
  7951  0106  0801               	movf	1,w
  7952  0107  00FB               	movwf	??_processGestureData
  7953  0108  087B               	movf	??_processGestureData,w
  7954  0109  00B7               	movwf	processGestureData@r_last
  7955  010A                     i1l2881:	
  7956                           
  7957                           ;APDS9960.c: 714: };APDS9960.c: 715: };APDS9960.c: 716: };APDS9960.c: 719: ud_ratio_firs
      +                          t = ((u_first - d_first) * 100) / (u_first + d_first);
  7958  010A  0020               	movlb	0	; select bank0
  7959  010B  0838               	movf	processGestureData@u_first,w
  7960  010C  0739               	addwf	processGestureData@d_first,w
  7961  010D  00F6               	movwf	___awdiv@divisor
  7962  010E  01F7               	clrf	___awdiv@divisor+1
  7963  010F  0DF7               	rlf	___awdiv@divisor+1,f
  7964  0110  0839               	movf	processGestureData@d_first,w
  7965  0111  0238               	subwf	processGestureData@u_first,w
  7966  0112  00F0               	movwf	___wmul@multiplier
  7967  0113  01F1               	clrf	___wmul@multiplier+1
  7968  0114  1C03               	skipc
  7969  0115  03F1               	decf	___wmul@multiplier+1,f
  7970  0116  3064               	movlw	100
  7971  0117  00F2               	movwf	___wmul@multiplicand
  7972  0118  3000               	movlw	0
  7973  0119  00F3               	movwf	___wmul@multiplicand+1
  7974  011A  318D  255E  3180   	fcall	___wmul
  7975  011D  0871               	movf	?___wmul+1,w
  7976  011E  00F9               	movwf	___awdiv@dividend+1
  7977  011F  0870               	movf	?___wmul,w
  7978  0120  00F8               	movwf	___awdiv@dividend
  7979  0121  3186  26DE  3180   	fcall	___awdiv
  7980  0124  0877               	movf	?___awdiv+1,w
  7981  0125  0020               	movlb	0	; select bank0
  7982  0126  00A5               	movwf	processGestureData@ud_ratio_first+1
  7983  0127  0876               	movf	?___awdiv,w
  7984  0128  00A4               	movwf	processGestureData@ud_ratio_first
  7985                           
  7986                           ;APDS9960.c: 720: lr_ratio_first = ((l_first - r_first) * 100) / (l_first + r_first);
  7987  0129  083A               	movf	processGestureData@l_first,w
  7988  012A  073B               	addwf	processGestureData@r_first,w
  7989  012B  00F6               	movwf	___awdiv@divisor
  7990  012C  01F7               	clrf	___awdiv@divisor+1
  7991  012D  0DF7               	rlf	___awdiv@divisor+1,f
  7992  012E  083B               	movf	processGestureData@r_first,w
  7993  012F  023A               	subwf	processGestureData@l_first,w
  7994  0130  00F0               	movwf	___wmul@multiplier
  7995  0131  01F1               	clrf	___wmul@multiplier+1
  7996  0132  1C03               	skipc
  7997  0133  03F1               	decf	___wmul@multiplier+1,f
  7998  0134  3064               	movlw	100
  7999  0135  00F2               	movwf	___wmul@multiplicand
  8000  0136  3000               	movlw	0
  8001  0137  00F3               	movwf	___wmul@multiplicand+1
  8002  0138  318D  255E  3180   	fcall	___wmul
  8003  013B  0871               	movf	?___wmul+1,w
  8004  013C  00F9               	movwf	___awdiv@dividend+1
  8005  013D  0870               	movf	?___wmul,w
  8006  013E  00F8               	movwf	___awdiv@dividend
  8007  013F  3186  26DE  3180   	fcall	___awdiv
  8008  0142  0877               	movf	?___awdiv+1,w
  8009  0143  0020               	movlb	0	; select bank0
  8010  0144  00A7               	movwf	processGestureData@lr_ratio_first+1
  8011  0145  0876               	movf	?___awdiv,w
  8012  0146  00A6               	movwf	processGestureData@lr_ratio_first
  8013                           
  8014                           ;APDS9960.c: 721: ud_ratio_last = ((u_last - d_last) * 100) / (u_last + d_last);
  8015  0147  0834               	movf	processGestureData@u_last,w
  8016  0148  0735               	addwf	processGestureData@d_last,w
  8017  0149  00F6               	movwf	___awdiv@divisor
  8018  014A  01F7               	clrf	___awdiv@divisor+1
  8019  014B  0DF7               	rlf	___awdiv@divisor+1,f
  8020  014C  0835               	movf	processGestureData@d_last,w
  8021  014D  0234               	subwf	processGestureData@u_last,w
  8022  014E  00F0               	movwf	___wmul@multiplier
  8023  014F  01F1               	clrf	___wmul@multiplier+1
  8024  0150  1C03               	skipc
  8025  0151  03F1               	decf	___wmul@multiplier+1,f
  8026  0152  3064               	movlw	100
  8027  0153  00F2               	movwf	___wmul@multiplicand
  8028  0154  3000               	movlw	0
  8029  0155  00F3               	movwf	___wmul@multiplicand+1
  8030  0156  318D  255E  3180   	fcall	___wmul
  8031  0159  0871               	movf	?___wmul+1,w
  8032  015A  00F9               	movwf	___awdiv@dividend+1
  8033  015B  0870               	movf	?___wmul,w
  8034  015C  00F8               	movwf	___awdiv@dividend
  8035  015D  3186  26DE  3180   	fcall	___awdiv
  8036  0160  0877               	movf	?___awdiv+1,w
  8037  0161  0020               	movlb	0	; select bank0
  8038  0162  00A9               	movwf	processGestureData@ud_ratio_last+1
  8039  0163  0876               	movf	?___awdiv,w
  8040  0164  00A8               	movwf	processGestureData@ud_ratio_last
  8041                           
  8042                           ;APDS9960.c: 722: lr_ratio_last = ((l_last - r_last) * 100) / (l_last + r_last);
  8043  0165  0836               	movf	processGestureData@l_last,w
  8044  0166  0737               	addwf	processGestureData@r_last,w
  8045  0167  00F6               	movwf	___awdiv@divisor
  8046  0168  01F7               	clrf	___awdiv@divisor+1
  8047  0169  0DF7               	rlf	___awdiv@divisor+1,f
  8048  016A  0837               	movf	processGestureData@r_last,w
  8049  016B  0236               	subwf	processGestureData@l_last,w
  8050  016C  00F0               	movwf	___wmul@multiplier
  8051  016D  01F1               	clrf	___wmul@multiplier+1
  8052  016E  1C03               	skipc
  8053  016F  03F1               	decf	___wmul@multiplier+1,f
  8054  0170  3064               	movlw	100
  8055  0171  00F2               	movwf	___wmul@multiplicand
  8056  0172  3000               	movlw	0
  8057  0173  00F3               	movwf	___wmul@multiplicand+1
  8058  0174  318D  255E  3180   	fcall	___wmul
  8059  0177  0871               	movf	?___wmul+1,w
  8060  0178  00F9               	movwf	___awdiv@dividend+1
  8061  0179  0870               	movf	?___wmul,w
  8062  017A  00F8               	movwf	___awdiv@dividend
  8063  017B  3186  26DE  3180   	fcall	___awdiv
  8064  017E  0877               	movf	?___awdiv+1,w
  8065  017F  0020               	movlb	0	; select bank0
  8066  0180  00AB               	movwf	processGestureData@lr_ratio_last+1
  8067  0181  0876               	movf	?___awdiv,w
  8068  0182  00AA               	movwf	processGestureData@lr_ratio_last
  8069                           
  8070                           ;APDS9960.c: 725: ud_delta = ud_ratio_last - ud_ratio_first;
  8071  0183  0824               	movf	processGestureData@ud_ratio_first,w
  8072  0184  0228               	subwf	processGestureData@ud_ratio_last,w
  8073  0185  00BC               	movwf	processGestureData@ud_delta
  8074  0186  0825               	movf	processGestureData@ud_ratio_first+1,w
  8075  0187  3B29               	subwfb	processGestureData@ud_ratio_last+1,w
  8076  0188  00BD               	movwf	processGestureData@ud_delta+1
  8077                           
  8078                           ;APDS9960.c: 726: lr_delta = lr_ratio_last - lr_ratio_first;
  8079  0189  0826               	movf	processGestureData@lr_ratio_first,w
  8080  018A  022A               	subwf	processGestureData@lr_ratio_last,w
  8081  018B  00BE               	movwf	processGestureData@lr_delta
  8082  018C  0827               	movf	processGestureData@lr_ratio_first+1,w
  8083  018D  3B2B               	subwfb	processGestureData@lr_ratio_last+1,w
  8084  018E  00BF               	movwf	processGestureData@lr_delta+1
  8085                           
  8086                           ;APDS9960.c: 729: gesture_ud_delta_ += ud_delta;
  8087  018F  083C               	movf	processGestureData@ud_delta,w
  8088  0190  07E2               	addwf	_gesture_ud_delta_,f
  8089  0191  083D               	movf	processGestureData@ud_delta+1,w
  8090  0192  3DE3               	addwfc	_gesture_ud_delta_+1,f
  8091                           
  8092                           ;APDS9960.c: 730: gesture_lr_delta_ += lr_delta;
  8093  0193  083E               	movf	processGestureData@lr_delta,w
  8094  0194  07E0               	addwf	_gesture_lr_delta_,f
  8095  0195  083F               	movf	processGestureData@lr_delta+1,w
  8096  0196  3DE1               	addwfc	_gesture_lr_delta_+1,f
  8097                           
  8098                           ;APDS9960.c: 733: if( gesture_ud_delta_ >= 50 ) {
  8099  0197  0863               	movf	_gesture_ud_delta_+1,w
  8100  0198  3A80               	xorlw	128
  8101  0199  00FB               	movwf	??_processGestureData
  8102  019A  3080               	movlw	128
  8103  019B  027B               	subwf	??_processGestureData,w
  8104  019C  1D03               	skipz
  8105  019D  29A0               	goto	u210_25
  8106  019E  3032               	movlw	50
  8107  019F  0262               	subwf	_gesture_ud_delta_,w
  8108  01A0                     u210_25:	
  8109  01A0  1C03               	skipc
  8110  01A1  29A7               	goto	i1l2895
  8111                           
  8112                           ;APDS9960.c: 734: gesture_ud_count_ = 1;
  8113  01A2  3001               	movlw	1
  8114  01A3  0020               	movlb	0	; select bank0
  8115  01A4  00DE               	movwf	_gesture_ud_count_
  8116  01A5  3000               	movlw	0
  8117  01A6  29B7               	goto	L3
  8118  01A7                     i1l2895:	
  8119                           ;APDS9960.c: 735: } else if( gesture_ud_delta_ <= -50 ) {
  8120                           
  8121  01A7  0020               	movlb	0	; select bank0
  8122  01A8  0863               	movf	_gesture_ud_delta_+1,w
  8123  01A9  3A80               	xorlw	128
  8124  01AA  00FB               	movwf	??_processGestureData
  8125  01AB  307F               	movlw	127
  8126  01AC  027B               	subwf	??_processGestureData,w
  8127  01AD  1D03               	skipz
  8128  01AE  29B1               	goto	u211_25
  8129  01AF  30CF               	movlw	207
  8130  01B0  0262               	subwf	_gesture_ud_delta_,w
  8131  01B1                     u211_25:	
  8132  01B1  1803               	skipnc
  8133  01B2  29B9               	goto	i1l2899
  8134                           
  8135                           ;APDS9960.c: 736: gesture_ud_count_ = -1;
  8136  01B3  30FF               	movlw	255
  8137  01B4  0020               	movlb	0	; select bank0
  8138  01B5  00DE               	movwf	_gesture_ud_count_
  8139  01B6  30FF               	movlw	255
  8140  01B7                     L3:	
  8141  01B7  00DF               	movwf	_gesture_ud_count_+1
  8142                           
  8143                           ;APDS9960.c: 737: } else {
  8144  01B8  29BC               	goto	i1l2901
  8145  01B9                     i1l2899:	
  8146                           
  8147                           ;APDS9960.c: 738: gesture_ud_count_ = 0;
  8148  01B9  0020               	movlb	0	; select bank0
  8149  01BA  01DE               	clrf	_gesture_ud_count_
  8150  01BB  01DF               	clrf	_gesture_ud_count_+1
  8151  01BC                     i1l2901:	
  8152                           
  8153                           ;APDS9960.c: 739: };APDS9960.c: 742: if( gesture_lr_delta_ >= 50 ) {
  8154  01BC  0861               	movf	_gesture_lr_delta_+1,w
  8155  01BD  3A80               	xorlw	128
  8156  01BE  00FB               	movwf	??_processGestureData
  8157  01BF  3080               	movlw	128
  8158  01C0  027B               	subwf	??_processGestureData,w
  8159  01C1  1D03               	skipz
  8160  01C2  29C5               	goto	u212_25
  8161  01C3  3032               	movlw	50
  8162  01C4  0260               	subwf	_gesture_lr_delta_,w
  8163  01C5                     u212_25:	
  8164  01C5  1C03               	skipc
  8165  01C6  29CC               	goto	i1l2905
  8166                           
  8167                           ;APDS9960.c: 743: gesture_lr_count_ = 1;
  8168  01C7  3001               	movlw	1
  8169  01C8  0020               	movlb	0	; select bank0
  8170  01C9  00DC               	movwf	_gesture_lr_count_
  8171  01CA  3000               	movlw	0
  8172  01CB  29DC               	goto	L4
  8173  01CC                     i1l2905:	
  8174                           ;APDS9960.c: 744: } else if( gesture_lr_delta_ <= -50 ) {
  8175                           
  8176  01CC  0020               	movlb	0	; select bank0
  8177  01CD  0861               	movf	_gesture_lr_delta_+1,w
  8178  01CE  3A80               	xorlw	128
  8179  01CF  00FB               	movwf	??_processGestureData
  8180  01D0  307F               	movlw	127
  8181  01D1  027B               	subwf	??_processGestureData,w
  8182  01D2  1D03               	skipz
  8183  01D3  29D6               	goto	u213_25
  8184  01D4  30CF               	movlw	207
  8185  01D5  0260               	subwf	_gesture_lr_delta_,w
  8186  01D6                     u213_25:	
  8187  01D6  1803               	skipnc
  8188  01D7  29DE               	goto	i1l2909
  8189                           
  8190                           ;APDS9960.c: 745: gesture_lr_count_ = -1;
  8191  01D8  30FF               	movlw	255
  8192  01D9  0020               	movlb	0	; select bank0
  8193  01DA  00DC               	movwf	_gesture_lr_count_
  8194  01DB  30FF               	movlw	255
  8195  01DC                     L4:	
  8196  01DC  00DD               	movwf	_gesture_lr_count_+1
  8197                           
  8198                           ;APDS9960.c: 746: } else {
  8199  01DD  29E1               	goto	i1l2911
  8200  01DE                     i1l2909:	
  8201                           
  8202                           ;APDS9960.c: 747: gesture_lr_count_ = 0;
  8203  01DE  0020               	movlb	0	; select bank0
  8204  01DF  01DC               	clrf	_gesture_lr_count_
  8205  01E0  01DD               	clrf	_gesture_lr_count_+1
  8206  01E1                     i1l2911:	
  8207                           
  8208                           ;APDS9960.c: 748: };APDS9960.c: 751: if( (gesture_ud_count_ == 0) && (gesture_lr_count_ 
      +                          == 0) ) {
  8209  01E1  085E               	movf	_gesture_ud_count_,w
  8210  01E2  045F               	iorwf	_gesture_ud_count_+1,w
  8211  01E3  1D03               	btfss	3,2
  8212  01E4  2A84               	goto	i1l2955
  8213  01E5  085C               	movf	_gesture_lr_count_,w
  8214  01E6  045D               	iorwf	_gesture_lr_count_+1,w
  8215  01E7  1D03               	btfss	3,2
  8216  01E8  2A84               	goto	i1l2955
  8217                           
  8218                           ;APDS9960.c: 752: if( (((ud_delta) > 0 ? (ud_delta) : -(ud_delta)) < 20) && (((lr_delta)
      +                           > 0 ? (lr_delta) : -(lr_delta)) < 20) ) {
  8219  01E9  083D               	movf	processGestureData@ud_delta+1,w
  8220  01EA  3A80               	xorlw	128
  8221  01EB  00FB               	movwf	??_processGestureData
  8222  01EC  3080               	movlw	128
  8223  01ED  027B               	subwf	??_processGestureData,w
  8224  01EE  1D03               	skipz
  8225  01EF  29F2               	goto	u216_25
  8226  01F0  3001               	movlw	1
  8227  01F1  023C               	subwf	processGestureData@ud_delta,w
  8228  01F2                     u216_25:	
  8229  01F2  1803               	skipnc
  8230  01F3  2A01               	goto	i1l2919
  8231  01F4  0020               	movlb	0	; select bank0
  8232  01F5  093C               	comf	processGestureData@ud_delta,w
  8233  01F6  00FB               	movwf	??_processGestureData
  8234  01F7  093D               	comf	processGestureData@ud_delta+1,w
  8235  01F8  00FC               	movwf	??_processGestureData+1
  8236  01F9  0AFB               	incf	??_processGestureData,f
  8237  01FA  1903               	skipnz
  8238  01FB  0AFC               	incf	??_processGestureData+1,f
  8239  01FC  087B               	movf	??_processGestureData,w
  8240  01FD  00AC               	movwf	_processGestureData$778
  8241  01FE  087C               	movf	??_processGestureData+1,w
  8242  01FF  00AD               	movwf	_processGestureData$778+1
  8243  0200  2A06               	goto	i1l632
  8244  0201                     i1l2919:	
  8245  0201  0020               	movlb	0	; select bank0
  8246  0202  083D               	movf	processGestureData@ud_delta+1,w
  8247  0203  00AD               	movwf	_processGestureData$778+1
  8248  0204  083C               	movf	processGestureData@ud_delta,w
  8249  0205  00AC               	movwf	_processGestureData$778
  8250  0206                     i1l632:	
  8251  0206  082D               	movf	_processGestureData$778+1,w
  8252  0207  3A80               	xorlw	128
  8253  0208  00FB               	movwf	??_processGestureData
  8254  0209  3080               	movlw	128
  8255  020A  027B               	subwf	??_processGestureData,w
  8256  020B  1D03               	skipz
  8257  020C  2A0F               	goto	u217_25
  8258  020D  3014               	movlw	20
  8259  020E  022C               	subwf	_processGestureData$778,w
  8260  020F                     u217_25:	
  8261  020F  1803               	skipnc
  8262  0210  283E               	goto	i1l2827
  8263  0211  0020               	movlb	0	; select bank0
  8264  0212  083F               	movf	processGestureData@lr_delta+1,w
  8265  0213  3A80               	xorlw	128
  8266  0214  00FB               	movwf	??_processGestureData
  8267  0215  3080               	movlw	128
  8268  0216  027B               	subwf	??_processGestureData,w
  8269  0217  1D03               	skipz
  8270  0218  2A1B               	goto	u218_25
  8271  0219  3001               	movlw	1
  8272  021A  023E               	subwf	processGestureData@lr_delta,w
  8273  021B                     u218_25:	
  8274  021B  1803               	skipnc
  8275  021C  2A2A               	goto	i1l2925
  8276  021D  0020               	movlb	0	; select bank0
  8277  021E  093E               	comf	processGestureData@lr_delta,w
  8278  021F  00FB               	movwf	??_processGestureData
  8279  0220  093F               	comf	processGestureData@lr_delta+1,w
  8280  0221  00FC               	movwf	??_processGestureData+1
  8281  0222  0AFB               	incf	??_processGestureData,f
  8282  0223  1903               	skipnz
  8283  0224  0AFC               	incf	??_processGestureData+1,f
  8284  0225  087B               	movf	??_processGestureData,w
  8285  0226  00AE               	movwf	_processGestureData$779
  8286  0227  087C               	movf	??_processGestureData+1,w
  8287  0228  00AF               	movwf	_processGestureData$779+1
  8288  0229  2A2F               	goto	i1l636
  8289  022A                     i1l2925:	
  8290  022A  0020               	movlb	0	; select bank0
  8291  022B  083F               	movf	processGestureData@lr_delta+1,w
  8292  022C  00AF               	movwf	_processGestureData$779+1
  8293  022D  083E               	movf	processGestureData@lr_delta,w
  8294  022E  00AE               	movwf	_processGestureData$779
  8295  022F                     i1l636:	
  8296  022F  082F               	movf	_processGestureData$779+1,w
  8297  0230  3A80               	xorlw	128
  8298  0231  00FB               	movwf	??_processGestureData
  8299  0232  3080               	movlw	128
  8300  0233  027B               	subwf	??_processGestureData,w
  8301  0234  1D03               	skipz
  8302  0235  2A38               	goto	u219_25
  8303  0236  3014               	movlw	20
  8304  0237  022E               	subwf	_processGestureData$779,w
  8305  0238                     u219_25:	
  8306  0238  1803               	skipnc
  8307  0239  283E               	goto	i1l2827
  8308                           
  8309                           ;APDS9960.c: 755: if( (ud_delta == 0) && (lr_delta == 0) ) {
  8310  023A  0020               	movlb	0	; select bank0
  8311  023B  083C               	movf	processGestureData@ud_delta,w
  8312  023C  043D               	iorwf	processGestureData@ud_delta+1,w
  8313  023D  1D03               	btfss	3,2
  8314  023E  2A48               	goto	i1l2933
  8315  023F  083E               	movf	processGestureData@lr_delta,w
  8316  0240  043F               	iorwf	processGestureData@lr_delta+1,w
  8317  0241  1D03               	btfss	3,2
  8318  0242  2A48               	goto	i1l2933
  8319                           
  8320                           ;APDS9960.c: 756: gesture_near_count_++;
  8321  0243  3001               	movlw	1
  8322  0244  07DA               	addwf	_gesture_near_count_,f
  8323  0245  3000               	movlw	0
  8324  0246  3DDB               	addwfc	_gesture_near_count_+1,f
  8325                           
  8326                           ;APDS9960.c: 757: } else if( (ud_delta != 0) || (lr_delta != 0) ) {
  8327  0247  2A54               	goto	i1l638
  8328  0248                     i1l2933:	
  8329  0248  083C               	movf	processGestureData@ud_delta,w
  8330  0249  043D               	iorwf	processGestureData@ud_delta+1,w
  8331  024A  1D03               	btfss	3,2
  8332  024B  2A50               	goto	i1l2937
  8333  024C  083E               	movf	processGestureData@lr_delta,w
  8334  024D  043F               	iorwf	processGestureData@lr_delta+1,w
  8335  024E  1903               	btfsc	3,2
  8336  024F  2A54               	goto	i1l638
  8337  0250                     i1l2937:	
  8338                           
  8339                           ;APDS9960.c: 758: gesture_far_count_++;
  8340  0250  3001               	movlw	1
  8341  0251  07D8               	addwf	_gesture_far_count_,f
  8342  0252  3000               	movlw	0
  8343  0253  3DD9               	addwfc	_gesture_far_count_+1,f
  8344  0254                     i1l638:	
  8345                           
  8346                           ;APDS9960.c: 759: };APDS9960.c: 761: if( (gesture_near_count_ >= 10) && (gesture_far_cou
      +                          nt_ >= 2) ) {
  8347  0254  085B               	movf	_gesture_near_count_+1,w
  8348  0255  3A80               	xorlw	128
  8349  0256  00FB               	movwf	??_processGestureData
  8350  0257  3080               	movlw	128
  8351  0258  027B               	subwf	??_processGestureData,w
  8352  0259  1D03               	skipz
  8353  025A  2A5D               	goto	u224_25
  8354  025B  300A               	movlw	10
  8355  025C  025A               	subwf	_gesture_near_count_,w
  8356  025D                     u224_25:	
  8357  025D  1C03               	skipc
  8358  025E  283E               	goto	i1l2827
  8359  025F  0020               	movlb	0	; select bank0
  8360  0260  0859               	movf	_gesture_far_count_+1,w
  8361  0261  3A80               	xorlw	128
  8362  0262  00FB               	movwf	??_processGestureData
  8363  0263  3080               	movlw	128
  8364  0264  027B               	subwf	??_processGestureData,w
  8365  0265  1D03               	skipz
  8366  0266  2A69               	goto	u225_25
  8367  0267  3002               	movlw	2
  8368  0268  0258               	subwf	_gesture_far_count_,w
  8369  0269                     u225_25:	
  8370  0269  1C03               	skipc
  8371  026A  283E               	goto	i1l2827
  8372                           
  8373                           ;APDS9960.c: 762: if( (ud_delta == 0) && (lr_delta == 0) ) {
  8374  026B  0020               	movlb	0	; select bank0
  8375  026C  083C               	movf	processGestureData@ud_delta,w
  8376  026D  043D               	iorwf	processGestureData@ud_delta+1,w
  8377  026E  1D03               	btfss	3,2
  8378  026F  2A76               	goto	i1l2947
  8379  0270  083E               	movf	processGestureData@lr_delta,w
  8380  0271  043F               	iorwf	processGestureData@lr_delta+1,w
  8381  0272  1D03               	btfss	3,2
  8382  0273  2A76               	goto	i1l2947
  8383                           
  8384                           ;APDS9960.c: 763: gesture_state_ = NEAR_STATE;
  8385  0274  3001               	movlw	1
  8386  0275  2A7F               	goto	L5
  8387  0276                     i1l2947:	
  8388                           ;APDS9960.c: 764: } else if( (ud_delta != 0) && (lr_delta != 0) ) {
  8389                           
  8390  0276  083C               	movf	processGestureData@ud_delta,w
  8391  0277  043D               	iorwf	processGestureData@ud_delta+1,w
  8392  0278  1903               	btfsc	3,2
  8393  0279  2A82               	goto	i1l644
  8394  027A  083E               	movf	processGestureData@lr_delta,w
  8395  027B  043F               	iorwf	processGestureData@lr_delta+1,w
  8396  027C  1903               	btfsc	3,2
  8397  027D  2A82               	goto	i1l644
  8398                           
  8399                           ;APDS9960.c: 765: gesture_state_ = FAR_STATE;
  8400  027E  3002               	movlw	2
  8401  027F                     L5:	
  8402  027F  00D6               	movwf	_gesture_state_
  8403  0280  3000               	movlw	0
  8404  0281  00D7               	movwf	_gesture_state_+1
  8405  0282                     i1l644:	
  8406                           
  8407                           ;APDS9960.c: 766: };APDS9960.c: 767: return 1;
  8408  0282  3001               	movlw	1
  8409  0283  0008               	return
  8410  0284                     i1l2955:	
  8411                           
  8412                           ;APDS9960.c: 771: if( (((ud_delta) > 0 ? (ud_delta) : -(ud_delta)) < 20) && (((lr_delta)
      +                           > 0 ? (lr_delta) : -(lr_delta)) < 20) ) {
  8413  0284  083D               	movf	processGestureData@ud_delta+1,w
  8414  0285  3A80               	xorlw	128
  8415  0286  00FB               	movwf	??_processGestureData
  8416  0287  3080               	movlw	128
  8417  0288  027B               	subwf	??_processGestureData,w
  8418  0289  1D03               	skipz
  8419  028A  2A8D               	goto	u230_25
  8420  028B  3001               	movlw	1
  8421  028C  023C               	subwf	processGestureData@ud_delta,w
  8422  028D                     u230_25:	
  8423  028D  1803               	skipnc
  8424  028E  2A9C               	goto	i1l2959
  8425  028F  0020               	movlb	0	; select bank0
  8426  0290  093C               	comf	processGestureData@ud_delta,w
  8427  0291  00FB               	movwf	??_processGestureData
  8428  0292  093D               	comf	processGestureData@ud_delta+1,w
  8429  0293  00FC               	movwf	??_processGestureData+1
  8430  0294  0AFB               	incf	??_processGestureData,f
  8431  0295  1903               	skipnz
  8432  0296  0AFC               	incf	??_processGestureData+1,f
  8433  0297  087B               	movf	??_processGestureData,w
  8434  0298  00B0               	movwf	_processGestureData$780
  8435  0299  087C               	movf	??_processGestureData+1,w
  8436  029A  00B1               	movwf	_processGestureData$780+1
  8437  029B  2AA1               	goto	i1l651
  8438  029C                     i1l2959:	
  8439  029C  0020               	movlb	0	; select bank0
  8440  029D  083D               	movf	processGestureData@ud_delta+1,w
  8441  029E  00B1               	movwf	_processGestureData$780+1
  8442  029F  083C               	movf	processGestureData@ud_delta,w
  8443  02A0  00B0               	movwf	_processGestureData$780
  8444  02A1                     i1l651:	
  8445  02A1  0831               	movf	_processGestureData$780+1,w
  8446  02A2  3A80               	xorlw	128
  8447  02A3  00FB               	movwf	??_processGestureData
  8448  02A4  3080               	movlw	128
  8449  02A5  027B               	subwf	??_processGestureData,w
  8450  02A6  1D03               	skipz
  8451  02A7  2AAA               	goto	u231_25
  8452  02A8  3014               	movlw	20
  8453  02A9  0230               	subwf	_processGestureData$780,w
  8454  02AA                     u231_25:	
  8455  02AA  1803               	skipnc
  8456  02AB  283E               	goto	i1l2827
  8457  02AC  0020               	movlb	0	; select bank0
  8458  02AD  083F               	movf	processGestureData@lr_delta+1,w
  8459  02AE  3A80               	xorlw	128
  8460  02AF  00FB               	movwf	??_processGestureData
  8461  02B0  3080               	movlw	128
  8462  02B1  027B               	subwf	??_processGestureData,w
  8463  02B2  1D03               	skipz
  8464  02B3  2AB6               	goto	u232_25
  8465  02B4  3001               	movlw	1
  8466  02B5  023E               	subwf	processGestureData@lr_delta,w
  8467  02B6                     u232_25:	
  8468  02B6  1803               	skipnc
  8469  02B7  2AC5               	goto	i1l2965
  8470  02B8  0020               	movlb	0	; select bank0
  8471  02B9  093E               	comf	processGestureData@lr_delta,w
  8472  02BA  00FB               	movwf	??_processGestureData
  8473  02BB  093F               	comf	processGestureData@lr_delta+1,w
  8474  02BC  00FC               	movwf	??_processGestureData+1
  8475  02BD  0AFB               	incf	??_processGestureData,f
  8476  02BE  1903               	skipnz
  8477  02BF  0AFC               	incf	??_processGestureData+1,f
  8478  02C0  087B               	movf	??_processGestureData,w
  8479  02C1  00B2               	movwf	_processGestureData$781
  8480  02C2  087C               	movf	??_processGestureData+1,w
  8481  02C3  00B3               	movwf	_processGestureData$781+1
  8482  02C4  2ACA               	goto	i1l655
  8483  02C5                     i1l2965:	
  8484  02C5  0020               	movlb	0	; select bank0
  8485  02C6  083F               	movf	processGestureData@lr_delta+1,w
  8486  02C7  00B3               	movwf	_processGestureData$781+1
  8487  02C8  083E               	movf	processGestureData@lr_delta,w
  8488  02C9  00B2               	movwf	_processGestureData$781
  8489  02CA                     i1l655:	
  8490  02CA  0833               	movf	_processGestureData$781+1,w
  8491  02CB  3A80               	xorlw	128
  8492  02CC  00FB               	movwf	??_processGestureData
  8493  02CD  3080               	movlw	128
  8494  02CE  027B               	subwf	??_processGestureData,w
  8495  02CF  1D03               	skipz
  8496  02D0  2AD3               	goto	u233_25
  8497  02D1  3014               	movlw	20
  8498  02D2  0232               	subwf	_processGestureData$781,w
  8499  02D3                     u233_25:	
  8500  02D3  1803               	skipnc
  8501  02D4  283E               	goto	i1l2827
  8502                           
  8503                           ;APDS9960.c: 774: if( (ud_delta == 0) && (lr_delta == 0) ) {
  8504  02D5  0020               	movlb	0	; select bank0
  8505  02D6  083C               	movf	processGestureData@ud_delta,w
  8506  02D7  043D               	iorwf	processGestureData@ud_delta+1,w
  8507  02D8  1D03               	btfss	3,2
  8508  02D9  2AE2               	goto	i1l656
  8509  02DA  083E               	movf	processGestureData@lr_delta,w
  8510  02DB  043F               	iorwf	processGestureData@lr_delta+1,w
  8511  02DC  1D03               	btfss	3,2
  8512  02DD  2AE2               	goto	i1l656
  8513                           
  8514                           ;APDS9960.c: 775: gesture_near_count_++;
  8515  02DE  3001               	movlw	1
  8516  02DF  07DA               	addwf	_gesture_near_count_,f
  8517  02E0  3000               	movlw	0
  8518  02E1  3DDB               	addwfc	_gesture_near_count_+1,f
  8519  02E2                     i1l656:	
  8520                           
  8521                           ;APDS9960.c: 776: };APDS9960.c: 778: if( gesture_near_count_ >= 10 ) {
  8522  02E2  085B               	movf	_gesture_near_count_+1,w
  8523  02E3  3A80               	xorlw	128
  8524  02E4  00FB               	movwf	??_processGestureData
  8525  02E5  3080               	movlw	128
  8526  02E6  027B               	subwf	??_processGestureData,w
  8527  02E7  1D03               	skipz
  8528  02E8  2AEB               	goto	u236_25
  8529  02E9  300A               	movlw	10
  8530  02EA  025A               	subwf	_gesture_near_count_,w
  8531  02EB                     u236_25:	
  8532  02EB  1C03               	skipc
  8533  02EC  283E               	goto	i1l2827
  8534                           
  8535                           ;APDS9960.c: 779: gesture_ud_count_ = 0;
  8536  02ED  0020               	movlb	0	; select bank0
  8537  02EE  01DE               	clrf	_gesture_ud_count_
  8538  02EF  01DF               	clrf	_gesture_ud_count_+1
  8539                           
  8540                           ;APDS9960.c: 780: gesture_lr_count_ = 0;
  8541  02F0  01DC               	clrf	_gesture_lr_count_
  8542  02F1  01DD               	clrf	_gesture_lr_count_+1
  8543                           
  8544                           ;APDS9960.c: 781: gesture_ud_delta_ = 0;
  8545  02F2  01E2               	clrf	_gesture_ud_delta_
  8546  02F3  01E3               	clrf	_gesture_ud_delta_+1
  8547                           
  8548                           ;APDS9960.c: 782: gesture_lr_delta_ = 0;
  8549  02F4  01E0               	clrf	_gesture_lr_delta_
  8550  02F5  01E1               	clrf	_gesture_lr_delta_+1
  8551  02F6  283E               	goto	i1l2827
  8552  02F7                     __end_of_processGestureData:	
  8553                           
  8554                           	psect	text48
  8555  0D5E                     __ptext48:	
  8556 ;; *************** function ___wmul *****************
  8557 ;; Defined at:
  8558 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\Umul16.c"
  8559 ;; Parameters:    Size  Location     Type
  8560 ;;  multiplier      2    0[COMMON] unsigned int 
  8561 ;;  multiplicand    2    2[COMMON] unsigned int 
  8562 ;; Auto vars:     Size  Location     Type
  8563 ;;  product         2    4[COMMON] unsigned int 
  8564 ;; Return value:  Size  Location     Type
  8565 ;;                  2    0[COMMON] unsigned int 
  8566 ;; Registers used:
  8567 ;;		wreg, status,2, status,0
  8568 ;; Tracked objects:
  8569 ;;		On entry : 0/0
  8570 ;;		On exit  : 0/0
  8571 ;;		Unchanged: 0/0
  8572 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8573 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8574 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8575 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8576 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8577 ;;Total ram usage:        6 bytes
  8578 ;; Hardware stack levels used:    1
  8579 ;; This function calls:
  8580 ;;		Nothing
  8581 ;; This function is called by:
  8582 ;;		_processGestureData
  8583 ;; This function uses a non-reentrant model
  8584 ;;
  8585                           
  8586                           
  8587                           ;psect for function ___wmul
  8588  0D5E                     ___wmul:	
  8589                           
  8590                           ;incstack = 0
  8591                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  8592  0D5E  01F4               	clrf	___wmul@product
  8593  0D5F  01F5               	clrf	___wmul@product+1
  8594  0D60                     i1l2671:	
  8595  0D60  1C70               	btfss	___wmul@multiplier,0
  8596  0D61  2D66               	goto	i1l883
  8597  0D62  0872               	movf	___wmul@multiplicand,w
  8598  0D63  07F4               	addwf	___wmul@product,f
  8599  0D64  0873               	movf	___wmul@multiplicand+1,w
  8600  0D65  3DF5               	addwfc	___wmul@product+1,f
  8601  0D66                     i1l883:	
  8602  0D66  3001               	movlw	1
  8603  0D67                     u170_25:	
  8604  0D67  35F2               	lslf	___wmul@multiplicand,f
  8605  0D68  0DF3               	rlf	___wmul@multiplicand+1,f
  8606  0D69  0B89               	decfsz	9,f
  8607  0D6A  2D67               	goto	u170_25
  8608  0D6B  3001               	movlw	1
  8609  0D6C                     u171_25:	
  8610  0D6C  36F1               	lsrf	___wmul@multiplier+1,f
  8611  0D6D  0CF0               	rrf	___wmul@multiplier,f
  8612  0D6E  0B89               	decfsz	9,f
  8613  0D6F  2D6C               	goto	u171_25
  8614  0D70  0870               	movf	___wmul@multiplier,w
  8615  0D71  0471               	iorwf	___wmul@multiplier+1,w
  8616  0D72  1D03               	btfss	3,2
  8617  0D73  2D60               	goto	i1l2671
  8618  0D74  0875               	movf	___wmul@product+1,w
  8619  0D75  00F1               	movwf	?___wmul+1
  8620  0D76  0874               	movf	___wmul@product,w
  8621  0D77  00F0               	movwf	?___wmul
  8622  0D78  0008               	return
  8623  0D79                     __end_of___wmul:	
  8624                           
  8625                           	psect	text49
  8626  06DE                     __ptext49:	
  8627 ;; *************** function ___awdiv *****************
  8628 ;; Defined at:
  8629 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c90\common\awdiv.c"
  8630 ;; Parameters:    Size  Location     Type
  8631 ;;  divisor         2    6[COMMON] int 
  8632 ;;  dividend        2    8[COMMON] int 
  8633 ;; Auto vars:     Size  Location     Type
  8634 ;;  quotient        2    2[BANK0 ] int 
  8635 ;;  sign            1    1[BANK0 ] unsigned char 
  8636 ;;  counter         1    0[BANK0 ] unsigned char 
  8637 ;; Return value:  Size  Location     Type
  8638 ;;                  2    6[COMMON] int 
  8639 ;; Registers used:
  8640 ;;		wreg, status,2, status,0
  8641 ;; Tracked objects:
  8642 ;;		On entry : 0/0
  8643 ;;		On exit  : 0/0
  8644 ;;		Unchanged: 0/0
  8645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8646 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8647 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8648 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8649 ;;      Totals:         5       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8650 ;;Total ram usage:        9 bytes
  8651 ;; Hardware stack levels used:    1
  8652 ;; This function calls:
  8653 ;;		Nothing
  8654 ;; This function is called by:
  8655 ;;		_processGestureData
  8656 ;; This function uses a non-reentrant model
  8657 ;;
  8658                           
  8659                           
  8660                           ;psect for function ___awdiv
  8661  06DE                     ___awdiv:	
  8662                           
  8663                           ;incstack = 0
  8664                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  8665  06DE  0020               	movlb	0	; select bank0
  8666  06DF  01A1               	clrf	___awdiv@sign
  8667  06E0  1FF7               	btfss	___awdiv@divisor+1,7
  8668  06E1  2EE9               	goto	i1l2691
  8669  06E2  09F6               	comf	___awdiv@divisor,f
  8670  06E3  09F7               	comf	___awdiv@divisor+1,f
  8671  06E4  0AF6               	incf	___awdiv@divisor,f
  8672  06E5  1903               	skipnz
  8673  06E6  0AF7               	incf	___awdiv@divisor+1,f
  8674  06E7  01A1               	clrf	___awdiv@sign
  8675  06E8  0AA1               	incf	___awdiv@sign,f
  8676  06E9                     i1l2691:	
  8677  06E9  1FF9               	btfss	___awdiv@dividend+1,7
  8678  06EA  2EF4               	goto	i1l2697
  8679  06EB  09F8               	comf	___awdiv@dividend,f
  8680  06EC  09F9               	comf	___awdiv@dividend+1,f
  8681  06ED  0AF8               	incf	___awdiv@dividend,f
  8682  06EE  1903               	skipnz
  8683  06EF  0AF9               	incf	___awdiv@dividend+1,f
  8684  06F0  3001               	movlw	1
  8685  06F1  00FA               	movwf	??___awdiv
  8686  06F2  087A               	movf	??___awdiv,w
  8687  06F3  06A1               	xorwf	___awdiv@sign,f
  8688  06F4                     i1l2697:	
  8689  06F4  01A2               	clrf	___awdiv@quotient
  8690  06F5  01A3               	clrf	___awdiv@quotient+1
  8691  06F6  0876               	movf	___awdiv@divisor,w
  8692  06F7  0477               	iorwf	___awdiv@divisor+1,w
  8693  06F8  1903               	btfsc	3,2
  8694  06F9  2F23               	goto	i1l2719
  8695  06FA  01A0               	clrf	___awdiv@counter
  8696  06FB  0AA0               	incf	___awdiv@counter,f
  8697  06FC                     i1l2707:	
  8698  06FC  1BF7               	btfsc	___awdiv@divisor+1,7
  8699  06FD  2F08               	goto	i1l2709
  8700  06FE  3001               	movlw	1
  8701  06FF                     u176_25:	
  8702  06FF  35F6               	lslf	___awdiv@divisor,f
  8703  0700  0DF7               	rlf	___awdiv@divisor+1,f
  8704  0701  0B89               	decfsz	9,f
  8705  0702  2EFF               	goto	u176_25
  8706  0703  3001               	movlw	1
  8707  0704  00FA               	movwf	??___awdiv
  8708  0705  087A               	movf	??___awdiv,w
  8709  0706  07A0               	addwf	___awdiv@counter,f
  8710  0707  2EFC               	goto	i1l2707
  8711  0708                     i1l2709:	
  8712  0708  3001               	movlw	1
  8713  0709                     u178_25:	
  8714  0709  35A2               	lslf	___awdiv@quotient,f
  8715  070A  0DA3               	rlf	___awdiv@quotient+1,f
  8716  070B  0B89               	decfsz	9,f
  8717  070C  2F09               	goto	u178_25
  8718  070D  0877               	movf	___awdiv@divisor+1,w
  8719  070E  0279               	subwf	___awdiv@dividend+1,w
  8720  070F  1D03               	skipz
  8721  0710  2F13               	goto	u179_25
  8722  0711  0876               	movf	___awdiv@divisor,w
  8723  0712  0278               	subwf	___awdiv@dividend,w
  8724  0713                     u179_25:	
  8725  0713  1C03               	skipc
  8726  0714  2F1A               	goto	i1l2715
  8727  0715  0876               	movf	___awdiv@divisor,w
  8728  0716  02F8               	subwf	___awdiv@dividend,f
  8729  0717  0877               	movf	___awdiv@divisor+1,w
  8730  0718  3BF9               	subwfb	___awdiv@dividend+1,f
  8731  0719  1422               	bsf	___awdiv@quotient,0
  8732  071A                     i1l2715:	
  8733  071A  3001               	movlw	1
  8734  071B                     u180_25:	
  8735  071B  36F7               	lsrf	___awdiv@divisor+1,f
  8736  071C  0CF6               	rrf	___awdiv@divisor,f
  8737  071D  0B89               	decfsz	9,f
  8738  071E  2F1B               	goto	u180_25
  8739  071F  3001               	movlw	1
  8740  0720  02A0               	subwf	___awdiv@counter,f
  8741  0721  1D03               	btfss	3,2
  8742  0722  2F08               	goto	i1l2709
  8743  0723                     i1l2719:	
  8744  0723  0821               	movf	___awdiv@sign,w
  8745  0724  1903               	btfsc	3,2
  8746  0725  2F2B               	goto	i1l2723
  8747  0726  09A2               	comf	___awdiv@quotient,f
  8748  0727  09A3               	comf	___awdiv@quotient+1,f
  8749  0728  0AA2               	incf	___awdiv@quotient,f
  8750  0729  1903               	skipnz
  8751  072A  0AA3               	incf	___awdiv@quotient+1,f
  8752  072B                     i1l2723:	
  8753  072B  0823               	movf	___awdiv@quotient+1,w
  8754  072C  00F7               	movwf	?___awdiv+1
  8755  072D  0822               	movf	___awdiv@quotient,w
  8756  072E  00F6               	movwf	?___awdiv
  8757  072F  0008               	return
  8758  0730                     __end_of___awdiv:	
  8759                           
  8760                           	psect	text50
  8761  0CD6                     __ptext50:	
  8762 ;; *************** function _isGestureAvailable *****************
  8763 ;; Defined at:
  8764 ;;		line 533 in file "APDS9960.c"
  8765 ;; Parameters:    Size  Location     Type
  8766 ;;		None
  8767 ;; Auto vars:     Size  Location     Type
  8768 ;;  val             1    5[COMMON] unsigned char 
  8769 ;; Return value:  Size  Location     Type
  8770 ;;                  1    wreg      unsigned char 
  8771 ;; Registers used:
  8772 ;;		wreg, status,2, status,0, pclath, cstack
  8773 ;; Tracked objects:
  8774 ;;		On entry : 0/0
  8775 ;;		On exit  : 0/0
  8776 ;;		Unchanged: 0/0
  8777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8778 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8779 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8780 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8781 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8782 ;;Total ram usage:        2 bytes
  8783 ;; Hardware stack levels used:    1
  8784 ;; Hardware stack levels required when called:    2
  8785 ;; This function calls:
  8786 ;;		i1_wireReadDataByte
  8787 ;; This function is called by:
  8788 ;;		_handleGesture
  8789 ;;		_readGesture
  8790 ;; This function uses a non-reentrant model
  8791 ;;
  8792                           
  8793                           
  8794                           ;psect for function _isGestureAvailable
  8795  0CD6                     _isGestureAvailable:	
  8796                           
  8797                           ;APDS9960.c: 535: uint8_t val;;APDS9960.c: 538: val=wireReadDataByte(0xAF);
  8798                           
  8799                           ;incstack = 0
  8800                           ; Regs used in _isGestureAvailable: [wreg+status,2+status,0+pclath+cstack]
  8801  0CD6  30AF               	movlw	175
  8802  0CD7  318D  25CD  318C   	fcall	i1_wireReadDataByte
  8803  0CDA  00F4               	movwf	??_isGestureAvailable
  8804  0CDB  0874               	movf	??_isGestureAvailable,w
  8805  0CDC  00F5               	movwf	isGestureAvailable@val
  8806                           
  8807                           ;APDS9960.c: 541: val &= 0b00000001;
  8808  0CDD  3001               	movlw	1
  8809  0CDE  00F4               	movwf	??_isGestureAvailable
  8810  0CDF  0874               	movf	??_isGestureAvailable,w
  8811  0CE0  05F5               	andwf	isGestureAvailable@val,f
  8812                           
  8813                           ;APDS9960.c: 544: if( val == 1) {
  8814  0CE1  0375               	decf	isGestureAvailable@val,w
  8815  0CE2  1D03               	btfss	3,2
  8816  0CE3  2CE6               	goto	i1l2755
  8817                           
  8818                           ;APDS9960.c: 545: return 1;
  8819  0CE4  3001               	movlw	1
  8820  0CE5  0008               	return
  8821  0CE6                     i1l2755:	
  8822                           
  8823                           ;APDS9960.c: 547: return 0;
  8824  0CE6  3000               	movlw	0
  8825  0CE7  0008               	return
  8826  0CE8                     __end_of_isGestureAvailable:	
  8827                           
  8828                           	psect	text51
  8829  0DCD                     __ptext51:	
  8830 ;; *************** function i1_wireReadDataByte *****************
  8831 ;; Defined at:
  8832 ;;		line 906 in file "APDS9960.c"
  8833 ;; Parameters:    Size  Location     Type
  8834 ;;  reg             1    wreg     unsigned char 
  8835 ;; Auto vars:     Size  Location     Type
  8836 ;;  reg             1    2[COMMON] unsigned char 
  8837 ;;  wireReadData    1    3[COMMON] unsigned char 
  8838 ;; Return value:  Size  Location     Type
  8839 ;;                  1    wreg      unsigned char 
  8840 ;; Registers used:
  8841 ;;		wreg, status,2, status,0, pclath, cstack
  8842 ;; Tracked objects:
  8843 ;;		On entry : 0/0
  8844 ;;		On exit  : 0/0
  8845 ;;		Unchanged: 0/0
  8846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8847 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8848 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8849 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8850 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8851 ;;Total ram usage:        3 bytes
  8852 ;; Hardware stack levels used:    1
  8853 ;; Hardware stack levels required when called:    1
  8854 ;; This function calls:
  8855 ;;		i1_i2c2_driver_getRXData
  8856 ;;		i1_i2c2_driver_isNACK
  8857 ;;		i1_i2c2_driver_restart
  8858 ;;		i1_i2c2_driver_setAddr
  8859 ;;		i1_i2c2_driver_start
  8860 ;;		i1_i2c2_driver_startRX
  8861 ;;		i1_i2c2_driver_stop
  8862 ;; This function is called by:
  8863 ;;		_isGestureAvailable
  8864 ;;		_readGesture
  8865 ;;		i1_getMode
  8866 ;; This function uses a non-reentrant model
  8867 ;;
  8868                           
  8869                           
  8870                           ;psect for function i1_wireReadDataByte
  8871  0DCD                     i1_wireReadDataByte:	
  8872                           
  8873                           ;incstack = 0
  8874                           ; Regs used in i1_wireReadDataByte: [wreg+status,2+status,0+pclath+cstack]
  8875                           ;i1wireReadDataByte@reg stored from wreg
  8876  0DCD  00F2               	movwf	i1wireReadDataByte@reg
  8877                           
  8878                           ;APDS9960.c: 909: unsigned char val;;APDS9960.c: 929: i2c2_driver_start();
  8879  0DCE  318C  2444  318D   	fcall	i1_i2c2_driver_start
  8880                           
  8881                           ;APDS9960.c: 930: i2c2_driver_setAddr(0x39 << 1);
  8882  0DD1  3072               	movlw	114
  8883  0DD2  318C  246A  318D   	fcall	i1_i2c2_driver_setAddr
  8884                           
  8885                           ;APDS9960.c: 931: i2c2_driver_setAddr(reg);
  8886  0DD5  0872               	movf	i1wireReadDataByte@reg,w
  8887  0DD6  318C  246A  318D   	fcall	i1_i2c2_driver_setAddr
  8888                           
  8889                           ;APDS9960.c: 932: i2c2_driver_restart();
  8890  0DD9  318C  2441  318D   	fcall	i1_i2c2_driver_restart
  8891                           
  8892                           ;APDS9960.c: 933: i2c2_driver_startRX();
  8893  0DDC  318C  2447  318D   	fcall	i1_i2c2_driver_startRX
  8894                           
  8895                           ;APDS9960.c: 934: val = i2c2_driver_getRXData();
  8896  0DDF  318C  243B  318D   	fcall	i1_i2c2_driver_getRXData
  8897  0DE2  00F1               	movwf	??i1_wireReadDataByte
  8898  0DE3  0871               	movf	??i1_wireReadDataByte,w
  8899  0DE4  00F3               	movwf	i1wireReadDataByte@val
  8900                           
  8901                           ;APDS9960.c: 935: i2c2_driver_isNACK();
  8902  0DE5  318C  243E  318D   	fcall	i1_i2c2_driver_isNACK
  8903                           
  8904                           ;APDS9960.c: 936: i2c2_driver_stop();
  8905  0DE8  318C  244A         	fcall	i1_i2c2_driver_stop
  8906                           
  8907                           ;APDS9960.c: 938: return (val);
  8908  0DEA  0873               	movf	i1wireReadDataByte@val,w
  8909  0DEB  0008               	return
  8910  0DEC                     __end_ofi1_wireReadDataByte:	
  8911                           
  8912                           	psect	text52
  8913  0C4A                     __ptext52:	
  8914 ;; *************** function i1_i2c2_driver_stop *****************
  8915 ;; Defined at:
  8916 ;;		line 156 in file "mcc_generated_files/i2c2_driver.c"
  8917 ;; Parameters:    Size  Location     Type
  8918 ;;		None
  8919 ;; Auto vars:     Size  Location     Type
  8920 ;;		None
  8921 ;; Return value:  Size  Location     Type
  8922 ;;                  1    wreg      void 
  8923 ;; Registers used:
  8924 ;;		None
  8925 ;; Tracked objects:
  8926 ;;		On entry : 0/0
  8927 ;;		On exit  : 0/0
  8928 ;;		Unchanged: 0/0
  8929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8931 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8932 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8933 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8934 ;;Total ram usage:        0 bytes
  8935 ;; Hardware stack levels used:    1
  8936 ;; This function calls:
  8937 ;;		Nothing
  8938 ;; This function is called by:
  8939 ;;		_wireReadDataBlock
  8940 ;;		i1_wireReadDataByte
  8941 ;; This function uses a non-reentrant model
  8942 ;;
  8943                           
  8944                           
  8945                           ;psect for function i1_i2c2_driver_stop
  8946  0C4A                     i1_i2c2_driver_stop:	
  8947                           
  8948                           ;i2c2_driver.c: 158: SSP2CON2bits.PEN = 1;
  8949                           
  8950                           ;incstack = 0
  8951                           ; Regs used in i1_i2c2_driver_stop: []
  8952  0C4A  0024               	movlb	4	; select bank4
  8953  0C4B  151E               	bsf	30,2	;volatile
  8954  0C4C  0008               	return
  8955  0C4D                     __end_ofi1_i2c2_driver_stop:	
  8956                           
  8957                           	psect	text53
  8958  0C47                     __ptext53:	
  8959 ;; *************** function i1_i2c2_driver_startRX *****************
  8960 ;; Defined at:
  8961 ;;		line 166 in file "mcc_generated_files/i2c2_driver.c"
  8962 ;; Parameters:    Size  Location     Type
  8963 ;;		None
  8964 ;; Auto vars:     Size  Location     Type
  8965 ;;		None
  8966 ;; Return value:  Size  Location     Type
  8967 ;;                  1    wreg      void 
  8968 ;; Registers used:
  8969 ;;		None
  8970 ;; Tracked objects:
  8971 ;;		On entry : 0/0
  8972 ;;		On exit  : 0/0
  8973 ;;		Unchanged: 0/0
  8974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8975 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8976 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8977 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8978 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8979 ;;Total ram usage:        0 bytes
  8980 ;; Hardware stack levels used:    1
  8981 ;; This function calls:
  8982 ;;		Nothing
  8983 ;; This function is called by:
  8984 ;;		_wireReadDataBlock
  8985 ;;		i1_wireReadDataByte
  8986 ;; This function uses a non-reentrant model
  8987 ;;
  8988                           
  8989                           
  8990                           ;psect for function i1_i2c2_driver_startRX
  8991  0C47                     i1_i2c2_driver_startRX:	
  8992                           
  8993                           ;i2c2_driver.c: 168: SSP2CON2bits.RCEN = 1;
  8994                           
  8995                           ;incstack = 0
  8996                           ; Regs used in i1_i2c2_driver_startRX: []
  8997  0C47  0024               	movlb	4	; select bank4
  8998  0C48  159E               	bsf	30,3	;volatile
  8999  0C49  0008               	return
  9000  0C4A                     __end_ofi1_i2c2_driver_startRX:	
  9001                           
  9002                           	psect	text54
  9003  0C44                     __ptext54:	
  9004 ;; *************** function i1_i2c2_driver_start *****************
  9005 ;; Defined at:
  9006 ;;		line 146 in file "mcc_generated_files/i2c2_driver.c"
  9007 ;; Parameters:    Size  Location     Type
  9008 ;;		None
  9009 ;; Auto vars:     Size  Location     Type
  9010 ;;		None
  9011 ;; Return value:  Size  Location     Type
  9012 ;;                  1    wreg      void 
  9013 ;; Registers used:
  9014 ;;		None
  9015 ;; Tracked objects:
  9016 ;;		On entry : 0/0
  9017 ;;		On exit  : 0/0
  9018 ;;		Unchanged: 0/0
  9019 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9020 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9021 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9023 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9024 ;;Total ram usage:        0 bytes
  9025 ;; Hardware stack levels used:    1
  9026 ;; This function calls:
  9027 ;;		Nothing
  9028 ;; This function is called by:
  9029 ;;		_wireReadDataBlock
  9030 ;;		i1_wireReadDataByte
  9031 ;; This function uses a non-reentrant model
  9032 ;;
  9033                           
  9034                           
  9035                           ;psect for function i1_i2c2_driver_start
  9036  0C44                     i1_i2c2_driver_start:	
  9037                           
  9038                           ;i2c2_driver.c: 148: SSP2CON2bits.SEN = 1;
  9039                           
  9040                           ;incstack = 0
  9041                           ; Regs used in i1_i2c2_driver_start: []
  9042  0C44  0024               	movlb	4	; select bank4
  9043  0C45  141E               	bsf	30,0	;volatile
  9044  0C46  0008               	return
  9045  0C47                     __end_ofi1_i2c2_driver_start:	
  9046                           
  9047                           	psect	text55
  9048  0C6A                     __ptext55:	
  9049 ;; *************** function i1_i2c2_driver_setAddr *****************
  9050 ;; Defined at:
  9051 ;;		line 176 in file "mcc_generated_files/i2c2_driver.c"
  9052 ;; Parameters:    Size  Location     Type
  9053 ;;  addr            1    wreg     unsigned char 
  9054 ;; Auto vars:     Size  Location     Type
  9055 ;;  addr            1    0[COMMON] unsigned char 
  9056 ;; Return value:  Size  Location     Type
  9057 ;;                  1    wreg      void 
  9058 ;; Registers used:
  9059 ;;		wreg
  9060 ;; Tracked objects:
  9061 ;;		On entry : 0/0
  9062 ;;		On exit  : 0/0
  9063 ;;		Unchanged: 0/0
  9064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9066 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9068 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9069 ;;Total ram usage:        1 bytes
  9070 ;; Hardware stack levels used:    1
  9071 ;; This function calls:
  9072 ;;		Nothing
  9073 ;; This function is called by:
  9074 ;;		_wireReadDataBlock
  9075 ;;		i1_wireReadDataByte
  9076 ;; This function uses a non-reentrant model
  9077 ;;
  9078                           
  9079                           
  9080                           ;psect for function i1_i2c2_driver_setAddr
  9081  0C6A                     i1_i2c2_driver_setAddr:	
  9082                           
  9083                           ;incstack = 0
  9084                           ; Regs used in i1_i2c2_driver_setAddr: [wreg]
  9085                           ;i1i2c2_driver_setAddr@addr stored from wreg
  9086  0C6A  00F0               	movwf	i1i2c2_driver_setAddr@addr
  9087                           
  9088                           ;i2c2_driver.c: 178: SSP2ADD = addr;
  9089  0C6B  0870               	movf	i1i2c2_driver_setAddr@addr,w
  9090  0C6C  0024               	movlb	4	; select bank4
  9091  0C6D  009A               	movwf	26	;volatile
  9092  0C6E  0008               	return
  9093  0C6F                     __end_ofi1_i2c2_driver_setAddr:	
  9094                           
  9095                           	psect	text56
  9096  0C41                     __ptext56:	
  9097 ;; *************** function i1_i2c2_driver_restart *****************
  9098 ;; Defined at:
  9099 ;;		line 151 in file "mcc_generated_files/i2c2_driver.c"
  9100 ;; Parameters:    Size  Location     Type
  9101 ;;		None
  9102 ;; Auto vars:     Size  Location     Type
  9103 ;;		None
  9104 ;; Return value:  Size  Location     Type
  9105 ;;                  1    wreg      void 
  9106 ;; Registers used:
  9107 ;;		None
  9108 ;; Tracked objects:
  9109 ;;		On entry : 0/0
  9110 ;;		On exit  : 0/0
  9111 ;;		Unchanged: 0/0
  9112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9113 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9114 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9115 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9116 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9117 ;;Total ram usage:        0 bytes
  9118 ;; Hardware stack levels used:    1
  9119 ;; This function calls:
  9120 ;;		Nothing
  9121 ;; This function is called by:
  9122 ;;		_wireReadDataBlock
  9123 ;;		i1_wireReadDataByte
  9124 ;; This function uses a non-reentrant model
  9125 ;;
  9126                           
  9127                           
  9128                           ;psect for function i1_i2c2_driver_restart
  9129  0C41                     i1_i2c2_driver_restart:	
  9130                           
  9131                           ;i2c2_driver.c: 153: SSP2CON2bits.RSEN = 1;
  9132                           
  9133                           ;incstack = 0
  9134                           ; Regs used in i1_i2c2_driver_restart: []
  9135  0C41  0024               	movlb	4	; select bank4
  9136  0C42  149E               	bsf	30,1	;volatile
  9137  0C43  0008               	return
  9138  0C44                     __end_ofi1_i2c2_driver_restart:	
  9139                           
  9140                           	psect	text57
  9141  0C3E                     __ptext57:	
  9142 ;; *************** function i1_i2c2_driver_isNACK *****************
  9143 ;; Defined at:
  9144 ;;		line 161 in file "mcc_generated_files/i2c2_driver.c"
  9145 ;; Parameters:    Size  Location     Type
  9146 ;;		None
  9147 ;; Auto vars:     Size  Location     Type
  9148 ;;		None
  9149 ;; Return value:  Size  Location     Type
  9150 ;;		None               void
  9151 ;; Registers used:
  9152 ;;		wreg
  9153 ;; Tracked objects:
  9154 ;;		On entry : 0/0
  9155 ;;		On exit  : 0/0
  9156 ;;		Unchanged: 0/0
  9157 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9158 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9159 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9160 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9161 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9162 ;;Total ram usage:        0 bytes
  9163 ;; Hardware stack levels used:    1
  9164 ;; This function calls:
  9165 ;;		Nothing
  9166 ;; This function is called by:
  9167 ;;		i1_wireReadDataByte
  9168 ;; This function uses a non-reentrant model
  9169 ;;
  9170                           
  9171                           
  9172                           ;psect for function i1_i2c2_driver_isNACK
  9173  0C3E                     i1_i2c2_driver_isNACK:	
  9174                           
  9175                           ;i2c2_driver.c: 163: return SSP2CON2bits.ACKSTAT;;	Return value of i1_i2c2_driver_isNACK
      +                           is never used
  9176                           
  9177                           ;incstack = 0
  9178                           ; Regs used in i1_i2c2_driver_isNACK: [wreg]
  9179  0C3E  0024               	movlb	4	; select bank4
  9180  0C3F  081E               	movf	30,w	;volatile
  9181  0C40  0008               	return
  9182  0C41                     __end_ofi1_i2c2_driver_isNACK:	
  9183                           
  9184                           	psect	text58
  9185  0C3B                     __ptext58:	
  9186 ;; *************** function i1_i2c2_driver_getRXData *****************
  9187 ;; Defined at:
  9188 ;;		line 171 in file "mcc_generated_files/i2c2_driver.c"
  9189 ;; Parameters:    Size  Location     Type
  9190 ;;		None
  9191 ;; Auto vars:     Size  Location     Type
  9192 ;;		None
  9193 ;; Return value:  Size  Location     Type
  9194 ;;                  1    wreg      unsigned char 
  9195 ;; Registers used:
  9196 ;;		wreg
  9197 ;; Tracked objects:
  9198 ;;		On entry : 0/0
  9199 ;;		On exit  : 0/0
  9200 ;;		Unchanged: 0/0
  9201 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9202 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9203 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9204 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9205 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9206 ;;Total ram usage:        0 bytes
  9207 ;; Hardware stack levels used:    1
  9208 ;; This function calls:
  9209 ;;		Nothing
  9210 ;; This function is called by:
  9211 ;;		_wireReadDataBlock
  9212 ;;		i1_wireReadDataByte
  9213 ;; This function uses a non-reentrant model
  9214 ;;
  9215                           
  9216                           
  9217                           ;psect for function i1_i2c2_driver_getRXData
  9218  0C3B                     i1_i2c2_driver_getRXData:	
  9219                           
  9220                           ;i2c2_driver.c: 173: return SSP2BUF;
  9221                           
  9222                           ;incstack = 0
  9223                           ; Regs used in i1_i2c2_driver_getRXData: [wreg]
  9224  0C3B  0024               	movlb	4	; select bank4
  9225  0C3C  0819               	movf	25,w	;volatile
  9226  0C3D  0008               	return
  9227  0C3E                     __end_ofi1_i2c2_driver_getRXData:	
  9228                           
  9229                           	psect	text59
  9230  02F7                     __ptext59:	
  9231 ;; *************** function _decodeGesture *****************
  9232 ;; Defined at:
  9233 ;;		line 791 in file "APDS9960.c"
  9234 ;; Parameters:    Size  Location     Type
  9235 ;;		None
  9236 ;; Auto vars:     Size  Location     Type
  9237 ;;		None
  9238 ;; Return value:  Size  Location     Type
  9239 ;;                  1    wreg      unsigned char 
  9240 ;; Registers used:
  9241 ;;		wreg, status,2, status,0
  9242 ;; Tracked objects:
  9243 ;;		On entry : 0/0
  9244 ;;		On exit  : 0/0
  9245 ;;		Unchanged: 0/0
  9246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9247 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9248 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9249 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9250 ;;      Totals:         2      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9251 ;;Total ram usage:       18 bytes
  9252 ;; Hardware stack levels used:    1
  9253 ;; This function calls:
  9254 ;;		Nothing
  9255 ;; This function is called by:
  9256 ;;		_readGesture
  9257 ;; This function uses a non-reentrant model
  9258 ;;
  9259                           
  9260                           
  9261                           ;psect for function _decodeGesture
  9262  02F7                     _decodeGesture:	
  9263                           
  9264                           ;APDS9960.c: 794: if( gesture_state_ == NEAR_STATE ) {
  9265                           
  9266                           ;incstack = 0
  9267                           ; Regs used in _decodeGesture: [wreg+status,2+status,0]
  9268  02F7  0020               	movlb	0	; select bank0
  9269  02F8  0356               	decf	_gesture_state_,w
  9270  02F9  0457               	iorwf	_gesture_state_+1,w
  9271  02FA  1D03               	btfss	3,2
  9272  02FB  2B02               	goto	i1l2987
  9273                           
  9274                           ;APDS9960.c: 795: gesture_motion_ = DIR_NEAR;
  9275  02FC  3005               	movlw	5
  9276  02FD  00D4               	movwf	_gesture_motion_
  9277  02FE  3000               	movlw	0
  9278  02FF  00D5               	movwf	_gesture_motion_+1
  9279                           
  9280                           ;APDS9960.c: 796: return 1;
  9281  0300  3001               	movlw	1
  9282  0301  0008               	return
  9283  0302                     i1l2987:	
  9284  0302  3002               	movlw	2
  9285  0303  0656               	xorwf	_gesture_state_,w
  9286  0304  0457               	iorwf	_gesture_state_+1,w
  9287  0305  1D03               	btfss	3,2
  9288  0306  2B0D               	goto	i1l2993
  9289                           
  9290                           ;APDS9960.c: 798: gesture_motion_ = DIR_FAR;
  9291  0307  3006               	movlw	6
  9292  0308  00D4               	movwf	_gesture_motion_
  9293  0309  3000               	movlw	0
  9294  030A  00D5               	movwf	_gesture_motion_+1
  9295                           
  9296                           ;APDS9960.c: 799: return 1;
  9297  030B  3001               	movlw	1
  9298  030C  0008               	return
  9299  030D                     i1l2993:	
  9300                           
  9301                           ;APDS9960.c: 800: };APDS9960.c: 803: if( (gesture_ud_count_ == -1) && (gesture_lr_count_
      +                           == 0) ) {
  9302  030D  0A5E               	incf	_gesture_ud_count_,w
  9303  030E  1D03               	skipz
  9304  030F  2B19               	goto	i1l2999
  9305  0310  0A5F               	incf	_gesture_ud_count_+1,w
  9306  0311  1D03               	btfss	3,2
  9307  0312  2B19               	goto	i1l2999
  9308  0313  085C               	movf	_gesture_lr_count_,w
  9309  0314  045D               	iorwf	_gesture_lr_count_+1,w
  9310  0315  1D03               	btfss	3,2
  9311  0316  2B19               	goto	i1l2999
  9312  0317                     i1l2997:	
  9313                           
  9314                           ;APDS9960.c: 804: gesture_motion_ = DIR_UP;
  9315  0317  3003               	movlw	3
  9316  0318  2B38               	goto	L8
  9317  0319                     i1l2999:	
  9318                           ;APDS9960.c: 805: } else if( (gesture_ud_count_ == 1) && (gesture_lr_count_ == 0) ) {
  9319                           
  9320  0319  035E               	decf	_gesture_ud_count_,w
  9321  031A  045F               	iorwf	_gesture_ud_count_+1,w
  9322  031B  1D03               	btfss	3,2
  9323  031C  2B23               	goto	i1l3005
  9324  031D  085C               	movf	_gesture_lr_count_,w
  9325  031E  045D               	iorwf	_gesture_lr_count_+1,w
  9326  031F  1D03               	btfss	3,2
  9327  0320  2B23               	goto	i1l3005
  9328  0321                     i1l3003:	
  9329                           
  9330                           ;APDS9960.c: 806: gesture_motion_ = DIR_DOWN;
  9331  0321  3004               	movlw	4
  9332  0322  2B38               	goto	L8
  9333  0323                     i1l3005:	
  9334                           ;APDS9960.c: 807: } else if( (gesture_ud_count_ == 0) && (gesture_lr_count_ == 1) ) {
  9335                           
  9336  0323  085E               	movf	_gesture_ud_count_,w
  9337  0324  045F               	iorwf	_gesture_ud_count_+1,w
  9338  0325  1D03               	btfss	3,2
  9339  0326  2B2D               	goto	i1l3011
  9340  0327  035C               	decf	_gesture_lr_count_,w
  9341  0328  045D               	iorwf	_gesture_lr_count_+1,w
  9342  0329  1D03               	btfss	3,2
  9343  032A  2B2D               	goto	i1l3011
  9344  032B                     i1l3009:	
  9345                           
  9346                           ;APDS9960.c: 808: gesture_motion_ = DIR_RIGHT;
  9347  032B  3002               	movlw	2
  9348  032C  2B38               	goto	L8
  9349  032D                     i1l3011:	
  9350                           ;APDS9960.c: 809: } else if( (gesture_ud_count_ == 0) && (gesture_lr_count_ == -1) ) {
  9351                           
  9352  032D  085E               	movf	_gesture_ud_count_,w
  9353  032E  045F               	iorwf	_gesture_ud_count_+1,w
  9354  032F  1D03               	btfss	3,2
  9355  0330  2B3D               	goto	i1l3017
  9356  0331  0A5C               	incf	_gesture_lr_count_,w
  9357  0332  1D03               	skipz
  9358  0333  2B3D               	goto	i1l3017
  9359  0334  0A5D               	incf	_gesture_lr_count_+1,w
  9360  0335  1D03               	btfss	3,2
  9361  0336  2B3D               	goto	i1l3017
  9362  0337                     i1l3015:	
  9363                           
  9364                           ;APDS9960.c: 810: gesture_motion_ = DIR_LEFT;
  9365  0337  3001               	movlw	1
  9366  0338                     L8:	
  9367  0338  0020               	movlb	0	; select bank0
  9368  0339  00D4               	movwf	_gesture_motion_
  9369  033A  3000               	movlw	0
  9370  033B  00D5               	movwf	_gesture_motion_+1
  9371                           
  9372                           ;APDS9960.c: 811: } else if( (gesture_ud_count_ == -1) && (gesture_lr_count_ == 1) ) {
  9373  033C  2C83               	goto	i1l3093
  9374  033D                     i1l3017:	
  9375  033D  0A5E               	incf	_gesture_ud_count_,w
  9376  033E  1D03               	skipz
  9377  033F  2B8E               	goto	i1l3035
  9378  0340  0A5F               	incf	_gesture_ud_count_+1,w
  9379  0341  1D03               	btfss	3,2
  9380  0342  2B8E               	goto	i1l3035
  9381  0343  035C               	decf	_gesture_lr_count_,w
  9382  0344  045D               	iorwf	_gesture_lr_count_+1,w
  9383  0345  1D03               	btfss	3,2
  9384  0346  2B8E               	goto	i1l3035
  9385                           
  9386                           ;APDS9960.c: 812: if( ((gesture_ud_delta_) > 0 ? (gesture_ud_delta_) : -(gesture_ud_delt
      +                          a_)) > ((gesture_lr_delta_) > 0 ? (gesture_lr_delta_) : -(gesture_lr_delta_)) ) {
  9387  0347  0863               	movf	_gesture_ud_delta_+1,w
  9388  0348  3A80               	xorlw	128
  9389  0349  00F0               	movwf	??_decodeGesture
  9390  034A  3080               	movlw	128
  9391  034B  0270               	subwf	??_decodeGesture,w
  9392  034C  1D03               	skipz
  9393  034D  2B50               	goto	u249_25
  9394  034E  3001               	movlw	1
  9395  034F  0262               	subwf	_gesture_ud_delta_,w
  9396  0350                     u249_25:	
  9397  0350  1803               	skipnc
  9398  0351  2B5F               	goto	i1l3025
  9399  0352  0020               	movlb	0	; select bank0
  9400  0353  0962               	comf	_gesture_ud_delta_,w
  9401  0354  00F0               	movwf	??_decodeGesture
  9402  0355  0963               	comf	_gesture_ud_delta_+1,w
  9403  0356  00F1               	movwf	??_decodeGesture+1
  9404  0357  0AF0               	incf	??_decodeGesture,f
  9405  0358  1903               	skipnz
  9406  0359  0AF1               	incf	??_decodeGesture+1,f
  9407  035A  0870               	movf	??_decodeGesture,w
  9408  035B  00A0               	movwf	_decodeGesture$783
  9409  035C  0871               	movf	??_decodeGesture+1,w
  9410  035D  00A1               	movwf	_decodeGesture$783+1
  9411  035E  2B64               	goto	i1l677
  9412  035F                     i1l3025:	
  9413  035F  0020               	movlb	0	; select bank0
  9414  0360  0863               	movf	_gesture_ud_delta_+1,w
  9415  0361  00A1               	movwf	_decodeGesture$783+1
  9416  0362  0862               	movf	_gesture_ud_delta_,w
  9417  0363  00A0               	movwf	_decodeGesture$783
  9418  0364                     i1l677:	
  9419  0364  0861               	movf	_gesture_lr_delta_+1,w
  9420  0365  3A80               	xorlw	128
  9421  0366  00F0               	movwf	??_decodeGesture
  9422  0367  3080               	movlw	128
  9423  0368  0270               	subwf	??_decodeGesture,w
  9424  0369  1D03               	skipz
  9425  036A  2B6D               	goto	u250_25
  9426  036B  3001               	movlw	1
  9427  036C  0260               	subwf	_gesture_lr_delta_,w
  9428  036D                     u250_25:	
  9429  036D  1803               	skipnc
  9430  036E  2B7C               	goto	i1l3029
  9431  036F  0020               	movlb	0	; select bank0
  9432  0370  0960               	comf	_gesture_lr_delta_,w
  9433  0371  00F0               	movwf	??_decodeGesture
  9434  0372  0961               	comf	_gesture_lr_delta_+1,w
  9435  0373  00F1               	movwf	??_decodeGesture+1
  9436  0374  0AF0               	incf	??_decodeGesture,f
  9437  0375  1903               	skipnz
  9438  0376  0AF1               	incf	??_decodeGesture+1,f
  9439  0377  0870               	movf	??_decodeGesture,w
  9440  0378  00A2               	movwf	_decodeGesture$784
  9441  0379  0871               	movf	??_decodeGesture+1,w
  9442  037A  00A3               	movwf	_decodeGesture$784+1
  9443  037B  2B81               	goto	i1l681
  9444  037C                     i1l3029:	
  9445  037C  0020               	movlb	0	; select bank0
  9446  037D  0861               	movf	_gesture_lr_delta_+1,w
  9447  037E  00A3               	movwf	_decodeGesture$784+1
  9448  037F  0860               	movf	_gesture_lr_delta_,w
  9449  0380  00A2               	movwf	_decodeGesture$784
  9450  0381                     i1l681:	
  9451  0381  0823               	movf	_decodeGesture$784+1,w
  9452  0382  3A80               	xorlw	128
  9453  0383  00F0               	movwf	??_decodeGesture
  9454  0384  0821               	movf	_decodeGesture$783+1,w
  9455  0385  3A80               	xorlw	128
  9456  0386  0270               	subwf	??_decodeGesture,w
  9457  0387  1D03               	skipz
  9458  0388  2B8B               	goto	u251_25
  9459  0389  0820               	movf	_decodeGesture$783,w
  9460  038A  0222               	subwf	_decodeGesture$784,w
  9461  038B                     u251_25:	
  9462  038B  1C03               	btfss	3,0
  9463  038C  2B17               	goto	i1l2997
  9464  038D  2B2B               	goto	i1l3009
  9465  038E                     i1l3035:	
  9466  038E  035E               	decf	_gesture_ud_count_,w
  9467  038F  045F               	iorwf	_gesture_ud_count_+1,w
  9468  0390  1D03               	btfss	3,2
  9469  0391  2BDF               	goto	i1l3053
  9470  0392  0A5C               	incf	_gesture_lr_count_,w
  9471  0393  1D03               	skipz
  9472  0394  2BDF               	goto	i1l3053
  9473  0395  0A5D               	incf	_gesture_lr_count_+1,w
  9474  0396  1D03               	btfss	3,2
  9475  0397  2BDF               	goto	i1l3053
  9476                           
  9477                           ;APDS9960.c: 818: if( ((gesture_ud_delta_) > 0 ? (gesture_ud_delta_) : -(gesture_ud_delt
      +                          a_)) > ((gesture_lr_delta_) > 0 ? (gesture_lr_delta_) : -(gesture_lr_delta_)) ) {
  9478  0398  0863               	movf	_gesture_ud_delta_+1,w
  9479  0399  3A80               	xorlw	128
  9480  039A  00F0               	movwf	??_decodeGesture
  9481  039B  3080               	movlw	128
  9482  039C  0270               	subwf	??_decodeGesture,w
  9483  039D  1D03               	skipz
  9484  039E  2BA1               	goto	u254_25
  9485  039F  3001               	movlw	1
  9486  03A0  0262               	subwf	_gesture_ud_delta_,w
  9487  03A1                     u254_25:	
  9488  03A1  1803               	skipnc
  9489  03A2  2BB0               	goto	i1l3043
  9490  03A3  0020               	movlb	0	; select bank0
  9491  03A4  0962               	comf	_gesture_ud_delta_,w
  9492  03A5  00F0               	movwf	??_decodeGesture
  9493  03A6  0963               	comf	_gesture_ud_delta_+1,w
  9494  03A7  00F1               	movwf	??_decodeGesture+1
  9495  03A8  0AF0               	incf	??_decodeGesture,f
  9496  03A9  1903               	skipnz
  9497  03AA  0AF1               	incf	??_decodeGesture+1,f
  9498  03AB  0870               	movf	??_decodeGesture,w
  9499  03AC  00A4               	movwf	_decodeGesture$785
  9500  03AD  0871               	movf	??_decodeGesture+1,w
  9501  03AE  00A5               	movwf	_decodeGesture$785+1
  9502  03AF  2BB5               	goto	i1l689
  9503  03B0                     i1l3043:	
  9504  03B0  0020               	movlb	0	; select bank0
  9505  03B1  0863               	movf	_gesture_ud_delta_+1,w
  9506  03B2  00A5               	movwf	_decodeGesture$785+1
  9507  03B3  0862               	movf	_gesture_ud_delta_,w
  9508  03B4  00A4               	movwf	_decodeGesture$785
  9509  03B5                     i1l689:	
  9510  03B5  0861               	movf	_gesture_lr_delta_+1,w
  9511  03B6  3A80               	xorlw	128
  9512  03B7  00F0               	movwf	??_decodeGesture
  9513  03B8  3080               	movlw	128
  9514  03B9  0270               	subwf	??_decodeGesture,w
  9515  03BA  1D03               	skipz
  9516  03BB  2BBE               	goto	u255_25
  9517  03BC  3001               	movlw	1
  9518  03BD  0260               	subwf	_gesture_lr_delta_,w
  9519  03BE                     u255_25:	
  9520  03BE  1803               	skipnc
  9521  03BF  2BCD               	goto	i1l3047
  9522  03C0  0020               	movlb	0	; select bank0
  9523  03C1  0960               	comf	_gesture_lr_delta_,w
  9524  03C2  00F0               	movwf	??_decodeGesture
  9525  03C3  0961               	comf	_gesture_lr_delta_+1,w
  9526  03C4  00F1               	movwf	??_decodeGesture+1
  9527  03C5  0AF0               	incf	??_decodeGesture,f
  9528  03C6  1903               	skipnz
  9529  03C7  0AF1               	incf	??_decodeGesture+1,f
  9530  03C8  0870               	movf	??_decodeGesture,w
  9531  03C9  00A6               	movwf	_decodeGesture$786
  9532  03CA  0871               	movf	??_decodeGesture+1,w
  9533  03CB  00A7               	movwf	_decodeGesture$786+1
  9534  03CC  2BD2               	goto	i1l693
  9535  03CD                     i1l3047:	
  9536  03CD  0020               	movlb	0	; select bank0
  9537  03CE  0861               	movf	_gesture_lr_delta_+1,w
  9538  03CF  00A7               	movwf	_decodeGesture$786+1
  9539  03D0  0860               	movf	_gesture_lr_delta_,w
  9540  03D1  00A6               	movwf	_decodeGesture$786
  9541  03D2                     i1l693:	
  9542  03D2  0827               	movf	_decodeGesture$786+1,w
  9543  03D3  3A80               	xorlw	128
  9544  03D4  00F0               	movwf	??_decodeGesture
  9545  03D5  0825               	movf	_decodeGesture$785+1,w
  9546  03D6  3A80               	xorlw	128
  9547  03D7  0270               	subwf	??_decodeGesture,w
  9548  03D8  1D03               	skipz
  9549  03D9  2BDC               	goto	u256_25
  9550  03DA  0824               	movf	_decodeGesture$785,w
  9551  03DB  0226               	subwf	_decodeGesture$786,w
  9552  03DC                     u256_25:	
  9553  03DC  1C03               	btfss	3,0
  9554  03DD  2B21               	goto	i1l3003
  9555  03DE  2B37               	goto	i1l3015
  9556  03DF                     i1l3053:	
  9557  03DF  0A5E               	incf	_gesture_ud_count_,w
  9558  03E0  1D03               	skipz
  9559  03E1  2C32               	goto	i1l3071
  9560  03E2  0A5F               	incf	_gesture_ud_count_+1,w
  9561  03E3  1D03               	btfss	3,2
  9562  03E4  2C32               	goto	i1l3071
  9563  03E5  0A5C               	incf	_gesture_lr_count_,w
  9564  03E6  1D03               	skipz
  9565  03E7  2C32               	goto	i1l3071
  9566  03E8  0A5D               	incf	_gesture_lr_count_+1,w
  9567  03E9  1D03               	btfss	3,2
  9568  03EA  2C32               	goto	i1l3071
  9569                           
  9570                           ;APDS9960.c: 824: if( ((gesture_ud_delta_) > 0 ? (gesture_ud_delta_) : -(gesture_ud_delt
      +                          a_)) > ((gesture_lr_delta_) > 0 ? (gesture_lr_delta_) : -(gesture_lr_delta_)) ) {
  9571  03EB  0863               	movf	_gesture_ud_delta_+1,w
  9572  03EC  3A80               	xorlw	128
  9573  03ED  00F0               	movwf	??_decodeGesture
  9574  03EE  3080               	movlw	128
  9575  03EF  0270               	subwf	??_decodeGesture,w
  9576  03F0  1D03               	skipz
  9577  03F1  2BF4               	goto	u259_25
  9578  03F2  3001               	movlw	1
  9579  03F3  0262               	subwf	_gesture_ud_delta_,w
  9580  03F4                     u259_25:	
  9581  03F4  1803               	skipnc
  9582  03F5  2C03               	goto	i1l3061
  9583  03F6  0020               	movlb	0	; select bank0
  9584  03F7  0962               	comf	_gesture_ud_delta_,w
  9585  03F8  00F0               	movwf	??_decodeGesture
  9586  03F9  0963               	comf	_gesture_ud_delta_+1,w
  9587  03FA  00F1               	movwf	??_decodeGesture+1
  9588  03FB  0AF0               	incf	??_decodeGesture,f
  9589  03FC  1903               	skipnz
  9590  03FD  0AF1               	incf	??_decodeGesture+1,f
  9591  03FE  0870               	movf	??_decodeGesture,w
  9592  03FF  00A8               	movwf	_decodeGesture$787
  9593  0400  0871               	movf	??_decodeGesture+1,w
  9594  0401  00A9               	movwf	_decodeGesture$787+1
  9595  0402  2C08               	goto	i1l701
  9596  0403                     i1l3061:	
  9597  0403  0020               	movlb	0	; select bank0
  9598  0404  0863               	movf	_gesture_ud_delta_+1,w
  9599  0405  00A9               	movwf	_decodeGesture$787+1
  9600  0406  0862               	movf	_gesture_ud_delta_,w
  9601  0407  00A8               	movwf	_decodeGesture$787
  9602  0408                     i1l701:	
  9603  0408  0861               	movf	_gesture_lr_delta_+1,w
  9604  0409  3A80               	xorlw	128
  9605  040A  00F0               	movwf	??_decodeGesture
  9606  040B  3080               	movlw	128
  9607  040C  0270               	subwf	??_decodeGesture,w
  9608  040D  1D03               	skipz
  9609  040E  2C11               	goto	u260_25
  9610  040F  3001               	movlw	1
  9611  0410  0260               	subwf	_gesture_lr_delta_,w
  9612  0411                     u260_25:	
  9613  0411  1803               	skipnc
  9614  0412  2C20               	goto	i1l3065
  9615  0413  0020               	movlb	0	; select bank0
  9616  0414  0960               	comf	_gesture_lr_delta_,w
  9617  0415  00F0               	movwf	??_decodeGesture
  9618  0416  0961               	comf	_gesture_lr_delta_+1,w
  9619  0417  00F1               	movwf	??_decodeGesture+1
  9620  0418  0AF0               	incf	??_decodeGesture,f
  9621  0419  1903               	skipnz
  9622  041A  0AF1               	incf	??_decodeGesture+1,f
  9623  041B  0870               	movf	??_decodeGesture,w
  9624  041C  00AA               	movwf	_decodeGesture$788
  9625  041D  0871               	movf	??_decodeGesture+1,w
  9626  041E  00AB               	movwf	_decodeGesture$788+1
  9627  041F  2C25               	goto	i1l705
  9628  0420                     i1l3065:	
  9629  0420  0020               	movlb	0	; select bank0
  9630  0421  0861               	movf	_gesture_lr_delta_+1,w
  9631  0422  00AB               	movwf	_decodeGesture$788+1
  9632  0423  0860               	movf	_gesture_lr_delta_,w
  9633  0424  00AA               	movwf	_decodeGesture$788
  9634  0425                     i1l705:	
  9635  0425  082B               	movf	_decodeGesture$788+1,w
  9636  0426  3A80               	xorlw	128
  9637  0427  00F0               	movwf	??_decodeGesture
  9638  0428  0829               	movf	_decodeGesture$787+1,w
  9639  0429  3A80               	xorlw	128
  9640  042A  0270               	subwf	??_decodeGesture,w
  9641  042B  1D03               	skipz
  9642  042C  2C2F               	goto	u261_25
  9643  042D  0828               	movf	_decodeGesture$787,w
  9644  042E  022A               	subwf	_decodeGesture$788,w
  9645  042F                     u261_25:	
  9646  042F  1C03               	btfss	3,0
  9647  0430  2B17               	goto	i1l2997
  9648  0431  2B37               	goto	i1l3015
  9649  0432                     i1l3071:	
  9650  0432  035E               	decf	_gesture_ud_count_,w
  9651  0433  045F               	iorwf	_gesture_ud_count_+1,w
  9652  0434  1D03               	btfss	3,2
  9653  0435  2C81               	goto	i1l3089
  9654  0436  035C               	decf	_gesture_lr_count_,w
  9655  0437  045D               	iorwf	_gesture_lr_count_+1,w
  9656  0438  1D03               	btfss	3,2
  9657  0439  2C81               	goto	i1l3089
  9658                           
  9659                           ;APDS9960.c: 830: if( ((gesture_ud_delta_) > 0 ? (gesture_ud_delta_) : -(gesture_ud_delt
      +                          a_)) > ((gesture_lr_delta_) > 0 ? (gesture_lr_delta_) : -(gesture_lr_delta_)) ) {
  9660  043A  0863               	movf	_gesture_ud_delta_+1,w
  9661  043B  3A80               	xorlw	128
  9662  043C  00F0               	movwf	??_decodeGesture
  9663  043D  3080               	movlw	128
  9664  043E  0270               	subwf	??_decodeGesture,w
  9665  043F  1D03               	skipz
  9666  0440  2C43               	goto	u264_25
  9667  0441  3001               	movlw	1
  9668  0442  0262               	subwf	_gesture_ud_delta_,w
  9669  0443                     u264_25:	
  9670  0443  1803               	skipnc
  9671  0444  2C52               	goto	i1l3079
  9672  0445  0020               	movlb	0	; select bank0
  9673  0446  0962               	comf	_gesture_ud_delta_,w
  9674  0447  00F0               	movwf	??_decodeGesture
  9675  0448  0963               	comf	_gesture_ud_delta_+1,w
  9676  0449  00F1               	movwf	??_decodeGesture+1
  9677  044A  0AF0               	incf	??_decodeGesture,f
  9678  044B  1903               	skipnz
  9679  044C  0AF1               	incf	??_decodeGesture+1,f
  9680  044D  0870               	movf	??_decodeGesture,w
  9681  044E  00AC               	movwf	_decodeGesture$789
  9682  044F  0871               	movf	??_decodeGesture+1,w
  9683  0450  00AD               	movwf	_decodeGesture$789+1
  9684  0451  2C57               	goto	i1l713
  9685  0452                     i1l3079:	
  9686  0452  0020               	movlb	0	; select bank0
  9687  0453  0863               	movf	_gesture_ud_delta_+1,w
  9688  0454  00AD               	movwf	_decodeGesture$789+1
  9689  0455  0862               	movf	_gesture_ud_delta_,w
  9690  0456  00AC               	movwf	_decodeGesture$789
  9691  0457                     i1l713:	
  9692  0457  0861               	movf	_gesture_lr_delta_+1,w
  9693  0458  3A80               	xorlw	128
  9694  0459  00F0               	movwf	??_decodeGesture
  9695  045A  3080               	movlw	128
  9696  045B  0270               	subwf	??_decodeGesture,w
  9697  045C  1D03               	skipz
  9698  045D  2C60               	goto	u265_25
  9699  045E  3001               	movlw	1
  9700  045F  0260               	subwf	_gesture_lr_delta_,w
  9701  0460                     u265_25:	
  9702  0460  1803               	skipnc
  9703  0461  2C6F               	goto	i1l3083
  9704  0462  0020               	movlb	0	; select bank0
  9705  0463  0960               	comf	_gesture_lr_delta_,w
  9706  0464  00F0               	movwf	??_decodeGesture
  9707  0465  0961               	comf	_gesture_lr_delta_+1,w
  9708  0466  00F1               	movwf	??_decodeGesture+1
  9709  0467  0AF0               	incf	??_decodeGesture,f
  9710  0468  1903               	skipnz
  9711  0469  0AF1               	incf	??_decodeGesture+1,f
  9712  046A  0870               	movf	??_decodeGesture,w
  9713  046B  00AE               	movwf	_decodeGesture$790
  9714  046C  0871               	movf	??_decodeGesture+1,w
  9715  046D  00AF               	movwf	_decodeGesture$790+1
  9716  046E  2C74               	goto	i1l717
  9717  046F                     i1l3083:	
  9718  046F  0020               	movlb	0	; select bank0
  9719  0470  0861               	movf	_gesture_lr_delta_+1,w
  9720  0471  00AF               	movwf	_decodeGesture$790+1
  9721  0472  0860               	movf	_gesture_lr_delta_,w
  9722  0473  00AE               	movwf	_decodeGesture$790
  9723  0474                     i1l717:	
  9724  0474  082F               	movf	_decodeGesture$790+1,w
  9725  0475  3A80               	xorlw	128
  9726  0476  00F0               	movwf	??_decodeGesture
  9727  0477  082D               	movf	_decodeGesture$789+1,w
  9728  0478  3A80               	xorlw	128
  9729  0479  0270               	subwf	??_decodeGesture,w
  9730  047A  1D03               	skipz
  9731  047B  2C7E               	goto	u266_25
  9732  047C  082C               	movf	_decodeGesture$789,w
  9733  047D  022E               	subwf	_decodeGesture$790,w
  9734  047E                     u266_25:	
  9735  047E  1C03               	btfss	3,0
  9736  047F  2B21               	goto	i1l3003
  9737  0480  2B2B               	goto	i1l3009
  9738  0481                     i1l3089:	
  9739                           
  9740                           ;APDS9960.c: 836: return 0;
  9741  0481  3000               	movlw	0
  9742  0482  0008               	return
  9743  0483                     i1l3093:	
  9744                           
  9745                           ;APDS9960.c: 837: };APDS9960.c: 839: return 1;
  9746  0483  3001               	movlw	1
  9747  0484  0008               	return
  9748  0485                     __end_of_decodeGesture:	
  9749                           
  9750                           	psect	text60
  9751  0C38                     __ptext60:	
  9752 ;; *************** function _mssp2_clearIRQ *****************
  9753 ;; Defined at:
  9754 ;;		line 53 in file "mcc_generated_files/i2c2_driver.c"
  9755 ;; Parameters:    Size  Location     Type
  9756 ;;		None
  9757 ;; Auto vars:     Size  Location     Type
  9758 ;;		None
  9759 ;; Return value:  Size  Location     Type
  9760 ;;                  1    wreg      void 
  9761 ;; Registers used:
  9762 ;;		None
  9763 ;; Tracked objects:
  9764 ;;		On entry : 0/0
  9765 ;;		On exit  : 0/0
  9766 ;;		Unchanged: 0/0
  9767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9768 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9769 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9770 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9771 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9772 ;;Total ram usage:        0 bytes
  9773 ;; Hardware stack levels used:    1
  9774 ;; This function calls:
  9775 ;;		Nothing
  9776 ;; This function is called by:
  9777 ;;		_handleGesture
  9778 ;; This function uses a non-reentrant model
  9779 ;;
  9780                           
  9781                           
  9782                           ;psect for function _mssp2_clearIRQ
  9783  0C38                     _mssp2_clearIRQ:	
  9784                           
  9785                           ;i2c2_driver.c: 55: PIR2bits.SSP2IF = 0;
  9786                           
  9787                           ;incstack = 0
  9788                           ; Regs used in _mssp2_clearIRQ: []
  9789  0C38  0020               	movlb	0	; select bank0
  9790  0C39  1192               	bcf	18,3	;volatile
  9791  0C3A  0008               	return
  9792  0C3B                     __end_of_mssp2_clearIRQ:	
  9793                           
  9794                           	psect	text61
  9795  0C6F                     __ptext61:	
  9796 ;; *************** function _LEDs_SetLow *****************
  9797 ;; Defined at:
  9798 ;;		line 97 in file "main.c"
  9799 ;; Parameters:    Size  Location     Type
  9800 ;;		None
  9801 ;; Auto vars:     Size  Location     Type
  9802 ;;		None
  9803 ;; Return value:  Size  Location     Type
  9804 ;;                  1    wreg      void 
  9805 ;; Registers used:
  9806 ;;		None
  9807 ;; Tracked objects:
  9808 ;;		On entry : 0/0
  9809 ;;		On exit  : 0/0
  9810 ;;		Unchanged: 0/0
  9811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9812 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9813 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9814 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9815 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9816 ;;Total ram usage:        0 bytes
  9817 ;; Hardware stack levels used:    1
  9818 ;; This function calls:
  9819 ;;		Nothing
  9820 ;; This function is called by:
  9821 ;;		_handleGesture
  9822 ;; This function uses a non-reentrant model
  9823 ;;
  9824                           
  9825                           
  9826                           ;psect for function _LEDs_SetLow
  9827  0C6F                     _LEDs_SetLow:	
  9828                           
  9829                           ;incstack = 0
  9830                           ; Regs used in _LEDs_SetLow: []
  9831                           ;main.c: 99: do { LATCbits.LATC5 = 0; } while(0);
  9832  0C6F  0022               	movlb	2	; select bank2
  9833  0C70  128E               	bcf	14,5	;volatile
  9834                           
  9835                           ;main.c: 100: do { LATAbits.LATA2 = 0; } while(0);
  9836  0C71  110C               	bcf	12,2	;volatile
  9837                           
  9838                           ;main.c: 101: do { LATAbits.LATA1 = 0; } while(0);
  9839  0C72  108C               	bcf	12,1	;volatile
  9840                           
  9841                           ;main.c: 102: do { LATAbits.LATA5 = 0; } while(0);
  9842  0C73  128C               	bcf	12,5	;volatile
  9843  0C74  0008               	return
  9844  0C75                     __end_of_LEDs_SetLow:	
  9845  007E                     btemp	set	126	;btemp
  9846  007E                     int$flags	set	126
  9847  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         92
    Persistent  34
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     48      73
    BANK1            80     64      64
    BANK2            80     64      64
    BANK3            80     13      13
    BANK4            80      0      68
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    wireReadDataBlock@val	PTR unsigned char  size(2) Largest target is 64
		 -> readGesture@fifo_data2(BANK1[64]), readGesture@fifo_data(BANK2[64]), 

    i2c2_driver_setI2cISR@handler	PTR FTN()void  size(2) Largest target is 1
		 -> handleGesture(), 

    i2c2_driver_i2cISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), handleGesture(), 

    i2c2_driver_busCollisionISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _readGesture->_processGestureData
    i1_getMode->i1_wireReadDataByte
    _wireReadDataBlock->i1_i2c2_driver_setAddr
    _processGestureData->___awdiv
    ___awdiv->___wmul
    _isGestureAvailable->i1_wireReadDataByte
    i1_wireReadDataByte->i1_i2c2_driver_setAddr

Critical Paths under _main in BANK0

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    _INTERRUPT_InterruptManager->_handleGesture
    _handleGesture->_readGesture
    _readGesture->_processGestureData
    _processGestureData->___awdiv

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    _handleGesture->_readGesture

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    _handleGesture->_readGesture

Critical Paths under _main in BANK3

    _main->_enableGestureSensor
    _main->_initialize
    _initialize->_setMode
    _setProximityGain->_wireWriteDataByte
    _setProxIntLowThresh->_wireWriteDataByte
    _setProxIntHighThresh->_wireWriteDataByte
    _setLightIntLowThreshold->_wireWriteDataByte
    _setLightIntHighThreshold->_wireWriteDataByte
    _setLEDDrive->_wireWriteDataByte
    _setGestureWaitTime->_wireWriteDataByte
    _setGestureLEDDrive->_wireWriteDataByte
    _setGestureGain->_wireWriteDataByte
    _setGestureExitThresh->_wireWriteDataByte
    _setGestureEnterThresh->_wireWriteDataByte
    _setAmbientLightGain->_wireWriteDataByte
    _enableGestureSensor->_setMode
    _setLEDBoost->_wireWriteDataByte
    _setGestureMode->_wireWriteDataByte
    _setGestureIntEnable->_wireWriteDataByte
    _enablePower->_setMode
    _setMode->_getMode
    _wireWriteDataByte->_i2c2_driver_TXData
    _wireWriteDataByte->_i2c2_driver_setAddr
    _getMode->_wireReadDataByte
    _wireReadDataByte->_i2c2_driver_setAddr

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   66788
                  _SYSTEM_Initialize
                _enableGestureSensor
                        _enablePower
              _i2c2_driver_setI2cISR
                         _initialize
                    _mssp2_enableIRQ
 ---------------------------------------------------------------------------------
 (1) _mssp2_enableIRQ                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initialize                                           2     2      0   44487
                                             11 BANK3      2     2      0
                   _i2c2_driver_open
                _setAmbientLightGain
              _setGestureEnterThresh
               _setGestureExitThresh
                     _setGestureGain
                _setGestureIntEnable
                 _setGestureLEDDrive
                 _setGestureWaitTime
                        _setLEDDrive
           _setLightIntHighThreshold
            _setLightIntLowThreshold
                            _setMode
               _setProxIntHighThresh
                _setProxIntLowThresh
                   _setProximityGain
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setProximityGain                                     4     4      0    2962
                                              5 BANK3      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setProxIntLowThresh                                  2     2      0    2846
                                              5 BANK3      2     2      0
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setProxIntHighThresh                                 2     2      0    2846
                                              5 BANK3      2     2      0
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setLightIntLowThreshold                              5     3      2    2990
                                              5 BANK3      5     3      2
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setLightIntHighThreshold                             5     3      2    2990
                                              5 BANK3      5     3      2
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setLEDDrive                                          4     4      0    2962
                                              5 BANK3      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureWaitTime                                   3     3      0    2939
                                              5 BANK3      3     3      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureLEDDrive                                   4     4      0    2962
                                              5 BANK3      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureGain                                       4     4      0    2962
                                              5 BANK3      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureExitThresh                                 2     2      0    2846
                                              5 BANK3      2     2      0
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureEnterThresh                                2     2      0    2846
                                              5 BANK3      2     2      0
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setAmbientLightGain                                  3     3      0    2939
                                              5 BANK3      3     3      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _i2c2_driver_open                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _i2c2_driver_setI2cISR                                2     0      2      98
                                              0 BANK3      2     0      2
 ---------------------------------------------------------------------------------
 (1) _enableGestureSensor                                  2     2      0   18705
                                             11 BANK3      2     2      0
                        _enablePower
             _resetGestureParameters
                _setGestureIntEnable
                     _setGestureMode
                        _setLEDBoost
                            _setMode
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setLEDBoost                                          4     4      0    2962
                                              5 BANK3      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureMode                                       3     3      0    2939
                                              5 BANK3      3     3      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureIntEnable                                  3     3      0    2962
                                              5 BANK3      3     3      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _resetGestureParameters                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _enablePower                                          0     0      0    3498
                            _setMode
 ---------------------------------------------------------------------------------
 (2) _setMode                                              5     4      1    3498
                                              6 BANK3      5     4      1
                            _getMode
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _wireWriteDataByte                                    4     1      3    2824
                                              1 BANK3      4     1      3
                 _i2c2_driver_TXData
                _i2c2_driver_setAddr
                  _i2c2_driver_start
                   _i2c2_driver_stop
 ---------------------------------------------------------------------------------
 (3) _i2c2_driver_TXData                                   1     1      0      22
                                              0 BANK3      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMode                                              2     2      0      90
                                              4 BANK3      2     2      0
                   _wireReadDataByte
 ---------------------------------------------------------------------------------
 (2) _wireReadDataByte                                     3     3      0      67
                                              1 BANK3      3     3      0
              _i2c2_driver_getRXData
                 _i2c2_driver_isNACK
                _i2c2_driver_restart
                _i2c2_driver_setAddr
                  _i2c2_driver_start
                _i2c2_driver_startRX
                   _i2c2_driver_stop
 ---------------------------------------------------------------------------------
 (3) _i2c2_driver_stop                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2c2_driver_startRX                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2c2_driver_start                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2c2_driver_setAddr                                  1     1      0      22
                                              0 BANK3      1     1      0
 ---------------------------------------------------------------------------------
 (3) _i2c2_driver_restart                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2c2_driver_isNACK                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _i2c2_driver_getRXData                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PMD_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PMD_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _INTERRUPT_InterruptManager                           0     0      0    4653
                   Absolute function *
                      _handleGesture *
 ---------------------------------------------------------------------------------
 (8) _handleGesture                                        2     2      0    4653
                                             46 BANK0      2     2      0
                        _LEDs_SetLow
                 _isGestureAvailable
                     _mssp2_clearIRQ
                        _readGesture
 ---------------------------------------------------------------------------------
 (9) _readGesture                                        140   138      2    4562
                                             34 BANK0     12    10      2
                                              0 BANK1     64    64      0
                                              0 BANK2     64    64      0
                      _decodeGesture
                 _isGestureAvailable
                 _processGestureData
                  _wireReadDataBlock
                          i1_getMode
           i1_resetGestureParameters
                 i1_wireReadDataByte
 ---------------------------------------------------------------------------------
 (10) i1_resetGestureParameters                            0     0      0       0
 ---------------------------------------------------------------------------------
 (10) i1_getMode                                           2     2      0      90
                                              4 COMMON     2     2      0
                 i1_wireReadDataByte
 ---------------------------------------------------------------------------------
 (10) _wireReadDataBlock                                  11     7      4     461
                                              1 COMMON    11     7      4
               _i2c2_driver_sendNACK
            i1_i2c2_driver_getRXData
              i1_i2c2_driver_restart
              i1_i2c2_driver_setAddr
                i1_i2c2_driver_start
              i1_i2c2_driver_startRX
                 i1_i2c2_driver_stop
 ---------------------------------------------------------------------------------
 (11) _i2c2_driver_sendNACK                                0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _processGestureData                                 32    32      0    3204
                                             11 COMMON     2     2      0
                                              4 BANK0     30    30      0
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (11) ___wmul                                              6     2      4     700
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (11) ___awdiv                                             9     5      4     908
                                              6 COMMON     5     1      4
                                              0 BANK0      4     4      0
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (10) _isGestureAvailable                                  2     2      0      91
                                              4 COMMON     2     2      0
                 i1_wireReadDataByte
 ---------------------------------------------------------------------------------
 (10) i1_wireReadDataByte                                  3     3      0      67
                                              1 COMMON     3     3      0
            i1_i2c2_driver_getRXData
               i1_i2c2_driver_isNACK
              i1_i2c2_driver_restart
              i1_i2c2_driver_setAddr
                i1_i2c2_driver_start
              i1_i2c2_driver_startRX
                 i1_i2c2_driver_stop
 ---------------------------------------------------------------------------------
 (11) i1_i2c2_driver_stop                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (11) i1_i2c2_driver_startRX                               0     0      0       0
 ---------------------------------------------------------------------------------
 (11) i1_i2c2_driver_start                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (11) i1_i2c2_driver_setAddr                               1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) i1_i2c2_driver_restart                               0     0      0       0
 ---------------------------------------------------------------------------------
 (11) i1_i2c2_driver_isNACK                                0     0      0       0
 ---------------------------------------------------------------------------------
 (11) i1_i2c2_driver_getRXData                             0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _decodeGesture                                      18    18      0     192
                                              0 COMMON     2     2      0
                                              0 BANK0     16    16      0
 ---------------------------------------------------------------------------------
 (9) _mssp2_clearIRQ                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _LEDs_SetLow                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (8) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PMD_Initialize
     _WDT_Initialize
   _enableGestureSensor
     _enablePower
       _setMode
         _getMode
           _wireReadDataByte
             _i2c2_driver_getRXData
             _i2c2_driver_isNACK
             _i2c2_driver_restart
             _i2c2_driver_setAddr
             _i2c2_driver_start
             _i2c2_driver_startRX
             _i2c2_driver_stop
         _wireWriteDataByte
           _i2c2_driver_TXData
           _i2c2_driver_setAddr
           _i2c2_driver_start
           _i2c2_driver_stop
     _resetGestureParameters
     _setGestureIntEnable
       _wireReadDataByte
         _i2c2_driver_getRXData
         _i2c2_driver_isNACK
         _i2c2_driver_restart
         _i2c2_driver_setAddr
         _i2c2_driver_start
         _i2c2_driver_startRX
         _i2c2_driver_stop
       _wireWriteDataByte
         _i2c2_driver_TXData
         _i2c2_driver_setAddr
         _i2c2_driver_start
         _i2c2_driver_stop
     _setGestureMode
       _wireReadDataByte
         _i2c2_driver_getRXData
         _i2c2_driver_isNACK
         _i2c2_driver_restart
         _i2c2_driver_setAddr
         _i2c2_driver_start
         _i2c2_driver_startRX
         _i2c2_driver_stop
       _wireWriteDataByte
         _i2c2_driver_TXData
         _i2c2_driver_setAddr
         _i2c2_driver_start
         _i2c2_driver_stop
     _setLEDBoost
       _wireReadDataByte
         _i2c2_driver_getRXData
         _i2c2_driver_isNACK
         _i2c2_driver_restart
         _i2c2_driver_setAddr
         _i2c2_driver_start
         _i2c2_driver_startRX
         _i2c2_driver_stop
       _wireWriteDataByte
         _i2c2_driver_TXData
         _i2c2_driver_setAddr
         _i2c2_driver_start
         _i2c2_driver_stop
     _setMode
       _getMode
         _wireReadDataByte
           _i2c2_driver_getRXData
           _i2c2_driver_isNACK
           _i2c2_driver_restart
           _i2c2_driver_setAddr
           _i2c2_driver_start
           _i2c2_driver_startRX
           _i2c2_driver_stop
       _wireWriteDataByte
         _i2c2_driver_TXData
         _i2c2_driver_setAddr
         _i2c2_driver_start
         _i2c2_driver_stop
     _wireWriteDataByte
       _i2c2_driver_TXData
       _i2c2_driver_setAddr
       _i2c2_driver_start
       _i2c2_driver_stop
   _enablePower
     _setMode
       _getMode
         _wireReadDataByte
           _i2c2_driver_getRXData
           _i2c2_driver_isNACK
           _i2c2_driver_restart
           _i2c2_driver_setAddr
           _i2c2_driver_start
           _i2c2_driver_startRX
           _i2c2_driver_stop
       _wireWriteDataByte
         _i2c2_driver_TXData
         _i2c2_driver_setAddr
         _i2c2_driver_start
         _i2c2_driver_stop
   _i2c2_driver_setI2cISR
   _initialize
     _i2c2_driver_open
     _setAmbientLightGain
       _wireReadDataByte
         _i2c2_driver_getRXData
         _i2c2_driver_isNACK
         _i2c2_driver_restart
         _i2c2_driver_setAddr
         _i2c2_driver_start
         _i2c2_driver_startRX
         _i2c2_driver_stop
       _wireWriteDataByte
         _i2c2_driver_TXData
         _i2c2_driver_setAddr
         _i2c2_driver_start
         _i2c2_driver_stop
     _setGestureEnterThresh
       _wireWriteDataByte
         _i2c2_driver_TXData
         _i2c2_driver_setAddr
         _i2c2_driver_start
         _i2c2_driver_stop
     _setGestureExitThresh
       _wireWriteDataByte
         _i2c2_driver_TXData
         _i2c2_driver_setAddr
         _i2c2_driver_start
         _i2c2_driver_stop
     _setGestureGain
       _wireReadDataByte
         _i2c2_driver_getRXData
         _i2c2_driver_isNACK
         _i2c2_driver_restart
         _i2c2_driver_setAddr
         _i2c2_driver_start
         _i2c2_driver_startRX
         _i2c2_driver_stop
       _wireWriteDataByte
         _i2c2_driver_TXData
         _i2c2_driver_setAddr
         _i2c2_driver_start
         _i2c2_driver_stop
     _setGestureIntEnable
       _wireReadDataByte
         _i2c2_driver_getRXData
         _i2c2_driver_isNACK
         _i2c2_driver_restart
         _i2c2_driver_setAddr
         _i2c2_driver_start
         _i2c2_driver_startRX
         _i2c2_driver_stop
       _wireWriteDataByte
         _i2c2_driver_TXData
         _i2c2_driver_setAddr
         _i2c2_driver_start
         _i2c2_driver_stop
     _setGestureLEDDrive
       _wireReadDataByte
         _i2c2_driver_getRXData
         _i2c2_driver_isNACK
         _i2c2_driver_restart
         _i2c2_driver_setAddr
         _i2c2_driver_start
         _i2c2_driver_startRX
         _i2c2_driver_stop
       _wireWriteDataByte
         _i2c2_driver_TXData
         _i2c2_driver_setAddr
         _i2c2_driver_start
         _i2c2_driver_stop
     _setGestureWaitTime
       _wireReadDataByte
         _i2c2_driver_getRXData
         _i2c2_driver_isNACK
         _i2c2_driver_restart
         _i2c2_driver_setAddr
         _i2c2_driver_start
         _i2c2_driver_startRX
         _i2c2_driver_stop
       _wireWriteDataByte
         _i2c2_driver_TXData
         _i2c2_driver_setAddr
         _i2c2_driver_start
         _i2c2_driver_stop
     _setLEDDrive
       _wireReadDataByte
         _i2c2_driver_getRXData
         _i2c2_driver_isNACK
         _i2c2_driver_restart
         _i2c2_driver_setAddr
         _i2c2_driver_start
         _i2c2_driver_startRX
         _i2c2_driver_stop
       _wireWriteDataByte
         _i2c2_driver_TXData
         _i2c2_driver_setAddr
         _i2c2_driver_start
         _i2c2_driver_stop
     _setLightIntHighThreshold
       _wireWriteDataByte
         _i2c2_driver_TXData
         _i2c2_driver_setAddr
         _i2c2_driver_start
         _i2c2_driver_stop
     _setLightIntLowThreshold
       _wireWriteDataByte
         _i2c2_driver_TXData
         _i2c2_driver_setAddr
         _i2c2_driver_start
         _i2c2_driver_stop
     _setMode
       _getMode
         _wireReadDataByte
           _i2c2_driver_getRXData
           _i2c2_driver_isNACK
           _i2c2_driver_restart
           _i2c2_driver_setAddr
           _i2c2_driver_start
           _i2c2_driver_startRX
           _i2c2_driver_stop
       _wireWriteDataByte
         _i2c2_driver_TXData
         _i2c2_driver_setAddr
         _i2c2_driver_start
         _i2c2_driver_stop
     _setProxIntHighThresh
       _wireWriteDataByte
         _i2c2_driver_TXData
         _i2c2_driver_setAddr
         _i2c2_driver_start
         _i2c2_driver_stop
     _setProxIntLowThresh
       _wireWriteDataByte
         _i2c2_driver_TXData
         _i2c2_driver_setAddr
         _i2c2_driver_start
         _i2c2_driver_stop
     _setProximityGain
       _wireReadDataByte
         _i2c2_driver_getRXData
         _i2c2_driver_isNACK
         _i2c2_driver_restart
         _i2c2_driver_setAddr
         _i2c2_driver_start
         _i2c2_driver_startRX
         _i2c2_driver_stop
       _wireWriteDataByte
         _i2c2_driver_TXData
         _i2c2_driver_setAddr
         _i2c2_driver_start
         _i2c2_driver_stop
     _wireReadDataByte
       _i2c2_driver_getRXData
       _i2c2_driver_isNACK
       _i2c2_driver_restart
       _i2c2_driver_setAddr
       _i2c2_driver_start
       _i2c2_driver_startRX
       _i2c2_driver_stop
     _wireWriteDataByte
       _i2c2_driver_TXData
       _i2c2_driver_setAddr
       _i2c2_driver_start
       _i2c2_driver_stop
   _mssp2_enableIRQ

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _handleGesture *
     _LEDs_SetLow
     _isGestureAvailable
       i1_wireReadDataByte
         i1_i2c2_driver_getRXData
         i1_i2c2_driver_isNACK
         i1_i2c2_driver_restart
         i1_i2c2_driver_setAddr
         i1_i2c2_driver_start
         i1_i2c2_driver_startRX
         i1_i2c2_driver_stop
     _mssp2_clearIRQ
     _readGesture
       _decodeGesture
       _isGestureAvailable
         i1_wireReadDataByte
           i1_i2c2_driver_getRXData
           i1_i2c2_driver_isNACK
           i1_i2c2_driver_restart
           i1_i2c2_driver_setAddr
           i1_i2c2_driver_start
           i1_i2c2_driver_startRX
           i1_i2c2_driver_stop
       _processGestureData
         ___awdiv
           ___wmul (ARG)
         ___wmul
       _wireReadDataBlock
         _i2c2_driver_sendNACK
         i1_i2c2_driver_getRXData
         i1_i2c2_driver_restart
         i1_i2c2_driver_setAddr
         i1_i2c2_driver_start
         i1_i2c2_driver_startRX
         i1_i2c2_driver_stop
       i1_getMode
         i1_wireReadDataByte
           i1_i2c2_driver_getRXData
           i1_i2c2_driver_isNACK
           i1_i2c2_driver_restart
           i1_i2c2_driver_setAddr
           i1_i2c2_driver_start
           i1_i2c2_driver_startRX
           i1_i2c2_driver_stop
       i1_resetGestureParameters
       i1_wireReadDataByte
         i1_i2c2_driver_getRXData
         i1_i2c2_driver_isNACK
         i1_i2c2_driver_restart
         i1_i2c2_driver_setAddr
         i1_i2c2_driver_start
         i1_i2c2_driver_startRX
         i1_i2c2_driver_stop

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     30      49       5       91.3%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     40      40       7       80.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     40      40       9       80.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      D       D      11       16.3%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      44      13       85.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     128      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     128      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Sun Feb 24 01:41:43 2019

                                  _t 0050                ?_setGestureExitThresh 0070  
                        __CFG_CP$OFF 0000                         ___awdiv@sign 0021  
                                 _id 0052                  ___wmul@multiplicand 0072  
                        __CFG_LVP$ON 0000       __size_of_i2c2_driver_getRXData 0003  
                                l323 0DAE     processGestureData@ud_ratio_first 0024  
                       __CFG_CPD$OFF 0000        __end_of_i2c2_driver_getRXData 0C50  
              __end_of_decodeGesture 0485              __size_of_PMD_Initialize 0008  
   __size_ofi1_i2c2_driver_getRXData 0003                                  wreg 0009  
         __size_of_i2c2_driver_start 0003          __size_of_i2c2_driver_TXData 0006  
                               l3313 0E73                                 l3165 0CD4  
                               l3333 0CF9                                 l3317 0E75  
                               l3415 0F26                                 l3343 0D0C  
                               l3361 0FB7                                 l3273 0D32  
                               l3435 0F85                                 l3283 0D1F  
                               l3453 0E34                                 l3293 0E9A  
                               l3297 0E9C                                 l3481 0498  
                               l2763 073C                                 l3379 07FE  
                               l3581 06AF                                 l3397 0E5B  
                               l2783 076F                                 l2775 0756  
                               l2767 073E                                 l2785 0770  
                               l2777 0763                                 _LATA 010C  
                               _LATB 010D                                 _LATC 010E  
                               u2905 07DF                                 u1874 074F  
                               u1875 074E                                 u1884 075B  
                               _PMD0 0911                                 i1l21 0018  
                               u1885 075A                                 _PMD1 0912  
                               _PMD2 0913                                 _PMD3 0914  
                               _PMD4 0915                                 u2945 0F66  
                               u2785 0EBC                                 _PMD5 0916  
                               u2795 0EE5                                 u2885 0F98  
                               _WPUA 020C                                 _WPUB 020D  
                               _WPUC 020E                         __CFG_WRT$OFF 0000  
                      __CFG_FCMEN$ON 0000          __size_of_i2c2_driver_isNACK 0003  
                               _main 0D94                                 fsr0h 0005  
                               fsr1h 0007                                 indf0 0000  
                               fsr0l 0004                                 indf1 0001  
                               fsr1l 0006                                 btemp 007E  
              ??_setGestureIntEnable 01A5                        __CFG_BOREN$ON 0000  
                      __CFG_BORV$LOW 0000       __size_of_i2c2_driver_setI2cISR 0009  
                               start 001A        __end_of_i2c2_driver_setI2cISR 0CB2  
                      __CFG_CSWEN$ON 0000                        __CFG_MCLRE$ON 0000  
         __end_ofi1_wireReadDataByte 0DEC                         ?_readGesture 0042  
     __size_of_OSCILLATOR_Initialize 0009                         ?_LEDs_SetLow 0070  
      __end_of_OSCILLATOR_Initialize 0CA0                                ?_main 0070  
                    __end_of___awdiv 0730                        __CFG_WDTE$OFF 0000  
                    ___awdiv@divisor 0076                       __CFG_DEBUG$OFF 0000  
                              i1l701 0408                                i1l632 0206  
                              i1l713 0457                                i1l705 0425  
                              i1l609 004F                                i1l651 02A1  
                              i1l644 0282                                i1l636 022F  
                              i1l717 0474                                i1l638 0254  
                              i1l655 02CA                                i1l656 02E2  
                              i1l681 0381                                i1l693 03D2  
                              i1l677 0364                                i1l689 03B5  
                              i1l883 0D66                         ?_setLEDBoost 0070  
                    ___awdiv@counter 0020                         ?_setLEDDrive 0070  
                     _setGestureGain 0F87                                _OSCEN 091D  
                 wireReadDataBlock@j 007B                       _setGestureMode 0E0F  
                              _TRISA 008C                                _TRISB 008D  
                              _TRISC 008E          __end_of_setProxIntLowThresh 0D34  
                    __end_of_getMode 0CA9                isGestureAvailable@val 0075  
                 i1_i2c2_driver_stop 0C4A                       _WDT_Initialize 0C66  
                   _b_i2c_error_flag 007D         __end_of_setProxIntHighThresh 0D21  
                    __end_of_setMode 077F                                pclath 000A  
       __size_of_setAmbientLightGain 001E                                status 0003  
                ?i1_i2c2_driver_stop 0070         __size_of_i2c2_driver_setAddr 0006  
                              wtemp0 007E              __size_of_mssp2_clearIRQ 0003  
           ?_setLightIntLowThreshold 01A5           __end_of_setGestureLEDDrive 0800  
       __size_of_i2c2_driver_restart 0003                setGestureWaitTime@val 01A7  
       __size_of_i2c2_driver_startRX 0003                   __size_ofi1_getMode 0008  
                      _gesture_data_ 0220                      __initialization 001C  
             ??_setGestureExitThresh 01A5           processGestureData@lr_delta 003E  
                       __end_of_main 0DAF                    _handleGestureFlag 0066  
         processGestureData@ud_delta 003C          ?_INTERRUPT_InterruptManager 0070  
             __end_of_setGestureGain 0FB9            __size_of_setProximityGain 0029  
             __end_of_setGestureMode 0E36                 ??i1_i2c2_driver_stop 0070  
                             ??_main 01AD             __end_of_i2c2_driver_open 0CBC  
           __end_of_i2c2_driver_stop 0C5F    __size_of_setLightIntHighThreshold 0027  
             __end_of_WDT_Initialize 0C6A            ?_setLightIntHighThreshold 01A5  
  setLightIntHighThreshold@threshold 01A5                 __size_of_enablePower 000E  
                   ___awdiv@dividend 0078                   _processGestureData 0030  
                             _ANSELA 018C                               _ANSELB 018D  
                             _ANSELC 018E         setProxIntLowThresh@threshold 01A6  
                             _RC4PPS 0EA4                               i1l3011 032D  
                             i1l3003 0321                               i1l3005 0323  
                             i1l3015 0337                               i1l3025 035F  
                             i1l3017 033D                               i1l3009 032B  
                             i1l3201 05DD                               _ODCONA 028C  
                             _ODCONB 028D                               i1l3043 03B0  
                             i1l3035 038E                               _RC6PPS 0EA6  
                             _ODCONC 028E                               i1l3061 0403  
                             i1l3053 03DF                               i1l3029 037C  
                             u200_25 005A                               i1l3213 05EB  
                             i1l3071 0432                               i1l3047 03CD  
                             i1l3215 064C                               i1l3065 0420  
                             i1l3083 046F                               i1l3219 0655  
                             i1l3093 0483                               i1l3079 0452  
                             i1l3175 05A3                               i1l3089 0481  
                             i1l3193 05BA                               i1l3185 05A7  
                             i1l2723 072B                               i1l2715 071A  
                             i1l2707 06FC                               i1l3179 0658  
                             i1l2709 0708                               i1l2901 01BC  
                             u210_25 01A0                               i1l3621 07A1  
                             i1l3613 078E                               i1l2719 0723  
                             i1l2671 0D60                               i1l2911 01E1  
                             i1l2831 0040                               i1l2815 0FC6  
                             i1l3615 079C                               i1l2905 01CC  
                             i1l2817 0FF6                               i1l3633 07AD  
                             i1l3609 0789                               i1l2755 0CE6  
                             i1l2691 06E9                               i1l2827 003E  
                             i1l3627 07A7                               i1l3643 07B4  
                             i1l2933 0248                               i1l2925 022A  
                             i1l2909 01DE                               u211_25 01B1  
                             i1l3637 07B2                               i1l3645 07CB  
                             i1l2919 0201                               i1l2863 00C0  
                             i1l2847 004B                               i1l2697 06F4  
                             i1l2937 0250                               i1l2849 00A5  
                             i1l2881 010A                               i1l2947 0276  
                             i1l2955 0284                               i1l2965 02C5  
                             u212_25 01C5                               i1l2877 00BC  
                             i1l3693 07BD                               i1l2959 029C  
                             i1l2895 01A7                               i1l2993 030D  
                             i1l2987 0302                               i1l2899 01B9  
                             i1l2997 0317                               u213_25 01D6  
                             i1l2999 0319                               u230_25 028D  
                             u231_25 02AA                               u232_25 02B6  
                             u224_25 025D                               u216_25 01F2  
                             u233_25 02D3                               u225_25 0269  
                             u217_25 020F                               u250_25 036D  
                             u170_25 0D67                               u218_25 021B  
                             u251_25 038B                               u171_25 0D6C  
                             u219_25 0238                               u260_25 0411  
                             u180_25 071B                               u236_25 02EB  
                             u261_25 042F                               u254_25 03A1  
                             u334_27 0794                               u255_25 03BE  
                             u335_27 065C                               u264_25 0443  
                             u256_25 03DC                               u176_25 06FF  
                             u192_25 0FCF                               u336_27 066E  
                             u265_25 0460                               u249_25 0350  
                             u266_25 047E                               u178_25 0709  
                             u259_25 03F4                               u179_25 0713  
                             u275_25 05E6                     _wireReadDataByte 0DEC  
                             u276_25 05F5                               _OSCFRQ 091F  
            ?_resetGestureParameters 0070                               _WDTCON 0097  
                ?_processGestureData 0070                    _gesture_lr_delta_ 0060  
                     __CFG_PWRTE$OFF 0000        setProxIntHighThresh@threshold 01A6  
                  _gesture_lr_count_ 005C                  wireReadDataByte@reg 01A2  
                wireReadDataByte@val 01A3              ??i1_i2c2_driver_setAddr 0070  
                  _gesture_ud_delta_ 0062           __end_of_isGestureAvailable 0CE8  
                  _gesture_ud_count_ 005E                               ___wmul 0D5E  
                          ??___awdiv 007A           __end_of_setGestureWaitTime 0E5D  
                     __CFG_STVREN$ON 0000                  i1_i2c2_driver_start 0C44  
            ??i1_i2c2_driver_restart 0070              ??i1_i2c2_driver_startRX 0070  
                   ___awdiv@quotient 0022                      ?_setGestureGain 0070  
                          ??_getMode 01A4                      ?_setGestureMode 0070  
            ??_setGestureEnterThresh 01A5                 ??_processGestureData 007B  
            i1_i2c2_driver_getRXData 0C3B                       _PMD_Initialize 0C8F  
       __end_ofi1_i2c2_driver_isNACK 0C41                            ??_setMode 01A7  
                    ?_WDT_Initialize 0070                    __end_ofi1_getMode 0C8F  
                  readGesture@motion 0046                 ?i1_i2c2_driver_start 0070  
      __size_of_i2c2_driver_sendNACK 0004       __end_of_resetGestureParameters 0D5E  
                  _SYSTEM_Initialize 0CBC              __end_of__initialization 002C  
           __size_of_mssp2_enableIRQ 0003                   ?_SYSTEM_Initialize 0070  
  __size_ofi1_resetGestureParameters 0015            ?i1_resetGestureParameters 0070  
             setGestureWaitTime@time 01A6                       __pcstackCOMMON 0070  
                ??_SYSTEM_Initialize 01A0                 _setProxIntHighThresh 0D0E  
                     _gesture_state_ 0056               __end_of_PMD_Initialize 0C97  
               __size_of_readGesture 00EE                __end_of_handleGesture 07CE  
               __size_of_LEDs_SetLow 0006                   _gesture_far_count_ 0058  
               __size_of_setLEDBoost 0032                 __size_of_setLEDDrive 0029  
              ??i1_i2c2_driver_start 0070            __end_of_SYSTEM_Initialize 0CC8  
                         __pbssBANK0 0050                           __pbssBANK4 0220  
               wireWriteDataByte@reg 01A4                 wireWriteDataByte@val 01A1  
                getMode@enable_value 01A5                       _mssp2_clearIRQ 0C38  
                         __pmaintext 0D94              setGestureLEDDrive@drive 01A8  
                            ?___wmul 0070                      __CFG_PPS1WAY$ON 0000  
       __size_of_enableGestureSensor 005C                           __pintentry 0004  
              ?_setProxIntHighThresh 0070            ??i1_i2c2_driver_getRXData 0070  
        _i2c2_driver_busCollisionISR 0064                     _setProximityGain 0ED4  
                        setMode@mode 01AA                      ?_PMD_Initialize 0070  
                _setAmbientLightGain 0DAF                  __CFG_RSTOSC$HFINT32 0000  
                _i2c2_driver_setAddr 0C75                  _i2c2_driver_restart 0C53  
         __end_of_i2c2_driver_TXData 0C81                    _wireReadDataBlock 0FB9  
                _i2c2_driver_startRX 0C59                              _OSCCON1 0919  
                            _OSCCON3 091B                   i1_wireReadDataByte 0DCD  
              _i2c2_driver_getRXData 0C4D                              _OSCTUNE 091E  
               wireReadDataBlock@len 0073                 wireReadDataBlock@reg 007A  
               wireReadDataBlock@val 0071                              _SSP2ADD 021A  
                            _SLRCONA 030C                              _SLRCONB 030D  
                            _SLRCONC 030E                              _SSP2BUF 0219  
                 ?_wireReadDataBlock 0071                              _SSP2MSK 021B  
        __end_of_setGestureIntEnable 0F28      processGestureData@lr_ratio_last 002A  
         __end_of_i2c2_driver_isNACK 0C53               __end_of_mssp2_clearIRQ 0C3B  
                ?i1_wireReadDataByte 0070                         readGesture@i 004C  
               ?_setAmbientLightGain 0070                 ?_i2c2_driver_setAddr 0070  
                ??_wireReadDataBlock 0075                 ?_i2c2_driver_restart 0070  
               ?_i2c2_driver_startRX 0070                        setMode@enable 01A6  
             __size_of_decodeGesture 018E                 i1_i2c2_driver_isNACK 0C3E  
              _i2c2_driver_setI2cISR 0CA9                              ___awdiv 06DE  
                  ??_mssp2_enableIRQ 01A0                      __size_of___wmul 001B  
               ??i1_wireReadDataByte 0071             __end_of_wireReadDataByte 0E0F  
                         _initialize 0485                              _getMode 0CA0  
   __size_of_setLightIntLowThreshold 0027                   _setGestureLEDDrive 07CE  
                            __ptext1 0C5F                              __ptext2 0485  
                            __ptext3 0ED4                              __ptext4 0D21  
                            __ptext5 0D0E                              __ptext6 0E84  
                            __ptext7 0E5D                              __ptext8 0EAB  
                            __ptext9 0E36            __end_of_wireReadDataBlock 1000  
                  ?_i2c2_driver_open 0070                    ?_i2c2_driver_stop 0070  
              _OSCILLATOR_Initialize 0C97                              _setMode 0730  
           ??_PIN_MANAGER_Initialize 01A0                   ??_i2c2_driver_open 01A0  
                 ??_i2c2_driver_stop 01A0                  ?_setGestureLEDDrive 0070  
         __size_of_SYSTEM_Initialize 000C                              clrloop0 0C82  
               end_of_initialization 002C                      ?_mssp2_clearIRQ 0070  
              ??_setAmbientLightGain 01A5         __size_of_setProxIntLowThresh 0013  
              ??_i2c2_driver_setAddr 01A0                ??_i2c2_driver_restart 01A0  
      enableGestureSensor@interrupts 01AC                ??_i2c2_driver_startRX 01A0  
      setGestureExitThresh@threshold 01A6                ?i1_i2c2_driver_isNACK 0070  
               ??_setGestureLEDDrive 01A5                   readGesture@gstatus 0048  
                       initialize@id 01AC                     ??_setGestureGain 01A5  
             ??_setProxIntHighThresh 01A5                     ??_setGestureMode 01A5  
     __size_ofi1_i2c2_driver_setAddr 0005        __end_ofi1_i2c2_driver_setAddr 0C6F  
      __size_of_setGestureExitThresh 0013       __size_ofi1_i2c2_driver_restart 0003  
      __end_ofi1_i2c2_driver_restart 0C44                     ??_WDT_Initialize 01A0  
     __size_ofi1_i2c2_driver_startRX 0003                    _wireWriteDataByte 0D79  
      __end_ofi1_i2c2_driver_startRX 0C4A          __size_ofi1_i2c2_driver_stop 0003  
                      ??_enablePower 01AB                   ?_wireWriteDataByte 01A1  
    setLightIntHighThreshold@val_low 01A8               ?_i2c2_driver_getRXData 0070  
     __size_of_setGestureEnterThresh 0013        __end_of_setGestureEnterThresh 0CFB  
                      _decodeGesture 02F7                   _isGestureAvailable 0CD6  
   __end_ofi1_resetGestureParameters 0D49                   _setGestureWaitTime 0E36  
                ??_wireWriteDataByte 01A4                     __CFG_FEXTOSC$OFF 0000  
    processGestureData@ud_ratio_last 0028                  ?_isGestureAvailable 0070  
                          i1_getMode 0C87                  ?_setGestureWaitTime 0070  
              setProximityGain@drive 01A8               ?_i2c2_driver_setI2cISR 01A0  
       __end_of_i2c2_driver_sendNACK 0C66            __end_of_wireWriteDataByte 0D94  
               ??_isGestureAvailable 0074                       __end_of___wmul 0D79  
               ??_setGestureWaitTime 01A5                          ?_initialize 0070  
             ?_OSCILLATOR_Initialize 0070             _setLightIntHighThreshold 0E5D  
         __size_of_wireReadDataBlock 0047                      _gesture_motion_ 0054  
        __size_of_processGestureData 02C7                       ?_decodeGesture 0070  
                start_initialization 001C                   setGestureGain@gain 01A8  
    __size_of_PIN_MANAGER_Initialize 002D     setLightIntHighThreshold@val_high 01A9  
                _enableGestureSensor 0682                  __end_of_enablePower 0CD6  
                         ?i1_getMode 0070             __end_of_setProximityGain 0EFD  
           processGestureData@d_last 0035             processGestureData@l_last 0036  
           processGestureData@r_last 0037               ??i1_i2c2_driver_isNACK 0070  
           processGestureData@u_last 0034                     __CFG_LPBOREN$OFF 0000  
                   ??_PMD_Initialize 01A0      setLightIntLowThreshold@val_high 01A9  
                           ??___wmul 0074                 ?_enableGestureSensor 0070  
                      ??_readGesture 0044                   setGestureMode@mode 01A6  
            _setLightIntLowThreshold 0E84            setGestureIntEnable@enable 01A7  
                      ??_LEDs_SetLow 0070             setAmbientLightGain@drive 01A6  
        __end_ofi1_i2c2_driver_start 0C47                        ??_setLEDBoost 01A5  
                      ??_setLEDDrive 01A5               setGestureIntEnable@val 01A6  
                        __pbssCOMMON 007D                            ___latbits 0002  
                      __pcstackBANK0 0020                        __pcstackBANK1 00A0  
                      __pcstackBANK2 0120                        __pcstackBANK3 01A0  
           i1_resetGestureParameters 0D34                readGesture@fifo_data2 00A0  
                    _mssp2_enableIRQ 0C5F                readGesture@fifo_level 004B  
                 _i2c2_driver_TXData 0C7B                  __size_of_initialize 010F  
                 _i2c2_driver_i2cISR 0067                            __pnvBANK0 0067  
             __size_of_handleGesture 004F                i1wireReadDataByte@reg 0072  
              i1wireReadDataByte@val 0073               _PIN_MANAGER_Initialize 0F28  
                 _i2c2_driver_isNACK 0C50                  ?_i2c2_driver_TXData 0070  
              ??_enableGestureSensor 01AB                             ?___awdiv 0076  
         __size_of_wireWriteDataByte 001B                  _setProxIntLowThresh 0D21  
       ??_INTERRUPT_InterruptManager 007D                  ?_i2c2_driver_isNACK 0070  
                           ?_getMode 0070                      ??_decodeGesture 0070  
                  ?_wireReadDataByte 0070                          _enablePower 0CC8  
                 ??_wireReadDataByte 01A1                  __end_of_readGesture 0682  
           ??_resetGestureParameters 01A0                             ?_setMode 01A6  
                   ??_mssp2_clearIRQ 0070                  __end_of_LEDs_SetLow 0C75  
               ??_i2c2_driver_TXData 01A0                 _i2c2_driver_sendNACK 0C62  
                __end_of_setLEDBoost 0F87                  __end_of_setLEDDrive 0ED4  
               ?_setProxIntLowThresh 0070                readGesture@bytes_read 0049  
                        ??i1_getMode 0074                 ??_i2c2_driver_isNACK 01A0  
                     ___wmul@product 0074            __size_of_i2c2_driver_open 000A  
                           _LATAbits 010C                             _LATCbits 010E  
          __size_of_i2c2_driver_stop 0003                            clear_ram0 0C81  
                           _PIE2bits 0092         __size_of_setGestureIntEnable 002B  
                _gesture_near_count_ 005A  __size_of_INTERRUPT_InterruptManager 0016  
                           _PIR2bits 0012             ?i1_i2c2_driver_getRXData 0070  
          ??_setLightIntLowThreshold 01A7                             _SSP2CON1 021D  
                           _SSP2CON2 021E                       setLEDBoost@val 01A7  
                           _SSP2STAT 021C                       setLEDDrive@val 01A7  
        __size_ofi1_wireReadDataByte 001F              ??_i2c2_driver_getRXData 01A0  
   processGestureData@lr_ratio_first 0026                    ___wmul@multiplier 0070  
          processGestureData@d_first 0039                        _handleGesture 077F  
        __end_of_setAmbientLightGain 0DCD            processGestureData@l_first 003A  
            __end_of_mssp2_enableIRQ 0C62          __end_of_i2c2_driver_setAddr 0C7B  
              ?_i2c2_driver_sendNACK 0070         __end_of_setGestureExitThresh 0D0E  
          processGestureData@r_first 003B          __end_of_i2c2_driver_restart 0C56  
          processGestureData@u_first 0038                ??_setProxIntLowThresh 01A5  
        __end_of_i2c2_driver_startRX 0C5C                i1getMode@enable_value 0075  
                  setGestureGain@val 01A7              ??_i2c2_driver_setI2cISR 01A2  
             _processGestureData$780 0030               _processGestureData$781 0032  
             _processGestureData$778 002C               _processGestureData$779 002E  
         ??_setLightIntHighThreshold 01A7          __size_of_setGestureLEDDrive 0032  
                     setMode@reg_val 01A9       setLightIntLowThreshold@val_low 01A8  
                  setGestureMode@val 01A7              ??_OSCILLATOR_Initialize 01A0  
         __end_ofi1_i2c2_driver_stop 0C4D                     __size_of___awdiv 0052  
      __size_of_setProxIntHighThresh 0013                          _readGesture 0594  
                       ??_initialize 01AB                          _LEDs_SetLow 0C6F  
              i1_i2c2_driver_setAddr 0C6A     setLightIntLowThreshold@threshold 01A5  
                     ?_handleGesture 0070                     __size_of_getMode 0009  
              i1_i2c2_driver_restart 0C41                 readGesture@fifo_data 0120  
                        _setLEDBoost 0F55                          _setLEDDrive 0EAB  
              i1_i2c2_driver_startRX 0C47      __size_of_resetGestureParameters 0015  
    __end_of_setLightIntLowThreshold 0EAB                setGestureLEDDrive@val 01A7  
                   __size_of_setMode 004F                             __ptext10 07CE  
                           __ptext11 0F87                             __ptext20 0EFD  
                           __ptext12 0CFB                             __ptext21 0D49  
                           __ptext13 0CE8                             __ptext30 0C56  
                           __ptext22 0CC8                             __ptext14 0DAF  
                           __ptext31 0C75                             __ptext23 0730  
                           __ptext15 0CB2                             __ptext32 0C53  
                           __ptext24 0D79                             __ptext16 0CA9  
                           __ptext41 077F                             __ptext33 0C50  
                           __ptext25 0C7B                             __ptext17 0682  
                           __ptext50 0CD6                             __ptext42 0594  
                           __ptext34 0C4D                             __ptext26 0CA0  
                           __ptext18 0F55                             __ptext51 0DCD  
                           __ptext43 0D34                             __ptext35 0CBC  
                           __ptext27 0DEC                             __ptext19 0E0F  
                           __ptext60 0C38                             __ptext52 0C4A  
                           __ptext44 0C87                             __ptext36 0C66  
                           __ptext28 0C5C                             __ptext61 0C6F  
                           __ptext53 0C47                             __ptext45 0FB9  
                           __ptext37 0C8F                             __ptext29 0C59  
                           __ptext54 0C44                             __ptext46 0C62  
                           __ptext38 0F28                             __ptext55 0C6A  
                           __ptext47 0030                             __ptext39 0C97  
                           __ptext56 0C41                             __ptext48 0D5E  
                           __ptext57 0C3E                             __ptext49 06DE  
                           __ptext58 0C3B                             __ptext59 02F7  
              _setGestureEnterThresh 0CE8                    _i2c2_driver_start 0C56  
     setGestureEnterThresh@threshold 01A6                         _SSP2CON1bits 021D  
                       _SSP2CON2bits 021E                   ?_i2c2_driver_start 0070  
                      __size_of_main 001B                    ?_setProximityGain 0070  
    __end_ofi1_i2c2_driver_getRXData 0C3E                   __end_of_initialize 0594  
                 ??_setProximityGain 01A5                  ??_i2c2_driver_start 01A0  
                           int$flags 007E              i2c2_driver_setAddr@addr 01A0  
 __end_of_INTERRUPT_InterruptManager 001A           _INTERRUPT_InterruptManager 0004  
        __size_of_isGestureAvailable 0012                  setProximityGain@val 01A7  
        __size_of_setGestureWaitTime 0027           __end_of_processGestureData 02F7  
                       _SSP2STATbits 021C         i2c2_driver_setI2cISR@handler 01A0  
         ??i1_resetGestureParameters 0070              __size_of_setGestureGain 0032  
                         _INTCONbits 000B              __size_of_setGestureMode 0027  
                i2c2_driver_TXData@d 01A0               ??_i2c2_driver_sendNACK 0070  
          i1i2c2_driver_setAddr@addr 0070            __end_of_i2c2_driver_start 0C59  
                   ?_mssp2_enableIRQ 0070               setAmbientLightGain@val 01A7  
            __size_of_WDT_Initialize 0004                             intlevel1 0000  
                   _i2c2_driver_open 0CB2              ?_PIN_MANAGER_Initialize 0070  
                   _i2c2_driver_stop 0C5C                    __CFG_CLKOUTEN$OFF 0000  
             _resetGestureParameters 0D49                    _decodeGesture$790 002E  
                  _decodeGesture$783 0020                    _decodeGesture$784 0022  
                  _decodeGesture$785 0024                    _decodeGesture$786 0026  
                  _decodeGesture$787 0028                    _decodeGesture$788 002A  
                  _decodeGesture$789 002C        __size_ofi1_i2c2_driver_isNACK 0003  
               _setGestureExitThresh 0CFB               ?i1_i2c2_driver_setAddr 0070  
                    ??_handleGesture 004E               ?i1_i2c2_driver_restart 0070  
             ?i1_i2c2_driver_startRX 0070                         ?_enablePower 0070  
                         _SSP2DATPPS 0E1E                  _setGestureIntEnable 0EFD  
                         _SSP2CLKPPS 0E1D                     setLEDBoost@boost 01A8  
             ?_setGestureEnterThresh 0070         __size_ofi1_i2c2_driver_start 0003  
     __end_of_PIN_MANAGER_Initialize 0F55            __size_of_wireReadDataByte 0023  
                   setLEDDrive@drive 01A8                  processGestureData@i 0040  
        __end_of_enableGestureSensor 06DE                 ?_setGestureIntEnable 0070  
   __end_of_setLightIntHighThreshold 0E84  
