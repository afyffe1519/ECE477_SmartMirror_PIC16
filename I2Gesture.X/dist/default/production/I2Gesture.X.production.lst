

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Wed Apr 24 11:06:12 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F18345
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	idataBANK2,global,class=CODE,delta=2
     7                           	psect	idataBANK3,global,class=CODE,delta=2
     8                           	psect	stringtext1,global,class=STRCODE,delta=2
     9                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	nvBANK3,global,class=BANK3,space=1,delta=1
    12                           	psect	stringtext2,global,class=STRCODE,delta=2
    13                           	psect	stringtext3,global,class=STRCODE,delta=2
    14                           	psect	stringtext4,global,class=STRCODE,delta=2
    15                           	psect	stringtext5,global,class=STRCODE,delta=2
    16                           	psect	stringtext6,global,class=STRCODE,delta=2
    17                           	psect	cinit,global,class=CODE,merge=1,delta=2
    18                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    22                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    23                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    24                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    25                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    26                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    27                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    28                           	psect	inittext,global,class=CODE,delta=2
    29                           	psect	clrtext,global,class=CODE,delta=2
    30                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    31                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    32                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    33                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    34                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    35                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    36                           	psect	text1,local,class=CODE,merge=1,delta=2
    37                           	psect	text2,local,class=CODE,merge=1,delta=2
    38                           	psect	text3,local,class=CODE,merge=1,delta=2
    39                           	psect	text4,local,class=CODE,merge=1,delta=2
    40                           	psect	text5,local,class=CODE,merge=1,delta=2
    41                           	psect	text6,local,class=CODE,merge=1,delta=2
    42                           	psect	text7,local,class=CODE,merge=1,delta=2
    43                           	psect	text8,local,class=CODE,merge=1,delta=2
    44                           	psect	text9,local,class=CODE,merge=1,delta=2
    45                           	psect	text10,local,class=CODE,merge=1,delta=2
    46                           	psect	text11,local,class=CODE,merge=1,delta=2
    47                           	psect	text12,local,class=CODE,merge=1,delta=2
    48                           	psect	text13,local,class=CODE,merge=1,delta=2
    49                           	psect	text14,local,class=CODE,merge=1,delta=2
    50                           	psect	text15,local,class=CODE,merge=1,delta=2
    51                           	psect	text16,local,class=CODE,merge=1,delta=2
    52                           	psect	text17,local,class=CODE,merge=1,delta=2
    53                           	psect	text18,local,class=CODE,merge=1,delta=2
    54                           	psect	text19,local,class=CODE,merge=1,delta=2,group=1
    55                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    56                           	psect	text21,local,class=CODE,merge=1,delta=2
    57                           	psect	text22,local,class=CODE,merge=1,delta=2
    58                           	psect	text23,local,class=CODE,merge=1,delta=2
    59                           	psect	text24,local,class=CODE,merge=1,delta=2
    60                           	psect	text25,local,class=CODE,merge=1,delta=2
    61                           	psect	text26,local,class=CODE,merge=1,delta=2
    62                           	psect	text27,local,class=CODE,merge=1,delta=2
    63                           	psect	text28,local,class=CODE,merge=1,delta=2
    64                           	psect	text29,local,class=CODE,merge=1,delta=2
    65                           	psect	text30,local,class=CODE,merge=1,delta=2
    66                           	psect	text31,local,class=CODE,merge=1,delta=2
    67                           	psect	text32,local,class=CODE,merge=1,delta=2
    68                           	psect	text33,local,class=CODE,merge=1,delta=2
    69                           	psect	text34,local,class=CODE,merge=1,inline,delta=2
    70                           	psect	text35,local,class=CODE,merge=1,delta=2
    71                           	psect	text36,local,class=CODE,merge=1,inline,delta=2
    72                           	psect	text37,local,class=CODE,merge=1,delta=2
    73                           	psect	text38,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text39,local,class=CODE,merge=1,delta=2
    75                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    76                           	psect	text41,local,class=CODE,merge=1,delta=2
    77                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    78                           	psect	text43,local,class=CODE,merge=1,inline,delta=2
    79                           	psect	text44,local,class=CODE,merge=1,inline,delta=2
    80                           	psect	text45,local,class=CODE,merge=1,delta=2
    81                           	psect	text46,local,class=CODE,merge=1,inline,delta=2
    82                           	psect	text47,local,class=CODE,merge=1,delta=2
    83                           	psect	text48,local,class=CODE,merge=1,delta=2
    84                           	psect	text49,local,class=CODE,merge=1,delta=2
    85                           	psect	text50,local,class=CODE,merge=1,delta=2
    86                           	psect	text51,local,class=CODE,merge=1,delta=2
    87                           	psect	text52,local,class=CODE,merge=1,delta=2
    88                           	psect	text53,local,class=CODE,merge=1,delta=2
    89                           	psect	text54,local,class=CODE,merge=1,delta=2
    90                           	psect	text55,local,class=CODE,merge=1,delta=2
    91                           	psect	text56,local,class=CODE,merge=1,delta=2
    92                           	psect	text57,local,class=CODE,merge=1,delta=2
    93                           	psect	text58,local,class=CODE,merge=1,delta=2
    94                           	psect	text59,local,class=CODE,merge=1,delta=2
    95                           	psect	text60,local,class=CODE,merge=1,delta=2
    96                           	psect	text61,local,class=CODE,merge=1,delta=2
    97                           	psect	text62,local,class=CODE,merge=1,delta=2
    98                           	psect	text63,local,class=CODE,merge=1,delta=2
    99                           	psect	text64,local,class=CODE,merge=1,delta=2
   100                           	psect	text65,local,class=CODE,merge=1,delta=2
   101                           	psect	text66,local,class=CODE,merge=1,delta=2
   102                           	psect	text67,local,class=CODE,merge=1,delta=2
   103                           	psect	text68,local,class=CODE,merge=1,delta=2
   104                           	psect	text69,local,class=CODE,merge=1,delta=2
   105                           	psect	text70,local,class=CODE,merge=1,delta=2,group=2
   106                           	psect	text71,local,class=CODE,merge=1,delta=2
   107                           	psect	text72,local,class=CODE,merge=1,delta=2
   108                           	psect	text73,local,class=CODE,merge=1,delta=2
   109                           	psect	text74,local,class=CODE,merge=1,delta=2
   110                           	psect	text75,local,class=CODE,merge=1,delta=2
   111                           	psect	intentry,global,class=CODE,delta=2
   112                           	psect	text77,local,class=CODE,merge=1,delta=2
   113                           	psect	text78,local,class=CODE,merge=1,inline,delta=2
   114                           	psect	text79,local,class=CODE,merge=1,delta=2
   115                           	psect	text80,local,class=CODE,merge=1,inline,delta=2
   116                           	psect	text81,local,class=CODE,merge=1,delta=2
   117                           	psect	text82,local,class=CODE,merge=1,delta=2
   118                           	psect	text83,local,class=CODE,merge=1,delta=2
   119                           	psect	text84,local,class=CODE,merge=1,delta=2
   120                           	psect	text85,local,class=CODE,merge=1,delta=2
   121                           	psect	text86,local,class=CODE,merge=1,delta=2
   122                           	psect	text87,local,class=CODE,merge=1,delta=2
   123                           	psect	text88,local,class=CODE,merge=1,delta=2
   124                           	psect	text89,local,class=CODE,merge=1,delta=2
   125                           	psect	text90,local,class=CODE,merge=1,delta=2
   126                           	psect	text91,local,class=CODE,merge=1,delta=2
   127                           	psect	text92,local,class=CODE,merge=1,delta=2
   128                           	psect	text93,local,class=CODE,merge=1,delta=2
   129                           	psect	text94,local,class=CODE,merge=1,delta=2
   130                           	psect	text95,local,class=CODE,merge=1,delta=2
   131                           	psect	text96,local,class=CODE,merge=1,delta=2
   132                           	psect	text97,local,class=CODE,merge=1,inline,delta=2
   133                           	psect	text98,local,class=CODE,merge=1,inline,delta=2
   134                           	psect	text99,local,class=CODE,merge=1,inline,delta=2
   135                           	psect	text100,local,class=CODE,merge=1,inline,delta=2
   136                           	psect	text101,local,class=CODE,merge=1,inline,delta=2
   137                           	psect	text102,local,class=CODE,merge=1,inline,delta=2
   138                           	psect	text103,local,class=CODE,merge=1,inline,delta=2
   139                           	psect	text104,local,class=CODE,merge=1,delta=2
   140                           	psect	text105,local,class=CODE,merge=1,delta=2
   141                           	psect	text106,local,class=CODE,merge=1,inline,delta=2
   142                           	psect	text107,local,class=CODE,merge=1,inline,delta=2
   143                           	psect	text108,local,class=CODE,merge=1,inline,delta=2
   144                           	psect	text109,local,class=CODE,merge=1,delta=2
   145                           	psect	text110,local,class=CODE,merge=1,delta=2
   146                           	psect	text111,local,class=CODE,merge=1,delta=2
   147                           	psect	text112,local,class=CODE,merge=1,delta=2
   148                           	psect	text113,local,class=CODE,merge=1,delta=2
   149                           	psect	text114,local,class=CODE,merge=1,delta=2
   150                           	psect	text115,local,class=CODE,merge=1,delta=2
   151                           	psect	text116,local,class=CODE,merge=1,delta=2
   152                           	psect	text117,local,class=CODE,merge=1,delta=2
   153                           	dabs	1,0x7E,2
   154  0000                     
   155                           ; Version 2.05
   156                           ; Generated 20/12/2018 GMT
   157                           ; 
   158                           ; Copyright © 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
   159                           ; All rights reserved.
   160                           ; 
   161                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   162                           ; 
   163                           ; Redistribution and use in source and binary forms, with or without modification, are
   164                           ; permitted provided that the following conditions are met:
   165                           ; 
   166                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   167                           ;        conditions and the following disclaimer.
   168                           ; 
   169                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   170                           ;        of conditions and the following disclaimer in the documentation and/or other
   171                           ;        materials provided with the distribution.
   172                           ; 
   173                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   174                           ;        software without specific prior written permission.
   175                           ; 
   176                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   177                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   178                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   179                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   180                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   181                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   182                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   183                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   184                           ; 
   185                           ; 
   186                           ; Code-generator required, PIC16F18345 Definitions
   187                           ; 
   188                           ; SFR Addresses
   189  0000                     	;# 
   190  0001                     	;# 
   191  0002                     	;# 
   192  0003                     	;# 
   193  0004                     	;# 
   194  0005                     	;# 
   195  0006                     	;# 
   196  0007                     	;# 
   197  0008                     	;# 
   198  0009                     	;# 
   199  000A                     	;# 
   200  000B                     	;# 
   201  000C                     	;# 
   202  000D                     	;# 
   203  000E                     	;# 
   204  0010                     	;# 
   205  0011                     	;# 
   206  0012                     	;# 
   207  0013                     	;# 
   208  0014                     	;# 
   209  0015                     	;# 
   210  0015                     	;# 
   211  0016                     	;# 
   212  0016                     	;# 
   213  0017                     	;# 
   214  0018                     	;# 
   215  0019                     	;# 
   216  0019                     	;# 
   217  001A                     	;# 
   218  001B                     	;# 
   219  001C                     	;# 
   220  001D                     	;# 
   221  001E                     	;# 
   222  001F                     	;# 
   223  008C                     	;# 
   224  008D                     	;# 
   225  008E                     	;# 
   226  0090                     	;# 
   227  0091                     	;# 
   228  0092                     	;# 
   229  0093                     	;# 
   230  0094                     	;# 
   231  0097                     	;# 
   232  009B                     	;# 
   233  009B                     	;# 
   234  009C                     	;# 
   235  009D                     	;# 
   236  009E                     	;# 
   237  009F                     	;# 
   238  010C                     	;# 
   239  010D                     	;# 
   240  010E                     	;# 
   241  0111                     	;# 
   242  0112                     	;# 
   243  0113                     	;# 
   244  0114                     	;# 
   245  0115                     	;# 
   246  0116                     	;# 
   247  0117                     	;# 
   248  0118                     	;# 
   249  0119                     	;# 
   250  018C                     	;# 
   251  018D                     	;# 
   252  018E                     	;# 
   253  0197                     	;# 
   254  0199                     	;# 
   255  0199                     	;# 
   256  0199                     	;# 
   257  019A                     	;# 
   258  019A                     	;# 
   259  019A                     	;# 
   260  019B                     	;# 
   261  019B                     	;# 
   262  019B                     	;# 
   263  019B                     	;# 
   264  019B                     	;# 
   265  019C                     	;# 
   266  019C                     	;# 
   267  019C                     	;# 
   268  019D                     	;# 
   269  019D                     	;# 
   270  019D                     	;# 
   271  019E                     	;# 
   272  019E                     	;# 
   273  019E                     	;# 
   274  019F                     	;# 
   275  019F                     	;# 
   276  019F                     	;# 
   277  019F                     	;# 
   278  019F                     	;# 
   279  020C                     	;# 
   280  020D                     	;# 
   281  020E                     	;# 
   282  0211                     	;# 
   283  0211                     	;# 
   284  0212                     	;# 
   285  0212                     	;# 
   286  0213                     	;# 
   287  0213                     	;# 
   288  0214                     	;# 
   289  0214                     	;# 
   290  0215                     	;# 
   291  0215                     	;# 
   292  0215                     	;# 
   293  0215                     	;# 
   294  0216                     	;# 
   295  0216                     	;# 
   296  0217                     	;# 
   297  0217                     	;# 
   298  0219                     	;# 
   299  021A                     	;# 
   300  021B                     	;# 
   301  021C                     	;# 
   302  021D                     	;# 
   303  021D                     	;# 
   304  021E                     	;# 
   305  021F                     	;# 
   306  028C                     	;# 
   307  028D                     	;# 
   308  028E                     	;# 
   309  0291                     	;# 
   310  0291                     	;# 
   311  0292                     	;# 
   312  0293                     	;# 
   313  0294                     	;# 
   314  0295                     	;# 
   315  0295                     	;# 
   316  0296                     	;# 
   317  0297                     	;# 
   318  0298                     	;# 
   319  029F                     	;# 
   320  030C                     	;# 
   321  030D                     	;# 
   322  030E                     	;# 
   323  0311                     	;# 
   324  0311                     	;# 
   325  0312                     	;# 
   326  0313                     	;# 
   327  0314                     	;# 
   328  0315                     	;# 
   329  0315                     	;# 
   330  0316                     	;# 
   331  0317                     	;# 
   332  0318                     	;# 
   333  038C                     	;# 
   334  038D                     	;# 
   335  038E                     	;# 
   336  0391                     	;# 
   337  0392                     	;# 
   338  0393                     	;# 
   339  0394                     	;# 
   340  0395                     	;# 
   341  0396                     	;# 
   342  0397                     	;# 
   343  0398                     	;# 
   344  0399                     	;# 
   345  039A                     	;# 
   346  039C                     	;# 
   347  039D                     	;# 
   348  039E                     	;# 
   349  039F                     	;# 
   350  0411                     	;# 
   351  0411                     	;# 
   352  0412                     	;# 
   353  0413                     	;# 
   354  0414                     	;# 
   355  0415                     	;# 
   356  0416                     	;# 
   357  0417                     	;# 
   358  0418                     	;# 
   359  0418                     	;# 
   360  0419                     	;# 
   361  041A                     	;# 
   362  041B                     	;# 
   363  041C                     	;# 
   364  041D                     	;# 
   365  041E                     	;# 
   366  041F                     	;# 
   367  0498                     	;# 
   368  0498                     	;# 
   369  0499                     	;# 
   370  049A                     	;# 
   371  049B                     	;# 
   372  049B                     	;# 
   373  049C                     	;# 
   374  049D                     	;# 
   375  049E                     	;# 
   376  049F                     	;# 
   377  0617                     	;# 
   378  0618                     	;# 
   379  0619                     	;# 
   380  0619                     	;# 
   381  061A                     	;# 
   382  061B                     	;# 
   383  061C                     	;# 
   384  061C                     	;# 
   385  061F                     	;# 
   386  0691                     	;# 
   387  0692                     	;# 
   388  0693                     	;# 
   389  0694                     	;# 
   390  0695                     	;# 
   391  0696                     	;# 
   392  0697                     	;# 
   393  0698                     	;# 
   394  0699                     	;# 
   395  0711                     	;# 
   396  0712                     	;# 
   397  0713                     	;# 
   398  0714                     	;# 
   399  0715                     	;# 
   400  0716                     	;# 
   401  0717                     	;# 
   402  0718                     	;# 
   403  0719                     	;# 
   404  0891                     	;# 
   405  0891                     	;# 
   406  0891                     	;# 
   407  0891                     	;# 
   408  0891                     	;# 
   409  0891                     	;# 
   410  0892                     	;# 
   411  0892                     	;# 
   412  0892                     	;# 
   413  0893                     	;# 
   414  0893                     	;# 
   415  0893                     	;# 
   416  0893                     	;# 
   417  0893                     	;# 
   418  0893                     	;# 
   419  0894                     	;# 
   420  0894                     	;# 
   421  0894                     	;# 
   422  0895                     	;# 
   423  0895                     	;# 
   424  0895                     	;# 
   425  0896                     	;# 
   426  0896                     	;# 
   427  0896                     	;# 
   428  089B                     	;# 
   429  0911                     	;# 
   430  0912                     	;# 
   431  0913                     	;# 
   432  0914                     	;# 
   433  0915                     	;# 
   434  0916                     	;# 
   435  0918                     	;# 
   436  0919                     	;# 
   437  091A                     	;# 
   438  091B                     	;# 
   439  091C                     	;# 
   440  091D                     	;# 
   441  091E                     	;# 
   442  091F                     	;# 
   443  0E0F                     	;# 
   444  0E10                     	;# 
   445  0E11                     	;# 
   446  0E12                     	;# 
   447  0E13                     	;# 
   448  0E14                     	;# 
   449  0E15                     	;# 
   450  0E16                     	;# 
   451  0E17                     	;# 
   452  0E18                     	;# 
   453  0E19                     	;# 
   454  0E1A                     	;# 
   455  0E1B                     	;# 
   456  0E1C                     	;# 
   457  0E1D                     	;# 
   458  0E1E                     	;# 
   459  0E1F                     	;# 
   460  0E20                     	;# 
   461  0E21                     	;# 
   462  0E22                     	;# 
   463  0E24                     	;# 
   464  0E25                     	;# 
   465  0E28                     	;# 
   466  0E29                     	;# 
   467  0E2A                     	;# 
   468  0E2B                     	;# 
   469  0E2C                     	;# 
   470  0E2D                     	;# 
   471  0E2E                     	;# 
   472  0E2F                     	;# 
   473  0E90                     	;# 
   474  0E91                     	;# 
   475  0E92                     	;# 
   476  0E94                     	;# 
   477  0E95                     	;# 
   478  0E9C                     	;# 
   479  0E9D                     	;# 
   480  0E9E                     	;# 
   481  0E9F                     	;# 
   482  0EA0                     	;# 
   483  0EA1                     	;# 
   484  0EA2                     	;# 
   485  0EA3                     	;# 
   486  0EA4                     	;# 
   487  0EA5                     	;# 
   488  0EA6                     	;# 
   489  0EA7                     	;# 
   490  0F0F                     	;# 
   491  0F10                     	;# 
   492  0F11                     	;# 
   493  0F12                     	;# 
   494  0F13                     	;# 
   495  0F14                     	;# 
   496  0F15                     	;# 
   497  0F16                     	;# 
   498  0F17                     	;# 
   499  0F18                     	;# 
   500  0F19                     	;# 
   501  0F1A                     	;# 
   502  0F1B                     	;# 
   503  0F1C                     	;# 
   504  0F1D                     	;# 
   505  0F1E                     	;# 
   506  0F1F                     	;# 
   507  0F20                     	;# 
   508  0F21                     	;# 
   509  0F22                     	;# 
   510  0F23                     	;# 
   511  0F24                     	;# 
   512  0F25                     	;# 
   513  0F26                     	;# 
   514  0F27                     	;# 
   515  0F28                     	;# 
   516  0F29                     	;# 
   517  0F2A                     	;# 
   518  0F2B                     	;# 
   519  0F2C                     	;# 
   520  0F2D                     	;# 
   521  0F2E                     	;# 
   522  0F2F                     	;# 
   523  0F30                     	;# 
   524  0F31                     	;# 
   525  0F32                     	;# 
   526  0F33                     	;# 
   527  0F34                     	;# 
   528  0F35                     	;# 
   529  0F36                     	;# 
   530  0F37                     	;# 
   531  0FE4                     	;# 
   532  0FE5                     	;# 
   533  0FE6                     	;# 
   534  0FE7                     	;# 
   535  0FE8                     	;# 
   536  0FE9                     	;# 
   537  0FEA                     	;# 
   538  0FEB                     	;# 
   539  0FED                     	;# 
   540  0FEE                     	;# 
   541  0FEF                     	;# 
   542  0000                     	;# 
   543  0001                     	;# 
   544  0002                     	;# 
   545  0003                     	;# 
   546  0004                     	;# 
   547  0005                     	;# 
   548  0006                     	;# 
   549  0007                     	;# 
   550  0008                     	;# 
   551  0009                     	;# 
   552  000A                     	;# 
   553  000B                     	;# 
   554  000C                     	;# 
   555  000D                     	;# 
   556  000E                     	;# 
   557  0010                     	;# 
   558  0011                     	;# 
   559  0012                     	;# 
   560  0013                     	;# 
   561  0014                     	;# 
   562  0015                     	;# 
   563  0015                     	;# 
   564  0016                     	;# 
   565  0016                     	;# 
   566  0017                     	;# 
   567  0018                     	;# 
   568  0019                     	;# 
   569  0019                     	;# 
   570  001A                     	;# 
   571  001B                     	;# 
   572  001C                     	;# 
   573  001D                     	;# 
   574  001E                     	;# 
   575  001F                     	;# 
   576  008C                     	;# 
   577  008D                     	;# 
   578  008E                     	;# 
   579  0090                     	;# 
   580  0091                     	;# 
   581  0092                     	;# 
   582  0093                     	;# 
   583  0094                     	;# 
   584  0097                     	;# 
   585  009B                     	;# 
   586  009B                     	;# 
   587  009C                     	;# 
   588  009D                     	;# 
   589  009E                     	;# 
   590  009F                     	;# 
   591  010C                     	;# 
   592  010D                     	;# 
   593  010E                     	;# 
   594  0111                     	;# 
   595  0112                     	;# 
   596  0113                     	;# 
   597  0114                     	;# 
   598  0115                     	;# 
   599  0116                     	;# 
   600  0117                     	;# 
   601  0118                     	;# 
   602  0119                     	;# 
   603  018C                     	;# 
   604  018D                     	;# 
   605  018E                     	;# 
   606  0197                     	;# 
   607  0199                     	;# 
   608  0199                     	;# 
   609  0199                     	;# 
   610  019A                     	;# 
   611  019A                     	;# 
   612  019A                     	;# 
   613  019B                     	;# 
   614  019B                     	;# 
   615  019B                     	;# 
   616  019B                     	;# 
   617  019B                     	;# 
   618  019C                     	;# 
   619  019C                     	;# 
   620  019C                     	;# 
   621  019D                     	;# 
   622  019D                     	;# 
   623  019D                     	;# 
   624  019E                     	;# 
   625  019E                     	;# 
   626  019E                     	;# 
   627  019F                     	;# 
   628  019F                     	;# 
   629  019F                     	;# 
   630  019F                     	;# 
   631  019F                     	;# 
   632  020C                     	;# 
   633  020D                     	;# 
   634  020E                     	;# 
   635  0211                     	;# 
   636  0211                     	;# 
   637  0212                     	;# 
   638  0212                     	;# 
   639  0213                     	;# 
   640  0213                     	;# 
   641  0214                     	;# 
   642  0214                     	;# 
   643  0215                     	;# 
   644  0215                     	;# 
   645  0215                     	;# 
   646  0215                     	;# 
   647  0216                     	;# 
   648  0216                     	;# 
   649  0217                     	;# 
   650  0217                     	;# 
   651  0219                     	;# 
   652  021A                     	;# 
   653  021B                     	;# 
   654  021C                     	;# 
   655  021D                     	;# 
   656  021D                     	;# 
   657  021E                     	;# 
   658  021F                     	;# 
   659  028C                     	;# 
   660  028D                     	;# 
   661  028E                     	;# 
   662  0291                     	;# 
   663  0291                     	;# 
   664  0292                     	;# 
   665  0293                     	;# 
   666  0294                     	;# 
   667  0295                     	;# 
   668  0295                     	;# 
   669  0296                     	;# 
   670  0297                     	;# 
   671  0298                     	;# 
   672  029F                     	;# 
   673  030C                     	;# 
   674  030D                     	;# 
   675  030E                     	;# 
   676  0311                     	;# 
   677  0311                     	;# 
   678  0312                     	;# 
   679  0313                     	;# 
   680  0314                     	;# 
   681  0315                     	;# 
   682  0315                     	;# 
   683  0316                     	;# 
   684  0317                     	;# 
   685  0318                     	;# 
   686  038C                     	;# 
   687  038D                     	;# 
   688  038E                     	;# 
   689  0391                     	;# 
   690  0392                     	;# 
   691  0393                     	;# 
   692  0394                     	;# 
   693  0395                     	;# 
   694  0396                     	;# 
   695  0397                     	;# 
   696  0398                     	;# 
   697  0399                     	;# 
   698  039A                     	;# 
   699  039C                     	;# 
   700  039D                     	;# 
   701  039E                     	;# 
   702  039F                     	;# 
   703  0411                     	;# 
   704  0411                     	;# 
   705  0412                     	;# 
   706  0413                     	;# 
   707  0414                     	;# 
   708  0415                     	;# 
   709  0416                     	;# 
   710  0417                     	;# 
   711  0418                     	;# 
   712  0418                     	;# 
   713  0419                     	;# 
   714  041A                     	;# 
   715  041B                     	;# 
   716  041C                     	;# 
   717  041D                     	;# 
   718  041E                     	;# 
   719  041F                     	;# 
   720  0498                     	;# 
   721  0498                     	;# 
   722  0499                     	;# 
   723  049A                     	;# 
   724  049B                     	;# 
   725  049B                     	;# 
   726  049C                     	;# 
   727  049D                     	;# 
   728  049E                     	;# 
   729  049F                     	;# 
   730  0617                     	;# 
   731  0618                     	;# 
   732  0619                     	;# 
   733  0619                     	;# 
   734  061A                     	;# 
   735  061B                     	;# 
   736  061C                     	;# 
   737  061C                     	;# 
   738  061F                     	;# 
   739  0691                     	;# 
   740  0692                     	;# 
   741  0693                     	;# 
   742  0694                     	;# 
   743  0695                     	;# 
   744  0696                     	;# 
   745  0697                     	;# 
   746  0698                     	;# 
   747  0699                     	;# 
   748  0711                     	;# 
   749  0712                     	;# 
   750  0713                     	;# 
   751  0714                     	;# 
   752  0715                     	;# 
   753  0716                     	;# 
   754  0717                     	;# 
   755  0718                     	;# 
   756  0719                     	;# 
   757  0891                     	;# 
   758  0891                     	;# 
   759  0891                     	;# 
   760  0891                     	;# 
   761  0891                     	;# 
   762  0891                     	;# 
   763  0892                     	;# 
   764  0892                     	;# 
   765  0892                     	;# 
   766  0893                     	;# 
   767  0893                     	;# 
   768  0893                     	;# 
   769  0893                     	;# 
   770  0893                     	;# 
   771  0893                     	;# 
   772  0894                     	;# 
   773  0894                     	;# 
   774  0894                     	;# 
   775  0895                     	;# 
   776  0895                     	;# 
   777  0895                     	;# 
   778  0896                     	;# 
   779  0896                     	;# 
   780  0896                     	;# 
   781  089B                     	;# 
   782  0911                     	;# 
   783  0912                     	;# 
   784  0913                     	;# 
   785  0914                     	;# 
   786  0915                     	;# 
   787  0916                     	;# 
   788  0918                     	;# 
   789  0919                     	;# 
   790  091A                     	;# 
   791  091B                     	;# 
   792  091C                     	;# 
   793  091D                     	;# 
   794  091E                     	;# 
   795  091F                     	;# 
   796  0E0F                     	;# 
   797  0E10                     	;# 
   798  0E11                     	;# 
   799  0E12                     	;# 
   800  0E13                     	;# 
   801  0E14                     	;# 
   802  0E15                     	;# 
   803  0E16                     	;# 
   804  0E17                     	;# 
   805  0E18                     	;# 
   806  0E19                     	;# 
   807  0E1A                     	;# 
   808  0E1B                     	;# 
   809  0E1C                     	;# 
   810  0E1D                     	;# 
   811  0E1E                     	;# 
   812  0E1F                     	;# 
   813  0E20                     	;# 
   814  0E21                     	;# 
   815  0E22                     	;# 
   816  0E24                     	;# 
   817  0E25                     	;# 
   818  0E28                     	;# 
   819  0E29                     	;# 
   820  0E2A                     	;# 
   821  0E2B                     	;# 
   822  0E2C                     	;# 
   823  0E2D                     	;# 
   824  0E2E                     	;# 
   825  0E2F                     	;# 
   826  0E90                     	;# 
   827  0E91                     	;# 
   828  0E92                     	;# 
   829  0E94                     	;# 
   830  0E95                     	;# 
   831  0E9C                     	;# 
   832  0E9D                     	;# 
   833  0E9E                     	;# 
   834  0E9F                     	;# 
   835  0EA0                     	;# 
   836  0EA1                     	;# 
   837  0EA2                     	;# 
   838  0EA3                     	;# 
   839  0EA4                     	;# 
   840  0EA5                     	;# 
   841  0EA6                     	;# 
   842  0EA7                     	;# 
   843  0F0F                     	;# 
   844  0F10                     	;# 
   845  0F11                     	;# 
   846  0F12                     	;# 
   847  0F13                     	;# 
   848  0F14                     	;# 
   849  0F15                     	;# 
   850  0F16                     	;# 
   851  0F17                     	;# 
   852  0F18                     	;# 
   853  0F19                     	;# 
   854  0F1A                     	;# 
   855  0F1B                     	;# 
   856  0F1C                     	;# 
   857  0F1D                     	;# 
   858  0F1E                     	;# 
   859  0F1F                     	;# 
   860  0F20                     	;# 
   861  0F21                     	;# 
   862  0F22                     	;# 
   863  0F23                     	;# 
   864  0F24                     	;# 
   865  0F25                     	;# 
   866  0F26                     	;# 
   867  0F27                     	;# 
   868  0F28                     	;# 
   869  0F29                     	;# 
   870  0F2A                     	;# 
   871  0F2B                     	;# 
   872  0F2C                     	;# 
   873  0F2D                     	;# 
   874  0F2E                     	;# 
   875  0F2F                     	;# 
   876  0F30                     	;# 
   877  0F31                     	;# 
   878  0F32                     	;# 
   879  0F33                     	;# 
   880  0F34                     	;# 
   881  0F35                     	;# 
   882  0F36                     	;# 
   883  0F37                     	;# 
   884  0FE4                     	;# 
   885  0FE5                     	;# 
   886  0FE6                     	;# 
   887  0FE7                     	;# 
   888  0FE8                     	;# 
   889  0FE9                     	;# 
   890  0FEA                     	;# 
   891  0FEB                     	;# 
   892  0FED                     	;# 
   893  0FEE                     	;# 
   894  0FEF                     	;# 
   895  0000                     	;# 
   896  0001                     	;# 
   897  0002                     	;# 
   898  0003                     	;# 
   899  0004                     	;# 
   900  0005                     	;# 
   901  0006                     	;# 
   902  0007                     	;# 
   903  0008                     	;# 
   904  0009                     	;# 
   905  000A                     	;# 
   906  000B                     	;# 
   907  000C                     	;# 
   908  000D                     	;# 
   909  000E                     	;# 
   910  0010                     	;# 
   911  0011                     	;# 
   912  0012                     	;# 
   913  0013                     	;# 
   914  0014                     	;# 
   915  0015                     	;# 
   916  0015                     	;# 
   917  0016                     	;# 
   918  0016                     	;# 
   919  0017                     	;# 
   920  0018                     	;# 
   921  0019                     	;# 
   922  0019                     	;# 
   923  001A                     	;# 
   924  001B                     	;# 
   925  001C                     	;# 
   926  001D                     	;# 
   927  001E                     	;# 
   928  001F                     	;# 
   929  008C                     	;# 
   930  008D                     	;# 
   931  008E                     	;# 
   932  0090                     	;# 
   933  0091                     	;# 
   934  0092                     	;# 
   935  0093                     	;# 
   936  0094                     	;# 
   937  0097                     	;# 
   938  009B                     	;# 
   939  009B                     	;# 
   940  009C                     	;# 
   941  009D                     	;# 
   942  009E                     	;# 
   943  009F                     	;# 
   944  010C                     	;# 
   945  010D                     	;# 
   946  010E                     	;# 
   947  0111                     	;# 
   948  0112                     	;# 
   949  0113                     	;# 
   950  0114                     	;# 
   951  0115                     	;# 
   952  0116                     	;# 
   953  0117                     	;# 
   954  0118                     	;# 
   955  0119                     	;# 
   956  018C                     	;# 
   957  018D                     	;# 
   958  018E                     	;# 
   959  0197                     	;# 
   960  0199                     	;# 
   961  0199                     	;# 
   962  0199                     	;# 
   963  019A                     	;# 
   964  019A                     	;# 
   965  019A                     	;# 
   966  019B                     	;# 
   967  019B                     	;# 
   968  019B                     	;# 
   969  019B                     	;# 
   970  019B                     	;# 
   971  019C                     	;# 
   972  019C                     	;# 
   973  019C                     	;# 
   974  019D                     	;# 
   975  019D                     	;# 
   976  019D                     	;# 
   977  019E                     	;# 
   978  019E                     	;# 
   979  019E                     	;# 
   980  019F                     	;# 
   981  019F                     	;# 
   982  019F                     	;# 
   983  019F                     	;# 
   984  019F                     	;# 
   985  020C                     	;# 
   986  020D                     	;# 
   987  020E                     	;# 
   988  0211                     	;# 
   989  0211                     	;# 
   990  0212                     	;# 
   991  0212                     	;# 
   992  0213                     	;# 
   993  0213                     	;# 
   994  0214                     	;# 
   995  0214                     	;# 
   996  0215                     	;# 
   997  0215                     	;# 
   998  0215                     	;# 
   999  0215                     	;# 
  1000  0216                     	;# 
  1001  0216                     	;# 
  1002  0217                     	;# 
  1003  0217                     	;# 
  1004  0219                     	;# 
  1005  021A                     	;# 
  1006  021B                     	;# 
  1007  021C                     	;# 
  1008  021D                     	;# 
  1009  021D                     	;# 
  1010  021E                     	;# 
  1011  021F                     	;# 
  1012  028C                     	;# 
  1013  028D                     	;# 
  1014  028E                     	;# 
  1015  0291                     	;# 
  1016  0291                     	;# 
  1017  0292                     	;# 
  1018  0293                     	;# 
  1019  0294                     	;# 
  1020  0295                     	;# 
  1021  0295                     	;# 
  1022  0296                     	;# 
  1023  0297                     	;# 
  1024  0298                     	;# 
  1025  029F                     	;# 
  1026  030C                     	;# 
  1027  030D                     	;# 
  1028  030E                     	;# 
  1029  0311                     	;# 
  1030  0311                     	;# 
  1031  0312                     	;# 
  1032  0313                     	;# 
  1033  0314                     	;# 
  1034  0315                     	;# 
  1035  0315                     	;# 
  1036  0316                     	;# 
  1037  0317                     	;# 
  1038  0318                     	;# 
  1039  038C                     	;# 
  1040  038D                     	;# 
  1041  038E                     	;# 
  1042  0391                     	;# 
  1043  0392                     	;# 
  1044  0393                     	;# 
  1045  0394                     	;# 
  1046  0395                     	;# 
  1047  0396                     	;# 
  1048  0397                     	;# 
  1049  0398                     	;# 
  1050  0399                     	;# 
  1051  039A                     	;# 
  1052  039C                     	;# 
  1053  039D                     	;# 
  1054  039E                     	;# 
  1055  039F                     	;# 
  1056  0411                     	;# 
  1057  0411                     	;# 
  1058  0412                     	;# 
  1059  0413                     	;# 
  1060  0414                     	;# 
  1061  0415                     	;# 
  1062  0416                     	;# 
  1063  0417                     	;# 
  1064  0418                     	;# 
  1065  0418                     	;# 
  1066  0419                     	;# 
  1067  041A                     	;# 
  1068  041B                     	;# 
  1069  041C                     	;# 
  1070  041D                     	;# 
  1071  041E                     	;# 
  1072  041F                     	;# 
  1073  0498                     	;# 
  1074  0498                     	;# 
  1075  0499                     	;# 
  1076  049A                     	;# 
  1077  049B                     	;# 
  1078  049B                     	;# 
  1079  049C                     	;# 
  1080  049D                     	;# 
  1081  049E                     	;# 
  1082  049F                     	;# 
  1083  0617                     	;# 
  1084  0618                     	;# 
  1085  0619                     	;# 
  1086  0619                     	;# 
  1087  061A                     	;# 
  1088  061B                     	;# 
  1089  061C                     	;# 
  1090  061C                     	;# 
  1091  061F                     	;# 
  1092  0691                     	;# 
  1093  0692                     	;# 
  1094  0693                     	;# 
  1095  0694                     	;# 
  1096  0695                     	;# 
  1097  0696                     	;# 
  1098  0697                     	;# 
  1099  0698                     	;# 
  1100  0699                     	;# 
  1101  0711                     	;# 
  1102  0712                     	;# 
  1103  0713                     	;# 
  1104  0714                     	;# 
  1105  0715                     	;# 
  1106  0716                     	;# 
  1107  0717                     	;# 
  1108  0718                     	;# 
  1109  0719                     	;# 
  1110  0891                     	;# 
  1111  0891                     	;# 
  1112  0891                     	;# 
  1113  0891                     	;# 
  1114  0891                     	;# 
  1115  0891                     	;# 
  1116  0892                     	;# 
  1117  0892                     	;# 
  1118  0892                     	;# 
  1119  0893                     	;# 
  1120  0893                     	;# 
  1121  0893                     	;# 
  1122  0893                     	;# 
  1123  0893                     	;# 
  1124  0893                     	;# 
  1125  0894                     	;# 
  1126  0894                     	;# 
  1127  0894                     	;# 
  1128  0895                     	;# 
  1129  0895                     	;# 
  1130  0895                     	;# 
  1131  0896                     	;# 
  1132  0896                     	;# 
  1133  0896                     	;# 
  1134  089B                     	;# 
  1135  0911                     	;# 
  1136  0912                     	;# 
  1137  0913                     	;# 
  1138  0914                     	;# 
  1139  0915                     	;# 
  1140  0916                     	;# 
  1141  0918                     	;# 
  1142  0919                     	;# 
  1143  091A                     	;# 
  1144  091B                     	;# 
  1145  091C                     	;# 
  1146  091D                     	;# 
  1147  091E                     	;# 
  1148  091F                     	;# 
  1149  0E0F                     	;# 
  1150  0E10                     	;# 
  1151  0E11                     	;# 
  1152  0E12                     	;# 
  1153  0E13                     	;# 
  1154  0E14                     	;# 
  1155  0E15                     	;# 
  1156  0E16                     	;# 
  1157  0E17                     	;# 
  1158  0E18                     	;# 
  1159  0E19                     	;# 
  1160  0E1A                     	;# 
  1161  0E1B                     	;# 
  1162  0E1C                     	;# 
  1163  0E1D                     	;# 
  1164  0E1E                     	;# 
  1165  0E1F                     	;# 
  1166  0E20                     	;# 
  1167  0E21                     	;# 
  1168  0E22                     	;# 
  1169  0E24                     	;# 
  1170  0E25                     	;# 
  1171  0E28                     	;# 
  1172  0E29                     	;# 
  1173  0E2A                     	;# 
  1174  0E2B                     	;# 
  1175  0E2C                     	;# 
  1176  0E2D                     	;# 
  1177  0E2E                     	;# 
  1178  0E2F                     	;# 
  1179  0E90                     	;# 
  1180  0E91                     	;# 
  1181  0E92                     	;# 
  1182  0E94                     	;# 
  1183  0E95                     	;# 
  1184  0E9C                     	;# 
  1185  0E9D                     	;# 
  1186  0E9E                     	;# 
  1187  0E9F                     	;# 
  1188  0EA0                     	;# 
  1189  0EA1                     	;# 
  1190  0EA2                     	;# 
  1191  0EA3                     	;# 
  1192  0EA4                     	;# 
  1193  0EA5                     	;# 
  1194  0EA6                     	;# 
  1195  0EA7                     	;# 
  1196  0F0F                     	;# 
  1197  0F10                     	;# 
  1198  0F11                     	;# 
  1199  0F12                     	;# 
  1200  0F13                     	;# 
  1201  0F14                     	;# 
  1202  0F15                     	;# 
  1203  0F16                     	;# 
  1204  0F17                     	;# 
  1205  0F18                     	;# 
  1206  0F19                     	;# 
  1207  0F1A                     	;# 
  1208  0F1B                     	;# 
  1209  0F1C                     	;# 
  1210  0F1D                     	;# 
  1211  0F1E                     	;# 
  1212  0F1F                     	;# 
  1213  0F20                     	;# 
  1214  0F21                     	;# 
  1215  0F22                     	;# 
  1216  0F23                     	;# 
  1217  0F24                     	;# 
  1218  0F25                     	;# 
  1219  0F26                     	;# 
  1220  0F27                     	;# 
  1221  0F28                     	;# 
  1222  0F29                     	;# 
  1223  0F2A                     	;# 
  1224  0F2B                     	;# 
  1225  0F2C                     	;# 
  1226  0F2D                     	;# 
  1227  0F2E                     	;# 
  1228  0F2F                     	;# 
  1229  0F30                     	;# 
  1230  0F31                     	;# 
  1231  0F32                     	;# 
  1232  0F33                     	;# 
  1233  0F34                     	;# 
  1234  0F35                     	;# 
  1235  0F36                     	;# 
  1236  0F37                     	;# 
  1237  0FE4                     	;# 
  1238  0FE5                     	;# 
  1239  0FE6                     	;# 
  1240  0FE7                     	;# 
  1241  0FE8                     	;# 
  1242  0FE9                     	;# 
  1243  0FEA                     	;# 
  1244  0FEB                     	;# 
  1245  0FED                     	;# 
  1246  0FEE                     	;# 
  1247  0FEF                     	;# 
  1248  0000                     	;# 
  1249  0001                     	;# 
  1250  0002                     	;# 
  1251  0003                     	;# 
  1252  0004                     	;# 
  1253  0005                     	;# 
  1254  0006                     	;# 
  1255  0007                     	;# 
  1256  0008                     	;# 
  1257  0009                     	;# 
  1258  000A                     	;# 
  1259  000B                     	;# 
  1260  000C                     	;# 
  1261  000D                     	;# 
  1262  000E                     	;# 
  1263  0010                     	;# 
  1264  0011                     	;# 
  1265  0012                     	;# 
  1266  0013                     	;# 
  1267  0014                     	;# 
  1268  0015                     	;# 
  1269  0015                     	;# 
  1270  0016                     	;# 
  1271  0016                     	;# 
  1272  0017                     	;# 
  1273  0018                     	;# 
  1274  0019                     	;# 
  1275  0019                     	;# 
  1276  001A                     	;# 
  1277  001B                     	;# 
  1278  001C                     	;# 
  1279  001D                     	;# 
  1280  001E                     	;# 
  1281  001F                     	;# 
  1282  008C                     	;# 
  1283  008D                     	;# 
  1284  008E                     	;# 
  1285  0090                     	;# 
  1286  0091                     	;# 
  1287  0092                     	;# 
  1288  0093                     	;# 
  1289  0094                     	;# 
  1290  0097                     	;# 
  1291  009B                     	;# 
  1292  009B                     	;# 
  1293  009C                     	;# 
  1294  009D                     	;# 
  1295  009E                     	;# 
  1296  009F                     	;# 
  1297  010C                     	;# 
  1298  010D                     	;# 
  1299  010E                     	;# 
  1300  0111                     	;# 
  1301  0112                     	;# 
  1302  0113                     	;# 
  1303  0114                     	;# 
  1304  0115                     	;# 
  1305  0116                     	;# 
  1306  0117                     	;# 
  1307  0118                     	;# 
  1308  0119                     	;# 
  1309  018C                     	;# 
  1310  018D                     	;# 
  1311  018E                     	;# 
  1312  0197                     	;# 
  1313  0199                     	;# 
  1314  0199                     	;# 
  1315  0199                     	;# 
  1316  019A                     	;# 
  1317  019A                     	;# 
  1318  019A                     	;# 
  1319  019B                     	;# 
  1320  019B                     	;# 
  1321  019B                     	;# 
  1322  019B                     	;# 
  1323  019B                     	;# 
  1324  019C                     	;# 
  1325  019C                     	;# 
  1326  019C                     	;# 
  1327  019D                     	;# 
  1328  019D                     	;# 
  1329  019D                     	;# 
  1330  019E                     	;# 
  1331  019E                     	;# 
  1332  019E                     	;# 
  1333  019F                     	;# 
  1334  019F                     	;# 
  1335  019F                     	;# 
  1336  019F                     	;# 
  1337  019F                     	;# 
  1338  020C                     	;# 
  1339  020D                     	;# 
  1340  020E                     	;# 
  1341  0211                     	;# 
  1342  0211                     	;# 
  1343  0212                     	;# 
  1344  0212                     	;# 
  1345  0213                     	;# 
  1346  0213                     	;# 
  1347  0214                     	;# 
  1348  0214                     	;# 
  1349  0215                     	;# 
  1350  0215                     	;# 
  1351  0215                     	;# 
  1352  0215                     	;# 
  1353  0216                     	;# 
  1354  0216                     	;# 
  1355  0217                     	;# 
  1356  0217                     	;# 
  1357  0219                     	;# 
  1358  021A                     	;# 
  1359  021B                     	;# 
  1360  021C                     	;# 
  1361  021D                     	;# 
  1362  021D                     	;# 
  1363  021E                     	;# 
  1364  021F                     	;# 
  1365  028C                     	;# 
  1366  028D                     	;# 
  1367  028E                     	;# 
  1368  0291                     	;# 
  1369  0291                     	;# 
  1370  0292                     	;# 
  1371  0293                     	;# 
  1372  0294                     	;# 
  1373  0295                     	;# 
  1374  0295                     	;# 
  1375  0296                     	;# 
  1376  0297                     	;# 
  1377  0298                     	;# 
  1378  029F                     	;# 
  1379  030C                     	;# 
  1380  030D                     	;# 
  1381  030E                     	;# 
  1382  0311                     	;# 
  1383  0311                     	;# 
  1384  0312                     	;# 
  1385  0313                     	;# 
  1386  0314                     	;# 
  1387  0315                     	;# 
  1388  0315                     	;# 
  1389  0316                     	;# 
  1390  0317                     	;# 
  1391  0318                     	;# 
  1392  038C                     	;# 
  1393  038D                     	;# 
  1394  038E                     	;# 
  1395  0391                     	;# 
  1396  0392                     	;# 
  1397  0393                     	;# 
  1398  0394                     	;# 
  1399  0395                     	;# 
  1400  0396                     	;# 
  1401  0397                     	;# 
  1402  0398                     	;# 
  1403  0399                     	;# 
  1404  039A                     	;# 
  1405  039C                     	;# 
  1406  039D                     	;# 
  1407  039E                     	;# 
  1408  039F                     	;# 
  1409  0411                     	;# 
  1410  0411                     	;# 
  1411  0412                     	;# 
  1412  0413                     	;# 
  1413  0414                     	;# 
  1414  0415                     	;# 
  1415  0416                     	;# 
  1416  0417                     	;# 
  1417  0418                     	;# 
  1418  0418                     	;# 
  1419  0419                     	;# 
  1420  041A                     	;# 
  1421  041B                     	;# 
  1422  041C                     	;# 
  1423  041D                     	;# 
  1424  041E                     	;# 
  1425  041F                     	;# 
  1426  0498                     	;# 
  1427  0498                     	;# 
  1428  0499                     	;# 
  1429  049A                     	;# 
  1430  049B                     	;# 
  1431  049B                     	;# 
  1432  049C                     	;# 
  1433  049D                     	;# 
  1434  049E                     	;# 
  1435  049F                     	;# 
  1436  0617                     	;# 
  1437  0618                     	;# 
  1438  0619                     	;# 
  1439  0619                     	;# 
  1440  061A                     	;# 
  1441  061B                     	;# 
  1442  061C                     	;# 
  1443  061C                     	;# 
  1444  061F                     	;# 
  1445  0691                     	;# 
  1446  0692                     	;# 
  1447  0693                     	;# 
  1448  0694                     	;# 
  1449  0695                     	;# 
  1450  0696                     	;# 
  1451  0697                     	;# 
  1452  0698                     	;# 
  1453  0699                     	;# 
  1454  0711                     	;# 
  1455  0712                     	;# 
  1456  0713                     	;# 
  1457  0714                     	;# 
  1458  0715                     	;# 
  1459  0716                     	;# 
  1460  0717                     	;# 
  1461  0718                     	;# 
  1462  0719                     	;# 
  1463  0891                     	;# 
  1464  0891                     	;# 
  1465  0891                     	;# 
  1466  0891                     	;# 
  1467  0891                     	;# 
  1468  0891                     	;# 
  1469  0892                     	;# 
  1470  0892                     	;# 
  1471  0892                     	;# 
  1472  0893                     	;# 
  1473  0893                     	;# 
  1474  0893                     	;# 
  1475  0893                     	;# 
  1476  0893                     	;# 
  1477  0893                     	;# 
  1478  0894                     	;# 
  1479  0894                     	;# 
  1480  0894                     	;# 
  1481  0895                     	;# 
  1482  0895                     	;# 
  1483  0895                     	;# 
  1484  0896                     	;# 
  1485  0896                     	;# 
  1486  0896                     	;# 
  1487  089B                     	;# 
  1488  0911                     	;# 
  1489  0912                     	;# 
  1490  0913                     	;# 
  1491  0914                     	;# 
  1492  0915                     	;# 
  1493  0916                     	;# 
  1494  0918                     	;# 
  1495  0919                     	;# 
  1496  091A                     	;# 
  1497  091B                     	;# 
  1498  091C                     	;# 
  1499  091D                     	;# 
  1500  091E                     	;# 
  1501  091F                     	;# 
  1502  0E0F                     	;# 
  1503  0E10                     	;# 
  1504  0E11                     	;# 
  1505  0E12                     	;# 
  1506  0E13                     	;# 
  1507  0E14                     	;# 
  1508  0E15                     	;# 
  1509  0E16                     	;# 
  1510  0E17                     	;# 
  1511  0E18                     	;# 
  1512  0E19                     	;# 
  1513  0E1A                     	;# 
  1514  0E1B                     	;# 
  1515  0E1C                     	;# 
  1516  0E1D                     	;# 
  1517  0E1E                     	;# 
  1518  0E1F                     	;# 
  1519  0E20                     	;# 
  1520  0E21                     	;# 
  1521  0E22                     	;# 
  1522  0E24                     	;# 
  1523  0E25                     	;# 
  1524  0E28                     	;# 
  1525  0E29                     	;# 
  1526  0E2A                     	;# 
  1527  0E2B                     	;# 
  1528  0E2C                     	;# 
  1529  0E2D                     	;# 
  1530  0E2E                     	;# 
  1531  0E2F                     	;# 
  1532  0E90                     	;# 
  1533  0E91                     	;# 
  1534  0E92                     	;# 
  1535  0E94                     	;# 
  1536  0E95                     	;# 
  1537  0E9C                     	;# 
  1538  0E9D                     	;# 
  1539  0E9E                     	;# 
  1540  0E9F                     	;# 
  1541  0EA0                     	;# 
  1542  0EA1                     	;# 
  1543  0EA2                     	;# 
  1544  0EA3                     	;# 
  1545  0EA4                     	;# 
  1546  0EA5                     	;# 
  1547  0EA6                     	;# 
  1548  0EA7                     	;# 
  1549  0F0F                     	;# 
  1550  0F10                     	;# 
  1551  0F11                     	;# 
  1552  0F12                     	;# 
  1553  0F13                     	;# 
  1554  0F14                     	;# 
  1555  0F15                     	;# 
  1556  0F16                     	;# 
  1557  0F17                     	;# 
  1558  0F18                     	;# 
  1559  0F19                     	;# 
  1560  0F1A                     	;# 
  1561  0F1B                     	;# 
  1562  0F1C                     	;# 
  1563  0F1D                     	;# 
  1564  0F1E                     	;# 
  1565  0F1F                     	;# 
  1566  0F20                     	;# 
  1567  0F21                     	;# 
  1568  0F22                     	;# 
  1569  0F23                     	;# 
  1570  0F24                     	;# 
  1571  0F25                     	;# 
  1572  0F26                     	;# 
  1573  0F27                     	;# 
  1574  0F28                     	;# 
  1575  0F29                     	;# 
  1576  0F2A                     	;# 
  1577  0F2B                     	;# 
  1578  0F2C                     	;# 
  1579  0F2D                     	;# 
  1580  0F2E                     	;# 
  1581  0F2F                     	;# 
  1582  0F30                     	;# 
  1583  0F31                     	;# 
  1584  0F32                     	;# 
  1585  0F33                     	;# 
  1586  0F34                     	;# 
  1587  0F35                     	;# 
  1588  0F36                     	;# 
  1589  0F37                     	;# 
  1590  0FE4                     	;# 
  1591  0FE5                     	;# 
  1592  0FE6                     	;# 
  1593  0FE7                     	;# 
  1594  0FE8                     	;# 
  1595  0FE9                     	;# 
  1596  0FEA                     	;# 
  1597  0FEB                     	;# 
  1598  0FED                     	;# 
  1599  0FEE                     	;# 
  1600  0FEF                     	;# 
  1601  0000                     	;# 
  1602  0001                     	;# 
  1603  0002                     	;# 
  1604  0003                     	;# 
  1605  0004                     	;# 
  1606  0005                     	;# 
  1607  0006                     	;# 
  1608  0007                     	;# 
  1609  0008                     	;# 
  1610  0009                     	;# 
  1611  000A                     	;# 
  1612  000B                     	;# 
  1613  000C                     	;# 
  1614  000D                     	;# 
  1615  000E                     	;# 
  1616  0010                     	;# 
  1617  0011                     	;# 
  1618  0012                     	;# 
  1619  0013                     	;# 
  1620  0014                     	;# 
  1621  0015                     	;# 
  1622  0015                     	;# 
  1623  0016                     	;# 
  1624  0016                     	;# 
  1625  0017                     	;# 
  1626  0018                     	;# 
  1627  0019                     	;# 
  1628  0019                     	;# 
  1629  001A                     	;# 
  1630  001B                     	;# 
  1631  001C                     	;# 
  1632  001D                     	;# 
  1633  001E                     	;# 
  1634  001F                     	;# 
  1635  008C                     	;# 
  1636  008D                     	;# 
  1637  008E                     	;# 
  1638  0090                     	;# 
  1639  0091                     	;# 
  1640  0092                     	;# 
  1641  0093                     	;# 
  1642  0094                     	;# 
  1643  0097                     	;# 
  1644  009B                     	;# 
  1645  009B                     	;# 
  1646  009C                     	;# 
  1647  009D                     	;# 
  1648  009E                     	;# 
  1649  009F                     	;# 
  1650  010C                     	;# 
  1651  010D                     	;# 
  1652  010E                     	;# 
  1653  0111                     	;# 
  1654  0112                     	;# 
  1655  0113                     	;# 
  1656  0114                     	;# 
  1657  0115                     	;# 
  1658  0116                     	;# 
  1659  0117                     	;# 
  1660  0118                     	;# 
  1661  0119                     	;# 
  1662  018C                     	;# 
  1663  018D                     	;# 
  1664  018E                     	;# 
  1665  0197                     	;# 
  1666  0199                     	;# 
  1667  0199                     	;# 
  1668  0199                     	;# 
  1669  019A                     	;# 
  1670  019A                     	;# 
  1671  019A                     	;# 
  1672  019B                     	;# 
  1673  019B                     	;# 
  1674  019B                     	;# 
  1675  019B                     	;# 
  1676  019B                     	;# 
  1677  019C                     	;# 
  1678  019C                     	;# 
  1679  019C                     	;# 
  1680  019D                     	;# 
  1681  019D                     	;# 
  1682  019D                     	;# 
  1683  019E                     	;# 
  1684  019E                     	;# 
  1685  019E                     	;# 
  1686  019F                     	;# 
  1687  019F                     	;# 
  1688  019F                     	;# 
  1689  019F                     	;# 
  1690  019F                     	;# 
  1691  020C                     	;# 
  1692  020D                     	;# 
  1693  020E                     	;# 
  1694  0211                     	;# 
  1695  0211                     	;# 
  1696  0212                     	;# 
  1697  0212                     	;# 
  1698  0213                     	;# 
  1699  0213                     	;# 
  1700  0214                     	;# 
  1701  0214                     	;# 
  1702  0215                     	;# 
  1703  0215                     	;# 
  1704  0215                     	;# 
  1705  0215                     	;# 
  1706  0216                     	;# 
  1707  0216                     	;# 
  1708  0217                     	;# 
  1709  0217                     	;# 
  1710  0219                     	;# 
  1711  021A                     	;# 
  1712  021B                     	;# 
  1713  021C                     	;# 
  1714  021D                     	;# 
  1715  021D                     	;# 
  1716  021E                     	;# 
  1717  021F                     	;# 
  1718  028C                     	;# 
  1719  028D                     	;# 
  1720  028E                     	;# 
  1721  0291                     	;# 
  1722  0291                     	;# 
  1723  0292                     	;# 
  1724  0293                     	;# 
  1725  0294                     	;# 
  1726  0295                     	;# 
  1727  0295                     	;# 
  1728  0296                     	;# 
  1729  0297                     	;# 
  1730  0298                     	;# 
  1731  029F                     	;# 
  1732  030C                     	;# 
  1733  030D                     	;# 
  1734  030E                     	;# 
  1735  0311                     	;# 
  1736  0311                     	;# 
  1737  0312                     	;# 
  1738  0313                     	;# 
  1739  0314                     	;# 
  1740  0315                     	;# 
  1741  0315                     	;# 
  1742  0316                     	;# 
  1743  0317                     	;# 
  1744  0318                     	;# 
  1745  038C                     	;# 
  1746  038D                     	;# 
  1747  038E                     	;# 
  1748  0391                     	;# 
  1749  0392                     	;# 
  1750  0393                     	;# 
  1751  0394                     	;# 
  1752  0395                     	;# 
  1753  0396                     	;# 
  1754  0397                     	;# 
  1755  0398                     	;# 
  1756  0399                     	;# 
  1757  039A                     	;# 
  1758  039C                     	;# 
  1759  039D                     	;# 
  1760  039E                     	;# 
  1761  039F                     	;# 
  1762  0411                     	;# 
  1763  0411                     	;# 
  1764  0412                     	;# 
  1765  0413                     	;# 
  1766  0414                     	;# 
  1767  0415                     	;# 
  1768  0416                     	;# 
  1769  0417                     	;# 
  1770  0418                     	;# 
  1771  0418                     	;# 
  1772  0419                     	;# 
  1773  041A                     	;# 
  1774  041B                     	;# 
  1775  041C                     	;# 
  1776  041D                     	;# 
  1777  041E                     	;# 
  1778  041F                     	;# 
  1779  0498                     	;# 
  1780  0498                     	;# 
  1781  0499                     	;# 
  1782  049A                     	;# 
  1783  049B                     	;# 
  1784  049B                     	;# 
  1785  049C                     	;# 
  1786  049D                     	;# 
  1787  049E                     	;# 
  1788  049F                     	;# 
  1789  0617                     	;# 
  1790  0618                     	;# 
  1791  0619                     	;# 
  1792  0619                     	;# 
  1793  061A                     	;# 
  1794  061B                     	;# 
  1795  061C                     	;# 
  1796  061C                     	;# 
  1797  061F                     	;# 
  1798  0691                     	;# 
  1799  0692                     	;# 
  1800  0693                     	;# 
  1801  0694                     	;# 
  1802  0695                     	;# 
  1803  0696                     	;# 
  1804  0697                     	;# 
  1805  0698                     	;# 
  1806  0699                     	;# 
  1807  0711                     	;# 
  1808  0712                     	;# 
  1809  0713                     	;# 
  1810  0714                     	;# 
  1811  0715                     	;# 
  1812  0716                     	;# 
  1813  0717                     	;# 
  1814  0718                     	;# 
  1815  0719                     	;# 
  1816  0891                     	;# 
  1817  0891                     	;# 
  1818  0891                     	;# 
  1819  0891                     	;# 
  1820  0891                     	;# 
  1821  0891                     	;# 
  1822  0892                     	;# 
  1823  0892                     	;# 
  1824  0892                     	;# 
  1825  0893                     	;# 
  1826  0893                     	;# 
  1827  0893                     	;# 
  1828  0893                     	;# 
  1829  0893                     	;# 
  1830  0893                     	;# 
  1831  0894                     	;# 
  1832  0894                     	;# 
  1833  0894                     	;# 
  1834  0895                     	;# 
  1835  0895                     	;# 
  1836  0895                     	;# 
  1837  0896                     	;# 
  1838  0896                     	;# 
  1839  0896                     	;# 
  1840  089B                     	;# 
  1841  0911                     	;# 
  1842  0912                     	;# 
  1843  0913                     	;# 
  1844  0914                     	;# 
  1845  0915                     	;# 
  1846  0916                     	;# 
  1847  0918                     	;# 
  1848  0919                     	;# 
  1849  091A                     	;# 
  1850  091B                     	;# 
  1851  091C                     	;# 
  1852  091D                     	;# 
  1853  091E                     	;# 
  1854  091F                     	;# 
  1855  0E0F                     	;# 
  1856  0E10                     	;# 
  1857  0E11                     	;# 
  1858  0E12                     	;# 
  1859  0E13                     	;# 
  1860  0E14                     	;# 
  1861  0E15                     	;# 
  1862  0E16                     	;# 
  1863  0E17                     	;# 
  1864  0E18                     	;# 
  1865  0E19                     	;# 
  1866  0E1A                     	;# 
  1867  0E1B                     	;# 
  1868  0E1C                     	;# 
  1869  0E1D                     	;# 
  1870  0E1E                     	;# 
  1871  0E1F                     	;# 
  1872  0E20                     	;# 
  1873  0E21                     	;# 
  1874  0E22                     	;# 
  1875  0E24                     	;# 
  1876  0E25                     	;# 
  1877  0E28                     	;# 
  1878  0E29                     	;# 
  1879  0E2A                     	;# 
  1880  0E2B                     	;# 
  1881  0E2C                     	;# 
  1882  0E2D                     	;# 
  1883  0E2E                     	;# 
  1884  0E2F                     	;# 
  1885  0E90                     	;# 
  1886  0E91                     	;# 
  1887  0E92                     	;# 
  1888  0E94                     	;# 
  1889  0E95                     	;# 
  1890  0E9C                     	;# 
  1891  0E9D                     	;# 
  1892  0E9E                     	;# 
  1893  0E9F                     	;# 
  1894  0EA0                     	;# 
  1895  0EA1                     	;# 
  1896  0EA2                     	;# 
  1897  0EA3                     	;# 
  1898  0EA4                     	;# 
  1899  0EA5                     	;# 
  1900  0EA6                     	;# 
  1901  0EA7                     	;# 
  1902  0F0F                     	;# 
  1903  0F10                     	;# 
  1904  0F11                     	;# 
  1905  0F12                     	;# 
  1906  0F13                     	;# 
  1907  0F14                     	;# 
  1908  0F15                     	;# 
  1909  0F16                     	;# 
  1910  0F17                     	;# 
  1911  0F18                     	;# 
  1912  0F19                     	;# 
  1913  0F1A                     	;# 
  1914  0F1B                     	;# 
  1915  0F1C                     	;# 
  1916  0F1D                     	;# 
  1917  0F1E                     	;# 
  1918  0F1F                     	;# 
  1919  0F20                     	;# 
  1920  0F21                     	;# 
  1921  0F22                     	;# 
  1922  0F23                     	;# 
  1923  0F24                     	;# 
  1924  0F25                     	;# 
  1925  0F26                     	;# 
  1926  0F27                     	;# 
  1927  0F28                     	;# 
  1928  0F29                     	;# 
  1929  0F2A                     	;# 
  1930  0F2B                     	;# 
  1931  0F2C                     	;# 
  1932  0F2D                     	;# 
  1933  0F2E                     	;# 
  1934  0F2F                     	;# 
  1935  0F30                     	;# 
  1936  0F31                     	;# 
  1937  0F32                     	;# 
  1938  0F33                     	;# 
  1939  0F34                     	;# 
  1940  0F35                     	;# 
  1941  0F36                     	;# 
  1942  0F37                     	;# 
  1943  0FE4                     	;# 
  1944  0FE5                     	;# 
  1945  0FE6                     	;# 
  1946  0FE7                     	;# 
  1947  0FE8                     	;# 
  1948  0FE9                     	;# 
  1949  0FEA                     	;# 
  1950  0FEB                     	;# 
  1951  0FED                     	;# 
  1952  0FEE                     	;# 
  1953  0FEF                     	;# 
  1954  0000                     	;# 
  1955  0001                     	;# 
  1956  0002                     	;# 
  1957  0003                     	;# 
  1958  0004                     	;# 
  1959  0005                     	;# 
  1960  0006                     	;# 
  1961  0007                     	;# 
  1962  0008                     	;# 
  1963  0009                     	;# 
  1964  000A                     	;# 
  1965  000B                     	;# 
  1966  000C                     	;# 
  1967  000D                     	;# 
  1968  000E                     	;# 
  1969  0010                     	;# 
  1970  0011                     	;# 
  1971  0012                     	;# 
  1972  0013                     	;# 
  1973  0014                     	;# 
  1974  0015                     	;# 
  1975  0015                     	;# 
  1976  0016                     	;# 
  1977  0016                     	;# 
  1978  0017                     	;# 
  1979  0018                     	;# 
  1980  0019                     	;# 
  1981  0019                     	;# 
  1982  001A                     	;# 
  1983  001B                     	;# 
  1984  001C                     	;# 
  1985  001D                     	;# 
  1986  001E                     	;# 
  1987  001F                     	;# 
  1988  008C                     	;# 
  1989  008D                     	;# 
  1990  008E                     	;# 
  1991  0090                     	;# 
  1992  0091                     	;# 
  1993  0092                     	;# 
  1994  0093                     	;# 
  1995  0094                     	;# 
  1996  0097                     	;# 
  1997  009B                     	;# 
  1998  009B                     	;# 
  1999  009C                     	;# 
  2000  009D                     	;# 
  2001  009E                     	;# 
  2002  009F                     	;# 
  2003  010C                     	;# 
  2004  010D                     	;# 
  2005  010E                     	;# 
  2006  0111                     	;# 
  2007  0112                     	;# 
  2008  0113                     	;# 
  2009  0114                     	;# 
  2010  0115                     	;# 
  2011  0116                     	;# 
  2012  0117                     	;# 
  2013  0118                     	;# 
  2014  0119                     	;# 
  2015  018C                     	;# 
  2016  018D                     	;# 
  2017  018E                     	;# 
  2018  0197                     	;# 
  2019  0199                     	;# 
  2020  0199                     	;# 
  2021  0199                     	;# 
  2022  019A                     	;# 
  2023  019A                     	;# 
  2024  019A                     	;# 
  2025  019B                     	;# 
  2026  019B                     	;# 
  2027  019B                     	;# 
  2028  019B                     	;# 
  2029  019B                     	;# 
  2030  019C                     	;# 
  2031  019C                     	;# 
  2032  019C                     	;# 
  2033  019D                     	;# 
  2034  019D                     	;# 
  2035  019D                     	;# 
  2036  019E                     	;# 
  2037  019E                     	;# 
  2038  019E                     	;# 
  2039  019F                     	;# 
  2040  019F                     	;# 
  2041  019F                     	;# 
  2042  019F                     	;# 
  2043  019F                     	;# 
  2044  020C                     	;# 
  2045  020D                     	;# 
  2046  020E                     	;# 
  2047  0211                     	;# 
  2048  0211                     	;# 
  2049  0212                     	;# 
  2050  0212                     	;# 
  2051  0213                     	;# 
  2052  0213                     	;# 
  2053  0214                     	;# 
  2054  0214                     	;# 
  2055  0215                     	;# 
  2056  0215                     	;# 
  2057  0215                     	;# 
  2058  0215                     	;# 
  2059  0216                     	;# 
  2060  0216                     	;# 
  2061  0217                     	;# 
  2062  0217                     	;# 
  2063  0219                     	;# 
  2064  021A                     	;# 
  2065  021B                     	;# 
  2066  021C                     	;# 
  2067  021D                     	;# 
  2068  021D                     	;# 
  2069  021E                     	;# 
  2070  021F                     	;# 
  2071  028C                     	;# 
  2072  028D                     	;# 
  2073  028E                     	;# 
  2074  0291                     	;# 
  2075  0291                     	;# 
  2076  0292                     	;# 
  2077  0293                     	;# 
  2078  0294                     	;# 
  2079  0295                     	;# 
  2080  0295                     	;# 
  2081  0296                     	;# 
  2082  0297                     	;# 
  2083  0298                     	;# 
  2084  029F                     	;# 
  2085  030C                     	;# 
  2086  030D                     	;# 
  2087  030E                     	;# 
  2088  0311                     	;# 
  2089  0311                     	;# 
  2090  0312                     	;# 
  2091  0313                     	;# 
  2092  0314                     	;# 
  2093  0315                     	;# 
  2094  0315                     	;# 
  2095  0316                     	;# 
  2096  0317                     	;# 
  2097  0318                     	;# 
  2098  038C                     	;# 
  2099  038D                     	;# 
  2100  038E                     	;# 
  2101  0391                     	;# 
  2102  0392                     	;# 
  2103  0393                     	;# 
  2104  0394                     	;# 
  2105  0395                     	;# 
  2106  0396                     	;# 
  2107  0397                     	;# 
  2108  0398                     	;# 
  2109  0399                     	;# 
  2110  039A                     	;# 
  2111  039C                     	;# 
  2112  039D                     	;# 
  2113  039E                     	;# 
  2114  039F                     	;# 
  2115  0411                     	;# 
  2116  0411                     	;# 
  2117  0412                     	;# 
  2118  0413                     	;# 
  2119  0414                     	;# 
  2120  0415                     	;# 
  2121  0416                     	;# 
  2122  0417                     	;# 
  2123  0418                     	;# 
  2124  0418                     	;# 
  2125  0419                     	;# 
  2126  041A                     	;# 
  2127  041B                     	;# 
  2128  041C                     	;# 
  2129  041D                     	;# 
  2130  041E                     	;# 
  2131  041F                     	;# 
  2132  0498                     	;# 
  2133  0498                     	;# 
  2134  0499                     	;# 
  2135  049A                     	;# 
  2136  049B                     	;# 
  2137  049B                     	;# 
  2138  049C                     	;# 
  2139  049D                     	;# 
  2140  049E                     	;# 
  2141  049F                     	;# 
  2142  0617                     	;# 
  2143  0618                     	;# 
  2144  0619                     	;# 
  2145  0619                     	;# 
  2146  061A                     	;# 
  2147  061B                     	;# 
  2148  061C                     	;# 
  2149  061C                     	;# 
  2150  061F                     	;# 
  2151  0691                     	;# 
  2152  0692                     	;# 
  2153  0693                     	;# 
  2154  0694                     	;# 
  2155  0695                     	;# 
  2156  0696                     	;# 
  2157  0697                     	;# 
  2158  0698                     	;# 
  2159  0699                     	;# 
  2160  0711                     	;# 
  2161  0712                     	;# 
  2162  0713                     	;# 
  2163  0714                     	;# 
  2164  0715                     	;# 
  2165  0716                     	;# 
  2166  0717                     	;# 
  2167  0718                     	;# 
  2168  0719                     	;# 
  2169  0891                     	;# 
  2170  0891                     	;# 
  2171  0891                     	;# 
  2172  0891                     	;# 
  2173  0891                     	;# 
  2174  0891                     	;# 
  2175  0892                     	;# 
  2176  0892                     	;# 
  2177  0892                     	;# 
  2178  0893                     	;# 
  2179  0893                     	;# 
  2180  0893                     	;# 
  2181  0893                     	;# 
  2182  0893                     	;# 
  2183  0893                     	;# 
  2184  0894                     	;# 
  2185  0894                     	;# 
  2186  0894                     	;# 
  2187  0895                     	;# 
  2188  0895                     	;# 
  2189  0895                     	;# 
  2190  0896                     	;# 
  2191  0896                     	;# 
  2192  0896                     	;# 
  2193  089B                     	;# 
  2194  0911                     	;# 
  2195  0912                     	;# 
  2196  0913                     	;# 
  2197  0914                     	;# 
  2198  0915                     	;# 
  2199  0916                     	;# 
  2200  0918                     	;# 
  2201  0919                     	;# 
  2202  091A                     	;# 
  2203  091B                     	;# 
  2204  091C                     	;# 
  2205  091D                     	;# 
  2206  091E                     	;# 
  2207  091F                     	;# 
  2208  0E0F                     	;# 
  2209  0E10                     	;# 
  2210  0E11                     	;# 
  2211  0E12                     	;# 
  2212  0E13                     	;# 
  2213  0E14                     	;# 
  2214  0E15                     	;# 
  2215  0E16                     	;# 
  2216  0E17                     	;# 
  2217  0E18                     	;# 
  2218  0E19                     	;# 
  2219  0E1A                     	;# 
  2220  0E1B                     	;# 
  2221  0E1C                     	;# 
  2222  0E1D                     	;# 
  2223  0E1E                     	;# 
  2224  0E1F                     	;# 
  2225  0E20                     	;# 
  2226  0E21                     	;# 
  2227  0E22                     	;# 
  2228  0E24                     	;# 
  2229  0E25                     	;# 
  2230  0E28                     	;# 
  2231  0E29                     	;# 
  2232  0E2A                     	;# 
  2233  0E2B                     	;# 
  2234  0E2C                     	;# 
  2235  0E2D                     	;# 
  2236  0E2E                     	;# 
  2237  0E2F                     	;# 
  2238  0E90                     	;# 
  2239  0E91                     	;# 
  2240  0E92                     	;# 
  2241  0E94                     	;# 
  2242  0E95                     	;# 
  2243  0E9C                     	;# 
  2244  0E9D                     	;# 
  2245  0E9E                     	;# 
  2246  0E9F                     	;# 
  2247  0EA0                     	;# 
  2248  0EA1                     	;# 
  2249  0EA2                     	;# 
  2250  0EA3                     	;# 
  2251  0EA4                     	;# 
  2252  0EA5                     	;# 
  2253  0EA6                     	;# 
  2254  0EA7                     	;# 
  2255  0F0F                     	;# 
  2256  0F10                     	;# 
  2257  0F11                     	;# 
  2258  0F12                     	;# 
  2259  0F13                     	;# 
  2260  0F14                     	;# 
  2261  0F15                     	;# 
  2262  0F16                     	;# 
  2263  0F17                     	;# 
  2264  0F18                     	;# 
  2265  0F19                     	;# 
  2266  0F1A                     	;# 
  2267  0F1B                     	;# 
  2268  0F1C                     	;# 
  2269  0F1D                     	;# 
  2270  0F1E                     	;# 
  2271  0F1F                     	;# 
  2272  0F20                     	;# 
  2273  0F21                     	;# 
  2274  0F22                     	;# 
  2275  0F23                     	;# 
  2276  0F24                     	;# 
  2277  0F25                     	;# 
  2278  0F26                     	;# 
  2279  0F27                     	;# 
  2280  0F28                     	;# 
  2281  0F29                     	;# 
  2282  0F2A                     	;# 
  2283  0F2B                     	;# 
  2284  0F2C                     	;# 
  2285  0F2D                     	;# 
  2286  0F2E                     	;# 
  2287  0F2F                     	;# 
  2288  0F30                     	;# 
  2289  0F31                     	;# 
  2290  0F32                     	;# 
  2291  0F33                     	;# 
  2292  0F34                     	;# 
  2293  0F35                     	;# 
  2294  0F36                     	;# 
  2295  0F37                     	;# 
  2296  0FE4                     	;# 
  2297  0FE5                     	;# 
  2298  0FE6                     	;# 
  2299  0FE7                     	;# 
  2300  0FE8                     	;# 
  2301  0FE9                     	;# 
  2302  0FEA                     	;# 
  2303  0FEB                     	;# 
  2304  0FED                     	;# 
  2305  0FEE                     	;# 
  2306  0FEF                     	;# 
  2307  0000                     	;# 
  2308  0001                     	;# 
  2309  0002                     	;# 
  2310  0003                     	;# 
  2311  0004                     	;# 
  2312  0005                     	;# 
  2313  0006                     	;# 
  2314  0007                     	;# 
  2315  0008                     	;# 
  2316  0009                     	;# 
  2317  000A                     	;# 
  2318  000B                     	;# 
  2319  000C                     	;# 
  2320  000D                     	;# 
  2321  000E                     	;# 
  2322  0010                     	;# 
  2323  0011                     	;# 
  2324  0012                     	;# 
  2325  0013                     	;# 
  2326  0014                     	;# 
  2327  0015                     	;# 
  2328  0015                     	;# 
  2329  0016                     	;# 
  2330  0016                     	;# 
  2331  0017                     	;# 
  2332  0018                     	;# 
  2333  0019                     	;# 
  2334  0019                     	;# 
  2335  001A                     	;# 
  2336  001B                     	;# 
  2337  001C                     	;# 
  2338  001D                     	;# 
  2339  001E                     	;# 
  2340  001F                     	;# 
  2341  008C                     	;# 
  2342  008D                     	;# 
  2343  008E                     	;# 
  2344  0090                     	;# 
  2345  0091                     	;# 
  2346  0092                     	;# 
  2347  0093                     	;# 
  2348  0094                     	;# 
  2349  0097                     	;# 
  2350  009B                     	;# 
  2351  009B                     	;# 
  2352  009C                     	;# 
  2353  009D                     	;# 
  2354  009E                     	;# 
  2355  009F                     	;# 
  2356  010C                     	;# 
  2357  010D                     	;# 
  2358  010E                     	;# 
  2359  0111                     	;# 
  2360  0112                     	;# 
  2361  0113                     	;# 
  2362  0114                     	;# 
  2363  0115                     	;# 
  2364  0116                     	;# 
  2365  0117                     	;# 
  2366  0118                     	;# 
  2367  0119                     	;# 
  2368  018C                     	;# 
  2369  018D                     	;# 
  2370  018E                     	;# 
  2371  0197                     	;# 
  2372  0199                     	;# 
  2373  0199                     	;# 
  2374  0199                     	;# 
  2375  019A                     	;# 
  2376  019A                     	;# 
  2377  019A                     	;# 
  2378  019B                     	;# 
  2379  019B                     	;# 
  2380  019B                     	;# 
  2381  019B                     	;# 
  2382  019B                     	;# 
  2383  019C                     	;# 
  2384  019C                     	;# 
  2385  019C                     	;# 
  2386  019D                     	;# 
  2387  019D                     	;# 
  2388  019D                     	;# 
  2389  019E                     	;# 
  2390  019E                     	;# 
  2391  019E                     	;# 
  2392  019F                     	;# 
  2393  019F                     	;# 
  2394  019F                     	;# 
  2395  019F                     	;# 
  2396  019F                     	;# 
  2397  020C                     	;# 
  2398  020D                     	;# 
  2399  020E                     	;# 
  2400  0211                     	;# 
  2401  0211                     	;# 
  2402  0212                     	;# 
  2403  0212                     	;# 
  2404  0213                     	;# 
  2405  0213                     	;# 
  2406  0214                     	;# 
  2407  0214                     	;# 
  2408  0215                     	;# 
  2409  0215                     	;# 
  2410  0215                     	;# 
  2411  0215                     	;# 
  2412  0216                     	;# 
  2413  0216                     	;# 
  2414  0217                     	;# 
  2415  0217                     	;# 
  2416  0219                     	;# 
  2417  021A                     	;# 
  2418  021B                     	;# 
  2419  021C                     	;# 
  2420  021D                     	;# 
  2421  021D                     	;# 
  2422  021E                     	;# 
  2423  021F                     	;# 
  2424  028C                     	;# 
  2425  028D                     	;# 
  2426  028E                     	;# 
  2427  0291                     	;# 
  2428  0291                     	;# 
  2429  0292                     	;# 
  2430  0293                     	;# 
  2431  0294                     	;# 
  2432  0295                     	;# 
  2433  0295                     	;# 
  2434  0296                     	;# 
  2435  0297                     	;# 
  2436  0298                     	;# 
  2437  029F                     	;# 
  2438  030C                     	;# 
  2439  030D                     	;# 
  2440  030E                     	;# 
  2441  0311                     	;# 
  2442  0311                     	;# 
  2443  0312                     	;# 
  2444  0313                     	;# 
  2445  0314                     	;# 
  2446  0315                     	;# 
  2447  0315                     	;# 
  2448  0316                     	;# 
  2449  0317                     	;# 
  2450  0318                     	;# 
  2451  038C                     	;# 
  2452  038D                     	;# 
  2453  038E                     	;# 
  2454  0391                     	;# 
  2455  0392                     	;# 
  2456  0393                     	;# 
  2457  0394                     	;# 
  2458  0395                     	;# 
  2459  0396                     	;# 
  2460  0397                     	;# 
  2461  0398                     	;# 
  2462  0399                     	;# 
  2463  039A                     	;# 
  2464  039C                     	;# 
  2465  039D                     	;# 
  2466  039E                     	;# 
  2467  039F                     	;# 
  2468  0411                     	;# 
  2469  0411                     	;# 
  2470  0412                     	;# 
  2471  0413                     	;# 
  2472  0414                     	;# 
  2473  0415                     	;# 
  2474  0416                     	;# 
  2475  0417                     	;# 
  2476  0418                     	;# 
  2477  0418                     	;# 
  2478  0419                     	;# 
  2479  041A                     	;# 
  2480  041B                     	;# 
  2481  041C                     	;# 
  2482  041D                     	;# 
  2483  041E                     	;# 
  2484  041F                     	;# 
  2485  0498                     	;# 
  2486  0498                     	;# 
  2487  0499                     	;# 
  2488  049A                     	;# 
  2489  049B                     	;# 
  2490  049B                     	;# 
  2491  049C                     	;# 
  2492  049D                     	;# 
  2493  049E                     	;# 
  2494  049F                     	;# 
  2495  0617                     	;# 
  2496  0618                     	;# 
  2497  0619                     	;# 
  2498  0619                     	;# 
  2499  061A                     	;# 
  2500  061B                     	;# 
  2501  061C                     	;# 
  2502  061C                     	;# 
  2503  061F                     	;# 
  2504  0691                     	;# 
  2505  0692                     	;# 
  2506  0693                     	;# 
  2507  0694                     	;# 
  2508  0695                     	;# 
  2509  0696                     	;# 
  2510  0697                     	;# 
  2511  0698                     	;# 
  2512  0699                     	;# 
  2513  0711                     	;# 
  2514  0712                     	;# 
  2515  0713                     	;# 
  2516  0714                     	;# 
  2517  0715                     	;# 
  2518  0716                     	;# 
  2519  0717                     	;# 
  2520  0718                     	;# 
  2521  0719                     	;# 
  2522  0891                     	;# 
  2523  0891                     	;# 
  2524  0891                     	;# 
  2525  0891                     	;# 
  2526  0891                     	;# 
  2527  0891                     	;# 
  2528  0892                     	;# 
  2529  0892                     	;# 
  2530  0892                     	;# 
  2531  0893                     	;# 
  2532  0893                     	;# 
  2533  0893                     	;# 
  2534  0893                     	;# 
  2535  0893                     	;# 
  2536  0893                     	;# 
  2537  0894                     	;# 
  2538  0894                     	;# 
  2539  0894                     	;# 
  2540  0895                     	;# 
  2541  0895                     	;# 
  2542  0895                     	;# 
  2543  0896                     	;# 
  2544  0896                     	;# 
  2545  0896                     	;# 
  2546  089B                     	;# 
  2547  0911                     	;# 
  2548  0912                     	;# 
  2549  0913                     	;# 
  2550  0914                     	;# 
  2551  0915                     	;# 
  2552  0916                     	;# 
  2553  0918                     	;# 
  2554  0919                     	;# 
  2555  091A                     	;# 
  2556  091B                     	;# 
  2557  091C                     	;# 
  2558  091D                     	;# 
  2559  091E                     	;# 
  2560  091F                     	;# 
  2561  0E0F                     	;# 
  2562  0E10                     	;# 
  2563  0E11                     	;# 
  2564  0E12                     	;# 
  2565  0E13                     	;# 
  2566  0E14                     	;# 
  2567  0E15                     	;# 
  2568  0E16                     	;# 
  2569  0E17                     	;# 
  2570  0E18                     	;# 
  2571  0E19                     	;# 
  2572  0E1A                     	;# 
  2573  0E1B                     	;# 
  2574  0E1C                     	;# 
  2575  0E1D                     	;# 
  2576  0E1E                     	;# 
  2577  0E1F                     	;# 
  2578  0E20                     	;# 
  2579  0E21                     	;# 
  2580  0E22                     	;# 
  2581  0E24                     	;# 
  2582  0E25                     	;# 
  2583  0E28                     	;# 
  2584  0E29                     	;# 
  2585  0E2A                     	;# 
  2586  0E2B                     	;# 
  2587  0E2C                     	;# 
  2588  0E2D                     	;# 
  2589  0E2E                     	;# 
  2590  0E2F                     	;# 
  2591  0E90                     	;# 
  2592  0E91                     	;# 
  2593  0E92                     	;# 
  2594  0E94                     	;# 
  2595  0E95                     	;# 
  2596  0E9C                     	;# 
  2597  0E9D                     	;# 
  2598  0E9E                     	;# 
  2599  0E9F                     	;# 
  2600  0EA0                     	;# 
  2601  0EA1                     	;# 
  2602  0EA2                     	;# 
  2603  0EA3                     	;# 
  2604  0EA4                     	;# 
  2605  0EA5                     	;# 
  2606  0EA6                     	;# 
  2607  0EA7                     	;# 
  2608  0F0F                     	;# 
  2609  0F10                     	;# 
  2610  0F11                     	;# 
  2611  0F12                     	;# 
  2612  0F13                     	;# 
  2613  0F14                     	;# 
  2614  0F15                     	;# 
  2615  0F16                     	;# 
  2616  0F17                     	;# 
  2617  0F18                     	;# 
  2618  0F19                     	;# 
  2619  0F1A                     	;# 
  2620  0F1B                     	;# 
  2621  0F1C                     	;# 
  2622  0F1D                     	;# 
  2623  0F1E                     	;# 
  2624  0F1F                     	;# 
  2625  0F20                     	;# 
  2626  0F21                     	;# 
  2627  0F22                     	;# 
  2628  0F23                     	;# 
  2629  0F24                     	;# 
  2630  0F25                     	;# 
  2631  0F26                     	;# 
  2632  0F27                     	;# 
  2633  0F28                     	;# 
  2634  0F29                     	;# 
  2635  0F2A                     	;# 
  2636  0F2B                     	;# 
  2637  0F2C                     	;# 
  2638  0F2D                     	;# 
  2639  0F2E                     	;# 
  2640  0F2F                     	;# 
  2641  0F30                     	;# 
  2642  0F31                     	;# 
  2643  0F32                     	;# 
  2644  0F33                     	;# 
  2645  0F34                     	;# 
  2646  0F35                     	;# 
  2647  0F36                     	;# 
  2648  0F37                     	;# 
  2649  0FE4                     	;# 
  2650  0FE5                     	;# 
  2651  0FE6                     	;# 
  2652  0FE7                     	;# 
  2653  0FE8                     	;# 
  2654  0FE9                     	;# 
  2655  0FEA                     	;# 
  2656  0FEB                     	;# 
  2657  0FED                     	;# 
  2658  0FEE                     	;# 
  2659  0FEF                     	;# 
  2660  0000                     	;# 
  2661  0001                     	;# 
  2662  0002                     	;# 
  2663  0003                     	;# 
  2664  0004                     	;# 
  2665  0005                     	;# 
  2666  0006                     	;# 
  2667  0007                     	;# 
  2668  0008                     	;# 
  2669  0009                     	;# 
  2670  000A                     	;# 
  2671  000B                     	;# 
  2672  000C                     	;# 
  2673  000D                     	;# 
  2674  000E                     	;# 
  2675  0010                     	;# 
  2676  0011                     	;# 
  2677  0012                     	;# 
  2678  0013                     	;# 
  2679  0014                     	;# 
  2680  0015                     	;# 
  2681  0015                     	;# 
  2682  0016                     	;# 
  2683  0016                     	;# 
  2684  0017                     	;# 
  2685  0018                     	;# 
  2686  0019                     	;# 
  2687  0019                     	;# 
  2688  001A                     	;# 
  2689  001B                     	;# 
  2690  001C                     	;# 
  2691  001D                     	;# 
  2692  001E                     	;# 
  2693  001F                     	;# 
  2694  008C                     	;# 
  2695  008D                     	;# 
  2696  008E                     	;# 
  2697  0090                     	;# 
  2698  0091                     	;# 
  2699  0092                     	;# 
  2700  0093                     	;# 
  2701  0094                     	;# 
  2702  0097                     	;# 
  2703  009B                     	;# 
  2704  009B                     	;# 
  2705  009C                     	;# 
  2706  009D                     	;# 
  2707  009E                     	;# 
  2708  009F                     	;# 
  2709  010C                     	;# 
  2710  010D                     	;# 
  2711  010E                     	;# 
  2712  0111                     	;# 
  2713  0112                     	;# 
  2714  0113                     	;# 
  2715  0114                     	;# 
  2716  0115                     	;# 
  2717  0116                     	;# 
  2718  0117                     	;# 
  2719  0118                     	;# 
  2720  0119                     	;# 
  2721  018C                     	;# 
  2722  018D                     	;# 
  2723  018E                     	;# 
  2724  0197                     	;# 
  2725  0199                     	;# 
  2726  0199                     	;# 
  2727  0199                     	;# 
  2728  019A                     	;# 
  2729  019A                     	;# 
  2730  019A                     	;# 
  2731  019B                     	;# 
  2732  019B                     	;# 
  2733  019B                     	;# 
  2734  019B                     	;# 
  2735  019B                     	;# 
  2736  019C                     	;# 
  2737  019C                     	;# 
  2738  019C                     	;# 
  2739  019D                     	;# 
  2740  019D                     	;# 
  2741  019D                     	;# 
  2742  019E                     	;# 
  2743  019E                     	;# 
  2744  019E                     	;# 
  2745  019F                     	;# 
  2746  019F                     	;# 
  2747  019F                     	;# 
  2748  019F                     	;# 
  2749  019F                     	;# 
  2750  020C                     	;# 
  2751  020D                     	;# 
  2752  020E                     	;# 
  2753  0211                     	;# 
  2754  0211                     	;# 
  2755  0212                     	;# 
  2756  0212                     	;# 
  2757  0213                     	;# 
  2758  0213                     	;# 
  2759  0214                     	;# 
  2760  0214                     	;# 
  2761  0215                     	;# 
  2762  0215                     	;# 
  2763  0215                     	;# 
  2764  0215                     	;# 
  2765  0216                     	;# 
  2766  0216                     	;# 
  2767  0217                     	;# 
  2768  0217                     	;# 
  2769  0219                     	;# 
  2770  021A                     	;# 
  2771  021B                     	;# 
  2772  021C                     	;# 
  2773  021D                     	;# 
  2774  021D                     	;# 
  2775  021E                     	;# 
  2776  021F                     	;# 
  2777  028C                     	;# 
  2778  028D                     	;# 
  2779  028E                     	;# 
  2780  0291                     	;# 
  2781  0291                     	;# 
  2782  0292                     	;# 
  2783  0293                     	;# 
  2784  0294                     	;# 
  2785  0295                     	;# 
  2786  0295                     	;# 
  2787  0296                     	;# 
  2788  0297                     	;# 
  2789  0298                     	;# 
  2790  029F                     	;# 
  2791  030C                     	;# 
  2792  030D                     	;# 
  2793  030E                     	;# 
  2794  0311                     	;# 
  2795  0311                     	;# 
  2796  0312                     	;# 
  2797  0313                     	;# 
  2798  0314                     	;# 
  2799  0315                     	;# 
  2800  0315                     	;# 
  2801  0316                     	;# 
  2802  0317                     	;# 
  2803  0318                     	;# 
  2804  038C                     	;# 
  2805  038D                     	;# 
  2806  038E                     	;# 
  2807  0391                     	;# 
  2808  0392                     	;# 
  2809  0393                     	;# 
  2810  0394                     	;# 
  2811  0395                     	;# 
  2812  0396                     	;# 
  2813  0397                     	;# 
  2814  0398                     	;# 
  2815  0399                     	;# 
  2816  039A                     	;# 
  2817  039C                     	;# 
  2818  039D                     	;# 
  2819  039E                     	;# 
  2820  039F                     	;# 
  2821  0411                     	;# 
  2822  0411                     	;# 
  2823  0412                     	;# 
  2824  0413                     	;# 
  2825  0414                     	;# 
  2826  0415                     	;# 
  2827  0416                     	;# 
  2828  0417                     	;# 
  2829  0418                     	;# 
  2830  0418                     	;# 
  2831  0419                     	;# 
  2832  041A                     	;# 
  2833  041B                     	;# 
  2834  041C                     	;# 
  2835  041D                     	;# 
  2836  041E                     	;# 
  2837  041F                     	;# 
  2838  0498                     	;# 
  2839  0498                     	;# 
  2840  0499                     	;# 
  2841  049A                     	;# 
  2842  049B                     	;# 
  2843  049B                     	;# 
  2844  049C                     	;# 
  2845  049D                     	;# 
  2846  049E                     	;# 
  2847  049F                     	;# 
  2848  0617                     	;# 
  2849  0618                     	;# 
  2850  0619                     	;# 
  2851  0619                     	;# 
  2852  061A                     	;# 
  2853  061B                     	;# 
  2854  061C                     	;# 
  2855  061C                     	;# 
  2856  061F                     	;# 
  2857  0691                     	;# 
  2858  0692                     	;# 
  2859  0693                     	;# 
  2860  0694                     	;# 
  2861  0695                     	;# 
  2862  0696                     	;# 
  2863  0697                     	;# 
  2864  0698                     	;# 
  2865  0699                     	;# 
  2866  0711                     	;# 
  2867  0712                     	;# 
  2868  0713                     	;# 
  2869  0714                     	;# 
  2870  0715                     	;# 
  2871  0716                     	;# 
  2872  0717                     	;# 
  2873  0718                     	;# 
  2874  0719                     	;# 
  2875  0891                     	;# 
  2876  0891                     	;# 
  2877  0891                     	;# 
  2878  0891                     	;# 
  2879  0891                     	;# 
  2880  0891                     	;# 
  2881  0892                     	;# 
  2882  0892                     	;# 
  2883  0892                     	;# 
  2884  0893                     	;# 
  2885  0893                     	;# 
  2886  0893                     	;# 
  2887  0893                     	;# 
  2888  0893                     	;# 
  2889  0893                     	;# 
  2890  0894                     	;# 
  2891  0894                     	;# 
  2892  0894                     	;# 
  2893  0895                     	;# 
  2894  0895                     	;# 
  2895  0895                     	;# 
  2896  0896                     	;# 
  2897  0896                     	;# 
  2898  0896                     	;# 
  2899  089B                     	;# 
  2900  0911                     	;# 
  2901  0912                     	;# 
  2902  0913                     	;# 
  2903  0914                     	;# 
  2904  0915                     	;# 
  2905  0916                     	;# 
  2906  0918                     	;# 
  2907  0919                     	;# 
  2908  091A                     	;# 
  2909  091B                     	;# 
  2910  091C                     	;# 
  2911  091D                     	;# 
  2912  091E                     	;# 
  2913  091F                     	;# 
  2914  0E0F                     	;# 
  2915  0E10                     	;# 
  2916  0E11                     	;# 
  2917  0E12                     	;# 
  2918  0E13                     	;# 
  2919  0E14                     	;# 
  2920  0E15                     	;# 
  2921  0E16                     	;# 
  2922  0E17                     	;# 
  2923  0E18                     	;# 
  2924  0E19                     	;# 
  2925  0E1A                     	;# 
  2926  0E1B                     	;# 
  2927  0E1C                     	;# 
  2928  0E1D                     	;# 
  2929  0E1E                     	;# 
  2930  0E1F                     	;# 
  2931  0E20                     	;# 
  2932  0E21                     	;# 
  2933  0E22                     	;# 
  2934  0E24                     	;# 
  2935  0E25                     	;# 
  2936  0E28                     	;# 
  2937  0E29                     	;# 
  2938  0E2A                     	;# 
  2939  0E2B                     	;# 
  2940  0E2C                     	;# 
  2941  0E2D                     	;# 
  2942  0E2E                     	;# 
  2943  0E2F                     	;# 
  2944  0E90                     	;# 
  2945  0E91                     	;# 
  2946  0E92                     	;# 
  2947  0E94                     	;# 
  2948  0E95                     	;# 
  2949  0E9C                     	;# 
  2950  0E9D                     	;# 
  2951  0E9E                     	;# 
  2952  0E9F                     	;# 
  2953  0EA0                     	;# 
  2954  0EA1                     	;# 
  2955  0EA2                     	;# 
  2956  0EA3                     	;# 
  2957  0EA4                     	;# 
  2958  0EA5                     	;# 
  2959  0EA6                     	;# 
  2960  0EA7                     	;# 
  2961  0F0F                     	;# 
  2962  0F10                     	;# 
  2963  0F11                     	;# 
  2964  0F12                     	;# 
  2965  0F13                     	;# 
  2966  0F14                     	;# 
  2967  0F15                     	;# 
  2968  0F16                     	;# 
  2969  0F17                     	;# 
  2970  0F18                     	;# 
  2971  0F19                     	;# 
  2972  0F1A                     	;# 
  2973  0F1B                     	;# 
  2974  0F1C                     	;# 
  2975  0F1D                     	;# 
  2976  0F1E                     	;# 
  2977  0F1F                     	;# 
  2978  0F20                     	;# 
  2979  0F21                     	;# 
  2980  0F22                     	;# 
  2981  0F23                     	;# 
  2982  0F24                     	;# 
  2983  0F25                     	;# 
  2984  0F26                     	;# 
  2985  0F27                     	;# 
  2986  0F28                     	;# 
  2987  0F29                     	;# 
  2988  0F2A                     	;# 
  2989  0F2B                     	;# 
  2990  0F2C                     	;# 
  2991  0F2D                     	;# 
  2992  0F2E                     	;# 
  2993  0F2F                     	;# 
  2994  0F30                     	;# 
  2995  0F31                     	;# 
  2996  0F32                     	;# 
  2997  0F33                     	;# 
  2998  0F34                     	;# 
  2999  0F35                     	;# 
  3000  0F36                     	;# 
  3001  0F37                     	;# 
  3002  0FE4                     	;# 
  3003  0FE5                     	;# 
  3004  0FE6                     	;# 
  3005  0FE7                     	;# 
  3006  0FE8                     	;# 
  3007  0FE9                     	;# 
  3008  0FEA                     	;# 
  3009  0FEB                     	;# 
  3010  0FED                     	;# 
  3011  0FEE                     	;# 
  3012  0FEF                     	;# 
  3013  0000                     	;# 
  3014  0001                     	;# 
  3015  0002                     	;# 
  3016  0003                     	;# 
  3017  0004                     	;# 
  3018  0005                     	;# 
  3019  0006                     	;# 
  3020  0007                     	;# 
  3021  0008                     	;# 
  3022  0009                     	;# 
  3023  000A                     	;# 
  3024  000B                     	;# 
  3025  000C                     	;# 
  3026  000D                     	;# 
  3027  000E                     	;# 
  3028  0010                     	;# 
  3029  0011                     	;# 
  3030  0012                     	;# 
  3031  0013                     	;# 
  3032  0014                     	;# 
  3033  0015                     	;# 
  3034  0015                     	;# 
  3035  0016                     	;# 
  3036  0016                     	;# 
  3037  0017                     	;# 
  3038  0018                     	;# 
  3039  0019                     	;# 
  3040  0019                     	;# 
  3041  001A                     	;# 
  3042  001B                     	;# 
  3043  001C                     	;# 
  3044  001D                     	;# 
  3045  001E                     	;# 
  3046  001F                     	;# 
  3047  008C                     	;# 
  3048  008D                     	;# 
  3049  008E                     	;# 
  3050  0090                     	;# 
  3051  0091                     	;# 
  3052  0092                     	;# 
  3053  0093                     	;# 
  3054  0094                     	;# 
  3055  0097                     	;# 
  3056  009B                     	;# 
  3057  009B                     	;# 
  3058  009C                     	;# 
  3059  009D                     	;# 
  3060  009E                     	;# 
  3061  009F                     	;# 
  3062  010C                     	;# 
  3063  010D                     	;# 
  3064  010E                     	;# 
  3065  0111                     	;# 
  3066  0112                     	;# 
  3067  0113                     	;# 
  3068  0114                     	;# 
  3069  0115                     	;# 
  3070  0116                     	;# 
  3071  0117                     	;# 
  3072  0118                     	;# 
  3073  0119                     	;# 
  3074  018C                     	;# 
  3075  018D                     	;# 
  3076  018E                     	;# 
  3077  0197                     	;# 
  3078  0199                     	;# 
  3079  0199                     	;# 
  3080  0199                     	;# 
  3081  019A                     	;# 
  3082  019A                     	;# 
  3083  019A                     	;# 
  3084  019B                     	;# 
  3085  019B                     	;# 
  3086  019B                     	;# 
  3087  019B                     	;# 
  3088  019B                     	;# 
  3089  019C                     	;# 
  3090  019C                     	;# 
  3091  019C                     	;# 
  3092  019D                     	;# 
  3093  019D                     	;# 
  3094  019D                     	;# 
  3095  019E                     	;# 
  3096  019E                     	;# 
  3097  019E                     	;# 
  3098  019F                     	;# 
  3099  019F                     	;# 
  3100  019F                     	;# 
  3101  019F                     	;# 
  3102  019F                     	;# 
  3103  020C                     	;# 
  3104  020D                     	;# 
  3105  020E                     	;# 
  3106  0211                     	;# 
  3107  0211                     	;# 
  3108  0212                     	;# 
  3109  0212                     	;# 
  3110  0213                     	;# 
  3111  0213                     	;# 
  3112  0214                     	;# 
  3113  0214                     	;# 
  3114  0215                     	;# 
  3115  0215                     	;# 
  3116  0215                     	;# 
  3117  0215                     	;# 
  3118  0216                     	;# 
  3119  0216                     	;# 
  3120  0217                     	;# 
  3121  0217                     	;# 
  3122  0219                     	;# 
  3123  021A                     	;# 
  3124  021B                     	;# 
  3125  021C                     	;# 
  3126  021D                     	;# 
  3127  021D                     	;# 
  3128  021E                     	;# 
  3129  021F                     	;# 
  3130  028C                     	;# 
  3131  028D                     	;# 
  3132  028E                     	;# 
  3133  0291                     	;# 
  3134  0291                     	;# 
  3135  0292                     	;# 
  3136  0293                     	;# 
  3137  0294                     	;# 
  3138  0295                     	;# 
  3139  0295                     	;# 
  3140  0296                     	;# 
  3141  0297                     	;# 
  3142  0298                     	;# 
  3143  029F                     	;# 
  3144  030C                     	;# 
  3145  030D                     	;# 
  3146  030E                     	;# 
  3147  0311                     	;# 
  3148  0311                     	;# 
  3149  0312                     	;# 
  3150  0313                     	;# 
  3151  0314                     	;# 
  3152  0315                     	;# 
  3153  0315                     	;# 
  3154  0316                     	;# 
  3155  0317                     	;# 
  3156  0318                     	;# 
  3157  038C                     	;# 
  3158  038D                     	;# 
  3159  038E                     	;# 
  3160  0391                     	;# 
  3161  0392                     	;# 
  3162  0393                     	;# 
  3163  0394                     	;# 
  3164  0395                     	;# 
  3165  0396                     	;# 
  3166  0397                     	;# 
  3167  0398                     	;# 
  3168  0399                     	;# 
  3169  039A                     	;# 
  3170  039C                     	;# 
  3171  039D                     	;# 
  3172  039E                     	;# 
  3173  039F                     	;# 
  3174  0411                     	;# 
  3175  0411                     	;# 
  3176  0412                     	;# 
  3177  0413                     	;# 
  3178  0414                     	;# 
  3179  0415                     	;# 
  3180  0416                     	;# 
  3181  0417                     	;# 
  3182  0418                     	;# 
  3183  0418                     	;# 
  3184  0419                     	;# 
  3185  041A                     	;# 
  3186  041B                     	;# 
  3187  041C                     	;# 
  3188  041D                     	;# 
  3189  041E                     	;# 
  3190  041F                     	;# 
  3191  0498                     	;# 
  3192  0498                     	;# 
  3193  0499                     	;# 
  3194  049A                     	;# 
  3195  049B                     	;# 
  3196  049B                     	;# 
  3197  049C                     	;# 
  3198  049D                     	;# 
  3199  049E                     	;# 
  3200  049F                     	;# 
  3201  0617                     	;# 
  3202  0618                     	;# 
  3203  0619                     	;# 
  3204  0619                     	;# 
  3205  061A                     	;# 
  3206  061B                     	;# 
  3207  061C                     	;# 
  3208  061C                     	;# 
  3209  061F                     	;# 
  3210  0691                     	;# 
  3211  0692                     	;# 
  3212  0693                     	;# 
  3213  0694                     	;# 
  3214  0695                     	;# 
  3215  0696                     	;# 
  3216  0697                     	;# 
  3217  0698                     	;# 
  3218  0699                     	;# 
  3219  0711                     	;# 
  3220  0712                     	;# 
  3221  0713                     	;# 
  3222  0714                     	;# 
  3223  0715                     	;# 
  3224  0716                     	;# 
  3225  0717                     	;# 
  3226  0718                     	;# 
  3227  0719                     	;# 
  3228  0891                     	;# 
  3229  0891                     	;# 
  3230  0891                     	;# 
  3231  0891                     	;# 
  3232  0891                     	;# 
  3233  0891                     	;# 
  3234  0892                     	;# 
  3235  0892                     	;# 
  3236  0892                     	;# 
  3237  0893                     	;# 
  3238  0893                     	;# 
  3239  0893                     	;# 
  3240  0893                     	;# 
  3241  0893                     	;# 
  3242  0893                     	;# 
  3243  0894                     	;# 
  3244  0894                     	;# 
  3245  0894                     	;# 
  3246  0895                     	;# 
  3247  0895                     	;# 
  3248  0895                     	;# 
  3249  0896                     	;# 
  3250  0896                     	;# 
  3251  0896                     	;# 
  3252  089B                     	;# 
  3253  0911                     	;# 
  3254  0912                     	;# 
  3255  0913                     	;# 
  3256  0914                     	;# 
  3257  0915                     	;# 
  3258  0916                     	;# 
  3259  0918                     	;# 
  3260  0919                     	;# 
  3261  091A                     	;# 
  3262  091B                     	;# 
  3263  091C                     	;# 
  3264  091D                     	;# 
  3265  091E                     	;# 
  3266  091F                     	;# 
  3267  0E0F                     	;# 
  3268  0E10                     	;# 
  3269  0E11                     	;# 
  3270  0E12                     	;# 
  3271  0E13                     	;# 
  3272  0E14                     	;# 
  3273  0E15                     	;# 
  3274  0E16                     	;# 
  3275  0E17                     	;# 
  3276  0E18                     	;# 
  3277  0E19                     	;# 
  3278  0E1A                     	;# 
  3279  0E1B                     	;# 
  3280  0E1C                     	;# 
  3281  0E1D                     	;# 
  3282  0E1E                     	;# 
  3283  0E1F                     	;# 
  3284  0E20                     	;# 
  3285  0E21                     	;# 
  3286  0E22                     	;# 
  3287  0E24                     	;# 
  3288  0E25                     	;# 
  3289  0E28                     	;# 
  3290  0E29                     	;# 
  3291  0E2A                     	;# 
  3292  0E2B                     	;# 
  3293  0E2C                     	;# 
  3294  0E2D                     	;# 
  3295  0E2E                     	;# 
  3296  0E2F                     	;# 
  3297  0E90                     	;# 
  3298  0E91                     	;# 
  3299  0E92                     	;# 
  3300  0E94                     	;# 
  3301  0E95                     	;# 
  3302  0E9C                     	;# 
  3303  0E9D                     	;# 
  3304  0E9E                     	;# 
  3305  0E9F                     	;# 
  3306  0EA0                     	;# 
  3307  0EA1                     	;# 
  3308  0EA2                     	;# 
  3309  0EA3                     	;# 
  3310  0EA4                     	;# 
  3311  0EA5                     	;# 
  3312  0EA6                     	;# 
  3313  0EA7                     	;# 
  3314  0F0F                     	;# 
  3315  0F10                     	;# 
  3316  0F11                     	;# 
  3317  0F12                     	;# 
  3318  0F13                     	;# 
  3319  0F14                     	;# 
  3320  0F15                     	;# 
  3321  0F16                     	;# 
  3322  0F17                     	;# 
  3323  0F18                     	;# 
  3324  0F19                     	;# 
  3325  0F1A                     	;# 
  3326  0F1B                     	;# 
  3327  0F1C                     	;# 
  3328  0F1D                     	;# 
  3329  0F1E                     	;# 
  3330  0F1F                     	;# 
  3331  0F20                     	;# 
  3332  0F21                     	;# 
  3333  0F22                     	;# 
  3334  0F23                     	;# 
  3335  0F24                     	;# 
  3336  0F25                     	;# 
  3337  0F26                     	;# 
  3338  0F27                     	;# 
  3339  0F28                     	;# 
  3340  0F29                     	;# 
  3341  0F2A                     	;# 
  3342  0F2B                     	;# 
  3343  0F2C                     	;# 
  3344  0F2D                     	;# 
  3345  0F2E                     	;# 
  3346  0F2F                     	;# 
  3347  0F30                     	;# 
  3348  0F31                     	;# 
  3349  0F32                     	;# 
  3350  0F33                     	;# 
  3351  0F34                     	;# 
  3352  0F35                     	;# 
  3353  0F36                     	;# 
  3354  0F37                     	;# 
  3355  0FE4                     	;# 
  3356  0FE5                     	;# 
  3357  0FE6                     	;# 
  3358  0FE7                     	;# 
  3359  0FE8                     	;# 
  3360  0FE9                     	;# 
  3361  0FEA                     	;# 
  3362  0FEB                     	;# 
  3363  0FED                     	;# 
  3364  0FEE                     	;# 
  3365  0FEF                     	;# 
  3366  0000                     	;# 
  3367  0001                     	;# 
  3368  0002                     	;# 
  3369  0003                     	;# 
  3370  0004                     	;# 
  3371  0005                     	;# 
  3372  0006                     	;# 
  3373  0007                     	;# 
  3374  0008                     	;# 
  3375  0009                     	;# 
  3376  000A                     	;# 
  3377  000B                     	;# 
  3378  000C                     	;# 
  3379  000D                     	;# 
  3380  000E                     	;# 
  3381  0010                     	;# 
  3382  0011                     	;# 
  3383  0012                     	;# 
  3384  0013                     	;# 
  3385  0014                     	;# 
  3386  0015                     	;# 
  3387  0015                     	;# 
  3388  0016                     	;# 
  3389  0016                     	;# 
  3390  0017                     	;# 
  3391  0018                     	;# 
  3392  0019                     	;# 
  3393  0019                     	;# 
  3394  001A                     	;# 
  3395  001B                     	;# 
  3396  001C                     	;# 
  3397  001D                     	;# 
  3398  001E                     	;# 
  3399  001F                     	;# 
  3400  008C                     	;# 
  3401  008D                     	;# 
  3402  008E                     	;# 
  3403  0090                     	;# 
  3404  0091                     	;# 
  3405  0092                     	;# 
  3406  0093                     	;# 
  3407  0094                     	;# 
  3408  0097                     	;# 
  3409  009B                     	;# 
  3410  009B                     	;# 
  3411  009C                     	;# 
  3412  009D                     	;# 
  3413  009E                     	;# 
  3414  009F                     	;# 
  3415  010C                     	;# 
  3416  010D                     	;# 
  3417  010E                     	;# 
  3418  0111                     	;# 
  3419  0112                     	;# 
  3420  0113                     	;# 
  3421  0114                     	;# 
  3422  0115                     	;# 
  3423  0116                     	;# 
  3424  0117                     	;# 
  3425  0118                     	;# 
  3426  0119                     	;# 
  3427  018C                     	;# 
  3428  018D                     	;# 
  3429  018E                     	;# 
  3430  0197                     	;# 
  3431  0199                     	;# 
  3432  0199                     	;# 
  3433  0199                     	;# 
  3434  019A                     	;# 
  3435  019A                     	;# 
  3436  019A                     	;# 
  3437  019B                     	;# 
  3438  019B                     	;# 
  3439  019B                     	;# 
  3440  019B                     	;# 
  3441  019B                     	;# 
  3442  019C                     	;# 
  3443  019C                     	;# 
  3444  019C                     	;# 
  3445  019D                     	;# 
  3446  019D                     	;# 
  3447  019D                     	;# 
  3448  019E                     	;# 
  3449  019E                     	;# 
  3450  019E                     	;# 
  3451  019F                     	;# 
  3452  019F                     	;# 
  3453  019F                     	;# 
  3454  019F                     	;# 
  3455  019F                     	;# 
  3456  020C                     	;# 
  3457  020D                     	;# 
  3458  020E                     	;# 
  3459  0211                     	;# 
  3460  0211                     	;# 
  3461  0212                     	;# 
  3462  0212                     	;# 
  3463  0213                     	;# 
  3464  0213                     	;# 
  3465  0214                     	;# 
  3466  0214                     	;# 
  3467  0215                     	;# 
  3468  0215                     	;# 
  3469  0215                     	;# 
  3470  0215                     	;# 
  3471  0216                     	;# 
  3472  0216                     	;# 
  3473  0217                     	;# 
  3474  0217                     	;# 
  3475  0219                     	;# 
  3476  021A                     	;# 
  3477  021B                     	;# 
  3478  021C                     	;# 
  3479  021D                     	;# 
  3480  021D                     	;# 
  3481  021E                     	;# 
  3482  021F                     	;# 
  3483  028C                     	;# 
  3484  028D                     	;# 
  3485  028E                     	;# 
  3486  0291                     	;# 
  3487  0291                     	;# 
  3488  0292                     	;# 
  3489  0293                     	;# 
  3490  0294                     	;# 
  3491  0295                     	;# 
  3492  0295                     	;# 
  3493  0296                     	;# 
  3494  0297                     	;# 
  3495  0298                     	;# 
  3496  029F                     	;# 
  3497  030C                     	;# 
  3498  030D                     	;# 
  3499  030E                     	;# 
  3500  0311                     	;# 
  3501  0311                     	;# 
  3502  0312                     	;# 
  3503  0313                     	;# 
  3504  0314                     	;# 
  3505  0315                     	;# 
  3506  0315                     	;# 
  3507  0316                     	;# 
  3508  0317                     	;# 
  3509  0318                     	;# 
  3510  038C                     	;# 
  3511  038D                     	;# 
  3512  038E                     	;# 
  3513  0391                     	;# 
  3514  0392                     	;# 
  3515  0393                     	;# 
  3516  0394                     	;# 
  3517  0395                     	;# 
  3518  0396                     	;# 
  3519  0397                     	;# 
  3520  0398                     	;# 
  3521  0399                     	;# 
  3522  039A                     	;# 
  3523  039C                     	;# 
  3524  039D                     	;# 
  3525  039E                     	;# 
  3526  039F                     	;# 
  3527  0411                     	;# 
  3528  0411                     	;# 
  3529  0412                     	;# 
  3530  0413                     	;# 
  3531  0414                     	;# 
  3532  0415                     	;# 
  3533  0416                     	;# 
  3534  0417                     	;# 
  3535  0418                     	;# 
  3536  0418                     	;# 
  3537  0419                     	;# 
  3538  041A                     	;# 
  3539  041B                     	;# 
  3540  041C                     	;# 
  3541  041D                     	;# 
  3542  041E                     	;# 
  3543  041F                     	;# 
  3544  0498                     	;# 
  3545  0498                     	;# 
  3546  0499                     	;# 
  3547  049A                     	;# 
  3548  049B                     	;# 
  3549  049B                     	;# 
  3550  049C                     	;# 
  3551  049D                     	;# 
  3552  049E                     	;# 
  3553  049F                     	;# 
  3554  0617                     	;# 
  3555  0618                     	;# 
  3556  0619                     	;# 
  3557  0619                     	;# 
  3558  061A                     	;# 
  3559  061B                     	;# 
  3560  061C                     	;# 
  3561  061C                     	;# 
  3562  061F                     	;# 
  3563  0691                     	;# 
  3564  0692                     	;# 
  3565  0693                     	;# 
  3566  0694                     	;# 
  3567  0695                     	;# 
  3568  0696                     	;# 
  3569  0697                     	;# 
  3570  0698                     	;# 
  3571  0699                     	;# 
  3572  0711                     	;# 
  3573  0712                     	;# 
  3574  0713                     	;# 
  3575  0714                     	;# 
  3576  0715                     	;# 
  3577  0716                     	;# 
  3578  0717                     	;# 
  3579  0718                     	;# 
  3580  0719                     	;# 
  3581  0891                     	;# 
  3582  0891                     	;# 
  3583  0891                     	;# 
  3584  0891                     	;# 
  3585  0891                     	;# 
  3586  0891                     	;# 
  3587  0892                     	;# 
  3588  0892                     	;# 
  3589  0892                     	;# 
  3590  0893                     	;# 
  3591  0893                     	;# 
  3592  0893                     	;# 
  3593  0893                     	;# 
  3594  0893                     	;# 
  3595  0893                     	;# 
  3596  0894                     	;# 
  3597  0894                     	;# 
  3598  0894                     	;# 
  3599  0895                     	;# 
  3600  0895                     	;# 
  3601  0895                     	;# 
  3602  0896                     	;# 
  3603  0896                     	;# 
  3604  0896                     	;# 
  3605  089B                     	;# 
  3606  0911                     	;# 
  3607  0912                     	;# 
  3608  0913                     	;# 
  3609  0914                     	;# 
  3610  0915                     	;# 
  3611  0916                     	;# 
  3612  0918                     	;# 
  3613  0919                     	;# 
  3614  091A                     	;# 
  3615  091B                     	;# 
  3616  091C                     	;# 
  3617  091D                     	;# 
  3618  091E                     	;# 
  3619  091F                     	;# 
  3620  0E0F                     	;# 
  3621  0E10                     	;# 
  3622  0E11                     	;# 
  3623  0E12                     	;# 
  3624  0E13                     	;# 
  3625  0E14                     	;# 
  3626  0E15                     	;# 
  3627  0E16                     	;# 
  3628  0E17                     	;# 
  3629  0E18                     	;# 
  3630  0E19                     	;# 
  3631  0E1A                     	;# 
  3632  0E1B                     	;# 
  3633  0E1C                     	;# 
  3634  0E1D                     	;# 
  3635  0E1E                     	;# 
  3636  0E1F                     	;# 
  3637  0E20                     	;# 
  3638  0E21                     	;# 
  3639  0E22                     	;# 
  3640  0E24                     	;# 
  3641  0E25                     	;# 
  3642  0E28                     	;# 
  3643  0E29                     	;# 
  3644  0E2A                     	;# 
  3645  0E2B                     	;# 
  3646  0E2C                     	;# 
  3647  0E2D                     	;# 
  3648  0E2E                     	;# 
  3649  0E2F                     	;# 
  3650  0E90                     	;# 
  3651  0E91                     	;# 
  3652  0E92                     	;# 
  3653  0E94                     	;# 
  3654  0E95                     	;# 
  3655  0E9C                     	;# 
  3656  0E9D                     	;# 
  3657  0E9E                     	;# 
  3658  0E9F                     	;# 
  3659  0EA0                     	;# 
  3660  0EA1                     	;# 
  3661  0EA2                     	;# 
  3662  0EA3                     	;# 
  3663  0EA4                     	;# 
  3664  0EA5                     	;# 
  3665  0EA6                     	;# 
  3666  0EA7                     	;# 
  3667  0F0F                     	;# 
  3668  0F10                     	;# 
  3669  0F11                     	;# 
  3670  0F12                     	;# 
  3671  0F13                     	;# 
  3672  0F14                     	;# 
  3673  0F15                     	;# 
  3674  0F16                     	;# 
  3675  0F17                     	;# 
  3676  0F18                     	;# 
  3677  0F19                     	;# 
  3678  0F1A                     	;# 
  3679  0F1B                     	;# 
  3680  0F1C                     	;# 
  3681  0F1D                     	;# 
  3682  0F1E                     	;# 
  3683  0F1F                     	;# 
  3684  0F20                     	;# 
  3685  0F21                     	;# 
  3686  0F22                     	;# 
  3687  0F23                     	;# 
  3688  0F24                     	;# 
  3689  0F25                     	;# 
  3690  0F26                     	;# 
  3691  0F27                     	;# 
  3692  0F28                     	;# 
  3693  0F29                     	;# 
  3694  0F2A                     	;# 
  3695  0F2B                     	;# 
  3696  0F2C                     	;# 
  3697  0F2D                     	;# 
  3698  0F2E                     	;# 
  3699  0F2F                     	;# 
  3700  0F30                     	;# 
  3701  0F31                     	;# 
  3702  0F32                     	;# 
  3703  0F33                     	;# 
  3704  0F34                     	;# 
  3705  0F35                     	;# 
  3706  0F36                     	;# 
  3707  0F37                     	;# 
  3708  0FE4                     	;# 
  3709  0FE5                     	;# 
  3710  0FE6                     	;# 
  3711  0FE7                     	;# 
  3712  0FE8                     	;# 
  3713  0FE9                     	;# 
  3714  0FEA                     	;# 
  3715  0FEB                     	;# 
  3716  0FED                     	;# 
  3717  0FEE                     	;# 
  3718  0FEF                     	;# 
  3719  0000                     	;# 
  3720  0001                     	;# 
  3721  0002                     	;# 
  3722  0003                     	;# 
  3723  0004                     	;# 
  3724  0005                     	;# 
  3725  0006                     	;# 
  3726  0007                     	;# 
  3727  0008                     	;# 
  3728  0009                     	;# 
  3729  000A                     	;# 
  3730  000B                     	;# 
  3731  000C                     	;# 
  3732  000D                     	;# 
  3733  000E                     	;# 
  3734  0010                     	;# 
  3735  0011                     	;# 
  3736  0012                     	;# 
  3737  0013                     	;# 
  3738  0014                     	;# 
  3739  0015                     	;# 
  3740  0015                     	;# 
  3741  0016                     	;# 
  3742  0016                     	;# 
  3743  0017                     	;# 
  3744  0018                     	;# 
  3745  0019                     	;# 
  3746  0019                     	;# 
  3747  001A                     	;# 
  3748  001B                     	;# 
  3749  001C                     	;# 
  3750  001D                     	;# 
  3751  001E                     	;# 
  3752  001F                     	;# 
  3753  008C                     	;# 
  3754  008D                     	;# 
  3755  008E                     	;# 
  3756  0090                     	;# 
  3757  0091                     	;# 
  3758  0092                     	;# 
  3759  0093                     	;# 
  3760  0094                     	;# 
  3761  0097                     	;# 
  3762  009B                     	;# 
  3763  009B                     	;# 
  3764  009C                     	;# 
  3765  009D                     	;# 
  3766  009E                     	;# 
  3767  009F                     	;# 
  3768  010C                     	;# 
  3769  010D                     	;# 
  3770  010E                     	;# 
  3771  0111                     	;# 
  3772  0112                     	;# 
  3773  0113                     	;# 
  3774  0114                     	;# 
  3775  0115                     	;# 
  3776  0116                     	;# 
  3777  0117                     	;# 
  3778  0118                     	;# 
  3779  0119                     	;# 
  3780  018C                     	;# 
  3781  018D                     	;# 
  3782  018E                     	;# 
  3783  0197                     	;# 
  3784  0199                     	;# 
  3785  0199                     	;# 
  3786  0199                     	;# 
  3787  019A                     	;# 
  3788  019A                     	;# 
  3789  019A                     	;# 
  3790  019B                     	;# 
  3791  019B                     	;# 
  3792  019B                     	;# 
  3793  019B                     	;# 
  3794  019B                     	;# 
  3795  019C                     	;# 
  3796  019C                     	;# 
  3797  019C                     	;# 
  3798  019D                     	;# 
  3799  019D                     	;# 
  3800  019D                     	;# 
  3801  019E                     	;# 
  3802  019E                     	;# 
  3803  019E                     	;# 
  3804  019F                     	;# 
  3805  019F                     	;# 
  3806  019F                     	;# 
  3807  019F                     	;# 
  3808  019F                     	;# 
  3809  020C                     	;# 
  3810  020D                     	;# 
  3811  020E                     	;# 
  3812  0211                     	;# 
  3813  0211                     	;# 
  3814  0212                     	;# 
  3815  0212                     	;# 
  3816  0213                     	;# 
  3817  0213                     	;# 
  3818  0214                     	;# 
  3819  0214                     	;# 
  3820  0215                     	;# 
  3821  0215                     	;# 
  3822  0215                     	;# 
  3823  0215                     	;# 
  3824  0216                     	;# 
  3825  0216                     	;# 
  3826  0217                     	;# 
  3827  0217                     	;# 
  3828  0219                     	;# 
  3829  021A                     	;# 
  3830  021B                     	;# 
  3831  021C                     	;# 
  3832  021D                     	;# 
  3833  021D                     	;# 
  3834  021E                     	;# 
  3835  021F                     	;# 
  3836  028C                     	;# 
  3837  028D                     	;# 
  3838  028E                     	;# 
  3839  0291                     	;# 
  3840  0291                     	;# 
  3841  0292                     	;# 
  3842  0293                     	;# 
  3843  0294                     	;# 
  3844  0295                     	;# 
  3845  0295                     	;# 
  3846  0296                     	;# 
  3847  0297                     	;# 
  3848  0298                     	;# 
  3849  029F                     	;# 
  3850  030C                     	;# 
  3851  030D                     	;# 
  3852  030E                     	;# 
  3853  0311                     	;# 
  3854  0311                     	;# 
  3855  0312                     	;# 
  3856  0313                     	;# 
  3857  0314                     	;# 
  3858  0315                     	;# 
  3859  0315                     	;# 
  3860  0316                     	;# 
  3861  0317                     	;# 
  3862  0318                     	;# 
  3863  038C                     	;# 
  3864  038D                     	;# 
  3865  038E                     	;# 
  3866  0391                     	;# 
  3867  0392                     	;# 
  3868  0393                     	;# 
  3869  0394                     	;# 
  3870  0395                     	;# 
  3871  0396                     	;# 
  3872  0397                     	;# 
  3873  0398                     	;# 
  3874  0399                     	;# 
  3875  039A                     	;# 
  3876  039C                     	;# 
  3877  039D                     	;# 
  3878  039E                     	;# 
  3879  039F                     	;# 
  3880  0411                     	;# 
  3881  0411                     	;# 
  3882  0412                     	;# 
  3883  0413                     	;# 
  3884  0414                     	;# 
  3885  0415                     	;# 
  3886  0416                     	;# 
  3887  0417                     	;# 
  3888  0418                     	;# 
  3889  0418                     	;# 
  3890  0419                     	;# 
  3891  041A                     	;# 
  3892  041B                     	;# 
  3893  041C                     	;# 
  3894  041D                     	;# 
  3895  041E                     	;# 
  3896  041F                     	;# 
  3897  0498                     	;# 
  3898  0498                     	;# 
  3899  0499                     	;# 
  3900  049A                     	;# 
  3901  049B                     	;# 
  3902  049B                     	;# 
  3903  049C                     	;# 
  3904  049D                     	;# 
  3905  049E                     	;# 
  3906  049F                     	;# 
  3907  0617                     	;# 
  3908  0618                     	;# 
  3909  0619                     	;# 
  3910  0619                     	;# 
  3911  061A                     	;# 
  3912  061B                     	;# 
  3913  061C                     	;# 
  3914  061C                     	;# 
  3915  061F                     	;# 
  3916  0691                     	;# 
  3917  0692                     	;# 
  3918  0693                     	;# 
  3919  0694                     	;# 
  3920  0695                     	;# 
  3921  0696                     	;# 
  3922  0697                     	;# 
  3923  0698                     	;# 
  3924  0699                     	;# 
  3925  0711                     	;# 
  3926  0712                     	;# 
  3927  0713                     	;# 
  3928  0714                     	;# 
  3929  0715                     	;# 
  3930  0716                     	;# 
  3931  0717                     	;# 
  3932  0718                     	;# 
  3933  0719                     	;# 
  3934  0891                     	;# 
  3935  0891                     	;# 
  3936  0891                     	;# 
  3937  0891                     	;# 
  3938  0891                     	;# 
  3939  0891                     	;# 
  3940  0892                     	;# 
  3941  0892                     	;# 
  3942  0892                     	;# 
  3943  0893                     	;# 
  3944  0893                     	;# 
  3945  0893                     	;# 
  3946  0893                     	;# 
  3947  0893                     	;# 
  3948  0893                     	;# 
  3949  0894                     	;# 
  3950  0894                     	;# 
  3951  0894                     	;# 
  3952  0895                     	;# 
  3953  0895                     	;# 
  3954  0895                     	;# 
  3955  0896                     	;# 
  3956  0896                     	;# 
  3957  0896                     	;# 
  3958  089B                     	;# 
  3959  0911                     	;# 
  3960  0912                     	;# 
  3961  0913                     	;# 
  3962  0914                     	;# 
  3963  0915                     	;# 
  3964  0916                     	;# 
  3965  0918                     	;# 
  3966  0919                     	;# 
  3967  091A                     	;# 
  3968  091B                     	;# 
  3969  091C                     	;# 
  3970  091D                     	;# 
  3971  091E                     	;# 
  3972  091F                     	;# 
  3973  0E0F                     	;# 
  3974  0E10                     	;# 
  3975  0E11                     	;# 
  3976  0E12                     	;# 
  3977  0E13                     	;# 
  3978  0E14                     	;# 
  3979  0E15                     	;# 
  3980  0E16                     	;# 
  3981  0E17                     	;# 
  3982  0E18                     	;# 
  3983  0E19                     	;# 
  3984  0E1A                     	;# 
  3985  0E1B                     	;# 
  3986  0E1C                     	;# 
  3987  0E1D                     	;# 
  3988  0E1E                     	;# 
  3989  0E1F                     	;# 
  3990  0E20                     	;# 
  3991  0E21                     	;# 
  3992  0E22                     	;# 
  3993  0E24                     	;# 
  3994  0E25                     	;# 
  3995  0E28                     	;# 
  3996  0E29                     	;# 
  3997  0E2A                     	;# 
  3998  0E2B                     	;# 
  3999  0E2C                     	;# 
  4000  0E2D                     	;# 
  4001  0E2E                     	;# 
  4002  0E2F                     	;# 
  4003  0E90                     	;# 
  4004  0E91                     	;# 
  4005  0E92                     	;# 
  4006  0E94                     	;# 
  4007  0E95                     	;# 
  4008  0E9C                     	;# 
  4009  0E9D                     	;# 
  4010  0E9E                     	;# 
  4011  0E9F                     	;# 
  4012  0EA0                     	;# 
  4013  0EA1                     	;# 
  4014  0EA2                     	;# 
  4015  0EA3                     	;# 
  4016  0EA4                     	;# 
  4017  0EA5                     	;# 
  4018  0EA6                     	;# 
  4019  0EA7                     	;# 
  4020  0F0F                     	;# 
  4021  0F10                     	;# 
  4022  0F11                     	;# 
  4023  0F12                     	;# 
  4024  0F13                     	;# 
  4025  0F14                     	;# 
  4026  0F15                     	;# 
  4027  0F16                     	;# 
  4028  0F17                     	;# 
  4029  0F18                     	;# 
  4030  0F19                     	;# 
  4031  0F1A                     	;# 
  4032  0F1B                     	;# 
  4033  0F1C                     	;# 
  4034  0F1D                     	;# 
  4035  0F1E                     	;# 
  4036  0F1F                     	;# 
  4037  0F20                     	;# 
  4038  0F21                     	;# 
  4039  0F22                     	;# 
  4040  0F23                     	;# 
  4041  0F24                     	;# 
  4042  0F25                     	;# 
  4043  0F26                     	;# 
  4044  0F27                     	;# 
  4045  0F28                     	;# 
  4046  0F29                     	;# 
  4047  0F2A                     	;# 
  4048  0F2B                     	;# 
  4049  0F2C                     	;# 
  4050  0F2D                     	;# 
  4051  0F2E                     	;# 
  4052  0F2F                     	;# 
  4053  0F30                     	;# 
  4054  0F31                     	;# 
  4055  0F32                     	;# 
  4056  0F33                     	;# 
  4057  0F34                     	;# 
  4058  0F35                     	;# 
  4059  0F36                     	;# 
  4060  0F37                     	;# 
  4061  0FE4                     	;# 
  4062  0FE5                     	;# 
  4063  0FE6                     	;# 
  4064  0FE7                     	;# 
  4065  0FE8                     	;# 
  4066  0FE9                     	;# 
  4067  0FEA                     	;# 
  4068  0FEB                     	;# 
  4069  0FED                     	;# 
  4070  0FEE                     	;# 
  4071  0FEF                     	;# 
  4072  0000                     	;# 
  4073  0001                     	;# 
  4074  0002                     	;# 
  4075  0003                     	;# 
  4076  0004                     	;# 
  4077  0005                     	;# 
  4078  0006                     	;# 
  4079  0007                     	;# 
  4080  0008                     	;# 
  4081  0009                     	;# 
  4082  000A                     	;# 
  4083  000B                     	;# 
  4084  000C                     	;# 
  4085  000D                     	;# 
  4086  000E                     	;# 
  4087  0010                     	;# 
  4088  0011                     	;# 
  4089  0012                     	;# 
  4090  0013                     	;# 
  4091  0014                     	;# 
  4092  0015                     	;# 
  4093  0015                     	;# 
  4094  0016                     	;# 
  4095  0016                     	;# 
  4096  0017                     	;# 
  4097  0018                     	;# 
  4098  0019                     	;# 
  4099  0019                     	;# 
  4100  001A                     	;# 
  4101  001B                     	;# 
  4102  001C                     	;# 
  4103  001D                     	;# 
  4104  001E                     	;# 
  4105  001F                     	;# 
  4106  008C                     	;# 
  4107  008D                     	;# 
  4108  008E                     	;# 
  4109  0090                     	;# 
  4110  0091                     	;# 
  4111  0092                     	;# 
  4112  0093                     	;# 
  4113  0094                     	;# 
  4114  0097                     	;# 
  4115  009B                     	;# 
  4116  009B                     	;# 
  4117  009C                     	;# 
  4118  009D                     	;# 
  4119  009E                     	;# 
  4120  009F                     	;# 
  4121  010C                     	;# 
  4122  010D                     	;# 
  4123  010E                     	;# 
  4124  0111                     	;# 
  4125  0112                     	;# 
  4126  0113                     	;# 
  4127  0114                     	;# 
  4128  0115                     	;# 
  4129  0116                     	;# 
  4130  0117                     	;# 
  4131  0118                     	;# 
  4132  0119                     	;# 
  4133  018C                     	;# 
  4134  018D                     	;# 
  4135  018E                     	;# 
  4136  0197                     	;# 
  4137  0199                     	;# 
  4138  0199                     	;# 
  4139  0199                     	;# 
  4140  019A                     	;# 
  4141  019A                     	;# 
  4142  019A                     	;# 
  4143  019B                     	;# 
  4144  019B                     	;# 
  4145  019B                     	;# 
  4146  019B                     	;# 
  4147  019B                     	;# 
  4148  019C                     	;# 
  4149  019C                     	;# 
  4150  019C                     	;# 
  4151  019D                     	;# 
  4152  019D                     	;# 
  4153  019D                     	;# 
  4154  019E                     	;# 
  4155  019E                     	;# 
  4156  019E                     	;# 
  4157  019F                     	;# 
  4158  019F                     	;# 
  4159  019F                     	;# 
  4160  019F                     	;# 
  4161  019F                     	;# 
  4162  020C                     	;# 
  4163  020D                     	;# 
  4164  020E                     	;# 
  4165  0211                     	;# 
  4166  0211                     	;# 
  4167  0212                     	;# 
  4168  0212                     	;# 
  4169  0213                     	;# 
  4170  0213                     	;# 
  4171  0214                     	;# 
  4172  0214                     	;# 
  4173  0215                     	;# 
  4174  0215                     	;# 
  4175  0215                     	;# 
  4176  0215                     	;# 
  4177  0216                     	;# 
  4178  0216                     	;# 
  4179  0217                     	;# 
  4180  0217                     	;# 
  4181  0219                     	;# 
  4182  021A                     	;# 
  4183  021B                     	;# 
  4184  021C                     	;# 
  4185  021D                     	;# 
  4186  021D                     	;# 
  4187  021E                     	;# 
  4188  021F                     	;# 
  4189  028C                     	;# 
  4190  028D                     	;# 
  4191  028E                     	;# 
  4192  0291                     	;# 
  4193  0291                     	;# 
  4194  0292                     	;# 
  4195  0293                     	;# 
  4196  0294                     	;# 
  4197  0295                     	;# 
  4198  0295                     	;# 
  4199  0296                     	;# 
  4200  0297                     	;# 
  4201  0298                     	;# 
  4202  029F                     	;# 
  4203  030C                     	;# 
  4204  030D                     	;# 
  4205  030E                     	;# 
  4206  0311                     	;# 
  4207  0311                     	;# 
  4208  0312                     	;# 
  4209  0313                     	;# 
  4210  0314                     	;# 
  4211  0315                     	;# 
  4212  0315                     	;# 
  4213  0316                     	;# 
  4214  0317                     	;# 
  4215  0318                     	;# 
  4216  038C                     	;# 
  4217  038D                     	;# 
  4218  038E                     	;# 
  4219  0391                     	;# 
  4220  0392                     	;# 
  4221  0393                     	;# 
  4222  0394                     	;# 
  4223  0395                     	;# 
  4224  0396                     	;# 
  4225  0397                     	;# 
  4226  0398                     	;# 
  4227  0399                     	;# 
  4228  039A                     	;# 
  4229  039C                     	;# 
  4230  039D                     	;# 
  4231  039E                     	;# 
  4232  039F                     	;# 
  4233  0411                     	;# 
  4234  0411                     	;# 
  4235  0412                     	;# 
  4236  0413                     	;# 
  4237  0414                     	;# 
  4238  0415                     	;# 
  4239  0416                     	;# 
  4240  0417                     	;# 
  4241  0418                     	;# 
  4242  0418                     	;# 
  4243  0419                     	;# 
  4244  041A                     	;# 
  4245  041B                     	;# 
  4246  041C                     	;# 
  4247  041D                     	;# 
  4248  041E                     	;# 
  4249  041F                     	;# 
  4250  0498                     	;# 
  4251  0498                     	;# 
  4252  0499                     	;# 
  4253  049A                     	;# 
  4254  049B                     	;# 
  4255  049B                     	;# 
  4256  049C                     	;# 
  4257  049D                     	;# 
  4258  049E                     	;# 
  4259  049F                     	;# 
  4260  0617                     	;# 
  4261  0618                     	;# 
  4262  0619                     	;# 
  4263  0619                     	;# 
  4264  061A                     	;# 
  4265  061B                     	;# 
  4266  061C                     	;# 
  4267  061C                     	;# 
  4268  061F                     	;# 
  4269  0691                     	;# 
  4270  0692                     	;# 
  4271  0693                     	;# 
  4272  0694                     	;# 
  4273  0695                     	;# 
  4274  0696                     	;# 
  4275  0697                     	;# 
  4276  0698                     	;# 
  4277  0699                     	;# 
  4278  0711                     	;# 
  4279  0712                     	;# 
  4280  0713                     	;# 
  4281  0714                     	;# 
  4282  0715                     	;# 
  4283  0716                     	;# 
  4284  0717                     	;# 
  4285  0718                     	;# 
  4286  0719                     	;# 
  4287  0891                     	;# 
  4288  0891                     	;# 
  4289  0891                     	;# 
  4290  0891                     	;# 
  4291  0891                     	;# 
  4292  0891                     	;# 
  4293  0892                     	;# 
  4294  0892                     	;# 
  4295  0892                     	;# 
  4296  0893                     	;# 
  4297  0893                     	;# 
  4298  0893                     	;# 
  4299  0893                     	;# 
  4300  0893                     	;# 
  4301  0893                     	;# 
  4302  0894                     	;# 
  4303  0894                     	;# 
  4304  0894                     	;# 
  4305  0895                     	;# 
  4306  0895                     	;# 
  4307  0895                     	;# 
  4308  0896                     	;# 
  4309  0896                     	;# 
  4310  0896                     	;# 
  4311  089B                     	;# 
  4312  0911                     	;# 
  4313  0912                     	;# 
  4314  0913                     	;# 
  4315  0914                     	;# 
  4316  0915                     	;# 
  4317  0916                     	;# 
  4318  0918                     	;# 
  4319  0919                     	;# 
  4320  091A                     	;# 
  4321  091B                     	;# 
  4322  091C                     	;# 
  4323  091D                     	;# 
  4324  091E                     	;# 
  4325  091F                     	;# 
  4326  0E0F                     	;# 
  4327  0E10                     	;# 
  4328  0E11                     	;# 
  4329  0E12                     	;# 
  4330  0E13                     	;# 
  4331  0E14                     	;# 
  4332  0E15                     	;# 
  4333  0E16                     	;# 
  4334  0E17                     	;# 
  4335  0E18                     	;# 
  4336  0E19                     	;# 
  4337  0E1A                     	;# 
  4338  0E1B                     	;# 
  4339  0E1C                     	;# 
  4340  0E1D                     	;# 
  4341  0E1E                     	;# 
  4342  0E1F                     	;# 
  4343  0E20                     	;# 
  4344  0E21                     	;# 
  4345  0E22                     	;# 
  4346  0E24                     	;# 
  4347  0E25                     	;# 
  4348  0E28                     	;# 
  4349  0E29                     	;# 
  4350  0E2A                     	;# 
  4351  0E2B                     	;# 
  4352  0E2C                     	;# 
  4353  0E2D                     	;# 
  4354  0E2E                     	;# 
  4355  0E2F                     	;# 
  4356  0E90                     	;# 
  4357  0E91                     	;# 
  4358  0E92                     	;# 
  4359  0E94                     	;# 
  4360  0E95                     	;# 
  4361  0E9C                     	;# 
  4362  0E9D                     	;# 
  4363  0E9E                     	;# 
  4364  0E9F                     	;# 
  4365  0EA0                     	;# 
  4366  0EA1                     	;# 
  4367  0EA2                     	;# 
  4368  0EA3                     	;# 
  4369  0EA4                     	;# 
  4370  0EA5                     	;# 
  4371  0EA6                     	;# 
  4372  0EA7                     	;# 
  4373  0F0F                     	;# 
  4374  0F10                     	;# 
  4375  0F11                     	;# 
  4376  0F12                     	;# 
  4377  0F13                     	;# 
  4378  0F14                     	;# 
  4379  0F15                     	;# 
  4380  0F16                     	;# 
  4381  0F17                     	;# 
  4382  0F18                     	;# 
  4383  0F19                     	;# 
  4384  0F1A                     	;# 
  4385  0F1B                     	;# 
  4386  0F1C                     	;# 
  4387  0F1D                     	;# 
  4388  0F1E                     	;# 
  4389  0F1F                     	;# 
  4390  0F20                     	;# 
  4391  0F21                     	;# 
  4392  0F22                     	;# 
  4393  0F23                     	;# 
  4394  0F24                     	;# 
  4395  0F25                     	;# 
  4396  0F26                     	;# 
  4397  0F27                     	;# 
  4398  0F28                     	;# 
  4399  0F29                     	;# 
  4400  0F2A                     	;# 
  4401  0F2B                     	;# 
  4402  0F2C                     	;# 
  4403  0F2D                     	;# 
  4404  0F2E                     	;# 
  4405  0F2F                     	;# 
  4406  0F30                     	;# 
  4407  0F31                     	;# 
  4408  0F32                     	;# 
  4409  0F33                     	;# 
  4410  0F34                     	;# 
  4411  0F35                     	;# 
  4412  0F36                     	;# 
  4413  0F37                     	;# 
  4414  0FE4                     	;# 
  4415  0FE5                     	;# 
  4416  0FE6                     	;# 
  4417  0FE7                     	;# 
  4418  0FE8                     	;# 
  4419  0FE9                     	;# 
  4420  0FEA                     	;# 
  4421  0FEB                     	;# 
  4422  0FED                     	;# 
  4423  0FEE                     	;# 
  4424  0FEF                     	;# 
  4425  0000                     	;# 
  4426  0001                     	;# 
  4427  0002                     	;# 
  4428  0003                     	;# 
  4429  0004                     	;# 
  4430  0005                     	;# 
  4431  0006                     	;# 
  4432  0007                     	;# 
  4433  0008                     	;# 
  4434  0009                     	;# 
  4435  000A                     	;# 
  4436  000B                     	;# 
  4437  000C                     	;# 
  4438  000D                     	;# 
  4439  000E                     	;# 
  4440  0010                     	;# 
  4441  0011                     	;# 
  4442  0012                     	;# 
  4443  0013                     	;# 
  4444  0014                     	;# 
  4445  0015                     	;# 
  4446  0015                     	;# 
  4447  0016                     	;# 
  4448  0016                     	;# 
  4449  0017                     	;# 
  4450  0018                     	;# 
  4451  0019                     	;# 
  4452  0019                     	;# 
  4453  001A                     	;# 
  4454  001B                     	;# 
  4455  001C                     	;# 
  4456  001D                     	;# 
  4457  001E                     	;# 
  4458  001F                     	;# 
  4459  008C                     	;# 
  4460  008D                     	;# 
  4461  008E                     	;# 
  4462  0090                     	;# 
  4463  0091                     	;# 
  4464  0092                     	;# 
  4465  0093                     	;# 
  4466  0094                     	;# 
  4467  0097                     	;# 
  4468  009B                     	;# 
  4469  009B                     	;# 
  4470  009C                     	;# 
  4471  009D                     	;# 
  4472  009E                     	;# 
  4473  009F                     	;# 
  4474  010C                     	;# 
  4475  010D                     	;# 
  4476  010E                     	;# 
  4477  0111                     	;# 
  4478  0112                     	;# 
  4479  0113                     	;# 
  4480  0114                     	;# 
  4481  0115                     	;# 
  4482  0116                     	;# 
  4483  0117                     	;# 
  4484  0118                     	;# 
  4485  0119                     	;# 
  4486  018C                     	;# 
  4487  018D                     	;# 
  4488  018E                     	;# 
  4489  0197                     	;# 
  4490  0199                     	;# 
  4491  0199                     	;# 
  4492  0199                     	;# 
  4493  019A                     	;# 
  4494  019A                     	;# 
  4495  019A                     	;# 
  4496  019B                     	;# 
  4497  019B                     	;# 
  4498  019B                     	;# 
  4499  019B                     	;# 
  4500  019B                     	;# 
  4501  019C                     	;# 
  4502  019C                     	;# 
  4503  019C                     	;# 
  4504  019D                     	;# 
  4505  019D                     	;# 
  4506  019D                     	;# 
  4507  019E                     	;# 
  4508  019E                     	;# 
  4509  019E                     	;# 
  4510  019F                     	;# 
  4511  019F                     	;# 
  4512  019F                     	;# 
  4513  019F                     	;# 
  4514  019F                     	;# 
  4515  020C                     	;# 
  4516  020D                     	;# 
  4517  020E                     	;# 
  4518  0211                     	;# 
  4519  0211                     	;# 
  4520  0212                     	;# 
  4521  0212                     	;# 
  4522  0213                     	;# 
  4523  0213                     	;# 
  4524  0214                     	;# 
  4525  0214                     	;# 
  4526  0215                     	;# 
  4527  0215                     	;# 
  4528  0215                     	;# 
  4529  0215                     	;# 
  4530  0216                     	;# 
  4531  0216                     	;# 
  4532  0217                     	;# 
  4533  0217                     	;# 
  4534  0219                     	;# 
  4535  021A                     	;# 
  4536  021B                     	;# 
  4537  021C                     	;# 
  4538  021D                     	;# 
  4539  021D                     	;# 
  4540  021E                     	;# 
  4541  021F                     	;# 
  4542  028C                     	;# 
  4543  028D                     	;# 
  4544  028E                     	;# 
  4545  0291                     	;# 
  4546  0291                     	;# 
  4547  0292                     	;# 
  4548  0293                     	;# 
  4549  0294                     	;# 
  4550  0295                     	;# 
  4551  0295                     	;# 
  4552  0296                     	;# 
  4553  0297                     	;# 
  4554  0298                     	;# 
  4555  029F                     	;# 
  4556  030C                     	;# 
  4557  030D                     	;# 
  4558  030E                     	;# 
  4559  0311                     	;# 
  4560  0311                     	;# 
  4561  0312                     	;# 
  4562  0313                     	;# 
  4563  0314                     	;# 
  4564  0315                     	;# 
  4565  0315                     	;# 
  4566  0316                     	;# 
  4567  0317                     	;# 
  4568  0318                     	;# 
  4569  038C                     	;# 
  4570  038D                     	;# 
  4571  038E                     	;# 
  4572  0391                     	;# 
  4573  0392                     	;# 
  4574  0393                     	;# 
  4575  0394                     	;# 
  4576  0395                     	;# 
  4577  0396                     	;# 
  4578  0397                     	;# 
  4579  0398                     	;# 
  4580  0399                     	;# 
  4581  039A                     	;# 
  4582  039C                     	;# 
  4583  039D                     	;# 
  4584  039E                     	;# 
  4585  039F                     	;# 
  4586  0411                     	;# 
  4587  0411                     	;# 
  4588  0412                     	;# 
  4589  0413                     	;# 
  4590  0414                     	;# 
  4591  0415                     	;# 
  4592  0416                     	;# 
  4593  0417                     	;# 
  4594  0418                     	;# 
  4595  0418                     	;# 
  4596  0419                     	;# 
  4597  041A                     	;# 
  4598  041B                     	;# 
  4599  041C                     	;# 
  4600  041D                     	;# 
  4601  041E                     	;# 
  4602  041F                     	;# 
  4603  0498                     	;# 
  4604  0498                     	;# 
  4605  0499                     	;# 
  4606  049A                     	;# 
  4607  049B                     	;# 
  4608  049B                     	;# 
  4609  049C                     	;# 
  4610  049D                     	;# 
  4611  049E                     	;# 
  4612  049F                     	;# 
  4613  0617                     	;# 
  4614  0618                     	;# 
  4615  0619                     	;# 
  4616  0619                     	;# 
  4617  061A                     	;# 
  4618  061B                     	;# 
  4619  061C                     	;# 
  4620  061C                     	;# 
  4621  061F                     	;# 
  4622  0691                     	;# 
  4623  0692                     	;# 
  4624  0693                     	;# 
  4625  0694                     	;# 
  4626  0695                     	;# 
  4627  0696                     	;# 
  4628  0697                     	;# 
  4629  0698                     	;# 
  4630  0699                     	;# 
  4631  0711                     	;# 
  4632  0712                     	;# 
  4633  0713                     	;# 
  4634  0714                     	;# 
  4635  0715                     	;# 
  4636  0716                     	;# 
  4637  0717                     	;# 
  4638  0718                     	;# 
  4639  0719                     	;# 
  4640  0891                     	;# 
  4641  0891                     	;# 
  4642  0891                     	;# 
  4643  0891                     	;# 
  4644  0891                     	;# 
  4645  0891                     	;# 
  4646  0892                     	;# 
  4647  0892                     	;# 
  4648  0892                     	;# 
  4649  0893                     	;# 
  4650  0893                     	;# 
  4651  0893                     	;# 
  4652  0893                     	;# 
  4653  0893                     	;# 
  4654  0893                     	;# 
  4655  0894                     	;# 
  4656  0894                     	;# 
  4657  0894                     	;# 
  4658  0895                     	;# 
  4659  0895                     	;# 
  4660  0895                     	;# 
  4661  0896                     	;# 
  4662  0896                     	;# 
  4663  0896                     	;# 
  4664  089B                     	;# 
  4665  0911                     	;# 
  4666  0912                     	;# 
  4667  0913                     	;# 
  4668  0914                     	;# 
  4669  0915                     	;# 
  4670  0916                     	;# 
  4671  0918                     	;# 
  4672  0919                     	;# 
  4673  091A                     	;# 
  4674  091B                     	;# 
  4675  091C                     	;# 
  4676  091D                     	;# 
  4677  091E                     	;# 
  4678  091F                     	;# 
  4679  0E0F                     	;# 
  4680  0E10                     	;# 
  4681  0E11                     	;# 
  4682  0E12                     	;# 
  4683  0E13                     	;# 
  4684  0E14                     	;# 
  4685  0E15                     	;# 
  4686  0E16                     	;# 
  4687  0E17                     	;# 
  4688  0E18                     	;# 
  4689  0E19                     	;# 
  4690  0E1A                     	;# 
  4691  0E1B                     	;# 
  4692  0E1C                     	;# 
  4693  0E1D                     	;# 
  4694  0E1E                     	;# 
  4695  0E1F                     	;# 
  4696  0E20                     	;# 
  4697  0E21                     	;# 
  4698  0E22                     	;# 
  4699  0E24                     	;# 
  4700  0E25                     	;# 
  4701  0E28                     	;# 
  4702  0E29                     	;# 
  4703  0E2A                     	;# 
  4704  0E2B                     	;# 
  4705  0E2C                     	;# 
  4706  0E2D                     	;# 
  4707  0E2E                     	;# 
  4708  0E2F                     	;# 
  4709  0E90                     	;# 
  4710  0E91                     	;# 
  4711  0E92                     	;# 
  4712  0E94                     	;# 
  4713  0E95                     	;# 
  4714  0E9C                     	;# 
  4715  0E9D                     	;# 
  4716  0E9E                     	;# 
  4717  0E9F                     	;# 
  4718  0EA0                     	;# 
  4719  0EA1                     	;# 
  4720  0EA2                     	;# 
  4721  0EA3                     	;# 
  4722  0EA4                     	;# 
  4723  0EA5                     	;# 
  4724  0EA6                     	;# 
  4725  0EA7                     	;# 
  4726  0F0F                     	;# 
  4727  0F10                     	;# 
  4728  0F11                     	;# 
  4729  0F12                     	;# 
  4730  0F13                     	;# 
  4731  0F14                     	;# 
  4732  0F15                     	;# 
  4733  0F16                     	;# 
  4734  0F17                     	;# 
  4735  0F18                     	;# 
  4736  0F19                     	;# 
  4737  0F1A                     	;# 
  4738  0F1B                     	;# 
  4739  0F1C                     	;# 
  4740  0F1D                     	;# 
  4741  0F1E                     	;# 
  4742  0F1F                     	;# 
  4743  0F20                     	;# 
  4744  0F21                     	;# 
  4745  0F22                     	;# 
  4746  0F23                     	;# 
  4747  0F24                     	;# 
  4748  0F25                     	;# 
  4749  0F26                     	;# 
  4750  0F27                     	;# 
  4751  0F28                     	;# 
  4752  0F29                     	;# 
  4753  0F2A                     	;# 
  4754  0F2B                     	;# 
  4755  0F2C                     	;# 
  4756  0F2D                     	;# 
  4757  0F2E                     	;# 
  4758  0F2F                     	;# 
  4759  0F30                     	;# 
  4760  0F31                     	;# 
  4761  0F32                     	;# 
  4762  0F33                     	;# 
  4763  0F34                     	;# 
  4764  0F35                     	;# 
  4765  0F36                     	;# 
  4766  0F37                     	;# 
  4767  0FE4                     	;# 
  4768  0FE5                     	;# 
  4769  0FE6                     	;# 
  4770  0FE7                     	;# 
  4771  0FE8                     	;# 
  4772  0FE9                     	;# 
  4773  0FEA                     	;# 
  4774  0FEB                     	;# 
  4775  0FED                     	;# 
  4776  0FEE                     	;# 
  4777  0FEF                     	;# 
  4778  0000                     	;# 
  4779  0001                     	;# 
  4780  0002                     	;# 
  4781  0003                     	;# 
  4782  0004                     	;# 
  4783  0005                     	;# 
  4784  0006                     	;# 
  4785  0007                     	;# 
  4786  0008                     	;# 
  4787  0009                     	;# 
  4788  000A                     	;# 
  4789  000B                     	;# 
  4790  000C                     	;# 
  4791  000D                     	;# 
  4792  000E                     	;# 
  4793  0010                     	;# 
  4794  0011                     	;# 
  4795  0012                     	;# 
  4796  0013                     	;# 
  4797  0014                     	;# 
  4798  0015                     	;# 
  4799  0015                     	;# 
  4800  0016                     	;# 
  4801  0016                     	;# 
  4802  0017                     	;# 
  4803  0018                     	;# 
  4804  0019                     	;# 
  4805  0019                     	;# 
  4806  001A                     	;# 
  4807  001B                     	;# 
  4808  001C                     	;# 
  4809  001D                     	;# 
  4810  001E                     	;# 
  4811  001F                     	;# 
  4812  008C                     	;# 
  4813  008D                     	;# 
  4814  008E                     	;# 
  4815  0090                     	;# 
  4816  0091                     	;# 
  4817  0092                     	;# 
  4818  0093                     	;# 
  4819  0094                     	;# 
  4820  0097                     	;# 
  4821  009B                     	;# 
  4822  009B                     	;# 
  4823  009C                     	;# 
  4824  009D                     	;# 
  4825  009E                     	;# 
  4826  009F                     	;# 
  4827  010C                     	;# 
  4828  010D                     	;# 
  4829  010E                     	;# 
  4830  0111                     	;# 
  4831  0112                     	;# 
  4832  0113                     	;# 
  4833  0114                     	;# 
  4834  0115                     	;# 
  4835  0116                     	;# 
  4836  0117                     	;# 
  4837  0118                     	;# 
  4838  0119                     	;# 
  4839  018C                     	;# 
  4840  018D                     	;# 
  4841  018E                     	;# 
  4842  0197                     	;# 
  4843  0199                     	;# 
  4844  0199                     	;# 
  4845  0199                     	;# 
  4846  019A                     	;# 
  4847  019A                     	;# 
  4848  019A                     	;# 
  4849  019B                     	;# 
  4850  019B                     	;# 
  4851  019B                     	;# 
  4852  019B                     	;# 
  4853  019B                     	;# 
  4854  019C                     	;# 
  4855  019C                     	;# 
  4856  019C                     	;# 
  4857  019D                     	;# 
  4858  019D                     	;# 
  4859  019D                     	;# 
  4860  019E                     	;# 
  4861  019E                     	;# 
  4862  019E                     	;# 
  4863  019F                     	;# 
  4864  019F                     	;# 
  4865  019F                     	;# 
  4866  019F                     	;# 
  4867  019F                     	;# 
  4868  020C                     	;# 
  4869  020D                     	;# 
  4870  020E                     	;# 
  4871  0211                     	;# 
  4872  0211                     	;# 
  4873  0212                     	;# 
  4874  0212                     	;# 
  4875  0213                     	;# 
  4876  0213                     	;# 
  4877  0214                     	;# 
  4878  0214                     	;# 
  4879  0215                     	;# 
  4880  0215                     	;# 
  4881  0215                     	;# 
  4882  0215                     	;# 
  4883  0216                     	;# 
  4884  0216                     	;# 
  4885  0217                     	;# 
  4886  0217                     	;# 
  4887  0219                     	;# 
  4888  021A                     	;# 
  4889  021B                     	;# 
  4890  021C                     	;# 
  4891  021D                     	;# 
  4892  021D                     	;# 
  4893  021E                     	;# 
  4894  021F                     	;# 
  4895  028C                     	;# 
  4896  028D                     	;# 
  4897  028E                     	;# 
  4898  0291                     	;# 
  4899  0291                     	;# 
  4900  0292                     	;# 
  4901  0293                     	;# 
  4902  0294                     	;# 
  4903  0295                     	;# 
  4904  0295                     	;# 
  4905  0296                     	;# 
  4906  0297                     	;# 
  4907  0298                     	;# 
  4908  029F                     	;# 
  4909  030C                     	;# 
  4910  030D                     	;# 
  4911  030E                     	;# 
  4912  0311                     	;# 
  4913  0311                     	;# 
  4914  0312                     	;# 
  4915  0313                     	;# 
  4916  0314                     	;# 
  4917  0315                     	;# 
  4918  0315                     	;# 
  4919  0316                     	;# 
  4920  0317                     	;# 
  4921  0318                     	;# 
  4922  038C                     	;# 
  4923  038D                     	;# 
  4924  038E                     	;# 
  4925  0391                     	;# 
  4926  0392                     	;# 
  4927  0393                     	;# 
  4928  0394                     	;# 
  4929  0395                     	;# 
  4930  0396                     	;# 
  4931  0397                     	;# 
  4932  0398                     	;# 
  4933  0399                     	;# 
  4934  039A                     	;# 
  4935  039C                     	;# 
  4936  039D                     	;# 
  4937  039E                     	;# 
  4938  039F                     	;# 
  4939  0411                     	;# 
  4940  0411                     	;# 
  4941  0412                     	;# 
  4942  0413                     	;# 
  4943  0414                     	;# 
  4944  0415                     	;# 
  4945  0416                     	;# 
  4946  0417                     	;# 
  4947  0418                     	;# 
  4948  0418                     	;# 
  4949  0419                     	;# 
  4950  041A                     	;# 
  4951  041B                     	;# 
  4952  041C                     	;# 
  4953  041D                     	;# 
  4954  041E                     	;# 
  4955  041F                     	;# 
  4956  0498                     	;# 
  4957  0498                     	;# 
  4958  0499                     	;# 
  4959  049A                     	;# 
  4960  049B                     	;# 
  4961  049B                     	;# 
  4962  049C                     	;# 
  4963  049D                     	;# 
  4964  049E                     	;# 
  4965  049F                     	;# 
  4966  0617                     	;# 
  4967  0618                     	;# 
  4968  0619                     	;# 
  4969  0619                     	;# 
  4970  061A                     	;# 
  4971  061B                     	;# 
  4972  061C                     	;# 
  4973  061C                     	;# 
  4974  061F                     	;# 
  4975  0691                     	;# 
  4976  0692                     	;# 
  4977  0693                     	;# 
  4978  0694                     	;# 
  4979  0695                     	;# 
  4980  0696                     	;# 
  4981  0697                     	;# 
  4982  0698                     	;# 
  4983  0699                     	;# 
  4984  0711                     	;# 
  4985  0712                     	;# 
  4986  0713                     	;# 
  4987  0714                     	;# 
  4988  0715                     	;# 
  4989  0716                     	;# 
  4990  0717                     	;# 
  4991  0718                     	;# 
  4992  0719                     	;# 
  4993  0891                     	;# 
  4994  0891                     	;# 
  4995  0891                     	;# 
  4996  0891                     	;# 
  4997  0891                     	;# 
  4998  0891                     	;# 
  4999  0892                     	;# 
  5000  0892                     	;# 
  5001  0892                     	;# 
  5002  0893                     	;# 
  5003  0893                     	;# 
  5004  0893                     	;# 
  5005  0893                     	;# 
  5006  0893                     	;# 
  5007  0893                     	;# 
  5008  0894                     	;# 
  5009  0894                     	;# 
  5010  0894                     	;# 
  5011  0895                     	;# 
  5012  0895                     	;# 
  5013  0895                     	;# 
  5014  0896                     	;# 
  5015  0896                     	;# 
  5016  0896                     	;# 
  5017  089B                     	;# 
  5018  0911                     	;# 
  5019  0912                     	;# 
  5020  0913                     	;# 
  5021  0914                     	;# 
  5022  0915                     	;# 
  5023  0916                     	;# 
  5024  0918                     	;# 
  5025  0919                     	;# 
  5026  091A                     	;# 
  5027  091B                     	;# 
  5028  091C                     	;# 
  5029  091D                     	;# 
  5030  091E                     	;# 
  5031  091F                     	;# 
  5032  0E0F                     	;# 
  5033  0E10                     	;# 
  5034  0E11                     	;# 
  5035  0E12                     	;# 
  5036  0E13                     	;# 
  5037  0E14                     	;# 
  5038  0E15                     	;# 
  5039  0E16                     	;# 
  5040  0E17                     	;# 
  5041  0E18                     	;# 
  5042  0E19                     	;# 
  5043  0E1A                     	;# 
  5044  0E1B                     	;# 
  5045  0E1C                     	;# 
  5046  0E1D                     	;# 
  5047  0E1E                     	;# 
  5048  0E1F                     	;# 
  5049  0E20                     	;# 
  5050  0E21                     	;# 
  5051  0E22                     	;# 
  5052  0E24                     	;# 
  5053  0E25                     	;# 
  5054  0E28                     	;# 
  5055  0E29                     	;# 
  5056  0E2A                     	;# 
  5057  0E2B                     	;# 
  5058  0E2C                     	;# 
  5059  0E2D                     	;# 
  5060  0E2E                     	;# 
  5061  0E2F                     	;# 
  5062  0E90                     	;# 
  5063  0E91                     	;# 
  5064  0E92                     	;# 
  5065  0E94                     	;# 
  5066  0E95                     	;# 
  5067  0E9C                     	;# 
  5068  0E9D                     	;# 
  5069  0E9E                     	;# 
  5070  0E9F                     	;# 
  5071  0EA0                     	;# 
  5072  0EA1                     	;# 
  5073  0EA2                     	;# 
  5074  0EA3                     	;# 
  5075  0EA4                     	;# 
  5076  0EA5                     	;# 
  5077  0EA6                     	;# 
  5078  0EA7                     	;# 
  5079  0F0F                     	;# 
  5080  0F10                     	;# 
  5081  0F11                     	;# 
  5082  0F12                     	;# 
  5083  0F13                     	;# 
  5084  0F14                     	;# 
  5085  0F15                     	;# 
  5086  0F16                     	;# 
  5087  0F17                     	;# 
  5088  0F18                     	;# 
  5089  0F19                     	;# 
  5090  0F1A                     	;# 
  5091  0F1B                     	;# 
  5092  0F1C                     	;# 
  5093  0F1D                     	;# 
  5094  0F1E                     	;# 
  5095  0F1F                     	;# 
  5096  0F20                     	;# 
  5097  0F21                     	;# 
  5098  0F22                     	;# 
  5099  0F23                     	;# 
  5100  0F24                     	;# 
  5101  0F25                     	;# 
  5102  0F26                     	;# 
  5103  0F27                     	;# 
  5104  0F28                     	;# 
  5105  0F29                     	;# 
  5106  0F2A                     	;# 
  5107  0F2B                     	;# 
  5108  0F2C                     	;# 
  5109  0F2D                     	;# 
  5110  0F2E                     	;# 
  5111  0F2F                     	;# 
  5112  0F30                     	;# 
  5113  0F31                     	;# 
  5114  0F32                     	;# 
  5115  0F33                     	;# 
  5116  0F34                     	;# 
  5117  0F35                     	;# 
  5118  0F36                     	;# 
  5119  0F37                     	;# 
  5120  0FE4                     	;# 
  5121  0FE5                     	;# 
  5122  0FE6                     	;# 
  5123  0FE7                     	;# 
  5124  0FE8                     	;# 
  5125  0FE9                     	;# 
  5126  0FEA                     	;# 
  5127  0FEB                     	;# 
  5128  0FED                     	;# 
  5129  0FEE                     	;# 
  5130  0FEF                     	;# 
  5131                           
  5132                           	psect	idataBANK0
  5133  167F                     __pidataBANK0:	
  5134                           
  5135                           ;initializer for _on
  5136  167F  3401               	retlw	1
  5137  1680  3400               	retlw	0
  5138                           
  5139                           ;initializer for _brightness
  5140  1681  3403               	retlw	3
  5141  1682  3400               	retlw	0
  5142                           
  5143                           ;initializer for _start
  5144  1683  3401               	retlw	1
  5145                           
  5146                           ;initializer for _brightLCD
  5147  1684  3408               	retlw	8
  5148                           
  5149                           	psect	idataBANK1
  5150  0002                     __pidataBANK1:	
  5151                           
  5152                           ;initializer for _dummy
  5153  0002  3401               	retlw	1
  5154  0003  3400               	retlw	0
  5155                           
  5156                           	psect	idataBANK2
  5157  15EF                     __pidataBANK2:	
  5158                           
  5159                           ;initializer for _toggle
  5160  15EF  3401               	retlw	1
  5161  15F0  3400               	retlw	0
  5162                           
  5163                           	psect	idataBANK3
  5164  16D1                     __pidataBANK3:	
  5165                           
  5166                           ;initializer for _names
  5167  16D1  341D               	retlw	low (STR_1| (0+32768))
  5168  16D2  3498               	retlw	high (STR_1| (0+32768))
  5169  16D3  3410               	retlw	low (STR_2| (0+32768))
  5170  16D4  3498               	retlw	high (STR_2| (0+32768))
  5171  16D5  3400               	retlw	low (STR_3| (0+32768))
  5172  16D6  3498               	retlw	high (STR_3| (0+32768))
  5173  16D7  3429               	retlw	low (STR_4| (0+32768))
  5174  16D8  3498               	retlw	high (STR_4| (0+32768))
  5175                           
  5176                           	psect	stringtext1
  5177  1000                     __pstringtext1:	
  5178  1000                     _fsmStateTable:	
  5179  1000  345C               	retlw	low _do_I2C_IDLE
  5180  1001  3416               	retlw	high _do_I2C_IDLE
  5181  1002  34A9               	retlw	low _do_I2C_SEND_ADR_READ
  5182  1003  3416               	retlw	high _do_I2C_SEND_ADR_READ
  5183  1004  348C               	retlw	low _do_I2C_SEND_ADR_WRITE
  5184  1005  3416               	retlw	high _do_I2C_SEND_ADR_WRITE
  5185  1006  345B               	retlw	low _do_I2C_TX
  5186  1007  340D               	retlw	high _do_I2C_TX
  5187  1008  3481               	retlw	low _do_I2C_RX
  5188  1009  340C               	retlw	high _do_I2C_RX
  5189  100A  3467               	retlw	low _do_I2C_RCEN
  5190  100B  3416               	retlw	high _do_I2C_RCEN
  5191  100C  34C3               	retlw	low _do_I2C_TX_EMPTY
  5192  100D  340A               	retlw	high _do_I2C_TX_EMPTY
  5193  100E  3433               	retlw	low _do_I2C_SEND_RESTART_READ
  5194  100F  3416               	retlw	high _do_I2C_SEND_RESTART_READ
  5195  1010  3437               	retlw	low _do_I2C_SEND_RESTART_WRITE
  5196  1011  3416               	retlw	high _do_I2C_SEND_RESTART_WRITE
  5197  1012  343B               	retlw	low _do_I2C_SEND_RESTART
  5198  1013  3416               	retlw	high _do_I2C_SEND_RESTART
  5199  1014  343F               	retlw	low _do_I2C_SEND_STOP
  5200  1015  3416               	retlw	high _do_I2C_SEND_STOP
  5201  1016  3443               	retlw	low _do_I2C_DO_ACK
  5202  1017  3416               	retlw	high _do_I2C_DO_ACK
  5203  1018  3447               	retlw	low _do_I2C_DO_NACK_STOP
  5204  1019  3416               	retlw	high _do_I2C_DO_NACK_STOP
  5205  101A  344B               	retlw	low _do_I2C_DO_NACK_RESTART
  5206  101B  3416               	retlw	high _do_I2C_DO_NACK_RESTART
  5207  101C  3485               	retlw	low _do_I2C_RESET
  5208  101D  3416               	retlw	high _do_I2C_RESET
  5209  101E  346D               	retlw	low _do_I2C_DO_ADDRESS_NACK
  5210  101F  340A               	retlw	high _do_I2C_DO_ADDRESS_NACK
  5211  1020                     __end_of_fsmStateTable:	
  5212                           
  5213                           	psect	nvBANK1
  5214  00EA                     __pnvBANK1:	
  5215  00EA                     _IOCAF4_InterruptHandler:	
  5216  00EA                     	ds	2
  5217  00EC                     _eusartTxBufferRemaining:	
  5218  00EC                     	ds	1
  5219                           
  5220                           	psect	nvBANK2
  5221  016A                     __pnvBANK2:	
  5222  016A                     _EUSART_RxDefaultInterruptHandler:	
  5223  016A                     	ds	2
  5224  016C                     _EUSART_TxDefaultInterruptHandler:	
  5225  016C                     	ds	2
  5226                           
  5227                           	psect	nvBANK3
  5228  01DA                     __pnvBANK3:	
  5229  01DA                     _EUSART_ErrorHandler:	
  5230  01DA                     	ds	2
  5231  01DC                     _EUSART_OverrunErrorHandler:	
  5232  01DC                     	ds	2
  5233  01DE                     _EUSART_FramingErrorHandler:	
  5234  01DE                     	ds	2
  5235  000E                     _PORTCbits	set	14
  5236  001F                     _T2CONbits	set	31
  5237  001F                     _T2CON	set	31
  5238  001D                     _TMR2	set	29
  5239  001E                     _PR2	set	30
  5240  0011                     _PIR1bits	set	17
  5241  000B                     _INTCONbits	set	11
  5242  0010                     _PIR0bits	set	16
  5243  009D                     _ADCON0bits	set	157
  5244  009C                     _ADRESH	set	156
  5245  009B                     _ADRESL	set	155
  5246  009F                     _ADACT	set	159
  5247  009E                     _ADCON1	set	158
  5248  009D                     _ADCON0	set	157
  5249  008E                     _TRISC	set	142
  5250  008D                     _TRISB	set	141
  5251  008C                     _TRISA	set	140
  5252  0097                     _WDTCON	set	151
  5253  0091                     _PIE1bits	set	145
  5254  0090                     _PIE0bits	set	144
  5255  010E                     _LATCbits	set	270
  5256  010C                     _LATAbits	set	268
  5257  010E                     _LATC	set	270
  5258  010D                     _LATB	set	269
  5259  010C                     _LATA	set	268
  5260  019A                     _TXREG1	set	410
  5261  019E                     _TXSTA1bits	set	414
  5262  0199                     _RC1REG	set	409
  5263  019D                     _RC1STAbits	set	413
  5264  019A                     _TX1REG	set	410
  5265  019E                     _TX1STAbits	set	414
  5266  019C                     _SP1BRGH	set	412
  5267  019B                     _SP1BRGL	set	411
  5268  019E                     _TX1STA	set	414
  5269  019D                     _RC1STA	set	413
  5270  019F                     _BAUD1CON	set	415
  5271  018C                     _ANSELA	set	396
  5272  018D                     _ANSELB	set	397
  5273  018E                     _ANSELC	set	398
  5274  021C                     _SSP2STATbits	set	540
  5275  0219                     _SSP2BUF	set	537
  5276  021D                     _SSP2CON1bits	set	541
  5277  021A                     _SSP2ADD	set	538
  5278  021D                     _SSP2CON1	set	541
  5279  021C                     _SSP2STAT	set	540
  5280  0214                     _SSP1STATbits	set	532
  5281  0213                     _SSP1MSK	set	531
  5282  0211                     _SSP1BUF	set	529
  5283  0216                     _SSP1CON2bits	set	534
  5284  0212                     _SSP1ADD	set	530
  5285  0216                     _SSP1CON2	set	534
  5286  0215                     _SSP1CON1	set	533
  5287  0214                     _SSP1STAT	set	532
  5288  0215                     _SSP1CON1bits	set	533
  5289  020E                     _WPUC	set	526
  5290  020C                     _WPUA	set	524
  5291  020D                     _WPUB	set	525
  5292  0293                     _CCP1CONbits	set	659
  5293  029F                     _CCPTMRSbits	set	671
  5294  0291                     _CCPR1L	set	657
  5295  0292                     _CCPR1H	set	658
  5296  0293                     _CCP1CON	set	659
  5297  028E                     _ODCONC	set	654
  5298  028D                     _ODCONB	set	653
  5299  028C                     _ODCONA	set	652
  5300  030E                     _SLRCONC	set	782
  5301  030D                     _SLRCONB	set	781
  5302  030C                     _SLRCONA	set	780
  5303  0391                     _IOCAPbits	set	913
  5304  0392                     _IOCANbits	set	914
  5305  0393                     _IOCAFbits	set	915
  5306  0916                     _PMD5	set	2326
  5307  0915                     _PMD4	set	2325
  5308  0914                     _PMD3	set	2324
  5309  0913                     _PMD2	set	2323
  5310  0912                     _PMD1	set	2322
  5311  0911                     _PMD0	set	2321
  5312  091E                     _OSCTUNE	set	2334
  5313  091F                     _OSCFRQ	set	2335
  5314  091D                     _OSCEN	set	2333
  5315  091B                     _OSCCON3	set	2331
  5316  0919                     _OSCCON1	set	2329
  5317  0E1D                     _SSP2CLKPPS	set	3613
  5318  0E21                     _SSP1DATPPS	set	3617
  5319  0E20                     _SSP1CLKPPS	set	3616
  5320  0E1E                     _SSP2DATPPS	set	3614
  5321  0EA6                     _RC6PPS	set	3750
  5322  0EA5                     _RC5PPS	set	3749
  5323  0EA2                     _RC2PPS	set	3746
  5324  0E9F                     _RB7PPS	set	3743
  5325  0E9E                     _RB6PPS	set	3742
  5326  0E94                     _RA4PPS	set	3732
  5327                           
  5328                           	psect	stringtext2
  5329  1800                     __pstringtext2:	
  5330  1800                     STR_3:	
  5331  1800  3441               	retlw	65	;'A'
  5332  1801  346C               	retlw	108	;'l'
  5333  1802  3465               	retlw	101	;'e'
  5334  1803  3478               	retlw	120	;'x'
  5335  1804  3461               	retlw	97	;'a'
  5336  1805  346E               	retlw	110	;'n'
  5337  1806  3464               	retlw	100	;'d'
  5338  1807  3472               	retlw	114	;'r'
  5339  1808  3461               	retlw	97	;'a'
  5340  1809  3420               	retlw	32	;' '
  5341  180A  3446               	retlw	70	;'F'
  5342  180B  3479               	retlw	121	;'y'
  5343  180C  3466               	retlw	102	;'f'
  5344  180D  3466               	retlw	102	;'f'
  5345  180E  3465               	retlw	101	;'e'
  5346  180F  3400               	retlw	0
  5347                           
  5348                           	psect	stringtext3
  5349  1810                     __pstringtext3:	
  5350  1810                     STR_2:	
  5351  1810  344E               	retlw	78	;'N'
  5352  1811  346F               	retlw	111	;'o'
  5353  1812  3465               	retlw	101	;'e'
  5354  1813  346C               	retlw	108	;'l'
  5355  1814  346C               	retlw	108	;'l'
  5356  1815  3465               	retlw	101	;'e'
  5357  1816  3420               	retlw	32	;' '
  5358  1817  3443               	retlw	67	;'C'
  5359  1818  3472               	retlw	114	;'r'
  5360  1819  3461               	retlw	97	;'a'
  5361  181A  346E               	retlw	110	;'n'
  5362  181B  3465               	retlw	101	;'e'
  5363  181C  3400               	retlw	0
  5364                           
  5365                           	psect	stringtext4
  5366  181D                     __pstringtext4:	
  5367  181D                     STR_1:	
  5368  181D  344A               	retlw	74	;'J'
  5369  181E  3475               	retlw	117	;'u'
  5370  181F  3473               	retlw	115	;'s'
  5371  1820  3474               	retlw	116	;'t'
  5372  1821  3469               	retlw	105	;'i'
  5373  1822  346E               	retlw	110	;'n'
  5374  1823  3420               	retlw	32	;' '
  5375  1824  3443               	retlw	67	;'C'
  5376  1825  3468               	retlw	104	;'h'
  5377  1826  3461               	retlw	97	;'a'
  5378  1827  346E               	retlw	110	;'n'
  5379  1828  3400               	retlw	0
  5380                           
  5381                           	psect	stringtext5
  5382  1829                     __pstringtext5:	
  5383  1829                     STR_4:	
  5384  1829  344A               	retlw	74	;'J'
  5385  182A  3465               	retlw	101	;'e'
  5386  182B  3466               	retlw	102	;'f'
  5387  182C  3466               	retlw	102	;'f'
  5388  182D  3420               	retlw	32	;' '
  5389  182E  3447               	retlw	71	;'G'
  5390  182F  3465               	retlw	101	;'e'
  5391  1830  3469               	retlw	105	;'i'
  5392  1831  3473               	retlw	115	;'s'
  5393  1832  3473               	retlw	115	;'s'
  5394  1833  3400               	retlw	0
  5395                           
  5396                           	psect	stringtext6
  5397  0000                     __pstringtext6:	
  5398                           
  5399                           ; #config settings
  5400  0000                     
  5401                           	psect	cinit
  5402  0049                     start_initialization:	
  5403  0049                     __initialization:	
  5404                           
  5405                           ; Initialize objects allocated to BANK0
  5406  0049  307F               	movlw	low __pidataBANK0
  5407  004A  0084               	movwf	4
  5408  004B  3096               	movlw	(high __pidataBANK0)| (0+128)
  5409  004C  0085               	movwf	5
  5410  004D  306A               	movlw	low __pdataBANK0
  5411  004E  0086               	movwf	6
  5412  004F  3000               	movlw	high __pdataBANK0
  5413  0050  0087               	movwf	7
  5414  0051  3006               	movlw	6
  5415  0052  3196  2679  3180   	fcall	init_ram
  5416                           
  5417                           ; Initialize objects allocated to BANK1
  5418  0055  0021               	movlb	1	; select bank1
  5419  0056  3180  2002  3180   	fcall	__pidataBANK1	;fetch initializer
  5420  0059  00ED               	movwf	__pdataBANK1& (0+127)
  5421  005A  3180  2003  3180   	fcall	__pidataBANK1+1	;fetch initializer
  5422  005D  00EE               	movwf	(__pdataBANK1+1)& (0+127)
  5423                           
  5424                           ; Initialize objects allocated to BANK2
  5425  005E  0022               	movlb	2	; select bank2
  5426  005F  3195  25EF  3180   	fcall	__pidataBANK2	;fetch initializer
  5427  0062  00EE               	movwf	__pdataBANK2& (0+127)
  5428  0063  3195  25F0  3180   	fcall	__pidataBANK2+1	;fetch initializer
  5429  0066  00EF               	movwf	(__pdataBANK2+1)& (0+127)
  5430                           
  5431                           ; Initialize objects allocated to BANK3
  5432  0067  30D1               	movlw	low __pidataBANK3
  5433  0068  0084               	movwf	4
  5434  0069  3096               	movlw	(high __pidataBANK3)| (0+128)
  5435  006A  0085               	movwf	5
  5436  006B  30D2               	movlw	low __pdataBANK3
  5437  006C  0086               	movwf	6
  5438  006D  3001               	movlw	high __pdataBANK3
  5439  006E  0087               	movwf	7
  5440  006F  3008               	movlw	8
  5441  0070  3196  2679  3180   	fcall	init_ram
  5442                           
  5443                           ; Clear objects allocated to COMMON
  5444  0073  01F0               	clrf	__pbssCOMMON& (0+127)
  5445  0074  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
  5446  0075  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
  5447  0076  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
  5448  0077  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
  5449  0078  01F5               	clrf	(__pbssCOMMON+5)& (0+127)
  5450                           
  5451                           ; Clear objects allocated to BANK0
  5452  0079  305A               	movlw	low __pbssBANK0
  5453  007A  0084               	movwf	4
  5454  007B  3000               	movlw	high __pbssBANK0
  5455  007C  0085               	movwf	5
  5456  007D  3010               	movlw	16
  5457  007E  3196  2673  3180   	fcall	clear_ram0
  5458                           
  5459                           ; Clear objects allocated to BANK1
  5460  0081  30E0               	movlw	low __pbssBANK1
  5461  0082  0084               	movwf	4
  5462  0083  3000               	movlw	high __pbssBANK1
  5463  0084  0085               	movwf	5
  5464  0085  300A               	movlw	10
  5465  0086  3196  2673  3180   	fcall	clear_ram0
  5466                           
  5467                           ; Clear objects allocated to BANK2
  5468  0089  3060               	movlw	low __pbssBANK2
  5469  008A  0084               	movwf	4
  5470  008B  3001               	movlw	high __pbssBANK2
  5471  008C  0085               	movwf	5
  5472  008D  300A               	movlw	10
  5473  008E  3196  2673  3180   	fcall	clear_ram0
  5474                           
  5475                           ; Clear objects allocated to BANK3
  5476  0091  30A0               	movlw	low __pbssBANK3
  5477  0092  0084               	movwf	4
  5478  0093  3001               	movlw	high __pbssBANK3
  5479  0094  0085               	movwf	5
  5480  0095  3032               	movlw	50
  5481  0096  3196  2673  3180   	fcall	clear_ram0
  5482                           
  5483                           ; Clear objects allocated to BANK4
  5484  0099  3020               	movlw	low __pbssBANK4
  5485  009A  0084               	movwf	4
  5486  009B  3002               	movlw	high __pbssBANK4
  5487  009C  0085               	movwf	5
  5488  009D  3044               	movlw	68
  5489  009E  3196  2673         	fcall	clear_ram0
  5490  00A0                     end_of_initialization:	
  5491                           ;End of C runtime variable initialization code
  5492                           
  5493  00A0                     __end_of__initialization:	
  5494  00A0  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  5495  00A1  0020               	movlb	0
  5496  00A2  318D  2DF9         	ljmp	_main	;jump to C main() function
  5497                           
  5498                           	psect	bssCOMMON
  5499  0070                     __pbssCOMMON:	
  5500  0070                     _eusartRxLastError:	
  5501  0070                     	ds	1
  5502  0071                     _eusartRxCount:	
  5503  0071                     	ds	1
  5504  0072                     _eusartRxTail:	
  5505  0072                     	ds	1
  5506  0073                     _eusartRxHead:	
  5507  0073                     	ds	1
  5508  0074                     _eusartTxTail:	
  5509  0074                     	ds	1
  5510  0075                     _eusartTxHead:	
  5511  0075                     	ds	1
  5512                           
  5513                           	psect	bssBANK0
  5514  005A                     __pbssBANK0:	
  5515  005A                     _name:	
  5516  005A                     	ds	2
  5517  005C                     _gesture_near_count_:	
  5518  005C                     	ds	2
  5519  005E                     _gesture_lr_count_:	
  5520  005E                     	ds	2
  5521  0060                     _gesture_ud_count_:	
  5522  0060                     	ds	2
  5523  0062                     _gesture_lr_delta_:	
  5524  0062                     	ds	2
  5525  0064                     _gesture_ud_delta_:	
  5526  0064                     	ds	2
  5527  0066                     _b_i2c_error_flag:	
  5528  0066                     	ds	1
  5529  0067                     _handleGestureFlag:	
  5530  0067                     	ds	1
  5531  0068                     _adcResult:	
  5532  0068                     	ds	1
  5533  0069                     _printed:	
  5534  0069                     	ds	1
  5535                           
  5536                           	psect	dataBANK0
  5537  006A                     __pdataBANK0:	
  5538  006A                     _on:	
  5539  006A                     	ds	2
  5540  006C                     _brightness:	
  5541  006C                     	ds	2
  5542  006E                     _start:	
  5543  006E                     	ds	1
  5544  006F                     _brightLCD:	
  5545  006F                     	ds	1
  5546                           
  5547                           	psect	bssBANK1
  5548  00E0                     __pbssBANK1:	
  5549  00E0                     _prox:	
  5550  00E0                     	ds	2
  5551  00E2                     _gesture_state_:	
  5552  00E2                     	ds	2
  5553  00E4                     _gesture_far_count_:	
  5554  00E4                     	ds	2
  5555  00E6                     _i2c1_driver_i2cISR:	
  5556  00E6                     	ds	2
  5557  00E8                     _i2c1_driver_busCollisionISR:	
  5558  00E8                     	ds	2
  5559                           
  5560                           	psect	dataBANK1
  5561  00ED                     __pdataBANK1:	
  5562  00ED                     _dummy:	
  5563  00ED                     	ds	2
  5564                           
  5565                           	psect	bssBANK2
  5566  0160                     __pbssBANK2:	
  5567  0160                     _eusartRxStatusBuffer:	
  5568  0160                     	ds	8
  5569  0168                     _gesture_motion_:	
  5570  0168                     	ds	2
  5571                           
  5572                           	psect	dataBANK2
  5573  016E                     __pdataBANK2:	
  5574  016E                     _toggle:	
  5575  016E                     	ds	2
  5576                           
  5577                           	psect	bssBANK3
  5578  01A0                     __pbssBANK3:	
  5579  01A0                     _i2c_status:	
  5580  01A0                     	ds	29
  5581  01BD                     _eusartRxBuffer:	
  5582  01BD                     	ds	8
  5583  01C5                     _eusartTxBuffer:	
  5584  01C5                     	ds	8
  5585  01CD                     UART_Byte@F7547:	
  5586  01CD                     	ds	5
  5587                           
  5588                           	psect	dataBANK3
  5589  01D2                     __pdataBANK3:	
  5590  01D2                     _names:	
  5591  01D2                     	ds	8
  5592                           
  5593                           	psect	bssBANK4
  5594  0220                     __pbssBANK4:	
  5595  0220                     _gesture_data_:	
  5596  0220                     	ds	68
  5597                           
  5598                           	psect	inittext
  5599  1679                     init_ram:	
  5600  1679  00FE               	movwf	126
  5601  167A                     initloop:	
  5602  167A  0012               	moviw fsr0++
  5603  167B  001E               	movwi fsr1++
  5604  167C  0BFE               	decfsz	126,f
  5605  167D  2E7A               	goto	initloop
  5606  167E  3400               	retlw	0
  5607                           
  5608                           	psect	clrtext
  5609  1673                     clear_ram0:	
  5610                           ;	Called with FSR0 containing the base address, and
  5611                           ;	WREG with the size to clear
  5612                           
  5613  1673  0064               	clrwdt	;clear the watchdog before getting into this loop
  5614  1674                     clrloop0:	
  5615  1674  0180               	clrf	0	;clear RAM location pointed to by FSR
  5616  1675  3101               	addfsr 0,1
  5617  1676  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  5618  1677  2E74               	goto	clrloop0	;have we reached the end yet?
  5619  1678  3400               	retlw	0	;all done for this memory range, return
  5620                           
  5621                           	psect	cstackBANK3
  5622  01E0                     __pcstackBANK3:	
  5623  01E0                     readGesture@i:	
  5624                           
  5625                           ; 2 bytes @ 0x0
  5626  01E0                     	ds	2
  5627                           
  5628                           	psect	cstackBANK2
  5629  0120                     __pcstackBANK2:	
  5630  0120                     readGesture@fifo_data:	
  5631                           
  5632                           ; 64 bytes @ 0x0
  5633  0120                     	ds	64
  5634                           
  5635                           	psect	cstackBANK1
  5636  00A0                     __pcstackBANK1:	
  5637  00A0                     readGesture@fifo_data2:	
  5638                           
  5639                           ; 64 bytes @ 0x0
  5640  00A0                     	ds	64
  5641                           
  5642                           	psect	cstackCOMMON
  5643  0076                     __pcstackCOMMON:	
  5644  0076                     ?_i2c1_driver_open:	
  5645  0076                     ?_i2c1_driver_isNACK:	
  5646                           ; 1 bit 
  5647                           
  5648  0076                     ?_i2c1_driver_isBufferFull:	
  5649                           ; 1 bit 
  5650                           
  5651  0076                     ?_returnStop:	
  5652                           ; 1 bit 
  5653                           
  5654  0076                     ?_returnReset:	
  5655                           ; 1 bytes @ 0x0
  5656                           
  5657  0076                     ?_mssp1_clearIRQ:	
  5658                           ; 1 bytes @ 0x0
  5659                           
  5660  0076                     ??_mssp1_clearIRQ:	
  5661                           ; 1 bytes @ 0x0
  5662                           
  5663  0076                     ?_i2c_busCollisionISR:	
  5664                           ; 1 bytes @ 0x0
  5665                           
  5666  0076                     ??_i2c_busCollisionISR:	
  5667                           ; 1 bytes @ 0x0
  5668                           
  5669  0076                     ?_i2c_ISR:	
  5670                           ; 1 bytes @ 0x0
  5671                           
  5672  0076                     ?_i2c1_driver_start:	
  5673                           ; 1 bytes @ 0x0
  5674                           
  5675  0076                     ?_i2c1_driver_resetBus:	
  5676                           ; 1 bytes @ 0x0
  5677                           
  5678  0076                     ??_i2c1_driver_resetBus:	
  5679                           ; 1 bytes @ 0x0
  5680                           
  5681  0076                     ?_i2c1_driver_restart:	
  5682                           ; 1 bytes @ 0x0
  5683                           
  5684  0076                     ?_i2c1_driver_stop:	
  5685                           ; 1 bytes @ 0x0
  5686                           
  5687  0076                     ?_i2c1_driver_TXData:	
  5688                           ; 1 bytes @ 0x0
  5689                           
  5690  0076                     ?_i2c1_driver_startRX:	
  5691                           ; 1 bytes @ 0x0
  5692                           
  5693  0076                     ?_i2c1_driver_sendACK:	
  5694                           ; 1 bytes @ 0x0
  5695                           
  5696  0076                     ??_i2c1_driver_sendACK:	
  5697                           ; 1 bytes @ 0x0
  5698                           
  5699  0076                     ?_i2c1_driver_sendNACK:	
  5700                           ; 1 bytes @ 0x0
  5701                           
  5702  0076                     ??_i2c1_driver_isNACK:	
  5703                           ; 1 bytes @ 0x0
  5704                           
  5705  0076                     ?_i2c1_driver_getRXData:	
  5706                           ; 1 bytes @ 0x0
  5707                           
  5708  0076                     ?_mssp1_setIRQ:	
  5709                           ; 1 bytes @ 0x0
  5710                           
  5711  0076                     ??_mssp1_setIRQ:	
  5712                           ; 1 bytes @ 0x0
  5713                           
  5714  0076                     ?_i2c1_driver_clearBusCollision:	
  5715                           ; 1 bytes @ 0x0
  5716                           
  5717  0076                     ??_i2c1_driver_clearBusCollision:	
  5718                           ; 1 bytes @ 0x0
  5719                           
  5720  0076                     ?_PIN_MANAGER_IOC:	
  5721                           ; 1 bytes @ 0x0
  5722                           
  5723  0076                     ??_PIN_MANAGER_IOC:	
  5724                           ; 1 bytes @ 0x0
  5725                           
  5726  0076                     ?_PMD_Initialize:	
  5727                           ; 1 bytes @ 0x0
  5728                           
  5729  0076                     ?_PIN_MANAGER_Initialize:	
  5730                           ; 1 bytes @ 0x0
  5731                           
  5732  0076                     ?_OSCILLATOR_Initialize:	
  5733                           ; 1 bytes @ 0x0
  5734                           
  5735  0076                     ?_WDT_Initialize:	
  5736                           ; 1 bytes @ 0x0
  5737                           
  5738  0076                     ?_SPI2_Initialize:	
  5739                           ; 1 bytes @ 0x0
  5740                           
  5741  0076                     ?_PWM1_Initialize:	
  5742                           ; 1 bytes @ 0x0
  5743                           
  5744  0076                     ?_ADC_Initialize:	
  5745                           ; 1 bytes @ 0x0
  5746                           
  5747  0076                     ?_TMR2_Initialize:	
  5748                           ; 1 bytes @ 0x0
  5749                           
  5750  0076                     ?_EUSART_Initialize:	
  5751                           ; 1 bytes @ 0x0
  5752                           
  5753  0076                     ?_IOCAF4_DefaultInterruptHandler:	
  5754                           ; 1 bytes @ 0x0
  5755                           
  5756  0076                     ??_IOCAF4_DefaultInterruptHandler:	
  5757                           ; 1 bytes @ 0x0
  5758                           
  5759  0076                     ?_IOCAF4_ISR:	
  5760                           ; 1 bytes @ 0x0
  5761                           
  5762  0076                     ??_IOCAF4_ISR:	
  5763                           ; 1 bytes @ 0x0
  5764                           
  5765  0076                     ?_EUSART_Receive_ISR:	
  5766                           ; 1 bytes @ 0x0
  5767                           
  5768  0076                     ?_EUSART_Transmit_ISR:	
  5769                           ; 1 bytes @ 0x0
  5770                           
  5771  0076                     ??_EUSART_Transmit_ISR:	
  5772                           ; 1 bytes @ 0x0
  5773                           
  5774  0076                     ?_EUSART_DefaultFramingErrorHandler:	
  5775                           ; 1 bytes @ 0x0
  5776                           
  5777  0076                     ??_EUSART_DefaultFramingErrorHandler:	
  5778                           ; 1 bytes @ 0x0
  5779                           
  5780  0076                     ?_EUSART_DefaultOverrunErrorHandler:	
  5781                           ; 1 bytes @ 0x0
  5782                           
  5783  0076                     ??_EUSART_DefaultOverrunErrorHandler:	
  5784                           ; 1 bytes @ 0x0
  5785                           
  5786  0076                     ?_EUSART_DefaultErrorHandler:	
  5787                           ; 1 bytes @ 0x0
  5788                           
  5789  0076                     ?_EUSART_RxDataHandler:	
  5790                           ; 1 bytes @ 0x0
  5791                           
  5792  0076                     ??_EUSART_RxDataHandler:	
  5793                           ; 1 bytes @ 0x0
  5794                           
  5795  0076                     ?_Display_Clear:	
  5796                           ; 1 bytes @ 0x0
  5797                           
  5798  0076                     ?_PIR_Sensor:	
  5799                           ; 1 bytes @ 0x0
  5800                           
  5801  0076                     ?_initialize:	
  5802                           ; 1 bytes @ 0x0
  5803                           
  5804  0076                     ?_enableGestureSensor:	
  5805                           ; 1 bytes @ 0x0
  5806                           
  5807  0076                     ?_On_Off:	
  5808                           ; 1 bytes @ 0x0
  5809                           
  5810  0076                     ?_Display_Brightness:	
  5811                           ; 1 bytes @ 0x0
  5812                           
  5813  0076                     ?_UART_Byte:	
  5814                           ; 1 bytes @ 0x0
  5815                           
  5816  0076                     ?_Noise:	
  5817                           ; 1 bytes @ 0x0
  5818                           
  5819  0076                     ?_Get_ADC:	
  5820                           ; 1 bytes @ 0x0
  5821                           
  5822  0076                     ?_isGestureAvailable:	
  5823                           ; 1 bytes @ 0x0
  5824                           
  5825  0076                     ?_handleGesture:	
  5826                           ; 1 bytes @ 0x0
  5827                           
  5828  0076                     ?_wireReadDataByte:	
  5829                           ; 1 bytes @ 0x0
  5830                           
  5831  0076                     ?_setLEDDrive:	
  5832                           ; 1 bytes @ 0x0
  5833                           
  5834  0076                     ?_setProximityGain:	
  5835                           ; 1 bytes @ 0x0
  5836                           
  5837  0076                     ?_setAmbientLightGain:	
  5838                           ; 1 bytes @ 0x0
  5839                           
  5840  0076                     ?_setProxIntLowThresh:	
  5841                           ; 1 bytes @ 0x0
  5842                           
  5843  0076                     ?_setProxIntHighThresh:	
  5844                           ; 1 bytes @ 0x0
  5845                           
  5846  0076                     ?_setGestureEnterThresh:	
  5847                           ; 1 bytes @ 0x0
  5848                           
  5849  0076                     ?_setGestureExitThresh:	
  5850                           ; 1 bytes @ 0x0
  5851                           
  5852  0076                     ?_setGestureGain:	
  5853                           ; 1 bytes @ 0x0
  5854                           
  5855  0076                     ?_setGestureLEDDrive:	
  5856                           ; 1 bytes @ 0x0
  5857                           
  5858  0076                     ?_setGestureWaitTime:	
  5859                           ; 1 bytes @ 0x0
  5860                           
  5861  0076                     ?_setGestureIntEnable:	
  5862                           ; 1 bytes @ 0x0
  5863                           
  5864  0076                     ?_getMode:	
  5865                           ; 1 bytes @ 0x0
  5866                           
  5867  0076                     ?_resetGestureParameters:	
  5868                           ; 1 bytes @ 0x0
  5869                           
  5870  0076                     ?_setLEDBoost:	
  5871                           ; 1 bytes @ 0x0
  5872                           
  5873  0076                     ?_setGestureMode:	
  5874                           ; 1 bytes @ 0x0
  5875                           
  5876  0076                     ?_enablePower:	
  5877                           ; 1 bytes @ 0x0
  5878                           
  5879  0076                     ?_processGestureData:	
  5880                           ; 1 bytes @ 0x0
  5881                           
  5882  0076                     ?_decodeGesture:	
  5883                           ; 1 bytes @ 0x0
  5884                           
  5885  0076                     ?_I2C_Start:	
  5886                           ; 1 bytes @ 0x0
  5887                           
  5888  0076                     ?_I2C_Write_Byte:	
  5889                           ; 1 bytes @ 0x0
  5890                           
  5891  0076                     ?_I2C_ReStart:	
  5892                           ; 1 bytes @ 0x0
  5893                           
  5894  0076                     ?_I2C_Read_Byte:	
  5895                           ; 1 bytes @ 0x0
  5896                           
  5897  0076                     ?_I2C_Send_NACK:	
  5898                           ; 1 bytes @ 0x0
  5899                           
  5900  0076                     ?_I2C_Stop:	
  5901                           ; 1 bytes @ 0x0
  5902                           
  5903  0076                     ?_do_I2C_RESET:	
  5904                           ; 1 bytes @ 0x0
  5905                           
  5906  0076                     ??_do_I2C_RESET:	
  5907                           ; 1 bytes @ 0x0
  5908                           
  5909  0076                     ?_do_I2C_IDLE:	
  5910                           ; 1 bytes @ 0x0
  5911                           
  5912  0076                     ??_do_I2C_IDLE:	
  5913                           ; 1 bytes @ 0x0
  5914                           
  5915  0076                     ?_do_I2C_SEND_RESTART_READ:	
  5916                           ; 1 bytes @ 0x0
  5917                           
  5918  0076                     ??_do_I2C_SEND_RESTART_READ:	
  5919                           ; 1 bytes @ 0x0
  5920                           
  5921  0076                     ?_do_I2C_SEND_RESTART_WRITE:	
  5922                           ; 1 bytes @ 0x0
  5923                           
  5924  0076                     ??_do_I2C_SEND_RESTART_WRITE:	
  5925                           ; 1 bytes @ 0x0
  5926                           
  5927  0076                     ?_do_I2C_SEND_RESTART:	
  5928                           ; 1 bytes @ 0x0
  5929                           
  5930  0076                     ??_do_I2C_SEND_RESTART:	
  5931                           ; 1 bytes @ 0x0
  5932                           
  5933  0076                     ?_do_I2C_SEND_STOP:	
  5934                           ; 1 bytes @ 0x0
  5935                           
  5936  0076                     ??_do_I2C_SEND_STOP:	
  5937                           ; 1 bytes @ 0x0
  5938                           
  5939  0076                     ?_do_I2C_SEND_ADR_READ:	
  5940                           ; 1 bytes @ 0x0
  5941                           
  5942  0076                     ??_do_I2C_SEND_ADR_READ:	
  5943                           ; 1 bytes @ 0x0
  5944                           
  5945  0076                     ?_do_I2C_SEND_ADR_WRITE:	
  5946                           ; 1 bytes @ 0x0
  5947                           
  5948  0076                     ??_do_I2C_SEND_ADR_WRITE:	
  5949                           ; 1 bytes @ 0x0
  5950                           
  5951  0076                     ?_do_I2C_RCEN:	
  5952                           ; 1 bytes @ 0x0
  5953                           
  5954  0076                     ??_do_I2C_RCEN:	
  5955                           ; 1 bytes @ 0x0
  5956                           
  5957  0076                     ?_do_I2C_DO_ACK:	
  5958                           ; 1 bytes @ 0x0
  5959                           
  5960  0076                     ??_do_I2C_DO_ACK:	
  5961                           ; 1 bytes @ 0x0
  5962                           
  5963  0076                     ?_do_I2C_DO_NACK_STOP:	
  5964                           ; 1 bytes @ 0x0
  5965                           
  5966  0076                     ??_do_I2C_DO_NACK_STOP:	
  5967                           ; 1 bytes @ 0x0
  5968                           
  5969  0076                     ?_do_I2C_DO_NACK_RESTART:	
  5970                           ; 1 bytes @ 0x0
  5971                           
  5972  0076                     ??_do_I2C_DO_NACK_RESTART:	
  5973                           ; 1 bytes @ 0x0
  5974                           
  5975  0076                     ?_do_I2C_DO_ADDRESS_NACK:	
  5976                           ; 1 bytes @ 0x0
  5977                           
  5978  0076                     ??_do_I2C_DO_ADDRESS_NACK:	
  5979                           ; 1 bytes @ 0x0
  5980                           
  5981  0076                     ?_do_I2C_TX:	
  5982                           ; 1 bytes @ 0x0
  5983                           
  5984  0076                     ??_do_I2C_TX:	
  5985                           ; 1 bytes @ 0x0
  5986                           
  5987  0076                     ?_do_I2C_RX:	
  5988                           ; 1 bytes @ 0x0
  5989                           
  5990  0076                     ??_do_I2C_RX:	
  5991                           ; 1 bytes @ 0x0
  5992                           
  5993  0076                     ?_do_I2C_TX_EMPTY:	
  5994                           ; 1 bytes @ 0x0
  5995                           
  5996  0076                     ??_do_I2C_TX_EMPTY:	
  5997                           ; 1 bytes @ 0x0
  5998                           
  5999  0076                     ?_INTERRUPT_InterruptManager:	
  6000                           ; 1 bytes @ 0x0
  6001                           
  6002  0076                     ?_SYSTEM_Initialize:	
  6003                           ; 1 bytes @ 0x0
  6004                           
  6005  0076                     ?_SPI2_Exchange8bit:	
  6006                           ; 1 bytes @ 0x0
  6007                           
  6008  0076                     ?_main:	
  6009                           ; 1 bytes @ 0x0
  6010                           
  6011  0076                     ?_SPI_Write:	
  6012                           ; 1 bytes @ 0x0
  6013                           
  6014  0076                     ?i1_i2c1_driver_restart:	
  6015                           ; 1 bytes @ 0x0
  6016                           
  6017  0076                     ??i1_i2c1_driver_restart:	
  6018                           ; 1 bytes @ 0x0
  6019                           
  6020  0076                     ?i1_i2c1_driver_stop:	
  6021                           ; 1 bytes @ 0x0
  6022                           
  6023  0076                     ??i1_i2c1_driver_stop:	
  6024                           ; 1 bytes @ 0x0
  6025                           
  6026  0076                     ?i1_i2c1_driver_startRX:	
  6027                           ; 1 bytes @ 0x0
  6028                           
  6029  0076                     ??i1_i2c1_driver_startRX:	
  6030                           ; 1 bytes @ 0x0
  6031                           
  6032  0076                     ?i1_i2c1_driver_getRXData:	
  6033                           ; 1 bytes @ 0x0
  6034                           
  6035  0076                     ??i1_i2c1_driver_getRXData:	
  6036                           ; 1 bytes @ 0x0
  6037                           
  6038  0076                     ?i1_i2c1_driver_TXData:	
  6039                           ; 1 bytes @ 0x0
  6040                           
  6041  0076                     ??i1_i2c1_driver_TXData:	
  6042                           ; 1 bytes @ 0x0
  6043                           
  6044  0076                     ?i1_i2c1_driver_sendNACK:	
  6045                           ; 1 bytes @ 0x0
  6046                           
  6047  0076                     ??i1_i2c1_driver_sendNACK:	
  6048                           ; 1 bytes @ 0x0
  6049                           
  6050  0076                     returnStop@p:	
  6051                           ; 1 bytes @ 0x0
  6052                           
  6053  0076                     returnReset@p:	
  6054                           ; 1 bytes @ 0x0
  6055                           
  6056  0076                     i1i2c1_driver_TXData@d:	
  6057                           ; 1 bytes @ 0x0
  6058                           
  6059                           
  6060                           ; 1 bytes @ 0x0
  6061  0076                     	ds	1
  6062  0077                     ??_returnStop:	
  6063  0077                     ??_returnReset:	
  6064                           ; 1 bytes @ 0x1
  6065                           
  6066  0077                     ??_EUSART_Receive_ISR:	
  6067                           ; 1 bytes @ 0x1
  6068                           
  6069  0077                     ??_EUSART_DefaultErrorHandler:	
  6070                           ; 1 bytes @ 0x1
  6071                           
  6072                           
  6073                           ; 1 bytes @ 0x1
  6074  0077                     	ds	2
  6075  0079                     ??_i2c_ISR:	
  6076                           
  6077                           ; 1 bytes @ 0x3
  6078  0079                     	ds	3
  6079  007C                     ??_INTERRUPT_InterruptManager:	
  6080                           
  6081                           	psect	cstackBANK0
  6082  0020                     __pcstackBANK0:	
  6083                           ; 1 bytes @ 0x6
  6084                           
  6085  0020                     ??_i2c1_driver_open:	
  6086  0020                     ??_i2c1_driver_start:	
  6087                           ; 1 bytes @ 0x0
  6088                           
  6089  0020                     ??_i2c1_driver_restart:	
  6090                           ; 1 bytes @ 0x0
  6091                           
  6092  0020                     ??_i2c1_driver_stop:	
  6093                           ; 1 bytes @ 0x0
  6094                           
  6095  0020                     ??_i2c1_driver_TXData:	
  6096                           ; 1 bytes @ 0x0
  6097                           
  6098  0020                     ??_i2c1_driver_startRX:	
  6099                           ; 1 bytes @ 0x0
  6100                           
  6101  0020                     ??_i2c1_driver_sendNACK:	
  6102                           ; 1 bytes @ 0x0
  6103                           
  6104  0020                     ??_i2c1_driver_getRXData:	
  6105                           ; 1 bytes @ 0x0
  6106                           
  6107  0020                     ??_PMD_Initialize:	
  6108                           ; 1 bytes @ 0x0
  6109                           
  6110  0020                     ??_OSCILLATOR_Initialize:	
  6111                           ; 1 bytes @ 0x0
  6112                           
  6113  0020                     ??_WDT_Initialize:	
  6114                           ; 1 bytes @ 0x0
  6115                           
  6116  0020                     ??_SPI2_Initialize:	
  6117                           ; 1 bytes @ 0x0
  6118                           
  6119  0020                     ??_PWM1_Initialize:	
  6120                           ; 1 bytes @ 0x0
  6121                           
  6122  0020                     ??_ADC_Initialize:	
  6123                           ; 1 bytes @ 0x0
  6124                           
  6125  0020                     ??_TMR2_Initialize:	
  6126                           ; 1 bytes @ 0x0
  6127                           
  6128  0020                     ?_IOCAF4_SetInterruptHandler:	
  6129                           ; 1 bytes @ 0x0
  6130                           
  6131  0020                     ?_EUSART_SetRxInterruptHandler:	
  6132                           ; 1 bytes @ 0x0
  6133                           
  6134  0020                     ?_EUSART_SetTxInterruptHandler:	
  6135                           ; 1 bytes @ 0x0
  6136                           
  6137  0020                     ?_EUSART_SetFramingErrorHandler:	
  6138                           ; 1 bytes @ 0x0
  6139                           
  6140  0020                     ?_EUSART_SetOverrunErrorHandler:	
  6141                           ; 1 bytes @ 0x0
  6142                           
  6143  0020                     ?_EUSART_SetErrorHandler:	
  6144                           ; 1 bytes @ 0x0
  6145                           
  6146  0020                     ??_PIR_Sensor:	
  6147                           ; 1 bytes @ 0x0
  6148                           
  6149  0020                     ??_resetGestureParameters:	
  6150                           ; 1 bytes @ 0x0
  6151                           
  6152  0020                     ??_decodeGesture:	
  6153                           ; 1 bytes @ 0x0
  6154                           
  6155  0020                     ??_I2C_Start:	
  6156                           ; 1 bytes @ 0x0
  6157                           
  6158  0020                     ??_I2C_ReStart:	
  6159                           ; 1 bytes @ 0x0
  6160                           
  6161  0020                     ??_I2C_Send_NACK:	
  6162                           ; 1 bytes @ 0x0
  6163                           
  6164  0020                     ??_I2C_Stop:	
  6165                           ; 1 bytes @ 0x0
  6166                           
  6167  0020                     ??_i2c1_driver_isBufferFull:	
  6168                           ; 1 bytes @ 0x0
  6169                           
  6170  0020                     ??_SPI2_Exchange8bit:	
  6171                           ; 1 bytes @ 0x0
  6172                           
  6173  0020                     ?_PWM1_LoadDutyValue:	
  6174                           ; 1 bytes @ 0x0
  6175                           
  6176  0020                     ?_strlen:	
  6177                           ; 1 bytes @ 0x0
  6178                           
  6179  0020                     ?_ADC_GetConversion:	
  6180                           ; 2 bytes @ 0x0
  6181                           
  6182  0020                     ?___wmul:	
  6183                           ; 2 bytes @ 0x0
  6184                           
  6185  0020                     i2c1_driver_TXData@d:	
  6186                           ; 2 bytes @ 0x0
  6187                           
  6188  0020                     SPI2_Exchange8bit@data:	
  6189                           ; 1 bytes @ 0x0
  6190                           
  6191  0020                     IOCAF4_SetInterruptHandler@InterruptHandler:	
  6192                           ; 1 bytes @ 0x0
  6193                           
  6194  0020                     PWM1_LoadDutyValue@dutyValue:	
  6195                           ; 2 bytes @ 0x0
  6196                           
  6197  0020                     EUSART_SetFramingErrorHandler@interruptHandler:	
  6198                           ; 2 bytes @ 0x0
  6199                           
  6200  0020                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  6201                           ; 2 bytes @ 0x0
  6202                           
  6203  0020                     EUSART_SetErrorHandler@interruptHandler:	
  6204                           ; 2 bytes @ 0x0
  6205                           
  6206  0020                     EUSART_SetTxInterruptHandler@interruptHandler:	
  6207                           ; 2 bytes @ 0x0
  6208                           
  6209  0020                     EUSART_SetRxInterruptHandler@interruptHandler:	
  6210                           ; 2 bytes @ 0x0
  6211                           
  6212  0020                     ___wmul@multiplier:	
  6213                           ; 2 bytes @ 0x0
  6214                           
  6215  0020                     strlen@s:	
  6216                           ; 2 bytes @ 0x0
  6217                           
  6218                           
  6219                           ; 2 bytes @ 0x0
  6220  0020                     	ds	1
  6221  0021                     ??_I2C_Write_Byte:	
  6222  0021                     ??_I2C_Read_Byte:	
  6223                           ; 1 bytes @ 0x1
  6224                           
  6225  0021                     ??_SPI_Write:	
  6226                           ; 1 bytes @ 0x1
  6227                           
  6228  0021                     SPI_Write@incoming:	
  6229                           ; 1 bytes @ 0x1
  6230                           
  6231                           
  6232                           ; 1 bytes @ 0x1
  6233  0021                     	ds	1
  6234  0022                     ??_PIN_MANAGER_Initialize:	
  6235  0022                     ??_EUSART_Initialize:	
  6236                           ; 1 bytes @ 0x2
  6237                           
  6238  0022                     ??_IOCAF4_SetInterruptHandler:	
  6239                           ; 1 bytes @ 0x2
  6240                           
  6241  0022                     ??_EUSART_SetRxInterruptHandler:	
  6242                           ; 1 bytes @ 0x2
  6243                           
  6244  0022                     ??_EUSART_SetTxInterruptHandler:	
  6245                           ; 1 bytes @ 0x2
  6246                           
  6247  0022                     ??_EUSART_SetFramingErrorHandler:	
  6248                           ; 1 bytes @ 0x2
  6249                           
  6250  0022                     ??_EUSART_SetOverrunErrorHandler:	
  6251                           ; 1 bytes @ 0x2
  6252                           
  6253  0022                     ??_EUSART_SetErrorHandler:	
  6254                           ; 1 bytes @ 0x2
  6255                           
  6256  0022                     ??_Display_Clear:	
  6257                           ; 1 bytes @ 0x2
  6258                           
  6259  0022                     ??_Display_Brightness:	
  6260                           ; 1 bytes @ 0x2
  6261                           
  6262  0022                     ??_Noise:	
  6263                           ; 1 bytes @ 0x2
  6264                           
  6265  0022                     ??_strlen:	
  6266                           ; 1 bytes @ 0x2
  6267                           
  6268  0022                     ??_ADC_GetConversion:	
  6269                           ; 1 bytes @ 0x2
  6270                           
  6271  0022                     ??_PWM1_LoadDutyValue:	
  6272                           ; 1 bytes @ 0x2
  6273                           
  6274  0022                     _decodeGesture$1928:	
  6275                           ; 1 bytes @ 0x2
  6276                           
  6277  0022                     ___wmul@multiplicand:	
  6278                           ; 2 bytes @ 0x2
  6279                           
  6280                           
  6281                           ; 2 bytes @ 0x2
  6282  0022                     	ds	1
  6283  0023                     ??_SYSTEM_Initialize:	
  6284  0023                     ADC_GetConversion@channel:	
  6285                           ; 1 bytes @ 0x3
  6286                           
  6287  0023                     I2C_Write_Byte@Byte:	
  6288                           ; 1 bytes @ 0x3
  6289                           
  6290  0023                     strlen@a:	
  6291                           ; 1 bytes @ 0x3
  6292                           
  6293                           
  6294                           ; 2 bytes @ 0x3
  6295  0023                     	ds	1
  6296  0024                     ??_On_Off:	
  6297  0024                     ??___wmul:	
  6298                           ; 1 bytes @ 0x4
  6299                           
  6300  0024                     _decodeGesture$1929:	
  6301                           ; 1 bytes @ 0x4
  6302                           
  6303  0024                     I2C_Write_Byte@count:	
  6304                           ; 2 bytes @ 0x4
  6305                           
  6306  0024                     ___wmul@product:	
  6307                           ; 2 bytes @ 0x4
  6308                           
  6309                           
  6310                           ; 2 bytes @ 0x4
  6311  0024                     	ds	1
  6312  0025                     ??_UART_Byte:	
  6313  0025                     ?_Display_Name:	
  6314                           ; 1 bytes @ 0x5
  6315                           
  6316  0025                     Display_Name@string1:	
  6317                           ; 1 bytes @ 0x5
  6318                           
  6319                           
  6320                           ; 2 bytes @ 0x5
  6321  0025                     	ds	1
  6322  0026                     ??_wireReadDataByte:	
  6323  0026                     ?_wireWriteDataByte:	
  6324                           ; 1 bytes @ 0x6
  6325                           
  6326  0026                     ?_wireReadDataBlock:	
  6327                           ; 2 bytes @ 0x6
  6328                           
  6329  0026                     ?___awdiv:	
  6330                           ; 2 bytes @ 0x6
  6331                           
  6332  0026                     wireWriteDataByte@val:	
  6333                           ; 2 bytes @ 0x6
  6334                           
  6335  0026                     UART_Byte@tempOn:	
  6336                           ; 1 bytes @ 0x6
  6337                           
  6338  0026                     _decodeGesture$1930:	
  6339                           ; 2 bytes @ 0x6
  6340                           
  6341  0026                     wireReadDataBlock@val:	
  6342                           ; 2 bytes @ 0x6
  6343                           
  6344  0026                     ___awdiv@divisor:	
  6345                           ; 2 bytes @ 0x6
  6346                           
  6347                           
  6348                           ; 2 bytes @ 0x6
  6349  0026                     	ds	1
  6350  0027                     ??_Display_Name:	
  6351  0027                     wireReadDataByte@reg:	
  6352                           ; 1 bytes @ 0x7
  6353                           
  6354  0027                     On_Off@val:	
  6355                           ; 1 bytes @ 0x7
  6356                           
  6357                           
  6358                           ; 2 bytes @ 0x7
  6359  0027                     	ds	1
  6360  0028                     wireReadDataByte@val:	
  6361  0028                     Display_Name@length:	
  6362                           ; 1 bytes @ 0x8
  6363                           
  6364  0028                     UART_Byte@tempProx:	
  6365                           ; 2 bytes @ 0x8
  6366                           
  6367  0028                     _decodeGesture$1931:	
  6368                           ; 2 bytes @ 0x8
  6369                           
  6370  0028                     wireReadDataBlock@len:	
  6371                           ; 2 bytes @ 0x8
  6372                           
  6373  0028                     ___awdiv@dividend:	
  6374                           ; 2 bytes @ 0x8
  6375                           
  6376                           
  6377                           ; 2 bytes @ 0x8
  6378  0028                     	ds	1
  6379  0029                     ??_isGestureAvailable:	
  6380  0029                     ??_wireWriteDataByte:	
  6381                           ; 1 bytes @ 0x9
  6382                           
  6383  0029                     ??_getMode:	
  6384                           ; 1 bytes @ 0x9
  6385                           
  6386  0029                     wireWriteDataByte@reg:	
  6387                           ; 1 bytes @ 0x9
  6388                           
  6389                           
  6390                           ; 1 bytes @ 0x9
  6391  0029                     	ds	1
  6392  002A                     ??_setLEDDrive:	
  6393  002A                     ??_setProximityGain:	
  6394                           ; 1 bytes @ 0xA
  6395                           
  6396  002A                     ??_setAmbientLightGain:	
  6397                           ; 1 bytes @ 0xA
  6398                           
  6399  002A                     ??_setProxIntLowThresh:	
  6400                           ; 1 bytes @ 0xA
  6401                           
  6402  002A                     ??_setProxIntHighThresh:	
  6403                           ; 1 bytes @ 0xA
  6404                           
  6405  002A                     ?_setLightIntLowThreshold:	
  6406                           ; 1 bytes @ 0xA
  6407                           
  6408  002A                     ?_setLightIntHighThreshold:	
  6409                           ; 1 bytes @ 0xA
  6410                           
  6411  002A                     ??_setGestureEnterThresh:	
  6412                           ; 1 bytes @ 0xA
  6413                           
  6414  002A                     ??_setGestureExitThresh:	
  6415                           ; 1 bytes @ 0xA
  6416                           
  6417  002A                     ??_setGestureGain:	
  6418                           ; 1 bytes @ 0xA
  6419                           
  6420  002A                     ??_setGestureLEDDrive:	
  6421                           ; 1 bytes @ 0xA
  6422                           
  6423  002A                     ??_setGestureWaitTime:	
  6424                           ; 1 bytes @ 0xA
  6425                           
  6426  002A                     ??_setGestureIntEnable:	
  6427                           ; 1 bytes @ 0xA
  6428                           
  6429  002A                     ??_setLEDBoost:	
  6430                           ; 1 bytes @ 0xA
  6431                           
  6432  002A                     ??_setGestureMode:	
  6433                           ; 1 bytes @ 0xA
  6434                           
  6435  002A                     ??_wireReadDataBlock:	
  6436                           ; 1 bytes @ 0xA
  6437                           
  6438  002A                     ??___awdiv:	
  6439                           ; 1 bytes @ 0xA
  6440                           
  6441  002A                     getMode@enable_value:	
  6442                           ; 1 bytes @ 0xA
  6443                           
  6444  002A                     isGestureAvailable@val:	
  6445                           ; 1 bytes @ 0xA
  6446                           
  6447  002A                     Display_Name@i:	
  6448                           ; 1 bytes @ 0xA
  6449                           
  6450  002A                     UART_Byte@tempName:	
  6451                           ; 2 bytes @ 0xA
  6452                           
  6453  002A                     setLightIntLowThreshold@threshold:	
  6454                           ; 2 bytes @ 0xA
  6455                           
  6456  002A                     setLightIntHighThreshold@threshold:	
  6457                           ; 2 bytes @ 0xA
  6458                           
  6459  002A                     _decodeGesture$1932:	
  6460                           ; 2 bytes @ 0xA
  6461                           
  6462                           
  6463                           ; 2 bytes @ 0xA
  6464  002A                     	ds	1
  6465  002B                     ?_setMode:	
  6466  002B                     setMode@enable:	
  6467                           ; 1 bytes @ 0xB
  6468                           
  6469  002B                     setAmbientLightGain@drive:	
  6470                           ; 1 bytes @ 0xB
  6471                           
  6472  002B                     setProxIntLowThresh@threshold:	
  6473                           ; 1 bytes @ 0xB
  6474                           
  6475  002B                     setProxIntHighThresh@threshold:	
  6476                           ; 1 bytes @ 0xB
  6477                           
  6478  002B                     setGestureEnterThresh@threshold:	
  6479                           ; 1 bytes @ 0xB
  6480                           
  6481  002B                     setGestureExitThresh@threshold:	
  6482                           ; 1 bytes @ 0xB
  6483                           
  6484  002B                     setGestureWaitTime@time:	
  6485                           ; 1 bytes @ 0xB
  6486                           
  6487  002B                     setGestureIntEnable@val:	
  6488                           ; 1 bytes @ 0xB
  6489                           
  6490  002B                     setGestureMode@mode:	
  6491                           ; 1 bytes @ 0xB
  6492                           
  6493  002B                     ___awdiv@counter:	
  6494                           ; 1 bytes @ 0xB
  6495                           
  6496                           
  6497                           ; 1 bytes @ 0xB
  6498  002B                     	ds	1
  6499  002C                     ??_Get_ADC:	
  6500  002C                     ??_setMode:	
  6501                           ; 1 bytes @ 0xC
  6502                           
  6503  002C                     ??_setLightIntLowThreshold:	
  6504                           ; 1 bytes @ 0xC
  6505                           
  6506  002C                     ??_setLightIntHighThreshold:	
  6507                           ; 1 bytes @ 0xC
  6508                           
  6509  002C                     setLEDDrive@val:	
  6510                           ; 1 bytes @ 0xC
  6511                           
  6512  002C                     setProximityGain@val:	
  6513                           ; 1 bytes @ 0xC
  6514                           
  6515  002C                     setAmbientLightGain@val:	
  6516                           ; 1 bytes @ 0xC
  6517                           
  6518  002C                     setGestureGain@val:	
  6519                           ; 1 bytes @ 0xC
  6520                           
  6521  002C                     setGestureLEDDrive@val:	
  6522                           ; 1 bytes @ 0xC
  6523                           
  6524  002C                     setGestureWaitTime@val:	
  6525                           ; 1 bytes @ 0xC
  6526                           
  6527  002C                     setGestureIntEnable@enable:	
  6528                           ; 1 bytes @ 0xC
  6529                           
  6530  002C                     setLEDBoost@val:	
  6531                           ; 1 bytes @ 0xC
  6532                           
  6533  002C                     setGestureMode@val:	
  6534                           ; 1 bytes @ 0xC
  6535                           
  6536  002C                     ___awdiv@sign:	
  6537                           ; 1 bytes @ 0xC
  6538                           
  6539  002C                     UART_Byte@tempBright:	
  6540                           ; 1 bytes @ 0xC
  6541                           
  6542  002C                     _decodeGesture$1933:	
  6543                           ; 2 bytes @ 0xC
  6544                           
  6545                           
  6546                           ; 2 bytes @ 0xC
  6547  002C                     	ds	1
  6548  002D                     setLEDDrive@drive:	
  6549  002D                     setProximityGain@drive:	
  6550                           ; 1 bytes @ 0xD
  6551                           
  6552  002D                     setLightIntLowThreshold@val_low:	
  6553                           ; 1 bytes @ 0xD
  6554                           
  6555  002D                     setLightIntHighThreshold@val_low:	
  6556                           ; 1 bytes @ 0xD
  6557                           
  6558  002D                     setGestureGain@gain:	
  6559                           ; 1 bytes @ 0xD
  6560                           
  6561  002D                     setGestureLEDDrive@drive:	
  6562                           ; 1 bytes @ 0xD
  6563                           
  6564  002D                     setLEDBoost@boost:	
  6565                           ; 1 bytes @ 0xD
  6566                           
  6567  002D                     ___awdiv@quotient:	
  6568                           ; 1 bytes @ 0xD
  6569                           
  6570                           
  6571                           ; 2 bytes @ 0xD
  6572  002D                     	ds	1
  6573  002E                     setMode@reg_val:	
  6574  002E                     setLightIntLowThreshold@val_high:	
  6575                           ; 1 bytes @ 0xE
  6576                           
  6577  002E                     setLightIntHighThreshold@val_high:	
  6578                           ; 1 bytes @ 0xE
  6579                           
  6580  002E                     _decodeGesture$1934:	
  6581                           ; 1 bytes @ 0xE
  6582                           
  6583  002E                     UART_Byte@bits:	
  6584                           ; 2 bytes @ 0xE
  6585                           
  6586                           
  6587                           ; 5 bytes @ 0xE
  6588  002E                     	ds	1
  6589  002F                     ??_processGestureData:	
  6590  002F                     setMode@mode:	
  6591                           ; 1 bytes @ 0xF
  6592                           
  6593  002F                     wireReadDataBlock@reg:	
  6594                           ; 1 bytes @ 0xF
  6595                           
  6596  002F                     Get_ADC@val:	
  6597                           ; 1 bytes @ 0xF
  6598                           
  6599                           
  6600                           ; 2 bytes @ 0xF
  6601  002F                     	ds	1
  6602  0030                     ??_initialize:	
  6603  0030                     ??_enableGestureSensor:	
  6604                           ; 1 bytes @ 0x10
  6605                           
  6606  0030                     ??_enablePower:	
  6607                           ; 1 bytes @ 0x10
  6608                           
  6609  0030                     wireReadDataBlock@j:	
  6610                           ; 1 bytes @ 0x10
  6611                           
  6612  0030                     _decodeGesture$1935:	
  6613                           ; 1 bytes @ 0x10
  6614                           
  6615                           
  6616                           ; 2 bytes @ 0x10
  6617  0030                     	ds	1
  6618  0031                     initialize@id:	
  6619  0031                     enableGestureSensor@interrupts:	
  6620                           ; 1 bytes @ 0x11
  6621                           
  6622  0031                     processGestureData@ud_ratio_first:	
  6623                           ; 1 bytes @ 0x11
  6624                           
  6625                           
  6626                           ; 2 bytes @ 0x11
  6627  0031                     	ds	2
  6628  0033                     UART_Byte@i:	
  6629  0033                     processGestureData@lr_ratio_first:	
  6630                           ; 2 bytes @ 0x13
  6631                           
  6632                           
  6633                           ; 2 bytes @ 0x13
  6634  0033                     	ds	2
  6635  0035                     processGestureData@ud_ratio_last:	
  6636                           
  6637                           ; 2 bytes @ 0x15
  6638  0035                     	ds	2
  6639  0037                     processGestureData@lr_ratio_last:	
  6640                           
  6641                           ; 2 bytes @ 0x17
  6642  0037                     	ds	2
  6643  0039                     _processGestureData$1923:	
  6644                           
  6645                           ; 2 bytes @ 0x19
  6646  0039                     	ds	2
  6647  003B                     _processGestureData$1924:	
  6648                           
  6649                           ; 2 bytes @ 0x1B
  6650  003B                     	ds	2
  6651  003D                     _processGestureData$1925:	
  6652                           
  6653                           ; 2 bytes @ 0x1D
  6654  003D                     	ds	2
  6655  003F                     _processGestureData$1926:	
  6656                           
  6657                           ; 2 bytes @ 0x1F
  6658  003F                     	ds	2
  6659  0041                     processGestureData@u_last:	
  6660                           
  6661                           ; 1 bytes @ 0x21
  6662  0041                     	ds	1
  6663  0042                     processGestureData@d_last:	
  6664                           
  6665                           ; 1 bytes @ 0x22
  6666  0042                     	ds	1
  6667  0043                     processGestureData@l_last:	
  6668                           
  6669                           ; 1 bytes @ 0x23
  6670  0043                     	ds	1
  6671  0044                     processGestureData@r_last:	
  6672                           
  6673                           ; 1 bytes @ 0x24
  6674  0044                     	ds	1
  6675  0045                     processGestureData@u_first:	
  6676                           
  6677                           ; 1 bytes @ 0x25
  6678  0045                     	ds	1
  6679  0046                     processGestureData@d_first:	
  6680                           
  6681                           ; 1 bytes @ 0x26
  6682  0046                     	ds	1
  6683  0047                     processGestureData@l_first:	
  6684                           
  6685                           ; 1 bytes @ 0x27
  6686  0047                     	ds	1
  6687  0048                     processGestureData@r_first:	
  6688                           
  6689                           ; 1 bytes @ 0x28
  6690  0048                     	ds	1
  6691  0049                     processGestureData@ud_delta:	
  6692                           
  6693                           ; 2 bytes @ 0x29
  6694  0049                     	ds	2
  6695  004B                     processGestureData@lr_delta:	
  6696                           
  6697                           ; 2 bytes @ 0x2B
  6698  004B                     	ds	2
  6699  004D                     processGestureData@i:	
  6700                           
  6701                           ; 2 bytes @ 0x2D
  6702  004D                     	ds	2
  6703  004F                     ?_readGesture:	
  6704                           
  6705                           ; 2 bytes @ 0x2F
  6706  004F                     	ds	2
  6707  0051                     ??_readGesture:	
  6708                           
  6709                           ; 1 bytes @ 0x31
  6710  0051                     	ds	2
  6711  0053                     readGesture@motion:	
  6712                           
  6713                           ; 2 bytes @ 0x33
  6714  0053                     	ds	2
  6715  0055                     readGesture@gstatus:	
  6716                           
  6717                           ; 1 bytes @ 0x35
  6718  0055                     	ds	1
  6719  0056                     readGesture@bytes_read:	
  6720                           
  6721                           ; 2 bytes @ 0x36
  6722  0056                     	ds	2
  6723  0058                     readGesture@fifo_level:	
  6724                           
  6725                           ; 1 bytes @ 0x38
  6726  0058                     	ds	1
  6727  0059                     ??_handleGesture:	
  6728                           
  6729                           ; 1 bytes @ 0x39
  6730  0059                     	ds	1
  6731  005A                     ??_main:	
  6732                           
  6733                           	psect	maintext
  6734  0DF9                     __pmaintext:	
  6735                           ; 1 bytes @ 0x3A
  6736 ;;
  6737 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  6738 ;;
  6739 ;; *************** function _main *****************
  6740 ;; Defined at:
  6741 ;;		line 97 in file "main.c"
  6742 ;; Parameters:    Size  Location     Type
  6743 ;;		None
  6744 ;; Auto vars:     Size  Location     Type
  6745 ;;		None
  6746 ;; Return value:  Size  Location     Type
  6747 ;;                  1    wreg      void 
  6748 ;; Registers used:
  6749 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6750 ;; Tracked objects:
  6751 ;;		On entry : B1F/0
  6752 ;;		On exit  : 0/0
  6753 ;;		Unchanged: 0/0
  6754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6756 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6757 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6758 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6759 ;;Total ram usage:        0 bytes
  6760 ;; Hardware stack levels required when called:   12
  6761 ;; This function calls:
  6762 ;;		_Display_Brightness
  6763 ;;		_Display_Clear
  6764 ;;		_Display_Name
  6765 ;;		_Get_ADC
  6766 ;;		_Noise
  6767 ;;		_On_Off
  6768 ;;		_PIR_Sensor
  6769 ;;		_SYSTEM_Initialize
  6770 ;;		_UART_Byte
  6771 ;;		_enableGestureSensor
  6772 ;;		_handleGesture
  6773 ;;		_initialize
  6774 ;;		_isGestureAvailable
  6775 ;; This function is called by:
  6776 ;;		Startup code after reset
  6777 ;; This function uses a non-reentrant model
  6778 ;;
  6779                           
  6780                           
  6781                           ;psect for function _main
  6782  0DF9                     _main:	
  6783                           
  6784                           ;main.c: 100:     SYSTEM_Initialize();
  6785                           
  6786                           ;incstack = 0
  6787                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6788  0DF9  3188  206E  318D   	fcall	_SYSTEM_Initialize
  6789                           
  6790                           ;main.c: 112:     Display_Clear();
  6791  0DFC  3197  2724  318D   	fcall	_Display_Clear
  6792  0DFF                     l7782:	
  6793                           ;main.c: 113:     while(!PIR_Sensor());
  6794                           
  6795  0DFF  3197  2766  318D   	fcall	_PIR_Sensor
  6796  0E02  3A00               	xorlw	0
  6797  0E03  1903               	skipnz
  6798  0E04  2DFF               	goto	l7782
  6799                           
  6800                           ;main.c: 114:     initialize();
  6801  0E05  3185  2505  318D   	fcall	_initialize
  6802                           
  6803                           ;main.c: 115:     enableGestureSensor(0);
  6804  0E08  3000               	movlw	0
  6805  0E09  318E  264A  318D   	fcall	_enableGestureSensor
  6806  0E0C  0022               	movlb	2	; select bank2
  6807  0E0D  150C               	bsf	12,2	;volatile
  6808  0E0E                     l958:	
  6809                           ;main.c: 118:     while (1) {
  6810                           
  6811                           
  6812                           ;main.c: 119:         On_Off();
  6813  0E0E  318C  24C7  318D   	fcall	_On_Off
  6814                           
  6815                           ;main.c: 120:         Display_Brightness();
  6816  0E11  3197  27D4  318D   	fcall	_Display_Brightness
  6817                           
  6818                           ;main.c: 121:         UART_Byte();
  6819  0E14  318E  26A6  318D   	fcall	_UART_Byte
  6820                           
  6821                           ;main.c: 122:         if(on) {
  6822  0E17  0020               	movlb	0	; select bank0
  6823  0E18  086A               	movf	_on,w
  6824  0E19  046B               	iorwf	_on+1,w
  6825  0E1A  1903               	btfsc	3,2
  6826  0E1B  2E0E               	goto	l958
  6827                           
  6828                           ;main.c: 123:             if(PIR_Sensor()) {
  6829  0E1C  3197  2766  318D   	fcall	_PIR_Sensor
  6830  0E1F  3A00               	xorlw	0
  6831  0E20  1903               	skipnz
  6832  0E21  2E0E               	goto	l958
  6833                           
  6834                           ;main.c: 124:                 if(start == 1) {
  6835  0E22  0020               	movlb	0	; select bank0
  6836  0E23  036E               	decf	_start,w
  6837  0E24  1D03               	btfss	3,2
  6838  0E25  2E38               	goto	l7802
  6839                           
  6840                           ;main.c: 125:                     Noise();
  6841  0E26  3188  2028  318D   	fcall	_Noise
  6842                           
  6843                           ;main.c: 126:                     Display_Name(names[name]);
  6844  0E29  0020               	movlb	0	; select bank0
  6845  0E2A  355A               	lslf	_name,w
  6846  0E2B  3ED2               	addlw	(low (_names| (0+256)))& (0+255)
  6847  0E2C  0086               	movwf	6
  6848  0E2D  3001               	movlw	1	; select bank3/4
  6849  0E2E  0087               	movwf	7
  6850  0E2F  3F40               	moviw [0]fsr1
  6851  0E30  00A5               	movwf	Display_Name@string1
  6852  0E31  3F41               	moviw [1]fsr1
  6853  0E32  00A6               	movwf	Display_Name@string1+1
  6854  0E33  318B  23BE  318D   	fcall	_Display_Name
  6855                           
  6856                           ;main.c: 127:                     start = 0;
  6857  0E36  0020               	movlb	0	; select bank0
  6858  0E37  01EE               	clrf	_start
  6859  0E38                     l7802:	
  6860                           
  6861                           ;main.c: 129:                 Get_ADC();
  6862  0E38  3186  2614  318D   	fcall	_Get_ADC
  6863                           
  6864                           ;main.c: 131:                 if(toggle) {
  6865  0E3B  0022               	movlb	2	; select bank2
  6866  0E3C  086E               	movf	_toggle^(0+256),w
  6867  0E3D  046F               	iorwf	(_toggle+1)^(0+256),w
  6868  0E3E  1903               	btfsc	3,2
  6869  0E3F  2E0E               	goto	l958
  6870                           
  6871                           ;main.c: 132:                     if( isGestureAvailable()){
  6872  0E40  3197  2775  318D   	fcall	_isGestureAvailable
  6873  0E43  3A00               	xorlw	0
  6874  0E44  1903               	skipnz
  6875  0E45  2E0E               	goto	l958
  6876                           
  6877                           ;main.c: 133:                         handleGesture();
  6878  0E46  3187  2719  318D   	fcall	_handleGesture
  6879  0E49  2E0E               	goto	l958
  6880  0E4A                     __end_of_main:	
  6881                           
  6882                           	psect	text1
  6883  0505                     __ptext1:	
  6884 ;; *************** function _initialize *****************
  6885 ;; Defined at:
  6886 ;;		line 20 in file "APDS9960.c"
  6887 ;; Parameters:    Size  Location     Type
  6888 ;;		None
  6889 ;; Auto vars:     Size  Location     Type
  6890 ;;  id              1   17[BANK0 ] unsigned char 
  6891 ;; Return value:  Size  Location     Type
  6892 ;;                  1    wreg      _Bool 
  6893 ;; Registers used:
  6894 ;;		wreg, status,2, status,0, pclath, cstack
  6895 ;; Tracked objects:
  6896 ;;		On entry : 0/0
  6897 ;;		On exit  : 0/0
  6898 ;;		Unchanged: 0/0
  6899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6901 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6902 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6903 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6904 ;;Total ram usage:        2 bytes
  6905 ;; Hardware stack levels used:    1
  6906 ;; Hardware stack levels required when called:   10
  6907 ;; This function calls:
  6908 ;;		_i2c1_driver_open
  6909 ;;		_setAmbientLightGain
  6910 ;;		_setGestureEnterThresh
  6911 ;;		_setGestureExitThresh
  6912 ;;		_setGestureGain
  6913 ;;		_setGestureIntEnable
  6914 ;;		_setGestureLEDDrive
  6915 ;;		_setGestureWaitTime
  6916 ;;		_setLEDDrive
  6917 ;;		_setLightIntHighThreshold
  6918 ;;		_setLightIntLowThreshold
  6919 ;;		_setMode
  6920 ;;		_setProxIntHighThresh
  6921 ;;		_setProxIntLowThresh
  6922 ;;		_setProximityGain
  6923 ;;		_wireReadDataByte
  6924 ;;		_wireWriteDataByte
  6925 ;; This function is called by:
  6926 ;;		_main
  6927 ;; This function uses a non-reentrant model
  6928 ;;
  6929                           
  6930                           
  6931                           ;psect for function _initialize
  6932  0505                     _initialize:	
  6933                           
  6934                           ;APDS9960.c: 25:     i2c1_driver_open();
  6935                           
  6936                           ;incstack = 0
  6937                           ; Regs used in _initialize: [wreg+status,2+status,0+pclath+cstack]
  6938  0505  3197  270F  3185   	fcall	_i2c1_driver_open
  6939                           
  6940                           ;APDS9960.c: 31:     id = wireReadDataByte(0x92);
  6941  0508  3092               	movlw	146
  6942  0509  3189  2135  3185   	fcall	_wireReadDataByte
  6943  050C  0020               	movlb	0	; select bank0
  6944  050D  00B0               	movwf	??_initialize
  6945  050E  0830               	movf	??_initialize,w
  6946  050F  00B1               	movwf	initialize@id
  6947                           
  6948                           ;APDS9960.c: 33:     if( !(id == 0xAB ||id == 0x9C ) )
  6949  0510  30AB               	movlw	171
  6950  0511  0631               	xorwf	initialize@id,w
  6951  0512  1903               	btfsc	3,2
  6952  0513  2D18               	goto	l7392
  6953  0514  309C               	movlw	156
  6954  0515  0631               	xorwf	initialize@id,w
  6955  0516  1D03               	btfss	3,2
  6956  0517  0008               	return
  6957  0518                     l7392:	
  6958                           
  6959                           ;APDS9960.c: 39:     setMode(7, 0);
  6960  0518  01AB               	clrf	setMode@enable
  6961  0519  3007               	movlw	7
  6962  051A  318D  25AA  3185   	fcall	_setMode
  6963                           
  6964                           ;APDS9960.c: 41:     wireWriteDataByte(0x81, 219);
  6965  051D  30DB               	movlw	219
  6966  051E  0020               	movlb	0	; select bank0
  6967  051F  00B0               	movwf	??_initialize
  6968  0520  0830               	movf	??_initialize,w
  6969  0521  00A6               	movwf	wireWriteDataByte@val
  6970  0522  3081               	movlw	129
  6971  0523  3188  2089  3185   	fcall	_wireWriteDataByte
  6972                           
  6973                           ;APDS9960.c: 42:     wireWriteDataByte(0x83, 246);
  6974  0526  30F6               	movlw	246
  6975  0527  0020               	movlb	0	; select bank0
  6976  0528  00B0               	movwf	??_initialize
  6977  0529  0830               	movf	??_initialize,w
  6978  052A  00A6               	movwf	wireWriteDataByte@val
  6979  052B  3083               	movlw	131
  6980  052C  3188  2089  3185   	fcall	_wireWriteDataByte
  6981                           
  6982                           ;APDS9960.c: 43:     wireWriteDataByte(0x8E, 0x87);
  6983  052F  3087               	movlw	135
  6984  0530  0020               	movlb	0	; select bank0
  6985  0531  00B0               	movwf	??_initialize
  6986  0532  0830               	movf	??_initialize,w
  6987  0533  00A6               	movwf	wireWriteDataByte@val
  6988  0534  308E               	movlw	142
  6989  0535  3188  2089  3185   	fcall	_wireWriteDataByte
  6990                           
  6991                           ;APDS9960.c: 44:     wireWriteDataByte(0x9D, 0) ;
  6992  0538  0020               	movlb	0	; select bank0
  6993  0539  01A6               	clrf	wireWriteDataByte@val
  6994  053A  309D               	movlw	157
  6995  053B  3188  2089  3185   	fcall	_wireWriteDataByte
  6996                           
  6997                           ;APDS9960.c: 45:     wireWriteDataByte(0x9E, 0) ;
  6998  053E  0020               	movlb	0	; select bank0
  6999  053F  01A6               	clrf	wireWriteDataByte@val
  7000  0540  309E               	movlw	158
  7001  0541  3188  2089  3185   	fcall	_wireWriteDataByte
  7002                           
  7003                           ;APDS9960.c: 46:     wireWriteDataByte(0x8D, 0x60) ;
  7004  0544  3060               	movlw	96
  7005  0545  0020               	movlb	0	; select bank0
  7006  0546  00B0               	movwf	??_initialize
  7007  0547  0830               	movf	??_initialize,w
  7008  0548  00A6               	movwf	wireWriteDataByte@val
  7009  0549  308D               	movlw	141
  7010  054A  3188  2089  3185   	fcall	_wireWriteDataByte
  7011                           
  7012                           ;APDS9960.c: 47:     setLEDDrive(0);
  7013  054D  3000               	movlw	0
  7014  054E  318A  221B  3185   	fcall	_setLEDDrive
  7015                           
  7016                           ;APDS9960.c: 48:     setProximityGain(2);
  7017  0551  3002               	movlw	2
  7018  0552  318A  2244  3185   	fcall	_setProximityGain
  7019                           
  7020                           ;APDS9960.c: 49:     setAmbientLightGain(1);
  7021  0555  3001               	movlw	1
  7022  0556  3189  2117  3185   	fcall	_setAmbientLightGain
  7023                           
  7024                           ;APDS9960.c: 51:     if( !setProxIntLowThresh(0) ) {
  7025  0559  3000               	movlw	0
  7026  055A  3197  27C1  3185   	fcall	_setProxIntLowThresh
  7027  055D  3A00               	xorlw	0
  7028  055E  1903               	btfsc	3,2
  7029  055F  0008               	return
  7030                           
  7031                           ;APDS9960.c: 54:     if( !setProxIntHighThresh(50) ) {
  7032  0560  3032               	movlw	50
  7033  0561  3197  27AE  3185   	fcall	_setProxIntHighThresh
  7034  0564  3A00               	xorlw	0
  7035  0565  1903               	btfsc	3,2
  7036  0566  0008               	return
  7037                           
  7038                           ;APDS9960.c: 59:     if( !setLightIntLowThreshold(0xFFFF) ) {
  7039  0567  30FF               	movlw	255
  7040  0568  0020               	movlb	0	; select bank0
  7041  0569  00AA               	movwf	setLightIntLowThreshold@threshold
  7042  056A  30FF               	movlw	255
  7043  056B  00AB               	movwf	setLightIntLowThreshold@threshold+1
  7044  056C  3189  21F4  3185   	fcall	_setLightIntLowThreshold
  7045  056F  3A00               	xorlw	0
  7046  0570  1903               	btfsc	3,2
  7047  0571  0008               	return
  7048                           
  7049                           ;APDS9960.c: 62:     if( !setLightIntHighThreshold(0) ) {
  7050  0572  3000               	movlw	0
  7051  0573  0020               	movlb	0	; select bank0
  7052  0574  00AA               	movwf	setLightIntHighThreshold@threshold
  7053  0575  00AB               	movwf	setLightIntHighThreshold@threshold+1
  7054  0576  3189  21CD  3185   	fcall	_setLightIntHighThreshold
  7055  0579  3A00               	xorlw	0
  7056  057A  1903               	btfsc	3,2
  7057  057B  0008               	return
  7058                           
  7059                           ;APDS9960.c: 66:     if( !wireWriteDataByte(0x8C, 0x11) ) {
  7060  057C  3011               	movlw	17
  7061  057D  0020               	movlb	0	; select bank0
  7062  057E  00B0               	movwf	??_initialize
  7063  057F  0830               	movf	??_initialize,w
  7064  0580  00A6               	movwf	wireWriteDataByte@val
  7065  0581  308C               	movlw	140
  7066  0582  3188  2089  3185   	fcall	_wireWriteDataByte
  7067  0585  0020               	movlb	0	; select bank0
  7068  0586  0826               	movf	?_wireWriteDataByte,w
  7069  0587  0427               	iorwf	?_wireWriteDataByte+1,w
  7070  0588  1903               	btfsc	3,2
  7071  0589  0008               	return
  7072                           
  7073                           ;APDS9960.c: 71:     if( !wireWriteDataByte(0x90, 0x01) ) {
  7074  058A  01A6               	clrf	wireWriteDataByte@val
  7075  058B  0AA6               	incf	wireWriteDataByte@val,f
  7076  058C  3090               	movlw	144
  7077  058D  3188  2089  3185   	fcall	_wireWriteDataByte
  7078  0590  0020               	movlb	0	; select bank0
  7079  0591  0826               	movf	?_wireWriteDataByte,w
  7080  0592  0427               	iorwf	?_wireWriteDataByte+1,w
  7081  0593  1903               	btfsc	3,2
  7082  0594  0008               	return
  7083                           
  7084                           ;APDS9960.c: 74:     if( !wireWriteDataByte(0x9F, 0) ) {
  7085  0595  01A6               	clrf	wireWriteDataByte@val
  7086  0596  309F               	movlw	159
  7087  0597  3188  2089  3185   	fcall	_wireWriteDataByte
  7088  059A  0020               	movlb	0	; select bank0
  7089  059B  0826               	movf	?_wireWriteDataByte,w
  7090  059C  0427               	iorwf	?_wireWriteDataByte+1,w
  7091  059D  1903               	btfsc	3,2
  7092  059E  0008               	return
  7093                           
  7094                           ;APDS9960.c: 78:     if( !setGestureEnterThresh(40) ) {
  7095  059F  3028               	movlw	40
  7096  05A0  3197  2788  3185   	fcall	_setGestureEnterThresh
  7097  05A3  3A00               	xorlw	0
  7098  05A4  1903               	btfsc	3,2
  7099  05A5  0008               	return
  7100                           
  7101                           ;APDS9960.c: 82:     if( !setGestureExitThresh(30) ) {
  7102  05A6  301E               	movlw	30
  7103  05A7  3197  279B  3185   	fcall	_setGestureExitThresh
  7104  05AA  3A00               	xorlw	0
  7105  05AB  1903               	btfsc	3,2
  7106  05AC  0008               	return
  7107                           
  7108                           ;APDS9960.c: 85:     if( !wireWriteDataByte(0xA2, 0x40) ) {
  7109  05AD  3040               	movlw	64
  7110  05AE  0020               	movlb	0	; select bank0
  7111  05AF  00B0               	movwf	??_initialize
  7112  05B0  0830               	movf	??_initialize,w
  7113  05B1  00A6               	movwf	wireWriteDataByte@val
  7114  05B2  30A2               	movlw	162
  7115  05B3  3188  2089  3185   	fcall	_wireWriteDataByte
  7116  05B6  0020               	movlb	0	; select bank0
  7117  05B7  0826               	movf	?_wireWriteDataByte,w
  7118  05B8  0427               	iorwf	?_wireWriteDataByte+1,w
  7119  05B9  1903               	btfsc	3,2
  7120  05BA  0008               	return
  7121                           
  7122                           ;APDS9960.c: 88:     if( !setGestureGain(2) ) {
  7123  05BB  3002               	movlw	2
  7124  05BC  318B  2326  3185   	fcall	_setGestureGain
  7125  05BF  3A00               	xorlw	0
  7126  05C0  1903               	btfsc	3,2
  7127  05C1  0008               	return
  7128                           
  7129                           ;APDS9960.c: 91:     if( !setGestureLEDDrive(0) ) {
  7130  05C2  3000               	movlw	0
  7131  05C3  318B  2358  3185   	fcall	_setGestureLEDDrive
  7132  05C6  3A00               	xorlw	0
  7133  05C7  1903               	btfsc	3,2
  7134  05C8  0008               	return
  7135                           
  7136                           ;APDS9960.c: 95:     if( !setGestureWaitTime(1) ) {
  7137  05C9  3001               	movlw	1
  7138  05CA  3189  21A6  3185   	fcall	_setGestureWaitTime
  7139  05CD  3A00               	xorlw	0
  7140  05CE  1903               	btfsc	3,2
  7141  05CF  0008               	return
  7142                           
  7143                           ;APDS9960.c: 98:     if( !wireWriteDataByte(0xA4, 0) ) {
  7144  05D0  0020               	movlb	0	; select bank0
  7145  05D1  01A6               	clrf	wireWriteDataByte@val
  7146  05D2  30A4               	movlw	164
  7147  05D3  3188  2089  3185   	fcall	_wireWriteDataByte
  7148  05D6  0020               	movlb	0	; select bank0
  7149  05D7  0826               	movf	?_wireWriteDataByte,w
  7150  05D8  0427               	iorwf	?_wireWriteDataByte+1,w
  7151  05D9  1903               	btfsc	3,2
  7152  05DA  0008               	return
  7153                           
  7154                           ;APDS9960.c: 101:     if( !wireWriteDataByte(0xA5, 0) ) {
  7155  05DB  01A6               	clrf	wireWriteDataByte@val
  7156  05DC  30A5               	movlw	165
  7157  05DD  3188  2089  3185   	fcall	_wireWriteDataByte
  7158  05E0  0020               	movlb	0	; select bank0
  7159  05E1  0826               	movf	?_wireWriteDataByte,w
  7160  05E2  0427               	iorwf	?_wireWriteDataByte+1,w
  7161  05E3  1903               	btfsc	3,2
  7162  05E4  0008               	return
  7163                           
  7164                           ;APDS9960.c: 104:     if( !wireWriteDataByte(0xA7, 0) ) {
  7165  05E5  01A6               	clrf	wireWriteDataByte@val
  7166  05E6  30A7               	movlw	167
  7167  05E7  3188  2089  3185   	fcall	_wireWriteDataByte
  7168  05EA  0020               	movlb	0	; select bank0
  7169  05EB  0826               	movf	?_wireWriteDataByte,w
  7170  05EC  0427               	iorwf	?_wireWriteDataByte+1,w
  7171  05ED  1903               	btfsc	3,2
  7172  05EE  0008               	return
  7173                           
  7174                           ;APDS9960.c: 107:     if( !wireWriteDataByte(0xA9, 0) ) {
  7175  05EF  01A6               	clrf	wireWriteDataByte@val
  7176  05F0  30A9               	movlw	169
  7177  05F1  3188  2089  3185   	fcall	_wireWriteDataByte
  7178  05F4  0020               	movlb	0	; select bank0
  7179  05F5  0826               	movf	?_wireWriteDataByte,w
  7180  05F6  0427               	iorwf	?_wireWriteDataByte+1,w
  7181  05F7  1903               	btfsc	3,2
  7182  05F8  0008               	return
  7183                           
  7184                           ;APDS9960.c: 110:     if( !wireWriteDataByte(0xA6, 0xC9) ) {
  7185  05F9  30C9               	movlw	201
  7186  05FA  00B0               	movwf	??_initialize
  7187  05FB  0830               	movf	??_initialize,w
  7188  05FC  00A6               	movwf	wireWriteDataByte@val
  7189  05FD  30A6               	movlw	166
  7190  05FE  3188  2089  3185   	fcall	_wireWriteDataByte
  7191  0601  0020               	movlb	0	; select bank0
  7192  0602  0826               	movf	?_wireWriteDataByte,w
  7193  0603  0427               	iorwf	?_wireWriteDataByte+1,w
  7194  0604  1903               	btfsc	3,2
  7195  0605  0008               	return
  7196                           
  7197                           ;APDS9960.c: 113:     if( !wireWriteDataByte(0xAA, 0) ) {
  7198  0606  01A6               	clrf	wireWriteDataByte@val
  7199  0607  30AA               	movlw	170
  7200  0608  3188  2089  3185   	fcall	_wireWriteDataByte
  7201  060B  0020               	movlb	0	; select bank0
  7202  060C  0826               	movf	?_wireWriteDataByte,w
  7203  060D  0427               	iorwf	?_wireWriteDataByte+1,w
  7204  060E  1903               	btfsc	3,2
  7205  060F  0008               	return
  7206                           
  7207                           ;APDS9960.c: 116:     if( !setGestureIntEnable(0) ) {
  7208  0610  3000               	movlw	0
  7209  0611  318A  2298         	fcall	_setGestureIntEnable
  7210  0613  0008               	return
  7211  0614                     __end_of_initialize:	
  7212                           
  7213                           	psect	text2
  7214  0A44                     __ptext2:	
  7215 ;; *************** function _setProximityGain *****************
  7216 ;; Defined at:
  7217 ;;		line 192 in file "APDS9960.c"
  7218 ;; Parameters:    Size  Location     Type
  7219 ;;  drive           1    wreg     unsigned char 
  7220 ;; Auto vars:     Size  Location     Type
  7221 ;;  drive           1   13[BANK0 ] unsigned char 
  7222 ;;  val             1   12[BANK0 ] unsigned char 
  7223 ;; Return value:  Size  Location     Type
  7224 ;;                  1    wreg      _Bool 
  7225 ;; Registers used:
  7226 ;;		wreg, status,2, status,0, pclath, cstack
  7227 ;; Tracked objects:
  7228 ;;		On entry : 0/0
  7229 ;;		On exit  : 0/0
  7230 ;;		Unchanged: 0/0
  7231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7232 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7233 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7234 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7235 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7236 ;;Total ram usage:        4 bytes
  7237 ;; Hardware stack levels used:    1
  7238 ;; Hardware stack levels required when called:    8
  7239 ;; This function calls:
  7240 ;;		_wireReadDataByte
  7241 ;;		_wireWriteDataByte
  7242 ;; This function is called by:
  7243 ;;		_initialize
  7244 ;; This function uses a non-reentrant model
  7245 ;;
  7246                           
  7247                           
  7248                           ;psect for function _setProximityGain
  7249  0A44                     _setProximityGain:	
  7250                           
  7251                           ;incstack = 0
  7252                           ; Regs used in _setProximityGain: [wreg+status,2+status,0+pclath+cstack]
  7253                           ;setProximityGain@drive stored from wreg
  7254  0A44  0020               	movlb	0	; select bank0
  7255  0A45  00AD               	movwf	setProximityGain@drive
  7256                           
  7257                           ;APDS9960.c: 192: _Bool setProximityGain(uint8_t drive);APDS9960.c: 193: {;APDS9960.c: 1
      +                          94:     uint8_t val;;APDS9960.c: 197:     val=wireReadDataByte(0x8F);
  7258  0A46  308F               	movlw	143
  7259  0A47  3189  2135  318A   	fcall	_wireReadDataByte
  7260  0A4A  0020               	movlb	0	; select bank0
  7261  0A4B  00AA               	movwf	??_setProximityGain
  7262  0A4C  082A               	movf	??_setProximityGain,w
  7263  0A4D  00AC               	movwf	setProximityGain@val
  7264                           
  7265                           ;APDS9960.c: 199:     drive &= 0b00000011;
  7266  0A4E  3003               	movlw	3
  7267  0A4F  00AA               	movwf	??_setProximityGain
  7268  0A50  082A               	movf	??_setProximityGain,w
  7269  0A51  05AD               	andwf	setProximityGain@drive,f
  7270                           
  7271                           ;APDS9960.c: 200:     drive = drive << 2;
  7272  0A52  082D               	movf	setProximityGain@drive,w
  7273  0A53  00AA               	movwf	??_setProximityGain
  7274  0A54  3001               	movlw	1
  7275  0A55                     u6155:	
  7276  0A55  35AA               	lslf	??_setProximityGain,f
  7277  0A56  3EFF               	addlw	-1
  7278  0A57  1D03               	skipz
  7279  0A58  2A55               	goto	u6155
  7280  0A59  352A               	lslf	??_setProximityGain,w
  7281  0A5A  00AB               	movwf	??_setProximityGain+1
  7282  0A5B  082B               	movf	??_setProximityGain+1,w
  7283  0A5C  00AD               	movwf	setProximityGain@drive
  7284                           
  7285                           ;APDS9960.c: 201:     val &= 0b11110011;
  7286  0A5D  30F3               	movlw	243
  7287  0A5E  00AA               	movwf	??_setProximityGain
  7288  0A5F  082A               	movf	??_setProximityGain,w
  7289  0A60  05AC               	andwf	setProximityGain@val,f
  7290                           
  7291                           ;APDS9960.c: 202:     val |= drive;
  7292  0A61  082D               	movf	setProximityGain@drive,w
  7293  0A62  00AA               	movwf	??_setProximityGain
  7294  0A63  082A               	movf	??_setProximityGain,w
  7295  0A64  04AC               	iorwf	setProximityGain@val,f
  7296                           
  7297                           ;APDS9960.c: 205:     if( !wireWriteDataByte(0x8F, val) ) {
  7298  0A65  082C               	movf	setProximityGain@val,w
  7299  0A66  00AA               	movwf	??_setProximityGain
  7300  0A67  082A               	movf	??_setProximityGain,w
  7301  0A68  00A6               	movwf	wireWriteDataByte@val
  7302  0A69  308F               	movlw	143
  7303  0A6A  3188  2089         	fcall	_wireWriteDataByte
  7304  0A6C  0008               	return
  7305  0A6D                     __end_of_setProximityGain:	
  7306                           
  7307                           	psect	text3
  7308  17C1                     __ptext3:	
  7309 ;; *************** function _setProxIntLowThresh *****************
  7310 ;; Defined at:
  7311 ;;		line 234 in file "APDS9960.c"
  7312 ;; Parameters:    Size  Location     Type
  7313 ;;  threshold       1    wreg     unsigned char 
  7314 ;; Auto vars:     Size  Location     Type
  7315 ;;  threshold       1   11[BANK0 ] unsigned char 
  7316 ;; Return value:  Size  Location     Type
  7317 ;;                  1    wreg      _Bool 
  7318 ;; Registers used:
  7319 ;;		wreg, status,2, status,0, pclath, cstack
  7320 ;; Tracked objects:
  7321 ;;		On entry : 0/0
  7322 ;;		On exit  : 0/0
  7323 ;;		Unchanged: 0/0
  7324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7325 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7326 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7327 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7328 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7329 ;;Total ram usage:        2 bytes
  7330 ;; Hardware stack levels used:    1
  7331 ;; Hardware stack levels required when called:    8
  7332 ;; This function calls:
  7333 ;;		_wireWriteDataByte
  7334 ;; This function is called by:
  7335 ;;		_initialize
  7336 ;; This function uses a non-reentrant model
  7337 ;;
  7338                           
  7339                           
  7340                           ;psect for function _setProxIntLowThresh
  7341  17C1                     _setProxIntLowThresh:	
  7342                           
  7343                           ;incstack = 0
  7344                           ; Regs used in _setProxIntLowThresh: [wreg+status,2+status,0+pclath+cstack]
  7345                           ;setProxIntLowThresh@threshold stored from wreg
  7346  17C1  0020               	movlb	0	; select bank0
  7347  17C2  00AB               	movwf	setProxIntLowThresh@threshold
  7348                           
  7349                           ;APDS9960.c: 234: _Bool setProxIntLowThresh(uint8_t threshold);APDS9960.c: 235: {;APDS99
      +                          60.c: 236:     if( !wireWriteDataByte(0x89, threshold) ) {
  7350  17C3  082B               	movf	setProxIntLowThresh@threshold,w
  7351  17C4  00AA               	movwf	??_setProxIntLowThresh
  7352  17C5  082A               	movf	??_setProxIntLowThresh,w
  7353  17C6  00A6               	movwf	wireWriteDataByte@val
  7354  17C7  3089               	movlw	137
  7355  17C8  3188  2089  3197   	fcall	_wireWriteDataByte
  7356  17CB  0020               	movlb	0	; select bank0
  7357  17CC  0826               	movf	?_wireWriteDataByte,w
  7358  17CD  0427               	iorwf	?_wireWriteDataByte+1,w
  7359  17CE  1D03               	btfss	3,2
  7360  17CF  2FD2               	goto	l7130
  7361                           
  7362                           ;APDS9960.c: 237:         return 0;
  7363  17D0  3000               	movlw	0
  7364  17D1  0008               	return
  7365  17D2                     l7130:	
  7366                           
  7367                           ;APDS9960.c: 240:     return 1;
  7368  17D2  3001               	movlw	1
  7369  17D3  0008               	return
  7370  17D4                     __end_of_setProxIntLowThresh:	
  7371                           
  7372                           	psect	text4
  7373  17AE                     __ptext4:	
  7374 ;; *************** function _setProxIntHighThresh *****************
  7375 ;; Defined at:
  7376 ;;		line 244 in file "APDS9960.c"
  7377 ;; Parameters:    Size  Location     Type
  7378 ;;  threshold       1    wreg     unsigned char 
  7379 ;; Auto vars:     Size  Location     Type
  7380 ;;  threshold       1   11[BANK0 ] unsigned char 
  7381 ;; Return value:  Size  Location     Type
  7382 ;;                  1    wreg      _Bool 
  7383 ;; Registers used:
  7384 ;;		wreg, status,2, status,0, pclath, cstack
  7385 ;; Tracked objects:
  7386 ;;		On entry : 0/0
  7387 ;;		On exit  : 0/0
  7388 ;;		Unchanged: 0/0
  7389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7390 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7391 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7392 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7393 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7394 ;;Total ram usage:        2 bytes
  7395 ;; Hardware stack levels used:    1
  7396 ;; Hardware stack levels required when called:    8
  7397 ;; This function calls:
  7398 ;;		_wireWriteDataByte
  7399 ;; This function is called by:
  7400 ;;		_initialize
  7401 ;; This function uses a non-reentrant model
  7402 ;;
  7403                           
  7404                           
  7405                           ;psect for function _setProxIntHighThresh
  7406  17AE                     _setProxIntHighThresh:	
  7407                           
  7408                           ;incstack = 0
  7409                           ; Regs used in _setProxIntHighThresh: [wreg+status,2+status,0+pclath+cstack]
  7410                           ;setProxIntHighThresh@threshold stored from wreg
  7411  17AE  0020               	movlb	0	; select bank0
  7412  17AF  00AB               	movwf	setProxIntHighThresh@threshold
  7413                           
  7414                           ;APDS9960.c: 244: _Bool setProxIntHighThresh(uint8_t threshold);APDS9960.c: 245: {;APDS9
      +                          960.c: 246:     if( !wireWriteDataByte(0x8B, threshold) ) {
  7415  17B0  082B               	movf	setProxIntHighThresh@threshold,w
  7416  17B1  00AA               	movwf	??_setProxIntHighThresh
  7417  17B2  082A               	movf	??_setProxIntHighThresh,w
  7418  17B3  00A6               	movwf	wireWriteDataByte@val
  7419  17B4  308B               	movlw	139
  7420  17B5  3188  2089  3197   	fcall	_wireWriteDataByte
  7421  17B8  0020               	movlb	0	; select bank0
  7422  17B9  0826               	movf	?_wireWriteDataByte,w
  7423  17BA  0427               	iorwf	?_wireWriteDataByte+1,w
  7424  17BB  1D03               	btfss	3,2
  7425  17BC  2FBF               	goto	l7140
  7426                           
  7427                           ;APDS9960.c: 247:         return 0;
  7428  17BD  3000               	movlw	0
  7429  17BE  0008               	return
  7430  17BF                     l7140:	
  7431                           
  7432                           ;APDS9960.c: 250:     return 1;
  7433  17BF  3001               	movlw	1
  7434  17C0  0008               	return
  7435  17C1                     __end_of_setProxIntHighThresh:	
  7436                           
  7437                           	psect	text5
  7438  09F4                     __ptext5:	
  7439 ;; *************** function _setLightIntLowThreshold *****************
  7440 ;; Defined at:
  7441 ;;		line 254 in file "APDS9960.c"
  7442 ;; Parameters:    Size  Location     Type
  7443 ;;  threshold       2   10[BANK0 ] unsigned short 
  7444 ;; Auto vars:     Size  Location     Type
  7445 ;;  val_high        1   14[BANK0 ] unsigned char 
  7446 ;;  val_low         1   13[BANK0 ] unsigned char 
  7447 ;; Return value:  Size  Location     Type
  7448 ;;                  1    wreg      _Bool 
  7449 ;; Registers used:
  7450 ;;		wreg, status,2, status,0, pclath, cstack
  7451 ;; Tracked objects:
  7452 ;;		On entry : 0/0
  7453 ;;		On exit  : 0/0
  7454 ;;		Unchanged: 0/0
  7455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7456 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7457 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7458 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7459 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7460 ;;Total ram usage:        5 bytes
  7461 ;; Hardware stack levels used:    1
  7462 ;; Hardware stack levels required when called:    8
  7463 ;; This function calls:
  7464 ;;		_wireWriteDataByte
  7465 ;; This function is called by:
  7466 ;;		_initialize
  7467 ;; This function uses a non-reentrant model
  7468 ;;
  7469                           
  7470                           
  7471                           ;psect for function _setLightIntLowThreshold
  7472  09F4                     _setLightIntLowThreshold:	
  7473                           
  7474                           ;APDS9960.c: 254: _Bool setLightIntLowThreshold(uint16_t threshold);APDS9960.c: 255: {;A
      +                          PDS9960.c: 256:     uint8_t val_low;;APDS9960.c: 257:     uint8_t val_high;;APDS9960.c: 
      +                          260:     val_low = threshold & 0x00FF;
  7475                           
  7476                           ;incstack = 0
  7477                           ; Regs used in _setLightIntLowThreshold: [wreg+status,2+status,0+pclath+cstack]
  7478  09F4  0020               	movlb	0	; select bank0
  7479  09F5  082A               	movf	setLightIntLowThreshold@threshold,w
  7480  09F6  00AC               	movwf	??_setLightIntLowThreshold
  7481  09F7  082C               	movf	??_setLightIntLowThreshold,w
  7482  09F8  00AD               	movwf	setLightIntLowThreshold@val_low
  7483                           
  7484                           ;APDS9960.c: 261:     val_high = (threshold & 0xFF00) >> 8;
  7485  09F9  082B               	movf	setLightIntLowThreshold@threshold+1,w
  7486  09FA  00AC               	movwf	??_setLightIntLowThreshold
  7487  09FB  082C               	movf	??_setLightIntLowThreshold,w
  7488  09FC  00AE               	movwf	setLightIntLowThreshold@val_high
  7489                           
  7490                           ;APDS9960.c: 264:     if( !wireWriteDataByte(0x84, val_low) ) {
  7491  09FD  082D               	movf	setLightIntLowThreshold@val_low,w
  7492  09FE  00AC               	movwf	??_setLightIntLowThreshold
  7493  09FF  082C               	movf	??_setLightIntLowThreshold,w
  7494  0A00  00A6               	movwf	wireWriteDataByte@val
  7495  0A01  3084               	movlw	132
  7496  0A02  3188  2089  3189   	fcall	_wireWriteDataByte
  7497  0A05  0020               	movlb	0	; select bank0
  7498  0A06  0826               	movf	?_wireWriteDataByte,w
  7499  0A07  0427               	iorwf	?_wireWriteDataByte+1,w
  7500  0A08  1D03               	btfss	3,2
  7501  0A09  2A0C               	goto	l7154
  7502  0A0A                     l7150:	
  7503                           
  7504                           ;APDS9960.c: 265:         return 0;
  7505  0A0A  3000               	movlw	0
  7506  0A0B  0008               	return
  7507  0A0C                     l7154:	
  7508                           
  7509                           ;APDS9960.c: 269:     if( !wireWriteDataByte(0x85, val_high) ) {
  7510  0A0C  082E               	movf	setLightIntLowThreshold@val_high,w
  7511  0A0D  00AC               	movwf	??_setLightIntLowThreshold
  7512  0A0E  082C               	movf	??_setLightIntLowThreshold,w
  7513  0A0F  00A6               	movwf	wireWriteDataByte@val
  7514  0A10  3085               	movlw	133
  7515  0A11  3188  2089  3189   	fcall	_wireWriteDataByte
  7516  0A14  0020               	movlb	0	; select bank0
  7517  0A15  0826               	movf	?_wireWriteDataByte,w
  7518  0A16  0427               	iorwf	?_wireWriteDataByte+1,w
  7519  0A17  1903               	btfsc	3,2
  7520  0A18  2A0A               	goto	l7150
  7521                           
  7522                           ;APDS9960.c: 273:     return 1;
  7523  0A19  3001               	movlw	1
  7524  0A1A  0008               	return
  7525  0A1B                     __end_of_setLightIntLowThreshold:	
  7526                           
  7527                           	psect	text6
  7528  09CD                     __ptext6:	
  7529 ;; *************** function _setLightIntHighThreshold *****************
  7530 ;; Defined at:
  7531 ;;		line 277 in file "APDS9960.c"
  7532 ;; Parameters:    Size  Location     Type
  7533 ;;  threshold       2   10[BANK0 ] unsigned short 
  7534 ;; Auto vars:     Size  Location     Type
  7535 ;;  val_high        1   14[BANK0 ] unsigned char 
  7536 ;;  val_low         1   13[BANK0 ] unsigned char 
  7537 ;; Return value:  Size  Location     Type
  7538 ;;                  1    wreg      _Bool 
  7539 ;; Registers used:
  7540 ;;		wreg, status,2, status,0, pclath, cstack
  7541 ;; Tracked objects:
  7542 ;;		On entry : 0/0
  7543 ;;		On exit  : 0/0
  7544 ;;		Unchanged: 0/0
  7545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7546 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7547 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7548 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7549 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7550 ;;Total ram usage:        5 bytes
  7551 ;; Hardware stack levels used:    1
  7552 ;; Hardware stack levels required when called:    8
  7553 ;; This function calls:
  7554 ;;		_wireWriteDataByte
  7555 ;; This function is called by:
  7556 ;;		_initialize
  7557 ;; This function uses a non-reentrant model
  7558 ;;
  7559                           
  7560                           
  7561                           ;psect for function _setLightIntHighThreshold
  7562  09CD                     _setLightIntHighThreshold:	
  7563                           
  7564                           ;APDS9960.c: 277: _Bool setLightIntHighThreshold(uint16_t threshold);APDS9960.c: 278: {;
      +                          APDS9960.c: 279:     uint8_t val_low;;APDS9960.c: 280:     uint8_t val_high;;APDS9960.c:
      +                           283:     val_low = threshold & 0x00FF;
  7565                           
  7566                           ;incstack = 0
  7567                           ; Regs used in _setLightIntHighThreshold: [wreg+status,2+status,0+pclath+cstack]
  7568  09CD  0020               	movlb	0	; select bank0
  7569  09CE  082A               	movf	setLightIntHighThreshold@threshold,w
  7570  09CF  00AC               	movwf	??_setLightIntHighThreshold
  7571  09D0  082C               	movf	??_setLightIntHighThreshold,w
  7572  09D1  00AD               	movwf	setLightIntHighThreshold@val_low
  7573                           
  7574                           ;APDS9960.c: 284:     val_high = (threshold & 0xFF00) >> 8;
  7575  09D2  082B               	movf	setLightIntHighThreshold@threshold+1,w
  7576  09D3  00AC               	movwf	??_setLightIntHighThreshold
  7577  09D4  082C               	movf	??_setLightIntHighThreshold,w
  7578  09D5  00AE               	movwf	setLightIntHighThreshold@val_high
  7579                           
  7580                           ;APDS9960.c: 287:     if( !wireWriteDataByte(0x86, val_low) ) {
  7581  09D6  082D               	movf	setLightIntHighThreshold@val_low,w
  7582  09D7  00AC               	movwf	??_setLightIntHighThreshold
  7583  09D8  082C               	movf	??_setLightIntHighThreshold,w
  7584  09D9  00A6               	movwf	wireWriteDataByte@val
  7585  09DA  3086               	movlw	134
  7586  09DB  3188  2089  3189   	fcall	_wireWriteDataByte
  7587  09DE  0020               	movlb	0	; select bank0
  7588  09DF  0826               	movf	?_wireWriteDataByte,w
  7589  09E0  0427               	iorwf	?_wireWriteDataByte+1,w
  7590  09E1  1D03               	btfss	3,2
  7591  09E2  29E5               	goto	l7174
  7592  09E3                     l7170:	
  7593                           
  7594                           ;APDS9960.c: 288:         return 0;
  7595  09E3  3000               	movlw	0
  7596  09E4  0008               	return
  7597  09E5                     l7174:	
  7598                           
  7599                           ;APDS9960.c: 292:     if( !wireWriteDataByte(0x87, val_high) ) {
  7600  09E5  082E               	movf	setLightIntHighThreshold@val_high,w
  7601  09E6  00AC               	movwf	??_setLightIntHighThreshold
  7602  09E7  082C               	movf	??_setLightIntHighThreshold,w
  7603  09E8  00A6               	movwf	wireWriteDataByte@val
  7604  09E9  3087               	movlw	135
  7605  09EA  3188  2089  3189   	fcall	_wireWriteDataByte
  7606  09ED  0020               	movlb	0	; select bank0
  7607  09EE  0826               	movf	?_wireWriteDataByte,w
  7608  09EF  0427               	iorwf	?_wireWriteDataByte+1,w
  7609  09F0  1903               	btfsc	3,2
  7610  09F1  29E3               	goto	l7170
  7611                           
  7612                           ;APDS9960.c: 296:     return 1;
  7613  09F2  3001               	movlw	1
  7614  09F3  0008               	return
  7615  09F4                     __end_of_setLightIntHighThreshold:	
  7616                           
  7617                           	psect	text7
  7618  0A1B                     __ptext7:	
  7619 ;; *************** function _setLEDDrive *****************
  7620 ;; Defined at:
  7621 ;;		line 170 in file "APDS9960.c"
  7622 ;; Parameters:    Size  Location     Type
  7623 ;;  drive           1    wreg     unsigned char 
  7624 ;; Auto vars:     Size  Location     Type
  7625 ;;  drive           1   13[BANK0 ] unsigned char 
  7626 ;;  val             1   12[BANK0 ] unsigned char 
  7627 ;; Return value:  Size  Location     Type
  7628 ;;                  1    wreg      _Bool 
  7629 ;; Registers used:
  7630 ;;		wreg, status,2, status,0, pclath, cstack
  7631 ;; Tracked objects:
  7632 ;;		On entry : 0/0
  7633 ;;		On exit  : 0/0
  7634 ;;		Unchanged: 0/0
  7635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7636 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7637 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7638 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7639 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7640 ;;Total ram usage:        4 bytes
  7641 ;; Hardware stack levels used:    1
  7642 ;; Hardware stack levels required when called:    8
  7643 ;; This function calls:
  7644 ;;		_wireReadDataByte
  7645 ;;		_wireWriteDataByte
  7646 ;; This function is called by:
  7647 ;;		_initialize
  7648 ;; This function uses a non-reentrant model
  7649 ;;
  7650                           
  7651                           
  7652                           ;psect for function _setLEDDrive
  7653  0A1B                     _setLEDDrive:	
  7654                           
  7655                           ;incstack = 0
  7656                           ; Regs used in _setLEDDrive: [wreg+status,2+status,0+pclath+cstack]
  7657                           ;setLEDDrive@drive stored from wreg
  7658  0A1B  0020               	movlb	0	; select bank0
  7659  0A1C  00AD               	movwf	setLEDDrive@drive
  7660                           
  7661                           ;APDS9960.c: 170: _Bool setLEDDrive(uint8_t drive);APDS9960.c: 171: {;APDS9960.c: 172:  
      +                             uint8_t val;;APDS9960.c: 175:     val=wireReadDataByte(0x8F);
  7662  0A1D  308F               	movlw	143
  7663  0A1E  3189  2135  318A   	fcall	_wireReadDataByte
  7664  0A21  0020               	movlb	0	; select bank0
  7665  0A22  00AA               	movwf	??_setLEDDrive
  7666  0A23  082A               	movf	??_setLEDDrive,w
  7667  0A24  00AC               	movwf	setLEDDrive@val
  7668                           
  7669                           ;APDS9960.c: 178:     drive &= 0b00000011;
  7670  0A25  3003               	movlw	3
  7671  0A26  00AA               	movwf	??_setLEDDrive
  7672  0A27  082A               	movf	??_setLEDDrive,w
  7673  0A28  05AD               	andwf	setLEDDrive@drive,f
  7674                           
  7675                           ;APDS9960.c: 179:     drive = drive << 6;
  7676  0A29  082D               	movf	setLEDDrive@drive,w
  7677  0A2A  00AA               	movwf	??_setLEDDrive
  7678  0A2B  3005               	movlw	5
  7679  0A2C                     u6145:	
  7680  0A2C  35AA               	lslf	??_setLEDDrive,f
  7681  0A2D  3EFF               	addlw	-1
  7682  0A2E  1D03               	skipz
  7683  0A2F  2A2C               	goto	u6145
  7684  0A30  352A               	lslf	??_setLEDDrive,w
  7685  0A31  00AB               	movwf	??_setLEDDrive+1
  7686  0A32  082B               	movf	??_setLEDDrive+1,w
  7687  0A33  00AD               	movwf	setLEDDrive@drive
  7688                           
  7689                           ;APDS9960.c: 180:     val &= 0b00111111;
  7690  0A34  303F               	movlw	63
  7691  0A35  00AA               	movwf	??_setLEDDrive
  7692  0A36  082A               	movf	??_setLEDDrive,w
  7693  0A37  05AC               	andwf	setLEDDrive@val,f
  7694                           
  7695                           ;APDS9960.c: 181:     val |= drive;
  7696  0A38  082D               	movf	setLEDDrive@drive,w
  7697  0A39  00AA               	movwf	??_setLEDDrive
  7698  0A3A  082A               	movf	??_setLEDDrive,w
  7699  0A3B  04AC               	iorwf	setLEDDrive@val,f
  7700                           
  7701                           ;APDS9960.c: 184:     if( !wireWriteDataByte(0x8F, val) ) {
  7702  0A3C  082C               	movf	setLEDDrive@val,w
  7703  0A3D  00AA               	movwf	??_setLEDDrive
  7704  0A3E  082A               	movf	??_setLEDDrive,w
  7705  0A3F  00A6               	movwf	wireWriteDataByte@val
  7706  0A40  308F               	movlw	143
  7707  0A41  3188  2089         	fcall	_wireWriteDataByte
  7708  0A43  0008               	return
  7709  0A44                     __end_of_setLEDDrive:	
  7710                           
  7711                           	psect	text8
  7712  09A6                     __ptext8:	
  7713 ;; *************** function _setGestureWaitTime *****************
  7714 ;; Defined at:
  7715 ;;		line 366 in file "APDS9960.c"
  7716 ;; Parameters:    Size  Location     Type
  7717 ;;  time            1    wreg     unsigned char 
  7718 ;; Auto vars:     Size  Location     Type
  7719 ;;  time            1   11[BANK0 ] unsigned char 
  7720 ;;  val             1   12[BANK0 ] unsigned char 
  7721 ;; Return value:  Size  Location     Type
  7722 ;;                  1    wreg      _Bool 
  7723 ;; Registers used:
  7724 ;;		wreg, status,2, status,0, pclath, cstack
  7725 ;; Tracked objects:
  7726 ;;		On entry : 0/0
  7727 ;;		On exit  : 0/0
  7728 ;;		Unchanged: 0/0
  7729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7730 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7731 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7732 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7733 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7734 ;;Total ram usage:        3 bytes
  7735 ;; Hardware stack levels used:    1
  7736 ;; Hardware stack levels required when called:    8
  7737 ;; This function calls:
  7738 ;;		_wireReadDataByte
  7739 ;;		_wireWriteDataByte
  7740 ;; This function is called by:
  7741 ;;		_initialize
  7742 ;; This function uses a non-reentrant model
  7743 ;;
  7744                           
  7745                           
  7746                           ;psect for function _setGestureWaitTime
  7747  09A6                     _setGestureWaitTime:	
  7748                           
  7749                           ;incstack = 0
  7750                           ; Regs used in _setGestureWaitTime: [wreg+status,2+status,0+pclath+cstack]
  7751                           ;setGestureWaitTime@time stored from wreg
  7752  09A6  0020               	movlb	0	; select bank0
  7753  09A7  00AB               	movwf	setGestureWaitTime@time
  7754                           
  7755                           ;APDS9960.c: 366: _Bool setGestureWaitTime(uint8_t time);APDS9960.c: 367: {;APDS9960.c: 
      +                          368:     uint8_t val;;APDS9960.c: 371:     val = wireReadDataByte(0xA3);
  7756  09A8  30A3               	movlw	163
  7757  09A9  3189  2135  3189   	fcall	_wireReadDataByte
  7758  09AC  0020               	movlb	0	; select bank0
  7759  09AD  00AA               	movwf	??_setGestureWaitTime
  7760  09AE  082A               	movf	??_setGestureWaitTime,w
  7761  09AF  00AC               	movwf	setGestureWaitTime@val
  7762                           
  7763                           ;APDS9960.c: 374:     time &= 0b00000111;
  7764  09B0  3007               	movlw	7
  7765  09B1  00AA               	movwf	??_setGestureWaitTime
  7766  09B2  082A               	movf	??_setGestureWaitTime,w
  7767  09B3  05AB               	andwf	setGestureWaitTime@time,f
  7768                           
  7769                           ;APDS9960.c: 375:     val &= 0b11111000;
  7770  09B4  30F8               	movlw	248
  7771  09B5  00AA               	movwf	??_setGestureWaitTime
  7772  09B6  082A               	movf	??_setGestureWaitTime,w
  7773  09B7  05AC               	andwf	setGestureWaitTime@val,f
  7774                           
  7775                           ;APDS9960.c: 376:     val |= time;
  7776  09B8  082B               	movf	setGestureWaitTime@time,w
  7777  09B9  00AA               	movwf	??_setGestureWaitTime
  7778  09BA  082A               	movf	??_setGestureWaitTime,w
  7779  09BB  04AC               	iorwf	setGestureWaitTime@val,f
  7780                           
  7781                           ;APDS9960.c: 379:     if( !wireWriteDataByte(0xA3, val) ) {
  7782  09BC  082C               	movf	setGestureWaitTime@val,w
  7783  09BD  00AA               	movwf	??_setGestureWaitTime
  7784  09BE  082A               	movf	??_setGestureWaitTime,w
  7785  09BF  00A6               	movwf	wireWriteDataByte@val
  7786  09C0  30A3               	movlw	163
  7787  09C1  3188  2089  3189   	fcall	_wireWriteDataByte
  7788  09C4  0020               	movlb	0	; select bank0
  7789  09C5  0826               	movf	?_wireWriteDataByte,w
  7790  09C6  0427               	iorwf	?_wireWriteDataByte+1,w
  7791  09C7  1D03               	btfss	3,2
  7792  09C8  29CB               	goto	l7254
  7793                           
  7794                           ;APDS9960.c: 380:         return 0;
  7795  09C9  3000               	movlw	0
  7796  09CA  0008               	return
  7797  09CB                     l7254:	
  7798                           
  7799                           ;APDS9960.c: 383:     return 1;
  7800  09CB  3001               	movlw	1
  7801  09CC  0008               	return
  7802  09CD                     __end_of_setGestureWaitTime:	
  7803                           
  7804                           	psect	text9
  7805  0B58                     __ptext9:	
  7806 ;; *************** function _setGestureLEDDrive *****************
  7807 ;; Defined at:
  7808 ;;		line 343 in file "APDS9960.c"
  7809 ;; Parameters:    Size  Location     Type
  7810 ;;  drive           1    wreg     unsigned char 
  7811 ;; Auto vars:     Size  Location     Type
  7812 ;;  drive           1   13[BANK0 ] unsigned char 
  7813 ;;  val             1   12[BANK0 ] unsigned char 
  7814 ;; Return value:  Size  Location     Type
  7815 ;;                  1    wreg      _Bool 
  7816 ;; Registers used:
  7817 ;;		wreg, status,2, status,0, pclath, cstack
  7818 ;; Tracked objects:
  7819 ;;		On entry : 0/0
  7820 ;;		On exit  : 0/0
  7821 ;;		Unchanged: 0/0
  7822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7823 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7824 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7825 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7826 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7827 ;;Total ram usage:        4 bytes
  7828 ;; Hardware stack levels used:    1
  7829 ;; Hardware stack levels required when called:    8
  7830 ;; This function calls:
  7831 ;;		_wireReadDataByte
  7832 ;;		_wireWriteDataByte
  7833 ;; This function is called by:
  7834 ;;		_initialize
  7835 ;; This function uses a non-reentrant model
  7836 ;;
  7837                           
  7838                           
  7839                           ;psect for function _setGestureLEDDrive
  7840  0B58                     _setGestureLEDDrive:	
  7841                           
  7842                           ;incstack = 0
  7843                           ; Regs used in _setGestureLEDDrive: [wreg+status,2+status,0+pclath+cstack]
  7844                           ;setGestureLEDDrive@drive stored from wreg
  7845  0B58  0020               	movlb	0	; select bank0
  7846  0B59  00AD               	movwf	setGestureLEDDrive@drive
  7847                           
  7848                           ;APDS9960.c: 343: _Bool setGestureLEDDrive(uint8_t drive);APDS9960.c: 344: {;APDS9960.c:
      +                           345:     uint8_t val;;APDS9960.c: 348:     val = wireReadDataByte(0xA3);
  7849  0B5A  30A3               	movlw	163
  7850  0B5B  3189  2135  318B   	fcall	_wireReadDataByte
  7851  0B5E  0020               	movlb	0	; select bank0
  7852  0B5F  00AA               	movwf	??_setGestureLEDDrive
  7853  0B60  082A               	movf	??_setGestureLEDDrive,w
  7854  0B61  00AC               	movwf	setGestureLEDDrive@val
  7855                           
  7856                           ;APDS9960.c: 352:     drive &= 0b00000011;
  7857  0B62  3003               	movlw	3
  7858  0B63  00AA               	movwf	??_setGestureLEDDrive
  7859  0B64  082A               	movf	??_setGestureLEDDrive,w
  7860  0B65  05AD               	andwf	setGestureLEDDrive@drive,f
  7861                           
  7862                           ;APDS9960.c: 353:     drive = drive << 3;
  7863  0B66  082D               	movf	setGestureLEDDrive@drive,w
  7864  0B67  00AA               	movwf	??_setGestureLEDDrive
  7865  0B68  3002               	movlw	2
  7866  0B69                     u6265:	
  7867  0B69  35AA               	lslf	??_setGestureLEDDrive,f
  7868  0B6A  3EFF               	addlw	-1
  7869  0B6B  1D03               	skipz
  7870  0B6C  2B69               	goto	u6265
  7871  0B6D  352A               	lslf	??_setGestureLEDDrive,w
  7872  0B6E  00AB               	movwf	??_setGestureLEDDrive+1
  7873  0B6F  082B               	movf	??_setGestureLEDDrive+1,w
  7874  0B70  00AD               	movwf	setGestureLEDDrive@drive
  7875                           
  7876                           ;APDS9960.c: 354:     val &= 0b11100111;
  7877  0B71  30E7               	movlw	231
  7878  0B72  00AA               	movwf	??_setGestureLEDDrive
  7879  0B73  082A               	movf	??_setGestureLEDDrive,w
  7880  0B74  05AC               	andwf	setGestureLEDDrive@val,f
  7881                           
  7882                           ;APDS9960.c: 355:     val |= drive;
  7883  0B75  082D               	movf	setGestureLEDDrive@drive,w
  7884  0B76  00AA               	movwf	??_setGestureLEDDrive
  7885  0B77  082A               	movf	??_setGestureLEDDrive,w
  7886  0B78  04AC               	iorwf	setGestureLEDDrive@val,f
  7887                           
  7888                           ;APDS9960.c: 358:     if( !wireWriteDataByte(0xA3, val) ) {
  7889  0B79  082C               	movf	setGestureLEDDrive@val,w
  7890  0B7A  00AA               	movwf	??_setGestureLEDDrive
  7891  0B7B  082A               	movf	??_setGestureLEDDrive,w
  7892  0B7C  00A6               	movwf	wireWriteDataByte@val
  7893  0B7D  30A3               	movlw	163
  7894  0B7E  3188  2089  318B   	fcall	_wireWriteDataByte
  7895  0B81  0020               	movlb	0	; select bank0
  7896  0B82  0826               	movf	?_wireWriteDataByte,w
  7897  0B83  0427               	iorwf	?_wireWriteDataByte+1,w
  7898  0B84  1D03               	btfss	3,2
  7899  0B85  2B88               	goto	l7236
  7900                           
  7901                           ;APDS9960.c: 359:         return 0;
  7902  0B86  3000               	movlw	0
  7903  0B87  0008               	return
  7904  0B88                     l7236:	
  7905                           
  7906                           ;APDS9960.c: 362:     return 1;
  7907  0B88  3001               	movlw	1
  7908  0B89  0008               	return
  7909  0B8A                     __end_of_setGestureLEDDrive:	
  7910                           
  7911                           	psect	text10
  7912  0B26                     __ptext10:	
  7913 ;; *************** function _setGestureGain *****************
  7914 ;; Defined at:
  7915 ;;		line 320 in file "APDS9960.c"
  7916 ;; Parameters:    Size  Location     Type
  7917 ;;  gain            1    wreg     unsigned char 
  7918 ;; Auto vars:     Size  Location     Type
  7919 ;;  gain            1   13[BANK0 ] unsigned char 
  7920 ;;  val             1   12[BANK0 ] unsigned char 
  7921 ;; Return value:  Size  Location     Type
  7922 ;;                  1    wreg      _Bool 
  7923 ;; Registers used:
  7924 ;;		wreg, status,2, status,0, pclath, cstack
  7925 ;; Tracked objects:
  7926 ;;		On entry : 0/0
  7927 ;;		On exit  : 0/0
  7928 ;;		Unchanged: 0/0
  7929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7931 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7932 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7933 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7934 ;;Total ram usage:        4 bytes
  7935 ;; Hardware stack levels used:    1
  7936 ;; Hardware stack levels required when called:    8
  7937 ;; This function calls:
  7938 ;;		_wireReadDataByte
  7939 ;;		_wireWriteDataByte
  7940 ;; This function is called by:
  7941 ;;		_initialize
  7942 ;; This function uses a non-reentrant model
  7943 ;;
  7944                           
  7945                           
  7946                           ;psect for function _setGestureGain
  7947  0B26                     _setGestureGain:	
  7948                           
  7949                           ;incstack = 0
  7950                           ; Regs used in _setGestureGain: [wreg+status,2+status,0+pclath+cstack]
  7951                           ;setGestureGain@gain stored from wreg
  7952  0B26  0020               	movlb	0	; select bank0
  7953  0B27  00AD               	movwf	setGestureGain@gain
  7954                           
  7955                           ;APDS9960.c: 320: _Bool setGestureGain(uint8_t gain);APDS9960.c: 321: {;APDS9960.c: 322:
      +                               uint8_t val;;APDS9960.c: 325:     val = wireReadDataByte(0xA3);
  7956  0B28  30A3               	movlw	163
  7957  0B29  3189  2135  318B   	fcall	_wireReadDataByte
  7958  0B2C  0020               	movlb	0	; select bank0
  7959  0B2D  00AA               	movwf	??_setGestureGain
  7960  0B2E  082A               	movf	??_setGestureGain,w
  7961  0B2F  00AC               	movwf	setGestureGain@val
  7962                           
  7963                           ;APDS9960.c: 329:     gain &= 0b00000011;
  7964  0B30  3003               	movlw	3
  7965  0B31  00AA               	movwf	??_setGestureGain
  7966  0B32  082A               	movf	??_setGestureGain,w
  7967  0B33  05AD               	andwf	setGestureGain@gain,f
  7968                           
  7969                           ;APDS9960.c: 330:     gain = gain << 5;
  7970  0B34  082D               	movf	setGestureGain@gain,w
  7971  0B35  00AA               	movwf	??_setGestureGain
  7972  0B36  3004               	movlw	4
  7973  0B37                     u6245:	
  7974  0B37  35AA               	lslf	??_setGestureGain,f
  7975  0B38  3EFF               	addlw	-1
  7976  0B39  1D03               	skipz
  7977  0B3A  2B37               	goto	u6245
  7978  0B3B  352A               	lslf	??_setGestureGain,w
  7979  0B3C  00AB               	movwf	??_setGestureGain+1
  7980  0B3D  082B               	movf	??_setGestureGain+1,w
  7981  0B3E  00AD               	movwf	setGestureGain@gain
  7982                           
  7983                           ;APDS9960.c: 331:     val &= 0b10011111;
  7984  0B3F  309F               	movlw	159
  7985  0B40  00AA               	movwf	??_setGestureGain
  7986  0B41  082A               	movf	??_setGestureGain,w
  7987  0B42  05AC               	andwf	setGestureGain@val,f
  7988                           
  7989                           ;APDS9960.c: 332:     val |= gain;
  7990  0B43  082D               	movf	setGestureGain@gain,w
  7991  0B44  00AA               	movwf	??_setGestureGain
  7992  0B45  082A               	movf	??_setGestureGain,w
  7993  0B46  04AC               	iorwf	setGestureGain@val,f
  7994                           
  7995                           ;APDS9960.c: 335:     if( !wireWriteDataByte(0xA3, val) ) {
  7996  0B47  082C               	movf	setGestureGain@val,w
  7997  0B48  00AA               	movwf	??_setGestureGain
  7998  0B49  082A               	movf	??_setGestureGain,w
  7999  0B4A  00A6               	movwf	wireWriteDataByte@val
  8000  0B4B  30A3               	movlw	163
  8001  0B4C  3188  2089  318B   	fcall	_wireWriteDataByte
  8002  0B4F  0020               	movlb	0	; select bank0
  8003  0B50  0826               	movf	?_wireWriteDataByte,w
  8004  0B51  0427               	iorwf	?_wireWriteDataByte+1,w
  8005  0B52  1D03               	btfss	3,2
  8006  0B53  2B56               	goto	l7218
  8007                           
  8008                           ;APDS9960.c: 336:         return 0;
  8009  0B54  3000               	movlw	0
  8010  0B55  0008               	return
  8011  0B56                     l7218:	
  8012                           
  8013                           ;APDS9960.c: 339:     return 1;
  8014  0B56  3001               	movlw	1
  8015  0B57  0008               	return
  8016  0B58                     __end_of_setGestureGain:	
  8017                           
  8018                           	psect	text11
  8019  179B                     __ptext11:	
  8020 ;; *************** function _setGestureExitThresh *****************
  8021 ;; Defined at:
  8022 ;;		line 310 in file "APDS9960.c"
  8023 ;; Parameters:    Size  Location     Type
  8024 ;;  threshold       1    wreg     unsigned char 
  8025 ;; Auto vars:     Size  Location     Type
  8026 ;;  threshold       1   11[BANK0 ] unsigned char 
  8027 ;; Return value:  Size  Location     Type
  8028 ;;                  1    wreg      _Bool 
  8029 ;; Registers used:
  8030 ;;		wreg, status,2, status,0, pclath, cstack
  8031 ;; Tracked objects:
  8032 ;;		On entry : 0/0
  8033 ;;		On exit  : 0/0
  8034 ;;		Unchanged: 0/0
  8035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8036 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8037 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8038 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8039 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8040 ;;Total ram usage:        2 bytes
  8041 ;; Hardware stack levels used:    1
  8042 ;; Hardware stack levels required when called:    8
  8043 ;; This function calls:
  8044 ;;		_wireWriteDataByte
  8045 ;; This function is called by:
  8046 ;;		_initialize
  8047 ;; This function uses a non-reentrant model
  8048 ;;
  8049                           
  8050                           
  8051                           ;psect for function _setGestureExitThresh
  8052  179B                     _setGestureExitThresh:	
  8053                           
  8054                           ;incstack = 0
  8055                           ; Regs used in _setGestureExitThresh: [wreg+status,2+status,0+pclath+cstack]
  8056                           ;setGestureExitThresh@threshold stored from wreg
  8057  179B  0020               	movlb	0	; select bank0
  8058  179C  00AB               	movwf	setGestureExitThresh@threshold
  8059                           
  8060                           ;APDS9960.c: 310: _Bool setGestureExitThresh(uint8_t threshold);APDS9960.c: 311: {;APDS9
      +                          960.c: 312:     if( !wireWriteDataByte(0xA1, threshold) ) {
  8061  179D  082B               	movf	setGestureExitThresh@threshold,w
  8062  179E  00AA               	movwf	??_setGestureExitThresh
  8063  179F  082A               	movf	??_setGestureExitThresh,w
  8064  17A0  00A6               	movwf	wireWriteDataByte@val
  8065  17A1  30A1               	movlw	161
  8066  17A2  3188  2089  3197   	fcall	_wireWriteDataByte
  8067  17A5  0020               	movlb	0	; select bank0
  8068  17A6  0826               	movf	?_wireWriteDataByte,w
  8069  17A7  0427               	iorwf	?_wireWriteDataByte+1,w
  8070  17A8  1D03               	btfss	3,2
  8071  17A9  2FAC               	goto	l7200
  8072                           
  8073                           ;APDS9960.c: 313:         return 0;
  8074  17AA  3000               	movlw	0
  8075  17AB  0008               	return
  8076  17AC                     l7200:	
  8077                           
  8078                           ;APDS9960.c: 316:     return 1;
  8079  17AC  3001               	movlw	1
  8080  17AD  0008               	return
  8081  17AE                     __end_of_setGestureExitThresh:	
  8082                           
  8083                           	psect	text12
  8084  1788                     __ptext12:	
  8085 ;; *************** function _setGestureEnterThresh *****************
  8086 ;; Defined at:
  8087 ;;		line 300 in file "APDS9960.c"
  8088 ;; Parameters:    Size  Location     Type
  8089 ;;  threshold       1    wreg     unsigned char 
  8090 ;; Auto vars:     Size  Location     Type
  8091 ;;  threshold       1   11[BANK0 ] unsigned char 
  8092 ;; Return value:  Size  Location     Type
  8093 ;;                  1    wreg      _Bool 
  8094 ;; Registers used:
  8095 ;;		wreg, status,2, status,0, pclath, cstack
  8096 ;; Tracked objects:
  8097 ;;		On entry : 0/0
  8098 ;;		On exit  : 0/0
  8099 ;;		Unchanged: 0/0
  8100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8102 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8103 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8104 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8105 ;;Total ram usage:        2 bytes
  8106 ;; Hardware stack levels used:    1
  8107 ;; Hardware stack levels required when called:    8
  8108 ;; This function calls:
  8109 ;;		_wireWriteDataByte
  8110 ;; This function is called by:
  8111 ;;		_initialize
  8112 ;; This function uses a non-reentrant model
  8113 ;;
  8114                           
  8115                           
  8116                           ;psect for function _setGestureEnterThresh
  8117  1788                     _setGestureEnterThresh:	
  8118                           
  8119                           ;incstack = 0
  8120                           ; Regs used in _setGestureEnterThresh: [wreg+status,2+status,0+pclath+cstack]
  8121                           ;setGestureEnterThresh@threshold stored from wreg
  8122  1788  0020               	movlb	0	; select bank0
  8123  1789  00AB               	movwf	setGestureEnterThresh@threshold
  8124                           
  8125                           ;APDS9960.c: 300: _Bool setGestureEnterThresh(uint8_t threshold);APDS9960.c: 301: {;APDS
      +                          9960.c: 302:     if( !wireWriteDataByte(0xA0, threshold) ) {
  8126  178A  082B               	movf	setGestureEnterThresh@threshold,w
  8127  178B  00AA               	movwf	??_setGestureEnterThresh
  8128  178C  082A               	movf	??_setGestureEnterThresh,w
  8129  178D  00A6               	movwf	wireWriteDataByte@val
  8130  178E  30A0               	movlw	160
  8131  178F  3188  2089  3197   	fcall	_wireWriteDataByte
  8132  1792  0020               	movlb	0	; select bank0
  8133  1793  0826               	movf	?_wireWriteDataByte,w
  8134  1794  0427               	iorwf	?_wireWriteDataByte+1,w
  8135  1795  1D03               	btfss	3,2
  8136  1796  2F99               	goto	l7190
  8137                           
  8138                           ;APDS9960.c: 303:         return 0;
  8139  1797  3000               	movlw	0
  8140  1798  0008               	return
  8141  1799                     l7190:	
  8142                           
  8143                           ;APDS9960.c: 306:     return 1;
  8144  1799  3001               	movlw	1
  8145  179A  0008               	return
  8146  179B                     __end_of_setGestureEnterThresh:	
  8147                           
  8148                           	psect	text13
  8149  0917                     __ptext13:	
  8150 ;; *************** function _setAmbientLightGain *****************
  8151 ;; Defined at:
  8152 ;;		line 213 in file "APDS9960.c"
  8153 ;; Parameters:    Size  Location     Type
  8154 ;;  drive           1    wreg     unsigned char 
  8155 ;; Auto vars:     Size  Location     Type
  8156 ;;  drive           1   11[BANK0 ] unsigned char 
  8157 ;;  val             1   12[BANK0 ] unsigned char 
  8158 ;; Return value:  Size  Location     Type
  8159 ;;                  1    wreg      _Bool 
  8160 ;; Registers used:
  8161 ;;		wreg, status,2, status,0, pclath, cstack
  8162 ;; Tracked objects:
  8163 ;;		On entry : 0/0
  8164 ;;		On exit  : 0/0
  8165 ;;		Unchanged: 0/0
  8166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8168 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8169 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8170 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8171 ;;Total ram usage:        3 bytes
  8172 ;; Hardware stack levels used:    1
  8173 ;; Hardware stack levels required when called:    8
  8174 ;; This function calls:
  8175 ;;		_wireReadDataByte
  8176 ;;		_wireWriteDataByte
  8177 ;; This function is called by:
  8178 ;;		_initialize
  8179 ;; This function uses a non-reentrant model
  8180 ;;
  8181                           
  8182                           
  8183                           ;psect for function _setAmbientLightGain
  8184  0917                     _setAmbientLightGain:	
  8185                           
  8186                           ;incstack = 0
  8187                           ; Regs used in _setAmbientLightGain: [wreg+status,2+status,0+pclath+cstack]
  8188                           ;setAmbientLightGain@drive stored from wreg
  8189  0917  0020               	movlb	0	; select bank0
  8190  0918  00AB               	movwf	setAmbientLightGain@drive
  8191                           
  8192                           ;APDS9960.c: 213: _Bool setAmbientLightGain(uint8_t drive);APDS9960.c: 214: {;APDS9960.c
      +                          : 215:     uint8_t val;;APDS9960.c: 218:     val= wireReadDataByte(0x8F);
  8193  0919  308F               	movlw	143
  8194  091A  3189  2135  3189   	fcall	_wireReadDataByte
  8195  091D  0020               	movlb	0	; select bank0
  8196  091E  00AA               	movwf	??_setAmbientLightGain
  8197  091F  082A               	movf	??_setAmbientLightGain,w
  8198  0920  00AC               	movwf	setAmbientLightGain@val
  8199                           
  8200                           ;APDS9960.c: 221:     drive &= 0b00000011;
  8201  0921  3003               	movlw	3
  8202  0922  00AA               	movwf	??_setAmbientLightGain
  8203  0923  082A               	movf	??_setAmbientLightGain,w
  8204  0924  05AB               	andwf	setAmbientLightGain@drive,f
  8205                           
  8206                           ;APDS9960.c: 222:     val &= 0b11111100;
  8207  0925  30FC               	movlw	252
  8208  0926  00AA               	movwf	??_setAmbientLightGain
  8209  0927  082A               	movf	??_setAmbientLightGain,w
  8210  0928  05AC               	andwf	setAmbientLightGain@val,f
  8211                           
  8212                           ;APDS9960.c: 223:     val |= drive;
  8213  0929  082B               	movf	setAmbientLightGain@drive,w
  8214  092A  00AA               	movwf	??_setAmbientLightGain
  8215  092B  082A               	movf	??_setAmbientLightGain,w
  8216  092C  04AC               	iorwf	setAmbientLightGain@val,f
  8217                           
  8218                           ;APDS9960.c: 226:     if( !wireWriteDataByte(0x8F, val) ) {
  8219  092D  082C               	movf	setAmbientLightGain@val,w
  8220  092E  00AA               	movwf	??_setAmbientLightGain
  8221  092F  082A               	movf	??_setAmbientLightGain,w
  8222  0930  00A6               	movwf	wireWriteDataByte@val
  8223  0931  308F               	movlw	143
  8224  0932  3188  2089         	fcall	_wireWriteDataByte
  8225  0934  0008               	return
  8226  0935                     __end_of_setAmbientLightGain:	
  8227                           
  8228                           	psect	text14
  8229  170F                     __ptext14:	
  8230 ;; *************** function _i2c1_driver_open *****************
  8231 ;; Defined at:
  8232 ;;		line 83 in file "mcc_generated_files/i2c1_driver.c"
  8233 ;; Parameters:    Size  Location     Type
  8234 ;;		None
  8235 ;; Auto vars:     Size  Location     Type
  8236 ;;		None
  8237 ;; Return value:  Size  Location     Type
  8238 ;;		None               void
  8239 ;; Registers used:
  8240 ;;		wreg, status,2
  8241 ;; Tracked objects:
  8242 ;;		On entry : 0/0
  8243 ;;		On exit  : 0/0
  8244 ;;		Unchanged: 0/0
  8245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8246 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8247 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8248 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8249 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8250 ;;Total ram usage:        0 bytes
  8251 ;; Hardware stack levels used:    1
  8252 ;; Hardware stack levels required when called:    5
  8253 ;; This function calls:
  8254 ;;		Nothing
  8255 ;; This function is called by:
  8256 ;;		_initialize
  8257 ;;		_i2c_open
  8258 ;;		_InitI2C
  8259 ;; This function uses a non-reentrant model
  8260 ;;
  8261                           
  8262                           
  8263                           ;psect for function _i2c1_driver_open
  8264  170F                     _i2c1_driver_open:	
  8265                           
  8266                           ;incstack = 0
  8267                           ; Regs used in _i2c1_driver_open: [wreg+status,2]
  8268  170F  0024               	movlb	4	; select bank4
  8269  1710  1A95               	btfsc	21,5	;volatile
  8270  1711  0008               	return
  8271  1712  0194               	clrf	20	;volatile
  8272  1713  3028               	movlw	40
  8273  1714  0095               	movwf	21	;volatile
  8274  1715  0196               	clrf	22	;volatile
  8275  1716  3003               	movlw	3
  8276  1717  0092               	movwf	18	;volatile
  8277  1718  0008               	return
  8278  1719                     __end_of_i2c1_driver_open:	
  8279                           
  8280                           	psect	text15
  8281  0719                     __ptext15:	
  8282 ;; *************** function _handleGesture *****************
  8283 ;; Defined at:
  8284 ;;		line 153 in file "main.c"
  8285 ;; Parameters:    Size  Location     Type
  8286 ;;		None
  8287 ;; Auto vars:     Size  Location     Type
  8288 ;;		None
  8289 ;; Return value:  Size  Location     Type
  8290 ;;                  1    wreg      void 
  8291 ;; Registers used:
  8292 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8293 ;; Tracked objects:
  8294 ;;		On entry : 0/0
  8295 ;;		On exit  : 0/0
  8296 ;;		Unchanged: 0/0
  8297 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8298 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8299 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8300 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8301 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8302 ;;Total ram usage:        1 bytes
  8303 ;; Hardware stack levels used:    1
  8304 ;; Hardware stack levels required when called:   10
  8305 ;; This function calls:
  8306 ;;		_Display_Name
  8307 ;;		_Noise
  8308 ;;		_readGesture
  8309 ;; This function is called by:
  8310 ;;		_main
  8311 ;; This function uses a non-reentrant model
  8312 ;;
  8313                           
  8314                           
  8315                           ;psect for function _handleGesture
  8316  0719                     _handleGesture:	
  8317                           
  8318                           ;main.c: 154:     switch(readGesture()) {
  8319                           
  8320                           ;incstack = 0
  8321                           ; Regs used in _handleGesture: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8322  0719  2F85               	goto	l7700
  8323  071A                     l7652:	
  8324                           
  8325                           ;main.c: 156:             Noise();
  8326  071A  3188  2028  3187   	fcall	_Noise
  8327                           
  8328                           ;main.c: 157:             brightness--;
  8329  071D  30FF               	movlw	255
  8330  071E  0020               	movlb	0	; select bank0
  8331  071F  07EC               	addwf	_brightness,f
  8332  0720  30FF               	movlw	255
  8333  0721  3DED               	addwfc	_brightness+1,f
  8334                           
  8335                           ;main.c: 158:             if(brightness < 0) {
  8336  0722  1FED               	btfss	_brightness+1,7
  8337  0723  2FA2               	goto	l7702
  8338                           
  8339                           ;main.c: 159:                 brightness = 0;
  8340  0724  01EC               	clrf	_brightness
  8341  0725  01ED               	clrf	_brightness+1
  8342  0726  2FA2               	goto	l7702
  8343  0727                     l7660:	
  8344                           
  8345                           ;main.c: 164:             Noise();
  8346  0727  3188  2028  3187   	fcall	_Noise
  8347                           
  8348                           ;main.c: 165:             ++brightness;
  8349  072A  3001               	movlw	1
  8350  072B  0020               	movlb	0	; select bank0
  8351  072C  07EC               	addwf	_brightness,f
  8352  072D  3000               	movlw	0
  8353  072E  3DED               	addwfc	_brightness+1,f
  8354                           
  8355                           ;main.c: 166:             if(brightness > 7) {
  8356  072F  086D               	movf	_brightness+1,w
  8357  0730  3A80               	xorlw	128
  8358  0731  00D9               	movwf	??_handleGesture
  8359  0732  3080               	movlw	128
  8360  0733  0259               	subwf	??_handleGesture,w
  8361  0734  3008               	movlw	8
  8362  0735  1903               	btfsc	3,2
  8363  0736  026C               	subwf	_brightness,w
  8364  0737  1C03               	skipc
  8365  0738  2FA2               	goto	l7702
  8366                           
  8367                           ;main.c: 167:                 brightness = 7;
  8368  0739  3007               	movlw	7
  8369  073A  0020               	movlb	0	; select bank0
  8370  073B  00EC               	movwf	_brightness
  8371  073C  3000               	movlw	0
  8372  073D  00ED               	movwf	_brightness+1
  8373  073E  2FA2               	goto	l7702
  8374  073F                     l7668:	
  8375                           
  8376                           ;main.c: 172:             Noise();
  8377  073F  3188  2028  3187   	fcall	_Noise
  8378                           
  8379                           ;main.c: 173:             printed = 0;
  8380  0742  0020               	movlb	0	; select bank0
  8381  0743  01E9               	clrf	_printed
  8382                           
  8383                           ;main.c: 176:             name++;
  8384  0744  3001               	movlw	1
  8385  0745  07DA               	addwf	_name,f
  8386  0746  3000               	movlw	0
  8387  0747  3DDB               	addwfc	_name+1,f
  8388                           
  8389                           ;main.c: 177:             if(name > 3) {
  8390  0748  085B               	movf	_name+1,w
  8391  0749  3A80               	xorlw	128
  8392  074A  00D9               	movwf	??_handleGesture
  8393  074B  3080               	movlw	128
  8394  074C  0259               	subwf	??_handleGesture,w
  8395  074D  1D03               	skipz
  8396  074E  2F51               	goto	u6945
  8397  074F  3004               	movlw	4
  8398  0750  025A               	subwf	_name,w
  8399  0751                     u6945:	
  8400  0751  1C03               	skipc
  8401  0752  2F56               	goto	l7678
  8402                           
  8403                           ;main.c: 178:                 name = 0;
  8404  0753  0020               	movlb	0	; select bank0
  8405  0754  01DA               	clrf	_name
  8406  0755  01DB               	clrf	_name+1
  8407  0756                     l7678:	
  8408                           
  8409                           ;main.c: 180:             Display_Name(names[name]);
  8410  0756  0020               	movlb	0	; select bank0
  8411  0757  355A               	lslf	_name,w
  8412  0758  3ED2               	addlw	(low (_names| (0+256)))& (0+255)
  8413  0759  0086               	movwf	6
  8414  075A  3001               	movlw	1	; select bank3/4
  8415  075B  0087               	movwf	7
  8416  075C  3F40               	moviw [0]fsr1
  8417  075D  00A5               	movwf	Display_Name@string1
  8418  075E  3F41               	moviw [1]fsr1
  8419  075F  00A6               	movwf	Display_Name@string1+1
  8420  0760  318B  23BE  3187   	fcall	_Display_Name
  8421                           
  8422                           ;main.c: 181:             break;
  8423  0763  2FA2               	goto	l7702
  8424  0764                     l7680:	
  8425                           
  8426                           ;main.c: 183:             Noise();
  8427  0764  3188  2028  3187   	fcall	_Noise
  8428                           
  8429                           ;main.c: 184:             printed = 0;
  8430  0767  0020               	movlb	0	; select bank0
  8431  0768  01E9               	clrf	_printed
  8432                           
  8433                           ;main.c: 185:             --name;
  8434  0769  30FF               	movlw	255
  8435  076A  07DA               	addwf	_name,f
  8436  076B  30FF               	movlw	255
  8437  076C  3DDB               	addwfc	_name+1,f
  8438                           
  8439                           ;main.c: 186:             if(name < 0) {
  8440  076D  1FDB               	btfss	_name+1,7
  8441  076E  2F73               	goto	l7690
  8442                           
  8443                           ;main.c: 187:                 name = 3;
  8444  076F  3003               	movlw	3
  8445  0770  00DA               	movwf	_name
  8446  0771  3000               	movlw	0
  8447  0772  00DB               	movwf	_name+1
  8448  0773                     l7690:	
  8449                           
  8450                           ;main.c: 189:             Display_Name(names[name]);
  8451  0773  355A               	lslf	_name,w
  8452  0774  3ED2               	addlw	(low (_names| (0+256)))& (0+255)
  8453  0775  0086               	movwf	6
  8454  0776  3001               	movlw	1	; select bank3/4
  8455  0777  0087               	movwf	7
  8456  0778  3F40               	moviw [0]fsr1
  8457  0779  00A5               	movwf	Display_Name@string1
  8458  077A  3F41               	moviw [1]fsr1
  8459  077B  00A6               	movwf	Display_Name@string1+1
  8460  077C  318B  23BE  3187   	fcall	_Display_Name
  8461                           
  8462                           ;main.c: 190:             break;
  8463  077F  2FA2               	goto	l7702
  8464  0780                     l7692:	
  8465                           
  8466                           ;main.c: 193:             _delay((unsigned long)((10)*(500000/4000.0)));
  8467  0780  30FA               	movlw	250
  8468  0781                     u7097:	
  8469  0781  3200               	nop2
  8470  0782  0B89               	decfsz	9,f
  8471  0783  2F81               	goto	u7097
  8472                           
  8473                           ;main.c: 194:             break;
  8474  0784  2FA2               	goto	l7702
  8475  0785                     l7700:	
  8476  0785  318F  2704  3187   	fcall	_readGesture
  8477                           
  8478                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8479                           ; Switch size 1, requested type "simple"
  8480                           ; Number of cases is 1, Range of values is 0 to 0
  8481                           ; switch strategies available:
  8482                           ; Name         Instructions Cycles
  8483                           ; simple_byte            4     3 (average)
  8484                           ; direct_byte            8     6 (fixed)
  8485                           ; jumptable            260     6 (fixed)
  8486                           ;	Chosen strategy is simple_byte
  8487  0788  0020               	movlb	0	; select bank0
  8488  0789  0850               	movf	?_readGesture+1,w
  8489  078A  3A00               	xorlw	0	; case 0
  8490  078B  1903               	skipnz
  8491  078C  2F8E               	goto	l7942
  8492  078D  2F80               	goto	l7692
  8493  078E                     l7942:	
  8494                           
  8495                           ; Switch size 1, requested type "simple"
  8496                           ; Number of cases is 6, Range of values is 1 to 6
  8497                           ; switch strategies available:
  8498                           ; Name         Instructions Cycles
  8499                           ; simple_byte           19    10 (average)
  8500                           ; direct_byte           21     9 (fixed)
  8501                           ; jumptable            263     9 (fixed)
  8502                           ;	Chosen strategy is simple_byte
  8503  078E  084F               	movf	?_readGesture,w
  8504  078F  3A01               	xorlw	1	; case 1
  8505  0790  1903               	skipnz
  8506  0791  2F3F               	goto	l7668
  8507  0792  3A03               	xorlw	3	; case 2
  8508  0793  1903               	skipnz
  8509  0794  2F64               	goto	l7680
  8510  0795  3A01               	xorlw	1	; case 3
  8511  0796  1903               	skipnz
  8512  0797  2F1A               	goto	l7652
  8513  0798  3A07               	xorlw	7	; case 4
  8514  0799  1903               	skipnz
  8515  079A  2F27               	goto	l7660
  8516  079B  3A01               	xorlw	1	; case 5
  8517  079C  1903               	skipnz
  8518  079D  2F80               	goto	l7692
  8519  079E  3A03               	xorlw	3	; case 6
  8520  079F  1903               	skipnz
  8521  07A0  2F80               	goto	l7692
  8522  07A1  2F80               	goto	l7692
  8523  07A2                     l7702:	
  8524                           
  8525                           ;main.c: 204:     printed = 0;
  8526  07A2  0020               	movlb	0	; select bank0
  8527  07A3  01E9               	clrf	_printed
  8528  07A4  0008               	return
  8529  07A5                     __end_of_handleGesture:	
  8530                           
  8531                           	psect	text16
  8532  0F04                     __ptext16:	
  8533 ;; *************** function _readGesture *****************
  8534 ;; Defined at:
  8535 ;;		line 556 in file "APDS9960.c"
  8536 ;; Parameters:    Size  Location     Type
  8537 ;;		None
  8538 ;; Auto vars:     Size  Location     Type
  8539 ;;  fifo_data      64    0[BANK2 ] unsigned char [64]
  8540 ;;  fifo_data2     64    0[BANK1 ] unsigned char [64]
  8541 ;;  i               2    0[BANK3 ] int 
  8542 ;;  bytes_read      2   54[BANK0 ] int 
  8543 ;;  motion          2   51[BANK0 ] int 
  8544 ;;  fifo_level      1   56[BANK0 ] unsigned char 
  8545 ;;  gstatus         1   53[BANK0 ] unsigned char 
  8546 ;; Return value:  Size  Location     Type
  8547 ;;                  2   47[BANK0 ] int 
  8548 ;; Registers used:
  8549 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8550 ;; Tracked objects:
  8551 ;;		On entry : 0/0
  8552 ;;		On exit  : 0/0
  8553 ;;		Unchanged: 0/0
  8554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8555 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8556 ;;      Locals:         0       6      64      64       2       0       0       0       0       0       0       0       
      +0       0
  8557 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8558 ;;      Totals:         0      10      64      64       2       0       0       0       0       0       0       0       
      +0       0
  8559 ;;Total ram usage:      140 bytes
  8560 ;; Hardware stack levels used:    1
  8561 ;; Hardware stack levels required when called:    9
  8562 ;; This function calls:
  8563 ;;		_decodeGesture
  8564 ;;		_getMode
  8565 ;;		_isGestureAvailable
  8566 ;;		_processGestureData
  8567 ;;		_resetGestureParameters
  8568 ;;		_wireReadDataBlock
  8569 ;;		_wireReadDataByte
  8570 ;; This function is called by:
  8571 ;;		_handleGesture
  8572 ;; This function uses a non-reentrant model
  8573 ;;
  8574                           
  8575                           
  8576                           ;psect for function _readGesture
  8577  0F04                     _readGesture:	
  8578                           
  8579                           ;APDS9960.c: 559:     int bytes_read = 0;
  8580                           
  8581                           ;incstack = 0
  8582                           ; Regs used in _readGesture: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8583  0F04  0020               	movlb	0	; select bank0
  8584  0F05  01D6               	clrf	readGesture@bytes_read
  8585  0F06  01D7               	clrf	readGesture@bytes_read+1
  8586                           
  8587                           ;APDS9960.c: 560:     uint8_t fifo_data[64];;APDS9960.c: 561:     uint8_t fifo_data2[64]
      +                          ;;APDS9960.c: 562:     uint8_t gstatus;;APDS9960.c: 563:     int motion;;APDS9960.c: 564
      +                          :     int i;;APDS9960.c: 567:     if( !isGestureAvailable() || !(getMode() & 0b01000001)
      +                           ) {
  8588  0F07  3197  2775  318F   	fcall	_isGestureAvailable
  8589  0F0A  3A00               	xorlw	0
  8590  0F0B  1903               	skipnz
  8591  0F0C  2F13               	goto	l7032
  8592  0F0D  3187  27F7  318F   	fcall	_getMode
  8593  0F10  3941               	andlw	65
  8594  0F11  1D03               	btfss	3,2
  8595  0F12  2FD1               	goto	l7036
  8596  0F13                     l7032:	
  8597                           
  8598                           ;APDS9960.c: 568:         return DIR_NONE;
  8599  0F13  0020               	movlb	0	; select bank0
  8600  0F14  01CF               	clrf	?_readGesture
  8601  0F15  01D0               	clrf	?_readGesture+1
  8602  0F16  0008               	return
  8603  0F17                     l7042:	
  8604                           ;APDS9960.c: 569:     }
  8605                           
  8606                           
  8607                           ;APDS9960.c: 584:         {;APDS9960.c: 586:          fifo_level= wireReadDataByte(0xAE)
      +                          ;
  8608  0F17  30AE               	movlw	174
  8609  0F18  3189  2135  318F   	fcall	_wireReadDataByte
  8610  0F1B  0020               	movlb	0	; select bank0
  8611  0F1C  00D1               	movwf	??_readGesture
  8612  0F1D  0851               	movf	??_readGesture,w
  8613  0F1E  00D8               	movwf	readGesture@fifo_level
  8614                           
  8615                           ;APDS9960.c: 590:             if( fifo_level > 0) {
  8616  0F1F  0858               	movf	readGesture@fifo_level,w
  8617  0F20  1903               	btfsc	3,2
  8618  0F21  2FD1               	goto	l7036
  8619                           
  8620                           ;APDS9960.c: 592:               if(fifo_level < 17)
  8621  0F22  3011               	movlw	17
  8622  0F23  0258               	subwf	readGesture@fifo_level,w
  8623  0F24  1803               	skipnc
  8624  0F25  2F2A               	goto	l7050
  8625                           
  8626                           ;APDS9960.c: 593:               {;APDS9960.c: 594:                 bytes_read = wireRead
      +                          DataBlock( 0xFC,
  8627  0F26  3020               	movlw	low readGesture@fifo_data
  8628  0F27  00A6               	movwf	wireReadDataBlock@val
  8629  0F28  3001               	movlw	high readGesture@fifo_data
  8630  0F29  2F2D               	goto	L1
  8631  0F2A                     l7050:	
  8632                           ;APDS9960.c: 597:               } else
  8633                           
  8634                           
  8635                           ;APDS9960.c: 598:               {;APDS9960.c: 599:                 bytes_read = wireRead
      +                          DataBlock( 0xFC,
  8636  0F2A  30A0               	movlw	low readGesture@fifo_data2
  8637  0F2B  00A6               	movwf	wireReadDataBlock@val
  8638  0F2C  3000               	movlw	high readGesture@fifo_data2
  8639  0F2D                     L1:	
  8640  0F2D  00A7               	movwf	wireReadDataBlock@val+1
  8641  0F2E  0858               	movf	readGesture@fifo_level,w
  8642  0F2F  00D1               	movwf	??_readGesture
  8643  0F30  01D2               	clrf	??_readGesture+1
  8644  0F31  35D1               	lslf	??_readGesture,f
  8645  0F32  0DD2               	rlf	??_readGesture+1,f
  8646  0F33  35D1               	lslf	??_readGesture,f
  8647  0F34  0DD2               	rlf	??_readGesture+1,f
  8648  0F35  0851               	movf	??_readGesture,w
  8649  0F36  00A8               	movwf	wireReadDataBlock@len
  8650  0F37  0852               	movf	??_readGesture+1,w
  8651  0F38  00A9               	movwf	wireReadDataBlock@len+1
  8652  0F39  30FC               	movlw	252
  8653  0F3A  318D  2511  318F   	fcall	_wireReadDataBlock
  8654  0F3D  0020               	movlb	0	; select bank0
  8655  0F3E  0827               	movf	?_wireReadDataBlock+1,w
  8656  0F3F  00D7               	movwf	readGesture@bytes_read+1
  8657  0F40  0826               	movf	?_wireReadDataBlock,w
  8658  0F41  00D6               	movwf	readGesture@bytes_read
  8659                           
  8660                           ;APDS9960.c: 605:                 if( bytes_read == -1 )
  8661  0F42  0A56               	incf	readGesture@bytes_read,w
  8662  0F43  1D03               	skipz
  8663  0F44  2F4D               	goto	l7058
  8664  0F45  0A57               	incf	readGesture@bytes_read+1,w
  8665  0F46  1D03               	btfss	3,2
  8666  0F47  2F4D               	goto	l7058
  8667                           
  8668                           ;APDS9960.c: 606:                 {;APDS9960.c: 607:                     return 0xFF;
  8669  0F48  30FF               	movlw	255
  8670  0F49  00CF               	movwf	?_readGesture
  8671  0F4A  3000               	movlw	0
  8672  0F4B  00D0               	movwf	?_readGesture+1
  8673  0F4C  0008               	return
  8674  0F4D                     l7058:	
  8675                           
  8676                           ;APDS9960.c: 612:                 if( bytes_read >= 4 )
  8677  0F4D  0857               	movf	readGesture@bytes_read+1,w
  8678  0F4E  3A80               	xorlw	128
  8679  0F4F  00D1               	movwf	??_readGesture
  8680  0F50  3080               	movlw	128
  8681  0F51  0251               	subwf	??_readGesture,w
  8682  0F52  1D03               	skipz
  8683  0F53  2F56               	goto	u6115
  8684  0F54  3004               	movlw	4
  8685  0F55  0256               	subwf	readGesture@bytes_read,w
  8686  0F56                     u6115:	
  8687  0F56  1C03               	skipc
  8688  0F57  2FD1               	goto	l7036
  8689                           
  8690                           ;APDS9960.c: 613:                 {;APDS9960.c: 615:                     for( i = 0; i <
      +                           bytes_read; i += 4 ) {
  8691  0F58  0023               	movlb	3	; select bank3
  8692  0F59  01E0               	clrf	readGesture@i^(0+384)
  8693  0F5A  01E1               	clrf	(readGesture@i+1)^(0+384)
  8694  0F5B                     l7070:	
  8695  0F5B  0861               	movf	(readGesture@i+1)^(0+384),w
  8696  0F5C  3A80               	xorlw	128
  8697  0F5D  0020               	movlb	0	; select bank0
  8698  0F5E  00D1               	movwf	??_readGesture
  8699  0F5F  0857               	movf	readGesture@bytes_read+1,w
  8700  0F60  3A80               	xorlw	128
  8701  0F61  0251               	subwf	??_readGesture,w
  8702  0F62  1D03               	skipz
  8703  0F63  2F67               	goto	u6125
  8704  0F64  0856               	movf	readGesture@bytes_read,w
  8705  0F65  0023               	movlb	3	; select bank3
  8706  0F66  0260               	subwf	readGesture@i^(0+384),w
  8707  0F67                     u6125:	
  8708  0F67  1803               	btfsc	3,0
  8709  0F68  2FC5               	goto	l7072
  8710                           
  8711                           ;APDS9960.c: 616:                         gesture_data_.u_data[gesture_data_.index] = fi
      +                          fo_data[i + 0];
  8712  0F69  0023               	movlb	3	; select bank3
  8713  0F6A  0860               	movf	readGesture@i^(0+384),w
  8714  0F6B  3E20               	addlw	(low (readGesture@fifo_data| (0+256)))& (0+255)
  8715  0F6C  0086               	movwf	6
  8716  0F6D  3001               	movlw	1	; select bank2/3
  8717  0F6E  0087               	movwf	7
  8718  0F6F  0801               	movf	1,w
  8719  0F70  0020               	movlb	0	; select bank0
  8720  0F71  00D1               	movwf	??_readGesture
  8721  0F72  0024               	movlb	4	; select bank4
  8722  0F73  0860               	movf	(_gesture_data_^(0+512)+64),w
  8723  0F74  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  8724  0F75  0086               	movwf	6
  8725  0F76  3002               	movlw	2	; select bank4/5
  8726  0F77  0087               	movwf	7
  8727  0F78  0020               	movlb	0	; select bank0
  8728  0F79  0851               	movf	??_readGesture,w
  8729  0F7A  0081               	movwf	1
  8730                           
  8731                           ;APDS9960.c: 618:                         gesture_data_.d_data[gesture_data_.index] = fi
      +                          fo_data[i + 1];
  8732  0F7B  0023               	movlb	3	; select bank3
  8733  0F7C  0860               	movf	readGesture@i^(0+384),w
  8734  0F7D  3E01               	addlw	1
  8735  0F7E  3E20               	addlw	(low (readGesture@fifo_data| (0+256)))& (0+255)
  8736  0F7F  0086               	movwf	6
  8737  0F80  3001               	movlw	1	; select bank2/3
  8738  0F81  0087               	movwf	7
  8739  0F82  0801               	movf	1,w
  8740  0F83  0020               	movlb	0	; select bank0
  8741  0F84  00D1               	movwf	??_readGesture
  8742  0F85  0024               	movlb	4	; select bank4
  8743  0F86  0860               	movf	(_gesture_data_^(0+512)+64),w
  8744  0F87  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  8745  0F88  0086               	movwf	6
  8746  0F89  3002               	movlw	2	; select bank4/5
  8747  0F8A  0087               	movwf	7
  8748  0F8B  0020               	movlb	0	; select bank0
  8749  0F8C  0851               	movf	??_readGesture,w
  8750  0F8D  0081               	movwf	1
  8751                           
  8752                           ;APDS9960.c: 620:                         gesture_data_.l_data[gesture_data_.index] = fi
      +                          fo_data[i + 2];
  8753  0F8E  0023               	movlb	3	; select bank3
  8754  0F8F  0860               	movf	readGesture@i^(0+384),w
  8755  0F90  3E02               	addlw	2
  8756  0F91  3E20               	addlw	(low (readGesture@fifo_data| (0+256)))& (0+255)
  8757  0F92  0086               	movwf	6
  8758  0F93  3001               	movlw	1	; select bank2/3
  8759  0F94  0087               	movwf	7
  8760  0F95  0801               	movf	1,w
  8761  0F96  0020               	movlb	0	; select bank0
  8762  0F97  00D1               	movwf	??_readGesture
  8763  0F98  0024               	movlb	4	; select bank4
  8764  0F99  0860               	movf	(_gesture_data_^(0+512)+64),w
  8765  0F9A  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  8766  0F9B  0086               	movwf	6
  8767  0F9C  3002               	movlw	2	; select bank4/5
  8768  0F9D  0087               	movwf	7
  8769  0F9E  0020               	movlb	0	; select bank0
  8770  0F9F  0851               	movf	??_readGesture,w
  8771  0FA0  0081               	movwf	1
  8772                           
  8773                           ;APDS9960.c: 622:                         gesture_data_.r_data[gesture_data_.index] = fi
      +                          fo_data[i + 3];
  8774  0FA1  0023               	movlb	3	; select bank3
  8775  0FA2  0860               	movf	readGesture@i^(0+384),w
  8776  0FA3  3E03               	addlw	3
  8777  0FA4  3E20               	addlw	(low (readGesture@fifo_data| (0+256)))& (0+255)
  8778  0FA5  0086               	movwf	6
  8779  0FA6  3001               	movlw	1	; select bank2/3
  8780  0FA7  0087               	movwf	7
  8781  0FA8  0801               	movf	1,w
  8782  0FA9  0020               	movlb	0	; select bank0
  8783  0FAA  00D1               	movwf	??_readGesture
  8784  0FAB  0024               	movlb	4	; select bank4
  8785  0FAC  0860               	movf	(_gesture_data_^(0+512)+64),w
  8786  0FAD  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  8787  0FAE  0086               	movwf	6
  8788  0FAF  3002               	movlw	2	; select bank4/5
  8789  0FB0  0087               	movwf	7
  8790  0FB1  0020               	movlb	0	; select bank0
  8791  0FB2  0851               	movf	??_readGesture,w
  8792  0FB3  0081               	movwf	1
  8793                           
  8794                           ;APDS9960.c: 624:                         gesture_data_.index++;
  8795  0FB4  3001               	movlw	1
  8796  0FB5  00D1               	movwf	??_readGesture
  8797  0FB6  0851               	movf	??_readGesture,w
  8798  0FB7  0024               	movlb	4	; select bank4
  8799  0FB8  07E0               	addwf	(_gesture_data_^(0+512)+64),f
  8800                           
  8801                           ;APDS9960.c: 625:                         gesture_data_.total_gestures++;
  8802  0FB9  3001               	movlw	1
  8803  0FBA  0020               	movlb	0	; select bank0
  8804  0FBB  00D1               	movwf	??_readGesture
  8805  0FBC  0851               	movf	??_readGesture,w
  8806  0FBD  0024               	movlb	4	; select bank4
  8807  0FBE  07E1               	addwf	(_gesture_data_^(0+512)+65),f
  8808                           
  8809                           ;APDS9960.c: 626:                     }
  8810  0FBF  3004               	movlw	4
  8811  0FC0  0023               	movlb	3	; select bank3
  8812  0FC1  07E0               	addwf	readGesture@i^(0+384),f
  8813  0FC2  3000               	movlw	0
  8814  0FC3  3DE1               	addwfc	(readGesture@i+1)^(0+384),f
  8815  0FC4  2F5B               	goto	l7070
  8816  0FC5                     l7072:	
  8817                           
  8818                           ;APDS9960.c: 629:                     if( processGestureData() )
  8819  0FC5  3180  20A4  318F   	fcall	_processGestureData
  8820  0FC8  3A00               	xorlw	0
  8821  0FC9  1903               	skipnz
  8822  0FCA  2FCE               	goto	l7076
  8823                           
  8824                           ;APDS9960.c: 630:                     {;APDS9960.c: 632:                         if( dec
      +                          odeGesture() ) {
  8825  0FCB  3183  2374  318F   	fcall	_decodeGesture
  8826  0FCE                     l7076:	
  8827                           
  8828                           ;APDS9960.c: 638:                     gesture_data_.index = 0;
  8829  0FCE  0024               	movlb	4	; select bank4
  8830  0FCF  01E0               	clrf	(_gesture_data_^(0+512)+64)
  8831                           
  8832                           ;APDS9960.c: 639:                     gesture_data_.total_gestures = 0;
  8833  0FD0  01E1               	clrf	(_gesture_data_^(0+512)+65)
  8834  0FD1                     l7036:	
  8835                           
  8836                           ;APDS9960.c: 575:         _delay((unsigned long)((30)*(500000/4000.0)));
  8837  0FD1  3005               	movlw	5
  8838  0FD2  0020               	movlb	0	; select bank0
  8839  0FD3  00D1               	movwf	??_readGesture
  8840  0FD4  30DD               	movlw	221
  8841  0FD5                     u7107:	
  8842  0FD5  0B89               	decfsz	9,f
  8843  0FD6  2FD5               	goto	u7107
  8844  0FD7  0BD1               	decfsz	??_readGesture,f
  8845  0FD8  2FD5               	goto	u7107
  8846  0FD9  3200               	nop2
  8847                           
  8848                           ;APDS9960.c: 578:         gstatus = wireReadDataByte(0xAF);
  8849  0FDA  30AF               	movlw	175
  8850  0FDB  3189  2135  318F   	fcall	_wireReadDataByte
  8851  0FDE  0020               	movlb	0	; select bank0
  8852  0FDF  00D1               	movwf	??_readGesture
  8853  0FE0  0851               	movf	??_readGesture,w
  8854  0FE1  00D5               	movwf	readGesture@gstatus
  8855                           
  8856                           ;APDS9960.c: 583:         if( (gstatus & 0b00000001) == 0b00000001 )
  8857  0FE2  1855               	btfsc	readGesture@gstatus,0
  8858  0FE3  2F17               	goto	l7042
  8859                           
  8860                           ;APDS9960.c: 645:             _delay((unsigned long)((30)*(500000/4000.0)));
  8861  0FE4  3005               	movlw	5
  8862  0FE5  0020               	movlb	0	; select bank0
  8863  0FE6  00D1               	movwf	??_readGesture
  8864  0FE7  30DD               	movlw	221
  8865  0FE8                     u7117:	
  8866  0FE8  0B89               	decfsz	9,f
  8867  0FE9  2FE8               	goto	u7117
  8868  0FEA  0BD1               	decfsz	??_readGesture,f
  8869  0FEB  2FE8               	goto	u7117
  8870  0FEC  3200               	nop2
  8871                           
  8872                           ;APDS9960.c: 646:             decodeGesture();
  8873  0FED  3183  2374  318F   	fcall	_decodeGesture
  8874                           
  8875                           ;APDS9960.c: 647:             motion = gesture_motion_;
  8876  0FF0  0022               	movlb	2	; select bank2
  8877  0FF1  0869               	movf	(_gesture_motion_+1)^(0+256),w
  8878  0FF2  0020               	movlb	0	; select bank0
  8879  0FF3  00D4               	movwf	readGesture@motion+1
  8880  0FF4  0022               	movlb	2	; select bank2
  8881  0FF5  0868               	movf	_gesture_motion_^(0+256),w
  8882  0FF6  0020               	movlb	0	; select bank0
  8883  0FF7  00D3               	movwf	readGesture@motion
  8884                           
  8885                           ;APDS9960.c: 649:             resetGestureParameters();
  8886  0FF8  3188  203F         	fcall	_resetGestureParameters
  8887                           
  8888                           ;APDS9960.c: 651:             return motion;
  8889  0FFA  0020               	movlb	0	; select bank0
  8890  0FFB  0854               	movf	readGesture@motion+1,w
  8891  0FFC  00D0               	movwf	?_readGesture+1
  8892  0FFD  0853               	movf	readGesture@motion,w
  8893  0FFE  00CF               	movwf	?_readGesture
  8894  0FFF  0008               	return
  8895  1000                     __end_of_readGesture:	
  8896                           
  8897                           	psect	text17
  8898  0D11                     __ptext17:	
  8899 ;; *************** function _wireReadDataBlock *****************
  8900 ;; Defined at:
  8901 ;;		line 847 in file "APDS9960.c"
  8902 ;; Parameters:    Size  Location     Type
  8903 ;;  reg             1    wreg     unsigned char 
  8904 ;;  val             2    6[BANK0 ] PTR unsigned char 
  8905 ;;		 -> readGesture@fifo_data2(64), readGesture@fifo_data(64), 
  8906 ;;  len             2    8[BANK0 ] unsigned int 
  8907 ;; Auto vars:     Size  Location     Type
  8908 ;;  reg             1   15[BANK0 ] unsigned char 
  8909 ;;  j               1   16[BANK0 ] unsigned char 
  8910 ;; Return value:  Size  Location     Type
  8911 ;;                  2    6[BANK0 ] int 
  8912 ;; Registers used:
  8913 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8914 ;; Tracked objects:
  8915 ;;		On entry : 0/0
  8916 ;;		On exit  : 0/0
  8917 ;;		Unchanged: 0/0
  8918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8919 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8920 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8921 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8922 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8923 ;;Total ram usage:       11 bytes
  8924 ;; Hardware stack levels used:    1
  8925 ;; Hardware stack levels required when called:    7
  8926 ;; This function calls:
  8927 ;;		_I2C_ReStart
  8928 ;;		_I2C_Read_Byte
  8929 ;;		_I2C_Send_NACK
  8930 ;;		_I2C_Start
  8931 ;;		_I2C_Stop
  8932 ;;		_I2C_Write_Byte
  8933 ;; This function is called by:
  8934 ;;		_readGesture
  8935 ;; This function uses a non-reentrant model
  8936 ;;
  8937                           
  8938                           
  8939                           ;psect for function _wireReadDataBlock
  8940  0D11                     _wireReadDataBlock:	
  8941                           
  8942                           ;incstack = 0
  8943                           ; Regs used in _wireReadDataBlock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8944                           ;wireReadDataBlock@reg stored from wreg
  8945  0D11  0020               	movlb	0	; select bank0
  8946  0D12  00AF               	movwf	wireReadDataBlock@reg
  8947                           
  8948                           ;APDS9960.c: 851:     I2C_Start();
  8949  0D13  3196  261E  318D   	fcall	_I2C_Start
  8950                           
  8951                           ;APDS9960.c: 852:     I2C_Write_Byte((0x39 << 1 )| 0x00);
  8952  0D16  3072               	movlw	114
  8953  0D17  3188  20A4  318D   	fcall	_I2C_Write_Byte
  8954                           
  8955                           ;APDS9960.c: 854:     I2C_Write_Byte(reg);
  8956  0D1A  0020               	movlb	0	; select bank0
  8957  0D1B  082F               	movf	wireReadDataBlock@reg,w
  8958  0D1C  3188  20A4  318D   	fcall	_I2C_Write_Byte
  8959                           
  8960                           ;APDS9960.c: 856:     for(j= 0; j < len ; j++)
  8961  0D1F  0020               	movlb	0	; select bank0
  8962  0D20  01B0               	clrf	wireReadDataBlock@j
  8963  0D21                     l6576:	
  8964  0D21  0830               	movf	wireReadDataBlock@j,w
  8965  0D22  00AA               	movwf	??_wireReadDataBlock
  8966  0D23  01AB               	clrf	??_wireReadDataBlock+1
  8967  0D24  0829               	movf	wireReadDataBlock@len+1,w
  8968  0D25  022B               	subwf	??_wireReadDataBlock+1,w
  8969  0D26  1D03               	skipz
  8970  0D27  2D2A               	goto	u5275
  8971  0D28  0828               	movf	wireReadDataBlock@len,w
  8972  0D29  022A               	subwf	??_wireReadDataBlock,w
  8973  0D2A                     u5275:	
  8974  0D2A  1803               	btfsc	3,0
  8975  0D2B  2D50               	goto	l6578
  8976                           
  8977                           ;APDS9960.c: 857:     {;APDS9960.c: 859:       I2C_ReStart();
  8978  0D2C  3196  260F  318D   	fcall	_I2C_ReStart
  8979                           
  8980                           ;APDS9960.c: 860:       I2C_Write_Byte((0x39 << 1) | 0x01);
  8981  0D2F  3073               	movlw	115
  8982  0D30  3188  20A4  318D   	fcall	_I2C_Write_Byte
  8983                           
  8984                           ;APDS9960.c: 861:       val[j]=I2C_Read_Byte();
  8985  0D33  3197  2719  318D   	fcall	_I2C_Read_Byte
  8986  0D36  0020               	movlb	0	; select bank0
  8987  0D37  00AA               	movwf	??_wireReadDataBlock
  8988  0D38  0830               	movf	wireReadDataBlock@j,w
  8989  0D39  00AB               	movwf	??_wireReadDataBlock+1
  8990  0D3A  01AC               	clrf	??_wireReadDataBlock+2
  8991  0D3B  082B               	movf	??_wireReadDataBlock+1,w
  8992  0D3C  0726               	addwf	wireReadDataBlock@val,w
  8993  0D3D  00AD               	movwf	??_wireReadDataBlock+3
  8994  0D3E  082C               	movf	??_wireReadDataBlock+2,w
  8995  0D3F  3D27               	addwfc	wireReadDataBlock@val+1,w
  8996  0D40  00AE               	movwf	??_wireReadDataBlock+4
  8997  0D41  082D               	movf	??_wireReadDataBlock+3,w
  8998  0D42  0086               	movwf	6
  8999  0D43  082E               	movf	??_wireReadDataBlock+4,w
  9000  0D44  0087               	movwf	7
  9001  0D45  082A               	movf	??_wireReadDataBlock,w
  9002  0D46  0081               	movwf	1
  9003                           
  9004                           ;APDS9960.c: 862:       I2C_Send_NACK();
  9005  0D47  3196  2618  318D   	fcall	_I2C_Send_NACK
  9006                           
  9007                           ;APDS9960.c: 864:     }
  9008  0D4A  3001               	movlw	1
  9009  0D4B  0020               	movlb	0	; select bank0
  9010  0D4C  00AA               	movwf	??_wireReadDataBlock
  9011  0D4D  082A               	movf	??_wireReadDataBlock,w
  9012  0D4E  07B0               	addwf	wireReadDataBlock@j,f
  9013  0D4F  2D21               	goto	l6576
  9014  0D50                     l6578:	
  9015                           
  9016                           ;APDS9960.c: 866:     I2C_Stop();
  9017  0D50  3196  2624         	fcall	_I2C_Stop
  9018                           
  9019                           ;APDS9960.c: 867:     return (int)j;
  9020  0D52  0020               	movlb	0	; select bank0
  9021  0D53  0830               	movf	wireReadDataBlock@j,w
  9022  0D54  00AA               	movwf	??_wireReadDataBlock
  9023  0D55  01AB               	clrf	??_wireReadDataBlock+1
  9024  0D56  082A               	movf	??_wireReadDataBlock,w
  9025  0D57  00A6               	movwf	?_wireReadDataBlock
  9026  0D58  082B               	movf	??_wireReadDataBlock+1,w
  9027  0D59  00A7               	movwf	?_wireReadDataBlock+1
  9028  0D5A  0008               	return
  9029  0D5B                     __end_of_wireReadDataBlock:	
  9030                           
  9031                           	psect	text18
  9032  00A4                     __ptext18:	
  9033 ;; *************** function _processGestureData *****************
  9034 ;; Defined at:
  9035 ;;		line 657 in file "APDS9960.c"
  9036 ;; Parameters:    Size  Location     Type
  9037 ;;		None
  9038 ;; Auto vars:     Size  Location     Type
  9039 ;;  i               2   45[BANK0 ] int 
  9040 ;;  lr_delta        2   43[BANK0 ] int 
  9041 ;;  ud_delta        2   41[BANK0 ] int 
  9042 ;;  lr_ratio_las    2   23[BANK0 ] int 
  9043 ;;  ud_ratio_las    2   21[BANK0 ] int 
  9044 ;;  lr_ratio_fir    2   19[BANK0 ] int 
  9045 ;;  ud_ratio_fir    2   17[BANK0 ] int 
  9046 ;;  r_first         1   40[BANK0 ] unsigned char 
  9047 ;;  l_first         1   39[BANK0 ] unsigned char 
  9048 ;;  d_first         1   38[BANK0 ] unsigned char 
  9049 ;;  u_first         1   37[BANK0 ] unsigned char 
  9050 ;;  r_last          1   36[BANK0 ] unsigned char 
  9051 ;;  l_last          1   35[BANK0 ] unsigned char 
  9052 ;;  d_last          1   34[BANK0 ] unsigned char 
  9053 ;;  u_last          1   33[BANK0 ] unsigned char 
  9054 ;; Return value:  Size  Location     Type
  9055 ;;                  1    wreg      _Bool 
  9056 ;; Registers used:
  9057 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9058 ;; Tracked objects:
  9059 ;;		On entry : 0/0
  9060 ;;		On exit  : 0/0
  9061 ;;		Unchanged: 0/0
  9062 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9063 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9064 ;;      Locals:         0      30       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9065 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9066 ;;      Totals:         0      32       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9067 ;;Total ram usage:       32 bytes
  9068 ;; Hardware stack levels used:    1
  9069 ;; Hardware stack levels required when called:    6
  9070 ;; This function calls:
  9071 ;;		___awdiv
  9072 ;;		___wmul
  9073 ;; This function is called by:
  9074 ;;		_readGesture
  9075 ;; This function uses a non-reentrant model
  9076 ;;
  9077                           
  9078                           
  9079                           ;psect for function _processGestureData
  9080  00A4                     _processGestureData:	
  9081                           
  9082                           ;APDS9960.c: 659:     uint8_t u_first = 0;
  9083                           
  9084                           ;incstack = 0
  9085                           ; Regs used in _processGestureData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9086  00A4  0020               	movlb	0	; select bank0
  9087  00A5  01C5               	clrf	processGestureData@u_first
  9088                           
  9089                           ;APDS9960.c: 660:     uint8_t d_first = 0;
  9090  00A6  01C6               	clrf	processGestureData@d_first
  9091                           
  9092                           ;APDS9960.c: 661:     uint8_t l_first = 0;
  9093  00A7  01C7               	clrf	processGestureData@l_first
  9094                           
  9095                           ;APDS9960.c: 662:     uint8_t r_first = 0;
  9096  00A8  01C8               	clrf	processGestureData@r_first
  9097                           
  9098                           ;APDS9960.c: 663:     uint8_t u_last = 0;
  9099  00A9  01C1               	clrf	processGestureData@u_last
  9100                           
  9101                           ;APDS9960.c: 664:     uint8_t d_last = 0;
  9102  00AA  01C2               	clrf	processGestureData@d_last
  9103                           
  9104                           ;APDS9960.c: 665:     uint8_t l_last = 0;
  9105  00AB  01C3               	clrf	processGestureData@l_last
  9106                           
  9107                           ;APDS9960.c: 666:     uint8_t r_last = 0;
  9108  00AC  01C4               	clrf	processGestureData@r_last
  9109                           
  9110                           ;APDS9960.c: 667:     int ud_ratio_first;;APDS9960.c: 668:     int lr_ratio_first;;APDS9
      +                          960.c: 669:     int ud_ratio_last;;APDS9960.c: 670:     int lr_ratio_last;;APDS9960.c: 6
      +                          71:     int ud_delta;;APDS9960.c: 672:     int lr_delta;;APDS9960.c: 673:     int i;;APD
      +                          S9960.c: 676:     if( gesture_data_.total_gestures <= 4 ) {
  9111  00AD  3005               	movlw	5
  9112  00AE  0024               	movlb	4	; select bank4
  9113  00AF  0261               	subwf	(_gesture_data_^(0+512)+65),w
  9114  00B0  1803               	skipnc
  9115  00B1  28B4               	goto	l6592
  9116  00B2                     l6588:	
  9117                           
  9118                           ;APDS9960.c: 677:         return 0;
  9119  00B2  3000               	movlw	0
  9120  00B3  0008               	return
  9121  00B4                     l6592:	
  9122                           
  9123                           ;APDS9960.c: 681:     if( (gesture_data_.total_gestures <= 32) && (gesture_data_.total_g
      +                          estures > 0) ) {
  9124  00B4  3021               	movlw	33
  9125  00B5  0261               	subwf	(_gesture_data_^(0+512)+65),w
  9126  00B6  1803               	skipnc
  9127  00B7  297E               	goto	l6642
  9128  00B8  0861               	movf	(_gesture_data_^(0+512)+65),w
  9129  00B9  1903               	btfsc	3,2
  9130  00BA  297E               	goto	l6642
  9131                           
  9132                           ;APDS9960.c: 682: ;APDS9960.c: 685:         for( i = 0; i < gesture_data_.total_gestures
      +                          ; i++ ) {
  9133  00BB  0020               	movlb	0	; select bank0
  9134  00BC  01CD               	clrf	processGestureData@i
  9135  00BD  01CE               	clrf	processGestureData@i+1
  9136  00BE  28C3               	goto	l1293
  9137  00BF                     l6608:	
  9138                           ;APDS9960.c: 695:                 break;
  9139                           
  9140                           
  9141                           ;APDS9960.c: 697:         }
  9142  00BF  3001               	movlw	1
  9143  00C0  07CD               	addwf	processGestureData@i,f
  9144  00C1  3000               	movlw	0
  9145  00C2  3DCE               	addwfc	processGestureData@i+1,f
  9146  00C3                     l1293:	
  9147  00C3  084E               	movf	processGestureData@i+1,w
  9148  00C4  3A80               	xorlw	128
  9149  00C5  00AF               	movwf	??_processGestureData
  9150  00C6  3080               	movlw	128
  9151  00C7  022F               	subwf	??_processGestureData,w
  9152  00C8  1D03               	skipz
  9153  00C9  28CE               	goto	u5355
  9154  00CA  0024               	movlb	4	; select bank4
  9155  00CB  0861               	movf	(_gesture_data_^(0+512)+65),w
  9156  00CC  0020               	movlb	0	; select bank0
  9157  00CD  024D               	subwf	processGestureData@i,w
  9158  00CE                     u5355:	
  9159  00CE  1803               	btfsc	3,0
  9160  00CF  2919               	goto	l6610
  9161                           
  9162                           ;APDS9960.c: 686:             if( (gesture_data_.u_data[i] > 10) &&
  9163  00D0  0020               	movlb	0	; select bank0
  9164  00D1  084D               	movf	processGestureData@i,w
  9165  00D2  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  9166  00D3  0086               	movwf	6
  9167  00D4  3002               	movlw	2	; select bank4/5
  9168  00D5  0087               	movwf	7
  9169  00D6  300B               	movlw	11
  9170  00D7  0201               	subwf	1,w
  9171  00D8  1C03               	skipc
  9172  00D9  28BF               	goto	l6608
  9173  00DA  084D               	movf	processGestureData@i,w
  9174  00DB  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  9175  00DC  0086               	movwf	6
  9176  00DD  3002               	movlw	2	; select bank4/5
  9177  00DE  0087               	movwf	7
  9178  00DF  300B               	movlw	11
  9179  00E0  0201               	subwf	1,w
  9180  00E1  1C03               	skipc
  9181  00E2  28BF               	goto	l6608
  9182  00E3  084D               	movf	processGestureData@i,w
  9183  00E4  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  9184  00E5  0086               	movwf	6
  9185  00E6  3002               	movlw	2	; select bank4/5
  9186  00E7  0087               	movwf	7
  9187  00E8  300B               	movlw	11
  9188  00E9  0201               	subwf	1,w
  9189  00EA  1C03               	skipc
  9190  00EB  28BF               	goto	l6608
  9191  00EC  084D               	movf	processGestureData@i,w
  9192  00ED  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  9193  00EE  0086               	movwf	6
  9194  00EF  3002               	movlw	2	; select bank4/5
  9195  00F0  0087               	movwf	7
  9196  00F1  300B               	movlw	11
  9197  00F2  0201               	subwf	1,w
  9198  00F3  1C03               	skipc
  9199  00F4  28BF               	goto	l6608
  9200                           
  9201                           ;APDS9960.c: 689:                 (gesture_data_.r_data[i] > 10) ) {;APDS9960.c: 691:   
      +                                        u_first = gesture_data_.u_data[i];
  9202  00F5  084D               	movf	processGestureData@i,w
  9203  00F6  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  9204  00F7  0086               	movwf	6
  9205  00F8  3002               	movlw	2	; select bank4/5
  9206  00F9  0087               	movwf	7
  9207  00FA  0801               	movf	1,w
  9208  00FB  00AF               	movwf	??_processGestureData
  9209  00FC  082F               	movf	??_processGestureData,w
  9210  00FD  00C5               	movwf	processGestureData@u_first
  9211                           
  9212                           ;APDS9960.c: 692:                 d_first = gesture_data_.d_data[i];
  9213  00FE  084D               	movf	processGestureData@i,w
  9214  00FF  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  9215  0100  0086               	movwf	6
  9216  0101  3002               	movlw	2	; select bank4/5
  9217  0102  0087               	movwf	7
  9218  0103  0801               	movf	1,w
  9219  0104  00AF               	movwf	??_processGestureData
  9220  0105  082F               	movf	??_processGestureData,w
  9221  0106  00C6               	movwf	processGestureData@d_first
  9222                           
  9223                           ;APDS9960.c: 693:                 l_first = gesture_data_.l_data[i];
  9224  0107  084D               	movf	processGestureData@i,w
  9225  0108  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  9226  0109  0086               	movwf	6
  9227  010A  3002               	movlw	2	; select bank4/5
  9228  010B  0087               	movwf	7
  9229  010C  0801               	movf	1,w
  9230  010D  00AF               	movwf	??_processGestureData
  9231  010E  082F               	movf	??_processGestureData,w
  9232  010F  00C7               	movwf	processGestureData@l_first
  9233                           
  9234                           ;APDS9960.c: 694:                 r_first = gesture_data_.r_data[i];
  9235  0110  084D               	movf	processGestureData@i,w
  9236  0111  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  9237  0112  0086               	movwf	6
  9238  0113  3002               	movlw	2	; select bank4/5
  9239  0114  0087               	movwf	7
  9240  0115  0801               	movf	1,w
  9241  0116  00AF               	movwf	??_processGestureData
  9242  0117  082F               	movf	??_processGestureData,w
  9243  0118  00C8               	movwf	processGestureData@r_first
  9244  0119                     l6610:	
  9245                           
  9246                           ;APDS9960.c: 700:         if( (u_first == 0) || (d_first == 0) || (l_first == 0) || (r_f
      +                          irst == 0) ) {
  9247  0119  0020               	movlb	0	; select bank0
  9248  011A  0845               	movf	processGestureData@u_first,w
  9249  011B  1903               	btfsc	3,2
  9250  011C  28B2               	goto	l6588
  9251  011D  0846               	movf	processGestureData@d_first,w
  9252  011E  1903               	btfsc	3,2
  9253  011F  28B2               	goto	l6588
  9254  0120  0847               	movf	processGestureData@l_first,w
  9255  0121  1903               	btfsc	3,2
  9256  0122  28B2               	goto	l6588
  9257  0123  0848               	movf	processGestureData@r_first,w
  9258  0124  1903               	btfsc	3,2
  9259  0125  28B2               	goto	l6588
  9260                           
  9261                           ;APDS9960.c: 706:         for( i = gesture_data_.total_gestures - 1; i >= 0; i-- ) {
  9262  0126  0024               	movlb	4	; select bank4
  9263  0127  0861               	movf	(_gesture_data_^(0+512)+65),w
  9264  0128  3EFF               	addlw	255
  9265  0129  0020               	movlb	0	; select bank0
  9266  012A  00CD               	movwf	processGestureData@i
  9267  012B  30FF               	movlw	255
  9268  012C  1803               	skipnc
  9269  012D  3000               	movlw	0
  9270  012E  00CE               	movwf	processGestureData@i+1
  9271                           
  9272                           ;APDS9960.c: 717:                 break;
  9273  012F  2934               	goto	l6624
  9274  0130                     l6638:	
  9275                           
  9276                           ;APDS9960.c: 719:         }
  9277  0130  30FF               	movlw	255
  9278  0131  07CD               	addwf	processGestureData@i,f
  9279  0132  30FF               	movlw	255
  9280  0133  3DCE               	addwfc	processGestureData@i+1,f
  9281  0134                     l6624:	
  9282  0134  1BCE               	btfsc	processGestureData@i+1,7
  9283  0135  297E               	goto	l6642
  9284                           
  9285                           ;APDS9960.c: 708:             if( (gesture_data_.u_data[i] > 10) &&
  9286  0136  084D               	movf	processGestureData@i,w
  9287  0137  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  9288  0138  0086               	movwf	6
  9289  0139  3002               	movlw	2	; select bank4/5
  9290  013A  0087               	movwf	7
  9291  013B  300B               	movlw	11
  9292  013C  0201               	subwf	1,w
  9293  013D  1C03               	skipc
  9294  013E  2930               	goto	l6638
  9295  013F  084D               	movf	processGestureData@i,w
  9296  0140  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  9297  0141  0086               	movwf	6
  9298  0142  3002               	movlw	2	; select bank4/5
  9299  0143  0087               	movwf	7
  9300  0144  300B               	movlw	11
  9301  0145  0201               	subwf	1,w
  9302  0146  1C03               	skipc
  9303  0147  2930               	goto	l6638
  9304  0148  084D               	movf	processGestureData@i,w
  9305  0149  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  9306  014A  0086               	movwf	6
  9307  014B  3002               	movlw	2	; select bank4/5
  9308  014C  0087               	movwf	7
  9309  014D  300B               	movlw	11
  9310  014E  0201               	subwf	1,w
  9311  014F  1C03               	skipc
  9312  0150  2930               	goto	l6638
  9313  0151  084D               	movf	processGestureData@i,w
  9314  0152  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  9315  0153  0086               	movwf	6
  9316  0154  3002               	movlw	2	; select bank4/5
  9317  0155  0087               	movwf	7
  9318  0156  300B               	movlw	11
  9319  0157  0201               	subwf	1,w
  9320  0158  1C03               	skipc
  9321  0159  2930               	goto	l6638
  9322                           
  9323                           ;APDS9960.c: 711:                 (gesture_data_.r_data[i] > 10) ) {;APDS9960.c: 713:   
      +                                        u_last = gesture_data_.u_data[i];
  9324  015A  084D               	movf	processGestureData@i,w
  9325  015B  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  9326  015C  0086               	movwf	6
  9327  015D  3002               	movlw	2	; select bank4/5
  9328  015E  0087               	movwf	7
  9329  015F  0801               	movf	1,w
  9330  0160  00AF               	movwf	??_processGestureData
  9331  0161  082F               	movf	??_processGestureData,w
  9332  0162  00C1               	movwf	processGestureData@u_last
  9333                           
  9334                           ;APDS9960.c: 714:                 d_last = gesture_data_.d_data[i];
  9335  0163  084D               	movf	processGestureData@i,w
  9336  0164  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  9337  0165  0086               	movwf	6
  9338  0166  3002               	movlw	2	; select bank4/5
  9339  0167  0087               	movwf	7
  9340  0168  0801               	movf	1,w
  9341  0169  00AF               	movwf	??_processGestureData
  9342  016A  082F               	movf	??_processGestureData,w
  9343  016B  00C2               	movwf	processGestureData@d_last
  9344                           
  9345                           ;APDS9960.c: 715:                 l_last = gesture_data_.l_data[i];
  9346  016C  084D               	movf	processGestureData@i,w
  9347  016D  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  9348  016E  0086               	movwf	6
  9349  016F  3002               	movlw	2	; select bank4/5
  9350  0170  0087               	movwf	7
  9351  0171  0801               	movf	1,w
  9352  0172  00AF               	movwf	??_processGestureData
  9353  0173  082F               	movf	??_processGestureData,w
  9354  0174  00C3               	movwf	processGestureData@l_last
  9355                           
  9356                           ;APDS9960.c: 716:                 r_last = gesture_data_.r_data[i];
  9357  0175  084D               	movf	processGestureData@i,w
  9358  0176  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  9359  0177  0086               	movwf	6
  9360  0178  3002               	movlw	2	; select bank4/5
  9361  0179  0087               	movwf	7
  9362  017A  0801               	movf	1,w
  9363  017B  00AF               	movwf	??_processGestureData
  9364  017C  082F               	movf	??_processGestureData,w
  9365  017D  00C4               	movwf	processGestureData@r_last
  9366  017E                     l6642:	
  9367                           
  9368                           ;APDS9960.c: 723:     ud_ratio_first = ((u_first - d_first) * 100) / (u_first + d_first)
      +                          ;
  9369  017E  0020               	movlb	0	; select bank0
  9370  017F  0845               	movf	processGestureData@u_first,w
  9371  0180  0746               	addwf	processGestureData@d_first,w
  9372  0181  00A6               	movwf	___awdiv@divisor
  9373  0182  01A7               	clrf	___awdiv@divisor+1
  9374  0183  0DA7               	rlf	___awdiv@divisor+1,f
  9375  0184  0846               	movf	processGestureData@d_first,w
  9376  0185  0245               	subwf	processGestureData@u_first,w
  9377  0186  00A0               	movwf	___wmul@multiplier
  9378  0187  01A1               	clrf	___wmul@multiplier+1
  9379  0188  1C03               	skipc
  9380  0189  03A1               	decf	___wmul@multiplier+1,f
  9381  018A  3064               	movlw	100
  9382  018B  00A2               	movwf	___wmul@multiplicand
  9383  018C  3000               	movlw	0
  9384  018D  00A3               	movwf	___wmul@multiplicand+1
  9385  018E  3188  20C0  3180   	fcall	___wmul
  9386  0191  0020               	movlb	0	; select bank0
  9387  0192  0821               	movf	?___wmul+1,w
  9388  0193  00A9               	movwf	___awdiv@dividend+1
  9389  0194  0820               	movf	?___wmul,w
  9390  0195  00A8               	movwf	___awdiv@dividend
  9391  0196  3187  27A5  3180   	fcall	___awdiv
  9392  0199  0020               	movlb	0	; select bank0
  9393  019A  0827               	movf	?___awdiv+1,w
  9394  019B  00B2               	movwf	processGestureData@ud_ratio_first+1
  9395  019C  0826               	movf	?___awdiv,w
  9396  019D  00B1               	movwf	processGestureData@ud_ratio_first
  9397                           
  9398                           ;APDS9960.c: 724:     lr_ratio_first = ((l_first - r_first) * 100) / (l_first + r_first)
      +                          ;
  9399  019E  0847               	movf	processGestureData@l_first,w
  9400  019F  0748               	addwf	processGestureData@r_first,w
  9401  01A0  00A6               	movwf	___awdiv@divisor
  9402  01A1  01A7               	clrf	___awdiv@divisor+1
  9403  01A2  0DA7               	rlf	___awdiv@divisor+1,f
  9404  01A3  0848               	movf	processGestureData@r_first,w
  9405  01A4  0247               	subwf	processGestureData@l_first,w
  9406  01A5  00A0               	movwf	___wmul@multiplier
  9407  01A6  01A1               	clrf	___wmul@multiplier+1
  9408  01A7  1C03               	skipc
  9409  01A8  03A1               	decf	___wmul@multiplier+1,f
  9410  01A9  3064               	movlw	100
  9411  01AA  00A2               	movwf	___wmul@multiplicand
  9412  01AB  3000               	movlw	0
  9413  01AC  00A3               	movwf	___wmul@multiplicand+1
  9414  01AD  3188  20C0  3180   	fcall	___wmul
  9415  01B0  0020               	movlb	0	; select bank0
  9416  01B1  0821               	movf	?___wmul+1,w
  9417  01B2  00A9               	movwf	___awdiv@dividend+1
  9418  01B3  0820               	movf	?___wmul,w
  9419  01B4  00A8               	movwf	___awdiv@dividend
  9420  01B5  3187  27A5  3180   	fcall	___awdiv
  9421  01B8  0020               	movlb	0	; select bank0
  9422  01B9  0827               	movf	?___awdiv+1,w
  9423  01BA  00B4               	movwf	processGestureData@lr_ratio_first+1
  9424  01BB  0826               	movf	?___awdiv,w
  9425  01BC  00B3               	movwf	processGestureData@lr_ratio_first
  9426                           
  9427                           ;APDS9960.c: 725:     ud_ratio_last = ((u_last - d_last) * 100) / (u_last + d_last);
  9428  01BD  0841               	movf	processGestureData@u_last,w
  9429  01BE  0742               	addwf	processGestureData@d_last,w
  9430  01BF  00A6               	movwf	___awdiv@divisor
  9431  01C0  01A7               	clrf	___awdiv@divisor+1
  9432  01C1  0DA7               	rlf	___awdiv@divisor+1,f
  9433  01C2  0842               	movf	processGestureData@d_last,w
  9434  01C3  0241               	subwf	processGestureData@u_last,w
  9435  01C4  00A0               	movwf	___wmul@multiplier
  9436  01C5  01A1               	clrf	___wmul@multiplier+1
  9437  01C6  1C03               	skipc
  9438  01C7  03A1               	decf	___wmul@multiplier+1,f
  9439  01C8  3064               	movlw	100
  9440  01C9  00A2               	movwf	___wmul@multiplicand
  9441  01CA  3000               	movlw	0
  9442  01CB  00A3               	movwf	___wmul@multiplicand+1
  9443  01CC  3188  20C0  3180   	fcall	___wmul
  9444  01CF  0020               	movlb	0	; select bank0
  9445  01D0  0821               	movf	?___wmul+1,w
  9446  01D1  00A9               	movwf	___awdiv@dividend+1
  9447  01D2  0820               	movf	?___wmul,w
  9448  01D3  00A8               	movwf	___awdiv@dividend
  9449  01D4  3187  27A5  3180   	fcall	___awdiv
  9450  01D7  0020               	movlb	0	; select bank0
  9451  01D8  0827               	movf	?___awdiv+1,w
  9452  01D9  00B6               	movwf	processGestureData@ud_ratio_last+1
  9453  01DA  0826               	movf	?___awdiv,w
  9454  01DB  00B5               	movwf	processGestureData@ud_ratio_last
  9455                           
  9456                           ;APDS9960.c: 726:     lr_ratio_last = ((l_last - r_last) * 100) / (l_last + r_last);
  9457  01DC  0843               	movf	processGestureData@l_last,w
  9458  01DD  0744               	addwf	processGestureData@r_last,w
  9459  01DE  00A6               	movwf	___awdiv@divisor
  9460  01DF  01A7               	clrf	___awdiv@divisor+1
  9461  01E0  0DA7               	rlf	___awdiv@divisor+1,f
  9462  01E1  0844               	movf	processGestureData@r_last,w
  9463  01E2  0243               	subwf	processGestureData@l_last,w
  9464  01E3  00A0               	movwf	___wmul@multiplier
  9465  01E4  01A1               	clrf	___wmul@multiplier+1
  9466  01E5  1C03               	skipc
  9467  01E6  03A1               	decf	___wmul@multiplier+1,f
  9468  01E7  3064               	movlw	100
  9469  01E8  00A2               	movwf	___wmul@multiplicand
  9470  01E9  3000               	movlw	0
  9471  01EA  00A3               	movwf	___wmul@multiplicand+1
  9472  01EB  3188  20C0  3180   	fcall	___wmul
  9473  01EE  0020               	movlb	0	; select bank0
  9474  01EF  0821               	movf	?___wmul+1,w
  9475  01F0  00A9               	movwf	___awdiv@dividend+1
  9476  01F1  0820               	movf	?___wmul,w
  9477  01F2  00A8               	movwf	___awdiv@dividend
  9478  01F3  3187  27A5  3180   	fcall	___awdiv
  9479  01F6  0020               	movlb	0	; select bank0
  9480  01F7  0827               	movf	?___awdiv+1,w
  9481  01F8  00B8               	movwf	processGestureData@lr_ratio_last+1
  9482  01F9  0826               	movf	?___awdiv,w
  9483  01FA  00B7               	movwf	processGestureData@lr_ratio_last
  9484                           
  9485                           ;APDS9960.c: 729:     ud_delta = ud_ratio_last - ud_ratio_first;
  9486  01FB  0831               	movf	processGestureData@ud_ratio_first,w
  9487  01FC  0235               	subwf	processGestureData@ud_ratio_last,w
  9488  01FD  00C9               	movwf	processGestureData@ud_delta
  9489  01FE  0832               	movf	processGestureData@ud_ratio_first+1,w
  9490  01FF  3B36               	subwfb	processGestureData@ud_ratio_last+1,w
  9491  0200  00CA               	movwf	processGestureData@ud_delta+1
  9492                           
  9493                           ;APDS9960.c: 730:     lr_delta = lr_ratio_last - lr_ratio_first;
  9494  0201  0833               	movf	processGestureData@lr_ratio_first,w
  9495  0202  0237               	subwf	processGestureData@lr_ratio_last,w
  9496  0203  00CB               	movwf	processGestureData@lr_delta
  9497  0204  0834               	movf	processGestureData@lr_ratio_first+1,w
  9498  0205  3B38               	subwfb	processGestureData@lr_ratio_last+1,w
  9499  0206  00CC               	movwf	processGestureData@lr_delta+1
  9500                           
  9501                           ;APDS9960.c: 733:     gesture_ud_delta_ += ud_delta;
  9502  0207  0849               	movf	processGestureData@ud_delta,w
  9503  0208  07E4               	addwf	_gesture_ud_delta_,f
  9504  0209  084A               	movf	processGestureData@ud_delta+1,w
  9505  020A  3DE5               	addwfc	_gesture_ud_delta_+1,f
  9506                           
  9507                           ;APDS9960.c: 734:     gesture_lr_delta_ += lr_delta;
  9508  020B  084B               	movf	processGestureData@lr_delta,w
  9509  020C  07E2               	addwf	_gesture_lr_delta_,f
  9510  020D  084C               	movf	processGestureData@lr_delta+1,w
  9511  020E  3DE3               	addwfc	_gesture_lr_delta_+1,f
  9512                           
  9513                           ;APDS9960.c: 737:     if( gesture_ud_delta_ >= 50 ) {
  9514  020F  0865               	movf	_gesture_ud_delta_+1,w
  9515  0210  3A80               	xorlw	128
  9516  0211  00AF               	movwf	??_processGestureData
  9517  0212  3080               	movlw	128
  9518  0213  022F               	subwf	??_processGestureData,w
  9519  0214  1D03               	skipz
  9520  0215  2A18               	goto	u5455
  9521  0216  3032               	movlw	50
  9522  0217  0264               	subwf	_gesture_ud_delta_,w
  9523  0218                     u5455:	
  9524  0218  1C03               	skipc
  9525  0219  2A1F               	goto	l6656
  9526                           
  9527                           ;APDS9960.c: 738:         gesture_ud_count_ = 1;
  9528  021A  3001               	movlw	1
  9529  021B  0020               	movlb	0	; select bank0
  9530  021C  00E0               	movwf	_gesture_ud_count_
  9531  021D  3000               	movlw	0
  9532  021E  2A2F               	goto	L2
  9533  021F                     l6656:	
  9534                           ;APDS9960.c: 739:     } else if( gesture_ud_delta_ <= -50 ) {
  9535                           
  9536  021F  0020               	movlb	0	; select bank0
  9537  0220  0865               	movf	_gesture_ud_delta_+1,w
  9538  0221  3A80               	xorlw	128
  9539  0222  00AF               	movwf	??_processGestureData
  9540  0223  307F               	movlw	127
  9541  0224  022F               	subwf	??_processGestureData,w
  9542  0225  1D03               	skipz
  9543  0226  2A29               	goto	u5465
  9544  0227  30CF               	movlw	207
  9545  0228  0264               	subwf	_gesture_ud_delta_,w
  9546  0229                     u5465:	
  9547  0229  1803               	skipnc
  9548  022A  2A31               	goto	l6660
  9549                           
  9550                           ;APDS9960.c: 740:         gesture_ud_count_ = -1;
  9551  022B  30FF               	movlw	255
  9552  022C  0020               	movlb	0	; select bank0
  9553  022D  00E0               	movwf	_gesture_ud_count_
  9554  022E  30FF               	movlw	255
  9555  022F                     L2:	
  9556  022F  00E1               	movwf	_gesture_ud_count_+1
  9557                           
  9558                           ;APDS9960.c: 741:     } else {
  9559  0230  2A34               	goto	l6662
  9560  0231                     l6660:	
  9561                           
  9562                           ;APDS9960.c: 742:         gesture_ud_count_ = 0;
  9563  0231  0020               	movlb	0	; select bank0
  9564  0232  01E0               	clrf	_gesture_ud_count_
  9565  0233  01E1               	clrf	_gesture_ud_count_+1
  9566  0234                     l6662:	
  9567                           
  9568                           ;APDS9960.c: 746:     if( gesture_lr_delta_ >= 50 ) {
  9569  0234  0863               	movf	_gesture_lr_delta_+1,w
  9570  0235  3A80               	xorlw	128
  9571  0236  00AF               	movwf	??_processGestureData
  9572  0237  3080               	movlw	128
  9573  0238  022F               	subwf	??_processGestureData,w
  9574  0239  1D03               	skipz
  9575  023A  2A3D               	goto	u5475
  9576  023B  3032               	movlw	50
  9577  023C  0262               	subwf	_gesture_lr_delta_,w
  9578  023D                     u5475:	
  9579  023D  1C03               	skipc
  9580  023E  2A44               	goto	l6666
  9581                           
  9582                           ;APDS9960.c: 747:         gesture_lr_count_ = 1;
  9583  023F  3001               	movlw	1
  9584  0240  0020               	movlb	0	; select bank0
  9585  0241  00DE               	movwf	_gesture_lr_count_
  9586  0242  3000               	movlw	0
  9587  0243  2A54               	goto	L3
  9588  0244                     l6666:	
  9589                           ;APDS9960.c: 748:     } else if( gesture_lr_delta_ <= -50 ) {
  9590                           
  9591  0244  0020               	movlb	0	; select bank0
  9592  0245  0863               	movf	_gesture_lr_delta_+1,w
  9593  0246  3A80               	xorlw	128
  9594  0247  00AF               	movwf	??_processGestureData
  9595  0248  307F               	movlw	127
  9596  0249  022F               	subwf	??_processGestureData,w
  9597  024A  1D03               	skipz
  9598  024B  2A4E               	goto	u5485
  9599  024C  30CF               	movlw	207
  9600  024D  0262               	subwf	_gesture_lr_delta_,w
  9601  024E                     u5485:	
  9602  024E  1803               	skipnc
  9603  024F  2A56               	goto	l6670
  9604                           
  9605                           ;APDS9960.c: 749:         gesture_lr_count_ = -1;
  9606  0250  30FF               	movlw	255
  9607  0251  0020               	movlb	0	; select bank0
  9608  0252  00DE               	movwf	_gesture_lr_count_
  9609  0253  30FF               	movlw	255
  9610  0254                     L3:	
  9611  0254  00DF               	movwf	_gesture_lr_count_+1
  9612                           
  9613                           ;APDS9960.c: 750:     } else {
  9614  0255  2A59               	goto	l6672
  9615  0256                     l6670:	
  9616                           
  9617                           ;APDS9960.c: 751:         gesture_lr_count_ = 0;
  9618  0256  0020               	movlb	0	; select bank0
  9619  0257  01DE               	clrf	_gesture_lr_count_
  9620  0258  01DF               	clrf	_gesture_lr_count_+1
  9621  0259                     l6672:	
  9622                           
  9623                           ;APDS9960.c: 755:     if( (gesture_ud_count_ == 0) && (gesture_lr_count_ == 0) ) {
  9624  0259  0860               	movf	_gesture_ud_count_,w
  9625  025A  0461               	iorwf	_gesture_ud_count_+1,w
  9626  025B  1D03               	btfss	3,2
  9627  025C  2B01               	goto	l6716
  9628  025D  085E               	movf	_gesture_lr_count_,w
  9629  025E  045F               	iorwf	_gesture_lr_count_+1,w
  9630  025F  1D03               	btfss	3,2
  9631  0260  2B01               	goto	l6716
  9632                           
  9633                           ;APDS9960.c: 756:         if( (((ud_delta) > 0 ? (ud_delta) : -(ud_delta)) < 20) && (((l
      +                          r_delta) > 0 ? (lr_delta) : -(lr_delta)) < 20) ) {
  9634  0261  084A               	movf	processGestureData@ud_delta+1,w
  9635  0262  3A80               	xorlw	128
  9636  0263  00AF               	movwf	??_processGestureData
  9637  0264  3080               	movlw	128
  9638  0265  022F               	subwf	??_processGestureData,w
  9639  0266  1D03               	skipz
  9640  0267  2A6A               	goto	u5515
  9641  0268  3001               	movlw	1
  9642  0269  0249               	subwf	processGestureData@ud_delta,w
  9643  026A                     u5515:	
  9644  026A  1803               	skipnc
  9645  026B  2A79               	goto	l6680
  9646  026C  0020               	movlb	0	; select bank0
  9647  026D  0949               	comf	processGestureData@ud_delta,w
  9648  026E  00AF               	movwf	??_processGestureData
  9649  026F  094A               	comf	processGestureData@ud_delta+1,w
  9650  0270  00B0               	movwf	??_processGestureData+1
  9651  0271  0AAF               	incf	??_processGestureData,f
  9652  0272  1903               	skipnz
  9653  0273  0AB0               	incf	??_processGestureData+1,f
  9654  0274  082F               	movf	??_processGestureData,w
  9655  0275  00B9               	movwf	_processGestureData$1923
  9656  0276  0830               	movf	??_processGestureData+1,w
  9657  0277  00BA               	movwf	_processGestureData$1923+1
  9658  0278  2A7E               	goto	l1316
  9659  0279                     l6680:	
  9660  0279  0020               	movlb	0	; select bank0
  9661  027A  084A               	movf	processGestureData@ud_delta+1,w
  9662  027B  00BA               	movwf	_processGestureData$1923+1
  9663  027C  0849               	movf	processGestureData@ud_delta,w
  9664  027D  00B9               	movwf	_processGestureData$1923
  9665  027E                     l1316:	
  9666  027E  083A               	movf	_processGestureData$1923+1,w
  9667  027F  3A80               	xorlw	128
  9668  0280  00AF               	movwf	??_processGestureData
  9669  0281  3080               	movlw	128
  9670  0282  022F               	subwf	??_processGestureData,w
  9671  0283  1D03               	skipz
  9672  0284  2A87               	goto	u5525
  9673  0285  3014               	movlw	20
  9674  0286  0239               	subwf	_processGestureData$1923,w
  9675  0287                     u5525:	
  9676  0287  1803               	skipnc
  9677  0288  28B2               	goto	l6588
  9678  0289  0020               	movlb	0	; select bank0
  9679  028A  084C               	movf	processGestureData@lr_delta+1,w
  9680  028B  3A80               	xorlw	128
  9681  028C  00AF               	movwf	??_processGestureData
  9682  028D  3080               	movlw	128
  9683  028E  022F               	subwf	??_processGestureData,w
  9684  028F  1D03               	skipz
  9685  0290  2A93               	goto	u5535
  9686  0291  3001               	movlw	1
  9687  0292  024B               	subwf	processGestureData@lr_delta,w
  9688  0293                     u5535:	
  9689  0293  1803               	skipnc
  9690  0294  2AA2               	goto	l6686
  9691  0295  0020               	movlb	0	; select bank0
  9692  0296  094B               	comf	processGestureData@lr_delta,w
  9693  0297  00AF               	movwf	??_processGestureData
  9694  0298  094C               	comf	processGestureData@lr_delta+1,w
  9695  0299  00B0               	movwf	??_processGestureData+1
  9696  029A  0AAF               	incf	??_processGestureData,f
  9697  029B  1903               	skipnz
  9698  029C  0AB0               	incf	??_processGestureData+1,f
  9699  029D  082F               	movf	??_processGestureData,w
  9700  029E  00BB               	movwf	_processGestureData$1924
  9701  029F  0830               	movf	??_processGestureData+1,w
  9702  02A0  00BC               	movwf	_processGestureData$1924+1
  9703  02A1  2AA7               	goto	l1320
  9704  02A2                     l6686:	
  9705  02A2  0020               	movlb	0	; select bank0
  9706  02A3  084C               	movf	processGestureData@lr_delta+1,w
  9707  02A4  00BC               	movwf	_processGestureData$1924+1
  9708  02A5  084B               	movf	processGestureData@lr_delta,w
  9709  02A6  00BB               	movwf	_processGestureData$1924
  9710  02A7                     l1320:	
  9711  02A7  083C               	movf	_processGestureData$1924+1,w
  9712  02A8  3A80               	xorlw	128
  9713  02A9  00AF               	movwf	??_processGestureData
  9714  02AA  3080               	movlw	128
  9715  02AB  022F               	subwf	??_processGestureData,w
  9716  02AC  1D03               	skipz
  9717  02AD  2AB0               	goto	u5545
  9718  02AE  3014               	movlw	20
  9719  02AF  023B               	subwf	_processGestureData$1924,w
  9720  02B0                     u5545:	
  9721  02B0  1803               	skipnc
  9722  02B1  28B2               	goto	l6588
  9723                           
  9724                           ;APDS9960.c: 757: ;APDS9960.c: 759:             if( (ud_delta == 0) && (lr_delta == 0) )
      +                           {
  9725  02B2  0020               	movlb	0	; select bank0
  9726  02B3  0849               	movf	processGestureData@ud_delta,w
  9727  02B4  044A               	iorwf	processGestureData@ud_delta+1,w
  9728  02B5  1D03               	btfss	3,2
  9729  02B6  2AC0               	goto	l6694
  9730  02B7  084B               	movf	processGestureData@lr_delta,w
  9731  02B8  044C               	iorwf	processGestureData@lr_delta+1,w
  9732  02B9  1D03               	btfss	3,2
  9733  02BA  2AC0               	goto	l6694
  9734                           
  9735                           ;APDS9960.c: 760:                 gesture_near_count_++;
  9736  02BB  3001               	movlw	1
  9737  02BC  07DC               	addwf	_gesture_near_count_,f
  9738  02BD  3000               	movlw	0
  9739  02BE  3DDD               	addwfc	_gesture_near_count_+1,f
  9740                           
  9741                           ;APDS9960.c: 761:             } else if( (ud_delta != 0) || (lr_delta != 0) ) {
  9742  02BF  2ACD               	goto	l1322
  9743  02C0                     l6694:	
  9744  02C0  0849               	movf	processGestureData@ud_delta,w
  9745  02C1  044A               	iorwf	processGestureData@ud_delta+1,w
  9746  02C2  1D03               	btfss	3,2
  9747  02C3  2AC8               	goto	l6698
  9748  02C4  084B               	movf	processGestureData@lr_delta,w
  9749  02C5  044C               	iorwf	processGestureData@lr_delta+1,w
  9750  02C6  1903               	btfsc	3,2
  9751  02C7  2ACD               	goto	l1322
  9752  02C8                     l6698:	
  9753                           
  9754                           ;APDS9960.c: 762:                 gesture_far_count_++;
  9755  02C8  3001               	movlw	1
  9756  02C9  0021               	movlb	1	; select bank1
  9757  02CA  07E4               	addwf	_gesture_far_count_^(0+128),f
  9758  02CB  3000               	movlw	0
  9759  02CC  3DE5               	addwfc	(_gesture_far_count_+1)^(0+128),f
  9760  02CD                     l1322:	
  9761                           
  9762                           ;APDS9960.c: 765:             if( (gesture_near_count_ >= 10) && (gesture_far_count_ >= 
      +                          2) ) {
  9763  02CD  0020               	movlb	0	; select bank0
  9764  02CE  085D               	movf	_gesture_near_count_+1,w
  9765  02CF  3A80               	xorlw	128
  9766  02D0  00AF               	movwf	??_processGestureData
  9767  02D1  3080               	movlw	128
  9768  02D2  022F               	subwf	??_processGestureData,w
  9769  02D3  1D03               	skipz
  9770  02D4  2AD7               	goto	u5595
  9771  02D5  300A               	movlw	10
  9772  02D6  025C               	subwf	_gesture_near_count_,w
  9773  02D7                     u5595:	
  9774  02D7  1C03               	skipc
  9775  02D8  28B2               	goto	l6588
  9776  02D9  0021               	movlb	1	; select bank1
  9777  02DA  0865               	movf	(_gesture_far_count_+1)^(0+128),w
  9778  02DB  3A80               	xorlw	128
  9779  02DC  0020               	movlb	0	; select bank0
  9780  02DD  00AF               	movwf	??_processGestureData
  9781  02DE  3080               	movlw	128
  9782  02DF  022F               	subwf	??_processGestureData,w
  9783  02E0  1D03               	skipz
  9784  02E1  2AE5               	goto	u5605
  9785  02E2  3002               	movlw	2
  9786  02E3  0021               	movlb	1	; select bank1
  9787  02E4  0264               	subwf	_gesture_far_count_^(0+128),w
  9788  02E5                     u5605:	
  9789  02E5  1C03               	skipc
  9790  02E6  28B2               	goto	l6588
  9791                           
  9792                           ;APDS9960.c: 766:                 if( (ud_delta == 0) && (lr_delta == 0) ) {
  9793  02E7  0020               	movlb	0	; select bank0
  9794  02E8  0849               	movf	processGestureData@ud_delta,w
  9795  02E9  044A               	iorwf	processGestureData@ud_delta+1,w
  9796  02EA  1D03               	btfss	3,2
  9797  02EB  2AF2               	goto	l6708
  9798  02EC  084B               	movf	processGestureData@lr_delta,w
  9799  02ED  044C               	iorwf	processGestureData@lr_delta+1,w
  9800  02EE  1D03               	btfss	3,2
  9801  02EF  2AF2               	goto	l6708
  9802                           
  9803                           ;APDS9960.c: 767:                     gesture_state_ = NEAR_STATE;
  9804  02F0  3001               	movlw	1
  9805  02F1  2AFB               	goto	L4
  9806  02F2                     l6708:	
  9807                           ;APDS9960.c: 768:                 } else if( (ud_delta != 0) && (lr_delta != 0) ) {
  9808                           
  9809  02F2  0849               	movf	processGestureData@ud_delta,w
  9810  02F3  044A               	iorwf	processGestureData@ud_delta+1,w
  9811  02F4  1903               	btfsc	3,2
  9812  02F5  2AFF               	goto	l1328
  9813  02F6  084B               	movf	processGestureData@lr_delta,w
  9814  02F7  044C               	iorwf	processGestureData@lr_delta+1,w
  9815  02F8  1903               	btfsc	3,2
  9816  02F9  2AFF               	goto	l1328
  9817                           
  9818                           ;APDS9960.c: 769:                     gesture_state_ = FAR_STATE;
  9819  02FA  3002               	movlw	2
  9820  02FB                     L4:	
  9821  02FB  0021               	movlb	1	; select bank1
  9822  02FC  00E2               	movwf	_gesture_state_^(0+128)
  9823  02FD  3000               	movlw	0
  9824  02FE  00E3               	movwf	(_gesture_state_^(0+128)+1)
  9825  02FF                     l1328:	
  9826                           
  9827                           ;APDS9960.c: 771:                 return 1;
  9828  02FF  3001               	movlw	1
  9829  0300  0008               	return
  9830  0301                     l6716:	
  9831                           
  9832                           ;APDS9960.c: 775:         if( (((ud_delta) > 0 ? (ud_delta) : -(ud_delta)) < 20) && (((l
      +                          r_delta) > 0 ? (lr_delta) : -(lr_delta)) < 20) ) {
  9833  0301  084A               	movf	processGestureData@ud_delta+1,w
  9834  0302  3A80               	xorlw	128
  9835  0303  00AF               	movwf	??_processGestureData
  9836  0304  3080               	movlw	128
  9837  0305  022F               	subwf	??_processGestureData,w
  9838  0306  1D03               	skipz
  9839  0307  2B0A               	goto	u5655
  9840  0308  3001               	movlw	1
  9841  0309  0249               	subwf	processGestureData@ud_delta,w
  9842  030A                     u5655:	
  9843  030A  1803               	skipnc
  9844  030B  2B19               	goto	l6720
  9845  030C  0020               	movlb	0	; select bank0
  9846  030D  0949               	comf	processGestureData@ud_delta,w
  9847  030E  00AF               	movwf	??_processGestureData
  9848  030F  094A               	comf	processGestureData@ud_delta+1,w
  9849  0310  00B0               	movwf	??_processGestureData+1
  9850  0311  0AAF               	incf	??_processGestureData,f
  9851  0312  1903               	skipnz
  9852  0313  0AB0               	incf	??_processGestureData+1,f
  9853  0314  082F               	movf	??_processGestureData,w
  9854  0315  00BD               	movwf	_processGestureData$1925
  9855  0316  0830               	movf	??_processGestureData+1,w
  9856  0317  00BE               	movwf	_processGestureData$1925+1
  9857  0318  2B1E               	goto	l1335
  9858  0319                     l6720:	
  9859  0319  0020               	movlb	0	; select bank0
  9860  031A  084A               	movf	processGestureData@ud_delta+1,w
  9861  031B  00BE               	movwf	_processGestureData$1925+1
  9862  031C  0849               	movf	processGestureData@ud_delta,w
  9863  031D  00BD               	movwf	_processGestureData$1925
  9864  031E                     l1335:	
  9865  031E  083E               	movf	_processGestureData$1925+1,w
  9866  031F  3A80               	xorlw	128
  9867  0320  00AF               	movwf	??_processGestureData
  9868  0321  3080               	movlw	128
  9869  0322  022F               	subwf	??_processGestureData,w
  9870  0323  1D03               	skipz
  9871  0324  2B27               	goto	u5665
  9872  0325  3014               	movlw	20
  9873  0326  023D               	subwf	_processGestureData$1925,w
  9874  0327                     u5665:	
  9875  0327  1803               	skipnc
  9876  0328  28B2               	goto	l6588
  9877  0329  0020               	movlb	0	; select bank0
  9878  032A  084C               	movf	processGestureData@lr_delta+1,w
  9879  032B  3A80               	xorlw	128
  9880  032C  00AF               	movwf	??_processGestureData
  9881  032D  3080               	movlw	128
  9882  032E  022F               	subwf	??_processGestureData,w
  9883  032F  1D03               	skipz
  9884  0330  2B33               	goto	u5675
  9885  0331  3001               	movlw	1
  9886  0332  024B               	subwf	processGestureData@lr_delta,w
  9887  0333                     u5675:	
  9888  0333  1803               	skipnc
  9889  0334  2B42               	goto	l6726
  9890  0335  0020               	movlb	0	; select bank0
  9891  0336  094B               	comf	processGestureData@lr_delta,w
  9892  0337  00AF               	movwf	??_processGestureData
  9893  0338  094C               	comf	processGestureData@lr_delta+1,w
  9894  0339  00B0               	movwf	??_processGestureData+1
  9895  033A  0AAF               	incf	??_processGestureData,f
  9896  033B  1903               	skipnz
  9897  033C  0AB0               	incf	??_processGestureData+1,f
  9898  033D  082F               	movf	??_processGestureData,w
  9899  033E  00BF               	movwf	_processGestureData$1926
  9900  033F  0830               	movf	??_processGestureData+1,w
  9901  0340  00C0               	movwf	_processGestureData$1926+1
  9902  0341  2B47               	goto	l1339
  9903  0342                     l6726:	
  9904  0342  0020               	movlb	0	; select bank0
  9905  0343  084C               	movf	processGestureData@lr_delta+1,w
  9906  0344  00C0               	movwf	_processGestureData$1926+1
  9907  0345  084B               	movf	processGestureData@lr_delta,w
  9908  0346  00BF               	movwf	_processGestureData$1926
  9909  0347                     l1339:	
  9910  0347  0840               	movf	_processGestureData$1926+1,w
  9911  0348  3A80               	xorlw	128
  9912  0349  00AF               	movwf	??_processGestureData
  9913  034A  3080               	movlw	128
  9914  034B  022F               	subwf	??_processGestureData,w
  9915  034C  1D03               	skipz
  9916  034D  2B50               	goto	u5685
  9917  034E  3014               	movlw	20
  9918  034F  023F               	subwf	_processGestureData$1926,w
  9919  0350                     u5685:	
  9920  0350  1803               	skipnc
  9921  0351  28B2               	goto	l6588
  9922                           
  9923                           ;APDS9960.c: 776: ;APDS9960.c: 778:             if( (ud_delta == 0) && (lr_delta == 0) )
      +                           {
  9924  0352  0020               	movlb	0	; select bank0
  9925  0353  0849               	movf	processGestureData@ud_delta,w
  9926  0354  044A               	iorwf	processGestureData@ud_delta+1,w
  9927  0355  1D03               	btfss	3,2
  9928  0356  2B5F               	goto	l1340
  9929  0357  084B               	movf	processGestureData@lr_delta,w
  9930  0358  044C               	iorwf	processGestureData@lr_delta+1,w
  9931  0359  1D03               	btfss	3,2
  9932  035A  2B5F               	goto	l1340
  9933                           
  9934                           ;APDS9960.c: 779:                 gesture_near_count_++;
  9935  035B  3001               	movlw	1
  9936  035C  07DC               	addwf	_gesture_near_count_,f
  9937  035D  3000               	movlw	0
  9938  035E  3DDD               	addwfc	_gesture_near_count_+1,f
  9939  035F                     l1340:	
  9940                           ;APDS9960.c: 780:             }
  9941                           
  9942                           
  9943                           ;APDS9960.c: 782:             if( gesture_near_count_ >= 10 ) {
  9944  035F  085D               	movf	_gesture_near_count_+1,w
  9945  0360  3A80               	xorlw	128
  9946  0361  00AF               	movwf	??_processGestureData
  9947  0362  3080               	movlw	128
  9948  0363  022F               	subwf	??_processGestureData,w
  9949  0364  1D03               	skipz
  9950  0365  2B68               	goto	u5715
  9951  0366  300A               	movlw	10
  9952  0367  025C               	subwf	_gesture_near_count_,w
  9953  0368                     u5715:	
  9954  0368  1C03               	skipc
  9955  0369  28B2               	goto	l6588
  9956                           
  9957                           ;APDS9960.c: 783:                 gesture_ud_count_ = 0;
  9958  036A  0020               	movlb	0	; select bank0
  9959  036B  01E0               	clrf	_gesture_ud_count_
  9960  036C  01E1               	clrf	_gesture_ud_count_+1
  9961                           
  9962                           ;APDS9960.c: 784:                 gesture_lr_count_ = 0;
  9963  036D  01DE               	clrf	_gesture_lr_count_
  9964  036E  01DF               	clrf	_gesture_lr_count_+1
  9965                           
  9966                           ;APDS9960.c: 785:                 gesture_ud_delta_ = 0;
  9967  036F  01E4               	clrf	_gesture_ud_delta_
  9968  0370  01E5               	clrf	_gesture_ud_delta_+1
  9969                           
  9970                           ;APDS9960.c: 786:                 gesture_lr_delta_ = 0;
  9971  0371  01E2               	clrf	_gesture_lr_delta_
  9972  0372  01E3               	clrf	_gesture_lr_delta_+1
  9973  0373  28B2               	goto	l6588
  9974  0374                     __end_of_processGestureData:	
  9975                           
  9976                           	psect	text19
  9977  08C0                     __ptext19:	
  9978 ;; *************** function ___wmul *****************
  9979 ;; Defined at:
  9980 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
  9981 ;; Parameters:    Size  Location     Type
  9982 ;;  multiplier      2    0[BANK0 ] unsigned int 
  9983 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  9984 ;; Auto vars:     Size  Location     Type
  9985 ;;  product         2    4[BANK0 ] unsigned int 
  9986 ;; Return value:  Size  Location     Type
  9987 ;;                  2    0[BANK0 ] unsigned int 
  9988 ;; Registers used:
  9989 ;;		wreg, status,2, status,0
  9990 ;; Tracked objects:
  9991 ;;		On entry : 0/0
  9992 ;;		On exit  : 0/0
  9993 ;;		Unchanged: 0/0
  9994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9995 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9996 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9997 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9998 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9999 ;;Total ram usage:        6 bytes
 10000 ;; Hardware stack levels used:    1
 10001 ;; Hardware stack levels required when called:    5
 10002 ;; This function calls:
 10003 ;;		Nothing
 10004 ;; This function is called by:
 10005 ;;		_processGestureData
 10006 ;; This function uses a non-reentrant model
 10007 ;;
 10008                           
 10009                           
 10010                           ;psect for function ___wmul
 10011  08C0                     ___wmul:	
 10012                           
 10013                           ;incstack = 0
 10014                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 10015  08C0  0020               	movlb	0	; select bank0
 10016  08C1  01A4               	clrf	___wmul@product
 10017  08C2  01A5               	clrf	___wmul@product+1
 10018  08C3                     l6404:	
 10019  08C3  1C20               	btfss	___wmul@multiplier,0
 10020  08C4  28C9               	goto	l1632
 10021  08C5  0822               	movf	___wmul@multiplicand,w
 10022  08C6  07A4               	addwf	___wmul@product,f
 10023  08C7  0823               	movf	___wmul@multiplicand+1,w
 10024  08C8  3DA5               	addwfc	___wmul@product+1,f
 10025  08C9                     l1632:	
 10026  08C9  3001               	movlw	1
 10027  08CA                     u5025:	
 10028  08CA  35A2               	lslf	___wmul@multiplicand,f
 10029  08CB  0DA3               	rlf	___wmul@multiplicand+1,f
 10030  08CC  0B89               	decfsz	9,f
 10031  08CD  28CA               	goto	u5025
 10032  08CE  3001               	movlw	1
 10033  08CF                     u5035:	
 10034  08CF  36A1               	lsrf	___wmul@multiplier+1,f
 10035  08D0  0CA0               	rrf	___wmul@multiplier,f
 10036  08D1  0B89               	decfsz	9,f
 10037  08D2  28CF               	goto	u5035
 10038  08D3  0820               	movf	___wmul@multiplier,w
 10039  08D4  0421               	iorwf	___wmul@multiplier+1,w
 10040  08D5  1D03               	btfss	3,2
 10041  08D6  28C3               	goto	l6404
 10042  08D7  0825               	movf	___wmul@product+1,w
 10043  08D8  00A1               	movwf	?___wmul+1
 10044  08D9  0824               	movf	___wmul@product,w
 10045  08DA  00A0               	movwf	?___wmul
 10046  08DB  0008               	return
 10047  08DC                     __end_of___wmul:	
 10048                           
 10049                           	psect	text20
 10050  07A5                     __ptext20:	
 10051 ;; *************** function ___awdiv *****************
 10052 ;; Defined at:
 10053 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awdiv.c"
 10054 ;; Parameters:    Size  Location     Type
 10055 ;;  divisor         2    6[BANK0 ] int 
 10056 ;;  dividend        2    8[BANK0 ] int 
 10057 ;; Auto vars:     Size  Location     Type
 10058 ;;  quotient        2   13[BANK0 ] int 
 10059 ;;  sign            1   12[BANK0 ] unsigned char 
 10060 ;;  counter         1   11[BANK0 ] unsigned char 
 10061 ;; Return value:  Size  Location     Type
 10062 ;;                  2    6[BANK0 ] int 
 10063 ;; Registers used:
 10064 ;;		wreg, status,2, status,0
 10065 ;; Tracked objects:
 10066 ;;		On entry : 0/0
 10067 ;;		On exit  : 0/0
 10068 ;;		Unchanged: 0/0
 10069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10070 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10071 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10072 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10073 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10074 ;;Total ram usage:        9 bytes
 10075 ;; Hardware stack levels used:    1
 10076 ;; Hardware stack levels required when called:    5
 10077 ;; This function calls:
 10078 ;;		Nothing
 10079 ;; This function is called by:
 10080 ;;		_processGestureData
 10081 ;; This function uses a non-reentrant model
 10082 ;;
 10083                           
 10084                           
 10085                           ;psect for function ___awdiv
 10086  07A5                     ___awdiv:	
 10087                           
 10088                           ;incstack = 0
 10089                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 10090  07A5  0020               	movlb	0	; select bank0
 10091  07A6  01AC               	clrf	___awdiv@sign
 10092  07A7  1FA7               	btfss	___awdiv@divisor+1,7
 10093  07A8  2FB0               	goto	l6424
 10094  07A9  09A6               	comf	___awdiv@divisor,f
 10095  07AA  09A7               	comf	___awdiv@divisor+1,f
 10096  07AB  0AA6               	incf	___awdiv@divisor,f
 10097  07AC  1903               	skipnz
 10098  07AD  0AA7               	incf	___awdiv@divisor+1,f
 10099  07AE  01AC               	clrf	___awdiv@sign
 10100  07AF  0AAC               	incf	___awdiv@sign,f
 10101  07B0                     l6424:	
 10102  07B0  1FA9               	btfss	___awdiv@dividend+1,7
 10103  07B1  2FBB               	goto	l6430
 10104  07B2  09A8               	comf	___awdiv@dividend,f
 10105  07B3  09A9               	comf	___awdiv@dividend+1,f
 10106  07B4  0AA8               	incf	___awdiv@dividend,f
 10107  07B5  1903               	skipnz
 10108  07B6  0AA9               	incf	___awdiv@dividend+1,f
 10109  07B7  3001               	movlw	1
 10110  07B8  00AA               	movwf	??___awdiv
 10111  07B9  082A               	movf	??___awdiv,w
 10112  07BA  06AC               	xorwf	___awdiv@sign,f
 10113  07BB                     l6430:	
 10114  07BB  01AD               	clrf	___awdiv@quotient
 10115  07BC  01AE               	clrf	___awdiv@quotient+1
 10116  07BD  0826               	movf	___awdiv@divisor,w
 10117  07BE  0427               	iorwf	___awdiv@divisor+1,w
 10118  07BF  1903               	btfsc	3,2
 10119  07C0  2FEA               	goto	l6452
 10120  07C1  01AB               	clrf	___awdiv@counter
 10121  07C2  0AAB               	incf	___awdiv@counter,f
 10122  07C3                     l6440:	
 10123  07C3  1BA7               	btfsc	___awdiv@divisor+1,7
 10124  07C4  2FCF               	goto	l6442
 10125  07C5  3001               	movlw	1
 10126  07C6                     u5085:	
 10127  07C6  35A6               	lslf	___awdiv@divisor,f
 10128  07C7  0DA7               	rlf	___awdiv@divisor+1,f
 10129  07C8  0B89               	decfsz	9,f
 10130  07C9  2FC6               	goto	u5085
 10131  07CA  3001               	movlw	1
 10132  07CB  00AA               	movwf	??___awdiv
 10133  07CC  082A               	movf	??___awdiv,w
 10134  07CD  07AB               	addwf	___awdiv@counter,f
 10135  07CE  2FC3               	goto	l6440
 10136  07CF                     l6442:	
 10137  07CF  3001               	movlw	1
 10138  07D0                     u5105:	
 10139  07D0  35AD               	lslf	___awdiv@quotient,f
 10140  07D1  0DAE               	rlf	___awdiv@quotient+1,f
 10141  07D2  0B89               	decfsz	9,f
 10142  07D3  2FD0               	goto	u5105
 10143  07D4  0827               	movf	___awdiv@divisor+1,w
 10144  07D5  0229               	subwf	___awdiv@dividend+1,w
 10145  07D6  1D03               	skipz
 10146  07D7  2FDA               	goto	u5115
 10147  07D8  0826               	movf	___awdiv@divisor,w
 10148  07D9  0228               	subwf	___awdiv@dividend,w
 10149  07DA                     u5115:	
 10150  07DA  1C03               	skipc
 10151  07DB  2FE1               	goto	l6448
 10152  07DC  0826               	movf	___awdiv@divisor,w
 10153  07DD  02A8               	subwf	___awdiv@dividend,f
 10154  07DE  0827               	movf	___awdiv@divisor+1,w
 10155  07DF  3BA9               	subwfb	___awdiv@dividend+1,f
 10156  07E0  142D               	bsf	___awdiv@quotient,0
 10157  07E1                     l6448:	
 10158  07E1  3001               	movlw	1
 10159  07E2                     u5125:	
 10160  07E2  36A7               	lsrf	___awdiv@divisor+1,f
 10161  07E3  0CA6               	rrf	___awdiv@divisor,f
 10162  07E4  0B89               	decfsz	9,f
 10163  07E5  2FE2               	goto	u5125
 10164  07E6  3001               	movlw	1
 10165  07E7  02AB               	subwf	___awdiv@counter,f
 10166  07E8  1D03               	btfss	3,2
 10167  07E9  2FCF               	goto	l6442
 10168  07EA                     l6452:	
 10169  07EA  082C               	movf	___awdiv@sign,w
 10170  07EB  1903               	btfsc	3,2
 10171  07EC  2FF2               	goto	l6456
 10172  07ED  09AD               	comf	___awdiv@quotient,f
 10173  07EE  09AE               	comf	___awdiv@quotient+1,f
 10174  07EF  0AAD               	incf	___awdiv@quotient,f
 10175  07F0  1903               	skipnz
 10176  07F1  0AAE               	incf	___awdiv@quotient+1,f
 10177  07F2                     l6456:	
 10178  07F2  082E               	movf	___awdiv@quotient+1,w
 10179  07F3  00A7               	movwf	?___awdiv+1
 10180  07F4  082D               	movf	___awdiv@quotient,w
 10181  07F5  00A6               	movwf	?___awdiv
 10182  07F6  0008               	return
 10183  07F7                     __end_of___awdiv:	
 10184                           
 10185                           	psect	text21
 10186  1775                     __ptext21:	
 10187 ;; *************** function _isGestureAvailable *****************
 10188 ;; Defined at:
 10189 ;;		line 537 in file "APDS9960.c"
 10190 ;; Parameters:    Size  Location     Type
 10191 ;;		None
 10192 ;; Auto vars:     Size  Location     Type
 10193 ;;  val             1   10[BANK0 ] unsigned char 
 10194 ;; Return value:  Size  Location     Type
 10195 ;;                  1    wreg      _Bool 
 10196 ;; Registers used:
 10197 ;;		wreg, status,2, status,0, pclath, cstack
 10198 ;; Tracked objects:
 10199 ;;		On entry : 0/0
 10200 ;;		On exit  : 0/0
 10201 ;;		Unchanged: 0/0
 10202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10204 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10205 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10206 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10207 ;;Total ram usage:        2 bytes
 10208 ;; Hardware stack levels used:    1
 10209 ;; Hardware stack levels required when called:    8
 10210 ;; This function calls:
 10211 ;;		_wireReadDataByte
 10212 ;; This function is called by:
 10213 ;;		_main
 10214 ;;		_readGesture
 10215 ;; This function uses a non-reentrant model
 10216 ;;
 10217                           
 10218                           
 10219                           ;psect for function _isGestureAvailable
 10220  1775                     _isGestureAvailable:	
 10221                           
 10222                           ;APDS9960.c: 539:     uint8_t val;;APDS9960.c: 542:     val=wireReadDataByte(0xAF);
 10223                           
 10224                           ;incstack = 0
 10225                           ; Regs used in _isGestureAvailable: [wreg+status,2+status,0+pclath+cstack]
 10226  1775  30AF               	movlw	175
 10227  1776  3189  2135  3197   	fcall	_wireReadDataByte
 10228  1779  0020               	movlb	0	; select bank0
 10229  177A  00A9               	movwf	??_isGestureAvailable
 10230  177B  0829               	movf	??_isGestureAvailable,w
 10231  177C  00AA               	movwf	isGestureAvailable@val
 10232                           
 10233                           ;APDS9960.c: 545:     val &= 0b00000001;
 10234  177D  3001               	movlw	1
 10235  177E  00A9               	movwf	??_isGestureAvailable
 10236  177F  0829               	movf	??_isGestureAvailable,w
 10237  1780  05AA               	andwf	isGestureAvailable@val,f
 10238                           
 10239                           ;APDS9960.c: 548:     if( val == 1) {
 10240  1781  032A               	decf	isGestureAvailable@val,w
 10241  1782  1D03               	btfss	3,2
 10242  1783  2F86               	goto	l6498
 10243                           
 10244                           ;APDS9960.c: 549:         return 1;
 10245  1784  3001               	movlw	1
 10246  1785  0008               	return
 10247  1786                     l6498:	
 10248                           
 10249                           ;APDS9960.c: 551:         return 0;
 10250  1786  3000               	movlw	0
 10251  1787  0008               	return
 10252  1788                     __end_of_isGestureAvailable:	
 10253                           
 10254                           	psect	text22
 10255  0374                     __ptext22:	
 10256 ;; *************** function _decodeGesture *****************
 10257 ;; Defined at:
 10258 ;;		line 795 in file "APDS9960.c"
 10259 ;; Parameters:    Size  Location     Type
 10260 ;;		None
 10261 ;; Auto vars:     Size  Location     Type
 10262 ;;		None
 10263 ;; Return value:  Size  Location     Type
 10264 ;;                  1    wreg      _Bool 
 10265 ;; Registers used:
 10266 ;;		wreg, status,2, status,0
 10267 ;; Tracked objects:
 10268 ;;		On entry : 0/0
 10269 ;;		On exit  : 0/0
 10270 ;;		Unchanged: 0/0
 10271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10272 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10273 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10274 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10275 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10276 ;;Total ram usage:       18 bytes
 10277 ;; Hardware stack levels used:    1
 10278 ;; Hardware stack levels required when called:    5
 10279 ;; This function calls:
 10280 ;;		Nothing
 10281 ;; This function is called by:
 10282 ;;		_readGesture
 10283 ;; This function uses a non-reentrant model
 10284 ;;
 10285                           
 10286                           
 10287                           ;psect for function _decodeGesture
 10288  0374                     _decodeGesture:	
 10289                           
 10290                           ;APDS9960.c: 798:     if( gesture_state_ == NEAR_STATE ) {
 10291                           
 10292                           ;incstack = 0
 10293                           ; Regs used in _decodeGesture: [wreg+status,2+status,0]
 10294  0374  0021               	movlb	1	; select bank1
 10295  0375  0362               	decf	_gesture_state_^(0+128),w
 10296  0376  0463               	iorwf	(_gesture_state_+1)^(0+128),w
 10297  0377  1D03               	btfss	3,2
 10298  0378  2B80               	goto	l6748
 10299                           
 10300                           ;APDS9960.c: 799:         gesture_motion_ = DIR_NEAR;
 10301  0379  3005               	movlw	5
 10302  037A  0022               	movlb	2	; select bank2
 10303  037B  00E8               	movwf	_gesture_motion_^(0+256)
 10304  037C  3000               	movlw	0
 10305  037D  00E9               	movwf	(_gesture_motion_^(0+256)+1)
 10306                           
 10307                           ;APDS9960.c: 800:         return 1;
 10308  037E  3001               	movlw	1
 10309  037F  0008               	return
 10310  0380                     l6748:	
 10311  0380  3002               	movlw	2
 10312  0381  0662               	xorwf	_gesture_state_^(0+128),w
 10313  0382  0463               	iorwf	(_gesture_state_+1)^(0+128),w
 10314  0383  1D03               	btfss	3,2
 10315  0384  2B8C               	goto	l6754
 10316                           
 10317                           ;APDS9960.c: 802:         gesture_motion_ = DIR_FAR;
 10318  0385  3006               	movlw	6
 10319  0386  0022               	movlb	2	; select bank2
 10320  0387  00E8               	movwf	_gesture_motion_^(0+256)
 10321  0388  3000               	movlw	0
 10322  0389  00E9               	movwf	(_gesture_motion_^(0+256)+1)
 10323                           
 10324                           ;APDS9960.c: 803:         return 1;
 10325  038A  3001               	movlw	1
 10326  038B  0008               	return
 10327  038C                     l6754:	
 10328                           
 10329                           ;APDS9960.c: 807:     if( (gesture_ud_count_ == -1) && (gesture_lr_count_ == 0) ) {
 10330  038C  0020               	movlb	0	; select bank0
 10331  038D  0A60               	incf	_gesture_ud_count_,w
 10332  038E  1D03               	skipz
 10333  038F  2B99               	goto	l6760
 10334  0390  0A61               	incf	_gesture_ud_count_+1,w
 10335  0391  1D03               	btfss	3,2
 10336  0392  2B99               	goto	l6760
 10337  0393  085E               	movf	_gesture_lr_count_,w
 10338  0394  045F               	iorwf	_gesture_lr_count_+1,w
 10339  0395  1D03               	btfss	3,2
 10340  0396  2B99               	goto	l6760
 10341  0397                     l6758:	
 10342                           
 10343                           ;APDS9960.c: 808:         gesture_motion_ = DIR_UP;
 10344  0397  3003               	movlw	3
 10345  0398  2BB8               	goto	L7
 10346  0399                     l6760:	
 10347                           ;APDS9960.c: 809:     } else if( (gesture_ud_count_ == 1) && (gesture_lr_count_ == 0) ) 
      +                          {
 10348                           
 10349  0399  0360               	decf	_gesture_ud_count_,w
 10350  039A  0461               	iorwf	_gesture_ud_count_+1,w
 10351  039B  1D03               	btfss	3,2
 10352  039C  2BA3               	goto	l6766
 10353  039D  085E               	movf	_gesture_lr_count_,w
 10354  039E  045F               	iorwf	_gesture_lr_count_+1,w
 10355  039F  1D03               	btfss	3,2
 10356  03A0  2BA3               	goto	l6766
 10357  03A1                     l6764:	
 10358                           
 10359                           ;APDS9960.c: 810:         gesture_motion_ = DIR_DOWN;
 10360  03A1  3004               	movlw	4
 10361  03A2  2BB8               	goto	L7
 10362  03A3                     l6766:	
 10363                           ;APDS9960.c: 811:     } else if( (gesture_ud_count_ == 0) && (gesture_lr_count_ == 1) ) 
      +                          {
 10364                           
 10365  03A3  0860               	movf	_gesture_ud_count_,w
 10366  03A4  0461               	iorwf	_gesture_ud_count_+1,w
 10367  03A5  1D03               	btfss	3,2
 10368  03A6  2BAD               	goto	l6772
 10369  03A7  035E               	decf	_gesture_lr_count_,w
 10370  03A8  045F               	iorwf	_gesture_lr_count_+1,w
 10371  03A9  1D03               	btfss	3,2
 10372  03AA  2BAD               	goto	l6772
 10373  03AB                     l6770:	
 10374                           
 10375                           ;APDS9960.c: 812:         gesture_motion_ = DIR_RIGHT;
 10376  03AB  3002               	movlw	2
 10377  03AC  2BB8               	goto	L7
 10378  03AD                     l6772:	
 10379                           ;APDS9960.c: 813:     } else if( (gesture_ud_count_ == 0) && (gesture_lr_count_ == -1) )
      +                           {
 10380                           
 10381  03AD  0860               	movf	_gesture_ud_count_,w
 10382  03AE  0461               	iorwf	_gesture_ud_count_+1,w
 10383  03AF  1D03               	btfss	3,2
 10384  03B0  2BBD               	goto	l6778
 10385  03B1  0A5E               	incf	_gesture_lr_count_,w
 10386  03B2  1D03               	skipz
 10387  03B3  2BBD               	goto	l6778
 10388  03B4  0A5F               	incf	_gesture_lr_count_+1,w
 10389  03B5  1D03               	btfss	3,2
 10390  03B6  2BBD               	goto	l6778
 10391  03B7                     l6776:	
 10392                           
 10393                           ;APDS9960.c: 814:         gesture_motion_ = DIR_LEFT;
 10394  03B7  3001               	movlw	1
 10395  03B8                     L7:	
 10396  03B8  0022               	movlb	2	; select bank2
 10397  03B9  00E8               	movwf	_gesture_motion_^(0+256)
 10398  03BA  3000               	movlw	0
 10399  03BB  00E9               	movwf	(_gesture_motion_^(0+256)+1)
 10400                           
 10401                           ;APDS9960.c: 815:     } else if( (gesture_ud_count_ == -1) && (gesture_lr_count_ == 1) )
      +                           {
 10402  03BC  2D03               	goto	l6854
 10403  03BD                     l6778:	
 10404  03BD  0A60               	incf	_gesture_ud_count_,w
 10405  03BE  1D03               	skipz
 10406  03BF  2C0E               	goto	l6796
 10407  03C0  0A61               	incf	_gesture_ud_count_+1,w
 10408  03C1  1D03               	btfss	3,2
 10409  03C2  2C0E               	goto	l6796
 10410  03C3  035E               	decf	_gesture_lr_count_,w
 10411  03C4  045F               	iorwf	_gesture_lr_count_+1,w
 10412  03C5  1D03               	btfss	3,2
 10413  03C6  2C0E               	goto	l6796
 10414                           
 10415                           ;APDS9960.c: 816:         if( ((gesture_ud_delta_) > 0 ? (gesture_ud_delta_) : -(gesture
      +                          _ud_delta_)) > ((gesture_lr_delta_) > 0 ? (gesture_lr_delta_) : -(gesture_lr_delta_)) ) 
      +                          {
 10416  03C7  0865               	movf	_gesture_ud_delta_+1,w
 10417  03C8  3A80               	xorlw	128
 10418  03C9  00A0               	movwf	??_decodeGesture
 10419  03CA  3080               	movlw	128
 10420  03CB  0220               	subwf	??_decodeGesture,w
 10421  03CC  1D03               	skipz
 10422  03CD  2BD0               	goto	u5845
 10423  03CE  3001               	movlw	1
 10424  03CF  0264               	subwf	_gesture_ud_delta_,w
 10425  03D0                     u5845:	
 10426  03D0  1803               	skipnc
 10427  03D1  2BDF               	goto	l6786
 10428  03D2  0020               	movlb	0	; select bank0
 10429  03D3  0964               	comf	_gesture_ud_delta_,w
 10430  03D4  00A0               	movwf	??_decodeGesture
 10431  03D5  0965               	comf	_gesture_ud_delta_+1,w
 10432  03D6  00A1               	movwf	??_decodeGesture+1
 10433  03D7  0AA0               	incf	??_decodeGesture,f
 10434  03D8  1903               	skipnz
 10435  03D9  0AA1               	incf	??_decodeGesture+1,f
 10436  03DA  0820               	movf	??_decodeGesture,w
 10437  03DB  00A2               	movwf	_decodeGesture$1928
 10438  03DC  0821               	movf	??_decodeGesture+1,w
 10439  03DD  00A3               	movwf	_decodeGesture$1928+1
 10440  03DE  2BE4               	goto	l1361
 10441  03DF                     l6786:	
 10442  03DF  0020               	movlb	0	; select bank0
 10443  03E0  0865               	movf	_gesture_ud_delta_+1,w
 10444  03E1  00A3               	movwf	_decodeGesture$1928+1
 10445  03E2  0864               	movf	_gesture_ud_delta_,w
 10446  03E3  00A2               	movwf	_decodeGesture$1928
 10447  03E4                     l1361:	
 10448  03E4  0863               	movf	_gesture_lr_delta_+1,w
 10449  03E5  3A80               	xorlw	128
 10450  03E6  00A0               	movwf	??_decodeGesture
 10451  03E7  3080               	movlw	128
 10452  03E8  0220               	subwf	??_decodeGesture,w
 10453  03E9  1D03               	skipz
 10454  03EA  2BED               	goto	u5855
 10455  03EB  3001               	movlw	1
 10456  03EC  0262               	subwf	_gesture_lr_delta_,w
 10457  03ED                     u5855:	
 10458  03ED  1803               	skipnc
 10459  03EE  2BFC               	goto	l6790
 10460  03EF  0020               	movlb	0	; select bank0
 10461  03F0  0962               	comf	_gesture_lr_delta_,w
 10462  03F1  00A0               	movwf	??_decodeGesture
 10463  03F2  0963               	comf	_gesture_lr_delta_+1,w
 10464  03F3  00A1               	movwf	??_decodeGesture+1
 10465  03F4  0AA0               	incf	??_decodeGesture,f
 10466  03F5  1903               	skipnz
 10467  03F6  0AA1               	incf	??_decodeGesture+1,f
 10468  03F7  0820               	movf	??_decodeGesture,w
 10469  03F8  00A4               	movwf	_decodeGesture$1929
 10470  03F9  0821               	movf	??_decodeGesture+1,w
 10471  03FA  00A5               	movwf	_decodeGesture$1929+1
 10472  03FB  2C01               	goto	l1365
 10473  03FC                     l6790:	
 10474  03FC  0020               	movlb	0	; select bank0
 10475  03FD  0863               	movf	_gesture_lr_delta_+1,w
 10476  03FE  00A5               	movwf	_decodeGesture$1929+1
 10477  03FF  0862               	movf	_gesture_lr_delta_,w
 10478  0400  00A4               	movwf	_decodeGesture$1929
 10479  0401                     l1365:	
 10480  0401  0825               	movf	_decodeGesture$1929+1,w
 10481  0402  3A80               	xorlw	128
 10482  0403  00A0               	movwf	??_decodeGesture
 10483  0404  0823               	movf	_decodeGesture$1928+1,w
 10484  0405  3A80               	xorlw	128
 10485  0406  0220               	subwf	??_decodeGesture,w
 10486  0407  1D03               	skipz
 10487  0408  2C0B               	goto	u5865
 10488  0409  0822               	movf	_decodeGesture$1928,w
 10489  040A  0224               	subwf	_decodeGesture$1929,w
 10490  040B                     u5865:	
 10491  040B  1C03               	btfss	3,0
 10492  040C  2B97               	goto	l6758
 10493  040D  2BAB               	goto	l6770
 10494  040E                     l6796:	
 10495  040E  0360               	decf	_gesture_ud_count_,w
 10496  040F  0461               	iorwf	_gesture_ud_count_+1,w
 10497  0410  1D03               	btfss	3,2
 10498  0411  2C5F               	goto	l6814
 10499  0412  0A5E               	incf	_gesture_lr_count_,w
 10500  0413  1D03               	skipz
 10501  0414  2C5F               	goto	l6814
 10502  0415  0A5F               	incf	_gesture_lr_count_+1,w
 10503  0416  1D03               	btfss	3,2
 10504  0417  2C5F               	goto	l6814
 10505                           
 10506                           ;APDS9960.c: 822:         if( ((gesture_ud_delta_) > 0 ? (gesture_ud_delta_) : -(gesture
      +                          _ud_delta_)) > ((gesture_lr_delta_) > 0 ? (gesture_lr_delta_) : -(gesture_lr_delta_)) ) 
      +                          {
 10507  0418  0865               	movf	_gesture_ud_delta_+1,w
 10508  0419  3A80               	xorlw	128
 10509  041A  00A0               	movwf	??_decodeGesture
 10510  041B  3080               	movlw	128
 10511  041C  0220               	subwf	??_decodeGesture,w
 10512  041D  1D03               	skipz
 10513  041E  2C21               	goto	u5895
 10514  041F  3001               	movlw	1
 10515  0420  0264               	subwf	_gesture_ud_delta_,w
 10516  0421                     u5895:	
 10517  0421  1803               	skipnc
 10518  0422  2C30               	goto	l6804
 10519  0423  0020               	movlb	0	; select bank0
 10520  0424  0964               	comf	_gesture_ud_delta_,w
 10521  0425  00A0               	movwf	??_decodeGesture
 10522  0426  0965               	comf	_gesture_ud_delta_+1,w
 10523  0427  00A1               	movwf	??_decodeGesture+1
 10524  0428  0AA0               	incf	??_decodeGesture,f
 10525  0429  1903               	skipnz
 10526  042A  0AA1               	incf	??_decodeGesture+1,f
 10527  042B  0820               	movf	??_decodeGesture,w
 10528  042C  00A6               	movwf	_decodeGesture$1930
 10529  042D  0821               	movf	??_decodeGesture+1,w
 10530  042E  00A7               	movwf	_decodeGesture$1930+1
 10531  042F  2C35               	goto	l1373
 10532  0430                     l6804:	
 10533  0430  0020               	movlb	0	; select bank0
 10534  0431  0865               	movf	_gesture_ud_delta_+1,w
 10535  0432  00A7               	movwf	_decodeGesture$1930+1
 10536  0433  0864               	movf	_gesture_ud_delta_,w
 10537  0434  00A6               	movwf	_decodeGesture$1930
 10538  0435                     l1373:	
 10539  0435  0863               	movf	_gesture_lr_delta_+1,w
 10540  0436  3A80               	xorlw	128
 10541  0437  00A0               	movwf	??_decodeGesture
 10542  0438  3080               	movlw	128
 10543  0439  0220               	subwf	??_decodeGesture,w
 10544  043A  1D03               	skipz
 10545  043B  2C3E               	goto	u5905
 10546  043C  3001               	movlw	1
 10547  043D  0262               	subwf	_gesture_lr_delta_,w
 10548  043E                     u5905:	
 10549  043E  1803               	skipnc
 10550  043F  2C4D               	goto	l6808
 10551  0440  0020               	movlb	0	; select bank0
 10552  0441  0962               	comf	_gesture_lr_delta_,w
 10553  0442  00A0               	movwf	??_decodeGesture
 10554  0443  0963               	comf	_gesture_lr_delta_+1,w
 10555  0444  00A1               	movwf	??_decodeGesture+1
 10556  0445  0AA0               	incf	??_decodeGesture,f
 10557  0446  1903               	skipnz
 10558  0447  0AA1               	incf	??_decodeGesture+1,f
 10559  0448  0820               	movf	??_decodeGesture,w
 10560  0449  00A8               	movwf	_decodeGesture$1931
 10561  044A  0821               	movf	??_decodeGesture+1,w
 10562  044B  00A9               	movwf	_decodeGesture$1931+1
 10563  044C  2C52               	goto	l1377
 10564  044D                     l6808:	
 10565  044D  0020               	movlb	0	; select bank0
 10566  044E  0863               	movf	_gesture_lr_delta_+1,w
 10567  044F  00A9               	movwf	_decodeGesture$1931+1
 10568  0450  0862               	movf	_gesture_lr_delta_,w
 10569  0451  00A8               	movwf	_decodeGesture$1931
 10570  0452                     l1377:	
 10571  0452  0829               	movf	_decodeGesture$1931+1,w
 10572  0453  3A80               	xorlw	128
 10573  0454  00A0               	movwf	??_decodeGesture
 10574  0455  0827               	movf	_decodeGesture$1930+1,w
 10575  0456  3A80               	xorlw	128
 10576  0457  0220               	subwf	??_decodeGesture,w
 10577  0458  1D03               	skipz
 10578  0459  2C5C               	goto	u5915
 10579  045A  0826               	movf	_decodeGesture$1930,w
 10580  045B  0228               	subwf	_decodeGesture$1931,w
 10581  045C                     u5915:	
 10582  045C  1C03               	btfss	3,0
 10583  045D  2BA1               	goto	l6764
 10584  045E  2BB7               	goto	l6776
 10585  045F                     l6814:	
 10586  045F  0A60               	incf	_gesture_ud_count_,w
 10587  0460  1D03               	skipz
 10588  0461  2CB2               	goto	l6832
 10589  0462  0A61               	incf	_gesture_ud_count_+1,w
 10590  0463  1D03               	btfss	3,2
 10591  0464  2CB2               	goto	l6832
 10592  0465  0A5E               	incf	_gesture_lr_count_,w
 10593  0466  1D03               	skipz
 10594  0467  2CB2               	goto	l6832
 10595  0468  0A5F               	incf	_gesture_lr_count_+1,w
 10596  0469  1D03               	btfss	3,2
 10597  046A  2CB2               	goto	l6832
 10598                           
 10599                           ;APDS9960.c: 828:         if( ((gesture_ud_delta_) > 0 ? (gesture_ud_delta_) : -(gesture
      +                          _ud_delta_)) > ((gesture_lr_delta_) > 0 ? (gesture_lr_delta_) : -(gesture_lr_delta_)) ) 
      +                          {
 10600  046B  0865               	movf	_gesture_ud_delta_+1,w
 10601  046C  3A80               	xorlw	128
 10602  046D  00A0               	movwf	??_decodeGesture
 10603  046E  3080               	movlw	128
 10604  046F  0220               	subwf	??_decodeGesture,w
 10605  0470  1D03               	skipz
 10606  0471  2C74               	goto	u5945
 10607  0472  3001               	movlw	1
 10608  0473  0264               	subwf	_gesture_ud_delta_,w
 10609  0474                     u5945:	
 10610  0474  1803               	skipnc
 10611  0475  2C83               	goto	l6822
 10612  0476  0020               	movlb	0	; select bank0
 10613  0477  0964               	comf	_gesture_ud_delta_,w
 10614  0478  00A0               	movwf	??_decodeGesture
 10615  0479  0965               	comf	_gesture_ud_delta_+1,w
 10616  047A  00A1               	movwf	??_decodeGesture+1
 10617  047B  0AA0               	incf	??_decodeGesture,f
 10618  047C  1903               	skipnz
 10619  047D  0AA1               	incf	??_decodeGesture+1,f
 10620  047E  0820               	movf	??_decodeGesture,w
 10621  047F  00AA               	movwf	_decodeGesture$1932
 10622  0480  0821               	movf	??_decodeGesture+1,w
 10623  0481  00AB               	movwf	_decodeGesture$1932+1
 10624  0482  2C88               	goto	l1385
 10625  0483                     l6822:	
 10626  0483  0020               	movlb	0	; select bank0
 10627  0484  0865               	movf	_gesture_ud_delta_+1,w
 10628  0485  00AB               	movwf	_decodeGesture$1932+1
 10629  0486  0864               	movf	_gesture_ud_delta_,w
 10630  0487  00AA               	movwf	_decodeGesture$1932
 10631  0488                     l1385:	
 10632  0488  0863               	movf	_gesture_lr_delta_+1,w
 10633  0489  3A80               	xorlw	128
 10634  048A  00A0               	movwf	??_decodeGesture
 10635  048B  3080               	movlw	128
 10636  048C  0220               	subwf	??_decodeGesture,w
 10637  048D  1D03               	skipz
 10638  048E  2C91               	goto	u5955
 10639  048F  3001               	movlw	1
 10640  0490  0262               	subwf	_gesture_lr_delta_,w
 10641  0491                     u5955:	
 10642  0491  1803               	skipnc
 10643  0492  2CA0               	goto	l6826
 10644  0493  0020               	movlb	0	; select bank0
 10645  0494  0962               	comf	_gesture_lr_delta_,w
 10646  0495  00A0               	movwf	??_decodeGesture
 10647  0496  0963               	comf	_gesture_lr_delta_+1,w
 10648  0497  00A1               	movwf	??_decodeGesture+1
 10649  0498  0AA0               	incf	??_decodeGesture,f
 10650  0499  1903               	skipnz
 10651  049A  0AA1               	incf	??_decodeGesture+1,f
 10652  049B  0820               	movf	??_decodeGesture,w
 10653  049C  00AC               	movwf	_decodeGesture$1933
 10654  049D  0821               	movf	??_decodeGesture+1,w
 10655  049E  00AD               	movwf	_decodeGesture$1933+1
 10656  049F  2CA5               	goto	l1389
 10657  04A0                     l6826:	
 10658  04A0  0020               	movlb	0	; select bank0
 10659  04A1  0863               	movf	_gesture_lr_delta_+1,w
 10660  04A2  00AD               	movwf	_decodeGesture$1933+1
 10661  04A3  0862               	movf	_gesture_lr_delta_,w
 10662  04A4  00AC               	movwf	_decodeGesture$1933
 10663  04A5                     l1389:	
 10664  04A5  082D               	movf	_decodeGesture$1933+1,w
 10665  04A6  3A80               	xorlw	128
 10666  04A7  00A0               	movwf	??_decodeGesture
 10667  04A8  082B               	movf	_decodeGesture$1932+1,w
 10668  04A9  3A80               	xorlw	128
 10669  04AA  0220               	subwf	??_decodeGesture,w
 10670  04AB  1D03               	skipz
 10671  04AC  2CAF               	goto	u5965
 10672  04AD  082A               	movf	_decodeGesture$1932,w
 10673  04AE  022C               	subwf	_decodeGesture$1933,w
 10674  04AF                     u5965:	
 10675  04AF  1C03               	btfss	3,0
 10676  04B0  2B97               	goto	l6758
 10677  04B1  2BB7               	goto	l6776
 10678  04B2                     l6832:	
 10679  04B2  0360               	decf	_gesture_ud_count_,w
 10680  04B3  0461               	iorwf	_gesture_ud_count_+1,w
 10681  04B4  1D03               	btfss	3,2
 10682  04B5  2D01               	goto	l6850
 10683  04B6  035E               	decf	_gesture_lr_count_,w
 10684  04B7  045F               	iorwf	_gesture_lr_count_+1,w
 10685  04B8  1D03               	btfss	3,2
 10686  04B9  2D01               	goto	l6850
 10687                           
 10688                           ;APDS9960.c: 834:         if( ((gesture_ud_delta_) > 0 ? (gesture_ud_delta_) : -(gesture
      +                          _ud_delta_)) > ((gesture_lr_delta_) > 0 ? (gesture_lr_delta_) : -(gesture_lr_delta_)) ) 
      +                          {
 10689  04BA  0865               	movf	_gesture_ud_delta_+1,w
 10690  04BB  3A80               	xorlw	128
 10691  04BC  00A0               	movwf	??_decodeGesture
 10692  04BD  3080               	movlw	128
 10693  04BE  0220               	subwf	??_decodeGesture,w
 10694  04BF  1D03               	skipz
 10695  04C0  2CC3               	goto	u5995
 10696  04C1  3001               	movlw	1
 10697  04C2  0264               	subwf	_gesture_ud_delta_,w
 10698  04C3                     u5995:	
 10699  04C3  1803               	skipnc
 10700  04C4  2CD2               	goto	l6840
 10701  04C5  0020               	movlb	0	; select bank0
 10702  04C6  0964               	comf	_gesture_ud_delta_,w
 10703  04C7  00A0               	movwf	??_decodeGesture
 10704  04C8  0965               	comf	_gesture_ud_delta_+1,w
 10705  04C9  00A1               	movwf	??_decodeGesture+1
 10706  04CA  0AA0               	incf	??_decodeGesture,f
 10707  04CB  1903               	skipnz
 10708  04CC  0AA1               	incf	??_decodeGesture+1,f
 10709  04CD  0820               	movf	??_decodeGesture,w
 10710  04CE  00AE               	movwf	_decodeGesture$1934
 10711  04CF  0821               	movf	??_decodeGesture+1,w
 10712  04D0  00AF               	movwf	_decodeGesture$1934+1
 10713  04D1  2CD7               	goto	l1397
 10714  04D2                     l6840:	
 10715  04D2  0020               	movlb	0	; select bank0
 10716  04D3  0865               	movf	_gesture_ud_delta_+1,w
 10717  04D4  00AF               	movwf	_decodeGesture$1934+1
 10718  04D5  0864               	movf	_gesture_ud_delta_,w
 10719  04D6  00AE               	movwf	_decodeGesture$1934
 10720  04D7                     l1397:	
 10721  04D7  0863               	movf	_gesture_lr_delta_+1,w
 10722  04D8  3A80               	xorlw	128
 10723  04D9  00A0               	movwf	??_decodeGesture
 10724  04DA  3080               	movlw	128
 10725  04DB  0220               	subwf	??_decodeGesture,w
 10726  04DC  1D03               	skipz
 10727  04DD  2CE0               	goto	u6005
 10728  04DE  3001               	movlw	1
 10729  04DF  0262               	subwf	_gesture_lr_delta_,w
 10730  04E0                     u6005:	
 10731  04E0  1803               	skipnc
 10732  04E1  2CEF               	goto	l6844
 10733  04E2  0020               	movlb	0	; select bank0
 10734  04E3  0962               	comf	_gesture_lr_delta_,w
 10735  04E4  00A0               	movwf	??_decodeGesture
 10736  04E5  0963               	comf	_gesture_lr_delta_+1,w
 10737  04E6  00A1               	movwf	??_decodeGesture+1
 10738  04E7  0AA0               	incf	??_decodeGesture,f
 10739  04E8  1903               	skipnz
 10740  04E9  0AA1               	incf	??_decodeGesture+1,f
 10741  04EA  0820               	movf	??_decodeGesture,w
 10742  04EB  00B0               	movwf	_decodeGesture$1935
 10743  04EC  0821               	movf	??_decodeGesture+1,w
 10744  04ED  00B1               	movwf	_decodeGesture$1935+1
 10745  04EE  2CF4               	goto	l1401
 10746  04EF                     l6844:	
 10747  04EF  0020               	movlb	0	; select bank0
 10748  04F0  0863               	movf	_gesture_lr_delta_+1,w
 10749  04F1  00B1               	movwf	_decodeGesture$1935+1
 10750  04F2  0862               	movf	_gesture_lr_delta_,w
 10751  04F3  00B0               	movwf	_decodeGesture$1935
 10752  04F4                     l1401:	
 10753  04F4  0831               	movf	_decodeGesture$1935+1,w
 10754  04F5  3A80               	xorlw	128
 10755  04F6  00A0               	movwf	??_decodeGesture
 10756  04F7  082F               	movf	_decodeGesture$1934+1,w
 10757  04F8  3A80               	xorlw	128
 10758  04F9  0220               	subwf	??_decodeGesture,w
 10759  04FA  1D03               	skipz
 10760  04FB  2CFE               	goto	u6015
 10761  04FC  082E               	movf	_decodeGesture$1934,w
 10762  04FD  0230               	subwf	_decodeGesture$1935,w
 10763  04FE                     u6015:	
 10764  04FE  1C03               	btfss	3,0
 10765  04FF  2BA1               	goto	l6764
 10766  0500  2BAB               	goto	l6770
 10767  0501                     l6850:	
 10768                           
 10769                           ;APDS9960.c: 840:         return 0;
 10770  0501  3000               	movlw	0
 10771  0502  0008               	return
 10772  0503                     l6854:	
 10773                           
 10774                           ;APDS9960.c: 843:     return 1;
 10775  0503  3001               	movlw	1
 10776  0504  0008               	return
 10777  0505                     __end_of_decodeGesture:	
 10778                           
 10779                           	psect	text23
 10780  0E4A                     __ptext23:	
 10781 ;; *************** function _enableGestureSensor *****************
 10782 ;; Defined at:
 10783 ;;		line 409 in file "APDS9960.c"
 10784 ;; Parameters:    Size  Location     Type
 10785 ;;  interrupts      1    wreg     _Bool 
 10786 ;; Auto vars:     Size  Location     Type
 10787 ;;  interrupts      1   17[BANK0 ] _Bool 
 10788 ;; Return value:  Size  Location     Type
 10789 ;;                  1    wreg      _Bool 
 10790 ;; Registers used:
 10791 ;;		wreg, status,2, status,0, pclath, cstack
 10792 ;; Tracked objects:
 10793 ;;		On entry : 0/0
 10794 ;;		On exit  : 0/0
 10795 ;;		Unchanged: 0/0
 10796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10798 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10799 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10800 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10801 ;;Total ram usage:        2 bytes
 10802 ;; Hardware stack levels used:    1
 10803 ;; Hardware stack levels required when called:   11
 10804 ;; This function calls:
 10805 ;;		_enablePower
 10806 ;;		_resetGestureParameters
 10807 ;;		_setGestureIntEnable
 10808 ;;		_setGestureMode
 10809 ;;		_setLEDBoost
 10810 ;;		_setMode
 10811 ;;		_wireWriteDataByte
 10812 ;; This function is called by:
 10813 ;;		_main
 10814 ;; This function uses a non-reentrant model
 10815 ;;
 10816                           
 10817                           
 10818                           ;psect for function _enableGestureSensor
 10819  0E4A                     _enableGestureSensor:	
 10820                           
 10821                           ;incstack = 0
 10822                           ; Regs used in _enableGestureSensor: [wreg+status,2+status,0+pclath+cstack]
 10823                           ;enableGestureSensor@interrupts stored from wreg
 10824  0E4A  0020               	movlb	0	; select bank0
 10825  0E4B  00B1               	movwf	enableGestureSensor@interrupts
 10826                           
 10827                           ;APDS9960.c: 409: _Bool enableGestureSensor ( _Bool interrupts);APDS9960.c: 410: {;APDS9
      +                          960.c: 418:     resetGestureParameters();
 10828  0E4C  3188  203F  318E   	fcall	_resetGestureParameters
 10829                           
 10830                           ;APDS9960.c: 419:     if( !wireWriteDataByte(0x83, 0xFF) ) {
 10831  0E4F  30FF               	movlw	255
 10832  0E50  0020               	movlb	0	; select bank0
 10833  0E51  00B0               	movwf	??_enableGestureSensor
 10834  0E52  0830               	movf	??_enableGestureSensor,w
 10835  0E53  00A6               	movwf	wireWriteDataByte@val
 10836  0E54  3083               	movlw	131
 10837  0E55  3188  2089  318E   	fcall	_wireWriteDataByte
 10838  0E58  0020               	movlb	0	; select bank0
 10839  0E59  0826               	movf	?_wireWriteDataByte,w
 10840  0E5A  0427               	iorwf	?_wireWriteDataByte+1,w
 10841  0E5B  1903               	btfsc	3,2
 10842  0E5C  0008               	return
 10843                           
 10844                           ;APDS9960.c: 422:     if( !wireWriteDataByte(0x8E, 0x89) ) {
 10845  0E5D  3089               	movlw	137
 10846  0E5E  00B0               	movwf	??_enableGestureSensor
 10847  0E5F  0830               	movf	??_enableGestureSensor,w
 10848  0E60  00A6               	movwf	wireWriteDataByte@val
 10849  0E61  308E               	movlw	142
 10850  0E62  3188  2089  318E   	fcall	_wireWriteDataByte
 10851  0E65  0020               	movlb	0	; select bank0
 10852  0E66  0826               	movf	?_wireWriteDataByte,w
 10853  0E67  0427               	iorwf	?_wireWriteDataByte+1,w
 10854  0E68  1903               	btfsc	3,2
 10855  0E69  0008               	return
 10856                           
 10857                           ;APDS9960.c: 425:     if( !setLEDBoost(3) ) {
 10858  0E6A  3003               	movlw	3
 10859  0E6B  318A  22F4  318E   	fcall	_setLEDBoost
 10860  0E6E  3A00               	xorlw	0
 10861  0E6F  1903               	btfsc	3,2
 10862  0E70  0008               	return
 10863                           
 10864                           ;APDS9960.c: 428:     if( interrupts ) {
 10865  0E71  0020               	movlb	0	; select bank0
 10866  0E72  0831               	movf	enableGestureSensor@interrupts,w
 10867  0E73  1903               	btfsc	3,2
 10868  0E74  2E77               	goto	l7492
 10869                           
 10870                           ;APDS9960.c: 429:         if( !setGestureIntEnable(1) ) {
 10871  0E75  3001               	movlw	1
 10872  0E76  2E78               	goto	L8
 10873  0E77                     l7492:	
 10874                           
 10875                           ;APDS9960.c: 433:         if( !setGestureIntEnable(0) ) {
 10876  0E77  3000               	movlw	0
 10877  0E78                     L8:	
 10878  0E78  318A  2298  318E   	fcall	_setGestureIntEnable
 10879  0E7B  3A00               	xorlw	0
 10880  0E7C  1903               	btfsc	3,2
 10881  0E7D  0008               	return
 10882                           
 10883                           ;APDS9960.c: 437:     if( !setGestureMode(1) ) {
 10884  0E7E  3001               	movlw	1
 10885  0E7F  3189  217F  318E   	fcall	_setGestureMode
 10886  0E82  3A00               	xorlw	0
 10887  0E83  1903               	btfsc	3,2
 10888  0E84  0008               	return
 10889                           
 10890                           ;APDS9960.c: 440:     if( !enablePower() ){
 10891  0E85  3197  2749  318E   	fcall	_enablePower
 10892  0E88  3A00               	xorlw	0
 10893  0E89  1903               	btfsc	3,2
 10894  0E8A  0008               	return
 10895                           
 10896                           ;APDS9960.c: 443:     if( !setMode(3, 1) ) {
 10897  0E8B  0020               	movlb	0	; select bank0
 10898  0E8C  01AB               	clrf	setMode@enable
 10899  0E8D  0AAB               	incf	setMode@enable,f
 10900  0E8E  3003               	movlw	3
 10901  0E8F  318D  25AA  318E   	fcall	_setMode
 10902  0E92  3A00               	xorlw	0
 10903  0E93  1903               	btfsc	3,2
 10904  0E94  0008               	return
 10905                           
 10906                           ;APDS9960.c: 446:     if( !setMode(2, 1) ) {
 10907  0E95  0020               	movlb	0	; select bank0
 10908  0E96  01AB               	clrf	setMode@enable
 10909  0E97  0AAB               	incf	setMode@enable,f
 10910  0E98  3002               	movlw	2
 10911  0E99  318D  25AA  318E   	fcall	_setMode
 10912  0E9C  3A00               	xorlw	0
 10913  0E9D  1903               	btfsc	3,2
 10914  0E9E  0008               	return
 10915                           
 10916                           ;APDS9960.c: 449:     if( !setMode(6, 1) ) {
 10917  0E9F  0020               	movlb	0	; select bank0
 10918  0EA0  01AB               	clrf	setMode@enable
 10919  0EA1  0AAB               	incf	setMode@enable,f
 10920  0EA2  3006               	movlw	6
 10921  0EA3  318D  25AA         	fcall	_setMode
 10922  0EA5  0008               	return
 10923  0EA6                     __end_of_enableGestureSensor:	
 10924                           
 10925                           	psect	text24
 10926  0AF4                     __ptext24:	
 10927 ;; *************** function _setLEDBoost *****************
 10928 ;; Defined at:
 10929 ;;		line 484 in file "APDS9960.c"
 10930 ;; Parameters:    Size  Location     Type
 10931 ;;  boost           1    wreg     unsigned char 
 10932 ;; Auto vars:     Size  Location     Type
 10933 ;;  boost           1   13[BANK0 ] unsigned char 
 10934 ;;  val             1   12[BANK0 ] unsigned char 
 10935 ;; Return value:  Size  Location     Type
 10936 ;;                  1    wreg      _Bool 
 10937 ;; Registers used:
 10938 ;;		wreg, status,2, status,0, pclath, cstack
 10939 ;; Tracked objects:
 10940 ;;		On entry : 0/0
 10941 ;;		On exit  : 0/0
 10942 ;;		Unchanged: 0/0
 10943 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10944 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10945 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10946 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10947 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10948 ;;Total ram usage:        4 bytes
 10949 ;; Hardware stack levels used:    1
 10950 ;; Hardware stack levels required when called:    8
 10951 ;; This function calls:
 10952 ;;		_wireReadDataByte
 10953 ;;		_wireWriteDataByte
 10954 ;; This function is called by:
 10955 ;;		_enableGestureSensor
 10956 ;; This function uses a non-reentrant model
 10957 ;;
 10958                           
 10959                           
 10960                           ;psect for function _setLEDBoost
 10961  0AF4                     _setLEDBoost:	
 10962                           
 10963                           ;incstack = 0
 10964                           ; Regs used in _setLEDBoost: [wreg+status,2+status,0+pclath+cstack]
 10965                           ;setLEDBoost@boost stored from wreg
 10966  0AF4  0020               	movlb	0	; select bank0
 10967  0AF5  00AD               	movwf	setLEDBoost@boost
 10968                           
 10969                           ;APDS9960.c: 484: _Bool setLEDBoost(uint8_t boost);APDS9960.c: 485: {;APDS9960.c: 486:  
      +                             uint8_t val;;APDS9960.c: 489:     val=wireReadDataByte(0x90);
 10970  0AF6  3090               	movlw	144
 10971  0AF7  3189  2135  318A   	fcall	_wireReadDataByte
 10972  0AFA  0020               	movlb	0	; select bank0
 10973  0AFB  00AA               	movwf	??_setLEDBoost
 10974  0AFC  082A               	movf	??_setLEDBoost,w
 10975  0AFD  00AC               	movwf	setLEDBoost@val
 10976                           
 10977                           ;APDS9960.c: 492:     boost &= 0b00000011;
 10978  0AFE  3003               	movlw	3
 10979  0AFF  00AA               	movwf	??_setLEDBoost
 10980  0B00  082A               	movf	??_setLEDBoost,w
 10981  0B01  05AD               	andwf	setLEDBoost@boost,f
 10982                           
 10983                           ;APDS9960.c: 493:     boost = boost << 4;
 10984  0B02  082D               	movf	setLEDBoost@boost,w
 10985  0B03  00AA               	movwf	??_setLEDBoost
 10986  0B04  3003               	movlw	3
 10987  0B05                     u6305:	
 10988  0B05  35AA               	lslf	??_setLEDBoost,f
 10989  0B06  3EFF               	addlw	-1
 10990  0B07  1D03               	skipz
 10991  0B08  2B05               	goto	u6305
 10992  0B09  352A               	lslf	??_setLEDBoost,w
 10993  0B0A  00AB               	movwf	??_setLEDBoost+1
 10994  0B0B  082B               	movf	??_setLEDBoost+1,w
 10995  0B0C  00AD               	movwf	setLEDBoost@boost
 10996                           
 10997                           ;APDS9960.c: 494:     val &= 0b11001111;
 10998  0B0D  30CF               	movlw	207
 10999  0B0E  00AA               	movwf	??_setLEDBoost
 11000  0B0F  082A               	movf	??_setLEDBoost,w
 11001  0B10  05AC               	andwf	setLEDBoost@val,f
 11002                           
 11003                           ;APDS9960.c: 495:     val |= boost;
 11004  0B11  082D               	movf	setLEDBoost@boost,w
 11005  0B12  00AA               	movwf	??_setLEDBoost
 11006  0B13  082A               	movf	??_setLEDBoost,w
 11007  0B14  04AC               	iorwf	setLEDBoost@val,f
 11008                           
 11009                           ;APDS9960.c: 498:     if( !wireWriteDataByte(0x90, val) ) {
 11010  0B15  082C               	movf	setLEDBoost@val,w
 11011  0B16  00AA               	movwf	??_setLEDBoost
 11012  0B17  082A               	movf	??_setLEDBoost,w
 11013  0B18  00A6               	movwf	wireWriteDataByte@val
 11014  0B19  3090               	movlw	144
 11015  0B1A  3188  2089  318A   	fcall	_wireWriteDataByte
 11016  0B1D  0020               	movlb	0	; select bank0
 11017  0B1E  0826               	movf	?_wireWriteDataByte,w
 11018  0B1F  0427               	iorwf	?_wireWriteDataByte+1,w
 11019  0B20  1D03               	btfss	3,2
 11020  0B21  2B24               	goto	l7290
 11021                           
 11022                           ;APDS9960.c: 499:         return 0;
 11023  0B22  3000               	movlw	0
 11024  0B23  0008               	return
 11025  0B24                     l7290:	
 11026                           
 11027                           ;APDS9960.c: 502:     return 1;
 11028  0B24  3001               	movlw	1
 11029  0B25  0008               	return
 11030  0B26                     __end_of_setLEDBoost:	
 11031                           
 11032                           	psect	text25
 11033  097F                     __ptext25:	
 11034 ;; *************** function _setGestureMode *****************
 11035 ;; Defined at:
 11036 ;;		line 506 in file "APDS9960.c"
 11037 ;; Parameters:    Size  Location     Type
 11038 ;;  mode            1    wreg     unsigned char 
 11039 ;; Auto vars:     Size  Location     Type
 11040 ;;  mode            1   11[BANK0 ] unsigned char 
 11041 ;;  val             1   12[BANK0 ] unsigned char 
 11042 ;; Return value:  Size  Location     Type
 11043 ;;                  1    wreg      _Bool 
 11044 ;; Registers used:
 11045 ;;		wreg, status,2, status,0, pclath, cstack
 11046 ;; Tracked objects:
 11047 ;;		On entry : 0/0
 11048 ;;		On exit  : 0/0
 11049 ;;		Unchanged: 0/0
 11050 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11051 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11052 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11053 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11054 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11055 ;;Total ram usage:        3 bytes
 11056 ;; Hardware stack levels used:    1
 11057 ;; Hardware stack levels required when called:    8
 11058 ;; This function calls:
 11059 ;;		_wireReadDataByte
 11060 ;;		_wireWriteDataByte
 11061 ;; This function is called by:
 11062 ;;		_enableGestureSensor
 11063 ;; This function uses a non-reentrant model
 11064 ;;
 11065                           
 11066                           
 11067                           ;psect for function _setGestureMode
 11068  097F                     _setGestureMode:	
 11069                           
 11070                           ;incstack = 0
 11071                           ; Regs used in _setGestureMode: [wreg+status,2+status,0+pclath+cstack]
 11072                           ;setGestureMode@mode stored from wreg
 11073  097F  0020               	movlb	0	; select bank0
 11074  0980  00AB               	movwf	setGestureMode@mode
 11075                           
 11076                           ;APDS9960.c: 506: _Bool setGestureMode(uint8_t mode);APDS9960.c: 507: {;APDS9960.c: 508:
      +                               uint8_t val;;APDS9960.c: 511:     val = wireReadDataByte(0xAB);
 11077  0981  30AB               	movlw	171
 11078  0982  3189  2135  3189   	fcall	_wireReadDataByte
 11079  0985  0020               	movlb	0	; select bank0
 11080  0986  00AA               	movwf	??_setGestureMode
 11081  0987  082A               	movf	??_setGestureMode,w
 11082  0988  00AC               	movwf	setGestureMode@val
 11083                           
 11084                           ;APDS9960.c: 514:     mode &= 0b00000001;
 11085  0989  3001               	movlw	1
 11086  098A  00AA               	movwf	??_setGestureMode
 11087  098B  082A               	movf	??_setGestureMode,w
 11088  098C  05AB               	andwf	setGestureMode@mode,f
 11089                           
 11090                           ;APDS9960.c: 515:     val &= 0b11111110;
 11091  098D  30FE               	movlw	254
 11092  098E  00AA               	movwf	??_setGestureMode
 11093  098F  082A               	movf	??_setGestureMode,w
 11094  0990  05AC               	andwf	setGestureMode@val,f
 11095                           
 11096                           ;APDS9960.c: 516:     val |= mode;
 11097  0991  082B               	movf	setGestureMode@mode,w
 11098  0992  00AA               	movwf	??_setGestureMode
 11099  0993  082A               	movf	??_setGestureMode,w
 11100  0994  04AC               	iorwf	setGestureMode@val,f
 11101                           
 11102                           ;APDS9960.c: 519:     if( !wireWriteDataByte(0xAB, val) ) {
 11103  0995  082C               	movf	setGestureMode@val,w
 11104  0996  00AA               	movwf	??_setGestureMode
 11105  0997  082A               	movf	??_setGestureMode,w
 11106  0998  00A6               	movwf	wireWriteDataByte@val
 11107  0999  30AB               	movlw	171
 11108  099A  3188  2089  3189   	fcall	_wireWriteDataByte
 11109  099D  0020               	movlb	0	; select bank0
 11110  099E  0826               	movf	?_wireWriteDataByte,w
 11111  099F  0427               	iorwf	?_wireWriteDataByte+1,w
 11112  09A0  1D03               	btfss	3,2
 11113  09A1  29A4               	goto	l7308
 11114                           
 11115                           ;APDS9960.c: 520:         return 0;
 11116  09A2  3000               	movlw	0
 11117  09A3  0008               	return
 11118  09A4                     l7308:	
 11119                           
 11120                           ;APDS9960.c: 523:     return 1;
 11121  09A4  3001               	movlw	1
 11122  09A5  0008               	return
 11123  09A6                     __end_of_setGestureMode:	
 11124                           
 11125                           	psect	text26
 11126  0A98                     __ptext26:	
 11127 ;; *************** function _setGestureIntEnable *****************
 11128 ;; Defined at:
 11129 ;;		line 387 in file "APDS9960.c"
 11130 ;; Parameters:    Size  Location     Type
 11131 ;;  enable          1    wreg     unsigned char 
 11132 ;; Auto vars:     Size  Location     Type
 11133 ;;  enable          1   12[BANK0 ] unsigned char 
 11134 ;;  val             1   11[BANK0 ] unsigned char 
 11135 ;; Return value:  Size  Location     Type
 11136 ;;                  1    wreg      _Bool 
 11137 ;; Registers used:
 11138 ;;		wreg, status,2, status,0, pclath, cstack
 11139 ;; Tracked objects:
 11140 ;;		On entry : 0/0
 11141 ;;		On exit  : 0/0
 11142 ;;		Unchanged: 0/0
 11143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11144 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11145 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11146 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11147 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11148 ;;Total ram usage:        3 bytes
 11149 ;; Hardware stack levels used:    1
 11150 ;; Hardware stack levels required when called:    8
 11151 ;; This function calls:
 11152 ;;		_wireReadDataByte
 11153 ;;		_wireWriteDataByte
 11154 ;; This function is called by:
 11155 ;;		_initialize
 11156 ;;		_enableGestureSensor
 11157 ;; This function uses a non-reentrant model
 11158 ;;
 11159                           
 11160                           
 11161                           ;psect for function _setGestureIntEnable
 11162  0A98                     _setGestureIntEnable:	
 11163                           
 11164                           ;incstack = 0
 11165                           ; Regs used in _setGestureIntEnable: [wreg+status,2+status,0+pclath+cstack]
 11166                           ;setGestureIntEnable@enable stored from wreg
 11167  0A98  0020               	movlb	0	; select bank0
 11168  0A99  00AC               	movwf	setGestureIntEnable@enable
 11169                           
 11170                           ;APDS9960.c: 387: _Bool setGestureIntEnable(uint8_t enable);APDS9960.c: 388: {;APDS9960.
      +                          c: 389:     uint8_t val;;APDS9960.c: 392:     val = wireReadDataByte(0xAB);
 11171  0A9A  30AB               	movlw	171
 11172  0A9B  3189  2135  318A   	fcall	_wireReadDataByte
 11173  0A9E  0020               	movlb	0	; select bank0
 11174  0A9F  00AA               	movwf	??_setGestureIntEnable
 11175  0AA0  082A               	movf	??_setGestureIntEnable,w
 11176  0AA1  00AB               	movwf	setGestureIntEnable@val
 11177                           
 11178                           ;APDS9960.c: 395:     enable &= 0b00000001;
 11179  0AA2  3001               	movlw	1
 11180  0AA3  00AA               	movwf	??_setGestureIntEnable
 11181  0AA4  082A               	movf	??_setGestureIntEnable,w
 11182  0AA5  05AC               	andwf	setGestureIntEnable@enable,f
 11183                           
 11184                           ;APDS9960.c: 396:     enable = enable << 1;
 11185  0AA6  352C               	lslf	setGestureIntEnable@enable,w
 11186  0AA7  00AA               	movwf	??_setGestureIntEnable
 11187  0AA8  082A               	movf	??_setGestureIntEnable,w
 11188  0AA9  00AC               	movwf	setGestureIntEnable@enable
 11189                           
 11190                           ;APDS9960.c: 397:     val &= 0b11111101;
 11191  0AAA  30FD               	movlw	253
 11192  0AAB  00AA               	movwf	??_setGestureIntEnable
 11193  0AAC  082A               	movf	??_setGestureIntEnable,w
 11194  0AAD  05AB               	andwf	setGestureIntEnable@val,f
 11195                           
 11196                           ;APDS9960.c: 398:     val |= enable;
 11197  0AAE  082C               	movf	setGestureIntEnable@enable,w
 11198  0AAF  00AA               	movwf	??_setGestureIntEnable
 11199  0AB0  082A               	movf	??_setGestureIntEnable,w
 11200  0AB1  04AB               	iorwf	setGestureIntEnable@val,f
 11201                           
 11202                           ;APDS9960.c: 401:     if( !wireWriteDataByte(0xAB, val) ) {
 11203  0AB2  082B               	movf	setGestureIntEnable@val,w
 11204  0AB3  00AA               	movwf	??_setGestureIntEnable
 11205  0AB4  082A               	movf	??_setGestureIntEnable,w
 11206  0AB5  00A6               	movwf	wireWriteDataByte@val
 11207  0AB6  30AB               	movlw	171
 11208  0AB7  3188  2089  318A   	fcall	_wireWriteDataByte
 11209  0ABA  0020               	movlb	0	; select bank0
 11210  0ABB  0826               	movf	?_wireWriteDataByte,w
 11211  0ABC  0427               	iorwf	?_wireWriteDataByte+1,w
 11212  0ABD  1D03               	btfss	3,2
 11213  0ABE  2AC1               	goto	l7272
 11214                           
 11215                           ;APDS9960.c: 402:         return 0;
 11216  0ABF  3000               	movlw	0
 11217  0AC0  0008               	return
 11218  0AC1                     l7272:	
 11219                           
 11220                           ;APDS9960.c: 405:     return 1;
 11221  0AC1  3001               	movlw	1
 11222  0AC2  0008               	return
 11223  0AC3                     __end_of_setGestureIntEnable:	
 11224                           
 11225                           	psect	text27
 11226  083F                     __ptext27:	
 11227 ;; *************** function _resetGestureParameters *****************
 11228 ;; Defined at:
 11229 ;;		line 457 in file "APDS9960.c"
 11230 ;; Parameters:    Size  Location     Type
 11231 ;;		None
 11232 ;; Auto vars:     Size  Location     Type
 11233 ;;		None
 11234 ;; Return value:  Size  Location     Type
 11235 ;;                  1    wreg      void 
 11236 ;; Registers used:
 11237 ;;		status,2
 11238 ;; Tracked objects:
 11239 ;;		On entry : 0/0
 11240 ;;		On exit  : 0/0
 11241 ;;		Unchanged: 0/0
 11242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11243 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11244 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11245 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11246 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11247 ;;Total ram usage:        0 bytes
 11248 ;; Hardware stack levels used:    1
 11249 ;; Hardware stack levels required when called:    5
 11250 ;; This function calls:
 11251 ;;		Nothing
 11252 ;; This function is called by:
 11253 ;;		_enableGestureSensor
 11254 ;;		_readGesture
 11255 ;; This function uses a non-reentrant model
 11256 ;;
 11257                           
 11258                           
 11259                           ;psect for function _resetGestureParameters
 11260  083F                     _resetGestureParameters:	
 11261                           
 11262                           ;APDS9960.c: 460:     gesture_data_.index = 0;
 11263                           
 11264                           ;incstack = 0
 11265                           ; Regs used in _resetGestureParameters: [status,2]
 11266  083F  0024               	movlb	4	; select bank4
 11267  0840  01E0               	clrf	(_gesture_data_^(0+512)+64)
 11268                           
 11269                           ;APDS9960.c: 461:     gesture_data_.total_gestures = 0;
 11270  0841  01E1               	clrf	(_gesture_data_^(0+512)+65)
 11271                           
 11272                           ;APDS9960.c: 463:     gesture_ud_delta_ = 0;
 11273  0842  0020               	movlb	0	; select bank0
 11274  0843  01E4               	clrf	_gesture_ud_delta_
 11275  0844  01E5               	clrf	_gesture_ud_delta_+1
 11276                           
 11277                           ;APDS9960.c: 464:     gesture_lr_delta_ = 0;
 11278  0845  01E2               	clrf	_gesture_lr_delta_
 11279  0846  01E3               	clrf	_gesture_lr_delta_+1
 11280                           
 11281                           ;APDS9960.c: 466:     gesture_ud_count_ = 0;
 11282  0847  01E0               	clrf	_gesture_ud_count_
 11283  0848  01E1               	clrf	_gesture_ud_count_+1
 11284                           
 11285                           ;APDS9960.c: 467:     gesture_lr_count_ = 0;
 11286  0849  01DE               	clrf	_gesture_lr_count_
 11287  084A  01DF               	clrf	_gesture_lr_count_+1
 11288                           
 11289                           ;APDS9960.c: 469:     gesture_near_count_ = 0;
 11290  084B  01DC               	clrf	_gesture_near_count_
 11291  084C  01DD               	clrf	_gesture_near_count_+1
 11292                           
 11293                           ;APDS9960.c: 470:     gesture_far_count_ = 0;
 11294  084D  0021               	movlb	1	; select bank1
 11295  084E  01E4               	clrf	_gesture_far_count_^(0+128)
 11296  084F  01E5               	clrf	(_gesture_far_count_+1)^(0+128)
 11297                           
 11298                           ;APDS9960.c: 472:     gesture_state_ = 0;
 11299  0850  01E2               	clrf	_gesture_state_^(0+128)
 11300  0851  01E3               	clrf	(_gesture_state_+1)^(0+128)
 11301                           
 11302                           ;APDS9960.c: 473:     gesture_motion_ = DIR_NONE;
 11303  0852  0022               	movlb	2	; select bank2
 11304  0853  01E8               	clrf	_gesture_motion_^(0+256)
 11305  0854  01E9               	clrf	(_gesture_motion_+1)^(0+256)
 11306  0855  0008               	return
 11307  0856                     __end_of_resetGestureParameters:	
 11308                           
 11309                           	psect	text28
 11310  1749                     __ptext28:	
 11311 ;; *************** function _enablePower *****************
 11312 ;; Defined at:
 11313 ;;		line 527 in file "APDS9960.c"
 11314 ;; Parameters:    Size  Location     Type
 11315 ;;		None
 11316 ;; Auto vars:     Size  Location     Type
 11317 ;;		None
 11318 ;; Return value:  Size  Location     Type
 11319 ;;                  1    wreg      _Bool 
 11320 ;; Registers used:
 11321 ;;		wreg, status,2, status,0, pclath, cstack
 11322 ;; Tracked objects:
 11323 ;;		On entry : 0/0
 11324 ;;		On exit  : 0/0
 11325 ;;		Unchanged: 0/0
 11326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11328 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11329 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11330 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11331 ;;Total ram usage:        0 bytes
 11332 ;; Hardware stack levels used:    1
 11333 ;; Hardware stack levels required when called:   10
 11334 ;; This function calls:
 11335 ;;		_setMode
 11336 ;; This function is called by:
 11337 ;;		_enableGestureSensor
 11338 ;; This function uses a non-reentrant model
 11339 ;;
 11340                           
 11341                           
 11342                           ;psect for function _enablePower
 11343  1749                     _enablePower:	
 11344                           
 11345                           ;APDS9960.c: 529:     if( !setMode(0, 1) ) {
 11346                           
 11347                           ;incstack = 0
 11348                           ; Regs used in _enablePower: [wreg+status,2+status,0+pclath+cstack]
 11349  1749  0020               	movlb	0	; select bank0
 11350  174A  01AB               	clrf	setMode@enable
 11351  174B  0AAB               	incf	setMode@enable,f
 11352  174C  3000               	movlw	0
 11353  174D  318D  25AA  3197   	fcall	_setMode
 11354  1750  3A00               	xorlw	0
 11355  1751  1D03               	skipz
 11356  1752  2F55               	goto	l7318
 11357                           
 11358                           ;APDS9960.c: 530:         return 0;
 11359  1753  3000               	movlw	0
 11360  1754  0008               	return
 11361  1755                     l7318:	
 11362                           
 11363                           ;APDS9960.c: 533:     return 1;
 11364  1755  3001               	movlw	1
 11365  1756  0008               	return
 11366  1757                     __end_of_enablePower:	
 11367                           
 11368                           	psect	text29
 11369  0DAA                     __ptext29:	
 11370 ;; *************** function _setMode *****************
 11371 ;; Defined at:
 11372 ;;		line 124 in file "APDS9960.c"
 11373 ;; Parameters:    Size  Location     Type
 11374 ;;  mode            1    wreg     unsigned char 
 11375 ;;  enable          1   11[BANK0 ] unsigned char 
 11376 ;; Auto vars:     Size  Location     Type
 11377 ;;  mode            1   15[BANK0 ] unsigned char 
 11378 ;;  reg_val         1   14[BANK0 ] unsigned char 
 11379 ;; Return value:  Size  Location     Type
 11380 ;;                  1    wreg      _Bool 
 11381 ;; Registers used:
 11382 ;;		wreg, status,2, status,0, pclath, cstack
 11383 ;; Tracked objects:
 11384 ;;		On entry : 0/0
 11385 ;;		On exit  : 0/0
 11386 ;;		Unchanged: 0/0
 11387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11388 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11389 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11390 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11391 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11392 ;;Total ram usage:        5 bytes
 11393 ;; Hardware stack levels used:    1
 11394 ;; Hardware stack levels required when called:    9
 11395 ;; This function calls:
 11396 ;;		_getMode
 11397 ;;		_wireWriteDataByte
 11398 ;; This function is called by:
 11399 ;;		_initialize
 11400 ;;		_enableGestureSensor
 11401 ;;		_enablePower
 11402 ;; This function uses a non-reentrant model
 11403 ;;
 11404                           
 11405                           
 11406                           ;psect for function _setMode
 11407  0DAA                     _setMode:	
 11408                           
 11409                           ;incstack = 0
 11410                           ; Regs used in _setMode: [wreg+status,2+status,0+pclath+cstack]
 11411                           ;setMode@mode stored from wreg
 11412  0DAA  0020               	movlb	0	; select bank0
 11413  0DAB  00AF               	movwf	setMode@mode
 11414                           
 11415                           ;APDS9960.c: 124: _Bool setMode(uint8_t mode, uint8_t enable);APDS9960.c: 125: {;APDS996
      +                          0.c: 126:     uint8_t reg_val;;APDS9960.c: 129:     reg_val = getMode();
 11416  0DAC  3187  27F7  318D   	fcall	_getMode
 11417  0DAF  0020               	movlb	0	; select bank0
 11418  0DB0  00AC               	movwf	??_setMode
 11419  0DB1  082C               	movf	??_setMode,w
 11420  0DB2  00AE               	movwf	setMode@reg_val
 11421                           
 11422                           ;APDS9960.c: 130:     if( reg_val == 0xFF ) {
 11423  0DB3  0A2E               	incf	setMode@reg_val,w
 11424  0DB4  1D03               	btfss	3,2
 11425  0DB5  2DB8               	goto	l6526
 11426  0DB6                     l6522:	
 11427                           
 11428                           ;APDS9960.c: 131:         return 0;
 11429  0DB6  3000               	movlw	0
 11430  0DB7  0008               	return
 11431  0DB8                     l6526:	
 11432                           
 11433                           ;APDS9960.c: 135:     enable = enable & 0x01;
 11434  0DB8  082B               	movf	setMode@enable,w
 11435  0DB9  3901               	andlw	1
 11436  0DBA  00AC               	movwf	??_setMode
 11437  0DBB  082C               	movf	??_setMode,w
 11438  0DBC  00AB               	movwf	setMode@enable
 11439                           
 11440                           ;APDS9960.c: 136:     if( mode >= 0 && mode <= 6 ) {
 11441  0DBD  3007               	movlw	7
 11442  0DBE  022F               	subwf	setMode@mode,w
 11443  0DBF  1803               	skipnc
 11444  0DC0  2DDD               	goto	l6536
 11445                           
 11446                           ;APDS9960.c: 137:         if (enable) {
 11447  0DC1  082B               	movf	setMode@enable,w
 11448  0DC2  1903               	btfsc	3,2
 11449  0DC3  2DD0               	goto	l6534
 11450                           
 11451                           ;APDS9960.c: 138:             reg_val |= (1 << mode);
 11452  0DC4  3001               	movlw	1
 11453  0DC5  00AC               	movwf	??_setMode
 11454  0DC6  0A2F               	incf	setMode@mode,w
 11455  0DC7  2DC9               	goto	u5224
 11456  0DC8                     u5225:	
 11457  0DC8  35AC               	lslf	??_setMode,f
 11458  0DC9                     u5224:	
 11459  0DC9  0B89               	decfsz	9,f
 11460  0DCA  2DC8               	goto	u5225
 11461  0DCB  082C               	movf	??_setMode,w
 11462  0DCC  00AD               	movwf	??_setMode+1
 11463  0DCD  082D               	movf	??_setMode+1,w
 11464  0DCE  04AE               	iorwf	setMode@reg_val,f
 11465                           
 11466                           ;APDS9960.c: 139:         } else {
 11467  0DCF  2DEA               	goto	l6544
 11468  0DD0                     l6534:	
 11469                           
 11470                           ;APDS9960.c: 140:             reg_val &= ~(1 << mode);
 11471  0DD0  3001               	movlw	1
 11472  0DD1  00AC               	movwf	??_setMode
 11473  0DD2  0A2F               	incf	setMode@mode,w
 11474  0DD3  2DD5               	goto	u5234
 11475  0DD4                     u5235:	
 11476  0DD4  35AC               	lslf	??_setMode,f
 11477  0DD5                     u5234:	
 11478  0DD5  0B89               	decfsz	9,f
 11479  0DD6  2DD4               	goto	u5235
 11480  0DD7  082C               	movf	??_setMode,w
 11481  0DD8  3AFF               	xorlw	255
 11482  0DD9  00AD               	movwf	??_setMode+1
 11483  0DDA  082D               	movf	??_setMode+1,w
 11484  0DDB  05AE               	andwf	setMode@reg_val,f
 11485  0DDC  2DEA               	goto	l6544
 11486  0DDD                     l6536:	
 11487  0DDD  3007               	movlw	7
 11488  0DDE  062F               	xorwf	setMode@mode,w
 11489  0DDF  1D03               	btfss	3,2
 11490  0DE0  2DEA               	goto	l6544
 11491                           
 11492                           ;APDS9960.c: 143:         if (enable) {
 11493  0DE1  082B               	movf	setMode@enable,w
 11494  0DE2  1903               	btfsc	3,2
 11495  0DE3  2DE9               	goto	l6542
 11496                           
 11497                           ;APDS9960.c: 144:             reg_val = 0x7F;
 11498  0DE4  307F               	movlw	127
 11499  0DE5  00AC               	movwf	??_setMode
 11500  0DE6  082C               	movf	??_setMode,w
 11501  0DE7  00AE               	movwf	setMode@reg_val
 11502                           
 11503                           ;APDS9960.c: 145:         } else {
 11504  0DE8  2DEA               	goto	l6544
 11505  0DE9                     l6542:	
 11506                           
 11507                           ;APDS9960.c: 146:             reg_val = 0x00;
 11508  0DE9  01AE               	clrf	setMode@reg_val
 11509  0DEA                     l6544:	
 11510                           
 11511                           ;APDS9960.c: 151:     if( !wireWriteDataByte(0x80, reg_val) ) {
 11512  0DEA  082E               	movf	setMode@reg_val,w
 11513  0DEB  00AC               	movwf	??_setMode
 11514  0DEC  082C               	movf	??_setMode,w
 11515  0DED  00A6               	movwf	wireWriteDataByte@val
 11516  0DEE  3080               	movlw	128
 11517  0DEF  3188  2089  318D   	fcall	_wireWriteDataByte
 11518  0DF2  0020               	movlb	0	; select bank0
 11519  0DF3  0826               	movf	?_wireWriteDataByte,w
 11520  0DF4  0427               	iorwf	?_wireWriteDataByte+1,w
 11521  0DF5  1903               	btfsc	3,2
 11522  0DF6  2DB6               	goto	l6522
 11523                           
 11524                           ;APDS9960.c: 155:     return 1;
 11525  0DF7  3001               	movlw	1
 11526  0DF8  0008               	return
 11527  0DF9                     __end_of_setMode:	
 11528                           
 11529                           	psect	text30
 11530  0889                     __ptext30:	
 11531 ;; *************** function _wireWriteDataByte *****************
 11532 ;; Defined at:
 11533 ;;		line 871 in file "APDS9960.c"
 11534 ;; Parameters:    Size  Location     Type
 11535 ;;  reg             1    wreg     unsigned char 
 11536 ;;  val             1    6[BANK0 ] unsigned char 
 11537 ;; Auto vars:     Size  Location     Type
 11538 ;;  reg             1    9[BANK0 ] unsigned char 
 11539 ;; Return value:  Size  Location     Type
 11540 ;;                  2    6[BANK0 ] int 
 11541 ;; Registers used:
 11542 ;;		wreg, status,2, status,0, pclath, cstack
 11543 ;; Tracked objects:
 11544 ;;		On entry : 0/0
 11545 ;;		On exit  : 0/0
 11546 ;;		Unchanged: 0/0
 11547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11548 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11549 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11550 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11551 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11552 ;;Total ram usage:        4 bytes
 11553 ;; Hardware stack levels used:    1
 11554 ;; Hardware stack levels required when called:    7
 11555 ;; This function calls:
 11556 ;;		_I2C_Start
 11557 ;;		_I2C_Stop
 11558 ;;		_I2C_Write_Byte
 11559 ;; This function is called by:
 11560 ;;		_initialize
 11561 ;;		_setMode
 11562 ;;		_setLEDDrive
 11563 ;;		_setProximityGain
 11564 ;;		_setAmbientLightGain
 11565 ;;		_setProxIntLowThresh
 11566 ;;		_setProxIntHighThresh
 11567 ;;		_setLightIntLowThreshold
 11568 ;;		_setLightIntHighThreshold
 11569 ;;		_setGestureEnterThresh
 11570 ;;		_setGestureExitThresh
 11571 ;;		_setGestureGain
 11572 ;;		_setGestureLEDDrive
 11573 ;;		_setGestureWaitTime
 11574 ;;		_setGestureIntEnable
 11575 ;;		_enableGestureSensor
 11576 ;;		_setLEDBoost
 11577 ;;		_setGestureMode
 11578 ;; This function uses a non-reentrant model
 11579 ;;
 11580                           
 11581                           
 11582                           ;psect for function _wireWriteDataByte
 11583  0889                     _wireWriteDataByte:	
 11584                           
 11585                           ;incstack = 0
 11586                           ; Regs used in _wireWriteDataByte: [wreg+status,2+status,0+pclath+cstack]
 11587                           ;wireWriteDataByte@reg stored from wreg
 11588  0889  0020               	movlb	0	; select bank0
 11589  088A  00A9               	movwf	wireWriteDataByte@reg
 11590                           
 11591                           ;APDS9960.c: 871: int wireWriteDataByte(unsigned char reg, unsigned char val);APDS9960.c
      +                          : 872: {;APDS9960.c: 882:     I2C_Start();
 11592  088B  3196  261E  3188   	fcall	_I2C_Start
 11593                           
 11594                           ;APDS9960.c: 883:     I2C_Write_Byte((0x39 << 1 )| 0x00);
 11595  088E  3072               	movlw	114
 11596  088F  3188  20A4  3188   	fcall	_I2C_Write_Byte
 11597                           
 11598                           ;APDS9960.c: 884:     I2C_Write_Byte(reg);
 11599  0892  0020               	movlb	0	; select bank0
 11600  0893  0829               	movf	wireWriteDataByte@reg,w
 11601  0894  3188  20A4  3188   	fcall	_I2C_Write_Byte
 11602                           
 11603                           ;APDS9960.c: 885:     I2C_Write_Byte(val);
 11604  0897  0020               	movlb	0	; select bank0
 11605  0898  0826               	movf	wireWriteDataByte@val,w
 11606  0899  3188  20A4  3188   	fcall	_I2C_Write_Byte
 11607                           
 11608                           ;APDS9960.c: 886:     I2C_Stop();
 11609  089C  3196  2624         	fcall	_I2C_Stop
 11610                           
 11611                           ;APDS9960.c: 889:     return 1;
 11612  089E  3001               	movlw	1
 11613  089F  0020               	movlb	0	; select bank0
 11614  08A0  00A6               	movwf	?_wireWriteDataByte
 11615  08A1  3000               	movlw	0
 11616  08A2  00A7               	movwf	?_wireWriteDataByte+1
 11617  08A3  0008               	return
 11618  08A4                     __end_of_wireWriteDataByte:	
 11619                           
 11620                           	psect	text31
 11621  07F7                     __ptext31:	
 11622 ;; *************** function _getMode *****************
 11623 ;; Defined at:
 11624 ;;		line 159 in file "APDS9960.c"
 11625 ;; Parameters:    Size  Location     Type
 11626 ;;		None
 11627 ;; Auto vars:     Size  Location     Type
 11628 ;;  enable_value    1   10[BANK0 ] unsigned char 
 11629 ;; Return value:  Size  Location     Type
 11630 ;;                  1    wreg      unsigned char 
 11631 ;; Registers used:
 11632 ;;		wreg, status,2, status,0, pclath, cstack
 11633 ;; Tracked objects:
 11634 ;;		On entry : 0/0
 11635 ;;		On exit  : 0/0
 11636 ;;		Unchanged: 0/0
 11637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11638 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11639 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11640 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11641 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11642 ;;Total ram usage:        2 bytes
 11643 ;; Hardware stack levels used:    1
 11644 ;; Hardware stack levels required when called:    8
 11645 ;; This function calls:
 11646 ;;		_wireReadDataByte
 11647 ;; This function is called by:
 11648 ;;		_setMode
 11649 ;;		_readGesture
 11650 ;; This function uses a non-reentrant model
 11651 ;;
 11652                           
 11653                           
 11654                           ;psect for function _getMode
 11655  07F7                     _getMode:	
 11656                           
 11657                           ;APDS9960.c: 161:     uint8_t enable_value;;APDS9960.c: 164:     enable_value = wireRead
      +                          DataByte(0x80);
 11658                           
 11659                           ;incstack = 0
 11660                           ; Regs used in _getMode: [wreg+status,2+status,0+pclath+cstack]
 11661  07F7  3080               	movlw	128
 11662  07F8  3189  2135         	fcall	_wireReadDataByte
 11663  07FA  0020               	movlb	0	; select bank0
 11664  07FB  00A9               	movwf	??_getMode
 11665  07FC  0829               	movf	??_getMode,w
 11666  07FD  00AA               	movwf	getMode@enable_value
 11667                           
 11668                           ;APDS9960.c: 166:     return enable_value;
 11669  07FE  082A               	movf	getMode@enable_value,w
 11670  07FF  0008               	return
 11671  0800                     __end_of_getMode:	
 11672                           
 11673                           	psect	text32
 11674  0935                     __ptext32:	
 11675 ;; *************** function _wireReadDataByte *****************
 11676 ;; Defined at:
 11677 ;;		line 893 in file "APDS9960.c"
 11678 ;; Parameters:    Size  Location     Type
 11679 ;;  reg             1    wreg     unsigned char 
 11680 ;; Auto vars:     Size  Location     Type
 11681 ;;  reg             1    7[BANK0 ] unsigned char 
 11682 ;;  val             1    8[BANK0 ] unsigned char 
 11683 ;; Return value:  Size  Location     Type
 11684 ;;                  1    wreg      unsigned char 
 11685 ;; Registers used:
 11686 ;;		wreg, status,2, status,0, pclath, cstack
 11687 ;; Tracked objects:
 11688 ;;		On entry : 0/0
 11689 ;;		On exit  : 0/0
 11690 ;;		Unchanged: 0/0
 11691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11692 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11693 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11694 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11695 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11696 ;;Total ram usage:        3 bytes
 11697 ;; Hardware stack levels used:    1
 11698 ;; Hardware stack levels required when called:    7
 11699 ;; This function calls:
 11700 ;;		_I2C_ReStart
 11701 ;;		_I2C_Read_Byte
 11702 ;;		_I2C_Send_NACK
 11703 ;;		_I2C_Start
 11704 ;;		_I2C_Stop
 11705 ;;		_I2C_Write_Byte
 11706 ;; This function is called by:
 11707 ;;		_initialize
 11708 ;;		_getMode
 11709 ;;		_setLEDDrive
 11710 ;;		_setProximityGain
 11711 ;;		_setAmbientLightGain
 11712 ;;		_setGestureGain
 11713 ;;		_setGestureLEDDrive
 11714 ;;		_setGestureWaitTime
 11715 ;;		_setGestureIntEnable
 11716 ;;		_setLEDBoost
 11717 ;;		_setGestureMode
 11718 ;;		_isGestureAvailable
 11719 ;;		_readGesture
 11720 ;; This function uses a non-reentrant model
 11721 ;;
 11722                           
 11723                           
 11724                           ;psect for function _wireReadDataByte
 11725  0935                     _wireReadDataByte:	
 11726                           
 11727                           ;incstack = 0
 11728                           ; Regs used in _wireReadDataByte: [wreg+status,2+status,0+pclath+cstack]
 11729                           ;wireReadDataByte@reg stored from wreg
 11730  0935  0020               	movlb	0	; select bank0
 11731  0936  00A7               	movwf	wireReadDataByte@reg
 11732                           
 11733                           ;APDS9960.c: 893:  unsigned char wireReadDataByte(unsigned char reg);APDS9960.c: 894: {;
      +                          APDS9960.c: 908:     unsigned char val;;APDS9960.c: 909:     I2C_Start();
 11734  0937  3196  261E  3189   	fcall	_I2C_Start
 11735                           
 11736                           ;APDS9960.c: 910:     I2C_Write_Byte((0x39 << 1 )| 0x00);
 11737  093A  3072               	movlw	114
 11738  093B  3188  20A4  3189   	fcall	_I2C_Write_Byte
 11739                           
 11740                           ;APDS9960.c: 911:     I2C_Write_Byte(reg);
 11741  093E  0020               	movlb	0	; select bank0
 11742  093F  0827               	movf	wireReadDataByte@reg,w
 11743  0940  3188  20A4  3189   	fcall	_I2C_Write_Byte
 11744                           
 11745                           ;APDS9960.c: 912:     I2C_ReStart();
 11746  0943  3196  260F  3189   	fcall	_I2C_ReStart
 11747                           
 11748                           ;APDS9960.c: 914:     I2C_Write_Byte((0x39 << 1) | 0x01);
 11749  0946  3073               	movlw	115
 11750  0947  3188  20A4  3189   	fcall	_I2C_Write_Byte
 11751                           
 11752                           ;APDS9960.c: 915:     val=I2C_Read_Byte();
 11753  094A  3197  2719  3189   	fcall	_I2C_Read_Byte
 11754  094D  0020               	movlb	0	; select bank0
 11755  094E  00A6               	movwf	??_wireReadDataByte
 11756  094F  0826               	movf	??_wireReadDataByte,w
 11757  0950  00A8               	movwf	wireReadDataByte@val
 11758                           
 11759                           ;APDS9960.c: 916:     I2C_Send_NACK();
 11760  0951  3196  2618  3189   	fcall	_I2C_Send_NACK
 11761                           
 11762                           ;APDS9960.c: 917:     I2C_Stop();
 11763  0954  3196  2624         	fcall	_I2C_Stop
 11764                           
 11765                           ;APDS9960.c: 919:     return val;
 11766  0956  0020               	movlb	0	; select bank0
 11767  0957  0828               	movf	wireReadDataByte@val,w
 11768  0958  0008               	return
 11769  0959                     __end_of_wireReadDataByte:	
 11770                           
 11771                           	psect	text33
 11772  08A4                     __ptext33:	
 11773 ;; *************** function _I2C_Write_Byte *****************
 11774 ;; Defined at:
 11775 ;;		line 75 in file "i2c.c"
 11776 ;; Parameters:    Size  Location     Type
 11777 ;;  Byte            1    wreg     unsigned char 
 11778 ;; Auto vars:     Size  Location     Type
 11779 ;;  Byte            1    3[BANK0 ] unsigned char 
 11780 ;;  count           2    4[BANK0 ] unsigned int 
 11781 ;; Return value:  Size  Location     Type
 11782 ;;                  1    wreg      void 
 11783 ;; Registers used:
 11784 ;;		wreg, status,2, status,0, pclath, cstack
 11785 ;; Tracked objects:
 11786 ;;		On entry : 0/0
 11787 ;;		On exit  : 0/0
 11788 ;;		Unchanged: 0/0
 11789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11790 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11791 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11792 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11793 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11794 ;;Total ram usage:        5 bytes
 11795 ;; Hardware stack levels used:    1
 11796 ;; Hardware stack levels required when called:    6
 11797 ;; This function calls:
 11798 ;;		_i2c1_driver_TXData
 11799 ;; This function is called by:
 11800 ;;		_wireReadDataBlock
 11801 ;;		_wireWriteDataByte
 11802 ;;		_wireReadDataByte
 11803 ;; This function uses a non-reentrant model
 11804 ;;
 11805                           
 11806                           
 11807                           ;psect for function _I2C_Write_Byte
 11808  08A4                     _I2C_Write_Byte:	
 11809                           
 11810                           ;incstack = 0
 11811                           ; Regs used in _I2C_Write_Byte: [wreg+status,2+status,0+pclath+cstack]
 11812                           ;I2C_Write_Byte@Byte stored from wreg
 11813  08A4  0020               	movlb	0	; select bank0
 11814  08A5  00A3               	movwf	I2C_Write_Byte@Byte
 11815                           
 11816                           ;i2c.c: 75: void I2C_Write_Byte(unsigned char Byte);i2c.c: 76: {;i2c.c: 80:     i2c1_dri
      +                          ver_TXData(Byte);
 11817  08A6  0823               	movf	I2C_Write_Byte@Byte,w
 11818  08A7  3196  266D  3188   	fcall	_i2c1_driver_TXData
 11819                           
 11820                           ;i2c.c: 83:     unsigned int count = 0;
 11821  08AA  0020               	movlb	0	; select bank0
 11822  08AB  01A4               	clrf	I2C_Write_Byte@count
 11823  08AC  01A5               	clrf	I2C_Write_Byte@count+1
 11824  08AD                     l1468:	
 11825                           ;i2c.c: 84:     while(SSP1CON2bits.ACKSTAT);
 11826                           
 11827  08AD  0024               	movlb	4	; select bank4
 11828  08AE  1B16               	btfsc	22,6	;volatile
 11829  08AF  28AD               	goto	l1468
 11830  08B0                     l6344:	
 11831  08B0  0020               	movlb	0	; select bank0
 11832  08B1  0825               	movf	I2C_Write_Byte@count+1,w
 11833  08B2  00A2               	movwf	??_I2C_Write_Byte+1
 11834  08B3  0824               	movf	I2C_Write_Byte@count,w
 11835  08B4  00A1               	movwf	??_I2C_Write_Byte
 11836  08B5  0AA4               	incf	I2C_Write_Byte@count,f
 11837  08B6  1903               	skipnz
 11838  08B7  0AA5               	incf	I2C_Write_Byte@count+1,f
 11839  08B8  3000               	movlw	0
 11840  08B9  0222               	subwf	??_I2C_Write_Byte+1,w
 11841  08BA  3005               	movlw	5
 11842  08BB  1903               	skipnz
 11843  08BC  0221               	subwf	??_I2C_Write_Byte,w
 11844  08BD  1803               	btfsc	3,0
 11845  08BE  0008               	return
 11846  08BF  28B0               	goto	l6344
 11847  08C0                     __end_of_I2C_Write_Byte:	
 11848                           
 11849                           	psect	text34
 11850  166D                     __ptext34:	
 11851 ;; *************** function _i2c1_driver_TXData *****************
 11852 ;; Defined at:
 11853 ;;		line 186 in file "mcc_generated_files/i2c1_driver.c"
 11854 ;; Parameters:    Size  Location     Type
 11855 ;;  d               1    wreg     unsigned char 
 11856 ;; Auto vars:     Size  Location     Type
 11857 ;;  d               1    0[BANK0 ] unsigned char 
 11858 ;; Return value:  Size  Location     Type
 11859 ;;                  1    wreg      void 
 11860 ;; Registers used:
 11861 ;;		wreg
 11862 ;; Tracked objects:
 11863 ;;		On entry : 0/0
 11864 ;;		On exit  : 0/0
 11865 ;;		Unchanged: 0/0
 11866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11867 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11868 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11869 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11870 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11871 ;;Total ram usage:        1 bytes
 11872 ;; Hardware stack levels used:    1
 11873 ;; Hardware stack levels required when called:    5
 11874 ;; This function calls:
 11875 ;;		Nothing
 11876 ;; This function is called by:
 11877 ;;		_I2C_Write_Byte
 11878 ;; This function uses a non-reentrant model
 11879 ;;
 11880                           
 11881                           
 11882                           ;psect for function _i2c1_driver_TXData
 11883  166D                     _i2c1_driver_TXData:	
 11884                           
 11885                           ;incstack = 0
 11886                           ; Regs used in _i2c1_driver_TXData: [wreg]
 11887                           ;i2c1_driver_TXData@d stored from wreg
 11888  166D  0020               	movlb	0	; select bank0
 11889  166E  00A0               	movwf	i2c1_driver_TXData@d
 11890                           
 11891                           ;mcc_generated_files/i2c1_driver.c: 186: __attribute__((inline)) void i2c1_driver_TXData
      +                          (char d);mcc_generated_files/i2c1_driver.c: 187: {;mcc_generated_files/i2c1_driver.c: 18
      +                          8:     SSP1BUF = d;
 11892  166F  0820               	movf	i2c1_driver_TXData@d,w
 11893  1670  0024               	movlb	4	; select bank4
 11894  1671  0091               	movwf	17	;volatile
 11895  1672  0008               	return
 11896  1673                     __end_of_i2c1_driver_TXData:	
 11897                           
 11898                           	psect	text35
 11899  1624                     __ptext35:	
 11900 ;; *************** function _I2C_Stop *****************
 11901 ;; Defined at:
 11902 ;;		line 50 in file "i2c.c"
 11903 ;; Parameters:    Size  Location     Type
 11904 ;;		None
 11905 ;; Auto vars:     Size  Location     Type
 11906 ;;		None
 11907 ;; Return value:  Size  Location     Type
 11908 ;;                  1    wreg      void 
 11909 ;; Registers used:
 11910 ;;		status,2, status,0, pclath, cstack
 11911 ;; Tracked objects:
 11912 ;;		On entry : 0/0
 11913 ;;		On exit  : 0/0
 11914 ;;		Unchanged: 0/0
 11915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11917 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11919 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11920 ;;Total ram usage:        0 bytes
 11921 ;; Hardware stack levels used:    1
 11922 ;; Hardware stack levels required when called:    6
 11923 ;; This function calls:
 11924 ;;		_i2c1_driver_stop
 11925 ;; This function is called by:
 11926 ;;		_wireReadDataBlock
 11927 ;;		_wireWriteDataByte
 11928 ;;		_wireReadDataByte
 11929 ;; This function uses a non-reentrant model
 11930 ;;
 11931                           
 11932                           
 11933                           ;psect for function _I2C_Stop
 11934  1624                     _I2C_Stop:	
 11935                           
 11936                           ;i2c.c: 52:  i2c1_driver_stop();
 11937                           
 11938                           ;incstack = 0
 11939                           ; Regs used in _I2C_Stop: [status,2+status,0+pclath+cstack]
 11940  1624  3196  2621         	fcall	_i2c1_driver_stop
 11941  1626  0008               	return
 11942  1627                     __end_of_I2C_Stop:	
 11943                           
 11944                           	psect	text36
 11945  1621                     __ptext36:	
 11946 ;; *************** function _i2c1_driver_stop *****************
 11947 ;; Defined at:
 11948 ;;		line 156 in file "mcc_generated_files/i2c1_driver.c"
 11949 ;; Parameters:    Size  Location     Type
 11950 ;;		None
 11951 ;; Auto vars:     Size  Location     Type
 11952 ;;		None
 11953 ;; Return value:  Size  Location     Type
 11954 ;;                  1    wreg      void 
 11955 ;; Registers used:
 11956 ;;		None
 11957 ;; Tracked objects:
 11958 ;;		On entry : 0/0
 11959 ;;		On exit  : 0/0
 11960 ;;		Unchanged: 0/0
 11961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11962 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11963 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11964 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11965 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11966 ;;Total ram usage:        0 bytes
 11967 ;; Hardware stack levels used:    1
 11968 ;; Hardware stack levels required when called:    5
 11969 ;; This function calls:
 11970 ;;		Nothing
 11971 ;; This function is called by:
 11972 ;;		_I2C_Stop
 11973 ;; This function uses a non-reentrant model
 11974 ;;
 11975                           
 11976                           
 11977                           ;psect for function _i2c1_driver_stop
 11978  1621                     _i2c1_driver_stop:	
 11979                           
 11980                           ;mcc_generated_files/i2c1_driver.c: 158:     SSP1CON2bits.PEN = 1;
 11981                           
 11982                           ;incstack = 0
 11983                           ; Regs used in _i2c1_driver_stop: []
 11984  1621  0024               	movlb	4	; select bank4
 11985  1622  1516               	bsf	22,2	;volatile
 11986  1623  0008               	return
 11987  1624                     __end_of_i2c1_driver_stop:	
 11988                           
 11989                           	psect	text37
 11990  161E                     __ptext37:	
 11991 ;; *************** function _I2C_Start *****************
 11992 ;; Defined at:
 11993 ;;		line 35 in file "i2c.c"
 11994 ;; Parameters:    Size  Location     Type
 11995 ;;		None
 11996 ;; Auto vars:     Size  Location     Type
 11997 ;;		None
 11998 ;; Return value:  Size  Location     Type
 11999 ;;                  1    wreg      void 
 12000 ;; Registers used:
 12001 ;;		status,2, status,0, pclath, cstack
 12002 ;; Tracked objects:
 12003 ;;		On entry : 0/0
 12004 ;;		On exit  : 0/0
 12005 ;;		Unchanged: 0/0
 12006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12007 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12008 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12009 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12010 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12011 ;;Total ram usage:        0 bytes
 12012 ;; Hardware stack levels used:    1
 12013 ;; Hardware stack levels required when called:    6
 12014 ;; This function calls:
 12015 ;;		_i2c1_driver_start
 12016 ;; This function is called by:
 12017 ;;		_wireReadDataBlock
 12018 ;;		_wireWriteDataByte
 12019 ;;		_wireReadDataByte
 12020 ;; This function uses a non-reentrant model
 12021 ;;
 12022                           
 12023                           
 12024                           ;psect for function _I2C_Start
 12025  161E                     _I2C_Start:	
 12026                           
 12027                           ;i2c.c: 37:  i2c1_driver_start();
 12028                           
 12029                           ;incstack = 0
 12030                           ; Regs used in _I2C_Start: [status,2+status,0+pclath+cstack]
 12031  161E  3196  261B         	fcall	_i2c1_driver_start
 12032  1620  0008               	return
 12033  1621                     __end_of_I2C_Start:	
 12034                           
 12035                           	psect	text38
 12036  161B                     __ptext38:	
 12037 ;; *************** function _i2c1_driver_start *****************
 12038 ;; Defined at:
 12039 ;;		line 146 in file "mcc_generated_files/i2c1_driver.c"
 12040 ;; Parameters:    Size  Location     Type
 12041 ;;		None
 12042 ;; Auto vars:     Size  Location     Type
 12043 ;;		None
 12044 ;; Return value:  Size  Location     Type
 12045 ;;                  1    wreg      void 
 12046 ;; Registers used:
 12047 ;;		None
 12048 ;; Tracked objects:
 12049 ;;		On entry : 0/0
 12050 ;;		On exit  : 0/0
 12051 ;;		Unchanged: 0/0
 12052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12053 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12054 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12055 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12056 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12057 ;;Total ram usage:        0 bytes
 12058 ;; Hardware stack levels used:    1
 12059 ;; Hardware stack levels required when called:    5
 12060 ;; This function calls:
 12061 ;;		Nothing
 12062 ;; This function is called by:
 12063 ;;		_I2C_Start
 12064 ;;		_i2c_masterOperation
 12065 ;; This function uses a non-reentrant model
 12066 ;;
 12067                           
 12068                           
 12069                           ;psect for function _i2c1_driver_start
 12070  161B                     _i2c1_driver_start:	
 12071                           
 12072                           ;mcc_generated_files/i2c1_driver.c: 148:     SSP1CON2bits.SEN = 1;
 12073                           
 12074                           ;incstack = 0
 12075                           ; Regs used in _i2c1_driver_start: []
 12076  161B  0024               	movlb	4	; select bank4
 12077  161C  1416               	bsf	22,0	;volatile
 12078  161D  0008               	return
 12079  161E                     __end_of_i2c1_driver_start:	
 12080                           
 12081                           	psect	text39
 12082  1618                     __ptext39:	
 12083 ;; *************** function _I2C_Send_NACK *****************
 12084 ;; Defined at:
 12085 ;;		line 66 in file "i2c.c"
 12086 ;; Parameters:    Size  Location     Type
 12087 ;;		None
 12088 ;; Auto vars:     Size  Location     Type
 12089 ;;		None
 12090 ;; Return value:  Size  Location     Type
 12091 ;;                  1    wreg      void 
 12092 ;; Registers used:
 12093 ;;		status,2, status,0, pclath, cstack
 12094 ;; Tracked objects:
 12095 ;;		On entry : 0/0
 12096 ;;		On exit  : 0/0
 12097 ;;		Unchanged: 0/0
 12098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12099 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12100 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12101 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12102 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12103 ;;Total ram usage:        0 bytes
 12104 ;; Hardware stack levels used:    1
 12105 ;; Hardware stack levels required when called:    6
 12106 ;; This function calls:
 12107 ;;		_i2c1_driver_sendNACK
 12108 ;; This function is called by:
 12109 ;;		_wireReadDataBlock
 12110 ;;		_wireReadDataByte
 12111 ;; This function uses a non-reentrant model
 12112 ;;
 12113                           
 12114                           
 12115                           ;psect for function _I2C_Send_NACK
 12116  1618                     _I2C_Send_NACK:	
 12117                           
 12118                           ;i2c.c: 68:     i2c1_driver_sendNACK();
 12119                           
 12120                           ;incstack = 0
 12121                           ; Regs used in _I2C_Send_NACK: [status,2+status,0+pclath+cstack]
 12122  1618  3196  2653         	fcall	_i2c1_driver_sendNACK
 12123  161A  0008               	return
 12124  161B                     __end_of_I2C_Send_NACK:	
 12125                           
 12126                           	psect	text40
 12127  1653                     __ptext40:	
 12128 ;; *************** function _i2c1_driver_sendNACK *****************
 12129 ;; Defined at:
 12130 ;;		line 202 in file "mcc_generated_files/i2c1_driver.c"
 12131 ;; Parameters:    Size  Location     Type
 12132 ;;		None
 12133 ;; Auto vars:     Size  Location     Type
 12134 ;;		None
 12135 ;; Return value:  Size  Location     Type
 12136 ;;                  1    wreg      void 
 12137 ;; Registers used:
 12138 ;;		None
 12139 ;; Tracked objects:
 12140 ;;		On entry : 0/0
 12141 ;;		On exit  : 0/0
 12142 ;;		Unchanged: 0/0
 12143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12144 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12145 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12146 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12147 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12148 ;;Total ram usage:        0 bytes
 12149 ;; Hardware stack levels used:    1
 12150 ;; Hardware stack levels required when called:    5
 12151 ;; This function calls:
 12152 ;;		Nothing
 12153 ;; This function is called by:
 12154 ;;		_I2C_Send_NACK
 12155 ;; This function uses a non-reentrant model
 12156 ;;
 12157                           
 12158                           
 12159                           ;psect for function _i2c1_driver_sendNACK
 12160  1653                     _i2c1_driver_sendNACK:	
 12161                           
 12162                           ;mcc_generated_files/i2c1_driver.c: 204:     SSP1CON2bits.ACKDT = 1;
 12163                           
 12164                           ;incstack = 0
 12165                           ; Regs used in _i2c1_driver_sendNACK: []
 12166  1653  0024               	movlb	4	; select bank4
 12167  1654  1696               	bsf	22,5	;volatile
 12168                           
 12169                           ;mcc_generated_files/i2c1_driver.c: 205:     SSP1CON2bits.ACKEN = 1;
 12170  1655  1616               	bsf	22,4	;volatile
 12171  1656  0008               	return
 12172  1657                     __end_of_i2c1_driver_sendNACK:	
 12173                           
 12174                           	psect	text41
 12175  1719                     __ptext41:	
 12176 ;; *************** function _I2C_Read_Byte *****************
 12177 ;; Defined at:
 12178 ;;		line 115 in file "i2c.c"
 12179 ;; Parameters:    Size  Location     Type
 12180 ;;		None
 12181 ;; Auto vars:     Size  Location     Type
 12182 ;;		None
 12183 ;; Return value:  Size  Location     Type
 12184 ;;                  1    wreg      unsigned char 
 12185 ;; Registers used:
 12186 ;;		wreg, status,2, status,0, pclath, cstack
 12187 ;; Tracked objects:
 12188 ;;		On entry : 0/0
 12189 ;;		On exit  : 0/0
 12190 ;;		Unchanged: 0/0
 12191 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12192 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12193 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12194 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12195 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12196 ;;Total ram usage:        0 bytes
 12197 ;; Hardware stack levels used:    1
 12198 ;; Hardware stack levels required when called:    6
 12199 ;; This function calls:
 12200 ;;		_i2c1_driver_getRXData
 12201 ;;		_i2c1_driver_isBufferFull
 12202 ;;		_i2c1_driver_startRX
 12203 ;; This function is called by:
 12204 ;;		_wireReadDataBlock
 12205 ;;		_wireReadDataByte
 12206 ;; This function uses a non-reentrant model
 12207 ;;
 12208                           
 12209                           
 12210                           ;psect for function _I2C_Read_Byte
 12211  1719                     _I2C_Read_Byte:	
 12212                           
 12213                           ;i2c.c: 117:     i2c1_driver_startRX();
 12214                           
 12215                           ;incstack = 0
 12216                           ; Regs used in _I2C_Read_Byte: [wreg+status,2+status,0+pclath+cstack]
 12217  1719  3196  2615  3197   	fcall	_i2c1_driver_startRX
 12218  171C                     l6350:	
 12219                           ;i2c.c: 121:  while (i2c1_driver_isBufferFull() == 0) {
 12220                           
 12221                           
 12222                           ;i2c.c: 121:  while (i2c1_driver_isBufferFull() == 0) {
 12223  171C  3196  269A  3197   	fcall	_i2c1_driver_isBufferFull
 12224  171F  1C03               	btfss	3,0
 12225  1720  2F1C               	goto	l6350
 12226                           
 12227                           ;i2c.c: 137:   return i2c1_driver_getRXData();
 12228  1721  3196  2612         	fcall	_i2c1_driver_getRXData
 12229  1723  0008               	return
 12230  1724                     __end_of_I2C_Read_Byte:	
 12231                           
 12232                           	psect	text42
 12233  1615                     __ptext42:	
 12234 ;; *************** function _i2c1_driver_startRX *****************
 12235 ;; Defined at:
 12236 ;;		line 166 in file "mcc_generated_files/i2c1_driver.c"
 12237 ;; Parameters:    Size  Location     Type
 12238 ;;		None
 12239 ;; Auto vars:     Size  Location     Type
 12240 ;;		None
 12241 ;; Return value:  Size  Location     Type
 12242 ;;                  1    wreg      void 
 12243 ;; Registers used:
 12244 ;;		None
 12245 ;; Tracked objects:
 12246 ;;		On entry : 0/0
 12247 ;;		On exit  : 0/0
 12248 ;;		Unchanged: 0/0
 12249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12250 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12251 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12252 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12253 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12254 ;;Total ram usage:        0 bytes
 12255 ;; Hardware stack levels used:    1
 12256 ;; Hardware stack levels required when called:    5
 12257 ;; This function calls:
 12258 ;;		Nothing
 12259 ;; This function is called by:
 12260 ;;		_I2C_Read_Byte
 12261 ;; This function uses a non-reentrant model
 12262 ;;
 12263                           
 12264                           
 12265                           ;psect for function _i2c1_driver_startRX
 12266  1615                     _i2c1_driver_startRX:	
 12267                           
 12268                           ;mcc_generated_files/i2c1_driver.c: 168:     SSP1CON2bits.RCEN = 1;
 12269                           
 12270                           ;incstack = 0
 12271                           ; Regs used in _i2c1_driver_startRX: []
 12272  1615  0024               	movlb	4	; select bank4
 12273  1616  1596               	bsf	22,3	;volatile
 12274  1617  0008               	return
 12275  1618                     __end_of_i2c1_driver_startRX:	
 12276                           
 12277                           	psect	text43
 12278  169A                     __ptext43:	
 12279 ;; *************** function _i2c1_driver_isBufferFull *****************
 12280 ;; Defined at:
 12281 ;;		line 213 in file "mcc_generated_files/i2c1_driver.c"
 12282 ;; Parameters:    Size  Location     Type
 12283 ;;		None
 12284 ;; Auto vars:     Size  Location     Type
 12285 ;;		None
 12286 ;; Return value:  Size  Location     Type
 12287 ;;		None               void
 12288 ;; Registers used:
 12289 ;;		wreg, status,2, status,0
 12290 ;; Tracked objects:
 12291 ;;		On entry : 0/0
 12292 ;;		On exit  : 0/0
 12293 ;;		Unchanged: 0/0
 12294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12295 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12296 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12297 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12298 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12299 ;;Total ram usage:        1 bytes
 12300 ;; Hardware stack levels used:    1
 12301 ;; Hardware stack levels required when called:    5
 12302 ;; This function calls:
 12303 ;;		Nothing
 12304 ;; This function is called by:
 12305 ;;		_I2C_Read_Byte
 12306 ;; This function uses a non-reentrant model
 12307 ;;
 12308                           
 12309                           
 12310                           ;psect for function _i2c1_driver_isBufferFull
 12311  169A                     _i2c1_driver_isBufferFull:	
 12312                           
 12313                           ;mcc_generated_files/i2c1_driver.c: 215:     return SSP1STATbits.BF;
 12314                           
 12315                           ;incstack = 0
 12316                           ; Regs used in _i2c1_driver_isBufferFull: [wreg+status,2+status,0]
 12317  169A  0024               	movlb	4	; select bank4
 12318  169B  0814               	movf	20,w	;volatile
 12319  169C  3901               	andlw	1
 12320  169D  0020               	movlb	0	; select bank0
 12321  169E  00A0               	movwf	??_i2c1_driver_isBufferFull
 12322  169F  0C20               	rrf	??_i2c1_driver_isBufferFull,w
 12323  16A0  0008               	return
 12324  16A1                     __end_of_i2c1_driver_isBufferFull:	
 12325                           
 12326                           	psect	text44
 12327  1612                     __ptext44:	
 12328 ;; *************** function _i2c1_driver_getRXData *****************
 12329 ;; Defined at:
 12330 ;;		line 171 in file "mcc_generated_files/i2c1_driver.c"
 12331 ;; Parameters:    Size  Location     Type
 12332 ;;		None
 12333 ;; Auto vars:     Size  Location     Type
 12334 ;;		None
 12335 ;; Return value:  Size  Location     Type
 12336 ;;                  1    wreg      unsigned char 
 12337 ;; Registers used:
 12338 ;;		wreg
 12339 ;; Tracked objects:
 12340 ;;		On entry : 0/0
 12341 ;;		On exit  : 0/0
 12342 ;;		Unchanged: 0/0
 12343 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12344 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12345 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12346 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12347 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12348 ;;Total ram usage:        0 bytes
 12349 ;; Hardware stack levels used:    1
 12350 ;; Hardware stack levels required when called:    5
 12351 ;; This function calls:
 12352 ;;		Nothing
 12353 ;; This function is called by:
 12354 ;;		_I2C_Read_Byte
 12355 ;; This function uses a non-reentrant model
 12356 ;;
 12357                           
 12358                           
 12359                           ;psect for function _i2c1_driver_getRXData
 12360  1612                     _i2c1_driver_getRXData:	
 12361                           
 12362                           ;mcc_generated_files/i2c1_driver.c: 173:     return SSP1BUF;
 12363                           
 12364                           ;incstack = 0
 12365                           ; Regs used in _i2c1_driver_getRXData: [wreg]
 12366  1612  0024               	movlb	4	; select bank4
 12367  1613  0811               	movf	17,w	;volatile
 12368  1614  0008               	return
 12369  1615                     __end_of_i2c1_driver_getRXData:	
 12370                           
 12371                           	psect	text45
 12372  160F                     __ptext45:	
 12373 ;; *************** function _I2C_ReStart *****************
 12374 ;; Defined at:
 12375 ;;		line 43 in file "i2c.c"
 12376 ;; Parameters:    Size  Location     Type
 12377 ;;		None
 12378 ;; Auto vars:     Size  Location     Type
 12379 ;;		None
 12380 ;; Return value:  Size  Location     Type
 12381 ;;                  1    wreg      void 
 12382 ;; Registers used:
 12383 ;;		status,2, status,0, pclath, cstack
 12384 ;; Tracked objects:
 12385 ;;		On entry : 0/0
 12386 ;;		On exit  : 0/0
 12387 ;;		Unchanged: 0/0
 12388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12389 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12390 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12391 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12392 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12393 ;;Total ram usage:        0 bytes
 12394 ;; Hardware stack levels used:    1
 12395 ;; Hardware stack levels required when called:    6
 12396 ;; This function calls:
 12397 ;;		_i2c1_driver_restart
 12398 ;; This function is called by:
 12399 ;;		_wireReadDataBlock
 12400 ;;		_wireReadDataByte
 12401 ;; This function uses a non-reentrant model
 12402 ;;
 12403                           
 12404                           
 12405                           ;psect for function _I2C_ReStart
 12406  160F                     _I2C_ReStart:	
 12407                           
 12408                           ;i2c.c: 45:  i2c1_driver_restart();
 12409                           
 12410                           ;incstack = 0
 12411                           ; Regs used in _I2C_ReStart: [status,2+status,0+pclath+cstack]
 12412  160F  3196  260C         	fcall	_i2c1_driver_restart
 12413  1611  0008               	return
 12414  1612                     __end_of_I2C_ReStart:	
 12415                           
 12416                           	psect	text46
 12417  160C                     __ptext46:	
 12418 ;; *************** function _i2c1_driver_restart *****************
 12419 ;; Defined at:
 12420 ;;		line 151 in file "mcc_generated_files/i2c1_driver.c"
 12421 ;; Parameters:    Size  Location     Type
 12422 ;;		None
 12423 ;; Auto vars:     Size  Location     Type
 12424 ;;		None
 12425 ;; Return value:  Size  Location     Type
 12426 ;;                  1    wreg      void 
 12427 ;; Registers used:
 12428 ;;		None
 12429 ;; Tracked objects:
 12430 ;;		On entry : 0/0
 12431 ;;		On exit  : 0/0
 12432 ;;		Unchanged: 0/0
 12433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12434 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12435 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12436 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12437 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12438 ;;Total ram usage:        0 bytes
 12439 ;; Hardware stack levels used:    1
 12440 ;; Hardware stack levels required when called:    5
 12441 ;; This function calls:
 12442 ;;		Nothing
 12443 ;; This function is called by:
 12444 ;;		_I2C_ReStart
 12445 ;; This function uses a non-reentrant model
 12446 ;;
 12447                           
 12448                           
 12449                           ;psect for function _i2c1_driver_restart
 12450  160C                     _i2c1_driver_restart:	
 12451                           
 12452                           ;mcc_generated_files/i2c1_driver.c: 153:     SSP1CON2bits.RSEN = 1;
 12453                           
 12454                           ;incstack = 0
 12455                           ; Regs used in _i2c1_driver_restart: []
 12456  160C  0024               	movlb	4	; select bank4
 12457  160D  1496               	bsf	22,1	;volatile
 12458  160E  0008               	return
 12459  160F                     __end_of_i2c1_driver_restart:	
 12460                           
 12461                           	psect	text47
 12462  0EA6                     __ptext47:	
 12463 ;; *************** function _UART_Byte *****************
 12464 ;; Defined at:
 12465 ;;		line 346 in file "main.c"
 12466 ;; Parameters:    Size  Location     Type
 12467 ;;		None
 12468 ;; Auto vars:     Size  Location     Type
 12469 ;;  i               2   19[BANK0 ] int 
 12470 ;;  bits            5   14[BANK0 ] unsigned char [5]
 12471 ;;  tempBright      2   12[BANK0 ] int 
 12472 ;;  tempName        2   10[BANK0 ] int 
 12473 ;;  tempProx        2    8[BANK0 ] int 
 12474 ;;  tempOn          2    6[BANK0 ] int 
 12475 ;; Return value:  Size  Location     Type
 12476 ;;                  1    wreg      void 
 12477 ;; Registers used:
 12478 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12479 ;; Tracked objects:
 12480 ;;		On entry : 0/0
 12481 ;;		On exit  : 0/0
 12482 ;;		Unchanged: 0/0
 12483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12484 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12485 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12486 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12487 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12488 ;;Total ram usage:       16 bytes
 12489 ;; Hardware stack levels used:    1
 12490 ;; Hardware stack levels required when called:    6
 12491 ;; This function calls:
 12492 ;;		_strlen
 12493 ;; This function is called by:
 12494 ;;		_main
 12495 ;; This function uses a non-reentrant model
 12496 ;;
 12497                           
 12498                           
 12499                           ;psect for function _UART_Byte
 12500  0EA6                     _UART_Byte:	
 12501                           
 12502                           ;main.c: 347:     int tempOn = on + 1;
 12503                           
 12504                           ;incstack = 0
 12505                           ; Regs used in _UART_Byte: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12506  0EA6  0020               	movlb	0	; select bank0
 12507  0EA7  086A               	movf	_on,w
 12508  0EA8  3E01               	addlw	1
 12509  0EA9  00A6               	movwf	UART_Byte@tempOn
 12510  0EAA  3000               	movlw	0
 12511  0EAB  3D6B               	addwfc	_on+1,w
 12512  0EAC  00A7               	movwf	UART_Byte@tempOn+1
 12513                           
 12514                           ;main.c: 348:     int tempProx = prox + 1;
 12515  0EAD  0021               	movlb	1	; select bank1
 12516  0EAE  0860               	movf	_prox^(0+128),w
 12517  0EAF  3E01               	addlw	1
 12518  0EB0  0020               	movlb	0	; select bank0
 12519  0EB1  00A8               	movwf	UART_Byte@tempProx
 12520  0EB2  3000               	movlw	0
 12521  0EB3  0021               	movlb	1	; select bank1
 12522  0EB4  3D61               	addwfc	(_prox+1)^(0+128),w
 12523  0EB5  0020               	movlb	0	; select bank0
 12524  0EB6  00A9               	movwf	UART_Byte@tempProx+1
 12525                           
 12526                           ;main.c: 349:     int tempName = name + 1;
 12527  0EB7  085A               	movf	_name,w
 12528  0EB8  3E01               	addlw	1
 12529  0EB9  00AA               	movwf	UART_Byte@tempName
 12530  0EBA  3000               	movlw	0
 12531  0EBB  3D5B               	addwfc	_name+1,w
 12532  0EBC  00AB               	movwf	UART_Byte@tempName+1
 12533                           
 12534                           ;main.c: 350:     int tempBright = brightness + 1;
 12535  0EBD  086C               	movf	_brightness,w
 12536  0EBE  3E01               	addlw	1
 12537  0EBF  00AC               	movwf	UART_Byte@tempBright
 12538  0EC0  3000               	movlw	0
 12539  0EC1  3D6D               	addwfc	_brightness+1,w
 12540  0EC2  00AD               	movwf	UART_Byte@tempBright+1
 12541                           
 12542                           ;main.c: 351:     char bits[5] = {'A', tempOn, tempProx, tempName, tempBright};
 12543  0EC3  302E               	movlw	low UART_Byte@bits
 12544  0EC4  0086               	movwf	6
 12545  0EC5  3000               	movlw	high UART_Byte@bits
 12546  0EC6  0087               	movwf	7
 12547  0EC7  3005               	movlw	5
 12548  0EC8  00A5               	movwf	??_UART_Byte
 12549  0EC9  3000               	movlw	0
 12550  0ECA                     u6730:	
 12551  0ECA  001E               	movwi fsr1++
 12552  0ECB  0BA5               	decfsz	??_UART_Byte,f
 12553  0ECC  2ECA               	goto	u6730
 12554  0ECD  3041               	movlw	65
 12555  0ECE  00A5               	movwf	??_UART_Byte
 12556  0ECF  0825               	movf	??_UART_Byte,w
 12557  0ED0  00AE               	movwf	UART_Byte@bits
 12558  0ED1  0826               	movf	UART_Byte@tempOn,w
 12559  0ED2  00A5               	movwf	??_UART_Byte
 12560  0ED3  0825               	movf	??_UART_Byte,w
 12561  0ED4  00AF               	movwf	UART_Byte@bits+1
 12562  0ED5  0828               	movf	UART_Byte@tempProx,w
 12563  0ED6  00A5               	movwf	??_UART_Byte
 12564  0ED7  0825               	movf	??_UART_Byte,w
 12565  0ED8  00B0               	movwf	UART_Byte@bits+2
 12566  0ED9  082A               	movf	UART_Byte@tempName,w
 12567  0EDA  00A5               	movwf	??_UART_Byte
 12568  0EDB  0825               	movf	??_UART_Byte,w
 12569  0EDC  00B1               	movwf	UART_Byte@bits+3
 12570  0EDD  082C               	movf	UART_Byte@tempBright,w
 12571  0EDE  00A5               	movwf	??_UART_Byte
 12572  0EDF  0825               	movf	??_UART_Byte,w
 12573  0EE0  00B2               	movwf	UART_Byte@bits+4
 12574                           
 12575                           ;main.c: 352:     for(int i = 0; i < strlen(bits); i++) {
 12576  0EE1  01B3               	clrf	UART_Byte@i
 12577  0EE2  01B4               	clrf	UART_Byte@i+1
 12578  0EE3                     l7570:	
 12579  0EE3  302E               	movlw	low UART_Byte@bits
 12580  0EE4  00A0               	movwf	strlen@s
 12581  0EE5  3000               	movlw	high UART_Byte@bits
 12582  0EE6  00A1               	movwf	strlen@s+1
 12583  0EE7  3188  2056  318E   	fcall	_strlen
 12584  0EEA  0020               	movlb	0	; select bank0
 12585  0EEB  0821               	movf	?_strlen+1,w
 12586  0EEC  0234               	subwf	UART_Byte@i+1,w
 12587  0EED  1D03               	skipz
 12588  0EEE  2EF1               	goto	u6755
 12589  0EEF  0820               	movf	?_strlen,w
 12590  0EF0  0233               	subwf	UART_Byte@i,w
 12591  0EF1                     u6755:	
 12592  0EF1  1803               	btfsc	3,0
 12593  0EF2  0008               	return
 12594  0EF3                     l1044:	
 12595  0EF3  0023               	movlb	3	; select bank3
 12596  0EF4  1C9E               	btfss	30,1	;volatile
 12597  0EF5  2EF3               	goto	l1044
 12598                           
 12599                           ;main.c: 354:         TXREG1 = bits[i];
 12600  0EF6  0020               	movlb	0	; select bank0
 12601  0EF7  0833               	movf	UART_Byte@i,w
 12602  0EF8  3E2E               	addlw	(low (UART_Byte@bits| 0))& (0+255)
 12603  0EF9  0086               	movwf	6
 12604  0EFA  0187               	clrf	7
 12605  0EFB  0801               	movf	1,w
 12606  0EFC  0023               	movlb	3	; select bank3
 12607  0EFD  009A               	movwf	26	;volatile
 12608                           
 12609                           ;main.c: 355:     }
 12610  0EFE  3001               	movlw	1
 12611  0EFF  0020               	movlb	0	; select bank0
 12612  0F00  07B3               	addwf	UART_Byte@i,f
 12613  0F01  3000               	movlw	0
 12614  0F02  3DB4               	addwfc	UART_Byte@i+1,f
 12615  0F03  2EE3               	goto	l7570
 12616  0F04                     __end_of_UART_Byte:	
 12617                           
 12618                           	psect	text48
 12619  086E                     __ptext48:	
 12620 ;; *************** function _SYSTEM_Initialize *****************
 12621 ;; Defined at:
 12622 ;;		line 50 in file "mcc_generated_files/mcc.c"
 12623 ;; Parameters:    Size  Location     Type
 12624 ;;		None
 12625 ;; Auto vars:     Size  Location     Type
 12626 ;;		None
 12627 ;; Return value:  Size  Location     Type
 12628 ;;                  1    wreg      void 
 12629 ;; Registers used:
 12630 ;;		wreg, status,2, status,0, pclath, cstack
 12631 ;; Tracked objects:
 12632 ;;		On entry : 0/0
 12633 ;;		On exit  : 0/0
 12634 ;;		Unchanged: 0/0
 12635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12636 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12637 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12638 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12639 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12640 ;;Total ram usage:        0 bytes
 12641 ;; Hardware stack levels used:    1
 12642 ;; Hardware stack levels required when called:    7
 12643 ;; This function calls:
 12644 ;;		_ADC_Initialize
 12645 ;;		_EUSART_Initialize
 12646 ;;		_OSCILLATOR_Initialize
 12647 ;;		_PIN_MANAGER_Initialize
 12648 ;;		_PMD_Initialize
 12649 ;;		_PWM1_Initialize
 12650 ;;		_SPI2_Initialize
 12651 ;;		_TMR2_Initialize
 12652 ;;		_WDT_Initialize
 12653 ;; This function is called by:
 12654 ;;		_main
 12655 ;; This function uses a non-reentrant model
 12656 ;;
 12657                           
 12658                           
 12659                           ;psect for function _SYSTEM_Initialize
 12660  086E                     _SYSTEM_Initialize:	
 12661                           
 12662                           ;mcc_generated_files/mcc.c: 53:     PMD_Initialize();
 12663                           
 12664                           ;incstack = 0
 12665                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
 12666  086E  3196  26C1  3188   	fcall	_PMD_Initialize
 12667                           
 12668                           ;mcc_generated_files/mcc.c: 54:     PIN_MANAGER_Initialize();
 12669  0871  318C  243D  3188   	fcall	_PIN_MANAGER_Initialize
 12670                           
 12671                           ;mcc_generated_files/mcc.c: 55:     OSCILLATOR_Initialize();
 12672  0874  3196  26B9  3188   	fcall	_OSCILLATOR_Initialize
 12673                           
 12674                           ;mcc_generated_files/mcc.c: 56:     WDT_Initialize();
 12675  0877  3196  264F  3188   	fcall	_WDT_Initialize
 12676                           
 12677                           ;mcc_generated_files/mcc.c: 57:     SPI2_Initialize();
 12678  087A  3196  2693  3188   	fcall	_SPI2_Initialize
 12679                           
 12680                           ;mcc_generated_files/mcc.c: 58:     PWM1_Initialize();
 12681  087D  3197  2730  3188   	fcall	_PWM1_Initialize
 12682                           
 12683                           ;mcc_generated_files/mcc.c: 59:     ADC_Initialize();
 12684  0880  3196  26B1  3188   	fcall	_ADC_Initialize
 12685                           
 12686                           ;mcc_generated_files/mcc.c: 60:     TMR2_Initialize();
 12687  0883  3196  26C9  3188   	fcall	_TMR2_Initialize
 12688                           
 12689                           ;mcc_generated_files/mcc.c: 61:     EUSART_Initialize();
 12690  0886  318B  23FA         	fcall	_EUSART_Initialize
 12691  0888  0008               	return
 12692  0889                     __end_of_SYSTEM_Initialize:	
 12693                           
 12694                           	psect	text49
 12695  164F                     __ptext49:	
 12696 ;; *************** function _WDT_Initialize *****************
 12697 ;; Defined at:
 12698 ;;		line 78 in file "mcc_generated_files/mcc.c"
 12699 ;; Parameters:    Size  Location     Type
 12700 ;;		None
 12701 ;; Auto vars:     Size  Location     Type
 12702 ;;		None
 12703 ;; Return value:  Size  Location     Type
 12704 ;;                  1    wreg      void 
 12705 ;; Registers used:
 12706 ;;		wreg
 12707 ;; Tracked objects:
 12708 ;;		On entry : 0/0
 12709 ;;		On exit  : 0/0
 12710 ;;		Unchanged: 0/0
 12711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12712 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12713 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12714 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12715 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12716 ;;Total ram usage:        0 bytes
 12717 ;; Hardware stack levels used:    1
 12718 ;; Hardware stack levels required when called:    5
 12719 ;; This function calls:
 12720 ;;		Nothing
 12721 ;; This function is called by:
 12722 ;;		_SYSTEM_Initialize
 12723 ;; This function uses a non-reentrant model
 12724 ;;
 12725                           
 12726                           
 12727                           ;psect for function _WDT_Initialize
 12728  164F                     _WDT_Initialize:	
 12729                           
 12730                           ;mcc_generated_files/mcc.c: 81:     WDTCON = 0x18;
 12731                           
 12732                           ;incstack = 0
 12733                           ; Regs used in _WDT_Initialize: [wreg]
 12734  164F  3018               	movlw	24
 12735  1650  0021               	movlb	1	; select bank1
 12736  1651  0097               	movwf	23	;volatile
 12737  1652  0008               	return
 12738  1653                     __end_of_WDT_Initialize:	
 12739                           
 12740                           	psect	text50
 12741  16C9                     __ptext50:	
 12742 ;; *************** function _TMR2_Initialize *****************
 12743 ;; Defined at:
 12744 ;;		line 62 in file "mcc_generated_files/tmr2.c"
 12745 ;; Parameters:    Size  Location     Type
 12746 ;;		None
 12747 ;; Auto vars:     Size  Location     Type
 12748 ;;		None
 12749 ;; Return value:  Size  Location     Type
 12750 ;;                  1    wreg      void 
 12751 ;; Registers used:
 12752 ;;		wreg, status,2
 12753 ;; Tracked objects:
 12754 ;;		On entry : 0/0
 12755 ;;		On exit  : 0/0
 12756 ;;		Unchanged: 0/0
 12757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12758 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12759 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12760 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12761 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12762 ;;Total ram usage:        0 bytes
 12763 ;; Hardware stack levels used:    1
 12764 ;; Hardware stack levels required when called:    5
 12765 ;; This function calls:
 12766 ;;		Nothing
 12767 ;; This function is called by:
 12768 ;;		_SYSTEM_Initialize
 12769 ;; This function uses a non-reentrant model
 12770 ;;
 12771                           
 12772                           
 12773                           ;psect for function _TMR2_Initialize
 12774  16C9                     _TMR2_Initialize:	
 12775                           
 12776                           ;mcc_generated_files/tmr2.c: 67:     PR2 = 0xFF;
 12777                           
 12778                           ;incstack = 0
 12779                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
 12780  16C9  30FF               	movlw	255
 12781  16CA  0020               	movlb	0	; select bank0
 12782  16CB  009E               	movwf	30	;volatile
 12783                           
 12784                           ;mcc_generated_files/tmr2.c: 70:     TMR2 = 0x00;
 12785  16CC  019D               	clrf	29	;volatile
 12786                           
 12787                           ;mcc_generated_files/tmr2.c: 73:     PIR1bits.TMR2IF = 0;
 12788  16CD  1091               	bcf	17,1	;volatile
 12789                           
 12790                           ;mcc_generated_files/tmr2.c: 76:     T2CON = 0x04;
 12791  16CE  3004               	movlw	4
 12792  16CF  009F               	movwf	31	;volatile
 12793  16D0  0008               	return
 12794  16D1                     __end_of_TMR2_Initialize:	
 12795                           
 12796                           	psect	text51
 12797  1693                     __ptext51:	
 12798 ;; *************** function _SPI2_Initialize *****************
 12799 ;; Defined at:
 12800 ;;		line 65 in file "mcc_generated_files/spi2.c"
 12801 ;; Parameters:    Size  Location     Type
 12802 ;;		None
 12803 ;; Auto vars:     Size  Location     Type
 12804 ;;		None
 12805 ;; Return value:  Size  Location     Type
 12806 ;;                  1    wreg      void 
 12807 ;; Registers used:
 12808 ;;		wreg, status,2
 12809 ;; Tracked objects:
 12810 ;;		On entry : 0/0
 12811 ;;		On exit  : 0/0
 12812 ;;		Unchanged: 0/0
 12813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12814 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12815 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12816 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12817 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12818 ;;Total ram usage:        0 bytes
 12819 ;; Hardware stack levels used:    1
 12820 ;; Hardware stack levels required when called:    5
 12821 ;; This function calls:
 12822 ;;		Nothing
 12823 ;; This function is called by:
 12824 ;;		_SYSTEM_Initialize
 12825 ;; This function uses a non-reentrant model
 12826 ;;
 12827                           
 12828                           
 12829                           ;psect for function _SPI2_Initialize
 12830  1693                     _SPI2_Initialize:	
 12831                           
 12832                           ;mcc_generated_files/spi2.c: 70:     SSP2STAT = 0x80;
 12833                           
 12834                           ;incstack = 0
 12835                           ; Regs used in _SPI2_Initialize: [wreg+status,2]
 12836  1693  3080               	movlw	128
 12837  1694  0024               	movlb	4	; select bank4
 12838  1695  009C               	movwf	28	;volatile
 12839                           
 12840                           ;mcc_generated_files/spi2.c: 73:     SSP2CON1 = 0x31;
 12841  1696  3031               	movlw	49
 12842  1697  009D               	movwf	29	;volatile
 12843                           
 12844                           ;mcc_generated_files/spi2.c: 76:     SSP2ADD = 0x00;
 12845  1698  019A               	clrf	26	;volatile
 12846  1699  0008               	return
 12847  169A                     __end_of_SPI2_Initialize:	
 12848                           
 12849                           	psect	text52
 12850  1730                     __ptext52:	
 12851 ;; *************** function _PWM1_Initialize *****************
 12852 ;; Defined at:
 12853 ;;		line 64 in file "mcc_generated_files/pwm1.c"
 12854 ;; Parameters:    Size  Location     Type
 12855 ;;		None
 12856 ;; Auto vars:     Size  Location     Type
 12857 ;;		None
 12858 ;; Return value:  Size  Location     Type
 12859 ;;                  1    wreg      void 
 12860 ;; Registers used:
 12861 ;;		wreg, status,2, status,0
 12862 ;; Tracked objects:
 12863 ;;		On entry : 0/0
 12864 ;;		On exit  : 0/0
 12865 ;;		Unchanged: 0/0
 12866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12867 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12868 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12869 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12870 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12871 ;;Total ram usage:        0 bytes
 12872 ;; Hardware stack levels used:    1
 12873 ;; Hardware stack levels required when called:    5
 12874 ;; This function calls:
 12875 ;;		Nothing
 12876 ;; This function is called by:
 12877 ;;		_SYSTEM_Initialize
 12878 ;; This function uses a non-reentrant model
 12879 ;;
 12880                           
 12881                           
 12882                           ;psect for function _PWM1_Initialize
 12883  1730                     _PWM1_Initialize:	
 12884                           
 12885                           ;mcc_generated_files/pwm1.c: 69:  CCP1CON = 0x8F;
 12886                           
 12887                           ;incstack = 0
 12888                           ; Regs used in _PWM1_Initialize: [wreg+status,2+status,0]
 12889  1730  308F               	movlw	143
 12890  1731  0025               	movlb	5	; select bank5
 12891  1732  0093               	movwf	19	;volatile
 12892                           
 12893                           ;mcc_generated_files/pwm1.c: 72:  CCPR1H = 0x03;
 12894  1733  3003               	movlw	3
 12895  1734  0092               	movwf	18	;volatile
 12896                           
 12897                           ;mcc_generated_files/pwm1.c: 75:  CCPR1L = 0x32;
 12898  1735  3032               	movlw	50
 12899  1736  0091               	movwf	17	;volatile
 12900                           
 12901                           ;mcc_generated_files/pwm1.c: 78:  CCPTMRSbits.C1TSEL = 0x1;
 12902  1737  081F               	movf	31,w	;volatile
 12903  1738  39FC               	andlw	-4
 12904  1739  3801               	iorlw	1
 12905  173A  009F               	movwf	31	;volatile
 12906  173B  0008               	return
 12907  173C                     __end_of_PWM1_Initialize:	
 12908                           
 12909                           	psect	text53
 12910  16C1                     __ptext53:	
 12911 ;; *************** function _PMD_Initialize *****************
 12912 ;; Defined at:
 12913 ;;		line 84 in file "mcc_generated_files/mcc.c"
 12914 ;; Parameters:    Size  Location     Type
 12915 ;;		None
 12916 ;; Auto vars:     Size  Location     Type
 12917 ;;		None
 12918 ;; Return value:  Size  Location     Type
 12919 ;;                  1    wreg      void 
 12920 ;; Registers used:
 12921 ;;		status,2
 12922 ;; Tracked objects:
 12923 ;;		On entry : 0/0
 12924 ;;		On exit  : 0/0
 12925 ;;		Unchanged: 0/0
 12926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12927 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12928 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12929 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12930 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12931 ;;Total ram usage:        0 bytes
 12932 ;; Hardware stack levels used:    1
 12933 ;; Hardware stack levels required when called:    5
 12934 ;; This function calls:
 12935 ;;		Nothing
 12936 ;; This function is called by:
 12937 ;;		_SYSTEM_Initialize
 12938 ;; This function uses a non-reentrant model
 12939 ;;
 12940                           
 12941                           
 12942                           ;psect for function _PMD_Initialize
 12943  16C1                     _PMD_Initialize:	
 12944                           
 12945                           ;mcc_generated_files/mcc.c: 87:     PMD0 = 0x00;
 12946                           
 12947                           ;incstack = 0
 12948                           ; Regs used in _PMD_Initialize: [status,2]
 12949  16C1  0032               	movlb	18	; select bank18
 12950  16C2  0191               	clrf	17	;volatile
 12951                           
 12952                           ;mcc_generated_files/mcc.c: 89:     PMD1 = 0x00;
 12953  16C3  0192               	clrf	18	;volatile
 12954                           
 12955                           ;mcc_generated_files/mcc.c: 91:     PMD2 = 0x00;
 12956  16C4  0193               	clrf	19	;volatile
 12957                           
 12958                           ;mcc_generated_files/mcc.c: 93:     PMD3 = 0x00;
 12959  16C5  0194               	clrf	20	;volatile
 12960                           
 12961                           ;mcc_generated_files/mcc.c: 95:     PMD4 = 0x00;
 12962  16C6  0195               	clrf	21	;volatile
 12963                           
 12964                           ;mcc_generated_files/mcc.c: 97:     PMD5 = 0x00;
 12965  16C7  0196               	clrf	22	;volatile
 12966  16C8  0008               	return
 12967  16C9                     __end_of_PMD_Initialize:	
 12968                           
 12969                           	psect	text54
 12970  0C3D                     __ptext54:	
 12971 ;; *************** function _PIN_MANAGER_Initialize *****************
 12972 ;; Defined at:
 12973 ;;		line 57 in file "mcc_generated_files/pin_manager.c"
 12974 ;; Parameters:    Size  Location     Type
 12975 ;;		None
 12976 ;; Auto vars:     Size  Location     Type
 12977 ;;		None
 12978 ;; Return value:  Size  Location     Type
 12979 ;;                  1    wreg      void 
 12980 ;; Registers used:
 12981 ;;		wreg, status,2, status,0, pclath, cstack
 12982 ;; Tracked objects:
 12983 ;;		On entry : 0/0
 12984 ;;		On exit  : 0/0
 12985 ;;		Unchanged: 0/0
 12986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12987 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12988 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12989 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12990 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12991 ;;Total ram usage:        0 bytes
 12992 ;; Hardware stack levels used:    1
 12993 ;; Hardware stack levels required when called:    6
 12994 ;; This function calls:
 12995 ;;		_IOCAF4_SetInterruptHandler
 12996 ;; This function is called by:
 12997 ;;		_SYSTEM_Initialize
 12998 ;; This function uses a non-reentrant model
 12999 ;;
 13000                           
 13001                           
 13002                           ;psect for function _PIN_MANAGER_Initialize
 13003  0C3D                     _PIN_MANAGER_Initialize:	
 13004                           
 13005                           ;mcc_generated_files/pin_manager.c: 62:     LATA = 0x00;
 13006                           
 13007                           ;incstack = 0
 13008                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0+pclath+cstack]
 13009  0C3D  0022               	movlb	2	; select bank2
 13010  0C3E  018C               	clrf	12	;volatile
 13011                           
 13012                           ;mcc_generated_files/pin_manager.c: 63:     LATB = 0x00;
 13013  0C3F  018D               	clrf	13	;volatile
 13014                           
 13015                           ;mcc_generated_files/pin_manager.c: 64:     LATC = 0x00;
 13016  0C40  018E               	clrf	14	;volatile
 13017                           
 13018                           ;mcc_generated_files/pin_manager.c: 69:     TRISA = 0x33;
 13019  0C41  3033               	movlw	51
 13020  0C42  0021               	movlb	1	; select bank1
 13021  0C43  008C               	movwf	12	;volatile
 13022                           
 13023                           ;mcc_generated_files/pin_manager.c: 70:     TRISB = 0xB0;
 13024  0C44  30B0               	movlw	176
 13025  0C45  008D               	movwf	13	;volatile
 13026                           
 13027                           ;mcc_generated_files/pin_manager.c: 71:     TRISC = 0x9A;
 13028  0C46  309A               	movlw	154
 13029  0C47  008E               	movwf	14	;volatile
 13030                           
 13031                           ;mcc_generated_files/pin_manager.c: 76:     ANSELC = 0xF4;
 13032  0C48  30F4               	movlw	244
 13033  0C49  0023               	movlb	3	; select bank3
 13034  0C4A  008E               	movwf	14	;volatile
 13035                           
 13036                           ;mcc_generated_files/pin_manager.c: 77:     ANSELB = 0x20;
 13037  0C4B  3020               	movlw	32
 13038  0C4C  008D               	movwf	13	;volatile
 13039                           
 13040                           ;mcc_generated_files/pin_manager.c: 78:     ANSELA = 0x01;
 13041  0C4D  3001               	movlw	1
 13042  0C4E  008C               	movwf	12	;volatile
 13043                           
 13044                           ;mcc_generated_files/pin_manager.c: 83:     WPUB = 0x00;
 13045  0C4F  0024               	movlb	4	; select bank4
 13046  0C50  018D               	clrf	13	;volatile
 13047                           
 13048                           ;mcc_generated_files/pin_manager.c: 84:     WPUA = 0x00;
 13049  0C51  018C               	clrf	12	;volatile
 13050                           
 13051                           ;mcc_generated_files/pin_manager.c: 85:     WPUC = 0x00;
 13052  0C52  018E               	clrf	14	;volatile
 13053                           
 13054                           ;mcc_generated_files/pin_manager.c: 90:     ODCONA = 0x00;
 13055  0C53  0025               	movlb	5	; select bank5
 13056  0C54  018C               	clrf	12	;volatile
 13057                           
 13058                           ;mcc_generated_files/pin_manager.c: 91:     ODCONB = 0x00;
 13059  0C55  018D               	clrf	13	;volatile
 13060                           
 13061                           ;mcc_generated_files/pin_manager.c: 92:     ODCONC = 0x00;
 13062  0C56  018E               	clrf	14	;volatile
 13063                           
 13064                           ;mcc_generated_files/pin_manager.c: 97:     SLRCONA = 0x37;
 13065  0C57  3037               	movlw	55
 13066  0C58  0026               	movlb	6	; select bank6
 13067  0C59  008C               	movwf	12	;volatile
 13068                           
 13069                           ;mcc_generated_files/pin_manager.c: 98:     SLRCONB = 0xF0;
 13070  0C5A  30F0               	movlw	240
 13071  0C5B  008D               	movwf	13	;volatile
 13072                           
 13073                           ;mcc_generated_files/pin_manager.c: 99:     SLRCONC = 0xFF;
 13074  0C5C  30FF               	movlw	255
 13075  0C5D  008E               	movwf	14	;volatile
 13076                           
 13077                           ;mcc_generated_files/pin_manager.c: 106:     IOCAFbits.IOCAF4 = 0;
 13078  0C5E  0027               	movlb	7	; select bank7
 13079  0C5F  1213               	bcf	19,4	;volatile
 13080                           
 13081                           ;mcc_generated_files/pin_manager.c: 108:     IOCANbits.IOCAN4 = 1;
 13082  0C60  1612               	bsf	18,4	;volatile
 13083                           
 13084                           ;mcc_generated_files/pin_manager.c: 110:     IOCAPbits.IOCAP4 = 0;
 13085  0C61  1211               	bcf	17,4	;volatile
 13086                           
 13087                           ;mcc_generated_files/pin_manager.c: 115:     IOCAF4_SetInterruptHandler(IOCAF4_DefaultIn
      +                          terruptHandler);
 13088  0C62  30EA               	movlw	low _IOCAF4_DefaultInterruptHandler
 13089  0C63  0020               	movlb	0	; select bank0
 13090  0C64  00A0               	movwf	IOCAF4_SetInterruptHandler@InterruptHandler
 13091  0C65  3015               	movlw	high _IOCAF4_DefaultInterruptHandler
 13092  0C66  00A1               	movwf	IOCAF4_SetInterruptHandler@InterruptHandler+1
 13093  0C67  3197  2706         	fcall	_IOCAF4_SetInterruptHandler
 13094                           
 13095                           ;mcc_generated_files/pin_manager.c: 118:     PIE0bits.IOCIE = 1;
 13096  0C69  0021               	movlb	1	; select bank1
 13097  0C6A  1610               	bsf	16,4	;volatile
 13098                           
 13099                           ;mcc_generated_files/pin_manager.c: 121:     SSP2DATPPS = 0x0C;
 13100  0C6B  300C               	movlw	12
 13101  0C6C  003C               	movlb	28	; select bank28
 13102  0C6D  009E               	movwf	30	;volatile
 13103                           
 13104                           ;mcc_generated_files/pin_manager.c: 122:     SSP1CLKPPS = 0x0F;
 13105  0C6E  300F               	movlw	15
 13106  0C6F  00A0               	movwf	32	;volatile
 13107                           
 13108                           ;mcc_generated_files/pin_manager.c: 123:     RA4PPS = 0x19;
 13109  0C70  3019               	movlw	25
 13110  0C71  003D               	movlb	29	; select bank29
 13111  0C72  0094               	movwf	20	;volatile
 13112                           
 13113                           ;mcc_generated_files/pin_manager.c: 124:     RB6PPS = 0x1A;
 13114  0C73  301A               	movlw	26
 13115  0C74  009E               	movwf	30	;volatile
 13116                           
 13117                           ;mcc_generated_files/pin_manager.c: 125:     RB7PPS = 0x18;
 13118  0C75  3018               	movlw	24
 13119  0C76  009F               	movwf	31	;volatile
 13120                           
 13121                           ;mcc_generated_files/pin_manager.c: 126:     RC2PPS = 0x1B;
 13122  0C77  301B               	movlw	27
 13123  0C78  00A2               	movwf	34	;volatile
 13124                           
 13125                           ;mcc_generated_files/pin_manager.c: 127:     RC5PPS = 0x14;
 13126  0C79  3014               	movlw	20
 13127  0C7A  00A5               	movwf	37	;volatile
 13128                           
 13129                           ;mcc_generated_files/pin_manager.c: 128:     SSP1DATPPS = 0x04;
 13130  0C7B  3004               	movlw	4
 13131  0C7C  003C               	movlb	28	; select bank28
 13132  0C7D  00A1               	movwf	33	;volatile
 13133                           
 13134                           ;mcc_generated_files/pin_manager.c: 129:     SSP2CLKPPS = 0x0E;
 13135  0C7E  300E               	movlw	14
 13136  0C7F  009D               	movwf	29	;volatile
 13137  0C80  0008               	return
 13138  0C81                     __end_of_PIN_MANAGER_Initialize:	
 13139                           
 13140                           	psect	text55
 13141  1706                     __ptext55:	
 13142 ;; *************** function _IOCAF4_SetInterruptHandler *****************
 13143 ;; Defined at:
 13144 ;;		line 159 in file "mcc_generated_files/pin_manager.c"
 13145 ;; Parameters:    Size  Location     Type
 13146 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
 13147 ;;		 -> IOCAF4_DefaultInterruptHandler(1), 
 13148 ;; Auto vars:     Size  Location     Type
 13149 ;;		None
 13150 ;; Return value:  Size  Location     Type
 13151 ;;                  1    wreg      void 
 13152 ;; Registers used:
 13153 ;;		wreg
 13154 ;; Tracked objects:
 13155 ;;		On entry : 0/0
 13156 ;;		On exit  : 0/0
 13157 ;;		Unchanged: 0/0
 13158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13159 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13160 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13161 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13162 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13163 ;;Total ram usage:        2 bytes
 13164 ;; Hardware stack levels used:    1
 13165 ;; Hardware stack levels required when called:    5
 13166 ;; This function calls:
 13167 ;;		Nothing
 13168 ;; This function is called by:
 13169 ;;		_PIN_MANAGER_Initialize
 13170 ;; This function uses a non-reentrant model
 13171 ;;
 13172                           
 13173                           
 13174                           ;psect for function _IOCAF4_SetInterruptHandler
 13175  1706                     _IOCAF4_SetInterruptHandler:	
 13176                           
 13177                           ;mcc_generated_files/pin_manager.c: 160:     IOCAF4_InterruptHandler = InterruptHandler;
 13178                           
 13179                           ;incstack = 0
 13180                           ; Regs used in _IOCAF4_SetInterruptHandler: [wreg]
 13181  1706  0020               	movlb	0	; select bank0
 13182  1707  0821               	movf	IOCAF4_SetInterruptHandler@InterruptHandler+1,w
 13183  1708  0021               	movlb	1	; select bank1
 13184  1709  00EB               	movwf	(_IOCAF4_InterruptHandler+1)^(0+128)
 13185  170A  0020               	movlb	0	; select bank0
 13186  170B  0820               	movf	IOCAF4_SetInterruptHandler@InterruptHandler,w
 13187  170C  0021               	movlb	1	; select bank1
 13188  170D  00EA               	movwf	_IOCAF4_InterruptHandler^(0+128)
 13189  170E  0008               	return
 13190  170F                     __end_of_IOCAF4_SetInterruptHandler:	
 13191                           
 13192                           	psect	text56
 13193  16B9                     __ptext56:	
 13194 ;; *************** function _OSCILLATOR_Initialize *****************
 13195 ;; Defined at:
 13196 ;;		line 64 in file "mcc_generated_files/mcc.c"
 13197 ;; Parameters:    Size  Location     Type
 13198 ;;		None
 13199 ;; Auto vars:     Size  Location     Type
 13200 ;;		None
 13201 ;; Return value:  Size  Location     Type
 13202 ;;                  1    wreg      void 
 13203 ;; Registers used:
 13204 ;;		wreg, status,2
 13205 ;; Tracked objects:
 13206 ;;		On entry : 0/0
 13207 ;;		On exit  : 0/0
 13208 ;;		Unchanged: 0/0
 13209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13211 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13212 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13213 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13214 ;;Total ram usage:        0 bytes
 13215 ;; Hardware stack levels used:    1
 13216 ;; Hardware stack levels required when called:    5
 13217 ;; This function calls:
 13218 ;;		Nothing
 13219 ;; This function is called by:
 13220 ;;		_SYSTEM_Initialize
 13221 ;; This function uses a non-reentrant model
 13222 ;;
 13223                           
 13224                           
 13225                           ;psect for function _OSCILLATOR_Initialize
 13226  16B9                     _OSCILLATOR_Initialize:	
 13227                           
 13228                           ;mcc_generated_files/mcc.c: 67:     OSCCON1 = 0x61;
 13229                           
 13230                           ;incstack = 0
 13231                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 13232  16B9  3061               	movlw	97
 13233  16BA  0032               	movlb	18	; select bank18
 13234  16BB  0099               	movwf	25	;volatile
 13235                           
 13236                           ;mcc_generated_files/mcc.c: 69:     OSCCON3 = 0x00;
 13237  16BC  019B               	clrf	27	;volatile
 13238                           
 13239                           ;mcc_generated_files/mcc.c: 71:     OSCEN = 0x00;
 13240  16BD  019D               	clrf	29	;volatile
 13241                           
 13242                           ;mcc_generated_files/mcc.c: 73:     OSCFRQ = 0x00;
 13243  16BE  019F               	clrf	31	;volatile
 13244                           
 13245                           ;mcc_generated_files/mcc.c: 75:     OSCTUNE = 0x00;
 13246  16BF  019E               	clrf	30	;volatile
 13247  16C0  0008               	return
 13248  16C1                     __end_of_OSCILLATOR_Initialize:	
 13249                           
 13250                           	psect	text57
 13251  0BFA                     __ptext57:	
 13252 ;; *************** function _EUSART_Initialize *****************
 13253 ;; Defined at:
 13254 ;;		line 85 in file "mcc_generated_files/eusart.c"
 13255 ;; Parameters:    Size  Location     Type
 13256 ;;		None
 13257 ;; Auto vars:     Size  Location     Type
 13258 ;;		None
 13259 ;; Return value:  Size  Location     Type
 13260 ;;                  1    wreg      void 
 13261 ;; Registers used:
 13262 ;;		wreg, status,2, status,0, pclath, cstack
 13263 ;; Tracked objects:
 13264 ;;		On entry : 0/0
 13265 ;;		On exit  : 0/0
 13266 ;;		Unchanged: 0/0
 13267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13268 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13269 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13270 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13271 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13272 ;;Total ram usage:        1 bytes
 13273 ;; Hardware stack levels used:    1
 13274 ;; Hardware stack levels required when called:    6
 13275 ;; This function calls:
 13276 ;;		_EUSART_SetErrorHandler
 13277 ;;		_EUSART_SetFramingErrorHandler
 13278 ;;		_EUSART_SetOverrunErrorHandler
 13279 ;;		_EUSART_SetRxInterruptHandler
 13280 ;;		_EUSART_SetTxInterruptHandler
 13281 ;; This function is called by:
 13282 ;;		_SYSTEM_Initialize
 13283 ;; This function uses a non-reentrant model
 13284 ;;
 13285                           
 13286                           
 13287                           ;psect for function _EUSART_Initialize
 13288  0BFA                     _EUSART_Initialize:	
 13289                           
 13290                           ;mcc_generated_files/eusart.c: 88:     PIE1bits.RCIE = 0;
 13291                           
 13292                           ;incstack = 0
 13293                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
 13294  0BFA  0021               	movlb	1	; select bank1
 13295  0BFB  1291               	bcf	17,5	;volatile
 13296                           
 13297                           ;mcc_generated_files/eusart.c: 89:     EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
 13298  0BFC  308A               	movlw	low _EUSART_Receive_ISR
 13299  0BFD  0020               	movlb	0	; select bank0
 13300  0BFE  00A0               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
 13301  0BFF  300B               	movlw	high _EUSART_Receive_ISR
 13302  0C00  00A1               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
 13303  0C01  3196  26F4  318B   	fcall	_EUSART_SetRxInterruptHandler
 13304                           
 13305                           ;mcc_generated_files/eusart.c: 90:     PIE1bits.TXIE = 0;
 13306  0C04  0021               	movlb	1	; select bank1
 13307  0C05  1211               	bcf	17,4	;volatile
 13308                           
 13309                           ;mcc_generated_files/eusart.c: 91:     EUSART_SetTxInterruptHandler(EUSART_Transmit_ISR)
      +                          ;
 13310  0C06  30DC               	movlw	low _EUSART_Transmit_ISR
 13311  0C07  0020               	movlb	0	; select bank0
 13312  0C08  00A0               	movwf	EUSART_SetTxInterruptHandler@interruptHandler
 13313  0C09  3008               	movlw	high _EUSART_Transmit_ISR
 13314  0C0A  00A1               	movwf	EUSART_SetTxInterruptHandler@interruptHandler+1
 13315  0C0B  3196  26FD  318B   	fcall	_EUSART_SetTxInterruptHandler
 13316                           
 13317                           ;mcc_generated_files/eusart.c: 95:     BAUD1CON = 0x0A;
 13318  0C0E  300A               	movlw	10
 13319  0C0F  0023               	movlb	3	; select bank3
 13320  0C10  009F               	movwf	31	;volatile
 13321                           
 13322                           ;mcc_generated_files/eusart.c: 98:     RC1STA = 0x80;
 13323  0C11  3080               	movlw	128
 13324  0C12  009D               	movwf	29	;volatile
 13325                           
 13326                           ;mcc_generated_files/eusart.c: 101:     TX1STA = 0x24;
 13327  0C13  3024               	movlw	36
 13328  0C14  009E               	movwf	30	;volatile
 13329                           
 13330                           ;mcc_generated_files/eusart.c: 104:     SP1BRGL = 0x0C;
 13331  0C15  300C               	movlw	12
 13332  0C16  009B               	movwf	27	;volatile
 13333                           
 13334                           ;mcc_generated_files/eusart.c: 107:     SP1BRGH = 0x00;
 13335  0C17  019C               	clrf	28	;volatile
 13336                           
 13337                           ;mcc_generated_files/eusart.c: 110:     EUSART_SetFramingErrorHandler(EUSART_DefaultFram
      +                          ingErrorHandler);
 13338  0C18  30E9               	movlw	low _EUSART_DefaultFramingErrorHandler
 13339  0C19  0020               	movlb	0	; select bank0
 13340  0C1A  00A0               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
 13341  0C1B  3015               	movlw	high _EUSART_DefaultFramingErrorHandler
 13342  0C1C  00A1               	movwf	EUSART_SetFramingErrorHandler@interruptHandler+1
 13343  0C1D  3196  26E2  318B   	fcall	_EUSART_SetFramingErrorHandler
 13344                           
 13345                           ;mcc_generated_files/eusart.c: 111:     EUSART_SetOverrunErrorHandler(EUSART_DefaultOver
      +                          runErrorHandler);
 13346  0C20  3027               	movlw	low _EUSART_DefaultOverrunErrorHandler
 13347  0C21  0020               	movlb	0	; select bank0
 13348  0C22  00A0               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
 13349  0C23  3016               	movlw	high _EUSART_DefaultOverrunErrorHandler
 13350  0C24  00A1               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler+1
 13351  0C25  3196  26EB  318B   	fcall	_EUSART_SetOverrunErrorHandler
 13352                           
 13353                           ;mcc_generated_files/eusart.c: 112:     EUSART_SetErrorHandler(EUSART_DefaultErrorHandle
      +                          r);
 13354  0C28  30F1               	movlw	low _EUSART_DefaultErrorHandler
 13355  0C29  0020               	movlb	0	; select bank0
 13356  0C2A  00A0               	movwf	EUSART_SetErrorHandler@interruptHandler
 13357  0C2B  3015               	movlw	high _EUSART_DefaultErrorHandler
 13358  0C2C  00A1               	movwf	EUSART_SetErrorHandler@interruptHandler+1
 13359  0C2D  3196  26D9         	fcall	_EUSART_SetErrorHandler
 13360                           
 13361                           ;mcc_generated_files/eusart.c: 114:     eusartRxLastError.status = 0;
 13362  0C2F  01F0               	clrf	_eusartRxLastError	;volatile
 13363                           
 13364                           ;mcc_generated_files/eusart.c: 117:     eusartTxHead = 0;
 13365  0C30  01F5               	clrf	_eusartTxHead	;volatile
 13366                           
 13367                           ;mcc_generated_files/eusart.c: 118:     eusartTxTail = 0;
 13368  0C31  01F4               	clrf	_eusartTxTail	;volatile
 13369                           
 13370                           ;mcc_generated_files/eusart.c: 119:     eusartTxBufferRemaining = sizeof(eusartTxBuffer)
      +                          ;
 13371  0C32  3008               	movlw	8
 13372  0C33  0020               	movlb	0	; select bank0
 13373  0C34  00A2               	movwf	??_EUSART_Initialize
 13374  0C35  0822               	movf	??_EUSART_Initialize,w
 13375  0C36  0021               	movlb	1	; select bank1
 13376  0C37  00EC               	movwf	_eusartTxBufferRemaining^(0+128)	;volatile
 13377                           
 13378                           ;mcc_generated_files/eusart.c: 121:     eusartRxHead = 0;
 13379  0C38  01F3               	clrf	_eusartRxHead	;volatile
 13380                           
 13381                           ;mcc_generated_files/eusart.c: 122:     eusartRxTail = 0;
 13382  0C39  01F2               	clrf	_eusartRxTail	;volatile
 13383                           
 13384                           ;mcc_generated_files/eusart.c: 123:     eusartRxCount = 0;
 13385  0C3A  01F1               	clrf	_eusartRxCount	;volatile
 13386                           
 13387                           ;mcc_generated_files/eusart.c: 126:     PIE1bits.RCIE = 1;
 13388  0C3B  1691               	bsf	17,5	;volatile
 13389  0C3C  0008               	return
 13390  0C3D                     __end_of_EUSART_Initialize:	
 13391                           
 13392                           	psect	text58
 13393  16FD                     __ptext58:	
 13394 ;; *************** function _EUSART_SetTxInterruptHandler *****************
 13395 ;; Defined at:
 13396 ;;		line 284 in file "mcc_generated_files/eusart.c"
 13397 ;; Parameters:    Size  Location     Type
 13398 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
 13399 ;;		 -> EUSART_Transmit_ISR(1), 
 13400 ;; Auto vars:     Size  Location     Type
 13401 ;;		None
 13402 ;; Return value:  Size  Location     Type
 13403 ;;                  1    wreg      void 
 13404 ;; Registers used:
 13405 ;;		wreg
 13406 ;; Tracked objects:
 13407 ;;		On entry : 0/0
 13408 ;;		On exit  : 0/0
 13409 ;;		Unchanged: 0/0
 13410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13411 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13412 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13413 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13414 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13415 ;;Total ram usage:        2 bytes
 13416 ;; Hardware stack levels used:    1
 13417 ;; Hardware stack levels required when called:    5
 13418 ;; This function calls:
 13419 ;;		Nothing
 13420 ;; This function is called by:
 13421 ;;		_EUSART_Initialize
 13422 ;; This function uses a non-reentrant model
 13423 ;;
 13424                           
 13425                           
 13426                           ;psect for function _EUSART_SetTxInterruptHandler
 13427  16FD                     _EUSART_SetTxInterruptHandler:	
 13428                           
 13429                           ;mcc_generated_files/eusart.c: 285:     EUSART_TxDefaultInterruptHandler = interruptHand
      +                          ler;
 13430                           
 13431                           ;incstack = 0
 13432                           ; Regs used in _EUSART_SetTxInterruptHandler: [wreg]
 13433  16FD  0020               	movlb	0	; select bank0
 13434  16FE  0821               	movf	EUSART_SetTxInterruptHandler@interruptHandler+1,w
 13435  16FF  0022               	movlb	2	; select bank2
 13436  1700  00ED               	movwf	(_EUSART_TxDefaultInterruptHandler+1)^(0+256)
 13437  1701  0020               	movlb	0	; select bank0
 13438  1702  0820               	movf	EUSART_SetTxInterruptHandler@interruptHandler,w
 13439  1703  0022               	movlb	2	; select bank2
 13440  1704  00EC               	movwf	_EUSART_TxDefaultInterruptHandler^(0+256)
 13441  1705  0008               	return
 13442  1706                     __end_of_EUSART_SetTxInterruptHandler:	
 13443                           
 13444                           	psect	text59
 13445  16F4                     __ptext59:	
 13446 ;; *************** function _EUSART_SetRxInterruptHandler *****************
 13447 ;; Defined at:
 13448 ;;		line 288 in file "mcc_generated_files/eusart.c"
 13449 ;; Parameters:    Size  Location     Type
 13450 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
 13451 ;;		 -> EUSART_Receive_ISR(1), 
 13452 ;; Auto vars:     Size  Location     Type
 13453 ;;		None
 13454 ;; Return value:  Size  Location     Type
 13455 ;;                  1    wreg      void 
 13456 ;; Registers used:
 13457 ;;		wreg
 13458 ;; Tracked objects:
 13459 ;;		On entry : 0/0
 13460 ;;		On exit  : 0/0
 13461 ;;		Unchanged: 0/0
 13462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13463 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13464 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13466 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13467 ;;Total ram usage:        2 bytes
 13468 ;; Hardware stack levels used:    1
 13469 ;; Hardware stack levels required when called:    5
 13470 ;; This function calls:
 13471 ;;		Nothing
 13472 ;; This function is called by:
 13473 ;;		_EUSART_Initialize
 13474 ;; This function uses a non-reentrant model
 13475 ;;
 13476                           
 13477                           
 13478                           ;psect for function _EUSART_SetRxInterruptHandler
 13479  16F4                     _EUSART_SetRxInterruptHandler:	
 13480                           
 13481                           ;mcc_generated_files/eusart.c: 289:     EUSART_RxDefaultInterruptHandler = interruptHand
      +                          ler;
 13482                           
 13483                           ;incstack = 0
 13484                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
 13485  16F4  0020               	movlb	0	; select bank0
 13486  16F5  0821               	movf	EUSART_SetRxInterruptHandler@interruptHandler+1,w
 13487  16F6  0022               	movlb	2	; select bank2
 13488  16F7  00EB               	movwf	(_EUSART_RxDefaultInterruptHandler+1)^(0+256)
 13489  16F8  0020               	movlb	0	; select bank0
 13490  16F9  0820               	movf	EUSART_SetRxInterruptHandler@interruptHandler,w
 13491  16FA  0022               	movlb	2	; select bank2
 13492  16FB  00EA               	movwf	_EUSART_RxDefaultInterruptHandler^(0+256)
 13493  16FC  0008               	return
 13494  16FD                     __end_of_EUSART_SetRxInterruptHandler:	
 13495                           
 13496                           	psect	text60
 13497  16EB                     __ptext60:	
 13498 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
 13499 ;; Defined at:
 13500 ;;		line 276 in file "mcc_generated_files/eusart.c"
 13501 ;; Parameters:    Size  Location     Type
 13502 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
 13503 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
 13504 ;; Auto vars:     Size  Location     Type
 13505 ;;		None
 13506 ;; Return value:  Size  Location     Type
 13507 ;;                  1    wreg      void 
 13508 ;; Registers used:
 13509 ;;		wreg
 13510 ;; Tracked objects:
 13511 ;;		On entry : 0/0
 13512 ;;		On exit  : 0/0
 13513 ;;		Unchanged: 0/0
 13514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13515 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13516 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13518 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13519 ;;Total ram usage:        2 bytes
 13520 ;; Hardware stack levels used:    1
 13521 ;; Hardware stack levels required when called:    5
 13522 ;; This function calls:
 13523 ;;		Nothing
 13524 ;; This function is called by:
 13525 ;;		_EUSART_Initialize
 13526 ;; This function uses a non-reentrant model
 13527 ;;
 13528                           
 13529                           
 13530                           ;psect for function _EUSART_SetOverrunErrorHandler
 13531  16EB                     _EUSART_SetOverrunErrorHandler:	
 13532                           
 13533                           ;mcc_generated_files/eusart.c: 277:     EUSART_OverrunErrorHandler = interruptHandler;
 13534                           
 13535                           ;incstack = 0
 13536                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
 13537  16EB  0020               	movlb	0	; select bank0
 13538  16EC  0821               	movf	EUSART_SetOverrunErrorHandler@interruptHandler+1,w
 13539  16ED  0023               	movlb	3	; select bank3
 13540  16EE  00DD               	movwf	(_EUSART_OverrunErrorHandler+1)^(0+384)
 13541  16EF  0020               	movlb	0	; select bank0
 13542  16F0  0820               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
 13543  16F1  0023               	movlb	3	; select bank3
 13544  16F2  00DC               	movwf	_EUSART_OverrunErrorHandler^(0+384)
 13545  16F3  0008               	return
 13546  16F4                     __end_of_EUSART_SetOverrunErrorHandler:	
 13547                           
 13548                           	psect	text61
 13549  16E2                     __ptext61:	
 13550 ;; *************** function _EUSART_SetFramingErrorHandler *****************
 13551 ;; Defined at:
 13552 ;;		line 272 in file "mcc_generated_files/eusart.c"
 13553 ;; Parameters:    Size  Location     Type
 13554 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
 13555 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
 13556 ;; Auto vars:     Size  Location     Type
 13557 ;;		None
 13558 ;; Return value:  Size  Location     Type
 13559 ;;                  1    wreg      void 
 13560 ;; Registers used:
 13561 ;;		wreg
 13562 ;; Tracked objects:
 13563 ;;		On entry : 0/0
 13564 ;;		On exit  : 0/0
 13565 ;;		Unchanged: 0/0
 13566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13567 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13568 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13569 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13570 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13571 ;;Total ram usage:        2 bytes
 13572 ;; Hardware stack levels used:    1
 13573 ;; Hardware stack levels required when called:    5
 13574 ;; This function calls:
 13575 ;;		Nothing
 13576 ;; This function is called by:
 13577 ;;		_EUSART_Initialize
 13578 ;; This function uses a non-reentrant model
 13579 ;;
 13580                           
 13581                           
 13582                           ;psect for function _EUSART_SetFramingErrorHandler
 13583  16E2                     _EUSART_SetFramingErrorHandler:	
 13584                           
 13585                           ;mcc_generated_files/eusart.c: 273:     EUSART_FramingErrorHandler = interruptHandler;
 13586                           
 13587                           ;incstack = 0
 13588                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
 13589  16E2  0020               	movlb	0	; select bank0
 13590  16E3  0821               	movf	EUSART_SetFramingErrorHandler@interruptHandler+1,w
 13591  16E4  0023               	movlb	3	; select bank3
 13592  16E5  00DF               	movwf	(_EUSART_FramingErrorHandler+1)^(0+384)
 13593  16E6  0020               	movlb	0	; select bank0
 13594  16E7  0820               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
 13595  16E8  0023               	movlb	3	; select bank3
 13596  16E9  00DE               	movwf	_EUSART_FramingErrorHandler^(0+384)
 13597  16EA  0008               	return
 13598  16EB                     __end_of_EUSART_SetFramingErrorHandler:	
 13599                           
 13600                           	psect	text62
 13601  16D9                     __ptext62:	
 13602 ;; *************** function _EUSART_SetErrorHandler *****************
 13603 ;; Defined at:
 13604 ;;		line 280 in file "mcc_generated_files/eusart.c"
 13605 ;; Parameters:    Size  Location     Type
 13606 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
 13607 ;;		 -> EUSART_DefaultErrorHandler(1), 
 13608 ;; Auto vars:     Size  Location     Type
 13609 ;;		None
 13610 ;; Return value:  Size  Location     Type
 13611 ;;                  1    wreg      void 
 13612 ;; Registers used:
 13613 ;;		wreg
 13614 ;; Tracked objects:
 13615 ;;		On entry : 0/0
 13616 ;;		On exit  : 0/0
 13617 ;;		Unchanged: 0/0
 13618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13619 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13620 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13621 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13622 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13623 ;;Total ram usage:        2 bytes
 13624 ;; Hardware stack levels used:    1
 13625 ;; Hardware stack levels required when called:    5
 13626 ;; This function calls:
 13627 ;;		Nothing
 13628 ;; This function is called by:
 13629 ;;		_EUSART_Initialize
 13630 ;; This function uses a non-reentrant model
 13631 ;;
 13632                           
 13633                           
 13634                           ;psect for function _EUSART_SetErrorHandler
 13635  16D9                     _EUSART_SetErrorHandler:	
 13636                           
 13637                           ;mcc_generated_files/eusart.c: 281:     EUSART_ErrorHandler = interruptHandler;
 13638                           
 13639                           ;incstack = 0
 13640                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
 13641  16D9  0020               	movlb	0	; select bank0
 13642  16DA  0821               	movf	EUSART_SetErrorHandler@interruptHandler+1,w
 13643  16DB  0023               	movlb	3	; select bank3
 13644  16DC  00DB               	movwf	(_EUSART_ErrorHandler+1)^(0+384)
 13645  16DD  0020               	movlb	0	; select bank0
 13646  16DE  0820               	movf	EUSART_SetErrorHandler@interruptHandler,w
 13647  16DF  0023               	movlb	3	; select bank3
 13648  16E0  00DA               	movwf	_EUSART_ErrorHandler^(0+384)
 13649  16E1  0008               	return
 13650  16E2                     __end_of_EUSART_SetErrorHandler:	
 13651                           
 13652                           	psect	text63
 13653  16B1                     __ptext63:	
 13654 ;; *************** function _ADC_Initialize *****************
 13655 ;; Defined at:
 13656 ;;		line 65 in file "mcc_generated_files/adc.c"
 13657 ;; Parameters:    Size  Location     Type
 13658 ;;		None
 13659 ;; Auto vars:     Size  Location     Type
 13660 ;;		None
 13661 ;; Return value:  Size  Location     Type
 13662 ;;                  1    wreg      void 
 13663 ;; Registers used:
 13664 ;;		wreg, status,2
 13665 ;; Tracked objects:
 13666 ;;		On entry : 0/0
 13667 ;;		On exit  : 0/0
 13668 ;;		Unchanged: 0/0
 13669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13670 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13671 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13672 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13673 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13674 ;;Total ram usage:        0 bytes
 13675 ;; Hardware stack levels used:    1
 13676 ;; Hardware stack levels required when called:    5
 13677 ;; This function calls:
 13678 ;;		Nothing
 13679 ;; This function is called by:
 13680 ;;		_SYSTEM_Initialize
 13681 ;; This function uses a non-reentrant model
 13682 ;;
 13683                           
 13684                           
 13685                           ;psect for function _ADC_Initialize
 13686  16B1                     _ADC_Initialize:	
 13687                           
 13688                           ;mcc_generated_files/adc.c: 70:     ADCON0 = 0x01;
 13689                           
 13690                           ;incstack = 0
 13691                           ; Regs used in _ADC_Initialize: [wreg+status,2]
 13692  16B1  3001               	movlw	1
 13693  16B2  0021               	movlb	1	; select bank1
 13694  16B3  009D               	movwf	29	;volatile
 13695                           
 13696                           ;mcc_generated_files/adc.c: 73:     ADCON1 = 0x00;
 13697  16B4  019E               	clrf	30	;volatile
 13698                           
 13699                           ;mcc_generated_files/adc.c: 76:     ADACT = 0x00;
 13700  16B5  019F               	clrf	31	;volatile
 13701                           
 13702                           ;mcc_generated_files/adc.c: 79:     ADRESL = 0x00;
 13703  16B6  019B               	clrf	27	;volatile
 13704                           
 13705                           ;mcc_generated_files/adc.c: 82:     ADRESH = 0x00;
 13706  16B7  019C               	clrf	28	;volatile
 13707  16B8  0008               	return
 13708  16B9                     __end_of_ADC_Initialize:	
 13709                           
 13710                           	psect	text64
 13711  1766                     __ptext64:	
 13712 ;; *************** function _PIR_Sensor *****************
 13713 ;; Defined at:
 13714 ;;		line 334 in file "main.c"
 13715 ;; Parameters:    Size  Location     Type
 13716 ;;		None
 13717 ;; Auto vars:     Size  Location     Type
 13718 ;;		None
 13719 ;; Return value:  Size  Location     Type
 13720 ;;                  1    wreg      _Bool 
 13721 ;; Registers used:
 13722 ;;		wreg, status,2
 13723 ;; Tracked objects:
 13724 ;;		On entry : 0/0
 13725 ;;		On exit  : 0/0
 13726 ;;		Unchanged: 0/0
 13727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13728 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13729 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13730 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13731 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13732 ;;Total ram usage:        0 bytes
 13733 ;; Hardware stack levels used:    1
 13734 ;; Hardware stack levels required when called:    5
 13735 ;; This function calls:
 13736 ;;		Nothing
 13737 ;; This function is called by:
 13738 ;;		_main
 13739 ;; This function uses a non-reentrant model
 13740 ;;
 13741                           
 13742                           
 13743                           ;psect for function _PIR_Sensor
 13744  1766                     _PIR_Sensor:	
 13745                           
 13746                           ;main.c: 336:     if(PORTCbits.RC3 >= 1){
 13747                           
 13748                           ;incstack = 0
 13749                           ; Regs used in _PIR_Sensor: [wreg+status,2]
 13750  1766  0020               	movlb	0	; select bank0
 13751  1767  1D8E               	btfss	14,3	;volatile
 13752  1768  2F70               	goto	l7374
 13753                           
 13754                           ;main.c: 337:         prox = 1;
 13755  1769  3001               	movlw	1
 13756  176A  0021               	movlb	1	; select bank1
 13757  176B  00E0               	movwf	_prox^(0+128)
 13758  176C  3000               	movlw	0
 13759  176D  00E1               	movwf	(_prox^(0+128)+1)
 13760                           
 13761                           ;main.c: 338:         return 1;
 13762  176E  3001               	movlw	1
 13763  176F  0008               	return
 13764  1770                     l7374:	
 13765                           
 13766                           ;main.c: 341:         prox = 0;
 13767  1770  0021               	movlb	1	; select bank1
 13768  1771  01E0               	clrf	_prox^(0+128)
 13769  1772  01E1               	clrf	(_prox+1)^(0+128)
 13770                           
 13771                           ;main.c: 342:         return 0;
 13772  1773  3000               	movlw	0
 13773  1774  0008               	return
 13774  1775                     __end_of_PIR_Sensor:	
 13775                           
 13776                           	psect	text65
 13777  0CC7                     __ptext65:	
 13778 ;; *************** function _On_Off *****************
 13779 ;; Defined at:
 13780 ;;		line 312 in file "main.c"
 13781 ;; Parameters:    Size  Location     Type
 13782 ;;		None
 13783 ;; Auto vars:     Size  Location     Type
 13784 ;;  val             2    7[BANK0 ] int 
 13785 ;; Return value:  Size  Location     Type
 13786 ;;                  1    wreg      _Bool 
 13787 ;; Registers used:
 13788 ;;		wreg, status,2, status,0, pclath, cstack
 13789 ;; Tracked objects:
 13790 ;;		On entry : 0/0
 13791 ;;		On exit  : 0/0
 13792 ;;		Unchanged: 0/0
 13793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13795 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13796 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13797 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13798 ;;Total ram usage:        5 bytes
 13799 ;; Hardware stack levels used:    1
 13800 ;; Hardware stack levels required when called:    7
 13801 ;; This function calls:
 13802 ;;		_ADC_GetConversion
 13803 ;;		_Noise
 13804 ;; This function is called by:
 13805 ;;		_main
 13806 ;; This function uses a non-reentrant model
 13807 ;;
 13808                           
 13809                           
 13810                           ;psect for function _On_Off
 13811  0CC7                     _On_Off:	
 13812                           
 13813                           ;main.c: 313:     adcResult = ADC_GetConversion(BTN) >> 6;
 13814                           
 13815                           ;incstack = 0
 13816                           ; Regs used in _On_Off: [wreg+status,2+status,0+pclath+cstack]
 13817  0CC7  3017               	movlw	23
 13818  0CC8  3188  20F9  318C   	fcall	_ADC_GetConversion
 13819  0CCB  0020               	movlb	0	; select bank0
 13820  0CCC  0820               	movf	?_ADC_GetConversion,w
 13821  0CCD  00A4               	movwf	??_On_Off
 13822  0CCE  0821               	movf	?_ADC_GetConversion+1,w
 13823  0CCF  00A5               	movwf	??_On_Off+1
 13824  0CD0  3006               	movlw	6
 13825  0CD1                     u6695:	
 13826  0CD1  36A5               	lsrf	??_On_Off+1,f
 13827  0CD2  0CA4               	rrf	??_On_Off,f
 13828  0CD3  0B89               	decfsz	9,f
 13829  0CD4  2CD1               	goto	u6695
 13830  0CD5  0824               	movf	??_On_Off,w
 13831  0CD6  00A6               	movwf	??_On_Off+2
 13832  0CD7  0826               	movf	??_On_Off+2,w
 13833  0CD8  00E8               	movwf	_adcResult
 13834                           
 13835                           ;main.c: 314:     int val = adcResult;
 13836  0CD9  0868               	movf	_adcResult,w
 13837  0CDA  00A4               	movwf	??_On_Off
 13838  0CDB  01A5               	clrf	??_On_Off+1
 13839  0CDC  0824               	movf	??_On_Off,w
 13840  0CDD  00A7               	movwf	On_Off@val
 13841  0CDE  0825               	movf	??_On_Off+1,w
 13842  0CDF  00A8               	movwf	On_Off@val+1
 13843                           
 13844                           ;main.c: 315:     if(val >= 240 && val <= 254) {
 13845  0CE0  0828               	movf	On_Off@val+1,w
 13846  0CE1  3A80               	xorlw	128
 13847  0CE2  00A4               	movwf	??_On_Off
 13848  0CE3  3080               	movlw	128
 13849  0CE4  0224               	subwf	??_On_Off,w
 13850  0CE5  1D03               	skipz
 13851  0CE6  2CE9               	goto	u6705
 13852  0CE7  30F0               	movlw	240
 13853  0CE8  0227               	subwf	On_Off@val,w
 13854  0CE9                     u6705:	
 13855  0CE9  1C03               	skipc
 13856  0CEA  0008               	return
 13857  0CEB  0020               	movlb	0	; select bank0
 13858  0CEC  0828               	movf	On_Off@val+1,w
 13859  0CED  3A80               	xorlw	128
 13860  0CEE  00A4               	movwf	??_On_Off
 13861  0CEF  3080               	movlw	128
 13862  0CF0  0224               	subwf	??_On_Off,w
 13863  0CF1  1D03               	skipz
 13864  0CF2  2CF5               	goto	u6715
 13865  0CF3  30FF               	movlw	255
 13866  0CF4  0227               	subwf	On_Off@val,w
 13867  0CF5                     u6715:	
 13868  0CF5  1803               	skipnc
 13869  0CF6  0008               	return
 13870                           
 13871                           ;main.c: 316:         Noise();
 13872  0CF7  3188  2028  318C   	fcall	_Noise
 13873                           
 13874                           ;main.c: 317:         if(on == 0) {
 13875  0CFA  0020               	movlb	0	; select bank0
 13876  0CFB  086A               	movf	_on,w
 13877  0CFC  046B               	iorwf	_on+1,w
 13878  0CFD  1D03               	btfss	3,2
 13879  0CFE  2D08               	goto	l7534
 13880                           
 13881                           ;main.c: 318:             on = 1;
 13882  0CFF  3001               	movlw	1
 13883  0D00  00EA               	movwf	_on
 13884  0D01  3000               	movlw	0
 13885  0D02  00EB               	movwf	_on+1
 13886                           
 13887                           ;main.c: 319:             brightLCD = 8;
 13888  0D03  3008               	movlw	8
 13889  0D04  00A4               	movwf	??_On_Off
 13890  0D05  0824               	movf	??_On_Off,w
 13891  0D06  00EF               	movwf	_brightLCD
 13892  0D07  0008               	return
 13893  0D08                     l7534:	
 13894                           
 13895                           ;main.c: 323:             on = 0;
 13896  0D08  01EA               	clrf	_on
 13897  0D09  01EB               	clrf	_on+1
 13898                           
 13899                           ;main.c: 324:             brightLCD = 1;
 13900  0D0A  01EF               	clrf	_brightLCD
 13901  0D0B  0AEF               	incf	_brightLCD,f
 13902                           
 13903                           ;main.c: 325:             start = 1;
 13904  0D0C  01EE               	clrf	_start
 13905  0D0D  0AEE               	incf	_start,f
 13906                           
 13907                           ;main.c: 326:             name = 0;
 13908  0D0E  01DA               	clrf	_name
 13909  0D0F  01DB               	clrf	_name+1
 13910  0D10  0008               	return
 13911  0D11                     __end_of_On_Off:	
 13912                           
 13913                           	psect	text66
 13914  0614                     __ptext66:	
 13915 ;; *************** function _Get_ADC *****************
 13916 ;; Defined at:
 13917 ;;		line 249 in file "main.c"
 13918 ;; Parameters:    Size  Location     Type
 13919 ;;		None
 13920 ;; Auto vars:     Size  Location     Type
 13921 ;;  val             2   15[BANK0 ] int 
 13922 ;; Return value:  Size  Location     Type
 13923 ;;                  1    wreg      void 
 13924 ;; Registers used:
 13925 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13926 ;; Tracked objects:
 13927 ;;		On entry : 0/0
 13928 ;;		On exit  : 0/0
 13929 ;;		Unchanged: 0/0
 13930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13931 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13932 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13933 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13934 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13935 ;;Total ram usage:        5 bytes
 13936 ;; Hardware stack levels used:    1
 13937 ;; Hardware stack levels required when called:    8
 13938 ;; This function calls:
 13939 ;;		_ADC_GetConversion
 13940 ;;		_Display_Name
 13941 ;;		_Noise
 13942 ;; This function is called by:
 13943 ;;		_main
 13944 ;; This function uses a non-reentrant model
 13945 ;;
 13946                           
 13947                           
 13948                           ;psect for function _Get_ADC
 13949  0614                     _Get_ADC:	
 13950                           
 13951                           ;main.c: 250:     adcResult = ADC_GetConversion(BTN) >> 6;
 13952                           
 13953                           ;incstack = 0
 13954                           ; Regs used in _Get_ADC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13955  0614  3017               	movlw	23
 13956  0615  3188  20F9  3186   	fcall	_ADC_GetConversion
 13957  0618  0020               	movlb	0	; select bank0
 13958  0619  0820               	movf	?_ADC_GetConversion,w
 13959  061A  00AC               	movwf	??_Get_ADC
 13960  061B  0821               	movf	?_ADC_GetConversion+1,w
 13961  061C  00AD               	movwf	??_Get_ADC+1
 13962  061D  3006               	movlw	6
 13963  061E                     u6765:	
 13964  061E  36AD               	lsrf	??_Get_ADC+1,f
 13965  061F  0CAC               	rrf	??_Get_ADC,f
 13966  0620  0B89               	decfsz	9,f
 13967  0621  2E1E               	goto	u6765
 13968  0622  082C               	movf	??_Get_ADC,w
 13969  0623  00AE               	movwf	??_Get_ADC+2
 13970  0624  082E               	movf	??_Get_ADC+2,w
 13971  0625  00E8               	movwf	_adcResult
 13972                           
 13973                           ;main.c: 251:     int val = adcResult;
 13974  0626  0868               	movf	_adcResult,w
 13975  0627  00AC               	movwf	??_Get_ADC
 13976  0628  01AD               	clrf	??_Get_ADC+1
 13977  0629  082C               	movf	??_Get_ADC,w
 13978  062A  00AF               	movwf	Get_ADC@val
 13979  062B  082D               	movf	??_Get_ADC+1,w
 13980  062C  00B0               	movwf	Get_ADC@val+1
 13981                           
 13982                           ;main.c: 262:     if(val >= 230 && val <= 239) {
 13983  062D  0830               	movf	Get_ADC@val+1,w
 13984  062E  3A80               	xorlw	128
 13985  062F  00AC               	movwf	??_Get_ADC
 13986  0630  3080               	movlw	128
 13987  0631  022C               	subwf	??_Get_ADC,w
 13988  0632  1D03               	skipz
 13989  0633  2E36               	goto	u6775
 13990  0634  30E6               	movlw	230
 13991  0635  022F               	subwf	Get_ADC@val,w
 13992  0636                     u6775:	
 13993  0636  1C03               	skipc
 13994  0637  2E56               	goto	l7592
 13995  0638  0020               	movlb	0	; select bank0
 13996  0639  0830               	movf	Get_ADC@val+1,w
 13997  063A  3A80               	xorlw	128
 13998  063B  00AC               	movwf	??_Get_ADC
 13999  063C  3080               	movlw	128
 14000  063D  022C               	subwf	??_Get_ADC,w
 14001  063E  1D03               	skipz
 14002  063F  2E42               	goto	u6785
 14003  0640  30F0               	movlw	240
 14004  0641  022F               	subwf	Get_ADC@val,w
 14005  0642                     u6785:	
 14006  0642  1803               	skipnc
 14007  0643  2E56               	goto	l7592
 14008                           
 14009                           ;main.c: 263:         Noise();
 14010  0644  3188  2028  3186   	fcall	_Noise
 14011                           
 14012                           ;main.c: 264:         if(toggle == 0) {
 14013  0647  0022               	movlb	2	; select bank2
 14014  0648  086E               	movf	_toggle^(0+256),w
 14015  0649  046F               	iorwf	(_toggle+1)^(0+256),w
 14016  064A  1D03               	btfss	3,2
 14017  064B  2E52               	goto	l7588
 14018                           
 14019                           ;main.c: 265:             toggle = 1;
 14020  064C  3001               	movlw	1
 14021  064D  00EE               	movwf	_toggle^(0+256)
 14022  064E  3000               	movlw	0
 14023  064F  00EF               	movwf	(_toggle^(0+256)+1)
 14024  0650  150C               	bsf	12,2	;volatile
 14025  0651  2F16               	goto	l7648
 14026  0652                     l7588:	
 14027                           
 14028                           ;main.c: 269:             toggle = 0;
 14029  0652  01EE               	clrf	_toggle^(0+256)
 14030  0653  01EF               	clrf	(_toggle+1)^(0+256)
 14031  0654  110C               	bcf	12,2	;volatile
 14032  0655  2F16               	goto	l7648
 14033  0656                     l7592:	
 14034  0656  0020               	movlb	0	; select bank0
 14035  0657  0830               	movf	Get_ADC@val+1,w
 14036  0658  3A80               	xorlw	128
 14037  0659  00AC               	movwf	??_Get_ADC
 14038  065A  3080               	movlw	128
 14039  065B  022C               	subwf	??_Get_ADC,w
 14040  065C  1D03               	skipz
 14041  065D  2E60               	goto	u6805
 14042  065E  30C8               	movlw	200
 14043  065F  022F               	subwf	Get_ADC@val,w
 14044  0660                     u6805:	
 14045  0660  1C03               	skipc
 14046  0661  2E7B               	goto	l7604
 14047  0662  0020               	movlb	0	; select bank0
 14048  0663  0830               	movf	Get_ADC@val+1,w
 14049  0664  3A80               	xorlw	128
 14050  0665  00AC               	movwf	??_Get_ADC
 14051  0666  3080               	movlw	128
 14052  0667  022C               	subwf	??_Get_ADC,w
 14053  0668  1D03               	skipz
 14054  0669  2E6C               	goto	u6815
 14055  066A  30D3               	movlw	211
 14056  066B  022F               	subwf	Get_ADC@val,w
 14057  066C                     u6815:	
 14058  066C  1803               	skipnc
 14059  066D  2E7B               	goto	l7604
 14060                           
 14061                           ;main.c: 274:         Noise();
 14062  066E  3188  2028  3186   	fcall	_Noise
 14063                           
 14064                           ;main.c: 275:         brightness--;
 14065  0671  30FF               	movlw	255
 14066  0672  0020               	movlb	0	; select bank0
 14067  0673  07EC               	addwf	_brightness,f
 14068  0674  30FF               	movlw	255
 14069  0675  3DED               	addwfc	_brightness+1,f
 14070                           
 14071                           ;main.c: 276:         if(brightness < 0) {
 14072  0676  1FED               	btfss	_brightness+1,7
 14073  0677  2F16               	goto	l7648
 14074                           
 14075                           ;main.c: 277:            brightness = 0;
 14076  0678  01EC               	clrf	_brightness
 14077  0679  01ED               	clrf	_brightness+1
 14078  067A  2F16               	goto	l7648
 14079  067B                     l7604:	
 14080  067B  0020               	movlb	0	; select bank0
 14081  067C  0830               	movf	Get_ADC@val+1,w
 14082  067D  3A80               	xorlw	128
 14083  067E  00AC               	movwf	??_Get_ADC
 14084  067F  3080               	movlw	128
 14085  0680  022C               	subwf	??_Get_ADC,w
 14086  0681  1D03               	skipz
 14087  0682  2E85               	goto	u6835
 14088  0683  30B4               	movlw	180
 14089  0684  022F               	subwf	Get_ADC@val,w
 14090  0685                     u6835:	
 14091  0685  1C03               	skipc
 14092  0686  2EAB               	goto	l7620
 14093  0687  0020               	movlb	0	; select bank0
 14094  0688  0830               	movf	Get_ADC@val+1,w
 14095  0689  3A80               	xorlw	128
 14096  068A  00AC               	movwf	??_Get_ADC
 14097  068B  3080               	movlw	128
 14098  068C  022C               	subwf	??_Get_ADC,w
 14099  068D  1D03               	skipz
 14100  068E  2E91               	goto	u6845
 14101  068F  30BF               	movlw	191
 14102  0690  022F               	subwf	Get_ADC@val,w
 14103  0691                     u6845:	
 14104  0691  1803               	skipnc
 14105  0692  2EAB               	goto	l7620
 14106                           
 14107                           ;main.c: 283:         Noise();
 14108  0693  3188  2028  3186   	fcall	_Noise
 14109                           
 14110                           ;main.c: 284:         printed = 0;
 14111  0696  0020               	movlb	0	; select bank0
 14112  0697  01E9               	clrf	_printed
 14113                           
 14114                           ;main.c: 285:         --name;
 14115  0698  30FF               	movlw	255
 14116  0699  07DA               	addwf	_name,f
 14117  069A  30FF               	movlw	255
 14118  069B  3DDB               	addwfc	_name+1,f
 14119                           
 14120                           ;main.c: 286:         if(name < 0) {
 14121  069C  1FDB               	btfss	_name+1,7
 14122  069D  2EA2               	goto	l7618
 14123                           
 14124                           ;main.c: 287:             name = 3;
 14125  069E  3003               	movlw	3
 14126  069F  00DA               	movwf	_name
 14127  06A0  3000               	movlw	0
 14128  06A1  00DB               	movwf	_name+1
 14129  06A2                     l7618:	
 14130                           
 14131                           ;main.c: 289:         Display_Name(names[name]);
 14132  06A2  355A               	lslf	_name,w
 14133  06A3  3ED2               	addlw	(low (_names| (0+256)))& (0+255)
 14134  06A4  0086               	movwf	6
 14135  06A5  3001               	movlw	1	; select bank3/4
 14136  06A6  0087               	movwf	7
 14137  06A7  3F40               	moviw [0]fsr1
 14138  06A8  00A5               	movwf	Display_Name@string1
 14139  06A9  3F41               	moviw [1]fsr1
 14140  06AA  2F13               	goto	L9
 14141  06AB                     l7620:	
 14142                           ;main.c: 290:     }
 14143                           
 14144  06AB  0020               	movlb	0	; select bank0
 14145  06AC  0830               	movf	Get_ADC@val+1,w
 14146  06AD  3A80               	xorlw	128
 14147  06AE  00AC               	movwf	??_Get_ADC
 14148  06AF  3080               	movlw	128
 14149  06B0  022C               	subwf	??_Get_ADC,w
 14150  06B1  1D03               	skipz
 14151  06B2  2EB5               	goto	u6865
 14152  06B3  3096               	movlw	150
 14153  06B4  022F               	subwf	Get_ADC@val,w
 14154  06B5                     u6865:	
 14155  06B5  1C03               	skipc
 14156  06B6  2EDB               	goto	l7632
 14157  06B7  0020               	movlb	0	; select bank0
 14158  06B8  0830               	movf	Get_ADC@val+1,w
 14159  06B9  3A80               	xorlw	128
 14160  06BA  00AC               	movwf	??_Get_ADC
 14161  06BB  3080               	movlw	128
 14162  06BC  022C               	subwf	??_Get_ADC,w
 14163  06BD  1D03               	skipz
 14164  06BE  2EC1               	goto	u6875
 14165  06BF  30A1               	movlw	161
 14166  06C0  022F               	subwf	Get_ADC@val,w
 14167  06C1                     u6875:	
 14168  06C1  1803               	skipnc
 14169  06C2  2EDB               	goto	l7632
 14170                           
 14171                           ;main.c: 292:         Noise();
 14172  06C3  3188  2028  3186   	fcall	_Noise
 14173                           
 14174                           ;main.c: 293:         ++brightness;
 14175  06C6  3001               	movlw	1
 14176  06C7  0020               	movlb	0	; select bank0
 14177  06C8  07EC               	addwf	_brightness,f
 14178  06C9  3000               	movlw	0
 14179  06CA  3DED               	addwfc	_brightness+1,f
 14180                           
 14181                           ;main.c: 294:         if(brightness > 7) {
 14182  06CB  086D               	movf	_brightness+1,w
 14183  06CC  3A80               	xorlw	128
 14184  06CD  00AC               	movwf	??_Get_ADC
 14185  06CE  3080               	movlw	128
 14186  06CF  022C               	subwf	??_Get_ADC,w
 14187  06D0  3008               	movlw	8
 14188  06D1  1903               	btfsc	3,2
 14189  06D2  026C               	subwf	_brightness,w
 14190  06D3  1C03               	skipc
 14191  06D4  2F16               	goto	l7648
 14192                           
 14193                           ;main.c: 295:             brightness = 7;
 14194  06D5  3007               	movlw	7
 14195  06D6  0020               	movlb	0	; select bank0
 14196  06D7  00EC               	movwf	_brightness
 14197  06D8  3000               	movlw	0
 14198  06D9  00ED               	movwf	_brightness+1
 14199  06DA  2F16               	goto	l7648
 14200  06DB                     l7632:	
 14201  06DB  0020               	movlb	0	; select bank0
 14202  06DC  0830               	movf	Get_ADC@val+1,w
 14203  06DD  3A80               	xorlw	128
 14204  06DE  00AC               	movwf	??_Get_ADC
 14205  06DF  3080               	movlw	128
 14206  06E0  022C               	subwf	??_Get_ADC,w
 14207  06E1  1D03               	skipz
 14208  06E2  2EE5               	goto	u6895
 14209  06E3  3078               	movlw	120
 14210  06E4  022F               	subwf	Get_ADC@val,w
 14211  06E5                     u6895:	
 14212  06E5  1C03               	skipc
 14213  06E6  2F16               	goto	l7648
 14214  06E7  0020               	movlb	0	; select bank0
 14215  06E8  0830               	movf	Get_ADC@val+1,w
 14216  06E9  3A80               	xorlw	128
 14217  06EA  00AC               	movwf	??_Get_ADC
 14218  06EB  3080               	movlw	128
 14219  06EC  022C               	subwf	??_Get_ADC,w
 14220  06ED  1D03               	skipz
 14221  06EE  2EF1               	goto	u6905
 14222  06EF  3083               	movlw	131
 14223  06F0  022F               	subwf	Get_ADC@val,w
 14224  06F1                     u6905:	
 14225  06F1  1803               	skipnc
 14226  06F2  2F16               	goto	l7648
 14227                           
 14228                           ;main.c: 300:         Noise();
 14229  06F3  3188  2028  3186   	fcall	_Noise
 14230                           
 14231                           ;main.c: 301:         printed = 0;
 14232  06F6  0020               	movlb	0	; select bank0
 14233  06F7  01E9               	clrf	_printed
 14234                           
 14235                           ;main.c: 302:         name++;
 14236  06F8  3001               	movlw	1
 14237  06F9  07DA               	addwf	_name,f
 14238  06FA  3000               	movlw	0
 14239  06FB  3DDB               	addwfc	_name+1,f
 14240                           
 14241                           ;main.c: 303:         if(name > 3) {
 14242  06FC  085B               	movf	_name+1,w
 14243  06FD  3A80               	xorlw	128
 14244  06FE  00AC               	movwf	??_Get_ADC
 14245  06FF  3080               	movlw	128
 14246  0700  022C               	subwf	??_Get_ADC,w
 14247  0701  1D03               	skipz
 14248  0702  2F05               	goto	u6915
 14249  0703  3004               	movlw	4
 14250  0704  025A               	subwf	_name,w
 14251  0705                     u6915:	
 14252  0705  1C03               	skipc
 14253  0706  2F0A               	goto	l7646
 14254                           
 14255                           ;main.c: 304:            name = 0;
 14256  0707  0020               	movlb	0	; select bank0
 14257  0708  01DA               	clrf	_name
 14258  0709  01DB               	clrf	_name+1
 14259  070A                     l7646:	
 14260                           
 14261                           ;main.c: 306:         Display_Name(names[name]);
 14262  070A  0020               	movlb	0	; select bank0
 14263  070B  355A               	lslf	_name,w
 14264  070C  3ED2               	addlw	(low (_names| (0+256)))& (0+255)
 14265  070D  0086               	movwf	6
 14266  070E  3001               	movlw	1	; select bank3/4
 14267  070F  0087               	movwf	7
 14268  0710  3F40               	moviw [0]fsr1
 14269  0711  00A5               	movwf	Display_Name@string1
 14270  0712  3F41               	moviw [1]fsr1
 14271  0713                     L9:	
 14272  0713  00A6               	movwf	Display_Name@string1+1
 14273  0714  318B  23BE         	fcall	_Display_Name
 14274  0716                     l7648:	
 14275                           
 14276                           ;main.c: 308:     adcResult = 0;
 14277  0716  0020               	movlb	0	; select bank0
 14278  0717  01E8               	clrf	_adcResult
 14279  0718  0008               	return
 14280  0719                     __end_of_Get_ADC:	
 14281                           
 14282                           	psect	text67
 14283  0828                     __ptext67:	
 14284 ;; *************** function _Noise *****************
 14285 ;; Defined at:
 14286 ;;		line 242 in file "main.c"
 14287 ;; Parameters:    Size  Location     Type
 14288 ;;		None
 14289 ;; Auto vars:     Size  Location     Type
 14290 ;;		None
 14291 ;; Return value:  Size  Location     Type
 14292 ;;                  1    wreg      void 
 14293 ;; Registers used:
 14294 ;;		wreg, status,2, status,0, pclath, cstack
 14295 ;; Tracked objects:
 14296 ;;		On entry : 0/0
 14297 ;;		On exit  : 0/0
 14298 ;;		Unchanged: 0/0
 14299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14300 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14301 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14302 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14303 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14304 ;;Total ram usage:        1 bytes
 14305 ;; Hardware stack levels used:    1
 14306 ;; Hardware stack levels required when called:    6
 14307 ;; This function calls:
 14308 ;;		_PWM1_LoadDutyValue
 14309 ;; This function is called by:
 14310 ;;		_main
 14311 ;;		_handleGesture
 14312 ;;		_Get_ADC
 14313 ;;		_On_Off
 14314 ;; This function uses a non-reentrant model
 14315 ;;
 14316                           
 14317                           
 14318                           ;psect for function _Noise
 14319  0828                     _Noise:	
 14320                           
 14321                           ;main.c: 243:     PWM1_LoadDutyValue(80);
 14322                           
 14323                           ;incstack = 0
 14324                           ; Regs used in _Noise: [wreg+status,2+status,0+pclath+cstack]
 14325  0828  3050               	movlw	80
 14326  0829  0020               	movlb	0	; select bank0
 14327  082A  00A0               	movwf	PWM1_LoadDutyValue@dutyValue
 14328  082B  3000               	movlw	0
 14329  082C  00A1               	movwf	PWM1_LoadDutyValue@dutyValue+1
 14330  082D  3188  2011  3188   	fcall	_PWM1_LoadDutyValue
 14331                           
 14332                           ;main.c: 244:     RC6PPS = 0x0C;
 14333  0830  300C               	movlw	12
 14334  0831  003D               	movlb	29	; select bank29
 14335  0832  00A6               	movwf	38	;volatile
 14336                           
 14337                           ;main.c: 245:     _delay((unsigned long)((100)*(500000/4000.0)));
 14338  0833  3011               	movlw	17
 14339  0834  0020               	movlb	0	; select bank0
 14340  0835  00A2               	movwf	??_Noise
 14341  0836  303A               	movlw	58
 14342  0837                     u7127:	
 14343  0837  0B89               	decfsz	9,f
 14344  0838  2837               	goto	u7127
 14345  0839  0BA2               	decfsz	??_Noise,f
 14346  083A  2837               	goto	u7127
 14347  083B  0000               	nop
 14348                           
 14349                           ;main.c: 246:     RC6PPS = 0x00;
 14350  083C  003D               	movlb	29	; select bank29
 14351  083D  01A6               	clrf	38	;volatile
 14352  083E  0008               	return
 14353  083F                     __end_of_Noise:	
 14354                           
 14355                           	psect	text68
 14356  0811                     __ptext68:	
 14357 ;; *************** function _PWM1_LoadDutyValue *****************
 14358 ;; Defined at:
 14359 ;;		line 82 in file "mcc_generated_files/pwm1.c"
 14360 ;; Parameters:    Size  Location     Type
 14361 ;;  dutyValue       2    0[BANK0 ] unsigned short 
 14362 ;; Auto vars:     Size  Location     Type
 14363 ;;		None
 14364 ;; Return value:  Size  Location     Type
 14365 ;;                  1    wreg      void 
 14366 ;; Registers used:
 14367 ;;		wreg, status,2
 14368 ;; Tracked objects:
 14369 ;;		On entry : 0/0
 14370 ;;		On exit  : 0/0
 14371 ;;		Unchanged: 0/0
 14372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14373 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14374 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14375 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14376 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14377 ;;Total ram usage:        2 bytes
 14378 ;; Hardware stack levels used:    1
 14379 ;; Hardware stack levels required when called:    5
 14380 ;; This function calls:
 14381 ;;		Nothing
 14382 ;; This function is called by:
 14383 ;;		_Noise
 14384 ;; This function uses a non-reentrant model
 14385 ;;
 14386                           
 14387                           
 14388                           ;psect for function _PWM1_LoadDutyValue
 14389  0811                     _PWM1_LoadDutyValue:	
 14390                           
 14391                           ;mcc_generated_files/pwm1.c: 82: void PWM1_LoadDutyValue(uint16_t dutyValue);mcc_generat
      +                          ed_files/pwm1.c: 83: {;mcc_generated_files/pwm1.c: 84:     dutyValue &= 0x03FF;
 14392                           
 14393                           ;incstack = 0
 14394                           ; Regs used in _PWM1_LoadDutyValue: [wreg+status,2]
 14395  0811  30FF               	movlw	255
 14396  0812  0020               	movlb	0	; select bank0
 14397  0813  05A0               	andwf	PWM1_LoadDutyValue@dutyValue,f
 14398  0814  3003               	movlw	3
 14399  0815  05A1               	andwf	PWM1_LoadDutyValue@dutyValue+1,f
 14400                           
 14401                           ;mcc_generated_files/pwm1.c: 87:     if(CCP1CONbits.CCP1FMT)
 14402  0816  0025               	movlb	5	; select bank5
 14403  0817  1E13               	btfss	19,4	;volatile
 14404  0818  281F               	goto	l6468
 14405                           
 14406                           ;mcc_generated_files/pwm1.c: 88:     {;mcc_generated_files/pwm1.c: 89:         dutyValue
      +                           <<= 6;
 14407  0819  3006               	movlw	6
 14408  081A  0020               	movlb	0	; select bank0
 14409  081B                     u5165:	
 14410  081B  35A0               	lslf	PWM1_LoadDutyValue@dutyValue,f
 14411  081C  0DA1               	rlf	PWM1_LoadDutyValue@dutyValue+1,f
 14412  081D  0B89               	decfsz	9,f
 14413  081E  281B               	goto	u5165
 14414  081F                     l6468:	
 14415                           
 14416                           ;mcc_generated_files/pwm1.c: 90:         CCPR1H = dutyValue >> 8;
 14417  081F  0020               	movlb	0	; select bank0
 14418  0820  0821               	movf	PWM1_LoadDutyValue@dutyValue+1,w
 14419  0821  0025               	movlb	5	; select bank5
 14420  0822  0092               	movwf	18	;volatile
 14421                           
 14422                           ;mcc_generated_files/pwm1.c: 91:         CCPR1L = dutyValue;
 14423  0823  0020               	movlb	0	; select bank0
 14424  0824  0820               	movf	PWM1_LoadDutyValue@dutyValue,w
 14425  0825  0025               	movlb	5	; select bank5
 14426  0826  0091               	movwf	17	;volatile
 14427                           
 14428                           ;mcc_generated_files/pwm1.c: 92:     }
 14429  0827  0008               	return
 14430  0828                     __end_of_PWM1_LoadDutyValue:	
 14431                           
 14432                           	psect	text69
 14433  0BBE                     __ptext69:	
 14434 ;; *************** function _Display_Name *****************
 14435 ;; Defined at:
 14436 ;;		line 215 in file "main.c"
 14437 ;; Parameters:    Size  Location     Type
 14438 ;;  string1         2    5[BANK0 ] PTR unsigned char 
 14439 ;;		 -> STR_4(11), STR_3(16), STR_2(13), STR_1(12), 
 14440 ;; Auto vars:     Size  Location     Type
 14441 ;;  i               2   10[BANK0 ] int 
 14442 ;;  length          2    8[BANK0 ] int 
 14443 ;; Return value:  Size  Location     Type
 14444 ;;                  1    wreg      void 
 14445 ;; Registers used:
 14446 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 14447 ;; Tracked objects:
 14448 ;;		On entry : 0/0
 14449 ;;		On exit  : 0/0
 14450 ;;		Unchanged: 0/0
 14451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14452 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14453 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14454 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14455 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14456 ;;Total ram usage:        7 bytes
 14457 ;; Hardware stack levels used:    1
 14458 ;; Hardware stack levels required when called:    7
 14459 ;; This function calls:
 14460 ;;		_SPI_Write
 14461 ;;		_strlen
 14462 ;; This function is called by:
 14463 ;;		_main
 14464 ;;		_handleGesture
 14465 ;;		_Get_ADC
 14466 ;; This function uses a non-reentrant model
 14467 ;;
 14468                           
 14469                           
 14470                           ;psect for function _Display_Name
 14471  0BBE                     _Display_Name:	
 14472                           
 14473                           ;main.c: 216:     int length;;main.c: 217:     int i;;main.c: 218:     SPI_Write(0xFE);
 14474                           
 14475                           ;incstack = 0
 14476                           ; Regs used in _Display_Name: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 14477  0BBE  30FE               	movlw	254
 14478  0BBF  3188  2001  318B   	fcall	_SPI_Write
 14479                           
 14480                           ;main.c: 219:     _delay((unsigned long)((10)*(500000/4000.0)));
 14481  0BC2  30FA               	movlw	250
 14482  0BC3                     u7137:	
 14483  0BC3  3200               	nop2
 14484  0BC4  0B89               	decfsz	9,f
 14485  0BC5  2BC3               	goto	u7137
 14486                           
 14487                           ;main.c: 220:     SPI_Write(0x51);
 14488  0BC6  3051               	movlw	81
 14489  0BC7  3188  2001  318B   	fcall	_SPI_Write
 14490                           
 14491                           ;main.c: 221:     length = strlen(string1);
 14492  0BCA  0020               	movlb	0	; select bank0
 14493  0BCB  0826               	movf	Display_Name@string1+1,w
 14494  0BCC  00A1               	movwf	strlen@s+1
 14495  0BCD  0825               	movf	Display_Name@string1,w
 14496  0BCE  00A0               	movwf	strlen@s
 14497  0BCF  3188  2056  318B   	fcall	_strlen
 14498  0BD2  0020               	movlb	0	; select bank0
 14499  0BD3  0821               	movf	?_strlen+1,w
 14500  0BD4  00A9               	movwf	Display_Name@length+1
 14501  0BD5  0820               	movf	?_strlen,w
 14502  0BD6  00A8               	movwf	Display_Name@length
 14503                           
 14504                           ;main.c: 222:     for(i = 0; i < length; i++){
 14505  0BD7  01AA               	clrf	Display_Name@i
 14506  0BD8  01AB               	clrf	Display_Name@i+1
 14507  0BD9                     l7024:	
 14508  0BD9  082B               	movf	Display_Name@i+1,w
 14509  0BDA  3A80               	xorlw	128
 14510  0BDB  00A7               	movwf	??_Display_Name
 14511  0BDC  0829               	movf	Display_Name@length+1,w
 14512  0BDD  3A80               	xorlw	128
 14513  0BDE  0227               	subwf	??_Display_Name,w
 14514  0BDF  1D03               	skipz
 14515  0BE0  2BE3               	goto	u6045
 14516  0BE1  0828               	movf	Display_Name@length,w
 14517  0BE2  022A               	subwf	Display_Name@i,w
 14518  0BE3                     u6045:	
 14519  0BE3  1803               	btfsc	3,0
 14520  0BE4  2BF6               	goto	l994
 14521                           
 14522                           ;main.c: 223:         SPI_Write(string1[i]);
 14523  0BE5  0020               	movlb	0	; select bank0
 14524  0BE6  0825               	movf	Display_Name@string1,w
 14525  0BE7  072A               	addwf	Display_Name@i,w
 14526  0BE8  0084               	movwf	4
 14527  0BE9  0826               	movf	Display_Name@string1+1,w
 14528  0BEA  3D2B               	addwfc	Display_Name@i+1,w
 14529  0BEB  0085               	movwf	5
 14530  0BEC  0800               	movf	0,w	;code access
 14531  0BED  3188  2001  318B   	fcall	_SPI_Write
 14532                           
 14533                           ;main.c: 224:     }
 14534  0BF0  3001               	movlw	1
 14535  0BF1  0020               	movlb	0	; select bank0
 14536  0BF2  07AA               	addwf	Display_Name@i,f
 14537  0BF3  3000               	movlw	0
 14538  0BF4  3DAB               	addwfc	Display_Name@i+1,f
 14539  0BF5  2BD9               	goto	l7024
 14540  0BF6                     l994:	
 14541                           
 14542                           ;main.c: 225:     printed = 1;
 14543  0BF6  0020               	movlb	0	; select bank0
 14544  0BF7  01E9               	clrf	_printed
 14545  0BF8  0AE9               	incf	_printed,f
 14546  0BF9  0008               	return
 14547  0BFA                     __end_of_Display_Name:	
 14548                           
 14549                           	psect	text70
 14550  0856                     __ptext70:	
 14551 ;; *************** function _strlen *****************
 14552 ;; Defined at:
 14553 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
 14554 ;; Parameters:    Size  Location     Type
 14555 ;;  s               2    0[BANK0 ] PTR const unsigned char 
 14556 ;;		 -> UART_Byte@bits(5), STR_4(11), STR_3(16), STR_2(13), 
 14557 ;;		 -> STR_1(12), 
 14558 ;; Auto vars:     Size  Location     Type
 14559 ;;  a               2    3[BANK0 ] PTR const unsigned char 
 14560 ;;		 -> UART_Byte@bits(5), STR_4(11), STR_3(16), STR_2(13), 
 14561 ;;		 -> STR_1(12), 
 14562 ;; Return value:  Size  Location     Type
 14563 ;;                  2    0[BANK0 ] unsigned int 
 14564 ;; Registers used:
 14565 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 14566 ;; Tracked objects:
 14567 ;;		On entry : 0/0
 14568 ;;		On exit  : 0/0
 14569 ;;		Unchanged: 0/0
 14570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14571 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14572 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14573 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14574 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14575 ;;Total ram usage:        5 bytes
 14576 ;; Hardware stack levels used:    1
 14577 ;; Hardware stack levels required when called:    5
 14578 ;; This function calls:
 14579 ;;		Nothing
 14580 ;; This function is called by:
 14581 ;;		_Display_Name
 14582 ;;		_UART_Byte
 14583 ;; This function uses a non-reentrant model
 14584 ;;
 14585                           
 14586                           
 14587                           ;psect for function _strlen
 14588  0856                     _strlen:	
 14589                           
 14590                           ;incstack = 0
 14591                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0]
 14592  0856  0020               	movlb	0	; select bank0
 14593  0857  0821               	movf	strlen@s+1,w
 14594  0858  00A4               	movwf	strlen@a+1
 14595  0859  0820               	movf	strlen@s,w
 14596  085A  00A3               	movwf	strlen@a
 14597  085B                     l6512:	
 14598  085B  0820               	movf	strlen@s,w
 14599  085C  0084               	movwf	4
 14600  085D  0821               	movf	strlen@s+1,w
 14601  085E  0085               	movwf	5
 14602  085F  0012               	moviw fsr0++
 14603  0860  1903               	btfsc	3,2
 14604  0861  2867               	goto	l6514
 14605  0862  3001               	movlw	1
 14606  0863  07A0               	addwf	strlen@s,f
 14607  0864  3000               	movlw	0
 14608  0865  3DA1               	addwfc	strlen@s+1,f
 14609  0866  285B               	goto	l6512
 14610  0867                     l6514:	
 14611  0867  0823               	movf	strlen@a,w
 14612  0868  0220               	subwf	strlen@s,w
 14613  0869  00A0               	movwf	?_strlen
 14614  086A  0824               	movf	strlen@a+1,w
 14615  086B  3B21               	subwfb	strlen@s+1,w
 14616  086C  00A1               	movwf	?_strlen+1
 14617  086D  0008               	return
 14618  086E                     __end_of_strlen:	
 14619                           
 14620                           	psect	text71
 14621  08F9                     __ptext71:	
 14622 ;; *************** function _ADC_GetConversion *****************
 14623 ;; Defined at:
 14624 ;;		line 113 in file "mcc_generated_files/adc.c"
 14625 ;; Parameters:    Size  Location     Type
 14626 ;;  channel         1    wreg     enum E6648
 14627 ;; Auto vars:     Size  Location     Type
 14628 ;;  channel         1    3[BANK0 ] enum E6648
 14629 ;; Return value:  Size  Location     Type
 14630 ;;                  2    0[BANK0 ] unsigned short 
 14631 ;; Registers used:
 14632 ;;		wreg, status,2, status,0
 14633 ;; Tracked objects:
 14634 ;;		On entry : 0/0
 14635 ;;		On exit  : 0/0
 14636 ;;		Unchanged: 0/0
 14637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14638 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14639 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14640 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14641 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14642 ;;Total ram usage:        4 bytes
 14643 ;; Hardware stack levels used:    1
 14644 ;; Hardware stack levels required when called:    5
 14645 ;; This function calls:
 14646 ;;		Nothing
 14647 ;; This function is called by:
 14648 ;;		_Get_ADC
 14649 ;;		_On_Off
 14650 ;; This function uses a non-reentrant model
 14651 ;;
 14652                           
 14653                           
 14654                           ;psect for function _ADC_GetConversion
 14655  08F9                     _ADC_GetConversion:	
 14656                           
 14657                           ;incstack = 0
 14658                           ; Regs used in _ADC_GetConversion: [wreg+status,2+status,0]
 14659                           ;ADC_GetConversion@channel stored from wreg
 14660  08F9  0020               	movlb	0	; select bank0
 14661  08FA  00A3               	movwf	ADC_GetConversion@channel
 14662                           
 14663                           ;mcc_generated_files/adc.c: 113: adc_result_t ADC_GetConversion(adc_channel_t channel);m
      +                          cc_generated_files/adc.c: 114: {;mcc_generated_files/adc.c: 116:     ADCON0bits.CHS = ch
      +                          annel;
 14664  08FB  0823               	movf	ADC_GetConversion@channel,w
 14665  08FC  00A2               	movwf	??_ADC_GetConversion
 14666  08FD  0DA2               	rlf	??_ADC_GetConversion,f
 14667  08FE  0DA2               	rlf	??_ADC_GetConversion,f
 14668  08FF  0021               	movlb	1	; select bank1
 14669  0900  081D               	movf	29,w	;volatile
 14670  0901  0020               	movlb	0	; select bank0
 14671  0902  0622               	xorwf	??_ADC_GetConversion,w
 14672  0903  3903               	andlw	-253
 14673  0904  0622               	xorwf	??_ADC_GetConversion,w
 14674  0905  0021               	movlb	1	; select bank1
 14675  0906  009D               	movwf	29	;volatile
 14676                           
 14677                           ;mcc_generated_files/adc.c: 119:     ADCON0bits.ADON = 1;
 14678  0907  141D               	bsf	29,0	;volatile
 14679                           
 14680                           ;mcc_generated_files/adc.c: 125:     ADCON0bits.ADGO = 1;
 14681                           
 14682                           ;mcc_generated_files/adc.c: 122:     _delay((unsigned long)((5)*(500000/4000000.0)));
 14683  0908  0021               	movlb	1	; select bank1
 14684  0909  149D               	bsf	29,1	;volatile
 14685  090A                     l668:	
 14686                           ;mcc_generated_files/adc.c: 131:     }
 14687                           
 14688                           ;mcc_generated_files/adc.c: 128:     while (ADCON0bits.ADGO)
 14689                           
 14690                           
 14691                           ;mcc_generated_files/adc.c: 128:     while (ADCON0bits.ADGO)
 14692  090A  0021               	movlb	1	; select bank1
 14693  090B  1C9D               	btfss	29,1	;volatile
 14694  090C  290F               	goto	l6998
 14695  090D  0064               	clrwdt	;# 
 14696  090E  290A               	goto	l668
 14697  090F                     l6998:	
 14698                           
 14699                           ;mcc_generated_files/adc.c: 134:     return ((adc_result_t)((ADRESH << 8) + ADRESL));
 14700  090F  081C               	movf	28,w	;volatile
 14701  0910  0020               	movlb	0	; select bank0
 14702  0911  00A1               	movwf	?_ADC_GetConversion+1
 14703  0912  0021               	movlb	1	; select bank1
 14704  0913  081B               	movf	27,w	;volatile
 14705  0914  0020               	movlb	0	; select bank0
 14706  0915  00A0               	movwf	?_ADC_GetConversion
 14707  0916  0008               	return
 14708  0917                     __end_of_ADC_GetConversion:	
 14709                           
 14710                           	psect	text72
 14711  1724                     __ptext72:	
 14712 ;; *************** function _Display_Clear *****************
 14713 ;; Defined at:
 14714 ;;		line 228 in file "main.c"
 14715 ;; Parameters:    Size  Location     Type
 14716 ;;		None
 14717 ;; Auto vars:     Size  Location     Type
 14718 ;;		None
 14719 ;; Return value:  Size  Location     Type
 14720 ;;                  1    wreg      void 
 14721 ;; Registers used:
 14722 ;;		wreg, status,2, status,0, pclath, cstack
 14723 ;; Tracked objects:
 14724 ;;		On entry : 0/0
 14725 ;;		On exit  : 0/0
 14726 ;;		Unchanged: 0/0
 14727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14728 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14729 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14730 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14731 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14732 ;;Total ram usage:        0 bytes
 14733 ;; Hardware stack levels used:    1
 14734 ;; Hardware stack levels required when called:    7
 14735 ;; This function calls:
 14736 ;;		_SPI_Write
 14737 ;; This function is called by:
 14738 ;;		_main
 14739 ;; This function uses a non-reentrant model
 14740 ;;
 14741                           
 14742                           
 14743                           ;psect for function _Display_Clear
 14744  1724                     _Display_Clear:	
 14745                           
 14746                           ;main.c: 229:     SPI_Write(0xFE);
 14747                           
 14748                           ;incstack = 0
 14749                           ; Regs used in _Display_Clear: [wreg+status,2+status,0+pclath+cstack]
 14750  1724  30FE               	movlw	254
 14751  1725  3188  2001  3197   	fcall	_SPI_Write
 14752                           
 14753                           ;main.c: 230:     _delay((unsigned long)((10)*(500000/4000.0)));
 14754  1728  30FA               	movlw	250
 14755  1729                     u7147:	
 14756  1729  3200               	nop2
 14757  172A  0B89               	decfsz	9,f
 14758  172B  2F29               	goto	u7147
 14759                           
 14760                           ;main.c: 231:     SPI_Write(0x51);
 14761  172C  3051               	movlw	81
 14762  172D  3188  2001         	fcall	_SPI_Write
 14763  172F  0008               	return
 14764  1730                     __end_of_Display_Clear:	
 14765                           
 14766                           	psect	text73
 14767  17D4                     __ptext73:	
 14768 ;; *************** function _Display_Brightness *****************
 14769 ;; Defined at:
 14770 ;;		line 234 in file "main.c"
 14771 ;; Parameters:    Size  Location     Type
 14772 ;;		None
 14773 ;; Auto vars:     Size  Location     Type
 14774 ;;		None
 14775 ;; Return value:  Size  Location     Type
 14776 ;;                  1    wreg      void 
 14777 ;; Registers used:
 14778 ;;		wreg, status,2, status,0, pclath, cstack
 14779 ;; Tracked objects:
 14780 ;;		On entry : 0/0
 14781 ;;		On exit  : 0/0
 14782 ;;		Unchanged: 0/0
 14783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14784 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14785 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14786 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14787 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14788 ;;Total ram usage:        0 bytes
 14789 ;; Hardware stack levels used:    1
 14790 ;; Hardware stack levels required when called:    7
 14791 ;; This function calls:
 14792 ;;		_SPI_Write
 14793 ;; This function is called by:
 14794 ;;		_main
 14795 ;; This function uses a non-reentrant model
 14796 ;;
 14797                           
 14798                           
 14799                           ;psect for function _Display_Brightness
 14800  17D4                     _Display_Brightness:	
 14801                           
 14802                           ;main.c: 235:     SPI_Write(0xFE);
 14803                           
 14804                           ;incstack = 0
 14805                           ; Regs used in _Display_Brightness: [wreg+status,2+status,0+pclath+cstack]
 14806  17D4  30FE               	movlw	254
 14807  17D5  3188  2001  3197   	fcall	_SPI_Write
 14808                           
 14809                           ;main.c: 236:     _delay((unsigned long)((10)*(500000/4000.0)));
 14810  17D8  30FA               	movlw	250
 14811  17D9                     u7157:	
 14812  17D9  3200               	nop2
 14813  17DA  0B89               	decfsz	9,f
 14814  17DB  2FD9               	goto	u7157
 14815                           
 14816                           ;main.c: 237:     SPI_Write(0x53);
 14817  17DC  3053               	movlw	83
 14818  17DD  3188  2001  3197   	fcall	_SPI_Write
 14819                           
 14820                           ;main.c: 238:     _delay((unsigned long)((10)*(500000/4000.0)));
 14821  17E0  30FA               	movlw	250
 14822  17E1                     u7167:	
 14823  17E1  3200               	nop2
 14824  17E2  0B89               	decfsz	9,f
 14825  17E3  2FE1               	goto	u7167
 14826                           
 14827                           ;main.c: 239:     SPI_Write(brightLCD);
 14828  17E4  0020               	movlb	0	; select bank0
 14829  17E5  086F               	movf	_brightLCD,w
 14830  17E6  3188  2001         	fcall	_SPI_Write
 14831  17E8  0008               	return
 14832  17E9                     __end_of_Display_Brightness:	
 14833                           
 14834                           	psect	text74
 14835  0801                     __ptext74:	
 14836 ;; *************** function _SPI_Write *****************
 14837 ;; Defined at:
 14838 ;;		line 208 in file "main.c"
 14839 ;; Parameters:    Size  Location     Type
 14840 ;;  incoming        1    wreg     unsigned char 
 14841 ;; Auto vars:     Size  Location     Type
 14842 ;;  incoming        1    1[BANK0 ] unsigned char 
 14843 ;; Return value:  Size  Location     Type
 14844 ;;                  1    wreg      void 
 14845 ;; Registers used:
 14846 ;;		wreg, status,2, status,0, pclath, cstack
 14847 ;; Tracked objects:
 14848 ;;		On entry : 0/0
 14849 ;;		On exit  : 0/0
 14850 ;;		Unchanged: 0/0
 14851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14853 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14854 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14855 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14856 ;;Total ram usage:        1 bytes
 14857 ;; Hardware stack levels used:    1
 14858 ;; Hardware stack levels required when called:    6
 14859 ;; This function calls:
 14860 ;;		_SPI2_Exchange8bit
 14861 ;; This function is called by:
 14862 ;;		_Display_Name
 14863 ;;		_Display_Clear
 14864 ;;		_Display_Brightness
 14865 ;; This function uses a non-reentrant model
 14866 ;;
 14867                           
 14868                           
 14869                           ;psect for function _SPI_Write
 14870  0801                     _SPI_Write:	
 14871                           
 14872                           ;incstack = 0
 14873                           ; Regs used in _SPI_Write: [wreg+status,2+status,0+pclath+cstack]
 14874                           ;SPI_Write@incoming stored from wreg
 14875  0801  0020               	movlb	0	; select bank0
 14876  0802  00A1               	movwf	SPI_Write@incoming
 14877                           
 14878                           ;main.c: 209:     do { LATCbits.LATC0 = 0; } while(0);
 14879  0803  0022               	movlb	2	; select bank2
 14880  0804  100E               	bcf	14,0	;volatile
 14881                           
 14882                           ;main.c: 210:     SPI2_Exchange8bit(incoming);
 14883  0805  0020               	movlb	0	; select bank0
 14884  0806  0821               	movf	SPI_Write@incoming,w
 14885  0807  3197  2757  3188   	fcall	_SPI2_Exchange8bit
 14886  080A  0022               	movlb	2	; select bank2
 14887  080B  140E               	bsf	14,0	;volatile
 14888                           
 14889                           ;main.c: 212:     _delay((unsigned long)((10)*(500000/4000.0)));
 14890  080C  30FA               	movlw	250
 14891  080D                     u7177:	
 14892  080D  3200               	nop2
 14893  080E  0B89               	decfsz	9,f
 14894  080F  280D               	goto	u7177
 14895  0810  0008               	return
 14896  0811                     __end_of_SPI_Write:	
 14897                           
 14898                           	psect	text75
 14899  1757                     __ptext75:	
 14900 ;; *************** function _SPI2_Exchange8bit *****************
 14901 ;; Defined at:
 14902 ;;		line 79 in file "mcc_generated_files/spi2.c"
 14903 ;; Parameters:    Size  Location     Type
 14904 ;;  data            1    wreg     unsigned char 
 14905 ;; Auto vars:     Size  Location     Type
 14906 ;;  data            1    0[BANK0 ] unsigned char 
 14907 ;; Return value:  Size  Location     Type
 14908 ;;                  1    wreg      unsigned char 
 14909 ;; Registers used:
 14910 ;;		wreg
 14911 ;; Tracked objects:
 14912 ;;		On entry : 0/0
 14913 ;;		On exit  : 0/0
 14914 ;;		Unchanged: 0/0
 14915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14917 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14919 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14920 ;;Total ram usage:        1 bytes
 14921 ;; Hardware stack levels used:    1
 14922 ;; Hardware stack levels required when called:    5
 14923 ;; This function calls:
 14924 ;;		Nothing
 14925 ;; This function is called by:
 14926 ;;		_SPI_Write
 14927 ;;		_SPI2_Exchange8bitBuffer
 14928 ;; This function uses a non-reentrant model
 14929 ;;
 14930                           
 14931                           
 14932                           ;psect for function _SPI2_Exchange8bit
 14933  1757                     _SPI2_Exchange8bit:	
 14934                           
 14935                           ;incstack = 0
 14936                           ; Regs used in _SPI2_Exchange8bit: [wreg]
 14937                           ;SPI2_Exchange8bit@data stored from wreg
 14938  1757  0020               	movlb	0	; select bank0
 14939  1758  00A0               	movwf	SPI2_Exchange8bit@data
 14940                           
 14941                           ;mcc_generated_files/spi2.c: 79: uint8_t SPI2_Exchange8bit(uint8_t data);mcc_generated_f
      +                          iles/spi2.c: 80: {;mcc_generated_files/spi2.c: 82:     SSP2CON1bits.WCOL = 0;
 14942  1759  0024               	movlb	4	; select bank4
 14943  175A  139D               	bcf	29,7	;volatile
 14944                           
 14945                           ;mcc_generated_files/spi2.c: 84:     SSP2BUF = data;
 14946  175B  0020               	movlb	0	; select bank0
 14947  175C  0820               	movf	SPI2_Exchange8bit@data,w
 14948  175D  0024               	movlb	4	; select bank4
 14949  175E  0099               	movwf	25	;volatile
 14950  175F                     l577:	
 14951                           ;mcc_generated_files/spi2.c: 89:     }
 14952                           
 14953                           ;mcc_generated_files/spi2.c: 86:     while(SSP2STATbits.BF == 0x0)
 14954                           
 14955                           
 14956                           ;mcc_generated_files/spi2.c: 86:     while(SSP2STATbits.BF == 0x0)
 14957  175F  0024               	movlb	4	; select bank4
 14958  1760  181C               	btfsc	28,0	;volatile
 14959  1761  2F64               	goto	l6378
 14960  1762  0064               	clrwdt	;# 
 14961  1763  2F5F               	goto	l577
 14962  1764                     l6378:	
 14963                           
 14964                           ;mcc_generated_files/spi2.c: 91:     return (SSP2BUF);
 14965  1764  0819               	movf	25,w	;volatile
 14966  1765  0008               	return
 14967  1766                     __end_of_SPI2_Exchange8bit:	
 14968                           
 14969                           	psect	intentry
 14970  0004                     __pintentry:	
 14971 ;; *************** function _INTERRUPT_InterruptManager *****************
 14972 ;; Defined at:
 14973 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 14974 ;; Parameters:    Size  Location     Type
 14975 ;;		None
 14976 ;; Auto vars:     Size  Location     Type
 14977 ;;		None
 14978 ;; Return value:  Size  Location     Type
 14979 ;;                  1    wreg      void 
 14980 ;; Registers used:
 14981 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14982 ;; Tracked objects:
 14983 ;;		On entry : 0/0
 14984 ;;		On exit  : 0/0
 14985 ;;		Unchanged: 0/0
 14986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14987 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14988 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14989 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14990 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14991 ;;Total ram usage:        0 bytes
 14992 ;; Hardware stack levels used:    1
 14993 ;; Hardware stack levels required when called:    4
 14994 ;; This function calls:
 14995 ;;		Absolute function
 14996 ;;		_EUSART_Receive_ISR
 14997 ;;		_EUSART_Transmit_ISR
 14998 ;;		_PIN_MANAGER_IOC
 14999 ;;		_i2c_ISR
 15000 ;;		_i2c_busCollisionISR
 15001 ;; This function is called by:
 15002 ;;		Interrupt level 1
 15003 ;; This function uses a non-reentrant model
 15004 ;;
 15005                           
 15006  0004                     _INTERRUPT_InterruptManager:	
 15007                           
 15008                           ;incstack = 0
 15009  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 15010                           
 15011                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15012  0005  3180               	pagesel	$
 15013                           
 15014                           ;mcc_generated_files/interrupt_manager.c: 55:     if(PIE0bits.IOCIE == 1 && PIR0bits.IOC
      +                          IF == 1)
 15015  0006  0021               	movlb	1	; select bank1
 15016  0007  1E10               	btfss	16,4	;volatile
 15017  0008  2810               	goto	i1l249
 15018  0009  0020               	movlb	0	; select bank0
 15019  000A  1E10               	btfss	16,4	;volatile
 15020  000B  2810               	goto	i1l249
 15021                           
 15022                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         PIN_MANAGER_IOC();
 15023  000C  3196  2661  3180   	fcall	_PIN_MANAGER_IOC
 15024                           
 15025                           ;mcc_generated_files/interrupt_manager.c: 58:     }
 15026  000F  2845               	goto	i1l261
 15027  0010                     i1l249:	
 15028                           ;mcc_generated_files/interrupt_manager.c: 59:     else if(INTCONbits.PEIE == 1)
 15029                           
 15030  0010  1F0B               	btfss	11,6	;volatile
 15031  0011  2845               	goto	i1l261
 15032                           
 15033                           ;mcc_generated_files/interrupt_manager.c: 60:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 61:         if(PIE1bits.TXIE == 1 && PIR1bits.TXIF == 1)
 15034  0012  0021               	movlb	1	; select bank1
 15035  0013  1E11               	btfss	17,4	;volatile
 15036  0014  281F               	goto	i1l252
 15037  0015  0020               	movlb	0	; select bank0
 15038  0016  1E11               	btfss	17,4	;volatile
 15039  0017  281F               	goto	i1l252
 15040                           
 15041                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             EUSART_TxDefaultInterruptHandler();
 15042  0018  0022               	movlb	2	; select bank2
 15043  0019  086D               	movf	(_EUSART_TxDefaultInterruptHandler+1)^(0+256),w
 15044  001A  008A               	movwf	10
 15045  001B  086C               	movf	_EUSART_TxDefaultInterruptHandler^(0+256),w
 15046  001C  000A               	callw
 15047  001D  3180               	pagesel	$
 15048                           
 15049                           ;mcc_generated_files/interrupt_manager.c: 64:         }
 15050  001E  2845               	goto	i1l261
 15051  001F                     i1l252:	
 15052                           ;mcc_generated_files/interrupt_manager.c: 65:         else if(PIE1bits.RCIE == 1 && PIR1
      +                          bits.RCIF == 1)
 15053                           
 15054  001F  0021               	movlb	1	; select bank1
 15055  0020  1E91               	btfss	17,5	;volatile
 15056  0021  282C               	goto	i1l254
 15057  0022  0020               	movlb	0	; select bank0
 15058  0023  1E91               	btfss	17,5	;volatile
 15059  0024  282C               	goto	i1l254
 15060                           
 15061                           ;mcc_generated_files/interrupt_manager.c: 66:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 67:             EUSART_RxDefaultInterruptHandler();
 15062  0025  0022               	movlb	2	; select bank2
 15063  0026  086B               	movf	(_EUSART_RxDefaultInterruptHandler+1)^(0+256),w
 15064  0027  008A               	movwf	10
 15065  0028  086A               	movf	_EUSART_RxDefaultInterruptHandler^(0+256),w
 15066  0029  000A               	callw
 15067  002A  3180               	pagesel	$
 15068                           
 15069                           ;mcc_generated_files/interrupt_manager.c: 68:         }
 15070  002B  2845               	goto	i1l261
 15071  002C                     i1l254:	
 15072                           ;mcc_generated_files/interrupt_manager.c: 69:         else if(PIE1bits.BCL1IE == 1 && PI
      +                          R1bits.BCL1IF == 1)
 15073                           
 15074  002C  0021               	movlb	1	; select bank1
 15075  002D  1D11               	btfss	17,2	;volatile
 15076  002E  2839               	goto	i1l256
 15077  002F  0020               	movlb	0	; select bank0
 15078  0030  1D11               	btfss	17,2	;volatile
 15079  0031  2839               	goto	i1l256
 15080                           
 15081                           ;mcc_generated_files/interrupt_manager.c: 70:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 71:             i2c1_driver_busCollisionISR();
 15082  0032  0021               	movlb	1	; select bank1
 15083  0033  0869               	movf	(_i2c1_driver_busCollisionISR+1)^(0+128),w
 15084  0034  008A               	movwf	10
 15085  0035  0868               	movf	_i2c1_driver_busCollisionISR^(0+128),w
 15086  0036  000A               	callw
 15087  0037  3180               	pagesel	$
 15088                           
 15089                           ;mcc_generated_files/interrupt_manager.c: 72:         }
 15090  0038  2845               	goto	i1l261
 15091  0039                     i1l256:	
 15092                           ;mcc_generated_files/interrupt_manager.c: 73:         else if(PIE1bits.SSP1IE == 1 && PI
      +                          R1bits.SSP1IF == 1)
 15093                           
 15094  0039  0021               	movlb	1	; select bank1
 15095  003A  1D91               	btfss	17,3	;volatile
 15096  003B  2845               	goto	i1l261
 15097  003C  0020               	movlb	0	; select bank0
 15098  003D  1D91               	btfss	17,3	;volatile
 15099  003E  2845               	goto	i1l261
 15100                           
 15101                           ;mcc_generated_files/interrupt_manager.c: 74:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 75:             i2c1_driver_i2cISR();
 15102  003F  0021               	movlb	1	; select bank1
 15103  0040  0867               	movf	(_i2c1_driver_i2cISR+1)^(0+128),w
 15104  0041  008A               	movwf	10
 15105  0042  0866               	movf	_i2c1_driver_i2cISR^(0+128),w
 15106  0043  000A               	callw
 15107  0044  3180               	pagesel	$
 15108  0045                     i1l261:	
 15109                           ;mcc_generated_files/interrupt_manager.c: 76:         }
 15110                           
 15111  0045  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 15112  0046  0009               	retfie
 15113  0047                     __end_of_INTERRUPT_InterruptManager:	
 15114                           
 15115                           	psect	text77
 15116  1609                     __ptext77:	
 15117 ;; *************** function _i2c_busCollisionISR *****************
 15118 ;; Defined at:
 15119 ;;		line 435 in file "mcc_generated_files/drivers/i2c_master.c"
 15120 ;; Parameters:    Size  Location     Type
 15121 ;;		None
 15122 ;; Auto vars:     Size  Location     Type
 15123 ;;		None
 15124 ;; Return value:  Size  Location     Type
 15125 ;;                  1    wreg      void 
 15126 ;; Registers used:
 15127 ;;		status,2, status,0, pclath, cstack
 15128 ;; Tracked objects:
 15129 ;;		On entry : 0/0
 15130 ;;		On exit  : 0/0
 15131 ;;		Unchanged: 0/0
 15132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15134 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15135 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15136 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15137 ;;Total ram usage:        0 bytes
 15138 ;; Hardware stack levels used:    1
 15139 ;; Hardware stack levels required when called:    1
 15140 ;; This function calls:
 15141 ;;		_i2c1_driver_clearBusCollision
 15142 ;; This function is called by:
 15143 ;;		_i2c_open
 15144 ;;		_INTERRUPT_InterruptManager
 15145 ;; This function uses a non-reentrant model
 15146 ;;
 15147                           
 15148                           
 15149                           ;psect for function _i2c_busCollisionISR
 15150  1609                     _i2c_busCollisionISR:	
 15151                           
 15152                           ;mcc_generated_files/drivers/i2c_master.c: 437:     i2c1_driver_clearBusCollision();
 15153                           
 15154                           ;incstack = 0
 15155                           ; Regs used in _i2c_busCollisionISR: [status,2+status,0+pclath+cstack]
 15156  1609  3196  2606         	fcall	_i2c1_driver_clearBusCollision
 15157  160B  0008               	return
 15158  160C                     __end_of_i2c_busCollisionISR:	
 15159                           
 15160                           	psect	text78
 15161  1606                     __ptext78:	
 15162 ;; *************** function _i2c1_driver_clearBusCollision *****************
 15163 ;; Defined at:
 15164 ;;		line 253 in file "mcc_generated_files/i2c1_driver.c"
 15165 ;; Parameters:    Size  Location     Type
 15166 ;;		None
 15167 ;; Auto vars:     Size  Location     Type
 15168 ;;		None
 15169 ;; Return value:  Size  Location     Type
 15170 ;;                  1    wreg      void 
 15171 ;; Registers used:
 15172 ;;		None
 15173 ;; Tracked objects:
 15174 ;;		On entry : 0/0
 15175 ;;		On exit  : 0/0
 15176 ;;		Unchanged: 0/0
 15177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15178 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15179 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15180 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15181 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15182 ;;Total ram usage:        0 bytes
 15183 ;; Hardware stack levels used:    1
 15184 ;; This function calls:
 15185 ;;		Nothing
 15186 ;; This function is called by:
 15187 ;;		_i2c_busCollisionISR
 15188 ;; This function uses a non-reentrant model
 15189 ;;
 15190                           
 15191                           
 15192                           ;psect for function _i2c1_driver_clearBusCollision
 15193  1606                     _i2c1_driver_clearBusCollision:	
 15194                           
 15195                           ;mcc_generated_files/i2c1_driver.c: 255:     PIR1bits.BCL1IF = 0;
 15196                           
 15197                           ;incstack = 0
 15198                           ; Regs used in _i2c1_driver_clearBusCollision: []
 15199  1606  0020               	movlb	0	; select bank0
 15200  1607  1111               	bcf	17,2	;volatile
 15201  1608  0008               	return
 15202  1609                     __end_of_i2c1_driver_clearBusCollision:	
 15203                           
 15204                           	psect	text79
 15205  0959                     __ptext79:	
 15206 ;; *************** function _i2c_ISR *****************
 15207 ;; Defined at:
 15208 ;;		line 419 in file "mcc_generated_files/drivers/i2c_master.c"
 15209 ;; Parameters:    Size  Location     Type
 15210 ;;		None
 15211 ;; Auto vars:     Size  Location     Type
 15212 ;;		None
 15213 ;; Return value:  Size  Location     Type
 15214 ;;                  1    wreg      void 
 15215 ;; Registers used:
 15216 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15217 ;; Tracked objects:
 15218 ;;		On entry : 0/0
 15219 ;;		On exit  : 0/0
 15220 ;;		Unchanged: 0/0
 15221 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15222 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15223 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15224 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15225 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15226 ;;Total ram usage:        3 bytes
 15227 ;; Hardware stack levels used:    1
 15228 ;; Hardware stack levels required when called:    3
 15229 ;; This function calls:
 15230 ;;		_do_I2C_DO_ACK
 15231 ;;		_do_I2C_DO_ADDRESS_NACK
 15232 ;;		_do_I2C_DO_NACK_RESTART
 15233 ;;		_do_I2C_DO_NACK_STOP
 15234 ;;		_do_I2C_IDLE
 15235 ;;		_do_I2C_RCEN
 15236 ;;		_do_I2C_RESET
 15237 ;;		_do_I2C_RX
 15238 ;;		_do_I2C_SEND_ADR_READ
 15239 ;;		_do_I2C_SEND_ADR_WRITE
 15240 ;;		_do_I2C_SEND_RESTART
 15241 ;;		_do_I2C_SEND_RESTART_READ
 15242 ;;		_do_I2C_SEND_RESTART_WRITE
 15243 ;;		_do_I2C_SEND_STOP
 15244 ;;		_do_I2C_TX
 15245 ;;		_do_I2C_TX_EMPTY
 15246 ;;		_i2c1_driver_isNACK
 15247 ;;		_mssp1_clearIRQ
 15248 ;; This function is called by:
 15249 ;;		_i2c_open
 15250 ;;		_i2c_poller
 15251 ;;		_INTERRUPT_InterruptManager
 15252 ;; This function uses a non-reentrant model
 15253 ;;
 15254                           
 15255                           
 15256                           ;psect for function _i2c_ISR
 15257  0959                     _i2c_ISR:	
 15258                           
 15259                           ;mcc_generated_files/drivers/i2c_master.c: 421:     mssp1_clearIRQ();
 15260                           
 15261                           ;incstack = 0
 15262                           ; Regs used in _i2c_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15263  0959  3196  2603  3189   	fcall	_mssp1_clearIRQ
 15264                           
 15265                           ;mcc_generated_files/drivers/i2c_master.c: 427:     if(i2c_status.addressNACKCheck && i2
      +                          c1_driver_isNACK())
 15266  095C  0023               	movlb	3	; select bank3
 15267  095D  1DA0               	btfss	_i2c_status^(0+384),3
 15268  095E  2969               	goto	i1l5536
 15269  095F  3196  26A1  3189   	fcall	_i2c1_driver_isNACK
 15270  0962  1C03               	btfss	3,0
 15271  0963  2969               	goto	i1l5536
 15272                           
 15273                           ;mcc_generated_files/drivers/i2c_master.c: 428:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 429:         i2c_status.state = I2C_ADDRESS_NACK;
 15274  0964  300F               	movlw	15
 15275  0965  00F9               	movwf	??_i2c_ISR
 15276  0966  0879               	movf	??_i2c_ISR,w
 15277  0967  0023               	movlb	3	; select bank3
 15278  0968  00A9               	movwf	(_i2c_status^(0+384)+9)
 15279  0969                     i1l5536:	
 15280                           
 15281                           ;mcc_generated_files/drivers/i2c_master.c: 432:     i2c_status.state = fsmStateTable[i2c
      +                          _status.state]();
 15282  0969  0023               	movlb	3	; select bank3
 15283  096A  0829               	movf	(_i2c_status^(0+384)+9),w
 15284  096B  00F9               	movwf	??_i2c_ISR
 15285  096C  01FA               	clrf	??_i2c_ISR+1
 15286  096D  35F9               	lslf	??_i2c_ISR,f
 15287  096E  0DFA               	rlf	??_i2c_ISR+1,f
 15288  096F  3000               	movlw	low (_fsmStateTable| (0+32768))
 15289  0970  0779               	addwf	??_i2c_ISR,w
 15290  0971  0084               	movwf	4
 15291  0972  3090               	movlw	high (_fsmStateTable| (0+32768))
 15292  0973  3D7A               	addwfc	??_i2c_ISR+1,w
 15293  0974  0085               	movwf	5
 15294  0975  3F01               	moviw [1]fsr0
 15295  0976  008A               	movwf	10
 15296  0977  3F00               	moviw [0]fsr0
 15297  0978  000A               	callw
 15298  0979  3189               	pagesel	$
 15299  097A  00FB               	movwf	??_i2c_ISR+2
 15300  097B  087B               	movf	??_i2c_ISR+2,w
 15301  097C  0023               	movlb	3	; select bank3
 15302  097D  00A9               	movwf	(_i2c_status^(0+384)+9)
 15303  097E  0008               	return
 15304  097F                     __end_of_i2c_ISR:	
 15305                           
 15306                           	psect	text80
 15307  1603                     __ptext80:	
 15308 ;; *************** function _mssp1_clearIRQ *****************
 15309 ;; Defined at:
 15310 ;;		line 53 in file "mcc_generated_files/i2c1_driver.c"
 15311 ;; Parameters:    Size  Location     Type
 15312 ;;		None
 15313 ;; Auto vars:     Size  Location     Type
 15314 ;;		None
 15315 ;; Return value:  Size  Location     Type
 15316 ;;                  1    wreg      void 
 15317 ;; Registers used:
 15318 ;;		None
 15319 ;; Tracked objects:
 15320 ;;		On entry : 0/0
 15321 ;;		On exit  : 0/0
 15322 ;;		Unchanged: 0/0
 15323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15324 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15325 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15326 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15327 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15328 ;;Total ram usage:        0 bytes
 15329 ;; Hardware stack levels used:    1
 15330 ;; This function calls:
 15331 ;;		Nothing
 15332 ;; This function is called by:
 15333 ;;		_i2c_ISR
 15334 ;;		_i2c_open
 15335 ;;		_i2c_close
 15336 ;; This function uses a non-reentrant model
 15337 ;;
 15338                           
 15339                           
 15340                           ;psect for function _mssp1_clearIRQ
 15341  1603                     _mssp1_clearIRQ:	
 15342                           
 15343                           ;mcc_generated_files/i2c1_driver.c: 55:         SSP1STAT = 0x00;
 15344                           
 15345                           ;incstack = 0
 15346                           ; Regs used in _mssp1_clearIRQ: []
 15347  1603  0020               	movlb	0	; select bank0
 15348  1604  1191               	bcf	17,3	;volatile
 15349  1605  0008               	return
 15350  1606                     __end_of_mssp1_clearIRQ:	
 15351                           
 15352                           	psect	text81
 15353  0C81                     __ptext81:	
 15354 ;; *************** function _do_I2C_RX *****************
 15355 ;; Defined at:
 15356 ;;		line 357 in file "mcc_generated_files/drivers/i2c_master.c"
 15357 ;; Parameters:    Size  Location     Type
 15358 ;;		None
 15359 ;; Auto vars:     Size  Location     Type
 15360 ;;		None
 15361 ;; Return value:  Size  Location     Type
 15362 ;;                  1    wreg      enum E7120
 15363 ;; Registers used:
 15364 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15365 ;; Tracked objects:
 15366 ;;		On entry : 0/0
 15367 ;;		On exit  : 0/0
 15368 ;;		Unchanged: 0/0
 15369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15370 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15371 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15372 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15373 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15374 ;;Total ram usage:        3 bytes
 15375 ;; Hardware stack levels used:    1
 15376 ;; Hardware stack levels required when called:    2
 15377 ;; This function calls:
 15378 ;;		_do_I2C_DO_NACK_RESTART
 15379 ;;		_do_I2C_DO_NACK_STOP
 15380 ;;		_i2c1_driver_sendACK
 15381 ;;		_returnReset
 15382 ;;		_returnStop
 15383 ;;		i1_i2c1_driver_getRXData
 15384 ;; This function is called by:
 15385 ;;		_i2c_ISR
 15386 ;; This function uses a non-reentrant model
 15387 ;;
 15388                           
 15389                           
 15390                           ;psect for function _do_I2C_RX
 15391  0C81                     _do_I2C_RX:	
 15392                           
 15393                           ;mcc_generated_files/drivers/i2c_master.c: 359:     *i2c_status.data_ptr++ = i2c1_driver
      +                          _getRXData();
 15394                           
 15395                           ;incstack = 0
 15396                           ; Regs used in _do_I2C_RX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15397  0C81  3195  25FD  318C   	fcall	i1_i2c1_driver_getRXData
 15398  0C84  00F6               	movwf	??_do_I2C_RX
 15399  0C85  0023               	movlb	3	; select bank3
 15400  0C86  0822               	movf	(low ((_i2c_status| (0+256)+2)))^(0+128),w
 15401  0C87  0086               	movwf	6
 15402  0C88  0187               	clrf	7
 15403  0C89  0876               	movf	??_do_I2C_RX,w
 15404  0C8A  0081               	movwf	1
 15405  0C8B  3001               	movlw	1
 15406  0C8C  00F6               	movwf	??_do_I2C_RX
 15407  0C8D  0876               	movf	??_do_I2C_RX,w
 15408  0C8E  07A2               	addwf	(low ((_i2c_status| (0+256)+2)))^(0+128),f
 15409                           
 15410                           ;mcc_generated_files/drivers/i2c_master.c: 360:     if(--i2c_status.data_length)
 15411  0C8F  3001               	movlw	1
 15412  0C90  02A3               	subwf	(_i2c_status^(0+384)+3),f
 15413  0C91  3000               	movlw	0
 15414  0C92  3BA4               	subwfb	((_i2c_status+1)^(0+384)+3),f
 15415  0C93  0823               	movf	(_i2c_status^(0+384)+3),w
 15416  0C94  0424               	iorwf	((_i2c_status+1)^(0+384)+3),w
 15417  0C95  1903               	btfsc	3,2
 15418  0C96  2C9B               	goto	i1l173
 15419                           
 15420                           ;mcc_generated_files/drivers/i2c_master.c: 361:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 362:         i2c1_driver_sendACK();
 15421  0C97  3196  262B         	fcall	_i2c1_driver_sendACK
 15422                           
 15423                           ;mcc_generated_files/drivers/i2c_master.c: 363:         return I2C_RCEN;
 15424  0C99  3005               	movlw	5
 15425  0C9A  0008               	return
 15426  0C9B                     i1l173:	
 15427                           ;mcc_generated_files/drivers/i2c_master.c: 365:     else
 15428                           
 15429                           
 15430                           ;mcc_generated_files/drivers/i2c_master.c: 366:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 367:         i2c_status.bufferFree = 1;
 15431  0C9B  1520               	bsf	_i2c_status^(0+384),2
 15432                           
 15433                           ;mcc_generated_files/drivers/i2c_master.c: 368:         switch(i2c_status.callbackTable[
      +                          i2c_dataComplete](i2c_status.callbackPayload[i2c_dataComplete]))
 15434  0C9C  2CA3               	goto	i1l5010
 15435  0C9D                     i1l5000:	
 15436                           
 15437                           ;mcc_generated_files/drivers/i2c_master.c: 372:                 return do_I2C_DO_NACK_RE
      +                          START();
 15438  0C9D  3196  264B         	fcall	_do_I2C_DO_NACK_RESTART
 15439  0C9F  0008               	return
 15440  0CA0                     i1l5004:	
 15441                           
 15442                           ;mcc_generated_files/drivers/i2c_master.c: 376:                 return do_I2C_DO_NACK_ST
      +                          OP();
 15443  0CA0  3196  2647         	fcall	_do_I2C_DO_NACK_STOP
 15444  0CA2  0008               	return
 15445  0CA3                     i1l5010:	
 15446  0CA3  0837               	movf	(low ((_i2c_status| (0+256)+23)))^(0+128),w
 15447  0CA4  00F6               	movwf	??_do_I2C_RX
 15448  0CA5  0876               	movf	??_do_I2C_RX,w
 15449  0CA6  00F6               	movwf	returnReset@p
 15450  0CA7  300B               	movlw	11
 15451  0CA8  3EA0               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 15452  0CA9  0086               	movwf	6
 15453  0CAA  3001               	movlw	1	; select bank3/4
 15454  0CAB  0087               	movwf	7
 15455  0CAC  3F41               	moviw [1]fsr1
 15456  0CAD  008A               	movwf	10
 15457  0CAE  3F40               	moviw [0]fsr1
 15458  0CAF  000A               	callw
 15459  0CB0  318C               	pagesel	$
 15460  0CB1  00F7               	movwf	??_do_I2C_RX+1
 15461  0CB2  01F8               	clrf	??_do_I2C_RX+2
 15462                           
 15463                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15464                           ; Switch size 1, requested type "simple"
 15465                           ; Number of cases is 1, Range of values is 0 to 0
 15466                           ; switch strategies available:
 15467                           ; Name         Instructions Cycles
 15468                           ; simple_byte            4     3 (average)
 15469                           ; direct_byte            8     6 (fixed)
 15470                           ; jumptable            260     6 (fixed)
 15471                           ;	Chosen strategy is simple_byte
 15472  0CB3  0878               	movf	??_do_I2C_RX+2,w
 15473  0CB4  3A00               	xorlw	0	; case 0
 15474  0CB5  1903               	skipnz
 15475  0CB6  2CB8               	goto	i1l7944
 15476  0CB7  2CA0               	goto	i1l5004
 15477  0CB8                     i1l7944:	
 15478                           
 15479                           ; Switch size 1, requested type "simple"
 15480                           ; Number of cases is 4, Range of values is 1 to 4
 15481                           ; switch strategies available:
 15482                           ; Name         Instructions Cycles
 15483                           ; simple_byte           13     7 (average)
 15484                           ; direct_byte           17     9 (fixed)
 15485                           ; jumptable            263     9 (fixed)
 15486                           ;	Chosen strategy is simple_byte
 15487  0CB8  0877               	movf	??_do_I2C_RX+1,w
 15488  0CB9  3A01               	xorlw	1	; case 1
 15489  0CBA  1903               	skipnz
 15490  0CBB  2CA0               	goto	i1l5004
 15491  0CBC  3A03               	xorlw	3	; case 2
 15492  0CBD  1903               	skipnz
 15493  0CBE  2C9D               	goto	i1l5000
 15494  0CBF  3A01               	xorlw	1	; case 3
 15495  0CC0  1903               	skipnz
 15496  0CC1  2C9D               	goto	i1l5000
 15497  0CC2  3A07               	xorlw	7	; case 4
 15498  0CC3  1903               	skipnz
 15499  0CC4  2CA0               	goto	i1l5004
 15500  0CC5  2CA0               	goto	i1l5004
 15501  0CC6  0008               	return
 15502  0CC7                     __end_of_do_I2C_RX:	
 15503                           
 15504                           	psect	text82
 15505  0D5B                     __ptext82:	
 15506 ;; *************** function _do_I2C_TX *****************
 15507 ;; Defined at:
 15508 ;;		line 333 in file "mcc_generated_files/drivers/i2c_master.c"
 15509 ;; Parameters:    Size  Location     Type
 15510 ;;		None
 15511 ;; Auto vars:     Size  Location     Type
 15512 ;;		None
 15513 ;; Return value:  Size  Location     Type
 15514 ;;                  1    wreg      enum E7120
 15515 ;; Registers used:
 15516 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15517 ;; Tracked objects:
 15518 ;;		On entry : 0/0
 15519 ;;		On exit  : 0/0
 15520 ;;		Unchanged: 0/0
 15521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15522 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15523 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15524 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15525 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15526 ;;Total ram usage:        3 bytes
 15527 ;; Hardware stack levels used:    1
 15528 ;; Hardware stack levels required when called:    2
 15529 ;; This function calls:
 15530 ;;		_do_I2C_SEND_RESTART_READ
 15531 ;;		_do_I2C_SEND_RESTART_WRITE
 15532 ;;		_do_I2C_SEND_STOP
 15533 ;;		_i2c1_driver_isNACK
 15534 ;;		_returnReset
 15535 ;;		_returnStop
 15536 ;;		i1_i2c1_driver_TXData
 15537 ;; This function is called by:
 15538 ;;		_i2c_ISR
 15539 ;; This function uses a non-reentrant model
 15540 ;;
 15541                           
 15542                           
 15543                           ;psect for function _do_I2C_TX
 15544  0D5B                     _do_I2C_TX:	
 15545                           
 15546                           ;mcc_generated_files/drivers/i2c_master.c: 335:     if(i2c1_driver_isNACK())
 15547                           
 15548                           ;incstack = 0
 15549                           ; Regs used in _do_I2C_TX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15550  0D5B  3196  26A1  318D   	fcall	_i2c1_driver_isNACK
 15551  0D5E  1803               	btfsc	3,0
 15552  0D5F  2D6A               	goto	i1l4970
 15553  0D60  2D8E               	goto	i1l157
 15554  0D61                     i1l4956:	
 15555                           
 15556                           ;mcc_generated_files/drivers/i2c_master.c: 340:                 return do_I2C_SEND_RESTA
      +                          RT_READ();
 15557  0D61  3196  2633         	fcall	_do_I2C_SEND_RESTART_READ
 15558  0D63  0008               	return
 15559  0D64                     i1l4960:	
 15560                           
 15561                           ;mcc_generated_files/drivers/i2c_master.c: 342:                 return do_I2C_SEND_RESTA
      +                          RT_WRITE();
 15562  0D64  3196  2637         	fcall	_do_I2C_SEND_RESTART_WRITE
 15563  0D66  0008               	return
 15564  0D67                     i1l4964:	
 15565                           
 15566                           ;mcc_generated_files/drivers/i2c_master.c: 346:                 return do_I2C_SEND_STOP(
      +                          );
 15567  0D67  3196  263F         	fcall	_do_I2C_SEND_STOP
 15568  0D69  0008               	return
 15569  0D6A                     i1l4970:	
 15570  0D6A  0023               	movlb	3	; select bank3
 15571  0D6B  083A               	movf	(low ((_i2c_status| (0+256)+26)))^(0+128),w
 15572  0D6C  00F6               	movwf	??_do_I2C_TX
 15573  0D6D  0876               	movf	??_do_I2C_TX,w
 15574  0D6E  00F6               	movwf	returnReset@p
 15575  0D6F  3011               	movlw	17
 15576  0D70  3EA0               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 15577  0D71  0086               	movwf	6
 15578  0D72  3001               	movlw	1	; select bank3/4
 15579  0D73  0087               	movwf	7
 15580  0D74  3F41               	moviw [1]fsr1
 15581  0D75  008A               	movwf	10
 15582  0D76  3F40               	moviw [0]fsr1
 15583  0D77  000A               	callw
 15584  0D78  318D               	pagesel	$
 15585  0D79  00F7               	movwf	??_do_I2C_TX+1
 15586  0D7A  01F8               	clrf	??_do_I2C_TX+2
 15587                           
 15588                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15589                           ; Switch size 1, requested type "simple"
 15590                           ; Number of cases is 1, Range of values is 0 to 0
 15591                           ; switch strategies available:
 15592                           ; Name         Instructions Cycles
 15593                           ; simple_byte            4     3 (average)
 15594                           ; direct_byte            8     6 (fixed)
 15595                           ; jumptable            260     6 (fixed)
 15596                           ;	Chosen strategy is simple_byte
 15597  0D7B  0878               	movf	??_do_I2C_TX+2,w
 15598  0D7C  3A00               	xorlw	0	; case 0
 15599  0D7D  1903               	skipnz
 15600  0D7E  2D80               	goto	i1l7946
 15601  0D7F  2D67               	goto	i1l4964
 15602  0D80                     i1l7946:	
 15603                           
 15604                           ; Switch size 1, requested type "simple"
 15605                           ; Number of cases is 4, Range of values is 1 to 4
 15606                           ; switch strategies available:
 15607                           ; Name         Instructions Cycles
 15608                           ; simple_byte           13     7 (average)
 15609                           ; direct_byte           17     9 (fixed)
 15610                           ; jumptable            263     9 (fixed)
 15611                           ;	Chosen strategy is simple_byte
 15612  0D80  0877               	movf	??_do_I2C_TX+1,w
 15613  0D81  3A01               	xorlw	1	; case 1
 15614  0D82  1903               	skipnz
 15615  0D83  2D67               	goto	i1l4964
 15616  0D84  3A03               	xorlw	3	; case 2
 15617  0D85  1903               	skipnz
 15618  0D86  2D61               	goto	i1l4956
 15619  0D87  3A01               	xorlw	1	; case 3
 15620  0D88  1903               	skipnz
 15621  0D89  2D64               	goto	i1l4960
 15622  0D8A  3A07               	xorlw	7	; case 4
 15623  0D8B  1903               	skipnz
 15624  0D8C  2D67               	goto	i1l4964
 15625  0D8D  2D67               	goto	i1l4964
 15626  0D8E                     i1l157:	
 15627                           ;mcc_generated_files/drivers/i2c_master.c: 349:     else
 15628                           
 15629                           
 15630                           ;mcc_generated_files/drivers/i2c_master.c: 350:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 351:         i2c_status.addressNACKCheck = 0;
 15631  0D8E  0023               	movlb	3	; select bank3
 15632  0D8F  11A0               	bcf	_i2c_status^(0+384),3
 15633                           
 15634                           ;mcc_generated_files/drivers/i2c_master.c: 352:         i2c1_driver_TXData(*i2c_status.d
      +                          ata_ptr++);
 15635  0D90  3002               	movlw	2
 15636  0D91  3EA0               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 15637  0D92  0086               	movwf	6
 15638  0D93  3001               	movlw	1	; select bank3/4
 15639  0D94  0087               	movwf	7
 15640  0D95  3F40               	moviw [0]fsr1
 15641  0D96  0084               	movwf	4
 15642  0D97  0185               	clrf	5
 15643  0D98  0A81               	incf	1,f
 15644  0D99  0800               	movf	0,w
 15645  0D9A  3196  2657  318D   	fcall	i1_i2c1_driver_TXData
 15646                           
 15647                           ;mcc_generated_files/drivers/i2c_master.c: 353:         return (--i2c_status.data_length
      +                          )?I2C_TX:I2C_TX_EMPTY;
 15648  0D9D  3001               	movlw	1
 15649  0D9E  0023               	movlb	3	; select bank3
 15650  0D9F  02A3               	subwf	(_i2c_status^(0+384)+3),f
 15651  0DA0  3000               	movlw	0
 15652  0DA1  3BA4               	subwfb	((_i2c_status+1)^(0+384)+3),f
 15653  0DA2  0823               	movf	(_i2c_status^(0+384)+3),w
 15654  0DA3  0424               	iorwf	((_i2c_status+1)^(0+384)+3),w
 15655  0DA4  1D03               	btfss	3,2
 15656  0DA5  2DA8               	goto	i1l4978
 15657  0DA6  3006               	movlw	6
 15658  0DA7  0008               	return
 15659  0DA8                     i1l4978:	
 15660  0DA8  3003               	movlw	3
 15661  0DA9  0008               	return
 15662  0DAA                     __end_of_do_I2C_TX:	
 15663                           
 15664                           	psect	text83
 15665  0A6D                     __ptext83:	
 15666 ;; *************** function _do_I2C_DO_ADDRESS_NACK *****************
 15667 ;; Defined at:
 15668 ;;		line 319 in file "mcc_generated_files/drivers/i2c_master.c"
 15669 ;; Parameters:    Size  Location     Type
 15670 ;;		None
 15671 ;; Auto vars:     Size  Location     Type
 15672 ;;		None
 15673 ;; Return value:  Size  Location     Type
 15674 ;;                  1    wreg      enum E7120
 15675 ;; Registers used:
 15676 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15677 ;; Tracked objects:
 15678 ;;		On entry : 0/0
 15679 ;;		On exit  : 0/0
 15680 ;;		Unchanged: 0/0
 15681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15683 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15684 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15685 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15686 ;;Total ram usage:        3 bytes
 15687 ;; Hardware stack levels used:    1
 15688 ;; Hardware stack levels required when called:    2
 15689 ;; This function calls:
 15690 ;;		_do_I2C_SEND_RESTART
 15691 ;;		_do_I2C_SEND_STOP
 15692 ;;		_returnReset
 15693 ;;		_returnStop
 15694 ;; This function is called by:
 15695 ;;		_i2c_ISR
 15696 ;; This function uses a non-reentrant model
 15697 ;;
 15698                           
 15699                           
 15700                           ;psect for function _do_I2C_DO_ADDRESS_NACK
 15701  0A6D                     _do_I2C_DO_ADDRESS_NACK:	
 15702                           
 15703                           ;mcc_generated_files/drivers/i2c_master.c: 321:     i2c_status.addressNACKCheck = 0;
 15704                           
 15705                           ;incstack = 0
 15706                           ; Regs used in _do_I2C_DO_ADDRESS_NACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15707  0A6D  0023               	movlb	3	; select bank3
 15708  0A6E  11A0               	bcf	_i2c_status^(0+384),3
 15709                           
 15710                           ;mcc_generated_files/drivers/i2c_master.c: 322:     i2c_status.error = I2C_FAIL;
 15711  0A6F  3002               	movlw	2
 15712  0A70  00F6               	movwf	??_do_I2C_DO_ADDRESS_NACK
 15713  0A71  0876               	movf	??_do_I2C_DO_ADDRESS_NACK,w
 15714  0A72  00AA               	movwf	(_i2c_status^(0+384)+10)
 15715                           
 15716                           ;mcc_generated_files/drivers/i2c_master.c: 323:     switch(i2c_status.callbackTable[i2c_
      +                          addressNACK](i2c_status.callbackPayload[i2c_addressNACK]))
 15717  0A73  2A7A               	goto	i1l4944
 15718  0A74                     i1l4934:	
 15719                           
 15720                           ;mcc_generated_files/drivers/i2c_master.c: 327:             return do_I2C_SEND_RESTART()
      +                          ;
 15721  0A74  3196  263B         	fcall	_do_I2C_SEND_RESTART
 15722  0A76  0008               	return
 15723  0A77                     i1l4938:	
 15724                           
 15725                           ;mcc_generated_files/drivers/i2c_master.c: 329:             return do_I2C_SEND_STOP();
 15726  0A77  3196  263F         	fcall	_do_I2C_SEND_STOP
 15727  0A79  0008               	return
 15728  0A7A                     i1l4944:	
 15729  0A7A  0839               	movf	(low ((_i2c_status| (0+256)+25)))^(0+128),w
 15730  0A7B  00F6               	movwf	??_do_I2C_DO_ADDRESS_NACK
 15731  0A7C  0876               	movf	??_do_I2C_DO_ADDRESS_NACK,w
 15732  0A7D  00F6               	movwf	returnReset@p
 15733  0A7E  300F               	movlw	15
 15734  0A7F  3EA0               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 15735  0A80  0086               	movwf	6
 15736  0A81  3001               	movlw	1	; select bank3/4
 15737  0A82  0087               	movwf	7
 15738  0A83  3F41               	moviw [1]fsr1
 15739  0A84  008A               	movwf	10
 15740  0A85  3F40               	moviw [0]fsr1
 15741  0A86  000A               	callw
 15742  0A87  318A               	pagesel	$
 15743  0A88  00F7               	movwf	??_do_I2C_DO_ADDRESS_NACK+1
 15744  0A89  01F8               	clrf	??_do_I2C_DO_ADDRESS_NACK+2
 15745                           
 15746                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15747                           ; Switch size 1, requested type "simple"
 15748                           ; Number of cases is 1, Range of values is 0 to 0
 15749                           ; switch strategies available:
 15750                           ; Name         Instructions Cycles
 15751                           ; simple_byte            4     3 (average)
 15752                           ; direct_byte            8     6 (fixed)
 15753                           ; jumptable            260     6 (fixed)
 15754                           ;	Chosen strategy is simple_byte
 15755  0A8A  0878               	movf	??_do_I2C_DO_ADDRESS_NACK+2,w
 15756  0A8B  3A00               	xorlw	0	; case 0
 15757  0A8C  1903               	skipnz
 15758  0A8D  2A8F               	goto	i1l7948
 15759  0A8E  2A77               	goto	i1l4938
 15760  0A8F                     i1l7948:	
 15761                           
 15762                           ; Switch size 1, requested type "simple"
 15763                           ; Number of cases is 2, Range of values is 2 to 3
 15764                           ; switch strategies available:
 15765                           ; Name         Instructions Cycles
 15766                           ; simple_byte            7     4 (average)
 15767                           ; direct_byte           13     9 (fixed)
 15768                           ; jumptable            263     9 (fixed)
 15769                           ;	Chosen strategy is simple_byte
 15770  0A8F  0877               	movf	??_do_I2C_DO_ADDRESS_NACK+1,w
 15771  0A90  3A02               	xorlw	2	; case 2
 15772  0A91  1903               	skipnz
 15773  0A92  2A74               	goto	i1l4934
 15774  0A93  3A01               	xorlw	1	; case 3
 15775  0A94  1903               	skipnz
 15776  0A95  2A74               	goto	i1l4934
 15777  0A96  2A77               	goto	i1l4938
 15778  0A97  0008               	return
 15779  0A98                     __end_of_do_I2C_DO_ADDRESS_NACK:	
 15780                           
 15781                           	psect	text84
 15782  164B                     __ptext84:	
 15783 ;; *************** function _do_I2C_DO_NACK_RESTART *****************
 15784 ;; Defined at:
 15785 ;;		line 311 in file "mcc_generated_files/drivers/i2c_master.c"
 15786 ;; Parameters:    Size  Location     Type
 15787 ;;		None
 15788 ;; Auto vars:     Size  Location     Type
 15789 ;;		None
 15790 ;; Return value:  Size  Location     Type
 15791 ;;                  1    wreg      enum E7120
 15792 ;; Registers used:
 15793 ;;		wreg, status,2, status,0, pclath, cstack
 15794 ;; Tracked objects:
 15795 ;;		On entry : 0/0
 15796 ;;		On exit  : 0/0
 15797 ;;		Unchanged: 0/0
 15798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15799 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15800 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15801 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15802 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15803 ;;Total ram usage:        0 bytes
 15804 ;; Hardware stack levels used:    1
 15805 ;; Hardware stack levels required when called:    1
 15806 ;; This function calls:
 15807 ;;		i1_i2c1_driver_sendNACK
 15808 ;; This function is called by:
 15809 ;;		_do_I2C_RX
 15810 ;;		_i2c_ISR
 15811 ;; This function uses a non-reentrant model
 15812 ;;
 15813                           
 15814                           
 15815                           ;psect for function _do_I2C_DO_NACK_RESTART
 15816  164B                     _do_I2C_DO_NACK_RESTART:	
 15817                           
 15818                           ;mcc_generated_files/drivers/i2c_master.c: 313:     i2c1_driver_sendNACK();
 15819                           
 15820                           ;incstack = 0
 15821                           ; Regs used in _do_I2C_DO_NACK_RESTART: [wreg+status,2+status,0+pclath+cstack]
 15822  164B  3196  262F         	fcall	i1_i2c1_driver_sendNACK
 15823                           
 15824                           ;mcc_generated_files/drivers/i2c_master.c: 314:     return I2C_SEND_RESTART;
 15825  164D  3009               	movlw	9
 15826  164E  0008               	return
 15827  164F                     __end_of_do_I2C_DO_NACK_RESTART:	
 15828                           
 15829                           	psect	text85
 15830  1647                     __ptext85:	
 15831 ;; *************** function _do_I2C_DO_NACK_STOP *****************
 15832 ;; Defined at:
 15833 ;;		line 305 in file "mcc_generated_files/drivers/i2c_master.c"
 15834 ;; Parameters:    Size  Location     Type
 15835 ;;		None
 15836 ;; Auto vars:     Size  Location     Type
 15837 ;;		None
 15838 ;; Return value:  Size  Location     Type
 15839 ;;                  1    wreg      enum E7120
 15840 ;; Registers used:
 15841 ;;		wreg, status,2, status,0, pclath, cstack
 15842 ;; Tracked objects:
 15843 ;;		On entry : 0/0
 15844 ;;		On exit  : 0/0
 15845 ;;		Unchanged: 0/0
 15846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15847 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15848 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15849 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15850 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15851 ;;Total ram usage:        0 bytes
 15852 ;; Hardware stack levels used:    1
 15853 ;; Hardware stack levels required when called:    1
 15854 ;; This function calls:
 15855 ;;		i1_i2c1_driver_sendNACK
 15856 ;; This function is called by:
 15857 ;;		_do_I2C_RX
 15858 ;;		_i2c_ISR
 15859 ;; This function uses a non-reentrant model
 15860 ;;
 15861                           
 15862                           
 15863                           ;psect for function _do_I2C_DO_NACK_STOP
 15864  1647                     _do_I2C_DO_NACK_STOP:	
 15865                           
 15866                           ;mcc_generated_files/drivers/i2c_master.c: 307:     i2c1_driver_sendNACK();
 15867                           
 15868                           ;incstack = 0
 15869                           ; Regs used in _do_I2C_DO_NACK_STOP: [wreg+status,2+status,0+pclath+cstack]
 15870  1647  3196  262F         	fcall	i1_i2c1_driver_sendNACK
 15871                           
 15872                           ;mcc_generated_files/drivers/i2c_master.c: 308:     return I2C_SEND_STOP;
 15873  1649  300A               	movlw	10
 15874  164A  0008               	return
 15875  164B                     __end_of_do_I2C_DO_NACK_STOP:	
 15876                           
 15877                           	psect	text86
 15878  1643                     __ptext86:	
 15879 ;; *************** function _do_I2C_DO_ACK *****************
 15880 ;; Defined at:
 15881 ;;		line 299 in file "mcc_generated_files/drivers/i2c_master.c"
 15882 ;; Parameters:    Size  Location     Type
 15883 ;;		None
 15884 ;; Auto vars:     Size  Location     Type
 15885 ;;		None
 15886 ;; Return value:  Size  Location     Type
 15887 ;;                  1    wreg      enum E7120
 15888 ;; Registers used:
 15889 ;;		wreg, status,2, status,0, pclath, cstack
 15890 ;; Tracked objects:
 15891 ;;		On entry : 0/0
 15892 ;;		On exit  : 0/0
 15893 ;;		Unchanged: 0/0
 15894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15895 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15896 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15897 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15898 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15899 ;;Total ram usage:        0 bytes
 15900 ;; Hardware stack levels used:    1
 15901 ;; Hardware stack levels required when called:    1
 15902 ;; This function calls:
 15903 ;;		_i2c1_driver_sendACK
 15904 ;; This function is called by:
 15905 ;;		_i2c_ISR
 15906 ;; This function uses a non-reentrant model
 15907 ;;
 15908                           
 15909                           
 15910                           ;psect for function _do_I2C_DO_ACK
 15911  1643                     _do_I2C_DO_ACK:	
 15912                           
 15913                           ;mcc_generated_files/drivers/i2c_master.c: 301:     i2c1_driver_sendACK();
 15914                           
 15915                           ;incstack = 0
 15916                           ; Regs used in _do_I2C_DO_ACK: [wreg+status,2+status,0+pclath+cstack]
 15917  1643  3196  262B         	fcall	_i2c1_driver_sendACK
 15918                           
 15919                           ;mcc_generated_files/drivers/i2c_master.c: 302:     return I2C_RCEN;
 15920  1645  3005               	movlw	5
 15921  1646  0008               	return
 15922  1647                     __end_of_do_I2C_DO_ACK:	
 15923                           
 15924                           	psect	text87
 15925  1667                     __ptext87:	
 15926 ;; *************** function _do_I2C_RCEN *****************
 15927 ;; Defined at:
 15928 ;;		line 292 in file "mcc_generated_files/drivers/i2c_master.c"
 15929 ;; Parameters:    Size  Location     Type
 15930 ;;		None
 15931 ;; Auto vars:     Size  Location     Type
 15932 ;;		None
 15933 ;; Return value:  Size  Location     Type
 15934 ;;                  1    wreg      enum E7120
 15935 ;; Registers used:
 15936 ;;		wreg, status,2, status,0, pclath, cstack
 15937 ;; Tracked objects:
 15938 ;;		On entry : 0/0
 15939 ;;		On exit  : 0/0
 15940 ;;		Unchanged: 0/0
 15941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15943 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15944 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15945 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15946 ;;Total ram usage:        0 bytes
 15947 ;; Hardware stack levels used:    1
 15948 ;; Hardware stack levels required when called:    1
 15949 ;; This function calls:
 15950 ;;		i1_i2c1_driver_startRX
 15951 ;; This function is called by:
 15952 ;;		_i2c_ISR
 15953 ;; This function uses a non-reentrant model
 15954 ;;
 15955                           
 15956                           
 15957                           ;psect for function _do_I2C_RCEN
 15958  1667                     _do_I2C_RCEN:	
 15959                           
 15960                           ;mcc_generated_files/drivers/i2c_master.c: 294:     i2c_status.addressNACKCheck = 0;
 15961                           
 15962                           ;incstack = 0
 15963                           ; Regs used in _do_I2C_RCEN: [wreg+status,2+status,0+pclath+cstack]
 15964  1667  0023               	movlb	3	; select bank3
 15965  1668  11A0               	bcf	_i2c_status^(0+384),3
 15966                           
 15967                           ;mcc_generated_files/drivers/i2c_master.c: 295:     i2c1_driver_startRX();
 15968  1669  3195  25FA         	fcall	i1_i2c1_driver_startRX
 15969                           
 15970                           ;mcc_generated_files/drivers/i2c_master.c: 296:     return I2C_RX;
 15971  166B  3004               	movlw	4
 15972  166C  0008               	return
 15973  166D                     __end_of_do_I2C_RCEN:	
 15974                           
 15975                           	psect	text88
 15976  168C                     __ptext88:	
 15977 ;; *************** function _do_I2C_SEND_ADR_WRITE *****************
 15978 ;; Defined at:
 15979 ;;		line 285 in file "mcc_generated_files/drivers/i2c_master.c"
 15980 ;; Parameters:    Size  Location     Type
 15981 ;;		None
 15982 ;; Auto vars:     Size  Location     Type
 15983 ;;		None
 15984 ;; Return value:  Size  Location     Type
 15985 ;;                  1    wreg      enum E7120
 15986 ;; Registers used:
 15987 ;;		wreg, status,2, status,0, pclath, cstack
 15988 ;; Tracked objects:
 15989 ;;		On entry : 0/0
 15990 ;;		On exit  : 0/0
 15991 ;;		Unchanged: 0/0
 15992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15993 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15994 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15995 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15996 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15997 ;;Total ram usage:        0 bytes
 15998 ;; Hardware stack levels used:    1
 15999 ;; Hardware stack levels required when called:    1
 16000 ;; This function calls:
 16001 ;;		i1_i2c1_driver_TXData
 16002 ;; This function is called by:
 16003 ;;		_i2c_ISR
 16004 ;; This function uses a non-reentrant model
 16005 ;;
 16006                           
 16007                           
 16008                           ;psect for function _do_I2C_SEND_ADR_WRITE
 16009  168C                     _do_I2C_SEND_ADR_WRITE:	
 16010                           
 16011                           ;mcc_generated_files/drivers/i2c_master.c: 287:     i2c_status.addressNACKCheck = 1;
 16012                           
 16013                           ;incstack = 0
 16014                           ; Regs used in _do_I2C_SEND_ADR_WRITE: [wreg+status,2+status,0+pclath+cstack]
 16015  168C  0023               	movlb	3	; select bank3
 16016  168D  15A0               	bsf	_i2c_status^(0+384),3
 16017                           
 16018                           ;mcc_generated_files/drivers/i2c_master.c: 288:     i2c1_driver_TXData(i2c_status.addres
      +                          s << 1);
 16019  168E  3521               	lslf	(_i2c_status^(0+384)+1),w
 16020  168F  3196  2657         	fcall	i1_i2c1_driver_TXData
 16021                           
 16022                           ;mcc_generated_files/drivers/i2c_master.c: 289:     return I2C_TX;
 16023  1691  3003               	movlw	3
 16024  1692  0008               	return
 16025  1693                     __end_of_do_I2C_SEND_ADR_WRITE:	
 16026                           
 16027                           	psect	text89
 16028  16A9                     __ptext89:	
 16029 ;; *************** function _do_I2C_SEND_ADR_READ *****************
 16030 ;; Defined at:
 16031 ;;		line 278 in file "mcc_generated_files/drivers/i2c_master.c"
 16032 ;; Parameters:    Size  Location     Type
 16033 ;;		None
 16034 ;; Auto vars:     Size  Location     Type
 16035 ;;		None
 16036 ;; Return value:  Size  Location     Type
 16037 ;;                  1    wreg      enum E7120
 16038 ;; Registers used:
 16039 ;;		wreg, status,2, status,0, pclath, cstack
 16040 ;; Tracked objects:
 16041 ;;		On entry : 0/0
 16042 ;;		On exit  : 0/0
 16043 ;;		Unchanged: 0/0
 16044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16045 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16046 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16047 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16048 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16049 ;;Total ram usage:        0 bytes
 16050 ;; Hardware stack levels used:    1
 16051 ;; Hardware stack levels required when called:    1
 16052 ;; This function calls:
 16053 ;;		i1_i2c1_driver_TXData
 16054 ;; This function is called by:
 16055 ;;		_i2c_ISR
 16056 ;; This function uses a non-reentrant model
 16057 ;;
 16058                           
 16059                           
 16060                           ;psect for function _do_I2C_SEND_ADR_READ
 16061  16A9                     _do_I2C_SEND_ADR_READ:	
 16062                           
 16063                           ;mcc_generated_files/drivers/i2c_master.c: 280:     i2c_status.addressNACKCheck = 1;
 16064                           
 16065                           ;incstack = 0
 16066                           ; Regs used in _do_I2C_SEND_ADR_READ: [wreg+status,2+status,0+pclath+cstack]
 16067  16A9  0023               	movlb	3	; select bank3
 16068  16AA  15A0               	bsf	_i2c_status^(0+384),3
 16069                           
 16070                           ;mcc_generated_files/drivers/i2c_master.c: 281:     i2c1_driver_TXData(i2c_status.addres
      +                          s << 1 | 1);
 16071  16AB  1403               	setc
 16072  16AC  0D21               	rlf	(_i2c_status^(0+384)+1),w
 16073  16AD  3196  2657         	fcall	i1_i2c1_driver_TXData
 16074                           
 16075                           ;mcc_generated_files/drivers/i2c_master.c: 282:     return I2C_RCEN;
 16076  16AF  3005               	movlw	5
 16077  16B0  0008               	return
 16078  16B1                     __end_of_do_I2C_SEND_ADR_READ:	
 16079                           
 16080                           	psect	text90
 16081  163F                     __ptext90:	
 16082 ;; *************** function _do_I2C_SEND_STOP *****************
 16083 ;; Defined at:
 16084 ;;		line 272 in file "mcc_generated_files/drivers/i2c_master.c"
 16085 ;; Parameters:    Size  Location     Type
 16086 ;;		None
 16087 ;; Auto vars:     Size  Location     Type
 16088 ;;		None
 16089 ;; Return value:  Size  Location     Type
 16090 ;;                  1    wreg      enum E7120
 16091 ;; Registers used:
 16092 ;;		wreg, status,2, status,0, pclath, cstack
 16093 ;; Tracked objects:
 16094 ;;		On entry : 0/0
 16095 ;;		On exit  : 0/0
 16096 ;;		Unchanged: 0/0
 16097 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16098 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16099 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16100 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16101 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16102 ;;Total ram usage:        0 bytes
 16103 ;; Hardware stack levels used:    1
 16104 ;; Hardware stack levels required when called:    1
 16105 ;; This function calls:
 16106 ;;		i1_i2c1_driver_stop
 16107 ;; This function is called by:
 16108 ;;		_do_I2C_DO_ADDRESS_NACK
 16109 ;;		_do_I2C_TX
 16110 ;;		_do_I2C_TX_EMPTY
 16111 ;;		_i2c_ISR
 16112 ;; This function uses a non-reentrant model
 16113 ;;
 16114                           
 16115                           
 16116                           ;psect for function _do_I2C_SEND_STOP
 16117  163F                     _do_I2C_SEND_STOP:	
 16118                           
 16119                           ;mcc_generated_files/drivers/i2c_master.c: 274:     i2c1_driver_stop();
 16120                           
 16121                           ;incstack = 0
 16122                           ; Regs used in _do_I2C_SEND_STOP: [wreg+status,2+status,0+pclath+cstack]
 16123  163F  3195  25F7         	fcall	i1_i2c1_driver_stop
 16124                           
 16125                           ;mcc_generated_files/drivers/i2c_master.c: 275:     return I2C_IDLE;
 16126  1641  3000               	movlw	0
 16127  1642  0008               	return
 16128  1643                     __end_of_do_I2C_SEND_STOP:	
 16129                           
 16130                           	psect	text91
 16131  163B                     __ptext91:	
 16132 ;; *************** function _do_I2C_SEND_RESTART *****************
 16133 ;; Defined at:
 16134 ;;		line 266 in file "mcc_generated_files/drivers/i2c_master.c"
 16135 ;; Parameters:    Size  Location     Type
 16136 ;;		None
 16137 ;; Auto vars:     Size  Location     Type
 16138 ;;		None
 16139 ;; Return value:  Size  Location     Type
 16140 ;;                  1    wreg      enum E7120
 16141 ;; Registers used:
 16142 ;;		wreg, status,2, status,0, pclath, cstack
 16143 ;; Tracked objects:
 16144 ;;		On entry : 0/0
 16145 ;;		On exit  : 0/0
 16146 ;;		Unchanged: 0/0
 16147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16148 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16149 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16150 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16151 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16152 ;;Total ram usage:        0 bytes
 16153 ;; Hardware stack levels used:    1
 16154 ;; Hardware stack levels required when called:    1
 16155 ;; This function calls:
 16156 ;;		i1_i2c1_driver_restart
 16157 ;; This function is called by:
 16158 ;;		_do_I2C_DO_ADDRESS_NACK
 16159 ;;		_do_I2C_TX_EMPTY
 16160 ;;		_i2c_ISR
 16161 ;; This function uses a non-reentrant model
 16162 ;;
 16163                           
 16164                           
 16165                           ;psect for function _do_I2C_SEND_RESTART
 16166  163B                     _do_I2C_SEND_RESTART:	
 16167                           
 16168                           ;mcc_generated_files/drivers/i2c_master.c: 268:     i2c1_driver_restart();
 16169                           
 16170                           ;incstack = 0
 16171                           ; Regs used in _do_I2C_SEND_RESTART: [wreg+status,2+status,0+pclath+cstack]
 16172  163B  3195  25F4         	fcall	i1_i2c1_driver_restart
 16173                           
 16174                           ;mcc_generated_files/drivers/i2c_master.c: 269:     return I2C_SEND_ADR_READ;
 16175  163D  3001               	movlw	1
 16176  163E  0008               	return
 16177  163F                     __end_of_do_I2C_SEND_RESTART:	
 16178                           
 16179                           	psect	text92
 16180  1637                     __ptext92:	
 16181 ;; *************** function _do_I2C_SEND_RESTART_WRITE *****************
 16182 ;; Defined at:
 16183 ;;		line 260 in file "mcc_generated_files/drivers/i2c_master.c"
 16184 ;; Parameters:    Size  Location     Type
 16185 ;;		None
 16186 ;; Auto vars:     Size  Location     Type
 16187 ;;		None
 16188 ;; Return value:  Size  Location     Type
 16189 ;;                  1    wreg      enum E7120
 16190 ;; Registers used:
 16191 ;;		wreg, status,2, status,0, pclath, cstack
 16192 ;; Tracked objects:
 16193 ;;		On entry : 0/0
 16194 ;;		On exit  : 0/0
 16195 ;;		Unchanged: 0/0
 16196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16197 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16198 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16199 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16200 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16201 ;;Total ram usage:        0 bytes
 16202 ;; Hardware stack levels used:    1
 16203 ;; Hardware stack levels required when called:    1
 16204 ;; This function calls:
 16205 ;;		i1_i2c1_driver_restart
 16206 ;; This function is called by:
 16207 ;;		_do_I2C_TX
 16208 ;;		_i2c_ISR
 16209 ;; This function uses a non-reentrant model
 16210 ;;
 16211                           
 16212                           
 16213                           ;psect for function _do_I2C_SEND_RESTART_WRITE
 16214  1637                     _do_I2C_SEND_RESTART_WRITE:	
 16215                           
 16216                           ;mcc_generated_files/drivers/i2c_master.c: 262:     i2c1_driver_restart();
 16217                           
 16218                           ;incstack = 0
 16219                           ; Regs used in _do_I2C_SEND_RESTART_WRITE: [wreg+status,2+status,0+pclath+cstack]
 16220  1637  3195  25F4         	fcall	i1_i2c1_driver_restart
 16221                           
 16222                           ;mcc_generated_files/drivers/i2c_master.c: 263:     return I2C_SEND_ADR_WRITE;
 16223  1639  3002               	movlw	2
 16224  163A  0008               	return
 16225  163B                     __end_of_do_I2C_SEND_RESTART_WRITE:	
 16226                           
 16227                           	psect	text93
 16228  1633                     __ptext93:	
 16229 ;; *************** function _do_I2C_SEND_RESTART_READ *****************
 16230 ;; Defined at:
 16231 ;;		line 254 in file "mcc_generated_files/drivers/i2c_master.c"
 16232 ;; Parameters:    Size  Location     Type
 16233 ;;		None
 16234 ;; Auto vars:     Size  Location     Type
 16235 ;;		None
 16236 ;; Return value:  Size  Location     Type
 16237 ;;                  1    wreg      enum E7120
 16238 ;; Registers used:
 16239 ;;		wreg, status,2, status,0, pclath, cstack
 16240 ;; Tracked objects:
 16241 ;;		On entry : 0/0
 16242 ;;		On exit  : 0/0
 16243 ;;		Unchanged: 0/0
 16244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16246 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16247 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16248 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16249 ;;Total ram usage:        0 bytes
 16250 ;; Hardware stack levels used:    1
 16251 ;; Hardware stack levels required when called:    1
 16252 ;; This function calls:
 16253 ;;		i1_i2c1_driver_restart
 16254 ;; This function is called by:
 16255 ;;		_do_I2C_TX
 16256 ;;		_i2c_ISR
 16257 ;; This function uses a non-reentrant model
 16258 ;;
 16259                           
 16260                           
 16261                           ;psect for function _do_I2C_SEND_RESTART_READ
 16262  1633                     _do_I2C_SEND_RESTART_READ:	
 16263                           
 16264                           ;mcc_generated_files/drivers/i2c_master.c: 256:     i2c1_driver_restart();
 16265                           
 16266                           ;incstack = 0
 16267                           ; Regs used in _do_I2C_SEND_RESTART_READ: [wreg+status,2+status,0+pclath+cstack]
 16268  1633  3195  25F4         	fcall	i1_i2c1_driver_restart
 16269                           
 16270                           ;mcc_generated_files/drivers/i2c_master.c: 257:     return I2C_SEND_ADR_READ;
 16271  1635  3001               	movlw	1
 16272  1636  0008               	return
 16273  1637                     __end_of_do_I2C_SEND_RESTART_READ:	
 16274                           
 16275                           	psect	text94
 16276  165C                     __ptext94:	
 16277 ;; *************** function _do_I2C_IDLE *****************
 16278 ;; Defined at:
 16279 ;;		line 247 in file "mcc_generated_files/drivers/i2c_master.c"
 16280 ;; Parameters:    Size  Location     Type
 16281 ;;		None
 16282 ;; Auto vars:     Size  Location     Type
 16283 ;;		None
 16284 ;; Return value:  Size  Location     Type
 16285 ;;                  1    wreg      enum E7120
 16286 ;; Registers used:
 16287 ;;		wreg, status,2
 16288 ;; Tracked objects:
 16289 ;;		On entry : 0/0
 16290 ;;		On exit  : 0/0
 16291 ;;		Unchanged: 0/0
 16292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16293 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16294 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16295 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16296 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16297 ;;Total ram usage:        0 bytes
 16298 ;; Hardware stack levels used:    1
 16299 ;; This function calls:
 16300 ;;		Nothing
 16301 ;; This function is called by:
 16302 ;;		_i2c_ISR
 16303 ;; This function uses a non-reentrant model
 16304 ;;
 16305                           
 16306                           
 16307                           ;psect for function _do_I2C_IDLE
 16308  165C                     _do_I2C_IDLE:	
 16309                           
 16310                           ;mcc_generated_files/drivers/i2c_master.c: 249:     i2c_status.busy = 0;
 16311                           
 16312                           ;incstack = 0
 16313                           ; Regs used in _do_I2C_IDLE: [wreg+status,2]
 16314  165C  0023               	movlb	3	; select bank3
 16315  165D  1020               	bcf	_i2c_status^(0+384),0
 16316                           
 16317                           ;mcc_generated_files/drivers/i2c_master.c: 250:     i2c_status.error = I2C_NOERR;
 16318  165E  01AA               	clrf	(_i2c_status^(0+384)+10)
 16319                           
 16320                           ;mcc_generated_files/drivers/i2c_master.c: 251:     return I2C_RESET;
 16321  165F  300E               	movlw	14
 16322  1660  0008               	return
 16323  1661                     __end_of_do_I2C_IDLE:	
 16324                           
 16325                           	psect	text95
 16326  1685                     __ptext95:	
 16327 ;; *************** function _do_I2C_RESET *****************
 16328 ;; Defined at:
 16329 ;;		line 239 in file "mcc_generated_files/drivers/i2c_master.c"
 16330 ;; Parameters:    Size  Location     Type
 16331 ;;		None
 16332 ;; Auto vars:     Size  Location     Type
 16333 ;;		None
 16334 ;; Return value:  Size  Location     Type
 16335 ;;                  1    wreg      enum E7120
 16336 ;; Registers used:
 16337 ;;		wreg, status,2, status,0, pclath, cstack
 16338 ;; Tracked objects:
 16339 ;;		On entry : 0/0
 16340 ;;		On exit  : 0/0
 16341 ;;		Unchanged: 0/0
 16342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16343 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16344 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16345 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16346 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16347 ;;Total ram usage:        0 bytes
 16348 ;; Hardware stack levels used:    1
 16349 ;; Hardware stack levels required when called:    1
 16350 ;; This function calls:
 16351 ;;		_i2c1_driver_resetBus
 16352 ;; This function is called by:
 16353 ;;		_i2c_ISR
 16354 ;; This function uses a non-reentrant model
 16355 ;;
 16356                           
 16357                           
 16358                           ;psect for function _do_I2C_RESET
 16359  1685                     _do_I2C_RESET:	
 16360                           
 16361                           ;mcc_generated_files/drivers/i2c_master.c: 241:     i2c1_driver_resetBus();
 16362                           
 16363                           ;incstack = 0
 16364                           ; Regs used in _do_I2C_RESET: [wreg+status,2+status,0+pclath+cstack]
 16365  1685  3188  2000         	fcall	_i2c1_driver_resetBus
 16366                           
 16367                           ;mcc_generated_files/drivers/i2c_master.c: 242:     i2c_status.busy = 0;
 16368  1687  0023               	movlb	3	; select bank3
 16369  1688  1020               	bcf	_i2c_status^(0+384),0
 16370                           
 16371                           ;mcc_generated_files/drivers/i2c_master.c: 243:     i2c_status.error = I2C_NOERR;
 16372  1689  01AA               	clrf	(_i2c_status^(0+384)+10)
 16373                           
 16374                           ;mcc_generated_files/drivers/i2c_master.c: 244:     return I2C_RESET;
 16375  168A  300E               	movlw	14
 16376  168B  0008               	return
 16377  168C                     __end_of_do_I2C_RESET:	
 16378                           
 16379                           	psect	text96
 16380  0AC3                     __ptext96:	
 16381 ;; *************** function _do_I2C_TX_EMPTY *****************
 16382 ;; Defined at:
 16383 ;;		line 382 in file "mcc_generated_files/drivers/i2c_master.c"
 16384 ;; Parameters:    Size  Location     Type
 16385 ;;		None
 16386 ;; Auto vars:     Size  Location     Type
 16387 ;;		None
 16388 ;; Return value:  Size  Location     Type
 16389 ;;                  1    wreg      enum E7120
 16390 ;; Registers used:
 16391 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16392 ;; Tracked objects:
 16393 ;;		On entry : 0/0
 16394 ;;		On exit  : 0/0
 16395 ;;		Unchanged: 0/0
 16396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16398 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16399 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16400 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16401 ;;Total ram usage:        3 bytes
 16402 ;; Hardware stack levels used:    1
 16403 ;; Hardware stack levels required when called:    2
 16404 ;; This function calls:
 16405 ;;		_do_I2C_SEND_RESTART
 16406 ;;		_do_I2C_SEND_STOP
 16407 ;;		_mssp1_setIRQ
 16408 ;;		_returnReset
 16409 ;;		_returnStop
 16410 ;; This function is called by:
 16411 ;;		_i2c_ISR
 16412 ;; This function uses a non-reentrant model
 16413 ;;
 16414                           
 16415                           
 16416                           ;psect for function _do_I2C_TX_EMPTY
 16417  0AC3                     _do_I2C_TX_EMPTY:	
 16418                           
 16419                           ;mcc_generated_files/drivers/i2c_master.c: 384:     i2c_status.bufferFree = 1;
 16420                           
 16421                           ;incstack = 0
 16422                           ; Regs used in _do_I2C_TX_EMPTY: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16423  0AC3  0023               	movlb	3	; select bank3
 16424  0AC4  1520               	bsf	_i2c_status^(0+384),2
 16425                           
 16426                           ;mcc_generated_files/drivers/i2c_master.c: 385:     switch(i2c_status.callbackTable[i2c_
      +                          dataComplete](i2c_status.callbackPayload[i2c_dataComplete]))
 16427  0AC5  2AD0               	goto	i1l5036
 16428  0AC6                     i1l5020:	
 16429                           
 16430                           ;mcc_generated_files/drivers/i2c_master.c: 389:             return do_I2C_SEND_RESTART()
      +                          ;
 16431  0AC6  3196  263B         	fcall	_do_I2C_SEND_RESTART
 16432  0AC8  0008               	return
 16433  0AC9                     i1l5024:	
 16434                           
 16435                           ;mcc_generated_files/drivers/i2c_master.c: 391:             mssp1_setIRQ();
 16436  0AC9  3196  2600         	fcall	_mssp1_setIRQ
 16437                           
 16438                           ;mcc_generated_files/drivers/i2c_master.c: 392:             return I2C_TX;
 16439  0ACB  3003               	movlw	3
 16440  0ACC  0008               	return
 16441  0ACD                     i1l5030:	
 16442                           
 16443                           ;mcc_generated_files/drivers/i2c_master.c: 395:             return do_I2C_SEND_STOP();
 16444  0ACD  3196  263F         	fcall	_do_I2C_SEND_STOP
 16445  0ACF  0008               	return
 16446  0AD0                     i1l5036:	
 16447  0AD0  0837               	movf	(low ((_i2c_status| (0+256)+23)))^(0+128),w
 16448  0AD1  00F6               	movwf	??_do_I2C_TX_EMPTY
 16449  0AD2  0876               	movf	??_do_I2C_TX_EMPTY,w
 16450  0AD3  00F6               	movwf	returnReset@p
 16451  0AD4  300B               	movlw	11
 16452  0AD5  3EA0               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 16453  0AD6  0086               	movwf	6
 16454  0AD7  3001               	movlw	1	; select bank3/4
 16455  0AD8  0087               	movwf	7
 16456  0AD9  3F41               	moviw [1]fsr1
 16457  0ADA  008A               	movwf	10
 16458  0ADB  3F40               	moviw [0]fsr1
 16459  0ADC  000A               	callw
 16460  0ADD  318A               	pagesel	$
 16461  0ADE  00F7               	movwf	??_do_I2C_TX_EMPTY+1
 16462  0ADF  01F8               	clrf	??_do_I2C_TX_EMPTY+2
 16463                           
 16464                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 16465                           ; Switch size 1, requested type "simple"
 16466                           ; Number of cases is 1, Range of values is 0 to 0
 16467                           ; switch strategies available:
 16468                           ; Name         Instructions Cycles
 16469                           ; simple_byte            4     3 (average)
 16470                           ; direct_byte            8     6 (fixed)
 16471                           ; jumptable            260     6 (fixed)
 16472                           ;	Chosen strategy is simple_byte
 16473  0AE0  0878               	movf	??_do_I2C_TX_EMPTY+2,w
 16474  0AE1  3A00               	xorlw	0	; case 0
 16475  0AE2  1903               	skipnz
 16476  0AE3  2AE5               	goto	i1l7950
 16477  0AE4  2ACD               	goto	i1l5030
 16478  0AE5                     i1l7950:	
 16479                           
 16480                           ; Switch size 1, requested type "simple"
 16481                           ; Number of cases is 4, Range of values is 1 to 4
 16482                           ; switch strategies available:
 16483                           ; Name         Instructions Cycles
 16484                           ; simple_byte           13     7 (average)
 16485                           ; direct_byte           17     9 (fixed)
 16486                           ; jumptable            263     9 (fixed)
 16487                           ;	Chosen strategy is simple_byte
 16488  0AE5  0877               	movf	??_do_I2C_TX_EMPTY+1,w
 16489  0AE6  3A01               	xorlw	1	; case 1
 16490  0AE7  1903               	skipnz
 16491  0AE8  2ACD               	goto	i1l5030
 16492  0AE9  3A03               	xorlw	3	; case 2
 16493  0AEA  1903               	skipnz
 16494  0AEB  2AC6               	goto	i1l5020
 16495  0AEC  3A01               	xorlw	1	; case 3
 16496  0AED  1903               	skipnz
 16497  0AEE  2AC6               	goto	i1l5020
 16498  0AEF  3A07               	xorlw	7	; case 4
 16499  0AF0  1903               	skipnz
 16500  0AF1  2AC9               	goto	i1l5024
 16501  0AF2  2ACD               	goto	i1l5030
 16502  0AF3  0008               	return
 16503  0AF4                     __end_of_do_I2C_TX_EMPTY:	
 16504                           
 16505                           	psect	text97
 16506  1600                     __ptext97:	
 16507 ;; *************** function _mssp1_setIRQ *****************
 16508 ;; Defined at:
 16509 ;;		line 58 in file "mcc_generated_files/i2c1_driver.c"
 16510 ;; Parameters:    Size  Location     Type
 16511 ;;		None
 16512 ;; Auto vars:     Size  Location     Type
 16513 ;;		None
 16514 ;; Return value:  Size  Location     Type
 16515 ;;                  1    wreg      void 
 16516 ;; Registers used:
 16517 ;;		None
 16518 ;; Tracked objects:
 16519 ;;		On entry : 0/0
 16520 ;;		On exit  : 0/0
 16521 ;;		Unchanged: 0/0
 16522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16523 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16524 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16525 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16526 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16527 ;;Total ram usage:        0 bytes
 16528 ;; Hardware stack levels used:    1
 16529 ;; This function calls:
 16530 ;;		Nothing
 16531 ;; This function is called by:
 16532 ;;		_do_I2C_TX_EMPTY
 16533 ;; This function uses a non-reentrant model
 16534 ;;
 16535                           
 16536                           
 16537                           ;psect for function _mssp1_setIRQ
 16538  1600                     _mssp1_setIRQ:	
 16539                           
 16540                           ;mcc_generated_files/i2c1_driver.c: 60:     }
 16541                           
 16542                           ;incstack = 0
 16543                           ; Regs used in _mssp1_setIRQ: []
 16544  1600  0020               	movlb	0	; select bank0
 16545  1601  1591               	bsf	17,3	;volatile
 16546  1602  0008               	return
 16547  1603                     __end_of_mssp1_setIRQ:	
 16548                           
 16549                           	psect	text98
 16550  16A1                     __ptext98:	
 16551 ;; *************** function _i2c1_driver_isNACK *****************
 16552 ;; Defined at:
 16553 ;;		line 161 in file "mcc_generated_files/i2c1_driver.c"
 16554 ;; Parameters:    Size  Location     Type
 16555 ;;		None
 16556 ;; Auto vars:     Size  Location     Type
 16557 ;;		None
 16558 ;; Return value:  Size  Location     Type
 16559 ;;		None               void
 16560 ;; Registers used:
 16561 ;;		wreg, status,2, status,0
 16562 ;; Tracked objects:
 16563 ;;		On entry : 0/0
 16564 ;;		On exit  : 0/0
 16565 ;;		Unchanged: 0/0
 16566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16567 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16568 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16569 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16570 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16571 ;;Total ram usage:        1 bytes
 16572 ;; Hardware stack levels used:    1
 16573 ;; This function calls:
 16574 ;;		Nothing
 16575 ;; This function is called by:
 16576 ;;		_do_I2C_TX
 16577 ;;		_i2c_ISR
 16578 ;; This function uses a non-reentrant model
 16579 ;;
 16580                           
 16581                           
 16582                           ;psect for function _i2c1_driver_isNACK
 16583  16A1                     _i2c1_driver_isNACK:	
 16584                           
 16585                           ;mcc_generated_files/i2c1_driver.c: 163:     return SSP1CON2bits.ACKSTAT;
 16586                           
 16587                           ;incstack = 0
 16588                           ; Regs used in _i2c1_driver_isNACK: [wreg+status,2+status,0]
 16589  16A1  0024               	movlb	4	; select bank4
 16590  16A2  0E16               	swapf	22,w	;volatile
 16591  16A3  0C89               	rrf	9,f
 16592  16A4  0C89               	rrf	9,f
 16593  16A5  3901               	andlw	1
 16594  16A6  00F6               	movwf	??_i2c1_driver_isNACK
 16595  16A7  0C76               	rrf	??_i2c1_driver_isNACK,w
 16596  16A8  0008               	return
 16597  16A9                     __end_of_i2c1_driver_isNACK:	
 16598                           
 16599                           	psect	text99
 16600  1657                     __ptext99:	
 16601 ;; *************** function i1_i2c1_driver_TXData *****************
 16602 ;; Defined at:
 16603 ;;		line 186 in file "mcc_generated_files/i2c1_driver.c"
 16604 ;; Parameters:    Size  Location     Type
 16605 ;;  d               1    wreg     unsigned char 
 16606 ;; Auto vars:     Size  Location     Type
 16607 ;;  d               1    0[COMMON] unsigned char 
 16608 ;; Return value:  Size  Location     Type
 16609 ;;                  1    wreg      void 
 16610 ;; Registers used:
 16611 ;;		wreg
 16612 ;; Tracked objects:
 16613 ;;		On entry : 0/0
 16614 ;;		On exit  : 0/0
 16615 ;;		Unchanged: 0/0
 16616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16617 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16618 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16619 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16620 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16621 ;;Total ram usage:        1 bytes
 16622 ;; Hardware stack levels used:    1
 16623 ;; This function calls:
 16624 ;;		Nothing
 16625 ;; This function is called by:
 16626 ;;		_do_I2C_SEND_ADR_READ
 16627 ;;		_do_I2C_SEND_ADR_WRITE
 16628 ;;		_do_I2C_TX
 16629 ;; This function uses a non-reentrant model
 16630 ;;
 16631                           
 16632                           
 16633                           ;psect for function i1_i2c1_driver_TXData
 16634  1657                     i1_i2c1_driver_TXData:	
 16635                           
 16636                           ;incstack = 0
 16637                           ; Regs used in i1_i2c1_driver_TXData: [wreg]
 16638                           ;i1i2c1_driver_TXData@d stored from wreg
 16639  1657  00F6               	movwf	i1i2c1_driver_TXData@d
 16640                           
 16641                           ;mcc_generated_files/i2c1_driver.c: 186: __attribute__((inline)) void i2c1_driver_TXData
      +                          (char d);mcc_generated_files/i2c1_driver.c: 187: {;mcc_generated_files/i2c1_driver.c: 18
      +                          8:     SSP1BUF = d;
 16642  1658  0876               	movf	i1i2c1_driver_TXData@d,w
 16643  1659  0024               	movlb	4	; select bank4
 16644  165A  0091               	movwf	17	;volatile
 16645  165B  0008               	return
 16646  165C                     __end_ofi1_i2c1_driver_TXData:	
 16647                           
 16648                           	psect	text100
 16649  15FD                     __ptext100:	
 16650 ;; *************** function i1_i2c1_driver_getRXData *****************
 16651 ;; Defined at:
 16652 ;;		line 171 in file "mcc_generated_files/i2c1_driver.c"
 16653 ;; Parameters:    Size  Location     Type
 16654 ;;		None
 16655 ;; Auto vars:     Size  Location     Type
 16656 ;;		None
 16657 ;; Return value:  Size  Location     Type
 16658 ;;                  1    wreg      unsigned char 
 16659 ;; Registers used:
 16660 ;;		wreg
 16661 ;; Tracked objects:
 16662 ;;		On entry : 0/0
 16663 ;;		On exit  : 0/0
 16664 ;;		Unchanged: 0/0
 16665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16666 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16667 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16668 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16669 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16670 ;;Total ram usage:        0 bytes
 16671 ;; Hardware stack levels used:    1
 16672 ;; This function calls:
 16673 ;;		Nothing
 16674 ;; This function is called by:
 16675 ;;		_do_I2C_RX
 16676 ;; This function uses a non-reentrant model
 16677 ;;
 16678                           
 16679                           
 16680                           ;psect for function i1_i2c1_driver_getRXData
 16681  15FD                     i1_i2c1_driver_getRXData:	
 16682                           
 16683                           ;mcc_generated_files/i2c1_driver.c: 173:     return SSP1BUF;
 16684                           
 16685                           ;incstack = 0
 16686                           ; Regs used in i1_i2c1_driver_getRXData: [wreg]
 16687  15FD  0024               	movlb	4	; select bank4
 16688  15FE  0811               	movf	17,w	;volatile
 16689  15FF  0008               	return
 16690  1600                     __end_ofi1_i2c1_driver_getRXData:	
 16691                           
 16692                           	psect	text101
 16693  162F                     __ptext101:	
 16694 ;; *************** function i1_i2c1_driver_sendNACK *****************
 16695 ;; Defined at:
 16696 ;;		line 202 in file "mcc_generated_files/i2c1_driver.c"
 16697 ;; Parameters:    Size  Location     Type
 16698 ;;		None
 16699 ;; Auto vars:     Size  Location     Type
 16700 ;;		None
 16701 ;; Return value:  Size  Location     Type
 16702 ;;                  1    wreg      void 
 16703 ;; Registers used:
 16704 ;;		None
 16705 ;; Tracked objects:
 16706 ;;		On entry : 0/0
 16707 ;;		On exit  : 0/0
 16708 ;;		Unchanged: 0/0
 16709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16710 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16711 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16712 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16713 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16714 ;;Total ram usage:        0 bytes
 16715 ;; Hardware stack levels used:    1
 16716 ;; This function calls:
 16717 ;;		Nothing
 16718 ;; This function is called by:
 16719 ;;		_do_I2C_DO_NACK_STOP
 16720 ;;		_do_I2C_DO_NACK_RESTART
 16721 ;; This function uses a non-reentrant model
 16722 ;;
 16723                           
 16724                           
 16725                           ;psect for function i1_i2c1_driver_sendNACK
 16726  162F                     i1_i2c1_driver_sendNACK:	
 16727                           
 16728                           ;mcc_generated_files/i2c1_driver.c: 204:     SSP1CON2bits.ACKDT = 1;
 16729                           
 16730                           ;incstack = 0
 16731                           ; Regs used in i1_i2c1_driver_sendNACK: []
 16732  162F  0024               	movlb	4	; select bank4
 16733  1630  1696               	bsf	22,5	;volatile
 16734                           
 16735                           ;mcc_generated_files/i2c1_driver.c: 205:     SSP1CON2bits.ACKEN = 1;
 16736  1631  1616               	bsf	22,4	;volatile
 16737  1632  0008               	return
 16738  1633                     __end_ofi1_i2c1_driver_sendNACK:	
 16739                           
 16740                           	psect	text102
 16741  0800                     __ptext102:	
 16742 ;; *************** function _i2c1_driver_resetBus *****************
 16743 ;; Defined at:
 16744 ;;		line 141 in file "mcc_generated_files/i2c1_driver.c"
 16745 ;; Parameters:    Size  Location     Type
 16746 ;;		None
 16747 ;; Auto vars:     Size  Location     Type
 16748 ;;		None
 16749 ;; Return value:  Size  Location     Type
 16750 ;;                  1    wreg      void 
 16751 ;; Registers used:
 16752 ;;		None
 16753 ;; Tracked objects:
 16754 ;;		On entry : 0/0
 16755 ;;		On exit  : 0/0
 16756 ;;		Unchanged: 0/0
 16757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16758 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16759 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16760 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16761 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16762 ;;Total ram usage:        0 bytes
 16763 ;; Hardware stack levels used:    1
 16764 ;; This function calls:
 16765 ;;		Nothing
 16766 ;; This function is called by:
 16767 ;;		_do_I2C_RESET
 16768 ;; This function uses a non-reentrant model
 16769 ;;
 16770                           
 16771                           
 16772                           ;psect for function _i2c1_driver_resetBus
 16773  0800                     _i2c1_driver_resetBus:	
 16774                           
 16775                           ;incstack = 0
 16776                           ; Regs used in _i2c1_driver_resetBus: []
 16777  0800  0008               	return
 16778  0801                     __end_of_i2c1_driver_resetBus:	
 16779                           
 16780                           	psect	text103
 16781  15FA                     __ptext103:	
 16782 ;; *************** function i1_i2c1_driver_startRX *****************
 16783 ;; Defined at:
 16784 ;;		line 166 in file "mcc_generated_files/i2c1_driver.c"
 16785 ;; Parameters:    Size  Location     Type
 16786 ;;		None
 16787 ;; Auto vars:     Size  Location     Type
 16788 ;;		None
 16789 ;; Return value:  Size  Location     Type
 16790 ;;                  1    wreg      void 
 16791 ;; Registers used:
 16792 ;;		None
 16793 ;; Tracked objects:
 16794 ;;		On entry : 0/0
 16795 ;;		On exit  : 0/0
 16796 ;;		Unchanged: 0/0
 16797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16798 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16799 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16800 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16801 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16802 ;;Total ram usage:        0 bytes
 16803 ;; Hardware stack levels used:    1
 16804 ;; This function calls:
 16805 ;;		Nothing
 16806 ;; This function is called by:
 16807 ;;		_do_I2C_RCEN
 16808 ;; This function uses a non-reentrant model
 16809 ;;
 16810                           
 16811                           
 16812                           ;psect for function i1_i2c1_driver_startRX
 16813  15FA                     i1_i2c1_driver_startRX:	
 16814                           
 16815                           ;mcc_generated_files/i2c1_driver.c: 168:     SSP1CON2bits.RCEN = 1;
 16816                           
 16817                           ;incstack = 0
 16818                           ; Regs used in i1_i2c1_driver_startRX: []
 16819  15FA  0024               	movlb	4	; select bank4
 16820  15FB  1596               	bsf	22,3	;volatile
 16821  15FC  0008               	return
 16822  15FD                     __end_ofi1_i2c1_driver_startRX:	
 16823                           
 16824                           	psect	text104
 16825  15ED                     __ptext104:	
 16826 ;; *************** function _returnReset *****************
 16827 ;; Defined at:
 16828 ;;		line 448 in file "mcc_generated_files/drivers/i2c_master.c"
 16829 ;; Parameters:    Size  Location     Type
 16830 ;;  p               1    0[COMMON] PTR void 
 16831 ;;		 -> NULL(0), 
 16832 ;; Auto vars:     Size  Location     Type
 16833 ;;		None
 16834 ;; Return value:  Size  Location     Type
 16835 ;;                  1    wreg      enum E6966
 16836 ;; Registers used:
 16837 ;;		wreg
 16838 ;; Tracked objects:
 16839 ;;		On entry : 0/0
 16840 ;;		On exit  : 0/0
 16841 ;;		Unchanged: 0/0
 16842 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16843 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16844 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16845 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16846 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16847 ;;Total ram usage:        1 bytes
 16848 ;; Hardware stack levels used:    1
 16849 ;; This function calls:
 16850 ;;		Nothing
 16851 ;; This function is called by:
 16852 ;;		_i2c_open
 16853 ;;		_do_I2C_DO_ADDRESS_NACK
 16854 ;;		_do_I2C_TX
 16855 ;;		_do_I2C_RX
 16856 ;;		_do_I2C_TX_EMPTY
 16857 ;; This function uses a non-reentrant model
 16858 ;;
 16859                           
 16860                           
 16861                           ;psect for function _returnReset
 16862  15ED                     _returnReset:	
 16863                           
 16864                           ;mcc_generated_files/drivers/i2c_master.c: 448: static i2c_operations_t returnReset(void
      +                           *p);mcc_generated_files/drivers/i2c_master.c: 449: {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 450:     return i2c_reset_link;
 16865                           
 16866                           ;incstack = 0
 16867                           ; Regs used in _returnReset: [wreg]
 16868  15ED  3005               	movlw	5
 16869  15EE  0008               	return
 16870  15EF                     __end_of_returnReset:	
 16871                           
 16872                           	psect	text105
 16873  15EB                     __ptext105:	
 16874 ;; *************** function _returnStop *****************
 16875 ;; Defined at:
 16876 ;;		line 443 in file "mcc_generated_files/drivers/i2c_master.c"
 16877 ;; Parameters:    Size  Location     Type
 16878 ;;  p               1    0[COMMON] PTR void 
 16879 ;;		 -> NULL(0), 
 16880 ;; Auto vars:     Size  Location     Type
 16881 ;;		None
 16882 ;; Return value:  Size  Location     Type
 16883 ;;                  1    wreg      enum E6966
 16884 ;; Registers used:
 16885 ;;		wreg
 16886 ;; Tracked objects:
 16887 ;;		On entry : 0/0
 16888 ;;		On exit  : 0/0
 16889 ;;		Unchanged: 0/0
 16890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16891 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16892 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16893 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16894 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16895 ;;Total ram usage:        1 bytes
 16896 ;; Hardware stack levels used:    1
 16897 ;; This function calls:
 16898 ;;		Nothing
 16899 ;; This function is called by:
 16900 ;;		_i2c_open
 16901 ;;		_setCallBack
 16902 ;;		_do_I2C_DO_ADDRESS_NACK
 16903 ;;		_do_I2C_TX
 16904 ;;		_do_I2C_RX
 16905 ;;		_do_I2C_TX_EMPTY
 16906 ;; This function uses a non-reentrant model
 16907 ;;
 16908                           
 16909                           
 16910                           ;psect for function _returnStop
 16911  15EB                     _returnStop:	
 16912                           
 16913                           ;mcc_generated_files/drivers/i2c_master.c: 443: static i2c_operations_t returnStop(void 
      +                          *p);mcc_generated_files/drivers/i2c_master.c: 444: {;mcc_generated_files/drivers/i2c_mas
      +                          ter.c: 445:     return i2c_stop;
 16914                           
 16915                           ;incstack = 0
 16916                           ; Regs used in _returnStop: [wreg]
 16917  15EB  3001               	movlw	1
 16918  15EC  0008               	return
 16919  15ED                     __end_of_returnStop:	
 16920                           
 16921                           	psect	text106
 16922  15F7                     __ptext106:	
 16923 ;; *************** function i1_i2c1_driver_stop *****************
 16924 ;; Defined at:
 16925 ;;		line 156 in file "mcc_generated_files/i2c1_driver.c"
 16926 ;; Parameters:    Size  Location     Type
 16927 ;;		None
 16928 ;; Auto vars:     Size  Location     Type
 16929 ;;		None
 16930 ;; Return value:  Size  Location     Type
 16931 ;;                  1    wreg      void 
 16932 ;; Registers used:
 16933 ;;		None
 16934 ;; Tracked objects:
 16935 ;;		On entry : 0/0
 16936 ;;		On exit  : 0/0
 16937 ;;		Unchanged: 0/0
 16938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16939 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16940 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16941 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16942 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16943 ;;Total ram usage:        0 bytes
 16944 ;; Hardware stack levels used:    1
 16945 ;; This function calls:
 16946 ;;		Nothing
 16947 ;; This function is called by:
 16948 ;;		_do_I2C_SEND_STOP
 16949 ;; This function uses a non-reentrant model
 16950 ;;
 16951                           
 16952                           
 16953                           ;psect for function i1_i2c1_driver_stop
 16954  15F7                     i1_i2c1_driver_stop:	
 16955                           
 16956                           ;mcc_generated_files/i2c1_driver.c: 158:     SSP1CON2bits.PEN = 1;
 16957                           
 16958                           ;incstack = 0
 16959                           ; Regs used in i1_i2c1_driver_stop: []
 16960  15F7  0024               	movlb	4	; select bank4
 16961  15F8  1516               	bsf	22,2	;volatile
 16962  15F9  0008               	return
 16963  15FA                     __end_ofi1_i2c1_driver_stop:	
 16964                           
 16965                           	psect	text107
 16966  15F4                     __ptext107:	
 16967 ;; *************** function i1_i2c1_driver_restart *****************
 16968 ;; Defined at:
 16969 ;;		line 151 in file "mcc_generated_files/i2c1_driver.c"
 16970 ;; Parameters:    Size  Location     Type
 16971 ;;		None
 16972 ;; Auto vars:     Size  Location     Type
 16973 ;;		None
 16974 ;; Return value:  Size  Location     Type
 16975 ;;                  1    wreg      void 
 16976 ;; Registers used:
 16977 ;;		None
 16978 ;; Tracked objects:
 16979 ;;		On entry : 0/0
 16980 ;;		On exit  : 0/0
 16981 ;;		Unchanged: 0/0
 16982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16984 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16985 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16986 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16987 ;;Total ram usage:        0 bytes
 16988 ;; Hardware stack levels used:    1
 16989 ;; This function calls:
 16990 ;;		Nothing
 16991 ;; This function is called by:
 16992 ;;		_do_I2C_SEND_RESTART_READ
 16993 ;;		_do_I2C_SEND_RESTART_WRITE
 16994 ;;		_do_I2C_SEND_RESTART
 16995 ;; This function uses a non-reentrant model
 16996 ;;
 16997                           
 16998                           
 16999                           ;psect for function i1_i2c1_driver_restart
 17000  15F4                     i1_i2c1_driver_restart:	
 17001                           
 17002                           ;mcc_generated_files/i2c1_driver.c: 153:     SSP1CON2bits.RSEN = 1;
 17003                           
 17004                           ;incstack = 0
 17005                           ; Regs used in i1_i2c1_driver_restart: []
 17006  15F4  0024               	movlb	4	; select bank4
 17007  15F5  1496               	bsf	22,1	;volatile
 17008  15F6  0008               	return
 17009  15F7                     __end_ofi1_i2c1_driver_restart:	
 17010                           
 17011                           	psect	text108
 17012  162B                     __ptext108:	
 17013 ;; *************** function _i2c1_driver_sendACK *****************
 17014 ;; Defined at:
 17015 ;;		line 196 in file "mcc_generated_files/i2c1_driver.c"
 17016 ;; Parameters:    Size  Location     Type
 17017 ;;		None
 17018 ;; Auto vars:     Size  Location     Type
 17019 ;;		None
 17020 ;; Return value:  Size  Location     Type
 17021 ;;                  1    wreg      void 
 17022 ;; Registers used:
 17023 ;;		None
 17024 ;; Tracked objects:
 17025 ;;		On entry : 0/0
 17026 ;;		On exit  : 0/0
 17027 ;;		Unchanged: 0/0
 17028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17029 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17030 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17032 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17033 ;;Total ram usage:        0 bytes
 17034 ;; Hardware stack levels used:    1
 17035 ;; This function calls:
 17036 ;;		Nothing
 17037 ;; This function is called by:
 17038 ;;		_do_I2C_DO_ACK
 17039 ;;		_do_I2C_RX
 17040 ;;		_I2C_Send_ACK
 17041 ;; This function uses a non-reentrant model
 17042 ;;
 17043                           
 17044                           
 17045                           ;psect for function _i2c1_driver_sendACK
 17046  162B                     _i2c1_driver_sendACK:	
 17047                           
 17048                           ;mcc_generated_files/i2c1_driver.c: 198:     SSP1CON2bits.ACKDT = 0;
 17049                           
 17050                           ;incstack = 0
 17051                           ; Regs used in _i2c1_driver_sendACK: []
 17052  162B  0024               	movlb	4	; select bank4
 17053  162C  1296               	bcf	22,5	;volatile
 17054                           
 17055                           ;mcc_generated_files/i2c1_driver.c: 199:     SSP1CON2bits.ACKEN = 1;
 17056  162D  1616               	bsf	22,4	;volatile
 17057  162E  0008               	return
 17058  162F                     __end_of_i2c1_driver_sendACK:	
 17059                           
 17060                           	psect	text109
 17061  1661                     __ptext109:	
 17062 ;; *************** function _PIN_MANAGER_IOC *****************
 17063 ;; Defined at:
 17064 ;;		line 132 in file "mcc_generated_files/pin_manager.c"
 17065 ;; Parameters:    Size  Location     Type
 17066 ;;		None
 17067 ;; Auto vars:     Size  Location     Type
 17068 ;;		None
 17069 ;; Return value:  Size  Location     Type
 17070 ;;                  1    wreg      void 
 17071 ;; Registers used:
 17072 ;;		wreg, status,2, status,0, pclath, cstack
 17073 ;; Tracked objects:
 17074 ;;		On entry : 0/0
 17075 ;;		On exit  : 0/0
 17076 ;;		Unchanged: 0/0
 17077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17079 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17080 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17081 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17082 ;;Total ram usage:        0 bytes
 17083 ;; Hardware stack levels used:    1
 17084 ;; Hardware stack levels required when called:    2
 17085 ;; This function calls:
 17086 ;;		_IOCAF4_ISR
 17087 ;; This function is called by:
 17088 ;;		_INTERRUPT_InterruptManager
 17089 ;; This function uses a non-reentrant model
 17090 ;;
 17091                           
 17092                           
 17093                           ;psect for function _PIN_MANAGER_IOC
 17094  1661                     _PIN_MANAGER_IOC:	
 17095                           
 17096                           ;mcc_generated_files/pin_manager.c: 135:     if(IOCAFbits.IOCAF4 == 1)
 17097                           
 17098                           ;incstack = 0
 17099                           ; Regs used in _PIN_MANAGER_IOC: [wreg+status,2+status,0+pclath+cstack]
 17100  1661  0027               	movlb	7	; select bank7
 17101  1662  1E13               	btfss	19,4	;volatile
 17102  1663  0008               	return
 17103                           
 17104                           ;mcc_generated_files/pin_manager.c: 136:     {;mcc_generated_files/pin_manager.c: 137:  
      +                                 IOCAF4_ISR();
 17105  1664  3197  273C         	fcall	_IOCAF4_ISR
 17106  1666  0008               	return
 17107  1667                     __end_of_PIN_MANAGER_IOC:	
 17108                           
 17109                           	psect	text110
 17110  173C                     __ptext110:	
 17111 ;; *************** function _IOCAF4_ISR *****************
 17112 ;; Defined at:
 17113 ;;		line 144 in file "mcc_generated_files/pin_manager.c"
 17114 ;; Parameters:    Size  Location     Type
 17115 ;;		None
 17116 ;; Auto vars:     Size  Location     Type
 17117 ;;		None
 17118 ;; Return value:  Size  Location     Type
 17119 ;;                  1    wreg      void 
 17120 ;; Registers used:
 17121 ;;		wreg, status,2, status,0, pclath, cstack
 17122 ;; Tracked objects:
 17123 ;;		On entry : 0/0
 17124 ;;		On exit  : 0/0
 17125 ;;		Unchanged: 0/0
 17126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17128 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17129 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17130 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17131 ;;Total ram usage:        0 bytes
 17132 ;; Hardware stack levels used:    1
 17133 ;; Hardware stack levels required when called:    1
 17134 ;; This function calls:
 17135 ;;		Absolute function
 17136 ;;		_IOCAF4_DefaultInterruptHandler
 17137 ;; This function is called by:
 17138 ;;		_PIN_MANAGER_IOC
 17139 ;; This function uses a non-reentrant model
 17140 ;;
 17141                           
 17142                           
 17143                           ;psect for function _IOCAF4_ISR
 17144  173C                     _IOCAF4_ISR:	
 17145                           
 17146                           ;mcc_generated_files/pin_manager.c: 149:     if(IOCAF4_InterruptHandler)
 17147                           
 17148                           ;incstack = 0
 17149                           ; Regs used in _IOCAF4_ISR: [wreg+status,2+status,0+pclath+cstack]
 17150  173C  0021               	movlb	1	; select bank1
 17151  173D  086A               	movf	_IOCAF4_InterruptHandler^(0+128),w
 17152  173E  046B               	iorwf	(_IOCAF4_InterruptHandler+1)^(0+128),w
 17153  173F  1903               	btfsc	3,2
 17154  1740  2F46               	goto	i1l5170
 17155                           
 17156                           ;mcc_generated_files/pin_manager.c: 150:     {;mcc_generated_files/pin_manager.c: 151:  
      +                                 IOCAF4_InterruptHandler();
 17157  1741  086B               	movf	(_IOCAF4_InterruptHandler+1)^(0+128),w
 17158  1742  008A               	movwf	10
 17159  1743  086A               	movf	_IOCAF4_InterruptHandler^(0+128),w
 17160  1744  000A               	callw
 17161  1745  3197               	pagesel	$
 17162  1746                     i1l5170:	
 17163                           
 17164                           ;mcc_generated_files/pin_manager.c: 153:     IOCAFbits.IOCAF4 = 0;
 17165  1746  0027               	movlb	7	; select bank7
 17166  1747  1213               	bcf	19,4	;volatile
 17167  1748  0008               	return
 17168  1749                     __end_of_IOCAF4_ISR:	
 17169                           
 17170                           	psect	text111
 17171  15EA                     __ptext111:	
 17172 ;; *************** function _IOCAF4_DefaultInterruptHandler *****************
 17173 ;; Defined at:
 17174 ;;		line 166 in file "mcc_generated_files/pin_manager.c"
 17175 ;; Parameters:    Size  Location     Type
 17176 ;;		None
 17177 ;; Auto vars:     Size  Location     Type
 17178 ;;		None
 17179 ;; Return value:  Size  Location     Type
 17180 ;;                  1    wreg      void 
 17181 ;; Registers used:
 17182 ;;		None
 17183 ;; Tracked objects:
 17184 ;;		On entry : 0/0
 17185 ;;		On exit  : 0/0
 17186 ;;		Unchanged: 0/0
 17187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17188 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17189 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17190 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17191 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17192 ;;Total ram usage:        0 bytes
 17193 ;; Hardware stack levels used:    1
 17194 ;; This function calls:
 17195 ;;		Nothing
 17196 ;; This function is called by:
 17197 ;;		_PIN_MANAGER_Initialize
 17198 ;;		_IOCAF4_ISR
 17199 ;; This function uses a non-reentrant model
 17200 ;;
 17201                           
 17202                           
 17203                           ;psect for function _IOCAF4_DefaultInterruptHandler
 17204  15EA                     _IOCAF4_DefaultInterruptHandler:	
 17205                           
 17206                           ;incstack = 0
 17207                           ; Regs used in _IOCAF4_DefaultInterruptHandler: []
 17208  15EA  0008               	return
 17209  15EB                     __end_of_IOCAF4_DefaultInterruptHandler:	
 17210                           
 17211                           	psect	text112
 17212  08DC                     __ptext112:	
 17213 ;; *************** function _EUSART_Transmit_ISR *****************
 17214 ;; Defined at:
 17215 ;;		line 205 in file "mcc_generated_files/eusart.c"
 17216 ;; Parameters:    Size  Location     Type
 17217 ;;		None
 17218 ;; Auto vars:     Size  Location     Type
 17219 ;;		None
 17220 ;; Return value:  Size  Location     Type
 17221 ;;                  1    wreg      void 
 17222 ;; Registers used:
 17223 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17224 ;; Tracked objects:
 17225 ;;		On entry : 0/0
 17226 ;;		On exit  : 0/0
 17227 ;;		Unchanged: 0/0
 17228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17229 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17230 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17231 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17232 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17233 ;;Total ram usage:        1 bytes
 17234 ;; Hardware stack levels used:    1
 17235 ;; This function calls:
 17236 ;;		Nothing
 17237 ;; This function is called by:
 17238 ;;		_EUSART_Initialize
 17239 ;;		_INTERRUPT_InterruptManager
 17240 ;; This function uses a non-reentrant model
 17241 ;;
 17242                           
 17243                           
 17244                           ;psect for function _EUSART_Transmit_ISR
 17245  08DC                     _EUSART_Transmit_ISR:	
 17246                           
 17247                           ;mcc_generated_files/eusart.c: 209:     if(sizeof(eusartTxBuffer) > eusartTxBufferRemain
      +                          ing)
 17248                           
 17249                           ;incstack = 0
 17250                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 17251  08DC  3008               	movlw	8
 17252  08DD  0021               	movlb	1	; select bank1
 17253  08DE  026C               	subwf	_eusartTxBufferRemaining^(0+128),w	;volatile
 17254  08DF  1803               	skipnc
 17255  08E0  28F7               	goto	i1l807
 17256                           
 17257                           ;mcc_generated_files/eusart.c: 210:     {;mcc_generated_files/eusart.c: 211:         TX1
      +                          REG = eusartTxBuffer[eusartTxTail++];
 17258  08E1  0874               	movf	_eusartTxTail,w
 17259  08E2  3EC5               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
 17260  08E3  0086               	movwf	6
 17261  08E4  3001               	movlw	1	; select bank3/4
 17262  08E5  0087               	movwf	7
 17263  08E6  0801               	movf	1,w
 17264  08E7  0023               	movlb	3	; select bank3
 17265  08E8  009A               	movwf	26	;volatile
 17266  08E9  3001               	movlw	1
 17267  08EA  00F6               	movwf	??_EUSART_Transmit_ISR
 17268  08EB  0876               	movf	??_EUSART_Transmit_ISR,w
 17269  08EC  07F4               	addwf	_eusartTxTail,f	;volatile
 17270                           
 17271                           ;mcc_generated_files/eusart.c: 212:         if(sizeof(eusartTxBuffer) <= eusartTxTail)
 17272  08ED  3008               	movlw	8
 17273  08EE  0274               	subwf	_eusartTxTail,w	;volatile
 17274  08EF  1803               	btfsc	3,0
 17275                           
 17276                           ;mcc_generated_files/eusart.c: 213:         {;mcc_generated_files/eusart.c: 214:        
      +                               eusartTxTail = 0;
 17277  08F0  01F4               	clrf	_eusartTxTail	;volatile
 17278                           
 17279                           ;mcc_generated_files/eusart.c: 216:         eusartTxBufferRemaining++;
 17280  08F1  3001               	movlw	1
 17281  08F2  00F6               	movwf	??_EUSART_Transmit_ISR
 17282  08F3  0876               	movf	??_EUSART_Transmit_ISR,w
 17283  08F4  0021               	movlb	1	; select bank1
 17284  08F5  07EC               	addwf	_eusartTxBufferRemaining^(0+128),f	;volatile
 17285                           
 17286                           ;mcc_generated_files/eusart.c: 217:     }
 17287  08F6  0008               	return
 17288  08F7                     i1l807:	
 17289                           ;mcc_generated_files/eusart.c: 218:     else
 17290                           
 17291                           
 17292                           ;mcc_generated_files/eusart.c: 219:     {;mcc_generated_files/eusart.c: 220:         PIE
      +                          1bits.TXIE = 0;
 17293  08F7  1211               	bcf	17,4	;volatile
 17294  08F8  0008               	return
 17295  08F9                     __end_of_EUSART_Transmit_ISR:	
 17296                           
 17297                           	psect	text113
 17298  0B8A                     __ptext113:	
 17299 ;; *************** function _EUSART_Receive_ISR *****************
 17300 ;; Defined at:
 17301 ;;		line 224 in file "mcc_generated_files/eusart.c"
 17302 ;; Parameters:    Size  Location     Type
 17303 ;;		None
 17304 ;; Auto vars:     Size  Location     Type
 17305 ;;		None
 17306 ;; Return value:  Size  Location     Type
 17307 ;;                  1    wreg      void 
 17308 ;; Registers used:
 17309 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17310 ;; Tracked objects:
 17311 ;;		On entry : 0/0
 17312 ;;		On exit  : 0/0
 17313 ;;		Unchanged: 0/0
 17314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17315 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17316 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17317 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17318 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17319 ;;Total ram usage:        0 bytes
 17320 ;; Hardware stack levels used:    1
 17321 ;; Hardware stack levels required when called:    2
 17322 ;; This function calls:
 17323 ;;		Absolute function
 17324 ;;		_EUSART_DefaultErrorHandler
 17325 ;;		_EUSART_DefaultFramingErrorHandler
 17326 ;;		_EUSART_DefaultOverrunErrorHandler
 17327 ;;		_EUSART_RxDataHandler
 17328 ;; This function is called by:
 17329 ;;		_EUSART_Initialize
 17330 ;;		_INTERRUPT_InterruptManager
 17331 ;; This function uses a non-reentrant model
 17332 ;;
 17333                           
 17334                           
 17335                           ;psect for function _EUSART_Receive_ISR
 17336  0B8A                     _EUSART_Receive_ISR:	
 17337                           
 17338                           ;mcc_generated_files/eusart.c: 227:     eusartRxStatusBuffer[eusartRxHead].status = 0;
 17339                           
 17340                           ;incstack = 0
 17341                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17342  0B8A  0873               	movf	_eusartRxHead,w	;volatile
 17343  0B8B  3E60               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 17344  0B8C  0086               	movwf	6
 17345  0B8D  3001               	movlw	1	; select bank2/3
 17346  0B8E  0087               	movwf	7
 17347  0B8F  0181               	clrf	1
 17348                           
 17349                           ;mcc_generated_files/eusart.c: 229:     if(RC1STAbits.FERR){
 17350  0B90  0023               	movlb	3	; select bank3
 17351  0B91  1D1D               	btfss	29,2	;volatile
 17352  0B92  2B9E               	goto	i1l5622
 17353                           
 17354                           ;mcc_generated_files/eusart.c: 230:         eusartRxStatusBuffer[eusartRxHead].ferr = 1;
 17355  0B93  0873               	movf	_eusartRxHead,w	;volatile
 17356  0B94  3E60               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 17357  0B95  0086               	movwf	6
 17358  0B96  3001               	movlw	1	; select bank2/3
 17359  0B97  0087               	movwf	7
 17360  0B98  1481               	bsf	1,1
 17361                           
 17362                           ;mcc_generated_files/eusart.c: 231:         EUSART_FramingErrorHandler();
 17363  0B99  085F               	movf	(_EUSART_FramingErrorHandler+1)^(0+384),w
 17364  0B9A  008A               	movwf	10
 17365  0B9B  085E               	movf	_EUSART_FramingErrorHandler^(0+384),w
 17366  0B9C  000A               	callw
 17367  0B9D  318B               	pagesel	$
 17368  0B9E                     i1l5622:	
 17369                           
 17370                           ;mcc_generated_files/eusart.c: 234:     if(RC1STAbits.OERR){
 17371  0B9E  0023               	movlb	3	; select bank3
 17372  0B9F  1C9D               	btfss	29,1	;volatile
 17373  0BA0  2BAC               	goto	i1l5628
 17374                           
 17375                           ;mcc_generated_files/eusart.c: 235:         eusartRxStatusBuffer[eusartRxHead].oerr = 1;
 17376  0BA1  0873               	movf	_eusartRxHead,w	;volatile
 17377  0BA2  3E60               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 17378  0BA3  0086               	movwf	6
 17379  0BA4  3001               	movlw	1	; select bank2/3
 17380  0BA5  0087               	movwf	7
 17381  0BA6  1501               	bsf	1,2
 17382                           
 17383                           ;mcc_generated_files/eusart.c: 236:         EUSART_OverrunErrorHandler();
 17384  0BA7  085D               	movf	(_EUSART_OverrunErrorHandler+1)^(0+384),w
 17385  0BA8  008A               	movwf	10
 17386  0BA9  085C               	movf	_EUSART_OverrunErrorHandler^(0+384),w
 17387  0BAA  000A               	callw
 17388  0BAB  318B               	pagesel	$
 17389  0BAC                     i1l5628:	
 17390                           
 17391                           ;mcc_generated_files/eusart.c: 239:     if(eusartRxStatusBuffer[eusartRxHead].status){
 17392  0BAC  0873               	movf	_eusartRxHead,w	;volatile
 17393  0BAD  3E60               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 17394  0BAE  0086               	movwf	6
 17395  0BAF  3001               	movlw	1	; select bank2/3
 17396  0BB0  0087               	movwf	7
 17397  0BB1  0801               	movf	1,w
 17398  0BB2  1903               	btfsc	3,2
 17399  0BB3  2BBB               	goto	i1l5632
 17400                           
 17401                           ;mcc_generated_files/eusart.c: 240:         EUSART_ErrorHandler();
 17402  0BB4  0023               	movlb	3	; select bank3
 17403  0BB5  085B               	movf	(_EUSART_ErrorHandler+1)^(0+384),w
 17404  0BB6  008A               	movwf	10
 17405  0BB7  085A               	movf	_EUSART_ErrorHandler^(0+384),w
 17406  0BB8  000A               	callw
 17407  0BB9  318B               	pagesel	$
 17408                           
 17409                           ;mcc_generated_files/eusart.c: 241:     } else {
 17410  0BBA  0008               	return
 17411  0BBB                     i1l5632:	
 17412                           
 17413                           ;mcc_generated_files/eusart.c: 242:         EUSART_RxDataHandler();
 17414  0BBB  3197  27E9         	fcall	_EUSART_RxDataHandler
 17415  0BBD  0008               	return
 17416  0BBE                     __end_of_EUSART_Receive_ISR:	
 17417                           
 17418                           	psect	text114
 17419  1627                     __ptext114:	
 17420 ;; *************** function _EUSART_DefaultOverrunErrorHandler *****************
 17421 ;; Defined at:
 17422 ;;		line 260 in file "mcc_generated_files/eusart.c"
 17423 ;; Parameters:    Size  Location     Type
 17424 ;;		None
 17425 ;; Auto vars:     Size  Location     Type
 17426 ;;		None
 17427 ;; Return value:  Size  Location     Type
 17428 ;;                  1    wreg      void 
 17429 ;; Registers used:
 17430 ;;		None
 17431 ;; Tracked objects:
 17432 ;;		On entry : 0/0
 17433 ;;		On exit  : 0/0
 17434 ;;		Unchanged: 0/0
 17435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17437 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17439 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17440 ;;Total ram usage:        0 bytes
 17441 ;; Hardware stack levels used:    1
 17442 ;; This function calls:
 17443 ;;		Nothing
 17444 ;; This function is called by:
 17445 ;;		_EUSART_Initialize
 17446 ;;		_EUSART_Receive_ISR
 17447 ;; This function uses a non-reentrant model
 17448 ;;
 17449                           
 17450                           
 17451                           ;psect for function _EUSART_DefaultOverrunErrorHandler
 17452  1627                     _EUSART_DefaultOverrunErrorHandler:	
 17453                           
 17454                           ;mcc_generated_files/eusart.c: 263:     RC1STAbits.CREN = 0;
 17455                           
 17456                           ;incstack = 0
 17457                           ; Regs used in _EUSART_DefaultOverrunErrorHandler: []
 17458  1627  0023               	movlb	3	; select bank3
 17459  1628  121D               	bcf	29,4	;volatile
 17460                           
 17461                           ;mcc_generated_files/eusart.c: 264:     RC1STAbits.CREN = 1;
 17462  1629  161D               	bsf	29,4	;volatile
 17463  162A  0008               	return
 17464  162B                     __end_of_EUSART_DefaultOverrunErrorHandler:	
 17465                           
 17466                           	psect	text115
 17467  15E9                     __ptext115:	
 17468 ;; *************** function _EUSART_DefaultFramingErrorHandler *****************
 17469 ;; Defined at:
 17470 ;;		line 258 in file "mcc_generated_files/eusart.c"
 17471 ;; Parameters:    Size  Location     Type
 17472 ;;		None
 17473 ;; Auto vars:     Size  Location     Type
 17474 ;;		None
 17475 ;; Return value:  Size  Location     Type
 17476 ;;                  1    wreg      void 
 17477 ;; Registers used:
 17478 ;;		None
 17479 ;; Tracked objects:
 17480 ;;		On entry : 0/0
 17481 ;;		On exit  : 0/0
 17482 ;;		Unchanged: 0/0
 17483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17484 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17485 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17486 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17487 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17488 ;;Total ram usage:        0 bytes
 17489 ;; Hardware stack levels used:    1
 17490 ;; This function calls:
 17491 ;;		Nothing
 17492 ;; This function is called by:
 17493 ;;		_EUSART_Initialize
 17494 ;;		_EUSART_Receive_ISR
 17495 ;; This function uses a non-reentrant model
 17496 ;;
 17497                           
 17498                           
 17499                           ;psect for function _EUSART_DefaultFramingErrorHandler
 17500  15E9                     _EUSART_DefaultFramingErrorHandler:	
 17501                           
 17502                           ;incstack = 0
 17503                           ; Regs used in _EUSART_DefaultFramingErrorHandler: []
 17504  15E9  0008               	return
 17505  15EA                     __end_of_EUSART_DefaultFramingErrorHandler:	
 17506                           
 17507                           	psect	text116
 17508  15F1                     __ptext116:	
 17509 ;; *************** function _EUSART_DefaultErrorHandler *****************
 17510 ;; Defined at:
 17511 ;;		line 268 in file "mcc_generated_files/eusart.c"
 17512 ;; Parameters:    Size  Location     Type
 17513 ;;		None
 17514 ;; Auto vars:     Size  Location     Type
 17515 ;;		None
 17516 ;; Return value:  Size  Location     Type
 17517 ;;                  1    wreg      void 
 17518 ;; Registers used:
 17519 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17520 ;; Tracked objects:
 17521 ;;		On entry : 0/0
 17522 ;;		On exit  : 0/0
 17523 ;;		Unchanged: 0/0
 17524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17525 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17526 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17527 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17528 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17529 ;;Total ram usage:        0 bytes
 17530 ;; Hardware stack levels used:    1
 17531 ;; Hardware stack levels required when called:    1
 17532 ;; This function calls:
 17533 ;;		_EUSART_RxDataHandler
 17534 ;; This function is called by:
 17535 ;;		_EUSART_Initialize
 17536 ;;		_EUSART_Receive_ISR
 17537 ;; This function uses a non-reentrant model
 17538 ;;
 17539                           
 17540                           
 17541                           ;psect for function _EUSART_DefaultErrorHandler
 17542  15F1                     _EUSART_DefaultErrorHandler:	
 17543                           
 17544                           ;mcc_generated_files/eusart.c: 269:     EUSART_RxDataHandler();
 17545                           
 17546                           ;incstack = 0
 17547                           ; Regs used in _EUSART_DefaultErrorHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 17548  15F1  3197  27E9         	fcall	_EUSART_RxDataHandler
 17549  15F3  0008               	return
 17550  15F4                     __end_of_EUSART_DefaultErrorHandler:	
 17551                           
 17552                           	psect	text117
 17553  17E9                     __ptext117:	
 17554 ;; *************** function _EUSART_RxDataHandler *****************
 17555 ;; Defined at:
 17556 ;;		line 248 in file "mcc_generated_files/eusart.c"
 17557 ;; Parameters:    Size  Location     Type
 17558 ;;		None
 17559 ;; Auto vars:     Size  Location     Type
 17560 ;;		None
 17561 ;; Return value:  Size  Location     Type
 17562 ;;                  1    wreg      void 
 17563 ;; Registers used:
 17564 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17565 ;; Tracked objects:
 17566 ;;		On entry : 0/0
 17567 ;;		On exit  : 0/0
 17568 ;;		Unchanged: 0/0
 17569 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17570 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17571 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17572 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17573 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17574 ;;Total ram usage:        1 bytes
 17575 ;; Hardware stack levels used:    1
 17576 ;; This function calls:
 17577 ;;		Nothing
 17578 ;; This function is called by:
 17579 ;;		_EUSART_Receive_ISR
 17580 ;;		_EUSART_DefaultErrorHandler
 17581 ;; This function uses a non-reentrant model
 17582 ;;
 17583                           
 17584                           
 17585                           ;psect for function _EUSART_RxDataHandler
 17586  17E9                     _EUSART_RxDataHandler:	
 17587                           
 17588                           ;mcc_generated_files/eusart.c: 250:     eusartRxBuffer[eusartRxHead++] = RC1REG;
 17589                           
 17590                           ;incstack = 0
 17591                           ; Regs used in _EUSART_RxDataHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
 17592  17E9  0023               	movlb	3	; select bank3
 17593  17EA  0819               	movf	25,w	;volatile
 17594  17EB  00F6               	movwf	??_EUSART_RxDataHandler
 17595  17EC  0873               	movf	_eusartRxHead,w
 17596  17ED  3EBD               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
 17597  17EE  0086               	movwf	6
 17598  17EF  3001               	movlw	1	; select bank3/4
 17599  17F0  0087               	movwf	7
 17600  17F1  0876               	movf	??_EUSART_RxDataHandler,w
 17601  17F2  0081               	movwf	1
 17602  17F3  3001               	movlw	1
 17603  17F4  00F6               	movwf	??_EUSART_RxDataHandler
 17604  17F5  0876               	movf	??_EUSART_RxDataHandler,w
 17605  17F6  07F3               	addwf	_eusartRxHead,f	;volatile
 17606                           
 17607                           ;mcc_generated_files/eusart.c: 251:     if(sizeof(eusartRxBuffer) <= eusartRxHead)
 17608  17F7  3008               	movlw	8
 17609  17F8  0273               	subwf	_eusartRxHead,w	;volatile
 17610  17F9  1803               	btfsc	3,0
 17611                           
 17612                           ;mcc_generated_files/eusart.c: 252:     {;mcc_generated_files/eusart.c: 253:         eus
      +                          artRxHead = 0;
 17613  17FA  01F3               	clrf	_eusartRxHead	;volatile
 17614                           
 17615                           ;mcc_generated_files/eusart.c: 255:     eusartRxCount++;
 17616  17FB  3001               	movlw	1
 17617  17FC  00F6               	movwf	??_EUSART_RxDataHandler
 17618  17FD  0876               	movf	??_EUSART_RxDataHandler,w
 17619  17FE  07F1               	addwf	_eusartRxCount,f	;volatile
 17620  17FF  0008               	return
 17621  1800                     __end_of_EUSART_RxDataHandler:	
 17622  007E                     btemp	set	126	;btemp
 17623  007E                     int$flags	set	126
 17624  007E                     wtemp0	set	126


Data Sizes:
    Strings     52
    Constant    32
    Data        18
    BSS         160
    Persistent  45
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      12
    BANK0            80     58      80
    BANK1            80     64      79
    BANK2            80     64      80
    BANK3            80      2      66
    BANK4            80      0      68
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    i2c_ISR$2827	const PTR FTN()enum E7120 size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_SEND_ADR_READ(), do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), 
		 -> do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), do_I2C_IDLE(), do_I2C_RESET(), 

    returnStop@p	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    returnReset@p	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    S52$11$0	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 16
		 -> UART_Byte@bits(BANK0[5]), STR_4(CODE[11]), STR_3(CODE[16]), STR_2(CODE[13]), 
		 -> STR_1(CODE[12]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 16
		 -> UART_Byte@bits(BANK0[5]), STR_4(CODE[11]), STR_3(CODE[16]), STR_2(CODE[13]), 
		 -> STR_1(CODE[12]), 

    wireReadDataBlock@val	PTR unsigned char  size(2) Largest target is 64
		 -> readGesture@fifo_data2(BANK1[64]), readGesture@fifo_data(BANK2[64]), 

    Display_Name@string1	PTR unsigned char  size(2) Largest target is 16
		 -> STR_4(CODE[11]), STR_3(CODE[16]), STR_2(CODE[13]), STR_1(CODE[12]), 

    names	PTR unsigned char [4] size(2) Largest target is 16
		 -> STR_4(CODE[11]), STR_3(CODE[16]), STR_2(CODE[13]), STR_1(CODE[12]), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    EUSART_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), Absolute function(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), Absolute function(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), Absolute function(), 

    IOCAF4_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCAF4_DefaultInterruptHandler(), 

    IOCAF4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCAF4_DefaultInterruptHandler(), Absolute function(), 

    i2c1_driver_i2cISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), i2c_ISR(), 

    i2c1_driver_busCollisionISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), i2c_busCollisionISR(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), Absolute function(), 

    EUSART_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), Absolute function(), 

    fsmStateTable	const PTR FTN()enum E7120[16] size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_SEND_ADR_READ(), do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), 
		 -> do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), do_I2C_IDLE(), do_I2C_RESET(), 

    S52$callbackPayload	PTR void [6] size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    i2c_status.callbackPayload	PTR void [6] size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    S52$callbackTable	PTR FTN(PTR void ,)enum E6966[6] size(2) Largest target is 1
		 -> returnReset(), returnStop(), 

    i2c_status.callbackTable	PTR FTN(PTR void ,)enum E6966[6] size(2) Largest target is 1
		 -> returnReset(), returnStop(), 

    S52$data_ptr	PTR unsigned char  size(1) Largest target is 0

    i2c_status.data_ptr	PTR unsigned char  size(1) Largest target is 0


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_i2c_ISR
    _i2c_ISR->_do_I2C_DO_ADDRESS_NACK
    _i2c_ISR->_do_I2C_RX
    _i2c_ISR->_do_I2C_TX
    _i2c_ISR->_do_I2C_TX_EMPTY
    _EUSART_Receive_ISR->_EUSART_RxDataHandler
    _EUSART_DefaultErrorHandler->_EUSART_RxDataHandler

Critical Paths under _main in BANK0

    _main->_handleGesture
    _initialize->_setMode
    _setProximityGain->_wireWriteDataByte
    _setProxIntLowThresh->_wireWriteDataByte
    _setProxIntHighThresh->_wireWriteDataByte
    _setLightIntLowThreshold->_wireWriteDataByte
    _setLightIntHighThreshold->_wireWriteDataByte
    _setLEDDrive->_wireWriteDataByte
    _setGestureWaitTime->_wireWriteDataByte
    _setGestureLEDDrive->_wireWriteDataByte
    _setGestureGain->_wireWriteDataByte
    _setGestureExitThresh->_wireWriteDataByte
    _setGestureEnterThresh->_wireWriteDataByte
    _setAmbientLightGain->_wireWriteDataByte
    _handleGesture->_readGesture
    _readGesture->_processGestureData
    _wireReadDataBlock->_I2C_Write_Byte
    _processGestureData->___awdiv
    ___awdiv->___wmul
    _isGestureAvailable->_wireReadDataByte
    _enableGestureSensor->_setMode
    _setLEDBoost->_wireWriteDataByte
    _setGestureMode->_wireWriteDataByte
    _setGestureIntEnable->_wireWriteDataByte
    _enablePower->_setMode
    _setMode->_getMode
    _wireWriteDataByte->_I2C_Write_Byte
    _getMode->_wireReadDataByte
    _wireReadDataByte->_I2C_Write_Byte
    _I2C_Write_Byte->_i2c1_driver_TXData
    _I2C_Read_Byte->_i2c1_driver_isBufferFull
    _UART_Byte->_strlen
    _SYSTEM_Initialize->_EUSART_Initialize
    _PIN_MANAGER_Initialize->_IOCAF4_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _EUSART_Initialize->_EUSART_SetTxInterruptHandler
    _On_Off->_ADC_GetConversion
    _Get_ADC->_Display_Name
    _Noise->_PWM1_LoadDutyValue
    _Display_Name->_strlen
    _Display_Clear->_SPI_Write
    _Display_Brightness->_SPI_Write
    _SPI_Write->_SPI2_Exchange8bit

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _handleGesture->_readGesture

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    _handleGesture->_readGesture

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    _handleGesture->_readGesture

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   91694
                 _Display_Brightness
                      _Display_Clear
                       _Display_Name
                            _Get_ADC
                              _Noise
                             _On_Off
                         _PIR_Sensor
                  _SYSTEM_Initialize
                          _UART_Byte
                _enableGestureSensor
                      _handleGesture
                         _initialize
                 _isGestureAvailable
 ---------------------------------------------------------------------------------
 (1) _initialize                                           2     2      0   54520
                                             16 BANK0      2     2      0
                   _i2c1_driver_open
                _setAmbientLightGain
              _setGestureEnterThresh
               _setGestureExitThresh
                     _setGestureGain
                _setGestureIntEnable
                 _setGestureLEDDrive
                 _setGestureWaitTime
                        _setLEDDrive
           _setLightIntHighThreshold
            _setLightIntLowThreshold
                            _setMode
               _setProxIntHighThresh
                _setProxIntLowThresh
                   _setProximityGain
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setProximityGain                                     4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setProxIntLowThresh                                  2     2      0    3429
                                             10 BANK0      2     2      0
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setProxIntHighThresh                                 2     2      0    3429
                                             10 BANK0      2     2      0
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setLightIntLowThreshold                              5     3      2    3618
                                             10 BANK0      5     3      2
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setLightIntHighThreshold                             5     3      2    3618
                                             10 BANK0      5     3      2
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setLEDDrive                                          4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureWaitTime                                   3     3      0    3633
                                             10 BANK0      3     3      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureLEDDrive                                   4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureGain                                       4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureExitThresh                                 2     2      0    3429
                                             10 BANK0      2     2      0
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureEnterThresh                                2     2      0    3429
                                             10 BANK0      2     2      0
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setAmbientLightGain                                  3     3      0    3633
                                             10 BANK0      3     3      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _i2c1_driver_open                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _handleGesture                                        1     1      0    9242
                                             57 BANK0      1     1      0
                       _Display_Name
                              _Noise
                        _readGesture
 ---------------------------------------------------------------------------------
 (2) _readGesture                                        140   138      2    8036
                                             47 BANK0     10     8      2
                                              0 BANK1     64    64      0
                                              0 BANK2     64    64      0
                                              0 BANK3      2     2      0
                      _decodeGesture
                            _getMode
                 _isGestureAvailable
                 _processGestureData
             _resetGestureParameters
                  _wireReadDataBlock
                   _wireReadDataByte
 ---------------------------------------------------------------------------------
 (3) _wireReadDataBlock                                   11     7      4     651
                                              6 BANK0     11     7      4
                        _I2C_ReStart
                      _I2C_Read_Byte
                      _I2C_Send_NACK
                          _I2C_Start
                           _I2C_Stop
                     _I2C_Write_Byte
 ---------------------------------------------------------------------------------
 (3) _processGestureData                                  32    32      0    5864
                                             15 BANK0     32    32      0
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    2396
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              9     5      4    1165
                                              6 BANK0      9     5      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _isGestureAvailable                                   2     2      0     198
                                              9 BANK0      2     2      0
                   _wireReadDataByte
 ---------------------------------------------------------------------------------
 (3) _decodeGesture                                       18    18      0     296
                                              0 BANK0     18    18      0
 ---------------------------------------------------------------------------------
 (1) _enableGestureSensor                                  2     2      0   23076
                                             16 BANK0      2     2      0
                        _enablePower
             _resetGestureParameters
                _setGestureIntEnable
                     _setGestureMode
                        _setLEDBoost
                            _setMode
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setLEDBoost                                          4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureMode                                       3     3      0    3633
                                             10 BANK0      3     3      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureIntEnable                                  3     3      0    3667
                                             10 BANK0      3     3      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (3) _resetGestureParameters                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _enablePower                                          0     0      0    4340
                            _setMode
 ---------------------------------------------------------------------------------
 (2) _setMode                                              5     4      1    4340
                                             11 BANK0      5     4      1
                            _getMode
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _wireWriteDataByte                                    4     1      3    3398
                                              6 BANK0      4     1      3
                          _I2C_Start
                           _I2C_Stop
                     _I2C_Write_Byte
 ---------------------------------------------------------------------------------
 (3) _getMode                                              2     2      0     195
                                              9 BANK0      2     2      0
                   _wireReadDataByte
 ---------------------------------------------------------------------------------
 (2) _wireReadDataByte                                     3     3      0     161
                                              6 BANK0      3     3      0
                        _I2C_ReStart
                      _I2C_Read_Byte
                      _I2C_Send_NACK
                          _I2C_Start
                           _I2C_Stop
                     _I2C_Write_Byte
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Byte                                       5     5      0      96
                                              1 BANK0      5     5      0
                 _i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_TXData                                   1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _I2C_Stop                                             0     0      0       0
                   _i2c1_driver_stop
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_stop                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_Start                                            0     0      0       0
                  _i2c1_driver_start
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_start                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_Send_NACK                                        0     0      0       0
               _i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_sendNACK                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_Read_Byte                                        0     0      0       0
              _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
                _i2c1_driver_startRX
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_startRX                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_isBufferFull                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_getRXData                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_ReStart                                          0     0      0       0
                _i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_restart                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UART_Byte                                           16    16      0     736
                                              5 BANK0     16    16      0
                             _strlen
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     726
                     _ADC_Initialize
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PMD_Initialize
                    _PWM1_Initialize
                    _SPI2_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SPI2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PMD_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0     121
         _IOCAF4_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _IOCAF4_SetInterruptHandler                           2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0     605
                                              2 BANK0      1     1      0
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetTxInterruptHandler                         2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PIR_Sensor                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _On_Off                                               5     5      0     316
                                              4 BANK0      5     5      0
                  _ADC_GetConversion
                              _Noise
 ---------------------------------------------------------------------------------
 (1) _Get_ADC                                              5     5      0    1550
                                             12 BANK0      5     5      0
                  _ADC_GetConversion
                       _Display_Name
                              _Noise
 ---------------------------------------------------------------------------------
 (2) _Noise                                                1     1      0     220
                                              2 BANK0      1     1      0
                 _PWM1_LoadDutyValue
 ---------------------------------------------------------------------------------
 (3) _PWM1_LoadDutyValue                                   2     0      2     220
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _Display_Name                                         7     5      2     986
                                              5 BANK0      7     5      2
                          _SPI_Write
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _strlen                                               5     3      2     310
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _ADC_GetConversion                                    4     2      2      31
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _Display_Clear                                        0     0      0      62
                          _SPI_Write
 ---------------------------------------------------------------------------------
 (1) _Display_Brightness                                   0     0      0      62
                          _SPI_Write
 ---------------------------------------------------------------------------------
 (3) _SPI_Write                                            1     1      0      62
                                              1 BANK0      1     1      0
                  _SPI2_Exchange8bit
 ---------------------------------------------------------------------------------
 (4) _SPI2_Exchange8bit                                    1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                           0     0      0     914
                   Absolute function *
                 _EUSART_Receive_ISR *
                _EUSART_Transmit_ISR *
                    _PIN_MANAGER_IOC
                            _i2c_ISR *
                _i2c_busCollisionISR *
 ---------------------------------------------------------------------------------
 (9) _i2c_busCollisionISR                                  0     0      0       0
      _i2c1_driver_clearBusCollision
 ---------------------------------------------------------------------------------
 (10) _i2c1_driver_clearBusCollision                       0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _i2c_ISR                                              3     3      0     914
                                              3 COMMON     3     3      0
                      _do_I2C_DO_ACK *
             _do_I2C_DO_ADDRESS_NACK *
             _do_I2C_DO_NACK_RESTART *
                _do_I2C_DO_NACK_STOP *
                        _do_I2C_IDLE *
                        _do_I2C_RCEN *
                       _do_I2C_RESET *
                          _do_I2C_RX *
               _do_I2C_SEND_ADR_READ *
              _do_I2C_SEND_ADR_WRITE *
                _do_I2C_SEND_RESTART *
           _do_I2C_SEND_RESTART_READ *
          _do_I2C_SEND_RESTART_WRITE *
                   _do_I2C_SEND_STOP *
                          _do_I2C_TX *
                    _do_I2C_TX_EMPTY *
                 _i2c1_driver_isNACK
                     _mssp1_clearIRQ
 ---------------------------------------------------------------------------------
 (10) _mssp1_clearIRQ                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_TX_EMPTY                                     3     3      0     212
                                              0 COMMON     3     3      0
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                       _mssp1_setIRQ
                        _returnReset *
                         _returnStop *
 ---------------------------------------------------------------------------------
 (11) _mssp1_setIRQ                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_TX                                           3     3      0     234
                                              0 COMMON     3     3      0
           _do_I2C_SEND_RESTART_READ
          _do_I2C_SEND_RESTART_WRITE
                   _do_I2C_SEND_STOP
                 _i2c1_driver_isNACK
                        _returnReset *
                         _returnStop *
               i1_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (10) _i2c1_driver_isNACK                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _do_I2C_SEND_RESTART_WRITE                           0     0      0       0
              i1_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (11) _do_I2C_SEND_RESTART_READ                            0     0      0       0
              i1_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (10) _do_I2C_SEND_ADR_WRITE                               0     0      0      22
               i1_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (10) _do_I2C_SEND_ADR_READ                                0     0      0      22
               i1_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (11) i1_i2c1_driver_TXData                                1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_RX                                           3     3      0     212
                                              0 COMMON     3     3      0
             _do_I2C_DO_NACK_RESTART
                _do_I2C_DO_NACK_STOP
                _i2c1_driver_sendACK
                        _returnReset *
                         _returnStop *
            i1_i2c1_driver_getRXData
 ---------------------------------------------------------------------------------
 (11) i1_i2c1_driver_getRXData                             0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _do_I2C_DO_NACK_STOP                                 0     0      0       0
             i1_i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (11) _do_I2C_DO_NACK_RESTART                              0     0      0       0
             i1_i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (12) i1_i2c1_driver_sendNACK                              0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_RESET                                        0     0      0       0
               _i2c1_driver_resetBus
 ---------------------------------------------------------------------------------
 (11) _i2c1_driver_resetBus                                0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_RCEN                                         0     0      0       0
              i1_i2c1_driver_startRX
 ---------------------------------------------------------------------------------
 (11) i1_i2c1_driver_startRX                               0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_IDLE                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_DO_ADDRESS_NACK                              3     3      0     212
                                              0 COMMON     3     3      0
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                        _returnReset *
                         _returnStop *
 ---------------------------------------------------------------------------------
 (11) _returnStop                                          1     0      1       0
                                              0 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (11) _returnReset                                         1     0      1     212
                                              0 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (11) _do_I2C_SEND_STOP                                    0     0      0       0
                 i1_i2c1_driver_stop
 ---------------------------------------------------------------------------------
 (12) i1_i2c1_driver_stop                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _do_I2C_SEND_RESTART                                 0     0      0       0
              i1_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (12) i1_i2c1_driver_restart                               0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_DO_ACK                                       0     0      0       0
                _i2c1_driver_sendACK
 ---------------------------------------------------------------------------------
 (11) _i2c1_driver_sendACK                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _PIN_MANAGER_IOC                                      0     0      0       0
                         _IOCAF4_ISR
 ---------------------------------------------------------------------------------
 (10) _IOCAF4_ISR                                          0     0      0       0
                   Absolute function *
     _IOCAF4_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (11) _IOCAF4_DefaultInterruptHandler                      0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (9) _EUSART_Receive_ISR                                   0     0      0       0
                   Absolute function *
         _EUSART_DefaultErrorHandler *
  _EUSART_DefaultFramingErrorHandler *
  _EUSART_DefaultOverrunErrorHandler *
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (10) _EUSART_DefaultOverrunErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _EUSART_DefaultFramingErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _EUSART_DefaultErrorHandler                          0     0      0       0
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (10) _EUSART_RxDataHandler                                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Display_Brightness
     _SPI_Write
       _SPI2_Exchange8bit
   _Display_Clear
     _SPI_Write
       _SPI2_Exchange8bit
   _Display_Name
     _SPI_Write
       _SPI2_Exchange8bit
     _strlen
   _Get_ADC
     _ADC_GetConversion
     _Display_Name
       _SPI_Write
         _SPI2_Exchange8bit
       _strlen
     _Noise
       _PWM1_LoadDutyValue
   _Noise
     _PWM1_LoadDutyValue
   _On_Off
     _ADC_GetConversion
     _Noise
       _PWM1_LoadDutyValue
   _PIR_Sensor
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
       _IOCAF4_SetInterruptHandler
     _PMD_Initialize
     _PWM1_Initialize
     _SPI2_Initialize
     _TMR2_Initialize
     _WDT_Initialize
   _UART_Byte
     _strlen
   _enableGestureSensor
     _enablePower
       _setMode
         _getMode
           _wireReadDataByte
             _I2C_ReStart
               _i2c1_driver_restart
             _I2C_Read_Byte
               _i2c1_driver_getRXData
               _i2c1_driver_isBufferFull
               _i2c1_driver_startRX
             _I2C_Send_NACK
               _i2c1_driver_sendNACK
             _I2C_Start
               _i2c1_driver_start
             _I2C_Stop
               _i2c1_driver_stop
             _I2C_Write_Byte
               _i2c1_driver_TXData
         _wireWriteDataByte
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
     _resetGestureParameters
     _setGestureIntEnable
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureMode
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setLEDBoost
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setMode
       _getMode
         _wireReadDataByte
           _I2C_ReStart
             _i2c1_driver_restart
           _I2C_Read_Byte
             _i2c1_driver_getRXData
             _i2c1_driver_isBufferFull
             _i2c1_driver_startRX
           _I2C_Send_NACK
             _i2c1_driver_sendNACK
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _wireWriteDataByte
       _I2C_Start
         _i2c1_driver_start
       _I2C_Stop
         _i2c1_driver_stop
       _I2C_Write_Byte
         _i2c1_driver_TXData
   _handleGesture
     _Display_Name
       _SPI_Write
         _SPI2_Exchange8bit
       _strlen
     _Noise
       _PWM1_LoadDutyValue
     _readGesture
       _decodeGesture
       _getMode
         _wireReadDataByte
           _I2C_ReStart
             _i2c1_driver_restart
           _I2C_Read_Byte
             _i2c1_driver_getRXData
             _i2c1_driver_isBufferFull
             _i2c1_driver_startRX
           _I2C_Send_NACK
             _i2c1_driver_sendNACK
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
       _isGestureAvailable
         _wireReadDataByte
           _I2C_ReStart
             _i2c1_driver_restart
           _I2C_Read_Byte
             _i2c1_driver_getRXData
             _i2c1_driver_isBufferFull
             _i2c1_driver_startRX
           _I2C_Send_NACK
             _i2c1_driver_sendNACK
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
       _processGestureData
         ___awdiv
           ___wmul (ARG)
         ___wmul
       _resetGestureParameters
       _wireReadDataBlock
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
   _initialize
     _i2c1_driver_open
     _setAmbientLightGain
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureEnterThresh
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureExitThresh
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureGain
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureIntEnable
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureLEDDrive
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureWaitTime
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setLEDDrive
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setLightIntHighThreshold
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setLightIntLowThreshold
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setMode
       _getMode
         _wireReadDataByte
           _I2C_ReStart
             _i2c1_driver_restart
           _I2C_Read_Byte
             _i2c1_driver_getRXData
             _i2c1_driver_isBufferFull
             _i2c1_driver_startRX
           _I2C_Send_NACK
             _i2c1_driver_sendNACK
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setProxIntHighThresh
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setProxIntLowThresh
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setProximityGain
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _wireReadDataByte
       _I2C_ReStart
         _i2c1_driver_restart
       _I2C_Read_Byte
         _i2c1_driver_getRXData
         _i2c1_driver_isBufferFull
         _i2c1_driver_startRX
       _I2C_Send_NACK
         _i2c1_driver_sendNACK
       _I2C_Start
         _i2c1_driver_start
       _I2C_Stop
         _i2c1_driver_stop
       _I2C_Write_Byte
         _i2c1_driver_TXData
     _wireWriteDataByte
       _I2C_Start
         _i2c1_driver_start
       _I2C_Stop
         _i2c1_driver_stop
       _I2C_Write_Byte
         _i2c1_driver_TXData
   _isGestureAvailable
     _wireReadDataByte
       _I2C_ReStart
         _i2c1_driver_restart
       _I2C_Read_Byte
         _i2c1_driver_getRXData
         _i2c1_driver_isBufferFull
         _i2c1_driver_startRX
       _I2C_Send_NACK
         _i2c1_driver_sendNACK
       _I2C_Start
         _i2c1_driver_start
       _I2C_Stop
         _i2c1_driver_stop
       _I2C_Write_Byte
         _i2c1_driver_TXData

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART_Receive_ISR *
     Absolute function(Fake) *
     _EUSART_DefaultErrorHandler *
       _EUSART_RxDataHandler
     _EUSART_DefaultFramingErrorHandler *
     _EUSART_DefaultOverrunErrorHandler *
     _EUSART_RxDataHandler *
   _EUSART_Transmit_ISR *
   _PIN_MANAGER_IOC *
     _IOCAF4_ISR
       Absolute function(Fake) *
       _IOCAF4_DefaultInterruptHandler *
   _i2c_ISR *
     _do_I2C_DO_ACK *
       _i2c1_driver_sendACK
     _do_I2C_DO_ADDRESS_NACK *
       _do_I2C_SEND_RESTART
         i1_i2c1_driver_restart
       _do_I2C_SEND_STOP
         i1_i2c1_driver_stop
       _returnReset *
       _returnStop *
     _do_I2C_DO_NACK_RESTART *
       i1_i2c1_driver_sendNACK
     _do_I2C_DO_NACK_STOP *
       i1_i2c1_driver_sendNACK
     _do_I2C_IDLE *
     _do_I2C_RCEN *
       i1_i2c1_driver_startRX
     _do_I2C_RESET *
       _i2c1_driver_resetBus
     _do_I2C_RX *
       _do_I2C_DO_NACK_RESTART
         i1_i2c1_driver_sendNACK
       _do_I2C_DO_NACK_STOP
         i1_i2c1_driver_sendNACK
       _i2c1_driver_sendACK
       _returnReset *
       _returnStop *
       i1_i2c1_driver_getRXData *
     _do_I2C_SEND_ADR_READ *
       i1_i2c1_driver_TXData
     _do_I2C_SEND_ADR_WRITE *
       i1_i2c1_driver_TXData
     _do_I2C_SEND_RESTART *
       i1_i2c1_driver_restart
     _do_I2C_SEND_RESTART_READ *
       i1_i2c1_driver_restart
     _do_I2C_SEND_RESTART_WRITE *
       i1_i2c1_driver_restart
     _do_I2C_SEND_STOP *
       i1_i2c1_driver_stop
     _do_I2C_TX *
       _do_I2C_SEND_RESTART_READ
         i1_i2c1_driver_restart
       _do_I2C_SEND_RESTART_WRITE
         i1_i2c1_driver_restart
       _do_I2C_SEND_STOP
         i1_i2c1_driver_stop
       _i2c1_driver_isNACK
       _returnReset *
       _returnStop *
       i1_i2c1_driver_TXData *
     _do_I2C_TX_EMPTY *
       _do_I2C_SEND_RESTART
         i1_i2c1_driver_restart
       _do_I2C_SEND_STOP
         i1_i2c1_driver_stop
       _mssp1_setIRQ
       _returnReset *
       _returnStop *
     _i2c1_driver_isNACK *
     _mssp1_clearIRQ *
   _i2c_busCollisionISR *
     _i2c1_driver_clearBusCollision

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     3A      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     40      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     40      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      2      42      11       82.5%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      44      13       85.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     181      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     181      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Wed Apr 24 11:06:12 2019

                ?_EUSART_SetRxInterruptHandler 0020                                   returnReset@p 0076  
                        ?_setGestureExitThresh 0076                             __size_of_I2C_Start 0003  
                                  __CFG_CP$OFF 0000                                   ___awdiv@sign 002C  
                         __size_of_do_I2C_IDLE 0005                                             _on 006A  
                          _do_I2C_SEND_RESTART 163B                           __size_of_do_I2C_RCEN 0006  
                          ___wmul@multiplicand 0022                                    __CFG_LVP$ON 0000  
                                          l577 175F               processGestureData@ud_ratio_first 0031  
                                          l668 090A                                            l958 0E0E  
                                          l994 0BF6                                            _PR2 001E  
                                 __CFG_CPD$OFF 0000                         ??_EUSART_RxDataHandler 0076  
                        __end_of_decodeGesture 0505                           __size_of_I2C_ReStart 0003  
               ?_EUSART_SetFramingErrorHandler 0020                        __size_of_PMD_Initialize 0008  
                           I2C_Write_Byte@Byte 0023                                _TMR2_Initialize 16C9  
                        __size_of_do_I2C_RESET 0007                                            wreg 0009  
                                   _TXSTA1bits 019E                             i1_i2c1_driver_stop 15F7  
                                         l1044 0EF3                                           l1320 02A7  
                                         l1401 04F4                                           l1322 02CD  
                                         l1340 035F                                           l1316 027E  
                                         l1335 031E                                           l1328 02FF  
                                         l1361 03E4                                           l1339 0347  
                                         l1373 0435                                           l1365 0401  
                                         l1293 00C3                                           l1632 08C9  
                                         l1385 0488                                           l1377 0452  
                                         l1468 08AD                                           l1397 04D7  
                                         l1389 04A5                                           l7024 0BD9  
                                         l7032 0F13                                           l7200 17AC  
                                         l7050 0F2A                                           l7042 0F17  
                                         l7130 17D2                                           l6404 08C3  
                                         l7036 0FD1                                           l7140 17BF  
                                         l6350 171C                                           l6430 07BB  
                                         l7070 0F5B                                           l7150 0A0A  
                                         l6512 085B                                           l6344 08B0  
                                         l6440 07C3                                           l6424 07B0  
                                         l7072 0FC5                                           l6514 0867  
                                         l6522 0DB6                                           l6442 07CF  
                                         l6610 0119                                           l7058 0F4D  
                                         l7218 0B56                                           l7170 09E3  
                                         l7154 0A0C                                           l7308 09A4  
                                         l6452 07EA                                           l7076 0FCE  
                                         l7236 0B88                                           l6542 0DE9  
                                         l6534 0DD0                                           l6526 0DB8  
                                         l7318 1755                                           l7190 1799  
                                         l7254 09CB                                           l7174 09E5  
                                         l6544 0DEA                                           l6536 0DDD  
                                         l7272 0AC1                                           l6456 07F2  
                                         l6448 07E1                                           l6720 0319  
                                         l6624 0134                                           l6608 00BF  
                                         l6378 1764                                           l7290 0B24  
                                         l6642 017E                                           l6468 081F  
                                         l7620 06AB                                           l7604 067B  
                                         l6804 0430                                           l6708 02F2  
                                         l6716 0301                                           l6660 0231  
                                         l7700 0785                                           l7534 0D08  
                                         l7374 1770                                           l6822 0483  
                                         l6814 045F                                           l6726 0342  
                                         l6670 0256                                           l6662 0234  
                                         l6638 0130                                           l7702 07A2  
                                         l7632 06DB                                           l6840 04D2  
                                         l6832 04B2                                           l6808 044D  
                                         l6760 0399                                           l6680 0279  
                                         l6672 0259                                           l6656 021F  
                                         l6592 00B4                                           l6576 0D21  
                                         l7392 0518                                           l7618 06A2  
                                         l7570 0EE3                                           l6850 0501  
                                         l6826 04A0                                           l6770 03AB  
                                         l6754 038C                                           l6498 1786  
                                         l6666 0244                                           l6578 0D50  
                                         l7802 0E38                                           l7492 0E77  
                                         l6844 04EF                                           l6772 03AD  
                                         l6764 03A1                                           l6748 0380  
                                         l6588 00B2                                           l7660 0727  
                                         l7652 071A                                           l7646 070A  
                                         l6790 03FC                                           l6766 03A3  
                                         l6854 0503                                           l6758 0397  
                                         l6694 02C0                                           l6686 02A2  
                                         l7648 0716                                           l7592 0656  
                                         l6776 03B7                                           l7680 0764  
                                         l6786 03DF                                           l6778 03BD  
                                         l6698 02C8                                           l7690 0773  
                                         l7588 0652                                           l6796 040E  
                                         l7692 0780                                           l7668 073F  
                                         l7942 078E                                           l7678 0756  
                                         l7782 0DFF                                           l6998 090F  
                                         STR_1 181D                                           STR_2 1810  
                                         STR_3 1800                                           STR_4 1829  
                      __end_of_PWM1_Initialize 173C                                           _LATA 010C  
                                         _LATB 010D                                           _LATC 010E  
                                         u5105 07D0                                           u5025 08CA  
                                         u5115 07DA                                           u5035 08CF  
                                         u6005 04E0                                           u5125 07E2  
                                         u6015 04FE                                           u5224 0DC9  
                                         u5225 0DC8                                           u5234 0DD5  
                                         u5235 0DD4                                           u6115 0F56  
                                         _PMD0 0911                                           u6045 0BE3  
                                         u5165 081B                                           u5085 07C6  
                                         u6125 0F67                                           _PMD1 0912  
                                         _PMD2 0913                                           _PMD3 0914  
                                         _PMD4 0915                                           u6305 0B05  
                                         u6145 0A2C                                           _PMD5 0916  
                                         u5515 026A                                           u5355 00CE  
                                         u5275 0D2A                                           u7107 0FD5  
                                         u6155 0A55                                           u5605 02E5  
                                         u5525 0287                                           u7117 0FE8  
                                         u6245 0B37                                           u7127 0837  
                                         u5535 0293                                           u5455 0218  
                                         u7137 0BC3                                           u5545 02B0  
                                         u5465 0229                                           u6265 0B69  
                                         u7147 1729                                           u5715 0368  
                                         u5475 023D                                           u7157 17D9  
                                         u5485 024E                                           u7167 17E1  
                                         u5655 030A                                           u7177 080D  
                                         u6705 0CE9                                           u5905 043E  
                                         u5665 0327                                           u7097 0781  
                                         u6730 0ECA                                           u6715 0CF5  
                                         u5915 045C                                           u5675 0333  
                                         u5595 02D7                                           u6805 0660  
                                         u5845 03D0                                           u5685 0350  
                         ?_do_I2C_SEND_RESTART 0076                                           u6815 066C  
                                         u5855 03ED                                           u6905 06F1  
                                         u5945 0474                                           u5865 040B  
                                         u6915 0705                                           u6835 0685  
                                         u6755 0EF1                                           u5955 0491  
                                         u6845 0691                                           u6765 061E  
                                         u5965 04AF                                           u6775 0636  
                                         u6695 0CD1                                           u5895 0421  
                                         u6865 06B5                                           u6785 0642  
                                         u6945 0751                                           u6875 06C1  
                                         u5995 04C3                                           u6895 06E5  
                                         _TMR2 001D                                           _WPUA 020C  
                                         _WPUB 020D                                           _WPUC 020E  
                                 __CFG_WRT$OFF 0000                                  __CFG_FCMEN$ON 0000  
            __size_of_do_I2C_SEND_RESTART_READ 0004                            ?i1_i2c1_driver_stop 0076  
                    ?_do_I2C_SEND_RESTART_READ 0076                                           _main 0DF9  
                                         _name 005A                      __size_of_do_I2C_SEND_STOP 0004  
                       __size_of_do_I2C_DO_ACK 0004                                           fsr0h 0005  
                                         fsr1h 0007                                           indf0 0000  
                                         fsr0l 0004                                           indf1 0001  
                                         _prox 00E0                                           fsr1l 0006  
                                         btemp 007E                          ??_setGestureIntEnable 002A  
                             __end_of_I2C_Stop 1627                                  __CFG_BOREN$ON 0000  
                      i1_i2c1_driver_getRXData 15FD                          ?_do_I2C_SEND_ADR_READ 0076  
                                __CFG_BORV$LOW 0000                ??_i2c1_driver_clearBusCollision 0076  
                                         start 0047                                __end_of_Get_ADC 0719  
                          I2C_Write_Byte@count 0024                                  __CFG_CSWEN$ON 0000  
                                __CFG_MCLRE$ON 0000                                __end_of_i2c_ISR 097F  
                     ??_do_I2C_DO_NACK_RESTART 0076                                   ?_readGesture 004F  
                                 _do_I2C_RESET 1685                 __size_of_OSCILLATOR_Initialize 0008  
                          __size_of_IOCAF4_ISR 000D                  __end_of_OSCILLATOR_Initialize 16C1  
                         ??i1_i2c1_driver_stop 0076                                          _ADACT 009F  
                     __end_of_i2c1_driver_open 1719                                          ?_main 0076  
                              __end_of___awdiv 07F7                       __end_of_i2c1_driver_stop 1624  
                              ___awdiv@divisor 0026                                          _T2CON 001F  
                   __end_of_i2c1_driver_TXData 1673                                 __CFG_DEBUG$OFF 0000  
                                        i1l252 001F                                          i1l157 0D8E  
                                        i1l173 0C9B                                          i1l261 0045  
                                        i1l254 002C                                          i1l256 0039  
                                        i1l249 0010                                          i1l807 08F7  
                                 ?_setLEDBoost 0076                                ___awdiv@counter 002B  
                                 ?_setLEDDrive 0076                                 _setGestureGain 0B26  
                                        _OSCEN 091D                             wireReadDataBlock@j 0030  
                               _setGestureMode 097F                                          _TRISA 008C  
                                        _TRISB 008D                                          _TRISC 008E  
                  __end_of_setProxIntLowThresh 17D4                                __end_of_getMode 0800  
                                        _Noise 0828                             __size_of_UART_Byte 005E  
                                  ?_PIR_Sensor 0076                          isGestureAvailable@val 002A  
                      __end_of_PIN_MANAGER_IOC 1667                     __end_of_i2c1_driver_isNACK 16A9  
                       __size_of_I2C_Read_Byte 000B                                 _WDT_Initialize 164F  
                                        _names 01D2                                          _dummy 00ED  
                             _b_i2c_error_flag 0066                   __end_of_setProxIntHighThresh 17C1  
                   ?_do_I2C_SEND_RESTART_WRITE 0076                                          _start 006E  
                        ??_do_I2C_SEND_RESTART 0076                                __end_of_setMode 0DF9  
                            __end_of_I2C_Start 1621                                          pclath 000A  
                      __size_of_mssp1_clearIRQ 0003                           i1_i2c1_driver_TXData 1657  
                 __size_of_setAmbientLightGain 001E                         ?_do_I2C_SEND_ADR_WRITE 0076  
                       __size_of_I2C_Send_NACK 0003                                          status 0003  
                                        wtemp0 007E                             __size_of_SPI_Write 0010  
                     ?_setLightIntLowThreshold 002A                     __end_of_setGestureLEDDrive 0B8A  
                        setGestureWaitTime@val 002C                                  _fsmStateTable 1000  
                                _gesture_data_ 0220                                __initialization 0049  
                       ??_setGestureExitThresh 002A                              _SPI2_Exchange8bit 1757  
                   processGestureData@lr_delta 004B                                     _i2c_status 01A0  
                                 __end_of_main 0E4A                              _handleGestureFlag 0067  
                   processGestureData@ud_delta 0049                             ?_SPI2_Exchange8bit 0076  
                      __end_of_TMR2_Initialize 16D1                    ?_INTERRUPT_InterruptManager 0076  
                       __end_of_setGestureGain 0B58                      __size_of_setProximityGain 0029  
               ??_EUSART_SetRxInterruptHandler 0022                         __end_of_setGestureMode 09A6  
                                _do_I2C_DO_ACK 1643                                         ??_main 005A  
                __size_of_i2c1_driver_sendNACK 0004                       __size_of_SPI2_Initialize 0007  
                          ??_SPI2_Exchange8bit 0020                        _IOCAF4_InterruptHandler 00EA  
            __size_of_setLightIntHighThreshold 0027                  __size_of_i2c1_driver_resetBus 0001  
                       __end_of_WDT_Initialize 1653                    __size_of_Display_Brightness 0015  
                      ?_do_I2C_DO_ADDRESS_NACK 0076                      ?_setLightIntHighThreshold 002A  
                                       ?_Noise 0076              setLightIntHighThreshold@threshold 002A  
                         __end_of_Display_Name 0BFA                           __size_of_enablePower 000E  
    __end_of_EUSART_DefaultFramingErrorHandler 15EA     __size_of_EUSART_DefaultFramingErrorHandler 0001  
          ??_EUSART_DefaultFramingErrorHandler 0076             ?_EUSART_DefaultFramingErrorHandler 0076  
            _EUSART_DefaultFramingErrorHandler 15E9                                         _ADCON0 009D  
                                       _ADCON1 009E                     _EUSART_OverrunErrorHandler 01DC  
                                       _ADRESH 009C                                         _ADRESL 009B  
                                       _CCPR1H 0292                                         _CCPR1L 0291  
                             ___awdiv@dividend 0028                             _processGestureData 00A4  
                                       _ANSELA 018C                                         _ANSELB 018D  
                                       _ANSELC 018E                             __CFG_RSTOSC$HFINT1 0000  
                 setProxIntLowThresh@threshold 002B                          ?i1_i2c1_driver_TXData 0076  
                                       _RC1REG 0199                                         _RA4PPS 0E94  
                                       _RC1STA 019D                                         _RC2PPS 0EA2  
                                       _RB6PPS 0E9E                               ?_PWM1_Initialize 0076  
                                       _RB7PPS 0E9F                                         _RC5PPS 0EA5  
                                       _ODCONA 028C                                         _ODCONB 028D  
                                       _RC6PPS 0EA6                                         _ODCONC 028E  
                                       i1l5000 0C9D                                         i1l5010 0CA3  
                                       i1l5020 0AC6                                         i1l5004 0CA0  
                                       i1l5030 0ACD                                         i1l5024 0AC9  
                                       i1l5036 0AD0                                         i1l5170 1746  
                                       i1l5622 0B9E                                         i1l5632 0BBB  
                                       i1l5536 0969                                         i1l5628 0BAC  
                                       i1l4934 0A74                      ??i1_i2c1_driver_getRXData 0076  
                                       i1l4944 0A7A                                         i1l4960 0D64  
                                       i1l4938 0A77                                         i1l4970 0D6A  
                                       i1l4964 0D67                                         i1l4956 0D61  
                                       i1l4978 0DA8                                         i1l7950 0AE5  
                                       i1l7944 0CB8                                         i1l7946 0D80  
                                       i1l7948 0A8F                                      ??_Get_ADC 002C  
                             _wireReadDataByte 0935                                         _OSCFRQ 091F  
                      ?_resetGestureParameters 0076                         ??_do_I2C_SEND_ADR_READ 0076  
                                       _TX1REG 019A                                         _WDTCON 0097  
                                       _TX1STA 019E                                      ??_i2c_ISR 0079  
                                       _TXREG1 019A                            ?_processGestureData 0076  
                            _gesture_lr_delta_ 0062                                 __CFG_PWRTE$OFF 0000  
                setProxIntHighThresh@threshold 002B                      __end_of_SPI2_Exchange8bit 1766  
                                       _On_Off 0CC7                              _gesture_lr_count_ 005E  
                          wireReadDataByte@reg 0027                          _i2c1_driver_getRXData 1612  
                          wireReadDataByte@val 0028                              _gesture_ud_delta_ 0064  
                            __end_of_UART_Byte 0F04                    __end_of_do_I2C_DO_NACK_STOP 164B  
                                _I2C_Read_Byte 1719                     __end_of_isGestureAvailable 1788  
                            _gesture_ud_count_ 0060                            __size_of_PIR_Sensor 000F  
                                       ___wmul 08C0                                      ??___awdiv 002A  
        __end_of_i2c1_driver_clearBusCollision 1609         __size_of_i2c1_driver_clearBusCollision 0003  
                _i2c1_driver_clearBusCollision 1606                     __end_of_setGestureWaitTime 09CD  
                               __CFG_STVREN$ON 0000                __size_of_do_I2C_DO_NACK_RESTART 0004  
                          _EUSART_Transmit_ISR 08DC                               ___awdiv@quotient 002D  
                               ?_do_I2C_DO_ACK 0076                                ?_setGestureGain 0076  
                                _I2C_Send_NACK 1618                                      ??_getMode 0029  
                                       _toggle 016E                                ?_setGestureMode 0076  
                                       _strlen 0856                        ??_setGestureEnterThresh 002A  
                         ??_processGestureData 002F                              __end_of_SPI_Write 0811  
                  __end_of_i2c1_driver_sendACK 162F                                 _PMD_Initialize 16C1  
               __end_of_do_I2C_DO_ADDRESS_NACK 0A98                                      ?_I2C_Stop 0076  
                           Display_Name@length 0028                                      ??_setMode 002C  
                              ?_WDT_Initialize 0076                    __end_of_i2c1_driver_restart 160F  
                                 ?_returnReset 0076                       ADC_GetConversion@channel 0023  
                            readGesture@motion 0053                    __end_of_i2c1_driver_startRX 1618  
   IOCAF4_SetInterruptHandler@InterruptHandler 0020                               ?_PIN_MANAGER_IOC 0076  
                                 ??_IOCAF4_ISR 0076                           ?_EUSART_Transmit_ISR 0076  
               __end_of_resetGestureParameters 0856                              _SYSTEM_Initialize 086E  
                      __end_of__initialization 00A0                               _do_I2C_SEND_STOP 163F  
                           __size_of_do_I2C_RX 0046                             __size_of_do_I2C_TX 004F  
                           ?_SYSTEM_Initialize 0076                         setGestureWaitTime@time 002B  
                     __size_of_do_I2C_TX_EMPTY 0031                    PWM1_LoadDutyValue@dutyValue 0020  
         __end_of_EUSART_SetTxInterruptHandler 1706          __size_of_EUSART_SetTxInterruptHandler 0009  
                 _EUSART_SetTxInterruptHandler 16FD                                 ?_I2C_Read_Byte 0076  
                               __pcstackCOMMON 0076                                  __end_of_Noise 083F  
                                 __pidataBANK0 167F                                   __pidataBANK1 0002  
                                 __pidataBANK2 15EF                                   __pidataBANK3 16D1  
                          ??_SYSTEM_Initialize 0023                          i1i2c1_driver_TXData@d 0076  
       __end_of_IOCAF4_DefaultInterruptHandler 15EB        __size_of_IOCAF4_DefaultInterruptHandler 0001  
               _IOCAF4_DefaultInterruptHandler 15EA                           _setProxIntHighThresh 17AE  
                               _gesture_state_ 00E2                             _PWM1_LoadDutyValue 0811  
                               ?_I2C_Send_NACK 0076                               ?_TMR2_Initialize 0076  
                        i1_i2c1_driver_restart 15F4                         __end_of_PMD_Initialize 16C9  
                           __end_of_IOCAF4_ISR 1749                          i1_i2c1_driver_startRX 15FA  
                         __size_of_readGesture 00FC                          __end_of_handleGesture 07A5  
            __size_of_i2c1_driver_isBufferFull 0007                                     ??_I2C_Stop 0020  
                         _eusartRxStatusBuffer 0160                            ?_PWM1_LoadDutyValue 0020  
                    ?_i2c1_driver_isBufferFull 0076                                        ??_Noise 0022  
                           _gesture_far_count_ 00E4                           __size_of_setLEDBoost 0032  
                         __size_of_setLEDDrive 0029                ??_EUSART_SetOverrunErrorHandler 0022  
                       _do_I2C_DO_NACK_RESTART 164B                         ??i1_i2c1_driver_TXData 0076  
                    __end_of_SYSTEM_Initialize 0889                          ??_EUSART_Transmit_ISR 0076  
                            ??_SPI2_Initialize 0020                                 _mssp1_clearIRQ 1603  
                                   __pbssBANK0 005A                                     __pbssBANK1 00E0  
                                   __pbssBANK2 0160                                     __pbssBANK3 01A0  
                                   __pbssBANK4 0220                           wireWriteDataByte@reg 0029  
                         wireWriteDataByte@val 0026                            getMode@enable_value 002A  
                               UART_Byte@F7547 01CD                       ??i1_i2c1_driver_sendNACK 0076  
                  __size_of_EUSART_Receive_ISR 0034                         ?_i2c1_driver_getRXData 0076  
                         ??_PWM1_LoadDutyValue 0022                     __size_of_SPI2_Exchange8bit 000F  
                                      ?_On_Off 0076                   __size_of_i2c_busCollisionISR 0003  
                                   __pmaintext 0DF9                          __end_of_Display_Clear 1730  
                                ??_do_I2C_IDLE 0076                                  ??_do_I2C_RCEN 0076  
                ?_EUSART_SetTxInterruptHandler 0020               _EUSART_TxDefaultInterruptHandler 016C  
                      setGestureLEDDrive@drive 002D                                        ?___wmul 0020  
                              __CFG_PPS1WAY$ON 0000                                ??_do_I2C_DO_ACK 0076  
                 __size_of_enableGestureSensor 005C                                     __pintentry 0004  
                        ?_setProxIntHighThresh 0076                                        _CCP1CON 0293  
                      __size_of_I2C_Write_Byte 001C                                  ??_I2C_ReStart 0020  
                             _setProximityGain 0A44                                    setMode@mode 002F  
                 ??_EUSART_DefaultErrorHandler 0077                                ?_PMD_Initialize 0076  
                          _setAmbientLightGain 0917                        __size_of_ADC_Initialize 0008  
                        __size_of_Display_Name 003C                 ?_i2c1_driver_clearBusCollision 0076  
                                      ?_strlen 0020                              ?_i2c1_driver_open 0076  
                            __end_of_do_I2C_RX 0CC7                              __end_of_do_I2C_TX 0DAA  
                            ?_i2c1_driver_stop 0076                                  _eusartRxCount 0071  
                            _wireReadDataBlock 0D11                                        _SP1BRGH 019C  
                                      _SP1BRGL 019B                             ??_i2c1_driver_open 0020  
                           ??_i2c1_driver_stop 0020                                        _OSCCON1 0919  
                                      _OSCCON3 091B                                     _brightness 006C  
                                ?_mssp1_setIRQ 0076                                   ??_PIR_Sensor 0020  
                __size_of_EUSART_RxDataHandler 0017                                        _OSCTUNE 091E  
                         wireReadDataBlock@len 0028                           wireReadDataBlock@reg 002F  
                         wireReadDataBlock@val 0026                                        _SSP1ADD 0212  
                                      _SSP2ADD 021A                                        _SLRCONA 030C  
                                      _SLRCONB 030D                                        _SLRCONC 030E  
                                      _SSP1BUF 0211                         __end_of_mssp1_clearIRQ 1606  
                                      _SSP2BUF 0219                             ?_wireReadDataBlock 0026  
                                      _SSP1MSK 0213                       ??_EUSART_SetErrorHandler 0022  
                            SPI_Write@incoming 0021                    __end_of_setGestureIntEnable 0AC3  
                      ??_do_I2C_SEND_ADR_WRITE 0076                processGestureData@lr_ratio_last 0037  
                  ??_do_I2C_SEND_RESTART_WRITE 0076                                   readGesture@i 01E0  
                                      _Get_ADC 0614                             _i2c1_driver_TXData 166D  
                         ?_setAmbientLightGain 0076                             _i2c1_driver_i2cISR 00E6  
                          ??_wireReadDataBlock 002A                                        _i2c_ISR 0959  
                                    _I2C_Start 161E                                ??_I2C_Read_Byte 0021  
                                setMode@enable 002B            __size_of_EUSART_DefaultErrorHandler 0003  
                           _i2c1_driver_isNACK 16A1                         __size_of_decodeGesture 0191  
                              __size_of_On_Off 004A                            ?_i2c1_driver_TXData 0076  
                                 _Display_Name 0BBE                                ??_I2C_Send_NACK 0020  
                                      ___awdiv 07A5                                __size_of___wmul 001C  
                           __end_of_PIR_Sensor 1775                         ?i1_i2c1_driver_restart 0076  
                            ??_do_I2C_TX_EMPTY 0076                            ?_i2c1_driver_isNACK 0076  
                       ?i1_i2c1_driver_startRX 0076                       __end_of_wireReadDataByte 0959  
                                   _initialize 0505                                        _getMode 07F7  
             __size_of_setLightIntLowThreshold 0027                             _setGestureLEDDrive 0B58  
                                      __ptext1 0505                                        __ptext2 0A44  
                                      __ptext3 17C1                                        __ptext4 17AE  
                                      __ptext5 09F4                                        __ptext6 09CD  
                                      __ptext7 0A1B                                        __ptext8 09A6  
                                      __ptext9 0B58                    __size_ofi1_i2c1_driver_stop 0003  
                          __end_of_do_I2C_IDLE 1661                      __end_of_wireReadDataBlock 0D5B  
                          __end_of_do_I2C_RCEN 166D                                __size_of_strlen 0018  
                        _OSCILLATOR_Initialize 16B9                                      _T2CONbits 001F  
                  __end_of_do_I2C_SEND_RESTART 163F                                 ??_mssp1_setIRQ 0076  
                         ??_i2c1_driver_TXData 0020                                        _setMode 0DAA  
                     ??_PIN_MANAGER_Initialize 0022                                      _IOCAFbits 0393  
                          __end_of_I2C_ReStart 1612                                      _IOCANbits 0392  
                                    _IOCAPbits 0391                            ?_setGestureLEDDrive 0076  
                                      _printed 0069                                ?_mssp1_clearIRQ 0076  
                     _do_I2C_SEND_RESTART_READ 1633                     __size_of_SYSTEM_Initialize 001B  
                                      clrloop0 1674                           __size_of_returnReset 0002  
                         end_of_initialization 00A0                           ??_i2c1_driver_isNACK 0076  
                        ??_setAmbientLightGain 002A                   __size_of_setProxIntLowThresh 0013  
        __end_of_EUSART_SetOverrunErrorHandler 16F4         __size_of_EUSART_SetOverrunErrorHandler 0009  
                _EUSART_SetOverrunErrorHandler 16EB                                        init_ram 1679  
                 __end_of_i2c1_driver_sendNACK 1657                                        initloop 167A  
              __size_ofi1_i2c1_driver_sendNACK 0004                                     ?_I2C_Start 0076  
                enableGestureSensor@interrupts 0031                              _EUSART_Initialize 0BFA  
                 __end_of_i2c1_driver_resetBus 0801                  setGestureExitThresh@threshold 002B  
                         ??_setGestureLEDDrive 002A                             readGesture@gstatus 0055  
                           ?_EUSART_Initialize 0076                                   initialize@id 0031  
                             ??_setGestureGain 002A                         ??_setProxIntHighThresh 002A  
                             ??_setGestureMode 002A                      _do_I2C_SEND_RESTART_WRITE 1637  
                          Display_Name@string1 0025                  __size_of_setGestureExitThresh 0013  
                                      strlen@a 0023                                        strlen@s 0020  
                                    _UART_Byte 0EA6                            ??_EUSART_Initialize 0022  
                             ??_WDT_Initialize 0020                              _wireWriteDataByte 0889  
               ??_EUSART_SetTxInterruptHandler 0022                                     _returnStop 15EB  
                                    _PORTCbits 000E                       __end_of_do_I2C_SEND_STOP 1643  
                   __end_of_Display_Brightness 17E9                                  ??_enablePower 0030  
                           ?_wireWriteDataByte 0026                setLightIntHighThreshold@val_low 002D  
               __size_of_setGestureEnterThresh 0013                  __end_of_setGestureEnterThresh 179B  
                                _decodeGesture 0374                             _isGestureAvailable 1775  
                           _setGestureWaitTime 09A6                   ??_IOCAF4_SetInterruptHandler 0022  
                                    _SPI_Write 0801                              __size_of_I2C_Stop 0003  
                                  returnStop@p 0076                            ??_wireWriteDataByte 0029  
                             __CFG_FEXTOSC$OFF 0000                __size_of_EUSART_SetErrorHandler 0009  
              processGestureData@ud_ratio_last 0035                            ?_isGestureAvailable 0076  
                          ?_setGestureWaitTime 0076                      __end_of_EUSART_Initialize 0C3D  
                                  _CCP1CONbits 0293                                      On_Off@val 0027  
                        SPI2_Exchange8bit@data 0020                  __size_of_do_I2C_SEND_ADR_READ 0008  
                        setProximityGain@drive 002D                       __size_of_PWM1_Initialize 000C  
                               __end_of_On_Off 0D11               __end_of_i2c1_driver_isBufferFull 16A1  
                                  _do_I2C_IDLE 165C                                    _do_I2C_RCEN 1667  
                    __end_of_wireWriteDataByte 08A4                                 _I2C_Write_Byte 08A4  
           __end_of_EUSART_DefaultErrorHandler 15F4                     _EUSART_DefaultErrorHandler 15F1  
                         ??_isGestureAvailable 0029                                 __end_of___wmul 08DC  
                         ??_setGestureWaitTime 002A                                     ?_UART_Byte 0076  
                                  ?_initialize 0076                                    _I2C_ReStart 160F  
                               _ADC_Initialize 16B1            __size_of_IOCAF4_SetInterruptHandler 0009  
                       i1_i2c1_driver_sendNACK 162F                         ?_OSCILLATOR_Initialize 0076  
                     _setLightIntHighThreshold 09CD                     __size_of_wireReadDataBlock 004A  
                              _gesture_motion_ 0168                                _SPI2_Initialize 1693  
                 __size_of_do_I2C_DO_NACK_STOP 0004                    __size_of_processGestureData 02D0  
                               ?_decodeGesture 0076                                 __end_of_strlen 086E  
                      ?_do_I2C_DO_NACK_RESTART 0076                            start_initialization 0049  
                           setGestureGain@gain 002D                            _i2c_busCollisionISR 1609  
              __size_of_PIN_MANAGER_Initialize 0044                       ?i1_i2c1_driver_getRXData 0076  
                                   ?_SPI_Write 0076   EUSART_SetRxInterruptHandler@interruptHandler 0020  
 EUSART_SetTxInterruptHandler@interruptHandler 0020               setLightIntHighThreshold@val_high 002E  
                          _enableGestureSensor 0E4A                            __end_of_enablePower 1757  
                 __size_of_i2c1_driver_sendACK 0004                        ??_i2c1_driver_getRXData 0020  
                     __end_of_setProximityGain 0A6D                   __size_of_i2c1_driver_restart 0003  
                     processGestureData@d_last 0042                   __size_of_i2c1_driver_startRX 0003  
                     processGestureData@l_last 0043                                    ??_I2C_Start 0020  
                     processGestureData@r_last 0044                       __size_of_PIN_MANAGER_IOC 0006  
                     processGestureData@u_last 0041                        _processGestureData$1923 0039  
                      _processGestureData$1924 003B                        _processGestureData$1925 003D  
                      _processGestureData$1926 003F                                       ??_On_Off 0024  
               ?_EUSART_SetOverrunErrorHandler 0020                           ?_i2c_busCollisionISR 0076  
                             __CFG_LPBOREN$OFF 0000                           __end_of_mssp1_setIRQ 1603  
                       __end_of_I2C_Write_Byte 08C0                     _EUSART_FramingErrorHandler 01DE  
                             ??_PMD_Initialize 0020                setLightIntLowThreshold@val_high 002E  
                                     ??___wmul 0024                         _EUSART_SetErrorHandler 16D9  
                         ?_enableGestureSensor 0076                                    _CCPTMRSbits 029F  
                                ??_readGesture 0051                         __end_of_ADC_Initialize 16B9  
                                ?_do_I2C_RESET 0076                                    __pdataBANK0 006A  
                                  __pdataBANK1 00ED                                    __pdataBANK2 016E  
                                  __pdataBANK3 01D2                             setGestureMode@mode 002B  
                      _setLightIntLowThreshold 09F4                      setGestureIntEnable@enable 002C  
                     setAmbientLightGain@drive 002B                                    ?_returnStop 0076  
                                     ??_strlen 0022                 __end_of_do_I2C_DO_NACK_RESTART 164F  
                                ??_setLEDBoost 002A                                  ??_setLEDDrive 002A  
                         _i2c1_driver_sendNACK 1653                    __end_of_EUSART_Transmit_ISR 08F9  
                       setGestureIntEnable@val 002B                                    __pbssCOMMON 0070  
                                    ___latbits 0002                                      _adcResult 0068  
                         _i2c1_driver_resetBus 0800                                  __pcstackBANK0 0020  
                                __pcstackBANK1 00A0                                  __pcstackBANK2 0120  
                                __pcstackBANK3 01E0                       __size_of_TMR2_Initialize 0008  
                                    _do_I2C_RX 0C81                                      _do_I2C_TX 0D5B  
               __size_of_do_I2C_SEND_ADR_WRITE 0007                  __size_ofi1_i2c1_driver_TXData 0005  
                   __end_of_EUSART_Receive_ISR 0BBE                  __end_of_do_I2C_SEND_ADR_WRITE 1693  
                                     ?_Get_ADC 0076                          readGesture@fifo_data2 00A0  
                   __size_of_EUSART_Initialize 0043                      __size_of_i2c1_driver_open 000A  
                        readGesture@fifo_level 0058                      __size_of_i2c1_driver_stop 0003  
             _EUSART_RxDefaultInterruptHandler 016A                                       ?_i2c_ISR 0076  
                          __size_of_initialize 010F                                _do_I2C_TX_EMPTY 0AC3  
                                    __pnvBANK1 00EA                                      __pnvBANK2 016A  
                                    __pnvBANK3 01DA                         __size_of_handleGesture 008C  
                        ??_i2c_busCollisionISR 0076                          __end_of_fsmStateTable 1020  
                  __size_of_PWM1_LoadDutyValue 0017                   __end_of_EUSART_RxDataHandler 1800  
                       _PIN_MANAGER_Initialize 0C3D                        ??i1_i2c1_driver_restart 0076  
                      ??i1_i2c1_driver_startRX 0076                                ?_I2C_Write_Byte 0076  
                                UART_Byte@bits 002E                          ??_enableGestureSensor 0030  
                      __end_of_SPI2_Initialize 169A                                 ??_do_I2C_RESET 0076  
                                     ?___awdiv 0026                                      __ptext100 15FD  
                                    __ptext101 162F                                      __ptext110 173C  
                                    __ptext102 0800                                      __ptext111 15EA  
                                    __ptext103 15FA                                      __ptext112 08DC  
                                    __ptext104 15ED                                      __ptext113 0B8A  
                                    __ptext105 15EB                                      __ptext114 1627  
                                    __ptext106 15F7                                      __ptext115 15E9  
                                    __ptext107 15F4                                      __ptext116 15F1  
                                    __ptext108 162B                                      __ptext117 17E9  
                                    __ptext109 1661                     __size_of_wireWriteDataByte 001B  
                     ??_do_I2C_DO_ADDRESS_NACK 0076                                ?_ADC_Initialize 0076  
                  _i2c1_driver_busCollisionISR 00E8                                   _eusartRxHead 0073  
                                    _brightLCD 006F                                   _eusartTxHead 0075  
                                 _eusartRxTail 0072                                   _eusartTxTail 0074  
                                  ??_UART_Byte 0025                            _setProxIntLowThresh 17C1  
                        __end_of_do_I2C_DO_ACK 1647                              ??_PWM1_Initialize 0020  
                 ??_INTERRUPT_InterruptManager 007C                       _i2c1_driver_isBufferFull 169A  
                                     ?_getMode 0076                                ??_decodeGesture 0020  
                              UART_Byte@tempOn 0026                              ?_wireReadDataByte 0076  
                   ??_do_I2C_SEND_RESTART_READ 0076                          ?_i2c1_driver_sendNACK 0076  
              __end_ofi1_i2c1_driver_getRXData 1600                        _eusartTxBufferRemaining 00EC  
                             ??_mssp1_clearIRQ 0076                                       _BAUD1CON 019F  
                                  _enablePower 1749                             ??_wireReadDataByte 0026  
                          __end_of_readGesture 1000                          ?_i2c1_driver_resetBus 0076  
           __size_of_do_I2C_SEND_RESTART_WRITE 0004                                       _I2C_Stop 1624  
                     ??_resetGestureParameters 0020                                       ?_setMode 002B  
           __end_of_IOCAF4_SetInterruptHandler 170F                     _IOCAF4_SetInterruptHandler 1706  
                               __size_of_Noise 0017                                     ?_do_I2C_RX 0076  
                                   ?_do_I2C_TX 0076                               __CFG_WDTE$SWDTEN 0000  
                                  ??_SPI_Write 0021                              _i2c1_driver_start 161B  
                       __size_of_Display_Clear 000C                            __end_of_setLEDBoost 0B26  
                          __end_of_setLEDDrive 0A44                                     UART_Byte@i 0033  
                         ?_setProxIntLowThresh 0076                          readGesture@bytes_read 0056  
                           ?_i2c1_driver_start 0076                                 _eusartRxBuffer 01BD  
                               _eusartTxBuffer 01C5                                 ___wmul@product 0024  
                                     _LATAbits 010C         EUSART_SetErrorHandler@interruptHandler 0020  
                                     _LATCbits 010E                            __size_of_returnStop 0002  
                                    clear_ram0 1673                                       _PIE0bits 0090  
                                     _PIE1bits 0091                   __size_of_setGestureIntEnable 002B  
                            _eusartRxLastError 0070                            _gesture_near_count_ 005C  
                          ??_i2c1_driver_start 0020            __size_of_INTERRUPT_InterruptManager 0043  
                                     _PIR0bits 0010                                       _PIR1bits 0011  
              ??_EUSART_SetFramingErrorHandler 0022                          __end_of_I2C_Read_Byte 1724  
                    ??_setLightIntLowThreshold 002C                                       _SSP1CON1 0215  
                                     _SSP1CON2 0216                                       _SSP2CON1 021D  
    __end_of_EUSART_DefaultOverrunErrorHandler 162B     __size_of_EUSART_DefaultOverrunErrorHandler 0004  
          ??_EUSART_DefaultOverrunErrorHandler 0076             ?_EUSART_DefaultOverrunErrorHandler 0076  
            _EUSART_DefaultOverrunErrorHandler 1627                                 setLEDBoost@val 002C  
                            UART_Byte@tempName 002A                                       _SSP1STAT 0214  
                                     _SSP2STAT 021C                     __end_ofi1_i2c1_driver_stop 15FA  
                            ??_PIN_MANAGER_IOC 0076                              UART_Byte@tempProx 0028  
                        __end_of_I2C_Send_NACK 161B                                 setLEDDrive@val 002C  
             processGestureData@lr_ratio_first 0033                                     _ADCON0bits 009D  
                            ___wmul@multiplier 0020                              ?_do_I2C_SEND_STOP 0076  
                    processGestureData@d_first 0046                                  _handleGesture 0719  
                    __end_of_i2c1_driver_start 161E                                  ??_returnReset 0077  
                           ??_do_I2C_SEND_STOP 0076                    __size_of_i2c1_driver_TXData 0006  
                  __end_of_setAmbientLightGain 0935                      processGestureData@l_first 0047  
            __end_of_do_I2C_SEND_RESTART_WRITE 163B                        __end_of_do_I2C_TX_EMPTY 0AF4  
                 __end_of_setGestureExitThresh 17AE                      processGestureData@r_first 0048  
                    processGestureData@u_first 0045                          ??_setProxIntLowThresh 002A  
                 __size_of_do_I2C_SEND_RESTART 0004                    __size_of_i2c1_driver_isNACK 0008  
                           _Display_Brightness 17D4                              setGestureGain@val 002C  
                        __size_of_mssp1_setIRQ 0003                              ??_TMR2_Initialize 0020  
                             __size_of_Get_ADC 0105                            _do_I2C_DO_NACK_STOP 1647  
                             __size_of_i2c_ISR 0026                            ?_Display_Brightness 0076  
                   ??_setLightIntHighThreshold 002C                              _ADC_GetConversion 08F9  
                  __size_of_setGestureLEDDrive 0032                                 setMode@reg_val 002E  
               setLightIntLowThreshold@val_low 002D                                   ?_do_I2C_IDLE 0076  
                                _Display_Clear 1724                                   ?_do_I2C_RCEN 0076  
                            setGestureMode@val 002C                               ?_SPI2_Initialize 0076  
                      ?i1_i2c1_driver_sendNACK 0076                        ??_OSCILLATOR_Initialize 0020  
                          _EUSART_ErrorHandler 01DA                             ?_ADC_GetConversion 0020  
                          _i2c1_driver_sendACK 162B                               __size_of___awdiv 0052  
                __size_of_setProxIntHighThresh 0013                                    _readGesture 0F04  
              __size_of_do_I2C_DO_ADDRESS_NACK 002B                    ?_EUSART_DefaultErrorHandler 0076  
                          i2c1_driver_TXData@d 0020                         ??_i2c1_driver_sendNACK 0020  
                                 ??_initialize 0030                                   ?_I2C_ReStart 0076  
                          _i2c1_driver_restart 160C               setLightIntLowThreshold@threshold 002A  
                         ?_do_I2C_DO_NACK_STOP 0076                            _i2c1_driver_startRX 1615  
                               ?_handleGesture 0076                   __end_of_do_I2C_SEND_ADR_READ 16B1  
                             __size_of_getMode 0009                         ??_i2c1_driver_resetBus 0076  
                         readGesture@fifo_data 0120                                    _setLEDBoost 0AF4  
                          ??_ADC_GetConversion 0022                                    _setLEDDrive 0A1B  
                         ??_Display_Brightness 0022                __size_of_resetGestureParameters 0017  
                         _EUSART_RxDataHandler 17E9                                   _mssp1_setIRQ 1600  
              __end_of_setLightIntLowThreshold 0A1B                                    ??_do_I2C_RX 0076  
                                  ??_do_I2C_TX 0076                          setGestureLEDDrive@val 002C  
                             __size_of_setMode 004F                                       __ptext10 0B26  
                                     __ptext11 179B                                       __ptext20 07A5  
                                     __ptext12 1788                                       __ptext21 1775  
                                     __ptext13 0917                                       __ptext30 0889  
                                     __ptext22 0374                                       __ptext14 170F  
                                     __ptext31 07F7                                       __ptext23 0E4A  
                                     __ptext15 0719                                       __ptext40 1653  
                                     __ptext32 0935                                       __ptext24 0AF4  
                                     __ptext16 0F04                                       __ptext41 1719  
                                     __ptext33 08A4                                       __ptext25 097F  
                                     __ptext17 0D11                                       __ptext50 16C9  
                                     __ptext42 1615                                       __ptext34 166D  
                                     __ptext26 0A98                                       __ptext18 00A4  
                                     __ptext51 1693                                       __ptext43 169A  
                                     __ptext35 1624                                       __ptext27 083F  
                                     __ptext19 08C0                                       __ptext60 16EB  
                                     __ptext52 1730                                       __ptext44 1612  
                                     __ptext36 1621                                       __ptext28 1749  
                                     __ptext61 16E2                                       __ptext53 16C1  
                                     __ptext45 160F                                       __ptext37 161E  
                                     __ptext29 0DAA                                       __ptext70 0856  
                                     __ptext62 16D9                                       __ptext54 0C3D  
                                     __ptext46 160C                                       __ptext38 161B  
                                     __ptext71 08F9                                       __ptext63 16B1  
                                     __ptext55 1706                                       __ptext47 0EA6  
                                     __ptext39 1618                                       __ptext80 1603  
                                     __ptext72 1724                                       __ptext64 1766  
                                     __ptext56 16B9                                       __ptext48 086E  
                                     __ptext81 0C81                                       __ptext73 17D4  
                                     __ptext65 0CC7                                       __ptext57 0BFA  
                                     __ptext49 164F                                       __ptext90 163F  
                                     __ptext82 0D5B                                       __ptext74 0801  
                                     __ptext66 0614                                       __ptext58 16FD  
                                     __ptext91 163B                                       __ptext83 0A6D  
                                     __ptext75 1757                                       __ptext67 0828  
                                     __ptext59 16F4                                       __ptext92 1637  
                                     __ptext84 164B                                       __ptext68 0811  
                                     __ptext93 1633                                       __ptext85 1647  
                                     __ptext77 1609                                       __ptext69 0BBE  
                                     __ptext94 165C                                       __ptext86 1643  
                                     __ptext78 1606                                       __ptext95 1685  
                                     __ptext87 1667                                       __ptext79 0959  
                                     __ptext96 0AC3                                       __ptext88 168C  
                                     __ptext97 1600                                       __ptext89 16A9  
                                     __ptext98 16A1                                       __ptext99 1657  
                        _setGestureEnterThresh 1788                                   _SSP1CON1bits 0215  
                                 _SSP1CON2bits 0216                 setGestureEnterThresh@threshold 002B  
                                 _SSP2CON1bits 021D                           ?_i2c1_driver_sendACK 0076  
                         __end_of_do_I2C_RESET 168C                                     _IOCAF4_ISR 173C  
                         ?_i2c1_driver_restart 0076                            __end_of_returnReset 15EF  
                             _i2c1_driver_open 170F                               _i2c1_driver_stop 1621  
                                __size_of_main 0051                           ?_i2c1_driver_startRX 0076  
                            ?_setProximityGain 0076                 __size_of_i2c1_driver_getRXData 0003  
                __end_of_i2c1_driver_getRXData 1615                             __end_of_initialize 0614  
                    __end_of_ADC_GetConversion 0917                        ?_EUSART_SetErrorHandler 0020  
                           ??_setProximityGain 002A               __size_ofi1_i2c1_driver_getRXData 0003  
                           _decodeGesture$1930 0026                             _decodeGesture$1931 0028  
                           _decodeGesture$1932 002A                             _decodeGesture$1933 002C  
                           _decodeGesture$1934 002E                             _decodeGesture$1935 0030  
                           _decodeGesture$1928 0022                             _decodeGesture$1929 0024  
                                   _RC1STAbits 019D                                 ?_Display_Clear 0076  
               __end_ofi1_i2c1_driver_sendNACK 1633  EUSART_SetOverrunErrorHandler@interruptHandler 0020  
                                     int$flags 007E             __end_of_INTERRUPT_InterruptManager 0047  
                   _INTERRUPT_InterruptManager 0004          __end_of_EUSART_SetFramingErrorHandler 16EB  
       __size_of_EUSART_SetFramingErrorHandler 0009                  _EUSART_SetFramingErrorHandler 16E2  
                                 _SSP1STATbits 0214                    __size_of_isGestureAvailable 0013  
                                Display_Name@i 002A                            setProximityGain@val 002C  
             __end_of_do_I2C_SEND_RESTART_READ 1637                    __size_of_setGestureWaitTime 0027  
                   __end_of_processGestureData 0374                                   ??_returnStop 0077  
                                 _SSP2STATbits 021C                          ??_do_I2C_DO_NACK_STOP 0076  
                                   Get_ADC@val 002F                        __size_of_setGestureGain 0032  
                                   _INTCONbits 000B                        __size_of_setGestureMode 0027  
                   __size_of_i2c1_driver_start 0003                          ?_EUSART_RxDataHandler 0076  
                       setAmbientLightGain@val 002C                          ??_i2c1_driver_sendACK 0076  
                             ?_do_I2C_TX_EMPTY 0076                        __size_of_WDT_Initialize 0004  
                       _do_I2C_DO_ADDRESS_NACK 0A6D                                       intlevel1 0000  
                        ??_i2c1_driver_restart 0020                          ??_i2c1_driver_startRX 0020  
                      ?_PIN_MANAGER_Initialize 0076                               ??_I2C_Write_Byte 0021  
               __end_of_EUSART_SetErrorHandler 16E2                              __CFG_CLKOUTEN$OFF 0000  
                           __end_of_returnStop 15ED                                _PWM1_Initialize 1730  
                             ??_ADC_Initialize 0020           __end_of_EUSART_SetRxInterruptHandler 16FD  
        __size_of_EUSART_SetRxInterruptHandler 0009                   _EUSART_SetRxInterruptHandler 16F4  
                       _resetGestureParameters 083F                     ??_i2c1_driver_isBufferFull 0020  
                                ?_Display_Name 0025                 __size_ofi1_i2c1_driver_restart 0003  
                __end_ofi1_i2c1_driver_restart 15F7                             _EUSART_Receive_ISR 0B8A  
EUSART_SetFramingErrorHandler@interruptHandler 0020                 __size_ofi1_i2c1_driver_startRX 0003  
                 __end_ofi1_i2c1_driver_TXData 165C                  __end_ofi1_i2c1_driver_startRX 15FD  
                         _setGestureExitThresh 179B                                ??_handleGesture 0059  
                                __pstringtext1 1000                                  __pstringtext2 1800  
                                __pstringtext3 1810                                  __pstringtext4 181D  
                                __pstringtext5 1829                                  __pstringtext6 0000  
                          ?_EUSART_Receive_ISR 0076                                     _SSP1DATPPS 0E21  
                                 ?_enablePower 0076                                     _SSP2DATPPS 0E1E  
                                   _SSP1CLKPPS 0E20                            _setGestureIntEnable 0A98  
                                   _SSP2CLKPPS 0E1D                               setLEDBoost@boost 002D  
                       ?_setGestureEnterThresh 0076                            UART_Byte@tempBright 002C  
                  ?_IOCAF4_SetInterruptHandler 0020                                    _returnReset 15ED  
                                   _PIR_Sensor 1766                                     _TX1STAbits 019E  
                                  ?_IOCAF4_ISR 0076                   __size_of_EUSART_Transmit_ISR 001D  
               __end_of_PIN_MANAGER_Initialize 0C81                    __end_of_i2c_busCollisionISR 160C  
                    __size_of_wireReadDataByte 0024               ??_IOCAF4_DefaultInterruptHandler 0076  
              ?_IOCAF4_DefaultInterruptHandler 0076                               setLEDDrive@drive 002D  
                   __end_of_PWM1_LoadDutyValue 0828                            processGestureData@i 004D  
                              _PIN_MANAGER_IOC 1661                           ??_EUSART_Receive_ISR 0077  
                  __end_of_enableGestureSensor 0EA6                          _do_I2C_SEND_ADR_WRITE 168C  
                         ?_setGestureIntEnable 0076                     __size_of_ADC_GetConversion 001E  
                         _do_I2C_SEND_ADR_READ 16A9                                ??_Display_Clear 0022  
             __end_of_setLightIntHighThreshold 09F4                                 ??_Display_Name 0027  
