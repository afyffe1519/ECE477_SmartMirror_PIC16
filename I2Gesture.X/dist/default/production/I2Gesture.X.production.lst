

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Tue Apr 16 14:21:02 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F18345
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK3,global,class=CODE,delta=2
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1
     9                           	psect	nvBANK3,global,class=BANK3,space=1,delta=1
    10                           	psect	stringtext2,global,class=STRCODE,delta=2
    11                           	psect	stringtext3,global,class=STRCODE,delta=2
    12                           	psect	stringtext4,global,class=STRCODE,delta=2
    13                           	psect	stringtext5,global,class=STRCODE,delta=2
    14                           	psect	stringtext6,global,class=STRCODE,delta=2
    15                           	psect	stringtext7,global,class=STRCODE,delta=2
    16                           	psect	cinit,global,class=CODE,merge=1,delta=2
    17                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    21                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    22                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    23                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    24                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    25                           	psect	inittext,global,class=CODE,delta=2
    26                           	psect	clrtext,global,class=CODE,delta=2
    27                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    28                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    29                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    30                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    31                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    32                           	psect	text1,local,class=CODE,merge=1,delta=2
    33                           	psect	text2,local,class=CODE,merge=1,delta=2
    34                           	psect	text3,local,class=CODE,merge=1,delta=2
    35                           	psect	text4,local,class=CODE,merge=1,delta=2
    36                           	psect	text5,local,class=CODE,merge=1,delta=2
    37                           	psect	text6,local,class=CODE,merge=1,delta=2
    38                           	psect	text7,local,class=CODE,merge=1,delta=2
    39                           	psect	text8,local,class=CODE,merge=1,delta=2
    40                           	psect	text9,local,class=CODE,merge=1,delta=2
    41                           	psect	text10,local,class=CODE,merge=1,delta=2
    42                           	psect	text11,local,class=CODE,merge=1,delta=2
    43                           	psect	text12,local,class=CODE,merge=1,delta=2
    44                           	psect	text13,local,class=CODE,merge=1,delta=2
    45                           	psect	text14,local,class=CODE,merge=1,delta=2
    46                           	psect	text15,local,class=CODE,merge=1,delta=2
    47                           	psect	text16,local,class=CODE,merge=1,delta=2
    48                           	psect	text17,local,class=CODE,merge=1,delta=2
    49                           	psect	text18,local,class=CODE,merge=1,delta=2
    50                           	psect	text19,local,class=CODE,merge=1,delta=2,group=1
    51                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    52                           	psect	text21,local,class=CODE,merge=1,delta=2
    53                           	psect	text22,local,class=CODE,merge=1,delta=2
    54                           	psect	text23,local,class=CODE,merge=1,delta=2
    55                           	psect	text24,local,class=CODE,merge=1,delta=2
    56                           	psect	text25,local,class=CODE,merge=1,delta=2
    57                           	psect	text26,local,class=CODE,merge=1,delta=2
    58                           	psect	text27,local,class=CODE,merge=1,delta=2
    59                           	psect	text28,local,class=CODE,merge=1,delta=2
    60                           	psect	text29,local,class=CODE,merge=1,delta=2
    61                           	psect	text30,local,class=CODE,merge=1,delta=2
    62                           	psect	text31,local,class=CODE,merge=1,delta=2
    63                           	psect	text32,local,class=CODE,merge=1,delta=2
    64                           	psect	text33,local,class=CODE,merge=1,delta=2
    65                           	psect	text34,local,class=CODE,merge=1,delta=2
    66                           	psect	text35,local,class=CODE,merge=1,inline,delta=2
    67                           	psect	text36,local,class=CODE,merge=1,delta=2
    68                           	psect	text37,local,class=CODE,merge=1,inline,delta=2
    69                           	psect	text38,local,class=CODE,merge=1,delta=2
    70                           	psect	text39,local,class=CODE,merge=1,inline,delta=2
    71                           	psect	text40,local,class=CODE,merge=1,delta=2
    72                           	psect	text41,local,class=CODE,merge=1,inline,delta=2
    73                           	psect	text42,local,class=CODE,merge=1,delta=2
    74                           	psect	text43,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text44,local,class=CODE,merge=1,inline,delta=2
    76                           	psect	text45,local,class=CODE,merge=1,inline,delta=2
    77                           	psect	text46,local,class=CODE,merge=1,delta=2
    78                           	psect	text47,local,class=CODE,merge=1,inline,delta=2
    79                           	psect	text48,local,class=CODE,merge=1,delta=2
    80                           	psect	text49,local,class=CODE,merge=1,delta=2,group=2
    81                           	psect	text50,local,class=CODE,merge=1,delta=2
    82                           	psect	text51,local,class=CODE,merge=1,delta=2
    83                           	psect	text52,local,class=CODE,merge=1,delta=2
    84                           	psect	text53,local,class=CODE,merge=1,delta=2
    85                           	psect	text54,local,class=CODE,merge=1,delta=2
    86                           	psect	text55,local,class=CODE,merge=1,delta=2
    87                           	psect	text56,local,class=CODE,merge=1,delta=2
    88                           	psect	text57,local,class=CODE,merge=1,delta=2
    89                           	psect	text58,local,class=CODE,merge=1,delta=2
    90                           	psect	text59,local,class=CODE,merge=1,delta=2
    91                           	psect	text60,local,class=CODE,merge=1,delta=2
    92                           	psect	text61,local,class=CODE,merge=1,delta=2
    93                           	psect	text62,local,class=CODE,merge=1,delta=2
    94                           	psect	text63,local,class=CODE,merge=1,delta=2
    95                           	psect	text64,local,class=CODE,merge=1,delta=2
    96                           	psect	text65,local,class=CODE,merge=1,delta=2
    97                           	psect	text66,local,class=CODE,merge=1,delta=2
    98                           	psect	text67,local,class=CODE,merge=1,delta=2
    99                           	psect	text68,local,class=CODE,merge=1,delta=2
   100                           	psect	text69,local,class=CODE,merge=1,delta=2
   101                           	psect	text70,local,class=CODE,merge=1,delta=2
   102                           	psect	intentry,global,class=CODE,delta=2
   103                           	psect	text72,local,class=CODE,merge=1,delta=2
   104                           	psect	text73,local,class=CODE,merge=1,inline,delta=2
   105                           	psect	text74,local,class=CODE,merge=1,delta=2
   106                           	psect	text75,local,class=CODE,merge=1,inline,delta=2
   107                           	psect	text76,local,class=CODE,merge=1,delta=2
   108                           	psect	text77,local,class=CODE,merge=1,delta=2
   109                           	psect	text78,local,class=CODE,merge=1,delta=2
   110                           	psect	text79,local,class=CODE,merge=1,delta=2
   111                           	psect	text80,local,class=CODE,merge=1,delta=2
   112                           	psect	text81,local,class=CODE,merge=1,delta=2
   113                           	psect	text82,local,class=CODE,merge=1,delta=2
   114                           	psect	text83,local,class=CODE,merge=1,delta=2
   115                           	psect	text84,local,class=CODE,merge=1,delta=2
   116                           	psect	text85,local,class=CODE,merge=1,delta=2
   117                           	psect	text86,local,class=CODE,merge=1,delta=2
   118                           	psect	text87,local,class=CODE,merge=1,delta=2
   119                           	psect	text88,local,class=CODE,merge=1,delta=2
   120                           	psect	text89,local,class=CODE,merge=1,delta=2
   121                           	psect	text90,local,class=CODE,merge=1,delta=2
   122                           	psect	text91,local,class=CODE,merge=1,delta=2
   123                           	psect	text92,local,class=CODE,merge=1,inline,delta=2
   124                           	psect	text93,local,class=CODE,merge=1,inline,delta=2
   125                           	psect	text94,local,class=CODE,merge=1,inline,delta=2
   126                           	psect	text95,local,class=CODE,merge=1,inline,delta=2
   127                           	psect	text96,local,class=CODE,merge=1,inline,delta=2
   128                           	psect	text97,local,class=CODE,merge=1,inline,delta=2
   129                           	psect	text98,local,class=CODE,merge=1,inline,delta=2
   130                           	psect	text99,local,class=CODE,merge=1,delta=2
   131                           	psect	text100,local,class=CODE,merge=1,delta=2
   132                           	psect	text101,local,class=CODE,merge=1,inline,delta=2
   133                           	psect	text102,local,class=CODE,merge=1,inline,delta=2
   134                           	psect	text103,local,class=CODE,merge=1,inline,delta=2
   135                           	psect	text104,local,class=CODE,merge=1,delta=2
   136                           	psect	text105,local,class=CODE,merge=1,delta=2
   137                           	psect	text106,local,class=CODE,merge=1,delta=2
   138                           	psect	text107,local,class=CODE,merge=1,delta=2
   139                           	psect	text108,local,class=CODE,merge=1,delta=2
   140                           	psect	text109,local,class=CODE,merge=1,delta=2
   141                           	psect	text110,local,class=CODE,merge=1,delta=2
   142                           	dabs	1,0x7E,2
   143  0000                     
   144                           ; Version 2.05
   145                           ; Generated 20/12/2018 GMT
   146                           ; 
   147                           ; Copyright © 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
   148                           ; All rights reserved.
   149                           ; 
   150                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   151                           ; 
   152                           ; Redistribution and use in source and binary forms, with or without modification, are
   153                           ; permitted provided that the following conditions are met:
   154                           ; 
   155                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   156                           ;        conditions and the following disclaimer.
   157                           ; 
   158                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   159                           ;        of conditions and the following disclaimer in the documentation and/or other
   160                           ;        materials provided with the distribution.
   161                           ; 
   162                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   163                           ;        software without specific prior written permission.
   164                           ; 
   165                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   166                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   167                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   168                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   169                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   170                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   171                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   172                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   173                           ; 
   174                           ; 
   175                           ; Code-generator required, PIC16F18345 Definitions
   176                           ; 
   177                           ; SFR Addresses
   178  0000                     	;# 
   179  0001                     	;# 
   180  0002                     	;# 
   181  0003                     	;# 
   182  0004                     	;# 
   183  0005                     	;# 
   184  0006                     	;# 
   185  0007                     	;# 
   186  0008                     	;# 
   187  0009                     	;# 
   188  000A                     	;# 
   189  000B                     	;# 
   190  000C                     	;# 
   191  000D                     	;# 
   192  000E                     	;# 
   193  0010                     	;# 
   194  0011                     	;# 
   195  0012                     	;# 
   196  0013                     	;# 
   197  0014                     	;# 
   198  0015                     	;# 
   199  0015                     	;# 
   200  0016                     	;# 
   201  0016                     	;# 
   202  0017                     	;# 
   203  0018                     	;# 
   204  0019                     	;# 
   205  0019                     	;# 
   206  001A                     	;# 
   207  001B                     	;# 
   208  001C                     	;# 
   209  001D                     	;# 
   210  001E                     	;# 
   211  001F                     	;# 
   212  008C                     	;# 
   213  008D                     	;# 
   214  008E                     	;# 
   215  0090                     	;# 
   216  0091                     	;# 
   217  0092                     	;# 
   218  0093                     	;# 
   219  0094                     	;# 
   220  0097                     	;# 
   221  009B                     	;# 
   222  009B                     	;# 
   223  009C                     	;# 
   224  009D                     	;# 
   225  009E                     	;# 
   226  009F                     	;# 
   227  010C                     	;# 
   228  010D                     	;# 
   229  010E                     	;# 
   230  0111                     	;# 
   231  0112                     	;# 
   232  0113                     	;# 
   233  0114                     	;# 
   234  0115                     	;# 
   235  0116                     	;# 
   236  0117                     	;# 
   237  0118                     	;# 
   238  0119                     	;# 
   239  018C                     	;# 
   240  018D                     	;# 
   241  018E                     	;# 
   242  0197                     	;# 
   243  0199                     	;# 
   244  0199                     	;# 
   245  0199                     	;# 
   246  019A                     	;# 
   247  019A                     	;# 
   248  019A                     	;# 
   249  019B                     	;# 
   250  019B                     	;# 
   251  019B                     	;# 
   252  019B                     	;# 
   253  019B                     	;# 
   254  019C                     	;# 
   255  019C                     	;# 
   256  019C                     	;# 
   257  019D                     	;# 
   258  019D                     	;# 
   259  019D                     	;# 
   260  019E                     	;# 
   261  019E                     	;# 
   262  019E                     	;# 
   263  019F                     	;# 
   264  019F                     	;# 
   265  019F                     	;# 
   266  019F                     	;# 
   267  019F                     	;# 
   268  020C                     	;# 
   269  020D                     	;# 
   270  020E                     	;# 
   271  0211                     	;# 
   272  0211                     	;# 
   273  0212                     	;# 
   274  0212                     	;# 
   275  0213                     	;# 
   276  0213                     	;# 
   277  0214                     	;# 
   278  0214                     	;# 
   279  0215                     	;# 
   280  0215                     	;# 
   281  0215                     	;# 
   282  0215                     	;# 
   283  0216                     	;# 
   284  0216                     	;# 
   285  0217                     	;# 
   286  0217                     	;# 
   287  0219                     	;# 
   288  021A                     	;# 
   289  021B                     	;# 
   290  021C                     	;# 
   291  021D                     	;# 
   292  021D                     	;# 
   293  021E                     	;# 
   294  021F                     	;# 
   295  028C                     	;# 
   296  028D                     	;# 
   297  028E                     	;# 
   298  0291                     	;# 
   299  0291                     	;# 
   300  0292                     	;# 
   301  0293                     	;# 
   302  0294                     	;# 
   303  0295                     	;# 
   304  0295                     	;# 
   305  0296                     	;# 
   306  0297                     	;# 
   307  0298                     	;# 
   308  029F                     	;# 
   309  030C                     	;# 
   310  030D                     	;# 
   311  030E                     	;# 
   312  0311                     	;# 
   313  0311                     	;# 
   314  0312                     	;# 
   315  0313                     	;# 
   316  0314                     	;# 
   317  0315                     	;# 
   318  0315                     	;# 
   319  0316                     	;# 
   320  0317                     	;# 
   321  0318                     	;# 
   322  038C                     	;# 
   323  038D                     	;# 
   324  038E                     	;# 
   325  0391                     	;# 
   326  0392                     	;# 
   327  0393                     	;# 
   328  0394                     	;# 
   329  0395                     	;# 
   330  0396                     	;# 
   331  0397                     	;# 
   332  0398                     	;# 
   333  0399                     	;# 
   334  039A                     	;# 
   335  039C                     	;# 
   336  039D                     	;# 
   337  039E                     	;# 
   338  039F                     	;# 
   339  0411                     	;# 
   340  0411                     	;# 
   341  0412                     	;# 
   342  0413                     	;# 
   343  0414                     	;# 
   344  0415                     	;# 
   345  0416                     	;# 
   346  0417                     	;# 
   347  0418                     	;# 
   348  0418                     	;# 
   349  0419                     	;# 
   350  041A                     	;# 
   351  041B                     	;# 
   352  041C                     	;# 
   353  041D                     	;# 
   354  041E                     	;# 
   355  041F                     	;# 
   356  0498                     	;# 
   357  0498                     	;# 
   358  0499                     	;# 
   359  049A                     	;# 
   360  049B                     	;# 
   361  049B                     	;# 
   362  049C                     	;# 
   363  049D                     	;# 
   364  049E                     	;# 
   365  049F                     	;# 
   366  0617                     	;# 
   367  0618                     	;# 
   368  0619                     	;# 
   369  0619                     	;# 
   370  061A                     	;# 
   371  061B                     	;# 
   372  061C                     	;# 
   373  061C                     	;# 
   374  061F                     	;# 
   375  0691                     	;# 
   376  0692                     	;# 
   377  0693                     	;# 
   378  0694                     	;# 
   379  0695                     	;# 
   380  0696                     	;# 
   381  0697                     	;# 
   382  0698                     	;# 
   383  0699                     	;# 
   384  0711                     	;# 
   385  0712                     	;# 
   386  0713                     	;# 
   387  0714                     	;# 
   388  0715                     	;# 
   389  0716                     	;# 
   390  0717                     	;# 
   391  0718                     	;# 
   392  0719                     	;# 
   393  0891                     	;# 
   394  0891                     	;# 
   395  0891                     	;# 
   396  0891                     	;# 
   397  0891                     	;# 
   398  0891                     	;# 
   399  0892                     	;# 
   400  0892                     	;# 
   401  0892                     	;# 
   402  0893                     	;# 
   403  0893                     	;# 
   404  0893                     	;# 
   405  0893                     	;# 
   406  0893                     	;# 
   407  0893                     	;# 
   408  0894                     	;# 
   409  0894                     	;# 
   410  0894                     	;# 
   411  0895                     	;# 
   412  0895                     	;# 
   413  0895                     	;# 
   414  0896                     	;# 
   415  0896                     	;# 
   416  0896                     	;# 
   417  089B                     	;# 
   418  0911                     	;# 
   419  0912                     	;# 
   420  0913                     	;# 
   421  0914                     	;# 
   422  0915                     	;# 
   423  0916                     	;# 
   424  0918                     	;# 
   425  0919                     	;# 
   426  091A                     	;# 
   427  091B                     	;# 
   428  091C                     	;# 
   429  091D                     	;# 
   430  091E                     	;# 
   431  091F                     	;# 
   432  0E0F                     	;# 
   433  0E10                     	;# 
   434  0E11                     	;# 
   435  0E12                     	;# 
   436  0E13                     	;# 
   437  0E14                     	;# 
   438  0E15                     	;# 
   439  0E16                     	;# 
   440  0E17                     	;# 
   441  0E18                     	;# 
   442  0E19                     	;# 
   443  0E1A                     	;# 
   444  0E1B                     	;# 
   445  0E1C                     	;# 
   446  0E1D                     	;# 
   447  0E1E                     	;# 
   448  0E1F                     	;# 
   449  0E20                     	;# 
   450  0E21                     	;# 
   451  0E22                     	;# 
   452  0E24                     	;# 
   453  0E25                     	;# 
   454  0E28                     	;# 
   455  0E29                     	;# 
   456  0E2A                     	;# 
   457  0E2B                     	;# 
   458  0E2C                     	;# 
   459  0E2D                     	;# 
   460  0E2E                     	;# 
   461  0E2F                     	;# 
   462  0E90                     	;# 
   463  0E91                     	;# 
   464  0E92                     	;# 
   465  0E94                     	;# 
   466  0E95                     	;# 
   467  0E9C                     	;# 
   468  0E9D                     	;# 
   469  0E9E                     	;# 
   470  0E9F                     	;# 
   471  0EA0                     	;# 
   472  0EA1                     	;# 
   473  0EA2                     	;# 
   474  0EA3                     	;# 
   475  0EA4                     	;# 
   476  0EA5                     	;# 
   477  0EA6                     	;# 
   478  0EA7                     	;# 
   479  0F0F                     	;# 
   480  0F10                     	;# 
   481  0F11                     	;# 
   482  0F12                     	;# 
   483  0F13                     	;# 
   484  0F14                     	;# 
   485  0F15                     	;# 
   486  0F16                     	;# 
   487  0F17                     	;# 
   488  0F18                     	;# 
   489  0F19                     	;# 
   490  0F1A                     	;# 
   491  0F1B                     	;# 
   492  0F1C                     	;# 
   493  0F1D                     	;# 
   494  0F1E                     	;# 
   495  0F1F                     	;# 
   496  0F20                     	;# 
   497  0F21                     	;# 
   498  0F22                     	;# 
   499  0F23                     	;# 
   500  0F24                     	;# 
   501  0F25                     	;# 
   502  0F26                     	;# 
   503  0F27                     	;# 
   504  0F28                     	;# 
   505  0F29                     	;# 
   506  0F2A                     	;# 
   507  0F2B                     	;# 
   508  0F2C                     	;# 
   509  0F2D                     	;# 
   510  0F2E                     	;# 
   511  0F2F                     	;# 
   512  0F30                     	;# 
   513  0F31                     	;# 
   514  0F32                     	;# 
   515  0F33                     	;# 
   516  0F34                     	;# 
   517  0F35                     	;# 
   518  0F36                     	;# 
   519  0F37                     	;# 
   520  0FE4                     	;# 
   521  0FE5                     	;# 
   522  0FE6                     	;# 
   523  0FE7                     	;# 
   524  0FE8                     	;# 
   525  0FE9                     	;# 
   526  0FEA                     	;# 
   527  0FEB                     	;# 
   528  0FED                     	;# 
   529  0FEE                     	;# 
   530  0FEF                     	;# 
   531  0000                     	;# 
   532  0001                     	;# 
   533  0002                     	;# 
   534  0003                     	;# 
   535  0004                     	;# 
   536  0005                     	;# 
   537  0006                     	;# 
   538  0007                     	;# 
   539  0008                     	;# 
   540  0009                     	;# 
   541  000A                     	;# 
   542  000B                     	;# 
   543  000C                     	;# 
   544  000D                     	;# 
   545  000E                     	;# 
   546  0010                     	;# 
   547  0011                     	;# 
   548  0012                     	;# 
   549  0013                     	;# 
   550  0014                     	;# 
   551  0015                     	;# 
   552  0015                     	;# 
   553  0016                     	;# 
   554  0016                     	;# 
   555  0017                     	;# 
   556  0018                     	;# 
   557  0019                     	;# 
   558  0019                     	;# 
   559  001A                     	;# 
   560  001B                     	;# 
   561  001C                     	;# 
   562  001D                     	;# 
   563  001E                     	;# 
   564  001F                     	;# 
   565  008C                     	;# 
   566  008D                     	;# 
   567  008E                     	;# 
   568  0090                     	;# 
   569  0091                     	;# 
   570  0092                     	;# 
   571  0093                     	;# 
   572  0094                     	;# 
   573  0097                     	;# 
   574  009B                     	;# 
   575  009B                     	;# 
   576  009C                     	;# 
   577  009D                     	;# 
   578  009E                     	;# 
   579  009F                     	;# 
   580  010C                     	;# 
   581  010D                     	;# 
   582  010E                     	;# 
   583  0111                     	;# 
   584  0112                     	;# 
   585  0113                     	;# 
   586  0114                     	;# 
   587  0115                     	;# 
   588  0116                     	;# 
   589  0117                     	;# 
   590  0118                     	;# 
   591  0119                     	;# 
   592  018C                     	;# 
   593  018D                     	;# 
   594  018E                     	;# 
   595  0197                     	;# 
   596  0199                     	;# 
   597  0199                     	;# 
   598  0199                     	;# 
   599  019A                     	;# 
   600  019A                     	;# 
   601  019A                     	;# 
   602  019B                     	;# 
   603  019B                     	;# 
   604  019B                     	;# 
   605  019B                     	;# 
   606  019B                     	;# 
   607  019C                     	;# 
   608  019C                     	;# 
   609  019C                     	;# 
   610  019D                     	;# 
   611  019D                     	;# 
   612  019D                     	;# 
   613  019E                     	;# 
   614  019E                     	;# 
   615  019E                     	;# 
   616  019F                     	;# 
   617  019F                     	;# 
   618  019F                     	;# 
   619  019F                     	;# 
   620  019F                     	;# 
   621  020C                     	;# 
   622  020D                     	;# 
   623  020E                     	;# 
   624  0211                     	;# 
   625  0211                     	;# 
   626  0212                     	;# 
   627  0212                     	;# 
   628  0213                     	;# 
   629  0213                     	;# 
   630  0214                     	;# 
   631  0214                     	;# 
   632  0215                     	;# 
   633  0215                     	;# 
   634  0215                     	;# 
   635  0215                     	;# 
   636  0216                     	;# 
   637  0216                     	;# 
   638  0217                     	;# 
   639  0217                     	;# 
   640  0219                     	;# 
   641  021A                     	;# 
   642  021B                     	;# 
   643  021C                     	;# 
   644  021D                     	;# 
   645  021D                     	;# 
   646  021E                     	;# 
   647  021F                     	;# 
   648  028C                     	;# 
   649  028D                     	;# 
   650  028E                     	;# 
   651  0291                     	;# 
   652  0291                     	;# 
   653  0292                     	;# 
   654  0293                     	;# 
   655  0294                     	;# 
   656  0295                     	;# 
   657  0295                     	;# 
   658  0296                     	;# 
   659  0297                     	;# 
   660  0298                     	;# 
   661  029F                     	;# 
   662  030C                     	;# 
   663  030D                     	;# 
   664  030E                     	;# 
   665  0311                     	;# 
   666  0311                     	;# 
   667  0312                     	;# 
   668  0313                     	;# 
   669  0314                     	;# 
   670  0315                     	;# 
   671  0315                     	;# 
   672  0316                     	;# 
   673  0317                     	;# 
   674  0318                     	;# 
   675  038C                     	;# 
   676  038D                     	;# 
   677  038E                     	;# 
   678  0391                     	;# 
   679  0392                     	;# 
   680  0393                     	;# 
   681  0394                     	;# 
   682  0395                     	;# 
   683  0396                     	;# 
   684  0397                     	;# 
   685  0398                     	;# 
   686  0399                     	;# 
   687  039A                     	;# 
   688  039C                     	;# 
   689  039D                     	;# 
   690  039E                     	;# 
   691  039F                     	;# 
   692  0411                     	;# 
   693  0411                     	;# 
   694  0412                     	;# 
   695  0413                     	;# 
   696  0414                     	;# 
   697  0415                     	;# 
   698  0416                     	;# 
   699  0417                     	;# 
   700  0418                     	;# 
   701  0418                     	;# 
   702  0419                     	;# 
   703  041A                     	;# 
   704  041B                     	;# 
   705  041C                     	;# 
   706  041D                     	;# 
   707  041E                     	;# 
   708  041F                     	;# 
   709  0498                     	;# 
   710  0498                     	;# 
   711  0499                     	;# 
   712  049A                     	;# 
   713  049B                     	;# 
   714  049B                     	;# 
   715  049C                     	;# 
   716  049D                     	;# 
   717  049E                     	;# 
   718  049F                     	;# 
   719  0617                     	;# 
   720  0618                     	;# 
   721  0619                     	;# 
   722  0619                     	;# 
   723  061A                     	;# 
   724  061B                     	;# 
   725  061C                     	;# 
   726  061C                     	;# 
   727  061F                     	;# 
   728  0691                     	;# 
   729  0692                     	;# 
   730  0693                     	;# 
   731  0694                     	;# 
   732  0695                     	;# 
   733  0696                     	;# 
   734  0697                     	;# 
   735  0698                     	;# 
   736  0699                     	;# 
   737  0711                     	;# 
   738  0712                     	;# 
   739  0713                     	;# 
   740  0714                     	;# 
   741  0715                     	;# 
   742  0716                     	;# 
   743  0717                     	;# 
   744  0718                     	;# 
   745  0719                     	;# 
   746  0891                     	;# 
   747  0891                     	;# 
   748  0891                     	;# 
   749  0891                     	;# 
   750  0891                     	;# 
   751  0891                     	;# 
   752  0892                     	;# 
   753  0892                     	;# 
   754  0892                     	;# 
   755  0893                     	;# 
   756  0893                     	;# 
   757  0893                     	;# 
   758  0893                     	;# 
   759  0893                     	;# 
   760  0893                     	;# 
   761  0894                     	;# 
   762  0894                     	;# 
   763  0894                     	;# 
   764  0895                     	;# 
   765  0895                     	;# 
   766  0895                     	;# 
   767  0896                     	;# 
   768  0896                     	;# 
   769  0896                     	;# 
   770  089B                     	;# 
   771  0911                     	;# 
   772  0912                     	;# 
   773  0913                     	;# 
   774  0914                     	;# 
   775  0915                     	;# 
   776  0916                     	;# 
   777  0918                     	;# 
   778  0919                     	;# 
   779  091A                     	;# 
   780  091B                     	;# 
   781  091C                     	;# 
   782  091D                     	;# 
   783  091E                     	;# 
   784  091F                     	;# 
   785  0E0F                     	;# 
   786  0E10                     	;# 
   787  0E11                     	;# 
   788  0E12                     	;# 
   789  0E13                     	;# 
   790  0E14                     	;# 
   791  0E15                     	;# 
   792  0E16                     	;# 
   793  0E17                     	;# 
   794  0E18                     	;# 
   795  0E19                     	;# 
   796  0E1A                     	;# 
   797  0E1B                     	;# 
   798  0E1C                     	;# 
   799  0E1D                     	;# 
   800  0E1E                     	;# 
   801  0E1F                     	;# 
   802  0E20                     	;# 
   803  0E21                     	;# 
   804  0E22                     	;# 
   805  0E24                     	;# 
   806  0E25                     	;# 
   807  0E28                     	;# 
   808  0E29                     	;# 
   809  0E2A                     	;# 
   810  0E2B                     	;# 
   811  0E2C                     	;# 
   812  0E2D                     	;# 
   813  0E2E                     	;# 
   814  0E2F                     	;# 
   815  0E90                     	;# 
   816  0E91                     	;# 
   817  0E92                     	;# 
   818  0E94                     	;# 
   819  0E95                     	;# 
   820  0E9C                     	;# 
   821  0E9D                     	;# 
   822  0E9E                     	;# 
   823  0E9F                     	;# 
   824  0EA0                     	;# 
   825  0EA1                     	;# 
   826  0EA2                     	;# 
   827  0EA3                     	;# 
   828  0EA4                     	;# 
   829  0EA5                     	;# 
   830  0EA6                     	;# 
   831  0EA7                     	;# 
   832  0F0F                     	;# 
   833  0F10                     	;# 
   834  0F11                     	;# 
   835  0F12                     	;# 
   836  0F13                     	;# 
   837  0F14                     	;# 
   838  0F15                     	;# 
   839  0F16                     	;# 
   840  0F17                     	;# 
   841  0F18                     	;# 
   842  0F19                     	;# 
   843  0F1A                     	;# 
   844  0F1B                     	;# 
   845  0F1C                     	;# 
   846  0F1D                     	;# 
   847  0F1E                     	;# 
   848  0F1F                     	;# 
   849  0F20                     	;# 
   850  0F21                     	;# 
   851  0F22                     	;# 
   852  0F23                     	;# 
   853  0F24                     	;# 
   854  0F25                     	;# 
   855  0F26                     	;# 
   856  0F27                     	;# 
   857  0F28                     	;# 
   858  0F29                     	;# 
   859  0F2A                     	;# 
   860  0F2B                     	;# 
   861  0F2C                     	;# 
   862  0F2D                     	;# 
   863  0F2E                     	;# 
   864  0F2F                     	;# 
   865  0F30                     	;# 
   866  0F31                     	;# 
   867  0F32                     	;# 
   868  0F33                     	;# 
   869  0F34                     	;# 
   870  0F35                     	;# 
   871  0F36                     	;# 
   872  0F37                     	;# 
   873  0FE4                     	;# 
   874  0FE5                     	;# 
   875  0FE6                     	;# 
   876  0FE7                     	;# 
   877  0FE8                     	;# 
   878  0FE9                     	;# 
   879  0FEA                     	;# 
   880  0FEB                     	;# 
   881  0FED                     	;# 
   882  0FEE                     	;# 
   883  0FEF                     	;# 
   884  0000                     	;# 
   885  0001                     	;# 
   886  0002                     	;# 
   887  0003                     	;# 
   888  0004                     	;# 
   889  0005                     	;# 
   890  0006                     	;# 
   891  0007                     	;# 
   892  0008                     	;# 
   893  0009                     	;# 
   894  000A                     	;# 
   895  000B                     	;# 
   896  000C                     	;# 
   897  000D                     	;# 
   898  000E                     	;# 
   899  0010                     	;# 
   900  0011                     	;# 
   901  0012                     	;# 
   902  0013                     	;# 
   903  0014                     	;# 
   904  0015                     	;# 
   905  0015                     	;# 
   906  0016                     	;# 
   907  0016                     	;# 
   908  0017                     	;# 
   909  0018                     	;# 
   910  0019                     	;# 
   911  0019                     	;# 
   912  001A                     	;# 
   913  001B                     	;# 
   914  001C                     	;# 
   915  001D                     	;# 
   916  001E                     	;# 
   917  001F                     	;# 
   918  008C                     	;# 
   919  008D                     	;# 
   920  008E                     	;# 
   921  0090                     	;# 
   922  0091                     	;# 
   923  0092                     	;# 
   924  0093                     	;# 
   925  0094                     	;# 
   926  0097                     	;# 
   927  009B                     	;# 
   928  009B                     	;# 
   929  009C                     	;# 
   930  009D                     	;# 
   931  009E                     	;# 
   932  009F                     	;# 
   933  010C                     	;# 
   934  010D                     	;# 
   935  010E                     	;# 
   936  0111                     	;# 
   937  0112                     	;# 
   938  0113                     	;# 
   939  0114                     	;# 
   940  0115                     	;# 
   941  0116                     	;# 
   942  0117                     	;# 
   943  0118                     	;# 
   944  0119                     	;# 
   945  018C                     	;# 
   946  018D                     	;# 
   947  018E                     	;# 
   948  0197                     	;# 
   949  0199                     	;# 
   950  0199                     	;# 
   951  0199                     	;# 
   952  019A                     	;# 
   953  019A                     	;# 
   954  019A                     	;# 
   955  019B                     	;# 
   956  019B                     	;# 
   957  019B                     	;# 
   958  019B                     	;# 
   959  019B                     	;# 
   960  019C                     	;# 
   961  019C                     	;# 
   962  019C                     	;# 
   963  019D                     	;# 
   964  019D                     	;# 
   965  019D                     	;# 
   966  019E                     	;# 
   967  019E                     	;# 
   968  019E                     	;# 
   969  019F                     	;# 
   970  019F                     	;# 
   971  019F                     	;# 
   972  019F                     	;# 
   973  019F                     	;# 
   974  020C                     	;# 
   975  020D                     	;# 
   976  020E                     	;# 
   977  0211                     	;# 
   978  0211                     	;# 
   979  0212                     	;# 
   980  0212                     	;# 
   981  0213                     	;# 
   982  0213                     	;# 
   983  0214                     	;# 
   984  0214                     	;# 
   985  0215                     	;# 
   986  0215                     	;# 
   987  0215                     	;# 
   988  0215                     	;# 
   989  0216                     	;# 
   990  0216                     	;# 
   991  0217                     	;# 
   992  0217                     	;# 
   993  0219                     	;# 
   994  021A                     	;# 
   995  021B                     	;# 
   996  021C                     	;# 
   997  021D                     	;# 
   998  021D                     	;# 
   999  021E                     	;# 
  1000  021F                     	;# 
  1001  028C                     	;# 
  1002  028D                     	;# 
  1003  028E                     	;# 
  1004  0291                     	;# 
  1005  0291                     	;# 
  1006  0292                     	;# 
  1007  0293                     	;# 
  1008  0294                     	;# 
  1009  0295                     	;# 
  1010  0295                     	;# 
  1011  0296                     	;# 
  1012  0297                     	;# 
  1013  0298                     	;# 
  1014  029F                     	;# 
  1015  030C                     	;# 
  1016  030D                     	;# 
  1017  030E                     	;# 
  1018  0311                     	;# 
  1019  0311                     	;# 
  1020  0312                     	;# 
  1021  0313                     	;# 
  1022  0314                     	;# 
  1023  0315                     	;# 
  1024  0315                     	;# 
  1025  0316                     	;# 
  1026  0317                     	;# 
  1027  0318                     	;# 
  1028  038C                     	;# 
  1029  038D                     	;# 
  1030  038E                     	;# 
  1031  0391                     	;# 
  1032  0392                     	;# 
  1033  0393                     	;# 
  1034  0394                     	;# 
  1035  0395                     	;# 
  1036  0396                     	;# 
  1037  0397                     	;# 
  1038  0398                     	;# 
  1039  0399                     	;# 
  1040  039A                     	;# 
  1041  039C                     	;# 
  1042  039D                     	;# 
  1043  039E                     	;# 
  1044  039F                     	;# 
  1045  0411                     	;# 
  1046  0411                     	;# 
  1047  0412                     	;# 
  1048  0413                     	;# 
  1049  0414                     	;# 
  1050  0415                     	;# 
  1051  0416                     	;# 
  1052  0417                     	;# 
  1053  0418                     	;# 
  1054  0418                     	;# 
  1055  0419                     	;# 
  1056  041A                     	;# 
  1057  041B                     	;# 
  1058  041C                     	;# 
  1059  041D                     	;# 
  1060  041E                     	;# 
  1061  041F                     	;# 
  1062  0498                     	;# 
  1063  0498                     	;# 
  1064  0499                     	;# 
  1065  049A                     	;# 
  1066  049B                     	;# 
  1067  049B                     	;# 
  1068  049C                     	;# 
  1069  049D                     	;# 
  1070  049E                     	;# 
  1071  049F                     	;# 
  1072  0617                     	;# 
  1073  0618                     	;# 
  1074  0619                     	;# 
  1075  0619                     	;# 
  1076  061A                     	;# 
  1077  061B                     	;# 
  1078  061C                     	;# 
  1079  061C                     	;# 
  1080  061F                     	;# 
  1081  0691                     	;# 
  1082  0692                     	;# 
  1083  0693                     	;# 
  1084  0694                     	;# 
  1085  0695                     	;# 
  1086  0696                     	;# 
  1087  0697                     	;# 
  1088  0698                     	;# 
  1089  0699                     	;# 
  1090  0711                     	;# 
  1091  0712                     	;# 
  1092  0713                     	;# 
  1093  0714                     	;# 
  1094  0715                     	;# 
  1095  0716                     	;# 
  1096  0717                     	;# 
  1097  0718                     	;# 
  1098  0719                     	;# 
  1099  0891                     	;# 
  1100  0891                     	;# 
  1101  0891                     	;# 
  1102  0891                     	;# 
  1103  0891                     	;# 
  1104  0891                     	;# 
  1105  0892                     	;# 
  1106  0892                     	;# 
  1107  0892                     	;# 
  1108  0893                     	;# 
  1109  0893                     	;# 
  1110  0893                     	;# 
  1111  0893                     	;# 
  1112  0893                     	;# 
  1113  0893                     	;# 
  1114  0894                     	;# 
  1115  0894                     	;# 
  1116  0894                     	;# 
  1117  0895                     	;# 
  1118  0895                     	;# 
  1119  0895                     	;# 
  1120  0896                     	;# 
  1121  0896                     	;# 
  1122  0896                     	;# 
  1123  089B                     	;# 
  1124  0911                     	;# 
  1125  0912                     	;# 
  1126  0913                     	;# 
  1127  0914                     	;# 
  1128  0915                     	;# 
  1129  0916                     	;# 
  1130  0918                     	;# 
  1131  0919                     	;# 
  1132  091A                     	;# 
  1133  091B                     	;# 
  1134  091C                     	;# 
  1135  091D                     	;# 
  1136  091E                     	;# 
  1137  091F                     	;# 
  1138  0E0F                     	;# 
  1139  0E10                     	;# 
  1140  0E11                     	;# 
  1141  0E12                     	;# 
  1142  0E13                     	;# 
  1143  0E14                     	;# 
  1144  0E15                     	;# 
  1145  0E16                     	;# 
  1146  0E17                     	;# 
  1147  0E18                     	;# 
  1148  0E19                     	;# 
  1149  0E1A                     	;# 
  1150  0E1B                     	;# 
  1151  0E1C                     	;# 
  1152  0E1D                     	;# 
  1153  0E1E                     	;# 
  1154  0E1F                     	;# 
  1155  0E20                     	;# 
  1156  0E21                     	;# 
  1157  0E22                     	;# 
  1158  0E24                     	;# 
  1159  0E25                     	;# 
  1160  0E28                     	;# 
  1161  0E29                     	;# 
  1162  0E2A                     	;# 
  1163  0E2B                     	;# 
  1164  0E2C                     	;# 
  1165  0E2D                     	;# 
  1166  0E2E                     	;# 
  1167  0E2F                     	;# 
  1168  0E90                     	;# 
  1169  0E91                     	;# 
  1170  0E92                     	;# 
  1171  0E94                     	;# 
  1172  0E95                     	;# 
  1173  0E9C                     	;# 
  1174  0E9D                     	;# 
  1175  0E9E                     	;# 
  1176  0E9F                     	;# 
  1177  0EA0                     	;# 
  1178  0EA1                     	;# 
  1179  0EA2                     	;# 
  1180  0EA3                     	;# 
  1181  0EA4                     	;# 
  1182  0EA5                     	;# 
  1183  0EA6                     	;# 
  1184  0EA7                     	;# 
  1185  0F0F                     	;# 
  1186  0F10                     	;# 
  1187  0F11                     	;# 
  1188  0F12                     	;# 
  1189  0F13                     	;# 
  1190  0F14                     	;# 
  1191  0F15                     	;# 
  1192  0F16                     	;# 
  1193  0F17                     	;# 
  1194  0F18                     	;# 
  1195  0F19                     	;# 
  1196  0F1A                     	;# 
  1197  0F1B                     	;# 
  1198  0F1C                     	;# 
  1199  0F1D                     	;# 
  1200  0F1E                     	;# 
  1201  0F1F                     	;# 
  1202  0F20                     	;# 
  1203  0F21                     	;# 
  1204  0F22                     	;# 
  1205  0F23                     	;# 
  1206  0F24                     	;# 
  1207  0F25                     	;# 
  1208  0F26                     	;# 
  1209  0F27                     	;# 
  1210  0F28                     	;# 
  1211  0F29                     	;# 
  1212  0F2A                     	;# 
  1213  0F2B                     	;# 
  1214  0F2C                     	;# 
  1215  0F2D                     	;# 
  1216  0F2E                     	;# 
  1217  0F2F                     	;# 
  1218  0F30                     	;# 
  1219  0F31                     	;# 
  1220  0F32                     	;# 
  1221  0F33                     	;# 
  1222  0F34                     	;# 
  1223  0F35                     	;# 
  1224  0F36                     	;# 
  1225  0F37                     	;# 
  1226  0FE4                     	;# 
  1227  0FE5                     	;# 
  1228  0FE6                     	;# 
  1229  0FE7                     	;# 
  1230  0FE8                     	;# 
  1231  0FE9                     	;# 
  1232  0FEA                     	;# 
  1233  0FEB                     	;# 
  1234  0FED                     	;# 
  1235  0FEE                     	;# 
  1236  0FEF                     	;# 
  1237  0000                     	;# 
  1238  0001                     	;# 
  1239  0002                     	;# 
  1240  0003                     	;# 
  1241  0004                     	;# 
  1242  0005                     	;# 
  1243  0006                     	;# 
  1244  0007                     	;# 
  1245  0008                     	;# 
  1246  0009                     	;# 
  1247  000A                     	;# 
  1248  000B                     	;# 
  1249  000C                     	;# 
  1250  000D                     	;# 
  1251  000E                     	;# 
  1252  0010                     	;# 
  1253  0011                     	;# 
  1254  0012                     	;# 
  1255  0013                     	;# 
  1256  0014                     	;# 
  1257  0015                     	;# 
  1258  0015                     	;# 
  1259  0016                     	;# 
  1260  0016                     	;# 
  1261  0017                     	;# 
  1262  0018                     	;# 
  1263  0019                     	;# 
  1264  0019                     	;# 
  1265  001A                     	;# 
  1266  001B                     	;# 
  1267  001C                     	;# 
  1268  001D                     	;# 
  1269  001E                     	;# 
  1270  001F                     	;# 
  1271  008C                     	;# 
  1272  008D                     	;# 
  1273  008E                     	;# 
  1274  0090                     	;# 
  1275  0091                     	;# 
  1276  0092                     	;# 
  1277  0093                     	;# 
  1278  0094                     	;# 
  1279  0097                     	;# 
  1280  009B                     	;# 
  1281  009B                     	;# 
  1282  009C                     	;# 
  1283  009D                     	;# 
  1284  009E                     	;# 
  1285  009F                     	;# 
  1286  010C                     	;# 
  1287  010D                     	;# 
  1288  010E                     	;# 
  1289  0111                     	;# 
  1290  0112                     	;# 
  1291  0113                     	;# 
  1292  0114                     	;# 
  1293  0115                     	;# 
  1294  0116                     	;# 
  1295  0117                     	;# 
  1296  0118                     	;# 
  1297  0119                     	;# 
  1298  018C                     	;# 
  1299  018D                     	;# 
  1300  018E                     	;# 
  1301  0197                     	;# 
  1302  0199                     	;# 
  1303  0199                     	;# 
  1304  0199                     	;# 
  1305  019A                     	;# 
  1306  019A                     	;# 
  1307  019A                     	;# 
  1308  019B                     	;# 
  1309  019B                     	;# 
  1310  019B                     	;# 
  1311  019B                     	;# 
  1312  019B                     	;# 
  1313  019C                     	;# 
  1314  019C                     	;# 
  1315  019C                     	;# 
  1316  019D                     	;# 
  1317  019D                     	;# 
  1318  019D                     	;# 
  1319  019E                     	;# 
  1320  019E                     	;# 
  1321  019E                     	;# 
  1322  019F                     	;# 
  1323  019F                     	;# 
  1324  019F                     	;# 
  1325  019F                     	;# 
  1326  019F                     	;# 
  1327  020C                     	;# 
  1328  020D                     	;# 
  1329  020E                     	;# 
  1330  0211                     	;# 
  1331  0211                     	;# 
  1332  0212                     	;# 
  1333  0212                     	;# 
  1334  0213                     	;# 
  1335  0213                     	;# 
  1336  0214                     	;# 
  1337  0214                     	;# 
  1338  0215                     	;# 
  1339  0215                     	;# 
  1340  0215                     	;# 
  1341  0215                     	;# 
  1342  0216                     	;# 
  1343  0216                     	;# 
  1344  0217                     	;# 
  1345  0217                     	;# 
  1346  0219                     	;# 
  1347  021A                     	;# 
  1348  021B                     	;# 
  1349  021C                     	;# 
  1350  021D                     	;# 
  1351  021D                     	;# 
  1352  021E                     	;# 
  1353  021F                     	;# 
  1354  028C                     	;# 
  1355  028D                     	;# 
  1356  028E                     	;# 
  1357  0291                     	;# 
  1358  0291                     	;# 
  1359  0292                     	;# 
  1360  0293                     	;# 
  1361  0294                     	;# 
  1362  0295                     	;# 
  1363  0295                     	;# 
  1364  0296                     	;# 
  1365  0297                     	;# 
  1366  0298                     	;# 
  1367  029F                     	;# 
  1368  030C                     	;# 
  1369  030D                     	;# 
  1370  030E                     	;# 
  1371  0311                     	;# 
  1372  0311                     	;# 
  1373  0312                     	;# 
  1374  0313                     	;# 
  1375  0314                     	;# 
  1376  0315                     	;# 
  1377  0315                     	;# 
  1378  0316                     	;# 
  1379  0317                     	;# 
  1380  0318                     	;# 
  1381  038C                     	;# 
  1382  038D                     	;# 
  1383  038E                     	;# 
  1384  0391                     	;# 
  1385  0392                     	;# 
  1386  0393                     	;# 
  1387  0394                     	;# 
  1388  0395                     	;# 
  1389  0396                     	;# 
  1390  0397                     	;# 
  1391  0398                     	;# 
  1392  0399                     	;# 
  1393  039A                     	;# 
  1394  039C                     	;# 
  1395  039D                     	;# 
  1396  039E                     	;# 
  1397  039F                     	;# 
  1398  0411                     	;# 
  1399  0411                     	;# 
  1400  0412                     	;# 
  1401  0413                     	;# 
  1402  0414                     	;# 
  1403  0415                     	;# 
  1404  0416                     	;# 
  1405  0417                     	;# 
  1406  0418                     	;# 
  1407  0418                     	;# 
  1408  0419                     	;# 
  1409  041A                     	;# 
  1410  041B                     	;# 
  1411  041C                     	;# 
  1412  041D                     	;# 
  1413  041E                     	;# 
  1414  041F                     	;# 
  1415  0498                     	;# 
  1416  0498                     	;# 
  1417  0499                     	;# 
  1418  049A                     	;# 
  1419  049B                     	;# 
  1420  049B                     	;# 
  1421  049C                     	;# 
  1422  049D                     	;# 
  1423  049E                     	;# 
  1424  049F                     	;# 
  1425  0617                     	;# 
  1426  0618                     	;# 
  1427  0619                     	;# 
  1428  0619                     	;# 
  1429  061A                     	;# 
  1430  061B                     	;# 
  1431  061C                     	;# 
  1432  061C                     	;# 
  1433  061F                     	;# 
  1434  0691                     	;# 
  1435  0692                     	;# 
  1436  0693                     	;# 
  1437  0694                     	;# 
  1438  0695                     	;# 
  1439  0696                     	;# 
  1440  0697                     	;# 
  1441  0698                     	;# 
  1442  0699                     	;# 
  1443  0711                     	;# 
  1444  0712                     	;# 
  1445  0713                     	;# 
  1446  0714                     	;# 
  1447  0715                     	;# 
  1448  0716                     	;# 
  1449  0717                     	;# 
  1450  0718                     	;# 
  1451  0719                     	;# 
  1452  0891                     	;# 
  1453  0891                     	;# 
  1454  0891                     	;# 
  1455  0891                     	;# 
  1456  0891                     	;# 
  1457  0891                     	;# 
  1458  0892                     	;# 
  1459  0892                     	;# 
  1460  0892                     	;# 
  1461  0893                     	;# 
  1462  0893                     	;# 
  1463  0893                     	;# 
  1464  0893                     	;# 
  1465  0893                     	;# 
  1466  0893                     	;# 
  1467  0894                     	;# 
  1468  0894                     	;# 
  1469  0894                     	;# 
  1470  0895                     	;# 
  1471  0895                     	;# 
  1472  0895                     	;# 
  1473  0896                     	;# 
  1474  0896                     	;# 
  1475  0896                     	;# 
  1476  089B                     	;# 
  1477  0911                     	;# 
  1478  0912                     	;# 
  1479  0913                     	;# 
  1480  0914                     	;# 
  1481  0915                     	;# 
  1482  0916                     	;# 
  1483  0918                     	;# 
  1484  0919                     	;# 
  1485  091A                     	;# 
  1486  091B                     	;# 
  1487  091C                     	;# 
  1488  091D                     	;# 
  1489  091E                     	;# 
  1490  091F                     	;# 
  1491  0E0F                     	;# 
  1492  0E10                     	;# 
  1493  0E11                     	;# 
  1494  0E12                     	;# 
  1495  0E13                     	;# 
  1496  0E14                     	;# 
  1497  0E15                     	;# 
  1498  0E16                     	;# 
  1499  0E17                     	;# 
  1500  0E18                     	;# 
  1501  0E19                     	;# 
  1502  0E1A                     	;# 
  1503  0E1B                     	;# 
  1504  0E1C                     	;# 
  1505  0E1D                     	;# 
  1506  0E1E                     	;# 
  1507  0E1F                     	;# 
  1508  0E20                     	;# 
  1509  0E21                     	;# 
  1510  0E22                     	;# 
  1511  0E24                     	;# 
  1512  0E25                     	;# 
  1513  0E28                     	;# 
  1514  0E29                     	;# 
  1515  0E2A                     	;# 
  1516  0E2B                     	;# 
  1517  0E2C                     	;# 
  1518  0E2D                     	;# 
  1519  0E2E                     	;# 
  1520  0E2F                     	;# 
  1521  0E90                     	;# 
  1522  0E91                     	;# 
  1523  0E92                     	;# 
  1524  0E94                     	;# 
  1525  0E95                     	;# 
  1526  0E9C                     	;# 
  1527  0E9D                     	;# 
  1528  0E9E                     	;# 
  1529  0E9F                     	;# 
  1530  0EA0                     	;# 
  1531  0EA1                     	;# 
  1532  0EA2                     	;# 
  1533  0EA3                     	;# 
  1534  0EA4                     	;# 
  1535  0EA5                     	;# 
  1536  0EA6                     	;# 
  1537  0EA7                     	;# 
  1538  0F0F                     	;# 
  1539  0F10                     	;# 
  1540  0F11                     	;# 
  1541  0F12                     	;# 
  1542  0F13                     	;# 
  1543  0F14                     	;# 
  1544  0F15                     	;# 
  1545  0F16                     	;# 
  1546  0F17                     	;# 
  1547  0F18                     	;# 
  1548  0F19                     	;# 
  1549  0F1A                     	;# 
  1550  0F1B                     	;# 
  1551  0F1C                     	;# 
  1552  0F1D                     	;# 
  1553  0F1E                     	;# 
  1554  0F1F                     	;# 
  1555  0F20                     	;# 
  1556  0F21                     	;# 
  1557  0F22                     	;# 
  1558  0F23                     	;# 
  1559  0F24                     	;# 
  1560  0F25                     	;# 
  1561  0F26                     	;# 
  1562  0F27                     	;# 
  1563  0F28                     	;# 
  1564  0F29                     	;# 
  1565  0F2A                     	;# 
  1566  0F2B                     	;# 
  1567  0F2C                     	;# 
  1568  0F2D                     	;# 
  1569  0F2E                     	;# 
  1570  0F2F                     	;# 
  1571  0F30                     	;# 
  1572  0F31                     	;# 
  1573  0F32                     	;# 
  1574  0F33                     	;# 
  1575  0F34                     	;# 
  1576  0F35                     	;# 
  1577  0F36                     	;# 
  1578  0F37                     	;# 
  1579  0FE4                     	;# 
  1580  0FE5                     	;# 
  1581  0FE6                     	;# 
  1582  0FE7                     	;# 
  1583  0FE8                     	;# 
  1584  0FE9                     	;# 
  1585  0FEA                     	;# 
  1586  0FEB                     	;# 
  1587  0FED                     	;# 
  1588  0FEE                     	;# 
  1589  0FEF                     	;# 
  1590  0000                     	;# 
  1591  0001                     	;# 
  1592  0002                     	;# 
  1593  0003                     	;# 
  1594  0004                     	;# 
  1595  0005                     	;# 
  1596  0006                     	;# 
  1597  0007                     	;# 
  1598  0008                     	;# 
  1599  0009                     	;# 
  1600  000A                     	;# 
  1601  000B                     	;# 
  1602  000C                     	;# 
  1603  000D                     	;# 
  1604  000E                     	;# 
  1605  0010                     	;# 
  1606  0011                     	;# 
  1607  0012                     	;# 
  1608  0013                     	;# 
  1609  0014                     	;# 
  1610  0015                     	;# 
  1611  0015                     	;# 
  1612  0016                     	;# 
  1613  0016                     	;# 
  1614  0017                     	;# 
  1615  0018                     	;# 
  1616  0019                     	;# 
  1617  0019                     	;# 
  1618  001A                     	;# 
  1619  001B                     	;# 
  1620  001C                     	;# 
  1621  001D                     	;# 
  1622  001E                     	;# 
  1623  001F                     	;# 
  1624  008C                     	;# 
  1625  008D                     	;# 
  1626  008E                     	;# 
  1627  0090                     	;# 
  1628  0091                     	;# 
  1629  0092                     	;# 
  1630  0093                     	;# 
  1631  0094                     	;# 
  1632  0097                     	;# 
  1633  009B                     	;# 
  1634  009B                     	;# 
  1635  009C                     	;# 
  1636  009D                     	;# 
  1637  009E                     	;# 
  1638  009F                     	;# 
  1639  010C                     	;# 
  1640  010D                     	;# 
  1641  010E                     	;# 
  1642  0111                     	;# 
  1643  0112                     	;# 
  1644  0113                     	;# 
  1645  0114                     	;# 
  1646  0115                     	;# 
  1647  0116                     	;# 
  1648  0117                     	;# 
  1649  0118                     	;# 
  1650  0119                     	;# 
  1651  018C                     	;# 
  1652  018D                     	;# 
  1653  018E                     	;# 
  1654  0197                     	;# 
  1655  0199                     	;# 
  1656  0199                     	;# 
  1657  0199                     	;# 
  1658  019A                     	;# 
  1659  019A                     	;# 
  1660  019A                     	;# 
  1661  019B                     	;# 
  1662  019B                     	;# 
  1663  019B                     	;# 
  1664  019B                     	;# 
  1665  019B                     	;# 
  1666  019C                     	;# 
  1667  019C                     	;# 
  1668  019C                     	;# 
  1669  019D                     	;# 
  1670  019D                     	;# 
  1671  019D                     	;# 
  1672  019E                     	;# 
  1673  019E                     	;# 
  1674  019E                     	;# 
  1675  019F                     	;# 
  1676  019F                     	;# 
  1677  019F                     	;# 
  1678  019F                     	;# 
  1679  019F                     	;# 
  1680  020C                     	;# 
  1681  020D                     	;# 
  1682  020E                     	;# 
  1683  0211                     	;# 
  1684  0211                     	;# 
  1685  0212                     	;# 
  1686  0212                     	;# 
  1687  0213                     	;# 
  1688  0213                     	;# 
  1689  0214                     	;# 
  1690  0214                     	;# 
  1691  0215                     	;# 
  1692  0215                     	;# 
  1693  0215                     	;# 
  1694  0215                     	;# 
  1695  0216                     	;# 
  1696  0216                     	;# 
  1697  0217                     	;# 
  1698  0217                     	;# 
  1699  0219                     	;# 
  1700  021A                     	;# 
  1701  021B                     	;# 
  1702  021C                     	;# 
  1703  021D                     	;# 
  1704  021D                     	;# 
  1705  021E                     	;# 
  1706  021F                     	;# 
  1707  028C                     	;# 
  1708  028D                     	;# 
  1709  028E                     	;# 
  1710  0291                     	;# 
  1711  0291                     	;# 
  1712  0292                     	;# 
  1713  0293                     	;# 
  1714  0294                     	;# 
  1715  0295                     	;# 
  1716  0295                     	;# 
  1717  0296                     	;# 
  1718  0297                     	;# 
  1719  0298                     	;# 
  1720  029F                     	;# 
  1721  030C                     	;# 
  1722  030D                     	;# 
  1723  030E                     	;# 
  1724  0311                     	;# 
  1725  0311                     	;# 
  1726  0312                     	;# 
  1727  0313                     	;# 
  1728  0314                     	;# 
  1729  0315                     	;# 
  1730  0315                     	;# 
  1731  0316                     	;# 
  1732  0317                     	;# 
  1733  0318                     	;# 
  1734  038C                     	;# 
  1735  038D                     	;# 
  1736  038E                     	;# 
  1737  0391                     	;# 
  1738  0392                     	;# 
  1739  0393                     	;# 
  1740  0394                     	;# 
  1741  0395                     	;# 
  1742  0396                     	;# 
  1743  0397                     	;# 
  1744  0398                     	;# 
  1745  0399                     	;# 
  1746  039A                     	;# 
  1747  039C                     	;# 
  1748  039D                     	;# 
  1749  039E                     	;# 
  1750  039F                     	;# 
  1751  0411                     	;# 
  1752  0411                     	;# 
  1753  0412                     	;# 
  1754  0413                     	;# 
  1755  0414                     	;# 
  1756  0415                     	;# 
  1757  0416                     	;# 
  1758  0417                     	;# 
  1759  0418                     	;# 
  1760  0418                     	;# 
  1761  0419                     	;# 
  1762  041A                     	;# 
  1763  041B                     	;# 
  1764  041C                     	;# 
  1765  041D                     	;# 
  1766  041E                     	;# 
  1767  041F                     	;# 
  1768  0498                     	;# 
  1769  0498                     	;# 
  1770  0499                     	;# 
  1771  049A                     	;# 
  1772  049B                     	;# 
  1773  049B                     	;# 
  1774  049C                     	;# 
  1775  049D                     	;# 
  1776  049E                     	;# 
  1777  049F                     	;# 
  1778  0617                     	;# 
  1779  0618                     	;# 
  1780  0619                     	;# 
  1781  0619                     	;# 
  1782  061A                     	;# 
  1783  061B                     	;# 
  1784  061C                     	;# 
  1785  061C                     	;# 
  1786  061F                     	;# 
  1787  0691                     	;# 
  1788  0692                     	;# 
  1789  0693                     	;# 
  1790  0694                     	;# 
  1791  0695                     	;# 
  1792  0696                     	;# 
  1793  0697                     	;# 
  1794  0698                     	;# 
  1795  0699                     	;# 
  1796  0711                     	;# 
  1797  0712                     	;# 
  1798  0713                     	;# 
  1799  0714                     	;# 
  1800  0715                     	;# 
  1801  0716                     	;# 
  1802  0717                     	;# 
  1803  0718                     	;# 
  1804  0719                     	;# 
  1805  0891                     	;# 
  1806  0891                     	;# 
  1807  0891                     	;# 
  1808  0891                     	;# 
  1809  0891                     	;# 
  1810  0891                     	;# 
  1811  0892                     	;# 
  1812  0892                     	;# 
  1813  0892                     	;# 
  1814  0893                     	;# 
  1815  0893                     	;# 
  1816  0893                     	;# 
  1817  0893                     	;# 
  1818  0893                     	;# 
  1819  0893                     	;# 
  1820  0894                     	;# 
  1821  0894                     	;# 
  1822  0894                     	;# 
  1823  0895                     	;# 
  1824  0895                     	;# 
  1825  0895                     	;# 
  1826  0896                     	;# 
  1827  0896                     	;# 
  1828  0896                     	;# 
  1829  089B                     	;# 
  1830  0911                     	;# 
  1831  0912                     	;# 
  1832  0913                     	;# 
  1833  0914                     	;# 
  1834  0915                     	;# 
  1835  0916                     	;# 
  1836  0918                     	;# 
  1837  0919                     	;# 
  1838  091A                     	;# 
  1839  091B                     	;# 
  1840  091C                     	;# 
  1841  091D                     	;# 
  1842  091E                     	;# 
  1843  091F                     	;# 
  1844  0E0F                     	;# 
  1845  0E10                     	;# 
  1846  0E11                     	;# 
  1847  0E12                     	;# 
  1848  0E13                     	;# 
  1849  0E14                     	;# 
  1850  0E15                     	;# 
  1851  0E16                     	;# 
  1852  0E17                     	;# 
  1853  0E18                     	;# 
  1854  0E19                     	;# 
  1855  0E1A                     	;# 
  1856  0E1B                     	;# 
  1857  0E1C                     	;# 
  1858  0E1D                     	;# 
  1859  0E1E                     	;# 
  1860  0E1F                     	;# 
  1861  0E20                     	;# 
  1862  0E21                     	;# 
  1863  0E22                     	;# 
  1864  0E24                     	;# 
  1865  0E25                     	;# 
  1866  0E28                     	;# 
  1867  0E29                     	;# 
  1868  0E2A                     	;# 
  1869  0E2B                     	;# 
  1870  0E2C                     	;# 
  1871  0E2D                     	;# 
  1872  0E2E                     	;# 
  1873  0E2F                     	;# 
  1874  0E90                     	;# 
  1875  0E91                     	;# 
  1876  0E92                     	;# 
  1877  0E94                     	;# 
  1878  0E95                     	;# 
  1879  0E9C                     	;# 
  1880  0E9D                     	;# 
  1881  0E9E                     	;# 
  1882  0E9F                     	;# 
  1883  0EA0                     	;# 
  1884  0EA1                     	;# 
  1885  0EA2                     	;# 
  1886  0EA3                     	;# 
  1887  0EA4                     	;# 
  1888  0EA5                     	;# 
  1889  0EA6                     	;# 
  1890  0EA7                     	;# 
  1891  0F0F                     	;# 
  1892  0F10                     	;# 
  1893  0F11                     	;# 
  1894  0F12                     	;# 
  1895  0F13                     	;# 
  1896  0F14                     	;# 
  1897  0F15                     	;# 
  1898  0F16                     	;# 
  1899  0F17                     	;# 
  1900  0F18                     	;# 
  1901  0F19                     	;# 
  1902  0F1A                     	;# 
  1903  0F1B                     	;# 
  1904  0F1C                     	;# 
  1905  0F1D                     	;# 
  1906  0F1E                     	;# 
  1907  0F1F                     	;# 
  1908  0F20                     	;# 
  1909  0F21                     	;# 
  1910  0F22                     	;# 
  1911  0F23                     	;# 
  1912  0F24                     	;# 
  1913  0F25                     	;# 
  1914  0F26                     	;# 
  1915  0F27                     	;# 
  1916  0F28                     	;# 
  1917  0F29                     	;# 
  1918  0F2A                     	;# 
  1919  0F2B                     	;# 
  1920  0F2C                     	;# 
  1921  0F2D                     	;# 
  1922  0F2E                     	;# 
  1923  0F2F                     	;# 
  1924  0F30                     	;# 
  1925  0F31                     	;# 
  1926  0F32                     	;# 
  1927  0F33                     	;# 
  1928  0F34                     	;# 
  1929  0F35                     	;# 
  1930  0F36                     	;# 
  1931  0F37                     	;# 
  1932  0FE4                     	;# 
  1933  0FE5                     	;# 
  1934  0FE6                     	;# 
  1935  0FE7                     	;# 
  1936  0FE8                     	;# 
  1937  0FE9                     	;# 
  1938  0FEA                     	;# 
  1939  0FEB                     	;# 
  1940  0FED                     	;# 
  1941  0FEE                     	;# 
  1942  0FEF                     	;# 
  1943  0000                     	;# 
  1944  0001                     	;# 
  1945  0002                     	;# 
  1946  0003                     	;# 
  1947  0004                     	;# 
  1948  0005                     	;# 
  1949  0006                     	;# 
  1950  0007                     	;# 
  1951  0008                     	;# 
  1952  0009                     	;# 
  1953  000A                     	;# 
  1954  000B                     	;# 
  1955  000C                     	;# 
  1956  000D                     	;# 
  1957  000E                     	;# 
  1958  0010                     	;# 
  1959  0011                     	;# 
  1960  0012                     	;# 
  1961  0013                     	;# 
  1962  0014                     	;# 
  1963  0015                     	;# 
  1964  0015                     	;# 
  1965  0016                     	;# 
  1966  0016                     	;# 
  1967  0017                     	;# 
  1968  0018                     	;# 
  1969  0019                     	;# 
  1970  0019                     	;# 
  1971  001A                     	;# 
  1972  001B                     	;# 
  1973  001C                     	;# 
  1974  001D                     	;# 
  1975  001E                     	;# 
  1976  001F                     	;# 
  1977  008C                     	;# 
  1978  008D                     	;# 
  1979  008E                     	;# 
  1980  0090                     	;# 
  1981  0091                     	;# 
  1982  0092                     	;# 
  1983  0093                     	;# 
  1984  0094                     	;# 
  1985  0097                     	;# 
  1986  009B                     	;# 
  1987  009B                     	;# 
  1988  009C                     	;# 
  1989  009D                     	;# 
  1990  009E                     	;# 
  1991  009F                     	;# 
  1992  010C                     	;# 
  1993  010D                     	;# 
  1994  010E                     	;# 
  1995  0111                     	;# 
  1996  0112                     	;# 
  1997  0113                     	;# 
  1998  0114                     	;# 
  1999  0115                     	;# 
  2000  0116                     	;# 
  2001  0117                     	;# 
  2002  0118                     	;# 
  2003  0119                     	;# 
  2004  018C                     	;# 
  2005  018D                     	;# 
  2006  018E                     	;# 
  2007  0197                     	;# 
  2008  0199                     	;# 
  2009  0199                     	;# 
  2010  0199                     	;# 
  2011  019A                     	;# 
  2012  019A                     	;# 
  2013  019A                     	;# 
  2014  019B                     	;# 
  2015  019B                     	;# 
  2016  019B                     	;# 
  2017  019B                     	;# 
  2018  019B                     	;# 
  2019  019C                     	;# 
  2020  019C                     	;# 
  2021  019C                     	;# 
  2022  019D                     	;# 
  2023  019D                     	;# 
  2024  019D                     	;# 
  2025  019E                     	;# 
  2026  019E                     	;# 
  2027  019E                     	;# 
  2028  019F                     	;# 
  2029  019F                     	;# 
  2030  019F                     	;# 
  2031  019F                     	;# 
  2032  019F                     	;# 
  2033  020C                     	;# 
  2034  020D                     	;# 
  2035  020E                     	;# 
  2036  0211                     	;# 
  2037  0211                     	;# 
  2038  0212                     	;# 
  2039  0212                     	;# 
  2040  0213                     	;# 
  2041  0213                     	;# 
  2042  0214                     	;# 
  2043  0214                     	;# 
  2044  0215                     	;# 
  2045  0215                     	;# 
  2046  0215                     	;# 
  2047  0215                     	;# 
  2048  0216                     	;# 
  2049  0216                     	;# 
  2050  0217                     	;# 
  2051  0217                     	;# 
  2052  0219                     	;# 
  2053  021A                     	;# 
  2054  021B                     	;# 
  2055  021C                     	;# 
  2056  021D                     	;# 
  2057  021D                     	;# 
  2058  021E                     	;# 
  2059  021F                     	;# 
  2060  028C                     	;# 
  2061  028D                     	;# 
  2062  028E                     	;# 
  2063  0291                     	;# 
  2064  0291                     	;# 
  2065  0292                     	;# 
  2066  0293                     	;# 
  2067  0294                     	;# 
  2068  0295                     	;# 
  2069  0295                     	;# 
  2070  0296                     	;# 
  2071  0297                     	;# 
  2072  0298                     	;# 
  2073  029F                     	;# 
  2074  030C                     	;# 
  2075  030D                     	;# 
  2076  030E                     	;# 
  2077  0311                     	;# 
  2078  0311                     	;# 
  2079  0312                     	;# 
  2080  0313                     	;# 
  2081  0314                     	;# 
  2082  0315                     	;# 
  2083  0315                     	;# 
  2084  0316                     	;# 
  2085  0317                     	;# 
  2086  0318                     	;# 
  2087  038C                     	;# 
  2088  038D                     	;# 
  2089  038E                     	;# 
  2090  0391                     	;# 
  2091  0392                     	;# 
  2092  0393                     	;# 
  2093  0394                     	;# 
  2094  0395                     	;# 
  2095  0396                     	;# 
  2096  0397                     	;# 
  2097  0398                     	;# 
  2098  0399                     	;# 
  2099  039A                     	;# 
  2100  039C                     	;# 
  2101  039D                     	;# 
  2102  039E                     	;# 
  2103  039F                     	;# 
  2104  0411                     	;# 
  2105  0411                     	;# 
  2106  0412                     	;# 
  2107  0413                     	;# 
  2108  0414                     	;# 
  2109  0415                     	;# 
  2110  0416                     	;# 
  2111  0417                     	;# 
  2112  0418                     	;# 
  2113  0418                     	;# 
  2114  0419                     	;# 
  2115  041A                     	;# 
  2116  041B                     	;# 
  2117  041C                     	;# 
  2118  041D                     	;# 
  2119  041E                     	;# 
  2120  041F                     	;# 
  2121  0498                     	;# 
  2122  0498                     	;# 
  2123  0499                     	;# 
  2124  049A                     	;# 
  2125  049B                     	;# 
  2126  049B                     	;# 
  2127  049C                     	;# 
  2128  049D                     	;# 
  2129  049E                     	;# 
  2130  049F                     	;# 
  2131  0617                     	;# 
  2132  0618                     	;# 
  2133  0619                     	;# 
  2134  0619                     	;# 
  2135  061A                     	;# 
  2136  061B                     	;# 
  2137  061C                     	;# 
  2138  061C                     	;# 
  2139  061F                     	;# 
  2140  0691                     	;# 
  2141  0692                     	;# 
  2142  0693                     	;# 
  2143  0694                     	;# 
  2144  0695                     	;# 
  2145  0696                     	;# 
  2146  0697                     	;# 
  2147  0698                     	;# 
  2148  0699                     	;# 
  2149  0711                     	;# 
  2150  0712                     	;# 
  2151  0713                     	;# 
  2152  0714                     	;# 
  2153  0715                     	;# 
  2154  0716                     	;# 
  2155  0717                     	;# 
  2156  0718                     	;# 
  2157  0719                     	;# 
  2158  0891                     	;# 
  2159  0891                     	;# 
  2160  0891                     	;# 
  2161  0891                     	;# 
  2162  0891                     	;# 
  2163  0891                     	;# 
  2164  0892                     	;# 
  2165  0892                     	;# 
  2166  0892                     	;# 
  2167  0893                     	;# 
  2168  0893                     	;# 
  2169  0893                     	;# 
  2170  0893                     	;# 
  2171  0893                     	;# 
  2172  0893                     	;# 
  2173  0894                     	;# 
  2174  0894                     	;# 
  2175  0894                     	;# 
  2176  0895                     	;# 
  2177  0895                     	;# 
  2178  0895                     	;# 
  2179  0896                     	;# 
  2180  0896                     	;# 
  2181  0896                     	;# 
  2182  089B                     	;# 
  2183  0911                     	;# 
  2184  0912                     	;# 
  2185  0913                     	;# 
  2186  0914                     	;# 
  2187  0915                     	;# 
  2188  0916                     	;# 
  2189  0918                     	;# 
  2190  0919                     	;# 
  2191  091A                     	;# 
  2192  091B                     	;# 
  2193  091C                     	;# 
  2194  091D                     	;# 
  2195  091E                     	;# 
  2196  091F                     	;# 
  2197  0E0F                     	;# 
  2198  0E10                     	;# 
  2199  0E11                     	;# 
  2200  0E12                     	;# 
  2201  0E13                     	;# 
  2202  0E14                     	;# 
  2203  0E15                     	;# 
  2204  0E16                     	;# 
  2205  0E17                     	;# 
  2206  0E18                     	;# 
  2207  0E19                     	;# 
  2208  0E1A                     	;# 
  2209  0E1B                     	;# 
  2210  0E1C                     	;# 
  2211  0E1D                     	;# 
  2212  0E1E                     	;# 
  2213  0E1F                     	;# 
  2214  0E20                     	;# 
  2215  0E21                     	;# 
  2216  0E22                     	;# 
  2217  0E24                     	;# 
  2218  0E25                     	;# 
  2219  0E28                     	;# 
  2220  0E29                     	;# 
  2221  0E2A                     	;# 
  2222  0E2B                     	;# 
  2223  0E2C                     	;# 
  2224  0E2D                     	;# 
  2225  0E2E                     	;# 
  2226  0E2F                     	;# 
  2227  0E90                     	;# 
  2228  0E91                     	;# 
  2229  0E92                     	;# 
  2230  0E94                     	;# 
  2231  0E95                     	;# 
  2232  0E9C                     	;# 
  2233  0E9D                     	;# 
  2234  0E9E                     	;# 
  2235  0E9F                     	;# 
  2236  0EA0                     	;# 
  2237  0EA1                     	;# 
  2238  0EA2                     	;# 
  2239  0EA3                     	;# 
  2240  0EA4                     	;# 
  2241  0EA5                     	;# 
  2242  0EA6                     	;# 
  2243  0EA7                     	;# 
  2244  0F0F                     	;# 
  2245  0F10                     	;# 
  2246  0F11                     	;# 
  2247  0F12                     	;# 
  2248  0F13                     	;# 
  2249  0F14                     	;# 
  2250  0F15                     	;# 
  2251  0F16                     	;# 
  2252  0F17                     	;# 
  2253  0F18                     	;# 
  2254  0F19                     	;# 
  2255  0F1A                     	;# 
  2256  0F1B                     	;# 
  2257  0F1C                     	;# 
  2258  0F1D                     	;# 
  2259  0F1E                     	;# 
  2260  0F1F                     	;# 
  2261  0F20                     	;# 
  2262  0F21                     	;# 
  2263  0F22                     	;# 
  2264  0F23                     	;# 
  2265  0F24                     	;# 
  2266  0F25                     	;# 
  2267  0F26                     	;# 
  2268  0F27                     	;# 
  2269  0F28                     	;# 
  2270  0F29                     	;# 
  2271  0F2A                     	;# 
  2272  0F2B                     	;# 
  2273  0F2C                     	;# 
  2274  0F2D                     	;# 
  2275  0F2E                     	;# 
  2276  0F2F                     	;# 
  2277  0F30                     	;# 
  2278  0F31                     	;# 
  2279  0F32                     	;# 
  2280  0F33                     	;# 
  2281  0F34                     	;# 
  2282  0F35                     	;# 
  2283  0F36                     	;# 
  2284  0F37                     	;# 
  2285  0FE4                     	;# 
  2286  0FE5                     	;# 
  2287  0FE6                     	;# 
  2288  0FE7                     	;# 
  2289  0FE8                     	;# 
  2290  0FE9                     	;# 
  2291  0FEA                     	;# 
  2292  0FEB                     	;# 
  2293  0FED                     	;# 
  2294  0FEE                     	;# 
  2295  0FEF                     	;# 
  2296  0000                     	;# 
  2297  0001                     	;# 
  2298  0002                     	;# 
  2299  0003                     	;# 
  2300  0004                     	;# 
  2301  0005                     	;# 
  2302  0006                     	;# 
  2303  0007                     	;# 
  2304  0008                     	;# 
  2305  0009                     	;# 
  2306  000A                     	;# 
  2307  000B                     	;# 
  2308  000C                     	;# 
  2309  000D                     	;# 
  2310  000E                     	;# 
  2311  0010                     	;# 
  2312  0011                     	;# 
  2313  0012                     	;# 
  2314  0013                     	;# 
  2315  0014                     	;# 
  2316  0015                     	;# 
  2317  0015                     	;# 
  2318  0016                     	;# 
  2319  0016                     	;# 
  2320  0017                     	;# 
  2321  0018                     	;# 
  2322  0019                     	;# 
  2323  0019                     	;# 
  2324  001A                     	;# 
  2325  001B                     	;# 
  2326  001C                     	;# 
  2327  001D                     	;# 
  2328  001E                     	;# 
  2329  001F                     	;# 
  2330  008C                     	;# 
  2331  008D                     	;# 
  2332  008E                     	;# 
  2333  0090                     	;# 
  2334  0091                     	;# 
  2335  0092                     	;# 
  2336  0093                     	;# 
  2337  0094                     	;# 
  2338  0097                     	;# 
  2339  009B                     	;# 
  2340  009B                     	;# 
  2341  009C                     	;# 
  2342  009D                     	;# 
  2343  009E                     	;# 
  2344  009F                     	;# 
  2345  010C                     	;# 
  2346  010D                     	;# 
  2347  010E                     	;# 
  2348  0111                     	;# 
  2349  0112                     	;# 
  2350  0113                     	;# 
  2351  0114                     	;# 
  2352  0115                     	;# 
  2353  0116                     	;# 
  2354  0117                     	;# 
  2355  0118                     	;# 
  2356  0119                     	;# 
  2357  018C                     	;# 
  2358  018D                     	;# 
  2359  018E                     	;# 
  2360  0197                     	;# 
  2361  0199                     	;# 
  2362  0199                     	;# 
  2363  0199                     	;# 
  2364  019A                     	;# 
  2365  019A                     	;# 
  2366  019A                     	;# 
  2367  019B                     	;# 
  2368  019B                     	;# 
  2369  019B                     	;# 
  2370  019B                     	;# 
  2371  019B                     	;# 
  2372  019C                     	;# 
  2373  019C                     	;# 
  2374  019C                     	;# 
  2375  019D                     	;# 
  2376  019D                     	;# 
  2377  019D                     	;# 
  2378  019E                     	;# 
  2379  019E                     	;# 
  2380  019E                     	;# 
  2381  019F                     	;# 
  2382  019F                     	;# 
  2383  019F                     	;# 
  2384  019F                     	;# 
  2385  019F                     	;# 
  2386  020C                     	;# 
  2387  020D                     	;# 
  2388  020E                     	;# 
  2389  0211                     	;# 
  2390  0211                     	;# 
  2391  0212                     	;# 
  2392  0212                     	;# 
  2393  0213                     	;# 
  2394  0213                     	;# 
  2395  0214                     	;# 
  2396  0214                     	;# 
  2397  0215                     	;# 
  2398  0215                     	;# 
  2399  0215                     	;# 
  2400  0215                     	;# 
  2401  0216                     	;# 
  2402  0216                     	;# 
  2403  0217                     	;# 
  2404  0217                     	;# 
  2405  0219                     	;# 
  2406  021A                     	;# 
  2407  021B                     	;# 
  2408  021C                     	;# 
  2409  021D                     	;# 
  2410  021D                     	;# 
  2411  021E                     	;# 
  2412  021F                     	;# 
  2413  028C                     	;# 
  2414  028D                     	;# 
  2415  028E                     	;# 
  2416  0291                     	;# 
  2417  0291                     	;# 
  2418  0292                     	;# 
  2419  0293                     	;# 
  2420  0294                     	;# 
  2421  0295                     	;# 
  2422  0295                     	;# 
  2423  0296                     	;# 
  2424  0297                     	;# 
  2425  0298                     	;# 
  2426  029F                     	;# 
  2427  030C                     	;# 
  2428  030D                     	;# 
  2429  030E                     	;# 
  2430  0311                     	;# 
  2431  0311                     	;# 
  2432  0312                     	;# 
  2433  0313                     	;# 
  2434  0314                     	;# 
  2435  0315                     	;# 
  2436  0315                     	;# 
  2437  0316                     	;# 
  2438  0317                     	;# 
  2439  0318                     	;# 
  2440  038C                     	;# 
  2441  038D                     	;# 
  2442  038E                     	;# 
  2443  0391                     	;# 
  2444  0392                     	;# 
  2445  0393                     	;# 
  2446  0394                     	;# 
  2447  0395                     	;# 
  2448  0396                     	;# 
  2449  0397                     	;# 
  2450  0398                     	;# 
  2451  0399                     	;# 
  2452  039A                     	;# 
  2453  039C                     	;# 
  2454  039D                     	;# 
  2455  039E                     	;# 
  2456  039F                     	;# 
  2457  0411                     	;# 
  2458  0411                     	;# 
  2459  0412                     	;# 
  2460  0413                     	;# 
  2461  0414                     	;# 
  2462  0415                     	;# 
  2463  0416                     	;# 
  2464  0417                     	;# 
  2465  0418                     	;# 
  2466  0418                     	;# 
  2467  0419                     	;# 
  2468  041A                     	;# 
  2469  041B                     	;# 
  2470  041C                     	;# 
  2471  041D                     	;# 
  2472  041E                     	;# 
  2473  041F                     	;# 
  2474  0498                     	;# 
  2475  0498                     	;# 
  2476  0499                     	;# 
  2477  049A                     	;# 
  2478  049B                     	;# 
  2479  049B                     	;# 
  2480  049C                     	;# 
  2481  049D                     	;# 
  2482  049E                     	;# 
  2483  049F                     	;# 
  2484  0617                     	;# 
  2485  0618                     	;# 
  2486  0619                     	;# 
  2487  0619                     	;# 
  2488  061A                     	;# 
  2489  061B                     	;# 
  2490  061C                     	;# 
  2491  061C                     	;# 
  2492  061F                     	;# 
  2493  0691                     	;# 
  2494  0692                     	;# 
  2495  0693                     	;# 
  2496  0694                     	;# 
  2497  0695                     	;# 
  2498  0696                     	;# 
  2499  0697                     	;# 
  2500  0698                     	;# 
  2501  0699                     	;# 
  2502  0711                     	;# 
  2503  0712                     	;# 
  2504  0713                     	;# 
  2505  0714                     	;# 
  2506  0715                     	;# 
  2507  0716                     	;# 
  2508  0717                     	;# 
  2509  0718                     	;# 
  2510  0719                     	;# 
  2511  0891                     	;# 
  2512  0891                     	;# 
  2513  0891                     	;# 
  2514  0891                     	;# 
  2515  0891                     	;# 
  2516  0891                     	;# 
  2517  0892                     	;# 
  2518  0892                     	;# 
  2519  0892                     	;# 
  2520  0893                     	;# 
  2521  0893                     	;# 
  2522  0893                     	;# 
  2523  0893                     	;# 
  2524  0893                     	;# 
  2525  0893                     	;# 
  2526  0894                     	;# 
  2527  0894                     	;# 
  2528  0894                     	;# 
  2529  0895                     	;# 
  2530  0895                     	;# 
  2531  0895                     	;# 
  2532  0896                     	;# 
  2533  0896                     	;# 
  2534  0896                     	;# 
  2535  089B                     	;# 
  2536  0911                     	;# 
  2537  0912                     	;# 
  2538  0913                     	;# 
  2539  0914                     	;# 
  2540  0915                     	;# 
  2541  0916                     	;# 
  2542  0918                     	;# 
  2543  0919                     	;# 
  2544  091A                     	;# 
  2545  091B                     	;# 
  2546  091C                     	;# 
  2547  091D                     	;# 
  2548  091E                     	;# 
  2549  091F                     	;# 
  2550  0E0F                     	;# 
  2551  0E10                     	;# 
  2552  0E11                     	;# 
  2553  0E12                     	;# 
  2554  0E13                     	;# 
  2555  0E14                     	;# 
  2556  0E15                     	;# 
  2557  0E16                     	;# 
  2558  0E17                     	;# 
  2559  0E18                     	;# 
  2560  0E19                     	;# 
  2561  0E1A                     	;# 
  2562  0E1B                     	;# 
  2563  0E1C                     	;# 
  2564  0E1D                     	;# 
  2565  0E1E                     	;# 
  2566  0E1F                     	;# 
  2567  0E20                     	;# 
  2568  0E21                     	;# 
  2569  0E22                     	;# 
  2570  0E24                     	;# 
  2571  0E25                     	;# 
  2572  0E28                     	;# 
  2573  0E29                     	;# 
  2574  0E2A                     	;# 
  2575  0E2B                     	;# 
  2576  0E2C                     	;# 
  2577  0E2D                     	;# 
  2578  0E2E                     	;# 
  2579  0E2F                     	;# 
  2580  0E90                     	;# 
  2581  0E91                     	;# 
  2582  0E92                     	;# 
  2583  0E94                     	;# 
  2584  0E95                     	;# 
  2585  0E9C                     	;# 
  2586  0E9D                     	;# 
  2587  0E9E                     	;# 
  2588  0E9F                     	;# 
  2589  0EA0                     	;# 
  2590  0EA1                     	;# 
  2591  0EA2                     	;# 
  2592  0EA3                     	;# 
  2593  0EA4                     	;# 
  2594  0EA5                     	;# 
  2595  0EA6                     	;# 
  2596  0EA7                     	;# 
  2597  0F0F                     	;# 
  2598  0F10                     	;# 
  2599  0F11                     	;# 
  2600  0F12                     	;# 
  2601  0F13                     	;# 
  2602  0F14                     	;# 
  2603  0F15                     	;# 
  2604  0F16                     	;# 
  2605  0F17                     	;# 
  2606  0F18                     	;# 
  2607  0F19                     	;# 
  2608  0F1A                     	;# 
  2609  0F1B                     	;# 
  2610  0F1C                     	;# 
  2611  0F1D                     	;# 
  2612  0F1E                     	;# 
  2613  0F1F                     	;# 
  2614  0F20                     	;# 
  2615  0F21                     	;# 
  2616  0F22                     	;# 
  2617  0F23                     	;# 
  2618  0F24                     	;# 
  2619  0F25                     	;# 
  2620  0F26                     	;# 
  2621  0F27                     	;# 
  2622  0F28                     	;# 
  2623  0F29                     	;# 
  2624  0F2A                     	;# 
  2625  0F2B                     	;# 
  2626  0F2C                     	;# 
  2627  0F2D                     	;# 
  2628  0F2E                     	;# 
  2629  0F2F                     	;# 
  2630  0F30                     	;# 
  2631  0F31                     	;# 
  2632  0F32                     	;# 
  2633  0F33                     	;# 
  2634  0F34                     	;# 
  2635  0F35                     	;# 
  2636  0F36                     	;# 
  2637  0F37                     	;# 
  2638  0FE4                     	;# 
  2639  0FE5                     	;# 
  2640  0FE6                     	;# 
  2641  0FE7                     	;# 
  2642  0FE8                     	;# 
  2643  0FE9                     	;# 
  2644  0FEA                     	;# 
  2645  0FEB                     	;# 
  2646  0FED                     	;# 
  2647  0FEE                     	;# 
  2648  0FEF                     	;# 
  2649  0000                     	;# 
  2650  0001                     	;# 
  2651  0002                     	;# 
  2652  0003                     	;# 
  2653  0004                     	;# 
  2654  0005                     	;# 
  2655  0006                     	;# 
  2656  0007                     	;# 
  2657  0008                     	;# 
  2658  0009                     	;# 
  2659  000A                     	;# 
  2660  000B                     	;# 
  2661  000C                     	;# 
  2662  000D                     	;# 
  2663  000E                     	;# 
  2664  0010                     	;# 
  2665  0011                     	;# 
  2666  0012                     	;# 
  2667  0013                     	;# 
  2668  0014                     	;# 
  2669  0015                     	;# 
  2670  0015                     	;# 
  2671  0016                     	;# 
  2672  0016                     	;# 
  2673  0017                     	;# 
  2674  0018                     	;# 
  2675  0019                     	;# 
  2676  0019                     	;# 
  2677  001A                     	;# 
  2678  001B                     	;# 
  2679  001C                     	;# 
  2680  001D                     	;# 
  2681  001E                     	;# 
  2682  001F                     	;# 
  2683  008C                     	;# 
  2684  008D                     	;# 
  2685  008E                     	;# 
  2686  0090                     	;# 
  2687  0091                     	;# 
  2688  0092                     	;# 
  2689  0093                     	;# 
  2690  0094                     	;# 
  2691  0097                     	;# 
  2692  009B                     	;# 
  2693  009B                     	;# 
  2694  009C                     	;# 
  2695  009D                     	;# 
  2696  009E                     	;# 
  2697  009F                     	;# 
  2698  010C                     	;# 
  2699  010D                     	;# 
  2700  010E                     	;# 
  2701  0111                     	;# 
  2702  0112                     	;# 
  2703  0113                     	;# 
  2704  0114                     	;# 
  2705  0115                     	;# 
  2706  0116                     	;# 
  2707  0117                     	;# 
  2708  0118                     	;# 
  2709  0119                     	;# 
  2710  018C                     	;# 
  2711  018D                     	;# 
  2712  018E                     	;# 
  2713  0197                     	;# 
  2714  0199                     	;# 
  2715  0199                     	;# 
  2716  0199                     	;# 
  2717  019A                     	;# 
  2718  019A                     	;# 
  2719  019A                     	;# 
  2720  019B                     	;# 
  2721  019B                     	;# 
  2722  019B                     	;# 
  2723  019B                     	;# 
  2724  019B                     	;# 
  2725  019C                     	;# 
  2726  019C                     	;# 
  2727  019C                     	;# 
  2728  019D                     	;# 
  2729  019D                     	;# 
  2730  019D                     	;# 
  2731  019E                     	;# 
  2732  019E                     	;# 
  2733  019E                     	;# 
  2734  019F                     	;# 
  2735  019F                     	;# 
  2736  019F                     	;# 
  2737  019F                     	;# 
  2738  019F                     	;# 
  2739  020C                     	;# 
  2740  020D                     	;# 
  2741  020E                     	;# 
  2742  0211                     	;# 
  2743  0211                     	;# 
  2744  0212                     	;# 
  2745  0212                     	;# 
  2746  0213                     	;# 
  2747  0213                     	;# 
  2748  0214                     	;# 
  2749  0214                     	;# 
  2750  0215                     	;# 
  2751  0215                     	;# 
  2752  0215                     	;# 
  2753  0215                     	;# 
  2754  0216                     	;# 
  2755  0216                     	;# 
  2756  0217                     	;# 
  2757  0217                     	;# 
  2758  0219                     	;# 
  2759  021A                     	;# 
  2760  021B                     	;# 
  2761  021C                     	;# 
  2762  021D                     	;# 
  2763  021D                     	;# 
  2764  021E                     	;# 
  2765  021F                     	;# 
  2766  028C                     	;# 
  2767  028D                     	;# 
  2768  028E                     	;# 
  2769  0291                     	;# 
  2770  0291                     	;# 
  2771  0292                     	;# 
  2772  0293                     	;# 
  2773  0294                     	;# 
  2774  0295                     	;# 
  2775  0295                     	;# 
  2776  0296                     	;# 
  2777  0297                     	;# 
  2778  0298                     	;# 
  2779  029F                     	;# 
  2780  030C                     	;# 
  2781  030D                     	;# 
  2782  030E                     	;# 
  2783  0311                     	;# 
  2784  0311                     	;# 
  2785  0312                     	;# 
  2786  0313                     	;# 
  2787  0314                     	;# 
  2788  0315                     	;# 
  2789  0315                     	;# 
  2790  0316                     	;# 
  2791  0317                     	;# 
  2792  0318                     	;# 
  2793  038C                     	;# 
  2794  038D                     	;# 
  2795  038E                     	;# 
  2796  0391                     	;# 
  2797  0392                     	;# 
  2798  0393                     	;# 
  2799  0394                     	;# 
  2800  0395                     	;# 
  2801  0396                     	;# 
  2802  0397                     	;# 
  2803  0398                     	;# 
  2804  0399                     	;# 
  2805  039A                     	;# 
  2806  039C                     	;# 
  2807  039D                     	;# 
  2808  039E                     	;# 
  2809  039F                     	;# 
  2810  0411                     	;# 
  2811  0411                     	;# 
  2812  0412                     	;# 
  2813  0413                     	;# 
  2814  0414                     	;# 
  2815  0415                     	;# 
  2816  0416                     	;# 
  2817  0417                     	;# 
  2818  0418                     	;# 
  2819  0418                     	;# 
  2820  0419                     	;# 
  2821  041A                     	;# 
  2822  041B                     	;# 
  2823  041C                     	;# 
  2824  041D                     	;# 
  2825  041E                     	;# 
  2826  041F                     	;# 
  2827  0498                     	;# 
  2828  0498                     	;# 
  2829  0499                     	;# 
  2830  049A                     	;# 
  2831  049B                     	;# 
  2832  049B                     	;# 
  2833  049C                     	;# 
  2834  049D                     	;# 
  2835  049E                     	;# 
  2836  049F                     	;# 
  2837  0617                     	;# 
  2838  0618                     	;# 
  2839  0619                     	;# 
  2840  0619                     	;# 
  2841  061A                     	;# 
  2842  061B                     	;# 
  2843  061C                     	;# 
  2844  061C                     	;# 
  2845  061F                     	;# 
  2846  0691                     	;# 
  2847  0692                     	;# 
  2848  0693                     	;# 
  2849  0694                     	;# 
  2850  0695                     	;# 
  2851  0696                     	;# 
  2852  0697                     	;# 
  2853  0698                     	;# 
  2854  0699                     	;# 
  2855  0711                     	;# 
  2856  0712                     	;# 
  2857  0713                     	;# 
  2858  0714                     	;# 
  2859  0715                     	;# 
  2860  0716                     	;# 
  2861  0717                     	;# 
  2862  0718                     	;# 
  2863  0719                     	;# 
  2864  0891                     	;# 
  2865  0891                     	;# 
  2866  0891                     	;# 
  2867  0891                     	;# 
  2868  0891                     	;# 
  2869  0891                     	;# 
  2870  0892                     	;# 
  2871  0892                     	;# 
  2872  0892                     	;# 
  2873  0893                     	;# 
  2874  0893                     	;# 
  2875  0893                     	;# 
  2876  0893                     	;# 
  2877  0893                     	;# 
  2878  0893                     	;# 
  2879  0894                     	;# 
  2880  0894                     	;# 
  2881  0894                     	;# 
  2882  0895                     	;# 
  2883  0895                     	;# 
  2884  0895                     	;# 
  2885  0896                     	;# 
  2886  0896                     	;# 
  2887  0896                     	;# 
  2888  089B                     	;# 
  2889  0911                     	;# 
  2890  0912                     	;# 
  2891  0913                     	;# 
  2892  0914                     	;# 
  2893  0915                     	;# 
  2894  0916                     	;# 
  2895  0918                     	;# 
  2896  0919                     	;# 
  2897  091A                     	;# 
  2898  091B                     	;# 
  2899  091C                     	;# 
  2900  091D                     	;# 
  2901  091E                     	;# 
  2902  091F                     	;# 
  2903  0E0F                     	;# 
  2904  0E10                     	;# 
  2905  0E11                     	;# 
  2906  0E12                     	;# 
  2907  0E13                     	;# 
  2908  0E14                     	;# 
  2909  0E15                     	;# 
  2910  0E16                     	;# 
  2911  0E17                     	;# 
  2912  0E18                     	;# 
  2913  0E19                     	;# 
  2914  0E1A                     	;# 
  2915  0E1B                     	;# 
  2916  0E1C                     	;# 
  2917  0E1D                     	;# 
  2918  0E1E                     	;# 
  2919  0E1F                     	;# 
  2920  0E20                     	;# 
  2921  0E21                     	;# 
  2922  0E22                     	;# 
  2923  0E24                     	;# 
  2924  0E25                     	;# 
  2925  0E28                     	;# 
  2926  0E29                     	;# 
  2927  0E2A                     	;# 
  2928  0E2B                     	;# 
  2929  0E2C                     	;# 
  2930  0E2D                     	;# 
  2931  0E2E                     	;# 
  2932  0E2F                     	;# 
  2933  0E90                     	;# 
  2934  0E91                     	;# 
  2935  0E92                     	;# 
  2936  0E94                     	;# 
  2937  0E95                     	;# 
  2938  0E9C                     	;# 
  2939  0E9D                     	;# 
  2940  0E9E                     	;# 
  2941  0E9F                     	;# 
  2942  0EA0                     	;# 
  2943  0EA1                     	;# 
  2944  0EA2                     	;# 
  2945  0EA3                     	;# 
  2946  0EA4                     	;# 
  2947  0EA5                     	;# 
  2948  0EA6                     	;# 
  2949  0EA7                     	;# 
  2950  0F0F                     	;# 
  2951  0F10                     	;# 
  2952  0F11                     	;# 
  2953  0F12                     	;# 
  2954  0F13                     	;# 
  2955  0F14                     	;# 
  2956  0F15                     	;# 
  2957  0F16                     	;# 
  2958  0F17                     	;# 
  2959  0F18                     	;# 
  2960  0F19                     	;# 
  2961  0F1A                     	;# 
  2962  0F1B                     	;# 
  2963  0F1C                     	;# 
  2964  0F1D                     	;# 
  2965  0F1E                     	;# 
  2966  0F1F                     	;# 
  2967  0F20                     	;# 
  2968  0F21                     	;# 
  2969  0F22                     	;# 
  2970  0F23                     	;# 
  2971  0F24                     	;# 
  2972  0F25                     	;# 
  2973  0F26                     	;# 
  2974  0F27                     	;# 
  2975  0F28                     	;# 
  2976  0F29                     	;# 
  2977  0F2A                     	;# 
  2978  0F2B                     	;# 
  2979  0F2C                     	;# 
  2980  0F2D                     	;# 
  2981  0F2E                     	;# 
  2982  0F2F                     	;# 
  2983  0F30                     	;# 
  2984  0F31                     	;# 
  2985  0F32                     	;# 
  2986  0F33                     	;# 
  2987  0F34                     	;# 
  2988  0F35                     	;# 
  2989  0F36                     	;# 
  2990  0F37                     	;# 
  2991  0FE4                     	;# 
  2992  0FE5                     	;# 
  2993  0FE6                     	;# 
  2994  0FE7                     	;# 
  2995  0FE8                     	;# 
  2996  0FE9                     	;# 
  2997  0FEA                     	;# 
  2998  0FEB                     	;# 
  2999  0FED                     	;# 
  3000  0FEE                     	;# 
  3001  0FEF                     	;# 
  3002  0000                     	;# 
  3003  0001                     	;# 
  3004  0002                     	;# 
  3005  0003                     	;# 
  3006  0004                     	;# 
  3007  0005                     	;# 
  3008  0006                     	;# 
  3009  0007                     	;# 
  3010  0008                     	;# 
  3011  0009                     	;# 
  3012  000A                     	;# 
  3013  000B                     	;# 
  3014  000C                     	;# 
  3015  000D                     	;# 
  3016  000E                     	;# 
  3017  0010                     	;# 
  3018  0011                     	;# 
  3019  0012                     	;# 
  3020  0013                     	;# 
  3021  0014                     	;# 
  3022  0015                     	;# 
  3023  0015                     	;# 
  3024  0016                     	;# 
  3025  0016                     	;# 
  3026  0017                     	;# 
  3027  0018                     	;# 
  3028  0019                     	;# 
  3029  0019                     	;# 
  3030  001A                     	;# 
  3031  001B                     	;# 
  3032  001C                     	;# 
  3033  001D                     	;# 
  3034  001E                     	;# 
  3035  001F                     	;# 
  3036  008C                     	;# 
  3037  008D                     	;# 
  3038  008E                     	;# 
  3039  0090                     	;# 
  3040  0091                     	;# 
  3041  0092                     	;# 
  3042  0093                     	;# 
  3043  0094                     	;# 
  3044  0097                     	;# 
  3045  009B                     	;# 
  3046  009B                     	;# 
  3047  009C                     	;# 
  3048  009D                     	;# 
  3049  009E                     	;# 
  3050  009F                     	;# 
  3051  010C                     	;# 
  3052  010D                     	;# 
  3053  010E                     	;# 
  3054  0111                     	;# 
  3055  0112                     	;# 
  3056  0113                     	;# 
  3057  0114                     	;# 
  3058  0115                     	;# 
  3059  0116                     	;# 
  3060  0117                     	;# 
  3061  0118                     	;# 
  3062  0119                     	;# 
  3063  018C                     	;# 
  3064  018D                     	;# 
  3065  018E                     	;# 
  3066  0197                     	;# 
  3067  0199                     	;# 
  3068  0199                     	;# 
  3069  0199                     	;# 
  3070  019A                     	;# 
  3071  019A                     	;# 
  3072  019A                     	;# 
  3073  019B                     	;# 
  3074  019B                     	;# 
  3075  019B                     	;# 
  3076  019B                     	;# 
  3077  019B                     	;# 
  3078  019C                     	;# 
  3079  019C                     	;# 
  3080  019C                     	;# 
  3081  019D                     	;# 
  3082  019D                     	;# 
  3083  019D                     	;# 
  3084  019E                     	;# 
  3085  019E                     	;# 
  3086  019E                     	;# 
  3087  019F                     	;# 
  3088  019F                     	;# 
  3089  019F                     	;# 
  3090  019F                     	;# 
  3091  019F                     	;# 
  3092  020C                     	;# 
  3093  020D                     	;# 
  3094  020E                     	;# 
  3095  0211                     	;# 
  3096  0211                     	;# 
  3097  0212                     	;# 
  3098  0212                     	;# 
  3099  0213                     	;# 
  3100  0213                     	;# 
  3101  0214                     	;# 
  3102  0214                     	;# 
  3103  0215                     	;# 
  3104  0215                     	;# 
  3105  0215                     	;# 
  3106  0215                     	;# 
  3107  0216                     	;# 
  3108  0216                     	;# 
  3109  0217                     	;# 
  3110  0217                     	;# 
  3111  0219                     	;# 
  3112  021A                     	;# 
  3113  021B                     	;# 
  3114  021C                     	;# 
  3115  021D                     	;# 
  3116  021D                     	;# 
  3117  021E                     	;# 
  3118  021F                     	;# 
  3119  028C                     	;# 
  3120  028D                     	;# 
  3121  028E                     	;# 
  3122  0291                     	;# 
  3123  0291                     	;# 
  3124  0292                     	;# 
  3125  0293                     	;# 
  3126  0294                     	;# 
  3127  0295                     	;# 
  3128  0295                     	;# 
  3129  0296                     	;# 
  3130  0297                     	;# 
  3131  0298                     	;# 
  3132  029F                     	;# 
  3133  030C                     	;# 
  3134  030D                     	;# 
  3135  030E                     	;# 
  3136  0311                     	;# 
  3137  0311                     	;# 
  3138  0312                     	;# 
  3139  0313                     	;# 
  3140  0314                     	;# 
  3141  0315                     	;# 
  3142  0315                     	;# 
  3143  0316                     	;# 
  3144  0317                     	;# 
  3145  0318                     	;# 
  3146  038C                     	;# 
  3147  038D                     	;# 
  3148  038E                     	;# 
  3149  0391                     	;# 
  3150  0392                     	;# 
  3151  0393                     	;# 
  3152  0394                     	;# 
  3153  0395                     	;# 
  3154  0396                     	;# 
  3155  0397                     	;# 
  3156  0398                     	;# 
  3157  0399                     	;# 
  3158  039A                     	;# 
  3159  039C                     	;# 
  3160  039D                     	;# 
  3161  039E                     	;# 
  3162  039F                     	;# 
  3163  0411                     	;# 
  3164  0411                     	;# 
  3165  0412                     	;# 
  3166  0413                     	;# 
  3167  0414                     	;# 
  3168  0415                     	;# 
  3169  0416                     	;# 
  3170  0417                     	;# 
  3171  0418                     	;# 
  3172  0418                     	;# 
  3173  0419                     	;# 
  3174  041A                     	;# 
  3175  041B                     	;# 
  3176  041C                     	;# 
  3177  041D                     	;# 
  3178  041E                     	;# 
  3179  041F                     	;# 
  3180  0498                     	;# 
  3181  0498                     	;# 
  3182  0499                     	;# 
  3183  049A                     	;# 
  3184  049B                     	;# 
  3185  049B                     	;# 
  3186  049C                     	;# 
  3187  049D                     	;# 
  3188  049E                     	;# 
  3189  049F                     	;# 
  3190  0617                     	;# 
  3191  0618                     	;# 
  3192  0619                     	;# 
  3193  0619                     	;# 
  3194  061A                     	;# 
  3195  061B                     	;# 
  3196  061C                     	;# 
  3197  061C                     	;# 
  3198  061F                     	;# 
  3199  0691                     	;# 
  3200  0692                     	;# 
  3201  0693                     	;# 
  3202  0694                     	;# 
  3203  0695                     	;# 
  3204  0696                     	;# 
  3205  0697                     	;# 
  3206  0698                     	;# 
  3207  0699                     	;# 
  3208  0711                     	;# 
  3209  0712                     	;# 
  3210  0713                     	;# 
  3211  0714                     	;# 
  3212  0715                     	;# 
  3213  0716                     	;# 
  3214  0717                     	;# 
  3215  0718                     	;# 
  3216  0719                     	;# 
  3217  0891                     	;# 
  3218  0891                     	;# 
  3219  0891                     	;# 
  3220  0891                     	;# 
  3221  0891                     	;# 
  3222  0891                     	;# 
  3223  0892                     	;# 
  3224  0892                     	;# 
  3225  0892                     	;# 
  3226  0893                     	;# 
  3227  0893                     	;# 
  3228  0893                     	;# 
  3229  0893                     	;# 
  3230  0893                     	;# 
  3231  0893                     	;# 
  3232  0894                     	;# 
  3233  0894                     	;# 
  3234  0894                     	;# 
  3235  0895                     	;# 
  3236  0895                     	;# 
  3237  0895                     	;# 
  3238  0896                     	;# 
  3239  0896                     	;# 
  3240  0896                     	;# 
  3241  089B                     	;# 
  3242  0911                     	;# 
  3243  0912                     	;# 
  3244  0913                     	;# 
  3245  0914                     	;# 
  3246  0915                     	;# 
  3247  0916                     	;# 
  3248  0918                     	;# 
  3249  0919                     	;# 
  3250  091A                     	;# 
  3251  091B                     	;# 
  3252  091C                     	;# 
  3253  091D                     	;# 
  3254  091E                     	;# 
  3255  091F                     	;# 
  3256  0E0F                     	;# 
  3257  0E10                     	;# 
  3258  0E11                     	;# 
  3259  0E12                     	;# 
  3260  0E13                     	;# 
  3261  0E14                     	;# 
  3262  0E15                     	;# 
  3263  0E16                     	;# 
  3264  0E17                     	;# 
  3265  0E18                     	;# 
  3266  0E19                     	;# 
  3267  0E1A                     	;# 
  3268  0E1B                     	;# 
  3269  0E1C                     	;# 
  3270  0E1D                     	;# 
  3271  0E1E                     	;# 
  3272  0E1F                     	;# 
  3273  0E20                     	;# 
  3274  0E21                     	;# 
  3275  0E22                     	;# 
  3276  0E24                     	;# 
  3277  0E25                     	;# 
  3278  0E28                     	;# 
  3279  0E29                     	;# 
  3280  0E2A                     	;# 
  3281  0E2B                     	;# 
  3282  0E2C                     	;# 
  3283  0E2D                     	;# 
  3284  0E2E                     	;# 
  3285  0E2F                     	;# 
  3286  0E90                     	;# 
  3287  0E91                     	;# 
  3288  0E92                     	;# 
  3289  0E94                     	;# 
  3290  0E95                     	;# 
  3291  0E9C                     	;# 
  3292  0E9D                     	;# 
  3293  0E9E                     	;# 
  3294  0E9F                     	;# 
  3295  0EA0                     	;# 
  3296  0EA1                     	;# 
  3297  0EA2                     	;# 
  3298  0EA3                     	;# 
  3299  0EA4                     	;# 
  3300  0EA5                     	;# 
  3301  0EA6                     	;# 
  3302  0EA7                     	;# 
  3303  0F0F                     	;# 
  3304  0F10                     	;# 
  3305  0F11                     	;# 
  3306  0F12                     	;# 
  3307  0F13                     	;# 
  3308  0F14                     	;# 
  3309  0F15                     	;# 
  3310  0F16                     	;# 
  3311  0F17                     	;# 
  3312  0F18                     	;# 
  3313  0F19                     	;# 
  3314  0F1A                     	;# 
  3315  0F1B                     	;# 
  3316  0F1C                     	;# 
  3317  0F1D                     	;# 
  3318  0F1E                     	;# 
  3319  0F1F                     	;# 
  3320  0F20                     	;# 
  3321  0F21                     	;# 
  3322  0F22                     	;# 
  3323  0F23                     	;# 
  3324  0F24                     	;# 
  3325  0F25                     	;# 
  3326  0F26                     	;# 
  3327  0F27                     	;# 
  3328  0F28                     	;# 
  3329  0F29                     	;# 
  3330  0F2A                     	;# 
  3331  0F2B                     	;# 
  3332  0F2C                     	;# 
  3333  0F2D                     	;# 
  3334  0F2E                     	;# 
  3335  0F2F                     	;# 
  3336  0F30                     	;# 
  3337  0F31                     	;# 
  3338  0F32                     	;# 
  3339  0F33                     	;# 
  3340  0F34                     	;# 
  3341  0F35                     	;# 
  3342  0F36                     	;# 
  3343  0F37                     	;# 
  3344  0FE4                     	;# 
  3345  0FE5                     	;# 
  3346  0FE6                     	;# 
  3347  0FE7                     	;# 
  3348  0FE8                     	;# 
  3349  0FE9                     	;# 
  3350  0FEA                     	;# 
  3351  0FEB                     	;# 
  3352  0FED                     	;# 
  3353  0FEE                     	;# 
  3354  0FEF                     	;# 
  3355  0000                     	;# 
  3356  0001                     	;# 
  3357  0002                     	;# 
  3358  0003                     	;# 
  3359  0004                     	;# 
  3360  0005                     	;# 
  3361  0006                     	;# 
  3362  0007                     	;# 
  3363  0008                     	;# 
  3364  0009                     	;# 
  3365  000A                     	;# 
  3366  000B                     	;# 
  3367  000C                     	;# 
  3368  000D                     	;# 
  3369  000E                     	;# 
  3370  0010                     	;# 
  3371  0011                     	;# 
  3372  0012                     	;# 
  3373  0013                     	;# 
  3374  0014                     	;# 
  3375  0015                     	;# 
  3376  0015                     	;# 
  3377  0016                     	;# 
  3378  0016                     	;# 
  3379  0017                     	;# 
  3380  0018                     	;# 
  3381  0019                     	;# 
  3382  0019                     	;# 
  3383  001A                     	;# 
  3384  001B                     	;# 
  3385  001C                     	;# 
  3386  001D                     	;# 
  3387  001E                     	;# 
  3388  001F                     	;# 
  3389  008C                     	;# 
  3390  008D                     	;# 
  3391  008E                     	;# 
  3392  0090                     	;# 
  3393  0091                     	;# 
  3394  0092                     	;# 
  3395  0093                     	;# 
  3396  0094                     	;# 
  3397  0097                     	;# 
  3398  009B                     	;# 
  3399  009B                     	;# 
  3400  009C                     	;# 
  3401  009D                     	;# 
  3402  009E                     	;# 
  3403  009F                     	;# 
  3404  010C                     	;# 
  3405  010D                     	;# 
  3406  010E                     	;# 
  3407  0111                     	;# 
  3408  0112                     	;# 
  3409  0113                     	;# 
  3410  0114                     	;# 
  3411  0115                     	;# 
  3412  0116                     	;# 
  3413  0117                     	;# 
  3414  0118                     	;# 
  3415  0119                     	;# 
  3416  018C                     	;# 
  3417  018D                     	;# 
  3418  018E                     	;# 
  3419  0197                     	;# 
  3420  0199                     	;# 
  3421  0199                     	;# 
  3422  0199                     	;# 
  3423  019A                     	;# 
  3424  019A                     	;# 
  3425  019A                     	;# 
  3426  019B                     	;# 
  3427  019B                     	;# 
  3428  019B                     	;# 
  3429  019B                     	;# 
  3430  019B                     	;# 
  3431  019C                     	;# 
  3432  019C                     	;# 
  3433  019C                     	;# 
  3434  019D                     	;# 
  3435  019D                     	;# 
  3436  019D                     	;# 
  3437  019E                     	;# 
  3438  019E                     	;# 
  3439  019E                     	;# 
  3440  019F                     	;# 
  3441  019F                     	;# 
  3442  019F                     	;# 
  3443  019F                     	;# 
  3444  019F                     	;# 
  3445  020C                     	;# 
  3446  020D                     	;# 
  3447  020E                     	;# 
  3448  0211                     	;# 
  3449  0211                     	;# 
  3450  0212                     	;# 
  3451  0212                     	;# 
  3452  0213                     	;# 
  3453  0213                     	;# 
  3454  0214                     	;# 
  3455  0214                     	;# 
  3456  0215                     	;# 
  3457  0215                     	;# 
  3458  0215                     	;# 
  3459  0215                     	;# 
  3460  0216                     	;# 
  3461  0216                     	;# 
  3462  0217                     	;# 
  3463  0217                     	;# 
  3464  0219                     	;# 
  3465  021A                     	;# 
  3466  021B                     	;# 
  3467  021C                     	;# 
  3468  021D                     	;# 
  3469  021D                     	;# 
  3470  021E                     	;# 
  3471  021F                     	;# 
  3472  028C                     	;# 
  3473  028D                     	;# 
  3474  028E                     	;# 
  3475  0291                     	;# 
  3476  0291                     	;# 
  3477  0292                     	;# 
  3478  0293                     	;# 
  3479  0294                     	;# 
  3480  0295                     	;# 
  3481  0295                     	;# 
  3482  0296                     	;# 
  3483  0297                     	;# 
  3484  0298                     	;# 
  3485  029F                     	;# 
  3486  030C                     	;# 
  3487  030D                     	;# 
  3488  030E                     	;# 
  3489  0311                     	;# 
  3490  0311                     	;# 
  3491  0312                     	;# 
  3492  0313                     	;# 
  3493  0314                     	;# 
  3494  0315                     	;# 
  3495  0315                     	;# 
  3496  0316                     	;# 
  3497  0317                     	;# 
  3498  0318                     	;# 
  3499  038C                     	;# 
  3500  038D                     	;# 
  3501  038E                     	;# 
  3502  0391                     	;# 
  3503  0392                     	;# 
  3504  0393                     	;# 
  3505  0394                     	;# 
  3506  0395                     	;# 
  3507  0396                     	;# 
  3508  0397                     	;# 
  3509  0398                     	;# 
  3510  0399                     	;# 
  3511  039A                     	;# 
  3512  039C                     	;# 
  3513  039D                     	;# 
  3514  039E                     	;# 
  3515  039F                     	;# 
  3516  0411                     	;# 
  3517  0411                     	;# 
  3518  0412                     	;# 
  3519  0413                     	;# 
  3520  0414                     	;# 
  3521  0415                     	;# 
  3522  0416                     	;# 
  3523  0417                     	;# 
  3524  0418                     	;# 
  3525  0418                     	;# 
  3526  0419                     	;# 
  3527  041A                     	;# 
  3528  041B                     	;# 
  3529  041C                     	;# 
  3530  041D                     	;# 
  3531  041E                     	;# 
  3532  041F                     	;# 
  3533  0498                     	;# 
  3534  0498                     	;# 
  3535  0499                     	;# 
  3536  049A                     	;# 
  3537  049B                     	;# 
  3538  049B                     	;# 
  3539  049C                     	;# 
  3540  049D                     	;# 
  3541  049E                     	;# 
  3542  049F                     	;# 
  3543  0617                     	;# 
  3544  0618                     	;# 
  3545  0619                     	;# 
  3546  0619                     	;# 
  3547  061A                     	;# 
  3548  061B                     	;# 
  3549  061C                     	;# 
  3550  061C                     	;# 
  3551  061F                     	;# 
  3552  0691                     	;# 
  3553  0692                     	;# 
  3554  0693                     	;# 
  3555  0694                     	;# 
  3556  0695                     	;# 
  3557  0696                     	;# 
  3558  0697                     	;# 
  3559  0698                     	;# 
  3560  0699                     	;# 
  3561  0711                     	;# 
  3562  0712                     	;# 
  3563  0713                     	;# 
  3564  0714                     	;# 
  3565  0715                     	;# 
  3566  0716                     	;# 
  3567  0717                     	;# 
  3568  0718                     	;# 
  3569  0719                     	;# 
  3570  0891                     	;# 
  3571  0891                     	;# 
  3572  0891                     	;# 
  3573  0891                     	;# 
  3574  0891                     	;# 
  3575  0891                     	;# 
  3576  0892                     	;# 
  3577  0892                     	;# 
  3578  0892                     	;# 
  3579  0893                     	;# 
  3580  0893                     	;# 
  3581  0893                     	;# 
  3582  0893                     	;# 
  3583  0893                     	;# 
  3584  0893                     	;# 
  3585  0894                     	;# 
  3586  0894                     	;# 
  3587  0894                     	;# 
  3588  0895                     	;# 
  3589  0895                     	;# 
  3590  0895                     	;# 
  3591  0896                     	;# 
  3592  0896                     	;# 
  3593  0896                     	;# 
  3594  089B                     	;# 
  3595  0911                     	;# 
  3596  0912                     	;# 
  3597  0913                     	;# 
  3598  0914                     	;# 
  3599  0915                     	;# 
  3600  0916                     	;# 
  3601  0918                     	;# 
  3602  0919                     	;# 
  3603  091A                     	;# 
  3604  091B                     	;# 
  3605  091C                     	;# 
  3606  091D                     	;# 
  3607  091E                     	;# 
  3608  091F                     	;# 
  3609  0E0F                     	;# 
  3610  0E10                     	;# 
  3611  0E11                     	;# 
  3612  0E12                     	;# 
  3613  0E13                     	;# 
  3614  0E14                     	;# 
  3615  0E15                     	;# 
  3616  0E16                     	;# 
  3617  0E17                     	;# 
  3618  0E18                     	;# 
  3619  0E19                     	;# 
  3620  0E1A                     	;# 
  3621  0E1B                     	;# 
  3622  0E1C                     	;# 
  3623  0E1D                     	;# 
  3624  0E1E                     	;# 
  3625  0E1F                     	;# 
  3626  0E20                     	;# 
  3627  0E21                     	;# 
  3628  0E22                     	;# 
  3629  0E24                     	;# 
  3630  0E25                     	;# 
  3631  0E28                     	;# 
  3632  0E29                     	;# 
  3633  0E2A                     	;# 
  3634  0E2B                     	;# 
  3635  0E2C                     	;# 
  3636  0E2D                     	;# 
  3637  0E2E                     	;# 
  3638  0E2F                     	;# 
  3639  0E90                     	;# 
  3640  0E91                     	;# 
  3641  0E92                     	;# 
  3642  0E94                     	;# 
  3643  0E95                     	;# 
  3644  0E9C                     	;# 
  3645  0E9D                     	;# 
  3646  0E9E                     	;# 
  3647  0E9F                     	;# 
  3648  0EA0                     	;# 
  3649  0EA1                     	;# 
  3650  0EA2                     	;# 
  3651  0EA3                     	;# 
  3652  0EA4                     	;# 
  3653  0EA5                     	;# 
  3654  0EA6                     	;# 
  3655  0EA7                     	;# 
  3656  0F0F                     	;# 
  3657  0F10                     	;# 
  3658  0F11                     	;# 
  3659  0F12                     	;# 
  3660  0F13                     	;# 
  3661  0F14                     	;# 
  3662  0F15                     	;# 
  3663  0F16                     	;# 
  3664  0F17                     	;# 
  3665  0F18                     	;# 
  3666  0F19                     	;# 
  3667  0F1A                     	;# 
  3668  0F1B                     	;# 
  3669  0F1C                     	;# 
  3670  0F1D                     	;# 
  3671  0F1E                     	;# 
  3672  0F1F                     	;# 
  3673  0F20                     	;# 
  3674  0F21                     	;# 
  3675  0F22                     	;# 
  3676  0F23                     	;# 
  3677  0F24                     	;# 
  3678  0F25                     	;# 
  3679  0F26                     	;# 
  3680  0F27                     	;# 
  3681  0F28                     	;# 
  3682  0F29                     	;# 
  3683  0F2A                     	;# 
  3684  0F2B                     	;# 
  3685  0F2C                     	;# 
  3686  0F2D                     	;# 
  3687  0F2E                     	;# 
  3688  0F2F                     	;# 
  3689  0F30                     	;# 
  3690  0F31                     	;# 
  3691  0F32                     	;# 
  3692  0F33                     	;# 
  3693  0F34                     	;# 
  3694  0F35                     	;# 
  3695  0F36                     	;# 
  3696  0F37                     	;# 
  3697  0FE4                     	;# 
  3698  0FE5                     	;# 
  3699  0FE6                     	;# 
  3700  0FE7                     	;# 
  3701  0FE8                     	;# 
  3702  0FE9                     	;# 
  3703  0FEA                     	;# 
  3704  0FEB                     	;# 
  3705  0FED                     	;# 
  3706  0FEE                     	;# 
  3707  0FEF                     	;# 
  3708  0000                     	;# 
  3709  0001                     	;# 
  3710  0002                     	;# 
  3711  0003                     	;# 
  3712  0004                     	;# 
  3713  0005                     	;# 
  3714  0006                     	;# 
  3715  0007                     	;# 
  3716  0008                     	;# 
  3717  0009                     	;# 
  3718  000A                     	;# 
  3719  000B                     	;# 
  3720  000C                     	;# 
  3721  000D                     	;# 
  3722  000E                     	;# 
  3723  0010                     	;# 
  3724  0011                     	;# 
  3725  0012                     	;# 
  3726  0013                     	;# 
  3727  0014                     	;# 
  3728  0015                     	;# 
  3729  0015                     	;# 
  3730  0016                     	;# 
  3731  0016                     	;# 
  3732  0017                     	;# 
  3733  0018                     	;# 
  3734  0019                     	;# 
  3735  0019                     	;# 
  3736  001A                     	;# 
  3737  001B                     	;# 
  3738  001C                     	;# 
  3739  001D                     	;# 
  3740  001E                     	;# 
  3741  001F                     	;# 
  3742  008C                     	;# 
  3743  008D                     	;# 
  3744  008E                     	;# 
  3745  0090                     	;# 
  3746  0091                     	;# 
  3747  0092                     	;# 
  3748  0093                     	;# 
  3749  0094                     	;# 
  3750  0097                     	;# 
  3751  009B                     	;# 
  3752  009B                     	;# 
  3753  009C                     	;# 
  3754  009D                     	;# 
  3755  009E                     	;# 
  3756  009F                     	;# 
  3757  010C                     	;# 
  3758  010D                     	;# 
  3759  010E                     	;# 
  3760  0111                     	;# 
  3761  0112                     	;# 
  3762  0113                     	;# 
  3763  0114                     	;# 
  3764  0115                     	;# 
  3765  0116                     	;# 
  3766  0117                     	;# 
  3767  0118                     	;# 
  3768  0119                     	;# 
  3769  018C                     	;# 
  3770  018D                     	;# 
  3771  018E                     	;# 
  3772  0197                     	;# 
  3773  0199                     	;# 
  3774  0199                     	;# 
  3775  0199                     	;# 
  3776  019A                     	;# 
  3777  019A                     	;# 
  3778  019A                     	;# 
  3779  019B                     	;# 
  3780  019B                     	;# 
  3781  019B                     	;# 
  3782  019B                     	;# 
  3783  019B                     	;# 
  3784  019C                     	;# 
  3785  019C                     	;# 
  3786  019C                     	;# 
  3787  019D                     	;# 
  3788  019D                     	;# 
  3789  019D                     	;# 
  3790  019E                     	;# 
  3791  019E                     	;# 
  3792  019E                     	;# 
  3793  019F                     	;# 
  3794  019F                     	;# 
  3795  019F                     	;# 
  3796  019F                     	;# 
  3797  019F                     	;# 
  3798  020C                     	;# 
  3799  020D                     	;# 
  3800  020E                     	;# 
  3801  0211                     	;# 
  3802  0211                     	;# 
  3803  0212                     	;# 
  3804  0212                     	;# 
  3805  0213                     	;# 
  3806  0213                     	;# 
  3807  0214                     	;# 
  3808  0214                     	;# 
  3809  0215                     	;# 
  3810  0215                     	;# 
  3811  0215                     	;# 
  3812  0215                     	;# 
  3813  0216                     	;# 
  3814  0216                     	;# 
  3815  0217                     	;# 
  3816  0217                     	;# 
  3817  0219                     	;# 
  3818  021A                     	;# 
  3819  021B                     	;# 
  3820  021C                     	;# 
  3821  021D                     	;# 
  3822  021D                     	;# 
  3823  021E                     	;# 
  3824  021F                     	;# 
  3825  028C                     	;# 
  3826  028D                     	;# 
  3827  028E                     	;# 
  3828  0291                     	;# 
  3829  0291                     	;# 
  3830  0292                     	;# 
  3831  0293                     	;# 
  3832  0294                     	;# 
  3833  0295                     	;# 
  3834  0295                     	;# 
  3835  0296                     	;# 
  3836  0297                     	;# 
  3837  0298                     	;# 
  3838  029F                     	;# 
  3839  030C                     	;# 
  3840  030D                     	;# 
  3841  030E                     	;# 
  3842  0311                     	;# 
  3843  0311                     	;# 
  3844  0312                     	;# 
  3845  0313                     	;# 
  3846  0314                     	;# 
  3847  0315                     	;# 
  3848  0315                     	;# 
  3849  0316                     	;# 
  3850  0317                     	;# 
  3851  0318                     	;# 
  3852  038C                     	;# 
  3853  038D                     	;# 
  3854  038E                     	;# 
  3855  0391                     	;# 
  3856  0392                     	;# 
  3857  0393                     	;# 
  3858  0394                     	;# 
  3859  0395                     	;# 
  3860  0396                     	;# 
  3861  0397                     	;# 
  3862  0398                     	;# 
  3863  0399                     	;# 
  3864  039A                     	;# 
  3865  039C                     	;# 
  3866  039D                     	;# 
  3867  039E                     	;# 
  3868  039F                     	;# 
  3869  0411                     	;# 
  3870  0411                     	;# 
  3871  0412                     	;# 
  3872  0413                     	;# 
  3873  0414                     	;# 
  3874  0415                     	;# 
  3875  0416                     	;# 
  3876  0417                     	;# 
  3877  0418                     	;# 
  3878  0418                     	;# 
  3879  0419                     	;# 
  3880  041A                     	;# 
  3881  041B                     	;# 
  3882  041C                     	;# 
  3883  041D                     	;# 
  3884  041E                     	;# 
  3885  041F                     	;# 
  3886  0498                     	;# 
  3887  0498                     	;# 
  3888  0499                     	;# 
  3889  049A                     	;# 
  3890  049B                     	;# 
  3891  049B                     	;# 
  3892  049C                     	;# 
  3893  049D                     	;# 
  3894  049E                     	;# 
  3895  049F                     	;# 
  3896  0617                     	;# 
  3897  0618                     	;# 
  3898  0619                     	;# 
  3899  0619                     	;# 
  3900  061A                     	;# 
  3901  061B                     	;# 
  3902  061C                     	;# 
  3903  061C                     	;# 
  3904  061F                     	;# 
  3905  0691                     	;# 
  3906  0692                     	;# 
  3907  0693                     	;# 
  3908  0694                     	;# 
  3909  0695                     	;# 
  3910  0696                     	;# 
  3911  0697                     	;# 
  3912  0698                     	;# 
  3913  0699                     	;# 
  3914  0711                     	;# 
  3915  0712                     	;# 
  3916  0713                     	;# 
  3917  0714                     	;# 
  3918  0715                     	;# 
  3919  0716                     	;# 
  3920  0717                     	;# 
  3921  0718                     	;# 
  3922  0719                     	;# 
  3923  0891                     	;# 
  3924  0891                     	;# 
  3925  0891                     	;# 
  3926  0891                     	;# 
  3927  0891                     	;# 
  3928  0891                     	;# 
  3929  0892                     	;# 
  3930  0892                     	;# 
  3931  0892                     	;# 
  3932  0893                     	;# 
  3933  0893                     	;# 
  3934  0893                     	;# 
  3935  0893                     	;# 
  3936  0893                     	;# 
  3937  0893                     	;# 
  3938  0894                     	;# 
  3939  0894                     	;# 
  3940  0894                     	;# 
  3941  0895                     	;# 
  3942  0895                     	;# 
  3943  0895                     	;# 
  3944  0896                     	;# 
  3945  0896                     	;# 
  3946  0896                     	;# 
  3947  089B                     	;# 
  3948  0911                     	;# 
  3949  0912                     	;# 
  3950  0913                     	;# 
  3951  0914                     	;# 
  3952  0915                     	;# 
  3953  0916                     	;# 
  3954  0918                     	;# 
  3955  0919                     	;# 
  3956  091A                     	;# 
  3957  091B                     	;# 
  3958  091C                     	;# 
  3959  091D                     	;# 
  3960  091E                     	;# 
  3961  091F                     	;# 
  3962  0E0F                     	;# 
  3963  0E10                     	;# 
  3964  0E11                     	;# 
  3965  0E12                     	;# 
  3966  0E13                     	;# 
  3967  0E14                     	;# 
  3968  0E15                     	;# 
  3969  0E16                     	;# 
  3970  0E17                     	;# 
  3971  0E18                     	;# 
  3972  0E19                     	;# 
  3973  0E1A                     	;# 
  3974  0E1B                     	;# 
  3975  0E1C                     	;# 
  3976  0E1D                     	;# 
  3977  0E1E                     	;# 
  3978  0E1F                     	;# 
  3979  0E20                     	;# 
  3980  0E21                     	;# 
  3981  0E22                     	;# 
  3982  0E24                     	;# 
  3983  0E25                     	;# 
  3984  0E28                     	;# 
  3985  0E29                     	;# 
  3986  0E2A                     	;# 
  3987  0E2B                     	;# 
  3988  0E2C                     	;# 
  3989  0E2D                     	;# 
  3990  0E2E                     	;# 
  3991  0E2F                     	;# 
  3992  0E90                     	;# 
  3993  0E91                     	;# 
  3994  0E92                     	;# 
  3995  0E94                     	;# 
  3996  0E95                     	;# 
  3997  0E9C                     	;# 
  3998  0E9D                     	;# 
  3999  0E9E                     	;# 
  4000  0E9F                     	;# 
  4001  0EA0                     	;# 
  4002  0EA1                     	;# 
  4003  0EA2                     	;# 
  4004  0EA3                     	;# 
  4005  0EA4                     	;# 
  4006  0EA5                     	;# 
  4007  0EA6                     	;# 
  4008  0EA7                     	;# 
  4009  0F0F                     	;# 
  4010  0F10                     	;# 
  4011  0F11                     	;# 
  4012  0F12                     	;# 
  4013  0F13                     	;# 
  4014  0F14                     	;# 
  4015  0F15                     	;# 
  4016  0F16                     	;# 
  4017  0F17                     	;# 
  4018  0F18                     	;# 
  4019  0F19                     	;# 
  4020  0F1A                     	;# 
  4021  0F1B                     	;# 
  4022  0F1C                     	;# 
  4023  0F1D                     	;# 
  4024  0F1E                     	;# 
  4025  0F1F                     	;# 
  4026  0F20                     	;# 
  4027  0F21                     	;# 
  4028  0F22                     	;# 
  4029  0F23                     	;# 
  4030  0F24                     	;# 
  4031  0F25                     	;# 
  4032  0F26                     	;# 
  4033  0F27                     	;# 
  4034  0F28                     	;# 
  4035  0F29                     	;# 
  4036  0F2A                     	;# 
  4037  0F2B                     	;# 
  4038  0F2C                     	;# 
  4039  0F2D                     	;# 
  4040  0F2E                     	;# 
  4041  0F2F                     	;# 
  4042  0F30                     	;# 
  4043  0F31                     	;# 
  4044  0F32                     	;# 
  4045  0F33                     	;# 
  4046  0F34                     	;# 
  4047  0F35                     	;# 
  4048  0F36                     	;# 
  4049  0F37                     	;# 
  4050  0FE4                     	;# 
  4051  0FE5                     	;# 
  4052  0FE6                     	;# 
  4053  0FE7                     	;# 
  4054  0FE8                     	;# 
  4055  0FE9                     	;# 
  4056  0FEA                     	;# 
  4057  0FEB                     	;# 
  4058  0FED                     	;# 
  4059  0FEE                     	;# 
  4060  0FEF                     	;# 
  4061  0000                     	;# 
  4062  0001                     	;# 
  4063  0002                     	;# 
  4064  0003                     	;# 
  4065  0004                     	;# 
  4066  0005                     	;# 
  4067  0006                     	;# 
  4068  0007                     	;# 
  4069  0008                     	;# 
  4070  0009                     	;# 
  4071  000A                     	;# 
  4072  000B                     	;# 
  4073  000C                     	;# 
  4074  000D                     	;# 
  4075  000E                     	;# 
  4076  0010                     	;# 
  4077  0011                     	;# 
  4078  0012                     	;# 
  4079  0013                     	;# 
  4080  0014                     	;# 
  4081  0015                     	;# 
  4082  0015                     	;# 
  4083  0016                     	;# 
  4084  0016                     	;# 
  4085  0017                     	;# 
  4086  0018                     	;# 
  4087  0019                     	;# 
  4088  0019                     	;# 
  4089  001A                     	;# 
  4090  001B                     	;# 
  4091  001C                     	;# 
  4092  001D                     	;# 
  4093  001E                     	;# 
  4094  001F                     	;# 
  4095  008C                     	;# 
  4096  008D                     	;# 
  4097  008E                     	;# 
  4098  0090                     	;# 
  4099  0091                     	;# 
  4100  0092                     	;# 
  4101  0093                     	;# 
  4102  0094                     	;# 
  4103  0097                     	;# 
  4104  009B                     	;# 
  4105  009B                     	;# 
  4106  009C                     	;# 
  4107  009D                     	;# 
  4108  009E                     	;# 
  4109  009F                     	;# 
  4110  010C                     	;# 
  4111  010D                     	;# 
  4112  010E                     	;# 
  4113  0111                     	;# 
  4114  0112                     	;# 
  4115  0113                     	;# 
  4116  0114                     	;# 
  4117  0115                     	;# 
  4118  0116                     	;# 
  4119  0117                     	;# 
  4120  0118                     	;# 
  4121  0119                     	;# 
  4122  018C                     	;# 
  4123  018D                     	;# 
  4124  018E                     	;# 
  4125  0197                     	;# 
  4126  0199                     	;# 
  4127  0199                     	;# 
  4128  0199                     	;# 
  4129  019A                     	;# 
  4130  019A                     	;# 
  4131  019A                     	;# 
  4132  019B                     	;# 
  4133  019B                     	;# 
  4134  019B                     	;# 
  4135  019B                     	;# 
  4136  019B                     	;# 
  4137  019C                     	;# 
  4138  019C                     	;# 
  4139  019C                     	;# 
  4140  019D                     	;# 
  4141  019D                     	;# 
  4142  019D                     	;# 
  4143  019E                     	;# 
  4144  019E                     	;# 
  4145  019E                     	;# 
  4146  019F                     	;# 
  4147  019F                     	;# 
  4148  019F                     	;# 
  4149  019F                     	;# 
  4150  019F                     	;# 
  4151  020C                     	;# 
  4152  020D                     	;# 
  4153  020E                     	;# 
  4154  0211                     	;# 
  4155  0211                     	;# 
  4156  0212                     	;# 
  4157  0212                     	;# 
  4158  0213                     	;# 
  4159  0213                     	;# 
  4160  0214                     	;# 
  4161  0214                     	;# 
  4162  0215                     	;# 
  4163  0215                     	;# 
  4164  0215                     	;# 
  4165  0215                     	;# 
  4166  0216                     	;# 
  4167  0216                     	;# 
  4168  0217                     	;# 
  4169  0217                     	;# 
  4170  0219                     	;# 
  4171  021A                     	;# 
  4172  021B                     	;# 
  4173  021C                     	;# 
  4174  021D                     	;# 
  4175  021D                     	;# 
  4176  021E                     	;# 
  4177  021F                     	;# 
  4178  028C                     	;# 
  4179  028D                     	;# 
  4180  028E                     	;# 
  4181  0291                     	;# 
  4182  0291                     	;# 
  4183  0292                     	;# 
  4184  0293                     	;# 
  4185  0294                     	;# 
  4186  0295                     	;# 
  4187  0295                     	;# 
  4188  0296                     	;# 
  4189  0297                     	;# 
  4190  0298                     	;# 
  4191  029F                     	;# 
  4192  030C                     	;# 
  4193  030D                     	;# 
  4194  030E                     	;# 
  4195  0311                     	;# 
  4196  0311                     	;# 
  4197  0312                     	;# 
  4198  0313                     	;# 
  4199  0314                     	;# 
  4200  0315                     	;# 
  4201  0315                     	;# 
  4202  0316                     	;# 
  4203  0317                     	;# 
  4204  0318                     	;# 
  4205  038C                     	;# 
  4206  038D                     	;# 
  4207  038E                     	;# 
  4208  0391                     	;# 
  4209  0392                     	;# 
  4210  0393                     	;# 
  4211  0394                     	;# 
  4212  0395                     	;# 
  4213  0396                     	;# 
  4214  0397                     	;# 
  4215  0398                     	;# 
  4216  0399                     	;# 
  4217  039A                     	;# 
  4218  039C                     	;# 
  4219  039D                     	;# 
  4220  039E                     	;# 
  4221  039F                     	;# 
  4222  0411                     	;# 
  4223  0411                     	;# 
  4224  0412                     	;# 
  4225  0413                     	;# 
  4226  0414                     	;# 
  4227  0415                     	;# 
  4228  0416                     	;# 
  4229  0417                     	;# 
  4230  0418                     	;# 
  4231  0418                     	;# 
  4232  0419                     	;# 
  4233  041A                     	;# 
  4234  041B                     	;# 
  4235  041C                     	;# 
  4236  041D                     	;# 
  4237  041E                     	;# 
  4238  041F                     	;# 
  4239  0498                     	;# 
  4240  0498                     	;# 
  4241  0499                     	;# 
  4242  049A                     	;# 
  4243  049B                     	;# 
  4244  049B                     	;# 
  4245  049C                     	;# 
  4246  049D                     	;# 
  4247  049E                     	;# 
  4248  049F                     	;# 
  4249  0617                     	;# 
  4250  0618                     	;# 
  4251  0619                     	;# 
  4252  0619                     	;# 
  4253  061A                     	;# 
  4254  061B                     	;# 
  4255  061C                     	;# 
  4256  061C                     	;# 
  4257  061F                     	;# 
  4258  0691                     	;# 
  4259  0692                     	;# 
  4260  0693                     	;# 
  4261  0694                     	;# 
  4262  0695                     	;# 
  4263  0696                     	;# 
  4264  0697                     	;# 
  4265  0698                     	;# 
  4266  0699                     	;# 
  4267  0711                     	;# 
  4268  0712                     	;# 
  4269  0713                     	;# 
  4270  0714                     	;# 
  4271  0715                     	;# 
  4272  0716                     	;# 
  4273  0717                     	;# 
  4274  0718                     	;# 
  4275  0719                     	;# 
  4276  0891                     	;# 
  4277  0891                     	;# 
  4278  0891                     	;# 
  4279  0891                     	;# 
  4280  0891                     	;# 
  4281  0891                     	;# 
  4282  0892                     	;# 
  4283  0892                     	;# 
  4284  0892                     	;# 
  4285  0893                     	;# 
  4286  0893                     	;# 
  4287  0893                     	;# 
  4288  0893                     	;# 
  4289  0893                     	;# 
  4290  0893                     	;# 
  4291  0894                     	;# 
  4292  0894                     	;# 
  4293  0894                     	;# 
  4294  0895                     	;# 
  4295  0895                     	;# 
  4296  0895                     	;# 
  4297  0896                     	;# 
  4298  0896                     	;# 
  4299  0896                     	;# 
  4300  089B                     	;# 
  4301  0911                     	;# 
  4302  0912                     	;# 
  4303  0913                     	;# 
  4304  0914                     	;# 
  4305  0915                     	;# 
  4306  0916                     	;# 
  4307  0918                     	;# 
  4308  0919                     	;# 
  4309  091A                     	;# 
  4310  091B                     	;# 
  4311  091C                     	;# 
  4312  091D                     	;# 
  4313  091E                     	;# 
  4314  091F                     	;# 
  4315  0E0F                     	;# 
  4316  0E10                     	;# 
  4317  0E11                     	;# 
  4318  0E12                     	;# 
  4319  0E13                     	;# 
  4320  0E14                     	;# 
  4321  0E15                     	;# 
  4322  0E16                     	;# 
  4323  0E17                     	;# 
  4324  0E18                     	;# 
  4325  0E19                     	;# 
  4326  0E1A                     	;# 
  4327  0E1B                     	;# 
  4328  0E1C                     	;# 
  4329  0E1D                     	;# 
  4330  0E1E                     	;# 
  4331  0E1F                     	;# 
  4332  0E20                     	;# 
  4333  0E21                     	;# 
  4334  0E22                     	;# 
  4335  0E24                     	;# 
  4336  0E25                     	;# 
  4337  0E28                     	;# 
  4338  0E29                     	;# 
  4339  0E2A                     	;# 
  4340  0E2B                     	;# 
  4341  0E2C                     	;# 
  4342  0E2D                     	;# 
  4343  0E2E                     	;# 
  4344  0E2F                     	;# 
  4345  0E90                     	;# 
  4346  0E91                     	;# 
  4347  0E92                     	;# 
  4348  0E94                     	;# 
  4349  0E95                     	;# 
  4350  0E9C                     	;# 
  4351  0E9D                     	;# 
  4352  0E9E                     	;# 
  4353  0E9F                     	;# 
  4354  0EA0                     	;# 
  4355  0EA1                     	;# 
  4356  0EA2                     	;# 
  4357  0EA3                     	;# 
  4358  0EA4                     	;# 
  4359  0EA5                     	;# 
  4360  0EA6                     	;# 
  4361  0EA7                     	;# 
  4362  0F0F                     	;# 
  4363  0F10                     	;# 
  4364  0F11                     	;# 
  4365  0F12                     	;# 
  4366  0F13                     	;# 
  4367  0F14                     	;# 
  4368  0F15                     	;# 
  4369  0F16                     	;# 
  4370  0F17                     	;# 
  4371  0F18                     	;# 
  4372  0F19                     	;# 
  4373  0F1A                     	;# 
  4374  0F1B                     	;# 
  4375  0F1C                     	;# 
  4376  0F1D                     	;# 
  4377  0F1E                     	;# 
  4378  0F1F                     	;# 
  4379  0F20                     	;# 
  4380  0F21                     	;# 
  4381  0F22                     	;# 
  4382  0F23                     	;# 
  4383  0F24                     	;# 
  4384  0F25                     	;# 
  4385  0F26                     	;# 
  4386  0F27                     	;# 
  4387  0F28                     	;# 
  4388  0F29                     	;# 
  4389  0F2A                     	;# 
  4390  0F2B                     	;# 
  4391  0F2C                     	;# 
  4392  0F2D                     	;# 
  4393  0F2E                     	;# 
  4394  0F2F                     	;# 
  4395  0F30                     	;# 
  4396  0F31                     	;# 
  4397  0F32                     	;# 
  4398  0F33                     	;# 
  4399  0F34                     	;# 
  4400  0F35                     	;# 
  4401  0F36                     	;# 
  4402  0F37                     	;# 
  4403  0FE4                     	;# 
  4404  0FE5                     	;# 
  4405  0FE6                     	;# 
  4406  0FE7                     	;# 
  4407  0FE8                     	;# 
  4408  0FE9                     	;# 
  4409  0FEA                     	;# 
  4410  0FEB                     	;# 
  4411  0FED                     	;# 
  4412  0FEE                     	;# 
  4413  0FEF                     	;# 
  4414  0000                     	;# 
  4415  0001                     	;# 
  4416  0002                     	;# 
  4417  0003                     	;# 
  4418  0004                     	;# 
  4419  0005                     	;# 
  4420  0006                     	;# 
  4421  0007                     	;# 
  4422  0008                     	;# 
  4423  0009                     	;# 
  4424  000A                     	;# 
  4425  000B                     	;# 
  4426  000C                     	;# 
  4427  000D                     	;# 
  4428  000E                     	;# 
  4429  0010                     	;# 
  4430  0011                     	;# 
  4431  0012                     	;# 
  4432  0013                     	;# 
  4433  0014                     	;# 
  4434  0015                     	;# 
  4435  0015                     	;# 
  4436  0016                     	;# 
  4437  0016                     	;# 
  4438  0017                     	;# 
  4439  0018                     	;# 
  4440  0019                     	;# 
  4441  0019                     	;# 
  4442  001A                     	;# 
  4443  001B                     	;# 
  4444  001C                     	;# 
  4445  001D                     	;# 
  4446  001E                     	;# 
  4447  001F                     	;# 
  4448  008C                     	;# 
  4449  008D                     	;# 
  4450  008E                     	;# 
  4451  0090                     	;# 
  4452  0091                     	;# 
  4453  0092                     	;# 
  4454  0093                     	;# 
  4455  0094                     	;# 
  4456  0097                     	;# 
  4457  009B                     	;# 
  4458  009B                     	;# 
  4459  009C                     	;# 
  4460  009D                     	;# 
  4461  009E                     	;# 
  4462  009F                     	;# 
  4463  010C                     	;# 
  4464  010D                     	;# 
  4465  010E                     	;# 
  4466  0111                     	;# 
  4467  0112                     	;# 
  4468  0113                     	;# 
  4469  0114                     	;# 
  4470  0115                     	;# 
  4471  0116                     	;# 
  4472  0117                     	;# 
  4473  0118                     	;# 
  4474  0119                     	;# 
  4475  018C                     	;# 
  4476  018D                     	;# 
  4477  018E                     	;# 
  4478  0197                     	;# 
  4479  0199                     	;# 
  4480  0199                     	;# 
  4481  0199                     	;# 
  4482  019A                     	;# 
  4483  019A                     	;# 
  4484  019A                     	;# 
  4485  019B                     	;# 
  4486  019B                     	;# 
  4487  019B                     	;# 
  4488  019B                     	;# 
  4489  019B                     	;# 
  4490  019C                     	;# 
  4491  019C                     	;# 
  4492  019C                     	;# 
  4493  019D                     	;# 
  4494  019D                     	;# 
  4495  019D                     	;# 
  4496  019E                     	;# 
  4497  019E                     	;# 
  4498  019E                     	;# 
  4499  019F                     	;# 
  4500  019F                     	;# 
  4501  019F                     	;# 
  4502  019F                     	;# 
  4503  019F                     	;# 
  4504  020C                     	;# 
  4505  020D                     	;# 
  4506  020E                     	;# 
  4507  0211                     	;# 
  4508  0211                     	;# 
  4509  0212                     	;# 
  4510  0212                     	;# 
  4511  0213                     	;# 
  4512  0213                     	;# 
  4513  0214                     	;# 
  4514  0214                     	;# 
  4515  0215                     	;# 
  4516  0215                     	;# 
  4517  0215                     	;# 
  4518  0215                     	;# 
  4519  0216                     	;# 
  4520  0216                     	;# 
  4521  0217                     	;# 
  4522  0217                     	;# 
  4523  0219                     	;# 
  4524  021A                     	;# 
  4525  021B                     	;# 
  4526  021C                     	;# 
  4527  021D                     	;# 
  4528  021D                     	;# 
  4529  021E                     	;# 
  4530  021F                     	;# 
  4531  028C                     	;# 
  4532  028D                     	;# 
  4533  028E                     	;# 
  4534  0291                     	;# 
  4535  0291                     	;# 
  4536  0292                     	;# 
  4537  0293                     	;# 
  4538  0294                     	;# 
  4539  0295                     	;# 
  4540  0295                     	;# 
  4541  0296                     	;# 
  4542  0297                     	;# 
  4543  0298                     	;# 
  4544  029F                     	;# 
  4545  030C                     	;# 
  4546  030D                     	;# 
  4547  030E                     	;# 
  4548  0311                     	;# 
  4549  0311                     	;# 
  4550  0312                     	;# 
  4551  0313                     	;# 
  4552  0314                     	;# 
  4553  0315                     	;# 
  4554  0315                     	;# 
  4555  0316                     	;# 
  4556  0317                     	;# 
  4557  0318                     	;# 
  4558  038C                     	;# 
  4559  038D                     	;# 
  4560  038E                     	;# 
  4561  0391                     	;# 
  4562  0392                     	;# 
  4563  0393                     	;# 
  4564  0394                     	;# 
  4565  0395                     	;# 
  4566  0396                     	;# 
  4567  0397                     	;# 
  4568  0398                     	;# 
  4569  0399                     	;# 
  4570  039A                     	;# 
  4571  039C                     	;# 
  4572  039D                     	;# 
  4573  039E                     	;# 
  4574  039F                     	;# 
  4575  0411                     	;# 
  4576  0411                     	;# 
  4577  0412                     	;# 
  4578  0413                     	;# 
  4579  0414                     	;# 
  4580  0415                     	;# 
  4581  0416                     	;# 
  4582  0417                     	;# 
  4583  0418                     	;# 
  4584  0418                     	;# 
  4585  0419                     	;# 
  4586  041A                     	;# 
  4587  041B                     	;# 
  4588  041C                     	;# 
  4589  041D                     	;# 
  4590  041E                     	;# 
  4591  041F                     	;# 
  4592  0498                     	;# 
  4593  0498                     	;# 
  4594  0499                     	;# 
  4595  049A                     	;# 
  4596  049B                     	;# 
  4597  049B                     	;# 
  4598  049C                     	;# 
  4599  049D                     	;# 
  4600  049E                     	;# 
  4601  049F                     	;# 
  4602  0617                     	;# 
  4603  0618                     	;# 
  4604  0619                     	;# 
  4605  0619                     	;# 
  4606  061A                     	;# 
  4607  061B                     	;# 
  4608  061C                     	;# 
  4609  061C                     	;# 
  4610  061F                     	;# 
  4611  0691                     	;# 
  4612  0692                     	;# 
  4613  0693                     	;# 
  4614  0694                     	;# 
  4615  0695                     	;# 
  4616  0696                     	;# 
  4617  0697                     	;# 
  4618  0698                     	;# 
  4619  0699                     	;# 
  4620  0711                     	;# 
  4621  0712                     	;# 
  4622  0713                     	;# 
  4623  0714                     	;# 
  4624  0715                     	;# 
  4625  0716                     	;# 
  4626  0717                     	;# 
  4627  0718                     	;# 
  4628  0719                     	;# 
  4629  0891                     	;# 
  4630  0891                     	;# 
  4631  0891                     	;# 
  4632  0891                     	;# 
  4633  0891                     	;# 
  4634  0891                     	;# 
  4635  0892                     	;# 
  4636  0892                     	;# 
  4637  0892                     	;# 
  4638  0893                     	;# 
  4639  0893                     	;# 
  4640  0893                     	;# 
  4641  0893                     	;# 
  4642  0893                     	;# 
  4643  0893                     	;# 
  4644  0894                     	;# 
  4645  0894                     	;# 
  4646  0894                     	;# 
  4647  0895                     	;# 
  4648  0895                     	;# 
  4649  0895                     	;# 
  4650  0896                     	;# 
  4651  0896                     	;# 
  4652  0896                     	;# 
  4653  089B                     	;# 
  4654  0911                     	;# 
  4655  0912                     	;# 
  4656  0913                     	;# 
  4657  0914                     	;# 
  4658  0915                     	;# 
  4659  0916                     	;# 
  4660  0918                     	;# 
  4661  0919                     	;# 
  4662  091A                     	;# 
  4663  091B                     	;# 
  4664  091C                     	;# 
  4665  091D                     	;# 
  4666  091E                     	;# 
  4667  091F                     	;# 
  4668  0E0F                     	;# 
  4669  0E10                     	;# 
  4670  0E11                     	;# 
  4671  0E12                     	;# 
  4672  0E13                     	;# 
  4673  0E14                     	;# 
  4674  0E15                     	;# 
  4675  0E16                     	;# 
  4676  0E17                     	;# 
  4677  0E18                     	;# 
  4678  0E19                     	;# 
  4679  0E1A                     	;# 
  4680  0E1B                     	;# 
  4681  0E1C                     	;# 
  4682  0E1D                     	;# 
  4683  0E1E                     	;# 
  4684  0E1F                     	;# 
  4685  0E20                     	;# 
  4686  0E21                     	;# 
  4687  0E22                     	;# 
  4688  0E24                     	;# 
  4689  0E25                     	;# 
  4690  0E28                     	;# 
  4691  0E29                     	;# 
  4692  0E2A                     	;# 
  4693  0E2B                     	;# 
  4694  0E2C                     	;# 
  4695  0E2D                     	;# 
  4696  0E2E                     	;# 
  4697  0E2F                     	;# 
  4698  0E90                     	;# 
  4699  0E91                     	;# 
  4700  0E92                     	;# 
  4701  0E94                     	;# 
  4702  0E95                     	;# 
  4703  0E9C                     	;# 
  4704  0E9D                     	;# 
  4705  0E9E                     	;# 
  4706  0E9F                     	;# 
  4707  0EA0                     	;# 
  4708  0EA1                     	;# 
  4709  0EA2                     	;# 
  4710  0EA3                     	;# 
  4711  0EA4                     	;# 
  4712  0EA5                     	;# 
  4713  0EA6                     	;# 
  4714  0EA7                     	;# 
  4715  0F0F                     	;# 
  4716  0F10                     	;# 
  4717  0F11                     	;# 
  4718  0F12                     	;# 
  4719  0F13                     	;# 
  4720  0F14                     	;# 
  4721  0F15                     	;# 
  4722  0F16                     	;# 
  4723  0F17                     	;# 
  4724  0F18                     	;# 
  4725  0F19                     	;# 
  4726  0F1A                     	;# 
  4727  0F1B                     	;# 
  4728  0F1C                     	;# 
  4729  0F1D                     	;# 
  4730  0F1E                     	;# 
  4731  0F1F                     	;# 
  4732  0F20                     	;# 
  4733  0F21                     	;# 
  4734  0F22                     	;# 
  4735  0F23                     	;# 
  4736  0F24                     	;# 
  4737  0F25                     	;# 
  4738  0F26                     	;# 
  4739  0F27                     	;# 
  4740  0F28                     	;# 
  4741  0F29                     	;# 
  4742  0F2A                     	;# 
  4743  0F2B                     	;# 
  4744  0F2C                     	;# 
  4745  0F2D                     	;# 
  4746  0F2E                     	;# 
  4747  0F2F                     	;# 
  4748  0F30                     	;# 
  4749  0F31                     	;# 
  4750  0F32                     	;# 
  4751  0F33                     	;# 
  4752  0F34                     	;# 
  4753  0F35                     	;# 
  4754  0F36                     	;# 
  4755  0F37                     	;# 
  4756  0FE4                     	;# 
  4757  0FE5                     	;# 
  4758  0FE6                     	;# 
  4759  0FE7                     	;# 
  4760  0FE8                     	;# 
  4761  0FE9                     	;# 
  4762  0FEA                     	;# 
  4763  0FEB                     	;# 
  4764  0FED                     	;# 
  4765  0FEE                     	;# 
  4766  0FEF                     	;# 
  4767  0000                     	;# 
  4768  0001                     	;# 
  4769  0002                     	;# 
  4770  0003                     	;# 
  4771  0004                     	;# 
  4772  0005                     	;# 
  4773  0006                     	;# 
  4774  0007                     	;# 
  4775  0008                     	;# 
  4776  0009                     	;# 
  4777  000A                     	;# 
  4778  000B                     	;# 
  4779  000C                     	;# 
  4780  000D                     	;# 
  4781  000E                     	;# 
  4782  0010                     	;# 
  4783  0011                     	;# 
  4784  0012                     	;# 
  4785  0013                     	;# 
  4786  0014                     	;# 
  4787  0015                     	;# 
  4788  0015                     	;# 
  4789  0016                     	;# 
  4790  0016                     	;# 
  4791  0017                     	;# 
  4792  0018                     	;# 
  4793  0019                     	;# 
  4794  0019                     	;# 
  4795  001A                     	;# 
  4796  001B                     	;# 
  4797  001C                     	;# 
  4798  001D                     	;# 
  4799  001E                     	;# 
  4800  001F                     	;# 
  4801  008C                     	;# 
  4802  008D                     	;# 
  4803  008E                     	;# 
  4804  0090                     	;# 
  4805  0091                     	;# 
  4806  0092                     	;# 
  4807  0093                     	;# 
  4808  0094                     	;# 
  4809  0097                     	;# 
  4810  009B                     	;# 
  4811  009B                     	;# 
  4812  009C                     	;# 
  4813  009D                     	;# 
  4814  009E                     	;# 
  4815  009F                     	;# 
  4816  010C                     	;# 
  4817  010D                     	;# 
  4818  010E                     	;# 
  4819  0111                     	;# 
  4820  0112                     	;# 
  4821  0113                     	;# 
  4822  0114                     	;# 
  4823  0115                     	;# 
  4824  0116                     	;# 
  4825  0117                     	;# 
  4826  0118                     	;# 
  4827  0119                     	;# 
  4828  018C                     	;# 
  4829  018D                     	;# 
  4830  018E                     	;# 
  4831  0197                     	;# 
  4832  0199                     	;# 
  4833  0199                     	;# 
  4834  0199                     	;# 
  4835  019A                     	;# 
  4836  019A                     	;# 
  4837  019A                     	;# 
  4838  019B                     	;# 
  4839  019B                     	;# 
  4840  019B                     	;# 
  4841  019B                     	;# 
  4842  019B                     	;# 
  4843  019C                     	;# 
  4844  019C                     	;# 
  4845  019C                     	;# 
  4846  019D                     	;# 
  4847  019D                     	;# 
  4848  019D                     	;# 
  4849  019E                     	;# 
  4850  019E                     	;# 
  4851  019E                     	;# 
  4852  019F                     	;# 
  4853  019F                     	;# 
  4854  019F                     	;# 
  4855  019F                     	;# 
  4856  019F                     	;# 
  4857  020C                     	;# 
  4858  020D                     	;# 
  4859  020E                     	;# 
  4860  0211                     	;# 
  4861  0211                     	;# 
  4862  0212                     	;# 
  4863  0212                     	;# 
  4864  0213                     	;# 
  4865  0213                     	;# 
  4866  0214                     	;# 
  4867  0214                     	;# 
  4868  0215                     	;# 
  4869  0215                     	;# 
  4870  0215                     	;# 
  4871  0215                     	;# 
  4872  0216                     	;# 
  4873  0216                     	;# 
  4874  0217                     	;# 
  4875  0217                     	;# 
  4876  0219                     	;# 
  4877  021A                     	;# 
  4878  021B                     	;# 
  4879  021C                     	;# 
  4880  021D                     	;# 
  4881  021D                     	;# 
  4882  021E                     	;# 
  4883  021F                     	;# 
  4884  028C                     	;# 
  4885  028D                     	;# 
  4886  028E                     	;# 
  4887  0291                     	;# 
  4888  0291                     	;# 
  4889  0292                     	;# 
  4890  0293                     	;# 
  4891  0294                     	;# 
  4892  0295                     	;# 
  4893  0295                     	;# 
  4894  0296                     	;# 
  4895  0297                     	;# 
  4896  0298                     	;# 
  4897  029F                     	;# 
  4898  030C                     	;# 
  4899  030D                     	;# 
  4900  030E                     	;# 
  4901  0311                     	;# 
  4902  0311                     	;# 
  4903  0312                     	;# 
  4904  0313                     	;# 
  4905  0314                     	;# 
  4906  0315                     	;# 
  4907  0315                     	;# 
  4908  0316                     	;# 
  4909  0317                     	;# 
  4910  0318                     	;# 
  4911  038C                     	;# 
  4912  038D                     	;# 
  4913  038E                     	;# 
  4914  0391                     	;# 
  4915  0392                     	;# 
  4916  0393                     	;# 
  4917  0394                     	;# 
  4918  0395                     	;# 
  4919  0396                     	;# 
  4920  0397                     	;# 
  4921  0398                     	;# 
  4922  0399                     	;# 
  4923  039A                     	;# 
  4924  039C                     	;# 
  4925  039D                     	;# 
  4926  039E                     	;# 
  4927  039F                     	;# 
  4928  0411                     	;# 
  4929  0411                     	;# 
  4930  0412                     	;# 
  4931  0413                     	;# 
  4932  0414                     	;# 
  4933  0415                     	;# 
  4934  0416                     	;# 
  4935  0417                     	;# 
  4936  0418                     	;# 
  4937  0418                     	;# 
  4938  0419                     	;# 
  4939  041A                     	;# 
  4940  041B                     	;# 
  4941  041C                     	;# 
  4942  041D                     	;# 
  4943  041E                     	;# 
  4944  041F                     	;# 
  4945  0498                     	;# 
  4946  0498                     	;# 
  4947  0499                     	;# 
  4948  049A                     	;# 
  4949  049B                     	;# 
  4950  049B                     	;# 
  4951  049C                     	;# 
  4952  049D                     	;# 
  4953  049E                     	;# 
  4954  049F                     	;# 
  4955  0617                     	;# 
  4956  0618                     	;# 
  4957  0619                     	;# 
  4958  0619                     	;# 
  4959  061A                     	;# 
  4960  061B                     	;# 
  4961  061C                     	;# 
  4962  061C                     	;# 
  4963  061F                     	;# 
  4964  0691                     	;# 
  4965  0692                     	;# 
  4966  0693                     	;# 
  4967  0694                     	;# 
  4968  0695                     	;# 
  4969  0696                     	;# 
  4970  0697                     	;# 
  4971  0698                     	;# 
  4972  0699                     	;# 
  4973  0711                     	;# 
  4974  0712                     	;# 
  4975  0713                     	;# 
  4976  0714                     	;# 
  4977  0715                     	;# 
  4978  0716                     	;# 
  4979  0717                     	;# 
  4980  0718                     	;# 
  4981  0719                     	;# 
  4982  0891                     	;# 
  4983  0891                     	;# 
  4984  0891                     	;# 
  4985  0891                     	;# 
  4986  0891                     	;# 
  4987  0891                     	;# 
  4988  0892                     	;# 
  4989  0892                     	;# 
  4990  0892                     	;# 
  4991  0893                     	;# 
  4992  0893                     	;# 
  4993  0893                     	;# 
  4994  0893                     	;# 
  4995  0893                     	;# 
  4996  0893                     	;# 
  4997  0894                     	;# 
  4998  0894                     	;# 
  4999  0894                     	;# 
  5000  0895                     	;# 
  5001  0895                     	;# 
  5002  0895                     	;# 
  5003  0896                     	;# 
  5004  0896                     	;# 
  5005  0896                     	;# 
  5006  089B                     	;# 
  5007  0911                     	;# 
  5008  0912                     	;# 
  5009  0913                     	;# 
  5010  0914                     	;# 
  5011  0915                     	;# 
  5012  0916                     	;# 
  5013  0918                     	;# 
  5014  0919                     	;# 
  5015  091A                     	;# 
  5016  091B                     	;# 
  5017  091C                     	;# 
  5018  091D                     	;# 
  5019  091E                     	;# 
  5020  091F                     	;# 
  5021  0E0F                     	;# 
  5022  0E10                     	;# 
  5023  0E11                     	;# 
  5024  0E12                     	;# 
  5025  0E13                     	;# 
  5026  0E14                     	;# 
  5027  0E15                     	;# 
  5028  0E16                     	;# 
  5029  0E17                     	;# 
  5030  0E18                     	;# 
  5031  0E19                     	;# 
  5032  0E1A                     	;# 
  5033  0E1B                     	;# 
  5034  0E1C                     	;# 
  5035  0E1D                     	;# 
  5036  0E1E                     	;# 
  5037  0E1F                     	;# 
  5038  0E20                     	;# 
  5039  0E21                     	;# 
  5040  0E22                     	;# 
  5041  0E24                     	;# 
  5042  0E25                     	;# 
  5043  0E28                     	;# 
  5044  0E29                     	;# 
  5045  0E2A                     	;# 
  5046  0E2B                     	;# 
  5047  0E2C                     	;# 
  5048  0E2D                     	;# 
  5049  0E2E                     	;# 
  5050  0E2F                     	;# 
  5051  0E90                     	;# 
  5052  0E91                     	;# 
  5053  0E92                     	;# 
  5054  0E94                     	;# 
  5055  0E95                     	;# 
  5056  0E9C                     	;# 
  5057  0E9D                     	;# 
  5058  0E9E                     	;# 
  5059  0E9F                     	;# 
  5060  0EA0                     	;# 
  5061  0EA1                     	;# 
  5062  0EA2                     	;# 
  5063  0EA3                     	;# 
  5064  0EA4                     	;# 
  5065  0EA5                     	;# 
  5066  0EA6                     	;# 
  5067  0EA7                     	;# 
  5068  0F0F                     	;# 
  5069  0F10                     	;# 
  5070  0F11                     	;# 
  5071  0F12                     	;# 
  5072  0F13                     	;# 
  5073  0F14                     	;# 
  5074  0F15                     	;# 
  5075  0F16                     	;# 
  5076  0F17                     	;# 
  5077  0F18                     	;# 
  5078  0F19                     	;# 
  5079  0F1A                     	;# 
  5080  0F1B                     	;# 
  5081  0F1C                     	;# 
  5082  0F1D                     	;# 
  5083  0F1E                     	;# 
  5084  0F1F                     	;# 
  5085  0F20                     	;# 
  5086  0F21                     	;# 
  5087  0F22                     	;# 
  5088  0F23                     	;# 
  5089  0F24                     	;# 
  5090  0F25                     	;# 
  5091  0F26                     	;# 
  5092  0F27                     	;# 
  5093  0F28                     	;# 
  5094  0F29                     	;# 
  5095  0F2A                     	;# 
  5096  0F2B                     	;# 
  5097  0F2C                     	;# 
  5098  0F2D                     	;# 
  5099  0F2E                     	;# 
  5100  0F2F                     	;# 
  5101  0F30                     	;# 
  5102  0F31                     	;# 
  5103  0F32                     	;# 
  5104  0F33                     	;# 
  5105  0F34                     	;# 
  5106  0F35                     	;# 
  5107  0F36                     	;# 
  5108  0F37                     	;# 
  5109  0FE4                     	;# 
  5110  0FE5                     	;# 
  5111  0FE6                     	;# 
  5112  0FE7                     	;# 
  5113  0FE8                     	;# 
  5114  0FE9                     	;# 
  5115  0FEA                     	;# 
  5116  0FEB                     	;# 
  5117  0FED                     	;# 
  5118  0FEE                     	;# 
  5119  0FEF                     	;# 
  5120                           
  5121                           	psect	idataBANK0
  5122  1787                     __pidataBANK0:	
  5123                           
  5124                           ;initializer for _start
  5125  1787  3401               	retlw	1
  5126                           
  5127                           	psect	idataBANK3
  5128  085B                     __pidataBANK3:	
  5129                           
  5130                           ;initializer for _names
  5131  085B  343D               	retlw	low (STR_1| (0+32768))
  5132  085C  3490               	retlw	high (STR_1| (0+32768))
  5133  085D  3430               	retlw	low (STR_2| (0+32768))
  5134  085E  3490               	retlw	high (STR_2| (0+32768))
  5135  085F  3420               	retlw	low (STR_3| (0+32768))
  5136  0860  3490               	retlw	high (STR_3| (0+32768))
  5137  0861  3449               	retlw	low (STR_4| (0+32768))
  5138  0862  3490               	retlw	high (STR_4| (0+32768))
  5139                           
  5140                           	psect	stringtext1
  5141  1000                     __pstringtext1:	
  5142  1000                     _fsmStateTable:	
  5143  1000  34EF               	retlw	low _do_I2C_IDLE
  5144  1001  3417               	retlw	high _do_I2C_IDLE
  5145  1002  3433               	retlw	low _do_I2C_SEND_ADR_READ
  5146  1003  3408               	retlw	high _do_I2C_SEND_ADR_READ
  5147  1004  3416               	retlw	low _do_I2C_SEND_ADR_WRITE
  5148  1005  3408               	retlw	high _do_I2C_SEND_ADR_WRITE
  5149  1006  34B8               	retlw	low _do_I2C_TX
  5150  1007  340E               	retlw	high _do_I2C_TX
  5151  1008  3428               	retlw	low _do_I2C_RX
  5152  1009  340E               	retlw	high _do_I2C_RX
  5153  100A  34F4               	retlw	low _do_I2C_RCEN
  5154  100B  3417               	retlw	high _do_I2C_RCEN
  5155  100C  34E9               	retlw	low _do_I2C_TX_EMPTY
  5156  100D  340B               	retlw	high _do_I2C_TX_EMPTY
  5157  100E  34C6               	retlw	low _do_I2C_SEND_RESTART_READ
  5158  100F  3417               	retlw	high _do_I2C_SEND_RESTART_READ
  5159  1010  34CA               	retlw	low _do_I2C_SEND_RESTART_WRITE
  5160  1011  3417               	retlw	high _do_I2C_SEND_RESTART_WRITE
  5161  1012  34CE               	retlw	low _do_I2C_SEND_RESTART
  5162  1013  3417               	retlw	high _do_I2C_SEND_RESTART
  5163  1014  34D2               	retlw	low _do_I2C_SEND_STOP
  5164  1015  3417               	retlw	high _do_I2C_SEND_STOP
  5165  1016  34D6               	retlw	low _do_I2C_DO_ACK
  5166  1017  3417               	retlw	high _do_I2C_DO_ACK
  5167  1018  34DA               	retlw	low _do_I2C_DO_NACK_STOP
  5168  1019  3417               	retlw	high _do_I2C_DO_NACK_STOP
  5169  101A  34DE               	retlw	low _do_I2C_DO_NACK_RESTART
  5170  101B  3417               	retlw	high _do_I2C_DO_NACK_RESTART
  5171  101C  340F               	retlw	low _do_I2C_RESET
  5172  101D  3408               	retlw	high _do_I2C_RESET
  5173  101E  3493               	retlw	low _do_I2C_DO_ADDRESS_NACK
  5174  101F  340B               	retlw	high _do_I2C_DO_ADDRESS_NACK
  5175  1020                     __end_of_fsmStateTable:	
  5176                           
  5177                           	psect	nvBANK0
  5178  006E                     __pnvBANK0:	
  5179  006E                     _eusartTxBufferRemaining:	
  5180  006E                     	ds	1
  5181                           
  5182                           	psect	nvBANK2
  5183  016A                     __pnvBANK2:	
  5184  016A                     _EUSART_FramingErrorHandler:	
  5185  016A                     	ds	2
  5186  016C                     _EUSART_RxDefaultInterruptHandler:	
  5187  016C                     	ds	2
  5188  016E                     _EUSART_TxDefaultInterruptHandler:	
  5189  016E                     	ds	2
  5190                           
  5191                           	psect	nvBANK3
  5192  01D5                     __pnvBANK3:	
  5193  01D5                     _EUSART_ErrorHandler:	
  5194  01D5                     	ds	2
  5195  01D7                     _EUSART_OverrunErrorHandler:	
  5196  01D7                     	ds	2
  5197  000E                     _PORTCbits	set	14
  5198  001F                     _T2CONbits	set	31
  5199  001F                     _T2CON	set	31
  5200  001D                     _TMR2	set	29
  5201  001E                     _PR2	set	30
  5202  0011                     _PIR1bits	set	17
  5203  000B                     _INTCONbits	set	11
  5204  0010                     _PIR0bits	set	16
  5205  009D                     _ADCON0bits	set	157
  5206  009C                     _ADRESH	set	156
  5207  009B                     _ADRESL	set	155
  5208  009F                     _ADACT	set	159
  5209  009E                     _ADCON1	set	158
  5210  009D                     _ADCON0	set	157
  5211  008E                     _TRISC	set	142
  5212  008D                     _TRISB	set	141
  5213  008C                     _TRISA	set	140
  5214  0097                     _WDTCON	set	151
  5215  0091                     _PIE1bits	set	145
  5216  0090                     _PIE0bits	set	144
  5217  010E                     _LATCbits	set	270
  5218  010E                     _LATC	set	270
  5219  010D                     _LATB	set	269
  5220  010C                     _LATA	set	268
  5221  019A                     _TXREG1	set	410
  5222  019E                     _TXSTA1bits	set	414
  5223  0199                     _RC1REG	set	409
  5224  019D                     _RC1STAbits	set	413
  5225  019A                     _TX1REG	set	410
  5226  019E                     _TX1STAbits	set	414
  5227  019C                     _SP1BRGH	set	412
  5228  019B                     _SP1BRGL	set	411
  5229  019E                     _TX1STA	set	414
  5230  019D                     _RC1STA	set	413
  5231  019F                     _BAUD1CON	set	415
  5232  018C                     _ANSELA	set	396
  5233  018D                     _ANSELB	set	397
  5234  018E                     _ANSELC	set	398
  5235  021C                     _SSP2STATbits	set	540
  5236  0219                     _SSP2BUF	set	537
  5237  021D                     _SSP2CON1bits	set	541
  5238  021A                     _SSP2ADD	set	538
  5239  021D                     _SSP2CON1	set	541
  5240  021C                     _SSP2STAT	set	540
  5241  0214                     _SSP1STATbits	set	532
  5242  0213                     _SSP1MSK	set	531
  5243  0211                     _SSP1BUF	set	529
  5244  0216                     _SSP1CON2bits	set	534
  5245  0212                     _SSP1ADD	set	530
  5246  0216                     _SSP1CON2	set	534
  5247  0215                     _SSP1CON1	set	533
  5248  0214                     _SSP1STAT	set	532
  5249  0215                     _SSP1CON1bits	set	533
  5250  020E                     _WPUC	set	526
  5251  020C                     _WPUA	set	524
  5252  020D                     _WPUB	set	525
  5253  0293                     _CCP1CONbits	set	659
  5254  029F                     _CCPTMRSbits	set	671
  5255  0291                     _CCPR1L	set	657
  5256  0292                     _CCPR1H	set	658
  5257  0293                     _CCP1CON	set	659
  5258  028E                     _ODCONC	set	654
  5259  028D                     _ODCONB	set	653
  5260  028C                     _ODCONA	set	652
  5261  030E                     _SLRCONC	set	782
  5262  030D                     _SLRCONB	set	781
  5263  030C                     _SLRCONA	set	780
  5264  0916                     _PMD5	set	2326
  5265  0915                     _PMD4	set	2325
  5266  0914                     _PMD3	set	2324
  5267  0913                     _PMD2	set	2323
  5268  0912                     _PMD1	set	2322
  5269  0911                     _PMD0	set	2321
  5270  091E                     _OSCTUNE	set	2334
  5271  091F                     _OSCFRQ	set	2335
  5272  091D                     _OSCEN	set	2333
  5273  091B                     _OSCCON3	set	2331
  5274  0919                     _OSCCON1	set	2329
  5275  0E1D                     _SSP2CLKPPS	set	3613
  5276  0E21                     _SSP1DATPPS	set	3617
  5277  0E20                     _SSP1CLKPPS	set	3616
  5278  0E1E                     _SSP2DATPPS	set	3614
  5279  0E24                     _RXPPS	set	3620
  5280  0EA5                     _RC5PPS	set	3749
  5281  0EA2                     _RC2PPS	set	3746
  5282  0E9D                     _RB5PPS	set	3741
  5283  0E9F                     _RB7PPS	set	3743
  5284  0E9E                     _RB6PPS	set	3742
  5285                           
  5286                           	psect	stringtext2
  5287  1020                     __pstringtext2:	
  5288  1020                     STR_3:	
  5289  1020  3441               	retlw	65	;'A'
  5290  1021  346C               	retlw	108	;'l'
  5291  1022  3465               	retlw	101	;'e'
  5292  1023  3478               	retlw	120	;'x'
  5293  1024  3461               	retlw	97	;'a'
  5294  1025  346E               	retlw	110	;'n'
  5295  1026  3464               	retlw	100	;'d'
  5296  1027  3472               	retlw	114	;'r'
  5297  1028  3461               	retlw	97	;'a'
  5298  1029  3420               	retlw	32	;' '
  5299  102A  3446               	retlw	70	;'F'
  5300  102B  3479               	retlw	121	;'y'
  5301  102C  3466               	retlw	102	;'f'
  5302  102D  3466               	retlw	102	;'f'
  5303  102E  3465               	retlw	101	;'e'
  5304  102F  3400               	retlw	0
  5305                           
  5306                           	psect	stringtext3
  5307  1030                     __pstringtext3:	
  5308  1030                     STR_2:	
  5309  1030  344E               	retlw	78	;'N'
  5310  1031  346F               	retlw	111	;'o'
  5311  1032  3465               	retlw	101	;'e'
  5312  1033  346C               	retlw	108	;'l'
  5313  1034  346C               	retlw	108	;'l'
  5314  1035  3465               	retlw	101	;'e'
  5315  1036  3420               	retlw	32	;' '
  5316  1037  3443               	retlw	67	;'C'
  5317  1038  3472               	retlw	114	;'r'
  5318  1039  3461               	retlw	97	;'a'
  5319  103A  346E               	retlw	110	;'n'
  5320  103B  3465               	retlw	101	;'e'
  5321  103C  3400               	retlw	0
  5322                           
  5323                           	psect	stringtext4
  5324  103D                     __pstringtext4:	
  5325  103D                     STR_1:	
  5326  103D  344A               	retlw	74	;'J'
  5327  103E  3475               	retlw	117	;'u'
  5328  103F  3473               	retlw	115	;'s'
  5329  1040  3474               	retlw	116	;'t'
  5330  1041  3469               	retlw	105	;'i'
  5331  1042  346E               	retlw	110	;'n'
  5332  1043  3420               	retlw	32	;' '
  5333  1044  3443               	retlw	67	;'C'
  5334  1045  3468               	retlw	104	;'h'
  5335  1046  3461               	retlw	97	;'a'
  5336  1047  346E               	retlw	110	;'n'
  5337  1048  3400               	retlw	0
  5338                           
  5339                           	psect	stringtext5
  5340  1049                     __pstringtext5:	
  5341  1049                     STR_4:	
  5342  1049  344A               	retlw	74	;'J'
  5343  104A  3465               	retlw	101	;'e'
  5344  104B  3466               	retlw	102	;'f'
  5345  104C  3466               	retlw	102	;'f'
  5346  104D  3420               	retlw	32	;' '
  5347  104E  3447               	retlw	71	;'G'
  5348  104F  3465               	retlw	101	;'e'
  5349  1050  3469               	retlw	105	;'i'
  5350  1051  3473               	retlw	115	;'s'
  5351  1052  3473               	retlw	115	;'s'
  5352  1053  3400               	retlw	0
  5353                           
  5354                           	psect	stringtext6
  5355  1054                     __pstringtext6:	
  5356  1054                     STR_5:	
  5357  1054  3474               	retlw	116	;'t'
  5358  1055  346F               	retlw	111	;'o'
  5359  1056  3467               	retlw	103	;'g'
  5360  1057  3467               	retlw	103	;'g'
  5361  1058  346C               	retlw	108	;'l'
  5362  1059  3465               	retlw	101	;'e'
  5363  105A  3400               	retlw	0
  5364                           
  5365                           	psect	stringtext7
  5366  0000                     __pstringtext7:	
  5367                           
  5368                           ; #config settings
  5369  0000                     
  5370                           	psect	cinit
  5371  0049                     start_initialization:	
  5372  0049                     __initialization:	
  5373                           
  5374                           ; Initialize objects allocated to BANK0
  5375  0049  3197  2787  3180   	fcall	__pidataBANK0	;fetch initializer
  5376  004C  00EF               	movwf	__pdataBANK0& (0+127)
  5377                           
  5378                           ; Initialize objects allocated to BANK3
  5379  004D  305B               	movlw	low __pidataBANK3
  5380  004E  0084               	movwf	4
  5381  004F  3088               	movlw	(high __pidataBANK3)| (0+128)
  5382  0050  0085               	movwf	5
  5383  0051  30CD               	movlw	low __pdataBANK3
  5384  0052  0086               	movwf	6
  5385  0053  3001               	movlw	high __pdataBANK3
  5386  0054  0087               	movwf	7
  5387  0055  3008               	movlw	8
  5388  0056  3188  2009  3180   	fcall	init_ram
  5389                           
  5390                           ; Clear objects allocated to COMMON
  5391  0059  01F0               	clrf	__pbssCOMMON& (0+127)
  5392  005A  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
  5393  005B  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
  5394  005C  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
  5395  005D  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
  5396  005E  01F5               	clrf	(__pbssCOMMON+5)& (0+127)
  5397                           
  5398                           ; Clear objects allocated to BANK0
  5399  005F  305C               	movlw	low __pbssBANK0
  5400  0060  0084               	movwf	4
  5401  0061  3000               	movlw	high __pbssBANK0
  5402  0062  0085               	movwf	5
  5403  0063  3012               	movlw	18
  5404  0064  3188  2003  3180   	fcall	clear_ram0
  5405                           
  5406                           ; Clear objects allocated to BANK1
  5407  0067  30E0               	movlw	low __pbssBANK1
  5408  0068  0084               	movwf	4
  5409  0069  3000               	movlw	high __pbssBANK1
  5410  006A  0085               	movwf	5
  5411  006B  3010               	movlw	16
  5412  006C  3188  2003  3180   	fcall	clear_ram0
  5413                           
  5414                           ; Clear objects allocated to BANK2
  5415  006F  3060               	movlw	low __pbssBANK2
  5416  0070  0084               	movwf	4
  5417  0071  3001               	movlw	high __pbssBANK2
  5418  0072  0085               	movwf	5
  5419  0073  300A               	movlw	10
  5420  0074  3188  2003  3180   	fcall	clear_ram0
  5421                           
  5422                           ; Clear objects allocated to BANK3
  5423  0077  30A0               	movlw	low __pbssBANK3
  5424  0078  0084               	movwf	4
  5425  0079  3001               	movlw	high __pbssBANK3
  5426  007A  0085               	movwf	5
  5427  007B  302D               	movlw	45
  5428  007C  3188  2003  3180   	fcall	clear_ram0
  5429                           
  5430                           ; Clear objects allocated to BANK4
  5431  007F  3020               	movlw	low __pbssBANK4
  5432  0080  0084               	movwf	4
  5433  0081  3002               	movlw	high __pbssBANK4
  5434  0082  0085               	movwf	5
  5435  0083  3044               	movlw	68
  5436  0084  3188  2003         	fcall	clear_ram0
  5437  0086                     end_of_initialization:	
  5438                           ;End of C runtime variable initialization code
  5439                           
  5440  0086                     __end_of__initialization:	
  5441  0086  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  5442  0087  0020               	movlb	0
  5443  0088  318D  2D5F         	ljmp	_main	;jump to C main() function
  5444                           
  5445                           	psect	bssCOMMON
  5446  0070                     __pbssCOMMON:	
  5447  0070                     _eusartRxLastError:	
  5448  0070                     	ds	1
  5449  0071                     _eusartRxCount:	
  5450  0071                     	ds	1
  5451  0072                     _eusartRxTail:	
  5452  0072                     	ds	1
  5453  0073                     _eusartRxHead:	
  5454  0073                     	ds	1
  5455  0074                     _eusartTxTail:	
  5456  0074                     	ds	1
  5457  0075                     _eusartTxHead:	
  5458  0075                     	ds	1
  5459                           
  5460                           	psect	bssBANK0
  5461  005C                     __pbssBANK0:	
  5462  005C                     _on:	
  5463  005C                     	ds	2
  5464  005E                     _brightness:	
  5465  005E                     	ds	2
  5466  0060                     _name:	
  5467  0060                     	ds	2
  5468  0062                     _gesture_lr_count_:	
  5469  0062                     	ds	2
  5470  0064                     _gesture_ud_count_:	
  5471  0064                     	ds	2
  5472  0066                     _gesture_lr_delta_:	
  5473  0066                     	ds	2
  5474  0068                     _gesture_ud_delta_:	
  5475  0068                     	ds	2
  5476  006A                     _b_i2c_error_flag:	
  5477  006A                     	ds	1
  5478  006B                     _handleGestureFlag:	
  5479  006B                     	ds	1
  5480  006C                     _adcResult:	
  5481  006C                     	ds	1
  5482  006D                     _printed:	
  5483  006D                     	ds	1
  5484                           
  5485                           	psect	dataBANK0
  5486  006F                     __pdataBANK0:	
  5487  006F                     _start:	
  5488  006F                     	ds	1
  5489                           
  5490                           	psect	bssBANK1
  5491  00E0                     __pbssBANK1:	
  5492  00E0                     UART_Byte@F7536:	
  5493  00E0                     	ds	4
  5494  00E4                     _prox:	
  5495  00E4                     	ds	2
  5496  00E6                     _gesture_state_:	
  5497  00E6                     	ds	2
  5498  00E8                     _gesture_far_count_:	
  5499  00E8                     	ds	2
  5500  00EA                     _gesture_near_count_:	
  5501  00EA                     	ds	2
  5502  00EC                     _i2c1_driver_i2cISR:	
  5503  00EC                     	ds	2
  5504  00EE                     _i2c1_driver_busCollisionISR:	
  5505  00EE                     	ds	2
  5506                           
  5507                           	psect	bssBANK2
  5508  0160                     __pbssBANK2:	
  5509  0160                     _eusartRxStatusBuffer:	
  5510  0160                     	ds	8
  5511  0168                     _gesture_motion_:	
  5512  0168                     	ds	2
  5513                           
  5514                           	psect	bssBANK3
  5515  01A0                     __pbssBANK3:	
  5516  01A0                     _i2c_status:	
  5517  01A0                     	ds	29
  5518  01BD                     _eusartRxBuffer:	
  5519  01BD                     	ds	8
  5520  01C5                     _eusartTxBuffer:	
  5521  01C5                     	ds	8
  5522                           
  5523                           	psect	dataBANK3
  5524  01CD                     __pdataBANK3:	
  5525  01CD                     _names:	
  5526  01CD                     	ds	8
  5527                           
  5528                           	psect	bssBANK4
  5529  0220                     __pbssBANK4:	
  5530  0220                     _gesture_data_:	
  5531  0220                     	ds	68
  5532                           
  5533                           	psect	inittext
  5534  0809                     init_ram:	
  5535  0809  00FE               	movwf	126
  5536  080A                     initloop:	
  5537  080A  0012               	moviw fsr0++
  5538  080B  001E               	movwi fsr1++
  5539  080C  0BFE               	decfsz	126,f
  5540  080D  280A               	goto	initloop
  5541  080E  3400               	retlw	0
  5542                           
  5543                           	psect	clrtext
  5544  0803                     clear_ram0:	
  5545                           ;	Called with FSR0 containing the base address, and
  5546                           ;	WREG with the size to clear
  5547                           
  5548  0803  0064               	clrwdt	;clear the watchdog before getting into this loop
  5549  0804                     clrloop0:	
  5550  0804  0180               	clrf	0	;clear RAM location pointed to by FSR
  5551  0805  3101               	addfsr 0,1
  5552  0806  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  5553  0807  2804               	goto	clrloop0	;have we reached the end yet?
  5554  0808  3400               	retlw	0	;all done for this memory range, return
  5555                           
  5556                           	psect	cstackBANK2
  5557  0120                     __pcstackBANK2:	
  5558  0120                     readGesture@fifo_data:	
  5559                           
  5560                           ; 64 bytes @ 0x0
  5561  0120                     	ds	64
  5562                           
  5563                           	psect	cstackBANK1
  5564  00A0                     __pcstackBANK1:	
  5565  00A0                     readGesture@fifo_data2:	
  5566                           
  5567                           ; 64 bytes @ 0x0
  5568  00A0                     	ds	64
  5569                           
  5570                           	psect	cstackCOMMON
  5571  0076                     __pcstackCOMMON:	
  5572  0076                     ?_i2c1_driver_open:	
  5573  0076                     ?_i2c1_driver_isNACK:	
  5574                           ; 1 bit 
  5575                           
  5576  0076                     ?_i2c1_driver_isBufferFull:	
  5577                           ; 1 bit 
  5578                           
  5579  0076                     ?_returnStop:	
  5580                           ; 1 bit 
  5581                           
  5582  0076                     ?_returnReset:	
  5583                           ; 1 bytes @ 0x0
  5584                           
  5585  0076                     ?_mssp1_clearIRQ:	
  5586                           ; 1 bytes @ 0x0
  5587                           
  5588  0076                     ??_mssp1_clearIRQ:	
  5589                           ; 1 bytes @ 0x0
  5590                           
  5591  0076                     ?_i2c_busCollisionISR:	
  5592                           ; 1 bytes @ 0x0
  5593                           
  5594  0076                     ??_i2c_busCollisionISR:	
  5595                           ; 1 bytes @ 0x0
  5596                           
  5597  0076                     ?_i2c_ISR:	
  5598                           ; 1 bytes @ 0x0
  5599                           
  5600  0076                     ?_i2c1_driver_start:	
  5601                           ; 1 bytes @ 0x0
  5602                           
  5603  0076                     ?_i2c1_driver_resetBus:	
  5604                           ; 1 bytes @ 0x0
  5605                           
  5606  0076                     ??_i2c1_driver_resetBus:	
  5607                           ; 1 bytes @ 0x0
  5608                           
  5609  0076                     ?_i2c1_driver_restart:	
  5610                           ; 1 bytes @ 0x0
  5611                           
  5612  0076                     ?_i2c1_driver_stop:	
  5613                           ; 1 bytes @ 0x0
  5614                           
  5615  0076                     ?_i2c1_driver_TXData:	
  5616                           ; 1 bytes @ 0x0
  5617                           
  5618  0076                     ?_i2c1_driver_startRX:	
  5619                           ; 1 bytes @ 0x0
  5620                           
  5621  0076                     ?_i2c1_driver_sendACK:	
  5622                           ; 1 bytes @ 0x0
  5623                           
  5624  0076                     ??_i2c1_driver_sendACK:	
  5625                           ; 1 bytes @ 0x0
  5626                           
  5627  0076                     ?_i2c1_driver_sendNACK:	
  5628                           ; 1 bytes @ 0x0
  5629                           
  5630  0076                     ??_i2c1_driver_isNACK:	
  5631                           ; 1 bytes @ 0x0
  5632                           
  5633  0076                     ?_i2c1_driver_getRXData:	
  5634                           ; 1 bytes @ 0x0
  5635                           
  5636  0076                     ?_mssp1_setIRQ:	
  5637                           ; 1 bytes @ 0x0
  5638                           
  5639  0076                     ??_mssp1_setIRQ:	
  5640                           ; 1 bytes @ 0x0
  5641                           
  5642  0076                     ?_i2c1_driver_clearBusCollision:	
  5643                           ; 1 bytes @ 0x0
  5644                           
  5645  0076                     ??_i2c1_driver_clearBusCollision:	
  5646                           ; 1 bytes @ 0x0
  5647                           
  5648  0076                     ?_PIN_MANAGER_IOC:	
  5649                           ; 1 bytes @ 0x0
  5650                           
  5651  0076                     ??_PIN_MANAGER_IOC:	
  5652                           ; 1 bytes @ 0x0
  5653                           
  5654  0076                     ?_PMD_Initialize:	
  5655                           ; 1 bytes @ 0x0
  5656                           
  5657  0076                     ?_PIN_MANAGER_Initialize:	
  5658                           ; 1 bytes @ 0x0
  5659                           
  5660  0076                     ?_OSCILLATOR_Initialize:	
  5661                           ; 1 bytes @ 0x0
  5662                           
  5663  0076                     ?_WDT_Initialize:	
  5664                           ; 1 bytes @ 0x0
  5665                           
  5666  0076                     ?_SPI2_Initialize:	
  5667                           ; 1 bytes @ 0x0
  5668                           
  5669  0076                     ?_PWM1_Initialize:	
  5670                           ; 1 bytes @ 0x0
  5671                           
  5672  0076                     ?_ADC_Initialize:	
  5673                           ; 1 bytes @ 0x0
  5674                           
  5675  0076                     ?_TMR2_Initialize:	
  5676                           ; 1 bytes @ 0x0
  5677                           
  5678  0076                     ?_EUSART_Initialize:	
  5679                           ; 1 bytes @ 0x0
  5680                           
  5681  0076                     ?_EUSART_Receive_ISR:	
  5682                           ; 1 bytes @ 0x0
  5683                           
  5684  0076                     ?_EUSART_Transmit_ISR:	
  5685                           ; 1 bytes @ 0x0
  5686                           
  5687  0076                     ??_EUSART_Transmit_ISR:	
  5688                           ; 1 bytes @ 0x0
  5689                           
  5690  0076                     ?_EUSART_DefaultFramingErrorHandler:	
  5691                           ; 1 bytes @ 0x0
  5692                           
  5693  0076                     ??_EUSART_DefaultFramingErrorHandler:	
  5694                           ; 1 bytes @ 0x0
  5695                           
  5696  0076                     ?_EUSART_DefaultOverrunErrorHandler:	
  5697                           ; 1 bytes @ 0x0
  5698                           
  5699  0076                     ??_EUSART_DefaultOverrunErrorHandler:	
  5700                           ; 1 bytes @ 0x0
  5701                           
  5702  0076                     ?_EUSART_DefaultErrorHandler:	
  5703                           ; 1 bytes @ 0x0
  5704                           
  5705  0076                     ?_EUSART_RxDataHandler:	
  5706                           ; 1 bytes @ 0x0
  5707                           
  5708  0076                     ??_EUSART_RxDataHandler:	
  5709                           ; 1 bytes @ 0x0
  5710                           
  5711  0076                     ?_Display_Clear:	
  5712                           ; 1 bytes @ 0x0
  5713                           
  5714  0076                     ?_PIR_Sensor:	
  5715                           ; 1 bytes @ 0x0
  5716                           
  5717  0076                     ?_initialize:	
  5718                           ; 1 bytes @ 0x0
  5719                           
  5720  0076                     ?_enableGestureSensor:	
  5721                           ; 1 bytes @ 0x0
  5722                           
  5723  0076                     ?_On_Off:	
  5724                           ; 1 bytes @ 0x0
  5725                           
  5726  0076                     ?_UART_Byte:	
  5727                           ; 1 bytes @ 0x0
  5728                           
  5729  0076                     ?_isGestureAvailable:	
  5730                           ; 1 bytes @ 0x0
  5731                           
  5732  0076                     ?_handleGesture:	
  5733                           ; 1 bytes @ 0x0
  5734                           
  5735  0076                     ?_wireReadDataByte:	
  5736                           ; 1 bytes @ 0x0
  5737                           
  5738  0076                     ?_setLEDDrive:	
  5739                           ; 1 bytes @ 0x0
  5740                           
  5741  0076                     ?_setProximityGain:	
  5742                           ; 1 bytes @ 0x0
  5743                           
  5744  0076                     ?_setAmbientLightGain:	
  5745                           ; 1 bytes @ 0x0
  5746                           
  5747  0076                     ?_setProxIntLowThresh:	
  5748                           ; 1 bytes @ 0x0
  5749                           
  5750  0076                     ?_setProxIntHighThresh:	
  5751                           ; 1 bytes @ 0x0
  5752                           
  5753  0076                     ?_setGestureEnterThresh:	
  5754                           ; 1 bytes @ 0x0
  5755                           
  5756  0076                     ?_setGestureExitThresh:	
  5757                           ; 1 bytes @ 0x0
  5758                           
  5759  0076                     ?_setGestureGain:	
  5760                           ; 1 bytes @ 0x0
  5761                           
  5762  0076                     ?_setGestureLEDDrive:	
  5763                           ; 1 bytes @ 0x0
  5764                           
  5765  0076                     ?_setGestureWaitTime:	
  5766                           ; 1 bytes @ 0x0
  5767                           
  5768  0076                     ?_setGestureIntEnable:	
  5769                           ; 1 bytes @ 0x0
  5770                           
  5771  0076                     ?_getMode:	
  5772                           ; 1 bytes @ 0x0
  5773                           
  5774  0076                     ?_resetGestureParameters:	
  5775                           ; 1 bytes @ 0x0
  5776                           
  5777  0076                     ?_setLEDBoost:	
  5778                           ; 1 bytes @ 0x0
  5779                           
  5780  0076                     ?_setGestureMode:	
  5781                           ; 1 bytes @ 0x0
  5782                           
  5783  0076                     ?_enablePower:	
  5784                           ; 1 bytes @ 0x0
  5785                           
  5786  0076                     ?_processGestureData:	
  5787                           ; 1 bytes @ 0x0
  5788                           
  5789  0076                     ?_decodeGesture:	
  5790                           ; 1 bytes @ 0x0
  5791                           
  5792  0076                     ?_I2C_Start:	
  5793                           ; 1 bytes @ 0x0
  5794                           
  5795  0076                     ?_I2C_Write_Byte:	
  5796                           ; 1 bytes @ 0x0
  5797                           
  5798  0076                     ?_I2C_ReStart:	
  5799                           ; 1 bytes @ 0x0
  5800                           
  5801  0076                     ?_I2C_Read_Byte:	
  5802                           ; 1 bytes @ 0x0
  5803                           
  5804  0076                     ?_I2C_Send_NACK:	
  5805                           ; 1 bytes @ 0x0
  5806                           
  5807  0076                     ?_I2C_Stop:	
  5808                           ; 1 bytes @ 0x0
  5809                           
  5810  0076                     ?_do_I2C_RESET:	
  5811                           ; 1 bytes @ 0x0
  5812                           
  5813  0076                     ??_do_I2C_RESET:	
  5814                           ; 1 bytes @ 0x0
  5815                           
  5816  0076                     ?_do_I2C_IDLE:	
  5817                           ; 1 bytes @ 0x0
  5818                           
  5819  0076                     ??_do_I2C_IDLE:	
  5820                           ; 1 bytes @ 0x0
  5821                           
  5822  0076                     ?_do_I2C_SEND_RESTART_READ:	
  5823                           ; 1 bytes @ 0x0
  5824                           
  5825  0076                     ??_do_I2C_SEND_RESTART_READ:	
  5826                           ; 1 bytes @ 0x0
  5827                           
  5828  0076                     ?_do_I2C_SEND_RESTART_WRITE:	
  5829                           ; 1 bytes @ 0x0
  5830                           
  5831  0076                     ??_do_I2C_SEND_RESTART_WRITE:	
  5832                           ; 1 bytes @ 0x0
  5833                           
  5834  0076                     ?_do_I2C_SEND_RESTART:	
  5835                           ; 1 bytes @ 0x0
  5836                           
  5837  0076                     ??_do_I2C_SEND_RESTART:	
  5838                           ; 1 bytes @ 0x0
  5839                           
  5840  0076                     ?_do_I2C_SEND_STOP:	
  5841                           ; 1 bytes @ 0x0
  5842                           
  5843  0076                     ??_do_I2C_SEND_STOP:	
  5844                           ; 1 bytes @ 0x0
  5845                           
  5846  0076                     ?_do_I2C_SEND_ADR_READ:	
  5847                           ; 1 bytes @ 0x0
  5848                           
  5849  0076                     ??_do_I2C_SEND_ADR_READ:	
  5850                           ; 1 bytes @ 0x0
  5851                           
  5852  0076                     ?_do_I2C_SEND_ADR_WRITE:	
  5853                           ; 1 bytes @ 0x0
  5854                           
  5855  0076                     ??_do_I2C_SEND_ADR_WRITE:	
  5856                           ; 1 bytes @ 0x0
  5857                           
  5858  0076                     ?_do_I2C_RCEN:	
  5859                           ; 1 bytes @ 0x0
  5860                           
  5861  0076                     ??_do_I2C_RCEN:	
  5862                           ; 1 bytes @ 0x0
  5863                           
  5864  0076                     ?_do_I2C_DO_ACK:	
  5865                           ; 1 bytes @ 0x0
  5866                           
  5867  0076                     ??_do_I2C_DO_ACK:	
  5868                           ; 1 bytes @ 0x0
  5869                           
  5870  0076                     ?_do_I2C_DO_NACK_STOP:	
  5871                           ; 1 bytes @ 0x0
  5872                           
  5873  0076                     ??_do_I2C_DO_NACK_STOP:	
  5874                           ; 1 bytes @ 0x0
  5875                           
  5876  0076                     ?_do_I2C_DO_NACK_RESTART:	
  5877                           ; 1 bytes @ 0x0
  5878                           
  5879  0076                     ??_do_I2C_DO_NACK_RESTART:	
  5880                           ; 1 bytes @ 0x0
  5881                           
  5882  0076                     ?_do_I2C_DO_ADDRESS_NACK:	
  5883                           ; 1 bytes @ 0x0
  5884                           
  5885  0076                     ??_do_I2C_DO_ADDRESS_NACK:	
  5886                           ; 1 bytes @ 0x0
  5887                           
  5888  0076                     ?_do_I2C_TX:	
  5889                           ; 1 bytes @ 0x0
  5890                           
  5891  0076                     ??_do_I2C_TX:	
  5892                           ; 1 bytes @ 0x0
  5893                           
  5894  0076                     ?_do_I2C_RX:	
  5895                           ; 1 bytes @ 0x0
  5896                           
  5897  0076                     ??_do_I2C_RX:	
  5898                           ; 1 bytes @ 0x0
  5899                           
  5900  0076                     ?_do_I2C_TX_EMPTY:	
  5901                           ; 1 bytes @ 0x0
  5902                           
  5903  0076                     ??_do_I2C_TX_EMPTY:	
  5904                           ; 1 bytes @ 0x0
  5905                           
  5906  0076                     ?_INTERRUPT_InterruptManager:	
  5907                           ; 1 bytes @ 0x0
  5908                           
  5909  0076                     ?_SYSTEM_Initialize:	
  5910                           ; 1 bytes @ 0x0
  5911                           
  5912  0076                     ?_SPI2_Exchange8bit:	
  5913                           ; 1 bytes @ 0x0
  5914                           
  5915  0076                     ?_main:	
  5916                           ; 1 bytes @ 0x0
  5917                           
  5918  0076                     ?_SPI_Write:	
  5919                           ; 1 bytes @ 0x0
  5920                           
  5921  0076                     ?i1_i2c1_driver_restart:	
  5922                           ; 1 bytes @ 0x0
  5923                           
  5924  0076                     ??i1_i2c1_driver_restart:	
  5925                           ; 1 bytes @ 0x0
  5926                           
  5927  0076                     ?i1_i2c1_driver_stop:	
  5928                           ; 1 bytes @ 0x0
  5929                           
  5930  0076                     ??i1_i2c1_driver_stop:	
  5931                           ; 1 bytes @ 0x0
  5932                           
  5933  0076                     ?i1_i2c1_driver_startRX:	
  5934                           ; 1 bytes @ 0x0
  5935                           
  5936  0076                     ??i1_i2c1_driver_startRX:	
  5937                           ; 1 bytes @ 0x0
  5938                           
  5939  0076                     ?i1_i2c1_driver_getRXData:	
  5940                           ; 1 bytes @ 0x0
  5941                           
  5942  0076                     ??i1_i2c1_driver_getRXData:	
  5943                           ; 1 bytes @ 0x0
  5944                           
  5945  0076                     ?i1_i2c1_driver_TXData:	
  5946                           ; 1 bytes @ 0x0
  5947                           
  5948  0076                     ??i1_i2c1_driver_TXData:	
  5949                           ; 1 bytes @ 0x0
  5950                           
  5951  0076                     ?i1_i2c1_driver_sendNACK:	
  5952                           ; 1 bytes @ 0x0
  5953                           
  5954  0076                     ??i1_i2c1_driver_sendNACK:	
  5955                           ; 1 bytes @ 0x0
  5956                           
  5957  0076                     returnStop@p:	
  5958                           ; 1 bytes @ 0x0
  5959                           
  5960  0076                     returnReset@p:	
  5961                           ; 1 bytes @ 0x0
  5962                           
  5963  0076                     i1i2c1_driver_TXData@d:	
  5964                           ; 1 bytes @ 0x0
  5965                           
  5966                           
  5967                           ; 1 bytes @ 0x0
  5968  0076                     	ds	1
  5969  0077                     ??_returnStop:	
  5970  0077                     ??_returnReset:	
  5971                           ; 1 bytes @ 0x1
  5972                           
  5973  0077                     ??_EUSART_Receive_ISR:	
  5974                           ; 1 bytes @ 0x1
  5975                           
  5976  0077                     ??_EUSART_DefaultErrorHandler:	
  5977                           ; 1 bytes @ 0x1
  5978                           
  5979                           
  5980                           ; 1 bytes @ 0x1
  5981  0077                     	ds	2
  5982  0079                     ??_i2c_ISR:	
  5983                           
  5984                           ; 1 bytes @ 0x3
  5985  0079                     	ds	3
  5986  007C                     ??_INTERRUPT_InterruptManager:	
  5987                           
  5988                           	psect	cstackBANK0
  5989  0020                     __pcstackBANK0:	
  5990                           ; 1 bytes @ 0x6
  5991                           
  5992  0020                     ??_i2c1_driver_open:	
  5993  0020                     ??_i2c1_driver_start:	
  5994                           ; 1 bytes @ 0x0
  5995                           
  5996  0020                     ??_i2c1_driver_restart:	
  5997                           ; 1 bytes @ 0x0
  5998                           
  5999  0020                     ??_i2c1_driver_stop:	
  6000                           ; 1 bytes @ 0x0
  6001                           
  6002  0020                     ??_i2c1_driver_TXData:	
  6003                           ; 1 bytes @ 0x0
  6004                           
  6005  0020                     ??_i2c1_driver_startRX:	
  6006                           ; 1 bytes @ 0x0
  6007                           
  6008  0020                     ??_i2c1_driver_sendNACK:	
  6009                           ; 1 bytes @ 0x0
  6010                           
  6011  0020                     ??_i2c1_driver_getRXData:	
  6012                           ; 1 bytes @ 0x0
  6013                           
  6014  0020                     ??_PMD_Initialize:	
  6015                           ; 1 bytes @ 0x0
  6016                           
  6017  0020                     ??_PIN_MANAGER_Initialize:	
  6018                           ; 1 bytes @ 0x0
  6019                           
  6020  0020                     ??_OSCILLATOR_Initialize:	
  6021                           ; 1 bytes @ 0x0
  6022                           
  6023  0020                     ??_WDT_Initialize:	
  6024                           ; 1 bytes @ 0x0
  6025                           
  6026  0020                     ??_SPI2_Initialize:	
  6027                           ; 1 bytes @ 0x0
  6028                           
  6029  0020                     ??_PWM1_Initialize:	
  6030                           ; 1 bytes @ 0x0
  6031                           
  6032  0020                     ??_ADC_Initialize:	
  6033                           ; 1 bytes @ 0x0
  6034                           
  6035  0020                     ??_TMR2_Initialize:	
  6036                           ; 1 bytes @ 0x0
  6037                           
  6038  0020                     ?_EUSART_SetRxInterruptHandler:	
  6039                           ; 1 bytes @ 0x0
  6040                           
  6041  0020                     ?_EUSART_SetTxInterruptHandler:	
  6042                           ; 1 bytes @ 0x0
  6043                           
  6044  0020                     ?_EUSART_SetFramingErrorHandler:	
  6045                           ; 1 bytes @ 0x0
  6046                           
  6047  0020                     ?_EUSART_SetOverrunErrorHandler:	
  6048                           ; 1 bytes @ 0x0
  6049                           
  6050  0020                     ?_EUSART_SetErrorHandler:	
  6051                           ; 1 bytes @ 0x0
  6052                           
  6053  0020                     ??_PIR_Sensor:	
  6054                           ; 1 bytes @ 0x0
  6055                           
  6056  0020                     ??_resetGestureParameters:	
  6057                           ; 1 bytes @ 0x0
  6058                           
  6059  0020                     ??_decodeGesture:	
  6060                           ; 1 bytes @ 0x0
  6061                           
  6062  0020                     ??_I2C_Start:	
  6063                           ; 1 bytes @ 0x0
  6064                           
  6065  0020                     ??_I2C_ReStart:	
  6066                           ; 1 bytes @ 0x0
  6067                           
  6068  0020                     ??_I2C_Send_NACK:	
  6069                           ; 1 bytes @ 0x0
  6070                           
  6071  0020                     ??_I2C_Stop:	
  6072                           ; 1 bytes @ 0x0
  6073                           
  6074  0020                     ??_i2c1_driver_isBufferFull:	
  6075                           ; 1 bytes @ 0x0
  6076                           
  6077  0020                     ??_SPI2_Exchange8bit:	
  6078                           ; 1 bytes @ 0x0
  6079                           
  6080  0020                     ?_strlen:	
  6081                           ; 1 bytes @ 0x0
  6082                           
  6083  0020                     ?_ADC_GetConversion:	
  6084                           ; 2 bytes @ 0x0
  6085                           
  6086  0020                     ?___wmul:	
  6087                           ; 2 bytes @ 0x0
  6088                           
  6089  0020                     i2c1_driver_TXData@d:	
  6090                           ; 2 bytes @ 0x0
  6091                           
  6092  0020                     SPI2_Exchange8bit@data:	
  6093                           ; 1 bytes @ 0x0
  6094                           
  6095  0020                     EUSART_SetFramingErrorHandler@interruptHandler:	
  6096                           ; 1 bytes @ 0x0
  6097                           
  6098  0020                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  6099                           ; 2 bytes @ 0x0
  6100                           
  6101  0020                     EUSART_SetErrorHandler@interruptHandler:	
  6102                           ; 2 bytes @ 0x0
  6103                           
  6104  0020                     EUSART_SetTxInterruptHandler@interruptHandler:	
  6105                           ; 2 bytes @ 0x0
  6106                           
  6107  0020                     EUSART_SetRxInterruptHandler@interruptHandler:	
  6108                           ; 2 bytes @ 0x0
  6109                           
  6110  0020                     ___wmul@multiplier:	
  6111                           ; 2 bytes @ 0x0
  6112                           
  6113  0020                     strlen@s:	
  6114                           ; 2 bytes @ 0x0
  6115                           
  6116                           
  6117                           ; 2 bytes @ 0x0
  6118  0020                     	ds	1
  6119  0021                     ??_I2C_Write_Byte:	
  6120  0021                     ??_I2C_Read_Byte:	
  6121                           ; 1 bytes @ 0x1
  6122                           
  6123  0021                     ??_SPI_Write:	
  6124                           ; 1 bytes @ 0x1
  6125                           
  6126                           
  6127                           ; 1 bytes @ 0x1
  6128  0021                     	ds	1
  6129  0022                     ??_EUSART_Initialize:	
  6130  0022                     ??_EUSART_SetRxInterruptHandler:	
  6131                           ; 1 bytes @ 0x2
  6132                           
  6133  0022                     ??_EUSART_SetTxInterruptHandler:	
  6134                           ; 1 bytes @ 0x2
  6135                           
  6136  0022                     ??_EUSART_SetFramingErrorHandler:	
  6137                           ; 1 bytes @ 0x2
  6138                           
  6139  0022                     ??_EUSART_SetOverrunErrorHandler:	
  6140                           ; 1 bytes @ 0x2
  6141                           
  6142  0022                     ??_EUSART_SetErrorHandler:	
  6143                           ; 1 bytes @ 0x2
  6144                           
  6145  0022                     ??_strlen:	
  6146                           ; 1 bytes @ 0x2
  6147                           
  6148  0022                     ??_ADC_GetConversion:	
  6149                           ; 1 bytes @ 0x2
  6150                           
  6151  0022                     SPI_Write@incoming:	
  6152                           ; 1 bytes @ 0x2
  6153                           
  6154  0022                     _decodeGesture$1805:	
  6155                           ; 1 bytes @ 0x2
  6156                           
  6157  0022                     ___wmul@multiplicand:	
  6158                           ; 2 bytes @ 0x2
  6159                           
  6160                           
  6161                           ; 2 bytes @ 0x2
  6162  0022                     	ds	1
  6163  0023                     ??_Display_Clear:	
  6164  0023                     ??_SYSTEM_Initialize:	
  6165                           ; 1 bytes @ 0x3
  6166                           
  6167  0023                     ADC_GetConversion@channel:	
  6168                           ; 1 bytes @ 0x3
  6169                           
  6170  0023                     I2C_Write_Byte@Byte:	
  6171                           ; 1 bytes @ 0x3
  6172                           
  6173  0023                     strlen@a:	
  6174                           ; 1 bytes @ 0x3
  6175                           
  6176                           
  6177                           ; 2 bytes @ 0x3
  6178  0023                     	ds	1
  6179  0024                     ??_On_Off:	
  6180  0024                     ??___wmul:	
  6181                           ; 1 bytes @ 0x4
  6182                           
  6183  0024                     _decodeGesture$1806:	
  6184                           ; 1 bytes @ 0x4
  6185                           
  6186  0024                     I2C_Write_Byte@count:	
  6187                           ; 2 bytes @ 0x4
  6188                           
  6189  0024                     ___wmul@product:	
  6190                           ; 2 bytes @ 0x4
  6191                           
  6192                           
  6193                           ; 2 bytes @ 0x4
  6194  0024                     	ds	1
  6195  0025                     ??_UART_Byte:	
  6196  0025                     ?_Display_Name:	
  6197                           ; 1 bytes @ 0x5
  6198                           
  6199  0025                     Display_Name@string1:	
  6200                           ; 1 bytes @ 0x5
  6201                           
  6202                           
  6203                           ; 2 bytes @ 0x5
  6204  0025                     	ds	1
  6205  0026                     ??_wireReadDataByte:	
  6206  0026                     ?_wireWriteDataByte:	
  6207                           ; 1 bytes @ 0x6
  6208                           
  6209  0026                     ?_wireReadDataBlock:	
  6210                           ; 2 bytes @ 0x6
  6211                           
  6212  0026                     ?___awdiv:	
  6213                           ; 2 bytes @ 0x6
  6214                           
  6215  0026                     wireWriteDataByte@val:	
  6216                           ; 2 bytes @ 0x6
  6217                           
  6218  0026                     UART_Byte@tempOn:	
  6219                           ; 1 bytes @ 0x6
  6220                           
  6221  0026                     _decodeGesture$1807:	
  6222                           ; 2 bytes @ 0x6
  6223                           
  6224  0026                     wireReadDataBlock@val:	
  6225                           ; 2 bytes @ 0x6
  6226                           
  6227  0026                     ___awdiv@divisor:	
  6228                           ; 2 bytes @ 0x6
  6229                           
  6230                           
  6231                           ; 2 bytes @ 0x6
  6232  0026                     	ds	1
  6233  0027                     ??_Display_Name:	
  6234  0027                     wireReadDataByte@reg:	
  6235                           ; 1 bytes @ 0x7
  6236                           
  6237  0027                     On_Off@val:	
  6238                           ; 1 bytes @ 0x7
  6239                           
  6240                           
  6241                           ; 2 bytes @ 0x7
  6242  0027                     	ds	1
  6243  0028                     wireReadDataByte@val:	
  6244  0028                     Display_Name@length:	
  6245                           ; 1 bytes @ 0x8
  6246                           
  6247  0028                     UART_Byte@tempProx:	
  6248                           ; 2 bytes @ 0x8
  6249                           
  6250  0028                     _decodeGesture$1808:	
  6251                           ; 2 bytes @ 0x8
  6252                           
  6253  0028                     wireReadDataBlock@len:	
  6254                           ; 2 bytes @ 0x8
  6255                           
  6256  0028                     ___awdiv@dividend:	
  6257                           ; 2 bytes @ 0x8
  6258                           
  6259                           
  6260                           ; 2 bytes @ 0x8
  6261  0028                     	ds	1
  6262  0029                     ??_isGestureAvailable:	
  6263  0029                     ??_wireWriteDataByte:	
  6264                           ; 1 bytes @ 0x9
  6265                           
  6266  0029                     ??_getMode:	
  6267                           ; 1 bytes @ 0x9
  6268                           
  6269  0029                     wireWriteDataByte@reg:	
  6270                           ; 1 bytes @ 0x9
  6271                           
  6272                           
  6273                           ; 1 bytes @ 0x9
  6274  0029                     	ds	1
  6275  002A                     ??_setLEDDrive:	
  6276  002A                     ??_setProximityGain:	
  6277                           ; 1 bytes @ 0xA
  6278                           
  6279  002A                     ??_setAmbientLightGain:	
  6280                           ; 1 bytes @ 0xA
  6281                           
  6282  002A                     ??_setProxIntLowThresh:	
  6283                           ; 1 bytes @ 0xA
  6284                           
  6285  002A                     ??_setProxIntHighThresh:	
  6286                           ; 1 bytes @ 0xA
  6287                           
  6288  002A                     ?_setLightIntLowThreshold:	
  6289                           ; 1 bytes @ 0xA
  6290                           
  6291  002A                     ?_setLightIntHighThreshold:	
  6292                           ; 1 bytes @ 0xA
  6293                           
  6294  002A                     ??_setGestureEnterThresh:	
  6295                           ; 1 bytes @ 0xA
  6296                           
  6297  002A                     ??_setGestureExitThresh:	
  6298                           ; 1 bytes @ 0xA
  6299                           
  6300  002A                     ??_setGestureGain:	
  6301                           ; 1 bytes @ 0xA
  6302                           
  6303  002A                     ??_setGestureLEDDrive:	
  6304                           ; 1 bytes @ 0xA
  6305                           
  6306  002A                     ??_setGestureWaitTime:	
  6307                           ; 1 bytes @ 0xA
  6308                           
  6309  002A                     ??_setGestureIntEnable:	
  6310                           ; 1 bytes @ 0xA
  6311                           
  6312  002A                     ??_setLEDBoost:	
  6313                           ; 1 bytes @ 0xA
  6314                           
  6315  002A                     ??_setGestureMode:	
  6316                           ; 1 bytes @ 0xA
  6317                           
  6318  002A                     ??_wireReadDataBlock:	
  6319                           ; 1 bytes @ 0xA
  6320                           
  6321  002A                     ??___awdiv:	
  6322                           ; 1 bytes @ 0xA
  6323                           
  6324  002A                     getMode@enable_value:	
  6325                           ; 1 bytes @ 0xA
  6326                           
  6327  002A                     isGestureAvailable@val:	
  6328                           ; 1 bytes @ 0xA
  6329                           
  6330  002A                     Display_Name@i:	
  6331                           ; 1 bytes @ 0xA
  6332                           
  6333  002A                     UART_Byte@tempName:	
  6334                           ; 2 bytes @ 0xA
  6335                           
  6336  002A                     setLightIntLowThreshold@threshold:	
  6337                           ; 2 bytes @ 0xA
  6338                           
  6339  002A                     setLightIntHighThreshold@threshold:	
  6340                           ; 2 bytes @ 0xA
  6341                           
  6342  002A                     _decodeGesture$1809:	
  6343                           ; 2 bytes @ 0xA
  6344                           
  6345                           
  6346                           ; 2 bytes @ 0xA
  6347  002A                     	ds	1
  6348  002B                     ?_setMode:	
  6349  002B                     setMode@enable:	
  6350                           ; 1 bytes @ 0xB
  6351                           
  6352  002B                     setAmbientLightGain@drive:	
  6353                           ; 1 bytes @ 0xB
  6354                           
  6355  002B                     setProxIntLowThresh@threshold:	
  6356                           ; 1 bytes @ 0xB
  6357                           
  6358  002B                     setProxIntHighThresh@threshold:	
  6359                           ; 1 bytes @ 0xB
  6360                           
  6361  002B                     setGestureEnterThresh@threshold:	
  6362                           ; 1 bytes @ 0xB
  6363                           
  6364  002B                     setGestureExitThresh@threshold:	
  6365                           ; 1 bytes @ 0xB
  6366                           
  6367  002B                     setGestureWaitTime@time:	
  6368                           ; 1 bytes @ 0xB
  6369                           
  6370  002B                     setGestureIntEnable@val:	
  6371                           ; 1 bytes @ 0xB
  6372                           
  6373  002B                     setGestureMode@mode:	
  6374                           ; 1 bytes @ 0xB
  6375                           
  6376  002B                     ___awdiv@counter:	
  6377                           ; 1 bytes @ 0xB
  6378                           
  6379                           
  6380                           ; 1 bytes @ 0xB
  6381  002B                     	ds	1
  6382  002C                     ??_setMode:	
  6383  002C                     ??_setLightIntLowThreshold:	
  6384                           ; 1 bytes @ 0xC
  6385                           
  6386  002C                     ??_setLightIntHighThreshold:	
  6387                           ; 1 bytes @ 0xC
  6388                           
  6389  002C                     setLEDDrive@val:	
  6390                           ; 1 bytes @ 0xC
  6391                           
  6392  002C                     setProximityGain@val:	
  6393                           ; 1 bytes @ 0xC
  6394                           
  6395  002C                     setAmbientLightGain@val:	
  6396                           ; 1 bytes @ 0xC
  6397                           
  6398  002C                     setGestureGain@val:	
  6399                           ; 1 bytes @ 0xC
  6400                           
  6401  002C                     setGestureLEDDrive@val:	
  6402                           ; 1 bytes @ 0xC
  6403                           
  6404  002C                     setGestureWaitTime@val:	
  6405                           ; 1 bytes @ 0xC
  6406                           
  6407  002C                     setGestureIntEnable@enable:	
  6408                           ; 1 bytes @ 0xC
  6409                           
  6410  002C                     setLEDBoost@val:	
  6411                           ; 1 bytes @ 0xC
  6412                           
  6413  002C                     setGestureMode@val:	
  6414                           ; 1 bytes @ 0xC
  6415                           
  6416  002C                     ___awdiv@sign:	
  6417                           ; 1 bytes @ 0xC
  6418                           
  6419  002C                     UART_Byte@tempBright:	
  6420                           ; 1 bytes @ 0xC
  6421                           
  6422  002C                     _decodeGesture$1810:	
  6423                           ; 2 bytes @ 0xC
  6424                           
  6425                           
  6426                           ; 2 bytes @ 0xC
  6427  002C                     	ds	1
  6428  002D                     setLEDDrive@drive:	
  6429  002D                     setProximityGain@drive:	
  6430                           ; 1 bytes @ 0xD
  6431                           
  6432  002D                     setLightIntLowThreshold@val_low:	
  6433                           ; 1 bytes @ 0xD
  6434                           
  6435  002D                     setLightIntHighThreshold@val_low:	
  6436                           ; 1 bytes @ 0xD
  6437                           
  6438  002D                     setGestureGain@gain:	
  6439                           ; 1 bytes @ 0xD
  6440                           
  6441  002D                     setGestureLEDDrive@drive:	
  6442                           ; 1 bytes @ 0xD
  6443                           
  6444  002D                     setLEDBoost@boost:	
  6445                           ; 1 bytes @ 0xD
  6446                           
  6447  002D                     ___awdiv@quotient:	
  6448                           ; 1 bytes @ 0xD
  6449                           
  6450                           
  6451                           ; 2 bytes @ 0xD
  6452  002D                     	ds	1
  6453  002E                     setMode@reg_val:	
  6454  002E                     setLightIntLowThreshold@val_high:	
  6455                           ; 1 bytes @ 0xE
  6456                           
  6457  002E                     setLightIntHighThreshold@val_high:	
  6458                           ; 1 bytes @ 0xE
  6459                           
  6460  002E                     _decodeGesture$1811:	
  6461                           ; 1 bytes @ 0xE
  6462                           
  6463  002E                     UART_Byte@bits:	
  6464                           ; 2 bytes @ 0xE
  6465                           
  6466                           
  6467                           ; 4 bytes @ 0xE
  6468  002E                     	ds	1
  6469  002F                     ??_processGestureData:	
  6470  002F                     setMode@mode:	
  6471                           ; 1 bytes @ 0xF
  6472                           
  6473  002F                     wireReadDataBlock@reg:	
  6474                           ; 1 bytes @ 0xF
  6475                           
  6476                           
  6477                           ; 1 bytes @ 0xF
  6478  002F                     	ds	1
  6479  0030                     ??_initialize:	
  6480  0030                     ??_enableGestureSensor:	
  6481                           ; 1 bytes @ 0x10
  6482                           
  6483  0030                     ??_enablePower:	
  6484                           ; 1 bytes @ 0x10
  6485                           
  6486  0030                     wireReadDataBlock@j:	
  6487                           ; 1 bytes @ 0x10
  6488                           
  6489  0030                     _decodeGesture$1812:	
  6490                           ; 1 bytes @ 0x10
  6491                           
  6492                           
  6493                           ; 2 bytes @ 0x10
  6494  0030                     	ds	1
  6495  0031                     initialize@id:	
  6496  0031                     enableGestureSensor@interrupts:	
  6497                           ; 1 bytes @ 0x11
  6498                           
  6499  0031                     processGestureData@ud_ratio_first:	
  6500                           ; 1 bytes @ 0x11
  6501                           
  6502                           
  6503                           ; 2 bytes @ 0x11
  6504  0031                     	ds	1
  6505  0032                     UART_Byte@i:	
  6506                           
  6507                           ; 2 bytes @ 0x12
  6508  0032                     	ds	1
  6509  0033                     processGestureData@lr_ratio_first:	
  6510                           
  6511                           ; 2 bytes @ 0x13
  6512  0033                     	ds	2
  6513  0035                     processGestureData@ud_ratio_last:	
  6514                           
  6515                           ; 2 bytes @ 0x15
  6516  0035                     	ds	2
  6517  0037                     processGestureData@lr_ratio_last:	
  6518                           
  6519                           ; 2 bytes @ 0x17
  6520  0037                     	ds	2
  6521  0039                     _processGestureData$1800:	
  6522                           
  6523                           ; 2 bytes @ 0x19
  6524  0039                     	ds	2
  6525  003B                     _processGestureData$1801:	
  6526                           
  6527                           ; 2 bytes @ 0x1B
  6528  003B                     	ds	2
  6529  003D                     _processGestureData$1802:	
  6530                           
  6531                           ; 2 bytes @ 0x1D
  6532  003D                     	ds	2
  6533  003F                     _processGestureData$1803:	
  6534                           
  6535                           ; 2 bytes @ 0x1F
  6536  003F                     	ds	2
  6537  0041                     processGestureData@u_last:	
  6538                           
  6539                           ; 1 bytes @ 0x21
  6540  0041                     	ds	1
  6541  0042                     processGestureData@d_last:	
  6542                           
  6543                           ; 1 bytes @ 0x22
  6544  0042                     	ds	1
  6545  0043                     processGestureData@l_last:	
  6546                           
  6547                           ; 1 bytes @ 0x23
  6548  0043                     	ds	1
  6549  0044                     processGestureData@r_last:	
  6550                           
  6551                           ; 1 bytes @ 0x24
  6552  0044                     	ds	1
  6553  0045                     processGestureData@u_first:	
  6554                           
  6555                           ; 1 bytes @ 0x25
  6556  0045                     	ds	1
  6557  0046                     processGestureData@d_first:	
  6558                           
  6559                           ; 1 bytes @ 0x26
  6560  0046                     	ds	1
  6561  0047                     processGestureData@l_first:	
  6562                           
  6563                           ; 1 bytes @ 0x27
  6564  0047                     	ds	1
  6565  0048                     processGestureData@r_first:	
  6566                           
  6567                           ; 1 bytes @ 0x28
  6568  0048                     	ds	1
  6569  0049                     processGestureData@ud_delta:	
  6570                           
  6571                           ; 2 bytes @ 0x29
  6572  0049                     	ds	2
  6573  004B                     processGestureData@lr_delta:	
  6574                           
  6575                           ; 2 bytes @ 0x2B
  6576  004B                     	ds	2
  6577  004D                     processGestureData@i:	
  6578                           
  6579                           ; 2 bytes @ 0x2D
  6580  004D                     	ds	2
  6581  004F                     ?_readGesture:	
  6582                           
  6583                           ; 2 bytes @ 0x2F
  6584  004F                     	ds	2
  6585  0051                     ??_readGesture:	
  6586                           
  6587                           ; 1 bytes @ 0x31
  6588  0051                     	ds	2
  6589  0053                     readGesture@motion:	
  6590                           
  6591                           ; 2 bytes @ 0x33
  6592  0053                     	ds	2
  6593  0055                     readGesture@gstatus:	
  6594                           
  6595                           ; 1 bytes @ 0x35
  6596  0055                     	ds	1
  6597  0056                     readGesture@bytes_read:	
  6598                           
  6599                           ; 2 bytes @ 0x36
  6600  0056                     	ds	2
  6601  0058                     readGesture@fifo_level:	
  6602                           
  6603                           ; 1 bytes @ 0x38
  6604  0058                     	ds	1
  6605  0059                     readGesture@i:	
  6606                           
  6607                           ; 2 bytes @ 0x39
  6608  0059                     	ds	2
  6609  005B                     ??_handleGesture:	
  6610                           
  6611                           ; 1 bytes @ 0x3B
  6612  005B                     	ds	1
  6613  005C                     ??_main:	
  6614                           
  6615                           	psect	maintext
  6616  0D5F                     __pmaintext:	
  6617                           ; 1 bytes @ 0x3C
  6618 ;;
  6619 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  6620 ;;
  6621 ;; *************** function _main *****************
  6622 ;; Defined at:
  6623 ;;		line 93 in file "main.c"
  6624 ;; Parameters:    Size  Location     Type
  6625 ;;		None
  6626 ;; Auto vars:     Size  Location     Type
  6627 ;;  count           2    0        unsigned int 
  6628 ;;  temp            2    0        int 
  6629 ;;  startSystem     1    0        _Bool 
  6630 ;; Return value:  Size  Location     Type
  6631 ;;                  1    wreg      void 
  6632 ;; Registers used:
  6633 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6634 ;; Tracked objects:
  6635 ;;		On entry : B1F/0
  6636 ;;		On exit  : 0/0
  6637 ;;		Unchanged: 0/0
  6638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6639 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6640 ;;      Locals:         0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0
  6641 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6642 ;;      Totals:         0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0
  6643 ;;Total ram usage:        2 bytes
  6644 ;; Hardware stack levels required when called:   12
  6645 ;; This function calls:
  6646 ;;		_Display_Clear
  6647 ;;		_Display_Name
  6648 ;;		_On_Off
  6649 ;;		_PIR_Sensor
  6650 ;;		_SYSTEM_Initialize
  6651 ;;		_UART_Byte
  6652 ;;		_enableGestureSensor
  6653 ;;		_handleGesture
  6654 ;;		_initialize
  6655 ;;		_isGestureAvailable
  6656 ;; This function is called by:
  6657 ;;		Startup code after reset
  6658 ;; This function uses a non-reentrant model
  6659 ;;
  6660                           
  6661                           
  6662                           ;psect for function _main
  6663  0D5F                     _main:	
  6664                           
  6665                           ;main.c: 96:     SYSTEM_Initialize();
  6666                           
  6667                           ;incstack = 0
  6668                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6669  0D5F  3189  21B1  318D   	fcall	_SYSTEM_Initialize
  6670                           
  6671                           ;main.c: 102:     (INTCONbits.GIE = 1);
  6672  0D62  178B               	bsf	11,7	;volatile
  6673                           
  6674                           ;main.c: 105:     (INTCONbits.PEIE = 1);
  6675  0D63  170B               	bsf	11,6	;volatile
  6676                           
  6677                           ;main.c: 108:     Display_Clear();
  6678  0D64  3188  20E6  318D   	fcall	_Display_Clear
  6679                           
  6680                           ;main.c: 110:     if(PIR_Sensor()) {
  6681  0D67  3188  20D7  318D   	fcall	_PIR_Sensor
  6682  0D6A  3A00               	xorlw	0
  6683  0D6B  1903               	skipnz
  6684  0D6C  2D74               	goto	l7704
  6685                           
  6686                           ;main.c: 111:         if(initialize()){
  6687  0D6D  3184  24F2  318D   	fcall	_initialize
  6688                           
  6689                           ;main.c: 114:         if(enableGestureSensor(0)){
  6690  0D70  3000               	movlw	0
  6691  0D71  3187  277B  318D   	fcall	_enableGestureSensor
  6692  0D74                     l7704:	
  6693                           ;main.c: 116:     }
  6694                           
  6695                           
  6696                           ;main.c: 122:     {;main.c: 123:         On_Off();
  6697  0D74  318D  25E4  318D   	fcall	_On_Off
  6698                           
  6699                           ;main.c: 124:         UART_Byte();
  6700  0D77  318F  27A8  318D   	fcall	_UART_Byte
  6701                           
  6702                           ;main.c: 125:         if(on) {
  6703  0D7A  0020               	movlb	0	; select bank0
  6704  0D7B  085C               	movf	_on,w
  6705  0D7C  045D               	iorwf	_on+1,w
  6706  0D7D  1903               	btfsc	3,2
  6707  0D7E  2D74               	goto	l7704
  6708                           
  6709                           ;main.c: 126:             if(PIR_Sensor()) {
  6710  0D7F  3188  20D7  318D   	fcall	_PIR_Sensor
  6711  0D82  3A00               	xorlw	0
  6712  0D83  1903               	skipnz
  6713  0D84  2D74               	goto	l7704
  6714                           
  6715                           ;main.c: 127:                 if(start == 1) {
  6716  0D85  0020               	movlb	0	; select bank0
  6717  0D86  036F               	decf	_start,w
  6718  0D87  1D03               	btfss	3,2
  6719  0D88  2D97               	goto	l7718
  6720                           
  6721                           ;main.c: 128:                     Display_Name(names[name]);
  6722  0D89  3560               	lslf	_name,w
  6723  0D8A  3ECD               	addlw	(low (_names| (0+256)))& (0+255)
  6724  0D8B  0086               	movwf	6
  6725  0D8C  3001               	movlw	1	; select bank3/4
  6726  0D8D  0087               	movwf	7
  6727  0D8E  3F40               	moviw [0]fsr1
  6728  0D8F  00A5               	movwf	Display_Name@string1
  6729  0D90  3F41               	moviw [1]fsr1
  6730  0D91  00A6               	movwf	Display_Name@string1+1
  6731  0D92  318D  251E  318D   	fcall	_Display_Name
  6732                           
  6733                           ;main.c: 129:                     start = 0;
  6734  0D95  0020               	movlb	0	; select bank0
  6735  0D96  01EF               	clrf	_start
  6736  0D97                     l7718:	
  6737                           
  6738                           ;main.c: 133:                 if( isGestureAvailable()){
  6739  0D97  3188  20F7  318D   	fcall	_isGestureAvailable
  6740  0D9A  3A00               	xorlw	0
  6741  0D9B  1903               	skipnz
  6742  0D9C  2D74               	goto	l7704
  6743                           
  6744                           ;main.c: 134:                     handleGesture();
  6745  0D9D  3186  26FB  318D   	fcall	_handleGesture
  6746  0DA0  2D74               	goto	l7704
  6747  0DA1                     __end_of_main:	
  6748                           
  6749                           	psect	text1
  6750  04F2                     __ptext1:	
  6751 ;; *************** function _initialize *****************
  6752 ;; Defined at:
  6753 ;;		line 20 in file "APDS9960.c"
  6754 ;; Parameters:    Size  Location     Type
  6755 ;;		None
  6756 ;; Auto vars:     Size  Location     Type
  6757 ;;  id              1   17[BANK0 ] unsigned char 
  6758 ;; Return value:  Size  Location     Type
  6759 ;;                  1    wreg      _Bool 
  6760 ;; Registers used:
  6761 ;;		wreg, status,2, status,0, pclath, cstack
  6762 ;; Tracked objects:
  6763 ;;		On entry : 0/0
  6764 ;;		On exit  : 0/0
  6765 ;;		Unchanged: 0/0
  6766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6768 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6769 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6770 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6771 ;;Total ram usage:        2 bytes
  6772 ;; Hardware stack levels used:    1
  6773 ;; Hardware stack levels required when called:   10
  6774 ;; This function calls:
  6775 ;;		_i2c1_driver_open
  6776 ;;		_setAmbientLightGain
  6777 ;;		_setGestureEnterThresh
  6778 ;;		_setGestureExitThresh
  6779 ;;		_setGestureGain
  6780 ;;		_setGestureIntEnable
  6781 ;;		_setGestureLEDDrive
  6782 ;;		_setGestureWaitTime
  6783 ;;		_setLEDDrive
  6784 ;;		_setLightIntHighThreshold
  6785 ;;		_setLightIntLowThreshold
  6786 ;;		_setMode
  6787 ;;		_setProxIntHighThresh
  6788 ;;		_setProxIntLowThresh
  6789 ;;		_setProximityGain
  6790 ;;		_wireReadDataByte
  6791 ;;		_wireWriteDataByte
  6792 ;; This function is called by:
  6793 ;;		_main
  6794 ;; This function uses a non-reentrant model
  6795 ;;
  6796                           
  6797                           
  6798                           ;psect for function _initialize
  6799  04F2                     _initialize:	
  6800                           
  6801                           ;APDS9960.c: 25:     i2c1_driver_open();
  6802                           
  6803                           ;incstack = 0
  6804                           ; Regs used in _initialize: [wreg+status,2+status,0+pclath+cstack]
  6805  04F2  3188  2099  3184   	fcall	_i2c1_driver_open
  6806                           
  6807                           ;APDS9960.c: 31:     id = wireReadDataByte(0x92);
  6808  04F5  3092               	movlw	146
  6809  04F6  318A  225B  3184   	fcall	_wireReadDataByte
  6810  04F9  0020               	movlb	0	; select bank0
  6811  04FA  00B0               	movwf	??_initialize
  6812  04FB  0830               	movf	??_initialize,w
  6813  04FC  00B1               	movwf	initialize@id
  6814                           
  6815                           ;APDS9960.c: 33:     if( !(id == 0xAB ||id == 0x9C ) )
  6816  04FD  30AB               	movlw	171
  6817  04FE  0631               	xorwf	initialize@id,w
  6818  04FF  1903               	btfsc	3,2
  6819  0500  2D07               	goto	l7336
  6820  0501  309C               	movlw	156
  6821  0502  0631               	xorwf	initialize@id,w
  6822  0503  1903               	btfsc	3,2
  6823  0504  2D07               	goto	l7336
  6824  0505                     l7332:	
  6825                           
  6826                           ;APDS9960.c: 34:     {;APDS9960.c: 35:      return 0;
  6827  0505  3000               	movlw	0
  6828  0506  0008               	return
  6829  0507                     l7336:	
  6830                           
  6831                           ;APDS9960.c: 39:     setMode(7, 0);
  6832  0507  01AB               	clrf	setMode@enable
  6833  0508  3007               	movlw	7
  6834  0509  318F  2707  3184   	fcall	_setMode
  6835                           
  6836                           ;APDS9960.c: 41:     wireWriteDataByte(0x81, 219);
  6837  050C  30DB               	movlw	219
  6838  050D  0020               	movlb	0	; select bank0
  6839  050E  00B0               	movwf	??_initialize
  6840  050F  0830               	movf	??_initialize,w
  6841  0510  00A6               	movwf	wireWriteDataByte@val
  6842  0511  3081               	movlw	129
  6843  0512  3189  21CC  3184   	fcall	_wireWriteDataByte
  6844                           
  6845                           ;APDS9960.c: 42:     wireWriteDataByte(0x83, 246);
  6846  0515  30F6               	movlw	246
  6847  0516  0020               	movlb	0	; select bank0
  6848  0517  00B0               	movwf	??_initialize
  6849  0518  0830               	movf	??_initialize,w
  6850  0519  00A6               	movwf	wireWriteDataByte@val
  6851  051A  3083               	movlw	131
  6852  051B  3189  21CC  3184   	fcall	_wireWriteDataByte
  6853                           
  6854                           ;APDS9960.c: 43:     wireWriteDataByte(0x8E, 0x87);
  6855  051E  3087               	movlw	135
  6856  051F  0020               	movlb	0	; select bank0
  6857  0520  00B0               	movwf	??_initialize
  6858  0521  0830               	movf	??_initialize,w
  6859  0522  00A6               	movwf	wireWriteDataByte@val
  6860  0523  308E               	movlw	142
  6861  0524  3189  21CC  3184   	fcall	_wireWriteDataByte
  6862                           
  6863                           ;APDS9960.c: 44:     wireWriteDataByte(0x9D, 0) ;
  6864  0527  0020               	movlb	0	; select bank0
  6865  0528  01A6               	clrf	wireWriteDataByte@val
  6866  0529  309D               	movlw	157
  6867  052A  3189  21CC  3184   	fcall	_wireWriteDataByte
  6868                           
  6869                           ;APDS9960.c: 45:     wireWriteDataByte(0x9E, 0) ;
  6870  052D  0020               	movlb	0	; select bank0
  6871  052E  01A6               	clrf	wireWriteDataByte@val
  6872  052F  309E               	movlw	158
  6873  0530  3189  21CC  3184   	fcall	_wireWriteDataByte
  6874                           
  6875                           ;APDS9960.c: 46:     wireWriteDataByte(0x8D, 0x60) ;
  6876  0533  3060               	movlw	96
  6877  0534  0020               	movlb	0	; select bank0
  6878  0535  00B0               	movwf	??_initialize
  6879  0536  0830               	movf	??_initialize,w
  6880  0537  00A6               	movwf	wireWriteDataByte@val
  6881  0538  308D               	movlw	141
  6882  0539  3189  21CC  3184   	fcall	_wireWriteDataByte
  6883                           
  6884                           ;APDS9960.c: 47:     setLEDDrive(0);
  6885  053C  3000               	movlw	0
  6886  053D  318B  2341  3184   	fcall	_setLEDDrive
  6887                           
  6888                           ;APDS9960.c: 48:     setProximityGain(2);
  6889  0540  3002               	movlw	2
  6890  0541  318B  236A  3184   	fcall	_setProximityGain
  6891                           
  6892                           ;APDS9960.c: 49:     setAmbientLightGain(1);
  6893  0544  3001               	movlw	1
  6894  0545  3187  27DF  3184   	fcall	_setAmbientLightGain
  6895                           
  6896                           ;APDS9960.c: 51:     if( !setProxIntLowThresh(0) ) {
  6897  0548  3000               	movlw	0
  6898  0549  3189  2143  3184   	fcall	_setProxIntLowThresh
  6899  054C  3A00               	xorlw	0
  6900  054D  1903               	btfsc	3,2
  6901  054E  2D05               	goto	l7332
  6902                           
  6903                           ;APDS9960.c: 54:     if( !setProxIntHighThresh(50) ) {
  6904  054F  3032               	movlw	50
  6905  0550  3189  2130  3184   	fcall	_setProxIntHighThresh
  6906  0553  3A00               	xorlw	0
  6907  0554  1903               	btfsc	3,2
  6908  0555  2D05               	goto	l7332
  6909                           
  6910                           ;APDS9960.c: 59:     if( !setLightIntLowThreshold(0xFFFF) ) {
  6911  0556  30FF               	movlw	255
  6912  0557  0020               	movlb	0	; select bank0
  6913  0558  00AA               	movwf	setLightIntLowThreshold@threshold
  6914  0559  30FF               	movlw	255
  6915  055A  00AB               	movwf	setLightIntLowThreshold@threshold+1
  6916  055B  318B  231A  3184   	fcall	_setLightIntLowThreshold
  6917  055E  3A00               	xorlw	0
  6918  055F  1903               	btfsc	3,2
  6919  0560  2D05               	goto	l7332
  6920                           
  6921                           ;APDS9960.c: 62:     if( !setLightIntHighThreshold(0) ) {
  6922  0561  3000               	movlw	0
  6923  0562  0020               	movlb	0	; select bank0
  6924  0563  00AA               	movwf	setLightIntHighThreshold@threshold
  6925  0564  00AB               	movwf	setLightIntHighThreshold@threshold+1
  6926  0565  318A  22F3  3184   	fcall	_setLightIntHighThreshold
  6927  0568  3A00               	xorlw	0
  6928  0569  1903               	btfsc	3,2
  6929  056A  2D05               	goto	l7332
  6930                           
  6931                           ;APDS9960.c: 66:     if( !wireWriteDataByte(0x8C, 0x11) ) {
  6932  056B  3011               	movlw	17
  6933  056C  0020               	movlb	0	; select bank0
  6934  056D  00B0               	movwf	??_initialize
  6935  056E  0830               	movf	??_initialize,w
  6936  056F  00A6               	movwf	wireWriteDataByte@val
  6937  0570  308C               	movlw	140
  6938  0571  3189  21CC  3184   	fcall	_wireWriteDataByte
  6939  0574  0020               	movlb	0	; select bank0
  6940  0575  0826               	movf	?_wireWriteDataByte,w
  6941  0576  0427               	iorwf	?_wireWriteDataByte+1,w
  6942  0577  1903               	btfsc	3,2
  6943  0578  2D05               	goto	l7332
  6944                           
  6945                           ;APDS9960.c: 71:     if( !wireWriteDataByte(0x90, 0x01) ) {
  6946  0579  01A6               	clrf	wireWriteDataByte@val
  6947  057A  0AA6               	incf	wireWriteDataByte@val,f
  6948  057B  3090               	movlw	144
  6949  057C  3189  21CC  3184   	fcall	_wireWriteDataByte
  6950  057F  0020               	movlb	0	; select bank0
  6951  0580  0826               	movf	?_wireWriteDataByte,w
  6952  0581  0427               	iorwf	?_wireWriteDataByte+1,w
  6953  0582  1903               	btfsc	3,2
  6954  0583  2D05               	goto	l7332
  6955                           
  6956                           ;APDS9960.c: 74:     if( !wireWriteDataByte(0x9F, 0) ) {
  6957  0584  01A6               	clrf	wireWriteDataByte@val
  6958  0585  309F               	movlw	159
  6959  0586  3189  21CC  3184   	fcall	_wireWriteDataByte
  6960  0589  0020               	movlb	0	; select bank0
  6961  058A  0826               	movf	?_wireWriteDataByte,w
  6962  058B  0427               	iorwf	?_wireWriteDataByte+1,w
  6963  058C  1903               	btfsc	3,2
  6964  058D  2D05               	goto	l7332
  6965                           
  6966                           ;APDS9960.c: 78:     if( !setGestureEnterThresh(40) ) {
  6967  058E  3028               	movlw	40
  6968  058F  3189  210A  3184   	fcall	_setGestureEnterThresh
  6969  0592  3A00               	xorlw	0
  6970  0593  1903               	btfsc	3,2
  6971  0594  2D05               	goto	l7332
  6972                           
  6973                           ;APDS9960.c: 82:     if( !setGestureExitThresh(30) ) {
  6974  0595  301E               	movlw	30
  6975  0596  3189  211D  3184   	fcall	_setGestureExitThresh
  6976  0599  3A00               	xorlw	0
  6977  059A  1903               	btfsc	3,2
  6978  059B  2D05               	goto	l7332
  6979                           
  6980                           ;APDS9960.c: 85:     if( !wireWriteDataByte(0xA2, 0x40) ) {
  6981  059C  3040               	movlw	64
  6982  059D  0020               	movlb	0	; select bank0
  6983  059E  00B0               	movwf	??_initialize
  6984  059F  0830               	movf	??_initialize,w
  6985  05A0  00A6               	movwf	wireWriteDataByte@val
  6986  05A1  30A2               	movlw	162
  6987  05A2  3189  21CC  3184   	fcall	_wireWriteDataByte
  6988  05A5  0020               	movlb	0	; select bank0
  6989  05A6  0826               	movf	?_wireWriteDataByte,w
  6990  05A7  0427               	iorwf	?_wireWriteDataByte+1,w
  6991  05A8  1903               	btfsc	3,2
  6992  05A9  2D05               	goto	l7332
  6993                           
  6994                           ;APDS9960.c: 88:     if( !setGestureGain(2) ) {
  6995  05AA  3002               	movlw	2
  6996  05AB  318C  244C  3184   	fcall	_setGestureGain
  6997  05AE  3A00               	xorlw	0
  6998  05AF  1903               	btfsc	3,2
  6999  05B0  2D05               	goto	l7332
  7000                           
  7001                           ;APDS9960.c: 91:     if( !setGestureLEDDrive(0) ) {
  7002  05B1  3000               	movlw	0
  7003  05B2  318C  247E  3184   	fcall	_setGestureLEDDrive
  7004  05B5  3A00               	xorlw	0
  7005  05B6  1903               	btfsc	3,2
  7006  05B7  2D05               	goto	l7332
  7007                           
  7008                           ;APDS9960.c: 95:     if( !setGestureWaitTime(1) ) {
  7009  05B8  3001               	movlw	1
  7010  05B9  318A  22CC  3184   	fcall	_setGestureWaitTime
  7011  05BC  3A00               	xorlw	0
  7012  05BD  1903               	btfsc	3,2
  7013  05BE  2D05               	goto	l7332
  7014                           
  7015                           ;APDS9960.c: 98:     if( !wireWriteDataByte(0xA4, 0) ) {
  7016  05BF  0020               	movlb	0	; select bank0
  7017  05C0  01A6               	clrf	wireWriteDataByte@val
  7018  05C1  30A4               	movlw	164
  7019  05C2  3189  21CC  3184   	fcall	_wireWriteDataByte
  7020  05C5  0020               	movlb	0	; select bank0
  7021  05C6  0826               	movf	?_wireWriteDataByte,w
  7022  05C7  0427               	iorwf	?_wireWriteDataByte+1,w
  7023  05C8  1903               	btfsc	3,2
  7024  05C9  2D05               	goto	l7332
  7025                           
  7026                           ;APDS9960.c: 101:     if( !wireWriteDataByte(0xA5, 0) ) {
  7027  05CA  01A6               	clrf	wireWriteDataByte@val
  7028  05CB  30A5               	movlw	165
  7029  05CC  3189  21CC  3184   	fcall	_wireWriteDataByte
  7030  05CF  0020               	movlb	0	; select bank0
  7031  05D0  0826               	movf	?_wireWriteDataByte,w
  7032  05D1  0427               	iorwf	?_wireWriteDataByte+1,w
  7033  05D2  1903               	btfsc	3,2
  7034  05D3  2D05               	goto	l7332
  7035                           
  7036                           ;APDS9960.c: 104:     if( !wireWriteDataByte(0xA7, 0) ) {
  7037  05D4  01A6               	clrf	wireWriteDataByte@val
  7038  05D5  30A7               	movlw	167
  7039  05D6  3189  21CC  3184   	fcall	_wireWriteDataByte
  7040  05D9  0020               	movlb	0	; select bank0
  7041  05DA  0826               	movf	?_wireWriteDataByte,w
  7042  05DB  0427               	iorwf	?_wireWriteDataByte+1,w
  7043  05DC  1903               	btfsc	3,2
  7044  05DD  2D05               	goto	l7332
  7045                           
  7046                           ;APDS9960.c: 107:     if( !wireWriteDataByte(0xA9, 0) ) {
  7047  05DE  01A6               	clrf	wireWriteDataByte@val
  7048  05DF  30A9               	movlw	169
  7049  05E0  3189  21CC  3184   	fcall	_wireWriteDataByte
  7050  05E3  0020               	movlb	0	; select bank0
  7051  05E4  0826               	movf	?_wireWriteDataByte,w
  7052  05E5  0427               	iorwf	?_wireWriteDataByte+1,w
  7053  05E6  1903               	btfsc	3,2
  7054  05E7  2D05               	goto	l7332
  7055                           
  7056                           ;APDS9960.c: 110:     if( !wireWriteDataByte(0xA6, 0xC9) ) {
  7057  05E8  30C9               	movlw	201
  7058  05E9  00B0               	movwf	??_initialize
  7059  05EA  0830               	movf	??_initialize,w
  7060  05EB  00A6               	movwf	wireWriteDataByte@val
  7061  05EC  30A6               	movlw	166
  7062  05ED  3189  21CC  3184   	fcall	_wireWriteDataByte
  7063  05F0  0020               	movlb	0	; select bank0
  7064  05F1  0826               	movf	?_wireWriteDataByte,w
  7065  05F2  0427               	iorwf	?_wireWriteDataByte+1,w
  7066  05F3  1903               	btfsc	3,2
  7067  05F4  2D05               	goto	l7332
  7068                           
  7069                           ;APDS9960.c: 113:     if( !wireWriteDataByte(0xAA, 0) ) {
  7070  05F5  01A6               	clrf	wireWriteDataByte@val
  7071  05F6  30AA               	movlw	170
  7072  05F7  3189  21CC  3184   	fcall	_wireWriteDataByte
  7073  05FA  0020               	movlb	0	; select bank0
  7074  05FB  0826               	movf	?_wireWriteDataByte,w
  7075  05FC  0427               	iorwf	?_wireWriteDataByte+1,w
  7076  05FD  1903               	btfsc	3,2
  7077  05FE  2D05               	goto	l7332
  7078                           
  7079                           ;APDS9960.c: 116:     if( !setGestureIntEnable(0) ) {
  7080  05FF  3000               	movlw	0
  7081  0600  318B  23BE  3184   	fcall	_setGestureIntEnable
  7082  0603  3A00               	xorlw	0
  7083  0604  1903               	btfsc	3,2
  7084  0605  2D05               	goto	l7332
  7085                           
  7086                           ;APDS9960.c: 120:     return 1;
  7087  0606  3001               	movlw	1
  7088  0607  0008               	return
  7089  0608                     __end_of_initialize:	
  7090                           
  7091                           	psect	text2
  7092  0B6A                     __ptext2:	
  7093 ;; *************** function _setProximityGain *****************
  7094 ;; Defined at:
  7095 ;;		line 192 in file "APDS9960.c"
  7096 ;; Parameters:    Size  Location     Type
  7097 ;;  drive           1    wreg     unsigned char 
  7098 ;; Auto vars:     Size  Location     Type
  7099 ;;  drive           1   13[BANK0 ] unsigned char 
  7100 ;;  val             1   12[BANK0 ] unsigned char 
  7101 ;; Return value:  Size  Location     Type
  7102 ;;                  1    wreg      _Bool 
  7103 ;; Registers used:
  7104 ;;		wreg, status,2, status,0, pclath, cstack
  7105 ;; Tracked objects:
  7106 ;;		On entry : 0/0
  7107 ;;		On exit  : 0/0
  7108 ;;		Unchanged: 0/0
  7109 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7110 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7111 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7112 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7113 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7114 ;;Total ram usage:        4 bytes
  7115 ;; Hardware stack levels used:    1
  7116 ;; Hardware stack levels required when called:    8
  7117 ;; This function calls:
  7118 ;;		_wireReadDataByte
  7119 ;;		_wireWriteDataByte
  7120 ;; This function is called by:
  7121 ;;		_initialize
  7122 ;; This function uses a non-reentrant model
  7123 ;;
  7124                           
  7125                           
  7126                           ;psect for function _setProximityGain
  7127  0B6A                     _setProximityGain:	
  7128                           
  7129                           ;incstack = 0
  7130                           ; Regs used in _setProximityGain: [wreg+status,2+status,0+pclath+cstack]
  7131                           ;setProximityGain@drive stored from wreg
  7132  0B6A  0020               	movlb	0	; select bank0
  7133  0B6B  00AD               	movwf	setProximityGain@drive
  7134                           
  7135                           ;APDS9960.c: 192: _Bool setProximityGain(uint8_t drive);APDS9960.c: 193: {;APDS9960.c: 1
      +                          94:     uint8_t val;;APDS9960.c: 197:     val=wireReadDataByte(0x8F);
  7136  0B6C  308F               	movlw	143
  7137  0B6D  318A  225B  318B   	fcall	_wireReadDataByte
  7138  0B70  0020               	movlb	0	; select bank0
  7139  0B71  00AA               	movwf	??_setProximityGain
  7140  0B72  082A               	movf	??_setProximityGain,w
  7141  0B73  00AC               	movwf	setProximityGain@val
  7142                           
  7143                           ;APDS9960.c: 199:     drive &= 0b00000011;
  7144  0B74  3003               	movlw	3
  7145  0B75  00AA               	movwf	??_setProximityGain
  7146  0B76  082A               	movf	??_setProximityGain,w
  7147  0B77  05AD               	andwf	setProximityGain@drive,f
  7148                           
  7149                           ;APDS9960.c: 200:     drive = drive << 2;
  7150  0B78  082D               	movf	setProximityGain@drive,w
  7151  0B79  00AA               	movwf	??_setProximityGain
  7152  0B7A  3001               	movlw	1
  7153  0B7B                     u6095:	
  7154  0B7B  35AA               	lslf	??_setProximityGain,f
  7155  0B7C  3EFF               	addlw	-1
  7156  0B7D  1D03               	skipz
  7157  0B7E  2B7B               	goto	u6095
  7158  0B7F  352A               	lslf	??_setProximityGain,w
  7159  0B80  00AB               	movwf	??_setProximityGain+1
  7160  0B81  082B               	movf	??_setProximityGain+1,w
  7161  0B82  00AD               	movwf	setProximityGain@drive
  7162                           
  7163                           ;APDS9960.c: 201:     val &= 0b11110011;
  7164  0B83  30F3               	movlw	243
  7165  0B84  00AA               	movwf	??_setProximityGain
  7166  0B85  082A               	movf	??_setProximityGain,w
  7167  0B86  05AC               	andwf	setProximityGain@val,f
  7168                           
  7169                           ;APDS9960.c: 202:     val |= drive;
  7170  0B87  082D               	movf	setProximityGain@drive,w
  7171  0B88  00AA               	movwf	??_setProximityGain
  7172  0B89  082A               	movf	??_setProximityGain,w
  7173  0B8A  04AC               	iorwf	setProximityGain@val,f
  7174                           
  7175                           ;APDS9960.c: 205:     if( !wireWriteDataByte(0x8F, val) ) {
  7176  0B8B  082C               	movf	setProximityGain@val,w
  7177  0B8C  00AA               	movwf	??_setProximityGain
  7178  0B8D  082A               	movf	??_setProximityGain,w
  7179  0B8E  00A6               	movwf	wireWriteDataByte@val
  7180  0B8F  308F               	movlw	143
  7181  0B90  3189  21CC         	fcall	_wireWriteDataByte
  7182  0B92  0008               	return
  7183  0B93                     __end_of_setProximityGain:	
  7184                           
  7185                           	psect	text3
  7186  0943                     __ptext3:	
  7187 ;; *************** function _setProxIntLowThresh *****************
  7188 ;; Defined at:
  7189 ;;		line 234 in file "APDS9960.c"
  7190 ;; Parameters:    Size  Location     Type
  7191 ;;  threshold       1    wreg     unsigned char 
  7192 ;; Auto vars:     Size  Location     Type
  7193 ;;  threshold       1   11[BANK0 ] unsigned char 
  7194 ;; Return value:  Size  Location     Type
  7195 ;;                  1    wreg      _Bool 
  7196 ;; Registers used:
  7197 ;;		wreg, status,2, status,0, pclath, cstack
  7198 ;; Tracked objects:
  7199 ;;		On entry : 0/0
  7200 ;;		On exit  : 0/0
  7201 ;;		Unchanged: 0/0
  7202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7204 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7205 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7206 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7207 ;;Total ram usage:        2 bytes
  7208 ;; Hardware stack levels used:    1
  7209 ;; Hardware stack levels required when called:    8
  7210 ;; This function calls:
  7211 ;;		_wireWriteDataByte
  7212 ;; This function is called by:
  7213 ;;		_initialize
  7214 ;; This function uses a non-reentrant model
  7215 ;;
  7216                           
  7217                           
  7218                           ;psect for function _setProxIntLowThresh
  7219  0943                     _setProxIntLowThresh:	
  7220                           
  7221                           ;incstack = 0
  7222                           ; Regs used in _setProxIntLowThresh: [wreg+status,2+status,0+pclath+cstack]
  7223                           ;setProxIntLowThresh@threshold stored from wreg
  7224  0943  0020               	movlb	0	; select bank0
  7225  0944  00AB               	movwf	setProxIntLowThresh@threshold
  7226                           
  7227                           ;APDS9960.c: 234: _Bool setProxIntLowThresh(uint8_t threshold);APDS9960.c: 235: {;APDS99
      +                          60.c: 236:     if( !wireWriteDataByte(0x89, threshold) ) {
  7228  0945  082B               	movf	setProxIntLowThresh@threshold,w
  7229  0946  00AA               	movwf	??_setProxIntLowThresh
  7230  0947  082A               	movf	??_setProxIntLowThresh,w
  7231  0948  00A6               	movwf	wireWriteDataByte@val
  7232  0949  3089               	movlw	137
  7233  094A  3189  21CC  3189   	fcall	_wireWriteDataByte
  7234  094D  0020               	movlb	0	; select bank0
  7235  094E  0826               	movf	?_wireWriteDataByte,w
  7236  094F  0427               	iorwf	?_wireWriteDataByte+1,w
  7237  0950  1D03               	btfss	3,2
  7238  0951  2954               	goto	l7078
  7239                           
  7240                           ;APDS9960.c: 237:         return 0;
  7241  0952  3000               	movlw	0
  7242  0953  0008               	return
  7243  0954                     l7078:	
  7244                           
  7245                           ;APDS9960.c: 240:     return 1;
  7246  0954  3001               	movlw	1
  7247  0955  0008               	return
  7248  0956                     __end_of_setProxIntLowThresh:	
  7249                           
  7250                           	psect	text4
  7251  0930                     __ptext4:	
  7252 ;; *************** function _setProxIntHighThresh *****************
  7253 ;; Defined at:
  7254 ;;		line 244 in file "APDS9960.c"
  7255 ;; Parameters:    Size  Location     Type
  7256 ;;  threshold       1    wreg     unsigned char 
  7257 ;; Auto vars:     Size  Location     Type
  7258 ;;  threshold       1   11[BANK0 ] unsigned char 
  7259 ;; Return value:  Size  Location     Type
  7260 ;;                  1    wreg      _Bool 
  7261 ;; Registers used:
  7262 ;;		wreg, status,2, status,0, pclath, cstack
  7263 ;; Tracked objects:
  7264 ;;		On entry : 0/0
  7265 ;;		On exit  : 0/0
  7266 ;;		Unchanged: 0/0
  7267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7268 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7269 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7270 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7271 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7272 ;;Total ram usage:        2 bytes
  7273 ;; Hardware stack levels used:    1
  7274 ;; Hardware stack levels required when called:    8
  7275 ;; This function calls:
  7276 ;;		_wireWriteDataByte
  7277 ;; This function is called by:
  7278 ;;		_initialize
  7279 ;; This function uses a non-reentrant model
  7280 ;;
  7281                           
  7282                           
  7283                           ;psect for function _setProxIntHighThresh
  7284  0930                     _setProxIntHighThresh:	
  7285                           
  7286                           ;incstack = 0
  7287                           ; Regs used in _setProxIntHighThresh: [wreg+status,2+status,0+pclath+cstack]
  7288                           ;setProxIntHighThresh@threshold stored from wreg
  7289  0930  0020               	movlb	0	; select bank0
  7290  0931  00AB               	movwf	setProxIntHighThresh@threshold
  7291                           
  7292                           ;APDS9960.c: 244: _Bool setProxIntHighThresh(uint8_t threshold);APDS9960.c: 245: {;APDS9
      +                          960.c: 246:     if( !wireWriteDataByte(0x8B, threshold) ) {
  7293  0932  082B               	movf	setProxIntHighThresh@threshold,w
  7294  0933  00AA               	movwf	??_setProxIntHighThresh
  7295  0934  082A               	movf	??_setProxIntHighThresh,w
  7296  0935  00A6               	movwf	wireWriteDataByte@val
  7297  0936  308B               	movlw	139
  7298  0937  3189  21CC  3189   	fcall	_wireWriteDataByte
  7299  093A  0020               	movlb	0	; select bank0
  7300  093B  0826               	movf	?_wireWriteDataByte,w
  7301  093C  0427               	iorwf	?_wireWriteDataByte+1,w
  7302  093D  1D03               	btfss	3,2
  7303  093E  2941               	goto	l7088
  7304                           
  7305                           ;APDS9960.c: 247:         return 0;
  7306  093F  3000               	movlw	0
  7307  0940  0008               	return
  7308  0941                     l7088:	
  7309                           
  7310                           ;APDS9960.c: 250:     return 1;
  7311  0941  3001               	movlw	1
  7312  0942  0008               	return
  7313  0943                     __end_of_setProxIntHighThresh:	
  7314                           
  7315                           	psect	text5
  7316  0B1A                     __ptext5:	
  7317 ;; *************** function _setLightIntLowThreshold *****************
  7318 ;; Defined at:
  7319 ;;		line 254 in file "APDS9960.c"
  7320 ;; Parameters:    Size  Location     Type
  7321 ;;  threshold       2   10[BANK0 ] unsigned short 
  7322 ;; Auto vars:     Size  Location     Type
  7323 ;;  val_high        1   14[BANK0 ] unsigned char 
  7324 ;;  val_low         1   13[BANK0 ] unsigned char 
  7325 ;; Return value:  Size  Location     Type
  7326 ;;                  1    wreg      _Bool 
  7327 ;; Registers used:
  7328 ;;		wreg, status,2, status,0, pclath, cstack
  7329 ;; Tracked objects:
  7330 ;;		On entry : 0/0
  7331 ;;		On exit  : 0/0
  7332 ;;		Unchanged: 0/0
  7333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7334 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7335 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7336 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7337 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7338 ;;Total ram usage:        5 bytes
  7339 ;; Hardware stack levels used:    1
  7340 ;; Hardware stack levels required when called:    8
  7341 ;; This function calls:
  7342 ;;		_wireWriteDataByte
  7343 ;; This function is called by:
  7344 ;;		_initialize
  7345 ;; This function uses a non-reentrant model
  7346 ;;
  7347                           
  7348                           
  7349                           ;psect for function _setLightIntLowThreshold
  7350  0B1A                     _setLightIntLowThreshold:	
  7351                           
  7352                           ;APDS9960.c: 254: _Bool setLightIntLowThreshold(uint16_t threshold);APDS9960.c: 255: {;A
      +                          PDS9960.c: 256:     uint8_t val_low;;APDS9960.c: 257:     uint8_t val_high;;APDS9960.c: 
      +                          260:     val_low = threshold & 0x00FF;
  7353                           
  7354                           ;incstack = 0
  7355                           ; Regs used in _setLightIntLowThreshold: [wreg+status,2+status,0+pclath+cstack]
  7356  0B1A  0020               	movlb	0	; select bank0
  7357  0B1B  082A               	movf	setLightIntLowThreshold@threshold,w
  7358  0B1C  00AC               	movwf	??_setLightIntLowThreshold
  7359  0B1D  082C               	movf	??_setLightIntLowThreshold,w
  7360  0B1E  00AD               	movwf	setLightIntLowThreshold@val_low
  7361                           
  7362                           ;APDS9960.c: 261:     val_high = (threshold & 0xFF00) >> 8;
  7363  0B1F  082B               	movf	setLightIntLowThreshold@threshold+1,w
  7364  0B20  00AC               	movwf	??_setLightIntLowThreshold
  7365  0B21  082C               	movf	??_setLightIntLowThreshold,w
  7366  0B22  00AE               	movwf	setLightIntLowThreshold@val_high
  7367                           
  7368                           ;APDS9960.c: 264:     if( !wireWriteDataByte(0x84, val_low) ) {
  7369  0B23  082D               	movf	setLightIntLowThreshold@val_low,w
  7370  0B24  00AC               	movwf	??_setLightIntLowThreshold
  7371  0B25  082C               	movf	??_setLightIntLowThreshold,w
  7372  0B26  00A6               	movwf	wireWriteDataByte@val
  7373  0B27  3084               	movlw	132
  7374  0B28  3189  21CC  318B   	fcall	_wireWriteDataByte
  7375  0B2B  0020               	movlb	0	; select bank0
  7376  0B2C  0826               	movf	?_wireWriteDataByte,w
  7377  0B2D  0427               	iorwf	?_wireWriteDataByte+1,w
  7378  0B2E  1D03               	btfss	3,2
  7379  0B2F  2B32               	goto	l7102
  7380  0B30                     l7098:	
  7381                           
  7382                           ;APDS9960.c: 265:         return 0;
  7383  0B30  3000               	movlw	0
  7384  0B31  0008               	return
  7385  0B32                     l7102:	
  7386                           
  7387                           ;APDS9960.c: 269:     if( !wireWriteDataByte(0x85, val_high) ) {
  7388  0B32  082E               	movf	setLightIntLowThreshold@val_high,w
  7389  0B33  00AC               	movwf	??_setLightIntLowThreshold
  7390  0B34  082C               	movf	??_setLightIntLowThreshold,w
  7391  0B35  00A6               	movwf	wireWriteDataByte@val
  7392  0B36  3085               	movlw	133
  7393  0B37  3189  21CC  318B   	fcall	_wireWriteDataByte
  7394  0B3A  0020               	movlb	0	; select bank0
  7395  0B3B  0826               	movf	?_wireWriteDataByte,w
  7396  0B3C  0427               	iorwf	?_wireWriteDataByte+1,w
  7397  0B3D  1903               	btfsc	3,2
  7398  0B3E  2B30               	goto	l7098
  7399                           
  7400                           ;APDS9960.c: 273:     return 1;
  7401  0B3F  3001               	movlw	1
  7402  0B40  0008               	return
  7403  0B41                     __end_of_setLightIntLowThreshold:	
  7404                           
  7405                           	psect	text6
  7406  0AF3                     __ptext6:	
  7407 ;; *************** function _setLightIntHighThreshold *****************
  7408 ;; Defined at:
  7409 ;;		line 277 in file "APDS9960.c"
  7410 ;; Parameters:    Size  Location     Type
  7411 ;;  threshold       2   10[BANK0 ] unsigned short 
  7412 ;; Auto vars:     Size  Location     Type
  7413 ;;  val_high        1   14[BANK0 ] unsigned char 
  7414 ;;  val_low         1   13[BANK0 ] unsigned char 
  7415 ;; Return value:  Size  Location     Type
  7416 ;;                  1    wreg      _Bool 
  7417 ;; Registers used:
  7418 ;;		wreg, status,2, status,0, pclath, cstack
  7419 ;; Tracked objects:
  7420 ;;		On entry : 0/0
  7421 ;;		On exit  : 0/0
  7422 ;;		Unchanged: 0/0
  7423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7424 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7425 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7426 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7427 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7428 ;;Total ram usage:        5 bytes
  7429 ;; Hardware stack levels used:    1
  7430 ;; Hardware stack levels required when called:    8
  7431 ;; This function calls:
  7432 ;;		_wireWriteDataByte
  7433 ;; This function is called by:
  7434 ;;		_initialize
  7435 ;; This function uses a non-reentrant model
  7436 ;;
  7437                           
  7438                           
  7439                           ;psect for function _setLightIntHighThreshold
  7440  0AF3                     _setLightIntHighThreshold:	
  7441                           
  7442                           ;APDS9960.c: 277: _Bool setLightIntHighThreshold(uint16_t threshold);APDS9960.c: 278: {;
      +                          APDS9960.c: 279:     uint8_t val_low;;APDS9960.c: 280:     uint8_t val_high;;APDS9960.c:
      +                           283:     val_low = threshold & 0x00FF;
  7443                           
  7444                           ;incstack = 0
  7445                           ; Regs used in _setLightIntHighThreshold: [wreg+status,2+status,0+pclath+cstack]
  7446  0AF3  0020               	movlb	0	; select bank0
  7447  0AF4  082A               	movf	setLightIntHighThreshold@threshold,w
  7448  0AF5  00AC               	movwf	??_setLightIntHighThreshold
  7449  0AF6  082C               	movf	??_setLightIntHighThreshold,w
  7450  0AF7  00AD               	movwf	setLightIntHighThreshold@val_low
  7451                           
  7452                           ;APDS9960.c: 284:     val_high = (threshold & 0xFF00) >> 8;
  7453  0AF8  082B               	movf	setLightIntHighThreshold@threshold+1,w
  7454  0AF9  00AC               	movwf	??_setLightIntHighThreshold
  7455  0AFA  082C               	movf	??_setLightIntHighThreshold,w
  7456  0AFB  00AE               	movwf	setLightIntHighThreshold@val_high
  7457                           
  7458                           ;APDS9960.c: 287:     if( !wireWriteDataByte(0x86, val_low) ) {
  7459  0AFC  082D               	movf	setLightIntHighThreshold@val_low,w
  7460  0AFD  00AC               	movwf	??_setLightIntHighThreshold
  7461  0AFE  082C               	movf	??_setLightIntHighThreshold,w
  7462  0AFF  00A6               	movwf	wireWriteDataByte@val
  7463  0B00  3086               	movlw	134
  7464  0B01  3189  21CC  318A   	fcall	_wireWriteDataByte
  7465  0B04  0020               	movlb	0	; select bank0
  7466  0B05  0826               	movf	?_wireWriteDataByte,w
  7467  0B06  0427               	iorwf	?_wireWriteDataByte+1,w
  7468  0B07  1D03               	btfss	3,2
  7469  0B08  2B0B               	goto	l7122
  7470  0B09                     l7118:	
  7471                           
  7472                           ;APDS9960.c: 288:         return 0;
  7473  0B09  3000               	movlw	0
  7474  0B0A  0008               	return
  7475  0B0B                     l7122:	
  7476                           
  7477                           ;APDS9960.c: 292:     if( !wireWriteDataByte(0x87, val_high) ) {
  7478  0B0B  082E               	movf	setLightIntHighThreshold@val_high,w
  7479  0B0C  00AC               	movwf	??_setLightIntHighThreshold
  7480  0B0D  082C               	movf	??_setLightIntHighThreshold,w
  7481  0B0E  00A6               	movwf	wireWriteDataByte@val
  7482  0B0F  3087               	movlw	135
  7483  0B10  3189  21CC  318A   	fcall	_wireWriteDataByte
  7484  0B13  0020               	movlb	0	; select bank0
  7485  0B14  0826               	movf	?_wireWriteDataByte,w
  7486  0B15  0427               	iorwf	?_wireWriteDataByte+1,w
  7487  0B16  1903               	btfsc	3,2
  7488  0B17  2B09               	goto	l7118
  7489                           
  7490                           ;APDS9960.c: 296:     return 1;
  7491  0B18  3001               	movlw	1
  7492  0B19  0008               	return
  7493  0B1A                     __end_of_setLightIntHighThreshold:	
  7494                           
  7495                           	psect	text7
  7496  0B41                     __ptext7:	
  7497 ;; *************** function _setLEDDrive *****************
  7498 ;; Defined at:
  7499 ;;		line 170 in file "APDS9960.c"
  7500 ;; Parameters:    Size  Location     Type
  7501 ;;  drive           1    wreg     unsigned char 
  7502 ;; Auto vars:     Size  Location     Type
  7503 ;;  drive           1   13[BANK0 ] unsigned char 
  7504 ;;  val             1   12[BANK0 ] unsigned char 
  7505 ;; Return value:  Size  Location     Type
  7506 ;;                  1    wreg      _Bool 
  7507 ;; Registers used:
  7508 ;;		wreg, status,2, status,0, pclath, cstack
  7509 ;; Tracked objects:
  7510 ;;		On entry : 0/0
  7511 ;;		On exit  : 0/0
  7512 ;;		Unchanged: 0/0
  7513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7514 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7515 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7516 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7517 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7518 ;;Total ram usage:        4 bytes
  7519 ;; Hardware stack levels used:    1
  7520 ;; Hardware stack levels required when called:    8
  7521 ;; This function calls:
  7522 ;;		_wireReadDataByte
  7523 ;;		_wireWriteDataByte
  7524 ;; This function is called by:
  7525 ;;		_initialize
  7526 ;; This function uses a non-reentrant model
  7527 ;;
  7528                           
  7529                           
  7530                           ;psect for function _setLEDDrive
  7531  0B41                     _setLEDDrive:	
  7532                           
  7533                           ;incstack = 0
  7534                           ; Regs used in _setLEDDrive: [wreg+status,2+status,0+pclath+cstack]
  7535                           ;setLEDDrive@drive stored from wreg
  7536  0B41  0020               	movlb	0	; select bank0
  7537  0B42  00AD               	movwf	setLEDDrive@drive
  7538                           
  7539                           ;APDS9960.c: 170: _Bool setLEDDrive(uint8_t drive);APDS9960.c: 171: {;APDS9960.c: 172:  
      +                             uint8_t val;;APDS9960.c: 175:     val=wireReadDataByte(0x8F);
  7540  0B43  308F               	movlw	143
  7541  0B44  318A  225B  318B   	fcall	_wireReadDataByte
  7542  0B47  0020               	movlb	0	; select bank0
  7543  0B48  00AA               	movwf	??_setLEDDrive
  7544  0B49  082A               	movf	??_setLEDDrive,w
  7545  0B4A  00AC               	movwf	setLEDDrive@val
  7546                           
  7547                           ;APDS9960.c: 178:     drive &= 0b00000011;
  7548  0B4B  3003               	movlw	3
  7549  0B4C  00AA               	movwf	??_setLEDDrive
  7550  0B4D  082A               	movf	??_setLEDDrive,w
  7551  0B4E  05AD               	andwf	setLEDDrive@drive,f
  7552                           
  7553                           ;APDS9960.c: 179:     drive = drive << 6;
  7554  0B4F  082D               	movf	setLEDDrive@drive,w
  7555  0B50  00AA               	movwf	??_setLEDDrive
  7556  0B51  3005               	movlw	5
  7557  0B52                     u6085:	
  7558  0B52  35AA               	lslf	??_setLEDDrive,f
  7559  0B53  3EFF               	addlw	-1
  7560  0B54  1D03               	skipz
  7561  0B55  2B52               	goto	u6085
  7562  0B56  352A               	lslf	??_setLEDDrive,w
  7563  0B57  00AB               	movwf	??_setLEDDrive+1
  7564  0B58  082B               	movf	??_setLEDDrive+1,w
  7565  0B59  00AD               	movwf	setLEDDrive@drive
  7566                           
  7567                           ;APDS9960.c: 180:     val &= 0b00111111;
  7568  0B5A  303F               	movlw	63
  7569  0B5B  00AA               	movwf	??_setLEDDrive
  7570  0B5C  082A               	movf	??_setLEDDrive,w
  7571  0B5D  05AC               	andwf	setLEDDrive@val,f
  7572                           
  7573                           ;APDS9960.c: 181:     val |= drive;
  7574  0B5E  082D               	movf	setLEDDrive@drive,w
  7575  0B5F  00AA               	movwf	??_setLEDDrive
  7576  0B60  082A               	movf	??_setLEDDrive,w
  7577  0B61  04AC               	iorwf	setLEDDrive@val,f
  7578                           
  7579                           ;APDS9960.c: 184:     if( !wireWriteDataByte(0x8F, val) ) {
  7580  0B62  082C               	movf	setLEDDrive@val,w
  7581  0B63  00AA               	movwf	??_setLEDDrive
  7582  0B64  082A               	movf	??_setLEDDrive,w
  7583  0B65  00A6               	movwf	wireWriteDataByte@val
  7584  0B66  308F               	movlw	143
  7585  0B67  3189  21CC         	fcall	_wireWriteDataByte
  7586  0B69  0008               	return
  7587  0B6A                     __end_of_setLEDDrive:	
  7588                           
  7589                           	psect	text8
  7590  0ACC                     __ptext8:	
  7591 ;; *************** function _setGestureWaitTime *****************
  7592 ;; Defined at:
  7593 ;;		line 366 in file "APDS9960.c"
  7594 ;; Parameters:    Size  Location     Type
  7595 ;;  time            1    wreg     unsigned char 
  7596 ;; Auto vars:     Size  Location     Type
  7597 ;;  time            1   11[BANK0 ] unsigned char 
  7598 ;;  val             1   12[BANK0 ] unsigned char 
  7599 ;; Return value:  Size  Location     Type
  7600 ;;                  1    wreg      _Bool 
  7601 ;; Registers used:
  7602 ;;		wreg, status,2, status,0, pclath, cstack
  7603 ;; Tracked objects:
  7604 ;;		On entry : 0/0
  7605 ;;		On exit  : 0/0
  7606 ;;		Unchanged: 0/0
  7607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7608 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7609 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7610 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7611 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7612 ;;Total ram usage:        3 bytes
  7613 ;; Hardware stack levels used:    1
  7614 ;; Hardware stack levels required when called:    8
  7615 ;; This function calls:
  7616 ;;		_wireReadDataByte
  7617 ;;		_wireWriteDataByte
  7618 ;; This function is called by:
  7619 ;;		_initialize
  7620 ;; This function uses a non-reentrant model
  7621 ;;
  7622                           
  7623                           
  7624                           ;psect for function _setGestureWaitTime
  7625  0ACC                     _setGestureWaitTime:	
  7626                           
  7627                           ;incstack = 0
  7628                           ; Regs used in _setGestureWaitTime: [wreg+status,2+status,0+pclath+cstack]
  7629                           ;setGestureWaitTime@time stored from wreg
  7630  0ACC  0020               	movlb	0	; select bank0
  7631  0ACD  00AB               	movwf	setGestureWaitTime@time
  7632                           
  7633                           ;APDS9960.c: 366: _Bool setGestureWaitTime(uint8_t time);APDS9960.c: 367: {;APDS9960.c: 
      +                          368:     uint8_t val;;APDS9960.c: 371:     val = wireReadDataByte(0xA3);
  7634  0ACE  30A3               	movlw	163
  7635  0ACF  318A  225B  318A   	fcall	_wireReadDataByte
  7636  0AD2  0020               	movlb	0	; select bank0
  7637  0AD3  00AA               	movwf	??_setGestureWaitTime
  7638  0AD4  082A               	movf	??_setGestureWaitTime,w
  7639  0AD5  00AC               	movwf	setGestureWaitTime@val
  7640                           
  7641                           ;APDS9960.c: 374:     time &= 0b00000111;
  7642  0AD6  3007               	movlw	7
  7643  0AD7  00AA               	movwf	??_setGestureWaitTime
  7644  0AD8  082A               	movf	??_setGestureWaitTime,w
  7645  0AD9  05AB               	andwf	setGestureWaitTime@time,f
  7646                           
  7647                           ;APDS9960.c: 375:     val &= 0b11111000;
  7648  0ADA  30F8               	movlw	248
  7649  0ADB  00AA               	movwf	??_setGestureWaitTime
  7650  0ADC  082A               	movf	??_setGestureWaitTime,w
  7651  0ADD  05AC               	andwf	setGestureWaitTime@val,f
  7652                           
  7653                           ;APDS9960.c: 376:     val |= time;
  7654  0ADE  082B               	movf	setGestureWaitTime@time,w
  7655  0ADF  00AA               	movwf	??_setGestureWaitTime
  7656  0AE0  082A               	movf	??_setGestureWaitTime,w
  7657  0AE1  04AC               	iorwf	setGestureWaitTime@val,f
  7658                           
  7659                           ;APDS9960.c: 379:     if( !wireWriteDataByte(0xA3, val) ) {
  7660  0AE2  082C               	movf	setGestureWaitTime@val,w
  7661  0AE3  00AA               	movwf	??_setGestureWaitTime
  7662  0AE4  082A               	movf	??_setGestureWaitTime,w
  7663  0AE5  00A6               	movwf	wireWriteDataByte@val
  7664  0AE6  30A3               	movlw	163
  7665  0AE7  3189  21CC  318A   	fcall	_wireWriteDataByte
  7666  0AEA  0020               	movlb	0	; select bank0
  7667  0AEB  0826               	movf	?_wireWriteDataByte,w
  7668  0AEC  0427               	iorwf	?_wireWriteDataByte+1,w
  7669  0AED  1D03               	btfss	3,2
  7670  0AEE  2AF1               	goto	l7202
  7671                           
  7672                           ;APDS9960.c: 380:         return 0;
  7673  0AEF  3000               	movlw	0
  7674  0AF0  0008               	return
  7675  0AF1                     l7202:	
  7676                           
  7677                           ;APDS9960.c: 383:     return 1;
  7678  0AF1  3001               	movlw	1
  7679  0AF2  0008               	return
  7680  0AF3                     __end_of_setGestureWaitTime:	
  7681                           
  7682                           	psect	text9
  7683  0C7E                     __ptext9:	
  7684 ;; *************** function _setGestureLEDDrive *****************
  7685 ;; Defined at:
  7686 ;;		line 343 in file "APDS9960.c"
  7687 ;; Parameters:    Size  Location     Type
  7688 ;;  drive           1    wreg     unsigned char 
  7689 ;; Auto vars:     Size  Location     Type
  7690 ;;  drive           1   13[BANK0 ] unsigned char 
  7691 ;;  val             1   12[BANK0 ] unsigned char 
  7692 ;; Return value:  Size  Location     Type
  7693 ;;                  1    wreg      _Bool 
  7694 ;; Registers used:
  7695 ;;		wreg, status,2, status,0, pclath, cstack
  7696 ;; Tracked objects:
  7697 ;;		On entry : 0/0
  7698 ;;		On exit  : 0/0
  7699 ;;		Unchanged: 0/0
  7700 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7702 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7703 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7704 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7705 ;;Total ram usage:        4 bytes
  7706 ;; Hardware stack levels used:    1
  7707 ;; Hardware stack levels required when called:    8
  7708 ;; This function calls:
  7709 ;;		_wireReadDataByte
  7710 ;;		_wireWriteDataByte
  7711 ;; This function is called by:
  7712 ;;		_initialize
  7713 ;; This function uses a non-reentrant model
  7714 ;;
  7715                           
  7716                           
  7717                           ;psect for function _setGestureLEDDrive
  7718  0C7E                     _setGestureLEDDrive:	
  7719                           
  7720                           ;incstack = 0
  7721                           ; Regs used in _setGestureLEDDrive: [wreg+status,2+status,0+pclath+cstack]
  7722                           ;setGestureLEDDrive@drive stored from wreg
  7723  0C7E  0020               	movlb	0	; select bank0
  7724  0C7F  00AD               	movwf	setGestureLEDDrive@drive
  7725                           
  7726                           ;APDS9960.c: 343: _Bool setGestureLEDDrive(uint8_t drive);APDS9960.c: 344: {;APDS9960.c:
      +                           345:     uint8_t val;;APDS9960.c: 348:     val = wireReadDataByte(0xA3);
  7727  0C80  30A3               	movlw	163
  7728  0C81  318A  225B  318C   	fcall	_wireReadDataByte
  7729  0C84  0020               	movlb	0	; select bank0
  7730  0C85  00AA               	movwf	??_setGestureLEDDrive
  7731  0C86  082A               	movf	??_setGestureLEDDrive,w
  7732  0C87  00AC               	movwf	setGestureLEDDrive@val
  7733                           
  7734                           ;APDS9960.c: 352:     drive &= 0b00000011;
  7735  0C88  3003               	movlw	3
  7736  0C89  00AA               	movwf	??_setGestureLEDDrive
  7737  0C8A  082A               	movf	??_setGestureLEDDrive,w
  7738  0C8B  05AD               	andwf	setGestureLEDDrive@drive,f
  7739                           
  7740                           ;APDS9960.c: 353:     drive = drive << 3;
  7741  0C8C  082D               	movf	setGestureLEDDrive@drive,w
  7742  0C8D  00AA               	movwf	??_setGestureLEDDrive
  7743  0C8E  3002               	movlw	2
  7744  0C8F                     u6205:	
  7745  0C8F  35AA               	lslf	??_setGestureLEDDrive,f
  7746  0C90  3EFF               	addlw	-1
  7747  0C91  1D03               	skipz
  7748  0C92  2C8F               	goto	u6205
  7749  0C93  352A               	lslf	??_setGestureLEDDrive,w
  7750  0C94  00AB               	movwf	??_setGestureLEDDrive+1
  7751  0C95  082B               	movf	??_setGestureLEDDrive+1,w
  7752  0C96  00AD               	movwf	setGestureLEDDrive@drive
  7753                           
  7754                           ;APDS9960.c: 354:     val &= 0b11100111;
  7755  0C97  30E7               	movlw	231
  7756  0C98  00AA               	movwf	??_setGestureLEDDrive
  7757  0C99  082A               	movf	??_setGestureLEDDrive,w
  7758  0C9A  05AC               	andwf	setGestureLEDDrive@val,f
  7759                           
  7760                           ;APDS9960.c: 355:     val |= drive;
  7761  0C9B  082D               	movf	setGestureLEDDrive@drive,w
  7762  0C9C  00AA               	movwf	??_setGestureLEDDrive
  7763  0C9D  082A               	movf	??_setGestureLEDDrive,w
  7764  0C9E  04AC               	iorwf	setGestureLEDDrive@val,f
  7765                           
  7766                           ;APDS9960.c: 358:     if( !wireWriteDataByte(0xA3, val) ) {
  7767  0C9F  082C               	movf	setGestureLEDDrive@val,w
  7768  0CA0  00AA               	movwf	??_setGestureLEDDrive
  7769  0CA1  082A               	movf	??_setGestureLEDDrive,w
  7770  0CA2  00A6               	movwf	wireWriteDataByte@val
  7771  0CA3  30A3               	movlw	163
  7772  0CA4  3189  21CC  318C   	fcall	_wireWriteDataByte
  7773  0CA7  0020               	movlb	0	; select bank0
  7774  0CA8  0826               	movf	?_wireWriteDataByte,w
  7775  0CA9  0427               	iorwf	?_wireWriteDataByte+1,w
  7776  0CAA  1D03               	btfss	3,2
  7777  0CAB  2CAE               	goto	l7184
  7778                           
  7779                           ;APDS9960.c: 359:         return 0;
  7780  0CAC  3000               	movlw	0
  7781  0CAD  0008               	return
  7782  0CAE                     l7184:	
  7783                           
  7784                           ;APDS9960.c: 362:     return 1;
  7785  0CAE  3001               	movlw	1
  7786  0CAF  0008               	return
  7787  0CB0                     __end_of_setGestureLEDDrive:	
  7788                           
  7789                           	psect	text10
  7790  0C4C                     __ptext10:	
  7791 ;; *************** function _setGestureGain *****************
  7792 ;; Defined at:
  7793 ;;		line 320 in file "APDS9960.c"
  7794 ;; Parameters:    Size  Location     Type
  7795 ;;  gain            1    wreg     unsigned char 
  7796 ;; Auto vars:     Size  Location     Type
  7797 ;;  gain            1   13[BANK0 ] unsigned char 
  7798 ;;  val             1   12[BANK0 ] unsigned char 
  7799 ;; Return value:  Size  Location     Type
  7800 ;;                  1    wreg      _Bool 
  7801 ;; Registers used:
  7802 ;;		wreg, status,2, status,0, pclath, cstack
  7803 ;; Tracked objects:
  7804 ;;		On entry : 0/0
  7805 ;;		On exit  : 0/0
  7806 ;;		Unchanged: 0/0
  7807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7808 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7809 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7810 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7811 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7812 ;;Total ram usage:        4 bytes
  7813 ;; Hardware stack levels used:    1
  7814 ;; Hardware stack levels required when called:    8
  7815 ;; This function calls:
  7816 ;;		_wireReadDataByte
  7817 ;;		_wireWriteDataByte
  7818 ;; This function is called by:
  7819 ;;		_initialize
  7820 ;; This function uses a non-reentrant model
  7821 ;;
  7822                           
  7823                           
  7824                           ;psect for function _setGestureGain
  7825  0C4C                     _setGestureGain:	
  7826                           
  7827                           ;incstack = 0
  7828                           ; Regs used in _setGestureGain: [wreg+status,2+status,0+pclath+cstack]
  7829                           ;setGestureGain@gain stored from wreg
  7830  0C4C  0020               	movlb	0	; select bank0
  7831  0C4D  00AD               	movwf	setGestureGain@gain
  7832                           
  7833                           ;APDS9960.c: 320: _Bool setGestureGain(uint8_t gain);APDS9960.c: 321: {;APDS9960.c: 322:
      +                               uint8_t val;;APDS9960.c: 325:     val = wireReadDataByte(0xA3);
  7834  0C4E  30A3               	movlw	163
  7835  0C4F  318A  225B  318C   	fcall	_wireReadDataByte
  7836  0C52  0020               	movlb	0	; select bank0
  7837  0C53  00AA               	movwf	??_setGestureGain
  7838  0C54  082A               	movf	??_setGestureGain,w
  7839  0C55  00AC               	movwf	setGestureGain@val
  7840                           
  7841                           ;APDS9960.c: 329:     gain &= 0b00000011;
  7842  0C56  3003               	movlw	3
  7843  0C57  00AA               	movwf	??_setGestureGain
  7844  0C58  082A               	movf	??_setGestureGain,w
  7845  0C59  05AD               	andwf	setGestureGain@gain,f
  7846                           
  7847                           ;APDS9960.c: 330:     gain = gain << 5;
  7848  0C5A  082D               	movf	setGestureGain@gain,w
  7849  0C5B  00AA               	movwf	??_setGestureGain
  7850  0C5C  3004               	movlw	4
  7851  0C5D                     u6185:	
  7852  0C5D  35AA               	lslf	??_setGestureGain,f
  7853  0C5E  3EFF               	addlw	-1
  7854  0C5F  1D03               	skipz
  7855  0C60  2C5D               	goto	u6185
  7856  0C61  352A               	lslf	??_setGestureGain,w
  7857  0C62  00AB               	movwf	??_setGestureGain+1
  7858  0C63  082B               	movf	??_setGestureGain+1,w
  7859  0C64  00AD               	movwf	setGestureGain@gain
  7860                           
  7861                           ;APDS9960.c: 331:     val &= 0b10011111;
  7862  0C65  309F               	movlw	159
  7863  0C66  00AA               	movwf	??_setGestureGain
  7864  0C67  082A               	movf	??_setGestureGain,w
  7865  0C68  05AC               	andwf	setGestureGain@val,f
  7866                           
  7867                           ;APDS9960.c: 332:     val |= gain;
  7868  0C69  082D               	movf	setGestureGain@gain,w
  7869  0C6A  00AA               	movwf	??_setGestureGain
  7870  0C6B  082A               	movf	??_setGestureGain,w
  7871  0C6C  04AC               	iorwf	setGestureGain@val,f
  7872                           
  7873                           ;APDS9960.c: 335:     if( !wireWriteDataByte(0xA3, val) ) {
  7874  0C6D  082C               	movf	setGestureGain@val,w
  7875  0C6E  00AA               	movwf	??_setGestureGain
  7876  0C6F  082A               	movf	??_setGestureGain,w
  7877  0C70  00A6               	movwf	wireWriteDataByte@val
  7878  0C71  30A3               	movlw	163
  7879  0C72  3189  21CC  318C   	fcall	_wireWriteDataByte
  7880  0C75  0020               	movlb	0	; select bank0
  7881  0C76  0826               	movf	?_wireWriteDataByte,w
  7882  0C77  0427               	iorwf	?_wireWriteDataByte+1,w
  7883  0C78  1D03               	btfss	3,2
  7884  0C79  2C7C               	goto	l7166
  7885                           
  7886                           ;APDS9960.c: 336:         return 0;
  7887  0C7A  3000               	movlw	0
  7888  0C7B  0008               	return
  7889  0C7C                     l7166:	
  7890                           
  7891                           ;APDS9960.c: 339:     return 1;
  7892  0C7C  3001               	movlw	1
  7893  0C7D  0008               	return
  7894  0C7E                     __end_of_setGestureGain:	
  7895                           
  7896                           	psect	text11
  7897  091D                     __ptext11:	
  7898 ;; *************** function _setGestureExitThresh *****************
  7899 ;; Defined at:
  7900 ;;		line 310 in file "APDS9960.c"
  7901 ;; Parameters:    Size  Location     Type
  7902 ;;  threshold       1    wreg     unsigned char 
  7903 ;; Auto vars:     Size  Location     Type
  7904 ;;  threshold       1   11[BANK0 ] unsigned char 
  7905 ;; Return value:  Size  Location     Type
  7906 ;;                  1    wreg      _Bool 
  7907 ;; Registers used:
  7908 ;;		wreg, status,2, status,0, pclath, cstack
  7909 ;; Tracked objects:
  7910 ;;		On entry : 0/0
  7911 ;;		On exit  : 0/0
  7912 ;;		Unchanged: 0/0
  7913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7915 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7916 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7917 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7918 ;;Total ram usage:        2 bytes
  7919 ;; Hardware stack levels used:    1
  7920 ;; Hardware stack levels required when called:    8
  7921 ;; This function calls:
  7922 ;;		_wireWriteDataByte
  7923 ;; This function is called by:
  7924 ;;		_initialize
  7925 ;; This function uses a non-reentrant model
  7926 ;;
  7927                           
  7928                           
  7929                           ;psect for function _setGestureExitThresh
  7930  091D                     _setGestureExitThresh:	
  7931                           
  7932                           ;incstack = 0
  7933                           ; Regs used in _setGestureExitThresh: [wreg+status,2+status,0+pclath+cstack]
  7934                           ;setGestureExitThresh@threshold stored from wreg
  7935  091D  0020               	movlb	0	; select bank0
  7936  091E  00AB               	movwf	setGestureExitThresh@threshold
  7937                           
  7938                           ;APDS9960.c: 310: _Bool setGestureExitThresh(uint8_t threshold);APDS9960.c: 311: {;APDS9
      +                          960.c: 312:     if( !wireWriteDataByte(0xA1, threshold) ) {
  7939  091F  082B               	movf	setGestureExitThresh@threshold,w
  7940  0920  00AA               	movwf	??_setGestureExitThresh
  7941  0921  082A               	movf	??_setGestureExitThresh,w
  7942  0922  00A6               	movwf	wireWriteDataByte@val
  7943  0923  30A1               	movlw	161
  7944  0924  3189  21CC  3189   	fcall	_wireWriteDataByte
  7945  0927  0020               	movlb	0	; select bank0
  7946  0928  0826               	movf	?_wireWriteDataByte,w
  7947  0929  0427               	iorwf	?_wireWriteDataByte+1,w
  7948  092A  1D03               	btfss	3,2
  7949  092B  292E               	goto	l7148
  7950                           
  7951                           ;APDS9960.c: 313:         return 0;
  7952  092C  3000               	movlw	0
  7953  092D  0008               	return
  7954  092E                     l7148:	
  7955                           
  7956                           ;APDS9960.c: 316:     return 1;
  7957  092E  3001               	movlw	1
  7958  092F  0008               	return
  7959  0930                     __end_of_setGestureExitThresh:	
  7960                           
  7961                           	psect	text12
  7962  090A                     __ptext12:	
  7963 ;; *************** function _setGestureEnterThresh *****************
  7964 ;; Defined at:
  7965 ;;		line 300 in file "APDS9960.c"
  7966 ;; Parameters:    Size  Location     Type
  7967 ;;  threshold       1    wreg     unsigned char 
  7968 ;; Auto vars:     Size  Location     Type
  7969 ;;  threshold       1   11[BANK0 ] unsigned char 
  7970 ;; Return value:  Size  Location     Type
  7971 ;;                  1    wreg      _Bool 
  7972 ;; Registers used:
  7973 ;;		wreg, status,2, status,0, pclath, cstack
  7974 ;; Tracked objects:
  7975 ;;		On entry : 0/0
  7976 ;;		On exit  : 0/0
  7977 ;;		Unchanged: 0/0
  7978 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7979 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7980 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7981 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7982 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7983 ;;Total ram usage:        2 bytes
  7984 ;; Hardware stack levels used:    1
  7985 ;; Hardware stack levels required when called:    8
  7986 ;; This function calls:
  7987 ;;		_wireWriteDataByte
  7988 ;; This function is called by:
  7989 ;;		_initialize
  7990 ;; This function uses a non-reentrant model
  7991 ;;
  7992                           
  7993                           
  7994                           ;psect for function _setGestureEnterThresh
  7995  090A                     _setGestureEnterThresh:	
  7996                           
  7997                           ;incstack = 0
  7998                           ; Regs used in _setGestureEnterThresh: [wreg+status,2+status,0+pclath+cstack]
  7999                           ;setGestureEnterThresh@threshold stored from wreg
  8000  090A  0020               	movlb	0	; select bank0
  8001  090B  00AB               	movwf	setGestureEnterThresh@threshold
  8002                           
  8003                           ;APDS9960.c: 300: _Bool setGestureEnterThresh(uint8_t threshold);APDS9960.c: 301: {;APDS
      +                          9960.c: 302:     if( !wireWriteDataByte(0xA0, threshold) ) {
  8004  090C  082B               	movf	setGestureEnterThresh@threshold,w
  8005  090D  00AA               	movwf	??_setGestureEnterThresh
  8006  090E  082A               	movf	??_setGestureEnterThresh,w
  8007  090F  00A6               	movwf	wireWriteDataByte@val
  8008  0910  30A0               	movlw	160
  8009  0911  3189  21CC  3189   	fcall	_wireWriteDataByte
  8010  0914  0020               	movlb	0	; select bank0
  8011  0915  0826               	movf	?_wireWriteDataByte,w
  8012  0916  0427               	iorwf	?_wireWriteDataByte+1,w
  8013  0917  1D03               	btfss	3,2
  8014  0918  291B               	goto	l7138
  8015                           
  8016                           ;APDS9960.c: 303:         return 0;
  8017  0919  3000               	movlw	0
  8018  091A  0008               	return
  8019  091B                     l7138:	
  8020                           
  8021                           ;APDS9960.c: 306:     return 1;
  8022  091B  3001               	movlw	1
  8023  091C  0008               	return
  8024  091D                     __end_of_setGestureEnterThresh:	
  8025                           
  8026                           	psect	text13
  8027  07DF                     __ptext13:	
  8028 ;; *************** function _setAmbientLightGain *****************
  8029 ;; Defined at:
  8030 ;;		line 213 in file "APDS9960.c"
  8031 ;; Parameters:    Size  Location     Type
  8032 ;;  drive           1    wreg     unsigned char 
  8033 ;; Auto vars:     Size  Location     Type
  8034 ;;  drive           1   11[BANK0 ] unsigned char 
  8035 ;;  val             1   12[BANK0 ] unsigned char 
  8036 ;; Return value:  Size  Location     Type
  8037 ;;                  1    wreg      _Bool 
  8038 ;; Registers used:
  8039 ;;		wreg, status,2, status,0, pclath, cstack
  8040 ;; Tracked objects:
  8041 ;;		On entry : 0/0
  8042 ;;		On exit  : 0/0
  8043 ;;		Unchanged: 0/0
  8044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8045 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8046 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8047 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8048 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8049 ;;Total ram usage:        3 bytes
  8050 ;; Hardware stack levels used:    1
  8051 ;; Hardware stack levels required when called:    8
  8052 ;; This function calls:
  8053 ;;		_wireReadDataByte
  8054 ;;		_wireWriteDataByte
  8055 ;; This function is called by:
  8056 ;;		_initialize
  8057 ;; This function uses a non-reentrant model
  8058 ;;
  8059                           
  8060                           
  8061                           ;psect for function _setAmbientLightGain
  8062  07DF                     _setAmbientLightGain:	
  8063                           
  8064                           ;incstack = 0
  8065                           ; Regs used in _setAmbientLightGain: [wreg+status,2+status,0+pclath+cstack]
  8066                           ;setAmbientLightGain@drive stored from wreg
  8067  07DF  0020               	movlb	0	; select bank0
  8068  07E0  00AB               	movwf	setAmbientLightGain@drive
  8069                           
  8070                           ;APDS9960.c: 213: _Bool setAmbientLightGain(uint8_t drive);APDS9960.c: 214: {;APDS9960.c
      +                          : 215:     uint8_t val;;APDS9960.c: 218:     val= wireReadDataByte(0x8F);
  8071  07E1  308F               	movlw	143
  8072  07E2  318A  225B  3187   	fcall	_wireReadDataByte
  8073  07E5  0020               	movlb	0	; select bank0
  8074  07E6  00AA               	movwf	??_setAmbientLightGain
  8075  07E7  082A               	movf	??_setAmbientLightGain,w
  8076  07E8  00AC               	movwf	setAmbientLightGain@val
  8077                           
  8078                           ;APDS9960.c: 221:     drive &= 0b00000011;
  8079  07E9  3003               	movlw	3
  8080  07EA  00AA               	movwf	??_setAmbientLightGain
  8081  07EB  082A               	movf	??_setAmbientLightGain,w
  8082  07EC  05AB               	andwf	setAmbientLightGain@drive,f
  8083                           
  8084                           ;APDS9960.c: 222:     val &= 0b11111100;
  8085  07ED  30FC               	movlw	252
  8086  07EE  00AA               	movwf	??_setAmbientLightGain
  8087  07EF  082A               	movf	??_setAmbientLightGain,w
  8088  07F0  05AC               	andwf	setAmbientLightGain@val,f
  8089                           
  8090                           ;APDS9960.c: 223:     val |= drive;
  8091  07F1  082B               	movf	setAmbientLightGain@drive,w
  8092  07F2  00AA               	movwf	??_setAmbientLightGain
  8093  07F3  082A               	movf	??_setAmbientLightGain,w
  8094  07F4  04AC               	iorwf	setAmbientLightGain@val,f
  8095                           
  8096                           ;APDS9960.c: 226:     if( !wireWriteDataByte(0x8F, val) ) {
  8097  07F5  082C               	movf	setAmbientLightGain@val,w
  8098  07F6  00AA               	movwf	??_setAmbientLightGain
  8099  07F7  082A               	movf	??_setAmbientLightGain,w
  8100  07F8  00A6               	movwf	wireWriteDataByte@val
  8101  07F9  308F               	movlw	143
  8102  07FA  3189  21CC         	fcall	_wireWriteDataByte
  8103  07FC  0008               	return
  8104  07FD                     __end_of_setAmbientLightGain:	
  8105                           
  8106                           	psect	text14
  8107  0899                     __ptext14:	
  8108 ;; *************** function _i2c1_driver_open *****************
  8109 ;; Defined at:
  8110 ;;		line 83 in file "mcc_generated_files/i2c1_driver.c"
  8111 ;; Parameters:    Size  Location     Type
  8112 ;;		None
  8113 ;; Auto vars:     Size  Location     Type
  8114 ;;		None
  8115 ;; Return value:  Size  Location     Type
  8116 ;;		None               void
  8117 ;; Registers used:
  8118 ;;		wreg, status,2
  8119 ;; Tracked objects:
  8120 ;;		On entry : 0/0
  8121 ;;		On exit  : 0/0
  8122 ;;		Unchanged: 0/0
  8123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8124 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8125 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8126 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8127 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8128 ;;Total ram usage:        0 bytes
  8129 ;; Hardware stack levels used:    1
  8130 ;; Hardware stack levels required when called:    5
  8131 ;; This function calls:
  8132 ;;		Nothing
  8133 ;; This function is called by:
  8134 ;;		_initialize
  8135 ;;		_i2c_open
  8136 ;;		_InitI2C
  8137 ;; This function uses a non-reentrant model
  8138 ;;
  8139                           
  8140                           
  8141                           ;psect for function _i2c1_driver_open
  8142  0899                     _i2c1_driver_open:	
  8143                           
  8144                           ;incstack = 0
  8145                           ; Regs used in _i2c1_driver_open: [wreg+status,2]
  8146  0899  0024               	movlb	4	; select bank4
  8147  089A  1A95               	btfsc	21,5	;volatile
  8148  089B  0008               	return
  8149  089C  0194               	clrf	20	;volatile
  8150  089D  3028               	movlw	40
  8151  089E  0095               	movwf	21	;volatile
  8152  089F  0196               	clrf	22	;volatile
  8153  08A0  3003               	movlw	3
  8154  08A1  0092               	movwf	18	;volatile
  8155  08A2  0008               	return
  8156  08A3                     __end_of_i2c1_driver_open:	
  8157                           
  8158                           	psect	text15
  8159  06FB                     __ptext15:	
  8160 ;; *************** function _handleGesture *****************
  8161 ;; Defined at:
  8162 ;;		line 142 in file "main.c"
  8163 ;; Parameters:    Size  Location     Type
  8164 ;;		None
  8165 ;; Auto vars:     Size  Location     Type
  8166 ;;		None
  8167 ;; Return value:  Size  Location     Type
  8168 ;;                  1    wreg      void 
  8169 ;; Registers used:
  8170 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8171 ;; Tracked objects:
  8172 ;;		On entry : 0/0
  8173 ;;		On exit  : 0/0
  8174 ;;		Unchanged: 0/0
  8175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8176 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8177 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8178 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8179 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8180 ;;Total ram usage:        1 bytes
  8181 ;; Hardware stack levels used:    1
  8182 ;; Hardware stack levels required when called:   10
  8183 ;; This function calls:
  8184 ;;		_Display_Name
  8185 ;;		_readGesture
  8186 ;; This function is called by:
  8187 ;;		_main
  8188 ;; This function uses a non-reentrant model
  8189 ;;
  8190                           
  8191                           
  8192                           ;psect for function _handleGesture
  8193  06FB                     _handleGesture:	
  8194                           
  8195                           ;main.c: 143:     switch(readGesture()) {
  8196                           
  8197                           ;incstack = 0
  8198                           ; Regs used in _handleGesture: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8199  06FB  2F5B               	goto	l7610
  8200  06FC                     l7576:	
  8201                           
  8202                           ;main.c: 145:             brightness++;
  8203  06FC  3001               	movlw	1
  8204  06FD  07DE               	addwf	_brightness,f
  8205  06FE  3000               	movlw	0
  8206  06FF  3DDF               	addwfc	_brightness+1,f
  8207                           
  8208                           ;main.c: 146:             if(brightness > 7) {
  8209  0700  085F               	movf	_brightness+1,w
  8210  0701  3A80               	xorlw	128
  8211  0702  00DB               	movwf	??_handleGesture
  8212  0703  3080               	movlw	128
  8213  0704  025B               	subwf	??_handleGesture,w
  8214  0705  3008               	movlw	8
  8215  0706  1903               	btfsc	3,2
  8216  0707  025E               	subwf	_brightness,w
  8217  0708  1C03               	skipc
  8218  0709  2F0F               	goto	l929
  8219                           
  8220                           ;main.c: 147:                 brightness = 7;
  8221  070A  3007               	movlw	7
  8222  070B  0020               	movlb	0	; select bank0
  8223  070C  00DE               	movwf	_brightness
  8224  070D  3000               	movlw	0
  8225  070E  00DF               	movwf	_brightness+1
  8226  070F                     l929:	
  8227                           ;main.c: 148:             }
  8228                           
  8229                           
  8230                           ;main.c: 149:             _delay((unsigned long)((200)*(500000/4000.0)));
  8231  070F  3021               	movlw	33
  8232  0710  0020               	movlb	0	; select bank0
  8233  0711  00DB               	movwf	??_handleGesture
  8234  0712  3076               	movlw	118
  8235  0713                     u7047:	
  8236  0713  0B89               	decfsz	9,f
  8237  0714  2F13               	goto	u7047
  8238  0715  0BDB               	decfsz	??_handleGesture,f
  8239  0716  2F13               	goto	u7047
  8240  0717  0000               	nop
  8241                           
  8242                           ;main.c: 150:             break;
  8243  0718  2F78               	goto	l7612
  8244  0719                     l7580:	
  8245                           
  8246                           ;main.c: 152:             --brightness;
  8247  0719  30FF               	movlw	255
  8248  071A  07DE               	addwf	_brightness,f
  8249  071B  30FF               	movlw	255
  8250  071C  3DDF               	addwfc	_brightness+1,f
  8251                           
  8252                           ;main.c: 153:             if(brightness < 0) {
  8253  071D  1FDF               	btfss	_brightness+1,7
  8254  071E  2F0F               	goto	l929
  8255                           
  8256                           ;main.c: 154:                 brightness = 0;
  8257  071F  01DE               	clrf	_brightness
  8258  0720  01DF               	clrf	_brightness+1
  8259  0721  2F0F               	goto	l929
  8260  0722                     l7588:	
  8261                           
  8262                           ;main.c: 159:             printed = 0;
  8263  0722  01ED               	clrf	_printed
  8264                           
  8265                           ;main.c: 162:             name++;
  8266  0723  3001               	movlw	1
  8267  0724  07E0               	addwf	_name,f
  8268  0725  3000               	movlw	0
  8269  0726  3DE1               	addwfc	_name+1,f
  8270                           
  8271                           ;main.c: 163:             if(name > 3) {
  8272  0727  0861               	movf	_name+1,w
  8273  0728  3A80               	xorlw	128
  8274  0729  00DB               	movwf	??_handleGesture
  8275  072A  3080               	movlw	128
  8276  072B  025B               	subwf	??_handleGesture,w
  8277  072C  1D03               	skipz
  8278  072D  2F30               	goto	u6735
  8279  072E  3004               	movlw	4
  8280  072F  0260               	subwf	_name,w
  8281  0730                     u6735:	
  8282  0730  1C03               	skipc
  8283  0731  2F35               	goto	l7596
  8284                           
  8285                           ;main.c: 164:                 name = 0;
  8286  0732  0020               	movlb	0	; select bank0
  8287  0733  01E0               	clrf	_name
  8288  0734  01E1               	clrf	_name+1
  8289  0735                     l7596:	
  8290                           
  8291                           ;main.c: 166:             Display_Name(names[name]);
  8292  0735  0020               	movlb	0	; select bank0
  8293  0736  3560               	lslf	_name,w
  8294  0737  3ECD               	addlw	(low (_names| (0+256)))& (0+255)
  8295  0738  0086               	movwf	6
  8296  0739  3001               	movlw	1	; select bank3/4
  8297  073A  0087               	movwf	7
  8298  073B  3F40               	moviw [0]fsr1
  8299  073C  00A5               	movwf	Display_Name@string1
  8300  073D  3F41               	moviw [1]fsr1
  8301  073E  00A6               	movwf	Display_Name@string1+1
  8302  073F  318D  251E  3186   	fcall	_Display_Name
  8303                           
  8304                           ;main.c: 167:             break;
  8305  0742  2F78               	goto	l7612
  8306  0743                     l7598:	
  8307                           
  8308                           ;main.c: 169:             printed = 0;
  8309  0743  01ED               	clrf	_printed
  8310                           
  8311                           ;main.c: 170:             --name;
  8312  0744  30FF               	movlw	255
  8313  0745  07E0               	addwf	_name,f
  8314  0746  30FF               	movlw	255
  8315  0747  3DE1               	addwfc	_name+1,f
  8316                           
  8317                           ;main.c: 171:             if(name < 0) {
  8318  0748  1FE1               	btfss	_name+1,7
  8319  0749  2F4E               	goto	l7606
  8320                           
  8321                           ;main.c: 172:                 name = 3;
  8322  074A  3003               	movlw	3
  8323  074B  00E0               	movwf	_name
  8324  074C  3000               	movlw	0
  8325  074D  00E1               	movwf	_name+1
  8326  074E                     l7606:	
  8327                           
  8328                           ;main.c: 174:             Display_Name(names[name]);
  8329  074E  3560               	lslf	_name,w
  8330  074F  3ECD               	addlw	(low (_names| (0+256)))& (0+255)
  8331  0750  0086               	movwf	6
  8332  0751  3001               	movlw	1	; select bank3/4
  8333  0752  0087               	movwf	7
  8334  0753  3F40               	moviw [0]fsr1
  8335  0754  00A5               	movwf	Display_Name@string1
  8336  0755  3F41               	moviw [1]fsr1
  8337  0756  00A6               	movwf	Display_Name@string1+1
  8338  0757  318D  251E  3186   	fcall	_Display_Name
  8339                           
  8340                           ;main.c: 175:             break;
  8341  075A  2F78               	goto	l7612
  8342  075B                     l7610:	
  8343  075B  3186  2608  3186   	fcall	_readGesture
  8344                           
  8345                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8346                           ; Switch size 1, requested type "simple"
  8347                           ; Number of cases is 1, Range of values is 0 to 0
  8348                           ; switch strategies available:
  8349                           ; Name         Instructions Cycles
  8350                           ; simple_byte            4     3 (average)
  8351                           ; direct_byte            8     6 (fixed)
  8352                           ; jumptable            260     6 (fixed)
  8353                           ;	Chosen strategy is simple_byte
  8354  075E  0020               	movlb	0	; select bank0
  8355  075F  0850               	movf	?_readGesture+1,w
  8356  0760  3A00               	xorlw	0	; case 0
  8357  0761  1903               	skipnz
  8358  0762  2F64               	goto	l7920
  8359  0763  2F78               	goto	l7612
  8360  0764                     l7920:	
  8361                           
  8362                           ; Switch size 1, requested type "simple"
  8363                           ; Number of cases is 6, Range of values is 1 to 6
  8364                           ; switch strategies available:
  8365                           ; Name         Instructions Cycles
  8366                           ; simple_byte           19    10 (average)
  8367                           ; direct_byte           21     9 (fixed)
  8368                           ; jumptable            263     9 (fixed)
  8369                           ;	Chosen strategy is simple_byte
  8370  0764  084F               	movf	?_readGesture,w
  8371  0765  3A01               	xorlw	1	; case 1
  8372  0766  1903               	skipnz
  8373  0767  2F22               	goto	l7588
  8374  0768  3A03               	xorlw	3	; case 2
  8375  0769  1903               	skipnz
  8376  076A  2F43               	goto	l7598
  8377  076B  3A01               	xorlw	1	; case 3
  8378  076C  1903               	skipnz
  8379  076D  2EFC               	goto	l7576
  8380  076E  3A07               	xorlw	7	; case 4
  8381  076F  1903               	skipnz
  8382  0770  2F19               	goto	l7580
  8383  0771  3A01               	xorlw	1	; case 5
  8384  0772  1903               	skipnz
  8385  0773  2F78               	goto	l7612
  8386  0774  3A03               	xorlw	3	; case 6
  8387  0775  1903               	skipnz
  8388  0776  2F78               	goto	l7612
  8389  0777  2F78               	goto	l7612
  8390  0778                     l7612:	
  8391                           
  8392                           ;main.c: 186:     printed = 0;
  8393  0778  0020               	movlb	0	; select bank0
  8394  0779  01ED               	clrf	_printed
  8395  077A  0008               	return
  8396  077B                     __end_of_handleGesture:	
  8397                           
  8398                           	psect	text16
  8399  0608                     __ptext16:	
  8400 ;; *************** function _readGesture *****************
  8401 ;; Defined at:
  8402 ;;		line 556 in file "APDS9960.c"
  8403 ;; Parameters:    Size  Location     Type
  8404 ;;		None
  8405 ;; Auto vars:     Size  Location     Type
  8406 ;;  fifo_data      64    0[BANK2 ] unsigned char [64]
  8407 ;;  fifo_data2     64    0[BANK1 ] unsigned char [64]
  8408 ;;  i               2   57[BANK0 ] int 
  8409 ;;  bytes_read      2   54[BANK0 ] int 
  8410 ;;  motion          2   51[BANK0 ] int 
  8411 ;;  fifo_level      1   56[BANK0 ] unsigned char 
  8412 ;;  gstatus         1   53[BANK0 ] unsigned char 
  8413 ;; Return value:  Size  Location     Type
  8414 ;;                  2   47[BANK0 ] int 
  8415 ;; Registers used:
  8416 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8417 ;; Tracked objects:
  8418 ;;		On entry : 0/0
  8419 ;;		On exit  : 0/0
  8420 ;;		Unchanged: 0/0
  8421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8422 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8423 ;;      Locals:         0       8      64      64       0       0       0       0       0       0       0       0       
      +0       0
  8424 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8425 ;;      Totals:         0      12      64      64       0       0       0       0       0       0       0       0       
      +0       0
  8426 ;;Total ram usage:      140 bytes
  8427 ;; Hardware stack levels used:    1
  8428 ;; Hardware stack levels required when called:    9
  8429 ;; This function calls:
  8430 ;;		_decodeGesture
  8431 ;;		_getMode
  8432 ;;		_isGestureAvailable
  8433 ;;		_processGestureData
  8434 ;;		_resetGestureParameters
  8435 ;;		_wireReadDataBlock
  8436 ;;		_wireReadDataByte
  8437 ;; This function is called by:
  8438 ;;		_handleGesture
  8439 ;; This function uses a non-reentrant model
  8440 ;;
  8441                           
  8442                           
  8443                           ;psect for function _readGesture
  8444  0608                     _readGesture:	
  8445                           
  8446                           ;APDS9960.c: 559:     int bytes_read = 0;
  8447                           
  8448                           ;incstack = 0
  8449                           ; Regs used in _readGesture: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8450  0608  0020               	movlb	0	; select bank0
  8451  0609  01D6               	clrf	readGesture@bytes_read
  8452  060A  01D7               	clrf	readGesture@bytes_read+1
  8453                           
  8454                           ;APDS9960.c: 560:     uint8_t fifo_data[64];;APDS9960.c: 561:     uint8_t fifo_data2[64]
      +                          ;;APDS9960.c: 562:     uint8_t gstatus;;APDS9960.c: 563:     int motion;;APDS9960.c: 564
      +                          :     int i;;APDS9960.c: 567:     if( !isGestureAvailable() || !(getMode() & 0b01000001)
      +                           ) {
  8455  060B  3188  20F7  3186   	fcall	_isGestureAvailable
  8456  060E  3A00               	xorlw	0
  8457  060F  1903               	skipnz
  8458  0610  2E17               	goto	l6980
  8459  0611  3188  2090  3186   	fcall	_getMode
  8460  0614  3941               	andlw	65
  8461  0615  1D03               	btfss	3,2
  8462  0616  2ECC               	goto	l6984
  8463  0617                     l6980:	
  8464                           
  8465                           ;APDS9960.c: 568:         return DIR_NONE;
  8466  0617  0020               	movlb	0	; select bank0
  8467  0618  01CF               	clrf	?_readGesture
  8468  0619  01D0               	clrf	?_readGesture+1
  8469  061A  0008               	return
  8470  061B                     l6990:	
  8471                           ;APDS9960.c: 569:     }
  8472                           
  8473                           
  8474                           ;APDS9960.c: 584:         {;APDS9960.c: 586:          fifo_level= wireReadDataByte(0xAE)
      +                          ;
  8475  061B  30AE               	movlw	174
  8476  061C  318A  225B  3186   	fcall	_wireReadDataByte
  8477  061F  0020               	movlb	0	; select bank0
  8478  0620  00D1               	movwf	??_readGesture
  8479  0621  0851               	movf	??_readGesture,w
  8480  0622  00D8               	movwf	readGesture@fifo_level
  8481                           
  8482                           ;APDS9960.c: 590:             if( fifo_level > 0) {
  8483  0623  0858               	movf	readGesture@fifo_level,w
  8484  0624  1903               	btfsc	3,2
  8485  0625  2ECC               	goto	l6984
  8486                           
  8487                           ;APDS9960.c: 592:               if(fifo_level < 17)
  8488  0626  3011               	movlw	17
  8489  0627  0258               	subwf	readGesture@fifo_level,w
  8490  0628  1803               	skipnc
  8491  0629  2E2E               	goto	l6998
  8492                           
  8493                           ;APDS9960.c: 593:               {;APDS9960.c: 594:                 bytes_read = wireRead
      +                          DataBlock( 0xFC,
  8494  062A  3020               	movlw	low readGesture@fifo_data
  8495  062B  00A6               	movwf	wireReadDataBlock@val
  8496  062C  3001               	movlw	high readGesture@fifo_data
  8497  062D  2E31               	goto	L1
  8498  062E                     l6998:	
  8499                           ;APDS9960.c: 597:               } else
  8500                           
  8501                           
  8502                           ;APDS9960.c: 598:               {;APDS9960.c: 599:                 bytes_read = wireRead
      +                          DataBlock( 0xFC,
  8503  062E  30A0               	movlw	low readGesture@fifo_data2
  8504  062F  00A6               	movwf	wireReadDataBlock@val
  8505  0630  3000               	movlw	high readGesture@fifo_data2
  8506  0631                     L1:	
  8507  0631  00A7               	movwf	wireReadDataBlock@val+1
  8508  0632  0858               	movf	readGesture@fifo_level,w
  8509  0633  00D1               	movwf	??_readGesture
  8510  0634  01D2               	clrf	??_readGesture+1
  8511  0635  35D1               	lslf	??_readGesture,f
  8512  0636  0DD2               	rlf	??_readGesture+1,f
  8513  0637  35D1               	lslf	??_readGesture,f
  8514  0638  0DD2               	rlf	??_readGesture+1,f
  8515  0639  0851               	movf	??_readGesture,w
  8516  063A  00A8               	movwf	wireReadDataBlock@len
  8517  063B  0852               	movf	??_readGesture+1,w
  8518  063C  00A9               	movwf	wireReadDataBlock@len+1
  8519  063D  30FC               	movlw	252
  8520  063E  318E  266E  3186   	fcall	_wireReadDataBlock
  8521  0641  0020               	movlb	0	; select bank0
  8522  0642  0827               	movf	?_wireReadDataBlock+1,w
  8523  0643  00D7               	movwf	readGesture@bytes_read+1
  8524  0644  0826               	movf	?_wireReadDataBlock,w
  8525  0645  00D6               	movwf	readGesture@bytes_read
  8526                           
  8527                           ;APDS9960.c: 605:                 if( bytes_read == -1 )
  8528  0646  0A56               	incf	readGesture@bytes_read,w
  8529  0647  1D03               	skipz
  8530  0648  2E51               	goto	l7006
  8531  0649  0A57               	incf	readGesture@bytes_read+1,w
  8532  064A  1D03               	btfss	3,2
  8533  064B  2E51               	goto	l7006
  8534                           
  8535                           ;APDS9960.c: 606:                 {;APDS9960.c: 607:                     return 0xFF;
  8536  064C  30FF               	movlw	255
  8537  064D  00CF               	movwf	?_readGesture
  8538  064E  3000               	movlw	0
  8539  064F  00D0               	movwf	?_readGesture+1
  8540  0650  0008               	return
  8541  0651                     l7006:	
  8542                           
  8543                           ;APDS9960.c: 612:                 if( bytes_read >= 4 )
  8544  0651  0857               	movf	readGesture@bytes_read+1,w
  8545  0652  3A80               	xorlw	128
  8546  0653  00D1               	movwf	??_readGesture
  8547  0654  3080               	movlw	128
  8548  0655  0251               	subwf	??_readGesture,w
  8549  0656  1D03               	skipz
  8550  0657  2E5A               	goto	u6055
  8551  0658  3004               	movlw	4
  8552  0659  0256               	subwf	readGesture@bytes_read,w
  8553  065A                     u6055:	
  8554  065A  1C03               	skipc
  8555  065B  2ECC               	goto	l6984
  8556                           
  8557                           ;APDS9960.c: 613:                 {;APDS9960.c: 615:                     for( i = 0; i <
      +                           bytes_read; i += 4 ) {
  8558  065C  0020               	movlb	0	; select bank0
  8559  065D  01D9               	clrf	readGesture@i
  8560  065E  01DA               	clrf	readGesture@i+1
  8561  065F                     l7018:	
  8562  065F  085A               	movf	readGesture@i+1,w
  8563  0660  3A80               	xorlw	128
  8564  0661  00D1               	movwf	??_readGesture
  8565  0662  0857               	movf	readGesture@bytes_read+1,w
  8566  0663  3A80               	xorlw	128
  8567  0664  0251               	subwf	??_readGesture,w
  8568  0665  1D03               	skipz
  8569  0666  2E69               	goto	u6065
  8570  0667  0856               	movf	readGesture@bytes_read,w
  8571  0668  0259               	subwf	readGesture@i,w
  8572  0669                     u6065:	
  8573  0669  1803               	btfsc	3,0
  8574  066A  2EC0               	goto	l7020
  8575                           
  8576                           ;APDS9960.c: 616:                         gesture_data_.u_data[gesture_data_.index] = fi
      +                          fo_data[i + 0];
  8577  066B  0020               	movlb	0	; select bank0
  8578  066C  0859               	movf	readGesture@i,w
  8579  066D  3E20               	addlw	(low (readGesture@fifo_data| (0+256)))& (0+255)
  8580  066E  0086               	movwf	6
  8581  066F  3001               	movlw	1	; select bank2/3
  8582  0670  0087               	movwf	7
  8583  0671  0801               	movf	1,w
  8584  0672  00D1               	movwf	??_readGesture
  8585  0673  0024               	movlb	4	; select bank4
  8586  0674  0860               	movf	(_gesture_data_^(0+512)+64),w
  8587  0675  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  8588  0676  0086               	movwf	6
  8589  0677  3002               	movlw	2	; select bank4/5
  8590  0678  0087               	movwf	7
  8591  0679  0020               	movlb	0	; select bank0
  8592  067A  0851               	movf	??_readGesture,w
  8593  067B  0081               	movwf	1
  8594                           
  8595                           ;APDS9960.c: 618:                         gesture_data_.d_data[gesture_data_.index] = fi
      +                          fo_data[i + 1];
  8596  067C  0859               	movf	readGesture@i,w
  8597  067D  3E01               	addlw	1
  8598  067E  3E20               	addlw	(low (readGesture@fifo_data| (0+256)))& (0+255)
  8599  067F  0086               	movwf	6
  8600  0680  3001               	movlw	1	; select bank2/3
  8601  0681  0087               	movwf	7
  8602  0682  0801               	movf	1,w
  8603  0683  00D1               	movwf	??_readGesture
  8604  0684  0024               	movlb	4	; select bank4
  8605  0685  0860               	movf	(_gesture_data_^(0+512)+64),w
  8606  0686  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  8607  0687  0086               	movwf	6
  8608  0688  3002               	movlw	2	; select bank4/5
  8609  0689  0087               	movwf	7
  8610  068A  0020               	movlb	0	; select bank0
  8611  068B  0851               	movf	??_readGesture,w
  8612  068C  0081               	movwf	1
  8613                           
  8614                           ;APDS9960.c: 620:                         gesture_data_.l_data[gesture_data_.index] = fi
      +                          fo_data[i + 2];
  8615  068D  0859               	movf	readGesture@i,w
  8616  068E  3E02               	addlw	2
  8617  068F  3E20               	addlw	(low (readGesture@fifo_data| (0+256)))& (0+255)
  8618  0690  0086               	movwf	6
  8619  0691  3001               	movlw	1	; select bank2/3
  8620  0692  0087               	movwf	7
  8621  0693  0801               	movf	1,w
  8622  0694  00D1               	movwf	??_readGesture
  8623  0695  0024               	movlb	4	; select bank4
  8624  0696  0860               	movf	(_gesture_data_^(0+512)+64),w
  8625  0697  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  8626  0698  0086               	movwf	6
  8627  0699  3002               	movlw	2	; select bank4/5
  8628  069A  0087               	movwf	7
  8629  069B  0020               	movlb	0	; select bank0
  8630  069C  0851               	movf	??_readGesture,w
  8631  069D  0081               	movwf	1
  8632                           
  8633                           ;APDS9960.c: 622:                         gesture_data_.r_data[gesture_data_.index] = fi
      +                          fo_data[i + 3];
  8634  069E  0859               	movf	readGesture@i,w
  8635  069F  3E03               	addlw	3
  8636  06A0  3E20               	addlw	(low (readGesture@fifo_data| (0+256)))& (0+255)
  8637  06A1  0086               	movwf	6
  8638  06A2  3001               	movlw	1	; select bank2/3
  8639  06A3  0087               	movwf	7
  8640  06A4  0801               	movf	1,w
  8641  06A5  00D1               	movwf	??_readGesture
  8642  06A6  0024               	movlb	4	; select bank4
  8643  06A7  0860               	movf	(_gesture_data_^(0+512)+64),w
  8644  06A8  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  8645  06A9  0086               	movwf	6
  8646  06AA  3002               	movlw	2	; select bank4/5
  8647  06AB  0087               	movwf	7
  8648  06AC  0020               	movlb	0	; select bank0
  8649  06AD  0851               	movf	??_readGesture,w
  8650  06AE  0081               	movwf	1
  8651                           
  8652                           ;APDS9960.c: 624:                         gesture_data_.index++;
  8653  06AF  3001               	movlw	1
  8654  06B0  00D1               	movwf	??_readGesture
  8655  06B1  0851               	movf	??_readGesture,w
  8656  06B2  0024               	movlb	4	; select bank4
  8657  06B3  07E0               	addwf	(_gesture_data_^(0+512)+64),f
  8658                           
  8659                           ;APDS9960.c: 625:                         gesture_data_.total_gestures++;
  8660  06B4  3001               	movlw	1
  8661  06B5  0020               	movlb	0	; select bank0
  8662  06B6  00D1               	movwf	??_readGesture
  8663  06B7  0851               	movf	??_readGesture,w
  8664  06B8  0024               	movlb	4	; select bank4
  8665  06B9  07E1               	addwf	(_gesture_data_^(0+512)+65),f
  8666                           
  8667                           ;APDS9960.c: 626:                     }
  8668  06BA  3004               	movlw	4
  8669  06BB  0020               	movlb	0	; select bank0
  8670  06BC  07D9               	addwf	readGesture@i,f
  8671  06BD  3000               	movlw	0
  8672  06BE  3DDA               	addwfc	readGesture@i+1,f
  8673  06BF  2E5F               	goto	l7018
  8674  06C0                     l7020:	
  8675                           
  8676                           ;APDS9960.c: 629:                     if( processGestureData() )
  8677  06C0  3180  208A  3186   	fcall	_processGestureData
  8678  06C3  3A00               	xorlw	0
  8679  06C4  1903               	skipnz
  8680  06C5  2EC9               	goto	l7024
  8681                           
  8682                           ;APDS9960.c: 630:                     {;APDS9960.c: 632:                         if( dec
      +                          odeGesture() ) {
  8683  06C6  3183  2361  3186   	fcall	_decodeGesture
  8684  06C9                     l7024:	
  8685                           
  8686                           ;APDS9960.c: 638:                     gesture_data_.index = 0;
  8687  06C9  0024               	movlb	4	; select bank4
  8688  06CA  01E0               	clrf	(_gesture_data_^(0+512)+64)
  8689                           
  8690                           ;APDS9960.c: 639:                     gesture_data_.total_gestures = 0;
  8691  06CB  01E1               	clrf	(_gesture_data_^(0+512)+65)
  8692  06CC                     l6984:	
  8693                           
  8694                           ;APDS9960.c: 575:         _delay((unsigned long)((30)*(500000/4000.0)));
  8695  06CC  3005               	movlw	5
  8696  06CD  0020               	movlb	0	; select bank0
  8697  06CE  00D1               	movwf	??_readGesture
  8698  06CF  30DD               	movlw	221
  8699  06D0                     u7057:	
  8700  06D0  0B89               	decfsz	9,f
  8701  06D1  2ED0               	goto	u7057
  8702  06D2  0BD1               	decfsz	??_readGesture,f
  8703  06D3  2ED0               	goto	u7057
  8704  06D4  3200               	nop2
  8705                           
  8706                           ;APDS9960.c: 578:         gstatus = wireReadDataByte(0xAF);
  8707  06D5  30AF               	movlw	175
  8708  06D6  318A  225B  3186   	fcall	_wireReadDataByte
  8709  06D9  0020               	movlb	0	; select bank0
  8710  06DA  00D1               	movwf	??_readGesture
  8711  06DB  0851               	movf	??_readGesture,w
  8712  06DC  00D5               	movwf	readGesture@gstatus
  8713                           
  8714                           ;APDS9960.c: 583:         if( (gstatus & 0b00000001) == 0b00000001 )
  8715  06DD  1855               	btfsc	readGesture@gstatus,0
  8716  06DE  2E1B               	goto	l6990
  8717                           
  8718                           ;APDS9960.c: 645:             _delay((unsigned long)((30)*(500000/4000.0)));
  8719  06DF  3005               	movlw	5
  8720  06E0  0020               	movlb	0	; select bank0
  8721  06E1  00D1               	movwf	??_readGesture
  8722  06E2  30DD               	movlw	221
  8723  06E3                     u7067:	
  8724  06E3  0B89               	decfsz	9,f
  8725  06E4  2EE3               	goto	u7067
  8726  06E5  0BD1               	decfsz	??_readGesture,f
  8727  06E6  2EE3               	goto	u7067
  8728  06E7  3200               	nop2
  8729                           
  8730                           ;APDS9960.c: 646:             decodeGesture();
  8731  06E8  3183  2361  3186   	fcall	_decodeGesture
  8732                           
  8733                           ;APDS9960.c: 647:             motion = gesture_motion_;
  8734  06EB  0022               	movlb	2	; select bank2
  8735  06EC  0869               	movf	(_gesture_motion_+1)^(0+256),w
  8736  06ED  0020               	movlb	0	; select bank0
  8737  06EE  00D4               	movwf	readGesture@motion+1
  8738  06EF  0022               	movlb	2	; select bank2
  8739  06F0  0868               	movf	_gesture_motion_^(0+256),w
  8740  06F1  0020               	movlb	0	; select bank0
  8741  06F2  00D3               	movwf	readGesture@motion
  8742                           
  8743                           ;APDS9960.c: 649:             resetGestureParameters();
  8744  06F3  3189  2182         	fcall	_resetGestureParameters
  8745                           
  8746                           ;APDS9960.c: 651:             return motion;
  8747  06F5  0020               	movlb	0	; select bank0
  8748  06F6  0854               	movf	readGesture@motion+1,w
  8749  06F7  00D0               	movwf	?_readGesture+1
  8750  06F8  0853               	movf	readGesture@motion,w
  8751  06F9  00CF               	movwf	?_readGesture
  8752  06FA  0008               	return
  8753  06FB                     __end_of_readGesture:	
  8754                           
  8755                           	psect	text17
  8756  0E6E                     __ptext17:	
  8757 ;; *************** function _wireReadDataBlock *****************
  8758 ;; Defined at:
  8759 ;;		line 847 in file "APDS9960.c"
  8760 ;; Parameters:    Size  Location     Type
  8761 ;;  reg             1    wreg     unsigned char 
  8762 ;;  val             2    6[BANK0 ] PTR unsigned char 
  8763 ;;		 -> readGesture@fifo_data2(64), readGesture@fifo_data(64), 
  8764 ;;  len             2    8[BANK0 ] unsigned int 
  8765 ;; Auto vars:     Size  Location     Type
  8766 ;;  reg             1   15[BANK0 ] unsigned char 
  8767 ;;  j               1   16[BANK0 ] unsigned char 
  8768 ;; Return value:  Size  Location     Type
  8769 ;;                  2    6[BANK0 ] int 
  8770 ;; Registers used:
  8771 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8772 ;; Tracked objects:
  8773 ;;		On entry : 0/0
  8774 ;;		On exit  : 0/0
  8775 ;;		Unchanged: 0/0
  8776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8777 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8778 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8779 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8780 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8781 ;;Total ram usage:       11 bytes
  8782 ;; Hardware stack levels used:    1
  8783 ;; Hardware stack levels required when called:    7
  8784 ;; This function calls:
  8785 ;;		_I2C_ReStart
  8786 ;;		_I2C_Read_Byte
  8787 ;;		_I2C_Send_NACK
  8788 ;;		_I2C_Start
  8789 ;;		_I2C_Stop
  8790 ;;		_I2C_Write_Byte
  8791 ;; This function is called by:
  8792 ;;		_readGesture
  8793 ;; This function uses a non-reentrant model
  8794 ;;
  8795                           
  8796                           
  8797                           ;psect for function _wireReadDataBlock
  8798  0E6E                     _wireReadDataBlock:	
  8799                           
  8800                           ;incstack = 0
  8801                           ; Regs used in _wireReadDataBlock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8802                           ;wireReadDataBlock@reg stored from wreg
  8803  0E6E  0020               	movlb	0	; select bank0
  8804  0E6F  00AF               	movwf	wireReadDataBlock@reg
  8805                           
  8806                           ;APDS9960.c: 851:     I2C_Start();
  8807  0E70  3197  27B7  318E   	fcall	_I2C_Start
  8808                           
  8809                           ;APDS9960.c: 852:     I2C_Write_Byte((0x39 << 1 )| 0x00);
  8810  0E73  3072               	movlw	114
  8811  0E74  3189  21E7  318E   	fcall	_I2C_Write_Byte
  8812                           
  8813                           ;APDS9960.c: 854:     I2C_Write_Byte(reg);
  8814  0E77  0020               	movlb	0	; select bank0
  8815  0E78  082F               	movf	wireReadDataBlock@reg,w
  8816  0E79  3189  21E7  318E   	fcall	_I2C_Write_Byte
  8817                           
  8818                           ;APDS9960.c: 856:     for(j= 0; j < len ; j++)
  8819  0E7C  0020               	movlb	0	; select bank0
  8820  0E7D  01B0               	clrf	wireReadDataBlock@j
  8821  0E7E                     l6530:	
  8822  0E7E  0830               	movf	wireReadDataBlock@j,w
  8823  0E7F  00AA               	movwf	??_wireReadDataBlock
  8824  0E80  01AB               	clrf	??_wireReadDataBlock+1
  8825  0E81  0829               	movf	wireReadDataBlock@len+1,w
  8826  0E82  022B               	subwf	??_wireReadDataBlock+1,w
  8827  0E83  1D03               	skipz
  8828  0E84  2E87               	goto	u5215
  8829  0E85  0828               	movf	wireReadDataBlock@len,w
  8830  0E86  022A               	subwf	??_wireReadDataBlock,w
  8831  0E87                     u5215:	
  8832  0E87  1803               	btfsc	3,0
  8833  0E88  2EAD               	goto	l6532
  8834                           
  8835                           ;APDS9960.c: 857:     {;APDS9960.c: 859:       I2C_ReStart();
  8836  0E89  3197  27A8  318E   	fcall	_I2C_ReStart
  8837                           
  8838                           ;APDS9960.c: 860:       I2C_Write_Byte((0x39 << 1) | 0x01);
  8839  0E8C  3073               	movlw	115
  8840  0E8D  3189  21E7  318E   	fcall	_I2C_Write_Byte
  8841                           
  8842                           ;APDS9960.c: 861:       val[j]=I2C_Read_Byte();
  8843  0E90  3188  20A3  318E   	fcall	_I2C_Read_Byte
  8844  0E93  0020               	movlb	0	; select bank0
  8845  0E94  00AA               	movwf	??_wireReadDataBlock
  8846  0E95  0830               	movf	wireReadDataBlock@j,w
  8847  0E96  00AB               	movwf	??_wireReadDataBlock+1
  8848  0E97  01AC               	clrf	??_wireReadDataBlock+2
  8849  0E98  082B               	movf	??_wireReadDataBlock+1,w
  8850  0E99  0726               	addwf	wireReadDataBlock@val,w
  8851  0E9A  00AD               	movwf	??_wireReadDataBlock+3
  8852  0E9B  082C               	movf	??_wireReadDataBlock+2,w
  8853  0E9C  3D27               	addwfc	wireReadDataBlock@val+1,w
  8854  0E9D  00AE               	movwf	??_wireReadDataBlock+4
  8855  0E9E  082D               	movf	??_wireReadDataBlock+3,w
  8856  0E9F  0086               	movwf	6
  8857  0EA0  082E               	movf	??_wireReadDataBlock+4,w
  8858  0EA1  0087               	movwf	7
  8859  0EA2  082A               	movf	??_wireReadDataBlock,w
  8860  0EA3  0081               	movwf	1
  8861                           
  8862                           ;APDS9960.c: 862:       I2C_Send_NACK();
  8863  0EA4  3197  27B1  318E   	fcall	_I2C_Send_NACK
  8864                           
  8865                           ;APDS9960.c: 864:     }
  8866  0EA7  3001               	movlw	1
  8867  0EA8  0020               	movlb	0	; select bank0
  8868  0EA9  00AA               	movwf	??_wireReadDataBlock
  8869  0EAA  082A               	movf	??_wireReadDataBlock,w
  8870  0EAB  07B0               	addwf	wireReadDataBlock@j,f
  8871  0EAC  2E7E               	goto	l6530
  8872  0EAD                     l6532:	
  8873                           
  8874                           ;APDS9960.c: 866:     I2C_Stop();
  8875  0EAD  3187  27FD         	fcall	_I2C_Stop
  8876                           
  8877                           ;APDS9960.c: 867:     return (int)j;
  8878  0EAF  0020               	movlb	0	; select bank0
  8879  0EB0  0830               	movf	wireReadDataBlock@j,w
  8880  0EB1  00AA               	movwf	??_wireReadDataBlock
  8881  0EB2  01AB               	clrf	??_wireReadDataBlock+1
  8882  0EB3  082A               	movf	??_wireReadDataBlock,w
  8883  0EB4  00A6               	movwf	?_wireReadDataBlock
  8884  0EB5  082B               	movf	??_wireReadDataBlock+1,w
  8885  0EB6  00A7               	movwf	?_wireReadDataBlock+1
  8886  0EB7  0008               	return
  8887  0EB8                     __end_of_wireReadDataBlock:	
  8888                           
  8889                           	psect	text18
  8890  008A                     __ptext18:	
  8891 ;; *************** function _processGestureData *****************
  8892 ;; Defined at:
  8893 ;;		line 657 in file "APDS9960.c"
  8894 ;; Parameters:    Size  Location     Type
  8895 ;;		None
  8896 ;; Auto vars:     Size  Location     Type
  8897 ;;  i               2   45[BANK0 ] int 
  8898 ;;  lr_delta        2   43[BANK0 ] int 
  8899 ;;  ud_delta        2   41[BANK0 ] int 
  8900 ;;  lr_ratio_las    2   23[BANK0 ] int 
  8901 ;;  ud_ratio_las    2   21[BANK0 ] int 
  8902 ;;  lr_ratio_fir    2   19[BANK0 ] int 
  8903 ;;  ud_ratio_fir    2   17[BANK0 ] int 
  8904 ;;  r_first         1   40[BANK0 ] unsigned char 
  8905 ;;  l_first         1   39[BANK0 ] unsigned char 
  8906 ;;  d_first         1   38[BANK0 ] unsigned char 
  8907 ;;  u_first         1   37[BANK0 ] unsigned char 
  8908 ;;  r_last          1   36[BANK0 ] unsigned char 
  8909 ;;  l_last          1   35[BANK0 ] unsigned char 
  8910 ;;  d_last          1   34[BANK0 ] unsigned char 
  8911 ;;  u_last          1   33[BANK0 ] unsigned char 
  8912 ;; Return value:  Size  Location     Type
  8913 ;;                  1    wreg      _Bool 
  8914 ;; Registers used:
  8915 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8916 ;; Tracked objects:
  8917 ;;		On entry : 0/0
  8918 ;;		On exit  : 0/0
  8919 ;;		Unchanged: 0/0
  8920 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8921 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8922 ;;      Locals:         0      30       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8923 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8924 ;;      Totals:         0      32       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8925 ;;Total ram usage:       32 bytes
  8926 ;; Hardware stack levels used:    1
  8927 ;; Hardware stack levels required when called:    6
  8928 ;; This function calls:
  8929 ;;		___awdiv
  8930 ;;		___wmul
  8931 ;; This function is called by:
  8932 ;;		_readGesture
  8933 ;; This function uses a non-reentrant model
  8934 ;;
  8935                           
  8936                           
  8937                           ;psect for function _processGestureData
  8938  008A                     _processGestureData:	
  8939                           
  8940                           ;APDS9960.c: 659:     uint8_t u_first = 0;
  8941                           
  8942                           ;incstack = 0
  8943                           ; Regs used in _processGestureData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8944  008A  0020               	movlb	0	; select bank0
  8945  008B  01C5               	clrf	processGestureData@u_first
  8946                           
  8947                           ;APDS9960.c: 660:     uint8_t d_first = 0;
  8948  008C  01C6               	clrf	processGestureData@d_first
  8949                           
  8950                           ;APDS9960.c: 661:     uint8_t l_first = 0;
  8951  008D  01C7               	clrf	processGestureData@l_first
  8952                           
  8953                           ;APDS9960.c: 662:     uint8_t r_first = 0;
  8954  008E  01C8               	clrf	processGestureData@r_first
  8955                           
  8956                           ;APDS9960.c: 663:     uint8_t u_last = 0;
  8957  008F  01C1               	clrf	processGestureData@u_last
  8958                           
  8959                           ;APDS9960.c: 664:     uint8_t d_last = 0;
  8960  0090  01C2               	clrf	processGestureData@d_last
  8961                           
  8962                           ;APDS9960.c: 665:     uint8_t l_last = 0;
  8963  0091  01C3               	clrf	processGestureData@l_last
  8964                           
  8965                           ;APDS9960.c: 666:     uint8_t r_last = 0;
  8966  0092  01C4               	clrf	processGestureData@r_last
  8967                           
  8968                           ;APDS9960.c: 667:     int ud_ratio_first;;APDS9960.c: 668:     int lr_ratio_first;;APDS9
      +                          960.c: 669:     int ud_ratio_last;;APDS9960.c: 670:     int lr_ratio_last;;APDS9960.c: 6
      +                          71:     int ud_delta;;APDS9960.c: 672:     int lr_delta;;APDS9960.c: 673:     int i;;APD
      +                          S9960.c: 676:     if( gesture_data_.total_gestures <= 4 ) {
  8969  0093  3005               	movlw	5
  8970  0094  0024               	movlb	4	; select bank4
  8971  0095  0261               	subwf	(_gesture_data_^(0+512)+65),w
  8972  0096  1803               	skipnc
  8973  0097  289A               	goto	l6546
  8974  0098                     l6542:	
  8975                           
  8976                           ;APDS9960.c: 677:         return 0;
  8977  0098  3000               	movlw	0
  8978  0099  0008               	return
  8979  009A                     l6546:	
  8980                           
  8981                           ;APDS9960.c: 681:     if( (gesture_data_.total_gestures <= 32) && (gesture_data_.total_g
      +                          estures > 0) ) {
  8982  009A  3021               	movlw	33
  8983  009B  0261               	subwf	(_gesture_data_^(0+512)+65),w
  8984  009C  1803               	skipnc
  8985  009D  2964               	goto	l6596
  8986  009E  0861               	movf	(_gesture_data_^(0+512)+65),w
  8987  009F  1903               	btfsc	3,2
  8988  00A0  2964               	goto	l6596
  8989                           
  8990                           ;APDS9960.c: 682: ;APDS9960.c: 685:         for( i = 0; i < gesture_data_.total_gestures
      +                          ; i++ ) {
  8991  00A1  0020               	movlb	0	; select bank0
  8992  00A2  01CD               	clrf	processGestureData@i
  8993  00A3  01CE               	clrf	processGestureData@i+1
  8994  00A4  28A9               	goto	l1241
  8995  00A5                     l6562:	
  8996                           ;APDS9960.c: 695:                 break;
  8997                           
  8998                           
  8999                           ;APDS9960.c: 697:         }
  9000  00A5  3001               	movlw	1
  9001  00A6  07CD               	addwf	processGestureData@i,f
  9002  00A7  3000               	movlw	0
  9003  00A8  3DCE               	addwfc	processGestureData@i+1,f
  9004  00A9                     l1241:	
  9005  00A9  084E               	movf	processGestureData@i+1,w
  9006  00AA  3A80               	xorlw	128
  9007  00AB  00AF               	movwf	??_processGestureData
  9008  00AC  3080               	movlw	128
  9009  00AD  022F               	subwf	??_processGestureData,w
  9010  00AE  1D03               	skipz
  9011  00AF  28B4               	goto	u5295
  9012  00B0  0024               	movlb	4	; select bank4
  9013  00B1  0861               	movf	(_gesture_data_^(0+512)+65),w
  9014  00B2  0020               	movlb	0	; select bank0
  9015  00B3  024D               	subwf	processGestureData@i,w
  9016  00B4                     u5295:	
  9017  00B4  1803               	btfsc	3,0
  9018  00B5  28FF               	goto	l6564
  9019                           
  9020                           ;APDS9960.c: 686:             if( (gesture_data_.u_data[i] > 10) &&
  9021  00B6  0020               	movlb	0	; select bank0
  9022  00B7  084D               	movf	processGestureData@i,w
  9023  00B8  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  9024  00B9  0086               	movwf	6
  9025  00BA  3002               	movlw	2	; select bank4/5
  9026  00BB  0087               	movwf	7
  9027  00BC  300B               	movlw	11
  9028  00BD  0201               	subwf	1,w
  9029  00BE  1C03               	skipc
  9030  00BF  28A5               	goto	l6562
  9031  00C0  084D               	movf	processGestureData@i,w
  9032  00C1  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  9033  00C2  0086               	movwf	6
  9034  00C3  3002               	movlw	2	; select bank4/5
  9035  00C4  0087               	movwf	7
  9036  00C5  300B               	movlw	11
  9037  00C6  0201               	subwf	1,w
  9038  00C7  1C03               	skipc
  9039  00C8  28A5               	goto	l6562
  9040  00C9  084D               	movf	processGestureData@i,w
  9041  00CA  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  9042  00CB  0086               	movwf	6
  9043  00CC  3002               	movlw	2	; select bank4/5
  9044  00CD  0087               	movwf	7
  9045  00CE  300B               	movlw	11
  9046  00CF  0201               	subwf	1,w
  9047  00D0  1C03               	skipc
  9048  00D1  28A5               	goto	l6562
  9049  00D2  084D               	movf	processGestureData@i,w
  9050  00D3  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  9051  00D4  0086               	movwf	6
  9052  00D5  3002               	movlw	2	; select bank4/5
  9053  00D6  0087               	movwf	7
  9054  00D7  300B               	movlw	11
  9055  00D8  0201               	subwf	1,w
  9056  00D9  1C03               	skipc
  9057  00DA  28A5               	goto	l6562
  9058                           
  9059                           ;APDS9960.c: 689:                 (gesture_data_.r_data[i] > 10) ) {;APDS9960.c: 691:   
      +                                        u_first = gesture_data_.u_data[i];
  9060  00DB  084D               	movf	processGestureData@i,w
  9061  00DC  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  9062  00DD  0086               	movwf	6
  9063  00DE  3002               	movlw	2	; select bank4/5
  9064  00DF  0087               	movwf	7
  9065  00E0  0801               	movf	1,w
  9066  00E1  00AF               	movwf	??_processGestureData
  9067  00E2  082F               	movf	??_processGestureData,w
  9068  00E3  00C5               	movwf	processGestureData@u_first
  9069                           
  9070                           ;APDS9960.c: 692:                 d_first = gesture_data_.d_data[i];
  9071  00E4  084D               	movf	processGestureData@i,w
  9072  00E5  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  9073  00E6  0086               	movwf	6
  9074  00E7  3002               	movlw	2	; select bank4/5
  9075  00E8  0087               	movwf	7
  9076  00E9  0801               	movf	1,w
  9077  00EA  00AF               	movwf	??_processGestureData
  9078  00EB  082F               	movf	??_processGestureData,w
  9079  00EC  00C6               	movwf	processGestureData@d_first
  9080                           
  9081                           ;APDS9960.c: 693:                 l_first = gesture_data_.l_data[i];
  9082  00ED  084D               	movf	processGestureData@i,w
  9083  00EE  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  9084  00EF  0086               	movwf	6
  9085  00F0  3002               	movlw	2	; select bank4/5
  9086  00F1  0087               	movwf	7
  9087  00F2  0801               	movf	1,w
  9088  00F3  00AF               	movwf	??_processGestureData
  9089  00F4  082F               	movf	??_processGestureData,w
  9090  00F5  00C7               	movwf	processGestureData@l_first
  9091                           
  9092                           ;APDS9960.c: 694:                 r_first = gesture_data_.r_data[i];
  9093  00F6  084D               	movf	processGestureData@i,w
  9094  00F7  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  9095  00F8  0086               	movwf	6
  9096  00F9  3002               	movlw	2	; select bank4/5
  9097  00FA  0087               	movwf	7
  9098  00FB  0801               	movf	1,w
  9099  00FC  00AF               	movwf	??_processGestureData
  9100  00FD  082F               	movf	??_processGestureData,w
  9101  00FE  00C8               	movwf	processGestureData@r_first
  9102  00FF                     l6564:	
  9103                           
  9104                           ;APDS9960.c: 700:         if( (u_first == 0) || (d_first == 0) || (l_first == 0) || (r_f
      +                          irst == 0) ) {
  9105  00FF  0020               	movlb	0	; select bank0
  9106  0100  0845               	movf	processGestureData@u_first,w
  9107  0101  1903               	btfsc	3,2
  9108  0102  2898               	goto	l6542
  9109  0103  0846               	movf	processGestureData@d_first,w
  9110  0104  1903               	btfsc	3,2
  9111  0105  2898               	goto	l6542
  9112  0106  0847               	movf	processGestureData@l_first,w
  9113  0107  1903               	btfsc	3,2
  9114  0108  2898               	goto	l6542
  9115  0109  0848               	movf	processGestureData@r_first,w
  9116  010A  1903               	btfsc	3,2
  9117  010B  2898               	goto	l6542
  9118                           
  9119                           ;APDS9960.c: 706:         for( i = gesture_data_.total_gestures - 1; i >= 0; i-- ) {
  9120  010C  0024               	movlb	4	; select bank4
  9121  010D  0861               	movf	(_gesture_data_^(0+512)+65),w
  9122  010E  3EFF               	addlw	255
  9123  010F  0020               	movlb	0	; select bank0
  9124  0110  00CD               	movwf	processGestureData@i
  9125  0111  30FF               	movlw	255
  9126  0112  1803               	skipnc
  9127  0113  3000               	movlw	0
  9128  0114  00CE               	movwf	processGestureData@i+1
  9129                           
  9130                           ;APDS9960.c: 717:                 break;
  9131  0115  291A               	goto	l6578
  9132  0116                     l6592:	
  9133                           
  9134                           ;APDS9960.c: 719:         }
  9135  0116  30FF               	movlw	255
  9136  0117  07CD               	addwf	processGestureData@i,f
  9137  0118  30FF               	movlw	255
  9138  0119  3DCE               	addwfc	processGestureData@i+1,f
  9139  011A                     l6578:	
  9140  011A  1BCE               	btfsc	processGestureData@i+1,7
  9141  011B  2964               	goto	l6596
  9142                           
  9143                           ;APDS9960.c: 708:             if( (gesture_data_.u_data[i] > 10) &&
  9144  011C  084D               	movf	processGestureData@i,w
  9145  011D  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  9146  011E  0086               	movwf	6
  9147  011F  3002               	movlw	2	; select bank4/5
  9148  0120  0087               	movwf	7
  9149  0121  300B               	movlw	11
  9150  0122  0201               	subwf	1,w
  9151  0123  1C03               	skipc
  9152  0124  2916               	goto	l6592
  9153  0125  084D               	movf	processGestureData@i,w
  9154  0126  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  9155  0127  0086               	movwf	6
  9156  0128  3002               	movlw	2	; select bank4/5
  9157  0129  0087               	movwf	7
  9158  012A  300B               	movlw	11
  9159  012B  0201               	subwf	1,w
  9160  012C  1C03               	skipc
  9161  012D  2916               	goto	l6592
  9162  012E  084D               	movf	processGestureData@i,w
  9163  012F  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  9164  0130  0086               	movwf	6
  9165  0131  3002               	movlw	2	; select bank4/5
  9166  0132  0087               	movwf	7
  9167  0133  300B               	movlw	11
  9168  0134  0201               	subwf	1,w
  9169  0135  1C03               	skipc
  9170  0136  2916               	goto	l6592
  9171  0137  084D               	movf	processGestureData@i,w
  9172  0138  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  9173  0139  0086               	movwf	6
  9174  013A  3002               	movlw	2	; select bank4/5
  9175  013B  0087               	movwf	7
  9176  013C  300B               	movlw	11
  9177  013D  0201               	subwf	1,w
  9178  013E  1C03               	skipc
  9179  013F  2916               	goto	l6592
  9180                           
  9181                           ;APDS9960.c: 711:                 (gesture_data_.r_data[i] > 10) ) {;APDS9960.c: 713:   
      +                                        u_last = gesture_data_.u_data[i];
  9182  0140  084D               	movf	processGestureData@i,w
  9183  0141  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  9184  0142  0086               	movwf	6
  9185  0143  3002               	movlw	2	; select bank4/5
  9186  0144  0087               	movwf	7
  9187  0145  0801               	movf	1,w
  9188  0146  00AF               	movwf	??_processGestureData
  9189  0147  082F               	movf	??_processGestureData,w
  9190  0148  00C1               	movwf	processGestureData@u_last
  9191                           
  9192                           ;APDS9960.c: 714:                 d_last = gesture_data_.d_data[i];
  9193  0149  084D               	movf	processGestureData@i,w
  9194  014A  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  9195  014B  0086               	movwf	6
  9196  014C  3002               	movlw	2	; select bank4/5
  9197  014D  0087               	movwf	7
  9198  014E  0801               	movf	1,w
  9199  014F  00AF               	movwf	??_processGestureData
  9200  0150  082F               	movf	??_processGestureData,w
  9201  0151  00C2               	movwf	processGestureData@d_last
  9202                           
  9203                           ;APDS9960.c: 715:                 l_last = gesture_data_.l_data[i];
  9204  0152  084D               	movf	processGestureData@i,w
  9205  0153  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  9206  0154  0086               	movwf	6
  9207  0155  3002               	movlw	2	; select bank4/5
  9208  0156  0087               	movwf	7
  9209  0157  0801               	movf	1,w
  9210  0158  00AF               	movwf	??_processGestureData
  9211  0159  082F               	movf	??_processGestureData,w
  9212  015A  00C3               	movwf	processGestureData@l_last
  9213                           
  9214                           ;APDS9960.c: 716:                 r_last = gesture_data_.r_data[i];
  9215  015B  084D               	movf	processGestureData@i,w
  9216  015C  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  9217  015D  0086               	movwf	6
  9218  015E  3002               	movlw	2	; select bank4/5
  9219  015F  0087               	movwf	7
  9220  0160  0801               	movf	1,w
  9221  0161  00AF               	movwf	??_processGestureData
  9222  0162  082F               	movf	??_processGestureData,w
  9223  0163  00C4               	movwf	processGestureData@r_last
  9224  0164                     l6596:	
  9225                           
  9226                           ;APDS9960.c: 723:     ud_ratio_first = ((u_first - d_first) * 100) / (u_first + d_first)
      +                          ;
  9227  0164  0020               	movlb	0	; select bank0
  9228  0165  0845               	movf	processGestureData@u_first,w
  9229  0166  0746               	addwf	processGestureData@d_first,w
  9230  0167  00A6               	movwf	___awdiv@divisor
  9231  0168  01A7               	clrf	___awdiv@divisor+1
  9232  0169  0DA7               	rlf	___awdiv@divisor+1,f
  9233  016A  0846               	movf	processGestureData@d_first,w
  9234  016B  0245               	subwf	processGestureData@u_first,w
  9235  016C  00A0               	movwf	___wmul@multiplier
  9236  016D  01A1               	clrf	___wmul@multiplier+1
  9237  016E  1C03               	skipc
  9238  016F  03A1               	decf	___wmul@multiplier+1,f
  9239  0170  3064               	movlw	100
  9240  0171  00A2               	movwf	___wmul@multiplicand
  9241  0172  3000               	movlw	0
  9242  0173  00A3               	movwf	___wmul@multiplicand+1
  9243  0174  318A  2203  3180   	fcall	___wmul
  9244  0177  0020               	movlb	0	; select bank0
  9245  0178  0821               	movf	?___wmul+1,w
  9246  0179  00A9               	movwf	___awdiv@dividend+1
  9247  017A  0820               	movf	?___wmul,w
  9248  017B  00A8               	movwf	___awdiv@dividend
  9249  017C  318F  2756  3180   	fcall	___awdiv
  9250  017F  0020               	movlb	0	; select bank0
  9251  0180  0827               	movf	?___awdiv+1,w
  9252  0181  00B2               	movwf	processGestureData@ud_ratio_first+1
  9253  0182  0826               	movf	?___awdiv,w
  9254  0183  00B1               	movwf	processGestureData@ud_ratio_first
  9255                           
  9256                           ;APDS9960.c: 724:     lr_ratio_first = ((l_first - r_first) * 100) / (l_first + r_first)
      +                          ;
  9257  0184  0847               	movf	processGestureData@l_first,w
  9258  0185  0748               	addwf	processGestureData@r_first,w
  9259  0186  00A6               	movwf	___awdiv@divisor
  9260  0187  01A7               	clrf	___awdiv@divisor+1
  9261  0188  0DA7               	rlf	___awdiv@divisor+1,f
  9262  0189  0848               	movf	processGestureData@r_first,w
  9263  018A  0247               	subwf	processGestureData@l_first,w
  9264  018B  00A0               	movwf	___wmul@multiplier
  9265  018C  01A1               	clrf	___wmul@multiplier+1
  9266  018D  1C03               	skipc
  9267  018E  03A1               	decf	___wmul@multiplier+1,f
  9268  018F  3064               	movlw	100
  9269  0190  00A2               	movwf	___wmul@multiplicand
  9270  0191  3000               	movlw	0
  9271  0192  00A3               	movwf	___wmul@multiplicand+1
  9272  0193  318A  2203  3180   	fcall	___wmul
  9273  0196  0020               	movlb	0	; select bank0
  9274  0197  0821               	movf	?___wmul+1,w
  9275  0198  00A9               	movwf	___awdiv@dividend+1
  9276  0199  0820               	movf	?___wmul,w
  9277  019A  00A8               	movwf	___awdiv@dividend
  9278  019B  318F  2756  3180   	fcall	___awdiv
  9279  019E  0020               	movlb	0	; select bank0
  9280  019F  0827               	movf	?___awdiv+1,w
  9281  01A0  00B4               	movwf	processGestureData@lr_ratio_first+1
  9282  01A1  0826               	movf	?___awdiv,w
  9283  01A2  00B3               	movwf	processGestureData@lr_ratio_first
  9284                           
  9285                           ;APDS9960.c: 725:     ud_ratio_last = ((u_last - d_last) * 100) / (u_last + d_last);
  9286  01A3  0841               	movf	processGestureData@u_last,w
  9287  01A4  0742               	addwf	processGestureData@d_last,w
  9288  01A5  00A6               	movwf	___awdiv@divisor
  9289  01A6  01A7               	clrf	___awdiv@divisor+1
  9290  01A7  0DA7               	rlf	___awdiv@divisor+1,f
  9291  01A8  0842               	movf	processGestureData@d_last,w
  9292  01A9  0241               	subwf	processGestureData@u_last,w
  9293  01AA  00A0               	movwf	___wmul@multiplier
  9294  01AB  01A1               	clrf	___wmul@multiplier+1
  9295  01AC  1C03               	skipc
  9296  01AD  03A1               	decf	___wmul@multiplier+1,f
  9297  01AE  3064               	movlw	100
  9298  01AF  00A2               	movwf	___wmul@multiplicand
  9299  01B0  3000               	movlw	0
  9300  01B1  00A3               	movwf	___wmul@multiplicand+1
  9301  01B2  318A  2203  3180   	fcall	___wmul
  9302  01B5  0020               	movlb	0	; select bank0
  9303  01B6  0821               	movf	?___wmul+1,w
  9304  01B7  00A9               	movwf	___awdiv@dividend+1
  9305  01B8  0820               	movf	?___wmul,w
  9306  01B9  00A8               	movwf	___awdiv@dividend
  9307  01BA  318F  2756  3180   	fcall	___awdiv
  9308  01BD  0020               	movlb	0	; select bank0
  9309  01BE  0827               	movf	?___awdiv+1,w
  9310  01BF  00B6               	movwf	processGestureData@ud_ratio_last+1
  9311  01C0  0826               	movf	?___awdiv,w
  9312  01C1  00B5               	movwf	processGestureData@ud_ratio_last
  9313                           
  9314                           ;APDS9960.c: 726:     lr_ratio_last = ((l_last - r_last) * 100) / (l_last + r_last);
  9315  01C2  0843               	movf	processGestureData@l_last,w
  9316  01C3  0744               	addwf	processGestureData@r_last,w
  9317  01C4  00A6               	movwf	___awdiv@divisor
  9318  01C5  01A7               	clrf	___awdiv@divisor+1
  9319  01C6  0DA7               	rlf	___awdiv@divisor+1,f
  9320  01C7  0844               	movf	processGestureData@r_last,w
  9321  01C8  0243               	subwf	processGestureData@l_last,w
  9322  01C9  00A0               	movwf	___wmul@multiplier
  9323  01CA  01A1               	clrf	___wmul@multiplier+1
  9324  01CB  1C03               	skipc
  9325  01CC  03A1               	decf	___wmul@multiplier+1,f
  9326  01CD  3064               	movlw	100
  9327  01CE  00A2               	movwf	___wmul@multiplicand
  9328  01CF  3000               	movlw	0
  9329  01D0  00A3               	movwf	___wmul@multiplicand+1
  9330  01D1  318A  2203  3180   	fcall	___wmul
  9331  01D4  0020               	movlb	0	; select bank0
  9332  01D5  0821               	movf	?___wmul+1,w
  9333  01D6  00A9               	movwf	___awdiv@dividend+1
  9334  01D7  0820               	movf	?___wmul,w
  9335  01D8  00A8               	movwf	___awdiv@dividend
  9336  01D9  318F  2756  3180   	fcall	___awdiv
  9337  01DC  0020               	movlb	0	; select bank0
  9338  01DD  0827               	movf	?___awdiv+1,w
  9339  01DE  00B8               	movwf	processGestureData@lr_ratio_last+1
  9340  01DF  0826               	movf	?___awdiv,w
  9341  01E0  00B7               	movwf	processGestureData@lr_ratio_last
  9342                           
  9343                           ;APDS9960.c: 729:     ud_delta = ud_ratio_last - ud_ratio_first;
  9344  01E1  0831               	movf	processGestureData@ud_ratio_first,w
  9345  01E2  0235               	subwf	processGestureData@ud_ratio_last,w
  9346  01E3  00C9               	movwf	processGestureData@ud_delta
  9347  01E4  0832               	movf	processGestureData@ud_ratio_first+1,w
  9348  01E5  3B36               	subwfb	processGestureData@ud_ratio_last+1,w
  9349  01E6  00CA               	movwf	processGestureData@ud_delta+1
  9350                           
  9351                           ;APDS9960.c: 730:     lr_delta = lr_ratio_last - lr_ratio_first;
  9352  01E7  0833               	movf	processGestureData@lr_ratio_first,w
  9353  01E8  0237               	subwf	processGestureData@lr_ratio_last,w
  9354  01E9  00CB               	movwf	processGestureData@lr_delta
  9355  01EA  0834               	movf	processGestureData@lr_ratio_first+1,w
  9356  01EB  3B38               	subwfb	processGestureData@lr_ratio_last+1,w
  9357  01EC  00CC               	movwf	processGestureData@lr_delta+1
  9358                           
  9359                           ;APDS9960.c: 733:     gesture_ud_delta_ += ud_delta;
  9360  01ED  0849               	movf	processGestureData@ud_delta,w
  9361  01EE  07E8               	addwf	_gesture_ud_delta_,f
  9362  01EF  084A               	movf	processGestureData@ud_delta+1,w
  9363  01F0  3DE9               	addwfc	_gesture_ud_delta_+1,f
  9364                           
  9365                           ;APDS9960.c: 734:     gesture_lr_delta_ += lr_delta;
  9366  01F1  084B               	movf	processGestureData@lr_delta,w
  9367  01F2  07E6               	addwf	_gesture_lr_delta_,f
  9368  01F3  084C               	movf	processGestureData@lr_delta+1,w
  9369  01F4  3DE7               	addwfc	_gesture_lr_delta_+1,f
  9370                           
  9371                           ;APDS9960.c: 737:     if( gesture_ud_delta_ >= 50 ) {
  9372  01F5  0869               	movf	_gesture_ud_delta_+1,w
  9373  01F6  3A80               	xorlw	128
  9374  01F7  00AF               	movwf	??_processGestureData
  9375  01F8  3080               	movlw	128
  9376  01F9  022F               	subwf	??_processGestureData,w
  9377  01FA  1D03               	skipz
  9378  01FB  29FE               	goto	u5395
  9379  01FC  3032               	movlw	50
  9380  01FD  0268               	subwf	_gesture_ud_delta_,w
  9381  01FE                     u5395:	
  9382  01FE  1C03               	skipc
  9383  01FF  2A05               	goto	l6610
  9384                           
  9385                           ;APDS9960.c: 738:         gesture_ud_count_ = 1;
  9386  0200  3001               	movlw	1
  9387  0201  0020               	movlb	0	; select bank0
  9388  0202  00E4               	movwf	_gesture_ud_count_
  9389  0203  3000               	movlw	0
  9390  0204  2A15               	goto	L2
  9391  0205                     l6610:	
  9392                           ;APDS9960.c: 739:     } else if( gesture_ud_delta_ <= -50 ) {
  9393                           
  9394  0205  0020               	movlb	0	; select bank0
  9395  0206  0869               	movf	_gesture_ud_delta_+1,w
  9396  0207  3A80               	xorlw	128
  9397  0208  00AF               	movwf	??_processGestureData
  9398  0209  307F               	movlw	127
  9399  020A  022F               	subwf	??_processGestureData,w
  9400  020B  1D03               	skipz
  9401  020C  2A0F               	goto	u5405
  9402  020D  30CF               	movlw	207
  9403  020E  0268               	subwf	_gesture_ud_delta_,w
  9404  020F                     u5405:	
  9405  020F  1803               	skipnc
  9406  0210  2A17               	goto	l6614
  9407                           
  9408                           ;APDS9960.c: 740:         gesture_ud_count_ = -1;
  9409  0211  30FF               	movlw	255
  9410  0212  0020               	movlb	0	; select bank0
  9411  0213  00E4               	movwf	_gesture_ud_count_
  9412  0214  30FF               	movlw	255
  9413  0215                     L2:	
  9414  0215  00E5               	movwf	_gesture_ud_count_+1
  9415                           
  9416                           ;APDS9960.c: 741:     } else {
  9417  0216  2A1A               	goto	l6616
  9418  0217                     l6614:	
  9419                           
  9420                           ;APDS9960.c: 742:         gesture_ud_count_ = 0;
  9421  0217  0020               	movlb	0	; select bank0
  9422  0218  01E4               	clrf	_gesture_ud_count_
  9423  0219  01E5               	clrf	_gesture_ud_count_+1
  9424  021A                     l6616:	
  9425                           
  9426                           ;APDS9960.c: 746:     if( gesture_lr_delta_ >= 50 ) {
  9427  021A  0867               	movf	_gesture_lr_delta_+1,w
  9428  021B  3A80               	xorlw	128
  9429  021C  00AF               	movwf	??_processGestureData
  9430  021D  3080               	movlw	128
  9431  021E  022F               	subwf	??_processGestureData,w
  9432  021F  1D03               	skipz
  9433  0220  2A23               	goto	u5415
  9434  0221  3032               	movlw	50
  9435  0222  0266               	subwf	_gesture_lr_delta_,w
  9436  0223                     u5415:	
  9437  0223  1C03               	skipc
  9438  0224  2A2A               	goto	l6620
  9439                           
  9440                           ;APDS9960.c: 747:         gesture_lr_count_ = 1;
  9441  0225  3001               	movlw	1
  9442  0226  0020               	movlb	0	; select bank0
  9443  0227  00E2               	movwf	_gesture_lr_count_
  9444  0228  3000               	movlw	0
  9445  0229  2A3A               	goto	L3
  9446  022A                     l6620:	
  9447                           ;APDS9960.c: 748:     } else if( gesture_lr_delta_ <= -50 ) {
  9448                           
  9449  022A  0020               	movlb	0	; select bank0
  9450  022B  0867               	movf	_gesture_lr_delta_+1,w
  9451  022C  3A80               	xorlw	128
  9452  022D  00AF               	movwf	??_processGestureData
  9453  022E  307F               	movlw	127
  9454  022F  022F               	subwf	??_processGestureData,w
  9455  0230  1D03               	skipz
  9456  0231  2A34               	goto	u5425
  9457  0232  30CF               	movlw	207
  9458  0233  0266               	subwf	_gesture_lr_delta_,w
  9459  0234                     u5425:	
  9460  0234  1803               	skipnc
  9461  0235  2A3C               	goto	l6624
  9462                           
  9463                           ;APDS9960.c: 749:         gesture_lr_count_ = -1;
  9464  0236  30FF               	movlw	255
  9465  0237  0020               	movlb	0	; select bank0
  9466  0238  00E2               	movwf	_gesture_lr_count_
  9467  0239  30FF               	movlw	255
  9468  023A                     L3:	
  9469  023A  00E3               	movwf	_gesture_lr_count_+1
  9470                           
  9471                           ;APDS9960.c: 750:     } else {
  9472  023B  2A3F               	goto	l6626
  9473  023C                     l6624:	
  9474                           
  9475                           ;APDS9960.c: 751:         gesture_lr_count_ = 0;
  9476  023C  0020               	movlb	0	; select bank0
  9477  023D  01E2               	clrf	_gesture_lr_count_
  9478  023E  01E3               	clrf	_gesture_lr_count_+1
  9479  023F                     l6626:	
  9480                           
  9481                           ;APDS9960.c: 755:     if( (gesture_ud_count_ == 0) && (gesture_lr_count_ == 0) ) {
  9482  023F  0864               	movf	_gesture_ud_count_,w
  9483  0240  0465               	iorwf	_gesture_ud_count_+1,w
  9484  0241  1D03               	btfss	3,2
  9485  0242  2AEA               	goto	l6670
  9486  0243  0862               	movf	_gesture_lr_count_,w
  9487  0244  0463               	iorwf	_gesture_lr_count_+1,w
  9488  0245  1D03               	btfss	3,2
  9489  0246  2AEA               	goto	l6670
  9490                           
  9491                           ;APDS9960.c: 756:         if( (((ud_delta) > 0 ? (ud_delta) : -(ud_delta)) < 20) && (((l
      +                          r_delta) > 0 ? (lr_delta) : -(lr_delta)) < 20) ) {
  9492  0247  084A               	movf	processGestureData@ud_delta+1,w
  9493  0248  3A80               	xorlw	128
  9494  0249  00AF               	movwf	??_processGestureData
  9495  024A  3080               	movlw	128
  9496  024B  022F               	subwf	??_processGestureData,w
  9497  024C  1D03               	skipz
  9498  024D  2A50               	goto	u5455
  9499  024E  3001               	movlw	1
  9500  024F  0249               	subwf	processGestureData@ud_delta,w
  9501  0250                     u5455:	
  9502  0250  1803               	skipnc
  9503  0251  2A5F               	goto	l6634
  9504  0252  0020               	movlb	0	; select bank0
  9505  0253  0949               	comf	processGestureData@ud_delta,w
  9506  0254  00AF               	movwf	??_processGestureData
  9507  0255  094A               	comf	processGestureData@ud_delta+1,w
  9508  0256  00B0               	movwf	??_processGestureData+1
  9509  0257  0AAF               	incf	??_processGestureData,f
  9510  0258  1903               	skipnz
  9511  0259  0AB0               	incf	??_processGestureData+1,f
  9512  025A  082F               	movf	??_processGestureData,w
  9513  025B  00B9               	movwf	_processGestureData$1800
  9514  025C  0830               	movf	??_processGestureData+1,w
  9515  025D  00BA               	movwf	_processGestureData$1800+1
  9516  025E  2A64               	goto	l1264
  9517  025F                     l6634:	
  9518  025F  0020               	movlb	0	; select bank0
  9519  0260  084A               	movf	processGestureData@ud_delta+1,w
  9520  0261  00BA               	movwf	_processGestureData$1800+1
  9521  0262  0849               	movf	processGestureData@ud_delta,w
  9522  0263  00B9               	movwf	_processGestureData$1800
  9523  0264                     l1264:	
  9524  0264  083A               	movf	_processGestureData$1800+1,w
  9525  0265  3A80               	xorlw	128
  9526  0266  00AF               	movwf	??_processGestureData
  9527  0267  3080               	movlw	128
  9528  0268  022F               	subwf	??_processGestureData,w
  9529  0269  1D03               	skipz
  9530  026A  2A6D               	goto	u5465
  9531  026B  3014               	movlw	20
  9532  026C  0239               	subwf	_processGestureData$1800,w
  9533  026D                     u5465:	
  9534  026D  1803               	skipnc
  9535  026E  2898               	goto	l6542
  9536  026F  0020               	movlb	0	; select bank0
  9537  0270  084C               	movf	processGestureData@lr_delta+1,w
  9538  0271  3A80               	xorlw	128
  9539  0272  00AF               	movwf	??_processGestureData
  9540  0273  3080               	movlw	128
  9541  0274  022F               	subwf	??_processGestureData,w
  9542  0275  1D03               	skipz
  9543  0276  2A79               	goto	u5475
  9544  0277  3001               	movlw	1
  9545  0278  024B               	subwf	processGestureData@lr_delta,w
  9546  0279                     u5475:	
  9547  0279  1803               	skipnc
  9548  027A  2A88               	goto	l6640
  9549  027B  0020               	movlb	0	; select bank0
  9550  027C  094B               	comf	processGestureData@lr_delta,w
  9551  027D  00AF               	movwf	??_processGestureData
  9552  027E  094C               	comf	processGestureData@lr_delta+1,w
  9553  027F  00B0               	movwf	??_processGestureData+1
  9554  0280  0AAF               	incf	??_processGestureData,f
  9555  0281  1903               	skipnz
  9556  0282  0AB0               	incf	??_processGestureData+1,f
  9557  0283  082F               	movf	??_processGestureData,w
  9558  0284  00BB               	movwf	_processGestureData$1801
  9559  0285  0830               	movf	??_processGestureData+1,w
  9560  0286  00BC               	movwf	_processGestureData$1801+1
  9561  0287  2A8D               	goto	l1268
  9562  0288                     l6640:	
  9563  0288  0020               	movlb	0	; select bank0
  9564  0289  084C               	movf	processGestureData@lr_delta+1,w
  9565  028A  00BC               	movwf	_processGestureData$1801+1
  9566  028B  084B               	movf	processGestureData@lr_delta,w
  9567  028C  00BB               	movwf	_processGestureData$1801
  9568  028D                     l1268:	
  9569  028D  083C               	movf	_processGestureData$1801+1,w
  9570  028E  3A80               	xorlw	128
  9571  028F  00AF               	movwf	??_processGestureData
  9572  0290  3080               	movlw	128
  9573  0291  022F               	subwf	??_processGestureData,w
  9574  0292  1D03               	skipz
  9575  0293  2A96               	goto	u5485
  9576  0294  3014               	movlw	20
  9577  0295  023B               	subwf	_processGestureData$1801,w
  9578  0296                     u5485:	
  9579  0296  1803               	skipnc
  9580  0297  2898               	goto	l6542
  9581                           
  9582                           ;APDS9960.c: 757: ;APDS9960.c: 759:             if( (ud_delta == 0) && (lr_delta == 0) )
      +                           {
  9583  0298  0020               	movlb	0	; select bank0
  9584  0299  0849               	movf	processGestureData@ud_delta,w
  9585  029A  044A               	iorwf	processGestureData@ud_delta+1,w
  9586  029B  1D03               	btfss	3,2
  9587  029C  2AA7               	goto	l6648
  9588  029D  084B               	movf	processGestureData@lr_delta,w
  9589  029E  044C               	iorwf	processGestureData@lr_delta+1,w
  9590  029F  1D03               	btfss	3,2
  9591  02A0  2AA7               	goto	l6648
  9592                           
  9593                           ;APDS9960.c: 760:                 gesture_near_count_++;
  9594  02A1  3001               	movlw	1
  9595  02A2  0021               	movlb	1	; select bank1
  9596  02A3  07EA               	addwf	_gesture_near_count_^(0+128),f
  9597  02A4  3000               	movlw	0
  9598  02A5  3DEB               	addwfc	(_gesture_near_count_+1)^(0+128),f
  9599                           
  9600                           ;APDS9960.c: 761:             } else if( (ud_delta != 0) || (lr_delta != 0) ) {
  9601  02A6  2AB4               	goto	l1270
  9602  02A7                     l6648:	
  9603  02A7  0849               	movf	processGestureData@ud_delta,w
  9604  02A8  044A               	iorwf	processGestureData@ud_delta+1,w
  9605  02A9  1D03               	btfss	3,2
  9606  02AA  2AAF               	goto	l6652
  9607  02AB  084B               	movf	processGestureData@lr_delta,w
  9608  02AC  044C               	iorwf	processGestureData@lr_delta+1,w
  9609  02AD  1903               	btfsc	3,2
  9610  02AE  2AB4               	goto	l1270
  9611  02AF                     l6652:	
  9612                           
  9613                           ;APDS9960.c: 762:                 gesture_far_count_++;
  9614  02AF  3001               	movlw	1
  9615  02B0  0021               	movlb	1	; select bank1
  9616  02B1  07E8               	addwf	_gesture_far_count_^(0+128),f
  9617  02B2  3000               	movlw	0
  9618  02B3  3DE9               	addwfc	(_gesture_far_count_+1)^(0+128),f
  9619  02B4                     l1270:	
  9620                           
  9621                           ;APDS9960.c: 765:             if( (gesture_near_count_ >= 10) && (gesture_far_count_ >= 
      +                          2) ) {
  9622  02B4  0021               	movlb	1	; select bank1
  9623  02B5  086B               	movf	(_gesture_near_count_+1)^(0+128),w
  9624  02B6  3A80               	xorlw	128
  9625  02B7  0020               	movlb	0	; select bank0
  9626  02B8  00AF               	movwf	??_processGestureData
  9627  02B9  3080               	movlw	128
  9628  02BA  022F               	subwf	??_processGestureData,w
  9629  02BB  1D03               	skipz
  9630  02BC  2AC0               	goto	u5535
  9631  02BD  300A               	movlw	10
  9632  02BE  0021               	movlb	1	; select bank1
  9633  02BF  026A               	subwf	_gesture_near_count_^(0+128),w
  9634  02C0                     u5535:	
  9635  02C0  1C03               	skipc
  9636  02C1  2898               	goto	l6542
  9637  02C2  0021               	movlb	1	; select bank1
  9638  02C3  0869               	movf	(_gesture_far_count_+1)^(0+128),w
  9639  02C4  3A80               	xorlw	128
  9640  02C5  0020               	movlb	0	; select bank0
  9641  02C6  00AF               	movwf	??_processGestureData
  9642  02C7  3080               	movlw	128
  9643  02C8  022F               	subwf	??_processGestureData,w
  9644  02C9  1D03               	skipz
  9645  02CA  2ACE               	goto	u5545
  9646  02CB  3002               	movlw	2
  9647  02CC  0021               	movlb	1	; select bank1
  9648  02CD  0268               	subwf	_gesture_far_count_^(0+128),w
  9649  02CE                     u5545:	
  9650  02CE  1C03               	skipc
  9651  02CF  2898               	goto	l6542
  9652                           
  9653                           ;APDS9960.c: 766:                 if( (ud_delta == 0) && (lr_delta == 0) ) {
  9654  02D0  0020               	movlb	0	; select bank0
  9655  02D1  0849               	movf	processGestureData@ud_delta,w
  9656  02D2  044A               	iorwf	processGestureData@ud_delta+1,w
  9657  02D3  1D03               	btfss	3,2
  9658  02D4  2ADB               	goto	l6662
  9659  02D5  084B               	movf	processGestureData@lr_delta,w
  9660  02D6  044C               	iorwf	processGestureData@lr_delta+1,w
  9661  02D7  1D03               	btfss	3,2
  9662  02D8  2ADB               	goto	l6662
  9663                           
  9664                           ;APDS9960.c: 767:                     gesture_state_ = NEAR_STATE;
  9665  02D9  3001               	movlw	1
  9666  02DA  2AE4               	goto	L4
  9667  02DB                     l6662:	
  9668                           ;APDS9960.c: 768:                 } else if( (ud_delta != 0) && (lr_delta != 0) ) {
  9669                           
  9670  02DB  0849               	movf	processGestureData@ud_delta,w
  9671  02DC  044A               	iorwf	processGestureData@ud_delta+1,w
  9672  02DD  1903               	btfsc	3,2
  9673  02DE  2AE8               	goto	l1276
  9674  02DF  084B               	movf	processGestureData@lr_delta,w
  9675  02E0  044C               	iorwf	processGestureData@lr_delta+1,w
  9676  02E1  1903               	btfsc	3,2
  9677  02E2  2AE8               	goto	l1276
  9678                           
  9679                           ;APDS9960.c: 769:                     gesture_state_ = FAR_STATE;
  9680  02E3  3002               	movlw	2
  9681  02E4                     L4:	
  9682  02E4  0021               	movlb	1	; select bank1
  9683  02E5  00E6               	movwf	_gesture_state_^(0+128)
  9684  02E6  3000               	movlw	0
  9685  02E7  00E7               	movwf	(_gesture_state_^(0+128)+1)
  9686  02E8                     l1276:	
  9687                           
  9688                           ;APDS9960.c: 771:                 return 1;
  9689  02E8  3001               	movlw	1
  9690  02E9  0008               	return
  9691  02EA                     l6670:	
  9692                           
  9693                           ;APDS9960.c: 775:         if( (((ud_delta) > 0 ? (ud_delta) : -(ud_delta)) < 20) && (((l
      +                          r_delta) > 0 ? (lr_delta) : -(lr_delta)) < 20) ) {
  9694  02EA  084A               	movf	processGestureData@ud_delta+1,w
  9695  02EB  3A80               	xorlw	128
  9696  02EC  00AF               	movwf	??_processGestureData
  9697  02ED  3080               	movlw	128
  9698  02EE  022F               	subwf	??_processGestureData,w
  9699  02EF  1D03               	skipz
  9700  02F0  2AF3               	goto	u5595
  9701  02F1  3001               	movlw	1
  9702  02F2  0249               	subwf	processGestureData@ud_delta,w
  9703  02F3                     u5595:	
  9704  02F3  1803               	skipnc
  9705  02F4  2B02               	goto	l6674
  9706  02F5  0020               	movlb	0	; select bank0
  9707  02F6  0949               	comf	processGestureData@ud_delta,w
  9708  02F7  00AF               	movwf	??_processGestureData
  9709  02F8  094A               	comf	processGestureData@ud_delta+1,w
  9710  02F9  00B0               	movwf	??_processGestureData+1
  9711  02FA  0AAF               	incf	??_processGestureData,f
  9712  02FB  1903               	skipnz
  9713  02FC  0AB0               	incf	??_processGestureData+1,f
  9714  02FD  082F               	movf	??_processGestureData,w
  9715  02FE  00BD               	movwf	_processGestureData$1802
  9716  02FF  0830               	movf	??_processGestureData+1,w
  9717  0300  00BE               	movwf	_processGestureData$1802+1
  9718  0301  2B07               	goto	l1283
  9719  0302                     l6674:	
  9720  0302  0020               	movlb	0	; select bank0
  9721  0303  084A               	movf	processGestureData@ud_delta+1,w
  9722  0304  00BE               	movwf	_processGestureData$1802+1
  9723  0305  0849               	movf	processGestureData@ud_delta,w
  9724  0306  00BD               	movwf	_processGestureData$1802
  9725  0307                     l1283:	
  9726  0307  083E               	movf	_processGestureData$1802+1,w
  9727  0308  3A80               	xorlw	128
  9728  0309  00AF               	movwf	??_processGestureData
  9729  030A  3080               	movlw	128
  9730  030B  022F               	subwf	??_processGestureData,w
  9731  030C  1D03               	skipz
  9732  030D  2B10               	goto	u5605
  9733  030E  3014               	movlw	20
  9734  030F  023D               	subwf	_processGestureData$1802,w
  9735  0310                     u5605:	
  9736  0310  1803               	skipnc
  9737  0311  2898               	goto	l6542
  9738  0312  0020               	movlb	0	; select bank0
  9739  0313  084C               	movf	processGestureData@lr_delta+1,w
  9740  0314  3A80               	xorlw	128
  9741  0315  00AF               	movwf	??_processGestureData
  9742  0316  3080               	movlw	128
  9743  0317  022F               	subwf	??_processGestureData,w
  9744  0318  1D03               	skipz
  9745  0319  2B1C               	goto	u5615
  9746  031A  3001               	movlw	1
  9747  031B  024B               	subwf	processGestureData@lr_delta,w
  9748  031C                     u5615:	
  9749  031C  1803               	skipnc
  9750  031D  2B2B               	goto	l6680
  9751  031E  0020               	movlb	0	; select bank0
  9752  031F  094B               	comf	processGestureData@lr_delta,w
  9753  0320  00AF               	movwf	??_processGestureData
  9754  0321  094C               	comf	processGestureData@lr_delta+1,w
  9755  0322  00B0               	movwf	??_processGestureData+1
  9756  0323  0AAF               	incf	??_processGestureData,f
  9757  0324  1903               	skipnz
  9758  0325  0AB0               	incf	??_processGestureData+1,f
  9759  0326  082F               	movf	??_processGestureData,w
  9760  0327  00BF               	movwf	_processGestureData$1803
  9761  0328  0830               	movf	??_processGestureData+1,w
  9762  0329  00C0               	movwf	_processGestureData$1803+1
  9763  032A  2B30               	goto	l1287
  9764  032B                     l6680:	
  9765  032B  0020               	movlb	0	; select bank0
  9766  032C  084C               	movf	processGestureData@lr_delta+1,w
  9767  032D  00C0               	movwf	_processGestureData$1803+1
  9768  032E  084B               	movf	processGestureData@lr_delta,w
  9769  032F  00BF               	movwf	_processGestureData$1803
  9770  0330                     l1287:	
  9771  0330  0840               	movf	_processGestureData$1803+1,w
  9772  0331  3A80               	xorlw	128
  9773  0332  00AF               	movwf	??_processGestureData
  9774  0333  3080               	movlw	128
  9775  0334  022F               	subwf	??_processGestureData,w
  9776  0335  1D03               	skipz
  9777  0336  2B39               	goto	u5625
  9778  0337  3014               	movlw	20
  9779  0338  023F               	subwf	_processGestureData$1803,w
  9780  0339                     u5625:	
  9781  0339  1803               	skipnc
  9782  033A  2898               	goto	l6542
  9783                           
  9784                           ;APDS9960.c: 776: ;APDS9960.c: 778:             if( (ud_delta == 0) && (lr_delta == 0) )
      +                           {
  9785  033B  0020               	movlb	0	; select bank0
  9786  033C  0849               	movf	processGestureData@ud_delta,w
  9787  033D  044A               	iorwf	processGestureData@ud_delta+1,w
  9788  033E  1D03               	btfss	3,2
  9789  033F  2B49               	goto	l1288
  9790  0340  084B               	movf	processGestureData@lr_delta,w
  9791  0341  044C               	iorwf	processGestureData@lr_delta+1,w
  9792  0342  1D03               	btfss	3,2
  9793  0343  2B49               	goto	l1288
  9794                           
  9795                           ;APDS9960.c: 779:                 gesture_near_count_++;
  9796  0344  3001               	movlw	1
  9797  0345  0021               	movlb	1	; select bank1
  9798  0346  07EA               	addwf	_gesture_near_count_^(0+128),f
  9799  0347  3000               	movlw	0
  9800  0348  3DEB               	addwfc	(_gesture_near_count_+1)^(0+128),f
  9801  0349                     l1288:	
  9802                           ;APDS9960.c: 780:             }
  9803                           
  9804                           
  9805                           ;APDS9960.c: 782:             if( gesture_near_count_ >= 10 ) {
  9806  0349  0021               	movlb	1	; select bank1
  9807  034A  086B               	movf	(_gesture_near_count_+1)^(0+128),w
  9808  034B  3A80               	xorlw	128
  9809  034C  0020               	movlb	0	; select bank0
  9810  034D  00AF               	movwf	??_processGestureData
  9811  034E  3080               	movlw	128
  9812  034F  022F               	subwf	??_processGestureData,w
  9813  0350  1D03               	skipz
  9814  0351  2B55               	goto	u5655
  9815  0352  300A               	movlw	10
  9816  0353  0021               	movlb	1	; select bank1
  9817  0354  026A               	subwf	_gesture_near_count_^(0+128),w
  9818  0355                     u5655:	
  9819  0355  1C03               	skipc
  9820  0356  2898               	goto	l6542
  9821                           
  9822                           ;APDS9960.c: 783:                 gesture_ud_count_ = 0;
  9823  0357  0020               	movlb	0	; select bank0
  9824  0358  01E4               	clrf	_gesture_ud_count_
  9825  0359  01E5               	clrf	_gesture_ud_count_+1
  9826                           
  9827                           ;APDS9960.c: 784:                 gesture_lr_count_ = 0;
  9828  035A  01E2               	clrf	_gesture_lr_count_
  9829  035B  01E3               	clrf	_gesture_lr_count_+1
  9830                           
  9831                           ;APDS9960.c: 785:                 gesture_ud_delta_ = 0;
  9832  035C  01E8               	clrf	_gesture_ud_delta_
  9833  035D  01E9               	clrf	_gesture_ud_delta_+1
  9834                           
  9835                           ;APDS9960.c: 786:                 gesture_lr_delta_ = 0;
  9836  035E  01E6               	clrf	_gesture_lr_delta_
  9837  035F  01E7               	clrf	_gesture_lr_delta_+1
  9838  0360  2898               	goto	l6542
  9839  0361                     __end_of_processGestureData:	
  9840                           
  9841                           	psect	text19
  9842  0A03                     __ptext19:	
  9843 ;; *************** function ___wmul *****************
  9844 ;; Defined at:
  9845 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
  9846 ;; Parameters:    Size  Location     Type
  9847 ;;  multiplier      2    0[BANK0 ] unsigned int 
  9848 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  9849 ;; Auto vars:     Size  Location     Type
  9850 ;;  product         2    4[BANK0 ] unsigned int 
  9851 ;; Return value:  Size  Location     Type
  9852 ;;                  2    0[BANK0 ] unsigned int 
  9853 ;; Registers used:
  9854 ;;		wreg, status,2, status,0
  9855 ;; Tracked objects:
  9856 ;;		On entry : 0/0
  9857 ;;		On exit  : 0/0
  9858 ;;		Unchanged: 0/0
  9859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9860 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9861 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9862 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9863 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9864 ;;Total ram usage:        6 bytes
  9865 ;; Hardware stack levels used:    1
  9866 ;; Hardware stack levels required when called:    5
  9867 ;; This function calls:
  9868 ;;		Nothing
  9869 ;; This function is called by:
  9870 ;;		_processGestureData
  9871 ;; This function uses a non-reentrant model
  9872 ;;
  9873                           
  9874                           
  9875                           ;psect for function ___wmul
  9876  0A03                     ___wmul:	
  9877                           
  9878                           ;incstack = 0
  9879                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  9880  0A03  0020               	movlb	0	; select bank0
  9881  0A04  01A4               	clrf	___wmul@product
  9882  0A05  01A5               	clrf	___wmul@product+1
  9883  0A06                     l6374:	
  9884  0A06  1C20               	btfss	___wmul@multiplier,0
  9885  0A07  2A0C               	goto	l1580
  9886  0A08  0822               	movf	___wmul@multiplicand,w
  9887  0A09  07A4               	addwf	___wmul@product,f
  9888  0A0A  0823               	movf	___wmul@multiplicand+1,w
  9889  0A0B  3DA5               	addwfc	___wmul@product+1,f
  9890  0A0C                     l1580:	
  9891  0A0C  3001               	movlw	1
  9892  0A0D                     u4985:	
  9893  0A0D  35A2               	lslf	___wmul@multiplicand,f
  9894  0A0E  0DA3               	rlf	___wmul@multiplicand+1,f
  9895  0A0F  0B89               	decfsz	9,f
  9896  0A10  2A0D               	goto	u4985
  9897  0A11  3001               	movlw	1
  9898  0A12                     u4995:	
  9899  0A12  36A1               	lsrf	___wmul@multiplier+1,f
  9900  0A13  0CA0               	rrf	___wmul@multiplier,f
  9901  0A14  0B89               	decfsz	9,f
  9902  0A15  2A12               	goto	u4995
  9903  0A16  0820               	movf	___wmul@multiplier,w
  9904  0A17  0421               	iorwf	___wmul@multiplier+1,w
  9905  0A18  1D03               	btfss	3,2
  9906  0A19  2A06               	goto	l6374
  9907  0A1A  0825               	movf	___wmul@product+1,w
  9908  0A1B  00A1               	movwf	?___wmul+1
  9909  0A1C  0824               	movf	___wmul@product,w
  9910  0A1D  00A0               	movwf	?___wmul
  9911  0A1E  0008               	return
  9912  0A1F                     __end_of___wmul:	
  9913                           
  9914                           	psect	text20
  9915  0F56                     __ptext20:	
  9916 ;; *************** function ___awdiv *****************
  9917 ;; Defined at:
  9918 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awdiv.c"
  9919 ;; Parameters:    Size  Location     Type
  9920 ;;  divisor         2    6[BANK0 ] int 
  9921 ;;  dividend        2    8[BANK0 ] int 
  9922 ;; Auto vars:     Size  Location     Type
  9923 ;;  quotient        2   13[BANK0 ] int 
  9924 ;;  sign            1   12[BANK0 ] unsigned char 
  9925 ;;  counter         1   11[BANK0 ] unsigned char 
  9926 ;; Return value:  Size  Location     Type
  9927 ;;                  2    6[BANK0 ] int 
  9928 ;; Registers used:
  9929 ;;		wreg, status,2, status,0
  9930 ;; Tracked objects:
  9931 ;;		On entry : 0/0
  9932 ;;		On exit  : 0/0
  9933 ;;		Unchanged: 0/0
  9934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9935 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9936 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9937 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9938 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9939 ;;Total ram usage:        9 bytes
  9940 ;; Hardware stack levels used:    1
  9941 ;; Hardware stack levels required when called:    5
  9942 ;; This function calls:
  9943 ;;		Nothing
  9944 ;; This function is called by:
  9945 ;;		_processGestureData
  9946 ;; This function uses a non-reentrant model
  9947 ;;
  9948                           
  9949                           
  9950                           ;psect for function ___awdiv
  9951  0F56                     ___awdiv:	
  9952                           
  9953                           ;incstack = 0
  9954                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  9955  0F56  0020               	movlb	0	; select bank0
  9956  0F57  01AC               	clrf	___awdiv@sign
  9957  0F58  1FA7               	btfss	___awdiv@divisor+1,7
  9958  0F59  2F61               	goto	l6394
  9959  0F5A  09A6               	comf	___awdiv@divisor,f
  9960  0F5B  09A7               	comf	___awdiv@divisor+1,f
  9961  0F5C  0AA6               	incf	___awdiv@divisor,f
  9962  0F5D  1903               	skipnz
  9963  0F5E  0AA7               	incf	___awdiv@divisor+1,f
  9964  0F5F  01AC               	clrf	___awdiv@sign
  9965  0F60  0AAC               	incf	___awdiv@sign,f
  9966  0F61                     l6394:	
  9967  0F61  1FA9               	btfss	___awdiv@dividend+1,7
  9968  0F62  2F6C               	goto	l6400
  9969  0F63  09A8               	comf	___awdiv@dividend,f
  9970  0F64  09A9               	comf	___awdiv@dividend+1,f
  9971  0F65  0AA8               	incf	___awdiv@dividend,f
  9972  0F66  1903               	skipnz
  9973  0F67  0AA9               	incf	___awdiv@dividend+1,f
  9974  0F68  3001               	movlw	1
  9975  0F69  00AA               	movwf	??___awdiv
  9976  0F6A  082A               	movf	??___awdiv,w
  9977  0F6B  06AC               	xorwf	___awdiv@sign,f
  9978  0F6C                     l6400:	
  9979  0F6C  01AD               	clrf	___awdiv@quotient
  9980  0F6D  01AE               	clrf	___awdiv@quotient+1
  9981  0F6E  0826               	movf	___awdiv@divisor,w
  9982  0F6F  0427               	iorwf	___awdiv@divisor+1,w
  9983  0F70  1903               	btfsc	3,2
  9984  0F71  2F9B               	goto	l6422
  9985  0F72  01AB               	clrf	___awdiv@counter
  9986  0F73  0AAB               	incf	___awdiv@counter,f
  9987  0F74                     l6410:	
  9988  0F74  1BA7               	btfsc	___awdiv@divisor+1,7
  9989  0F75  2F80               	goto	l6412
  9990  0F76  3001               	movlw	1
  9991  0F77                     u5045:	
  9992  0F77  35A6               	lslf	___awdiv@divisor,f
  9993  0F78  0DA7               	rlf	___awdiv@divisor+1,f
  9994  0F79  0B89               	decfsz	9,f
  9995  0F7A  2F77               	goto	u5045
  9996  0F7B  3001               	movlw	1
  9997  0F7C  00AA               	movwf	??___awdiv
  9998  0F7D  082A               	movf	??___awdiv,w
  9999  0F7E  07AB               	addwf	___awdiv@counter,f
 10000  0F7F  2F74               	goto	l6410
 10001  0F80                     l6412:	
 10002  0F80  3001               	movlw	1
 10003  0F81                     u5065:	
 10004  0F81  35AD               	lslf	___awdiv@quotient,f
 10005  0F82  0DAE               	rlf	___awdiv@quotient+1,f
 10006  0F83  0B89               	decfsz	9,f
 10007  0F84  2F81               	goto	u5065
 10008  0F85  0827               	movf	___awdiv@divisor+1,w
 10009  0F86  0229               	subwf	___awdiv@dividend+1,w
 10010  0F87  1D03               	skipz
 10011  0F88  2F8B               	goto	u5075
 10012  0F89  0826               	movf	___awdiv@divisor,w
 10013  0F8A  0228               	subwf	___awdiv@dividend,w
 10014  0F8B                     u5075:	
 10015  0F8B  1C03               	skipc
 10016  0F8C  2F92               	goto	l6418
 10017  0F8D  0826               	movf	___awdiv@divisor,w
 10018  0F8E  02A8               	subwf	___awdiv@dividend,f
 10019  0F8F  0827               	movf	___awdiv@divisor+1,w
 10020  0F90  3BA9               	subwfb	___awdiv@dividend+1,f
 10021  0F91  142D               	bsf	___awdiv@quotient,0
 10022  0F92                     l6418:	
 10023  0F92  3001               	movlw	1
 10024  0F93                     u5085:	
 10025  0F93  36A7               	lsrf	___awdiv@divisor+1,f
 10026  0F94  0CA6               	rrf	___awdiv@divisor,f
 10027  0F95  0B89               	decfsz	9,f
 10028  0F96  2F93               	goto	u5085
 10029  0F97  3001               	movlw	1
 10030  0F98  02AB               	subwf	___awdiv@counter,f
 10031  0F99  1D03               	btfss	3,2
 10032  0F9A  2F80               	goto	l6412
 10033  0F9B                     l6422:	
 10034  0F9B  082C               	movf	___awdiv@sign,w
 10035  0F9C  1903               	btfsc	3,2
 10036  0F9D  2FA3               	goto	l6426
 10037  0F9E  09AD               	comf	___awdiv@quotient,f
 10038  0F9F  09AE               	comf	___awdiv@quotient+1,f
 10039  0FA0  0AAD               	incf	___awdiv@quotient,f
 10040  0FA1  1903               	skipnz
 10041  0FA2  0AAE               	incf	___awdiv@quotient+1,f
 10042  0FA3                     l6426:	
 10043  0FA3  082E               	movf	___awdiv@quotient+1,w
 10044  0FA4  00A7               	movwf	?___awdiv+1
 10045  0FA5  082D               	movf	___awdiv@quotient,w
 10046  0FA6  00A6               	movwf	?___awdiv
 10047  0FA7  0008               	return
 10048  0FA8                     __end_of___awdiv:	
 10049                           
 10050                           	psect	text21
 10051  08F7                     __ptext21:	
 10052 ;; *************** function _isGestureAvailable *****************
 10053 ;; Defined at:
 10054 ;;		line 537 in file "APDS9960.c"
 10055 ;; Parameters:    Size  Location     Type
 10056 ;;		None
 10057 ;; Auto vars:     Size  Location     Type
 10058 ;;  val             1   10[BANK0 ] unsigned char 
 10059 ;; Return value:  Size  Location     Type
 10060 ;;                  1    wreg      _Bool 
 10061 ;; Registers used:
 10062 ;;		wreg, status,2, status,0, pclath, cstack
 10063 ;; Tracked objects:
 10064 ;;		On entry : 0/0
 10065 ;;		On exit  : 0/0
 10066 ;;		Unchanged: 0/0
 10067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10068 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10069 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10070 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10071 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10072 ;;Total ram usage:        2 bytes
 10073 ;; Hardware stack levels used:    1
 10074 ;; Hardware stack levels required when called:    8
 10075 ;; This function calls:
 10076 ;;		_wireReadDataByte
 10077 ;; This function is called by:
 10078 ;;		_main
 10079 ;;		_readGesture
 10080 ;; This function uses a non-reentrant model
 10081 ;;
 10082                           
 10083                           
 10084                           ;psect for function _isGestureAvailable
 10085  08F7                     _isGestureAvailable:	
 10086                           
 10087                           ;APDS9960.c: 539:     uint8_t val;;APDS9960.c: 542:     val=wireReadDataByte(0xAF);
 10088                           
 10089                           ;incstack = 0
 10090                           ; Regs used in _isGestureAvailable: [wreg+status,2+status,0+pclath+cstack]
 10091  08F7  30AF               	movlw	175
 10092  08F8  318A  225B  3188   	fcall	_wireReadDataByte
 10093  08FB  0020               	movlb	0	; select bank0
 10094  08FC  00A9               	movwf	??_isGestureAvailable
 10095  08FD  0829               	movf	??_isGestureAvailable,w
 10096  08FE  00AA               	movwf	isGestureAvailable@val
 10097                           
 10098                           ;APDS9960.c: 545:     val &= 0b00000001;
 10099  08FF  3001               	movlw	1
 10100  0900  00A9               	movwf	??_isGestureAvailable
 10101  0901  0829               	movf	??_isGestureAvailable,w
 10102  0902  05AA               	andwf	isGestureAvailable@val,f
 10103                           
 10104                           ;APDS9960.c: 548:     if( val == 1) {
 10105  0903  032A               	decf	isGestureAvailable@val,w
 10106  0904  1D03               	btfss	3,2
 10107  0905  2908               	goto	l6452
 10108                           
 10109                           ;APDS9960.c: 549:         return 1;
 10110  0906  3001               	movlw	1
 10111  0907  0008               	return
 10112  0908                     l6452:	
 10113                           
 10114                           ;APDS9960.c: 551:         return 0;
 10115  0908  3000               	movlw	0
 10116  0909  0008               	return
 10117  090A                     __end_of_isGestureAvailable:	
 10118                           
 10119                           	psect	text22
 10120  0361                     __ptext22:	
 10121 ;; *************** function _decodeGesture *****************
 10122 ;; Defined at:
 10123 ;;		line 795 in file "APDS9960.c"
 10124 ;; Parameters:    Size  Location     Type
 10125 ;;		None
 10126 ;; Auto vars:     Size  Location     Type
 10127 ;;		None
 10128 ;; Return value:  Size  Location     Type
 10129 ;;                  1    wreg      _Bool 
 10130 ;; Registers used:
 10131 ;;		wreg, status,2, status,0
 10132 ;; Tracked objects:
 10133 ;;		On entry : 0/0
 10134 ;;		On exit  : 0/0
 10135 ;;		Unchanged: 0/0
 10136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10137 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10138 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10139 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10140 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10141 ;;Total ram usage:       18 bytes
 10142 ;; Hardware stack levels used:    1
 10143 ;; Hardware stack levels required when called:    5
 10144 ;; This function calls:
 10145 ;;		Nothing
 10146 ;; This function is called by:
 10147 ;;		_readGesture
 10148 ;; This function uses a non-reentrant model
 10149 ;;
 10150                           
 10151                           
 10152                           ;psect for function _decodeGesture
 10153  0361                     _decodeGesture:	
 10154                           
 10155                           ;APDS9960.c: 798:     if( gesture_state_ == NEAR_STATE ) {
 10156                           
 10157                           ;incstack = 0
 10158                           ; Regs used in _decodeGesture: [wreg+status,2+status,0]
 10159  0361  0021               	movlb	1	; select bank1
 10160  0362  0366               	decf	_gesture_state_^(0+128),w
 10161  0363  0467               	iorwf	(_gesture_state_+1)^(0+128),w
 10162  0364  1D03               	btfss	3,2
 10163  0365  2B6D               	goto	l6702
 10164                           
 10165                           ;APDS9960.c: 799:         gesture_motion_ = DIR_NEAR;
 10166  0366  3005               	movlw	5
 10167  0367  0022               	movlb	2	; select bank2
 10168  0368  00E8               	movwf	_gesture_motion_^(0+256)
 10169  0369  3000               	movlw	0
 10170  036A  00E9               	movwf	(_gesture_motion_^(0+256)+1)
 10171                           
 10172                           ;APDS9960.c: 800:         return 1;
 10173  036B  3001               	movlw	1
 10174  036C  0008               	return
 10175  036D                     l6702:	
 10176  036D  3002               	movlw	2
 10177  036E  0666               	xorwf	_gesture_state_^(0+128),w
 10178  036F  0467               	iorwf	(_gesture_state_+1)^(0+128),w
 10179  0370  1D03               	btfss	3,2
 10180  0371  2B79               	goto	l6708
 10181                           
 10182                           ;APDS9960.c: 802:         gesture_motion_ = DIR_FAR;
 10183  0372  3006               	movlw	6
 10184  0373  0022               	movlb	2	; select bank2
 10185  0374  00E8               	movwf	_gesture_motion_^(0+256)
 10186  0375  3000               	movlw	0
 10187  0376  00E9               	movwf	(_gesture_motion_^(0+256)+1)
 10188                           
 10189                           ;APDS9960.c: 803:         return 1;
 10190  0377  3001               	movlw	1
 10191  0378  0008               	return
 10192  0379                     l6708:	
 10193                           
 10194                           ;APDS9960.c: 807:     if( (gesture_ud_count_ == -1) && (gesture_lr_count_ == 0) ) {
 10195  0379  0020               	movlb	0	; select bank0
 10196  037A  0A64               	incf	_gesture_ud_count_,w
 10197  037B  1D03               	skipz
 10198  037C  2B86               	goto	l6714
 10199  037D  0A65               	incf	_gesture_ud_count_+1,w
 10200  037E  1D03               	btfss	3,2
 10201  037F  2B86               	goto	l6714
 10202  0380  0862               	movf	_gesture_lr_count_,w
 10203  0381  0463               	iorwf	_gesture_lr_count_+1,w
 10204  0382  1D03               	btfss	3,2
 10205  0383  2B86               	goto	l6714
 10206  0384                     l6712:	
 10207                           
 10208                           ;APDS9960.c: 808:         gesture_motion_ = DIR_UP;
 10209  0384  3003               	movlw	3
 10210  0385  2BA5               	goto	L7
 10211  0386                     l6714:	
 10212                           ;APDS9960.c: 809:     } else if( (gesture_ud_count_ == 1) && (gesture_lr_count_ == 0) ) 
      +                          {
 10213                           
 10214  0386  0364               	decf	_gesture_ud_count_,w
 10215  0387  0465               	iorwf	_gesture_ud_count_+1,w
 10216  0388  1D03               	btfss	3,2
 10217  0389  2B90               	goto	l6720
 10218  038A  0862               	movf	_gesture_lr_count_,w
 10219  038B  0463               	iorwf	_gesture_lr_count_+1,w
 10220  038C  1D03               	btfss	3,2
 10221  038D  2B90               	goto	l6720
 10222  038E                     l6718:	
 10223                           
 10224                           ;APDS9960.c: 810:         gesture_motion_ = DIR_DOWN;
 10225  038E  3004               	movlw	4
 10226  038F  2BA5               	goto	L7
 10227  0390                     l6720:	
 10228                           ;APDS9960.c: 811:     } else if( (gesture_ud_count_ == 0) && (gesture_lr_count_ == 1) ) 
      +                          {
 10229                           
 10230  0390  0864               	movf	_gesture_ud_count_,w
 10231  0391  0465               	iorwf	_gesture_ud_count_+1,w
 10232  0392  1D03               	btfss	3,2
 10233  0393  2B9A               	goto	l6726
 10234  0394  0362               	decf	_gesture_lr_count_,w
 10235  0395  0463               	iorwf	_gesture_lr_count_+1,w
 10236  0396  1D03               	btfss	3,2
 10237  0397  2B9A               	goto	l6726
 10238  0398                     l6724:	
 10239                           
 10240                           ;APDS9960.c: 812:         gesture_motion_ = DIR_RIGHT;
 10241  0398  3002               	movlw	2
 10242  0399  2BA5               	goto	L7
 10243  039A                     l6726:	
 10244                           ;APDS9960.c: 813:     } else if( (gesture_ud_count_ == 0) && (gesture_lr_count_ == -1) )
      +                           {
 10245                           
 10246  039A  0864               	movf	_gesture_ud_count_,w
 10247  039B  0465               	iorwf	_gesture_ud_count_+1,w
 10248  039C  1D03               	btfss	3,2
 10249  039D  2BAA               	goto	l6732
 10250  039E  0A62               	incf	_gesture_lr_count_,w
 10251  039F  1D03               	skipz
 10252  03A0  2BAA               	goto	l6732
 10253  03A1  0A63               	incf	_gesture_lr_count_+1,w
 10254  03A2  1D03               	btfss	3,2
 10255  03A3  2BAA               	goto	l6732
 10256  03A4                     l6730:	
 10257                           
 10258                           ;APDS9960.c: 814:         gesture_motion_ = DIR_LEFT;
 10259  03A4  3001               	movlw	1
 10260  03A5                     L7:	
 10261  03A5  0022               	movlb	2	; select bank2
 10262  03A6  00E8               	movwf	_gesture_motion_^(0+256)
 10263  03A7  3000               	movlw	0
 10264  03A8  00E9               	movwf	(_gesture_motion_^(0+256)+1)
 10265                           
 10266                           ;APDS9960.c: 815:     } else if( (gesture_ud_count_ == -1) && (gesture_lr_count_ == 1) )
      +                           {
 10267  03A9  2CF0               	goto	l6808
 10268  03AA                     l6732:	
 10269  03AA  0A64               	incf	_gesture_ud_count_,w
 10270  03AB  1D03               	skipz
 10271  03AC  2BFB               	goto	l6750
 10272  03AD  0A65               	incf	_gesture_ud_count_+1,w
 10273  03AE  1D03               	btfss	3,2
 10274  03AF  2BFB               	goto	l6750
 10275  03B0  0362               	decf	_gesture_lr_count_,w
 10276  03B1  0463               	iorwf	_gesture_lr_count_+1,w
 10277  03B2  1D03               	btfss	3,2
 10278  03B3  2BFB               	goto	l6750
 10279                           
 10280                           ;APDS9960.c: 816:         if( ((gesture_ud_delta_) > 0 ? (gesture_ud_delta_) : -(gesture
      +                          _ud_delta_)) > ((gesture_lr_delta_) > 0 ? (gesture_lr_delta_) : -(gesture_lr_delta_)) ) 
      +                          {
 10281  03B4  0869               	movf	_gesture_ud_delta_+1,w
 10282  03B5  3A80               	xorlw	128
 10283  03B6  00A0               	movwf	??_decodeGesture
 10284  03B7  3080               	movlw	128
 10285  03B8  0220               	subwf	??_decodeGesture,w
 10286  03B9  1D03               	skipz
 10287  03BA  2BBD               	goto	u5785
 10288  03BB  3001               	movlw	1
 10289  03BC  0268               	subwf	_gesture_ud_delta_,w
 10290  03BD                     u5785:	
 10291  03BD  1803               	skipnc
 10292  03BE  2BCC               	goto	l6740
 10293  03BF  0020               	movlb	0	; select bank0
 10294  03C0  0968               	comf	_gesture_ud_delta_,w
 10295  03C1  00A0               	movwf	??_decodeGesture
 10296  03C2  0969               	comf	_gesture_ud_delta_+1,w
 10297  03C3  00A1               	movwf	??_decodeGesture+1
 10298  03C4  0AA0               	incf	??_decodeGesture,f
 10299  03C5  1903               	skipnz
 10300  03C6  0AA1               	incf	??_decodeGesture+1,f
 10301  03C7  0820               	movf	??_decodeGesture,w
 10302  03C8  00A2               	movwf	_decodeGesture$1805
 10303  03C9  0821               	movf	??_decodeGesture+1,w
 10304  03CA  00A3               	movwf	_decodeGesture$1805+1
 10305  03CB  2BD1               	goto	l1309
 10306  03CC                     l6740:	
 10307  03CC  0020               	movlb	0	; select bank0
 10308  03CD  0869               	movf	_gesture_ud_delta_+1,w
 10309  03CE  00A3               	movwf	_decodeGesture$1805+1
 10310  03CF  0868               	movf	_gesture_ud_delta_,w
 10311  03D0  00A2               	movwf	_decodeGesture$1805
 10312  03D1                     l1309:	
 10313  03D1  0867               	movf	_gesture_lr_delta_+1,w
 10314  03D2  3A80               	xorlw	128
 10315  03D3  00A0               	movwf	??_decodeGesture
 10316  03D4  3080               	movlw	128
 10317  03D5  0220               	subwf	??_decodeGesture,w
 10318  03D6  1D03               	skipz
 10319  03D7  2BDA               	goto	u5795
 10320  03D8  3001               	movlw	1
 10321  03D9  0266               	subwf	_gesture_lr_delta_,w
 10322  03DA                     u5795:	
 10323  03DA  1803               	skipnc
 10324  03DB  2BE9               	goto	l6744
 10325  03DC  0020               	movlb	0	; select bank0
 10326  03DD  0966               	comf	_gesture_lr_delta_,w
 10327  03DE  00A0               	movwf	??_decodeGesture
 10328  03DF  0967               	comf	_gesture_lr_delta_+1,w
 10329  03E0  00A1               	movwf	??_decodeGesture+1
 10330  03E1  0AA0               	incf	??_decodeGesture,f
 10331  03E2  1903               	skipnz
 10332  03E3  0AA1               	incf	??_decodeGesture+1,f
 10333  03E4  0820               	movf	??_decodeGesture,w
 10334  03E5  00A4               	movwf	_decodeGesture$1806
 10335  03E6  0821               	movf	??_decodeGesture+1,w
 10336  03E7  00A5               	movwf	_decodeGesture$1806+1
 10337  03E8  2BEE               	goto	l1313
 10338  03E9                     l6744:	
 10339  03E9  0020               	movlb	0	; select bank0
 10340  03EA  0867               	movf	_gesture_lr_delta_+1,w
 10341  03EB  00A5               	movwf	_decodeGesture$1806+1
 10342  03EC  0866               	movf	_gesture_lr_delta_,w
 10343  03ED  00A4               	movwf	_decodeGesture$1806
 10344  03EE                     l1313:	
 10345  03EE  0825               	movf	_decodeGesture$1806+1,w
 10346  03EF  3A80               	xorlw	128
 10347  03F0  00A0               	movwf	??_decodeGesture
 10348  03F1  0823               	movf	_decodeGesture$1805+1,w
 10349  03F2  3A80               	xorlw	128
 10350  03F3  0220               	subwf	??_decodeGesture,w
 10351  03F4  1D03               	skipz
 10352  03F5  2BF8               	goto	u5805
 10353  03F6  0822               	movf	_decodeGesture$1805,w
 10354  03F7  0224               	subwf	_decodeGesture$1806,w
 10355  03F8                     u5805:	
 10356  03F8  1C03               	btfss	3,0
 10357  03F9  2B84               	goto	l6712
 10358  03FA  2B98               	goto	l6724
 10359  03FB                     l6750:	
 10360  03FB  0364               	decf	_gesture_ud_count_,w
 10361  03FC  0465               	iorwf	_gesture_ud_count_+1,w
 10362  03FD  1D03               	btfss	3,2
 10363  03FE  2C4C               	goto	l6768
 10364  03FF  0A62               	incf	_gesture_lr_count_,w
 10365  0400  1D03               	skipz
 10366  0401  2C4C               	goto	l6768
 10367  0402  0A63               	incf	_gesture_lr_count_+1,w
 10368  0403  1D03               	btfss	3,2
 10369  0404  2C4C               	goto	l6768
 10370                           
 10371                           ;APDS9960.c: 822:         if( ((gesture_ud_delta_) > 0 ? (gesture_ud_delta_) : -(gesture
      +                          _ud_delta_)) > ((gesture_lr_delta_) > 0 ? (gesture_lr_delta_) : -(gesture_lr_delta_)) ) 
      +                          {
 10372  0405  0869               	movf	_gesture_ud_delta_+1,w
 10373  0406  3A80               	xorlw	128
 10374  0407  00A0               	movwf	??_decodeGesture
 10375  0408  3080               	movlw	128
 10376  0409  0220               	subwf	??_decodeGesture,w
 10377  040A  1D03               	skipz
 10378  040B  2C0E               	goto	u5835
 10379  040C  3001               	movlw	1
 10380  040D  0268               	subwf	_gesture_ud_delta_,w
 10381  040E                     u5835:	
 10382  040E  1803               	skipnc
 10383  040F  2C1D               	goto	l6758
 10384  0410  0020               	movlb	0	; select bank0
 10385  0411  0968               	comf	_gesture_ud_delta_,w
 10386  0412  00A0               	movwf	??_decodeGesture
 10387  0413  0969               	comf	_gesture_ud_delta_+1,w
 10388  0414  00A1               	movwf	??_decodeGesture+1
 10389  0415  0AA0               	incf	??_decodeGesture,f
 10390  0416  1903               	skipnz
 10391  0417  0AA1               	incf	??_decodeGesture+1,f
 10392  0418  0820               	movf	??_decodeGesture,w
 10393  0419  00A6               	movwf	_decodeGesture$1807
 10394  041A  0821               	movf	??_decodeGesture+1,w
 10395  041B  00A7               	movwf	_decodeGesture$1807+1
 10396  041C  2C22               	goto	l1321
 10397  041D                     l6758:	
 10398  041D  0020               	movlb	0	; select bank0
 10399  041E  0869               	movf	_gesture_ud_delta_+1,w
 10400  041F  00A7               	movwf	_decodeGesture$1807+1
 10401  0420  0868               	movf	_gesture_ud_delta_,w
 10402  0421  00A6               	movwf	_decodeGesture$1807
 10403  0422                     l1321:	
 10404  0422  0867               	movf	_gesture_lr_delta_+1,w
 10405  0423  3A80               	xorlw	128
 10406  0424  00A0               	movwf	??_decodeGesture
 10407  0425  3080               	movlw	128
 10408  0426  0220               	subwf	??_decodeGesture,w
 10409  0427  1D03               	skipz
 10410  0428  2C2B               	goto	u5845
 10411  0429  3001               	movlw	1
 10412  042A  0266               	subwf	_gesture_lr_delta_,w
 10413  042B                     u5845:	
 10414  042B  1803               	skipnc
 10415  042C  2C3A               	goto	l6762
 10416  042D  0020               	movlb	0	; select bank0
 10417  042E  0966               	comf	_gesture_lr_delta_,w
 10418  042F  00A0               	movwf	??_decodeGesture
 10419  0430  0967               	comf	_gesture_lr_delta_+1,w
 10420  0431  00A1               	movwf	??_decodeGesture+1
 10421  0432  0AA0               	incf	??_decodeGesture,f
 10422  0433  1903               	skipnz
 10423  0434  0AA1               	incf	??_decodeGesture+1,f
 10424  0435  0820               	movf	??_decodeGesture,w
 10425  0436  00A8               	movwf	_decodeGesture$1808
 10426  0437  0821               	movf	??_decodeGesture+1,w
 10427  0438  00A9               	movwf	_decodeGesture$1808+1
 10428  0439  2C3F               	goto	l1325
 10429  043A                     l6762:	
 10430  043A  0020               	movlb	0	; select bank0
 10431  043B  0867               	movf	_gesture_lr_delta_+1,w
 10432  043C  00A9               	movwf	_decodeGesture$1808+1
 10433  043D  0866               	movf	_gesture_lr_delta_,w
 10434  043E  00A8               	movwf	_decodeGesture$1808
 10435  043F                     l1325:	
 10436  043F  0829               	movf	_decodeGesture$1808+1,w
 10437  0440  3A80               	xorlw	128
 10438  0441  00A0               	movwf	??_decodeGesture
 10439  0442  0827               	movf	_decodeGesture$1807+1,w
 10440  0443  3A80               	xorlw	128
 10441  0444  0220               	subwf	??_decodeGesture,w
 10442  0445  1D03               	skipz
 10443  0446  2C49               	goto	u5855
 10444  0447  0826               	movf	_decodeGesture$1807,w
 10445  0448  0228               	subwf	_decodeGesture$1808,w
 10446  0449                     u5855:	
 10447  0449  1C03               	btfss	3,0
 10448  044A  2B8E               	goto	l6718
 10449  044B  2BA4               	goto	l6730
 10450  044C                     l6768:	
 10451  044C  0A64               	incf	_gesture_ud_count_,w
 10452  044D  1D03               	skipz
 10453  044E  2C9F               	goto	l6786
 10454  044F  0A65               	incf	_gesture_ud_count_+1,w
 10455  0450  1D03               	btfss	3,2
 10456  0451  2C9F               	goto	l6786
 10457  0452  0A62               	incf	_gesture_lr_count_,w
 10458  0453  1D03               	skipz
 10459  0454  2C9F               	goto	l6786
 10460  0455  0A63               	incf	_gesture_lr_count_+1,w
 10461  0456  1D03               	btfss	3,2
 10462  0457  2C9F               	goto	l6786
 10463                           
 10464                           ;APDS9960.c: 828:         if( ((gesture_ud_delta_) > 0 ? (gesture_ud_delta_) : -(gesture
      +                          _ud_delta_)) > ((gesture_lr_delta_) > 0 ? (gesture_lr_delta_) : -(gesture_lr_delta_)) ) 
      +                          {
 10465  0458  0869               	movf	_gesture_ud_delta_+1,w
 10466  0459  3A80               	xorlw	128
 10467  045A  00A0               	movwf	??_decodeGesture
 10468  045B  3080               	movlw	128
 10469  045C  0220               	subwf	??_decodeGesture,w
 10470  045D  1D03               	skipz
 10471  045E  2C61               	goto	u5885
 10472  045F  3001               	movlw	1
 10473  0460  0268               	subwf	_gesture_ud_delta_,w
 10474  0461                     u5885:	
 10475  0461  1803               	skipnc
 10476  0462  2C70               	goto	l6776
 10477  0463  0020               	movlb	0	; select bank0
 10478  0464  0968               	comf	_gesture_ud_delta_,w
 10479  0465  00A0               	movwf	??_decodeGesture
 10480  0466  0969               	comf	_gesture_ud_delta_+1,w
 10481  0467  00A1               	movwf	??_decodeGesture+1
 10482  0468  0AA0               	incf	??_decodeGesture,f
 10483  0469  1903               	skipnz
 10484  046A  0AA1               	incf	??_decodeGesture+1,f
 10485  046B  0820               	movf	??_decodeGesture,w
 10486  046C  00AA               	movwf	_decodeGesture$1809
 10487  046D  0821               	movf	??_decodeGesture+1,w
 10488  046E  00AB               	movwf	_decodeGesture$1809+1
 10489  046F  2C75               	goto	l1333
 10490  0470                     l6776:	
 10491  0470  0020               	movlb	0	; select bank0
 10492  0471  0869               	movf	_gesture_ud_delta_+1,w
 10493  0472  00AB               	movwf	_decodeGesture$1809+1
 10494  0473  0868               	movf	_gesture_ud_delta_,w
 10495  0474  00AA               	movwf	_decodeGesture$1809
 10496  0475                     l1333:	
 10497  0475  0867               	movf	_gesture_lr_delta_+1,w
 10498  0476  3A80               	xorlw	128
 10499  0477  00A0               	movwf	??_decodeGesture
 10500  0478  3080               	movlw	128
 10501  0479  0220               	subwf	??_decodeGesture,w
 10502  047A  1D03               	skipz
 10503  047B  2C7E               	goto	u5895
 10504  047C  3001               	movlw	1
 10505  047D  0266               	subwf	_gesture_lr_delta_,w
 10506  047E                     u5895:	
 10507  047E  1803               	skipnc
 10508  047F  2C8D               	goto	l6780
 10509  0480  0020               	movlb	0	; select bank0
 10510  0481  0966               	comf	_gesture_lr_delta_,w
 10511  0482  00A0               	movwf	??_decodeGesture
 10512  0483  0967               	comf	_gesture_lr_delta_+1,w
 10513  0484  00A1               	movwf	??_decodeGesture+1
 10514  0485  0AA0               	incf	??_decodeGesture,f
 10515  0486  1903               	skipnz
 10516  0487  0AA1               	incf	??_decodeGesture+1,f
 10517  0488  0820               	movf	??_decodeGesture,w
 10518  0489  00AC               	movwf	_decodeGesture$1810
 10519  048A  0821               	movf	??_decodeGesture+1,w
 10520  048B  00AD               	movwf	_decodeGesture$1810+1
 10521  048C  2C92               	goto	l1337
 10522  048D                     l6780:	
 10523  048D  0020               	movlb	0	; select bank0
 10524  048E  0867               	movf	_gesture_lr_delta_+1,w
 10525  048F  00AD               	movwf	_decodeGesture$1810+1
 10526  0490  0866               	movf	_gesture_lr_delta_,w
 10527  0491  00AC               	movwf	_decodeGesture$1810
 10528  0492                     l1337:	
 10529  0492  082D               	movf	_decodeGesture$1810+1,w
 10530  0493  3A80               	xorlw	128
 10531  0494  00A0               	movwf	??_decodeGesture
 10532  0495  082B               	movf	_decodeGesture$1809+1,w
 10533  0496  3A80               	xorlw	128
 10534  0497  0220               	subwf	??_decodeGesture,w
 10535  0498  1D03               	skipz
 10536  0499  2C9C               	goto	u5905
 10537  049A  082A               	movf	_decodeGesture$1809,w
 10538  049B  022C               	subwf	_decodeGesture$1810,w
 10539  049C                     u5905:	
 10540  049C  1C03               	btfss	3,0
 10541  049D  2B84               	goto	l6712
 10542  049E  2BA4               	goto	l6730
 10543  049F                     l6786:	
 10544  049F  0364               	decf	_gesture_ud_count_,w
 10545  04A0  0465               	iorwf	_gesture_ud_count_+1,w
 10546  04A1  1D03               	btfss	3,2
 10547  04A2  2CEE               	goto	l6804
 10548  04A3  0362               	decf	_gesture_lr_count_,w
 10549  04A4  0463               	iorwf	_gesture_lr_count_+1,w
 10550  04A5  1D03               	btfss	3,2
 10551  04A6  2CEE               	goto	l6804
 10552                           
 10553                           ;APDS9960.c: 834:         if( ((gesture_ud_delta_) > 0 ? (gesture_ud_delta_) : -(gesture
      +                          _ud_delta_)) > ((gesture_lr_delta_) > 0 ? (gesture_lr_delta_) : -(gesture_lr_delta_)) ) 
      +                          {
 10554  04A7  0869               	movf	_gesture_ud_delta_+1,w
 10555  04A8  3A80               	xorlw	128
 10556  04A9  00A0               	movwf	??_decodeGesture
 10557  04AA  3080               	movlw	128
 10558  04AB  0220               	subwf	??_decodeGesture,w
 10559  04AC  1D03               	skipz
 10560  04AD  2CB0               	goto	u5935
 10561  04AE  3001               	movlw	1
 10562  04AF  0268               	subwf	_gesture_ud_delta_,w
 10563  04B0                     u5935:	
 10564  04B0  1803               	skipnc
 10565  04B1  2CBF               	goto	l6794
 10566  04B2  0020               	movlb	0	; select bank0
 10567  04B3  0968               	comf	_gesture_ud_delta_,w
 10568  04B4  00A0               	movwf	??_decodeGesture
 10569  04B5  0969               	comf	_gesture_ud_delta_+1,w
 10570  04B6  00A1               	movwf	??_decodeGesture+1
 10571  04B7  0AA0               	incf	??_decodeGesture,f
 10572  04B8  1903               	skipnz
 10573  04B9  0AA1               	incf	??_decodeGesture+1,f
 10574  04BA  0820               	movf	??_decodeGesture,w
 10575  04BB  00AE               	movwf	_decodeGesture$1811
 10576  04BC  0821               	movf	??_decodeGesture+1,w
 10577  04BD  00AF               	movwf	_decodeGesture$1811+1
 10578  04BE  2CC4               	goto	l1345
 10579  04BF                     l6794:	
 10580  04BF  0020               	movlb	0	; select bank0
 10581  04C0  0869               	movf	_gesture_ud_delta_+1,w
 10582  04C1  00AF               	movwf	_decodeGesture$1811+1
 10583  04C2  0868               	movf	_gesture_ud_delta_,w
 10584  04C3  00AE               	movwf	_decodeGesture$1811
 10585  04C4                     l1345:	
 10586  04C4  0867               	movf	_gesture_lr_delta_+1,w
 10587  04C5  3A80               	xorlw	128
 10588  04C6  00A0               	movwf	??_decodeGesture
 10589  04C7  3080               	movlw	128
 10590  04C8  0220               	subwf	??_decodeGesture,w
 10591  04C9  1D03               	skipz
 10592  04CA  2CCD               	goto	u5945
 10593  04CB  3001               	movlw	1
 10594  04CC  0266               	subwf	_gesture_lr_delta_,w
 10595  04CD                     u5945:	
 10596  04CD  1803               	skipnc
 10597  04CE  2CDC               	goto	l6798
 10598  04CF  0020               	movlb	0	; select bank0
 10599  04D0  0966               	comf	_gesture_lr_delta_,w
 10600  04D1  00A0               	movwf	??_decodeGesture
 10601  04D2  0967               	comf	_gesture_lr_delta_+1,w
 10602  04D3  00A1               	movwf	??_decodeGesture+1
 10603  04D4  0AA0               	incf	??_decodeGesture,f
 10604  04D5  1903               	skipnz
 10605  04D6  0AA1               	incf	??_decodeGesture+1,f
 10606  04D7  0820               	movf	??_decodeGesture,w
 10607  04D8  00B0               	movwf	_decodeGesture$1812
 10608  04D9  0821               	movf	??_decodeGesture+1,w
 10609  04DA  00B1               	movwf	_decodeGesture$1812+1
 10610  04DB  2CE1               	goto	l1349
 10611  04DC                     l6798:	
 10612  04DC  0020               	movlb	0	; select bank0
 10613  04DD  0867               	movf	_gesture_lr_delta_+1,w
 10614  04DE  00B1               	movwf	_decodeGesture$1812+1
 10615  04DF  0866               	movf	_gesture_lr_delta_,w
 10616  04E0  00B0               	movwf	_decodeGesture$1812
 10617  04E1                     l1349:	
 10618  04E1  0831               	movf	_decodeGesture$1812+1,w
 10619  04E2  3A80               	xorlw	128
 10620  04E3  00A0               	movwf	??_decodeGesture
 10621  04E4  082F               	movf	_decodeGesture$1811+1,w
 10622  04E5  3A80               	xorlw	128
 10623  04E6  0220               	subwf	??_decodeGesture,w
 10624  04E7  1D03               	skipz
 10625  04E8  2CEB               	goto	u5955
 10626  04E9  082E               	movf	_decodeGesture$1811,w
 10627  04EA  0230               	subwf	_decodeGesture$1812,w
 10628  04EB                     u5955:	
 10629  04EB  1C03               	btfss	3,0
 10630  04EC  2B8E               	goto	l6718
 10631  04ED  2B98               	goto	l6724
 10632  04EE                     l6804:	
 10633                           
 10634                           ;APDS9960.c: 840:         return 0;
 10635  04EE  3000               	movlw	0
 10636  04EF  0008               	return
 10637  04F0                     l6808:	
 10638                           
 10639                           ;APDS9960.c: 843:     return 1;
 10640  04F0  3001               	movlw	1
 10641  04F1  0008               	return
 10642  04F2                     __end_of_decodeGesture:	
 10643                           
 10644                           	psect	text23
 10645  0D1E                     __ptext23:	
 10646 ;; *************** function _Display_Name *****************
 10647 ;; Defined at:
 10648 ;;		line 197 in file "main.c"
 10649 ;; Parameters:    Size  Location     Type
 10650 ;;  string1         2    5[BANK0 ] PTR unsigned char 
 10651 ;;		 -> STR_5(7), STR_4(11), STR_3(16), STR_2(13), 
 10652 ;;		 -> STR_1(12), 
 10653 ;; Auto vars:     Size  Location     Type
 10654 ;;  i               2   10[BANK0 ] int 
 10655 ;;  length          2    8[BANK0 ] int 
 10656 ;; Return value:  Size  Location     Type
 10657 ;;                  1    wreg      void 
 10658 ;; Registers used:
 10659 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10660 ;; Tracked objects:
 10661 ;;		On entry : 0/0
 10662 ;;		On exit  : 0/0
 10663 ;;		Unchanged: 0/0
 10664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10665 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10666 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10667 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10668 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10669 ;;Total ram usage:        7 bytes
 10670 ;; Hardware stack levels used:    1
 10671 ;; Hardware stack levels required when called:    7
 10672 ;; This function calls:
 10673 ;;		_SPI_Write
 10674 ;;		_strlen
 10675 ;; This function is called by:
 10676 ;;		_main
 10677 ;;		_handleGesture
 10678 ;;		_Get_ADC
 10679 ;; This function uses a non-reentrant model
 10680 ;;
 10681                           
 10682                           
 10683                           ;psect for function _Display_Name
 10684  0D1E                     _Display_Name:	
 10685                           
 10686                           ;main.c: 198:     int length;;main.c: 199:     int i;;main.c: 200:     SPI_Write(0xFE);
 10687                           
 10688                           ;incstack = 0
 10689                           ; Regs used in _Display_Name: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10690  0D1E  30FE               	movlw	254
 10691  0D1F  3189  2156  318D   	fcall	_SPI_Write
 10692                           
 10693                           ;main.c: 201:     _delay((unsigned long)((100)*(500000/4000.0)));
 10694  0D22  3011               	movlw	17
 10695  0D23  0020               	movlb	0	; select bank0
 10696  0D24  00A7               	movwf	??_Display_Name
 10697  0D25  303A               	movlw	58
 10698  0D26                     u7077:	
 10699  0D26  0B89               	decfsz	9,f
 10700  0D27  2D26               	goto	u7077
 10701  0D28  0BA7               	decfsz	??_Display_Name,f
 10702  0D29  2D26               	goto	u7077
 10703  0D2A  0000               	nop
 10704                           
 10705                           ;main.c: 202:     SPI_Write(0x51);
 10706  0D2B  3051               	movlw	81
 10707  0D2C  3189  2156  318D   	fcall	_SPI_Write
 10708                           
 10709                           ;main.c: 203:     length = strlen(string1);
 10710  0D2F  0020               	movlb	0	; select bank0
 10711  0D30  0826               	movf	Display_Name@string1+1,w
 10712  0D31  00A1               	movwf	strlen@s+1
 10713  0D32  0825               	movf	Display_Name@string1,w
 10714  0D33  00A0               	movwf	strlen@s
 10715  0D34  3189  2199  318D   	fcall	_strlen
 10716  0D37  0020               	movlb	0	; select bank0
 10717  0D38  0821               	movf	?_strlen+1,w
 10718  0D39  00A9               	movwf	Display_Name@length+1
 10719  0D3A  0820               	movf	?_strlen,w
 10720  0D3B  00A8               	movwf	Display_Name@length
 10721                           
 10722                           ;main.c: 204:     for(i = 0; i < length; i++){
 10723  0D3C  01AA               	clrf	Display_Name@i
 10724  0D3D  01AB               	clrf	Display_Name@i+1
 10725  0D3E                     l6972:	
 10726  0D3E  082B               	movf	Display_Name@i+1,w
 10727  0D3F  3A80               	xorlw	128
 10728  0D40  00A7               	movwf	??_Display_Name
 10729  0D41  0829               	movf	Display_Name@length+1,w
 10730  0D42  3A80               	xorlw	128
 10731  0D43  0227               	subwf	??_Display_Name,w
 10732  0D44  1D03               	skipz
 10733  0D45  2D48               	goto	u5985
 10734  0D46  0828               	movf	Display_Name@length,w
 10735  0D47  022A               	subwf	Display_Name@i,w
 10736  0D48                     u5985:	
 10737  0D48  1803               	btfsc	3,0
 10738  0D49  2D5B               	goto	l952
 10739                           
 10740                           ;main.c: 205:         SPI_Write(string1[i]);
 10741  0D4A  0020               	movlb	0	; select bank0
 10742  0D4B  0825               	movf	Display_Name@string1,w
 10743  0D4C  072A               	addwf	Display_Name@i,w
 10744  0D4D  0084               	movwf	4
 10745  0D4E  0826               	movf	Display_Name@string1+1,w
 10746  0D4F  3D2B               	addwfc	Display_Name@i+1,w
 10747  0D50  0085               	movwf	5
 10748  0D51  0800               	movf	0,w	;code access
 10749  0D52  3189  2156  318D   	fcall	_SPI_Write
 10750                           
 10751                           ;main.c: 206:     }
 10752  0D55  3001               	movlw	1
 10753  0D56  0020               	movlb	0	; select bank0
 10754  0D57  07AA               	addwf	Display_Name@i,f
 10755  0D58  3000               	movlw	0
 10756  0D59  3DAB               	addwfc	Display_Name@i+1,f
 10757  0D5A  2D3E               	goto	l6972
 10758  0D5B                     l952:	
 10759                           
 10760                           ;main.c: 207:     printed = 1;
 10761  0D5B  0020               	movlb	0	; select bank0
 10762  0D5C  01ED               	clrf	_printed
 10763  0D5D  0AED               	incf	_printed,f
 10764  0D5E  0008               	return
 10765  0D5F                     __end_of_Display_Name:	
 10766                           
 10767                           	psect	text24
 10768  077B                     __ptext24:	
 10769 ;; *************** function _enableGestureSensor *****************
 10770 ;; Defined at:
 10771 ;;		line 409 in file "APDS9960.c"
 10772 ;; Parameters:    Size  Location     Type
 10773 ;;  interrupts      1    wreg     _Bool 
 10774 ;; Auto vars:     Size  Location     Type
 10775 ;;  interrupts      1   17[BANK0 ] _Bool 
 10776 ;; Return value:  Size  Location     Type
 10777 ;;                  1    wreg      _Bool 
 10778 ;; Registers used:
 10779 ;;		wreg, status,2, status,0, pclath, cstack
 10780 ;; Tracked objects:
 10781 ;;		On entry : 0/0
 10782 ;;		On exit  : 0/0
 10783 ;;		Unchanged: 0/0
 10784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10785 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10786 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10787 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10788 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10789 ;;Total ram usage:        2 bytes
 10790 ;; Hardware stack levels used:    1
 10791 ;; Hardware stack levels required when called:   11
 10792 ;; This function calls:
 10793 ;;		_enablePower
 10794 ;;		_resetGestureParameters
 10795 ;;		_setGestureIntEnable
 10796 ;;		_setGestureMode
 10797 ;;		_setLEDBoost
 10798 ;;		_setMode
 10799 ;;		_wireWriteDataByte
 10800 ;; This function is called by:
 10801 ;;		_main
 10802 ;; This function uses a non-reentrant model
 10803 ;;
 10804                           
 10805                           
 10806                           ;psect for function _enableGestureSensor
 10807  077B                     _enableGestureSensor:	
 10808                           
 10809                           ;incstack = 0
 10810                           ; Regs used in _enableGestureSensor: [wreg+status,2+status,0+pclath+cstack]
 10811                           ;enableGestureSensor@interrupts stored from wreg
 10812  077B  0020               	movlb	0	; select bank0
 10813  077C  00B1               	movwf	enableGestureSensor@interrupts
 10814                           
 10815                           ;APDS9960.c: 409: _Bool enableGestureSensor ( _Bool interrupts);APDS9960.c: 410: {;APDS9
      +                          960.c: 418:     resetGestureParameters();
 10816  077D  3189  2182  3187   	fcall	_resetGestureParameters
 10817                           
 10818                           ;APDS9960.c: 419:     if( !wireWriteDataByte(0x83, 0xFF) ) {
 10819  0780  30FF               	movlw	255
 10820  0781  0020               	movlb	0	; select bank0
 10821  0782  00B0               	movwf	??_enableGestureSensor
 10822  0783  0830               	movf	??_enableGestureSensor,w
 10823  0784  00A6               	movwf	wireWriteDataByte@val
 10824  0785  3083               	movlw	131
 10825  0786  3189  21CC  3187   	fcall	_wireWriteDataByte
 10826  0789  0020               	movlb	0	; select bank0
 10827  078A  0826               	movf	?_wireWriteDataByte,w
 10828  078B  0427               	iorwf	?_wireWriteDataByte+1,w
 10829  078C  1903               	btfsc	3,2
 10830  078D  2F91               	goto	l7464
 10831  078E  2F93               	goto	l7468
 10832  078F                     l7482:	
 10833                           
 10834                           ;APDS9960.c: 429:         if( !setGestureIntEnable(1) ) {
 10835  078F  3001               	movlw	1
 10836  0790  2FAC               	goto	L8
 10837  0791                     l7464:	
 10838                           
 10839                           ;APDS9960.c: 420:         return 0;
 10840  0791  3000               	movlw	0
 10841  0792  0008               	return
 10842  0793                     l7468:	
 10843                           
 10844                           ;APDS9960.c: 422:     if( !wireWriteDataByte(0x8E, 0x89) ) {
 10845  0793  3089               	movlw	137
 10846  0794  00B0               	movwf	??_enableGestureSensor
 10847  0795  0830               	movf	??_enableGestureSensor,w
 10848  0796  00A6               	movwf	wireWriteDataByte@val
 10849  0797  308E               	movlw	142
 10850  0798  3189  21CC  3187   	fcall	_wireWriteDataByte
 10851  079B  0020               	movlb	0	; select bank0
 10852  079C  0826               	movf	?_wireWriteDataByte,w
 10853  079D  0427               	iorwf	?_wireWriteDataByte+1,w
 10854  079E  1903               	btfsc	3,2
 10855  079F  2F91               	goto	l7464
 10856                           
 10857                           ;APDS9960.c: 425:     if( !setLEDBoost(3) ) {
 10858  07A0  3003               	movlw	3
 10859  07A1  318C  241A  3187   	fcall	_setLEDBoost
 10860  07A4  3A00               	xorlw	0
 10861  07A5  1903               	btfsc	3,2
 10862  07A6  2F91               	goto	l7464
 10863                           
 10864                           ;APDS9960.c: 428:     if( interrupts ) {
 10865  07A7  0020               	movlb	0	; select bank0
 10866  07A8  0831               	movf	enableGestureSensor@interrupts,w
 10867  07A9  1D03               	btfss	3,2
 10868  07AA  2F8F               	goto	l7482
 10869                           
 10870                           ;APDS9960.c: 433:         if( !setGestureIntEnable(0) ) {
 10871  07AB  3000               	movlw	0
 10872  07AC                     L8:	
 10873  07AC  318B  23BE  3187   	fcall	_setGestureIntEnable
 10874  07AF  3A00               	xorlw	0
 10875  07B0  1903               	btfsc	3,2
 10876  07B1  2F91               	goto	l7464
 10877                           
 10878                           ;APDS9960.c: 437:     if( !setGestureMode(1) ) {
 10879  07B2  3001               	movlw	1
 10880  07B3  318A  22A5  3187   	fcall	_setGestureMode
 10881  07B6  3A00               	xorlw	0
 10882  07B7  1903               	btfsc	3,2
 10883  07B8  2F91               	goto	l7464
 10884                           
 10885                           ;APDS9960.c: 440:     if( !enablePower() ){
 10886  07B9  3188  20BA  3187   	fcall	_enablePower
 10887  07BC  3A00               	xorlw	0
 10888  07BD  1903               	btfsc	3,2
 10889  07BE  2F91               	goto	l7464
 10890                           
 10891                           ;APDS9960.c: 443:     if( !setMode(3, 1) ) {
 10892  07BF  0020               	movlb	0	; select bank0
 10893  07C0  01AB               	clrf	setMode@enable
 10894  07C1  0AAB               	incf	setMode@enable,f
 10895  07C2  3003               	movlw	3
 10896  07C3  318F  2707  3187   	fcall	_setMode
 10897  07C6  3A00               	xorlw	0
 10898  07C7  1903               	btfsc	3,2
 10899  07C8  2F91               	goto	l7464
 10900                           
 10901                           ;APDS9960.c: 446:     if( !setMode(2, 1) ) {
 10902  07C9  0020               	movlb	0	; select bank0
 10903  07CA  01AB               	clrf	setMode@enable
 10904  07CB  0AAB               	incf	setMode@enable,f
 10905  07CC  3002               	movlw	2
 10906  07CD  318F  2707  3187   	fcall	_setMode
 10907  07D0  3A00               	xorlw	0
 10908  07D1  1903               	btfsc	3,2
 10909  07D2  2F91               	goto	l7464
 10910                           
 10911                           ;APDS9960.c: 449:     if( !setMode(6, 1) ) {
 10912  07D3  0020               	movlb	0	; select bank0
 10913  07D4  01AB               	clrf	setMode@enable
 10914  07D5  0AAB               	incf	setMode@enable,f
 10915  07D6  3006               	movlw	6
 10916  07D7  318F  2707  3187   	fcall	_setMode
 10917  07DA  3A00               	xorlw	0
 10918  07DB  1903               	btfsc	3,2
 10919  07DC  2F91               	goto	l7464
 10920                           
 10921                           ;APDS9960.c: 453:     return 1;
 10922  07DD  3001               	movlw	1
 10923  07DE  0008               	return
 10924  07DF                     __end_of_enableGestureSensor:	
 10925                           
 10926                           	psect	text25
 10927  0C1A                     __ptext25:	
 10928 ;; *************** function _setLEDBoost *****************
 10929 ;; Defined at:
 10930 ;;		line 484 in file "APDS9960.c"
 10931 ;; Parameters:    Size  Location     Type
 10932 ;;  boost           1    wreg     unsigned char 
 10933 ;; Auto vars:     Size  Location     Type
 10934 ;;  boost           1   13[BANK0 ] unsigned char 
 10935 ;;  val             1   12[BANK0 ] unsigned char 
 10936 ;; Return value:  Size  Location     Type
 10937 ;;                  1    wreg      _Bool 
 10938 ;; Registers used:
 10939 ;;		wreg, status,2, status,0, pclath, cstack
 10940 ;; Tracked objects:
 10941 ;;		On entry : 0/0
 10942 ;;		On exit  : 0/0
 10943 ;;		Unchanged: 0/0
 10944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10946 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10947 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10948 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10949 ;;Total ram usage:        4 bytes
 10950 ;; Hardware stack levels used:    1
 10951 ;; Hardware stack levels required when called:    8
 10952 ;; This function calls:
 10953 ;;		_wireReadDataByte
 10954 ;;		_wireWriteDataByte
 10955 ;; This function is called by:
 10956 ;;		_enableGestureSensor
 10957 ;; This function uses a non-reentrant model
 10958 ;;
 10959                           
 10960                           
 10961                           ;psect for function _setLEDBoost
 10962  0C1A                     _setLEDBoost:	
 10963                           
 10964                           ;incstack = 0
 10965                           ; Regs used in _setLEDBoost: [wreg+status,2+status,0+pclath+cstack]
 10966                           ;setLEDBoost@boost stored from wreg
 10967  0C1A  0020               	movlb	0	; select bank0
 10968  0C1B  00AD               	movwf	setLEDBoost@boost
 10969                           
 10970                           ;APDS9960.c: 484: _Bool setLEDBoost(uint8_t boost);APDS9960.c: 485: {;APDS9960.c: 486:  
      +                             uint8_t val;;APDS9960.c: 489:     val=wireReadDataByte(0x90);
 10971  0C1C  3090               	movlw	144
 10972  0C1D  318A  225B  318C   	fcall	_wireReadDataByte
 10973  0C20  0020               	movlb	0	; select bank0
 10974  0C21  00AA               	movwf	??_setLEDBoost
 10975  0C22  082A               	movf	??_setLEDBoost,w
 10976  0C23  00AC               	movwf	setLEDBoost@val
 10977                           
 10978                           ;APDS9960.c: 492:     boost &= 0b00000011;
 10979  0C24  3003               	movlw	3
 10980  0C25  00AA               	movwf	??_setLEDBoost
 10981  0C26  082A               	movf	??_setLEDBoost,w
 10982  0C27  05AD               	andwf	setLEDBoost@boost,f
 10983                           
 10984                           ;APDS9960.c: 493:     boost = boost << 4;
 10985  0C28  082D               	movf	setLEDBoost@boost,w
 10986  0C29  00AA               	movwf	??_setLEDBoost
 10987  0C2A  3003               	movlw	3
 10988  0C2B                     u6245:	
 10989  0C2B  35AA               	lslf	??_setLEDBoost,f
 10990  0C2C  3EFF               	addlw	-1
 10991  0C2D  1D03               	skipz
 10992  0C2E  2C2B               	goto	u6245
 10993  0C2F  352A               	lslf	??_setLEDBoost,w
 10994  0C30  00AB               	movwf	??_setLEDBoost+1
 10995  0C31  082B               	movf	??_setLEDBoost+1,w
 10996  0C32  00AD               	movwf	setLEDBoost@boost
 10997                           
 10998                           ;APDS9960.c: 494:     val &= 0b11001111;
 10999  0C33  30CF               	movlw	207
 11000  0C34  00AA               	movwf	??_setLEDBoost
 11001  0C35  082A               	movf	??_setLEDBoost,w
 11002  0C36  05AC               	andwf	setLEDBoost@val,f
 11003                           
 11004                           ;APDS9960.c: 495:     val |= boost;
 11005  0C37  082D               	movf	setLEDBoost@boost,w
 11006  0C38  00AA               	movwf	??_setLEDBoost
 11007  0C39  082A               	movf	??_setLEDBoost,w
 11008  0C3A  04AC               	iorwf	setLEDBoost@val,f
 11009                           
 11010                           ;APDS9960.c: 498:     if( !wireWriteDataByte(0x90, val) ) {
 11011  0C3B  082C               	movf	setLEDBoost@val,w
 11012  0C3C  00AA               	movwf	??_setLEDBoost
 11013  0C3D  082A               	movf	??_setLEDBoost,w
 11014  0C3E  00A6               	movwf	wireWriteDataByte@val
 11015  0C3F  3090               	movlw	144
 11016  0C40  3189  21CC  318C   	fcall	_wireWriteDataByte
 11017  0C43  0020               	movlb	0	; select bank0
 11018  0C44  0826               	movf	?_wireWriteDataByte,w
 11019  0C45  0427               	iorwf	?_wireWriteDataByte+1,w
 11020  0C46  1D03               	btfss	3,2
 11021  0C47  2C4A               	goto	l7238
 11022                           
 11023                           ;APDS9960.c: 499:         return 0;
 11024  0C48  3000               	movlw	0
 11025  0C49  0008               	return
 11026  0C4A                     l7238:	
 11027                           
 11028                           ;APDS9960.c: 502:     return 1;
 11029  0C4A  3001               	movlw	1
 11030  0C4B  0008               	return
 11031  0C4C                     __end_of_setLEDBoost:	
 11032                           
 11033                           	psect	text26
 11034  0AA5                     __ptext26:	
 11035 ;; *************** function _setGestureMode *****************
 11036 ;; Defined at:
 11037 ;;		line 506 in file "APDS9960.c"
 11038 ;; Parameters:    Size  Location     Type
 11039 ;;  mode            1    wreg     unsigned char 
 11040 ;; Auto vars:     Size  Location     Type
 11041 ;;  mode            1   11[BANK0 ] unsigned char 
 11042 ;;  val             1   12[BANK0 ] unsigned char 
 11043 ;; Return value:  Size  Location     Type
 11044 ;;                  1    wreg      _Bool 
 11045 ;; Registers used:
 11046 ;;		wreg, status,2, status,0, pclath, cstack
 11047 ;; Tracked objects:
 11048 ;;		On entry : 0/0
 11049 ;;		On exit  : 0/0
 11050 ;;		Unchanged: 0/0
 11051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11052 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11053 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11054 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11055 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11056 ;;Total ram usage:        3 bytes
 11057 ;; Hardware stack levels used:    1
 11058 ;; Hardware stack levels required when called:    8
 11059 ;; This function calls:
 11060 ;;		_wireReadDataByte
 11061 ;;		_wireWriteDataByte
 11062 ;; This function is called by:
 11063 ;;		_enableGestureSensor
 11064 ;; This function uses a non-reentrant model
 11065 ;;
 11066                           
 11067                           
 11068                           ;psect for function _setGestureMode
 11069  0AA5                     _setGestureMode:	
 11070                           
 11071                           ;incstack = 0
 11072                           ; Regs used in _setGestureMode: [wreg+status,2+status,0+pclath+cstack]
 11073                           ;setGestureMode@mode stored from wreg
 11074  0AA5  0020               	movlb	0	; select bank0
 11075  0AA6  00AB               	movwf	setGestureMode@mode
 11076                           
 11077                           ;APDS9960.c: 506: _Bool setGestureMode(uint8_t mode);APDS9960.c: 507: {;APDS9960.c: 508:
      +                               uint8_t val;;APDS9960.c: 511:     val = wireReadDataByte(0xAB);
 11078  0AA7  30AB               	movlw	171
 11079  0AA8  318A  225B  318A   	fcall	_wireReadDataByte
 11080  0AAB  0020               	movlb	0	; select bank0
 11081  0AAC  00AA               	movwf	??_setGestureMode
 11082  0AAD  082A               	movf	??_setGestureMode,w
 11083  0AAE  00AC               	movwf	setGestureMode@val
 11084                           
 11085                           ;APDS9960.c: 514:     mode &= 0b00000001;
 11086  0AAF  3001               	movlw	1
 11087  0AB0  00AA               	movwf	??_setGestureMode
 11088  0AB1  082A               	movf	??_setGestureMode,w
 11089  0AB2  05AB               	andwf	setGestureMode@mode,f
 11090                           
 11091                           ;APDS9960.c: 515:     val &= 0b11111110;
 11092  0AB3  30FE               	movlw	254
 11093  0AB4  00AA               	movwf	??_setGestureMode
 11094  0AB5  082A               	movf	??_setGestureMode,w
 11095  0AB6  05AC               	andwf	setGestureMode@val,f
 11096                           
 11097                           ;APDS9960.c: 516:     val |= mode;
 11098  0AB7  082B               	movf	setGestureMode@mode,w
 11099  0AB8  00AA               	movwf	??_setGestureMode
 11100  0AB9  082A               	movf	??_setGestureMode,w
 11101  0ABA  04AC               	iorwf	setGestureMode@val,f
 11102                           
 11103                           ;APDS9960.c: 519:     if( !wireWriteDataByte(0xAB, val) ) {
 11104  0ABB  082C               	movf	setGestureMode@val,w
 11105  0ABC  00AA               	movwf	??_setGestureMode
 11106  0ABD  082A               	movf	??_setGestureMode,w
 11107  0ABE  00A6               	movwf	wireWriteDataByte@val
 11108  0ABF  30AB               	movlw	171
 11109  0AC0  3189  21CC  318A   	fcall	_wireWriteDataByte
 11110  0AC3  0020               	movlb	0	; select bank0
 11111  0AC4  0826               	movf	?_wireWriteDataByte,w
 11112  0AC5  0427               	iorwf	?_wireWriteDataByte+1,w
 11113  0AC6  1D03               	btfss	3,2
 11114  0AC7  2ACA               	goto	l7256
 11115                           
 11116                           ;APDS9960.c: 520:         return 0;
 11117  0AC8  3000               	movlw	0
 11118  0AC9  0008               	return
 11119  0ACA                     l7256:	
 11120                           
 11121                           ;APDS9960.c: 523:     return 1;
 11122  0ACA  3001               	movlw	1
 11123  0ACB  0008               	return
 11124  0ACC                     __end_of_setGestureMode:	
 11125                           
 11126                           	psect	text27
 11127  0BBE                     __ptext27:	
 11128 ;; *************** function _setGestureIntEnable *****************
 11129 ;; Defined at:
 11130 ;;		line 387 in file "APDS9960.c"
 11131 ;; Parameters:    Size  Location     Type
 11132 ;;  enable          1    wreg     unsigned char 
 11133 ;; Auto vars:     Size  Location     Type
 11134 ;;  enable          1   12[BANK0 ] unsigned char 
 11135 ;;  val             1   11[BANK0 ] unsigned char 
 11136 ;; Return value:  Size  Location     Type
 11137 ;;                  1    wreg      _Bool 
 11138 ;; Registers used:
 11139 ;;		wreg, status,2, status,0, pclath, cstack
 11140 ;; Tracked objects:
 11141 ;;		On entry : 0/0
 11142 ;;		On exit  : 0/0
 11143 ;;		Unchanged: 0/0
 11144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11145 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11146 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11147 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11148 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11149 ;;Total ram usage:        3 bytes
 11150 ;; Hardware stack levels used:    1
 11151 ;; Hardware stack levels required when called:    8
 11152 ;; This function calls:
 11153 ;;		_wireReadDataByte
 11154 ;;		_wireWriteDataByte
 11155 ;; This function is called by:
 11156 ;;		_initialize
 11157 ;;		_enableGestureSensor
 11158 ;; This function uses a non-reentrant model
 11159 ;;
 11160                           
 11161                           
 11162                           ;psect for function _setGestureIntEnable
 11163  0BBE                     _setGestureIntEnable:	
 11164                           
 11165                           ;incstack = 0
 11166                           ; Regs used in _setGestureIntEnable: [wreg+status,2+status,0+pclath+cstack]
 11167                           ;setGestureIntEnable@enable stored from wreg
 11168  0BBE  0020               	movlb	0	; select bank0
 11169  0BBF  00AC               	movwf	setGestureIntEnable@enable
 11170                           
 11171                           ;APDS9960.c: 387: _Bool setGestureIntEnable(uint8_t enable);APDS9960.c: 388: {;APDS9960.
      +                          c: 389:     uint8_t val;;APDS9960.c: 392:     val = wireReadDataByte(0xAB);
 11172  0BC0  30AB               	movlw	171
 11173  0BC1  318A  225B  318B   	fcall	_wireReadDataByte
 11174  0BC4  0020               	movlb	0	; select bank0
 11175  0BC5  00AA               	movwf	??_setGestureIntEnable
 11176  0BC6  082A               	movf	??_setGestureIntEnable,w
 11177  0BC7  00AB               	movwf	setGestureIntEnable@val
 11178                           
 11179                           ;APDS9960.c: 395:     enable &= 0b00000001;
 11180  0BC8  3001               	movlw	1
 11181  0BC9  00AA               	movwf	??_setGestureIntEnable
 11182  0BCA  082A               	movf	??_setGestureIntEnable,w
 11183  0BCB  05AC               	andwf	setGestureIntEnable@enable,f
 11184                           
 11185                           ;APDS9960.c: 396:     enable = enable << 1;
 11186  0BCC  352C               	lslf	setGestureIntEnable@enable,w
 11187  0BCD  00AA               	movwf	??_setGestureIntEnable
 11188  0BCE  082A               	movf	??_setGestureIntEnable,w
 11189  0BCF  00AC               	movwf	setGestureIntEnable@enable
 11190                           
 11191                           ;APDS9960.c: 397:     val &= 0b11111101;
 11192  0BD0  30FD               	movlw	253
 11193  0BD1  00AA               	movwf	??_setGestureIntEnable
 11194  0BD2  082A               	movf	??_setGestureIntEnable,w
 11195  0BD3  05AB               	andwf	setGestureIntEnable@val,f
 11196                           
 11197                           ;APDS9960.c: 398:     val |= enable;
 11198  0BD4  082C               	movf	setGestureIntEnable@enable,w
 11199  0BD5  00AA               	movwf	??_setGestureIntEnable
 11200  0BD6  082A               	movf	??_setGestureIntEnable,w
 11201  0BD7  04AB               	iorwf	setGestureIntEnable@val,f
 11202                           
 11203                           ;APDS9960.c: 401:     if( !wireWriteDataByte(0xAB, val) ) {
 11204  0BD8  082B               	movf	setGestureIntEnable@val,w
 11205  0BD9  00AA               	movwf	??_setGestureIntEnable
 11206  0BDA  082A               	movf	??_setGestureIntEnable,w
 11207  0BDB  00A6               	movwf	wireWriteDataByte@val
 11208  0BDC  30AB               	movlw	171
 11209  0BDD  3189  21CC  318B   	fcall	_wireWriteDataByte
 11210  0BE0  0020               	movlb	0	; select bank0
 11211  0BE1  0826               	movf	?_wireWriteDataByte,w
 11212  0BE2  0427               	iorwf	?_wireWriteDataByte+1,w
 11213  0BE3  1D03               	btfss	3,2
 11214  0BE4  2BE7               	goto	l7220
 11215                           
 11216                           ;APDS9960.c: 402:         return 0;
 11217  0BE5  3000               	movlw	0
 11218  0BE6  0008               	return
 11219  0BE7                     l7220:	
 11220                           
 11221                           ;APDS9960.c: 405:     return 1;
 11222  0BE7  3001               	movlw	1
 11223  0BE8  0008               	return
 11224  0BE9                     __end_of_setGestureIntEnable:	
 11225                           
 11226                           	psect	text28
 11227  0982                     __ptext28:	
 11228 ;; *************** function _resetGestureParameters *****************
 11229 ;; Defined at:
 11230 ;;		line 457 in file "APDS9960.c"
 11231 ;; Parameters:    Size  Location     Type
 11232 ;;		None
 11233 ;; Auto vars:     Size  Location     Type
 11234 ;;		None
 11235 ;; Return value:  Size  Location     Type
 11236 ;;                  1    wreg      void 
 11237 ;; Registers used:
 11238 ;;		status,2
 11239 ;; Tracked objects:
 11240 ;;		On entry : 0/0
 11241 ;;		On exit  : 0/0
 11242 ;;		Unchanged: 0/0
 11243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11245 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11246 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11247 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11248 ;;Total ram usage:        0 bytes
 11249 ;; Hardware stack levels used:    1
 11250 ;; Hardware stack levels required when called:    5
 11251 ;; This function calls:
 11252 ;;		Nothing
 11253 ;; This function is called by:
 11254 ;;		_enableGestureSensor
 11255 ;;		_readGesture
 11256 ;; This function uses a non-reentrant model
 11257 ;;
 11258                           
 11259                           
 11260                           ;psect for function _resetGestureParameters
 11261  0982                     _resetGestureParameters:	
 11262                           
 11263                           ;APDS9960.c: 460:     gesture_data_.index = 0;
 11264                           
 11265                           ;incstack = 0
 11266                           ; Regs used in _resetGestureParameters: [status,2]
 11267  0982  0024               	movlb	4	; select bank4
 11268  0983  01E0               	clrf	(_gesture_data_^(0+512)+64)
 11269                           
 11270                           ;APDS9960.c: 461:     gesture_data_.total_gestures = 0;
 11271  0984  01E1               	clrf	(_gesture_data_^(0+512)+65)
 11272                           
 11273                           ;APDS9960.c: 463:     gesture_ud_delta_ = 0;
 11274  0985  0020               	movlb	0	; select bank0
 11275  0986  01E8               	clrf	_gesture_ud_delta_
 11276  0987  01E9               	clrf	_gesture_ud_delta_+1
 11277                           
 11278                           ;APDS9960.c: 464:     gesture_lr_delta_ = 0;
 11279  0988  01E6               	clrf	_gesture_lr_delta_
 11280  0989  01E7               	clrf	_gesture_lr_delta_+1
 11281                           
 11282                           ;APDS9960.c: 466:     gesture_ud_count_ = 0;
 11283  098A  01E4               	clrf	_gesture_ud_count_
 11284  098B  01E5               	clrf	_gesture_ud_count_+1
 11285                           
 11286                           ;APDS9960.c: 467:     gesture_lr_count_ = 0;
 11287  098C  01E2               	clrf	_gesture_lr_count_
 11288  098D  01E3               	clrf	_gesture_lr_count_+1
 11289                           
 11290                           ;APDS9960.c: 469:     gesture_near_count_ = 0;
 11291  098E  0021               	movlb	1	; select bank1
 11292  098F  01EA               	clrf	_gesture_near_count_^(0+128)
 11293  0990  01EB               	clrf	(_gesture_near_count_+1)^(0+128)
 11294                           
 11295                           ;APDS9960.c: 470:     gesture_far_count_ = 0;
 11296  0991  01E8               	clrf	_gesture_far_count_^(0+128)
 11297  0992  01E9               	clrf	(_gesture_far_count_+1)^(0+128)
 11298                           
 11299                           ;APDS9960.c: 472:     gesture_state_ = 0;
 11300  0993  01E6               	clrf	_gesture_state_^(0+128)
 11301  0994  01E7               	clrf	(_gesture_state_+1)^(0+128)
 11302                           
 11303                           ;APDS9960.c: 473:     gesture_motion_ = DIR_NONE;
 11304  0995  0022               	movlb	2	; select bank2
 11305  0996  01E8               	clrf	_gesture_motion_^(0+256)
 11306  0997  01E9               	clrf	(_gesture_motion_+1)^(0+256)
 11307  0998  0008               	return
 11308  0999                     __end_of_resetGestureParameters:	
 11309                           
 11310                           	psect	text29
 11311  08BA                     __ptext29:	
 11312 ;; *************** function _enablePower *****************
 11313 ;; Defined at:
 11314 ;;		line 527 in file "APDS9960.c"
 11315 ;; Parameters:    Size  Location     Type
 11316 ;;		None
 11317 ;; Auto vars:     Size  Location     Type
 11318 ;;		None
 11319 ;; Return value:  Size  Location     Type
 11320 ;;                  1    wreg      _Bool 
 11321 ;; Registers used:
 11322 ;;		wreg, status,2, status,0, pclath, cstack
 11323 ;; Tracked objects:
 11324 ;;		On entry : 0/0
 11325 ;;		On exit  : 0/0
 11326 ;;		Unchanged: 0/0
 11327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11328 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11329 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11330 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11331 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11332 ;;Total ram usage:        0 bytes
 11333 ;; Hardware stack levels used:    1
 11334 ;; Hardware stack levels required when called:   10
 11335 ;; This function calls:
 11336 ;;		_setMode
 11337 ;; This function is called by:
 11338 ;;		_enableGestureSensor
 11339 ;; This function uses a non-reentrant model
 11340 ;;
 11341                           
 11342                           
 11343                           ;psect for function _enablePower
 11344  08BA                     _enablePower:	
 11345                           
 11346                           ;APDS9960.c: 529:     if( !setMode(0, 1) ) {
 11347                           
 11348                           ;incstack = 0
 11349                           ; Regs used in _enablePower: [wreg+status,2+status,0+pclath+cstack]
 11350  08BA  0020               	movlb	0	; select bank0
 11351  08BB  01AB               	clrf	setMode@enable
 11352  08BC  0AAB               	incf	setMode@enable,f
 11353  08BD  3000               	movlw	0
 11354  08BE  318F  2707  3188   	fcall	_setMode
 11355  08C1  3A00               	xorlw	0
 11356  08C2  1D03               	skipz
 11357  08C3  28C6               	goto	l7266
 11358                           
 11359                           ;APDS9960.c: 530:         return 0;
 11360  08C4  3000               	movlw	0
 11361  08C5  0008               	return
 11362  08C6                     l7266:	
 11363                           
 11364                           ;APDS9960.c: 533:     return 1;
 11365  08C6  3001               	movlw	1
 11366  08C7  0008               	return
 11367  08C8                     __end_of_enablePower:	
 11368                           
 11369                           	psect	text30
 11370  0F07                     __ptext30:	
 11371 ;; *************** function _setMode *****************
 11372 ;; Defined at:
 11373 ;;		line 124 in file "APDS9960.c"
 11374 ;; Parameters:    Size  Location     Type
 11375 ;;  mode            1    wreg     unsigned char 
 11376 ;;  enable          1   11[BANK0 ] unsigned char 
 11377 ;; Auto vars:     Size  Location     Type
 11378 ;;  mode            1   15[BANK0 ] unsigned char 
 11379 ;;  reg_val         1   14[BANK0 ] unsigned char 
 11380 ;; Return value:  Size  Location     Type
 11381 ;;                  1    wreg      _Bool 
 11382 ;; Registers used:
 11383 ;;		wreg, status,2, status,0, pclath, cstack
 11384 ;; Tracked objects:
 11385 ;;		On entry : 0/0
 11386 ;;		On exit  : 0/0
 11387 ;;		Unchanged: 0/0
 11388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11389 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11390 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11391 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11392 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11393 ;;Total ram usage:        5 bytes
 11394 ;; Hardware stack levels used:    1
 11395 ;; Hardware stack levels required when called:    9
 11396 ;; This function calls:
 11397 ;;		_getMode
 11398 ;;		_wireWriteDataByte
 11399 ;; This function is called by:
 11400 ;;		_initialize
 11401 ;;		_enableGestureSensor
 11402 ;;		_enablePower
 11403 ;; This function uses a non-reentrant model
 11404 ;;
 11405                           
 11406                           
 11407                           ;psect for function _setMode
 11408  0F07                     _setMode:	
 11409                           
 11410                           ;incstack = 0
 11411                           ; Regs used in _setMode: [wreg+status,2+status,0+pclath+cstack]
 11412                           ;setMode@mode stored from wreg
 11413  0F07  0020               	movlb	0	; select bank0
 11414  0F08  00AF               	movwf	setMode@mode
 11415                           
 11416                           ;APDS9960.c: 124: _Bool setMode(uint8_t mode, uint8_t enable);APDS9960.c: 125: {;APDS996
      +                          0.c: 126:     uint8_t reg_val;;APDS9960.c: 129:     reg_val = getMode();
 11417  0F09  3188  2090  318F   	fcall	_getMode
 11418  0F0C  0020               	movlb	0	; select bank0
 11419  0F0D  00AC               	movwf	??_setMode
 11420  0F0E  082C               	movf	??_setMode,w
 11421  0F0F  00AE               	movwf	setMode@reg_val
 11422                           
 11423                           ;APDS9960.c: 130:     if( reg_val == 0xFF ) {
 11424  0F10  0A2E               	incf	setMode@reg_val,w
 11425  0F11  1D03               	btfss	3,2
 11426  0F12  2F15               	goto	l6480
 11427  0F13                     l6476:	
 11428                           
 11429                           ;APDS9960.c: 131:         return 0;
 11430  0F13  3000               	movlw	0
 11431  0F14  0008               	return
 11432  0F15                     l6480:	
 11433                           
 11434                           ;APDS9960.c: 135:     enable = enable & 0x01;
 11435  0F15  082B               	movf	setMode@enable,w
 11436  0F16  3901               	andlw	1
 11437  0F17  00AC               	movwf	??_setMode
 11438  0F18  082C               	movf	??_setMode,w
 11439  0F19  00AB               	movwf	setMode@enable
 11440                           
 11441                           ;APDS9960.c: 136:     if( mode >= 0 && mode <= 6 ) {
 11442  0F1A  3007               	movlw	7
 11443  0F1B  022F               	subwf	setMode@mode,w
 11444  0F1C  1803               	skipnc
 11445  0F1D  2F3A               	goto	l6490
 11446                           
 11447                           ;APDS9960.c: 137:         if (enable) {
 11448  0F1E  082B               	movf	setMode@enable,w
 11449  0F1F  1903               	btfsc	3,2
 11450  0F20  2F2D               	goto	l6488
 11451                           
 11452                           ;APDS9960.c: 138:             reg_val |= (1 << mode);
 11453  0F21  3001               	movlw	1
 11454  0F22  00AC               	movwf	??_setMode
 11455  0F23  0A2F               	incf	setMode@mode,w
 11456  0F24  2F26               	goto	u5164
 11457  0F25                     u5165:	
 11458  0F25  35AC               	lslf	??_setMode,f
 11459  0F26                     u5164:	
 11460  0F26  0B89               	decfsz	9,f
 11461  0F27  2F25               	goto	u5165
 11462  0F28  082C               	movf	??_setMode,w
 11463  0F29  00AD               	movwf	??_setMode+1
 11464  0F2A  082D               	movf	??_setMode+1,w
 11465  0F2B  04AE               	iorwf	setMode@reg_val,f
 11466                           
 11467                           ;APDS9960.c: 139:         } else {
 11468  0F2C  2F47               	goto	l6498
 11469  0F2D                     l6488:	
 11470                           
 11471                           ;APDS9960.c: 140:             reg_val &= ~(1 << mode);
 11472  0F2D  3001               	movlw	1
 11473  0F2E  00AC               	movwf	??_setMode
 11474  0F2F  0A2F               	incf	setMode@mode,w
 11475  0F30  2F32               	goto	u5174
 11476  0F31                     u5175:	
 11477  0F31  35AC               	lslf	??_setMode,f
 11478  0F32                     u5174:	
 11479  0F32  0B89               	decfsz	9,f
 11480  0F33  2F31               	goto	u5175
 11481  0F34  082C               	movf	??_setMode,w
 11482  0F35  3AFF               	xorlw	255
 11483  0F36  00AD               	movwf	??_setMode+1
 11484  0F37  082D               	movf	??_setMode+1,w
 11485  0F38  05AE               	andwf	setMode@reg_val,f
 11486  0F39  2F47               	goto	l6498
 11487  0F3A                     l6490:	
 11488  0F3A  3007               	movlw	7
 11489  0F3B  062F               	xorwf	setMode@mode,w
 11490  0F3C  1D03               	btfss	3,2
 11491  0F3D  2F47               	goto	l6498
 11492                           
 11493                           ;APDS9960.c: 143:         if (enable) {
 11494  0F3E  082B               	movf	setMode@enable,w
 11495  0F3F  1903               	btfsc	3,2
 11496  0F40  2F46               	goto	l6496
 11497                           
 11498                           ;APDS9960.c: 144:             reg_val = 0x7F;
 11499  0F41  307F               	movlw	127
 11500  0F42  00AC               	movwf	??_setMode
 11501  0F43  082C               	movf	??_setMode,w
 11502  0F44  00AE               	movwf	setMode@reg_val
 11503                           
 11504                           ;APDS9960.c: 145:         } else {
 11505  0F45  2F47               	goto	l6498
 11506  0F46                     l6496:	
 11507                           
 11508                           ;APDS9960.c: 146:             reg_val = 0x00;
 11509  0F46  01AE               	clrf	setMode@reg_val
 11510  0F47                     l6498:	
 11511                           
 11512                           ;APDS9960.c: 151:     if( !wireWriteDataByte(0x80, reg_val) ) {
 11513  0F47  082E               	movf	setMode@reg_val,w
 11514  0F48  00AC               	movwf	??_setMode
 11515  0F49  082C               	movf	??_setMode,w
 11516  0F4A  00A6               	movwf	wireWriteDataByte@val
 11517  0F4B  3080               	movlw	128
 11518  0F4C  3189  21CC  318F   	fcall	_wireWriteDataByte
 11519  0F4F  0020               	movlb	0	; select bank0
 11520  0F50  0826               	movf	?_wireWriteDataByte,w
 11521  0F51  0427               	iorwf	?_wireWriteDataByte+1,w
 11522  0F52  1903               	btfsc	3,2
 11523  0F53  2F13               	goto	l6476
 11524                           
 11525                           ;APDS9960.c: 155:     return 1;
 11526  0F54  3001               	movlw	1
 11527  0F55  0008               	return
 11528  0F56                     __end_of_setMode:	
 11529                           
 11530                           	psect	text31
 11531  09CC                     __ptext31:	
 11532 ;; *************** function _wireWriteDataByte *****************
 11533 ;; Defined at:
 11534 ;;		line 871 in file "APDS9960.c"
 11535 ;; Parameters:    Size  Location     Type
 11536 ;;  reg             1    wreg     unsigned char 
 11537 ;;  val             1    6[BANK0 ] unsigned char 
 11538 ;; Auto vars:     Size  Location     Type
 11539 ;;  reg             1    9[BANK0 ] unsigned char 
 11540 ;; Return value:  Size  Location     Type
 11541 ;;                  2    6[BANK0 ] int 
 11542 ;; Registers used:
 11543 ;;		wreg, status,2, status,0, pclath, cstack
 11544 ;; Tracked objects:
 11545 ;;		On entry : 0/0
 11546 ;;		On exit  : 0/0
 11547 ;;		Unchanged: 0/0
 11548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11549 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11550 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11552 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11553 ;;Total ram usage:        4 bytes
 11554 ;; Hardware stack levels used:    1
 11555 ;; Hardware stack levels required when called:    7
 11556 ;; This function calls:
 11557 ;;		_I2C_Start
 11558 ;;		_I2C_Stop
 11559 ;;		_I2C_Write_Byte
 11560 ;; This function is called by:
 11561 ;;		_initialize
 11562 ;;		_setMode
 11563 ;;		_setLEDDrive
 11564 ;;		_setProximityGain
 11565 ;;		_setAmbientLightGain
 11566 ;;		_setProxIntLowThresh
 11567 ;;		_setProxIntHighThresh
 11568 ;;		_setLightIntLowThreshold
 11569 ;;		_setLightIntHighThreshold
 11570 ;;		_setGestureEnterThresh
 11571 ;;		_setGestureExitThresh
 11572 ;;		_setGestureGain
 11573 ;;		_setGestureLEDDrive
 11574 ;;		_setGestureWaitTime
 11575 ;;		_setGestureIntEnable
 11576 ;;		_enableGestureSensor
 11577 ;;		_setLEDBoost
 11578 ;;		_setGestureMode
 11579 ;; This function uses a non-reentrant model
 11580 ;;
 11581                           
 11582                           
 11583                           ;psect for function _wireWriteDataByte
 11584  09CC                     _wireWriteDataByte:	
 11585                           
 11586                           ;incstack = 0
 11587                           ; Regs used in _wireWriteDataByte: [wreg+status,2+status,0+pclath+cstack]
 11588                           ;wireWriteDataByte@reg stored from wreg
 11589  09CC  0020               	movlb	0	; select bank0
 11590  09CD  00A9               	movwf	wireWriteDataByte@reg
 11591                           
 11592                           ;APDS9960.c: 871: int wireWriteDataByte(unsigned char reg, unsigned char val);APDS9960.c
      +                          : 872: {;APDS9960.c: 882:     I2C_Start();
 11593  09CE  3197  27B7  3189   	fcall	_I2C_Start
 11594                           
 11595                           ;APDS9960.c: 883:     I2C_Write_Byte((0x39 << 1 )| 0x00);
 11596  09D1  3072               	movlw	114
 11597  09D2  3189  21E7  3189   	fcall	_I2C_Write_Byte
 11598                           
 11599                           ;APDS9960.c: 884:     I2C_Write_Byte(reg);
 11600  09D5  0020               	movlb	0	; select bank0
 11601  09D6  0829               	movf	wireWriteDataByte@reg,w
 11602  09D7  3189  21E7  3189   	fcall	_I2C_Write_Byte
 11603                           
 11604                           ;APDS9960.c: 885:     I2C_Write_Byte(val);
 11605  09DA  0020               	movlb	0	; select bank0
 11606  09DB  0826               	movf	wireWriteDataByte@val,w
 11607  09DC  3189  21E7  3189   	fcall	_I2C_Write_Byte
 11608                           
 11609                           ;APDS9960.c: 886:     I2C_Stop();
 11610  09DF  3187  27FD         	fcall	_I2C_Stop
 11611                           
 11612                           ;APDS9960.c: 889:     return 1;
 11613  09E1  3001               	movlw	1
 11614  09E2  0020               	movlb	0	; select bank0
 11615  09E3  00A6               	movwf	?_wireWriteDataByte
 11616  09E4  3000               	movlw	0
 11617  09E5  00A7               	movwf	?_wireWriteDataByte+1
 11618  09E6  0008               	return
 11619  09E7                     __end_of_wireWriteDataByte:	
 11620                           
 11621                           	psect	text32
 11622  0890                     __ptext32:	
 11623 ;; *************** function _getMode *****************
 11624 ;; Defined at:
 11625 ;;		line 159 in file "APDS9960.c"
 11626 ;; Parameters:    Size  Location     Type
 11627 ;;		None
 11628 ;; Auto vars:     Size  Location     Type
 11629 ;;  enable_value    1   10[BANK0 ] unsigned char 
 11630 ;; Return value:  Size  Location     Type
 11631 ;;                  1    wreg      unsigned char 
 11632 ;; Registers used:
 11633 ;;		wreg, status,2, status,0, pclath, cstack
 11634 ;; Tracked objects:
 11635 ;;		On entry : 0/0
 11636 ;;		On exit  : 0/0
 11637 ;;		Unchanged: 0/0
 11638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11639 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11640 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11641 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11642 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11643 ;;Total ram usage:        2 bytes
 11644 ;; Hardware stack levels used:    1
 11645 ;; Hardware stack levels required when called:    8
 11646 ;; This function calls:
 11647 ;;		_wireReadDataByte
 11648 ;; This function is called by:
 11649 ;;		_setMode
 11650 ;;		_readGesture
 11651 ;; This function uses a non-reentrant model
 11652 ;;
 11653                           
 11654                           
 11655                           ;psect for function _getMode
 11656  0890                     _getMode:	
 11657                           
 11658                           ;APDS9960.c: 161:     uint8_t enable_value;;APDS9960.c: 164:     enable_value = wireRead
      +                          DataByte(0x80);
 11659                           
 11660                           ;incstack = 0
 11661                           ; Regs used in _getMode: [wreg+status,2+status,0+pclath+cstack]
 11662  0890  3080               	movlw	128
 11663  0891  318A  225B         	fcall	_wireReadDataByte
 11664  0893  0020               	movlb	0	; select bank0
 11665  0894  00A9               	movwf	??_getMode
 11666  0895  0829               	movf	??_getMode,w
 11667  0896  00AA               	movwf	getMode@enable_value
 11668                           
 11669                           ;APDS9960.c: 166:     return enable_value;
 11670  0897  082A               	movf	getMode@enable_value,w
 11671  0898  0008               	return
 11672  0899                     __end_of_getMode:	
 11673                           
 11674                           	psect	text33
 11675  0A5B                     __ptext33:	
 11676 ;; *************** function _wireReadDataByte *****************
 11677 ;; Defined at:
 11678 ;;		line 893 in file "APDS9960.c"
 11679 ;; Parameters:    Size  Location     Type
 11680 ;;  reg             1    wreg     unsigned char 
 11681 ;; Auto vars:     Size  Location     Type
 11682 ;;  reg             1    7[BANK0 ] unsigned char 
 11683 ;;  val             1    8[BANK0 ] unsigned char 
 11684 ;; Return value:  Size  Location     Type
 11685 ;;                  1    wreg      unsigned char 
 11686 ;; Registers used:
 11687 ;;		wreg, status,2, status,0, pclath, cstack
 11688 ;; Tracked objects:
 11689 ;;		On entry : 0/0
 11690 ;;		On exit  : 0/0
 11691 ;;		Unchanged: 0/0
 11692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11693 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11694 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11695 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11696 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11697 ;;Total ram usage:        3 bytes
 11698 ;; Hardware stack levels used:    1
 11699 ;; Hardware stack levels required when called:    7
 11700 ;; This function calls:
 11701 ;;		_I2C_ReStart
 11702 ;;		_I2C_Read_Byte
 11703 ;;		_I2C_Send_NACK
 11704 ;;		_I2C_Start
 11705 ;;		_I2C_Stop
 11706 ;;		_I2C_Write_Byte
 11707 ;; This function is called by:
 11708 ;;		_initialize
 11709 ;;		_getMode
 11710 ;;		_setLEDDrive
 11711 ;;		_setProximityGain
 11712 ;;		_setAmbientLightGain
 11713 ;;		_setGestureGain
 11714 ;;		_setGestureLEDDrive
 11715 ;;		_setGestureWaitTime
 11716 ;;		_setGestureIntEnable
 11717 ;;		_setLEDBoost
 11718 ;;		_setGestureMode
 11719 ;;		_isGestureAvailable
 11720 ;;		_readGesture
 11721 ;; This function uses a non-reentrant model
 11722 ;;
 11723                           
 11724                           
 11725                           ;psect for function _wireReadDataByte
 11726  0A5B                     _wireReadDataByte:	
 11727                           
 11728                           ;incstack = 0
 11729                           ; Regs used in _wireReadDataByte: [wreg+status,2+status,0+pclath+cstack]
 11730                           ;wireReadDataByte@reg stored from wreg
 11731  0A5B  0020               	movlb	0	; select bank0
 11732  0A5C  00A7               	movwf	wireReadDataByte@reg
 11733                           
 11734                           ;APDS9960.c: 893:  unsigned char wireReadDataByte(unsigned char reg);APDS9960.c: 894: {;
      +                          APDS9960.c: 908:     unsigned char val;;APDS9960.c: 909:     I2C_Start();
 11735  0A5D  3197  27B7  318A   	fcall	_I2C_Start
 11736                           
 11737                           ;APDS9960.c: 910:     I2C_Write_Byte((0x39 << 1 )| 0x00);
 11738  0A60  3072               	movlw	114
 11739  0A61  3189  21E7  318A   	fcall	_I2C_Write_Byte
 11740                           
 11741                           ;APDS9960.c: 911:     I2C_Write_Byte(reg);
 11742  0A64  0020               	movlb	0	; select bank0
 11743  0A65  0827               	movf	wireReadDataByte@reg,w
 11744  0A66  3189  21E7  318A   	fcall	_I2C_Write_Byte
 11745                           
 11746                           ;APDS9960.c: 912:     I2C_ReStart();
 11747  0A69  3197  27A8  318A   	fcall	_I2C_ReStart
 11748                           
 11749                           ;APDS9960.c: 914:     I2C_Write_Byte((0x39 << 1) | 0x01);
 11750  0A6C  3073               	movlw	115
 11751  0A6D  3189  21E7  318A   	fcall	_I2C_Write_Byte
 11752                           
 11753                           ;APDS9960.c: 915:     val=I2C_Read_Byte();
 11754  0A70  3188  20A3  318A   	fcall	_I2C_Read_Byte
 11755  0A73  0020               	movlb	0	; select bank0
 11756  0A74  00A6               	movwf	??_wireReadDataByte
 11757  0A75  0826               	movf	??_wireReadDataByte,w
 11758  0A76  00A8               	movwf	wireReadDataByte@val
 11759                           
 11760                           ;APDS9960.c: 916:     I2C_Send_NACK();
 11761  0A77  3197  27B1  318A   	fcall	_I2C_Send_NACK
 11762                           
 11763                           ;APDS9960.c: 917:     I2C_Stop();
 11764  0A7A  3187  27FD         	fcall	_I2C_Stop
 11765                           
 11766                           ;APDS9960.c: 919:     return val;
 11767  0A7C  0020               	movlb	0	; select bank0
 11768  0A7D  0828               	movf	wireReadDataByte@val,w
 11769  0A7E  0008               	return
 11770  0A7F                     __end_of_wireReadDataByte:	
 11771                           
 11772                           	psect	text34
 11773  09E7                     __ptext34:	
 11774 ;; *************** function _I2C_Write_Byte *****************
 11775 ;; Defined at:
 11776 ;;		line 75 in file "i2c.c"
 11777 ;; Parameters:    Size  Location     Type
 11778 ;;  Byte            1    wreg     unsigned char 
 11779 ;; Auto vars:     Size  Location     Type
 11780 ;;  Byte            1    3[BANK0 ] unsigned char 
 11781 ;;  count           2    4[BANK0 ] unsigned int 
 11782 ;; Return value:  Size  Location     Type
 11783 ;;                  1    wreg      void 
 11784 ;; Registers used:
 11785 ;;		wreg, status,2, status,0, pclath, cstack
 11786 ;; Tracked objects:
 11787 ;;		On entry : 0/0
 11788 ;;		On exit  : 0/0
 11789 ;;		Unchanged: 0/0
 11790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11791 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11792 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11793 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11794 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11795 ;;Total ram usage:        5 bytes
 11796 ;; Hardware stack levels used:    1
 11797 ;; Hardware stack levels required when called:    6
 11798 ;; This function calls:
 11799 ;;		_i2c1_driver_TXData
 11800 ;; This function is called by:
 11801 ;;		_wireReadDataBlock
 11802 ;;		_wireWriteDataByte
 11803 ;;		_wireReadDataByte
 11804 ;; This function uses a non-reentrant model
 11805 ;;
 11806                           
 11807                           
 11808                           ;psect for function _I2C_Write_Byte
 11809  09E7                     _I2C_Write_Byte:	
 11810                           
 11811                           ;incstack = 0
 11812                           ; Regs used in _I2C_Write_Byte: [wreg+status,2+status,0+pclath+cstack]
 11813                           ;I2C_Write_Byte@Byte stored from wreg
 11814  09E7  0020               	movlb	0	; select bank0
 11815  09E8  00A3               	movwf	I2C_Write_Byte@Byte
 11816                           
 11817                           ;i2c.c: 75: void I2C_Write_Byte(unsigned char Byte);i2c.c: 76: {;i2c.c: 80:     i2c1_dri
      +                          ver_TXData(Byte);
 11818  09E9  0823               	movf	I2C_Write_Byte@Byte,w
 11819  09EA  3197  27FA  3189   	fcall	_i2c1_driver_TXData
 11820                           
 11821                           ;i2c.c: 83:     unsigned int count = 0;
 11822  09ED  0020               	movlb	0	; select bank0
 11823  09EE  01A4               	clrf	I2C_Write_Byte@count
 11824  09EF  01A5               	clrf	I2C_Write_Byte@count+1
 11825  09F0                     l1416:	
 11826                           ;i2c.c: 84:     while(SSP1CON2bits.ACKSTAT);
 11827                           
 11828  09F0  0024               	movlb	4	; select bank4
 11829  09F1  1B16               	btfsc	22,6	;volatile
 11830  09F2  29F0               	goto	l1416
 11831  09F3                     l6314:	
 11832  09F3  0020               	movlb	0	; select bank0
 11833  09F4  0825               	movf	I2C_Write_Byte@count+1,w
 11834  09F5  00A2               	movwf	??_I2C_Write_Byte+1
 11835  09F6  0824               	movf	I2C_Write_Byte@count,w
 11836  09F7  00A1               	movwf	??_I2C_Write_Byte
 11837  09F8  0AA4               	incf	I2C_Write_Byte@count,f
 11838  09F9  1903               	skipnz
 11839  09FA  0AA5               	incf	I2C_Write_Byte@count+1,f
 11840  09FB  3000               	movlw	0
 11841  09FC  0222               	subwf	??_I2C_Write_Byte+1,w
 11842  09FD  3005               	movlw	5
 11843  09FE  1903               	skipnz
 11844  09FF  0221               	subwf	??_I2C_Write_Byte,w
 11845  0A00  1803               	btfsc	3,0
 11846  0A01  0008               	return
 11847  0A02  29F3               	goto	l6314
 11848  0A03                     __end_of_I2C_Write_Byte:	
 11849                           
 11850                           	psect	text35
 11851  17FA                     __ptext35:	
 11852 ;; *************** function _i2c1_driver_TXData *****************
 11853 ;; Defined at:
 11854 ;;		line 186 in file "mcc_generated_files/i2c1_driver.c"
 11855 ;; Parameters:    Size  Location     Type
 11856 ;;  d               1    wreg     unsigned char 
 11857 ;; Auto vars:     Size  Location     Type
 11858 ;;  d               1    0[BANK0 ] unsigned char 
 11859 ;; Return value:  Size  Location     Type
 11860 ;;                  1    wreg      void 
 11861 ;; Registers used:
 11862 ;;		wreg
 11863 ;; Tracked objects:
 11864 ;;		On entry : 0/0
 11865 ;;		On exit  : 0/0
 11866 ;;		Unchanged: 0/0
 11867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11869 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11870 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11871 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11872 ;;Total ram usage:        1 bytes
 11873 ;; Hardware stack levels used:    1
 11874 ;; Hardware stack levels required when called:    5
 11875 ;; This function calls:
 11876 ;;		Nothing
 11877 ;; This function is called by:
 11878 ;;		_I2C_Write_Byte
 11879 ;; This function uses a non-reentrant model
 11880 ;;
 11881                           
 11882                           
 11883                           ;psect for function _i2c1_driver_TXData
 11884  17FA                     _i2c1_driver_TXData:	
 11885                           
 11886                           ;incstack = 0
 11887                           ; Regs used in _i2c1_driver_TXData: [wreg]
 11888                           ;i2c1_driver_TXData@d stored from wreg
 11889  17FA  0020               	movlb	0	; select bank0
 11890  17FB  00A0               	movwf	i2c1_driver_TXData@d
 11891                           
 11892                           ;mcc_generated_files/i2c1_driver.c: 186: __attribute__((inline)) void i2c1_driver_TXData
      +                          (char d);mcc_generated_files/i2c1_driver.c: 187: {;mcc_generated_files/i2c1_driver.c: 18
      +                          8:     SSP1BUF = d;
 11893  17FC  0820               	movf	i2c1_driver_TXData@d,w
 11894  17FD  0024               	movlb	4	; select bank4
 11895  17FE  0091               	movwf	17	;volatile
 11896  17FF  0008               	return
 11897  1800                     __end_of_i2c1_driver_TXData:	
 11898                           
 11899                           	psect	text36
 11900  07FD                     __ptext36:	
 11901 ;; *************** function _I2C_Stop *****************
 11902 ;; Defined at:
 11903 ;;		line 50 in file "i2c.c"
 11904 ;; Parameters:    Size  Location     Type
 11905 ;;		None
 11906 ;; Auto vars:     Size  Location     Type
 11907 ;;		None
 11908 ;; Return value:  Size  Location     Type
 11909 ;;                  1    wreg      void 
 11910 ;; Registers used:
 11911 ;;		status,2, status,0, pclath, cstack
 11912 ;; Tracked objects:
 11913 ;;		On entry : 0/0
 11914 ;;		On exit  : 0/0
 11915 ;;		Unchanged: 0/0
 11916 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11917 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11918 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11919 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11920 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11921 ;;Total ram usage:        0 bytes
 11922 ;; Hardware stack levels used:    1
 11923 ;; Hardware stack levels required when called:    6
 11924 ;; This function calls:
 11925 ;;		_i2c1_driver_stop
 11926 ;; This function is called by:
 11927 ;;		_wireReadDataBlock
 11928 ;;		_wireWriteDataByte
 11929 ;;		_wireReadDataByte
 11930 ;; This function uses a non-reentrant model
 11931 ;;
 11932                           
 11933                           
 11934                           ;psect for function _I2C_Stop
 11935  07FD                     _I2C_Stop:	
 11936                           
 11937                           ;i2c.c: 52:  i2c1_driver_stop();
 11938                           
 11939                           ;incstack = 0
 11940                           ; Regs used in _I2C_Stop: [status,2+status,0+pclath+cstack]
 11941  07FD  3188  2000         	fcall	_i2c1_driver_stop
 11942  07FF  0008               	return
 11943  0800                     __end_of_I2C_Stop:	
 11944                           
 11945                           	psect	text37
 11946  0800                     __ptext37:	
 11947 ;; *************** function _i2c1_driver_stop *****************
 11948 ;; Defined at:
 11949 ;;		line 156 in file "mcc_generated_files/i2c1_driver.c"
 11950 ;; Parameters:    Size  Location     Type
 11951 ;;		None
 11952 ;; Auto vars:     Size  Location     Type
 11953 ;;		None
 11954 ;; Return value:  Size  Location     Type
 11955 ;;                  1    wreg      void 
 11956 ;; Registers used:
 11957 ;;		None
 11958 ;; Tracked objects:
 11959 ;;		On entry : 0/0
 11960 ;;		On exit  : 0/0
 11961 ;;		Unchanged: 0/0
 11962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11963 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11964 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11966 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11967 ;;Total ram usage:        0 bytes
 11968 ;; Hardware stack levels used:    1
 11969 ;; Hardware stack levels required when called:    5
 11970 ;; This function calls:
 11971 ;;		Nothing
 11972 ;; This function is called by:
 11973 ;;		_I2C_Stop
 11974 ;; This function uses a non-reentrant model
 11975 ;;
 11976                           
 11977                           
 11978                           ;psect for function _i2c1_driver_stop
 11979  0800                     _i2c1_driver_stop:	
 11980                           
 11981                           ;mcc_generated_files/i2c1_driver.c: 158:     SSP1CON2bits.PEN = 1;
 11982                           
 11983                           ;incstack = 0
 11984                           ; Regs used in _i2c1_driver_stop: []
 11985  0800  0024               	movlb	4	; select bank4
 11986  0801  1516               	bsf	22,2	;volatile
 11987  0802  0008               	return
 11988  0803                     __end_of_i2c1_driver_stop:	
 11989                           
 11990                           	psect	text38
 11991  17B7                     __ptext38:	
 11992 ;; *************** function _I2C_Start *****************
 11993 ;; Defined at:
 11994 ;;		line 35 in file "i2c.c"
 11995 ;; Parameters:    Size  Location     Type
 11996 ;;		None
 11997 ;; Auto vars:     Size  Location     Type
 11998 ;;		None
 11999 ;; Return value:  Size  Location     Type
 12000 ;;                  1    wreg      void 
 12001 ;; Registers used:
 12002 ;;		status,2, status,0, pclath, cstack
 12003 ;; Tracked objects:
 12004 ;;		On entry : 0/0
 12005 ;;		On exit  : 0/0
 12006 ;;		Unchanged: 0/0
 12007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12008 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12009 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12010 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12011 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12012 ;;Total ram usage:        0 bytes
 12013 ;; Hardware stack levels used:    1
 12014 ;; Hardware stack levels required when called:    6
 12015 ;; This function calls:
 12016 ;;		_i2c1_driver_start
 12017 ;; This function is called by:
 12018 ;;		_wireReadDataBlock
 12019 ;;		_wireWriteDataByte
 12020 ;;		_wireReadDataByte
 12021 ;; This function uses a non-reentrant model
 12022 ;;
 12023                           
 12024                           
 12025                           ;psect for function _I2C_Start
 12026  17B7                     _I2C_Start:	
 12027                           
 12028                           ;i2c.c: 37:  i2c1_driver_start();
 12029                           
 12030                           ;incstack = 0
 12031                           ; Regs used in _I2C_Start: [status,2+status,0+pclath+cstack]
 12032  17B7  3197  27B4         	fcall	_i2c1_driver_start
 12033  17B9  0008               	return
 12034  17BA                     __end_of_I2C_Start:	
 12035                           
 12036                           	psect	text39
 12037  17B4                     __ptext39:	
 12038 ;; *************** function _i2c1_driver_start *****************
 12039 ;; Defined at:
 12040 ;;		line 146 in file "mcc_generated_files/i2c1_driver.c"
 12041 ;; Parameters:    Size  Location     Type
 12042 ;;		None
 12043 ;; Auto vars:     Size  Location     Type
 12044 ;;		None
 12045 ;; Return value:  Size  Location     Type
 12046 ;;                  1    wreg      void 
 12047 ;; Registers used:
 12048 ;;		None
 12049 ;; Tracked objects:
 12050 ;;		On entry : 0/0
 12051 ;;		On exit  : 0/0
 12052 ;;		Unchanged: 0/0
 12053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12054 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12055 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12056 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12057 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12058 ;;Total ram usage:        0 bytes
 12059 ;; Hardware stack levels used:    1
 12060 ;; Hardware stack levels required when called:    5
 12061 ;; This function calls:
 12062 ;;		Nothing
 12063 ;; This function is called by:
 12064 ;;		_I2C_Start
 12065 ;;		_i2c_masterOperation
 12066 ;; This function uses a non-reentrant model
 12067 ;;
 12068                           
 12069                           
 12070                           ;psect for function _i2c1_driver_start
 12071  17B4                     _i2c1_driver_start:	
 12072                           
 12073                           ;mcc_generated_files/i2c1_driver.c: 148:     SSP1CON2bits.SEN = 1;
 12074                           
 12075                           ;incstack = 0
 12076                           ; Regs used in _i2c1_driver_start: []
 12077  17B4  0024               	movlb	4	; select bank4
 12078  17B5  1416               	bsf	22,0	;volatile
 12079  17B6  0008               	return
 12080  17B7                     __end_of_i2c1_driver_start:	
 12081                           
 12082                           	psect	text40
 12083  17B1                     __ptext40:	
 12084 ;; *************** function _I2C_Send_NACK *****************
 12085 ;; Defined at:
 12086 ;;		line 66 in file "i2c.c"
 12087 ;; Parameters:    Size  Location     Type
 12088 ;;		None
 12089 ;; Auto vars:     Size  Location     Type
 12090 ;;		None
 12091 ;; Return value:  Size  Location     Type
 12092 ;;                  1    wreg      void 
 12093 ;; Registers used:
 12094 ;;		status,2, status,0, pclath, cstack
 12095 ;; Tracked objects:
 12096 ;;		On entry : 0/0
 12097 ;;		On exit  : 0/0
 12098 ;;		Unchanged: 0/0
 12099 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12100 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12101 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12102 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12103 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12104 ;;Total ram usage:        0 bytes
 12105 ;; Hardware stack levels used:    1
 12106 ;; Hardware stack levels required when called:    6
 12107 ;; This function calls:
 12108 ;;		_i2c1_driver_sendNACK
 12109 ;; This function is called by:
 12110 ;;		_wireReadDataBlock
 12111 ;;		_wireReadDataByte
 12112 ;; This function uses a non-reentrant model
 12113 ;;
 12114                           
 12115                           
 12116                           ;psect for function _I2C_Send_NACK
 12117  17B1                     _I2C_Send_NACK:	
 12118                           
 12119                           ;i2c.c: 68:     i2c1_driver_sendNACK();
 12120                           
 12121                           ;incstack = 0
 12122                           ; Regs used in _I2C_Send_NACK: [status,2+status,0+pclath+cstack]
 12123  17B1  3197  27E6         	fcall	_i2c1_driver_sendNACK
 12124  17B3  0008               	return
 12125  17B4                     __end_of_I2C_Send_NACK:	
 12126                           
 12127                           	psect	text41
 12128  17E6                     __ptext41:	
 12129 ;; *************** function _i2c1_driver_sendNACK *****************
 12130 ;; Defined at:
 12131 ;;		line 202 in file "mcc_generated_files/i2c1_driver.c"
 12132 ;; Parameters:    Size  Location     Type
 12133 ;;		None
 12134 ;; Auto vars:     Size  Location     Type
 12135 ;;		None
 12136 ;; Return value:  Size  Location     Type
 12137 ;;                  1    wreg      void 
 12138 ;; Registers used:
 12139 ;;		None
 12140 ;; Tracked objects:
 12141 ;;		On entry : 0/0
 12142 ;;		On exit  : 0/0
 12143 ;;		Unchanged: 0/0
 12144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12145 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12146 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12147 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12148 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12149 ;;Total ram usage:        0 bytes
 12150 ;; Hardware stack levels used:    1
 12151 ;; Hardware stack levels required when called:    5
 12152 ;; This function calls:
 12153 ;;		Nothing
 12154 ;; This function is called by:
 12155 ;;		_I2C_Send_NACK
 12156 ;; This function uses a non-reentrant model
 12157 ;;
 12158                           
 12159                           
 12160                           ;psect for function _i2c1_driver_sendNACK
 12161  17E6                     _i2c1_driver_sendNACK:	
 12162                           
 12163                           ;mcc_generated_files/i2c1_driver.c: 204:     SSP1CON2bits.ACKDT = 1;
 12164                           
 12165                           ;incstack = 0
 12166                           ; Regs used in _i2c1_driver_sendNACK: []
 12167  17E6  0024               	movlb	4	; select bank4
 12168  17E7  1696               	bsf	22,5	;volatile
 12169                           
 12170                           ;mcc_generated_files/i2c1_driver.c: 205:     SSP1CON2bits.ACKEN = 1;
 12171  17E8  1616               	bsf	22,4	;volatile
 12172  17E9  0008               	return
 12173  17EA                     __end_of_i2c1_driver_sendNACK:	
 12174                           
 12175                           	psect	text42
 12176  08A3                     __ptext42:	
 12177 ;; *************** function _I2C_Read_Byte *****************
 12178 ;; Defined at:
 12179 ;;		line 115 in file "i2c.c"
 12180 ;; Parameters:    Size  Location     Type
 12181 ;;		None
 12182 ;; Auto vars:     Size  Location     Type
 12183 ;;		None
 12184 ;; Return value:  Size  Location     Type
 12185 ;;                  1    wreg      unsigned char 
 12186 ;; Registers used:
 12187 ;;		wreg, status,2, status,0, pclath, cstack
 12188 ;; Tracked objects:
 12189 ;;		On entry : 0/0
 12190 ;;		On exit  : 0/0
 12191 ;;		Unchanged: 0/0
 12192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12193 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12194 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12196 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12197 ;;Total ram usage:        0 bytes
 12198 ;; Hardware stack levels used:    1
 12199 ;; Hardware stack levels required when called:    6
 12200 ;; This function calls:
 12201 ;;		_i2c1_driver_getRXData
 12202 ;;		_i2c1_driver_isBufferFull
 12203 ;;		_i2c1_driver_startRX
 12204 ;; This function is called by:
 12205 ;;		_wireReadDataBlock
 12206 ;;		_wireReadDataByte
 12207 ;; This function uses a non-reentrant model
 12208 ;;
 12209                           
 12210                           
 12211                           ;psect for function _I2C_Read_Byte
 12212  08A3                     _I2C_Read_Byte:	
 12213                           
 12214                           ;i2c.c: 117:     i2c1_driver_startRX();
 12215                           
 12216                           ;incstack = 0
 12217                           ; Regs used in _I2C_Read_Byte: [wreg+status,2+status,0+pclath+cstack]
 12218  08A3  3197  27AE  3188   	fcall	_i2c1_driver_startRX
 12219  08A6                     l6320:	
 12220                           ;i2c.c: 121:  while (i2c1_driver_isBufferFull() == 0) {
 12221                           
 12222                           
 12223                           ;i2c.c: 121:  while (i2c1_driver_isBufferFull() == 0) {
 12224  08A6  3188  2024  3188   	fcall	_i2c1_driver_isBufferFull
 12225  08A9  1C03               	btfss	3,0
 12226  08AA  28A6               	goto	l6320
 12227                           
 12228                           ;i2c.c: 137:   return i2c1_driver_getRXData();
 12229  08AB  3197  27AB         	fcall	_i2c1_driver_getRXData
 12230  08AD  0008               	return
 12231  08AE                     __end_of_I2C_Read_Byte:	
 12232                           
 12233                           	psect	text43
 12234  17AE                     __ptext43:	
 12235 ;; *************** function _i2c1_driver_startRX *****************
 12236 ;; Defined at:
 12237 ;;		line 166 in file "mcc_generated_files/i2c1_driver.c"
 12238 ;; Parameters:    Size  Location     Type
 12239 ;;		None
 12240 ;; Auto vars:     Size  Location     Type
 12241 ;;		None
 12242 ;; Return value:  Size  Location     Type
 12243 ;;                  1    wreg      void 
 12244 ;; Registers used:
 12245 ;;		None
 12246 ;; Tracked objects:
 12247 ;;		On entry : 0/0
 12248 ;;		On exit  : 0/0
 12249 ;;		Unchanged: 0/0
 12250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12251 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12252 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12253 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12254 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12255 ;;Total ram usage:        0 bytes
 12256 ;; Hardware stack levels used:    1
 12257 ;; Hardware stack levels required when called:    5
 12258 ;; This function calls:
 12259 ;;		Nothing
 12260 ;; This function is called by:
 12261 ;;		_I2C_Read_Byte
 12262 ;; This function uses a non-reentrant model
 12263 ;;
 12264                           
 12265                           
 12266                           ;psect for function _i2c1_driver_startRX
 12267  17AE                     _i2c1_driver_startRX:	
 12268                           
 12269                           ;mcc_generated_files/i2c1_driver.c: 168:     SSP1CON2bits.RCEN = 1;
 12270                           
 12271                           ;incstack = 0
 12272                           ; Regs used in _i2c1_driver_startRX: []
 12273  17AE  0024               	movlb	4	; select bank4
 12274  17AF  1596               	bsf	22,3	;volatile
 12275  17B0  0008               	return
 12276  17B1                     __end_of_i2c1_driver_startRX:	
 12277                           
 12278                           	psect	text44
 12279  0824                     __ptext44:	
 12280 ;; *************** function _i2c1_driver_isBufferFull *****************
 12281 ;; Defined at:
 12282 ;;		line 213 in file "mcc_generated_files/i2c1_driver.c"
 12283 ;; Parameters:    Size  Location     Type
 12284 ;;		None
 12285 ;; Auto vars:     Size  Location     Type
 12286 ;;		None
 12287 ;; Return value:  Size  Location     Type
 12288 ;;		None               void
 12289 ;; Registers used:
 12290 ;;		wreg, status,2, status,0
 12291 ;; Tracked objects:
 12292 ;;		On entry : 0/0
 12293 ;;		On exit  : 0/0
 12294 ;;		Unchanged: 0/0
 12295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12297 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12298 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12299 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12300 ;;Total ram usage:        1 bytes
 12301 ;; Hardware stack levels used:    1
 12302 ;; Hardware stack levels required when called:    5
 12303 ;; This function calls:
 12304 ;;		Nothing
 12305 ;; This function is called by:
 12306 ;;		_I2C_Read_Byte
 12307 ;; This function uses a non-reentrant model
 12308 ;;
 12309                           
 12310                           
 12311                           ;psect for function _i2c1_driver_isBufferFull
 12312  0824                     _i2c1_driver_isBufferFull:	
 12313                           
 12314                           ;mcc_generated_files/i2c1_driver.c: 215:     return SSP1STATbits.BF;
 12315                           
 12316                           ;incstack = 0
 12317                           ; Regs used in _i2c1_driver_isBufferFull: [wreg+status,2+status,0]
 12318  0824  0024               	movlb	4	; select bank4
 12319  0825  0814               	movf	20,w	;volatile
 12320  0826  3901               	andlw	1
 12321  0827  0020               	movlb	0	; select bank0
 12322  0828  00A0               	movwf	??_i2c1_driver_isBufferFull
 12323  0829  0C20               	rrf	??_i2c1_driver_isBufferFull,w
 12324  082A  0008               	return
 12325  082B                     __end_of_i2c1_driver_isBufferFull:	
 12326                           
 12327                           	psect	text45
 12328  17AB                     __ptext45:	
 12329 ;; *************** function _i2c1_driver_getRXData *****************
 12330 ;; Defined at:
 12331 ;;		line 171 in file "mcc_generated_files/i2c1_driver.c"
 12332 ;; Parameters:    Size  Location     Type
 12333 ;;		None
 12334 ;; Auto vars:     Size  Location     Type
 12335 ;;		None
 12336 ;; Return value:  Size  Location     Type
 12337 ;;                  1    wreg      unsigned char 
 12338 ;; Registers used:
 12339 ;;		wreg
 12340 ;; Tracked objects:
 12341 ;;		On entry : 0/0
 12342 ;;		On exit  : 0/0
 12343 ;;		Unchanged: 0/0
 12344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12345 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12346 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12348 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12349 ;;Total ram usage:        0 bytes
 12350 ;; Hardware stack levels used:    1
 12351 ;; Hardware stack levels required when called:    5
 12352 ;; This function calls:
 12353 ;;		Nothing
 12354 ;; This function is called by:
 12355 ;;		_I2C_Read_Byte
 12356 ;; This function uses a non-reentrant model
 12357 ;;
 12358                           
 12359                           
 12360                           ;psect for function _i2c1_driver_getRXData
 12361  17AB                     _i2c1_driver_getRXData:	
 12362                           
 12363                           ;mcc_generated_files/i2c1_driver.c: 173:     return SSP1BUF;
 12364                           
 12365                           ;incstack = 0
 12366                           ; Regs used in _i2c1_driver_getRXData: [wreg]
 12367  17AB  0024               	movlb	4	; select bank4
 12368  17AC  0811               	movf	17,w	;volatile
 12369  17AD  0008               	return
 12370  17AE                     __end_of_i2c1_driver_getRXData:	
 12371                           
 12372                           	psect	text46
 12373  17A8                     __ptext46:	
 12374 ;; *************** function _I2C_ReStart *****************
 12375 ;; Defined at:
 12376 ;;		line 43 in file "i2c.c"
 12377 ;; Parameters:    Size  Location     Type
 12378 ;;		None
 12379 ;; Auto vars:     Size  Location     Type
 12380 ;;		None
 12381 ;; Return value:  Size  Location     Type
 12382 ;;                  1    wreg      void 
 12383 ;; Registers used:
 12384 ;;		status,2, status,0, pclath, cstack
 12385 ;; Tracked objects:
 12386 ;;		On entry : 0/0
 12387 ;;		On exit  : 0/0
 12388 ;;		Unchanged: 0/0
 12389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12390 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12391 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12392 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12393 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12394 ;;Total ram usage:        0 bytes
 12395 ;; Hardware stack levels used:    1
 12396 ;; Hardware stack levels required when called:    6
 12397 ;; This function calls:
 12398 ;;		_i2c1_driver_restart
 12399 ;; This function is called by:
 12400 ;;		_wireReadDataBlock
 12401 ;;		_wireReadDataByte
 12402 ;; This function uses a non-reentrant model
 12403 ;;
 12404                           
 12405                           
 12406                           ;psect for function _I2C_ReStart
 12407  17A8                     _I2C_ReStart:	
 12408                           
 12409                           ;i2c.c: 45:  i2c1_driver_restart();
 12410                           
 12411                           ;incstack = 0
 12412                           ; Regs used in _I2C_ReStart: [status,2+status,0+pclath+cstack]
 12413  17A8  3197  27A5         	fcall	_i2c1_driver_restart
 12414  17AA  0008               	return
 12415  17AB                     __end_of_I2C_ReStart:	
 12416                           
 12417                           	psect	text47
 12418  17A5                     __ptext47:	
 12419 ;; *************** function _i2c1_driver_restart *****************
 12420 ;; Defined at:
 12421 ;;		line 151 in file "mcc_generated_files/i2c1_driver.c"
 12422 ;; Parameters:    Size  Location     Type
 12423 ;;		None
 12424 ;; Auto vars:     Size  Location     Type
 12425 ;;		None
 12426 ;; Return value:  Size  Location     Type
 12427 ;;                  1    wreg      void 
 12428 ;; Registers used:
 12429 ;;		None
 12430 ;; Tracked objects:
 12431 ;;		On entry : 0/0
 12432 ;;		On exit  : 0/0
 12433 ;;		Unchanged: 0/0
 12434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12435 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12436 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12437 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12438 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12439 ;;Total ram usage:        0 bytes
 12440 ;; Hardware stack levels used:    1
 12441 ;; Hardware stack levels required when called:    5
 12442 ;; This function calls:
 12443 ;;		Nothing
 12444 ;; This function is called by:
 12445 ;;		_I2C_ReStart
 12446 ;; This function uses a non-reentrant model
 12447 ;;
 12448                           
 12449                           
 12450                           ;psect for function _i2c1_driver_restart
 12451  17A5                     _i2c1_driver_restart:	
 12452                           
 12453                           ;mcc_generated_files/i2c1_driver.c: 153:     SSP1CON2bits.RSEN = 1;
 12454                           
 12455                           ;incstack = 0
 12456                           ; Regs used in _i2c1_driver_restart: []
 12457  17A5  0024               	movlb	4	; select bank4
 12458  17A6  1496               	bsf	22,1	;volatile
 12459  17A7  0008               	return
 12460  17A8                     __end_of_i2c1_driver_restart:	
 12461                           
 12462                           	psect	text48
 12463  0FA8                     __ptext48:	
 12464 ;; *************** function _UART_Byte *****************
 12465 ;; Defined at:
 12466 ;;		line 306 in file "main.c"
 12467 ;; Parameters:    Size  Location     Type
 12468 ;;		None
 12469 ;; Auto vars:     Size  Location     Type
 12470 ;;  i               2   18[BANK0 ] int 
 12471 ;;  bits            4   14[BANK0 ] unsigned char [4]
 12472 ;;  tempBright      2   12[BANK0 ] int 
 12473 ;;  tempName        2   10[BANK0 ] int 
 12474 ;;  tempProx        2    8[BANK0 ] int 
 12475 ;;  tempOn          2    6[BANK0 ] int 
 12476 ;; Return value:  Size  Location     Type
 12477 ;;                  1    wreg      void 
 12478 ;; Registers used:
 12479 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12480 ;; Tracked objects:
 12481 ;;		On entry : 0/0
 12482 ;;		On exit  : 0/0
 12483 ;;		Unchanged: 0/0
 12484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12485 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12486 ;;      Locals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12487 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12488 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12489 ;;Total ram usage:       15 bytes
 12490 ;; Hardware stack levels used:    1
 12491 ;; Hardware stack levels required when called:    6
 12492 ;; This function calls:
 12493 ;;		_strlen
 12494 ;; This function is called by:
 12495 ;;		_main
 12496 ;; This function uses a non-reentrant model
 12497 ;;
 12498                           
 12499                           
 12500                           ;psect for function _UART_Byte
 12501  0FA8                     _UART_Byte:	
 12502                           
 12503                           ;main.c: 307:     int tempOn = on + 1;
 12504                           
 12505                           ;incstack = 0
 12506                           ; Regs used in _UART_Byte: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12507  0FA8  0020               	movlb	0	; select bank0
 12508  0FA9  085C               	movf	_on,w
 12509  0FAA  3E01               	addlw	1
 12510  0FAB  00A6               	movwf	UART_Byte@tempOn
 12511  0FAC  3000               	movlw	0
 12512  0FAD  3D5D               	addwfc	_on+1,w
 12513  0FAE  00A7               	movwf	UART_Byte@tempOn+1
 12514                           
 12515                           ;main.c: 308:     int tempProx = prox + 1;
 12516  0FAF  0021               	movlb	1	; select bank1
 12517  0FB0  0864               	movf	_prox^(0+128),w
 12518  0FB1  3E01               	addlw	1
 12519  0FB2  0020               	movlb	0	; select bank0
 12520  0FB3  00A8               	movwf	UART_Byte@tempProx
 12521  0FB4  3000               	movlw	0
 12522  0FB5  0021               	movlb	1	; select bank1
 12523  0FB6  3D65               	addwfc	(_prox+1)^(0+128),w
 12524  0FB7  0020               	movlb	0	; select bank0
 12525  0FB8  00A9               	movwf	UART_Byte@tempProx+1
 12526                           
 12527                           ;main.c: 309:     int tempName = name + 1;
 12528  0FB9  0860               	movf	_name,w
 12529  0FBA  3E01               	addlw	1
 12530  0FBB  00AA               	movwf	UART_Byte@tempName
 12531  0FBC  3000               	movlw	0
 12532  0FBD  3D61               	addwfc	_name+1,w
 12533  0FBE  00AB               	movwf	UART_Byte@tempName+1
 12534                           
 12535                           ;main.c: 310:     int tempBright = brightness + 1;
 12536  0FBF  085E               	movf	_brightness,w
 12537  0FC0  3E01               	addlw	1
 12538  0FC1  00AC               	movwf	UART_Byte@tempBright
 12539  0FC2  3000               	movlw	0
 12540  0FC3  3D5F               	addwfc	_brightness+1,w
 12541  0FC4  00AD               	movwf	UART_Byte@tempBright+1
 12542                           
 12543                           ;main.c: 311:     char bits[4] = {tempOn, tempProx, tempName, tempBright};
 12544  0FC5  3000               	movlw	0
 12545  0FC6  00B1               	movwf	UART_Byte@bits+3
 12546  0FC7  3000               	movlw	0
 12547  0FC8  00B0               	movwf	UART_Byte@bits+2
 12548  0FC9  3000               	movlw	0
 12549  0FCA  00AF               	movwf	UART_Byte@bits+1
 12550  0FCB  3000               	movlw	0
 12551  0FCC  00AE               	movwf	UART_Byte@bits
 12552  0FCD  0826               	movf	UART_Byte@tempOn,w
 12553  0FCE  00A5               	movwf	??_UART_Byte
 12554  0FCF  0825               	movf	??_UART_Byte,w
 12555  0FD0  00AE               	movwf	UART_Byte@bits
 12556  0FD1  0828               	movf	UART_Byte@tempProx,w
 12557  0FD2  00A5               	movwf	??_UART_Byte
 12558  0FD3  0825               	movf	??_UART_Byte,w
 12559  0FD4  00AF               	movwf	UART_Byte@bits+1
 12560  0FD5  082A               	movf	UART_Byte@tempName,w
 12561  0FD6  00A5               	movwf	??_UART_Byte
 12562  0FD7  0825               	movf	??_UART_Byte,w
 12563  0FD8  00B0               	movwf	UART_Byte@bits+2
 12564  0FD9  082C               	movf	UART_Byte@tempBright,w
 12565  0FDA  00A5               	movwf	??_UART_Byte
 12566  0FDB  0825               	movf	??_UART_Byte,w
 12567  0FDC  00B1               	movwf	UART_Byte@bits+3
 12568                           
 12569                           ;main.c: 312:     for(int i = 0; i < strlen(bits); i++) {
 12570  0FDD  01B2               	clrf	UART_Byte@i
 12571  0FDE  01B3               	clrf	UART_Byte@i+1
 12572  0FDF                     l7572:	
 12573  0FDF  302E               	movlw	low UART_Byte@bits
 12574  0FE0  00A0               	movwf	strlen@s
 12575  0FE1  3000               	movlw	high UART_Byte@bits
 12576  0FE2  00A1               	movwf	strlen@s+1
 12577  0FE3  3189  2199  318F   	fcall	_strlen
 12578  0FE6  0020               	movlb	0	; select bank0
 12579  0FE7  0821               	movf	?_strlen+1,w
 12580  0FE8  0233               	subwf	UART_Byte@i+1,w
 12581  0FE9  1D03               	skipz
 12582  0FEA  2FED               	goto	u6705
 12583  0FEB  0820               	movf	?_strlen,w
 12584  0FEC  0232               	subwf	UART_Byte@i,w
 12585  0FED                     u6705:	
 12586  0FED  1803               	btfsc	3,0
 12587  0FEE  0008               	return
 12588  0FEF                     l992:	
 12589  0FEF  0023               	movlb	3	; select bank3
 12590  0FF0  1C9E               	btfss	30,1	;volatile
 12591  0FF1  2FEF               	goto	l992
 12592                           
 12593                           ;main.c: 314:         TXREG1 = bits[i];
 12594  0FF2  0020               	movlb	0	; select bank0
 12595  0FF3  0832               	movf	UART_Byte@i,w
 12596  0FF4  3E2E               	addlw	(low (UART_Byte@bits| 0))& (0+255)
 12597  0FF5  0086               	movwf	6
 12598  0FF6  0187               	clrf	7
 12599  0FF7  0801               	movf	1,w
 12600  0FF8  0023               	movlb	3	; select bank3
 12601  0FF9  009A               	movwf	26	;volatile
 12602                           
 12603                           ;main.c: 315:     }
 12604  0FFA  3001               	movlw	1
 12605  0FFB  0020               	movlb	0	; select bank0
 12606  0FFC  07B2               	addwf	UART_Byte@i,f
 12607  0FFD  3000               	movlw	0
 12608  0FFE  3DB3               	addwfc	UART_Byte@i+1,f
 12609  0FFF  2FDF               	goto	l7572
 12610  1000                     __end_of_UART_Byte:	
 12611                           
 12612                           	psect	text49
 12613  0999                     __ptext49:	
 12614 ;; *************** function _strlen *****************
 12615 ;; Defined at:
 12616 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
 12617 ;; Parameters:    Size  Location     Type
 12618 ;;  s               2    0[BANK0 ] PTR const unsigned char 
 12619 ;;		 -> UART_Byte@bits(4), STR_5(7), STR_4(11), STR_3(16), 
 12620 ;;		 -> STR_2(13), STR_1(12), 
 12621 ;; Auto vars:     Size  Location     Type
 12622 ;;  a               2    3[BANK0 ] PTR const unsigned char 
 12623 ;;		 -> UART_Byte@bits(4), STR_5(7), STR_4(11), STR_3(16), 
 12624 ;;		 -> STR_2(13), STR_1(12), 
 12625 ;; Return value:  Size  Location     Type
 12626 ;;                  2    0[BANK0 ] unsigned int 
 12627 ;; Registers used:
 12628 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 12629 ;; Tracked objects:
 12630 ;;		On entry : 0/0
 12631 ;;		On exit  : 0/0
 12632 ;;		Unchanged: 0/0
 12633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12634 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12635 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12636 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12637 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12638 ;;Total ram usage:        5 bytes
 12639 ;; Hardware stack levels used:    1
 12640 ;; Hardware stack levels required when called:    5
 12641 ;; This function calls:
 12642 ;;		Nothing
 12643 ;; This function is called by:
 12644 ;;		_Display_Name
 12645 ;;		_UART_Byte
 12646 ;; This function uses a non-reentrant model
 12647 ;;
 12648                           
 12649                           
 12650                           ;psect for function _strlen
 12651  0999                     _strlen:	
 12652                           
 12653                           ;incstack = 0
 12654                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0]
 12655  0999  0020               	movlb	0	; select bank0
 12656  099A  0821               	movf	strlen@s+1,w
 12657  099B  00A4               	movwf	strlen@a+1
 12658  099C  0820               	movf	strlen@s,w
 12659  099D  00A3               	movwf	strlen@a
 12660  099E                     l6466:	
 12661  099E  0820               	movf	strlen@s,w
 12662  099F  0084               	movwf	4
 12663  09A0  0821               	movf	strlen@s+1,w
 12664  09A1  0085               	movwf	5
 12665  09A2  0012               	moviw fsr0++
 12666  09A3  1903               	btfsc	3,2
 12667  09A4  29AA               	goto	l6468
 12668  09A5  3001               	movlw	1
 12669  09A6  07A0               	addwf	strlen@s,f
 12670  09A7  3000               	movlw	0
 12671  09A8  3DA1               	addwfc	strlen@s+1,f
 12672  09A9  299E               	goto	l6466
 12673  09AA                     l6468:	
 12674  09AA  0823               	movf	strlen@a,w
 12675  09AB  0220               	subwf	strlen@s,w
 12676  09AC  00A0               	movwf	?_strlen
 12677  09AD  0824               	movf	strlen@a+1,w
 12678  09AE  3B21               	subwfb	strlen@s+1,w
 12679  09AF  00A1               	movwf	?_strlen+1
 12680  09B0  0008               	return
 12681  09B1                     __end_of_strlen:	
 12682                           
 12683                           	psect	text50
 12684  09B1                     __ptext50:	
 12685 ;; *************** function _SYSTEM_Initialize *****************
 12686 ;; Defined at:
 12687 ;;		line 50 in file "mcc_generated_files/mcc.c"
 12688 ;; Parameters:    Size  Location     Type
 12689 ;;		None
 12690 ;; Auto vars:     Size  Location     Type
 12691 ;;		None
 12692 ;; Return value:  Size  Location     Type
 12693 ;;                  1    wreg      void 
 12694 ;; Registers used:
 12695 ;;		wreg, status,2, status,0, pclath, cstack
 12696 ;; Tracked objects:
 12697 ;;		On entry : 0/0
 12698 ;;		On exit  : 0/0
 12699 ;;		Unchanged: 0/0
 12700 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12702 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12704 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12705 ;;Total ram usage:        0 bytes
 12706 ;; Hardware stack levels used:    1
 12707 ;; Hardware stack levels required when called:    7
 12708 ;; This function calls:
 12709 ;;		_ADC_Initialize
 12710 ;;		_EUSART_Initialize
 12711 ;;		_OSCILLATOR_Initialize
 12712 ;;		_PIN_MANAGER_Initialize
 12713 ;;		_PMD_Initialize
 12714 ;;		_PWM1_Initialize
 12715 ;;		_SPI2_Initialize
 12716 ;;		_TMR2_Initialize
 12717 ;;		_WDT_Initialize
 12718 ;; This function is called by:
 12719 ;;		_main
 12720 ;; This function uses a non-reentrant model
 12721 ;;
 12722                           
 12723                           
 12724                           ;psect for function _SYSTEM_Initialize
 12725  09B1                     _SYSTEM_Initialize:	
 12726                           
 12727                           ;mcc_generated_files/mcc.c: 53:     PMD_Initialize();
 12728                           
 12729                           ;incstack = 0
 12730                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
 12731  09B1  3188  204B  3189   	fcall	_PMD_Initialize
 12732                           
 12733                           ;mcc_generated_files/mcc.c: 54:     PIN_MANAGER_Initialize();
 12734  09B4  318C  24E5  3189   	fcall	_PIN_MANAGER_Initialize
 12735                           
 12736                           ;mcc_generated_files/mcc.c: 55:     OSCILLATOR_Initialize();
 12737  09B7  3188  2043  3189   	fcall	_OSCILLATOR_Initialize
 12738                           
 12739                           ;mcc_generated_files/mcc.c: 56:     WDT_Initialize();
 12740  09BA  3197  27E2  3189   	fcall	_WDT_Initialize
 12741                           
 12742                           ;mcc_generated_files/mcc.c: 57:     SPI2_Initialize();
 12743  09BD  3188  201D  3189   	fcall	_SPI2_Initialize
 12744                           
 12745                           ;mcc_generated_files/mcc.c: 58:     PWM1_Initialize();
 12746  09C0  3188  20AE  3189   	fcall	_PWM1_Initialize
 12747                           
 12748                           ;mcc_generated_files/mcc.c: 59:     ADC_Initialize();
 12749  09C3  3188  203B  3189   	fcall	_ADC_Initialize
 12750                           
 12751                           ;mcc_generated_files/mcc.c: 60:     TMR2_Initialize();
 12752  09C6  3188  2053  3189   	fcall	_TMR2_Initialize
 12753                           
 12754                           ;mcc_generated_files/mcc.c: 61:     EUSART_Initialize();
 12755  09C9  318D  25A1         	fcall	_EUSART_Initialize
 12756  09CB  0008               	return
 12757  09CC                     __end_of_SYSTEM_Initialize:	
 12758                           
 12759                           	psect	text51
 12760  17E2                     __ptext51:	
 12761 ;; *************** function _WDT_Initialize *****************
 12762 ;; Defined at:
 12763 ;;		line 78 in file "mcc_generated_files/mcc.c"
 12764 ;; Parameters:    Size  Location     Type
 12765 ;;		None
 12766 ;; Auto vars:     Size  Location     Type
 12767 ;;		None
 12768 ;; Return value:  Size  Location     Type
 12769 ;;                  1    wreg      void 
 12770 ;; Registers used:
 12771 ;;		wreg
 12772 ;; Tracked objects:
 12773 ;;		On entry : 0/0
 12774 ;;		On exit  : 0/0
 12775 ;;		Unchanged: 0/0
 12776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12777 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12778 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12779 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12780 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12781 ;;Total ram usage:        0 bytes
 12782 ;; Hardware stack levels used:    1
 12783 ;; Hardware stack levels required when called:    5
 12784 ;; This function calls:
 12785 ;;		Nothing
 12786 ;; This function is called by:
 12787 ;;		_SYSTEM_Initialize
 12788 ;; This function uses a non-reentrant model
 12789 ;;
 12790                           
 12791                           
 12792                           ;psect for function _WDT_Initialize
 12793  17E2                     _WDT_Initialize:	
 12794                           
 12795                           ;mcc_generated_files/mcc.c: 81:     WDTCON = 0x18;
 12796                           
 12797                           ;incstack = 0
 12798                           ; Regs used in _WDT_Initialize: [wreg]
 12799  17E2  3018               	movlw	24
 12800  17E3  0021               	movlb	1	; select bank1
 12801  17E4  0097               	movwf	23	;volatile
 12802  17E5  0008               	return
 12803  17E6                     __end_of_WDT_Initialize:	
 12804                           
 12805                           	psect	text52
 12806  0853                     __ptext52:	
 12807 ;; *************** function _TMR2_Initialize *****************
 12808 ;; Defined at:
 12809 ;;		line 62 in file "mcc_generated_files/tmr2.c"
 12810 ;; Parameters:    Size  Location     Type
 12811 ;;		None
 12812 ;; Auto vars:     Size  Location     Type
 12813 ;;		None
 12814 ;; Return value:  Size  Location     Type
 12815 ;;                  1    wreg      void 
 12816 ;; Registers used:
 12817 ;;		wreg, status,2
 12818 ;; Tracked objects:
 12819 ;;		On entry : 0/0
 12820 ;;		On exit  : 0/0
 12821 ;;		Unchanged: 0/0
 12822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12823 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12824 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12825 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12826 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12827 ;;Total ram usage:        0 bytes
 12828 ;; Hardware stack levels used:    1
 12829 ;; Hardware stack levels required when called:    5
 12830 ;; This function calls:
 12831 ;;		Nothing
 12832 ;; This function is called by:
 12833 ;;		_SYSTEM_Initialize
 12834 ;; This function uses a non-reentrant model
 12835 ;;
 12836                           
 12837                           
 12838                           ;psect for function _TMR2_Initialize
 12839  0853                     _TMR2_Initialize:	
 12840                           
 12841                           ;mcc_generated_files/tmr2.c: 67:     PR2 = 0xFF;
 12842                           
 12843                           ;incstack = 0
 12844                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
 12845  0853  30FF               	movlw	255
 12846  0854  0020               	movlb	0	; select bank0
 12847  0855  009E               	movwf	30	;volatile
 12848                           
 12849                           ;mcc_generated_files/tmr2.c: 70:     TMR2 = 0x00;
 12850  0856  019D               	clrf	29	;volatile
 12851                           
 12852                           ;mcc_generated_files/tmr2.c: 73:     PIR1bits.TMR2IF = 0;
 12853  0857  1091               	bcf	17,1	;volatile
 12854                           
 12855                           ;mcc_generated_files/tmr2.c: 76:     T2CON = 0x04;
 12856  0858  3004               	movlw	4
 12857  0859  009F               	movwf	31	;volatile
 12858  085A  0008               	return
 12859  085B                     __end_of_TMR2_Initialize:	
 12860                           
 12861                           	psect	text53
 12862  081D                     __ptext53:	
 12863 ;; *************** function _SPI2_Initialize *****************
 12864 ;; Defined at:
 12865 ;;		line 65 in file "mcc_generated_files/spi2.c"
 12866 ;; Parameters:    Size  Location     Type
 12867 ;;		None
 12868 ;; Auto vars:     Size  Location     Type
 12869 ;;		None
 12870 ;; Return value:  Size  Location     Type
 12871 ;;                  1    wreg      void 
 12872 ;; Registers used:
 12873 ;;		wreg, status,2
 12874 ;; Tracked objects:
 12875 ;;		On entry : 0/0
 12876 ;;		On exit  : 0/0
 12877 ;;		Unchanged: 0/0
 12878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12879 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12880 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12881 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12882 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12883 ;;Total ram usage:        0 bytes
 12884 ;; Hardware stack levels used:    1
 12885 ;; Hardware stack levels required when called:    5
 12886 ;; This function calls:
 12887 ;;		Nothing
 12888 ;; This function is called by:
 12889 ;;		_SYSTEM_Initialize
 12890 ;; This function uses a non-reentrant model
 12891 ;;
 12892                           
 12893                           
 12894                           ;psect for function _SPI2_Initialize
 12895  081D                     _SPI2_Initialize:	
 12896                           
 12897                           ;mcc_generated_files/spi2.c: 70:     SSP2STAT = 0x80;
 12898                           
 12899                           ;incstack = 0
 12900                           ; Regs used in _SPI2_Initialize: [wreg+status,2]
 12901  081D  3080               	movlw	128
 12902  081E  0024               	movlb	4	; select bank4
 12903  081F  009C               	movwf	28	;volatile
 12904                           
 12905                           ;mcc_generated_files/spi2.c: 73:     SSP2CON1 = 0x31;
 12906  0820  3031               	movlw	49
 12907  0821  009D               	movwf	29	;volatile
 12908                           
 12909                           ;mcc_generated_files/spi2.c: 76:     SSP2ADD = 0x00;
 12910  0822  019A               	clrf	26	;volatile
 12911  0823  0008               	return
 12912  0824                     __end_of_SPI2_Initialize:	
 12913                           
 12914                           	psect	text54
 12915  08AE                     __ptext54:	
 12916 ;; *************** function _PWM1_Initialize *****************
 12917 ;; Defined at:
 12918 ;;		line 64 in file "mcc_generated_files/pwm1.c"
 12919 ;; Parameters:    Size  Location     Type
 12920 ;;		None
 12921 ;; Auto vars:     Size  Location     Type
 12922 ;;		None
 12923 ;; Return value:  Size  Location     Type
 12924 ;;                  1    wreg      void 
 12925 ;; Registers used:
 12926 ;;		wreg, status,2, status,0
 12927 ;; Tracked objects:
 12928 ;;		On entry : 0/0
 12929 ;;		On exit  : 0/0
 12930 ;;		Unchanged: 0/0
 12931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12932 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12933 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12934 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12935 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12936 ;;Total ram usage:        0 bytes
 12937 ;; Hardware stack levels used:    1
 12938 ;; Hardware stack levels required when called:    5
 12939 ;; This function calls:
 12940 ;;		Nothing
 12941 ;; This function is called by:
 12942 ;;		_SYSTEM_Initialize
 12943 ;; This function uses a non-reentrant model
 12944 ;;
 12945                           
 12946                           
 12947                           ;psect for function _PWM1_Initialize
 12948  08AE                     _PWM1_Initialize:	
 12949                           
 12950                           ;mcc_generated_files/pwm1.c: 69:  CCP1CON = 0x8F;
 12951                           
 12952                           ;incstack = 0
 12953                           ; Regs used in _PWM1_Initialize: [wreg+status,2+status,0]
 12954  08AE  308F               	movlw	143
 12955  08AF  0025               	movlb	5	; select bank5
 12956  08B0  0093               	movwf	19	;volatile
 12957                           
 12958                           ;mcc_generated_files/pwm1.c: 72:  CCPR1H = 0x01;
 12959  08B1  3001               	movlw	1
 12960  08B2  0092               	movwf	18	;volatile
 12961                           
 12962                           ;mcc_generated_files/pwm1.c: 75:  CCPR1L = 0x32;
 12963  08B3  3032               	movlw	50
 12964  08B4  0091               	movwf	17	;volatile
 12965                           
 12966                           ;mcc_generated_files/pwm1.c: 78:  CCPTMRSbits.C1TSEL = 0x1;
 12967  08B5  081F               	movf	31,w	;volatile
 12968  08B6  39FC               	andlw	-4
 12969  08B7  3801               	iorlw	1
 12970  08B8  009F               	movwf	31	;volatile
 12971  08B9  0008               	return
 12972  08BA                     __end_of_PWM1_Initialize:	
 12973                           
 12974                           	psect	text55
 12975  084B                     __ptext55:	
 12976 ;; *************** function _PMD_Initialize *****************
 12977 ;; Defined at:
 12978 ;;		line 84 in file "mcc_generated_files/mcc.c"
 12979 ;; Parameters:    Size  Location     Type
 12980 ;;		None
 12981 ;; Auto vars:     Size  Location     Type
 12982 ;;		None
 12983 ;; Return value:  Size  Location     Type
 12984 ;;                  1    wreg      void 
 12985 ;; Registers used:
 12986 ;;		status,2
 12987 ;; Tracked objects:
 12988 ;;		On entry : 0/0
 12989 ;;		On exit  : 0/0
 12990 ;;		Unchanged: 0/0
 12991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12992 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12993 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12994 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12995 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12996 ;;Total ram usage:        0 bytes
 12997 ;; Hardware stack levels used:    1
 12998 ;; Hardware stack levels required when called:    5
 12999 ;; This function calls:
 13000 ;;		Nothing
 13001 ;; This function is called by:
 13002 ;;		_SYSTEM_Initialize
 13003 ;; This function uses a non-reentrant model
 13004 ;;
 13005                           
 13006                           
 13007                           ;psect for function _PMD_Initialize
 13008  084B                     _PMD_Initialize:	
 13009                           
 13010                           ;mcc_generated_files/mcc.c: 87:     PMD0 = 0x00;
 13011                           
 13012                           ;incstack = 0
 13013                           ; Regs used in _PMD_Initialize: [status,2]
 13014  084B  0032               	movlb	18	; select bank18
 13015  084C  0191               	clrf	17	;volatile
 13016                           
 13017                           ;mcc_generated_files/mcc.c: 89:     PMD1 = 0x00;
 13018  084D  0192               	clrf	18	;volatile
 13019                           
 13020                           ;mcc_generated_files/mcc.c: 91:     PMD2 = 0x00;
 13021  084E  0193               	clrf	19	;volatile
 13022                           
 13023                           ;mcc_generated_files/mcc.c: 93:     PMD3 = 0x00;
 13024  084F  0194               	clrf	20	;volatile
 13025                           
 13026                           ;mcc_generated_files/mcc.c: 95:     PMD4 = 0x00;
 13027  0850  0195               	clrf	21	;volatile
 13028                           
 13029                           ;mcc_generated_files/mcc.c: 97:     PMD5 = 0x00;
 13030  0851  0196               	clrf	22	;volatile
 13031  0852  0008               	return
 13032  0853                     __end_of_PMD_Initialize:	
 13033                           
 13034                           	psect	text56
 13035  0CE5                     __ptext56:	
 13036 ;; *************** function _PIN_MANAGER_Initialize *****************
 13037 ;; Defined at:
 13038 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
 13039 ;; Parameters:    Size  Location     Type
 13040 ;;		None
 13041 ;; Auto vars:     Size  Location     Type
 13042 ;;		None
 13043 ;; Return value:  Size  Location     Type
 13044 ;;                  1    wreg      void 
 13045 ;; Registers used:
 13046 ;;		wreg, status,2
 13047 ;; Tracked objects:
 13048 ;;		On entry : 0/0
 13049 ;;		On exit  : 0/0
 13050 ;;		Unchanged: 0/0
 13051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13052 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13053 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13054 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13055 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13056 ;;Total ram usage:        0 bytes
 13057 ;; Hardware stack levels used:    1
 13058 ;; Hardware stack levels required when called:    5
 13059 ;; This function calls:
 13060 ;;		Nothing
 13061 ;; This function is called by:
 13062 ;;		_SYSTEM_Initialize
 13063 ;; This function uses a non-reentrant model
 13064 ;;
 13065                           
 13066                           
 13067                           ;psect for function _PIN_MANAGER_Initialize
 13068  0CE5                     _PIN_MANAGER_Initialize:	
 13069                           
 13070                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x00;
 13071                           
 13072                           ;incstack = 0
 13073                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
 13074  0CE5  0022               	movlb	2	; select bank2
 13075  0CE6  018C               	clrf	12	;volatile
 13076                           
 13077                           ;mcc_generated_files/pin_manager.c: 61:     LATB = 0x00;
 13078  0CE7  018D               	clrf	13	;volatile
 13079                           
 13080                           ;mcc_generated_files/pin_manager.c: 62:     LATC = 0x00;
 13081  0CE8  018E               	clrf	14	;volatile
 13082                           
 13083                           ;mcc_generated_files/pin_manager.c: 67:     TRISA = 0x33;
 13084  0CE9  3033               	movlw	51
 13085  0CEA  0021               	movlb	1	; select bank1
 13086  0CEB  008C               	movwf	12	;volatile
 13087                           
 13088                           ;mcc_generated_files/pin_manager.c: 68:     TRISB = 0xB0;
 13089  0CEC  30B0               	movlw	176
 13090  0CED  008D               	movwf	13	;volatile
 13091                           
 13092                           ;mcc_generated_files/pin_manager.c: 69:     TRISC = 0x9A;
 13093  0CEE  309A               	movlw	154
 13094  0CEF  008E               	movwf	14	;volatile
 13095                           
 13096                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0xE4;
 13097  0CF0  30E4               	movlw	228
 13098  0CF1  0023               	movlb	3	; select bank3
 13099  0CF2  008E               	movwf	14	;volatile
 13100                           
 13101                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0x00;
 13102  0CF3  018D               	clrf	13	;volatile
 13103                           
 13104                           ;mcc_generated_files/pin_manager.c: 76:     ANSELA = 0x11;
 13105  0CF4  3011               	movlw	17
 13106  0CF5  008C               	movwf	12	;volatile
 13107                           
 13108                           ;mcc_generated_files/pin_manager.c: 81:     WPUB = 0x00;
 13109  0CF6  0024               	movlb	4	; select bank4
 13110  0CF7  018D               	clrf	13	;volatile
 13111                           
 13112                           ;mcc_generated_files/pin_manager.c: 82:     WPUA = 0x00;
 13113  0CF8  018C               	clrf	12	;volatile
 13114                           
 13115                           ;mcc_generated_files/pin_manager.c: 83:     WPUC = 0x00;
 13116  0CF9  018E               	clrf	14	;volatile
 13117                           
 13118                           ;mcc_generated_files/pin_manager.c: 88:     ODCONA = 0x00;
 13119  0CFA  0025               	movlb	5	; select bank5
 13120  0CFB  018C               	clrf	12	;volatile
 13121                           
 13122                           ;mcc_generated_files/pin_manager.c: 89:     ODCONB = 0x00;
 13123  0CFC  018D               	clrf	13	;volatile
 13124                           
 13125                           ;mcc_generated_files/pin_manager.c: 90:     ODCONC = 0x00;
 13126  0CFD  018E               	clrf	14	;volatile
 13127                           
 13128                           ;mcc_generated_files/pin_manager.c: 95:     SLRCONA = 0x37;
 13129  0CFE  3037               	movlw	55
 13130  0CFF  0026               	movlb	6	; select bank6
 13131  0D00  008C               	movwf	12	;volatile
 13132                           
 13133                           ;mcc_generated_files/pin_manager.c: 96:     SLRCONB = 0xF0;
 13134  0D01  30F0               	movlw	240
 13135  0D02  008D               	movwf	13	;volatile
 13136                           
 13137                           ;mcc_generated_files/pin_manager.c: 97:     SLRCONC = 0xFF;
 13138  0D03  30FF               	movlw	255
 13139  0D04  008E               	movwf	14	;volatile
 13140                           
 13141                           ;mcc_generated_files/pin_manager.c: 105:     PIE0bits.IOCIE = 1;
 13142  0D05  0021               	movlb	1	; select bank1
 13143  0D06  1610               	bsf	16,4	;volatile
 13144                           
 13145                           ;mcc_generated_files/pin_manager.c: 108:     RXPPS = 0x14;
 13146  0D07  3014               	movlw	20
 13147  0D08  003C               	movlb	28	; select bank28
 13148  0D09  00A4               	movwf	36	;volatile
 13149                           
 13150                           ;mcc_generated_files/pin_manager.c: 109:     SSP2DATPPS = 0x0C;
 13151  0D0A  300C               	movlw	12
 13152  0D0B  009E               	movwf	30	;volatile
 13153                           
 13154                           ;mcc_generated_files/pin_manager.c: 110:     SSP1CLKPPS = 0x0F;
 13155  0D0C  300F               	movlw	15
 13156  0D0D  00A0               	movwf	32	;volatile
 13157                           
 13158                           ;mcc_generated_files/pin_manager.c: 111:     RB6PPS = 0x1A;
 13159  0D0E  301A               	movlw	26
 13160  0D0F  003D               	movlb	29	; select bank29
 13161  0D10  009E               	movwf	30	;volatile
 13162                           
 13163                           ;mcc_generated_files/pin_manager.c: 112:     RB7PPS = 0x18;
 13164  0D11  3018               	movlw	24
 13165  0D12  009F               	movwf	31	;volatile
 13166                           
 13167                           ;mcc_generated_files/pin_manager.c: 113:     RB5PPS = 0x00;
 13168  0D13  019D               	clrf	29	;volatile
 13169                           
 13170                           ;mcc_generated_files/pin_manager.c: 114:     RC2PPS = 0x1B;
 13171  0D14  301B               	movlw	27
 13172  0D15  00A2               	movwf	34	;volatile
 13173                           
 13174                           ;mcc_generated_files/pin_manager.c: 115:     RC5PPS = 0x14;
 13175  0D16  3014               	movlw	20
 13176  0D17  00A5               	movwf	37	;volatile
 13177                           
 13178                           ;mcc_generated_files/pin_manager.c: 116:     SSP1DATPPS = 0x0D;
 13179  0D18  300D               	movlw	13
 13180  0D19  003C               	movlb	28	; select bank28
 13181  0D1A  00A1               	movwf	33	;volatile
 13182                           
 13183                           ;mcc_generated_files/pin_manager.c: 117:     SSP2CLKPPS = 0x0E;
 13184  0D1B  300E               	movlw	14
 13185  0D1C  009D               	movwf	29	;volatile
 13186  0D1D  0008               	return
 13187  0D1E                     __end_of_PIN_MANAGER_Initialize:	
 13188                           
 13189                           	psect	text57
 13190  0843                     __ptext57:	
 13191 ;; *************** function _OSCILLATOR_Initialize *****************
 13192 ;; Defined at:
 13193 ;;		line 64 in file "mcc_generated_files/mcc.c"
 13194 ;; Parameters:    Size  Location     Type
 13195 ;;		None
 13196 ;; Auto vars:     Size  Location     Type
 13197 ;;		None
 13198 ;; Return value:  Size  Location     Type
 13199 ;;                  1    wreg      void 
 13200 ;; Registers used:
 13201 ;;		wreg, status,2
 13202 ;; Tracked objects:
 13203 ;;		On entry : 0/0
 13204 ;;		On exit  : 0/0
 13205 ;;		Unchanged: 0/0
 13206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13207 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13208 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13209 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13210 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13211 ;;Total ram usage:        0 bytes
 13212 ;; Hardware stack levels used:    1
 13213 ;; Hardware stack levels required when called:    5
 13214 ;; This function calls:
 13215 ;;		Nothing
 13216 ;; This function is called by:
 13217 ;;		_SYSTEM_Initialize
 13218 ;; This function uses a non-reentrant model
 13219 ;;
 13220                           
 13221                           
 13222                           ;psect for function _OSCILLATOR_Initialize
 13223  0843                     _OSCILLATOR_Initialize:	
 13224                           
 13225                           ;mcc_generated_files/mcc.c: 67:     OSCCON1 = 0x61;
 13226                           
 13227                           ;incstack = 0
 13228                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 13229  0843  3061               	movlw	97
 13230  0844  0032               	movlb	18	; select bank18
 13231  0845  0099               	movwf	25	;volatile
 13232                           
 13233                           ;mcc_generated_files/mcc.c: 69:     OSCCON3 = 0x00;
 13234  0846  019B               	clrf	27	;volatile
 13235                           
 13236                           ;mcc_generated_files/mcc.c: 71:     OSCEN = 0x00;
 13237  0847  019D               	clrf	29	;volatile
 13238                           
 13239                           ;mcc_generated_files/mcc.c: 73:     OSCFRQ = 0x00;
 13240  0848  019F               	clrf	31	;volatile
 13241                           
 13242                           ;mcc_generated_files/mcc.c: 75:     OSCTUNE = 0x00;
 13243  0849  019E               	clrf	30	;volatile
 13244  084A  0008               	return
 13245  084B                     __end_of_OSCILLATOR_Initialize:	
 13246                           
 13247                           	psect	text58
 13248  0DA1                     __ptext58:	
 13249 ;; *************** function _EUSART_Initialize *****************
 13250 ;; Defined at:
 13251 ;;		line 85 in file "mcc_generated_files/eusart.c"
 13252 ;; Parameters:    Size  Location     Type
 13253 ;;		None
 13254 ;; Auto vars:     Size  Location     Type
 13255 ;;		None
 13256 ;; Return value:  Size  Location     Type
 13257 ;;                  1    wreg      void 
 13258 ;; Registers used:
 13259 ;;		wreg, status,2, status,0, pclath, cstack
 13260 ;; Tracked objects:
 13261 ;;		On entry : 0/0
 13262 ;;		On exit  : 0/0
 13263 ;;		Unchanged: 0/0
 13264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13265 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13266 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13267 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13268 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13269 ;;Total ram usage:        1 bytes
 13270 ;; Hardware stack levels used:    1
 13271 ;; Hardware stack levels required when called:    6
 13272 ;; This function calls:
 13273 ;;		_EUSART_SetErrorHandler
 13274 ;;		_EUSART_SetFramingErrorHandler
 13275 ;;		_EUSART_SetOverrunErrorHandler
 13276 ;;		_EUSART_SetRxInterruptHandler
 13277 ;;		_EUSART_SetTxInterruptHandler
 13278 ;; This function is called by:
 13279 ;;		_SYSTEM_Initialize
 13280 ;; This function uses a non-reentrant model
 13281 ;;
 13282                           
 13283                           
 13284                           ;psect for function _EUSART_Initialize
 13285  0DA1                     _EUSART_Initialize:	
 13286                           
 13287                           ;mcc_generated_files/eusart.c: 88:     PIE1bits.RCIE = 0;
 13288                           
 13289                           ;incstack = 0
 13290                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
 13291  0DA1  0021               	movlb	1	; select bank1
 13292  0DA2  1291               	bcf	17,5	;volatile
 13293                           
 13294                           ;mcc_generated_files/eusart.c: 89:     EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
 13295  0DA3  30B0               	movlw	low _EUSART_Receive_ISR
 13296  0DA4  0020               	movlb	0	; select bank0
 13297  0DA5  00A0               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
 13298  0DA6  300C               	movlw	high _EUSART_Receive_ISR
 13299  0DA7  00A1               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
 13300  0DA8  3188  207E  318D   	fcall	_EUSART_SetRxInterruptHandler
 13301                           
 13302                           ;mcc_generated_files/eusart.c: 90:     PIE1bits.TXIE = 0;
 13303  0DAB  0021               	movlb	1	; select bank1
 13304  0DAC  1211               	bcf	17,4	;volatile
 13305                           
 13306                           ;mcc_generated_files/eusart.c: 91:     EUSART_SetTxInterruptHandler(EUSART_Transmit_ISR)
      +                          ;
 13307  0DAD  301F               	movlw	low _EUSART_Transmit_ISR
 13308  0DAE  0020               	movlb	0	; select bank0
 13309  0DAF  00A0               	movwf	EUSART_SetTxInterruptHandler@interruptHandler
 13310  0DB0  300A               	movlw	high _EUSART_Transmit_ISR
 13311  0DB1  00A1               	movwf	EUSART_SetTxInterruptHandler@interruptHandler+1
 13312  0DB2  3188  2087  318D   	fcall	_EUSART_SetTxInterruptHandler
 13313                           
 13314                           ;mcc_generated_files/eusart.c: 95:     BAUD1CON = 0x0A;
 13315  0DB5  300A               	movlw	10
 13316  0DB6  0023               	movlb	3	; select bank3
 13317  0DB7  009F               	movwf	31	;volatile
 13318                           
 13319                           ;mcc_generated_files/eusart.c: 98:     RC1STA = 0x90;
 13320  0DB8  3090               	movlw	144
 13321  0DB9  009D               	movwf	29	;volatile
 13322                           
 13323                           ;mcc_generated_files/eusart.c: 101:     TX1STA = 0x24;
 13324  0DBA  3024               	movlw	36
 13325  0DBB  009E               	movwf	30	;volatile
 13326                           
 13327                           ;mcc_generated_files/eusart.c: 104:     SP1BRGL = 0x0C;
 13328  0DBC  300C               	movlw	12
 13329  0DBD  009B               	movwf	27	;volatile
 13330                           
 13331                           ;mcc_generated_files/eusart.c: 107:     SP1BRGH = 0x00;
 13332  0DBE  019C               	clrf	28	;volatile
 13333                           
 13334                           ;mcc_generated_files/eusart.c: 110:     EUSART_SetFramingErrorHandler(EUSART_DefaultFram
      +                          ingErrorHandler);
 13335  0DBF  3084               	movlw	low _EUSART_DefaultFramingErrorHandler
 13336  0DC0  0020               	movlb	0	; select bank0
 13337  0DC1  00A0               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
 13338  0DC2  3017               	movlw	high _EUSART_DefaultFramingErrorHandler
 13339  0DC3  00A1               	movwf	EUSART_SetFramingErrorHandler@interruptHandler+1
 13340  0DC4  3188  206C  318D   	fcall	_EUSART_SetFramingErrorHandler
 13341                           
 13342                           ;mcc_generated_files/eusart.c: 111:     EUSART_SetOverrunErrorHandler(EUSART_DefaultOver
      +                          runErrorHandler);
 13343  0DC7  30BA               	movlw	low _EUSART_DefaultOverrunErrorHandler
 13344  0DC8  0020               	movlb	0	; select bank0
 13345  0DC9  00A0               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
 13346  0DCA  3017               	movlw	high _EUSART_DefaultOverrunErrorHandler
 13347  0DCB  00A1               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler+1
 13348  0DCC  3188  2075  318D   	fcall	_EUSART_SetOverrunErrorHandler
 13349                           
 13350                           ;mcc_generated_files/eusart.c: 112:     EUSART_SetErrorHandler(EUSART_DefaultErrorHandle
      +                          r);
 13351  0DCF  308A               	movlw	low _EUSART_DefaultErrorHandler
 13352  0DD0  0020               	movlb	0	; select bank0
 13353  0DD1  00A0               	movwf	EUSART_SetErrorHandler@interruptHandler
 13354  0DD2  3017               	movlw	high _EUSART_DefaultErrorHandler
 13355  0DD3  00A1               	movwf	EUSART_SetErrorHandler@interruptHandler+1
 13356  0DD4  3188  2063         	fcall	_EUSART_SetErrorHandler
 13357                           
 13358                           ;mcc_generated_files/eusart.c: 114:     eusartRxLastError.status = 0;
 13359  0DD6  01F0               	clrf	_eusartRxLastError	;volatile
 13360                           
 13361                           ;mcc_generated_files/eusart.c: 117:     eusartTxHead = 0;
 13362  0DD7  01F5               	clrf	_eusartTxHead	;volatile
 13363                           
 13364                           ;mcc_generated_files/eusart.c: 118:     eusartTxTail = 0;
 13365  0DD8  01F4               	clrf	_eusartTxTail	;volatile
 13366                           
 13367                           ;mcc_generated_files/eusart.c: 119:     eusartTxBufferRemaining = sizeof(eusartTxBuffer)
      +                          ;
 13368  0DD9  3008               	movlw	8
 13369  0DDA  0020               	movlb	0	; select bank0
 13370  0DDB  00A2               	movwf	??_EUSART_Initialize
 13371  0DDC  0822               	movf	??_EUSART_Initialize,w
 13372  0DDD  00EE               	movwf	_eusartTxBufferRemaining	;volatile
 13373                           
 13374                           ;mcc_generated_files/eusart.c: 121:     eusartRxHead = 0;
 13375  0DDE  01F3               	clrf	_eusartRxHead	;volatile
 13376                           
 13377                           ;mcc_generated_files/eusart.c: 122:     eusartRxTail = 0;
 13378  0DDF  01F2               	clrf	_eusartRxTail	;volatile
 13379                           
 13380                           ;mcc_generated_files/eusart.c: 123:     eusartRxCount = 0;
 13381  0DE0  01F1               	clrf	_eusartRxCount	;volatile
 13382                           
 13383                           ;mcc_generated_files/eusart.c: 126:     PIE1bits.RCIE = 1;
 13384  0DE1  0021               	movlb	1	; select bank1
 13385  0DE2  1691               	bsf	17,5	;volatile
 13386  0DE3  0008               	return
 13387  0DE4                     __end_of_EUSART_Initialize:	
 13388                           
 13389                           	psect	text59
 13390  0887                     __ptext59:	
 13391 ;; *************** function _EUSART_SetTxInterruptHandler *****************
 13392 ;; Defined at:
 13393 ;;		line 284 in file "mcc_generated_files/eusart.c"
 13394 ;; Parameters:    Size  Location     Type
 13395 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
 13396 ;;		 -> EUSART_Transmit_ISR(1), 
 13397 ;; Auto vars:     Size  Location     Type
 13398 ;;		None
 13399 ;; Return value:  Size  Location     Type
 13400 ;;                  1    wreg      void 
 13401 ;; Registers used:
 13402 ;;		wreg
 13403 ;; Tracked objects:
 13404 ;;		On entry : 0/0
 13405 ;;		On exit  : 0/0
 13406 ;;		Unchanged: 0/0
 13407 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13408 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13409 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13410 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13411 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13412 ;;Total ram usage:        2 bytes
 13413 ;; Hardware stack levels used:    1
 13414 ;; Hardware stack levels required when called:    5
 13415 ;; This function calls:
 13416 ;;		Nothing
 13417 ;; This function is called by:
 13418 ;;		_EUSART_Initialize
 13419 ;; This function uses a non-reentrant model
 13420 ;;
 13421                           
 13422                           
 13423                           ;psect for function _EUSART_SetTxInterruptHandler
 13424  0887                     _EUSART_SetTxInterruptHandler:	
 13425                           
 13426                           ;mcc_generated_files/eusart.c: 285:     EUSART_TxDefaultInterruptHandler = interruptHand
      +                          ler;
 13427                           
 13428                           ;incstack = 0
 13429                           ; Regs used in _EUSART_SetTxInterruptHandler: [wreg]
 13430  0887  0020               	movlb	0	; select bank0
 13431  0888  0821               	movf	EUSART_SetTxInterruptHandler@interruptHandler+1,w
 13432  0889  0022               	movlb	2	; select bank2
 13433  088A  00EF               	movwf	(_EUSART_TxDefaultInterruptHandler+1)^(0+256)
 13434  088B  0020               	movlb	0	; select bank0
 13435  088C  0820               	movf	EUSART_SetTxInterruptHandler@interruptHandler,w
 13436  088D  0022               	movlb	2	; select bank2
 13437  088E  00EE               	movwf	_EUSART_TxDefaultInterruptHandler^(0+256)
 13438  088F  0008               	return
 13439  0890                     __end_of_EUSART_SetTxInterruptHandler:	
 13440                           
 13441                           	psect	text60
 13442  087E                     __ptext60:	
 13443 ;; *************** function _EUSART_SetRxInterruptHandler *****************
 13444 ;; Defined at:
 13445 ;;		line 288 in file "mcc_generated_files/eusart.c"
 13446 ;; Parameters:    Size  Location     Type
 13447 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
 13448 ;;		 -> EUSART_Receive_ISR(1), 
 13449 ;; Auto vars:     Size  Location     Type
 13450 ;;		None
 13451 ;; Return value:  Size  Location     Type
 13452 ;;                  1    wreg      void 
 13453 ;; Registers used:
 13454 ;;		wreg
 13455 ;; Tracked objects:
 13456 ;;		On entry : 0/0
 13457 ;;		On exit  : 0/0
 13458 ;;		Unchanged: 0/0
 13459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13460 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13461 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13462 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13463 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13464 ;;Total ram usage:        2 bytes
 13465 ;; Hardware stack levels used:    1
 13466 ;; Hardware stack levels required when called:    5
 13467 ;; This function calls:
 13468 ;;		Nothing
 13469 ;; This function is called by:
 13470 ;;		_EUSART_Initialize
 13471 ;; This function uses a non-reentrant model
 13472 ;;
 13473                           
 13474                           
 13475                           ;psect for function _EUSART_SetRxInterruptHandler
 13476  087E                     _EUSART_SetRxInterruptHandler:	
 13477                           
 13478                           ;mcc_generated_files/eusart.c: 289:     EUSART_RxDefaultInterruptHandler = interruptHand
      +                          ler;
 13479                           
 13480                           ;incstack = 0
 13481                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
 13482  087E  0020               	movlb	0	; select bank0
 13483  087F  0821               	movf	EUSART_SetRxInterruptHandler@interruptHandler+1,w
 13484  0880  0022               	movlb	2	; select bank2
 13485  0881  00ED               	movwf	(_EUSART_RxDefaultInterruptHandler+1)^(0+256)
 13486  0882  0020               	movlb	0	; select bank0
 13487  0883  0820               	movf	EUSART_SetRxInterruptHandler@interruptHandler,w
 13488  0884  0022               	movlb	2	; select bank2
 13489  0885  00EC               	movwf	_EUSART_RxDefaultInterruptHandler^(0+256)
 13490  0886  0008               	return
 13491  0887                     __end_of_EUSART_SetRxInterruptHandler:	
 13492                           
 13493                           	psect	text61
 13494  0875                     __ptext61:	
 13495 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
 13496 ;; Defined at:
 13497 ;;		line 276 in file "mcc_generated_files/eusart.c"
 13498 ;; Parameters:    Size  Location     Type
 13499 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
 13500 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
 13501 ;; Auto vars:     Size  Location     Type
 13502 ;;		None
 13503 ;; Return value:  Size  Location     Type
 13504 ;;                  1    wreg      void 
 13505 ;; Registers used:
 13506 ;;		wreg
 13507 ;; Tracked objects:
 13508 ;;		On entry : 0/0
 13509 ;;		On exit  : 0/0
 13510 ;;		Unchanged: 0/0
 13511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13512 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13513 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13514 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13515 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13516 ;;Total ram usage:        2 bytes
 13517 ;; Hardware stack levels used:    1
 13518 ;; Hardware stack levels required when called:    5
 13519 ;; This function calls:
 13520 ;;		Nothing
 13521 ;; This function is called by:
 13522 ;;		_EUSART_Initialize
 13523 ;; This function uses a non-reentrant model
 13524 ;;
 13525                           
 13526                           
 13527                           ;psect for function _EUSART_SetOverrunErrorHandler
 13528  0875                     _EUSART_SetOverrunErrorHandler:	
 13529                           
 13530                           ;mcc_generated_files/eusart.c: 277:     EUSART_OverrunErrorHandler = interruptHandler;
 13531                           
 13532                           ;incstack = 0
 13533                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
 13534  0875  0020               	movlb	0	; select bank0
 13535  0876  0821               	movf	EUSART_SetOverrunErrorHandler@interruptHandler+1,w
 13536  0877  0023               	movlb	3	; select bank3
 13537  0878  00D8               	movwf	(_EUSART_OverrunErrorHandler+1)^(0+384)
 13538  0879  0020               	movlb	0	; select bank0
 13539  087A  0820               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
 13540  087B  0023               	movlb	3	; select bank3
 13541  087C  00D7               	movwf	_EUSART_OverrunErrorHandler^(0+384)
 13542  087D  0008               	return
 13543  087E                     __end_of_EUSART_SetOverrunErrorHandler:	
 13544                           
 13545                           	psect	text62
 13546  086C                     __ptext62:	
 13547 ;; *************** function _EUSART_SetFramingErrorHandler *****************
 13548 ;; Defined at:
 13549 ;;		line 272 in file "mcc_generated_files/eusart.c"
 13550 ;; Parameters:    Size  Location     Type
 13551 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
 13552 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
 13553 ;; Auto vars:     Size  Location     Type
 13554 ;;		None
 13555 ;; Return value:  Size  Location     Type
 13556 ;;                  1    wreg      void 
 13557 ;; Registers used:
 13558 ;;		wreg
 13559 ;; Tracked objects:
 13560 ;;		On entry : 0/0
 13561 ;;		On exit  : 0/0
 13562 ;;		Unchanged: 0/0
 13563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13564 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13565 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13566 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13567 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13568 ;;Total ram usage:        2 bytes
 13569 ;; Hardware stack levels used:    1
 13570 ;; Hardware stack levels required when called:    5
 13571 ;; This function calls:
 13572 ;;		Nothing
 13573 ;; This function is called by:
 13574 ;;		_EUSART_Initialize
 13575 ;; This function uses a non-reentrant model
 13576 ;;
 13577                           
 13578                           
 13579                           ;psect for function _EUSART_SetFramingErrorHandler
 13580  086C                     _EUSART_SetFramingErrorHandler:	
 13581                           
 13582                           ;mcc_generated_files/eusart.c: 273:     EUSART_FramingErrorHandler = interruptHandler;
 13583                           
 13584                           ;incstack = 0
 13585                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
 13586  086C  0020               	movlb	0	; select bank0
 13587  086D  0821               	movf	EUSART_SetFramingErrorHandler@interruptHandler+1,w
 13588  086E  0022               	movlb	2	; select bank2
 13589  086F  00EB               	movwf	(_EUSART_FramingErrorHandler+1)^(0+256)
 13590  0870  0020               	movlb	0	; select bank0
 13591  0871  0820               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
 13592  0872  0022               	movlb	2	; select bank2
 13593  0873  00EA               	movwf	_EUSART_FramingErrorHandler^(0+256)
 13594  0874  0008               	return
 13595  0875                     __end_of_EUSART_SetFramingErrorHandler:	
 13596                           
 13597                           	psect	text63
 13598  0863                     __ptext63:	
 13599 ;; *************** function _EUSART_SetErrorHandler *****************
 13600 ;; Defined at:
 13601 ;;		line 280 in file "mcc_generated_files/eusart.c"
 13602 ;; Parameters:    Size  Location     Type
 13603 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
 13604 ;;		 -> EUSART_DefaultErrorHandler(1), 
 13605 ;; Auto vars:     Size  Location     Type
 13606 ;;		None
 13607 ;; Return value:  Size  Location     Type
 13608 ;;                  1    wreg      void 
 13609 ;; Registers used:
 13610 ;;		wreg
 13611 ;; Tracked objects:
 13612 ;;		On entry : 0/0
 13613 ;;		On exit  : 0/0
 13614 ;;		Unchanged: 0/0
 13615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13616 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13617 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13619 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13620 ;;Total ram usage:        2 bytes
 13621 ;; Hardware stack levels used:    1
 13622 ;; Hardware stack levels required when called:    5
 13623 ;; This function calls:
 13624 ;;		Nothing
 13625 ;; This function is called by:
 13626 ;;		_EUSART_Initialize
 13627 ;; This function uses a non-reentrant model
 13628 ;;
 13629                           
 13630                           
 13631                           ;psect for function _EUSART_SetErrorHandler
 13632  0863                     _EUSART_SetErrorHandler:	
 13633                           
 13634                           ;mcc_generated_files/eusart.c: 281:     EUSART_ErrorHandler = interruptHandler;
 13635                           
 13636                           ;incstack = 0
 13637                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
 13638  0863  0020               	movlb	0	; select bank0
 13639  0864  0821               	movf	EUSART_SetErrorHandler@interruptHandler+1,w
 13640  0865  0023               	movlb	3	; select bank3
 13641  0866  00D6               	movwf	(_EUSART_ErrorHandler+1)^(0+384)
 13642  0867  0020               	movlb	0	; select bank0
 13643  0868  0820               	movf	EUSART_SetErrorHandler@interruptHandler,w
 13644  0869  0023               	movlb	3	; select bank3
 13645  086A  00D5               	movwf	_EUSART_ErrorHandler^(0+384)
 13646  086B  0008               	return
 13647  086C                     __end_of_EUSART_SetErrorHandler:	
 13648                           
 13649                           	psect	text64
 13650  083B                     __ptext64:	
 13651 ;; *************** function _ADC_Initialize *****************
 13652 ;; Defined at:
 13653 ;;		line 65 in file "mcc_generated_files/adc.c"
 13654 ;; Parameters:    Size  Location     Type
 13655 ;;		None
 13656 ;; Auto vars:     Size  Location     Type
 13657 ;;		None
 13658 ;; Return value:  Size  Location     Type
 13659 ;;                  1    wreg      void 
 13660 ;; Registers used:
 13661 ;;		wreg, status,2
 13662 ;; Tracked objects:
 13663 ;;		On entry : 0/0
 13664 ;;		On exit  : 0/0
 13665 ;;		Unchanged: 0/0
 13666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13667 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13668 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13669 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13670 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13671 ;;Total ram usage:        0 bytes
 13672 ;; Hardware stack levels used:    1
 13673 ;; Hardware stack levels required when called:    5
 13674 ;; This function calls:
 13675 ;;		Nothing
 13676 ;; This function is called by:
 13677 ;;		_SYSTEM_Initialize
 13678 ;; This function uses a non-reentrant model
 13679 ;;
 13680                           
 13681                           
 13682                           ;psect for function _ADC_Initialize
 13683  083B                     _ADC_Initialize:	
 13684                           
 13685                           ;mcc_generated_files/adc.c: 70:     ADCON0 = 0x01;
 13686                           
 13687                           ;incstack = 0
 13688                           ; Regs used in _ADC_Initialize: [wreg+status,2]
 13689  083B  3001               	movlw	1
 13690  083C  0021               	movlb	1	; select bank1
 13691  083D  009D               	movwf	29	;volatile
 13692                           
 13693                           ;mcc_generated_files/adc.c: 73:     ADCON1 = 0x00;
 13694  083E  019E               	clrf	30	;volatile
 13695                           
 13696                           ;mcc_generated_files/adc.c: 76:     ADACT = 0x00;
 13697  083F  019F               	clrf	31	;volatile
 13698                           
 13699                           ;mcc_generated_files/adc.c: 79:     ADRESL = 0x00;
 13700  0840  019B               	clrf	27	;volatile
 13701                           
 13702                           ;mcc_generated_files/adc.c: 82:     ADRESH = 0x00;
 13703  0841  019C               	clrf	28	;volatile
 13704  0842  0008               	return
 13705  0843                     __end_of_ADC_Initialize:	
 13706                           
 13707                           	psect	text65
 13708  08D7                     __ptext65:	
 13709 ;; *************** function _PIR_Sensor *****************
 13710 ;; Defined at:
 13711 ;;		line 294 in file "main.c"
 13712 ;; Parameters:    Size  Location     Type
 13713 ;;		None
 13714 ;; Auto vars:     Size  Location     Type
 13715 ;;		None
 13716 ;; Return value:  Size  Location     Type
 13717 ;;                  1    wreg      _Bool 
 13718 ;; Registers used:
 13719 ;;		wreg, status,2
 13720 ;; Tracked objects:
 13721 ;;		On entry : 0/0
 13722 ;;		On exit  : 0/0
 13723 ;;		Unchanged: 0/0
 13724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13725 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13726 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13727 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13728 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13729 ;;Total ram usage:        0 bytes
 13730 ;; Hardware stack levels used:    1
 13731 ;; Hardware stack levels required when called:    5
 13732 ;; This function calls:
 13733 ;;		Nothing
 13734 ;; This function is called by:
 13735 ;;		_main
 13736 ;; This function uses a non-reentrant model
 13737 ;;
 13738                           
 13739                           
 13740                           ;psect for function _PIR_Sensor
 13741  08D7                     _PIR_Sensor:	
 13742                           
 13743                           ;main.c: 296:     if(PORTCbits.RC3 >= 1){
 13744                           
 13745                           ;incstack = 0
 13746                           ; Regs used in _PIR_Sensor: [wreg+status,2]
 13747  08D7  0020               	movlb	0	; select bank0
 13748  08D8  1D8E               	btfss	14,3	;volatile
 13749  08D9  28E1               	goto	l7316
 13750                           
 13751                           ;main.c: 297:         prox = 1;
 13752  08DA  3001               	movlw	1
 13753  08DB  0021               	movlb	1	; select bank1
 13754  08DC  00E4               	movwf	_prox^(0+128)
 13755  08DD  3000               	movlw	0
 13756  08DE  00E5               	movwf	(_prox^(0+128)+1)
 13757                           
 13758                           ;main.c: 298:         return 1;
 13759  08DF  3001               	movlw	1
 13760  08E0  0008               	return
 13761  08E1                     l7316:	
 13762                           
 13763                           ;main.c: 301:         prox = 0;
 13764  08E1  0021               	movlb	1	; select bank1
 13765  08E2  01E4               	clrf	_prox^(0+128)
 13766  08E3  01E5               	clrf	(_prox+1)^(0+128)
 13767                           
 13768                           ;main.c: 302:         return 0;
 13769  08E4  3000               	movlw	0
 13770  08E5  0008               	return
 13771  08E6                     __end_of_PIR_Sensor:	
 13772                           
 13773                           	psect	text66
 13774  0DE4                     __ptext66:	
 13775 ;; *************** function _On_Off *****************
 13776 ;; Defined at:
 13777 ;;		line 274 in file "main.c"
 13778 ;; Parameters:    Size  Location     Type
 13779 ;;		None
 13780 ;; Auto vars:     Size  Location     Type
 13781 ;;  val             2    7[BANK0 ] int 
 13782 ;; Return value:  Size  Location     Type
 13783 ;;                  1    wreg      _Bool 
 13784 ;; Registers used:
 13785 ;;		wreg, status,2, status,0, pclath, cstack
 13786 ;; Tracked objects:
 13787 ;;		On entry : 0/0
 13788 ;;		On exit  : 0/0
 13789 ;;		Unchanged: 0/0
 13790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13791 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13792 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13793 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13794 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13795 ;;Total ram usage:        5 bytes
 13796 ;; Hardware stack levels used:    1
 13797 ;; Hardware stack levels required when called:    8
 13798 ;; This function calls:
 13799 ;;		_ADC_GetConversion
 13800 ;;		_Display_Clear
 13801 ;; This function is called by:
 13802 ;;		_main
 13803 ;; This function uses a non-reentrant model
 13804 ;;
 13805                           
 13806                           
 13807                           ;psect for function _On_Off
 13808  0DE4                     _On_Off:	
 13809                           
 13810                           ;main.c: 275:     adcResult = ADC_GetConversion(BTN) >> 6;
 13811                           
 13812                           ;incstack = 0
 13813                           ; Regs used in _On_Off: [wreg+status,2+status,0+pclath+cstack]
 13814  0DE4  3017               	movlw	23
 13815  0DE5  318A  223D  318D   	fcall	_ADC_GetConversion
 13816  0DE8  0020               	movlb	0	; select bank0
 13817  0DE9  0820               	movf	?_ADC_GetConversion,w
 13818  0DEA  00A4               	movwf	??_On_Off
 13819  0DEB  0821               	movf	?_ADC_GetConversion+1,w
 13820  0DEC  00A5               	movwf	??_On_Off+1
 13821  0DED  3006               	movlw	6
 13822  0DEE                     u6655:	
 13823  0DEE  36A5               	lsrf	??_On_Off+1,f
 13824  0DEF  0CA4               	rrf	??_On_Off,f
 13825  0DF0  0B89               	decfsz	9,f
 13826  0DF1  2DEE               	goto	u6655
 13827  0DF2  0824               	movf	??_On_Off,w
 13828  0DF3  00A6               	movwf	??_On_Off+2
 13829  0DF4  0826               	movf	??_On_Off+2,w
 13830  0DF5  00EC               	movwf	_adcResult
 13831                           
 13832                           ;main.c: 276:     int val = adcResult;
 13833  0DF6  086C               	movf	_adcResult,w
 13834  0DF7  00A4               	movwf	??_On_Off
 13835  0DF8  01A5               	clrf	??_On_Off+1
 13836  0DF9  0824               	movf	??_On_Off,w
 13837  0DFA  00A7               	movwf	On_Off@val
 13838  0DFB  0825               	movf	??_On_Off+1,w
 13839  0DFC  00A8               	movwf	On_Off@val+1
 13840                           
 13841                           ;main.c: 277:     if(val >= 240 && val <= 254) {
 13842  0DFD  0828               	movf	On_Off@val+1,w
 13843  0DFE  3A80               	xorlw	128
 13844  0DFF  00A4               	movwf	??_On_Off
 13845  0E00  3080               	movlw	128
 13846  0E01  0224               	subwf	??_On_Off,w
 13847  0E02  1D03               	skipz
 13848  0E03  2E06               	goto	u6665
 13849  0E04  30F0               	movlw	240
 13850  0E05  0227               	subwf	On_Off@val,w
 13851  0E06                     u6665:	
 13852  0E06  1C03               	skipc
 13853  0E07  0008               	return
 13854  0E08  0020               	movlb	0	; select bank0
 13855  0E09  0828               	movf	On_Off@val+1,w
 13856  0E0A  3A80               	xorlw	128
 13857  0E0B  00A4               	movwf	??_On_Off
 13858  0E0C  3080               	movlw	128
 13859  0E0D  0224               	subwf	??_On_Off,w
 13860  0E0E  1D03               	skipz
 13861  0E0F  2E12               	goto	u6675
 13862  0E10  30FF               	movlw	255
 13863  0E11  0227               	subwf	On_Off@val,w
 13864  0E12                     u6675:	
 13865  0E12  1803               	skipnc
 13866  0E13  0008               	return
 13867                           
 13868                           ;main.c: 278:         if(on == 0) {
 13869  0E14  0020               	movlb	0	; select bank0
 13870  0E15  085C               	movf	_on,w
 13871  0E16  045D               	iorwf	_on+1,w
 13872  0E17  1D03               	btfss	3,2
 13873  0E18  2E1E               	goto	l7544
 13874                           
 13875                           ;main.c: 279:             on = 1;
 13876  0E19  3001               	movlw	1
 13877  0E1A  00DC               	movwf	_on
 13878  0E1B  3000               	movlw	0
 13879  0E1C  00DD               	movwf	_on+1
 13880  0E1D  0008               	return
 13881  0E1E                     l7544:	
 13882                           
 13883                           ;main.c: 283:             on = 0;
 13884  0E1E  01DC               	clrf	_on
 13885  0E1F  01DD               	clrf	_on+1
 13886                           
 13887                           ;main.c: 284:             Display_Clear();
 13888  0E20  3188  20E6         	fcall	_Display_Clear
 13889                           
 13890                           ;main.c: 285:             start = 1;
 13891  0E22  0020               	movlb	0	; select bank0
 13892  0E23  01EF               	clrf	_start
 13893  0E24  0AEF               	incf	_start,f
 13894                           
 13895                           ;main.c: 286:             name = 0;
 13896  0E25  01E0               	clrf	_name
 13897  0E26  01E1               	clrf	_name+1
 13898  0E27  0008               	return
 13899  0E28                     __end_of_On_Off:	
 13900                           
 13901                           	psect	text67
 13902  08E6                     __ptext67:	
 13903 ;; *************** function _Display_Clear *****************
 13904 ;; Defined at:
 13905 ;;		line 210 in file "main.c"
 13906 ;; Parameters:    Size  Location     Type
 13907 ;;		None
 13908 ;; Auto vars:     Size  Location     Type
 13909 ;;		None
 13910 ;; Return value:  Size  Location     Type
 13911 ;;                  1    wreg      void 
 13912 ;; Registers used:
 13913 ;;		wreg, status,2, status,0, pclath, cstack
 13914 ;; Tracked objects:
 13915 ;;		On entry : 0/0
 13916 ;;		On exit  : 0/0
 13917 ;;		Unchanged: 0/0
 13918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13919 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13920 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13921 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13922 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13923 ;;Total ram usage:        1 bytes
 13924 ;; Hardware stack levels used:    1
 13925 ;; Hardware stack levels required when called:    7
 13926 ;; This function calls:
 13927 ;;		_SPI_Write
 13928 ;; This function is called by:
 13929 ;;		_main
 13930 ;;		_On_Off
 13931 ;; This function uses a non-reentrant model
 13932 ;;
 13933                           
 13934                           
 13935                           ;psect for function _Display_Clear
 13936  08E6                     _Display_Clear:	
 13937                           
 13938                           ;main.c: 211:     SPI_Write(0xFE);
 13939                           
 13940                           ;incstack = 0
 13941                           ; Regs used in _Display_Clear: [wreg+status,2+status,0+pclath+cstack]
 13942  08E6  30FE               	movlw	254
 13943  08E7  3189  2156  3188   	fcall	_SPI_Write
 13944                           
 13945                           ;main.c: 212:     _delay((unsigned long)((100)*(500000/4000.0)));
 13946  08EA  3011               	movlw	17
 13947  08EB  0020               	movlb	0	; select bank0
 13948  08EC  00A3               	movwf	??_Display_Clear
 13949  08ED  303A               	movlw	58
 13950  08EE                     u7087:	
 13951  08EE  0B89               	decfsz	9,f
 13952  08EF  28EE               	goto	u7087
 13953  08F0  0BA3               	decfsz	??_Display_Clear,f
 13954  08F1  28EE               	goto	u7087
 13955  08F2  0000               	nop
 13956                           
 13957                           ;main.c: 213:     SPI_Write(0x51);
 13958  08F3  3051               	movlw	81
 13959  08F4  3189  2156         	fcall	_SPI_Write
 13960  08F6  0008               	return
 13961  08F7                     __end_of_Display_Clear:	
 13962                           
 13963                           	psect	text68
 13964  0956                     __ptext68:	
 13965 ;; *************** function _SPI_Write *****************
 13966 ;; Defined at:
 13967 ;;		line 190 in file "main.c"
 13968 ;; Parameters:    Size  Location     Type
 13969 ;;  incoming        1    wreg     unsigned char 
 13970 ;; Auto vars:     Size  Location     Type
 13971 ;;  incoming        1    2[BANK0 ] unsigned char 
 13972 ;; Return value:  Size  Location     Type
 13973 ;;                  1    wreg      void 
 13974 ;; Registers used:
 13975 ;;		wreg, status,2, status,0, pclath, cstack
 13976 ;; Tracked objects:
 13977 ;;		On entry : 0/0
 13978 ;;		On exit  : 0/0
 13979 ;;		Unchanged: 0/0
 13980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13981 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13982 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13983 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13984 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13985 ;;Total ram usage:        2 bytes
 13986 ;; Hardware stack levels used:    1
 13987 ;; Hardware stack levels required when called:    6
 13988 ;; This function calls:
 13989 ;;		_SPI2_Exchange8bit
 13990 ;; This function is called by:
 13991 ;;		_Display_Name
 13992 ;;		_Display_Clear
 13993 ;; This function uses a non-reentrant model
 13994 ;;
 13995                           
 13996                           
 13997                           ;psect for function _SPI_Write
 13998  0956                     _SPI_Write:	
 13999                           
 14000                           ;incstack = 0
 14001                           ; Regs used in _SPI_Write: [wreg+status,2+status,0+pclath+cstack]
 14002                           ;SPI_Write@incoming stored from wreg
 14003  0956  0020               	movlb	0	; select bank0
 14004  0957  00A2               	movwf	SPI_Write@incoming
 14005                           
 14006                           ;main.c: 191:     do { LATCbits.LATC0 = 0; } while(0);
 14007  0958  0022               	movlb	2	; select bank2
 14008  0959  100E               	bcf	14,0	;volatile
 14009                           
 14010                           ;main.c: 192:     SPI2_Exchange8bit(incoming);
 14011  095A  0020               	movlb	0	; select bank0
 14012  095B  0822               	movf	SPI_Write@incoming,w
 14013  095C  3188  20C8  3189   	fcall	_SPI2_Exchange8bit
 14014  095F  0022               	movlb	2	; select bank2
 14015  0960  140E               	bsf	14,0	;volatile
 14016                           
 14017                           ;main.c: 194:     _delay((unsigned long)((100)*(500000/4000.0)));
 14018  0961  3011               	movlw	17
 14019  0962  0020               	movlb	0	; select bank0
 14020  0963  00A1               	movwf	??_SPI_Write
 14021  0964  303A               	movlw	58
 14022  0965                     u7097:	
 14023  0965  0B89               	decfsz	9,f
 14024  0966  2965               	goto	u7097
 14025  0967  0BA1               	decfsz	??_SPI_Write,f
 14026  0968  2965               	goto	u7097
 14027  0969  0000               	nop
 14028  096A  0008               	return
 14029  096B                     __end_of_SPI_Write:	
 14030                           
 14031                           	psect	text69
 14032  08C8                     __ptext69:	
 14033 ;; *************** function _SPI2_Exchange8bit *****************
 14034 ;; Defined at:
 14035 ;;		line 79 in file "mcc_generated_files/spi2.c"
 14036 ;; Parameters:    Size  Location     Type
 14037 ;;  data            1    wreg     unsigned char 
 14038 ;; Auto vars:     Size  Location     Type
 14039 ;;  data            1    0[BANK0 ] unsigned char 
 14040 ;; Return value:  Size  Location     Type
 14041 ;;                  1    wreg      unsigned char 
 14042 ;; Registers used:
 14043 ;;		wreg
 14044 ;; Tracked objects:
 14045 ;;		On entry : 0/0
 14046 ;;		On exit  : 0/0
 14047 ;;		Unchanged: 0/0
 14048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14049 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14050 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14051 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14052 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14053 ;;Total ram usage:        1 bytes
 14054 ;; Hardware stack levels used:    1
 14055 ;; Hardware stack levels required when called:    5
 14056 ;; This function calls:
 14057 ;;		Nothing
 14058 ;; This function is called by:
 14059 ;;		_SPI_Write
 14060 ;;		_SPI2_Exchange8bitBuffer
 14061 ;; This function uses a non-reentrant model
 14062 ;;
 14063                           
 14064                           
 14065                           ;psect for function _SPI2_Exchange8bit
 14066  08C8                     _SPI2_Exchange8bit:	
 14067                           
 14068                           ;incstack = 0
 14069                           ; Regs used in _SPI2_Exchange8bit: [wreg]
 14070                           ;SPI2_Exchange8bit@data stored from wreg
 14071  08C8  0020               	movlb	0	; select bank0
 14072  08C9  00A0               	movwf	SPI2_Exchange8bit@data
 14073                           
 14074                           ;mcc_generated_files/spi2.c: 79: uint8_t SPI2_Exchange8bit(uint8_t data);mcc_generated_f
      +                          iles/spi2.c: 80: {;mcc_generated_files/spi2.c: 82:     SSP2CON1bits.WCOL = 0;
 14075  08CA  0024               	movlb	4	; select bank4
 14076  08CB  139D               	bcf	29,7	;volatile
 14077                           
 14078                           ;mcc_generated_files/spi2.c: 84:     SSP2BUF = data;
 14079  08CC  0020               	movlb	0	; select bank0
 14080  08CD  0820               	movf	SPI2_Exchange8bit@data,w
 14081  08CE  0024               	movlb	4	; select bank4
 14082  08CF  0099               	movwf	25	;volatile
 14083  08D0                     l554:	
 14084                           ;mcc_generated_files/spi2.c: 89:     }
 14085                           
 14086                           ;mcc_generated_files/spi2.c: 86:     while(SSP2STATbits.BF == 0x0)
 14087                           
 14088                           
 14089                           ;mcc_generated_files/spi2.c: 86:     while(SSP2STATbits.BF == 0x0)
 14090  08D0  0024               	movlb	4	; select bank4
 14091  08D1  181C               	btfsc	28,0	;volatile
 14092  08D2  28D5               	goto	l6348
 14093  08D3  0064               	clrwdt	;# 
 14094  08D4  28D0               	goto	l554
 14095  08D5                     l6348:	
 14096                           
 14097                           ;mcc_generated_files/spi2.c: 91:     return (SSP2BUF);
 14098  08D5  0819               	movf	25,w	;volatile
 14099  08D6  0008               	return
 14100  08D7                     __end_of_SPI2_Exchange8bit:	
 14101                           
 14102                           	psect	text70
 14103  0A3D                     __ptext70:	
 14104 ;; *************** function _ADC_GetConversion *****************
 14105 ;; Defined at:
 14106 ;;		line 113 in file "mcc_generated_files/adc.c"
 14107 ;; Parameters:    Size  Location     Type
 14108 ;;  channel         1    wreg     enum E6648
 14109 ;; Auto vars:     Size  Location     Type
 14110 ;;  channel         1    3[BANK0 ] enum E6648
 14111 ;; Return value:  Size  Location     Type
 14112 ;;                  2    0[BANK0 ] unsigned short 
 14113 ;; Registers used:
 14114 ;;		wreg, status,2, status,0
 14115 ;; Tracked objects:
 14116 ;;		On entry : 0/0
 14117 ;;		On exit  : 0/0
 14118 ;;		Unchanged: 0/0
 14119 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14120 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14121 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14122 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14123 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14124 ;;Total ram usage:        4 bytes
 14125 ;; Hardware stack levels used:    1
 14126 ;; Hardware stack levels required when called:    5
 14127 ;; This function calls:
 14128 ;;		Nothing
 14129 ;; This function is called by:
 14130 ;;		_On_Off
 14131 ;;		_Get_ADC
 14132 ;; This function uses a non-reentrant model
 14133 ;;
 14134                           
 14135                           
 14136                           ;psect for function _ADC_GetConversion
 14137  0A3D                     _ADC_GetConversion:	
 14138                           
 14139                           ;incstack = 0
 14140                           ; Regs used in _ADC_GetConversion: [wreg+status,2+status,0]
 14141                           ;ADC_GetConversion@channel stored from wreg
 14142  0A3D  0020               	movlb	0	; select bank0
 14143  0A3E  00A3               	movwf	ADC_GetConversion@channel
 14144                           
 14145                           ;mcc_generated_files/adc.c: 113: adc_result_t ADC_GetConversion(adc_channel_t channel);m
      +                          cc_generated_files/adc.c: 114: {;mcc_generated_files/adc.c: 116:     ADCON0bits.CHS = ch
      +                          annel;
 14146  0A3F  0823               	movf	ADC_GetConversion@channel,w
 14147  0A40  00A2               	movwf	??_ADC_GetConversion
 14148  0A41  0DA2               	rlf	??_ADC_GetConversion,f
 14149  0A42  0DA2               	rlf	??_ADC_GetConversion,f
 14150  0A43  0021               	movlb	1	; select bank1
 14151  0A44  081D               	movf	29,w	;volatile
 14152  0A45  0020               	movlb	0	; select bank0
 14153  0A46  0622               	xorwf	??_ADC_GetConversion,w
 14154  0A47  3903               	andlw	-253
 14155  0A48  0622               	xorwf	??_ADC_GetConversion,w
 14156  0A49  0021               	movlb	1	; select bank1
 14157  0A4A  009D               	movwf	29	;volatile
 14158                           
 14159                           ;mcc_generated_files/adc.c: 119:     ADCON0bits.ADON = 1;
 14160  0A4B  141D               	bsf	29,0	;volatile
 14161                           
 14162                           ;mcc_generated_files/adc.c: 125:     ADCON0bits.ADGO = 1;
 14163                           
 14164                           ;mcc_generated_files/adc.c: 122:     _delay((unsigned long)((5)*(500000/4000000.0)));
 14165  0A4C  0021               	movlb	1	; select bank1
 14166  0A4D  149D               	bsf	29,1	;volatile
 14167  0A4E                     l645:	
 14168                           ;mcc_generated_files/adc.c: 131:     }
 14169                           
 14170                           ;mcc_generated_files/adc.c: 128:     while (ADCON0bits.ADGO)
 14171                           
 14172                           
 14173                           ;mcc_generated_files/adc.c: 128:     while (ADCON0bits.ADGO)
 14174  0A4E  0021               	movlb	1	; select bank1
 14175  0A4F  1C9D               	btfss	29,1	;volatile
 14176  0A50  2A53               	goto	l6948
 14177  0A51  0064               	clrwdt	;# 
 14178  0A52  2A4E               	goto	l645
 14179  0A53                     l6948:	
 14180                           
 14181                           ;mcc_generated_files/adc.c: 134:     return ((adc_result_t)((ADRESH << 8) + ADRESL));
 14182  0A53  081C               	movf	28,w	;volatile
 14183  0A54  0020               	movlb	0	; select bank0
 14184  0A55  00A1               	movwf	?_ADC_GetConversion+1
 14185  0A56  0021               	movlb	1	; select bank1
 14186  0A57  081B               	movf	27,w	;volatile
 14187  0A58  0020               	movlb	0	; select bank0
 14188  0A59  00A0               	movwf	?_ADC_GetConversion
 14189  0A5A  0008               	return
 14190  0A5B                     __end_of_ADC_GetConversion:	
 14191                           
 14192                           	psect	intentry
 14193  0004                     __pintentry:	
 14194 ;; *************** function _INTERRUPT_InterruptManager *****************
 14195 ;; Defined at:
 14196 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 14197 ;; Parameters:    Size  Location     Type
 14198 ;;		None
 14199 ;; Auto vars:     Size  Location     Type
 14200 ;;		None
 14201 ;; Return value:  Size  Location     Type
 14202 ;;                  1    wreg      void 
 14203 ;; Registers used:
 14204 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14205 ;; Tracked objects:
 14206 ;;		On entry : 0/0
 14207 ;;		On exit  : 0/0
 14208 ;;		Unchanged: 0/0
 14209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14211 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14212 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14213 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14214 ;;Total ram usage:        0 bytes
 14215 ;; Hardware stack levels used:    1
 14216 ;; Hardware stack levels required when called:    4
 14217 ;; This function calls:
 14218 ;;		Absolute function
 14219 ;;		_EUSART_Receive_ISR
 14220 ;;		_EUSART_Transmit_ISR
 14221 ;;		_PIN_MANAGER_IOC
 14222 ;;		_i2c_ISR
 14223 ;;		_i2c_busCollisionISR
 14224 ;; This function is called by:
 14225 ;;		Interrupt level 1
 14226 ;; This function uses a non-reentrant model
 14227 ;;
 14228                           
 14229  0004                     _INTERRUPT_InterruptManager:	
 14230                           
 14231                           ;incstack = 0
 14232  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 14233                           
 14234                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14235  0005  3180               	pagesel	$
 14236  0006  0021               	movlb	1	; select bank1
 14237  0007  1E10               	btfss	16,4	;volatile
 14238  0008  2810               	goto	i1l249
 14239  0009  0020               	movlb	0	; select bank0
 14240  000A  1E10               	btfss	16,4	;volatile
 14241  000B  2810               	goto	i1l249
 14242  000C  3197  2785  3180   	fcall	_PIN_MANAGER_IOC
 14243  000F  2845               	goto	i1l261
 14244  0010                     i1l249:	
 14245  0010  1F0B               	btfss	11,6	;volatile
 14246  0011  2845               	goto	i1l261
 14247  0012  0021               	movlb	1	; select bank1
 14248  0013  1E11               	btfss	17,4	;volatile
 14249  0014  281F               	goto	i1l252
 14250  0015  0020               	movlb	0	; select bank0
 14251  0016  1E11               	btfss	17,4	;volatile
 14252  0017  281F               	goto	i1l252
 14253  0018  0022               	movlb	2	; select bank2
 14254  0019  086F               	movf	(_EUSART_TxDefaultInterruptHandler+1)^(0+256),w
 14255  001A  008A               	movwf	10
 14256  001B  086E               	movf	_EUSART_TxDefaultInterruptHandler^(0+256),w
 14257  001C  000A               	callw
 14258  001D  3180               	pagesel	$
 14259  001E  2845               	goto	i1l261
 14260  001F                     i1l252:	
 14261  001F  0021               	movlb	1	; select bank1
 14262  0020  1E91               	btfss	17,5	;volatile
 14263  0021  282C               	goto	i1l254
 14264  0022  0020               	movlb	0	; select bank0
 14265  0023  1E91               	btfss	17,5	;volatile
 14266  0024  282C               	goto	i1l254
 14267  0025  0022               	movlb	2	; select bank2
 14268  0026  086D               	movf	(_EUSART_RxDefaultInterruptHandler+1)^(0+256),w
 14269  0027  008A               	movwf	10
 14270  0028  086C               	movf	_EUSART_RxDefaultInterruptHandler^(0+256),w
 14271  0029  000A               	callw
 14272  002A  3180               	pagesel	$
 14273  002B  2845               	goto	i1l261
 14274  002C                     i1l254:	
 14275  002C  0021               	movlb	1	; select bank1
 14276  002D  1D11               	btfss	17,2	;volatile
 14277  002E  2839               	goto	i1l256
 14278  002F  0020               	movlb	0	; select bank0
 14279  0030  1D11               	btfss	17,2	;volatile
 14280  0031  2839               	goto	i1l256
 14281  0032  0021               	movlb	1	; select bank1
 14282  0033  086F               	movf	(_i2c1_driver_busCollisionISR+1)^(0+128),w
 14283  0034  008A               	movwf	10
 14284  0035  086E               	movf	_i2c1_driver_busCollisionISR^(0+128),w
 14285  0036  000A               	callw
 14286  0037  3180               	pagesel	$
 14287  0038  2845               	goto	i1l261
 14288  0039                     i1l256:	
 14289  0039  0021               	movlb	1	; select bank1
 14290  003A  1D91               	btfss	17,3	;volatile
 14291  003B  2845               	goto	i1l261
 14292  003C  0020               	movlb	0	; select bank0
 14293  003D  1D91               	btfss	17,3	;volatile
 14294  003E  2845               	goto	i1l261
 14295  003F  0021               	movlb	1	; select bank1
 14296  0040  086D               	movf	(_i2c1_driver_i2cISR+1)^(0+128),w
 14297  0041  008A               	movwf	10
 14298  0042  086C               	movf	_i2c1_driver_i2cISR^(0+128),w
 14299  0043  000A               	callw
 14300  0044  3180               	pagesel	$
 14301  0045                     i1l261:	
 14302  0045  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 14303  0046  0009               	retfie
 14304  0047                     __end_of_INTERRUPT_InterruptManager:	
 14305                           
 14306                           	psect	text72
 14307  17A2                     __ptext72:	
 14308 ;; *************** function _i2c_busCollisionISR *****************
 14309 ;; Defined at:
 14310 ;;		line 435 in file "mcc_generated_files/drivers/i2c_master.c"
 14311 ;; Parameters:    Size  Location     Type
 14312 ;;		None
 14313 ;; Auto vars:     Size  Location     Type
 14314 ;;		None
 14315 ;; Return value:  Size  Location     Type
 14316 ;;                  1    wreg      void 
 14317 ;; Registers used:
 14318 ;;		status,2, status,0, pclath, cstack
 14319 ;; Tracked objects:
 14320 ;;		On entry : 0/0
 14321 ;;		On exit  : 0/0
 14322 ;;		Unchanged: 0/0
 14323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14324 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14325 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14326 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14327 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14328 ;;Total ram usage:        0 bytes
 14329 ;; Hardware stack levels used:    1
 14330 ;; Hardware stack levels required when called:    1
 14331 ;; This function calls:
 14332 ;;		_i2c1_driver_clearBusCollision
 14333 ;; This function is called by:
 14334 ;;		_i2c_open
 14335 ;;		_INTERRUPT_InterruptManager
 14336 ;; This function uses a non-reentrant model
 14337 ;;
 14338                           
 14339                           
 14340                           ;psect for function _i2c_busCollisionISR
 14341  17A2                     _i2c_busCollisionISR:	
 14342                           
 14343                           ;mcc_generated_files/drivers/i2c_master.c: 437:     i2c1_driver_clearBusCollision();
 14344                           
 14345                           ;incstack = 0
 14346                           ; Regs used in _i2c_busCollisionISR: [status,2+status,0+pclath+cstack]
 14347  17A2  3197  279F         	fcall	_i2c1_driver_clearBusCollision
 14348  17A4  0008               	return
 14349  17A5                     __end_of_i2c_busCollisionISR:	
 14350                           
 14351                           	psect	text73
 14352  179F                     __ptext73:	
 14353 ;; *************** function _i2c1_driver_clearBusCollision *****************
 14354 ;; Defined at:
 14355 ;;		line 253 in file "mcc_generated_files/i2c1_driver.c"
 14356 ;; Parameters:    Size  Location     Type
 14357 ;;		None
 14358 ;; Auto vars:     Size  Location     Type
 14359 ;;		None
 14360 ;; Return value:  Size  Location     Type
 14361 ;;                  1    wreg      void 
 14362 ;; Registers used:
 14363 ;;		None
 14364 ;; Tracked objects:
 14365 ;;		On entry : 0/0
 14366 ;;		On exit  : 0/0
 14367 ;;		Unchanged: 0/0
 14368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14370 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14372 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14373 ;;Total ram usage:        0 bytes
 14374 ;; Hardware stack levels used:    1
 14375 ;; This function calls:
 14376 ;;		Nothing
 14377 ;; This function is called by:
 14378 ;;		_i2c_busCollisionISR
 14379 ;; This function uses a non-reentrant model
 14380 ;;
 14381                           
 14382                           
 14383                           ;psect for function _i2c1_driver_clearBusCollision
 14384  179F                     _i2c1_driver_clearBusCollision:	
 14385                           
 14386                           ;mcc_generated_files/i2c1_driver.c: 255:     PIR1bits.BCL1IF = 0;
 14387                           
 14388                           ;incstack = 0
 14389                           ; Regs used in _i2c1_driver_clearBusCollision: []
 14390  179F  0020               	movlb	0	; select bank0
 14391  17A0  1111               	bcf	17,2	;volatile
 14392  17A1  0008               	return
 14393  17A2                     __end_of_i2c1_driver_clearBusCollision:	
 14394                           
 14395                           	psect	text74
 14396  0A7F                     __ptext74:	
 14397 ;; *************** function _i2c_ISR *****************
 14398 ;; Defined at:
 14399 ;;		line 419 in file "mcc_generated_files/drivers/i2c_master.c"
 14400 ;; Parameters:    Size  Location     Type
 14401 ;;		None
 14402 ;; Auto vars:     Size  Location     Type
 14403 ;;		None
 14404 ;; Return value:  Size  Location     Type
 14405 ;;                  1    wreg      void 
 14406 ;; Registers used:
 14407 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14408 ;; Tracked objects:
 14409 ;;		On entry : 0/0
 14410 ;;		On exit  : 0/0
 14411 ;;		Unchanged: 0/0
 14412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14414 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14415 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14416 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14417 ;;Total ram usage:        3 bytes
 14418 ;; Hardware stack levels used:    1
 14419 ;; Hardware stack levels required when called:    3
 14420 ;; This function calls:
 14421 ;;		_do_I2C_DO_ACK
 14422 ;;		_do_I2C_DO_ADDRESS_NACK
 14423 ;;		_do_I2C_DO_NACK_RESTART
 14424 ;;		_do_I2C_DO_NACK_STOP
 14425 ;;		_do_I2C_IDLE
 14426 ;;		_do_I2C_RCEN
 14427 ;;		_do_I2C_RESET
 14428 ;;		_do_I2C_RX
 14429 ;;		_do_I2C_SEND_ADR_READ
 14430 ;;		_do_I2C_SEND_ADR_WRITE
 14431 ;;		_do_I2C_SEND_RESTART
 14432 ;;		_do_I2C_SEND_RESTART_READ
 14433 ;;		_do_I2C_SEND_RESTART_WRITE
 14434 ;;		_do_I2C_SEND_STOP
 14435 ;;		_do_I2C_TX
 14436 ;;		_do_I2C_TX_EMPTY
 14437 ;;		_i2c1_driver_isNACK
 14438 ;;		_mssp1_clearIRQ
 14439 ;; This function is called by:
 14440 ;;		_i2c_open
 14441 ;;		_i2c_poller
 14442 ;;		_INTERRUPT_InterruptManager
 14443 ;; This function uses a non-reentrant model
 14444 ;;
 14445                           
 14446                           
 14447                           ;psect for function _i2c_ISR
 14448  0A7F                     _i2c_ISR:	
 14449                           
 14450                           ;mcc_generated_files/drivers/i2c_master.c: 421:     mssp1_clearIRQ();
 14451                           
 14452                           ;incstack = 0
 14453                           ; Regs used in _i2c_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14454  0A7F  3197  279C  318A   	fcall	_mssp1_clearIRQ
 14455                           
 14456                           ;mcc_generated_files/drivers/i2c_master.c: 427:     if(i2c_status.addressNACKCheck && i2
      +                          c1_driver_isNACK())
 14457  0A82  0023               	movlb	3	; select bank3
 14458  0A83  1DA0               	btfss	_i2c_status^(0+384),3
 14459  0A84  2A8F               	goto	i1l5480
 14460  0A85  3188  202B  318A   	fcall	_i2c1_driver_isNACK
 14461  0A88  1C03               	btfss	3,0
 14462  0A89  2A8F               	goto	i1l5480
 14463                           
 14464                           ;mcc_generated_files/drivers/i2c_master.c: 428:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 429:         i2c_status.state = I2C_ADDRESS_NACK;
 14465  0A8A  300F               	movlw	15
 14466  0A8B  00F9               	movwf	??_i2c_ISR
 14467  0A8C  0879               	movf	??_i2c_ISR,w
 14468  0A8D  0023               	movlb	3	; select bank3
 14469  0A8E  00A9               	movwf	(_i2c_status^(0+384)+9)
 14470  0A8F                     i1l5480:	
 14471                           
 14472                           ;mcc_generated_files/drivers/i2c_master.c: 432:     i2c_status.state = fsmStateTable[i2c
      +                          _status.state]();
 14473  0A8F  0023               	movlb	3	; select bank3
 14474  0A90  0829               	movf	(_i2c_status^(0+384)+9),w
 14475  0A91  00F9               	movwf	??_i2c_ISR
 14476  0A92  01FA               	clrf	??_i2c_ISR+1
 14477  0A93  35F9               	lslf	??_i2c_ISR,f
 14478  0A94  0DFA               	rlf	??_i2c_ISR+1,f
 14479  0A95  3000               	movlw	low (_fsmStateTable| (0+32768))
 14480  0A96  0779               	addwf	??_i2c_ISR,w
 14481  0A97  0084               	movwf	4
 14482  0A98  3090               	movlw	high (_fsmStateTable| (0+32768))
 14483  0A99  3D7A               	addwfc	??_i2c_ISR+1,w
 14484  0A9A  0085               	movwf	5
 14485  0A9B  3F01               	moviw [1]fsr0
 14486  0A9C  008A               	movwf	10
 14487  0A9D  3F00               	moviw [0]fsr0
 14488  0A9E  000A               	callw
 14489  0A9F  318A               	pagesel	$
 14490  0AA0  00FB               	movwf	??_i2c_ISR+2
 14491  0AA1  087B               	movf	??_i2c_ISR+2,w
 14492  0AA2  0023               	movlb	3	; select bank3
 14493  0AA3  00A9               	movwf	(_i2c_status^(0+384)+9)
 14494  0AA4  0008               	return
 14495  0AA5                     __end_of_i2c_ISR:	
 14496                           
 14497                           	psect	text75
 14498  179C                     __ptext75:	
 14499 ;; *************** function _mssp1_clearIRQ *****************
 14500 ;; Defined at:
 14501 ;;		line 53 in file "mcc_generated_files/i2c1_driver.c"
 14502 ;; Parameters:    Size  Location     Type
 14503 ;;		None
 14504 ;; Auto vars:     Size  Location     Type
 14505 ;;		None
 14506 ;; Return value:  Size  Location     Type
 14507 ;;                  1    wreg      void 
 14508 ;; Registers used:
 14509 ;;		None
 14510 ;; Tracked objects:
 14511 ;;		On entry : 0/0
 14512 ;;		On exit  : 0/0
 14513 ;;		Unchanged: 0/0
 14514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14515 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14516 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14518 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14519 ;;Total ram usage:        0 bytes
 14520 ;; Hardware stack levels used:    1
 14521 ;; This function calls:
 14522 ;;		Nothing
 14523 ;; This function is called by:
 14524 ;;		_i2c_ISR
 14525 ;;		_i2c_open
 14526 ;;		_i2c_close
 14527 ;; This function uses a non-reentrant model
 14528 ;;
 14529                           
 14530                           
 14531                           ;psect for function _mssp1_clearIRQ
 14532  179C                     _mssp1_clearIRQ:	
 14533                           
 14534                           ;mcc_generated_files/i2c1_driver.c: 55:         SSP1STAT = 0x00;
 14535                           
 14536                           ;incstack = 0
 14537                           ; Regs used in _mssp1_clearIRQ: []
 14538  179C  0020               	movlb	0	; select bank0
 14539  179D  1191               	bcf	17,3	;volatile
 14540  179E  0008               	return
 14541  179F                     __end_of_mssp1_clearIRQ:	
 14542                           
 14543                           	psect	text76
 14544  0E28                     __ptext76:	
 14545 ;; *************** function _do_I2C_RX *****************
 14546 ;; Defined at:
 14547 ;;		line 357 in file "mcc_generated_files/drivers/i2c_master.c"
 14548 ;; Parameters:    Size  Location     Type
 14549 ;;		None
 14550 ;; Auto vars:     Size  Location     Type
 14551 ;;		None
 14552 ;; Return value:  Size  Location     Type
 14553 ;;                  1    wreg      enum E7120
 14554 ;; Registers used:
 14555 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14556 ;; Tracked objects:
 14557 ;;		On entry : 0/0
 14558 ;;		On exit  : 0/0
 14559 ;;		Unchanged: 0/0
 14560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14561 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14562 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14563 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14564 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14565 ;;Total ram usage:        3 bytes
 14566 ;; Hardware stack levels used:    1
 14567 ;; Hardware stack levels required when called:    2
 14568 ;; This function calls:
 14569 ;;		_do_I2C_DO_NACK_RESTART
 14570 ;;		_do_I2C_DO_NACK_STOP
 14571 ;;		_i2c1_driver_sendACK
 14572 ;;		_returnReset
 14573 ;;		_returnStop
 14574 ;;		i1_i2c1_driver_getRXData
 14575 ;; This function is called by:
 14576 ;;		_i2c_ISR
 14577 ;; This function uses a non-reentrant model
 14578 ;;
 14579                           
 14580                           
 14581                           ;psect for function _do_I2C_RX
 14582  0E28                     _do_I2C_RX:	
 14583                           
 14584                           ;mcc_generated_files/drivers/i2c_master.c: 359:     *i2c_status.data_ptr++ = i2c1_driver
      +                          _getRXData();
 14585                           
 14586                           ;incstack = 0
 14587                           ; Regs used in _do_I2C_RX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14588  0E28  3197  2796  318E   	fcall	i1_i2c1_driver_getRXData
 14589  0E2B  00F6               	movwf	??_do_I2C_RX
 14590  0E2C  0023               	movlb	3	; select bank3
 14591  0E2D  0822               	movf	(low ((_i2c_status| (0+256)+2)))^(0+128),w
 14592  0E2E  0086               	movwf	6
 14593  0E2F  0187               	clrf	7
 14594  0E30  0876               	movf	??_do_I2C_RX,w
 14595  0E31  0081               	movwf	1
 14596  0E32  3001               	movlw	1
 14597  0E33  00F6               	movwf	??_do_I2C_RX
 14598  0E34  0876               	movf	??_do_I2C_RX,w
 14599  0E35  07A2               	addwf	(low ((_i2c_status| (0+256)+2)))^(0+128),f
 14600                           
 14601                           ;mcc_generated_files/drivers/i2c_master.c: 360:     if(--i2c_status.data_length)
 14602  0E36  3001               	movlw	1
 14603  0E37  02A3               	subwf	(_i2c_status^(0+384)+3),f
 14604  0E38  3000               	movlw	0
 14605  0E39  3BA4               	subwfb	((_i2c_status+1)^(0+384)+3),f
 14606  0E3A  0823               	movf	(_i2c_status^(0+384)+3),w
 14607  0E3B  0424               	iorwf	((_i2c_status+1)^(0+384)+3),w
 14608  0E3C  1903               	btfsc	3,2
 14609  0E3D  2E42               	goto	i1l173
 14610                           
 14611                           ;mcc_generated_files/drivers/i2c_master.c: 361:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 362:         i2c1_driver_sendACK();
 14612  0E3E  3197  27BE         	fcall	_i2c1_driver_sendACK
 14613                           
 14614                           ;mcc_generated_files/drivers/i2c_master.c: 363:         return I2C_RCEN;
 14615  0E40  3005               	movlw	5
 14616  0E41  0008               	return
 14617  0E42                     i1l173:	
 14618                           ;mcc_generated_files/drivers/i2c_master.c: 365:     else
 14619                           
 14620                           
 14621                           ;mcc_generated_files/drivers/i2c_master.c: 366:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 367:         i2c_status.bufferFree = 1;
 14622  0E42  1520               	bsf	_i2c_status^(0+384),2
 14623                           
 14624                           ;mcc_generated_files/drivers/i2c_master.c: 368:         switch(i2c_status.callbackTable[
      +                          i2c_dataComplete](i2c_status.callbackPayload[i2c_dataComplete]))
 14625  0E43  2E4A               	goto	i1l4966
 14626  0E44                     i1l4956:	
 14627                           
 14628                           ;mcc_generated_files/drivers/i2c_master.c: 372:                 return do_I2C_DO_NACK_RE
      +                          START();
 14629  0E44  3197  27DE         	fcall	_do_I2C_DO_NACK_RESTART
 14630  0E46  0008               	return
 14631  0E47                     i1l4960:	
 14632                           
 14633                           ;mcc_generated_files/drivers/i2c_master.c: 376:                 return do_I2C_DO_NACK_ST
      +                          OP();
 14634  0E47  3197  27DA         	fcall	_do_I2C_DO_NACK_STOP
 14635  0E49  0008               	return
 14636  0E4A                     i1l4966:	
 14637  0E4A  0837               	movf	(low ((_i2c_status| (0+256)+23)))^(0+128),w
 14638  0E4B  00F6               	movwf	??_do_I2C_RX
 14639  0E4C  0876               	movf	??_do_I2C_RX,w
 14640  0E4D  00F6               	movwf	returnReset@p
 14641  0E4E  300B               	movlw	11
 14642  0E4F  3EA0               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 14643  0E50  0086               	movwf	6
 14644  0E51  3001               	movlw	1	; select bank3/4
 14645  0E52  0087               	movwf	7
 14646  0E53  3F41               	moviw [1]fsr1
 14647  0E54  008A               	movwf	10
 14648  0E55  3F40               	moviw [0]fsr1
 14649  0E56  000A               	callw
 14650  0E57  318E               	pagesel	$
 14651  0E58  00F7               	movwf	??_do_I2C_RX+1
 14652  0E59  01F8               	clrf	??_do_I2C_RX+2
 14653                           
 14654                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14655                           ; Switch size 1, requested type "simple"
 14656                           ; Number of cases is 1, Range of values is 0 to 0
 14657                           ; switch strategies available:
 14658                           ; Name         Instructions Cycles
 14659                           ; simple_byte            4     3 (average)
 14660                           ; direct_byte            8     6 (fixed)
 14661                           ; jumptable            260     6 (fixed)
 14662                           ;	Chosen strategy is simple_byte
 14663  0E5A  0878               	movf	??_do_I2C_RX+2,w
 14664  0E5B  3A00               	xorlw	0	; case 0
 14665  0E5C  1903               	skipnz
 14666  0E5D  2E5F               	goto	i1l7922
 14667  0E5E  2E47               	goto	i1l4960
 14668  0E5F                     i1l7922:	
 14669                           
 14670                           ; Switch size 1, requested type "simple"
 14671                           ; Number of cases is 4, Range of values is 1 to 4
 14672                           ; switch strategies available:
 14673                           ; Name         Instructions Cycles
 14674                           ; simple_byte           13     7 (average)
 14675                           ; direct_byte           17     9 (fixed)
 14676                           ; jumptable            263     9 (fixed)
 14677                           ;	Chosen strategy is simple_byte
 14678  0E5F  0877               	movf	??_do_I2C_RX+1,w
 14679  0E60  3A01               	xorlw	1	; case 1
 14680  0E61  1903               	skipnz
 14681  0E62  2E47               	goto	i1l4960
 14682  0E63  3A03               	xorlw	3	; case 2
 14683  0E64  1903               	skipnz
 14684  0E65  2E44               	goto	i1l4956
 14685  0E66  3A01               	xorlw	1	; case 3
 14686  0E67  1903               	skipnz
 14687  0E68  2E44               	goto	i1l4956
 14688  0E69  3A07               	xorlw	7	; case 4
 14689  0E6A  1903               	skipnz
 14690  0E6B  2E47               	goto	i1l4960
 14691  0E6C  2E47               	goto	i1l4960
 14692  0E6D  0008               	return
 14693  0E6E                     __end_of_do_I2C_RX:	
 14694                           
 14695                           	psect	text77
 14696  0EB8                     __ptext77:	
 14697 ;; *************** function _do_I2C_TX *****************
 14698 ;; Defined at:
 14699 ;;		line 333 in file "mcc_generated_files/drivers/i2c_master.c"
 14700 ;; Parameters:    Size  Location     Type
 14701 ;;		None
 14702 ;; Auto vars:     Size  Location     Type
 14703 ;;		None
 14704 ;; Return value:  Size  Location     Type
 14705 ;;                  1    wreg      enum E7120
 14706 ;; Registers used:
 14707 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14708 ;; Tracked objects:
 14709 ;;		On entry : 0/0
 14710 ;;		On exit  : 0/0
 14711 ;;		Unchanged: 0/0
 14712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14713 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14714 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14715 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14716 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14717 ;;Total ram usage:        3 bytes
 14718 ;; Hardware stack levels used:    1
 14719 ;; Hardware stack levels required when called:    2
 14720 ;; This function calls:
 14721 ;;		_do_I2C_SEND_RESTART_READ
 14722 ;;		_do_I2C_SEND_RESTART_WRITE
 14723 ;;		_do_I2C_SEND_STOP
 14724 ;;		_i2c1_driver_isNACK
 14725 ;;		_returnReset
 14726 ;;		_returnStop
 14727 ;;		i1_i2c1_driver_TXData
 14728 ;; This function is called by:
 14729 ;;		_i2c_ISR
 14730 ;; This function uses a non-reentrant model
 14731 ;;
 14732                           
 14733                           
 14734                           ;psect for function _do_I2C_TX
 14735  0EB8                     _do_I2C_TX:	
 14736                           
 14737                           ;mcc_generated_files/drivers/i2c_master.c: 335:     if(i2c1_driver_isNACK())
 14738                           
 14739                           ;incstack = 0
 14740                           ; Regs used in _do_I2C_TX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14741  0EB8  3188  202B  318E   	fcall	_i2c1_driver_isNACK
 14742  0EBB  1803               	btfsc	3,0
 14743  0EBC  2EC7               	goto	i1l4926
 14744  0EBD  2EEB               	goto	i1l157
 14745  0EBE                     i1l4912:	
 14746                           
 14747                           ;mcc_generated_files/drivers/i2c_master.c: 340:                 return do_I2C_SEND_RESTA
      +                          RT_READ();
 14748  0EBE  3197  27C6         	fcall	_do_I2C_SEND_RESTART_READ
 14749  0EC0  0008               	return
 14750  0EC1                     i1l4916:	
 14751                           
 14752                           ;mcc_generated_files/drivers/i2c_master.c: 342:                 return do_I2C_SEND_RESTA
      +                          RT_WRITE();
 14753  0EC1  3197  27CA         	fcall	_do_I2C_SEND_RESTART_WRITE
 14754  0EC3  0008               	return
 14755  0EC4                     i1l4920:	
 14756                           
 14757                           ;mcc_generated_files/drivers/i2c_master.c: 346:                 return do_I2C_SEND_STOP(
      +                          );
 14758  0EC4  3197  27D2         	fcall	_do_I2C_SEND_STOP
 14759  0EC6  0008               	return
 14760  0EC7                     i1l4926:	
 14761  0EC7  0023               	movlb	3	; select bank3
 14762  0EC8  083A               	movf	(low ((_i2c_status| (0+256)+26)))^(0+128),w
 14763  0EC9  00F6               	movwf	??_do_I2C_TX
 14764  0ECA  0876               	movf	??_do_I2C_TX,w
 14765  0ECB  00F6               	movwf	returnReset@p
 14766  0ECC  3011               	movlw	17
 14767  0ECD  3EA0               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 14768  0ECE  0086               	movwf	6
 14769  0ECF  3001               	movlw	1	; select bank3/4
 14770  0ED0  0087               	movwf	7
 14771  0ED1  3F41               	moviw [1]fsr1
 14772  0ED2  008A               	movwf	10
 14773  0ED3  3F40               	moviw [0]fsr1
 14774  0ED4  000A               	callw
 14775  0ED5  318E               	pagesel	$
 14776  0ED6  00F7               	movwf	??_do_I2C_TX+1
 14777  0ED7  01F8               	clrf	??_do_I2C_TX+2
 14778                           
 14779                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14780                           ; Switch size 1, requested type "simple"
 14781                           ; Number of cases is 1, Range of values is 0 to 0
 14782                           ; switch strategies available:
 14783                           ; Name         Instructions Cycles
 14784                           ; simple_byte            4     3 (average)
 14785                           ; direct_byte            8     6 (fixed)
 14786                           ; jumptable            260     6 (fixed)
 14787                           ;	Chosen strategy is simple_byte
 14788  0ED8  0878               	movf	??_do_I2C_TX+2,w
 14789  0ED9  3A00               	xorlw	0	; case 0
 14790  0EDA  1903               	skipnz
 14791  0EDB  2EDD               	goto	i1l7924
 14792  0EDC  2EC4               	goto	i1l4920
 14793  0EDD                     i1l7924:	
 14794                           
 14795                           ; Switch size 1, requested type "simple"
 14796                           ; Number of cases is 4, Range of values is 1 to 4
 14797                           ; switch strategies available:
 14798                           ; Name         Instructions Cycles
 14799                           ; simple_byte           13     7 (average)
 14800                           ; direct_byte           17     9 (fixed)
 14801                           ; jumptable            263     9 (fixed)
 14802                           ;	Chosen strategy is simple_byte
 14803  0EDD  0877               	movf	??_do_I2C_TX+1,w
 14804  0EDE  3A01               	xorlw	1	; case 1
 14805  0EDF  1903               	skipnz
 14806  0EE0  2EC4               	goto	i1l4920
 14807  0EE1  3A03               	xorlw	3	; case 2
 14808  0EE2  1903               	skipnz
 14809  0EE3  2EBE               	goto	i1l4912
 14810  0EE4  3A01               	xorlw	1	; case 3
 14811  0EE5  1903               	skipnz
 14812  0EE6  2EC1               	goto	i1l4916
 14813  0EE7  3A07               	xorlw	7	; case 4
 14814  0EE8  1903               	skipnz
 14815  0EE9  2EC4               	goto	i1l4920
 14816  0EEA  2EC4               	goto	i1l4920
 14817  0EEB                     i1l157:	
 14818                           ;mcc_generated_files/drivers/i2c_master.c: 349:     else
 14819                           
 14820                           
 14821                           ;mcc_generated_files/drivers/i2c_master.c: 350:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 351:         i2c_status.addressNACKCheck = 0;
 14822  0EEB  0023               	movlb	3	; select bank3
 14823  0EEC  11A0               	bcf	_i2c_status^(0+384),3
 14824                           
 14825                           ;mcc_generated_files/drivers/i2c_master.c: 352:         i2c1_driver_TXData(*i2c_status.d
      +                          ata_ptr++);
 14826  0EED  3002               	movlw	2
 14827  0EEE  3EA0               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 14828  0EEF  0086               	movwf	6
 14829  0EF0  3001               	movlw	1	; select bank3/4
 14830  0EF1  0087               	movwf	7
 14831  0EF2  3F40               	moviw [0]fsr1
 14832  0EF3  0084               	movwf	4
 14833  0EF4  0185               	clrf	5
 14834  0EF5  0A81               	incf	1,f
 14835  0EF6  0800               	movf	0,w
 14836  0EF7  3197  27EA  318E   	fcall	i1_i2c1_driver_TXData
 14837                           
 14838                           ;mcc_generated_files/drivers/i2c_master.c: 353:         return (--i2c_status.data_length
      +                          )?I2C_TX:I2C_TX_EMPTY;
 14839  0EFA  3001               	movlw	1
 14840  0EFB  0023               	movlb	3	; select bank3
 14841  0EFC  02A3               	subwf	(_i2c_status^(0+384)+3),f
 14842  0EFD  3000               	movlw	0
 14843  0EFE  3BA4               	subwfb	((_i2c_status+1)^(0+384)+3),f
 14844  0EFF  0823               	movf	(_i2c_status^(0+384)+3),w
 14845  0F00  0424               	iorwf	((_i2c_status+1)^(0+384)+3),w
 14846  0F01  1D03               	btfss	3,2
 14847  0F02  2F05               	goto	i1l4934
 14848  0F03  3006               	movlw	6
 14849  0F04  0008               	return
 14850  0F05                     i1l4934:	
 14851  0F05  3003               	movlw	3
 14852  0F06  0008               	return
 14853  0F07                     __end_of_do_I2C_TX:	
 14854                           
 14855                           	psect	text78
 14856  0B93                     __ptext78:	
 14857 ;; *************** function _do_I2C_DO_ADDRESS_NACK *****************
 14858 ;; Defined at:
 14859 ;;		line 319 in file "mcc_generated_files/drivers/i2c_master.c"
 14860 ;; Parameters:    Size  Location     Type
 14861 ;;		None
 14862 ;; Auto vars:     Size  Location     Type
 14863 ;;		None
 14864 ;; Return value:  Size  Location     Type
 14865 ;;                  1    wreg      enum E7120
 14866 ;; Registers used:
 14867 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14868 ;; Tracked objects:
 14869 ;;		On entry : 0/0
 14870 ;;		On exit  : 0/0
 14871 ;;		Unchanged: 0/0
 14872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14873 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14874 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14875 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14876 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14877 ;;Total ram usage:        3 bytes
 14878 ;; Hardware stack levels used:    1
 14879 ;; Hardware stack levels required when called:    2
 14880 ;; This function calls:
 14881 ;;		_do_I2C_SEND_RESTART
 14882 ;;		_do_I2C_SEND_STOP
 14883 ;;		_returnReset
 14884 ;;		_returnStop
 14885 ;; This function is called by:
 14886 ;;		_i2c_ISR
 14887 ;; This function uses a non-reentrant model
 14888 ;;
 14889                           
 14890                           
 14891                           ;psect for function _do_I2C_DO_ADDRESS_NACK
 14892  0B93                     _do_I2C_DO_ADDRESS_NACK:	
 14893                           
 14894                           ;mcc_generated_files/drivers/i2c_master.c: 321:     i2c_status.addressNACKCheck = 0;
 14895                           
 14896                           ;incstack = 0
 14897                           ; Regs used in _do_I2C_DO_ADDRESS_NACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14898  0B93  0023               	movlb	3	; select bank3
 14899  0B94  11A0               	bcf	_i2c_status^(0+384),3
 14900                           
 14901                           ;mcc_generated_files/drivers/i2c_master.c: 322:     i2c_status.error = I2C_FAIL;
 14902  0B95  3002               	movlw	2
 14903  0B96  00F6               	movwf	??_do_I2C_DO_ADDRESS_NACK
 14904  0B97  0876               	movf	??_do_I2C_DO_ADDRESS_NACK,w
 14905  0B98  00AA               	movwf	(_i2c_status^(0+384)+10)
 14906                           
 14907                           ;mcc_generated_files/drivers/i2c_master.c: 323:     switch(i2c_status.callbackTable[i2c_
      +                          addressNACK](i2c_status.callbackPayload[i2c_addressNACK]))
 14908  0B99  2BA0               	goto	i1l4900
 14909  0B9A                     i1l4890:	
 14910                           
 14911                           ;mcc_generated_files/drivers/i2c_master.c: 327:             return do_I2C_SEND_RESTART()
      +                          ;
 14912  0B9A  3197  27CE         	fcall	_do_I2C_SEND_RESTART
 14913  0B9C  0008               	return
 14914  0B9D                     i1l4894:	
 14915                           
 14916                           ;mcc_generated_files/drivers/i2c_master.c: 329:             return do_I2C_SEND_STOP();
 14917  0B9D  3197  27D2         	fcall	_do_I2C_SEND_STOP
 14918  0B9F  0008               	return
 14919  0BA0                     i1l4900:	
 14920  0BA0  0839               	movf	(low ((_i2c_status| (0+256)+25)))^(0+128),w
 14921  0BA1  00F6               	movwf	??_do_I2C_DO_ADDRESS_NACK
 14922  0BA2  0876               	movf	??_do_I2C_DO_ADDRESS_NACK,w
 14923  0BA3  00F6               	movwf	returnReset@p
 14924  0BA4  300F               	movlw	15
 14925  0BA5  3EA0               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 14926  0BA6  0086               	movwf	6
 14927  0BA7  3001               	movlw	1	; select bank3/4
 14928  0BA8  0087               	movwf	7
 14929  0BA9  3F41               	moviw [1]fsr1
 14930  0BAA  008A               	movwf	10
 14931  0BAB  3F40               	moviw [0]fsr1
 14932  0BAC  000A               	callw
 14933  0BAD  318B               	pagesel	$
 14934  0BAE  00F7               	movwf	??_do_I2C_DO_ADDRESS_NACK+1
 14935  0BAF  01F8               	clrf	??_do_I2C_DO_ADDRESS_NACK+2
 14936                           
 14937                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14938                           ; Switch size 1, requested type "simple"
 14939                           ; Number of cases is 1, Range of values is 0 to 0
 14940                           ; switch strategies available:
 14941                           ; Name         Instructions Cycles
 14942                           ; simple_byte            4     3 (average)
 14943                           ; direct_byte            8     6 (fixed)
 14944                           ; jumptable            260     6 (fixed)
 14945                           ;	Chosen strategy is simple_byte
 14946  0BB0  0878               	movf	??_do_I2C_DO_ADDRESS_NACK+2,w
 14947  0BB1  3A00               	xorlw	0	; case 0
 14948  0BB2  1903               	skipnz
 14949  0BB3  2BB5               	goto	i1l7926
 14950  0BB4  2B9D               	goto	i1l4894
 14951  0BB5                     i1l7926:	
 14952                           
 14953                           ; Switch size 1, requested type "simple"
 14954                           ; Number of cases is 2, Range of values is 2 to 3
 14955                           ; switch strategies available:
 14956                           ; Name         Instructions Cycles
 14957                           ; simple_byte            7     4 (average)
 14958                           ; direct_byte           13     9 (fixed)
 14959                           ; jumptable            263     9 (fixed)
 14960                           ;	Chosen strategy is simple_byte
 14961  0BB5  0877               	movf	??_do_I2C_DO_ADDRESS_NACK+1,w
 14962  0BB6  3A02               	xorlw	2	; case 2
 14963  0BB7  1903               	skipnz
 14964  0BB8  2B9A               	goto	i1l4890
 14965  0BB9  3A01               	xorlw	1	; case 3
 14966  0BBA  1903               	skipnz
 14967  0BBB  2B9A               	goto	i1l4890
 14968  0BBC  2B9D               	goto	i1l4894
 14969  0BBD  0008               	return
 14970  0BBE                     __end_of_do_I2C_DO_ADDRESS_NACK:	
 14971                           
 14972                           	psect	text79
 14973  17DE                     __ptext79:	
 14974 ;; *************** function _do_I2C_DO_NACK_RESTART *****************
 14975 ;; Defined at:
 14976 ;;		line 311 in file "mcc_generated_files/drivers/i2c_master.c"
 14977 ;; Parameters:    Size  Location     Type
 14978 ;;		None
 14979 ;; Auto vars:     Size  Location     Type
 14980 ;;		None
 14981 ;; Return value:  Size  Location     Type
 14982 ;;                  1    wreg      enum E7120
 14983 ;; Registers used:
 14984 ;;		wreg, status,2, status,0, pclath, cstack
 14985 ;; Tracked objects:
 14986 ;;		On entry : 0/0
 14987 ;;		On exit  : 0/0
 14988 ;;		Unchanged: 0/0
 14989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14990 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14991 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14992 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14993 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14994 ;;Total ram usage:        0 bytes
 14995 ;; Hardware stack levels used:    1
 14996 ;; Hardware stack levels required when called:    1
 14997 ;; This function calls:
 14998 ;;		i1_i2c1_driver_sendNACK
 14999 ;; This function is called by:
 15000 ;;		_do_I2C_RX
 15001 ;;		_i2c_ISR
 15002 ;; This function uses a non-reentrant model
 15003 ;;
 15004                           
 15005                           
 15006                           ;psect for function _do_I2C_DO_NACK_RESTART
 15007  17DE                     _do_I2C_DO_NACK_RESTART:	
 15008                           
 15009                           ;mcc_generated_files/drivers/i2c_master.c: 313:     i2c1_driver_sendNACK();
 15010                           
 15011                           ;incstack = 0
 15012                           ; Regs used in _do_I2C_DO_NACK_RESTART: [wreg+status,2+status,0+pclath+cstack]
 15013  17DE  3197  27C2         	fcall	i1_i2c1_driver_sendNACK
 15014                           
 15015                           ;mcc_generated_files/drivers/i2c_master.c: 314:     return I2C_SEND_RESTART;
 15016  17E0  3009               	movlw	9
 15017  17E1  0008               	return
 15018  17E2                     __end_of_do_I2C_DO_NACK_RESTART:	
 15019                           
 15020                           	psect	text80
 15021  17DA                     __ptext80:	
 15022 ;; *************** function _do_I2C_DO_NACK_STOP *****************
 15023 ;; Defined at:
 15024 ;;		line 305 in file "mcc_generated_files/drivers/i2c_master.c"
 15025 ;; Parameters:    Size  Location     Type
 15026 ;;		None
 15027 ;; Auto vars:     Size  Location     Type
 15028 ;;		None
 15029 ;; Return value:  Size  Location     Type
 15030 ;;                  1    wreg      enum E7120
 15031 ;; Registers used:
 15032 ;;		wreg, status,2, status,0, pclath, cstack
 15033 ;; Tracked objects:
 15034 ;;		On entry : 0/0
 15035 ;;		On exit  : 0/0
 15036 ;;		Unchanged: 0/0
 15037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15038 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15039 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15040 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15041 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15042 ;;Total ram usage:        0 bytes
 15043 ;; Hardware stack levels used:    1
 15044 ;; Hardware stack levels required when called:    1
 15045 ;; This function calls:
 15046 ;;		i1_i2c1_driver_sendNACK
 15047 ;; This function is called by:
 15048 ;;		_do_I2C_RX
 15049 ;;		_i2c_ISR
 15050 ;; This function uses a non-reentrant model
 15051 ;;
 15052                           
 15053                           
 15054                           ;psect for function _do_I2C_DO_NACK_STOP
 15055  17DA                     _do_I2C_DO_NACK_STOP:	
 15056                           
 15057                           ;mcc_generated_files/drivers/i2c_master.c: 307:     i2c1_driver_sendNACK();
 15058                           
 15059                           ;incstack = 0
 15060                           ; Regs used in _do_I2C_DO_NACK_STOP: [wreg+status,2+status,0+pclath+cstack]
 15061  17DA  3197  27C2         	fcall	i1_i2c1_driver_sendNACK
 15062                           
 15063                           ;mcc_generated_files/drivers/i2c_master.c: 308:     return I2C_SEND_STOP;
 15064  17DC  300A               	movlw	10
 15065  17DD  0008               	return
 15066  17DE                     __end_of_do_I2C_DO_NACK_STOP:	
 15067                           
 15068                           	psect	text81
 15069  17D6                     __ptext81:	
 15070 ;; *************** function _do_I2C_DO_ACK *****************
 15071 ;; Defined at:
 15072 ;;		line 299 in file "mcc_generated_files/drivers/i2c_master.c"
 15073 ;; Parameters:    Size  Location     Type
 15074 ;;		None
 15075 ;; Auto vars:     Size  Location     Type
 15076 ;;		None
 15077 ;; Return value:  Size  Location     Type
 15078 ;;                  1    wreg      enum E7120
 15079 ;; Registers used:
 15080 ;;		wreg, status,2, status,0, pclath, cstack
 15081 ;; Tracked objects:
 15082 ;;		On entry : 0/0
 15083 ;;		On exit  : 0/0
 15084 ;;		Unchanged: 0/0
 15085 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15086 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15087 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15088 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15089 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15090 ;;Total ram usage:        0 bytes
 15091 ;; Hardware stack levels used:    1
 15092 ;; Hardware stack levels required when called:    1
 15093 ;; This function calls:
 15094 ;;		_i2c1_driver_sendACK
 15095 ;; This function is called by:
 15096 ;;		_i2c_ISR
 15097 ;; This function uses a non-reentrant model
 15098 ;;
 15099                           
 15100                           
 15101                           ;psect for function _do_I2C_DO_ACK
 15102  17D6                     _do_I2C_DO_ACK:	
 15103                           
 15104                           ;mcc_generated_files/drivers/i2c_master.c: 301:     i2c1_driver_sendACK();
 15105                           
 15106                           ;incstack = 0
 15107                           ; Regs used in _do_I2C_DO_ACK: [wreg+status,2+status,0+pclath+cstack]
 15108  17D6  3197  27BE         	fcall	_i2c1_driver_sendACK
 15109                           
 15110                           ;mcc_generated_files/drivers/i2c_master.c: 302:     return I2C_RCEN;
 15111  17D8  3005               	movlw	5
 15112  17D9  0008               	return
 15113  17DA                     __end_of_do_I2C_DO_ACK:	
 15114                           
 15115                           	psect	text82
 15116  17F4                     __ptext82:	
 15117 ;; *************** function _do_I2C_RCEN *****************
 15118 ;; Defined at:
 15119 ;;		line 292 in file "mcc_generated_files/drivers/i2c_master.c"
 15120 ;; Parameters:    Size  Location     Type
 15121 ;;		None
 15122 ;; Auto vars:     Size  Location     Type
 15123 ;;		None
 15124 ;; Return value:  Size  Location     Type
 15125 ;;                  1    wreg      enum E7120
 15126 ;; Registers used:
 15127 ;;		wreg, status,2, status,0, pclath, cstack
 15128 ;; Tracked objects:
 15129 ;;		On entry : 0/0
 15130 ;;		On exit  : 0/0
 15131 ;;		Unchanged: 0/0
 15132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15134 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15135 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15136 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15137 ;;Total ram usage:        0 bytes
 15138 ;; Hardware stack levels used:    1
 15139 ;; Hardware stack levels required when called:    1
 15140 ;; This function calls:
 15141 ;;		i1_i2c1_driver_startRX
 15142 ;; This function is called by:
 15143 ;;		_i2c_ISR
 15144 ;; This function uses a non-reentrant model
 15145 ;;
 15146                           
 15147                           
 15148                           ;psect for function _do_I2C_RCEN
 15149  17F4                     _do_I2C_RCEN:	
 15150                           
 15151                           ;mcc_generated_files/drivers/i2c_master.c: 294:     i2c_status.addressNACKCheck = 0;
 15152                           
 15153                           ;incstack = 0
 15154                           ; Regs used in _do_I2C_RCEN: [wreg+status,2+status,0+pclath+cstack]
 15155  17F4  0023               	movlb	3	; select bank3
 15156  17F5  11A0               	bcf	_i2c_status^(0+384),3
 15157                           
 15158                           ;mcc_generated_files/drivers/i2c_master.c: 295:     i2c1_driver_startRX();
 15159  17F6  3197  2793         	fcall	i1_i2c1_driver_startRX
 15160                           
 15161                           ;mcc_generated_files/drivers/i2c_master.c: 296:     return I2C_RX;
 15162  17F8  3004               	movlw	4
 15163  17F9  0008               	return
 15164  17FA                     __end_of_do_I2C_RCEN:	
 15165                           
 15166                           	psect	text83
 15167  0816                     __ptext83:	
 15168 ;; *************** function _do_I2C_SEND_ADR_WRITE *****************
 15169 ;; Defined at:
 15170 ;;		line 285 in file "mcc_generated_files/drivers/i2c_master.c"
 15171 ;; Parameters:    Size  Location     Type
 15172 ;;		None
 15173 ;; Auto vars:     Size  Location     Type
 15174 ;;		None
 15175 ;; Return value:  Size  Location     Type
 15176 ;;                  1    wreg      enum E7120
 15177 ;; Registers used:
 15178 ;;		wreg, status,2, status,0, pclath, cstack
 15179 ;; Tracked objects:
 15180 ;;		On entry : 0/0
 15181 ;;		On exit  : 0/0
 15182 ;;		Unchanged: 0/0
 15183 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15184 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15185 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15186 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15187 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15188 ;;Total ram usage:        0 bytes
 15189 ;; Hardware stack levels used:    1
 15190 ;; Hardware stack levels required when called:    1
 15191 ;; This function calls:
 15192 ;;		i1_i2c1_driver_TXData
 15193 ;; This function is called by:
 15194 ;;		_i2c_ISR
 15195 ;; This function uses a non-reentrant model
 15196 ;;
 15197                           
 15198                           
 15199                           ;psect for function _do_I2C_SEND_ADR_WRITE
 15200  0816                     _do_I2C_SEND_ADR_WRITE:	
 15201                           
 15202                           ;mcc_generated_files/drivers/i2c_master.c: 287:     i2c_status.addressNACKCheck = 1;
 15203                           
 15204                           ;incstack = 0
 15205                           ; Regs used in _do_I2C_SEND_ADR_WRITE: [wreg+status,2+status,0+pclath+cstack]
 15206  0816  0023               	movlb	3	; select bank3
 15207  0817  15A0               	bsf	_i2c_status^(0+384),3
 15208                           
 15209                           ;mcc_generated_files/drivers/i2c_master.c: 288:     i2c1_driver_TXData(i2c_status.addres
      +                          s << 1);
 15210  0818  3521               	lslf	(_i2c_status^(0+384)+1),w
 15211  0819  3197  27EA         	fcall	i1_i2c1_driver_TXData
 15212                           
 15213                           ;mcc_generated_files/drivers/i2c_master.c: 289:     return I2C_TX;
 15214  081B  3003               	movlw	3
 15215  081C  0008               	return
 15216  081D                     __end_of_do_I2C_SEND_ADR_WRITE:	
 15217                           
 15218                           	psect	text84
 15219  0833                     __ptext84:	
 15220 ;; *************** function _do_I2C_SEND_ADR_READ *****************
 15221 ;; Defined at:
 15222 ;;		line 278 in file "mcc_generated_files/drivers/i2c_master.c"
 15223 ;; Parameters:    Size  Location     Type
 15224 ;;		None
 15225 ;; Auto vars:     Size  Location     Type
 15226 ;;		None
 15227 ;; Return value:  Size  Location     Type
 15228 ;;                  1    wreg      enum E7120
 15229 ;; Registers used:
 15230 ;;		wreg, status,2, status,0, pclath, cstack
 15231 ;; Tracked objects:
 15232 ;;		On entry : 0/0
 15233 ;;		On exit  : 0/0
 15234 ;;		Unchanged: 0/0
 15235 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15236 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15237 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15238 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15239 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15240 ;;Total ram usage:        0 bytes
 15241 ;; Hardware stack levels used:    1
 15242 ;; Hardware stack levels required when called:    1
 15243 ;; This function calls:
 15244 ;;		i1_i2c1_driver_TXData
 15245 ;; This function is called by:
 15246 ;;		_i2c_ISR
 15247 ;; This function uses a non-reentrant model
 15248 ;;
 15249                           
 15250                           
 15251                           ;psect for function _do_I2C_SEND_ADR_READ
 15252  0833                     _do_I2C_SEND_ADR_READ:	
 15253                           
 15254                           ;mcc_generated_files/drivers/i2c_master.c: 280:     i2c_status.addressNACKCheck = 1;
 15255                           
 15256                           ;incstack = 0
 15257                           ; Regs used in _do_I2C_SEND_ADR_READ: [wreg+status,2+status,0+pclath+cstack]
 15258  0833  0023               	movlb	3	; select bank3
 15259  0834  15A0               	bsf	_i2c_status^(0+384),3
 15260                           
 15261                           ;mcc_generated_files/drivers/i2c_master.c: 281:     i2c1_driver_TXData(i2c_status.addres
      +                          s << 1 | 1);
 15262  0835  1403               	setc
 15263  0836  0D21               	rlf	(_i2c_status^(0+384)+1),w
 15264  0837  3197  27EA         	fcall	i1_i2c1_driver_TXData
 15265                           
 15266                           ;mcc_generated_files/drivers/i2c_master.c: 282:     return I2C_RCEN;
 15267  0839  3005               	movlw	5
 15268  083A  0008               	return
 15269  083B                     __end_of_do_I2C_SEND_ADR_READ:	
 15270                           
 15271                           	psect	text85
 15272  17D2                     __ptext85:	
 15273 ;; *************** function _do_I2C_SEND_STOP *****************
 15274 ;; Defined at:
 15275 ;;		line 272 in file "mcc_generated_files/drivers/i2c_master.c"
 15276 ;; Parameters:    Size  Location     Type
 15277 ;;		None
 15278 ;; Auto vars:     Size  Location     Type
 15279 ;;		None
 15280 ;; Return value:  Size  Location     Type
 15281 ;;                  1    wreg      enum E7120
 15282 ;; Registers used:
 15283 ;;		wreg, status,2, status,0, pclath, cstack
 15284 ;; Tracked objects:
 15285 ;;		On entry : 0/0
 15286 ;;		On exit  : 0/0
 15287 ;;		Unchanged: 0/0
 15288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15289 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15290 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15291 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15292 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15293 ;;Total ram usage:        0 bytes
 15294 ;; Hardware stack levels used:    1
 15295 ;; Hardware stack levels required when called:    1
 15296 ;; This function calls:
 15297 ;;		i1_i2c1_driver_stop
 15298 ;; This function is called by:
 15299 ;;		_do_I2C_DO_ADDRESS_NACK
 15300 ;;		_do_I2C_TX
 15301 ;;		_do_I2C_TX_EMPTY
 15302 ;;		_i2c_ISR
 15303 ;; This function uses a non-reentrant model
 15304 ;;
 15305                           
 15306                           
 15307                           ;psect for function _do_I2C_SEND_STOP
 15308  17D2                     _do_I2C_SEND_STOP:	
 15309                           
 15310                           ;mcc_generated_files/drivers/i2c_master.c: 274:     i2c1_driver_stop();
 15311                           
 15312                           ;incstack = 0
 15313                           ; Regs used in _do_I2C_SEND_STOP: [wreg+status,2+status,0+pclath+cstack]
 15314  17D2  3197  2790         	fcall	i1_i2c1_driver_stop
 15315                           
 15316                           ;mcc_generated_files/drivers/i2c_master.c: 275:     return I2C_IDLE;
 15317  17D4  3000               	movlw	0
 15318  17D5  0008               	return
 15319  17D6                     __end_of_do_I2C_SEND_STOP:	
 15320                           
 15321                           	psect	text86
 15322  17CE                     __ptext86:	
 15323 ;; *************** function _do_I2C_SEND_RESTART *****************
 15324 ;; Defined at:
 15325 ;;		line 266 in file "mcc_generated_files/drivers/i2c_master.c"
 15326 ;; Parameters:    Size  Location     Type
 15327 ;;		None
 15328 ;; Auto vars:     Size  Location     Type
 15329 ;;		None
 15330 ;; Return value:  Size  Location     Type
 15331 ;;                  1    wreg      enum E7120
 15332 ;; Registers used:
 15333 ;;		wreg, status,2, status,0, pclath, cstack
 15334 ;; Tracked objects:
 15335 ;;		On entry : 0/0
 15336 ;;		On exit  : 0/0
 15337 ;;		Unchanged: 0/0
 15338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15339 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15340 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15341 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15342 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15343 ;;Total ram usage:        0 bytes
 15344 ;; Hardware stack levels used:    1
 15345 ;; Hardware stack levels required when called:    1
 15346 ;; This function calls:
 15347 ;;		i1_i2c1_driver_restart
 15348 ;; This function is called by:
 15349 ;;		_do_I2C_DO_ADDRESS_NACK
 15350 ;;		_do_I2C_TX_EMPTY
 15351 ;;		_i2c_ISR
 15352 ;; This function uses a non-reentrant model
 15353 ;;
 15354                           
 15355                           
 15356                           ;psect for function _do_I2C_SEND_RESTART
 15357  17CE                     _do_I2C_SEND_RESTART:	
 15358                           
 15359                           ;mcc_generated_files/drivers/i2c_master.c: 268:     i2c1_driver_restart();
 15360                           
 15361                           ;incstack = 0
 15362                           ; Regs used in _do_I2C_SEND_RESTART: [wreg+status,2+status,0+pclath+cstack]
 15363  17CE  3197  278D         	fcall	i1_i2c1_driver_restart
 15364                           
 15365                           ;mcc_generated_files/drivers/i2c_master.c: 269:     return I2C_SEND_ADR_READ;
 15366  17D0  3001               	movlw	1
 15367  17D1  0008               	return
 15368  17D2                     __end_of_do_I2C_SEND_RESTART:	
 15369                           
 15370                           	psect	text87
 15371  17CA                     __ptext87:	
 15372 ;; *************** function _do_I2C_SEND_RESTART_WRITE *****************
 15373 ;; Defined at:
 15374 ;;		line 260 in file "mcc_generated_files/drivers/i2c_master.c"
 15375 ;; Parameters:    Size  Location     Type
 15376 ;;		None
 15377 ;; Auto vars:     Size  Location     Type
 15378 ;;		None
 15379 ;; Return value:  Size  Location     Type
 15380 ;;                  1    wreg      enum E7120
 15381 ;; Registers used:
 15382 ;;		wreg, status,2, status,0, pclath, cstack
 15383 ;; Tracked objects:
 15384 ;;		On entry : 0/0
 15385 ;;		On exit  : 0/0
 15386 ;;		Unchanged: 0/0
 15387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15388 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15389 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15390 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15391 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15392 ;;Total ram usage:        0 bytes
 15393 ;; Hardware stack levels used:    1
 15394 ;; Hardware stack levels required when called:    1
 15395 ;; This function calls:
 15396 ;;		i1_i2c1_driver_restart
 15397 ;; This function is called by:
 15398 ;;		_do_I2C_TX
 15399 ;;		_i2c_ISR
 15400 ;; This function uses a non-reentrant model
 15401 ;;
 15402                           
 15403                           
 15404                           ;psect for function _do_I2C_SEND_RESTART_WRITE
 15405  17CA                     _do_I2C_SEND_RESTART_WRITE:	
 15406                           
 15407                           ;mcc_generated_files/drivers/i2c_master.c: 262:     i2c1_driver_restart();
 15408                           
 15409                           ;incstack = 0
 15410                           ; Regs used in _do_I2C_SEND_RESTART_WRITE: [wreg+status,2+status,0+pclath+cstack]
 15411  17CA  3197  278D         	fcall	i1_i2c1_driver_restart
 15412                           
 15413                           ;mcc_generated_files/drivers/i2c_master.c: 263:     return I2C_SEND_ADR_WRITE;
 15414  17CC  3002               	movlw	2
 15415  17CD  0008               	return
 15416  17CE                     __end_of_do_I2C_SEND_RESTART_WRITE:	
 15417                           
 15418                           	psect	text88
 15419  17C6                     __ptext88:	
 15420 ;; *************** function _do_I2C_SEND_RESTART_READ *****************
 15421 ;; Defined at:
 15422 ;;		line 254 in file "mcc_generated_files/drivers/i2c_master.c"
 15423 ;; Parameters:    Size  Location     Type
 15424 ;;		None
 15425 ;; Auto vars:     Size  Location     Type
 15426 ;;		None
 15427 ;; Return value:  Size  Location     Type
 15428 ;;                  1    wreg      enum E7120
 15429 ;; Registers used:
 15430 ;;		wreg, status,2, status,0, pclath, cstack
 15431 ;; Tracked objects:
 15432 ;;		On entry : 0/0
 15433 ;;		On exit  : 0/0
 15434 ;;		Unchanged: 0/0
 15435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15437 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15439 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15440 ;;Total ram usage:        0 bytes
 15441 ;; Hardware stack levels used:    1
 15442 ;; Hardware stack levels required when called:    1
 15443 ;; This function calls:
 15444 ;;		i1_i2c1_driver_restart
 15445 ;; This function is called by:
 15446 ;;		_do_I2C_TX
 15447 ;;		_i2c_ISR
 15448 ;; This function uses a non-reentrant model
 15449 ;;
 15450                           
 15451                           
 15452                           ;psect for function _do_I2C_SEND_RESTART_READ
 15453  17C6                     _do_I2C_SEND_RESTART_READ:	
 15454                           
 15455                           ;mcc_generated_files/drivers/i2c_master.c: 256:     i2c1_driver_restart();
 15456                           
 15457                           ;incstack = 0
 15458                           ; Regs used in _do_I2C_SEND_RESTART_READ: [wreg+status,2+status,0+pclath+cstack]
 15459  17C6  3197  278D         	fcall	i1_i2c1_driver_restart
 15460                           
 15461                           ;mcc_generated_files/drivers/i2c_master.c: 257:     return I2C_SEND_ADR_READ;
 15462  17C8  3001               	movlw	1
 15463  17C9  0008               	return
 15464  17CA                     __end_of_do_I2C_SEND_RESTART_READ:	
 15465                           
 15466                           	psect	text89
 15467  17EF                     __ptext89:	
 15468 ;; *************** function _do_I2C_IDLE *****************
 15469 ;; Defined at:
 15470 ;;		line 247 in file "mcc_generated_files/drivers/i2c_master.c"
 15471 ;; Parameters:    Size  Location     Type
 15472 ;;		None
 15473 ;; Auto vars:     Size  Location     Type
 15474 ;;		None
 15475 ;; Return value:  Size  Location     Type
 15476 ;;                  1    wreg      enum E7120
 15477 ;; Registers used:
 15478 ;;		wreg, status,2
 15479 ;; Tracked objects:
 15480 ;;		On entry : 0/0
 15481 ;;		On exit  : 0/0
 15482 ;;		Unchanged: 0/0
 15483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15484 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15485 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15486 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15487 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15488 ;;Total ram usage:        0 bytes
 15489 ;; Hardware stack levels used:    1
 15490 ;; This function calls:
 15491 ;;		Nothing
 15492 ;; This function is called by:
 15493 ;;		_i2c_ISR
 15494 ;; This function uses a non-reentrant model
 15495 ;;
 15496                           
 15497                           
 15498                           ;psect for function _do_I2C_IDLE
 15499  17EF                     _do_I2C_IDLE:	
 15500                           
 15501                           ;mcc_generated_files/drivers/i2c_master.c: 249:     i2c_status.busy = 0;
 15502                           
 15503                           ;incstack = 0
 15504                           ; Regs used in _do_I2C_IDLE: [wreg+status,2]
 15505  17EF  0023               	movlb	3	; select bank3
 15506  17F0  1020               	bcf	_i2c_status^(0+384),0
 15507                           
 15508                           ;mcc_generated_files/drivers/i2c_master.c: 250:     i2c_status.error = I2C_NOERR;
 15509  17F1  01AA               	clrf	(_i2c_status^(0+384)+10)
 15510                           
 15511                           ;mcc_generated_files/drivers/i2c_master.c: 251:     return I2C_RESET;
 15512  17F2  300E               	movlw	14
 15513  17F3  0008               	return
 15514  17F4                     __end_of_do_I2C_IDLE:	
 15515                           
 15516                           	psect	text90
 15517  080F                     __ptext90:	
 15518 ;; *************** function _do_I2C_RESET *****************
 15519 ;; Defined at:
 15520 ;;		line 239 in file "mcc_generated_files/drivers/i2c_master.c"
 15521 ;; Parameters:    Size  Location     Type
 15522 ;;		None
 15523 ;; Auto vars:     Size  Location     Type
 15524 ;;		None
 15525 ;; Return value:  Size  Location     Type
 15526 ;;                  1    wreg      enum E7120
 15527 ;; Registers used:
 15528 ;;		wreg, status,2, status,0, pclath, cstack
 15529 ;; Tracked objects:
 15530 ;;		On entry : 0/0
 15531 ;;		On exit  : 0/0
 15532 ;;		Unchanged: 0/0
 15533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15535 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15536 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15537 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15538 ;;Total ram usage:        0 bytes
 15539 ;; Hardware stack levels used:    1
 15540 ;; Hardware stack levels required when called:    1
 15541 ;; This function calls:
 15542 ;;		_i2c1_driver_resetBus
 15543 ;; This function is called by:
 15544 ;;		_i2c_ISR
 15545 ;; This function uses a non-reentrant model
 15546 ;;
 15547                           
 15548                           
 15549                           ;psect for function _do_I2C_RESET
 15550  080F                     _do_I2C_RESET:	
 15551                           
 15552                           ;mcc_generated_files/drivers/i2c_master.c: 241:     i2c1_driver_resetBus();
 15553                           
 15554                           ;incstack = 0
 15555                           ; Regs used in _do_I2C_RESET: [wreg+status,2+status,0+pclath+cstack]
 15556  080F  3197  2786         	fcall	_i2c1_driver_resetBus
 15557                           
 15558                           ;mcc_generated_files/drivers/i2c_master.c: 242:     i2c_status.busy = 0;
 15559  0811  0023               	movlb	3	; select bank3
 15560  0812  1020               	bcf	_i2c_status^(0+384),0
 15561                           
 15562                           ;mcc_generated_files/drivers/i2c_master.c: 243:     i2c_status.error = I2C_NOERR;
 15563  0813  01AA               	clrf	(_i2c_status^(0+384)+10)
 15564                           
 15565                           ;mcc_generated_files/drivers/i2c_master.c: 244:     return I2C_RESET;
 15566  0814  300E               	movlw	14
 15567  0815  0008               	return
 15568  0816                     __end_of_do_I2C_RESET:	
 15569                           
 15570                           	psect	text91
 15571  0BE9                     __ptext91:	
 15572 ;; *************** function _do_I2C_TX_EMPTY *****************
 15573 ;; Defined at:
 15574 ;;		line 382 in file "mcc_generated_files/drivers/i2c_master.c"
 15575 ;; Parameters:    Size  Location     Type
 15576 ;;		None
 15577 ;; Auto vars:     Size  Location     Type
 15578 ;;		None
 15579 ;; Return value:  Size  Location     Type
 15580 ;;                  1    wreg      enum E7120
 15581 ;; Registers used:
 15582 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15583 ;; Tracked objects:
 15584 ;;		On entry : 0/0
 15585 ;;		On exit  : 0/0
 15586 ;;		Unchanged: 0/0
 15587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15588 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15589 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15590 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15591 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15592 ;;Total ram usage:        3 bytes
 15593 ;; Hardware stack levels used:    1
 15594 ;; Hardware stack levels required when called:    2
 15595 ;; This function calls:
 15596 ;;		_do_I2C_SEND_RESTART
 15597 ;;		_do_I2C_SEND_STOP
 15598 ;;		_mssp1_setIRQ
 15599 ;;		_returnReset
 15600 ;;		_returnStop
 15601 ;; This function is called by:
 15602 ;;		_i2c_ISR
 15603 ;; This function uses a non-reentrant model
 15604 ;;
 15605                           
 15606                           
 15607                           ;psect for function _do_I2C_TX_EMPTY
 15608  0BE9                     _do_I2C_TX_EMPTY:	
 15609                           
 15610                           ;mcc_generated_files/drivers/i2c_master.c: 384:     i2c_status.bufferFree = 1;
 15611                           
 15612                           ;incstack = 0
 15613                           ; Regs used in _do_I2C_TX_EMPTY: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15614  0BE9  0023               	movlb	3	; select bank3
 15615  0BEA  1520               	bsf	_i2c_status^(0+384),2
 15616                           
 15617                           ;mcc_generated_files/drivers/i2c_master.c: 385:     switch(i2c_status.callbackTable[i2c_
      +                          dataComplete](i2c_status.callbackPayload[i2c_dataComplete]))
 15618  0BEB  2BF6               	goto	i1l4992
 15619  0BEC                     i1l4976:	
 15620                           
 15621                           ;mcc_generated_files/drivers/i2c_master.c: 389:             return do_I2C_SEND_RESTART()
      +                          ;
 15622  0BEC  3197  27CE         	fcall	_do_I2C_SEND_RESTART
 15623  0BEE  0008               	return
 15624  0BEF                     i1l4980:	
 15625                           
 15626                           ;mcc_generated_files/drivers/i2c_master.c: 391:             mssp1_setIRQ();
 15627  0BEF  3197  2799         	fcall	_mssp1_setIRQ
 15628                           
 15629                           ;mcc_generated_files/drivers/i2c_master.c: 392:             return I2C_TX;
 15630  0BF1  3003               	movlw	3
 15631  0BF2  0008               	return
 15632  0BF3                     i1l4986:	
 15633                           
 15634                           ;mcc_generated_files/drivers/i2c_master.c: 395:             return do_I2C_SEND_STOP();
 15635  0BF3  3197  27D2         	fcall	_do_I2C_SEND_STOP
 15636  0BF5  0008               	return
 15637  0BF6                     i1l4992:	
 15638  0BF6  0837               	movf	(low ((_i2c_status| (0+256)+23)))^(0+128),w
 15639  0BF7  00F6               	movwf	??_do_I2C_TX_EMPTY
 15640  0BF8  0876               	movf	??_do_I2C_TX_EMPTY,w
 15641  0BF9  00F6               	movwf	returnReset@p
 15642  0BFA  300B               	movlw	11
 15643  0BFB  3EA0               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 15644  0BFC  0086               	movwf	6
 15645  0BFD  3001               	movlw	1	; select bank3/4
 15646  0BFE  0087               	movwf	7
 15647  0BFF  3F41               	moviw [1]fsr1
 15648  0C00  008A               	movwf	10
 15649  0C01  3F40               	moviw [0]fsr1
 15650  0C02  000A               	callw
 15651  0C03  318B               	pagesel	$
 15652  0C04  00F7               	movwf	??_do_I2C_TX_EMPTY+1
 15653  0C05  01F8               	clrf	??_do_I2C_TX_EMPTY+2
 15654                           
 15655                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15656                           ; Switch size 1, requested type "simple"
 15657                           ; Number of cases is 1, Range of values is 0 to 0
 15658                           ; switch strategies available:
 15659                           ; Name         Instructions Cycles
 15660                           ; simple_byte            4     3 (average)
 15661                           ; direct_byte            8     6 (fixed)
 15662                           ; jumptable            260     6 (fixed)
 15663                           ;	Chosen strategy is simple_byte
 15664  0C06  0878               	movf	??_do_I2C_TX_EMPTY+2,w
 15665  0C07  3A00               	xorlw	0	; case 0
 15666  0C08  1903               	skipnz
 15667  0C09  2C0B               	goto	i1l7928
 15668  0C0A  2BF3               	goto	i1l4986
 15669  0C0B                     i1l7928:	
 15670                           
 15671                           ; Switch size 1, requested type "simple"
 15672                           ; Number of cases is 4, Range of values is 1 to 4
 15673                           ; switch strategies available:
 15674                           ; Name         Instructions Cycles
 15675                           ; simple_byte           13     7 (average)
 15676                           ; direct_byte           17     9 (fixed)
 15677                           ; jumptable            263     9 (fixed)
 15678                           ;	Chosen strategy is simple_byte
 15679  0C0B  0877               	movf	??_do_I2C_TX_EMPTY+1,w
 15680  0C0C  3A01               	xorlw	1	; case 1
 15681  0C0D  1903               	skipnz
 15682  0C0E  2BF3               	goto	i1l4986
 15683  0C0F  3A03               	xorlw	3	; case 2
 15684  0C10  1903               	skipnz
 15685  0C11  2BEC               	goto	i1l4976
 15686  0C12  3A01               	xorlw	1	; case 3
 15687  0C13  1903               	skipnz
 15688  0C14  2BEC               	goto	i1l4976
 15689  0C15  3A07               	xorlw	7	; case 4
 15690  0C16  1903               	skipnz
 15691  0C17  2BEF               	goto	i1l4980
 15692  0C18  2BF3               	goto	i1l4986
 15693  0C19  0008               	return
 15694  0C1A                     __end_of_do_I2C_TX_EMPTY:	
 15695                           
 15696                           	psect	text92
 15697  1799                     __ptext92:	
 15698 ;; *************** function _mssp1_setIRQ *****************
 15699 ;; Defined at:
 15700 ;;		line 58 in file "mcc_generated_files/i2c1_driver.c"
 15701 ;; Parameters:    Size  Location     Type
 15702 ;;		None
 15703 ;; Auto vars:     Size  Location     Type
 15704 ;;		None
 15705 ;; Return value:  Size  Location     Type
 15706 ;;                  1    wreg      void 
 15707 ;; Registers used:
 15708 ;;		None
 15709 ;; Tracked objects:
 15710 ;;		On entry : 0/0
 15711 ;;		On exit  : 0/0
 15712 ;;		Unchanged: 0/0
 15713 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15714 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15715 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15716 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15717 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15718 ;;Total ram usage:        0 bytes
 15719 ;; Hardware stack levels used:    1
 15720 ;; This function calls:
 15721 ;;		Nothing
 15722 ;; This function is called by:
 15723 ;;		_do_I2C_TX_EMPTY
 15724 ;; This function uses a non-reentrant model
 15725 ;;
 15726                           
 15727                           
 15728                           ;psect for function _mssp1_setIRQ
 15729  1799                     _mssp1_setIRQ:	
 15730                           
 15731                           ;mcc_generated_files/i2c1_driver.c: 60:     }
 15732                           
 15733                           ;incstack = 0
 15734                           ; Regs used in _mssp1_setIRQ: []
 15735  1799  0020               	movlb	0	; select bank0
 15736  179A  1591               	bsf	17,3	;volatile
 15737  179B  0008               	return
 15738  179C                     __end_of_mssp1_setIRQ:	
 15739                           
 15740                           	psect	text93
 15741  082B                     __ptext93:	
 15742 ;; *************** function _i2c1_driver_isNACK *****************
 15743 ;; Defined at:
 15744 ;;		line 161 in file "mcc_generated_files/i2c1_driver.c"
 15745 ;; Parameters:    Size  Location     Type
 15746 ;;		None
 15747 ;; Auto vars:     Size  Location     Type
 15748 ;;		None
 15749 ;; Return value:  Size  Location     Type
 15750 ;;		None               void
 15751 ;; Registers used:
 15752 ;;		wreg, status,2, status,0
 15753 ;; Tracked objects:
 15754 ;;		On entry : 0/0
 15755 ;;		On exit  : 0/0
 15756 ;;		Unchanged: 0/0
 15757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15758 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15759 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15760 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15761 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15762 ;;Total ram usage:        1 bytes
 15763 ;; Hardware stack levels used:    1
 15764 ;; This function calls:
 15765 ;;		Nothing
 15766 ;; This function is called by:
 15767 ;;		_do_I2C_TX
 15768 ;;		_i2c_ISR
 15769 ;; This function uses a non-reentrant model
 15770 ;;
 15771                           
 15772                           
 15773                           ;psect for function _i2c1_driver_isNACK
 15774  082B                     _i2c1_driver_isNACK:	
 15775                           
 15776                           ;mcc_generated_files/i2c1_driver.c: 163:     return SSP1CON2bits.ACKSTAT;
 15777                           
 15778                           ;incstack = 0
 15779                           ; Regs used in _i2c1_driver_isNACK: [wreg+status,2+status,0]
 15780  082B  0024               	movlb	4	; select bank4
 15781  082C  0E16               	swapf	22,w	;volatile
 15782  082D  0C89               	rrf	9,f
 15783  082E  0C89               	rrf	9,f
 15784  082F  3901               	andlw	1
 15785  0830  00F6               	movwf	??_i2c1_driver_isNACK
 15786  0831  0C76               	rrf	??_i2c1_driver_isNACK,w
 15787  0832  0008               	return
 15788  0833                     __end_of_i2c1_driver_isNACK:	
 15789                           
 15790                           	psect	text94
 15791  17EA                     __ptext94:	
 15792 ;; *************** function i1_i2c1_driver_TXData *****************
 15793 ;; Defined at:
 15794 ;;		line 186 in file "mcc_generated_files/i2c1_driver.c"
 15795 ;; Parameters:    Size  Location     Type
 15796 ;;  d               1    wreg     unsigned char 
 15797 ;; Auto vars:     Size  Location     Type
 15798 ;;  d               1    0[COMMON] unsigned char 
 15799 ;; Return value:  Size  Location     Type
 15800 ;;                  1    wreg      void 
 15801 ;; Registers used:
 15802 ;;		wreg
 15803 ;; Tracked objects:
 15804 ;;		On entry : 0/0
 15805 ;;		On exit  : 0/0
 15806 ;;		Unchanged: 0/0
 15807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15808 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15809 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15810 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15811 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15812 ;;Total ram usage:        1 bytes
 15813 ;; Hardware stack levels used:    1
 15814 ;; This function calls:
 15815 ;;		Nothing
 15816 ;; This function is called by:
 15817 ;;		_do_I2C_SEND_ADR_READ
 15818 ;;		_do_I2C_SEND_ADR_WRITE
 15819 ;;		_do_I2C_TX
 15820 ;; This function uses a non-reentrant model
 15821 ;;
 15822                           
 15823                           
 15824                           ;psect for function i1_i2c1_driver_TXData
 15825  17EA                     i1_i2c1_driver_TXData:	
 15826                           
 15827                           ;incstack = 0
 15828                           ; Regs used in i1_i2c1_driver_TXData: [wreg]
 15829                           ;i1i2c1_driver_TXData@d stored from wreg
 15830  17EA  00F6               	movwf	i1i2c1_driver_TXData@d
 15831                           
 15832                           ;mcc_generated_files/i2c1_driver.c: 186: __attribute__((inline)) void i2c1_driver_TXData
      +                          (char d);mcc_generated_files/i2c1_driver.c: 187: {;mcc_generated_files/i2c1_driver.c: 18
      +                          8:     SSP1BUF = d;
 15833  17EB  0876               	movf	i1i2c1_driver_TXData@d,w
 15834  17EC  0024               	movlb	4	; select bank4
 15835  17ED  0091               	movwf	17	;volatile
 15836  17EE  0008               	return
 15837  17EF                     __end_ofi1_i2c1_driver_TXData:	
 15838                           
 15839                           	psect	text95
 15840  1796                     __ptext95:	
 15841 ;; *************** function i1_i2c1_driver_getRXData *****************
 15842 ;; Defined at:
 15843 ;;		line 171 in file "mcc_generated_files/i2c1_driver.c"
 15844 ;; Parameters:    Size  Location     Type
 15845 ;;		None
 15846 ;; Auto vars:     Size  Location     Type
 15847 ;;		None
 15848 ;; Return value:  Size  Location     Type
 15849 ;;                  1    wreg      unsigned char 
 15850 ;; Registers used:
 15851 ;;		wreg
 15852 ;; Tracked objects:
 15853 ;;		On entry : 0/0
 15854 ;;		On exit  : 0/0
 15855 ;;		Unchanged: 0/0
 15856 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15857 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15858 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15859 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15860 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15861 ;;Total ram usage:        0 bytes
 15862 ;; Hardware stack levels used:    1
 15863 ;; This function calls:
 15864 ;;		Nothing
 15865 ;; This function is called by:
 15866 ;;		_do_I2C_RX
 15867 ;; This function uses a non-reentrant model
 15868 ;;
 15869                           
 15870                           
 15871                           ;psect for function i1_i2c1_driver_getRXData
 15872  1796                     i1_i2c1_driver_getRXData:	
 15873                           
 15874                           ;mcc_generated_files/i2c1_driver.c: 173:     return SSP1BUF;
 15875                           
 15876                           ;incstack = 0
 15877                           ; Regs used in i1_i2c1_driver_getRXData: [wreg]
 15878  1796  0024               	movlb	4	; select bank4
 15879  1797  0811               	movf	17,w	;volatile
 15880  1798  0008               	return
 15881  1799                     __end_ofi1_i2c1_driver_getRXData:	
 15882                           
 15883                           	psect	text96
 15884  17C2                     __ptext96:	
 15885 ;; *************** function i1_i2c1_driver_sendNACK *****************
 15886 ;; Defined at:
 15887 ;;		line 202 in file "mcc_generated_files/i2c1_driver.c"
 15888 ;; Parameters:    Size  Location     Type
 15889 ;;		None
 15890 ;; Auto vars:     Size  Location     Type
 15891 ;;		None
 15892 ;; Return value:  Size  Location     Type
 15893 ;;                  1    wreg      void 
 15894 ;; Registers used:
 15895 ;;		None
 15896 ;; Tracked objects:
 15897 ;;		On entry : 0/0
 15898 ;;		On exit  : 0/0
 15899 ;;		Unchanged: 0/0
 15900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15901 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15902 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15904 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15905 ;;Total ram usage:        0 bytes
 15906 ;; Hardware stack levels used:    1
 15907 ;; This function calls:
 15908 ;;		Nothing
 15909 ;; This function is called by:
 15910 ;;		_do_I2C_DO_NACK_STOP
 15911 ;;		_do_I2C_DO_NACK_RESTART
 15912 ;; This function uses a non-reentrant model
 15913 ;;
 15914                           
 15915                           
 15916                           ;psect for function i1_i2c1_driver_sendNACK
 15917  17C2                     i1_i2c1_driver_sendNACK:	
 15918                           
 15919                           ;mcc_generated_files/i2c1_driver.c: 204:     SSP1CON2bits.ACKDT = 1;
 15920                           
 15921                           ;incstack = 0
 15922                           ; Regs used in i1_i2c1_driver_sendNACK: []
 15923  17C2  0024               	movlb	4	; select bank4
 15924  17C3  1696               	bsf	22,5	;volatile
 15925                           
 15926                           ;mcc_generated_files/i2c1_driver.c: 205:     SSP1CON2bits.ACKEN = 1;
 15927  17C4  1616               	bsf	22,4	;volatile
 15928  17C5  0008               	return
 15929  17C6                     __end_ofi1_i2c1_driver_sendNACK:	
 15930                           
 15931                           	psect	text97
 15932  1786                     __ptext97:	
 15933 ;; *************** function _i2c1_driver_resetBus *****************
 15934 ;; Defined at:
 15935 ;;		line 141 in file "mcc_generated_files/i2c1_driver.c"
 15936 ;; Parameters:    Size  Location     Type
 15937 ;;		None
 15938 ;; Auto vars:     Size  Location     Type
 15939 ;;		None
 15940 ;; Return value:  Size  Location     Type
 15941 ;;                  1    wreg      void 
 15942 ;; Registers used:
 15943 ;;		None
 15944 ;; Tracked objects:
 15945 ;;		On entry : 0/0
 15946 ;;		On exit  : 0/0
 15947 ;;		Unchanged: 0/0
 15948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15949 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15950 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15951 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15952 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15953 ;;Total ram usage:        0 bytes
 15954 ;; Hardware stack levels used:    1
 15955 ;; This function calls:
 15956 ;;		Nothing
 15957 ;; This function is called by:
 15958 ;;		_do_I2C_RESET
 15959 ;; This function uses a non-reentrant model
 15960 ;;
 15961                           
 15962                           
 15963                           ;psect for function _i2c1_driver_resetBus
 15964  1786                     _i2c1_driver_resetBus:	
 15965                           
 15966                           ;incstack = 0
 15967                           ; Regs used in _i2c1_driver_resetBus: []
 15968  1786  0008               	return
 15969  1787                     __end_of_i2c1_driver_resetBus:	
 15970                           
 15971                           	psect	text98
 15972  1793                     __ptext98:	
 15973 ;; *************** function i1_i2c1_driver_startRX *****************
 15974 ;; Defined at:
 15975 ;;		line 166 in file "mcc_generated_files/i2c1_driver.c"
 15976 ;; Parameters:    Size  Location     Type
 15977 ;;		None
 15978 ;; Auto vars:     Size  Location     Type
 15979 ;;		None
 15980 ;; Return value:  Size  Location     Type
 15981 ;;                  1    wreg      void 
 15982 ;; Registers used:
 15983 ;;		None
 15984 ;; Tracked objects:
 15985 ;;		On entry : 0/0
 15986 ;;		On exit  : 0/0
 15987 ;;		Unchanged: 0/0
 15988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15989 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15990 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15991 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15992 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15993 ;;Total ram usage:        0 bytes
 15994 ;; Hardware stack levels used:    1
 15995 ;; This function calls:
 15996 ;;		Nothing
 15997 ;; This function is called by:
 15998 ;;		_do_I2C_RCEN
 15999 ;; This function uses a non-reentrant model
 16000 ;;
 16001                           
 16002                           
 16003                           ;psect for function i1_i2c1_driver_startRX
 16004  1793                     i1_i2c1_driver_startRX:	
 16005                           
 16006                           ;mcc_generated_files/i2c1_driver.c: 168:     SSP1CON2bits.RCEN = 1;
 16007                           
 16008                           ;incstack = 0
 16009                           ; Regs used in i1_i2c1_driver_startRX: []
 16010  1793  0024               	movlb	4	; select bank4
 16011  1794  1596               	bsf	22,3	;volatile
 16012  1795  0008               	return
 16013  1796                     __end_ofi1_i2c1_driver_startRX:	
 16014                           
 16015                           	psect	text99
 16016  0002                     __ptext99:	
 16017 ;; *************** function _returnReset *****************
 16018 ;; Defined at:
 16019 ;;		line 448 in file "mcc_generated_files/drivers/i2c_master.c"
 16020 ;; Parameters:    Size  Location     Type
 16021 ;;  p               1    0[COMMON] PTR void 
 16022 ;;		 -> NULL(0), 
 16023 ;; Auto vars:     Size  Location     Type
 16024 ;;		None
 16025 ;; Return value:  Size  Location     Type
 16026 ;;                  1    wreg      enum E6966
 16027 ;; Registers used:
 16028 ;;		wreg
 16029 ;; Tracked objects:
 16030 ;;		On entry : 0/0
 16031 ;;		On exit  : 0/0
 16032 ;;		Unchanged: 0/0
 16033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16034 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16035 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16036 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16037 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16038 ;;Total ram usage:        1 bytes
 16039 ;; Hardware stack levels used:    1
 16040 ;; This function calls:
 16041 ;;		Nothing
 16042 ;; This function is called by:
 16043 ;;		_i2c_open
 16044 ;;		_do_I2C_DO_ADDRESS_NACK
 16045 ;;		_do_I2C_TX
 16046 ;;		_do_I2C_RX
 16047 ;;		_do_I2C_TX_EMPTY
 16048 ;; This function uses a non-reentrant model
 16049 ;;
 16050                           
 16051                           
 16052                           ;psect for function _returnReset
 16053  0002                     _returnReset:	
 16054                           
 16055                           ;mcc_generated_files/drivers/i2c_master.c: 448: static i2c_operations_t returnReset(void
      +                           *p);mcc_generated_files/drivers/i2c_master.c: 449: {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 450:     return i2c_reset_link;
 16056                           
 16057                           ;incstack = 0
 16058                           ; Regs used in _returnReset: [wreg]
 16059  0002  3005               	movlw	5
 16060  0003  0008               	return
 16061  0004                     __end_of_returnReset:	
 16062                           
 16063                           	psect	text100
 16064  1788                     __ptext100:	
 16065 ;; *************** function _returnStop *****************
 16066 ;; Defined at:
 16067 ;;		line 443 in file "mcc_generated_files/drivers/i2c_master.c"
 16068 ;; Parameters:    Size  Location     Type
 16069 ;;  p               1    0[COMMON] PTR void 
 16070 ;;		 -> NULL(0), 
 16071 ;; Auto vars:     Size  Location     Type
 16072 ;;		None
 16073 ;; Return value:  Size  Location     Type
 16074 ;;                  1    wreg      enum E6966
 16075 ;; Registers used:
 16076 ;;		wreg
 16077 ;; Tracked objects:
 16078 ;;		On entry : 0/0
 16079 ;;		On exit  : 0/0
 16080 ;;		Unchanged: 0/0
 16081 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16082 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16083 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16084 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16085 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16086 ;;Total ram usage:        1 bytes
 16087 ;; Hardware stack levels used:    1
 16088 ;; This function calls:
 16089 ;;		Nothing
 16090 ;; This function is called by:
 16091 ;;		_i2c_open
 16092 ;;		_setCallBack
 16093 ;;		_do_I2C_DO_ADDRESS_NACK
 16094 ;;		_do_I2C_TX
 16095 ;;		_do_I2C_RX
 16096 ;;		_do_I2C_TX_EMPTY
 16097 ;; This function uses a non-reentrant model
 16098 ;;
 16099                           
 16100                           
 16101                           ;psect for function _returnStop
 16102  1788                     _returnStop:	
 16103                           
 16104                           ;mcc_generated_files/drivers/i2c_master.c: 443: static i2c_operations_t returnStop(void 
      +                          *p);mcc_generated_files/drivers/i2c_master.c: 444: {;mcc_generated_files/drivers/i2c_mas
      +                          ter.c: 445:     return i2c_stop;
 16105                           
 16106                           ;incstack = 0
 16107                           ; Regs used in _returnStop: [wreg]
 16108  1788  3001               	movlw	1
 16109  1789  0008               	return
 16110  178A                     __end_of_returnStop:	
 16111                           
 16112                           	psect	text101
 16113  1790                     __ptext101:	
 16114 ;; *************** function i1_i2c1_driver_stop *****************
 16115 ;; Defined at:
 16116 ;;		line 156 in file "mcc_generated_files/i2c1_driver.c"
 16117 ;; Parameters:    Size  Location     Type
 16118 ;;		None
 16119 ;; Auto vars:     Size  Location     Type
 16120 ;;		None
 16121 ;; Return value:  Size  Location     Type
 16122 ;;                  1    wreg      void 
 16123 ;; Registers used:
 16124 ;;		None
 16125 ;; Tracked objects:
 16126 ;;		On entry : 0/0
 16127 ;;		On exit  : 0/0
 16128 ;;		Unchanged: 0/0
 16129 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16130 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16131 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16132 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16133 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16134 ;;Total ram usage:        0 bytes
 16135 ;; Hardware stack levels used:    1
 16136 ;; This function calls:
 16137 ;;		Nothing
 16138 ;; This function is called by:
 16139 ;;		_do_I2C_SEND_STOP
 16140 ;; This function uses a non-reentrant model
 16141 ;;
 16142                           
 16143                           
 16144                           ;psect for function i1_i2c1_driver_stop
 16145  1790                     i1_i2c1_driver_stop:	
 16146                           
 16147                           ;mcc_generated_files/i2c1_driver.c: 158:     SSP1CON2bits.PEN = 1;
 16148                           
 16149                           ;incstack = 0
 16150                           ; Regs used in i1_i2c1_driver_stop: []
 16151  1790  0024               	movlb	4	; select bank4
 16152  1791  1516               	bsf	22,2	;volatile
 16153  1792  0008               	return
 16154  1793                     __end_ofi1_i2c1_driver_stop:	
 16155                           
 16156                           	psect	text102
 16157  178D                     __ptext102:	
 16158 ;; *************** function i1_i2c1_driver_restart *****************
 16159 ;; Defined at:
 16160 ;;		line 151 in file "mcc_generated_files/i2c1_driver.c"
 16161 ;; Parameters:    Size  Location     Type
 16162 ;;		None
 16163 ;; Auto vars:     Size  Location     Type
 16164 ;;		None
 16165 ;; Return value:  Size  Location     Type
 16166 ;;                  1    wreg      void 
 16167 ;; Registers used:
 16168 ;;		None
 16169 ;; Tracked objects:
 16170 ;;		On entry : 0/0
 16171 ;;		On exit  : 0/0
 16172 ;;		Unchanged: 0/0
 16173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16174 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16175 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16176 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16177 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16178 ;;Total ram usage:        0 bytes
 16179 ;; Hardware stack levels used:    1
 16180 ;; This function calls:
 16181 ;;		Nothing
 16182 ;; This function is called by:
 16183 ;;		_do_I2C_SEND_RESTART_READ
 16184 ;;		_do_I2C_SEND_RESTART_WRITE
 16185 ;;		_do_I2C_SEND_RESTART
 16186 ;; This function uses a non-reentrant model
 16187 ;;
 16188                           
 16189                           
 16190                           ;psect for function i1_i2c1_driver_restart
 16191  178D                     i1_i2c1_driver_restart:	
 16192                           
 16193                           ;mcc_generated_files/i2c1_driver.c: 153:     SSP1CON2bits.RSEN = 1;
 16194                           
 16195                           ;incstack = 0
 16196                           ; Regs used in i1_i2c1_driver_restart: []
 16197  178D  0024               	movlb	4	; select bank4
 16198  178E  1496               	bsf	22,1	;volatile
 16199  178F  0008               	return
 16200  1790                     __end_ofi1_i2c1_driver_restart:	
 16201                           
 16202                           	psect	text103
 16203  17BE                     __ptext103:	
 16204 ;; *************** function _i2c1_driver_sendACK *****************
 16205 ;; Defined at:
 16206 ;;		line 196 in file "mcc_generated_files/i2c1_driver.c"
 16207 ;; Parameters:    Size  Location     Type
 16208 ;;		None
 16209 ;; Auto vars:     Size  Location     Type
 16210 ;;		None
 16211 ;; Return value:  Size  Location     Type
 16212 ;;                  1    wreg      void 
 16213 ;; Registers used:
 16214 ;;		None
 16215 ;; Tracked objects:
 16216 ;;		On entry : 0/0
 16217 ;;		On exit  : 0/0
 16218 ;;		Unchanged: 0/0
 16219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16220 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16221 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16222 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16223 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16224 ;;Total ram usage:        0 bytes
 16225 ;; Hardware stack levels used:    1
 16226 ;; This function calls:
 16227 ;;		Nothing
 16228 ;; This function is called by:
 16229 ;;		_do_I2C_DO_ACK
 16230 ;;		_do_I2C_RX
 16231 ;;		_I2C_Send_ACK
 16232 ;; This function uses a non-reentrant model
 16233 ;;
 16234                           
 16235                           
 16236                           ;psect for function _i2c1_driver_sendACK
 16237  17BE                     _i2c1_driver_sendACK:	
 16238                           
 16239                           ;mcc_generated_files/i2c1_driver.c: 198:     SSP1CON2bits.ACKDT = 0;
 16240                           
 16241                           ;incstack = 0
 16242                           ; Regs used in _i2c1_driver_sendACK: []
 16243  17BE  0024               	movlb	4	; select bank4
 16244  17BF  1296               	bcf	22,5	;volatile
 16245                           
 16246                           ;mcc_generated_files/i2c1_driver.c: 199:     SSP1CON2bits.ACKEN = 1;
 16247  17C0  1616               	bsf	22,4	;volatile
 16248  17C1  0008               	return
 16249  17C2                     __end_of_i2c1_driver_sendACK:	
 16250                           
 16251                           	psect	text104
 16252  1785                     __ptext104:	
 16253 ;; *************** function _PIN_MANAGER_IOC *****************
 16254 ;; Defined at:
 16255 ;;		line 120 in file "mcc_generated_files/pin_manager.c"
 16256 ;; Parameters:    Size  Location     Type
 16257 ;;		None
 16258 ;; Auto vars:     Size  Location     Type
 16259 ;;		None
 16260 ;; Return value:  Size  Location     Type
 16261 ;;                  1    wreg      void 
 16262 ;; Registers used:
 16263 ;;		None
 16264 ;; Tracked objects:
 16265 ;;		On entry : 0/0
 16266 ;;		On exit  : 0/0
 16267 ;;		Unchanged: 0/0
 16268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16269 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16270 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16271 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16272 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16273 ;;Total ram usage:        0 bytes
 16274 ;; Hardware stack levels used:    1
 16275 ;; This function calls:
 16276 ;;		Nothing
 16277 ;; This function is called by:
 16278 ;;		_INTERRUPT_InterruptManager
 16279 ;; This function uses a non-reentrant model
 16280 ;;
 16281                           
 16282                           
 16283                           ;psect for function _PIN_MANAGER_IOC
 16284  1785                     _PIN_MANAGER_IOC:	
 16285                           
 16286                           ;incstack = 0
 16287                           ; Regs used in _PIN_MANAGER_IOC: []
 16288  1785  0008               	return
 16289  1786                     __end_of_PIN_MANAGER_IOC:	
 16290                           
 16291                           	psect	text105
 16292  0A1F                     __ptext105:	
 16293 ;; *************** function _EUSART_Transmit_ISR *****************
 16294 ;; Defined at:
 16295 ;;		line 205 in file "mcc_generated_files/eusart.c"
 16296 ;; Parameters:    Size  Location     Type
 16297 ;;		None
 16298 ;; Auto vars:     Size  Location     Type
 16299 ;;		None
 16300 ;; Return value:  Size  Location     Type
 16301 ;;                  1    wreg      void 
 16302 ;; Registers used:
 16303 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16304 ;; Tracked objects:
 16305 ;;		On entry : 0/0
 16306 ;;		On exit  : 0/0
 16307 ;;		Unchanged: 0/0
 16308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16310 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16311 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16312 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16313 ;;Total ram usage:        1 bytes
 16314 ;; Hardware stack levels used:    1
 16315 ;; This function calls:
 16316 ;;		Nothing
 16317 ;; This function is called by:
 16318 ;;		_EUSART_Initialize
 16319 ;;		_INTERRUPT_InterruptManager
 16320 ;; This function uses a non-reentrant model
 16321 ;;
 16322                           
 16323                           
 16324                           ;psect for function _EUSART_Transmit_ISR
 16325  0A1F                     _EUSART_Transmit_ISR:	
 16326                           
 16327                           ;mcc_generated_files/eusart.c: 209:     if(sizeof(eusartTxBuffer) > eusartTxBufferRemain
      +                          ing)
 16328                           
 16329                           ;incstack = 0
 16330                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 16331  0A1F  3008               	movlw	8
 16332  0A20  0020               	movlb	0	; select bank0
 16333  0A21  026E               	subwf	_eusartTxBufferRemaining,w	;volatile
 16334  0A22  1803               	skipnc
 16335  0A23  2A3A               	goto	i1l784
 16336                           
 16337                           ;mcc_generated_files/eusart.c: 210:     {;mcc_generated_files/eusart.c: 211:         TX1
      +                          REG = eusartTxBuffer[eusartTxTail++];
 16338  0A24  0874               	movf	_eusartTxTail,w
 16339  0A25  3EC5               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
 16340  0A26  0086               	movwf	6
 16341  0A27  3001               	movlw	1	; select bank3/4
 16342  0A28  0087               	movwf	7
 16343  0A29  0801               	movf	1,w
 16344  0A2A  0023               	movlb	3	; select bank3
 16345  0A2B  009A               	movwf	26	;volatile
 16346  0A2C  3001               	movlw	1
 16347  0A2D  00F6               	movwf	??_EUSART_Transmit_ISR
 16348  0A2E  0876               	movf	??_EUSART_Transmit_ISR,w
 16349  0A2F  07F4               	addwf	_eusartTxTail,f	;volatile
 16350                           
 16351                           ;mcc_generated_files/eusart.c: 212:         if(sizeof(eusartTxBuffer) <= eusartTxTail)
 16352  0A30  3008               	movlw	8
 16353  0A31  0274               	subwf	_eusartTxTail,w	;volatile
 16354  0A32  1803               	btfsc	3,0
 16355                           
 16356                           ;mcc_generated_files/eusart.c: 213:         {;mcc_generated_files/eusart.c: 214:        
      +                               eusartTxTail = 0;
 16357  0A33  01F4               	clrf	_eusartTxTail	;volatile
 16358                           
 16359                           ;mcc_generated_files/eusart.c: 216:         eusartTxBufferRemaining++;
 16360  0A34  3001               	movlw	1
 16361  0A35  00F6               	movwf	??_EUSART_Transmit_ISR
 16362  0A36  0876               	movf	??_EUSART_Transmit_ISR,w
 16363  0A37  0020               	movlb	0	; select bank0
 16364  0A38  07EE               	addwf	_eusartTxBufferRemaining,f	;volatile
 16365                           
 16366                           ;mcc_generated_files/eusart.c: 217:     }
 16367  0A39  0008               	return
 16368  0A3A                     i1l784:	
 16369                           ;mcc_generated_files/eusart.c: 218:     else
 16370                           
 16371                           
 16372                           ;mcc_generated_files/eusart.c: 219:     {;mcc_generated_files/eusart.c: 220:         PIE
      +                          1bits.TXIE = 0;
 16373  0A3A  0021               	movlb	1	; select bank1
 16374  0A3B  1211               	bcf	17,4	;volatile
 16375  0A3C  0008               	return
 16376  0A3D                     __end_of_EUSART_Transmit_ISR:	
 16377                           
 16378                           	psect	text106
 16379  0CB0                     __ptext106:	
 16380 ;; *************** function _EUSART_Receive_ISR *****************
 16381 ;; Defined at:
 16382 ;;		line 224 in file "mcc_generated_files/eusart.c"
 16383 ;; Parameters:    Size  Location     Type
 16384 ;;		None
 16385 ;; Auto vars:     Size  Location     Type
 16386 ;;		None
 16387 ;; Return value:  Size  Location     Type
 16388 ;;                  1    wreg      void 
 16389 ;; Registers used:
 16390 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16391 ;; Tracked objects:
 16392 ;;		On entry : 0/0
 16393 ;;		On exit  : 0/0
 16394 ;;		Unchanged: 0/0
 16395 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16396 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16397 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16398 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16399 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16400 ;;Total ram usage:        0 bytes
 16401 ;; Hardware stack levels used:    1
 16402 ;; Hardware stack levels required when called:    2
 16403 ;; This function calls:
 16404 ;;		Absolute function
 16405 ;;		_EUSART_DefaultErrorHandler
 16406 ;;		_EUSART_DefaultFramingErrorHandler
 16407 ;;		_EUSART_DefaultOverrunErrorHandler
 16408 ;;		_EUSART_RxDataHandler
 16409 ;; This function is called by:
 16410 ;;		_EUSART_Initialize
 16411 ;;		_INTERRUPT_InterruptManager
 16412 ;; This function uses a non-reentrant model
 16413 ;;
 16414                           
 16415                           
 16416                           ;psect for function _EUSART_Receive_ISR
 16417  0CB0                     _EUSART_Receive_ISR:	
 16418                           
 16419                           ;mcc_generated_files/eusart.c: 227:     eusartRxStatusBuffer[eusartRxHead].status = 0;
 16420                           
 16421                           ;incstack = 0
 16422                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16423  0CB0  0873               	movf	_eusartRxHead,w	;volatile
 16424  0CB1  3E60               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 16425  0CB2  0086               	movwf	6
 16426  0CB3  3001               	movlw	1	; select bank2/3
 16427  0CB4  0087               	movwf	7
 16428  0CB5  0181               	clrf	1
 16429                           
 16430                           ;mcc_generated_files/eusart.c: 229:     if(RC1STAbits.FERR){
 16431  0CB6  0023               	movlb	3	; select bank3
 16432  0CB7  1D1D               	btfss	29,2	;volatile
 16433  0CB8  2CC5               	goto	i1l5562
 16434                           
 16435                           ;mcc_generated_files/eusart.c: 230:         eusartRxStatusBuffer[eusartRxHead].ferr = 1;
 16436  0CB9  0873               	movf	_eusartRxHead,w	;volatile
 16437  0CBA  3E60               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 16438  0CBB  0086               	movwf	6
 16439  0CBC  3001               	movlw	1	; select bank2/3
 16440  0CBD  0087               	movwf	7
 16441  0CBE  1481               	bsf	1,1
 16442                           
 16443                           ;mcc_generated_files/eusart.c: 231:         EUSART_FramingErrorHandler();
 16444  0CBF  0022               	movlb	2	; select bank2
 16445  0CC0  086B               	movf	(_EUSART_FramingErrorHandler+1)^(0+256),w
 16446  0CC1  008A               	movwf	10
 16447  0CC2  086A               	movf	_EUSART_FramingErrorHandler^(0+256),w
 16448  0CC3  000A               	callw
 16449  0CC4  318C               	pagesel	$
 16450  0CC5                     i1l5562:	
 16451                           
 16452                           ;mcc_generated_files/eusart.c: 234:     if(RC1STAbits.OERR){
 16453  0CC5  0023               	movlb	3	; select bank3
 16454  0CC6  1C9D               	btfss	29,1	;volatile
 16455  0CC7  2CD3               	goto	i1l5568
 16456                           
 16457                           ;mcc_generated_files/eusart.c: 235:         eusartRxStatusBuffer[eusartRxHead].oerr = 1;
 16458  0CC8  0873               	movf	_eusartRxHead,w	;volatile
 16459  0CC9  3E60               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 16460  0CCA  0086               	movwf	6
 16461  0CCB  3001               	movlw	1	; select bank2/3
 16462  0CCC  0087               	movwf	7
 16463  0CCD  1501               	bsf	1,2
 16464                           
 16465                           ;mcc_generated_files/eusart.c: 236:         EUSART_OverrunErrorHandler();
 16466  0CCE  0858               	movf	(_EUSART_OverrunErrorHandler+1)^(0+384),w
 16467  0CCF  008A               	movwf	10
 16468  0CD0  0857               	movf	_EUSART_OverrunErrorHandler^(0+384),w
 16469  0CD1  000A               	callw
 16470  0CD2  318C               	pagesel	$
 16471  0CD3                     i1l5568:	
 16472                           
 16473                           ;mcc_generated_files/eusart.c: 239:     if(eusartRxStatusBuffer[eusartRxHead].status){
 16474  0CD3  0873               	movf	_eusartRxHead,w	;volatile
 16475  0CD4  3E60               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 16476  0CD5  0086               	movwf	6
 16477  0CD6  3001               	movlw	1	; select bank2/3
 16478  0CD7  0087               	movwf	7
 16479  0CD8  0801               	movf	1,w
 16480  0CD9  1903               	btfsc	3,2
 16481  0CDA  2CE2               	goto	i1l5572
 16482                           
 16483                           ;mcc_generated_files/eusart.c: 240:         EUSART_ErrorHandler();
 16484  0CDB  0023               	movlb	3	; select bank3
 16485  0CDC  0856               	movf	(_EUSART_ErrorHandler+1)^(0+384),w
 16486  0CDD  008A               	movwf	10
 16487  0CDE  0855               	movf	_EUSART_ErrorHandler^(0+384),w
 16488  0CDF  000A               	callw
 16489  0CE0  318C               	pagesel	$
 16490                           
 16491                           ;mcc_generated_files/eusart.c: 241:     } else {
 16492  0CE1  0008               	return
 16493  0CE2                     i1l5572:	
 16494                           
 16495                           ;mcc_generated_files/eusart.c: 242:         EUSART_RxDataHandler();
 16496  0CE2  3189  216B         	fcall	_EUSART_RxDataHandler
 16497  0CE4  0008               	return
 16498  0CE5                     __end_of_EUSART_Receive_ISR:	
 16499                           
 16500                           	psect	text107
 16501  17BA                     __ptext107:	
 16502 ;; *************** function _EUSART_DefaultOverrunErrorHandler *****************
 16503 ;; Defined at:
 16504 ;;		line 260 in file "mcc_generated_files/eusart.c"
 16505 ;; Parameters:    Size  Location     Type
 16506 ;;		None
 16507 ;; Auto vars:     Size  Location     Type
 16508 ;;		None
 16509 ;; Return value:  Size  Location     Type
 16510 ;;                  1    wreg      void 
 16511 ;; Registers used:
 16512 ;;		None
 16513 ;; Tracked objects:
 16514 ;;		On entry : 0/0
 16515 ;;		On exit  : 0/0
 16516 ;;		Unchanged: 0/0
 16517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16519 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16521 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16522 ;;Total ram usage:        0 bytes
 16523 ;; Hardware stack levels used:    1
 16524 ;; This function calls:
 16525 ;;		Nothing
 16526 ;; This function is called by:
 16527 ;;		_EUSART_Initialize
 16528 ;;		_EUSART_Receive_ISR
 16529 ;; This function uses a non-reentrant model
 16530 ;;
 16531                           
 16532                           
 16533                           ;psect for function _EUSART_DefaultOverrunErrorHandler
 16534  17BA                     _EUSART_DefaultOverrunErrorHandler:	
 16535                           
 16536                           ;mcc_generated_files/eusart.c: 263:     RC1STAbits.CREN = 0;
 16537                           
 16538                           ;incstack = 0
 16539                           ; Regs used in _EUSART_DefaultOverrunErrorHandler: []
 16540  17BA  0023               	movlb	3	; select bank3
 16541  17BB  121D               	bcf	29,4	;volatile
 16542                           
 16543                           ;mcc_generated_files/eusart.c: 264:     RC1STAbits.CREN = 1;
 16544  17BC  161D               	bsf	29,4	;volatile
 16545  17BD  0008               	return
 16546  17BE                     __end_of_EUSART_DefaultOverrunErrorHandler:	
 16547                           
 16548                           	psect	text108
 16549  1784                     __ptext108:	
 16550 ;; *************** function _EUSART_DefaultFramingErrorHandler *****************
 16551 ;; Defined at:
 16552 ;;		line 258 in file "mcc_generated_files/eusart.c"
 16553 ;; Parameters:    Size  Location     Type
 16554 ;;		None
 16555 ;; Auto vars:     Size  Location     Type
 16556 ;;		None
 16557 ;; Return value:  Size  Location     Type
 16558 ;;                  1    wreg      void 
 16559 ;; Registers used:
 16560 ;;		None
 16561 ;; Tracked objects:
 16562 ;;		On entry : 0/0
 16563 ;;		On exit  : 0/0
 16564 ;;		Unchanged: 0/0
 16565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16566 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16567 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16568 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16569 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16570 ;;Total ram usage:        0 bytes
 16571 ;; Hardware stack levels used:    1
 16572 ;; This function calls:
 16573 ;;		Nothing
 16574 ;; This function is called by:
 16575 ;;		_EUSART_Initialize
 16576 ;;		_EUSART_Receive_ISR
 16577 ;; This function uses a non-reentrant model
 16578 ;;
 16579                           
 16580                           
 16581                           ;psect for function _EUSART_DefaultFramingErrorHandler
 16582  1784                     _EUSART_DefaultFramingErrorHandler:	
 16583                           
 16584                           ;incstack = 0
 16585                           ; Regs used in _EUSART_DefaultFramingErrorHandler: []
 16586  1784  0008               	return
 16587  1785                     __end_of_EUSART_DefaultFramingErrorHandler:	
 16588                           
 16589                           	psect	text109
 16590  178A                     __ptext109:	
 16591 ;; *************** function _EUSART_DefaultErrorHandler *****************
 16592 ;; Defined at:
 16593 ;;		line 268 in file "mcc_generated_files/eusart.c"
 16594 ;; Parameters:    Size  Location     Type
 16595 ;;		None
 16596 ;; Auto vars:     Size  Location     Type
 16597 ;;		None
 16598 ;; Return value:  Size  Location     Type
 16599 ;;                  1    wreg      void 
 16600 ;; Registers used:
 16601 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16602 ;; Tracked objects:
 16603 ;;		On entry : 0/0
 16604 ;;		On exit  : 0/0
 16605 ;;		Unchanged: 0/0
 16606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16607 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16608 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16609 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16610 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16611 ;;Total ram usage:        0 bytes
 16612 ;; Hardware stack levels used:    1
 16613 ;; Hardware stack levels required when called:    1
 16614 ;; This function calls:
 16615 ;;		_EUSART_RxDataHandler
 16616 ;; This function is called by:
 16617 ;;		_EUSART_Initialize
 16618 ;;		_EUSART_Receive_ISR
 16619 ;; This function uses a non-reentrant model
 16620 ;;
 16621                           
 16622                           
 16623                           ;psect for function _EUSART_DefaultErrorHandler
 16624  178A                     _EUSART_DefaultErrorHandler:	
 16625                           
 16626                           ;mcc_generated_files/eusart.c: 269:     EUSART_RxDataHandler();
 16627                           
 16628                           ;incstack = 0
 16629                           ; Regs used in _EUSART_DefaultErrorHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 16630  178A  3189  216B         	fcall	_EUSART_RxDataHandler
 16631  178C  0008               	return
 16632  178D                     __end_of_EUSART_DefaultErrorHandler:	
 16633                           
 16634                           	psect	text110
 16635  096B                     __ptext110:	
 16636 ;; *************** function _EUSART_RxDataHandler *****************
 16637 ;; Defined at:
 16638 ;;		line 248 in file "mcc_generated_files/eusart.c"
 16639 ;; Parameters:    Size  Location     Type
 16640 ;;		None
 16641 ;; Auto vars:     Size  Location     Type
 16642 ;;		None
 16643 ;; Return value:  Size  Location     Type
 16644 ;;                  1    wreg      void 
 16645 ;; Registers used:
 16646 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16647 ;; Tracked objects:
 16648 ;;		On entry : 0/0
 16649 ;;		On exit  : 0/0
 16650 ;;		Unchanged: 0/0
 16651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16652 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16653 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16654 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16655 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16656 ;;Total ram usage:        1 bytes
 16657 ;; Hardware stack levels used:    1
 16658 ;; This function calls:
 16659 ;;		Nothing
 16660 ;; This function is called by:
 16661 ;;		_EUSART_Receive_ISR
 16662 ;;		_EUSART_DefaultErrorHandler
 16663 ;; This function uses a non-reentrant model
 16664 ;;
 16665                           
 16666                           
 16667                           ;psect for function _EUSART_RxDataHandler
 16668  096B                     _EUSART_RxDataHandler:	
 16669                           
 16670                           ;mcc_generated_files/eusart.c: 250:     eusartRxBuffer[eusartRxHead++] = RC1REG;
 16671                           
 16672                           ;incstack = 0
 16673                           ; Regs used in _EUSART_RxDataHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
 16674  096B  0023               	movlb	3	; select bank3
 16675  096C  0819               	movf	25,w	;volatile
 16676  096D  00F6               	movwf	??_EUSART_RxDataHandler
 16677  096E  0873               	movf	_eusartRxHead,w
 16678  096F  3EBD               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
 16679  0970  0086               	movwf	6
 16680  0971  3001               	movlw	1	; select bank3/4
 16681  0972  0087               	movwf	7
 16682  0973  0876               	movf	??_EUSART_RxDataHandler,w
 16683  0974  0081               	movwf	1
 16684  0975  3001               	movlw	1
 16685  0976  00F6               	movwf	??_EUSART_RxDataHandler
 16686  0977  0876               	movf	??_EUSART_RxDataHandler,w
 16687  0978  07F3               	addwf	_eusartRxHead,f	;volatile
 16688                           
 16689                           ;mcc_generated_files/eusart.c: 251:     if(sizeof(eusartRxBuffer) <= eusartRxHead)
 16690  0979  3008               	movlw	8
 16691  097A  0273               	subwf	_eusartRxHead,w	;volatile
 16692  097B  1803               	btfsc	3,0
 16693                           
 16694                           ;mcc_generated_files/eusart.c: 252:     {;mcc_generated_files/eusart.c: 253:         eus
      +                          artRxHead = 0;
 16695  097C  01F3               	clrf	_eusartRxHead	;volatile
 16696                           
 16697                           ;mcc_generated_files/eusart.c: 255:     eusartRxCount++;
 16698  097D  3001               	movlw	1
 16699  097E  00F6               	movwf	??_EUSART_RxDataHandler
 16700  097F  0876               	movf	??_EUSART_RxDataHandler,w
 16701  0980  07F1               	addwf	_eusartRxCount,f	;volatile
 16702  0981  0008               	return
 16703  0982                     __end_of_EUSART_RxDataHandler:	
 16704  007E                     btemp	set	126	;btemp
 16705  007E                     int$flags	set	126
 16706  007E                     wtemp0	set	126


Data Sizes:
    Strings     59
    Constant    32
    Data        9
    BSS         163
    Persistent  43
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      12
    BANK0            80     60      80
    BANK1            80     64      80
    BANK2            80     64      80
    BANK3            80      2      59
    BANK4            80      0      68
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    i2c_ISR$2708	const PTR FTN()enum E7120 size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_SEND_ADR_READ(), do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), 
		 -> do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), do_I2C_IDLE(), do_I2C_RESET(), 

    returnStop@p	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    returnReset@p	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    S52$11$0	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 16
		 -> UART_Byte@bits(BANK0[4]), STR_5(CODE[7]), STR_4(CODE[11]), STR_3(CODE[16]), 
		 -> STR_2(CODE[13]), STR_1(CODE[12]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 16
		 -> UART_Byte@bits(BANK0[4]), STR_5(CODE[7]), STR_4(CODE[11]), STR_3(CODE[16]), 
		 -> STR_2(CODE[13]), STR_1(CODE[12]), 

    wireReadDataBlock@val	PTR unsigned char  size(2) Largest target is 64
		 -> readGesture@fifo_data2(BANK1[64]), readGesture@fifo_data(BANK2[64]), 

    Display_Name@string1	PTR unsigned char  size(2) Largest target is 16
		 -> STR_5(CODE[7]), STR_4(CODE[11]), STR_3(CODE[16]), STR_2(CODE[13]), 
		 -> STR_1(CODE[12]), 

    names	PTR unsigned char [4] size(2) Largest target is 16
		 -> STR_4(CODE[11]), STR_3(CODE[16]), STR_2(CODE[13]), STR_1(CODE[12]), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    EUSART_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), Absolute function(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), Absolute function(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), Absolute function(), 

    i2c1_driver_i2cISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), i2c_ISR(), 

    i2c1_driver_busCollisionISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), i2c_busCollisionISR(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), Absolute function(), 

    EUSART_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), Absolute function(), 

    fsmStateTable	const PTR FTN()enum E7120[16] size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_SEND_ADR_READ(), do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), 
		 -> do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), do_I2C_IDLE(), do_I2C_RESET(), 

    S52$callbackPayload	PTR void [6] size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    i2c_status.callbackPayload	PTR void [6] size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    S52$callbackTable	PTR FTN(PTR void ,)enum E6966[6] size(2) Largest target is 1
		 -> returnReset(), returnStop(), 

    i2c_status.callbackTable	PTR FTN(PTR void ,)enum E6966[6] size(2) Largest target is 1
		 -> returnReset(), returnStop(), 

    S52$data_ptr	PTR unsigned char  size(1) Largest target is 0

    i2c_status.data_ptr	PTR unsigned char  size(1) Largest target is 0


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_i2c_ISR
    _i2c_ISR->_do_I2C_DO_ADDRESS_NACK
    _i2c_ISR->_do_I2C_RX
    _i2c_ISR->_do_I2C_TX
    _i2c_ISR->_do_I2C_TX_EMPTY
    _EUSART_Receive_ISR->_EUSART_RxDataHandler
    _EUSART_DefaultErrorHandler->_EUSART_RxDataHandler

Critical Paths under _main in BANK0

    _main->_handleGesture
    _initialize->_setMode
    _setProximityGain->_wireWriteDataByte
    _setProxIntLowThresh->_wireWriteDataByte
    _setProxIntHighThresh->_wireWriteDataByte
    _setLightIntLowThreshold->_wireWriteDataByte
    _setLightIntHighThreshold->_wireWriteDataByte
    _setLEDDrive->_wireWriteDataByte
    _setGestureWaitTime->_wireWriteDataByte
    _setGestureLEDDrive->_wireWriteDataByte
    _setGestureGain->_wireWriteDataByte
    _setGestureExitThresh->_wireWriteDataByte
    _setGestureEnterThresh->_wireWriteDataByte
    _setAmbientLightGain->_wireWriteDataByte
    _handleGesture->_readGesture
    _readGesture->_processGestureData
    _wireReadDataBlock->_I2C_Write_Byte
    _processGestureData->___awdiv
    ___awdiv->___wmul
    _isGestureAvailable->_wireReadDataByte
    _Display_Name->_strlen
    _enableGestureSensor->_setMode
    _setLEDBoost->_wireWriteDataByte
    _setGestureMode->_wireWriteDataByte
    _setGestureIntEnable->_wireWriteDataByte
    _enablePower->_setMode
    _setMode->_getMode
    _wireWriteDataByte->_I2C_Write_Byte
    _getMode->_wireReadDataByte
    _wireReadDataByte->_I2C_Write_Byte
    _I2C_Write_Byte->_i2c1_driver_TXData
    _I2C_Read_Byte->_i2c1_driver_isBufferFull
    _UART_Byte->_strlen
    _SYSTEM_Initialize->_EUSART_Initialize
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _EUSART_Initialize->_EUSART_SetTxInterruptHandler
    _On_Off->_ADC_GetConversion
    _On_Off->_Display_Clear
    _Display_Clear->_SPI_Write
    _SPI_Write->_SPI2_Exchange8bit

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _handleGesture->_readGesture

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    _handleGesture->_readGesture

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   89509
                                              0 BANK3      2     2      0
                      _Display_Clear
                       _Display_Name
                             _On_Off
                         _PIR_Sensor
                  _SYSTEM_Initialize
                          _UART_Byte
                _enableGestureSensor
                      _handleGesture
                         _initialize
                 _isGestureAvailable
 ---------------------------------------------------------------------------------
 (1) _initialize                                           2     2      0   54520
                                             16 BANK0      2     2      0
                   _i2c1_driver_open
                _setAmbientLightGain
              _setGestureEnterThresh
               _setGestureExitThresh
                     _setGestureGain
                _setGestureIntEnable
                 _setGestureLEDDrive
                 _setGestureWaitTime
                        _setLEDDrive
           _setLightIntHighThreshold
            _setLightIntLowThreshold
                            _setMode
               _setProxIntHighThresh
                _setProxIntLowThresh
                   _setProximityGain
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setProximityGain                                     4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setProxIntLowThresh                                  2     2      0    3429
                                             10 BANK0      2     2      0
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setProxIntHighThresh                                 2     2      0    3429
                                             10 BANK0      2     2      0
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setLightIntLowThreshold                              5     3      2    3618
                                             10 BANK0      5     3      2
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setLightIntHighThreshold                             5     3      2    3618
                                             10 BANK0      5     3      2
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setLEDDrive                                          4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureWaitTime                                   3     3      0    3633
                                             10 BANK0      3     3      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureLEDDrive                                   4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureGain                                       4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureExitThresh                                 2     2      0    3429
                                             10 BANK0      2     2      0
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureEnterThresh                                2     2      0    3429
                                             10 BANK0      2     2      0
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setAmbientLightGain                                  3     3      0    3633
                                             10 BANK0      3     3      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _i2c1_driver_open                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _handleGesture                                        1     1      0    9112
                                             59 BANK0      1     1      0
                       _Display_Name
                        _readGesture
 ---------------------------------------------------------------------------------
 (2) _readGesture                                        140   138      2    8036
                                             47 BANK0     12    10      2
                                              0 BANK1     64    64      0
                                              0 BANK2     64    64      0
                      _decodeGesture
                            _getMode
                 _isGestureAvailable
                 _processGestureData
             _resetGestureParameters
                  _wireReadDataBlock
                   _wireReadDataByte
 ---------------------------------------------------------------------------------
 (3) _wireReadDataBlock                                   11     7      4     651
                                              6 BANK0     11     7      4
                        _I2C_ReStart
                      _I2C_Read_Byte
                      _I2C_Send_NACK
                          _I2C_Start
                           _I2C_Stop
                     _I2C_Write_Byte
 ---------------------------------------------------------------------------------
 (3) _processGestureData                                  32    32      0    5864
                                             15 BANK0     32    32      0
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    2396
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              9     5      4    1165
                                              6 BANK0      9     5      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _isGestureAvailable                                   2     2      0     198
                                              9 BANK0      2     2      0
                   _wireReadDataByte
 ---------------------------------------------------------------------------------
 (3) _decodeGesture                                       18    18      0     296
                                              0 BANK0     18    18      0
 ---------------------------------------------------------------------------------
 (2) _Display_Name                                         7     5      2    1076
                                              5 BANK0      7     5      2
                          _SPI_Write
                             _strlen
 ---------------------------------------------------------------------------------
 (1) _enableGestureSensor                                  2     2      0   23076
                                             16 BANK0      2     2      0
                        _enablePower
             _resetGestureParameters
                _setGestureIntEnable
                     _setGestureMode
                        _setLEDBoost
                            _setMode
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setLEDBoost                                          4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureMode                                       3     3      0    3633
                                             10 BANK0      3     3      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureIntEnable                                  3     3      0    3667
                                             10 BANK0      3     3      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (3) _resetGestureParameters                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _enablePower                                          0     0      0    4340
                            _setMode
 ---------------------------------------------------------------------------------
 (2) _setMode                                              5     4      1    4340
                                             11 BANK0      5     4      1
                            _getMode
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _wireWriteDataByte                                    4     1      3    3398
                                              6 BANK0      4     1      3
                          _I2C_Start
                           _I2C_Stop
                     _I2C_Write_Byte
 ---------------------------------------------------------------------------------
 (3) _getMode                                              2     2      0     195
                                              9 BANK0      2     2      0
                   _wireReadDataByte
 ---------------------------------------------------------------------------------
 (2) _wireReadDataByte                                     3     3      0     161
                                              6 BANK0      3     3      0
                        _I2C_ReStart
                      _I2C_Read_Byte
                      _I2C_Send_NACK
                          _I2C_Start
                           _I2C_Stop
                     _I2C_Write_Byte
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Byte                                       5     5      0      96
                                              1 BANK0      5     5      0
                 _i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_TXData                                   1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _I2C_Stop                                             0     0      0       0
                   _i2c1_driver_stop
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_stop                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_Start                                            0     0      0       0
                  _i2c1_driver_start
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_start                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_Send_NACK                                        0     0      0       0
               _i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_sendNACK                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_Read_Byte                                        0     0      0       0
              _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
                _i2c1_driver_startRX
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_startRX                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_isBufferFull                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_getRXData                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_ReStart                                          0     0      0       0
                _i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_restart                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UART_Byte                                           15    15      0     699
                                              5 BANK0     15    15      0
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _strlen                                               5     3      2     310
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     605
                     _ADC_Initialize
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PMD_Initialize
                    _PWM1_Initialize
                    _SPI2_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SPI2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PMD_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0     605
                                              2 BANK0      1     1      0
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetTxInterruptHandler                         2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PIR_Sensor                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _On_Off                                               5     5      0     158
                                              4 BANK0      5     5      0
                  _ADC_GetConversion
                      _Display_Clear
 ---------------------------------------------------------------------------------
 (2) _Display_Clear                                        1     1      0      62
                                              3 BANK0      1     1      0
                          _SPI_Write
 ---------------------------------------------------------------------------------
 (3) _SPI_Write                                            2     2      0      62
                                              1 BANK0      2     2      0
                  _SPI2_Exchange8bit
 ---------------------------------------------------------------------------------
 (4) _SPI2_Exchange8bit                                    1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _ADC_GetConversion                                    4     2      2      31
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                           0     0      0     914
                   Absolute function *
                 _EUSART_Receive_ISR *
                _EUSART_Transmit_ISR *
                    _PIN_MANAGER_IOC
                            _i2c_ISR *
                _i2c_busCollisionISR *
 ---------------------------------------------------------------------------------
 (9) _i2c_busCollisionISR                                  0     0      0       0
      _i2c1_driver_clearBusCollision
 ---------------------------------------------------------------------------------
 (10) _i2c1_driver_clearBusCollision                       0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _i2c_ISR                                              3     3      0     914
                                              3 COMMON     3     3      0
                      _do_I2C_DO_ACK *
             _do_I2C_DO_ADDRESS_NACK *
             _do_I2C_DO_NACK_RESTART *
                _do_I2C_DO_NACK_STOP *
                        _do_I2C_IDLE *
                        _do_I2C_RCEN *
                       _do_I2C_RESET *
                          _do_I2C_RX *
               _do_I2C_SEND_ADR_READ *
              _do_I2C_SEND_ADR_WRITE *
                _do_I2C_SEND_RESTART *
           _do_I2C_SEND_RESTART_READ *
          _do_I2C_SEND_RESTART_WRITE *
                   _do_I2C_SEND_STOP *
                          _do_I2C_TX *
                    _do_I2C_TX_EMPTY *
                 _i2c1_driver_isNACK
                     _mssp1_clearIRQ
 ---------------------------------------------------------------------------------
 (10) _mssp1_clearIRQ                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_TX_EMPTY                                     3     3      0     212
                                              0 COMMON     3     3      0
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                       _mssp1_setIRQ
                        _returnReset *
                         _returnStop *
 ---------------------------------------------------------------------------------
 (11) _mssp1_setIRQ                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_TX                                           3     3      0     234
                                              0 COMMON     3     3      0
           _do_I2C_SEND_RESTART_READ
          _do_I2C_SEND_RESTART_WRITE
                   _do_I2C_SEND_STOP
                 _i2c1_driver_isNACK
                        _returnReset *
                         _returnStop *
               i1_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (10) _i2c1_driver_isNACK                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _do_I2C_SEND_RESTART_WRITE                           0     0      0       0
              i1_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (11) _do_I2C_SEND_RESTART_READ                            0     0      0       0
              i1_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (10) _do_I2C_SEND_ADR_WRITE                               0     0      0      22
               i1_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (10) _do_I2C_SEND_ADR_READ                                0     0      0      22
               i1_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (11) i1_i2c1_driver_TXData                                1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_RX                                           3     3      0     212
                                              0 COMMON     3     3      0
             _do_I2C_DO_NACK_RESTART
                _do_I2C_DO_NACK_STOP
                _i2c1_driver_sendACK
                        _returnReset *
                         _returnStop *
            i1_i2c1_driver_getRXData
 ---------------------------------------------------------------------------------
 (11) i1_i2c1_driver_getRXData                             0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _do_I2C_DO_NACK_STOP                                 0     0      0       0
             i1_i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (11) _do_I2C_DO_NACK_RESTART                              0     0      0       0
             i1_i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (12) i1_i2c1_driver_sendNACK                              0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_RESET                                        0     0      0       0
               _i2c1_driver_resetBus
 ---------------------------------------------------------------------------------
 (11) _i2c1_driver_resetBus                                0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_RCEN                                         0     0      0       0
              i1_i2c1_driver_startRX
 ---------------------------------------------------------------------------------
 (11) i1_i2c1_driver_startRX                               0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_IDLE                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_DO_ADDRESS_NACK                              3     3      0     212
                                              0 COMMON     3     3      0
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                        _returnReset *
                         _returnStop *
 ---------------------------------------------------------------------------------
 (11) _returnStop                                          1     0      1       0
                                              0 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (11) _returnReset                                         1     0      1     212
                                              0 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (11) _do_I2C_SEND_STOP                                    0     0      0       0
                 i1_i2c1_driver_stop
 ---------------------------------------------------------------------------------
 (12) i1_i2c1_driver_stop                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _do_I2C_SEND_RESTART                                 0     0      0       0
              i1_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (12) i1_i2c1_driver_restart                               0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_DO_ACK                                       0     0      0       0
                _i2c1_driver_sendACK
 ---------------------------------------------------------------------------------
 (11) _i2c1_driver_sendACK                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _PIN_MANAGER_IOC                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (9) _EUSART_Receive_ISR                                   0     0      0       0
                   Absolute function *
         _EUSART_DefaultErrorHandler *
  _EUSART_DefaultFramingErrorHandler *
  _EUSART_DefaultOverrunErrorHandler *
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (10) _EUSART_DefaultOverrunErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _EUSART_DefaultFramingErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _EUSART_DefaultErrorHandler                          0     0      0       0
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (10) _EUSART_RxDataHandler                                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Display_Clear
     _SPI_Write
       _SPI2_Exchange8bit
   _Display_Name
     _SPI_Write
       _SPI2_Exchange8bit
     _strlen
   _On_Off
     _ADC_GetConversion
     _Display_Clear
       _SPI_Write
         _SPI2_Exchange8bit
   _PIR_Sensor
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PMD_Initialize
     _PWM1_Initialize
     _SPI2_Initialize
     _TMR2_Initialize
     _WDT_Initialize
   _UART_Byte
     _strlen
   _enableGestureSensor
     _enablePower
       _setMode
         _getMode
           _wireReadDataByte
             _I2C_ReStart
               _i2c1_driver_restart
             _I2C_Read_Byte
               _i2c1_driver_getRXData
               _i2c1_driver_isBufferFull
               _i2c1_driver_startRX
             _I2C_Send_NACK
               _i2c1_driver_sendNACK
             _I2C_Start
               _i2c1_driver_start
             _I2C_Stop
               _i2c1_driver_stop
             _I2C_Write_Byte
               _i2c1_driver_TXData
         _wireWriteDataByte
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
     _resetGestureParameters
     _setGestureIntEnable
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureMode
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setLEDBoost
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setMode
       _getMode
         _wireReadDataByte
           _I2C_ReStart
             _i2c1_driver_restart
           _I2C_Read_Byte
             _i2c1_driver_getRXData
             _i2c1_driver_isBufferFull
             _i2c1_driver_startRX
           _I2C_Send_NACK
             _i2c1_driver_sendNACK
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _wireWriteDataByte
       _I2C_Start
         _i2c1_driver_start
       _I2C_Stop
         _i2c1_driver_stop
       _I2C_Write_Byte
         _i2c1_driver_TXData
   _handleGesture
     _Display_Name
       _SPI_Write
         _SPI2_Exchange8bit
       _strlen
     _readGesture
       _decodeGesture
       _getMode
         _wireReadDataByte
           _I2C_ReStart
             _i2c1_driver_restart
           _I2C_Read_Byte
             _i2c1_driver_getRXData
             _i2c1_driver_isBufferFull
             _i2c1_driver_startRX
           _I2C_Send_NACK
             _i2c1_driver_sendNACK
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
       _isGestureAvailable
         _wireReadDataByte
           _I2C_ReStart
             _i2c1_driver_restart
           _I2C_Read_Byte
             _i2c1_driver_getRXData
             _i2c1_driver_isBufferFull
             _i2c1_driver_startRX
           _I2C_Send_NACK
             _i2c1_driver_sendNACK
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
       _processGestureData
         ___awdiv
           ___wmul (ARG)
         ___wmul
       _resetGestureParameters
       _wireReadDataBlock
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
   _initialize
     _i2c1_driver_open
     _setAmbientLightGain
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureEnterThresh
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureExitThresh
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureGain
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureIntEnable
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureLEDDrive
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureWaitTime
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setLEDDrive
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setLightIntHighThreshold
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setLightIntLowThreshold
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setMode
       _getMode
         _wireReadDataByte
           _I2C_ReStart
             _i2c1_driver_restart
           _I2C_Read_Byte
             _i2c1_driver_getRXData
             _i2c1_driver_isBufferFull
             _i2c1_driver_startRX
           _I2C_Send_NACK
             _i2c1_driver_sendNACK
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setProxIntHighThresh
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setProxIntLowThresh
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setProximityGain
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _wireReadDataByte
       _I2C_ReStart
         _i2c1_driver_restart
       _I2C_Read_Byte
         _i2c1_driver_getRXData
         _i2c1_driver_isBufferFull
         _i2c1_driver_startRX
       _I2C_Send_NACK
         _i2c1_driver_sendNACK
       _I2C_Start
         _i2c1_driver_start
       _I2C_Stop
         _i2c1_driver_stop
       _I2C_Write_Byte
         _i2c1_driver_TXData
     _wireWriteDataByte
       _I2C_Start
         _i2c1_driver_start
       _I2C_Stop
         _i2c1_driver_stop
       _I2C_Write_Byte
         _i2c1_driver_TXData
   _isGestureAvailable
     _wireReadDataByte
       _I2C_ReStart
         _i2c1_driver_restart
       _I2C_Read_Byte
         _i2c1_driver_getRXData
         _i2c1_driver_isBufferFull
         _i2c1_driver_startRX
       _I2C_Send_NACK
         _i2c1_driver_sendNACK
       _I2C_Start
         _i2c1_driver_start
       _I2C_Stop
         _i2c1_driver_stop
       _I2C_Write_Byte
         _i2c1_driver_TXData

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART_Receive_ISR *
     Absolute function(Fake) *
     _EUSART_DefaultErrorHandler *
       _EUSART_RxDataHandler
     _EUSART_DefaultFramingErrorHandler *
     _EUSART_DefaultOverrunErrorHandler *
     _EUSART_RxDataHandler *
   _EUSART_Transmit_ISR *
   _PIN_MANAGER_IOC *
   _i2c_ISR *
     _do_I2C_DO_ACK *
       _i2c1_driver_sendACK
     _do_I2C_DO_ADDRESS_NACK *
       _do_I2C_SEND_RESTART
         i1_i2c1_driver_restart
       _do_I2C_SEND_STOP
         i1_i2c1_driver_stop
       _returnReset *
       _returnStop *
     _do_I2C_DO_NACK_RESTART *
       i1_i2c1_driver_sendNACK
     _do_I2C_DO_NACK_STOP *
       i1_i2c1_driver_sendNACK
     _do_I2C_IDLE *
     _do_I2C_RCEN *
       i1_i2c1_driver_startRX
     _do_I2C_RESET *
       _i2c1_driver_resetBus
     _do_I2C_RX *
       _do_I2C_DO_NACK_RESTART
         i1_i2c1_driver_sendNACK
       _do_I2C_DO_NACK_STOP
         i1_i2c1_driver_sendNACK
       _i2c1_driver_sendACK
       _returnReset *
       _returnStop *
       i1_i2c1_driver_getRXData *
     _do_I2C_SEND_ADR_READ *
       i1_i2c1_driver_TXData
     _do_I2C_SEND_ADR_WRITE *
       i1_i2c1_driver_TXData
     _do_I2C_SEND_RESTART *
       i1_i2c1_driver_restart
     _do_I2C_SEND_RESTART_READ *
       i1_i2c1_driver_restart
     _do_I2C_SEND_RESTART_WRITE *
       i1_i2c1_driver_restart
     _do_I2C_SEND_STOP *
       i1_i2c1_driver_stop
     _do_I2C_TX *
       _do_I2C_SEND_RESTART_READ
         i1_i2c1_driver_restart
       _do_I2C_SEND_RESTART_WRITE
         i1_i2c1_driver_restart
       _do_I2C_SEND_STOP
         i1_i2c1_driver_stop
       _i2c1_driver_isNACK
       _returnReset *
       _returnStop *
       i1_i2c1_driver_TXData *
     _do_I2C_TX_EMPTY *
       _do_I2C_SEND_RESTART
         i1_i2c1_driver_restart
       _do_I2C_SEND_STOP
         i1_i2c1_driver_stop
       _mssp1_setIRQ
       _returnReset *
       _returnStop *
     _i2c1_driver_isNACK *
     _mssp1_clearIRQ *
   _i2c_busCollisionISR *
     _i2c1_driver_clearBusCollision

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     3C      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     40      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     40      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      2      3B      11       73.8%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      44      13       85.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     17B      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     17B      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Tue Apr 16 14:21:02 2019

                ?_EUSART_SetRxInterruptHandler 0020                                   returnReset@p 0076  
                        ?_setGestureExitThresh 0076                             __size_of_I2C_Start 0003  
                                  __CFG_CP$OFF 0000                                   ___awdiv@sign 002C  
                         __size_of_do_I2C_IDLE 0005                                             _on 005C  
                          _do_I2C_SEND_RESTART 17CE                           __size_of_do_I2C_RCEN 0006  
                          ___wmul@multiplicand 0022                                    __CFG_LVP$ON 0000  
                                          l554 08D0                                            l645 0A4E  
             processGestureData@ud_ratio_first 0031                                            l952 0D5B  
                                          l929 070F                                            l992 0FEF  
                                          _PR2 001E                                   __CFG_CPD$OFF 0000  
                       ??_EUSART_RxDataHandler 0076                          __end_of_decodeGesture 04F2  
                         __size_of_I2C_ReStart 0003                 ?_EUSART_SetFramingErrorHandler 0020  
                      __size_of_PMD_Initialize 0008                             I2C_Write_Byte@Byte 0023  
                              _TMR2_Initialize 0853                          __size_of_do_I2C_RESET 0007  
                                          wreg 0009                                     _TXSTA1bits 019E  
                           i1_i2c1_driver_stop 1790                                           l1321 0422  
                                         l1313 03EE                                           l1241 00A9  
                                         l1333 0475                                           l1325 043F  
                                         l1309 03D1                                           l1270 02B4  
                                         l1416 09F0                                           l1264 0264  
                                         l1345 04C4                                           l1337 0492  
                                         l1283 0307                                           l1276 02E8  
                                         l1268 028D                                           l1349 04E1  
                                         l1287 0330                                           l1288 0349  
                                         l1580 0A0C                                           l7020 06C0  
                                         l7006 0651                                           l7102 0B32  
                                         l6320 08A6                                           l6400 0F6C  
                                         l7024 06C9                                           l6314 09F3  
                                         l6410 0F74                                           l7018 065F  
                                         l7202 0AF1                                           l7122 0B0B  
                                         l7220 0BE7                                           l6412 0F80  
                                         l6422 0F9B                                           l7118 0B09  
                                         l6426 0FA3                                           l6418 0F92  
                                         l6610 0205                                           l6530 0E7E  
                                         l7138 091B                                           l6348 08D5  
                                         l7316 08E1                                           l6452 0908  
                                         l6620 022A                                           l6532 0EAD  
                                         l7148 092E                                           l7332 0505  
                                         l7238 0C4A                                           l6702 036D  
                                         l6374 0A06                                           l6614 0217  
                                         l6542 0098                                           l7166 0C7C  
                                         l7078 0954                                           l6480 0F15  
                                         l7256 0ACA                                           l6720 0390  
                                         l6712 0384                                           l6640 0288  
                                         l6624 023C                                           l6616 021A  
                                         l7184 0CAE                                           l7088 0941  
                                         l7336 0507                                           l6466 099E  
                                         l6490 0F3A                                           l7266 08C6  
                                         l6730 03A4                                           l6714 0386  
                                         l6394 0F61                                           l6634 025F  
                                         l6626 023F                                           l6562 00A5  
                                         l6546 009A                                           l7610 075B  
                                         l7098 0B30                                           l6468 09AA  
                                         l6476 0F13                                           l6804 04EE  
                                         l6740 03CC                                           l6732 03AA  
                                         l6724 0398                                           l6708 0379  
                                         l6652 02AF                                           l6564 00FF  
                                         l7612 0778                                           l6750 03FB  
                                         l6726 039A                                           l6718 038E  
                                         l6662 02DB                                           l6670 02EA  
                                         l7606 074E                                           l7544 0E1E  
                                         l6496 0F46                                           l6488 0F2D  
                                         l7464 0791                                           l6744 03E9  
                                         l6808 04F0                                           l6680 032B  
                                         l6648 02A7                                           l6592 0116  
                                         l7704 0D74                                           l6498 0F47  
                                         l7482 078F                                           l6762 043A  
                                         l6674 0302                                           l6578 011A  
                                         l7572 0FDF                                           l7468 0793  
                                         l6780 048D                                           l6596 0164  
                                         l7580 0719                                           l6758 041D  
                                         l7718 0D97                                           l6776 0470  
                                         l6768 044C                                           l7920 0764  
                                         l7576 06FC                                           l6794 04BF  
                                         l6786 049F                                           l6948 0A53  
                                         l6972 0D3E                                           l6980 0617  
                                         l7596 0735                                           l7588 0722  
                                         l6798 04DC                                           l6990 061B  
                                         l7598 0743                                           l6984 06CC  
                                         l6998 062E                                           STR_1 103D  
                                         STR_2 1030                                           STR_3 1020  
                                         STR_4 1049                                           STR_5 1054  
                      __end_of_PWM1_Initialize 08BA                                           _LATA 010C  
                                         _LATB 010D                                           _LATC 010E  
                                         u5045 0F77                                           u5215 0E87  
                                         u5065 0F81                                           u5075 0F8B  
                                         u5164 0F26                                           _PMD0 0911  
                                         u5165 0F25                                           u5085 0F93  
                                         u5405 020F                                           u6205 0C8F  
                                         _PMD1 0912                                           u5174 0F32  
                                         _PMD2 0913                                           u5175 0F31  
                                         u5415 0223                                           u6055 065A  
                                         _PMD3 0914                                           _PMD4 0915  
                                         u5425 0234                                           u6065 0669  
                                         _PMD5 0916                                           u6245 0C2B  
                                         u5605 0310                                           u6085 0B52  
                                         u5615 031C                                           u5535 02C0  
                                         u5455 0250                                           u5295 00B4  
                                         u7047 0713                                           u6095 0B7B  
                                         u5625 0339                                           u5545 02CE  
                                         u5465 026D                                           u7057 06D0  
                                         u6185 0C5D                                           u5475 0279  
                                         u5395 01FE                                           u7067 06E3  
                                         u7077 0D26                                           u5805 03F8  
                                         u5485 0296                                           u7087 08EE  
                                         u5655 0355                                           u7097 0965  
                                         u6705 0FED                                           u5905 049C  
                                         u5835 040E                                           u5595 02F3  
                                         u5845 042B                           ?_do_I2C_SEND_RESTART 0076  
                                         u6655 0DEE                                           u5935 04B0  
                                         u5855 0449                                           u6735 0730  
                                         u6665 0E06                                           u5945 04CD  
                                         u5785 03BD                                           u4985 0A0D  
                                         u6675 0E12                                           u5955 04EB  
                                         u5795 03DA                                           u4995 0A12  
                                         u5885 0461                                           u5895 047E  
                                         u5985 0D48                                           _TMR2 001D  
                                         _WPUA 020C                                           _WPUB 020D  
                                         _WPUC 020E                                   __CFG_WRT$OFF 0000  
                                __CFG_FCMEN$ON 0000              __size_of_do_I2C_SEND_RESTART_READ 0004  
                          ?i1_i2c1_driver_stop 0076                      ?_do_I2C_SEND_RESTART_READ 0076  
                                         _main 0D5F                                           _name 0060  
                    __size_of_do_I2C_SEND_STOP 0004                         __size_of_do_I2C_DO_ACK 0004  
                                         fsr0h 0005                                           fsr1h 0007  
                                         indf0 0000                                           fsr0l 0004  
                                         indf1 0001                                           _prox 00E4  
                                         fsr1l 0006                                           btemp 007E  
                        ??_setGestureIntEnable 002A                               __end_of_I2C_Stop 0800  
                                __CFG_BOREN$ON 0000                        i1_i2c1_driver_getRXData 1796  
                        ?_do_I2C_SEND_ADR_READ 0076                                  __CFG_BORV$LOW 0000  
              ??_i2c1_driver_clearBusCollision 0076                                           start 0047  
                          I2C_Write_Byte@count 0024                                  __CFG_CSWEN$ON 0000  
                                __CFG_MCLRE$ON 0000                                __end_of_i2c_ISR 0AA5  
                     ??_do_I2C_DO_NACK_RESTART 0076                                   ?_readGesture 004F  
                                 _do_I2C_RESET 080F                 __size_of_OSCILLATOR_Initialize 0008  
                __end_of_OSCILLATOR_Initialize 084B                           ??i1_i2c1_driver_stop 0076  
                                        _ADACT 009F                       __end_of_i2c1_driver_open 08A3  
                                        ?_main 0076                                __end_of___awdiv 0FA8  
                     __end_of_i2c1_driver_stop 0803                                ___awdiv@divisor 0026  
                                        _T2CON 001F                     __end_of_i2c1_driver_TXData 1800  
                               __CFG_DEBUG$OFF 0000                                          i1l252 001F  
                                        i1l157 0EEB                                          i1l173 0E42  
                                        i1l261 0045                                          i1l254 002C  
                                        i1l256 0039                                          i1l249 0010  
                                        i1l784 0A3A                                   ?_setLEDBoost 0076  
                              ___awdiv@counter 002B                                   ?_setLEDDrive 0076  
                               _setGestureGain 0C4C                                          _OSCEN 091D  
                           wireReadDataBlock@j 0030                                 _setGestureMode 0AA5  
                                        _TRISA 008C                                          _TRISB 008D  
                                        _TRISC 008E                                          _RXPPS 0E24  
                  __end_of_setProxIntLowThresh 0956                                __end_of_getMode 0899  
                           __size_of_UART_Byte 0058                                    ?_PIR_Sensor 0076  
                        isGestureAvailable@val 002A                        __end_of_PIN_MANAGER_IOC 1786  
                   __end_of_i2c1_driver_isNACK 0833                         __size_of_I2C_Read_Byte 000B  
                               _WDT_Initialize 17E2                                          _names 01CD  
                             _b_i2c_error_flag 006A                   __end_of_setProxIntHighThresh 0943  
                   ?_do_I2C_SEND_RESTART_WRITE 0076                                          _start 006F  
                        ??_do_I2C_SEND_RESTART 0076                                __end_of_setMode 0F56  
                            __end_of_I2C_Start 17BA                                          pclath 000A  
                      __size_of_mssp1_clearIRQ 0003                           i1_i2c1_driver_TXData 17EA  
                 __size_of_setAmbientLightGain 001E                         ?_do_I2C_SEND_ADR_WRITE 0076  
                       __size_of_I2C_Send_NACK 0003                                          status 0003  
                                        wtemp0 007E                             __size_of_SPI_Write 0015  
                     ?_setLightIntLowThreshold 002A                     __end_of_setGestureLEDDrive 0CB0  
                        setGestureWaitTime@val 002C                                  _fsmStateTable 1000  
                                _gesture_data_ 0220                                __initialization 0049  
                       ??_setGestureExitThresh 002A                              _SPI2_Exchange8bit 08C8  
                   processGestureData@lr_delta 004B                                     _i2c_status 01A0  
                                 __end_of_main 0DA1                              _handleGestureFlag 006B  
                   processGestureData@ud_delta 0049                             ?_SPI2_Exchange8bit 0076  
                      __end_of_TMR2_Initialize 085B                    ?_INTERRUPT_InterruptManager 0076  
                       __end_of_setGestureGain 0C7E                      __size_of_setProximityGain 0029  
               ??_EUSART_SetRxInterruptHandler 0022                         __end_of_setGestureMode 0ACC  
                                _do_I2C_DO_ACK 17D6                                         ??_main 005C  
                __size_of_i2c1_driver_sendNACK 0004                       __size_of_SPI2_Initialize 0007  
                          ??_SPI2_Exchange8bit 0020              __size_of_setLightIntHighThreshold 0027  
                __size_of_i2c1_driver_resetBus 0001                         __end_of_WDT_Initialize 17E6  
                      ?_do_I2C_DO_ADDRESS_NACK 0076                      ?_setLightIntHighThreshold 002A  
            setLightIntHighThreshold@threshold 002A                           __end_of_Display_Name 0D5F  
                         __size_of_enablePower 000E      __end_of_EUSART_DefaultFramingErrorHandler 1785  
   __size_of_EUSART_DefaultFramingErrorHandler 0001            ??_EUSART_DefaultFramingErrorHandler 0076  
           ?_EUSART_DefaultFramingErrorHandler 0076              _EUSART_DefaultFramingErrorHandler 1784  
                                       _ADCON0 009D                                         _ADCON1 009E  
                   _EUSART_OverrunErrorHandler 01D7                                         _ADRESH 009C  
                                       _ADRESL 009B                                         _CCPR1H 0292  
                                       _CCPR1L 0291                               ___awdiv@dividend 0028  
                           _processGestureData 008A                                         _ANSELA 018C  
                                       _ANSELB 018D                                         _ANSELC 018E  
                           __CFG_RSTOSC$HFINT1 0000                   setProxIntLowThresh@threshold 002B  
                        ?i1_i2c1_driver_TXData 0076                                         _RC1REG 0199  
                                       _RC1STA 019D                                         _RC2PPS 0EA2  
                                       _RB5PPS 0E9D                                         _RB6PPS 0E9E  
                             ?_PWM1_Initialize 0076                                         _RB7PPS 0E9F  
                                       _RC5PPS 0EA5                                         _ODCONA 028C  
                                       _ODCONB 028D                                         _ODCONC 028E  
                                       i1l4900 0BA0                                         i1l4920 0EC4  
                                       i1l4912 0EBE                                         i1l5480 0A8F  
                                       i1l5562 0CC5                                         i1l5572 0CE2  
                                       i1l4916 0EC1                                         i1l4934 0F05  
                                       i1l4926 0EC7                      ??i1_i2c1_driver_getRXData 0076  
                                       i1l5568 0CD3                                         i1l4960 0E47  
                                       i1l4890 0B9A                                         i1l4980 0BEF  
                                       i1l4956 0E44                                         i1l4894 0B9D  
                                       i1l4966 0E4A                                         i1l4976 0BEC  
                                       i1l4992 0BF6                                         i1l4986 0BF3  
                                       i1l7922 0E5F                                         i1l7924 0EDD  
                                       i1l7926 0BB5                                         i1l7928 0C0B  
                             _wireReadDataByte 0A5B                                         _OSCFRQ 091F  
                      ?_resetGestureParameters 0076                         ??_do_I2C_SEND_ADR_READ 0076  
                                       _TX1REG 019A                                         _WDTCON 0097  
                                       _TX1STA 019E                                      ??_i2c_ISR 0079  
                                       _TXREG1 019A                            ?_processGestureData 0076  
                            _gesture_lr_delta_ 0066                                 __CFG_PWRTE$OFF 0000  
                setProxIntHighThresh@threshold 002B                      __end_of_SPI2_Exchange8bit 08D7  
                                       _On_Off 0DE4                              _gesture_lr_count_ 0062  
                          wireReadDataByte@reg 0027                          _i2c1_driver_getRXData 17AB  
                          wireReadDataByte@val 0028                              _gesture_ud_delta_ 0068  
                            __end_of_UART_Byte 1000                    __end_of_do_I2C_DO_NACK_STOP 17DE  
                                _I2C_Read_Byte 08A3                     __end_of_isGestureAvailable 090A  
                            _gesture_ud_count_ 0064                            __size_of_PIR_Sensor 000F  
                                       ___wmul 0A03                                      ??___awdiv 002A  
        __end_of_i2c1_driver_clearBusCollision 17A2         __size_of_i2c1_driver_clearBusCollision 0003  
                _i2c1_driver_clearBusCollision 179F                     __end_of_setGestureWaitTime 0AF3  
                               __CFG_STVREN$ON 0000                __size_of_do_I2C_DO_NACK_RESTART 0004  
                          _EUSART_Transmit_ISR 0A1F                               ___awdiv@quotient 002D  
                               ?_do_I2C_DO_ACK 0076                                ?_setGestureGain 0076  
                                _I2C_Send_NACK 17B1                                      ??_getMode 0029  
                              ?_setGestureMode 0076                                         _strlen 0999  
                      ??_setGestureEnterThresh 002A                           ??_processGestureData 002F  
                            __end_of_SPI_Write 096B                    __end_of_i2c1_driver_sendACK 17C2  
                               _PMD_Initialize 084B                 __end_of_do_I2C_DO_ADDRESS_NACK 0BBE  
                                    ?_I2C_Stop 0076                             Display_Name@length 0028  
                                    ??_setMode 002C                                ?_WDT_Initialize 0076  
                  __end_of_i2c1_driver_restart 17A8                                   ?_returnReset 0076  
                     ADC_GetConversion@channel 0023                              readGesture@motion 0053  
                  __end_of_i2c1_driver_startRX 17B1                               ?_PIN_MANAGER_IOC 0076  
                         ?_EUSART_Transmit_ISR 0076                 __end_of_resetGestureParameters 0999  
                            _SYSTEM_Initialize 09B1                        __end_of__initialization 0086  
                             _do_I2C_SEND_STOP 17D2                             __size_of_do_I2C_RX 0046  
                           __size_of_do_I2C_TX 004F                             ?_SYSTEM_Initialize 0076  
                       setGestureWaitTime@time 002B                       __size_of_do_I2C_TX_EMPTY 0031  
         __end_of_EUSART_SetTxInterruptHandler 0890          __size_of_EUSART_SetTxInterruptHandler 0009  
                 _EUSART_SetTxInterruptHandler 0887                                 ?_I2C_Read_Byte 0076  
                               __pcstackCOMMON 0076                                   __pidataBANK0 1787  
                                 __pidataBANK3 085B                            ??_SYSTEM_Initialize 0023  
                        i1i2c1_driver_TXData@d 0076                           _setProxIntHighThresh 0930  
                               _gesture_state_ 00E6                                 ?_I2C_Send_NACK 0076  
                             ?_TMR2_Initialize 0076                          i1_i2c1_driver_restart 178D  
                       __end_of_PMD_Initialize 0853                          i1_i2c1_driver_startRX 1793  
                         __size_of_readGesture 00F3                          __end_of_handleGesture 077B  
            __size_of_i2c1_driver_isBufferFull 0007                                     ??_I2C_Stop 0020  
                         _eusartRxStatusBuffer 0160                      ?_i2c1_driver_isBufferFull 0076  
                           _gesture_far_count_ 00E8                           __size_of_setLEDBoost 0032  
                         __size_of_setLEDDrive 0029                ??_EUSART_SetOverrunErrorHandler 0022  
                       _do_I2C_DO_NACK_RESTART 17DE                         ??i1_i2c1_driver_TXData 0076  
                    __end_of_SYSTEM_Initialize 09CC                          ??_EUSART_Transmit_ISR 0076  
                            ??_SPI2_Initialize 0020                                 _mssp1_clearIRQ 179C  
                                   __pbssBANK0 005C                                     __pbssBANK1 00E0  
                                   __pbssBANK2 0160                                     __pbssBANK3 01A0  
                                   __pbssBANK4 0220                           wireWriteDataByte@reg 0029  
                         wireWriteDataByte@val 0026                            getMode@enable_value 002A  
                               UART_Byte@F7536 00E0                       ??i1_i2c1_driver_sendNACK 0076  
                  __size_of_EUSART_Receive_ISR 0035                         ?_i2c1_driver_getRXData 0076  
                   __size_of_SPI2_Exchange8bit 000F                                        ?_On_Off 0076  
                 __size_of_i2c_busCollisionISR 0003                                     __pmaintext 0D5F  
                        __end_of_Display_Clear 08F7                                  ??_do_I2C_IDLE 0076  
                                ??_do_I2C_RCEN 0076                  ?_EUSART_SetTxInterruptHandler 0020  
             _EUSART_TxDefaultInterruptHandler 016E                        setGestureLEDDrive@drive 002D  
                                      ?___wmul 0020                                __CFG_PPS1WAY$ON 0000  
                              ??_do_I2C_DO_ACK 0076                   __size_of_enableGestureSensor 0064  
                                   __pintentry 0004                          ?_setProxIntHighThresh 0076  
                                      _CCP1CON 0293                        __size_of_I2C_Write_Byte 001C  
                                ??_I2C_ReStart 0020                               _setProximityGain 0B6A  
                                  setMode@mode 002F                   ??_EUSART_DefaultErrorHandler 0077  
                              ?_PMD_Initialize 0076                            _setAmbientLightGain 07DF  
                      __size_of_ADC_Initialize 0008                          __size_of_Display_Name 0041  
               ?_i2c1_driver_clearBusCollision 0076                                        ?_strlen 0020  
                            ?_i2c1_driver_open 0076                              __end_of_do_I2C_RX 0E6E  
                            __end_of_do_I2C_TX 0F07                              ?_i2c1_driver_stop 0076  
                                _eusartRxCount 0071                              _wireReadDataBlock 0E6E  
                                      _SP1BRGH 019C                                        _SP1BRGL 019B  
                           ??_i2c1_driver_open 0020                             ??_i2c1_driver_stop 0020  
                                      _OSCCON1 0919                                        _OSCCON3 091B  
                                   _brightness 005E                                  ?_mssp1_setIRQ 0076  
                                 ??_PIR_Sensor 0020                  __size_of_EUSART_RxDataHandler 0017  
                                      _OSCTUNE 091E                           wireReadDataBlock@len 0028  
                         wireReadDataBlock@reg 002F                           wireReadDataBlock@val 0026  
                                      _SSP1ADD 0212                                        _SSP2ADD 021A  
                                      _SLRCONA 030C                                        _SLRCONB 030D  
                                      _SLRCONC 030E                                        _SSP1BUF 0211  
                       __end_of_mssp1_clearIRQ 179F                                        _SSP2BUF 0219  
                           ?_wireReadDataBlock 0026                                        _SSP1MSK 0213  
                     ??_EUSART_SetErrorHandler 0022                              SPI_Write@incoming 0022  
                  __end_of_setGestureIntEnable 0BE9                        ??_do_I2C_SEND_ADR_WRITE 0076  
              processGestureData@lr_ratio_last 0037                    ??_do_I2C_SEND_RESTART_WRITE 0076  
                                 readGesture@i 0059                             _i2c1_driver_TXData 17FA  
                         ?_setAmbientLightGain 0076                             _i2c1_driver_i2cISR 00EC  
                          ??_wireReadDataBlock 002A                                        _i2c_ISR 0A7F  
                                    _I2C_Start 17B7                                ??_I2C_Read_Byte 0021  
                                setMode@enable 002B            __size_of_EUSART_DefaultErrorHandler 0003  
                           _i2c1_driver_isNACK 082B                         __size_of_decodeGesture 0191  
                              __size_of_On_Off 0044                            ?_i2c1_driver_TXData 0076  
                                 _Display_Name 0D1E                                ??_I2C_Send_NACK 0020  
                                      ___awdiv 0F56                                __size_of___wmul 001C  
                           __end_of_PIR_Sensor 08E6                         ?i1_i2c1_driver_restart 0076  
                            ??_do_I2C_TX_EMPTY 0076                            ?_i2c1_driver_isNACK 0076  
                       ?i1_i2c1_driver_startRX 0076                       __end_of_wireReadDataByte 0A7F  
                                   _initialize 04F2                                        _getMode 0890  
             __size_of_setLightIntLowThreshold 0027                             _setGestureLEDDrive 0C7E  
                                      __ptext1 04F2                                        __ptext2 0B6A  
                                      __ptext3 0943                                        __ptext4 0930  
                                      __ptext5 0B1A                                        __ptext6 0AF3  
                                      __ptext7 0B41                                        __ptext8 0ACC  
                                      __ptext9 0C7E                    __size_ofi1_i2c1_driver_stop 0003  
                          __end_of_do_I2C_IDLE 17F4                      __end_of_wireReadDataBlock 0EB8  
                          __end_of_do_I2C_RCEN 17FA                                __size_of_strlen 0018  
                        _OSCILLATOR_Initialize 0843                                      _T2CONbits 001F  
                  __end_of_do_I2C_SEND_RESTART 17D2                                 ??_mssp1_setIRQ 0076  
                         ??_i2c1_driver_TXData 0020                                        _setMode 0F07  
                     ??_PIN_MANAGER_Initialize 0020                            __end_of_I2C_ReStart 17AB  
                          ?_setGestureLEDDrive 0076                                        _printed 006D  
                              ?_mssp1_clearIRQ 0076                       _do_I2C_SEND_RESTART_READ 17C6  
                   __size_of_SYSTEM_Initialize 001B                                        clrloop0 0804  
                         __size_of_returnReset 0002                           end_of_initialization 0086  
                         ??_i2c1_driver_isNACK 0076                          ??_setAmbientLightGain 002A  
                 __size_of_setProxIntLowThresh 0013          __end_of_EUSART_SetOverrunErrorHandler 087E  
       __size_of_EUSART_SetOverrunErrorHandler 0009                  _EUSART_SetOverrunErrorHandler 0875  
                                      init_ram 0809                   __end_of_i2c1_driver_sendNACK 17EA  
                                      initloop 080A                __size_ofi1_i2c1_driver_sendNACK 0004  
                                   ?_I2C_Start 0076                  enableGestureSensor@interrupts 0031  
                            _EUSART_Initialize 0DA1                   __end_of_i2c1_driver_resetBus 1787  
                setGestureExitThresh@threshold 002B                           ??_setGestureLEDDrive 002A  
                           readGesture@gstatus 0055                             ?_EUSART_Initialize 0076  
                                 initialize@id 0031                               ??_setGestureGain 002A  
                       ??_setProxIntHighThresh 002A                               ??_setGestureMode 002A  
                    _do_I2C_SEND_RESTART_WRITE 17CA                            Display_Name@string1 0025  
                __size_of_setGestureExitThresh 0013                                        strlen@a 0023  
                                      strlen@s 0020                                      _UART_Byte 0FA8  
                          ??_EUSART_Initialize 0022                               ??_WDT_Initialize 0020  
                            _wireWriteDataByte 09CC                 ??_EUSART_SetTxInterruptHandler 0022  
                                   _returnStop 1788                                      _PORTCbits 000E  
                     __end_of_do_I2C_SEND_STOP 17D6                                  ??_enablePower 0030  
                           ?_wireWriteDataByte 0026                setLightIntHighThreshold@val_low 002D  
               __size_of_setGestureEnterThresh 0013                  __end_of_setGestureEnterThresh 091D  
                                _decodeGesture 0361                             _isGestureAvailable 08F7  
                           _setGestureWaitTime 0ACC                                      _SPI_Write 0956  
                            __size_of_I2C_Stop 0003                                    returnStop@p 0076  
                          ??_wireWriteDataByte 0029                               __CFG_FEXTOSC$OFF 0000  
              __size_of_EUSART_SetErrorHandler 0009                processGestureData@ud_ratio_last 0035  
                          ?_isGestureAvailable 0076                            ?_setGestureWaitTime 0076  
                    __end_of_EUSART_Initialize 0DE4                                    _CCP1CONbits 0293  
                                    On_Off@val 0027                          SPI2_Exchange8bit@data 0020  
                __size_of_do_I2C_SEND_ADR_READ 0008                          setProximityGain@drive 002D  
                     __size_of_PWM1_Initialize 000C                                 __end_of_On_Off 0E28  
             __end_of_i2c1_driver_isBufferFull 082B                                    _do_I2C_IDLE 17EF  
                                  _do_I2C_RCEN 17F4                      __end_of_wireWriteDataByte 09E7  
                               _I2C_Write_Byte 09E7             __end_of_EUSART_DefaultErrorHandler 178D  
                   _EUSART_DefaultErrorHandler 178A                           ??_isGestureAvailable 0029  
                               __end_of___wmul 0A1F                           ??_setGestureWaitTime 002A  
                                   ?_UART_Byte 0076                                    ?_initialize 0076  
                                  _I2C_ReStart 17A8                                 _ADC_Initialize 083B  
                       i1_i2c1_driver_sendNACK 17C2                         ?_OSCILLATOR_Initialize 0076  
                     _setLightIntHighThreshold 0AF3                     __size_of_wireReadDataBlock 004A  
                              _gesture_motion_ 0168                                _SPI2_Initialize 081D  
                 __size_of_do_I2C_DO_NACK_STOP 0004                    __size_of_processGestureData 02D7  
                               ?_decodeGesture 0076                                 __end_of_strlen 09B1  
                      ?_do_I2C_DO_NACK_RESTART 0076                            start_initialization 0049  
                           setGestureGain@gain 002D                            _i2c_busCollisionISR 17A2  
              __size_of_PIN_MANAGER_Initialize 0039                       ?i1_i2c1_driver_getRXData 0076  
                                   ?_SPI_Write 0076   EUSART_SetRxInterruptHandler@interruptHandler 0020  
 EUSART_SetTxInterruptHandler@interruptHandler 0020               setLightIntHighThreshold@val_high 002E  
                          _enableGestureSensor 077B                            __end_of_enablePower 08C8  
                 __size_of_i2c1_driver_sendACK 0004                        ??_i2c1_driver_getRXData 0020  
                     __end_of_setProximityGain 0B93                   __size_of_i2c1_driver_restart 0003  
                     processGestureData@d_last 0042                   __size_of_i2c1_driver_startRX 0003  
                     processGestureData@l_last 0043                                    ??_I2C_Start 0020  
                     processGestureData@r_last 0044                       __size_of_PIN_MANAGER_IOC 0001  
                     processGestureData@u_last 0041                        _processGestureData$1800 0039  
                      _processGestureData$1801 003B                        _processGestureData$1802 003D  
                      _processGestureData$1803 003F                                       ??_On_Off 0024  
               ?_EUSART_SetOverrunErrorHandler 0020                           ?_i2c_busCollisionISR 0076  
                             __CFG_LPBOREN$OFF 0000                           __end_of_mssp1_setIRQ 179C  
                       __end_of_I2C_Write_Byte 0A03                     _EUSART_FramingErrorHandler 016A  
                             ??_PMD_Initialize 0020                setLightIntLowThreshold@val_high 002E  
                                     ??___wmul 0024                         _EUSART_SetErrorHandler 0863  
                         ?_enableGestureSensor 0076                                    _CCPTMRSbits 029F  
                                ??_readGesture 0051                         __end_of_ADC_Initialize 0843  
                                ?_do_I2C_RESET 0076                                    __pdataBANK0 006F  
                                  __pdataBANK3 01CD                             setGestureMode@mode 002B  
                      _setLightIntLowThreshold 0B1A                      setGestureIntEnable@enable 002C  
                     setAmbientLightGain@drive 002B                                    ?_returnStop 0076  
                                     ??_strlen 0022                 __end_of_do_I2C_DO_NACK_RESTART 17E2  
                                ??_setLEDBoost 002A                                  ??_setLEDDrive 002A  
                         _i2c1_driver_sendNACK 17E6                    __end_of_EUSART_Transmit_ISR 0A3D  
                       setGestureIntEnable@val 002B                                    __pbssCOMMON 0070  
                                    ___latbits 0002                                      _adcResult 006C  
                         _i2c1_driver_resetBus 1786                                  __pcstackBANK0 0020  
                                __pcstackBANK1 00A0                                  __pcstackBANK2 0120  
                     __size_of_TMR2_Initialize 0008                                      _do_I2C_RX 0E28  
                                    _do_I2C_TX 0EB8                 __size_of_do_I2C_SEND_ADR_WRITE 0007  
                __size_ofi1_i2c1_driver_TXData 0005                     __end_of_EUSART_Receive_ISR 0CE5  
                __end_of_do_I2C_SEND_ADR_WRITE 081D                          readGesture@fifo_data2 00A0  
                   __size_of_EUSART_Initialize 0043                      __size_of_i2c1_driver_open 000A  
                        readGesture@fifo_level 0058                      __size_of_i2c1_driver_stop 0003  
             _EUSART_RxDefaultInterruptHandler 016C                                       ?_i2c_ISR 0076  
                          __size_of_initialize 0116                                _do_I2C_TX_EMPTY 0BE9  
                                    __pnvBANK0 006E                                      __pnvBANK2 016A  
                                    __pnvBANK3 01D5                         __size_of_handleGesture 0080  
                        ??_i2c_busCollisionISR 0076                          __end_of_fsmStateTable 1020  
                 __end_of_EUSART_RxDataHandler 0982                         _PIN_MANAGER_Initialize 0CE5  
                      ??i1_i2c1_driver_restart 0076                        ??i1_i2c1_driver_startRX 0076  
                              ?_I2C_Write_Byte 0076                                  UART_Byte@bits 002E  
                        ??_enableGestureSensor 0030                        __end_of_SPI2_Initialize 0824  
                               ??_do_I2C_RESET 0076                                       ?___awdiv 0026  
                                    __ptext100 1788                                      __ptext101 1790  
                                    __ptext110 096B                                      __ptext102 178D  
                                    __ptext103 17BE                                      __ptext104 1785  
                                    __ptext105 0A1F                                      __ptext106 0CB0  
                                    __ptext107 17BA                                      __ptext108 1784  
                                    __ptext109 178A                     __size_of_wireWriteDataByte 001B  
                     ??_do_I2C_DO_ADDRESS_NACK 0076                                ?_ADC_Initialize 0076  
                  _i2c1_driver_busCollisionISR 00EE                                   _eusartRxHead 0073  
                                 _eusartTxHead 0075                                   _eusartRxTail 0072  
                                 _eusartTxTail 0074                                    ??_UART_Byte 0025  
                          _setProxIntLowThresh 0943                          __end_of_do_I2C_DO_ACK 17DA  
                            ??_PWM1_Initialize 0020                   ??_INTERRUPT_InterruptManager 007C  
                     _i2c1_driver_isBufferFull 0824                                       ?_getMode 0076  
                              ??_decodeGesture 0020                                UART_Byte@tempOn 0026  
                            ?_wireReadDataByte 0076                     ??_do_I2C_SEND_RESTART_READ 0076  
                        ?_i2c1_driver_sendNACK 0076                __end_ofi1_i2c1_driver_getRXData 1799  
                      _eusartTxBufferRemaining 006E                               ??_mssp1_clearIRQ 0076  
                                     _BAUD1CON 019F                                    _enablePower 08BA  
                           ??_wireReadDataByte 0026                            __end_of_readGesture 06FB  
                        ?_i2c1_driver_resetBus 0076             __size_of_do_I2C_SEND_RESTART_WRITE 0004  
                                     _I2C_Stop 07FD                       ??_resetGestureParameters 0020  
                                     ?_setMode 002B                                     ?_do_I2C_RX 0076  
                                   ?_do_I2C_TX 0076                               __CFG_WDTE$SWDTEN 0000  
                                  ??_SPI_Write 0021                              _i2c1_driver_start 17B4  
                       __size_of_Display_Clear 0011                            __end_of_setLEDBoost 0C4C  
                          __end_of_setLEDDrive 0B6A                                     UART_Byte@i 0032  
                         ?_setProxIntLowThresh 0076                          readGesture@bytes_read 0056  
                           ?_i2c1_driver_start 0076                                 _eusartRxBuffer 01BD  
                               _eusartTxBuffer 01C5                                 ___wmul@product 0024  
       EUSART_SetErrorHandler@interruptHandler 0020                                       _LATCbits 010E  
                          __size_of_returnStop 0002                                      clear_ram0 0803  
                                     _PIE0bits 0090                                       _PIE1bits 0091  
                 __size_of_setGestureIntEnable 002B                              _eusartRxLastError 0070  
                          _gesture_near_count_ 00EA                            ??_i2c1_driver_start 0020  
          __size_of_INTERRUPT_InterruptManager 0043                                       _PIR0bits 0010  
                                     _PIR1bits 0011                ??_EUSART_SetFramingErrorHandler 0022  
                        __end_of_I2C_Read_Byte 08AE                      ??_setLightIntLowThreshold 002C  
                                     _SSP1CON1 0215                                       _SSP1CON2 0216  
                                     _SSP2CON1 021D      __end_of_EUSART_DefaultOverrunErrorHandler 17BE  
   __size_of_EUSART_DefaultOverrunErrorHandler 0004            ??_EUSART_DefaultOverrunErrorHandler 0076  
           ?_EUSART_DefaultOverrunErrorHandler 0076              _EUSART_DefaultOverrunErrorHandler 17BA  
                               setLEDBoost@val 002C                              UART_Byte@tempName 002A  
                                     _SSP1STAT 0214                                       _SSP2STAT 021C  
                   __end_ofi1_i2c1_driver_stop 1793                              ??_PIN_MANAGER_IOC 0076  
                            UART_Byte@tempProx 0028                          __end_of_I2C_Send_NACK 17B4  
                               setLEDDrive@val 002C               processGestureData@lr_ratio_first 0033  
                                   _ADCON0bits 009D                              ___wmul@multiplier 0020  
                            ?_do_I2C_SEND_STOP 0076                      processGestureData@d_first 0046  
                                _handleGesture 06FB                      __end_of_i2c1_driver_start 17B7  
                                ??_returnReset 0077                             ??_do_I2C_SEND_STOP 0076  
                  __size_of_i2c1_driver_TXData 0006                    __end_of_setAmbientLightGain 07FD  
                    processGestureData@l_first 0047              __end_of_do_I2C_SEND_RESTART_WRITE 17CE  
                      __end_of_do_I2C_TX_EMPTY 0C1A                   __end_of_setGestureExitThresh 0930  
                    processGestureData@r_first 0048                      processGestureData@u_first 0045  
                        ??_setProxIntLowThresh 002A                   __size_of_do_I2C_SEND_RESTART 0004  
                  __size_of_i2c1_driver_isNACK 0008                              setGestureGain@val 002C  
                        __size_of_mssp1_setIRQ 0003                              ??_TMR2_Initialize 0020  
                          _do_I2C_DO_NACK_STOP 17DA                               __size_of_i2c_ISR 0026  
                   ??_setLightIntHighThreshold 002C                              _ADC_GetConversion 0A3D  
                  __size_of_setGestureLEDDrive 0032                                 setMode@reg_val 002E  
               setLightIntLowThreshold@val_low 002D                                   ?_do_I2C_IDLE 0076  
                                _Display_Clear 08E6                                   ?_do_I2C_RCEN 0076  
                            setGestureMode@val 002C                               ?_SPI2_Initialize 0076  
                      ?i1_i2c1_driver_sendNACK 0076                        ??_OSCILLATOR_Initialize 0020  
                          _EUSART_ErrorHandler 01D5                             ?_ADC_GetConversion 0020  
                          _i2c1_driver_sendACK 17BE                               __size_of___awdiv 0052  
                __size_of_setProxIntHighThresh 0013                                    _readGesture 0608  
              __size_of_do_I2C_DO_ADDRESS_NACK 002B                    ?_EUSART_DefaultErrorHandler 0076  
                          i2c1_driver_TXData@d 0020                         ??_i2c1_driver_sendNACK 0020  
                                 ??_initialize 0030                                   ?_I2C_ReStart 0076  
                          _i2c1_driver_restart 17A5               setLightIntLowThreshold@threshold 002A  
                         ?_do_I2C_DO_NACK_STOP 0076                            _i2c1_driver_startRX 17AE  
                               ?_handleGesture 0076                   __end_of_do_I2C_SEND_ADR_READ 083B  
                             __size_of_getMode 0009                         ??_i2c1_driver_resetBus 0076  
                         readGesture@fifo_data 0120                                    _setLEDBoost 0C1A  
                          ??_ADC_GetConversion 0022                                    _setLEDDrive 0B41  
              __size_of_resetGestureParameters 0017                           _EUSART_RxDataHandler 096B  
                                 _mssp1_setIRQ 1799                __end_of_setLightIntLowThreshold 0B41  
                                  ??_do_I2C_RX 0076                                    ??_do_I2C_TX 0076  
                        setGestureLEDDrive@val 002C                               __size_of_setMode 004F  
                                     __ptext10 0C4C                                       __ptext11 091D  
                                     __ptext20 0F56                                       __ptext12 090A  
                                     __ptext21 08F7                                       __ptext13 07DF  
                                     __ptext30 0F07                                       __ptext22 0361  
                                     __ptext14 0899                                       __ptext31 09CC  
                                     __ptext23 0D1E                                       __ptext15 06FB  
                                     __ptext40 17B1                                       __ptext32 0890  
                                     __ptext24 077B                                       __ptext16 0608  
                                     __ptext41 17E6                                       __ptext33 0A5B  
                                     __ptext25 0C1A                                       __ptext17 0E6E  
                                     __ptext50 09B1                                       __ptext42 08A3  
                                     __ptext34 09E7                                       __ptext26 0AA5  
                                     __ptext18 008A                                       __ptext51 17E2  
                                     __ptext43 17AE                                       __ptext35 17FA  
                                     __ptext27 0BBE                                       __ptext19 0A03  
                                     __ptext60 087E                                       __ptext52 0853  
                                     __ptext44 0824                                       __ptext36 07FD  
                                     __ptext28 0982                                       __ptext61 0875  
                                     __ptext53 081D                                       __ptext45 17AB  
                                     __ptext37 0800                                       __ptext29 08BA  
                                     __ptext70 0A3D                                       __ptext62 086C  
                                     __ptext54 08AE                                       __ptext46 17A8  
                                     __ptext38 17B7                                       __ptext63 0863  
                                     __ptext55 084B                                       __ptext47 17A5  
                                     __ptext39 17B4                                       __ptext80 17DA  
                                     __ptext72 17A2                                       __ptext64 083B  
                                     __ptext56 0CE5                                       __ptext48 0FA8  
                                     __ptext81 17D6                                       __ptext73 179F  
                                     __ptext65 08D7                                       __ptext57 0843  
                                     __ptext49 0999                                       __ptext90 080F  
                                     __ptext82 17F4                                       __ptext74 0A7F  
                                     __ptext66 0DE4                                       __ptext58 0DA1  
                                     __ptext91 0BE9                                       __ptext83 0816  
                                     __ptext75 179C                                       __ptext67 08E6  
                                     __ptext59 0887                                       __ptext92 1799  
                                     __ptext84 0833                                       __ptext76 0E28  
                                     __ptext68 0956                                       __ptext93 082B  
                                     __ptext85 17D2                                       __ptext77 0EB8  
                                     __ptext69 08C8                                       __ptext94 17EA  
                                     __ptext86 17CE                                       __ptext78 0B93  
                                     __ptext95 1796                                       __ptext87 17CA  
                                     __ptext79 17DE                                       __ptext96 17C2  
                                     __ptext88 17C6                                       __ptext97 1786  
                                     __ptext89 17EF                                       __ptext98 1793  
                                     __ptext99 0002                          _setGestureEnterThresh 090A  
                                 _SSP1CON1bits 0215                                   _SSP1CON2bits 0216  
               setGestureEnterThresh@threshold 002B                                   _SSP2CON1bits 021D  
                         ?_i2c1_driver_sendACK 0076                           __end_of_do_I2C_RESET 0816  
                         ?_i2c1_driver_restart 0076                            __end_of_returnReset 0004  
                             _i2c1_driver_open 0899                               _i2c1_driver_stop 0800  
                                __size_of_main 0042                           ?_i2c1_driver_startRX 0076  
                            ?_setProximityGain 0076                 __size_of_i2c1_driver_getRXData 0003  
                __end_of_i2c1_driver_getRXData 17AE                             __end_of_initialize 0608  
                    __end_of_ADC_GetConversion 0A5B                        ?_EUSART_SetErrorHandler 0020  
                           ??_setProximityGain 002A               __size_ofi1_i2c1_driver_getRXData 0003  
                           _decodeGesture$1810 002C                             _decodeGesture$1811 002E  
                           _decodeGesture$1812 0030                             _decodeGesture$1805 0022  
                           _decodeGesture$1806 0024                             _decodeGesture$1807 0026  
                           _decodeGesture$1808 0028                             _decodeGesture$1809 002A  
                                   _RC1STAbits 019D                                 ?_Display_Clear 0076  
               __end_ofi1_i2c1_driver_sendNACK 17C6  EUSART_SetOverrunErrorHandler@interruptHandler 0020  
                                     int$flags 007E             __end_of_INTERRUPT_InterruptManager 0047  
                   _INTERRUPT_InterruptManager 0004          __end_of_EUSART_SetFramingErrorHandler 0875  
       __size_of_EUSART_SetFramingErrorHandler 0009                  _EUSART_SetFramingErrorHandler 086C  
                                 _SSP1STATbits 0214                    __size_of_isGestureAvailable 0013  
                                Display_Name@i 002A                            setProximityGain@val 002C  
             __end_of_do_I2C_SEND_RESTART_READ 17CA                    __size_of_setGestureWaitTime 0027  
                   __end_of_processGestureData 0361                                   ??_returnStop 0077  
                                 _SSP2STATbits 021C                          ??_do_I2C_DO_NACK_STOP 0076  
                      __size_of_setGestureGain 0032                                     _INTCONbits 000B  
                      __size_of_setGestureMode 0027                     __size_of_i2c1_driver_start 0003  
                        ?_EUSART_RxDataHandler 0076                         setAmbientLightGain@val 002C  
                        ??_i2c1_driver_sendACK 0076                               ?_do_I2C_TX_EMPTY 0076  
                      __size_of_WDT_Initialize 0004                         _do_I2C_DO_ADDRESS_NACK 0B93  
                                     intlevel1 0000                          ??_i2c1_driver_restart 0020  
                        ??_i2c1_driver_startRX 0020                        ?_PIN_MANAGER_Initialize 0076  
                             ??_I2C_Write_Byte 0021                 __end_of_EUSART_SetErrorHandler 086C  
                            __CFG_CLKOUTEN$OFF 0000                             __end_of_returnStop 178A  
                              _PWM1_Initialize 08AE                               ??_ADC_Initialize 0020  
         __end_of_EUSART_SetRxInterruptHandler 0887          __size_of_EUSART_SetRxInterruptHandler 0009  
                 _EUSART_SetRxInterruptHandler 087E                         _resetGestureParameters 0982  
                   ??_i2c1_driver_isBufferFull 0020                                  ?_Display_Name 0025  
               __size_ofi1_i2c1_driver_restart 0003                  __end_ofi1_i2c1_driver_restart 1790  
                           _EUSART_Receive_ISR 0CB0  EUSART_SetFramingErrorHandler@interruptHandler 0020  
               __size_ofi1_i2c1_driver_startRX 0003                   __end_ofi1_i2c1_driver_TXData 17EF  
                __end_ofi1_i2c1_driver_startRX 1796                           _setGestureExitThresh 091D  
                              ??_handleGesture 005B                                  __pstringtext1 1000  
                                __pstringtext2 1020                                  __pstringtext3 1030  
                                __pstringtext4 103D                                  __pstringtext5 1049  
                                __pstringtext6 1054                                  __pstringtext7 0000  
                          ?_EUSART_Receive_ISR 0076                                     _SSP1DATPPS 0E21  
                                 ?_enablePower 0076                                     _SSP2DATPPS 0E1E  
                                   _SSP1CLKPPS 0E20                            _setGestureIntEnable 0BBE  
                                   _SSP2CLKPPS 0E1D                               setLEDBoost@boost 002D  
                       ?_setGestureEnterThresh 0076                            UART_Byte@tempBright 002C  
                                  _returnReset 0002                                     _PIR_Sensor 08D7  
                                   _TX1STAbits 019E                   __size_of_EUSART_Transmit_ISR 001E  
               __end_of_PIN_MANAGER_Initialize 0D1E                    __end_of_i2c_busCollisionISR 17A5  
                    __size_of_wireReadDataByte 0024                               setLEDDrive@drive 002D  
                          processGestureData@i 004D                                _PIN_MANAGER_IOC 1785  
                         ??_EUSART_Receive_ISR 0077                    __end_of_enableGestureSensor 07DF  
                        _do_I2C_SEND_ADR_WRITE 0816                           ?_setGestureIntEnable 0076  
                   __size_of_ADC_GetConversion 001E                           _do_I2C_SEND_ADR_READ 0833  
                              ??_Display_Clear 0023               __end_of_setLightIntHighThreshold 0B1A  
                               ??_Display_Name 0027  
