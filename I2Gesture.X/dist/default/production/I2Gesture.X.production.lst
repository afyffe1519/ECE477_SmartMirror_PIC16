

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Wed Apr 03 10:30:12 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F18345
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	idataBANK2,global,class=CODE,delta=2
     7                           	psect	stringtext1,global,class=STRCODE,delta=2
     8                           	psect	stringtext2,global,class=STRCODE,delta=2
     9                           	psect	stringtext3,global,class=STRCODE,delta=2
    10                           	psect	stringtext4,global,class=STRCODE,delta=2
    11                           	psect	stringtext5,global,class=STRCODE,delta=2
    12                           	psect	cinit,global,class=CODE,merge=1,delta=2
    13                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    19                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    20                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    21                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    22                           	psect	inittext,global,class=CODE,delta=2
    23                           	psect	clrtext,global,class=CODE,delta=2
    24                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    25                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    26                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    27                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    28                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    29                           	psect	text1,local,class=CODE,merge=1,delta=2
    30                           	psect	text2,local,class=CODE,merge=1,delta=2
    31                           	psect	text3,local,class=CODE,merge=1,delta=2
    32                           	psect	text4,local,class=CODE,merge=1,delta=2
    33                           	psect	text5,local,class=CODE,merge=1,delta=2
    34                           	psect	text6,local,class=CODE,merge=1,delta=2
    35                           	psect	text7,local,class=CODE,merge=1,delta=2
    36                           	psect	text8,local,class=CODE,merge=1,delta=2
    37                           	psect	text9,local,class=CODE,merge=1,delta=2
    38                           	psect	text10,local,class=CODE,merge=1,delta=2
    39                           	psect	text11,local,class=CODE,merge=1,delta=2
    40                           	psect	text12,local,class=CODE,merge=1,delta=2
    41                           	psect	text13,local,class=CODE,merge=1,delta=2
    42                           	psect	text14,local,class=CODE,merge=1,delta=2
    43                           	psect	text15,local,class=CODE,merge=1,delta=2
    44                           	psect	text16,local,class=CODE,merge=1,delta=2
    45                           	psect	text17,local,class=CODE,merge=1,delta=2
    46                           	psect	text18,local,class=CODE,merge=1,delta=2
    47                           	psect	text19,local,class=CODE,merge=1,delta=2,group=1
    48                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    49                           	psect	text21,local,class=CODE,merge=1,delta=2
    50                           	psect	text22,local,class=CODE,merge=1,delta=2
    51                           	psect	text23,local,class=CODE,merge=1,delta=2
    52                           	psect	text24,local,class=CODE,merge=1,delta=2
    53                           	psect	text25,local,class=CODE,merge=1,delta=2
    54                           	psect	text26,local,class=CODE,merge=1,delta=2
    55                           	psect	text27,local,class=CODE,merge=1,delta=2
    56                           	psect	text28,local,class=CODE,merge=1,delta=2
    57                           	psect	text29,local,class=CODE,merge=1,delta=2
    58                           	psect	text30,local,class=CODE,merge=1,delta=2
    59                           	psect	text31,local,class=CODE,merge=1,delta=2
    60                           	psect	text32,local,class=CODE,merge=1,delta=2
    61                           	psect	text33,local,class=CODE,merge=1,delta=2
    62                           	psect	text34,local,class=CODE,merge=1,inline,delta=2
    63                           	psect	text35,local,class=CODE,merge=1,delta=2
    64                           	psect	text36,local,class=CODE,merge=1,inline,delta=2
    65                           	psect	text37,local,class=CODE,merge=1,delta=2
    66                           	psect	text38,local,class=CODE,merge=1,inline,delta=2
    67                           	psect	text39,local,class=CODE,merge=1,delta=2
    68                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    69                           	psect	text41,local,class=CODE,merge=1,delta=2
    70                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    71                           	psect	text43,local,class=CODE,merge=1,inline,delta=2
    72                           	psect	text44,local,class=CODE,merge=1,inline,delta=2
    73                           	psect	text45,local,class=CODE,merge=1,delta=2
    74                           	psect	text46,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text47,local,class=CODE,merge=1,delta=2
    76                           	psect	text48,local,class=CODE,merge=1,delta=2
    77                           	psect	text49,local,class=CODE,merge=1,delta=2
    78                           	psect	text50,local,class=CODE,merge=1,delta=2
    79                           	psect	text51,local,class=CODE,merge=1,delta=2
    80                           	psect	text52,local,class=CODE,merge=1,delta=2
    81                           	psect	text53,local,class=CODE,merge=1,delta=2
    82                           	psect	text54,local,class=CODE,merge=1,delta=2
    83                           	psect	text55,local,class=CODE,merge=1,delta=2
    84                           	psect	text56,local,class=CODE,merge=1,delta=2
    85                           	psect	text57,local,class=CODE,merge=1,delta=2
    86                           	psect	text58,local,class=CODE,merge=1,delta=2
    87                           	psect	text59,local,class=CODE,merge=1,delta=2,group=2
    88                           	psect	text60,local,class=CODE,merge=1,delta=2
    89                           	psect	text61,local,class=CODE,merge=1,delta=2
    90                           	psect	text62,local,class=CODE,merge=1,delta=2
    91                           	psect	text63,local,class=CODE,merge=1,delta=2
    92                           	psect	text64,local,class=CODE,merge=1,delta=2
    93                           	psect	text65,local,class=CODE,merge=1,delta=2
    94                           	psect	intentry,global,class=CODE,delta=2
    95                           	psect	text67,local,class=CODE,merge=1,delta=2
    96                           	psect	text68,local,class=CODE,merge=1,inline,delta=2
    97                           	psect	text69,local,class=CODE,merge=1,delta=2
    98                           	psect	text70,local,class=CODE,merge=1,inline,delta=2
    99                           	psect	text71,local,class=CODE,merge=1,delta=2
   100                           	psect	text72,local,class=CODE,merge=1,delta=2
   101                           	psect	text73,local,class=CODE,merge=1,delta=2
   102                           	psect	text74,local,class=CODE,merge=1,delta=2
   103                           	psect	text75,local,class=CODE,merge=1,delta=2
   104                           	psect	text76,local,class=CODE,merge=1,delta=2
   105                           	psect	text77,local,class=CODE,merge=1,delta=2
   106                           	psect	text78,local,class=CODE,merge=1,delta=2
   107                           	psect	text79,local,class=CODE,merge=1,delta=2
   108                           	psect	text80,local,class=CODE,merge=1,delta=2
   109                           	psect	text81,local,class=CODE,merge=1,delta=2
   110                           	psect	text82,local,class=CODE,merge=1,delta=2
   111                           	psect	text83,local,class=CODE,merge=1,delta=2
   112                           	psect	text84,local,class=CODE,merge=1,delta=2
   113                           	psect	text85,local,class=CODE,merge=1,delta=2
   114                           	psect	text86,local,class=CODE,merge=1,delta=2
   115                           	psect	text87,local,class=CODE,merge=1,inline,delta=2
   116                           	psect	text88,local,class=CODE,merge=1,inline,delta=2
   117                           	psect	text89,local,class=CODE,merge=1,inline,delta=2
   118                           	psect	text90,local,class=CODE,merge=1,inline,delta=2
   119                           	psect	text91,local,class=CODE,merge=1,inline,delta=2
   120                           	psect	text92,local,class=CODE,merge=1,inline,delta=2
   121                           	psect	text93,local,class=CODE,merge=1,inline,delta=2
   122                           	psect	text94,local,class=CODE,merge=1,delta=2
   123                           	psect	text95,local,class=CODE,merge=1,delta=2
   124                           	psect	text96,local,class=CODE,merge=1,inline,delta=2
   125                           	psect	text97,local,class=CODE,merge=1,inline,delta=2
   126                           	psect	text98,local,class=CODE,merge=1,inline,delta=2
   127                           	psect	text99,local,class=CODE,merge=1,delta=2
   128                           	dabs	1,0x7E,2
   129  0000                     
   130                           ; Version 2.05
   131                           ; Generated 20/12/2018 GMT
   132                           ; 
   133                           ; Copyright © 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
   134                           ; All rights reserved.
   135                           ; 
   136                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   137                           ; 
   138                           ; Redistribution and use in source and binary forms, with or without modification, are
   139                           ; permitted provided that the following conditions are met:
   140                           ; 
   141                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   142                           ;        conditions and the following disclaimer.
   143                           ; 
   144                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   145                           ;        of conditions and the following disclaimer in the documentation and/or other
   146                           ;        materials provided with the distribution.
   147                           ; 
   148                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   149                           ;        software without specific prior written permission.
   150                           ; 
   151                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   152                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   153                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   154                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   155                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   156                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   157                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   158                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   159                           ; 
   160                           ; 
   161                           ; Code-generator required, PIC16F18345 Definitions
   162                           ; 
   163                           ; SFR Addresses
   164  0000                     	;# 
   165  0001                     	;# 
   166  0002                     	;# 
   167  0003                     	;# 
   168  0004                     	;# 
   169  0005                     	;# 
   170  0006                     	;# 
   171  0007                     	;# 
   172  0008                     	;# 
   173  0009                     	;# 
   174  000A                     	;# 
   175  000B                     	;# 
   176  000C                     	;# 
   177  000D                     	;# 
   178  000E                     	;# 
   179  0010                     	;# 
   180  0011                     	;# 
   181  0012                     	;# 
   182  0013                     	;# 
   183  0014                     	;# 
   184  0015                     	;# 
   185  0015                     	;# 
   186  0016                     	;# 
   187  0016                     	;# 
   188  0017                     	;# 
   189  0018                     	;# 
   190  0019                     	;# 
   191  0019                     	;# 
   192  001A                     	;# 
   193  001B                     	;# 
   194  001C                     	;# 
   195  001D                     	;# 
   196  001E                     	;# 
   197  001F                     	;# 
   198  008C                     	;# 
   199  008D                     	;# 
   200  008E                     	;# 
   201  0090                     	;# 
   202  0091                     	;# 
   203  0092                     	;# 
   204  0093                     	;# 
   205  0094                     	;# 
   206  0097                     	;# 
   207  009B                     	;# 
   208  009B                     	;# 
   209  009C                     	;# 
   210  009D                     	;# 
   211  009E                     	;# 
   212  009F                     	;# 
   213  010C                     	;# 
   214  010D                     	;# 
   215  010E                     	;# 
   216  0111                     	;# 
   217  0112                     	;# 
   218  0113                     	;# 
   219  0114                     	;# 
   220  0115                     	;# 
   221  0116                     	;# 
   222  0117                     	;# 
   223  0118                     	;# 
   224  0119                     	;# 
   225  018C                     	;# 
   226  018D                     	;# 
   227  018E                     	;# 
   228  0197                     	;# 
   229  0199                     	;# 
   230  0199                     	;# 
   231  0199                     	;# 
   232  019A                     	;# 
   233  019A                     	;# 
   234  019A                     	;# 
   235  019B                     	;# 
   236  019B                     	;# 
   237  019B                     	;# 
   238  019B                     	;# 
   239  019B                     	;# 
   240  019C                     	;# 
   241  019C                     	;# 
   242  019C                     	;# 
   243  019D                     	;# 
   244  019D                     	;# 
   245  019D                     	;# 
   246  019E                     	;# 
   247  019E                     	;# 
   248  019E                     	;# 
   249  019F                     	;# 
   250  019F                     	;# 
   251  019F                     	;# 
   252  019F                     	;# 
   253  019F                     	;# 
   254  020C                     	;# 
   255  020D                     	;# 
   256  020E                     	;# 
   257  0211                     	;# 
   258  0211                     	;# 
   259  0212                     	;# 
   260  0212                     	;# 
   261  0213                     	;# 
   262  0213                     	;# 
   263  0214                     	;# 
   264  0214                     	;# 
   265  0215                     	;# 
   266  0215                     	;# 
   267  0215                     	;# 
   268  0215                     	;# 
   269  0216                     	;# 
   270  0216                     	;# 
   271  0217                     	;# 
   272  0217                     	;# 
   273  0219                     	;# 
   274  021A                     	;# 
   275  021B                     	;# 
   276  021C                     	;# 
   277  021D                     	;# 
   278  021D                     	;# 
   279  021E                     	;# 
   280  021F                     	;# 
   281  028C                     	;# 
   282  028D                     	;# 
   283  028E                     	;# 
   284  0291                     	;# 
   285  0291                     	;# 
   286  0292                     	;# 
   287  0293                     	;# 
   288  0294                     	;# 
   289  0295                     	;# 
   290  0295                     	;# 
   291  0296                     	;# 
   292  0297                     	;# 
   293  0298                     	;# 
   294  029F                     	;# 
   295  030C                     	;# 
   296  030D                     	;# 
   297  030E                     	;# 
   298  0311                     	;# 
   299  0311                     	;# 
   300  0312                     	;# 
   301  0313                     	;# 
   302  0314                     	;# 
   303  0315                     	;# 
   304  0315                     	;# 
   305  0316                     	;# 
   306  0317                     	;# 
   307  0318                     	;# 
   308  038C                     	;# 
   309  038D                     	;# 
   310  038E                     	;# 
   311  0391                     	;# 
   312  0392                     	;# 
   313  0393                     	;# 
   314  0394                     	;# 
   315  0395                     	;# 
   316  0396                     	;# 
   317  0397                     	;# 
   318  0398                     	;# 
   319  0399                     	;# 
   320  039A                     	;# 
   321  039C                     	;# 
   322  039D                     	;# 
   323  039E                     	;# 
   324  039F                     	;# 
   325  0411                     	;# 
   326  0411                     	;# 
   327  0412                     	;# 
   328  0413                     	;# 
   329  0414                     	;# 
   330  0415                     	;# 
   331  0416                     	;# 
   332  0417                     	;# 
   333  0418                     	;# 
   334  0418                     	;# 
   335  0419                     	;# 
   336  041A                     	;# 
   337  041B                     	;# 
   338  041C                     	;# 
   339  041D                     	;# 
   340  041E                     	;# 
   341  041F                     	;# 
   342  0498                     	;# 
   343  0498                     	;# 
   344  0499                     	;# 
   345  049A                     	;# 
   346  049B                     	;# 
   347  049B                     	;# 
   348  049C                     	;# 
   349  049D                     	;# 
   350  049E                     	;# 
   351  049F                     	;# 
   352  0617                     	;# 
   353  0618                     	;# 
   354  0619                     	;# 
   355  0619                     	;# 
   356  061A                     	;# 
   357  061B                     	;# 
   358  061C                     	;# 
   359  061C                     	;# 
   360  061F                     	;# 
   361  0691                     	;# 
   362  0692                     	;# 
   363  0693                     	;# 
   364  0694                     	;# 
   365  0695                     	;# 
   366  0696                     	;# 
   367  0697                     	;# 
   368  0698                     	;# 
   369  0699                     	;# 
   370  0711                     	;# 
   371  0712                     	;# 
   372  0713                     	;# 
   373  0714                     	;# 
   374  0715                     	;# 
   375  0716                     	;# 
   376  0717                     	;# 
   377  0718                     	;# 
   378  0719                     	;# 
   379  0891                     	;# 
   380  0891                     	;# 
   381  0891                     	;# 
   382  0891                     	;# 
   383  0891                     	;# 
   384  0891                     	;# 
   385  0892                     	;# 
   386  0892                     	;# 
   387  0892                     	;# 
   388  0893                     	;# 
   389  0893                     	;# 
   390  0893                     	;# 
   391  0893                     	;# 
   392  0893                     	;# 
   393  0893                     	;# 
   394  0894                     	;# 
   395  0894                     	;# 
   396  0894                     	;# 
   397  0895                     	;# 
   398  0895                     	;# 
   399  0895                     	;# 
   400  0896                     	;# 
   401  0896                     	;# 
   402  0896                     	;# 
   403  089B                     	;# 
   404  0911                     	;# 
   405  0912                     	;# 
   406  0913                     	;# 
   407  0914                     	;# 
   408  0915                     	;# 
   409  0916                     	;# 
   410  0918                     	;# 
   411  0919                     	;# 
   412  091A                     	;# 
   413  091B                     	;# 
   414  091C                     	;# 
   415  091D                     	;# 
   416  091E                     	;# 
   417  091F                     	;# 
   418  0E0F                     	;# 
   419  0E10                     	;# 
   420  0E11                     	;# 
   421  0E12                     	;# 
   422  0E13                     	;# 
   423  0E14                     	;# 
   424  0E15                     	;# 
   425  0E16                     	;# 
   426  0E17                     	;# 
   427  0E18                     	;# 
   428  0E19                     	;# 
   429  0E1A                     	;# 
   430  0E1B                     	;# 
   431  0E1C                     	;# 
   432  0E1D                     	;# 
   433  0E1E                     	;# 
   434  0E1F                     	;# 
   435  0E20                     	;# 
   436  0E21                     	;# 
   437  0E22                     	;# 
   438  0E24                     	;# 
   439  0E25                     	;# 
   440  0E28                     	;# 
   441  0E29                     	;# 
   442  0E2A                     	;# 
   443  0E2B                     	;# 
   444  0E2C                     	;# 
   445  0E2D                     	;# 
   446  0E2E                     	;# 
   447  0E2F                     	;# 
   448  0E90                     	;# 
   449  0E91                     	;# 
   450  0E92                     	;# 
   451  0E94                     	;# 
   452  0E95                     	;# 
   453  0E9C                     	;# 
   454  0E9D                     	;# 
   455  0E9E                     	;# 
   456  0E9F                     	;# 
   457  0EA0                     	;# 
   458  0EA1                     	;# 
   459  0EA2                     	;# 
   460  0EA3                     	;# 
   461  0EA4                     	;# 
   462  0EA5                     	;# 
   463  0EA6                     	;# 
   464  0EA7                     	;# 
   465  0F0F                     	;# 
   466  0F10                     	;# 
   467  0F11                     	;# 
   468  0F12                     	;# 
   469  0F13                     	;# 
   470  0F14                     	;# 
   471  0F15                     	;# 
   472  0F16                     	;# 
   473  0F17                     	;# 
   474  0F18                     	;# 
   475  0F19                     	;# 
   476  0F1A                     	;# 
   477  0F1B                     	;# 
   478  0F1C                     	;# 
   479  0F1D                     	;# 
   480  0F1E                     	;# 
   481  0F1F                     	;# 
   482  0F20                     	;# 
   483  0F21                     	;# 
   484  0F22                     	;# 
   485  0F23                     	;# 
   486  0F24                     	;# 
   487  0F25                     	;# 
   488  0F26                     	;# 
   489  0F27                     	;# 
   490  0F28                     	;# 
   491  0F29                     	;# 
   492  0F2A                     	;# 
   493  0F2B                     	;# 
   494  0F2C                     	;# 
   495  0F2D                     	;# 
   496  0F2E                     	;# 
   497  0F2F                     	;# 
   498  0F30                     	;# 
   499  0F31                     	;# 
   500  0F32                     	;# 
   501  0F33                     	;# 
   502  0F34                     	;# 
   503  0F35                     	;# 
   504  0F36                     	;# 
   505  0F37                     	;# 
   506  0FE4                     	;# 
   507  0FE5                     	;# 
   508  0FE6                     	;# 
   509  0FE7                     	;# 
   510  0FE8                     	;# 
   511  0FE9                     	;# 
   512  0FEA                     	;# 
   513  0FEB                     	;# 
   514  0FED                     	;# 
   515  0FEE                     	;# 
   516  0FEF                     	;# 
   517  0000                     	;# 
   518  0001                     	;# 
   519  0002                     	;# 
   520  0003                     	;# 
   521  0004                     	;# 
   522  0005                     	;# 
   523  0006                     	;# 
   524  0007                     	;# 
   525  0008                     	;# 
   526  0009                     	;# 
   527  000A                     	;# 
   528  000B                     	;# 
   529  000C                     	;# 
   530  000D                     	;# 
   531  000E                     	;# 
   532  0010                     	;# 
   533  0011                     	;# 
   534  0012                     	;# 
   535  0013                     	;# 
   536  0014                     	;# 
   537  0015                     	;# 
   538  0015                     	;# 
   539  0016                     	;# 
   540  0016                     	;# 
   541  0017                     	;# 
   542  0018                     	;# 
   543  0019                     	;# 
   544  0019                     	;# 
   545  001A                     	;# 
   546  001B                     	;# 
   547  001C                     	;# 
   548  001D                     	;# 
   549  001E                     	;# 
   550  001F                     	;# 
   551  008C                     	;# 
   552  008D                     	;# 
   553  008E                     	;# 
   554  0090                     	;# 
   555  0091                     	;# 
   556  0092                     	;# 
   557  0093                     	;# 
   558  0094                     	;# 
   559  0097                     	;# 
   560  009B                     	;# 
   561  009B                     	;# 
   562  009C                     	;# 
   563  009D                     	;# 
   564  009E                     	;# 
   565  009F                     	;# 
   566  010C                     	;# 
   567  010D                     	;# 
   568  010E                     	;# 
   569  0111                     	;# 
   570  0112                     	;# 
   571  0113                     	;# 
   572  0114                     	;# 
   573  0115                     	;# 
   574  0116                     	;# 
   575  0117                     	;# 
   576  0118                     	;# 
   577  0119                     	;# 
   578  018C                     	;# 
   579  018D                     	;# 
   580  018E                     	;# 
   581  0197                     	;# 
   582  0199                     	;# 
   583  0199                     	;# 
   584  0199                     	;# 
   585  019A                     	;# 
   586  019A                     	;# 
   587  019A                     	;# 
   588  019B                     	;# 
   589  019B                     	;# 
   590  019B                     	;# 
   591  019B                     	;# 
   592  019B                     	;# 
   593  019C                     	;# 
   594  019C                     	;# 
   595  019C                     	;# 
   596  019D                     	;# 
   597  019D                     	;# 
   598  019D                     	;# 
   599  019E                     	;# 
   600  019E                     	;# 
   601  019E                     	;# 
   602  019F                     	;# 
   603  019F                     	;# 
   604  019F                     	;# 
   605  019F                     	;# 
   606  019F                     	;# 
   607  020C                     	;# 
   608  020D                     	;# 
   609  020E                     	;# 
   610  0211                     	;# 
   611  0211                     	;# 
   612  0212                     	;# 
   613  0212                     	;# 
   614  0213                     	;# 
   615  0213                     	;# 
   616  0214                     	;# 
   617  0214                     	;# 
   618  0215                     	;# 
   619  0215                     	;# 
   620  0215                     	;# 
   621  0215                     	;# 
   622  0216                     	;# 
   623  0216                     	;# 
   624  0217                     	;# 
   625  0217                     	;# 
   626  0219                     	;# 
   627  021A                     	;# 
   628  021B                     	;# 
   629  021C                     	;# 
   630  021D                     	;# 
   631  021D                     	;# 
   632  021E                     	;# 
   633  021F                     	;# 
   634  028C                     	;# 
   635  028D                     	;# 
   636  028E                     	;# 
   637  0291                     	;# 
   638  0291                     	;# 
   639  0292                     	;# 
   640  0293                     	;# 
   641  0294                     	;# 
   642  0295                     	;# 
   643  0295                     	;# 
   644  0296                     	;# 
   645  0297                     	;# 
   646  0298                     	;# 
   647  029F                     	;# 
   648  030C                     	;# 
   649  030D                     	;# 
   650  030E                     	;# 
   651  0311                     	;# 
   652  0311                     	;# 
   653  0312                     	;# 
   654  0313                     	;# 
   655  0314                     	;# 
   656  0315                     	;# 
   657  0315                     	;# 
   658  0316                     	;# 
   659  0317                     	;# 
   660  0318                     	;# 
   661  038C                     	;# 
   662  038D                     	;# 
   663  038E                     	;# 
   664  0391                     	;# 
   665  0392                     	;# 
   666  0393                     	;# 
   667  0394                     	;# 
   668  0395                     	;# 
   669  0396                     	;# 
   670  0397                     	;# 
   671  0398                     	;# 
   672  0399                     	;# 
   673  039A                     	;# 
   674  039C                     	;# 
   675  039D                     	;# 
   676  039E                     	;# 
   677  039F                     	;# 
   678  0411                     	;# 
   679  0411                     	;# 
   680  0412                     	;# 
   681  0413                     	;# 
   682  0414                     	;# 
   683  0415                     	;# 
   684  0416                     	;# 
   685  0417                     	;# 
   686  0418                     	;# 
   687  0418                     	;# 
   688  0419                     	;# 
   689  041A                     	;# 
   690  041B                     	;# 
   691  041C                     	;# 
   692  041D                     	;# 
   693  041E                     	;# 
   694  041F                     	;# 
   695  0498                     	;# 
   696  0498                     	;# 
   697  0499                     	;# 
   698  049A                     	;# 
   699  049B                     	;# 
   700  049B                     	;# 
   701  049C                     	;# 
   702  049D                     	;# 
   703  049E                     	;# 
   704  049F                     	;# 
   705  0617                     	;# 
   706  0618                     	;# 
   707  0619                     	;# 
   708  0619                     	;# 
   709  061A                     	;# 
   710  061B                     	;# 
   711  061C                     	;# 
   712  061C                     	;# 
   713  061F                     	;# 
   714  0691                     	;# 
   715  0692                     	;# 
   716  0693                     	;# 
   717  0694                     	;# 
   718  0695                     	;# 
   719  0696                     	;# 
   720  0697                     	;# 
   721  0698                     	;# 
   722  0699                     	;# 
   723  0711                     	;# 
   724  0712                     	;# 
   725  0713                     	;# 
   726  0714                     	;# 
   727  0715                     	;# 
   728  0716                     	;# 
   729  0717                     	;# 
   730  0718                     	;# 
   731  0719                     	;# 
   732  0891                     	;# 
   733  0891                     	;# 
   734  0891                     	;# 
   735  0891                     	;# 
   736  0891                     	;# 
   737  0891                     	;# 
   738  0892                     	;# 
   739  0892                     	;# 
   740  0892                     	;# 
   741  0893                     	;# 
   742  0893                     	;# 
   743  0893                     	;# 
   744  0893                     	;# 
   745  0893                     	;# 
   746  0893                     	;# 
   747  0894                     	;# 
   748  0894                     	;# 
   749  0894                     	;# 
   750  0895                     	;# 
   751  0895                     	;# 
   752  0895                     	;# 
   753  0896                     	;# 
   754  0896                     	;# 
   755  0896                     	;# 
   756  089B                     	;# 
   757  0911                     	;# 
   758  0912                     	;# 
   759  0913                     	;# 
   760  0914                     	;# 
   761  0915                     	;# 
   762  0916                     	;# 
   763  0918                     	;# 
   764  0919                     	;# 
   765  091A                     	;# 
   766  091B                     	;# 
   767  091C                     	;# 
   768  091D                     	;# 
   769  091E                     	;# 
   770  091F                     	;# 
   771  0E0F                     	;# 
   772  0E10                     	;# 
   773  0E11                     	;# 
   774  0E12                     	;# 
   775  0E13                     	;# 
   776  0E14                     	;# 
   777  0E15                     	;# 
   778  0E16                     	;# 
   779  0E17                     	;# 
   780  0E18                     	;# 
   781  0E19                     	;# 
   782  0E1A                     	;# 
   783  0E1B                     	;# 
   784  0E1C                     	;# 
   785  0E1D                     	;# 
   786  0E1E                     	;# 
   787  0E1F                     	;# 
   788  0E20                     	;# 
   789  0E21                     	;# 
   790  0E22                     	;# 
   791  0E24                     	;# 
   792  0E25                     	;# 
   793  0E28                     	;# 
   794  0E29                     	;# 
   795  0E2A                     	;# 
   796  0E2B                     	;# 
   797  0E2C                     	;# 
   798  0E2D                     	;# 
   799  0E2E                     	;# 
   800  0E2F                     	;# 
   801  0E90                     	;# 
   802  0E91                     	;# 
   803  0E92                     	;# 
   804  0E94                     	;# 
   805  0E95                     	;# 
   806  0E9C                     	;# 
   807  0E9D                     	;# 
   808  0E9E                     	;# 
   809  0E9F                     	;# 
   810  0EA0                     	;# 
   811  0EA1                     	;# 
   812  0EA2                     	;# 
   813  0EA3                     	;# 
   814  0EA4                     	;# 
   815  0EA5                     	;# 
   816  0EA6                     	;# 
   817  0EA7                     	;# 
   818  0F0F                     	;# 
   819  0F10                     	;# 
   820  0F11                     	;# 
   821  0F12                     	;# 
   822  0F13                     	;# 
   823  0F14                     	;# 
   824  0F15                     	;# 
   825  0F16                     	;# 
   826  0F17                     	;# 
   827  0F18                     	;# 
   828  0F19                     	;# 
   829  0F1A                     	;# 
   830  0F1B                     	;# 
   831  0F1C                     	;# 
   832  0F1D                     	;# 
   833  0F1E                     	;# 
   834  0F1F                     	;# 
   835  0F20                     	;# 
   836  0F21                     	;# 
   837  0F22                     	;# 
   838  0F23                     	;# 
   839  0F24                     	;# 
   840  0F25                     	;# 
   841  0F26                     	;# 
   842  0F27                     	;# 
   843  0F28                     	;# 
   844  0F29                     	;# 
   845  0F2A                     	;# 
   846  0F2B                     	;# 
   847  0F2C                     	;# 
   848  0F2D                     	;# 
   849  0F2E                     	;# 
   850  0F2F                     	;# 
   851  0F30                     	;# 
   852  0F31                     	;# 
   853  0F32                     	;# 
   854  0F33                     	;# 
   855  0F34                     	;# 
   856  0F35                     	;# 
   857  0F36                     	;# 
   858  0F37                     	;# 
   859  0FE4                     	;# 
   860  0FE5                     	;# 
   861  0FE6                     	;# 
   862  0FE7                     	;# 
   863  0FE8                     	;# 
   864  0FE9                     	;# 
   865  0FEA                     	;# 
   866  0FEB                     	;# 
   867  0FED                     	;# 
   868  0FEE                     	;# 
   869  0FEF                     	;# 
   870  0000                     	;# 
   871  0001                     	;# 
   872  0002                     	;# 
   873  0003                     	;# 
   874  0004                     	;# 
   875  0005                     	;# 
   876  0006                     	;# 
   877  0007                     	;# 
   878  0008                     	;# 
   879  0009                     	;# 
   880  000A                     	;# 
   881  000B                     	;# 
   882  000C                     	;# 
   883  000D                     	;# 
   884  000E                     	;# 
   885  0010                     	;# 
   886  0011                     	;# 
   887  0012                     	;# 
   888  0013                     	;# 
   889  0014                     	;# 
   890  0015                     	;# 
   891  0015                     	;# 
   892  0016                     	;# 
   893  0016                     	;# 
   894  0017                     	;# 
   895  0018                     	;# 
   896  0019                     	;# 
   897  0019                     	;# 
   898  001A                     	;# 
   899  001B                     	;# 
   900  001C                     	;# 
   901  001D                     	;# 
   902  001E                     	;# 
   903  001F                     	;# 
   904  008C                     	;# 
   905  008D                     	;# 
   906  008E                     	;# 
   907  0090                     	;# 
   908  0091                     	;# 
   909  0092                     	;# 
   910  0093                     	;# 
   911  0094                     	;# 
   912  0097                     	;# 
   913  009B                     	;# 
   914  009B                     	;# 
   915  009C                     	;# 
   916  009D                     	;# 
   917  009E                     	;# 
   918  009F                     	;# 
   919  010C                     	;# 
   920  010D                     	;# 
   921  010E                     	;# 
   922  0111                     	;# 
   923  0112                     	;# 
   924  0113                     	;# 
   925  0114                     	;# 
   926  0115                     	;# 
   927  0116                     	;# 
   928  0117                     	;# 
   929  0118                     	;# 
   930  0119                     	;# 
   931  018C                     	;# 
   932  018D                     	;# 
   933  018E                     	;# 
   934  0197                     	;# 
   935  0199                     	;# 
   936  0199                     	;# 
   937  0199                     	;# 
   938  019A                     	;# 
   939  019A                     	;# 
   940  019A                     	;# 
   941  019B                     	;# 
   942  019B                     	;# 
   943  019B                     	;# 
   944  019B                     	;# 
   945  019B                     	;# 
   946  019C                     	;# 
   947  019C                     	;# 
   948  019C                     	;# 
   949  019D                     	;# 
   950  019D                     	;# 
   951  019D                     	;# 
   952  019E                     	;# 
   953  019E                     	;# 
   954  019E                     	;# 
   955  019F                     	;# 
   956  019F                     	;# 
   957  019F                     	;# 
   958  019F                     	;# 
   959  019F                     	;# 
   960  020C                     	;# 
   961  020D                     	;# 
   962  020E                     	;# 
   963  0211                     	;# 
   964  0211                     	;# 
   965  0212                     	;# 
   966  0212                     	;# 
   967  0213                     	;# 
   968  0213                     	;# 
   969  0214                     	;# 
   970  0214                     	;# 
   971  0215                     	;# 
   972  0215                     	;# 
   973  0215                     	;# 
   974  0215                     	;# 
   975  0216                     	;# 
   976  0216                     	;# 
   977  0217                     	;# 
   978  0217                     	;# 
   979  0219                     	;# 
   980  021A                     	;# 
   981  021B                     	;# 
   982  021C                     	;# 
   983  021D                     	;# 
   984  021D                     	;# 
   985  021E                     	;# 
   986  021F                     	;# 
   987  028C                     	;# 
   988  028D                     	;# 
   989  028E                     	;# 
   990  0291                     	;# 
   991  0291                     	;# 
   992  0292                     	;# 
   993  0293                     	;# 
   994  0294                     	;# 
   995  0295                     	;# 
   996  0295                     	;# 
   997  0296                     	;# 
   998  0297                     	;# 
   999  0298                     	;# 
  1000  029F                     	;# 
  1001  030C                     	;# 
  1002  030D                     	;# 
  1003  030E                     	;# 
  1004  0311                     	;# 
  1005  0311                     	;# 
  1006  0312                     	;# 
  1007  0313                     	;# 
  1008  0314                     	;# 
  1009  0315                     	;# 
  1010  0315                     	;# 
  1011  0316                     	;# 
  1012  0317                     	;# 
  1013  0318                     	;# 
  1014  038C                     	;# 
  1015  038D                     	;# 
  1016  038E                     	;# 
  1017  0391                     	;# 
  1018  0392                     	;# 
  1019  0393                     	;# 
  1020  0394                     	;# 
  1021  0395                     	;# 
  1022  0396                     	;# 
  1023  0397                     	;# 
  1024  0398                     	;# 
  1025  0399                     	;# 
  1026  039A                     	;# 
  1027  039C                     	;# 
  1028  039D                     	;# 
  1029  039E                     	;# 
  1030  039F                     	;# 
  1031  0411                     	;# 
  1032  0411                     	;# 
  1033  0412                     	;# 
  1034  0413                     	;# 
  1035  0414                     	;# 
  1036  0415                     	;# 
  1037  0416                     	;# 
  1038  0417                     	;# 
  1039  0418                     	;# 
  1040  0418                     	;# 
  1041  0419                     	;# 
  1042  041A                     	;# 
  1043  041B                     	;# 
  1044  041C                     	;# 
  1045  041D                     	;# 
  1046  041E                     	;# 
  1047  041F                     	;# 
  1048  0498                     	;# 
  1049  0498                     	;# 
  1050  0499                     	;# 
  1051  049A                     	;# 
  1052  049B                     	;# 
  1053  049B                     	;# 
  1054  049C                     	;# 
  1055  049D                     	;# 
  1056  049E                     	;# 
  1057  049F                     	;# 
  1058  0617                     	;# 
  1059  0618                     	;# 
  1060  0619                     	;# 
  1061  0619                     	;# 
  1062  061A                     	;# 
  1063  061B                     	;# 
  1064  061C                     	;# 
  1065  061C                     	;# 
  1066  061F                     	;# 
  1067  0691                     	;# 
  1068  0692                     	;# 
  1069  0693                     	;# 
  1070  0694                     	;# 
  1071  0695                     	;# 
  1072  0696                     	;# 
  1073  0697                     	;# 
  1074  0698                     	;# 
  1075  0699                     	;# 
  1076  0711                     	;# 
  1077  0712                     	;# 
  1078  0713                     	;# 
  1079  0714                     	;# 
  1080  0715                     	;# 
  1081  0716                     	;# 
  1082  0717                     	;# 
  1083  0718                     	;# 
  1084  0719                     	;# 
  1085  0891                     	;# 
  1086  0891                     	;# 
  1087  0891                     	;# 
  1088  0891                     	;# 
  1089  0891                     	;# 
  1090  0891                     	;# 
  1091  0892                     	;# 
  1092  0892                     	;# 
  1093  0892                     	;# 
  1094  0893                     	;# 
  1095  0893                     	;# 
  1096  0893                     	;# 
  1097  0893                     	;# 
  1098  0893                     	;# 
  1099  0893                     	;# 
  1100  0894                     	;# 
  1101  0894                     	;# 
  1102  0894                     	;# 
  1103  0895                     	;# 
  1104  0895                     	;# 
  1105  0895                     	;# 
  1106  0896                     	;# 
  1107  0896                     	;# 
  1108  0896                     	;# 
  1109  089B                     	;# 
  1110  0911                     	;# 
  1111  0912                     	;# 
  1112  0913                     	;# 
  1113  0914                     	;# 
  1114  0915                     	;# 
  1115  0916                     	;# 
  1116  0918                     	;# 
  1117  0919                     	;# 
  1118  091A                     	;# 
  1119  091B                     	;# 
  1120  091C                     	;# 
  1121  091D                     	;# 
  1122  091E                     	;# 
  1123  091F                     	;# 
  1124  0E0F                     	;# 
  1125  0E10                     	;# 
  1126  0E11                     	;# 
  1127  0E12                     	;# 
  1128  0E13                     	;# 
  1129  0E14                     	;# 
  1130  0E15                     	;# 
  1131  0E16                     	;# 
  1132  0E17                     	;# 
  1133  0E18                     	;# 
  1134  0E19                     	;# 
  1135  0E1A                     	;# 
  1136  0E1B                     	;# 
  1137  0E1C                     	;# 
  1138  0E1D                     	;# 
  1139  0E1E                     	;# 
  1140  0E1F                     	;# 
  1141  0E20                     	;# 
  1142  0E21                     	;# 
  1143  0E22                     	;# 
  1144  0E24                     	;# 
  1145  0E25                     	;# 
  1146  0E28                     	;# 
  1147  0E29                     	;# 
  1148  0E2A                     	;# 
  1149  0E2B                     	;# 
  1150  0E2C                     	;# 
  1151  0E2D                     	;# 
  1152  0E2E                     	;# 
  1153  0E2F                     	;# 
  1154  0E90                     	;# 
  1155  0E91                     	;# 
  1156  0E92                     	;# 
  1157  0E94                     	;# 
  1158  0E95                     	;# 
  1159  0E9C                     	;# 
  1160  0E9D                     	;# 
  1161  0E9E                     	;# 
  1162  0E9F                     	;# 
  1163  0EA0                     	;# 
  1164  0EA1                     	;# 
  1165  0EA2                     	;# 
  1166  0EA3                     	;# 
  1167  0EA4                     	;# 
  1168  0EA5                     	;# 
  1169  0EA6                     	;# 
  1170  0EA7                     	;# 
  1171  0F0F                     	;# 
  1172  0F10                     	;# 
  1173  0F11                     	;# 
  1174  0F12                     	;# 
  1175  0F13                     	;# 
  1176  0F14                     	;# 
  1177  0F15                     	;# 
  1178  0F16                     	;# 
  1179  0F17                     	;# 
  1180  0F18                     	;# 
  1181  0F19                     	;# 
  1182  0F1A                     	;# 
  1183  0F1B                     	;# 
  1184  0F1C                     	;# 
  1185  0F1D                     	;# 
  1186  0F1E                     	;# 
  1187  0F1F                     	;# 
  1188  0F20                     	;# 
  1189  0F21                     	;# 
  1190  0F22                     	;# 
  1191  0F23                     	;# 
  1192  0F24                     	;# 
  1193  0F25                     	;# 
  1194  0F26                     	;# 
  1195  0F27                     	;# 
  1196  0F28                     	;# 
  1197  0F29                     	;# 
  1198  0F2A                     	;# 
  1199  0F2B                     	;# 
  1200  0F2C                     	;# 
  1201  0F2D                     	;# 
  1202  0F2E                     	;# 
  1203  0F2F                     	;# 
  1204  0F30                     	;# 
  1205  0F31                     	;# 
  1206  0F32                     	;# 
  1207  0F33                     	;# 
  1208  0F34                     	;# 
  1209  0F35                     	;# 
  1210  0F36                     	;# 
  1211  0F37                     	;# 
  1212  0FE4                     	;# 
  1213  0FE5                     	;# 
  1214  0FE6                     	;# 
  1215  0FE7                     	;# 
  1216  0FE8                     	;# 
  1217  0FE9                     	;# 
  1218  0FEA                     	;# 
  1219  0FEB                     	;# 
  1220  0FED                     	;# 
  1221  0FEE                     	;# 
  1222  0FEF                     	;# 
  1223  0000                     	;# 
  1224  0001                     	;# 
  1225  0002                     	;# 
  1226  0003                     	;# 
  1227  0004                     	;# 
  1228  0005                     	;# 
  1229  0006                     	;# 
  1230  0007                     	;# 
  1231  0008                     	;# 
  1232  0009                     	;# 
  1233  000A                     	;# 
  1234  000B                     	;# 
  1235  000C                     	;# 
  1236  000D                     	;# 
  1237  000E                     	;# 
  1238  0010                     	;# 
  1239  0011                     	;# 
  1240  0012                     	;# 
  1241  0013                     	;# 
  1242  0014                     	;# 
  1243  0015                     	;# 
  1244  0015                     	;# 
  1245  0016                     	;# 
  1246  0016                     	;# 
  1247  0017                     	;# 
  1248  0018                     	;# 
  1249  0019                     	;# 
  1250  0019                     	;# 
  1251  001A                     	;# 
  1252  001B                     	;# 
  1253  001C                     	;# 
  1254  001D                     	;# 
  1255  001E                     	;# 
  1256  001F                     	;# 
  1257  008C                     	;# 
  1258  008D                     	;# 
  1259  008E                     	;# 
  1260  0090                     	;# 
  1261  0091                     	;# 
  1262  0092                     	;# 
  1263  0093                     	;# 
  1264  0094                     	;# 
  1265  0097                     	;# 
  1266  009B                     	;# 
  1267  009B                     	;# 
  1268  009C                     	;# 
  1269  009D                     	;# 
  1270  009E                     	;# 
  1271  009F                     	;# 
  1272  010C                     	;# 
  1273  010D                     	;# 
  1274  010E                     	;# 
  1275  0111                     	;# 
  1276  0112                     	;# 
  1277  0113                     	;# 
  1278  0114                     	;# 
  1279  0115                     	;# 
  1280  0116                     	;# 
  1281  0117                     	;# 
  1282  0118                     	;# 
  1283  0119                     	;# 
  1284  018C                     	;# 
  1285  018D                     	;# 
  1286  018E                     	;# 
  1287  0197                     	;# 
  1288  0199                     	;# 
  1289  0199                     	;# 
  1290  0199                     	;# 
  1291  019A                     	;# 
  1292  019A                     	;# 
  1293  019A                     	;# 
  1294  019B                     	;# 
  1295  019B                     	;# 
  1296  019B                     	;# 
  1297  019B                     	;# 
  1298  019B                     	;# 
  1299  019C                     	;# 
  1300  019C                     	;# 
  1301  019C                     	;# 
  1302  019D                     	;# 
  1303  019D                     	;# 
  1304  019D                     	;# 
  1305  019E                     	;# 
  1306  019E                     	;# 
  1307  019E                     	;# 
  1308  019F                     	;# 
  1309  019F                     	;# 
  1310  019F                     	;# 
  1311  019F                     	;# 
  1312  019F                     	;# 
  1313  020C                     	;# 
  1314  020D                     	;# 
  1315  020E                     	;# 
  1316  0211                     	;# 
  1317  0211                     	;# 
  1318  0212                     	;# 
  1319  0212                     	;# 
  1320  0213                     	;# 
  1321  0213                     	;# 
  1322  0214                     	;# 
  1323  0214                     	;# 
  1324  0215                     	;# 
  1325  0215                     	;# 
  1326  0215                     	;# 
  1327  0215                     	;# 
  1328  0216                     	;# 
  1329  0216                     	;# 
  1330  0217                     	;# 
  1331  0217                     	;# 
  1332  0219                     	;# 
  1333  021A                     	;# 
  1334  021B                     	;# 
  1335  021C                     	;# 
  1336  021D                     	;# 
  1337  021D                     	;# 
  1338  021E                     	;# 
  1339  021F                     	;# 
  1340  028C                     	;# 
  1341  028D                     	;# 
  1342  028E                     	;# 
  1343  0291                     	;# 
  1344  0291                     	;# 
  1345  0292                     	;# 
  1346  0293                     	;# 
  1347  0294                     	;# 
  1348  0295                     	;# 
  1349  0295                     	;# 
  1350  0296                     	;# 
  1351  0297                     	;# 
  1352  0298                     	;# 
  1353  029F                     	;# 
  1354  030C                     	;# 
  1355  030D                     	;# 
  1356  030E                     	;# 
  1357  0311                     	;# 
  1358  0311                     	;# 
  1359  0312                     	;# 
  1360  0313                     	;# 
  1361  0314                     	;# 
  1362  0315                     	;# 
  1363  0315                     	;# 
  1364  0316                     	;# 
  1365  0317                     	;# 
  1366  0318                     	;# 
  1367  038C                     	;# 
  1368  038D                     	;# 
  1369  038E                     	;# 
  1370  0391                     	;# 
  1371  0392                     	;# 
  1372  0393                     	;# 
  1373  0394                     	;# 
  1374  0395                     	;# 
  1375  0396                     	;# 
  1376  0397                     	;# 
  1377  0398                     	;# 
  1378  0399                     	;# 
  1379  039A                     	;# 
  1380  039C                     	;# 
  1381  039D                     	;# 
  1382  039E                     	;# 
  1383  039F                     	;# 
  1384  0411                     	;# 
  1385  0411                     	;# 
  1386  0412                     	;# 
  1387  0413                     	;# 
  1388  0414                     	;# 
  1389  0415                     	;# 
  1390  0416                     	;# 
  1391  0417                     	;# 
  1392  0418                     	;# 
  1393  0418                     	;# 
  1394  0419                     	;# 
  1395  041A                     	;# 
  1396  041B                     	;# 
  1397  041C                     	;# 
  1398  041D                     	;# 
  1399  041E                     	;# 
  1400  041F                     	;# 
  1401  0498                     	;# 
  1402  0498                     	;# 
  1403  0499                     	;# 
  1404  049A                     	;# 
  1405  049B                     	;# 
  1406  049B                     	;# 
  1407  049C                     	;# 
  1408  049D                     	;# 
  1409  049E                     	;# 
  1410  049F                     	;# 
  1411  0617                     	;# 
  1412  0618                     	;# 
  1413  0619                     	;# 
  1414  0619                     	;# 
  1415  061A                     	;# 
  1416  061B                     	;# 
  1417  061C                     	;# 
  1418  061C                     	;# 
  1419  061F                     	;# 
  1420  0691                     	;# 
  1421  0692                     	;# 
  1422  0693                     	;# 
  1423  0694                     	;# 
  1424  0695                     	;# 
  1425  0696                     	;# 
  1426  0697                     	;# 
  1427  0698                     	;# 
  1428  0699                     	;# 
  1429  0711                     	;# 
  1430  0712                     	;# 
  1431  0713                     	;# 
  1432  0714                     	;# 
  1433  0715                     	;# 
  1434  0716                     	;# 
  1435  0717                     	;# 
  1436  0718                     	;# 
  1437  0719                     	;# 
  1438  0891                     	;# 
  1439  0891                     	;# 
  1440  0891                     	;# 
  1441  0891                     	;# 
  1442  0891                     	;# 
  1443  0891                     	;# 
  1444  0892                     	;# 
  1445  0892                     	;# 
  1446  0892                     	;# 
  1447  0893                     	;# 
  1448  0893                     	;# 
  1449  0893                     	;# 
  1450  0893                     	;# 
  1451  0893                     	;# 
  1452  0893                     	;# 
  1453  0894                     	;# 
  1454  0894                     	;# 
  1455  0894                     	;# 
  1456  0895                     	;# 
  1457  0895                     	;# 
  1458  0895                     	;# 
  1459  0896                     	;# 
  1460  0896                     	;# 
  1461  0896                     	;# 
  1462  089B                     	;# 
  1463  0911                     	;# 
  1464  0912                     	;# 
  1465  0913                     	;# 
  1466  0914                     	;# 
  1467  0915                     	;# 
  1468  0916                     	;# 
  1469  0918                     	;# 
  1470  0919                     	;# 
  1471  091A                     	;# 
  1472  091B                     	;# 
  1473  091C                     	;# 
  1474  091D                     	;# 
  1475  091E                     	;# 
  1476  091F                     	;# 
  1477  0E0F                     	;# 
  1478  0E10                     	;# 
  1479  0E11                     	;# 
  1480  0E12                     	;# 
  1481  0E13                     	;# 
  1482  0E14                     	;# 
  1483  0E15                     	;# 
  1484  0E16                     	;# 
  1485  0E17                     	;# 
  1486  0E18                     	;# 
  1487  0E19                     	;# 
  1488  0E1A                     	;# 
  1489  0E1B                     	;# 
  1490  0E1C                     	;# 
  1491  0E1D                     	;# 
  1492  0E1E                     	;# 
  1493  0E1F                     	;# 
  1494  0E20                     	;# 
  1495  0E21                     	;# 
  1496  0E22                     	;# 
  1497  0E24                     	;# 
  1498  0E25                     	;# 
  1499  0E28                     	;# 
  1500  0E29                     	;# 
  1501  0E2A                     	;# 
  1502  0E2B                     	;# 
  1503  0E2C                     	;# 
  1504  0E2D                     	;# 
  1505  0E2E                     	;# 
  1506  0E2F                     	;# 
  1507  0E90                     	;# 
  1508  0E91                     	;# 
  1509  0E92                     	;# 
  1510  0E94                     	;# 
  1511  0E95                     	;# 
  1512  0E9C                     	;# 
  1513  0E9D                     	;# 
  1514  0E9E                     	;# 
  1515  0E9F                     	;# 
  1516  0EA0                     	;# 
  1517  0EA1                     	;# 
  1518  0EA2                     	;# 
  1519  0EA3                     	;# 
  1520  0EA4                     	;# 
  1521  0EA5                     	;# 
  1522  0EA6                     	;# 
  1523  0EA7                     	;# 
  1524  0F0F                     	;# 
  1525  0F10                     	;# 
  1526  0F11                     	;# 
  1527  0F12                     	;# 
  1528  0F13                     	;# 
  1529  0F14                     	;# 
  1530  0F15                     	;# 
  1531  0F16                     	;# 
  1532  0F17                     	;# 
  1533  0F18                     	;# 
  1534  0F19                     	;# 
  1535  0F1A                     	;# 
  1536  0F1B                     	;# 
  1537  0F1C                     	;# 
  1538  0F1D                     	;# 
  1539  0F1E                     	;# 
  1540  0F1F                     	;# 
  1541  0F20                     	;# 
  1542  0F21                     	;# 
  1543  0F22                     	;# 
  1544  0F23                     	;# 
  1545  0F24                     	;# 
  1546  0F25                     	;# 
  1547  0F26                     	;# 
  1548  0F27                     	;# 
  1549  0F28                     	;# 
  1550  0F29                     	;# 
  1551  0F2A                     	;# 
  1552  0F2B                     	;# 
  1553  0F2C                     	;# 
  1554  0F2D                     	;# 
  1555  0F2E                     	;# 
  1556  0F2F                     	;# 
  1557  0F30                     	;# 
  1558  0F31                     	;# 
  1559  0F32                     	;# 
  1560  0F33                     	;# 
  1561  0F34                     	;# 
  1562  0F35                     	;# 
  1563  0F36                     	;# 
  1564  0F37                     	;# 
  1565  0FE4                     	;# 
  1566  0FE5                     	;# 
  1567  0FE6                     	;# 
  1568  0FE7                     	;# 
  1569  0FE8                     	;# 
  1570  0FE9                     	;# 
  1571  0FEA                     	;# 
  1572  0FEB                     	;# 
  1573  0FED                     	;# 
  1574  0FEE                     	;# 
  1575  0FEF                     	;# 
  1576  0000                     	;# 
  1577  0001                     	;# 
  1578  0002                     	;# 
  1579  0003                     	;# 
  1580  0004                     	;# 
  1581  0005                     	;# 
  1582  0006                     	;# 
  1583  0007                     	;# 
  1584  0008                     	;# 
  1585  0009                     	;# 
  1586  000A                     	;# 
  1587  000B                     	;# 
  1588  000C                     	;# 
  1589  000D                     	;# 
  1590  000E                     	;# 
  1591  0010                     	;# 
  1592  0011                     	;# 
  1593  0012                     	;# 
  1594  0013                     	;# 
  1595  0014                     	;# 
  1596  0015                     	;# 
  1597  0015                     	;# 
  1598  0016                     	;# 
  1599  0016                     	;# 
  1600  0017                     	;# 
  1601  0018                     	;# 
  1602  0019                     	;# 
  1603  0019                     	;# 
  1604  001A                     	;# 
  1605  001B                     	;# 
  1606  001C                     	;# 
  1607  001D                     	;# 
  1608  001E                     	;# 
  1609  001F                     	;# 
  1610  008C                     	;# 
  1611  008D                     	;# 
  1612  008E                     	;# 
  1613  0090                     	;# 
  1614  0091                     	;# 
  1615  0092                     	;# 
  1616  0093                     	;# 
  1617  0094                     	;# 
  1618  0097                     	;# 
  1619  009B                     	;# 
  1620  009B                     	;# 
  1621  009C                     	;# 
  1622  009D                     	;# 
  1623  009E                     	;# 
  1624  009F                     	;# 
  1625  010C                     	;# 
  1626  010D                     	;# 
  1627  010E                     	;# 
  1628  0111                     	;# 
  1629  0112                     	;# 
  1630  0113                     	;# 
  1631  0114                     	;# 
  1632  0115                     	;# 
  1633  0116                     	;# 
  1634  0117                     	;# 
  1635  0118                     	;# 
  1636  0119                     	;# 
  1637  018C                     	;# 
  1638  018D                     	;# 
  1639  018E                     	;# 
  1640  0197                     	;# 
  1641  0199                     	;# 
  1642  0199                     	;# 
  1643  0199                     	;# 
  1644  019A                     	;# 
  1645  019A                     	;# 
  1646  019A                     	;# 
  1647  019B                     	;# 
  1648  019B                     	;# 
  1649  019B                     	;# 
  1650  019B                     	;# 
  1651  019B                     	;# 
  1652  019C                     	;# 
  1653  019C                     	;# 
  1654  019C                     	;# 
  1655  019D                     	;# 
  1656  019D                     	;# 
  1657  019D                     	;# 
  1658  019E                     	;# 
  1659  019E                     	;# 
  1660  019E                     	;# 
  1661  019F                     	;# 
  1662  019F                     	;# 
  1663  019F                     	;# 
  1664  019F                     	;# 
  1665  019F                     	;# 
  1666  020C                     	;# 
  1667  020D                     	;# 
  1668  020E                     	;# 
  1669  0211                     	;# 
  1670  0211                     	;# 
  1671  0212                     	;# 
  1672  0212                     	;# 
  1673  0213                     	;# 
  1674  0213                     	;# 
  1675  0214                     	;# 
  1676  0214                     	;# 
  1677  0215                     	;# 
  1678  0215                     	;# 
  1679  0215                     	;# 
  1680  0215                     	;# 
  1681  0216                     	;# 
  1682  0216                     	;# 
  1683  0217                     	;# 
  1684  0217                     	;# 
  1685  0219                     	;# 
  1686  021A                     	;# 
  1687  021B                     	;# 
  1688  021C                     	;# 
  1689  021D                     	;# 
  1690  021D                     	;# 
  1691  021E                     	;# 
  1692  021F                     	;# 
  1693  028C                     	;# 
  1694  028D                     	;# 
  1695  028E                     	;# 
  1696  0291                     	;# 
  1697  0291                     	;# 
  1698  0292                     	;# 
  1699  0293                     	;# 
  1700  0294                     	;# 
  1701  0295                     	;# 
  1702  0295                     	;# 
  1703  0296                     	;# 
  1704  0297                     	;# 
  1705  0298                     	;# 
  1706  029F                     	;# 
  1707  030C                     	;# 
  1708  030D                     	;# 
  1709  030E                     	;# 
  1710  0311                     	;# 
  1711  0311                     	;# 
  1712  0312                     	;# 
  1713  0313                     	;# 
  1714  0314                     	;# 
  1715  0315                     	;# 
  1716  0315                     	;# 
  1717  0316                     	;# 
  1718  0317                     	;# 
  1719  0318                     	;# 
  1720  038C                     	;# 
  1721  038D                     	;# 
  1722  038E                     	;# 
  1723  0391                     	;# 
  1724  0392                     	;# 
  1725  0393                     	;# 
  1726  0394                     	;# 
  1727  0395                     	;# 
  1728  0396                     	;# 
  1729  0397                     	;# 
  1730  0398                     	;# 
  1731  0399                     	;# 
  1732  039A                     	;# 
  1733  039C                     	;# 
  1734  039D                     	;# 
  1735  039E                     	;# 
  1736  039F                     	;# 
  1737  0411                     	;# 
  1738  0411                     	;# 
  1739  0412                     	;# 
  1740  0413                     	;# 
  1741  0414                     	;# 
  1742  0415                     	;# 
  1743  0416                     	;# 
  1744  0417                     	;# 
  1745  0418                     	;# 
  1746  0418                     	;# 
  1747  0419                     	;# 
  1748  041A                     	;# 
  1749  041B                     	;# 
  1750  041C                     	;# 
  1751  041D                     	;# 
  1752  041E                     	;# 
  1753  041F                     	;# 
  1754  0498                     	;# 
  1755  0498                     	;# 
  1756  0499                     	;# 
  1757  049A                     	;# 
  1758  049B                     	;# 
  1759  049B                     	;# 
  1760  049C                     	;# 
  1761  049D                     	;# 
  1762  049E                     	;# 
  1763  049F                     	;# 
  1764  0617                     	;# 
  1765  0618                     	;# 
  1766  0619                     	;# 
  1767  0619                     	;# 
  1768  061A                     	;# 
  1769  061B                     	;# 
  1770  061C                     	;# 
  1771  061C                     	;# 
  1772  061F                     	;# 
  1773  0691                     	;# 
  1774  0692                     	;# 
  1775  0693                     	;# 
  1776  0694                     	;# 
  1777  0695                     	;# 
  1778  0696                     	;# 
  1779  0697                     	;# 
  1780  0698                     	;# 
  1781  0699                     	;# 
  1782  0711                     	;# 
  1783  0712                     	;# 
  1784  0713                     	;# 
  1785  0714                     	;# 
  1786  0715                     	;# 
  1787  0716                     	;# 
  1788  0717                     	;# 
  1789  0718                     	;# 
  1790  0719                     	;# 
  1791  0891                     	;# 
  1792  0891                     	;# 
  1793  0891                     	;# 
  1794  0891                     	;# 
  1795  0891                     	;# 
  1796  0891                     	;# 
  1797  0892                     	;# 
  1798  0892                     	;# 
  1799  0892                     	;# 
  1800  0893                     	;# 
  1801  0893                     	;# 
  1802  0893                     	;# 
  1803  0893                     	;# 
  1804  0893                     	;# 
  1805  0893                     	;# 
  1806  0894                     	;# 
  1807  0894                     	;# 
  1808  0894                     	;# 
  1809  0895                     	;# 
  1810  0895                     	;# 
  1811  0895                     	;# 
  1812  0896                     	;# 
  1813  0896                     	;# 
  1814  0896                     	;# 
  1815  089B                     	;# 
  1816  0911                     	;# 
  1817  0912                     	;# 
  1818  0913                     	;# 
  1819  0914                     	;# 
  1820  0915                     	;# 
  1821  0916                     	;# 
  1822  0918                     	;# 
  1823  0919                     	;# 
  1824  091A                     	;# 
  1825  091B                     	;# 
  1826  091C                     	;# 
  1827  091D                     	;# 
  1828  091E                     	;# 
  1829  091F                     	;# 
  1830  0E0F                     	;# 
  1831  0E10                     	;# 
  1832  0E11                     	;# 
  1833  0E12                     	;# 
  1834  0E13                     	;# 
  1835  0E14                     	;# 
  1836  0E15                     	;# 
  1837  0E16                     	;# 
  1838  0E17                     	;# 
  1839  0E18                     	;# 
  1840  0E19                     	;# 
  1841  0E1A                     	;# 
  1842  0E1B                     	;# 
  1843  0E1C                     	;# 
  1844  0E1D                     	;# 
  1845  0E1E                     	;# 
  1846  0E1F                     	;# 
  1847  0E20                     	;# 
  1848  0E21                     	;# 
  1849  0E22                     	;# 
  1850  0E24                     	;# 
  1851  0E25                     	;# 
  1852  0E28                     	;# 
  1853  0E29                     	;# 
  1854  0E2A                     	;# 
  1855  0E2B                     	;# 
  1856  0E2C                     	;# 
  1857  0E2D                     	;# 
  1858  0E2E                     	;# 
  1859  0E2F                     	;# 
  1860  0E90                     	;# 
  1861  0E91                     	;# 
  1862  0E92                     	;# 
  1863  0E94                     	;# 
  1864  0E95                     	;# 
  1865  0E9C                     	;# 
  1866  0E9D                     	;# 
  1867  0E9E                     	;# 
  1868  0E9F                     	;# 
  1869  0EA0                     	;# 
  1870  0EA1                     	;# 
  1871  0EA2                     	;# 
  1872  0EA3                     	;# 
  1873  0EA4                     	;# 
  1874  0EA5                     	;# 
  1875  0EA6                     	;# 
  1876  0EA7                     	;# 
  1877  0F0F                     	;# 
  1878  0F10                     	;# 
  1879  0F11                     	;# 
  1880  0F12                     	;# 
  1881  0F13                     	;# 
  1882  0F14                     	;# 
  1883  0F15                     	;# 
  1884  0F16                     	;# 
  1885  0F17                     	;# 
  1886  0F18                     	;# 
  1887  0F19                     	;# 
  1888  0F1A                     	;# 
  1889  0F1B                     	;# 
  1890  0F1C                     	;# 
  1891  0F1D                     	;# 
  1892  0F1E                     	;# 
  1893  0F1F                     	;# 
  1894  0F20                     	;# 
  1895  0F21                     	;# 
  1896  0F22                     	;# 
  1897  0F23                     	;# 
  1898  0F24                     	;# 
  1899  0F25                     	;# 
  1900  0F26                     	;# 
  1901  0F27                     	;# 
  1902  0F28                     	;# 
  1903  0F29                     	;# 
  1904  0F2A                     	;# 
  1905  0F2B                     	;# 
  1906  0F2C                     	;# 
  1907  0F2D                     	;# 
  1908  0F2E                     	;# 
  1909  0F2F                     	;# 
  1910  0F30                     	;# 
  1911  0F31                     	;# 
  1912  0F32                     	;# 
  1913  0F33                     	;# 
  1914  0F34                     	;# 
  1915  0F35                     	;# 
  1916  0F36                     	;# 
  1917  0F37                     	;# 
  1918  0FE4                     	;# 
  1919  0FE5                     	;# 
  1920  0FE6                     	;# 
  1921  0FE7                     	;# 
  1922  0FE8                     	;# 
  1923  0FE9                     	;# 
  1924  0FEA                     	;# 
  1925  0FEB                     	;# 
  1926  0FED                     	;# 
  1927  0FEE                     	;# 
  1928  0FEF                     	;# 
  1929  0000                     	;# 
  1930  0001                     	;# 
  1931  0002                     	;# 
  1932  0003                     	;# 
  1933  0004                     	;# 
  1934  0005                     	;# 
  1935  0006                     	;# 
  1936  0007                     	;# 
  1937  0008                     	;# 
  1938  0009                     	;# 
  1939  000A                     	;# 
  1940  000B                     	;# 
  1941  000C                     	;# 
  1942  000D                     	;# 
  1943  000E                     	;# 
  1944  0010                     	;# 
  1945  0011                     	;# 
  1946  0012                     	;# 
  1947  0013                     	;# 
  1948  0014                     	;# 
  1949  0015                     	;# 
  1950  0015                     	;# 
  1951  0016                     	;# 
  1952  0016                     	;# 
  1953  0017                     	;# 
  1954  0018                     	;# 
  1955  0019                     	;# 
  1956  0019                     	;# 
  1957  001A                     	;# 
  1958  001B                     	;# 
  1959  001C                     	;# 
  1960  001D                     	;# 
  1961  001E                     	;# 
  1962  001F                     	;# 
  1963  008C                     	;# 
  1964  008D                     	;# 
  1965  008E                     	;# 
  1966  0090                     	;# 
  1967  0091                     	;# 
  1968  0092                     	;# 
  1969  0093                     	;# 
  1970  0094                     	;# 
  1971  0097                     	;# 
  1972  009B                     	;# 
  1973  009B                     	;# 
  1974  009C                     	;# 
  1975  009D                     	;# 
  1976  009E                     	;# 
  1977  009F                     	;# 
  1978  010C                     	;# 
  1979  010D                     	;# 
  1980  010E                     	;# 
  1981  0111                     	;# 
  1982  0112                     	;# 
  1983  0113                     	;# 
  1984  0114                     	;# 
  1985  0115                     	;# 
  1986  0116                     	;# 
  1987  0117                     	;# 
  1988  0118                     	;# 
  1989  0119                     	;# 
  1990  018C                     	;# 
  1991  018D                     	;# 
  1992  018E                     	;# 
  1993  0197                     	;# 
  1994  0199                     	;# 
  1995  0199                     	;# 
  1996  0199                     	;# 
  1997  019A                     	;# 
  1998  019A                     	;# 
  1999  019A                     	;# 
  2000  019B                     	;# 
  2001  019B                     	;# 
  2002  019B                     	;# 
  2003  019B                     	;# 
  2004  019B                     	;# 
  2005  019C                     	;# 
  2006  019C                     	;# 
  2007  019C                     	;# 
  2008  019D                     	;# 
  2009  019D                     	;# 
  2010  019D                     	;# 
  2011  019E                     	;# 
  2012  019E                     	;# 
  2013  019E                     	;# 
  2014  019F                     	;# 
  2015  019F                     	;# 
  2016  019F                     	;# 
  2017  019F                     	;# 
  2018  019F                     	;# 
  2019  020C                     	;# 
  2020  020D                     	;# 
  2021  020E                     	;# 
  2022  0211                     	;# 
  2023  0211                     	;# 
  2024  0212                     	;# 
  2025  0212                     	;# 
  2026  0213                     	;# 
  2027  0213                     	;# 
  2028  0214                     	;# 
  2029  0214                     	;# 
  2030  0215                     	;# 
  2031  0215                     	;# 
  2032  0215                     	;# 
  2033  0215                     	;# 
  2034  0216                     	;# 
  2035  0216                     	;# 
  2036  0217                     	;# 
  2037  0217                     	;# 
  2038  0219                     	;# 
  2039  021A                     	;# 
  2040  021B                     	;# 
  2041  021C                     	;# 
  2042  021D                     	;# 
  2043  021D                     	;# 
  2044  021E                     	;# 
  2045  021F                     	;# 
  2046  028C                     	;# 
  2047  028D                     	;# 
  2048  028E                     	;# 
  2049  0291                     	;# 
  2050  0291                     	;# 
  2051  0292                     	;# 
  2052  0293                     	;# 
  2053  0294                     	;# 
  2054  0295                     	;# 
  2055  0295                     	;# 
  2056  0296                     	;# 
  2057  0297                     	;# 
  2058  0298                     	;# 
  2059  029F                     	;# 
  2060  030C                     	;# 
  2061  030D                     	;# 
  2062  030E                     	;# 
  2063  0311                     	;# 
  2064  0311                     	;# 
  2065  0312                     	;# 
  2066  0313                     	;# 
  2067  0314                     	;# 
  2068  0315                     	;# 
  2069  0315                     	;# 
  2070  0316                     	;# 
  2071  0317                     	;# 
  2072  0318                     	;# 
  2073  038C                     	;# 
  2074  038D                     	;# 
  2075  038E                     	;# 
  2076  0391                     	;# 
  2077  0392                     	;# 
  2078  0393                     	;# 
  2079  0394                     	;# 
  2080  0395                     	;# 
  2081  0396                     	;# 
  2082  0397                     	;# 
  2083  0398                     	;# 
  2084  0399                     	;# 
  2085  039A                     	;# 
  2086  039C                     	;# 
  2087  039D                     	;# 
  2088  039E                     	;# 
  2089  039F                     	;# 
  2090  0411                     	;# 
  2091  0411                     	;# 
  2092  0412                     	;# 
  2093  0413                     	;# 
  2094  0414                     	;# 
  2095  0415                     	;# 
  2096  0416                     	;# 
  2097  0417                     	;# 
  2098  0418                     	;# 
  2099  0418                     	;# 
  2100  0419                     	;# 
  2101  041A                     	;# 
  2102  041B                     	;# 
  2103  041C                     	;# 
  2104  041D                     	;# 
  2105  041E                     	;# 
  2106  041F                     	;# 
  2107  0498                     	;# 
  2108  0498                     	;# 
  2109  0499                     	;# 
  2110  049A                     	;# 
  2111  049B                     	;# 
  2112  049B                     	;# 
  2113  049C                     	;# 
  2114  049D                     	;# 
  2115  049E                     	;# 
  2116  049F                     	;# 
  2117  0617                     	;# 
  2118  0618                     	;# 
  2119  0619                     	;# 
  2120  0619                     	;# 
  2121  061A                     	;# 
  2122  061B                     	;# 
  2123  061C                     	;# 
  2124  061C                     	;# 
  2125  061F                     	;# 
  2126  0691                     	;# 
  2127  0692                     	;# 
  2128  0693                     	;# 
  2129  0694                     	;# 
  2130  0695                     	;# 
  2131  0696                     	;# 
  2132  0697                     	;# 
  2133  0698                     	;# 
  2134  0699                     	;# 
  2135  0711                     	;# 
  2136  0712                     	;# 
  2137  0713                     	;# 
  2138  0714                     	;# 
  2139  0715                     	;# 
  2140  0716                     	;# 
  2141  0717                     	;# 
  2142  0718                     	;# 
  2143  0719                     	;# 
  2144  0891                     	;# 
  2145  0891                     	;# 
  2146  0891                     	;# 
  2147  0891                     	;# 
  2148  0891                     	;# 
  2149  0891                     	;# 
  2150  0892                     	;# 
  2151  0892                     	;# 
  2152  0892                     	;# 
  2153  0893                     	;# 
  2154  0893                     	;# 
  2155  0893                     	;# 
  2156  0893                     	;# 
  2157  0893                     	;# 
  2158  0893                     	;# 
  2159  0894                     	;# 
  2160  0894                     	;# 
  2161  0894                     	;# 
  2162  0895                     	;# 
  2163  0895                     	;# 
  2164  0895                     	;# 
  2165  0896                     	;# 
  2166  0896                     	;# 
  2167  0896                     	;# 
  2168  089B                     	;# 
  2169  0911                     	;# 
  2170  0912                     	;# 
  2171  0913                     	;# 
  2172  0914                     	;# 
  2173  0915                     	;# 
  2174  0916                     	;# 
  2175  0918                     	;# 
  2176  0919                     	;# 
  2177  091A                     	;# 
  2178  091B                     	;# 
  2179  091C                     	;# 
  2180  091D                     	;# 
  2181  091E                     	;# 
  2182  091F                     	;# 
  2183  0E0F                     	;# 
  2184  0E10                     	;# 
  2185  0E11                     	;# 
  2186  0E12                     	;# 
  2187  0E13                     	;# 
  2188  0E14                     	;# 
  2189  0E15                     	;# 
  2190  0E16                     	;# 
  2191  0E17                     	;# 
  2192  0E18                     	;# 
  2193  0E19                     	;# 
  2194  0E1A                     	;# 
  2195  0E1B                     	;# 
  2196  0E1C                     	;# 
  2197  0E1D                     	;# 
  2198  0E1E                     	;# 
  2199  0E1F                     	;# 
  2200  0E20                     	;# 
  2201  0E21                     	;# 
  2202  0E22                     	;# 
  2203  0E24                     	;# 
  2204  0E25                     	;# 
  2205  0E28                     	;# 
  2206  0E29                     	;# 
  2207  0E2A                     	;# 
  2208  0E2B                     	;# 
  2209  0E2C                     	;# 
  2210  0E2D                     	;# 
  2211  0E2E                     	;# 
  2212  0E2F                     	;# 
  2213  0E90                     	;# 
  2214  0E91                     	;# 
  2215  0E92                     	;# 
  2216  0E94                     	;# 
  2217  0E95                     	;# 
  2218  0E9C                     	;# 
  2219  0E9D                     	;# 
  2220  0E9E                     	;# 
  2221  0E9F                     	;# 
  2222  0EA0                     	;# 
  2223  0EA1                     	;# 
  2224  0EA2                     	;# 
  2225  0EA3                     	;# 
  2226  0EA4                     	;# 
  2227  0EA5                     	;# 
  2228  0EA6                     	;# 
  2229  0EA7                     	;# 
  2230  0F0F                     	;# 
  2231  0F10                     	;# 
  2232  0F11                     	;# 
  2233  0F12                     	;# 
  2234  0F13                     	;# 
  2235  0F14                     	;# 
  2236  0F15                     	;# 
  2237  0F16                     	;# 
  2238  0F17                     	;# 
  2239  0F18                     	;# 
  2240  0F19                     	;# 
  2241  0F1A                     	;# 
  2242  0F1B                     	;# 
  2243  0F1C                     	;# 
  2244  0F1D                     	;# 
  2245  0F1E                     	;# 
  2246  0F1F                     	;# 
  2247  0F20                     	;# 
  2248  0F21                     	;# 
  2249  0F22                     	;# 
  2250  0F23                     	;# 
  2251  0F24                     	;# 
  2252  0F25                     	;# 
  2253  0F26                     	;# 
  2254  0F27                     	;# 
  2255  0F28                     	;# 
  2256  0F29                     	;# 
  2257  0F2A                     	;# 
  2258  0F2B                     	;# 
  2259  0F2C                     	;# 
  2260  0F2D                     	;# 
  2261  0F2E                     	;# 
  2262  0F2F                     	;# 
  2263  0F30                     	;# 
  2264  0F31                     	;# 
  2265  0F32                     	;# 
  2266  0F33                     	;# 
  2267  0F34                     	;# 
  2268  0F35                     	;# 
  2269  0F36                     	;# 
  2270  0F37                     	;# 
  2271  0FE4                     	;# 
  2272  0FE5                     	;# 
  2273  0FE6                     	;# 
  2274  0FE7                     	;# 
  2275  0FE8                     	;# 
  2276  0FE9                     	;# 
  2277  0FEA                     	;# 
  2278  0FEB                     	;# 
  2279  0FED                     	;# 
  2280  0FEE                     	;# 
  2281  0FEF                     	;# 
  2282  0000                     	;# 
  2283  0001                     	;# 
  2284  0002                     	;# 
  2285  0003                     	;# 
  2286  0004                     	;# 
  2287  0005                     	;# 
  2288  0006                     	;# 
  2289  0007                     	;# 
  2290  0008                     	;# 
  2291  0009                     	;# 
  2292  000A                     	;# 
  2293  000B                     	;# 
  2294  000C                     	;# 
  2295  000D                     	;# 
  2296  000E                     	;# 
  2297  0010                     	;# 
  2298  0011                     	;# 
  2299  0012                     	;# 
  2300  0013                     	;# 
  2301  0014                     	;# 
  2302  0015                     	;# 
  2303  0015                     	;# 
  2304  0016                     	;# 
  2305  0016                     	;# 
  2306  0017                     	;# 
  2307  0018                     	;# 
  2308  0019                     	;# 
  2309  0019                     	;# 
  2310  001A                     	;# 
  2311  001B                     	;# 
  2312  001C                     	;# 
  2313  001D                     	;# 
  2314  001E                     	;# 
  2315  001F                     	;# 
  2316  008C                     	;# 
  2317  008D                     	;# 
  2318  008E                     	;# 
  2319  0090                     	;# 
  2320  0091                     	;# 
  2321  0092                     	;# 
  2322  0093                     	;# 
  2323  0094                     	;# 
  2324  0097                     	;# 
  2325  009B                     	;# 
  2326  009B                     	;# 
  2327  009C                     	;# 
  2328  009D                     	;# 
  2329  009E                     	;# 
  2330  009F                     	;# 
  2331  010C                     	;# 
  2332  010D                     	;# 
  2333  010E                     	;# 
  2334  0111                     	;# 
  2335  0112                     	;# 
  2336  0113                     	;# 
  2337  0114                     	;# 
  2338  0115                     	;# 
  2339  0116                     	;# 
  2340  0117                     	;# 
  2341  0118                     	;# 
  2342  0119                     	;# 
  2343  018C                     	;# 
  2344  018D                     	;# 
  2345  018E                     	;# 
  2346  0197                     	;# 
  2347  0199                     	;# 
  2348  0199                     	;# 
  2349  0199                     	;# 
  2350  019A                     	;# 
  2351  019A                     	;# 
  2352  019A                     	;# 
  2353  019B                     	;# 
  2354  019B                     	;# 
  2355  019B                     	;# 
  2356  019B                     	;# 
  2357  019B                     	;# 
  2358  019C                     	;# 
  2359  019C                     	;# 
  2360  019C                     	;# 
  2361  019D                     	;# 
  2362  019D                     	;# 
  2363  019D                     	;# 
  2364  019E                     	;# 
  2365  019E                     	;# 
  2366  019E                     	;# 
  2367  019F                     	;# 
  2368  019F                     	;# 
  2369  019F                     	;# 
  2370  019F                     	;# 
  2371  019F                     	;# 
  2372  020C                     	;# 
  2373  020D                     	;# 
  2374  020E                     	;# 
  2375  0211                     	;# 
  2376  0211                     	;# 
  2377  0212                     	;# 
  2378  0212                     	;# 
  2379  0213                     	;# 
  2380  0213                     	;# 
  2381  0214                     	;# 
  2382  0214                     	;# 
  2383  0215                     	;# 
  2384  0215                     	;# 
  2385  0215                     	;# 
  2386  0215                     	;# 
  2387  0216                     	;# 
  2388  0216                     	;# 
  2389  0217                     	;# 
  2390  0217                     	;# 
  2391  0219                     	;# 
  2392  021A                     	;# 
  2393  021B                     	;# 
  2394  021C                     	;# 
  2395  021D                     	;# 
  2396  021D                     	;# 
  2397  021E                     	;# 
  2398  021F                     	;# 
  2399  028C                     	;# 
  2400  028D                     	;# 
  2401  028E                     	;# 
  2402  0291                     	;# 
  2403  0291                     	;# 
  2404  0292                     	;# 
  2405  0293                     	;# 
  2406  0294                     	;# 
  2407  0295                     	;# 
  2408  0295                     	;# 
  2409  0296                     	;# 
  2410  0297                     	;# 
  2411  0298                     	;# 
  2412  029F                     	;# 
  2413  030C                     	;# 
  2414  030D                     	;# 
  2415  030E                     	;# 
  2416  0311                     	;# 
  2417  0311                     	;# 
  2418  0312                     	;# 
  2419  0313                     	;# 
  2420  0314                     	;# 
  2421  0315                     	;# 
  2422  0315                     	;# 
  2423  0316                     	;# 
  2424  0317                     	;# 
  2425  0318                     	;# 
  2426  038C                     	;# 
  2427  038D                     	;# 
  2428  038E                     	;# 
  2429  0391                     	;# 
  2430  0392                     	;# 
  2431  0393                     	;# 
  2432  0394                     	;# 
  2433  0395                     	;# 
  2434  0396                     	;# 
  2435  0397                     	;# 
  2436  0398                     	;# 
  2437  0399                     	;# 
  2438  039A                     	;# 
  2439  039C                     	;# 
  2440  039D                     	;# 
  2441  039E                     	;# 
  2442  039F                     	;# 
  2443  0411                     	;# 
  2444  0411                     	;# 
  2445  0412                     	;# 
  2446  0413                     	;# 
  2447  0414                     	;# 
  2448  0415                     	;# 
  2449  0416                     	;# 
  2450  0417                     	;# 
  2451  0418                     	;# 
  2452  0418                     	;# 
  2453  0419                     	;# 
  2454  041A                     	;# 
  2455  041B                     	;# 
  2456  041C                     	;# 
  2457  041D                     	;# 
  2458  041E                     	;# 
  2459  041F                     	;# 
  2460  0498                     	;# 
  2461  0498                     	;# 
  2462  0499                     	;# 
  2463  049A                     	;# 
  2464  049B                     	;# 
  2465  049B                     	;# 
  2466  049C                     	;# 
  2467  049D                     	;# 
  2468  049E                     	;# 
  2469  049F                     	;# 
  2470  0617                     	;# 
  2471  0618                     	;# 
  2472  0619                     	;# 
  2473  0619                     	;# 
  2474  061A                     	;# 
  2475  061B                     	;# 
  2476  061C                     	;# 
  2477  061C                     	;# 
  2478  061F                     	;# 
  2479  0691                     	;# 
  2480  0692                     	;# 
  2481  0693                     	;# 
  2482  0694                     	;# 
  2483  0695                     	;# 
  2484  0696                     	;# 
  2485  0697                     	;# 
  2486  0698                     	;# 
  2487  0699                     	;# 
  2488  0711                     	;# 
  2489  0712                     	;# 
  2490  0713                     	;# 
  2491  0714                     	;# 
  2492  0715                     	;# 
  2493  0716                     	;# 
  2494  0717                     	;# 
  2495  0718                     	;# 
  2496  0719                     	;# 
  2497  0891                     	;# 
  2498  0891                     	;# 
  2499  0891                     	;# 
  2500  0891                     	;# 
  2501  0891                     	;# 
  2502  0891                     	;# 
  2503  0892                     	;# 
  2504  0892                     	;# 
  2505  0892                     	;# 
  2506  0893                     	;# 
  2507  0893                     	;# 
  2508  0893                     	;# 
  2509  0893                     	;# 
  2510  0893                     	;# 
  2511  0893                     	;# 
  2512  0894                     	;# 
  2513  0894                     	;# 
  2514  0894                     	;# 
  2515  0895                     	;# 
  2516  0895                     	;# 
  2517  0895                     	;# 
  2518  0896                     	;# 
  2519  0896                     	;# 
  2520  0896                     	;# 
  2521  089B                     	;# 
  2522  0911                     	;# 
  2523  0912                     	;# 
  2524  0913                     	;# 
  2525  0914                     	;# 
  2526  0915                     	;# 
  2527  0916                     	;# 
  2528  0918                     	;# 
  2529  0919                     	;# 
  2530  091A                     	;# 
  2531  091B                     	;# 
  2532  091C                     	;# 
  2533  091D                     	;# 
  2534  091E                     	;# 
  2535  091F                     	;# 
  2536  0E0F                     	;# 
  2537  0E10                     	;# 
  2538  0E11                     	;# 
  2539  0E12                     	;# 
  2540  0E13                     	;# 
  2541  0E14                     	;# 
  2542  0E15                     	;# 
  2543  0E16                     	;# 
  2544  0E17                     	;# 
  2545  0E18                     	;# 
  2546  0E19                     	;# 
  2547  0E1A                     	;# 
  2548  0E1B                     	;# 
  2549  0E1C                     	;# 
  2550  0E1D                     	;# 
  2551  0E1E                     	;# 
  2552  0E1F                     	;# 
  2553  0E20                     	;# 
  2554  0E21                     	;# 
  2555  0E22                     	;# 
  2556  0E24                     	;# 
  2557  0E25                     	;# 
  2558  0E28                     	;# 
  2559  0E29                     	;# 
  2560  0E2A                     	;# 
  2561  0E2B                     	;# 
  2562  0E2C                     	;# 
  2563  0E2D                     	;# 
  2564  0E2E                     	;# 
  2565  0E2F                     	;# 
  2566  0E90                     	;# 
  2567  0E91                     	;# 
  2568  0E92                     	;# 
  2569  0E94                     	;# 
  2570  0E95                     	;# 
  2571  0E9C                     	;# 
  2572  0E9D                     	;# 
  2573  0E9E                     	;# 
  2574  0E9F                     	;# 
  2575  0EA0                     	;# 
  2576  0EA1                     	;# 
  2577  0EA2                     	;# 
  2578  0EA3                     	;# 
  2579  0EA4                     	;# 
  2580  0EA5                     	;# 
  2581  0EA6                     	;# 
  2582  0EA7                     	;# 
  2583  0F0F                     	;# 
  2584  0F10                     	;# 
  2585  0F11                     	;# 
  2586  0F12                     	;# 
  2587  0F13                     	;# 
  2588  0F14                     	;# 
  2589  0F15                     	;# 
  2590  0F16                     	;# 
  2591  0F17                     	;# 
  2592  0F18                     	;# 
  2593  0F19                     	;# 
  2594  0F1A                     	;# 
  2595  0F1B                     	;# 
  2596  0F1C                     	;# 
  2597  0F1D                     	;# 
  2598  0F1E                     	;# 
  2599  0F1F                     	;# 
  2600  0F20                     	;# 
  2601  0F21                     	;# 
  2602  0F22                     	;# 
  2603  0F23                     	;# 
  2604  0F24                     	;# 
  2605  0F25                     	;# 
  2606  0F26                     	;# 
  2607  0F27                     	;# 
  2608  0F28                     	;# 
  2609  0F29                     	;# 
  2610  0F2A                     	;# 
  2611  0F2B                     	;# 
  2612  0F2C                     	;# 
  2613  0F2D                     	;# 
  2614  0F2E                     	;# 
  2615  0F2F                     	;# 
  2616  0F30                     	;# 
  2617  0F31                     	;# 
  2618  0F32                     	;# 
  2619  0F33                     	;# 
  2620  0F34                     	;# 
  2621  0F35                     	;# 
  2622  0F36                     	;# 
  2623  0F37                     	;# 
  2624  0FE4                     	;# 
  2625  0FE5                     	;# 
  2626  0FE6                     	;# 
  2627  0FE7                     	;# 
  2628  0FE8                     	;# 
  2629  0FE9                     	;# 
  2630  0FEA                     	;# 
  2631  0FEB                     	;# 
  2632  0FED                     	;# 
  2633  0FEE                     	;# 
  2634  0FEF                     	;# 
  2635  0000                     	;# 
  2636  0001                     	;# 
  2637  0002                     	;# 
  2638  0003                     	;# 
  2639  0004                     	;# 
  2640  0005                     	;# 
  2641  0006                     	;# 
  2642  0007                     	;# 
  2643  0008                     	;# 
  2644  0009                     	;# 
  2645  000A                     	;# 
  2646  000B                     	;# 
  2647  000C                     	;# 
  2648  000D                     	;# 
  2649  000E                     	;# 
  2650  0010                     	;# 
  2651  0011                     	;# 
  2652  0012                     	;# 
  2653  0013                     	;# 
  2654  0014                     	;# 
  2655  0015                     	;# 
  2656  0015                     	;# 
  2657  0016                     	;# 
  2658  0016                     	;# 
  2659  0017                     	;# 
  2660  0018                     	;# 
  2661  0019                     	;# 
  2662  0019                     	;# 
  2663  001A                     	;# 
  2664  001B                     	;# 
  2665  001C                     	;# 
  2666  001D                     	;# 
  2667  001E                     	;# 
  2668  001F                     	;# 
  2669  008C                     	;# 
  2670  008D                     	;# 
  2671  008E                     	;# 
  2672  0090                     	;# 
  2673  0091                     	;# 
  2674  0092                     	;# 
  2675  0093                     	;# 
  2676  0094                     	;# 
  2677  0097                     	;# 
  2678  009B                     	;# 
  2679  009B                     	;# 
  2680  009C                     	;# 
  2681  009D                     	;# 
  2682  009E                     	;# 
  2683  009F                     	;# 
  2684  010C                     	;# 
  2685  010D                     	;# 
  2686  010E                     	;# 
  2687  0111                     	;# 
  2688  0112                     	;# 
  2689  0113                     	;# 
  2690  0114                     	;# 
  2691  0115                     	;# 
  2692  0116                     	;# 
  2693  0117                     	;# 
  2694  0118                     	;# 
  2695  0119                     	;# 
  2696  018C                     	;# 
  2697  018D                     	;# 
  2698  018E                     	;# 
  2699  0197                     	;# 
  2700  0199                     	;# 
  2701  0199                     	;# 
  2702  0199                     	;# 
  2703  019A                     	;# 
  2704  019A                     	;# 
  2705  019A                     	;# 
  2706  019B                     	;# 
  2707  019B                     	;# 
  2708  019B                     	;# 
  2709  019B                     	;# 
  2710  019B                     	;# 
  2711  019C                     	;# 
  2712  019C                     	;# 
  2713  019C                     	;# 
  2714  019D                     	;# 
  2715  019D                     	;# 
  2716  019D                     	;# 
  2717  019E                     	;# 
  2718  019E                     	;# 
  2719  019E                     	;# 
  2720  019F                     	;# 
  2721  019F                     	;# 
  2722  019F                     	;# 
  2723  019F                     	;# 
  2724  019F                     	;# 
  2725  020C                     	;# 
  2726  020D                     	;# 
  2727  020E                     	;# 
  2728  0211                     	;# 
  2729  0211                     	;# 
  2730  0212                     	;# 
  2731  0212                     	;# 
  2732  0213                     	;# 
  2733  0213                     	;# 
  2734  0214                     	;# 
  2735  0214                     	;# 
  2736  0215                     	;# 
  2737  0215                     	;# 
  2738  0215                     	;# 
  2739  0215                     	;# 
  2740  0216                     	;# 
  2741  0216                     	;# 
  2742  0217                     	;# 
  2743  0217                     	;# 
  2744  0219                     	;# 
  2745  021A                     	;# 
  2746  021B                     	;# 
  2747  021C                     	;# 
  2748  021D                     	;# 
  2749  021D                     	;# 
  2750  021E                     	;# 
  2751  021F                     	;# 
  2752  028C                     	;# 
  2753  028D                     	;# 
  2754  028E                     	;# 
  2755  0291                     	;# 
  2756  0291                     	;# 
  2757  0292                     	;# 
  2758  0293                     	;# 
  2759  0294                     	;# 
  2760  0295                     	;# 
  2761  0295                     	;# 
  2762  0296                     	;# 
  2763  0297                     	;# 
  2764  0298                     	;# 
  2765  029F                     	;# 
  2766  030C                     	;# 
  2767  030D                     	;# 
  2768  030E                     	;# 
  2769  0311                     	;# 
  2770  0311                     	;# 
  2771  0312                     	;# 
  2772  0313                     	;# 
  2773  0314                     	;# 
  2774  0315                     	;# 
  2775  0315                     	;# 
  2776  0316                     	;# 
  2777  0317                     	;# 
  2778  0318                     	;# 
  2779  038C                     	;# 
  2780  038D                     	;# 
  2781  038E                     	;# 
  2782  0391                     	;# 
  2783  0392                     	;# 
  2784  0393                     	;# 
  2785  0394                     	;# 
  2786  0395                     	;# 
  2787  0396                     	;# 
  2788  0397                     	;# 
  2789  0398                     	;# 
  2790  0399                     	;# 
  2791  039A                     	;# 
  2792  039C                     	;# 
  2793  039D                     	;# 
  2794  039E                     	;# 
  2795  039F                     	;# 
  2796  0411                     	;# 
  2797  0411                     	;# 
  2798  0412                     	;# 
  2799  0413                     	;# 
  2800  0414                     	;# 
  2801  0415                     	;# 
  2802  0416                     	;# 
  2803  0417                     	;# 
  2804  0418                     	;# 
  2805  0418                     	;# 
  2806  0419                     	;# 
  2807  041A                     	;# 
  2808  041B                     	;# 
  2809  041C                     	;# 
  2810  041D                     	;# 
  2811  041E                     	;# 
  2812  041F                     	;# 
  2813  0498                     	;# 
  2814  0498                     	;# 
  2815  0499                     	;# 
  2816  049A                     	;# 
  2817  049B                     	;# 
  2818  049B                     	;# 
  2819  049C                     	;# 
  2820  049D                     	;# 
  2821  049E                     	;# 
  2822  049F                     	;# 
  2823  0617                     	;# 
  2824  0618                     	;# 
  2825  0619                     	;# 
  2826  0619                     	;# 
  2827  061A                     	;# 
  2828  061B                     	;# 
  2829  061C                     	;# 
  2830  061C                     	;# 
  2831  061F                     	;# 
  2832  0691                     	;# 
  2833  0692                     	;# 
  2834  0693                     	;# 
  2835  0694                     	;# 
  2836  0695                     	;# 
  2837  0696                     	;# 
  2838  0697                     	;# 
  2839  0698                     	;# 
  2840  0699                     	;# 
  2841  0711                     	;# 
  2842  0712                     	;# 
  2843  0713                     	;# 
  2844  0714                     	;# 
  2845  0715                     	;# 
  2846  0716                     	;# 
  2847  0717                     	;# 
  2848  0718                     	;# 
  2849  0719                     	;# 
  2850  0891                     	;# 
  2851  0891                     	;# 
  2852  0891                     	;# 
  2853  0891                     	;# 
  2854  0891                     	;# 
  2855  0891                     	;# 
  2856  0892                     	;# 
  2857  0892                     	;# 
  2858  0892                     	;# 
  2859  0893                     	;# 
  2860  0893                     	;# 
  2861  0893                     	;# 
  2862  0893                     	;# 
  2863  0893                     	;# 
  2864  0893                     	;# 
  2865  0894                     	;# 
  2866  0894                     	;# 
  2867  0894                     	;# 
  2868  0895                     	;# 
  2869  0895                     	;# 
  2870  0895                     	;# 
  2871  0896                     	;# 
  2872  0896                     	;# 
  2873  0896                     	;# 
  2874  089B                     	;# 
  2875  0911                     	;# 
  2876  0912                     	;# 
  2877  0913                     	;# 
  2878  0914                     	;# 
  2879  0915                     	;# 
  2880  0916                     	;# 
  2881  0918                     	;# 
  2882  0919                     	;# 
  2883  091A                     	;# 
  2884  091B                     	;# 
  2885  091C                     	;# 
  2886  091D                     	;# 
  2887  091E                     	;# 
  2888  091F                     	;# 
  2889  0E0F                     	;# 
  2890  0E10                     	;# 
  2891  0E11                     	;# 
  2892  0E12                     	;# 
  2893  0E13                     	;# 
  2894  0E14                     	;# 
  2895  0E15                     	;# 
  2896  0E16                     	;# 
  2897  0E17                     	;# 
  2898  0E18                     	;# 
  2899  0E19                     	;# 
  2900  0E1A                     	;# 
  2901  0E1B                     	;# 
  2902  0E1C                     	;# 
  2903  0E1D                     	;# 
  2904  0E1E                     	;# 
  2905  0E1F                     	;# 
  2906  0E20                     	;# 
  2907  0E21                     	;# 
  2908  0E22                     	;# 
  2909  0E24                     	;# 
  2910  0E25                     	;# 
  2911  0E28                     	;# 
  2912  0E29                     	;# 
  2913  0E2A                     	;# 
  2914  0E2B                     	;# 
  2915  0E2C                     	;# 
  2916  0E2D                     	;# 
  2917  0E2E                     	;# 
  2918  0E2F                     	;# 
  2919  0E90                     	;# 
  2920  0E91                     	;# 
  2921  0E92                     	;# 
  2922  0E94                     	;# 
  2923  0E95                     	;# 
  2924  0E9C                     	;# 
  2925  0E9D                     	;# 
  2926  0E9E                     	;# 
  2927  0E9F                     	;# 
  2928  0EA0                     	;# 
  2929  0EA1                     	;# 
  2930  0EA2                     	;# 
  2931  0EA3                     	;# 
  2932  0EA4                     	;# 
  2933  0EA5                     	;# 
  2934  0EA6                     	;# 
  2935  0EA7                     	;# 
  2936  0F0F                     	;# 
  2937  0F10                     	;# 
  2938  0F11                     	;# 
  2939  0F12                     	;# 
  2940  0F13                     	;# 
  2941  0F14                     	;# 
  2942  0F15                     	;# 
  2943  0F16                     	;# 
  2944  0F17                     	;# 
  2945  0F18                     	;# 
  2946  0F19                     	;# 
  2947  0F1A                     	;# 
  2948  0F1B                     	;# 
  2949  0F1C                     	;# 
  2950  0F1D                     	;# 
  2951  0F1E                     	;# 
  2952  0F1F                     	;# 
  2953  0F20                     	;# 
  2954  0F21                     	;# 
  2955  0F22                     	;# 
  2956  0F23                     	;# 
  2957  0F24                     	;# 
  2958  0F25                     	;# 
  2959  0F26                     	;# 
  2960  0F27                     	;# 
  2961  0F28                     	;# 
  2962  0F29                     	;# 
  2963  0F2A                     	;# 
  2964  0F2B                     	;# 
  2965  0F2C                     	;# 
  2966  0F2D                     	;# 
  2967  0F2E                     	;# 
  2968  0F2F                     	;# 
  2969  0F30                     	;# 
  2970  0F31                     	;# 
  2971  0F32                     	;# 
  2972  0F33                     	;# 
  2973  0F34                     	;# 
  2974  0F35                     	;# 
  2975  0F36                     	;# 
  2976  0F37                     	;# 
  2977  0FE4                     	;# 
  2978  0FE5                     	;# 
  2979  0FE6                     	;# 
  2980  0FE7                     	;# 
  2981  0FE8                     	;# 
  2982  0FE9                     	;# 
  2983  0FEA                     	;# 
  2984  0FEB                     	;# 
  2985  0FED                     	;# 
  2986  0FEE                     	;# 
  2987  0FEF                     	;# 
  2988  0000                     	;# 
  2989  0001                     	;# 
  2990  0002                     	;# 
  2991  0003                     	;# 
  2992  0004                     	;# 
  2993  0005                     	;# 
  2994  0006                     	;# 
  2995  0007                     	;# 
  2996  0008                     	;# 
  2997  0009                     	;# 
  2998  000A                     	;# 
  2999  000B                     	;# 
  3000  000C                     	;# 
  3001  000D                     	;# 
  3002  000E                     	;# 
  3003  0010                     	;# 
  3004  0011                     	;# 
  3005  0012                     	;# 
  3006  0013                     	;# 
  3007  0014                     	;# 
  3008  0015                     	;# 
  3009  0015                     	;# 
  3010  0016                     	;# 
  3011  0016                     	;# 
  3012  0017                     	;# 
  3013  0018                     	;# 
  3014  0019                     	;# 
  3015  0019                     	;# 
  3016  001A                     	;# 
  3017  001B                     	;# 
  3018  001C                     	;# 
  3019  001D                     	;# 
  3020  001E                     	;# 
  3021  001F                     	;# 
  3022  008C                     	;# 
  3023  008D                     	;# 
  3024  008E                     	;# 
  3025  0090                     	;# 
  3026  0091                     	;# 
  3027  0092                     	;# 
  3028  0093                     	;# 
  3029  0094                     	;# 
  3030  0097                     	;# 
  3031  009B                     	;# 
  3032  009B                     	;# 
  3033  009C                     	;# 
  3034  009D                     	;# 
  3035  009E                     	;# 
  3036  009F                     	;# 
  3037  010C                     	;# 
  3038  010D                     	;# 
  3039  010E                     	;# 
  3040  0111                     	;# 
  3041  0112                     	;# 
  3042  0113                     	;# 
  3043  0114                     	;# 
  3044  0115                     	;# 
  3045  0116                     	;# 
  3046  0117                     	;# 
  3047  0118                     	;# 
  3048  0119                     	;# 
  3049  018C                     	;# 
  3050  018D                     	;# 
  3051  018E                     	;# 
  3052  0197                     	;# 
  3053  0199                     	;# 
  3054  0199                     	;# 
  3055  0199                     	;# 
  3056  019A                     	;# 
  3057  019A                     	;# 
  3058  019A                     	;# 
  3059  019B                     	;# 
  3060  019B                     	;# 
  3061  019B                     	;# 
  3062  019B                     	;# 
  3063  019B                     	;# 
  3064  019C                     	;# 
  3065  019C                     	;# 
  3066  019C                     	;# 
  3067  019D                     	;# 
  3068  019D                     	;# 
  3069  019D                     	;# 
  3070  019E                     	;# 
  3071  019E                     	;# 
  3072  019E                     	;# 
  3073  019F                     	;# 
  3074  019F                     	;# 
  3075  019F                     	;# 
  3076  019F                     	;# 
  3077  019F                     	;# 
  3078  020C                     	;# 
  3079  020D                     	;# 
  3080  020E                     	;# 
  3081  0211                     	;# 
  3082  0211                     	;# 
  3083  0212                     	;# 
  3084  0212                     	;# 
  3085  0213                     	;# 
  3086  0213                     	;# 
  3087  0214                     	;# 
  3088  0214                     	;# 
  3089  0215                     	;# 
  3090  0215                     	;# 
  3091  0215                     	;# 
  3092  0215                     	;# 
  3093  0216                     	;# 
  3094  0216                     	;# 
  3095  0217                     	;# 
  3096  0217                     	;# 
  3097  0219                     	;# 
  3098  021A                     	;# 
  3099  021B                     	;# 
  3100  021C                     	;# 
  3101  021D                     	;# 
  3102  021D                     	;# 
  3103  021E                     	;# 
  3104  021F                     	;# 
  3105  028C                     	;# 
  3106  028D                     	;# 
  3107  028E                     	;# 
  3108  0291                     	;# 
  3109  0291                     	;# 
  3110  0292                     	;# 
  3111  0293                     	;# 
  3112  0294                     	;# 
  3113  0295                     	;# 
  3114  0295                     	;# 
  3115  0296                     	;# 
  3116  0297                     	;# 
  3117  0298                     	;# 
  3118  029F                     	;# 
  3119  030C                     	;# 
  3120  030D                     	;# 
  3121  030E                     	;# 
  3122  0311                     	;# 
  3123  0311                     	;# 
  3124  0312                     	;# 
  3125  0313                     	;# 
  3126  0314                     	;# 
  3127  0315                     	;# 
  3128  0315                     	;# 
  3129  0316                     	;# 
  3130  0317                     	;# 
  3131  0318                     	;# 
  3132  038C                     	;# 
  3133  038D                     	;# 
  3134  038E                     	;# 
  3135  0391                     	;# 
  3136  0392                     	;# 
  3137  0393                     	;# 
  3138  0394                     	;# 
  3139  0395                     	;# 
  3140  0396                     	;# 
  3141  0397                     	;# 
  3142  0398                     	;# 
  3143  0399                     	;# 
  3144  039A                     	;# 
  3145  039C                     	;# 
  3146  039D                     	;# 
  3147  039E                     	;# 
  3148  039F                     	;# 
  3149  0411                     	;# 
  3150  0411                     	;# 
  3151  0412                     	;# 
  3152  0413                     	;# 
  3153  0414                     	;# 
  3154  0415                     	;# 
  3155  0416                     	;# 
  3156  0417                     	;# 
  3157  0418                     	;# 
  3158  0418                     	;# 
  3159  0419                     	;# 
  3160  041A                     	;# 
  3161  041B                     	;# 
  3162  041C                     	;# 
  3163  041D                     	;# 
  3164  041E                     	;# 
  3165  041F                     	;# 
  3166  0498                     	;# 
  3167  0498                     	;# 
  3168  0499                     	;# 
  3169  049A                     	;# 
  3170  049B                     	;# 
  3171  049B                     	;# 
  3172  049C                     	;# 
  3173  049D                     	;# 
  3174  049E                     	;# 
  3175  049F                     	;# 
  3176  0617                     	;# 
  3177  0618                     	;# 
  3178  0619                     	;# 
  3179  0619                     	;# 
  3180  061A                     	;# 
  3181  061B                     	;# 
  3182  061C                     	;# 
  3183  061C                     	;# 
  3184  061F                     	;# 
  3185  0691                     	;# 
  3186  0692                     	;# 
  3187  0693                     	;# 
  3188  0694                     	;# 
  3189  0695                     	;# 
  3190  0696                     	;# 
  3191  0697                     	;# 
  3192  0698                     	;# 
  3193  0699                     	;# 
  3194  0711                     	;# 
  3195  0712                     	;# 
  3196  0713                     	;# 
  3197  0714                     	;# 
  3198  0715                     	;# 
  3199  0716                     	;# 
  3200  0717                     	;# 
  3201  0718                     	;# 
  3202  0719                     	;# 
  3203  0891                     	;# 
  3204  0891                     	;# 
  3205  0891                     	;# 
  3206  0891                     	;# 
  3207  0891                     	;# 
  3208  0891                     	;# 
  3209  0892                     	;# 
  3210  0892                     	;# 
  3211  0892                     	;# 
  3212  0893                     	;# 
  3213  0893                     	;# 
  3214  0893                     	;# 
  3215  0893                     	;# 
  3216  0893                     	;# 
  3217  0893                     	;# 
  3218  0894                     	;# 
  3219  0894                     	;# 
  3220  0894                     	;# 
  3221  0895                     	;# 
  3222  0895                     	;# 
  3223  0895                     	;# 
  3224  0896                     	;# 
  3225  0896                     	;# 
  3226  0896                     	;# 
  3227  089B                     	;# 
  3228  0911                     	;# 
  3229  0912                     	;# 
  3230  0913                     	;# 
  3231  0914                     	;# 
  3232  0915                     	;# 
  3233  0916                     	;# 
  3234  0918                     	;# 
  3235  0919                     	;# 
  3236  091A                     	;# 
  3237  091B                     	;# 
  3238  091C                     	;# 
  3239  091D                     	;# 
  3240  091E                     	;# 
  3241  091F                     	;# 
  3242  0E0F                     	;# 
  3243  0E10                     	;# 
  3244  0E11                     	;# 
  3245  0E12                     	;# 
  3246  0E13                     	;# 
  3247  0E14                     	;# 
  3248  0E15                     	;# 
  3249  0E16                     	;# 
  3250  0E17                     	;# 
  3251  0E18                     	;# 
  3252  0E19                     	;# 
  3253  0E1A                     	;# 
  3254  0E1B                     	;# 
  3255  0E1C                     	;# 
  3256  0E1D                     	;# 
  3257  0E1E                     	;# 
  3258  0E1F                     	;# 
  3259  0E20                     	;# 
  3260  0E21                     	;# 
  3261  0E22                     	;# 
  3262  0E24                     	;# 
  3263  0E25                     	;# 
  3264  0E28                     	;# 
  3265  0E29                     	;# 
  3266  0E2A                     	;# 
  3267  0E2B                     	;# 
  3268  0E2C                     	;# 
  3269  0E2D                     	;# 
  3270  0E2E                     	;# 
  3271  0E2F                     	;# 
  3272  0E90                     	;# 
  3273  0E91                     	;# 
  3274  0E92                     	;# 
  3275  0E94                     	;# 
  3276  0E95                     	;# 
  3277  0E9C                     	;# 
  3278  0E9D                     	;# 
  3279  0E9E                     	;# 
  3280  0E9F                     	;# 
  3281  0EA0                     	;# 
  3282  0EA1                     	;# 
  3283  0EA2                     	;# 
  3284  0EA3                     	;# 
  3285  0EA4                     	;# 
  3286  0EA5                     	;# 
  3287  0EA6                     	;# 
  3288  0EA7                     	;# 
  3289  0F0F                     	;# 
  3290  0F10                     	;# 
  3291  0F11                     	;# 
  3292  0F12                     	;# 
  3293  0F13                     	;# 
  3294  0F14                     	;# 
  3295  0F15                     	;# 
  3296  0F16                     	;# 
  3297  0F17                     	;# 
  3298  0F18                     	;# 
  3299  0F19                     	;# 
  3300  0F1A                     	;# 
  3301  0F1B                     	;# 
  3302  0F1C                     	;# 
  3303  0F1D                     	;# 
  3304  0F1E                     	;# 
  3305  0F1F                     	;# 
  3306  0F20                     	;# 
  3307  0F21                     	;# 
  3308  0F22                     	;# 
  3309  0F23                     	;# 
  3310  0F24                     	;# 
  3311  0F25                     	;# 
  3312  0F26                     	;# 
  3313  0F27                     	;# 
  3314  0F28                     	;# 
  3315  0F29                     	;# 
  3316  0F2A                     	;# 
  3317  0F2B                     	;# 
  3318  0F2C                     	;# 
  3319  0F2D                     	;# 
  3320  0F2E                     	;# 
  3321  0F2F                     	;# 
  3322  0F30                     	;# 
  3323  0F31                     	;# 
  3324  0F32                     	;# 
  3325  0F33                     	;# 
  3326  0F34                     	;# 
  3327  0F35                     	;# 
  3328  0F36                     	;# 
  3329  0F37                     	;# 
  3330  0FE4                     	;# 
  3331  0FE5                     	;# 
  3332  0FE6                     	;# 
  3333  0FE7                     	;# 
  3334  0FE8                     	;# 
  3335  0FE9                     	;# 
  3336  0FEA                     	;# 
  3337  0FEB                     	;# 
  3338  0FED                     	;# 
  3339  0FEE                     	;# 
  3340  0FEF                     	;# 
  3341  0000                     	;# 
  3342  0001                     	;# 
  3343  0002                     	;# 
  3344  0003                     	;# 
  3345  0004                     	;# 
  3346  0005                     	;# 
  3347  0006                     	;# 
  3348  0007                     	;# 
  3349  0008                     	;# 
  3350  0009                     	;# 
  3351  000A                     	;# 
  3352  000B                     	;# 
  3353  000C                     	;# 
  3354  000D                     	;# 
  3355  000E                     	;# 
  3356  0010                     	;# 
  3357  0011                     	;# 
  3358  0012                     	;# 
  3359  0013                     	;# 
  3360  0014                     	;# 
  3361  0015                     	;# 
  3362  0015                     	;# 
  3363  0016                     	;# 
  3364  0016                     	;# 
  3365  0017                     	;# 
  3366  0018                     	;# 
  3367  0019                     	;# 
  3368  0019                     	;# 
  3369  001A                     	;# 
  3370  001B                     	;# 
  3371  001C                     	;# 
  3372  001D                     	;# 
  3373  001E                     	;# 
  3374  001F                     	;# 
  3375  008C                     	;# 
  3376  008D                     	;# 
  3377  008E                     	;# 
  3378  0090                     	;# 
  3379  0091                     	;# 
  3380  0092                     	;# 
  3381  0093                     	;# 
  3382  0094                     	;# 
  3383  0097                     	;# 
  3384  009B                     	;# 
  3385  009B                     	;# 
  3386  009C                     	;# 
  3387  009D                     	;# 
  3388  009E                     	;# 
  3389  009F                     	;# 
  3390  010C                     	;# 
  3391  010D                     	;# 
  3392  010E                     	;# 
  3393  0111                     	;# 
  3394  0112                     	;# 
  3395  0113                     	;# 
  3396  0114                     	;# 
  3397  0115                     	;# 
  3398  0116                     	;# 
  3399  0117                     	;# 
  3400  0118                     	;# 
  3401  0119                     	;# 
  3402  018C                     	;# 
  3403  018D                     	;# 
  3404  018E                     	;# 
  3405  0197                     	;# 
  3406  0199                     	;# 
  3407  0199                     	;# 
  3408  0199                     	;# 
  3409  019A                     	;# 
  3410  019A                     	;# 
  3411  019A                     	;# 
  3412  019B                     	;# 
  3413  019B                     	;# 
  3414  019B                     	;# 
  3415  019B                     	;# 
  3416  019B                     	;# 
  3417  019C                     	;# 
  3418  019C                     	;# 
  3419  019C                     	;# 
  3420  019D                     	;# 
  3421  019D                     	;# 
  3422  019D                     	;# 
  3423  019E                     	;# 
  3424  019E                     	;# 
  3425  019E                     	;# 
  3426  019F                     	;# 
  3427  019F                     	;# 
  3428  019F                     	;# 
  3429  019F                     	;# 
  3430  019F                     	;# 
  3431  020C                     	;# 
  3432  020D                     	;# 
  3433  020E                     	;# 
  3434  0211                     	;# 
  3435  0211                     	;# 
  3436  0212                     	;# 
  3437  0212                     	;# 
  3438  0213                     	;# 
  3439  0213                     	;# 
  3440  0214                     	;# 
  3441  0214                     	;# 
  3442  0215                     	;# 
  3443  0215                     	;# 
  3444  0215                     	;# 
  3445  0215                     	;# 
  3446  0216                     	;# 
  3447  0216                     	;# 
  3448  0217                     	;# 
  3449  0217                     	;# 
  3450  0219                     	;# 
  3451  021A                     	;# 
  3452  021B                     	;# 
  3453  021C                     	;# 
  3454  021D                     	;# 
  3455  021D                     	;# 
  3456  021E                     	;# 
  3457  021F                     	;# 
  3458  028C                     	;# 
  3459  028D                     	;# 
  3460  028E                     	;# 
  3461  0291                     	;# 
  3462  0291                     	;# 
  3463  0292                     	;# 
  3464  0293                     	;# 
  3465  0294                     	;# 
  3466  0295                     	;# 
  3467  0295                     	;# 
  3468  0296                     	;# 
  3469  0297                     	;# 
  3470  0298                     	;# 
  3471  029F                     	;# 
  3472  030C                     	;# 
  3473  030D                     	;# 
  3474  030E                     	;# 
  3475  0311                     	;# 
  3476  0311                     	;# 
  3477  0312                     	;# 
  3478  0313                     	;# 
  3479  0314                     	;# 
  3480  0315                     	;# 
  3481  0315                     	;# 
  3482  0316                     	;# 
  3483  0317                     	;# 
  3484  0318                     	;# 
  3485  038C                     	;# 
  3486  038D                     	;# 
  3487  038E                     	;# 
  3488  0391                     	;# 
  3489  0392                     	;# 
  3490  0393                     	;# 
  3491  0394                     	;# 
  3492  0395                     	;# 
  3493  0396                     	;# 
  3494  0397                     	;# 
  3495  0398                     	;# 
  3496  0399                     	;# 
  3497  039A                     	;# 
  3498  039C                     	;# 
  3499  039D                     	;# 
  3500  039E                     	;# 
  3501  039F                     	;# 
  3502  0411                     	;# 
  3503  0411                     	;# 
  3504  0412                     	;# 
  3505  0413                     	;# 
  3506  0414                     	;# 
  3507  0415                     	;# 
  3508  0416                     	;# 
  3509  0417                     	;# 
  3510  0418                     	;# 
  3511  0418                     	;# 
  3512  0419                     	;# 
  3513  041A                     	;# 
  3514  041B                     	;# 
  3515  041C                     	;# 
  3516  041D                     	;# 
  3517  041E                     	;# 
  3518  041F                     	;# 
  3519  0498                     	;# 
  3520  0498                     	;# 
  3521  0499                     	;# 
  3522  049A                     	;# 
  3523  049B                     	;# 
  3524  049B                     	;# 
  3525  049C                     	;# 
  3526  049D                     	;# 
  3527  049E                     	;# 
  3528  049F                     	;# 
  3529  0617                     	;# 
  3530  0618                     	;# 
  3531  0619                     	;# 
  3532  0619                     	;# 
  3533  061A                     	;# 
  3534  061B                     	;# 
  3535  061C                     	;# 
  3536  061C                     	;# 
  3537  061F                     	;# 
  3538  0691                     	;# 
  3539  0692                     	;# 
  3540  0693                     	;# 
  3541  0694                     	;# 
  3542  0695                     	;# 
  3543  0696                     	;# 
  3544  0697                     	;# 
  3545  0698                     	;# 
  3546  0699                     	;# 
  3547  0711                     	;# 
  3548  0712                     	;# 
  3549  0713                     	;# 
  3550  0714                     	;# 
  3551  0715                     	;# 
  3552  0716                     	;# 
  3553  0717                     	;# 
  3554  0718                     	;# 
  3555  0719                     	;# 
  3556  0891                     	;# 
  3557  0891                     	;# 
  3558  0891                     	;# 
  3559  0891                     	;# 
  3560  0891                     	;# 
  3561  0891                     	;# 
  3562  0892                     	;# 
  3563  0892                     	;# 
  3564  0892                     	;# 
  3565  0893                     	;# 
  3566  0893                     	;# 
  3567  0893                     	;# 
  3568  0893                     	;# 
  3569  0893                     	;# 
  3570  0893                     	;# 
  3571  0894                     	;# 
  3572  0894                     	;# 
  3573  0894                     	;# 
  3574  0895                     	;# 
  3575  0895                     	;# 
  3576  0895                     	;# 
  3577  0896                     	;# 
  3578  0896                     	;# 
  3579  0896                     	;# 
  3580  089B                     	;# 
  3581  0911                     	;# 
  3582  0912                     	;# 
  3583  0913                     	;# 
  3584  0914                     	;# 
  3585  0915                     	;# 
  3586  0916                     	;# 
  3587  0918                     	;# 
  3588  0919                     	;# 
  3589  091A                     	;# 
  3590  091B                     	;# 
  3591  091C                     	;# 
  3592  091D                     	;# 
  3593  091E                     	;# 
  3594  091F                     	;# 
  3595  0E0F                     	;# 
  3596  0E10                     	;# 
  3597  0E11                     	;# 
  3598  0E12                     	;# 
  3599  0E13                     	;# 
  3600  0E14                     	;# 
  3601  0E15                     	;# 
  3602  0E16                     	;# 
  3603  0E17                     	;# 
  3604  0E18                     	;# 
  3605  0E19                     	;# 
  3606  0E1A                     	;# 
  3607  0E1B                     	;# 
  3608  0E1C                     	;# 
  3609  0E1D                     	;# 
  3610  0E1E                     	;# 
  3611  0E1F                     	;# 
  3612  0E20                     	;# 
  3613  0E21                     	;# 
  3614  0E22                     	;# 
  3615  0E24                     	;# 
  3616  0E25                     	;# 
  3617  0E28                     	;# 
  3618  0E29                     	;# 
  3619  0E2A                     	;# 
  3620  0E2B                     	;# 
  3621  0E2C                     	;# 
  3622  0E2D                     	;# 
  3623  0E2E                     	;# 
  3624  0E2F                     	;# 
  3625  0E90                     	;# 
  3626  0E91                     	;# 
  3627  0E92                     	;# 
  3628  0E94                     	;# 
  3629  0E95                     	;# 
  3630  0E9C                     	;# 
  3631  0E9D                     	;# 
  3632  0E9E                     	;# 
  3633  0E9F                     	;# 
  3634  0EA0                     	;# 
  3635  0EA1                     	;# 
  3636  0EA2                     	;# 
  3637  0EA3                     	;# 
  3638  0EA4                     	;# 
  3639  0EA5                     	;# 
  3640  0EA6                     	;# 
  3641  0EA7                     	;# 
  3642  0F0F                     	;# 
  3643  0F10                     	;# 
  3644  0F11                     	;# 
  3645  0F12                     	;# 
  3646  0F13                     	;# 
  3647  0F14                     	;# 
  3648  0F15                     	;# 
  3649  0F16                     	;# 
  3650  0F17                     	;# 
  3651  0F18                     	;# 
  3652  0F19                     	;# 
  3653  0F1A                     	;# 
  3654  0F1B                     	;# 
  3655  0F1C                     	;# 
  3656  0F1D                     	;# 
  3657  0F1E                     	;# 
  3658  0F1F                     	;# 
  3659  0F20                     	;# 
  3660  0F21                     	;# 
  3661  0F22                     	;# 
  3662  0F23                     	;# 
  3663  0F24                     	;# 
  3664  0F25                     	;# 
  3665  0F26                     	;# 
  3666  0F27                     	;# 
  3667  0F28                     	;# 
  3668  0F29                     	;# 
  3669  0F2A                     	;# 
  3670  0F2B                     	;# 
  3671  0F2C                     	;# 
  3672  0F2D                     	;# 
  3673  0F2E                     	;# 
  3674  0F2F                     	;# 
  3675  0F30                     	;# 
  3676  0F31                     	;# 
  3677  0F32                     	;# 
  3678  0F33                     	;# 
  3679  0F34                     	;# 
  3680  0F35                     	;# 
  3681  0F36                     	;# 
  3682  0F37                     	;# 
  3683  0FE4                     	;# 
  3684  0FE5                     	;# 
  3685  0FE6                     	;# 
  3686  0FE7                     	;# 
  3687  0FE8                     	;# 
  3688  0FE9                     	;# 
  3689  0FEA                     	;# 
  3690  0FEB                     	;# 
  3691  0FED                     	;# 
  3692  0FEE                     	;# 
  3693  0FEF                     	;# 
  3694  0000                     	;# 
  3695  0001                     	;# 
  3696  0002                     	;# 
  3697  0003                     	;# 
  3698  0004                     	;# 
  3699  0005                     	;# 
  3700  0006                     	;# 
  3701  0007                     	;# 
  3702  0008                     	;# 
  3703  0009                     	;# 
  3704  000A                     	;# 
  3705  000B                     	;# 
  3706  000C                     	;# 
  3707  000D                     	;# 
  3708  000E                     	;# 
  3709  0010                     	;# 
  3710  0011                     	;# 
  3711  0012                     	;# 
  3712  0013                     	;# 
  3713  0014                     	;# 
  3714  0015                     	;# 
  3715  0015                     	;# 
  3716  0016                     	;# 
  3717  0016                     	;# 
  3718  0017                     	;# 
  3719  0018                     	;# 
  3720  0019                     	;# 
  3721  0019                     	;# 
  3722  001A                     	;# 
  3723  001B                     	;# 
  3724  001C                     	;# 
  3725  001D                     	;# 
  3726  001E                     	;# 
  3727  001F                     	;# 
  3728  008C                     	;# 
  3729  008D                     	;# 
  3730  008E                     	;# 
  3731  0090                     	;# 
  3732  0091                     	;# 
  3733  0092                     	;# 
  3734  0093                     	;# 
  3735  0094                     	;# 
  3736  0097                     	;# 
  3737  009B                     	;# 
  3738  009B                     	;# 
  3739  009C                     	;# 
  3740  009D                     	;# 
  3741  009E                     	;# 
  3742  009F                     	;# 
  3743  010C                     	;# 
  3744  010D                     	;# 
  3745  010E                     	;# 
  3746  0111                     	;# 
  3747  0112                     	;# 
  3748  0113                     	;# 
  3749  0114                     	;# 
  3750  0115                     	;# 
  3751  0116                     	;# 
  3752  0117                     	;# 
  3753  0118                     	;# 
  3754  0119                     	;# 
  3755  018C                     	;# 
  3756  018D                     	;# 
  3757  018E                     	;# 
  3758  0197                     	;# 
  3759  0199                     	;# 
  3760  0199                     	;# 
  3761  0199                     	;# 
  3762  019A                     	;# 
  3763  019A                     	;# 
  3764  019A                     	;# 
  3765  019B                     	;# 
  3766  019B                     	;# 
  3767  019B                     	;# 
  3768  019B                     	;# 
  3769  019B                     	;# 
  3770  019C                     	;# 
  3771  019C                     	;# 
  3772  019C                     	;# 
  3773  019D                     	;# 
  3774  019D                     	;# 
  3775  019D                     	;# 
  3776  019E                     	;# 
  3777  019E                     	;# 
  3778  019E                     	;# 
  3779  019F                     	;# 
  3780  019F                     	;# 
  3781  019F                     	;# 
  3782  019F                     	;# 
  3783  019F                     	;# 
  3784  020C                     	;# 
  3785  020D                     	;# 
  3786  020E                     	;# 
  3787  0211                     	;# 
  3788  0211                     	;# 
  3789  0212                     	;# 
  3790  0212                     	;# 
  3791  0213                     	;# 
  3792  0213                     	;# 
  3793  0214                     	;# 
  3794  0214                     	;# 
  3795  0215                     	;# 
  3796  0215                     	;# 
  3797  0215                     	;# 
  3798  0215                     	;# 
  3799  0216                     	;# 
  3800  0216                     	;# 
  3801  0217                     	;# 
  3802  0217                     	;# 
  3803  0219                     	;# 
  3804  021A                     	;# 
  3805  021B                     	;# 
  3806  021C                     	;# 
  3807  021D                     	;# 
  3808  021D                     	;# 
  3809  021E                     	;# 
  3810  021F                     	;# 
  3811  028C                     	;# 
  3812  028D                     	;# 
  3813  028E                     	;# 
  3814  0291                     	;# 
  3815  0291                     	;# 
  3816  0292                     	;# 
  3817  0293                     	;# 
  3818  0294                     	;# 
  3819  0295                     	;# 
  3820  0295                     	;# 
  3821  0296                     	;# 
  3822  0297                     	;# 
  3823  0298                     	;# 
  3824  029F                     	;# 
  3825  030C                     	;# 
  3826  030D                     	;# 
  3827  030E                     	;# 
  3828  0311                     	;# 
  3829  0311                     	;# 
  3830  0312                     	;# 
  3831  0313                     	;# 
  3832  0314                     	;# 
  3833  0315                     	;# 
  3834  0315                     	;# 
  3835  0316                     	;# 
  3836  0317                     	;# 
  3837  0318                     	;# 
  3838  038C                     	;# 
  3839  038D                     	;# 
  3840  038E                     	;# 
  3841  0391                     	;# 
  3842  0392                     	;# 
  3843  0393                     	;# 
  3844  0394                     	;# 
  3845  0395                     	;# 
  3846  0396                     	;# 
  3847  0397                     	;# 
  3848  0398                     	;# 
  3849  0399                     	;# 
  3850  039A                     	;# 
  3851  039C                     	;# 
  3852  039D                     	;# 
  3853  039E                     	;# 
  3854  039F                     	;# 
  3855  0411                     	;# 
  3856  0411                     	;# 
  3857  0412                     	;# 
  3858  0413                     	;# 
  3859  0414                     	;# 
  3860  0415                     	;# 
  3861  0416                     	;# 
  3862  0417                     	;# 
  3863  0418                     	;# 
  3864  0418                     	;# 
  3865  0419                     	;# 
  3866  041A                     	;# 
  3867  041B                     	;# 
  3868  041C                     	;# 
  3869  041D                     	;# 
  3870  041E                     	;# 
  3871  041F                     	;# 
  3872  0498                     	;# 
  3873  0498                     	;# 
  3874  0499                     	;# 
  3875  049A                     	;# 
  3876  049B                     	;# 
  3877  049B                     	;# 
  3878  049C                     	;# 
  3879  049D                     	;# 
  3880  049E                     	;# 
  3881  049F                     	;# 
  3882  0617                     	;# 
  3883  0618                     	;# 
  3884  0619                     	;# 
  3885  0619                     	;# 
  3886  061A                     	;# 
  3887  061B                     	;# 
  3888  061C                     	;# 
  3889  061C                     	;# 
  3890  061F                     	;# 
  3891  0691                     	;# 
  3892  0692                     	;# 
  3893  0693                     	;# 
  3894  0694                     	;# 
  3895  0695                     	;# 
  3896  0696                     	;# 
  3897  0697                     	;# 
  3898  0698                     	;# 
  3899  0699                     	;# 
  3900  0711                     	;# 
  3901  0712                     	;# 
  3902  0713                     	;# 
  3903  0714                     	;# 
  3904  0715                     	;# 
  3905  0716                     	;# 
  3906  0717                     	;# 
  3907  0718                     	;# 
  3908  0719                     	;# 
  3909  0891                     	;# 
  3910  0891                     	;# 
  3911  0891                     	;# 
  3912  0891                     	;# 
  3913  0891                     	;# 
  3914  0891                     	;# 
  3915  0892                     	;# 
  3916  0892                     	;# 
  3917  0892                     	;# 
  3918  0893                     	;# 
  3919  0893                     	;# 
  3920  0893                     	;# 
  3921  0893                     	;# 
  3922  0893                     	;# 
  3923  0893                     	;# 
  3924  0894                     	;# 
  3925  0894                     	;# 
  3926  0894                     	;# 
  3927  0895                     	;# 
  3928  0895                     	;# 
  3929  0895                     	;# 
  3930  0896                     	;# 
  3931  0896                     	;# 
  3932  0896                     	;# 
  3933  089B                     	;# 
  3934  0911                     	;# 
  3935  0912                     	;# 
  3936  0913                     	;# 
  3937  0914                     	;# 
  3938  0915                     	;# 
  3939  0916                     	;# 
  3940  0918                     	;# 
  3941  0919                     	;# 
  3942  091A                     	;# 
  3943  091B                     	;# 
  3944  091C                     	;# 
  3945  091D                     	;# 
  3946  091E                     	;# 
  3947  091F                     	;# 
  3948  0E0F                     	;# 
  3949  0E10                     	;# 
  3950  0E11                     	;# 
  3951  0E12                     	;# 
  3952  0E13                     	;# 
  3953  0E14                     	;# 
  3954  0E15                     	;# 
  3955  0E16                     	;# 
  3956  0E17                     	;# 
  3957  0E18                     	;# 
  3958  0E19                     	;# 
  3959  0E1A                     	;# 
  3960  0E1B                     	;# 
  3961  0E1C                     	;# 
  3962  0E1D                     	;# 
  3963  0E1E                     	;# 
  3964  0E1F                     	;# 
  3965  0E20                     	;# 
  3966  0E21                     	;# 
  3967  0E22                     	;# 
  3968  0E24                     	;# 
  3969  0E25                     	;# 
  3970  0E28                     	;# 
  3971  0E29                     	;# 
  3972  0E2A                     	;# 
  3973  0E2B                     	;# 
  3974  0E2C                     	;# 
  3975  0E2D                     	;# 
  3976  0E2E                     	;# 
  3977  0E2F                     	;# 
  3978  0E90                     	;# 
  3979  0E91                     	;# 
  3980  0E92                     	;# 
  3981  0E94                     	;# 
  3982  0E95                     	;# 
  3983  0E9C                     	;# 
  3984  0E9D                     	;# 
  3985  0E9E                     	;# 
  3986  0E9F                     	;# 
  3987  0EA0                     	;# 
  3988  0EA1                     	;# 
  3989  0EA2                     	;# 
  3990  0EA3                     	;# 
  3991  0EA4                     	;# 
  3992  0EA5                     	;# 
  3993  0EA6                     	;# 
  3994  0EA7                     	;# 
  3995  0F0F                     	;# 
  3996  0F10                     	;# 
  3997  0F11                     	;# 
  3998  0F12                     	;# 
  3999  0F13                     	;# 
  4000  0F14                     	;# 
  4001  0F15                     	;# 
  4002  0F16                     	;# 
  4003  0F17                     	;# 
  4004  0F18                     	;# 
  4005  0F19                     	;# 
  4006  0F1A                     	;# 
  4007  0F1B                     	;# 
  4008  0F1C                     	;# 
  4009  0F1D                     	;# 
  4010  0F1E                     	;# 
  4011  0F1F                     	;# 
  4012  0F20                     	;# 
  4013  0F21                     	;# 
  4014  0F22                     	;# 
  4015  0F23                     	;# 
  4016  0F24                     	;# 
  4017  0F25                     	;# 
  4018  0F26                     	;# 
  4019  0F27                     	;# 
  4020  0F28                     	;# 
  4021  0F29                     	;# 
  4022  0F2A                     	;# 
  4023  0F2B                     	;# 
  4024  0F2C                     	;# 
  4025  0F2D                     	;# 
  4026  0F2E                     	;# 
  4027  0F2F                     	;# 
  4028  0F30                     	;# 
  4029  0F31                     	;# 
  4030  0F32                     	;# 
  4031  0F33                     	;# 
  4032  0F34                     	;# 
  4033  0F35                     	;# 
  4034  0F36                     	;# 
  4035  0F37                     	;# 
  4036  0FE4                     	;# 
  4037  0FE5                     	;# 
  4038  0FE6                     	;# 
  4039  0FE7                     	;# 
  4040  0FE8                     	;# 
  4041  0FE9                     	;# 
  4042  0FEA                     	;# 
  4043  0FEB                     	;# 
  4044  0FED                     	;# 
  4045  0FEE                     	;# 
  4046  0FEF                     	;# 
  4047  0000                     	;# 
  4048  0001                     	;# 
  4049  0002                     	;# 
  4050  0003                     	;# 
  4051  0004                     	;# 
  4052  0005                     	;# 
  4053  0006                     	;# 
  4054  0007                     	;# 
  4055  0008                     	;# 
  4056  0009                     	;# 
  4057  000A                     	;# 
  4058  000B                     	;# 
  4059  000C                     	;# 
  4060  000D                     	;# 
  4061  000E                     	;# 
  4062  0010                     	;# 
  4063  0011                     	;# 
  4064  0012                     	;# 
  4065  0013                     	;# 
  4066  0014                     	;# 
  4067  0015                     	;# 
  4068  0015                     	;# 
  4069  0016                     	;# 
  4070  0016                     	;# 
  4071  0017                     	;# 
  4072  0018                     	;# 
  4073  0019                     	;# 
  4074  0019                     	;# 
  4075  001A                     	;# 
  4076  001B                     	;# 
  4077  001C                     	;# 
  4078  001D                     	;# 
  4079  001E                     	;# 
  4080  001F                     	;# 
  4081  008C                     	;# 
  4082  008D                     	;# 
  4083  008E                     	;# 
  4084  0090                     	;# 
  4085  0091                     	;# 
  4086  0092                     	;# 
  4087  0093                     	;# 
  4088  0094                     	;# 
  4089  0097                     	;# 
  4090  009B                     	;# 
  4091  009B                     	;# 
  4092  009C                     	;# 
  4093  009D                     	;# 
  4094  009E                     	;# 
  4095  009F                     	;# 
  4096  010C                     	;# 
  4097  010D                     	;# 
  4098  010E                     	;# 
  4099  0111                     	;# 
  4100  0112                     	;# 
  4101  0113                     	;# 
  4102  0114                     	;# 
  4103  0115                     	;# 
  4104  0116                     	;# 
  4105  0117                     	;# 
  4106  0118                     	;# 
  4107  0119                     	;# 
  4108  018C                     	;# 
  4109  018D                     	;# 
  4110  018E                     	;# 
  4111  0197                     	;# 
  4112  0199                     	;# 
  4113  0199                     	;# 
  4114  0199                     	;# 
  4115  019A                     	;# 
  4116  019A                     	;# 
  4117  019A                     	;# 
  4118  019B                     	;# 
  4119  019B                     	;# 
  4120  019B                     	;# 
  4121  019B                     	;# 
  4122  019B                     	;# 
  4123  019C                     	;# 
  4124  019C                     	;# 
  4125  019C                     	;# 
  4126  019D                     	;# 
  4127  019D                     	;# 
  4128  019D                     	;# 
  4129  019E                     	;# 
  4130  019E                     	;# 
  4131  019E                     	;# 
  4132  019F                     	;# 
  4133  019F                     	;# 
  4134  019F                     	;# 
  4135  019F                     	;# 
  4136  019F                     	;# 
  4137  020C                     	;# 
  4138  020D                     	;# 
  4139  020E                     	;# 
  4140  0211                     	;# 
  4141  0211                     	;# 
  4142  0212                     	;# 
  4143  0212                     	;# 
  4144  0213                     	;# 
  4145  0213                     	;# 
  4146  0214                     	;# 
  4147  0214                     	;# 
  4148  0215                     	;# 
  4149  0215                     	;# 
  4150  0215                     	;# 
  4151  0215                     	;# 
  4152  0216                     	;# 
  4153  0216                     	;# 
  4154  0217                     	;# 
  4155  0217                     	;# 
  4156  0219                     	;# 
  4157  021A                     	;# 
  4158  021B                     	;# 
  4159  021C                     	;# 
  4160  021D                     	;# 
  4161  021D                     	;# 
  4162  021E                     	;# 
  4163  021F                     	;# 
  4164  028C                     	;# 
  4165  028D                     	;# 
  4166  028E                     	;# 
  4167  0291                     	;# 
  4168  0291                     	;# 
  4169  0292                     	;# 
  4170  0293                     	;# 
  4171  0294                     	;# 
  4172  0295                     	;# 
  4173  0295                     	;# 
  4174  0296                     	;# 
  4175  0297                     	;# 
  4176  0298                     	;# 
  4177  029F                     	;# 
  4178  030C                     	;# 
  4179  030D                     	;# 
  4180  030E                     	;# 
  4181  0311                     	;# 
  4182  0311                     	;# 
  4183  0312                     	;# 
  4184  0313                     	;# 
  4185  0314                     	;# 
  4186  0315                     	;# 
  4187  0315                     	;# 
  4188  0316                     	;# 
  4189  0317                     	;# 
  4190  0318                     	;# 
  4191  038C                     	;# 
  4192  038D                     	;# 
  4193  038E                     	;# 
  4194  0391                     	;# 
  4195  0392                     	;# 
  4196  0393                     	;# 
  4197  0394                     	;# 
  4198  0395                     	;# 
  4199  0396                     	;# 
  4200  0397                     	;# 
  4201  0398                     	;# 
  4202  0399                     	;# 
  4203  039A                     	;# 
  4204  039C                     	;# 
  4205  039D                     	;# 
  4206  039E                     	;# 
  4207  039F                     	;# 
  4208  0411                     	;# 
  4209  0411                     	;# 
  4210  0412                     	;# 
  4211  0413                     	;# 
  4212  0414                     	;# 
  4213  0415                     	;# 
  4214  0416                     	;# 
  4215  0417                     	;# 
  4216  0418                     	;# 
  4217  0418                     	;# 
  4218  0419                     	;# 
  4219  041A                     	;# 
  4220  041B                     	;# 
  4221  041C                     	;# 
  4222  041D                     	;# 
  4223  041E                     	;# 
  4224  041F                     	;# 
  4225  0498                     	;# 
  4226  0498                     	;# 
  4227  0499                     	;# 
  4228  049A                     	;# 
  4229  049B                     	;# 
  4230  049B                     	;# 
  4231  049C                     	;# 
  4232  049D                     	;# 
  4233  049E                     	;# 
  4234  049F                     	;# 
  4235  0617                     	;# 
  4236  0618                     	;# 
  4237  0619                     	;# 
  4238  0619                     	;# 
  4239  061A                     	;# 
  4240  061B                     	;# 
  4241  061C                     	;# 
  4242  061C                     	;# 
  4243  061F                     	;# 
  4244  0691                     	;# 
  4245  0692                     	;# 
  4246  0693                     	;# 
  4247  0694                     	;# 
  4248  0695                     	;# 
  4249  0696                     	;# 
  4250  0697                     	;# 
  4251  0698                     	;# 
  4252  0699                     	;# 
  4253  0711                     	;# 
  4254  0712                     	;# 
  4255  0713                     	;# 
  4256  0714                     	;# 
  4257  0715                     	;# 
  4258  0716                     	;# 
  4259  0717                     	;# 
  4260  0718                     	;# 
  4261  0719                     	;# 
  4262  0891                     	;# 
  4263  0891                     	;# 
  4264  0891                     	;# 
  4265  0891                     	;# 
  4266  0891                     	;# 
  4267  0891                     	;# 
  4268  0892                     	;# 
  4269  0892                     	;# 
  4270  0892                     	;# 
  4271  0893                     	;# 
  4272  0893                     	;# 
  4273  0893                     	;# 
  4274  0893                     	;# 
  4275  0893                     	;# 
  4276  0893                     	;# 
  4277  0894                     	;# 
  4278  0894                     	;# 
  4279  0894                     	;# 
  4280  0895                     	;# 
  4281  0895                     	;# 
  4282  0895                     	;# 
  4283  0896                     	;# 
  4284  0896                     	;# 
  4285  0896                     	;# 
  4286  089B                     	;# 
  4287  0911                     	;# 
  4288  0912                     	;# 
  4289  0913                     	;# 
  4290  0914                     	;# 
  4291  0915                     	;# 
  4292  0916                     	;# 
  4293  0918                     	;# 
  4294  0919                     	;# 
  4295  091A                     	;# 
  4296  091B                     	;# 
  4297  091C                     	;# 
  4298  091D                     	;# 
  4299  091E                     	;# 
  4300  091F                     	;# 
  4301  0E0F                     	;# 
  4302  0E10                     	;# 
  4303  0E11                     	;# 
  4304  0E12                     	;# 
  4305  0E13                     	;# 
  4306  0E14                     	;# 
  4307  0E15                     	;# 
  4308  0E16                     	;# 
  4309  0E17                     	;# 
  4310  0E18                     	;# 
  4311  0E19                     	;# 
  4312  0E1A                     	;# 
  4313  0E1B                     	;# 
  4314  0E1C                     	;# 
  4315  0E1D                     	;# 
  4316  0E1E                     	;# 
  4317  0E1F                     	;# 
  4318  0E20                     	;# 
  4319  0E21                     	;# 
  4320  0E22                     	;# 
  4321  0E24                     	;# 
  4322  0E25                     	;# 
  4323  0E28                     	;# 
  4324  0E29                     	;# 
  4325  0E2A                     	;# 
  4326  0E2B                     	;# 
  4327  0E2C                     	;# 
  4328  0E2D                     	;# 
  4329  0E2E                     	;# 
  4330  0E2F                     	;# 
  4331  0E90                     	;# 
  4332  0E91                     	;# 
  4333  0E92                     	;# 
  4334  0E94                     	;# 
  4335  0E95                     	;# 
  4336  0E9C                     	;# 
  4337  0E9D                     	;# 
  4338  0E9E                     	;# 
  4339  0E9F                     	;# 
  4340  0EA0                     	;# 
  4341  0EA1                     	;# 
  4342  0EA2                     	;# 
  4343  0EA3                     	;# 
  4344  0EA4                     	;# 
  4345  0EA5                     	;# 
  4346  0EA6                     	;# 
  4347  0EA7                     	;# 
  4348  0F0F                     	;# 
  4349  0F10                     	;# 
  4350  0F11                     	;# 
  4351  0F12                     	;# 
  4352  0F13                     	;# 
  4353  0F14                     	;# 
  4354  0F15                     	;# 
  4355  0F16                     	;# 
  4356  0F17                     	;# 
  4357  0F18                     	;# 
  4358  0F19                     	;# 
  4359  0F1A                     	;# 
  4360  0F1B                     	;# 
  4361  0F1C                     	;# 
  4362  0F1D                     	;# 
  4363  0F1E                     	;# 
  4364  0F1F                     	;# 
  4365  0F20                     	;# 
  4366  0F21                     	;# 
  4367  0F22                     	;# 
  4368  0F23                     	;# 
  4369  0F24                     	;# 
  4370  0F25                     	;# 
  4371  0F26                     	;# 
  4372  0F27                     	;# 
  4373  0F28                     	;# 
  4374  0F29                     	;# 
  4375  0F2A                     	;# 
  4376  0F2B                     	;# 
  4377  0F2C                     	;# 
  4378  0F2D                     	;# 
  4379  0F2E                     	;# 
  4380  0F2F                     	;# 
  4381  0F30                     	;# 
  4382  0F31                     	;# 
  4383  0F32                     	;# 
  4384  0F33                     	;# 
  4385  0F34                     	;# 
  4386  0F35                     	;# 
  4387  0F36                     	;# 
  4388  0F37                     	;# 
  4389  0FE4                     	;# 
  4390  0FE5                     	;# 
  4391  0FE6                     	;# 
  4392  0FE7                     	;# 
  4393  0FE8                     	;# 
  4394  0FE9                     	;# 
  4395  0FEA                     	;# 
  4396  0FEB                     	;# 
  4397  0FED                     	;# 
  4398  0FEE                     	;# 
  4399  0FEF                     	;# 
  4400  0000                     	;# 
  4401  0001                     	;# 
  4402  0002                     	;# 
  4403  0003                     	;# 
  4404  0004                     	;# 
  4405  0005                     	;# 
  4406  0006                     	;# 
  4407  0007                     	;# 
  4408  0008                     	;# 
  4409  0009                     	;# 
  4410  000A                     	;# 
  4411  000B                     	;# 
  4412  000C                     	;# 
  4413  000D                     	;# 
  4414  000E                     	;# 
  4415  0010                     	;# 
  4416  0011                     	;# 
  4417  0012                     	;# 
  4418  0013                     	;# 
  4419  0014                     	;# 
  4420  0015                     	;# 
  4421  0015                     	;# 
  4422  0016                     	;# 
  4423  0016                     	;# 
  4424  0017                     	;# 
  4425  0018                     	;# 
  4426  0019                     	;# 
  4427  0019                     	;# 
  4428  001A                     	;# 
  4429  001B                     	;# 
  4430  001C                     	;# 
  4431  001D                     	;# 
  4432  001E                     	;# 
  4433  001F                     	;# 
  4434  008C                     	;# 
  4435  008D                     	;# 
  4436  008E                     	;# 
  4437  0090                     	;# 
  4438  0091                     	;# 
  4439  0092                     	;# 
  4440  0093                     	;# 
  4441  0094                     	;# 
  4442  0097                     	;# 
  4443  009B                     	;# 
  4444  009B                     	;# 
  4445  009C                     	;# 
  4446  009D                     	;# 
  4447  009E                     	;# 
  4448  009F                     	;# 
  4449  010C                     	;# 
  4450  010D                     	;# 
  4451  010E                     	;# 
  4452  0111                     	;# 
  4453  0112                     	;# 
  4454  0113                     	;# 
  4455  0114                     	;# 
  4456  0115                     	;# 
  4457  0116                     	;# 
  4458  0117                     	;# 
  4459  0118                     	;# 
  4460  0119                     	;# 
  4461  018C                     	;# 
  4462  018D                     	;# 
  4463  018E                     	;# 
  4464  0197                     	;# 
  4465  0199                     	;# 
  4466  0199                     	;# 
  4467  0199                     	;# 
  4468  019A                     	;# 
  4469  019A                     	;# 
  4470  019A                     	;# 
  4471  019B                     	;# 
  4472  019B                     	;# 
  4473  019B                     	;# 
  4474  019B                     	;# 
  4475  019B                     	;# 
  4476  019C                     	;# 
  4477  019C                     	;# 
  4478  019C                     	;# 
  4479  019D                     	;# 
  4480  019D                     	;# 
  4481  019D                     	;# 
  4482  019E                     	;# 
  4483  019E                     	;# 
  4484  019E                     	;# 
  4485  019F                     	;# 
  4486  019F                     	;# 
  4487  019F                     	;# 
  4488  019F                     	;# 
  4489  019F                     	;# 
  4490  020C                     	;# 
  4491  020D                     	;# 
  4492  020E                     	;# 
  4493  0211                     	;# 
  4494  0211                     	;# 
  4495  0212                     	;# 
  4496  0212                     	;# 
  4497  0213                     	;# 
  4498  0213                     	;# 
  4499  0214                     	;# 
  4500  0214                     	;# 
  4501  0215                     	;# 
  4502  0215                     	;# 
  4503  0215                     	;# 
  4504  0215                     	;# 
  4505  0216                     	;# 
  4506  0216                     	;# 
  4507  0217                     	;# 
  4508  0217                     	;# 
  4509  0219                     	;# 
  4510  021A                     	;# 
  4511  021B                     	;# 
  4512  021C                     	;# 
  4513  021D                     	;# 
  4514  021D                     	;# 
  4515  021E                     	;# 
  4516  021F                     	;# 
  4517  028C                     	;# 
  4518  028D                     	;# 
  4519  028E                     	;# 
  4520  0291                     	;# 
  4521  0291                     	;# 
  4522  0292                     	;# 
  4523  0293                     	;# 
  4524  0294                     	;# 
  4525  0295                     	;# 
  4526  0295                     	;# 
  4527  0296                     	;# 
  4528  0297                     	;# 
  4529  0298                     	;# 
  4530  029F                     	;# 
  4531  030C                     	;# 
  4532  030D                     	;# 
  4533  030E                     	;# 
  4534  0311                     	;# 
  4535  0311                     	;# 
  4536  0312                     	;# 
  4537  0313                     	;# 
  4538  0314                     	;# 
  4539  0315                     	;# 
  4540  0315                     	;# 
  4541  0316                     	;# 
  4542  0317                     	;# 
  4543  0318                     	;# 
  4544  038C                     	;# 
  4545  038D                     	;# 
  4546  038E                     	;# 
  4547  0391                     	;# 
  4548  0392                     	;# 
  4549  0393                     	;# 
  4550  0394                     	;# 
  4551  0395                     	;# 
  4552  0396                     	;# 
  4553  0397                     	;# 
  4554  0398                     	;# 
  4555  0399                     	;# 
  4556  039A                     	;# 
  4557  039C                     	;# 
  4558  039D                     	;# 
  4559  039E                     	;# 
  4560  039F                     	;# 
  4561  0411                     	;# 
  4562  0411                     	;# 
  4563  0412                     	;# 
  4564  0413                     	;# 
  4565  0414                     	;# 
  4566  0415                     	;# 
  4567  0416                     	;# 
  4568  0417                     	;# 
  4569  0418                     	;# 
  4570  0418                     	;# 
  4571  0419                     	;# 
  4572  041A                     	;# 
  4573  041B                     	;# 
  4574  041C                     	;# 
  4575  041D                     	;# 
  4576  041E                     	;# 
  4577  041F                     	;# 
  4578  0498                     	;# 
  4579  0498                     	;# 
  4580  0499                     	;# 
  4581  049A                     	;# 
  4582  049B                     	;# 
  4583  049B                     	;# 
  4584  049C                     	;# 
  4585  049D                     	;# 
  4586  049E                     	;# 
  4587  049F                     	;# 
  4588  0617                     	;# 
  4589  0618                     	;# 
  4590  0619                     	;# 
  4591  0619                     	;# 
  4592  061A                     	;# 
  4593  061B                     	;# 
  4594  061C                     	;# 
  4595  061C                     	;# 
  4596  061F                     	;# 
  4597  0691                     	;# 
  4598  0692                     	;# 
  4599  0693                     	;# 
  4600  0694                     	;# 
  4601  0695                     	;# 
  4602  0696                     	;# 
  4603  0697                     	;# 
  4604  0698                     	;# 
  4605  0699                     	;# 
  4606  0711                     	;# 
  4607  0712                     	;# 
  4608  0713                     	;# 
  4609  0714                     	;# 
  4610  0715                     	;# 
  4611  0716                     	;# 
  4612  0717                     	;# 
  4613  0718                     	;# 
  4614  0719                     	;# 
  4615  0891                     	;# 
  4616  0891                     	;# 
  4617  0891                     	;# 
  4618  0891                     	;# 
  4619  0891                     	;# 
  4620  0891                     	;# 
  4621  0892                     	;# 
  4622  0892                     	;# 
  4623  0892                     	;# 
  4624  0893                     	;# 
  4625  0893                     	;# 
  4626  0893                     	;# 
  4627  0893                     	;# 
  4628  0893                     	;# 
  4629  0893                     	;# 
  4630  0894                     	;# 
  4631  0894                     	;# 
  4632  0894                     	;# 
  4633  0895                     	;# 
  4634  0895                     	;# 
  4635  0895                     	;# 
  4636  0896                     	;# 
  4637  0896                     	;# 
  4638  0896                     	;# 
  4639  089B                     	;# 
  4640  0911                     	;# 
  4641  0912                     	;# 
  4642  0913                     	;# 
  4643  0914                     	;# 
  4644  0915                     	;# 
  4645  0916                     	;# 
  4646  0918                     	;# 
  4647  0919                     	;# 
  4648  091A                     	;# 
  4649  091B                     	;# 
  4650  091C                     	;# 
  4651  091D                     	;# 
  4652  091E                     	;# 
  4653  091F                     	;# 
  4654  0E0F                     	;# 
  4655  0E10                     	;# 
  4656  0E11                     	;# 
  4657  0E12                     	;# 
  4658  0E13                     	;# 
  4659  0E14                     	;# 
  4660  0E15                     	;# 
  4661  0E16                     	;# 
  4662  0E17                     	;# 
  4663  0E18                     	;# 
  4664  0E19                     	;# 
  4665  0E1A                     	;# 
  4666  0E1B                     	;# 
  4667  0E1C                     	;# 
  4668  0E1D                     	;# 
  4669  0E1E                     	;# 
  4670  0E1F                     	;# 
  4671  0E20                     	;# 
  4672  0E21                     	;# 
  4673  0E22                     	;# 
  4674  0E24                     	;# 
  4675  0E25                     	;# 
  4676  0E28                     	;# 
  4677  0E29                     	;# 
  4678  0E2A                     	;# 
  4679  0E2B                     	;# 
  4680  0E2C                     	;# 
  4681  0E2D                     	;# 
  4682  0E2E                     	;# 
  4683  0E2F                     	;# 
  4684  0E90                     	;# 
  4685  0E91                     	;# 
  4686  0E92                     	;# 
  4687  0E94                     	;# 
  4688  0E95                     	;# 
  4689  0E9C                     	;# 
  4690  0E9D                     	;# 
  4691  0E9E                     	;# 
  4692  0E9F                     	;# 
  4693  0EA0                     	;# 
  4694  0EA1                     	;# 
  4695  0EA2                     	;# 
  4696  0EA3                     	;# 
  4697  0EA4                     	;# 
  4698  0EA5                     	;# 
  4699  0EA6                     	;# 
  4700  0EA7                     	;# 
  4701  0F0F                     	;# 
  4702  0F10                     	;# 
  4703  0F11                     	;# 
  4704  0F12                     	;# 
  4705  0F13                     	;# 
  4706  0F14                     	;# 
  4707  0F15                     	;# 
  4708  0F16                     	;# 
  4709  0F17                     	;# 
  4710  0F18                     	;# 
  4711  0F19                     	;# 
  4712  0F1A                     	;# 
  4713  0F1B                     	;# 
  4714  0F1C                     	;# 
  4715  0F1D                     	;# 
  4716  0F1E                     	;# 
  4717  0F1F                     	;# 
  4718  0F20                     	;# 
  4719  0F21                     	;# 
  4720  0F22                     	;# 
  4721  0F23                     	;# 
  4722  0F24                     	;# 
  4723  0F25                     	;# 
  4724  0F26                     	;# 
  4725  0F27                     	;# 
  4726  0F28                     	;# 
  4727  0F29                     	;# 
  4728  0F2A                     	;# 
  4729  0F2B                     	;# 
  4730  0F2C                     	;# 
  4731  0F2D                     	;# 
  4732  0F2E                     	;# 
  4733  0F2F                     	;# 
  4734  0F30                     	;# 
  4735  0F31                     	;# 
  4736  0F32                     	;# 
  4737  0F33                     	;# 
  4738  0F34                     	;# 
  4739  0F35                     	;# 
  4740  0F36                     	;# 
  4741  0F37                     	;# 
  4742  0FE4                     	;# 
  4743  0FE5                     	;# 
  4744  0FE6                     	;# 
  4745  0FE7                     	;# 
  4746  0FE8                     	;# 
  4747  0FE9                     	;# 
  4748  0FEA                     	;# 
  4749  0FEB                     	;# 
  4750  0FED                     	;# 
  4751  0FEE                     	;# 
  4752  0FEF                     	;# 
  4753                           
  4754                           	psect	idataCOMMON
  4755  0869                     __pidataCOMMON:	
  4756                           
  4757                           ;initializer for _val
  4758  0869  3404               	retlw	4
  4759                           
  4760                           	psect	idataBANK0
  4761  0868                     __pidataBANK0:	
  4762                           
  4763                           ;initializer for _start
  4764  0868  3401               	retlw	1
  4765                           
  4766                           	psect	idataBANK2
  4767  0944                     __pidataBANK2:	
  4768                           
  4769                           ;initializer for _names
  4770  0944  343D               	retlw	low (STR_1| (0+32768))
  4771  0945  3490               	retlw	high (STR_1| (0+32768))
  4772  0946  3430               	retlw	low (STR_2| (0+32768))
  4773  0947  3490               	retlw	high (STR_2| (0+32768))
  4774  0948  3420               	retlw	low (STR_3| (0+32768))
  4775  0949  3490               	retlw	high (STR_3| (0+32768))
  4776  094A  3449               	retlw	low (STR_4| (0+32768))
  4777  094B  3490               	retlw	high (STR_4| (0+32768))
  4778                           
  4779                           	psect	stringtext1
  4780  1000                     __pstringtext1:	
  4781  1000                     _fsmStateTable:	
  4782  1000  34D4               	retlw	low _do_I2C_IDLE
  4783  1001  3408               	retlw	high _do_I2C_IDLE
  4784  1002  341C               	retlw	low _do_I2C_SEND_ADR_READ
  4785  1003  3409               	retlw	high _do_I2C_SEND_ADR_READ
  4786  1004  34F8               	retlw	low _do_I2C_SEND_ADR_WRITE
  4787  1005  3408               	retlw	high _do_I2C_SEND_ADR_WRITE
  4788  1006  3402               	retlw	low _do_I2C_TX
  4789  1007  340E               	retlw	high _do_I2C_TX
  4790  1008  34B7               	retlw	low _do_I2C_RX
  4791  1009  3407               	retlw	high _do_I2C_RX
  4792  100A  34D9               	retlw	low _do_I2C_RCEN
  4793  100B  3408               	retlw	high _do_I2C_RCEN
  4794  100C  347C               	retlw	low _do_I2C_TX_EMPTY
  4795  100D  340C               	retlw	high _do_I2C_TX_EMPTY
  4796  100E  34A7               	retlw	low _do_I2C_SEND_RESTART_READ
  4797  100F  3408               	retlw	high _do_I2C_SEND_RESTART_READ
  4798  1010  34AB               	retlw	low _do_I2C_SEND_RESTART_WRITE
  4799  1011  3408               	retlw	high _do_I2C_SEND_RESTART_WRITE
  4800  1012  34AF               	retlw	low _do_I2C_SEND_RESTART
  4801  1013  3408               	retlw	high _do_I2C_SEND_RESTART
  4802  1014  34B3               	retlw	low _do_I2C_SEND_STOP
  4803  1015  3408               	retlw	high _do_I2C_SEND_STOP
  4804  1016  34B7               	retlw	low _do_I2C_DO_ACK
  4805  1017  3408               	retlw	high _do_I2C_DO_ACK
  4806  1018  34BB               	retlw	low _do_I2C_DO_NACK_STOP
  4807  1019  3408               	retlw	high _do_I2C_DO_NACK_STOP
  4808  101A  34BF               	retlw	low _do_I2C_DO_NACK_RESTART
  4809  101B  3408               	retlw	high _do_I2C_DO_NACK_RESTART
  4810  101C  34F1               	retlw	low _do_I2C_RESET
  4811  101D  3408               	retlw	high _do_I2C_RESET
  4812  101E  3426               	retlw	low _do_I2C_DO_ADDRESS_NACK
  4813  101F  340C               	retlw	high _do_I2C_DO_ADDRESS_NACK
  4814  1020                     __end_of_fsmStateTable:	
  4815  001F                     _T2CONbits	set	31
  4816  001F                     _T2CON	set	31
  4817  001D                     _TMR2	set	29
  4818  001E                     _PR2	set	30
  4819  000E                     _PORTCbits	set	14
  4820  0011                     _PIR1bits	set	17
  4821  000B                     _INTCONbits	set	11
  4822  0010                     _PIR0bits	set	16
  4823  009D                     _ADCON0bits	set	157
  4824  009C                     _ADRESH	set	156
  4825  009B                     _ADRESL	set	155
  4826  009F                     _ADACT	set	159
  4827  009E                     _ADCON1	set	158
  4828  009D                     _ADCON0	set	157
  4829  008E                     _TRISC	set	142
  4830  008D                     _TRISB	set	141
  4831  008C                     _TRISA	set	140
  4832  0097                     _WDTCON	set	151
  4833  0091                     _PIE1bits	set	145
  4834  0090                     _PIE0bits	set	144
  4835  010E                     _LATCbits	set	270
  4836  010E                     _LATC	set	270
  4837  010D                     _LATB	set	269
  4838  010C                     _LATA	set	268
  4839  018C                     _ANSELA	set	396
  4840  018D                     _ANSELB	set	397
  4841  018E                     _ANSELC	set	398
  4842  021C                     _SSP2STATbits	set	540
  4843  0219                     _SSP2BUF	set	537
  4844  021D                     _SSP2CON1bits	set	541
  4845  021A                     _SSP2ADD	set	538
  4846  021D                     _SSP2CON1	set	541
  4847  021C                     _SSP2STAT	set	540
  4848  0214                     _SSP1STATbits	set	532
  4849  0213                     _SSP1MSK	set	531
  4850  0211                     _SSP1BUF	set	529
  4851  0216                     _SSP1CON2bits	set	534
  4852  0212                     _SSP1ADD	set	530
  4853  0216                     _SSP1CON2	set	534
  4854  0215                     _SSP1CON1	set	533
  4855  0214                     _SSP1STAT	set	532
  4856  0215                     _SSP1CON1bits	set	533
  4857  020E                     _WPUC	set	526
  4858  020C                     _WPUA	set	524
  4859  020D                     _WPUB	set	525
  4860  0293                     _CCP1CONbits	set	659
  4861  029F                     _CCPTMRSbits	set	671
  4862  0291                     _CCPR1L	set	657
  4863  0292                     _CCPR1H	set	658
  4864  0293                     _CCP1CON	set	659
  4865  028E                     _ODCONC	set	654
  4866  028D                     _ODCONB	set	653
  4867  028C                     _ODCONA	set	652
  4868  030E                     _SLRCONC	set	782
  4869  030D                     _SLRCONB	set	781
  4870  030C                     _SLRCONA	set	780
  4871  0916                     _PMD5	set	2326
  4872  0915                     _PMD4	set	2325
  4873  0914                     _PMD3	set	2324
  4874  0913                     _PMD2	set	2323
  4875  0912                     _PMD1	set	2322
  4876  0911                     _PMD0	set	2321
  4877  091E                     _OSCTUNE	set	2334
  4878  091F                     _OSCFRQ	set	2335
  4879  091D                     _OSCEN	set	2333
  4880  091B                     _OSCCON3	set	2331
  4881  0919                     _OSCCON1	set	2329
  4882  0E1D                     _SSP2CLKPPS	set	3613
  4883  0E21                     _SSP1DATPPS	set	3617
  4884  0E20                     _SSP1CLKPPS	set	3616
  4885  0E1E                     _SSP2DATPPS	set	3614
  4886  0EA6                     _RC6PPS	set	3750
  4887  0EA2                     _RC2PPS	set	3746
  4888  0E9D                     _RB5PPS	set	3741
  4889  0E9F                     _RB7PPS	set	3743
  4890  0E9E                     _RB6PPS	set	3742
  4891  1020                     STR_3:	
  4892  1020  3441               	retlw	65	;'A'
  4893  1021  346C               	retlw	108	;'l'
  4894  1022  3465               	retlw	101	;'e'
  4895  1023  3478               	retlw	120	;'x'
  4896  1024  3461               	retlw	97	;'a'
  4897  1025  346E               	retlw	110	;'n'
  4898  1026  3464               	retlw	100	;'d'
  4899  1027  3472               	retlw	114	;'r'
  4900  1028  3461               	retlw	97	;'a'
  4901  1029  3420               	retlw	32	;' '
  4902  102A  3446               	retlw	70	;'F'
  4903  102B  3479               	retlw	121	;'y'
  4904  102C  3466               	retlw	102	;'f'
  4905  102D  3466               	retlw	102	;'f'
  4906  102E  3465               	retlw	101	;'e'
  4907  102F  3400               	retlw	0
  4908                           
  4909                           	psect	stringtext2
  4910  1030                     __pstringtext2:	
  4911  1030                     STR_2:	
  4912  1030  344E               	retlw	78	;'N'
  4913  1031  346F               	retlw	111	;'o'
  4914  1032  3465               	retlw	101	;'e'
  4915  1033  346C               	retlw	108	;'l'
  4916  1034  346C               	retlw	108	;'l'
  4917  1035  3465               	retlw	101	;'e'
  4918  1036  3420               	retlw	32	;' '
  4919  1037  3443               	retlw	67	;'C'
  4920  1038  3472               	retlw	114	;'r'
  4921  1039  3461               	retlw	97	;'a'
  4922  103A  346E               	retlw	110	;'n'
  4923  103B  3465               	retlw	101	;'e'
  4924  103C  3400               	retlw	0
  4925                           
  4926                           	psect	stringtext3
  4927  103D                     __pstringtext3:	
  4928  103D                     STR_1:	
  4929  103D  344A               	retlw	74	;'J'
  4930  103E  3475               	retlw	117	;'u'
  4931  103F  3473               	retlw	115	;'s'
  4932  1040  3474               	retlw	116	;'t'
  4933  1041  3469               	retlw	105	;'i'
  4934  1042  346E               	retlw	110	;'n'
  4935  1043  3420               	retlw	32	;' '
  4936  1044  3443               	retlw	67	;'C'
  4937  1045  3468               	retlw	104	;'h'
  4938  1046  3461               	retlw	97	;'a'
  4939  1047  346E               	retlw	110	;'n'
  4940  1048  3400               	retlw	0
  4941                           
  4942                           	psect	stringtext4
  4943  1049                     __pstringtext4:	
  4944  1049                     STR_4:	
  4945  1049  344A               	retlw	74	;'J'
  4946  104A  3465               	retlw	101	;'e'
  4947  104B  3466               	retlw	102	;'f'
  4948  104C  3466               	retlw	102	;'f'
  4949  104D  3420               	retlw	32	;' '
  4950  104E  3447               	retlw	71	;'G'
  4951  104F  3465               	retlw	101	;'e'
  4952  1050  3469               	retlw	105	;'i'
  4953  1051  3473               	retlw	115	;'s'
  4954  1052  3473               	retlw	115	;'s'
  4955  1053  3400               	retlw	0
  4956                           
  4957                           	psect	stringtext5
  4958  0000                     __pstringtext5:	
  4959                           
  4960                           ; #config settings
  4961  0000                     
  4962                           	psect	cinit
  4963  002F                     start_initialization:	
  4964  002F                     __initialization:	
  4965                           
  4966                           ; Initialize objects allocated to COMMON
  4967  002F  3188  2069  3180   	fcall	__pidataCOMMON	;fetch initializer
  4968  0032  00FA               	movwf	__pdataCOMMON& (0+127)
  4969                           
  4970                           ; Initialize objects allocated to BANK0
  4971  0033  3188  2068  3180   	fcall	__pidataBANK0	;fetch initializer
  4972  0036  00EB               	movwf	__pdataBANK0& (0+127)
  4973                           
  4974                           ; Initialize objects allocated to BANK2
  4975  0037  3044               	movlw	low __pidataBANK2
  4976  0038  0084               	movwf	4
  4977  0039  3089               	movlw	(high __pidataBANK2)| (0+128)
  4978  003A  0085               	movwf	5
  4979  003B  3060               	movlw	low __pdataBANK2
  4980  003C  0086               	movwf	6
  4981  003D  3001               	movlw	high __pdataBANK2
  4982  003E  0087               	movwf	7
  4983  003F  3008               	movlw	8
  4984  0040  3188  20EB  3180   	fcall	init_ram
  4985                           
  4986                           ; Clear objects allocated to COMMON
  4987  0043  01F6               	clrf	__pbssCOMMON& (0+127)
  4988  0044  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  4989  0045  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  4990  0046  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  4991                           
  4992                           ; Clear objects allocated to BANK0
  4993  0047  305D               	movlw	low __pbssBANK0
  4994  0048  0084               	movwf	4
  4995  0049  3000               	movlw	high __pbssBANK0
  4996  004A  0085               	movwf	5
  4997  004B  300E               	movlw	14
  4998  004C  3188  20E5  3180   	fcall	clear_ram0
  4999                           
  5000                           ; Clear objects allocated to BANK1
  5001  004F  30E5               	movlw	low __pbssBANK1
  5002  0050  0084               	movwf	4
  5003  0051  3000               	movlw	high __pbssBANK1
  5004  0052  0085               	movwf	5
  5005  0053  300A               	movlw	10
  5006  0054  3188  20E5  3180   	fcall	clear_ram0
  5007                           
  5008                           ; Clear objects allocated to BANK2
  5009  0057  0022               	movlb	2	; select bank2
  5010  0058  01E8               	clrf	__pbssBANK2& (0+127)
  5011  0059  01E9               	clrf	(__pbssBANK2+1)& (0+127)
  5012                           
  5013                           ; Clear objects allocated to BANK3
  5014  005A  30A0               	movlw	low __pbssBANK3
  5015  005B  0084               	movwf	4
  5016  005C  3001               	movlw	high __pbssBANK3
  5017  005D  0085               	movwf	5
  5018  005E  301D               	movlw	29
  5019  005F  3188  20E5  3180   	fcall	clear_ram0
  5020                           
  5021                           ; Clear objects allocated to BANK4
  5022  0062  3020               	movlw	low __pbssBANK4
  5023  0063  0084               	movwf	4
  5024  0064  3002               	movlw	high __pbssBANK4
  5025  0065  0085               	movwf	5
  5026  0066  3044               	movlw	68
  5027  0067  3188  20E5         	fcall	clear_ram0
  5028  0069                     end_of_initialization:	
  5029                           ;End of C runtime variable initialization code
  5030                           
  5031  0069                     __end_of__initialization:	
  5032  0069  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  5033  006A  0020               	movlb	0
  5034  006B  318D  2D79         	ljmp	_main	;jump to C main() function
  5035                           
  5036                           	psect	bssCOMMON
  5037  0076                     __pbssCOMMON:	
  5038  0076                     _b_i2c_error_flag:	
  5039  0076                     	ds	1
  5040  0077                     _handleGestureFlag:	
  5041  0077                     	ds	1
  5042  0078                     _state:	
  5043  0078                     	ds	1
  5044  0079                     _button:	
  5045  0079                     	ds	1
  5046                           
  5047                           	psect	dataCOMMON
  5048  007A                     __pdataCOMMON:	
  5049  007A                     _val:	
  5050  007A                     	ds	1
  5051                           
  5052                           	psect	bssBANK0
  5053  005D                     __pbssBANK0:	
  5054  005D                     _name:	
  5055  005D                     	ds	2
  5056  005F                     _gesture_near_count_:	
  5057  005F                     	ds	2
  5058  0061                     _gesture_lr_count_:	
  5059  0061                     	ds	2
  5060  0063                     _gesture_ud_count_:	
  5061  0063                     	ds	2
  5062  0065                     _gesture_lr_delta_:	
  5063  0065                     	ds	2
  5064  0067                     _gesture_ud_delta_:	
  5065  0067                     	ds	2
  5066  0069                     _adcResult:	
  5067  0069                     	ds	1
  5068  006A                     _printed:	
  5069  006A                     	ds	1
  5070                           
  5071                           	psect	dataBANK0
  5072  006B                     __pdataBANK0:	
  5073  006B                     _start:	
  5074  006B                     	ds	1
  5075                           
  5076                           	psect	bssBANK1
  5077  00E5                     __pbssBANK1:	
  5078  00E5                     _adcResult2:	
  5079  00E5                     	ds	2
  5080  00E7                     _gesture_state_:	
  5081  00E7                     	ds	2
  5082  00E9                     _gesture_far_count_:	
  5083  00E9                     	ds	2
  5084  00EB                     _i2c1_driver_i2cISR:	
  5085  00EB                     	ds	2
  5086  00ED                     _i2c1_driver_busCollisionISR:	
  5087  00ED                     	ds	2
  5088                           
  5089                           	psect	bssBANK2
  5090  0168                     __pbssBANK2:	
  5091  0168                     _gesture_motion_:	
  5092  0168                     	ds	2
  5093                           
  5094                           	psect	dataBANK2
  5095  0160                     __pdataBANK2:	
  5096  0160                     _names:	
  5097  0160                     	ds	8
  5098                           
  5099                           	psect	bssBANK3
  5100  01A0                     __pbssBANK3:	
  5101  01A0                     _i2c_status:	
  5102  01A0                     	ds	29
  5103                           
  5104                           	psect	bssBANK4
  5105  0220                     __pbssBANK4:	
  5106  0220                     _gesture_data_:	
  5107  0220                     	ds	68
  5108                           
  5109                           	psect	inittext
  5110  08EB                     init_ram:	
  5111  08EB  00FE               	movwf	126
  5112  08EC                     initloop:	
  5113  08EC  0012               	moviw fsr0++
  5114  08ED  001E               	movwi fsr1++
  5115  08EE  0BFE               	decfsz	126,f
  5116  08EF  28EC               	goto	initloop
  5117  08F0  3400               	retlw	0
  5118                           
  5119                           	psect	clrtext
  5120  08E5                     clear_ram0:	
  5121                           ;	Called with FSR0 containing the base address, and
  5122                           ;	WREG with the size to clear
  5123                           
  5124  08E5  0064               	clrwdt	;clear the watchdog before getting into this loop
  5125  08E6                     clrloop0:	
  5126  08E6  0180               	clrf	0	;clear RAM location pointed to by FSR
  5127  08E7  3101               	addfsr 0,1
  5128  08E8  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  5129  08E9  28E6               	goto	clrloop0	;have we reached the end yet?
  5130  08EA  3400               	retlw	0	;all done for this memory range, return
  5131                           
  5132                           	psect	cstackBANK2
  5133  0120                     __pcstackBANK2:	
  5134  0120                     readGesture@fifo_data:	
  5135                           
  5136                           ; 64 bytes @ 0x0
  5137  0120                     	ds	64
  5138                           
  5139                           	psect	cstackBANK1
  5140  00A0                     __pcstackBANK1:	
  5141  00A0                     readGesture@fifo_data2:	
  5142                           
  5143                           ; 64 bytes @ 0x0
  5144  00A0                     	ds	68
  5145  00E4                     main@startSystem:	
  5146                           
  5147                           ; 1 bytes @ 0x44
  5148  00E4                     	ds	1
  5149                           
  5150                           	psect	cstackCOMMON
  5151  0070                     __pcstackCOMMON:	
  5152  0070                     ?_i2c1_driver_open:	
  5153  0070                     ?_i2c1_driver_isNACK:	
  5154                           ; 1 bit 
  5155                           
  5156  0070                     ?_i2c1_driver_isBufferFull:	
  5157                           ; 1 bit 
  5158                           
  5159  0070                     ?_returnStop:	
  5160                           ; 1 bit 
  5161                           
  5162  0070                     ?_returnReset:	
  5163                           ; 1 bytes @ 0x0
  5164                           
  5165  0070                     ?_mssp1_clearIRQ:	
  5166                           ; 1 bytes @ 0x0
  5167                           
  5168  0070                     ??_mssp1_clearIRQ:	
  5169                           ; 1 bytes @ 0x0
  5170                           
  5171  0070                     ?_i2c_busCollisionISR:	
  5172                           ; 1 bytes @ 0x0
  5173                           
  5174  0070                     ??_i2c_busCollisionISR:	
  5175                           ; 1 bytes @ 0x0
  5176                           
  5177  0070                     ?_i2c_ISR:	
  5178                           ; 1 bytes @ 0x0
  5179                           
  5180  0070                     ?_i2c1_driver_start:	
  5181                           ; 1 bytes @ 0x0
  5182                           
  5183  0070                     ?_i2c1_driver_resetBus:	
  5184                           ; 1 bytes @ 0x0
  5185                           
  5186  0070                     ??_i2c1_driver_resetBus:	
  5187                           ; 1 bytes @ 0x0
  5188                           
  5189  0070                     ?_i2c1_driver_restart:	
  5190                           ; 1 bytes @ 0x0
  5191                           
  5192  0070                     ?_i2c1_driver_stop:	
  5193                           ; 1 bytes @ 0x0
  5194                           
  5195  0070                     ?_i2c1_driver_TXData:	
  5196                           ; 1 bytes @ 0x0
  5197                           
  5198  0070                     ?_i2c1_driver_startRX:	
  5199                           ; 1 bytes @ 0x0
  5200                           
  5201  0070                     ?_i2c1_driver_sendACK:	
  5202                           ; 1 bytes @ 0x0
  5203                           
  5204  0070                     ??_i2c1_driver_sendACK:	
  5205                           ; 1 bytes @ 0x0
  5206                           
  5207  0070                     ?_i2c1_driver_sendNACK:	
  5208                           ; 1 bytes @ 0x0
  5209                           
  5210  0070                     ??_i2c1_driver_isNACK:	
  5211                           ; 1 bytes @ 0x0
  5212                           
  5213  0070                     ?_i2c1_driver_getRXData:	
  5214                           ; 1 bytes @ 0x0
  5215                           
  5216  0070                     ?_mssp1_setIRQ:	
  5217                           ; 1 bytes @ 0x0
  5218                           
  5219  0070                     ??_mssp1_setIRQ:	
  5220                           ; 1 bytes @ 0x0
  5221                           
  5222  0070                     ?_i2c1_driver_clearBusCollision:	
  5223                           ; 1 bytes @ 0x0
  5224                           
  5225  0070                     ??_i2c1_driver_clearBusCollision:	
  5226                           ; 1 bytes @ 0x0
  5227                           
  5228  0070                     ?_PIN_MANAGER_IOC:	
  5229                           ; 1 bytes @ 0x0
  5230                           
  5231  0070                     ??_PIN_MANAGER_IOC:	
  5232                           ; 1 bytes @ 0x0
  5233                           
  5234  0070                     ?_PMD_Initialize:	
  5235                           ; 1 bytes @ 0x0
  5236                           
  5237  0070                     ?_PIN_MANAGER_Initialize:	
  5238                           ; 1 bytes @ 0x0
  5239                           
  5240  0070                     ?_OSCILLATOR_Initialize:	
  5241                           ; 1 bytes @ 0x0
  5242                           
  5243  0070                     ?_WDT_Initialize:	
  5244                           ; 1 bytes @ 0x0
  5245                           
  5246  0070                     ?_SPI2_Initialize:	
  5247                           ; 1 bytes @ 0x0
  5248                           
  5249  0070                     ?_PWM1_Initialize:	
  5250                           ; 1 bytes @ 0x0
  5251                           
  5252  0070                     ?_ADC_Initialize:	
  5253                           ; 1 bytes @ 0x0
  5254                           
  5255  0070                     ?_TMR2_Initialize:	
  5256                           ; 1 bytes @ 0x0
  5257                           
  5258  0070                     ?_Display_Clear:	
  5259                           ; 1 bytes @ 0x0
  5260                           
  5261  0070                     ?_PIR_Sensor:	
  5262                           ; 1 bytes @ 0x0
  5263                           
  5264  0070                     ?_initialize:	
  5265                           ; 1 bytes @ 0x0
  5266                           
  5267  0070                     ?_enableGestureSensor:	
  5268                           ; 1 bytes @ 0x0
  5269                           
  5270  0070                     ?_Get_ADC:	
  5271                           ; 1 bytes @ 0x0
  5272                           
  5273  0070                     ?_isGestureAvailable:	
  5274                           ; 1 bytes @ 0x0
  5275                           
  5276  0070                     ?_handleGesture:	
  5277                           ; 1 bytes @ 0x0
  5278                           
  5279  0070                     ?_PWM_Output_Enable:	
  5280                           ; 1 bytes @ 0x0
  5281                           
  5282  0070                     ?_PWM_Output_Disable:	
  5283                           ; 1 bytes @ 0x0
  5284                           
  5285  0070                     ?_wireReadDataByte:	
  5286                           ; 1 bytes @ 0x0
  5287                           
  5288  0070                     ?_setLEDDrive:	
  5289                           ; 1 bytes @ 0x0
  5290                           
  5291  0070                     ?_setProximityGain:	
  5292                           ; 1 bytes @ 0x0
  5293                           
  5294  0070                     ?_setAmbientLightGain:	
  5295                           ; 1 bytes @ 0x0
  5296                           
  5297  0070                     ?_setProxIntLowThresh:	
  5298                           ; 1 bytes @ 0x0
  5299                           
  5300  0070                     ?_setProxIntHighThresh:	
  5301                           ; 1 bytes @ 0x0
  5302                           
  5303  0070                     ?_setGestureEnterThresh:	
  5304                           ; 1 bytes @ 0x0
  5305                           
  5306  0070                     ?_setGestureExitThresh:	
  5307                           ; 1 bytes @ 0x0
  5308                           
  5309  0070                     ?_setGestureGain:	
  5310                           ; 1 bytes @ 0x0
  5311                           
  5312  0070                     ?_setGestureLEDDrive:	
  5313                           ; 1 bytes @ 0x0
  5314                           
  5315  0070                     ?_setGestureWaitTime:	
  5316                           ; 1 bytes @ 0x0
  5317                           
  5318  0070                     ?_setGestureIntEnable:	
  5319                           ; 1 bytes @ 0x0
  5320                           
  5321  0070                     ?_getMode:	
  5322                           ; 1 bytes @ 0x0
  5323                           
  5324  0070                     ?_resetGestureParameters:	
  5325                           ; 1 bytes @ 0x0
  5326                           
  5327  0070                     ?_setLEDBoost:	
  5328                           ; 1 bytes @ 0x0
  5329                           
  5330  0070                     ?_setGestureMode:	
  5331                           ; 1 bytes @ 0x0
  5332                           
  5333  0070                     ?_enablePower:	
  5334                           ; 1 bytes @ 0x0
  5335                           
  5336  0070                     ?_processGestureData:	
  5337                           ; 1 bytes @ 0x0
  5338                           
  5339  0070                     ?_decodeGesture:	
  5340                           ; 1 bytes @ 0x0
  5341                           
  5342  0070                     ?_I2C_Start:	
  5343                           ; 1 bytes @ 0x0
  5344                           
  5345  0070                     ?_I2C_Write_Byte:	
  5346                           ; 1 bytes @ 0x0
  5347                           
  5348  0070                     ?_I2C_ReStart:	
  5349                           ; 1 bytes @ 0x0
  5350                           
  5351  0070                     ?_I2C_Read_Byte:	
  5352                           ; 1 bytes @ 0x0
  5353                           
  5354  0070                     ?_I2C_Send_NACK:	
  5355                           ; 1 bytes @ 0x0
  5356                           
  5357  0070                     ?_I2C_Stop:	
  5358                           ; 1 bytes @ 0x0
  5359                           
  5360  0070                     ?_do_I2C_RESET:	
  5361                           ; 1 bytes @ 0x0
  5362                           
  5363  0070                     ??_do_I2C_RESET:	
  5364                           ; 1 bytes @ 0x0
  5365                           
  5366  0070                     ?_do_I2C_IDLE:	
  5367                           ; 1 bytes @ 0x0
  5368                           
  5369  0070                     ??_do_I2C_IDLE:	
  5370                           ; 1 bytes @ 0x0
  5371                           
  5372  0070                     ?_do_I2C_SEND_RESTART_READ:	
  5373                           ; 1 bytes @ 0x0
  5374                           
  5375  0070                     ??_do_I2C_SEND_RESTART_READ:	
  5376                           ; 1 bytes @ 0x0
  5377                           
  5378  0070                     ?_do_I2C_SEND_RESTART_WRITE:	
  5379                           ; 1 bytes @ 0x0
  5380                           
  5381  0070                     ??_do_I2C_SEND_RESTART_WRITE:	
  5382                           ; 1 bytes @ 0x0
  5383                           
  5384  0070                     ?_do_I2C_SEND_RESTART:	
  5385                           ; 1 bytes @ 0x0
  5386                           
  5387  0070                     ??_do_I2C_SEND_RESTART:	
  5388                           ; 1 bytes @ 0x0
  5389                           
  5390  0070                     ?_do_I2C_SEND_STOP:	
  5391                           ; 1 bytes @ 0x0
  5392                           
  5393  0070                     ??_do_I2C_SEND_STOP:	
  5394                           ; 1 bytes @ 0x0
  5395                           
  5396  0070                     ?_do_I2C_SEND_ADR_READ:	
  5397                           ; 1 bytes @ 0x0
  5398                           
  5399  0070                     ??_do_I2C_SEND_ADR_READ:	
  5400                           ; 1 bytes @ 0x0
  5401                           
  5402  0070                     ?_do_I2C_SEND_ADR_WRITE:	
  5403                           ; 1 bytes @ 0x0
  5404                           
  5405  0070                     ??_do_I2C_SEND_ADR_WRITE:	
  5406                           ; 1 bytes @ 0x0
  5407                           
  5408  0070                     ?_do_I2C_RCEN:	
  5409                           ; 1 bytes @ 0x0
  5410                           
  5411  0070                     ??_do_I2C_RCEN:	
  5412                           ; 1 bytes @ 0x0
  5413                           
  5414  0070                     ?_do_I2C_DO_ACK:	
  5415                           ; 1 bytes @ 0x0
  5416                           
  5417  0070                     ??_do_I2C_DO_ACK:	
  5418                           ; 1 bytes @ 0x0
  5419                           
  5420  0070                     ?_do_I2C_DO_NACK_STOP:	
  5421                           ; 1 bytes @ 0x0
  5422                           
  5423  0070                     ??_do_I2C_DO_NACK_STOP:	
  5424                           ; 1 bytes @ 0x0
  5425                           
  5426  0070                     ?_do_I2C_DO_NACK_RESTART:	
  5427                           ; 1 bytes @ 0x0
  5428                           
  5429  0070                     ??_do_I2C_DO_NACK_RESTART:	
  5430                           ; 1 bytes @ 0x0
  5431                           
  5432  0070                     ?_do_I2C_DO_ADDRESS_NACK:	
  5433                           ; 1 bytes @ 0x0
  5434                           
  5435  0070                     ??_do_I2C_DO_ADDRESS_NACK:	
  5436                           ; 1 bytes @ 0x0
  5437                           
  5438  0070                     ?_do_I2C_TX:	
  5439                           ; 1 bytes @ 0x0
  5440                           
  5441  0070                     ??_do_I2C_TX:	
  5442                           ; 1 bytes @ 0x0
  5443                           
  5444  0070                     ?_do_I2C_RX:	
  5445                           ; 1 bytes @ 0x0
  5446                           
  5447  0070                     ??_do_I2C_RX:	
  5448                           ; 1 bytes @ 0x0
  5449                           
  5450  0070                     ?_do_I2C_TX_EMPTY:	
  5451                           ; 1 bytes @ 0x0
  5452                           
  5453  0070                     ??_do_I2C_TX_EMPTY:	
  5454                           ; 1 bytes @ 0x0
  5455                           
  5456  0070                     ?_INTERRUPT_InterruptManager:	
  5457                           ; 1 bytes @ 0x0
  5458                           
  5459  0070                     ?_SYSTEM_Initialize:	
  5460                           ; 1 bytes @ 0x0
  5461                           
  5462  0070                     ?_SPI2_Exchange8bit:	
  5463                           ; 1 bytes @ 0x0
  5464                           
  5465  0070                     ?_main:	
  5466                           ; 1 bytes @ 0x0
  5467                           
  5468  0070                     ?_SPI_Write:	
  5469                           ; 1 bytes @ 0x0
  5470                           
  5471  0070                     ?i1_i2c1_driver_restart:	
  5472                           ; 1 bytes @ 0x0
  5473                           
  5474  0070                     ??i1_i2c1_driver_restart:	
  5475                           ; 1 bytes @ 0x0
  5476                           
  5477  0070                     ?i1_i2c1_driver_stop:	
  5478                           ; 1 bytes @ 0x0
  5479                           
  5480  0070                     ??i1_i2c1_driver_stop:	
  5481                           ; 1 bytes @ 0x0
  5482                           
  5483  0070                     ?i1_i2c1_driver_startRX:	
  5484                           ; 1 bytes @ 0x0
  5485                           
  5486  0070                     ??i1_i2c1_driver_startRX:	
  5487                           ; 1 bytes @ 0x0
  5488                           
  5489  0070                     ?i1_i2c1_driver_getRXData:	
  5490                           ; 1 bytes @ 0x0
  5491                           
  5492  0070                     ??i1_i2c1_driver_getRXData:	
  5493                           ; 1 bytes @ 0x0
  5494                           
  5495  0070                     ?i1_i2c1_driver_TXData:	
  5496                           ; 1 bytes @ 0x0
  5497                           
  5498  0070                     ??i1_i2c1_driver_TXData:	
  5499                           ; 1 bytes @ 0x0
  5500                           
  5501  0070                     ?i1_i2c1_driver_sendNACK:	
  5502                           ; 1 bytes @ 0x0
  5503                           
  5504  0070                     ??i1_i2c1_driver_sendNACK:	
  5505                           ; 1 bytes @ 0x0
  5506                           
  5507  0070                     returnStop@p:	
  5508                           ; 1 bytes @ 0x0
  5509                           
  5510  0070                     returnReset@p:	
  5511                           ; 1 bytes @ 0x0
  5512                           
  5513  0070                     i1i2c1_driver_TXData@d:	
  5514                           ; 1 bytes @ 0x0
  5515                           
  5516                           
  5517                           ; 1 bytes @ 0x0
  5518  0070                     	ds	1
  5519  0071                     ??_returnStop:	
  5520  0071                     ??_returnReset:	
  5521                           ; 1 bytes @ 0x1
  5522                           
  5523                           
  5524                           ; 1 bytes @ 0x1
  5525  0071                     	ds	2
  5526  0073                     ??_i2c_ISR:	
  5527                           
  5528                           ; 1 bytes @ 0x3
  5529  0073                     	ds	3
  5530  0076                     ??_INTERRUPT_InterruptManager:	
  5531                           
  5532                           	psect	cstackBANK0
  5533  0020                     __pcstackBANK0:	
  5534                           ; 1 bytes @ 0x6
  5535                           
  5536  0020                     ??_i2c1_driver_open:	
  5537  0020                     ??_i2c1_driver_start:	
  5538                           ; 1 bytes @ 0x0
  5539                           
  5540  0020                     ??_i2c1_driver_restart:	
  5541                           ; 1 bytes @ 0x0
  5542                           
  5543  0020                     ??_i2c1_driver_stop:	
  5544                           ; 1 bytes @ 0x0
  5545                           
  5546  0020                     ??_i2c1_driver_TXData:	
  5547                           ; 1 bytes @ 0x0
  5548                           
  5549  0020                     ??_i2c1_driver_startRX:	
  5550                           ; 1 bytes @ 0x0
  5551                           
  5552  0020                     ??_i2c1_driver_sendNACK:	
  5553                           ; 1 bytes @ 0x0
  5554                           
  5555  0020                     ??_i2c1_driver_getRXData:	
  5556                           ; 1 bytes @ 0x0
  5557                           
  5558  0020                     ??_PMD_Initialize:	
  5559                           ; 1 bytes @ 0x0
  5560                           
  5561  0020                     ??_PIN_MANAGER_Initialize:	
  5562                           ; 1 bytes @ 0x0
  5563                           
  5564  0020                     ??_OSCILLATOR_Initialize:	
  5565                           ; 1 bytes @ 0x0
  5566                           
  5567  0020                     ??_WDT_Initialize:	
  5568                           ; 1 bytes @ 0x0
  5569                           
  5570  0020                     ??_SPI2_Initialize:	
  5571                           ; 1 bytes @ 0x0
  5572                           
  5573  0020                     ??_PWM1_Initialize:	
  5574                           ; 1 bytes @ 0x0
  5575                           
  5576  0020                     ??_ADC_Initialize:	
  5577                           ; 1 bytes @ 0x0
  5578                           
  5579  0020                     ??_TMR2_Initialize:	
  5580                           ; 1 bytes @ 0x0
  5581                           
  5582  0020                     ??_PIR_Sensor:	
  5583                           ; 1 bytes @ 0x0
  5584                           
  5585  0020                     ??_PWM_Output_Enable:	
  5586                           ; 1 bytes @ 0x0
  5587                           
  5588  0020                     ??_PWM_Output_Disable:	
  5589                           ; 1 bytes @ 0x0
  5590                           
  5591  0020                     ??_resetGestureParameters:	
  5592                           ; 1 bytes @ 0x0
  5593                           
  5594  0020                     ??_decodeGesture:	
  5595                           ; 1 bytes @ 0x0
  5596                           
  5597  0020                     ??_I2C_Start:	
  5598                           ; 1 bytes @ 0x0
  5599                           
  5600  0020                     ??_I2C_ReStart:	
  5601                           ; 1 bytes @ 0x0
  5602                           
  5603  0020                     ??_I2C_Send_NACK:	
  5604                           ; 1 bytes @ 0x0
  5605                           
  5606  0020                     ??_I2C_Stop:	
  5607                           ; 1 bytes @ 0x0
  5608                           
  5609  0020                     ??_SYSTEM_Initialize:	
  5610                           ; 1 bytes @ 0x0
  5611                           
  5612  0020                     ??_i2c1_driver_isBufferFull:	
  5613                           ; 1 bytes @ 0x0
  5614                           
  5615  0020                     ??_SPI2_Exchange8bit:	
  5616                           ; 1 bytes @ 0x0
  5617                           
  5618  0020                     ?_strlen:	
  5619                           ; 1 bytes @ 0x0
  5620                           
  5621  0020                     ?_ADC_GetConversion:	
  5622                           ; 2 bytes @ 0x0
  5623                           
  5624  0020                     ?___wmul:	
  5625                           ; 2 bytes @ 0x0
  5626                           
  5627  0020                     i2c1_driver_TXData@d:	
  5628                           ; 2 bytes @ 0x0
  5629                           
  5630  0020                     SPI2_Exchange8bit@data:	
  5631                           ; 1 bytes @ 0x0
  5632                           
  5633  0020                     ___wmul@multiplier:	
  5634                           ; 1 bytes @ 0x0
  5635                           
  5636  0020                     strlen@s:	
  5637                           ; 2 bytes @ 0x0
  5638                           
  5639                           
  5640                           ; 2 bytes @ 0x0
  5641  0020                     	ds	1
  5642  0021                     ??_I2C_Write_Byte:	
  5643  0021                     ??_I2C_Read_Byte:	
  5644                           ; 1 bytes @ 0x1
  5645                           
  5646  0021                     ??_SPI_Write:	
  5647                           ; 1 bytes @ 0x1
  5648                           
  5649                           
  5650                           ; 1 bytes @ 0x1
  5651  0021                     	ds	1
  5652  0022                     ??_strlen:	
  5653  0022                     ??_ADC_GetConversion:	
  5654                           ; 1 bytes @ 0x2
  5655                           
  5656  0022                     SPI_Write@incoming:	
  5657                           ; 1 bytes @ 0x2
  5658                           
  5659  0022                     _decodeGesture$1347:	
  5660                           ; 1 bytes @ 0x2
  5661                           
  5662  0022                     ___wmul@multiplicand:	
  5663                           ; 2 bytes @ 0x2
  5664                           
  5665                           
  5666                           ; 2 bytes @ 0x2
  5667  0022                     	ds	1
  5668  0023                     ??_Display_Clear:	
  5669  0023                     I2C_Write_Byte@Byte:	
  5670                           ; 1 bytes @ 0x3
  5671                           
  5672  0023                     ADC_GetConversion@channel:	
  5673                           ; 1 bytes @ 0x3
  5674                           
  5675  0023                     strlen@a:	
  5676                           ; 1 bytes @ 0x3
  5677                           
  5678                           
  5679                           ; 2 bytes @ 0x3
  5680  0023                     	ds	1
  5681  0024                     ??___wmul:	
  5682  0024                     _decodeGesture$1348:	
  5683                           ; 1 bytes @ 0x4
  5684                           
  5685  0024                     I2C_Write_Byte@count:	
  5686                           ; 2 bytes @ 0x4
  5687                           
  5688  0024                     ___wmul@product:	
  5689                           ; 2 bytes @ 0x4
  5690                           
  5691                           
  5692                           ; 2 bytes @ 0x4
  5693  0024                     	ds	1
  5694  0025                     ?_Display_Name:	
  5695  0025                     Display_Name@string1:	
  5696                           ; 1 bytes @ 0x5
  5697                           
  5698                           
  5699                           ; 2 bytes @ 0x5
  5700  0025                     	ds	1
  5701  0026                     ??_wireReadDataByte:	
  5702  0026                     ?_wireWriteDataByte:	
  5703                           ; 1 bytes @ 0x6
  5704                           
  5705  0026                     ?_wireReadDataBlock:	
  5706                           ; 2 bytes @ 0x6
  5707                           
  5708  0026                     ?___awdiv:	
  5709                           ; 2 bytes @ 0x6
  5710                           
  5711  0026                     wireWriteDataByte@val:	
  5712                           ; 2 bytes @ 0x6
  5713                           
  5714  0026                     _decodeGesture$1349:	
  5715                           ; 1 bytes @ 0x6
  5716                           
  5717  0026                     wireReadDataBlock@val:	
  5718                           ; 2 bytes @ 0x6
  5719                           
  5720  0026                     ___awdiv@divisor:	
  5721                           ; 2 bytes @ 0x6
  5722                           
  5723                           
  5724                           ; 2 bytes @ 0x6
  5725  0026                     	ds	1
  5726  0027                     ??_Display_Name:	
  5727  0027                     wireReadDataByte@reg:	
  5728                           ; 1 bytes @ 0x7
  5729                           
  5730                           
  5731                           ; 1 bytes @ 0x7
  5732  0027                     	ds	1
  5733  0028                     wireReadDataByte@val:	
  5734  0028                     Display_Name@length:	
  5735                           ; 1 bytes @ 0x8
  5736                           
  5737  0028                     _decodeGesture$1350:	
  5738                           ; 2 bytes @ 0x8
  5739                           
  5740  0028                     wireReadDataBlock@len:	
  5741                           ; 2 bytes @ 0x8
  5742                           
  5743  0028                     ___awdiv@dividend:	
  5744                           ; 2 bytes @ 0x8
  5745                           
  5746                           
  5747                           ; 2 bytes @ 0x8
  5748  0028                     	ds	1
  5749  0029                     ??_isGestureAvailable:	
  5750  0029                     ??_wireWriteDataByte:	
  5751                           ; 1 bytes @ 0x9
  5752                           
  5753  0029                     ??_getMode:	
  5754                           ; 1 bytes @ 0x9
  5755                           
  5756  0029                     wireWriteDataByte@reg:	
  5757                           ; 1 bytes @ 0x9
  5758                           
  5759                           
  5760                           ; 1 bytes @ 0x9
  5761  0029                     	ds	1
  5762  002A                     ??_setLEDDrive:	
  5763  002A                     ??_setProximityGain:	
  5764                           ; 1 bytes @ 0xA
  5765                           
  5766  002A                     ??_setAmbientLightGain:	
  5767                           ; 1 bytes @ 0xA
  5768                           
  5769  002A                     ??_setProxIntLowThresh:	
  5770                           ; 1 bytes @ 0xA
  5771                           
  5772  002A                     ??_setProxIntHighThresh:	
  5773                           ; 1 bytes @ 0xA
  5774                           
  5775  002A                     ?_setLightIntLowThreshold:	
  5776                           ; 1 bytes @ 0xA
  5777                           
  5778  002A                     ?_setLightIntHighThreshold:	
  5779                           ; 1 bytes @ 0xA
  5780                           
  5781  002A                     ??_setGestureEnterThresh:	
  5782                           ; 1 bytes @ 0xA
  5783                           
  5784  002A                     ??_setGestureExitThresh:	
  5785                           ; 1 bytes @ 0xA
  5786                           
  5787  002A                     ??_setGestureGain:	
  5788                           ; 1 bytes @ 0xA
  5789                           
  5790  002A                     ??_setGestureLEDDrive:	
  5791                           ; 1 bytes @ 0xA
  5792                           
  5793  002A                     ??_setGestureWaitTime:	
  5794                           ; 1 bytes @ 0xA
  5795                           
  5796  002A                     ??_setGestureIntEnable:	
  5797                           ; 1 bytes @ 0xA
  5798                           
  5799  002A                     ??_setLEDBoost:	
  5800                           ; 1 bytes @ 0xA
  5801                           
  5802  002A                     ??_setGestureMode:	
  5803                           ; 1 bytes @ 0xA
  5804                           
  5805  002A                     ??_wireReadDataBlock:	
  5806                           ; 1 bytes @ 0xA
  5807                           
  5808  002A                     ??___awdiv:	
  5809                           ; 1 bytes @ 0xA
  5810                           
  5811  002A                     getMode@enable_value:	
  5812                           ; 1 bytes @ 0xA
  5813                           
  5814  002A                     isGestureAvailable@val:	
  5815                           ; 1 bytes @ 0xA
  5816                           
  5817  002A                     Display_Name@i:	
  5818                           ; 1 bytes @ 0xA
  5819                           
  5820  002A                     setLightIntLowThreshold@threshold:	
  5821                           ; 2 bytes @ 0xA
  5822                           
  5823  002A                     setLightIntHighThreshold@threshold:	
  5824                           ; 2 bytes @ 0xA
  5825                           
  5826  002A                     _decodeGesture$1351:	
  5827                           ; 2 bytes @ 0xA
  5828                           
  5829                           
  5830                           ; 2 bytes @ 0xA
  5831  002A                     	ds	1
  5832  002B                     ?_setMode:	
  5833  002B                     setMode@enable:	
  5834                           ; 1 bytes @ 0xB
  5835                           
  5836  002B                     setAmbientLightGain@drive:	
  5837                           ; 1 bytes @ 0xB
  5838                           
  5839  002B                     setProxIntLowThresh@threshold:	
  5840                           ; 1 bytes @ 0xB
  5841                           
  5842  002B                     setProxIntHighThresh@threshold:	
  5843                           ; 1 bytes @ 0xB
  5844                           
  5845  002B                     setGestureEnterThresh@threshold:	
  5846                           ; 1 bytes @ 0xB
  5847                           
  5848  002B                     setGestureExitThresh@threshold:	
  5849                           ; 1 bytes @ 0xB
  5850                           
  5851  002B                     setGestureWaitTime@time:	
  5852                           ; 1 bytes @ 0xB
  5853                           
  5854  002B                     setGestureIntEnable@val:	
  5855                           ; 1 bytes @ 0xB
  5856                           
  5857  002B                     setGestureMode@mode:	
  5858                           ; 1 bytes @ 0xB
  5859                           
  5860  002B                     ___awdiv@counter:	
  5861                           ; 1 bytes @ 0xB
  5862                           
  5863                           
  5864                           ; 1 bytes @ 0xB
  5865  002B                     	ds	1
  5866  002C                     ??_Get_ADC:	
  5867  002C                     ??_setMode:	
  5868                           ; 1 bytes @ 0xC
  5869                           
  5870  002C                     ??_setLightIntLowThreshold:	
  5871                           ; 1 bytes @ 0xC
  5872                           
  5873  002C                     ??_setLightIntHighThreshold:	
  5874                           ; 1 bytes @ 0xC
  5875                           
  5876  002C                     setLEDDrive@val:	
  5877                           ; 1 bytes @ 0xC
  5878                           
  5879  002C                     setProximityGain@val:	
  5880                           ; 1 bytes @ 0xC
  5881                           
  5882  002C                     setAmbientLightGain@val:	
  5883                           ; 1 bytes @ 0xC
  5884                           
  5885  002C                     setGestureGain@val:	
  5886                           ; 1 bytes @ 0xC
  5887                           
  5888  002C                     setGestureLEDDrive@val:	
  5889                           ; 1 bytes @ 0xC
  5890                           
  5891  002C                     setGestureWaitTime@val:	
  5892                           ; 1 bytes @ 0xC
  5893                           
  5894  002C                     setGestureIntEnable@enable:	
  5895                           ; 1 bytes @ 0xC
  5896                           
  5897  002C                     setLEDBoost@val:	
  5898                           ; 1 bytes @ 0xC
  5899                           
  5900  002C                     setGestureMode@val:	
  5901                           ; 1 bytes @ 0xC
  5902                           
  5903  002C                     ___awdiv@sign:	
  5904                           ; 1 bytes @ 0xC
  5905                           
  5906  002C                     _decodeGesture$1352:	
  5907                           ; 1 bytes @ 0xC
  5908                           
  5909                           
  5910                           ; 2 bytes @ 0xC
  5911  002C                     	ds	1
  5912  002D                     setLEDDrive@drive:	
  5913  002D                     setProximityGain@drive:	
  5914                           ; 1 bytes @ 0xD
  5915                           
  5916  002D                     setLightIntLowThreshold@val_low:	
  5917                           ; 1 bytes @ 0xD
  5918                           
  5919  002D                     setLightIntHighThreshold@val_low:	
  5920                           ; 1 bytes @ 0xD
  5921                           
  5922  002D                     setGestureGain@gain:	
  5923                           ; 1 bytes @ 0xD
  5924                           
  5925  002D                     setGestureLEDDrive@drive:	
  5926                           ; 1 bytes @ 0xD
  5927                           
  5928  002D                     setLEDBoost@boost:	
  5929                           ; 1 bytes @ 0xD
  5930                           
  5931  002D                     ___awdiv@quotient:	
  5932                           ; 1 bytes @ 0xD
  5933                           
  5934                           
  5935                           ; 2 bytes @ 0xD
  5936  002D                     	ds	1
  5937  002E                     setMode@reg_val:	
  5938  002E                     setLightIntLowThreshold@val_high:	
  5939                           ; 1 bytes @ 0xE
  5940                           
  5941  002E                     setLightIntHighThreshold@val_high:	
  5942                           ; 1 bytes @ 0xE
  5943                           
  5944  002E                     _decodeGesture$1353:	
  5945                           ; 1 bytes @ 0xE
  5946                           
  5947                           
  5948                           ; 2 bytes @ 0xE
  5949  002E                     	ds	1
  5950  002F                     ??_processGestureData:	
  5951  002F                     setMode@mode:	
  5952                           ; 1 bytes @ 0xF
  5953                           
  5954  002F                     wireReadDataBlock@reg:	
  5955                           ; 1 bytes @ 0xF
  5956                           
  5957  002F                     Get_ADC@val:	
  5958                           ; 1 bytes @ 0xF
  5959                           
  5960                           
  5961                           ; 2 bytes @ 0xF
  5962  002F                     	ds	1
  5963  0030                     ??_initialize:	
  5964  0030                     ??_enableGestureSensor:	
  5965                           ; 1 bytes @ 0x10
  5966                           
  5967  0030                     ??_enablePower:	
  5968                           ; 1 bytes @ 0x10
  5969                           
  5970  0030                     wireReadDataBlock@j:	
  5971                           ; 1 bytes @ 0x10
  5972                           
  5973  0030                     _decodeGesture$1354:	
  5974                           ; 1 bytes @ 0x10
  5975                           
  5976                           
  5977                           ; 2 bytes @ 0x10
  5978  0030                     	ds	1
  5979  0031                     initialize@id:	
  5980  0031                     enableGestureSensor@interrupts:	
  5981                           ; 1 bytes @ 0x11
  5982                           
  5983  0031                     processGestureData@ud_ratio_first:	
  5984                           ; 1 bytes @ 0x11
  5985                           
  5986                           
  5987                           ; 2 bytes @ 0x11
  5988  0031                     	ds	2
  5989  0033                     processGestureData@lr_ratio_first:	
  5990                           
  5991                           ; 2 bytes @ 0x13
  5992  0033                     	ds	2
  5993  0035                     processGestureData@ud_ratio_last:	
  5994                           
  5995                           ; 2 bytes @ 0x15
  5996  0035                     	ds	2
  5997  0037                     processGestureData@lr_ratio_last:	
  5998                           
  5999                           ; 2 bytes @ 0x17
  6000  0037                     	ds	2
  6001  0039                     _processGestureData$1342:	
  6002                           
  6003                           ; 2 bytes @ 0x19
  6004  0039                     	ds	2
  6005  003B                     _processGestureData$1343:	
  6006                           
  6007                           ; 2 bytes @ 0x1B
  6008  003B                     	ds	2
  6009  003D                     _processGestureData$1344:	
  6010                           
  6011                           ; 2 bytes @ 0x1D
  6012  003D                     	ds	2
  6013  003F                     _processGestureData$1345:	
  6014                           
  6015                           ; 2 bytes @ 0x1F
  6016  003F                     	ds	2
  6017  0041                     processGestureData@u_last:	
  6018                           
  6019                           ; 1 bytes @ 0x21
  6020  0041                     	ds	1
  6021  0042                     processGestureData@d_last:	
  6022                           
  6023                           ; 1 bytes @ 0x22
  6024  0042                     	ds	1
  6025  0043                     processGestureData@l_last:	
  6026                           
  6027                           ; 1 bytes @ 0x23
  6028  0043                     	ds	1
  6029  0044                     processGestureData@r_last:	
  6030                           
  6031                           ; 1 bytes @ 0x24
  6032  0044                     	ds	1
  6033  0045                     processGestureData@u_first:	
  6034                           
  6035                           ; 1 bytes @ 0x25
  6036  0045                     	ds	1
  6037  0046                     processGestureData@d_first:	
  6038                           
  6039                           ; 1 bytes @ 0x26
  6040  0046                     	ds	1
  6041  0047                     processGestureData@l_first:	
  6042                           
  6043                           ; 1 bytes @ 0x27
  6044  0047                     	ds	1
  6045  0048                     processGestureData@r_first:	
  6046                           
  6047                           ; 1 bytes @ 0x28
  6048  0048                     	ds	1
  6049  0049                     processGestureData@ud_delta:	
  6050                           
  6051                           ; 2 bytes @ 0x29
  6052  0049                     	ds	2
  6053  004B                     processGestureData@lr_delta:	
  6054                           
  6055                           ; 2 bytes @ 0x2B
  6056  004B                     	ds	2
  6057  004D                     processGestureData@i:	
  6058                           
  6059                           ; 2 bytes @ 0x2D
  6060  004D                     	ds	2
  6061  004F                     ?_readGesture:	
  6062                           
  6063                           ; 2 bytes @ 0x2F
  6064  004F                     	ds	2
  6065  0051                     ??_readGesture:	
  6066                           
  6067                           ; 1 bytes @ 0x31
  6068  0051                     	ds	2
  6069  0053                     readGesture@motion:	
  6070                           
  6071                           ; 2 bytes @ 0x33
  6072  0053                     	ds	2
  6073  0055                     readGesture@gstatus:	
  6074                           
  6075                           ; 1 bytes @ 0x35
  6076  0055                     	ds	1
  6077  0056                     readGesture@bytes_read:	
  6078                           
  6079                           ; 2 bytes @ 0x36
  6080  0056                     	ds	2
  6081  0058                     readGesture@fifo_level:	
  6082                           
  6083                           ; 1 bytes @ 0x38
  6084  0058                     	ds	1
  6085  0059                     readGesture@i:	
  6086                           
  6087                           ; 2 bytes @ 0x39
  6088  0059                     	ds	2
  6089  005B                     ??_handleGesture:	
  6090                           
  6091                           ; 1 bytes @ 0x3B
  6092  005B                     	ds	1
  6093  005C                     ??_main:	
  6094                           
  6095                           ; 1 bytes @ 0x3C
  6096  005C                     	ds	1
  6097                           
  6098                           	psect	maintext
  6099  0D79                     __pmaintext:	
  6100 ;;
  6101 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  6102 ;;
  6103 ;; *************** function _main *****************
  6104 ;; Defined at:
  6105 ;;		line 110 in file "main.c"
  6106 ;; Parameters:    Size  Location     Type
  6107 ;;		None
  6108 ;; Auto vars:     Size  Location     Type
  6109 ;;  temp            2    0        int 
  6110 ;;  count           2    0        unsigned int 
  6111 ;;  startSystem     1   68[BANK1 ] _Bool 
  6112 ;; Return value:  Size  Location     Type
  6113 ;;                  1    wreg      void 
  6114 ;; Registers used:
  6115 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6116 ;; Tracked objects:
  6117 ;;		On entry : B1F/0
  6118 ;;		On exit  : 0/0
  6119 ;;		Unchanged: 0/0
  6120 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6121 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6122 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  6123 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6124 ;;      Totals:         0       1       5       0       0       0       0       0       0       0       0       0       
      +0       0
  6125 ;;Total ram usage:        6 bytes
  6126 ;; Hardware stack levels required when called:   12
  6127 ;; This function calls:
  6128 ;;		_Display_Clear
  6129 ;;		_Display_Name
  6130 ;;		_Get_ADC
  6131 ;;		_PIR_Sensor
  6132 ;;		_SYSTEM_Initialize
  6133 ;;		_enableGestureSensor
  6134 ;;		_handleGesture
  6135 ;;		_initialize
  6136 ;;		_isGestureAvailable
  6137 ;; This function is called by:
  6138 ;;		Startup code after reset
  6139 ;; This function uses a non-reentrant model
  6140 ;;
  6141                           
  6142                           
  6143                           ;psect for function _main
  6144  0D79                     _main:	
  6145                           
  6146                           ;main.c: 113:     SYSTEM_Initialize();
  6147                           
  6148                           ;incstack = 0
  6149                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6150  0D79  318A  2247  318D   	fcall	_SYSTEM_Initialize
  6151                           
  6152                           ;main.c: 119:     (INTCONbits.GIE = 1);
  6153  0D7C  178B               	bsf	11,7	;volatile
  6154                           
  6155                           ;main.c: 122:     (INTCONbits.PEIE = 1);
  6156  0D7D  170B               	bsf	11,6	;volatile
  6157                           
  6158                           ;main.c: 125:     Display_Clear();
  6159  0D7E  3189  2193  318D   	fcall	_Display_Clear
  6160                           
  6161                           ;main.c: 127:     if(PIR_Sensor()) {
  6162  0D81  3188  20FF  318D   	fcall	_PIR_Sensor
  6163  0D84  3A00               	xorlw	0
  6164  0D85  1903               	skipnz
  6165  0D86  2D8E               	goto	l7130
  6166                           
  6167                           ;main.c: 128:         if(initialize()){
  6168  0D87  3184  24CE  318D   	fcall	_initialize
  6169                           
  6170                           ;main.c: 131:         if(enableGestureSensor(0)){
  6171  0D8A  3000               	movlw	0
  6172  0D8B  318F  279C  318D   	fcall	_enableGestureSensor
  6173  0D8E                     l7130:	
  6174                           
  6175                           ;main.c: 139:     {;main.c: 141:         startSystem = PIR_Sensor();
  6176  0D8E  3188  20FF  318D   	fcall	_PIR_Sensor
  6177  0D91  0020               	movlb	0	; select bank0
  6178  0D92  00DC               	movwf	??_main
  6179  0D93  085C               	movf	??_main,w
  6180  0D94  0021               	movlb	1	; select bank1
  6181  0D95  00E4               	movwf	main@startSystem^(0+128)
  6182                           
  6183                           ;main.c: 142:         if(startSystem) {
  6184  0D96  0864               	movf	main@startSystem^(0+128),w
  6185  0D97  1903               	btfsc	3,2
  6186  0D98  2D8E               	goto	l7130
  6187                           
  6188                           ;main.c: 144:             if(start == 1) {
  6189  0D99  0020               	movlb	0	; select bank0
  6190  0D9A  036B               	decf	_start,w
  6191  0D9B  1D03               	btfss	3,2
  6192  0D9C  2DAB               	goto	l7142
  6193                           
  6194                           ;main.c: 145:                 Display_Name(names[name]);
  6195  0D9D  355D               	lslf	_name,w
  6196  0D9E  3E60               	addlw	(low (_names| (0+256)))& (0+255)
  6197  0D9F  0086               	movwf	6
  6198  0DA0  3001               	movlw	1	; select bank2/3
  6199  0DA1  0087               	movwf	7
  6200  0DA2  3F40               	moviw [0]fsr1
  6201  0DA3  00A5               	movwf	Display_Name@string1
  6202  0DA4  3F41               	moviw [1]fsr1
  6203  0DA5  00A6               	movwf	Display_Name@string1+1
  6204  0DA6  318E  26A0  318D   	fcall	_Display_Name
  6205                           
  6206                           ;main.c: 146:                 start = 0;
  6207  0DA9  0020               	movlb	0	; select bank0
  6208  0DAA  01EB               	clrf	_start
  6209  0DAB                     l7142:	
  6210                           
  6211                           ;main.c: 148:             Get_ADC();
  6212  0DAB  3186  26D7  318D   	fcall	_Get_ADC
  6213                           
  6214                           ;main.c: 150:             if( isGestureAvailable()){
  6215  0DAE  3189  21A4  318D   	fcall	_isGestureAvailable
  6216  0DB1  3A00               	xorlw	0
  6217  0DB2  1903               	skipnz
  6218  0DB3  2D8E               	goto	l7130
  6219                           
  6220                           ;main.c: 151:                 handleGesture();
  6221  0DB4  318F  2742  318D   	fcall	_handleGesture
  6222  0DB7  2D8E               	goto	l7130
  6223  0DB8                     __end_of_main:	
  6224                           
  6225                           	psect	text1
  6226  04CE                     __ptext1:	
  6227 ;; *************** function _initialize *****************
  6228 ;; Defined at:
  6229 ;;		line 20 in file "APDS9960.c"
  6230 ;; Parameters:    Size  Location     Type
  6231 ;;		None
  6232 ;; Auto vars:     Size  Location     Type
  6233 ;;  id              1   17[BANK0 ] unsigned char 
  6234 ;; Return value:  Size  Location     Type
  6235 ;;                  1    wreg      _Bool 
  6236 ;; Registers used:
  6237 ;;		wreg, status,2, status,0, pclath, cstack
  6238 ;; Tracked objects:
  6239 ;;		On entry : 0/0
  6240 ;;		On exit  : 0/0
  6241 ;;		Unchanged: 0/0
  6242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6243 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6244 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6245 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6246 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6247 ;;Total ram usage:        2 bytes
  6248 ;; Hardware stack levels used:    1
  6249 ;; Hardware stack levels required when called:   10
  6250 ;; This function calls:
  6251 ;;		_i2c1_driver_open
  6252 ;;		_setAmbientLightGain
  6253 ;;		_setGestureEnterThresh
  6254 ;;		_setGestureExitThresh
  6255 ;;		_setGestureGain
  6256 ;;		_setGestureIntEnable
  6257 ;;		_setGestureLEDDrive
  6258 ;;		_setGestureWaitTime
  6259 ;;		_setLEDDrive
  6260 ;;		_setLightIntHighThreshold
  6261 ;;		_setLightIntLowThreshold
  6262 ;;		_setMode
  6263 ;;		_setProxIntHighThresh
  6264 ;;		_setProxIntLowThresh
  6265 ;;		_setProximityGain
  6266 ;;		_wireReadDataByte
  6267 ;;		_wireWriteDataByte
  6268 ;; This function is called by:
  6269 ;;		_main
  6270 ;; This function uses a non-reentrant model
  6271 ;;
  6272                           
  6273                           
  6274                           ;psect for function _initialize
  6275  04CE                     _initialize:	
  6276                           
  6277                           ;APDS9960.c: 25:     i2c1_driver_open();
  6278                           
  6279                           ;incstack = 0
  6280                           ; Regs used in _initialize: [wreg+status,2+status,0+pclath+cstack]
  6281  04CE  3189  2155  3184   	fcall	_i2c1_driver_open
  6282                           
  6283                           ;APDS9960.c: 31:     id = wireReadDataByte(0x92);
  6284  04D1  3092               	movlw	146
  6285  04D2  318A  22EE  3184   	fcall	_wireReadDataByte
  6286  04D5  0020               	movlb	0	; select bank0
  6287  04D6  00B0               	movwf	??_initialize
  6288  04D7  0830               	movf	??_initialize,w
  6289  04D8  00B1               	movwf	initialize@id
  6290                           
  6291                           ;APDS9960.c: 33:     if( !(id == 0xAB ||id == 0x9C ) )
  6292  04D9  30AB               	movlw	171
  6293  04DA  0631               	xorwf	initialize@id,w
  6294  04DB  1903               	btfsc	3,2
  6295  04DC  2CE3               	goto	l6762
  6296  04DD  309C               	movlw	156
  6297  04DE  0631               	xorwf	initialize@id,w
  6298  04DF  1903               	btfsc	3,2
  6299  04E0  2CE3               	goto	l6762
  6300  04E1                     l6758:	
  6301                           
  6302                           ;APDS9960.c: 34:     {;APDS9960.c: 35:      return 0;
  6303  04E1  3000               	movlw	0
  6304  04E2  0008               	return
  6305  04E3                     l6762:	
  6306                           
  6307                           ;APDS9960.c: 39:     setMode(7, 0);
  6308  04E3  01AB               	clrf	setMode@enable
  6309  04E4  3007               	movlw	7
  6310  04E5  318E  2651  3184   	fcall	_setMode
  6311                           
  6312                           ;APDS9960.c: 41:     wireWriteDataByte(0x81, 219);
  6313  04E8  30DB               	movlw	219
  6314  04E9  0020               	movlb	0	; select bank0
  6315  04EA  00B0               	movwf	??_initialize
  6316  04EB  0830               	movf	??_initialize,w
  6317  04EC  00A6               	movwf	wireWriteDataByte@val
  6318  04ED  3081               	movlw	129
  6319  04EE  318A  225F  3184   	fcall	_wireWriteDataByte
  6320                           
  6321                           ;APDS9960.c: 42:     wireWriteDataByte(0x83, 246);
  6322  04F1  30F6               	movlw	246
  6323  04F2  0020               	movlb	0	; select bank0
  6324  04F3  00B0               	movwf	??_initialize
  6325  04F4  0830               	movf	??_initialize,w
  6326  04F5  00A6               	movwf	wireWriteDataByte@val
  6327  04F6  3083               	movlw	131
  6328  04F7  318A  225F  3184   	fcall	_wireWriteDataByte
  6329                           
  6330                           ;APDS9960.c: 43:     wireWriteDataByte(0x8E, 0x87);
  6331  04FA  3087               	movlw	135
  6332  04FB  0020               	movlb	0	; select bank0
  6333  04FC  00B0               	movwf	??_initialize
  6334  04FD  0830               	movf	??_initialize,w
  6335  04FE  00A6               	movwf	wireWriteDataByte@val
  6336  04FF  308E               	movlw	142
  6337  0500  318A  225F  3184   	fcall	_wireWriteDataByte
  6338                           
  6339                           ;APDS9960.c: 44:     wireWriteDataByte(0x9D, 0) ;
  6340  0503  0020               	movlb	0	; select bank0
  6341  0504  01A6               	clrf	wireWriteDataByte@val
  6342  0505  309D               	movlw	157
  6343  0506  318A  225F  3184   	fcall	_wireWriteDataByte
  6344                           
  6345                           ;APDS9960.c: 45:     wireWriteDataByte(0x9E, 0) ;
  6346  0509  0020               	movlb	0	; select bank0
  6347  050A  01A6               	clrf	wireWriteDataByte@val
  6348  050B  309E               	movlw	158
  6349  050C  318A  225F  3184   	fcall	_wireWriteDataByte
  6350                           
  6351                           ;APDS9960.c: 46:     wireWriteDataByte(0x8D, 0x60) ;
  6352  050F  3060               	movlw	96
  6353  0510  0020               	movlb	0	; select bank0
  6354  0511  00B0               	movwf	??_initialize
  6355  0512  0830               	movf	??_initialize,w
  6356  0513  00A6               	movwf	wireWriteDataByte@val
  6357  0514  308D               	movlw	141
  6358  0515  318A  225F  3184   	fcall	_wireWriteDataByte
  6359                           
  6360                           ;APDS9960.c: 47:     setLEDDrive(0);
  6361  0518  3000               	movlw	0
  6362  0519  318B  23D4  3184   	fcall	_setLEDDrive
  6363                           
  6364                           ;APDS9960.c: 48:     setProximityGain(2);
  6365  051C  3002               	movlw	2
  6366  051D  318B  23FD  3184   	fcall	_setProximityGain
  6367                           
  6368                           ;APDS9960.c: 49:     setAmbientLightGain(1);
  6369  0520  3001               	movlw	1
  6370  0521  318A  22D0  3184   	fcall	_setAmbientLightGain
  6371                           
  6372                           ;APDS9960.c: 51:     if( !setProxIntLowThresh(0) ) {
  6373  0524  3000               	movlw	0
  6374  0525  3189  21F0  3184   	fcall	_setProxIntLowThresh
  6375  0528  3A00               	xorlw	0
  6376  0529  1903               	btfsc	3,2
  6377  052A  2CE1               	goto	l6758
  6378                           
  6379                           ;APDS9960.c: 54:     if( !setProxIntHighThresh(50) ) {
  6380  052B  3032               	movlw	50
  6381  052C  3189  21DD  3184   	fcall	_setProxIntHighThresh
  6382  052F  3A00               	xorlw	0
  6383  0530  1903               	btfsc	3,2
  6384  0531  2CE1               	goto	l6758
  6385                           
  6386                           ;APDS9960.c: 59:     if( !setLightIntLowThreshold(0xFFFF) ) {
  6387  0532  30FF               	movlw	255
  6388  0533  0020               	movlb	0	; select bank0
  6389  0534  00AA               	movwf	setLightIntLowThreshold@threshold
  6390  0535  30FF               	movlw	255
  6391  0536  00AB               	movwf	setLightIntLowThreshold@threshold+1
  6392  0537  318B  23AD  3184   	fcall	_setLightIntLowThreshold
  6393  053A  3A00               	xorlw	0
  6394  053B  1903               	btfsc	3,2
  6395  053C  2CE1               	goto	l6758
  6396                           
  6397                           ;APDS9960.c: 62:     if( !setLightIntHighThreshold(0) ) {
  6398  053D  3000               	movlw	0
  6399  053E  0020               	movlb	0	; select bank0
  6400  053F  00AA               	movwf	setLightIntHighThreshold@threshold
  6401  0540  00AB               	movwf	setLightIntHighThreshold@threshold+1
  6402  0541  318B  2386  3184   	fcall	_setLightIntHighThreshold
  6403  0544  3A00               	xorlw	0
  6404  0545  1903               	btfsc	3,2
  6405  0546  2CE1               	goto	l6758
  6406                           
  6407                           ;APDS9960.c: 66:     if( !wireWriteDataByte(0x8C, 0x11) ) {
  6408  0547  3011               	movlw	17
  6409  0548  0020               	movlb	0	; select bank0
  6410  0549  00B0               	movwf	??_initialize
  6411  054A  0830               	movf	??_initialize,w
  6412  054B  00A6               	movwf	wireWriteDataByte@val
  6413  054C  308C               	movlw	140
  6414  054D  318A  225F  3184   	fcall	_wireWriteDataByte
  6415  0550  0020               	movlb	0	; select bank0
  6416  0551  0826               	movf	?_wireWriteDataByte,w
  6417  0552  0427               	iorwf	?_wireWriteDataByte+1,w
  6418  0553  1903               	btfsc	3,2
  6419  0554  2CE1               	goto	l6758
  6420                           
  6421                           ;APDS9960.c: 71:     if( !wireWriteDataByte(0x90, 0x01) ) {
  6422  0555  01A6               	clrf	wireWriteDataByte@val
  6423  0556  0AA6               	incf	wireWriteDataByte@val,f
  6424  0557  3090               	movlw	144
  6425  0558  318A  225F  3184   	fcall	_wireWriteDataByte
  6426  055B  0020               	movlb	0	; select bank0
  6427  055C  0826               	movf	?_wireWriteDataByte,w
  6428  055D  0427               	iorwf	?_wireWriteDataByte+1,w
  6429  055E  1903               	btfsc	3,2
  6430  055F  2CE1               	goto	l6758
  6431                           
  6432                           ;APDS9960.c: 74:     if( !wireWriteDataByte(0x9F, 0) ) {
  6433  0560  01A6               	clrf	wireWriteDataByte@val
  6434  0561  309F               	movlw	159
  6435  0562  318A  225F  3184   	fcall	_wireWriteDataByte
  6436  0565  0020               	movlb	0	; select bank0
  6437  0566  0826               	movf	?_wireWriteDataByte,w
  6438  0567  0427               	iorwf	?_wireWriteDataByte+1,w
  6439  0568  1903               	btfsc	3,2
  6440  0569  2CE1               	goto	l6758
  6441                           
  6442                           ;APDS9960.c: 78:     if( !setGestureEnterThresh(40) ) {
  6443  056A  3028               	movlw	40
  6444  056B  3189  21B7  3184   	fcall	_setGestureEnterThresh
  6445  056E  3A00               	xorlw	0
  6446  056F  1903               	btfsc	3,2
  6447  0570  2CE1               	goto	l6758
  6448                           
  6449                           ;APDS9960.c: 82:     if( !setGestureExitThresh(30) ) {
  6450  0571  301E               	movlw	30
  6451  0572  3189  21CA  3184   	fcall	_setGestureExitThresh
  6452  0575  3A00               	xorlw	0
  6453  0576  1903               	btfsc	3,2
  6454  0577  2CE1               	goto	l6758
  6455                           
  6456                           ;APDS9960.c: 85:     if( !wireWriteDataByte(0xA2, 0x40) ) {
  6457  0578  3040               	movlw	64
  6458  0579  0020               	movlb	0	; select bank0
  6459  057A  00B0               	movwf	??_initialize
  6460  057B  0830               	movf	??_initialize,w
  6461  057C  00A6               	movwf	wireWriteDataByte@val
  6462  057D  30A2               	movlw	162
  6463  057E  318A  225F  3184   	fcall	_wireWriteDataByte
  6464  0581  0020               	movlb	0	; select bank0
  6465  0582  0826               	movf	?_wireWriteDataByte,w
  6466  0583  0427               	iorwf	?_wireWriteDataByte+1,w
  6467  0584  1903               	btfsc	3,2
  6468  0585  2CE1               	goto	l6758
  6469                           
  6470                           ;APDS9960.c: 88:     if( !setGestureGain(2) ) {
  6471  0586  3002               	movlw	2
  6472  0587  318C  24DF  3184   	fcall	_setGestureGain
  6473  058A  3A00               	xorlw	0
  6474  058B  1903               	btfsc	3,2
  6475  058C  2CE1               	goto	l6758
  6476                           
  6477                           ;APDS9960.c: 91:     if( !setGestureLEDDrive(0) ) {
  6478  058D  3000               	movlw	0
  6479  058E  318D  2511  3184   	fcall	_setGestureLEDDrive
  6480  0591  3A00               	xorlw	0
  6481  0592  1903               	btfsc	3,2
  6482  0593  2CE1               	goto	l6758
  6483                           
  6484                           ;APDS9960.c: 95:     if( !setGestureWaitTime(1) ) {
  6485  0594  3001               	movlw	1
  6486  0595  318B  235F  3184   	fcall	_setGestureWaitTime
  6487  0598  3A00               	xorlw	0
  6488  0599  1903               	btfsc	3,2
  6489  059A  2CE1               	goto	l6758
  6490                           
  6491                           ;APDS9960.c: 98:     if( !wireWriteDataByte(0xA4, 0) ) {
  6492  059B  0020               	movlb	0	; select bank0
  6493  059C  01A6               	clrf	wireWriteDataByte@val
  6494  059D  30A4               	movlw	164
  6495  059E  318A  225F  3184   	fcall	_wireWriteDataByte
  6496  05A1  0020               	movlb	0	; select bank0
  6497  05A2  0826               	movf	?_wireWriteDataByte,w
  6498  05A3  0427               	iorwf	?_wireWriteDataByte+1,w
  6499  05A4  1903               	btfsc	3,2
  6500  05A5  2CE1               	goto	l6758
  6501                           
  6502                           ;APDS9960.c: 101:     if( !wireWriteDataByte(0xA5, 0) ) {
  6503  05A6  01A6               	clrf	wireWriteDataByte@val
  6504  05A7  30A5               	movlw	165
  6505  05A8  318A  225F  3184   	fcall	_wireWriteDataByte
  6506  05AB  0020               	movlb	0	; select bank0
  6507  05AC  0826               	movf	?_wireWriteDataByte,w
  6508  05AD  0427               	iorwf	?_wireWriteDataByte+1,w
  6509  05AE  1903               	btfsc	3,2
  6510  05AF  2CE1               	goto	l6758
  6511                           
  6512                           ;APDS9960.c: 104:     if( !wireWriteDataByte(0xA7, 0) ) {
  6513  05B0  01A6               	clrf	wireWriteDataByte@val
  6514  05B1  30A7               	movlw	167
  6515  05B2  318A  225F  3184   	fcall	_wireWriteDataByte
  6516  05B5  0020               	movlb	0	; select bank0
  6517  05B6  0826               	movf	?_wireWriteDataByte,w
  6518  05B7  0427               	iorwf	?_wireWriteDataByte+1,w
  6519  05B8  1903               	btfsc	3,2
  6520  05B9  2CE1               	goto	l6758
  6521                           
  6522                           ;APDS9960.c: 107:     if( !wireWriteDataByte(0xA9, 0) ) {
  6523  05BA  01A6               	clrf	wireWriteDataByte@val
  6524  05BB  30A9               	movlw	169
  6525  05BC  318A  225F  3184   	fcall	_wireWriteDataByte
  6526  05BF  0020               	movlb	0	; select bank0
  6527  05C0  0826               	movf	?_wireWriteDataByte,w
  6528  05C1  0427               	iorwf	?_wireWriteDataByte+1,w
  6529  05C2  1903               	btfsc	3,2
  6530  05C3  2CE1               	goto	l6758
  6531                           
  6532                           ;APDS9960.c: 110:     if( !wireWriteDataByte(0xA6, 0xC9) ) {
  6533  05C4  30C9               	movlw	201
  6534  05C5  00B0               	movwf	??_initialize
  6535  05C6  0830               	movf	??_initialize,w
  6536  05C7  00A6               	movwf	wireWriteDataByte@val
  6537  05C8  30A6               	movlw	166
  6538  05C9  318A  225F  3184   	fcall	_wireWriteDataByte
  6539  05CC  0020               	movlb	0	; select bank0
  6540  05CD  0826               	movf	?_wireWriteDataByte,w
  6541  05CE  0427               	iorwf	?_wireWriteDataByte+1,w
  6542  05CF  1903               	btfsc	3,2
  6543  05D0  2CE1               	goto	l6758
  6544                           
  6545                           ;APDS9960.c: 113:     if( !wireWriteDataByte(0xAA, 0) ) {
  6546  05D1  01A6               	clrf	wireWriteDataByte@val
  6547  05D2  30AA               	movlw	170
  6548  05D3  318A  225F  3184   	fcall	_wireWriteDataByte
  6549  05D6  0020               	movlb	0	; select bank0
  6550  05D7  0826               	movf	?_wireWriteDataByte,w
  6551  05D8  0427               	iorwf	?_wireWriteDataByte+1,w
  6552  05D9  1903               	btfsc	3,2
  6553  05DA  2CE1               	goto	l6758
  6554                           
  6555                           ;APDS9960.c: 116:     if( !setGestureIntEnable(0) ) {
  6556  05DB  3000               	movlw	0
  6557  05DC  318C  2451  3184   	fcall	_setGestureIntEnable
  6558  05DF  3A00               	xorlw	0
  6559  05E0  1903               	btfsc	3,2
  6560  05E1  2CE1               	goto	l6758
  6561                           
  6562                           ;APDS9960.c: 120:     return 1;
  6563  05E2  3001               	movlw	1
  6564  05E3  0008               	return
  6565  05E4                     __end_of_initialize:	
  6566                           
  6567                           	psect	text2
  6568  0BFD                     __ptext2:	
  6569 ;; *************** function _setProximityGain *****************
  6570 ;; Defined at:
  6571 ;;		line 192 in file "APDS9960.c"
  6572 ;; Parameters:    Size  Location     Type
  6573 ;;  drive           1    wreg     unsigned char 
  6574 ;; Auto vars:     Size  Location     Type
  6575 ;;  drive           1   13[BANK0 ] unsigned char 
  6576 ;;  val             1   12[BANK0 ] unsigned char 
  6577 ;; Return value:  Size  Location     Type
  6578 ;;                  1    wreg      _Bool 
  6579 ;; Registers used:
  6580 ;;		wreg, status,2, status,0, pclath, cstack
  6581 ;; Tracked objects:
  6582 ;;		On entry : 0/0
  6583 ;;		On exit  : 0/0
  6584 ;;		Unchanged: 0/0
  6585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6586 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6587 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6588 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6589 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6590 ;;Total ram usage:        4 bytes
  6591 ;; Hardware stack levels used:    1
  6592 ;; Hardware stack levels required when called:    8
  6593 ;; This function calls:
  6594 ;;		_wireReadDataByte
  6595 ;;		_wireWriteDataByte
  6596 ;; This function is called by:
  6597 ;;		_initialize
  6598 ;; This function uses a non-reentrant model
  6599 ;;
  6600                           
  6601                           
  6602                           ;psect for function _setProximityGain
  6603  0BFD                     _setProximityGain:	
  6604                           
  6605                           ;incstack = 0
  6606                           ; Regs used in _setProximityGain: [wreg+status,2+status,0+pclath+cstack]
  6607                           ;setProximityGain@drive stored from wreg
  6608  0BFD  0020               	movlb	0	; select bank0
  6609  0BFE  00AD               	movwf	setProximityGain@drive
  6610                           
  6611                           ;APDS9960.c: 192: _Bool setProximityGain(uint8_t drive);APDS9960.c: 193: {;APDS9960.c: 1
      +                          94:     uint8_t val;;APDS9960.c: 197:     val=wireReadDataByte(0x8F);
  6612  0BFF  308F               	movlw	143
  6613  0C00  318A  22EE  318B   	fcall	_wireReadDataByte
  6614  0C03  0020               	movlb	0	; select bank0
  6615  0C04  00AA               	movwf	??_setProximityGain
  6616  0C05  082A               	movf	??_setProximityGain,w
  6617  0C06  00AC               	movwf	setProximityGain@val
  6618                           
  6619                           ;APDS9960.c: 199:     drive &= 0b00000011;
  6620  0C07  3003               	movlw	3
  6621  0C08  00AA               	movwf	??_setProximityGain
  6622  0C09  082A               	movf	??_setProximityGain,w
  6623  0C0A  05AD               	andwf	setProximityGain@drive,f
  6624                           
  6625                           ;APDS9960.c: 200:     drive = drive << 2;
  6626  0C0B  082D               	movf	setProximityGain@drive,w
  6627  0C0C  00AA               	movwf	??_setProximityGain
  6628  0C0D  3001               	movlw	1
  6629  0C0E                     u5635:	
  6630  0C0E  35AA               	lslf	??_setProximityGain,f
  6631  0C0F  3EFF               	addlw	-1
  6632  0C10  1D03               	skipz
  6633  0C11  2C0E               	goto	u5635
  6634  0C12  352A               	lslf	??_setProximityGain,w
  6635  0C13  00AB               	movwf	??_setProximityGain+1
  6636  0C14  082B               	movf	??_setProximityGain+1,w
  6637  0C15  00AD               	movwf	setProximityGain@drive
  6638                           
  6639                           ;APDS9960.c: 201:     val &= 0b11110011;
  6640  0C16  30F3               	movlw	243
  6641  0C17  00AA               	movwf	??_setProximityGain
  6642  0C18  082A               	movf	??_setProximityGain,w
  6643  0C19  05AC               	andwf	setProximityGain@val,f
  6644                           
  6645                           ;APDS9960.c: 202:     val |= drive;
  6646  0C1A  082D               	movf	setProximityGain@drive,w
  6647  0C1B  00AA               	movwf	??_setProximityGain
  6648  0C1C  082A               	movf	??_setProximityGain,w
  6649  0C1D  04AC               	iorwf	setProximityGain@val,f
  6650                           
  6651                           ;APDS9960.c: 205:     if( !wireWriteDataByte(0x8F, val) ) {
  6652  0C1E  082C               	movf	setProximityGain@val,w
  6653  0C1F  00AA               	movwf	??_setProximityGain
  6654  0C20  082A               	movf	??_setProximityGain,w
  6655  0C21  00A6               	movwf	wireWriteDataByte@val
  6656  0C22  308F               	movlw	143
  6657  0C23  318A  225F         	fcall	_wireWriteDataByte
  6658  0C25  0008               	return
  6659  0C26                     __end_of_setProximityGain:	
  6660                           
  6661                           	psect	text3
  6662  09F0                     __ptext3:	
  6663 ;; *************** function _setProxIntLowThresh *****************
  6664 ;; Defined at:
  6665 ;;		line 234 in file "APDS9960.c"
  6666 ;; Parameters:    Size  Location     Type
  6667 ;;  threshold       1    wreg     unsigned char 
  6668 ;; Auto vars:     Size  Location     Type
  6669 ;;  threshold       1   11[BANK0 ] unsigned char 
  6670 ;; Return value:  Size  Location     Type
  6671 ;;                  1    wreg      _Bool 
  6672 ;; Registers used:
  6673 ;;		wreg, status,2, status,0, pclath, cstack
  6674 ;; Tracked objects:
  6675 ;;		On entry : 0/0
  6676 ;;		On exit  : 0/0
  6677 ;;		Unchanged: 0/0
  6678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6679 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6680 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6681 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6682 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6683 ;;Total ram usage:        2 bytes
  6684 ;; Hardware stack levels used:    1
  6685 ;; Hardware stack levels required when called:    8
  6686 ;; This function calls:
  6687 ;;		_wireWriteDataByte
  6688 ;; This function is called by:
  6689 ;;		_initialize
  6690 ;; This function uses a non-reentrant model
  6691 ;;
  6692                           
  6693                           
  6694                           ;psect for function _setProxIntLowThresh
  6695  09F0                     _setProxIntLowThresh:	
  6696                           
  6697                           ;incstack = 0
  6698                           ; Regs used in _setProxIntLowThresh: [wreg+status,2+status,0+pclath+cstack]
  6699                           ;setProxIntLowThresh@threshold stored from wreg
  6700  09F0  0020               	movlb	0	; select bank0
  6701  09F1  00AB               	movwf	setProxIntLowThresh@threshold
  6702                           
  6703                           ;APDS9960.c: 234: _Bool setProxIntLowThresh(uint8_t threshold);APDS9960.c: 235: {;APDS99
      +                          60.c: 236:     if( !wireWriteDataByte(0x89, threshold) ) {
  6704  09F2  082B               	movf	setProxIntLowThresh@threshold,w
  6705  09F3  00AA               	movwf	??_setProxIntLowThresh
  6706  09F4  082A               	movf	??_setProxIntLowThresh,w
  6707  09F5  00A6               	movwf	wireWriteDataByte@val
  6708  09F6  3089               	movlw	137
  6709  09F7  318A  225F  3189   	fcall	_wireWriteDataByte
  6710  09FA  0020               	movlb	0	; select bank0
  6711  09FB  0826               	movf	?_wireWriteDataByte,w
  6712  09FC  0427               	iorwf	?_wireWriteDataByte+1,w
  6713  09FD  1D03               	btfss	3,2
  6714  09FE  2A01               	goto	l6502
  6715                           
  6716                           ;APDS9960.c: 237:         return 0;
  6717  09FF  3000               	movlw	0
  6718  0A00  0008               	return
  6719  0A01                     l6502:	
  6720                           
  6721                           ;APDS9960.c: 240:     return 1;
  6722  0A01  3001               	movlw	1
  6723  0A02  0008               	return
  6724  0A03                     __end_of_setProxIntLowThresh:	
  6725                           
  6726                           	psect	text4
  6727  09DD                     __ptext4:	
  6728 ;; *************** function _setProxIntHighThresh *****************
  6729 ;; Defined at:
  6730 ;;		line 244 in file "APDS9960.c"
  6731 ;; Parameters:    Size  Location     Type
  6732 ;;  threshold       1    wreg     unsigned char 
  6733 ;; Auto vars:     Size  Location     Type
  6734 ;;  threshold       1   11[BANK0 ] unsigned char 
  6735 ;; Return value:  Size  Location     Type
  6736 ;;                  1    wreg      _Bool 
  6737 ;; Registers used:
  6738 ;;		wreg, status,2, status,0, pclath, cstack
  6739 ;; Tracked objects:
  6740 ;;		On entry : 0/0
  6741 ;;		On exit  : 0/0
  6742 ;;		Unchanged: 0/0
  6743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6744 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6745 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6746 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6747 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6748 ;;Total ram usage:        2 bytes
  6749 ;; Hardware stack levels used:    1
  6750 ;; Hardware stack levels required when called:    8
  6751 ;; This function calls:
  6752 ;;		_wireWriteDataByte
  6753 ;; This function is called by:
  6754 ;;		_initialize
  6755 ;; This function uses a non-reentrant model
  6756 ;;
  6757                           
  6758                           
  6759                           ;psect for function _setProxIntHighThresh
  6760  09DD                     _setProxIntHighThresh:	
  6761                           
  6762                           ;incstack = 0
  6763                           ; Regs used in _setProxIntHighThresh: [wreg+status,2+status,0+pclath+cstack]
  6764                           ;setProxIntHighThresh@threshold stored from wreg
  6765  09DD  0020               	movlb	0	; select bank0
  6766  09DE  00AB               	movwf	setProxIntHighThresh@threshold
  6767                           
  6768                           ;APDS9960.c: 244: _Bool setProxIntHighThresh(uint8_t threshold);APDS9960.c: 245: {;APDS9
      +                          960.c: 246:     if( !wireWriteDataByte(0x8B, threshold) ) {
  6769  09DF  082B               	movf	setProxIntHighThresh@threshold,w
  6770  09E0  00AA               	movwf	??_setProxIntHighThresh
  6771  09E1  082A               	movf	??_setProxIntHighThresh,w
  6772  09E2  00A6               	movwf	wireWriteDataByte@val
  6773  09E3  308B               	movlw	139
  6774  09E4  318A  225F  3189   	fcall	_wireWriteDataByte
  6775  09E7  0020               	movlb	0	; select bank0
  6776  09E8  0826               	movf	?_wireWriteDataByte,w
  6777  09E9  0427               	iorwf	?_wireWriteDataByte+1,w
  6778  09EA  1D03               	btfss	3,2
  6779  09EB  29EE               	goto	l6512
  6780                           
  6781                           ;APDS9960.c: 247:         return 0;
  6782  09EC  3000               	movlw	0
  6783  09ED  0008               	return
  6784  09EE                     l6512:	
  6785                           
  6786                           ;APDS9960.c: 250:     return 1;
  6787  09EE  3001               	movlw	1
  6788  09EF  0008               	return
  6789  09F0                     __end_of_setProxIntHighThresh:	
  6790                           
  6791                           	psect	text5
  6792  0BAD                     __ptext5:	
  6793 ;; *************** function _setLightIntLowThreshold *****************
  6794 ;; Defined at:
  6795 ;;		line 254 in file "APDS9960.c"
  6796 ;; Parameters:    Size  Location     Type
  6797 ;;  threshold       2   10[BANK0 ] unsigned short 
  6798 ;; Auto vars:     Size  Location     Type
  6799 ;;  val_high        1   14[BANK0 ] unsigned char 
  6800 ;;  val_low         1   13[BANK0 ] unsigned char 
  6801 ;; Return value:  Size  Location     Type
  6802 ;;                  1    wreg      _Bool 
  6803 ;; Registers used:
  6804 ;;		wreg, status,2, status,0, pclath, cstack
  6805 ;; Tracked objects:
  6806 ;;		On entry : 0/0
  6807 ;;		On exit  : 0/0
  6808 ;;		Unchanged: 0/0
  6809 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6810 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6811 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6812 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6813 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6814 ;;Total ram usage:        5 bytes
  6815 ;; Hardware stack levels used:    1
  6816 ;; Hardware stack levels required when called:    8
  6817 ;; This function calls:
  6818 ;;		_wireWriteDataByte
  6819 ;; This function is called by:
  6820 ;;		_initialize
  6821 ;; This function uses a non-reentrant model
  6822 ;;
  6823                           
  6824                           
  6825                           ;psect for function _setLightIntLowThreshold
  6826  0BAD                     _setLightIntLowThreshold:	
  6827                           
  6828                           ;APDS9960.c: 254: _Bool setLightIntLowThreshold(uint16_t threshold);APDS9960.c: 255: {;A
      +                          PDS9960.c: 256:     uint8_t val_low;;APDS9960.c: 257:     uint8_t val_high;;APDS9960.c: 
      +                          260:     val_low = threshold & 0x00FF;
  6829                           
  6830                           ;incstack = 0
  6831                           ; Regs used in _setLightIntLowThreshold: [wreg+status,2+status,0+pclath+cstack]
  6832  0BAD  0020               	movlb	0	; select bank0
  6833  0BAE  082A               	movf	setLightIntLowThreshold@threshold,w
  6834  0BAF  00AC               	movwf	??_setLightIntLowThreshold
  6835  0BB0  082C               	movf	??_setLightIntLowThreshold,w
  6836  0BB1  00AD               	movwf	setLightIntLowThreshold@val_low
  6837                           
  6838                           ;APDS9960.c: 261:     val_high = (threshold & 0xFF00) >> 8;
  6839  0BB2  082B               	movf	setLightIntLowThreshold@threshold+1,w
  6840  0BB3  00AC               	movwf	??_setLightIntLowThreshold
  6841  0BB4  082C               	movf	??_setLightIntLowThreshold,w
  6842  0BB5  00AE               	movwf	setLightIntLowThreshold@val_high
  6843                           
  6844                           ;APDS9960.c: 264:     if( !wireWriteDataByte(0x84, val_low) ) {
  6845  0BB6  082D               	movf	setLightIntLowThreshold@val_low,w
  6846  0BB7  00AC               	movwf	??_setLightIntLowThreshold
  6847  0BB8  082C               	movf	??_setLightIntLowThreshold,w
  6848  0BB9  00A6               	movwf	wireWriteDataByte@val
  6849  0BBA  3084               	movlw	132
  6850  0BBB  318A  225F  318B   	fcall	_wireWriteDataByte
  6851  0BBE  0020               	movlb	0	; select bank0
  6852  0BBF  0826               	movf	?_wireWriteDataByte,w
  6853  0BC0  0427               	iorwf	?_wireWriteDataByte+1,w
  6854  0BC1  1D03               	btfss	3,2
  6855  0BC2  2BC5               	goto	l6526
  6856  0BC3                     l6522:	
  6857                           
  6858                           ;APDS9960.c: 265:         return 0;
  6859  0BC3  3000               	movlw	0
  6860  0BC4  0008               	return
  6861  0BC5                     l6526:	
  6862                           
  6863                           ;APDS9960.c: 269:     if( !wireWriteDataByte(0x85, val_high) ) {
  6864  0BC5  082E               	movf	setLightIntLowThreshold@val_high,w
  6865  0BC6  00AC               	movwf	??_setLightIntLowThreshold
  6866  0BC7  082C               	movf	??_setLightIntLowThreshold,w
  6867  0BC8  00A6               	movwf	wireWriteDataByte@val
  6868  0BC9  3085               	movlw	133
  6869  0BCA  318A  225F  318B   	fcall	_wireWriteDataByte
  6870  0BCD  0020               	movlb	0	; select bank0
  6871  0BCE  0826               	movf	?_wireWriteDataByte,w
  6872  0BCF  0427               	iorwf	?_wireWriteDataByte+1,w
  6873  0BD0  1903               	btfsc	3,2
  6874  0BD1  2BC3               	goto	l6522
  6875                           
  6876                           ;APDS9960.c: 273:     return 1;
  6877  0BD2  3001               	movlw	1
  6878  0BD3  0008               	return
  6879  0BD4                     __end_of_setLightIntLowThreshold:	
  6880                           
  6881                           	psect	text6
  6882  0B86                     __ptext6:	
  6883 ;; *************** function _setLightIntHighThreshold *****************
  6884 ;; Defined at:
  6885 ;;		line 277 in file "APDS9960.c"
  6886 ;; Parameters:    Size  Location     Type
  6887 ;;  threshold       2   10[BANK0 ] unsigned short 
  6888 ;; Auto vars:     Size  Location     Type
  6889 ;;  val_high        1   14[BANK0 ] unsigned char 
  6890 ;;  val_low         1   13[BANK0 ] unsigned char 
  6891 ;; Return value:  Size  Location     Type
  6892 ;;                  1    wreg      _Bool 
  6893 ;; Registers used:
  6894 ;;		wreg, status,2, status,0, pclath, cstack
  6895 ;; Tracked objects:
  6896 ;;		On entry : 0/0
  6897 ;;		On exit  : 0/0
  6898 ;;		Unchanged: 0/0
  6899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6900 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6901 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6902 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6903 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6904 ;;Total ram usage:        5 bytes
  6905 ;; Hardware stack levels used:    1
  6906 ;; Hardware stack levels required when called:    8
  6907 ;; This function calls:
  6908 ;;		_wireWriteDataByte
  6909 ;; This function is called by:
  6910 ;;		_initialize
  6911 ;; This function uses a non-reentrant model
  6912 ;;
  6913                           
  6914                           
  6915                           ;psect for function _setLightIntHighThreshold
  6916  0B86                     _setLightIntHighThreshold:	
  6917                           
  6918                           ;APDS9960.c: 277: _Bool setLightIntHighThreshold(uint16_t threshold);APDS9960.c: 278: {;
      +                          APDS9960.c: 279:     uint8_t val_low;;APDS9960.c: 280:     uint8_t val_high;;APDS9960.c:
      +                           283:     val_low = threshold & 0x00FF;
  6919                           
  6920                           ;incstack = 0
  6921                           ; Regs used in _setLightIntHighThreshold: [wreg+status,2+status,0+pclath+cstack]
  6922  0B86  0020               	movlb	0	; select bank0
  6923  0B87  082A               	movf	setLightIntHighThreshold@threshold,w
  6924  0B88  00AC               	movwf	??_setLightIntHighThreshold
  6925  0B89  082C               	movf	??_setLightIntHighThreshold,w
  6926  0B8A  00AD               	movwf	setLightIntHighThreshold@val_low
  6927                           
  6928                           ;APDS9960.c: 284:     val_high = (threshold & 0xFF00) >> 8;
  6929  0B8B  082B               	movf	setLightIntHighThreshold@threshold+1,w
  6930  0B8C  00AC               	movwf	??_setLightIntHighThreshold
  6931  0B8D  082C               	movf	??_setLightIntHighThreshold,w
  6932  0B8E  00AE               	movwf	setLightIntHighThreshold@val_high
  6933                           
  6934                           ;APDS9960.c: 287:     if( !wireWriteDataByte(0x86, val_low) ) {
  6935  0B8F  082D               	movf	setLightIntHighThreshold@val_low,w
  6936  0B90  00AC               	movwf	??_setLightIntHighThreshold
  6937  0B91  082C               	movf	??_setLightIntHighThreshold,w
  6938  0B92  00A6               	movwf	wireWriteDataByte@val
  6939  0B93  3086               	movlw	134
  6940  0B94  318A  225F  318B   	fcall	_wireWriteDataByte
  6941  0B97  0020               	movlb	0	; select bank0
  6942  0B98  0826               	movf	?_wireWriteDataByte,w
  6943  0B99  0427               	iorwf	?_wireWriteDataByte+1,w
  6944  0B9A  1D03               	btfss	3,2
  6945  0B9B  2B9E               	goto	l6546
  6946  0B9C                     l6542:	
  6947                           
  6948                           ;APDS9960.c: 288:         return 0;
  6949  0B9C  3000               	movlw	0
  6950  0B9D  0008               	return
  6951  0B9E                     l6546:	
  6952                           
  6953                           ;APDS9960.c: 292:     if( !wireWriteDataByte(0x87, val_high) ) {
  6954  0B9E  082E               	movf	setLightIntHighThreshold@val_high,w
  6955  0B9F  00AC               	movwf	??_setLightIntHighThreshold
  6956  0BA0  082C               	movf	??_setLightIntHighThreshold,w
  6957  0BA1  00A6               	movwf	wireWriteDataByte@val
  6958  0BA2  3087               	movlw	135
  6959  0BA3  318A  225F  318B   	fcall	_wireWriteDataByte
  6960  0BA6  0020               	movlb	0	; select bank0
  6961  0BA7  0826               	movf	?_wireWriteDataByte,w
  6962  0BA8  0427               	iorwf	?_wireWriteDataByte+1,w
  6963  0BA9  1903               	btfsc	3,2
  6964  0BAA  2B9C               	goto	l6542
  6965                           
  6966                           ;APDS9960.c: 296:     return 1;
  6967  0BAB  3001               	movlw	1
  6968  0BAC  0008               	return
  6969  0BAD                     __end_of_setLightIntHighThreshold:	
  6970                           
  6971                           	psect	text7
  6972  0BD4                     __ptext7:	
  6973 ;; *************** function _setLEDDrive *****************
  6974 ;; Defined at:
  6975 ;;		line 170 in file "APDS9960.c"
  6976 ;; Parameters:    Size  Location     Type
  6977 ;;  drive           1    wreg     unsigned char 
  6978 ;; Auto vars:     Size  Location     Type
  6979 ;;  drive           1   13[BANK0 ] unsigned char 
  6980 ;;  val             1   12[BANK0 ] unsigned char 
  6981 ;; Return value:  Size  Location     Type
  6982 ;;                  1    wreg      _Bool 
  6983 ;; Registers used:
  6984 ;;		wreg, status,2, status,0, pclath, cstack
  6985 ;; Tracked objects:
  6986 ;;		On entry : 0/0
  6987 ;;		On exit  : 0/0
  6988 ;;		Unchanged: 0/0
  6989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6990 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6991 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6992 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6993 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6994 ;;Total ram usage:        4 bytes
  6995 ;; Hardware stack levels used:    1
  6996 ;; Hardware stack levels required when called:    8
  6997 ;; This function calls:
  6998 ;;		_wireReadDataByte
  6999 ;;		_wireWriteDataByte
  7000 ;; This function is called by:
  7001 ;;		_initialize
  7002 ;; This function uses a non-reentrant model
  7003 ;;
  7004                           
  7005                           
  7006                           ;psect for function _setLEDDrive
  7007  0BD4                     _setLEDDrive:	
  7008                           
  7009                           ;incstack = 0
  7010                           ; Regs used in _setLEDDrive: [wreg+status,2+status,0+pclath+cstack]
  7011                           ;setLEDDrive@drive stored from wreg
  7012  0BD4  0020               	movlb	0	; select bank0
  7013  0BD5  00AD               	movwf	setLEDDrive@drive
  7014                           
  7015                           ;APDS9960.c: 170: _Bool setLEDDrive(uint8_t drive);APDS9960.c: 171: {;APDS9960.c: 172:  
      +                             uint8_t val;;APDS9960.c: 175:     val=wireReadDataByte(0x8F);
  7016  0BD6  308F               	movlw	143
  7017  0BD7  318A  22EE  318B   	fcall	_wireReadDataByte
  7018  0BDA  0020               	movlb	0	; select bank0
  7019  0BDB  00AA               	movwf	??_setLEDDrive
  7020  0BDC  082A               	movf	??_setLEDDrive,w
  7021  0BDD  00AC               	movwf	setLEDDrive@val
  7022                           
  7023                           ;APDS9960.c: 178:     drive &= 0b00000011;
  7024  0BDE  3003               	movlw	3
  7025  0BDF  00AA               	movwf	??_setLEDDrive
  7026  0BE0  082A               	movf	??_setLEDDrive,w
  7027  0BE1  05AD               	andwf	setLEDDrive@drive,f
  7028                           
  7029                           ;APDS9960.c: 179:     drive = drive << 6;
  7030  0BE2  082D               	movf	setLEDDrive@drive,w
  7031  0BE3  00AA               	movwf	??_setLEDDrive
  7032  0BE4  3005               	movlw	5
  7033  0BE5                     u5625:	
  7034  0BE5  35AA               	lslf	??_setLEDDrive,f
  7035  0BE6  3EFF               	addlw	-1
  7036  0BE7  1D03               	skipz
  7037  0BE8  2BE5               	goto	u5625
  7038  0BE9  352A               	lslf	??_setLEDDrive,w
  7039  0BEA  00AB               	movwf	??_setLEDDrive+1
  7040  0BEB  082B               	movf	??_setLEDDrive+1,w
  7041  0BEC  00AD               	movwf	setLEDDrive@drive
  7042                           
  7043                           ;APDS9960.c: 180:     val &= 0b00111111;
  7044  0BED  303F               	movlw	63
  7045  0BEE  00AA               	movwf	??_setLEDDrive
  7046  0BEF  082A               	movf	??_setLEDDrive,w
  7047  0BF0  05AC               	andwf	setLEDDrive@val,f
  7048                           
  7049                           ;APDS9960.c: 181:     val |= drive;
  7050  0BF1  082D               	movf	setLEDDrive@drive,w
  7051  0BF2  00AA               	movwf	??_setLEDDrive
  7052  0BF3  082A               	movf	??_setLEDDrive,w
  7053  0BF4  04AC               	iorwf	setLEDDrive@val,f
  7054                           
  7055                           ;APDS9960.c: 184:     if( !wireWriteDataByte(0x8F, val) ) {
  7056  0BF5  082C               	movf	setLEDDrive@val,w
  7057  0BF6  00AA               	movwf	??_setLEDDrive
  7058  0BF7  082A               	movf	??_setLEDDrive,w
  7059  0BF8  00A6               	movwf	wireWriteDataByte@val
  7060  0BF9  308F               	movlw	143
  7061  0BFA  318A  225F         	fcall	_wireWriteDataByte
  7062  0BFC  0008               	return
  7063  0BFD                     __end_of_setLEDDrive:	
  7064                           
  7065                           	psect	text8
  7066  0B5F                     __ptext8:	
  7067 ;; *************** function _setGestureWaitTime *****************
  7068 ;; Defined at:
  7069 ;;		line 366 in file "APDS9960.c"
  7070 ;; Parameters:    Size  Location     Type
  7071 ;;  time            1    wreg     unsigned char 
  7072 ;; Auto vars:     Size  Location     Type
  7073 ;;  time            1   11[BANK0 ] unsigned char 
  7074 ;;  val             1   12[BANK0 ] unsigned char 
  7075 ;; Return value:  Size  Location     Type
  7076 ;;                  1    wreg      _Bool 
  7077 ;; Registers used:
  7078 ;;		wreg, status,2, status,0, pclath, cstack
  7079 ;; Tracked objects:
  7080 ;;		On entry : 0/0
  7081 ;;		On exit  : 0/0
  7082 ;;		Unchanged: 0/0
  7083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7084 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7085 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7086 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7087 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7088 ;;Total ram usage:        3 bytes
  7089 ;; Hardware stack levels used:    1
  7090 ;; Hardware stack levels required when called:    8
  7091 ;; This function calls:
  7092 ;;		_wireReadDataByte
  7093 ;;		_wireWriteDataByte
  7094 ;; This function is called by:
  7095 ;;		_initialize
  7096 ;; This function uses a non-reentrant model
  7097 ;;
  7098                           
  7099                           
  7100                           ;psect for function _setGestureWaitTime
  7101  0B5F                     _setGestureWaitTime:	
  7102                           
  7103                           ;incstack = 0
  7104                           ; Regs used in _setGestureWaitTime: [wreg+status,2+status,0+pclath+cstack]
  7105                           ;setGestureWaitTime@time stored from wreg
  7106  0B5F  0020               	movlb	0	; select bank0
  7107  0B60  00AB               	movwf	setGestureWaitTime@time
  7108                           
  7109                           ;APDS9960.c: 366: _Bool setGestureWaitTime(uint8_t time);APDS9960.c: 367: {;APDS9960.c: 
      +                          368:     uint8_t val;;APDS9960.c: 371:     val = wireReadDataByte(0xA3);
  7110  0B61  30A3               	movlw	163
  7111  0B62  318A  22EE  318B   	fcall	_wireReadDataByte
  7112  0B65  0020               	movlb	0	; select bank0
  7113  0B66  00AA               	movwf	??_setGestureWaitTime
  7114  0B67  082A               	movf	??_setGestureWaitTime,w
  7115  0B68  00AC               	movwf	setGestureWaitTime@val
  7116                           
  7117                           ;APDS9960.c: 374:     time &= 0b00000111;
  7118  0B69  3007               	movlw	7
  7119  0B6A  00AA               	movwf	??_setGestureWaitTime
  7120  0B6B  082A               	movf	??_setGestureWaitTime,w
  7121  0B6C  05AB               	andwf	setGestureWaitTime@time,f
  7122                           
  7123                           ;APDS9960.c: 375:     val &= 0b11111000;
  7124  0B6D  30F8               	movlw	248
  7125  0B6E  00AA               	movwf	??_setGestureWaitTime
  7126  0B6F  082A               	movf	??_setGestureWaitTime,w
  7127  0B70  05AC               	andwf	setGestureWaitTime@val,f
  7128                           
  7129                           ;APDS9960.c: 376:     val |= time;
  7130  0B71  082B               	movf	setGestureWaitTime@time,w
  7131  0B72  00AA               	movwf	??_setGestureWaitTime
  7132  0B73  082A               	movf	??_setGestureWaitTime,w
  7133  0B74  04AC               	iorwf	setGestureWaitTime@val,f
  7134                           
  7135                           ;APDS9960.c: 379:     if( !wireWriteDataByte(0xA3, val) ) {
  7136  0B75  082C               	movf	setGestureWaitTime@val,w
  7137  0B76  00AA               	movwf	??_setGestureWaitTime
  7138  0B77  082A               	movf	??_setGestureWaitTime,w
  7139  0B78  00A6               	movwf	wireWriteDataByte@val
  7140  0B79  30A3               	movlw	163
  7141  0B7A  318A  225F  318B   	fcall	_wireWriteDataByte
  7142  0B7D  0020               	movlb	0	; select bank0
  7143  0B7E  0826               	movf	?_wireWriteDataByte,w
  7144  0B7F  0427               	iorwf	?_wireWriteDataByte+1,w
  7145  0B80  1D03               	btfss	3,2
  7146  0B81  2B84               	goto	l6626
  7147                           
  7148                           ;APDS9960.c: 380:         return 0;
  7149  0B82  3000               	movlw	0
  7150  0B83  0008               	return
  7151  0B84                     l6626:	
  7152                           
  7153                           ;APDS9960.c: 383:     return 1;
  7154  0B84  3001               	movlw	1
  7155  0B85  0008               	return
  7156  0B86                     __end_of_setGestureWaitTime:	
  7157                           
  7158                           	psect	text9
  7159  0D11                     __ptext9:	
  7160 ;; *************** function _setGestureLEDDrive *****************
  7161 ;; Defined at:
  7162 ;;		line 343 in file "APDS9960.c"
  7163 ;; Parameters:    Size  Location     Type
  7164 ;;  drive           1    wreg     unsigned char 
  7165 ;; Auto vars:     Size  Location     Type
  7166 ;;  drive           1   13[BANK0 ] unsigned char 
  7167 ;;  val             1   12[BANK0 ] unsigned char 
  7168 ;; Return value:  Size  Location     Type
  7169 ;;                  1    wreg      _Bool 
  7170 ;; Registers used:
  7171 ;;		wreg, status,2, status,0, pclath, cstack
  7172 ;; Tracked objects:
  7173 ;;		On entry : 0/0
  7174 ;;		On exit  : 0/0
  7175 ;;		Unchanged: 0/0
  7176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7178 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7179 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7180 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7181 ;;Total ram usage:        4 bytes
  7182 ;; Hardware stack levels used:    1
  7183 ;; Hardware stack levels required when called:    8
  7184 ;; This function calls:
  7185 ;;		_wireReadDataByte
  7186 ;;		_wireWriteDataByte
  7187 ;; This function is called by:
  7188 ;;		_initialize
  7189 ;; This function uses a non-reentrant model
  7190 ;;
  7191                           
  7192                           
  7193                           ;psect for function _setGestureLEDDrive
  7194  0D11                     _setGestureLEDDrive:	
  7195                           
  7196                           ;incstack = 0
  7197                           ; Regs used in _setGestureLEDDrive: [wreg+status,2+status,0+pclath+cstack]
  7198                           ;setGestureLEDDrive@drive stored from wreg
  7199  0D11  0020               	movlb	0	; select bank0
  7200  0D12  00AD               	movwf	setGestureLEDDrive@drive
  7201                           
  7202                           ;APDS9960.c: 343: _Bool setGestureLEDDrive(uint8_t drive);APDS9960.c: 344: {;APDS9960.c:
      +                           345:     uint8_t val;;APDS9960.c: 348:     val = wireReadDataByte(0xA3);
  7203  0D13  30A3               	movlw	163
  7204  0D14  318A  22EE  318D   	fcall	_wireReadDataByte
  7205  0D17  0020               	movlb	0	; select bank0
  7206  0D18  00AA               	movwf	??_setGestureLEDDrive
  7207  0D19  082A               	movf	??_setGestureLEDDrive,w
  7208  0D1A  00AC               	movwf	setGestureLEDDrive@val
  7209                           
  7210                           ;APDS9960.c: 352:     drive &= 0b00000011;
  7211  0D1B  3003               	movlw	3
  7212  0D1C  00AA               	movwf	??_setGestureLEDDrive
  7213  0D1D  082A               	movf	??_setGestureLEDDrive,w
  7214  0D1E  05AD               	andwf	setGestureLEDDrive@drive,f
  7215                           
  7216                           ;APDS9960.c: 353:     drive = drive << 3;
  7217  0D1F  082D               	movf	setGestureLEDDrive@drive,w
  7218  0D20  00AA               	movwf	??_setGestureLEDDrive
  7219  0D21  3002               	movlw	2
  7220  0D22                     u5745:	
  7221  0D22  35AA               	lslf	??_setGestureLEDDrive,f
  7222  0D23  3EFF               	addlw	-1
  7223  0D24  1D03               	skipz
  7224  0D25  2D22               	goto	u5745
  7225  0D26  352A               	lslf	??_setGestureLEDDrive,w
  7226  0D27  00AB               	movwf	??_setGestureLEDDrive+1
  7227  0D28  082B               	movf	??_setGestureLEDDrive+1,w
  7228  0D29  00AD               	movwf	setGestureLEDDrive@drive
  7229                           
  7230                           ;APDS9960.c: 354:     val &= 0b11100111;
  7231  0D2A  30E7               	movlw	231
  7232  0D2B  00AA               	movwf	??_setGestureLEDDrive
  7233  0D2C  082A               	movf	??_setGestureLEDDrive,w
  7234  0D2D  05AC               	andwf	setGestureLEDDrive@val,f
  7235                           
  7236                           ;APDS9960.c: 355:     val |= drive;
  7237  0D2E  082D               	movf	setGestureLEDDrive@drive,w
  7238  0D2F  00AA               	movwf	??_setGestureLEDDrive
  7239  0D30  082A               	movf	??_setGestureLEDDrive,w
  7240  0D31  04AC               	iorwf	setGestureLEDDrive@val,f
  7241                           
  7242                           ;APDS9960.c: 358:     if( !wireWriteDataByte(0xA3, val) ) {
  7243  0D32  082C               	movf	setGestureLEDDrive@val,w
  7244  0D33  00AA               	movwf	??_setGestureLEDDrive
  7245  0D34  082A               	movf	??_setGestureLEDDrive,w
  7246  0D35  00A6               	movwf	wireWriteDataByte@val
  7247  0D36  30A3               	movlw	163
  7248  0D37  318A  225F  318D   	fcall	_wireWriteDataByte
  7249  0D3A  0020               	movlb	0	; select bank0
  7250  0D3B  0826               	movf	?_wireWriteDataByte,w
  7251  0D3C  0427               	iorwf	?_wireWriteDataByte+1,w
  7252  0D3D  1D03               	btfss	3,2
  7253  0D3E  2D41               	goto	l6608
  7254                           
  7255                           ;APDS9960.c: 359:         return 0;
  7256  0D3F  3000               	movlw	0
  7257  0D40  0008               	return
  7258  0D41                     l6608:	
  7259                           
  7260                           ;APDS9960.c: 362:     return 1;
  7261  0D41  3001               	movlw	1
  7262  0D42  0008               	return
  7263  0D43                     __end_of_setGestureLEDDrive:	
  7264                           
  7265                           	psect	text10
  7266  0CDF                     __ptext10:	
  7267 ;; *************** function _setGestureGain *****************
  7268 ;; Defined at:
  7269 ;;		line 320 in file "APDS9960.c"
  7270 ;; Parameters:    Size  Location     Type
  7271 ;;  gain            1    wreg     unsigned char 
  7272 ;; Auto vars:     Size  Location     Type
  7273 ;;  gain            1   13[BANK0 ] unsigned char 
  7274 ;;  val             1   12[BANK0 ] unsigned char 
  7275 ;; Return value:  Size  Location     Type
  7276 ;;                  1    wreg      _Bool 
  7277 ;; Registers used:
  7278 ;;		wreg, status,2, status,0, pclath, cstack
  7279 ;; Tracked objects:
  7280 ;;		On entry : 0/0
  7281 ;;		On exit  : 0/0
  7282 ;;		Unchanged: 0/0
  7283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7284 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7285 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7286 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7287 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7288 ;;Total ram usage:        4 bytes
  7289 ;; Hardware stack levels used:    1
  7290 ;; Hardware stack levels required when called:    8
  7291 ;; This function calls:
  7292 ;;		_wireReadDataByte
  7293 ;;		_wireWriteDataByte
  7294 ;; This function is called by:
  7295 ;;		_initialize
  7296 ;; This function uses a non-reentrant model
  7297 ;;
  7298                           
  7299                           
  7300                           ;psect for function _setGestureGain
  7301  0CDF                     _setGestureGain:	
  7302                           
  7303                           ;incstack = 0
  7304                           ; Regs used in _setGestureGain: [wreg+status,2+status,0+pclath+cstack]
  7305                           ;setGestureGain@gain stored from wreg
  7306  0CDF  0020               	movlb	0	; select bank0
  7307  0CE0  00AD               	movwf	setGestureGain@gain
  7308                           
  7309                           ;APDS9960.c: 320: _Bool setGestureGain(uint8_t gain);APDS9960.c: 321: {;APDS9960.c: 322:
      +                               uint8_t val;;APDS9960.c: 325:     val = wireReadDataByte(0xA3);
  7310  0CE1  30A3               	movlw	163
  7311  0CE2  318A  22EE  318C   	fcall	_wireReadDataByte
  7312  0CE5  0020               	movlb	0	; select bank0
  7313  0CE6  00AA               	movwf	??_setGestureGain
  7314  0CE7  082A               	movf	??_setGestureGain,w
  7315  0CE8  00AC               	movwf	setGestureGain@val
  7316                           
  7317                           ;APDS9960.c: 329:     gain &= 0b00000011;
  7318  0CE9  3003               	movlw	3
  7319  0CEA  00AA               	movwf	??_setGestureGain
  7320  0CEB  082A               	movf	??_setGestureGain,w
  7321  0CEC  05AD               	andwf	setGestureGain@gain,f
  7322                           
  7323                           ;APDS9960.c: 330:     gain = gain << 5;
  7324  0CED  082D               	movf	setGestureGain@gain,w
  7325  0CEE  00AA               	movwf	??_setGestureGain
  7326  0CEF  3004               	movlw	4
  7327  0CF0                     u5725:	
  7328  0CF0  35AA               	lslf	??_setGestureGain,f
  7329  0CF1  3EFF               	addlw	-1
  7330  0CF2  1D03               	skipz
  7331  0CF3  2CF0               	goto	u5725
  7332  0CF4  352A               	lslf	??_setGestureGain,w
  7333  0CF5  00AB               	movwf	??_setGestureGain+1
  7334  0CF6  082B               	movf	??_setGestureGain+1,w
  7335  0CF7  00AD               	movwf	setGestureGain@gain
  7336                           
  7337                           ;APDS9960.c: 331:     val &= 0b10011111;
  7338  0CF8  309F               	movlw	159
  7339  0CF9  00AA               	movwf	??_setGestureGain
  7340  0CFA  082A               	movf	??_setGestureGain,w
  7341  0CFB  05AC               	andwf	setGestureGain@val,f
  7342                           
  7343                           ;APDS9960.c: 332:     val |= gain;
  7344  0CFC  082D               	movf	setGestureGain@gain,w
  7345  0CFD  00AA               	movwf	??_setGestureGain
  7346  0CFE  082A               	movf	??_setGestureGain,w
  7347  0CFF  04AC               	iorwf	setGestureGain@val,f
  7348                           
  7349                           ;APDS9960.c: 335:     if( !wireWriteDataByte(0xA3, val) ) {
  7350  0D00  082C               	movf	setGestureGain@val,w
  7351  0D01  00AA               	movwf	??_setGestureGain
  7352  0D02  082A               	movf	??_setGestureGain,w
  7353  0D03  00A6               	movwf	wireWriteDataByte@val
  7354  0D04  30A3               	movlw	163
  7355  0D05  318A  225F  318C   	fcall	_wireWriteDataByte
  7356  0D08  0020               	movlb	0	; select bank0
  7357  0D09  0826               	movf	?_wireWriteDataByte,w
  7358  0D0A  0427               	iorwf	?_wireWriteDataByte+1,w
  7359  0D0B  1D03               	btfss	3,2
  7360  0D0C  2D0F               	goto	l6590
  7361                           
  7362                           ;APDS9960.c: 336:         return 0;
  7363  0D0D  3000               	movlw	0
  7364  0D0E  0008               	return
  7365  0D0F                     l6590:	
  7366                           
  7367                           ;APDS9960.c: 339:     return 1;
  7368  0D0F  3001               	movlw	1
  7369  0D10  0008               	return
  7370  0D11                     __end_of_setGestureGain:	
  7371                           
  7372                           	psect	text11
  7373  09CA                     __ptext11:	
  7374 ;; *************** function _setGestureExitThresh *****************
  7375 ;; Defined at:
  7376 ;;		line 310 in file "APDS9960.c"
  7377 ;; Parameters:    Size  Location     Type
  7378 ;;  threshold       1    wreg     unsigned char 
  7379 ;; Auto vars:     Size  Location     Type
  7380 ;;  threshold       1   11[BANK0 ] unsigned char 
  7381 ;; Return value:  Size  Location     Type
  7382 ;;                  1    wreg      _Bool 
  7383 ;; Registers used:
  7384 ;;		wreg, status,2, status,0, pclath, cstack
  7385 ;; Tracked objects:
  7386 ;;		On entry : 0/0
  7387 ;;		On exit  : 0/0
  7388 ;;		Unchanged: 0/0
  7389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7390 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7391 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7392 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7393 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7394 ;;Total ram usage:        2 bytes
  7395 ;; Hardware stack levels used:    1
  7396 ;; Hardware stack levels required when called:    8
  7397 ;; This function calls:
  7398 ;;		_wireWriteDataByte
  7399 ;; This function is called by:
  7400 ;;		_initialize
  7401 ;; This function uses a non-reentrant model
  7402 ;;
  7403                           
  7404                           
  7405                           ;psect for function _setGestureExitThresh
  7406  09CA                     _setGestureExitThresh:	
  7407                           
  7408                           ;incstack = 0
  7409                           ; Regs used in _setGestureExitThresh: [wreg+status,2+status,0+pclath+cstack]
  7410                           ;setGestureExitThresh@threshold stored from wreg
  7411  09CA  0020               	movlb	0	; select bank0
  7412  09CB  00AB               	movwf	setGestureExitThresh@threshold
  7413                           
  7414                           ;APDS9960.c: 310: _Bool setGestureExitThresh(uint8_t threshold);APDS9960.c: 311: {;APDS9
      +                          960.c: 312:     if( !wireWriteDataByte(0xA1, threshold) ) {
  7415  09CC  082B               	movf	setGestureExitThresh@threshold,w
  7416  09CD  00AA               	movwf	??_setGestureExitThresh
  7417  09CE  082A               	movf	??_setGestureExitThresh,w
  7418  09CF  00A6               	movwf	wireWriteDataByte@val
  7419  09D0  30A1               	movlw	161
  7420  09D1  318A  225F  3189   	fcall	_wireWriteDataByte
  7421  09D4  0020               	movlb	0	; select bank0
  7422  09D5  0826               	movf	?_wireWriteDataByte,w
  7423  09D6  0427               	iorwf	?_wireWriteDataByte+1,w
  7424  09D7  1D03               	btfss	3,2
  7425  09D8  29DB               	goto	l6572
  7426                           
  7427                           ;APDS9960.c: 313:         return 0;
  7428  09D9  3000               	movlw	0
  7429  09DA  0008               	return
  7430  09DB                     l6572:	
  7431                           
  7432                           ;APDS9960.c: 316:     return 1;
  7433  09DB  3001               	movlw	1
  7434  09DC  0008               	return
  7435  09DD                     __end_of_setGestureExitThresh:	
  7436                           
  7437                           	psect	text12
  7438  09B7                     __ptext12:	
  7439 ;; *************** function _setGestureEnterThresh *****************
  7440 ;; Defined at:
  7441 ;;		line 300 in file "APDS9960.c"
  7442 ;; Parameters:    Size  Location     Type
  7443 ;;  threshold       1    wreg     unsigned char 
  7444 ;; Auto vars:     Size  Location     Type
  7445 ;;  threshold       1   11[BANK0 ] unsigned char 
  7446 ;; Return value:  Size  Location     Type
  7447 ;;                  1    wreg      _Bool 
  7448 ;; Registers used:
  7449 ;;		wreg, status,2, status,0, pclath, cstack
  7450 ;; Tracked objects:
  7451 ;;		On entry : 0/0
  7452 ;;		On exit  : 0/0
  7453 ;;		Unchanged: 0/0
  7454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7456 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7457 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7458 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7459 ;;Total ram usage:        2 bytes
  7460 ;; Hardware stack levels used:    1
  7461 ;; Hardware stack levels required when called:    8
  7462 ;; This function calls:
  7463 ;;		_wireWriteDataByte
  7464 ;; This function is called by:
  7465 ;;		_initialize
  7466 ;; This function uses a non-reentrant model
  7467 ;;
  7468                           
  7469                           
  7470                           ;psect for function _setGestureEnterThresh
  7471  09B7                     _setGestureEnterThresh:	
  7472                           
  7473                           ;incstack = 0
  7474                           ; Regs used in _setGestureEnterThresh: [wreg+status,2+status,0+pclath+cstack]
  7475                           ;setGestureEnterThresh@threshold stored from wreg
  7476  09B7  0020               	movlb	0	; select bank0
  7477  09B8  00AB               	movwf	setGestureEnterThresh@threshold
  7478                           
  7479                           ;APDS9960.c: 300: _Bool setGestureEnterThresh(uint8_t threshold);APDS9960.c: 301: {;APDS
      +                          9960.c: 302:     if( !wireWriteDataByte(0xA0, threshold) ) {
  7480  09B9  082B               	movf	setGestureEnterThresh@threshold,w
  7481  09BA  00AA               	movwf	??_setGestureEnterThresh
  7482  09BB  082A               	movf	??_setGestureEnterThresh,w
  7483  09BC  00A6               	movwf	wireWriteDataByte@val
  7484  09BD  30A0               	movlw	160
  7485  09BE  318A  225F  3189   	fcall	_wireWriteDataByte
  7486  09C1  0020               	movlb	0	; select bank0
  7487  09C2  0826               	movf	?_wireWriteDataByte,w
  7488  09C3  0427               	iorwf	?_wireWriteDataByte+1,w
  7489  09C4  1D03               	btfss	3,2
  7490  09C5  29C8               	goto	l6562
  7491                           
  7492                           ;APDS9960.c: 303:         return 0;
  7493  09C6  3000               	movlw	0
  7494  09C7  0008               	return
  7495  09C8                     l6562:	
  7496                           
  7497                           ;APDS9960.c: 306:     return 1;
  7498  09C8  3001               	movlw	1
  7499  09C9  0008               	return
  7500  09CA                     __end_of_setGestureEnterThresh:	
  7501                           
  7502                           	psect	text13
  7503  0AD0                     __ptext13:	
  7504 ;; *************** function _setAmbientLightGain *****************
  7505 ;; Defined at:
  7506 ;;		line 213 in file "APDS9960.c"
  7507 ;; Parameters:    Size  Location     Type
  7508 ;;  drive           1    wreg     unsigned char 
  7509 ;; Auto vars:     Size  Location     Type
  7510 ;;  drive           1   11[BANK0 ] unsigned char 
  7511 ;;  val             1   12[BANK0 ] unsigned char 
  7512 ;; Return value:  Size  Location     Type
  7513 ;;                  1    wreg      _Bool 
  7514 ;; Registers used:
  7515 ;;		wreg, status,2, status,0, pclath, cstack
  7516 ;; Tracked objects:
  7517 ;;		On entry : 0/0
  7518 ;;		On exit  : 0/0
  7519 ;;		Unchanged: 0/0
  7520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7521 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7522 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7523 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7524 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7525 ;;Total ram usage:        3 bytes
  7526 ;; Hardware stack levels used:    1
  7527 ;; Hardware stack levels required when called:    8
  7528 ;; This function calls:
  7529 ;;		_wireReadDataByte
  7530 ;;		_wireWriteDataByte
  7531 ;; This function is called by:
  7532 ;;		_initialize
  7533 ;; This function uses a non-reentrant model
  7534 ;;
  7535                           
  7536                           
  7537                           ;psect for function _setAmbientLightGain
  7538  0AD0                     _setAmbientLightGain:	
  7539                           
  7540                           ;incstack = 0
  7541                           ; Regs used in _setAmbientLightGain: [wreg+status,2+status,0+pclath+cstack]
  7542                           ;setAmbientLightGain@drive stored from wreg
  7543  0AD0  0020               	movlb	0	; select bank0
  7544  0AD1  00AB               	movwf	setAmbientLightGain@drive
  7545                           
  7546                           ;APDS9960.c: 213: _Bool setAmbientLightGain(uint8_t drive);APDS9960.c: 214: {;APDS9960.c
      +                          : 215:     uint8_t val;;APDS9960.c: 218:     val= wireReadDataByte(0x8F);
  7547  0AD2  308F               	movlw	143
  7548  0AD3  318A  22EE  318A   	fcall	_wireReadDataByte
  7549  0AD6  0020               	movlb	0	; select bank0
  7550  0AD7  00AA               	movwf	??_setAmbientLightGain
  7551  0AD8  082A               	movf	??_setAmbientLightGain,w
  7552  0AD9  00AC               	movwf	setAmbientLightGain@val
  7553                           
  7554                           ;APDS9960.c: 221:     drive &= 0b00000011;
  7555  0ADA  3003               	movlw	3
  7556  0ADB  00AA               	movwf	??_setAmbientLightGain
  7557  0ADC  082A               	movf	??_setAmbientLightGain,w
  7558  0ADD  05AB               	andwf	setAmbientLightGain@drive,f
  7559                           
  7560                           ;APDS9960.c: 222:     val &= 0b11111100;
  7561  0ADE  30FC               	movlw	252
  7562  0ADF  00AA               	movwf	??_setAmbientLightGain
  7563  0AE0  082A               	movf	??_setAmbientLightGain,w
  7564  0AE1  05AC               	andwf	setAmbientLightGain@val,f
  7565                           
  7566                           ;APDS9960.c: 223:     val |= drive;
  7567  0AE2  082B               	movf	setAmbientLightGain@drive,w
  7568  0AE3  00AA               	movwf	??_setAmbientLightGain
  7569  0AE4  082A               	movf	??_setAmbientLightGain,w
  7570  0AE5  04AC               	iorwf	setAmbientLightGain@val,f
  7571                           
  7572                           ;APDS9960.c: 226:     if( !wireWriteDataByte(0x8F, val) ) {
  7573  0AE6  082C               	movf	setAmbientLightGain@val,w
  7574  0AE7  00AA               	movwf	??_setAmbientLightGain
  7575  0AE8  082A               	movf	??_setAmbientLightGain,w
  7576  0AE9  00A6               	movwf	wireWriteDataByte@val
  7577  0AEA  308F               	movlw	143
  7578  0AEB  318A  225F         	fcall	_wireWriteDataByte
  7579  0AED  0008               	return
  7580  0AEE                     __end_of_setAmbientLightGain:	
  7581                           
  7582                           	psect	text14
  7583  0955                     __ptext14:	
  7584 ;; *************** function _i2c1_driver_open *****************
  7585 ;; Defined at:
  7586 ;;		line 83 in file "mcc_generated_files/i2c1_driver.c"
  7587 ;; Parameters:    Size  Location     Type
  7588 ;;		None
  7589 ;; Auto vars:     Size  Location     Type
  7590 ;;		None
  7591 ;; Return value:  Size  Location     Type
  7592 ;;		None               void
  7593 ;; Registers used:
  7594 ;;		wreg, status,2
  7595 ;; Tracked objects:
  7596 ;;		On entry : 0/0
  7597 ;;		On exit  : 0/0
  7598 ;;		Unchanged: 0/0
  7599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7601 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7603 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7604 ;;Total ram usage:        0 bytes
  7605 ;; Hardware stack levels used:    1
  7606 ;; Hardware stack levels required when called:    5
  7607 ;; This function calls:
  7608 ;;		Nothing
  7609 ;; This function is called by:
  7610 ;;		_initialize
  7611 ;;		_i2c_open
  7612 ;;		_InitI2C
  7613 ;; This function uses a non-reentrant model
  7614 ;;
  7615                           
  7616                           
  7617                           ;psect for function _i2c1_driver_open
  7618  0955                     _i2c1_driver_open:	
  7619                           
  7620                           ;incstack = 0
  7621                           ; Regs used in _i2c1_driver_open: [wreg+status,2]
  7622  0955  0024               	movlb	4	; select bank4
  7623  0956  1A95               	btfsc	21,5	;volatile
  7624  0957  0008               	return
  7625  0958  0194               	clrf	20	;volatile
  7626  0959  3028               	movlw	40
  7627  095A  0095               	movwf	21	;volatile
  7628  095B  0196               	clrf	22	;volatile
  7629  095C  3003               	movlw	3
  7630  095D  0092               	movwf	18	;volatile
  7631  095E  0008               	return
  7632  095F                     __end_of_i2c1_driver_open:	
  7633                           
  7634                           	psect	text15
  7635  0F42                     __ptext15:	
  7636 ;; *************** function _handleGesture *****************
  7637 ;; Defined at:
  7638 ;;		line 159 in file "main.c"
  7639 ;; Parameters:    Size  Location     Type
  7640 ;;		None
  7641 ;; Auto vars:     Size  Location     Type
  7642 ;;		None
  7643 ;; Return value:  Size  Location     Type
  7644 ;;                  1    wreg      void 
  7645 ;; Registers used:
  7646 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7647 ;; Tracked objects:
  7648 ;;		On entry : 0/0
  7649 ;;		On exit  : 0/0
  7650 ;;		Unchanged: 0/0
  7651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7652 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7653 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7654 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7655 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7656 ;;Total ram usage:        1 bytes
  7657 ;; Hardware stack levels used:    1
  7658 ;; Hardware stack levels required when called:   10
  7659 ;; This function calls:
  7660 ;;		_Display_Name
  7661 ;;		_readGesture
  7662 ;; This function is called by:
  7663 ;;		_main
  7664 ;; This function uses a non-reentrant model
  7665 ;;
  7666                           
  7667                           
  7668                           ;psect for function _handleGesture
  7669  0F42                     _handleGesture:	
  7670                           
  7671                           ;main.c: 165:     switch(readGesture()) {
  7672                           
  7673                           ;incstack = 0
  7674                           ; Regs used in _handleGesture: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7675  0F42  2F7C               	goto	l7036
  7676  0F43                     l7014:	
  7677                           
  7678                           ;main.c: 173:             printed = 0;
  7679  0F43  01EA               	clrf	_printed
  7680                           
  7681                           ;main.c: 176:             name++;
  7682  0F44  3001               	movlw	1
  7683  0F45  07DD               	addwf	_name,f
  7684  0F46  3000               	movlw	0
  7685  0F47  3DDE               	addwfc	_name+1,f
  7686                           
  7687                           ;main.c: 177:             if(name > 3) {
  7688  0F48  085E               	movf	_name+1,w
  7689  0F49  3A80               	xorlw	128
  7690  0F4A  00DB               	movwf	??_handleGesture
  7691  0F4B  3080               	movlw	128
  7692  0F4C  025B               	subwf	??_handleGesture,w
  7693  0F4D  1D03               	skipz
  7694  0F4E  2F51               	goto	u6345
  7695  0F4F  3004               	movlw	4
  7696  0F50  025D               	subwf	_name,w
  7697  0F51                     u6345:	
  7698  0F51  1C03               	skipc
  7699  0F52  2F56               	goto	l7022
  7700                           
  7701                           ;main.c: 178:                 name = 0;
  7702  0F53  0020               	movlb	0	; select bank0
  7703  0F54  01DD               	clrf	_name
  7704  0F55  01DE               	clrf	_name+1
  7705  0F56                     l7022:	
  7706                           
  7707                           ;main.c: 180:             Display_Name(names[name]);
  7708  0F56  0020               	movlb	0	; select bank0
  7709  0F57  355D               	lslf	_name,w
  7710  0F58  3E60               	addlw	(low (_names| (0+256)))& (0+255)
  7711  0F59  0086               	movwf	6
  7712  0F5A  3001               	movlw	1	; select bank2/3
  7713  0F5B  0087               	movwf	7
  7714  0F5C  3F40               	moviw [0]fsr1
  7715  0F5D  00A5               	movwf	Display_Name@string1
  7716  0F5E  3F41               	moviw [1]fsr1
  7717  0F5F  00A6               	movwf	Display_Name@string1+1
  7718  0F60  318E  26A0  318F   	fcall	_Display_Name
  7719                           
  7720                           ;main.c: 181:             break;
  7721  0F63  2F99               	goto	l7038
  7722  0F64                     l7024:	
  7723                           
  7724                           ;main.c: 183:             printed = 0;
  7725  0F64  01EA               	clrf	_printed
  7726                           
  7727                           ;main.c: 184:             --name;
  7728  0F65  30FF               	movlw	255
  7729  0F66  07DD               	addwf	_name,f
  7730  0F67  30FF               	movlw	255
  7731  0F68  3DDE               	addwfc	_name+1,f
  7732                           
  7733                           ;main.c: 185:             if(name < 0) {
  7734  0F69  1FDE               	btfss	_name+1,7
  7735  0F6A  2F6F               	goto	l7032
  7736                           
  7737                           ;main.c: 186:                 name = 3;
  7738  0F6B  3003               	movlw	3
  7739  0F6C  00DD               	movwf	_name
  7740  0F6D  3000               	movlw	0
  7741  0F6E  00DE               	movwf	_name+1
  7742  0F6F                     l7032:	
  7743                           
  7744                           ;main.c: 188:             Display_Name(names[name]);
  7745  0F6F  355D               	lslf	_name,w
  7746  0F70  3E60               	addlw	(low (_names| (0+256)))& (0+255)
  7747  0F71  0086               	movwf	6
  7748  0F72  3001               	movlw	1	; select bank2/3
  7749  0F73  0087               	movwf	7
  7750  0F74  3F40               	moviw [0]fsr1
  7751  0F75  00A5               	movwf	Display_Name@string1
  7752  0F76  3F41               	moviw [1]fsr1
  7753  0F77  00A6               	movwf	Display_Name@string1+1
  7754  0F78  318E  26A0  318F   	fcall	_Display_Name
  7755                           
  7756                           ;main.c: 189:             break;
  7757  0F7B  2F99               	goto	l7038
  7758  0F7C                     l7036:	
  7759  0F7C  3185  25E4  318F   	fcall	_readGesture
  7760                           
  7761                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7762                           ; Switch size 1, requested type "simple"
  7763                           ; Number of cases is 1, Range of values is 0 to 0
  7764                           ; switch strategies available:
  7765                           ; Name         Instructions Cycles
  7766                           ; simple_byte            4     3 (average)
  7767                           ; direct_byte            8     6 (fixed)
  7768                           ; jumptable            260     6 (fixed)
  7769                           ;	Chosen strategy is simple_byte
  7770  0F7F  0020               	movlb	0	; select bank0
  7771  0F80  0850               	movf	?_readGesture+1,w
  7772  0F81  3A00               	xorlw	0	; case 0
  7773  0F82  1903               	skipnz
  7774  0F83  2F85               	goto	l7302
  7775  0F84  2F99               	goto	l7038
  7776  0F85                     l7302:	
  7777                           
  7778                           ; Switch size 1, requested type "simple"
  7779                           ; Number of cases is 6, Range of values is 1 to 6
  7780                           ; switch strategies available:
  7781                           ; Name         Instructions Cycles
  7782                           ; simple_byte           19    10 (average)
  7783                           ; direct_byte           21     9 (fixed)
  7784                           ; jumptable            263     9 (fixed)
  7785                           ;	Chosen strategy is simple_byte
  7786  0F85  084F               	movf	?_readGesture,w
  7787  0F86  3A01               	xorlw	1	; case 1
  7788  0F87  1903               	skipnz
  7789  0F88  2F43               	goto	l7014
  7790  0F89  3A03               	xorlw	3	; case 2
  7791  0F8A  1903               	skipnz
  7792  0F8B  2F64               	goto	l7024
  7793  0F8C  3A01               	xorlw	1	; case 3
  7794  0F8D  1903               	skipnz
  7795  0F8E  2F99               	goto	l7038
  7796  0F8F  3A07               	xorlw	7	; case 4
  7797  0F90  1903               	skipnz
  7798  0F91  2F99               	goto	l7038
  7799  0F92  3A01               	xorlw	1	; case 5
  7800  0F93  1903               	skipnz
  7801  0F94  2F99               	goto	l7038
  7802  0F95  3A03               	xorlw	3	; case 6
  7803  0F96  1903               	skipnz
  7804  0F97  2F99               	goto	l7038
  7805  0F98  2F99               	goto	l7038
  7806  0F99                     l7038:	
  7807                           
  7808                           ;main.c: 201:     printed = 0;
  7809  0F99  0020               	movlb	0	; select bank0
  7810  0F9A  01EA               	clrf	_printed
  7811  0F9B  0008               	return
  7812  0F9C                     __end_of_handleGesture:	
  7813                           
  7814                           	psect	text16
  7815  05E4                     __ptext16:	
  7816 ;; *************** function _readGesture *****************
  7817 ;; Defined at:
  7818 ;;		line 556 in file "APDS9960.c"
  7819 ;; Parameters:    Size  Location     Type
  7820 ;;		None
  7821 ;; Auto vars:     Size  Location     Type
  7822 ;;  fifo_data      64    0[BANK2 ] unsigned char [64]
  7823 ;;  fifo_data2     64    0[BANK1 ] unsigned char [64]
  7824 ;;  i               2   57[BANK0 ] int 
  7825 ;;  bytes_read      2   54[BANK0 ] int 
  7826 ;;  motion          2   51[BANK0 ] int 
  7827 ;;  fifo_level      1   56[BANK0 ] unsigned char 
  7828 ;;  gstatus         1   53[BANK0 ] unsigned char 
  7829 ;; Return value:  Size  Location     Type
  7830 ;;                  2   47[BANK0 ] int 
  7831 ;; Registers used:
  7832 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7833 ;; Tracked objects:
  7834 ;;		On entry : 0/0
  7835 ;;		On exit  : 0/0
  7836 ;;		Unchanged: 0/0
  7837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7838 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7839 ;;      Locals:         0       8      64      64       0       0       0       0       0       0       0       0       
      +0       0
  7840 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7841 ;;      Totals:         0      12      64      64       0       0       0       0       0       0       0       0       
      +0       0
  7842 ;;Total ram usage:      140 bytes
  7843 ;; Hardware stack levels used:    1
  7844 ;; Hardware stack levels required when called:    9
  7845 ;; This function calls:
  7846 ;;		_decodeGesture
  7847 ;;		_getMode
  7848 ;;		_isGestureAvailable
  7849 ;;		_processGestureData
  7850 ;;		_resetGestureParameters
  7851 ;;		_wireReadDataBlock
  7852 ;;		_wireReadDataByte
  7853 ;; This function is called by:
  7854 ;;		_handleGesture
  7855 ;; This function uses a non-reentrant model
  7856 ;;
  7857                           
  7858                           
  7859                           ;psect for function _readGesture
  7860  05E4                     _readGesture:	
  7861                           
  7862                           ;APDS9960.c: 559:     int bytes_read = 0;
  7863                           
  7864                           ;incstack = 0
  7865                           ; Regs used in _readGesture: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7866  05E4  0020               	movlb	0	; select bank0
  7867  05E5  01D6               	clrf	readGesture@bytes_read
  7868  05E6  01D7               	clrf	readGesture@bytes_read+1
  7869                           
  7870                           ;APDS9960.c: 560:     uint8_t fifo_data[64];;APDS9960.c: 561:     uint8_t fifo_data2[64]
      +                          ;;APDS9960.c: 562:     uint8_t gstatus;;APDS9960.c: 563:     int motion;;APDS9960.c: 564
      +                          :     int i;;APDS9960.c: 567:     if( !isGestureAvailable() || !(getMode() & 0b01000001)
      +                           ) {
  7871  05E7  3189  21A4  3185   	fcall	_isGestureAvailable
  7872  05EA  3A00               	xorlw	0
  7873  05EB  1903               	skipnz
  7874  05EC  2DF3               	goto	l6392
  7875  05ED  3189  214C  3185   	fcall	_getMode
  7876  05F0  3941               	andlw	65
  7877  05F1  1D03               	btfss	3,2
  7878  05F2  2EA8               	goto	l6396
  7879  05F3                     l6392:	
  7880                           
  7881                           ;APDS9960.c: 568:         return DIR_NONE;
  7882  05F3  0020               	movlb	0	; select bank0
  7883  05F4  01CF               	clrf	?_readGesture
  7884  05F5  01D0               	clrf	?_readGesture+1
  7885  05F6  0008               	return
  7886  05F7                     l6402:	
  7887                           ;APDS9960.c: 569:     }
  7888                           
  7889                           
  7890                           ;APDS9960.c: 584:         {;APDS9960.c: 586:          fifo_level= wireReadDataByte(0xAE)
      +                          ;
  7891  05F7  30AE               	movlw	174
  7892  05F8  318A  22EE  3185   	fcall	_wireReadDataByte
  7893  05FB  0020               	movlb	0	; select bank0
  7894  05FC  00D1               	movwf	??_readGesture
  7895  05FD  0851               	movf	??_readGesture,w
  7896  05FE  00D8               	movwf	readGesture@fifo_level
  7897                           
  7898                           ;APDS9960.c: 590:             if( fifo_level > 0) {
  7899  05FF  0858               	movf	readGesture@fifo_level,w
  7900  0600  1903               	btfsc	3,2
  7901  0601  2EA8               	goto	l6396
  7902                           
  7903                           ;APDS9960.c: 592:               if(fifo_level < 17)
  7904  0602  3011               	movlw	17
  7905  0603  0258               	subwf	readGesture@fifo_level,w
  7906  0604  1803               	skipnc
  7907  0605  2E0A               	goto	l6410
  7908                           
  7909                           ;APDS9960.c: 593:               {;APDS9960.c: 594:                 bytes_read = wireRead
      +                          DataBlock( 0xFC,
  7910  0606  3020               	movlw	low readGesture@fifo_data
  7911  0607  00A6               	movwf	wireReadDataBlock@val
  7912  0608  3001               	movlw	high readGesture@fifo_data
  7913  0609  2E0D               	goto	L1
  7914  060A                     l6410:	
  7915                           ;APDS9960.c: 597:               } else
  7916                           
  7917                           
  7918                           ;APDS9960.c: 598:               {;APDS9960.c: 599:                 bytes_read = wireRead
      +                          DataBlock( 0xFC,
  7919  060A  30A0               	movlw	low readGesture@fifo_data2
  7920  060B  00A6               	movwf	wireReadDataBlock@val
  7921  060C  3000               	movlw	high readGesture@fifo_data2
  7922  060D                     L1:	
  7923  060D  00A7               	movwf	wireReadDataBlock@val+1
  7924  060E  0858               	movf	readGesture@fifo_level,w
  7925  060F  00D1               	movwf	??_readGesture
  7926  0610  01D2               	clrf	??_readGesture+1
  7927  0611  35D1               	lslf	??_readGesture,f
  7928  0612  0DD2               	rlf	??_readGesture+1,f
  7929  0613  35D1               	lslf	??_readGesture,f
  7930  0614  0DD2               	rlf	??_readGesture+1,f
  7931  0615  0851               	movf	??_readGesture,w
  7932  0616  00A8               	movwf	wireReadDataBlock@len
  7933  0617  0852               	movf	??_readGesture+1,w
  7934  0618  00A9               	movwf	wireReadDataBlock@len+1
  7935  0619  30FC               	movlw	252
  7936  061A  318D  25B8  3185   	fcall	_wireReadDataBlock
  7937  061D  0020               	movlb	0	; select bank0
  7938  061E  0827               	movf	?_wireReadDataBlock+1,w
  7939  061F  00D7               	movwf	readGesture@bytes_read+1
  7940  0620  0826               	movf	?_wireReadDataBlock,w
  7941  0621  00D6               	movwf	readGesture@bytes_read
  7942                           
  7943                           ;APDS9960.c: 605:                 if( bytes_read == -1 )
  7944  0622  0A56               	incf	readGesture@bytes_read,w
  7945  0623  1D03               	skipz
  7946  0624  2E2D               	goto	l6418
  7947  0625  0A57               	incf	readGesture@bytes_read+1,w
  7948  0626  1D03               	btfss	3,2
  7949  0627  2E2D               	goto	l6418
  7950                           
  7951                           ;APDS9960.c: 606:                 {;APDS9960.c: 607:                     return 0xFF;
  7952  0628  30FF               	movlw	255
  7953  0629  00CF               	movwf	?_readGesture
  7954  062A  3000               	movlw	0
  7955  062B  00D0               	movwf	?_readGesture+1
  7956  062C  0008               	return
  7957  062D                     l6418:	
  7958                           
  7959                           ;APDS9960.c: 612:                 if( bytes_read >= 4 )
  7960  062D  0857               	movf	readGesture@bytes_read+1,w
  7961  062E  3A80               	xorlw	128
  7962  062F  00D1               	movwf	??_readGesture
  7963  0630  3080               	movlw	128
  7964  0631  0251               	subwf	??_readGesture,w
  7965  0632  1D03               	skipz
  7966  0633  2E36               	goto	u5585
  7967  0634  3004               	movlw	4
  7968  0635  0256               	subwf	readGesture@bytes_read,w
  7969  0636                     u5585:	
  7970  0636  1C03               	skipc
  7971  0637  2EA8               	goto	l6396
  7972                           
  7973                           ;APDS9960.c: 613:                 {;APDS9960.c: 615:                     for( i = 0; i <
      +                           bytes_read; i += 4 ) {
  7974  0638  0020               	movlb	0	; select bank0
  7975  0639  01D9               	clrf	readGesture@i
  7976  063A  01DA               	clrf	readGesture@i+1
  7977  063B                     l6430:	
  7978  063B  085A               	movf	readGesture@i+1,w
  7979  063C  3A80               	xorlw	128
  7980  063D  00D1               	movwf	??_readGesture
  7981  063E  0857               	movf	readGesture@bytes_read+1,w
  7982  063F  3A80               	xorlw	128
  7983  0640  0251               	subwf	??_readGesture,w
  7984  0641  1D03               	skipz
  7985  0642  2E45               	goto	u5595
  7986  0643  0856               	movf	readGesture@bytes_read,w
  7987  0644  0259               	subwf	readGesture@i,w
  7988  0645                     u5595:	
  7989  0645  1803               	btfsc	3,0
  7990  0646  2E9C               	goto	l6432
  7991                           
  7992                           ;APDS9960.c: 616:                         gesture_data_.u_data[gesture_data_.index] = fi
      +                          fo_data[i + 0];
  7993  0647  0020               	movlb	0	; select bank0
  7994  0648  0859               	movf	readGesture@i,w
  7995  0649  3E20               	addlw	(low (readGesture@fifo_data| (0+256)))& (0+255)
  7996  064A  0086               	movwf	6
  7997  064B  3001               	movlw	1	; select bank2/3
  7998  064C  0087               	movwf	7
  7999  064D  0801               	movf	1,w
  8000  064E  00D1               	movwf	??_readGesture
  8001  064F  0024               	movlb	4	; select bank4
  8002  0650  0860               	movf	(_gesture_data_^(0+512)+64),w
  8003  0651  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  8004  0652  0086               	movwf	6
  8005  0653  3002               	movlw	2	; select bank4/5
  8006  0654  0087               	movwf	7
  8007  0655  0020               	movlb	0	; select bank0
  8008  0656  0851               	movf	??_readGesture,w
  8009  0657  0081               	movwf	1
  8010                           
  8011                           ;APDS9960.c: 618:                         gesture_data_.d_data[gesture_data_.index] = fi
      +                          fo_data[i + 1];
  8012  0658  0859               	movf	readGesture@i,w
  8013  0659  3E01               	addlw	1
  8014  065A  3E20               	addlw	(low (readGesture@fifo_data| (0+256)))& (0+255)
  8015  065B  0086               	movwf	6
  8016  065C  3001               	movlw	1	; select bank2/3
  8017  065D  0087               	movwf	7
  8018  065E  0801               	movf	1,w
  8019  065F  00D1               	movwf	??_readGesture
  8020  0660  0024               	movlb	4	; select bank4
  8021  0661  0860               	movf	(_gesture_data_^(0+512)+64),w
  8022  0662  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  8023  0663  0086               	movwf	6
  8024  0664  3002               	movlw	2	; select bank4/5
  8025  0665  0087               	movwf	7
  8026  0666  0020               	movlb	0	; select bank0
  8027  0667  0851               	movf	??_readGesture,w
  8028  0668  0081               	movwf	1
  8029                           
  8030                           ;APDS9960.c: 620:                         gesture_data_.l_data[gesture_data_.index] = fi
      +                          fo_data[i + 2];
  8031  0669  0859               	movf	readGesture@i,w
  8032  066A  3E02               	addlw	2
  8033  066B  3E20               	addlw	(low (readGesture@fifo_data| (0+256)))& (0+255)
  8034  066C  0086               	movwf	6
  8035  066D  3001               	movlw	1	; select bank2/3
  8036  066E  0087               	movwf	7
  8037  066F  0801               	movf	1,w
  8038  0670  00D1               	movwf	??_readGesture
  8039  0671  0024               	movlb	4	; select bank4
  8040  0672  0860               	movf	(_gesture_data_^(0+512)+64),w
  8041  0673  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  8042  0674  0086               	movwf	6
  8043  0675  3002               	movlw	2	; select bank4/5
  8044  0676  0087               	movwf	7
  8045  0677  0020               	movlb	0	; select bank0
  8046  0678  0851               	movf	??_readGesture,w
  8047  0679  0081               	movwf	1
  8048                           
  8049                           ;APDS9960.c: 622:                         gesture_data_.r_data[gesture_data_.index] = fi
      +                          fo_data[i + 3];
  8050  067A  0859               	movf	readGesture@i,w
  8051  067B  3E03               	addlw	3
  8052  067C  3E20               	addlw	(low (readGesture@fifo_data| (0+256)))& (0+255)
  8053  067D  0086               	movwf	6
  8054  067E  3001               	movlw	1	; select bank2/3
  8055  067F  0087               	movwf	7
  8056  0680  0801               	movf	1,w
  8057  0681  00D1               	movwf	??_readGesture
  8058  0682  0024               	movlb	4	; select bank4
  8059  0683  0860               	movf	(_gesture_data_^(0+512)+64),w
  8060  0684  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  8061  0685  0086               	movwf	6
  8062  0686  3002               	movlw	2	; select bank4/5
  8063  0687  0087               	movwf	7
  8064  0688  0020               	movlb	0	; select bank0
  8065  0689  0851               	movf	??_readGesture,w
  8066  068A  0081               	movwf	1
  8067                           
  8068                           ;APDS9960.c: 624:                         gesture_data_.index++;
  8069  068B  3001               	movlw	1
  8070  068C  00D1               	movwf	??_readGesture
  8071  068D  0851               	movf	??_readGesture,w
  8072  068E  0024               	movlb	4	; select bank4
  8073  068F  07E0               	addwf	(_gesture_data_^(0+512)+64),f
  8074                           
  8075                           ;APDS9960.c: 625:                         gesture_data_.total_gestures++;
  8076  0690  3001               	movlw	1
  8077  0691  0020               	movlb	0	; select bank0
  8078  0692  00D1               	movwf	??_readGesture
  8079  0693  0851               	movf	??_readGesture,w
  8080  0694  0024               	movlb	4	; select bank4
  8081  0695  07E1               	addwf	(_gesture_data_^(0+512)+65),f
  8082                           
  8083                           ;APDS9960.c: 626:                     }
  8084  0696  3004               	movlw	4
  8085  0697  0020               	movlb	0	; select bank0
  8086  0698  07D9               	addwf	readGesture@i,f
  8087  0699  3000               	movlw	0
  8088  069A  3DDA               	addwfc	readGesture@i+1,f
  8089  069B  2E3B               	goto	l6430
  8090  069C                     l6432:	
  8091                           
  8092                           ;APDS9960.c: 629:                     if( processGestureData() )
  8093  069C  3180  206D  3185   	fcall	_processGestureData
  8094  069F  3A00               	xorlw	0
  8095  06A0  1903               	skipnz
  8096  06A1  2EA5               	goto	l6436
  8097                           
  8098                           ;APDS9960.c: 630:                     {;APDS9960.c: 632:                         if( dec
      +                          odeGesture() ) {
  8099  06A2  3183  233D  3185   	fcall	_decodeGesture
  8100  06A5                     l6436:	
  8101                           
  8102                           ;APDS9960.c: 638:                     gesture_data_.index = 0;
  8103  06A5  0024               	movlb	4	; select bank4
  8104  06A6  01E0               	clrf	(_gesture_data_^(0+512)+64)
  8105                           
  8106                           ;APDS9960.c: 639:                     gesture_data_.total_gestures = 0;
  8107  06A7  01E1               	clrf	(_gesture_data_^(0+512)+65)
  8108  06A8                     l6396:	
  8109                           
  8110                           ;APDS9960.c: 575:         _delay((unsigned long)((30)*(500000/4000.0)));
  8111  06A8  3005               	movlw	5
  8112  06A9  0020               	movlb	0	; select bank0
  8113  06AA  00D1               	movwf	??_readGesture
  8114  06AB  30DD               	movlw	221
  8115  06AC                     u6497:	
  8116  06AC  0B89               	decfsz	9,f
  8117  06AD  2EAC               	goto	u6497
  8118  06AE  0BD1               	decfsz	??_readGesture,f
  8119  06AF  2EAC               	goto	u6497
  8120  06B0  3200               	nop2
  8121                           
  8122                           ;APDS9960.c: 578:         gstatus = wireReadDataByte(0xAF);
  8123  06B1  30AF               	movlw	175
  8124  06B2  318A  22EE  3185   	fcall	_wireReadDataByte
  8125  06B5  0020               	movlb	0	; select bank0
  8126  06B6  00D1               	movwf	??_readGesture
  8127  06B7  0851               	movf	??_readGesture,w
  8128  06B8  00D5               	movwf	readGesture@gstatus
  8129                           
  8130                           ;APDS9960.c: 583:         if( (gstatus & 0b00000001) == 0b00000001 )
  8131  06B9  1855               	btfsc	readGesture@gstatus,0
  8132  06BA  2DF7               	goto	l6402
  8133                           
  8134                           ;APDS9960.c: 645:             _delay((unsigned long)((30)*(500000/4000.0)));
  8135  06BB  3005               	movlw	5
  8136  06BC  0020               	movlb	0	; select bank0
  8137  06BD  00D1               	movwf	??_readGesture
  8138  06BE  30DD               	movlw	221
  8139  06BF                     u6507:	
  8140  06BF  0B89               	decfsz	9,f
  8141  06C0  2EBF               	goto	u6507
  8142  06C1  0BD1               	decfsz	??_readGesture,f
  8143  06C2  2EBF               	goto	u6507
  8144  06C3  3200               	nop2
  8145                           
  8146                           ;APDS9960.c: 646:             decodeGesture();
  8147  06C4  3183  233D  3185   	fcall	_decodeGesture
  8148                           
  8149                           ;APDS9960.c: 647:             motion = gesture_motion_;
  8150  06C7  0022               	movlb	2	; select bank2
  8151  06C8  0869               	movf	(_gesture_motion_+1)^(0+256),w
  8152  06C9  0020               	movlb	0	; select bank0
  8153  06CA  00D4               	movwf	readGesture@motion+1
  8154  06CB  0022               	movlb	2	; select bank2
  8155  06CC  0868               	movf	_gesture_motion_^(0+256),w
  8156  06CD  0020               	movlb	0	; select bank0
  8157  06CE  00D3               	movwf	readGesture@motion
  8158                           
  8159                           ;APDS9960.c: 649:             resetGestureParameters();
  8160  06CF  318A  2218         	fcall	_resetGestureParameters
  8161                           
  8162                           ;APDS9960.c: 651:             return motion;
  8163  06D1  0020               	movlb	0	; select bank0
  8164  06D2  0854               	movf	readGesture@motion+1,w
  8165  06D3  00D0               	movwf	?_readGesture+1
  8166  06D4  0853               	movf	readGesture@motion,w
  8167  06D5  00CF               	movwf	?_readGesture
  8168  06D6  0008               	return
  8169  06D7                     __end_of_readGesture:	
  8170                           
  8171                           	psect	text17
  8172  0DB8                     __ptext17:	
  8173 ;; *************** function _wireReadDataBlock *****************
  8174 ;; Defined at:
  8175 ;;		line 847 in file "APDS9960.c"
  8176 ;; Parameters:    Size  Location     Type
  8177 ;;  reg             1    wreg     unsigned char 
  8178 ;;  val             2    6[BANK0 ] PTR unsigned char 
  8179 ;;		 -> readGesture@fifo_data2(64), readGesture@fifo_data(64), 
  8180 ;;  len             2    8[BANK0 ] unsigned int 
  8181 ;; Auto vars:     Size  Location     Type
  8182 ;;  reg             1   15[BANK0 ] unsigned char 
  8183 ;;  j               1   16[BANK0 ] unsigned char 
  8184 ;; Return value:  Size  Location     Type
  8185 ;;                  2    6[BANK0 ] int 
  8186 ;; Registers used:
  8187 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8188 ;; Tracked objects:
  8189 ;;		On entry : 0/0
  8190 ;;		On exit  : 0/0
  8191 ;;		Unchanged: 0/0
  8192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8193 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8194 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8195 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8196 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8197 ;;Total ram usage:       11 bytes
  8198 ;; Hardware stack levels used:    1
  8199 ;; Hardware stack levels required when called:    7
  8200 ;; This function calls:
  8201 ;;		_I2C_ReStart
  8202 ;;		_I2C_Read_Byte
  8203 ;;		_I2C_Send_NACK
  8204 ;;		_I2C_Start
  8205 ;;		_I2C_Stop
  8206 ;;		_I2C_Write_Byte
  8207 ;; This function is called by:
  8208 ;;		_readGesture
  8209 ;; This function uses a non-reentrant model
  8210 ;;
  8211                           
  8212                           
  8213                           ;psect for function _wireReadDataBlock
  8214  0DB8                     _wireReadDataBlock:	
  8215                           
  8216                           ;incstack = 0
  8217                           ; Regs used in _wireReadDataBlock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8218                           ;wireReadDataBlock@reg stored from wreg
  8219  0DB8  0020               	movlb	0	; select bank0
  8220  0DB9  00AF               	movwf	wireReadDataBlock@reg
  8221                           
  8222                           ;APDS9960.c: 851:     I2C_Start();
  8223  0DBA  3188  2099  318D   	fcall	_I2C_Start
  8224                           
  8225                           ;APDS9960.c: 852:     I2C_Write_Byte((0x39 << 1 )| 0x00);
  8226  0DBD  3072               	movlw	114
  8227  0DBE  318A  227A  318D   	fcall	_I2C_Write_Byte
  8228                           
  8229                           ;APDS9960.c: 854:     I2C_Write_Byte(reg);
  8230  0DC1  0020               	movlb	0	; select bank0
  8231  0DC2  082F               	movf	wireReadDataBlock@reg,w
  8232  0DC3  318A  227A  318D   	fcall	_I2C_Write_Byte
  8233                           
  8234                           ;APDS9960.c: 856:     for(j= 0; j < len ; j++)
  8235  0DC6  0020               	movlb	0	; select bank0
  8236  0DC7  01B0               	clrf	wireReadDataBlock@j
  8237  0DC8                     l5986:	
  8238  0DC8  0830               	movf	wireReadDataBlock@j,w
  8239  0DC9  00AA               	movwf	??_wireReadDataBlock
  8240  0DCA  01AB               	clrf	??_wireReadDataBlock+1
  8241  0DCB  0829               	movf	wireReadDataBlock@len+1,w
  8242  0DCC  022B               	subwf	??_wireReadDataBlock+1,w
  8243  0DCD  1D03               	skipz
  8244  0DCE  2DD1               	goto	u4755
  8245  0DCF  0828               	movf	wireReadDataBlock@len,w
  8246  0DD0  022A               	subwf	??_wireReadDataBlock,w
  8247  0DD1                     u4755:	
  8248  0DD1  1803               	btfsc	3,0
  8249  0DD2  2DF7               	goto	l5988
  8250                           
  8251                           ;APDS9960.c: 857:     {;APDS9960.c: 859:       I2C_ReStart();
  8252  0DD3  3188  208A  318D   	fcall	_I2C_ReStart
  8253                           
  8254                           ;APDS9960.c: 860:       I2C_Write_Byte((0x39 << 1) | 0x01);
  8255  0DD6  3073               	movlw	115
  8256  0DD7  318A  227A  318D   	fcall	_I2C_Write_Byte
  8257                           
  8258                           ;APDS9960.c: 861:       val[j]=I2C_Read_Byte();
  8259  0DDA  3189  215F  318D   	fcall	_I2C_Read_Byte
  8260  0DDD  0020               	movlb	0	; select bank0
  8261  0DDE  00AA               	movwf	??_wireReadDataBlock
  8262  0DDF  0830               	movf	wireReadDataBlock@j,w
  8263  0DE0  00AB               	movwf	??_wireReadDataBlock+1
  8264  0DE1  01AC               	clrf	??_wireReadDataBlock+2
  8265  0DE2  082B               	movf	??_wireReadDataBlock+1,w
  8266  0DE3  0726               	addwf	wireReadDataBlock@val,w
  8267  0DE4  00AD               	movwf	??_wireReadDataBlock+3
  8268  0DE5  082C               	movf	??_wireReadDataBlock+2,w
  8269  0DE6  3D27               	addwfc	wireReadDataBlock@val+1,w
  8270  0DE7  00AE               	movwf	??_wireReadDataBlock+4
  8271  0DE8  082D               	movf	??_wireReadDataBlock+3,w
  8272  0DE9  0086               	movwf	6
  8273  0DEA  082E               	movf	??_wireReadDataBlock+4,w
  8274  0DEB  0087               	movwf	7
  8275  0DEC  082A               	movf	??_wireReadDataBlock,w
  8276  0DED  0081               	movwf	1
  8277                           
  8278                           ;APDS9960.c: 862:       I2C_Send_NACK();
  8279  0DEE  3188  2093  318D   	fcall	_I2C_Send_NACK
  8280                           
  8281                           ;APDS9960.c: 864:     }
  8282  0DF1  3001               	movlw	1
  8283  0DF2  0020               	movlb	0	; select bank0
  8284  0DF3  00AA               	movwf	??_wireReadDataBlock
  8285  0DF4  082A               	movf	??_wireReadDataBlock,w
  8286  0DF5  07B0               	addwf	wireReadDataBlock@j,f
  8287  0DF6  2DC8               	goto	l5986
  8288  0DF7                     l5988:	
  8289                           
  8290                           ;APDS9960.c: 866:     I2C_Stop();
  8291  0DF7  3187  27FD         	fcall	_I2C_Stop
  8292                           
  8293                           ;APDS9960.c: 867:     return (int)j;
  8294  0DF9  0020               	movlb	0	; select bank0
  8295  0DFA  0830               	movf	wireReadDataBlock@j,w
  8296  0DFB  00AA               	movwf	??_wireReadDataBlock
  8297  0DFC  01AB               	clrf	??_wireReadDataBlock+1
  8298  0DFD  082A               	movf	??_wireReadDataBlock,w
  8299  0DFE  00A6               	movwf	?_wireReadDataBlock
  8300  0DFF  082B               	movf	??_wireReadDataBlock+1,w
  8301  0E00  00A7               	movwf	?_wireReadDataBlock+1
  8302  0E01  0008               	return
  8303  0E02                     __end_of_wireReadDataBlock:	
  8304                           
  8305                           	psect	text18
  8306  006D                     __ptext18:	
  8307 ;; *************** function _processGestureData *****************
  8308 ;; Defined at:
  8309 ;;		line 657 in file "APDS9960.c"
  8310 ;; Parameters:    Size  Location     Type
  8311 ;;		None
  8312 ;; Auto vars:     Size  Location     Type
  8313 ;;  i               2   45[BANK0 ] int 
  8314 ;;  lr_delta        2   43[BANK0 ] int 
  8315 ;;  ud_delta        2   41[BANK0 ] int 
  8316 ;;  lr_ratio_las    2   23[BANK0 ] int 
  8317 ;;  ud_ratio_las    2   21[BANK0 ] int 
  8318 ;;  lr_ratio_fir    2   19[BANK0 ] int 
  8319 ;;  ud_ratio_fir    2   17[BANK0 ] int 
  8320 ;;  r_first         1   40[BANK0 ] unsigned char 
  8321 ;;  l_first         1   39[BANK0 ] unsigned char 
  8322 ;;  d_first         1   38[BANK0 ] unsigned char 
  8323 ;;  u_first         1   37[BANK0 ] unsigned char 
  8324 ;;  r_last          1   36[BANK0 ] unsigned char 
  8325 ;;  l_last          1   35[BANK0 ] unsigned char 
  8326 ;;  d_last          1   34[BANK0 ] unsigned char 
  8327 ;;  u_last          1   33[BANK0 ] unsigned char 
  8328 ;; Return value:  Size  Location     Type
  8329 ;;                  1    wreg      _Bool 
  8330 ;; Registers used:
  8331 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8332 ;; Tracked objects:
  8333 ;;		On entry : 0/0
  8334 ;;		On exit  : 0/0
  8335 ;;		Unchanged: 0/0
  8336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8337 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8338 ;;      Locals:         0      30       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8339 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8340 ;;      Totals:         0      32       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8341 ;;Total ram usage:       32 bytes
  8342 ;; Hardware stack levels used:    1
  8343 ;; Hardware stack levels required when called:    6
  8344 ;; This function calls:
  8345 ;;		___awdiv
  8346 ;;		___wmul
  8347 ;; This function is called by:
  8348 ;;		_readGesture
  8349 ;; This function uses a non-reentrant model
  8350 ;;
  8351                           
  8352                           
  8353                           ;psect for function _processGestureData
  8354  006D                     _processGestureData:	
  8355                           
  8356                           ;APDS9960.c: 659:     uint8_t u_first = 0;
  8357                           
  8358                           ;incstack = 0
  8359                           ; Regs used in _processGestureData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8360  006D  0020               	movlb	0	; select bank0
  8361  006E  01C5               	clrf	processGestureData@u_first
  8362                           
  8363                           ;APDS9960.c: 660:     uint8_t d_first = 0;
  8364  006F  01C6               	clrf	processGestureData@d_first
  8365                           
  8366                           ;APDS9960.c: 661:     uint8_t l_first = 0;
  8367  0070  01C7               	clrf	processGestureData@l_first
  8368                           
  8369                           ;APDS9960.c: 662:     uint8_t r_first = 0;
  8370  0071  01C8               	clrf	processGestureData@r_first
  8371                           
  8372                           ;APDS9960.c: 663:     uint8_t u_last = 0;
  8373  0072  01C1               	clrf	processGestureData@u_last
  8374                           
  8375                           ;APDS9960.c: 664:     uint8_t d_last = 0;
  8376  0073  01C2               	clrf	processGestureData@d_last
  8377                           
  8378                           ;APDS9960.c: 665:     uint8_t l_last = 0;
  8379  0074  01C3               	clrf	processGestureData@l_last
  8380                           
  8381                           ;APDS9960.c: 666:     uint8_t r_last = 0;
  8382  0075  01C4               	clrf	processGestureData@r_last
  8383                           
  8384                           ;APDS9960.c: 667:     int ud_ratio_first;;APDS9960.c: 668:     int lr_ratio_first;;APDS9
      +                          960.c: 669:     int ud_ratio_last;;APDS9960.c: 670:     int lr_ratio_last;;APDS9960.c: 6
      +                          71:     int ud_delta;;APDS9960.c: 672:     int lr_delta;;APDS9960.c: 673:     int i;;APD
      +                          S9960.c: 676:     if( gesture_data_.total_gestures <= 4 ) {
  8385  0076  3005               	movlw	5
  8386  0077  0024               	movlb	4	; select bank4
  8387  0078  0261               	subwf	(_gesture_data_^(0+512)+65),w
  8388  0079  1803               	skipnc
  8389  007A  287D               	goto	l6002
  8390  007B                     l5998:	
  8391                           
  8392                           ;APDS9960.c: 677:         return 0;
  8393  007B  3000               	movlw	0
  8394  007C  0008               	return
  8395  007D                     l6002:	
  8396                           
  8397                           ;APDS9960.c: 681:     if( (gesture_data_.total_gestures <= 32) && (gesture_data_.total_g
      +                          estures > 0) ) {
  8398  007D  3021               	movlw	33
  8399  007E  0261               	subwf	(_gesture_data_^(0+512)+65),w
  8400  007F  1803               	skipnc
  8401  0080  2947               	goto	l6052
  8402  0081  0861               	movf	(_gesture_data_^(0+512)+65),w
  8403  0082  1903               	btfsc	3,2
  8404  0083  2947               	goto	l6052
  8405                           
  8406                           ;APDS9960.c: 682: ;APDS9960.c: 685:         for( i = 0; i < gesture_data_.total_gestures
      +                          ; i++ ) {
  8407  0084  0020               	movlb	0	; select bank0
  8408  0085  01CD               	clrf	processGestureData@i
  8409  0086  01CE               	clrf	processGestureData@i+1
  8410  0087  288C               	goto	l972
  8411  0088                     l6018:	
  8412                           ;APDS9960.c: 695:                 break;
  8413                           
  8414                           
  8415                           ;APDS9960.c: 697:         }
  8416  0088  3001               	movlw	1
  8417  0089  07CD               	addwf	processGestureData@i,f
  8418  008A  3000               	movlw	0
  8419  008B  3DCE               	addwfc	processGestureData@i+1,f
  8420  008C                     l972:	
  8421  008C  084E               	movf	processGestureData@i+1,w
  8422  008D  3A80               	xorlw	128
  8423  008E  00AF               	movwf	??_processGestureData
  8424  008F  3080               	movlw	128
  8425  0090  022F               	subwf	??_processGestureData,w
  8426  0091  1D03               	skipz
  8427  0092  2897               	goto	u4835
  8428  0093  0024               	movlb	4	; select bank4
  8429  0094  0861               	movf	(_gesture_data_^(0+512)+65),w
  8430  0095  0020               	movlb	0	; select bank0
  8431  0096  024D               	subwf	processGestureData@i,w
  8432  0097                     u4835:	
  8433  0097  1803               	btfsc	3,0
  8434  0098  28E2               	goto	l6020
  8435                           
  8436                           ;APDS9960.c: 686:             if( (gesture_data_.u_data[i] > 10) &&
  8437  0099  0020               	movlb	0	; select bank0
  8438  009A  084D               	movf	processGestureData@i,w
  8439  009B  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  8440  009C  0086               	movwf	6
  8441  009D  3002               	movlw	2	; select bank4/5
  8442  009E  0087               	movwf	7
  8443  009F  300B               	movlw	11
  8444  00A0  0201               	subwf	1,w
  8445  00A1  1C03               	skipc
  8446  00A2  2888               	goto	l6018
  8447  00A3  084D               	movf	processGestureData@i,w
  8448  00A4  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  8449  00A5  0086               	movwf	6
  8450  00A6  3002               	movlw	2	; select bank4/5
  8451  00A7  0087               	movwf	7
  8452  00A8  300B               	movlw	11
  8453  00A9  0201               	subwf	1,w
  8454  00AA  1C03               	skipc
  8455  00AB  2888               	goto	l6018
  8456  00AC  084D               	movf	processGestureData@i,w
  8457  00AD  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  8458  00AE  0086               	movwf	6
  8459  00AF  3002               	movlw	2	; select bank4/5
  8460  00B0  0087               	movwf	7
  8461  00B1  300B               	movlw	11
  8462  00B2  0201               	subwf	1,w
  8463  00B3  1C03               	skipc
  8464  00B4  2888               	goto	l6018
  8465  00B5  084D               	movf	processGestureData@i,w
  8466  00B6  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  8467  00B7  0086               	movwf	6
  8468  00B8  3002               	movlw	2	; select bank4/5
  8469  00B9  0087               	movwf	7
  8470  00BA  300B               	movlw	11
  8471  00BB  0201               	subwf	1,w
  8472  00BC  1C03               	skipc
  8473  00BD  2888               	goto	l6018
  8474                           
  8475                           ;APDS9960.c: 689:                 (gesture_data_.r_data[i] > 10) ) {;APDS9960.c: 691:   
      +                                        u_first = gesture_data_.u_data[i];
  8476  00BE  084D               	movf	processGestureData@i,w
  8477  00BF  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  8478  00C0  0086               	movwf	6
  8479  00C1  3002               	movlw	2	; select bank4/5
  8480  00C2  0087               	movwf	7
  8481  00C3  0801               	movf	1,w
  8482  00C4  00AF               	movwf	??_processGestureData
  8483  00C5  082F               	movf	??_processGestureData,w
  8484  00C6  00C5               	movwf	processGestureData@u_first
  8485                           
  8486                           ;APDS9960.c: 692:                 d_first = gesture_data_.d_data[i];
  8487  00C7  084D               	movf	processGestureData@i,w
  8488  00C8  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  8489  00C9  0086               	movwf	6
  8490  00CA  3002               	movlw	2	; select bank4/5
  8491  00CB  0087               	movwf	7
  8492  00CC  0801               	movf	1,w
  8493  00CD  00AF               	movwf	??_processGestureData
  8494  00CE  082F               	movf	??_processGestureData,w
  8495  00CF  00C6               	movwf	processGestureData@d_first
  8496                           
  8497                           ;APDS9960.c: 693:                 l_first = gesture_data_.l_data[i];
  8498  00D0  084D               	movf	processGestureData@i,w
  8499  00D1  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  8500  00D2  0086               	movwf	6
  8501  00D3  3002               	movlw	2	; select bank4/5
  8502  00D4  0087               	movwf	7
  8503  00D5  0801               	movf	1,w
  8504  00D6  00AF               	movwf	??_processGestureData
  8505  00D7  082F               	movf	??_processGestureData,w
  8506  00D8  00C7               	movwf	processGestureData@l_first
  8507                           
  8508                           ;APDS9960.c: 694:                 r_first = gesture_data_.r_data[i];
  8509  00D9  084D               	movf	processGestureData@i,w
  8510  00DA  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  8511  00DB  0086               	movwf	6
  8512  00DC  3002               	movlw	2	; select bank4/5
  8513  00DD  0087               	movwf	7
  8514  00DE  0801               	movf	1,w
  8515  00DF  00AF               	movwf	??_processGestureData
  8516  00E0  082F               	movf	??_processGestureData,w
  8517  00E1  00C8               	movwf	processGestureData@r_first
  8518  00E2                     l6020:	
  8519                           
  8520                           ;APDS9960.c: 700:         if( (u_first == 0) || (d_first == 0) || (l_first == 0) || (r_f
      +                          irst == 0) ) {
  8521  00E2  0020               	movlb	0	; select bank0
  8522  00E3  0845               	movf	processGestureData@u_first,w
  8523  00E4  1903               	btfsc	3,2
  8524  00E5  287B               	goto	l5998
  8525  00E6  0846               	movf	processGestureData@d_first,w
  8526  00E7  1903               	btfsc	3,2
  8527  00E8  287B               	goto	l5998
  8528  00E9  0847               	movf	processGestureData@l_first,w
  8529  00EA  1903               	btfsc	3,2
  8530  00EB  287B               	goto	l5998
  8531  00EC  0848               	movf	processGestureData@r_first,w
  8532  00ED  1903               	btfsc	3,2
  8533  00EE  287B               	goto	l5998
  8534                           
  8535                           ;APDS9960.c: 706:         for( i = gesture_data_.total_gestures - 1; i >= 0; i-- ) {
  8536  00EF  0024               	movlb	4	; select bank4
  8537  00F0  0861               	movf	(_gesture_data_^(0+512)+65),w
  8538  00F1  3EFF               	addlw	255
  8539  00F2  0020               	movlb	0	; select bank0
  8540  00F3  00CD               	movwf	processGestureData@i
  8541  00F4  30FF               	movlw	255
  8542  00F5  1803               	skipnc
  8543  00F6  3000               	movlw	0
  8544  00F7  00CE               	movwf	processGestureData@i+1
  8545                           
  8546                           ;APDS9960.c: 717:                 break;
  8547  00F8  28FD               	goto	l6034
  8548  00F9                     l6048:	
  8549                           
  8550                           ;APDS9960.c: 719:         }
  8551  00F9  30FF               	movlw	255
  8552  00FA  07CD               	addwf	processGestureData@i,f
  8553  00FB  30FF               	movlw	255
  8554  00FC  3DCE               	addwfc	processGestureData@i+1,f
  8555  00FD                     l6034:	
  8556  00FD  1BCE               	btfsc	processGestureData@i+1,7
  8557  00FE  2947               	goto	l6052
  8558                           
  8559                           ;APDS9960.c: 708:             if( (gesture_data_.u_data[i] > 10) &&
  8560  00FF  084D               	movf	processGestureData@i,w
  8561  0100  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  8562  0101  0086               	movwf	6
  8563  0102  3002               	movlw	2	; select bank4/5
  8564  0103  0087               	movwf	7
  8565  0104  300B               	movlw	11
  8566  0105  0201               	subwf	1,w
  8567  0106  1C03               	skipc
  8568  0107  28F9               	goto	l6048
  8569  0108  084D               	movf	processGestureData@i,w
  8570  0109  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  8571  010A  0086               	movwf	6
  8572  010B  3002               	movlw	2	; select bank4/5
  8573  010C  0087               	movwf	7
  8574  010D  300B               	movlw	11
  8575  010E  0201               	subwf	1,w
  8576  010F  1C03               	skipc
  8577  0110  28F9               	goto	l6048
  8578  0111  084D               	movf	processGestureData@i,w
  8579  0112  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  8580  0113  0086               	movwf	6
  8581  0114  3002               	movlw	2	; select bank4/5
  8582  0115  0087               	movwf	7
  8583  0116  300B               	movlw	11
  8584  0117  0201               	subwf	1,w
  8585  0118  1C03               	skipc
  8586  0119  28F9               	goto	l6048
  8587  011A  084D               	movf	processGestureData@i,w
  8588  011B  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  8589  011C  0086               	movwf	6
  8590  011D  3002               	movlw	2	; select bank4/5
  8591  011E  0087               	movwf	7
  8592  011F  300B               	movlw	11
  8593  0120  0201               	subwf	1,w
  8594  0121  1C03               	skipc
  8595  0122  28F9               	goto	l6048
  8596                           
  8597                           ;APDS9960.c: 711:                 (gesture_data_.r_data[i] > 10) ) {;APDS9960.c: 713:   
      +                                        u_last = gesture_data_.u_data[i];
  8598  0123  084D               	movf	processGestureData@i,w
  8599  0124  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  8600  0125  0086               	movwf	6
  8601  0126  3002               	movlw	2	; select bank4/5
  8602  0127  0087               	movwf	7
  8603  0128  0801               	movf	1,w
  8604  0129  00AF               	movwf	??_processGestureData
  8605  012A  082F               	movf	??_processGestureData,w
  8606  012B  00C1               	movwf	processGestureData@u_last
  8607                           
  8608                           ;APDS9960.c: 714:                 d_last = gesture_data_.d_data[i];
  8609  012C  084D               	movf	processGestureData@i,w
  8610  012D  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  8611  012E  0086               	movwf	6
  8612  012F  3002               	movlw	2	; select bank4/5
  8613  0130  0087               	movwf	7
  8614  0131  0801               	movf	1,w
  8615  0132  00AF               	movwf	??_processGestureData
  8616  0133  082F               	movf	??_processGestureData,w
  8617  0134  00C2               	movwf	processGestureData@d_last
  8618                           
  8619                           ;APDS9960.c: 715:                 l_last = gesture_data_.l_data[i];
  8620  0135  084D               	movf	processGestureData@i,w
  8621  0136  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  8622  0137  0086               	movwf	6
  8623  0138  3002               	movlw	2	; select bank4/5
  8624  0139  0087               	movwf	7
  8625  013A  0801               	movf	1,w
  8626  013B  00AF               	movwf	??_processGestureData
  8627  013C  082F               	movf	??_processGestureData,w
  8628  013D  00C3               	movwf	processGestureData@l_last
  8629                           
  8630                           ;APDS9960.c: 716:                 r_last = gesture_data_.r_data[i];
  8631  013E  084D               	movf	processGestureData@i,w
  8632  013F  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  8633  0140  0086               	movwf	6
  8634  0141  3002               	movlw	2	; select bank4/5
  8635  0142  0087               	movwf	7
  8636  0143  0801               	movf	1,w
  8637  0144  00AF               	movwf	??_processGestureData
  8638  0145  082F               	movf	??_processGestureData,w
  8639  0146  00C4               	movwf	processGestureData@r_last
  8640  0147                     l6052:	
  8641                           
  8642                           ;APDS9960.c: 723:     ud_ratio_first = ((u_first - d_first) * 100) / (u_first + d_first)
      +                          ;
  8643  0147  0020               	movlb	0	; select bank0
  8644  0148  0845               	movf	processGestureData@u_first,w
  8645  0149  0746               	addwf	processGestureData@d_first,w
  8646  014A  00A6               	movwf	___awdiv@divisor
  8647  014B  01A7               	clrf	___awdiv@divisor+1
  8648  014C  0DA7               	rlf	___awdiv@divisor+1,f
  8649  014D  0846               	movf	processGestureData@d_first,w
  8650  014E  0245               	subwf	processGestureData@u_first,w
  8651  014F  00A0               	movwf	___wmul@multiplier
  8652  0150  01A1               	clrf	___wmul@multiplier+1
  8653  0151  1C03               	skipc
  8654  0152  03A1               	decf	___wmul@multiplier+1,f
  8655  0153  3064               	movlw	100
  8656  0154  00A2               	movwf	___wmul@multiplicand
  8657  0155  3000               	movlw	0
  8658  0156  00A3               	movwf	___wmul@multiplicand+1
  8659  0157  318A  2296  3180   	fcall	___wmul
  8660  015A  0020               	movlb	0	; select bank0
  8661  015B  0821               	movf	?___wmul+1,w
  8662  015C  00A9               	movwf	___awdiv@dividend+1
  8663  015D  0820               	movf	?___wmul,w
  8664  015E  00A8               	movwf	___awdiv@dividend
  8665  015F  318E  26F0  3180   	fcall	___awdiv
  8666  0162  0020               	movlb	0	; select bank0
  8667  0163  0827               	movf	?___awdiv+1,w
  8668  0164  00B2               	movwf	processGestureData@ud_ratio_first+1
  8669  0165  0826               	movf	?___awdiv,w
  8670  0166  00B1               	movwf	processGestureData@ud_ratio_first
  8671                           
  8672                           ;APDS9960.c: 724:     lr_ratio_first = ((l_first - r_first) * 100) / (l_first + r_first)
      +                          ;
  8673  0167  0847               	movf	processGestureData@l_first,w
  8674  0168  0748               	addwf	processGestureData@r_first,w
  8675  0169  00A6               	movwf	___awdiv@divisor
  8676  016A  01A7               	clrf	___awdiv@divisor+1
  8677  016B  0DA7               	rlf	___awdiv@divisor+1,f
  8678  016C  0848               	movf	processGestureData@r_first,w
  8679  016D  0247               	subwf	processGestureData@l_first,w
  8680  016E  00A0               	movwf	___wmul@multiplier
  8681  016F  01A1               	clrf	___wmul@multiplier+1
  8682  0170  1C03               	skipc
  8683  0171  03A1               	decf	___wmul@multiplier+1,f
  8684  0172  3064               	movlw	100
  8685  0173  00A2               	movwf	___wmul@multiplicand
  8686  0174  3000               	movlw	0
  8687  0175  00A3               	movwf	___wmul@multiplicand+1
  8688  0176  318A  2296  3180   	fcall	___wmul
  8689  0179  0020               	movlb	0	; select bank0
  8690  017A  0821               	movf	?___wmul+1,w
  8691  017B  00A9               	movwf	___awdiv@dividend+1
  8692  017C  0820               	movf	?___wmul,w
  8693  017D  00A8               	movwf	___awdiv@dividend
  8694  017E  318E  26F0  3180   	fcall	___awdiv
  8695  0181  0020               	movlb	0	; select bank0
  8696  0182  0827               	movf	?___awdiv+1,w
  8697  0183  00B4               	movwf	processGestureData@lr_ratio_first+1
  8698  0184  0826               	movf	?___awdiv,w
  8699  0185  00B3               	movwf	processGestureData@lr_ratio_first
  8700                           
  8701                           ;APDS9960.c: 725:     ud_ratio_last = ((u_last - d_last) * 100) / (u_last + d_last);
  8702  0186  0841               	movf	processGestureData@u_last,w
  8703  0187  0742               	addwf	processGestureData@d_last,w
  8704  0188  00A6               	movwf	___awdiv@divisor
  8705  0189  01A7               	clrf	___awdiv@divisor+1
  8706  018A  0DA7               	rlf	___awdiv@divisor+1,f
  8707  018B  0842               	movf	processGestureData@d_last,w
  8708  018C  0241               	subwf	processGestureData@u_last,w
  8709  018D  00A0               	movwf	___wmul@multiplier
  8710  018E  01A1               	clrf	___wmul@multiplier+1
  8711  018F  1C03               	skipc
  8712  0190  03A1               	decf	___wmul@multiplier+1,f
  8713  0191  3064               	movlw	100
  8714  0192  00A2               	movwf	___wmul@multiplicand
  8715  0193  3000               	movlw	0
  8716  0194  00A3               	movwf	___wmul@multiplicand+1
  8717  0195  318A  2296  3180   	fcall	___wmul
  8718  0198  0020               	movlb	0	; select bank0
  8719  0199  0821               	movf	?___wmul+1,w
  8720  019A  00A9               	movwf	___awdiv@dividend+1
  8721  019B  0820               	movf	?___wmul,w
  8722  019C  00A8               	movwf	___awdiv@dividend
  8723  019D  318E  26F0  3180   	fcall	___awdiv
  8724  01A0  0020               	movlb	0	; select bank0
  8725  01A1  0827               	movf	?___awdiv+1,w
  8726  01A2  00B6               	movwf	processGestureData@ud_ratio_last+1
  8727  01A3  0826               	movf	?___awdiv,w
  8728  01A4  00B5               	movwf	processGestureData@ud_ratio_last
  8729                           
  8730                           ;APDS9960.c: 726:     lr_ratio_last = ((l_last - r_last) * 100) / (l_last + r_last);
  8731  01A5  0843               	movf	processGestureData@l_last,w
  8732  01A6  0744               	addwf	processGestureData@r_last,w
  8733  01A7  00A6               	movwf	___awdiv@divisor
  8734  01A8  01A7               	clrf	___awdiv@divisor+1
  8735  01A9  0DA7               	rlf	___awdiv@divisor+1,f
  8736  01AA  0844               	movf	processGestureData@r_last,w
  8737  01AB  0243               	subwf	processGestureData@l_last,w
  8738  01AC  00A0               	movwf	___wmul@multiplier
  8739  01AD  01A1               	clrf	___wmul@multiplier+1
  8740  01AE  1C03               	skipc
  8741  01AF  03A1               	decf	___wmul@multiplier+1,f
  8742  01B0  3064               	movlw	100
  8743  01B1  00A2               	movwf	___wmul@multiplicand
  8744  01B2  3000               	movlw	0
  8745  01B3  00A3               	movwf	___wmul@multiplicand+1
  8746  01B4  318A  2296  3180   	fcall	___wmul
  8747  01B7  0020               	movlb	0	; select bank0
  8748  01B8  0821               	movf	?___wmul+1,w
  8749  01B9  00A9               	movwf	___awdiv@dividend+1
  8750  01BA  0820               	movf	?___wmul,w
  8751  01BB  00A8               	movwf	___awdiv@dividend
  8752  01BC  318E  26F0  3180   	fcall	___awdiv
  8753  01BF  0020               	movlb	0	; select bank0
  8754  01C0  0827               	movf	?___awdiv+1,w
  8755  01C1  00B8               	movwf	processGestureData@lr_ratio_last+1
  8756  01C2  0826               	movf	?___awdiv,w
  8757  01C3  00B7               	movwf	processGestureData@lr_ratio_last
  8758                           
  8759                           ;APDS9960.c: 729:     ud_delta = ud_ratio_last - ud_ratio_first;
  8760  01C4  0831               	movf	processGestureData@ud_ratio_first,w
  8761  01C5  0235               	subwf	processGestureData@ud_ratio_last,w
  8762  01C6  00C9               	movwf	processGestureData@ud_delta
  8763  01C7  0832               	movf	processGestureData@ud_ratio_first+1,w
  8764  01C8  3B36               	subwfb	processGestureData@ud_ratio_last+1,w
  8765  01C9  00CA               	movwf	processGestureData@ud_delta+1
  8766                           
  8767                           ;APDS9960.c: 730:     lr_delta = lr_ratio_last - lr_ratio_first;
  8768  01CA  0833               	movf	processGestureData@lr_ratio_first,w
  8769  01CB  0237               	subwf	processGestureData@lr_ratio_last,w
  8770  01CC  00CB               	movwf	processGestureData@lr_delta
  8771  01CD  0834               	movf	processGestureData@lr_ratio_first+1,w
  8772  01CE  3B38               	subwfb	processGestureData@lr_ratio_last+1,w
  8773  01CF  00CC               	movwf	processGestureData@lr_delta+1
  8774                           
  8775                           ;APDS9960.c: 733:     gesture_ud_delta_ += ud_delta;
  8776  01D0  0849               	movf	processGestureData@ud_delta,w
  8777  01D1  07E7               	addwf	_gesture_ud_delta_,f
  8778  01D2  084A               	movf	processGestureData@ud_delta+1,w
  8779  01D3  3DE8               	addwfc	_gesture_ud_delta_+1,f
  8780                           
  8781                           ;APDS9960.c: 734:     gesture_lr_delta_ += lr_delta;
  8782  01D4  084B               	movf	processGestureData@lr_delta,w
  8783  01D5  07E5               	addwf	_gesture_lr_delta_,f
  8784  01D6  084C               	movf	processGestureData@lr_delta+1,w
  8785  01D7  3DE6               	addwfc	_gesture_lr_delta_+1,f
  8786                           
  8787                           ;APDS9960.c: 737:     if( gesture_ud_delta_ >= 50 ) {
  8788  01D8  0868               	movf	_gesture_ud_delta_+1,w
  8789  01D9  3A80               	xorlw	128
  8790  01DA  00AF               	movwf	??_processGestureData
  8791  01DB  3080               	movlw	128
  8792  01DC  022F               	subwf	??_processGestureData,w
  8793  01DD  1D03               	skipz
  8794  01DE  29E1               	goto	u4935
  8795  01DF  3032               	movlw	50
  8796  01E0  0267               	subwf	_gesture_ud_delta_,w
  8797  01E1                     u4935:	
  8798  01E1  1C03               	skipc
  8799  01E2  29E8               	goto	l6066
  8800                           
  8801                           ;APDS9960.c: 738:         gesture_ud_count_ = 1;
  8802  01E3  3001               	movlw	1
  8803  01E4  0020               	movlb	0	; select bank0
  8804  01E5  00E3               	movwf	_gesture_ud_count_
  8805  01E6  3000               	movlw	0
  8806  01E7  29F8               	goto	L2
  8807  01E8                     l6066:	
  8808                           ;APDS9960.c: 739:     } else if( gesture_ud_delta_ <= -50 ) {
  8809                           
  8810  01E8  0020               	movlb	0	; select bank0
  8811  01E9  0868               	movf	_gesture_ud_delta_+1,w
  8812  01EA  3A80               	xorlw	128
  8813  01EB  00AF               	movwf	??_processGestureData
  8814  01EC  307F               	movlw	127
  8815  01ED  022F               	subwf	??_processGestureData,w
  8816  01EE  1D03               	skipz
  8817  01EF  29F2               	goto	u4945
  8818  01F0  30CF               	movlw	207
  8819  01F1  0267               	subwf	_gesture_ud_delta_,w
  8820  01F2                     u4945:	
  8821  01F2  1803               	skipnc
  8822  01F3  29FA               	goto	l6070
  8823                           
  8824                           ;APDS9960.c: 740:         gesture_ud_count_ = -1;
  8825  01F4  30FF               	movlw	255
  8826  01F5  0020               	movlb	0	; select bank0
  8827  01F6  00E3               	movwf	_gesture_ud_count_
  8828  01F7  30FF               	movlw	255
  8829  01F8                     L2:	
  8830  01F8  00E4               	movwf	_gesture_ud_count_+1
  8831                           
  8832                           ;APDS9960.c: 741:     } else {
  8833  01F9  29FD               	goto	l6072
  8834  01FA                     l6070:	
  8835                           
  8836                           ;APDS9960.c: 742:         gesture_ud_count_ = 0;
  8837  01FA  0020               	movlb	0	; select bank0
  8838  01FB  01E3               	clrf	_gesture_ud_count_
  8839  01FC  01E4               	clrf	_gesture_ud_count_+1
  8840  01FD                     l6072:	
  8841                           
  8842                           ;APDS9960.c: 746:     if( gesture_lr_delta_ >= 50 ) {
  8843  01FD  0866               	movf	_gesture_lr_delta_+1,w
  8844  01FE  3A80               	xorlw	128
  8845  01FF  00AF               	movwf	??_processGestureData
  8846  0200  3080               	movlw	128
  8847  0201  022F               	subwf	??_processGestureData,w
  8848  0202  1D03               	skipz
  8849  0203  2A06               	goto	u4955
  8850  0204  3032               	movlw	50
  8851  0205  0265               	subwf	_gesture_lr_delta_,w
  8852  0206                     u4955:	
  8853  0206  1C03               	skipc
  8854  0207  2A0D               	goto	l6076
  8855                           
  8856                           ;APDS9960.c: 747:         gesture_lr_count_ = 1;
  8857  0208  3001               	movlw	1
  8858  0209  0020               	movlb	0	; select bank0
  8859  020A  00E1               	movwf	_gesture_lr_count_
  8860  020B  3000               	movlw	0
  8861  020C  2A1D               	goto	L3
  8862  020D                     l6076:	
  8863                           ;APDS9960.c: 748:     } else if( gesture_lr_delta_ <= -50 ) {
  8864                           
  8865  020D  0020               	movlb	0	; select bank0
  8866  020E  0866               	movf	_gesture_lr_delta_+1,w
  8867  020F  3A80               	xorlw	128
  8868  0210  00AF               	movwf	??_processGestureData
  8869  0211  307F               	movlw	127
  8870  0212  022F               	subwf	??_processGestureData,w
  8871  0213  1D03               	skipz
  8872  0214  2A17               	goto	u4965
  8873  0215  30CF               	movlw	207
  8874  0216  0265               	subwf	_gesture_lr_delta_,w
  8875  0217                     u4965:	
  8876  0217  1803               	skipnc
  8877  0218  2A1F               	goto	l6080
  8878                           
  8879                           ;APDS9960.c: 749:         gesture_lr_count_ = -1;
  8880  0219  30FF               	movlw	255
  8881  021A  0020               	movlb	0	; select bank0
  8882  021B  00E1               	movwf	_gesture_lr_count_
  8883  021C  30FF               	movlw	255
  8884  021D                     L3:	
  8885  021D  00E2               	movwf	_gesture_lr_count_+1
  8886                           
  8887                           ;APDS9960.c: 750:     } else {
  8888  021E  2A22               	goto	l6082
  8889  021F                     l6080:	
  8890                           
  8891                           ;APDS9960.c: 751:         gesture_lr_count_ = 0;
  8892  021F  0020               	movlb	0	; select bank0
  8893  0220  01E1               	clrf	_gesture_lr_count_
  8894  0221  01E2               	clrf	_gesture_lr_count_+1
  8895  0222                     l6082:	
  8896                           
  8897                           ;APDS9960.c: 755:     if( (gesture_ud_count_ == 0) && (gesture_lr_count_ == 0) ) {
  8898  0222  0863               	movf	_gesture_ud_count_,w
  8899  0223  0464               	iorwf	_gesture_ud_count_+1,w
  8900  0224  1D03               	btfss	3,2
  8901  0225  2ACA               	goto	l6126
  8902  0226  0861               	movf	_gesture_lr_count_,w
  8903  0227  0462               	iorwf	_gesture_lr_count_+1,w
  8904  0228  1D03               	btfss	3,2
  8905  0229  2ACA               	goto	l6126
  8906                           
  8907                           ;APDS9960.c: 756:         if( (((ud_delta) > 0 ? (ud_delta) : -(ud_delta)) < 20) && (((l
      +                          r_delta) > 0 ? (lr_delta) : -(lr_delta)) < 20) ) {
  8908  022A  084A               	movf	processGestureData@ud_delta+1,w
  8909  022B  3A80               	xorlw	128
  8910  022C  00AF               	movwf	??_processGestureData
  8911  022D  3080               	movlw	128
  8912  022E  022F               	subwf	??_processGestureData,w
  8913  022F  1D03               	skipz
  8914  0230  2A33               	goto	u4995
  8915  0231  3001               	movlw	1
  8916  0232  0249               	subwf	processGestureData@ud_delta,w
  8917  0233                     u4995:	
  8918  0233  1803               	skipnc
  8919  0234  2A42               	goto	l6090
  8920  0235  0020               	movlb	0	; select bank0
  8921  0236  0949               	comf	processGestureData@ud_delta,w
  8922  0237  00AF               	movwf	??_processGestureData
  8923  0238  094A               	comf	processGestureData@ud_delta+1,w
  8924  0239  00B0               	movwf	??_processGestureData+1
  8925  023A  0AAF               	incf	??_processGestureData,f
  8926  023B  1903               	skipnz
  8927  023C  0AB0               	incf	??_processGestureData+1,f
  8928  023D  082F               	movf	??_processGestureData,w
  8929  023E  00B9               	movwf	_processGestureData$1342
  8930  023F  0830               	movf	??_processGestureData+1,w
  8931  0240  00BA               	movwf	_processGestureData$1342+1
  8932  0241  2A47               	goto	l995
  8933  0242                     l6090:	
  8934  0242  0020               	movlb	0	; select bank0
  8935  0243  084A               	movf	processGestureData@ud_delta+1,w
  8936  0244  00BA               	movwf	_processGestureData$1342+1
  8937  0245  0849               	movf	processGestureData@ud_delta,w
  8938  0246  00B9               	movwf	_processGestureData$1342
  8939  0247                     l995:	
  8940  0247  083A               	movf	_processGestureData$1342+1,w
  8941  0248  3A80               	xorlw	128
  8942  0249  00AF               	movwf	??_processGestureData
  8943  024A  3080               	movlw	128
  8944  024B  022F               	subwf	??_processGestureData,w
  8945  024C  1D03               	skipz
  8946  024D  2A50               	goto	u5005
  8947  024E  3014               	movlw	20
  8948  024F  0239               	subwf	_processGestureData$1342,w
  8949  0250                     u5005:	
  8950  0250  1803               	skipnc
  8951  0251  287B               	goto	l5998
  8952  0252  0020               	movlb	0	; select bank0
  8953  0253  084C               	movf	processGestureData@lr_delta+1,w
  8954  0254  3A80               	xorlw	128
  8955  0255  00AF               	movwf	??_processGestureData
  8956  0256  3080               	movlw	128
  8957  0257  022F               	subwf	??_processGestureData,w
  8958  0258  1D03               	skipz
  8959  0259  2A5C               	goto	u5015
  8960  025A  3001               	movlw	1
  8961  025B  024B               	subwf	processGestureData@lr_delta,w
  8962  025C                     u5015:	
  8963  025C  1803               	skipnc
  8964  025D  2A6B               	goto	l6096
  8965  025E  0020               	movlb	0	; select bank0
  8966  025F  094B               	comf	processGestureData@lr_delta,w
  8967  0260  00AF               	movwf	??_processGestureData
  8968  0261  094C               	comf	processGestureData@lr_delta+1,w
  8969  0262  00B0               	movwf	??_processGestureData+1
  8970  0263  0AAF               	incf	??_processGestureData,f
  8971  0264  1903               	skipnz
  8972  0265  0AB0               	incf	??_processGestureData+1,f
  8973  0266  082F               	movf	??_processGestureData,w
  8974  0267  00BB               	movwf	_processGestureData$1343
  8975  0268  0830               	movf	??_processGestureData+1,w
  8976  0269  00BC               	movwf	_processGestureData$1343+1
  8977  026A  2A70               	goto	l999
  8978  026B                     l6096:	
  8979  026B  0020               	movlb	0	; select bank0
  8980  026C  084C               	movf	processGestureData@lr_delta+1,w
  8981  026D  00BC               	movwf	_processGestureData$1343+1
  8982  026E  084B               	movf	processGestureData@lr_delta,w
  8983  026F  00BB               	movwf	_processGestureData$1343
  8984  0270                     l999:	
  8985  0270  083C               	movf	_processGestureData$1343+1,w
  8986  0271  3A80               	xorlw	128
  8987  0272  00AF               	movwf	??_processGestureData
  8988  0273  3080               	movlw	128
  8989  0274  022F               	subwf	??_processGestureData,w
  8990  0275  1D03               	skipz
  8991  0276  2A79               	goto	u5025
  8992  0277  3014               	movlw	20
  8993  0278  023B               	subwf	_processGestureData$1343,w
  8994  0279                     u5025:	
  8995  0279  1803               	skipnc
  8996  027A  287B               	goto	l5998
  8997                           
  8998                           ;APDS9960.c: 757: ;APDS9960.c: 759:             if( (ud_delta == 0) && (lr_delta == 0) )
      +                           {
  8999  027B  0020               	movlb	0	; select bank0
  9000  027C  0849               	movf	processGestureData@ud_delta,w
  9001  027D  044A               	iorwf	processGestureData@ud_delta+1,w
  9002  027E  1D03               	btfss	3,2
  9003  027F  2A89               	goto	l6104
  9004  0280  084B               	movf	processGestureData@lr_delta,w
  9005  0281  044C               	iorwf	processGestureData@lr_delta+1,w
  9006  0282  1D03               	btfss	3,2
  9007  0283  2A89               	goto	l6104
  9008                           
  9009                           ;APDS9960.c: 760:                 gesture_near_count_++;
  9010  0284  3001               	movlw	1
  9011  0285  07DF               	addwf	_gesture_near_count_,f
  9012  0286  3000               	movlw	0
  9013  0287  3DE0               	addwfc	_gesture_near_count_+1,f
  9014                           
  9015                           ;APDS9960.c: 761:             } else if( (ud_delta != 0) || (lr_delta != 0) ) {
  9016  0288  2A96               	goto	l1001
  9017  0289                     l6104:	
  9018  0289  0849               	movf	processGestureData@ud_delta,w
  9019  028A  044A               	iorwf	processGestureData@ud_delta+1,w
  9020  028B  1D03               	btfss	3,2
  9021  028C  2A91               	goto	l6108
  9022  028D  084B               	movf	processGestureData@lr_delta,w
  9023  028E  044C               	iorwf	processGestureData@lr_delta+1,w
  9024  028F  1903               	btfsc	3,2
  9025  0290  2A96               	goto	l1001
  9026  0291                     l6108:	
  9027                           
  9028                           ;APDS9960.c: 762:                 gesture_far_count_++;
  9029  0291  3001               	movlw	1
  9030  0292  0021               	movlb	1	; select bank1
  9031  0293  07E9               	addwf	_gesture_far_count_^(0+128),f
  9032  0294  3000               	movlw	0
  9033  0295  3DEA               	addwfc	(_gesture_far_count_+1)^(0+128),f
  9034  0296                     l1001:	
  9035                           
  9036                           ;APDS9960.c: 765:             if( (gesture_near_count_ >= 10) && (gesture_far_count_ >= 
      +                          2) ) {
  9037  0296  0020               	movlb	0	; select bank0
  9038  0297  0860               	movf	_gesture_near_count_+1,w
  9039  0298  3A80               	xorlw	128
  9040  0299  00AF               	movwf	??_processGestureData
  9041  029A  3080               	movlw	128
  9042  029B  022F               	subwf	??_processGestureData,w
  9043  029C  1D03               	skipz
  9044  029D  2AA0               	goto	u5075
  9045  029E  300A               	movlw	10
  9046  029F  025F               	subwf	_gesture_near_count_,w
  9047  02A0                     u5075:	
  9048  02A0  1C03               	skipc
  9049  02A1  287B               	goto	l5998
  9050  02A2  0021               	movlb	1	; select bank1
  9051  02A3  086A               	movf	(_gesture_far_count_+1)^(0+128),w
  9052  02A4  3A80               	xorlw	128
  9053  02A5  0020               	movlb	0	; select bank0
  9054  02A6  00AF               	movwf	??_processGestureData
  9055  02A7  3080               	movlw	128
  9056  02A8  022F               	subwf	??_processGestureData,w
  9057  02A9  1D03               	skipz
  9058  02AA  2AAE               	goto	u5085
  9059  02AB  3002               	movlw	2
  9060  02AC  0021               	movlb	1	; select bank1
  9061  02AD  0269               	subwf	_gesture_far_count_^(0+128),w
  9062  02AE                     u5085:	
  9063  02AE  1C03               	skipc
  9064  02AF  287B               	goto	l5998
  9065                           
  9066                           ;APDS9960.c: 766:                 if( (ud_delta == 0) && (lr_delta == 0) ) {
  9067  02B0  0020               	movlb	0	; select bank0
  9068  02B1  0849               	movf	processGestureData@ud_delta,w
  9069  02B2  044A               	iorwf	processGestureData@ud_delta+1,w
  9070  02B3  1D03               	btfss	3,2
  9071  02B4  2ABB               	goto	l6118
  9072  02B5  084B               	movf	processGestureData@lr_delta,w
  9073  02B6  044C               	iorwf	processGestureData@lr_delta+1,w
  9074  02B7  1D03               	btfss	3,2
  9075  02B8  2ABB               	goto	l6118
  9076                           
  9077                           ;APDS9960.c: 767:                     gesture_state_ = NEAR_STATE;
  9078  02B9  3001               	movlw	1
  9079  02BA  2AC4               	goto	L4
  9080  02BB                     l6118:	
  9081                           ;APDS9960.c: 768:                 } else if( (ud_delta != 0) && (lr_delta != 0) ) {
  9082                           
  9083  02BB  0849               	movf	processGestureData@ud_delta,w
  9084  02BC  044A               	iorwf	processGestureData@ud_delta+1,w
  9085  02BD  1903               	btfsc	3,2
  9086  02BE  2AC8               	goto	l1007
  9087  02BF  084B               	movf	processGestureData@lr_delta,w
  9088  02C0  044C               	iorwf	processGestureData@lr_delta+1,w
  9089  02C1  1903               	btfsc	3,2
  9090  02C2  2AC8               	goto	l1007
  9091                           
  9092                           ;APDS9960.c: 769:                     gesture_state_ = FAR_STATE;
  9093  02C3  3002               	movlw	2
  9094  02C4                     L4:	
  9095  02C4  0021               	movlb	1	; select bank1
  9096  02C5  00E7               	movwf	_gesture_state_^(0+128)
  9097  02C6  3000               	movlw	0
  9098  02C7  00E8               	movwf	(_gesture_state_^(0+128)+1)
  9099  02C8                     l1007:	
  9100                           
  9101                           ;APDS9960.c: 771:                 return 1;
  9102  02C8  3001               	movlw	1
  9103  02C9  0008               	return
  9104  02CA                     l6126:	
  9105                           
  9106                           ;APDS9960.c: 775:         if( (((ud_delta) > 0 ? (ud_delta) : -(ud_delta)) < 20) && (((l
      +                          r_delta) > 0 ? (lr_delta) : -(lr_delta)) < 20) ) {
  9107  02CA  084A               	movf	processGestureData@ud_delta+1,w
  9108  02CB  3A80               	xorlw	128
  9109  02CC  00AF               	movwf	??_processGestureData
  9110  02CD  3080               	movlw	128
  9111  02CE  022F               	subwf	??_processGestureData,w
  9112  02CF  1D03               	skipz
  9113  02D0  2AD3               	goto	u5135
  9114  02D1  3001               	movlw	1
  9115  02D2  0249               	subwf	processGestureData@ud_delta,w
  9116  02D3                     u5135:	
  9117  02D3  1803               	skipnc
  9118  02D4  2AE2               	goto	l6130
  9119  02D5  0020               	movlb	0	; select bank0
  9120  02D6  0949               	comf	processGestureData@ud_delta,w
  9121  02D7  00AF               	movwf	??_processGestureData
  9122  02D8  094A               	comf	processGestureData@ud_delta+1,w
  9123  02D9  00B0               	movwf	??_processGestureData+1
  9124  02DA  0AAF               	incf	??_processGestureData,f
  9125  02DB  1903               	skipnz
  9126  02DC  0AB0               	incf	??_processGestureData+1,f
  9127  02DD  082F               	movf	??_processGestureData,w
  9128  02DE  00BD               	movwf	_processGestureData$1344
  9129  02DF  0830               	movf	??_processGestureData+1,w
  9130  02E0  00BE               	movwf	_processGestureData$1344+1
  9131  02E1  2AE7               	goto	l1014
  9132  02E2                     l6130:	
  9133  02E2  0020               	movlb	0	; select bank0
  9134  02E3  084A               	movf	processGestureData@ud_delta+1,w
  9135  02E4  00BE               	movwf	_processGestureData$1344+1
  9136  02E5  0849               	movf	processGestureData@ud_delta,w
  9137  02E6  00BD               	movwf	_processGestureData$1344
  9138  02E7                     l1014:	
  9139  02E7  083E               	movf	_processGestureData$1344+1,w
  9140  02E8  3A80               	xorlw	128
  9141  02E9  00AF               	movwf	??_processGestureData
  9142  02EA  3080               	movlw	128
  9143  02EB  022F               	subwf	??_processGestureData,w
  9144  02EC  1D03               	skipz
  9145  02ED  2AF0               	goto	u5145
  9146  02EE  3014               	movlw	20
  9147  02EF  023D               	subwf	_processGestureData$1344,w
  9148  02F0                     u5145:	
  9149  02F0  1803               	skipnc
  9150  02F1  287B               	goto	l5998
  9151  02F2  0020               	movlb	0	; select bank0
  9152  02F3  084C               	movf	processGestureData@lr_delta+1,w
  9153  02F4  3A80               	xorlw	128
  9154  02F5  00AF               	movwf	??_processGestureData
  9155  02F6  3080               	movlw	128
  9156  02F7  022F               	subwf	??_processGestureData,w
  9157  02F8  1D03               	skipz
  9158  02F9  2AFC               	goto	u5155
  9159  02FA  3001               	movlw	1
  9160  02FB  024B               	subwf	processGestureData@lr_delta,w
  9161  02FC                     u5155:	
  9162  02FC  1803               	skipnc
  9163  02FD  2B0B               	goto	l6136
  9164  02FE  0020               	movlb	0	; select bank0
  9165  02FF  094B               	comf	processGestureData@lr_delta,w
  9166  0300  00AF               	movwf	??_processGestureData
  9167  0301  094C               	comf	processGestureData@lr_delta+1,w
  9168  0302  00B0               	movwf	??_processGestureData+1
  9169  0303  0AAF               	incf	??_processGestureData,f
  9170  0304  1903               	skipnz
  9171  0305  0AB0               	incf	??_processGestureData+1,f
  9172  0306  082F               	movf	??_processGestureData,w
  9173  0307  00BF               	movwf	_processGestureData$1345
  9174  0308  0830               	movf	??_processGestureData+1,w
  9175  0309  00C0               	movwf	_processGestureData$1345+1
  9176  030A  2B10               	goto	l1018
  9177  030B                     l6136:	
  9178  030B  0020               	movlb	0	; select bank0
  9179  030C  084C               	movf	processGestureData@lr_delta+1,w
  9180  030D  00C0               	movwf	_processGestureData$1345+1
  9181  030E  084B               	movf	processGestureData@lr_delta,w
  9182  030F  00BF               	movwf	_processGestureData$1345
  9183  0310                     l1018:	
  9184  0310  0840               	movf	_processGestureData$1345+1,w
  9185  0311  3A80               	xorlw	128
  9186  0312  00AF               	movwf	??_processGestureData
  9187  0313  3080               	movlw	128
  9188  0314  022F               	subwf	??_processGestureData,w
  9189  0315  1D03               	skipz
  9190  0316  2B19               	goto	u5165
  9191  0317  3014               	movlw	20
  9192  0318  023F               	subwf	_processGestureData$1345,w
  9193  0319                     u5165:	
  9194  0319  1803               	skipnc
  9195  031A  287B               	goto	l5998
  9196                           
  9197                           ;APDS9960.c: 776: ;APDS9960.c: 778:             if( (ud_delta == 0) && (lr_delta == 0) )
      +                           {
  9198  031B  0020               	movlb	0	; select bank0
  9199  031C  0849               	movf	processGestureData@ud_delta,w
  9200  031D  044A               	iorwf	processGestureData@ud_delta+1,w
  9201  031E  1D03               	btfss	3,2
  9202  031F  2B28               	goto	l1019
  9203  0320  084B               	movf	processGestureData@lr_delta,w
  9204  0321  044C               	iorwf	processGestureData@lr_delta+1,w
  9205  0322  1D03               	btfss	3,2
  9206  0323  2B28               	goto	l1019
  9207                           
  9208                           ;APDS9960.c: 779:                 gesture_near_count_++;
  9209  0324  3001               	movlw	1
  9210  0325  07DF               	addwf	_gesture_near_count_,f
  9211  0326  3000               	movlw	0
  9212  0327  3DE0               	addwfc	_gesture_near_count_+1,f
  9213  0328                     l1019:	
  9214                           ;APDS9960.c: 780:             }
  9215                           
  9216                           
  9217                           ;APDS9960.c: 782:             if( gesture_near_count_ >= 10 ) {
  9218  0328  0860               	movf	_gesture_near_count_+1,w
  9219  0329  3A80               	xorlw	128
  9220  032A  00AF               	movwf	??_processGestureData
  9221  032B  3080               	movlw	128
  9222  032C  022F               	subwf	??_processGestureData,w
  9223  032D  1D03               	skipz
  9224  032E  2B31               	goto	u5195
  9225  032F  300A               	movlw	10
  9226  0330  025F               	subwf	_gesture_near_count_,w
  9227  0331                     u5195:	
  9228  0331  1C03               	skipc
  9229  0332  287B               	goto	l5998
  9230                           
  9231                           ;APDS9960.c: 783:                 gesture_ud_count_ = 0;
  9232  0333  0020               	movlb	0	; select bank0
  9233  0334  01E3               	clrf	_gesture_ud_count_
  9234  0335  01E4               	clrf	_gesture_ud_count_+1
  9235                           
  9236                           ;APDS9960.c: 784:                 gesture_lr_count_ = 0;
  9237  0336  01E1               	clrf	_gesture_lr_count_
  9238  0337  01E2               	clrf	_gesture_lr_count_+1
  9239                           
  9240                           ;APDS9960.c: 785:                 gesture_ud_delta_ = 0;
  9241  0338  01E7               	clrf	_gesture_ud_delta_
  9242  0339  01E8               	clrf	_gesture_ud_delta_+1
  9243                           
  9244                           ;APDS9960.c: 786:                 gesture_lr_delta_ = 0;
  9245  033A  01E5               	clrf	_gesture_lr_delta_
  9246  033B  01E6               	clrf	_gesture_lr_delta_+1
  9247  033C  287B               	goto	l5998
  9248  033D                     __end_of_processGestureData:	
  9249                           
  9250                           	psect	text19
  9251  0A96                     __ptext19:	
  9252 ;; *************** function ___wmul *****************
  9253 ;; Defined at:
  9254 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
  9255 ;; Parameters:    Size  Location     Type
  9256 ;;  multiplier      2    0[BANK0 ] unsigned int 
  9257 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  9258 ;; Auto vars:     Size  Location     Type
  9259 ;;  product         2    4[BANK0 ] unsigned int 
  9260 ;; Return value:  Size  Location     Type
  9261 ;;                  2    0[BANK0 ] unsigned int 
  9262 ;; Registers used:
  9263 ;;		wreg, status,2, status,0
  9264 ;; Tracked objects:
  9265 ;;		On entry : 0/0
  9266 ;;		On exit  : 0/0
  9267 ;;		Unchanged: 0/0
  9268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9269 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9270 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9271 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9272 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9273 ;;Total ram usage:        6 bytes
  9274 ;; Hardware stack levels used:    1
  9275 ;; Hardware stack levels required when called:    5
  9276 ;; This function calls:
  9277 ;;		Nothing
  9278 ;; This function is called by:
  9279 ;;		_processGestureData
  9280 ;; This function uses a non-reentrant model
  9281 ;;
  9282                           
  9283                           
  9284                           ;psect for function ___wmul
  9285  0A96                     ___wmul:	
  9286                           
  9287                           ;incstack = 0
  9288                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  9289  0A96  0020               	movlb	0	; select bank0
  9290  0A97  01A4               	clrf	___wmul@product
  9291  0A98  01A5               	clrf	___wmul@product+1
  9292  0A99                     l5836:	
  9293  0A99  1C20               	btfss	___wmul@multiplier,0
  9294  0A9A  2A9F               	goto	l1398
  9295  0A9B  0822               	movf	___wmul@multiplicand,w
  9296  0A9C  07A4               	addwf	___wmul@product,f
  9297  0A9D  0823               	movf	___wmul@multiplicand+1,w
  9298  0A9E  3DA5               	addwfc	___wmul@product+1,f
  9299  0A9F                     l1398:	
  9300  0A9F  3001               	movlw	1
  9301  0AA0                     u4525:	
  9302  0AA0  35A2               	lslf	___wmul@multiplicand,f
  9303  0AA1  0DA3               	rlf	___wmul@multiplicand+1,f
  9304  0AA2  0B89               	decfsz	9,f
  9305  0AA3  2AA0               	goto	u4525
  9306  0AA4  3001               	movlw	1
  9307  0AA5                     u4535:	
  9308  0AA5  36A1               	lsrf	___wmul@multiplier+1,f
  9309  0AA6  0CA0               	rrf	___wmul@multiplier,f
  9310  0AA7  0B89               	decfsz	9,f
  9311  0AA8  2AA5               	goto	u4535
  9312  0AA9  0820               	movf	___wmul@multiplier,w
  9313  0AAA  0421               	iorwf	___wmul@multiplier+1,w
  9314  0AAB  1D03               	btfss	3,2
  9315  0AAC  2A99               	goto	l5836
  9316  0AAD  0825               	movf	___wmul@product+1,w
  9317  0AAE  00A1               	movwf	?___wmul+1
  9318  0AAF  0824               	movf	___wmul@product,w
  9319  0AB0  00A0               	movwf	?___wmul
  9320  0AB1  0008               	return
  9321  0AB2                     __end_of___wmul:	
  9322                           
  9323                           	psect	text20
  9324  0EF0                     __ptext20:	
  9325 ;; *************** function ___awdiv *****************
  9326 ;; Defined at:
  9327 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awdiv.c"
  9328 ;; Parameters:    Size  Location     Type
  9329 ;;  divisor         2    6[BANK0 ] int 
  9330 ;;  dividend        2    8[BANK0 ] int 
  9331 ;; Auto vars:     Size  Location     Type
  9332 ;;  quotient        2   13[BANK0 ] int 
  9333 ;;  sign            1   12[BANK0 ] unsigned char 
  9334 ;;  counter         1   11[BANK0 ] unsigned char 
  9335 ;; Return value:  Size  Location     Type
  9336 ;;                  2    6[BANK0 ] int 
  9337 ;; Registers used:
  9338 ;;		wreg, status,2, status,0
  9339 ;; Tracked objects:
  9340 ;;		On entry : 0/0
  9341 ;;		On exit  : 0/0
  9342 ;;		Unchanged: 0/0
  9343 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9344 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9345 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9346 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9347 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9348 ;;Total ram usage:        9 bytes
  9349 ;; Hardware stack levels used:    1
  9350 ;; Hardware stack levels required when called:    5
  9351 ;; This function calls:
  9352 ;;		Nothing
  9353 ;; This function is called by:
  9354 ;;		_processGestureData
  9355 ;; This function uses a non-reentrant model
  9356 ;;
  9357                           
  9358                           
  9359                           ;psect for function ___awdiv
  9360  0EF0                     ___awdiv:	
  9361                           
  9362                           ;incstack = 0
  9363                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  9364  0EF0  0020               	movlb	0	; select bank0
  9365  0EF1  01AC               	clrf	___awdiv@sign
  9366  0EF2  1FA7               	btfss	___awdiv@divisor+1,7
  9367  0EF3  2EFB               	goto	l5856
  9368  0EF4  09A6               	comf	___awdiv@divisor,f
  9369  0EF5  09A7               	comf	___awdiv@divisor+1,f
  9370  0EF6  0AA6               	incf	___awdiv@divisor,f
  9371  0EF7  1903               	skipnz
  9372  0EF8  0AA7               	incf	___awdiv@divisor+1,f
  9373  0EF9  01AC               	clrf	___awdiv@sign
  9374  0EFA  0AAC               	incf	___awdiv@sign,f
  9375  0EFB                     l5856:	
  9376  0EFB  1FA9               	btfss	___awdiv@dividend+1,7
  9377  0EFC  2F06               	goto	l5862
  9378  0EFD  09A8               	comf	___awdiv@dividend,f
  9379  0EFE  09A9               	comf	___awdiv@dividend+1,f
  9380  0EFF  0AA8               	incf	___awdiv@dividend,f
  9381  0F00  1903               	skipnz
  9382  0F01  0AA9               	incf	___awdiv@dividend+1,f
  9383  0F02  3001               	movlw	1
  9384  0F03  00AA               	movwf	??___awdiv
  9385  0F04  082A               	movf	??___awdiv,w
  9386  0F05  06AC               	xorwf	___awdiv@sign,f
  9387  0F06                     l5862:	
  9388  0F06  01AD               	clrf	___awdiv@quotient
  9389  0F07  01AE               	clrf	___awdiv@quotient+1
  9390  0F08  0826               	movf	___awdiv@divisor,w
  9391  0F09  0427               	iorwf	___awdiv@divisor+1,w
  9392  0F0A  1903               	btfsc	3,2
  9393  0F0B  2F35               	goto	l5884
  9394  0F0C  01AB               	clrf	___awdiv@counter
  9395  0F0D  0AAB               	incf	___awdiv@counter,f
  9396  0F0E                     l5872:	
  9397  0F0E  1BA7               	btfsc	___awdiv@divisor+1,7
  9398  0F0F  2F1A               	goto	l5874
  9399  0F10  3001               	movlw	1
  9400  0F11                     u4585:	
  9401  0F11  35A6               	lslf	___awdiv@divisor,f
  9402  0F12  0DA7               	rlf	___awdiv@divisor+1,f
  9403  0F13  0B89               	decfsz	9,f
  9404  0F14  2F11               	goto	u4585
  9405  0F15  3001               	movlw	1
  9406  0F16  00AA               	movwf	??___awdiv
  9407  0F17  082A               	movf	??___awdiv,w
  9408  0F18  07AB               	addwf	___awdiv@counter,f
  9409  0F19  2F0E               	goto	l5872
  9410  0F1A                     l5874:	
  9411  0F1A  3001               	movlw	1
  9412  0F1B                     u4605:	
  9413  0F1B  35AD               	lslf	___awdiv@quotient,f
  9414  0F1C  0DAE               	rlf	___awdiv@quotient+1,f
  9415  0F1D  0B89               	decfsz	9,f
  9416  0F1E  2F1B               	goto	u4605
  9417  0F1F  0827               	movf	___awdiv@divisor+1,w
  9418  0F20  0229               	subwf	___awdiv@dividend+1,w
  9419  0F21  1D03               	skipz
  9420  0F22  2F25               	goto	u4615
  9421  0F23  0826               	movf	___awdiv@divisor,w
  9422  0F24  0228               	subwf	___awdiv@dividend,w
  9423  0F25                     u4615:	
  9424  0F25  1C03               	skipc
  9425  0F26  2F2C               	goto	l5880
  9426  0F27  0826               	movf	___awdiv@divisor,w
  9427  0F28  02A8               	subwf	___awdiv@dividend,f
  9428  0F29  0827               	movf	___awdiv@divisor+1,w
  9429  0F2A  3BA9               	subwfb	___awdiv@dividend+1,f
  9430  0F2B  142D               	bsf	___awdiv@quotient,0
  9431  0F2C                     l5880:	
  9432  0F2C  3001               	movlw	1
  9433  0F2D                     u4625:	
  9434  0F2D  36A7               	lsrf	___awdiv@divisor+1,f
  9435  0F2E  0CA6               	rrf	___awdiv@divisor,f
  9436  0F2F  0B89               	decfsz	9,f
  9437  0F30  2F2D               	goto	u4625
  9438  0F31  3001               	movlw	1
  9439  0F32  02AB               	subwf	___awdiv@counter,f
  9440  0F33  1D03               	btfss	3,2
  9441  0F34  2F1A               	goto	l5874
  9442  0F35                     l5884:	
  9443  0F35  082C               	movf	___awdiv@sign,w
  9444  0F36  1903               	btfsc	3,2
  9445  0F37  2F3D               	goto	l5888
  9446  0F38  09AD               	comf	___awdiv@quotient,f
  9447  0F39  09AE               	comf	___awdiv@quotient+1,f
  9448  0F3A  0AAD               	incf	___awdiv@quotient,f
  9449  0F3B  1903               	skipnz
  9450  0F3C  0AAE               	incf	___awdiv@quotient+1,f
  9451  0F3D                     l5888:	
  9452  0F3D  082E               	movf	___awdiv@quotient+1,w
  9453  0F3E  00A7               	movwf	?___awdiv+1
  9454  0F3F  082D               	movf	___awdiv@quotient,w
  9455  0F40  00A6               	movwf	?___awdiv
  9456  0F41  0008               	return
  9457  0F42                     __end_of___awdiv:	
  9458                           
  9459                           	psect	text21
  9460  09A4                     __ptext21:	
  9461 ;; *************** function _isGestureAvailable *****************
  9462 ;; Defined at:
  9463 ;;		line 537 in file "APDS9960.c"
  9464 ;; Parameters:    Size  Location     Type
  9465 ;;		None
  9466 ;; Auto vars:     Size  Location     Type
  9467 ;;  val             1   10[BANK0 ] unsigned char 
  9468 ;; Return value:  Size  Location     Type
  9469 ;;                  1    wreg      _Bool 
  9470 ;; Registers used:
  9471 ;;		wreg, status,2, status,0, pclath, cstack
  9472 ;; Tracked objects:
  9473 ;;		On entry : 0/0
  9474 ;;		On exit  : 0/0
  9475 ;;		Unchanged: 0/0
  9476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9477 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9478 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9479 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9480 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9481 ;;Total ram usage:        2 bytes
  9482 ;; Hardware stack levels used:    1
  9483 ;; Hardware stack levels required when called:    8
  9484 ;; This function calls:
  9485 ;;		_wireReadDataByte
  9486 ;; This function is called by:
  9487 ;;		_main
  9488 ;;		_readGesture
  9489 ;; This function uses a non-reentrant model
  9490 ;;
  9491                           
  9492                           
  9493                           ;psect for function _isGestureAvailable
  9494  09A4                     _isGestureAvailable:	
  9495                           
  9496                           ;APDS9960.c: 539:     uint8_t val;;APDS9960.c: 542:     val=wireReadDataByte(0xAF);
  9497                           
  9498                           ;incstack = 0
  9499                           ; Regs used in _isGestureAvailable: [wreg+status,2+status,0+pclath+cstack]
  9500  09A4  30AF               	movlw	175
  9501  09A5  318A  22EE  3189   	fcall	_wireReadDataByte
  9502  09A8  0020               	movlb	0	; select bank0
  9503  09A9  00A9               	movwf	??_isGestureAvailable
  9504  09AA  0829               	movf	??_isGestureAvailable,w
  9505  09AB  00AA               	movwf	isGestureAvailable@val
  9506                           
  9507                           ;APDS9960.c: 545:     val &= 0b00000001;
  9508  09AC  3001               	movlw	1
  9509  09AD  00A9               	movwf	??_isGestureAvailable
  9510  09AE  0829               	movf	??_isGestureAvailable,w
  9511  09AF  05AA               	andwf	isGestureAvailable@val,f
  9512                           
  9513                           ;APDS9960.c: 548:     if( val == 1) {
  9514  09B0  032A               	decf	isGestureAvailable@val,w
  9515  09B1  1D03               	btfss	3,2
  9516  09B2  29B5               	goto	l5904
  9517                           
  9518                           ;APDS9960.c: 549:         return 1;
  9519  09B3  3001               	movlw	1
  9520  09B4  0008               	return
  9521  09B5                     l5904:	
  9522                           
  9523                           ;APDS9960.c: 551:         return 0;
  9524  09B5  3000               	movlw	0
  9525  09B6  0008               	return
  9526  09B7                     __end_of_isGestureAvailable:	
  9527                           
  9528                           	psect	text22
  9529  033D                     __ptext22:	
  9530 ;; *************** function _decodeGesture *****************
  9531 ;; Defined at:
  9532 ;;		line 795 in file "APDS9960.c"
  9533 ;; Parameters:    Size  Location     Type
  9534 ;;		None
  9535 ;; Auto vars:     Size  Location     Type
  9536 ;;		None
  9537 ;; Return value:  Size  Location     Type
  9538 ;;                  1    wreg      _Bool 
  9539 ;; Registers used:
  9540 ;;		wreg, status,2, status,0
  9541 ;; Tracked objects:
  9542 ;;		On entry : 0/0
  9543 ;;		On exit  : 0/0
  9544 ;;		Unchanged: 0/0
  9545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9546 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9547 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9548 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9549 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9550 ;;Total ram usage:       18 bytes
  9551 ;; Hardware stack levels used:    1
  9552 ;; Hardware stack levels required when called:    5
  9553 ;; This function calls:
  9554 ;;		Nothing
  9555 ;; This function is called by:
  9556 ;;		_readGesture
  9557 ;; This function uses a non-reentrant model
  9558 ;;
  9559                           
  9560                           
  9561                           ;psect for function _decodeGesture
  9562  033D                     _decodeGesture:	
  9563                           
  9564                           ;APDS9960.c: 798:     if( gesture_state_ == NEAR_STATE ) {
  9565                           
  9566                           ;incstack = 0
  9567                           ; Regs used in _decodeGesture: [wreg+status,2+status,0]
  9568  033D  0021               	movlb	1	; select bank1
  9569  033E  0367               	decf	_gesture_state_^(0+128),w
  9570  033F  0468               	iorwf	(_gesture_state_+1)^(0+128),w
  9571  0340  1D03               	btfss	3,2
  9572  0341  2B49               	goto	l6158
  9573                           
  9574                           ;APDS9960.c: 799:         gesture_motion_ = DIR_NEAR;
  9575  0342  3005               	movlw	5
  9576  0343  0022               	movlb	2	; select bank2
  9577  0344  00E8               	movwf	_gesture_motion_^(0+256)
  9578  0345  3000               	movlw	0
  9579  0346  00E9               	movwf	(_gesture_motion_^(0+256)+1)
  9580                           
  9581                           ;APDS9960.c: 800:         return 1;
  9582  0347  3001               	movlw	1
  9583  0348  0008               	return
  9584  0349                     l6158:	
  9585  0349  3002               	movlw	2
  9586  034A  0667               	xorwf	_gesture_state_^(0+128),w
  9587  034B  0468               	iorwf	(_gesture_state_+1)^(0+128),w
  9588  034C  1D03               	btfss	3,2
  9589  034D  2B55               	goto	l6164
  9590                           
  9591                           ;APDS9960.c: 802:         gesture_motion_ = DIR_FAR;
  9592  034E  3006               	movlw	6
  9593  034F  0022               	movlb	2	; select bank2
  9594  0350  00E8               	movwf	_gesture_motion_^(0+256)
  9595  0351  3000               	movlw	0
  9596  0352  00E9               	movwf	(_gesture_motion_^(0+256)+1)
  9597                           
  9598                           ;APDS9960.c: 803:         return 1;
  9599  0353  3001               	movlw	1
  9600  0354  0008               	return
  9601  0355                     l6164:	
  9602                           
  9603                           ;APDS9960.c: 807:     if( (gesture_ud_count_ == -1) && (gesture_lr_count_ == 0) ) {
  9604  0355  0020               	movlb	0	; select bank0
  9605  0356  0A63               	incf	_gesture_ud_count_,w
  9606  0357  1D03               	skipz
  9607  0358  2B62               	goto	l6170
  9608  0359  0A64               	incf	_gesture_ud_count_+1,w
  9609  035A  1D03               	btfss	3,2
  9610  035B  2B62               	goto	l6170
  9611  035C  0861               	movf	_gesture_lr_count_,w
  9612  035D  0462               	iorwf	_gesture_lr_count_+1,w
  9613  035E  1D03               	btfss	3,2
  9614  035F  2B62               	goto	l6170
  9615  0360                     l6168:	
  9616                           
  9617                           ;APDS9960.c: 808:         gesture_motion_ = DIR_UP;
  9618  0360  3003               	movlw	3
  9619  0361  2B81               	goto	L7
  9620  0362                     l6170:	
  9621                           ;APDS9960.c: 809:     } else if( (gesture_ud_count_ == 1) && (gesture_lr_count_ == 0) ) 
      +                          {
  9622                           
  9623  0362  0363               	decf	_gesture_ud_count_,w
  9624  0363  0464               	iorwf	_gesture_ud_count_+1,w
  9625  0364  1D03               	btfss	3,2
  9626  0365  2B6C               	goto	l6176
  9627  0366  0861               	movf	_gesture_lr_count_,w
  9628  0367  0462               	iorwf	_gesture_lr_count_+1,w
  9629  0368  1D03               	btfss	3,2
  9630  0369  2B6C               	goto	l6176
  9631  036A                     l6174:	
  9632                           
  9633                           ;APDS9960.c: 810:         gesture_motion_ = DIR_DOWN;
  9634  036A  3004               	movlw	4
  9635  036B  2B81               	goto	L7
  9636  036C                     l6176:	
  9637                           ;APDS9960.c: 811:     } else if( (gesture_ud_count_ == 0) && (gesture_lr_count_ == 1) ) 
      +                          {
  9638                           
  9639  036C  0863               	movf	_gesture_ud_count_,w
  9640  036D  0464               	iorwf	_gesture_ud_count_+1,w
  9641  036E  1D03               	btfss	3,2
  9642  036F  2B76               	goto	l6182
  9643  0370  0361               	decf	_gesture_lr_count_,w
  9644  0371  0462               	iorwf	_gesture_lr_count_+1,w
  9645  0372  1D03               	btfss	3,2
  9646  0373  2B76               	goto	l6182
  9647  0374                     l6180:	
  9648                           
  9649                           ;APDS9960.c: 812:         gesture_motion_ = DIR_RIGHT;
  9650  0374  3002               	movlw	2
  9651  0375  2B81               	goto	L7
  9652  0376                     l6182:	
  9653                           ;APDS9960.c: 813:     } else if( (gesture_ud_count_ == 0) && (gesture_lr_count_ == -1) )
      +                           {
  9654                           
  9655  0376  0863               	movf	_gesture_ud_count_,w
  9656  0377  0464               	iorwf	_gesture_ud_count_+1,w
  9657  0378  1D03               	btfss	3,2
  9658  0379  2B86               	goto	l6188
  9659  037A  0A61               	incf	_gesture_lr_count_,w
  9660  037B  1D03               	skipz
  9661  037C  2B86               	goto	l6188
  9662  037D  0A62               	incf	_gesture_lr_count_+1,w
  9663  037E  1D03               	btfss	3,2
  9664  037F  2B86               	goto	l6188
  9665  0380                     l6186:	
  9666                           
  9667                           ;APDS9960.c: 814:         gesture_motion_ = DIR_LEFT;
  9668  0380  3001               	movlw	1
  9669  0381                     L7:	
  9670  0381  0022               	movlb	2	; select bank2
  9671  0382  00E8               	movwf	_gesture_motion_^(0+256)
  9672  0383  3000               	movlw	0
  9673  0384  00E9               	movwf	(_gesture_motion_^(0+256)+1)
  9674                           
  9675                           ;APDS9960.c: 815:     } else if( (gesture_ud_count_ == -1) && (gesture_lr_count_ == 1) )
      +                           {
  9676  0385  2CCC               	goto	l6264
  9677  0386                     l6188:	
  9678  0386  0A63               	incf	_gesture_ud_count_,w
  9679  0387  1D03               	skipz
  9680  0388  2BD7               	goto	l6206
  9681  0389  0A64               	incf	_gesture_ud_count_+1,w
  9682  038A  1D03               	btfss	3,2
  9683  038B  2BD7               	goto	l6206
  9684  038C  0361               	decf	_gesture_lr_count_,w
  9685  038D  0462               	iorwf	_gesture_lr_count_+1,w
  9686  038E  1D03               	btfss	3,2
  9687  038F  2BD7               	goto	l6206
  9688                           
  9689                           ;APDS9960.c: 816:         if( ((gesture_ud_delta_) > 0 ? (gesture_ud_delta_) : -(gesture
      +                          _ud_delta_)) > ((gesture_lr_delta_) > 0 ? (gesture_lr_delta_) : -(gesture_lr_delta_)) ) 
      +                          {
  9690  0390  0868               	movf	_gesture_ud_delta_+1,w
  9691  0391  3A80               	xorlw	128
  9692  0392  00A0               	movwf	??_decodeGesture
  9693  0393  3080               	movlw	128
  9694  0394  0220               	subwf	??_decodeGesture,w
  9695  0395  1D03               	skipz
  9696  0396  2B99               	goto	u5325
  9697  0397  3001               	movlw	1
  9698  0398  0267               	subwf	_gesture_ud_delta_,w
  9699  0399                     u5325:	
  9700  0399  1803               	skipnc
  9701  039A  2BA8               	goto	l6196
  9702  039B  0020               	movlb	0	; select bank0
  9703  039C  0967               	comf	_gesture_ud_delta_,w
  9704  039D  00A0               	movwf	??_decodeGesture
  9705  039E  0968               	comf	_gesture_ud_delta_+1,w
  9706  039F  00A1               	movwf	??_decodeGesture+1
  9707  03A0  0AA0               	incf	??_decodeGesture,f
  9708  03A1  1903               	skipnz
  9709  03A2  0AA1               	incf	??_decodeGesture+1,f
  9710  03A3  0820               	movf	??_decodeGesture,w
  9711  03A4  00A2               	movwf	_decodeGesture$1347
  9712  03A5  0821               	movf	??_decodeGesture+1,w
  9713  03A6  00A3               	movwf	_decodeGesture$1347+1
  9714  03A7  2BAD               	goto	l1040
  9715  03A8                     l6196:	
  9716  03A8  0020               	movlb	0	; select bank0
  9717  03A9  0868               	movf	_gesture_ud_delta_+1,w
  9718  03AA  00A3               	movwf	_decodeGesture$1347+1
  9719  03AB  0867               	movf	_gesture_ud_delta_,w
  9720  03AC  00A2               	movwf	_decodeGesture$1347
  9721  03AD                     l1040:	
  9722  03AD  0866               	movf	_gesture_lr_delta_+1,w
  9723  03AE  3A80               	xorlw	128
  9724  03AF  00A0               	movwf	??_decodeGesture
  9725  03B0  3080               	movlw	128
  9726  03B1  0220               	subwf	??_decodeGesture,w
  9727  03B2  1D03               	skipz
  9728  03B3  2BB6               	goto	u5335
  9729  03B4  3001               	movlw	1
  9730  03B5  0265               	subwf	_gesture_lr_delta_,w
  9731  03B6                     u5335:	
  9732  03B6  1803               	skipnc
  9733  03B7  2BC5               	goto	l6200
  9734  03B8  0020               	movlb	0	; select bank0
  9735  03B9  0965               	comf	_gesture_lr_delta_,w
  9736  03BA  00A0               	movwf	??_decodeGesture
  9737  03BB  0966               	comf	_gesture_lr_delta_+1,w
  9738  03BC  00A1               	movwf	??_decodeGesture+1
  9739  03BD  0AA0               	incf	??_decodeGesture,f
  9740  03BE  1903               	skipnz
  9741  03BF  0AA1               	incf	??_decodeGesture+1,f
  9742  03C0  0820               	movf	??_decodeGesture,w
  9743  03C1  00A4               	movwf	_decodeGesture$1348
  9744  03C2  0821               	movf	??_decodeGesture+1,w
  9745  03C3  00A5               	movwf	_decodeGesture$1348+1
  9746  03C4  2BCA               	goto	l1044
  9747  03C5                     l6200:	
  9748  03C5  0020               	movlb	0	; select bank0
  9749  03C6  0866               	movf	_gesture_lr_delta_+1,w
  9750  03C7  00A5               	movwf	_decodeGesture$1348+1
  9751  03C8  0865               	movf	_gesture_lr_delta_,w
  9752  03C9  00A4               	movwf	_decodeGesture$1348
  9753  03CA                     l1044:	
  9754  03CA  0825               	movf	_decodeGesture$1348+1,w
  9755  03CB  3A80               	xorlw	128
  9756  03CC  00A0               	movwf	??_decodeGesture
  9757  03CD  0823               	movf	_decodeGesture$1347+1,w
  9758  03CE  3A80               	xorlw	128
  9759  03CF  0220               	subwf	??_decodeGesture,w
  9760  03D0  1D03               	skipz
  9761  03D1  2BD4               	goto	u5345
  9762  03D2  0822               	movf	_decodeGesture$1347,w
  9763  03D3  0224               	subwf	_decodeGesture$1348,w
  9764  03D4                     u5345:	
  9765  03D4  1C03               	btfss	3,0
  9766  03D5  2B60               	goto	l6168
  9767  03D6  2B74               	goto	l6180
  9768  03D7                     l6206:	
  9769  03D7  0363               	decf	_gesture_ud_count_,w
  9770  03D8  0464               	iorwf	_gesture_ud_count_+1,w
  9771  03D9  1D03               	btfss	3,2
  9772  03DA  2C28               	goto	l6224
  9773  03DB  0A61               	incf	_gesture_lr_count_,w
  9774  03DC  1D03               	skipz
  9775  03DD  2C28               	goto	l6224
  9776  03DE  0A62               	incf	_gesture_lr_count_+1,w
  9777  03DF  1D03               	btfss	3,2
  9778  03E0  2C28               	goto	l6224
  9779                           
  9780                           ;APDS9960.c: 822:         if( ((gesture_ud_delta_) > 0 ? (gesture_ud_delta_) : -(gesture
      +                          _ud_delta_)) > ((gesture_lr_delta_) > 0 ? (gesture_lr_delta_) : -(gesture_lr_delta_)) ) 
      +                          {
  9781  03E1  0868               	movf	_gesture_ud_delta_+1,w
  9782  03E2  3A80               	xorlw	128
  9783  03E3  00A0               	movwf	??_decodeGesture
  9784  03E4  3080               	movlw	128
  9785  03E5  0220               	subwf	??_decodeGesture,w
  9786  03E6  1D03               	skipz
  9787  03E7  2BEA               	goto	u5375
  9788  03E8  3001               	movlw	1
  9789  03E9  0267               	subwf	_gesture_ud_delta_,w
  9790  03EA                     u5375:	
  9791  03EA  1803               	skipnc
  9792  03EB  2BF9               	goto	l6214
  9793  03EC  0020               	movlb	0	; select bank0
  9794  03ED  0967               	comf	_gesture_ud_delta_,w
  9795  03EE  00A0               	movwf	??_decodeGesture
  9796  03EF  0968               	comf	_gesture_ud_delta_+1,w
  9797  03F0  00A1               	movwf	??_decodeGesture+1
  9798  03F1  0AA0               	incf	??_decodeGesture,f
  9799  03F2  1903               	skipnz
  9800  03F3  0AA1               	incf	??_decodeGesture+1,f
  9801  03F4  0820               	movf	??_decodeGesture,w
  9802  03F5  00A6               	movwf	_decodeGesture$1349
  9803  03F6  0821               	movf	??_decodeGesture+1,w
  9804  03F7  00A7               	movwf	_decodeGesture$1349+1
  9805  03F8  2BFE               	goto	l1052
  9806  03F9                     l6214:	
  9807  03F9  0020               	movlb	0	; select bank0
  9808  03FA  0868               	movf	_gesture_ud_delta_+1,w
  9809  03FB  00A7               	movwf	_decodeGesture$1349+1
  9810  03FC  0867               	movf	_gesture_ud_delta_,w
  9811  03FD  00A6               	movwf	_decodeGesture$1349
  9812  03FE                     l1052:	
  9813  03FE  0866               	movf	_gesture_lr_delta_+1,w
  9814  03FF  3A80               	xorlw	128
  9815  0400  00A0               	movwf	??_decodeGesture
  9816  0401  3080               	movlw	128
  9817  0402  0220               	subwf	??_decodeGesture,w
  9818  0403  1D03               	skipz
  9819  0404  2C07               	goto	u5385
  9820  0405  3001               	movlw	1
  9821  0406  0265               	subwf	_gesture_lr_delta_,w
  9822  0407                     u5385:	
  9823  0407  1803               	skipnc
  9824  0408  2C16               	goto	l6218
  9825  0409  0020               	movlb	0	; select bank0
  9826  040A  0965               	comf	_gesture_lr_delta_,w
  9827  040B  00A0               	movwf	??_decodeGesture
  9828  040C  0966               	comf	_gesture_lr_delta_+1,w
  9829  040D  00A1               	movwf	??_decodeGesture+1
  9830  040E  0AA0               	incf	??_decodeGesture,f
  9831  040F  1903               	skipnz
  9832  0410  0AA1               	incf	??_decodeGesture+1,f
  9833  0411  0820               	movf	??_decodeGesture,w
  9834  0412  00A8               	movwf	_decodeGesture$1350
  9835  0413  0821               	movf	??_decodeGesture+1,w
  9836  0414  00A9               	movwf	_decodeGesture$1350+1
  9837  0415  2C1B               	goto	l1056
  9838  0416                     l6218:	
  9839  0416  0020               	movlb	0	; select bank0
  9840  0417  0866               	movf	_gesture_lr_delta_+1,w
  9841  0418  00A9               	movwf	_decodeGesture$1350+1
  9842  0419  0865               	movf	_gesture_lr_delta_,w
  9843  041A  00A8               	movwf	_decodeGesture$1350
  9844  041B                     l1056:	
  9845  041B  0829               	movf	_decodeGesture$1350+1,w
  9846  041C  3A80               	xorlw	128
  9847  041D  00A0               	movwf	??_decodeGesture
  9848  041E  0827               	movf	_decodeGesture$1349+1,w
  9849  041F  3A80               	xorlw	128
  9850  0420  0220               	subwf	??_decodeGesture,w
  9851  0421  1D03               	skipz
  9852  0422  2C25               	goto	u5395
  9853  0423  0826               	movf	_decodeGesture$1349,w
  9854  0424  0228               	subwf	_decodeGesture$1350,w
  9855  0425                     u5395:	
  9856  0425  1C03               	btfss	3,0
  9857  0426  2B6A               	goto	l6174
  9858  0427  2B80               	goto	l6186
  9859  0428                     l6224:	
  9860  0428  0A63               	incf	_gesture_ud_count_,w
  9861  0429  1D03               	skipz
  9862  042A  2C7B               	goto	l6242
  9863  042B  0A64               	incf	_gesture_ud_count_+1,w
  9864  042C  1D03               	btfss	3,2
  9865  042D  2C7B               	goto	l6242
  9866  042E  0A61               	incf	_gesture_lr_count_,w
  9867  042F  1D03               	skipz
  9868  0430  2C7B               	goto	l6242
  9869  0431  0A62               	incf	_gesture_lr_count_+1,w
  9870  0432  1D03               	btfss	3,2
  9871  0433  2C7B               	goto	l6242
  9872                           
  9873                           ;APDS9960.c: 828:         if( ((gesture_ud_delta_) > 0 ? (gesture_ud_delta_) : -(gesture
      +                          _ud_delta_)) > ((gesture_lr_delta_) > 0 ? (gesture_lr_delta_) : -(gesture_lr_delta_)) ) 
      +                          {
  9874  0434  0868               	movf	_gesture_ud_delta_+1,w
  9875  0435  3A80               	xorlw	128
  9876  0436  00A0               	movwf	??_decodeGesture
  9877  0437  3080               	movlw	128
  9878  0438  0220               	subwf	??_decodeGesture,w
  9879  0439  1D03               	skipz
  9880  043A  2C3D               	goto	u5425
  9881  043B  3001               	movlw	1
  9882  043C  0267               	subwf	_gesture_ud_delta_,w
  9883  043D                     u5425:	
  9884  043D  1803               	skipnc
  9885  043E  2C4C               	goto	l6232
  9886  043F  0020               	movlb	0	; select bank0
  9887  0440  0967               	comf	_gesture_ud_delta_,w
  9888  0441  00A0               	movwf	??_decodeGesture
  9889  0442  0968               	comf	_gesture_ud_delta_+1,w
  9890  0443  00A1               	movwf	??_decodeGesture+1
  9891  0444  0AA0               	incf	??_decodeGesture,f
  9892  0445  1903               	skipnz
  9893  0446  0AA1               	incf	??_decodeGesture+1,f
  9894  0447  0820               	movf	??_decodeGesture,w
  9895  0448  00AA               	movwf	_decodeGesture$1351
  9896  0449  0821               	movf	??_decodeGesture+1,w
  9897  044A  00AB               	movwf	_decodeGesture$1351+1
  9898  044B  2C51               	goto	l1064
  9899  044C                     l6232:	
  9900  044C  0020               	movlb	0	; select bank0
  9901  044D  0868               	movf	_gesture_ud_delta_+1,w
  9902  044E  00AB               	movwf	_decodeGesture$1351+1
  9903  044F  0867               	movf	_gesture_ud_delta_,w
  9904  0450  00AA               	movwf	_decodeGesture$1351
  9905  0451                     l1064:	
  9906  0451  0866               	movf	_gesture_lr_delta_+1,w
  9907  0452  3A80               	xorlw	128
  9908  0453  00A0               	movwf	??_decodeGesture
  9909  0454  3080               	movlw	128
  9910  0455  0220               	subwf	??_decodeGesture,w
  9911  0456  1D03               	skipz
  9912  0457  2C5A               	goto	u5435
  9913  0458  3001               	movlw	1
  9914  0459  0265               	subwf	_gesture_lr_delta_,w
  9915  045A                     u5435:	
  9916  045A  1803               	skipnc
  9917  045B  2C69               	goto	l6236
  9918  045C  0020               	movlb	0	; select bank0
  9919  045D  0965               	comf	_gesture_lr_delta_,w
  9920  045E  00A0               	movwf	??_decodeGesture
  9921  045F  0966               	comf	_gesture_lr_delta_+1,w
  9922  0460  00A1               	movwf	??_decodeGesture+1
  9923  0461  0AA0               	incf	??_decodeGesture,f
  9924  0462  1903               	skipnz
  9925  0463  0AA1               	incf	??_decodeGesture+1,f
  9926  0464  0820               	movf	??_decodeGesture,w
  9927  0465  00AC               	movwf	_decodeGesture$1352
  9928  0466  0821               	movf	??_decodeGesture+1,w
  9929  0467  00AD               	movwf	_decodeGesture$1352+1
  9930  0468  2C6E               	goto	l1068
  9931  0469                     l6236:	
  9932  0469  0020               	movlb	0	; select bank0
  9933  046A  0866               	movf	_gesture_lr_delta_+1,w
  9934  046B  00AD               	movwf	_decodeGesture$1352+1
  9935  046C  0865               	movf	_gesture_lr_delta_,w
  9936  046D  00AC               	movwf	_decodeGesture$1352
  9937  046E                     l1068:	
  9938  046E  082D               	movf	_decodeGesture$1352+1,w
  9939  046F  3A80               	xorlw	128
  9940  0470  00A0               	movwf	??_decodeGesture
  9941  0471  082B               	movf	_decodeGesture$1351+1,w
  9942  0472  3A80               	xorlw	128
  9943  0473  0220               	subwf	??_decodeGesture,w
  9944  0474  1D03               	skipz
  9945  0475  2C78               	goto	u5445
  9946  0476  082A               	movf	_decodeGesture$1351,w
  9947  0477  022C               	subwf	_decodeGesture$1352,w
  9948  0478                     u5445:	
  9949  0478  1C03               	btfss	3,0
  9950  0479  2B60               	goto	l6168
  9951  047A  2B80               	goto	l6186
  9952  047B                     l6242:	
  9953  047B  0363               	decf	_gesture_ud_count_,w
  9954  047C  0464               	iorwf	_gesture_ud_count_+1,w
  9955  047D  1D03               	btfss	3,2
  9956  047E  2CCA               	goto	l6260
  9957  047F  0361               	decf	_gesture_lr_count_,w
  9958  0480  0462               	iorwf	_gesture_lr_count_+1,w
  9959  0481  1D03               	btfss	3,2
  9960  0482  2CCA               	goto	l6260
  9961                           
  9962                           ;APDS9960.c: 834:         if( ((gesture_ud_delta_) > 0 ? (gesture_ud_delta_) : -(gesture
      +                          _ud_delta_)) > ((gesture_lr_delta_) > 0 ? (gesture_lr_delta_) : -(gesture_lr_delta_)) ) 
      +                          {
  9963  0483  0868               	movf	_gesture_ud_delta_+1,w
  9964  0484  3A80               	xorlw	128
  9965  0485  00A0               	movwf	??_decodeGesture
  9966  0486  3080               	movlw	128
  9967  0487  0220               	subwf	??_decodeGesture,w
  9968  0488  1D03               	skipz
  9969  0489  2C8C               	goto	u5475
  9970  048A  3001               	movlw	1
  9971  048B  0267               	subwf	_gesture_ud_delta_,w
  9972  048C                     u5475:	
  9973  048C  1803               	skipnc
  9974  048D  2C9B               	goto	l6250
  9975  048E  0020               	movlb	0	; select bank0
  9976  048F  0967               	comf	_gesture_ud_delta_,w
  9977  0490  00A0               	movwf	??_decodeGesture
  9978  0491  0968               	comf	_gesture_ud_delta_+1,w
  9979  0492  00A1               	movwf	??_decodeGesture+1
  9980  0493  0AA0               	incf	??_decodeGesture,f
  9981  0494  1903               	skipnz
  9982  0495  0AA1               	incf	??_decodeGesture+1,f
  9983  0496  0820               	movf	??_decodeGesture,w
  9984  0497  00AE               	movwf	_decodeGesture$1353
  9985  0498  0821               	movf	??_decodeGesture+1,w
  9986  0499  00AF               	movwf	_decodeGesture$1353+1
  9987  049A  2CA0               	goto	l1076
  9988  049B                     l6250:	
  9989  049B  0020               	movlb	0	; select bank0
  9990  049C  0868               	movf	_gesture_ud_delta_+1,w
  9991  049D  00AF               	movwf	_decodeGesture$1353+1
  9992  049E  0867               	movf	_gesture_ud_delta_,w
  9993  049F  00AE               	movwf	_decodeGesture$1353
  9994  04A0                     l1076:	
  9995  04A0  0866               	movf	_gesture_lr_delta_+1,w
  9996  04A1  3A80               	xorlw	128
  9997  04A2  00A0               	movwf	??_decodeGesture
  9998  04A3  3080               	movlw	128
  9999  04A4  0220               	subwf	??_decodeGesture,w
 10000  04A5  1D03               	skipz
 10001  04A6  2CA9               	goto	u5485
 10002  04A7  3001               	movlw	1
 10003  04A8  0265               	subwf	_gesture_lr_delta_,w
 10004  04A9                     u5485:	
 10005  04A9  1803               	skipnc
 10006  04AA  2CB8               	goto	l6254
 10007  04AB  0020               	movlb	0	; select bank0
 10008  04AC  0965               	comf	_gesture_lr_delta_,w
 10009  04AD  00A0               	movwf	??_decodeGesture
 10010  04AE  0966               	comf	_gesture_lr_delta_+1,w
 10011  04AF  00A1               	movwf	??_decodeGesture+1
 10012  04B0  0AA0               	incf	??_decodeGesture,f
 10013  04B1  1903               	skipnz
 10014  04B2  0AA1               	incf	??_decodeGesture+1,f
 10015  04B3  0820               	movf	??_decodeGesture,w
 10016  04B4  00B0               	movwf	_decodeGesture$1354
 10017  04B5  0821               	movf	??_decodeGesture+1,w
 10018  04B6  00B1               	movwf	_decodeGesture$1354+1
 10019  04B7  2CBD               	goto	l1080
 10020  04B8                     l6254:	
 10021  04B8  0020               	movlb	0	; select bank0
 10022  04B9  0866               	movf	_gesture_lr_delta_+1,w
 10023  04BA  00B1               	movwf	_decodeGesture$1354+1
 10024  04BB  0865               	movf	_gesture_lr_delta_,w
 10025  04BC  00B0               	movwf	_decodeGesture$1354
 10026  04BD                     l1080:	
 10027  04BD  0831               	movf	_decodeGesture$1354+1,w
 10028  04BE  3A80               	xorlw	128
 10029  04BF  00A0               	movwf	??_decodeGesture
 10030  04C0  082F               	movf	_decodeGesture$1353+1,w
 10031  04C1  3A80               	xorlw	128
 10032  04C2  0220               	subwf	??_decodeGesture,w
 10033  04C3  1D03               	skipz
 10034  04C4  2CC7               	goto	u5495
 10035  04C5  082E               	movf	_decodeGesture$1353,w
 10036  04C6  0230               	subwf	_decodeGesture$1354,w
 10037  04C7                     u5495:	
 10038  04C7  1C03               	btfss	3,0
 10039  04C8  2B6A               	goto	l6174
 10040  04C9  2B74               	goto	l6180
 10041  04CA                     l6260:	
 10042                           
 10043                           ;APDS9960.c: 840:         return 0;
 10044  04CA  3000               	movlw	0
 10045  04CB  0008               	return
 10046  04CC                     l6264:	
 10047                           
 10048                           ;APDS9960.c: 843:     return 1;
 10049  04CC  3001               	movlw	1
 10050  04CD  0008               	return
 10051  04CE                     __end_of_decodeGesture:	
 10052                           
 10053                           	psect	text23
 10054  0F9C                     __ptext23:	
 10055 ;; *************** function _enableGestureSensor *****************
 10056 ;; Defined at:
 10057 ;;		line 409 in file "APDS9960.c"
 10058 ;; Parameters:    Size  Location     Type
 10059 ;;  interrupts      1    wreg     _Bool 
 10060 ;; Auto vars:     Size  Location     Type
 10061 ;;  interrupts      1   17[BANK0 ] _Bool 
 10062 ;; Return value:  Size  Location     Type
 10063 ;;                  1    wreg      _Bool 
 10064 ;; Registers used:
 10065 ;;		wreg, status,2, status,0, pclath, cstack
 10066 ;; Tracked objects:
 10067 ;;		On entry : 0/0
 10068 ;;		On exit  : 0/0
 10069 ;;		Unchanged: 0/0
 10070 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10071 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10072 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10073 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10074 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10075 ;;Total ram usage:        2 bytes
 10076 ;; Hardware stack levels used:    1
 10077 ;; Hardware stack levels required when called:   11
 10078 ;; This function calls:
 10079 ;;		_enablePower
 10080 ;;		_resetGestureParameters
 10081 ;;		_setGestureIntEnable
 10082 ;;		_setGestureMode
 10083 ;;		_setLEDBoost
 10084 ;;		_setMode
 10085 ;;		_wireWriteDataByte
 10086 ;; This function is called by:
 10087 ;;		_main
 10088 ;; This function uses a non-reentrant model
 10089 ;;
 10090                           
 10091                           
 10092                           ;psect for function _enableGestureSensor
 10093  0F9C                     _enableGestureSensor:	
 10094                           
 10095                           ;incstack = 0
 10096                           ; Regs used in _enableGestureSensor: [wreg+status,2+status,0+pclath+cstack]
 10097                           ;enableGestureSensor@interrupts stored from wreg
 10098  0F9C  0020               	movlb	0	; select bank0
 10099  0F9D  00B1               	movwf	enableGestureSensor@interrupts
 10100                           
 10101                           ;APDS9960.c: 409: _Bool enableGestureSensor ( _Bool interrupts);APDS9960.c: 410: {;APDS9
      +                          960.c: 418:     resetGestureParameters();
 10102  0F9E  318A  2218  318F   	fcall	_resetGestureParameters
 10103                           
 10104                           ;APDS9960.c: 419:     if( !wireWriteDataByte(0x83, 0xFF) ) {
 10105  0FA1  30FF               	movlw	255
 10106  0FA2  0020               	movlb	0	; select bank0
 10107  0FA3  00B0               	movwf	??_enableGestureSensor
 10108  0FA4  0830               	movf	??_enableGestureSensor,w
 10109  0FA5  00A6               	movwf	wireWriteDataByte@val
 10110  0FA6  3083               	movlw	131
 10111  0FA7  318A  225F  318F   	fcall	_wireWriteDataByte
 10112  0FAA  0020               	movlb	0	; select bank0
 10113  0FAB  0826               	movf	?_wireWriteDataByte,w
 10114  0FAC  0427               	iorwf	?_wireWriteDataByte+1,w
 10115  0FAD  1903               	btfsc	3,2
 10116  0FAE  2FB2               	goto	l6890
 10117  0FAF  2FB4               	goto	l6894
 10118  0FB0                     l6908:	
 10119                           
 10120                           ;APDS9960.c: 429:         if( !setGestureIntEnable(1) ) {
 10121  0FB0  3001               	movlw	1
 10122  0FB1  2FCD               	goto	L8
 10123  0FB2                     l6890:	
 10124                           
 10125                           ;APDS9960.c: 420:         return 0;
 10126  0FB2  3000               	movlw	0
 10127  0FB3  0008               	return
 10128  0FB4                     l6894:	
 10129                           
 10130                           ;APDS9960.c: 422:     if( !wireWriteDataByte(0x8E, 0x89) ) {
 10131  0FB4  3089               	movlw	137
 10132  0FB5  00B0               	movwf	??_enableGestureSensor
 10133  0FB6  0830               	movf	??_enableGestureSensor,w
 10134  0FB7  00A6               	movwf	wireWriteDataByte@val
 10135  0FB8  308E               	movlw	142
 10136  0FB9  318A  225F  318F   	fcall	_wireWriteDataByte
 10137  0FBC  0020               	movlb	0	; select bank0
 10138  0FBD  0826               	movf	?_wireWriteDataByte,w
 10139  0FBE  0427               	iorwf	?_wireWriteDataByte+1,w
 10140  0FBF  1903               	btfsc	3,2
 10141  0FC0  2FB2               	goto	l6890
 10142                           
 10143                           ;APDS9960.c: 425:     if( !setLEDBoost(3) ) {
 10144  0FC1  3003               	movlw	3
 10145  0FC2  318C  24AD  318F   	fcall	_setLEDBoost
 10146  0FC5  3A00               	xorlw	0
 10147  0FC6  1903               	btfsc	3,2
 10148  0FC7  2FB2               	goto	l6890
 10149                           
 10150                           ;APDS9960.c: 428:     if( interrupts ) {
 10151  0FC8  0020               	movlb	0	; select bank0
 10152  0FC9  0831               	movf	enableGestureSensor@interrupts,w
 10153  0FCA  1D03               	btfss	3,2
 10154  0FCB  2FB0               	goto	l6908
 10155                           
 10156                           ;APDS9960.c: 433:         if( !setGestureIntEnable(0) ) {
 10157  0FCC  3000               	movlw	0
 10158  0FCD                     L8:	
 10159  0FCD  318C  2451  318F   	fcall	_setGestureIntEnable
 10160  0FD0  3A00               	xorlw	0
 10161  0FD1  1903               	btfsc	3,2
 10162  0FD2  2FB2               	goto	l6890
 10163                           
 10164                           ;APDS9960.c: 437:     if( !setGestureMode(1) ) {
 10165  0FD3  3001               	movlw	1
 10166  0FD4  318B  2338  318F   	fcall	_setGestureMode
 10167  0FD7  3A00               	xorlw	0
 10168  0FD8  1903               	btfsc	3,2
 10169  0FD9  2FB2               	goto	l6890
 10170                           
 10171                           ;APDS9960.c: 440:     if( !enablePower() ){
 10172  0FDA  3189  2176  318F   	fcall	_enablePower
 10173  0FDD  3A00               	xorlw	0
 10174  0FDE  1903               	btfsc	3,2
 10175  0FDF  2FB2               	goto	l6890
 10176                           
 10177                           ;APDS9960.c: 443:     if( !setMode(3, 1) ) {
 10178  0FE0  0020               	movlb	0	; select bank0
 10179  0FE1  01AB               	clrf	setMode@enable
 10180  0FE2  0AAB               	incf	setMode@enable,f
 10181  0FE3  3003               	movlw	3
 10182  0FE4  318E  2651  318F   	fcall	_setMode
 10183  0FE7  3A00               	xorlw	0
 10184  0FE8  1903               	btfsc	3,2
 10185  0FE9  2FB2               	goto	l6890
 10186                           
 10187                           ;APDS9960.c: 446:     if( !setMode(2, 1) ) {
 10188  0FEA  0020               	movlb	0	; select bank0
 10189  0FEB  01AB               	clrf	setMode@enable
 10190  0FEC  0AAB               	incf	setMode@enable,f
 10191  0FED  3002               	movlw	2
 10192  0FEE  318E  2651  318F   	fcall	_setMode
 10193  0FF1  3A00               	xorlw	0
 10194  0FF2  1903               	btfsc	3,2
 10195  0FF3  2FB2               	goto	l6890
 10196                           
 10197                           ;APDS9960.c: 449:     if( !setMode(6, 1) ) {
 10198  0FF4  0020               	movlb	0	; select bank0
 10199  0FF5  01AB               	clrf	setMode@enable
 10200  0FF6  0AAB               	incf	setMode@enable,f
 10201  0FF7  3006               	movlw	6
 10202  0FF8  318E  2651  318F   	fcall	_setMode
 10203  0FFB  3A00               	xorlw	0
 10204  0FFC  1903               	btfsc	3,2
 10205  0FFD  2FB2               	goto	l6890
 10206                           
 10207                           ;APDS9960.c: 453:     return 1;
 10208  0FFE  3001               	movlw	1
 10209  0FFF  0008               	return
 10210  1000                     __end_of_enableGestureSensor:	
 10211                           
 10212                           	psect	text24
 10213  0CAD                     __ptext24:	
 10214 ;; *************** function _setLEDBoost *****************
 10215 ;; Defined at:
 10216 ;;		line 484 in file "APDS9960.c"
 10217 ;; Parameters:    Size  Location     Type
 10218 ;;  boost           1    wreg     unsigned char 
 10219 ;; Auto vars:     Size  Location     Type
 10220 ;;  boost           1   13[BANK0 ] unsigned char 
 10221 ;;  val             1   12[BANK0 ] unsigned char 
 10222 ;; Return value:  Size  Location     Type
 10223 ;;                  1    wreg      _Bool 
 10224 ;; Registers used:
 10225 ;;		wreg, status,2, status,0, pclath, cstack
 10226 ;; Tracked objects:
 10227 ;;		On entry : 0/0
 10228 ;;		On exit  : 0/0
 10229 ;;		Unchanged: 0/0
 10230 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10231 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10232 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10233 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10234 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10235 ;;Total ram usage:        4 bytes
 10236 ;; Hardware stack levels used:    1
 10237 ;; Hardware stack levels required when called:    8
 10238 ;; This function calls:
 10239 ;;		_wireReadDataByte
 10240 ;;		_wireWriteDataByte
 10241 ;; This function is called by:
 10242 ;;		_enableGestureSensor
 10243 ;; This function uses a non-reentrant model
 10244 ;;
 10245                           
 10246                           
 10247                           ;psect for function _setLEDBoost
 10248  0CAD                     _setLEDBoost:	
 10249                           
 10250                           ;incstack = 0
 10251                           ; Regs used in _setLEDBoost: [wreg+status,2+status,0+pclath+cstack]
 10252                           ;setLEDBoost@boost stored from wreg
 10253  0CAD  0020               	movlb	0	; select bank0
 10254  0CAE  00AD               	movwf	setLEDBoost@boost
 10255                           
 10256                           ;APDS9960.c: 484: _Bool setLEDBoost(uint8_t boost);APDS9960.c: 485: {;APDS9960.c: 486:  
      +                             uint8_t val;;APDS9960.c: 489:     val=wireReadDataByte(0x90);
 10257  0CAF  3090               	movlw	144
 10258  0CB0  318A  22EE  318C   	fcall	_wireReadDataByte
 10259  0CB3  0020               	movlb	0	; select bank0
 10260  0CB4  00AA               	movwf	??_setLEDBoost
 10261  0CB5  082A               	movf	??_setLEDBoost,w
 10262  0CB6  00AC               	movwf	setLEDBoost@val
 10263                           
 10264                           ;APDS9960.c: 492:     boost &= 0b00000011;
 10265  0CB7  3003               	movlw	3
 10266  0CB8  00AA               	movwf	??_setLEDBoost
 10267  0CB9  082A               	movf	??_setLEDBoost,w
 10268  0CBA  05AD               	andwf	setLEDBoost@boost,f
 10269                           
 10270                           ;APDS9960.c: 493:     boost = boost << 4;
 10271  0CBB  082D               	movf	setLEDBoost@boost,w
 10272  0CBC  00AA               	movwf	??_setLEDBoost
 10273  0CBD  3003               	movlw	3
 10274  0CBE                     u5785:	
 10275  0CBE  35AA               	lslf	??_setLEDBoost,f
 10276  0CBF  3EFF               	addlw	-1
 10277  0CC0  1D03               	skipz
 10278  0CC1  2CBE               	goto	u5785
 10279  0CC2  352A               	lslf	??_setLEDBoost,w
 10280  0CC3  00AB               	movwf	??_setLEDBoost+1
 10281  0CC4  082B               	movf	??_setLEDBoost+1,w
 10282  0CC5  00AD               	movwf	setLEDBoost@boost
 10283                           
 10284                           ;APDS9960.c: 494:     val &= 0b11001111;
 10285  0CC6  30CF               	movlw	207
 10286  0CC7  00AA               	movwf	??_setLEDBoost
 10287  0CC8  082A               	movf	??_setLEDBoost,w
 10288  0CC9  05AC               	andwf	setLEDBoost@val,f
 10289                           
 10290                           ;APDS9960.c: 495:     val |= boost;
 10291  0CCA  082D               	movf	setLEDBoost@boost,w
 10292  0CCB  00AA               	movwf	??_setLEDBoost
 10293  0CCC  082A               	movf	??_setLEDBoost,w
 10294  0CCD  04AC               	iorwf	setLEDBoost@val,f
 10295                           
 10296                           ;APDS9960.c: 498:     if( !wireWriteDataByte(0x90, val) ) {
 10297  0CCE  082C               	movf	setLEDBoost@val,w
 10298  0CCF  00AA               	movwf	??_setLEDBoost
 10299  0CD0  082A               	movf	??_setLEDBoost,w
 10300  0CD1  00A6               	movwf	wireWriteDataByte@val
 10301  0CD2  3090               	movlw	144
 10302  0CD3  318A  225F  318C   	fcall	_wireWriteDataByte
 10303  0CD6  0020               	movlb	0	; select bank0
 10304  0CD7  0826               	movf	?_wireWriteDataByte,w
 10305  0CD8  0427               	iorwf	?_wireWriteDataByte+1,w
 10306  0CD9  1D03               	btfss	3,2
 10307  0CDA  2CDD               	goto	l6662
 10308                           
 10309                           ;APDS9960.c: 499:         return 0;
 10310  0CDB  3000               	movlw	0
 10311  0CDC  0008               	return
 10312  0CDD                     l6662:	
 10313                           
 10314                           ;APDS9960.c: 502:     return 1;
 10315  0CDD  3001               	movlw	1
 10316  0CDE  0008               	return
 10317  0CDF                     __end_of_setLEDBoost:	
 10318                           
 10319                           	psect	text25
 10320  0B38                     __ptext25:	
 10321 ;; *************** function _setGestureMode *****************
 10322 ;; Defined at:
 10323 ;;		line 506 in file "APDS9960.c"
 10324 ;; Parameters:    Size  Location     Type
 10325 ;;  mode            1    wreg     unsigned char 
 10326 ;; Auto vars:     Size  Location     Type
 10327 ;;  mode            1   11[BANK0 ] unsigned char 
 10328 ;;  val             1   12[BANK0 ] unsigned char 
 10329 ;; Return value:  Size  Location     Type
 10330 ;;                  1    wreg      _Bool 
 10331 ;; Registers used:
 10332 ;;		wreg, status,2, status,0, pclath, cstack
 10333 ;; Tracked objects:
 10334 ;;		On entry : 0/0
 10335 ;;		On exit  : 0/0
 10336 ;;		Unchanged: 0/0
 10337 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10338 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10339 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10340 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10341 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10342 ;;Total ram usage:        3 bytes
 10343 ;; Hardware stack levels used:    1
 10344 ;; Hardware stack levels required when called:    8
 10345 ;; This function calls:
 10346 ;;		_wireReadDataByte
 10347 ;;		_wireWriteDataByte
 10348 ;; This function is called by:
 10349 ;;		_enableGestureSensor
 10350 ;; This function uses a non-reentrant model
 10351 ;;
 10352                           
 10353                           
 10354                           ;psect for function _setGestureMode
 10355  0B38                     _setGestureMode:	
 10356                           
 10357                           ;incstack = 0
 10358                           ; Regs used in _setGestureMode: [wreg+status,2+status,0+pclath+cstack]
 10359                           ;setGestureMode@mode stored from wreg
 10360  0B38  0020               	movlb	0	; select bank0
 10361  0B39  00AB               	movwf	setGestureMode@mode
 10362                           
 10363                           ;APDS9960.c: 506: _Bool setGestureMode(uint8_t mode);APDS9960.c: 507: {;APDS9960.c: 508:
      +                               uint8_t val;;APDS9960.c: 511:     val = wireReadDataByte(0xAB);
 10364  0B3A  30AB               	movlw	171
 10365  0B3B  318A  22EE  318B   	fcall	_wireReadDataByte
 10366  0B3E  0020               	movlb	0	; select bank0
 10367  0B3F  00AA               	movwf	??_setGestureMode
 10368  0B40  082A               	movf	??_setGestureMode,w
 10369  0B41  00AC               	movwf	setGestureMode@val
 10370                           
 10371                           ;APDS9960.c: 514:     mode &= 0b00000001;
 10372  0B42  3001               	movlw	1
 10373  0B43  00AA               	movwf	??_setGestureMode
 10374  0B44  082A               	movf	??_setGestureMode,w
 10375  0B45  05AB               	andwf	setGestureMode@mode,f
 10376                           
 10377                           ;APDS9960.c: 515:     val &= 0b11111110;
 10378  0B46  30FE               	movlw	254
 10379  0B47  00AA               	movwf	??_setGestureMode
 10380  0B48  082A               	movf	??_setGestureMode,w
 10381  0B49  05AC               	andwf	setGestureMode@val,f
 10382                           
 10383                           ;APDS9960.c: 516:     val |= mode;
 10384  0B4A  082B               	movf	setGestureMode@mode,w
 10385  0B4B  00AA               	movwf	??_setGestureMode
 10386  0B4C  082A               	movf	??_setGestureMode,w
 10387  0B4D  04AC               	iorwf	setGestureMode@val,f
 10388                           
 10389                           ;APDS9960.c: 519:     if( !wireWriteDataByte(0xAB, val) ) {
 10390  0B4E  082C               	movf	setGestureMode@val,w
 10391  0B4F  00AA               	movwf	??_setGestureMode
 10392  0B50  082A               	movf	??_setGestureMode,w
 10393  0B51  00A6               	movwf	wireWriteDataByte@val
 10394  0B52  30AB               	movlw	171
 10395  0B53  318A  225F  318B   	fcall	_wireWriteDataByte
 10396  0B56  0020               	movlb	0	; select bank0
 10397  0B57  0826               	movf	?_wireWriteDataByte,w
 10398  0B58  0427               	iorwf	?_wireWriteDataByte+1,w
 10399  0B59  1D03               	btfss	3,2
 10400  0B5A  2B5D               	goto	l6680
 10401                           
 10402                           ;APDS9960.c: 520:         return 0;
 10403  0B5B  3000               	movlw	0
 10404  0B5C  0008               	return
 10405  0B5D                     l6680:	
 10406                           
 10407                           ;APDS9960.c: 523:     return 1;
 10408  0B5D  3001               	movlw	1
 10409  0B5E  0008               	return
 10410  0B5F                     __end_of_setGestureMode:	
 10411                           
 10412                           	psect	text26
 10413  0C51                     __ptext26:	
 10414 ;; *************** function _setGestureIntEnable *****************
 10415 ;; Defined at:
 10416 ;;		line 387 in file "APDS9960.c"
 10417 ;; Parameters:    Size  Location     Type
 10418 ;;  enable          1    wreg     unsigned char 
 10419 ;; Auto vars:     Size  Location     Type
 10420 ;;  enable          1   12[BANK0 ] unsigned char 
 10421 ;;  val             1   11[BANK0 ] unsigned char 
 10422 ;; Return value:  Size  Location     Type
 10423 ;;                  1    wreg      _Bool 
 10424 ;; Registers used:
 10425 ;;		wreg, status,2, status,0, pclath, cstack
 10426 ;; Tracked objects:
 10427 ;;		On entry : 0/0
 10428 ;;		On exit  : 0/0
 10429 ;;		Unchanged: 0/0
 10430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10431 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10432 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10433 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10434 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10435 ;;Total ram usage:        3 bytes
 10436 ;; Hardware stack levels used:    1
 10437 ;; Hardware stack levels required when called:    8
 10438 ;; This function calls:
 10439 ;;		_wireReadDataByte
 10440 ;;		_wireWriteDataByte
 10441 ;; This function is called by:
 10442 ;;		_initialize
 10443 ;;		_enableGestureSensor
 10444 ;; This function uses a non-reentrant model
 10445 ;;
 10446                           
 10447                           
 10448                           ;psect for function _setGestureIntEnable
 10449  0C51                     _setGestureIntEnable:	
 10450                           
 10451                           ;incstack = 0
 10452                           ; Regs used in _setGestureIntEnable: [wreg+status,2+status,0+pclath+cstack]
 10453                           ;setGestureIntEnable@enable stored from wreg
 10454  0C51  0020               	movlb	0	; select bank0
 10455  0C52  00AC               	movwf	setGestureIntEnable@enable
 10456                           
 10457                           ;APDS9960.c: 387: _Bool setGestureIntEnable(uint8_t enable);APDS9960.c: 388: {;APDS9960.
      +                          c: 389:     uint8_t val;;APDS9960.c: 392:     val = wireReadDataByte(0xAB);
 10458  0C53  30AB               	movlw	171
 10459  0C54  318A  22EE  318C   	fcall	_wireReadDataByte
 10460  0C57  0020               	movlb	0	; select bank0
 10461  0C58  00AA               	movwf	??_setGestureIntEnable
 10462  0C59  082A               	movf	??_setGestureIntEnable,w
 10463  0C5A  00AB               	movwf	setGestureIntEnable@val
 10464                           
 10465                           ;APDS9960.c: 395:     enable &= 0b00000001;
 10466  0C5B  3001               	movlw	1
 10467  0C5C  00AA               	movwf	??_setGestureIntEnable
 10468  0C5D  082A               	movf	??_setGestureIntEnable,w
 10469  0C5E  05AC               	andwf	setGestureIntEnable@enable,f
 10470                           
 10471                           ;APDS9960.c: 396:     enable = enable << 1;
 10472  0C5F  352C               	lslf	setGestureIntEnable@enable,w
 10473  0C60  00AA               	movwf	??_setGestureIntEnable
 10474  0C61  082A               	movf	??_setGestureIntEnable,w
 10475  0C62  00AC               	movwf	setGestureIntEnable@enable
 10476                           
 10477                           ;APDS9960.c: 397:     val &= 0b11111101;
 10478  0C63  30FD               	movlw	253
 10479  0C64  00AA               	movwf	??_setGestureIntEnable
 10480  0C65  082A               	movf	??_setGestureIntEnable,w
 10481  0C66  05AB               	andwf	setGestureIntEnable@val,f
 10482                           
 10483                           ;APDS9960.c: 398:     val |= enable;
 10484  0C67  082C               	movf	setGestureIntEnable@enable,w
 10485  0C68  00AA               	movwf	??_setGestureIntEnable
 10486  0C69  082A               	movf	??_setGestureIntEnable,w
 10487  0C6A  04AB               	iorwf	setGestureIntEnable@val,f
 10488                           
 10489                           ;APDS9960.c: 401:     if( !wireWriteDataByte(0xAB, val) ) {
 10490  0C6B  082B               	movf	setGestureIntEnable@val,w
 10491  0C6C  00AA               	movwf	??_setGestureIntEnable
 10492  0C6D  082A               	movf	??_setGestureIntEnable,w
 10493  0C6E  00A6               	movwf	wireWriteDataByte@val
 10494  0C6F  30AB               	movlw	171
 10495  0C70  318A  225F  318C   	fcall	_wireWriteDataByte
 10496  0C73  0020               	movlb	0	; select bank0
 10497  0C74  0826               	movf	?_wireWriteDataByte,w
 10498  0C75  0427               	iorwf	?_wireWriteDataByte+1,w
 10499  0C76  1D03               	btfss	3,2
 10500  0C77  2C7A               	goto	l6644
 10501                           
 10502                           ;APDS9960.c: 402:         return 0;
 10503  0C78  3000               	movlw	0
 10504  0C79  0008               	return
 10505  0C7A                     l6644:	
 10506                           
 10507                           ;APDS9960.c: 405:     return 1;
 10508  0C7A  3001               	movlw	1
 10509  0C7B  0008               	return
 10510  0C7C                     __end_of_setGestureIntEnable:	
 10511                           
 10512                           	psect	text27
 10513  0A18                     __ptext27:	
 10514 ;; *************** function _resetGestureParameters *****************
 10515 ;; Defined at:
 10516 ;;		line 457 in file "APDS9960.c"
 10517 ;; Parameters:    Size  Location     Type
 10518 ;;		None
 10519 ;; Auto vars:     Size  Location     Type
 10520 ;;		None
 10521 ;; Return value:  Size  Location     Type
 10522 ;;                  1    wreg      void 
 10523 ;; Registers used:
 10524 ;;		status,2
 10525 ;; Tracked objects:
 10526 ;;		On entry : 0/0
 10527 ;;		On exit  : 0/0
 10528 ;;		Unchanged: 0/0
 10529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10530 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10531 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10532 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10533 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10534 ;;Total ram usage:        0 bytes
 10535 ;; Hardware stack levels used:    1
 10536 ;; Hardware stack levels required when called:    5
 10537 ;; This function calls:
 10538 ;;		Nothing
 10539 ;; This function is called by:
 10540 ;;		_enableGestureSensor
 10541 ;;		_readGesture
 10542 ;; This function uses a non-reentrant model
 10543 ;;
 10544                           
 10545                           
 10546                           ;psect for function _resetGestureParameters
 10547  0A18                     _resetGestureParameters:	
 10548                           
 10549                           ;APDS9960.c: 460:     gesture_data_.index = 0;
 10550                           
 10551                           ;incstack = 0
 10552                           ; Regs used in _resetGestureParameters: [status,2]
 10553  0A18  0024               	movlb	4	; select bank4
 10554  0A19  01E0               	clrf	(_gesture_data_^(0+512)+64)
 10555                           
 10556                           ;APDS9960.c: 461:     gesture_data_.total_gestures = 0;
 10557  0A1A  01E1               	clrf	(_gesture_data_^(0+512)+65)
 10558                           
 10559                           ;APDS9960.c: 463:     gesture_ud_delta_ = 0;
 10560  0A1B  0020               	movlb	0	; select bank0
 10561  0A1C  01E7               	clrf	_gesture_ud_delta_
 10562  0A1D  01E8               	clrf	_gesture_ud_delta_+1
 10563                           
 10564                           ;APDS9960.c: 464:     gesture_lr_delta_ = 0;
 10565  0A1E  01E5               	clrf	_gesture_lr_delta_
 10566  0A1F  01E6               	clrf	_gesture_lr_delta_+1
 10567                           
 10568                           ;APDS9960.c: 466:     gesture_ud_count_ = 0;
 10569  0A20  01E3               	clrf	_gesture_ud_count_
 10570  0A21  01E4               	clrf	_gesture_ud_count_+1
 10571                           
 10572                           ;APDS9960.c: 467:     gesture_lr_count_ = 0;
 10573  0A22  01E1               	clrf	_gesture_lr_count_
 10574  0A23  01E2               	clrf	_gesture_lr_count_+1
 10575                           
 10576                           ;APDS9960.c: 469:     gesture_near_count_ = 0;
 10577  0A24  01DF               	clrf	_gesture_near_count_
 10578  0A25  01E0               	clrf	_gesture_near_count_+1
 10579                           
 10580                           ;APDS9960.c: 470:     gesture_far_count_ = 0;
 10581  0A26  0021               	movlb	1	; select bank1
 10582  0A27  01E9               	clrf	_gesture_far_count_^(0+128)
 10583  0A28  01EA               	clrf	(_gesture_far_count_+1)^(0+128)
 10584                           
 10585                           ;APDS9960.c: 472:     gesture_state_ = 0;
 10586  0A29  01E7               	clrf	_gesture_state_^(0+128)
 10587  0A2A  01E8               	clrf	(_gesture_state_+1)^(0+128)
 10588                           
 10589                           ;APDS9960.c: 473:     gesture_motion_ = DIR_NONE;
 10590  0A2B  0022               	movlb	2	; select bank2
 10591  0A2C  01E8               	clrf	_gesture_motion_^(0+256)
 10592  0A2D  01E9               	clrf	(_gesture_motion_+1)^(0+256)
 10593  0A2E  0008               	return
 10594  0A2F                     __end_of_resetGestureParameters:	
 10595                           
 10596                           	psect	text28
 10597  0976                     __ptext28:	
 10598 ;; *************** function _enablePower *****************
 10599 ;; Defined at:
 10600 ;;		line 527 in file "APDS9960.c"
 10601 ;; Parameters:    Size  Location     Type
 10602 ;;		None
 10603 ;; Auto vars:     Size  Location     Type
 10604 ;;		None
 10605 ;; Return value:  Size  Location     Type
 10606 ;;                  1    wreg      _Bool 
 10607 ;; Registers used:
 10608 ;;		wreg, status,2, status,0, pclath, cstack
 10609 ;; Tracked objects:
 10610 ;;		On entry : 0/0
 10611 ;;		On exit  : 0/0
 10612 ;;		Unchanged: 0/0
 10613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10614 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10615 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10616 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10617 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10618 ;;Total ram usage:        0 bytes
 10619 ;; Hardware stack levels used:    1
 10620 ;; Hardware stack levels required when called:   10
 10621 ;; This function calls:
 10622 ;;		_setMode
 10623 ;; This function is called by:
 10624 ;;		_enableGestureSensor
 10625 ;; This function uses a non-reentrant model
 10626 ;;
 10627                           
 10628                           
 10629                           ;psect for function _enablePower
 10630  0976                     _enablePower:	
 10631                           
 10632                           ;APDS9960.c: 529:     if( !setMode(0, 1) ) {
 10633                           
 10634                           ;incstack = 0
 10635                           ; Regs used in _enablePower: [wreg+status,2+status,0+pclath+cstack]
 10636  0976  0020               	movlb	0	; select bank0
 10637  0977  01AB               	clrf	setMode@enable
 10638  0978  0AAB               	incf	setMode@enable,f
 10639  0979  3000               	movlw	0
 10640  097A  318E  2651  3189   	fcall	_setMode
 10641  097D  3A00               	xorlw	0
 10642  097E  1D03               	skipz
 10643  097F  2982               	goto	l6690
 10644                           
 10645                           ;APDS9960.c: 530:         return 0;
 10646  0980  3000               	movlw	0
 10647  0981  0008               	return
 10648  0982                     l6690:	
 10649                           
 10650                           ;APDS9960.c: 533:     return 1;
 10651  0982  3001               	movlw	1
 10652  0983  0008               	return
 10653  0984                     __end_of_enablePower:	
 10654                           
 10655                           	psect	text29
 10656  0E51                     __ptext29:	
 10657 ;; *************** function _setMode *****************
 10658 ;; Defined at:
 10659 ;;		line 124 in file "APDS9960.c"
 10660 ;; Parameters:    Size  Location     Type
 10661 ;;  mode            1    wreg     unsigned char 
 10662 ;;  enable          1   11[BANK0 ] unsigned char 
 10663 ;; Auto vars:     Size  Location     Type
 10664 ;;  mode            1   15[BANK0 ] unsigned char 
 10665 ;;  reg_val         1   14[BANK0 ] unsigned char 
 10666 ;; Return value:  Size  Location     Type
 10667 ;;                  1    wreg      _Bool 
 10668 ;; Registers used:
 10669 ;;		wreg, status,2, status,0, pclath, cstack
 10670 ;; Tracked objects:
 10671 ;;		On entry : 0/0
 10672 ;;		On exit  : 0/0
 10673 ;;		Unchanged: 0/0
 10674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10675 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10676 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10677 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10678 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10679 ;;Total ram usage:        5 bytes
 10680 ;; Hardware stack levels used:    1
 10681 ;; Hardware stack levels required when called:    9
 10682 ;; This function calls:
 10683 ;;		_getMode
 10684 ;;		_wireWriteDataByte
 10685 ;; This function is called by:
 10686 ;;		_initialize
 10687 ;;		_enableGestureSensor
 10688 ;;		_enablePower
 10689 ;; This function uses a non-reentrant model
 10690 ;;
 10691                           
 10692                           
 10693                           ;psect for function _setMode
 10694  0E51                     _setMode:	
 10695                           
 10696                           ;incstack = 0
 10697                           ; Regs used in _setMode: [wreg+status,2+status,0+pclath+cstack]
 10698                           ;setMode@mode stored from wreg
 10699  0E51  0020               	movlb	0	; select bank0
 10700  0E52  00AF               	movwf	setMode@mode
 10701                           
 10702                           ;APDS9960.c: 124: _Bool setMode(uint8_t mode, uint8_t enable);APDS9960.c: 125: {;APDS996
      +                          0.c: 126:     uint8_t reg_val;;APDS9960.c: 129:     reg_val = getMode();
 10703  0E53  3189  214C  318E   	fcall	_getMode
 10704  0E56  0020               	movlb	0	; select bank0
 10705  0E57  00AC               	movwf	??_setMode
 10706  0E58  082C               	movf	??_setMode,w
 10707  0E59  00AE               	movwf	setMode@reg_val
 10708                           
 10709                           ;APDS9960.c: 130:     if( reg_val == 0xFF ) {
 10710  0E5A  0A2E               	incf	setMode@reg_val,w
 10711  0E5B  1D03               	btfss	3,2
 10712  0E5C  2E5F               	goto	l5936
 10713  0E5D                     l5932:	
 10714                           
 10715                           ;APDS9960.c: 131:         return 0;
 10716  0E5D  3000               	movlw	0
 10717  0E5E  0008               	return
 10718  0E5F                     l5936:	
 10719                           
 10720                           ;APDS9960.c: 135:     enable = enable & 0x01;
 10721  0E5F  082B               	movf	setMode@enable,w
 10722  0E60  3901               	andlw	1
 10723  0E61  00AC               	movwf	??_setMode
 10724  0E62  082C               	movf	??_setMode,w
 10725  0E63  00AB               	movwf	setMode@enable
 10726                           
 10727                           ;APDS9960.c: 136:     if( mode >= 0 && mode <= 6 ) {
 10728  0E64  3007               	movlw	7
 10729  0E65  022F               	subwf	setMode@mode,w
 10730  0E66  1803               	skipnc
 10731  0E67  2E84               	goto	l5946
 10732                           
 10733                           ;APDS9960.c: 137:         if (enable) {
 10734  0E68  082B               	movf	setMode@enable,w
 10735  0E69  1903               	btfsc	3,2
 10736  0E6A  2E77               	goto	l5944
 10737                           
 10738                           ;APDS9960.c: 138:             reg_val |= (1 << mode);
 10739  0E6B  3001               	movlw	1
 10740  0E6C  00AC               	movwf	??_setMode
 10741  0E6D  0A2F               	incf	setMode@mode,w
 10742  0E6E  2E70               	goto	u4704
 10743  0E6F                     u4705:	
 10744  0E6F  35AC               	lslf	??_setMode,f
 10745  0E70                     u4704:	
 10746  0E70  0B89               	decfsz	9,f
 10747  0E71  2E6F               	goto	u4705
 10748  0E72  082C               	movf	??_setMode,w
 10749  0E73  00AD               	movwf	??_setMode+1
 10750  0E74  082D               	movf	??_setMode+1,w
 10751  0E75  04AE               	iorwf	setMode@reg_val,f
 10752                           
 10753                           ;APDS9960.c: 139:         } else {
 10754  0E76  2E91               	goto	l5954
 10755  0E77                     l5944:	
 10756                           
 10757                           ;APDS9960.c: 140:             reg_val &= ~(1 << mode);
 10758  0E77  3001               	movlw	1
 10759  0E78  00AC               	movwf	??_setMode
 10760  0E79  0A2F               	incf	setMode@mode,w
 10761  0E7A  2E7C               	goto	u4714
 10762  0E7B                     u4715:	
 10763  0E7B  35AC               	lslf	??_setMode,f
 10764  0E7C                     u4714:	
 10765  0E7C  0B89               	decfsz	9,f
 10766  0E7D  2E7B               	goto	u4715
 10767  0E7E  082C               	movf	??_setMode,w
 10768  0E7F  3AFF               	xorlw	255
 10769  0E80  00AD               	movwf	??_setMode+1
 10770  0E81  082D               	movf	??_setMode+1,w
 10771  0E82  05AE               	andwf	setMode@reg_val,f
 10772  0E83  2E91               	goto	l5954
 10773  0E84                     l5946:	
 10774  0E84  3007               	movlw	7
 10775  0E85  062F               	xorwf	setMode@mode,w
 10776  0E86  1D03               	btfss	3,2
 10777  0E87  2E91               	goto	l5954
 10778                           
 10779                           ;APDS9960.c: 143:         if (enable) {
 10780  0E88  082B               	movf	setMode@enable,w
 10781  0E89  1903               	btfsc	3,2
 10782  0E8A  2E90               	goto	l5952
 10783                           
 10784                           ;APDS9960.c: 144:             reg_val = 0x7F;
 10785  0E8B  307F               	movlw	127
 10786  0E8C  00AC               	movwf	??_setMode
 10787  0E8D  082C               	movf	??_setMode,w
 10788  0E8E  00AE               	movwf	setMode@reg_val
 10789                           
 10790                           ;APDS9960.c: 145:         } else {
 10791  0E8F  2E91               	goto	l5954
 10792  0E90                     l5952:	
 10793                           
 10794                           ;APDS9960.c: 146:             reg_val = 0x00;
 10795  0E90  01AE               	clrf	setMode@reg_val
 10796  0E91                     l5954:	
 10797                           
 10798                           ;APDS9960.c: 151:     if( !wireWriteDataByte(0x80, reg_val) ) {
 10799  0E91  082E               	movf	setMode@reg_val,w
 10800  0E92  00AC               	movwf	??_setMode
 10801  0E93  082C               	movf	??_setMode,w
 10802  0E94  00A6               	movwf	wireWriteDataByte@val
 10803  0E95  3080               	movlw	128
 10804  0E96  318A  225F  318E   	fcall	_wireWriteDataByte
 10805  0E99  0020               	movlb	0	; select bank0
 10806  0E9A  0826               	movf	?_wireWriteDataByte,w
 10807  0E9B  0427               	iorwf	?_wireWriteDataByte+1,w
 10808  0E9C  1903               	btfsc	3,2
 10809  0E9D  2E5D               	goto	l5932
 10810                           
 10811                           ;APDS9960.c: 155:     return 1;
 10812  0E9E  3001               	movlw	1
 10813  0E9F  0008               	return
 10814  0EA0                     __end_of_setMode:	
 10815                           
 10816                           	psect	text30
 10817  0A5F                     __ptext30:	
 10818 ;; *************** function _wireWriteDataByte *****************
 10819 ;; Defined at:
 10820 ;;		line 871 in file "APDS9960.c"
 10821 ;; Parameters:    Size  Location     Type
 10822 ;;  reg             1    wreg     unsigned char 
 10823 ;;  val             1    6[BANK0 ] unsigned char 
 10824 ;; Auto vars:     Size  Location     Type
 10825 ;;  reg             1    9[BANK0 ] unsigned char 
 10826 ;; Return value:  Size  Location     Type
 10827 ;;                  2    6[BANK0 ] int 
 10828 ;; Registers used:
 10829 ;;		wreg, status,2, status,0, pclath, cstack
 10830 ;; Tracked objects:
 10831 ;;		On entry : 0/0
 10832 ;;		On exit  : 0/0
 10833 ;;		Unchanged: 0/0
 10834 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10835 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10836 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10837 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10838 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10839 ;;Total ram usage:        4 bytes
 10840 ;; Hardware stack levels used:    1
 10841 ;; Hardware stack levels required when called:    7
 10842 ;; This function calls:
 10843 ;;		_I2C_Start
 10844 ;;		_I2C_Stop
 10845 ;;		_I2C_Write_Byte
 10846 ;; This function is called by:
 10847 ;;		_initialize
 10848 ;;		_setMode
 10849 ;;		_setLEDDrive
 10850 ;;		_setProximityGain
 10851 ;;		_setAmbientLightGain
 10852 ;;		_setProxIntLowThresh
 10853 ;;		_setProxIntHighThresh
 10854 ;;		_setLightIntLowThreshold
 10855 ;;		_setLightIntHighThreshold
 10856 ;;		_setGestureEnterThresh
 10857 ;;		_setGestureExitThresh
 10858 ;;		_setGestureGain
 10859 ;;		_setGestureLEDDrive
 10860 ;;		_setGestureWaitTime
 10861 ;;		_setGestureIntEnable
 10862 ;;		_enableGestureSensor
 10863 ;;		_setLEDBoost
 10864 ;;		_setGestureMode
 10865 ;; This function uses a non-reentrant model
 10866 ;;
 10867                           
 10868                           
 10869                           ;psect for function _wireWriteDataByte
 10870  0A5F                     _wireWriteDataByte:	
 10871                           
 10872                           ;incstack = 0
 10873                           ; Regs used in _wireWriteDataByte: [wreg+status,2+status,0+pclath+cstack]
 10874                           ;wireWriteDataByte@reg stored from wreg
 10875  0A5F  0020               	movlb	0	; select bank0
 10876  0A60  00A9               	movwf	wireWriteDataByte@reg
 10877                           
 10878                           ;APDS9960.c: 871: int wireWriteDataByte(unsigned char reg, unsigned char val);APDS9960.c
      +                          : 872: {;APDS9960.c: 882:     I2C_Start();
 10879  0A61  3188  2099  318A   	fcall	_I2C_Start
 10880                           
 10881                           ;APDS9960.c: 883:     I2C_Write_Byte((0x39 << 1 )| 0x00);
 10882  0A64  3072               	movlw	114
 10883  0A65  318A  227A  318A   	fcall	_I2C_Write_Byte
 10884                           
 10885                           ;APDS9960.c: 884:     I2C_Write_Byte(reg);
 10886  0A68  0020               	movlb	0	; select bank0
 10887  0A69  0829               	movf	wireWriteDataByte@reg,w
 10888  0A6A  318A  227A  318A   	fcall	_I2C_Write_Byte
 10889                           
 10890                           ;APDS9960.c: 885:     I2C_Write_Byte(val);
 10891  0A6D  0020               	movlb	0	; select bank0
 10892  0A6E  0826               	movf	wireWriteDataByte@val,w
 10893  0A6F  318A  227A  318A   	fcall	_I2C_Write_Byte
 10894                           
 10895                           ;APDS9960.c: 886:     I2C_Stop();
 10896  0A72  3187  27FD         	fcall	_I2C_Stop
 10897                           
 10898                           ;APDS9960.c: 889:     return 1;
 10899  0A74  3001               	movlw	1
 10900  0A75  0020               	movlb	0	; select bank0
 10901  0A76  00A6               	movwf	?_wireWriteDataByte
 10902  0A77  3000               	movlw	0
 10903  0A78  00A7               	movwf	?_wireWriteDataByte+1
 10904  0A79  0008               	return
 10905  0A7A                     __end_of_wireWriteDataByte:	
 10906                           
 10907                           	psect	text31
 10908  094C                     __ptext31:	
 10909 ;; *************** function _getMode *****************
 10910 ;; Defined at:
 10911 ;;		line 159 in file "APDS9960.c"
 10912 ;; Parameters:    Size  Location     Type
 10913 ;;		None
 10914 ;; Auto vars:     Size  Location     Type
 10915 ;;  enable_value    1   10[BANK0 ] unsigned char 
 10916 ;; Return value:  Size  Location     Type
 10917 ;;                  1    wreg      unsigned char 
 10918 ;; Registers used:
 10919 ;;		wreg, status,2, status,0, pclath, cstack
 10920 ;; Tracked objects:
 10921 ;;		On entry : 0/0
 10922 ;;		On exit  : 0/0
 10923 ;;		Unchanged: 0/0
 10924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10925 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10926 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10927 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10928 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10929 ;;Total ram usage:        2 bytes
 10930 ;; Hardware stack levels used:    1
 10931 ;; Hardware stack levels required when called:    8
 10932 ;; This function calls:
 10933 ;;		_wireReadDataByte
 10934 ;; This function is called by:
 10935 ;;		_setMode
 10936 ;;		_readGesture
 10937 ;; This function uses a non-reentrant model
 10938 ;;
 10939                           
 10940                           
 10941                           ;psect for function _getMode
 10942  094C                     _getMode:	
 10943                           
 10944                           ;APDS9960.c: 161:     uint8_t enable_value;;APDS9960.c: 164:     enable_value = wireRead
      +                          DataByte(0x80);
 10945                           
 10946                           ;incstack = 0
 10947                           ; Regs used in _getMode: [wreg+status,2+status,0+pclath+cstack]
 10948  094C  3080               	movlw	128
 10949  094D  318A  22EE         	fcall	_wireReadDataByte
 10950  094F  0020               	movlb	0	; select bank0
 10951  0950  00A9               	movwf	??_getMode
 10952  0951  0829               	movf	??_getMode,w
 10953  0952  00AA               	movwf	getMode@enable_value
 10954                           
 10955                           ;APDS9960.c: 166:     return enable_value;
 10956  0953  082A               	movf	getMode@enable_value,w
 10957  0954  0008               	return
 10958  0955                     __end_of_getMode:	
 10959                           
 10960                           	psect	text32
 10961  0AEE                     __ptext32:	
 10962 ;; *************** function _wireReadDataByte *****************
 10963 ;; Defined at:
 10964 ;;		line 893 in file "APDS9960.c"
 10965 ;; Parameters:    Size  Location     Type
 10966 ;;  reg             1    wreg     unsigned char 
 10967 ;; Auto vars:     Size  Location     Type
 10968 ;;  reg             1    7[BANK0 ] unsigned char 
 10969 ;;  val             1    8[BANK0 ] unsigned char 
 10970 ;; Return value:  Size  Location     Type
 10971 ;;                  1    wreg      unsigned char 
 10972 ;; Registers used:
 10973 ;;		wreg, status,2, status,0, pclath, cstack
 10974 ;; Tracked objects:
 10975 ;;		On entry : 0/0
 10976 ;;		On exit  : 0/0
 10977 ;;		Unchanged: 0/0
 10978 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10979 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10980 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10981 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10982 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10983 ;;Total ram usage:        3 bytes
 10984 ;; Hardware stack levels used:    1
 10985 ;; Hardware stack levels required when called:    7
 10986 ;; This function calls:
 10987 ;;		_I2C_ReStart
 10988 ;;		_I2C_Read_Byte
 10989 ;;		_I2C_Send_NACK
 10990 ;;		_I2C_Start
 10991 ;;		_I2C_Stop
 10992 ;;		_I2C_Write_Byte
 10993 ;; This function is called by:
 10994 ;;		_initialize
 10995 ;;		_getMode
 10996 ;;		_setLEDDrive
 10997 ;;		_setProximityGain
 10998 ;;		_setAmbientLightGain
 10999 ;;		_setGestureGain
 11000 ;;		_setGestureLEDDrive
 11001 ;;		_setGestureWaitTime
 11002 ;;		_setGestureIntEnable
 11003 ;;		_setLEDBoost
 11004 ;;		_setGestureMode
 11005 ;;		_isGestureAvailable
 11006 ;;		_readGesture
 11007 ;; This function uses a non-reentrant model
 11008 ;;
 11009                           
 11010                           
 11011                           ;psect for function _wireReadDataByte
 11012  0AEE                     _wireReadDataByte:	
 11013                           
 11014                           ;incstack = 0
 11015                           ; Regs used in _wireReadDataByte: [wreg+status,2+status,0+pclath+cstack]
 11016                           ;wireReadDataByte@reg stored from wreg
 11017  0AEE  0020               	movlb	0	; select bank0
 11018  0AEF  00A7               	movwf	wireReadDataByte@reg
 11019                           
 11020                           ;APDS9960.c: 893:  unsigned char wireReadDataByte(unsigned char reg);APDS9960.c: 894: {;
      +                          APDS9960.c: 908:     unsigned char val;;APDS9960.c: 909:     I2C_Start();
 11021  0AF0  3188  2099  318A   	fcall	_I2C_Start
 11022                           
 11023                           ;APDS9960.c: 910:     I2C_Write_Byte((0x39 << 1 )| 0x00);
 11024  0AF3  3072               	movlw	114
 11025  0AF4  318A  227A  318A   	fcall	_I2C_Write_Byte
 11026                           
 11027                           ;APDS9960.c: 911:     I2C_Write_Byte(reg);
 11028  0AF7  0020               	movlb	0	; select bank0
 11029  0AF8  0827               	movf	wireReadDataByte@reg,w
 11030  0AF9  318A  227A  318A   	fcall	_I2C_Write_Byte
 11031                           
 11032                           ;APDS9960.c: 912:     I2C_ReStart();
 11033  0AFC  3188  208A  318A   	fcall	_I2C_ReStart
 11034                           
 11035                           ;APDS9960.c: 914:     I2C_Write_Byte((0x39 << 1) | 0x01);
 11036  0AFF  3073               	movlw	115
 11037  0B00  318A  227A  318A   	fcall	_I2C_Write_Byte
 11038                           
 11039                           ;APDS9960.c: 915:     val=I2C_Read_Byte();
 11040  0B03  3189  215F  318A   	fcall	_I2C_Read_Byte
 11041  0B06  0020               	movlb	0	; select bank0
 11042  0B07  00A6               	movwf	??_wireReadDataByte
 11043  0B08  0826               	movf	??_wireReadDataByte,w
 11044  0B09  00A8               	movwf	wireReadDataByte@val
 11045                           
 11046                           ;APDS9960.c: 916:     I2C_Send_NACK();
 11047  0B0A  3188  2093  318A   	fcall	_I2C_Send_NACK
 11048                           
 11049                           ;APDS9960.c: 917:     I2C_Stop();
 11050  0B0D  3187  27FD         	fcall	_I2C_Stop
 11051                           
 11052                           ;APDS9960.c: 919:     return val;
 11053  0B0F  0020               	movlb	0	; select bank0
 11054  0B10  0828               	movf	wireReadDataByte@val,w
 11055  0B11  0008               	return
 11056  0B12                     __end_of_wireReadDataByte:	
 11057                           
 11058                           	psect	text33
 11059  0A7A                     __ptext33:	
 11060 ;; *************** function _I2C_Write_Byte *****************
 11061 ;; Defined at:
 11062 ;;		line 75 in file "i2c.c"
 11063 ;; Parameters:    Size  Location     Type
 11064 ;;  Byte            1    wreg     unsigned char 
 11065 ;; Auto vars:     Size  Location     Type
 11066 ;;  Byte            1    3[BANK0 ] unsigned char 
 11067 ;;  count           2    4[BANK0 ] unsigned int 
 11068 ;; Return value:  Size  Location     Type
 11069 ;;                  1    wreg      void 
 11070 ;; Registers used:
 11071 ;;		wreg, status,2, status,0, pclath, cstack
 11072 ;; Tracked objects:
 11073 ;;		On entry : 0/0
 11074 ;;		On exit  : 0/0
 11075 ;;		Unchanged: 0/0
 11076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11077 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11078 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11079 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11080 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11081 ;;Total ram usage:        5 bytes
 11082 ;; Hardware stack levels used:    1
 11083 ;; Hardware stack levels required when called:    6
 11084 ;; This function calls:
 11085 ;;		_i2c1_driver_TXData
 11086 ;; This function is called by:
 11087 ;;		_wireReadDataBlock
 11088 ;;		_wireWriteDataByte
 11089 ;;		_wireReadDataByte
 11090 ;; This function uses a non-reentrant model
 11091 ;;
 11092                           
 11093                           
 11094                           ;psect for function _I2C_Write_Byte
 11095  0A7A                     _I2C_Write_Byte:	
 11096                           
 11097                           ;incstack = 0
 11098                           ; Regs used in _I2C_Write_Byte: [wreg+status,2+status,0+pclath+cstack]
 11099                           ;I2C_Write_Byte@Byte stored from wreg
 11100  0A7A  0020               	movlb	0	; select bank0
 11101  0A7B  00A3               	movwf	I2C_Write_Byte@Byte
 11102                           
 11103                           ;i2c.c: 75: void I2C_Write_Byte(unsigned char Byte);i2c.c: 76: {;i2c.c: 80:     i2c1_dri
      +                          ver_TXData(Byte);
 11104  0A7C  0823               	movf	I2C_Write_Byte@Byte,w
 11105  0A7D  3188  20DF  318A   	fcall	_i2c1_driver_TXData
 11106                           
 11107                           ;i2c.c: 83:     unsigned int count = 0;
 11108  0A80  0020               	movlb	0	; select bank0
 11109  0A81  01A4               	clrf	I2C_Write_Byte@count
 11110  0A82  01A5               	clrf	I2C_Write_Byte@count+1
 11111  0A83                     l1143:	
 11112                           ;i2c.c: 84:     while(SSP1CON2bits.ACKSTAT);
 11113                           
 11114  0A83  0024               	movlb	4	; select bank4
 11115  0A84  1B16               	btfsc	22,6	;volatile
 11116  0A85  2A83               	goto	l1143
 11117  0A86                     l5776:	
 11118  0A86  0020               	movlb	0	; select bank0
 11119  0A87  0825               	movf	I2C_Write_Byte@count+1,w
 11120  0A88  00A2               	movwf	??_I2C_Write_Byte+1
 11121  0A89  0824               	movf	I2C_Write_Byte@count,w
 11122  0A8A  00A1               	movwf	??_I2C_Write_Byte
 11123  0A8B  0AA4               	incf	I2C_Write_Byte@count,f
 11124  0A8C  1903               	skipnz
 11125  0A8D  0AA5               	incf	I2C_Write_Byte@count+1,f
 11126  0A8E  3000               	movlw	0
 11127  0A8F  0222               	subwf	??_I2C_Write_Byte+1,w
 11128  0A90  3005               	movlw	5
 11129  0A91  1903               	skipnz
 11130  0A92  0221               	subwf	??_I2C_Write_Byte,w
 11131  0A93  1803               	btfsc	3,0
 11132  0A94  0008               	return
 11133  0A95  2A86               	goto	l5776
 11134  0A96                     __end_of_I2C_Write_Byte:	
 11135                           
 11136                           	psect	text34
 11137  08DF                     __ptext34:	
 11138 ;; *************** function _i2c1_driver_TXData *****************
 11139 ;; Defined at:
 11140 ;;		line 186 in file "mcc_generated_files/i2c1_driver.c"
 11141 ;; Parameters:    Size  Location     Type
 11142 ;;  d               1    wreg     unsigned char 
 11143 ;; Auto vars:     Size  Location     Type
 11144 ;;  d               1    0[BANK0 ] unsigned char 
 11145 ;; Return value:  Size  Location     Type
 11146 ;;                  1    wreg      void 
 11147 ;; Registers used:
 11148 ;;		wreg
 11149 ;; Tracked objects:
 11150 ;;		On entry : 0/0
 11151 ;;		On exit  : 0/0
 11152 ;;		Unchanged: 0/0
 11153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11154 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11155 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11156 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11157 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11158 ;;Total ram usage:        1 bytes
 11159 ;; Hardware stack levels used:    1
 11160 ;; Hardware stack levels required when called:    5
 11161 ;; This function calls:
 11162 ;;		Nothing
 11163 ;; This function is called by:
 11164 ;;		_I2C_Write_Byte
 11165 ;; This function uses a non-reentrant model
 11166 ;;
 11167                           
 11168                           
 11169                           ;psect for function _i2c1_driver_TXData
 11170  08DF                     _i2c1_driver_TXData:	
 11171                           
 11172                           ;incstack = 0
 11173                           ; Regs used in _i2c1_driver_TXData: [wreg]
 11174                           ;i2c1_driver_TXData@d stored from wreg
 11175  08DF  0020               	movlb	0	; select bank0
 11176  08E0  00A0               	movwf	i2c1_driver_TXData@d
 11177                           
 11178                           ;mcc_generated_files/i2c1_driver.c: 186: __attribute__((inline)) void i2c1_driver_TXData
      +                          (char d);mcc_generated_files/i2c1_driver.c: 187: {;mcc_generated_files/i2c1_driver.c: 18
      +                          8:     SSP1BUF = d;
 11179  08E1  0820               	movf	i2c1_driver_TXData@d,w
 11180  08E2  0024               	movlb	4	; select bank4
 11181  08E3  0091               	movwf	17	;volatile
 11182  08E4  0008               	return
 11183  08E5                     __end_of_i2c1_driver_TXData:	
 11184                           
 11185                           	psect	text35
 11186  07FD                     __ptext35:	
 11187 ;; *************** function _I2C_Stop *****************
 11188 ;; Defined at:
 11189 ;;		line 50 in file "i2c.c"
 11190 ;; Parameters:    Size  Location     Type
 11191 ;;		None
 11192 ;; Auto vars:     Size  Location     Type
 11193 ;;		None
 11194 ;; Return value:  Size  Location     Type
 11195 ;;                  1    wreg      void 
 11196 ;; Registers used:
 11197 ;;		status,2, status,0, pclath, cstack
 11198 ;; Tracked objects:
 11199 ;;		On entry : 0/0
 11200 ;;		On exit  : 0/0
 11201 ;;		Unchanged: 0/0
 11202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11204 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11205 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11206 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11207 ;;Total ram usage:        0 bytes
 11208 ;; Hardware stack levels used:    1
 11209 ;; Hardware stack levels required when called:    6
 11210 ;; This function calls:
 11211 ;;		_i2c1_driver_stop
 11212 ;; This function is called by:
 11213 ;;		_wireReadDataBlock
 11214 ;;		_wireWriteDataByte
 11215 ;;		_wireReadDataByte
 11216 ;; This function uses a non-reentrant model
 11217 ;;
 11218                           
 11219                           
 11220                           ;psect for function _I2C_Stop
 11221  07FD                     _I2C_Stop:	
 11222                           
 11223                           ;i2c.c: 52:  i2c1_driver_stop();
 11224                           
 11225                           ;incstack = 0
 11226                           ; Regs used in _I2C_Stop: [status,2+status,0+pclath+cstack]
 11227  07FD  3188  209C         	fcall	_i2c1_driver_stop
 11228  07FF  0008               	return
 11229  0800                     __end_of_I2C_Stop:	
 11230                           
 11231                           	psect	text36
 11232  089C                     __ptext36:	
 11233 ;; *************** function _i2c1_driver_stop *****************
 11234 ;; Defined at:
 11235 ;;		line 156 in file "mcc_generated_files/i2c1_driver.c"
 11236 ;; Parameters:    Size  Location     Type
 11237 ;;		None
 11238 ;; Auto vars:     Size  Location     Type
 11239 ;;		None
 11240 ;; Return value:  Size  Location     Type
 11241 ;;                  1    wreg      void 
 11242 ;; Registers used:
 11243 ;;		None
 11244 ;; Tracked objects:
 11245 ;;		On entry : 0/0
 11246 ;;		On exit  : 0/0
 11247 ;;		Unchanged: 0/0
 11248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11250 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11252 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11253 ;;Total ram usage:        0 bytes
 11254 ;; Hardware stack levels used:    1
 11255 ;; Hardware stack levels required when called:    5
 11256 ;; This function calls:
 11257 ;;		Nothing
 11258 ;; This function is called by:
 11259 ;;		_I2C_Stop
 11260 ;; This function uses a non-reentrant model
 11261 ;;
 11262                           
 11263                           
 11264                           ;psect for function _i2c1_driver_stop
 11265  089C                     _i2c1_driver_stop:	
 11266                           
 11267                           ;mcc_generated_files/i2c1_driver.c: 158:     SSP1CON2bits.PEN = 1;
 11268                           
 11269                           ;incstack = 0
 11270                           ; Regs used in _i2c1_driver_stop: []
 11271  089C  0024               	movlb	4	; select bank4
 11272  089D  1516               	bsf	22,2	;volatile
 11273  089E  0008               	return
 11274  089F                     __end_of_i2c1_driver_stop:	
 11275                           
 11276                           	psect	text37
 11277  0899                     __ptext37:	
 11278 ;; *************** function _I2C_Start *****************
 11279 ;; Defined at:
 11280 ;;		line 35 in file "i2c.c"
 11281 ;; Parameters:    Size  Location     Type
 11282 ;;		None
 11283 ;; Auto vars:     Size  Location     Type
 11284 ;;		None
 11285 ;; Return value:  Size  Location     Type
 11286 ;;                  1    wreg      void 
 11287 ;; Registers used:
 11288 ;;		status,2, status,0, pclath, cstack
 11289 ;; Tracked objects:
 11290 ;;		On entry : 0/0
 11291 ;;		On exit  : 0/0
 11292 ;;		Unchanged: 0/0
 11293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11294 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11295 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11296 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11297 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11298 ;;Total ram usage:        0 bytes
 11299 ;; Hardware stack levels used:    1
 11300 ;; Hardware stack levels required when called:    6
 11301 ;; This function calls:
 11302 ;;		_i2c1_driver_start
 11303 ;; This function is called by:
 11304 ;;		_wireReadDataBlock
 11305 ;;		_wireWriteDataByte
 11306 ;;		_wireReadDataByte
 11307 ;; This function uses a non-reentrant model
 11308 ;;
 11309                           
 11310                           
 11311                           ;psect for function _I2C_Start
 11312  0899                     _I2C_Start:	
 11313                           
 11314                           ;i2c.c: 37:  i2c1_driver_start();
 11315                           
 11316                           ;incstack = 0
 11317                           ; Regs used in _I2C_Start: [status,2+status,0+pclath+cstack]
 11318  0899  3188  2096         	fcall	_i2c1_driver_start
 11319  089B  0008               	return
 11320  089C                     __end_of_I2C_Start:	
 11321                           
 11322                           	psect	text38
 11323  0896                     __ptext38:	
 11324 ;; *************** function _i2c1_driver_start *****************
 11325 ;; Defined at:
 11326 ;;		line 146 in file "mcc_generated_files/i2c1_driver.c"
 11327 ;; Parameters:    Size  Location     Type
 11328 ;;		None
 11329 ;; Auto vars:     Size  Location     Type
 11330 ;;		None
 11331 ;; Return value:  Size  Location     Type
 11332 ;;                  1    wreg      void 
 11333 ;; Registers used:
 11334 ;;		None
 11335 ;; Tracked objects:
 11336 ;;		On entry : 0/0
 11337 ;;		On exit  : 0/0
 11338 ;;		Unchanged: 0/0
 11339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11341 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11343 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11344 ;;Total ram usage:        0 bytes
 11345 ;; Hardware stack levels used:    1
 11346 ;; Hardware stack levels required when called:    5
 11347 ;; This function calls:
 11348 ;;		Nothing
 11349 ;; This function is called by:
 11350 ;;		_I2C_Start
 11351 ;;		_i2c_masterOperation
 11352 ;; This function uses a non-reentrant model
 11353 ;;
 11354                           
 11355                           
 11356                           ;psect for function _i2c1_driver_start
 11357  0896                     _i2c1_driver_start:	
 11358                           
 11359                           ;mcc_generated_files/i2c1_driver.c: 148:     SSP1CON2bits.SEN = 1;
 11360                           
 11361                           ;incstack = 0
 11362                           ; Regs used in _i2c1_driver_start: []
 11363  0896  0024               	movlb	4	; select bank4
 11364  0897  1416               	bsf	22,0	;volatile
 11365  0898  0008               	return
 11366  0899                     __end_of_i2c1_driver_start:	
 11367                           
 11368                           	psect	text39
 11369  0893                     __ptext39:	
 11370 ;; *************** function _I2C_Send_NACK *****************
 11371 ;; Defined at:
 11372 ;;		line 66 in file "i2c.c"
 11373 ;; Parameters:    Size  Location     Type
 11374 ;;		None
 11375 ;; Auto vars:     Size  Location     Type
 11376 ;;		None
 11377 ;; Return value:  Size  Location     Type
 11378 ;;                  1    wreg      void 
 11379 ;; Registers used:
 11380 ;;		status,2, status,0, pclath, cstack
 11381 ;; Tracked objects:
 11382 ;;		On entry : 0/0
 11383 ;;		On exit  : 0/0
 11384 ;;		Unchanged: 0/0
 11385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11386 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11387 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11389 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11390 ;;Total ram usage:        0 bytes
 11391 ;; Hardware stack levels used:    1
 11392 ;; Hardware stack levels required when called:    6
 11393 ;; This function calls:
 11394 ;;		_i2c1_driver_sendNACK
 11395 ;; This function is called by:
 11396 ;;		_wireReadDataBlock
 11397 ;;		_wireReadDataByte
 11398 ;; This function uses a non-reentrant model
 11399 ;;
 11400                           
 11401                           
 11402                           ;psect for function _I2C_Send_NACK
 11403  0893                     _I2C_Send_NACK:	
 11404                           
 11405                           ;i2c.c: 68:     i2c1_driver_sendNACK();
 11406                           
 11407                           ;incstack = 0
 11408                           ; Regs used in _I2C_Send_NACK: [status,2+status,0+pclath+cstack]
 11409  0893  3188  20CB         	fcall	_i2c1_driver_sendNACK
 11410  0895  0008               	return
 11411  0896                     __end_of_I2C_Send_NACK:	
 11412                           
 11413                           	psect	text40
 11414  08CB                     __ptext40:	
 11415 ;; *************** function _i2c1_driver_sendNACK *****************
 11416 ;; Defined at:
 11417 ;;		line 202 in file "mcc_generated_files/i2c1_driver.c"
 11418 ;; Parameters:    Size  Location     Type
 11419 ;;		None
 11420 ;; Auto vars:     Size  Location     Type
 11421 ;;		None
 11422 ;; Return value:  Size  Location     Type
 11423 ;;                  1    wreg      void 
 11424 ;; Registers used:
 11425 ;;		None
 11426 ;; Tracked objects:
 11427 ;;		On entry : 0/0
 11428 ;;		On exit  : 0/0
 11429 ;;		Unchanged: 0/0
 11430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11431 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11432 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11433 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11434 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11435 ;;Total ram usage:        0 bytes
 11436 ;; Hardware stack levels used:    1
 11437 ;; Hardware stack levels required when called:    5
 11438 ;; This function calls:
 11439 ;;		Nothing
 11440 ;; This function is called by:
 11441 ;;		_I2C_Send_NACK
 11442 ;; This function uses a non-reentrant model
 11443 ;;
 11444                           
 11445                           
 11446                           ;psect for function _i2c1_driver_sendNACK
 11447  08CB                     _i2c1_driver_sendNACK:	
 11448                           
 11449                           ;mcc_generated_files/i2c1_driver.c: 204:     SSP1CON2bits.ACKDT = 1;
 11450                           
 11451                           ;incstack = 0
 11452                           ; Regs used in _i2c1_driver_sendNACK: []
 11453  08CB  0024               	movlb	4	; select bank4
 11454  08CC  1696               	bsf	22,5	;volatile
 11455                           
 11456                           ;mcc_generated_files/i2c1_driver.c: 205:     SSP1CON2bits.ACKEN = 1;
 11457  08CD  1616               	bsf	22,4	;volatile
 11458  08CE  0008               	return
 11459  08CF                     __end_of_i2c1_driver_sendNACK:	
 11460                           
 11461                           	psect	text41
 11462  095F                     __ptext41:	
 11463 ;; *************** function _I2C_Read_Byte *****************
 11464 ;; Defined at:
 11465 ;;		line 115 in file "i2c.c"
 11466 ;; Parameters:    Size  Location     Type
 11467 ;;		None
 11468 ;; Auto vars:     Size  Location     Type
 11469 ;;		None
 11470 ;; Return value:  Size  Location     Type
 11471 ;;                  1    wreg      unsigned char 
 11472 ;; Registers used:
 11473 ;;		wreg, status,2, status,0, pclath, cstack
 11474 ;; Tracked objects:
 11475 ;;		On entry : 0/0
 11476 ;;		On exit  : 0/0
 11477 ;;		Unchanged: 0/0
 11478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11479 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11480 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11482 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11483 ;;Total ram usage:        0 bytes
 11484 ;; Hardware stack levels used:    1
 11485 ;; Hardware stack levels required when called:    6
 11486 ;; This function calls:
 11487 ;;		_i2c1_driver_getRXData
 11488 ;;		_i2c1_driver_isBufferFull
 11489 ;;		_i2c1_driver_startRX
 11490 ;; This function is called by:
 11491 ;;		_wireReadDataBlock
 11492 ;;		_wireReadDataByte
 11493 ;; This function uses a non-reentrant model
 11494 ;;
 11495                           
 11496                           
 11497                           ;psect for function _I2C_Read_Byte
 11498  095F                     _I2C_Read_Byte:	
 11499                           
 11500                           ;i2c.c: 117:     i2c1_driver_startRX();
 11501                           
 11502                           ;incstack = 0
 11503                           ; Regs used in _I2C_Read_Byte: [wreg+status,2+status,0+pclath+cstack]
 11504  095F  3188  2090  3189   	fcall	_i2c1_driver_startRX
 11505  0962                     l5782:	
 11506                           ;i2c.c: 121:  while (i2c1_driver_isBufferFull() == 0) {
 11507                           
 11508                           
 11509                           ;i2c.c: 121:  while (i2c1_driver_isBufferFull() == 0) {
 11510  0962  3189  210D  3189   	fcall	_i2c1_driver_isBufferFull
 11511  0965  1C03               	btfss	3,0
 11512  0966  2962               	goto	l5782
 11513                           
 11514                           ;i2c.c: 137:   return i2c1_driver_getRXData();
 11515  0967  3188  208D         	fcall	_i2c1_driver_getRXData
 11516  0969  0008               	return
 11517  096A                     __end_of_I2C_Read_Byte:	
 11518                           
 11519                           	psect	text42
 11520  0890                     __ptext42:	
 11521 ;; *************** function _i2c1_driver_startRX *****************
 11522 ;; Defined at:
 11523 ;;		line 166 in file "mcc_generated_files/i2c1_driver.c"
 11524 ;; Parameters:    Size  Location     Type
 11525 ;;		None
 11526 ;; Auto vars:     Size  Location     Type
 11527 ;;		None
 11528 ;; Return value:  Size  Location     Type
 11529 ;;                  1    wreg      void 
 11530 ;; Registers used:
 11531 ;;		None
 11532 ;; Tracked objects:
 11533 ;;		On entry : 0/0
 11534 ;;		On exit  : 0/0
 11535 ;;		Unchanged: 0/0
 11536 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11537 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11538 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11539 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11540 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11541 ;;Total ram usage:        0 bytes
 11542 ;; Hardware stack levels used:    1
 11543 ;; Hardware stack levels required when called:    5
 11544 ;; This function calls:
 11545 ;;		Nothing
 11546 ;; This function is called by:
 11547 ;;		_I2C_Read_Byte
 11548 ;; This function uses a non-reentrant model
 11549 ;;
 11550                           
 11551                           
 11552                           ;psect for function _i2c1_driver_startRX
 11553  0890                     _i2c1_driver_startRX:	
 11554                           
 11555                           ;mcc_generated_files/i2c1_driver.c: 168:     SSP1CON2bits.RCEN = 1;
 11556                           
 11557                           ;incstack = 0
 11558                           ; Regs used in _i2c1_driver_startRX: []
 11559  0890  0024               	movlb	4	; select bank4
 11560  0891  1596               	bsf	22,3	;volatile
 11561  0892  0008               	return
 11562  0893                     __end_of_i2c1_driver_startRX:	
 11563                           
 11564                           	psect	text43
 11565  090D                     __ptext43:	
 11566 ;; *************** function _i2c1_driver_isBufferFull *****************
 11567 ;; Defined at:
 11568 ;;		line 213 in file "mcc_generated_files/i2c1_driver.c"
 11569 ;; Parameters:    Size  Location     Type
 11570 ;;		None
 11571 ;; Auto vars:     Size  Location     Type
 11572 ;;		None
 11573 ;; Return value:  Size  Location     Type
 11574 ;;		None               void
 11575 ;; Registers used:
 11576 ;;		wreg, status,2, status,0
 11577 ;; Tracked objects:
 11578 ;;		On entry : 0/0
 11579 ;;		On exit  : 0/0
 11580 ;;		Unchanged: 0/0
 11581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11582 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11583 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11584 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11585 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11586 ;;Total ram usage:        1 bytes
 11587 ;; Hardware stack levels used:    1
 11588 ;; Hardware stack levels required when called:    5
 11589 ;; This function calls:
 11590 ;;		Nothing
 11591 ;; This function is called by:
 11592 ;;		_I2C_Read_Byte
 11593 ;; This function uses a non-reentrant model
 11594 ;;
 11595                           
 11596                           
 11597                           ;psect for function _i2c1_driver_isBufferFull
 11598  090D                     _i2c1_driver_isBufferFull:	
 11599                           
 11600                           ;mcc_generated_files/i2c1_driver.c: 215:     return SSP1STATbits.BF;
 11601                           
 11602                           ;incstack = 0
 11603                           ; Regs used in _i2c1_driver_isBufferFull: [wreg+status,2+status,0]
 11604  090D  0024               	movlb	4	; select bank4
 11605  090E  0814               	movf	20,w	;volatile
 11606  090F  3901               	andlw	1
 11607  0910  0020               	movlb	0	; select bank0
 11608  0911  00A0               	movwf	??_i2c1_driver_isBufferFull
 11609  0912  0C20               	rrf	??_i2c1_driver_isBufferFull,w
 11610  0913  0008               	return
 11611  0914                     __end_of_i2c1_driver_isBufferFull:	
 11612                           
 11613                           	psect	text44
 11614  088D                     __ptext44:	
 11615 ;; *************** function _i2c1_driver_getRXData *****************
 11616 ;; Defined at:
 11617 ;;		line 171 in file "mcc_generated_files/i2c1_driver.c"
 11618 ;; Parameters:    Size  Location     Type
 11619 ;;		None
 11620 ;; Auto vars:     Size  Location     Type
 11621 ;;		None
 11622 ;; Return value:  Size  Location     Type
 11623 ;;                  1    wreg      unsigned char 
 11624 ;; Registers used:
 11625 ;;		wreg
 11626 ;; Tracked objects:
 11627 ;;		On entry : 0/0
 11628 ;;		On exit  : 0/0
 11629 ;;		Unchanged: 0/0
 11630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11631 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11632 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11633 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11634 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11635 ;;Total ram usage:        0 bytes
 11636 ;; Hardware stack levels used:    1
 11637 ;; Hardware stack levels required when called:    5
 11638 ;; This function calls:
 11639 ;;		Nothing
 11640 ;; This function is called by:
 11641 ;;		_I2C_Read_Byte
 11642 ;; This function uses a non-reentrant model
 11643 ;;
 11644                           
 11645                           
 11646                           ;psect for function _i2c1_driver_getRXData
 11647  088D                     _i2c1_driver_getRXData:	
 11648                           
 11649                           ;mcc_generated_files/i2c1_driver.c: 173:     return SSP1BUF;
 11650                           
 11651                           ;incstack = 0
 11652                           ; Regs used in _i2c1_driver_getRXData: [wreg]
 11653  088D  0024               	movlb	4	; select bank4
 11654  088E  0811               	movf	17,w	;volatile
 11655  088F  0008               	return
 11656  0890                     __end_of_i2c1_driver_getRXData:	
 11657                           
 11658                           	psect	text45
 11659  088A                     __ptext45:	
 11660 ;; *************** function _I2C_ReStart *****************
 11661 ;; Defined at:
 11662 ;;		line 43 in file "i2c.c"
 11663 ;; Parameters:    Size  Location     Type
 11664 ;;		None
 11665 ;; Auto vars:     Size  Location     Type
 11666 ;;		None
 11667 ;; Return value:  Size  Location     Type
 11668 ;;                  1    wreg      void 
 11669 ;; Registers used:
 11670 ;;		status,2, status,0, pclath, cstack
 11671 ;; Tracked objects:
 11672 ;;		On entry : 0/0
 11673 ;;		On exit  : 0/0
 11674 ;;		Unchanged: 0/0
 11675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11676 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11677 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11678 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11679 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11680 ;;Total ram usage:        0 bytes
 11681 ;; Hardware stack levels used:    1
 11682 ;; Hardware stack levels required when called:    6
 11683 ;; This function calls:
 11684 ;;		_i2c1_driver_restart
 11685 ;; This function is called by:
 11686 ;;		_wireReadDataBlock
 11687 ;;		_wireReadDataByte
 11688 ;; This function uses a non-reentrant model
 11689 ;;
 11690                           
 11691                           
 11692                           ;psect for function _I2C_ReStart
 11693  088A                     _I2C_ReStart:	
 11694                           
 11695                           ;i2c.c: 45:  i2c1_driver_restart();
 11696                           
 11697                           ;incstack = 0
 11698                           ; Regs used in _I2C_ReStart: [status,2+status,0+pclath+cstack]
 11699  088A  3188  2087         	fcall	_i2c1_driver_restart
 11700  088C  0008               	return
 11701  088D                     __end_of_I2C_ReStart:	
 11702                           
 11703                           	psect	text46
 11704  0887                     __ptext46:	
 11705 ;; *************** function _i2c1_driver_restart *****************
 11706 ;; Defined at:
 11707 ;;		line 151 in file "mcc_generated_files/i2c1_driver.c"
 11708 ;; Parameters:    Size  Location     Type
 11709 ;;		None
 11710 ;; Auto vars:     Size  Location     Type
 11711 ;;		None
 11712 ;; Return value:  Size  Location     Type
 11713 ;;                  1    wreg      void 
 11714 ;; Registers used:
 11715 ;;		None
 11716 ;; Tracked objects:
 11717 ;;		On entry : 0/0
 11718 ;;		On exit  : 0/0
 11719 ;;		Unchanged: 0/0
 11720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11722 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11723 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11724 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11725 ;;Total ram usage:        0 bytes
 11726 ;; Hardware stack levels used:    1
 11727 ;; Hardware stack levels required when called:    5
 11728 ;; This function calls:
 11729 ;;		Nothing
 11730 ;; This function is called by:
 11731 ;;		_I2C_ReStart
 11732 ;; This function uses a non-reentrant model
 11733 ;;
 11734                           
 11735                           
 11736                           ;psect for function _i2c1_driver_restart
 11737  0887                     _i2c1_driver_restart:	
 11738                           
 11739                           ;mcc_generated_files/i2c1_driver.c: 153:     SSP1CON2bits.RSEN = 1;
 11740                           
 11741                           ;incstack = 0
 11742                           ; Regs used in _i2c1_driver_restart: []
 11743  0887  0024               	movlb	4	; select bank4
 11744  0888  1496               	bsf	22,1	;volatile
 11745  0889  0008               	return
 11746  088A                     __end_of_i2c1_driver_restart:	
 11747                           
 11748                           	psect	text47
 11749  0A47                     __ptext47:	
 11750 ;; *************** function _SYSTEM_Initialize *****************
 11751 ;; Defined at:
 11752 ;;		line 50 in file "mcc_generated_files/mcc.c"
 11753 ;; Parameters:    Size  Location     Type
 11754 ;;		None
 11755 ;; Auto vars:     Size  Location     Type
 11756 ;;		None
 11757 ;; Return value:  Size  Location     Type
 11758 ;;                  1    wreg      void 
 11759 ;; Registers used:
 11760 ;;		wreg, status,2, status,0, pclath, cstack
 11761 ;; Tracked objects:
 11762 ;;		On entry : 0/0
 11763 ;;		On exit  : 0/0
 11764 ;;		Unchanged: 0/0
 11765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11766 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11767 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11768 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11769 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11770 ;;Total ram usage:        0 bytes
 11771 ;; Hardware stack levels used:    1
 11772 ;; Hardware stack levels required when called:    6
 11773 ;; This function calls:
 11774 ;;		_ADC_Initialize
 11775 ;;		_OSCILLATOR_Initialize
 11776 ;;		_PIN_MANAGER_Initialize
 11777 ;;		_PMD_Initialize
 11778 ;;		_PWM1_Initialize
 11779 ;;		_SPI2_Initialize
 11780 ;;		_TMR2_Initialize
 11781 ;;		_WDT_Initialize
 11782 ;; This function is called by:
 11783 ;;		_main
 11784 ;; This function uses a non-reentrant model
 11785 ;;
 11786                           
 11787                           
 11788                           ;psect for function _SYSTEM_Initialize
 11789  0A47                     _SYSTEM_Initialize:	
 11790                           
 11791                           ;mcc_generated_files/mcc.c: 53:     PMD_Initialize();
 11792                           
 11793                           ;incstack = 0
 11794                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
 11795  0A47  3189  2134  318A   	fcall	_PMD_Initialize
 11796                           
 11797                           ;mcc_generated_files/mcc.c: 54:     PIN_MANAGER_Initialize();
 11798  0A4A  318D  2543  318A   	fcall	_PIN_MANAGER_Initialize
 11799                           
 11800                           ;mcc_generated_files/mcc.c: 55:     OSCILLATOR_Initialize();
 11801  0A4D  3189  212C  318A   	fcall	_OSCILLATOR_Initialize
 11802                           
 11803                           ;mcc_generated_files/mcc.c: 56:     WDT_Initialize();
 11804  0A50  3188  20C7  318A   	fcall	_WDT_Initialize
 11805                           
 11806                           ;mcc_generated_files/mcc.c: 57:     SPI2_Initialize();
 11807  0A53  3189  2106  318A   	fcall	_SPI2_Initialize
 11808                           
 11809                           ;mcc_generated_files/mcc.c: 58:     PWM1_Initialize();
 11810  0A56  3189  216A  318A   	fcall	_PWM1_Initialize
 11811                           
 11812                           ;mcc_generated_files/mcc.c: 59:     ADC_Initialize();
 11813  0A59  3189  2124  318A   	fcall	_ADC_Initialize
 11814                           
 11815                           ;mcc_generated_files/mcc.c: 60:     TMR2_Initialize();
 11816  0A5C  3189  213C         	fcall	_TMR2_Initialize
 11817  0A5E  0008               	return
 11818  0A5F                     __end_of_SYSTEM_Initialize:	
 11819                           
 11820                           	psect	text48
 11821  08C7                     __ptext48:	
 11822 ;; *************** function _WDT_Initialize *****************
 11823 ;; Defined at:
 11824 ;;		line 77 in file "mcc_generated_files/mcc.c"
 11825 ;; Parameters:    Size  Location     Type
 11826 ;;		None
 11827 ;; Auto vars:     Size  Location     Type
 11828 ;;		None
 11829 ;; Return value:  Size  Location     Type
 11830 ;;                  1    wreg      void 
 11831 ;; Registers used:
 11832 ;;		wreg
 11833 ;; Tracked objects:
 11834 ;;		On entry : 0/0
 11835 ;;		On exit  : 0/0
 11836 ;;		Unchanged: 0/0
 11837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11838 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11839 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11840 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11841 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11842 ;;Total ram usage:        0 bytes
 11843 ;; Hardware stack levels used:    1
 11844 ;; Hardware stack levels required when called:    5
 11845 ;; This function calls:
 11846 ;;		Nothing
 11847 ;; This function is called by:
 11848 ;;		_SYSTEM_Initialize
 11849 ;; This function uses a non-reentrant model
 11850 ;;
 11851                           
 11852                           
 11853                           ;psect for function _WDT_Initialize
 11854  08C7                     _WDT_Initialize:	
 11855                           
 11856                           ;mcc_generated_files/mcc.c: 80:     WDTCON = 0x18;
 11857                           
 11858                           ;incstack = 0
 11859                           ; Regs used in _WDT_Initialize: [wreg]
 11860  08C7  3018               	movlw	24
 11861  08C8  0021               	movlb	1	; select bank1
 11862  08C9  0097               	movwf	23	;volatile
 11863  08CA  0008               	return
 11864  08CB                     __end_of_WDT_Initialize:	
 11865                           
 11866                           	psect	text49
 11867  093C                     __ptext49:	
 11868 ;; *************** function _TMR2_Initialize *****************
 11869 ;; Defined at:
 11870 ;;		line 62 in file "mcc_generated_files/tmr2.c"
 11871 ;; Parameters:    Size  Location     Type
 11872 ;;		None
 11873 ;; Auto vars:     Size  Location     Type
 11874 ;;		None
 11875 ;; Return value:  Size  Location     Type
 11876 ;;                  1    wreg      void 
 11877 ;; Registers used:
 11878 ;;		wreg, status,2
 11879 ;; Tracked objects:
 11880 ;;		On entry : 0/0
 11881 ;;		On exit  : 0/0
 11882 ;;		Unchanged: 0/0
 11883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11884 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11885 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11887 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11888 ;;Total ram usage:        0 bytes
 11889 ;; Hardware stack levels used:    1
 11890 ;; Hardware stack levels required when called:    5
 11891 ;; This function calls:
 11892 ;;		Nothing
 11893 ;; This function is called by:
 11894 ;;		_SYSTEM_Initialize
 11895 ;; This function uses a non-reentrant model
 11896 ;;
 11897                           
 11898                           
 11899                           ;psect for function _TMR2_Initialize
 11900  093C                     _TMR2_Initialize:	
 11901                           
 11902                           ;mcc_generated_files/tmr2.c: 67:     PR2 = 0xFF;
 11903                           
 11904                           ;incstack = 0
 11905                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
 11906  093C  30FF               	movlw	255
 11907  093D  0020               	movlb	0	; select bank0
 11908  093E  009E               	movwf	30	;volatile
 11909                           
 11910                           ;mcc_generated_files/tmr2.c: 70:     TMR2 = 0x00;
 11911  093F  019D               	clrf	29	;volatile
 11912                           
 11913                           ;mcc_generated_files/tmr2.c: 73:     PIR1bits.TMR2IF = 0;
 11914  0940  1091               	bcf	17,1	;volatile
 11915                           
 11916                           ;mcc_generated_files/tmr2.c: 76:     T2CON = 0x04;
 11917  0941  3004               	movlw	4
 11918  0942  009F               	movwf	31	;volatile
 11919  0943  0008               	return
 11920  0944                     __end_of_TMR2_Initialize:	
 11921                           
 11922                           	psect	text50
 11923  0906                     __ptext50:	
 11924 ;; *************** function _SPI2_Initialize *****************
 11925 ;; Defined at:
 11926 ;;		line 65 in file "mcc_generated_files/spi2.c"
 11927 ;; Parameters:    Size  Location     Type
 11928 ;;		None
 11929 ;; Auto vars:     Size  Location     Type
 11930 ;;		None
 11931 ;; Return value:  Size  Location     Type
 11932 ;;                  1    wreg      void 
 11933 ;; Registers used:
 11934 ;;		wreg, status,2
 11935 ;; Tracked objects:
 11936 ;;		On entry : 0/0
 11937 ;;		On exit  : 0/0
 11938 ;;		Unchanged: 0/0
 11939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11941 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11942 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11943 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11944 ;;Total ram usage:        0 bytes
 11945 ;; Hardware stack levels used:    1
 11946 ;; Hardware stack levels required when called:    5
 11947 ;; This function calls:
 11948 ;;		Nothing
 11949 ;; This function is called by:
 11950 ;;		_SYSTEM_Initialize
 11951 ;; This function uses a non-reentrant model
 11952 ;;
 11953                           
 11954                           
 11955                           ;psect for function _SPI2_Initialize
 11956  0906                     _SPI2_Initialize:	
 11957                           
 11958                           ;mcc_generated_files/spi2.c: 70:     SSP2STAT = 0x80;
 11959                           
 11960                           ;incstack = 0
 11961                           ; Regs used in _SPI2_Initialize: [wreg+status,2]
 11962  0906  3080               	movlw	128
 11963  0907  0024               	movlb	4	; select bank4
 11964  0908  009C               	movwf	28	;volatile
 11965                           
 11966                           ;mcc_generated_files/spi2.c: 73:     SSP2CON1 = 0x31;
 11967  0909  3031               	movlw	49
 11968  090A  009D               	movwf	29	;volatile
 11969                           
 11970                           ;mcc_generated_files/spi2.c: 76:     SSP2ADD = 0x00;
 11971  090B  019A               	clrf	26	;volatile
 11972  090C  0008               	return
 11973  090D                     __end_of_SPI2_Initialize:	
 11974                           
 11975                           	psect	text51
 11976  096A                     __ptext51:	
 11977 ;; *************** function _PWM1_Initialize *****************
 11978 ;; Defined at:
 11979 ;;		line 64 in file "mcc_generated_files/pwm1.c"
 11980 ;; Parameters:    Size  Location     Type
 11981 ;;		None
 11982 ;; Auto vars:     Size  Location     Type
 11983 ;;		None
 11984 ;; Return value:  Size  Location     Type
 11985 ;;                  1    wreg      void 
 11986 ;; Registers used:
 11987 ;;		wreg, status,2, status,0
 11988 ;; Tracked objects:
 11989 ;;		On entry : 0/0
 11990 ;;		On exit  : 0/0
 11991 ;;		Unchanged: 0/0
 11992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11993 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11994 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11995 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11996 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11997 ;;Total ram usage:        0 bytes
 11998 ;; Hardware stack levels used:    1
 11999 ;; Hardware stack levels required when called:    5
 12000 ;; This function calls:
 12001 ;;		Nothing
 12002 ;; This function is called by:
 12003 ;;		_SYSTEM_Initialize
 12004 ;; This function uses a non-reentrant model
 12005 ;;
 12006                           
 12007                           
 12008                           ;psect for function _PWM1_Initialize
 12009  096A                     _PWM1_Initialize:	
 12010                           
 12011                           ;mcc_generated_files/pwm1.c: 69:  CCP1CON = 0x8F;
 12012                           
 12013                           ;incstack = 0
 12014                           ; Regs used in _PWM1_Initialize: [wreg+status,2+status,0]
 12015  096A  308F               	movlw	143
 12016  096B  0025               	movlb	5	; select bank5
 12017  096C  0093               	movwf	19	;volatile
 12018                           
 12019                           ;mcc_generated_files/pwm1.c: 72:  CCPR1H = 0x01;
 12020  096D  3001               	movlw	1
 12021  096E  0092               	movwf	18	;volatile
 12022                           
 12023                           ;mcc_generated_files/pwm1.c: 75:  CCPR1L = 0xFF;
 12024  096F  30FF               	movlw	255
 12025  0970  0091               	movwf	17	;volatile
 12026                           
 12027                           ;mcc_generated_files/pwm1.c: 78:  CCPTMRSbits.C1TSEL = 0x1;
 12028  0971  081F               	movf	31,w	;volatile
 12029  0972  39FC               	andlw	-4
 12030  0973  3801               	iorlw	1
 12031  0974  009F               	movwf	31	;volatile
 12032  0975  0008               	return
 12033  0976                     __end_of_PWM1_Initialize:	
 12034                           
 12035                           	psect	text52
 12036  0934                     __ptext52:	
 12037 ;; *************** function _PMD_Initialize *****************
 12038 ;; Defined at:
 12039 ;;		line 83 in file "mcc_generated_files/mcc.c"
 12040 ;; Parameters:    Size  Location     Type
 12041 ;;		None
 12042 ;; Auto vars:     Size  Location     Type
 12043 ;;		None
 12044 ;; Return value:  Size  Location     Type
 12045 ;;                  1    wreg      void 
 12046 ;; Registers used:
 12047 ;;		status,2
 12048 ;; Tracked objects:
 12049 ;;		On entry : 0/0
 12050 ;;		On exit  : 0/0
 12051 ;;		Unchanged: 0/0
 12052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12053 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12054 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12055 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12056 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12057 ;;Total ram usage:        0 bytes
 12058 ;; Hardware stack levels used:    1
 12059 ;; Hardware stack levels required when called:    5
 12060 ;; This function calls:
 12061 ;;		Nothing
 12062 ;; This function is called by:
 12063 ;;		_SYSTEM_Initialize
 12064 ;; This function uses a non-reentrant model
 12065 ;;
 12066                           
 12067                           
 12068                           ;psect for function _PMD_Initialize
 12069  0934                     _PMD_Initialize:	
 12070                           
 12071                           ;mcc_generated_files/mcc.c: 86:     PMD0 = 0x00;
 12072                           
 12073                           ;incstack = 0
 12074                           ; Regs used in _PMD_Initialize: [status,2]
 12075  0934  0032               	movlb	18	; select bank18
 12076  0935  0191               	clrf	17	;volatile
 12077                           
 12078                           ;mcc_generated_files/mcc.c: 88:     PMD1 = 0x00;
 12079  0936  0192               	clrf	18	;volatile
 12080                           
 12081                           ;mcc_generated_files/mcc.c: 90:     PMD2 = 0x00;
 12082  0937  0193               	clrf	19	;volatile
 12083                           
 12084                           ;mcc_generated_files/mcc.c: 92:     PMD3 = 0x00;
 12085  0938  0194               	clrf	20	;volatile
 12086                           
 12087                           ;mcc_generated_files/mcc.c: 94:     PMD4 = 0x00;
 12088  0939  0195               	clrf	21	;volatile
 12089                           
 12090                           ;mcc_generated_files/mcc.c: 96:     PMD5 = 0x00;
 12091  093A  0196               	clrf	22	;volatile
 12092  093B  0008               	return
 12093  093C                     __end_of_PMD_Initialize:	
 12094                           
 12095                           	psect	text53
 12096  0D43                     __ptext53:	
 12097 ;; *************** function _PIN_MANAGER_Initialize *****************
 12098 ;; Defined at:
 12099 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
 12100 ;; Parameters:    Size  Location     Type
 12101 ;;		None
 12102 ;; Auto vars:     Size  Location     Type
 12103 ;;		None
 12104 ;; Return value:  Size  Location     Type
 12105 ;;                  1    wreg      void 
 12106 ;; Registers used:
 12107 ;;		wreg, status,2
 12108 ;; Tracked objects:
 12109 ;;		On entry : 0/0
 12110 ;;		On exit  : 0/0
 12111 ;;		Unchanged: 0/0
 12112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12113 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12114 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12115 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12116 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12117 ;;Total ram usage:        0 bytes
 12118 ;; Hardware stack levels used:    1
 12119 ;; Hardware stack levels required when called:    5
 12120 ;; This function calls:
 12121 ;;		Nothing
 12122 ;; This function is called by:
 12123 ;;		_SYSTEM_Initialize
 12124 ;; This function uses a non-reentrant model
 12125 ;;
 12126                           
 12127                           
 12128                           ;psect for function _PIN_MANAGER_Initialize
 12129  0D43                     _PIN_MANAGER_Initialize:	
 12130                           
 12131                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x00;
 12132                           
 12133                           ;incstack = 0
 12134                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
 12135  0D43  0022               	movlb	2	; select bank2
 12136  0D44  018C               	clrf	12	;volatile
 12137                           
 12138                           ;mcc_generated_files/pin_manager.c: 61:     LATB = 0x00;
 12139  0D45  018D               	clrf	13	;volatile
 12140                           
 12141                           ;mcc_generated_files/pin_manager.c: 62:     LATC = 0x00;
 12142  0D46  018E               	clrf	14	;volatile
 12143                           
 12144                           ;mcc_generated_files/pin_manager.c: 67:     TRISA = 0x37;
 12145  0D47  3037               	movlw	55
 12146  0D48  0021               	movlb	1	; select bank1
 12147  0D49  008C               	movwf	12	;volatile
 12148                           
 12149                           ;mcc_generated_files/pin_manager.c: 68:     TRISB = 0xB0;
 12150  0D4A  30B0               	movlw	176
 12151  0D4B  008D               	movwf	13	;volatile
 12152                           
 12153                           ;mcc_generated_files/pin_manager.c: 69:     TRISC = 0xB9;
 12154  0D4C  30B9               	movlw	185
 12155  0D4D  008E               	movwf	14	;volatile
 12156                           
 12157                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0xF4;
 12158  0D4E  30F4               	movlw	244
 12159  0D4F  0023               	movlb	3	; select bank3
 12160  0D50  008E               	movwf	14	;volatile
 12161                           
 12162                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0x00;
 12163  0D51  018D               	clrf	13	;volatile
 12164                           
 12165                           ;mcc_generated_files/pin_manager.c: 76:     ANSELA = 0x11;
 12166  0D52  3011               	movlw	17
 12167  0D53  008C               	movwf	12	;volatile
 12168                           
 12169                           ;mcc_generated_files/pin_manager.c: 81:     WPUB = 0x00;
 12170  0D54  0024               	movlb	4	; select bank4
 12171  0D55  018D               	clrf	13	;volatile
 12172                           
 12173                           ;mcc_generated_files/pin_manager.c: 82:     WPUA = 0x00;
 12174  0D56  018C               	clrf	12	;volatile
 12175                           
 12176                           ;mcc_generated_files/pin_manager.c: 83:     WPUC = 0x00;
 12177  0D57  018E               	clrf	14	;volatile
 12178                           
 12179                           ;mcc_generated_files/pin_manager.c: 88:     ODCONA = 0x00;
 12180  0D58  0025               	movlb	5	; select bank5
 12181  0D59  018C               	clrf	12	;volatile
 12182                           
 12183                           ;mcc_generated_files/pin_manager.c: 89:     ODCONB = 0x00;
 12184  0D5A  018D               	clrf	13	;volatile
 12185                           
 12186                           ;mcc_generated_files/pin_manager.c: 90:     ODCONC = 0x00;
 12187  0D5B  018E               	clrf	14	;volatile
 12188                           
 12189                           ;mcc_generated_files/pin_manager.c: 95:     SLRCONA = 0x37;
 12190  0D5C  3037               	movlw	55
 12191  0D5D  0026               	movlb	6	; select bank6
 12192  0D5E  008C               	movwf	12	;volatile
 12193                           
 12194                           ;mcc_generated_files/pin_manager.c: 96:     SLRCONB = 0xF0;
 12195  0D5F  30F0               	movlw	240
 12196  0D60  008D               	movwf	13	;volatile
 12197                           
 12198                           ;mcc_generated_files/pin_manager.c: 97:     SLRCONC = 0xFF;
 12199  0D61  30FF               	movlw	255
 12200  0D62  008E               	movwf	14	;volatile
 12201                           
 12202                           ;mcc_generated_files/pin_manager.c: 105:     PIE0bits.IOCIE = 1;
 12203  0D63  0021               	movlb	1	; select bank1
 12204  0D64  1610               	bsf	16,4	;volatile
 12205                           
 12206                           ;mcc_generated_files/pin_manager.c: 108:     SSP2DATPPS = 0x0C;
 12207  0D65  300C               	movlw	12
 12208  0D66  003C               	movlb	28	; select bank28
 12209  0D67  009E               	movwf	30	;volatile
 12210                           
 12211                           ;mcc_generated_files/pin_manager.c: 109:     SSP1CLKPPS = 0x0F;
 12212  0D68  300F               	movlw	15
 12213  0D69  00A0               	movwf	32	;volatile
 12214                           
 12215                           ;mcc_generated_files/pin_manager.c: 110:     RB6PPS = 0x1A;
 12216  0D6A  301A               	movlw	26
 12217  0D6B  003D               	movlb	29	; select bank29
 12218  0D6C  009E               	movwf	30	;volatile
 12219                           
 12220                           ;mcc_generated_files/pin_manager.c: 111:     RB7PPS = 0x18;
 12221  0D6D  3018               	movlw	24
 12222  0D6E  009F               	movwf	31	;volatile
 12223                           
 12224                           ;mcc_generated_files/pin_manager.c: 112:     RB5PPS = 0x19;
 12225  0D6F  3019               	movlw	25
 12226  0D70  009D               	movwf	29	;volatile
 12227                           
 12228                           ;mcc_generated_files/pin_manager.c: 113:     RC2PPS = 0x1B;
 12229  0D71  301B               	movlw	27
 12230  0D72  00A2               	movwf	34	;volatile
 12231                           
 12232                           ;mcc_generated_files/pin_manager.c: 114:     SSP1DATPPS = 0x0D;
 12233  0D73  300D               	movlw	13
 12234  0D74  003C               	movlb	28	; select bank28
 12235  0D75  00A1               	movwf	33	;volatile
 12236                           
 12237                           ;mcc_generated_files/pin_manager.c: 115:     SSP2CLKPPS = 0x0E;
 12238  0D76  300E               	movlw	14
 12239  0D77  009D               	movwf	29	;volatile
 12240  0D78  0008               	return
 12241  0D79                     __end_of_PIN_MANAGER_Initialize:	
 12242                           
 12243                           	psect	text54
 12244  092C                     __ptext54:	
 12245 ;; *************** function _OSCILLATOR_Initialize *****************
 12246 ;; Defined at:
 12247 ;;		line 63 in file "mcc_generated_files/mcc.c"
 12248 ;; Parameters:    Size  Location     Type
 12249 ;;		None
 12250 ;; Auto vars:     Size  Location     Type
 12251 ;;		None
 12252 ;; Return value:  Size  Location     Type
 12253 ;;                  1    wreg      void 
 12254 ;; Registers used:
 12255 ;;		wreg, status,2
 12256 ;; Tracked objects:
 12257 ;;		On entry : 0/0
 12258 ;;		On exit  : 0/0
 12259 ;;		Unchanged: 0/0
 12260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12261 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12262 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12263 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12264 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12265 ;;Total ram usage:        0 bytes
 12266 ;; Hardware stack levels used:    1
 12267 ;; Hardware stack levels required when called:    5
 12268 ;; This function calls:
 12269 ;;		Nothing
 12270 ;; This function is called by:
 12271 ;;		_SYSTEM_Initialize
 12272 ;; This function uses a non-reentrant model
 12273 ;;
 12274                           
 12275                           
 12276                           ;psect for function _OSCILLATOR_Initialize
 12277  092C                     _OSCILLATOR_Initialize:	
 12278                           
 12279                           ;mcc_generated_files/mcc.c: 66:     OSCCON1 = 0x61;
 12280                           
 12281                           ;incstack = 0
 12282                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 12283  092C  3061               	movlw	97
 12284  092D  0032               	movlb	18	; select bank18
 12285  092E  0099               	movwf	25	;volatile
 12286                           
 12287                           ;mcc_generated_files/mcc.c: 68:     OSCCON3 = 0x00;
 12288  092F  019B               	clrf	27	;volatile
 12289                           
 12290                           ;mcc_generated_files/mcc.c: 70:     OSCEN = 0x00;
 12291  0930  019D               	clrf	29	;volatile
 12292                           
 12293                           ;mcc_generated_files/mcc.c: 72:     OSCFRQ = 0x00;
 12294  0931  019F               	clrf	31	;volatile
 12295                           
 12296                           ;mcc_generated_files/mcc.c: 74:     OSCTUNE = 0x00;
 12297  0932  019E               	clrf	30	;volatile
 12298  0933  0008               	return
 12299  0934                     __end_of_OSCILLATOR_Initialize:	
 12300                           
 12301                           	psect	text55
 12302  0924                     __ptext55:	
 12303 ;; *************** function _ADC_Initialize *****************
 12304 ;; Defined at:
 12305 ;;		line 65 in file "mcc_generated_files/adc.c"
 12306 ;; Parameters:    Size  Location     Type
 12307 ;;		None
 12308 ;; Auto vars:     Size  Location     Type
 12309 ;;		None
 12310 ;; Return value:  Size  Location     Type
 12311 ;;                  1    wreg      void 
 12312 ;; Registers used:
 12313 ;;		wreg, status,2
 12314 ;; Tracked objects:
 12315 ;;		On entry : 0/0
 12316 ;;		On exit  : 0/0
 12317 ;;		Unchanged: 0/0
 12318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12320 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12322 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12323 ;;Total ram usage:        0 bytes
 12324 ;; Hardware stack levels used:    1
 12325 ;; Hardware stack levels required when called:    5
 12326 ;; This function calls:
 12327 ;;		Nothing
 12328 ;; This function is called by:
 12329 ;;		_SYSTEM_Initialize
 12330 ;; This function uses a non-reentrant model
 12331 ;;
 12332                           
 12333                           
 12334                           ;psect for function _ADC_Initialize
 12335  0924                     _ADC_Initialize:	
 12336                           
 12337                           ;mcc_generated_files/adc.c: 70:     ADCON0 = 0x01;
 12338                           
 12339                           ;incstack = 0
 12340                           ; Regs used in _ADC_Initialize: [wreg+status,2]
 12341  0924  3001               	movlw	1
 12342  0925  0021               	movlb	1	; select bank1
 12343  0926  009D               	movwf	29	;volatile
 12344                           
 12345                           ;mcc_generated_files/adc.c: 73:     ADCON1 = 0x00;
 12346  0927  019E               	clrf	30	;volatile
 12347                           
 12348                           ;mcc_generated_files/adc.c: 76:     ADACT = 0x00;
 12349  0928  019F               	clrf	31	;volatile
 12350                           
 12351                           ;mcc_generated_files/adc.c: 79:     ADRESL = 0x00;
 12352  0929  019B               	clrf	27	;volatile
 12353                           
 12354                           ;mcc_generated_files/adc.c: 82:     ADRESH = 0x00;
 12355  092A  019C               	clrf	28	;volatile
 12356  092B  0008               	return
 12357  092C                     __end_of_ADC_Initialize:	
 12358                           
 12359                           	psect	text56
 12360  08FF                     __ptext56:	
 12361 ;; *************** function _PIR_Sensor *****************
 12362 ;; Defined at:
 12363 ;;		line 320 in file "main.c"
 12364 ;; Parameters:    Size  Location     Type
 12365 ;;		None
 12366 ;; Auto vars:     Size  Location     Type
 12367 ;;		None
 12368 ;; Return value:  Size  Location     Type
 12369 ;;                  1    wreg      _Bool 
 12370 ;; Registers used:
 12371 ;;		wreg
 12372 ;; Tracked objects:
 12373 ;;		On entry : 0/0
 12374 ;;		On exit  : 0/0
 12375 ;;		Unchanged: 0/0
 12376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12377 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12378 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12379 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12380 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12381 ;;Total ram usage:        0 bytes
 12382 ;; Hardware stack levels used:    1
 12383 ;; Hardware stack levels required when called:    5
 12384 ;; This function calls:
 12385 ;;		Nothing
 12386 ;; This function is called by:
 12387 ;;		_main
 12388 ;; This function uses a non-reentrant model
 12389 ;;
 12390                           
 12391                           
 12392                           ;psect for function _PIR_Sensor
 12393  08FF                     _PIR_Sensor:	
 12394                           
 12395                           ;main.c: 325:     if(PORTCbits.RC3 >= 1){
 12396                           
 12397                           ;incstack = 0
 12398                           ; Regs used in _PIR_Sensor: [wreg]
 12399  08FF  0020               	movlb	0	; select bank0
 12400  0900  1D8E               	btfss	14,3	;volatile
 12401  0901  2904               	goto	l6744
 12402                           
 12403                           ;main.c: 330:         return 1;
 12404  0902  3001               	movlw	1
 12405  0903  0008               	return
 12406  0904                     l6744:	
 12407                           
 12408                           ;main.c: 333:         return 0;
 12409  0904  3000               	movlw	0
 12410  0905  0008               	return
 12411  0906                     __end_of_PIR_Sensor:	
 12412                           
 12413                           	psect	text57
 12414  06D7                     __ptext57:	
 12415 ;; *************** function _Get_ADC *****************
 12416 ;; Defined at:
 12417 ;;		line 289 in file "main.c"
 12418 ;; Parameters:    Size  Location     Type
 12419 ;;		None
 12420 ;; Auto vars:     Size  Location     Type
 12421 ;;  val             2   15[BANK0 ] int 
 12422 ;; Return value:  Size  Location     Type
 12423 ;;                  1    wreg      void 
 12424 ;; Registers used:
 12425 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12426 ;; Tracked objects:
 12427 ;;		On entry : 0/0
 12428 ;;		On exit  : 0/0
 12429 ;;		Unchanged: 0/0
 12430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12431 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12432 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12433 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12434 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12435 ;;Total ram usage:        5 bytes
 12436 ;; Hardware stack levels used:    1
 12437 ;; Hardware stack levels required when called:    8
 12438 ;; This function calls:
 12439 ;;		_ADC_GetConversion
 12440 ;;		_Display_Name
 12441 ;; This function is called by:
 12442 ;;		_main
 12443 ;; This function uses a non-reentrant model
 12444 ;;
 12445                           
 12446                           
 12447                           ;psect for function _Get_ADC
 12448  06D7                     _Get_ADC:	
 12449                           
 12450                           ;main.c: 290:     adcResult = ADC_GetConversion(BTN) >> 6;
 12451                           
 12452                           ;incstack = 0
 12453                           ; Regs used in _Get_ADC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12454  06D7  3017               	movlw	23
 12455  06D8  318A  22B2  3186   	fcall	_ADC_GetConversion
 12456  06DB  0020               	movlb	0	; select bank0
 12457  06DC  0820               	movf	?_ADC_GetConversion,w
 12458  06DD  00AC               	movwf	??_Get_ADC
 12459  06DE  0821               	movf	?_ADC_GetConversion+1,w
 12460  06DF  00AD               	movwf	??_Get_ADC+1
 12461  06E0  3006               	movlw	6
 12462  06E1                     u6195:	
 12463  06E1  36AD               	lsrf	??_Get_ADC+1,f
 12464  06E2  0CAC               	rrf	??_Get_ADC,f
 12465  06E3  0B89               	decfsz	9,f
 12466  06E4  2EE1               	goto	u6195
 12467  06E5  082C               	movf	??_Get_ADC,w
 12468  06E6  00AE               	movwf	??_Get_ADC+2
 12469  06E7  082E               	movf	??_Get_ADC+2,w
 12470  06E8  00E9               	movwf	_adcResult
 12471                           
 12472                           ;main.c: 291:     int val = adcResult;
 12473  06E9  0869               	movf	_adcResult,w
 12474  06EA  00AC               	movwf	??_Get_ADC
 12475  06EB  01AD               	clrf	??_Get_ADC+1
 12476  06EC  082C               	movf	??_Get_ADC,w
 12477  06ED  00AF               	movwf	Get_ADC@val
 12478  06EE  082D               	movf	??_Get_ADC+1,w
 12479  06EF  00B0               	movwf	Get_ADC@val+1
 12480                           
 12481                           ;main.c: 292:     if(val >= 10 && val <= 20) {
 12482  06F0  0830               	movf	Get_ADC@val+1,w
 12483  06F1  3A80               	xorlw	128
 12484  06F2  00AC               	movwf	??_Get_ADC
 12485  06F3  3080               	movlw	128
 12486  06F4  022C               	subwf	??_Get_ADC,w
 12487  06F5  1D03               	skipz
 12488  06F6  2EF9               	goto	u6205
 12489  06F7  300A               	movlw	10
 12490  06F8  022F               	subwf	Get_ADC@val,w
 12491  06F9                     u6205:	
 12492  06F9  1C03               	skipc
 12493  06FA  2F07               	goto	l6964
 12494  06FB  0020               	movlb	0	; select bank0
 12495  06FC  0830               	movf	Get_ADC@val+1,w
 12496  06FD  3A80               	xorlw	128
 12497  06FE  00AC               	movwf	??_Get_ADC
 12498  06FF  3080               	movlw	128
 12499  0700  022C               	subwf	??_Get_ADC,w
 12500  0701  1D03               	skipz
 12501  0702  2F05               	goto	u6215
 12502  0703  3015               	movlw	21
 12503  0704  022F               	subwf	Get_ADC@val,w
 12504  0705                     u6215:	
 12505  0705  1C03               	btfss	3,0
 12506  0706  2FB4               	goto	l7010
 12507  0707                     l6964:	
 12508  0707  0020               	movlb	0	; select bank0
 12509  0708  0830               	movf	Get_ADC@val+1,w
 12510  0709  3A80               	xorlw	128
 12511  070A  00AC               	movwf	??_Get_ADC
 12512  070B  3080               	movlw	128
 12513  070C  022C               	subwf	??_Get_ADC,w
 12514  070D  1D03               	skipz
 12515  070E  2F11               	goto	u6225
 12516  070F  305F               	movlw	95
 12517  0710  022F               	subwf	Get_ADC@val,w
 12518  0711                     u6225:	
 12519  0711  1C03               	skipc
 12520  0712  2F1F               	goto	l6970
 12521  0713  0020               	movlb	0	; select bank0
 12522  0714  0830               	movf	Get_ADC@val+1,w
 12523  0715  3A80               	xorlw	128
 12524  0716  00AC               	movwf	??_Get_ADC
 12525  0717  3080               	movlw	128
 12526  0718  022C               	subwf	??_Get_ADC,w
 12527  0719  1D03               	skipz
 12528  071A  2F1D               	goto	u6235
 12529  071B  306A               	movlw	106
 12530  071C  022F               	subwf	Get_ADC@val,w
 12531  071D                     u6235:	
 12532  071D  1C03               	btfss	3,0
 12533  071E  2FB4               	goto	l7010
 12534  071F                     l6970:	
 12535  071F  0020               	movlb	0	; select bank0
 12536  0720  0830               	movf	Get_ADC@val+1,w
 12537  0721  3A80               	xorlw	128
 12538  0722  00AC               	movwf	??_Get_ADC
 12539  0723  3080               	movlw	128
 12540  0724  022C               	subwf	??_Get_ADC,w
 12541  0725  1D03               	skipz
 12542  0726  2F29               	goto	u6245
 12543  0727  3073               	movlw	115
 12544  0728  022F               	subwf	Get_ADC@val,w
 12545  0729                     u6245:	
 12546  0729  1C03               	skipc
 12547  072A  2F37               	goto	l6976
 12548  072B  0020               	movlb	0	; select bank0
 12549  072C  0830               	movf	Get_ADC@val+1,w
 12550  072D  3A80               	xorlw	128
 12551  072E  00AC               	movwf	??_Get_ADC
 12552  072F  3080               	movlw	128
 12553  0730  022C               	subwf	??_Get_ADC,w
 12554  0731  1D03               	skipz
 12555  0732  2F35               	goto	u6255
 12556  0733  3080               	movlw	128
 12557  0734  022F               	subwf	Get_ADC@val,w
 12558  0735                     u6255:	
 12559  0735  1C03               	btfss	3,0
 12560  0736  2FB4               	goto	l7010
 12561  0737                     l6976:	
 12562  0737  0020               	movlb	0	; select bank0
 12563  0738  0830               	movf	Get_ADC@val+1,w
 12564  0739  3A80               	xorlw	128
 12565  073A  00AC               	movwf	??_Get_ADC
 12566  073B  3080               	movlw	128
 12567  073C  022C               	subwf	??_Get_ADC,w
 12568  073D  1D03               	skipz
 12569  073E  2F41               	goto	u6265
 12570  073F  3082               	movlw	130
 12571  0740  022F               	subwf	Get_ADC@val,w
 12572  0741                     u6265:	
 12573  0741  1C03               	skipc
 12574  0742  2F64               	goto	l6990
 12575  0743  0020               	movlb	0	; select bank0
 12576  0744  0830               	movf	Get_ADC@val+1,w
 12577  0745  3A80               	xorlw	128
 12578  0746  00AC               	movwf	??_Get_ADC
 12579  0747  3080               	movlw	128
 12580  0748  022C               	subwf	??_Get_ADC,w
 12581  0749  1D03               	skipz
 12582  074A  2F4D               	goto	u6275
 12583  074B  308D               	movlw	141
 12584  074C  022F               	subwf	Get_ADC@val,w
 12585  074D                     u6275:	
 12586  074D  1803               	skipnc
 12587  074E  2F64               	goto	l6990
 12588                           
 12589                           ;main.c: 299:         printed = 0;
 12590  074F  0020               	movlb	0	; select bank0
 12591  0750  01EA               	clrf	_printed
 12592                           
 12593                           ;main.c: 300:         --name;
 12594  0751  30FF               	movlw	255
 12595  0752  07DD               	addwf	_name,f
 12596  0753  30FF               	movlw	255
 12597  0754  3DDE               	addwfc	_name+1,f
 12598                           
 12599                           ;main.c: 301:         if(name < 0) {
 12600  0755  1FDE               	btfss	_name+1,7
 12601  0756  2F5B               	goto	l6988
 12602                           
 12603                           ;main.c: 302:             name = 3;
 12604  0757  3003               	movlw	3
 12605  0758  00DD               	movwf	_name
 12606  0759  3000               	movlw	0
 12607  075A  00DE               	movwf	_name+1
 12608  075B                     l6988:	
 12609                           
 12610                           ;main.c: 304:         Display_Name(names[name]);
 12611  075B  355D               	lslf	_name,w
 12612  075C  3E60               	addlw	(low (_names| (0+256)))& (0+255)
 12613  075D  0086               	movwf	6
 12614  075E  3001               	movlw	1	; select bank2/3
 12615  075F  0087               	movwf	7
 12616  0760  3F40               	moviw [0]fsr1
 12617  0761  00A5               	movwf	Display_Name@string1
 12618  0762  3F41               	moviw [1]fsr1
 12619  0763  2FB1               	goto	L9
 12620  0764                     l6990:	
 12621                           ;main.c: 305:     }
 12622                           
 12623  0764  0020               	movlb	0	; select bank0
 12624  0765  0830               	movf	Get_ADC@val+1,w
 12625  0766  3A80               	xorlw	128
 12626  0767  00AC               	movwf	??_Get_ADC
 12627  0768  3080               	movlw	128
 12628  0769  022C               	subwf	??_Get_ADC,w
 12629  076A  1D03               	skipz
 12630  076B  2F6E               	goto	u6295
 12631  076C  3096               	movlw	150
 12632  076D  022F               	subwf	Get_ADC@val,w
 12633  076E                     u6295:	
 12634  076E  1C03               	skipc
 12635  076F  2F7C               	goto	l6996
 12636  0770  0020               	movlb	0	; select bank0
 12637  0771  0830               	movf	Get_ADC@val+1,w
 12638  0772  3A80               	xorlw	128
 12639  0773  00AC               	movwf	??_Get_ADC
 12640  0774  3080               	movlw	128
 12641  0775  022C               	subwf	??_Get_ADC,w
 12642  0776  1D03               	skipz
 12643  0777  2F7A               	goto	u6305
 12644  0778  309E               	movlw	158
 12645  0779  022F               	subwf	Get_ADC@val,w
 12646  077A                     u6305:	
 12647  077A  1C03               	btfss	3,0
 12648  077B  2FB4               	goto	l7010
 12649  077C                     l6996:	
 12650  077C  0020               	movlb	0	; select bank0
 12651  077D  0830               	movf	Get_ADC@val+1,w
 12652  077E  3A80               	xorlw	128
 12653  077F  00AC               	movwf	??_Get_ADC
 12654  0780  3080               	movlw	128
 12655  0781  022C               	subwf	??_Get_ADC,w
 12656  0782  1D03               	skipz
 12657  0783  2F86               	goto	u6315
 12658  0784  30A0               	movlw	160
 12659  0785  022F               	subwf	Get_ADC@val,w
 12660  0786                     u6315:	
 12661  0786  1C03               	skipc
 12662  0787  2FB4               	goto	l7010
 12663  0788  0020               	movlb	0	; select bank0
 12664  0789  0830               	movf	Get_ADC@val+1,w
 12665  078A  3A80               	xorlw	128
 12666  078B  00AC               	movwf	??_Get_ADC
 12667  078C  3080               	movlw	128
 12668  078D  022C               	subwf	??_Get_ADC,w
 12669  078E  1D03               	skipz
 12670  078F  2F92               	goto	u6325
 12671  0790  30A6               	movlw	166
 12672  0791  022F               	subwf	Get_ADC@val,w
 12673  0792                     u6325:	
 12674  0792  1803               	skipnc
 12675  0793  2FB4               	goto	l7010
 12676                           
 12677                           ;main.c: 309:         printed = 0;
 12678  0794  0020               	movlb	0	; select bank0
 12679  0795  01EA               	clrf	_printed
 12680                           
 12681                           ;main.c: 310:         name++;
 12682  0796  3001               	movlw	1
 12683  0797  07DD               	addwf	_name,f
 12684  0798  3000               	movlw	0
 12685  0799  3DDE               	addwfc	_name+1,f
 12686                           
 12687                           ;main.c: 311:         if(name > 3) {
 12688  079A  085E               	movf	_name+1,w
 12689  079B  3A80               	xorlw	128
 12690  079C  00AC               	movwf	??_Get_ADC
 12691  079D  3080               	movlw	128
 12692  079E  022C               	subwf	??_Get_ADC,w
 12693  079F  1D03               	skipz
 12694  07A0  2FA3               	goto	u6335
 12695  07A1  3004               	movlw	4
 12696  07A2  025D               	subwf	_name,w
 12697  07A3                     u6335:	
 12698  07A3  1C03               	skipc
 12699  07A4  2FA8               	goto	l7008
 12700                           
 12701                           ;main.c: 312:            name = 0;
 12702  07A5  0020               	movlb	0	; select bank0
 12703  07A6  01DD               	clrf	_name
 12704  07A7  01DE               	clrf	_name+1
 12705  07A8                     l7008:	
 12706                           
 12707                           ;main.c: 314:         Display_Name(names[name]);
 12708  07A8  0020               	movlb	0	; select bank0
 12709  07A9  355D               	lslf	_name,w
 12710  07AA  3E60               	addlw	(low (_names| (0+256)))& (0+255)
 12711  07AB  0086               	movwf	6
 12712  07AC  3001               	movlw	1	; select bank2/3
 12713  07AD  0087               	movwf	7
 12714  07AE  3F40               	moviw [0]fsr1
 12715  07AF  00A5               	movwf	Display_Name@string1
 12716  07B0  3F41               	moviw [1]fsr1
 12717  07B1                     L9:	
 12718  07B1  00A6               	movwf	Display_Name@string1+1
 12719  07B2  318E  26A0         	fcall	_Display_Name
 12720  07B4                     l7010:	
 12721                           
 12722                           ;main.c: 316:     adcResult = 0;
 12723  07B4  0020               	movlb	0	; select bank0
 12724  07B5  01E9               	clrf	_adcResult
 12725  07B6  0008               	return
 12726  07B7                     __end_of_Get_ADC:	
 12727                           
 12728                           	psect	text58
 12729  0EA0                     __ptext58:	
 12730 ;; *************** function _Display_Name *****************
 12731 ;; Defined at:
 12732 ;;		line 212 in file "main.c"
 12733 ;; Parameters:    Size  Location     Type
 12734 ;;  string1         2    5[BANK0 ] PTR unsigned char 
 12735 ;;		 -> STR_4(11), STR_3(16), STR_2(13), STR_1(12), 
 12736 ;; Auto vars:     Size  Location     Type
 12737 ;;  i               2   10[BANK0 ] int 
 12738 ;;  length          2    8[BANK0 ] int 
 12739 ;; Return value:  Size  Location     Type
 12740 ;;                  1    wreg      void 
 12741 ;; Registers used:
 12742 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12743 ;; Tracked objects:
 12744 ;;		On entry : 0/0
 12745 ;;		On exit  : 0/0
 12746 ;;		Unchanged: 0/0
 12747 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12748 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12749 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12750 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12751 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12752 ;;Total ram usage:        7 bytes
 12753 ;; Hardware stack levels used:    1
 12754 ;; Hardware stack levels required when called:    7
 12755 ;; This function calls:
 12756 ;;		_PWM_Output_Disable
 12757 ;;		_PWM_Output_Enable
 12758 ;;		_SPI_Write
 12759 ;;		_strlen
 12760 ;; This function is called by:
 12761 ;;		_main
 12762 ;;		_handleGesture
 12763 ;;		_Get_ADC
 12764 ;; This function uses a non-reentrant model
 12765 ;;
 12766                           
 12767                           
 12768                           ;psect for function _Display_Name
 12769  0EA0                     _Display_Name:	
 12770                           
 12771                           ;main.c: 213:     int length;;main.c: 214:     int i;;main.c: 215:     PWM_Output_Enable
      +                          ();
 12772                           
 12773                           ;incstack = 0
 12774                           ; Regs used in _Display_Name: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12775  0EA0  3188  20C3  318E   	fcall	_PWM_Output_Enable
 12776                           
 12777                           ;main.c: 216:     _delay((unsigned long)((200)*(500000/4000.0)));
 12778  0EA3  3021               	movlw	33
 12779  0EA4  0020               	movlb	0	; select bank0
 12780  0EA5  00A7               	movwf	??_Display_Name
 12781  0EA6  3076               	movlw	118
 12782  0EA7                     u6517:	
 12783  0EA7  0B89               	decfsz	9,f
 12784  0EA8  2EA7               	goto	u6517
 12785  0EA9  0BA7               	decfsz	??_Display_Name,f
 12786  0EAA  2EA7               	goto	u6517
 12787  0EAB  0000               	nop
 12788                           
 12789                           ;main.c: 217:     PWM_Output_Disable();
 12790  0EAC  3188  2084  318E   	fcall	_PWM_Output_Disable
 12791                           
 12792                           ;main.c: 219:         SPI_Write(0xFE);
 12793  0EAF  30FE               	movlw	254
 12794  0EB0  318A  2203  318E   	fcall	_SPI_Write
 12795                           
 12796                           ;main.c: 220:         _delay((unsigned long)((100)*(500000/4000.0)));
 12797  0EB3  3011               	movlw	17
 12798  0EB4  0020               	movlb	0	; select bank0
 12799  0EB5  00A7               	movwf	??_Display_Name
 12800  0EB6  303A               	movlw	58
 12801  0EB7                     u6527:	
 12802  0EB7  0B89               	decfsz	9,f
 12803  0EB8  2EB7               	goto	u6527
 12804  0EB9  0BA7               	decfsz	??_Display_Name,f
 12805  0EBA  2EB7               	goto	u6527
 12806  0EBB  0000               	nop
 12807                           
 12808                           ;main.c: 221:         SPI_Write(0x51);
 12809  0EBC  3051               	movlw	81
 12810  0EBD  318A  2203  318E   	fcall	_SPI_Write
 12811                           
 12812                           ;main.c: 222:         length = strlen(string1);
 12813  0EC0  0020               	movlb	0	; select bank0
 12814  0EC1  0826               	movf	Display_Name@string1+1,w
 12815  0EC2  00A1               	movwf	strlen@s+1
 12816  0EC3  0825               	movf	Display_Name@string1,w
 12817  0EC4  00A0               	movwf	strlen@s
 12818  0EC5  318A  222F  318E   	fcall	_strlen
 12819  0EC8  0020               	movlb	0	; select bank0
 12820  0EC9  0821               	movf	?_strlen+1,w
 12821  0ECA  00A9               	movwf	Display_Name@length+1
 12822  0ECB  0820               	movf	?_strlen,w
 12823  0ECC  00A8               	movwf	Display_Name@length
 12824                           
 12825                           ;main.c: 223:         for(i = 0; i < length; i++){
 12826  0ECD  01AA               	clrf	Display_Name@i
 12827  0ECE  01AB               	clrf	Display_Name@i+1
 12828  0ECF                     l6384:	
 12829  0ECF  082B               	movf	Display_Name@i+1,w
 12830  0ED0  3A80               	xorlw	128
 12831  0ED1  00A7               	movwf	??_Display_Name
 12832  0ED2  0829               	movf	Display_Name@length+1,w
 12833  0ED3  3A80               	xorlw	128
 12834  0ED4  0227               	subwf	??_Display_Name,w
 12835  0ED5  1D03               	skipz
 12836  0ED6  2ED9               	goto	u5515
 12837  0ED7  0828               	movf	Display_Name@length,w
 12838  0ED8  022A               	subwf	Display_Name@i,w
 12839  0ED9                     u5515:	
 12840  0ED9  1803               	btfsc	3,0
 12841  0EDA  2EEC               	goto	l692
 12842                           
 12843                           ;main.c: 224:             SPI_Write(string1[i]);
 12844  0EDB  0020               	movlb	0	; select bank0
 12845  0EDC  0825               	movf	Display_Name@string1,w
 12846  0EDD  072A               	addwf	Display_Name@i,w
 12847  0EDE  0084               	movwf	4
 12848  0EDF  0826               	movf	Display_Name@string1+1,w
 12849  0EE0  3D2B               	addwfc	Display_Name@i+1,w
 12850  0EE1  0085               	movwf	5
 12851  0EE2  0800               	movf	0,w	;code access
 12852  0EE3  318A  2203  318E   	fcall	_SPI_Write
 12853                           
 12854                           ;main.c: 225:         }
 12855  0EE6  3001               	movlw	1
 12856  0EE7  0020               	movlb	0	; select bank0
 12857  0EE8  07AA               	addwf	Display_Name@i,f
 12858  0EE9  3000               	movlw	0
 12859  0EEA  3DAB               	addwfc	Display_Name@i+1,f
 12860  0EEB  2ECF               	goto	l6384
 12861  0EEC                     l692:	
 12862                           
 12863                           ;main.c: 227:     printed = 1;
 12864  0EEC  0020               	movlb	0	; select bank0
 12865  0EED  01EA               	clrf	_printed
 12866  0EEE  0AEA               	incf	_printed,f
 12867  0EEF  0008               	return
 12868  0EF0                     __end_of_Display_Name:	
 12869                           
 12870                           	psect	text59
 12871  0A2F                     __ptext59:	
 12872 ;; *************** function _strlen *****************
 12873 ;; Defined at:
 12874 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
 12875 ;; Parameters:    Size  Location     Type
 12876 ;;  s               2    0[BANK0 ] PTR const unsigned char 
 12877 ;;		 -> STR_4(11), STR_3(16), STR_2(13), STR_1(12), 
 12878 ;; Auto vars:     Size  Location     Type
 12879 ;;  a               2    3[BANK0 ] PTR const unsigned char 
 12880 ;;		 -> STR_4(11), STR_3(16), STR_2(13), STR_1(12), 
 12881 ;; Return value:  Size  Location     Type
 12882 ;;                  2    0[BANK0 ] unsigned int 
 12883 ;; Registers used:
 12884 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 12885 ;; Tracked objects:
 12886 ;;		On entry : 0/0
 12887 ;;		On exit  : 0/0
 12888 ;;		Unchanged: 0/0
 12889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12890 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12891 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12892 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12893 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12894 ;;Total ram usage:        5 bytes
 12895 ;; Hardware stack levels used:    1
 12896 ;; Hardware stack levels required when called:    5
 12897 ;; This function calls:
 12898 ;;		Nothing
 12899 ;; This function is called by:
 12900 ;;		_Display_Name
 12901 ;; This function uses a non-reentrant model
 12902 ;;
 12903                           
 12904                           
 12905                           ;psect for function _strlen
 12906  0A2F                     _strlen:	
 12907                           
 12908                           ;incstack = 0
 12909                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0]
 12910  0A2F  0020               	movlb	0	; select bank0
 12911  0A30  0821               	movf	strlen@s+1,w
 12912  0A31  00A4               	movwf	strlen@a+1
 12913  0A32  0820               	movf	strlen@s,w
 12914  0A33  00A3               	movwf	strlen@a
 12915  0A34                     l5922:	
 12916  0A34  0820               	movf	strlen@s,w
 12917  0A35  0084               	movwf	4
 12918  0A36  0821               	movf	strlen@s+1,w
 12919  0A37  0085               	movwf	5
 12920  0A38  0012               	moviw fsr0++
 12921  0A39  1903               	btfsc	3,2
 12922  0A3A  2A40               	goto	l5924
 12923  0A3B  3001               	movlw	1
 12924  0A3C  07A0               	addwf	strlen@s,f
 12925  0A3D  3000               	movlw	0
 12926  0A3E  3DA1               	addwfc	strlen@s+1,f
 12927  0A3F  2A34               	goto	l5922
 12928  0A40                     l5924:	
 12929  0A40  0823               	movf	strlen@a,w
 12930  0A41  0220               	subwf	strlen@s,w
 12931  0A42  00A0               	movwf	?_strlen
 12932  0A43  0824               	movf	strlen@a+1,w
 12933  0A44  3B21               	subwfb	strlen@s+1,w
 12934  0A45  00A1               	movwf	?_strlen+1
 12935  0A46  0008               	return
 12936  0A47                     __end_of_strlen:	
 12937                           
 12938                           	psect	text60
 12939  08C3                     __ptext60:	
 12940 ;; *************** function _PWM_Output_Enable *****************
 12941 ;; Defined at:
 12942 ;;		line 281 in file "main.c"
 12943 ;; Parameters:    Size  Location     Type
 12944 ;;		None
 12945 ;; Auto vars:     Size  Location     Type
 12946 ;;		None
 12947 ;; Return value:  Size  Location     Type
 12948 ;;                  1    wreg      void 
 12949 ;; Registers used:
 12950 ;;		wreg
 12951 ;; Tracked objects:
 12952 ;;		On entry : 0/0
 12953 ;;		On exit  : 0/0
 12954 ;;		Unchanged: 0/0
 12955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12956 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12957 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12958 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12959 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12960 ;;Total ram usage:        0 bytes
 12961 ;; Hardware stack levels used:    1
 12962 ;; Hardware stack levels required when called:    5
 12963 ;; This function calls:
 12964 ;;		Nothing
 12965 ;; This function is called by:
 12966 ;;		_Display_Name
 12967 ;;		_PWM
 12968 ;; This function uses a non-reentrant model
 12969 ;;
 12970                           
 12971                           
 12972                           ;psect for function _PWM_Output_Enable
 12973  08C3                     _PWM_Output_Enable:	
 12974                           
 12975                           ;main.c: 282:     RC6PPS = 0x0C;
 12976                           
 12977                           ;incstack = 0
 12978                           ; Regs used in _PWM_Output_Enable: [wreg]
 12979  08C3  300C               	movlw	12
 12980  08C4  003D               	movlb	29	; select bank29
 12981  08C5  00A6               	movwf	38	;volatile
 12982  08C6  0008               	return
 12983  08C7                     __end_of_PWM_Output_Enable:	
 12984                           
 12985                           	psect	text61
 12986  0884                     __ptext61:	
 12987 ;; *************** function _PWM_Output_Disable *****************
 12988 ;; Defined at:
 12989 ;;		line 285 in file "main.c"
 12990 ;; Parameters:    Size  Location     Type
 12991 ;;		None
 12992 ;; Auto vars:     Size  Location     Type
 12993 ;;		None
 12994 ;; Return value:  Size  Location     Type
 12995 ;;                  1    wreg      void 
 12996 ;; Registers used:
 12997 ;;		status,2
 12998 ;; Tracked objects:
 12999 ;;		On entry : 0/0
 13000 ;;		On exit  : 0/0
 13001 ;;		Unchanged: 0/0
 13002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13003 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13004 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13005 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13006 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13007 ;;Total ram usage:        0 bytes
 13008 ;; Hardware stack levels used:    1
 13009 ;; Hardware stack levels required when called:    5
 13010 ;; This function calls:
 13011 ;;		Nothing
 13012 ;; This function is called by:
 13013 ;;		_Display_Name
 13014 ;;		_PWM
 13015 ;; This function uses a non-reentrant model
 13016 ;;
 13017                           
 13018                           
 13019                           ;psect for function _PWM_Output_Disable
 13020  0884                     _PWM_Output_Disable:	
 13021                           
 13022                           ;main.c: 286:     RC6PPS = 0x00;
 13023                           
 13024                           ;incstack = 0
 13025                           ; Regs used in _PWM_Output_Disable: [status,2]
 13026  0884  003D               	movlb	29	; select bank29
 13027  0885  01A6               	clrf	38	;volatile
 13028  0886  0008               	return
 13029  0887                     __end_of_PWM_Output_Disable:	
 13030                           
 13031                           	psect	text62
 13032  0AB2                     __ptext62:	
 13033 ;; *************** function _ADC_GetConversion *****************
 13034 ;; Defined at:
 13035 ;;		line 113 in file "mcc_generated_files/adc.c"
 13036 ;; Parameters:    Size  Location     Type
 13037 ;;  channel         1    wreg     enum E6648
 13038 ;; Auto vars:     Size  Location     Type
 13039 ;;  channel         1    3[BANK0 ] enum E6648
 13040 ;; Return value:  Size  Location     Type
 13041 ;;                  2    0[BANK0 ] unsigned short 
 13042 ;; Registers used:
 13043 ;;		wreg, status,2, status,0
 13044 ;; Tracked objects:
 13045 ;;		On entry : 0/0
 13046 ;;		On exit  : 0/0
 13047 ;;		Unchanged: 0/0
 13048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13049 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13050 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13051 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13052 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13053 ;;Total ram usage:        4 bytes
 13054 ;; Hardware stack levels used:    1
 13055 ;; Hardware stack levels required when called:    5
 13056 ;; This function calls:
 13057 ;;		Nothing
 13058 ;; This function is called by:
 13059 ;;		_Get_ADC
 13060 ;; This function uses a non-reentrant model
 13061 ;;
 13062                           
 13063                           
 13064                           ;psect for function _ADC_GetConversion
 13065  0AB2                     _ADC_GetConversion:	
 13066                           
 13067                           ;incstack = 0
 13068                           ; Regs used in _ADC_GetConversion: [wreg+status,2+status,0]
 13069                           ;ADC_GetConversion@channel stored from wreg
 13070  0AB2  0020               	movlb	0	; select bank0
 13071  0AB3  00A3               	movwf	ADC_GetConversion@channel
 13072                           
 13073                           ;mcc_generated_files/adc.c: 113: adc_result_t ADC_GetConversion(adc_channel_t channel);m
      +                          cc_generated_files/adc.c: 114: {;mcc_generated_files/adc.c: 116:     ADCON0bits.CHS = ch
      +                          annel;
 13074  0AB4  0823               	movf	ADC_GetConversion@channel,w
 13075  0AB5  00A2               	movwf	??_ADC_GetConversion
 13076  0AB6  0DA2               	rlf	??_ADC_GetConversion,f
 13077  0AB7  0DA2               	rlf	??_ADC_GetConversion,f
 13078  0AB8  0021               	movlb	1	; select bank1
 13079  0AB9  081D               	movf	29,w	;volatile
 13080  0ABA  0020               	movlb	0	; select bank0
 13081  0ABB  0622               	xorwf	??_ADC_GetConversion,w
 13082  0ABC  3903               	andlw	-253
 13083  0ABD  0622               	xorwf	??_ADC_GetConversion,w
 13084  0ABE  0021               	movlb	1	; select bank1
 13085  0ABF  009D               	movwf	29	;volatile
 13086                           
 13087                           ;mcc_generated_files/adc.c: 119:     ADCON0bits.ADON = 1;
 13088  0AC0  141D               	bsf	29,0	;volatile
 13089                           
 13090                           ;mcc_generated_files/adc.c: 125:     ADCON0bits.ADGO = 1;
 13091                           
 13092                           ;mcc_generated_files/adc.c: 122:     _delay((unsigned long)((5)*(500000/4000000.0)));
 13093  0AC1  0021               	movlb	1	; select bank1
 13094  0AC2  149D               	bsf	29,1	;volatile
 13095  0AC3                     l1240:	
 13096                           ;mcc_generated_files/adc.c: 131:     }
 13097                           
 13098                           ;mcc_generated_files/adc.c: 128:     while (ADCON0bits.ADGO)
 13099                           
 13100                           
 13101                           ;mcc_generated_files/adc.c: 128:     while (ADCON0bits.ADGO)
 13102  0AC3  0021               	movlb	1	; select bank1
 13103  0AC4  1C9D               	btfss	29,1	;volatile
 13104  0AC5  2AC8               	goto	l6456
 13105  0AC6  0064               	clrwdt	;# 
 13106  0AC7  2AC3               	goto	l1240
 13107  0AC8                     l6456:	
 13108                           
 13109                           ;mcc_generated_files/adc.c: 134:     return ((adc_result_t)((ADRESH << 8) + ADRESL));
 13110  0AC8  081C               	movf	28,w	;volatile
 13111  0AC9  0020               	movlb	0	; select bank0
 13112  0ACA  00A1               	movwf	?_ADC_GetConversion+1
 13113  0ACB  0021               	movlb	1	; select bank1
 13114  0ACC  081B               	movf	27,w	;volatile
 13115  0ACD  0020               	movlb	0	; select bank0
 13116  0ACE  00A0               	movwf	?_ADC_GetConversion
 13117  0ACF  0008               	return
 13118  0AD0                     __end_of_ADC_GetConversion:	
 13119                           
 13120                           	psect	text63
 13121  0993                     __ptext63:	
 13122 ;; *************** function _Display_Clear *****************
 13123 ;; Defined at:
 13124 ;;		line 248 in file "main.c"
 13125 ;; Parameters:    Size  Location     Type
 13126 ;;		None
 13127 ;; Auto vars:     Size  Location     Type
 13128 ;;		None
 13129 ;; Return value:  Size  Location     Type
 13130 ;;                  1    wreg      void 
 13131 ;; Registers used:
 13132 ;;		wreg, status,2, status,0, pclath, cstack
 13133 ;; Tracked objects:
 13134 ;;		On entry : 0/0
 13135 ;;		On exit  : 0/0
 13136 ;;		Unchanged: 0/0
 13137 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13138 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13139 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13140 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13141 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13142 ;;Total ram usage:        1 bytes
 13143 ;; Hardware stack levels used:    1
 13144 ;; Hardware stack levels required when called:    7
 13145 ;; This function calls:
 13146 ;;		_SPI_Write
 13147 ;; This function is called by:
 13148 ;;		_main
 13149 ;; This function uses a non-reentrant model
 13150 ;;
 13151                           
 13152                           
 13153                           ;psect for function _Display_Clear
 13154  0993                     _Display_Clear:	
 13155                           
 13156                           ;main.c: 249:     SPI_Write(0xFE);
 13157                           
 13158                           ;incstack = 0
 13159                           ; Regs used in _Display_Clear: [wreg+status,2+status,0+pclath+cstack]
 13160  0993  30FE               	movlw	254
 13161  0994  318A  2203  3189   	fcall	_SPI_Write
 13162                           
 13163                           ;main.c: 250:     _delay((unsigned long)((100)*(500000/4000.0)));
 13164  0997  3011               	movlw	17
 13165  0998  0020               	movlb	0	; select bank0
 13166  0999  00A3               	movwf	??_Display_Clear
 13167  099A  303A               	movlw	58
 13168  099B                     u6537:	
 13169  099B  0B89               	decfsz	9,f
 13170  099C  299B               	goto	u6537
 13171  099D  0BA3               	decfsz	??_Display_Clear,f
 13172  099E  299B               	goto	u6537
 13173  099F  0000               	nop
 13174                           
 13175                           ;main.c: 251:     SPI_Write(0x51);
 13176  09A0  3051               	movlw	81
 13177  09A1  318A  2203         	fcall	_SPI_Write
 13178  09A3  0008               	return
 13179  09A4                     __end_of_Display_Clear:	
 13180                           
 13181                           	psect	text64
 13182  0A03                     __ptext64:	
 13183 ;; *************** function _SPI_Write *****************
 13184 ;; Defined at:
 13185 ;;		line 205 in file "main.c"
 13186 ;; Parameters:    Size  Location     Type
 13187 ;;  incoming        1    wreg     unsigned char 
 13188 ;; Auto vars:     Size  Location     Type
 13189 ;;  incoming        1    2[BANK0 ] unsigned char 
 13190 ;; Return value:  Size  Location     Type
 13191 ;;                  1    wreg      void 
 13192 ;; Registers used:
 13193 ;;		wreg, status,2, status,0, pclath, cstack
 13194 ;; Tracked objects:
 13195 ;;		On entry : 0/0
 13196 ;;		On exit  : 0/0
 13197 ;;		Unchanged: 0/0
 13198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13199 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13200 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13201 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13202 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13203 ;;Total ram usage:        2 bytes
 13204 ;; Hardware stack levels used:    1
 13205 ;; Hardware stack levels required when called:    6
 13206 ;; This function calls:
 13207 ;;		_SPI2_Exchange8bit
 13208 ;; This function is called by:
 13209 ;;		_Display_Name
 13210 ;;		_Display_Clear
 13211 ;; This function uses a non-reentrant model
 13212 ;;
 13213                           
 13214                           
 13215                           ;psect for function _SPI_Write
 13216  0A03                     _SPI_Write:	
 13217                           
 13218                           ;incstack = 0
 13219                           ; Regs used in _SPI_Write: [wreg+status,2+status,0+pclath+cstack]
 13220                           ;SPI_Write@incoming stored from wreg
 13221  0A03  0020               	movlb	0	; select bank0
 13222  0A04  00A2               	movwf	SPI_Write@incoming
 13223                           
 13224                           ;main.c: 206:     do { LATCbits.LATC1 = 0; } while(0);
 13225  0A05  0022               	movlb	2	; select bank2
 13226  0A06  108E               	bcf	14,1	;volatile
 13227                           
 13228                           ;main.c: 207:     SPI2_Exchange8bit(incoming);
 13229  0A07  0020               	movlb	0	; select bank0
 13230  0A08  0822               	movf	SPI_Write@incoming,w
 13231  0A09  3189  2184  318A   	fcall	_SPI2_Exchange8bit
 13232  0A0C  0022               	movlb	2	; select bank2
 13233  0A0D  148E               	bsf	14,1	;volatile
 13234                           
 13235                           ;main.c: 209:     _delay((unsigned long)((100)*(500000/4000.0)));
 13236  0A0E  3011               	movlw	17
 13237  0A0F  0020               	movlb	0	; select bank0
 13238  0A10  00A1               	movwf	??_SPI_Write
 13239  0A11  303A               	movlw	58
 13240  0A12                     u6547:	
 13241  0A12  0B89               	decfsz	9,f
 13242  0A13  2A12               	goto	u6547
 13243  0A14  0BA1               	decfsz	??_SPI_Write,f
 13244  0A15  2A12               	goto	u6547
 13245  0A16  0000               	nop
 13246  0A17  0008               	return
 13247  0A18                     __end_of_SPI_Write:	
 13248                           
 13249                           	psect	text65
 13250  0984                     __ptext65:	
 13251 ;; *************** function _SPI2_Exchange8bit *****************
 13252 ;; Defined at:
 13253 ;;		line 79 in file "mcc_generated_files/spi2.c"
 13254 ;; Parameters:    Size  Location     Type
 13255 ;;  data            1    wreg     unsigned char 
 13256 ;; Auto vars:     Size  Location     Type
 13257 ;;  data            1    0[BANK0 ] unsigned char 
 13258 ;; Return value:  Size  Location     Type
 13259 ;;                  1    wreg      unsigned char 
 13260 ;; Registers used:
 13261 ;;		wreg
 13262 ;; Tracked objects:
 13263 ;;		On entry : 0/0
 13264 ;;		On exit  : 0/0
 13265 ;;		Unchanged: 0/0
 13266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13268 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13270 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13271 ;;Total ram usage:        1 bytes
 13272 ;; Hardware stack levels used:    1
 13273 ;; Hardware stack levels required when called:    5
 13274 ;; This function calls:
 13275 ;;		Nothing
 13276 ;; This function is called by:
 13277 ;;		_SPI_Write
 13278 ;;		_SPI2_Exchange8bitBuffer
 13279 ;; This function uses a non-reentrant model
 13280 ;;
 13281                           
 13282                           
 13283                           ;psect for function _SPI2_Exchange8bit
 13284  0984                     _SPI2_Exchange8bit:	
 13285                           
 13286                           ;incstack = 0
 13287                           ; Regs used in _SPI2_Exchange8bit: [wreg]
 13288                           ;SPI2_Exchange8bit@data stored from wreg
 13289  0984  0020               	movlb	0	; select bank0
 13290  0985  00A0               	movwf	SPI2_Exchange8bit@data
 13291                           
 13292                           ;mcc_generated_files/spi2.c: 79: uint8_t SPI2_Exchange8bit(uint8_t data);mcc_generated_f
      +                          iles/spi2.c: 80: {;mcc_generated_files/spi2.c: 82:     SSP2CON1bits.WCOL = 0;
 13293  0986  0024               	movlb	4	; select bank4
 13294  0987  139D               	bcf	29,7	;volatile
 13295                           
 13296                           ;mcc_generated_files/spi2.c: 84:     SSP2BUF = data;
 13297  0988  0020               	movlb	0	; select bank0
 13298  0989  0820               	movf	SPI2_Exchange8bit@data,w
 13299  098A  0024               	movlb	4	; select bank4
 13300  098B  0099               	movwf	25	;volatile
 13301  098C                     l532:	
 13302                           ;mcc_generated_files/spi2.c: 89:     }
 13303                           
 13304                           ;mcc_generated_files/spi2.c: 86:     while(SSP2STATbits.BF == 0x0)
 13305                           
 13306                           
 13307                           ;mcc_generated_files/spi2.c: 86:     while(SSP2STATbits.BF == 0x0)
 13308  098C  0024               	movlb	4	; select bank4
 13309  098D  181C               	btfsc	28,0	;volatile
 13310  098E  2991               	goto	l5810
 13311  098F  0064               	clrwdt	;# 
 13312  0990  298C               	goto	l532
 13313  0991                     l5810:	
 13314                           
 13315                           ;mcc_generated_files/spi2.c: 91:     return (SSP2BUF);
 13316  0991  0819               	movf	25,w	;volatile
 13317  0992  0008               	return
 13318  0993                     __end_of_SPI2_Exchange8bit:	
 13319                           
 13320                           	psect	intentry
 13321  0004                     __pintentry:	
 13322 ;; *************** function _INTERRUPT_InterruptManager *****************
 13323 ;; Defined at:
 13324 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 13325 ;; Parameters:    Size  Location     Type
 13326 ;;		None
 13327 ;; Auto vars:     Size  Location     Type
 13328 ;;		None
 13329 ;; Return value:  Size  Location     Type
 13330 ;;                  1    wreg      void 
 13331 ;; Registers used:
 13332 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13333 ;; Tracked objects:
 13334 ;;		On entry : 0/0
 13335 ;;		On exit  : 0/0
 13336 ;;		Unchanged: 0/0
 13337 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13338 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13339 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13340 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13341 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13342 ;;Total ram usage:        0 bytes
 13343 ;; Hardware stack levels used:    1
 13344 ;; Hardware stack levels required when called:    4
 13345 ;; This function calls:
 13346 ;;		Absolute function
 13347 ;;		_PIN_MANAGER_IOC
 13348 ;;		_i2c_ISR
 13349 ;;		_i2c_busCollisionISR
 13350 ;; This function is called by:
 13351 ;;		Interrupt level 1
 13352 ;; This function uses a non-reentrant model
 13353 ;;
 13354                           
 13355  0004                     _INTERRUPT_InterruptManager:	
 13356                           
 13357                           ;incstack = 0
 13358  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 13359                           
 13360                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13361  0005  3180               	pagesel	$
 13362                           
 13363                           ;mcc_generated_files/interrupt_manager.c: 55:     if(PIE0bits.IOCIE == 1 && PIR0bits.IOC
      +                          IF == 1)
 13364  0006  0021               	movlb	1	; select bank1
 13365  0007  1E10               	btfss	16,4	;volatile
 13366  0008  2810               	goto	i1l245
 13367  0009  0020               	movlb	0	; select bank0
 13368  000A  1E10               	btfss	16,4	;volatile
 13369  000B  2810               	goto	i1l245
 13370                           
 13371                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         PIN_MANAGER_IOC();
 13372  000C  3188  2066  3180   	fcall	_PIN_MANAGER_IOC
 13373                           
 13374                           ;mcc_generated_files/interrupt_manager.c: 58:     }
 13375  000F  282B               	goto	i1l253
 13376  0010                     i1l245:	
 13377                           ;mcc_generated_files/interrupt_manager.c: 59:     else if(INTCONbits.PEIE == 1)
 13378                           
 13379  0010  1F0B               	btfss	11,6	;volatile
 13380  0011  282B               	goto	i1l253
 13381                           
 13382                           ;mcc_generated_files/interrupt_manager.c: 60:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 61:         if(PIE1bits.BCL1IE == 1 && PIR1bits.BCL1IF == 1)
 13383  0012  0021               	movlb	1	; select bank1
 13384  0013  1D11               	btfss	17,2	;volatile
 13385  0014  281F               	goto	i1l248
 13386  0015  0020               	movlb	0	; select bank0
 13387  0016  1D11               	btfss	17,2	;volatile
 13388  0017  281F               	goto	i1l248
 13389                           
 13390                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             i2c1_driver_busCollisionISR();
 13391  0018  0021               	movlb	1	; select bank1
 13392  0019  086E               	movf	(_i2c1_driver_busCollisionISR+1)^(0+128),w
 13393  001A  008A               	movwf	10
 13394  001B  086D               	movf	_i2c1_driver_busCollisionISR^(0+128),w
 13395  001C  000A               	callw
 13396  001D  3180               	pagesel	$
 13397                           
 13398                           ;mcc_generated_files/interrupt_manager.c: 64:         }
 13399  001E  282B               	goto	i1l253
 13400  001F                     i1l248:	
 13401                           ;mcc_generated_files/interrupt_manager.c: 65:         else if(PIE1bits.SSP1IE == 1 && PI
      +                          R1bits.SSP1IF == 1)
 13402                           
 13403  001F  0021               	movlb	1	; select bank1
 13404  0020  1D91               	btfss	17,3	;volatile
 13405  0021  282B               	goto	i1l253
 13406  0022  0020               	movlb	0	; select bank0
 13407  0023  1D91               	btfss	17,3	;volatile
 13408  0024  282B               	goto	i1l253
 13409                           
 13410                           ;mcc_generated_files/interrupt_manager.c: 66:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 67:             i2c1_driver_i2cISR();
 13411  0025  0021               	movlb	1	; select bank1
 13412  0026  086C               	movf	(_i2c1_driver_i2cISR+1)^(0+128),w
 13413  0027  008A               	movwf	10
 13414  0028  086B               	movf	_i2c1_driver_i2cISR^(0+128),w
 13415  0029  000A               	callw
 13416  002A  3180               	pagesel	$
 13417  002B                     i1l253:	
 13418                           ;mcc_generated_files/interrupt_manager.c: 75:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 77:     }
 13419                           
 13420                           ;mcc_generated_files/interrupt_manager.c: 68:         }
 13421                           
 13422  002B  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 13423  002C  0009               	retfie
 13424  002D                     __end_of_INTERRUPT_InterruptManager:	
 13425                           
 13426                           	psect	text67
 13427  0881                     __ptext67:	
 13428 ;; *************** function _i2c_busCollisionISR *****************
 13429 ;; Defined at:
 13430 ;;		line 435 in file "mcc_generated_files/drivers/i2c_master.c"
 13431 ;; Parameters:    Size  Location     Type
 13432 ;;		None
 13433 ;; Auto vars:     Size  Location     Type
 13434 ;;		None
 13435 ;; Return value:  Size  Location     Type
 13436 ;;                  1    wreg      void 
 13437 ;; Registers used:
 13438 ;;		status,2, status,0, pclath, cstack
 13439 ;; Tracked objects:
 13440 ;;		On entry : 0/0
 13441 ;;		On exit  : 0/0
 13442 ;;		Unchanged: 0/0
 13443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13444 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13445 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13446 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13447 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13448 ;;Total ram usage:        0 bytes
 13449 ;; Hardware stack levels used:    1
 13450 ;; Hardware stack levels required when called:    1
 13451 ;; This function calls:
 13452 ;;		_i2c1_driver_clearBusCollision
 13453 ;; This function is called by:
 13454 ;;		_i2c_open
 13455 ;;		_INTERRUPT_InterruptManager
 13456 ;; This function uses a non-reentrant model
 13457 ;;
 13458                           
 13459                           
 13460                           ;psect for function _i2c_busCollisionISR
 13461  0881                     _i2c_busCollisionISR:	
 13462                           
 13463                           ;mcc_generated_files/drivers/i2c_master.c: 437:     i2c1_driver_clearBusCollision();
 13464                           
 13465                           ;incstack = 0
 13466                           ; Regs used in _i2c_busCollisionISR: [status,2+status,0+pclath+cstack]
 13467  0881  3188  207E         	fcall	_i2c1_driver_clearBusCollision
 13468  0883  0008               	return
 13469  0884                     __end_of_i2c_busCollisionISR:	
 13470                           
 13471                           	psect	text68
 13472  087E                     __ptext68:	
 13473 ;; *************** function _i2c1_driver_clearBusCollision *****************
 13474 ;; Defined at:
 13475 ;;		line 253 in file "mcc_generated_files/i2c1_driver.c"
 13476 ;; Parameters:    Size  Location     Type
 13477 ;;		None
 13478 ;; Auto vars:     Size  Location     Type
 13479 ;;		None
 13480 ;; Return value:  Size  Location     Type
 13481 ;;                  1    wreg      void 
 13482 ;; Registers used:
 13483 ;;		None
 13484 ;; Tracked objects:
 13485 ;;		On entry : 0/0
 13486 ;;		On exit  : 0/0
 13487 ;;		Unchanged: 0/0
 13488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13489 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13490 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13491 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13492 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13493 ;;Total ram usage:        0 bytes
 13494 ;; Hardware stack levels used:    1
 13495 ;; This function calls:
 13496 ;;		Nothing
 13497 ;; This function is called by:
 13498 ;;		_i2c_busCollisionISR
 13499 ;; This function uses a non-reentrant model
 13500 ;;
 13501                           
 13502                           
 13503                           ;psect for function _i2c1_driver_clearBusCollision
 13504  087E                     _i2c1_driver_clearBusCollision:	
 13505                           
 13506                           ;mcc_generated_files/i2c1_driver.c: 255:     PIR1bits.BCL1IF = 0;
 13507                           
 13508                           ;incstack = 0
 13509                           ; Regs used in _i2c1_driver_clearBusCollision: []
 13510  087E  0020               	movlb	0	; select bank0
 13511  087F  1111               	bcf	17,2	;volatile
 13512  0880  0008               	return
 13513  0881                     __end_of_i2c1_driver_clearBusCollision:	
 13514                           
 13515                           	psect	text69
 13516  0B12                     __ptext69:	
 13517 ;; *************** function _i2c_ISR *****************
 13518 ;; Defined at:
 13519 ;;		line 419 in file "mcc_generated_files/drivers/i2c_master.c"
 13520 ;; Parameters:    Size  Location     Type
 13521 ;;		None
 13522 ;; Auto vars:     Size  Location     Type
 13523 ;;		None
 13524 ;; Return value:  Size  Location     Type
 13525 ;;                  1    wreg      void 
 13526 ;; Registers used:
 13527 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13528 ;; Tracked objects:
 13529 ;;		On entry : 0/0
 13530 ;;		On exit  : 0/0
 13531 ;;		Unchanged: 0/0
 13532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13533 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13534 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13535 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13536 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13537 ;;Total ram usage:        3 bytes
 13538 ;; Hardware stack levels used:    1
 13539 ;; Hardware stack levels required when called:    3
 13540 ;; This function calls:
 13541 ;;		_do_I2C_DO_ACK
 13542 ;;		_do_I2C_DO_ADDRESS_NACK
 13543 ;;		_do_I2C_DO_NACK_RESTART
 13544 ;;		_do_I2C_DO_NACK_STOP
 13545 ;;		_do_I2C_IDLE
 13546 ;;		_do_I2C_RCEN
 13547 ;;		_do_I2C_RESET
 13548 ;;		_do_I2C_RX
 13549 ;;		_do_I2C_SEND_ADR_READ
 13550 ;;		_do_I2C_SEND_ADR_WRITE
 13551 ;;		_do_I2C_SEND_RESTART
 13552 ;;		_do_I2C_SEND_RESTART_READ
 13553 ;;		_do_I2C_SEND_RESTART_WRITE
 13554 ;;		_do_I2C_SEND_STOP
 13555 ;;		_do_I2C_TX
 13556 ;;		_do_I2C_TX_EMPTY
 13557 ;;		_i2c1_driver_isNACK
 13558 ;;		_mssp1_clearIRQ
 13559 ;; This function is called by:
 13560 ;;		_i2c_open
 13561 ;;		_i2c_poller
 13562 ;;		_INTERRUPT_InterruptManager
 13563 ;; This function uses a non-reentrant model
 13564 ;;
 13565                           
 13566                           
 13567                           ;psect for function _i2c_ISR
 13568  0B12                     _i2c_ISR:	
 13569                           
 13570                           ;mcc_generated_files/drivers/i2c_master.c: 421:     mssp1_clearIRQ();
 13571                           
 13572                           ;incstack = 0
 13573                           ; Regs used in _i2c_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13574  0B12  3188  207B  318B   	fcall	_mssp1_clearIRQ
 13575                           
 13576                           ;mcc_generated_files/drivers/i2c_master.c: 427:     if(i2c_status.addressNACKCheck && i2
      +                          c1_driver_isNACK())
 13577  0B15  0023               	movlb	3	; select bank3
 13578  0B16  1DA0               	btfss	_i2c_status^(0+384),3
 13579  0B17  2B22               	goto	i1l5056
 13580  0B18  3189  2114  318B   	fcall	_i2c1_driver_isNACK
 13581  0B1B  1C03               	btfss	3,0
 13582  0B1C  2B22               	goto	i1l5056
 13583                           
 13584                           ;mcc_generated_files/drivers/i2c_master.c: 428:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 429:         i2c_status.state = I2C_ADDRESS_NACK;
 13585  0B1D  300F               	movlw	15
 13586  0B1E  00F3               	movwf	??_i2c_ISR
 13587  0B1F  0873               	movf	??_i2c_ISR,w
 13588  0B20  0023               	movlb	3	; select bank3
 13589  0B21  00A9               	movwf	(_i2c_status^(0+384)+9)
 13590  0B22                     i1l5056:	
 13591                           
 13592                           ;mcc_generated_files/drivers/i2c_master.c: 432:     i2c_status.state = fsmStateTable[i2c
      +                          _status.state]();
 13593  0B22  0023               	movlb	3	; select bank3
 13594  0B23  0829               	movf	(_i2c_status^(0+384)+9),w
 13595  0B24  00F3               	movwf	??_i2c_ISR
 13596  0B25  01F4               	clrf	??_i2c_ISR+1
 13597  0B26  35F3               	lslf	??_i2c_ISR,f
 13598  0B27  0DF4               	rlf	??_i2c_ISR+1,f
 13599  0B28  3000               	movlw	low (_fsmStateTable| (0+32768))
 13600  0B29  0773               	addwf	??_i2c_ISR,w
 13601  0B2A  0084               	movwf	4
 13602  0B2B  3090               	movlw	high (_fsmStateTable| (0+32768))
 13603  0B2C  3D74               	addwfc	??_i2c_ISR+1,w
 13604  0B2D  0085               	movwf	5
 13605  0B2E  3F01               	moviw [1]fsr0
 13606  0B2F  008A               	movwf	10
 13607  0B30  3F00               	moviw [0]fsr0
 13608  0B31  000A               	callw
 13609  0B32  318B               	pagesel	$
 13610  0B33  00F5               	movwf	??_i2c_ISR+2
 13611  0B34  0875               	movf	??_i2c_ISR+2,w
 13612  0B35  0023               	movlb	3	; select bank3
 13613  0B36  00A9               	movwf	(_i2c_status^(0+384)+9)
 13614  0B37  0008               	return
 13615  0B38                     __end_of_i2c_ISR:	
 13616                           
 13617                           	psect	text70
 13618  087B                     __ptext70:	
 13619 ;; *************** function _mssp1_clearIRQ *****************
 13620 ;; Defined at:
 13621 ;;		line 53 in file "mcc_generated_files/i2c1_driver.c"
 13622 ;; Parameters:    Size  Location     Type
 13623 ;;		None
 13624 ;; Auto vars:     Size  Location     Type
 13625 ;;		None
 13626 ;; Return value:  Size  Location     Type
 13627 ;;                  1    wreg      void 
 13628 ;; Registers used:
 13629 ;;		None
 13630 ;; Tracked objects:
 13631 ;;		On entry : 0/0
 13632 ;;		On exit  : 0/0
 13633 ;;		Unchanged: 0/0
 13634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13635 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13636 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13637 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13638 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13639 ;;Total ram usage:        0 bytes
 13640 ;; Hardware stack levels used:    1
 13641 ;; This function calls:
 13642 ;;		Nothing
 13643 ;; This function is called by:
 13644 ;;		_i2c_ISR
 13645 ;;		_i2c_open
 13646 ;;		_i2c_close
 13647 ;; This function uses a non-reentrant model
 13648 ;;
 13649                           
 13650                           
 13651                           ;psect for function _mssp1_clearIRQ
 13652  087B                     _mssp1_clearIRQ:	
 13653                           
 13654                           ;mcc_generated_files/i2c1_driver.c: 55:         SSP1STAT = 0x00;
 13655                           
 13656                           ;incstack = 0
 13657                           ; Regs used in _mssp1_clearIRQ: []
 13658  087B  0020               	movlb	0	; select bank0
 13659  087C  1191               	bcf	17,3	;volatile
 13660  087D  0008               	return
 13661  087E                     __end_of_mssp1_clearIRQ:	
 13662                           
 13663                           	psect	text71
 13664  07B7                     __ptext71:	
 13665 ;; *************** function _do_I2C_RX *****************
 13666 ;; Defined at:
 13667 ;;		line 357 in file "mcc_generated_files/drivers/i2c_master.c"
 13668 ;; Parameters:    Size  Location     Type
 13669 ;;		None
 13670 ;; Auto vars:     Size  Location     Type
 13671 ;;		None
 13672 ;; Return value:  Size  Location     Type
 13673 ;;                  1    wreg      enum E7120
 13674 ;; Registers used:
 13675 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13676 ;; Tracked objects:
 13677 ;;		On entry : 0/0
 13678 ;;		On exit  : 0/0
 13679 ;;		Unchanged: 0/0
 13680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13681 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13682 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13683 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13684 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13685 ;;Total ram usage:        3 bytes
 13686 ;; Hardware stack levels used:    1
 13687 ;; Hardware stack levels required when called:    2
 13688 ;; This function calls:
 13689 ;;		_do_I2C_DO_NACK_RESTART
 13690 ;;		_do_I2C_DO_NACK_STOP
 13691 ;;		_i2c1_driver_sendACK
 13692 ;;		_returnReset
 13693 ;;		_returnStop
 13694 ;;		i1_i2c1_driver_getRXData
 13695 ;; This function is called by:
 13696 ;;		_i2c_ISR
 13697 ;; This function uses a non-reentrant model
 13698 ;;
 13699                           
 13700                           
 13701                           ;psect for function _do_I2C_RX
 13702  07B7                     _do_I2C_RX:	
 13703                           
 13704                           ;mcc_generated_files/drivers/i2c_master.c: 359:     *i2c_status.data_ptr++ = i2c1_driver
      +                          _getRXData();
 13705                           
 13706                           ;incstack = 0
 13707                           ; Regs used in _do_I2C_RX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13708  07B7  3188  2075  3187   	fcall	i1_i2c1_driver_getRXData
 13709  07BA  00F0               	movwf	??_do_I2C_RX
 13710  07BB  0023               	movlb	3	; select bank3
 13711  07BC  0822               	movf	(low ((_i2c_status| (0+256)+2)))^(0+128),w
 13712  07BD  0086               	movwf	6
 13713  07BE  0187               	clrf	7
 13714  07BF  0870               	movf	??_do_I2C_RX,w
 13715  07C0  0081               	movwf	1
 13716  07C1  3001               	movlw	1
 13717  07C2  00F0               	movwf	??_do_I2C_RX
 13718  07C3  0870               	movf	??_do_I2C_RX,w
 13719  07C4  07A2               	addwf	(low ((_i2c_status| (0+256)+2)))^(0+128),f
 13720                           
 13721                           ;mcc_generated_files/drivers/i2c_master.c: 360:     if(--i2c_status.data_length)
 13722  07C5  3001               	movlw	1
 13723  07C6  02A3               	subwf	(_i2c_status^(0+384)+3),f
 13724  07C7  3000               	movlw	0
 13725  07C8  3BA4               	subwfb	((_i2c_status+1)^(0+384)+3),f
 13726  07C9  0823               	movf	(_i2c_status^(0+384)+3),w
 13727  07CA  0424               	iorwf	((_i2c_status+1)^(0+384)+3),w
 13728  07CB  1903               	btfsc	3,2
 13729  07CC  2FD1               	goto	i1l173
 13730                           
 13731                           ;mcc_generated_files/drivers/i2c_master.c: 361:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 362:         i2c1_driver_sendACK();
 13732  07CD  3188  209F         	fcall	_i2c1_driver_sendACK
 13733                           
 13734                           ;mcc_generated_files/drivers/i2c_master.c: 363:         return I2C_RCEN;
 13735  07CF  3005               	movlw	5
 13736  07D0  0008               	return
 13737  07D1                     i1l173:	
 13738                           ;mcc_generated_files/drivers/i2c_master.c: 365:     else
 13739                           
 13740                           
 13741                           ;mcc_generated_files/drivers/i2c_master.c: 366:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 367:         i2c_status.bufferFree = 1;
 13742  07D1  1520               	bsf	_i2c_status^(0+384),2
 13743                           
 13744                           ;mcc_generated_files/drivers/i2c_master.c: 368:         switch(i2c_status.callbackTable[
      +                          i2c_dataComplete](i2c_status.callbackPayload[i2c_dataComplete]))
 13745  07D2  2FD9               	goto	i1l4578
 13746  07D3                     i1l4568:	
 13747                           
 13748                           ;mcc_generated_files/drivers/i2c_master.c: 372:                 return do_I2C_DO_NACK_RE
      +                          START();
 13749  07D3  3188  20BF         	fcall	_do_I2C_DO_NACK_RESTART
 13750  07D5  0008               	return
 13751  07D6                     i1l4572:	
 13752                           
 13753                           ;mcc_generated_files/drivers/i2c_master.c: 376:                 return do_I2C_DO_NACK_ST
      +                          OP();
 13754  07D6  3188  20BB         	fcall	_do_I2C_DO_NACK_STOP
 13755  07D8  0008               	return
 13756  07D9                     i1l4578:	
 13757  07D9  0837               	movf	(low ((_i2c_status| (0+256)+23)))^(0+128),w
 13758  07DA  00F0               	movwf	??_do_I2C_RX
 13759  07DB  0870               	movf	??_do_I2C_RX,w
 13760  07DC  00F0               	movwf	returnReset@p
 13761  07DD  300B               	movlw	11
 13762  07DE  3EA0               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 13763  07DF  0086               	movwf	6
 13764  07E0  3001               	movlw	1	; select bank3/4
 13765  07E1  0087               	movwf	7
 13766  07E2  3F41               	moviw [1]fsr1
 13767  07E3  008A               	movwf	10
 13768  07E4  3F40               	moviw [0]fsr1
 13769  07E5  000A               	callw
 13770  07E6  3187               	pagesel	$
 13771  07E7  00F1               	movwf	??_do_I2C_RX+1
 13772  07E8  01F2               	clrf	??_do_I2C_RX+2
 13773                           
 13774                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13775                           ; Switch size 1, requested type "simple"
 13776                           ; Number of cases is 1, Range of values is 0 to 0
 13777                           ; switch strategies available:
 13778                           ; Name         Instructions Cycles
 13779                           ; simple_byte            4     3 (average)
 13780                           ; direct_byte            8     6 (fixed)
 13781                           ; jumptable            260     6 (fixed)
 13782                           ;	Chosen strategy is simple_byte
 13783  07E9  0872               	movf	??_do_I2C_RX+2,w
 13784  07EA  3A00               	xorlw	0	; case 0
 13785  07EB  1903               	skipnz
 13786  07EC  2FEE               	goto	i1l7304
 13787  07ED  2FD6               	goto	i1l4572
 13788  07EE                     i1l7304:	
 13789                           
 13790                           ; Switch size 1, requested type "simple"
 13791                           ; Number of cases is 4, Range of values is 1 to 4
 13792                           ; switch strategies available:
 13793                           ; Name         Instructions Cycles
 13794                           ; simple_byte           13     7 (average)
 13795                           ; direct_byte           17     9 (fixed)
 13796                           ; jumptable            263     9 (fixed)
 13797                           ;	Chosen strategy is simple_byte
 13798  07EE  0871               	movf	??_do_I2C_RX+1,w
 13799  07EF  3A01               	xorlw	1	; case 1
 13800  07F0  1903               	skipnz
 13801  07F1  2FD6               	goto	i1l4572
 13802  07F2  3A03               	xorlw	3	; case 2
 13803  07F3  1903               	skipnz
 13804  07F4  2FD3               	goto	i1l4568
 13805  07F5  3A01               	xorlw	1	; case 3
 13806  07F6  1903               	skipnz
 13807  07F7  2FD3               	goto	i1l4568
 13808  07F8  3A07               	xorlw	7	; case 4
 13809  07F9  1903               	skipnz
 13810  07FA  2FD6               	goto	i1l4572
 13811  07FB  2FD6               	goto	i1l4572
 13812  07FC  0008               	return
 13813  07FD                     __end_of_do_I2C_RX:	
 13814                           
 13815                           	psect	text72
 13816  0E02                     __ptext72:	
 13817 ;; *************** function _do_I2C_TX *****************
 13818 ;; Defined at:
 13819 ;;		line 333 in file "mcc_generated_files/drivers/i2c_master.c"
 13820 ;; Parameters:    Size  Location     Type
 13821 ;;		None
 13822 ;; Auto vars:     Size  Location     Type
 13823 ;;		None
 13824 ;; Return value:  Size  Location     Type
 13825 ;;                  1    wreg      enum E7120
 13826 ;; Registers used:
 13827 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13828 ;; Tracked objects:
 13829 ;;		On entry : 0/0
 13830 ;;		On exit  : 0/0
 13831 ;;		Unchanged: 0/0
 13832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13833 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13834 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13835 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13836 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13837 ;;Total ram usage:        3 bytes
 13838 ;; Hardware stack levels used:    1
 13839 ;; Hardware stack levels required when called:    2
 13840 ;; This function calls:
 13841 ;;		_do_I2C_SEND_RESTART_READ
 13842 ;;		_do_I2C_SEND_RESTART_WRITE
 13843 ;;		_do_I2C_SEND_STOP
 13844 ;;		_i2c1_driver_isNACK
 13845 ;;		_returnReset
 13846 ;;		_returnStop
 13847 ;;		i1_i2c1_driver_TXData
 13848 ;; This function is called by:
 13849 ;;		_i2c_ISR
 13850 ;; This function uses a non-reentrant model
 13851 ;;
 13852                           
 13853                           
 13854                           ;psect for function _do_I2C_TX
 13855  0E02                     _do_I2C_TX:	
 13856                           
 13857                           ;mcc_generated_files/drivers/i2c_master.c: 335:     if(i2c1_driver_isNACK())
 13858                           
 13859                           ;incstack = 0
 13860                           ; Regs used in _do_I2C_TX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13861  0E02  3189  2114  318E   	fcall	_i2c1_driver_isNACK
 13862  0E05  1803               	btfsc	3,0
 13863  0E06  2E11               	goto	i1l4538
 13864  0E07  2E35               	goto	i1l157
 13865  0E08                     i1l4524:	
 13866                           
 13867                           ;mcc_generated_files/drivers/i2c_master.c: 340:                 return do_I2C_SEND_RESTA
      +                          RT_READ();
 13868  0E08  3188  20A7         	fcall	_do_I2C_SEND_RESTART_READ
 13869  0E0A  0008               	return
 13870  0E0B                     i1l4528:	
 13871                           
 13872                           ;mcc_generated_files/drivers/i2c_master.c: 342:                 return do_I2C_SEND_RESTA
      +                          RT_WRITE();
 13873  0E0B  3188  20AB         	fcall	_do_I2C_SEND_RESTART_WRITE
 13874  0E0D  0008               	return
 13875  0E0E                     i1l4532:	
 13876                           
 13877                           ;mcc_generated_files/drivers/i2c_master.c: 346:                 return do_I2C_SEND_STOP(
      +                          );
 13878  0E0E  3188  20B3         	fcall	_do_I2C_SEND_STOP
 13879  0E10  0008               	return
 13880  0E11                     i1l4538:	
 13881  0E11  0023               	movlb	3	; select bank3
 13882  0E12  083A               	movf	(low ((_i2c_status| (0+256)+26)))^(0+128),w
 13883  0E13  00F0               	movwf	??_do_I2C_TX
 13884  0E14  0870               	movf	??_do_I2C_TX,w
 13885  0E15  00F0               	movwf	returnReset@p
 13886  0E16  3011               	movlw	17
 13887  0E17  3EA0               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 13888  0E18  0086               	movwf	6
 13889  0E19  3001               	movlw	1	; select bank3/4
 13890  0E1A  0087               	movwf	7
 13891  0E1B  3F41               	moviw [1]fsr1
 13892  0E1C  008A               	movwf	10
 13893  0E1D  3F40               	moviw [0]fsr1
 13894  0E1E  000A               	callw
 13895  0E1F  318E               	pagesel	$
 13896  0E20  00F1               	movwf	??_do_I2C_TX+1
 13897  0E21  01F2               	clrf	??_do_I2C_TX+2
 13898                           
 13899                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13900                           ; Switch size 1, requested type "simple"
 13901                           ; Number of cases is 1, Range of values is 0 to 0
 13902                           ; switch strategies available:
 13903                           ; Name         Instructions Cycles
 13904                           ; simple_byte            4     3 (average)
 13905                           ; direct_byte            8     6 (fixed)
 13906                           ; jumptable            260     6 (fixed)
 13907                           ;	Chosen strategy is simple_byte
 13908  0E22  0872               	movf	??_do_I2C_TX+2,w
 13909  0E23  3A00               	xorlw	0	; case 0
 13910  0E24  1903               	skipnz
 13911  0E25  2E27               	goto	i1l7306
 13912  0E26  2E0E               	goto	i1l4532
 13913  0E27                     i1l7306:	
 13914                           
 13915                           ; Switch size 1, requested type "simple"
 13916                           ; Number of cases is 4, Range of values is 1 to 4
 13917                           ; switch strategies available:
 13918                           ; Name         Instructions Cycles
 13919                           ; simple_byte           13     7 (average)
 13920                           ; direct_byte           17     9 (fixed)
 13921                           ; jumptable            263     9 (fixed)
 13922                           ;	Chosen strategy is simple_byte
 13923  0E27  0871               	movf	??_do_I2C_TX+1,w
 13924  0E28  3A01               	xorlw	1	; case 1
 13925  0E29  1903               	skipnz
 13926  0E2A  2E0E               	goto	i1l4532
 13927  0E2B  3A03               	xorlw	3	; case 2
 13928  0E2C  1903               	skipnz
 13929  0E2D  2E08               	goto	i1l4524
 13930  0E2E  3A01               	xorlw	1	; case 3
 13931  0E2F  1903               	skipnz
 13932  0E30  2E0B               	goto	i1l4528
 13933  0E31  3A07               	xorlw	7	; case 4
 13934  0E32  1903               	skipnz
 13935  0E33  2E0E               	goto	i1l4532
 13936  0E34  2E0E               	goto	i1l4532
 13937  0E35                     i1l157:	
 13938                           ;mcc_generated_files/drivers/i2c_master.c: 349:     else
 13939                           
 13940                           
 13941                           ;mcc_generated_files/drivers/i2c_master.c: 350:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 351:         i2c_status.addressNACKCheck = 0;
 13942  0E35  0023               	movlb	3	; select bank3
 13943  0E36  11A0               	bcf	_i2c_status^(0+384),3
 13944                           
 13945                           ;mcc_generated_files/drivers/i2c_master.c: 352:         i2c1_driver_TXData(*i2c_status.d
      +                          ata_ptr++);
 13946  0E37  3002               	movlw	2
 13947  0E38  3EA0               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 13948  0E39  0086               	movwf	6
 13949  0E3A  3001               	movlw	1	; select bank3/4
 13950  0E3B  0087               	movwf	7
 13951  0E3C  3F40               	moviw [0]fsr1
 13952  0E3D  0084               	movwf	4
 13953  0E3E  0185               	clrf	5
 13954  0E3F  0A81               	incf	1,f
 13955  0E40  0800               	movf	0,w
 13956  0E41  3188  20CF  318E   	fcall	i1_i2c1_driver_TXData
 13957                           
 13958                           ;mcc_generated_files/drivers/i2c_master.c: 353:         return (--i2c_status.data_length
      +                          )?I2C_TX:I2C_TX_EMPTY;
 13959  0E44  3001               	movlw	1
 13960  0E45  0023               	movlb	3	; select bank3
 13961  0E46  02A3               	subwf	(_i2c_status^(0+384)+3),f
 13962  0E47  3000               	movlw	0
 13963  0E48  3BA4               	subwfb	((_i2c_status+1)^(0+384)+3),f
 13964  0E49  0823               	movf	(_i2c_status^(0+384)+3),w
 13965  0E4A  0424               	iorwf	((_i2c_status+1)^(0+384)+3),w
 13966  0E4B  1D03               	btfss	3,2
 13967  0E4C  2E4F               	goto	i1l4546
 13968  0E4D  3006               	movlw	6
 13969  0E4E  0008               	return
 13970  0E4F                     i1l4546:	
 13971  0E4F  3003               	movlw	3
 13972  0E50  0008               	return
 13973  0E51                     __end_of_do_I2C_TX:	
 13974                           
 13975                           	psect	text73
 13976  0C26                     __ptext73:	
 13977 ;; *************** function _do_I2C_DO_ADDRESS_NACK *****************
 13978 ;; Defined at:
 13979 ;;		line 319 in file "mcc_generated_files/drivers/i2c_master.c"
 13980 ;; Parameters:    Size  Location     Type
 13981 ;;		None
 13982 ;; Auto vars:     Size  Location     Type
 13983 ;;		None
 13984 ;; Return value:  Size  Location     Type
 13985 ;;                  1    wreg      enum E7120
 13986 ;; Registers used:
 13987 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13988 ;; Tracked objects:
 13989 ;;		On entry : 0/0
 13990 ;;		On exit  : 0/0
 13991 ;;		Unchanged: 0/0
 13992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13993 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13994 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13995 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13996 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13997 ;;Total ram usage:        3 bytes
 13998 ;; Hardware stack levels used:    1
 13999 ;; Hardware stack levels required when called:    2
 14000 ;; This function calls:
 14001 ;;		_do_I2C_SEND_RESTART
 14002 ;;		_do_I2C_SEND_STOP
 14003 ;;		_returnReset
 14004 ;;		_returnStop
 14005 ;; This function is called by:
 14006 ;;		_i2c_ISR
 14007 ;; This function uses a non-reentrant model
 14008 ;;
 14009                           
 14010                           
 14011                           ;psect for function _do_I2C_DO_ADDRESS_NACK
 14012  0C26                     _do_I2C_DO_ADDRESS_NACK:	
 14013                           
 14014                           ;mcc_generated_files/drivers/i2c_master.c: 321:     i2c_status.addressNACKCheck = 0;
 14015                           
 14016                           ;incstack = 0
 14017                           ; Regs used in _do_I2C_DO_ADDRESS_NACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14018  0C26  0023               	movlb	3	; select bank3
 14019  0C27  11A0               	bcf	_i2c_status^(0+384),3
 14020                           
 14021                           ;mcc_generated_files/drivers/i2c_master.c: 322:     i2c_status.error = I2C_FAIL;
 14022  0C28  3002               	movlw	2
 14023  0C29  00F0               	movwf	??_do_I2C_DO_ADDRESS_NACK
 14024  0C2A  0870               	movf	??_do_I2C_DO_ADDRESS_NACK,w
 14025  0C2B  00AA               	movwf	(_i2c_status^(0+384)+10)
 14026                           
 14027                           ;mcc_generated_files/drivers/i2c_master.c: 323:     switch(i2c_status.callbackTable[i2c_
      +                          addressNACK](i2c_status.callbackPayload[i2c_addressNACK]))
 14028  0C2C  2C33               	goto	i1l4512
 14029  0C2D                     i1l4502:	
 14030                           
 14031                           ;mcc_generated_files/drivers/i2c_master.c: 327:             return do_I2C_SEND_RESTART()
      +                          ;
 14032  0C2D  3188  20AF         	fcall	_do_I2C_SEND_RESTART
 14033  0C2F  0008               	return
 14034  0C30                     i1l4506:	
 14035                           
 14036                           ;mcc_generated_files/drivers/i2c_master.c: 329:             return do_I2C_SEND_STOP();
 14037  0C30  3188  20B3         	fcall	_do_I2C_SEND_STOP
 14038  0C32  0008               	return
 14039  0C33                     i1l4512:	
 14040  0C33  0839               	movf	(low ((_i2c_status| (0+256)+25)))^(0+128),w
 14041  0C34  00F0               	movwf	??_do_I2C_DO_ADDRESS_NACK
 14042  0C35  0870               	movf	??_do_I2C_DO_ADDRESS_NACK,w
 14043  0C36  00F0               	movwf	returnReset@p
 14044  0C37  300F               	movlw	15
 14045  0C38  3EA0               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 14046  0C39  0086               	movwf	6
 14047  0C3A  3001               	movlw	1	; select bank3/4
 14048  0C3B  0087               	movwf	7
 14049  0C3C  3F41               	moviw [1]fsr1
 14050  0C3D  008A               	movwf	10
 14051  0C3E  3F40               	moviw [0]fsr1
 14052  0C3F  000A               	callw
 14053  0C40  318C               	pagesel	$
 14054  0C41  00F1               	movwf	??_do_I2C_DO_ADDRESS_NACK+1
 14055  0C42  01F2               	clrf	??_do_I2C_DO_ADDRESS_NACK+2
 14056                           
 14057                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14058                           ; Switch size 1, requested type "simple"
 14059                           ; Number of cases is 1, Range of values is 0 to 0
 14060                           ; switch strategies available:
 14061                           ; Name         Instructions Cycles
 14062                           ; simple_byte            4     3 (average)
 14063                           ; direct_byte            8     6 (fixed)
 14064                           ; jumptable            260     6 (fixed)
 14065                           ;	Chosen strategy is simple_byte
 14066  0C43  0872               	movf	??_do_I2C_DO_ADDRESS_NACK+2,w
 14067  0C44  3A00               	xorlw	0	; case 0
 14068  0C45  1903               	skipnz
 14069  0C46  2C48               	goto	i1l7308
 14070  0C47  2C30               	goto	i1l4506
 14071  0C48                     i1l7308:	
 14072                           
 14073                           ; Switch size 1, requested type "simple"
 14074                           ; Number of cases is 2, Range of values is 2 to 3
 14075                           ; switch strategies available:
 14076                           ; Name         Instructions Cycles
 14077                           ; simple_byte            7     4 (average)
 14078                           ; direct_byte           13     9 (fixed)
 14079                           ; jumptable            263     9 (fixed)
 14080                           ;	Chosen strategy is simple_byte
 14081  0C48  0871               	movf	??_do_I2C_DO_ADDRESS_NACK+1,w
 14082  0C49  3A02               	xorlw	2	; case 2
 14083  0C4A  1903               	skipnz
 14084  0C4B  2C2D               	goto	i1l4502
 14085  0C4C  3A01               	xorlw	1	; case 3
 14086  0C4D  1903               	skipnz
 14087  0C4E  2C2D               	goto	i1l4502
 14088  0C4F  2C30               	goto	i1l4506
 14089  0C50  0008               	return
 14090  0C51                     __end_of_do_I2C_DO_ADDRESS_NACK:	
 14091                           
 14092                           	psect	text74
 14093  08BF                     __ptext74:	
 14094 ;; *************** function _do_I2C_DO_NACK_RESTART *****************
 14095 ;; Defined at:
 14096 ;;		line 311 in file "mcc_generated_files/drivers/i2c_master.c"
 14097 ;; Parameters:    Size  Location     Type
 14098 ;;		None
 14099 ;; Auto vars:     Size  Location     Type
 14100 ;;		None
 14101 ;; Return value:  Size  Location     Type
 14102 ;;                  1    wreg      enum E7120
 14103 ;; Registers used:
 14104 ;;		wreg, status,2, status,0, pclath, cstack
 14105 ;; Tracked objects:
 14106 ;;		On entry : 0/0
 14107 ;;		On exit  : 0/0
 14108 ;;		Unchanged: 0/0
 14109 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14110 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14111 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14112 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14113 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14114 ;;Total ram usage:        0 bytes
 14115 ;; Hardware stack levels used:    1
 14116 ;; Hardware stack levels required when called:    1
 14117 ;; This function calls:
 14118 ;;		i1_i2c1_driver_sendNACK
 14119 ;; This function is called by:
 14120 ;;		_do_I2C_RX
 14121 ;;		_i2c_ISR
 14122 ;; This function uses a non-reentrant model
 14123 ;;
 14124                           
 14125                           
 14126                           ;psect for function _do_I2C_DO_NACK_RESTART
 14127  08BF                     _do_I2C_DO_NACK_RESTART:	
 14128                           
 14129                           ;mcc_generated_files/drivers/i2c_master.c: 313:     i2c1_driver_sendNACK();
 14130                           
 14131                           ;incstack = 0
 14132                           ; Regs used in _do_I2C_DO_NACK_RESTART: [wreg+status,2+status,0+pclath+cstack]
 14133  08BF  3188  20A3         	fcall	i1_i2c1_driver_sendNACK
 14134                           
 14135                           ;mcc_generated_files/drivers/i2c_master.c: 314:     return I2C_SEND_RESTART;
 14136  08C1  3009               	movlw	9
 14137  08C2  0008               	return
 14138  08C3                     __end_of_do_I2C_DO_NACK_RESTART:	
 14139                           
 14140                           	psect	text75
 14141  08BB                     __ptext75:	
 14142 ;; *************** function _do_I2C_DO_NACK_STOP *****************
 14143 ;; Defined at:
 14144 ;;		line 305 in file "mcc_generated_files/drivers/i2c_master.c"
 14145 ;; Parameters:    Size  Location     Type
 14146 ;;		None
 14147 ;; Auto vars:     Size  Location     Type
 14148 ;;		None
 14149 ;; Return value:  Size  Location     Type
 14150 ;;                  1    wreg      enum E7120
 14151 ;; Registers used:
 14152 ;;		wreg, status,2, status,0, pclath, cstack
 14153 ;; Tracked objects:
 14154 ;;		On entry : 0/0
 14155 ;;		On exit  : 0/0
 14156 ;;		Unchanged: 0/0
 14157 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14158 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14159 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14160 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14161 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14162 ;;Total ram usage:        0 bytes
 14163 ;; Hardware stack levels used:    1
 14164 ;; Hardware stack levels required when called:    1
 14165 ;; This function calls:
 14166 ;;		i1_i2c1_driver_sendNACK
 14167 ;; This function is called by:
 14168 ;;		_do_I2C_RX
 14169 ;;		_i2c_ISR
 14170 ;; This function uses a non-reentrant model
 14171 ;;
 14172                           
 14173                           
 14174                           ;psect for function _do_I2C_DO_NACK_STOP
 14175  08BB                     _do_I2C_DO_NACK_STOP:	
 14176                           
 14177                           ;mcc_generated_files/drivers/i2c_master.c: 307:     i2c1_driver_sendNACK();
 14178                           
 14179                           ;incstack = 0
 14180                           ; Regs used in _do_I2C_DO_NACK_STOP: [wreg+status,2+status,0+pclath+cstack]
 14181  08BB  3188  20A3         	fcall	i1_i2c1_driver_sendNACK
 14182                           
 14183                           ;mcc_generated_files/drivers/i2c_master.c: 308:     return I2C_SEND_STOP;
 14184  08BD  300A               	movlw	10
 14185  08BE  0008               	return
 14186  08BF                     __end_of_do_I2C_DO_NACK_STOP:	
 14187                           
 14188                           	psect	text76
 14189  08B7                     __ptext76:	
 14190 ;; *************** function _do_I2C_DO_ACK *****************
 14191 ;; Defined at:
 14192 ;;		line 299 in file "mcc_generated_files/drivers/i2c_master.c"
 14193 ;; Parameters:    Size  Location     Type
 14194 ;;		None
 14195 ;; Auto vars:     Size  Location     Type
 14196 ;;		None
 14197 ;; Return value:  Size  Location     Type
 14198 ;;                  1    wreg      enum E7120
 14199 ;; Registers used:
 14200 ;;		wreg, status,2, status,0, pclath, cstack
 14201 ;; Tracked objects:
 14202 ;;		On entry : 0/0
 14203 ;;		On exit  : 0/0
 14204 ;;		Unchanged: 0/0
 14205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14206 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14207 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14208 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14209 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14210 ;;Total ram usage:        0 bytes
 14211 ;; Hardware stack levels used:    1
 14212 ;; Hardware stack levels required when called:    1
 14213 ;; This function calls:
 14214 ;;		_i2c1_driver_sendACK
 14215 ;; This function is called by:
 14216 ;;		_i2c_ISR
 14217 ;; This function uses a non-reentrant model
 14218 ;;
 14219                           
 14220                           
 14221                           ;psect for function _do_I2C_DO_ACK
 14222  08B7                     _do_I2C_DO_ACK:	
 14223                           
 14224                           ;mcc_generated_files/drivers/i2c_master.c: 301:     i2c1_driver_sendACK();
 14225                           
 14226                           ;incstack = 0
 14227                           ; Regs used in _do_I2C_DO_ACK: [wreg+status,2+status,0+pclath+cstack]
 14228  08B7  3188  209F         	fcall	_i2c1_driver_sendACK
 14229                           
 14230                           ;mcc_generated_files/drivers/i2c_master.c: 302:     return I2C_RCEN;
 14231  08B9  3005               	movlw	5
 14232  08BA  0008               	return
 14233  08BB                     __end_of_do_I2C_DO_ACK:	
 14234                           
 14235                           	psect	text77
 14236  08D9                     __ptext77:	
 14237 ;; *************** function _do_I2C_RCEN *****************
 14238 ;; Defined at:
 14239 ;;		line 292 in file "mcc_generated_files/drivers/i2c_master.c"
 14240 ;; Parameters:    Size  Location     Type
 14241 ;;		None
 14242 ;; Auto vars:     Size  Location     Type
 14243 ;;		None
 14244 ;; Return value:  Size  Location     Type
 14245 ;;                  1    wreg      enum E7120
 14246 ;; Registers used:
 14247 ;;		wreg, status,2, status,0, pclath, cstack
 14248 ;; Tracked objects:
 14249 ;;		On entry : 0/0
 14250 ;;		On exit  : 0/0
 14251 ;;		Unchanged: 0/0
 14252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14253 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14254 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14255 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14256 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14257 ;;Total ram usage:        0 bytes
 14258 ;; Hardware stack levels used:    1
 14259 ;; Hardware stack levels required when called:    1
 14260 ;; This function calls:
 14261 ;;		i1_i2c1_driver_startRX
 14262 ;; This function is called by:
 14263 ;;		_i2c_ISR
 14264 ;; This function uses a non-reentrant model
 14265 ;;
 14266                           
 14267                           
 14268                           ;psect for function _do_I2C_RCEN
 14269  08D9                     _do_I2C_RCEN:	
 14270                           
 14271                           ;mcc_generated_files/drivers/i2c_master.c: 294:     i2c_status.addressNACKCheck = 0;
 14272                           
 14273                           ;incstack = 0
 14274                           ; Regs used in _do_I2C_RCEN: [wreg+status,2+status,0+pclath+cstack]
 14275  08D9  0023               	movlb	3	; select bank3
 14276  08DA  11A0               	bcf	_i2c_status^(0+384),3
 14277                           
 14278                           ;mcc_generated_files/drivers/i2c_master.c: 295:     i2c1_driver_startRX();
 14279  08DB  3188  2072         	fcall	i1_i2c1_driver_startRX
 14280                           
 14281                           ;mcc_generated_files/drivers/i2c_master.c: 296:     return I2C_RX;
 14282  08DD  3004               	movlw	4
 14283  08DE  0008               	return
 14284  08DF                     __end_of_do_I2C_RCEN:	
 14285                           
 14286                           	psect	text78
 14287  08F8                     __ptext78:	
 14288 ;; *************** function _do_I2C_SEND_ADR_WRITE *****************
 14289 ;; Defined at:
 14290 ;;		line 285 in file "mcc_generated_files/drivers/i2c_master.c"
 14291 ;; Parameters:    Size  Location     Type
 14292 ;;		None
 14293 ;; Auto vars:     Size  Location     Type
 14294 ;;		None
 14295 ;; Return value:  Size  Location     Type
 14296 ;;                  1    wreg      enum E7120
 14297 ;; Registers used:
 14298 ;;		wreg, status,2, status,0, pclath, cstack
 14299 ;; Tracked objects:
 14300 ;;		On entry : 0/0
 14301 ;;		On exit  : 0/0
 14302 ;;		Unchanged: 0/0
 14303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14305 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14306 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14307 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14308 ;;Total ram usage:        0 bytes
 14309 ;; Hardware stack levels used:    1
 14310 ;; Hardware stack levels required when called:    1
 14311 ;; This function calls:
 14312 ;;		i1_i2c1_driver_TXData
 14313 ;; This function is called by:
 14314 ;;		_i2c_ISR
 14315 ;; This function uses a non-reentrant model
 14316 ;;
 14317                           
 14318                           
 14319                           ;psect for function _do_I2C_SEND_ADR_WRITE
 14320  08F8                     _do_I2C_SEND_ADR_WRITE:	
 14321                           
 14322                           ;mcc_generated_files/drivers/i2c_master.c: 287:     i2c_status.addressNACKCheck = 1;
 14323                           
 14324                           ;incstack = 0
 14325                           ; Regs used in _do_I2C_SEND_ADR_WRITE: [wreg+status,2+status,0+pclath+cstack]
 14326  08F8  0023               	movlb	3	; select bank3
 14327  08F9  15A0               	bsf	_i2c_status^(0+384),3
 14328                           
 14329                           ;mcc_generated_files/drivers/i2c_master.c: 288:     i2c1_driver_TXData(i2c_status.addres
      +                          s << 1);
 14330  08FA  3521               	lslf	(_i2c_status^(0+384)+1),w
 14331  08FB  3188  20CF         	fcall	i1_i2c1_driver_TXData
 14332                           
 14333                           ;mcc_generated_files/drivers/i2c_master.c: 289:     return I2C_TX;
 14334  08FD  3003               	movlw	3
 14335  08FE  0008               	return
 14336  08FF                     __end_of_do_I2C_SEND_ADR_WRITE:	
 14337                           
 14338                           	psect	text79
 14339  091C                     __ptext79:	
 14340 ;; *************** function _do_I2C_SEND_ADR_READ *****************
 14341 ;; Defined at:
 14342 ;;		line 278 in file "mcc_generated_files/drivers/i2c_master.c"
 14343 ;; Parameters:    Size  Location     Type
 14344 ;;		None
 14345 ;; Auto vars:     Size  Location     Type
 14346 ;;		None
 14347 ;; Return value:  Size  Location     Type
 14348 ;;                  1    wreg      enum E7120
 14349 ;; Registers used:
 14350 ;;		wreg, status,2, status,0, pclath, cstack
 14351 ;; Tracked objects:
 14352 ;;		On entry : 0/0
 14353 ;;		On exit  : 0/0
 14354 ;;		Unchanged: 0/0
 14355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14357 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14358 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14359 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14360 ;;Total ram usage:        0 bytes
 14361 ;; Hardware stack levels used:    1
 14362 ;; Hardware stack levels required when called:    1
 14363 ;; This function calls:
 14364 ;;		i1_i2c1_driver_TXData
 14365 ;; This function is called by:
 14366 ;;		_i2c_ISR
 14367 ;; This function uses a non-reentrant model
 14368 ;;
 14369                           
 14370                           
 14371                           ;psect for function _do_I2C_SEND_ADR_READ
 14372  091C                     _do_I2C_SEND_ADR_READ:	
 14373                           
 14374                           ;mcc_generated_files/drivers/i2c_master.c: 280:     i2c_status.addressNACKCheck = 1;
 14375                           
 14376                           ;incstack = 0
 14377                           ; Regs used in _do_I2C_SEND_ADR_READ: [wreg+status,2+status,0+pclath+cstack]
 14378  091C  0023               	movlb	3	; select bank3
 14379  091D  15A0               	bsf	_i2c_status^(0+384),3
 14380                           
 14381                           ;mcc_generated_files/drivers/i2c_master.c: 281:     i2c1_driver_TXData(i2c_status.addres
      +                          s << 1 | 1);
 14382  091E  1403               	setc
 14383  091F  0D21               	rlf	(_i2c_status^(0+384)+1),w
 14384  0920  3188  20CF         	fcall	i1_i2c1_driver_TXData
 14385                           
 14386                           ;mcc_generated_files/drivers/i2c_master.c: 282:     return I2C_RCEN;
 14387  0922  3005               	movlw	5
 14388  0923  0008               	return
 14389  0924                     __end_of_do_I2C_SEND_ADR_READ:	
 14390                           
 14391                           	psect	text80
 14392  08B3                     __ptext80:	
 14393 ;; *************** function _do_I2C_SEND_STOP *****************
 14394 ;; Defined at:
 14395 ;;		line 272 in file "mcc_generated_files/drivers/i2c_master.c"
 14396 ;; Parameters:    Size  Location     Type
 14397 ;;		None
 14398 ;; Auto vars:     Size  Location     Type
 14399 ;;		None
 14400 ;; Return value:  Size  Location     Type
 14401 ;;                  1    wreg      enum E7120
 14402 ;; Registers used:
 14403 ;;		wreg, status,2, status,0, pclath, cstack
 14404 ;; Tracked objects:
 14405 ;;		On entry : 0/0
 14406 ;;		On exit  : 0/0
 14407 ;;		Unchanged: 0/0
 14408 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14409 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14410 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14411 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14412 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14413 ;;Total ram usage:        0 bytes
 14414 ;; Hardware stack levels used:    1
 14415 ;; Hardware stack levels required when called:    1
 14416 ;; This function calls:
 14417 ;;		i1_i2c1_driver_stop
 14418 ;; This function is called by:
 14419 ;;		_do_I2C_DO_ADDRESS_NACK
 14420 ;;		_do_I2C_TX
 14421 ;;		_do_I2C_TX_EMPTY
 14422 ;;		_i2c_ISR
 14423 ;; This function uses a non-reentrant model
 14424 ;;
 14425                           
 14426                           
 14427                           ;psect for function _do_I2C_SEND_STOP
 14428  08B3                     _do_I2C_SEND_STOP:	
 14429                           
 14430                           ;mcc_generated_files/drivers/i2c_master.c: 274:     i2c1_driver_stop();
 14431                           
 14432                           ;incstack = 0
 14433                           ; Regs used in _do_I2C_SEND_STOP: [wreg+status,2+status,0+pclath+cstack]
 14434  08B3  3188  206F         	fcall	i1_i2c1_driver_stop
 14435                           
 14436                           ;mcc_generated_files/drivers/i2c_master.c: 275:     return I2C_IDLE;
 14437  08B5  3000               	movlw	0
 14438  08B6  0008               	return
 14439  08B7                     __end_of_do_I2C_SEND_STOP:	
 14440                           
 14441                           	psect	text81
 14442  08AF                     __ptext81:	
 14443 ;; *************** function _do_I2C_SEND_RESTART *****************
 14444 ;; Defined at:
 14445 ;;		line 266 in file "mcc_generated_files/drivers/i2c_master.c"
 14446 ;; Parameters:    Size  Location     Type
 14447 ;;		None
 14448 ;; Auto vars:     Size  Location     Type
 14449 ;;		None
 14450 ;; Return value:  Size  Location     Type
 14451 ;;                  1    wreg      enum E7120
 14452 ;; Registers used:
 14453 ;;		wreg, status,2, status,0, pclath, cstack
 14454 ;; Tracked objects:
 14455 ;;		On entry : 0/0
 14456 ;;		On exit  : 0/0
 14457 ;;		Unchanged: 0/0
 14458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14459 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14460 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14461 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14462 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14463 ;;Total ram usage:        0 bytes
 14464 ;; Hardware stack levels used:    1
 14465 ;; Hardware stack levels required when called:    1
 14466 ;; This function calls:
 14467 ;;		i1_i2c1_driver_restart
 14468 ;; This function is called by:
 14469 ;;		_do_I2C_DO_ADDRESS_NACK
 14470 ;;		_do_I2C_TX_EMPTY
 14471 ;;		_i2c_ISR
 14472 ;; This function uses a non-reentrant model
 14473 ;;
 14474                           
 14475                           
 14476                           ;psect for function _do_I2C_SEND_RESTART
 14477  08AF                     _do_I2C_SEND_RESTART:	
 14478                           
 14479                           ;mcc_generated_files/drivers/i2c_master.c: 268:     i2c1_driver_restart();
 14480                           
 14481                           ;incstack = 0
 14482                           ; Regs used in _do_I2C_SEND_RESTART: [wreg+status,2+status,0+pclath+cstack]
 14483  08AF  3188  206C         	fcall	i1_i2c1_driver_restart
 14484                           
 14485                           ;mcc_generated_files/drivers/i2c_master.c: 269:     return I2C_SEND_ADR_READ;
 14486  08B1  3001               	movlw	1
 14487  08B2  0008               	return
 14488  08B3                     __end_of_do_I2C_SEND_RESTART:	
 14489                           
 14490                           	psect	text82
 14491  08AB                     __ptext82:	
 14492 ;; *************** function _do_I2C_SEND_RESTART_WRITE *****************
 14493 ;; Defined at:
 14494 ;;		line 260 in file "mcc_generated_files/drivers/i2c_master.c"
 14495 ;; Parameters:    Size  Location     Type
 14496 ;;		None
 14497 ;; Auto vars:     Size  Location     Type
 14498 ;;		None
 14499 ;; Return value:  Size  Location     Type
 14500 ;;                  1    wreg      enum E7120
 14501 ;; Registers used:
 14502 ;;		wreg, status,2, status,0, pclath, cstack
 14503 ;; Tracked objects:
 14504 ;;		On entry : 0/0
 14505 ;;		On exit  : 0/0
 14506 ;;		Unchanged: 0/0
 14507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14508 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14509 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14510 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14511 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14512 ;;Total ram usage:        0 bytes
 14513 ;; Hardware stack levels used:    1
 14514 ;; Hardware stack levels required when called:    1
 14515 ;; This function calls:
 14516 ;;		i1_i2c1_driver_restart
 14517 ;; This function is called by:
 14518 ;;		_do_I2C_TX
 14519 ;;		_i2c_ISR
 14520 ;; This function uses a non-reentrant model
 14521 ;;
 14522                           
 14523                           
 14524                           ;psect for function _do_I2C_SEND_RESTART_WRITE
 14525  08AB                     _do_I2C_SEND_RESTART_WRITE:	
 14526                           
 14527                           ;mcc_generated_files/drivers/i2c_master.c: 262:     i2c1_driver_restart();
 14528                           
 14529                           ;incstack = 0
 14530                           ; Regs used in _do_I2C_SEND_RESTART_WRITE: [wreg+status,2+status,0+pclath+cstack]
 14531  08AB  3188  206C         	fcall	i1_i2c1_driver_restart
 14532                           
 14533                           ;mcc_generated_files/drivers/i2c_master.c: 263:     return I2C_SEND_ADR_WRITE;
 14534  08AD  3002               	movlw	2
 14535  08AE  0008               	return
 14536  08AF                     __end_of_do_I2C_SEND_RESTART_WRITE:	
 14537                           
 14538                           	psect	text83
 14539  08A7                     __ptext83:	
 14540 ;; *************** function _do_I2C_SEND_RESTART_READ *****************
 14541 ;; Defined at:
 14542 ;;		line 254 in file "mcc_generated_files/drivers/i2c_master.c"
 14543 ;; Parameters:    Size  Location     Type
 14544 ;;		None
 14545 ;; Auto vars:     Size  Location     Type
 14546 ;;		None
 14547 ;; Return value:  Size  Location     Type
 14548 ;;                  1    wreg      enum E7120
 14549 ;; Registers used:
 14550 ;;		wreg, status,2, status,0, pclath, cstack
 14551 ;; Tracked objects:
 14552 ;;		On entry : 0/0
 14553 ;;		On exit  : 0/0
 14554 ;;		Unchanged: 0/0
 14555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14556 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14557 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14558 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14559 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14560 ;;Total ram usage:        0 bytes
 14561 ;; Hardware stack levels used:    1
 14562 ;; Hardware stack levels required when called:    1
 14563 ;; This function calls:
 14564 ;;		i1_i2c1_driver_restart
 14565 ;; This function is called by:
 14566 ;;		_do_I2C_TX
 14567 ;;		_i2c_ISR
 14568 ;; This function uses a non-reentrant model
 14569 ;;
 14570                           
 14571                           
 14572                           ;psect for function _do_I2C_SEND_RESTART_READ
 14573  08A7                     _do_I2C_SEND_RESTART_READ:	
 14574                           
 14575                           ;mcc_generated_files/drivers/i2c_master.c: 256:     i2c1_driver_restart();
 14576                           
 14577                           ;incstack = 0
 14578                           ; Regs used in _do_I2C_SEND_RESTART_READ: [wreg+status,2+status,0+pclath+cstack]
 14579  08A7  3188  206C         	fcall	i1_i2c1_driver_restart
 14580                           
 14581                           ;mcc_generated_files/drivers/i2c_master.c: 257:     return I2C_SEND_ADR_READ;
 14582  08A9  3001               	movlw	1
 14583  08AA  0008               	return
 14584  08AB                     __end_of_do_I2C_SEND_RESTART_READ:	
 14585                           
 14586                           	psect	text84
 14587  08D4                     __ptext84:	
 14588 ;; *************** function _do_I2C_IDLE *****************
 14589 ;; Defined at:
 14590 ;;		line 247 in file "mcc_generated_files/drivers/i2c_master.c"
 14591 ;; Parameters:    Size  Location     Type
 14592 ;;		None
 14593 ;; Auto vars:     Size  Location     Type
 14594 ;;		None
 14595 ;; Return value:  Size  Location     Type
 14596 ;;                  1    wreg      enum E7120
 14597 ;; Registers used:
 14598 ;;		wreg, status,2
 14599 ;; Tracked objects:
 14600 ;;		On entry : 0/0
 14601 ;;		On exit  : 0/0
 14602 ;;		Unchanged: 0/0
 14603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14604 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14605 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14606 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14607 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14608 ;;Total ram usage:        0 bytes
 14609 ;; Hardware stack levels used:    1
 14610 ;; This function calls:
 14611 ;;		Nothing
 14612 ;; This function is called by:
 14613 ;;		_i2c_ISR
 14614 ;; This function uses a non-reentrant model
 14615 ;;
 14616                           
 14617                           
 14618                           ;psect for function _do_I2C_IDLE
 14619  08D4                     _do_I2C_IDLE:	
 14620                           
 14621                           ;mcc_generated_files/drivers/i2c_master.c: 249:     i2c_status.busy = 0;
 14622                           
 14623                           ;incstack = 0
 14624                           ; Regs used in _do_I2C_IDLE: [wreg+status,2]
 14625  08D4  0023               	movlb	3	; select bank3
 14626  08D5  1020               	bcf	_i2c_status^(0+384),0
 14627                           
 14628                           ;mcc_generated_files/drivers/i2c_master.c: 250:     i2c_status.error = I2C_NOERR;
 14629  08D6  01AA               	clrf	(_i2c_status^(0+384)+10)
 14630                           
 14631                           ;mcc_generated_files/drivers/i2c_master.c: 251:     return I2C_RESET;
 14632  08D7  300E               	movlw	14
 14633  08D8  0008               	return
 14634  08D9                     __end_of_do_I2C_IDLE:	
 14635                           
 14636                           	psect	text85
 14637  08F1                     __ptext85:	
 14638 ;; *************** function _do_I2C_RESET *****************
 14639 ;; Defined at:
 14640 ;;		line 239 in file "mcc_generated_files/drivers/i2c_master.c"
 14641 ;; Parameters:    Size  Location     Type
 14642 ;;		None
 14643 ;; Auto vars:     Size  Location     Type
 14644 ;;		None
 14645 ;; Return value:  Size  Location     Type
 14646 ;;                  1    wreg      enum E7120
 14647 ;; Registers used:
 14648 ;;		wreg, status,2, status,0, pclath, cstack
 14649 ;; Tracked objects:
 14650 ;;		On entry : 0/0
 14651 ;;		On exit  : 0/0
 14652 ;;		Unchanged: 0/0
 14653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14654 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14655 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14656 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14657 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14658 ;;Total ram usage:        0 bytes
 14659 ;; Hardware stack levels used:    1
 14660 ;; Hardware stack levels required when called:    1
 14661 ;; This function calls:
 14662 ;;		_i2c1_driver_resetBus
 14663 ;; This function is called by:
 14664 ;;		_i2c_ISR
 14665 ;; This function uses a non-reentrant model
 14666 ;;
 14667                           
 14668                           
 14669                           ;psect for function _do_I2C_RESET
 14670  08F1                     _do_I2C_RESET:	
 14671                           
 14672                           ;mcc_generated_files/drivers/i2c_master.c: 241:     i2c1_driver_resetBus();
 14673                           
 14674                           ;incstack = 0
 14675                           ; Regs used in _do_I2C_RESET: [wreg+status,2+status,0+pclath+cstack]
 14676  08F1  3188  2067         	fcall	_i2c1_driver_resetBus
 14677                           
 14678                           ;mcc_generated_files/drivers/i2c_master.c: 242:     i2c_status.busy = 0;
 14679  08F3  0023               	movlb	3	; select bank3
 14680  08F4  1020               	bcf	_i2c_status^(0+384),0
 14681                           
 14682                           ;mcc_generated_files/drivers/i2c_master.c: 243:     i2c_status.error = I2C_NOERR;
 14683  08F5  01AA               	clrf	(_i2c_status^(0+384)+10)
 14684                           
 14685                           ;mcc_generated_files/drivers/i2c_master.c: 244:     return I2C_RESET;
 14686  08F6  300E               	movlw	14
 14687  08F7  0008               	return
 14688  08F8                     __end_of_do_I2C_RESET:	
 14689                           
 14690                           	psect	text86
 14691  0C7C                     __ptext86:	
 14692 ;; *************** function _do_I2C_TX_EMPTY *****************
 14693 ;; Defined at:
 14694 ;;		line 382 in file "mcc_generated_files/drivers/i2c_master.c"
 14695 ;; Parameters:    Size  Location     Type
 14696 ;;		None
 14697 ;; Auto vars:     Size  Location     Type
 14698 ;;		None
 14699 ;; Return value:  Size  Location     Type
 14700 ;;                  1    wreg      enum E7120
 14701 ;; Registers used:
 14702 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14703 ;; Tracked objects:
 14704 ;;		On entry : 0/0
 14705 ;;		On exit  : 0/0
 14706 ;;		Unchanged: 0/0
 14707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14708 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14709 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14710 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14711 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14712 ;;Total ram usage:        3 bytes
 14713 ;; Hardware stack levels used:    1
 14714 ;; Hardware stack levels required when called:    2
 14715 ;; This function calls:
 14716 ;;		_do_I2C_SEND_RESTART
 14717 ;;		_do_I2C_SEND_STOP
 14718 ;;		_mssp1_setIRQ
 14719 ;;		_returnReset
 14720 ;;		_returnStop
 14721 ;; This function is called by:
 14722 ;;		_i2c_ISR
 14723 ;; This function uses a non-reentrant model
 14724 ;;
 14725                           
 14726                           
 14727                           ;psect for function _do_I2C_TX_EMPTY
 14728  0C7C                     _do_I2C_TX_EMPTY:	
 14729                           
 14730                           ;mcc_generated_files/drivers/i2c_master.c: 384:     i2c_status.bufferFree = 1;
 14731                           
 14732                           ;incstack = 0
 14733                           ; Regs used in _do_I2C_TX_EMPTY: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14734  0C7C  0023               	movlb	3	; select bank3
 14735  0C7D  1520               	bsf	_i2c_status^(0+384),2
 14736                           
 14737                           ;mcc_generated_files/drivers/i2c_master.c: 385:     switch(i2c_status.callbackTable[i2c_
      +                          dataComplete](i2c_status.callbackPayload[i2c_dataComplete]))
 14738  0C7E  2C89               	goto	i1l4604
 14739  0C7F                     i1l4588:	
 14740                           
 14741                           ;mcc_generated_files/drivers/i2c_master.c: 389:             return do_I2C_SEND_RESTART()
      +                          ;
 14742  0C7F  3188  20AF         	fcall	_do_I2C_SEND_RESTART
 14743  0C81  0008               	return
 14744  0C82                     i1l4592:	
 14745                           
 14746                           ;mcc_generated_files/drivers/i2c_master.c: 391:             mssp1_setIRQ();
 14747  0C82  3188  2078         	fcall	_mssp1_setIRQ
 14748                           
 14749                           ;mcc_generated_files/drivers/i2c_master.c: 392:             return I2C_TX;
 14750  0C84  3003               	movlw	3
 14751  0C85  0008               	return
 14752  0C86                     i1l4598:	
 14753                           
 14754                           ;mcc_generated_files/drivers/i2c_master.c: 395:             return do_I2C_SEND_STOP();
 14755  0C86  3188  20B3         	fcall	_do_I2C_SEND_STOP
 14756  0C88  0008               	return
 14757  0C89                     i1l4604:	
 14758  0C89  0837               	movf	(low ((_i2c_status| (0+256)+23)))^(0+128),w
 14759  0C8A  00F0               	movwf	??_do_I2C_TX_EMPTY
 14760  0C8B  0870               	movf	??_do_I2C_TX_EMPTY,w
 14761  0C8C  00F0               	movwf	returnReset@p
 14762  0C8D  300B               	movlw	11
 14763  0C8E  3EA0               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 14764  0C8F  0086               	movwf	6
 14765  0C90  3001               	movlw	1	; select bank3/4
 14766  0C91  0087               	movwf	7
 14767  0C92  3F41               	moviw [1]fsr1
 14768  0C93  008A               	movwf	10
 14769  0C94  3F40               	moviw [0]fsr1
 14770  0C95  000A               	callw
 14771  0C96  318C               	pagesel	$
 14772  0C97  00F1               	movwf	??_do_I2C_TX_EMPTY+1
 14773  0C98  01F2               	clrf	??_do_I2C_TX_EMPTY+2
 14774                           
 14775                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14776                           ; Switch size 1, requested type "simple"
 14777                           ; Number of cases is 1, Range of values is 0 to 0
 14778                           ; switch strategies available:
 14779                           ; Name         Instructions Cycles
 14780                           ; simple_byte            4     3 (average)
 14781                           ; direct_byte            8     6 (fixed)
 14782                           ; jumptable            260     6 (fixed)
 14783                           ;	Chosen strategy is simple_byte
 14784  0C99  0872               	movf	??_do_I2C_TX_EMPTY+2,w
 14785  0C9A  3A00               	xorlw	0	; case 0
 14786  0C9B  1903               	skipnz
 14787  0C9C  2C9E               	goto	i1l7310
 14788  0C9D  2C86               	goto	i1l4598
 14789  0C9E                     i1l7310:	
 14790                           
 14791                           ; Switch size 1, requested type "simple"
 14792                           ; Number of cases is 4, Range of values is 1 to 4
 14793                           ; switch strategies available:
 14794                           ; Name         Instructions Cycles
 14795                           ; simple_byte           13     7 (average)
 14796                           ; direct_byte           17     9 (fixed)
 14797                           ; jumptable            263     9 (fixed)
 14798                           ;	Chosen strategy is simple_byte
 14799  0C9E  0871               	movf	??_do_I2C_TX_EMPTY+1,w
 14800  0C9F  3A01               	xorlw	1	; case 1
 14801  0CA0  1903               	skipnz
 14802  0CA1  2C86               	goto	i1l4598
 14803  0CA2  3A03               	xorlw	3	; case 2
 14804  0CA3  1903               	skipnz
 14805  0CA4  2C7F               	goto	i1l4588
 14806  0CA5  3A01               	xorlw	1	; case 3
 14807  0CA6  1903               	skipnz
 14808  0CA7  2C7F               	goto	i1l4588
 14809  0CA8  3A07               	xorlw	7	; case 4
 14810  0CA9  1903               	skipnz
 14811  0CAA  2C82               	goto	i1l4592
 14812  0CAB  2C86               	goto	i1l4598
 14813  0CAC  0008               	return
 14814  0CAD                     __end_of_do_I2C_TX_EMPTY:	
 14815                           
 14816                           	psect	text87
 14817  0878                     __ptext87:	
 14818 ;; *************** function _mssp1_setIRQ *****************
 14819 ;; Defined at:
 14820 ;;		line 58 in file "mcc_generated_files/i2c1_driver.c"
 14821 ;; Parameters:    Size  Location     Type
 14822 ;;		None
 14823 ;; Auto vars:     Size  Location     Type
 14824 ;;		None
 14825 ;; Return value:  Size  Location     Type
 14826 ;;                  1    wreg      void 
 14827 ;; Registers used:
 14828 ;;		None
 14829 ;; Tracked objects:
 14830 ;;		On entry : 0/0
 14831 ;;		On exit  : 0/0
 14832 ;;		Unchanged: 0/0
 14833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14834 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14835 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14836 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14837 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14838 ;;Total ram usage:        0 bytes
 14839 ;; Hardware stack levels used:    1
 14840 ;; This function calls:
 14841 ;;		Nothing
 14842 ;; This function is called by:
 14843 ;;		_do_I2C_TX_EMPTY
 14844 ;; This function uses a non-reentrant model
 14845 ;;
 14846                           
 14847                           
 14848                           ;psect for function _mssp1_setIRQ
 14849  0878                     _mssp1_setIRQ:	
 14850                           
 14851                           ;mcc_generated_files/i2c1_driver.c: 60:     }
 14852                           
 14853                           ;incstack = 0
 14854                           ; Regs used in _mssp1_setIRQ: []
 14855  0878  0020               	movlb	0	; select bank0
 14856  0879  1591               	bsf	17,3	;volatile
 14857  087A  0008               	return
 14858  087B                     __end_of_mssp1_setIRQ:	
 14859                           
 14860                           	psect	text88
 14861  0914                     __ptext88:	
 14862 ;; *************** function _i2c1_driver_isNACK *****************
 14863 ;; Defined at:
 14864 ;;		line 161 in file "mcc_generated_files/i2c1_driver.c"
 14865 ;; Parameters:    Size  Location     Type
 14866 ;;		None
 14867 ;; Auto vars:     Size  Location     Type
 14868 ;;		None
 14869 ;; Return value:  Size  Location     Type
 14870 ;;		None               void
 14871 ;; Registers used:
 14872 ;;		wreg, status,2, status,0
 14873 ;; Tracked objects:
 14874 ;;		On entry : 0/0
 14875 ;;		On exit  : 0/0
 14876 ;;		Unchanged: 0/0
 14877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14879 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14880 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14881 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14882 ;;Total ram usage:        1 bytes
 14883 ;; Hardware stack levels used:    1
 14884 ;; This function calls:
 14885 ;;		Nothing
 14886 ;; This function is called by:
 14887 ;;		_do_I2C_TX
 14888 ;;		_i2c_ISR
 14889 ;; This function uses a non-reentrant model
 14890 ;;
 14891                           
 14892                           
 14893                           ;psect for function _i2c1_driver_isNACK
 14894  0914                     _i2c1_driver_isNACK:	
 14895                           
 14896                           ;mcc_generated_files/i2c1_driver.c: 163:     return SSP1CON2bits.ACKSTAT;
 14897                           
 14898                           ;incstack = 0
 14899                           ; Regs used in _i2c1_driver_isNACK: [wreg+status,2+status,0]
 14900  0914  0024               	movlb	4	; select bank4
 14901  0915  0E16               	swapf	22,w	;volatile
 14902  0916  0C89               	rrf	9,f
 14903  0917  0C89               	rrf	9,f
 14904  0918  3901               	andlw	1
 14905  0919  00F0               	movwf	??_i2c1_driver_isNACK
 14906  091A  0C70               	rrf	??_i2c1_driver_isNACK,w
 14907  091B  0008               	return
 14908  091C                     __end_of_i2c1_driver_isNACK:	
 14909                           
 14910                           	psect	text89
 14911  08CF                     __ptext89:	
 14912 ;; *************** function i1_i2c1_driver_TXData *****************
 14913 ;; Defined at:
 14914 ;;		line 186 in file "mcc_generated_files/i2c1_driver.c"
 14915 ;; Parameters:    Size  Location     Type
 14916 ;;  d               1    wreg     unsigned char 
 14917 ;; Auto vars:     Size  Location     Type
 14918 ;;  d               1    0[COMMON] unsigned char 
 14919 ;; Return value:  Size  Location     Type
 14920 ;;                  1    wreg      void 
 14921 ;; Registers used:
 14922 ;;		wreg
 14923 ;; Tracked objects:
 14924 ;;		On entry : 0/0
 14925 ;;		On exit  : 0/0
 14926 ;;		Unchanged: 0/0
 14927 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14928 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14929 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14930 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14931 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14932 ;;Total ram usage:        1 bytes
 14933 ;; Hardware stack levels used:    1
 14934 ;; This function calls:
 14935 ;;		Nothing
 14936 ;; This function is called by:
 14937 ;;		_do_I2C_SEND_ADR_READ
 14938 ;;		_do_I2C_SEND_ADR_WRITE
 14939 ;;		_do_I2C_TX
 14940 ;; This function uses a non-reentrant model
 14941 ;;
 14942                           
 14943                           
 14944                           ;psect for function i1_i2c1_driver_TXData
 14945  08CF                     i1_i2c1_driver_TXData:	
 14946                           
 14947                           ;incstack = 0
 14948                           ; Regs used in i1_i2c1_driver_TXData: [wreg]
 14949                           ;i1i2c1_driver_TXData@d stored from wreg
 14950  08CF  00F0               	movwf	i1i2c1_driver_TXData@d
 14951                           
 14952                           ;mcc_generated_files/i2c1_driver.c: 186: __attribute__((inline)) void i2c1_driver_TXData
      +                          (char d);mcc_generated_files/i2c1_driver.c: 187: {;mcc_generated_files/i2c1_driver.c: 18
      +                          8:     SSP1BUF = d;
 14953  08D0  0870               	movf	i1i2c1_driver_TXData@d,w
 14954  08D1  0024               	movlb	4	; select bank4
 14955  08D2  0091               	movwf	17	;volatile
 14956  08D3  0008               	return
 14957  08D4                     __end_ofi1_i2c1_driver_TXData:	
 14958                           
 14959                           	psect	text90
 14960  0875                     __ptext90:	
 14961 ;; *************** function i1_i2c1_driver_getRXData *****************
 14962 ;; Defined at:
 14963 ;;		line 171 in file "mcc_generated_files/i2c1_driver.c"
 14964 ;; Parameters:    Size  Location     Type
 14965 ;;		None
 14966 ;; Auto vars:     Size  Location     Type
 14967 ;;		None
 14968 ;; Return value:  Size  Location     Type
 14969 ;;                  1    wreg      unsigned char 
 14970 ;; Registers used:
 14971 ;;		wreg
 14972 ;; Tracked objects:
 14973 ;;		On entry : 0/0
 14974 ;;		On exit  : 0/0
 14975 ;;		Unchanged: 0/0
 14976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14977 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14978 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14979 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14980 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14981 ;;Total ram usage:        0 bytes
 14982 ;; Hardware stack levels used:    1
 14983 ;; This function calls:
 14984 ;;		Nothing
 14985 ;; This function is called by:
 14986 ;;		_do_I2C_RX
 14987 ;; This function uses a non-reentrant model
 14988 ;;
 14989                           
 14990                           
 14991                           ;psect for function i1_i2c1_driver_getRXData
 14992  0875                     i1_i2c1_driver_getRXData:	
 14993                           
 14994                           ;mcc_generated_files/i2c1_driver.c: 173:     return SSP1BUF;
 14995                           
 14996                           ;incstack = 0
 14997                           ; Regs used in i1_i2c1_driver_getRXData: [wreg]
 14998  0875  0024               	movlb	4	; select bank4
 14999  0876  0811               	movf	17,w	;volatile
 15000  0877  0008               	return
 15001  0878                     __end_ofi1_i2c1_driver_getRXData:	
 15002                           
 15003                           	psect	text91
 15004  08A3                     __ptext91:	
 15005 ;; *************** function i1_i2c1_driver_sendNACK *****************
 15006 ;; Defined at:
 15007 ;;		line 202 in file "mcc_generated_files/i2c1_driver.c"
 15008 ;; Parameters:    Size  Location     Type
 15009 ;;		None
 15010 ;; Auto vars:     Size  Location     Type
 15011 ;;		None
 15012 ;; Return value:  Size  Location     Type
 15013 ;;                  1    wreg      void 
 15014 ;; Registers used:
 15015 ;;		None
 15016 ;; Tracked objects:
 15017 ;;		On entry : 0/0
 15018 ;;		On exit  : 0/0
 15019 ;;		Unchanged: 0/0
 15020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15022 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15023 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15024 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15025 ;;Total ram usage:        0 bytes
 15026 ;; Hardware stack levels used:    1
 15027 ;; This function calls:
 15028 ;;		Nothing
 15029 ;; This function is called by:
 15030 ;;		_do_I2C_DO_NACK_STOP
 15031 ;;		_do_I2C_DO_NACK_RESTART
 15032 ;; This function uses a non-reentrant model
 15033 ;;
 15034                           
 15035                           
 15036                           ;psect for function i1_i2c1_driver_sendNACK
 15037  08A3                     i1_i2c1_driver_sendNACK:	
 15038                           
 15039                           ;mcc_generated_files/i2c1_driver.c: 204:     SSP1CON2bits.ACKDT = 1;
 15040                           
 15041                           ;incstack = 0
 15042                           ; Regs used in i1_i2c1_driver_sendNACK: []
 15043  08A3  0024               	movlb	4	; select bank4
 15044  08A4  1696               	bsf	22,5	;volatile
 15045                           
 15046                           ;mcc_generated_files/i2c1_driver.c: 205:     SSP1CON2bits.ACKEN = 1;
 15047  08A5  1616               	bsf	22,4	;volatile
 15048  08A6  0008               	return
 15049  08A7                     __end_ofi1_i2c1_driver_sendNACK:	
 15050                           
 15051                           	psect	text92
 15052  0867                     __ptext92:	
 15053 ;; *************** function _i2c1_driver_resetBus *****************
 15054 ;; Defined at:
 15055 ;;		line 141 in file "mcc_generated_files/i2c1_driver.c"
 15056 ;; Parameters:    Size  Location     Type
 15057 ;;		None
 15058 ;; Auto vars:     Size  Location     Type
 15059 ;;		None
 15060 ;; Return value:  Size  Location     Type
 15061 ;;                  1    wreg      void 
 15062 ;; Registers used:
 15063 ;;		None
 15064 ;; Tracked objects:
 15065 ;;		On entry : 0/0
 15066 ;;		On exit  : 0/0
 15067 ;;		Unchanged: 0/0
 15068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15069 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15070 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15071 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15072 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15073 ;;Total ram usage:        0 bytes
 15074 ;; Hardware stack levels used:    1
 15075 ;; This function calls:
 15076 ;;		Nothing
 15077 ;; This function is called by:
 15078 ;;		_do_I2C_RESET
 15079 ;; This function uses a non-reentrant model
 15080 ;;
 15081                           
 15082                           
 15083                           ;psect for function _i2c1_driver_resetBus
 15084  0867                     _i2c1_driver_resetBus:	
 15085                           
 15086                           ;incstack = 0
 15087                           ; Regs used in _i2c1_driver_resetBus: []
 15088  0867  0008               	return
 15089  0868                     __end_of_i2c1_driver_resetBus:	
 15090                           
 15091                           	psect	text93
 15092  0872                     __ptext93:	
 15093 ;; *************** function i1_i2c1_driver_startRX *****************
 15094 ;; Defined at:
 15095 ;;		line 166 in file "mcc_generated_files/i2c1_driver.c"
 15096 ;; Parameters:    Size  Location     Type
 15097 ;;		None
 15098 ;; Auto vars:     Size  Location     Type
 15099 ;;		None
 15100 ;; Return value:  Size  Location     Type
 15101 ;;                  1    wreg      void 
 15102 ;; Registers used:
 15103 ;;		None
 15104 ;; Tracked objects:
 15105 ;;		On entry : 0/0
 15106 ;;		On exit  : 0/0
 15107 ;;		Unchanged: 0/0
 15108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15109 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15110 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15111 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15112 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15113 ;;Total ram usage:        0 bytes
 15114 ;; Hardware stack levels used:    1
 15115 ;; This function calls:
 15116 ;;		Nothing
 15117 ;; This function is called by:
 15118 ;;		_do_I2C_RCEN
 15119 ;; This function uses a non-reentrant model
 15120 ;;
 15121                           
 15122                           
 15123                           ;psect for function i1_i2c1_driver_startRX
 15124  0872                     i1_i2c1_driver_startRX:	
 15125                           
 15126                           ;mcc_generated_files/i2c1_driver.c: 168:     SSP1CON2bits.RCEN = 1;
 15127                           
 15128                           ;incstack = 0
 15129                           ; Regs used in i1_i2c1_driver_startRX: []
 15130  0872  0024               	movlb	4	; select bank4
 15131  0873  1596               	bsf	22,3	;volatile
 15132  0874  0008               	return
 15133  0875                     __end_ofi1_i2c1_driver_startRX:	
 15134                           
 15135                           	psect	text94
 15136  0002                     __ptext94:	
 15137 ;; *************** function _returnReset *****************
 15138 ;; Defined at:
 15139 ;;		line 448 in file "mcc_generated_files/drivers/i2c_master.c"
 15140 ;; Parameters:    Size  Location     Type
 15141 ;;  p               1    0[COMMON] PTR void 
 15142 ;;		 -> NULL(0), 
 15143 ;; Auto vars:     Size  Location     Type
 15144 ;;		None
 15145 ;; Return value:  Size  Location     Type
 15146 ;;                  1    wreg      enum E6966
 15147 ;; Registers used:
 15148 ;;		wreg
 15149 ;; Tracked objects:
 15150 ;;		On entry : 0/0
 15151 ;;		On exit  : 0/0
 15152 ;;		Unchanged: 0/0
 15153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15154 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15155 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15156 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15157 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15158 ;;Total ram usage:        1 bytes
 15159 ;; Hardware stack levels used:    1
 15160 ;; This function calls:
 15161 ;;		Nothing
 15162 ;; This function is called by:
 15163 ;;		_i2c_open
 15164 ;;		_do_I2C_DO_ADDRESS_NACK
 15165 ;;		_do_I2C_TX
 15166 ;;		_do_I2C_RX
 15167 ;;		_do_I2C_TX_EMPTY
 15168 ;; This function uses a non-reentrant model
 15169 ;;
 15170                           
 15171                           
 15172                           ;psect for function _returnReset
 15173  0002                     _returnReset:	
 15174                           
 15175                           ;mcc_generated_files/drivers/i2c_master.c: 448: static i2c_operations_t returnReset(void
      +                           *p);mcc_generated_files/drivers/i2c_master.c: 449: {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 450:     return i2c_reset_link;
 15176                           
 15177                           ;incstack = 0
 15178                           ; Regs used in _returnReset: [wreg]
 15179  0002  3005               	movlw	5
 15180  0003  0008               	return
 15181  0004                     __end_of_returnReset:	
 15182                           
 15183                           	psect	text95
 15184  086A                     __ptext95:	
 15185 ;; *************** function _returnStop *****************
 15186 ;; Defined at:
 15187 ;;		line 443 in file "mcc_generated_files/drivers/i2c_master.c"
 15188 ;; Parameters:    Size  Location     Type
 15189 ;;  p               1    0[COMMON] PTR void 
 15190 ;;		 -> NULL(0), 
 15191 ;; Auto vars:     Size  Location     Type
 15192 ;;		None
 15193 ;; Return value:  Size  Location     Type
 15194 ;;                  1    wreg      enum E6966
 15195 ;; Registers used:
 15196 ;;		wreg
 15197 ;; Tracked objects:
 15198 ;;		On entry : 0/0
 15199 ;;		On exit  : 0/0
 15200 ;;		Unchanged: 0/0
 15201 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15202 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15203 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15204 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15205 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15206 ;;Total ram usage:        1 bytes
 15207 ;; Hardware stack levels used:    1
 15208 ;; This function calls:
 15209 ;;		Nothing
 15210 ;; This function is called by:
 15211 ;;		_i2c_open
 15212 ;;		_setCallBack
 15213 ;;		_do_I2C_DO_ADDRESS_NACK
 15214 ;;		_do_I2C_TX
 15215 ;;		_do_I2C_RX
 15216 ;;		_do_I2C_TX_EMPTY
 15217 ;; This function uses a non-reentrant model
 15218 ;;
 15219                           
 15220                           
 15221                           ;psect for function _returnStop
 15222  086A                     _returnStop:	
 15223                           
 15224                           ;mcc_generated_files/drivers/i2c_master.c: 443: static i2c_operations_t returnStop(void 
      +                          *p);mcc_generated_files/drivers/i2c_master.c: 444: {;mcc_generated_files/drivers/i2c_mas
      +                          ter.c: 445:     return i2c_stop;
 15225                           
 15226                           ;incstack = 0
 15227                           ; Regs used in _returnStop: [wreg]
 15228  086A  3001               	movlw	1
 15229  086B  0008               	return
 15230  086C                     __end_of_returnStop:	
 15231                           
 15232                           	psect	text96
 15233  086F                     __ptext96:	
 15234 ;; *************** function i1_i2c1_driver_stop *****************
 15235 ;; Defined at:
 15236 ;;		line 156 in file "mcc_generated_files/i2c1_driver.c"
 15237 ;; Parameters:    Size  Location     Type
 15238 ;;		None
 15239 ;; Auto vars:     Size  Location     Type
 15240 ;;		None
 15241 ;; Return value:  Size  Location     Type
 15242 ;;                  1    wreg      void 
 15243 ;; Registers used:
 15244 ;;		None
 15245 ;; Tracked objects:
 15246 ;;		On entry : 0/0
 15247 ;;		On exit  : 0/0
 15248 ;;		Unchanged: 0/0
 15249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15250 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15251 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15252 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15253 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15254 ;;Total ram usage:        0 bytes
 15255 ;; Hardware stack levels used:    1
 15256 ;; This function calls:
 15257 ;;		Nothing
 15258 ;; This function is called by:
 15259 ;;		_do_I2C_SEND_STOP
 15260 ;; This function uses a non-reentrant model
 15261 ;;
 15262                           
 15263                           
 15264                           ;psect for function i1_i2c1_driver_stop
 15265  086F                     i1_i2c1_driver_stop:	
 15266                           
 15267                           ;mcc_generated_files/i2c1_driver.c: 158:     SSP1CON2bits.PEN = 1;
 15268                           
 15269                           ;incstack = 0
 15270                           ; Regs used in i1_i2c1_driver_stop: []
 15271  086F  0024               	movlb	4	; select bank4
 15272  0870  1516               	bsf	22,2	;volatile
 15273  0871  0008               	return
 15274  0872                     __end_ofi1_i2c1_driver_stop:	
 15275                           
 15276                           	psect	text97
 15277  086C                     __ptext97:	
 15278 ;; *************** function i1_i2c1_driver_restart *****************
 15279 ;; Defined at:
 15280 ;;		line 151 in file "mcc_generated_files/i2c1_driver.c"
 15281 ;; Parameters:    Size  Location     Type
 15282 ;;		None
 15283 ;; Auto vars:     Size  Location     Type
 15284 ;;		None
 15285 ;; Return value:  Size  Location     Type
 15286 ;;                  1    wreg      void 
 15287 ;; Registers used:
 15288 ;;		None
 15289 ;; Tracked objects:
 15290 ;;		On entry : 0/0
 15291 ;;		On exit  : 0/0
 15292 ;;		Unchanged: 0/0
 15293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15294 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15295 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15296 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15297 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15298 ;;Total ram usage:        0 bytes
 15299 ;; Hardware stack levels used:    1
 15300 ;; This function calls:
 15301 ;;		Nothing
 15302 ;; This function is called by:
 15303 ;;		_do_I2C_SEND_RESTART_READ
 15304 ;;		_do_I2C_SEND_RESTART_WRITE
 15305 ;;		_do_I2C_SEND_RESTART
 15306 ;; This function uses a non-reentrant model
 15307 ;;
 15308                           
 15309                           
 15310                           ;psect for function i1_i2c1_driver_restart
 15311  086C                     i1_i2c1_driver_restart:	
 15312                           
 15313                           ;mcc_generated_files/i2c1_driver.c: 153:     SSP1CON2bits.RSEN = 1;
 15314                           
 15315                           ;incstack = 0
 15316                           ; Regs used in i1_i2c1_driver_restart: []
 15317  086C  0024               	movlb	4	; select bank4
 15318  086D  1496               	bsf	22,1	;volatile
 15319  086E  0008               	return
 15320  086F                     __end_ofi1_i2c1_driver_restart:	
 15321                           
 15322                           	psect	text98
 15323  089F                     __ptext98:	
 15324 ;; *************** function _i2c1_driver_sendACK *****************
 15325 ;; Defined at:
 15326 ;;		line 196 in file "mcc_generated_files/i2c1_driver.c"
 15327 ;; Parameters:    Size  Location     Type
 15328 ;;		None
 15329 ;; Auto vars:     Size  Location     Type
 15330 ;;		None
 15331 ;; Return value:  Size  Location     Type
 15332 ;;                  1    wreg      void 
 15333 ;; Registers used:
 15334 ;;		None
 15335 ;; Tracked objects:
 15336 ;;		On entry : 0/0
 15337 ;;		On exit  : 0/0
 15338 ;;		Unchanged: 0/0
 15339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15341 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15343 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15344 ;;Total ram usage:        0 bytes
 15345 ;; Hardware stack levels used:    1
 15346 ;; This function calls:
 15347 ;;		Nothing
 15348 ;; This function is called by:
 15349 ;;		_do_I2C_DO_ACK
 15350 ;;		_do_I2C_RX
 15351 ;;		_I2C_Send_ACK
 15352 ;; This function uses a non-reentrant model
 15353 ;;
 15354                           
 15355                           
 15356                           ;psect for function _i2c1_driver_sendACK
 15357  089F                     _i2c1_driver_sendACK:	
 15358                           
 15359                           ;mcc_generated_files/i2c1_driver.c: 198:     SSP1CON2bits.ACKDT = 0;
 15360                           
 15361                           ;incstack = 0
 15362                           ; Regs used in _i2c1_driver_sendACK: []
 15363  089F  0024               	movlb	4	; select bank4
 15364  08A0  1296               	bcf	22,5	;volatile
 15365                           
 15366                           ;mcc_generated_files/i2c1_driver.c: 199:     SSP1CON2bits.ACKEN = 1;
 15367  08A1  1616               	bsf	22,4	;volatile
 15368  08A2  0008               	return
 15369  08A3                     __end_of_i2c1_driver_sendACK:	
 15370                           
 15371                           	psect	text99
 15372  0866                     __ptext99:	
 15373 ;; *************** function _PIN_MANAGER_IOC *****************
 15374 ;; Defined at:
 15375 ;;		line 118 in file "mcc_generated_files/pin_manager.c"
 15376 ;; Parameters:    Size  Location     Type
 15377 ;;		None
 15378 ;; Auto vars:     Size  Location     Type
 15379 ;;		None
 15380 ;; Return value:  Size  Location     Type
 15381 ;;                  1    wreg      void 
 15382 ;; Registers used:
 15383 ;;		None
 15384 ;; Tracked objects:
 15385 ;;		On entry : 0/0
 15386 ;;		On exit  : 0/0
 15387 ;;		Unchanged: 0/0
 15388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15389 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15390 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15391 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15392 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15393 ;;Total ram usage:        0 bytes
 15394 ;; Hardware stack levels used:    1
 15395 ;; This function calls:
 15396 ;;		Nothing
 15397 ;; This function is called by:
 15398 ;;		_INTERRUPT_InterruptManager
 15399 ;; This function uses a non-reentrant model
 15400 ;;
 15401                           
 15402                           
 15403                           ;psect for function _PIN_MANAGER_IOC
 15404  0866                     _PIN_MANAGER_IOC:	
 15405                           
 15406                           ;incstack = 0
 15407                           ; Regs used in _PIN_MANAGER_IOC: []
 15408  0866  0008               	return
 15409  0867                     __end_of_PIN_MANAGER_IOC:	
 15410  007E                     btemp	set	126	;btemp
 15411  007E                     int$flags	set	126
 15412  007E                     wtemp0	set	126


Data Sizes:
    Strings     52
    Constant    32
    Data        10
    BSS         127
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      11
    BANK0            80     61      76
    BANK1            80     69      79
    BANK2            80     64      74
    BANK3            80      0      29
    BANK4            80      0      68
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    i2c_ISR$2417	const PTR FTN()enum E7120 size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_SEND_ADR_READ(), do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), 
		 -> do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), do_I2C_IDLE(), do_I2C_RESET(), 

    returnStop@p	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    returnReset@p	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    S52$11$0	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_4(CODE[11]), STR_3(CODE[16]), STR_2(CODE[13]), STR_1(CODE[12]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_4(CODE[11]), STR_3(CODE[16]), STR_2(CODE[13]), STR_1(CODE[12]), 

    wireReadDataBlock@val	PTR unsigned char  size(2) Largest target is 64
		 -> readGesture@fifo_data2(BANK1[64]), readGesture@fifo_data(BANK2[64]), 

    Display_Name@string1	PTR unsigned char  size(2) Largest target is 16
		 -> STR_4(CODE[11]), STR_3(CODE[16]), STR_2(CODE[13]), STR_1(CODE[12]), 

    names	PTR unsigned char [4] size(2) Largest target is 16
		 -> STR_4(CODE[11]), STR_3(CODE[16]), STR_2(CODE[13]), STR_1(CODE[12]), 

    i2c1_driver_i2cISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), i2c_ISR(), 

    i2c1_driver_busCollisionISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), i2c_busCollisionISR(), 

    fsmStateTable	const PTR FTN()enum E7120[16] size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_SEND_ADR_READ(), do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), 
		 -> do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), do_I2C_IDLE(), do_I2C_RESET(), 

    S52$callbackPayload	PTR void [6] size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    i2c_status.callbackPayload	PTR void [6] size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    S52$callbackTable	PTR FTN(PTR void ,)enum E6966[6] size(2) Largest target is 1
		 -> returnReset(), returnStop(), 

    i2c_status.callbackTable	PTR FTN(PTR void ,)enum E6966[6] size(2) Largest target is 1
		 -> returnReset(), returnStop(), 

    S52$data_ptr	PTR unsigned char  size(1) Largest target is 0

    i2c_status.data_ptr	PTR unsigned char  size(1) Largest target is 0


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_i2c_ISR
    _i2c_ISR->_do_I2C_DO_ADDRESS_NACK
    _i2c_ISR->_do_I2C_RX
    _i2c_ISR->_do_I2C_TX
    _i2c_ISR->_do_I2C_TX_EMPTY

Critical Paths under _main in BANK0

    _main->_handleGesture
    _initialize->_setMode
    _setProximityGain->_wireWriteDataByte
    _setProxIntLowThresh->_wireWriteDataByte
    _setProxIntHighThresh->_wireWriteDataByte
    _setLightIntLowThreshold->_wireWriteDataByte
    _setLightIntHighThreshold->_wireWriteDataByte
    _setLEDDrive->_wireWriteDataByte
    _setGestureWaitTime->_wireWriteDataByte
    _setGestureLEDDrive->_wireWriteDataByte
    _setGestureGain->_wireWriteDataByte
    _setGestureExitThresh->_wireWriteDataByte
    _setGestureEnterThresh->_wireWriteDataByte
    _setAmbientLightGain->_wireWriteDataByte
    _handleGesture->_readGesture
    _readGesture->_processGestureData
    _wireReadDataBlock->_I2C_Write_Byte
    _processGestureData->___awdiv
    ___awdiv->___wmul
    _isGestureAvailable->_wireReadDataByte
    _enableGestureSensor->_setMode
    _setLEDBoost->_wireWriteDataByte
    _setGestureMode->_wireWriteDataByte
    _setGestureIntEnable->_wireWriteDataByte
    _enablePower->_setMode
    _setMode->_getMode
    _wireWriteDataByte->_I2C_Write_Byte
    _getMode->_wireReadDataByte
    _wireReadDataByte->_I2C_Write_Byte
    _I2C_Write_Byte->_i2c1_driver_TXData
    _I2C_Read_Byte->_i2c1_driver_isBufferFull
    _Get_ADC->_Display_Name
    _Display_Name->_strlen
    _Display_Clear->_SPI_Write
    _SPI_Write->_SPI2_Exchange8bit

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _handleGesture->_readGesture

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    _handleGesture->_readGesture

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0   89026
                                             60 BANK0      1     1      0
                                             64 BANK1      5     5      0
                      _Display_Clear
                       _Display_Name
                            _Get_ADC
                         _PIR_Sensor
                  _SYSTEM_Initialize
                _enableGestureSensor
                      _handleGesture
                         _initialize
                 _isGestureAvailable
 ---------------------------------------------------------------------------------
 (1) _initialize                                           2     2      0   54520
                                             16 BANK0      2     2      0
                   _i2c1_driver_open
                _setAmbientLightGain
              _setGestureEnterThresh
               _setGestureExitThresh
                     _setGestureGain
                _setGestureIntEnable
                 _setGestureLEDDrive
                 _setGestureWaitTime
                        _setLEDDrive
           _setLightIntHighThreshold
            _setLightIntLowThreshold
                            _setMode
               _setProxIntHighThresh
                _setProxIntLowThresh
                   _setProximityGain
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setProximityGain                                     4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setProxIntLowThresh                                  2     2      0    3429
                                             10 BANK0      2     2      0
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setProxIntHighThresh                                 2     2      0    3429
                                             10 BANK0      2     2      0
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setLightIntLowThreshold                              5     3      2    3618
                                             10 BANK0      5     3      2
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setLightIntHighThreshold                             5     3      2    3618
                                             10 BANK0      5     3      2
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setLEDDrive                                          4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureWaitTime                                   3     3      0    3633
                                             10 BANK0      3     3      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureLEDDrive                                   4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureGain                                       4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureExitThresh                                 2     2      0    3429
                                             10 BANK0      2     2      0
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureEnterThresh                                2     2      0    3429
                                             10 BANK0      2     2      0
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setAmbientLightGain                                  3     3      0    3633
                                             10 BANK0      3     3      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _i2c1_driver_open                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _handleGesture                                        1     1      0    8932
                                             59 BANK0      1     1      0
                       _Display_Name
                        _readGesture
 ---------------------------------------------------------------------------------
 (2) _readGesture                                        140   138      2    8036
                                             47 BANK0     12    10      2
                                              0 BANK1     64    64      0
                                              0 BANK2     64    64      0
                      _decodeGesture
                            _getMode
                 _isGestureAvailable
                 _processGestureData
             _resetGestureParameters
                  _wireReadDataBlock
                   _wireReadDataByte
 ---------------------------------------------------------------------------------
 (3) _wireReadDataBlock                                   11     7      4     651
                                              6 BANK0     11     7      4
                        _I2C_ReStart
                      _I2C_Read_Byte
                      _I2C_Send_NACK
                          _I2C_Start
                           _I2C_Stop
                     _I2C_Write_Byte
 ---------------------------------------------------------------------------------
 (3) _processGestureData                                  32    32      0    5864
                                             15 BANK0     32    32      0
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    2396
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              9     5      4    1165
                                              6 BANK0      9     5      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _isGestureAvailable                                   2     2      0     198
                                              9 BANK0      2     2      0
                   _wireReadDataByte
 ---------------------------------------------------------------------------------
 (3) _decodeGesture                                       18    18      0     296
                                              0 BANK0     18    18      0
 ---------------------------------------------------------------------------------
 (1) _enableGestureSensor                                  2     2      0   23076
                                             16 BANK0      2     2      0
                        _enablePower
             _resetGestureParameters
                _setGestureIntEnable
                     _setGestureMode
                        _setLEDBoost
                            _setMode
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setLEDBoost                                          4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureMode                                       3     3      0    3633
                                             10 BANK0      3     3      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureIntEnable                                  3     3      0    3667
                                             10 BANK0      3     3      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (3) _resetGestureParameters                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _enablePower                                          0     0      0    4340
                            _setMode
 ---------------------------------------------------------------------------------
 (2) _setMode                                              5     4      1    4340
                                             11 BANK0      5     4      1
                            _getMode
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _wireWriteDataByte                                    4     1      3    3398
                                              6 BANK0      4     1      3
                          _I2C_Start
                           _I2C_Stop
                     _I2C_Write_Byte
 ---------------------------------------------------------------------------------
 (3) _getMode                                              2     2      0     195
                                              9 BANK0      2     2      0
                   _wireReadDataByte
 ---------------------------------------------------------------------------------
 (2) _wireReadDataByte                                     3     3      0     161
                                              6 BANK0      3     3      0
                        _I2C_ReStart
                      _I2C_Read_Byte
                      _I2C_Send_NACK
                          _I2C_Start
                           _I2C_Stop
                     _I2C_Write_Byte
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Byte                                       5     5      0      96
                                              1 BANK0      5     5      0
                 _i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_TXData                                   1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _I2C_Stop                                             0     0      0       0
                   _i2c1_driver_stop
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_stop                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_Start                                            0     0      0       0
                  _i2c1_driver_start
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_start                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_Send_NACK                                        0     0      0       0
               _i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_sendNACK                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_Read_Byte                                        0     0      0       0
              _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
                _i2c1_driver_startRX
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_startRX                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_isBufferFull                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_getRXData                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_ReStart                                          0     0      0       0
                _i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_restart                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                     _ADC_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PMD_Initialize
                    _PWM1_Initialize
                    _SPI2_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SPI2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PMD_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PIR_Sensor                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Get_ADC                                              5     5      0    1302
                                             12 BANK0      5     5      0
                  _ADC_GetConversion
                       _Display_Name
 ---------------------------------------------------------------------------------
 (2) _Display_Name                                         7     5      2     896
                                              5 BANK0      7     5      2
                 _PWM_Output_Disable
                  _PWM_Output_Enable
                          _SPI_Write
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _strlen                                               5     3      2     220
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (3) _PWM_Output_Enable                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PWM_Output_Disable                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_GetConversion                                    4     2      2      31
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _Display_Clear                                        1     1      0      62
                                              3 BANK0      1     1      0
                          _SPI_Write
 ---------------------------------------------------------------------------------
 (3) _SPI_Write                                            2     2      0      62
                                              1 BANK0      2     2      0
                  _SPI2_Exchange8bit
 ---------------------------------------------------------------------------------
 (4) _SPI2_Exchange8bit                                    1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                           0     0      0     914
                   Absolute function *
                    _PIN_MANAGER_IOC
                            _i2c_ISR *
                _i2c_busCollisionISR *
 ---------------------------------------------------------------------------------
 (9) _i2c_busCollisionISR                                  0     0      0       0
      _i2c1_driver_clearBusCollision
 ---------------------------------------------------------------------------------
 (10) _i2c1_driver_clearBusCollision                       0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _i2c_ISR                                              3     3      0     914
                                              3 COMMON     3     3      0
                      _do_I2C_DO_ACK *
             _do_I2C_DO_ADDRESS_NACK *
             _do_I2C_DO_NACK_RESTART *
                _do_I2C_DO_NACK_STOP *
                        _do_I2C_IDLE *
                        _do_I2C_RCEN *
                       _do_I2C_RESET *
                          _do_I2C_RX *
               _do_I2C_SEND_ADR_READ *
              _do_I2C_SEND_ADR_WRITE *
                _do_I2C_SEND_RESTART *
           _do_I2C_SEND_RESTART_READ *
          _do_I2C_SEND_RESTART_WRITE *
                   _do_I2C_SEND_STOP *
                          _do_I2C_TX *
                    _do_I2C_TX_EMPTY *
                 _i2c1_driver_isNACK
                     _mssp1_clearIRQ
 ---------------------------------------------------------------------------------
 (10) _mssp1_clearIRQ                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_TX_EMPTY                                     3     3      0     212
                                              0 COMMON     3     3      0
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                       _mssp1_setIRQ
                        _returnReset *
                         _returnStop *
 ---------------------------------------------------------------------------------
 (11) _mssp1_setIRQ                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_TX                                           3     3      0     234
                                              0 COMMON     3     3      0
           _do_I2C_SEND_RESTART_READ
          _do_I2C_SEND_RESTART_WRITE
                   _do_I2C_SEND_STOP
                 _i2c1_driver_isNACK
                        _returnReset *
                         _returnStop *
               i1_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (10) _i2c1_driver_isNACK                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _do_I2C_SEND_RESTART_WRITE                           0     0      0       0
              i1_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (11) _do_I2C_SEND_RESTART_READ                            0     0      0       0
              i1_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (10) _do_I2C_SEND_ADR_WRITE                               0     0      0      22
               i1_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (10) _do_I2C_SEND_ADR_READ                                0     0      0      22
               i1_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (11) i1_i2c1_driver_TXData                                1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_RX                                           3     3      0     212
                                              0 COMMON     3     3      0
             _do_I2C_DO_NACK_RESTART
                _do_I2C_DO_NACK_STOP
                _i2c1_driver_sendACK
                        _returnReset *
                         _returnStop *
            i1_i2c1_driver_getRXData
 ---------------------------------------------------------------------------------
 (11) i1_i2c1_driver_getRXData                             0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _do_I2C_DO_NACK_STOP                                 0     0      0       0
             i1_i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (11) _do_I2C_DO_NACK_RESTART                              0     0      0       0
             i1_i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (12) i1_i2c1_driver_sendNACK                              0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_RESET                                        0     0      0       0
               _i2c1_driver_resetBus
 ---------------------------------------------------------------------------------
 (11) _i2c1_driver_resetBus                                0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_RCEN                                         0     0      0       0
              i1_i2c1_driver_startRX
 ---------------------------------------------------------------------------------
 (11) i1_i2c1_driver_startRX                               0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_IDLE                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_DO_ADDRESS_NACK                              3     3      0     212
                                              0 COMMON     3     3      0
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                        _returnReset *
                         _returnStop *
 ---------------------------------------------------------------------------------
 (11) _returnStop                                          1     0      1       0
                                              0 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (11) _returnReset                                         1     0      1     212
                                              0 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (11) _do_I2C_SEND_STOP                                    0     0      0       0
                 i1_i2c1_driver_stop
 ---------------------------------------------------------------------------------
 (12) i1_i2c1_driver_stop                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _do_I2C_SEND_RESTART                                 0     0      0       0
              i1_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (12) i1_i2c1_driver_restart                               0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_DO_ACK                                       0     0      0       0
                _i2c1_driver_sendACK
 ---------------------------------------------------------------------------------
 (11) _i2c1_driver_sendACK                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _PIN_MANAGER_IOC                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (9) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Display_Clear
     _SPI_Write
       _SPI2_Exchange8bit
   _Display_Name
     _PWM_Output_Disable
     _PWM_Output_Enable
     _SPI_Write
       _SPI2_Exchange8bit
     _strlen
   _Get_ADC
     _ADC_GetConversion
     _Display_Name
       _PWM_Output_Disable
       _PWM_Output_Enable
       _SPI_Write
         _SPI2_Exchange8bit
       _strlen
   _PIR_Sensor
   _SYSTEM_Initialize
     _ADC_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PMD_Initialize
     _PWM1_Initialize
     _SPI2_Initialize
     _TMR2_Initialize
     _WDT_Initialize
   _enableGestureSensor
     _enablePower
       _setMode
         _getMode
           _wireReadDataByte
             _I2C_ReStart
               _i2c1_driver_restart
             _I2C_Read_Byte
               _i2c1_driver_getRXData
               _i2c1_driver_isBufferFull
               _i2c1_driver_startRX
             _I2C_Send_NACK
               _i2c1_driver_sendNACK
             _I2C_Start
               _i2c1_driver_start
             _I2C_Stop
               _i2c1_driver_stop
             _I2C_Write_Byte
               _i2c1_driver_TXData
         _wireWriteDataByte
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
     _resetGestureParameters
     _setGestureIntEnable
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureMode
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setLEDBoost
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setMode
       _getMode
         _wireReadDataByte
           _I2C_ReStart
             _i2c1_driver_restart
           _I2C_Read_Byte
             _i2c1_driver_getRXData
             _i2c1_driver_isBufferFull
             _i2c1_driver_startRX
           _I2C_Send_NACK
             _i2c1_driver_sendNACK
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _wireWriteDataByte
       _I2C_Start
         _i2c1_driver_start
       _I2C_Stop
         _i2c1_driver_stop
       _I2C_Write_Byte
         _i2c1_driver_TXData
   _handleGesture
     _Display_Name
       _PWM_Output_Disable
       _PWM_Output_Enable
       _SPI_Write
         _SPI2_Exchange8bit
       _strlen
     _readGesture
       _decodeGesture
       _getMode
         _wireReadDataByte
           _I2C_ReStart
             _i2c1_driver_restart
           _I2C_Read_Byte
             _i2c1_driver_getRXData
             _i2c1_driver_isBufferFull
             _i2c1_driver_startRX
           _I2C_Send_NACK
             _i2c1_driver_sendNACK
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
       _isGestureAvailable
         _wireReadDataByte
           _I2C_ReStart
             _i2c1_driver_restart
           _I2C_Read_Byte
             _i2c1_driver_getRXData
             _i2c1_driver_isBufferFull
             _i2c1_driver_startRX
           _I2C_Send_NACK
             _i2c1_driver_sendNACK
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
       _processGestureData
         ___awdiv
           ___wmul (ARG)
         ___wmul
       _resetGestureParameters
       _wireReadDataBlock
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
   _initialize
     _i2c1_driver_open
     _setAmbientLightGain
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureEnterThresh
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureExitThresh
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureGain
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureIntEnable
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureLEDDrive
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureWaitTime
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setLEDDrive
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setLightIntHighThreshold
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setLightIntLowThreshold
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setMode
       _getMode
         _wireReadDataByte
           _I2C_ReStart
             _i2c1_driver_restart
           _I2C_Read_Byte
             _i2c1_driver_getRXData
             _i2c1_driver_isBufferFull
             _i2c1_driver_startRX
           _I2C_Send_NACK
             _i2c1_driver_sendNACK
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setProxIntHighThresh
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setProxIntLowThresh
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setProximityGain
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _wireReadDataByte
       _I2C_ReStart
         _i2c1_driver_restart
       _I2C_Read_Byte
         _i2c1_driver_getRXData
         _i2c1_driver_isBufferFull
         _i2c1_driver_startRX
       _I2C_Send_NACK
         _i2c1_driver_sendNACK
       _I2C_Start
         _i2c1_driver_start
       _I2C_Stop
         _i2c1_driver_stop
       _I2C_Write_Byte
         _i2c1_driver_TXData
     _wireWriteDataByte
       _I2C_Start
         _i2c1_driver_start
       _I2C_Stop
         _i2c1_driver_stop
       _I2C_Write_Byte
         _i2c1_driver_TXData
   _isGestureAvailable
     _wireReadDataByte
       _I2C_ReStart
         _i2c1_driver_restart
       _I2C_Read_Byte
         _i2c1_driver_getRXData
         _i2c1_driver_isBufferFull
         _i2c1_driver_startRX
       _I2C_Send_NACK
         _i2c1_driver_sendNACK
       _I2C_Start
         _i2c1_driver_start
       _I2C_Stop
         _i2c1_driver_stop
       _I2C_Write_Byte
         _i2c1_driver_TXData

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _PIN_MANAGER_IOC *
   _i2c_ISR *
     _do_I2C_DO_ACK *
       _i2c1_driver_sendACK
     _do_I2C_DO_ADDRESS_NACK *
       _do_I2C_SEND_RESTART
         i1_i2c1_driver_restart
       _do_I2C_SEND_STOP
         i1_i2c1_driver_stop
       _returnReset *
       _returnStop *
     _do_I2C_DO_NACK_RESTART *
       i1_i2c1_driver_sendNACK
     _do_I2C_DO_NACK_STOP *
       i1_i2c1_driver_sendNACK
     _do_I2C_IDLE *
     _do_I2C_RCEN *
       i1_i2c1_driver_startRX
     _do_I2C_RESET *
       _i2c1_driver_resetBus
     _do_I2C_RX *
       _do_I2C_DO_NACK_RESTART
         i1_i2c1_driver_sendNACK
       _do_I2C_DO_NACK_STOP
         i1_i2c1_driver_sendNACK
       _i2c1_driver_sendACK
       _returnReset *
       _returnStop *
       i1_i2c1_driver_getRXData *
     _do_I2C_SEND_ADR_READ *
       i1_i2c1_driver_TXData
     _do_I2C_SEND_ADR_WRITE *
       i1_i2c1_driver_TXData
     _do_I2C_SEND_RESTART *
       i1_i2c1_driver_restart
     _do_I2C_SEND_RESTART_READ *
       i1_i2c1_driver_restart
     _do_I2C_SEND_RESTART_WRITE *
       i1_i2c1_driver_restart
     _do_I2C_SEND_STOP *
       i1_i2c1_driver_stop
     _do_I2C_TX *
       _do_I2C_SEND_RESTART_READ
         i1_i2c1_driver_restart
       _do_I2C_SEND_RESTART_WRITE
         i1_i2c1_driver_restart
       _do_I2C_SEND_STOP
         i1_i2c1_driver_stop
       _i2c1_driver_isNACK
       _returnReset *
       _returnStop *
       i1_i2c1_driver_TXData *
     _do_I2C_TX_EMPTY *
       _do_I2C_SEND_RESTART
         i1_i2c1_driver_restart
       _do_I2C_SEND_STOP
         i1_i2c1_driver_stop
       _mssp1_setIRQ
       _returnReset *
       _returnStop *
     _i2c1_driver_isNACK *
     _mssp1_clearIRQ *
   _i2c_busCollisionISR *
     _i2c1_driver_clearBusCollision

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       B       2       78.6%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     3D      4C       5       95.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     45      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     40      4A       9       92.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      1D      11       36.3%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      44      13       85.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     151      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     151      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Wed Apr 03 10:30:12 2019

                          returnReset@p 0070                   ?_setGestureExitThresh 0070  
                    __size_of_I2C_Start 0003                             __CFG_CP$OFF 0000  
                          ___awdiv@sign 002C                    __size_of_do_I2C_IDLE 0005  
                   _do_I2C_SEND_RESTART 08AF                    __size_of_do_I2C_RCEN 0006  
                   ___wmul@multiplicand 0022                      _PWM_Output_Disable 0884  
                           __CFG_LVP$ON 0000                                     l532 098C  
      processGestureData@ud_ratio_first 0031                                     l692 0EEC  
                                   l972 008C                                     l995 0247  
                                   l999 0270                                     _PR2 001E  
                          __CFG_CPD$OFF 0000                   __end_of_decodeGesture 04CE  
                  __size_of_I2C_ReStart 0003                                     _val 007A  
               __size_of_PMD_Initialize 0008                      I2C_Write_Byte@Byte 0023  
                       _TMR2_Initialize 093C                   __size_of_do_I2C_RESET 0007  
                                   wreg 0009                     ?_PWM_Output_Disable 0070  
                    i1_i2c1_driver_stop 086F                                    l1001 0296  
                                  l1014 02E7                                    l1007 02C8  
                                  l1040 03AD                                    l1018 0310  
                                  l1019 0328                                    l1052 03FE  
                                  l1044 03CA                                    l1143 0A83  
                                  l1240 0AC3                                    l1080 04BD  
                                  l1064 0451                                    l1056 041B  
                                  l1076 04A0                                    l1068 046E  
                                  l1398 0A9F                                    l6002 007D  
                                  l6020 00E2                                    l6200 03C5  
                                  l6104 0289                                    l7010 07B4  
                                  l6130 02E2                                    l6034 00FD  
                                  l6018 0088                                    l6108 0291  
                                  l6052 0147                                    l6214 03F9  
                                  l6206 03D7                                    l6118 02BB  
                                  l6126 02CA                                    l6070 01FA  
                                  l7022 0F56                                    l7014 0F43  
                                  l7008 07A8                                    l6232 044C  
                                  l6224 0428                                    l6136 030B  
                                  l6080 021F                                    l6072 01FD  
                                  l6048 00F9                                    l7032 0F6F  
                                  l7024 0F64                                    l6250 049B  
                                  l6242 047B                                    l6218 0416  
                                  l6170 0362                                    l6090 0242  
                                  l6082 0222                                    l6066 01E8  
                                  l6410 060A                                    l6402 05F7  
                                  l7130 0D8E                                    l6260 04CA  
                                  l6236 0469                                    l6180 0374  
                                  l6164 0355                                    l6076 020D  
                                  l7036 0F7C                                    l6254 04B8  
                                  l6182 0376                                    l6174 036A  
                                  l6158 0349                                    l6430 063B  
                                  l7302 0F85                                    l7038 0F99  
                                  l6502 0A01                                    l7142 0DAB  
                                  l6176 036C                                    l6264 04CC  
                                  l6168 0360                                    l6096 026B  
                                  l6432 069C                                    l6512 09EE  
                                  l5810 0991                                    l6186 0380  
                                  l6418 062D                                    l6522 0BC3  
                                  l6196 03A8                                    l6188 0386  
                                  l6436 06A5                                    l6542 0B9C  
                                  l6526 0BC5                                    l6456 0AC8  
                                  l6384 0ECF                                    l5904 09B5  
                                  l6392 05F3                                    l6608 0D41  
                                  l5922 0A34                                    l6562 09C8  
                                  l6626 0B84                                    l6546 0B9E  
                                  l5924 0A40                                    l5932 0E5D  
                                  l6644 0C7A                                    l5836 0A99  
                                  l6396 06A8                                    l6572 09DB  
                                  l5782 0962                                    l6662 0CDD  
                                  l5862 0F06                                    l6590 0D0F  
                                  l6744 0904                                    l5776 0A86  
                                  l5952 0E90                                    l5944 0E77  
                                  l5936 0E5F                                    l6680 0B5D  
                                  l5880 0F2C                                    l5872 0F0E  
                                  l5856 0EFB                                    l5954 0E91  
                                  l5946 0E84                                    l6690 0982  
                                  l5874 0F1A                                    l6762 04E3  
                                  l6908 0FB0                                    l5884 0F35  
                                  l6758 04E1                                    l5888 0F3D  
                                  l6970 071F                                    l6890 0FB2  
                                  l5986 0DC8                                    l6964 0707  
                                  l5988 0DF7                                    l6990 0764  
                                  l6894 0FB4                                    l5998 007B  
                                  l6976 0737                                    l6996 077C  
                                  l6988 075B                                    STR_1 103D  
                                  STR_2 1030                                    STR_3 1020  
                                  STR_4 1049                 __end_of_PWM1_Initialize 0976  
                                  _LATA 010C                                    _LATB 010D  
                                  _LATC 010E                                    u5005 0250  
                                  u5015 025C                                    u5025 0279  
                                  u5135 02D3                                    u5145 02F0  
                                  u5155 02FC                                    u5075 02A0  
                                  _PMD0 0911                                    u6205 06F9  
                                  u5325 0399                                    u4605 0F1B  
                                  u4525 0AA0                                    u5165 0319  
                                  u5085 02AE                                    _PMD1 0912  
                                  _PMD2 0913                                    u6215 0705  
                                  u5335 03B6                                    u4615 0F25  
                                  u4535 0AA5                                    _PMD3 0914  
                                  u4704 0E70                                    _PMD4 0915  
                                  u6305 077A                                    u6225 0711  
                                  u4705 0E6F                                    u5425 043D  
                                  u5345 03D4                                    u4625 0F2D  
                                  _PMD5 0916                                    u4714 0E7C  
                                  u5515 0ED9                                    u6315 0786  
                                  u6235 071D                                    u4715 0E7B  
                                  u5435 045A                                    u5195 0331  
                                  u6325 0792                                    u6245 0729  
                                  u5445 0478                                    u6335 07A3  
                                  u6255 0735                                    u5375 03EA  
                                  u6265 0741                                    u5385 0407  
                                  u4585 0F11                                    u6345 0F51  
                                  u5625 0BE5                                    u6275 074D  
                                  u6195 06E1                                    u5475 048C  
                                  u5395 0425                                    u4835 0097  
                                  u4755 0DD1                                    u6507 06BF  
                                  u5635 0C0E                                    u6517 0EA7  
                                  u5485 04A9                                    u5725 0CF0  
                                  u6527 0EB7                                    u6295 076E  
                                  u5495 04C7                                    u4935 01E1  
                                  u6537 099B                                    u4945 01F2  
                                  u5585 0636                                    u5745 0D22  
                                  u6547 0A12                                    u4955 0206  
                                  u5595 0645                                    u4965 0217  
                  ?_do_I2C_SEND_RESTART 0070                                    u5785 0CBE  
                                  u6497 06AC                                    u4995 0233  
                                  _TMR2 001D                                    _WPUA 020C  
                                  _WPUB 020D                                    _WPUC 020E  
                          __CFG_WRT$OFF 0000                           __CFG_FCMEN$ON 0000  
     __size_of_do_I2C_SEND_RESTART_READ 0004                     ?i1_i2c1_driver_stop 0070  
             ?_do_I2C_SEND_RESTART_READ 0070                                    _main 0D79  
                                  _name 005D               __size_of_do_I2C_SEND_STOP 0004  
                __size_of_do_I2C_DO_ACK 0004                                    fsr0h 0005  
                                  fsr1h 0007                                    indf0 0000  
                                  fsr0l 0004                                    indf1 0001  
                                  fsr1l 0006                                    btemp 007E  
                 ??_setGestureIntEnable 002A                        __end_of_I2C_Stop 0800  
                         __CFG_BOREN$ON 0000                 i1_i2c1_driver_getRXData 0875  
                 ?_do_I2C_SEND_ADR_READ 0070                           __CFG_BORV$LOW 0000  
       ??_i2c1_driver_clearBusCollision 0070                                    start 002D  
                       __end_of_Get_ADC 07B7                     I2C_Write_Byte@count 0024  
                         __CFG_CSWEN$ON 0000                           __CFG_MCLRE$ON 0000  
                  ??_PWM_Output_Disable 0020                         __end_of_i2c_ISR 0B38  
              ??_do_I2C_DO_NACK_RESTART 0070                            ?_readGesture 004F  
                          _do_I2C_RESET 08F1          __size_of_OSCILLATOR_Initialize 0008  
         __end_of_OSCILLATOR_Initialize 0934                    ??i1_i2c1_driver_stop 0070  
                                 _ADACT 009F                __end_of_i2c1_driver_open 095F  
                                 ?_main 0070                         __end_of___awdiv 0F42  
              __end_of_i2c1_driver_stop 089F                         ___awdiv@divisor 0026  
                                 _T2CON 001F              __end_of_i2c1_driver_TXData 08E5  
                        __CFG_DEBUG$OFF 0000                                   i1l157 0E35  
                                 i1l173 07D1                                   i1l253 002B  
                                 i1l245 0010                                   i1l248 001F  
                          ?_setLEDBoost 0070                         ___awdiv@counter 002B  
                          ?_setLEDDrive 0070                          _setGestureGain 0CDF  
                                 _OSCEN 091D                      wireReadDataBlock@j 0030  
                        _setGestureMode 0B38                                   _TRISA 008C  
                                 _TRISB 008D                                   _TRISC 008E  
           __end_of_setProxIntLowThresh 0A03                         __end_of_getMode 0955  
                           ?_PIR_Sensor 0070                   isGestureAvailable@val 002A  
               __end_of_PIN_MANAGER_IOC 0867              __end_of_i2c1_driver_isNACK 091C  
                __size_of_I2C_Read_Byte 000B                          _WDT_Initialize 08C7  
                                 _names 0160                        _b_i2c_error_flag 0076  
          __end_of_setProxIntHighThresh 09F0              ?_do_I2C_SEND_RESTART_WRITE 0070  
                                 _state 0078                                   _start 006B  
                 ??_do_I2C_SEND_RESTART 0070                         __end_of_setMode 0EA0  
                     __end_of_I2C_Start 089C                                   pclath 000A  
               __size_of_mssp1_clearIRQ 0003                    i1_i2c1_driver_TXData 08CF  
          __size_of_setAmbientLightGain 001E                  ?_do_I2C_SEND_ADR_WRITE 0070  
                __size_of_I2C_Send_NACK 0003                                   status 0003  
                                 wtemp0 007E                      __size_of_SPI_Write 0015  
              ?_setLightIntLowThreshold 002A              __end_of_setGestureLEDDrive 0D43  
                 setGestureWaitTime@val 002C                           _fsmStateTable 1000  
                         _gesture_data_ 0220                         __initialization 002F  
                ??_setGestureExitThresh 002A                       _SPI2_Exchange8bit 0984  
            processGestureData@lr_delta 004B                              _i2c_status 01A0  
                          __end_of_main 0DB8                       _handleGestureFlag 0077  
            processGestureData@ud_delta 0049                      ?_SPI2_Exchange8bit 0070  
               __end_of_TMR2_Initialize 0944             ?_INTERRUPT_InterruptManager 0070  
                __end_of_setGestureGain 0D11               __size_of_setProximityGain 0029  
                __end_of_setGestureMode 0B5F                           _do_I2C_DO_ACK 08B7  
                                ??_main 005C           __size_of_i2c1_driver_sendNACK 0004  
              __size_of_SPI2_Initialize 0007                     ??_SPI2_Exchange8bit 0020  
     __size_of_setLightIntHighThreshold 0027           __size_of_i2c1_driver_resetBus 0001  
                __end_of_WDT_Initialize 08CB                 ?_do_I2C_DO_ADDRESS_NACK 0070  
             ?_setLightIntHighThreshold 002A       setLightIntHighThreshold@threshold 002A  
                  __end_of_Display_Name 0EF0                    __size_of_enablePower 000E  
                                _ADCON0 009D                                  _ADCON1 009E  
                                _ADRESH 009C                                  _ADRESL 009B  
                                _CCPR1H 0292                                  _CCPR1L 0291  
                      ___awdiv@dividend 0028                      _processGestureData 006D  
                                _ANSELA 018C                                  _ANSELB 018D  
                                _ANSELC 018E                      __CFG_RSTOSC$HFINT1 0000  
          setProxIntLowThresh@threshold 002B                   ?i1_i2c1_driver_TXData 0070  
                                _RC2PPS 0EA2                                  _RB5PPS 0E9D  
                                _RB6PPS 0E9E                        ?_PWM1_Initialize 0070  
                                _RB7PPS 0E9F                                  _ODCONA 028C  
                                _ODCONB 028D                                  _RC6PPS 0EA6  
                                _ODCONC 028E                                  i1l4502 0C2D  
                                i1l4512 0C33                                  i1l5056 0B22  
                                i1l4506 0C30                                  i1l4604 0C89  
                                i1l4532 0E0E                                  i1l4524 0E08  
                                i1l4528 0E0B                                  i1l4546 0E4F  
                                i1l4538 0E11                                  i1l4572 07D6  
                                i1l7310 0C9E                                  i1l4592 0C82  
                                i1l7304 07EE                                  i1l4568 07D3  
                                i1l7306 0E27                                  i1l4578 07D9  
                                i1l4588 0C7F                                  i1l7308 0C48  
                                i1l4598 0C86               ??i1_i2c1_driver_getRXData 0070  
                             ??_Get_ADC 002C                        _wireReadDataByte 0AEE  
                                _OSCFRQ 091F                 ?_resetGestureParameters 0070  
                ??_do_I2C_SEND_ADR_READ 0070                                  _WDTCON 0097  
                             ??_i2c_ISR 0073                     ?_processGestureData 0070  
                     _gesture_lr_delta_ 0065                          __CFG_PWRTE$OFF 0000  
         setProxIntHighThresh@threshold 002B               __end_of_SPI2_Exchange8bit 0993  
                     _gesture_lr_count_ 0061                     wireReadDataByte@reg 0027  
                 _i2c1_driver_getRXData 088D                     wireReadDataByte@val 0028  
                     _gesture_ud_delta_ 0067             __end_of_do_I2C_DO_NACK_STOP 08BF  
                         _I2C_Read_Byte 095F              __end_of_isGestureAvailable 09B7  
                     _gesture_ud_count_ 0063                     __size_of_PIR_Sensor 0007  
                                ___wmul 0A96                               ??___awdiv 002A  
 __end_of_i2c1_driver_clearBusCollision 0881  __size_of_i2c1_driver_clearBusCollision 0003  
         _i2c1_driver_clearBusCollision 087E              __end_of_setGestureWaitTime 0B86  
                        __CFG_STVREN$ON 0000         __size_of_do_I2C_DO_NACK_RESTART 0004  
                                _button 0079                        ___awdiv@quotient 002D  
                        ?_do_I2C_DO_ACK 0070                         ?_setGestureGain 0070  
                         _I2C_Send_NACK 0893                               ??_getMode 0029  
                       ?_setGestureMode 0070                                  _strlen 0A2F  
               ??_setGestureEnterThresh 002A                    ??_processGestureData 002F  
                     __end_of_SPI_Write 0A18             __end_of_i2c1_driver_sendACK 08A3  
                        _PMD_Initialize 0934          __end_of_do_I2C_DO_ADDRESS_NACK 0C51  
                          __pdataCOMMON 007A                               ?_I2C_Stop 0070  
                    Display_Name@length 0028                               ??_setMode 002C  
                       ?_WDT_Initialize 0070             __end_of_i2c1_driver_restart 088A  
                          ?_returnReset 0070                ADC_GetConversion@channel 0023  
                     readGesture@motion 0053             __end_of_i2c1_driver_startRX 0893  
                      ?_PIN_MANAGER_IOC 0070          __end_of_resetGestureParameters 0A2F  
                     _SYSTEM_Initialize 0A47                 __end_of__initialization 0069  
                      _do_I2C_SEND_STOP 08B3                      __size_of_do_I2C_RX 0046  
                    __size_of_do_I2C_TX 004F                      ?_SYSTEM_Initialize 0070  
                setGestureWaitTime@time 002B                __size_of_do_I2C_TX_EMPTY 0031  
                            _adcResult2 00E5                          ?_I2C_Read_Byte 0070  
                        __pcstackCOMMON 0070                            __pidataBANK0 0868  
                          __pidataBANK2 0944                     ??_SYSTEM_Initialize 0020  
                 i1i2c1_driver_TXData@d 0070                    _setProxIntHighThresh 09DD  
                        _gesture_state_ 00E7                          ?_I2C_Send_NACK 0070  
                      ?_TMR2_Initialize 0070                   i1_i2c1_driver_restart 086C  
                __end_of_PMD_Initialize 093C                   i1_i2c1_driver_startRX 0872  
                  __size_of_readGesture 00F3                   __end_of_handleGesture 0F9C  
     __size_of_i2c1_driver_isBufferFull 0007                              ??_I2C_Stop 0020  
             ?_i2c1_driver_isBufferFull 0070                      _gesture_far_count_ 00E9  
                  __size_of_setLEDBoost 0032                    __size_of_setLEDDrive 0029  
                _do_I2C_DO_NACK_RESTART 08BF                  ??i1_i2c1_driver_TXData 0070  
             __end_of_SYSTEM_Initialize 0A5F                       ??_SPI2_Initialize 0020  
                        _mssp1_clearIRQ 087B                              __pbssBANK0 005D  
                            __pbssBANK1 00E5                              __pbssBANK2 0168  
                            __pbssBANK3 01A0                              __pbssBANK4 0220  
                  wireWriteDataByte@reg 0029                    wireWriteDataByte@val 0026  
                   getMode@enable_value 002A                ??i1_i2c1_driver_sendNACK 0070  
                ?_i2c1_driver_getRXData 0070              __size_of_SPI2_Exchange8bit 000F  
          __size_of_i2c_busCollisionISR 0003                              __pmaintext 0D79  
                 __end_of_Display_Clear 09A4                           ??_do_I2C_IDLE 0070  
                         ??_do_I2C_RCEN 0070                 setGestureLEDDrive@drive 002D  
                               ?___wmul 0020                         __CFG_PPS1WAY$ON 0000  
                       ??_do_I2C_DO_ACK 0070            __size_of_enableGestureSensor 0064  
                            __pintentry 0004                   ?_setProxIntHighThresh 0070  
                               _CCP1CON 0293                 __size_of_I2C_Write_Byte 001C  
                         ??_I2C_ReStart 0020                        _setProximityGain 0BFD  
                           setMode@mode 002F                         ?_PMD_Initialize 0070  
                   _setAmbientLightGain 0AD0                 __size_of_ADC_Initialize 0008  
                 __size_of_Display_Name 0050          ?_i2c1_driver_clearBusCollision 0070  
                               ?_strlen 0020                       ?_i2c1_driver_open 0070  
                     __end_of_do_I2C_RX 07FD                       __end_of_do_I2C_TX 0E51  
                     ?_i2c1_driver_stop 0070                       _wireReadDataBlock 0DB8  
                    ??_i2c1_driver_open 0020                      ??_i2c1_driver_stop 0020  
                               _OSCCON1 0919                                 _OSCCON3 091B  
                         ?_mssp1_setIRQ 0070                            ??_PIR_Sensor 0020  
                               _OSCTUNE 091E                    wireReadDataBlock@len 0028  
                  wireReadDataBlock@reg 002F                    wireReadDataBlock@val 0026  
                               _SSP1ADD 0212                                 _SSP2ADD 021A  
                               _SLRCONA 030C                                 _SLRCONB 030D  
                               _SLRCONC 030E                                 _SSP1BUF 0211  
                __end_of_mssp1_clearIRQ 087E                                 _SSP2BUF 0219  
                    ?_wireReadDataBlock 0026                                 _SSP1MSK 0213  
                     SPI_Write@incoming 0022             __end_of_setGestureIntEnable 0C7C  
               ??_do_I2C_SEND_ADR_WRITE 0070         processGestureData@lr_ratio_last 0037  
           ??_do_I2C_SEND_RESTART_WRITE 0070                            readGesture@i 0059  
                               _Get_ADC 06D7                      _i2c1_driver_TXData 08DF  
                  ?_setAmbientLightGain 0070                      _i2c1_driver_i2cISR 00EB  
                   ??_wireReadDataBlock 002A                                 _i2c_ISR 0B12  
                             _I2C_Start 0899                         ??_I2C_Read_Byte 0021  
                         setMode@enable 002B                      _i2c1_driver_isNACK 0914  
                __size_of_decodeGesture 0191                     ?_i2c1_driver_TXData 0070  
           __size_of_PWM_Output_Disable 0003                            _Display_Name 0EA0  
                       ??_I2C_Send_NACK 0020                                 ___awdiv 0EF0  
                       __size_of___wmul 001C                      __end_of_PIR_Sensor 0906  
                ?i1_i2c1_driver_restart 0070                       ??_do_I2C_TX_EMPTY 0070  
                   ?_i2c1_driver_isNACK 0070                  ?i1_i2c1_driver_startRX 0070  
              __end_of_wireReadDataByte 0B12                              _initialize 04CE  
                               _getMode 094C        __size_of_setLightIntLowThreshold 0027  
                    _setGestureLEDDrive 0D11                                 __ptext1 04CE  
                               __ptext2 0BFD                                 __ptext3 09F0  
                               __ptext4 09DD                                 __ptext5 0BAD  
                               __ptext6 0B86                                 __ptext7 0BD4  
                               __ptext8 0B5F                                 __ptext9 0D11  
           __size_ofi1_i2c1_driver_stop 0003                     __end_of_do_I2C_IDLE 08D9  
             __end_of_wireReadDataBlock 0E02                     __end_of_do_I2C_RCEN 08DF  
                       __size_of_strlen 0018                   _OSCILLATOR_Initialize 092C  
                             _T2CONbits 001F             __end_of_do_I2C_SEND_RESTART 08B3  
                        ??_mssp1_setIRQ 0070                    ??_i2c1_driver_TXData 0020  
                               _setMode 0E51                ??_PIN_MANAGER_Initialize 0020  
                   __end_of_I2C_ReStart 088D                     ?_setGestureLEDDrive 0070  
                               _printed 006A                         ?_mssp1_clearIRQ 0070  
              _do_I2C_SEND_RESTART_READ 08A7              __size_of_SYSTEM_Initialize 0018  
                               clrloop0 08E6                    __size_of_returnReset 0002  
                  end_of_initialization 0069                    ??_i2c1_driver_isNACK 0070  
                 ??_setAmbientLightGain 002A            __size_of_setProxIntLowThresh 0013  
                               init_ram 08EB            __end_of_i2c1_driver_sendNACK 08CF  
                               initloop 08EC         __size_ofi1_i2c1_driver_sendNACK 0004  
                            ?_I2C_Start 0070           enableGestureSensor@interrupts 0031  
          __end_of_i2c1_driver_resetBus 0868           setGestureExitThresh@threshold 002B  
                  ??_setGestureLEDDrive 002A                      readGesture@gstatus 0055  
                          initialize@id 0031                        ??_setGestureGain 002A  
                ??_setProxIntHighThresh 002A                        ??_setGestureMode 002A  
             _do_I2C_SEND_RESTART_WRITE 08AB                     Display_Name@string1 0025  
         __size_of_setGestureExitThresh 0013                                 strlen@a 0023  
                               strlen@s 0020                        ??_WDT_Initialize 0020  
                     _wireWriteDataByte 0A5F                              _returnStop 086A  
                             _PORTCbits 000E                __end_of_do_I2C_SEND_STOP 08B7  
                         ??_enablePower 0030                      ?_wireWriteDataByte 0026  
       setLightIntHighThreshold@val_low 002D          __size_of_setGestureEnterThresh 0013  
         __end_of_setGestureEnterThresh 09CA                           _decodeGesture 033D  
                    _isGestureAvailable 09A4                      _setGestureWaitTime 0B5F  
                             _SPI_Write 0A03                       __size_of_I2C_Stop 0003  
                           returnStop@p 0070                     ??_wireWriteDataByte 0029  
                      __CFG_FEXTOSC$OFF 0000                       _PWM_Output_Enable 08C3  
       processGestureData@ud_ratio_last 0035                     ?_isGestureAvailable 0070  
                   ?_setGestureWaitTime 0070                      ?_PWM_Output_Enable 0070  
                           _CCP1CONbits 0293                   SPI2_Exchange8bit@data 0020  
         __size_of_do_I2C_SEND_ADR_READ 0008                   setProximityGain@drive 002D  
              __size_of_PWM1_Initialize 000C                     ??_PWM_Output_Enable 0020  
      __end_of_i2c1_driver_isBufferFull 0914                             _do_I2C_IDLE 08D4  
                           _do_I2C_RCEN 08D9               __end_of_wireWriteDataByte 0A7A  
                        _I2C_Write_Byte 0A7A                    ??_isGestureAvailable 0029  
                        __end_of___wmul 0AB2                    ??_setGestureWaitTime 002A  
                         __pidataCOMMON 0869                             ?_initialize 0070  
                           _I2C_ReStart 088A                          _ADC_Initialize 0924  
                i1_i2c1_driver_sendNACK 08A3                  ?_OSCILLATOR_Initialize 0070  
              _setLightIntHighThreshold 0B86              __size_of_wireReadDataBlock 004A  
                       _gesture_motion_ 0168                         _SPI2_Initialize 0906  
          __size_of_do_I2C_DO_NACK_STOP 0004             __size_of_processGestureData 02D0  
                        ?_decodeGesture 0070                          __end_of_strlen 0A47  
               ?_do_I2C_DO_NACK_RESTART 0070                     start_initialization 002F  
                    setGestureGain@gain 002D                     _i2c_busCollisionISR 0881  
       __size_of_PIN_MANAGER_Initialize 0036               __end_of_PWM_Output_Enable 08C7  
              ?i1_i2c1_driver_getRXData 0070                              ?_SPI_Write 0070  
      setLightIntHighThreshold@val_high 002E                     _enableGestureSensor 0F9C  
                   __end_of_enablePower 0984            __size_of_i2c1_driver_sendACK 0004  
               ??_i2c1_driver_getRXData 0020                __end_of_setProximityGain 0C26  
          __size_of_i2c1_driver_restart 0003                processGestureData@d_last 0042  
          __size_of_i2c1_driver_startRX 0003                processGestureData@l_last 0043  
                           ??_I2C_Start 0020                processGestureData@r_last 0044  
              __size_of_PIN_MANAGER_IOC 0001                processGestureData@u_last 0041  
               _processGestureData$1342 0039                 _processGestureData$1343 003B  
               _processGestureData$1344 003D                 _processGestureData$1345 003F  
                  ?_i2c_busCollisionISR 0070                        __CFG_LPBOREN$OFF 0000  
                  __end_of_mssp1_setIRQ 087B                  __end_of_I2C_Write_Byte 0A96  
                      ??_PMD_Initialize 0020         setLightIntLowThreshold@val_high 002E  
                              ??___wmul 0024                    ?_enableGestureSensor 0070  
                           _CCPTMRSbits 029F                           ??_readGesture 0051  
                __end_of_ADC_Initialize 092C                           ?_do_I2C_RESET 0070  
                           __pdataBANK0 006B                             __pdataBANK2 0160  
                    setGestureMode@mode 002B                 _setLightIntLowThreshold 0BAD  
             setGestureIntEnable@enable 002C                setAmbientLightGain@drive 002B  
                           ?_returnStop 0070                                ??_strlen 0022  
        __end_of_do_I2C_DO_NACK_RESTART 08C3                           ??_setLEDBoost 002A  
                         ??_setLEDDrive 002A                    _i2c1_driver_sendNACK 08CB  
                setGestureIntEnable@val 002B                             __pbssCOMMON 0076  
                             ___latbits 0002                               _adcResult 0069  
                  _i2c1_driver_resetBus 0867                           __pcstackBANK0 0020  
                         __pcstackBANK1 00A0                           __pcstackBANK2 0120  
              __size_of_TMR2_Initialize 0008                               _do_I2C_RX 07B7  
                             _do_I2C_TX 0E02          __size_of_do_I2C_SEND_ADR_WRITE 0007  
         __size_ofi1_i2c1_driver_TXData 0005           __end_of_do_I2C_SEND_ADR_WRITE 08FF  
                              ?_Get_ADC 0070                   readGesture@fifo_data2 00A0  
             __size_of_i2c1_driver_open 000A                   readGesture@fifo_level 0058  
             __size_of_i2c1_driver_stop 0003                                ?_i2c_ISR 0070  
                   __size_of_initialize 0116                         _do_I2C_TX_EMPTY 0C7C  
                __size_of_handleGesture 005A                   ??_i2c_busCollisionISR 0070  
                 __end_of_fsmStateTable 1020                  _PIN_MANAGER_Initialize 0D43  
               ??i1_i2c1_driver_restart 0070                 ??i1_i2c1_driver_startRX 0070  
                       ?_I2C_Write_Byte 0070                   ??_enableGestureSensor 0030  
               __end_of_SPI2_Initialize 090D                          ??_do_I2C_RESET 0070  
                              ?___awdiv 0026              __size_of_wireWriteDataByte 001B  
              ??_do_I2C_DO_ADDRESS_NACK 0070                         ?_ADC_Initialize 0070  
           _i2c1_driver_busCollisionISR 00ED                     _setProxIntLowThresh 09F0  
                 __end_of_do_I2C_DO_ACK 08BB                       ??_PWM1_Initialize 0020  
          ??_INTERRUPT_InterruptManager 0076                _i2c1_driver_isBufferFull 090D  
                              ?_getMode 0070                         ??_decodeGesture 0020  
                     ?_wireReadDataByte 0070              ??_do_I2C_SEND_RESTART_READ 0070  
                 ?_i2c1_driver_sendNACK 0070         __end_ofi1_i2c1_driver_getRXData 0878  
                      ??_mssp1_clearIRQ 0070                             _enablePower 0976  
                    ??_wireReadDataByte 0026                     __end_of_readGesture 06D7  
                 ?_i2c1_driver_resetBus 0070      __size_of_do_I2C_SEND_RESTART_WRITE 0004  
                              _I2C_Stop 07FD                ??_resetGestureParameters 0020  
                              ?_setMode 002B              __size_of_PWM_Output_Enable 0004  
                            ?_do_I2C_RX 0070                              ?_do_I2C_TX 0070  
                      __CFG_WDTE$SWDTEN 0000                             ??_SPI_Write 0021  
                     _i2c1_driver_start 0896                  __size_of_Display_Clear 0011  
                   __end_of_setLEDBoost 0CDF                     __end_of_setLEDDrive 0BFD  
                  ?_setProxIntLowThresh 0070                   readGesture@bytes_read 0056  
                    ?_i2c1_driver_start 0070                          ___wmul@product 0024  
                              _LATCbits 010E                     __size_of_returnStop 0002  
                             clear_ram0 08E5                                _PIE0bits 0090  
                              _PIE1bits 0091            __size_of_setGestureIntEnable 002B  
            __end_of_PWM_Output_Disable 0887                     _gesture_near_count_ 005F  
                   ??_i2c1_driver_start 0020     __size_of_INTERRUPT_InterruptManager 0029  
                              _PIR0bits 0010                                _PIR1bits 0011  
                 __end_of_I2C_Read_Byte 096A               ??_setLightIntLowThreshold 002C  
                              _SSP1CON1 0215                                _SSP1CON2 0216  
                              _SSP2CON1 021D                          setLEDBoost@val 002C  
                              _SSP1STAT 0214                                _SSP2STAT 021C  
            __end_ofi1_i2c1_driver_stop 0872                       ??_PIN_MANAGER_IOC 0070  
                 __end_of_I2C_Send_NACK 0896                          setLEDDrive@val 002C  
      processGestureData@lr_ratio_first 0033                              _ADCON0bits 009D  
                     ___wmul@multiplier 0020                       ?_do_I2C_SEND_STOP 0070  
             processGestureData@d_first 0046                           _handleGesture 0F42  
             __end_of_i2c1_driver_start 0899                           ??_returnReset 0071  
                    ??_do_I2C_SEND_STOP 0070             __size_of_i2c1_driver_TXData 0006  
           __end_of_setAmbientLightGain 0AEE               processGestureData@l_first 0047  
     __end_of_do_I2C_SEND_RESTART_WRITE 08AF                 __end_of_do_I2C_TX_EMPTY 0CAD  
          __end_of_setGestureExitThresh 09DD               processGestureData@r_first 0048  
             processGestureData@u_first 0045                   ??_setProxIntLowThresh 002A  
          __size_of_do_I2C_SEND_RESTART 0004             __size_of_i2c1_driver_isNACK 0008  
                     setGestureGain@val 002C                   __size_of_mssp1_setIRQ 0003  
                     ??_TMR2_Initialize 0020                        __size_of_Get_ADC 00E0  
                   _do_I2C_DO_NACK_STOP 08BB                        __size_of_i2c_ISR 0026  
            ??_setLightIntHighThreshold 002C                       _ADC_GetConversion 0AB2  
           __size_of_setGestureLEDDrive 0032                          setMode@reg_val 002E  
        setLightIntLowThreshold@val_low 002D                            ?_do_I2C_IDLE 0070  
                         _Display_Clear 0993                            ?_do_I2C_RCEN 0070  
                     setGestureMode@val 002C                        ?_SPI2_Initialize 0070  
               ?i1_i2c1_driver_sendNACK 0070                 ??_OSCILLATOR_Initialize 0020  
                    ?_ADC_GetConversion 0020                     _i2c1_driver_sendACK 089F  
                      __size_of___awdiv 0052           __size_of_setProxIntHighThresh 0013  
                           _readGesture 05E4         __size_of_do_I2C_DO_ADDRESS_NACK 002B  
                   i2c1_driver_TXData@d 0020                  ??_i2c1_driver_sendNACK 0020  
                          ??_initialize 0030                            ?_I2C_ReStart 0070  
                   _i2c1_driver_restart 0887        setLightIntLowThreshold@threshold 002A  
                  ?_do_I2C_DO_NACK_STOP 0070                     _i2c1_driver_startRX 0890  
                        ?_handleGesture 0070            __end_of_do_I2C_SEND_ADR_READ 0924  
                      __size_of_getMode 0009                  ??_i2c1_driver_resetBus 0070  
                  readGesture@fifo_data 0120                             _setLEDBoost 0CAD  
                   ??_ADC_GetConversion 0022                             _setLEDDrive 0BD4  
       __size_of_resetGestureParameters 0017                            _mssp1_setIRQ 0878  
       __end_of_setLightIntLowThreshold 0BD4                             ??_do_I2C_RX 0070  
                           ??_do_I2C_TX 0070                   setGestureLEDDrive@val 002C  
                      __size_of_setMode 004F                                __ptext10 0CDF  
                              __ptext11 09CA                                __ptext20 0EF0  
                              __ptext12 09B7                                __ptext21 09A4  
                              __ptext13 0AD0                                __ptext30 0A5F  
                              __ptext22 033D                                __ptext14 0955  
                              __ptext31 094C                                __ptext23 0F9C  
                              __ptext15 0F42                                __ptext40 08CB  
                              __ptext32 0AEE                                __ptext24 0CAD  
                              __ptext16 05E4                                __ptext41 095F  
                              __ptext33 0A7A                                __ptext25 0B38  
                              __ptext17 0DB8                                __ptext50 0906  
                              __ptext42 0890                                __ptext34 08DF  
                              __ptext26 0C51                                __ptext18 006D  
                              __ptext51 096A                                __ptext43 090D  
                              __ptext35 07FD                                __ptext27 0A18  
                              __ptext19 0A96                                __ptext60 08C3  
                              __ptext52 0934                                __ptext44 088D  
                              __ptext36 089C                                __ptext28 0976  
                              __ptext61 0884                                __ptext53 0D43  
                              __ptext45 088A                                __ptext37 0899  
                              __ptext29 0E51                                __ptext70 087B  
                              __ptext62 0AB2                                __ptext54 092C  
                              __ptext46 0887                                __ptext38 0896  
                              __ptext71 07B7                                __ptext63 0993  
                              __ptext55 0924                                __ptext47 0A47  
                              __ptext39 0893                                __ptext80 08B3  
                              __ptext72 0E02                                __ptext64 0A03  
                              __ptext56 08FF                                __ptext48 08C7  
                              __ptext81 08AF                                __ptext73 0C26  
                              __ptext65 0984                                __ptext57 06D7  
                              __ptext49 093C                                __ptext90 0875  
                              __ptext82 08AB                                __ptext74 08BF  
                              __ptext58 0EA0                                __ptext91 08A3  
                              __ptext83 08A7                                __ptext75 08BB  
                              __ptext67 0881                                __ptext59 0A2F  
                              __ptext92 0867                                __ptext84 08D4  
                              __ptext76 08B7                                __ptext68 087E  
                              __ptext93 0872                                __ptext85 08F1  
                              __ptext77 08D9                                __ptext69 0B12  
                              __ptext94 0002                                __ptext86 0C7C  
                              __ptext78 08F8                                __ptext95 086A  
                              __ptext87 0878                                __ptext79 091C  
                              __ptext96 086F                                __ptext88 0914  
                              __ptext97 086C                                __ptext89 08CF  
                              __ptext98 089F                                __ptext99 0866  
                 _setGestureEnterThresh 09B7                            _SSP1CON1bits 0215  
                          _SSP1CON2bits 0216          setGestureEnterThresh@threshold 002B  
                          _SSP2CON1bits 021D                    ?_i2c1_driver_sendACK 0070  
                  __end_of_do_I2C_RESET 08F8                    ?_i2c1_driver_restart 0070  
                   __end_of_returnReset 0004                        _i2c1_driver_open 0955  
                      _i2c1_driver_stop 089C                           __size_of_main 003F  
                  ?_i2c1_driver_startRX 0070                       ?_setProximityGain 0070  
        __size_of_i2c1_driver_getRXData 0003           __end_of_i2c1_driver_getRXData 0890  
                    __end_of_initialize 05E4               __end_of_ADC_GetConversion 0AD0  
                    ??_setProximityGain 002A        __size_ofi1_i2c1_driver_getRXData 0003  
                    _decodeGesture$1350 0028                      _decodeGesture$1351 002A  
                    _decodeGesture$1352 002C                      _decodeGesture$1353 002E  
                    _decodeGesture$1354 0030                      _decodeGesture$1347 0022  
                    _decodeGesture$1348 0024                      _decodeGesture$1349 0026  
                        ?_Display_Clear 0070          __end_ofi1_i2c1_driver_sendNACK 08A7  
                              int$flags 007E      __end_of_INTERRUPT_InterruptManager 002D  
            _INTERRUPT_InterruptManager 0004                            _SSP1STATbits 0214  
           __size_of_isGestureAvailable 0013                           Display_Name@i 002A  
                   setProximityGain@val 002C        __end_of_do_I2C_SEND_RESTART_READ 08AB  
           __size_of_setGestureWaitTime 0027              __end_of_processGestureData 033D  
                          ??_returnStop 0071                            _SSP2STATbits 021C  
                 ??_do_I2C_DO_NACK_STOP 0070                              Get_ADC@val 002F  
               __size_of_setGestureGain 0032                              _INTCONbits 000B  
               __size_of_setGestureMode 0027              __size_of_i2c1_driver_start 0003  
                setAmbientLightGain@val 002C                   ??_i2c1_driver_sendACK 0070  
                      ?_do_I2C_TX_EMPTY 0070                 __size_of_WDT_Initialize 0004  
                _do_I2C_DO_ADDRESS_NACK 0C26                                intlevel1 0000  
                 ??_i2c1_driver_restart 0020                   ??_i2c1_driver_startRX 0020  
               ?_PIN_MANAGER_Initialize 0070                        ??_I2C_Write_Byte 0021  
                     __CFG_CLKOUTEN$OFF 0000                      __end_of_returnStop 086C  
                       _PWM1_Initialize 096A                        ??_ADC_Initialize 0020  
                _resetGestureParameters 0A18              ??_i2c1_driver_isBufferFull 0020  
                         ?_Display_Name 0025          __size_ofi1_i2c1_driver_restart 0003  
         __end_ofi1_i2c1_driver_restart 086F          __size_ofi1_i2c1_driver_startRX 0003  
          __end_ofi1_i2c1_driver_TXData 08D4           __end_ofi1_i2c1_driver_startRX 0875  
                  _setGestureExitThresh 09CA                         ??_handleGesture 005B  
                         __pstringtext1 1000                           __pstringtext2 1030  
                         __pstringtext3 103D                           __pstringtext4 1049  
                         __pstringtext5 0000                         main@startSystem 00E4  
                            _SSP1DATPPS 0E21                            ?_enablePower 0070  
                            _SSP2DATPPS 0E1E                              _SSP1CLKPPS 0E20  
                   _setGestureIntEnable 0C51                              _SSP2CLKPPS 0E1D  
                      setLEDBoost@boost 002D                  ?_setGestureEnterThresh 0070  
                           _returnReset 0002                              _PIR_Sensor 08FF  
        __end_of_PIN_MANAGER_Initialize 0D79             __end_of_i2c_busCollisionISR 0884  
             __size_of_wireReadDataByte 0024                        setLEDDrive@drive 002D  
                   processGestureData@i 004D                         _PIN_MANAGER_IOC 0866  
           __end_of_enableGestureSensor 1000                   _do_I2C_SEND_ADR_WRITE 08F8  
                  ?_setGestureIntEnable 0070              __size_of_ADC_GetConversion 001E  
                  _do_I2C_SEND_ADR_READ 091C                         ??_Display_Clear 0023  
      __end_of_setLightIntHighThreshold 0BAD                          ??_Display_Name 0027  
