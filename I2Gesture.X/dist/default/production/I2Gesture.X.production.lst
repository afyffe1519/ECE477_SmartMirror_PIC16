

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Wed Apr 10 09:34:32 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F18345
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1
     9                           	psect	stringtext2,global,class=STRCODE,delta=2
    10                           	psect	stringtext3,global,class=STRCODE,delta=2
    11                           	psect	stringtext4,global,class=STRCODE,delta=2
    12                           	psect	stringtext5,global,class=STRCODE,delta=2
    13                           	psect	stringtext6,global,class=STRCODE,delta=2
    14                           	psect	stringtext7,global,class=STRCODE,delta=2
    15                           	psect	cinit,global,class=CODE,merge=1,delta=2
    16                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    17                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    20                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    21                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    22                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    23                           	psect	inittext,global,class=CODE,delta=2
    24                           	psect	clrtext,global,class=CODE,delta=2
    25                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    26                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    27                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    28                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    29                           	psect	text1,local,class=CODE,merge=1,delta=2
    30                           	psect	text2,local,class=CODE,merge=1,delta=2
    31                           	psect	text3,local,class=CODE,merge=1,delta=2
    32                           	psect	text4,local,class=CODE,merge=1,delta=2
    33                           	psect	text5,local,class=CODE,merge=1,delta=2
    34                           	psect	text6,local,class=CODE,merge=1,delta=2
    35                           	psect	text7,local,class=CODE,merge=1,delta=2
    36                           	psect	text8,local,class=CODE,merge=1,delta=2
    37                           	psect	text9,local,class=CODE,merge=1,delta=2
    38                           	psect	text10,local,class=CODE,merge=1,delta=2
    39                           	psect	text11,local,class=CODE,merge=1,delta=2
    40                           	psect	text12,local,class=CODE,merge=1,delta=2
    41                           	psect	text13,local,class=CODE,merge=1,delta=2
    42                           	psect	text14,local,class=CODE,merge=1,delta=2
    43                           	psect	text15,local,class=CODE,merge=1,delta=2
    44                           	psect	text16,local,class=CODE,merge=1,delta=2
    45                           	psect	text17,local,class=CODE,merge=1,delta=2
    46                           	psect	text18,local,class=CODE,merge=1,delta=2
    47                           	psect	text19,local,class=CODE,merge=1,delta=2
    48                           	psect	text20,local,class=CODE,merge=1,delta=2
    49                           	psect	text21,local,class=CODE,merge=1,delta=2
    50                           	psect	text22,local,class=CODE,merge=1,delta=2
    51                           	psect	text23,local,class=CODE,merge=1,delta=2
    52                           	psect	text24,local,class=CODE,merge=1,delta=2
    53                           	psect	text25,local,class=CODE,merge=1,delta=2
    54                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    55                           	psect	text27,local,class=CODE,merge=1,delta=2
    56                           	psect	text28,local,class=CODE,merge=1,inline,delta=2
    57                           	psect	text29,local,class=CODE,merge=1,delta=2
    58                           	psect	text30,local,class=CODE,merge=1,inline,delta=2
    59                           	psect	text31,local,class=CODE,merge=1,delta=2
    60                           	psect	text32,local,class=CODE,merge=1,inline,delta=2
    61                           	psect	text33,local,class=CODE,merge=1,delta=2
    62                           	psect	text34,local,class=CODE,merge=1,inline,delta=2
    63                           	psect	text35,local,class=CODE,merge=1,inline,delta=2
    64                           	psect	text36,local,class=CODE,merge=1,inline,delta=2
    65                           	psect	text37,local,class=CODE,merge=1,delta=2
    66                           	psect	text38,local,class=CODE,merge=1,inline,delta=2
    67                           	psect	text39,local,class=CODE,merge=1,delta=2
    68                           	psect	text40,local,class=CODE,merge=1,delta=2,group=2
    69                           	psect	text41,local,class=CODE,merge=1,delta=2,group=2
    70                           	psect	text42,local,class=CODE,merge=1,delta=2
    71                           	psect	text43,local,class=CODE,merge=1,delta=2
    72                           	psect	text44,local,class=CODE,merge=1,delta=2
    73                           	psect	text45,local,class=CODE,merge=1,delta=2
    74                           	psect	text46,local,class=CODE,merge=1,delta=2
    75                           	psect	text47,local,class=CODE,merge=1,delta=2
    76                           	psect	text48,local,class=CODE,merge=1,delta=2
    77                           	psect	text49,local,class=CODE,merge=1,delta=2
    78                           	psect	text50,local,class=CODE,merge=1,delta=2
    79                           	psect	text51,local,class=CODE,merge=1,delta=2
    80                           	psect	text52,local,class=CODE,merge=1,delta=2
    81                           	psect	text53,local,class=CODE,merge=1,delta=2
    82                           	psect	text54,local,class=CODE,merge=1,delta=2
    83                           	psect	text55,local,class=CODE,merge=1,delta=2
    84                           	psect	text56,local,class=CODE,merge=1,delta=2
    85                           	psect	text57,local,class=CODE,merge=1,delta=2
    86                           	psect	text58,local,class=CODE,merge=1,delta=2
    87                           	psect	text59,local,class=CODE,merge=1,delta=2
    88                           	psect	text60,local,class=CODE,merge=1,delta=2,group=2
    89                           	psect	text61,local,class=CODE,merge=1,delta=2
    90                           	psect	text62,local,class=CODE,merge=1,delta=2
    91                           	psect	text63,local,class=CODE,merge=1,delta=2
    92                           	psect	text64,local,class=CODE,merge=1,delta=2
    93                           	psect	text65,local,class=CODE,merge=1,delta=2,group=2
    94                           	psect	text66,local,class=CODE,merge=1,delta=2,group=2
    95                           	psect	text67,local,class=CODE,merge=1,delta=2
    96                           	psect	text68,local,class=CODE,merge=1,delta=2
    97                           	psect	text69,local,class=CODE,merge=1,delta=2,group=2
    98                           	psect	text70,local,class=CODE,merge=1,delta=2,group=1
    99                           	psect	text71,local,class=CODE,merge=1,delta=2,group=1
   100                           	psect	text72,local,class=CODE,merge=1,delta=2
   101                           	psect	text73,local,class=CODE,merge=1,delta=2,group=2
   102                           	psect	text74,local,class=CODE,merge=1,delta=2
   103                           	psect	text75,local,class=CODE,merge=1,delta=2
   104                           	psect	text76,local,class=CODE,merge=1,delta=2
   105                           	psect	text77,local,class=CODE,merge=1,delta=2
   106                           	psect	intentry,global,class=CODE,delta=2
   107                           	psect	text79,local,class=CODE,merge=1,delta=2
   108                           	psect	text80,local,class=CODE,merge=1,inline,delta=2
   109                           	psect	text81,local,class=CODE,merge=1,delta=2
   110                           	psect	text82,local,class=CODE,merge=1,inline,delta=2
   111                           	psect	text83,local,class=CODE,merge=1,delta=2
   112                           	psect	text84,local,class=CODE,merge=1,delta=2
   113                           	psect	text85,local,class=CODE,merge=1,delta=2
   114                           	psect	text86,local,class=CODE,merge=1,delta=2
   115                           	psect	text87,local,class=CODE,merge=1,delta=2
   116                           	psect	text88,local,class=CODE,merge=1,delta=2
   117                           	psect	text89,local,class=CODE,merge=1,delta=2
   118                           	psect	text90,local,class=CODE,merge=1,delta=2
   119                           	psect	text91,local,class=CODE,merge=1,delta=2
   120                           	psect	text92,local,class=CODE,merge=1,delta=2
   121                           	psect	text93,local,class=CODE,merge=1,delta=2
   122                           	psect	text94,local,class=CODE,merge=1,delta=2
   123                           	psect	text95,local,class=CODE,merge=1,delta=2
   124                           	psect	text96,local,class=CODE,merge=1,delta=2
   125                           	psect	text97,local,class=CODE,merge=1,delta=2
   126                           	psect	text98,local,class=CODE,merge=1,delta=2
   127                           	psect	text99,local,class=CODE,merge=1,inline,delta=2
   128                           	psect	text100,local,class=CODE,merge=1,inline,delta=2
   129                           	psect	text101,local,class=CODE,merge=1,inline,delta=2
   130                           	psect	text102,local,class=CODE,merge=1,inline,delta=2
   131                           	psect	text103,local,class=CODE,merge=1,inline,delta=2
   132                           	psect	text104,local,class=CODE,merge=1,inline,delta=2
   133                           	psect	text105,local,class=CODE,merge=1,inline,delta=2
   134                           	psect	text106,local,class=CODE,merge=1,delta=2
   135                           	psect	text107,local,class=CODE,merge=1,delta=2
   136                           	psect	text108,local,class=CODE,merge=1,inline,delta=2
   137                           	psect	text109,local,class=CODE,merge=1,inline,delta=2
   138                           	psect	text110,local,class=CODE,merge=1,inline,delta=2
   139                           	psect	text111,local,class=CODE,merge=1,delta=2
   140                           	psect	text112,local,class=CODE,merge=1,delta=2
   141                           	psect	text113,local,class=CODE,merge=1,delta=2
   142                           	psect	text114,local,class=CODE,merge=1,delta=2
   143                           	psect	text115,local,class=CODE,merge=1,delta=2
   144                           	psect	text116,local,class=CODE,merge=1,delta=2
   145                           	psect	text117,local,class=CODE,merge=1,delta=2
   146                           	dabs	1,0x7E,2
   147  0000                     
   148                           ; Version 2.05
   149                           ; Generated 20/12/2018 GMT
   150                           ; 
   151                           ; Copyright © 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
   152                           ; All rights reserved.
   153                           ; 
   154                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   155                           ; 
   156                           ; Redistribution and use in source and binary forms, with or without modification, are
   157                           ; permitted provided that the following conditions are met:
   158                           ; 
   159                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   160                           ;        conditions and the following disclaimer.
   161                           ; 
   162                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   163                           ;        of conditions and the following disclaimer in the documentation and/or other
   164                           ;        materials provided with the distribution.
   165                           ; 
   166                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   167                           ;        software without specific prior written permission.
   168                           ; 
   169                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   170                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   171                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   172                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   173                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   174                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   175                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   176                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   177                           ; 
   178                           ; 
   179                           ; Code-generator required, PIC16F18345 Definitions
   180                           ; 
   181                           ; SFR Addresses
   182  0000                     	;# 
   183  0001                     	;# 
   184  0002                     	;# 
   185  0003                     	;# 
   186  0004                     	;# 
   187  0005                     	;# 
   188  0006                     	;# 
   189  0007                     	;# 
   190  0008                     	;# 
   191  0009                     	;# 
   192  000A                     	;# 
   193  000B                     	;# 
   194  000C                     	;# 
   195  000D                     	;# 
   196  000E                     	;# 
   197  0010                     	;# 
   198  0011                     	;# 
   199  0012                     	;# 
   200  0013                     	;# 
   201  0014                     	;# 
   202  0015                     	;# 
   203  0015                     	;# 
   204  0016                     	;# 
   205  0016                     	;# 
   206  0017                     	;# 
   207  0018                     	;# 
   208  0019                     	;# 
   209  0019                     	;# 
   210  001A                     	;# 
   211  001B                     	;# 
   212  001C                     	;# 
   213  001D                     	;# 
   214  001E                     	;# 
   215  001F                     	;# 
   216  008C                     	;# 
   217  008D                     	;# 
   218  008E                     	;# 
   219  0090                     	;# 
   220  0091                     	;# 
   221  0092                     	;# 
   222  0093                     	;# 
   223  0094                     	;# 
   224  0097                     	;# 
   225  009B                     	;# 
   226  009B                     	;# 
   227  009C                     	;# 
   228  009D                     	;# 
   229  009E                     	;# 
   230  009F                     	;# 
   231  010C                     	;# 
   232  010D                     	;# 
   233  010E                     	;# 
   234  0111                     	;# 
   235  0112                     	;# 
   236  0113                     	;# 
   237  0114                     	;# 
   238  0115                     	;# 
   239  0116                     	;# 
   240  0117                     	;# 
   241  0118                     	;# 
   242  0119                     	;# 
   243  018C                     	;# 
   244  018D                     	;# 
   245  018E                     	;# 
   246  0197                     	;# 
   247  0199                     	;# 
   248  0199                     	;# 
   249  0199                     	;# 
   250  019A                     	;# 
   251  019A                     	;# 
   252  019A                     	;# 
   253  019B                     	;# 
   254  019B                     	;# 
   255  019B                     	;# 
   256  019B                     	;# 
   257  019B                     	;# 
   258  019C                     	;# 
   259  019C                     	;# 
   260  019C                     	;# 
   261  019D                     	;# 
   262  019D                     	;# 
   263  019D                     	;# 
   264  019E                     	;# 
   265  019E                     	;# 
   266  019E                     	;# 
   267  019F                     	;# 
   268  019F                     	;# 
   269  019F                     	;# 
   270  019F                     	;# 
   271  019F                     	;# 
   272  020C                     	;# 
   273  020D                     	;# 
   274  020E                     	;# 
   275  0211                     	;# 
   276  0211                     	;# 
   277  0212                     	;# 
   278  0212                     	;# 
   279  0213                     	;# 
   280  0213                     	;# 
   281  0214                     	;# 
   282  0214                     	;# 
   283  0215                     	;# 
   284  0215                     	;# 
   285  0215                     	;# 
   286  0215                     	;# 
   287  0216                     	;# 
   288  0216                     	;# 
   289  0217                     	;# 
   290  0217                     	;# 
   291  0219                     	;# 
   292  021A                     	;# 
   293  021B                     	;# 
   294  021C                     	;# 
   295  021D                     	;# 
   296  021D                     	;# 
   297  021E                     	;# 
   298  021F                     	;# 
   299  028C                     	;# 
   300  028D                     	;# 
   301  028E                     	;# 
   302  0291                     	;# 
   303  0291                     	;# 
   304  0292                     	;# 
   305  0293                     	;# 
   306  0294                     	;# 
   307  0295                     	;# 
   308  0295                     	;# 
   309  0296                     	;# 
   310  0297                     	;# 
   311  0298                     	;# 
   312  029F                     	;# 
   313  030C                     	;# 
   314  030D                     	;# 
   315  030E                     	;# 
   316  0311                     	;# 
   317  0311                     	;# 
   318  0312                     	;# 
   319  0313                     	;# 
   320  0314                     	;# 
   321  0315                     	;# 
   322  0315                     	;# 
   323  0316                     	;# 
   324  0317                     	;# 
   325  0318                     	;# 
   326  038C                     	;# 
   327  038D                     	;# 
   328  038E                     	;# 
   329  0391                     	;# 
   330  0392                     	;# 
   331  0393                     	;# 
   332  0394                     	;# 
   333  0395                     	;# 
   334  0396                     	;# 
   335  0397                     	;# 
   336  0398                     	;# 
   337  0399                     	;# 
   338  039A                     	;# 
   339  039C                     	;# 
   340  039D                     	;# 
   341  039E                     	;# 
   342  039F                     	;# 
   343  0411                     	;# 
   344  0411                     	;# 
   345  0412                     	;# 
   346  0413                     	;# 
   347  0414                     	;# 
   348  0415                     	;# 
   349  0416                     	;# 
   350  0417                     	;# 
   351  0418                     	;# 
   352  0418                     	;# 
   353  0419                     	;# 
   354  041A                     	;# 
   355  041B                     	;# 
   356  041C                     	;# 
   357  041D                     	;# 
   358  041E                     	;# 
   359  041F                     	;# 
   360  0498                     	;# 
   361  0498                     	;# 
   362  0499                     	;# 
   363  049A                     	;# 
   364  049B                     	;# 
   365  049B                     	;# 
   366  049C                     	;# 
   367  049D                     	;# 
   368  049E                     	;# 
   369  049F                     	;# 
   370  0617                     	;# 
   371  0618                     	;# 
   372  0619                     	;# 
   373  0619                     	;# 
   374  061A                     	;# 
   375  061B                     	;# 
   376  061C                     	;# 
   377  061C                     	;# 
   378  061F                     	;# 
   379  0691                     	;# 
   380  0692                     	;# 
   381  0693                     	;# 
   382  0694                     	;# 
   383  0695                     	;# 
   384  0696                     	;# 
   385  0697                     	;# 
   386  0698                     	;# 
   387  0699                     	;# 
   388  0711                     	;# 
   389  0712                     	;# 
   390  0713                     	;# 
   391  0714                     	;# 
   392  0715                     	;# 
   393  0716                     	;# 
   394  0717                     	;# 
   395  0718                     	;# 
   396  0719                     	;# 
   397  0891                     	;# 
   398  0891                     	;# 
   399  0891                     	;# 
   400  0891                     	;# 
   401  0891                     	;# 
   402  0891                     	;# 
   403  0892                     	;# 
   404  0892                     	;# 
   405  0892                     	;# 
   406  0893                     	;# 
   407  0893                     	;# 
   408  0893                     	;# 
   409  0893                     	;# 
   410  0893                     	;# 
   411  0893                     	;# 
   412  0894                     	;# 
   413  0894                     	;# 
   414  0894                     	;# 
   415  0895                     	;# 
   416  0895                     	;# 
   417  0895                     	;# 
   418  0896                     	;# 
   419  0896                     	;# 
   420  0896                     	;# 
   421  089B                     	;# 
   422  0911                     	;# 
   423  0912                     	;# 
   424  0913                     	;# 
   425  0914                     	;# 
   426  0915                     	;# 
   427  0916                     	;# 
   428  0918                     	;# 
   429  0919                     	;# 
   430  091A                     	;# 
   431  091B                     	;# 
   432  091C                     	;# 
   433  091D                     	;# 
   434  091E                     	;# 
   435  091F                     	;# 
   436  0E0F                     	;# 
   437  0E10                     	;# 
   438  0E11                     	;# 
   439  0E12                     	;# 
   440  0E13                     	;# 
   441  0E14                     	;# 
   442  0E15                     	;# 
   443  0E16                     	;# 
   444  0E17                     	;# 
   445  0E18                     	;# 
   446  0E19                     	;# 
   447  0E1A                     	;# 
   448  0E1B                     	;# 
   449  0E1C                     	;# 
   450  0E1D                     	;# 
   451  0E1E                     	;# 
   452  0E1F                     	;# 
   453  0E20                     	;# 
   454  0E21                     	;# 
   455  0E22                     	;# 
   456  0E24                     	;# 
   457  0E25                     	;# 
   458  0E28                     	;# 
   459  0E29                     	;# 
   460  0E2A                     	;# 
   461  0E2B                     	;# 
   462  0E2C                     	;# 
   463  0E2D                     	;# 
   464  0E2E                     	;# 
   465  0E2F                     	;# 
   466  0E90                     	;# 
   467  0E91                     	;# 
   468  0E92                     	;# 
   469  0E94                     	;# 
   470  0E95                     	;# 
   471  0E9C                     	;# 
   472  0E9D                     	;# 
   473  0E9E                     	;# 
   474  0E9F                     	;# 
   475  0EA0                     	;# 
   476  0EA1                     	;# 
   477  0EA2                     	;# 
   478  0EA3                     	;# 
   479  0EA4                     	;# 
   480  0EA5                     	;# 
   481  0EA6                     	;# 
   482  0EA7                     	;# 
   483  0F0F                     	;# 
   484  0F10                     	;# 
   485  0F11                     	;# 
   486  0F12                     	;# 
   487  0F13                     	;# 
   488  0F14                     	;# 
   489  0F15                     	;# 
   490  0F16                     	;# 
   491  0F17                     	;# 
   492  0F18                     	;# 
   493  0F19                     	;# 
   494  0F1A                     	;# 
   495  0F1B                     	;# 
   496  0F1C                     	;# 
   497  0F1D                     	;# 
   498  0F1E                     	;# 
   499  0F1F                     	;# 
   500  0F20                     	;# 
   501  0F21                     	;# 
   502  0F22                     	;# 
   503  0F23                     	;# 
   504  0F24                     	;# 
   505  0F25                     	;# 
   506  0F26                     	;# 
   507  0F27                     	;# 
   508  0F28                     	;# 
   509  0F29                     	;# 
   510  0F2A                     	;# 
   511  0F2B                     	;# 
   512  0F2C                     	;# 
   513  0F2D                     	;# 
   514  0F2E                     	;# 
   515  0F2F                     	;# 
   516  0F30                     	;# 
   517  0F31                     	;# 
   518  0F32                     	;# 
   519  0F33                     	;# 
   520  0F34                     	;# 
   521  0F35                     	;# 
   522  0F36                     	;# 
   523  0F37                     	;# 
   524  0FE4                     	;# 
   525  0FE5                     	;# 
   526  0FE6                     	;# 
   527  0FE7                     	;# 
   528  0FE8                     	;# 
   529  0FE9                     	;# 
   530  0FEA                     	;# 
   531  0FEB                     	;# 
   532  0FED                     	;# 
   533  0FEE                     	;# 
   534  0FEF                     	;# 
   535  0000                     	;# 
   536  0001                     	;# 
   537  0002                     	;# 
   538  0003                     	;# 
   539  0004                     	;# 
   540  0005                     	;# 
   541  0006                     	;# 
   542  0007                     	;# 
   543  0008                     	;# 
   544  0009                     	;# 
   545  000A                     	;# 
   546  000B                     	;# 
   547  000C                     	;# 
   548  000D                     	;# 
   549  000E                     	;# 
   550  0010                     	;# 
   551  0011                     	;# 
   552  0012                     	;# 
   553  0013                     	;# 
   554  0014                     	;# 
   555  0015                     	;# 
   556  0015                     	;# 
   557  0016                     	;# 
   558  0016                     	;# 
   559  0017                     	;# 
   560  0018                     	;# 
   561  0019                     	;# 
   562  0019                     	;# 
   563  001A                     	;# 
   564  001B                     	;# 
   565  001C                     	;# 
   566  001D                     	;# 
   567  001E                     	;# 
   568  001F                     	;# 
   569  008C                     	;# 
   570  008D                     	;# 
   571  008E                     	;# 
   572  0090                     	;# 
   573  0091                     	;# 
   574  0092                     	;# 
   575  0093                     	;# 
   576  0094                     	;# 
   577  0097                     	;# 
   578  009B                     	;# 
   579  009B                     	;# 
   580  009C                     	;# 
   581  009D                     	;# 
   582  009E                     	;# 
   583  009F                     	;# 
   584  010C                     	;# 
   585  010D                     	;# 
   586  010E                     	;# 
   587  0111                     	;# 
   588  0112                     	;# 
   589  0113                     	;# 
   590  0114                     	;# 
   591  0115                     	;# 
   592  0116                     	;# 
   593  0117                     	;# 
   594  0118                     	;# 
   595  0119                     	;# 
   596  018C                     	;# 
   597  018D                     	;# 
   598  018E                     	;# 
   599  0197                     	;# 
   600  0199                     	;# 
   601  0199                     	;# 
   602  0199                     	;# 
   603  019A                     	;# 
   604  019A                     	;# 
   605  019A                     	;# 
   606  019B                     	;# 
   607  019B                     	;# 
   608  019B                     	;# 
   609  019B                     	;# 
   610  019B                     	;# 
   611  019C                     	;# 
   612  019C                     	;# 
   613  019C                     	;# 
   614  019D                     	;# 
   615  019D                     	;# 
   616  019D                     	;# 
   617  019E                     	;# 
   618  019E                     	;# 
   619  019E                     	;# 
   620  019F                     	;# 
   621  019F                     	;# 
   622  019F                     	;# 
   623  019F                     	;# 
   624  019F                     	;# 
   625  020C                     	;# 
   626  020D                     	;# 
   627  020E                     	;# 
   628  0211                     	;# 
   629  0211                     	;# 
   630  0212                     	;# 
   631  0212                     	;# 
   632  0213                     	;# 
   633  0213                     	;# 
   634  0214                     	;# 
   635  0214                     	;# 
   636  0215                     	;# 
   637  0215                     	;# 
   638  0215                     	;# 
   639  0215                     	;# 
   640  0216                     	;# 
   641  0216                     	;# 
   642  0217                     	;# 
   643  0217                     	;# 
   644  0219                     	;# 
   645  021A                     	;# 
   646  021B                     	;# 
   647  021C                     	;# 
   648  021D                     	;# 
   649  021D                     	;# 
   650  021E                     	;# 
   651  021F                     	;# 
   652  028C                     	;# 
   653  028D                     	;# 
   654  028E                     	;# 
   655  0291                     	;# 
   656  0291                     	;# 
   657  0292                     	;# 
   658  0293                     	;# 
   659  0294                     	;# 
   660  0295                     	;# 
   661  0295                     	;# 
   662  0296                     	;# 
   663  0297                     	;# 
   664  0298                     	;# 
   665  029F                     	;# 
   666  030C                     	;# 
   667  030D                     	;# 
   668  030E                     	;# 
   669  0311                     	;# 
   670  0311                     	;# 
   671  0312                     	;# 
   672  0313                     	;# 
   673  0314                     	;# 
   674  0315                     	;# 
   675  0315                     	;# 
   676  0316                     	;# 
   677  0317                     	;# 
   678  0318                     	;# 
   679  038C                     	;# 
   680  038D                     	;# 
   681  038E                     	;# 
   682  0391                     	;# 
   683  0392                     	;# 
   684  0393                     	;# 
   685  0394                     	;# 
   686  0395                     	;# 
   687  0396                     	;# 
   688  0397                     	;# 
   689  0398                     	;# 
   690  0399                     	;# 
   691  039A                     	;# 
   692  039C                     	;# 
   693  039D                     	;# 
   694  039E                     	;# 
   695  039F                     	;# 
   696  0411                     	;# 
   697  0411                     	;# 
   698  0412                     	;# 
   699  0413                     	;# 
   700  0414                     	;# 
   701  0415                     	;# 
   702  0416                     	;# 
   703  0417                     	;# 
   704  0418                     	;# 
   705  0418                     	;# 
   706  0419                     	;# 
   707  041A                     	;# 
   708  041B                     	;# 
   709  041C                     	;# 
   710  041D                     	;# 
   711  041E                     	;# 
   712  041F                     	;# 
   713  0498                     	;# 
   714  0498                     	;# 
   715  0499                     	;# 
   716  049A                     	;# 
   717  049B                     	;# 
   718  049B                     	;# 
   719  049C                     	;# 
   720  049D                     	;# 
   721  049E                     	;# 
   722  049F                     	;# 
   723  0617                     	;# 
   724  0618                     	;# 
   725  0619                     	;# 
   726  0619                     	;# 
   727  061A                     	;# 
   728  061B                     	;# 
   729  061C                     	;# 
   730  061C                     	;# 
   731  061F                     	;# 
   732  0691                     	;# 
   733  0692                     	;# 
   734  0693                     	;# 
   735  0694                     	;# 
   736  0695                     	;# 
   737  0696                     	;# 
   738  0697                     	;# 
   739  0698                     	;# 
   740  0699                     	;# 
   741  0711                     	;# 
   742  0712                     	;# 
   743  0713                     	;# 
   744  0714                     	;# 
   745  0715                     	;# 
   746  0716                     	;# 
   747  0717                     	;# 
   748  0718                     	;# 
   749  0719                     	;# 
   750  0891                     	;# 
   751  0891                     	;# 
   752  0891                     	;# 
   753  0891                     	;# 
   754  0891                     	;# 
   755  0891                     	;# 
   756  0892                     	;# 
   757  0892                     	;# 
   758  0892                     	;# 
   759  0893                     	;# 
   760  0893                     	;# 
   761  0893                     	;# 
   762  0893                     	;# 
   763  0893                     	;# 
   764  0893                     	;# 
   765  0894                     	;# 
   766  0894                     	;# 
   767  0894                     	;# 
   768  0895                     	;# 
   769  0895                     	;# 
   770  0895                     	;# 
   771  0896                     	;# 
   772  0896                     	;# 
   773  0896                     	;# 
   774  089B                     	;# 
   775  0911                     	;# 
   776  0912                     	;# 
   777  0913                     	;# 
   778  0914                     	;# 
   779  0915                     	;# 
   780  0916                     	;# 
   781  0918                     	;# 
   782  0919                     	;# 
   783  091A                     	;# 
   784  091B                     	;# 
   785  091C                     	;# 
   786  091D                     	;# 
   787  091E                     	;# 
   788  091F                     	;# 
   789  0E0F                     	;# 
   790  0E10                     	;# 
   791  0E11                     	;# 
   792  0E12                     	;# 
   793  0E13                     	;# 
   794  0E14                     	;# 
   795  0E15                     	;# 
   796  0E16                     	;# 
   797  0E17                     	;# 
   798  0E18                     	;# 
   799  0E19                     	;# 
   800  0E1A                     	;# 
   801  0E1B                     	;# 
   802  0E1C                     	;# 
   803  0E1D                     	;# 
   804  0E1E                     	;# 
   805  0E1F                     	;# 
   806  0E20                     	;# 
   807  0E21                     	;# 
   808  0E22                     	;# 
   809  0E24                     	;# 
   810  0E25                     	;# 
   811  0E28                     	;# 
   812  0E29                     	;# 
   813  0E2A                     	;# 
   814  0E2B                     	;# 
   815  0E2C                     	;# 
   816  0E2D                     	;# 
   817  0E2E                     	;# 
   818  0E2F                     	;# 
   819  0E90                     	;# 
   820  0E91                     	;# 
   821  0E92                     	;# 
   822  0E94                     	;# 
   823  0E95                     	;# 
   824  0E9C                     	;# 
   825  0E9D                     	;# 
   826  0E9E                     	;# 
   827  0E9F                     	;# 
   828  0EA0                     	;# 
   829  0EA1                     	;# 
   830  0EA2                     	;# 
   831  0EA3                     	;# 
   832  0EA4                     	;# 
   833  0EA5                     	;# 
   834  0EA6                     	;# 
   835  0EA7                     	;# 
   836  0F0F                     	;# 
   837  0F10                     	;# 
   838  0F11                     	;# 
   839  0F12                     	;# 
   840  0F13                     	;# 
   841  0F14                     	;# 
   842  0F15                     	;# 
   843  0F16                     	;# 
   844  0F17                     	;# 
   845  0F18                     	;# 
   846  0F19                     	;# 
   847  0F1A                     	;# 
   848  0F1B                     	;# 
   849  0F1C                     	;# 
   850  0F1D                     	;# 
   851  0F1E                     	;# 
   852  0F1F                     	;# 
   853  0F20                     	;# 
   854  0F21                     	;# 
   855  0F22                     	;# 
   856  0F23                     	;# 
   857  0F24                     	;# 
   858  0F25                     	;# 
   859  0F26                     	;# 
   860  0F27                     	;# 
   861  0F28                     	;# 
   862  0F29                     	;# 
   863  0F2A                     	;# 
   864  0F2B                     	;# 
   865  0F2C                     	;# 
   866  0F2D                     	;# 
   867  0F2E                     	;# 
   868  0F2F                     	;# 
   869  0F30                     	;# 
   870  0F31                     	;# 
   871  0F32                     	;# 
   872  0F33                     	;# 
   873  0F34                     	;# 
   874  0F35                     	;# 
   875  0F36                     	;# 
   876  0F37                     	;# 
   877  0FE4                     	;# 
   878  0FE5                     	;# 
   879  0FE6                     	;# 
   880  0FE7                     	;# 
   881  0FE8                     	;# 
   882  0FE9                     	;# 
   883  0FEA                     	;# 
   884  0FEB                     	;# 
   885  0FED                     	;# 
   886  0FEE                     	;# 
   887  0FEF                     	;# 
   888  0000                     	;# 
   889  0001                     	;# 
   890  0002                     	;# 
   891  0003                     	;# 
   892  0004                     	;# 
   893  0005                     	;# 
   894  0006                     	;# 
   895  0007                     	;# 
   896  0008                     	;# 
   897  0009                     	;# 
   898  000A                     	;# 
   899  000B                     	;# 
   900  000C                     	;# 
   901  000D                     	;# 
   902  000E                     	;# 
   903  0010                     	;# 
   904  0011                     	;# 
   905  0012                     	;# 
   906  0013                     	;# 
   907  0014                     	;# 
   908  0015                     	;# 
   909  0015                     	;# 
   910  0016                     	;# 
   911  0016                     	;# 
   912  0017                     	;# 
   913  0018                     	;# 
   914  0019                     	;# 
   915  0019                     	;# 
   916  001A                     	;# 
   917  001B                     	;# 
   918  001C                     	;# 
   919  001D                     	;# 
   920  001E                     	;# 
   921  001F                     	;# 
   922  008C                     	;# 
   923  008D                     	;# 
   924  008E                     	;# 
   925  0090                     	;# 
   926  0091                     	;# 
   927  0092                     	;# 
   928  0093                     	;# 
   929  0094                     	;# 
   930  0097                     	;# 
   931  009B                     	;# 
   932  009B                     	;# 
   933  009C                     	;# 
   934  009D                     	;# 
   935  009E                     	;# 
   936  009F                     	;# 
   937  010C                     	;# 
   938  010D                     	;# 
   939  010E                     	;# 
   940  0111                     	;# 
   941  0112                     	;# 
   942  0113                     	;# 
   943  0114                     	;# 
   944  0115                     	;# 
   945  0116                     	;# 
   946  0117                     	;# 
   947  0118                     	;# 
   948  0119                     	;# 
   949  018C                     	;# 
   950  018D                     	;# 
   951  018E                     	;# 
   952  0197                     	;# 
   953  0199                     	;# 
   954  0199                     	;# 
   955  0199                     	;# 
   956  019A                     	;# 
   957  019A                     	;# 
   958  019A                     	;# 
   959  019B                     	;# 
   960  019B                     	;# 
   961  019B                     	;# 
   962  019B                     	;# 
   963  019B                     	;# 
   964  019C                     	;# 
   965  019C                     	;# 
   966  019C                     	;# 
   967  019D                     	;# 
   968  019D                     	;# 
   969  019D                     	;# 
   970  019E                     	;# 
   971  019E                     	;# 
   972  019E                     	;# 
   973  019F                     	;# 
   974  019F                     	;# 
   975  019F                     	;# 
   976  019F                     	;# 
   977  019F                     	;# 
   978  020C                     	;# 
   979  020D                     	;# 
   980  020E                     	;# 
   981  0211                     	;# 
   982  0211                     	;# 
   983  0212                     	;# 
   984  0212                     	;# 
   985  0213                     	;# 
   986  0213                     	;# 
   987  0214                     	;# 
   988  0214                     	;# 
   989  0215                     	;# 
   990  0215                     	;# 
   991  0215                     	;# 
   992  0215                     	;# 
   993  0216                     	;# 
   994  0216                     	;# 
   995  0217                     	;# 
   996  0217                     	;# 
   997  0219                     	;# 
   998  021A                     	;# 
   999  021B                     	;# 
  1000  021C                     	;# 
  1001  021D                     	;# 
  1002  021D                     	;# 
  1003  021E                     	;# 
  1004  021F                     	;# 
  1005  028C                     	;# 
  1006  028D                     	;# 
  1007  028E                     	;# 
  1008  0291                     	;# 
  1009  0291                     	;# 
  1010  0292                     	;# 
  1011  0293                     	;# 
  1012  0294                     	;# 
  1013  0295                     	;# 
  1014  0295                     	;# 
  1015  0296                     	;# 
  1016  0297                     	;# 
  1017  0298                     	;# 
  1018  029F                     	;# 
  1019  030C                     	;# 
  1020  030D                     	;# 
  1021  030E                     	;# 
  1022  0311                     	;# 
  1023  0311                     	;# 
  1024  0312                     	;# 
  1025  0313                     	;# 
  1026  0314                     	;# 
  1027  0315                     	;# 
  1028  0315                     	;# 
  1029  0316                     	;# 
  1030  0317                     	;# 
  1031  0318                     	;# 
  1032  038C                     	;# 
  1033  038D                     	;# 
  1034  038E                     	;# 
  1035  0391                     	;# 
  1036  0392                     	;# 
  1037  0393                     	;# 
  1038  0394                     	;# 
  1039  0395                     	;# 
  1040  0396                     	;# 
  1041  0397                     	;# 
  1042  0398                     	;# 
  1043  0399                     	;# 
  1044  039A                     	;# 
  1045  039C                     	;# 
  1046  039D                     	;# 
  1047  039E                     	;# 
  1048  039F                     	;# 
  1049  0411                     	;# 
  1050  0411                     	;# 
  1051  0412                     	;# 
  1052  0413                     	;# 
  1053  0414                     	;# 
  1054  0415                     	;# 
  1055  0416                     	;# 
  1056  0417                     	;# 
  1057  0418                     	;# 
  1058  0418                     	;# 
  1059  0419                     	;# 
  1060  041A                     	;# 
  1061  041B                     	;# 
  1062  041C                     	;# 
  1063  041D                     	;# 
  1064  041E                     	;# 
  1065  041F                     	;# 
  1066  0498                     	;# 
  1067  0498                     	;# 
  1068  0499                     	;# 
  1069  049A                     	;# 
  1070  049B                     	;# 
  1071  049B                     	;# 
  1072  049C                     	;# 
  1073  049D                     	;# 
  1074  049E                     	;# 
  1075  049F                     	;# 
  1076  0617                     	;# 
  1077  0618                     	;# 
  1078  0619                     	;# 
  1079  0619                     	;# 
  1080  061A                     	;# 
  1081  061B                     	;# 
  1082  061C                     	;# 
  1083  061C                     	;# 
  1084  061F                     	;# 
  1085  0691                     	;# 
  1086  0692                     	;# 
  1087  0693                     	;# 
  1088  0694                     	;# 
  1089  0695                     	;# 
  1090  0696                     	;# 
  1091  0697                     	;# 
  1092  0698                     	;# 
  1093  0699                     	;# 
  1094  0711                     	;# 
  1095  0712                     	;# 
  1096  0713                     	;# 
  1097  0714                     	;# 
  1098  0715                     	;# 
  1099  0716                     	;# 
  1100  0717                     	;# 
  1101  0718                     	;# 
  1102  0719                     	;# 
  1103  0891                     	;# 
  1104  0891                     	;# 
  1105  0891                     	;# 
  1106  0891                     	;# 
  1107  0891                     	;# 
  1108  0891                     	;# 
  1109  0892                     	;# 
  1110  0892                     	;# 
  1111  0892                     	;# 
  1112  0893                     	;# 
  1113  0893                     	;# 
  1114  0893                     	;# 
  1115  0893                     	;# 
  1116  0893                     	;# 
  1117  0893                     	;# 
  1118  0894                     	;# 
  1119  0894                     	;# 
  1120  0894                     	;# 
  1121  0895                     	;# 
  1122  0895                     	;# 
  1123  0895                     	;# 
  1124  0896                     	;# 
  1125  0896                     	;# 
  1126  0896                     	;# 
  1127  089B                     	;# 
  1128  0911                     	;# 
  1129  0912                     	;# 
  1130  0913                     	;# 
  1131  0914                     	;# 
  1132  0915                     	;# 
  1133  0916                     	;# 
  1134  0918                     	;# 
  1135  0919                     	;# 
  1136  091A                     	;# 
  1137  091B                     	;# 
  1138  091C                     	;# 
  1139  091D                     	;# 
  1140  091E                     	;# 
  1141  091F                     	;# 
  1142  0E0F                     	;# 
  1143  0E10                     	;# 
  1144  0E11                     	;# 
  1145  0E12                     	;# 
  1146  0E13                     	;# 
  1147  0E14                     	;# 
  1148  0E15                     	;# 
  1149  0E16                     	;# 
  1150  0E17                     	;# 
  1151  0E18                     	;# 
  1152  0E19                     	;# 
  1153  0E1A                     	;# 
  1154  0E1B                     	;# 
  1155  0E1C                     	;# 
  1156  0E1D                     	;# 
  1157  0E1E                     	;# 
  1158  0E1F                     	;# 
  1159  0E20                     	;# 
  1160  0E21                     	;# 
  1161  0E22                     	;# 
  1162  0E24                     	;# 
  1163  0E25                     	;# 
  1164  0E28                     	;# 
  1165  0E29                     	;# 
  1166  0E2A                     	;# 
  1167  0E2B                     	;# 
  1168  0E2C                     	;# 
  1169  0E2D                     	;# 
  1170  0E2E                     	;# 
  1171  0E2F                     	;# 
  1172  0E90                     	;# 
  1173  0E91                     	;# 
  1174  0E92                     	;# 
  1175  0E94                     	;# 
  1176  0E95                     	;# 
  1177  0E9C                     	;# 
  1178  0E9D                     	;# 
  1179  0E9E                     	;# 
  1180  0E9F                     	;# 
  1181  0EA0                     	;# 
  1182  0EA1                     	;# 
  1183  0EA2                     	;# 
  1184  0EA3                     	;# 
  1185  0EA4                     	;# 
  1186  0EA5                     	;# 
  1187  0EA6                     	;# 
  1188  0EA7                     	;# 
  1189  0F0F                     	;# 
  1190  0F10                     	;# 
  1191  0F11                     	;# 
  1192  0F12                     	;# 
  1193  0F13                     	;# 
  1194  0F14                     	;# 
  1195  0F15                     	;# 
  1196  0F16                     	;# 
  1197  0F17                     	;# 
  1198  0F18                     	;# 
  1199  0F19                     	;# 
  1200  0F1A                     	;# 
  1201  0F1B                     	;# 
  1202  0F1C                     	;# 
  1203  0F1D                     	;# 
  1204  0F1E                     	;# 
  1205  0F1F                     	;# 
  1206  0F20                     	;# 
  1207  0F21                     	;# 
  1208  0F22                     	;# 
  1209  0F23                     	;# 
  1210  0F24                     	;# 
  1211  0F25                     	;# 
  1212  0F26                     	;# 
  1213  0F27                     	;# 
  1214  0F28                     	;# 
  1215  0F29                     	;# 
  1216  0F2A                     	;# 
  1217  0F2B                     	;# 
  1218  0F2C                     	;# 
  1219  0F2D                     	;# 
  1220  0F2E                     	;# 
  1221  0F2F                     	;# 
  1222  0F30                     	;# 
  1223  0F31                     	;# 
  1224  0F32                     	;# 
  1225  0F33                     	;# 
  1226  0F34                     	;# 
  1227  0F35                     	;# 
  1228  0F36                     	;# 
  1229  0F37                     	;# 
  1230  0FE4                     	;# 
  1231  0FE5                     	;# 
  1232  0FE6                     	;# 
  1233  0FE7                     	;# 
  1234  0FE8                     	;# 
  1235  0FE9                     	;# 
  1236  0FEA                     	;# 
  1237  0FEB                     	;# 
  1238  0FED                     	;# 
  1239  0FEE                     	;# 
  1240  0FEF                     	;# 
  1241  0000                     	;# 
  1242  0001                     	;# 
  1243  0002                     	;# 
  1244  0003                     	;# 
  1245  0004                     	;# 
  1246  0005                     	;# 
  1247  0006                     	;# 
  1248  0007                     	;# 
  1249  0008                     	;# 
  1250  0009                     	;# 
  1251  000A                     	;# 
  1252  000B                     	;# 
  1253  000C                     	;# 
  1254  000D                     	;# 
  1255  000E                     	;# 
  1256  0010                     	;# 
  1257  0011                     	;# 
  1258  0012                     	;# 
  1259  0013                     	;# 
  1260  0014                     	;# 
  1261  0015                     	;# 
  1262  0015                     	;# 
  1263  0016                     	;# 
  1264  0016                     	;# 
  1265  0017                     	;# 
  1266  0018                     	;# 
  1267  0019                     	;# 
  1268  0019                     	;# 
  1269  001A                     	;# 
  1270  001B                     	;# 
  1271  001C                     	;# 
  1272  001D                     	;# 
  1273  001E                     	;# 
  1274  001F                     	;# 
  1275  008C                     	;# 
  1276  008D                     	;# 
  1277  008E                     	;# 
  1278  0090                     	;# 
  1279  0091                     	;# 
  1280  0092                     	;# 
  1281  0093                     	;# 
  1282  0094                     	;# 
  1283  0097                     	;# 
  1284  009B                     	;# 
  1285  009B                     	;# 
  1286  009C                     	;# 
  1287  009D                     	;# 
  1288  009E                     	;# 
  1289  009F                     	;# 
  1290  010C                     	;# 
  1291  010D                     	;# 
  1292  010E                     	;# 
  1293  0111                     	;# 
  1294  0112                     	;# 
  1295  0113                     	;# 
  1296  0114                     	;# 
  1297  0115                     	;# 
  1298  0116                     	;# 
  1299  0117                     	;# 
  1300  0118                     	;# 
  1301  0119                     	;# 
  1302  018C                     	;# 
  1303  018D                     	;# 
  1304  018E                     	;# 
  1305  0197                     	;# 
  1306  0199                     	;# 
  1307  0199                     	;# 
  1308  0199                     	;# 
  1309  019A                     	;# 
  1310  019A                     	;# 
  1311  019A                     	;# 
  1312  019B                     	;# 
  1313  019B                     	;# 
  1314  019B                     	;# 
  1315  019B                     	;# 
  1316  019B                     	;# 
  1317  019C                     	;# 
  1318  019C                     	;# 
  1319  019C                     	;# 
  1320  019D                     	;# 
  1321  019D                     	;# 
  1322  019D                     	;# 
  1323  019E                     	;# 
  1324  019E                     	;# 
  1325  019E                     	;# 
  1326  019F                     	;# 
  1327  019F                     	;# 
  1328  019F                     	;# 
  1329  019F                     	;# 
  1330  019F                     	;# 
  1331  020C                     	;# 
  1332  020D                     	;# 
  1333  020E                     	;# 
  1334  0211                     	;# 
  1335  0211                     	;# 
  1336  0212                     	;# 
  1337  0212                     	;# 
  1338  0213                     	;# 
  1339  0213                     	;# 
  1340  0214                     	;# 
  1341  0214                     	;# 
  1342  0215                     	;# 
  1343  0215                     	;# 
  1344  0215                     	;# 
  1345  0215                     	;# 
  1346  0216                     	;# 
  1347  0216                     	;# 
  1348  0217                     	;# 
  1349  0217                     	;# 
  1350  0219                     	;# 
  1351  021A                     	;# 
  1352  021B                     	;# 
  1353  021C                     	;# 
  1354  021D                     	;# 
  1355  021D                     	;# 
  1356  021E                     	;# 
  1357  021F                     	;# 
  1358  028C                     	;# 
  1359  028D                     	;# 
  1360  028E                     	;# 
  1361  0291                     	;# 
  1362  0291                     	;# 
  1363  0292                     	;# 
  1364  0293                     	;# 
  1365  0294                     	;# 
  1366  0295                     	;# 
  1367  0295                     	;# 
  1368  0296                     	;# 
  1369  0297                     	;# 
  1370  0298                     	;# 
  1371  029F                     	;# 
  1372  030C                     	;# 
  1373  030D                     	;# 
  1374  030E                     	;# 
  1375  0311                     	;# 
  1376  0311                     	;# 
  1377  0312                     	;# 
  1378  0313                     	;# 
  1379  0314                     	;# 
  1380  0315                     	;# 
  1381  0315                     	;# 
  1382  0316                     	;# 
  1383  0317                     	;# 
  1384  0318                     	;# 
  1385  038C                     	;# 
  1386  038D                     	;# 
  1387  038E                     	;# 
  1388  0391                     	;# 
  1389  0392                     	;# 
  1390  0393                     	;# 
  1391  0394                     	;# 
  1392  0395                     	;# 
  1393  0396                     	;# 
  1394  0397                     	;# 
  1395  0398                     	;# 
  1396  0399                     	;# 
  1397  039A                     	;# 
  1398  039C                     	;# 
  1399  039D                     	;# 
  1400  039E                     	;# 
  1401  039F                     	;# 
  1402  0411                     	;# 
  1403  0411                     	;# 
  1404  0412                     	;# 
  1405  0413                     	;# 
  1406  0414                     	;# 
  1407  0415                     	;# 
  1408  0416                     	;# 
  1409  0417                     	;# 
  1410  0418                     	;# 
  1411  0418                     	;# 
  1412  0419                     	;# 
  1413  041A                     	;# 
  1414  041B                     	;# 
  1415  041C                     	;# 
  1416  041D                     	;# 
  1417  041E                     	;# 
  1418  041F                     	;# 
  1419  0498                     	;# 
  1420  0498                     	;# 
  1421  0499                     	;# 
  1422  049A                     	;# 
  1423  049B                     	;# 
  1424  049B                     	;# 
  1425  049C                     	;# 
  1426  049D                     	;# 
  1427  049E                     	;# 
  1428  049F                     	;# 
  1429  0617                     	;# 
  1430  0618                     	;# 
  1431  0619                     	;# 
  1432  0619                     	;# 
  1433  061A                     	;# 
  1434  061B                     	;# 
  1435  061C                     	;# 
  1436  061C                     	;# 
  1437  061F                     	;# 
  1438  0691                     	;# 
  1439  0692                     	;# 
  1440  0693                     	;# 
  1441  0694                     	;# 
  1442  0695                     	;# 
  1443  0696                     	;# 
  1444  0697                     	;# 
  1445  0698                     	;# 
  1446  0699                     	;# 
  1447  0711                     	;# 
  1448  0712                     	;# 
  1449  0713                     	;# 
  1450  0714                     	;# 
  1451  0715                     	;# 
  1452  0716                     	;# 
  1453  0717                     	;# 
  1454  0718                     	;# 
  1455  0719                     	;# 
  1456  0891                     	;# 
  1457  0891                     	;# 
  1458  0891                     	;# 
  1459  0891                     	;# 
  1460  0891                     	;# 
  1461  0891                     	;# 
  1462  0892                     	;# 
  1463  0892                     	;# 
  1464  0892                     	;# 
  1465  0893                     	;# 
  1466  0893                     	;# 
  1467  0893                     	;# 
  1468  0893                     	;# 
  1469  0893                     	;# 
  1470  0893                     	;# 
  1471  0894                     	;# 
  1472  0894                     	;# 
  1473  0894                     	;# 
  1474  0895                     	;# 
  1475  0895                     	;# 
  1476  0895                     	;# 
  1477  0896                     	;# 
  1478  0896                     	;# 
  1479  0896                     	;# 
  1480  089B                     	;# 
  1481  0911                     	;# 
  1482  0912                     	;# 
  1483  0913                     	;# 
  1484  0914                     	;# 
  1485  0915                     	;# 
  1486  0916                     	;# 
  1487  0918                     	;# 
  1488  0919                     	;# 
  1489  091A                     	;# 
  1490  091B                     	;# 
  1491  091C                     	;# 
  1492  091D                     	;# 
  1493  091E                     	;# 
  1494  091F                     	;# 
  1495  0E0F                     	;# 
  1496  0E10                     	;# 
  1497  0E11                     	;# 
  1498  0E12                     	;# 
  1499  0E13                     	;# 
  1500  0E14                     	;# 
  1501  0E15                     	;# 
  1502  0E16                     	;# 
  1503  0E17                     	;# 
  1504  0E18                     	;# 
  1505  0E19                     	;# 
  1506  0E1A                     	;# 
  1507  0E1B                     	;# 
  1508  0E1C                     	;# 
  1509  0E1D                     	;# 
  1510  0E1E                     	;# 
  1511  0E1F                     	;# 
  1512  0E20                     	;# 
  1513  0E21                     	;# 
  1514  0E22                     	;# 
  1515  0E24                     	;# 
  1516  0E25                     	;# 
  1517  0E28                     	;# 
  1518  0E29                     	;# 
  1519  0E2A                     	;# 
  1520  0E2B                     	;# 
  1521  0E2C                     	;# 
  1522  0E2D                     	;# 
  1523  0E2E                     	;# 
  1524  0E2F                     	;# 
  1525  0E90                     	;# 
  1526  0E91                     	;# 
  1527  0E92                     	;# 
  1528  0E94                     	;# 
  1529  0E95                     	;# 
  1530  0E9C                     	;# 
  1531  0E9D                     	;# 
  1532  0E9E                     	;# 
  1533  0E9F                     	;# 
  1534  0EA0                     	;# 
  1535  0EA1                     	;# 
  1536  0EA2                     	;# 
  1537  0EA3                     	;# 
  1538  0EA4                     	;# 
  1539  0EA5                     	;# 
  1540  0EA6                     	;# 
  1541  0EA7                     	;# 
  1542  0F0F                     	;# 
  1543  0F10                     	;# 
  1544  0F11                     	;# 
  1545  0F12                     	;# 
  1546  0F13                     	;# 
  1547  0F14                     	;# 
  1548  0F15                     	;# 
  1549  0F16                     	;# 
  1550  0F17                     	;# 
  1551  0F18                     	;# 
  1552  0F19                     	;# 
  1553  0F1A                     	;# 
  1554  0F1B                     	;# 
  1555  0F1C                     	;# 
  1556  0F1D                     	;# 
  1557  0F1E                     	;# 
  1558  0F1F                     	;# 
  1559  0F20                     	;# 
  1560  0F21                     	;# 
  1561  0F22                     	;# 
  1562  0F23                     	;# 
  1563  0F24                     	;# 
  1564  0F25                     	;# 
  1565  0F26                     	;# 
  1566  0F27                     	;# 
  1567  0F28                     	;# 
  1568  0F29                     	;# 
  1569  0F2A                     	;# 
  1570  0F2B                     	;# 
  1571  0F2C                     	;# 
  1572  0F2D                     	;# 
  1573  0F2E                     	;# 
  1574  0F2F                     	;# 
  1575  0F30                     	;# 
  1576  0F31                     	;# 
  1577  0F32                     	;# 
  1578  0F33                     	;# 
  1579  0F34                     	;# 
  1580  0F35                     	;# 
  1581  0F36                     	;# 
  1582  0F37                     	;# 
  1583  0FE4                     	;# 
  1584  0FE5                     	;# 
  1585  0FE6                     	;# 
  1586  0FE7                     	;# 
  1587  0FE8                     	;# 
  1588  0FE9                     	;# 
  1589  0FEA                     	;# 
  1590  0FEB                     	;# 
  1591  0FED                     	;# 
  1592  0FEE                     	;# 
  1593  0FEF                     	;# 
  1594  0000                     	;# 
  1595  0001                     	;# 
  1596  0002                     	;# 
  1597  0003                     	;# 
  1598  0004                     	;# 
  1599  0005                     	;# 
  1600  0006                     	;# 
  1601  0007                     	;# 
  1602  0008                     	;# 
  1603  0009                     	;# 
  1604  000A                     	;# 
  1605  000B                     	;# 
  1606  000C                     	;# 
  1607  000D                     	;# 
  1608  000E                     	;# 
  1609  0010                     	;# 
  1610  0011                     	;# 
  1611  0012                     	;# 
  1612  0013                     	;# 
  1613  0014                     	;# 
  1614  0015                     	;# 
  1615  0015                     	;# 
  1616  0016                     	;# 
  1617  0016                     	;# 
  1618  0017                     	;# 
  1619  0018                     	;# 
  1620  0019                     	;# 
  1621  0019                     	;# 
  1622  001A                     	;# 
  1623  001B                     	;# 
  1624  001C                     	;# 
  1625  001D                     	;# 
  1626  001E                     	;# 
  1627  001F                     	;# 
  1628  008C                     	;# 
  1629  008D                     	;# 
  1630  008E                     	;# 
  1631  0090                     	;# 
  1632  0091                     	;# 
  1633  0092                     	;# 
  1634  0093                     	;# 
  1635  0094                     	;# 
  1636  0097                     	;# 
  1637  009B                     	;# 
  1638  009B                     	;# 
  1639  009C                     	;# 
  1640  009D                     	;# 
  1641  009E                     	;# 
  1642  009F                     	;# 
  1643  010C                     	;# 
  1644  010D                     	;# 
  1645  010E                     	;# 
  1646  0111                     	;# 
  1647  0112                     	;# 
  1648  0113                     	;# 
  1649  0114                     	;# 
  1650  0115                     	;# 
  1651  0116                     	;# 
  1652  0117                     	;# 
  1653  0118                     	;# 
  1654  0119                     	;# 
  1655  018C                     	;# 
  1656  018D                     	;# 
  1657  018E                     	;# 
  1658  0197                     	;# 
  1659  0199                     	;# 
  1660  0199                     	;# 
  1661  0199                     	;# 
  1662  019A                     	;# 
  1663  019A                     	;# 
  1664  019A                     	;# 
  1665  019B                     	;# 
  1666  019B                     	;# 
  1667  019B                     	;# 
  1668  019B                     	;# 
  1669  019B                     	;# 
  1670  019C                     	;# 
  1671  019C                     	;# 
  1672  019C                     	;# 
  1673  019D                     	;# 
  1674  019D                     	;# 
  1675  019D                     	;# 
  1676  019E                     	;# 
  1677  019E                     	;# 
  1678  019E                     	;# 
  1679  019F                     	;# 
  1680  019F                     	;# 
  1681  019F                     	;# 
  1682  019F                     	;# 
  1683  019F                     	;# 
  1684  020C                     	;# 
  1685  020D                     	;# 
  1686  020E                     	;# 
  1687  0211                     	;# 
  1688  0211                     	;# 
  1689  0212                     	;# 
  1690  0212                     	;# 
  1691  0213                     	;# 
  1692  0213                     	;# 
  1693  0214                     	;# 
  1694  0214                     	;# 
  1695  0215                     	;# 
  1696  0215                     	;# 
  1697  0215                     	;# 
  1698  0215                     	;# 
  1699  0216                     	;# 
  1700  0216                     	;# 
  1701  0217                     	;# 
  1702  0217                     	;# 
  1703  0219                     	;# 
  1704  021A                     	;# 
  1705  021B                     	;# 
  1706  021C                     	;# 
  1707  021D                     	;# 
  1708  021D                     	;# 
  1709  021E                     	;# 
  1710  021F                     	;# 
  1711  028C                     	;# 
  1712  028D                     	;# 
  1713  028E                     	;# 
  1714  0291                     	;# 
  1715  0291                     	;# 
  1716  0292                     	;# 
  1717  0293                     	;# 
  1718  0294                     	;# 
  1719  0295                     	;# 
  1720  0295                     	;# 
  1721  0296                     	;# 
  1722  0297                     	;# 
  1723  0298                     	;# 
  1724  029F                     	;# 
  1725  030C                     	;# 
  1726  030D                     	;# 
  1727  030E                     	;# 
  1728  0311                     	;# 
  1729  0311                     	;# 
  1730  0312                     	;# 
  1731  0313                     	;# 
  1732  0314                     	;# 
  1733  0315                     	;# 
  1734  0315                     	;# 
  1735  0316                     	;# 
  1736  0317                     	;# 
  1737  0318                     	;# 
  1738  038C                     	;# 
  1739  038D                     	;# 
  1740  038E                     	;# 
  1741  0391                     	;# 
  1742  0392                     	;# 
  1743  0393                     	;# 
  1744  0394                     	;# 
  1745  0395                     	;# 
  1746  0396                     	;# 
  1747  0397                     	;# 
  1748  0398                     	;# 
  1749  0399                     	;# 
  1750  039A                     	;# 
  1751  039C                     	;# 
  1752  039D                     	;# 
  1753  039E                     	;# 
  1754  039F                     	;# 
  1755  0411                     	;# 
  1756  0411                     	;# 
  1757  0412                     	;# 
  1758  0413                     	;# 
  1759  0414                     	;# 
  1760  0415                     	;# 
  1761  0416                     	;# 
  1762  0417                     	;# 
  1763  0418                     	;# 
  1764  0418                     	;# 
  1765  0419                     	;# 
  1766  041A                     	;# 
  1767  041B                     	;# 
  1768  041C                     	;# 
  1769  041D                     	;# 
  1770  041E                     	;# 
  1771  041F                     	;# 
  1772  0498                     	;# 
  1773  0498                     	;# 
  1774  0499                     	;# 
  1775  049A                     	;# 
  1776  049B                     	;# 
  1777  049B                     	;# 
  1778  049C                     	;# 
  1779  049D                     	;# 
  1780  049E                     	;# 
  1781  049F                     	;# 
  1782  0617                     	;# 
  1783  0618                     	;# 
  1784  0619                     	;# 
  1785  0619                     	;# 
  1786  061A                     	;# 
  1787  061B                     	;# 
  1788  061C                     	;# 
  1789  061C                     	;# 
  1790  061F                     	;# 
  1791  0691                     	;# 
  1792  0692                     	;# 
  1793  0693                     	;# 
  1794  0694                     	;# 
  1795  0695                     	;# 
  1796  0696                     	;# 
  1797  0697                     	;# 
  1798  0698                     	;# 
  1799  0699                     	;# 
  1800  0711                     	;# 
  1801  0712                     	;# 
  1802  0713                     	;# 
  1803  0714                     	;# 
  1804  0715                     	;# 
  1805  0716                     	;# 
  1806  0717                     	;# 
  1807  0718                     	;# 
  1808  0719                     	;# 
  1809  0891                     	;# 
  1810  0891                     	;# 
  1811  0891                     	;# 
  1812  0891                     	;# 
  1813  0891                     	;# 
  1814  0891                     	;# 
  1815  0892                     	;# 
  1816  0892                     	;# 
  1817  0892                     	;# 
  1818  0893                     	;# 
  1819  0893                     	;# 
  1820  0893                     	;# 
  1821  0893                     	;# 
  1822  0893                     	;# 
  1823  0893                     	;# 
  1824  0894                     	;# 
  1825  0894                     	;# 
  1826  0894                     	;# 
  1827  0895                     	;# 
  1828  0895                     	;# 
  1829  0895                     	;# 
  1830  0896                     	;# 
  1831  0896                     	;# 
  1832  0896                     	;# 
  1833  089B                     	;# 
  1834  0911                     	;# 
  1835  0912                     	;# 
  1836  0913                     	;# 
  1837  0914                     	;# 
  1838  0915                     	;# 
  1839  0916                     	;# 
  1840  0918                     	;# 
  1841  0919                     	;# 
  1842  091A                     	;# 
  1843  091B                     	;# 
  1844  091C                     	;# 
  1845  091D                     	;# 
  1846  091E                     	;# 
  1847  091F                     	;# 
  1848  0E0F                     	;# 
  1849  0E10                     	;# 
  1850  0E11                     	;# 
  1851  0E12                     	;# 
  1852  0E13                     	;# 
  1853  0E14                     	;# 
  1854  0E15                     	;# 
  1855  0E16                     	;# 
  1856  0E17                     	;# 
  1857  0E18                     	;# 
  1858  0E19                     	;# 
  1859  0E1A                     	;# 
  1860  0E1B                     	;# 
  1861  0E1C                     	;# 
  1862  0E1D                     	;# 
  1863  0E1E                     	;# 
  1864  0E1F                     	;# 
  1865  0E20                     	;# 
  1866  0E21                     	;# 
  1867  0E22                     	;# 
  1868  0E24                     	;# 
  1869  0E25                     	;# 
  1870  0E28                     	;# 
  1871  0E29                     	;# 
  1872  0E2A                     	;# 
  1873  0E2B                     	;# 
  1874  0E2C                     	;# 
  1875  0E2D                     	;# 
  1876  0E2E                     	;# 
  1877  0E2F                     	;# 
  1878  0E90                     	;# 
  1879  0E91                     	;# 
  1880  0E92                     	;# 
  1881  0E94                     	;# 
  1882  0E95                     	;# 
  1883  0E9C                     	;# 
  1884  0E9D                     	;# 
  1885  0E9E                     	;# 
  1886  0E9F                     	;# 
  1887  0EA0                     	;# 
  1888  0EA1                     	;# 
  1889  0EA2                     	;# 
  1890  0EA3                     	;# 
  1891  0EA4                     	;# 
  1892  0EA5                     	;# 
  1893  0EA6                     	;# 
  1894  0EA7                     	;# 
  1895  0F0F                     	;# 
  1896  0F10                     	;# 
  1897  0F11                     	;# 
  1898  0F12                     	;# 
  1899  0F13                     	;# 
  1900  0F14                     	;# 
  1901  0F15                     	;# 
  1902  0F16                     	;# 
  1903  0F17                     	;# 
  1904  0F18                     	;# 
  1905  0F19                     	;# 
  1906  0F1A                     	;# 
  1907  0F1B                     	;# 
  1908  0F1C                     	;# 
  1909  0F1D                     	;# 
  1910  0F1E                     	;# 
  1911  0F1F                     	;# 
  1912  0F20                     	;# 
  1913  0F21                     	;# 
  1914  0F22                     	;# 
  1915  0F23                     	;# 
  1916  0F24                     	;# 
  1917  0F25                     	;# 
  1918  0F26                     	;# 
  1919  0F27                     	;# 
  1920  0F28                     	;# 
  1921  0F29                     	;# 
  1922  0F2A                     	;# 
  1923  0F2B                     	;# 
  1924  0F2C                     	;# 
  1925  0F2D                     	;# 
  1926  0F2E                     	;# 
  1927  0F2F                     	;# 
  1928  0F30                     	;# 
  1929  0F31                     	;# 
  1930  0F32                     	;# 
  1931  0F33                     	;# 
  1932  0F34                     	;# 
  1933  0F35                     	;# 
  1934  0F36                     	;# 
  1935  0F37                     	;# 
  1936  0FE4                     	;# 
  1937  0FE5                     	;# 
  1938  0FE6                     	;# 
  1939  0FE7                     	;# 
  1940  0FE8                     	;# 
  1941  0FE9                     	;# 
  1942  0FEA                     	;# 
  1943  0FEB                     	;# 
  1944  0FED                     	;# 
  1945  0FEE                     	;# 
  1946  0FEF                     	;# 
  1947  0000                     	;# 
  1948  0001                     	;# 
  1949  0002                     	;# 
  1950  0003                     	;# 
  1951  0004                     	;# 
  1952  0005                     	;# 
  1953  0006                     	;# 
  1954  0007                     	;# 
  1955  0008                     	;# 
  1956  0009                     	;# 
  1957  000A                     	;# 
  1958  000B                     	;# 
  1959  000C                     	;# 
  1960  000D                     	;# 
  1961  000E                     	;# 
  1962  0010                     	;# 
  1963  0011                     	;# 
  1964  0012                     	;# 
  1965  0013                     	;# 
  1966  0014                     	;# 
  1967  0015                     	;# 
  1968  0015                     	;# 
  1969  0016                     	;# 
  1970  0016                     	;# 
  1971  0017                     	;# 
  1972  0018                     	;# 
  1973  0019                     	;# 
  1974  0019                     	;# 
  1975  001A                     	;# 
  1976  001B                     	;# 
  1977  001C                     	;# 
  1978  001D                     	;# 
  1979  001E                     	;# 
  1980  001F                     	;# 
  1981  008C                     	;# 
  1982  008D                     	;# 
  1983  008E                     	;# 
  1984  0090                     	;# 
  1985  0091                     	;# 
  1986  0092                     	;# 
  1987  0093                     	;# 
  1988  0094                     	;# 
  1989  0097                     	;# 
  1990  009B                     	;# 
  1991  009B                     	;# 
  1992  009C                     	;# 
  1993  009D                     	;# 
  1994  009E                     	;# 
  1995  009F                     	;# 
  1996  010C                     	;# 
  1997  010D                     	;# 
  1998  010E                     	;# 
  1999  0111                     	;# 
  2000  0112                     	;# 
  2001  0113                     	;# 
  2002  0114                     	;# 
  2003  0115                     	;# 
  2004  0116                     	;# 
  2005  0117                     	;# 
  2006  0118                     	;# 
  2007  0119                     	;# 
  2008  018C                     	;# 
  2009  018D                     	;# 
  2010  018E                     	;# 
  2011  0197                     	;# 
  2012  0199                     	;# 
  2013  0199                     	;# 
  2014  0199                     	;# 
  2015  019A                     	;# 
  2016  019A                     	;# 
  2017  019A                     	;# 
  2018  019B                     	;# 
  2019  019B                     	;# 
  2020  019B                     	;# 
  2021  019B                     	;# 
  2022  019B                     	;# 
  2023  019C                     	;# 
  2024  019C                     	;# 
  2025  019C                     	;# 
  2026  019D                     	;# 
  2027  019D                     	;# 
  2028  019D                     	;# 
  2029  019E                     	;# 
  2030  019E                     	;# 
  2031  019E                     	;# 
  2032  019F                     	;# 
  2033  019F                     	;# 
  2034  019F                     	;# 
  2035  019F                     	;# 
  2036  019F                     	;# 
  2037  020C                     	;# 
  2038  020D                     	;# 
  2039  020E                     	;# 
  2040  0211                     	;# 
  2041  0211                     	;# 
  2042  0212                     	;# 
  2043  0212                     	;# 
  2044  0213                     	;# 
  2045  0213                     	;# 
  2046  0214                     	;# 
  2047  0214                     	;# 
  2048  0215                     	;# 
  2049  0215                     	;# 
  2050  0215                     	;# 
  2051  0215                     	;# 
  2052  0216                     	;# 
  2053  0216                     	;# 
  2054  0217                     	;# 
  2055  0217                     	;# 
  2056  0219                     	;# 
  2057  021A                     	;# 
  2058  021B                     	;# 
  2059  021C                     	;# 
  2060  021D                     	;# 
  2061  021D                     	;# 
  2062  021E                     	;# 
  2063  021F                     	;# 
  2064  028C                     	;# 
  2065  028D                     	;# 
  2066  028E                     	;# 
  2067  0291                     	;# 
  2068  0291                     	;# 
  2069  0292                     	;# 
  2070  0293                     	;# 
  2071  0294                     	;# 
  2072  0295                     	;# 
  2073  0295                     	;# 
  2074  0296                     	;# 
  2075  0297                     	;# 
  2076  0298                     	;# 
  2077  029F                     	;# 
  2078  030C                     	;# 
  2079  030D                     	;# 
  2080  030E                     	;# 
  2081  0311                     	;# 
  2082  0311                     	;# 
  2083  0312                     	;# 
  2084  0313                     	;# 
  2085  0314                     	;# 
  2086  0315                     	;# 
  2087  0315                     	;# 
  2088  0316                     	;# 
  2089  0317                     	;# 
  2090  0318                     	;# 
  2091  038C                     	;# 
  2092  038D                     	;# 
  2093  038E                     	;# 
  2094  0391                     	;# 
  2095  0392                     	;# 
  2096  0393                     	;# 
  2097  0394                     	;# 
  2098  0395                     	;# 
  2099  0396                     	;# 
  2100  0397                     	;# 
  2101  0398                     	;# 
  2102  0399                     	;# 
  2103  039A                     	;# 
  2104  039C                     	;# 
  2105  039D                     	;# 
  2106  039E                     	;# 
  2107  039F                     	;# 
  2108  0411                     	;# 
  2109  0411                     	;# 
  2110  0412                     	;# 
  2111  0413                     	;# 
  2112  0414                     	;# 
  2113  0415                     	;# 
  2114  0416                     	;# 
  2115  0417                     	;# 
  2116  0418                     	;# 
  2117  0418                     	;# 
  2118  0419                     	;# 
  2119  041A                     	;# 
  2120  041B                     	;# 
  2121  041C                     	;# 
  2122  041D                     	;# 
  2123  041E                     	;# 
  2124  041F                     	;# 
  2125  0498                     	;# 
  2126  0498                     	;# 
  2127  0499                     	;# 
  2128  049A                     	;# 
  2129  049B                     	;# 
  2130  049B                     	;# 
  2131  049C                     	;# 
  2132  049D                     	;# 
  2133  049E                     	;# 
  2134  049F                     	;# 
  2135  0617                     	;# 
  2136  0618                     	;# 
  2137  0619                     	;# 
  2138  0619                     	;# 
  2139  061A                     	;# 
  2140  061B                     	;# 
  2141  061C                     	;# 
  2142  061C                     	;# 
  2143  061F                     	;# 
  2144  0691                     	;# 
  2145  0692                     	;# 
  2146  0693                     	;# 
  2147  0694                     	;# 
  2148  0695                     	;# 
  2149  0696                     	;# 
  2150  0697                     	;# 
  2151  0698                     	;# 
  2152  0699                     	;# 
  2153  0711                     	;# 
  2154  0712                     	;# 
  2155  0713                     	;# 
  2156  0714                     	;# 
  2157  0715                     	;# 
  2158  0716                     	;# 
  2159  0717                     	;# 
  2160  0718                     	;# 
  2161  0719                     	;# 
  2162  0891                     	;# 
  2163  0891                     	;# 
  2164  0891                     	;# 
  2165  0891                     	;# 
  2166  0891                     	;# 
  2167  0891                     	;# 
  2168  0892                     	;# 
  2169  0892                     	;# 
  2170  0892                     	;# 
  2171  0893                     	;# 
  2172  0893                     	;# 
  2173  0893                     	;# 
  2174  0893                     	;# 
  2175  0893                     	;# 
  2176  0893                     	;# 
  2177  0894                     	;# 
  2178  0894                     	;# 
  2179  0894                     	;# 
  2180  0895                     	;# 
  2181  0895                     	;# 
  2182  0895                     	;# 
  2183  0896                     	;# 
  2184  0896                     	;# 
  2185  0896                     	;# 
  2186  089B                     	;# 
  2187  0911                     	;# 
  2188  0912                     	;# 
  2189  0913                     	;# 
  2190  0914                     	;# 
  2191  0915                     	;# 
  2192  0916                     	;# 
  2193  0918                     	;# 
  2194  0919                     	;# 
  2195  091A                     	;# 
  2196  091B                     	;# 
  2197  091C                     	;# 
  2198  091D                     	;# 
  2199  091E                     	;# 
  2200  091F                     	;# 
  2201  0E0F                     	;# 
  2202  0E10                     	;# 
  2203  0E11                     	;# 
  2204  0E12                     	;# 
  2205  0E13                     	;# 
  2206  0E14                     	;# 
  2207  0E15                     	;# 
  2208  0E16                     	;# 
  2209  0E17                     	;# 
  2210  0E18                     	;# 
  2211  0E19                     	;# 
  2212  0E1A                     	;# 
  2213  0E1B                     	;# 
  2214  0E1C                     	;# 
  2215  0E1D                     	;# 
  2216  0E1E                     	;# 
  2217  0E1F                     	;# 
  2218  0E20                     	;# 
  2219  0E21                     	;# 
  2220  0E22                     	;# 
  2221  0E24                     	;# 
  2222  0E25                     	;# 
  2223  0E28                     	;# 
  2224  0E29                     	;# 
  2225  0E2A                     	;# 
  2226  0E2B                     	;# 
  2227  0E2C                     	;# 
  2228  0E2D                     	;# 
  2229  0E2E                     	;# 
  2230  0E2F                     	;# 
  2231  0E90                     	;# 
  2232  0E91                     	;# 
  2233  0E92                     	;# 
  2234  0E94                     	;# 
  2235  0E95                     	;# 
  2236  0E9C                     	;# 
  2237  0E9D                     	;# 
  2238  0E9E                     	;# 
  2239  0E9F                     	;# 
  2240  0EA0                     	;# 
  2241  0EA1                     	;# 
  2242  0EA2                     	;# 
  2243  0EA3                     	;# 
  2244  0EA4                     	;# 
  2245  0EA5                     	;# 
  2246  0EA6                     	;# 
  2247  0EA7                     	;# 
  2248  0F0F                     	;# 
  2249  0F10                     	;# 
  2250  0F11                     	;# 
  2251  0F12                     	;# 
  2252  0F13                     	;# 
  2253  0F14                     	;# 
  2254  0F15                     	;# 
  2255  0F16                     	;# 
  2256  0F17                     	;# 
  2257  0F18                     	;# 
  2258  0F19                     	;# 
  2259  0F1A                     	;# 
  2260  0F1B                     	;# 
  2261  0F1C                     	;# 
  2262  0F1D                     	;# 
  2263  0F1E                     	;# 
  2264  0F1F                     	;# 
  2265  0F20                     	;# 
  2266  0F21                     	;# 
  2267  0F22                     	;# 
  2268  0F23                     	;# 
  2269  0F24                     	;# 
  2270  0F25                     	;# 
  2271  0F26                     	;# 
  2272  0F27                     	;# 
  2273  0F28                     	;# 
  2274  0F29                     	;# 
  2275  0F2A                     	;# 
  2276  0F2B                     	;# 
  2277  0F2C                     	;# 
  2278  0F2D                     	;# 
  2279  0F2E                     	;# 
  2280  0F2F                     	;# 
  2281  0F30                     	;# 
  2282  0F31                     	;# 
  2283  0F32                     	;# 
  2284  0F33                     	;# 
  2285  0F34                     	;# 
  2286  0F35                     	;# 
  2287  0F36                     	;# 
  2288  0F37                     	;# 
  2289  0FE4                     	;# 
  2290  0FE5                     	;# 
  2291  0FE6                     	;# 
  2292  0FE7                     	;# 
  2293  0FE8                     	;# 
  2294  0FE9                     	;# 
  2295  0FEA                     	;# 
  2296  0FEB                     	;# 
  2297  0FED                     	;# 
  2298  0FEE                     	;# 
  2299  0FEF                     	;# 
  2300  0000                     	;# 
  2301  0001                     	;# 
  2302  0002                     	;# 
  2303  0003                     	;# 
  2304  0004                     	;# 
  2305  0005                     	;# 
  2306  0006                     	;# 
  2307  0007                     	;# 
  2308  0008                     	;# 
  2309  0009                     	;# 
  2310  000A                     	;# 
  2311  000B                     	;# 
  2312  000C                     	;# 
  2313  000D                     	;# 
  2314  000E                     	;# 
  2315  0010                     	;# 
  2316  0011                     	;# 
  2317  0012                     	;# 
  2318  0013                     	;# 
  2319  0014                     	;# 
  2320  0015                     	;# 
  2321  0015                     	;# 
  2322  0016                     	;# 
  2323  0016                     	;# 
  2324  0017                     	;# 
  2325  0018                     	;# 
  2326  0019                     	;# 
  2327  0019                     	;# 
  2328  001A                     	;# 
  2329  001B                     	;# 
  2330  001C                     	;# 
  2331  001D                     	;# 
  2332  001E                     	;# 
  2333  001F                     	;# 
  2334  008C                     	;# 
  2335  008D                     	;# 
  2336  008E                     	;# 
  2337  0090                     	;# 
  2338  0091                     	;# 
  2339  0092                     	;# 
  2340  0093                     	;# 
  2341  0094                     	;# 
  2342  0097                     	;# 
  2343  009B                     	;# 
  2344  009B                     	;# 
  2345  009C                     	;# 
  2346  009D                     	;# 
  2347  009E                     	;# 
  2348  009F                     	;# 
  2349  010C                     	;# 
  2350  010D                     	;# 
  2351  010E                     	;# 
  2352  0111                     	;# 
  2353  0112                     	;# 
  2354  0113                     	;# 
  2355  0114                     	;# 
  2356  0115                     	;# 
  2357  0116                     	;# 
  2358  0117                     	;# 
  2359  0118                     	;# 
  2360  0119                     	;# 
  2361  018C                     	;# 
  2362  018D                     	;# 
  2363  018E                     	;# 
  2364  0197                     	;# 
  2365  0199                     	;# 
  2366  0199                     	;# 
  2367  0199                     	;# 
  2368  019A                     	;# 
  2369  019A                     	;# 
  2370  019A                     	;# 
  2371  019B                     	;# 
  2372  019B                     	;# 
  2373  019B                     	;# 
  2374  019B                     	;# 
  2375  019B                     	;# 
  2376  019C                     	;# 
  2377  019C                     	;# 
  2378  019C                     	;# 
  2379  019D                     	;# 
  2380  019D                     	;# 
  2381  019D                     	;# 
  2382  019E                     	;# 
  2383  019E                     	;# 
  2384  019E                     	;# 
  2385  019F                     	;# 
  2386  019F                     	;# 
  2387  019F                     	;# 
  2388  019F                     	;# 
  2389  019F                     	;# 
  2390  020C                     	;# 
  2391  020D                     	;# 
  2392  020E                     	;# 
  2393  0211                     	;# 
  2394  0211                     	;# 
  2395  0212                     	;# 
  2396  0212                     	;# 
  2397  0213                     	;# 
  2398  0213                     	;# 
  2399  0214                     	;# 
  2400  0214                     	;# 
  2401  0215                     	;# 
  2402  0215                     	;# 
  2403  0215                     	;# 
  2404  0215                     	;# 
  2405  0216                     	;# 
  2406  0216                     	;# 
  2407  0217                     	;# 
  2408  0217                     	;# 
  2409  0219                     	;# 
  2410  021A                     	;# 
  2411  021B                     	;# 
  2412  021C                     	;# 
  2413  021D                     	;# 
  2414  021D                     	;# 
  2415  021E                     	;# 
  2416  021F                     	;# 
  2417  028C                     	;# 
  2418  028D                     	;# 
  2419  028E                     	;# 
  2420  0291                     	;# 
  2421  0291                     	;# 
  2422  0292                     	;# 
  2423  0293                     	;# 
  2424  0294                     	;# 
  2425  0295                     	;# 
  2426  0295                     	;# 
  2427  0296                     	;# 
  2428  0297                     	;# 
  2429  0298                     	;# 
  2430  029F                     	;# 
  2431  030C                     	;# 
  2432  030D                     	;# 
  2433  030E                     	;# 
  2434  0311                     	;# 
  2435  0311                     	;# 
  2436  0312                     	;# 
  2437  0313                     	;# 
  2438  0314                     	;# 
  2439  0315                     	;# 
  2440  0315                     	;# 
  2441  0316                     	;# 
  2442  0317                     	;# 
  2443  0318                     	;# 
  2444  038C                     	;# 
  2445  038D                     	;# 
  2446  038E                     	;# 
  2447  0391                     	;# 
  2448  0392                     	;# 
  2449  0393                     	;# 
  2450  0394                     	;# 
  2451  0395                     	;# 
  2452  0396                     	;# 
  2453  0397                     	;# 
  2454  0398                     	;# 
  2455  0399                     	;# 
  2456  039A                     	;# 
  2457  039C                     	;# 
  2458  039D                     	;# 
  2459  039E                     	;# 
  2460  039F                     	;# 
  2461  0411                     	;# 
  2462  0411                     	;# 
  2463  0412                     	;# 
  2464  0413                     	;# 
  2465  0414                     	;# 
  2466  0415                     	;# 
  2467  0416                     	;# 
  2468  0417                     	;# 
  2469  0418                     	;# 
  2470  0418                     	;# 
  2471  0419                     	;# 
  2472  041A                     	;# 
  2473  041B                     	;# 
  2474  041C                     	;# 
  2475  041D                     	;# 
  2476  041E                     	;# 
  2477  041F                     	;# 
  2478  0498                     	;# 
  2479  0498                     	;# 
  2480  0499                     	;# 
  2481  049A                     	;# 
  2482  049B                     	;# 
  2483  049B                     	;# 
  2484  049C                     	;# 
  2485  049D                     	;# 
  2486  049E                     	;# 
  2487  049F                     	;# 
  2488  0617                     	;# 
  2489  0618                     	;# 
  2490  0619                     	;# 
  2491  0619                     	;# 
  2492  061A                     	;# 
  2493  061B                     	;# 
  2494  061C                     	;# 
  2495  061C                     	;# 
  2496  061F                     	;# 
  2497  0691                     	;# 
  2498  0692                     	;# 
  2499  0693                     	;# 
  2500  0694                     	;# 
  2501  0695                     	;# 
  2502  0696                     	;# 
  2503  0697                     	;# 
  2504  0698                     	;# 
  2505  0699                     	;# 
  2506  0711                     	;# 
  2507  0712                     	;# 
  2508  0713                     	;# 
  2509  0714                     	;# 
  2510  0715                     	;# 
  2511  0716                     	;# 
  2512  0717                     	;# 
  2513  0718                     	;# 
  2514  0719                     	;# 
  2515  0891                     	;# 
  2516  0891                     	;# 
  2517  0891                     	;# 
  2518  0891                     	;# 
  2519  0891                     	;# 
  2520  0891                     	;# 
  2521  0892                     	;# 
  2522  0892                     	;# 
  2523  0892                     	;# 
  2524  0893                     	;# 
  2525  0893                     	;# 
  2526  0893                     	;# 
  2527  0893                     	;# 
  2528  0893                     	;# 
  2529  0893                     	;# 
  2530  0894                     	;# 
  2531  0894                     	;# 
  2532  0894                     	;# 
  2533  0895                     	;# 
  2534  0895                     	;# 
  2535  0895                     	;# 
  2536  0896                     	;# 
  2537  0896                     	;# 
  2538  0896                     	;# 
  2539  089B                     	;# 
  2540  0911                     	;# 
  2541  0912                     	;# 
  2542  0913                     	;# 
  2543  0914                     	;# 
  2544  0915                     	;# 
  2545  0916                     	;# 
  2546  0918                     	;# 
  2547  0919                     	;# 
  2548  091A                     	;# 
  2549  091B                     	;# 
  2550  091C                     	;# 
  2551  091D                     	;# 
  2552  091E                     	;# 
  2553  091F                     	;# 
  2554  0E0F                     	;# 
  2555  0E10                     	;# 
  2556  0E11                     	;# 
  2557  0E12                     	;# 
  2558  0E13                     	;# 
  2559  0E14                     	;# 
  2560  0E15                     	;# 
  2561  0E16                     	;# 
  2562  0E17                     	;# 
  2563  0E18                     	;# 
  2564  0E19                     	;# 
  2565  0E1A                     	;# 
  2566  0E1B                     	;# 
  2567  0E1C                     	;# 
  2568  0E1D                     	;# 
  2569  0E1E                     	;# 
  2570  0E1F                     	;# 
  2571  0E20                     	;# 
  2572  0E21                     	;# 
  2573  0E22                     	;# 
  2574  0E24                     	;# 
  2575  0E25                     	;# 
  2576  0E28                     	;# 
  2577  0E29                     	;# 
  2578  0E2A                     	;# 
  2579  0E2B                     	;# 
  2580  0E2C                     	;# 
  2581  0E2D                     	;# 
  2582  0E2E                     	;# 
  2583  0E2F                     	;# 
  2584  0E90                     	;# 
  2585  0E91                     	;# 
  2586  0E92                     	;# 
  2587  0E94                     	;# 
  2588  0E95                     	;# 
  2589  0E9C                     	;# 
  2590  0E9D                     	;# 
  2591  0E9E                     	;# 
  2592  0E9F                     	;# 
  2593  0EA0                     	;# 
  2594  0EA1                     	;# 
  2595  0EA2                     	;# 
  2596  0EA3                     	;# 
  2597  0EA4                     	;# 
  2598  0EA5                     	;# 
  2599  0EA6                     	;# 
  2600  0EA7                     	;# 
  2601  0F0F                     	;# 
  2602  0F10                     	;# 
  2603  0F11                     	;# 
  2604  0F12                     	;# 
  2605  0F13                     	;# 
  2606  0F14                     	;# 
  2607  0F15                     	;# 
  2608  0F16                     	;# 
  2609  0F17                     	;# 
  2610  0F18                     	;# 
  2611  0F19                     	;# 
  2612  0F1A                     	;# 
  2613  0F1B                     	;# 
  2614  0F1C                     	;# 
  2615  0F1D                     	;# 
  2616  0F1E                     	;# 
  2617  0F1F                     	;# 
  2618  0F20                     	;# 
  2619  0F21                     	;# 
  2620  0F22                     	;# 
  2621  0F23                     	;# 
  2622  0F24                     	;# 
  2623  0F25                     	;# 
  2624  0F26                     	;# 
  2625  0F27                     	;# 
  2626  0F28                     	;# 
  2627  0F29                     	;# 
  2628  0F2A                     	;# 
  2629  0F2B                     	;# 
  2630  0F2C                     	;# 
  2631  0F2D                     	;# 
  2632  0F2E                     	;# 
  2633  0F2F                     	;# 
  2634  0F30                     	;# 
  2635  0F31                     	;# 
  2636  0F32                     	;# 
  2637  0F33                     	;# 
  2638  0F34                     	;# 
  2639  0F35                     	;# 
  2640  0F36                     	;# 
  2641  0F37                     	;# 
  2642  0FE4                     	;# 
  2643  0FE5                     	;# 
  2644  0FE6                     	;# 
  2645  0FE7                     	;# 
  2646  0FE8                     	;# 
  2647  0FE9                     	;# 
  2648  0FEA                     	;# 
  2649  0FEB                     	;# 
  2650  0FED                     	;# 
  2651  0FEE                     	;# 
  2652  0FEF                     	;# 
  2653  0000                     	;# 
  2654  0001                     	;# 
  2655  0002                     	;# 
  2656  0003                     	;# 
  2657  0004                     	;# 
  2658  0005                     	;# 
  2659  0006                     	;# 
  2660  0007                     	;# 
  2661  0008                     	;# 
  2662  0009                     	;# 
  2663  000A                     	;# 
  2664  000B                     	;# 
  2665  000C                     	;# 
  2666  000D                     	;# 
  2667  000E                     	;# 
  2668  0010                     	;# 
  2669  0011                     	;# 
  2670  0012                     	;# 
  2671  0013                     	;# 
  2672  0014                     	;# 
  2673  0015                     	;# 
  2674  0015                     	;# 
  2675  0016                     	;# 
  2676  0016                     	;# 
  2677  0017                     	;# 
  2678  0018                     	;# 
  2679  0019                     	;# 
  2680  0019                     	;# 
  2681  001A                     	;# 
  2682  001B                     	;# 
  2683  001C                     	;# 
  2684  001D                     	;# 
  2685  001E                     	;# 
  2686  001F                     	;# 
  2687  008C                     	;# 
  2688  008D                     	;# 
  2689  008E                     	;# 
  2690  0090                     	;# 
  2691  0091                     	;# 
  2692  0092                     	;# 
  2693  0093                     	;# 
  2694  0094                     	;# 
  2695  0097                     	;# 
  2696  009B                     	;# 
  2697  009B                     	;# 
  2698  009C                     	;# 
  2699  009D                     	;# 
  2700  009E                     	;# 
  2701  009F                     	;# 
  2702  010C                     	;# 
  2703  010D                     	;# 
  2704  010E                     	;# 
  2705  0111                     	;# 
  2706  0112                     	;# 
  2707  0113                     	;# 
  2708  0114                     	;# 
  2709  0115                     	;# 
  2710  0116                     	;# 
  2711  0117                     	;# 
  2712  0118                     	;# 
  2713  0119                     	;# 
  2714  018C                     	;# 
  2715  018D                     	;# 
  2716  018E                     	;# 
  2717  0197                     	;# 
  2718  0199                     	;# 
  2719  0199                     	;# 
  2720  0199                     	;# 
  2721  019A                     	;# 
  2722  019A                     	;# 
  2723  019A                     	;# 
  2724  019B                     	;# 
  2725  019B                     	;# 
  2726  019B                     	;# 
  2727  019B                     	;# 
  2728  019B                     	;# 
  2729  019C                     	;# 
  2730  019C                     	;# 
  2731  019C                     	;# 
  2732  019D                     	;# 
  2733  019D                     	;# 
  2734  019D                     	;# 
  2735  019E                     	;# 
  2736  019E                     	;# 
  2737  019E                     	;# 
  2738  019F                     	;# 
  2739  019F                     	;# 
  2740  019F                     	;# 
  2741  019F                     	;# 
  2742  019F                     	;# 
  2743  020C                     	;# 
  2744  020D                     	;# 
  2745  020E                     	;# 
  2746  0211                     	;# 
  2747  0211                     	;# 
  2748  0212                     	;# 
  2749  0212                     	;# 
  2750  0213                     	;# 
  2751  0213                     	;# 
  2752  0214                     	;# 
  2753  0214                     	;# 
  2754  0215                     	;# 
  2755  0215                     	;# 
  2756  0215                     	;# 
  2757  0215                     	;# 
  2758  0216                     	;# 
  2759  0216                     	;# 
  2760  0217                     	;# 
  2761  0217                     	;# 
  2762  0219                     	;# 
  2763  021A                     	;# 
  2764  021B                     	;# 
  2765  021C                     	;# 
  2766  021D                     	;# 
  2767  021D                     	;# 
  2768  021E                     	;# 
  2769  021F                     	;# 
  2770  028C                     	;# 
  2771  028D                     	;# 
  2772  028E                     	;# 
  2773  0291                     	;# 
  2774  0291                     	;# 
  2775  0292                     	;# 
  2776  0293                     	;# 
  2777  0294                     	;# 
  2778  0295                     	;# 
  2779  0295                     	;# 
  2780  0296                     	;# 
  2781  0297                     	;# 
  2782  0298                     	;# 
  2783  029F                     	;# 
  2784  030C                     	;# 
  2785  030D                     	;# 
  2786  030E                     	;# 
  2787  0311                     	;# 
  2788  0311                     	;# 
  2789  0312                     	;# 
  2790  0313                     	;# 
  2791  0314                     	;# 
  2792  0315                     	;# 
  2793  0315                     	;# 
  2794  0316                     	;# 
  2795  0317                     	;# 
  2796  0318                     	;# 
  2797  038C                     	;# 
  2798  038D                     	;# 
  2799  038E                     	;# 
  2800  0391                     	;# 
  2801  0392                     	;# 
  2802  0393                     	;# 
  2803  0394                     	;# 
  2804  0395                     	;# 
  2805  0396                     	;# 
  2806  0397                     	;# 
  2807  0398                     	;# 
  2808  0399                     	;# 
  2809  039A                     	;# 
  2810  039C                     	;# 
  2811  039D                     	;# 
  2812  039E                     	;# 
  2813  039F                     	;# 
  2814  0411                     	;# 
  2815  0411                     	;# 
  2816  0412                     	;# 
  2817  0413                     	;# 
  2818  0414                     	;# 
  2819  0415                     	;# 
  2820  0416                     	;# 
  2821  0417                     	;# 
  2822  0418                     	;# 
  2823  0418                     	;# 
  2824  0419                     	;# 
  2825  041A                     	;# 
  2826  041B                     	;# 
  2827  041C                     	;# 
  2828  041D                     	;# 
  2829  041E                     	;# 
  2830  041F                     	;# 
  2831  0498                     	;# 
  2832  0498                     	;# 
  2833  0499                     	;# 
  2834  049A                     	;# 
  2835  049B                     	;# 
  2836  049B                     	;# 
  2837  049C                     	;# 
  2838  049D                     	;# 
  2839  049E                     	;# 
  2840  049F                     	;# 
  2841  0617                     	;# 
  2842  0618                     	;# 
  2843  0619                     	;# 
  2844  0619                     	;# 
  2845  061A                     	;# 
  2846  061B                     	;# 
  2847  061C                     	;# 
  2848  061C                     	;# 
  2849  061F                     	;# 
  2850  0691                     	;# 
  2851  0692                     	;# 
  2852  0693                     	;# 
  2853  0694                     	;# 
  2854  0695                     	;# 
  2855  0696                     	;# 
  2856  0697                     	;# 
  2857  0698                     	;# 
  2858  0699                     	;# 
  2859  0711                     	;# 
  2860  0712                     	;# 
  2861  0713                     	;# 
  2862  0714                     	;# 
  2863  0715                     	;# 
  2864  0716                     	;# 
  2865  0717                     	;# 
  2866  0718                     	;# 
  2867  0719                     	;# 
  2868  0891                     	;# 
  2869  0891                     	;# 
  2870  0891                     	;# 
  2871  0891                     	;# 
  2872  0891                     	;# 
  2873  0891                     	;# 
  2874  0892                     	;# 
  2875  0892                     	;# 
  2876  0892                     	;# 
  2877  0893                     	;# 
  2878  0893                     	;# 
  2879  0893                     	;# 
  2880  0893                     	;# 
  2881  0893                     	;# 
  2882  0893                     	;# 
  2883  0894                     	;# 
  2884  0894                     	;# 
  2885  0894                     	;# 
  2886  0895                     	;# 
  2887  0895                     	;# 
  2888  0895                     	;# 
  2889  0896                     	;# 
  2890  0896                     	;# 
  2891  0896                     	;# 
  2892  089B                     	;# 
  2893  0911                     	;# 
  2894  0912                     	;# 
  2895  0913                     	;# 
  2896  0914                     	;# 
  2897  0915                     	;# 
  2898  0916                     	;# 
  2899  0918                     	;# 
  2900  0919                     	;# 
  2901  091A                     	;# 
  2902  091B                     	;# 
  2903  091C                     	;# 
  2904  091D                     	;# 
  2905  091E                     	;# 
  2906  091F                     	;# 
  2907  0E0F                     	;# 
  2908  0E10                     	;# 
  2909  0E11                     	;# 
  2910  0E12                     	;# 
  2911  0E13                     	;# 
  2912  0E14                     	;# 
  2913  0E15                     	;# 
  2914  0E16                     	;# 
  2915  0E17                     	;# 
  2916  0E18                     	;# 
  2917  0E19                     	;# 
  2918  0E1A                     	;# 
  2919  0E1B                     	;# 
  2920  0E1C                     	;# 
  2921  0E1D                     	;# 
  2922  0E1E                     	;# 
  2923  0E1F                     	;# 
  2924  0E20                     	;# 
  2925  0E21                     	;# 
  2926  0E22                     	;# 
  2927  0E24                     	;# 
  2928  0E25                     	;# 
  2929  0E28                     	;# 
  2930  0E29                     	;# 
  2931  0E2A                     	;# 
  2932  0E2B                     	;# 
  2933  0E2C                     	;# 
  2934  0E2D                     	;# 
  2935  0E2E                     	;# 
  2936  0E2F                     	;# 
  2937  0E90                     	;# 
  2938  0E91                     	;# 
  2939  0E92                     	;# 
  2940  0E94                     	;# 
  2941  0E95                     	;# 
  2942  0E9C                     	;# 
  2943  0E9D                     	;# 
  2944  0E9E                     	;# 
  2945  0E9F                     	;# 
  2946  0EA0                     	;# 
  2947  0EA1                     	;# 
  2948  0EA2                     	;# 
  2949  0EA3                     	;# 
  2950  0EA4                     	;# 
  2951  0EA5                     	;# 
  2952  0EA6                     	;# 
  2953  0EA7                     	;# 
  2954  0F0F                     	;# 
  2955  0F10                     	;# 
  2956  0F11                     	;# 
  2957  0F12                     	;# 
  2958  0F13                     	;# 
  2959  0F14                     	;# 
  2960  0F15                     	;# 
  2961  0F16                     	;# 
  2962  0F17                     	;# 
  2963  0F18                     	;# 
  2964  0F19                     	;# 
  2965  0F1A                     	;# 
  2966  0F1B                     	;# 
  2967  0F1C                     	;# 
  2968  0F1D                     	;# 
  2969  0F1E                     	;# 
  2970  0F1F                     	;# 
  2971  0F20                     	;# 
  2972  0F21                     	;# 
  2973  0F22                     	;# 
  2974  0F23                     	;# 
  2975  0F24                     	;# 
  2976  0F25                     	;# 
  2977  0F26                     	;# 
  2978  0F27                     	;# 
  2979  0F28                     	;# 
  2980  0F29                     	;# 
  2981  0F2A                     	;# 
  2982  0F2B                     	;# 
  2983  0F2C                     	;# 
  2984  0F2D                     	;# 
  2985  0F2E                     	;# 
  2986  0F2F                     	;# 
  2987  0F30                     	;# 
  2988  0F31                     	;# 
  2989  0F32                     	;# 
  2990  0F33                     	;# 
  2991  0F34                     	;# 
  2992  0F35                     	;# 
  2993  0F36                     	;# 
  2994  0F37                     	;# 
  2995  0FE4                     	;# 
  2996  0FE5                     	;# 
  2997  0FE6                     	;# 
  2998  0FE7                     	;# 
  2999  0FE8                     	;# 
  3000  0FE9                     	;# 
  3001  0FEA                     	;# 
  3002  0FEB                     	;# 
  3003  0FED                     	;# 
  3004  0FEE                     	;# 
  3005  0FEF                     	;# 
  3006  0000                     	;# 
  3007  0001                     	;# 
  3008  0002                     	;# 
  3009  0003                     	;# 
  3010  0004                     	;# 
  3011  0005                     	;# 
  3012  0006                     	;# 
  3013  0007                     	;# 
  3014  0008                     	;# 
  3015  0009                     	;# 
  3016  000A                     	;# 
  3017  000B                     	;# 
  3018  000C                     	;# 
  3019  000D                     	;# 
  3020  000E                     	;# 
  3021  0010                     	;# 
  3022  0011                     	;# 
  3023  0012                     	;# 
  3024  0013                     	;# 
  3025  0014                     	;# 
  3026  0015                     	;# 
  3027  0015                     	;# 
  3028  0016                     	;# 
  3029  0016                     	;# 
  3030  0017                     	;# 
  3031  0018                     	;# 
  3032  0019                     	;# 
  3033  0019                     	;# 
  3034  001A                     	;# 
  3035  001B                     	;# 
  3036  001C                     	;# 
  3037  001D                     	;# 
  3038  001E                     	;# 
  3039  001F                     	;# 
  3040  008C                     	;# 
  3041  008D                     	;# 
  3042  008E                     	;# 
  3043  0090                     	;# 
  3044  0091                     	;# 
  3045  0092                     	;# 
  3046  0093                     	;# 
  3047  0094                     	;# 
  3048  0097                     	;# 
  3049  009B                     	;# 
  3050  009B                     	;# 
  3051  009C                     	;# 
  3052  009D                     	;# 
  3053  009E                     	;# 
  3054  009F                     	;# 
  3055  010C                     	;# 
  3056  010D                     	;# 
  3057  010E                     	;# 
  3058  0111                     	;# 
  3059  0112                     	;# 
  3060  0113                     	;# 
  3061  0114                     	;# 
  3062  0115                     	;# 
  3063  0116                     	;# 
  3064  0117                     	;# 
  3065  0118                     	;# 
  3066  0119                     	;# 
  3067  018C                     	;# 
  3068  018D                     	;# 
  3069  018E                     	;# 
  3070  0197                     	;# 
  3071  0199                     	;# 
  3072  0199                     	;# 
  3073  0199                     	;# 
  3074  019A                     	;# 
  3075  019A                     	;# 
  3076  019A                     	;# 
  3077  019B                     	;# 
  3078  019B                     	;# 
  3079  019B                     	;# 
  3080  019B                     	;# 
  3081  019B                     	;# 
  3082  019C                     	;# 
  3083  019C                     	;# 
  3084  019C                     	;# 
  3085  019D                     	;# 
  3086  019D                     	;# 
  3087  019D                     	;# 
  3088  019E                     	;# 
  3089  019E                     	;# 
  3090  019E                     	;# 
  3091  019F                     	;# 
  3092  019F                     	;# 
  3093  019F                     	;# 
  3094  019F                     	;# 
  3095  019F                     	;# 
  3096  020C                     	;# 
  3097  020D                     	;# 
  3098  020E                     	;# 
  3099  0211                     	;# 
  3100  0211                     	;# 
  3101  0212                     	;# 
  3102  0212                     	;# 
  3103  0213                     	;# 
  3104  0213                     	;# 
  3105  0214                     	;# 
  3106  0214                     	;# 
  3107  0215                     	;# 
  3108  0215                     	;# 
  3109  0215                     	;# 
  3110  0215                     	;# 
  3111  0216                     	;# 
  3112  0216                     	;# 
  3113  0217                     	;# 
  3114  0217                     	;# 
  3115  0219                     	;# 
  3116  021A                     	;# 
  3117  021B                     	;# 
  3118  021C                     	;# 
  3119  021D                     	;# 
  3120  021D                     	;# 
  3121  021E                     	;# 
  3122  021F                     	;# 
  3123  028C                     	;# 
  3124  028D                     	;# 
  3125  028E                     	;# 
  3126  0291                     	;# 
  3127  0291                     	;# 
  3128  0292                     	;# 
  3129  0293                     	;# 
  3130  0294                     	;# 
  3131  0295                     	;# 
  3132  0295                     	;# 
  3133  0296                     	;# 
  3134  0297                     	;# 
  3135  0298                     	;# 
  3136  029F                     	;# 
  3137  030C                     	;# 
  3138  030D                     	;# 
  3139  030E                     	;# 
  3140  0311                     	;# 
  3141  0311                     	;# 
  3142  0312                     	;# 
  3143  0313                     	;# 
  3144  0314                     	;# 
  3145  0315                     	;# 
  3146  0315                     	;# 
  3147  0316                     	;# 
  3148  0317                     	;# 
  3149  0318                     	;# 
  3150  038C                     	;# 
  3151  038D                     	;# 
  3152  038E                     	;# 
  3153  0391                     	;# 
  3154  0392                     	;# 
  3155  0393                     	;# 
  3156  0394                     	;# 
  3157  0395                     	;# 
  3158  0396                     	;# 
  3159  0397                     	;# 
  3160  0398                     	;# 
  3161  0399                     	;# 
  3162  039A                     	;# 
  3163  039C                     	;# 
  3164  039D                     	;# 
  3165  039E                     	;# 
  3166  039F                     	;# 
  3167  0411                     	;# 
  3168  0411                     	;# 
  3169  0412                     	;# 
  3170  0413                     	;# 
  3171  0414                     	;# 
  3172  0415                     	;# 
  3173  0416                     	;# 
  3174  0417                     	;# 
  3175  0418                     	;# 
  3176  0418                     	;# 
  3177  0419                     	;# 
  3178  041A                     	;# 
  3179  041B                     	;# 
  3180  041C                     	;# 
  3181  041D                     	;# 
  3182  041E                     	;# 
  3183  041F                     	;# 
  3184  0498                     	;# 
  3185  0498                     	;# 
  3186  0499                     	;# 
  3187  049A                     	;# 
  3188  049B                     	;# 
  3189  049B                     	;# 
  3190  049C                     	;# 
  3191  049D                     	;# 
  3192  049E                     	;# 
  3193  049F                     	;# 
  3194  0617                     	;# 
  3195  0618                     	;# 
  3196  0619                     	;# 
  3197  0619                     	;# 
  3198  061A                     	;# 
  3199  061B                     	;# 
  3200  061C                     	;# 
  3201  061C                     	;# 
  3202  061F                     	;# 
  3203  0691                     	;# 
  3204  0692                     	;# 
  3205  0693                     	;# 
  3206  0694                     	;# 
  3207  0695                     	;# 
  3208  0696                     	;# 
  3209  0697                     	;# 
  3210  0698                     	;# 
  3211  0699                     	;# 
  3212  0711                     	;# 
  3213  0712                     	;# 
  3214  0713                     	;# 
  3215  0714                     	;# 
  3216  0715                     	;# 
  3217  0716                     	;# 
  3218  0717                     	;# 
  3219  0718                     	;# 
  3220  0719                     	;# 
  3221  0891                     	;# 
  3222  0891                     	;# 
  3223  0891                     	;# 
  3224  0891                     	;# 
  3225  0891                     	;# 
  3226  0891                     	;# 
  3227  0892                     	;# 
  3228  0892                     	;# 
  3229  0892                     	;# 
  3230  0893                     	;# 
  3231  0893                     	;# 
  3232  0893                     	;# 
  3233  0893                     	;# 
  3234  0893                     	;# 
  3235  0893                     	;# 
  3236  0894                     	;# 
  3237  0894                     	;# 
  3238  0894                     	;# 
  3239  0895                     	;# 
  3240  0895                     	;# 
  3241  0895                     	;# 
  3242  0896                     	;# 
  3243  0896                     	;# 
  3244  0896                     	;# 
  3245  089B                     	;# 
  3246  0911                     	;# 
  3247  0912                     	;# 
  3248  0913                     	;# 
  3249  0914                     	;# 
  3250  0915                     	;# 
  3251  0916                     	;# 
  3252  0918                     	;# 
  3253  0919                     	;# 
  3254  091A                     	;# 
  3255  091B                     	;# 
  3256  091C                     	;# 
  3257  091D                     	;# 
  3258  091E                     	;# 
  3259  091F                     	;# 
  3260  0E0F                     	;# 
  3261  0E10                     	;# 
  3262  0E11                     	;# 
  3263  0E12                     	;# 
  3264  0E13                     	;# 
  3265  0E14                     	;# 
  3266  0E15                     	;# 
  3267  0E16                     	;# 
  3268  0E17                     	;# 
  3269  0E18                     	;# 
  3270  0E19                     	;# 
  3271  0E1A                     	;# 
  3272  0E1B                     	;# 
  3273  0E1C                     	;# 
  3274  0E1D                     	;# 
  3275  0E1E                     	;# 
  3276  0E1F                     	;# 
  3277  0E20                     	;# 
  3278  0E21                     	;# 
  3279  0E22                     	;# 
  3280  0E24                     	;# 
  3281  0E25                     	;# 
  3282  0E28                     	;# 
  3283  0E29                     	;# 
  3284  0E2A                     	;# 
  3285  0E2B                     	;# 
  3286  0E2C                     	;# 
  3287  0E2D                     	;# 
  3288  0E2E                     	;# 
  3289  0E2F                     	;# 
  3290  0E90                     	;# 
  3291  0E91                     	;# 
  3292  0E92                     	;# 
  3293  0E94                     	;# 
  3294  0E95                     	;# 
  3295  0E9C                     	;# 
  3296  0E9D                     	;# 
  3297  0E9E                     	;# 
  3298  0E9F                     	;# 
  3299  0EA0                     	;# 
  3300  0EA1                     	;# 
  3301  0EA2                     	;# 
  3302  0EA3                     	;# 
  3303  0EA4                     	;# 
  3304  0EA5                     	;# 
  3305  0EA6                     	;# 
  3306  0EA7                     	;# 
  3307  0F0F                     	;# 
  3308  0F10                     	;# 
  3309  0F11                     	;# 
  3310  0F12                     	;# 
  3311  0F13                     	;# 
  3312  0F14                     	;# 
  3313  0F15                     	;# 
  3314  0F16                     	;# 
  3315  0F17                     	;# 
  3316  0F18                     	;# 
  3317  0F19                     	;# 
  3318  0F1A                     	;# 
  3319  0F1B                     	;# 
  3320  0F1C                     	;# 
  3321  0F1D                     	;# 
  3322  0F1E                     	;# 
  3323  0F1F                     	;# 
  3324  0F20                     	;# 
  3325  0F21                     	;# 
  3326  0F22                     	;# 
  3327  0F23                     	;# 
  3328  0F24                     	;# 
  3329  0F25                     	;# 
  3330  0F26                     	;# 
  3331  0F27                     	;# 
  3332  0F28                     	;# 
  3333  0F29                     	;# 
  3334  0F2A                     	;# 
  3335  0F2B                     	;# 
  3336  0F2C                     	;# 
  3337  0F2D                     	;# 
  3338  0F2E                     	;# 
  3339  0F2F                     	;# 
  3340  0F30                     	;# 
  3341  0F31                     	;# 
  3342  0F32                     	;# 
  3343  0F33                     	;# 
  3344  0F34                     	;# 
  3345  0F35                     	;# 
  3346  0F36                     	;# 
  3347  0F37                     	;# 
  3348  0FE4                     	;# 
  3349  0FE5                     	;# 
  3350  0FE6                     	;# 
  3351  0FE7                     	;# 
  3352  0FE8                     	;# 
  3353  0FE9                     	;# 
  3354  0FEA                     	;# 
  3355  0FEB                     	;# 
  3356  0FED                     	;# 
  3357  0FEE                     	;# 
  3358  0FEF                     	;# 
  3359  0000                     	;# 
  3360  0001                     	;# 
  3361  0002                     	;# 
  3362  0003                     	;# 
  3363  0004                     	;# 
  3364  0005                     	;# 
  3365  0006                     	;# 
  3366  0007                     	;# 
  3367  0008                     	;# 
  3368  0009                     	;# 
  3369  000A                     	;# 
  3370  000B                     	;# 
  3371  000C                     	;# 
  3372  000D                     	;# 
  3373  000E                     	;# 
  3374  0010                     	;# 
  3375  0011                     	;# 
  3376  0012                     	;# 
  3377  0013                     	;# 
  3378  0014                     	;# 
  3379  0015                     	;# 
  3380  0015                     	;# 
  3381  0016                     	;# 
  3382  0016                     	;# 
  3383  0017                     	;# 
  3384  0018                     	;# 
  3385  0019                     	;# 
  3386  0019                     	;# 
  3387  001A                     	;# 
  3388  001B                     	;# 
  3389  001C                     	;# 
  3390  001D                     	;# 
  3391  001E                     	;# 
  3392  001F                     	;# 
  3393  008C                     	;# 
  3394  008D                     	;# 
  3395  008E                     	;# 
  3396  0090                     	;# 
  3397  0091                     	;# 
  3398  0092                     	;# 
  3399  0093                     	;# 
  3400  0094                     	;# 
  3401  0097                     	;# 
  3402  009B                     	;# 
  3403  009B                     	;# 
  3404  009C                     	;# 
  3405  009D                     	;# 
  3406  009E                     	;# 
  3407  009F                     	;# 
  3408  010C                     	;# 
  3409  010D                     	;# 
  3410  010E                     	;# 
  3411  0111                     	;# 
  3412  0112                     	;# 
  3413  0113                     	;# 
  3414  0114                     	;# 
  3415  0115                     	;# 
  3416  0116                     	;# 
  3417  0117                     	;# 
  3418  0118                     	;# 
  3419  0119                     	;# 
  3420  018C                     	;# 
  3421  018D                     	;# 
  3422  018E                     	;# 
  3423  0197                     	;# 
  3424  0199                     	;# 
  3425  0199                     	;# 
  3426  0199                     	;# 
  3427  019A                     	;# 
  3428  019A                     	;# 
  3429  019A                     	;# 
  3430  019B                     	;# 
  3431  019B                     	;# 
  3432  019B                     	;# 
  3433  019B                     	;# 
  3434  019B                     	;# 
  3435  019C                     	;# 
  3436  019C                     	;# 
  3437  019C                     	;# 
  3438  019D                     	;# 
  3439  019D                     	;# 
  3440  019D                     	;# 
  3441  019E                     	;# 
  3442  019E                     	;# 
  3443  019E                     	;# 
  3444  019F                     	;# 
  3445  019F                     	;# 
  3446  019F                     	;# 
  3447  019F                     	;# 
  3448  019F                     	;# 
  3449  020C                     	;# 
  3450  020D                     	;# 
  3451  020E                     	;# 
  3452  0211                     	;# 
  3453  0211                     	;# 
  3454  0212                     	;# 
  3455  0212                     	;# 
  3456  0213                     	;# 
  3457  0213                     	;# 
  3458  0214                     	;# 
  3459  0214                     	;# 
  3460  0215                     	;# 
  3461  0215                     	;# 
  3462  0215                     	;# 
  3463  0215                     	;# 
  3464  0216                     	;# 
  3465  0216                     	;# 
  3466  0217                     	;# 
  3467  0217                     	;# 
  3468  0219                     	;# 
  3469  021A                     	;# 
  3470  021B                     	;# 
  3471  021C                     	;# 
  3472  021D                     	;# 
  3473  021D                     	;# 
  3474  021E                     	;# 
  3475  021F                     	;# 
  3476  028C                     	;# 
  3477  028D                     	;# 
  3478  028E                     	;# 
  3479  0291                     	;# 
  3480  0291                     	;# 
  3481  0292                     	;# 
  3482  0293                     	;# 
  3483  0294                     	;# 
  3484  0295                     	;# 
  3485  0295                     	;# 
  3486  0296                     	;# 
  3487  0297                     	;# 
  3488  0298                     	;# 
  3489  029F                     	;# 
  3490  030C                     	;# 
  3491  030D                     	;# 
  3492  030E                     	;# 
  3493  0311                     	;# 
  3494  0311                     	;# 
  3495  0312                     	;# 
  3496  0313                     	;# 
  3497  0314                     	;# 
  3498  0315                     	;# 
  3499  0315                     	;# 
  3500  0316                     	;# 
  3501  0317                     	;# 
  3502  0318                     	;# 
  3503  038C                     	;# 
  3504  038D                     	;# 
  3505  038E                     	;# 
  3506  0391                     	;# 
  3507  0392                     	;# 
  3508  0393                     	;# 
  3509  0394                     	;# 
  3510  0395                     	;# 
  3511  0396                     	;# 
  3512  0397                     	;# 
  3513  0398                     	;# 
  3514  0399                     	;# 
  3515  039A                     	;# 
  3516  039C                     	;# 
  3517  039D                     	;# 
  3518  039E                     	;# 
  3519  039F                     	;# 
  3520  0411                     	;# 
  3521  0411                     	;# 
  3522  0412                     	;# 
  3523  0413                     	;# 
  3524  0414                     	;# 
  3525  0415                     	;# 
  3526  0416                     	;# 
  3527  0417                     	;# 
  3528  0418                     	;# 
  3529  0418                     	;# 
  3530  0419                     	;# 
  3531  041A                     	;# 
  3532  041B                     	;# 
  3533  041C                     	;# 
  3534  041D                     	;# 
  3535  041E                     	;# 
  3536  041F                     	;# 
  3537  0498                     	;# 
  3538  0498                     	;# 
  3539  0499                     	;# 
  3540  049A                     	;# 
  3541  049B                     	;# 
  3542  049B                     	;# 
  3543  049C                     	;# 
  3544  049D                     	;# 
  3545  049E                     	;# 
  3546  049F                     	;# 
  3547  0617                     	;# 
  3548  0618                     	;# 
  3549  0619                     	;# 
  3550  0619                     	;# 
  3551  061A                     	;# 
  3552  061B                     	;# 
  3553  061C                     	;# 
  3554  061C                     	;# 
  3555  061F                     	;# 
  3556  0691                     	;# 
  3557  0692                     	;# 
  3558  0693                     	;# 
  3559  0694                     	;# 
  3560  0695                     	;# 
  3561  0696                     	;# 
  3562  0697                     	;# 
  3563  0698                     	;# 
  3564  0699                     	;# 
  3565  0711                     	;# 
  3566  0712                     	;# 
  3567  0713                     	;# 
  3568  0714                     	;# 
  3569  0715                     	;# 
  3570  0716                     	;# 
  3571  0717                     	;# 
  3572  0718                     	;# 
  3573  0719                     	;# 
  3574  0891                     	;# 
  3575  0891                     	;# 
  3576  0891                     	;# 
  3577  0891                     	;# 
  3578  0891                     	;# 
  3579  0891                     	;# 
  3580  0892                     	;# 
  3581  0892                     	;# 
  3582  0892                     	;# 
  3583  0893                     	;# 
  3584  0893                     	;# 
  3585  0893                     	;# 
  3586  0893                     	;# 
  3587  0893                     	;# 
  3588  0893                     	;# 
  3589  0894                     	;# 
  3590  0894                     	;# 
  3591  0894                     	;# 
  3592  0895                     	;# 
  3593  0895                     	;# 
  3594  0895                     	;# 
  3595  0896                     	;# 
  3596  0896                     	;# 
  3597  0896                     	;# 
  3598  089B                     	;# 
  3599  0911                     	;# 
  3600  0912                     	;# 
  3601  0913                     	;# 
  3602  0914                     	;# 
  3603  0915                     	;# 
  3604  0916                     	;# 
  3605  0918                     	;# 
  3606  0919                     	;# 
  3607  091A                     	;# 
  3608  091B                     	;# 
  3609  091C                     	;# 
  3610  091D                     	;# 
  3611  091E                     	;# 
  3612  091F                     	;# 
  3613  0E0F                     	;# 
  3614  0E10                     	;# 
  3615  0E11                     	;# 
  3616  0E12                     	;# 
  3617  0E13                     	;# 
  3618  0E14                     	;# 
  3619  0E15                     	;# 
  3620  0E16                     	;# 
  3621  0E17                     	;# 
  3622  0E18                     	;# 
  3623  0E19                     	;# 
  3624  0E1A                     	;# 
  3625  0E1B                     	;# 
  3626  0E1C                     	;# 
  3627  0E1D                     	;# 
  3628  0E1E                     	;# 
  3629  0E1F                     	;# 
  3630  0E20                     	;# 
  3631  0E21                     	;# 
  3632  0E22                     	;# 
  3633  0E24                     	;# 
  3634  0E25                     	;# 
  3635  0E28                     	;# 
  3636  0E29                     	;# 
  3637  0E2A                     	;# 
  3638  0E2B                     	;# 
  3639  0E2C                     	;# 
  3640  0E2D                     	;# 
  3641  0E2E                     	;# 
  3642  0E2F                     	;# 
  3643  0E90                     	;# 
  3644  0E91                     	;# 
  3645  0E92                     	;# 
  3646  0E94                     	;# 
  3647  0E95                     	;# 
  3648  0E9C                     	;# 
  3649  0E9D                     	;# 
  3650  0E9E                     	;# 
  3651  0E9F                     	;# 
  3652  0EA0                     	;# 
  3653  0EA1                     	;# 
  3654  0EA2                     	;# 
  3655  0EA3                     	;# 
  3656  0EA4                     	;# 
  3657  0EA5                     	;# 
  3658  0EA6                     	;# 
  3659  0EA7                     	;# 
  3660  0F0F                     	;# 
  3661  0F10                     	;# 
  3662  0F11                     	;# 
  3663  0F12                     	;# 
  3664  0F13                     	;# 
  3665  0F14                     	;# 
  3666  0F15                     	;# 
  3667  0F16                     	;# 
  3668  0F17                     	;# 
  3669  0F18                     	;# 
  3670  0F19                     	;# 
  3671  0F1A                     	;# 
  3672  0F1B                     	;# 
  3673  0F1C                     	;# 
  3674  0F1D                     	;# 
  3675  0F1E                     	;# 
  3676  0F1F                     	;# 
  3677  0F20                     	;# 
  3678  0F21                     	;# 
  3679  0F22                     	;# 
  3680  0F23                     	;# 
  3681  0F24                     	;# 
  3682  0F25                     	;# 
  3683  0F26                     	;# 
  3684  0F27                     	;# 
  3685  0F28                     	;# 
  3686  0F29                     	;# 
  3687  0F2A                     	;# 
  3688  0F2B                     	;# 
  3689  0F2C                     	;# 
  3690  0F2D                     	;# 
  3691  0F2E                     	;# 
  3692  0F2F                     	;# 
  3693  0F30                     	;# 
  3694  0F31                     	;# 
  3695  0F32                     	;# 
  3696  0F33                     	;# 
  3697  0F34                     	;# 
  3698  0F35                     	;# 
  3699  0F36                     	;# 
  3700  0F37                     	;# 
  3701  0FE4                     	;# 
  3702  0FE5                     	;# 
  3703  0FE6                     	;# 
  3704  0FE7                     	;# 
  3705  0FE8                     	;# 
  3706  0FE9                     	;# 
  3707  0FEA                     	;# 
  3708  0FEB                     	;# 
  3709  0FED                     	;# 
  3710  0FEE                     	;# 
  3711  0FEF                     	;# 
  3712  0000                     	;# 
  3713  0001                     	;# 
  3714  0002                     	;# 
  3715  0003                     	;# 
  3716  0004                     	;# 
  3717  0005                     	;# 
  3718  0006                     	;# 
  3719  0007                     	;# 
  3720  0008                     	;# 
  3721  0009                     	;# 
  3722  000A                     	;# 
  3723  000B                     	;# 
  3724  000C                     	;# 
  3725  000D                     	;# 
  3726  000E                     	;# 
  3727  0010                     	;# 
  3728  0011                     	;# 
  3729  0012                     	;# 
  3730  0013                     	;# 
  3731  0014                     	;# 
  3732  0015                     	;# 
  3733  0015                     	;# 
  3734  0016                     	;# 
  3735  0016                     	;# 
  3736  0017                     	;# 
  3737  0018                     	;# 
  3738  0019                     	;# 
  3739  0019                     	;# 
  3740  001A                     	;# 
  3741  001B                     	;# 
  3742  001C                     	;# 
  3743  001D                     	;# 
  3744  001E                     	;# 
  3745  001F                     	;# 
  3746  008C                     	;# 
  3747  008D                     	;# 
  3748  008E                     	;# 
  3749  0090                     	;# 
  3750  0091                     	;# 
  3751  0092                     	;# 
  3752  0093                     	;# 
  3753  0094                     	;# 
  3754  0097                     	;# 
  3755  009B                     	;# 
  3756  009B                     	;# 
  3757  009C                     	;# 
  3758  009D                     	;# 
  3759  009E                     	;# 
  3760  009F                     	;# 
  3761  010C                     	;# 
  3762  010D                     	;# 
  3763  010E                     	;# 
  3764  0111                     	;# 
  3765  0112                     	;# 
  3766  0113                     	;# 
  3767  0114                     	;# 
  3768  0115                     	;# 
  3769  0116                     	;# 
  3770  0117                     	;# 
  3771  0118                     	;# 
  3772  0119                     	;# 
  3773  018C                     	;# 
  3774  018D                     	;# 
  3775  018E                     	;# 
  3776  0197                     	;# 
  3777  0199                     	;# 
  3778  0199                     	;# 
  3779  0199                     	;# 
  3780  019A                     	;# 
  3781  019A                     	;# 
  3782  019A                     	;# 
  3783  019B                     	;# 
  3784  019B                     	;# 
  3785  019B                     	;# 
  3786  019B                     	;# 
  3787  019B                     	;# 
  3788  019C                     	;# 
  3789  019C                     	;# 
  3790  019C                     	;# 
  3791  019D                     	;# 
  3792  019D                     	;# 
  3793  019D                     	;# 
  3794  019E                     	;# 
  3795  019E                     	;# 
  3796  019E                     	;# 
  3797  019F                     	;# 
  3798  019F                     	;# 
  3799  019F                     	;# 
  3800  019F                     	;# 
  3801  019F                     	;# 
  3802  020C                     	;# 
  3803  020D                     	;# 
  3804  020E                     	;# 
  3805  0211                     	;# 
  3806  0211                     	;# 
  3807  0212                     	;# 
  3808  0212                     	;# 
  3809  0213                     	;# 
  3810  0213                     	;# 
  3811  0214                     	;# 
  3812  0214                     	;# 
  3813  0215                     	;# 
  3814  0215                     	;# 
  3815  0215                     	;# 
  3816  0215                     	;# 
  3817  0216                     	;# 
  3818  0216                     	;# 
  3819  0217                     	;# 
  3820  0217                     	;# 
  3821  0219                     	;# 
  3822  021A                     	;# 
  3823  021B                     	;# 
  3824  021C                     	;# 
  3825  021D                     	;# 
  3826  021D                     	;# 
  3827  021E                     	;# 
  3828  021F                     	;# 
  3829  028C                     	;# 
  3830  028D                     	;# 
  3831  028E                     	;# 
  3832  0291                     	;# 
  3833  0291                     	;# 
  3834  0292                     	;# 
  3835  0293                     	;# 
  3836  0294                     	;# 
  3837  0295                     	;# 
  3838  0295                     	;# 
  3839  0296                     	;# 
  3840  0297                     	;# 
  3841  0298                     	;# 
  3842  029F                     	;# 
  3843  030C                     	;# 
  3844  030D                     	;# 
  3845  030E                     	;# 
  3846  0311                     	;# 
  3847  0311                     	;# 
  3848  0312                     	;# 
  3849  0313                     	;# 
  3850  0314                     	;# 
  3851  0315                     	;# 
  3852  0315                     	;# 
  3853  0316                     	;# 
  3854  0317                     	;# 
  3855  0318                     	;# 
  3856  038C                     	;# 
  3857  038D                     	;# 
  3858  038E                     	;# 
  3859  0391                     	;# 
  3860  0392                     	;# 
  3861  0393                     	;# 
  3862  0394                     	;# 
  3863  0395                     	;# 
  3864  0396                     	;# 
  3865  0397                     	;# 
  3866  0398                     	;# 
  3867  0399                     	;# 
  3868  039A                     	;# 
  3869  039C                     	;# 
  3870  039D                     	;# 
  3871  039E                     	;# 
  3872  039F                     	;# 
  3873  0411                     	;# 
  3874  0411                     	;# 
  3875  0412                     	;# 
  3876  0413                     	;# 
  3877  0414                     	;# 
  3878  0415                     	;# 
  3879  0416                     	;# 
  3880  0417                     	;# 
  3881  0418                     	;# 
  3882  0418                     	;# 
  3883  0419                     	;# 
  3884  041A                     	;# 
  3885  041B                     	;# 
  3886  041C                     	;# 
  3887  041D                     	;# 
  3888  041E                     	;# 
  3889  041F                     	;# 
  3890  0498                     	;# 
  3891  0498                     	;# 
  3892  0499                     	;# 
  3893  049A                     	;# 
  3894  049B                     	;# 
  3895  049B                     	;# 
  3896  049C                     	;# 
  3897  049D                     	;# 
  3898  049E                     	;# 
  3899  049F                     	;# 
  3900  0617                     	;# 
  3901  0618                     	;# 
  3902  0619                     	;# 
  3903  0619                     	;# 
  3904  061A                     	;# 
  3905  061B                     	;# 
  3906  061C                     	;# 
  3907  061C                     	;# 
  3908  061F                     	;# 
  3909  0691                     	;# 
  3910  0692                     	;# 
  3911  0693                     	;# 
  3912  0694                     	;# 
  3913  0695                     	;# 
  3914  0696                     	;# 
  3915  0697                     	;# 
  3916  0698                     	;# 
  3917  0699                     	;# 
  3918  0711                     	;# 
  3919  0712                     	;# 
  3920  0713                     	;# 
  3921  0714                     	;# 
  3922  0715                     	;# 
  3923  0716                     	;# 
  3924  0717                     	;# 
  3925  0718                     	;# 
  3926  0719                     	;# 
  3927  0891                     	;# 
  3928  0891                     	;# 
  3929  0891                     	;# 
  3930  0891                     	;# 
  3931  0891                     	;# 
  3932  0891                     	;# 
  3933  0892                     	;# 
  3934  0892                     	;# 
  3935  0892                     	;# 
  3936  0893                     	;# 
  3937  0893                     	;# 
  3938  0893                     	;# 
  3939  0893                     	;# 
  3940  0893                     	;# 
  3941  0893                     	;# 
  3942  0894                     	;# 
  3943  0894                     	;# 
  3944  0894                     	;# 
  3945  0895                     	;# 
  3946  0895                     	;# 
  3947  0895                     	;# 
  3948  0896                     	;# 
  3949  0896                     	;# 
  3950  0896                     	;# 
  3951  089B                     	;# 
  3952  0911                     	;# 
  3953  0912                     	;# 
  3954  0913                     	;# 
  3955  0914                     	;# 
  3956  0915                     	;# 
  3957  0916                     	;# 
  3958  0918                     	;# 
  3959  0919                     	;# 
  3960  091A                     	;# 
  3961  091B                     	;# 
  3962  091C                     	;# 
  3963  091D                     	;# 
  3964  091E                     	;# 
  3965  091F                     	;# 
  3966  0E0F                     	;# 
  3967  0E10                     	;# 
  3968  0E11                     	;# 
  3969  0E12                     	;# 
  3970  0E13                     	;# 
  3971  0E14                     	;# 
  3972  0E15                     	;# 
  3973  0E16                     	;# 
  3974  0E17                     	;# 
  3975  0E18                     	;# 
  3976  0E19                     	;# 
  3977  0E1A                     	;# 
  3978  0E1B                     	;# 
  3979  0E1C                     	;# 
  3980  0E1D                     	;# 
  3981  0E1E                     	;# 
  3982  0E1F                     	;# 
  3983  0E20                     	;# 
  3984  0E21                     	;# 
  3985  0E22                     	;# 
  3986  0E24                     	;# 
  3987  0E25                     	;# 
  3988  0E28                     	;# 
  3989  0E29                     	;# 
  3990  0E2A                     	;# 
  3991  0E2B                     	;# 
  3992  0E2C                     	;# 
  3993  0E2D                     	;# 
  3994  0E2E                     	;# 
  3995  0E2F                     	;# 
  3996  0E90                     	;# 
  3997  0E91                     	;# 
  3998  0E92                     	;# 
  3999  0E94                     	;# 
  4000  0E95                     	;# 
  4001  0E9C                     	;# 
  4002  0E9D                     	;# 
  4003  0E9E                     	;# 
  4004  0E9F                     	;# 
  4005  0EA0                     	;# 
  4006  0EA1                     	;# 
  4007  0EA2                     	;# 
  4008  0EA3                     	;# 
  4009  0EA4                     	;# 
  4010  0EA5                     	;# 
  4011  0EA6                     	;# 
  4012  0EA7                     	;# 
  4013  0F0F                     	;# 
  4014  0F10                     	;# 
  4015  0F11                     	;# 
  4016  0F12                     	;# 
  4017  0F13                     	;# 
  4018  0F14                     	;# 
  4019  0F15                     	;# 
  4020  0F16                     	;# 
  4021  0F17                     	;# 
  4022  0F18                     	;# 
  4023  0F19                     	;# 
  4024  0F1A                     	;# 
  4025  0F1B                     	;# 
  4026  0F1C                     	;# 
  4027  0F1D                     	;# 
  4028  0F1E                     	;# 
  4029  0F1F                     	;# 
  4030  0F20                     	;# 
  4031  0F21                     	;# 
  4032  0F22                     	;# 
  4033  0F23                     	;# 
  4034  0F24                     	;# 
  4035  0F25                     	;# 
  4036  0F26                     	;# 
  4037  0F27                     	;# 
  4038  0F28                     	;# 
  4039  0F29                     	;# 
  4040  0F2A                     	;# 
  4041  0F2B                     	;# 
  4042  0F2C                     	;# 
  4043  0F2D                     	;# 
  4044  0F2E                     	;# 
  4045  0F2F                     	;# 
  4046  0F30                     	;# 
  4047  0F31                     	;# 
  4048  0F32                     	;# 
  4049  0F33                     	;# 
  4050  0F34                     	;# 
  4051  0F35                     	;# 
  4052  0F36                     	;# 
  4053  0F37                     	;# 
  4054  0FE4                     	;# 
  4055  0FE5                     	;# 
  4056  0FE6                     	;# 
  4057  0FE7                     	;# 
  4058  0FE8                     	;# 
  4059  0FE9                     	;# 
  4060  0FEA                     	;# 
  4061  0FEB                     	;# 
  4062  0FED                     	;# 
  4063  0FEE                     	;# 
  4064  0FEF                     	;# 
  4065  0000                     	;# 
  4066  0001                     	;# 
  4067  0002                     	;# 
  4068  0003                     	;# 
  4069  0004                     	;# 
  4070  0005                     	;# 
  4071  0006                     	;# 
  4072  0007                     	;# 
  4073  0008                     	;# 
  4074  0009                     	;# 
  4075  000A                     	;# 
  4076  000B                     	;# 
  4077  000C                     	;# 
  4078  000D                     	;# 
  4079  000E                     	;# 
  4080  0010                     	;# 
  4081  0011                     	;# 
  4082  0012                     	;# 
  4083  0013                     	;# 
  4084  0014                     	;# 
  4085  0015                     	;# 
  4086  0015                     	;# 
  4087  0016                     	;# 
  4088  0016                     	;# 
  4089  0017                     	;# 
  4090  0018                     	;# 
  4091  0019                     	;# 
  4092  0019                     	;# 
  4093  001A                     	;# 
  4094  001B                     	;# 
  4095  001C                     	;# 
  4096  001D                     	;# 
  4097  001E                     	;# 
  4098  001F                     	;# 
  4099  008C                     	;# 
  4100  008D                     	;# 
  4101  008E                     	;# 
  4102  0090                     	;# 
  4103  0091                     	;# 
  4104  0092                     	;# 
  4105  0093                     	;# 
  4106  0094                     	;# 
  4107  0097                     	;# 
  4108  009B                     	;# 
  4109  009B                     	;# 
  4110  009C                     	;# 
  4111  009D                     	;# 
  4112  009E                     	;# 
  4113  009F                     	;# 
  4114  010C                     	;# 
  4115  010D                     	;# 
  4116  010E                     	;# 
  4117  0111                     	;# 
  4118  0112                     	;# 
  4119  0113                     	;# 
  4120  0114                     	;# 
  4121  0115                     	;# 
  4122  0116                     	;# 
  4123  0117                     	;# 
  4124  0118                     	;# 
  4125  0119                     	;# 
  4126  018C                     	;# 
  4127  018D                     	;# 
  4128  018E                     	;# 
  4129  0197                     	;# 
  4130  0199                     	;# 
  4131  0199                     	;# 
  4132  0199                     	;# 
  4133  019A                     	;# 
  4134  019A                     	;# 
  4135  019A                     	;# 
  4136  019B                     	;# 
  4137  019B                     	;# 
  4138  019B                     	;# 
  4139  019B                     	;# 
  4140  019B                     	;# 
  4141  019C                     	;# 
  4142  019C                     	;# 
  4143  019C                     	;# 
  4144  019D                     	;# 
  4145  019D                     	;# 
  4146  019D                     	;# 
  4147  019E                     	;# 
  4148  019E                     	;# 
  4149  019E                     	;# 
  4150  019F                     	;# 
  4151  019F                     	;# 
  4152  019F                     	;# 
  4153  019F                     	;# 
  4154  019F                     	;# 
  4155  020C                     	;# 
  4156  020D                     	;# 
  4157  020E                     	;# 
  4158  0211                     	;# 
  4159  0211                     	;# 
  4160  0212                     	;# 
  4161  0212                     	;# 
  4162  0213                     	;# 
  4163  0213                     	;# 
  4164  0214                     	;# 
  4165  0214                     	;# 
  4166  0215                     	;# 
  4167  0215                     	;# 
  4168  0215                     	;# 
  4169  0215                     	;# 
  4170  0216                     	;# 
  4171  0216                     	;# 
  4172  0217                     	;# 
  4173  0217                     	;# 
  4174  0219                     	;# 
  4175  021A                     	;# 
  4176  021B                     	;# 
  4177  021C                     	;# 
  4178  021D                     	;# 
  4179  021D                     	;# 
  4180  021E                     	;# 
  4181  021F                     	;# 
  4182  028C                     	;# 
  4183  028D                     	;# 
  4184  028E                     	;# 
  4185  0291                     	;# 
  4186  0291                     	;# 
  4187  0292                     	;# 
  4188  0293                     	;# 
  4189  0294                     	;# 
  4190  0295                     	;# 
  4191  0295                     	;# 
  4192  0296                     	;# 
  4193  0297                     	;# 
  4194  0298                     	;# 
  4195  029F                     	;# 
  4196  030C                     	;# 
  4197  030D                     	;# 
  4198  030E                     	;# 
  4199  0311                     	;# 
  4200  0311                     	;# 
  4201  0312                     	;# 
  4202  0313                     	;# 
  4203  0314                     	;# 
  4204  0315                     	;# 
  4205  0315                     	;# 
  4206  0316                     	;# 
  4207  0317                     	;# 
  4208  0318                     	;# 
  4209  038C                     	;# 
  4210  038D                     	;# 
  4211  038E                     	;# 
  4212  0391                     	;# 
  4213  0392                     	;# 
  4214  0393                     	;# 
  4215  0394                     	;# 
  4216  0395                     	;# 
  4217  0396                     	;# 
  4218  0397                     	;# 
  4219  0398                     	;# 
  4220  0399                     	;# 
  4221  039A                     	;# 
  4222  039C                     	;# 
  4223  039D                     	;# 
  4224  039E                     	;# 
  4225  039F                     	;# 
  4226  0411                     	;# 
  4227  0411                     	;# 
  4228  0412                     	;# 
  4229  0413                     	;# 
  4230  0414                     	;# 
  4231  0415                     	;# 
  4232  0416                     	;# 
  4233  0417                     	;# 
  4234  0418                     	;# 
  4235  0418                     	;# 
  4236  0419                     	;# 
  4237  041A                     	;# 
  4238  041B                     	;# 
  4239  041C                     	;# 
  4240  041D                     	;# 
  4241  041E                     	;# 
  4242  041F                     	;# 
  4243  0498                     	;# 
  4244  0498                     	;# 
  4245  0499                     	;# 
  4246  049A                     	;# 
  4247  049B                     	;# 
  4248  049B                     	;# 
  4249  049C                     	;# 
  4250  049D                     	;# 
  4251  049E                     	;# 
  4252  049F                     	;# 
  4253  0617                     	;# 
  4254  0618                     	;# 
  4255  0619                     	;# 
  4256  0619                     	;# 
  4257  061A                     	;# 
  4258  061B                     	;# 
  4259  061C                     	;# 
  4260  061C                     	;# 
  4261  061F                     	;# 
  4262  0691                     	;# 
  4263  0692                     	;# 
  4264  0693                     	;# 
  4265  0694                     	;# 
  4266  0695                     	;# 
  4267  0696                     	;# 
  4268  0697                     	;# 
  4269  0698                     	;# 
  4270  0699                     	;# 
  4271  0711                     	;# 
  4272  0712                     	;# 
  4273  0713                     	;# 
  4274  0714                     	;# 
  4275  0715                     	;# 
  4276  0716                     	;# 
  4277  0717                     	;# 
  4278  0718                     	;# 
  4279  0719                     	;# 
  4280  0891                     	;# 
  4281  0891                     	;# 
  4282  0891                     	;# 
  4283  0891                     	;# 
  4284  0891                     	;# 
  4285  0891                     	;# 
  4286  0892                     	;# 
  4287  0892                     	;# 
  4288  0892                     	;# 
  4289  0893                     	;# 
  4290  0893                     	;# 
  4291  0893                     	;# 
  4292  0893                     	;# 
  4293  0893                     	;# 
  4294  0893                     	;# 
  4295  0894                     	;# 
  4296  0894                     	;# 
  4297  0894                     	;# 
  4298  0895                     	;# 
  4299  0895                     	;# 
  4300  0895                     	;# 
  4301  0896                     	;# 
  4302  0896                     	;# 
  4303  0896                     	;# 
  4304  089B                     	;# 
  4305  0911                     	;# 
  4306  0912                     	;# 
  4307  0913                     	;# 
  4308  0914                     	;# 
  4309  0915                     	;# 
  4310  0916                     	;# 
  4311  0918                     	;# 
  4312  0919                     	;# 
  4313  091A                     	;# 
  4314  091B                     	;# 
  4315  091C                     	;# 
  4316  091D                     	;# 
  4317  091E                     	;# 
  4318  091F                     	;# 
  4319  0E0F                     	;# 
  4320  0E10                     	;# 
  4321  0E11                     	;# 
  4322  0E12                     	;# 
  4323  0E13                     	;# 
  4324  0E14                     	;# 
  4325  0E15                     	;# 
  4326  0E16                     	;# 
  4327  0E17                     	;# 
  4328  0E18                     	;# 
  4329  0E19                     	;# 
  4330  0E1A                     	;# 
  4331  0E1B                     	;# 
  4332  0E1C                     	;# 
  4333  0E1D                     	;# 
  4334  0E1E                     	;# 
  4335  0E1F                     	;# 
  4336  0E20                     	;# 
  4337  0E21                     	;# 
  4338  0E22                     	;# 
  4339  0E24                     	;# 
  4340  0E25                     	;# 
  4341  0E28                     	;# 
  4342  0E29                     	;# 
  4343  0E2A                     	;# 
  4344  0E2B                     	;# 
  4345  0E2C                     	;# 
  4346  0E2D                     	;# 
  4347  0E2E                     	;# 
  4348  0E2F                     	;# 
  4349  0E90                     	;# 
  4350  0E91                     	;# 
  4351  0E92                     	;# 
  4352  0E94                     	;# 
  4353  0E95                     	;# 
  4354  0E9C                     	;# 
  4355  0E9D                     	;# 
  4356  0E9E                     	;# 
  4357  0E9F                     	;# 
  4358  0EA0                     	;# 
  4359  0EA1                     	;# 
  4360  0EA2                     	;# 
  4361  0EA3                     	;# 
  4362  0EA4                     	;# 
  4363  0EA5                     	;# 
  4364  0EA6                     	;# 
  4365  0EA7                     	;# 
  4366  0F0F                     	;# 
  4367  0F10                     	;# 
  4368  0F11                     	;# 
  4369  0F12                     	;# 
  4370  0F13                     	;# 
  4371  0F14                     	;# 
  4372  0F15                     	;# 
  4373  0F16                     	;# 
  4374  0F17                     	;# 
  4375  0F18                     	;# 
  4376  0F19                     	;# 
  4377  0F1A                     	;# 
  4378  0F1B                     	;# 
  4379  0F1C                     	;# 
  4380  0F1D                     	;# 
  4381  0F1E                     	;# 
  4382  0F1F                     	;# 
  4383  0F20                     	;# 
  4384  0F21                     	;# 
  4385  0F22                     	;# 
  4386  0F23                     	;# 
  4387  0F24                     	;# 
  4388  0F25                     	;# 
  4389  0F26                     	;# 
  4390  0F27                     	;# 
  4391  0F28                     	;# 
  4392  0F29                     	;# 
  4393  0F2A                     	;# 
  4394  0F2B                     	;# 
  4395  0F2C                     	;# 
  4396  0F2D                     	;# 
  4397  0F2E                     	;# 
  4398  0F2F                     	;# 
  4399  0F30                     	;# 
  4400  0F31                     	;# 
  4401  0F32                     	;# 
  4402  0F33                     	;# 
  4403  0F34                     	;# 
  4404  0F35                     	;# 
  4405  0F36                     	;# 
  4406  0F37                     	;# 
  4407  0FE4                     	;# 
  4408  0FE5                     	;# 
  4409  0FE6                     	;# 
  4410  0FE7                     	;# 
  4411  0FE8                     	;# 
  4412  0FE9                     	;# 
  4413  0FEA                     	;# 
  4414  0FEB                     	;# 
  4415  0FED                     	;# 
  4416  0FEE                     	;# 
  4417  0FEF                     	;# 
  4418  0000                     	;# 
  4419  0001                     	;# 
  4420  0002                     	;# 
  4421  0003                     	;# 
  4422  0004                     	;# 
  4423  0005                     	;# 
  4424  0006                     	;# 
  4425  0007                     	;# 
  4426  0008                     	;# 
  4427  0009                     	;# 
  4428  000A                     	;# 
  4429  000B                     	;# 
  4430  000C                     	;# 
  4431  000D                     	;# 
  4432  000E                     	;# 
  4433  0010                     	;# 
  4434  0011                     	;# 
  4435  0012                     	;# 
  4436  0013                     	;# 
  4437  0014                     	;# 
  4438  0015                     	;# 
  4439  0015                     	;# 
  4440  0016                     	;# 
  4441  0016                     	;# 
  4442  0017                     	;# 
  4443  0018                     	;# 
  4444  0019                     	;# 
  4445  0019                     	;# 
  4446  001A                     	;# 
  4447  001B                     	;# 
  4448  001C                     	;# 
  4449  001D                     	;# 
  4450  001E                     	;# 
  4451  001F                     	;# 
  4452  008C                     	;# 
  4453  008D                     	;# 
  4454  008E                     	;# 
  4455  0090                     	;# 
  4456  0091                     	;# 
  4457  0092                     	;# 
  4458  0093                     	;# 
  4459  0094                     	;# 
  4460  0097                     	;# 
  4461  009B                     	;# 
  4462  009B                     	;# 
  4463  009C                     	;# 
  4464  009D                     	;# 
  4465  009E                     	;# 
  4466  009F                     	;# 
  4467  010C                     	;# 
  4468  010D                     	;# 
  4469  010E                     	;# 
  4470  0111                     	;# 
  4471  0112                     	;# 
  4472  0113                     	;# 
  4473  0114                     	;# 
  4474  0115                     	;# 
  4475  0116                     	;# 
  4476  0117                     	;# 
  4477  0118                     	;# 
  4478  0119                     	;# 
  4479  018C                     	;# 
  4480  018D                     	;# 
  4481  018E                     	;# 
  4482  0197                     	;# 
  4483  0199                     	;# 
  4484  0199                     	;# 
  4485  0199                     	;# 
  4486  019A                     	;# 
  4487  019A                     	;# 
  4488  019A                     	;# 
  4489  019B                     	;# 
  4490  019B                     	;# 
  4491  019B                     	;# 
  4492  019B                     	;# 
  4493  019B                     	;# 
  4494  019C                     	;# 
  4495  019C                     	;# 
  4496  019C                     	;# 
  4497  019D                     	;# 
  4498  019D                     	;# 
  4499  019D                     	;# 
  4500  019E                     	;# 
  4501  019E                     	;# 
  4502  019E                     	;# 
  4503  019F                     	;# 
  4504  019F                     	;# 
  4505  019F                     	;# 
  4506  019F                     	;# 
  4507  019F                     	;# 
  4508  020C                     	;# 
  4509  020D                     	;# 
  4510  020E                     	;# 
  4511  0211                     	;# 
  4512  0211                     	;# 
  4513  0212                     	;# 
  4514  0212                     	;# 
  4515  0213                     	;# 
  4516  0213                     	;# 
  4517  0214                     	;# 
  4518  0214                     	;# 
  4519  0215                     	;# 
  4520  0215                     	;# 
  4521  0215                     	;# 
  4522  0215                     	;# 
  4523  0216                     	;# 
  4524  0216                     	;# 
  4525  0217                     	;# 
  4526  0217                     	;# 
  4527  0219                     	;# 
  4528  021A                     	;# 
  4529  021B                     	;# 
  4530  021C                     	;# 
  4531  021D                     	;# 
  4532  021D                     	;# 
  4533  021E                     	;# 
  4534  021F                     	;# 
  4535  028C                     	;# 
  4536  028D                     	;# 
  4537  028E                     	;# 
  4538  0291                     	;# 
  4539  0291                     	;# 
  4540  0292                     	;# 
  4541  0293                     	;# 
  4542  0294                     	;# 
  4543  0295                     	;# 
  4544  0295                     	;# 
  4545  0296                     	;# 
  4546  0297                     	;# 
  4547  0298                     	;# 
  4548  029F                     	;# 
  4549  030C                     	;# 
  4550  030D                     	;# 
  4551  030E                     	;# 
  4552  0311                     	;# 
  4553  0311                     	;# 
  4554  0312                     	;# 
  4555  0313                     	;# 
  4556  0314                     	;# 
  4557  0315                     	;# 
  4558  0315                     	;# 
  4559  0316                     	;# 
  4560  0317                     	;# 
  4561  0318                     	;# 
  4562  038C                     	;# 
  4563  038D                     	;# 
  4564  038E                     	;# 
  4565  0391                     	;# 
  4566  0392                     	;# 
  4567  0393                     	;# 
  4568  0394                     	;# 
  4569  0395                     	;# 
  4570  0396                     	;# 
  4571  0397                     	;# 
  4572  0398                     	;# 
  4573  0399                     	;# 
  4574  039A                     	;# 
  4575  039C                     	;# 
  4576  039D                     	;# 
  4577  039E                     	;# 
  4578  039F                     	;# 
  4579  0411                     	;# 
  4580  0411                     	;# 
  4581  0412                     	;# 
  4582  0413                     	;# 
  4583  0414                     	;# 
  4584  0415                     	;# 
  4585  0416                     	;# 
  4586  0417                     	;# 
  4587  0418                     	;# 
  4588  0418                     	;# 
  4589  0419                     	;# 
  4590  041A                     	;# 
  4591  041B                     	;# 
  4592  041C                     	;# 
  4593  041D                     	;# 
  4594  041E                     	;# 
  4595  041F                     	;# 
  4596  0498                     	;# 
  4597  0498                     	;# 
  4598  0499                     	;# 
  4599  049A                     	;# 
  4600  049B                     	;# 
  4601  049B                     	;# 
  4602  049C                     	;# 
  4603  049D                     	;# 
  4604  049E                     	;# 
  4605  049F                     	;# 
  4606  0617                     	;# 
  4607  0618                     	;# 
  4608  0619                     	;# 
  4609  0619                     	;# 
  4610  061A                     	;# 
  4611  061B                     	;# 
  4612  061C                     	;# 
  4613  061C                     	;# 
  4614  061F                     	;# 
  4615  0691                     	;# 
  4616  0692                     	;# 
  4617  0693                     	;# 
  4618  0694                     	;# 
  4619  0695                     	;# 
  4620  0696                     	;# 
  4621  0697                     	;# 
  4622  0698                     	;# 
  4623  0699                     	;# 
  4624  0711                     	;# 
  4625  0712                     	;# 
  4626  0713                     	;# 
  4627  0714                     	;# 
  4628  0715                     	;# 
  4629  0716                     	;# 
  4630  0717                     	;# 
  4631  0718                     	;# 
  4632  0719                     	;# 
  4633  0891                     	;# 
  4634  0891                     	;# 
  4635  0891                     	;# 
  4636  0891                     	;# 
  4637  0891                     	;# 
  4638  0891                     	;# 
  4639  0892                     	;# 
  4640  0892                     	;# 
  4641  0892                     	;# 
  4642  0893                     	;# 
  4643  0893                     	;# 
  4644  0893                     	;# 
  4645  0893                     	;# 
  4646  0893                     	;# 
  4647  0893                     	;# 
  4648  0894                     	;# 
  4649  0894                     	;# 
  4650  0894                     	;# 
  4651  0895                     	;# 
  4652  0895                     	;# 
  4653  0895                     	;# 
  4654  0896                     	;# 
  4655  0896                     	;# 
  4656  0896                     	;# 
  4657  089B                     	;# 
  4658  0911                     	;# 
  4659  0912                     	;# 
  4660  0913                     	;# 
  4661  0914                     	;# 
  4662  0915                     	;# 
  4663  0916                     	;# 
  4664  0918                     	;# 
  4665  0919                     	;# 
  4666  091A                     	;# 
  4667  091B                     	;# 
  4668  091C                     	;# 
  4669  091D                     	;# 
  4670  091E                     	;# 
  4671  091F                     	;# 
  4672  0E0F                     	;# 
  4673  0E10                     	;# 
  4674  0E11                     	;# 
  4675  0E12                     	;# 
  4676  0E13                     	;# 
  4677  0E14                     	;# 
  4678  0E15                     	;# 
  4679  0E16                     	;# 
  4680  0E17                     	;# 
  4681  0E18                     	;# 
  4682  0E19                     	;# 
  4683  0E1A                     	;# 
  4684  0E1B                     	;# 
  4685  0E1C                     	;# 
  4686  0E1D                     	;# 
  4687  0E1E                     	;# 
  4688  0E1F                     	;# 
  4689  0E20                     	;# 
  4690  0E21                     	;# 
  4691  0E22                     	;# 
  4692  0E24                     	;# 
  4693  0E25                     	;# 
  4694  0E28                     	;# 
  4695  0E29                     	;# 
  4696  0E2A                     	;# 
  4697  0E2B                     	;# 
  4698  0E2C                     	;# 
  4699  0E2D                     	;# 
  4700  0E2E                     	;# 
  4701  0E2F                     	;# 
  4702  0E90                     	;# 
  4703  0E91                     	;# 
  4704  0E92                     	;# 
  4705  0E94                     	;# 
  4706  0E95                     	;# 
  4707  0E9C                     	;# 
  4708  0E9D                     	;# 
  4709  0E9E                     	;# 
  4710  0E9F                     	;# 
  4711  0EA0                     	;# 
  4712  0EA1                     	;# 
  4713  0EA2                     	;# 
  4714  0EA3                     	;# 
  4715  0EA4                     	;# 
  4716  0EA5                     	;# 
  4717  0EA6                     	;# 
  4718  0EA7                     	;# 
  4719  0F0F                     	;# 
  4720  0F10                     	;# 
  4721  0F11                     	;# 
  4722  0F12                     	;# 
  4723  0F13                     	;# 
  4724  0F14                     	;# 
  4725  0F15                     	;# 
  4726  0F16                     	;# 
  4727  0F17                     	;# 
  4728  0F18                     	;# 
  4729  0F19                     	;# 
  4730  0F1A                     	;# 
  4731  0F1B                     	;# 
  4732  0F1C                     	;# 
  4733  0F1D                     	;# 
  4734  0F1E                     	;# 
  4735  0F1F                     	;# 
  4736  0F20                     	;# 
  4737  0F21                     	;# 
  4738  0F22                     	;# 
  4739  0F23                     	;# 
  4740  0F24                     	;# 
  4741  0F25                     	;# 
  4742  0F26                     	;# 
  4743  0F27                     	;# 
  4744  0F28                     	;# 
  4745  0F29                     	;# 
  4746  0F2A                     	;# 
  4747  0F2B                     	;# 
  4748  0F2C                     	;# 
  4749  0F2D                     	;# 
  4750  0F2E                     	;# 
  4751  0F2F                     	;# 
  4752  0F30                     	;# 
  4753  0F31                     	;# 
  4754  0F32                     	;# 
  4755  0F33                     	;# 
  4756  0F34                     	;# 
  4757  0F35                     	;# 
  4758  0F36                     	;# 
  4759  0F37                     	;# 
  4760  0FE4                     	;# 
  4761  0FE5                     	;# 
  4762  0FE6                     	;# 
  4763  0FE7                     	;# 
  4764  0FE8                     	;# 
  4765  0FE9                     	;# 
  4766  0FEA                     	;# 
  4767  0FEB                     	;# 
  4768  0FED                     	;# 
  4769  0FEE                     	;# 
  4770  0FEF                     	;# 
  4771  0000                     	;# 
  4772  0001                     	;# 
  4773  0002                     	;# 
  4774  0003                     	;# 
  4775  0004                     	;# 
  4776  0005                     	;# 
  4777  0006                     	;# 
  4778  0007                     	;# 
  4779  0008                     	;# 
  4780  0009                     	;# 
  4781  000A                     	;# 
  4782  000B                     	;# 
  4783  000C                     	;# 
  4784  000D                     	;# 
  4785  000E                     	;# 
  4786  0010                     	;# 
  4787  0011                     	;# 
  4788  0012                     	;# 
  4789  0013                     	;# 
  4790  0014                     	;# 
  4791  0015                     	;# 
  4792  0015                     	;# 
  4793  0016                     	;# 
  4794  0016                     	;# 
  4795  0017                     	;# 
  4796  0018                     	;# 
  4797  0019                     	;# 
  4798  0019                     	;# 
  4799  001A                     	;# 
  4800  001B                     	;# 
  4801  001C                     	;# 
  4802  001D                     	;# 
  4803  001E                     	;# 
  4804  001F                     	;# 
  4805  008C                     	;# 
  4806  008D                     	;# 
  4807  008E                     	;# 
  4808  0090                     	;# 
  4809  0091                     	;# 
  4810  0092                     	;# 
  4811  0093                     	;# 
  4812  0094                     	;# 
  4813  0097                     	;# 
  4814  009B                     	;# 
  4815  009B                     	;# 
  4816  009C                     	;# 
  4817  009D                     	;# 
  4818  009E                     	;# 
  4819  009F                     	;# 
  4820  010C                     	;# 
  4821  010D                     	;# 
  4822  010E                     	;# 
  4823  0111                     	;# 
  4824  0112                     	;# 
  4825  0113                     	;# 
  4826  0114                     	;# 
  4827  0115                     	;# 
  4828  0116                     	;# 
  4829  0117                     	;# 
  4830  0118                     	;# 
  4831  0119                     	;# 
  4832  018C                     	;# 
  4833  018D                     	;# 
  4834  018E                     	;# 
  4835  0197                     	;# 
  4836  0199                     	;# 
  4837  0199                     	;# 
  4838  0199                     	;# 
  4839  019A                     	;# 
  4840  019A                     	;# 
  4841  019A                     	;# 
  4842  019B                     	;# 
  4843  019B                     	;# 
  4844  019B                     	;# 
  4845  019B                     	;# 
  4846  019B                     	;# 
  4847  019C                     	;# 
  4848  019C                     	;# 
  4849  019C                     	;# 
  4850  019D                     	;# 
  4851  019D                     	;# 
  4852  019D                     	;# 
  4853  019E                     	;# 
  4854  019E                     	;# 
  4855  019E                     	;# 
  4856  019F                     	;# 
  4857  019F                     	;# 
  4858  019F                     	;# 
  4859  019F                     	;# 
  4860  019F                     	;# 
  4861  020C                     	;# 
  4862  020D                     	;# 
  4863  020E                     	;# 
  4864  0211                     	;# 
  4865  0211                     	;# 
  4866  0212                     	;# 
  4867  0212                     	;# 
  4868  0213                     	;# 
  4869  0213                     	;# 
  4870  0214                     	;# 
  4871  0214                     	;# 
  4872  0215                     	;# 
  4873  0215                     	;# 
  4874  0215                     	;# 
  4875  0215                     	;# 
  4876  0216                     	;# 
  4877  0216                     	;# 
  4878  0217                     	;# 
  4879  0217                     	;# 
  4880  0219                     	;# 
  4881  021A                     	;# 
  4882  021B                     	;# 
  4883  021C                     	;# 
  4884  021D                     	;# 
  4885  021D                     	;# 
  4886  021E                     	;# 
  4887  021F                     	;# 
  4888  028C                     	;# 
  4889  028D                     	;# 
  4890  028E                     	;# 
  4891  0291                     	;# 
  4892  0291                     	;# 
  4893  0292                     	;# 
  4894  0293                     	;# 
  4895  0294                     	;# 
  4896  0295                     	;# 
  4897  0295                     	;# 
  4898  0296                     	;# 
  4899  0297                     	;# 
  4900  0298                     	;# 
  4901  029F                     	;# 
  4902  030C                     	;# 
  4903  030D                     	;# 
  4904  030E                     	;# 
  4905  0311                     	;# 
  4906  0311                     	;# 
  4907  0312                     	;# 
  4908  0313                     	;# 
  4909  0314                     	;# 
  4910  0315                     	;# 
  4911  0315                     	;# 
  4912  0316                     	;# 
  4913  0317                     	;# 
  4914  0318                     	;# 
  4915  038C                     	;# 
  4916  038D                     	;# 
  4917  038E                     	;# 
  4918  0391                     	;# 
  4919  0392                     	;# 
  4920  0393                     	;# 
  4921  0394                     	;# 
  4922  0395                     	;# 
  4923  0396                     	;# 
  4924  0397                     	;# 
  4925  0398                     	;# 
  4926  0399                     	;# 
  4927  039A                     	;# 
  4928  039C                     	;# 
  4929  039D                     	;# 
  4930  039E                     	;# 
  4931  039F                     	;# 
  4932  0411                     	;# 
  4933  0411                     	;# 
  4934  0412                     	;# 
  4935  0413                     	;# 
  4936  0414                     	;# 
  4937  0415                     	;# 
  4938  0416                     	;# 
  4939  0417                     	;# 
  4940  0418                     	;# 
  4941  0418                     	;# 
  4942  0419                     	;# 
  4943  041A                     	;# 
  4944  041B                     	;# 
  4945  041C                     	;# 
  4946  041D                     	;# 
  4947  041E                     	;# 
  4948  041F                     	;# 
  4949  0498                     	;# 
  4950  0498                     	;# 
  4951  0499                     	;# 
  4952  049A                     	;# 
  4953  049B                     	;# 
  4954  049B                     	;# 
  4955  049C                     	;# 
  4956  049D                     	;# 
  4957  049E                     	;# 
  4958  049F                     	;# 
  4959  0617                     	;# 
  4960  0618                     	;# 
  4961  0619                     	;# 
  4962  0619                     	;# 
  4963  061A                     	;# 
  4964  061B                     	;# 
  4965  061C                     	;# 
  4966  061C                     	;# 
  4967  061F                     	;# 
  4968  0691                     	;# 
  4969  0692                     	;# 
  4970  0693                     	;# 
  4971  0694                     	;# 
  4972  0695                     	;# 
  4973  0696                     	;# 
  4974  0697                     	;# 
  4975  0698                     	;# 
  4976  0699                     	;# 
  4977  0711                     	;# 
  4978  0712                     	;# 
  4979  0713                     	;# 
  4980  0714                     	;# 
  4981  0715                     	;# 
  4982  0716                     	;# 
  4983  0717                     	;# 
  4984  0718                     	;# 
  4985  0719                     	;# 
  4986  0891                     	;# 
  4987  0891                     	;# 
  4988  0891                     	;# 
  4989  0891                     	;# 
  4990  0891                     	;# 
  4991  0891                     	;# 
  4992  0892                     	;# 
  4993  0892                     	;# 
  4994  0892                     	;# 
  4995  0893                     	;# 
  4996  0893                     	;# 
  4997  0893                     	;# 
  4998  0893                     	;# 
  4999  0893                     	;# 
  5000  0893                     	;# 
  5001  0894                     	;# 
  5002  0894                     	;# 
  5003  0894                     	;# 
  5004  0895                     	;# 
  5005  0895                     	;# 
  5006  0895                     	;# 
  5007  0896                     	;# 
  5008  0896                     	;# 
  5009  0896                     	;# 
  5010  089B                     	;# 
  5011  0911                     	;# 
  5012  0912                     	;# 
  5013  0913                     	;# 
  5014  0914                     	;# 
  5015  0915                     	;# 
  5016  0916                     	;# 
  5017  0918                     	;# 
  5018  0919                     	;# 
  5019  091A                     	;# 
  5020  091B                     	;# 
  5021  091C                     	;# 
  5022  091D                     	;# 
  5023  091E                     	;# 
  5024  091F                     	;# 
  5025  0E0F                     	;# 
  5026  0E10                     	;# 
  5027  0E11                     	;# 
  5028  0E12                     	;# 
  5029  0E13                     	;# 
  5030  0E14                     	;# 
  5031  0E15                     	;# 
  5032  0E16                     	;# 
  5033  0E17                     	;# 
  5034  0E18                     	;# 
  5035  0E19                     	;# 
  5036  0E1A                     	;# 
  5037  0E1B                     	;# 
  5038  0E1C                     	;# 
  5039  0E1D                     	;# 
  5040  0E1E                     	;# 
  5041  0E1F                     	;# 
  5042  0E20                     	;# 
  5043  0E21                     	;# 
  5044  0E22                     	;# 
  5045  0E24                     	;# 
  5046  0E25                     	;# 
  5047  0E28                     	;# 
  5048  0E29                     	;# 
  5049  0E2A                     	;# 
  5050  0E2B                     	;# 
  5051  0E2C                     	;# 
  5052  0E2D                     	;# 
  5053  0E2E                     	;# 
  5054  0E2F                     	;# 
  5055  0E90                     	;# 
  5056  0E91                     	;# 
  5057  0E92                     	;# 
  5058  0E94                     	;# 
  5059  0E95                     	;# 
  5060  0E9C                     	;# 
  5061  0E9D                     	;# 
  5062  0E9E                     	;# 
  5063  0E9F                     	;# 
  5064  0EA0                     	;# 
  5065  0EA1                     	;# 
  5066  0EA2                     	;# 
  5067  0EA3                     	;# 
  5068  0EA4                     	;# 
  5069  0EA5                     	;# 
  5070  0EA6                     	;# 
  5071  0EA7                     	;# 
  5072  0F0F                     	;# 
  5073  0F10                     	;# 
  5074  0F11                     	;# 
  5075  0F12                     	;# 
  5076  0F13                     	;# 
  5077  0F14                     	;# 
  5078  0F15                     	;# 
  5079  0F16                     	;# 
  5080  0F17                     	;# 
  5081  0F18                     	;# 
  5082  0F19                     	;# 
  5083  0F1A                     	;# 
  5084  0F1B                     	;# 
  5085  0F1C                     	;# 
  5086  0F1D                     	;# 
  5087  0F1E                     	;# 
  5088  0F1F                     	;# 
  5089  0F20                     	;# 
  5090  0F21                     	;# 
  5091  0F22                     	;# 
  5092  0F23                     	;# 
  5093  0F24                     	;# 
  5094  0F25                     	;# 
  5095  0F26                     	;# 
  5096  0F27                     	;# 
  5097  0F28                     	;# 
  5098  0F29                     	;# 
  5099  0F2A                     	;# 
  5100  0F2B                     	;# 
  5101  0F2C                     	;# 
  5102  0F2D                     	;# 
  5103  0F2E                     	;# 
  5104  0F2F                     	;# 
  5105  0F30                     	;# 
  5106  0F31                     	;# 
  5107  0F32                     	;# 
  5108  0F33                     	;# 
  5109  0F34                     	;# 
  5110  0F35                     	;# 
  5111  0F36                     	;# 
  5112  0F37                     	;# 
  5113  0FE4                     	;# 
  5114  0FE5                     	;# 
  5115  0FE6                     	;# 
  5116  0FE7                     	;# 
  5117  0FE8                     	;# 
  5118  0FE9                     	;# 
  5119  0FEA                     	;# 
  5120  0FEB                     	;# 
  5121  0FED                     	;# 
  5122  0FEE                     	;# 
  5123  0FEF                     	;# 
  5124                           
  5125                           	psect	idataBANK1
  5126  08C9                     __pidataBANK1:	
  5127                           
  5128                           ;initializer for _gestureToggle
  5129  08C9  3401               	retlw	1
  5130                           
  5131                           ;initializer for _on
  5132  08CA  3401               	retlw	1
  5133                           
  5134                           ;initializer for _start
  5135  08CB  3401               	retlw	1
  5136                           
  5137                           	psect	idataBANK2
  5138  0970                     __pidataBANK2:	
  5139                           
  5140                           ;initializer for _names
  5141  0970  343D               	retlw	low (STR_1| (0+32768))
  5142  0971  3490               	retlw	high (STR_1| (0+32768))
  5143  0972  3430               	retlw	low (STR_2| (0+32768))
  5144  0973  3490               	retlw	high (STR_2| (0+32768))
  5145  0974  3420               	retlw	low (STR_3| (0+32768))
  5146  0975  3490               	retlw	high (STR_3| (0+32768))
  5147  0976  3449               	retlw	low (STR_4| (0+32768))
  5148  0977  3490               	retlw	high (STR_4| (0+32768))
  5149                           
  5150                           	psect	stringtext1
  5151  1000                     __pstringtext1:	
  5152  1000                     _fsmStateTable:	
  5153  1000  3401               	retlw	low _do_I2C_IDLE
  5154  1001  3409               	retlw	high _do_I2C_IDLE
  5155  1002  3448               	retlw	low _do_I2C_SEND_ADR_READ
  5156  1003  3409               	retlw	high _do_I2C_SEND_ADR_READ
  5157  1004  342B               	retlw	low _do_I2C_SEND_ADR_WRITE
  5158  1005  3409               	retlw	high _do_I2C_SEND_ADR_WRITE
  5159  1006  34F6               	retlw	low _do_I2C_TX
  5160  1007  3406               	retlw	high _do_I2C_TX
  5161  1008  348C               	retlw	low _do_I2C_RX
  5162  1009  3407               	retlw	high _do_I2C_RX
  5163  100A  3406               	retlw	low _do_I2C_RCEN
  5164  100B  3409               	retlw	high _do_I2C_RCEN
  5165  100C  34D6               	retlw	low _do_I2C_TX_EMPTY
  5166  100D  340D               	retlw	high _do_I2C_TX_EMPTY
  5167  100E  34D8               	retlw	low _do_I2C_SEND_RESTART_READ
  5168  100F  3408               	retlw	high _do_I2C_SEND_RESTART_READ
  5169  1010  34DC               	retlw	low _do_I2C_SEND_RESTART_WRITE
  5170  1011  3408               	retlw	high _do_I2C_SEND_RESTART_WRITE
  5171  1012  34E0               	retlw	low _do_I2C_SEND_RESTART
  5172  1013  3408               	retlw	high _do_I2C_SEND_RESTART
  5173  1014  34E4               	retlw	low _do_I2C_SEND_STOP
  5174  1015  3408               	retlw	high _do_I2C_SEND_STOP
  5175  1016  34E8               	retlw	low _do_I2C_DO_ACK
  5176  1017  3408               	retlw	high _do_I2C_DO_ACK
  5177  1018  34EC               	retlw	low _do_I2C_DO_NACK_STOP
  5178  1019  3408               	retlw	high _do_I2C_DO_NACK_STOP
  5179  101A  34F0               	retlw	low _do_I2C_DO_NACK_RESTART
  5180  101B  3408               	retlw	high _do_I2C_DO_NACK_RESTART
  5181  101C  3424               	retlw	low _do_I2C_RESET
  5182  101D  3409               	retlw	high _do_I2C_RESET
  5183  101E  3454               	retlw	low _do_I2C_DO_ADDRESS_NACK
  5184  101F  340D               	retlw	high _do_I2C_DO_ADDRESS_NACK
  5185  1020                     __end_of_fsmStateTable:	
  5186                           
  5187                           	psect	nvBANK1
  5188  00E4                     __pnvBANK1:	
  5189  00E4                     _EUSART_FramingErrorHandler:	
  5190  00E4                     	ds	2
  5191  00E6                     _EUSART_RxDefaultInterruptHandler:	
  5192  00E6                     	ds	2
  5193  00E8                     _EUSART_TxDefaultInterruptHandler:	
  5194  00E8                     	ds	2
  5195  00EA                     _eusartTxBufferRemaining:	
  5196  00EA                     	ds	1
  5197                           
  5198                           	psect	nvBANK2
  5199  015D                     __pnvBANK2:	
  5200  015D                     _EUSART_ErrorHandler:	
  5201  015D                     	ds	2
  5202  015F                     _EUSART_OverrunErrorHandler:	
  5203  015F                     	ds	2
  5204  000E                     _PORTCbits	set	14
  5205  001F                     _T2CONbits	set	31
  5206  001F                     _T2CON	set	31
  5207  001D                     _TMR2	set	29
  5208  001E                     _PR2	set	30
  5209  0011                     _PIR1bits	set	17
  5210  000B                     _INTCONbits	set	11
  5211  0010                     _PIR0bits	set	16
  5212  009D                     _ADCON0bits	set	157
  5213  009C                     _ADRESH	set	156
  5214  009B                     _ADRESL	set	155
  5215  009F                     _ADACT	set	159
  5216  009E                     _ADCON1	set	158
  5217  009D                     _ADCON0	set	157
  5218  008E                     _TRISC	set	142
  5219  008D                     _TRISB	set	141
  5220  008C                     _TRISA	set	140
  5221  0097                     _WDTCON	set	151
  5222  0091                     _PIE1bits	set	145
  5223  0090                     _PIE0bits	set	144
  5224  010E                     _LATCbits	set	270
  5225  010E                     _LATC	set	270
  5226  010D                     _LATB	set	269
  5227  010C                     _LATA	set	268
  5228  019A                     _TXREG1	set	410
  5229  019E                     _TXSTA1bits	set	414
  5230  0199                     _RC1REG	set	409
  5231  019D                     _RC1STAbits	set	413
  5232  019A                     _TX1REG	set	410
  5233  019E                     _TX1STAbits	set	414
  5234  019C                     _SP1BRGH	set	412
  5235  019B                     _SP1BRGL	set	411
  5236  019E                     _TX1STA	set	414
  5237  019D                     _RC1STA	set	413
  5238  019F                     _BAUD1CON	set	415
  5239  018C                     _ANSELA	set	396
  5240  018D                     _ANSELB	set	397
  5241  018E                     _ANSELC	set	398
  5242  021C                     _SSP2STATbits	set	540
  5243  0219                     _SSP2BUF	set	537
  5244  021D                     _SSP2CON1bits	set	541
  5245  021A                     _SSP2ADD	set	538
  5246  021D                     _SSP2CON1	set	541
  5247  021C                     _SSP2STAT	set	540
  5248  0214                     _SSP1STATbits	set	532
  5249  0213                     _SSP1MSK	set	531
  5250  0211                     _SSP1BUF	set	529
  5251  0216                     _SSP1CON2bits	set	534
  5252  0212                     _SSP1ADD	set	530
  5253  0216                     _SSP1CON2	set	534
  5254  0215                     _SSP1CON1	set	533
  5255  0214                     _SSP1STAT	set	532
  5256  0215                     _SSP1CON1bits	set	533
  5257  020E                     _WPUC	set	526
  5258  020C                     _WPUA	set	524
  5259  020D                     _WPUB	set	525
  5260  0293                     _CCP1CONbits	set	659
  5261  029F                     _CCPTMRSbits	set	671
  5262  0291                     _CCPR1L	set	657
  5263  0292                     _CCPR1H	set	658
  5264  0293                     _CCP1CON	set	659
  5265  028E                     _ODCONC	set	654
  5266  028D                     _ODCONB	set	653
  5267  028C                     _ODCONA	set	652
  5268  030E                     _SLRCONC	set	782
  5269  030D                     _SLRCONB	set	781
  5270  030C                     _SLRCONA	set	780
  5271  0916                     _PMD5	set	2326
  5272  0915                     _PMD4	set	2325
  5273  0914                     _PMD3	set	2324
  5274  0913                     _PMD2	set	2323
  5275  0912                     _PMD1	set	2322
  5276  0911                     _PMD0	set	2321
  5277  091E                     _OSCTUNE	set	2334
  5278  091F                     _OSCFRQ	set	2335
  5279  091D                     _OSCEN	set	2333
  5280  091B                     _OSCCON3	set	2331
  5281  0919                     _OSCCON1	set	2329
  5282  0E1D                     _SSP2CLKPPS	set	3613
  5283  0E21                     _SSP1DATPPS	set	3617
  5284  0E20                     _SSP1CLKPPS	set	3616
  5285  0E1E                     _SSP2DATPPS	set	3614
  5286  0E24                     _RXPPS	set	3620
  5287  0EA6                     _RC6PPS	set	3750
  5288  0EA5                     _RC5PPS	set	3749
  5289  0EA2                     _RC2PPS	set	3746
  5290  0E9D                     _RB5PPS	set	3741
  5291  0E9F                     _RB7PPS	set	3743
  5292  0E9E                     _RB6PPS	set	3742
  5293                           
  5294                           	psect	stringtext2
  5295  1020                     __pstringtext2:	
  5296  1020                     STR_3:	
  5297  1020  3441               	retlw	65	;'A'
  5298  1021  346C               	retlw	108	;'l'
  5299  1022  3465               	retlw	101	;'e'
  5300  1023  3478               	retlw	120	;'x'
  5301  1024  3461               	retlw	97	;'a'
  5302  1025  346E               	retlw	110	;'n'
  5303  1026  3464               	retlw	100	;'d'
  5304  1027  3472               	retlw	114	;'r'
  5305  1028  3461               	retlw	97	;'a'
  5306  1029  3420               	retlw	32	;' '
  5307  102A  3446               	retlw	70	;'F'
  5308  102B  3479               	retlw	121	;'y'
  5309  102C  3466               	retlw	102	;'f'
  5310  102D  3466               	retlw	102	;'f'
  5311  102E  3465               	retlw	101	;'e'
  5312  102F  3400               	retlw	0
  5313                           
  5314                           	psect	stringtext3
  5315  1030                     __pstringtext3:	
  5316  1030                     STR_2:	
  5317  1030  344E               	retlw	78	;'N'
  5318  1031  346F               	retlw	111	;'o'
  5319  1032  3465               	retlw	101	;'e'
  5320  1033  346C               	retlw	108	;'l'
  5321  1034  346C               	retlw	108	;'l'
  5322  1035  3465               	retlw	101	;'e'
  5323  1036  3420               	retlw	32	;' '
  5324  1037  3443               	retlw	67	;'C'
  5325  1038  3472               	retlw	114	;'r'
  5326  1039  3461               	retlw	97	;'a'
  5327  103A  346E               	retlw	110	;'n'
  5328  103B  3465               	retlw	101	;'e'
  5329  103C  3400               	retlw	0
  5330                           
  5331                           	psect	stringtext4
  5332  103D                     __pstringtext4:	
  5333  103D                     STR_1:	
  5334  103D  344A               	retlw	74	;'J'
  5335  103E  3475               	retlw	117	;'u'
  5336  103F  3473               	retlw	115	;'s'
  5337  1040  3474               	retlw	116	;'t'
  5338  1041  3469               	retlw	105	;'i'
  5339  1042  346E               	retlw	110	;'n'
  5340  1043  3420               	retlw	32	;' '
  5341  1044  3443               	retlw	67	;'C'
  5342  1045  3468               	retlw	104	;'h'
  5343  1046  3461               	retlw	97	;'a'
  5344  1047  346E               	retlw	110	;'n'
  5345  1048  3400               	retlw	0
  5346                           
  5347                           	psect	stringtext5
  5348  1049                     __pstringtext5:	
  5349  1049                     STR_4:	
  5350  1049  344A               	retlw	74	;'J'
  5351  104A  3465               	retlw	101	;'e'
  5352  104B  3466               	retlw	102	;'f'
  5353  104C  3466               	retlw	102	;'f'
  5354  104D  3420               	retlw	32	;' '
  5355  104E  3447               	retlw	71	;'G'
  5356  104F  3465               	retlw	101	;'e'
  5357  1050  3469               	retlw	105	;'i'
  5358  1051  3473               	retlw	115	;'s'
  5359  1052  3473               	retlw	115	;'s'
  5360  1053  3400               	retlw	0
  5361                           
  5362                           	psect	stringtext6
  5363  1054                     __pstringtext6:	
  5364  1054                     STR_5:	
  5365  1054  3425               	retlw	37	;'%'
  5366  1055  3464               	retlw	100	;'d'
  5367  1056  3400               	retlw	0
  5368                           
  5369                           	psect	stringtext7
  5370  0000                     __pstringtext7:	
  5371  1054                     
  5372                           ; #config settings
  5373  0000                     
  5374                           	psect	cinit
  5375  0049                     start_initialization:	
  5376  0049                     __initialization:	
  5377                           
  5378                           ; Initialize objects allocated to BANK1
  5379  0049  30C9               	movlw	low __pidataBANK1
  5380  004A  0084               	movwf	4
  5381  004B  3088               	movlw	(high __pidataBANK1)| (0+128)
  5382  004C  0085               	movwf	5
  5383  004D  30EB               	movlw	low __pdataBANK1
  5384  004E  0086               	movwf	6
  5385  004F  3000               	movlw	high __pdataBANK1
  5386  0050  0087               	movwf	7
  5387  0051  3003               	movlw	3
  5388  0052  3189  211E  3180   	fcall	init_ram
  5389                           
  5390                           ; Initialize objects allocated to BANK2
  5391  0055  3070               	movlw	low __pidataBANK2
  5392  0056  0084               	movwf	4
  5393  0057  3089               	movlw	(high __pidataBANK2)| (0+128)
  5394  0058  0085               	movwf	5
  5395  0059  3055               	movlw	low __pdataBANK2
  5396  005A  0086               	movwf	6
  5397  005B  3001               	movlw	high __pdataBANK2
  5398  005C  0087               	movwf	7
  5399  005D  3008               	movlw	8
  5400  005E  3189  211E  3180   	fcall	init_ram
  5401                           
  5402                           ; Clear objects allocated to COMMON
  5403  0061  01F0               	clrf	__pbssCOMMON& (0+127)
  5404  0062  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
  5405  0063  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
  5406  0064  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
  5407  0065  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
  5408  0066  01F5               	clrf	(__pbssCOMMON+5)& (0+127)
  5409                           
  5410                           ; Clear objects allocated to BANK1
  5411  0067  30A0               	movlw	low __pbssBANK1
  5412  0068  0084               	movwf	4
  5413  0069  3000               	movlw	high __pbssBANK1
  5414  006A  0085               	movwf	5
  5415  006B  3025               	movlw	37
  5416  006C  3189  2118  3180   	fcall	clear_ram0
  5417                           
  5418                           ; Clear objects allocated to BANK2
  5419  006F  3020               	movlw	low __pbssBANK2
  5420  0070  0084               	movwf	4
  5421  0071  3001               	movlw	high __pbssBANK2
  5422  0072  0085               	movwf	5
  5423  0073  3035               	movlw	53
  5424  0074  3189  2118  3180   	fcall	clear_ram0
  5425                           
  5426                           ; Clear objects allocated to BANK3
  5427  0077  30A0               	movlw	low __pbssBANK3
  5428  0078  0084               	movwf	4
  5429  0079  3001               	movlw	high __pbssBANK3
  5430  007A  0085               	movwf	5
  5431  007B  3044               	movlw	68
  5432  007C  3189  2118  3180   	fcall	clear_ram0
  5433                           
  5434                           ; Clear objects allocated to BANK4
  5435  007F  3020               	movlw	low __pbssBANK4
  5436  0080  0084               	movwf	4
  5437  0081  3002               	movlw	high __pbssBANK4
  5438  0082  0085               	movwf	5
  5439  0083  3020               	movlw	32
  5440  0084  3189  2118         	fcall	clear_ram0
  5441  0086                     end_of_initialization:	
  5442                           ;End of C runtime variable initialization code
  5443                           
  5444  0086                     __end_of__initialization:	
  5445  0086  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  5446  0087  0020               	movlb	0
  5447  0088  3187  2FD2         	ljmp	_main	;jump to C main() function
  5448                           
  5449                           	psect	bssCOMMON
  5450  0070                     __pbssCOMMON:	
  5451  0070                     _gesture_lr_delta_:	
  5452  0070                     	ds	2
  5453  0072                     _gesture_ud_delta_:	
  5454  0072                     	ds	2
  5455  0074                     _eusartRxTail:	
  5456  0074                     	ds	1
  5457  0075                     _eusartRxHead:	
  5458  0075                     	ds	1
  5459                           
  5460                           	psect	bssBANK1
  5461  00A0                     __pbssBANK1:	
  5462  00A0                     _nout:	
  5463  00A0                     	ds	2
  5464  00A2                     _width:	
  5465  00A2                     	ds	2
  5466  00A4                     _prec:	
  5467  00A4                     	ds	2
  5468  00A6                     _flags:	
  5469  00A6                     	ds	2
  5470  00A8                     _brightness:	
  5471  00A8                     	ds	2
  5472  00AA                     _name:	
  5473  00AA                     	ds	2
  5474  00AC                     _gesture_motion_:	
  5475  00AC                     	ds	2
  5476  00AE                     _gesture_state_:	
  5477  00AE                     	ds	2
  5478  00B0                     _gesture_far_count_:	
  5479  00B0                     	ds	2
  5480  00B2                     _gesture_near_count_:	
  5481  00B2                     	ds	2
  5482  00B4                     _gesture_lr_count_:	
  5483  00B4                     	ds	2
  5484  00B6                     _gesture_ud_count_:	
  5485  00B6                     	ds	2
  5486  00B8                     _i2c1_driver_i2cISR:	
  5487  00B8                     	ds	2
  5488  00BA                     _i2c1_driver_busCollisionISR:	
  5489  00BA                     	ds	2
  5490  00BC                     _b_i2c_error_flag:	
  5491  00BC                     	ds	1
  5492  00BD                     _prox:	
  5493  00BD                     	ds	1
  5494  00BE                     _adcResult:	
  5495  00BE                     	ds	1
  5496  00BF                     _printed:	
  5497  00BF                     	ds	1
  5498  00C0                     _handleGestureFlag:	
  5499  00C0                     	ds	1
  5500  00C1                     _eusartRxLastError:	
  5501  00C1                     	ds	1
  5502  00C2                     _eusartRxCount:	
  5503  00C2                     	ds	1
  5504  00C3                     _eusartTxTail:	
  5505  00C3                     	ds	1
  5506  00C4                     _eusartTxHead:	
  5507  00C4                     	ds	1
  5508                           
  5509                           	psect	dataBANK1
  5510  00EB                     __pdataBANK1:	
  5511  00EB                     _gestureToggle:	
  5512  00EB                     	ds	1
  5513  00EC                     _on:	
  5514  00EC                     	ds	1
  5515  00ED                     _start:	
  5516  00ED                     	ds	1
  5517                           
  5518                           	psect	bssBANK2
  5519  0120                     __pbssBANK2:	
  5520  0120                     _i2c_status:	
  5521  0120                     	ds	29
  5522  013D                     _eusartRxStatusBuffer:	
  5523  013D                     	ds	8
  5524  0145                     _eusartRxBuffer:	
  5525  0145                     	ds	8
  5526  014D                     _eusartTxBuffer:	
  5527  014D                     	ds	8
  5528                           
  5529                           	psect	dataBANK2
  5530  0155                     __pdataBANK2:	
  5531  0155                     _names:	
  5532  0155                     	ds	8
  5533                           
  5534                           	psect	bssBANK3
  5535  01A0                     __pbssBANK3:	
  5536  01A0                     _gesture_data_:	
  5537  01A0                     	ds	68
  5538                           
  5539                           	psect	bssBANK4
  5540  0220                     __pbssBANK4:	
  5541  0220                     _dbuf:	
  5542  0220                     	ds	32
  5543                           
  5544                           	psect	inittext
  5545  091E                     init_ram:	
  5546  091E  00FE               	movwf	126
  5547  091F                     initloop:	
  5548  091F  0012               	moviw fsr0++
  5549  0920  001E               	movwi fsr1++
  5550  0921  0BFE               	decfsz	126,f
  5551  0922  291F               	goto	initloop
  5552  0923  3400               	retlw	0
  5553                           
  5554                           	psect	clrtext
  5555  0918                     clear_ram0:	
  5556                           ;	Called with FSR0 containing the base address, and
  5557                           ;	WREG with the size to clear
  5558                           
  5559  0918  0064               	clrwdt	;clear the watchdog before getting into this loop
  5560  0919                     clrloop0:	
  5561  0919  0180               	clrf	0	;clear RAM location pointed to by FSR
  5562  091A  3101               	addfsr 0,1
  5563  091B  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  5564  091C  2919               	goto	clrloop0	;have we reached the end yet?
  5565  091D  3400               	retlw	0	;all done for this memory range, return
  5566                           
  5567                           	psect	cstackBANK1
  5568  00C5                     __pcstackBANK1:	
  5569  00C5                     vfprintf@fp:	
  5570                           
  5571                           ; 1 bytes @ 0x0
  5572  00C5                     	ds	1
  5573  00C6                     vfprintf@cfmt:	
  5574                           
  5575                           ; 2 bytes @ 0x1
  5576  00C6                     	ds	2
  5577  00C8                     ?_sprintf:	
  5578  00C8                     sprintf@fmt:	
  5579                           ; 2 bytes @ 0x3
  5580                           
  5581                           
  5582                           ; 2 bytes @ 0x3
  5583  00C8                     	ds	6
  5584  00CE                     sprintf@ap:	
  5585                           
  5586                           ; 1 bytes @ 0x9
  5587  00CE                     	ds	1
  5588  00CF                     sprintf@s:	
  5589                           
  5590                           ; 1 bytes @ 0xA
  5591  00CF                     	ds	1
  5592  00D0                     sprintf@f:	
  5593                           
  5594                           ; 5 bytes @ 0xB
  5595  00D0                     	ds	5
  5596  00D5                     ??_UART_Byte:	
  5597  00D5                     ??_Get_ADC:	
  5598                           ; 1 bytes @ 0x10
  5599                           
  5600                           
  5601                           ; 1 bytes @ 0x10
  5602  00D5                     	ds	2
  5603  00D7                     UART_Byte@bits:	
  5604                           
  5605                           ; 7 bytes @ 0x12
  5606  00D7                     	ds	1
  5607  00D8                     Get_ADC@string1:	
  5608                           
  5609                           ; 12 bytes @ 0x13
  5610  00D8                     	ds	6
  5611  00DE                     UART_Byte@onStr:	
  5612                           
  5613                           ; 1 bytes @ 0x19
  5614  00DE                     	ds	1
  5615  00DF                     UART_Byte@proxStr:	
  5616                           
  5617                           ; 1 bytes @ 0x1A
  5618  00DF                     	ds	1
  5619  00E0                     UART_Byte@profileStr:	
  5620                           
  5621                           ; 1 bytes @ 0x1B
  5622  00E0                     	ds	1
  5623  00E1                     UART_Byte@brightStr:	
  5624                           
  5625                           ; 1 bytes @ 0x1C
  5626  00E1                     	ds	3
  5627                           
  5628                           	psect	cstackCOMMON
  5629  0076                     __pcstackCOMMON:	
  5630  0076                     ?_i2c1_driver_open:	
  5631  0076                     ?_i2c1_driver_isNACK:	
  5632                           ; 1 bit 
  5633                           
  5634  0076                     ?_i2c1_driver_isBufferFull:	
  5635                           ; 1 bit 
  5636                           
  5637  0076                     ?_returnStop:	
  5638                           ; 1 bit 
  5639                           
  5640  0076                     ?_returnReset:	
  5641                           ; 1 bytes @ 0x0
  5642                           
  5643  0076                     ?_mssp1_clearIRQ:	
  5644                           ; 1 bytes @ 0x0
  5645                           
  5646  0076                     ??_mssp1_clearIRQ:	
  5647                           ; 1 bytes @ 0x0
  5648                           
  5649  0076                     ?_i2c_busCollisionISR:	
  5650                           ; 1 bytes @ 0x0
  5651                           
  5652  0076                     ??_i2c_busCollisionISR:	
  5653                           ; 1 bytes @ 0x0
  5654                           
  5655  0076                     ?_i2c_ISR:	
  5656                           ; 1 bytes @ 0x0
  5657                           
  5658  0076                     ?_i2c1_driver_start:	
  5659                           ; 1 bytes @ 0x0
  5660                           
  5661  0076                     ?_i2c1_driver_resetBus:	
  5662                           ; 1 bytes @ 0x0
  5663                           
  5664  0076                     ??_i2c1_driver_resetBus:	
  5665                           ; 1 bytes @ 0x0
  5666                           
  5667  0076                     ?_i2c1_driver_restart:	
  5668                           ; 1 bytes @ 0x0
  5669                           
  5670  0076                     ?_i2c1_driver_stop:	
  5671                           ; 1 bytes @ 0x0
  5672                           
  5673  0076                     ?_i2c1_driver_TXData:	
  5674                           ; 1 bytes @ 0x0
  5675                           
  5676  0076                     ?_i2c1_driver_startRX:	
  5677                           ; 1 bytes @ 0x0
  5678                           
  5679  0076                     ?_i2c1_driver_sendACK:	
  5680                           ; 1 bytes @ 0x0
  5681                           
  5682  0076                     ??_i2c1_driver_sendACK:	
  5683                           ; 1 bytes @ 0x0
  5684                           
  5685  0076                     ?_i2c1_driver_sendNACK:	
  5686                           ; 1 bytes @ 0x0
  5687                           
  5688  0076                     ??_i2c1_driver_isNACK:	
  5689                           ; 1 bytes @ 0x0
  5690                           
  5691  0076                     ?_i2c1_driver_getRXData:	
  5692                           ; 1 bytes @ 0x0
  5693                           
  5694  0076                     ?_mssp1_setIRQ:	
  5695                           ; 1 bytes @ 0x0
  5696                           
  5697  0076                     ??_mssp1_setIRQ:	
  5698                           ; 1 bytes @ 0x0
  5699                           
  5700  0076                     ?_i2c1_driver_clearBusCollision:	
  5701                           ; 1 bytes @ 0x0
  5702                           
  5703  0076                     ??_i2c1_driver_clearBusCollision:	
  5704                           ; 1 bytes @ 0x0
  5705                           
  5706  0076                     ?_PIN_MANAGER_IOC:	
  5707                           ; 1 bytes @ 0x0
  5708                           
  5709  0076                     ??_PIN_MANAGER_IOC:	
  5710                           ; 1 bytes @ 0x0
  5711                           
  5712  0076                     ?_PMD_Initialize:	
  5713                           ; 1 bytes @ 0x0
  5714                           
  5715  0076                     ?_PIN_MANAGER_Initialize:	
  5716                           ; 1 bytes @ 0x0
  5717                           
  5718  0076                     ?_OSCILLATOR_Initialize:	
  5719                           ; 1 bytes @ 0x0
  5720                           
  5721  0076                     ?_WDT_Initialize:	
  5722                           ; 1 bytes @ 0x0
  5723                           
  5724  0076                     ?_SPI2_Initialize:	
  5725                           ; 1 bytes @ 0x0
  5726                           
  5727  0076                     ?_PWM1_Initialize:	
  5728                           ; 1 bytes @ 0x0
  5729                           
  5730  0076                     ?_ADC_Initialize:	
  5731                           ; 1 bytes @ 0x0
  5732                           
  5733  0076                     ?_TMR2_Initialize:	
  5734                           ; 1 bytes @ 0x0
  5735                           
  5736  0076                     ?_EUSART_Initialize:	
  5737                           ; 1 bytes @ 0x0
  5738                           
  5739  0076                     ?_EUSART_Receive_ISR:	
  5740                           ; 1 bytes @ 0x0
  5741                           
  5742  0076                     ?_EUSART_Transmit_ISR:	
  5743                           ; 1 bytes @ 0x0
  5744                           
  5745  0076                     ??_EUSART_Transmit_ISR:	
  5746                           ; 1 bytes @ 0x0
  5747                           
  5748  0076                     ?_EUSART_DefaultFramingErrorHandler:	
  5749                           ; 1 bytes @ 0x0
  5750                           
  5751  0076                     ??_EUSART_DefaultFramingErrorHandler:	
  5752                           ; 1 bytes @ 0x0
  5753                           
  5754  0076                     ?_EUSART_DefaultOverrunErrorHandler:	
  5755                           ; 1 bytes @ 0x0
  5756                           
  5757  0076                     ??_EUSART_DefaultOverrunErrorHandler:	
  5758                           ; 1 bytes @ 0x0
  5759                           
  5760  0076                     ?_EUSART_DefaultErrorHandler:	
  5761                           ; 1 bytes @ 0x0
  5762                           
  5763  0076                     ?_EUSART_RxDataHandler:	
  5764                           ; 1 bytes @ 0x0
  5765                           
  5766  0076                     ??_EUSART_RxDataHandler:	
  5767                           ; 1 bytes @ 0x0
  5768                           
  5769  0076                     ?_Display_Clear:	
  5770                           ; 1 bytes @ 0x0
  5771                           
  5772  0076                     ?_On_Off:	
  5773                           ; 1 bytes @ 0x0
  5774                           
  5775  0076                     ?_PIR_Sensor:	
  5776                           ; 1 bytes @ 0x0
  5777                           
  5778  0076                     ?_initialize:	
  5779                           ; 1 bytes @ 0x0
  5780                           
  5781  0076                     ?_enableGestureSensor:	
  5782                           ; 1 bytes @ 0x0
  5783                           
  5784  0076                     ?_UART_Byte:	
  5785                           ; 1 bytes @ 0x0
  5786                           
  5787  0076                     ?_Get_ADC:	
  5788                           ; 1 bytes @ 0x0
  5789                           
  5790  0076                     ?_wireReadDataByte:	
  5791                           ; 1 bytes @ 0x0
  5792                           
  5793  0076                     ?_setLEDDrive:	
  5794                           ; 1 bytes @ 0x0
  5795                           
  5796  0076                     ?_setProximityGain:	
  5797                           ; 1 bytes @ 0x0
  5798                           
  5799  0076                     ?_setAmbientLightGain:	
  5800                           ; 1 bytes @ 0x0
  5801                           
  5802  0076                     ?_setProxIntLowThresh:	
  5803                           ; 1 bytes @ 0x0
  5804                           
  5805  0076                     ?_setProxIntHighThresh:	
  5806                           ; 1 bytes @ 0x0
  5807                           
  5808  0076                     ?_setGestureEnterThresh:	
  5809                           ; 1 bytes @ 0x0
  5810                           
  5811  0076                     ?_setGestureExitThresh:	
  5812                           ; 1 bytes @ 0x0
  5813                           
  5814  0076                     ?_setGestureGain:	
  5815                           ; 1 bytes @ 0x0
  5816                           
  5817  0076                     ?_setGestureLEDDrive:	
  5818                           ; 1 bytes @ 0x0
  5819                           
  5820  0076                     ?_setGestureWaitTime:	
  5821                           ; 1 bytes @ 0x0
  5822                           
  5823  0076                     ?_setGestureIntEnable:	
  5824                           ; 1 bytes @ 0x0
  5825                           
  5826  0076                     ?_getMode:	
  5827                           ; 1 bytes @ 0x0
  5828                           
  5829  0076                     ?_resetGestureParameters:	
  5830                           ; 1 bytes @ 0x0
  5831                           
  5832  0076                     ?_setLEDBoost:	
  5833                           ; 1 bytes @ 0x0
  5834                           
  5835  0076                     ?_setGestureMode:	
  5836                           ; 1 bytes @ 0x0
  5837                           
  5838  0076                     ?_enablePower:	
  5839                           ; 1 bytes @ 0x0
  5840                           
  5841  0076                     ?_I2C_Start:	
  5842                           ; 1 bytes @ 0x0
  5843                           
  5844  0076                     ?_I2C_Write_Byte:	
  5845                           ; 1 bytes @ 0x0
  5846                           
  5847  0076                     ?_I2C_ReStart:	
  5848                           ; 1 bytes @ 0x0
  5849                           
  5850  0076                     ?_I2C_Read_Byte:	
  5851                           ; 1 bytes @ 0x0
  5852                           
  5853  0076                     ?_I2C_Send_NACK:	
  5854                           ; 1 bytes @ 0x0
  5855                           
  5856  0076                     ?_I2C_Stop:	
  5857                           ; 1 bytes @ 0x0
  5858                           
  5859  0076                     ?_do_I2C_RESET:	
  5860                           ; 1 bytes @ 0x0
  5861                           
  5862  0076                     ??_do_I2C_RESET:	
  5863                           ; 1 bytes @ 0x0
  5864                           
  5865  0076                     ?_do_I2C_IDLE:	
  5866                           ; 1 bytes @ 0x0
  5867                           
  5868  0076                     ??_do_I2C_IDLE:	
  5869                           ; 1 bytes @ 0x0
  5870                           
  5871  0076                     ?_do_I2C_SEND_RESTART_READ:	
  5872                           ; 1 bytes @ 0x0
  5873                           
  5874  0076                     ??_do_I2C_SEND_RESTART_READ:	
  5875                           ; 1 bytes @ 0x0
  5876                           
  5877  0076                     ?_do_I2C_SEND_RESTART_WRITE:	
  5878                           ; 1 bytes @ 0x0
  5879                           
  5880  0076                     ??_do_I2C_SEND_RESTART_WRITE:	
  5881                           ; 1 bytes @ 0x0
  5882                           
  5883  0076                     ?_do_I2C_SEND_RESTART:	
  5884                           ; 1 bytes @ 0x0
  5885                           
  5886  0076                     ??_do_I2C_SEND_RESTART:	
  5887                           ; 1 bytes @ 0x0
  5888                           
  5889  0076                     ?_do_I2C_SEND_STOP:	
  5890                           ; 1 bytes @ 0x0
  5891                           
  5892  0076                     ??_do_I2C_SEND_STOP:	
  5893                           ; 1 bytes @ 0x0
  5894                           
  5895  0076                     ?_do_I2C_SEND_ADR_READ:	
  5896                           ; 1 bytes @ 0x0
  5897                           
  5898  0076                     ??_do_I2C_SEND_ADR_READ:	
  5899                           ; 1 bytes @ 0x0
  5900                           
  5901  0076                     ?_do_I2C_SEND_ADR_WRITE:	
  5902                           ; 1 bytes @ 0x0
  5903                           
  5904  0076                     ??_do_I2C_SEND_ADR_WRITE:	
  5905                           ; 1 bytes @ 0x0
  5906                           
  5907  0076                     ?_do_I2C_RCEN:	
  5908                           ; 1 bytes @ 0x0
  5909                           
  5910  0076                     ??_do_I2C_RCEN:	
  5911                           ; 1 bytes @ 0x0
  5912                           
  5913  0076                     ?_do_I2C_DO_ACK:	
  5914                           ; 1 bytes @ 0x0
  5915                           
  5916  0076                     ??_do_I2C_DO_ACK:	
  5917                           ; 1 bytes @ 0x0
  5918                           
  5919  0076                     ?_do_I2C_DO_NACK_STOP:	
  5920                           ; 1 bytes @ 0x0
  5921                           
  5922  0076                     ??_do_I2C_DO_NACK_STOP:	
  5923                           ; 1 bytes @ 0x0
  5924                           
  5925  0076                     ?_do_I2C_DO_NACK_RESTART:	
  5926                           ; 1 bytes @ 0x0
  5927                           
  5928  0076                     ??_do_I2C_DO_NACK_RESTART:	
  5929                           ; 1 bytes @ 0x0
  5930                           
  5931  0076                     ?_do_I2C_DO_ADDRESS_NACK:	
  5932                           ; 1 bytes @ 0x0
  5933                           
  5934  0076                     ??_do_I2C_DO_ADDRESS_NACK:	
  5935                           ; 1 bytes @ 0x0
  5936                           
  5937  0076                     ?_do_I2C_TX:	
  5938                           ; 1 bytes @ 0x0
  5939                           
  5940  0076                     ??_do_I2C_TX:	
  5941                           ; 1 bytes @ 0x0
  5942                           
  5943  0076                     ?_do_I2C_RX:	
  5944                           ; 1 bytes @ 0x0
  5945                           
  5946  0076                     ??_do_I2C_RX:	
  5947                           ; 1 bytes @ 0x0
  5948                           
  5949  0076                     ?_do_I2C_TX_EMPTY:	
  5950                           ; 1 bytes @ 0x0
  5951                           
  5952  0076                     ??_do_I2C_TX_EMPTY:	
  5953                           ; 1 bytes @ 0x0
  5954                           
  5955  0076                     ?_INTERRUPT_InterruptManager:	
  5956                           ; 1 bytes @ 0x0
  5957                           
  5958  0076                     ?_SYSTEM_Initialize:	
  5959                           ; 1 bytes @ 0x0
  5960                           
  5961  0076                     ?_SPI2_Exchange8bit:	
  5962                           ; 1 bytes @ 0x0
  5963                           
  5964  0076                     ?_EUSART_Write:	
  5965                           ; 1 bytes @ 0x0
  5966                           
  5967  0076                     ?_putch:	
  5968                           ; 1 bytes @ 0x0
  5969                           
  5970  0076                     ?_main:	
  5971                           ; 1 bytes @ 0x0
  5972                           
  5973  0076                     ?_SPI_Write:	
  5974                           ; 1 bytes @ 0x0
  5975                           
  5976  0076                     ?i1_i2c1_driver_restart:	
  5977                           ; 1 bytes @ 0x0
  5978                           
  5979  0076                     ??i1_i2c1_driver_restart:	
  5980                           ; 1 bytes @ 0x0
  5981                           
  5982  0076                     ?i1_i2c1_driver_stop:	
  5983                           ; 1 bytes @ 0x0
  5984                           
  5985  0076                     ??i1_i2c1_driver_stop:	
  5986                           ; 1 bytes @ 0x0
  5987                           
  5988  0076                     ?i1_i2c1_driver_startRX:	
  5989                           ; 1 bytes @ 0x0
  5990                           
  5991  0076                     ??i1_i2c1_driver_startRX:	
  5992                           ; 1 bytes @ 0x0
  5993                           
  5994  0076                     ?i1_i2c1_driver_getRXData:	
  5995                           ; 1 bytes @ 0x0
  5996                           
  5997  0076                     ??i1_i2c1_driver_getRXData:	
  5998                           ; 1 bytes @ 0x0
  5999                           
  6000  0076                     ?i1_i2c1_driver_TXData:	
  6001                           ; 1 bytes @ 0x0
  6002                           
  6003  0076                     ??i1_i2c1_driver_TXData:	
  6004                           ; 1 bytes @ 0x0
  6005                           
  6006  0076                     ?i1_i2c1_driver_sendNACK:	
  6007                           ; 1 bytes @ 0x0
  6008                           
  6009  0076                     ??i1_i2c1_driver_sendNACK:	
  6010                           ; 1 bytes @ 0x0
  6011                           
  6012  0076                     returnStop@p:	
  6013                           ; 1 bytes @ 0x0
  6014                           
  6015  0076                     returnReset@p:	
  6016                           ; 1 bytes @ 0x0
  6017                           
  6018  0076                     i1i2c1_driver_TXData@d:	
  6019                           ; 1 bytes @ 0x0
  6020                           
  6021                           
  6022                           ; 1 bytes @ 0x0
  6023  0076                     	ds	1
  6024  0077                     ??_returnStop:	
  6025  0077                     ??_returnReset:	
  6026                           ; 1 bytes @ 0x1
  6027                           
  6028  0077                     ??_EUSART_Receive_ISR:	
  6029                           ; 1 bytes @ 0x1
  6030                           
  6031  0077                     ??_EUSART_DefaultErrorHandler:	
  6032                           ; 1 bytes @ 0x1
  6033                           
  6034                           
  6035                           ; 1 bytes @ 0x1
  6036  0077                     	ds	2
  6037  0079                     ??_i2c_ISR:	
  6038                           
  6039                           ; 1 bytes @ 0x3
  6040  0079                     	ds	3
  6041  007C                     ??_INTERRUPT_InterruptManager:	
  6042                           
  6043                           	psect	cstackBANK0
  6044  0020                     __pcstackBANK0:	
  6045                           ; 1 bytes @ 0x6
  6046                           
  6047  0020                     ??_i2c1_driver_open:	
  6048  0020                     ??_i2c1_driver_start:	
  6049                           ; 1 bytes @ 0x0
  6050                           
  6051  0020                     ??_i2c1_driver_restart:	
  6052                           ; 1 bytes @ 0x0
  6053                           
  6054  0020                     ??_i2c1_driver_stop:	
  6055                           ; 1 bytes @ 0x0
  6056                           
  6057  0020                     ??_i2c1_driver_TXData:	
  6058                           ; 1 bytes @ 0x0
  6059                           
  6060  0020                     ??_i2c1_driver_startRX:	
  6061                           ; 1 bytes @ 0x0
  6062                           
  6063  0020                     ??_i2c1_driver_sendNACK:	
  6064                           ; 1 bytes @ 0x0
  6065                           
  6066  0020                     ??_i2c1_driver_getRXData:	
  6067                           ; 1 bytes @ 0x0
  6068                           
  6069  0020                     ??_PMD_Initialize:	
  6070                           ; 1 bytes @ 0x0
  6071                           
  6072  0020                     ??_PIN_MANAGER_Initialize:	
  6073                           ; 1 bytes @ 0x0
  6074                           
  6075  0020                     ??_OSCILLATOR_Initialize:	
  6076                           ; 1 bytes @ 0x0
  6077                           
  6078  0020                     ??_WDT_Initialize:	
  6079                           ; 1 bytes @ 0x0
  6080                           
  6081  0020                     ??_SPI2_Initialize:	
  6082                           ; 1 bytes @ 0x0
  6083                           
  6084  0020                     ??_PWM1_Initialize:	
  6085                           ; 1 bytes @ 0x0
  6086                           
  6087  0020                     ??_ADC_Initialize:	
  6088                           ; 1 bytes @ 0x0
  6089                           
  6090  0020                     ??_TMR2_Initialize:	
  6091                           ; 1 bytes @ 0x0
  6092                           
  6093  0020                     ?_EUSART_SetRxInterruptHandler:	
  6094                           ; 1 bytes @ 0x0
  6095                           
  6096  0020                     ?_EUSART_SetTxInterruptHandler:	
  6097                           ; 1 bytes @ 0x0
  6098                           
  6099  0020                     ?_EUSART_SetFramingErrorHandler:	
  6100                           ; 1 bytes @ 0x0
  6101                           
  6102  0020                     ?_EUSART_SetOverrunErrorHandler:	
  6103                           ; 1 bytes @ 0x0
  6104                           
  6105  0020                     ?_EUSART_SetErrorHandler:	
  6106                           ; 1 bytes @ 0x0
  6107                           
  6108  0020                     ??_PIR_Sensor:	
  6109                           ; 1 bytes @ 0x0
  6110                           
  6111  0020                     ??_resetGestureParameters:	
  6112                           ; 1 bytes @ 0x0
  6113                           
  6114  0020                     ??_I2C_Start:	
  6115                           ; 1 bytes @ 0x0
  6116                           
  6117  0020                     ??_I2C_ReStart:	
  6118                           ; 1 bytes @ 0x0
  6119                           
  6120  0020                     ??_I2C_Send_NACK:	
  6121                           ; 1 bytes @ 0x0
  6122                           
  6123  0020                     ??_I2C_Stop:	
  6124                           ; 1 bytes @ 0x0
  6125                           
  6126  0020                     ??_i2c1_driver_isBufferFull:	
  6127                           ; 1 bytes @ 0x0
  6128                           
  6129  0020                     ??_SPI2_Exchange8bit:	
  6130                           ; 1 bytes @ 0x0
  6131                           
  6132  0020                     ??_EUSART_Write:	
  6133                           ; 1 bytes @ 0x0
  6134                           
  6135  0020                     ?_strlen:	
  6136                           ; 1 bytes @ 0x0
  6137                           
  6138  0020                     ?_ADC_GetConversion:	
  6139                           ; 2 bytes @ 0x0
  6140                           
  6141  0020                     ?___aodiv:	
  6142                           ; 2 bytes @ 0x0
  6143                           
  6144  0020                     ?___aomod:	
  6145                           ; 8 bytes @ 0x0
  6146                           
  6147  0020                     i2c1_driver_TXData@d:	
  6148                           ; 8 bytes @ 0x0
  6149                           
  6150  0020                     SPI2_Exchange8bit@data:	
  6151                           ; 1 bytes @ 0x0
  6152                           
  6153  0020                     EUSART_SetFramingErrorHandler@interruptHandler:	
  6154                           ; 1 bytes @ 0x0
  6155                           
  6156  0020                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  6157                           ; 2 bytes @ 0x0
  6158                           
  6159  0020                     EUSART_SetErrorHandler@interruptHandler:	
  6160                           ; 2 bytes @ 0x0
  6161                           
  6162  0020                     EUSART_SetTxInterruptHandler@interruptHandler:	
  6163                           ; 2 bytes @ 0x0
  6164                           
  6165  0020                     EUSART_SetRxInterruptHandler@interruptHandler:	
  6166                           ; 2 bytes @ 0x0
  6167                           
  6168  0020                     strlen@s:	
  6169                           ; 2 bytes @ 0x0
  6170                           
  6171  0020                     ___aodiv@divisor:	
  6172                           ; 2 bytes @ 0x0
  6173                           
  6174  0020                     ___aomod@divisor:	
  6175                           ; 8 bytes @ 0x0
  6176                           
  6177                           
  6178                           ; 8 bytes @ 0x0
  6179  0020                     	ds	1
  6180  0021                     ??_I2C_Write_Byte:	
  6181  0021                     ??_I2C_Read_Byte:	
  6182                           ; 1 bytes @ 0x1
  6183                           
  6184  0021                     ??_SPI_Write:	
  6185                           ; 1 bytes @ 0x1
  6186                           
  6187  0021                     EUSART_Write@txData:	
  6188                           ; 1 bytes @ 0x1
  6189                           
  6190                           
  6191                           ; 1 bytes @ 0x1
  6192  0021                     	ds	1
  6193  0022                     ??_EUSART_Initialize:	
  6194  0022                     ??_EUSART_SetRxInterruptHandler:	
  6195                           ; 1 bytes @ 0x2
  6196                           
  6197  0022                     ??_EUSART_SetTxInterruptHandler:	
  6198                           ; 1 bytes @ 0x2
  6199                           
  6200  0022                     ??_EUSART_SetFramingErrorHandler:	
  6201                           ; 1 bytes @ 0x2
  6202                           
  6203  0022                     ??_EUSART_SetOverrunErrorHandler:	
  6204                           ; 1 bytes @ 0x2
  6205                           
  6206  0022                     ??_EUSART_SetErrorHandler:	
  6207                           ; 1 bytes @ 0x2
  6208                           
  6209  0022                     ??_strlen:	
  6210                           ; 1 bytes @ 0x2
  6211                           
  6212  0022                     ??_ADC_GetConversion:	
  6213                           ; 1 bytes @ 0x2
  6214                           
  6215  0022                     ??_putch:	
  6216                           ; 1 bytes @ 0x2
  6217                           
  6218  0022                     putch@txData:	
  6219                           ; 1 bytes @ 0x2
  6220                           
  6221  0022                     SPI_Write@incoming:	
  6222                           ; 1 bytes @ 0x2
  6223                           
  6224                           
  6225                           ; 1 bytes @ 0x2
  6226  0022                     	ds	1
  6227  0023                     ??_Display_Clear:	
  6228  0023                     ??_SYSTEM_Initialize:	
  6229                           ; 1 bytes @ 0x3
  6230                           
  6231  0023                     ?_fputc:	
  6232                           ; 1 bytes @ 0x3
  6233                           
  6234  0023                     ADC_GetConversion@channel:	
  6235                           ; 2 bytes @ 0x3
  6236                           
  6237  0023                     I2C_Write_Byte@Byte:	
  6238                           ; 1 bytes @ 0x3
  6239                           
  6240  0023                     fputc@c:	
  6241                           ; 1 bytes @ 0x3
  6242                           
  6243  0023                     strlen@a:	
  6244                           ; 2 bytes @ 0x3
  6245                           
  6246                           
  6247                           ; 2 bytes @ 0x3
  6248  0023                     	ds	1
  6249  0024                     ??_On_Off:	
  6250  0024                     I2C_Write_Byte@count:	
  6251                           ; 1 bytes @ 0x4
  6252                           
  6253                           
  6254                           ; 2 bytes @ 0x4
  6255  0024                     	ds	1
  6256  0025                     ?_Display_Name:	
  6257  0025                     ?_strcpy:	
  6258                           ; 1 bytes @ 0x5
  6259                           
  6260  0025                     fputc@fp:	
  6261                           ; 1 bytes @ 0x5
  6262                           
  6263  0025                     strcpy@src:	
  6264                           ; 1 bytes @ 0x5
  6265                           
  6266  0025                     Display_Name@string1:	
  6267                           ; 1 bytes @ 0x5
  6268                           
  6269                           
  6270                           ; 2 bytes @ 0x5
  6271  0025                     	ds	1
  6272  0026                     ??_strcpy:	
  6273  0026                     ??_wireReadDataByte:	
  6274                           ; 1 bytes @ 0x6
  6275                           
  6276  0026                     ??_fputc:	
  6277                           ; 1 bytes @ 0x6
  6278                           
  6279  0026                     ?_wireWriteDataByte:	
  6280                           ; 1 bytes @ 0x6
  6281                           
  6282  0026                     wireWriteDataByte@val:	
  6283                           ; 2 bytes @ 0x6
  6284                           
  6285                           
  6286                           ; 1 bytes @ 0x6
  6287  0026                     	ds	1
  6288  0027                     ??_Display_Name:	
  6289  0027                     wireReadDataByte@reg:	
  6290                           ; 1 bytes @ 0x7
  6291                           
  6292  0027                     strcpy@s:	
  6293                           ; 1 bytes @ 0x7
  6294                           
  6295  0027                     On_Off@val:	
  6296                           ; 1 bytes @ 0x7
  6297                           
  6298                           
  6299                           ; 2 bytes @ 0x7
  6300  0027                     	ds	1
  6301  0028                     wireReadDataByte@val:	
  6302  0028                     strcpy@d:	
  6303                           ; 1 bytes @ 0x8
  6304                           
  6305  0028                     Display_Name@length:	
  6306                           ; 1 bytes @ 0x8
  6307                           
  6308  0028                     ___aodiv@dividend:	
  6309                           ; 2 bytes @ 0x8
  6310                           
  6311  0028                     ___aomod@dividend:	
  6312                           ; 8 bytes @ 0x8
  6313                           
  6314                           
  6315                           ; 8 bytes @ 0x8
  6316  0028                     	ds	1
  6317  0029                     ??_wireWriteDataByte:	
  6318  0029                     ??_getMode:	
  6319                           ; 1 bytes @ 0x9
  6320                           
  6321  0029                     wireWriteDataByte@reg:	
  6322                           ; 1 bytes @ 0x9
  6323                           
  6324  0029                     strcpy@dest:	
  6325                           ; 1 bytes @ 0x9
  6326                           
  6327                           
  6328                           ; 1 bytes @ 0x9
  6329  0029                     	ds	1
  6330  002A                     ?_strcat:	
  6331  002A                     ??_setLEDDrive:	
  6332                           ; 1 bytes @ 0xA
  6333                           
  6334  002A                     ??_setProximityGain:	
  6335                           ; 1 bytes @ 0xA
  6336                           
  6337  002A                     ??_setAmbientLightGain:	
  6338                           ; 1 bytes @ 0xA
  6339                           
  6340  002A                     ??_setProxIntLowThresh:	
  6341                           ; 1 bytes @ 0xA
  6342                           
  6343  002A                     ??_setProxIntHighThresh:	
  6344                           ; 1 bytes @ 0xA
  6345                           
  6346  002A                     ?_setLightIntLowThreshold:	
  6347                           ; 1 bytes @ 0xA
  6348                           
  6349  002A                     ?_setLightIntHighThreshold:	
  6350                           ; 1 bytes @ 0xA
  6351                           
  6352  002A                     ??_setGestureEnterThresh:	
  6353                           ; 1 bytes @ 0xA
  6354                           
  6355  002A                     ??_setGestureExitThresh:	
  6356                           ; 1 bytes @ 0xA
  6357                           
  6358  002A                     ??_setGestureGain:	
  6359                           ; 1 bytes @ 0xA
  6360                           
  6361  002A                     ??_setGestureLEDDrive:	
  6362                           ; 1 bytes @ 0xA
  6363                           
  6364  002A                     ??_setGestureWaitTime:	
  6365                           ; 1 bytes @ 0xA
  6366                           
  6367  002A                     ??_setGestureIntEnable:	
  6368                           ; 1 bytes @ 0xA
  6369                           
  6370  002A                     ??_setLEDBoost:	
  6371                           ; 1 bytes @ 0xA
  6372                           
  6373  002A                     ??_setGestureMode:	
  6374                           ; 1 bytes @ 0xA
  6375                           
  6376  002A                     getMode@enable_value:	
  6377                           ; 1 bytes @ 0xA
  6378                           
  6379  002A                     strcat@src:	
  6380                           ; 1 bytes @ 0xA
  6381                           
  6382  002A                     Display_Name@i:	
  6383                           ; 1 bytes @ 0xA
  6384                           
  6385  002A                     setLightIntLowThreshold@threshold:	
  6386                           ; 2 bytes @ 0xA
  6387                           
  6388  002A                     setLightIntHighThreshold@threshold:	
  6389                           ; 2 bytes @ 0xA
  6390                           
  6391                           
  6392                           ; 2 bytes @ 0xA
  6393  002A                     	ds	1
  6394  002B                     ??_strcat:	
  6395  002B                     ?_setMode:	
  6396                           ; 1 bytes @ 0xB
  6397                           
  6398  002B                     ?_fputs:	
  6399                           ; 1 bytes @ 0xB
  6400                           
  6401  002B                     setMode@enable:	
  6402                           ; 2 bytes @ 0xB
  6403                           
  6404  002B                     setAmbientLightGain@drive:	
  6405                           ; 1 bytes @ 0xB
  6406                           
  6407  002B                     setProxIntLowThresh@threshold:	
  6408                           ; 1 bytes @ 0xB
  6409                           
  6410  002B                     setProxIntHighThresh@threshold:	
  6411                           ; 1 bytes @ 0xB
  6412                           
  6413  002B                     setGestureEnterThresh@threshold:	
  6414                           ; 1 bytes @ 0xB
  6415                           
  6416  002B                     setGestureExitThresh@threshold:	
  6417                           ; 1 bytes @ 0xB
  6418                           
  6419  002B                     setGestureWaitTime@time:	
  6420                           ; 1 bytes @ 0xB
  6421                           
  6422  002B                     setGestureIntEnable@val:	
  6423                           ; 1 bytes @ 0xB
  6424                           
  6425  002B                     setGestureMode@mode:	
  6426                           ; 1 bytes @ 0xB
  6427                           
  6428  002B                     fputs@fp:	
  6429                           ; 1 bytes @ 0xB
  6430                           
  6431                           
  6432                           ; 1 bytes @ 0xB
  6433  002B                     	ds	1
  6434  002C                     ??_setMode:	
  6435  002C                     ??_setLightIntLowThreshold:	
  6436                           ; 1 bytes @ 0xC
  6437                           
  6438  002C                     ??_setLightIntHighThreshold:	
  6439                           ; 1 bytes @ 0xC
  6440                           
  6441  002C                     ??_fputs:	
  6442                           ; 1 bytes @ 0xC
  6443                           
  6444  002C                     setLEDDrive@val:	
  6445                           ; 1 bytes @ 0xC
  6446                           
  6447  002C                     setProximityGain@val:	
  6448                           ; 1 bytes @ 0xC
  6449                           
  6450  002C                     setAmbientLightGain@val:	
  6451                           ; 1 bytes @ 0xC
  6452                           
  6453  002C                     setGestureGain@val:	
  6454                           ; 1 bytes @ 0xC
  6455                           
  6456  002C                     setGestureLEDDrive@val:	
  6457                           ; 1 bytes @ 0xC
  6458                           
  6459  002C                     setGestureWaitTime@val:	
  6460                           ; 1 bytes @ 0xC
  6461                           
  6462  002C                     setGestureIntEnable@enable:	
  6463                           ; 1 bytes @ 0xC
  6464                           
  6465  002C                     setLEDBoost@val:	
  6466                           ; 1 bytes @ 0xC
  6467                           
  6468  002C                     setGestureMode@val:	
  6469                           ; 1 bytes @ 0xC
  6470                           
  6471                           
  6472                           ; 1 bytes @ 0xC
  6473  002C                     	ds	1
  6474  002D                     setLEDDrive@drive:	
  6475  002D                     setProximityGain@drive:	
  6476                           ; 1 bytes @ 0xD
  6477                           
  6478  002D                     setLightIntLowThreshold@val_low:	
  6479                           ; 1 bytes @ 0xD
  6480                           
  6481  002D                     setLightIntHighThreshold@val_low:	
  6482                           ; 1 bytes @ 0xD
  6483                           
  6484  002D                     setGestureGain@gain:	
  6485                           ; 1 bytes @ 0xD
  6486                           
  6487  002D                     setGestureLEDDrive@drive:	
  6488                           ; 1 bytes @ 0xD
  6489                           
  6490  002D                     setLEDBoost@boost:	
  6491                           ; 1 bytes @ 0xD
  6492                           
  6493                           
  6494                           ; 1 bytes @ 0xD
  6495  002D                     	ds	1
  6496  002E                     setMode@reg_val:	
  6497  002E                     setLightIntLowThreshold@val_high:	
  6498                           ; 1 bytes @ 0xE
  6499                           
  6500  002E                     setLightIntHighThreshold@val_high:	
  6501                           ; 1 bytes @ 0xE
  6502                           
  6503  002E                     strcat@dest:	
  6504                           ; 1 bytes @ 0xE
  6505                           
  6506                           
  6507                           ; 1 bytes @ 0xE
  6508  002E                     	ds	1
  6509  002F                     setMode@mode:	
  6510  002F                     fputs@c:	
  6511                           ; 1 bytes @ 0xF
  6512                           
  6513                           
  6514                           ; 1 bytes @ 0xF
  6515  002F                     	ds	1
  6516  0030                     ??_initialize:	
  6517  0030                     ??_enableGestureSensor:	
  6518                           ; 1 bytes @ 0x10
  6519                           
  6520  0030                     ??_enablePower:	
  6521                           ; 1 bytes @ 0x10
  6522                           
  6523  0030                     ??___aodiv:	
  6524                           ; 1 bytes @ 0x10
  6525                           
  6526  0030                     ??___aomod:	
  6527                           ; 1 bytes @ 0x10
  6528                           
  6529  0030                     fputs@i:	
  6530                           ; 1 bytes @ 0x10
  6531                           
  6532                           
  6533                           ; 2 bytes @ 0x10
  6534  0030                     	ds	1
  6535  0031                     initialize@id:	
  6536  0031                     enableGestureSensor@interrupts:	
  6537                           ; 1 bytes @ 0x11
  6538                           
  6539  0031                     ___aodiv@counter:	
  6540                           ; 1 bytes @ 0x11
  6541                           
  6542  0031                     ___aomod@counter:	
  6543                           ; 1 bytes @ 0x11
  6544                           
  6545                           
  6546                           ; 1 bytes @ 0x11
  6547  0031                     	ds	1
  6548  0032                     ___aodiv@sign:	
  6549  0032                     ___aomod@sign:	
  6550                           ; 1 bytes @ 0x12
  6551                           
  6552  0032                     fputs@s:	
  6553                           ; 1 bytes @ 0x12
  6554                           
  6555                           
  6556                           ; 1 bytes @ 0x12
  6557  0032                     	ds	1
  6558  0033                     ?_abs:	
  6559  0033                     ?_pad:	
  6560                           ; 2 bytes @ 0x13
  6561                           
  6562  0033                     pad@buf:	
  6563                           ; 2 bytes @ 0x13
  6564                           
  6565  0033                     abs@a:	
  6566                           ; 1 bytes @ 0x13
  6567                           
  6568  0033                     ___aodiv@quotient:	
  6569                           ; 2 bytes @ 0x13
  6570                           
  6571                           
  6572                           ; 8 bytes @ 0x13
  6573  0033                     	ds	1
  6574  0034                     pad@p:	
  6575                           
  6576                           ; 2 bytes @ 0x14
  6577  0034                     	ds	1
  6578  0035                     ??_abs:	
  6579                           
  6580                           ; 1 bytes @ 0x15
  6581  0035                     	ds	1
  6582  0036                     ??_pad:	
  6583                           
  6584                           ; 1 bytes @ 0x16
  6585  0036                     	ds	1
  6586  0037                     pad@i:	
  6587                           
  6588                           ; 2 bytes @ 0x17
  6589  0037                     	ds	2
  6590  0039                     pad@w:	
  6591                           
  6592                           ; 2 bytes @ 0x19
  6593  0039                     	ds	2
  6594  003B                     pad@fp:	
  6595                           
  6596                           ; 1 bytes @ 0x1B
  6597  003B                     	ds	1
  6598  003C                     ?_dtoa:	
  6599  003C                     dtoa@d:	
  6600                           ; 2 bytes @ 0x1C
  6601                           
  6602                           
  6603                           ; 8 bytes @ 0x1C
  6604  003C                     	ds	8
  6605  0044                     ??_dtoa:	
  6606                           
  6607                           ; 1 bytes @ 0x24
  6608  0044                     	ds	3
  6609  0047                     dtoa@fp:	
  6610                           
  6611                           ; 1 bytes @ 0x27
  6612  0047                     	ds	1
  6613  0048                     _dtoa$2098:	
  6614                           
  6615                           ; 2 bytes @ 0x28
  6616  0048                     	ds	2
  6617  004A                     dtoa@p:	
  6618                           
  6619                           ; 2 bytes @ 0x2A
  6620  004A                     	ds	2
  6621  004C                     dtoa@w:	
  6622                           
  6623                           ; 2 bytes @ 0x2C
  6624  004C                     	ds	2
  6625  004E                     dtoa@s:	
  6626                           
  6627                           ; 2 bytes @ 0x2E
  6628  004E                     	ds	2
  6629  0050                     dtoa@n:	
  6630                           
  6631                           ; 8 bytes @ 0x30
  6632  0050                     	ds	8
  6633  0058                     dtoa@i:	
  6634                           
  6635                           ; 2 bytes @ 0x38
  6636  0058                     	ds	2
  6637  005A                     ?_vfpfcnvrt:	
  6638  005A                     vfpfcnvrt@fmt:	
  6639                           ; 2 bytes @ 0x3A
  6640                           
  6641                           
  6642                           ; 1 bytes @ 0x3A
  6643  005A                     	ds	1
  6644  005B                     vfpfcnvrt@ap:	
  6645                           
  6646                           ; 1 bytes @ 0x3B
  6647  005B                     	ds	1
  6648  005C                     ??_vfpfcnvrt:	
  6649                           
  6650                           ; 1 bytes @ 0x3C
  6651  005C                     	ds	5
  6652  0061                     vfpfcnvrt@ll:	
  6653                           
  6654                           ; 8 bytes @ 0x41
  6655  0061                     	ds	8
  6656  0069                     vfpfcnvrt@fp:	
  6657                           
  6658                           ; 1 bytes @ 0x49
  6659  0069                     	ds	1
  6660  006A                     ?_vfprintf:	
  6661  006A                     vfprintf@fmt:	
  6662                           ; 2 bytes @ 0x4A
  6663                           
  6664                           
  6665                           ; 2 bytes @ 0x4A
  6666  006A                     	ds	2
  6667  006C                     vfprintf@ap:	
  6668                           
  6669                           ; 1 bytes @ 0x4C
  6670  006C                     	ds	1
  6671  006D                     ??_vfprintf:	
  6672                           
  6673                           ; 1 bytes @ 0x4D
  6674  006D                     	ds	2
  6675  006F                     ??_sprintf:	
  6676                           
  6677                           ; 1 bytes @ 0x4F
  6678  006F                     	ds	1
  6679  0070                     ??_main:	
  6680                           
  6681                           	psect	maintext
  6682  07D2                     __pmaintext:	
  6683                           ; 1 bytes @ 0x50
  6684 ;;
  6685 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  6686 ;;
  6687 ;; *************** function _main *****************
  6688 ;; Defined at:
  6689 ;;		line 93 in file "main.c"
  6690 ;; Parameters:    Size  Location     Type
  6691 ;;		None
  6692 ;; Auto vars:     Size  Location     Type
  6693 ;;  count           2    0        unsigned int 
  6694 ;; Return value:  Size  Location     Type
  6695 ;;                  1    wreg      void 
  6696 ;; Registers used:
  6697 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6698 ;; Tracked objects:
  6699 ;;		On entry : B1F/0
  6700 ;;		On exit  : 0/0
  6701 ;;		Unchanged: 0/0
  6702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6703 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6704 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0
  6705 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6706 ;;      Totals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0
  6707 ;;Total ram usage:        2 bytes
  6708 ;; Hardware stack levels required when called:   15
  6709 ;; This function calls:
  6710 ;;		_Display_Clear
  6711 ;;		_Get_ADC
  6712 ;;		_On_Off
  6713 ;;		_PIR_Sensor
  6714 ;;		_SYSTEM_Initialize
  6715 ;;		_UART_Byte
  6716 ;;		_enableGestureSensor
  6717 ;;		_initialize
  6718 ;; This function is called by:
  6719 ;;		Startup code after reset
  6720 ;; This function uses a non-reentrant model
  6721 ;;
  6722                           
  6723                           
  6724                           ;psect for function _main
  6725  07D2                     _main:	
  6726                           
  6727                           ;main.c: 96:     SYSTEM_Initialize();
  6728                           
  6729                           ;incstack = 0
  6730                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6731  07D2  318A  22F7  3187   	fcall	_SYSTEM_Initialize
  6732                           
  6733                           ;main.c: 102:     (INTCONbits.GIE = 1);
  6734  07D5  178B               	bsf	11,7	;volatile
  6735                           
  6736                           ;main.c: 105:     (INTCONbits.PEIE = 1);
  6737  07D6  170B               	bsf	11,6	;volatile
  6738                           
  6739                           ;main.c: 107:     Display_Clear();
  6740  07D7  3189  21F8  3187   	fcall	_Display_Clear
  6741  07DA                     l7624:	
  6742                           ;main.c: 109:     while(On_Off() != 1);
  6743                           
  6744  07DA  318F  273E  3187   	fcall	_On_Off
  6745  07DD  3A01               	xorlw	1
  6746  07DE  1D03               	skipz
  6747  07DF  2FDA               	goto	l7624
  6748                           
  6749                           ;main.c: 110:     if(PIR_Sensor()) {
  6750  07E0  3189  21C3  3187   	fcall	_PIR_Sensor
  6751  07E3  3A00               	xorlw	0
  6752  07E4  1903               	skipnz
  6753  07E5  2FED               	goto	l926
  6754                           
  6755                           ;main.c: 111:         initialize();
  6756  07E6  3181  21DB  3187   	fcall	_initialize
  6757                           
  6758                           ;main.c: 112:         enableGestureSensor(0);
  6759  07E9  3000               	movlw	0
  6760  07EA  3185  25F8  3187   	fcall	_enableGestureSensor
  6761  07ED                     l926:	
  6762                           ;main.c: 114:     while (1)
  6763                           
  6764                           
  6765                           ;main.c: 115:     {;main.c: 116:         On_Off();
  6766  07ED  318F  273E  3187   	fcall	_On_Off
  6767                           
  6768                           ;main.c: 117:         UART_Byte();
  6769  07F0  3185  2590  3187   	fcall	_UART_Byte
  6770                           
  6771                           ;main.c: 118:         PIR_Sensor();
  6772  07F3  3189  21C3  3187   	fcall	_PIR_Sensor
  6773                           
  6774                           ;main.c: 120:             if(prox) {
  6775  07F6  0021               	movlb	1	; select bank1
  6776  07F7  083D               	movf	_prox^(0+128),w
  6777  07F8  1903               	btfsc	3,2
  6778  07F9  2FED               	goto	l926
  6779                           
  6780                           ;main.c: 125:                 Get_ADC();
  6781  07FA  318D  25AA  3187   	fcall	_Get_ADC
  6782  07FD  2FED               	goto	l926
  6783  07FE                     __end_of_main:	
  6784                           
  6785                           	psect	text1
  6786  01DB                     __ptext1:	
  6787 ;; *************** function _initialize *****************
  6788 ;; Defined at:
  6789 ;;		line 20 in file "APDS9960.c"
  6790 ;; Parameters:    Size  Location     Type
  6791 ;;		None
  6792 ;; Auto vars:     Size  Location     Type
  6793 ;;  id              1   17[BANK0 ] unsigned char 
  6794 ;; Return value:  Size  Location     Type
  6795 ;;                  1    wreg      _Bool 
  6796 ;; Registers used:
  6797 ;;		wreg, status,2, status,0, pclath, cstack
  6798 ;; Tracked objects:
  6799 ;;		On entry : 0/0
  6800 ;;		On exit  : 0/0
  6801 ;;		Unchanged: 0/0
  6802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6803 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6804 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6805 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6806 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6807 ;;Total ram usage:        2 bytes
  6808 ;; Hardware stack levels used:    1
  6809 ;; Hardware stack levels required when called:   10
  6810 ;; This function calls:
  6811 ;;		_i2c1_driver_open
  6812 ;;		_setAmbientLightGain
  6813 ;;		_setGestureEnterThresh
  6814 ;;		_setGestureExitThresh
  6815 ;;		_setGestureGain
  6816 ;;		_setGestureIntEnable
  6817 ;;		_setGestureLEDDrive
  6818 ;;		_setGestureWaitTime
  6819 ;;		_setLEDDrive
  6820 ;;		_setLightIntHighThreshold
  6821 ;;		_setLightIntLowThreshold
  6822 ;;		_setMode
  6823 ;;		_setProxIntHighThresh
  6824 ;;		_setProxIntLowThresh
  6825 ;;		_setProximityGain
  6826 ;;		_wireReadDataByte
  6827 ;;		_wireWriteDataByte
  6828 ;; This function is called by:
  6829 ;;		_main
  6830 ;; This function uses a non-reentrant model
  6831 ;;
  6832                           
  6833                           
  6834                           ;psect for function _initialize
  6835  01DB                     _initialize:	
  6836                           
  6837                           ;APDS9960.c: 25:     i2c1_driver_open();
  6838                           
  6839                           ;incstack = 0
  6840                           ; Regs used in _initialize: [wreg+status,2+status,0+pclath+cstack]
  6841  01DB  3189  21AE  3181   	fcall	_i2c1_driver_open
  6842                           
  6843                           ;APDS9960.c: 31:     id = wireReadDataByte(0x92);
  6844  01DE  3092               	movlw	146
  6845  01DF  318B  23A2  3181   	fcall	_wireReadDataByte
  6846  01E2  0020               	movlb	0	; select bank0
  6847  01E3  00B0               	movwf	??_initialize
  6848  01E4  0830               	movf	??_initialize,w
  6849  01E5  00B1               	movwf	initialize@id
  6850                           
  6851                           ;APDS9960.c: 33:     if( !(id == 0xAB ||id == 0x9C ) )
  6852  01E6  30AB               	movlw	171
  6853  01E7  0631               	xorwf	initialize@id,w
  6854  01E8  1903               	btfsc	3,2
  6855  01E9  29EE               	goto	l7392
  6856  01EA  309C               	movlw	156
  6857  01EB  0631               	xorwf	initialize@id,w
  6858  01EC  1D03               	btfss	3,2
  6859  01ED  0008               	return
  6860  01EE                     l7392:	
  6861                           
  6862                           ;APDS9960.c: 39:     setMode(7, 0);
  6863  01EE  01AB               	clrf	setMode@enable
  6864  01EF  3007               	movlw	7
  6865  01F0  3186  26A7  3181   	fcall	_setMode
  6866                           
  6867                           ;APDS9960.c: 41:     wireWriteDataByte(0x81, 219);
  6868  01F3  30DB               	movlw	219
  6869  01F4  0020               	movlb	0	; select bank0
  6870  01F5  00B0               	movwf	??_initialize
  6871  01F6  0830               	movf	??_initialize,w
  6872  01F7  00A6               	movwf	wireWriteDataByte@val
  6873  01F8  3081               	movlw	129
  6874  01F9  318B  2312  3181   	fcall	_wireWriteDataByte
  6875                           
  6876                           ;APDS9960.c: 42:     wireWriteDataByte(0x83, 246);
  6877  01FC  30F6               	movlw	246
  6878  01FD  0020               	movlb	0	; select bank0
  6879  01FE  00B0               	movwf	??_initialize
  6880  01FF  0830               	movf	??_initialize,w
  6881  0200  00A6               	movwf	wireWriteDataByte@val
  6882  0201  3083               	movlw	131
  6883  0202  318B  2312  3181   	fcall	_wireWriteDataByte
  6884                           
  6885                           ;APDS9960.c: 43:     wireWriteDataByte(0x8E, 0x87);
  6886  0205  3087               	movlw	135
  6887  0206  0020               	movlb	0	; select bank0
  6888  0207  00B0               	movwf	??_initialize
  6889  0208  0830               	movf	??_initialize,w
  6890  0209  00A6               	movwf	wireWriteDataByte@val
  6891  020A  308E               	movlw	142
  6892  020B  318B  2312  3181   	fcall	_wireWriteDataByte
  6893                           
  6894                           ;APDS9960.c: 44:     wireWriteDataByte(0x9D, 0) ;
  6895  020E  0020               	movlb	0	; select bank0
  6896  020F  01A6               	clrf	wireWriteDataByte@val
  6897  0210  309D               	movlw	157
  6898  0211  318B  2312  3181   	fcall	_wireWriteDataByte
  6899                           
  6900                           ;APDS9960.c: 45:     wireWriteDataByte(0x9E, 0) ;
  6901  0214  0020               	movlb	0	; select bank0
  6902  0215  01A6               	clrf	wireWriteDataByte@val
  6903  0216  309E               	movlw	158
  6904  0217  318B  2312  3181   	fcall	_wireWriteDataByte
  6905                           
  6906                           ;APDS9960.c: 46:     wireWriteDataByte(0x8D, 0x60) ;
  6907  021A  3060               	movlw	96
  6908  021B  0020               	movlb	0	; select bank0
  6909  021C  00B0               	movwf	??_initialize
  6910  021D  0830               	movf	??_initialize,w
  6911  021E  00A6               	movwf	wireWriteDataByte@val
  6912  021F  308D               	movlw	141
  6913  0220  318B  2312  3181   	fcall	_wireWriteDataByte
  6914                           
  6915                           ;APDS9960.c: 47:     setLEDDrive(0);
  6916  0223  3000               	movlw	0
  6917  0224  318C  24AE  3181   	fcall	_setLEDDrive
  6918                           
  6919                           ;APDS9960.c: 48:     setProximityGain(2);
  6920  0227  3002               	movlw	2
  6921  0228  318C  24D7  3181   	fcall	_setProximityGain
  6922                           
  6923                           ;APDS9960.c: 49:     setAmbientLightGain(1);
  6924  022B  3001               	movlw	1
  6925  022C  318B  2384  3181   	fcall	_setAmbientLightGain
  6926                           
  6927                           ;APDS9960.c: 51:     if( !setProxIntLowThresh(0) ) {
  6928  022F  3000               	movlw	0
  6929  0230  318A  2242  3181   	fcall	_setProxIntLowThresh
  6930  0233  3A00               	xorlw	0
  6931  0234  1903               	btfsc	3,2
  6932  0235  0008               	return
  6933                           
  6934                           ;APDS9960.c: 54:     if( !setProxIntHighThresh(50) ) {
  6935  0236  3032               	movlw	50
  6936  0237  318A  222F  3181   	fcall	_setProxIntHighThresh
  6937  023A  3A00               	xorlw	0
  6938  023B  1903               	btfsc	3,2
  6939  023C  0008               	return
  6940                           
  6941                           ;APDS9960.c: 59:     if( !setLightIntLowThreshold(0xFFFF) ) {
  6942  023D  30FF               	movlw	255
  6943  023E  0020               	movlb	0	; select bank0
  6944  023F  00AA               	movwf	setLightIntLowThreshold@threshold
  6945  0240  30FF               	movlw	255
  6946  0241  00AB               	movwf	setLightIntLowThreshold@threshold+1
  6947  0242  318C  2487  3181   	fcall	_setLightIntLowThreshold
  6948  0245  3A00               	xorlw	0
  6949  0246  1903               	btfsc	3,2
  6950  0247  0008               	return
  6951                           
  6952                           ;APDS9960.c: 62:     if( !setLightIntHighThreshold(0) ) {
  6953  0248  3000               	movlw	0
  6954  0249  0020               	movlb	0	; select bank0
  6955  024A  00AA               	movwf	setLightIntHighThreshold@threshold
  6956  024B  00AB               	movwf	setLightIntHighThreshold@threshold+1
  6957  024C  318C  2460  3181   	fcall	_setLightIntHighThreshold
  6958  024F  3A00               	xorlw	0
  6959  0250  1903               	btfsc	3,2
  6960  0251  0008               	return
  6961                           
  6962                           ;APDS9960.c: 66:     if( !wireWriteDataByte(0x8C, 0x11) ) {
  6963  0252  3011               	movlw	17
  6964  0253  0020               	movlb	0	; select bank0
  6965  0254  00B0               	movwf	??_initialize
  6966  0255  0830               	movf	??_initialize,w
  6967  0256  00A6               	movwf	wireWriteDataByte@val
  6968  0257  308C               	movlw	140
  6969  0258  318B  2312  3181   	fcall	_wireWriteDataByte
  6970  025B  0020               	movlb	0	; select bank0
  6971  025C  0826               	movf	?_wireWriteDataByte,w
  6972  025D  0427               	iorwf	?_wireWriteDataByte+1,w
  6973  025E  1903               	btfsc	3,2
  6974  025F  0008               	return
  6975                           
  6976                           ;APDS9960.c: 71:     if( !wireWriteDataByte(0x90, 0x01) ) {
  6977  0260  01A6               	clrf	wireWriteDataByte@val
  6978  0261  0AA6               	incf	wireWriteDataByte@val,f
  6979  0262  3090               	movlw	144
  6980  0263  318B  2312  3181   	fcall	_wireWriteDataByte
  6981  0266  0020               	movlb	0	; select bank0
  6982  0267  0826               	movf	?_wireWriteDataByte,w
  6983  0268  0427               	iorwf	?_wireWriteDataByte+1,w
  6984  0269  1903               	btfsc	3,2
  6985  026A  0008               	return
  6986                           
  6987                           ;APDS9960.c: 74:     if( !wireWriteDataByte(0x9F, 0) ) {
  6988  026B  01A6               	clrf	wireWriteDataByte@val
  6989  026C  309F               	movlw	159
  6990  026D  318B  2312  3181   	fcall	_wireWriteDataByte
  6991  0270  0020               	movlb	0	; select bank0
  6992  0271  0826               	movf	?_wireWriteDataByte,w
  6993  0272  0427               	iorwf	?_wireWriteDataByte+1,w
  6994  0273  1903               	btfsc	3,2
  6995  0274  0008               	return
  6996                           
  6997                           ;APDS9960.c: 78:     if( !setGestureEnterThresh(40) ) {
  6998  0275  3028               	movlw	40
  6999  0276  318A  2209  3181   	fcall	_setGestureEnterThresh
  7000  0279  3A00               	xorlw	0
  7001  027A  1903               	btfsc	3,2
  7002  027B  0008               	return
  7003                           
  7004                           ;APDS9960.c: 82:     if( !setGestureExitThresh(30) ) {
  7005  027C  301E               	movlw	30
  7006  027D  318A  221C  3181   	fcall	_setGestureExitThresh
  7007  0280  3A00               	xorlw	0
  7008  0281  1903               	btfsc	3,2
  7009  0282  0008               	return
  7010                           
  7011                           ;APDS9960.c: 85:     if( !wireWriteDataByte(0xA2, 0x40) ) {
  7012  0283  3040               	movlw	64
  7013  0284  0020               	movlb	0	; select bank0
  7014  0285  00B0               	movwf	??_initialize
  7015  0286  0830               	movf	??_initialize,w
  7016  0287  00A6               	movwf	wireWriteDataByte@val
  7017  0288  30A2               	movlw	162
  7018  0289  318B  2312  3181   	fcall	_wireWriteDataByte
  7019  028C  0020               	movlb	0	; select bank0
  7020  028D  0826               	movf	?_wireWriteDataByte,w
  7021  028E  0427               	iorwf	?_wireWriteDataByte+1,w
  7022  028F  1903               	btfsc	3,2
  7023  0290  0008               	return
  7024                           
  7025                           ;APDS9960.c: 88:     if( !setGestureGain(2) ) {
  7026  0291  3002               	movlw	2
  7027  0292  318E  266B  3181   	fcall	_setGestureGain
  7028  0295  3A00               	xorlw	0
  7029  0296  1903               	btfsc	3,2
  7030  0297  0008               	return
  7031                           
  7032                           ;APDS9960.c: 91:     if( !setGestureLEDDrive(0) ) {
  7033  0298  3000               	movlw	0
  7034  0299  318E  269D  3181   	fcall	_setGestureLEDDrive
  7035  029C  3A00               	xorlw	0
  7036  029D  1903               	btfsc	3,2
  7037  029E  0008               	return
  7038                           
  7039                           ;APDS9960.c: 95:     if( !setGestureWaitTime(1) ) {
  7040  029F  3001               	movlw	1
  7041  02A0  318C  2439  3181   	fcall	_setGestureWaitTime
  7042  02A3  3A00               	xorlw	0
  7043  02A4  1903               	btfsc	3,2
  7044  02A5  0008               	return
  7045                           
  7046                           ;APDS9960.c: 98:     if( !wireWriteDataByte(0xA4, 0) ) {
  7047  02A6  0020               	movlb	0	; select bank0
  7048  02A7  01A6               	clrf	wireWriteDataByte@val
  7049  02A8  30A4               	movlw	164
  7050  02A9  318B  2312  3181   	fcall	_wireWriteDataByte
  7051  02AC  0020               	movlb	0	; select bank0
  7052  02AD  0826               	movf	?_wireWriteDataByte,w
  7053  02AE  0427               	iorwf	?_wireWriteDataByte+1,w
  7054  02AF  1903               	btfsc	3,2
  7055  02B0  0008               	return
  7056                           
  7057                           ;APDS9960.c: 101:     if( !wireWriteDataByte(0xA5, 0) ) {
  7058  02B1  01A6               	clrf	wireWriteDataByte@val
  7059  02B2  30A5               	movlw	165
  7060  02B3  318B  2312  3181   	fcall	_wireWriteDataByte
  7061  02B6  0020               	movlb	0	; select bank0
  7062  02B7  0826               	movf	?_wireWriteDataByte,w
  7063  02B8  0427               	iorwf	?_wireWriteDataByte+1,w
  7064  02B9  1903               	btfsc	3,2
  7065  02BA  0008               	return
  7066                           
  7067                           ;APDS9960.c: 104:     if( !wireWriteDataByte(0xA7, 0) ) {
  7068  02BB  01A6               	clrf	wireWriteDataByte@val
  7069  02BC  30A7               	movlw	167
  7070  02BD  318B  2312  3181   	fcall	_wireWriteDataByte
  7071  02C0  0020               	movlb	0	; select bank0
  7072  02C1  0826               	movf	?_wireWriteDataByte,w
  7073  02C2  0427               	iorwf	?_wireWriteDataByte+1,w
  7074  02C3  1903               	btfsc	3,2
  7075  02C4  0008               	return
  7076                           
  7077                           ;APDS9960.c: 107:     if( !wireWriteDataByte(0xA9, 0) ) {
  7078  02C5  01A6               	clrf	wireWriteDataByte@val
  7079  02C6  30A9               	movlw	169
  7080  02C7  318B  2312  3181   	fcall	_wireWriteDataByte
  7081  02CA  0020               	movlb	0	; select bank0
  7082  02CB  0826               	movf	?_wireWriteDataByte,w
  7083  02CC  0427               	iorwf	?_wireWriteDataByte+1,w
  7084  02CD  1903               	btfsc	3,2
  7085  02CE  0008               	return
  7086                           
  7087                           ;APDS9960.c: 110:     if( !wireWriteDataByte(0xA6, 0xC9) ) {
  7088  02CF  30C9               	movlw	201
  7089  02D0  00B0               	movwf	??_initialize
  7090  02D1  0830               	movf	??_initialize,w
  7091  02D2  00A6               	movwf	wireWriteDataByte@val
  7092  02D3  30A6               	movlw	166
  7093  02D4  318B  2312  3181   	fcall	_wireWriteDataByte
  7094  02D7  0020               	movlb	0	; select bank0
  7095  02D8  0826               	movf	?_wireWriteDataByte,w
  7096  02D9  0427               	iorwf	?_wireWriteDataByte+1,w
  7097  02DA  1903               	btfsc	3,2
  7098  02DB  0008               	return
  7099                           
  7100                           ;APDS9960.c: 113:     if( !wireWriteDataByte(0xAA, 0) ) {
  7101  02DC  01A6               	clrf	wireWriteDataByte@val
  7102  02DD  30AA               	movlw	170
  7103  02DE  318B  2312  3181   	fcall	_wireWriteDataByte
  7104  02E1  0020               	movlb	0	; select bank0
  7105  02E2  0826               	movf	?_wireWriteDataByte,w
  7106  02E3  0427               	iorwf	?_wireWriteDataByte+1,w
  7107  02E4  1903               	btfsc	3,2
  7108  02E5  0008               	return
  7109                           
  7110                           ;APDS9960.c: 116:     if( !setGestureIntEnable(0) ) {
  7111  02E6  3000               	movlw	0
  7112  02E7  318D  257F         	fcall	_setGestureIntEnable
  7113  02E9  0008               	return
  7114  02EA                     __end_of_initialize:	
  7115                           
  7116                           	psect	text2
  7117  0CD7                     __ptext2:	
  7118 ;; *************** function _setProximityGain *****************
  7119 ;; Defined at:
  7120 ;;		line 192 in file "APDS9960.c"
  7121 ;; Parameters:    Size  Location     Type
  7122 ;;  drive           1    wreg     unsigned char 
  7123 ;; Auto vars:     Size  Location     Type
  7124 ;;  drive           1   13[BANK0 ] unsigned char 
  7125 ;;  val             1   12[BANK0 ] unsigned char 
  7126 ;; Return value:  Size  Location     Type
  7127 ;;                  1    wreg      _Bool 
  7128 ;; Registers used:
  7129 ;;		wreg, status,2, status,0, pclath, cstack
  7130 ;; Tracked objects:
  7131 ;;		On entry : 0/0
  7132 ;;		On exit  : 0/0
  7133 ;;		Unchanged: 0/0
  7134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7135 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7136 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7137 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7138 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7139 ;;Total ram usage:        4 bytes
  7140 ;; Hardware stack levels used:    1
  7141 ;; Hardware stack levels required when called:    8
  7142 ;; This function calls:
  7143 ;;		_wireReadDataByte
  7144 ;;		_wireWriteDataByte
  7145 ;; This function is called by:
  7146 ;;		_initialize
  7147 ;; This function uses a non-reentrant model
  7148 ;;
  7149                           
  7150                           
  7151                           ;psect for function _setProximityGain
  7152  0CD7                     _setProximityGain:	
  7153                           
  7154                           ;incstack = 0
  7155                           ; Regs used in _setProximityGain: [wreg+status,2+status,0+pclath+cstack]
  7156                           ;setProximityGain@drive stored from wreg
  7157  0CD7  0020               	movlb	0	; select bank0
  7158  0CD8  00AD               	movwf	setProximityGain@drive
  7159                           
  7160                           ;APDS9960.c: 192: _Bool setProximityGain(uint8_t drive);APDS9960.c: 193: {;APDS9960.c: 1
      +                          94:     uint8_t val;;APDS9960.c: 197:     val=wireReadDataByte(0x8F);
  7161  0CD9  308F               	movlw	143
  7162  0CDA  318B  23A2  318C   	fcall	_wireReadDataByte
  7163  0CDD  0020               	movlb	0	; select bank0
  7164  0CDE  00AA               	movwf	??_setProximityGain
  7165  0CDF  082A               	movf	??_setProximityGain,w
  7166  0CE0  00AC               	movwf	setProximityGain@val
  7167                           
  7168                           ;APDS9960.c: 199:     drive &= 0b00000011;
  7169  0CE1  3003               	movlw	3
  7170  0CE2  00AA               	movwf	??_setProximityGain
  7171  0CE3  082A               	movf	??_setProximityGain,w
  7172  0CE4  05AD               	andwf	setProximityGain@drive,f
  7173                           
  7174                           ;APDS9960.c: 200:     drive = drive << 2;
  7175  0CE5  082D               	movf	setProximityGain@drive,w
  7176  0CE6  00AA               	movwf	??_setProximityGain
  7177  0CE7  3001               	movlw	1
  7178  0CE8                     u6185:	
  7179  0CE8  35AA               	lslf	??_setProximityGain,f
  7180  0CE9  3EFF               	addlw	-1
  7181  0CEA  1D03               	skipz
  7182  0CEB  2CE8               	goto	u6185
  7183  0CEC  352A               	lslf	??_setProximityGain,w
  7184  0CED  00AB               	movwf	??_setProximityGain+1
  7185  0CEE  082B               	movf	??_setProximityGain+1,w
  7186  0CEF  00AD               	movwf	setProximityGain@drive
  7187                           
  7188                           ;APDS9960.c: 201:     val &= 0b11110011;
  7189  0CF0  30F3               	movlw	243
  7190  0CF1  00AA               	movwf	??_setProximityGain
  7191  0CF2  082A               	movf	??_setProximityGain,w
  7192  0CF3  05AC               	andwf	setProximityGain@val,f
  7193                           
  7194                           ;APDS9960.c: 202:     val |= drive;
  7195  0CF4  082D               	movf	setProximityGain@drive,w
  7196  0CF5  00AA               	movwf	??_setProximityGain
  7197  0CF6  082A               	movf	??_setProximityGain,w
  7198  0CF7  04AC               	iorwf	setProximityGain@val,f
  7199                           
  7200                           ;APDS9960.c: 205:     if( !wireWriteDataByte(0x8F, val) ) {
  7201  0CF8  082C               	movf	setProximityGain@val,w
  7202  0CF9  00AA               	movwf	??_setProximityGain
  7203  0CFA  082A               	movf	??_setProximityGain,w
  7204  0CFB  00A6               	movwf	wireWriteDataByte@val
  7205  0CFC  308F               	movlw	143
  7206  0CFD  318B  2312         	fcall	_wireWriteDataByte
  7207  0CFF  0008               	return
  7208  0D00                     __end_of_setProximityGain:	
  7209                           
  7210                           	psect	text3
  7211  0A42                     __ptext3:	
  7212 ;; *************** function _setProxIntLowThresh *****************
  7213 ;; Defined at:
  7214 ;;		line 234 in file "APDS9960.c"
  7215 ;; Parameters:    Size  Location     Type
  7216 ;;  threshold       1    wreg     unsigned char 
  7217 ;; Auto vars:     Size  Location     Type
  7218 ;;  threshold       1   11[BANK0 ] unsigned char 
  7219 ;; Return value:  Size  Location     Type
  7220 ;;                  1    wreg      _Bool 
  7221 ;; Registers used:
  7222 ;;		wreg, status,2, status,0, pclath, cstack
  7223 ;; Tracked objects:
  7224 ;;		On entry : 0/0
  7225 ;;		On exit  : 0/0
  7226 ;;		Unchanged: 0/0
  7227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7228 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7229 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7230 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7231 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7232 ;;Total ram usage:        2 bytes
  7233 ;; Hardware stack levels used:    1
  7234 ;; Hardware stack levels required when called:    8
  7235 ;; This function calls:
  7236 ;;		_wireWriteDataByte
  7237 ;; This function is called by:
  7238 ;;		_initialize
  7239 ;; This function uses a non-reentrant model
  7240 ;;
  7241                           
  7242                           
  7243                           ;psect for function _setProxIntLowThresh
  7244  0A42                     _setProxIntLowThresh:	
  7245                           
  7246                           ;incstack = 0
  7247                           ; Regs used in _setProxIntLowThresh: [wreg+status,2+status,0+pclath+cstack]
  7248                           ;setProxIntLowThresh@threshold stored from wreg
  7249  0A42  0020               	movlb	0	; select bank0
  7250  0A43  00AB               	movwf	setProxIntLowThresh@threshold
  7251                           
  7252                           ;APDS9960.c: 234: _Bool setProxIntLowThresh(uint8_t threshold);APDS9960.c: 235: {;APDS99
      +                          60.c: 236:     if( !wireWriteDataByte(0x89, threshold) ) {
  7253  0A44  082B               	movf	setProxIntLowThresh@threshold,w
  7254  0A45  00AA               	movwf	??_setProxIntLowThresh
  7255  0A46  082A               	movf	??_setProxIntLowThresh,w
  7256  0A47  00A6               	movwf	wireWriteDataByte@val
  7257  0A48  3089               	movlw	137
  7258  0A49  318B  2312  318A   	fcall	_wireWriteDataByte
  7259  0A4C  0020               	movlb	0	; select bank0
  7260  0A4D  0826               	movf	?_wireWriteDataByte,w
  7261  0A4E  0427               	iorwf	?_wireWriteDataByte+1,w
  7262  0A4F  1D03               	btfss	3,2
  7263  0A50  2A53               	goto	l7108
  7264                           
  7265                           ;APDS9960.c: 237:         return 0;
  7266  0A51  3000               	movlw	0
  7267  0A52  0008               	return
  7268  0A53                     l7108:	
  7269                           
  7270                           ;APDS9960.c: 240:     return 1;
  7271  0A53  3001               	movlw	1
  7272  0A54  0008               	return
  7273  0A55                     __end_of_setProxIntLowThresh:	
  7274                           
  7275                           	psect	text4
  7276  0A2F                     __ptext4:	
  7277 ;; *************** function _setProxIntHighThresh *****************
  7278 ;; Defined at:
  7279 ;;		line 244 in file "APDS9960.c"
  7280 ;; Parameters:    Size  Location     Type
  7281 ;;  threshold       1    wreg     unsigned char 
  7282 ;; Auto vars:     Size  Location     Type
  7283 ;;  threshold       1   11[BANK0 ] unsigned char 
  7284 ;; Return value:  Size  Location     Type
  7285 ;;                  1    wreg      _Bool 
  7286 ;; Registers used:
  7287 ;;		wreg, status,2, status,0, pclath, cstack
  7288 ;; Tracked objects:
  7289 ;;		On entry : 0/0
  7290 ;;		On exit  : 0/0
  7291 ;;		Unchanged: 0/0
  7292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7293 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7294 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7295 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7296 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7297 ;;Total ram usage:        2 bytes
  7298 ;; Hardware stack levels used:    1
  7299 ;; Hardware stack levels required when called:    8
  7300 ;; This function calls:
  7301 ;;		_wireWriteDataByte
  7302 ;; This function is called by:
  7303 ;;		_initialize
  7304 ;; This function uses a non-reentrant model
  7305 ;;
  7306                           
  7307                           
  7308                           ;psect for function _setProxIntHighThresh
  7309  0A2F                     _setProxIntHighThresh:	
  7310                           
  7311                           ;incstack = 0
  7312                           ; Regs used in _setProxIntHighThresh: [wreg+status,2+status,0+pclath+cstack]
  7313                           ;setProxIntHighThresh@threshold stored from wreg
  7314  0A2F  0020               	movlb	0	; select bank0
  7315  0A30  00AB               	movwf	setProxIntHighThresh@threshold
  7316                           
  7317                           ;APDS9960.c: 244: _Bool setProxIntHighThresh(uint8_t threshold);APDS9960.c: 245: {;APDS9
      +                          960.c: 246:     if( !wireWriteDataByte(0x8B, threshold) ) {
  7318  0A31  082B               	movf	setProxIntHighThresh@threshold,w
  7319  0A32  00AA               	movwf	??_setProxIntHighThresh
  7320  0A33  082A               	movf	??_setProxIntHighThresh,w
  7321  0A34  00A6               	movwf	wireWriteDataByte@val
  7322  0A35  308B               	movlw	139
  7323  0A36  318B  2312  318A   	fcall	_wireWriteDataByte
  7324  0A39  0020               	movlb	0	; select bank0
  7325  0A3A  0826               	movf	?_wireWriteDataByte,w
  7326  0A3B  0427               	iorwf	?_wireWriteDataByte+1,w
  7327  0A3C  1D03               	btfss	3,2
  7328  0A3D  2A40               	goto	l7118
  7329                           
  7330                           ;APDS9960.c: 247:         return 0;
  7331  0A3E  3000               	movlw	0
  7332  0A3F  0008               	return
  7333  0A40                     l7118:	
  7334                           
  7335                           ;APDS9960.c: 250:     return 1;
  7336  0A40  3001               	movlw	1
  7337  0A41  0008               	return
  7338  0A42                     __end_of_setProxIntHighThresh:	
  7339                           
  7340                           	psect	text5
  7341  0C87                     __ptext5:	
  7342 ;; *************** function _setLightIntLowThreshold *****************
  7343 ;; Defined at:
  7344 ;;		line 254 in file "APDS9960.c"
  7345 ;; Parameters:    Size  Location     Type
  7346 ;;  threshold       2   10[BANK0 ] unsigned short 
  7347 ;; Auto vars:     Size  Location     Type
  7348 ;;  val_high        1   14[BANK0 ] unsigned char 
  7349 ;;  val_low         1   13[BANK0 ] unsigned char 
  7350 ;; Return value:  Size  Location     Type
  7351 ;;                  1    wreg      _Bool 
  7352 ;; Registers used:
  7353 ;;		wreg, status,2, status,0, pclath, cstack
  7354 ;; Tracked objects:
  7355 ;;		On entry : 0/0
  7356 ;;		On exit  : 0/0
  7357 ;;		Unchanged: 0/0
  7358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7359 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7360 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7361 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7362 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7363 ;;Total ram usage:        5 bytes
  7364 ;; Hardware stack levels used:    1
  7365 ;; Hardware stack levels required when called:    8
  7366 ;; This function calls:
  7367 ;;		_wireWriteDataByte
  7368 ;; This function is called by:
  7369 ;;		_initialize
  7370 ;; This function uses a non-reentrant model
  7371 ;;
  7372                           
  7373                           
  7374                           ;psect for function _setLightIntLowThreshold
  7375  0C87                     _setLightIntLowThreshold:	
  7376                           
  7377                           ;APDS9960.c: 254: _Bool setLightIntLowThreshold(uint16_t threshold);APDS9960.c: 255: {;A
      +                          PDS9960.c: 256:     uint8_t val_low;;APDS9960.c: 257:     uint8_t val_high;;APDS9960.c: 
      +                          260:     val_low = threshold & 0x00FF;
  7378                           
  7379                           ;incstack = 0
  7380                           ; Regs used in _setLightIntLowThreshold: [wreg+status,2+status,0+pclath+cstack]
  7381  0C87  0020               	movlb	0	; select bank0
  7382  0C88  082A               	movf	setLightIntLowThreshold@threshold,w
  7383  0C89  00AC               	movwf	??_setLightIntLowThreshold
  7384  0C8A  082C               	movf	??_setLightIntLowThreshold,w
  7385  0C8B  00AD               	movwf	setLightIntLowThreshold@val_low
  7386                           
  7387                           ;APDS9960.c: 261:     val_high = (threshold & 0xFF00) >> 8;
  7388  0C8C  082B               	movf	setLightIntLowThreshold@threshold+1,w
  7389  0C8D  00AC               	movwf	??_setLightIntLowThreshold
  7390  0C8E  082C               	movf	??_setLightIntLowThreshold,w
  7391  0C8F  00AE               	movwf	setLightIntLowThreshold@val_high
  7392                           
  7393                           ;APDS9960.c: 264:     if( !wireWriteDataByte(0x84, val_low) ) {
  7394  0C90  082D               	movf	setLightIntLowThreshold@val_low,w
  7395  0C91  00AC               	movwf	??_setLightIntLowThreshold
  7396  0C92  082C               	movf	??_setLightIntLowThreshold,w
  7397  0C93  00A6               	movwf	wireWriteDataByte@val
  7398  0C94  3084               	movlw	132
  7399  0C95  318B  2312  318C   	fcall	_wireWriteDataByte
  7400  0C98  0020               	movlb	0	; select bank0
  7401  0C99  0826               	movf	?_wireWriteDataByte,w
  7402  0C9A  0427               	iorwf	?_wireWriteDataByte+1,w
  7403  0C9B  1D03               	btfss	3,2
  7404  0C9C  2C9F               	goto	l7132
  7405  0C9D                     l7128:	
  7406                           
  7407                           ;APDS9960.c: 265:         return 0;
  7408  0C9D  3000               	movlw	0
  7409  0C9E  0008               	return
  7410  0C9F                     l7132:	
  7411                           
  7412                           ;APDS9960.c: 269:     if( !wireWriteDataByte(0x85, val_high) ) {
  7413  0C9F  082E               	movf	setLightIntLowThreshold@val_high,w
  7414  0CA0  00AC               	movwf	??_setLightIntLowThreshold
  7415  0CA1  082C               	movf	??_setLightIntLowThreshold,w
  7416  0CA2  00A6               	movwf	wireWriteDataByte@val
  7417  0CA3  3085               	movlw	133
  7418  0CA4  318B  2312  318C   	fcall	_wireWriteDataByte
  7419  0CA7  0020               	movlb	0	; select bank0
  7420  0CA8  0826               	movf	?_wireWriteDataByte,w
  7421  0CA9  0427               	iorwf	?_wireWriteDataByte+1,w
  7422  0CAA  1903               	btfsc	3,2
  7423  0CAB  2C9D               	goto	l7128
  7424                           
  7425                           ;APDS9960.c: 273:     return 1;
  7426  0CAC  3001               	movlw	1
  7427  0CAD  0008               	return
  7428  0CAE                     __end_of_setLightIntLowThreshold:	
  7429                           
  7430                           	psect	text6
  7431  0C60                     __ptext6:	
  7432 ;; *************** function _setLightIntHighThreshold *****************
  7433 ;; Defined at:
  7434 ;;		line 277 in file "APDS9960.c"
  7435 ;; Parameters:    Size  Location     Type
  7436 ;;  threshold       2   10[BANK0 ] unsigned short 
  7437 ;; Auto vars:     Size  Location     Type
  7438 ;;  val_high        1   14[BANK0 ] unsigned char 
  7439 ;;  val_low         1   13[BANK0 ] unsigned char 
  7440 ;; Return value:  Size  Location     Type
  7441 ;;                  1    wreg      _Bool 
  7442 ;; Registers used:
  7443 ;;		wreg, status,2, status,0, pclath, cstack
  7444 ;; Tracked objects:
  7445 ;;		On entry : 0/0
  7446 ;;		On exit  : 0/0
  7447 ;;		Unchanged: 0/0
  7448 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7449 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7450 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7451 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7452 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7453 ;;Total ram usage:        5 bytes
  7454 ;; Hardware stack levels used:    1
  7455 ;; Hardware stack levels required when called:    8
  7456 ;; This function calls:
  7457 ;;		_wireWriteDataByte
  7458 ;; This function is called by:
  7459 ;;		_initialize
  7460 ;; This function uses a non-reentrant model
  7461 ;;
  7462                           
  7463                           
  7464                           ;psect for function _setLightIntHighThreshold
  7465  0C60                     _setLightIntHighThreshold:	
  7466                           
  7467                           ;APDS9960.c: 277: _Bool setLightIntHighThreshold(uint16_t threshold);APDS9960.c: 278: {;
      +                          APDS9960.c: 279:     uint8_t val_low;;APDS9960.c: 280:     uint8_t val_high;;APDS9960.c:
      +                           283:     val_low = threshold & 0x00FF;
  7468                           
  7469                           ;incstack = 0
  7470                           ; Regs used in _setLightIntHighThreshold: [wreg+status,2+status,0+pclath+cstack]
  7471  0C60  0020               	movlb	0	; select bank0
  7472  0C61  082A               	movf	setLightIntHighThreshold@threshold,w
  7473  0C62  00AC               	movwf	??_setLightIntHighThreshold
  7474  0C63  082C               	movf	??_setLightIntHighThreshold,w
  7475  0C64  00AD               	movwf	setLightIntHighThreshold@val_low
  7476                           
  7477                           ;APDS9960.c: 284:     val_high = (threshold & 0xFF00) >> 8;
  7478  0C65  082B               	movf	setLightIntHighThreshold@threshold+1,w
  7479  0C66  00AC               	movwf	??_setLightIntHighThreshold
  7480  0C67  082C               	movf	??_setLightIntHighThreshold,w
  7481  0C68  00AE               	movwf	setLightIntHighThreshold@val_high
  7482                           
  7483                           ;APDS9960.c: 287:     if( !wireWriteDataByte(0x86, val_low) ) {
  7484  0C69  082D               	movf	setLightIntHighThreshold@val_low,w
  7485  0C6A  00AC               	movwf	??_setLightIntHighThreshold
  7486  0C6B  082C               	movf	??_setLightIntHighThreshold,w
  7487  0C6C  00A6               	movwf	wireWriteDataByte@val
  7488  0C6D  3086               	movlw	134
  7489  0C6E  318B  2312  318C   	fcall	_wireWriteDataByte
  7490  0C71  0020               	movlb	0	; select bank0
  7491  0C72  0826               	movf	?_wireWriteDataByte,w
  7492  0C73  0427               	iorwf	?_wireWriteDataByte+1,w
  7493  0C74  1D03               	btfss	3,2
  7494  0C75  2C78               	goto	l7152
  7495  0C76                     l7148:	
  7496                           
  7497                           ;APDS9960.c: 288:         return 0;
  7498  0C76  3000               	movlw	0
  7499  0C77  0008               	return
  7500  0C78                     l7152:	
  7501                           
  7502                           ;APDS9960.c: 292:     if( !wireWriteDataByte(0x87, val_high) ) {
  7503  0C78  082E               	movf	setLightIntHighThreshold@val_high,w
  7504  0C79  00AC               	movwf	??_setLightIntHighThreshold
  7505  0C7A  082C               	movf	??_setLightIntHighThreshold,w
  7506  0C7B  00A6               	movwf	wireWriteDataByte@val
  7507  0C7C  3087               	movlw	135
  7508  0C7D  318B  2312  318C   	fcall	_wireWriteDataByte
  7509  0C80  0020               	movlb	0	; select bank0
  7510  0C81  0826               	movf	?_wireWriteDataByte,w
  7511  0C82  0427               	iorwf	?_wireWriteDataByte+1,w
  7512  0C83  1903               	btfsc	3,2
  7513  0C84  2C76               	goto	l7148
  7514                           
  7515                           ;APDS9960.c: 296:     return 1;
  7516  0C85  3001               	movlw	1
  7517  0C86  0008               	return
  7518  0C87                     __end_of_setLightIntHighThreshold:	
  7519                           
  7520                           	psect	text7
  7521  0CAE                     __ptext7:	
  7522 ;; *************** function _setLEDDrive *****************
  7523 ;; Defined at:
  7524 ;;		line 170 in file "APDS9960.c"
  7525 ;; Parameters:    Size  Location     Type
  7526 ;;  drive           1    wreg     unsigned char 
  7527 ;; Auto vars:     Size  Location     Type
  7528 ;;  drive           1   13[BANK0 ] unsigned char 
  7529 ;;  val             1   12[BANK0 ] unsigned char 
  7530 ;; Return value:  Size  Location     Type
  7531 ;;                  1    wreg      _Bool 
  7532 ;; Registers used:
  7533 ;;		wreg, status,2, status,0, pclath, cstack
  7534 ;; Tracked objects:
  7535 ;;		On entry : 0/0
  7536 ;;		On exit  : 0/0
  7537 ;;		Unchanged: 0/0
  7538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7539 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7540 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7541 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7542 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7543 ;;Total ram usage:        4 bytes
  7544 ;; Hardware stack levels used:    1
  7545 ;; Hardware stack levels required when called:    8
  7546 ;; This function calls:
  7547 ;;		_wireReadDataByte
  7548 ;;		_wireWriteDataByte
  7549 ;; This function is called by:
  7550 ;;		_initialize
  7551 ;; This function uses a non-reentrant model
  7552 ;;
  7553                           
  7554                           
  7555                           ;psect for function _setLEDDrive
  7556  0CAE                     _setLEDDrive:	
  7557                           
  7558                           ;incstack = 0
  7559                           ; Regs used in _setLEDDrive: [wreg+status,2+status,0+pclath+cstack]
  7560                           ;setLEDDrive@drive stored from wreg
  7561  0CAE  0020               	movlb	0	; select bank0
  7562  0CAF  00AD               	movwf	setLEDDrive@drive
  7563                           
  7564                           ;APDS9960.c: 170: _Bool setLEDDrive(uint8_t drive);APDS9960.c: 171: {;APDS9960.c: 172:  
      +                             uint8_t val;;APDS9960.c: 175:     val=wireReadDataByte(0x8F);
  7565  0CB0  308F               	movlw	143
  7566  0CB1  318B  23A2  318C   	fcall	_wireReadDataByte
  7567  0CB4  0020               	movlb	0	; select bank0
  7568  0CB5  00AA               	movwf	??_setLEDDrive
  7569  0CB6  082A               	movf	??_setLEDDrive,w
  7570  0CB7  00AC               	movwf	setLEDDrive@val
  7571                           
  7572                           ;APDS9960.c: 178:     drive &= 0b00000011;
  7573  0CB8  3003               	movlw	3
  7574  0CB9  00AA               	movwf	??_setLEDDrive
  7575  0CBA  082A               	movf	??_setLEDDrive,w
  7576  0CBB  05AD               	andwf	setLEDDrive@drive,f
  7577                           
  7578                           ;APDS9960.c: 179:     drive = drive << 6;
  7579  0CBC  082D               	movf	setLEDDrive@drive,w
  7580  0CBD  00AA               	movwf	??_setLEDDrive
  7581  0CBE  3005               	movlw	5
  7582  0CBF                     u6175:	
  7583  0CBF  35AA               	lslf	??_setLEDDrive,f
  7584  0CC0  3EFF               	addlw	-1
  7585  0CC1  1D03               	skipz
  7586  0CC2  2CBF               	goto	u6175
  7587  0CC3  352A               	lslf	??_setLEDDrive,w
  7588  0CC4  00AB               	movwf	??_setLEDDrive+1
  7589  0CC5  082B               	movf	??_setLEDDrive+1,w
  7590  0CC6  00AD               	movwf	setLEDDrive@drive
  7591                           
  7592                           ;APDS9960.c: 180:     val &= 0b00111111;
  7593  0CC7  303F               	movlw	63
  7594  0CC8  00AA               	movwf	??_setLEDDrive
  7595  0CC9  082A               	movf	??_setLEDDrive,w
  7596  0CCA  05AC               	andwf	setLEDDrive@val,f
  7597                           
  7598                           ;APDS9960.c: 181:     val |= drive;
  7599  0CCB  082D               	movf	setLEDDrive@drive,w
  7600  0CCC  00AA               	movwf	??_setLEDDrive
  7601  0CCD  082A               	movf	??_setLEDDrive,w
  7602  0CCE  04AC               	iorwf	setLEDDrive@val,f
  7603                           
  7604                           ;APDS9960.c: 184:     if( !wireWriteDataByte(0x8F, val) ) {
  7605  0CCF  082C               	movf	setLEDDrive@val,w
  7606  0CD0  00AA               	movwf	??_setLEDDrive
  7607  0CD1  082A               	movf	??_setLEDDrive,w
  7608  0CD2  00A6               	movwf	wireWriteDataByte@val
  7609  0CD3  308F               	movlw	143
  7610  0CD4  318B  2312         	fcall	_wireWriteDataByte
  7611  0CD6  0008               	return
  7612  0CD7                     __end_of_setLEDDrive:	
  7613                           
  7614                           	psect	text8
  7615  0C39                     __ptext8:	
  7616 ;; *************** function _setGestureWaitTime *****************
  7617 ;; Defined at:
  7618 ;;		line 366 in file "APDS9960.c"
  7619 ;; Parameters:    Size  Location     Type
  7620 ;;  time            1    wreg     unsigned char 
  7621 ;; Auto vars:     Size  Location     Type
  7622 ;;  time            1   11[BANK0 ] unsigned char 
  7623 ;;  val             1   12[BANK0 ] unsigned char 
  7624 ;; Return value:  Size  Location     Type
  7625 ;;                  1    wreg      _Bool 
  7626 ;; Registers used:
  7627 ;;		wreg, status,2, status,0, pclath, cstack
  7628 ;; Tracked objects:
  7629 ;;		On entry : 0/0
  7630 ;;		On exit  : 0/0
  7631 ;;		Unchanged: 0/0
  7632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7633 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7634 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7635 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7636 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7637 ;;Total ram usage:        3 bytes
  7638 ;; Hardware stack levels used:    1
  7639 ;; Hardware stack levels required when called:    8
  7640 ;; This function calls:
  7641 ;;		_wireReadDataByte
  7642 ;;		_wireWriteDataByte
  7643 ;; This function is called by:
  7644 ;;		_initialize
  7645 ;; This function uses a non-reentrant model
  7646 ;;
  7647                           
  7648                           
  7649                           ;psect for function _setGestureWaitTime
  7650  0C39                     _setGestureWaitTime:	
  7651                           
  7652                           ;incstack = 0
  7653                           ; Regs used in _setGestureWaitTime: [wreg+status,2+status,0+pclath+cstack]
  7654                           ;setGestureWaitTime@time stored from wreg
  7655  0C39  0020               	movlb	0	; select bank0
  7656  0C3A  00AB               	movwf	setGestureWaitTime@time
  7657                           
  7658                           ;APDS9960.c: 366: _Bool setGestureWaitTime(uint8_t time);APDS9960.c: 367: {;APDS9960.c: 
      +                          368:     uint8_t val;;APDS9960.c: 371:     val = wireReadDataByte(0xA3);
  7659  0C3B  30A3               	movlw	163
  7660  0C3C  318B  23A2  318C   	fcall	_wireReadDataByte
  7661  0C3F  0020               	movlb	0	; select bank0
  7662  0C40  00AA               	movwf	??_setGestureWaitTime
  7663  0C41  082A               	movf	??_setGestureWaitTime,w
  7664  0C42  00AC               	movwf	setGestureWaitTime@val
  7665                           
  7666                           ;APDS9960.c: 374:     time &= 0b00000111;
  7667  0C43  3007               	movlw	7
  7668  0C44  00AA               	movwf	??_setGestureWaitTime
  7669  0C45  082A               	movf	??_setGestureWaitTime,w
  7670  0C46  05AB               	andwf	setGestureWaitTime@time,f
  7671                           
  7672                           ;APDS9960.c: 375:     val &= 0b11111000;
  7673  0C47  30F8               	movlw	248
  7674  0C48  00AA               	movwf	??_setGestureWaitTime
  7675  0C49  082A               	movf	??_setGestureWaitTime,w
  7676  0C4A  05AC               	andwf	setGestureWaitTime@val,f
  7677                           
  7678                           ;APDS9960.c: 376:     val |= time;
  7679  0C4B  082B               	movf	setGestureWaitTime@time,w
  7680  0C4C  00AA               	movwf	??_setGestureWaitTime
  7681  0C4D  082A               	movf	??_setGestureWaitTime,w
  7682  0C4E  04AC               	iorwf	setGestureWaitTime@val,f
  7683                           
  7684                           ;APDS9960.c: 379:     if( !wireWriteDataByte(0xA3, val) ) {
  7685  0C4F  082C               	movf	setGestureWaitTime@val,w
  7686  0C50  00AA               	movwf	??_setGestureWaitTime
  7687  0C51  082A               	movf	??_setGestureWaitTime,w
  7688  0C52  00A6               	movwf	wireWriteDataByte@val
  7689  0C53  30A3               	movlw	163
  7690  0C54  318B  2312  318C   	fcall	_wireWriteDataByte
  7691  0C57  0020               	movlb	0	; select bank0
  7692  0C58  0826               	movf	?_wireWriteDataByte,w
  7693  0C59  0427               	iorwf	?_wireWriteDataByte+1,w
  7694  0C5A  1D03               	btfss	3,2
  7695  0C5B  2C5E               	goto	l7232
  7696                           
  7697                           ;APDS9960.c: 380:         return 0;
  7698  0C5C  3000               	movlw	0
  7699  0C5D  0008               	return
  7700  0C5E                     l7232:	
  7701                           
  7702                           ;APDS9960.c: 383:     return 1;
  7703  0C5E  3001               	movlw	1
  7704  0C5F  0008               	return
  7705  0C60                     __end_of_setGestureWaitTime:	
  7706                           
  7707                           	psect	text9
  7708  0E9D                     __ptext9:	
  7709 ;; *************** function _setGestureLEDDrive *****************
  7710 ;; Defined at:
  7711 ;;		line 343 in file "APDS9960.c"
  7712 ;; Parameters:    Size  Location     Type
  7713 ;;  drive           1    wreg     unsigned char 
  7714 ;; Auto vars:     Size  Location     Type
  7715 ;;  drive           1   13[BANK0 ] unsigned char 
  7716 ;;  val             1   12[BANK0 ] unsigned char 
  7717 ;; Return value:  Size  Location     Type
  7718 ;;                  1    wreg      _Bool 
  7719 ;; Registers used:
  7720 ;;		wreg, status,2, status,0, pclath, cstack
  7721 ;; Tracked objects:
  7722 ;;		On entry : 0/0
  7723 ;;		On exit  : 0/0
  7724 ;;		Unchanged: 0/0
  7725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7727 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7728 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7729 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7730 ;;Total ram usage:        4 bytes
  7731 ;; Hardware stack levels used:    1
  7732 ;; Hardware stack levels required when called:    8
  7733 ;; This function calls:
  7734 ;;		_wireReadDataByte
  7735 ;;		_wireWriteDataByte
  7736 ;; This function is called by:
  7737 ;;		_initialize
  7738 ;; This function uses a non-reentrant model
  7739 ;;
  7740                           
  7741                           
  7742                           ;psect for function _setGestureLEDDrive
  7743  0E9D                     _setGestureLEDDrive:	
  7744                           
  7745                           ;incstack = 0
  7746                           ; Regs used in _setGestureLEDDrive: [wreg+status,2+status,0+pclath+cstack]
  7747                           ;setGestureLEDDrive@drive stored from wreg
  7748  0E9D  0020               	movlb	0	; select bank0
  7749  0E9E  00AD               	movwf	setGestureLEDDrive@drive
  7750                           
  7751                           ;APDS9960.c: 343: _Bool setGestureLEDDrive(uint8_t drive);APDS9960.c: 344: {;APDS9960.c:
      +                           345:     uint8_t val;;APDS9960.c: 348:     val = wireReadDataByte(0xA3);
  7752  0E9F  30A3               	movlw	163
  7753  0EA0  318B  23A2  318E   	fcall	_wireReadDataByte
  7754  0EA3  0020               	movlb	0	; select bank0
  7755  0EA4  00AA               	movwf	??_setGestureLEDDrive
  7756  0EA5  082A               	movf	??_setGestureLEDDrive,w
  7757  0EA6  00AC               	movwf	setGestureLEDDrive@val
  7758                           
  7759                           ;APDS9960.c: 352:     drive &= 0b00000011;
  7760  0EA7  3003               	movlw	3
  7761  0EA8  00AA               	movwf	??_setGestureLEDDrive
  7762  0EA9  082A               	movf	??_setGestureLEDDrive,w
  7763  0EAA  05AD               	andwf	setGestureLEDDrive@drive,f
  7764                           
  7765                           ;APDS9960.c: 353:     drive = drive << 3;
  7766  0EAB  082D               	movf	setGestureLEDDrive@drive,w
  7767  0EAC  00AA               	movwf	??_setGestureLEDDrive
  7768  0EAD  3002               	movlw	2
  7769  0EAE                     u6295:	
  7770  0EAE  35AA               	lslf	??_setGestureLEDDrive,f
  7771  0EAF  3EFF               	addlw	-1
  7772  0EB0  1D03               	skipz
  7773  0EB1  2EAE               	goto	u6295
  7774  0EB2  352A               	lslf	??_setGestureLEDDrive,w
  7775  0EB3  00AB               	movwf	??_setGestureLEDDrive+1
  7776  0EB4  082B               	movf	??_setGestureLEDDrive+1,w
  7777  0EB5  00AD               	movwf	setGestureLEDDrive@drive
  7778                           
  7779                           ;APDS9960.c: 354:     val &= 0b11100111;
  7780  0EB6  30E7               	movlw	231
  7781  0EB7  00AA               	movwf	??_setGestureLEDDrive
  7782  0EB8  082A               	movf	??_setGestureLEDDrive,w
  7783  0EB9  05AC               	andwf	setGestureLEDDrive@val,f
  7784                           
  7785                           ;APDS9960.c: 355:     val |= drive;
  7786  0EBA  082D               	movf	setGestureLEDDrive@drive,w
  7787  0EBB  00AA               	movwf	??_setGestureLEDDrive
  7788  0EBC  082A               	movf	??_setGestureLEDDrive,w
  7789  0EBD  04AC               	iorwf	setGestureLEDDrive@val,f
  7790                           
  7791                           ;APDS9960.c: 358:     if( !wireWriteDataByte(0xA3, val) ) {
  7792  0EBE  082C               	movf	setGestureLEDDrive@val,w
  7793  0EBF  00AA               	movwf	??_setGestureLEDDrive
  7794  0EC0  082A               	movf	??_setGestureLEDDrive,w
  7795  0EC1  00A6               	movwf	wireWriteDataByte@val
  7796  0EC2  30A3               	movlw	163
  7797  0EC3  318B  2312  318E   	fcall	_wireWriteDataByte
  7798  0EC6  0020               	movlb	0	; select bank0
  7799  0EC7  0826               	movf	?_wireWriteDataByte,w
  7800  0EC8  0427               	iorwf	?_wireWriteDataByte+1,w
  7801  0EC9  1D03               	btfss	3,2
  7802  0ECA  2ECD               	goto	l7214
  7803                           
  7804                           ;APDS9960.c: 359:         return 0;
  7805  0ECB  3000               	movlw	0
  7806  0ECC  0008               	return
  7807  0ECD                     l7214:	
  7808                           
  7809                           ;APDS9960.c: 362:     return 1;
  7810  0ECD  3001               	movlw	1
  7811  0ECE  0008               	return
  7812  0ECF                     __end_of_setGestureLEDDrive:	
  7813                           
  7814                           	psect	text10
  7815  0E6B                     __ptext10:	
  7816 ;; *************** function _setGestureGain *****************
  7817 ;; Defined at:
  7818 ;;		line 320 in file "APDS9960.c"
  7819 ;; Parameters:    Size  Location     Type
  7820 ;;  gain            1    wreg     unsigned char 
  7821 ;; Auto vars:     Size  Location     Type
  7822 ;;  gain            1   13[BANK0 ] unsigned char 
  7823 ;;  val             1   12[BANK0 ] unsigned char 
  7824 ;; Return value:  Size  Location     Type
  7825 ;;                  1    wreg      _Bool 
  7826 ;; Registers used:
  7827 ;;		wreg, status,2, status,0, pclath, cstack
  7828 ;; Tracked objects:
  7829 ;;		On entry : 0/0
  7830 ;;		On exit  : 0/0
  7831 ;;		Unchanged: 0/0
  7832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7833 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7834 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7835 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7836 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7837 ;;Total ram usage:        4 bytes
  7838 ;; Hardware stack levels used:    1
  7839 ;; Hardware stack levels required when called:    8
  7840 ;; This function calls:
  7841 ;;		_wireReadDataByte
  7842 ;;		_wireWriteDataByte
  7843 ;; This function is called by:
  7844 ;;		_initialize
  7845 ;; This function uses a non-reentrant model
  7846 ;;
  7847                           
  7848                           
  7849                           ;psect for function _setGestureGain
  7850  0E6B                     _setGestureGain:	
  7851                           
  7852                           ;incstack = 0
  7853                           ; Regs used in _setGestureGain: [wreg+status,2+status,0+pclath+cstack]
  7854                           ;setGestureGain@gain stored from wreg
  7855  0E6B  0020               	movlb	0	; select bank0
  7856  0E6C  00AD               	movwf	setGestureGain@gain
  7857                           
  7858                           ;APDS9960.c: 320: _Bool setGestureGain(uint8_t gain);APDS9960.c: 321: {;APDS9960.c: 322:
      +                               uint8_t val;;APDS9960.c: 325:     val = wireReadDataByte(0xA3);
  7859  0E6D  30A3               	movlw	163
  7860  0E6E  318B  23A2  318E   	fcall	_wireReadDataByte
  7861  0E71  0020               	movlb	0	; select bank0
  7862  0E72  00AA               	movwf	??_setGestureGain
  7863  0E73  082A               	movf	??_setGestureGain,w
  7864  0E74  00AC               	movwf	setGestureGain@val
  7865                           
  7866                           ;APDS9960.c: 329:     gain &= 0b00000011;
  7867  0E75  3003               	movlw	3
  7868  0E76  00AA               	movwf	??_setGestureGain
  7869  0E77  082A               	movf	??_setGestureGain,w
  7870  0E78  05AD               	andwf	setGestureGain@gain,f
  7871                           
  7872                           ;APDS9960.c: 330:     gain = gain << 5;
  7873  0E79  082D               	movf	setGestureGain@gain,w
  7874  0E7A  00AA               	movwf	??_setGestureGain
  7875  0E7B  3004               	movlw	4
  7876  0E7C                     u6275:	
  7877  0E7C  35AA               	lslf	??_setGestureGain,f
  7878  0E7D  3EFF               	addlw	-1
  7879  0E7E  1D03               	skipz
  7880  0E7F  2E7C               	goto	u6275
  7881  0E80  352A               	lslf	??_setGestureGain,w
  7882  0E81  00AB               	movwf	??_setGestureGain+1
  7883  0E82  082B               	movf	??_setGestureGain+1,w
  7884  0E83  00AD               	movwf	setGestureGain@gain
  7885                           
  7886                           ;APDS9960.c: 331:     val &= 0b10011111;
  7887  0E84  309F               	movlw	159
  7888  0E85  00AA               	movwf	??_setGestureGain
  7889  0E86  082A               	movf	??_setGestureGain,w
  7890  0E87  05AC               	andwf	setGestureGain@val,f
  7891                           
  7892                           ;APDS9960.c: 332:     val |= gain;
  7893  0E88  082D               	movf	setGestureGain@gain,w
  7894  0E89  00AA               	movwf	??_setGestureGain
  7895  0E8A  082A               	movf	??_setGestureGain,w
  7896  0E8B  04AC               	iorwf	setGestureGain@val,f
  7897                           
  7898                           ;APDS9960.c: 335:     if( !wireWriteDataByte(0xA3, val) ) {
  7899  0E8C  082C               	movf	setGestureGain@val,w
  7900  0E8D  00AA               	movwf	??_setGestureGain
  7901  0E8E  082A               	movf	??_setGestureGain,w
  7902  0E8F  00A6               	movwf	wireWriteDataByte@val
  7903  0E90  30A3               	movlw	163
  7904  0E91  318B  2312  318E   	fcall	_wireWriteDataByte
  7905  0E94  0020               	movlb	0	; select bank0
  7906  0E95  0826               	movf	?_wireWriteDataByte,w
  7907  0E96  0427               	iorwf	?_wireWriteDataByte+1,w
  7908  0E97  1D03               	btfss	3,2
  7909  0E98  2E9B               	goto	l7196
  7910                           
  7911                           ;APDS9960.c: 336:         return 0;
  7912  0E99  3000               	movlw	0
  7913  0E9A  0008               	return
  7914  0E9B                     l7196:	
  7915                           
  7916                           ;APDS9960.c: 339:     return 1;
  7917  0E9B  3001               	movlw	1
  7918  0E9C  0008               	return
  7919  0E9D                     __end_of_setGestureGain:	
  7920                           
  7921                           	psect	text11
  7922  0A1C                     __ptext11:	
  7923 ;; *************** function _setGestureExitThresh *****************
  7924 ;; Defined at:
  7925 ;;		line 310 in file "APDS9960.c"
  7926 ;; Parameters:    Size  Location     Type
  7927 ;;  threshold       1    wreg     unsigned char 
  7928 ;; Auto vars:     Size  Location     Type
  7929 ;;  threshold       1   11[BANK0 ] unsigned char 
  7930 ;; Return value:  Size  Location     Type
  7931 ;;                  1    wreg      _Bool 
  7932 ;; Registers used:
  7933 ;;		wreg, status,2, status,0, pclath, cstack
  7934 ;; Tracked objects:
  7935 ;;		On entry : 0/0
  7936 ;;		On exit  : 0/0
  7937 ;;		Unchanged: 0/0
  7938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7939 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7940 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7941 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7942 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7943 ;;Total ram usage:        2 bytes
  7944 ;; Hardware stack levels used:    1
  7945 ;; Hardware stack levels required when called:    8
  7946 ;; This function calls:
  7947 ;;		_wireWriteDataByte
  7948 ;; This function is called by:
  7949 ;;		_initialize
  7950 ;; This function uses a non-reentrant model
  7951 ;;
  7952                           
  7953                           
  7954                           ;psect for function _setGestureExitThresh
  7955  0A1C                     _setGestureExitThresh:	
  7956                           
  7957                           ;incstack = 0
  7958                           ; Regs used in _setGestureExitThresh: [wreg+status,2+status,0+pclath+cstack]
  7959                           ;setGestureExitThresh@threshold stored from wreg
  7960  0A1C  0020               	movlb	0	; select bank0
  7961  0A1D  00AB               	movwf	setGestureExitThresh@threshold
  7962                           
  7963                           ;APDS9960.c: 310: _Bool setGestureExitThresh(uint8_t threshold);APDS9960.c: 311: {;APDS9
      +                          960.c: 312:     if( !wireWriteDataByte(0xA1, threshold) ) {
  7964  0A1E  082B               	movf	setGestureExitThresh@threshold,w
  7965  0A1F  00AA               	movwf	??_setGestureExitThresh
  7966  0A20  082A               	movf	??_setGestureExitThresh,w
  7967  0A21  00A6               	movwf	wireWriteDataByte@val
  7968  0A22  30A1               	movlw	161
  7969  0A23  318B  2312  318A   	fcall	_wireWriteDataByte
  7970  0A26  0020               	movlb	0	; select bank0
  7971  0A27  0826               	movf	?_wireWriteDataByte,w
  7972  0A28  0427               	iorwf	?_wireWriteDataByte+1,w
  7973  0A29  1D03               	btfss	3,2
  7974  0A2A  2A2D               	goto	l7178
  7975                           
  7976                           ;APDS9960.c: 313:         return 0;
  7977  0A2B  3000               	movlw	0
  7978  0A2C  0008               	return
  7979  0A2D                     l7178:	
  7980                           
  7981                           ;APDS9960.c: 316:     return 1;
  7982  0A2D  3001               	movlw	1
  7983  0A2E  0008               	return
  7984  0A2F                     __end_of_setGestureExitThresh:	
  7985                           
  7986                           	psect	text12
  7987  0A09                     __ptext12:	
  7988 ;; *************** function _setGestureEnterThresh *****************
  7989 ;; Defined at:
  7990 ;;		line 300 in file "APDS9960.c"
  7991 ;; Parameters:    Size  Location     Type
  7992 ;;  threshold       1    wreg     unsigned char 
  7993 ;; Auto vars:     Size  Location     Type
  7994 ;;  threshold       1   11[BANK0 ] unsigned char 
  7995 ;; Return value:  Size  Location     Type
  7996 ;;                  1    wreg      _Bool 
  7997 ;; Registers used:
  7998 ;;		wreg, status,2, status,0, pclath, cstack
  7999 ;; Tracked objects:
  8000 ;;		On entry : 0/0
  8001 ;;		On exit  : 0/0
  8002 ;;		Unchanged: 0/0
  8003 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8004 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8005 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8006 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8007 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8008 ;;Total ram usage:        2 bytes
  8009 ;; Hardware stack levels used:    1
  8010 ;; Hardware stack levels required when called:    8
  8011 ;; This function calls:
  8012 ;;		_wireWriteDataByte
  8013 ;; This function is called by:
  8014 ;;		_initialize
  8015 ;; This function uses a non-reentrant model
  8016 ;;
  8017                           
  8018                           
  8019                           ;psect for function _setGestureEnterThresh
  8020  0A09                     _setGestureEnterThresh:	
  8021                           
  8022                           ;incstack = 0
  8023                           ; Regs used in _setGestureEnterThresh: [wreg+status,2+status,0+pclath+cstack]
  8024                           ;setGestureEnterThresh@threshold stored from wreg
  8025  0A09  0020               	movlb	0	; select bank0
  8026  0A0A  00AB               	movwf	setGestureEnterThresh@threshold
  8027                           
  8028                           ;APDS9960.c: 300: _Bool setGestureEnterThresh(uint8_t threshold);APDS9960.c: 301: {;APDS
      +                          9960.c: 302:     if( !wireWriteDataByte(0xA0, threshold) ) {
  8029  0A0B  082B               	movf	setGestureEnterThresh@threshold,w
  8030  0A0C  00AA               	movwf	??_setGestureEnterThresh
  8031  0A0D  082A               	movf	??_setGestureEnterThresh,w
  8032  0A0E  00A6               	movwf	wireWriteDataByte@val
  8033  0A0F  30A0               	movlw	160
  8034  0A10  318B  2312  318A   	fcall	_wireWriteDataByte
  8035  0A13  0020               	movlb	0	; select bank0
  8036  0A14  0826               	movf	?_wireWriteDataByte,w
  8037  0A15  0427               	iorwf	?_wireWriteDataByte+1,w
  8038  0A16  1D03               	btfss	3,2
  8039  0A17  2A1A               	goto	l7168
  8040                           
  8041                           ;APDS9960.c: 303:         return 0;
  8042  0A18  3000               	movlw	0
  8043  0A19  0008               	return
  8044  0A1A                     l7168:	
  8045                           
  8046                           ;APDS9960.c: 306:     return 1;
  8047  0A1A  3001               	movlw	1
  8048  0A1B  0008               	return
  8049  0A1C                     __end_of_setGestureEnterThresh:	
  8050                           
  8051                           	psect	text13
  8052  0B84                     __ptext13:	
  8053 ;; *************** function _setAmbientLightGain *****************
  8054 ;; Defined at:
  8055 ;;		line 213 in file "APDS9960.c"
  8056 ;; Parameters:    Size  Location     Type
  8057 ;;  drive           1    wreg     unsigned char 
  8058 ;; Auto vars:     Size  Location     Type
  8059 ;;  drive           1   11[BANK0 ] unsigned char 
  8060 ;;  val             1   12[BANK0 ] unsigned char 
  8061 ;; Return value:  Size  Location     Type
  8062 ;;                  1    wreg      _Bool 
  8063 ;; Registers used:
  8064 ;;		wreg, status,2, status,0, pclath, cstack
  8065 ;; Tracked objects:
  8066 ;;		On entry : 0/0
  8067 ;;		On exit  : 0/0
  8068 ;;		Unchanged: 0/0
  8069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8070 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8071 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8072 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8073 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8074 ;;Total ram usage:        3 bytes
  8075 ;; Hardware stack levels used:    1
  8076 ;; Hardware stack levels required when called:    8
  8077 ;; This function calls:
  8078 ;;		_wireReadDataByte
  8079 ;;		_wireWriteDataByte
  8080 ;; This function is called by:
  8081 ;;		_initialize
  8082 ;; This function uses a non-reentrant model
  8083 ;;
  8084                           
  8085                           
  8086                           ;psect for function _setAmbientLightGain
  8087  0B84                     _setAmbientLightGain:	
  8088                           
  8089                           ;incstack = 0
  8090                           ; Regs used in _setAmbientLightGain: [wreg+status,2+status,0+pclath+cstack]
  8091                           ;setAmbientLightGain@drive stored from wreg
  8092  0B84  0020               	movlb	0	; select bank0
  8093  0B85  00AB               	movwf	setAmbientLightGain@drive
  8094                           
  8095                           ;APDS9960.c: 213: _Bool setAmbientLightGain(uint8_t drive);APDS9960.c: 214: {;APDS9960.c
      +                          : 215:     uint8_t val;;APDS9960.c: 218:     val= wireReadDataByte(0x8F);
  8096  0B86  308F               	movlw	143
  8097  0B87  318B  23A2  318B   	fcall	_wireReadDataByte
  8098  0B8A  0020               	movlb	0	; select bank0
  8099  0B8B  00AA               	movwf	??_setAmbientLightGain
  8100  0B8C  082A               	movf	??_setAmbientLightGain,w
  8101  0B8D  00AC               	movwf	setAmbientLightGain@val
  8102                           
  8103                           ;APDS9960.c: 221:     drive &= 0b00000011;
  8104  0B8E  3003               	movlw	3
  8105  0B8F  00AA               	movwf	??_setAmbientLightGain
  8106  0B90  082A               	movf	??_setAmbientLightGain,w
  8107  0B91  05AB               	andwf	setAmbientLightGain@drive,f
  8108                           
  8109                           ;APDS9960.c: 222:     val &= 0b11111100;
  8110  0B92  30FC               	movlw	252
  8111  0B93  00AA               	movwf	??_setAmbientLightGain
  8112  0B94  082A               	movf	??_setAmbientLightGain,w
  8113  0B95  05AC               	andwf	setAmbientLightGain@val,f
  8114                           
  8115                           ;APDS9960.c: 223:     val |= drive;
  8116  0B96  082B               	movf	setAmbientLightGain@drive,w
  8117  0B97  00AA               	movwf	??_setAmbientLightGain
  8118  0B98  082A               	movf	??_setAmbientLightGain,w
  8119  0B99  04AC               	iorwf	setAmbientLightGain@val,f
  8120                           
  8121                           ;APDS9960.c: 226:     if( !wireWriteDataByte(0x8F, val) ) {
  8122  0B9A  082C               	movf	setAmbientLightGain@val,w
  8123  0B9B  00AA               	movwf	??_setAmbientLightGain
  8124  0B9C  082A               	movf	??_setAmbientLightGain,w
  8125  0B9D  00A6               	movwf	wireWriteDataByte@val
  8126  0B9E  308F               	movlw	143
  8127  0B9F  318B  2312         	fcall	_wireWriteDataByte
  8128  0BA1  0008               	return
  8129  0BA2                     __end_of_setAmbientLightGain:	
  8130                           
  8131                           	psect	text14
  8132  09AE                     __ptext14:	
  8133 ;; *************** function _i2c1_driver_open *****************
  8134 ;; Defined at:
  8135 ;;		line 83 in file "mcc_generated_files/i2c1_driver.c"
  8136 ;; Parameters:    Size  Location     Type
  8137 ;;		None
  8138 ;; Auto vars:     Size  Location     Type
  8139 ;;		None
  8140 ;; Return value:  Size  Location     Type
  8141 ;;		None               void
  8142 ;; Registers used:
  8143 ;;		wreg, status,2
  8144 ;; Tracked objects:
  8145 ;;		On entry : 0/0
  8146 ;;		On exit  : 0/0
  8147 ;;		Unchanged: 0/0
  8148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8149 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8150 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8151 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8152 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8153 ;;Total ram usage:        0 bytes
  8154 ;; Hardware stack levels used:    1
  8155 ;; Hardware stack levels required when called:    5
  8156 ;; This function calls:
  8157 ;;		Nothing
  8158 ;; This function is called by:
  8159 ;;		_initialize
  8160 ;;		_i2c_open
  8161 ;;		_InitI2C
  8162 ;; This function uses a non-reentrant model
  8163 ;;
  8164                           
  8165                           
  8166                           ;psect for function _i2c1_driver_open
  8167  09AE                     _i2c1_driver_open:	
  8168                           
  8169                           ;incstack = 0
  8170                           ; Regs used in _i2c1_driver_open: [wreg+status,2]
  8171  09AE  0024               	movlb	4	; select bank4
  8172  09AF  1A95               	btfsc	21,5	;volatile
  8173  09B0  0008               	return
  8174  09B1  0194               	clrf	20	;volatile
  8175  09B2  3028               	movlw	40
  8176  09B3  0095               	movwf	21	;volatile
  8177  09B4  0196               	clrf	22	;volatile
  8178  09B5  3003               	movlw	3
  8179  09B6  0092               	movwf	18	;volatile
  8180  09B7  0008               	return
  8181  09B8                     __end_of_i2c1_driver_open:	
  8182                           
  8183                           	psect	text15
  8184  05F8                     __ptext15:	
  8185 ;; *************** function _enableGestureSensor *****************
  8186 ;; Defined at:
  8187 ;;		line 409 in file "APDS9960.c"
  8188 ;; Parameters:    Size  Location     Type
  8189 ;;  interrupts      1    wreg     _Bool 
  8190 ;; Auto vars:     Size  Location     Type
  8191 ;;  interrupts      1   17[BANK0 ] _Bool 
  8192 ;; Return value:  Size  Location     Type
  8193 ;;                  1    wreg      _Bool 
  8194 ;; Registers used:
  8195 ;;		wreg, status,2, status,0, pclath, cstack
  8196 ;; Tracked objects:
  8197 ;;		On entry : 0/0
  8198 ;;		On exit  : 0/0
  8199 ;;		Unchanged: 0/0
  8200 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8201 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8202 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8203 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8204 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8205 ;;Total ram usage:        2 bytes
  8206 ;; Hardware stack levels used:    1
  8207 ;; Hardware stack levels required when called:   11
  8208 ;; This function calls:
  8209 ;;		_enablePower
  8210 ;;		_resetGestureParameters
  8211 ;;		_setGestureIntEnable
  8212 ;;		_setGestureMode
  8213 ;;		_setLEDBoost
  8214 ;;		_setMode
  8215 ;;		_wireWriteDataByte
  8216 ;; This function is called by:
  8217 ;;		_main
  8218 ;; This function uses a non-reentrant model
  8219 ;;
  8220                           
  8221                           
  8222                           ;psect for function _enableGestureSensor
  8223  05F8                     _enableGestureSensor:	
  8224                           
  8225                           ;incstack = 0
  8226                           ; Regs used in _enableGestureSensor: [wreg+status,2+status,0+pclath+cstack]
  8227                           ;enableGestureSensor@interrupts stored from wreg
  8228  05F8  0020               	movlb	0	; select bank0
  8229  05F9  00B1               	movwf	enableGestureSensor@interrupts
  8230                           
  8231                           ;APDS9960.c: 409: _Bool enableGestureSensor ( _Bool interrupts);APDS9960.c: 410: {;APDS9
      +                          960.c: 418:     resetGestureParameters();
  8232  05FA  318A  226A  3185   	fcall	_resetGestureParameters
  8233                           
  8234                           ;APDS9960.c: 419:     if( !wireWriteDataByte(0x83, 0xFF) ) {
  8235  05FD  30FF               	movlw	255
  8236  05FE  0020               	movlb	0	; select bank0
  8237  05FF  00B0               	movwf	??_enableGestureSensor
  8238  0600  0830               	movf	??_enableGestureSensor,w
  8239  0601  00A6               	movwf	wireWriteDataByte@val
  8240  0602  3083               	movlw	131
  8241  0603  318B  2312  3185   	fcall	_wireWriteDataByte
  8242  0606  0020               	movlb	0	; select bank0
  8243  0607  0826               	movf	?_wireWriteDataByte,w
  8244  0608  0427               	iorwf	?_wireWriteDataByte+1,w
  8245  0609  1903               	btfsc	3,2
  8246  060A  0008               	return
  8247                           
  8248                           ;APDS9960.c: 422:     if( !wireWriteDataByte(0x8E, 0x89) ) {
  8249  060B  3089               	movlw	137
  8250  060C  00B0               	movwf	??_enableGestureSensor
  8251  060D  0830               	movf	??_enableGestureSensor,w
  8252  060E  00A6               	movwf	wireWriteDataByte@val
  8253  060F  308E               	movlw	142
  8254  0610  318B  2312  3185   	fcall	_wireWriteDataByte
  8255  0613  0020               	movlb	0	; select bank0
  8256  0614  0826               	movf	?_wireWriteDataByte,w
  8257  0615  0427               	iorwf	?_wireWriteDataByte+1,w
  8258  0616  1903               	btfsc	3,2
  8259  0617  0008               	return
  8260                           
  8261                           ;APDS9960.c: 425:     if( !setLEDBoost(3) ) {
  8262  0618  3003               	movlw	3
  8263  0619  318E  2639  3185   	fcall	_setLEDBoost
  8264  061C  3A00               	xorlw	0
  8265  061D  1903               	btfsc	3,2
  8266  061E  0008               	return
  8267                           
  8268                           ;APDS9960.c: 428:     if( interrupts ) {
  8269  061F  0020               	movlb	0	; select bank0
  8270  0620  0831               	movf	enableGestureSensor@interrupts,w
  8271  0621  1903               	btfsc	3,2
  8272  0622  2E25               	goto	l7492
  8273                           
  8274                           ;APDS9960.c: 429:         if( !setGestureIntEnable(1) ) {
  8275  0623  3001               	movlw	1
  8276  0624  2E26               	goto	L1
  8277  0625                     l7492:	
  8278                           
  8279                           ;APDS9960.c: 433:         if( !setGestureIntEnable(0) ) {
  8280  0625  3000               	movlw	0
  8281  0626                     L1:	
  8282  0626  318D  257F  3185   	fcall	_setGestureIntEnable
  8283  0629  3A00               	xorlw	0
  8284  062A  1903               	btfsc	3,2
  8285  062B  0008               	return
  8286                           
  8287                           ;APDS9960.c: 437:     if( !setGestureMode(1) ) {
  8288  062C  3001               	movlw	1
  8289  062D  318C  2412  3185   	fcall	_setGestureMode
  8290  0630  3A00               	xorlw	0
  8291  0631  1903               	btfsc	3,2
  8292  0632  0008               	return
  8293                           
  8294                           ;APDS9960.c: 440:     if( !enablePower() ){
  8295  0633  3189  21DB  3185   	fcall	_enablePower
  8296  0636  3A00               	xorlw	0
  8297  0637  1903               	btfsc	3,2
  8298  0638  0008               	return
  8299                           
  8300                           ;APDS9960.c: 443:     if( !setMode(3, 1) ) {
  8301  0639  0020               	movlb	0	; select bank0
  8302  063A  01AB               	clrf	setMode@enable
  8303  063B  0AAB               	incf	setMode@enable,f
  8304  063C  3003               	movlw	3
  8305  063D  3186  26A7  3185   	fcall	_setMode
  8306  0640  3A00               	xorlw	0
  8307  0641  1903               	btfsc	3,2
  8308  0642  0008               	return
  8309                           
  8310                           ;APDS9960.c: 446:     if( !setMode(2, 1) ) {
  8311  0643  0020               	movlb	0	; select bank0
  8312  0644  01AB               	clrf	setMode@enable
  8313  0645  0AAB               	incf	setMode@enable,f
  8314  0646  3002               	movlw	2
  8315  0647  3186  26A7  3185   	fcall	_setMode
  8316  064A  3A00               	xorlw	0
  8317  064B  1903               	btfsc	3,2
  8318  064C  0008               	return
  8319                           
  8320                           ;APDS9960.c: 449:     if( !setMode(6, 1) ) {
  8321  064D  0020               	movlb	0	; select bank0
  8322  064E  01AB               	clrf	setMode@enable
  8323  064F  0AAB               	incf	setMode@enable,f
  8324  0650  3006               	movlw	6
  8325  0651  3186  26A7         	fcall	_setMode
  8326  0653  0008               	return
  8327  0654                     __end_of_enableGestureSensor:	
  8328                           
  8329                           	psect	text16
  8330  0E39                     __ptext16:	
  8331 ;; *************** function _setLEDBoost *****************
  8332 ;; Defined at:
  8333 ;;		line 484 in file "APDS9960.c"
  8334 ;; Parameters:    Size  Location     Type
  8335 ;;  boost           1    wreg     unsigned char 
  8336 ;; Auto vars:     Size  Location     Type
  8337 ;;  boost           1   13[BANK0 ] unsigned char 
  8338 ;;  val             1   12[BANK0 ] unsigned char 
  8339 ;; Return value:  Size  Location     Type
  8340 ;;                  1    wreg      _Bool 
  8341 ;; Registers used:
  8342 ;;		wreg, status,2, status,0, pclath, cstack
  8343 ;; Tracked objects:
  8344 ;;		On entry : 0/0
  8345 ;;		On exit  : 0/0
  8346 ;;		Unchanged: 0/0
  8347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8348 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8349 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8350 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8351 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8352 ;;Total ram usage:        4 bytes
  8353 ;; Hardware stack levels used:    1
  8354 ;; Hardware stack levels required when called:    8
  8355 ;; This function calls:
  8356 ;;		_wireReadDataByte
  8357 ;;		_wireWriteDataByte
  8358 ;; This function is called by:
  8359 ;;		_enableGestureSensor
  8360 ;; This function uses a non-reentrant model
  8361 ;;
  8362                           
  8363                           
  8364                           ;psect for function _setLEDBoost
  8365  0E39                     _setLEDBoost:	
  8366                           
  8367                           ;incstack = 0
  8368                           ; Regs used in _setLEDBoost: [wreg+status,2+status,0+pclath+cstack]
  8369                           ;setLEDBoost@boost stored from wreg
  8370  0E39  0020               	movlb	0	; select bank0
  8371  0E3A  00AD               	movwf	setLEDBoost@boost
  8372                           
  8373                           ;APDS9960.c: 484: _Bool setLEDBoost(uint8_t boost);APDS9960.c: 485: {;APDS9960.c: 486:  
      +                             uint8_t val;;APDS9960.c: 489:     val=wireReadDataByte(0x90);
  8374  0E3B  3090               	movlw	144
  8375  0E3C  318B  23A2  318E   	fcall	_wireReadDataByte
  8376  0E3F  0020               	movlb	0	; select bank0
  8377  0E40  00AA               	movwf	??_setLEDBoost
  8378  0E41  082A               	movf	??_setLEDBoost,w
  8379  0E42  00AC               	movwf	setLEDBoost@val
  8380                           
  8381                           ;APDS9960.c: 492:     boost &= 0b00000011;
  8382  0E43  3003               	movlw	3
  8383  0E44  00AA               	movwf	??_setLEDBoost
  8384  0E45  082A               	movf	??_setLEDBoost,w
  8385  0E46  05AD               	andwf	setLEDBoost@boost,f
  8386                           
  8387                           ;APDS9960.c: 493:     boost = boost << 4;
  8388  0E47  082D               	movf	setLEDBoost@boost,w
  8389  0E48  00AA               	movwf	??_setLEDBoost
  8390  0E49  3003               	movlw	3
  8391  0E4A                     u6335:	
  8392  0E4A  35AA               	lslf	??_setLEDBoost,f
  8393  0E4B  3EFF               	addlw	-1
  8394  0E4C  1D03               	skipz
  8395  0E4D  2E4A               	goto	u6335
  8396  0E4E  352A               	lslf	??_setLEDBoost,w
  8397  0E4F  00AB               	movwf	??_setLEDBoost+1
  8398  0E50  082B               	movf	??_setLEDBoost+1,w
  8399  0E51  00AD               	movwf	setLEDBoost@boost
  8400                           
  8401                           ;APDS9960.c: 494:     val &= 0b11001111;
  8402  0E52  30CF               	movlw	207
  8403  0E53  00AA               	movwf	??_setLEDBoost
  8404  0E54  082A               	movf	??_setLEDBoost,w
  8405  0E55  05AC               	andwf	setLEDBoost@val,f
  8406                           
  8407                           ;APDS9960.c: 495:     val |= boost;
  8408  0E56  082D               	movf	setLEDBoost@boost,w
  8409  0E57  00AA               	movwf	??_setLEDBoost
  8410  0E58  082A               	movf	??_setLEDBoost,w
  8411  0E59  04AC               	iorwf	setLEDBoost@val,f
  8412                           
  8413                           ;APDS9960.c: 498:     if( !wireWriteDataByte(0x90, val) ) {
  8414  0E5A  082C               	movf	setLEDBoost@val,w
  8415  0E5B  00AA               	movwf	??_setLEDBoost
  8416  0E5C  082A               	movf	??_setLEDBoost,w
  8417  0E5D  00A6               	movwf	wireWriteDataByte@val
  8418  0E5E  3090               	movlw	144
  8419  0E5F  318B  2312  318E   	fcall	_wireWriteDataByte
  8420  0E62  0020               	movlb	0	; select bank0
  8421  0E63  0826               	movf	?_wireWriteDataByte,w
  8422  0E64  0427               	iorwf	?_wireWriteDataByte+1,w
  8423  0E65  1D03               	btfss	3,2
  8424  0E66  2E69               	goto	l7270
  8425                           
  8426                           ;APDS9960.c: 499:         return 0;
  8427  0E67  3000               	movlw	0
  8428  0E68  0008               	return
  8429  0E69                     l7270:	
  8430                           
  8431                           ;APDS9960.c: 502:     return 1;
  8432  0E69  3001               	movlw	1
  8433  0E6A  0008               	return
  8434  0E6B                     __end_of_setLEDBoost:	
  8435                           
  8436                           	psect	text17
  8437  0C12                     __ptext17:	
  8438 ;; *************** function _setGestureMode *****************
  8439 ;; Defined at:
  8440 ;;		line 506 in file "APDS9960.c"
  8441 ;; Parameters:    Size  Location     Type
  8442 ;;  mode            1    wreg     unsigned char 
  8443 ;; Auto vars:     Size  Location     Type
  8444 ;;  mode            1   11[BANK0 ] unsigned char 
  8445 ;;  val             1   12[BANK0 ] unsigned char 
  8446 ;; Return value:  Size  Location     Type
  8447 ;;                  1    wreg      _Bool 
  8448 ;; Registers used:
  8449 ;;		wreg, status,2, status,0, pclath, cstack
  8450 ;; Tracked objects:
  8451 ;;		On entry : 0/0
  8452 ;;		On exit  : 0/0
  8453 ;;		Unchanged: 0/0
  8454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8456 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8457 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8458 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8459 ;;Total ram usage:        3 bytes
  8460 ;; Hardware stack levels used:    1
  8461 ;; Hardware stack levels required when called:    8
  8462 ;; This function calls:
  8463 ;;		_wireReadDataByte
  8464 ;;		_wireWriteDataByte
  8465 ;; This function is called by:
  8466 ;;		_enableGestureSensor
  8467 ;; This function uses a non-reentrant model
  8468 ;;
  8469                           
  8470                           
  8471                           ;psect for function _setGestureMode
  8472  0C12                     _setGestureMode:	
  8473                           
  8474                           ;incstack = 0
  8475                           ; Regs used in _setGestureMode: [wreg+status,2+status,0+pclath+cstack]
  8476                           ;setGestureMode@mode stored from wreg
  8477  0C12  0020               	movlb	0	; select bank0
  8478  0C13  00AB               	movwf	setGestureMode@mode
  8479                           
  8480                           ;APDS9960.c: 506: _Bool setGestureMode(uint8_t mode);APDS9960.c: 507: {;APDS9960.c: 508:
      +                               uint8_t val;;APDS9960.c: 511:     val = wireReadDataByte(0xAB);
  8481  0C14  30AB               	movlw	171
  8482  0C15  318B  23A2  318C   	fcall	_wireReadDataByte
  8483  0C18  0020               	movlb	0	; select bank0
  8484  0C19  00AA               	movwf	??_setGestureMode
  8485  0C1A  082A               	movf	??_setGestureMode,w
  8486  0C1B  00AC               	movwf	setGestureMode@val
  8487                           
  8488                           ;APDS9960.c: 514:     mode &= 0b00000001;
  8489  0C1C  3001               	movlw	1
  8490  0C1D  00AA               	movwf	??_setGestureMode
  8491  0C1E  082A               	movf	??_setGestureMode,w
  8492  0C1F  05AB               	andwf	setGestureMode@mode,f
  8493                           
  8494                           ;APDS9960.c: 515:     val &= 0b11111110;
  8495  0C20  30FE               	movlw	254
  8496  0C21  00AA               	movwf	??_setGestureMode
  8497  0C22  082A               	movf	??_setGestureMode,w
  8498  0C23  05AC               	andwf	setGestureMode@val,f
  8499                           
  8500                           ;APDS9960.c: 516:     val |= mode;
  8501  0C24  082B               	movf	setGestureMode@mode,w
  8502  0C25  00AA               	movwf	??_setGestureMode
  8503  0C26  082A               	movf	??_setGestureMode,w
  8504  0C27  04AC               	iorwf	setGestureMode@val,f
  8505                           
  8506                           ;APDS9960.c: 519:     if( !wireWriteDataByte(0xAB, val) ) {
  8507  0C28  082C               	movf	setGestureMode@val,w
  8508  0C29  00AA               	movwf	??_setGestureMode
  8509  0C2A  082A               	movf	??_setGestureMode,w
  8510  0C2B  00A6               	movwf	wireWriteDataByte@val
  8511  0C2C  30AB               	movlw	171
  8512  0C2D  318B  2312  318C   	fcall	_wireWriteDataByte
  8513  0C30  0020               	movlb	0	; select bank0
  8514  0C31  0826               	movf	?_wireWriteDataByte,w
  8515  0C32  0427               	iorwf	?_wireWriteDataByte+1,w
  8516  0C33  1D03               	btfss	3,2
  8517  0C34  2C37               	goto	l7288
  8518                           
  8519                           ;APDS9960.c: 520:         return 0;
  8520  0C35  3000               	movlw	0
  8521  0C36  0008               	return
  8522  0C37                     l7288:	
  8523                           
  8524                           ;APDS9960.c: 523:     return 1;
  8525  0C37  3001               	movlw	1
  8526  0C38  0008               	return
  8527  0C39                     __end_of_setGestureMode:	
  8528                           
  8529                           	psect	text18
  8530  0D7F                     __ptext18:	
  8531 ;; *************** function _setGestureIntEnable *****************
  8532 ;; Defined at:
  8533 ;;		line 387 in file "APDS9960.c"
  8534 ;; Parameters:    Size  Location     Type
  8535 ;;  enable          1    wreg     unsigned char 
  8536 ;; Auto vars:     Size  Location     Type
  8537 ;;  enable          1   12[BANK0 ] unsigned char 
  8538 ;;  val             1   11[BANK0 ] unsigned char 
  8539 ;; Return value:  Size  Location     Type
  8540 ;;                  1    wreg      _Bool 
  8541 ;; Registers used:
  8542 ;;		wreg, status,2, status,0, pclath, cstack
  8543 ;; Tracked objects:
  8544 ;;		On entry : 0/0
  8545 ;;		On exit  : 0/0
  8546 ;;		Unchanged: 0/0
  8547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8548 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8549 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8550 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8551 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8552 ;;Total ram usage:        3 bytes
  8553 ;; Hardware stack levels used:    1
  8554 ;; Hardware stack levels required when called:    8
  8555 ;; This function calls:
  8556 ;;		_wireReadDataByte
  8557 ;;		_wireWriteDataByte
  8558 ;; This function is called by:
  8559 ;;		_initialize
  8560 ;;		_enableGestureSensor
  8561 ;; This function uses a non-reentrant model
  8562 ;;
  8563                           
  8564                           
  8565                           ;psect for function _setGestureIntEnable
  8566  0D7F                     _setGestureIntEnable:	
  8567                           
  8568                           ;incstack = 0
  8569                           ; Regs used in _setGestureIntEnable: [wreg+status,2+status,0+pclath+cstack]
  8570                           ;setGestureIntEnable@enable stored from wreg
  8571  0D7F  0020               	movlb	0	; select bank0
  8572  0D80  00AC               	movwf	setGestureIntEnable@enable
  8573                           
  8574                           ;APDS9960.c: 387: _Bool setGestureIntEnable(uint8_t enable);APDS9960.c: 388: {;APDS9960.
      +                          c: 389:     uint8_t val;;APDS9960.c: 392:     val = wireReadDataByte(0xAB);
  8575  0D81  30AB               	movlw	171
  8576  0D82  318B  23A2  318D   	fcall	_wireReadDataByte
  8577  0D85  0020               	movlb	0	; select bank0
  8578  0D86  00AA               	movwf	??_setGestureIntEnable
  8579  0D87  082A               	movf	??_setGestureIntEnable,w
  8580  0D88  00AB               	movwf	setGestureIntEnable@val
  8581                           
  8582                           ;APDS9960.c: 395:     enable &= 0b00000001;
  8583  0D89  3001               	movlw	1
  8584  0D8A  00AA               	movwf	??_setGestureIntEnable
  8585  0D8B  082A               	movf	??_setGestureIntEnable,w
  8586  0D8C  05AC               	andwf	setGestureIntEnable@enable,f
  8587                           
  8588                           ;APDS9960.c: 396:     enable = enable << 1;
  8589  0D8D  352C               	lslf	setGestureIntEnable@enable,w
  8590  0D8E  00AA               	movwf	??_setGestureIntEnable
  8591  0D8F  082A               	movf	??_setGestureIntEnable,w
  8592  0D90  00AC               	movwf	setGestureIntEnable@enable
  8593                           
  8594                           ;APDS9960.c: 397:     val &= 0b11111101;
  8595  0D91  30FD               	movlw	253
  8596  0D92  00AA               	movwf	??_setGestureIntEnable
  8597  0D93  082A               	movf	??_setGestureIntEnable,w
  8598  0D94  05AB               	andwf	setGestureIntEnable@val,f
  8599                           
  8600                           ;APDS9960.c: 398:     val |= enable;
  8601  0D95  082C               	movf	setGestureIntEnable@enable,w
  8602  0D96  00AA               	movwf	??_setGestureIntEnable
  8603  0D97  082A               	movf	??_setGestureIntEnable,w
  8604  0D98  04AB               	iorwf	setGestureIntEnable@val,f
  8605                           
  8606                           ;APDS9960.c: 401:     if( !wireWriteDataByte(0xAB, val) ) {
  8607  0D99  082B               	movf	setGestureIntEnable@val,w
  8608  0D9A  00AA               	movwf	??_setGestureIntEnable
  8609  0D9B  082A               	movf	??_setGestureIntEnable,w
  8610  0D9C  00A6               	movwf	wireWriteDataByte@val
  8611  0D9D  30AB               	movlw	171
  8612  0D9E  318B  2312  318D   	fcall	_wireWriteDataByte
  8613  0DA1  0020               	movlb	0	; select bank0
  8614  0DA2  0826               	movf	?_wireWriteDataByte,w
  8615  0DA3  0427               	iorwf	?_wireWriteDataByte+1,w
  8616  0DA4  1D03               	btfss	3,2
  8617  0DA5  2DA8               	goto	l7250
  8618                           
  8619                           ;APDS9960.c: 402:         return 0;
  8620  0DA6  3000               	movlw	0
  8621  0DA7  0008               	return
  8622  0DA8                     l7250:	
  8623                           
  8624                           ;APDS9960.c: 405:     return 1;
  8625  0DA8  3001               	movlw	1
  8626  0DA9  0008               	return
  8627  0DAA                     __end_of_setGestureIntEnable:	
  8628                           
  8629                           	psect	text19
  8630  0A6A                     __ptext19:	
  8631 ;; *************** function _resetGestureParameters *****************
  8632 ;; Defined at:
  8633 ;;		line 457 in file "APDS9960.c"
  8634 ;; Parameters:    Size  Location     Type
  8635 ;;		None
  8636 ;; Auto vars:     Size  Location     Type
  8637 ;;		None
  8638 ;; Return value:  Size  Location     Type
  8639 ;;                  1    wreg      void 
  8640 ;; Registers used:
  8641 ;;		status,2
  8642 ;; Tracked objects:
  8643 ;;		On entry : 0/0
  8644 ;;		On exit  : 0/0
  8645 ;;		Unchanged: 0/0
  8646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8647 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8648 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8649 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8650 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8651 ;;Total ram usage:        0 bytes
  8652 ;; Hardware stack levels used:    1
  8653 ;; Hardware stack levels required when called:    5
  8654 ;; This function calls:
  8655 ;;		Nothing
  8656 ;; This function is called by:
  8657 ;;		_enableGestureSensor
  8658 ;;		_readGesture
  8659 ;; This function uses a non-reentrant model
  8660 ;;
  8661                           
  8662                           
  8663                           ;psect for function _resetGestureParameters
  8664  0A6A                     _resetGestureParameters:	
  8665                           
  8666                           ;APDS9960.c: 460:     gesture_data_.index = 0;
  8667                           
  8668                           ;incstack = 0
  8669                           ; Regs used in _resetGestureParameters: [status,2]
  8670  0A6A  0023               	movlb	3	; select bank3
  8671  0A6B  01E0               	clrf	(_gesture_data_^(0+384)+64)
  8672                           
  8673                           ;APDS9960.c: 461:     gesture_data_.total_gestures = 0;
  8674  0A6C  01E1               	clrf	(_gesture_data_^(0+384)+65)
  8675                           
  8676                           ;APDS9960.c: 463:     gesture_ud_delta_ = 0;
  8677  0A6D  01F2               	clrf	_gesture_ud_delta_
  8678  0A6E  01F3               	clrf	_gesture_ud_delta_+1
  8679                           
  8680                           ;APDS9960.c: 464:     gesture_lr_delta_ = 0;
  8681  0A6F  01F0               	clrf	_gesture_lr_delta_
  8682  0A70  01F1               	clrf	_gesture_lr_delta_+1
  8683                           
  8684                           ;APDS9960.c: 466:     gesture_ud_count_ = 0;
  8685  0A71  0021               	movlb	1	; select bank1
  8686  0A72  01B6               	clrf	_gesture_ud_count_^(0+128)
  8687  0A73  01B7               	clrf	(_gesture_ud_count_+1)^(0+128)
  8688                           
  8689                           ;APDS9960.c: 467:     gesture_lr_count_ = 0;
  8690  0A74  01B4               	clrf	_gesture_lr_count_^(0+128)
  8691  0A75  01B5               	clrf	(_gesture_lr_count_+1)^(0+128)
  8692                           
  8693                           ;APDS9960.c: 469:     gesture_near_count_ = 0;
  8694  0A76  01B2               	clrf	_gesture_near_count_^(0+128)
  8695  0A77  01B3               	clrf	(_gesture_near_count_+1)^(0+128)
  8696                           
  8697                           ;APDS9960.c: 470:     gesture_far_count_ = 0;
  8698  0A78  01B0               	clrf	_gesture_far_count_^(0+128)
  8699  0A79  01B1               	clrf	(_gesture_far_count_+1)^(0+128)
  8700                           
  8701                           ;APDS9960.c: 472:     gesture_state_ = 0;
  8702  0A7A  01AE               	clrf	_gesture_state_^(0+128)
  8703  0A7B  01AF               	clrf	(_gesture_state_+1)^(0+128)
  8704                           
  8705                           ;APDS9960.c: 473:     gesture_motion_ = DIR_NONE;
  8706  0A7C  01AC               	clrf	_gesture_motion_^(0+128)
  8707  0A7D  01AD               	clrf	(_gesture_motion_+1)^(0+128)
  8708  0A7E  0008               	return
  8709  0A7F                     __end_of_resetGestureParameters:	
  8710                           
  8711                           	psect	text20
  8712  09DB                     __ptext20:	
  8713 ;; *************** function _enablePower *****************
  8714 ;; Defined at:
  8715 ;;		line 527 in file "APDS9960.c"
  8716 ;; Parameters:    Size  Location     Type
  8717 ;;		None
  8718 ;; Auto vars:     Size  Location     Type
  8719 ;;		None
  8720 ;; Return value:  Size  Location     Type
  8721 ;;                  1    wreg      _Bool 
  8722 ;; Registers used:
  8723 ;;		wreg, status,2, status,0, pclath, cstack
  8724 ;; Tracked objects:
  8725 ;;		On entry : 0/0
  8726 ;;		On exit  : 0/0
  8727 ;;		Unchanged: 0/0
  8728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8729 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8730 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8731 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8732 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8733 ;;Total ram usage:        0 bytes
  8734 ;; Hardware stack levels used:    1
  8735 ;; Hardware stack levels required when called:   10
  8736 ;; This function calls:
  8737 ;;		_setMode
  8738 ;; This function is called by:
  8739 ;;		_enableGestureSensor
  8740 ;; This function uses a non-reentrant model
  8741 ;;
  8742                           
  8743                           
  8744                           ;psect for function _enablePower
  8745  09DB                     _enablePower:	
  8746                           
  8747                           ;APDS9960.c: 529:     if( !setMode(0, 1) ) {
  8748                           
  8749                           ;incstack = 0
  8750                           ; Regs used in _enablePower: [wreg+status,2+status,0+pclath+cstack]
  8751  09DB  0020               	movlb	0	; select bank0
  8752  09DC  01AB               	clrf	setMode@enable
  8753  09DD  0AAB               	incf	setMode@enable,f
  8754  09DE  3000               	movlw	0
  8755  09DF  3186  26A7  3189   	fcall	_setMode
  8756  09E2  3A00               	xorlw	0
  8757  09E3  1D03               	skipz
  8758  09E4  29E7               	goto	l7298
  8759                           
  8760                           ;APDS9960.c: 530:         return 0;
  8761  09E5  3000               	movlw	0
  8762  09E6  0008               	return
  8763  09E7                     l7298:	
  8764                           
  8765                           ;APDS9960.c: 533:     return 1;
  8766  09E7  3001               	movlw	1
  8767  09E8  0008               	return
  8768  09E9                     __end_of_enablePower:	
  8769                           
  8770                           	psect	text21
  8771  06A7                     __ptext21:	
  8772 ;; *************** function _setMode *****************
  8773 ;; Defined at:
  8774 ;;		line 124 in file "APDS9960.c"
  8775 ;; Parameters:    Size  Location     Type
  8776 ;;  mode            1    wreg     unsigned char 
  8777 ;;  enable          1   11[BANK0 ] unsigned char 
  8778 ;; Auto vars:     Size  Location     Type
  8779 ;;  mode            1   15[BANK0 ] unsigned char 
  8780 ;;  reg_val         1   14[BANK0 ] unsigned char 
  8781 ;; Return value:  Size  Location     Type
  8782 ;;                  1    wreg      _Bool 
  8783 ;; Registers used:
  8784 ;;		wreg, status,2, status,0, pclath, cstack
  8785 ;; Tracked objects:
  8786 ;;		On entry : 0/0
  8787 ;;		On exit  : 0/0
  8788 ;;		Unchanged: 0/0
  8789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8790 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8791 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8792 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8793 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8794 ;;Total ram usage:        5 bytes
  8795 ;; Hardware stack levels used:    1
  8796 ;; Hardware stack levels required when called:    9
  8797 ;; This function calls:
  8798 ;;		_getMode
  8799 ;;		_wireWriteDataByte
  8800 ;; This function is called by:
  8801 ;;		_initialize
  8802 ;;		_enableGestureSensor
  8803 ;;		_enablePower
  8804 ;; This function uses a non-reentrant model
  8805 ;;
  8806                           
  8807                           
  8808                           ;psect for function _setMode
  8809  06A7                     _setMode:	
  8810                           
  8811                           ;incstack = 0
  8812                           ; Regs used in _setMode: [wreg+status,2+status,0+pclath+cstack]
  8813                           ;setMode@mode stored from wreg
  8814  06A7  0020               	movlb	0	; select bank0
  8815  06A8  00AF               	movwf	setMode@mode
  8816                           
  8817                           ;APDS9960.c: 124: _Bool setMode(uint8_t mode, uint8_t enable);APDS9960.c: 125: {;APDS996
      +                          0.c: 126:     uint8_t reg_val;;APDS9960.c: 129:     reg_val = getMode();
  8818  06A9  3189  21A5  3186   	fcall	_getMode
  8819  06AC  0020               	movlb	0	; select bank0
  8820  06AD  00AC               	movwf	??_setMode
  8821  06AE  082C               	movf	??_setMode,w
  8822  06AF  00AE               	movwf	setMode@reg_val
  8823                           
  8824                           ;APDS9960.c: 130:     if( reg_val == 0xFF ) {
  8825  06B0  0A2E               	incf	setMode@reg_val,w
  8826  06B1  1D03               	btfss	3,2
  8827  06B2  2EB5               	goto	l6854
  8828  06B3                     l6850:	
  8829                           
  8830                           ;APDS9960.c: 131:         return 0;
  8831  06B3  3000               	movlw	0
  8832  06B4  0008               	return
  8833  06B5                     l6854:	
  8834                           
  8835                           ;APDS9960.c: 135:     enable = enable & 0x01;
  8836  06B5  082B               	movf	setMode@enable,w
  8837  06B6  3901               	andlw	1
  8838  06B7  00AC               	movwf	??_setMode
  8839  06B8  082C               	movf	??_setMode,w
  8840  06B9  00AB               	movwf	setMode@enable
  8841                           
  8842                           ;APDS9960.c: 136:     if( mode >= 0 && mode <= 6 ) {
  8843  06BA  3007               	movlw	7
  8844  06BB  022F               	subwf	setMode@mode,w
  8845  06BC  1803               	skipnc
  8846  06BD  2EDA               	goto	l6864
  8847                           
  8848                           ;APDS9960.c: 137:         if (enable) {
  8849  06BE  082B               	movf	setMode@enable,w
  8850  06BF  1903               	btfsc	3,2
  8851  06C0  2ECD               	goto	l6862
  8852                           
  8853                           ;APDS9960.c: 138:             reg_val |= (1 << mode);
  8854  06C1  3001               	movlw	1
  8855  06C2  00AC               	movwf	??_setMode
  8856  06C3  0A2F               	incf	setMode@mode,w
  8857  06C4  2EC6               	goto	u6084
  8858  06C5                     u6085:	
  8859  06C5  35AC               	lslf	??_setMode,f
  8860  06C6                     u6084:	
  8861  06C6  0B89               	decfsz	9,f
  8862  06C7  2EC5               	goto	u6085
  8863  06C8  082C               	movf	??_setMode,w
  8864  06C9  00AD               	movwf	??_setMode+1
  8865  06CA  082D               	movf	??_setMode+1,w
  8866  06CB  04AE               	iorwf	setMode@reg_val,f
  8867                           
  8868                           ;APDS9960.c: 139:         } else {
  8869  06CC  2EE7               	goto	l6872
  8870  06CD                     l6862:	
  8871                           
  8872                           ;APDS9960.c: 140:             reg_val &= ~(1 << mode);
  8873  06CD  3001               	movlw	1
  8874  06CE  00AC               	movwf	??_setMode
  8875  06CF  0A2F               	incf	setMode@mode,w
  8876  06D0  2ED2               	goto	u6094
  8877  06D1                     u6095:	
  8878  06D1  35AC               	lslf	??_setMode,f
  8879  06D2                     u6094:	
  8880  06D2  0B89               	decfsz	9,f
  8881  06D3  2ED1               	goto	u6095
  8882  06D4  082C               	movf	??_setMode,w
  8883  06D5  3AFF               	xorlw	255
  8884  06D6  00AD               	movwf	??_setMode+1
  8885  06D7  082D               	movf	??_setMode+1,w
  8886  06D8  05AE               	andwf	setMode@reg_val,f
  8887  06D9  2EE7               	goto	l6872
  8888  06DA                     l6864:	
  8889  06DA  3007               	movlw	7
  8890  06DB  062F               	xorwf	setMode@mode,w
  8891  06DC  1D03               	btfss	3,2
  8892  06DD  2EE7               	goto	l6872
  8893                           
  8894                           ;APDS9960.c: 143:         if (enable) {
  8895  06DE  082B               	movf	setMode@enable,w
  8896  06DF  1903               	btfsc	3,2
  8897  06E0  2EE6               	goto	l6870
  8898                           
  8899                           ;APDS9960.c: 144:             reg_val = 0x7F;
  8900  06E1  307F               	movlw	127
  8901  06E2  00AC               	movwf	??_setMode
  8902  06E3  082C               	movf	??_setMode,w
  8903  06E4  00AE               	movwf	setMode@reg_val
  8904                           
  8905                           ;APDS9960.c: 145:         } else {
  8906  06E5  2EE7               	goto	l6872
  8907  06E6                     l6870:	
  8908                           
  8909                           ;APDS9960.c: 146:             reg_val = 0x00;
  8910  06E6  01AE               	clrf	setMode@reg_val
  8911  06E7                     l6872:	
  8912                           
  8913                           ;APDS9960.c: 151:     if( !wireWriteDataByte(0x80, reg_val) ) {
  8914  06E7  082E               	movf	setMode@reg_val,w
  8915  06E8  00AC               	movwf	??_setMode
  8916  06E9  082C               	movf	??_setMode,w
  8917  06EA  00A6               	movwf	wireWriteDataByte@val
  8918  06EB  3080               	movlw	128
  8919  06EC  318B  2312  3186   	fcall	_wireWriteDataByte
  8920  06EF  0020               	movlb	0	; select bank0
  8921  06F0  0826               	movf	?_wireWriteDataByte,w
  8922  06F1  0427               	iorwf	?_wireWriteDataByte+1,w
  8923  06F2  1903               	btfsc	3,2
  8924  06F3  2EB3               	goto	l6850
  8925                           
  8926                           ;APDS9960.c: 155:     return 1;
  8927  06F4  3001               	movlw	1
  8928  06F5  0008               	return
  8929  06F6                     __end_of_setMode:	
  8930                           
  8931                           	psect	text22
  8932  0B12                     __ptext22:	
  8933 ;; *************** function _wireWriteDataByte *****************
  8934 ;; Defined at:
  8935 ;;		line 871 in file "APDS9960.c"
  8936 ;; Parameters:    Size  Location     Type
  8937 ;;  reg             1    wreg     unsigned char 
  8938 ;;  val             1    6[BANK0 ] unsigned char 
  8939 ;; Auto vars:     Size  Location     Type
  8940 ;;  reg             1    9[BANK0 ] unsigned char 
  8941 ;; Return value:  Size  Location     Type
  8942 ;;                  2    6[BANK0 ] int 
  8943 ;; Registers used:
  8944 ;;		wreg, status,2, status,0, pclath, cstack
  8945 ;; Tracked objects:
  8946 ;;		On entry : 0/0
  8947 ;;		On exit  : 0/0
  8948 ;;		Unchanged: 0/0
  8949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8950 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8951 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8952 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8953 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8954 ;;Total ram usage:        4 bytes
  8955 ;; Hardware stack levels used:    1
  8956 ;; Hardware stack levels required when called:    7
  8957 ;; This function calls:
  8958 ;;		_I2C_Start
  8959 ;;		_I2C_Stop
  8960 ;;		_I2C_Write_Byte
  8961 ;; This function is called by:
  8962 ;;		_initialize
  8963 ;;		_setMode
  8964 ;;		_setLEDDrive
  8965 ;;		_setProximityGain
  8966 ;;		_setAmbientLightGain
  8967 ;;		_setProxIntLowThresh
  8968 ;;		_setProxIntHighThresh
  8969 ;;		_setLightIntLowThreshold
  8970 ;;		_setLightIntHighThreshold
  8971 ;;		_setGestureEnterThresh
  8972 ;;		_setGestureExitThresh
  8973 ;;		_setGestureGain
  8974 ;;		_setGestureLEDDrive
  8975 ;;		_setGestureWaitTime
  8976 ;;		_setGestureIntEnable
  8977 ;;		_enableGestureSensor
  8978 ;;		_setLEDBoost
  8979 ;;		_setGestureMode
  8980 ;; This function uses a non-reentrant model
  8981 ;;
  8982                           
  8983                           
  8984                           ;psect for function _wireWriteDataByte
  8985  0B12                     _wireWriteDataByte:	
  8986                           
  8987                           ;incstack = 0
  8988                           ; Regs used in _wireWriteDataByte: [wreg+status,2+status,0+pclath+cstack]
  8989                           ;wireWriteDataByte@reg stored from wreg
  8990  0B12  0020               	movlb	0	; select bank0
  8991  0B13  00A9               	movwf	wireWriteDataByte@reg
  8992                           
  8993                           ;APDS9960.c: 871: int wireWriteDataByte(unsigned char reg, unsigned char val);APDS9960.c
      +                          : 872: {;APDS9960.c: 882:     I2C_Start();
  8994  0B14  3188  20C0  318B   	fcall	_I2C_Start
  8995                           
  8996                           ;APDS9960.c: 883:     I2C_Write_Byte((0x39 << 1 )| 0x00);
  8997  0B17  3072               	movlw	114
  8998  0B18  318B  232D  318B   	fcall	_I2C_Write_Byte
  8999                           
  9000                           ;APDS9960.c: 884:     I2C_Write_Byte(reg);
  9001  0B1B  0020               	movlb	0	; select bank0
  9002  0B1C  0829               	movf	wireWriteDataByte@reg,w
  9003  0B1D  318B  232D  318B   	fcall	_I2C_Write_Byte
  9004                           
  9005                           ;APDS9960.c: 885:     I2C_Write_Byte(val);
  9006  0B20  0020               	movlb	0	; select bank0
  9007  0B21  0826               	movf	wireWriteDataByte@val,w
  9008  0B22  318B  232D  318B   	fcall	_I2C_Write_Byte
  9009                           
  9010                           ;APDS9960.c: 886:     I2C_Stop();
  9011  0B25  3188  20C6         	fcall	_I2C_Stop
  9012                           
  9013                           ;APDS9960.c: 889:     return 1;
  9014  0B27  3001               	movlw	1
  9015  0B28  0020               	movlb	0	; select bank0
  9016  0B29  00A6               	movwf	?_wireWriteDataByte
  9017  0B2A  3000               	movlw	0
  9018  0B2B  00A7               	movwf	?_wireWriteDataByte+1
  9019  0B2C  0008               	return
  9020  0B2D                     __end_of_wireWriteDataByte:	
  9021                           
  9022                           	psect	text23
  9023  09A5                     __ptext23:	
  9024 ;; *************** function _getMode *****************
  9025 ;; Defined at:
  9026 ;;		line 159 in file "APDS9960.c"
  9027 ;; Parameters:    Size  Location     Type
  9028 ;;		None
  9029 ;; Auto vars:     Size  Location     Type
  9030 ;;  enable_value    1   10[BANK0 ] unsigned char 
  9031 ;; Return value:  Size  Location     Type
  9032 ;;                  1    wreg      unsigned char 
  9033 ;; Registers used:
  9034 ;;		wreg, status,2, status,0, pclath, cstack
  9035 ;; Tracked objects:
  9036 ;;		On entry : 0/0
  9037 ;;		On exit  : 0/0
  9038 ;;		Unchanged: 0/0
  9039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9040 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9041 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9042 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9043 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9044 ;;Total ram usage:        2 bytes
  9045 ;; Hardware stack levels used:    1
  9046 ;; Hardware stack levels required when called:    8
  9047 ;; This function calls:
  9048 ;;		_wireReadDataByte
  9049 ;; This function is called by:
  9050 ;;		_setMode
  9051 ;;		_readGesture
  9052 ;; This function uses a non-reentrant model
  9053 ;;
  9054                           
  9055                           
  9056                           ;psect for function _getMode
  9057  09A5                     _getMode:	
  9058                           
  9059                           ;APDS9960.c: 161:     uint8_t enable_value;;APDS9960.c: 164:     enable_value = wireRead
      +                          DataByte(0x80);
  9060                           
  9061                           ;incstack = 0
  9062                           ; Regs used in _getMode: [wreg+status,2+status,0+pclath+cstack]
  9063  09A5  3080               	movlw	128
  9064  09A6  318B  23A2         	fcall	_wireReadDataByte
  9065  09A8  0020               	movlb	0	; select bank0
  9066  09A9  00A9               	movwf	??_getMode
  9067  09AA  0829               	movf	??_getMode,w
  9068  09AB  00AA               	movwf	getMode@enable_value
  9069                           
  9070                           ;APDS9960.c: 166:     return enable_value;
  9071  09AC  082A               	movf	getMode@enable_value,w
  9072  09AD  0008               	return
  9073  09AE                     __end_of_getMode:	
  9074                           
  9075                           	psect	text24
  9076  0BA2                     __ptext24:	
  9077 ;; *************** function _wireReadDataByte *****************
  9078 ;; Defined at:
  9079 ;;		line 893 in file "APDS9960.c"
  9080 ;; Parameters:    Size  Location     Type
  9081 ;;  reg             1    wreg     unsigned char 
  9082 ;; Auto vars:     Size  Location     Type
  9083 ;;  reg             1    7[BANK0 ] unsigned char 
  9084 ;;  val             1    8[BANK0 ] unsigned char 
  9085 ;; Return value:  Size  Location     Type
  9086 ;;                  1    wreg      unsigned char 
  9087 ;; Registers used:
  9088 ;;		wreg, status,2, status,0, pclath, cstack
  9089 ;; Tracked objects:
  9090 ;;		On entry : 0/0
  9091 ;;		On exit  : 0/0
  9092 ;;		Unchanged: 0/0
  9093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9094 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9095 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9096 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9097 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9098 ;;Total ram usage:        3 bytes
  9099 ;; Hardware stack levels used:    1
  9100 ;; Hardware stack levels required when called:    7
  9101 ;; This function calls:
  9102 ;;		_I2C_ReStart
  9103 ;;		_I2C_Read_Byte
  9104 ;;		_I2C_Send_NACK
  9105 ;;		_I2C_Start
  9106 ;;		_I2C_Stop
  9107 ;;		_I2C_Write_Byte
  9108 ;; This function is called by:
  9109 ;;		_initialize
  9110 ;;		_getMode
  9111 ;;		_setLEDDrive
  9112 ;;		_setProximityGain
  9113 ;;		_setAmbientLightGain
  9114 ;;		_setGestureGain
  9115 ;;		_setGestureLEDDrive
  9116 ;;		_setGestureWaitTime
  9117 ;;		_setGestureIntEnable
  9118 ;;		_setLEDBoost
  9119 ;;		_setGestureMode
  9120 ;;		_isGestureAvailable
  9121 ;;		_readGesture
  9122 ;; This function uses a non-reentrant model
  9123 ;;
  9124                           
  9125                           
  9126                           ;psect for function _wireReadDataByte
  9127  0BA2                     _wireReadDataByte:	
  9128                           
  9129                           ;incstack = 0
  9130                           ; Regs used in _wireReadDataByte: [wreg+status,2+status,0+pclath+cstack]
  9131                           ;wireReadDataByte@reg stored from wreg
  9132  0BA2  0020               	movlb	0	; select bank0
  9133  0BA3  00A7               	movwf	wireReadDataByte@reg
  9134                           
  9135                           ;APDS9960.c: 893:  unsigned char wireReadDataByte(unsigned char reg);APDS9960.c: 894: {;
      +                          APDS9960.c: 908:     unsigned char val;;APDS9960.c: 909:     I2C_Start();
  9136  0BA4  3188  20C0  318B   	fcall	_I2C_Start
  9137                           
  9138                           ;APDS9960.c: 910:     I2C_Write_Byte((0x39 << 1 )| 0x00);
  9139  0BA7  3072               	movlw	114
  9140  0BA8  318B  232D  318B   	fcall	_I2C_Write_Byte
  9141                           
  9142                           ;APDS9960.c: 911:     I2C_Write_Byte(reg);
  9143  0BAB  0020               	movlb	0	; select bank0
  9144  0BAC  0827               	movf	wireReadDataByte@reg,w
  9145  0BAD  318B  232D  318B   	fcall	_I2C_Write_Byte
  9146                           
  9147                           ;APDS9960.c: 912:     I2C_ReStart();
  9148  0BB0  3188  20B1  318B   	fcall	_I2C_ReStart
  9149                           
  9150                           ;APDS9960.c: 914:     I2C_Write_Byte((0x39 << 1) | 0x01);
  9151  0BB3  3073               	movlw	115
  9152  0BB4  318B  232D  318B   	fcall	_I2C_Write_Byte
  9153                           
  9154                           ;APDS9960.c: 915:     val=I2C_Read_Byte();
  9155  0BB7  3189  21B8  318B   	fcall	_I2C_Read_Byte
  9156  0BBA  0020               	movlb	0	; select bank0
  9157  0BBB  00A6               	movwf	??_wireReadDataByte
  9158  0BBC  0826               	movf	??_wireReadDataByte,w
  9159  0BBD  00A8               	movwf	wireReadDataByte@val
  9160                           
  9161                           ;APDS9960.c: 916:     I2C_Send_NACK();
  9162  0BBE  3188  20BA  318B   	fcall	_I2C_Send_NACK
  9163                           
  9164                           ;APDS9960.c: 917:     I2C_Stop();
  9165  0BC1  3188  20C6         	fcall	_I2C_Stop
  9166                           
  9167                           ;APDS9960.c: 919:     return val;
  9168  0BC3  0020               	movlb	0	; select bank0
  9169  0BC4  0828               	movf	wireReadDataByte@val,w
  9170  0BC5  0008               	return
  9171  0BC6                     __end_of_wireReadDataByte:	
  9172                           
  9173                           	psect	text25
  9174  0B2D                     __ptext25:	
  9175 ;; *************** function _I2C_Write_Byte *****************
  9176 ;; Defined at:
  9177 ;;		line 75 in file "i2c.c"
  9178 ;; Parameters:    Size  Location     Type
  9179 ;;  Byte            1    wreg     unsigned char 
  9180 ;; Auto vars:     Size  Location     Type
  9181 ;;  Byte            1    3[BANK0 ] unsigned char 
  9182 ;;  count           2    4[BANK0 ] unsigned int 
  9183 ;; Return value:  Size  Location     Type
  9184 ;;                  1    wreg      void 
  9185 ;; Registers used:
  9186 ;;		wreg, status,2, status,0, pclath, cstack
  9187 ;; Tracked objects:
  9188 ;;		On entry : 0/0
  9189 ;;		On exit  : 0/0
  9190 ;;		Unchanged: 0/0
  9191 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9192 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9193 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9194 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9195 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9196 ;;Total ram usage:        5 bytes
  9197 ;; Hardware stack levels used:    1
  9198 ;; Hardware stack levels required when called:    6
  9199 ;; This function calls:
  9200 ;;		_i2c1_driver_TXData
  9201 ;; This function is called by:
  9202 ;;		_wireWriteDataByte
  9203 ;;		_wireReadDataByte
  9204 ;;		_wireReadDataBlock
  9205 ;; This function uses a non-reentrant model
  9206 ;;
  9207                           
  9208                           
  9209                           ;psect for function _I2C_Write_Byte
  9210  0B2D                     _I2C_Write_Byte:	
  9211                           
  9212                           ;incstack = 0
  9213                           ; Regs used in _I2C_Write_Byte: [wreg+status,2+status,0+pclath+cstack]
  9214                           ;I2C_Write_Byte@Byte stored from wreg
  9215  0B2D  0020               	movlb	0	; select bank0
  9216  0B2E  00A3               	movwf	I2C_Write_Byte@Byte
  9217                           
  9218                           ;i2c.c: 75: void I2C_Write_Byte(unsigned char Byte);i2c.c: 76: {;i2c.c: 80:     i2c1_dri
      +                          ver_TXData(Byte);
  9219  0B2F  0823               	movf	I2C_Write_Byte@Byte,w
  9220  0B30  3189  2112  318B   	fcall	_i2c1_driver_TXData
  9221                           
  9222                           ;i2c.c: 83:     unsigned int count = 0;
  9223  0B33  0020               	movlb	0	; select bank0
  9224  0B34  01A4               	clrf	I2C_Write_Byte@count
  9225  0B35  01A5               	clrf	I2C_Write_Byte@count+1
  9226  0B36                     l1413:	
  9227                           ;i2c.c: 84:     while(SSP1CON2bits.ACKSTAT);
  9228                           
  9229  0B36  0024               	movlb	4	; select bank4
  9230  0B37  1B16               	btfsc	22,6	;volatile
  9231  0B38  2B36               	goto	l1413
  9232  0B39                     l6572:	
  9233  0B39  0020               	movlb	0	; select bank0
  9234  0B3A  0825               	movf	I2C_Write_Byte@count+1,w
  9235  0B3B  00A2               	movwf	??_I2C_Write_Byte+1
  9236  0B3C  0824               	movf	I2C_Write_Byte@count,w
  9237  0B3D  00A1               	movwf	??_I2C_Write_Byte
  9238  0B3E  0AA4               	incf	I2C_Write_Byte@count,f
  9239  0B3F  1903               	skipnz
  9240  0B40  0AA5               	incf	I2C_Write_Byte@count+1,f
  9241  0B41  3000               	movlw	0
  9242  0B42  0222               	subwf	??_I2C_Write_Byte+1,w
  9243  0B43  3005               	movlw	5
  9244  0B44  1903               	skipnz
  9245  0B45  0221               	subwf	??_I2C_Write_Byte,w
  9246  0B46  1803               	btfsc	3,0
  9247  0B47  0008               	return
  9248  0B48  2B39               	goto	l6572
  9249  0B49                     __end_of_I2C_Write_Byte:	
  9250                           
  9251                           	psect	text26
  9252  0912                     __ptext26:	
  9253 ;; *************** function _i2c1_driver_TXData *****************
  9254 ;; Defined at:
  9255 ;;		line 186 in file "mcc_generated_files/i2c1_driver.c"
  9256 ;; Parameters:    Size  Location     Type
  9257 ;;  d               1    wreg     unsigned char 
  9258 ;; Auto vars:     Size  Location     Type
  9259 ;;  d               1    0[BANK0 ] unsigned char 
  9260 ;; Return value:  Size  Location     Type
  9261 ;;                  1    wreg      void 
  9262 ;; Registers used:
  9263 ;;		wreg
  9264 ;; Tracked objects:
  9265 ;;		On entry : 0/0
  9266 ;;		On exit  : 0/0
  9267 ;;		Unchanged: 0/0
  9268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9269 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9270 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9271 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9272 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9273 ;;Total ram usage:        1 bytes
  9274 ;; Hardware stack levels used:    1
  9275 ;; Hardware stack levels required when called:    5
  9276 ;; This function calls:
  9277 ;;		Nothing
  9278 ;; This function is called by:
  9279 ;;		_I2C_Write_Byte
  9280 ;; This function uses a non-reentrant model
  9281 ;;
  9282                           
  9283                           
  9284                           ;psect for function _i2c1_driver_TXData
  9285  0912                     _i2c1_driver_TXData:	
  9286                           
  9287                           ;incstack = 0
  9288                           ; Regs used in _i2c1_driver_TXData: [wreg]
  9289                           ;i2c1_driver_TXData@d stored from wreg
  9290  0912  0020               	movlb	0	; select bank0
  9291  0913  00A0               	movwf	i2c1_driver_TXData@d
  9292                           
  9293                           ;mcc_generated_files/i2c1_driver.c: 186: __attribute__((inline)) void i2c1_driver_TXData
      +                          (char d);mcc_generated_files/i2c1_driver.c: 187: {;mcc_generated_files/i2c1_driver.c: 18
      +                          8:     SSP1BUF = d;
  9294  0914  0820               	movf	i2c1_driver_TXData@d,w
  9295  0915  0024               	movlb	4	; select bank4
  9296  0916  0091               	movwf	17	;volatile
  9297  0917  0008               	return
  9298  0918                     __end_of_i2c1_driver_TXData:	
  9299                           
  9300                           	psect	text27
  9301  08C6                     __ptext27:	
  9302 ;; *************** function _I2C_Stop *****************
  9303 ;; Defined at:
  9304 ;;		line 50 in file "i2c.c"
  9305 ;; Parameters:    Size  Location     Type
  9306 ;;		None
  9307 ;; Auto vars:     Size  Location     Type
  9308 ;;		None
  9309 ;; Return value:  Size  Location     Type
  9310 ;;                  1    wreg      void 
  9311 ;; Registers used:
  9312 ;;		status,2, status,0, pclath, cstack
  9313 ;; Tracked objects:
  9314 ;;		On entry : 0/0
  9315 ;;		On exit  : 0/0
  9316 ;;		Unchanged: 0/0
  9317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9318 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9319 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9320 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9321 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9322 ;;Total ram usage:        0 bytes
  9323 ;; Hardware stack levels used:    1
  9324 ;; Hardware stack levels required when called:    6
  9325 ;; This function calls:
  9326 ;;		_i2c1_driver_stop
  9327 ;; This function is called by:
  9328 ;;		_wireWriteDataByte
  9329 ;;		_wireReadDataByte
  9330 ;;		_wireReadDataBlock
  9331 ;; This function uses a non-reentrant model
  9332 ;;
  9333                           
  9334                           
  9335                           ;psect for function _I2C_Stop
  9336  08C6                     _I2C_Stop:	
  9337                           
  9338                           ;i2c.c: 52:  i2c1_driver_stop();
  9339                           
  9340                           ;incstack = 0
  9341                           ; Regs used in _I2C_Stop: [status,2+status,0+pclath+cstack]
  9342  08C6  3188  20C3         	fcall	_i2c1_driver_stop
  9343  08C8  0008               	return
  9344  08C9                     __end_of_I2C_Stop:	
  9345                           
  9346                           	psect	text28
  9347  08C3                     __ptext28:	
  9348 ;; *************** function _i2c1_driver_stop *****************
  9349 ;; Defined at:
  9350 ;;		line 156 in file "mcc_generated_files/i2c1_driver.c"
  9351 ;; Parameters:    Size  Location     Type
  9352 ;;		None
  9353 ;; Auto vars:     Size  Location     Type
  9354 ;;		None
  9355 ;; Return value:  Size  Location     Type
  9356 ;;                  1    wreg      void 
  9357 ;; Registers used:
  9358 ;;		None
  9359 ;; Tracked objects:
  9360 ;;		On entry : 0/0
  9361 ;;		On exit  : 0/0
  9362 ;;		Unchanged: 0/0
  9363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9364 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9365 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9366 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9367 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9368 ;;Total ram usage:        0 bytes
  9369 ;; Hardware stack levels used:    1
  9370 ;; Hardware stack levels required when called:    5
  9371 ;; This function calls:
  9372 ;;		Nothing
  9373 ;; This function is called by:
  9374 ;;		_I2C_Stop
  9375 ;; This function uses a non-reentrant model
  9376 ;;
  9377                           
  9378                           
  9379                           ;psect for function _i2c1_driver_stop
  9380  08C3                     _i2c1_driver_stop:	
  9381                           
  9382                           ;mcc_generated_files/i2c1_driver.c: 158:     SSP1CON2bits.PEN = 1;
  9383                           
  9384                           ;incstack = 0
  9385                           ; Regs used in _i2c1_driver_stop: []
  9386  08C3  0024               	movlb	4	; select bank4
  9387  08C4  1516               	bsf	22,2	;volatile
  9388  08C5  0008               	return
  9389  08C6                     __end_of_i2c1_driver_stop:	
  9390                           
  9391                           	psect	text29
  9392  08C0                     __ptext29:	
  9393 ;; *************** function _I2C_Start *****************
  9394 ;; Defined at:
  9395 ;;		line 35 in file "i2c.c"
  9396 ;; Parameters:    Size  Location     Type
  9397 ;;		None
  9398 ;; Auto vars:     Size  Location     Type
  9399 ;;		None
  9400 ;; Return value:  Size  Location     Type
  9401 ;;                  1    wreg      void 
  9402 ;; Registers used:
  9403 ;;		status,2, status,0, pclath, cstack
  9404 ;; Tracked objects:
  9405 ;;		On entry : 0/0
  9406 ;;		On exit  : 0/0
  9407 ;;		Unchanged: 0/0
  9408 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9409 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9410 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9411 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9412 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9413 ;;Total ram usage:        0 bytes
  9414 ;; Hardware stack levels used:    1
  9415 ;; Hardware stack levels required when called:    6
  9416 ;; This function calls:
  9417 ;;		_i2c1_driver_start
  9418 ;; This function is called by:
  9419 ;;		_wireWriteDataByte
  9420 ;;		_wireReadDataByte
  9421 ;;		_wireReadDataBlock
  9422 ;; This function uses a non-reentrant model
  9423 ;;
  9424                           
  9425                           
  9426                           ;psect for function _I2C_Start
  9427  08C0                     _I2C_Start:	
  9428                           
  9429                           ;i2c.c: 37:  i2c1_driver_start();
  9430                           
  9431                           ;incstack = 0
  9432                           ; Regs used in _I2C_Start: [status,2+status,0+pclath+cstack]
  9433  08C0  3188  20BD         	fcall	_i2c1_driver_start
  9434  08C2  0008               	return
  9435  08C3                     __end_of_I2C_Start:	
  9436                           
  9437                           	psect	text30
  9438  08BD                     __ptext30:	
  9439 ;; *************** function _i2c1_driver_start *****************
  9440 ;; Defined at:
  9441 ;;		line 146 in file "mcc_generated_files/i2c1_driver.c"
  9442 ;; Parameters:    Size  Location     Type
  9443 ;;		None
  9444 ;; Auto vars:     Size  Location     Type
  9445 ;;		None
  9446 ;; Return value:  Size  Location     Type
  9447 ;;                  1    wreg      void 
  9448 ;; Registers used:
  9449 ;;		None
  9450 ;; Tracked objects:
  9451 ;;		On entry : 0/0
  9452 ;;		On exit  : 0/0
  9453 ;;		Unchanged: 0/0
  9454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9456 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9458 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9459 ;;Total ram usage:        0 bytes
  9460 ;; Hardware stack levels used:    1
  9461 ;; Hardware stack levels required when called:    5
  9462 ;; This function calls:
  9463 ;;		Nothing
  9464 ;; This function is called by:
  9465 ;;		_I2C_Start
  9466 ;;		_i2c_masterOperation
  9467 ;; This function uses a non-reentrant model
  9468 ;;
  9469                           
  9470                           
  9471                           ;psect for function _i2c1_driver_start
  9472  08BD                     _i2c1_driver_start:	
  9473                           
  9474                           ;mcc_generated_files/i2c1_driver.c: 148:     SSP1CON2bits.SEN = 1;
  9475                           
  9476                           ;incstack = 0
  9477                           ; Regs used in _i2c1_driver_start: []
  9478  08BD  0024               	movlb	4	; select bank4
  9479  08BE  1416               	bsf	22,0	;volatile
  9480  08BF  0008               	return
  9481  08C0                     __end_of_i2c1_driver_start:	
  9482                           
  9483                           	psect	text31
  9484  08BA                     __ptext31:	
  9485 ;; *************** function _I2C_Send_NACK *****************
  9486 ;; Defined at:
  9487 ;;		line 66 in file "i2c.c"
  9488 ;; Parameters:    Size  Location     Type
  9489 ;;		None
  9490 ;; Auto vars:     Size  Location     Type
  9491 ;;		None
  9492 ;; Return value:  Size  Location     Type
  9493 ;;                  1    wreg      void 
  9494 ;; Registers used:
  9495 ;;		status,2, status,0, pclath, cstack
  9496 ;; Tracked objects:
  9497 ;;		On entry : 0/0
  9498 ;;		On exit  : 0/0
  9499 ;;		Unchanged: 0/0
  9500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9502 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9503 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9504 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9505 ;;Total ram usage:        0 bytes
  9506 ;; Hardware stack levels used:    1
  9507 ;; Hardware stack levels required when called:    6
  9508 ;; This function calls:
  9509 ;;		_i2c1_driver_sendNACK
  9510 ;; This function is called by:
  9511 ;;		_wireReadDataByte
  9512 ;;		_wireReadDataBlock
  9513 ;; This function uses a non-reentrant model
  9514 ;;
  9515                           
  9516                           
  9517                           ;psect for function _I2C_Send_NACK
  9518  08BA                     _I2C_Send_NACK:	
  9519                           
  9520                           ;i2c.c: 68:     i2c1_driver_sendNACK();
  9521                           
  9522                           ;incstack = 0
  9523                           ; Regs used in _I2C_Send_NACK: [status,2+status,0+pclath+cstack]
  9524  08BA  3188  20F8         	fcall	_i2c1_driver_sendNACK
  9525  08BC  0008               	return
  9526  08BD                     __end_of_I2C_Send_NACK:	
  9527                           
  9528                           	psect	text32
  9529  08F8                     __ptext32:	
  9530 ;; *************** function _i2c1_driver_sendNACK *****************
  9531 ;; Defined at:
  9532 ;;		line 202 in file "mcc_generated_files/i2c1_driver.c"
  9533 ;; Parameters:    Size  Location     Type
  9534 ;;		None
  9535 ;; Auto vars:     Size  Location     Type
  9536 ;;		None
  9537 ;; Return value:  Size  Location     Type
  9538 ;;                  1    wreg      void 
  9539 ;; Registers used:
  9540 ;;		None
  9541 ;; Tracked objects:
  9542 ;;		On entry : 0/0
  9543 ;;		On exit  : 0/0
  9544 ;;		Unchanged: 0/0
  9545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9546 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9547 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9548 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9549 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9550 ;;Total ram usage:        0 bytes
  9551 ;; Hardware stack levels used:    1
  9552 ;; Hardware stack levels required when called:    5
  9553 ;; This function calls:
  9554 ;;		Nothing
  9555 ;; This function is called by:
  9556 ;;		_I2C_Send_NACK
  9557 ;; This function uses a non-reentrant model
  9558 ;;
  9559                           
  9560                           
  9561                           ;psect for function _i2c1_driver_sendNACK
  9562  08F8                     _i2c1_driver_sendNACK:	
  9563                           
  9564                           ;mcc_generated_files/i2c1_driver.c: 204:     SSP1CON2bits.ACKDT = 1;
  9565                           
  9566                           ;incstack = 0
  9567                           ; Regs used in _i2c1_driver_sendNACK: []
  9568  08F8  0024               	movlb	4	; select bank4
  9569  08F9  1696               	bsf	22,5	;volatile
  9570                           
  9571                           ;mcc_generated_files/i2c1_driver.c: 205:     SSP1CON2bits.ACKEN = 1;
  9572  08FA  1616               	bsf	22,4	;volatile
  9573  08FB  0008               	return
  9574  08FC                     __end_of_i2c1_driver_sendNACK:	
  9575                           
  9576                           	psect	text33
  9577  09B8                     __ptext33:	
  9578 ;; *************** function _I2C_Read_Byte *****************
  9579 ;; Defined at:
  9580 ;;		line 115 in file "i2c.c"
  9581 ;; Parameters:    Size  Location     Type
  9582 ;;		None
  9583 ;; Auto vars:     Size  Location     Type
  9584 ;;		None
  9585 ;; Return value:  Size  Location     Type
  9586 ;;                  1    wreg      unsigned char 
  9587 ;; Registers used:
  9588 ;;		wreg, status,2, status,0, pclath, cstack
  9589 ;; Tracked objects:
  9590 ;;		On entry : 0/0
  9591 ;;		On exit  : 0/0
  9592 ;;		Unchanged: 0/0
  9593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9594 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9595 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9596 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9597 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9598 ;;Total ram usage:        0 bytes
  9599 ;; Hardware stack levels used:    1
  9600 ;; Hardware stack levels required when called:    6
  9601 ;; This function calls:
  9602 ;;		_i2c1_driver_getRXData
  9603 ;;		_i2c1_driver_isBufferFull
  9604 ;;		_i2c1_driver_startRX
  9605 ;; This function is called by:
  9606 ;;		_wireReadDataByte
  9607 ;;		_wireReadDataBlock
  9608 ;; This function uses a non-reentrant model
  9609 ;;
  9610                           
  9611                           
  9612                           ;psect for function _I2C_Read_Byte
  9613  09B8                     _I2C_Read_Byte:	
  9614                           
  9615                           ;i2c.c: 117:     i2c1_driver_startRX();
  9616                           
  9617                           ;incstack = 0
  9618                           ; Regs used in _I2C_Read_Byte: [wreg+status,2+status,0+pclath+cstack]
  9619  09B8  3188  20B7  3189   	fcall	_i2c1_driver_startRX
  9620  09BB                     l6578:	
  9621                           ;i2c.c: 121:  while (i2c1_driver_isBufferFull() == 0) {
  9622                           
  9623                           
  9624                           ;i2c.c: 121:  while (i2c1_driver_isBufferFull() == 0) {
  9625  09BB  3189  2139  3189   	fcall	_i2c1_driver_isBufferFull
  9626  09BE  1C03               	btfss	3,0
  9627  09BF  29BB               	goto	l6578
  9628                           
  9629                           ;i2c.c: 137:   return i2c1_driver_getRXData();
  9630  09C0  3188  20B4         	fcall	_i2c1_driver_getRXData
  9631  09C2  0008               	return
  9632  09C3                     __end_of_I2C_Read_Byte:	
  9633                           
  9634                           	psect	text34
  9635  08B7                     __ptext34:	
  9636 ;; *************** function _i2c1_driver_startRX *****************
  9637 ;; Defined at:
  9638 ;;		line 166 in file "mcc_generated_files/i2c1_driver.c"
  9639 ;; Parameters:    Size  Location     Type
  9640 ;;		None
  9641 ;; Auto vars:     Size  Location     Type
  9642 ;;		None
  9643 ;; Return value:  Size  Location     Type
  9644 ;;                  1    wreg      void 
  9645 ;; Registers used:
  9646 ;;		None
  9647 ;; Tracked objects:
  9648 ;;		On entry : 0/0
  9649 ;;		On exit  : 0/0
  9650 ;;		Unchanged: 0/0
  9651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9652 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9653 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9654 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9655 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9656 ;;Total ram usage:        0 bytes
  9657 ;; Hardware stack levels used:    1
  9658 ;; Hardware stack levels required when called:    5
  9659 ;; This function calls:
  9660 ;;		Nothing
  9661 ;; This function is called by:
  9662 ;;		_I2C_Read_Byte
  9663 ;; This function uses a non-reentrant model
  9664 ;;
  9665                           
  9666                           
  9667                           ;psect for function _i2c1_driver_startRX
  9668  08B7                     _i2c1_driver_startRX:	
  9669                           
  9670                           ;mcc_generated_files/i2c1_driver.c: 168:     SSP1CON2bits.RCEN = 1;
  9671                           
  9672                           ;incstack = 0
  9673                           ; Regs used in _i2c1_driver_startRX: []
  9674  08B7  0024               	movlb	4	; select bank4
  9675  08B8  1596               	bsf	22,3	;volatile
  9676  08B9  0008               	return
  9677  08BA                     __end_of_i2c1_driver_startRX:	
  9678                           
  9679                           	psect	text35
  9680  0939                     __ptext35:	
  9681 ;; *************** function _i2c1_driver_isBufferFull *****************
  9682 ;; Defined at:
  9683 ;;		line 213 in file "mcc_generated_files/i2c1_driver.c"
  9684 ;; Parameters:    Size  Location     Type
  9685 ;;		None
  9686 ;; Auto vars:     Size  Location     Type
  9687 ;;		None
  9688 ;; Return value:  Size  Location     Type
  9689 ;;		None               void
  9690 ;; Registers used:
  9691 ;;		wreg, status,2, status,0
  9692 ;; Tracked objects:
  9693 ;;		On entry : 0/0
  9694 ;;		On exit  : 0/0
  9695 ;;		Unchanged: 0/0
  9696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9698 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9699 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9700 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9701 ;;Total ram usage:        1 bytes
  9702 ;; Hardware stack levels used:    1
  9703 ;; Hardware stack levels required when called:    5
  9704 ;; This function calls:
  9705 ;;		Nothing
  9706 ;; This function is called by:
  9707 ;;		_I2C_Read_Byte
  9708 ;; This function uses a non-reentrant model
  9709 ;;
  9710                           
  9711                           
  9712                           ;psect for function _i2c1_driver_isBufferFull
  9713  0939                     _i2c1_driver_isBufferFull:	
  9714                           
  9715                           ;mcc_generated_files/i2c1_driver.c: 215:     return SSP1STATbits.BF;
  9716                           
  9717                           ;incstack = 0
  9718                           ; Regs used in _i2c1_driver_isBufferFull: [wreg+status,2+status,0]
  9719  0939  0024               	movlb	4	; select bank4
  9720  093A  0814               	movf	20,w	;volatile
  9721  093B  3901               	andlw	1
  9722  093C  0020               	movlb	0	; select bank0
  9723  093D  00A0               	movwf	??_i2c1_driver_isBufferFull
  9724  093E  0C20               	rrf	??_i2c1_driver_isBufferFull,w
  9725  093F  0008               	return
  9726  0940                     __end_of_i2c1_driver_isBufferFull:	
  9727                           
  9728                           	psect	text36
  9729  08B4                     __ptext36:	
  9730 ;; *************** function _i2c1_driver_getRXData *****************
  9731 ;; Defined at:
  9732 ;;		line 171 in file "mcc_generated_files/i2c1_driver.c"
  9733 ;; Parameters:    Size  Location     Type
  9734 ;;		None
  9735 ;; Auto vars:     Size  Location     Type
  9736 ;;		None
  9737 ;; Return value:  Size  Location     Type
  9738 ;;                  1    wreg      unsigned char 
  9739 ;; Registers used:
  9740 ;;		wreg
  9741 ;; Tracked objects:
  9742 ;;		On entry : 0/0
  9743 ;;		On exit  : 0/0
  9744 ;;		Unchanged: 0/0
  9745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9746 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9747 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9748 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9749 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9750 ;;Total ram usage:        0 bytes
  9751 ;; Hardware stack levels used:    1
  9752 ;; Hardware stack levels required when called:    5
  9753 ;; This function calls:
  9754 ;;		Nothing
  9755 ;; This function is called by:
  9756 ;;		_I2C_Read_Byte
  9757 ;; This function uses a non-reentrant model
  9758 ;;
  9759                           
  9760                           
  9761                           ;psect for function _i2c1_driver_getRXData
  9762  08B4                     _i2c1_driver_getRXData:	
  9763                           
  9764                           ;mcc_generated_files/i2c1_driver.c: 173:     return SSP1BUF;
  9765                           
  9766                           ;incstack = 0
  9767                           ; Regs used in _i2c1_driver_getRXData: [wreg]
  9768  08B4  0024               	movlb	4	; select bank4
  9769  08B5  0811               	movf	17,w	;volatile
  9770  08B6  0008               	return
  9771  08B7                     __end_of_i2c1_driver_getRXData:	
  9772                           
  9773                           	psect	text37
  9774  08B1                     __ptext37:	
  9775 ;; *************** function _I2C_ReStart *****************
  9776 ;; Defined at:
  9777 ;;		line 43 in file "i2c.c"
  9778 ;; Parameters:    Size  Location     Type
  9779 ;;		None
  9780 ;; Auto vars:     Size  Location     Type
  9781 ;;		None
  9782 ;; Return value:  Size  Location     Type
  9783 ;;                  1    wreg      void 
  9784 ;; Registers used:
  9785 ;;		status,2, status,0, pclath, cstack
  9786 ;; Tracked objects:
  9787 ;;		On entry : 0/0
  9788 ;;		On exit  : 0/0
  9789 ;;		Unchanged: 0/0
  9790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9791 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9792 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9793 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9794 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9795 ;;Total ram usage:        0 bytes
  9796 ;; Hardware stack levels used:    1
  9797 ;; Hardware stack levels required when called:    6
  9798 ;; This function calls:
  9799 ;;		_i2c1_driver_restart
  9800 ;; This function is called by:
  9801 ;;		_wireReadDataByte
  9802 ;;		_wireReadDataBlock
  9803 ;; This function uses a non-reentrant model
  9804 ;;
  9805                           
  9806                           
  9807                           ;psect for function _I2C_ReStart
  9808  08B1                     _I2C_ReStart:	
  9809                           
  9810                           ;i2c.c: 45:  i2c1_driver_restart();
  9811                           
  9812                           ;incstack = 0
  9813                           ; Regs used in _I2C_ReStart: [status,2+status,0+pclath+cstack]
  9814  08B1  3188  20AE         	fcall	_i2c1_driver_restart
  9815  08B3  0008               	return
  9816  08B4                     __end_of_I2C_ReStart:	
  9817                           
  9818                           	psect	text38
  9819  08AE                     __ptext38:	
  9820 ;; *************** function _i2c1_driver_restart *****************
  9821 ;; Defined at:
  9822 ;;		line 151 in file "mcc_generated_files/i2c1_driver.c"
  9823 ;; Parameters:    Size  Location     Type
  9824 ;;		None
  9825 ;; Auto vars:     Size  Location     Type
  9826 ;;		None
  9827 ;; Return value:  Size  Location     Type
  9828 ;;                  1    wreg      void 
  9829 ;; Registers used:
  9830 ;;		None
  9831 ;; Tracked objects:
  9832 ;;		On entry : 0/0
  9833 ;;		On exit  : 0/0
  9834 ;;		Unchanged: 0/0
  9835 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9836 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9837 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9838 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9839 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9840 ;;Total ram usage:        0 bytes
  9841 ;; Hardware stack levels used:    1
  9842 ;; Hardware stack levels required when called:    5
  9843 ;; This function calls:
  9844 ;;		Nothing
  9845 ;; This function is called by:
  9846 ;;		_I2C_ReStart
  9847 ;; This function uses a non-reentrant model
  9848 ;;
  9849                           
  9850                           
  9851                           ;psect for function _i2c1_driver_restart
  9852  08AE                     _i2c1_driver_restart:	
  9853                           
  9854                           ;mcc_generated_files/i2c1_driver.c: 153:     SSP1CON2bits.RSEN = 1;
  9855                           
  9856                           ;incstack = 0
  9857                           ; Regs used in _i2c1_driver_restart: []
  9858  08AE  0024               	movlb	4	; select bank4
  9859  08AF  1496               	bsf	22,1	;volatile
  9860  08B0  0008               	return
  9861  08B1                     __end_of_i2c1_driver_restart:	
  9862                           
  9863                           	psect	text39
  9864  0590                     __ptext39:	
  9865 ;; *************** function _UART_Byte *****************
  9866 ;; Defined at:
  9867 ;;		line 296 in file "main.c"
  9868 ;; Parameters:    Size  Location     Type
  9869 ;;		None
  9870 ;; Auto vars:     Size  Location     Type
  9871 ;;  bits            7   18[BANK1 ] unsigned char [7]
  9872 ;;  brightStr       1   28[BANK1 ] PTR unsigned char 
  9873 ;;  profileStr      1   27[BANK1 ] PTR unsigned char 
  9874 ;;  proxStr         1   26[BANK1 ] PTR unsigned char 
  9875 ;;  onStr           1   25[BANK1 ] PTR unsigned char 
  9876 ;; Return value:  Size  Location     Type
  9877 ;;                  1    wreg      void 
  9878 ;; Registers used:
  9879 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9880 ;; Tracked objects:
  9881 ;;		On entry : 0/0
  9882 ;;		On exit  : 0/0
  9883 ;;		Unchanged: 0/0
  9884 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9885 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9886 ;;      Locals:         0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0
  9887 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  9888 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0
  9889 ;;Total ram usage:       13 bytes
  9890 ;; Hardware stack levels used:    1
  9891 ;; Hardware stack levels required when called:   14
  9892 ;; This function calls:
  9893 ;;		_sprintf
  9894 ;;		_strcat
  9895 ;;		_strcpy
  9896 ;; This function is called by:
  9897 ;;		_main
  9898 ;; This function uses a non-reentrant model
  9899 ;;
  9900                           
  9901                           
  9902                           ;psect for function _UART_Byte
  9903  0590                     _UART_Byte:	
  9904                           
  9905                           ;main.c: 297:     char bits[7];;main.c: 298:     char * onStr;;main.c: 299:     char * p
      +                          roxStr;;main.c: 300:     char * profileStr;;main.c: 301:     char * brightStr;;main.c: 3
      +                          02:     sprintf(onStr, "%d", on);
  9906                           
  9907                           ;incstack = 0
  9908                           ; Regs used in _UART_Byte: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9909  0590  3054               	movlw	low (STR_5| (0+32768))
  9910  0591  0021               	movlb	1	; select bank1
  9911  0592  00C8               	movwf	sprintf@fmt^(0+128)
  9912  0593  3090               	movlw	high (STR_5| (0+32768))
  9913  0594  00C9               	movwf	(sprintf@fmt^(0+128)+1)
  9914  0595  086C               	movf	_on^(0+128),w
  9915  0596  00D5               	movwf	??_UART_Byte^(0+128)
  9916  0597  01D6               	clrf	(??_UART_Byte^(0+128)+1)
  9917  0598  0855               	movf	??_UART_Byte^(0+128),w
  9918  0599  00CA               	movwf	(?_sprintf^(0+128)+2)
  9919  059A  0856               	movf	(??_UART_Byte+1)^(0+128),w
  9920  059B  00CB               	movwf	((?_sprintf+1)^(0+128)+2)
  9921  059C  085E               	movf	UART_Byte@onStr^(0+128),w
  9922  059D  318D  252A  3185   	fcall	_sprintf
  9923                           
  9924                           ;main.c: 303:     sprintf(proxStr, "%d", prox);
  9925  05A0  3054               	movlw	low (STR_5| (0+32768))
  9926  05A1  0021               	movlb	1	; select bank1
  9927  05A2  00C8               	movwf	sprintf@fmt^(0+128)
  9928  05A3  3090               	movlw	high (STR_5| (0+32768))
  9929  05A4  00C9               	movwf	(sprintf@fmt^(0+128)+1)
  9930  05A5  083D               	movf	_prox^(0+128),w
  9931  05A6  00D5               	movwf	??_UART_Byte^(0+128)
  9932  05A7  01D6               	clrf	(??_UART_Byte^(0+128)+1)
  9933  05A8  0855               	movf	??_UART_Byte^(0+128),w
  9934  05A9  00CA               	movwf	(?_sprintf^(0+128)+2)
  9935  05AA  0856               	movf	(??_UART_Byte+1)^(0+128),w
  9936  05AB  00CB               	movwf	((?_sprintf+1)^(0+128)+2)
  9937  05AC  085F               	movf	UART_Byte@proxStr^(0+128),w
  9938  05AD  318D  252A  3185   	fcall	_sprintf
  9939                           
  9940                           ;main.c: 304:     sprintf(profileStr, "%d", name);
  9941  05B0  3054               	movlw	low (STR_5| (0+32768))
  9942  05B1  0021               	movlb	1	; select bank1
  9943  05B2  00C8               	movwf	sprintf@fmt^(0+128)
  9944  05B3  3090               	movlw	high (STR_5| (0+32768))
  9945  05B4  00C9               	movwf	(sprintf@fmt^(0+128)+1)
  9946  05B5  082B               	movf	(_name+1)^(0+128),w
  9947  05B6  00CB               	movwf	((?_sprintf+1)^(0+128)+2)
  9948  05B7  082A               	movf	_name^(0+128),w
  9949  05B8  00CA               	movwf	(?_sprintf^(0+128)+2)
  9950  05B9  0860               	movf	UART_Byte@profileStr^(0+128),w
  9951  05BA  318D  252A  3185   	fcall	_sprintf
  9952                           
  9953                           ;main.c: 305:     sprintf(brightStr, "%d", brightness);
  9954  05BD  3054               	movlw	low (STR_5| (0+32768))
  9955  05BE  0021               	movlb	1	; select bank1
  9956  05BF  00C8               	movwf	sprintf@fmt^(0+128)
  9957  05C0  3090               	movlw	high (STR_5| (0+32768))
  9958  05C1  00C9               	movwf	(sprintf@fmt^(0+128)+1)
  9959  05C2  0829               	movf	(_brightness+1)^(0+128),w
  9960  05C3  00CB               	movwf	((?_sprintf+1)^(0+128)+2)
  9961  05C4  0828               	movf	_brightness^(0+128),w
  9962  05C5  00CA               	movwf	(?_sprintf^(0+128)+2)
  9963  05C6  0861               	movf	UART_Byte@brightStr^(0+128),w
  9964  05C7  318D  252A  3185   	fcall	_sprintf
  9965                           
  9966                           ;main.c: 306:     strcpy(bits, onStr);
  9967  05CA  0021               	movlb	1	; select bank1
  9968  05CB  085E               	movf	UART_Byte@onStr^(0+128),w
  9969  05CC  00D5               	movwf	??_UART_Byte^(0+128)
  9970  05CD  0855               	movf	??_UART_Byte^(0+128),w
  9971  05CE  0020               	movlb	0	; select bank0
  9972  05CF  00A5               	movwf	strcpy@src
  9973  05D0  30D7               	movlw	(low (UART_Byte@bits| 0))& (0+255)
  9974  05D1  318A  22C6  3185   	fcall	_strcpy
  9975                           
  9976                           ;main.c: 307:     strcat(bits, proxStr);
  9977  05D4  0021               	movlb	1	; select bank1
  9978  05D5  085F               	movf	UART_Byte@proxStr^(0+128),w
  9979  05D6  00D5               	movwf	??_UART_Byte^(0+128)
  9980  05D7  0855               	movf	??_UART_Byte^(0+128),w
  9981  05D8  0020               	movlb	0	; select bank0
  9982  05D9  00AA               	movwf	strcat@src
  9983  05DA  30D7               	movlw	(low (UART_Byte@bits| 0))& (0+255)
  9984  05DB  318A  227F  3185   	fcall	_strcat
  9985                           
  9986                           ;main.c: 308:     strcat(bits, profileStr);
  9987  05DE  0021               	movlb	1	; select bank1
  9988  05DF  0860               	movf	UART_Byte@profileStr^(0+128),w
  9989  05E0  00D5               	movwf	??_UART_Byte^(0+128)
  9990  05E1  0855               	movf	??_UART_Byte^(0+128),w
  9991  05E2  0020               	movlb	0	; select bank0
  9992  05E3  00AA               	movwf	strcat@src
  9993  05E4  30D7               	movlw	(low (UART_Byte@bits| 0))& (0+255)
  9994  05E5  318A  227F  3185   	fcall	_strcat
  9995                           
  9996                           ;main.c: 309:     strcat(bits, brightStr);
  9997  05E8  0021               	movlb	1	; select bank1
  9998  05E9  0861               	movf	UART_Byte@brightStr^(0+128),w
  9999  05EA  00D5               	movwf	??_UART_Byte^(0+128)
 10000  05EB  0855               	movf	??_UART_Byte^(0+128),w
 10001  05EC  0020               	movlb	0	; select bank0
 10002  05ED  00AA               	movwf	strcat@src
 10003  05EE  30D7               	movlw	(low (UART_Byte@bits| 0))& (0+255)
 10004  05EF  318A  227F  3185   	fcall	_strcat
 10005  05F2                     l990:	
 10006                           ;main.c: 311:     while(TXSTA1bits.TRMT == 0){};
 10007                           
 10008  05F2  0023               	movlb	3	; select bank3
 10009  05F3  1C9E               	btfss	30,1	;volatile
 10010  05F4  2DF2               	goto	l990
 10011                           
 10012                           ;main.c: 312:     TXREG1 = bits;
 10013  05F5  30D7               	movlw	(low UART_Byte@bits)& (0+255)
 10014  05F6  009A               	movwf	26	;volatile
 10015  05F7  0008               	return
 10016  05F8                     __end_of_UART_Byte:	
 10017                           
 10018                           	psect	text40
 10019  0A7F                     __ptext40:	
 10020 ;; *************** function _strcat *****************
 10021 ;; Defined at:
 10022 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strcat.c"
 10023 ;; Parameters:    Size  Location     Type
 10024 ;;  dest            1    wreg     PTR unsigned char 
 10025 ;;		 -> UART_Byte@bits(7), 
 10026 ;;  src             1   10[BANK0 ] PTR const unsigned char 
 10027 ;; Auto vars:     Size  Location     Type
 10028 ;;  dest            1   14[BANK0 ] PTR unsigned char 
 10029 ;;		 -> UART_Byte@bits(7), 
 10030 ;; Return value:  Size  Location     Type
 10031 ;;                  1    wreg      PTR unsigned char 
 10032 ;; Registers used:
 10033 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10034 ;; Tracked objects:
 10035 ;;		On entry : 0/0
 10036 ;;		On exit  : 0/0
 10037 ;;		Unchanged: 0/0
 10038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10039 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10040 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10041 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10042 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10043 ;;Total ram usage:        5 bytes
 10044 ;; Hardware stack levels used:    1
 10045 ;; Hardware stack levels required when called:    6
 10046 ;; This function calls:
 10047 ;;		_strcpy
 10048 ;;		_strlen
 10049 ;; This function is called by:
 10050 ;;		_UART_Byte
 10051 ;; This function uses a non-reentrant model
 10052 ;;
 10053                           
 10054                           
 10055                           ;psect for function _strcat
 10056  0A7F                     _strcat:	
 10057                           
 10058                           ;incstack = 0
 10059                           ; Regs used in _strcat: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10060                           ;strcat@dest stored from wreg
 10061  0A7F  0020               	movlb	0	; select bank0
 10062  0A80  00AE               	movwf	strcat@dest
 10063  0A81  082A               	movf	strcat@src,w
 10064  0A82  00AB               	movwf	??_strcat
 10065  0A83  082B               	movf	??_strcat,w
 10066  0A84  00A5               	movwf	strcpy@src
 10067  0A85  082E               	movf	strcat@dest,w
 10068  0A86  00A0               	movwf	strlen@s
 10069  0A87  3000               	movlw	0
 10070  0A88  00A1               	movwf	strlen@s+1
 10071  0A89  318A  22AE  318A   	fcall	_strlen
 10072  0A8C  0020               	movlb	0	; select bank0
 10073  0A8D  0820               	movf	?_strlen,w
 10074  0A8E  00AC               	movwf	??_strcat+1
 10075  0A8F  0821               	movf	?_strlen+1,w
 10076  0A90  00AD               	movwf	??_strcat+2
 10077  0A91  082E               	movf	strcat@dest,w
 10078  0A92  072C               	addwf	??_strcat+1,w
 10079  0A93  318A  22C6         	fcall	_strcpy
 10080  0A95  0008               	return
 10081  0A96                     __end_of_strcat:	
 10082                           
 10083                           	psect	text41
 10084  0AC6                     __ptext41:	
 10085 ;; *************** function _strcpy *****************
 10086 ;; Defined at:
 10087 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strcpy.c"
 10088 ;; Parameters:    Size  Location     Type
 10089 ;;  dest            1    wreg     PTR unsigned char 
 10090 ;;		 -> UART_Byte@bits(7), 
 10091 ;;  src             1    5[BANK0 ] PTR const unsigned char 
 10092 ;; Auto vars:     Size  Location     Type
 10093 ;;  dest            1    9[BANK0 ] PTR unsigned char 
 10094 ;;		 -> UART_Byte@bits(7), 
 10095 ;;  d               1    8[BANK0 ] PTR unsigned char 
 10096 ;;		 -> UART_Byte@bits(7), 
 10097 ;;  s               1    7[BANK0 ] PTR const unsigned char 
 10098 ;; Return value:  Size  Location     Type
 10099 ;;                  1    wreg      PTR unsigned char 
 10100 ;; Registers used:
 10101 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 10102 ;; Tracked objects:
 10103 ;;		On entry : 0/0
 10104 ;;		On exit  : 0/0
 10105 ;;		Unchanged: 0/0
 10106 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10107 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10108 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10109 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10110 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10111 ;;Total ram usage:        5 bytes
 10112 ;; Hardware stack levels used:    1
 10113 ;; Hardware stack levels required when called:    5
 10114 ;; This function calls:
 10115 ;;		Nothing
 10116 ;; This function is called by:
 10117 ;;		_UART_Byte
 10118 ;;		_strcat
 10119 ;; This function uses a non-reentrant model
 10120 ;;
 10121                           
 10122                           
 10123                           ;psect for function _strcpy
 10124  0AC6                     _strcpy:	
 10125                           
 10126                           ;incstack = 0
 10127                           ; Regs used in _strcpy: [wreg-fsr1h+status,2+status,0]
 10128                           ;strcpy@dest stored from wreg
 10129  0AC6  0020               	movlb	0	; select bank0
 10130  0AC7  00A9               	movwf	strcpy@dest
 10131  0AC8  0825               	movf	strcpy@src,w
 10132  0AC9  00A6               	movwf	??_strcpy
 10133  0ACA  0826               	movf	??_strcpy,w
 10134  0ACB  00A7               	movwf	strcpy@s
 10135  0ACC  0829               	movf	strcpy@dest,w
 10136  0ACD  00A6               	movwf	??_strcpy
 10137  0ACE  0826               	movf	??_strcpy,w
 10138  0ACF  00A8               	movwf	strcpy@d
 10139  0AD0                     l6844:	
 10140  0AD0  0828               	movf	strcpy@d,w
 10141  0AD1  0086               	movwf	6
 10142  0AD2  0187               	clrf	7
 10143  0AD3  0AA8               	incf	strcpy@d,f
 10144  0AD4  0827               	movf	strcpy@s,w
 10145  0AD5  0084               	movwf	4
 10146  0AD6  0185               	clrf	5
 10147  0AD7  0AA7               	incf	strcpy@s,f
 10148  0AD8  0800               	movf	0,w
 10149  0AD9  3FC0               	movwi [0]fsr1
 10150  0ADA  0889               	movf	9,f
 10151  0ADB  1903               	btfsc	3,2
 10152  0ADC  0008               	return
 10153  0ADD  2AD0               	goto	l6844
 10154  0ADE                     __end_of_strcpy:	
 10155                           
 10156                           	psect	text42
 10157  0AF7                     __ptext42:	
 10158 ;; *************** function _SYSTEM_Initialize *****************
 10159 ;; Defined at:
 10160 ;;		line 50 in file "mcc_generated_files/mcc.c"
 10161 ;; Parameters:    Size  Location     Type
 10162 ;;		None
 10163 ;; Auto vars:     Size  Location     Type
 10164 ;;		None
 10165 ;; Return value:  Size  Location     Type
 10166 ;;                  1    wreg      void 
 10167 ;; Registers used:
 10168 ;;		wreg, status,2, status,0, pclath, cstack
 10169 ;; Tracked objects:
 10170 ;;		On entry : 0/0
 10171 ;;		On exit  : 0/0
 10172 ;;		Unchanged: 0/0
 10173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10174 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10175 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10176 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10177 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10178 ;;Total ram usage:        0 bytes
 10179 ;; Hardware stack levels used:    1
 10180 ;; Hardware stack levels required when called:    7
 10181 ;; This function calls:
 10182 ;;		_ADC_Initialize
 10183 ;;		_EUSART_Initialize
 10184 ;;		_OSCILLATOR_Initialize
 10185 ;;		_PIN_MANAGER_Initialize
 10186 ;;		_PMD_Initialize
 10187 ;;		_PWM1_Initialize
 10188 ;;		_SPI2_Initialize
 10189 ;;		_TMR2_Initialize
 10190 ;;		_WDT_Initialize
 10191 ;; This function is called by:
 10192 ;;		_main
 10193 ;; This function uses a non-reentrant model
 10194 ;;
 10195                           
 10196                           
 10197                           ;psect for function _SYSTEM_Initialize
 10198  0AF7                     _SYSTEM_Initialize:	
 10199                           
 10200                           ;mcc_generated_files/mcc.c: 53:     PMD_Initialize();
 10201                           
 10202                           ;incstack = 0
 10203                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
 10204  0AF7  3189  2160  318A   	fcall	_PMD_Initialize
 10205                           
 10206                           ;mcc_generated_files/mcc.c: 54:     PIN_MANAGER_Initialize();
 10207  0AFA  318F  2705  318A   	fcall	_PIN_MANAGER_Initialize
 10208                           
 10209                           ;mcc_generated_files/mcc.c: 55:     OSCILLATOR_Initialize();
 10210  0AFD  3189  2158  318A   	fcall	_OSCILLATOR_Initialize
 10211                           
 10212                           ;mcc_generated_files/mcc.c: 56:     WDT_Initialize();
 10213  0B00  3188  20F4  318A   	fcall	_WDT_Initialize
 10214                           
 10215                           ;mcc_generated_files/mcc.c: 57:     SPI2_Initialize();
 10216  0B03  3189  2132  318A   	fcall	_SPI2_Initialize
 10217                           
 10218                           ;mcc_generated_files/mcc.c: 58:     PWM1_Initialize();
 10219  0B06  3189  21CF  318A   	fcall	_PWM1_Initialize
 10220                           
 10221                           ;mcc_generated_files/mcc.c: 59:     ADC_Initialize();
 10222  0B09  3189  2150  318A   	fcall	_ADC_Initialize
 10223                           
 10224                           ;mcc_generated_files/mcc.c: 60:     TMR2_Initialize();
 10225  0B0C  3189  2168  318A   	fcall	_TMR2_Initialize
 10226                           
 10227                           ;mcc_generated_files/mcc.c: 61:     EUSART_Initialize();
 10228  0B0F  318F  27BC         	fcall	_EUSART_Initialize
 10229  0B11  0008               	return
 10230  0B12                     __end_of_SYSTEM_Initialize:	
 10231                           
 10232                           	psect	text43
 10233  08F4                     __ptext43:	
 10234 ;; *************** function _WDT_Initialize *****************
 10235 ;; Defined at:
 10236 ;;		line 78 in file "mcc_generated_files/mcc.c"
 10237 ;; Parameters:    Size  Location     Type
 10238 ;;		None
 10239 ;; Auto vars:     Size  Location     Type
 10240 ;;		None
 10241 ;; Return value:  Size  Location     Type
 10242 ;;                  1    wreg      void 
 10243 ;; Registers used:
 10244 ;;		wreg
 10245 ;; Tracked objects:
 10246 ;;		On entry : 0/0
 10247 ;;		On exit  : 0/0
 10248 ;;		Unchanged: 0/0
 10249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10250 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10251 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10252 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10253 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10254 ;;Total ram usage:        0 bytes
 10255 ;; Hardware stack levels used:    1
 10256 ;; Hardware stack levels required when called:    5
 10257 ;; This function calls:
 10258 ;;		Nothing
 10259 ;; This function is called by:
 10260 ;;		_SYSTEM_Initialize
 10261 ;; This function uses a non-reentrant model
 10262 ;;
 10263                           
 10264                           
 10265                           ;psect for function _WDT_Initialize
 10266  08F4                     _WDT_Initialize:	
 10267                           
 10268                           ;mcc_generated_files/mcc.c: 81:     WDTCON = 0x18;
 10269                           
 10270                           ;incstack = 0
 10271                           ; Regs used in _WDT_Initialize: [wreg]
 10272  08F4  3018               	movlw	24
 10273  08F5  0021               	movlb	1	; select bank1
 10274  08F6  0097               	movwf	23	;volatile
 10275  08F7  0008               	return
 10276  08F8                     __end_of_WDT_Initialize:	
 10277                           
 10278                           	psect	text44
 10279  0968                     __ptext44:	
 10280 ;; *************** function _TMR2_Initialize *****************
 10281 ;; Defined at:
 10282 ;;		line 62 in file "mcc_generated_files/tmr2.c"
 10283 ;; Parameters:    Size  Location     Type
 10284 ;;		None
 10285 ;; Auto vars:     Size  Location     Type
 10286 ;;		None
 10287 ;; Return value:  Size  Location     Type
 10288 ;;                  1    wreg      void 
 10289 ;; Registers used:
 10290 ;;		wreg, status,2
 10291 ;; Tracked objects:
 10292 ;;		On entry : 0/0
 10293 ;;		On exit  : 0/0
 10294 ;;		Unchanged: 0/0
 10295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10297 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10298 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10299 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10300 ;;Total ram usage:        0 bytes
 10301 ;; Hardware stack levels used:    1
 10302 ;; Hardware stack levels required when called:    5
 10303 ;; This function calls:
 10304 ;;		Nothing
 10305 ;; This function is called by:
 10306 ;;		_SYSTEM_Initialize
 10307 ;; This function uses a non-reentrant model
 10308 ;;
 10309                           
 10310                           
 10311                           ;psect for function _TMR2_Initialize
 10312  0968                     _TMR2_Initialize:	
 10313                           
 10314                           ;mcc_generated_files/tmr2.c: 67:     PR2 = 0xFF;
 10315                           
 10316                           ;incstack = 0
 10317                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
 10318  0968  30FF               	movlw	255
 10319  0969  0020               	movlb	0	; select bank0
 10320  096A  009E               	movwf	30	;volatile
 10321                           
 10322                           ;mcc_generated_files/tmr2.c: 70:     TMR2 = 0x00;
 10323  096B  019D               	clrf	29	;volatile
 10324                           
 10325                           ;mcc_generated_files/tmr2.c: 73:     PIR1bits.TMR2IF = 0;
 10326  096C  1091               	bcf	17,1	;volatile
 10327                           
 10328                           ;mcc_generated_files/tmr2.c: 76:     T2CON = 0x04;
 10329  096D  3004               	movlw	4
 10330  096E  009F               	movwf	31	;volatile
 10331  096F  0008               	return
 10332  0970                     __end_of_TMR2_Initialize:	
 10333                           
 10334                           	psect	text45
 10335  0932                     __ptext45:	
 10336 ;; *************** function _SPI2_Initialize *****************
 10337 ;; Defined at:
 10338 ;;		line 65 in file "mcc_generated_files/spi2.c"
 10339 ;; Parameters:    Size  Location     Type
 10340 ;;		None
 10341 ;; Auto vars:     Size  Location     Type
 10342 ;;		None
 10343 ;; Return value:  Size  Location     Type
 10344 ;;                  1    wreg      void 
 10345 ;; Registers used:
 10346 ;;		wreg, status,2
 10347 ;; Tracked objects:
 10348 ;;		On entry : 0/0
 10349 ;;		On exit  : 0/0
 10350 ;;		Unchanged: 0/0
 10351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10352 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10353 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10354 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10355 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10356 ;;Total ram usage:        0 bytes
 10357 ;; Hardware stack levels used:    1
 10358 ;; Hardware stack levels required when called:    5
 10359 ;; This function calls:
 10360 ;;		Nothing
 10361 ;; This function is called by:
 10362 ;;		_SYSTEM_Initialize
 10363 ;; This function uses a non-reentrant model
 10364 ;;
 10365                           
 10366                           
 10367                           ;psect for function _SPI2_Initialize
 10368  0932                     _SPI2_Initialize:	
 10369                           
 10370                           ;mcc_generated_files/spi2.c: 70:     SSP2STAT = 0x80;
 10371                           
 10372                           ;incstack = 0
 10373                           ; Regs used in _SPI2_Initialize: [wreg+status,2]
 10374  0932  3080               	movlw	128
 10375  0933  0024               	movlb	4	; select bank4
 10376  0934  009C               	movwf	28	;volatile
 10377                           
 10378                           ;mcc_generated_files/spi2.c: 73:     SSP2CON1 = 0x31;
 10379  0935  3031               	movlw	49
 10380  0936  009D               	movwf	29	;volatile
 10381                           
 10382                           ;mcc_generated_files/spi2.c: 76:     SSP2ADD = 0x00;
 10383  0937  019A               	clrf	26	;volatile
 10384  0938  0008               	return
 10385  0939                     __end_of_SPI2_Initialize:	
 10386                           
 10387                           	psect	text46
 10388  09CF                     __ptext46:	
 10389 ;; *************** function _PWM1_Initialize *****************
 10390 ;; Defined at:
 10391 ;;		line 64 in file "mcc_generated_files/pwm1.c"
 10392 ;; Parameters:    Size  Location     Type
 10393 ;;		None
 10394 ;; Auto vars:     Size  Location     Type
 10395 ;;		None
 10396 ;; Return value:  Size  Location     Type
 10397 ;;                  1    wreg      void 
 10398 ;; Registers used:
 10399 ;;		wreg, status,2, status,0
 10400 ;; Tracked objects:
 10401 ;;		On entry : 0/0
 10402 ;;		On exit  : 0/0
 10403 ;;		Unchanged: 0/0
 10404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10405 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10406 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10407 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10408 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10409 ;;Total ram usage:        0 bytes
 10410 ;; Hardware stack levels used:    1
 10411 ;; Hardware stack levels required when called:    5
 10412 ;; This function calls:
 10413 ;;		Nothing
 10414 ;; This function is called by:
 10415 ;;		_SYSTEM_Initialize
 10416 ;; This function uses a non-reentrant model
 10417 ;;
 10418                           
 10419                           
 10420                           ;psect for function _PWM1_Initialize
 10421  09CF                     _PWM1_Initialize:	
 10422                           
 10423                           ;mcc_generated_files/pwm1.c: 69:  CCP1CON = 0x8F;
 10424                           
 10425                           ;incstack = 0
 10426                           ; Regs used in _PWM1_Initialize: [wreg+status,2+status,0]
 10427  09CF  308F               	movlw	143
 10428  09D0  0025               	movlb	5	; select bank5
 10429  09D1  0093               	movwf	19	;volatile
 10430                           
 10431                           ;mcc_generated_files/pwm1.c: 72:  CCPR1H = 0x01;
 10432  09D2  3001               	movlw	1
 10433  09D3  0092               	movwf	18	;volatile
 10434                           
 10435                           ;mcc_generated_files/pwm1.c: 75:  CCPR1L = 0xFF;
 10436  09D4  30FF               	movlw	255
 10437  09D5  0091               	movwf	17	;volatile
 10438                           
 10439                           ;mcc_generated_files/pwm1.c: 78:  CCPTMRSbits.C1TSEL = 0x1;
 10440  09D6  081F               	movf	31,w	;volatile
 10441  09D7  39FC               	andlw	-4
 10442  09D8  3801               	iorlw	1
 10443  09D9  009F               	movwf	31	;volatile
 10444  09DA  0008               	return
 10445  09DB                     __end_of_PWM1_Initialize:	
 10446                           
 10447                           	psect	text47
 10448  0960                     __ptext47:	
 10449 ;; *************** function _PMD_Initialize *****************
 10450 ;; Defined at:
 10451 ;;		line 84 in file "mcc_generated_files/mcc.c"
 10452 ;; Parameters:    Size  Location     Type
 10453 ;;		None
 10454 ;; Auto vars:     Size  Location     Type
 10455 ;;		None
 10456 ;; Return value:  Size  Location     Type
 10457 ;;                  1    wreg      void 
 10458 ;; Registers used:
 10459 ;;		status,2
 10460 ;; Tracked objects:
 10461 ;;		On entry : 0/0
 10462 ;;		On exit  : 0/0
 10463 ;;		Unchanged: 0/0
 10464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10465 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10466 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10467 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10468 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10469 ;;Total ram usage:        0 bytes
 10470 ;; Hardware stack levels used:    1
 10471 ;; Hardware stack levels required when called:    5
 10472 ;; This function calls:
 10473 ;;		Nothing
 10474 ;; This function is called by:
 10475 ;;		_SYSTEM_Initialize
 10476 ;; This function uses a non-reentrant model
 10477 ;;
 10478                           
 10479                           
 10480                           ;psect for function _PMD_Initialize
 10481  0960                     _PMD_Initialize:	
 10482                           
 10483                           ;mcc_generated_files/mcc.c: 87:     PMD0 = 0x00;
 10484                           
 10485                           ;incstack = 0
 10486                           ; Regs used in _PMD_Initialize: [status,2]
 10487  0960  0032               	movlb	18	; select bank18
 10488  0961  0191               	clrf	17	;volatile
 10489                           
 10490                           ;mcc_generated_files/mcc.c: 89:     PMD1 = 0x00;
 10491  0962  0192               	clrf	18	;volatile
 10492                           
 10493                           ;mcc_generated_files/mcc.c: 91:     PMD2 = 0x00;
 10494  0963  0193               	clrf	19	;volatile
 10495                           
 10496                           ;mcc_generated_files/mcc.c: 93:     PMD3 = 0x00;
 10497  0964  0194               	clrf	20	;volatile
 10498                           
 10499                           ;mcc_generated_files/mcc.c: 95:     PMD4 = 0x00;
 10500  0965  0195               	clrf	21	;volatile
 10501                           
 10502                           ;mcc_generated_files/mcc.c: 97:     PMD5 = 0x00;
 10503  0966  0196               	clrf	22	;volatile
 10504  0967  0008               	return
 10505  0968                     __end_of_PMD_Initialize:	
 10506                           
 10507                           	psect	text48
 10508  0F05                     __ptext48:	
 10509 ;; *************** function _PIN_MANAGER_Initialize *****************
 10510 ;; Defined at:
 10511 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
 10512 ;; Parameters:    Size  Location     Type
 10513 ;;		None
 10514 ;; Auto vars:     Size  Location     Type
 10515 ;;		None
 10516 ;; Return value:  Size  Location     Type
 10517 ;;                  1    wreg      void 
 10518 ;; Registers used:
 10519 ;;		wreg, status,2
 10520 ;; Tracked objects:
 10521 ;;		On entry : 0/0
 10522 ;;		On exit  : 0/0
 10523 ;;		Unchanged: 0/0
 10524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10525 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10526 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10527 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10528 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10529 ;;Total ram usage:        0 bytes
 10530 ;; Hardware stack levels used:    1
 10531 ;; Hardware stack levels required when called:    5
 10532 ;; This function calls:
 10533 ;;		Nothing
 10534 ;; This function is called by:
 10535 ;;		_SYSTEM_Initialize
 10536 ;; This function uses a non-reentrant model
 10537 ;;
 10538                           
 10539                           
 10540                           ;psect for function _PIN_MANAGER_Initialize
 10541  0F05                     _PIN_MANAGER_Initialize:	
 10542                           
 10543                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x00;
 10544                           
 10545                           ;incstack = 0
 10546                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
 10547  0F05  0022               	movlb	2	; select bank2
 10548  0F06  018C               	clrf	12	;volatile
 10549                           
 10550                           ;mcc_generated_files/pin_manager.c: 61:     LATB = 0x00;
 10551  0F07  018D               	clrf	13	;volatile
 10552                           
 10553                           ;mcc_generated_files/pin_manager.c: 62:     LATC = 0x00;
 10554  0F08  018E               	clrf	14	;volatile
 10555                           
 10556                           ;mcc_generated_files/pin_manager.c: 67:     TRISA = 0x33;
 10557  0F09  3033               	movlw	51
 10558  0F0A  0021               	movlb	1	; select bank1
 10559  0F0B  008C               	movwf	12	;volatile
 10560                           
 10561                           ;mcc_generated_files/pin_manager.c: 68:     TRISB = 0xB0;
 10562  0F0C  30B0               	movlw	176
 10563  0F0D  008D               	movwf	13	;volatile
 10564                           
 10565                           ;mcc_generated_files/pin_manager.c: 69:     TRISC = 0x99;
 10566  0F0E  3099               	movlw	153
 10567  0F0F  008E               	movwf	14	;volatile
 10568                           
 10569                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0xE4;
 10570  0F10  30E4               	movlw	228
 10571  0F11  0023               	movlb	3	; select bank3
 10572  0F12  008E               	movwf	14	;volatile
 10573                           
 10574                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0x00;
 10575  0F13  018D               	clrf	13	;volatile
 10576                           
 10577                           ;mcc_generated_files/pin_manager.c: 76:     ANSELA = 0x11;
 10578  0F14  3011               	movlw	17
 10579  0F15  008C               	movwf	12	;volatile
 10580                           
 10581                           ;mcc_generated_files/pin_manager.c: 81:     WPUB = 0x00;
 10582  0F16  0024               	movlb	4	; select bank4
 10583  0F17  018D               	clrf	13	;volatile
 10584                           
 10585                           ;mcc_generated_files/pin_manager.c: 82:     WPUA = 0x00;
 10586  0F18  018C               	clrf	12	;volatile
 10587                           
 10588                           ;mcc_generated_files/pin_manager.c: 83:     WPUC = 0x00;
 10589  0F19  018E               	clrf	14	;volatile
 10590                           
 10591                           ;mcc_generated_files/pin_manager.c: 88:     ODCONA = 0x00;
 10592  0F1A  0025               	movlb	5	; select bank5
 10593  0F1B  018C               	clrf	12	;volatile
 10594                           
 10595                           ;mcc_generated_files/pin_manager.c: 89:     ODCONB = 0x00;
 10596  0F1C  018D               	clrf	13	;volatile
 10597                           
 10598                           ;mcc_generated_files/pin_manager.c: 90:     ODCONC = 0x00;
 10599  0F1D  018E               	clrf	14	;volatile
 10600                           
 10601                           ;mcc_generated_files/pin_manager.c: 95:     SLRCONA = 0x37;
 10602  0F1E  3037               	movlw	55
 10603  0F1F  0026               	movlb	6	; select bank6
 10604  0F20  008C               	movwf	12	;volatile
 10605                           
 10606                           ;mcc_generated_files/pin_manager.c: 96:     SLRCONB = 0xF0;
 10607  0F21  30F0               	movlw	240
 10608  0F22  008D               	movwf	13	;volatile
 10609                           
 10610                           ;mcc_generated_files/pin_manager.c: 97:     SLRCONC = 0xFF;
 10611  0F23  30FF               	movlw	255
 10612  0F24  008E               	movwf	14	;volatile
 10613                           
 10614                           ;mcc_generated_files/pin_manager.c: 105:     PIE0bits.IOCIE = 1;
 10615  0F25  0021               	movlb	1	; select bank1
 10616  0F26  1610               	bsf	16,4	;volatile
 10617                           
 10618                           ;mcc_generated_files/pin_manager.c: 108:     RXPPS = 0x14;
 10619  0F27  3014               	movlw	20
 10620  0F28  003C               	movlb	28	; select bank28
 10621  0F29  00A4               	movwf	36	;volatile
 10622                           
 10623                           ;mcc_generated_files/pin_manager.c: 109:     SSP2DATPPS = 0x0C;
 10624  0F2A  300C               	movlw	12
 10625  0F2B  009E               	movwf	30	;volatile
 10626                           
 10627                           ;mcc_generated_files/pin_manager.c: 110:     SSP1CLKPPS = 0x0F;
 10628  0F2C  300F               	movlw	15
 10629  0F2D  00A0               	movwf	32	;volatile
 10630                           
 10631                           ;mcc_generated_files/pin_manager.c: 111:     RB6PPS = 0x1A;
 10632  0F2E  301A               	movlw	26
 10633  0F2F  003D               	movlb	29	; select bank29
 10634  0F30  009E               	movwf	30	;volatile
 10635                           
 10636                           ;mcc_generated_files/pin_manager.c: 112:     RB7PPS = 0x18;
 10637  0F31  3018               	movlw	24
 10638  0F32  009F               	movwf	31	;volatile
 10639                           
 10640                           ;mcc_generated_files/pin_manager.c: 113:     RB5PPS = 0x00;
 10641  0F33  019D               	clrf	29	;volatile
 10642                           
 10643                           ;mcc_generated_files/pin_manager.c: 114:     RC2PPS = 0x1B;
 10644  0F34  301B               	movlw	27
 10645  0F35  00A2               	movwf	34	;volatile
 10646                           
 10647                           ;mcc_generated_files/pin_manager.c: 115:     RC5PPS = 0x14;
 10648  0F36  3014               	movlw	20
 10649  0F37  00A5               	movwf	37	;volatile
 10650                           
 10651                           ;mcc_generated_files/pin_manager.c: 116:     SSP1DATPPS = 0x0D;
 10652  0F38  300D               	movlw	13
 10653  0F39  003C               	movlb	28	; select bank28
 10654  0F3A  00A1               	movwf	33	;volatile
 10655                           
 10656                           ;mcc_generated_files/pin_manager.c: 117:     SSP2CLKPPS = 0x0E;
 10657  0F3B  300E               	movlw	14
 10658  0F3C  009D               	movwf	29	;volatile
 10659  0F3D  0008               	return
 10660  0F3E                     __end_of_PIN_MANAGER_Initialize:	
 10661                           
 10662                           	psect	text49
 10663  0958                     __ptext49:	
 10664 ;; *************** function _OSCILLATOR_Initialize *****************
 10665 ;; Defined at:
 10666 ;;		line 64 in file "mcc_generated_files/mcc.c"
 10667 ;; Parameters:    Size  Location     Type
 10668 ;;		None
 10669 ;; Auto vars:     Size  Location     Type
 10670 ;;		None
 10671 ;; Return value:  Size  Location     Type
 10672 ;;                  1    wreg      void 
 10673 ;; Registers used:
 10674 ;;		wreg, status,2
 10675 ;; Tracked objects:
 10676 ;;		On entry : 0/0
 10677 ;;		On exit  : 0/0
 10678 ;;		Unchanged: 0/0
 10679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10680 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10681 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10682 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10683 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10684 ;;Total ram usage:        0 bytes
 10685 ;; Hardware stack levels used:    1
 10686 ;; Hardware stack levels required when called:    5
 10687 ;; This function calls:
 10688 ;;		Nothing
 10689 ;; This function is called by:
 10690 ;;		_SYSTEM_Initialize
 10691 ;; This function uses a non-reentrant model
 10692 ;;
 10693                           
 10694                           
 10695                           ;psect for function _OSCILLATOR_Initialize
 10696  0958                     _OSCILLATOR_Initialize:	
 10697                           
 10698                           ;mcc_generated_files/mcc.c: 67:     OSCCON1 = 0x61;
 10699                           
 10700                           ;incstack = 0
 10701                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 10702  0958  3061               	movlw	97
 10703  0959  0032               	movlb	18	; select bank18
 10704  095A  0099               	movwf	25	;volatile
 10705                           
 10706                           ;mcc_generated_files/mcc.c: 69:     OSCCON3 = 0x00;
 10707  095B  019B               	clrf	27	;volatile
 10708                           
 10709                           ;mcc_generated_files/mcc.c: 71:     OSCEN = 0x00;
 10710  095C  019D               	clrf	29	;volatile
 10711                           
 10712                           ;mcc_generated_files/mcc.c: 73:     OSCFRQ = 0x00;
 10713  095D  019F               	clrf	31	;volatile
 10714                           
 10715                           ;mcc_generated_files/mcc.c: 75:     OSCTUNE = 0x00;
 10716  095E  019E               	clrf	30	;volatile
 10717  095F  0008               	return
 10718  0960                     __end_of_OSCILLATOR_Initialize:	
 10719                           
 10720                           	psect	text50
 10721  0FBC                     __ptext50:	
 10722 ;; *************** function _EUSART_Initialize *****************
 10723 ;; Defined at:
 10724 ;;		line 85 in file "mcc_generated_files/eusart.c"
 10725 ;; Parameters:    Size  Location     Type
 10726 ;;		None
 10727 ;; Auto vars:     Size  Location     Type
 10728 ;;		None
 10729 ;; Return value:  Size  Location     Type
 10730 ;;                  1    wreg      void 
 10731 ;; Registers used:
 10732 ;;		wreg, status,2, status,0, pclath, cstack
 10733 ;; Tracked objects:
 10734 ;;		On entry : 0/0
 10735 ;;		On exit  : 0/0
 10736 ;;		Unchanged: 0/0
 10737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10738 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10739 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10740 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10741 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10742 ;;Total ram usage:        1 bytes
 10743 ;; Hardware stack levels used:    1
 10744 ;; Hardware stack levels required when called:    6
 10745 ;; This function calls:
 10746 ;;		_EUSART_SetErrorHandler
 10747 ;;		_EUSART_SetFramingErrorHandler
 10748 ;;		_EUSART_SetOverrunErrorHandler
 10749 ;;		_EUSART_SetRxInterruptHandler
 10750 ;;		_EUSART_SetTxInterruptHandler
 10751 ;; This function is called by:
 10752 ;;		_SYSTEM_Initialize
 10753 ;; This function uses a non-reentrant model
 10754 ;;
 10755                           
 10756                           
 10757                           ;psect for function _EUSART_Initialize
 10758  0FBC                     _EUSART_Initialize:	
 10759                           
 10760                           ;mcc_generated_files/eusart.c: 88:     PIE1bits.RCIE = 0;
 10761                           
 10762                           ;incstack = 0
 10763                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
 10764  0FBC  0021               	movlb	1	; select bank1
 10765  0FBD  1291               	bcf	17,5	;volatile
 10766                           
 10767                           ;mcc_generated_files/eusart.c: 89:     EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
 10768  0FBE  30CF               	movlw	low _EUSART_Receive_ISR
 10769  0FBF  0020               	movlb	0	; select bank0
 10770  0FC0  00A0               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
 10771  0FC1  300E               	movlw	high _EUSART_Receive_ISR
 10772  0FC2  00A1               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
 10773  0FC3  3189  2193  318F   	fcall	_EUSART_SetRxInterruptHandler
 10774                           
 10775                           ;mcc_generated_files/eusart.c: 90:     PIE1bits.TXIE = 0;
 10776  0FC6  0021               	movlb	1	; select bank1
 10777  0FC7  1211               	bcf	17,4	;volatile
 10778                           
 10779                           ;mcc_generated_files/eusart.c: 91:     EUSART_SetTxInterruptHandler(EUSART_Transmit_ISR)
      +                          ;
 10780  0FC8  3049               	movlw	low _EUSART_Transmit_ISR
 10781  0FC9  0020               	movlb	0	; select bank0
 10782  0FCA  00A0               	movwf	EUSART_SetTxInterruptHandler@interruptHandler
 10783  0FCB  300B               	movlw	high _EUSART_Transmit_ISR
 10784  0FCC  00A1               	movwf	EUSART_SetTxInterruptHandler@interruptHandler+1
 10785  0FCD  3189  219C  318F   	fcall	_EUSART_SetTxInterruptHandler
 10786                           
 10787                           ;mcc_generated_files/eusart.c: 95:     BAUD1CON = 0x0A;
 10788  0FD0  300A               	movlw	10
 10789  0FD1  0023               	movlb	3	; select bank3
 10790  0FD2  009F               	movwf	31	;volatile
 10791                           
 10792                           ;mcc_generated_files/eusart.c: 98:     RC1STA = 0x90;
 10793  0FD3  3090               	movlw	144
 10794  0FD4  009D               	movwf	29	;volatile
 10795                           
 10796                           ;mcc_generated_files/eusart.c: 101:     TX1STA = 0x24;
 10797  0FD5  3024               	movlw	36
 10798  0FD6  009E               	movwf	30	;volatile
 10799                           
 10800                           ;mcc_generated_files/eusart.c: 104:     SP1BRGL = 0x0C;
 10801  0FD7  300C               	movlw	12
 10802  0FD8  009B               	movwf	27	;volatile
 10803                           
 10804                           ;mcc_generated_files/eusart.c: 107:     SP1BRGH = 0x00;
 10805  0FD9  019C               	clrf	28	;volatile
 10806                           
 10807                           ;mcc_generated_files/eusart.c: 110:     EUSART_SetFramingErrorHandler(EUSART_DefaultFram
      +                          ingErrorHandler);
 10808  0FDA  3090               	movlw	low _EUSART_DefaultFramingErrorHandler
 10809  0FDB  0020               	movlb	0	; select bank0
 10810  0FDC  00A0               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
 10811  0FDD  3008               	movlw	high _EUSART_DefaultFramingErrorHandler
 10812  0FDE  00A1               	movwf	EUSART_SetFramingErrorHandler@interruptHandler+1
 10813  0FDF  3189  2181  318F   	fcall	_EUSART_SetFramingErrorHandler
 10814                           
 10815                           ;mcc_generated_files/eusart.c: 111:     EUSART_SetOverrunErrorHandler(EUSART_DefaultOver
      +                          runErrorHandler);
 10816  0FE2  30CC               	movlw	low _EUSART_DefaultOverrunErrorHandler
 10817  0FE3  0020               	movlb	0	; select bank0
 10818  0FE4  00A0               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
 10819  0FE5  3008               	movlw	high _EUSART_DefaultOverrunErrorHandler
 10820  0FE6  00A1               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler+1
 10821  0FE7  3189  218A  318F   	fcall	_EUSART_SetOverrunErrorHandler
 10822                           
 10823                           ;mcc_generated_files/eusart.c: 112:     EUSART_SetErrorHandler(EUSART_DefaultErrorHandle
      +                          r);
 10824  0FEA  3093               	movlw	low _EUSART_DefaultErrorHandler
 10825  0FEB  0020               	movlb	0	; select bank0
 10826  0FEC  00A0               	movwf	EUSART_SetErrorHandler@interruptHandler
 10827  0FED  3008               	movlw	high _EUSART_DefaultErrorHandler
 10828  0FEE  00A1               	movwf	EUSART_SetErrorHandler@interruptHandler+1
 10829  0FEF  3189  2178         	fcall	_EUSART_SetErrorHandler
 10830                           
 10831                           ;mcc_generated_files/eusart.c: 114:     eusartRxLastError.status = 0;
 10832  0FF1  0021               	movlb	1	; select bank1
 10833  0FF2  01C1               	clrf	_eusartRxLastError^(0+128)	;volatile
 10834                           
 10835                           ;mcc_generated_files/eusart.c: 117:     eusartTxHead = 0;
 10836  0FF3  01C4               	clrf	_eusartTxHead^(0+128)	;volatile
 10837                           
 10838                           ;mcc_generated_files/eusart.c: 118:     eusartTxTail = 0;
 10839  0FF4  01C3               	clrf	_eusartTxTail^(0+128)	;volatile
 10840                           
 10841                           ;mcc_generated_files/eusart.c: 119:     eusartTxBufferRemaining = sizeof(eusartTxBuffer)
      +                          ;
 10842  0FF5  3008               	movlw	8
 10843  0FF6  0020               	movlb	0	; select bank0
 10844  0FF7  00A2               	movwf	??_EUSART_Initialize
 10845  0FF8  0822               	movf	??_EUSART_Initialize,w
 10846  0FF9  0021               	movlb	1	; select bank1
 10847  0FFA  00EA               	movwf	_eusartTxBufferRemaining^(0+128)	;volatile
 10848                           
 10849                           ;mcc_generated_files/eusart.c: 121:     eusartRxHead = 0;
 10850  0FFB  01F5               	clrf	_eusartRxHead	;volatile
 10851                           
 10852                           ;mcc_generated_files/eusart.c: 122:     eusartRxTail = 0;
 10853  0FFC  01F4               	clrf	_eusartRxTail	;volatile
 10854                           
 10855                           ;mcc_generated_files/eusart.c: 123:     eusartRxCount = 0;
 10856  0FFD  01C2               	clrf	_eusartRxCount^(0+128)	;volatile
 10857                           
 10858                           ;mcc_generated_files/eusart.c: 126:     PIE1bits.RCIE = 1;
 10859  0FFE  1691               	bsf	17,5	;volatile
 10860  0FFF  0008               	return
 10861  1000                     __end_of_EUSART_Initialize:	
 10862                           
 10863                           	psect	text51
 10864  099C                     __ptext51:	
 10865 ;; *************** function _EUSART_SetTxInterruptHandler *****************
 10866 ;; Defined at:
 10867 ;;		line 284 in file "mcc_generated_files/eusart.c"
 10868 ;; Parameters:    Size  Location     Type
 10869 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
 10870 ;;		 -> EUSART_Transmit_ISR(1), 
 10871 ;; Auto vars:     Size  Location     Type
 10872 ;;		None
 10873 ;; Return value:  Size  Location     Type
 10874 ;;                  1    wreg      void 
 10875 ;; Registers used:
 10876 ;;		wreg
 10877 ;; Tracked objects:
 10878 ;;		On entry : 0/0
 10879 ;;		On exit  : 0/0
 10880 ;;		Unchanged: 0/0
 10881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10882 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10883 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10884 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10885 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10886 ;;Total ram usage:        2 bytes
 10887 ;; Hardware stack levels used:    1
 10888 ;; Hardware stack levels required when called:    5
 10889 ;; This function calls:
 10890 ;;		Nothing
 10891 ;; This function is called by:
 10892 ;;		_EUSART_Initialize
 10893 ;; This function uses a non-reentrant model
 10894 ;;
 10895                           
 10896                           
 10897                           ;psect for function _EUSART_SetTxInterruptHandler
 10898  099C                     _EUSART_SetTxInterruptHandler:	
 10899                           
 10900                           ;mcc_generated_files/eusart.c: 285:     EUSART_TxDefaultInterruptHandler = interruptHand
      +                          ler;
 10901                           
 10902                           ;incstack = 0
 10903                           ; Regs used in _EUSART_SetTxInterruptHandler: [wreg]
 10904  099C  0020               	movlb	0	; select bank0
 10905  099D  0821               	movf	EUSART_SetTxInterruptHandler@interruptHandler+1,w
 10906  099E  0021               	movlb	1	; select bank1
 10907  099F  00E9               	movwf	(_EUSART_TxDefaultInterruptHandler+1)^(0+128)
 10908  09A0  0020               	movlb	0	; select bank0
 10909  09A1  0820               	movf	EUSART_SetTxInterruptHandler@interruptHandler,w
 10910  09A2  0021               	movlb	1	; select bank1
 10911  09A3  00E8               	movwf	_EUSART_TxDefaultInterruptHandler^(0+128)
 10912  09A4  0008               	return
 10913  09A5                     __end_of_EUSART_SetTxInterruptHandler:	
 10914                           
 10915                           	psect	text52
 10916  0993                     __ptext52:	
 10917 ;; *************** function _EUSART_SetRxInterruptHandler *****************
 10918 ;; Defined at:
 10919 ;;		line 288 in file "mcc_generated_files/eusart.c"
 10920 ;; Parameters:    Size  Location     Type
 10921 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
 10922 ;;		 -> EUSART_Receive_ISR(1), 
 10923 ;; Auto vars:     Size  Location     Type
 10924 ;;		None
 10925 ;; Return value:  Size  Location     Type
 10926 ;;                  1    wreg      void 
 10927 ;; Registers used:
 10928 ;;		wreg
 10929 ;; Tracked objects:
 10930 ;;		On entry : 0/0
 10931 ;;		On exit  : 0/0
 10932 ;;		Unchanged: 0/0
 10933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10934 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10935 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10936 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10937 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10938 ;;Total ram usage:        2 bytes
 10939 ;; Hardware stack levels used:    1
 10940 ;; Hardware stack levels required when called:    5
 10941 ;; This function calls:
 10942 ;;		Nothing
 10943 ;; This function is called by:
 10944 ;;		_EUSART_Initialize
 10945 ;; This function uses a non-reentrant model
 10946 ;;
 10947                           
 10948                           
 10949                           ;psect for function _EUSART_SetRxInterruptHandler
 10950  0993                     _EUSART_SetRxInterruptHandler:	
 10951                           
 10952                           ;mcc_generated_files/eusart.c: 289:     EUSART_RxDefaultInterruptHandler = interruptHand
      +                          ler;
 10953                           
 10954                           ;incstack = 0
 10955                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
 10956  0993  0020               	movlb	0	; select bank0
 10957  0994  0821               	movf	EUSART_SetRxInterruptHandler@interruptHandler+1,w
 10958  0995  0021               	movlb	1	; select bank1
 10959  0996  00E7               	movwf	(_EUSART_RxDefaultInterruptHandler+1)^(0+128)
 10960  0997  0020               	movlb	0	; select bank0
 10961  0998  0820               	movf	EUSART_SetRxInterruptHandler@interruptHandler,w
 10962  0999  0021               	movlb	1	; select bank1
 10963  099A  00E6               	movwf	_EUSART_RxDefaultInterruptHandler^(0+128)
 10964  099B  0008               	return
 10965  099C                     __end_of_EUSART_SetRxInterruptHandler:	
 10966                           
 10967                           	psect	text53
 10968  098A                     __ptext53:	
 10969 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
 10970 ;; Defined at:
 10971 ;;		line 276 in file "mcc_generated_files/eusart.c"
 10972 ;; Parameters:    Size  Location     Type
 10973 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
 10974 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
 10975 ;; Auto vars:     Size  Location     Type
 10976 ;;		None
 10977 ;; Return value:  Size  Location     Type
 10978 ;;                  1    wreg      void 
 10979 ;; Registers used:
 10980 ;;		wreg
 10981 ;; Tracked objects:
 10982 ;;		On entry : 0/0
 10983 ;;		On exit  : 0/0
 10984 ;;		Unchanged: 0/0
 10985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10986 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10987 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10988 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10989 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10990 ;;Total ram usage:        2 bytes
 10991 ;; Hardware stack levels used:    1
 10992 ;; Hardware stack levels required when called:    5
 10993 ;; This function calls:
 10994 ;;		Nothing
 10995 ;; This function is called by:
 10996 ;;		_EUSART_Initialize
 10997 ;; This function uses a non-reentrant model
 10998 ;;
 10999                           
 11000                           
 11001                           ;psect for function _EUSART_SetOverrunErrorHandler
 11002  098A                     _EUSART_SetOverrunErrorHandler:	
 11003                           
 11004                           ;mcc_generated_files/eusart.c: 277:     EUSART_OverrunErrorHandler = interruptHandler;
 11005                           
 11006                           ;incstack = 0
 11007                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
 11008  098A  0020               	movlb	0	; select bank0
 11009  098B  0821               	movf	EUSART_SetOverrunErrorHandler@interruptHandler+1,w
 11010  098C  0022               	movlb	2	; select bank2
 11011  098D  00E0               	movwf	(_EUSART_OverrunErrorHandler+1)^(0+256)
 11012  098E  0020               	movlb	0	; select bank0
 11013  098F  0820               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
 11014  0990  0022               	movlb	2	; select bank2
 11015  0991  00DF               	movwf	_EUSART_OverrunErrorHandler^(0+256)
 11016  0992  0008               	return
 11017  0993                     __end_of_EUSART_SetOverrunErrorHandler:	
 11018                           
 11019                           	psect	text54
 11020  0981                     __ptext54:	
 11021 ;; *************** function _EUSART_SetFramingErrorHandler *****************
 11022 ;; Defined at:
 11023 ;;		line 272 in file "mcc_generated_files/eusart.c"
 11024 ;; Parameters:    Size  Location     Type
 11025 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
 11026 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
 11027 ;; Auto vars:     Size  Location     Type
 11028 ;;		None
 11029 ;; Return value:  Size  Location     Type
 11030 ;;                  1    wreg      void 
 11031 ;; Registers used:
 11032 ;;		wreg
 11033 ;; Tracked objects:
 11034 ;;		On entry : 0/0
 11035 ;;		On exit  : 0/0
 11036 ;;		Unchanged: 0/0
 11037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11038 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11039 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11040 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11041 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11042 ;;Total ram usage:        2 bytes
 11043 ;; Hardware stack levels used:    1
 11044 ;; Hardware stack levels required when called:    5
 11045 ;; This function calls:
 11046 ;;		Nothing
 11047 ;; This function is called by:
 11048 ;;		_EUSART_Initialize
 11049 ;; This function uses a non-reentrant model
 11050 ;;
 11051                           
 11052                           
 11053                           ;psect for function _EUSART_SetFramingErrorHandler
 11054  0981                     _EUSART_SetFramingErrorHandler:	
 11055                           
 11056                           ;mcc_generated_files/eusart.c: 273:     EUSART_FramingErrorHandler = interruptHandler;
 11057                           
 11058                           ;incstack = 0
 11059                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
 11060  0981  0020               	movlb	0	; select bank0
 11061  0982  0821               	movf	EUSART_SetFramingErrorHandler@interruptHandler+1,w
 11062  0983  0021               	movlb	1	; select bank1
 11063  0984  00E5               	movwf	(_EUSART_FramingErrorHandler+1)^(0+128)
 11064  0985  0020               	movlb	0	; select bank0
 11065  0986  0820               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
 11066  0987  0021               	movlb	1	; select bank1
 11067  0988  00E4               	movwf	_EUSART_FramingErrorHandler^(0+128)
 11068  0989  0008               	return
 11069  098A                     __end_of_EUSART_SetFramingErrorHandler:	
 11070                           
 11071                           	psect	text55
 11072  0978                     __ptext55:	
 11073 ;; *************** function _EUSART_SetErrorHandler *****************
 11074 ;; Defined at:
 11075 ;;		line 280 in file "mcc_generated_files/eusart.c"
 11076 ;; Parameters:    Size  Location     Type
 11077 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
 11078 ;;		 -> EUSART_DefaultErrorHandler(1), 
 11079 ;; Auto vars:     Size  Location     Type
 11080 ;;		None
 11081 ;; Return value:  Size  Location     Type
 11082 ;;                  1    wreg      void 
 11083 ;; Registers used:
 11084 ;;		wreg
 11085 ;; Tracked objects:
 11086 ;;		On entry : 0/0
 11087 ;;		On exit  : 0/0
 11088 ;;		Unchanged: 0/0
 11089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11090 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11091 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11093 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11094 ;;Total ram usage:        2 bytes
 11095 ;; Hardware stack levels used:    1
 11096 ;; Hardware stack levels required when called:    5
 11097 ;; This function calls:
 11098 ;;		Nothing
 11099 ;; This function is called by:
 11100 ;;		_EUSART_Initialize
 11101 ;; This function uses a non-reentrant model
 11102 ;;
 11103                           
 11104                           
 11105                           ;psect for function _EUSART_SetErrorHandler
 11106  0978                     _EUSART_SetErrorHandler:	
 11107                           
 11108                           ;mcc_generated_files/eusart.c: 281:     EUSART_ErrorHandler = interruptHandler;
 11109                           
 11110                           ;incstack = 0
 11111                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
 11112  0978  0020               	movlb	0	; select bank0
 11113  0979  0821               	movf	EUSART_SetErrorHandler@interruptHandler+1,w
 11114  097A  0022               	movlb	2	; select bank2
 11115  097B  00DE               	movwf	(_EUSART_ErrorHandler+1)^(0+256)
 11116  097C  0020               	movlb	0	; select bank0
 11117  097D  0820               	movf	EUSART_SetErrorHandler@interruptHandler,w
 11118  097E  0022               	movlb	2	; select bank2
 11119  097F  00DD               	movwf	_EUSART_ErrorHandler^(0+256)
 11120  0980  0008               	return
 11121  0981                     __end_of_EUSART_SetErrorHandler:	
 11122                           
 11123                           	psect	text56
 11124  0950                     __ptext56:	
 11125 ;; *************** function _ADC_Initialize *****************
 11126 ;; Defined at:
 11127 ;;		line 65 in file "mcc_generated_files/adc.c"
 11128 ;; Parameters:    Size  Location     Type
 11129 ;;		None
 11130 ;; Auto vars:     Size  Location     Type
 11131 ;;		None
 11132 ;; Return value:  Size  Location     Type
 11133 ;;                  1    wreg      void 
 11134 ;; Registers used:
 11135 ;;		wreg, status,2
 11136 ;; Tracked objects:
 11137 ;;		On entry : 0/0
 11138 ;;		On exit  : 0/0
 11139 ;;		Unchanged: 0/0
 11140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11141 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11142 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11143 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11144 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11145 ;;Total ram usage:        0 bytes
 11146 ;; Hardware stack levels used:    1
 11147 ;; Hardware stack levels required when called:    5
 11148 ;; This function calls:
 11149 ;;		Nothing
 11150 ;; This function is called by:
 11151 ;;		_SYSTEM_Initialize
 11152 ;; This function uses a non-reentrant model
 11153 ;;
 11154                           
 11155                           
 11156                           ;psect for function _ADC_Initialize
 11157  0950                     _ADC_Initialize:	
 11158                           
 11159                           ;mcc_generated_files/adc.c: 70:     ADCON0 = 0x01;
 11160                           
 11161                           ;incstack = 0
 11162                           ; Regs used in _ADC_Initialize: [wreg+status,2]
 11163  0950  3001               	movlw	1
 11164  0951  0021               	movlb	1	; select bank1
 11165  0952  009D               	movwf	29	;volatile
 11166                           
 11167                           ;mcc_generated_files/adc.c: 73:     ADCON1 = 0x00;
 11168  0953  019E               	clrf	30	;volatile
 11169                           
 11170                           ;mcc_generated_files/adc.c: 76:     ADACT = 0x00;
 11171  0954  019F               	clrf	31	;volatile
 11172                           
 11173                           ;mcc_generated_files/adc.c: 79:     ADRESL = 0x00;
 11174  0955  019B               	clrf	27	;volatile
 11175                           
 11176                           ;mcc_generated_files/adc.c: 82:     ADRESH = 0x00;
 11177  0956  019C               	clrf	28	;volatile
 11178  0957  0008               	return
 11179  0958                     __end_of_ADC_Initialize:	
 11180                           
 11181                           	psect	text57
 11182  09C3                     __ptext57:	
 11183 ;; *************** function _PIR_Sensor *****************
 11184 ;; Defined at:
 11185 ;;		line 284 in file "main.c"
 11186 ;; Parameters:    Size  Location     Type
 11187 ;;		None
 11188 ;; Auto vars:     Size  Location     Type
 11189 ;;		None
 11190 ;; Return value:  Size  Location     Type
 11191 ;;                  1    wreg      _Bool 
 11192 ;; Registers used:
 11193 ;;		wreg, status,2
 11194 ;; Tracked objects:
 11195 ;;		On entry : 0/0
 11196 ;;		On exit  : 0/0
 11197 ;;		Unchanged: 0/0
 11198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11199 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11200 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11201 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11202 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11203 ;;Total ram usage:        0 bytes
 11204 ;; Hardware stack levels used:    1
 11205 ;; Hardware stack levels required when called:    5
 11206 ;; This function calls:
 11207 ;;		Nothing
 11208 ;; This function is called by:
 11209 ;;		_main
 11210 ;; This function uses a non-reentrant model
 11211 ;;
 11212                           
 11213                           
 11214                           ;psect for function _PIR_Sensor
 11215  09C3                     _PIR_Sensor:	
 11216                           
 11217                           ;main.c: 285:     if(PORTCbits.RC3 >= 1){
 11218                           
 11219                           ;incstack = 0
 11220                           ; Regs used in _PIR_Sensor: [wreg+status,2]
 11221  09C3  0020               	movlb	0	; select bank0
 11222  09C4  1D8E               	btfss	14,3	;volatile
 11223  09C5  29CB               	goto	l7374
 11224                           
 11225                           ;main.c: 286:         prox = 1;
 11226  09C6  0021               	movlb	1	; select bank1
 11227  09C7  01BD               	clrf	_prox^(0+128)
 11228  09C8  0ABD               	incf	_prox^(0+128),f
 11229                           
 11230                           ;main.c: 287:         return 1;
 11231  09C9  3001               	movlw	1
 11232  09CA  0008               	return
 11233  09CB                     l7374:	
 11234                           
 11235                           ;main.c: 290:         prox = 0;
 11236  09CB  0021               	movlb	1	; select bank1
 11237  09CC  01BD               	clrf	_prox^(0+128)
 11238                           
 11239                           ;main.c: 291:         return 0;
 11240  09CD  3000               	movlw	0
 11241  09CE  0008               	return
 11242  09CF                     __end_of_PIR_Sensor:	
 11243                           
 11244                           	psect	text58
 11245  0F3E                     __ptext58:	
 11246 ;; *************** function _On_Off *****************
 11247 ;; Defined at:
 11248 ;;		line 260 in file "main.c"
 11249 ;; Parameters:    Size  Location     Type
 11250 ;;		None
 11251 ;; Auto vars:     Size  Location     Type
 11252 ;;  val             2    7[BANK0 ] int 
 11253 ;; Return value:  Size  Location     Type
 11254 ;;                  1    wreg      _Bool 
 11255 ;; Registers used:
 11256 ;;		wreg, status,2, status,0, pclath, cstack
 11257 ;; Tracked objects:
 11258 ;;		On entry : 0/0
 11259 ;;		On exit  : 0/0
 11260 ;;		Unchanged: 0/0
 11261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11262 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11263 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11264 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11265 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11266 ;;Total ram usage:        5 bytes
 11267 ;; Hardware stack levels used:    1
 11268 ;; Hardware stack levels required when called:    6
 11269 ;; This function calls:
 11270 ;;		_ADC_GetConversion
 11271 ;; This function is called by:
 11272 ;;		_main
 11273 ;; This function uses a non-reentrant model
 11274 ;;
 11275                           
 11276                           
 11277                           ;psect for function _On_Off
 11278  0F3E                     _On_Off:	
 11279                           
 11280                           ;main.c: 261:     adcResult = ADC_GetConversion(BTN) >> 6;
 11281                           
 11282                           ;incstack = 0
 11283                           ; Regs used in _On_Off: [wreg+status,2+status,0+pclath+cstack]
 11284  0F3E  3017               	movlw	23
 11285  0F3F  318B  2366  318F   	fcall	_ADC_GetConversion
 11286  0F42  0020               	movlb	0	; select bank0
 11287  0F43  0820               	movf	?_ADC_GetConversion,w
 11288  0F44  00A4               	movwf	??_On_Off
 11289  0F45  0821               	movf	?_ADC_GetConversion+1,w
 11290  0F46  00A5               	movwf	??_On_Off+1
 11291  0F47  3006               	movlw	6
 11292  0F48                     u6405:	
 11293  0F48  36A5               	lsrf	??_On_Off+1,f
 11294  0F49  0CA4               	rrf	??_On_Off,f
 11295  0F4A  0B89               	decfsz	9,f
 11296  0F4B  2F48               	goto	u6405
 11297  0F4C  0824               	movf	??_On_Off,w
 11298  0F4D  00A6               	movwf	??_On_Off+2
 11299  0F4E  0826               	movf	??_On_Off+2,w
 11300  0F4F  0021               	movlb	1	; select bank1
 11301  0F50  00BE               	movwf	_adcResult^(0+128)
 11302                           
 11303                           ;main.c: 262:     int val = adcResult;
 11304  0F51  083E               	movf	_adcResult^(0+128),w
 11305  0F52  0020               	movlb	0	; select bank0
 11306  0F53  00A4               	movwf	??_On_Off
 11307  0F54  01A5               	clrf	??_On_Off+1
 11308  0F55  0824               	movf	??_On_Off,w
 11309  0F56  00A7               	movwf	On_Off@val
 11310  0F57  0825               	movf	??_On_Off+1,w
 11311  0F58  00A8               	movwf	On_Off@val+1
 11312                           
 11313                           ;main.c: 263:     if(val >= 10 && val <= 20) {
 11314  0F59  0828               	movf	On_Off@val+1,w
 11315  0F5A  3A80               	xorlw	128
 11316  0F5B  00A4               	movwf	??_On_Off
 11317  0F5C  3080               	movlw	128
 11318  0F5D  0224               	subwf	??_On_Off,w
 11319  0F5E  1D03               	skipz
 11320  0F5F  2F62               	goto	u6415
 11321  0F60  300A               	movlw	10
 11322  0F61  0227               	subwf	On_Off@val,w
 11323  0F62                     u6415:	
 11324  0F62  1C03               	skipc
 11325  0F63  2F78               	goto	l7360
 11326  0F64  0020               	movlb	0	; select bank0
 11327  0F65  0828               	movf	On_Off@val+1,w
 11328  0F66  3A80               	xorlw	128
 11329  0F67  00A4               	movwf	??_On_Off
 11330  0F68  3080               	movlw	128
 11331  0F69  0224               	subwf	??_On_Off,w
 11332  0F6A  1D03               	skipz
 11333  0F6B  2F6E               	goto	u6425
 11334  0F6C  3015               	movlw	21
 11335  0F6D  0227               	subwf	On_Off@val,w
 11336  0F6E                     u6425:	
 11337  0F6E  1803               	skipnc
 11338  0F6F  2F78               	goto	l7360
 11339                           
 11340                           ;main.c: 264:         if(on == 0) {
 11341  0F70  0021               	movlb	1	; select bank1
 11342  0F71  086C               	movf	_on^(0+128),w
 11343  0F72  1D03               	btfss	3,2
 11344  0F73  2F77               	goto	l7358
 11345                           
 11346                           ;main.c: 265:             on = 1;
 11347  0F74  01EC               	clrf	_on^(0+128)
 11348  0F75  0AEC               	incf	_on^(0+128),f
 11349                           
 11350                           ;main.c: 266:         }
 11351  0F76  2F78               	goto	l7360
 11352  0F77                     l7358:	
 11353                           
 11354                           ;main.c: 268:             on = 0;
 11355  0F77  01EC               	clrf	_on^(0+128)
 11356  0F78                     l7360:	
 11357                           
 11358                           ;main.c: 271:     return on;
 11359  0F78  0021               	movlb	1	; select bank1
 11360  0F79  086C               	movf	_on^(0+128),w
 11361  0F7A  0008               	return
 11362  0F7B                     __end_of_On_Off:	
 11363                           
 11364                           	psect	text59
 11365  0DAA                     __ptext59:	
 11366 ;; *************** function _Get_ADC *****************
 11367 ;; Defined at:
 11368 ;;		line 218 in file "main.c"
 11369 ;; Parameters:    Size  Location     Type
 11370 ;;		None
 11371 ;; Auto vars:     Size  Location     Type
 11372 ;;  string1        12   19[BANK1 ] unsigned char [12]
 11373 ;;  val             2    0        int 
 11374 ;; Return value:  Size  Location     Type
 11375 ;;                  1    wreg      void 
 11376 ;; Registers used:
 11377 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11378 ;; Tracked objects:
 11379 ;;		On entry : 0/0
 11380 ;;		On exit  : 0/0
 11381 ;;		Unchanged: 0/0
 11382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11383 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11384 ;;      Locals:         0       0      14       0       0       0       0       0       0       0       0       0       
      +0       0
 11385 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
 11386 ;;      Totals:         0       0      17       0       0       0       0       0       0       0       0       0       
      +0       0
 11387 ;;Total ram usage:       17 bytes
 11388 ;; Hardware stack levels used:    1
 11389 ;; Hardware stack levels required when called:   14
 11390 ;; This function calls:
 11391 ;;		_ADC_GetConversion
 11392 ;;		_Display_Name
 11393 ;;		_sprintf
 11394 ;; This function is called by:
 11395 ;;		_main
 11396 ;; This function uses a non-reentrant model
 11397 ;;
 11398                           
 11399                           
 11400                           ;psect for function _Get_ADC
 11401  0DAA                     _Get_ADC:	
 11402                           
 11403                           ;main.c: 219:     adcResult = ADC_GetConversion(BTN) >> 6;
 11404                           
 11405                           ;incstack = 0
 11406                           ; Regs used in _Get_ADC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11407  0DAA  3017               	movlw	23
 11408  0DAB  318B  2366  318D   	fcall	_ADC_GetConversion
 11409  0DAE  0020               	movlb	0	; select bank0
 11410  0DAF  0820               	movf	?_ADC_GetConversion,w
 11411  0DB0  0021               	movlb	1	; select bank1
 11412  0DB1  00D5               	movwf	??_Get_ADC^(0+128)
 11413  0DB2  0020               	movlb	0	; select bank0
 11414  0DB3  0821               	movf	?_ADC_GetConversion+1,w
 11415  0DB4  0021               	movlb	1	; select bank1
 11416  0DB5  00D6               	movwf	(??_Get_ADC^(0+128)+1)
 11417  0DB6  3006               	movlw	6
 11418  0DB7                     u6775:	
 11419  0DB7  36D6               	lsrf	(??_Get_ADC^(0+128)+1),f
 11420  0DB8  0CD5               	rrf	??_Get_ADC^(0+128),f
 11421  0DB9  0B89               	decfsz	9,f
 11422  0DBA  2DB7               	goto	u6775
 11423  0DBB  0855               	movf	??_Get_ADC^(0+128),w
 11424  0DBC  00D7               	movwf	(??_Get_ADC+2)^(0+128)
 11425  0DBD  0857               	movf	(??_Get_ADC+2)^(0+128),w
 11426  0DBE  00BE               	movwf	_adcResult^(0+128)
 11427                           
 11428                           ;main.c: 222:    sprintf(string1, "%d", adcResult);
 11429  0DBF  3054               	movlw	low (STR_5| (0+32768))
 11430  0DC0  00C8               	movwf	sprintf@fmt^(0+128)
 11431  0DC1  3090               	movlw	high (STR_5| (0+32768))
 11432  0DC2  00C9               	movwf	(sprintf@fmt^(0+128)+1)
 11433  0DC3  083E               	movf	_adcResult^(0+128),w
 11434  0DC4  00D5               	movwf	??_Get_ADC^(0+128)
 11435  0DC5  01D6               	clrf	(??_Get_ADC^(0+128)+1)
 11436  0DC6  0855               	movf	??_Get_ADC^(0+128),w
 11437  0DC7  00CA               	movwf	(?_sprintf^(0+128)+2)
 11438  0DC8  0856               	movf	(??_Get_ADC+1)^(0+128),w
 11439  0DC9  00CB               	movwf	((?_sprintf+1)^(0+128)+2)
 11440  0DCA  30D8               	movlw	(low (Get_ADC@string1| 0))& (0+255)
 11441  0DCB  318D  252A  318D   	fcall	_sprintf
 11442                           
 11443                           ;main.c: 223:     Display_Name(string1);
 11444  0DCE  30D8               	movlw	low Get_ADC@string1
 11445  0DCF  0020               	movlb	0	; select bank0
 11446  0DD0  00A5               	movwf	Display_Name@string1
 11447  0DD1  3000               	movlw	high Get_ADC@string1
 11448  0DD2  00A6               	movwf	Display_Name@string1+1
 11449  0DD3  318F  277B         	fcall	_Display_Name
 11450  0DD5  0008               	return
 11451  0DD6                     __end_of_Get_ADC:	
 11452                           
 11453                           	psect	text60
 11454  0D2A                     __ptext60:	
 11455 ;; *************** function _sprintf *****************
 11456 ;; Defined at:
 11457 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_sprintf.c"
 11458 ;; Parameters:    Size  Location     Type
 11459 ;;  s               1    wreg     PTR unsigned char 
 11460 ;;		 -> Get_ADC@string1(12), 
 11461 ;;  fmt             2    3[BANK1 ] PTR const unsigned char 
 11462 ;;		 -> STR_9(3), STR_8(3), STR_7(3), STR_6(3), 
 11463 ;;		 -> STR_5(3), 
 11464 ;; Auto vars:     Size  Location     Type
 11465 ;;  s               1   10[BANK1 ] PTR unsigned char 
 11466 ;;		 -> Get_ADC@string1(12), 
 11467 ;;  f               5   11[BANK1 ] struct _IO_FILE
 11468 ;;  ret             2    0        int 
 11469 ;;  ap              1    9[BANK1 ] PTR void [1]
 11470 ;;		 -> ?_sprintf(2), 
 11471 ;; Return value:  Size  Location     Type
 11472 ;;                  2    3[BANK1 ] int 
 11473 ;; Registers used:
 11474 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11475 ;; Tracked objects:
 11476 ;;		On entry : 0/0
 11477 ;;		On exit  : 0/0
 11478 ;;		Unchanged: 0/0
 11479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11480 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 11481 ;;      Locals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0
 11482 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11483 ;;      Totals:         0       1      13       0       0       0       0       0       0       0       0       0       
      +0       0
 11484 ;;Total ram usage:       14 bytes
 11485 ;; Hardware stack levels used:    1
 11486 ;; Hardware stack levels required when called:   13
 11487 ;; This function calls:
 11488 ;;		_vfprintf
 11489 ;; This function is called by:
 11490 ;;		_Get_ADC
 11491 ;;		_UART_Byte
 11492 ;; This function uses a non-reentrant model
 11493 ;;
 11494                           
 11495                           
 11496                           ;psect for function _sprintf
 11497  0D2A                     _sprintf:	
 11498                           
 11499                           ;incstack = 0
 11500                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11501                           ;sprintf@s stored from wreg
 11502  0D2A  0021               	movlb	1	; select bank1
 11503  0D2B  00CF               	movwf	sprintf@s^(0+128)
 11504  0D2C  30CA               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
 11505  0D2D  0020               	movlb	0	; select bank0
 11506  0D2E  00EF               	movwf	??_sprintf
 11507  0D2F  086F               	movf	??_sprintf,w
 11508  0D30  0021               	movlb	1	; select bank1
 11509  0D31  00CE               	movwf	sprintf@ap^(0+128)
 11510  0D32  084F               	movf	sprintf@s^(0+128),w
 11511  0D33  0020               	movlb	0	; select bank0
 11512  0D34  00EF               	movwf	??_sprintf
 11513  0D35  086F               	movf	??_sprintf,w
 11514  0D36  0021               	movlb	1	; select bank1
 11515  0D37  00D0               	movwf	sprintf@f^(0+128)
 11516  0D38  01D1               	clrf	(sprintf@f^(0+128)+1)
 11517  0D39  01D2               	clrf	((sprintf@f+1)^(0+128)+1)
 11518  0D3A  01D3               	clrf	(sprintf@f^(0+128)+3)
 11519  0D3B  01D4               	clrf	((sprintf@f+1)^(0+128)+3)
 11520  0D3C  0849               	movf	(sprintf@fmt+1)^(0+128),w
 11521  0D3D  0020               	movlb	0	; select bank0
 11522  0D3E  00EB               	movwf	vfprintf@fmt+1
 11523  0D3F  0021               	movlb	1	; select bank1
 11524  0D40  0848               	movf	sprintf@fmt^(0+128),w
 11525  0D41  0020               	movlb	0	; select bank0
 11526  0D42  00EA               	movwf	vfprintf@fmt
 11527  0D43  30CE               	movlw	(low (sprintf@ap| 0))& (0+255)
 11528  0D44  00EF               	movwf	??_sprintf
 11529  0D45  086F               	movf	??_sprintf,w
 11530  0D46  00EC               	movwf	vfprintf@ap
 11531  0D47  30D0               	movlw	(low (sprintf@f| 0))& (0+255)
 11532  0D48  318E  2607         	fcall	_vfprintf
 11533  0D4A  0021               	movlb	1	; select bank1
 11534  0D4B  0851               	movf	(sprintf@f^(0+128)+1),w
 11535  0D4C  074F               	addwf	sprintf@s^(0+128),w
 11536  0D4D  0020               	movlb	0	; select bank0
 11537  0D4E  00EF               	movwf	??_sprintf
 11538  0D4F  086F               	movf	??_sprintf,w
 11539  0D50  0086               	movwf	6
 11540  0D51  0187               	clrf	7
 11541  0D52  0181               	clrf	1
 11542  0D53  0008               	return
 11543  0D54                     __end_of_sprintf:	
 11544                           
 11545                           	psect	text61
 11546  0E07                     __ptext61:	
 11547 ;; *************** function _vfprintf *****************
 11548 ;; Defined at:
 11549 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
 11550 ;; Parameters:    Size  Location     Type
 11551 ;;  fp              1    wreg     PTR struct _IO_FILE
 11552 ;;		 -> sprintf@f(5), 
 11553 ;;  fmt             2   74[BANK0 ] PTR const unsigned char 
 11554 ;;		 -> STR_9(3), STR_8(3), STR_7(3), STR_6(3), 
 11555 ;;		 -> STR_5(3), 
 11556 ;;  ap              1   76[BANK0 ] PTR PTR void 
 11557 ;;		 -> sprintf@ap(1), 
 11558 ;; Auto vars:     Size  Location     Type
 11559 ;;  fp              1    0[BANK1 ] PTR struct _IO_FILE
 11560 ;;		 -> sprintf@f(5), 
 11561 ;;  cfmt            2    1[BANK1 ] PTR unsigned char 
 11562 ;;		 -> STR_9(3), STR_8(3), STR_7(3), STR_6(3), 
 11563 ;;		 -> STR_5(3), 
 11564 ;; Return value:  Size  Location     Type
 11565 ;;                  2   74[BANK0 ] int 
 11566 ;; Registers used:
 11567 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11568 ;; Tracked objects:
 11569 ;;		On entry : 0/0
 11570 ;;		On exit  : 0/0
 11571 ;;		Unchanged: 0/0
 11572 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11573 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11574 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
 11575 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11576 ;;      Totals:         0       5       3       0       0       0       0       0       0       0       0       0       
      +0       0
 11577 ;;Total ram usage:        8 bytes
 11578 ;; Hardware stack levels used:    1
 11579 ;; Hardware stack levels required when called:   12
 11580 ;; This function calls:
 11581 ;;		_vfpfcnvrt
 11582 ;; This function is called by:
 11583 ;;		_sprintf
 11584 ;; This function uses a non-reentrant model
 11585 ;;
 11586                           
 11587                           
 11588                           ;psect for function _vfprintf
 11589  0E07                     _vfprintf:	
 11590                           
 11591                           ;incstack = 0
 11592                           ; Regs used in _vfprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11593                           ;vfprintf@fp stored from wreg
 11594  0E07  0021               	movlb	1	; select bank1
 11595  0E08  00C5               	movwf	vfprintf@fp^(0+128)
 11596                           
 11597                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          5\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.05\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
 11598  0E09  0020               	movlb	0	; select bank0
 11599  0E0A  086B               	movf	vfprintf@fmt+1,w
 11600  0E0B  0021               	movlb	1	; select bank1
 11601  0E0C  00C7               	movwf	(vfprintf@cfmt+1)^(0+128)
 11602  0E0D  0020               	movlb	0	; select bank0
 11603  0E0E  086A               	movf	vfprintf@fmt,w
 11604  0E0F  0021               	movlb	1	; select bank1
 11605  0E10  00C6               	movwf	vfprintf@cfmt^(0+128)
 11606                           
 11607                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
 11608  0E11  01A0               	clrf	_nout^(0+128)
 11609  0E12  01A1               	clrf	(_nout+1)^(0+128)
 11610  0E13                     l6888:	
 11611                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
 11612                           
 11613                           
 11614                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
 11615  0E13  0846               	movf	vfprintf@cfmt^(0+128),w
 11616  0E14  0084               	movwf	4
 11617  0E15  0847               	movf	(vfprintf@cfmt+1)^(0+128),w
 11618  0E16  0085               	movwf	5
 11619  0E17  0012               	moviw fsr0++
 11620  0E18  1903               	btfsc	3,2
 11621  0E19  2E31               	goto	l6890
 11622                           
 11623                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
 11624  0E1A  30C6               	movlw	(low (vfprintf@cfmt| 0))& (0+255)
 11625  0E1B  0020               	movlb	0	; select bank0
 11626  0E1C  00ED               	movwf	??_vfprintf
 11627  0E1D  086D               	movf	??_vfprintf,w
 11628  0E1E  00DA               	movwf	vfpfcnvrt@fmt
 11629  0E1F  086C               	movf	vfprintf@ap,w
 11630  0E20  00EE               	movwf	??_vfprintf+1
 11631  0E21  086E               	movf	??_vfprintf+1,w
 11632  0E22  00DB               	movwf	vfpfcnvrt@ap
 11633  0E23  0021               	movlb	1	; select bank1
 11634  0E24  0845               	movf	vfprintf@fp^(0+128),w
 11635  0E25  3184  24C0  318E   	fcall	_vfpfcnvrt
 11636  0E28  0020               	movlb	0	; select bank0
 11637  0E29  085A               	movf	?_vfpfcnvrt,w
 11638  0E2A  0021               	movlb	1	; select bank1
 11639  0E2B  07A0               	addwf	_nout^(0+128),f
 11640  0E2C  0020               	movlb	0	; select bank0
 11641  0E2D  085B               	movf	?_vfpfcnvrt+1,w
 11642  0E2E  0021               	movlb	1	; select bank1
 11643  0E2F  3DA1               	addwfc	(_nout+1)^(0+128),f
 11644  0E30  2E13               	goto	l6888
 11645  0E31                     l6890:	
 11646                           
 11647                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
 11648  0E31  0821               	movf	(_nout+1)^(0+128),w
 11649  0E32  0020               	movlb	0	; select bank0
 11650  0E33  00EB               	movwf	?_vfprintf+1
 11651  0E34  0021               	movlb	1	; select bank1
 11652  0E35  0820               	movf	_nout^(0+128),w
 11653  0E36  0020               	movlb	0	; select bank0
 11654  0E37  00EA               	movwf	?_vfprintf
 11655  0E38  0008               	return
 11656  0E39                     __end_of_vfprintf:	
 11657                           
 11658                           	psect	text62
 11659  04C0                     __ptext62:	
 11660 ;; *************** function _vfpfcnvrt *****************
 11661 ;; Defined at:
 11662 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
 11663 ;; Parameters:    Size  Location     Type
 11664 ;;  fp              1    wreg     PTR struct _IO_FILE
 11665 ;;		 -> sprintf@f(5), 
 11666 ;;  fmt             1   58[BANK0 ] PTR PTR unsigned char 
 11667 ;;		 -> vfprintf@cfmt(2), 
 11668 ;;  ap              1   59[BANK0 ] PTR PTR void 
 11669 ;;		 -> sprintf@ap(1), 
 11670 ;; Auto vars:     Size  Location     Type
 11671 ;;  fp              1   73[BANK0 ] PTR struct _IO_FILE
 11672 ;;		 -> sprintf@f(5), 
 11673 ;;  ll              8   65[BANK0 ] long long 
 11674 ;;  llu             8    0        unsigned long long 
 11675 ;;  f               4    0        unsigned long long 
 11676 ;;  ct              3    0        unsigned char [3]
 11677 ;;  vp              2    0        PTR void 
 11678 ;;  i               2    0        int 
 11679 ;;  done            2    0        int 
 11680 ;;  cp              2    0        PTR unsigned char 
 11681 ;;  c               1    0        unsigned char 
 11682 ;; Return value:  Size  Location     Type
 11683 ;;                  2   58[BANK0 ] int 
 11684 ;; Registers used:
 11685 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11686 ;; Tracked objects:
 11687 ;;		On entry : 0/0
 11688 ;;		On exit  : 0/0
 11689 ;;		Unchanged: 0/0
 11690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11691 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11692 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11693 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11694 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11695 ;;Total ram usage:       16 bytes
 11696 ;; Hardware stack levels used:    1
 11697 ;; Hardware stack levels required when called:   11
 11698 ;; This function calls:
 11699 ;;		_dtoa
 11700 ;;		_fputc
 11701 ;; This function is called by:
 11702 ;;		_vfprintf
 11703 ;; This function uses a non-reentrant model
 11704 ;;
 11705                           
 11706                           
 11707                           ;psect for function _vfpfcnvrt
 11708  04C0                     _vfpfcnvrt:	
 11709                           
 11710                           ;incstack = 0
 11711                           ; Regs used in _vfpfcnvrt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11712                           ;vfpfcnvrt@fp stored from wreg
 11713  04C0  0020               	movlb	0	; select bank0
 11714  04C1  00E9               	movwf	vfpfcnvrt@fp
 11715                           
 11716                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.05\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.05\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 674:     long long ll;
 11717  04C2  085A               	movf	vfpfcnvrt@fmt,w
 11718  04C3  0086               	movwf	6
 11719  04C4  0187               	clrf	7
 11720  04C5  3F40               	moviw [0]fsr1
 11721  04C6  00DC               	movwf	??_vfpfcnvrt
 11722  04C7  3F41               	moviw [1]fsr1
 11723  04C8  00DD               	movwf	??_vfpfcnvrt+1
 11724  04C9  085C               	movf	??_vfpfcnvrt,w
 11725  04CA  0084               	movwf	4
 11726  04CB  085D               	movf	??_vfpfcnvrt+1,w
 11727  04CC  0085               	movwf	5
 11728  04CD  0012               	moviw fsr0++
 11729  04CE  3A25               	xorlw	37
 11730  04CF  1D03               	btfss	3,2
 11731  04D0  2D6D               	goto	l6818
 11732                           
 11733                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
 11734  04D1  085A               	movf	vfpfcnvrt@fmt,w
 11735  04D2  0086               	movwf	6
 11736  04D3  0187               	clrf	7
 11737  04D4  3001               	movlw	1
 11738  04D5  0781               	addwf	1,f
 11739  04D6  3141               	addfsr 1,1
 11740  04D7  1803               	skipnc
 11741  04D8  0A81               	incf	1,f
 11742                           
 11743                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
 11744  04D9  0021               	movlb	1	; select bank1
 11745  04DA  01A2               	clrf	_width^(0+128)
 11746  04DB  01A3               	clrf	(_width+1)^(0+128)
 11747  04DC  01A6               	clrf	_flags^(0+128)
 11748  04DD  01A7               	clrf	(_flags+1)^(0+128)
 11749                           
 11750                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
 11751  04DE  30FF               	movlw	255
 11752  04DF  00A4               	movwf	_prec^(0+128)
 11753  04E0  30FF               	movlw	255
 11754  04E1  00A5               	movwf	(_prec^(0+128)+1)
 11755                           
 11756                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 825:       
      +                            if ((*fmt[0] == 'd') || (*fmt[0] == 'i')) {
 11757  04E2  0020               	movlb	0	; select bank0
 11758  04E3  085A               	movf	vfpfcnvrt@fmt,w
 11759  04E4  0086               	movwf	6
 11760  04E5  0187               	clrf	7
 11761  04E6  3F40               	moviw [0]fsr1
 11762  04E7  00DC               	movwf	??_vfpfcnvrt
 11763  04E8  3F41               	moviw [1]fsr1
 11764  04E9  00DD               	movwf	??_vfpfcnvrt+1
 11765  04EA  085C               	movf	??_vfpfcnvrt,w
 11766  04EB  0084               	movwf	4
 11767  04EC  085D               	movf	??_vfpfcnvrt+1,w
 11768  04ED  0085               	movwf	5
 11769  04EE  0012               	moviw fsr0++
 11770  04EF  3A64               	xorlw	100
 11771  04F0  1903               	btfsc	3,2
 11772  04F1  2D01               	goto	l6794
 11773  04F2  085A               	movf	vfpfcnvrt@fmt,w
 11774  04F3  0086               	movwf	6
 11775  04F4  0187               	clrf	7
 11776  04F5  3F40               	moviw [0]fsr1
 11777  04F6  00DC               	movwf	??_vfpfcnvrt
 11778  04F7  3F41               	moviw [1]fsr1
 11779  04F8  00DD               	movwf	??_vfpfcnvrt+1
 11780  04F9  085C               	movf	??_vfpfcnvrt,w
 11781  04FA  0084               	movwf	4
 11782  04FB  085D               	movf	??_vfpfcnvrt+1,w
 11783  04FC  0085               	movwf	5
 11784  04FD  0012               	moviw fsr0++
 11785  04FE  3A69               	xorlw	105
 11786  04FF  1D03               	btfss	3,2
 11787  0500  2D3B               	goto	l6802
 11788  0501                     l6794:	
 11789                           
 11790                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 827:       
      +                                ++*fmt;
 11791  0501  085A               	movf	vfpfcnvrt@fmt,w
 11792  0502  0086               	movwf	6
 11793  0503  0187               	clrf	7
 11794  0504  3001               	movlw	1
 11795  0505  0781               	addwf	1,f
 11796  0506  3141               	addfsr 1,1
 11797  0507  1803               	skipnc
 11798  0508  0A81               	incf	1,f
 11799                           
 11800                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 828:       
      +                                ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
 11801  0509  085B               	movf	vfpfcnvrt@ap,w
 11802  050A  0086               	movwf	6
 11803  050B  0187               	clrf	7
 11804  050C  0801               	movf	1,w
 11805  050D  0084               	movwf	4
 11806  050E  0185               	clrf	5
 11807  050F  3002               	movlw	2
 11808  0510  0781               	addwf	1,f
 11809  0511  3F00               	moviw [0]fsr0
 11810  0512  00DC               	movwf	??_vfpfcnvrt
 11811  0513  3F01               	moviw [1]fsr0
 11812  0514  00DD               	movwf	??_vfpfcnvrt+1
 11813  0515  085C               	movf	??_vfpfcnvrt,w
 11814  0516  00E1               	movwf	vfpfcnvrt@ll
 11815  0517  085D               	movf	??_vfpfcnvrt+1,w
 11816  0518  00E2               	movwf	vfpfcnvrt@ll+1
 11817  0519  0D89               	rlf	9,f
 11818  051A  3B89               	subwfb	9,f
 11819  051B  0989               	comf	9,f
 11820  051C  00E3               	movwf	vfpfcnvrt@ll+2
 11821  051D  00E4               	movwf	vfpfcnvrt@ll+3
 11822  051E  00E5               	movwf	vfpfcnvrt@ll+4
 11823  051F  00E6               	movwf	vfpfcnvrt@ll+5
 11824  0520  00E7               	movwf	vfpfcnvrt@ll+6
 11825  0521  00E8               	movwf	vfpfcnvrt@ll+7
 11826                           
 11827                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 830:       
      +                                return dtoa(fp, ll);
 11828  0522  0861               	movf	vfpfcnvrt@ll,w
 11829  0523  00BC               	movwf	dtoa@d
 11830  0524  0862               	movf	vfpfcnvrt@ll+1,w
 11831  0525  00BD               	movwf	dtoa@d+1
 11832  0526  0863               	movf	vfpfcnvrt@ll+2,w
 11833  0527  00BE               	movwf	dtoa@d+2
 11834  0528  0864               	movf	vfpfcnvrt@ll+3,w
 11835  0529  00BF               	movwf	dtoa@d+3
 11836  052A  0865               	movf	vfpfcnvrt@ll+4,w
 11837  052B  00C0               	movwf	dtoa@d+4
 11838  052C  0866               	movf	vfpfcnvrt@ll+5,w
 11839  052D  00C1               	movwf	dtoa@d+5
 11840  052E  0867               	movf	vfpfcnvrt@ll+6,w
 11841  052F  00C2               	movwf	dtoa@d+6
 11842  0530  0868               	movf	vfpfcnvrt@ll+7,w
 11843  0531  00C3               	movwf	dtoa@d+7
 11844  0532  0869               	movf	vfpfcnvrt@fp,w
 11845  0533  3180  208A         	fcall	_dtoa
 11846  0535  0020               	movlb	0	; select bank0
 11847  0536  083D               	movf	?_dtoa+1,w
 11848  0537  00DB               	movwf	?_vfpfcnvrt+1
 11849  0538  083C               	movf	?_dtoa,w
 11850  0539  00DA               	movwf	?_vfpfcnvrt
 11851  053A  0008               	return
 11852  053B                     l6802:	
 11853                           
 11854                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
 11855  053B  085A               	movf	vfpfcnvrt@fmt,w
 11856  053C  0086               	movwf	6
 11857  053D  0187               	clrf	7
 11858  053E  3F40               	moviw [0]fsr1
 11859  053F  00DC               	movwf	??_vfpfcnvrt
 11860  0540  3F41               	moviw [1]fsr1
 11861  0541  00DD               	movwf	??_vfpfcnvrt+1
 11862  0542  085C               	movf	??_vfpfcnvrt,w
 11863  0543  0084               	movwf	4
 11864  0544  085D               	movf	??_vfpfcnvrt+1,w
 11865  0545  0085               	movwf	5
 11866  0546  0012               	moviw fsr0++
 11867  0547  3A25               	xorlw	37
 11868  0548  1D03               	btfss	3,2
 11869  0549  2D62               	goto	l6812
 11870                           
 11871                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
 11872  054A  085A               	movf	vfpfcnvrt@fmt,w
 11873  054B  0086               	movwf	6
 11874  054C  0187               	clrf	7
 11875  054D  3001               	movlw	1
 11876  054E  0781               	addwf	1,f
 11877  054F  3141               	addfsr 1,1
 11878  0550  1803               	skipnc
 11879  0551  0A81               	incf	1,f
 11880                           
 11881                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
 11882  0552  3025               	movlw	37
 11883  0553  00A3               	movwf	fputc@c
 11884  0554  3000               	movlw	0
 11885  0555  00A4               	movwf	fputc@c+1
 11886  0556  0869               	movf	vfpfcnvrt@fp,w
 11887  0557  00DC               	movwf	??_vfpfcnvrt
 11888  0558  085C               	movf	??_vfpfcnvrt,w
 11889  0559  00A5               	movwf	fputc@fp
 11890  055A  3187  2745         	fcall	_fputc
 11891  055C                     l6808:	
 11892                           
 11893                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
 11894  055C  3001               	movlw	1
 11895  055D  0020               	movlb	0	; select bank0
 11896  055E  00DA               	movwf	?_vfpfcnvrt
 11897  055F  3000               	movlw	0
 11898  0560  00DB               	movwf	?_vfpfcnvrt+1
 11899  0561  0008               	return
 11900  0562                     l6812:	
 11901                           
 11902                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
 11903  0562  085A               	movf	vfpfcnvrt@fmt,w
 11904  0563  0086               	movwf	6
 11905  0564  0187               	clrf	7
 11906  0565  3001               	movlw	1
 11907  0566  0781               	addwf	1,f
 11908  0567  3141               	addfsr 1,1
 11909  0568  1803               	skipnc
 11910  0569  0A81               	incf	1,f
 11911                           
 11912                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
 11913  056A  01DA               	clrf	?_vfpfcnvrt
 11914  056B  01DB               	clrf	?_vfpfcnvrt+1
 11915  056C  0008               	return
 11916  056D                     l6818:	
 11917                           
 11918                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
 11919  056D  085A               	movf	vfpfcnvrt@fmt,w
 11920  056E  0086               	movwf	6
 11921  056F  0187               	clrf	7
 11922  0570  3F40               	moviw [0]fsr1
 11923  0571  00DC               	movwf	??_vfpfcnvrt
 11924  0572  3F41               	moviw [1]fsr1
 11925  0573  00DD               	movwf	??_vfpfcnvrt+1
 11926  0574  085C               	movf	??_vfpfcnvrt,w
 11927  0575  0084               	movwf	4
 11928  0576  085D               	movf	??_vfpfcnvrt+1,w
 11929  0577  0085               	movwf	5
 11930  0578  0800               	movf	0,w	;code access
 11931  0579  00DE               	movwf	??_vfpfcnvrt+2
 11932  057A  01DF               	clrf	??_vfpfcnvrt+3
 11933  057B  085E               	movf	??_vfpfcnvrt+2,w
 11934  057C  00A3               	movwf	fputc@c
 11935  057D  085F               	movf	??_vfpfcnvrt+3,w
 11936  057E  00A4               	movwf	fputc@c+1
 11937  057F  0869               	movf	vfpfcnvrt@fp,w
 11938  0580  00E0               	movwf	??_vfpfcnvrt+4
 11939  0581  0860               	movf	??_vfpfcnvrt+4,w
 11940  0582  00A5               	movwf	fputc@fp
 11941  0583  3187  2745  3184   	fcall	_fputc
 11942                           
 11943                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
 11944  0586  0020               	movlb	0	; select bank0
 11945  0587  085A               	movf	vfpfcnvrt@fmt,w
 11946  0588  0086               	movwf	6
 11947  0589  0187               	clrf	7
 11948  058A  3001               	movlw	1
 11949  058B  0781               	addwf	1,f
 11950  058C  3141               	addfsr 1,1
 11951  058D  1803               	skipnc
 11952  058E  0A81               	incf	1,f
 11953  058F  2D5C               	goto	l6808
 11954  0590                     __end_of_vfpfcnvrt:	
 11955                           
 11956                           	psect	text63
 11957  008A                     __ptext63:	
 11958 ;; *************** function _dtoa *****************
 11959 ;; Defined at:
 11960 ;;		line 274 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
 11961 ;; Parameters:    Size  Location     Type
 11962 ;;  fp              1    wreg     PTR struct _IO_FILE
 11963 ;;		 -> sprintf@f(5), 
 11964 ;;  d               8   28[BANK0 ] long long 
 11965 ;; Auto vars:     Size  Location     Type
 11966 ;;  fp              1   39[BANK0 ] PTR struct _IO_FILE
 11967 ;;		 -> sprintf@f(5), 
 11968 ;;  n               8   48[BANK0 ] long long 
 11969 ;;  i               2   56[BANK0 ] int 
 11970 ;;  s               2   46[BANK0 ] int 
 11971 ;;  w               2   44[BANK0 ] int 
 11972 ;;  p               2   42[BANK0 ] int 
 11973 ;; Return value:  Size  Location     Type
 11974 ;;                  2   28[BANK0 ] int 
 11975 ;; Registers used:
 11976 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11977 ;; Tracked objects:
 11978 ;;		On entry : 0/0
 11979 ;;		On exit  : 0/0
 11980 ;;		Unchanged: 0/0
 11981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11982 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11983 ;;      Locals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11984 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11985 ;;      Totals:         0      30       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11986 ;;Total ram usage:       30 bytes
 11987 ;; Hardware stack levels used:    1
 11988 ;; Hardware stack levels required when called:   10
 11989 ;; This function calls:
 11990 ;;		___aodiv
 11991 ;;		___aomod
 11992 ;;		_abs
 11993 ;;		_pad
 11994 ;; This function is called by:
 11995 ;;		_vfpfcnvrt
 11996 ;; This function uses a non-reentrant model
 11997 ;;
 11998                           
 11999                           
 12000                           ;psect for function _dtoa
 12001  008A                     _dtoa:	
 12002                           
 12003                           ;incstack = 0
 12004                           ; Regs used in _dtoa: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12005                           ;dtoa@fp stored from wreg
 12006  008A  0020               	movlb	0	; select bank0
 12007  008B  00C7               	movwf	dtoa@fp
 12008                           
 12009                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 274: static
      +                           int dtoa(FILE *fp, long long d);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\
      +                          c99\common\doprnt.c: 275: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\c
      +                          ommon\doprnt.c: 276:     int i, p, s, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\
      +                          sources\c99\common\doprnt.c: 277:     long long n;;C:\Program Files (x86)\Microchip\xc8\
      +                          v2.05\pic\sources\c99\common\doprnt.c: 280:     n = d;
 12010  008C  083C               	movf	dtoa@d,w
 12011  008D  00D0               	movwf	dtoa@n
 12012  008E  083D               	movf	dtoa@d+1,w
 12013  008F  00D1               	movwf	dtoa@n+1
 12014  0090  083E               	movf	dtoa@d+2,w
 12015  0091  00D2               	movwf	dtoa@n+2
 12016  0092  083F               	movf	dtoa@d+3,w
 12017  0093  00D3               	movwf	dtoa@n+3
 12018  0094  0840               	movf	dtoa@d+4,w
 12019  0095  00D4               	movwf	dtoa@n+4
 12020  0096  0841               	movf	dtoa@d+5,w
 12021  0097  00D5               	movwf	dtoa@n+5
 12022  0098  0842               	movf	dtoa@d+6,w
 12023  0099  00D6               	movwf	dtoa@n+6
 12024  009A  0843               	movf	dtoa@d+7,w
 12025  009B  00D7               	movwf	dtoa@n+7
 12026                           
 12027                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 281:     s 
      +                          = n < 0 ? 1 : 0;
 12028  009C  3050               	movlw	low dtoa@n
 12029  009D  0086               	movwf	6
 12030  009E  3000               	movlw	high dtoa@n
 12031  009F  0087               	movwf	7
 12032  00A0  3F47               	moviw [7]fsr1
 12033  00A1  00C4               	movwf	??_dtoa
 12034  00A2  1FC4               	btfss	??_dtoa,7
 12035  00A3  28A6               	goto	u5830
 12036  00A4  3001               	movlw	1
 12037  00A5  28A7               	goto	u5840
 12038  00A6                     u5830:	
 12039  00A6  3000               	movlw	0
 12040  00A7                     u5840:	
 12041  00A7  0020               	movlb	0	; select bank0
 12042  00A8  00C5               	movwf	??_dtoa+1
 12043  00A9  01C6               	clrf	??_dtoa+2
 12044  00AA  0845               	movf	??_dtoa+1,w
 12045  00AB  00CE               	movwf	dtoa@s
 12046  00AC  0846               	movf	??_dtoa+2,w
 12047  00AD  00CF               	movwf	dtoa@s+1
 12048                           
 12049                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 282:     if
      +                           (s) {
 12050  00AE  084E               	movf	dtoa@s,w
 12051  00AF  044F               	iorwf	dtoa@s+1,w
 12052  00B0  1903               	btfsc	3,2
 12053  00B1  28D0               	goto	l1608
 12054                           
 12055                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 283:       
      +                            n = -n;
 12056  00B2  09D0               	comf	dtoa@n,f
 12057  00B3  09D1               	comf	dtoa@n+1,f
 12058  00B4  09D2               	comf	dtoa@n+2,f
 12059  00B5  09D3               	comf	dtoa@n+3,f
 12060  00B6  09D4               	comf	dtoa@n+4,f
 12061  00B7  09D5               	comf	dtoa@n+5,f
 12062  00B8  09D6               	comf	dtoa@n+6,f
 12063  00B9  09D7               	comf	dtoa@n+7,f
 12064  00BA  0AD0               	incf	dtoa@n,f
 12065  00BB  1D03               	skipz
 12066  00BC  28D0               	goto	l1608
 12067  00BD  0AD1               	incf	dtoa@n+1,f
 12068  00BE  1D03               	skipz
 12069  00BF  28D0               	goto	l1608
 12070  00C0  0AD2               	incf	dtoa@n+2,f
 12071  00C1  1D03               	skipz
 12072  00C2  28D0               	goto	l1608
 12073  00C3  0AD3               	incf	dtoa@n+3,f
 12074  00C4  1D03               	skipz
 12075  00C5  28D0               	goto	l1608
 12076  00C6  0AD4               	incf	dtoa@n+4,f
 12077  00C7  1D03               	skipz
 12078  00C8  28D0               	goto	l1608
 12079  00C9  0AD5               	incf	dtoa@n+5,f
 12080  00CA  1D03               	skipz
 12081  00CB  28D0               	goto	l1608
 12082  00CC  0AD6               	incf	dtoa@n+6,f
 12083  00CD  1D03               	skipz
 12084  00CE  28D0               	goto	l1608
 12085  00CF  0AD7               	incf	dtoa@n+7,f
 12086  00D0                     l1608:	
 12087                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 284:     }
 12088                           
 12089                           
 12090                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 287:     if
      +                           (!(prec < 0)) {
 12091  00D0  0021               	movlb	1	; select bank1
 12092  00D1  1BA5               	btfsc	(_prec+1)^(0+128),7
 12093  00D2  28D7               	goto	l1609
 12094                           
 12095                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 288:       
      +                            flags &= ~(1 << 1);
 12096  00D3  30FD               	movlw	253
 12097  00D4  05A6               	andwf	_flags^(0+128),f
 12098  00D5  30FF               	movlw	255
 12099  00D6  05A7               	andwf	(_flags+1)^(0+128),f
 12100  00D7                     l1609:	
 12101                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 289:     }
 12102                           
 12103                           
 12104                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 290:     p 
      +                          = (0 < prec) ? prec : 1;
 12105  00D7  0825               	movf	(_prec+1)^(0+128),w
 12106  00D8  3A80               	xorlw	128
 12107  00D9  0020               	movlb	0	; select bank0
 12108  00DA  00C4               	movwf	??_dtoa
 12109  00DB  3080               	movlw	128
 12110  00DC  0244               	subwf	??_dtoa,w
 12111  00DD  1D03               	skipz
 12112  00DE  28E2               	goto	u5885
 12113  00DF  3001               	movlw	1
 12114  00E0  0021               	movlb	1	; select bank1
 12115  00E1  0224               	subwf	_prec^(0+128),w
 12116  00E2                     u5885:	
 12117  00E2  1803               	skipnc
 12118  00E3  28EA               	goto	l6708
 12119  00E4  3001               	movlw	1
 12120  00E5  0020               	movlb	0	; select bank0
 12121  00E6  00CA               	movwf	dtoa@p
 12122  00E7  3000               	movlw	0
 12123  00E8  00CB               	movwf	dtoa@p+1
 12124  00E9  28F2               	goto	l1613
 12125  00EA                     l6708:	
 12126  00EA  0021               	movlb	1	; select bank1
 12127  00EB  0825               	movf	(_prec+1)^(0+128),w
 12128  00EC  0020               	movlb	0	; select bank0
 12129  00ED  00CB               	movwf	dtoa@p+1
 12130  00EE  0021               	movlb	1	; select bank1
 12131  00EF  0824               	movf	_prec^(0+128),w
 12132  00F0  0020               	movlb	0	; select bank0
 12133  00F1  00CA               	movwf	dtoa@p
 12134  00F2                     l1613:	
 12135                           
 12136                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 291:     w 
      +                          = width;
 12137  00F2  0021               	movlb	1	; select bank1
 12138  00F3  0823               	movf	(_width+1)^(0+128),w
 12139  00F4  0020               	movlb	0	; select bank0
 12140  00F5  00CD               	movwf	dtoa@w+1
 12141  00F6  0021               	movlb	1	; select bank1
 12142  00F7  0822               	movf	_width^(0+128),w
 12143  00F8  0020               	movlb	0	; select bank0
 12144  00F9  00CC               	movwf	dtoa@w
 12145                           
 12146                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 292:     if
      +                           (s || (flags & (1 << 2))) {
 12147  00FA  084E               	movf	dtoa@s,w
 12148  00FB  044F               	iorwf	dtoa@s+1,w
 12149  00FC  1D03               	btfss	3,2
 12150  00FD  2901               	goto	l6714
 12151  00FE  0021               	movlb	1	; select bank1
 12152  00FF  1D26               	btfss	_flags^(0+128),2
 12153  0100  2906               	goto	l1614
 12154  0101                     l6714:	
 12155                           
 12156                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 293:       
      +                            --w;
 12157  0101  30FF               	movlw	255
 12158  0102  0020               	movlb	0	; select bank0
 12159  0103  07CC               	addwf	dtoa@w,f
 12160  0104  30FF               	movlw	255
 12161  0105  3DCD               	addwfc	dtoa@w+1,f
 12162  0106                     l1614:	
 12163                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 294:     }
 12164                           
 12165                           
 12166                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 297:     i 
      +                          = sizeof(dbuf) - 1;
 12167  0106  301F               	movlw	31
 12168  0107  0020               	movlb	0	; select bank0
 12169  0108  00D8               	movwf	dtoa@i
 12170  0109  3000               	movlw	0
 12171  010A  00D9               	movwf	dtoa@i+1
 12172                           
 12173                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 298:     db
      +                          uf[i] = '\0';
 12174  010B  0024               	movlb	4	; select bank4
 12175  010C  01BF               	clrf	(_dbuf^(0+512)+31)
 12176                           
 12177                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
 12178  010D  299C               	goto	l1617
 12179  010E                     l6728:	
 12180  010E  0020               	movlb	0	; select bank0
 12181  010F  0850               	movf	dtoa@n,w
 12182  0110  0451               	iorwf	dtoa@n+1,w
 12183  0111  0452               	iorwf	dtoa@n+2,w
 12184  0112  0453               	iorwf	dtoa@n+3,w
 12185  0113  0454               	iorwf	dtoa@n+4,w
 12186  0114  0455               	iorwf	dtoa@n+5,w
 12187  0115  0456               	iorwf	dtoa@n+6,w
 12188  0116  0457               	iorwf	dtoa@n+7,w
 12189  0117  1D03               	skipz
 12190  0118  2933               	goto	l6718
 12191  0119  084B               	movf	dtoa@p+1,w
 12192  011A  3A80               	xorlw	128
 12193  011B  00C4               	movwf	??_dtoa
 12194  011C  3080               	movlw	128
 12195  011D  0244               	subwf	??_dtoa,w
 12196  011E  1D03               	skipz
 12197  011F  2922               	goto	u5935
 12198  0120  3001               	movlw	1
 12199  0121  024A               	subwf	dtoa@p,w
 12200  0122                     u5935:	
 12201  0122  1803               	skipnc
 12202  0123  2933               	goto	l6718
 12203  0124  0020               	movlb	0	; select bank0
 12204  0125  084D               	movf	dtoa@w+1,w
 12205  0126  3A80               	xorlw	128
 12206  0127  00C4               	movwf	??_dtoa
 12207  0128  3080               	movlw	128
 12208  0129  0244               	subwf	??_dtoa,w
 12209  012A  1D03               	skipz
 12210  012B  292E               	goto	u5945
 12211  012C  3001               	movlw	1
 12212  012D  024C               	subwf	dtoa@w,w
 12213  012E                     u5945:	
 12214  012E  1C03               	skipc
 12215  012F  29A8               	goto	l6736
 12216  0130  0021               	movlb	1	; select bank1
 12217  0131  1CA6               	btfss	_flags^(0+128),1
 12218  0132  29A8               	goto	l6736
 12219  0133                     l6718:	
 12220                           
 12221                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 300:       
      +                            --i;
 12222  0133  30FF               	movlw	255
 12223  0134  0020               	movlb	0	; select bank0
 12224  0135  07D8               	addwf	dtoa@i,f
 12225  0136  30FF               	movlw	255
 12226  0137  3DD9               	addwfc	dtoa@i+1,f
 12227                           
 12228                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 301:       
      +                            dbuf[i] = '0' + abs(n % 10);
 12229  0138  300A               	movlw	10
 12230  0139  00A0               	movwf	___aomod@divisor
 12231  013A  01A1               	clrf	___aomod@divisor+1
 12232  013B  01A2               	clrf	___aomod@divisor+2
 12233  013C  01A3               	clrf	___aomod@divisor+3
 12234  013D  01A4               	clrf	___aomod@divisor+4
 12235  013E  01A5               	clrf	___aomod@divisor+5
 12236  013F  01A6               	clrf	___aomod@divisor+6
 12237  0140  01A7               	clrf	___aomod@divisor+7
 12238  0141  0850               	movf	dtoa@n,w
 12239  0142  00A8               	movwf	___aomod@dividend
 12240  0143  0851               	movf	dtoa@n+1,w
 12241  0144  00A9               	movwf	___aomod@dividend+1
 12242  0145  0852               	movf	dtoa@n+2,w
 12243  0146  00AA               	movwf	___aomod@dividend+2
 12244  0147  0853               	movf	dtoa@n+3,w
 12245  0148  00AB               	movwf	___aomod@dividend+3
 12246  0149  0854               	movf	dtoa@n+4,w
 12247  014A  00AC               	movwf	___aomod@dividend+4
 12248  014B  0855               	movf	dtoa@n+5,w
 12249  014C  00AD               	movwf	___aomod@dividend+5
 12250  014D  0856               	movf	dtoa@n+6,w
 12251  014E  00AE               	movwf	___aomod@dividend+6
 12252  014F  0857               	movf	dtoa@n+7,w
 12253  0150  00AF               	movwf	___aomod@dividend+7
 12254  0151  3183  23E1  3180   	fcall	___aomod
 12255  0154  0020               	movlb	0	; select bank0
 12256  0155  0821               	movf	?___aomod+1,w
 12257  0156  00B4               	movwf	abs@a+1
 12258  0157  0820               	movf	?___aomod,w
 12259  0158  00B3               	movwf	abs@a
 12260  0159  318A  22DE  3180   	fcall	_abs
 12261  015C  0020               	movlb	0	; select bank0
 12262  015D  0833               	movf	?_abs,w
 12263  015E  3E30               	addlw	48
 12264  015F  00C4               	movwf	??_dtoa
 12265  0160  0858               	movf	dtoa@i,w
 12266  0161  3E20               	addlw	(low (_dbuf| (0+512)))& (0+255)
 12267  0162  0086               	movwf	6
 12268  0163  3002               	movlw	2	; select bank4/5
 12269  0164  0087               	movwf	7
 12270  0165  0844               	movf	??_dtoa,w
 12271  0166  0081               	movwf	1
 12272                           
 12273                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 302:       
      +                            --p;
 12274  0167  30FF               	movlw	255
 12275  0168  07CA               	addwf	dtoa@p,f
 12276  0169  30FF               	movlw	255
 12277  016A  3DCB               	addwfc	dtoa@p+1,f
 12278                           
 12279                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 303:       
      +                            --w;
 12280  016B  30FF               	movlw	255
 12281  016C  07CC               	addwf	dtoa@w,f
 12282  016D  30FF               	movlw	255
 12283  016E  3DCD               	addwfc	dtoa@w+1,f
 12284                           
 12285                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 304:       
      +                            n = n / 10;
 12286  016F  300A               	movlw	10
 12287  0170  00A0               	movwf	___aodiv@divisor
 12288  0171  01A1               	clrf	___aodiv@divisor+1
 12289  0172  01A2               	clrf	___aodiv@divisor+2
 12290  0173  01A3               	clrf	___aodiv@divisor+3
 12291  0174  01A4               	clrf	___aodiv@divisor+4
 12292  0175  01A5               	clrf	___aodiv@divisor+5
 12293  0176  01A6               	clrf	___aodiv@divisor+6
 12294  0177  01A7               	clrf	___aodiv@divisor+7
 12295  0178  0850               	movf	dtoa@n,w
 12296  0179  00A8               	movwf	___aodiv@dividend
 12297  017A  0851               	movf	dtoa@n+1,w
 12298  017B  00A9               	movwf	___aodiv@dividend+1
 12299  017C  0852               	movf	dtoa@n+2,w
 12300  017D  00AA               	movwf	___aodiv@dividend+2
 12301  017E  0853               	movf	dtoa@n+3,w
 12302  017F  00AB               	movwf	___aodiv@dividend+3
 12303  0180  0854               	movf	dtoa@n+4,w
 12304  0181  00AC               	movwf	___aodiv@dividend+4
 12305  0182  0855               	movf	dtoa@n+5,w
 12306  0183  00AD               	movwf	___aodiv@dividend+5
 12307  0184  0856               	movf	dtoa@n+6,w
 12308  0185  00AE               	movwf	___aodiv@dividend+6
 12309  0186  0857               	movf	dtoa@n+7,w
 12310  0187  00AF               	movwf	___aodiv@dividend+7
 12311  0188  3182  22EA  3180   	fcall	___aodiv
 12312  018B  0020               	movlb	0	; select bank0
 12313  018C  0820               	movf	?___aodiv,w
 12314  018D  00D0               	movwf	dtoa@n
 12315  018E  0821               	movf	?___aodiv+1,w
 12316  018F  00D1               	movwf	dtoa@n+1
 12317  0190  0822               	movf	?___aodiv+2,w
 12318  0191  00D2               	movwf	dtoa@n+2
 12319  0192  0823               	movf	?___aodiv+3,w
 12320  0193  00D3               	movwf	dtoa@n+3
 12321  0194  0824               	movf	?___aodiv+4,w
 12322  0195  00D4               	movwf	dtoa@n+4
 12323  0196  0825               	movf	?___aodiv+5,w
 12324  0197  00D5               	movwf	dtoa@n+5
 12325  0198  0826               	movf	?___aodiv+6,w
 12326  0199  00D6               	movwf	dtoa@n+6
 12327  019A  0827               	movf	?___aodiv+7,w
 12328  019B  00D7               	movwf	dtoa@n+7
 12329  019C                     l1617:	
 12330                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 305:     }
 12331                           
 12332                           
 12333                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
 12334  019C  0020               	movlb	0	; select bank0
 12335  019D  0859               	movf	dtoa@i+1,w
 12336  019E  3A80               	xorlw	128
 12337  019F  00C4               	movwf	??_dtoa
 12338  01A0  3080               	movlw	128
 12339  01A1  0244               	subwf	??_dtoa,w
 12340  01A2  1D03               	skipz
 12341  01A3  29A6               	goto	u5915
 12342  01A4  3001               	movlw	1
 12343  01A5  0258               	subwf	dtoa@i,w
 12344  01A6                     u5915:	
 12345  01A6  1803               	btfsc	3,0
 12346  01A7  290E               	goto	l6728
 12347  01A8                     l6736:	
 12348                           
 12349                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 308:     if
      +                           (s || (flags & (1 << 2))) {
 12350  01A8  0020               	movlb	0	; select bank0
 12351  01A9  084E               	movf	dtoa@s,w
 12352  01AA  044F               	iorwf	dtoa@s+1,w
 12353  01AB  1D03               	btfss	3,2
 12354  01AC  29B0               	goto	l6740
 12355  01AD  0021               	movlb	1	; select bank1
 12356  01AE  1D26               	btfss	_flags^(0+128),2
 12357  01AF  29C8               	goto	l6750
 12358  01B0                     l6740:	
 12359                           
 12360                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 309:       
      +                            --i;
 12361  01B0  30FF               	movlw	255
 12362  01B1  0020               	movlb	0	; select bank0
 12363  01B2  07D8               	addwf	dtoa@i,f
 12364  01B3  30FF               	movlw	255
 12365  01B4  3DD9               	addwfc	dtoa@i+1,f
 12366                           
 12367                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 310:       
      +                            dbuf[i] = s ? '-' : '+';
 12368  01B5  084E               	movf	dtoa@s,w
 12369  01B6  044F               	iorwf	dtoa@s+1,w
 12370  01B7  1D03               	btfss	3,2
 12371  01B8  29BB               	goto	l6746
 12372  01B9  302B               	movlw	43
 12373  01BA  29BC               	goto	L2
 12374  01BB                     l6746:	
 12375  01BB  302D               	movlw	45
 12376  01BC                     L2:	
 12377  01BC  00C8               	movwf	_dtoa$2098
 12378  01BD  3000               	movlw	0
 12379  01BE  00C9               	movwf	_dtoa$2098+1
 12380  01BF  0848               	movf	_dtoa$2098,w
 12381  01C0  00C4               	movwf	??_dtoa
 12382  01C1  0858               	movf	dtoa@i,w
 12383  01C2  3E20               	addlw	(low (_dbuf| (0+512)))& (0+255)
 12384  01C3  0086               	movwf	6
 12385  01C4  3002               	movlw	2	; select bank4/5
 12386  01C5  0087               	movwf	7
 12387  01C6  0844               	movf	??_dtoa,w
 12388  01C7  0081               	movwf	1
 12389  01C8                     l6750:	
 12390                           
 12391                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 314:     re
      +                          turn pad(fp, &dbuf[i], w);
 12392  01C8  0020               	movlb	0	; select bank0
 12393  01C9  0858               	movf	dtoa@i,w
 12394  01CA  3E20               	addlw	(low (_dbuf| (0+512)))& (0+255)
 12395  01CB  00C4               	movwf	??_dtoa
 12396  01CC  0844               	movf	??_dtoa,w
 12397  01CD  00B3               	movwf	pad@buf
 12398  01CE  084D               	movf	dtoa@w+1,w
 12399  01CF  00B5               	movwf	pad@p+1
 12400  01D0  084C               	movf	dtoa@w,w
 12401  01D1  00B4               	movwf	pad@p
 12402  01D2  0847               	movf	dtoa@fp,w
 12403  01D3  3186  2654         	fcall	_pad
 12404  01D5  0020               	movlb	0	; select bank0
 12405  01D6  0834               	movf	?_pad+1,w
 12406  01D7  00BD               	movwf	?_dtoa+1
 12407  01D8  0833               	movf	?_pad,w
 12408  01D9  00BC               	movwf	?_dtoa
 12409  01DA  0008               	return
 12410  01DB                     __end_of_dtoa:	
 12411                           
 12412                           	psect	text64
 12413  0654                     __ptext64:	
 12414 ;; *************** function _pad *****************
 12415 ;; Defined at:
 12416 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c"
 12417 ;; Parameters:    Size  Location     Type
 12418 ;;  fp              1    wreg     PTR struct _IO_FILE
 12419 ;;		 -> sprintf@f(5), 
 12420 ;;  buf             1   19[BANK0 ] PTR unsigned char 
 12421 ;;		 -> dbuf(32), 
 12422 ;;  p               2   20[BANK0 ] int 
 12423 ;; Auto vars:     Size  Location     Type
 12424 ;;  fp              1   27[BANK0 ] PTR struct _IO_FILE
 12425 ;;		 -> sprintf@f(5), 
 12426 ;;  w               2   25[BANK0 ] int 
 12427 ;;  i               2   23[BANK0 ] int 
 12428 ;; Return value:  Size  Location     Type
 12429 ;;                  2   19[BANK0 ] int 
 12430 ;; Registers used:
 12431 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12432 ;; Tracked objects:
 12433 ;;		On entry : 0/0
 12434 ;;		On exit  : 0/0
 12435 ;;		Unchanged: 0/0
 12436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12437 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12438 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12439 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12440 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12441 ;;Total ram usage:        9 bytes
 12442 ;; Hardware stack levels used:    1
 12443 ;; Hardware stack levels required when called:    9
 12444 ;; This function calls:
 12445 ;;		_fputc
 12446 ;;		_fputs
 12447 ;;		_strlen
 12448 ;; This function is called by:
 12449 ;;		_dtoa
 12450 ;; This function uses a non-reentrant model
 12451 ;;
 12452                           
 12453                           
 12454                           ;psect for function _pad
 12455  0654                     _pad:	
 12456                           
 12457                           ;incstack = 0
 12458                           ; Regs used in _pad: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12459                           ;pad@fp stored from wreg
 12460  0654  0020               	movlb	0	; select bank0
 12461  0655  00BB               	movwf	pad@fp
 12462                           
 12463                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
 12464  0656  0021               	movlb	1	; select bank1
 12465  0657  1C26               	btfss	_flags^(0+128),0
 12466  0658  2E62               	goto	l6592
 12467                           
 12468                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
 12469  0659  0020               	movlb	0	; select bank0
 12470  065A  083B               	movf	pad@fp,w
 12471  065B  00B6               	movwf	??_pad
 12472  065C  0836               	movf	??_pad,w
 12473  065D  00AB               	movwf	fputs@fp
 12474  065E  0833               	movf	pad@buf,w
 12475  065F  318B  23EC  3186   	fcall	_fputs
 12476  0662                     l6592:	
 12477                           
 12478                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
 12479  0662  0020               	movlb	0	; select bank0
 12480  0663  1BB5               	btfsc	pad@p+1,7
 12481  0664  2E6A               	goto	l6596
 12482  0665  0835               	movf	pad@p+1,w
 12483  0666  00BA               	movwf	pad@w+1
 12484  0667  0834               	movf	pad@p,w
 12485  0668  00B9               	movwf	pad@w
 12486  0669  2E6C               	goto	l1600
 12487  066A                     l6596:	
 12488  066A  01B9               	clrf	pad@w
 12489  066B  01BA               	clrf	pad@w+1
 12490  066C                     l1600:	
 12491                           
 12492                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
 12493  066C  01B7               	clrf	pad@i
 12494  066D  01B8               	clrf	pad@i+1
 12495  066E                     l6602:	
 12496                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
 12497                           
 12498                           
 12499                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
 12500  066E  0838               	movf	pad@i+1,w
 12501  066F  3A80               	xorlw	128
 12502  0670  00B6               	movwf	??_pad
 12503  0671  083A               	movf	pad@w+1,w
 12504  0672  3A80               	xorlw	128
 12505  0673  0236               	subwf	??_pad,w
 12506  0674  1D03               	skipz
 12507  0675  2E78               	goto	u5595
 12508  0676  0839               	movf	pad@w,w
 12509  0677  0237               	subwf	pad@i,w
 12510  0678                     u5595:	
 12511  0678  1803               	btfsc	3,0
 12512  0679  2E8C               	goto	l1603
 12513                           
 12514                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
 12515  067A  3020               	movlw	32
 12516  067B  0020               	movlb	0	; select bank0
 12517  067C  00A3               	movwf	fputc@c
 12518  067D  3000               	movlw	0
 12519  067E  00A4               	movwf	fputc@c+1
 12520  067F  083B               	movf	pad@fp,w
 12521  0680  00B6               	movwf	??_pad
 12522  0681  0836               	movf	??_pad,w
 12523  0682  00A5               	movwf	fputc@fp
 12524  0683  3187  2745  3186   	fcall	_fputc
 12525                           
 12526                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
 12527  0686  3001               	movlw	1
 12528  0687  0020               	movlb	0	; select bank0
 12529  0688  07B7               	addwf	pad@i,f
 12530  0689  3000               	movlw	0
 12531  068A  3DB8               	addwfc	pad@i+1,f
 12532  068B  2E6E               	goto	l6602
 12533  068C                     l1603:	
 12534                           
 12535                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
 12536  068C  0021               	movlb	1	; select bank1
 12537  068D  1826               	btfsc	_flags^(0+128),0
 12538  068E  2E98               	goto	l6606
 12539                           
 12540                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
 12541  068F  0020               	movlb	0	; select bank0
 12542  0690  083B               	movf	pad@fp,w
 12543  0691  00B6               	movwf	??_pad
 12544  0692  0836               	movf	??_pad,w
 12545  0693  00AB               	movwf	fputs@fp
 12546  0694  0833               	movf	pad@buf,w
 12547  0695  318B  23EC  3186   	fcall	_fputs
 12548  0698                     l6606:	
 12549                           
 12550                           ;C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
 12551  0698  0020               	movlb	0	; select bank0
 12552  0699  0833               	movf	pad@buf,w
 12553  069A  00A0               	movwf	strlen@s
 12554  069B  3002               	movlw	2
 12555  069C  00A1               	movwf	strlen@s+1
 12556  069D  318A  22AE         	fcall	_strlen
 12557  069F  0020               	movlb	0	; select bank0
 12558  06A0  0839               	movf	pad@w,w
 12559  06A1  0720               	addwf	?_strlen,w
 12560  06A2  00B3               	movwf	?_pad
 12561  06A3  083A               	movf	pad@w+1,w
 12562  06A4  3D21               	addwfc	?_strlen+1,w
 12563  06A5  00B4               	movwf	?_pad+1
 12564  06A6  0008               	return
 12565  06A7                     __end_of_pad:	
 12566                           
 12567                           	psect	text65
 12568  0BEC                     __ptext65:	
 12569 ;; *************** function _fputs *****************
 12570 ;; Defined at:
 12571 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputs.c"
 12572 ;; Parameters:    Size  Location     Type
 12573 ;;  s               1    wreg     PTR const unsigned char 
 12574 ;;		 -> dbuf(32), 
 12575 ;;  fp              1   11[BANK0 ] PTR struct _IO_FILE
 12576 ;;		 -> sprintf@f(5), 
 12577 ;; Auto vars:     Size  Location     Type
 12578 ;;  s               1   18[BANK0 ] PTR const unsigned char 
 12579 ;;		 -> dbuf(32), 
 12580 ;;  i               2   16[BANK0 ] int 
 12581 ;;  c               1   15[BANK0 ] unsigned char 
 12582 ;; Return value:  Size  Location     Type
 12583 ;;                  2   11[BANK0 ] int 
 12584 ;; Registers used:
 12585 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12586 ;; Tracked objects:
 12587 ;;		On entry : 0/0
 12588 ;;		On exit  : 0/0
 12589 ;;		Unchanged: 0/0
 12590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12591 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12592 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12593 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12594 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12595 ;;Total ram usage:        8 bytes
 12596 ;; Hardware stack levels used:    1
 12597 ;; Hardware stack levels required when called:    8
 12598 ;; This function calls:
 12599 ;;		_fputc
 12600 ;; This function is called by:
 12601 ;;		_pad
 12602 ;; This function uses a non-reentrant model
 12603 ;;
 12604                           
 12605                           
 12606                           ;psect for function _fputs
 12607  0BEC                     _fputs:	
 12608                           
 12609                           ;incstack = 0
 12610                           ; Regs used in _fputs: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12611                           ;fputs@s stored from wreg
 12612  0BEC  0020               	movlb	0	; select bank0
 12613  0BED  00B2               	movwf	fputs@s
 12614  0BEE  01B0               	clrf	fputs@i
 12615  0BEF  01B1               	clrf	fputs@i+1
 12616  0BF0                     l6564:	
 12617  0BF0  0830               	movf	fputs@i,w
 12618  0BF1  0732               	addwf	fputs@s,w
 12619  0BF2  00AC               	movwf	??_fputs
 12620  0BF3  082C               	movf	??_fputs,w
 12621  0BF4  0086               	movwf	6
 12622  0BF5  3002               	movlw	2	; select bank4/5
 12623  0BF6  0087               	movwf	7
 12624  0BF7  0801               	movf	1,w
 12625  0BF8  00AD               	movwf	??_fputs+1
 12626  0BF9  082D               	movf	??_fputs+1,w
 12627  0BFA  00AF               	movwf	fputs@c
 12628  0BFB  082F               	movf	fputs@c,w
 12629  0BFC  1903               	btfsc	3,2
 12630  0BFD  0008               	return
 12631  0BFE  082F               	movf	fputs@c,w
 12632  0BFF  00AC               	movwf	??_fputs
 12633  0C00  01AD               	clrf	??_fputs+1
 12634  0C01  082C               	movf	??_fputs,w
 12635  0C02  00A3               	movwf	fputc@c
 12636  0C03  082D               	movf	??_fputs+1,w
 12637  0C04  00A4               	movwf	fputc@c+1
 12638  0C05  082B               	movf	fputs@fp,w
 12639  0C06  00AE               	movwf	??_fputs+2
 12640  0C07  082E               	movf	??_fputs+2,w
 12641  0C08  00A5               	movwf	fputc@fp
 12642  0C09  3187  2745  318B   	fcall	_fputc
 12643  0C0C  3001               	movlw	1
 12644  0C0D  0020               	movlb	0	; select bank0
 12645  0C0E  07B0               	addwf	fputs@i,f
 12646  0C0F  3000               	movlw	0
 12647  0C10  3DB1               	addwfc	fputs@i+1,f
 12648  0C11  2BF0               	goto	l6564
 12649  0C12                     __end_of_fputs:	
 12650                           
 12651                           	psect	text66
 12652  0745                     __ptext66:	
 12653 ;; *************** function _fputc *****************
 12654 ;; Defined at:
 12655 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\nf_fputc.c"
 12656 ;; Parameters:    Size  Location     Type
 12657 ;;  c               2    3[BANK0 ] int 
 12658 ;;  fp              1    5[BANK0 ] PTR struct _IO_FILE
 12659 ;;		 -> sprintf@f(5), 
 12660 ;; Auto vars:     Size  Location     Type
 12661 ;;		None
 12662 ;; Return value:  Size  Location     Type
 12663 ;;                  2    3[BANK0 ] int 
 12664 ;; Registers used:
 12665 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12666 ;; Tracked objects:
 12667 ;;		On entry : 0/0
 12668 ;;		On exit  : 0/0
 12669 ;;		Unchanged: 0/0
 12670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12671 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12672 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12673 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12674 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12675 ;;Total ram usage:        8 bytes
 12676 ;; Hardware stack levels used:    1
 12677 ;; Hardware stack levels required when called:    7
 12678 ;; This function calls:
 12679 ;;		_putch
 12680 ;; This function is called by:
 12681 ;;		_pad
 12682 ;;		_vfpfcnvrt
 12683 ;;		_fputs
 12684 ;; This function uses a non-reentrant model
 12685 ;;
 12686                           
 12687                           
 12688                           ;psect for function _fputc
 12689  0745                     _fputc:	
 12690                           
 12691                           ;incstack = 0
 12692                           ; Regs used in _fputc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12693  0745  0020               	movlb	0	; select bank0
 12694  0746  0825               	movf	fputc@fp,w
 12695  0747  1D03               	btfss	3,2
 12696  0748  0825               	movf	fputc@fp,w
 12697  0749  1D03               	btfss	3,2
 12698  074A  2F4F               	goto	l6518
 12699  074B  0823               	movf	fputc@c,w
 12700  074C  3189  210C         	fcall	_putch
 12701  074E  0008               	return
 12702  074F                     l6518:	
 12703  074F  0825               	movf	fputc@fp,w
 12704  0750  3E03               	addlw	3
 12705  0751  0086               	movwf	6
 12706  0752  0187               	clrf	7
 12707  0753  0016               	moviw fsr1++
 12708  0754  0401               	iorwf	1,w
 12709  0755  1903               	btfsc	3,2
 12710  0756  2F72               	goto	l6522
 12711  0757  0825               	movf	fputc@fp,w
 12712  0758  3E03               	addlw	3
 12713  0759  0086               	movwf	6
 12714  075A  0187               	clrf	7
 12715  075B  3F40               	moviw [0]fsr1
 12716  075C  00A6               	movwf	??_fputc
 12717  075D  3F41               	moviw [1]fsr1
 12718  075E  00A7               	movwf	??_fputc+1
 12719  075F  0A25               	incf	fputc@fp,w
 12720  0760  0086               	movwf	6
 12721  0761  0187               	clrf	7
 12722  0762  3F40               	moviw [0]fsr1
 12723  0763  00A8               	movwf	??_fputc+2
 12724  0764  3F41               	moviw [1]fsr1
 12725  0765  00A9               	movwf	??_fputc+3
 12726  0766  0829               	movf	??_fputc+3,w
 12727  0767  3A80               	xorlw	128
 12728  0768  00AA               	movwf	??_fputc+4
 12729  0769  0827               	movf	??_fputc+1,w
 12730  076A  3A80               	xorlw	128
 12731  076B  022A               	subwf	??_fputc+4,w
 12732  076C  1D03               	skipz
 12733  076D  2F70               	goto	u5515
 12734  076E  0826               	movf	??_fputc,w
 12735  076F  0228               	subwf	??_fputc+2,w
 12736  0770                     u5515:	
 12737  0770  1803               	skipnc
 12738  0771  0008               	return
 12739  0772                     l6522:	
 12740  0772  0020               	movlb	0	; select bank0
 12741  0773  0823               	movf	fputc@c,w
 12742  0774  00A6               	movwf	??_fputc
 12743  0775  0825               	movf	fputc@fp,w
 12744  0776  0086               	movwf	6
 12745  0777  0187               	clrf	7
 12746  0778  0A25               	incf	fputc@fp,w
 12747  0779  0084               	movwf	4
 12748  077A  0185               	clrf	5
 12749  077B  0800               	movf	0,w
 12750  077C  0701               	addwf	1,w
 12751  077D  00A7               	movwf	??_fputc+1
 12752  077E  0827               	movf	??_fputc+1,w
 12753  077F  0086               	movwf	6
 12754  0780  0187               	clrf	7
 12755  0781  0826               	movf	??_fputc,w
 12756  0782  0081               	movwf	1
 12757  0783  0A25               	incf	fputc@fp,w
 12758  0784  0086               	movwf	6
 12759  0785  0187               	clrf	7
 12760  0786  3001               	movlw	1
 12761  0787  0781               	addwf	1,f
 12762  0788  3141               	addfsr 1,1
 12763  0789  1803               	skipnc
 12764  078A  0A81               	incf	1,f
 12765  078B  0008               	return
 12766  078C                     __end_of_fputc:	
 12767                           
 12768                           	psect	text67
 12769  090C                     __ptext67:	
 12770 ;; *************** function _putch *****************
 12771 ;; Defined at:
 12772 ;;		line 200 in file "mcc_generated_files/eusart.c"
 12773 ;; Parameters:    Size  Location     Type
 12774 ;;  txData          1    wreg     unsigned char 
 12775 ;; Auto vars:     Size  Location     Type
 12776 ;;  txData          1    2[BANK0 ] unsigned char 
 12777 ;; Return value:  Size  Location     Type
 12778 ;;                  1    wreg      void 
 12779 ;; Registers used:
 12780 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12781 ;; Tracked objects:
 12782 ;;		On entry : 0/0
 12783 ;;		On exit  : 0/0
 12784 ;;		Unchanged: 0/0
 12785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12786 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12787 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12788 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12789 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12790 ;;Total ram usage:        1 bytes
 12791 ;; Hardware stack levels used:    1
 12792 ;; Hardware stack levels required when called:    6
 12793 ;; This function calls:
 12794 ;;		_EUSART_Write
 12795 ;; This function is called by:
 12796 ;;		_fputc
 12797 ;; This function uses a non-reentrant model
 12798 ;;
 12799                           
 12800                           
 12801                           ;psect for function _putch
 12802  090C                     _putch:	
 12803                           
 12804                           ;incstack = 0
 12805                           ; Regs used in _putch: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12806                           ;putch@txData stored from wreg
 12807  090C  0020               	movlb	0	; select bank0
 12808  090D  00A2               	movwf	putch@txData
 12809                           
 12810                           ;mcc_generated_files/eusart.c: 200: void putch(char txData);mcc_generated_files/eusart.c
      +                          : 201: {;mcc_generated_files/eusart.c: 202:     EUSART_Write(txData);
 12811  090E  0822               	movf	putch@txData,w
 12812  090F  318D  2500         	fcall	_EUSART_Write
 12813  0911  0008               	return
 12814  0912                     __end_of_putch:	
 12815                           
 12816                           	psect	text68
 12817  0D00                     __ptext68:	
 12818 ;; *************** function _EUSART_Write *****************
 12819 ;; Defined at:
 12820 ;;		line 171 in file "mcc_generated_files/eusart.c"
 12821 ;; Parameters:    Size  Location     Type
 12822 ;;  txData          1    wreg     unsigned char 
 12823 ;; Auto vars:     Size  Location     Type
 12824 ;;  txData          1    1[BANK0 ] unsigned char 
 12825 ;; Return value:  Size  Location     Type
 12826 ;;                  1    wreg      void 
 12827 ;; Registers used:
 12828 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12829 ;; Tracked objects:
 12830 ;;		On entry : 0/0
 12831 ;;		On exit  : 0/0
 12832 ;;		Unchanged: 0/0
 12833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12834 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12835 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12836 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12837 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12838 ;;Total ram usage:        2 bytes
 12839 ;; Hardware stack levels used:    1
 12840 ;; Hardware stack levels required when called:    5
 12841 ;; This function calls:
 12842 ;;		Nothing
 12843 ;; This function is called by:
 12844 ;;		_putch
 12845 ;; This function uses a non-reentrant model
 12846 ;;
 12847                           
 12848                           
 12849                           ;psect for function _EUSART_Write
 12850  0D00                     _EUSART_Write:	
 12851                           
 12852                           ;incstack = 0
 12853                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
 12854                           ;EUSART_Write@txData stored from wreg
 12855  0D00  0020               	movlb	0	; select bank0
 12856  0D01  00A1               	movwf	EUSART_Write@txData
 12857  0D02                     l6494:	
 12858                           ;mcc_generated_files/eusart.c: 171: void EUSART_Write(uint8_t txData);mcc_generated_file
      +                          s/eusart.c: 172: {;mcc_generated_files/eusart.c: 173:     while(0 == eusartTxBufferRemai
      +                          ning)
 12859                           
 12860                           
 12861                           ;mcc_generated_files/eusart.c: 173:     while(0 == eusartTxBufferRemaining)
 12862  0D02  0021               	movlb	1	; select bank1
 12863  0D03  086A               	movf	_eusartTxBufferRemaining^(0+128),w	;volatile
 12864  0D04  1D03               	btfss	3,2
 12865  0D05  2D08               	goto	l771
 12866  0D06  0064               	clrwdt	;# 
 12867  0D07  2D02               	goto	l6494
 12868  0D08                     l771:	
 12869                           
 12870                           ;mcc_generated_files/eusart.c: 178:     if(0 == PIE1bits.TXIE)
 12871  0D08  1A11               	btfsc	17,4	;volatile
 12872  0D09  2D0F               	goto	l772
 12873                           
 12874                           ;mcc_generated_files/eusart.c: 179:     {;mcc_generated_files/eusart.c: 180:         TX1
      +                          REG = txData;
 12875  0D0A  0020               	movlb	0	; select bank0
 12876  0D0B  0821               	movf	EUSART_Write@txData,w
 12877  0D0C  0023               	movlb	3	; select bank3
 12878  0D0D  009A               	movwf	26	;volatile
 12879                           
 12880                           ;mcc_generated_files/eusart.c: 181:     }
 12881  0D0E  2D27               	goto	l6508
 12882  0D0F                     l772:	
 12883                           ;mcc_generated_files/eusart.c: 182:     else
 12884                           
 12885                           
 12886                           ;mcc_generated_files/eusart.c: 183:     {;mcc_generated_files/eusart.c: 184:         PIE
      +                          1bits.TXIE = 0;
 12887  0D0F  1211               	bcf	17,4	;volatile
 12888                           
 12889                           ;mcc_generated_files/eusart.c: 185:         eusartTxBuffer[eusartTxHead++] = txData;
 12890  0D10  0020               	movlb	0	; select bank0
 12891  0D11  0821               	movf	EUSART_Write@txData,w
 12892  0D12  00A0               	movwf	??_EUSART_Write
 12893  0D13  0021               	movlb	1	; select bank1
 12894  0D14  0844               	movf	_eusartTxHead^(0+128),w
 12895  0D15  3E4D               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
 12896  0D16  0086               	movwf	6
 12897  0D17  3001               	movlw	1	; select bank2/3
 12898  0D18  0087               	movwf	7
 12899  0D19  0020               	movlb	0	; select bank0
 12900  0D1A  0820               	movf	??_EUSART_Write,w
 12901  0D1B  0081               	movwf	1
 12902  0D1C  3001               	movlw	1
 12903  0D1D  00A0               	movwf	??_EUSART_Write
 12904  0D1E  0820               	movf	??_EUSART_Write,w
 12905  0D1F  0021               	movlb	1	; select bank1
 12906  0D20  07C4               	addwf	_eusartTxHead^(0+128),f	;volatile
 12907                           
 12908                           ;mcc_generated_files/eusart.c: 186:         if(sizeof(eusartTxBuffer) <= eusartTxHead)
 12909  0D21  3008               	movlw	8
 12910  0D22  0244               	subwf	_eusartTxHead^(0+128),w	;volatile
 12911  0D23  1803               	btfsc	3,0
 12912                           
 12913                           ;mcc_generated_files/eusart.c: 187:         {;mcc_generated_files/eusart.c: 188:        
      +                               eusartTxHead = 0;
 12914  0D24  01C4               	clrf	_eusartTxHead^(0+128)	;volatile
 12915                           
 12916                           ;mcc_generated_files/eusart.c: 190:         eusartTxBufferRemaining--;
 12917  0D25  3001               	movlw	1
 12918  0D26  02EA               	subwf	_eusartTxBufferRemaining^(0+128),f	;volatile
 12919  0D27                     l6508:	
 12920                           
 12921                           ;mcc_generated_files/eusart.c: 192:     PIE1bits.TXIE = 1;
 12922  0D27  0021               	movlb	1	; select bank1
 12923  0D28  1611               	bsf	17,4	;volatile
 12924  0D29  0008               	return
 12925  0D2A                     __end_of_EUSART_Write:	
 12926                           
 12927                           	psect	text69
 12928  0ADE                     __ptext69:	
 12929 ;; *************** function _abs *****************
 12930 ;; Defined at:
 12931 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\abs.c"
 12932 ;; Parameters:    Size  Location     Type
 12933 ;;  a               2   19[BANK0 ] int 
 12934 ;; Auto vars:     Size  Location     Type
 12935 ;;		None
 12936 ;; Return value:  Size  Location     Type
 12937 ;;                  2   19[BANK0 ] int 
 12938 ;; Registers used:
 12939 ;;		wreg, status,2, status,0
 12940 ;; Tracked objects:
 12941 ;;		On entry : 0/0
 12942 ;;		On exit  : 0/0
 12943 ;;		Unchanged: 0/0
 12944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12945 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12946 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12947 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12948 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12949 ;;Total ram usage:        4 bytes
 12950 ;; Hardware stack levels used:    1
 12951 ;; Hardware stack levels required when called:    5
 12952 ;; This function calls:
 12953 ;;		Nothing
 12954 ;; This function is called by:
 12955 ;;		_dtoa
 12956 ;; This function uses a non-reentrant model
 12957 ;;
 12958                           
 12959                           
 12960                           ;psect for function _abs
 12961  0ADE                     _abs:	
 12962                           
 12963                           ;incstack = 0
 12964                           ; Regs used in _abs: [wreg+status,2+status,0]
 12965  0ADE  0020               	movlb	0	; select bank0
 12966  0ADF  0834               	movf	abs@a+1,w
 12967  0AE0  3A80               	xorlw	128
 12968  0AE1  00B5               	movwf	??_abs
 12969  0AE2  3080               	movlw	128
 12970  0AE3  0235               	subwf	??_abs,w
 12971  0AE4  1D03               	skipz
 12972  0AE5  2AE8               	goto	u5615
 12973  0AE6  3001               	movlw	1
 12974  0AE7  0233               	subwf	abs@a,w
 12975  0AE8                     u5615:	
 12976  0AE8  1803               	skipnc
 12977  0AE9  0008               	return
 12978  0AEA  0020               	movlb	0	; select bank0
 12979  0AEB  0933               	comf	abs@a,w
 12980  0AEC  00B5               	movwf	??_abs
 12981  0AED  0934               	comf	abs@a+1,w
 12982  0AEE  00B6               	movwf	??_abs+1
 12983  0AEF  0AB5               	incf	??_abs,f
 12984  0AF0  1903               	skipnz
 12985  0AF1  0AB6               	incf	??_abs+1,f
 12986  0AF2  0835               	movf	??_abs,w
 12987  0AF3  00B3               	movwf	?_abs
 12988  0AF4  0836               	movf	??_abs+1,w
 12989  0AF5  00B4               	movwf	?_abs+1
 12990  0AF6  0008               	return
 12991  0AF7                     __end_of_abs:	
 12992                           
 12993                           	psect	text70
 12994  03E1                     __ptext70:	
 12995 ;; *************** function ___aomod *****************
 12996 ;; Defined at:
 12997 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aomod.c"
 12998 ;; Parameters:    Size  Location     Type
 12999 ;;  divisor         8    0[BANK0 ] long long 
 13000 ;;  dividend        8    8[BANK0 ] long long 
 13001 ;; Auto vars:     Size  Location     Type
 13002 ;;  sign            1   18[BANK0 ] unsigned char 
 13003 ;;  counter         1   17[BANK0 ] unsigned char 
 13004 ;; Return value:  Size  Location     Type
 13005 ;;                  8    0[BANK0 ] long long 
 13006 ;; Registers used:
 13007 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13008 ;; Tracked objects:
 13009 ;;		On entry : 0/0
 13010 ;;		On exit  : 0/0
 13011 ;;		Unchanged: 0/0
 13012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13013 ;;      Params:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13014 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13015 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13016 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13017 ;;Total ram usage:       19 bytes
 13018 ;; Hardware stack levels used:    1
 13019 ;; Hardware stack levels required when called:    5
 13020 ;; This function calls:
 13021 ;;		Nothing
 13022 ;; This function is called by:
 13023 ;;		_dtoa
 13024 ;; This function uses a non-reentrant model
 13025 ;;
 13026                           
 13027                           
 13028                           ;psect for function ___aomod
 13029  03E1                     ___aomod:	
 13030                           
 13031                           ;incstack = 0
 13032                           ; Regs used in ___aomod: [wreg+fsr1l+fsr1h+status,2+status,0]
 13033  03E1  0020               	movlb	0	; select bank0
 13034  03E2  01B2               	clrf	___aomod@sign
 13035  03E3  3028               	movlw	low ___aomod@dividend
 13036  03E4  0086               	movwf	6
 13037  03E5  3000               	movlw	high ___aomod@dividend
 13038  03E6  0087               	movwf	7
 13039  03E7  3F47               	moviw [7]fsr1
 13040  03E8  00B0               	movwf	??___aomod
 13041  03E9  1FB0               	btfss	??___aomod,7
 13042  03EA  2C0D               	goto	l6658
 13043  03EB  0020               	movlb	0	; select bank0
 13044  03EC  09A8               	comf	___aomod@dividend,f
 13045  03ED  09A9               	comf	___aomod@dividend+1,f
 13046  03EE  09AA               	comf	___aomod@dividend+2,f
 13047  03EF  09AB               	comf	___aomod@dividend+3,f
 13048  03F0  09AC               	comf	___aomod@dividend+4,f
 13049  03F1  09AD               	comf	___aomod@dividend+5,f
 13050  03F2  09AE               	comf	___aomod@dividend+6,f
 13051  03F3  09AF               	comf	___aomod@dividend+7,f
 13052  03F4  0AA8               	incf	___aomod@dividend,f
 13053  03F5  1D03               	skipz
 13054  03F6  2C0A               	goto	u574lld
 13055  03F7  0AA9               	incf	___aomod@dividend+1,f
 13056  03F8  1D03               	skipz
 13057  03F9  2C0A               	goto	u574lld
 13058  03FA  0AAA               	incf	___aomod@dividend+2,f
 13059  03FB  1D03               	skipz
 13060  03FC  2C0A               	goto	u574lld
 13061  03FD  0AAB               	incf	___aomod@dividend+3,f
 13062  03FE  1D03               	skipz
 13063  03FF  2C0A               	goto	u574lld
 13064  0400  0AAC               	incf	___aomod@dividend+4,f
 13065  0401  1D03               	skipz
 13066  0402  2C0A               	goto	u574lld
 13067  0403  0AAD               	incf	___aomod@dividend+5,f
 13068  0404  1D03               	skipz
 13069  0405  2C0A               	goto	u574lld
 13070  0406  0AAE               	incf	___aomod@dividend+6,f
 13071  0407  1D03               	skipz
 13072  0408  2C0A               	goto	u574lld
 13073  0409  0AAF               	incf	___aomod@dividend+7,f
 13074  040A                     u574lld:	
 13075  040A  0020               	movlb	0	; select bank0
 13076  040B  01B2               	clrf	___aomod@sign
 13077  040C  0AB2               	incf	___aomod@sign,f
 13078  040D                     l6658:	
 13079  040D  3020               	movlw	low ___aomod@divisor
 13080  040E  0086               	movwf	6
 13081  040F  3000               	movlw	high ___aomod@divisor
 13082  0410  0087               	movwf	7
 13083  0411  3F47               	moviw [7]fsr1
 13084  0412  0020               	movlb	0	; select bank0
 13085  0413  00B0               	movwf	??___aomod
 13086  0414  1FB0               	btfss	??___aomod,7
 13087  0415  2C35               	goto	l6662
 13088  0416  0020               	movlb	0	; select bank0
 13089  0417  09A0               	comf	___aomod@divisor,f
 13090  0418  09A1               	comf	___aomod@divisor+1,f
 13091  0419  09A2               	comf	___aomod@divisor+2,f
 13092  041A  09A3               	comf	___aomod@divisor+3,f
 13093  041B  09A4               	comf	___aomod@divisor+4,f
 13094  041C  09A5               	comf	___aomod@divisor+5,f
 13095  041D  09A6               	comf	___aomod@divisor+6,f
 13096  041E  09A7               	comf	___aomod@divisor+7,f
 13097  041F  0AA0               	incf	___aomod@divisor,f
 13098  0420  1D03               	skipz
 13099  0421  2C35               	goto	l6662
 13100  0422  0AA1               	incf	___aomod@divisor+1,f
 13101  0423  1D03               	skipz
 13102  0424  2C35               	goto	l6662
 13103  0425  0AA2               	incf	___aomod@divisor+2,f
 13104  0426  1D03               	skipz
 13105  0427  2C35               	goto	l6662
 13106  0428  0AA3               	incf	___aomod@divisor+3,f
 13107  0429  1D03               	skipz
 13108  042A  2C35               	goto	l6662
 13109  042B  0AA4               	incf	___aomod@divisor+4,f
 13110  042C  1D03               	skipz
 13111  042D  2C35               	goto	l6662
 13112  042E  0AA5               	incf	___aomod@divisor+5,f
 13113  042F  1D03               	skipz
 13114  0430  2C35               	goto	l6662
 13115  0431  0AA6               	incf	___aomod@divisor+6,f
 13116  0432  1D03               	skipz
 13117  0433  2C35               	goto	l6662
 13118  0434  0AA7               	incf	___aomod@divisor+7,f
 13119  0435                     l6662:	
 13120  0435  0020               	movlb	0	; select bank0
 13121  0436  0820               	movf	___aomod@divisor,w
 13122  0437  0421               	iorwf	___aomod@divisor+1,w
 13123  0438  0422               	iorwf	___aomod@divisor+2,w
 13124  0439  0423               	iorwf	___aomod@divisor+3,w
 13125  043A  0424               	iorwf	___aomod@divisor+4,w
 13126  043B  0425               	iorwf	___aomod@divisor+5,w
 13127  043C  0426               	iorwf	___aomod@divisor+6,w
 13128  043D  0427               	iorwf	___aomod@divisor+7,w
 13129  043E  1903               	skipnz
 13130  043F  2C8D               	goto	l6678
 13131  0440  01B1               	clrf	___aomod@counter
 13132  0441  0AB1               	incf	___aomod@counter,f
 13133  0442                     l6670:	
 13134  0442  1BA7               	btfsc	___aomod@divisor+7,7
 13135  0443  2C51               	goto	l6672
 13136  0444  35A0               	lslf	___aomod@divisor,f
 13137  0445  0DA1               	rlf	___aomod@divisor+1,f
 13138  0446  0DA2               	rlf	___aomod@divisor+2,f
 13139  0447  0DA3               	rlf	___aomod@divisor+3,f
 13140  0448  0DA4               	rlf	___aomod@divisor+4,f
 13141  0449  0DA5               	rlf	___aomod@divisor+5,f
 13142  044A  0DA6               	rlf	___aomod@divisor+6,f
 13143  044B  0DA7               	rlf	___aomod@divisor+7,f
 13144  044C  3001               	movlw	1
 13145  044D  00B0               	movwf	??___aomod
 13146  044E  0830               	movf	??___aomod,w
 13147  044F  07B1               	addwf	___aomod@counter,f
 13148  0450  2C42               	goto	l6670
 13149  0451                     l6672:	
 13150  0451  0827               	movf	___aomod@divisor+7,w
 13151  0452  022F               	subwf	___aomod@dividend+7,w
 13152  0453  1D03               	skipz
 13153  0454  2C6F               	goto	u5795
 13154  0455  0826               	movf	___aomod@divisor+6,w
 13155  0456  022E               	subwf	___aomod@dividend+6,w
 13156  0457  1D03               	skipz
 13157  0458  2C6F               	goto	u5795
 13158  0459  0825               	movf	___aomod@divisor+5,w
 13159  045A  022D               	subwf	___aomod@dividend+5,w
 13160  045B  1D03               	skipz
 13161  045C  2C6F               	goto	u5795
 13162  045D  0824               	movf	___aomod@divisor+4,w
 13163  045E  022C               	subwf	___aomod@dividend+4,w
 13164  045F  1D03               	skipz
 13165  0460  2C6F               	goto	u5795
 13166  0461  0823               	movf	___aomod@divisor+3,w
 13167  0462  022B               	subwf	___aomod@dividend+3,w
 13168  0463  1D03               	skipz
 13169  0464  2C6F               	goto	u5795
 13170  0465  0822               	movf	___aomod@divisor+2,w
 13171  0466  022A               	subwf	___aomod@dividend+2,w
 13172  0467  1D03               	skipz
 13173  0468  2C6F               	goto	u5795
 13174  0469  0821               	movf	___aomod@divisor+1,w
 13175  046A  0229               	subwf	___aomod@dividend+1,w
 13176  046B  1D03               	skipz
 13177  046C  2C6F               	goto	u5795
 13178  046D  0820               	movf	___aomod@divisor,w
 13179  046E  0228               	subwf	___aomod@dividend,w
 13180  046F                     u5795:	
 13181  046F  1C03               	skipc
 13182  0470  2C81               	goto	l6676
 13183  0471  0820               	movf	___aomod@divisor,w
 13184  0472  02A8               	subwf	___aomod@dividend,f
 13185  0473  0821               	movf	___aomod@divisor+1,w
 13186  0474  3BA9               	subwfb	___aomod@dividend+1,f
 13187  0475  0822               	movf	___aomod@divisor+2,w
 13188  0476  3BAA               	subwfb	___aomod@dividend+2,f
 13189  0477  0823               	movf	___aomod@divisor+3,w
 13190  0478  3BAB               	subwfb	___aomod@dividend+3,f
 13191  0479  0824               	movf	___aomod@divisor+4,w
 13192  047A  3BAC               	subwfb	___aomod@dividend+4,f
 13193  047B  0825               	movf	___aomod@divisor+5,w
 13194  047C  3BAD               	subwfb	___aomod@dividend+5,f
 13195  047D  0826               	movf	___aomod@divisor+6,w
 13196  047E  3BAE               	subwfb	___aomod@dividend+6,f
 13197  047F  0827               	movf	___aomod@divisor+7,w
 13198  0480  3BAF               	subwfb	___aomod@dividend+7,f
 13199  0481                     l6676:	
 13200  0481  36A7               	lsrf	___aomod@divisor+7,f
 13201  0482  0CA6               	rrf	___aomod@divisor+6,f
 13202  0483  0CA5               	rrf	___aomod@divisor+5,f
 13203  0484  0CA4               	rrf	___aomod@divisor+4,f
 13204  0485  0CA3               	rrf	___aomod@divisor+3,f
 13205  0486  0CA2               	rrf	___aomod@divisor+2,f
 13206  0487  0CA1               	rrf	___aomod@divisor+1,f
 13207  0488  0CA0               	rrf	___aomod@divisor,f
 13208  0489  3001               	movlw	1
 13209  048A  02B1               	subwf	___aomod@counter,f
 13210  048B  1D03               	btfss	3,2
 13211  048C  2C51               	goto	l6672
 13212  048D                     l6678:	
 13213  048D  0832               	movf	___aomod@sign,w
 13214  048E  1903               	btfsc	3,2
 13215  048F  2CAE               	goto	l1762
 13216  0490  09A8               	comf	___aomod@dividend,f
 13217  0491  09A9               	comf	___aomod@dividend+1,f
 13218  0492  09AA               	comf	___aomod@dividend+2,f
 13219  0493  09AB               	comf	___aomod@dividend+3,f
 13220  0494  09AC               	comf	___aomod@dividend+4,f
 13221  0495  09AD               	comf	___aomod@dividend+5,f
 13222  0496  09AE               	comf	___aomod@dividend+6,f
 13223  0497  09AF               	comf	___aomod@dividend+7,f
 13224  0498  0AA8               	incf	___aomod@dividend,f
 13225  0499  1D03               	skipz
 13226  049A  2CAE               	goto	l1762
 13227  049B  0AA9               	incf	___aomod@dividend+1,f
 13228  049C  1D03               	skipz
 13229  049D  2CAE               	goto	l1762
 13230  049E  0AAA               	incf	___aomod@dividend+2,f
 13231  049F  1D03               	skipz
 13232  04A0  2CAE               	goto	l1762
 13233  04A1  0AAB               	incf	___aomod@dividend+3,f
 13234  04A2  1D03               	skipz
 13235  04A3  2CAE               	goto	l1762
 13236  04A4  0AAC               	incf	___aomod@dividend+4,f
 13237  04A5  1D03               	skipz
 13238  04A6  2CAE               	goto	l1762
 13239  04A7  0AAD               	incf	___aomod@dividend+5,f
 13240  04A8  1D03               	skipz
 13241  04A9  2CAE               	goto	l1762
 13242  04AA  0AAE               	incf	___aomod@dividend+6,f
 13243  04AB  1D03               	skipz
 13244  04AC  2CAE               	goto	l1762
 13245  04AD  0AAF               	incf	___aomod@dividend+7,f
 13246  04AE                     l1762:	
 13247  04AE  0020               	movlb	0	; select bank0
 13248  04AF  0828               	movf	___aomod@dividend,w
 13249  04B0  00A0               	movwf	?___aomod
 13250  04B1  0829               	movf	___aomod@dividend+1,w
 13251  04B2  00A1               	movwf	?___aomod+1
 13252  04B3  082A               	movf	___aomod@dividend+2,w
 13253  04B4  00A2               	movwf	?___aomod+2
 13254  04B5  082B               	movf	___aomod@dividend+3,w
 13255  04B6  00A3               	movwf	?___aomod+3
 13256  04B7  082C               	movf	___aomod@dividend+4,w
 13257  04B8  00A4               	movwf	?___aomod+4
 13258  04B9  082D               	movf	___aomod@dividend+5,w
 13259  04BA  00A5               	movwf	?___aomod+5
 13260  04BB  082E               	movf	___aomod@dividend+6,w
 13261  04BC  00A6               	movwf	?___aomod+6
 13262  04BD  082F               	movf	___aomod@dividend+7,w
 13263  04BE  00A7               	movwf	?___aomod+7
 13264  04BF  0008               	return
 13265  04C0                     __end_of___aomod:	
 13266                           
 13267                           	psect	text71
 13268  02EA                     __ptext71:	
 13269 ;; *************** function ___aodiv *****************
 13270 ;; Defined at:
 13271 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\aodiv.c"
 13272 ;; Parameters:    Size  Location     Type
 13273 ;;  divisor         8    0[BANK0 ] long long 
 13274 ;;  dividend        8    8[BANK0 ] long long 
 13275 ;; Auto vars:     Size  Location     Type
 13276 ;;  quotient        8   19[BANK0 ] long long 
 13277 ;;  sign            1   18[BANK0 ] unsigned char 
 13278 ;;  counter         1   17[BANK0 ] unsigned char 
 13279 ;; Return value:  Size  Location     Type
 13280 ;;                  8    0[BANK0 ] long long 
 13281 ;; Registers used:
 13282 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13283 ;; Tracked objects:
 13284 ;;		On entry : 0/0
 13285 ;;		On exit  : 0/0
 13286 ;;		Unchanged: 0/0
 13287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13288 ;;      Params:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13289 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13290 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13291 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13292 ;;Total ram usage:       27 bytes
 13293 ;; Hardware stack levels used:    1
 13294 ;; Hardware stack levels required when called:    5
 13295 ;; This function calls:
 13296 ;;		Nothing
 13297 ;; This function is called by:
 13298 ;;		_dtoa
 13299 ;; This function uses a non-reentrant model
 13300 ;;
 13301                           
 13302                           
 13303                           ;psect for function ___aodiv
 13304  02EA                     ___aodiv:	
 13305                           
 13306                           ;incstack = 0
 13307                           ; Regs used in ___aodiv: [wreg+fsr1l+fsr1h+status,2+status,0]
 13308  02EA  0020               	movlb	0	; select bank0
 13309  02EB  01B2               	clrf	___aodiv@sign
 13310  02EC  3020               	movlw	low ___aodiv@divisor
 13311  02ED  0086               	movwf	6
 13312  02EE  3000               	movlw	high ___aodiv@divisor
 13313  02EF  0087               	movwf	7
 13314  02F0  3F47               	moviw [7]fsr1
 13315  02F1  00B0               	movwf	??___aodiv
 13316  02F2  1FB0               	btfss	??___aodiv,7
 13317  02F3  2B16               	goto	l6620
 13318  02F4  0020               	movlb	0	; select bank0
 13319  02F5  09A0               	comf	___aodiv@divisor,f
 13320  02F6  09A1               	comf	___aodiv@divisor+1,f
 13321  02F7  09A2               	comf	___aodiv@divisor+2,f
 13322  02F8  09A3               	comf	___aodiv@divisor+3,f
 13323  02F9  09A4               	comf	___aodiv@divisor+4,f
 13324  02FA  09A5               	comf	___aodiv@divisor+5,f
 13325  02FB  09A6               	comf	___aodiv@divisor+6,f
 13326  02FC  09A7               	comf	___aodiv@divisor+7,f
 13327  02FD  0AA0               	incf	___aodiv@divisor,f
 13328  02FE  1D03               	skipz
 13329  02FF  2B13               	goto	u563lld
 13330  0300  0AA1               	incf	___aodiv@divisor+1,f
 13331  0301  1D03               	skipz
 13332  0302  2B13               	goto	u563lld
 13333  0303  0AA2               	incf	___aodiv@divisor+2,f
 13334  0304  1D03               	skipz
 13335  0305  2B13               	goto	u563lld
 13336  0306  0AA3               	incf	___aodiv@divisor+3,f
 13337  0307  1D03               	skipz
 13338  0308  2B13               	goto	u563lld
 13339  0309  0AA4               	incf	___aodiv@divisor+4,f
 13340  030A  1D03               	skipz
 13341  030B  2B13               	goto	u563lld
 13342  030C  0AA5               	incf	___aodiv@divisor+5,f
 13343  030D  1D03               	skipz
 13344  030E  2B13               	goto	u563lld
 13345  030F  0AA6               	incf	___aodiv@divisor+6,f
 13346  0310  1D03               	skipz
 13347  0311  2B13               	goto	u563lld
 13348  0312  0AA7               	incf	___aodiv@divisor+7,f
 13349  0313                     u563lld:	
 13350  0313  0020               	movlb	0	; select bank0
 13351  0314  01B2               	clrf	___aodiv@sign
 13352  0315  0AB2               	incf	___aodiv@sign,f
 13353  0316                     l6620:	
 13354  0316  3028               	movlw	low ___aodiv@dividend
 13355  0317  0086               	movwf	6
 13356  0318  3000               	movlw	high ___aodiv@dividend
 13357  0319  0087               	movwf	7
 13358  031A  3F47               	moviw [7]fsr1
 13359  031B  0020               	movlb	0	; select bank0
 13360  031C  00B0               	movwf	??___aodiv
 13361  031D  1FB0               	btfss	??___aodiv,7
 13362  031E  2B43               	goto	l6626
 13363  031F  0020               	movlb	0	; select bank0
 13364  0320  09A8               	comf	___aodiv@dividend,f
 13365  0321  09A9               	comf	___aodiv@dividend+1,f
 13366  0322  09AA               	comf	___aodiv@dividend+2,f
 13367  0323  09AB               	comf	___aodiv@dividend+3,f
 13368  0324  09AC               	comf	___aodiv@dividend+4,f
 13369  0325  09AD               	comf	___aodiv@dividend+5,f
 13370  0326  09AE               	comf	___aodiv@dividend+6,f
 13371  0327  09AF               	comf	___aodiv@dividend+7,f
 13372  0328  0AA8               	incf	___aodiv@dividend,f
 13373  0329  1D03               	skipz
 13374  032A  2B3E               	goto	l6624
 13375  032B  0AA9               	incf	___aodiv@dividend+1,f
 13376  032C  1D03               	skipz
 13377  032D  2B3E               	goto	l6624
 13378  032E  0AAA               	incf	___aodiv@dividend+2,f
 13379  032F  1D03               	skipz
 13380  0330  2B3E               	goto	l6624
 13381  0331  0AAB               	incf	___aodiv@dividend+3,f
 13382  0332  1D03               	skipz
 13383  0333  2B3E               	goto	l6624
 13384  0334  0AAC               	incf	___aodiv@dividend+4,f
 13385  0335  1D03               	skipz
 13386  0336  2B3E               	goto	l6624
 13387  0337  0AAD               	incf	___aodiv@dividend+5,f
 13388  0338  1D03               	skipz
 13389  0339  2B3E               	goto	l6624
 13390  033A  0AAE               	incf	___aodiv@dividend+6,f
 13391  033B  1D03               	skipz
 13392  033C  2B3E               	goto	l6624
 13393  033D  0AAF               	incf	___aodiv@dividend+7,f
 13394  033E                     l6624:	
 13395  033E  3001               	movlw	1
 13396  033F  0020               	movlb	0	; select bank0
 13397  0340  00B0               	movwf	??___aodiv
 13398  0341  0830               	movf	??___aodiv,w
 13399  0342  06B2               	xorwf	___aodiv@sign,f
 13400  0343                     l6626:	
 13401  0343  3033               	movlw	low ___aodiv@quotient
 13402  0344  0086               	movwf	6
 13403  0345  3000               	movlw	high ___aodiv@quotient
 13404  0346  0087               	movwf	7
 13405  0347  3008               	movlw	8
 13406  0348  0020               	movlb	0	; select bank0
 13407  0349  00B0               	movwf	??___aodiv
 13408  034A  3000               	movlw	0
 13409  034B                     u5660:	
 13410  034B  001E               	movwi fsr1++
 13411  034C  0BB0               	decfsz	??___aodiv,f
 13412  034D  2B4B               	goto	u5660
 13413  034E  0820               	movf	___aodiv@divisor,w
 13414  034F  0421               	iorwf	___aodiv@divisor+1,w
 13415  0350  0422               	iorwf	___aodiv@divisor+2,w
 13416  0351  0423               	iorwf	___aodiv@divisor+3,w
 13417  0352  0424               	iorwf	___aodiv@divisor+4,w
 13418  0353  0425               	iorwf	___aodiv@divisor+5,w
 13419  0354  0426               	iorwf	___aodiv@divisor+6,w
 13420  0355  0427               	iorwf	___aodiv@divisor+7,w
 13421  0356  1903               	skipnz
 13422  0357  2BAE               	goto	l6648
 13423  0358  01B1               	clrf	___aodiv@counter
 13424  0359  0AB1               	incf	___aodiv@counter,f
 13425  035A                     l6636:	
 13426  035A  1BA7               	btfsc	___aodiv@divisor+7,7
 13427  035B  2B69               	goto	l6638
 13428  035C  35A0               	lslf	___aodiv@divisor,f
 13429  035D  0DA1               	rlf	___aodiv@divisor+1,f
 13430  035E  0DA2               	rlf	___aodiv@divisor+2,f
 13431  035F  0DA3               	rlf	___aodiv@divisor+3,f
 13432  0360  0DA4               	rlf	___aodiv@divisor+4,f
 13433  0361  0DA5               	rlf	___aodiv@divisor+5,f
 13434  0362  0DA6               	rlf	___aodiv@divisor+6,f
 13435  0363  0DA7               	rlf	___aodiv@divisor+7,f
 13436  0364  3001               	movlw	1
 13437  0365  00B0               	movwf	??___aodiv
 13438  0366  0830               	movf	??___aodiv,w
 13439  0367  07B1               	addwf	___aodiv@counter,f
 13440  0368  2B5A               	goto	l6636
 13441  0369                     l6638:	
 13442  0369  35B3               	lslf	___aodiv@quotient,f
 13443  036A  0DB4               	rlf	___aodiv@quotient+1,f
 13444  036B  0DB5               	rlf	___aodiv@quotient+2,f
 13445  036C  0DB6               	rlf	___aodiv@quotient+3,f
 13446  036D  0DB7               	rlf	___aodiv@quotient+4,f
 13447  036E  0DB8               	rlf	___aodiv@quotient+5,f
 13448  036F  0DB9               	rlf	___aodiv@quotient+6,f
 13449  0370  0DBA               	rlf	___aodiv@quotient+7,f
 13450  0371  0827               	movf	___aodiv@divisor+7,w
 13451  0372  022F               	subwf	___aodiv@dividend+7,w
 13452  0373  1D03               	skipz
 13453  0374  2B8F               	goto	u5695
 13454  0375  0826               	movf	___aodiv@divisor+6,w
 13455  0376  022E               	subwf	___aodiv@dividend+6,w
 13456  0377  1D03               	skipz
 13457  0378  2B8F               	goto	u5695
 13458  0379  0825               	movf	___aodiv@divisor+5,w
 13459  037A  022D               	subwf	___aodiv@dividend+5,w
 13460  037B  1D03               	skipz
 13461  037C  2B8F               	goto	u5695
 13462  037D  0824               	movf	___aodiv@divisor+4,w
 13463  037E  022C               	subwf	___aodiv@dividend+4,w
 13464  037F  1D03               	skipz
 13465  0380  2B8F               	goto	u5695
 13466  0381  0823               	movf	___aodiv@divisor+3,w
 13467  0382  022B               	subwf	___aodiv@dividend+3,w
 13468  0383  1D03               	skipz
 13469  0384  2B8F               	goto	u5695
 13470  0385  0822               	movf	___aodiv@divisor+2,w
 13471  0386  022A               	subwf	___aodiv@dividend+2,w
 13472  0387  1D03               	skipz
 13473  0388  2B8F               	goto	u5695
 13474  0389  0821               	movf	___aodiv@divisor+1,w
 13475  038A  0229               	subwf	___aodiv@dividend+1,w
 13476  038B  1D03               	skipz
 13477  038C  2B8F               	goto	u5695
 13478  038D  0820               	movf	___aodiv@divisor,w
 13479  038E  0228               	subwf	___aodiv@dividend,w
 13480  038F                     u5695:	
 13481  038F  1C03               	skipc
 13482  0390  2BA2               	goto	l6646
 13483  0391  0820               	movf	___aodiv@divisor,w
 13484  0392  02A8               	subwf	___aodiv@dividend,f
 13485  0393  0821               	movf	___aodiv@divisor+1,w
 13486  0394  3BA9               	subwfb	___aodiv@dividend+1,f
 13487  0395  0822               	movf	___aodiv@divisor+2,w
 13488  0396  3BAA               	subwfb	___aodiv@dividend+2,f
 13489  0397  0823               	movf	___aodiv@divisor+3,w
 13490  0398  3BAB               	subwfb	___aodiv@dividend+3,f
 13491  0399  0824               	movf	___aodiv@divisor+4,w
 13492  039A  3BAC               	subwfb	___aodiv@dividend+4,f
 13493  039B  0825               	movf	___aodiv@divisor+5,w
 13494  039C  3BAD               	subwfb	___aodiv@dividend+5,f
 13495  039D  0826               	movf	___aodiv@divisor+6,w
 13496  039E  3BAE               	subwfb	___aodiv@dividend+6,f
 13497  039F  0827               	movf	___aodiv@divisor+7,w
 13498  03A0  3BAF               	subwfb	___aodiv@dividend+7,f
 13499  03A1  1433               	bsf	___aodiv@quotient,0
 13500  03A2                     l6646:	
 13501  03A2  36A7               	lsrf	___aodiv@divisor+7,f
 13502  03A3  0CA6               	rrf	___aodiv@divisor+6,f
 13503  03A4  0CA5               	rrf	___aodiv@divisor+5,f
 13504  03A5  0CA4               	rrf	___aodiv@divisor+4,f
 13505  03A6  0CA3               	rrf	___aodiv@divisor+3,f
 13506  03A7  0CA2               	rrf	___aodiv@divisor+2,f
 13507  03A8  0CA1               	rrf	___aodiv@divisor+1,f
 13508  03A9  0CA0               	rrf	___aodiv@divisor,f
 13509  03AA  3001               	movlw	1
 13510  03AB  02B1               	subwf	___aodiv@counter,f
 13511  03AC  1D03               	btfss	3,2
 13512  03AD  2B69               	goto	l6638
 13513  03AE                     l6648:	
 13514  03AE  0832               	movf	___aodiv@sign,w
 13515  03AF  1903               	btfsc	3,2
 13516  03B0  2BCF               	goto	l1749
 13517  03B1  09B3               	comf	___aodiv@quotient,f
 13518  03B2  09B4               	comf	___aodiv@quotient+1,f
 13519  03B3  09B5               	comf	___aodiv@quotient+2,f
 13520  03B4  09B6               	comf	___aodiv@quotient+3,f
 13521  03B5  09B7               	comf	___aodiv@quotient+4,f
 13522  03B6  09B8               	comf	___aodiv@quotient+5,f
 13523  03B7  09B9               	comf	___aodiv@quotient+6,f
 13524  03B8  09BA               	comf	___aodiv@quotient+7,f
 13525  03B9  0AB3               	incf	___aodiv@quotient,f
 13526  03BA  1D03               	skipz
 13527  03BB  2BCF               	goto	l1749
 13528  03BC  0AB4               	incf	___aodiv@quotient+1,f
 13529  03BD  1D03               	skipz
 13530  03BE  2BCF               	goto	l1749
 13531  03BF  0AB5               	incf	___aodiv@quotient+2,f
 13532  03C0  1D03               	skipz
 13533  03C1  2BCF               	goto	l1749
 13534  03C2  0AB6               	incf	___aodiv@quotient+3,f
 13535  03C3  1D03               	skipz
 13536  03C4  2BCF               	goto	l1749
 13537  03C5  0AB7               	incf	___aodiv@quotient+4,f
 13538  03C6  1D03               	skipz
 13539  03C7  2BCF               	goto	l1749
 13540  03C8  0AB8               	incf	___aodiv@quotient+5,f
 13541  03C9  1D03               	skipz
 13542  03CA  2BCF               	goto	l1749
 13543  03CB  0AB9               	incf	___aodiv@quotient+6,f
 13544  03CC  1D03               	skipz
 13545  03CD  2BCF               	goto	l1749
 13546  03CE  0ABA               	incf	___aodiv@quotient+7,f
 13547  03CF                     l1749:	
 13548  03CF  0020               	movlb	0	; select bank0
 13549  03D0  0833               	movf	___aodiv@quotient,w
 13550  03D1  00A0               	movwf	?___aodiv
 13551  03D2  0834               	movf	___aodiv@quotient+1,w
 13552  03D3  00A1               	movwf	?___aodiv+1
 13553  03D4  0835               	movf	___aodiv@quotient+2,w
 13554  03D5  00A2               	movwf	?___aodiv+2
 13555  03D6  0836               	movf	___aodiv@quotient+3,w
 13556  03D7  00A3               	movwf	?___aodiv+3
 13557  03D8  0837               	movf	___aodiv@quotient+4,w
 13558  03D9  00A4               	movwf	?___aodiv+4
 13559  03DA  0838               	movf	___aodiv@quotient+5,w
 13560  03DB  00A5               	movwf	?___aodiv+5
 13561  03DC  0839               	movf	___aodiv@quotient+6,w
 13562  03DD  00A6               	movwf	?___aodiv+6
 13563  03DE  083A               	movf	___aodiv@quotient+7,w
 13564  03DF  00A7               	movwf	?___aodiv+7
 13565  03E0  0008               	return
 13566  03E1                     __end_of___aodiv:	
 13567                           
 13568                           	psect	text72
 13569  0F7B                     __ptext72:	
 13570 ;; *************** function _Display_Name *****************
 13571 ;; Defined at:
 13572 ;;		line 186 in file "main.c"
 13573 ;; Parameters:    Size  Location     Type
 13574 ;;  string1         2    5[BANK0 ] PTR unsigned char 
 13575 ;;		 -> Get_ADC@string1(12), STR_4(11), STR_3(16), STR_2(13), 
 13576 ;;		 -> STR_1(12), 
 13577 ;; Auto vars:     Size  Location     Type
 13578 ;;  i               2   10[BANK0 ] int 
 13579 ;;  length          2    8[BANK0 ] int 
 13580 ;; Return value:  Size  Location     Type
 13581 ;;                  1    wreg      void 
 13582 ;; Registers used:
 13583 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13584 ;; Tracked objects:
 13585 ;;		On entry : 0/0
 13586 ;;		On exit  : 0/0
 13587 ;;		Unchanged: 0/0
 13588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13589 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13590 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13591 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13592 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13593 ;;Total ram usage:        7 bytes
 13594 ;; Hardware stack levels used:    1
 13595 ;; Hardware stack levels required when called:    7
 13596 ;; This function calls:
 13597 ;;		_SPI_Write
 13598 ;;		_strlen
 13599 ;; This function is called by:
 13600 ;;		_Get_ADC
 13601 ;;		_handleGesture
 13602 ;; This function uses a non-reentrant model
 13603 ;;
 13604                           
 13605                           
 13606                           ;psect for function _Display_Name
 13607  0F7B                     _Display_Name:	
 13608                           
 13609                           ;main.c: 187:     int length;;main.c: 188:     int i;;main.c: 192:     SPI_Write(0xFE);
 13610                           
 13611                           ;incstack = 0
 13612                           ; Regs used in _Display_Name: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13613  0F7B  30FE               	movlw	254
 13614  0F7C  318A  2255  318F   	fcall	_SPI_Write
 13615                           
 13616                           ;main.c: 193:     _delay((unsigned long)((100)*(500000/4000.0)));
 13617  0F7F  3011               	movlw	17
 13618  0F80  0020               	movlb	0	; select bank0
 13619  0F81  00A7               	movwf	??_Display_Name
 13620  0F82  303A               	movlw	58
 13621  0F83                     u7037:	
 13622  0F83  0B89               	decfsz	9,f
 13623  0F84  2F83               	goto	u7037
 13624  0F85  0BA7               	decfsz	??_Display_Name,f
 13625  0F86  2F83               	goto	u7037
 13626  0F87  0000               	nop
 13627                           
 13628                           ;main.c: 194:     SPI_Write(0x51);
 13629  0F88  3051               	movlw	81
 13630  0F89  318A  2255  318F   	fcall	_SPI_Write
 13631                           
 13632                           ;main.c: 195:     length = strlen(string1);
 13633  0F8C  0020               	movlb	0	; select bank0
 13634  0F8D  0826               	movf	Display_Name@string1+1,w
 13635  0F8E  00A1               	movwf	strlen@s+1
 13636  0F8F  0825               	movf	Display_Name@string1,w
 13637  0F90  00A0               	movwf	strlen@s
 13638  0F91  318A  22AE  318F   	fcall	_strlen
 13639  0F94  0020               	movlb	0	; select bank0
 13640  0F95  0821               	movf	?_strlen+1,w
 13641  0F96  00A9               	movwf	Display_Name@length+1
 13642  0F97  0820               	movf	?_strlen,w
 13643  0F98  00A8               	movwf	Display_Name@length
 13644                           
 13645                           ;main.c: 196:     for(i = 0; i < length; i++){
 13646  0F99  01AA               	clrf	Display_Name@i
 13647  0F9A  01AB               	clrf	Display_Name@i+1
 13648  0F9B                     l7048:	
 13649  0F9B  082B               	movf	Display_Name@i+1,w
 13650  0F9C  3A80               	xorlw	128
 13651  0F9D  00A7               	movwf	??_Display_Name
 13652  0F9E  0829               	movf	Display_Name@length+1,w
 13653  0F9F  3A80               	xorlw	128
 13654  0FA0  0227               	subwf	??_Display_Name,w
 13655  0FA1  1D03               	skipz
 13656  0FA2  2FA5               	goto	u6165
 13657  0FA3  0828               	movf	Display_Name@length,w
 13658  0FA4  022A               	subwf	Display_Name@i,w
 13659  0FA5                     u6165:	
 13660  0FA5  1803               	btfsc	3,0
 13661  0FA6  2FB8               	goto	l958
 13662                           
 13663                           ;main.c: 197:         SPI_Write(string1[i]);
 13664  0FA7  0020               	movlb	0	; select bank0
 13665  0FA8  0825               	movf	Display_Name@string1,w
 13666  0FA9  072A               	addwf	Display_Name@i,w
 13667  0FAA  0084               	movwf	4
 13668  0FAB  0826               	movf	Display_Name@string1+1,w
 13669  0FAC  3D2B               	addwfc	Display_Name@i+1,w
 13670  0FAD  0085               	movwf	5
 13671  0FAE  0800               	movf	0,w	;code access
 13672  0FAF  318A  2255  318F   	fcall	_SPI_Write
 13673                           
 13674                           ;main.c: 198:     }
 13675  0FB2  3001               	movlw	1
 13676  0FB3  0020               	movlb	0	; select bank0
 13677  0FB4  07AA               	addwf	Display_Name@i,f
 13678  0FB5  3000               	movlw	0
 13679  0FB6  3DAB               	addwfc	Display_Name@i+1,f
 13680  0FB7  2F9B               	goto	l7048
 13681  0FB8                     l958:	
 13682                           
 13683                           ;main.c: 199:     printed = 1;
 13684  0FB8  0021               	movlb	1	; select bank1
 13685  0FB9  01BF               	clrf	_printed^(0+128)
 13686  0FBA  0ABF               	incf	_printed^(0+128),f
 13687  0FBB  0008               	return
 13688  0FBC                     __end_of_Display_Name:	
 13689                           
 13690                           	psect	text73
 13691  0AAE                     __ptext73:	
 13692 ;; *************** function _strlen *****************
 13693 ;; Defined at:
 13694 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
 13695 ;; Parameters:    Size  Location     Type
 13696 ;;  s               2    0[BANK0 ] PTR const unsigned char 
 13697 ;;		 -> dbuf(32), UART_Byte@bits(7), Get_ADC@string1(12), STR_4(11), 
 13698 ;;		 -> STR_3(16), STR_2(13), STR_1(12), 
 13699 ;; Auto vars:     Size  Location     Type
 13700 ;;  a               2    3[BANK0 ] PTR const unsigned char 
 13701 ;;		 -> dbuf(32), UART_Byte@bits(7), Get_ADC@string1(12), STR_4(11), 
 13702 ;;		 -> STR_3(16), STR_2(13), STR_1(12), 
 13703 ;; Return value:  Size  Location     Type
 13704 ;;                  2    0[BANK0 ] unsigned int 
 13705 ;; Registers used:
 13706 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 13707 ;; Tracked objects:
 13708 ;;		On entry : 0/0
 13709 ;;		On exit  : 0/0
 13710 ;;		Unchanged: 0/0
 13711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13712 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13713 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13714 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13715 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13716 ;;Total ram usage:        5 bytes
 13717 ;; Hardware stack levels used:    1
 13718 ;; Hardware stack levels required when called:    5
 13719 ;; This function calls:
 13720 ;;		Nothing
 13721 ;; This function is called by:
 13722 ;;		_Display_Name
 13723 ;;		_pad
 13724 ;;		_strcat
 13725 ;; This function uses a non-reentrant model
 13726 ;;
 13727                           
 13728                           
 13729                           ;psect for function _strlen
 13730  0AAE                     _strlen:	
 13731                           
 13732                           ;incstack = 0
 13733                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0]
 13734  0AAE  0020               	movlb	0	; select bank0
 13735  0AAF  0821               	movf	strlen@s+1,w
 13736  0AB0  00A4               	movwf	strlen@a+1
 13737  0AB1  0820               	movf	strlen@s,w
 13738  0AB2  00A3               	movwf	strlen@a
 13739  0AB3                     l6552:	
 13740  0AB3  0820               	movf	strlen@s,w
 13741  0AB4  0084               	movwf	4
 13742  0AB5  0821               	movf	strlen@s+1,w
 13743  0AB6  0085               	movwf	5
 13744  0AB7  0012               	moviw fsr0++
 13745  0AB8  1903               	btfsc	3,2
 13746  0AB9  2ABF               	goto	l6554
 13747  0ABA  3001               	movlw	1
 13748  0ABB  07A0               	addwf	strlen@s,f
 13749  0ABC  3000               	movlw	0
 13750  0ABD  3DA1               	addwfc	strlen@s+1,f
 13751  0ABE  2AB3               	goto	l6552
 13752  0ABF                     l6554:	
 13753  0ABF  0823               	movf	strlen@a,w
 13754  0AC0  0220               	subwf	strlen@s,w
 13755  0AC1  00A0               	movwf	?_strlen
 13756  0AC2  0824               	movf	strlen@a+1,w
 13757  0AC3  3B21               	subwfb	strlen@s+1,w
 13758  0AC4  00A1               	movwf	?_strlen+1
 13759  0AC5  0008               	return
 13760  0AC6                     __end_of_strlen:	
 13761                           
 13762                           	psect	text74
 13763  0B66                     __ptext74:	
 13764 ;; *************** function _ADC_GetConversion *****************
 13765 ;; Defined at:
 13766 ;;		line 113 in file "mcc_generated_files/adc.c"
 13767 ;; Parameters:    Size  Location     Type
 13768 ;;  channel         1    wreg     enum E6648
 13769 ;; Auto vars:     Size  Location     Type
 13770 ;;  channel         1    3[BANK0 ] enum E6648
 13771 ;; Return value:  Size  Location     Type
 13772 ;;                  2    0[BANK0 ] unsigned short 
 13773 ;; Registers used:
 13774 ;;		wreg, status,2, status,0
 13775 ;; Tracked objects:
 13776 ;;		On entry : 0/0
 13777 ;;		On exit  : 0/0
 13778 ;;		Unchanged: 0/0
 13779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13780 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13781 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13782 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13783 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13784 ;;Total ram usage:        4 bytes
 13785 ;; Hardware stack levels used:    1
 13786 ;; Hardware stack levels required when called:    5
 13787 ;; This function calls:
 13788 ;;		Nothing
 13789 ;; This function is called by:
 13790 ;;		_Get_ADC
 13791 ;;		_On_Off
 13792 ;; This function uses a non-reentrant model
 13793 ;;
 13794                           
 13795                           
 13796                           ;psect for function _ADC_GetConversion
 13797  0B66                     _ADC_GetConversion:	
 13798                           
 13799                           ;incstack = 0
 13800                           ; Regs used in _ADC_GetConversion: [wreg+status,2+status,0]
 13801                           ;ADC_GetConversion@channel stored from wreg
 13802  0B66  0020               	movlb	0	; select bank0
 13803  0B67  00A3               	movwf	ADC_GetConversion@channel
 13804                           
 13805                           ;mcc_generated_files/adc.c: 113: adc_result_t ADC_GetConversion(adc_channel_t channel);m
      +                          cc_generated_files/adc.c: 114: {;mcc_generated_files/adc.c: 116:     ADCON0bits.CHS = ch
      +                          annel;
 13806  0B68  0823               	movf	ADC_GetConversion@channel,w
 13807  0B69  00A2               	movwf	??_ADC_GetConversion
 13808  0B6A  0DA2               	rlf	??_ADC_GetConversion,f
 13809  0B6B  0DA2               	rlf	??_ADC_GetConversion,f
 13810  0B6C  0021               	movlb	1	; select bank1
 13811  0B6D  081D               	movf	29,w	;volatile
 13812  0B6E  0020               	movlb	0	; select bank0
 13813  0B6F  0622               	xorwf	??_ADC_GetConversion,w
 13814  0B70  3903               	andlw	-253
 13815  0B71  0622               	xorwf	??_ADC_GetConversion,w
 13816  0B72  0021               	movlb	1	; select bank1
 13817  0B73  009D               	movwf	29	;volatile
 13818                           
 13819                           ;mcc_generated_files/adc.c: 119:     ADCON0bits.ADON = 1;
 13820  0B74  141D               	bsf	29,0	;volatile
 13821                           
 13822                           ;mcc_generated_files/adc.c: 125:     ADCON0bits.ADGO = 1;
 13823                           
 13824                           ;mcc_generated_files/adc.c: 122:     _delay((unsigned long)((5)*(500000/4000000.0)));
 13825  0B75  0021               	movlb	1	; select bank1
 13826  0B76  149D               	bsf	29,1	;volatile
 13827  0B77                     l645:	
 13828                           ;mcc_generated_files/adc.c: 131:     }
 13829                           
 13830                           ;mcc_generated_files/adc.c: 128:     while (ADCON0bits.ADGO)
 13831                           
 13832                           
 13833                           ;mcc_generated_files/adc.c: 128:     while (ADCON0bits.ADGO)
 13834  0B77  0021               	movlb	1	; select bank1
 13835  0B78  1C9D               	btfss	29,1	;volatile
 13836  0B79  2B7C               	goto	l7030
 13837  0B7A  0064               	clrwdt	;# 
 13838  0B7B  2B77               	goto	l645
 13839  0B7C                     l7030:	
 13840                           
 13841                           ;mcc_generated_files/adc.c: 134:     return ((adc_result_t)((ADRESH << 8) + ADRESL));
 13842  0B7C  081C               	movf	28,w	;volatile
 13843  0B7D  0020               	movlb	0	; select bank0
 13844  0B7E  00A1               	movwf	?_ADC_GetConversion+1
 13845  0B7F  0021               	movlb	1	; select bank1
 13846  0B80  081B               	movf	27,w	;volatile
 13847  0B81  0020               	movlb	0	; select bank0
 13848  0B82  00A0               	movwf	?_ADC_GetConversion
 13849  0B83  0008               	return
 13850  0B84                     __end_of_ADC_GetConversion:	
 13851                           
 13852                           	psect	text75
 13853  09F8                     __ptext75:	
 13854 ;; *************** function _Display_Clear *****************
 13855 ;; Defined at:
 13856 ;;		line 202 in file "main.c"
 13857 ;; Parameters:    Size  Location     Type
 13858 ;;		None
 13859 ;; Auto vars:     Size  Location     Type
 13860 ;;		None
 13861 ;; Return value:  Size  Location     Type
 13862 ;;                  1    wreg      void 
 13863 ;; Registers used:
 13864 ;;		wreg, status,2, status,0, pclath, cstack
 13865 ;; Tracked objects:
 13866 ;;		On entry : 0/0
 13867 ;;		On exit  : 0/0
 13868 ;;		Unchanged: 0/0
 13869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13870 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13871 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13872 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13873 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13874 ;;Total ram usage:        1 bytes
 13875 ;; Hardware stack levels used:    1
 13876 ;; Hardware stack levels required when called:    7
 13877 ;; This function calls:
 13878 ;;		_SPI_Write
 13879 ;; This function is called by:
 13880 ;;		_main
 13881 ;; This function uses a non-reentrant model
 13882 ;;
 13883                           
 13884                           
 13885                           ;psect for function _Display_Clear
 13886  09F8                     _Display_Clear:	
 13887                           
 13888                           ;main.c: 203:     SPI_Write(0xFE);
 13889                           
 13890                           ;incstack = 0
 13891                           ; Regs used in _Display_Clear: [wreg+status,2+status,0+pclath+cstack]
 13892  09F8  30FE               	movlw	254
 13893  09F9  318A  2255  3189   	fcall	_SPI_Write
 13894                           
 13895                           ;main.c: 204:     _delay((unsigned long)((100)*(500000/4000.0)));
 13896  09FC  3011               	movlw	17
 13897  09FD  0020               	movlb	0	; select bank0
 13898  09FE  00A3               	movwf	??_Display_Clear
 13899  09FF  303A               	movlw	58
 13900  0A00                     u7047:	
 13901  0A00  0B89               	decfsz	9,f
 13902  0A01  2A00               	goto	u7047
 13903  0A02  0BA3               	decfsz	??_Display_Clear,f
 13904  0A03  2A00               	goto	u7047
 13905  0A04  0000               	nop
 13906                           
 13907                           ;main.c: 205:     SPI_Write(0x51);
 13908  0A05  3051               	movlw	81
 13909  0A06  318A  2255         	fcall	_SPI_Write
 13910  0A08  0008               	return
 13911  0A09                     __end_of_Display_Clear:	
 13912                           
 13913                           	psect	text76
 13914  0A55                     __ptext76:	
 13915 ;; *************** function _SPI_Write *****************
 13916 ;; Defined at:
 13917 ;;		line 179 in file "main.c"
 13918 ;; Parameters:    Size  Location     Type
 13919 ;;  incoming        1    wreg     unsigned char 
 13920 ;; Auto vars:     Size  Location     Type
 13921 ;;  incoming        1    2[BANK0 ] unsigned char 
 13922 ;; Return value:  Size  Location     Type
 13923 ;;                  1    wreg      void 
 13924 ;; Registers used:
 13925 ;;		wreg, status,2, status,0, pclath, cstack
 13926 ;; Tracked objects:
 13927 ;;		On entry : 0/0
 13928 ;;		On exit  : 0/0
 13929 ;;		Unchanged: 0/0
 13930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13931 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13932 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13933 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13934 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13935 ;;Total ram usage:        2 bytes
 13936 ;; Hardware stack levels used:    1
 13937 ;; Hardware stack levels required when called:    6
 13938 ;; This function calls:
 13939 ;;		_SPI2_Exchange8bit
 13940 ;; This function is called by:
 13941 ;;		_Display_Name
 13942 ;;		_Display_Clear
 13943 ;; This function uses a non-reentrant model
 13944 ;;
 13945                           
 13946                           
 13947                           ;psect for function _SPI_Write
 13948  0A55                     _SPI_Write:	
 13949                           
 13950                           ;incstack = 0
 13951                           ; Regs used in _SPI_Write: [wreg+status,2+status,0+pclath+cstack]
 13952                           ;SPI_Write@incoming stored from wreg
 13953  0A55  0020               	movlb	0	; select bank0
 13954  0A56  00A2               	movwf	SPI_Write@incoming
 13955                           
 13956                           ;main.c: 180:     do { LATCbits.LATC0 = 0; } while(0);
 13957  0A57  0022               	movlb	2	; select bank2
 13958  0A58  100E               	bcf	14,0	;volatile
 13959                           
 13960                           ;main.c: 181:     SPI2_Exchange8bit(incoming);
 13961  0A59  0020               	movlb	0	; select bank0
 13962  0A5A  0822               	movf	SPI_Write@incoming,w
 13963  0A5B  3189  21E9  318A   	fcall	_SPI2_Exchange8bit
 13964  0A5E  0022               	movlb	2	; select bank2
 13965  0A5F  140E               	bsf	14,0	;volatile
 13966                           
 13967                           ;main.c: 183:     _delay((unsigned long)((100)*(500000/4000.0)));
 13968  0A60  3011               	movlw	17
 13969  0A61  0020               	movlb	0	; select bank0
 13970  0A62  00A1               	movwf	??_SPI_Write
 13971  0A63  303A               	movlw	58
 13972  0A64                     u7057:	
 13973  0A64  0B89               	decfsz	9,f
 13974  0A65  2A64               	goto	u7057
 13975  0A66  0BA1               	decfsz	??_SPI_Write,f
 13976  0A67  2A64               	goto	u7057
 13977  0A68  0000               	nop
 13978  0A69  0008               	return
 13979  0A6A                     __end_of_SPI_Write:	
 13980                           
 13981                           	psect	text77
 13982  09E9                     __ptext77:	
 13983 ;; *************** function _SPI2_Exchange8bit *****************
 13984 ;; Defined at:
 13985 ;;		line 79 in file "mcc_generated_files/spi2.c"
 13986 ;; Parameters:    Size  Location     Type
 13987 ;;  data            1    wreg     unsigned char 
 13988 ;; Auto vars:     Size  Location     Type
 13989 ;;  data            1    0[BANK0 ] unsigned char 
 13990 ;; Return value:  Size  Location     Type
 13991 ;;                  1    wreg      unsigned char 
 13992 ;; Registers used:
 13993 ;;		wreg
 13994 ;; Tracked objects:
 13995 ;;		On entry : 0/0
 13996 ;;		On exit  : 0/0
 13997 ;;		Unchanged: 0/0
 13998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13999 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14000 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14001 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14002 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14003 ;;Total ram usage:        1 bytes
 14004 ;; Hardware stack levels used:    1
 14005 ;; Hardware stack levels required when called:    5
 14006 ;; This function calls:
 14007 ;;		Nothing
 14008 ;; This function is called by:
 14009 ;;		_SPI_Write
 14010 ;;		_SPI2_Exchange8bitBuffer
 14011 ;; This function uses a non-reentrant model
 14012 ;;
 14013                           
 14014                           
 14015                           ;psect for function _SPI2_Exchange8bit
 14016  09E9                     _SPI2_Exchange8bit:	
 14017                           
 14018                           ;incstack = 0
 14019                           ; Regs used in _SPI2_Exchange8bit: [wreg]
 14020                           ;SPI2_Exchange8bit@data stored from wreg
 14021  09E9  0020               	movlb	0	; select bank0
 14022  09EA  00A0               	movwf	SPI2_Exchange8bit@data
 14023                           
 14024                           ;mcc_generated_files/spi2.c: 79: uint8_t SPI2_Exchange8bit(uint8_t data);mcc_generated_f
      +                          iles/spi2.c: 80: {;mcc_generated_files/spi2.c: 82:     SSP2CON1bits.WCOL = 0;
 14025  09EB  0024               	movlb	4	; select bank4
 14026  09EC  139D               	bcf	29,7	;volatile
 14027                           
 14028                           ;mcc_generated_files/spi2.c: 84:     SSP2BUF = data;
 14029  09ED  0020               	movlb	0	; select bank0
 14030  09EE  0820               	movf	SPI2_Exchange8bit@data,w
 14031  09EF  0024               	movlb	4	; select bank4
 14032  09F0  0099               	movwf	25	;volatile
 14033  09F1                     l554:	
 14034                           ;mcc_generated_files/spi2.c: 89:     }
 14035                           
 14036                           ;mcc_generated_files/spi2.c: 86:     while(SSP2STATbits.BF == 0x0)
 14037                           
 14038                           
 14039                           ;mcc_generated_files/spi2.c: 86:     while(SSP2STATbits.BF == 0x0)
 14040  09F1  0024               	movlb	4	; select bank4
 14041  09F2  181C               	btfsc	28,0	;volatile
 14042  09F3  29F6               	goto	l6758
 14043  09F4  0064               	clrwdt	;# 
 14044  09F5  29F1               	goto	l554
 14045  09F6                     l6758:	
 14046                           
 14047                           ;mcc_generated_files/spi2.c: 91:     return (SSP2BUF);
 14048  09F6  0819               	movf	25,w	;volatile
 14049  09F7  0008               	return
 14050  09F8                     __end_of_SPI2_Exchange8bit:	
 14051                           
 14052                           	psect	intentry
 14053  0004                     __pintentry:	
 14054 ;; *************** function _INTERRUPT_InterruptManager *****************
 14055 ;; Defined at:
 14056 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 14057 ;; Parameters:    Size  Location     Type
 14058 ;;		None
 14059 ;; Auto vars:     Size  Location     Type
 14060 ;;		None
 14061 ;; Return value:  Size  Location     Type
 14062 ;;                  1    wreg      void 
 14063 ;; Registers used:
 14064 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14065 ;; Tracked objects:
 14066 ;;		On entry : 0/0
 14067 ;;		On exit  : 0/0
 14068 ;;		Unchanged: 0/0
 14069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14070 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14071 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14072 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14073 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14074 ;;Total ram usage:        0 bytes
 14075 ;; Hardware stack levels used:    1
 14076 ;; Hardware stack levels required when called:    4
 14077 ;; This function calls:
 14078 ;;		Absolute function
 14079 ;;		_EUSART_Receive_ISR
 14080 ;;		_EUSART_Transmit_ISR
 14081 ;;		_PIN_MANAGER_IOC
 14082 ;;		_i2c_ISR
 14083 ;;		_i2c_busCollisionISR
 14084 ;; This function is called by:
 14085 ;;		Interrupt level 1
 14086 ;; This function uses a non-reentrant model
 14087 ;;
 14088                           
 14089  0004                     _INTERRUPT_InterruptManager:	
 14090                           
 14091                           ;incstack = 0
 14092  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 14093                           
 14094                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14095  0005  3180               	pagesel	$
 14096                           
 14097                           ;mcc_generated_files/interrupt_manager.c: 55:     if(PIE0bits.IOCIE == 1 && PIR0bits.IOC
      +                          IF == 1)
 14098  0006  0021               	movlb	1	; select bank1
 14099  0007  1E10               	btfss	16,4	;volatile
 14100  0008  2810               	goto	i1l249
 14101  0009  0020               	movlb	0	; select bank0
 14102  000A  1E10               	btfss	16,4	;volatile
 14103  000B  2810               	goto	i1l249
 14104                           
 14105                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         PIN_MANAGER_IOC();
 14106  000C  3188  2091  3180   	fcall	_PIN_MANAGER_IOC
 14107                           
 14108                           ;mcc_generated_files/interrupt_manager.c: 58:     }
 14109  000F  2845               	goto	i1l261
 14110  0010                     i1l249:	
 14111                           ;mcc_generated_files/interrupt_manager.c: 59:     else if(INTCONbits.PEIE == 1)
 14112                           
 14113  0010  1F0B               	btfss	11,6	;volatile
 14114  0011  2845               	goto	i1l261
 14115                           
 14116                           ;mcc_generated_files/interrupt_manager.c: 60:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 61:         if(PIE1bits.TXIE == 1 && PIR1bits.TXIF == 1)
 14117  0012  0021               	movlb	1	; select bank1
 14118  0013  1E11               	btfss	17,4	;volatile
 14119  0014  281F               	goto	i1l252
 14120  0015  0020               	movlb	0	; select bank0
 14121  0016  1E11               	btfss	17,4	;volatile
 14122  0017  281F               	goto	i1l252
 14123                           
 14124                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             EUSART_TxDefaultInterruptHandler();
 14125  0018  0021               	movlb	1	; select bank1
 14126  0019  0869               	movf	(_EUSART_TxDefaultInterruptHandler+1)^(0+128),w
 14127  001A  008A               	movwf	10
 14128  001B  0868               	movf	_EUSART_TxDefaultInterruptHandler^(0+128),w
 14129  001C  000A               	callw
 14130  001D  3180               	pagesel	$
 14131                           
 14132                           ;mcc_generated_files/interrupt_manager.c: 64:         }
 14133  001E  2845               	goto	i1l261
 14134  001F                     i1l252:	
 14135                           ;mcc_generated_files/interrupt_manager.c: 65:         else if(PIE1bits.RCIE == 1 && PIR1
      +                          bits.RCIF == 1)
 14136                           
 14137  001F  0021               	movlb	1	; select bank1
 14138  0020  1E91               	btfss	17,5	;volatile
 14139  0021  282C               	goto	i1l254
 14140  0022  0020               	movlb	0	; select bank0
 14141  0023  1E91               	btfss	17,5	;volatile
 14142  0024  282C               	goto	i1l254
 14143                           
 14144                           ;mcc_generated_files/interrupt_manager.c: 66:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 67:             EUSART_RxDefaultInterruptHandler();
 14145  0025  0021               	movlb	1	; select bank1
 14146  0026  0867               	movf	(_EUSART_RxDefaultInterruptHandler+1)^(0+128),w
 14147  0027  008A               	movwf	10
 14148  0028  0866               	movf	_EUSART_RxDefaultInterruptHandler^(0+128),w
 14149  0029  000A               	callw
 14150  002A  3180               	pagesel	$
 14151                           
 14152                           ;mcc_generated_files/interrupt_manager.c: 68:         }
 14153  002B  2845               	goto	i1l261
 14154  002C                     i1l254:	
 14155                           ;mcc_generated_files/interrupt_manager.c: 69:         else if(PIE1bits.BCL1IE == 1 && PI
      +                          R1bits.BCL1IF == 1)
 14156                           
 14157  002C  0021               	movlb	1	; select bank1
 14158  002D  1D11               	btfss	17,2	;volatile
 14159  002E  2839               	goto	i1l256
 14160  002F  0020               	movlb	0	; select bank0
 14161  0030  1D11               	btfss	17,2	;volatile
 14162  0031  2839               	goto	i1l256
 14163                           
 14164                           ;mcc_generated_files/interrupt_manager.c: 70:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 71:             i2c1_driver_busCollisionISR();
 14165  0032  0021               	movlb	1	; select bank1
 14166  0033  083B               	movf	(_i2c1_driver_busCollisionISR+1)^(0+128),w
 14167  0034  008A               	movwf	10
 14168  0035  083A               	movf	_i2c1_driver_busCollisionISR^(0+128),w
 14169  0036  000A               	callw
 14170  0037  3180               	pagesel	$
 14171                           
 14172                           ;mcc_generated_files/interrupt_manager.c: 72:         }
 14173  0038  2845               	goto	i1l261
 14174  0039                     i1l256:	
 14175                           ;mcc_generated_files/interrupt_manager.c: 73:         else if(PIE1bits.SSP1IE == 1 && PI
      +                          R1bits.SSP1IF == 1)
 14176                           
 14177  0039  0021               	movlb	1	; select bank1
 14178  003A  1D91               	btfss	17,3	;volatile
 14179  003B  2845               	goto	i1l261
 14180  003C  0020               	movlb	0	; select bank0
 14181  003D  1D91               	btfss	17,3	;volatile
 14182  003E  2845               	goto	i1l261
 14183                           
 14184                           ;mcc_generated_files/interrupt_manager.c: 74:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 75:             i2c1_driver_i2cISR();
 14185  003F  0021               	movlb	1	; select bank1
 14186  0040  0839               	movf	(_i2c1_driver_i2cISR+1)^(0+128),w
 14187  0041  008A               	movwf	10
 14188  0042  0838               	movf	_i2c1_driver_i2cISR^(0+128),w
 14189  0043  000A               	callw
 14190  0044  3180               	pagesel	$
 14191  0045                     i1l261:	
 14192                           ;mcc_generated_files/interrupt_manager.c: 76:         }
 14193                           
 14194  0045  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 14195  0046  0009               	retfie
 14196  0047                     __end_of_INTERRUPT_InterruptManager:	
 14197                           
 14198                           	psect	text79
 14199  08AB                     __ptext79:	
 14200 ;; *************** function _i2c_busCollisionISR *****************
 14201 ;; Defined at:
 14202 ;;		line 435 in file "mcc_generated_files/drivers/i2c_master.c"
 14203 ;; Parameters:    Size  Location     Type
 14204 ;;		None
 14205 ;; Auto vars:     Size  Location     Type
 14206 ;;		None
 14207 ;; Return value:  Size  Location     Type
 14208 ;;                  1    wreg      void 
 14209 ;; Registers used:
 14210 ;;		status,2, status,0, pclath, cstack
 14211 ;; Tracked objects:
 14212 ;;		On entry : 0/0
 14213 ;;		On exit  : 0/0
 14214 ;;		Unchanged: 0/0
 14215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14217 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14218 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14219 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14220 ;;Total ram usage:        0 bytes
 14221 ;; Hardware stack levels used:    1
 14222 ;; Hardware stack levels required when called:    1
 14223 ;; This function calls:
 14224 ;;		_i2c1_driver_clearBusCollision
 14225 ;; This function is called by:
 14226 ;;		_i2c_open
 14227 ;;		_INTERRUPT_InterruptManager
 14228 ;; This function uses a non-reentrant model
 14229 ;;
 14230                           
 14231                           
 14232                           ;psect for function _i2c_busCollisionISR
 14233  08AB                     _i2c_busCollisionISR:	
 14234                           
 14235                           ;mcc_generated_files/drivers/i2c_master.c: 437:     i2c1_driver_clearBusCollision();
 14236                           
 14237                           ;incstack = 0
 14238                           ; Regs used in _i2c_busCollisionISR: [status,2+status,0+pclath+cstack]
 14239  08AB  3188  20A8         	fcall	_i2c1_driver_clearBusCollision
 14240  08AD  0008               	return
 14241  08AE                     __end_of_i2c_busCollisionISR:	
 14242                           
 14243                           	psect	text80
 14244  08A8                     __ptext80:	
 14245 ;; *************** function _i2c1_driver_clearBusCollision *****************
 14246 ;; Defined at:
 14247 ;;		line 253 in file "mcc_generated_files/i2c1_driver.c"
 14248 ;; Parameters:    Size  Location     Type
 14249 ;;		None
 14250 ;; Auto vars:     Size  Location     Type
 14251 ;;		None
 14252 ;; Return value:  Size  Location     Type
 14253 ;;                  1    wreg      void 
 14254 ;; Registers used:
 14255 ;;		None
 14256 ;; Tracked objects:
 14257 ;;		On entry : 0/0
 14258 ;;		On exit  : 0/0
 14259 ;;		Unchanged: 0/0
 14260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14261 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14262 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14263 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14264 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14265 ;;Total ram usage:        0 bytes
 14266 ;; Hardware stack levels used:    1
 14267 ;; This function calls:
 14268 ;;		Nothing
 14269 ;; This function is called by:
 14270 ;;		_i2c_busCollisionISR
 14271 ;; This function uses a non-reentrant model
 14272 ;;
 14273                           
 14274                           
 14275                           ;psect for function _i2c1_driver_clearBusCollision
 14276  08A8                     _i2c1_driver_clearBusCollision:	
 14277                           
 14278                           ;mcc_generated_files/i2c1_driver.c: 255:     PIR1bits.BCL1IF = 0;
 14279                           
 14280                           ;incstack = 0
 14281                           ; Regs used in _i2c1_driver_clearBusCollision: []
 14282  08A8  0020               	movlb	0	; select bank0
 14283  08A9  1111               	bcf	17,2	;volatile
 14284  08AA  0008               	return
 14285  08AB                     __end_of_i2c1_driver_clearBusCollision:	
 14286                           
 14287                           	psect	text81
 14288  0BC6                     __ptext81:	
 14289 ;; *************** function _i2c_ISR *****************
 14290 ;; Defined at:
 14291 ;;		line 419 in file "mcc_generated_files/drivers/i2c_master.c"
 14292 ;; Parameters:    Size  Location     Type
 14293 ;;		None
 14294 ;; Auto vars:     Size  Location     Type
 14295 ;;		None
 14296 ;; Return value:  Size  Location     Type
 14297 ;;                  1    wreg      void 
 14298 ;; Registers used:
 14299 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14300 ;; Tracked objects:
 14301 ;;		On entry : 0/0
 14302 ;;		On exit  : 0/0
 14303 ;;		Unchanged: 0/0
 14304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14305 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14306 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14307 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14308 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14309 ;;Total ram usage:        3 bytes
 14310 ;; Hardware stack levels used:    1
 14311 ;; Hardware stack levels required when called:    3
 14312 ;; This function calls:
 14313 ;;		_do_I2C_DO_ACK
 14314 ;;		_do_I2C_DO_ADDRESS_NACK
 14315 ;;		_do_I2C_DO_NACK_RESTART
 14316 ;;		_do_I2C_DO_NACK_STOP
 14317 ;;		_do_I2C_IDLE
 14318 ;;		_do_I2C_RCEN
 14319 ;;		_do_I2C_RESET
 14320 ;;		_do_I2C_RX
 14321 ;;		_do_I2C_SEND_ADR_READ
 14322 ;;		_do_I2C_SEND_ADR_WRITE
 14323 ;;		_do_I2C_SEND_RESTART
 14324 ;;		_do_I2C_SEND_RESTART_READ
 14325 ;;		_do_I2C_SEND_RESTART_WRITE
 14326 ;;		_do_I2C_SEND_STOP
 14327 ;;		_do_I2C_TX
 14328 ;;		_do_I2C_TX_EMPTY
 14329 ;;		_i2c1_driver_isNACK
 14330 ;;		_mssp1_clearIRQ
 14331 ;; This function is called by:
 14332 ;;		_i2c_open
 14333 ;;		_i2c_poller
 14334 ;;		_INTERRUPT_InterruptManager
 14335 ;; This function uses a non-reentrant model
 14336 ;;
 14337                           
 14338                           
 14339                           ;psect for function _i2c_ISR
 14340  0BC6                     _i2c_ISR:	
 14341                           
 14342                           ;mcc_generated_files/drivers/i2c_master.c: 421:     mssp1_clearIRQ();
 14343                           
 14344                           ;incstack = 0
 14345                           ; Regs used in _i2c_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14346  0BC6  3188  20A5  318B   	fcall	_mssp1_clearIRQ
 14347                           
 14348                           ;mcc_generated_files/drivers/i2c_master.c: 427:     if(i2c_status.addressNACKCheck && i2
      +                          c1_driver_isNACK())
 14349  0BC9  0022               	movlb	2	; select bank2
 14350  0BCA  1DA0               	btfss	_i2c_status^(0+256),3
 14351  0BCB  2BD6               	goto	i1l5436
 14352  0BCC  3189  2140  318B   	fcall	_i2c1_driver_isNACK
 14353  0BCF  1C03               	btfss	3,0
 14354  0BD0  2BD6               	goto	i1l5436
 14355                           
 14356                           ;mcc_generated_files/drivers/i2c_master.c: 428:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 429:         i2c_status.state = I2C_ADDRESS_NACK;
 14357  0BD1  300F               	movlw	15
 14358  0BD2  00F9               	movwf	??_i2c_ISR
 14359  0BD3  0879               	movf	??_i2c_ISR,w
 14360  0BD4  0022               	movlb	2	; select bank2
 14361  0BD5  00A9               	movwf	(_i2c_status^(0+256)+9)
 14362  0BD6                     i1l5436:	
 14363                           
 14364                           ;mcc_generated_files/drivers/i2c_master.c: 432:     i2c_status.state = fsmStateTable[i2c
      +                          _status.state]();
 14365  0BD6  0022               	movlb	2	; select bank2
 14366  0BD7  0829               	movf	(_i2c_status^(0+256)+9),w
 14367  0BD8  00F9               	movwf	??_i2c_ISR
 14368  0BD9  01FA               	clrf	??_i2c_ISR+1
 14369  0BDA  35F9               	lslf	??_i2c_ISR,f
 14370  0BDB  0DFA               	rlf	??_i2c_ISR+1,f
 14371  0BDC  3000               	movlw	low (_fsmStateTable| (0+32768))
 14372  0BDD  0779               	addwf	??_i2c_ISR,w
 14373  0BDE  0084               	movwf	4
 14374  0BDF  3090               	movlw	high (_fsmStateTable| (0+32768))
 14375  0BE0  3D7A               	addwfc	??_i2c_ISR+1,w
 14376  0BE1  0085               	movwf	5
 14377  0BE2  3F01               	moviw [1]fsr0
 14378  0BE3  008A               	movwf	10
 14379  0BE4  3F00               	moviw [0]fsr0
 14380  0BE5  000A               	callw
 14381  0BE6  318B               	pagesel	$
 14382  0BE7  00FB               	movwf	??_i2c_ISR+2
 14383  0BE8  087B               	movf	??_i2c_ISR+2,w
 14384  0BE9  0022               	movlb	2	; select bank2
 14385  0BEA  00A9               	movwf	(_i2c_status^(0+256)+9)
 14386  0BEB  0008               	return
 14387  0BEC                     __end_of_i2c_ISR:	
 14388                           
 14389                           	psect	text82
 14390  08A5                     __ptext82:	
 14391 ;; *************** function _mssp1_clearIRQ *****************
 14392 ;; Defined at:
 14393 ;;		line 53 in file "mcc_generated_files/i2c1_driver.c"
 14394 ;; Parameters:    Size  Location     Type
 14395 ;;		None
 14396 ;; Auto vars:     Size  Location     Type
 14397 ;;		None
 14398 ;; Return value:  Size  Location     Type
 14399 ;;                  1    wreg      void 
 14400 ;; Registers used:
 14401 ;;		None
 14402 ;; Tracked objects:
 14403 ;;		On entry : 0/0
 14404 ;;		On exit  : 0/0
 14405 ;;		Unchanged: 0/0
 14406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14407 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14408 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14409 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14410 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14411 ;;Total ram usage:        0 bytes
 14412 ;; Hardware stack levels used:    1
 14413 ;; This function calls:
 14414 ;;		Nothing
 14415 ;; This function is called by:
 14416 ;;		_i2c_ISR
 14417 ;;		_i2c_open
 14418 ;;		_i2c_close
 14419 ;; This function uses a non-reentrant model
 14420 ;;
 14421                           
 14422                           
 14423                           ;psect for function _mssp1_clearIRQ
 14424  08A5                     _mssp1_clearIRQ:	
 14425                           
 14426                           ;mcc_generated_files/i2c1_driver.c: 55:         SSP1STAT = 0x00;
 14427                           
 14428                           ;incstack = 0
 14429                           ; Regs used in _mssp1_clearIRQ: []
 14430  08A5  0020               	movlb	0	; select bank0
 14431  08A6  1191               	bcf	17,3	;volatile
 14432  08A7  0008               	return
 14433  08A8                     __end_of_mssp1_clearIRQ:	
 14434                           
 14435                           	psect	text83
 14436  078C                     __ptext83:	
 14437 ;; *************** function _do_I2C_RX *****************
 14438 ;; Defined at:
 14439 ;;		line 357 in file "mcc_generated_files/drivers/i2c_master.c"
 14440 ;; Parameters:    Size  Location     Type
 14441 ;;		None
 14442 ;; Auto vars:     Size  Location     Type
 14443 ;;		None
 14444 ;; Return value:  Size  Location     Type
 14445 ;;                  1    wreg      enum E7120
 14446 ;; Registers used:
 14447 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14448 ;; Tracked objects:
 14449 ;;		On entry : 0/0
 14450 ;;		On exit  : 0/0
 14451 ;;		Unchanged: 0/0
 14452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14453 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14454 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14455 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14456 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14457 ;;Total ram usage:        3 bytes
 14458 ;; Hardware stack levels used:    1
 14459 ;; Hardware stack levels required when called:    2
 14460 ;; This function calls:
 14461 ;;		_do_I2C_DO_NACK_RESTART
 14462 ;;		_do_I2C_DO_NACK_STOP
 14463 ;;		_i2c1_driver_sendACK
 14464 ;;		_returnReset
 14465 ;;		_returnStop
 14466 ;;		i1_i2c1_driver_getRXData
 14467 ;; This function is called by:
 14468 ;;		_i2c_ISR
 14469 ;; This function uses a non-reentrant model
 14470 ;;
 14471                           
 14472                           
 14473                           ;psect for function _do_I2C_RX
 14474  078C                     _do_I2C_RX:	
 14475                           
 14476                           ;mcc_generated_files/drivers/i2c_master.c: 359:     *i2c_status.data_ptr++ = i2c1_driver
      +                          _getRXData();
 14477                           
 14478                           ;incstack = 0
 14479                           ; Regs used in _do_I2C_RX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14480  078C  3188  209F  3187   	fcall	i1_i2c1_driver_getRXData
 14481  078F  00F6               	movwf	??_do_I2C_RX
 14482  0790  0022               	movlb	2	; select bank2
 14483  0791  0822               	movf	(low ((_i2c_status| (0+256)+2)))^0,w
 14484  0792  0086               	movwf	6
 14485  0793  0187               	clrf	7
 14486  0794  0876               	movf	??_do_I2C_RX,w
 14487  0795  0081               	movwf	1
 14488  0796  3001               	movlw	1
 14489  0797  00F6               	movwf	??_do_I2C_RX
 14490  0798  0876               	movf	??_do_I2C_RX,w
 14491  0799  07A2               	addwf	(low ((_i2c_status| (0+256)+2)))^0,f
 14492                           
 14493                           ;mcc_generated_files/drivers/i2c_master.c: 360:     if(--i2c_status.data_length)
 14494  079A  3001               	movlw	1
 14495  079B  02A3               	subwf	(_i2c_status^(0+256)+3),f
 14496  079C  3000               	movlw	0
 14497  079D  3BA4               	subwfb	((_i2c_status+1)^(0+256)+3),f
 14498  079E  0823               	movf	(_i2c_status^(0+256)+3),w
 14499  079F  0424               	iorwf	((_i2c_status+1)^(0+256)+3),w
 14500  07A0  1903               	btfsc	3,2
 14501  07A1  2FA6               	goto	i1l173
 14502                           
 14503                           ;mcc_generated_files/drivers/i2c_master.c: 361:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 362:         i2c1_driver_sendACK();
 14504  07A2  3188  20D0         	fcall	_i2c1_driver_sendACK
 14505                           
 14506                           ;mcc_generated_files/drivers/i2c_master.c: 363:         return I2C_RCEN;
 14507  07A4  3005               	movlw	5
 14508  07A5  0008               	return
 14509  07A6                     i1l173:	
 14510                           ;mcc_generated_files/drivers/i2c_master.c: 365:     else
 14511                           
 14512                           
 14513                           ;mcc_generated_files/drivers/i2c_master.c: 366:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 367:         i2c_status.bufferFree = 1;
 14514  07A6  1520               	bsf	_i2c_status^(0+256),2
 14515                           
 14516                           ;mcc_generated_files/drivers/i2c_master.c: 368:         switch(i2c_status.callbackTable[
      +                          i2c_dataComplete](i2c_status.callbackPayload[i2c_dataComplete]))
 14517  07A7  2FAE               	goto	i1l4972
 14518  07A8                     i1l4962:	
 14519                           
 14520                           ;mcc_generated_files/drivers/i2c_master.c: 372:                 return do_I2C_DO_NACK_RE
      +                          START();
 14521  07A8  3188  20F0         	fcall	_do_I2C_DO_NACK_RESTART
 14522  07AA  0008               	return
 14523  07AB                     i1l4966:	
 14524                           
 14525                           ;mcc_generated_files/drivers/i2c_master.c: 376:                 return do_I2C_DO_NACK_ST
      +                          OP();
 14526  07AB  3188  20EC         	fcall	_do_I2C_DO_NACK_STOP
 14527  07AD  0008               	return
 14528  07AE                     i1l4972:	
 14529  07AE  0837               	movf	(low ((_i2c_status| (0+256)+23)))^0,w
 14530  07AF  00F6               	movwf	??_do_I2C_RX
 14531  07B0  0876               	movf	??_do_I2C_RX,w
 14532  07B1  00F6               	movwf	returnReset@p
 14533  07B2  300B               	movlw	11
 14534  07B3  3E20               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 14535  07B4  0086               	movwf	6
 14536  07B5  3001               	movlw	1	; select bank2/3
 14537  07B6  0087               	movwf	7
 14538  07B7  3F41               	moviw [1]fsr1
 14539  07B8  008A               	movwf	10
 14540  07B9  3F40               	moviw [0]fsr1
 14541  07BA  000A               	callw
 14542  07BB  3187               	pagesel	$
 14543  07BC  00F7               	movwf	??_do_I2C_RX+1
 14544  07BD  01F8               	clrf	??_do_I2C_RX+2
 14545                           
 14546                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14547                           ; Switch size 1, requested type "simple"
 14548                           ; Number of cases is 1, Range of values is 0 to 0
 14549                           ; switch strategies available:
 14550                           ; Name         Instructions Cycles
 14551                           ; simple_byte            4     3 (average)
 14552                           ; direct_byte            8     6 (fixed)
 14553                           ; jumptable            260     6 (fixed)
 14554                           ;	Chosen strategy is simple_byte
 14555  07BE  0878               	movf	??_do_I2C_RX+2,w
 14556  07BF  3A00               	xorlw	0	; case 0
 14557  07C0  1903               	skipnz
 14558  07C1  2FC3               	goto	i1l7882
 14559  07C2  2FAB               	goto	i1l4966
 14560  07C3                     i1l7882:	
 14561                           
 14562                           ; Switch size 1, requested type "simple"
 14563                           ; Number of cases is 4, Range of values is 1 to 4
 14564                           ; switch strategies available:
 14565                           ; Name         Instructions Cycles
 14566                           ; simple_byte           13     7 (average)
 14567                           ; direct_byte           17     9 (fixed)
 14568                           ; jumptable            263     9 (fixed)
 14569                           ;	Chosen strategy is simple_byte
 14570  07C3  0877               	movf	??_do_I2C_RX+1,w
 14571  07C4  3A01               	xorlw	1	; case 1
 14572  07C5  1903               	skipnz
 14573  07C6  2FAB               	goto	i1l4966
 14574  07C7  3A03               	xorlw	3	; case 2
 14575  07C8  1903               	skipnz
 14576  07C9  2FA8               	goto	i1l4962
 14577  07CA  3A01               	xorlw	1	; case 3
 14578  07CB  1903               	skipnz
 14579  07CC  2FA8               	goto	i1l4962
 14580  07CD  3A07               	xorlw	7	; case 4
 14581  07CE  1903               	skipnz
 14582  07CF  2FAB               	goto	i1l4966
 14583  07D0  2FAB               	goto	i1l4966
 14584  07D1  0008               	return
 14585  07D2                     __end_of_do_I2C_RX:	
 14586                           
 14587                           	psect	text84
 14588  06F6                     __ptext84:	
 14589 ;; *************** function _do_I2C_TX *****************
 14590 ;; Defined at:
 14591 ;;		line 333 in file "mcc_generated_files/drivers/i2c_master.c"
 14592 ;; Parameters:    Size  Location     Type
 14593 ;;		None
 14594 ;; Auto vars:     Size  Location     Type
 14595 ;;		None
 14596 ;; Return value:  Size  Location     Type
 14597 ;;                  1    wreg      enum E7120
 14598 ;; Registers used:
 14599 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14600 ;; Tracked objects:
 14601 ;;		On entry : 0/0
 14602 ;;		On exit  : 0/0
 14603 ;;		Unchanged: 0/0
 14604 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14605 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14606 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14607 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14608 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14609 ;;Total ram usage:        3 bytes
 14610 ;; Hardware stack levels used:    1
 14611 ;; Hardware stack levels required when called:    2
 14612 ;; This function calls:
 14613 ;;		_do_I2C_SEND_RESTART_READ
 14614 ;;		_do_I2C_SEND_RESTART_WRITE
 14615 ;;		_do_I2C_SEND_STOP
 14616 ;;		_i2c1_driver_isNACK
 14617 ;;		_returnReset
 14618 ;;		_returnStop
 14619 ;;		i1_i2c1_driver_TXData
 14620 ;; This function is called by:
 14621 ;;		_i2c_ISR
 14622 ;; This function uses a non-reentrant model
 14623 ;;
 14624                           
 14625                           
 14626                           ;psect for function _do_I2C_TX
 14627  06F6                     _do_I2C_TX:	
 14628                           
 14629                           ;mcc_generated_files/drivers/i2c_master.c: 335:     if(i2c1_driver_isNACK())
 14630                           
 14631                           ;incstack = 0
 14632                           ; Regs used in _do_I2C_TX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14633  06F6  3189  2140  3186   	fcall	_i2c1_driver_isNACK
 14634  06F9  1803               	btfsc	3,0
 14635  06FA  2F05               	goto	i1l4932
 14636  06FB  2F29               	goto	i1l157
 14637  06FC                     i1l4918:	
 14638                           
 14639                           ;mcc_generated_files/drivers/i2c_master.c: 340:                 return do_I2C_SEND_RESTA
      +                          RT_READ();
 14640  06FC  3188  20D8         	fcall	_do_I2C_SEND_RESTART_READ
 14641  06FE  0008               	return
 14642  06FF                     i1l4922:	
 14643                           
 14644                           ;mcc_generated_files/drivers/i2c_master.c: 342:                 return do_I2C_SEND_RESTA
      +                          RT_WRITE();
 14645  06FF  3188  20DC         	fcall	_do_I2C_SEND_RESTART_WRITE
 14646  0701  0008               	return
 14647  0702                     i1l4926:	
 14648                           
 14649                           ;mcc_generated_files/drivers/i2c_master.c: 346:                 return do_I2C_SEND_STOP(
      +                          );
 14650  0702  3188  20E4         	fcall	_do_I2C_SEND_STOP
 14651  0704  0008               	return
 14652  0705                     i1l4932:	
 14653  0705  0022               	movlb	2	; select bank2
 14654  0706  083A               	movf	(low ((_i2c_status| (0+256)+26)))^0,w
 14655  0707  00F6               	movwf	??_do_I2C_TX
 14656  0708  0876               	movf	??_do_I2C_TX,w
 14657  0709  00F6               	movwf	returnReset@p
 14658  070A  3011               	movlw	17
 14659  070B  3E20               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 14660  070C  0086               	movwf	6
 14661  070D  3001               	movlw	1	; select bank2/3
 14662  070E  0087               	movwf	7
 14663  070F  3F41               	moviw [1]fsr1
 14664  0710  008A               	movwf	10
 14665  0711  3F40               	moviw [0]fsr1
 14666  0712  000A               	callw
 14667  0713  3186               	pagesel	$
 14668  0714  00F7               	movwf	??_do_I2C_TX+1
 14669  0715  01F8               	clrf	??_do_I2C_TX+2
 14670                           
 14671                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14672                           ; Switch size 1, requested type "simple"
 14673                           ; Number of cases is 1, Range of values is 0 to 0
 14674                           ; switch strategies available:
 14675                           ; Name         Instructions Cycles
 14676                           ; simple_byte            4     3 (average)
 14677                           ; direct_byte            8     6 (fixed)
 14678                           ; jumptable            260     6 (fixed)
 14679                           ;	Chosen strategy is simple_byte
 14680  0716  0878               	movf	??_do_I2C_TX+2,w
 14681  0717  3A00               	xorlw	0	; case 0
 14682  0718  1903               	skipnz
 14683  0719  2F1B               	goto	i1l7884
 14684  071A  2F02               	goto	i1l4926
 14685  071B                     i1l7884:	
 14686                           
 14687                           ; Switch size 1, requested type "simple"
 14688                           ; Number of cases is 4, Range of values is 1 to 4
 14689                           ; switch strategies available:
 14690                           ; Name         Instructions Cycles
 14691                           ; simple_byte           13     7 (average)
 14692                           ; direct_byte           17     9 (fixed)
 14693                           ; jumptable            263     9 (fixed)
 14694                           ;	Chosen strategy is simple_byte
 14695  071B  0877               	movf	??_do_I2C_TX+1,w
 14696  071C  3A01               	xorlw	1	; case 1
 14697  071D  1903               	skipnz
 14698  071E  2F02               	goto	i1l4926
 14699  071F  3A03               	xorlw	3	; case 2
 14700  0720  1903               	skipnz
 14701  0721  2EFC               	goto	i1l4918
 14702  0722  3A01               	xorlw	1	; case 3
 14703  0723  1903               	skipnz
 14704  0724  2EFF               	goto	i1l4922
 14705  0725  3A07               	xorlw	7	; case 4
 14706  0726  1903               	skipnz
 14707  0727  2F02               	goto	i1l4926
 14708  0728  2F02               	goto	i1l4926
 14709  0729                     i1l157:	
 14710                           ;mcc_generated_files/drivers/i2c_master.c: 349:     else
 14711                           
 14712                           
 14713                           ;mcc_generated_files/drivers/i2c_master.c: 350:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 351:         i2c_status.addressNACKCheck = 0;
 14714  0729  0022               	movlb	2	; select bank2
 14715  072A  11A0               	bcf	_i2c_status^(0+256),3
 14716                           
 14717                           ;mcc_generated_files/drivers/i2c_master.c: 352:         i2c1_driver_TXData(*i2c_status.d
      +                          ata_ptr++);
 14718  072B  3002               	movlw	2
 14719  072C  3E20               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 14720  072D  0086               	movwf	6
 14721  072E  3001               	movlw	1	; select bank2/3
 14722  072F  0087               	movwf	7
 14723  0730  3F40               	moviw [0]fsr1
 14724  0731  0084               	movwf	4
 14725  0732  0185               	clrf	5
 14726  0733  0A81               	incf	1,f
 14727  0734  0800               	movf	0,w
 14728  0735  3188  20FC  3186   	fcall	i1_i2c1_driver_TXData
 14729                           
 14730                           ;mcc_generated_files/drivers/i2c_master.c: 353:         return (--i2c_status.data_length
      +                          )?I2C_TX:I2C_TX_EMPTY;
 14731  0738  3001               	movlw	1
 14732  0739  0022               	movlb	2	; select bank2
 14733  073A  02A3               	subwf	(_i2c_status^(0+256)+3),f
 14734  073B  3000               	movlw	0
 14735  073C  3BA4               	subwfb	((_i2c_status+1)^(0+256)+3),f
 14736  073D  0823               	movf	(_i2c_status^(0+256)+3),w
 14737  073E  0424               	iorwf	((_i2c_status+1)^(0+256)+3),w
 14738  073F  1D03               	btfss	3,2
 14739  0740  2F43               	goto	i1l4940
 14740  0741  3006               	movlw	6
 14741  0742  0008               	return
 14742  0743                     i1l4940:	
 14743  0743  3003               	movlw	3
 14744  0744  0008               	return
 14745  0745                     __end_of_do_I2C_TX:	
 14746                           
 14747                           	psect	text85
 14748  0D54                     __ptext85:	
 14749 ;; *************** function _do_I2C_DO_ADDRESS_NACK *****************
 14750 ;; Defined at:
 14751 ;;		line 319 in file "mcc_generated_files/drivers/i2c_master.c"
 14752 ;; Parameters:    Size  Location     Type
 14753 ;;		None
 14754 ;; Auto vars:     Size  Location     Type
 14755 ;;		None
 14756 ;; Return value:  Size  Location     Type
 14757 ;;                  1    wreg      enum E7120
 14758 ;; Registers used:
 14759 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14760 ;; Tracked objects:
 14761 ;;		On entry : 0/0
 14762 ;;		On exit  : 0/0
 14763 ;;		Unchanged: 0/0
 14764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14766 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14767 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14768 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14769 ;;Total ram usage:        3 bytes
 14770 ;; Hardware stack levels used:    1
 14771 ;; Hardware stack levels required when called:    2
 14772 ;; This function calls:
 14773 ;;		_do_I2C_SEND_RESTART
 14774 ;;		_do_I2C_SEND_STOP
 14775 ;;		_returnReset
 14776 ;;		_returnStop
 14777 ;; This function is called by:
 14778 ;;		_i2c_ISR
 14779 ;; This function uses a non-reentrant model
 14780 ;;
 14781                           
 14782                           
 14783                           ;psect for function _do_I2C_DO_ADDRESS_NACK
 14784  0D54                     _do_I2C_DO_ADDRESS_NACK:	
 14785                           
 14786                           ;mcc_generated_files/drivers/i2c_master.c: 321:     i2c_status.addressNACKCheck = 0;
 14787                           
 14788                           ;incstack = 0
 14789                           ; Regs used in _do_I2C_DO_ADDRESS_NACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14790  0D54  0022               	movlb	2	; select bank2
 14791  0D55  11A0               	bcf	_i2c_status^(0+256),3
 14792                           
 14793                           ;mcc_generated_files/drivers/i2c_master.c: 322:     i2c_status.error = I2C_FAIL;
 14794  0D56  3002               	movlw	2
 14795  0D57  00F6               	movwf	??_do_I2C_DO_ADDRESS_NACK
 14796  0D58  0876               	movf	??_do_I2C_DO_ADDRESS_NACK,w
 14797  0D59  00AA               	movwf	(_i2c_status^(0+256)+10)
 14798                           
 14799                           ;mcc_generated_files/drivers/i2c_master.c: 323:     switch(i2c_status.callbackTable[i2c_
      +                          addressNACK](i2c_status.callbackPayload[i2c_addressNACK]))
 14800  0D5A  2D61               	goto	i1l4906
 14801  0D5B                     i1l4896:	
 14802                           
 14803                           ;mcc_generated_files/drivers/i2c_master.c: 327:             return do_I2C_SEND_RESTART()
      +                          ;
 14804  0D5B  3188  20E0         	fcall	_do_I2C_SEND_RESTART
 14805  0D5D  0008               	return
 14806  0D5E                     i1l4900:	
 14807                           
 14808                           ;mcc_generated_files/drivers/i2c_master.c: 329:             return do_I2C_SEND_STOP();
 14809  0D5E  3188  20E4         	fcall	_do_I2C_SEND_STOP
 14810  0D60  0008               	return
 14811  0D61                     i1l4906:	
 14812  0D61  0839               	movf	(low ((_i2c_status| (0+256)+25)))^0,w
 14813  0D62  00F6               	movwf	??_do_I2C_DO_ADDRESS_NACK
 14814  0D63  0876               	movf	??_do_I2C_DO_ADDRESS_NACK,w
 14815  0D64  00F6               	movwf	returnReset@p
 14816  0D65  300F               	movlw	15
 14817  0D66  3E20               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 14818  0D67  0086               	movwf	6
 14819  0D68  3001               	movlw	1	; select bank2/3
 14820  0D69  0087               	movwf	7
 14821  0D6A  3F41               	moviw [1]fsr1
 14822  0D6B  008A               	movwf	10
 14823  0D6C  3F40               	moviw [0]fsr1
 14824  0D6D  000A               	callw
 14825  0D6E  318D               	pagesel	$
 14826  0D6F  00F7               	movwf	??_do_I2C_DO_ADDRESS_NACK+1
 14827  0D70  01F8               	clrf	??_do_I2C_DO_ADDRESS_NACK+2
 14828                           
 14829                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14830                           ; Switch size 1, requested type "simple"
 14831                           ; Number of cases is 1, Range of values is 0 to 0
 14832                           ; switch strategies available:
 14833                           ; Name         Instructions Cycles
 14834                           ; simple_byte            4     3 (average)
 14835                           ; direct_byte            8     6 (fixed)
 14836                           ; jumptable            260     6 (fixed)
 14837                           ;	Chosen strategy is simple_byte
 14838  0D71  0878               	movf	??_do_I2C_DO_ADDRESS_NACK+2,w
 14839  0D72  3A00               	xorlw	0	; case 0
 14840  0D73  1903               	skipnz
 14841  0D74  2D76               	goto	i1l7886
 14842  0D75  2D5E               	goto	i1l4900
 14843  0D76                     i1l7886:	
 14844                           
 14845                           ; Switch size 1, requested type "simple"
 14846                           ; Number of cases is 2, Range of values is 2 to 3
 14847                           ; switch strategies available:
 14848                           ; Name         Instructions Cycles
 14849                           ; simple_byte            7     4 (average)
 14850                           ; direct_byte           13     9 (fixed)
 14851                           ; jumptable            263     9 (fixed)
 14852                           ;	Chosen strategy is simple_byte
 14853  0D76  0877               	movf	??_do_I2C_DO_ADDRESS_NACK+1,w
 14854  0D77  3A02               	xorlw	2	; case 2
 14855  0D78  1903               	skipnz
 14856  0D79  2D5B               	goto	i1l4896
 14857  0D7A  3A01               	xorlw	1	; case 3
 14858  0D7B  1903               	skipnz
 14859  0D7C  2D5B               	goto	i1l4896
 14860  0D7D  2D5E               	goto	i1l4900
 14861  0D7E  0008               	return
 14862  0D7F                     __end_of_do_I2C_DO_ADDRESS_NACK:	
 14863                           
 14864                           	psect	text86
 14865  08F0                     __ptext86:	
 14866 ;; *************** function _do_I2C_DO_NACK_RESTART *****************
 14867 ;; Defined at:
 14868 ;;		line 311 in file "mcc_generated_files/drivers/i2c_master.c"
 14869 ;; Parameters:    Size  Location     Type
 14870 ;;		None
 14871 ;; Auto vars:     Size  Location     Type
 14872 ;;		None
 14873 ;; Return value:  Size  Location     Type
 14874 ;;                  1    wreg      enum E7120
 14875 ;; Registers used:
 14876 ;;		wreg, status,2, status,0, pclath, cstack
 14877 ;; Tracked objects:
 14878 ;;		On entry : 0/0
 14879 ;;		On exit  : 0/0
 14880 ;;		Unchanged: 0/0
 14881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14882 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14883 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14884 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14885 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14886 ;;Total ram usage:        0 bytes
 14887 ;; Hardware stack levels used:    1
 14888 ;; Hardware stack levels required when called:    1
 14889 ;; This function calls:
 14890 ;;		i1_i2c1_driver_sendNACK
 14891 ;; This function is called by:
 14892 ;;		_do_I2C_RX
 14893 ;;		_i2c_ISR
 14894 ;; This function uses a non-reentrant model
 14895 ;;
 14896                           
 14897                           
 14898                           ;psect for function _do_I2C_DO_NACK_RESTART
 14899  08F0                     _do_I2C_DO_NACK_RESTART:	
 14900                           
 14901                           ;mcc_generated_files/drivers/i2c_master.c: 313:     i2c1_driver_sendNACK();
 14902                           
 14903                           ;incstack = 0
 14904                           ; Regs used in _do_I2C_DO_NACK_RESTART: [wreg+status,2+status,0+pclath+cstack]
 14905  08F0  3188  20D4         	fcall	i1_i2c1_driver_sendNACK
 14906                           
 14907                           ;mcc_generated_files/drivers/i2c_master.c: 314:     return I2C_SEND_RESTART;
 14908  08F2  3009               	movlw	9
 14909  08F3  0008               	return
 14910  08F4                     __end_of_do_I2C_DO_NACK_RESTART:	
 14911                           
 14912                           	psect	text87
 14913  08EC                     __ptext87:	
 14914 ;; *************** function _do_I2C_DO_NACK_STOP *****************
 14915 ;; Defined at:
 14916 ;;		line 305 in file "mcc_generated_files/drivers/i2c_master.c"
 14917 ;; Parameters:    Size  Location     Type
 14918 ;;		None
 14919 ;; Auto vars:     Size  Location     Type
 14920 ;;		None
 14921 ;; Return value:  Size  Location     Type
 14922 ;;                  1    wreg      enum E7120
 14923 ;; Registers used:
 14924 ;;		wreg, status,2, status,0, pclath, cstack
 14925 ;; Tracked objects:
 14926 ;;		On entry : 0/0
 14927 ;;		On exit  : 0/0
 14928 ;;		Unchanged: 0/0
 14929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14931 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14932 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14933 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14934 ;;Total ram usage:        0 bytes
 14935 ;; Hardware stack levels used:    1
 14936 ;; Hardware stack levels required when called:    1
 14937 ;; This function calls:
 14938 ;;		i1_i2c1_driver_sendNACK
 14939 ;; This function is called by:
 14940 ;;		_do_I2C_RX
 14941 ;;		_i2c_ISR
 14942 ;; This function uses a non-reentrant model
 14943 ;;
 14944                           
 14945                           
 14946                           ;psect for function _do_I2C_DO_NACK_STOP
 14947  08EC                     _do_I2C_DO_NACK_STOP:	
 14948                           
 14949                           ;mcc_generated_files/drivers/i2c_master.c: 307:     i2c1_driver_sendNACK();
 14950                           
 14951                           ;incstack = 0
 14952                           ; Regs used in _do_I2C_DO_NACK_STOP: [wreg+status,2+status,0+pclath+cstack]
 14953  08EC  3188  20D4         	fcall	i1_i2c1_driver_sendNACK
 14954                           
 14955                           ;mcc_generated_files/drivers/i2c_master.c: 308:     return I2C_SEND_STOP;
 14956  08EE  300A               	movlw	10
 14957  08EF  0008               	return
 14958  08F0                     __end_of_do_I2C_DO_NACK_STOP:	
 14959                           
 14960                           	psect	text88
 14961  08E8                     __ptext88:	
 14962 ;; *************** function _do_I2C_DO_ACK *****************
 14963 ;; Defined at:
 14964 ;;		line 299 in file "mcc_generated_files/drivers/i2c_master.c"
 14965 ;; Parameters:    Size  Location     Type
 14966 ;;		None
 14967 ;; Auto vars:     Size  Location     Type
 14968 ;;		None
 14969 ;; Return value:  Size  Location     Type
 14970 ;;                  1    wreg      enum E7120
 14971 ;; Registers used:
 14972 ;;		wreg, status,2, status,0, pclath, cstack
 14973 ;; Tracked objects:
 14974 ;;		On entry : 0/0
 14975 ;;		On exit  : 0/0
 14976 ;;		Unchanged: 0/0
 14977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14978 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14979 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14981 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14982 ;;Total ram usage:        0 bytes
 14983 ;; Hardware stack levels used:    1
 14984 ;; Hardware stack levels required when called:    1
 14985 ;; This function calls:
 14986 ;;		_i2c1_driver_sendACK
 14987 ;; This function is called by:
 14988 ;;		_i2c_ISR
 14989 ;; This function uses a non-reentrant model
 14990 ;;
 14991                           
 14992                           
 14993                           ;psect for function _do_I2C_DO_ACK
 14994  08E8                     _do_I2C_DO_ACK:	
 14995                           
 14996                           ;mcc_generated_files/drivers/i2c_master.c: 301:     i2c1_driver_sendACK();
 14997                           
 14998                           ;incstack = 0
 14999                           ; Regs used in _do_I2C_DO_ACK: [wreg+status,2+status,0+pclath+cstack]
 15000  08E8  3188  20D0         	fcall	_i2c1_driver_sendACK
 15001                           
 15002                           ;mcc_generated_files/drivers/i2c_master.c: 302:     return I2C_RCEN;
 15003  08EA  3005               	movlw	5
 15004  08EB  0008               	return
 15005  08EC                     __end_of_do_I2C_DO_ACK:	
 15006                           
 15007                           	psect	text89
 15008  0906                     __ptext89:	
 15009 ;; *************** function _do_I2C_RCEN *****************
 15010 ;; Defined at:
 15011 ;;		line 292 in file "mcc_generated_files/drivers/i2c_master.c"
 15012 ;; Parameters:    Size  Location     Type
 15013 ;;		None
 15014 ;; Auto vars:     Size  Location     Type
 15015 ;;		None
 15016 ;; Return value:  Size  Location     Type
 15017 ;;                  1    wreg      enum E7120
 15018 ;; Registers used:
 15019 ;;		wreg, status,2, status,0, pclath, cstack
 15020 ;; Tracked objects:
 15021 ;;		On entry : 0/0
 15022 ;;		On exit  : 0/0
 15023 ;;		Unchanged: 0/0
 15024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15025 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15026 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15027 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15028 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15029 ;;Total ram usage:        0 bytes
 15030 ;; Hardware stack levels used:    1
 15031 ;; Hardware stack levels required when called:    1
 15032 ;; This function calls:
 15033 ;;		i1_i2c1_driver_startRX
 15034 ;; This function is called by:
 15035 ;;		_i2c_ISR
 15036 ;; This function uses a non-reentrant model
 15037 ;;
 15038                           
 15039                           
 15040                           ;psect for function _do_I2C_RCEN
 15041  0906                     _do_I2C_RCEN:	
 15042                           
 15043                           ;mcc_generated_files/drivers/i2c_master.c: 294:     i2c_status.addressNACKCheck = 0;
 15044                           
 15045                           ;incstack = 0
 15046                           ; Regs used in _do_I2C_RCEN: [wreg+status,2+status,0+pclath+cstack]
 15047  0906  0022               	movlb	2	; select bank2
 15048  0907  11A0               	bcf	_i2c_status^(0+256),3
 15049                           
 15050                           ;mcc_generated_files/drivers/i2c_master.c: 295:     i2c1_driver_startRX();
 15051  0908  3188  209C         	fcall	i1_i2c1_driver_startRX
 15052                           
 15053                           ;mcc_generated_files/drivers/i2c_master.c: 296:     return I2C_RX;
 15054  090A  3004               	movlw	4
 15055  090B  0008               	return
 15056  090C                     __end_of_do_I2C_RCEN:	
 15057                           
 15058                           	psect	text90
 15059  092B                     __ptext90:	
 15060 ;; *************** function _do_I2C_SEND_ADR_WRITE *****************
 15061 ;; Defined at:
 15062 ;;		line 285 in file "mcc_generated_files/drivers/i2c_master.c"
 15063 ;; Parameters:    Size  Location     Type
 15064 ;;		None
 15065 ;; Auto vars:     Size  Location     Type
 15066 ;;		None
 15067 ;; Return value:  Size  Location     Type
 15068 ;;                  1    wreg      enum E7120
 15069 ;; Registers used:
 15070 ;;		wreg, status,2, status,0, pclath, cstack
 15071 ;; Tracked objects:
 15072 ;;		On entry : 0/0
 15073 ;;		On exit  : 0/0
 15074 ;;		Unchanged: 0/0
 15075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15076 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15077 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15078 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15079 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15080 ;;Total ram usage:        0 bytes
 15081 ;; Hardware stack levels used:    1
 15082 ;; Hardware stack levels required when called:    1
 15083 ;; This function calls:
 15084 ;;		i1_i2c1_driver_TXData
 15085 ;; This function is called by:
 15086 ;;		_i2c_ISR
 15087 ;; This function uses a non-reentrant model
 15088 ;;
 15089                           
 15090                           
 15091                           ;psect for function _do_I2C_SEND_ADR_WRITE
 15092  092B                     _do_I2C_SEND_ADR_WRITE:	
 15093                           
 15094                           ;mcc_generated_files/drivers/i2c_master.c: 287:     i2c_status.addressNACKCheck = 1;
 15095                           
 15096                           ;incstack = 0
 15097                           ; Regs used in _do_I2C_SEND_ADR_WRITE: [wreg+status,2+status,0+pclath+cstack]
 15098  092B  0022               	movlb	2	; select bank2
 15099  092C  15A0               	bsf	_i2c_status^(0+256),3
 15100                           
 15101                           ;mcc_generated_files/drivers/i2c_master.c: 288:     i2c1_driver_TXData(i2c_status.addres
      +                          s << 1);
 15102  092D  3521               	lslf	(_i2c_status^(0+256)+1),w
 15103  092E  3188  20FC         	fcall	i1_i2c1_driver_TXData
 15104                           
 15105                           ;mcc_generated_files/drivers/i2c_master.c: 289:     return I2C_TX;
 15106  0930  3003               	movlw	3
 15107  0931  0008               	return
 15108  0932                     __end_of_do_I2C_SEND_ADR_WRITE:	
 15109                           
 15110                           	psect	text91
 15111  0948                     __ptext91:	
 15112 ;; *************** function _do_I2C_SEND_ADR_READ *****************
 15113 ;; Defined at:
 15114 ;;		line 278 in file "mcc_generated_files/drivers/i2c_master.c"
 15115 ;; Parameters:    Size  Location     Type
 15116 ;;		None
 15117 ;; Auto vars:     Size  Location     Type
 15118 ;;		None
 15119 ;; Return value:  Size  Location     Type
 15120 ;;                  1    wreg      enum E7120
 15121 ;; Registers used:
 15122 ;;		wreg, status,2, status,0, pclath, cstack
 15123 ;; Tracked objects:
 15124 ;;		On entry : 0/0
 15125 ;;		On exit  : 0/0
 15126 ;;		Unchanged: 0/0
 15127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15129 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15131 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15132 ;;Total ram usage:        0 bytes
 15133 ;; Hardware stack levels used:    1
 15134 ;; Hardware stack levels required when called:    1
 15135 ;; This function calls:
 15136 ;;		i1_i2c1_driver_TXData
 15137 ;; This function is called by:
 15138 ;;		_i2c_ISR
 15139 ;; This function uses a non-reentrant model
 15140 ;;
 15141                           
 15142                           
 15143                           ;psect for function _do_I2C_SEND_ADR_READ
 15144  0948                     _do_I2C_SEND_ADR_READ:	
 15145                           
 15146                           ;mcc_generated_files/drivers/i2c_master.c: 280:     i2c_status.addressNACKCheck = 1;
 15147                           
 15148                           ;incstack = 0
 15149                           ; Regs used in _do_I2C_SEND_ADR_READ: [wreg+status,2+status,0+pclath+cstack]
 15150  0948  0022               	movlb	2	; select bank2
 15151  0949  15A0               	bsf	_i2c_status^(0+256),3
 15152                           
 15153                           ;mcc_generated_files/drivers/i2c_master.c: 281:     i2c1_driver_TXData(i2c_status.addres
      +                          s << 1 | 1);
 15154  094A  1403               	setc
 15155  094B  0D21               	rlf	(_i2c_status^(0+256)+1),w
 15156  094C  3188  20FC         	fcall	i1_i2c1_driver_TXData
 15157                           
 15158                           ;mcc_generated_files/drivers/i2c_master.c: 282:     return I2C_RCEN;
 15159  094E  3005               	movlw	5
 15160  094F  0008               	return
 15161  0950                     __end_of_do_I2C_SEND_ADR_READ:	
 15162                           
 15163                           	psect	text92
 15164  08E4                     __ptext92:	
 15165 ;; *************** function _do_I2C_SEND_STOP *****************
 15166 ;; Defined at:
 15167 ;;		line 272 in file "mcc_generated_files/drivers/i2c_master.c"
 15168 ;; Parameters:    Size  Location     Type
 15169 ;;		None
 15170 ;; Auto vars:     Size  Location     Type
 15171 ;;		None
 15172 ;; Return value:  Size  Location     Type
 15173 ;;                  1    wreg      enum E7120
 15174 ;; Registers used:
 15175 ;;		wreg, status,2, status,0, pclath, cstack
 15176 ;; Tracked objects:
 15177 ;;		On entry : 0/0
 15178 ;;		On exit  : 0/0
 15179 ;;		Unchanged: 0/0
 15180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15181 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15182 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15183 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15184 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15185 ;;Total ram usage:        0 bytes
 15186 ;; Hardware stack levels used:    1
 15187 ;; Hardware stack levels required when called:    1
 15188 ;; This function calls:
 15189 ;;		i1_i2c1_driver_stop
 15190 ;; This function is called by:
 15191 ;;		_do_I2C_DO_ADDRESS_NACK
 15192 ;;		_do_I2C_TX
 15193 ;;		_do_I2C_TX_EMPTY
 15194 ;;		_i2c_ISR
 15195 ;; This function uses a non-reentrant model
 15196 ;;
 15197                           
 15198                           
 15199                           ;psect for function _do_I2C_SEND_STOP
 15200  08E4                     _do_I2C_SEND_STOP:	
 15201                           
 15202                           ;mcc_generated_files/drivers/i2c_master.c: 274:     i2c1_driver_stop();
 15203                           
 15204                           ;incstack = 0
 15205                           ; Regs used in _do_I2C_SEND_STOP: [wreg+status,2+status,0+pclath+cstack]
 15206  08E4  3188  2099         	fcall	i1_i2c1_driver_stop
 15207                           
 15208                           ;mcc_generated_files/drivers/i2c_master.c: 275:     return I2C_IDLE;
 15209  08E6  3000               	movlw	0
 15210  08E7  0008               	return
 15211  08E8                     __end_of_do_I2C_SEND_STOP:	
 15212                           
 15213                           	psect	text93
 15214  08E0                     __ptext93:	
 15215 ;; *************** function _do_I2C_SEND_RESTART *****************
 15216 ;; Defined at:
 15217 ;;		line 266 in file "mcc_generated_files/drivers/i2c_master.c"
 15218 ;; Parameters:    Size  Location     Type
 15219 ;;		None
 15220 ;; Auto vars:     Size  Location     Type
 15221 ;;		None
 15222 ;; Return value:  Size  Location     Type
 15223 ;;                  1    wreg      enum E7120
 15224 ;; Registers used:
 15225 ;;		wreg, status,2, status,0, pclath, cstack
 15226 ;; Tracked objects:
 15227 ;;		On entry : 0/0
 15228 ;;		On exit  : 0/0
 15229 ;;		Unchanged: 0/0
 15230 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15231 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15232 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15233 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15234 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15235 ;;Total ram usage:        0 bytes
 15236 ;; Hardware stack levels used:    1
 15237 ;; Hardware stack levels required when called:    1
 15238 ;; This function calls:
 15239 ;;		i1_i2c1_driver_restart
 15240 ;; This function is called by:
 15241 ;;		_do_I2C_DO_ADDRESS_NACK
 15242 ;;		_do_I2C_TX_EMPTY
 15243 ;;		_i2c_ISR
 15244 ;; This function uses a non-reentrant model
 15245 ;;
 15246                           
 15247                           
 15248                           ;psect for function _do_I2C_SEND_RESTART
 15249  08E0                     _do_I2C_SEND_RESTART:	
 15250                           
 15251                           ;mcc_generated_files/drivers/i2c_master.c: 268:     i2c1_driver_restart();
 15252                           
 15253                           ;incstack = 0
 15254                           ; Regs used in _do_I2C_SEND_RESTART: [wreg+status,2+status,0+pclath+cstack]
 15255  08E0  3188  2096         	fcall	i1_i2c1_driver_restart
 15256                           
 15257                           ;mcc_generated_files/drivers/i2c_master.c: 269:     return I2C_SEND_ADR_READ;
 15258  08E2  3001               	movlw	1
 15259  08E3  0008               	return
 15260  08E4                     __end_of_do_I2C_SEND_RESTART:	
 15261                           
 15262                           	psect	text94
 15263  08DC                     __ptext94:	
 15264 ;; *************** function _do_I2C_SEND_RESTART_WRITE *****************
 15265 ;; Defined at:
 15266 ;;		line 260 in file "mcc_generated_files/drivers/i2c_master.c"
 15267 ;; Parameters:    Size  Location     Type
 15268 ;;		None
 15269 ;; Auto vars:     Size  Location     Type
 15270 ;;		None
 15271 ;; Return value:  Size  Location     Type
 15272 ;;                  1    wreg      enum E7120
 15273 ;; Registers used:
 15274 ;;		wreg, status,2, status,0, pclath, cstack
 15275 ;; Tracked objects:
 15276 ;;		On entry : 0/0
 15277 ;;		On exit  : 0/0
 15278 ;;		Unchanged: 0/0
 15279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15280 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15281 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15282 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15283 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15284 ;;Total ram usage:        0 bytes
 15285 ;; Hardware stack levels used:    1
 15286 ;; Hardware stack levels required when called:    1
 15287 ;; This function calls:
 15288 ;;		i1_i2c1_driver_restart
 15289 ;; This function is called by:
 15290 ;;		_do_I2C_TX
 15291 ;;		_i2c_ISR
 15292 ;; This function uses a non-reentrant model
 15293 ;;
 15294                           
 15295                           
 15296                           ;psect for function _do_I2C_SEND_RESTART_WRITE
 15297  08DC                     _do_I2C_SEND_RESTART_WRITE:	
 15298                           
 15299                           ;mcc_generated_files/drivers/i2c_master.c: 262:     i2c1_driver_restart();
 15300                           
 15301                           ;incstack = 0
 15302                           ; Regs used in _do_I2C_SEND_RESTART_WRITE: [wreg+status,2+status,0+pclath+cstack]
 15303  08DC  3188  2096         	fcall	i1_i2c1_driver_restart
 15304                           
 15305                           ;mcc_generated_files/drivers/i2c_master.c: 263:     return I2C_SEND_ADR_WRITE;
 15306  08DE  3002               	movlw	2
 15307  08DF  0008               	return
 15308  08E0                     __end_of_do_I2C_SEND_RESTART_WRITE:	
 15309                           
 15310                           	psect	text95
 15311  08D8                     __ptext95:	
 15312 ;; *************** function _do_I2C_SEND_RESTART_READ *****************
 15313 ;; Defined at:
 15314 ;;		line 254 in file "mcc_generated_files/drivers/i2c_master.c"
 15315 ;; Parameters:    Size  Location     Type
 15316 ;;		None
 15317 ;; Auto vars:     Size  Location     Type
 15318 ;;		None
 15319 ;; Return value:  Size  Location     Type
 15320 ;;                  1    wreg      enum E7120
 15321 ;; Registers used:
 15322 ;;		wreg, status,2, status,0, pclath, cstack
 15323 ;; Tracked objects:
 15324 ;;		On entry : 0/0
 15325 ;;		On exit  : 0/0
 15326 ;;		Unchanged: 0/0
 15327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15328 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15329 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15330 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15331 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15332 ;;Total ram usage:        0 bytes
 15333 ;; Hardware stack levels used:    1
 15334 ;; Hardware stack levels required when called:    1
 15335 ;; This function calls:
 15336 ;;		i1_i2c1_driver_restart
 15337 ;; This function is called by:
 15338 ;;		_do_I2C_TX
 15339 ;;		_i2c_ISR
 15340 ;; This function uses a non-reentrant model
 15341 ;;
 15342                           
 15343                           
 15344                           ;psect for function _do_I2C_SEND_RESTART_READ
 15345  08D8                     _do_I2C_SEND_RESTART_READ:	
 15346                           
 15347                           ;mcc_generated_files/drivers/i2c_master.c: 256:     i2c1_driver_restart();
 15348                           
 15349                           ;incstack = 0
 15350                           ; Regs used in _do_I2C_SEND_RESTART_READ: [wreg+status,2+status,0+pclath+cstack]
 15351  08D8  3188  2096         	fcall	i1_i2c1_driver_restart
 15352                           
 15353                           ;mcc_generated_files/drivers/i2c_master.c: 257:     return I2C_SEND_ADR_READ;
 15354  08DA  3001               	movlw	1
 15355  08DB  0008               	return
 15356  08DC                     __end_of_do_I2C_SEND_RESTART_READ:	
 15357                           
 15358                           	psect	text96
 15359  0901                     __ptext96:	
 15360 ;; *************** function _do_I2C_IDLE *****************
 15361 ;; Defined at:
 15362 ;;		line 247 in file "mcc_generated_files/drivers/i2c_master.c"
 15363 ;; Parameters:    Size  Location     Type
 15364 ;;		None
 15365 ;; Auto vars:     Size  Location     Type
 15366 ;;		None
 15367 ;; Return value:  Size  Location     Type
 15368 ;;                  1    wreg      enum E7120
 15369 ;; Registers used:
 15370 ;;		wreg, status,2
 15371 ;; Tracked objects:
 15372 ;;		On entry : 0/0
 15373 ;;		On exit  : 0/0
 15374 ;;		Unchanged: 0/0
 15375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15376 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15377 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15378 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15379 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15380 ;;Total ram usage:        0 bytes
 15381 ;; Hardware stack levels used:    1
 15382 ;; This function calls:
 15383 ;;		Nothing
 15384 ;; This function is called by:
 15385 ;;		_i2c_ISR
 15386 ;; This function uses a non-reentrant model
 15387 ;;
 15388                           
 15389                           
 15390                           ;psect for function _do_I2C_IDLE
 15391  0901                     _do_I2C_IDLE:	
 15392                           
 15393                           ;mcc_generated_files/drivers/i2c_master.c: 249:     i2c_status.busy = 0;
 15394                           
 15395                           ;incstack = 0
 15396                           ; Regs used in _do_I2C_IDLE: [wreg+status,2]
 15397  0901  0022               	movlb	2	; select bank2
 15398  0902  1020               	bcf	_i2c_status^(0+256),0
 15399                           
 15400                           ;mcc_generated_files/drivers/i2c_master.c: 250:     i2c_status.error = I2C_NOERR;
 15401  0903  01AA               	clrf	(_i2c_status^(0+256)+10)
 15402                           
 15403                           ;mcc_generated_files/drivers/i2c_master.c: 251:     return I2C_RESET;
 15404  0904  300E               	movlw	14
 15405  0905  0008               	return
 15406  0906                     __end_of_do_I2C_IDLE:	
 15407                           
 15408                           	psect	text97
 15409  0924                     __ptext97:	
 15410 ;; *************** function _do_I2C_RESET *****************
 15411 ;; Defined at:
 15412 ;;		line 239 in file "mcc_generated_files/drivers/i2c_master.c"
 15413 ;; Parameters:    Size  Location     Type
 15414 ;;		None
 15415 ;; Auto vars:     Size  Location     Type
 15416 ;;		None
 15417 ;; Return value:  Size  Location     Type
 15418 ;;                  1    wreg      enum E7120
 15419 ;; Registers used:
 15420 ;;		wreg, status,2, status,0, pclath, cstack
 15421 ;; Tracked objects:
 15422 ;;		On entry : 0/0
 15423 ;;		On exit  : 0/0
 15424 ;;		Unchanged: 0/0
 15425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15426 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15427 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15428 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15429 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15430 ;;Total ram usage:        0 bytes
 15431 ;; Hardware stack levels used:    1
 15432 ;; Hardware stack levels required when called:    1
 15433 ;; This function calls:
 15434 ;;		_i2c1_driver_resetBus
 15435 ;; This function is called by:
 15436 ;;		_i2c_ISR
 15437 ;; This function uses a non-reentrant model
 15438 ;;
 15439                           
 15440                           
 15441                           ;psect for function _do_I2C_RESET
 15442  0924                     _do_I2C_RESET:	
 15443                           
 15444                           ;mcc_generated_files/drivers/i2c_master.c: 241:     i2c1_driver_resetBus();
 15445                           
 15446                           ;incstack = 0
 15447                           ; Regs used in _do_I2C_RESET: [wreg+status,2+status,0+pclath+cstack]
 15448  0924  3188  2092         	fcall	_i2c1_driver_resetBus
 15449                           
 15450                           ;mcc_generated_files/drivers/i2c_master.c: 242:     i2c_status.busy = 0;
 15451  0926  0022               	movlb	2	; select bank2
 15452  0927  1020               	bcf	_i2c_status^(0+256),0
 15453                           
 15454                           ;mcc_generated_files/drivers/i2c_master.c: 243:     i2c_status.error = I2C_NOERR;
 15455  0928  01AA               	clrf	(_i2c_status^(0+256)+10)
 15456                           
 15457                           ;mcc_generated_files/drivers/i2c_master.c: 244:     return I2C_RESET;
 15458  0929  300E               	movlw	14
 15459  092A  0008               	return
 15460  092B                     __end_of_do_I2C_RESET:	
 15461                           
 15462                           	psect	text98
 15463  0DD6                     __ptext98:	
 15464 ;; *************** function _do_I2C_TX_EMPTY *****************
 15465 ;; Defined at:
 15466 ;;		line 382 in file "mcc_generated_files/drivers/i2c_master.c"
 15467 ;; Parameters:    Size  Location     Type
 15468 ;;		None
 15469 ;; Auto vars:     Size  Location     Type
 15470 ;;		None
 15471 ;; Return value:  Size  Location     Type
 15472 ;;                  1    wreg      enum E7120
 15473 ;; Registers used:
 15474 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15475 ;; Tracked objects:
 15476 ;;		On entry : 0/0
 15477 ;;		On exit  : 0/0
 15478 ;;		Unchanged: 0/0
 15479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15482 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15483 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15484 ;;Total ram usage:        3 bytes
 15485 ;; Hardware stack levels used:    1
 15486 ;; Hardware stack levels required when called:    2
 15487 ;; This function calls:
 15488 ;;		_do_I2C_SEND_RESTART
 15489 ;;		_do_I2C_SEND_STOP
 15490 ;;		_mssp1_setIRQ
 15491 ;;		_returnReset
 15492 ;;		_returnStop
 15493 ;; This function is called by:
 15494 ;;		_i2c_ISR
 15495 ;; This function uses a non-reentrant model
 15496 ;;
 15497                           
 15498                           
 15499                           ;psect for function _do_I2C_TX_EMPTY
 15500  0DD6                     _do_I2C_TX_EMPTY:	
 15501                           
 15502                           ;mcc_generated_files/drivers/i2c_master.c: 384:     i2c_status.bufferFree = 1;
 15503                           
 15504                           ;incstack = 0
 15505                           ; Regs used in _do_I2C_TX_EMPTY: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15506  0DD6  0022               	movlb	2	; select bank2
 15507  0DD7  1520               	bsf	_i2c_status^(0+256),2
 15508                           
 15509                           ;mcc_generated_files/drivers/i2c_master.c: 385:     switch(i2c_status.callbackTable[i2c_
      +                          dataComplete](i2c_status.callbackPayload[i2c_dataComplete]))
 15510  0DD8  2DE3               	goto	i1l4998
 15511  0DD9                     i1l4982:	
 15512                           
 15513                           ;mcc_generated_files/drivers/i2c_master.c: 389:             return do_I2C_SEND_RESTART()
      +                          ;
 15514  0DD9  3188  20E0         	fcall	_do_I2C_SEND_RESTART
 15515  0DDB  0008               	return
 15516  0DDC                     i1l4986:	
 15517                           
 15518                           ;mcc_generated_files/drivers/i2c_master.c: 391:             mssp1_setIRQ();
 15519  0DDC  3188  20A2         	fcall	_mssp1_setIRQ
 15520                           
 15521                           ;mcc_generated_files/drivers/i2c_master.c: 392:             return I2C_TX;
 15522  0DDE  3003               	movlw	3
 15523  0DDF  0008               	return
 15524  0DE0                     i1l4992:	
 15525                           
 15526                           ;mcc_generated_files/drivers/i2c_master.c: 395:             return do_I2C_SEND_STOP();
 15527  0DE0  3188  20E4         	fcall	_do_I2C_SEND_STOP
 15528  0DE2  0008               	return
 15529  0DE3                     i1l4998:	
 15530  0DE3  0837               	movf	(low ((_i2c_status| (0+256)+23)))^0,w
 15531  0DE4  00F6               	movwf	??_do_I2C_TX_EMPTY
 15532  0DE5  0876               	movf	??_do_I2C_TX_EMPTY,w
 15533  0DE6  00F6               	movwf	returnReset@p
 15534  0DE7  300B               	movlw	11
 15535  0DE8  3E20               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 15536  0DE9  0086               	movwf	6
 15537  0DEA  3001               	movlw	1	; select bank2/3
 15538  0DEB  0087               	movwf	7
 15539  0DEC  3F41               	moviw [1]fsr1
 15540  0DED  008A               	movwf	10
 15541  0DEE  3F40               	moviw [0]fsr1
 15542  0DEF  000A               	callw
 15543  0DF0  318D               	pagesel	$
 15544  0DF1  00F7               	movwf	??_do_I2C_TX_EMPTY+1
 15545  0DF2  01F8               	clrf	??_do_I2C_TX_EMPTY+2
 15546                           
 15547                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15548                           ; Switch size 1, requested type "simple"
 15549                           ; Number of cases is 1, Range of values is 0 to 0
 15550                           ; switch strategies available:
 15551                           ; Name         Instructions Cycles
 15552                           ; simple_byte            4     3 (average)
 15553                           ; direct_byte            8     6 (fixed)
 15554                           ; jumptable            260     6 (fixed)
 15555                           ;	Chosen strategy is simple_byte
 15556  0DF3  0878               	movf	??_do_I2C_TX_EMPTY+2,w
 15557  0DF4  3A00               	xorlw	0	; case 0
 15558  0DF5  1903               	skipnz
 15559  0DF6  2DF8               	goto	i1l7888
 15560  0DF7  2DE0               	goto	i1l4992
 15561  0DF8                     i1l7888:	
 15562                           
 15563                           ; Switch size 1, requested type "simple"
 15564                           ; Number of cases is 4, Range of values is 1 to 4
 15565                           ; switch strategies available:
 15566                           ; Name         Instructions Cycles
 15567                           ; simple_byte           13     7 (average)
 15568                           ; direct_byte           17     9 (fixed)
 15569                           ; jumptable            263     9 (fixed)
 15570                           ;	Chosen strategy is simple_byte
 15571  0DF8  0877               	movf	??_do_I2C_TX_EMPTY+1,w
 15572  0DF9  3A01               	xorlw	1	; case 1
 15573  0DFA  1903               	skipnz
 15574  0DFB  2DE0               	goto	i1l4992
 15575  0DFC  3A03               	xorlw	3	; case 2
 15576  0DFD  1903               	skipnz
 15577  0DFE  2DD9               	goto	i1l4982
 15578  0DFF  3A01               	xorlw	1	; case 3
 15579  0E00  1903               	skipnz
 15580  0E01  2DD9               	goto	i1l4982
 15581  0E02  3A07               	xorlw	7	; case 4
 15582  0E03  1903               	skipnz
 15583  0E04  2DDC               	goto	i1l4986
 15584  0E05  2DE0               	goto	i1l4992
 15585  0E06  0008               	return
 15586  0E07                     __end_of_do_I2C_TX_EMPTY:	
 15587                           
 15588                           	psect	text99
 15589  08A2                     __ptext99:	
 15590 ;; *************** function _mssp1_setIRQ *****************
 15591 ;; Defined at:
 15592 ;;		line 58 in file "mcc_generated_files/i2c1_driver.c"
 15593 ;; Parameters:    Size  Location     Type
 15594 ;;		None
 15595 ;; Auto vars:     Size  Location     Type
 15596 ;;		None
 15597 ;; Return value:  Size  Location     Type
 15598 ;;                  1    wreg      void 
 15599 ;; Registers used:
 15600 ;;		None
 15601 ;; Tracked objects:
 15602 ;;		On entry : 0/0
 15603 ;;		On exit  : 0/0
 15604 ;;		Unchanged: 0/0
 15605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15607 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15608 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15609 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15610 ;;Total ram usage:        0 bytes
 15611 ;; Hardware stack levels used:    1
 15612 ;; This function calls:
 15613 ;;		Nothing
 15614 ;; This function is called by:
 15615 ;;		_do_I2C_TX_EMPTY
 15616 ;; This function uses a non-reentrant model
 15617 ;;
 15618                           
 15619                           
 15620                           ;psect for function _mssp1_setIRQ
 15621  08A2                     _mssp1_setIRQ:	
 15622                           
 15623                           ;mcc_generated_files/i2c1_driver.c: 60:     }
 15624                           
 15625                           ;incstack = 0
 15626                           ; Regs used in _mssp1_setIRQ: []
 15627  08A2  0020               	movlb	0	; select bank0
 15628  08A3  1591               	bsf	17,3	;volatile
 15629  08A4  0008               	return
 15630  08A5                     __end_of_mssp1_setIRQ:	
 15631                           
 15632                           	psect	text100
 15633  0940                     __ptext100:	
 15634 ;; *************** function _i2c1_driver_isNACK *****************
 15635 ;; Defined at:
 15636 ;;		line 161 in file "mcc_generated_files/i2c1_driver.c"
 15637 ;; Parameters:    Size  Location     Type
 15638 ;;		None
 15639 ;; Auto vars:     Size  Location     Type
 15640 ;;		None
 15641 ;; Return value:  Size  Location     Type
 15642 ;;		None               void
 15643 ;; Registers used:
 15644 ;;		wreg, status,2, status,0
 15645 ;; Tracked objects:
 15646 ;;		On entry : 0/0
 15647 ;;		On exit  : 0/0
 15648 ;;		Unchanged: 0/0
 15649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15650 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15651 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15652 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15653 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15654 ;;Total ram usage:        1 bytes
 15655 ;; Hardware stack levels used:    1
 15656 ;; This function calls:
 15657 ;;		Nothing
 15658 ;; This function is called by:
 15659 ;;		_do_I2C_TX
 15660 ;;		_i2c_ISR
 15661 ;; This function uses a non-reentrant model
 15662 ;;
 15663                           
 15664                           
 15665                           ;psect for function _i2c1_driver_isNACK
 15666  0940                     _i2c1_driver_isNACK:	
 15667                           
 15668                           ;mcc_generated_files/i2c1_driver.c: 163:     return SSP1CON2bits.ACKSTAT;
 15669                           
 15670                           ;incstack = 0
 15671                           ; Regs used in _i2c1_driver_isNACK: [wreg+status,2+status,0]
 15672  0940  0024               	movlb	4	; select bank4
 15673  0941  0E16               	swapf	22,w	;volatile
 15674  0942  0C89               	rrf	9,f
 15675  0943  0C89               	rrf	9,f
 15676  0944  3901               	andlw	1
 15677  0945  00F6               	movwf	??_i2c1_driver_isNACK
 15678  0946  0C76               	rrf	??_i2c1_driver_isNACK,w
 15679  0947  0008               	return
 15680  0948                     __end_of_i2c1_driver_isNACK:	
 15681                           
 15682                           	psect	text101
 15683  08FC                     __ptext101:	
 15684 ;; *************** function i1_i2c1_driver_TXData *****************
 15685 ;; Defined at:
 15686 ;;		line 186 in file "mcc_generated_files/i2c1_driver.c"
 15687 ;; Parameters:    Size  Location     Type
 15688 ;;  d               1    wreg     unsigned char 
 15689 ;; Auto vars:     Size  Location     Type
 15690 ;;  d               1    0[COMMON] unsigned char 
 15691 ;; Return value:  Size  Location     Type
 15692 ;;                  1    wreg      void 
 15693 ;; Registers used:
 15694 ;;		wreg
 15695 ;; Tracked objects:
 15696 ;;		On entry : 0/0
 15697 ;;		On exit  : 0/0
 15698 ;;		Unchanged: 0/0
 15699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15701 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15702 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15703 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15704 ;;Total ram usage:        1 bytes
 15705 ;; Hardware stack levels used:    1
 15706 ;; This function calls:
 15707 ;;		Nothing
 15708 ;; This function is called by:
 15709 ;;		_do_I2C_SEND_ADR_READ
 15710 ;;		_do_I2C_SEND_ADR_WRITE
 15711 ;;		_do_I2C_TX
 15712 ;; This function uses a non-reentrant model
 15713 ;;
 15714                           
 15715                           
 15716                           ;psect for function i1_i2c1_driver_TXData
 15717  08FC                     i1_i2c1_driver_TXData:	
 15718                           
 15719                           ;incstack = 0
 15720                           ; Regs used in i1_i2c1_driver_TXData: [wreg]
 15721                           ;i1i2c1_driver_TXData@d stored from wreg
 15722  08FC  00F6               	movwf	i1i2c1_driver_TXData@d
 15723                           
 15724                           ;mcc_generated_files/i2c1_driver.c: 186: __attribute__((inline)) void i2c1_driver_TXData
      +                          (char d);mcc_generated_files/i2c1_driver.c: 187: {;mcc_generated_files/i2c1_driver.c: 18
      +                          8:     SSP1BUF = d;
 15725  08FD  0876               	movf	i1i2c1_driver_TXData@d,w
 15726  08FE  0024               	movlb	4	; select bank4
 15727  08FF  0091               	movwf	17	;volatile
 15728  0900  0008               	return
 15729  0901                     __end_ofi1_i2c1_driver_TXData:	
 15730                           
 15731                           	psect	text102
 15732  089F                     __ptext102:	
 15733 ;; *************** function i1_i2c1_driver_getRXData *****************
 15734 ;; Defined at:
 15735 ;;		line 171 in file "mcc_generated_files/i2c1_driver.c"
 15736 ;; Parameters:    Size  Location     Type
 15737 ;;		None
 15738 ;; Auto vars:     Size  Location     Type
 15739 ;;		None
 15740 ;; Return value:  Size  Location     Type
 15741 ;;                  1    wreg      unsigned char 
 15742 ;; Registers used:
 15743 ;;		wreg
 15744 ;; Tracked objects:
 15745 ;;		On entry : 0/0
 15746 ;;		On exit  : 0/0
 15747 ;;		Unchanged: 0/0
 15748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15750 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15751 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15752 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15753 ;;Total ram usage:        0 bytes
 15754 ;; Hardware stack levels used:    1
 15755 ;; This function calls:
 15756 ;;		Nothing
 15757 ;; This function is called by:
 15758 ;;		_do_I2C_RX
 15759 ;; This function uses a non-reentrant model
 15760 ;;
 15761                           
 15762                           
 15763                           ;psect for function i1_i2c1_driver_getRXData
 15764  089F                     i1_i2c1_driver_getRXData:	
 15765                           
 15766                           ;mcc_generated_files/i2c1_driver.c: 173:     return SSP1BUF;
 15767                           
 15768                           ;incstack = 0
 15769                           ; Regs used in i1_i2c1_driver_getRXData: [wreg]
 15770  089F  0024               	movlb	4	; select bank4
 15771  08A0  0811               	movf	17,w	;volatile
 15772  08A1  0008               	return
 15773  08A2                     __end_ofi1_i2c1_driver_getRXData:	
 15774                           
 15775                           	psect	text103
 15776  08D4                     __ptext103:	
 15777 ;; *************** function i1_i2c1_driver_sendNACK *****************
 15778 ;; Defined at:
 15779 ;;		line 202 in file "mcc_generated_files/i2c1_driver.c"
 15780 ;; Parameters:    Size  Location     Type
 15781 ;;		None
 15782 ;; Auto vars:     Size  Location     Type
 15783 ;;		None
 15784 ;; Return value:  Size  Location     Type
 15785 ;;                  1    wreg      void 
 15786 ;; Registers used:
 15787 ;;		None
 15788 ;; Tracked objects:
 15789 ;;		On entry : 0/0
 15790 ;;		On exit  : 0/0
 15791 ;;		Unchanged: 0/0
 15792 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15793 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15794 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15795 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15796 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15797 ;;Total ram usage:        0 bytes
 15798 ;; Hardware stack levels used:    1
 15799 ;; This function calls:
 15800 ;;		Nothing
 15801 ;; This function is called by:
 15802 ;;		_do_I2C_DO_NACK_STOP
 15803 ;;		_do_I2C_DO_NACK_RESTART
 15804 ;; This function uses a non-reentrant model
 15805 ;;
 15806                           
 15807                           
 15808                           ;psect for function i1_i2c1_driver_sendNACK
 15809  08D4                     i1_i2c1_driver_sendNACK:	
 15810                           
 15811                           ;mcc_generated_files/i2c1_driver.c: 204:     SSP1CON2bits.ACKDT = 1;
 15812                           
 15813                           ;incstack = 0
 15814                           ; Regs used in i1_i2c1_driver_sendNACK: []
 15815  08D4  0024               	movlb	4	; select bank4
 15816  08D5  1696               	bsf	22,5	;volatile
 15817                           
 15818                           ;mcc_generated_files/i2c1_driver.c: 205:     SSP1CON2bits.ACKEN = 1;
 15819  08D6  1616               	bsf	22,4	;volatile
 15820  08D7  0008               	return
 15821  08D8                     __end_ofi1_i2c1_driver_sendNACK:	
 15822                           
 15823                           	psect	text104
 15824  0892                     __ptext104:	
 15825 ;; *************** function _i2c1_driver_resetBus *****************
 15826 ;; Defined at:
 15827 ;;		line 141 in file "mcc_generated_files/i2c1_driver.c"
 15828 ;; Parameters:    Size  Location     Type
 15829 ;;		None
 15830 ;; Auto vars:     Size  Location     Type
 15831 ;;		None
 15832 ;; Return value:  Size  Location     Type
 15833 ;;                  1    wreg      void 
 15834 ;; Registers used:
 15835 ;;		None
 15836 ;; Tracked objects:
 15837 ;;		On entry : 0/0
 15838 ;;		On exit  : 0/0
 15839 ;;		Unchanged: 0/0
 15840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15841 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15842 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15843 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15844 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15845 ;;Total ram usage:        0 bytes
 15846 ;; Hardware stack levels used:    1
 15847 ;; This function calls:
 15848 ;;		Nothing
 15849 ;; This function is called by:
 15850 ;;		_do_I2C_RESET
 15851 ;; This function uses a non-reentrant model
 15852 ;;
 15853                           
 15854                           
 15855                           ;psect for function _i2c1_driver_resetBus
 15856  0892                     _i2c1_driver_resetBus:	
 15857                           
 15858                           ;incstack = 0
 15859                           ; Regs used in _i2c1_driver_resetBus: []
 15860  0892  0008               	return
 15861  0893                     __end_of_i2c1_driver_resetBus:	
 15862                           
 15863                           	psect	text105
 15864  089C                     __ptext105:	
 15865 ;; *************** function i1_i2c1_driver_startRX *****************
 15866 ;; Defined at:
 15867 ;;		line 166 in file "mcc_generated_files/i2c1_driver.c"
 15868 ;; Parameters:    Size  Location     Type
 15869 ;;		None
 15870 ;; Auto vars:     Size  Location     Type
 15871 ;;		None
 15872 ;; Return value:  Size  Location     Type
 15873 ;;                  1    wreg      void 
 15874 ;; Registers used:
 15875 ;;		None
 15876 ;; Tracked objects:
 15877 ;;		On entry : 0/0
 15878 ;;		On exit  : 0/0
 15879 ;;		Unchanged: 0/0
 15880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15882 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15883 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15884 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15885 ;;Total ram usage:        0 bytes
 15886 ;; Hardware stack levels used:    1
 15887 ;; This function calls:
 15888 ;;		Nothing
 15889 ;; This function is called by:
 15890 ;;		_do_I2C_RCEN
 15891 ;; This function uses a non-reentrant model
 15892 ;;
 15893                           
 15894                           
 15895                           ;psect for function i1_i2c1_driver_startRX
 15896  089C                     i1_i2c1_driver_startRX:	
 15897                           
 15898                           ;mcc_generated_files/i2c1_driver.c: 168:     SSP1CON2bits.RCEN = 1;
 15899                           
 15900                           ;incstack = 0
 15901                           ; Regs used in i1_i2c1_driver_startRX: []
 15902  089C  0024               	movlb	4	; select bank4
 15903  089D  1596               	bsf	22,3	;volatile
 15904  089E  0008               	return
 15905  089F                     __end_ofi1_i2c1_driver_startRX:	
 15906                           
 15907                           	psect	text106
 15908  07FE                     __ptext106:	
 15909 ;; *************** function _returnReset *****************
 15910 ;; Defined at:
 15911 ;;		line 448 in file "mcc_generated_files/drivers/i2c_master.c"
 15912 ;; Parameters:    Size  Location     Type
 15913 ;;  p               1    0[COMMON] PTR void 
 15914 ;;		 -> NULL(0), 
 15915 ;; Auto vars:     Size  Location     Type
 15916 ;;		None
 15917 ;; Return value:  Size  Location     Type
 15918 ;;                  1    wreg      enum E6966
 15919 ;; Registers used:
 15920 ;;		wreg
 15921 ;; Tracked objects:
 15922 ;;		On entry : 0/0
 15923 ;;		On exit  : 0/0
 15924 ;;		Unchanged: 0/0
 15925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15926 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15927 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15928 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15929 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15930 ;;Total ram usage:        1 bytes
 15931 ;; Hardware stack levels used:    1
 15932 ;; This function calls:
 15933 ;;		Nothing
 15934 ;; This function is called by:
 15935 ;;		_i2c_open
 15936 ;;		_do_I2C_DO_ADDRESS_NACK
 15937 ;;		_do_I2C_TX
 15938 ;;		_do_I2C_RX
 15939 ;;		_do_I2C_TX_EMPTY
 15940 ;; This function uses a non-reentrant model
 15941 ;;
 15942                           
 15943                           
 15944                           ;psect for function _returnReset
 15945  07FE                     _returnReset:	
 15946                           
 15947                           ;mcc_generated_files/drivers/i2c_master.c: 448: static i2c_operations_t returnReset(void
      +                           *p);mcc_generated_files/drivers/i2c_master.c: 449: {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 450:     return i2c_reset_link;
 15948                           
 15949                           ;incstack = 0
 15950                           ; Regs used in _returnReset: [wreg]
 15951  07FE  3005               	movlw	5
 15952  07FF  0008               	return
 15953  0800                     __end_of_returnReset:	
 15954                           
 15955                           	psect	text107
 15956  0002                     __ptext107:	
 15957 ;; *************** function _returnStop *****************
 15958 ;; Defined at:
 15959 ;;		line 443 in file "mcc_generated_files/drivers/i2c_master.c"
 15960 ;; Parameters:    Size  Location     Type
 15961 ;;  p               1    0[COMMON] PTR void 
 15962 ;;		 -> NULL(0), 
 15963 ;; Auto vars:     Size  Location     Type
 15964 ;;		None
 15965 ;; Return value:  Size  Location     Type
 15966 ;;                  1    wreg      enum E6966
 15967 ;; Registers used:
 15968 ;;		wreg
 15969 ;; Tracked objects:
 15970 ;;		On entry : 0/0
 15971 ;;		On exit  : 0/0
 15972 ;;		Unchanged: 0/0
 15973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15974 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15975 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15976 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15977 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15978 ;;Total ram usage:        1 bytes
 15979 ;; Hardware stack levels used:    1
 15980 ;; This function calls:
 15981 ;;		Nothing
 15982 ;; This function is called by:
 15983 ;;		_i2c_open
 15984 ;;		_setCallBack
 15985 ;;		_do_I2C_DO_ADDRESS_NACK
 15986 ;;		_do_I2C_TX
 15987 ;;		_do_I2C_RX
 15988 ;;		_do_I2C_TX_EMPTY
 15989 ;; This function uses a non-reentrant model
 15990 ;;
 15991                           
 15992                           
 15993                           ;psect for function _returnStop
 15994  0002                     _returnStop:	
 15995                           
 15996                           ;mcc_generated_files/drivers/i2c_master.c: 443: static i2c_operations_t returnStop(void 
      +                          *p);mcc_generated_files/drivers/i2c_master.c: 444: {;mcc_generated_files/drivers/i2c_mas
      +                          ter.c: 445:     return i2c_stop;
 15997                           
 15998                           ;incstack = 0
 15999                           ; Regs used in _returnStop: [wreg]
 16000  0002  3001               	movlw	1
 16001  0003  0008               	return
 16002  0004                     __end_of_returnStop:	
 16003                           
 16004                           	psect	text108
 16005  0899                     __ptext108:	
 16006 ;; *************** function i1_i2c1_driver_stop *****************
 16007 ;; Defined at:
 16008 ;;		line 156 in file "mcc_generated_files/i2c1_driver.c"
 16009 ;; Parameters:    Size  Location     Type
 16010 ;;		None
 16011 ;; Auto vars:     Size  Location     Type
 16012 ;;		None
 16013 ;; Return value:  Size  Location     Type
 16014 ;;                  1    wreg      void 
 16015 ;; Registers used:
 16016 ;;		None
 16017 ;; Tracked objects:
 16018 ;;		On entry : 0/0
 16019 ;;		On exit  : 0/0
 16020 ;;		Unchanged: 0/0
 16021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16022 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16023 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16024 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16025 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16026 ;;Total ram usage:        0 bytes
 16027 ;; Hardware stack levels used:    1
 16028 ;; This function calls:
 16029 ;;		Nothing
 16030 ;; This function is called by:
 16031 ;;		_do_I2C_SEND_STOP
 16032 ;; This function uses a non-reentrant model
 16033 ;;
 16034                           
 16035                           
 16036                           ;psect for function i1_i2c1_driver_stop
 16037  0899                     i1_i2c1_driver_stop:	
 16038                           
 16039                           ;mcc_generated_files/i2c1_driver.c: 158:     SSP1CON2bits.PEN = 1;
 16040                           
 16041                           ;incstack = 0
 16042                           ; Regs used in i1_i2c1_driver_stop: []
 16043  0899  0024               	movlb	4	; select bank4
 16044  089A  1516               	bsf	22,2	;volatile
 16045  089B  0008               	return
 16046  089C                     __end_ofi1_i2c1_driver_stop:	
 16047                           
 16048                           	psect	text109
 16049  0896                     __ptext109:	
 16050 ;; *************** function i1_i2c1_driver_restart *****************
 16051 ;; Defined at:
 16052 ;;		line 151 in file "mcc_generated_files/i2c1_driver.c"
 16053 ;; Parameters:    Size  Location     Type
 16054 ;;		None
 16055 ;; Auto vars:     Size  Location     Type
 16056 ;;		None
 16057 ;; Return value:  Size  Location     Type
 16058 ;;                  1    wreg      void 
 16059 ;; Registers used:
 16060 ;;		None
 16061 ;; Tracked objects:
 16062 ;;		On entry : 0/0
 16063 ;;		On exit  : 0/0
 16064 ;;		Unchanged: 0/0
 16065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16066 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16067 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16068 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16069 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16070 ;;Total ram usage:        0 bytes
 16071 ;; Hardware stack levels used:    1
 16072 ;; This function calls:
 16073 ;;		Nothing
 16074 ;; This function is called by:
 16075 ;;		_do_I2C_SEND_RESTART_READ
 16076 ;;		_do_I2C_SEND_RESTART_WRITE
 16077 ;;		_do_I2C_SEND_RESTART
 16078 ;; This function uses a non-reentrant model
 16079 ;;
 16080                           
 16081                           
 16082                           ;psect for function i1_i2c1_driver_restart
 16083  0896                     i1_i2c1_driver_restart:	
 16084                           
 16085                           ;mcc_generated_files/i2c1_driver.c: 153:     SSP1CON2bits.RSEN = 1;
 16086                           
 16087                           ;incstack = 0
 16088                           ; Regs used in i1_i2c1_driver_restart: []
 16089  0896  0024               	movlb	4	; select bank4
 16090  0897  1496               	bsf	22,1	;volatile
 16091  0898  0008               	return
 16092  0899                     __end_ofi1_i2c1_driver_restart:	
 16093                           
 16094                           	psect	text110
 16095  08D0                     __ptext110:	
 16096 ;; *************** function _i2c1_driver_sendACK *****************
 16097 ;; Defined at:
 16098 ;;		line 196 in file "mcc_generated_files/i2c1_driver.c"
 16099 ;; Parameters:    Size  Location     Type
 16100 ;;		None
 16101 ;; Auto vars:     Size  Location     Type
 16102 ;;		None
 16103 ;; Return value:  Size  Location     Type
 16104 ;;                  1    wreg      void 
 16105 ;; Registers used:
 16106 ;;		None
 16107 ;; Tracked objects:
 16108 ;;		On entry : 0/0
 16109 ;;		On exit  : 0/0
 16110 ;;		Unchanged: 0/0
 16111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16112 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16113 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16114 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16115 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16116 ;;Total ram usage:        0 bytes
 16117 ;; Hardware stack levels used:    1
 16118 ;; This function calls:
 16119 ;;		Nothing
 16120 ;; This function is called by:
 16121 ;;		_do_I2C_DO_ACK
 16122 ;;		_do_I2C_RX
 16123 ;;		_I2C_Send_ACK
 16124 ;; This function uses a non-reentrant model
 16125 ;;
 16126                           
 16127                           
 16128                           ;psect for function _i2c1_driver_sendACK
 16129  08D0                     _i2c1_driver_sendACK:	
 16130                           
 16131                           ;mcc_generated_files/i2c1_driver.c: 198:     SSP1CON2bits.ACKDT = 0;
 16132                           
 16133                           ;incstack = 0
 16134                           ; Regs used in _i2c1_driver_sendACK: []
 16135  08D0  0024               	movlb	4	; select bank4
 16136  08D1  1296               	bcf	22,5	;volatile
 16137                           
 16138                           ;mcc_generated_files/i2c1_driver.c: 199:     SSP1CON2bits.ACKEN = 1;
 16139  08D2  1616               	bsf	22,4	;volatile
 16140  08D3  0008               	return
 16141  08D4                     __end_of_i2c1_driver_sendACK:	
 16142                           
 16143                           	psect	text111
 16144  0891                     __ptext111:	
 16145 ;; *************** function _PIN_MANAGER_IOC *****************
 16146 ;; Defined at:
 16147 ;;		line 120 in file "mcc_generated_files/pin_manager.c"
 16148 ;; Parameters:    Size  Location     Type
 16149 ;;		None
 16150 ;; Auto vars:     Size  Location     Type
 16151 ;;		None
 16152 ;; Return value:  Size  Location     Type
 16153 ;;                  1    wreg      void 
 16154 ;; Registers used:
 16155 ;;		None
 16156 ;; Tracked objects:
 16157 ;;		On entry : 0/0
 16158 ;;		On exit  : 0/0
 16159 ;;		Unchanged: 0/0
 16160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16162 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16163 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16164 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16165 ;;Total ram usage:        0 bytes
 16166 ;; Hardware stack levels used:    1
 16167 ;; This function calls:
 16168 ;;		Nothing
 16169 ;; This function is called by:
 16170 ;;		_INTERRUPT_InterruptManager
 16171 ;; This function uses a non-reentrant model
 16172 ;;
 16173                           
 16174                           
 16175                           ;psect for function _PIN_MANAGER_IOC
 16176  0891                     _PIN_MANAGER_IOC:	
 16177                           
 16178                           ;incstack = 0
 16179                           ; Regs used in _PIN_MANAGER_IOC: []
 16180  0891  0008               	return
 16181  0892                     __end_of_PIN_MANAGER_IOC:	
 16182                           
 16183                           	psect	text112
 16184  0B49                     __ptext112:	
 16185 ;; *************** function _EUSART_Transmit_ISR *****************
 16186 ;; Defined at:
 16187 ;;		line 205 in file "mcc_generated_files/eusart.c"
 16188 ;; Parameters:    Size  Location     Type
 16189 ;;		None
 16190 ;; Auto vars:     Size  Location     Type
 16191 ;;		None
 16192 ;; Return value:  Size  Location     Type
 16193 ;;                  1    wreg      void 
 16194 ;; Registers used:
 16195 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16196 ;; Tracked objects:
 16197 ;;		On entry : 0/0
 16198 ;;		On exit  : 0/0
 16199 ;;		Unchanged: 0/0
 16200 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16201 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16202 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16203 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16204 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16205 ;;Total ram usage:        1 bytes
 16206 ;; Hardware stack levels used:    1
 16207 ;; This function calls:
 16208 ;;		Nothing
 16209 ;; This function is called by:
 16210 ;;		_EUSART_Initialize
 16211 ;;		_INTERRUPT_InterruptManager
 16212 ;; This function uses a non-reentrant model
 16213 ;;
 16214                           
 16215                           
 16216                           ;psect for function _EUSART_Transmit_ISR
 16217  0B49                     _EUSART_Transmit_ISR:	
 16218                           
 16219                           ;mcc_generated_files/eusart.c: 209:     if(sizeof(eusartTxBuffer) > eusartTxBufferRemain
      +                          ing)
 16220                           
 16221                           ;incstack = 0
 16222                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 16223  0B49  3008               	movlw	8
 16224  0B4A  0021               	movlb	1	; select bank1
 16225  0B4B  026A               	subwf	_eusartTxBufferRemaining^(0+128),w	;volatile
 16226  0B4C  1803               	skipnc
 16227  0B4D  2B64               	goto	i1l784
 16228                           
 16229                           ;mcc_generated_files/eusart.c: 210:     {;mcc_generated_files/eusart.c: 211:         TX1
      +                          REG = eusartTxBuffer[eusartTxTail++];
 16230  0B4E  0843               	movf	_eusartTxTail^(0+128),w
 16231  0B4F  3E4D               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
 16232  0B50  0086               	movwf	6
 16233  0B51  3001               	movlw	1	; select bank2/3
 16234  0B52  0087               	movwf	7
 16235  0B53  0801               	movf	1,w
 16236  0B54  0023               	movlb	3	; select bank3
 16237  0B55  009A               	movwf	26	;volatile
 16238  0B56  3001               	movlw	1
 16239  0B57  00F6               	movwf	??_EUSART_Transmit_ISR
 16240  0B58  0876               	movf	??_EUSART_Transmit_ISR,w
 16241  0B59  0021               	movlb	1	; select bank1
 16242  0B5A  07C3               	addwf	_eusartTxTail^(0+128),f	;volatile
 16243                           
 16244                           ;mcc_generated_files/eusart.c: 212:         if(sizeof(eusartTxBuffer) <= eusartTxTail)
 16245  0B5B  3008               	movlw	8
 16246  0B5C  0243               	subwf	_eusartTxTail^(0+128),w	;volatile
 16247  0B5D  1803               	btfsc	3,0
 16248                           
 16249                           ;mcc_generated_files/eusart.c: 213:         {;mcc_generated_files/eusart.c: 214:        
      +                               eusartTxTail = 0;
 16250  0B5E  01C3               	clrf	_eusartTxTail^(0+128)	;volatile
 16251                           
 16252                           ;mcc_generated_files/eusart.c: 216:         eusartTxBufferRemaining++;
 16253  0B5F  3001               	movlw	1
 16254  0B60  00F6               	movwf	??_EUSART_Transmit_ISR
 16255  0B61  0876               	movf	??_EUSART_Transmit_ISR,w
 16256  0B62  07EA               	addwf	_eusartTxBufferRemaining^(0+128),f	;volatile
 16257                           
 16258                           ;mcc_generated_files/eusart.c: 217:     }
 16259  0B63  0008               	return
 16260  0B64                     i1l784:	
 16261                           ;mcc_generated_files/eusart.c: 218:     else
 16262                           
 16263                           
 16264                           ;mcc_generated_files/eusart.c: 219:     {;mcc_generated_files/eusart.c: 220:         PIE
      +                          1bits.TXIE = 0;
 16265  0B64  1211               	bcf	17,4	;volatile
 16266  0B65  0008               	return
 16267  0B66                     __end_of_EUSART_Transmit_ISR:	
 16268                           
 16269                           	psect	text113
 16270  0ECF                     __ptext113:	
 16271 ;; *************** function _EUSART_Receive_ISR *****************
 16272 ;; Defined at:
 16273 ;;		line 224 in file "mcc_generated_files/eusart.c"
 16274 ;; Parameters:    Size  Location     Type
 16275 ;;		None
 16276 ;; Auto vars:     Size  Location     Type
 16277 ;;		None
 16278 ;; Return value:  Size  Location     Type
 16279 ;;                  1    wreg      void 
 16280 ;; Registers used:
 16281 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16282 ;; Tracked objects:
 16283 ;;		On entry : 0/0
 16284 ;;		On exit  : 0/0
 16285 ;;		Unchanged: 0/0
 16286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16287 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16288 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16289 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16290 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16291 ;;Total ram usage:        0 bytes
 16292 ;; Hardware stack levels used:    1
 16293 ;; Hardware stack levels required when called:    2
 16294 ;; This function calls:
 16295 ;;		Absolute function
 16296 ;;		_EUSART_DefaultErrorHandler
 16297 ;;		_EUSART_DefaultFramingErrorHandler
 16298 ;;		_EUSART_DefaultOverrunErrorHandler
 16299 ;;		_EUSART_RxDataHandler
 16300 ;; This function is called by:
 16301 ;;		_EUSART_Initialize
 16302 ;;		_INTERRUPT_InterruptManager
 16303 ;; This function uses a non-reentrant model
 16304 ;;
 16305                           
 16306                           
 16307                           ;psect for function _EUSART_Receive_ISR
 16308  0ECF                     _EUSART_Receive_ISR:	
 16309                           
 16310                           ;mcc_generated_files/eusart.c: 227:     eusartRxStatusBuffer[eusartRxHead].status = 0;
 16311                           
 16312                           ;incstack = 0
 16313                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16314  0ECF  0875               	movf	_eusartRxHead,w	;volatile
 16315  0ED0  3E3D               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 16316  0ED1  0086               	movwf	6
 16317  0ED2  3001               	movlw	1	; select bank2/3
 16318  0ED3  0087               	movwf	7
 16319  0ED4  0181               	clrf	1
 16320                           
 16321                           ;mcc_generated_files/eusart.c: 229:     if(RC1STAbits.FERR){
 16322  0ED5  0023               	movlb	3	; select bank3
 16323  0ED6  1D1D               	btfss	29,2	;volatile
 16324  0ED7  2EE4               	goto	i1l5500
 16325                           
 16326                           ;mcc_generated_files/eusart.c: 230:         eusartRxStatusBuffer[eusartRxHead].ferr = 1;
 16327  0ED8  0875               	movf	_eusartRxHead,w	;volatile
 16328  0ED9  3E3D               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 16329  0EDA  0086               	movwf	6
 16330  0EDB  3001               	movlw	1	; select bank2/3
 16331  0EDC  0087               	movwf	7
 16332  0EDD  1481               	bsf	1,1
 16333                           
 16334                           ;mcc_generated_files/eusart.c: 231:         EUSART_FramingErrorHandler();
 16335  0EDE  0021               	movlb	1	; select bank1
 16336  0EDF  0865               	movf	(_EUSART_FramingErrorHandler+1)^(0+128),w
 16337  0EE0  008A               	movwf	10
 16338  0EE1  0864               	movf	_EUSART_FramingErrorHandler^(0+128),w
 16339  0EE2  000A               	callw
 16340  0EE3  318E               	pagesel	$
 16341  0EE4                     i1l5500:	
 16342                           
 16343                           ;mcc_generated_files/eusart.c: 234:     if(RC1STAbits.OERR){
 16344  0EE4  0023               	movlb	3	; select bank3
 16345  0EE5  1C9D               	btfss	29,1	;volatile
 16346  0EE6  2EF3               	goto	i1l5506
 16347                           
 16348                           ;mcc_generated_files/eusart.c: 235:         eusartRxStatusBuffer[eusartRxHead].oerr = 1;
 16349  0EE7  0875               	movf	_eusartRxHead,w	;volatile
 16350  0EE8  3E3D               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 16351  0EE9  0086               	movwf	6
 16352  0EEA  3001               	movlw	1	; select bank2/3
 16353  0EEB  0087               	movwf	7
 16354  0EEC  1501               	bsf	1,2
 16355                           
 16356                           ;mcc_generated_files/eusart.c: 236:         EUSART_OverrunErrorHandler();
 16357  0EED  0022               	movlb	2	; select bank2
 16358  0EEE  0860               	movf	(_EUSART_OverrunErrorHandler+1)^(0+256),w
 16359  0EEF  008A               	movwf	10
 16360  0EF0  085F               	movf	_EUSART_OverrunErrorHandler^(0+256),w
 16361  0EF1  000A               	callw
 16362  0EF2  318E               	pagesel	$
 16363  0EF3                     i1l5506:	
 16364                           
 16365                           ;mcc_generated_files/eusart.c: 239:     if(eusartRxStatusBuffer[eusartRxHead].status){
 16366  0EF3  0875               	movf	_eusartRxHead,w	;volatile
 16367  0EF4  3E3D               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 16368  0EF5  0086               	movwf	6
 16369  0EF6  3001               	movlw	1	; select bank2/3
 16370  0EF7  0087               	movwf	7
 16371  0EF8  0801               	movf	1,w
 16372  0EF9  1903               	btfsc	3,2
 16373  0EFA  2F02               	goto	i1l5510
 16374                           
 16375                           ;mcc_generated_files/eusart.c: 240:         EUSART_ErrorHandler();
 16376  0EFB  0022               	movlb	2	; select bank2
 16377  0EFC  085E               	movf	(_EUSART_ErrorHandler+1)^(0+256),w
 16378  0EFD  008A               	movwf	10
 16379  0EFE  085D               	movf	_EUSART_ErrorHandler^(0+256),w
 16380  0EFF  000A               	callw
 16381  0F00  318E               	pagesel	$
 16382                           
 16383                           ;mcc_generated_files/eusart.c: 241:     } else {
 16384  0F01  0008               	return
 16385  0F02                     i1l5510:	
 16386                           
 16387                           ;mcc_generated_files/eusart.c: 242:         EUSART_RxDataHandler();
 16388  0F02  318A  2296         	fcall	_EUSART_RxDataHandler
 16389  0F04  0008               	return
 16390  0F05                     __end_of_EUSART_Receive_ISR:	
 16391                           
 16392                           	psect	text114
 16393  08CC                     __ptext114:	
 16394 ;; *************** function _EUSART_DefaultOverrunErrorHandler *****************
 16395 ;; Defined at:
 16396 ;;		line 260 in file "mcc_generated_files/eusart.c"
 16397 ;; Parameters:    Size  Location     Type
 16398 ;;		None
 16399 ;; Auto vars:     Size  Location     Type
 16400 ;;		None
 16401 ;; Return value:  Size  Location     Type
 16402 ;;                  1    wreg      void 
 16403 ;; Registers used:
 16404 ;;		None
 16405 ;; Tracked objects:
 16406 ;;		On entry : 0/0
 16407 ;;		On exit  : 0/0
 16408 ;;		Unchanged: 0/0
 16409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16410 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16411 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16412 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16413 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16414 ;;Total ram usage:        0 bytes
 16415 ;; Hardware stack levels used:    1
 16416 ;; This function calls:
 16417 ;;		Nothing
 16418 ;; This function is called by:
 16419 ;;		_EUSART_Initialize
 16420 ;;		_EUSART_Receive_ISR
 16421 ;; This function uses a non-reentrant model
 16422 ;;
 16423                           
 16424                           
 16425                           ;psect for function _EUSART_DefaultOverrunErrorHandler
 16426  08CC                     _EUSART_DefaultOverrunErrorHandler:	
 16427                           
 16428                           ;mcc_generated_files/eusart.c: 263:     RC1STAbits.CREN = 0;
 16429                           
 16430                           ;incstack = 0
 16431                           ; Regs used in _EUSART_DefaultOverrunErrorHandler: []
 16432  08CC  0023               	movlb	3	; select bank3
 16433  08CD  121D               	bcf	29,4	;volatile
 16434                           
 16435                           ;mcc_generated_files/eusart.c: 264:     RC1STAbits.CREN = 1;
 16436  08CE  161D               	bsf	29,4	;volatile
 16437  08CF  0008               	return
 16438  08D0                     __end_of_EUSART_DefaultOverrunErrorHandler:	
 16439                           
 16440                           	psect	text115
 16441  0890                     __ptext115:	
 16442 ;; *************** function _EUSART_DefaultFramingErrorHandler *****************
 16443 ;; Defined at:
 16444 ;;		line 258 in file "mcc_generated_files/eusart.c"
 16445 ;; Parameters:    Size  Location     Type
 16446 ;;		None
 16447 ;; Auto vars:     Size  Location     Type
 16448 ;;		None
 16449 ;; Return value:  Size  Location     Type
 16450 ;;                  1    wreg      void 
 16451 ;; Registers used:
 16452 ;;		None
 16453 ;; Tracked objects:
 16454 ;;		On entry : 0/0
 16455 ;;		On exit  : 0/0
 16456 ;;		Unchanged: 0/0
 16457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16458 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16459 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16460 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16461 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16462 ;;Total ram usage:        0 bytes
 16463 ;; Hardware stack levels used:    1
 16464 ;; This function calls:
 16465 ;;		Nothing
 16466 ;; This function is called by:
 16467 ;;		_EUSART_Initialize
 16468 ;;		_EUSART_Receive_ISR
 16469 ;; This function uses a non-reentrant model
 16470 ;;
 16471                           
 16472                           
 16473                           ;psect for function _EUSART_DefaultFramingErrorHandler
 16474  0890                     _EUSART_DefaultFramingErrorHandler:	
 16475                           
 16476                           ;incstack = 0
 16477                           ; Regs used in _EUSART_DefaultFramingErrorHandler: []
 16478  0890  0008               	return
 16479  0891                     __end_of_EUSART_DefaultFramingErrorHandler:	
 16480                           
 16481                           	psect	text116
 16482  0893                     __ptext116:	
 16483 ;; *************** function _EUSART_DefaultErrorHandler *****************
 16484 ;; Defined at:
 16485 ;;		line 268 in file "mcc_generated_files/eusart.c"
 16486 ;; Parameters:    Size  Location     Type
 16487 ;;		None
 16488 ;; Auto vars:     Size  Location     Type
 16489 ;;		None
 16490 ;; Return value:  Size  Location     Type
 16491 ;;                  1    wreg      void 
 16492 ;; Registers used:
 16493 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16494 ;; Tracked objects:
 16495 ;;		On entry : 0/0
 16496 ;;		On exit  : 0/0
 16497 ;;		Unchanged: 0/0
 16498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16499 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16500 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16501 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16502 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16503 ;;Total ram usage:        0 bytes
 16504 ;; Hardware stack levels used:    1
 16505 ;; Hardware stack levels required when called:    1
 16506 ;; This function calls:
 16507 ;;		_EUSART_RxDataHandler
 16508 ;; This function is called by:
 16509 ;;		_EUSART_Initialize
 16510 ;;		_EUSART_Receive_ISR
 16511 ;; This function uses a non-reentrant model
 16512 ;;
 16513                           
 16514                           
 16515                           ;psect for function _EUSART_DefaultErrorHandler
 16516  0893                     _EUSART_DefaultErrorHandler:	
 16517                           
 16518                           ;mcc_generated_files/eusart.c: 269:     EUSART_RxDataHandler();
 16519                           
 16520                           ;incstack = 0
 16521                           ; Regs used in _EUSART_DefaultErrorHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 16522  0893  318A  2296         	fcall	_EUSART_RxDataHandler
 16523  0895  0008               	return
 16524  0896                     __end_of_EUSART_DefaultErrorHandler:	
 16525                           
 16526                           	psect	text117
 16527  0A96                     __ptext117:	
 16528 ;; *************** function _EUSART_RxDataHandler *****************
 16529 ;; Defined at:
 16530 ;;		line 248 in file "mcc_generated_files/eusart.c"
 16531 ;; Parameters:    Size  Location     Type
 16532 ;;		None
 16533 ;; Auto vars:     Size  Location     Type
 16534 ;;		None
 16535 ;; Return value:  Size  Location     Type
 16536 ;;                  1    wreg      void 
 16537 ;; Registers used:
 16538 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16539 ;; Tracked objects:
 16540 ;;		On entry : 0/0
 16541 ;;		On exit  : 0/0
 16542 ;;		Unchanged: 0/0
 16543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16544 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16545 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16546 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16547 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16548 ;;Total ram usage:        1 bytes
 16549 ;; Hardware stack levels used:    1
 16550 ;; This function calls:
 16551 ;;		Nothing
 16552 ;; This function is called by:
 16553 ;;		_EUSART_Receive_ISR
 16554 ;;		_EUSART_DefaultErrorHandler
 16555 ;; This function uses a non-reentrant model
 16556 ;;
 16557                           
 16558                           
 16559                           ;psect for function _EUSART_RxDataHandler
 16560  0A96                     _EUSART_RxDataHandler:	
 16561                           
 16562                           ;mcc_generated_files/eusart.c: 250:     eusartRxBuffer[eusartRxHead++] = RC1REG;
 16563                           
 16564                           ;incstack = 0
 16565                           ; Regs used in _EUSART_RxDataHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
 16566  0A96  0023               	movlb	3	; select bank3
 16567  0A97  0819               	movf	25,w	;volatile
 16568  0A98  00F6               	movwf	??_EUSART_RxDataHandler
 16569  0A99  0875               	movf	_eusartRxHead,w
 16570  0A9A  3E45               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
 16571  0A9B  0086               	movwf	6
 16572  0A9C  3001               	movlw	1	; select bank2/3
 16573  0A9D  0087               	movwf	7
 16574  0A9E  0876               	movf	??_EUSART_RxDataHandler,w
 16575  0A9F  0081               	movwf	1
 16576  0AA0  3001               	movlw	1
 16577  0AA1  00F6               	movwf	??_EUSART_RxDataHandler
 16578  0AA2  0876               	movf	??_EUSART_RxDataHandler,w
 16579  0AA3  07F5               	addwf	_eusartRxHead,f	;volatile
 16580                           
 16581                           ;mcc_generated_files/eusart.c: 251:     if(sizeof(eusartRxBuffer) <= eusartRxHead)
 16582  0AA4  3008               	movlw	8
 16583  0AA5  0275               	subwf	_eusartRxHead,w	;volatile
 16584  0AA6  1803               	btfsc	3,0
 16585                           
 16586                           ;mcc_generated_files/eusart.c: 252:     {;mcc_generated_files/eusart.c: 253:         eus
      +                          artRxHead = 0;
 16587  0AA7  01F5               	clrf	_eusartRxHead	;volatile
 16588                           
 16589                           ;mcc_generated_files/eusart.c: 255:     eusartRxCount++;
 16590  0AA8  3001               	movlw	1
 16591  0AA9  00F6               	movwf	??_EUSART_RxDataHandler
 16592  0AAA  0876               	movf	??_EUSART_RxDataHandler,w
 16593  0AAB  0021               	movlb	1	; select bank1
 16594  0AAC  07C2               	addwf	_eusartRxCount^(0+128),f	;volatile
 16595  0AAD  0008               	return
 16596  0AAE                     __end_of_EUSART_RxDataHandler:	
 16597  007E                     btemp	set	126	;btemp
 16598  007E                     int$flags	set	126
 16599  007E                     wtemp0	set	126


Data Sizes:
    Strings     55
    Constant    32
    Data        11
    BSS         196
    Persistent  43
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      12
    BANK0            80     80      80
    BANK1            80     33      80
    BANK2            80      2      67
    BANK3            80      0      68
    BANK4            80      0      32
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    i2c_ISR$2871	const PTR FTN()enum E7120 size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_SEND_ADR_READ(), do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), 
		 -> do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), do_I2C_IDLE(), do_I2C_RESET(), 

    returnStop@p	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    returnReset@p	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    S52$11$0	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK4[32]), UART_Byte@bits(BANK1[7]), Get_ADC@string1(BANK1[12]), STR_4(CODE[11]), 
		 -> STR_3(CODE[16]), STR_2(CODE[13]), STR_1(CODE[12]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK4[32]), UART_Byte@bits(BANK1[7]), Get_ADC@string1(BANK1[12]), STR_4(CODE[11]), 
		 -> STR_3(CODE[16]), STR_2(CODE[13]), STR_1(CODE[12]), 

    strcpy@dest	PTR unsigned char  size(1) Largest target is 7
		 -> UART_Byte@bits(BANK1[7]), 

    strcpy@d	PTR unsigned char  size(1) Largest target is 7
		 -> UART_Byte@bits(BANK1[7]), 

    strcpy@src	PTR const unsigned char  size(1) Largest target is 0

    strcpy@s	PTR const unsigned char  size(1) Largest target is 0

    strcat@src	PTR const unsigned char  size(1) Largest target is 0

    strcat@dest	PTR unsigned char  size(1) Largest target is 7
		 -> UART_Byte@bits(BANK1[7]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_9(CODE[3]), STR_8(CODE[3]), STR_7(CODE[3]), STR_6(CODE[3]), 
		 -> STR_5(CODE[3]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 12
		 -> Get_ADC@string1(BANK1[12]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK1[2]), 

    f.buffer	PTR unsigned char  size(1) Largest target is 12
		 -> Get_ADC@string1(BANK1[12]), 

    fputs@s	PTR const unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK4[32]), 

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK1[5]), 

    S2397_IO_FILE$buffer	PTR unsigned char  size(1) Largest target is 12
		 -> Get_ADC@string1(BANK1[12]), 

    fputc@fp.buffer	PTR unsigned char  size(1) Largest target is 12
		 -> Get_ADC@string1(BANK1[12]), 

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK1[5]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK1[1]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK1[5]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_9(CODE[3]), STR_8(CODE[3]), STR_7(CODE[3]), STR_6(CODE[3]), 
		 -> STR_5(CODE[3]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 3
		 -> STR_9(CODE[3]), STR_8(CODE[3]), STR_7(CODE[3]), STR_6(CODE[3]), 
		 -> STR_5(CODE[3]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK1[5]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK1[1]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(BANK1[2]), 

    dtoa@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK1[5]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK1[5]), 

    pad@buf	PTR unsigned char  size(1) Largest target is 32
		 -> dbuf(BANK4[32]), 

    sp__strcat	PTR unsigned char  size(1) Largest target is 7
		 -> UART_Byte@bits(BANK1[7]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 7
		 -> UART_Byte@bits(BANK1[7]), 

    Display_Name@string1	PTR unsigned char  size(2) Largest target is 16
		 -> Get_ADC@string1(BANK1[12]), STR_4(CODE[11]), STR_3(CODE[16]), STR_2(CODE[13]), 
		 -> STR_1(CODE[12]), 

    names	PTR unsigned char [4] size(2) Largest target is 16
		 -> STR_4(CODE[11]), STR_3(CODE[16]), STR_2(CODE[13]), STR_1(CODE[12]), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    EUSART_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), Absolute function(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), Absolute function(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), Absolute function(), 

    i2c1_driver_i2cISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), i2c_ISR(), 

    i2c1_driver_busCollisionISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), i2c_busCollisionISR(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), Absolute function(), 

    EUSART_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), Absolute function(), 

    fsmStateTable	const PTR FTN()enum E7120[16] size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_SEND_ADR_READ(), do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), 
		 -> do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), do_I2C_IDLE(), do_I2C_RESET(), 

    S52$callbackPayload	PTR void [6] size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    i2c_status.callbackPayload	PTR void [6] size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    S52$callbackTable	PTR FTN(PTR void ,)enum E6966[6] size(2) Largest target is 1
		 -> returnReset(), returnStop(), 

    i2c_status.callbackTable	PTR FTN(PTR void ,)enum E6966[6] size(2) Largest target is 1
		 -> returnReset(), returnStop(), 

    S52$data_ptr	PTR unsigned char  size(1) Largest target is 0

    i2c_status.data_ptr	PTR unsigned char  size(1) Largest target is 0


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_i2c_ISR
    _i2c_ISR->_do_I2C_DO_ADDRESS_NACK
    _i2c_ISR->_do_I2C_RX
    _i2c_ISR->_do_I2C_TX
    _i2c_ISR->_do_I2C_TX_EMPTY
    _EUSART_Receive_ISR->_EUSART_RxDataHandler
    _EUSART_DefaultErrorHandler->_EUSART_RxDataHandler

Critical Paths under _main in BANK0

    _initialize->_setMode
    _setProximityGain->_wireWriteDataByte
    _setProxIntLowThresh->_wireWriteDataByte
    _setProxIntHighThresh->_wireWriteDataByte
    _setLightIntLowThreshold->_wireWriteDataByte
    _setLightIntHighThreshold->_wireWriteDataByte
    _setLEDDrive->_wireWriteDataByte
    _setGestureWaitTime->_wireWriteDataByte
    _setGestureLEDDrive->_wireWriteDataByte
    _setGestureGain->_wireWriteDataByte
    _setGestureExitThresh->_wireWriteDataByte
    _setGestureEnterThresh->_wireWriteDataByte
    _setAmbientLightGain->_wireWriteDataByte
    _enableGestureSensor->_setMode
    _setLEDBoost->_wireWriteDataByte
    _setGestureMode->_wireWriteDataByte
    _setGestureIntEnable->_wireWriteDataByte
    _enablePower->_setMode
    _setMode->_getMode
    _wireWriteDataByte->_I2C_Write_Byte
    _getMode->_wireReadDataByte
    _wireReadDataByte->_I2C_Write_Byte
    _I2C_Write_Byte->_i2c1_driver_TXData
    _I2C_Read_Byte->_i2c1_driver_isBufferFull
    _UART_Byte->_sprintf
    _strcat->_strcpy
    _strcpy->_strlen
    _SYSTEM_Initialize->_EUSART_Initialize
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _EUSART_Initialize->_EUSART_SetTxInterruptHandler
    _On_Off->_ADC_GetConversion
    _Get_ADC->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _fputc->_putch
    _putch->_EUSART_Write
    _abs->___aomod
    _Display_Name->_strlen
    _Display_Clear->_SPI_Write
    _SPI_Write->_SPI2_Exchange8bit

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_Get_ADC
    _UART_Byte->_sprintf
    _Get_ADC->_sprintf
    _sprintf->_vfprintf

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   99444
                                              0 BANK2      2     2      0
                      _Display_Clear
                            _Get_ADC
                             _On_Off
                         _PIR_Sensor
                  _SYSTEM_Initialize
                          _UART_Byte
                _enableGestureSensor
                         _initialize
 ---------------------------------------------------------------------------------
 (1) _initialize                                           2     2      0   54520
                                             16 BANK0      2     2      0
                   _i2c1_driver_open
                _setAmbientLightGain
              _setGestureEnterThresh
               _setGestureExitThresh
                     _setGestureGain
                _setGestureIntEnable
                 _setGestureLEDDrive
                 _setGestureWaitTime
                        _setLEDDrive
           _setLightIntHighThreshold
            _setLightIntLowThreshold
                            _setMode
               _setProxIntHighThresh
                _setProxIntLowThresh
                   _setProximityGain
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setProximityGain                                     4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setProxIntLowThresh                                  2     2      0    3429
                                             10 BANK0      2     2      0
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setProxIntHighThresh                                 2     2      0    3429
                                             10 BANK0      2     2      0
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setLightIntLowThreshold                              5     3      2    3618
                                             10 BANK0      5     3      2
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setLightIntHighThreshold                             5     3      2    3618
                                             10 BANK0      5     3      2
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setLEDDrive                                          4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureWaitTime                                   3     3      0    3633
                                             10 BANK0      3     3      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureLEDDrive                                   4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureGain                                       4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureExitThresh                                 2     2      0    3429
                                             10 BANK0      2     2      0
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureEnterThresh                                2     2      0    3429
                                             10 BANK0      2     2      0
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setAmbientLightGain                                  3     3      0    3633
                                             10 BANK0      3     3      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _i2c1_driver_open                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _enableGestureSensor                                  2     2      0   23076
                                             16 BANK0      2     2      0
                        _enablePower
             _resetGestureParameters
                _setGestureIntEnable
                     _setGestureMode
                        _setLEDBoost
                            _setMode
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setLEDBoost                                          4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureMode                                       3     3      0    3633
                                             10 BANK0      3     3      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureIntEnable                                  3     3      0    3667
                                             10 BANK0      3     3      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _resetGestureParameters                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _enablePower                                          0     0      0    4340
                            _setMode
 ---------------------------------------------------------------------------------
 (2) _setMode                                              5     4      1    4340
                                             11 BANK0      5     4      1
                            _getMode
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _wireWriteDataByte                                    4     1      3    3398
                                              6 BANK0      4     1      3
                          _I2C_Start
                           _I2C_Stop
                     _I2C_Write_Byte
 ---------------------------------------------------------------------------------
 (3) _getMode                                              2     2      0     195
                                              9 BANK0      2     2      0
                   _wireReadDataByte
 ---------------------------------------------------------------------------------
 (2) _wireReadDataByte                                     3     3      0     161
                                              6 BANK0      3     3      0
                        _I2C_ReStart
                      _I2C_Read_Byte
                      _I2C_Send_NACK
                          _I2C_Start
                           _I2C_Stop
                     _I2C_Write_Byte
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Byte                                       5     5      0      96
                                              1 BANK0      5     5      0
                 _i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_TXData                                   1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _I2C_Stop                                             0     0      0       0
                   _i2c1_driver_stop
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_stop                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_Start                                            0     0      0       0
                  _i2c1_driver_start
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_start                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_Send_NACK                                        0     0      0       0
               _i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_sendNACK                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_Read_Byte                                        0     0      0       0
              _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
                _i2c1_driver_startRX
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_startRX                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_isBufferFull                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_getRXData                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_ReStart                                          0     0      0       0
                _i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_restart                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UART_Byte                                           13    13      0   11070
                                             16 BANK1     13    13      0
                            _sprintf
                             _strcat
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcat                                               5     4      1    1267
                                             10 BANK0      5     4      1
                             _strcpy
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               5     4      1     389
                                              5 BANK0      5     4      1
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     605
                     _ADC_Initialize
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PMD_Initialize
                    _PWM1_Initialize
                    _SPI2_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SPI2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PMD_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0     605
                                              2 BANK0      1     1      0
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetTxInterruptHandler                         2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PIR_Sensor                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _On_Off                                               5     5      0      96
                                              4 BANK0      5     5      0
                  _ADC_GetConversion
 ---------------------------------------------------------------------------------
 (1) _Get_ADC                                             17    17      0   10012
                                             16 BANK1     17    17      0
                  _ADC_GetConversion
                       _Display_Name
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             14    10      4    9002
                                             79 BANK0      1     1      0
                                              3 BANK1     13     9      4
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             8     5      3    8066
                                             74 BANK0      5     2      3
                                              0 BANK1      3     3      0
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           40    38      2    7647
                                             58 BANK0     16    14      2
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _dtoa                                                30    22      8    5833
                                             28 BANK0     30    22      8
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (6) _pad                                                  9     6      3    3621
                                             19 BANK0      9     6      3
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (7) _fputs                                                8     7      1    1522
                                             11 BANK0      8     7      1
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _fputc                                                8     5      3    1130
                                              3 BANK0      8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0      93
                                              2 BANK0      1     1      0
                       _EUSART_Write
 ---------------------------------------------------------------------------------
 (7) _EUSART_Write                                         2     2      0      62
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2     183
                                             19 BANK0      4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (6) ___aomod                                             19     3     16     613
                                              0 BANK0     19     3     16
 ---------------------------------------------------------------------------------
 (6) ___aodiv                                             27    11     16     625
                                              0 BANK0     27    11     16
 ---------------------------------------------------------------------------------
 (2) _Display_Name                                         7     5      2     896
                                              5 BANK0      7     5      2
                          _SPI_Write
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _strlen                                               5     3      2     400
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _ADC_GetConversion                                    4     2      2      31
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _Display_Clear                                        1     1      0      62
                                              3 BANK0      1     1      0
                          _SPI_Write
 ---------------------------------------------------------------------------------
 (3) _SPI_Write                                            2     2      0      62
                                              1 BANK0      2     2      0
                  _SPI2_Exchange8bit
 ---------------------------------------------------------------------------------
 (4) _SPI2_Exchange8bit                                    1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _INTERRUPT_InterruptManager                          0     0      0     914
                   Absolute function *
                 _EUSART_Receive_ISR *
                _EUSART_Transmit_ISR *
                    _PIN_MANAGER_IOC
                            _i2c_ISR *
                _i2c_busCollisionISR *
 ---------------------------------------------------------------------------------
 (12) _i2c_busCollisionISR                                 0     0      0       0
      _i2c1_driver_clearBusCollision
 ---------------------------------------------------------------------------------
 (13) _i2c1_driver_clearBusCollision                       0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _i2c_ISR                                             3     3      0     914
                                              3 COMMON     3     3      0
                      _do_I2C_DO_ACK *
             _do_I2C_DO_ADDRESS_NACK *
             _do_I2C_DO_NACK_RESTART *
                _do_I2C_DO_NACK_STOP *
                        _do_I2C_IDLE *
                        _do_I2C_RCEN *
                       _do_I2C_RESET *
                          _do_I2C_RX *
               _do_I2C_SEND_ADR_READ *
              _do_I2C_SEND_ADR_WRITE *
                _do_I2C_SEND_RESTART *
           _do_I2C_SEND_RESTART_READ *
          _do_I2C_SEND_RESTART_WRITE *
                   _do_I2C_SEND_STOP *
                          _do_I2C_TX *
                    _do_I2C_TX_EMPTY *
                 _i2c1_driver_isNACK
                     _mssp1_clearIRQ
 ---------------------------------------------------------------------------------
 (13) _mssp1_clearIRQ                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _do_I2C_TX_EMPTY                                     3     3      0     212
                                              0 COMMON     3     3      0
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                       _mssp1_setIRQ
                        _returnReset *
                         _returnStop *
 ---------------------------------------------------------------------------------
 (14) _mssp1_setIRQ                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _do_I2C_TX                                           3     3      0     234
                                              0 COMMON     3     3      0
           _do_I2C_SEND_RESTART_READ
          _do_I2C_SEND_RESTART_WRITE
                   _do_I2C_SEND_STOP
                 _i2c1_driver_isNACK
                        _returnReset *
                         _returnStop *
               i1_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (13) _i2c1_driver_isNACK                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (14) _do_I2C_SEND_RESTART_WRITE                           0     0      0       0
              i1_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (14) _do_I2C_SEND_RESTART_READ                            0     0      0       0
              i1_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (13) _do_I2C_SEND_ADR_WRITE                               0     0      0      22
               i1_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (13) _do_I2C_SEND_ADR_READ                                0     0      0      22
               i1_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (14) i1_i2c1_driver_TXData                                1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (13) _do_I2C_RX                                           3     3      0     212
                                              0 COMMON     3     3      0
             _do_I2C_DO_NACK_RESTART
                _do_I2C_DO_NACK_STOP
                _i2c1_driver_sendACK
                        _returnReset *
                         _returnStop *
            i1_i2c1_driver_getRXData
 ---------------------------------------------------------------------------------
 (14) i1_i2c1_driver_getRXData                             0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _do_I2C_DO_NACK_STOP                                 0     0      0       0
             i1_i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (14) _do_I2C_DO_NACK_RESTART                              0     0      0       0
             i1_i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (15) i1_i2c1_driver_sendNACK                              0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _do_I2C_RESET                                        0     0      0       0
               _i2c1_driver_resetBus
 ---------------------------------------------------------------------------------
 (14) _i2c1_driver_resetBus                                0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _do_I2C_RCEN                                         0     0      0       0
              i1_i2c1_driver_startRX
 ---------------------------------------------------------------------------------
 (14) i1_i2c1_driver_startRX                               0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _do_I2C_IDLE                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _do_I2C_DO_ADDRESS_NACK                              3     3      0     212
                                              0 COMMON     3     3      0
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                        _returnReset *
                         _returnStop *
 ---------------------------------------------------------------------------------
 (14) _returnStop                                          1     0      1       0
                                              0 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (14) _returnReset                                         1     0      1     212
                                              0 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (14) _do_I2C_SEND_STOP                                    0     0      0       0
                 i1_i2c1_driver_stop
 ---------------------------------------------------------------------------------
 (15) i1_i2c1_driver_stop                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _do_I2C_SEND_RESTART                                 0     0      0       0
              i1_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (15) i1_i2c1_driver_restart                               0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _do_I2C_DO_ACK                                       0     0      0       0
                _i2c1_driver_sendACK
 ---------------------------------------------------------------------------------
 (14) _i2c1_driver_sendACK                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _PIN_MANAGER_IOC                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _EUSART_Transmit_ISR                                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _EUSART_Receive_ISR                                  0     0      0       0
                   Absolute function *
         _EUSART_DefaultErrorHandler *
  _EUSART_DefaultFramingErrorHandler *
  _EUSART_DefaultOverrunErrorHandler *
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (13) _EUSART_DefaultOverrunErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _EUSART_DefaultFramingErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _EUSART_DefaultErrorHandler                          0     0      0       0
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (13) _EUSART_RxDataHandler                                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (13) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Display_Clear
     _SPI_Write
       _SPI2_Exchange8bit
   _Get_ADC
     _ADC_GetConversion
     _Display_Name
       _SPI_Write
         _SPI2_Exchange8bit
       _strlen
     _sprintf
       _vfprintf
         _vfpfcnvrt
           _dtoa
             ___aodiv
             ___aomod
             _abs
               ___aomod (ARG)
             _pad
               _fputc
                 _putch
                   _EUSART_Write
               _fputs
                 _fputc
                   _putch
                     _EUSART_Write
               _strlen
           _fputc
             _putch
               _EUSART_Write
   _On_Off
     _ADC_GetConversion
   _PIR_Sensor
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PMD_Initialize
     _PWM1_Initialize
     _SPI2_Initialize
     _TMR2_Initialize
     _WDT_Initialize
   _UART_Byte
     _sprintf
       _vfprintf
         _vfpfcnvrt
           _dtoa
             ___aodiv
             ___aomod
             _abs
               ___aomod (ARG)
             _pad
               _fputc
                 _putch
                   _EUSART_Write
               _fputs
                 _fputc
                   _putch
                     _EUSART_Write
               _strlen
           _fputc
             _putch
               _EUSART_Write
     _strcat
       _strcpy
         _strlen (ARG)
       _strlen
     _strcpy
       _strlen (ARG)
   _enableGestureSensor
     _enablePower
       _setMode
         _getMode
           _wireReadDataByte
             _I2C_ReStart
               _i2c1_driver_restart
             _I2C_Read_Byte
               _i2c1_driver_getRXData
               _i2c1_driver_isBufferFull
               _i2c1_driver_startRX
             _I2C_Send_NACK
               _i2c1_driver_sendNACK
             _I2C_Start
               _i2c1_driver_start
             _I2C_Stop
               _i2c1_driver_stop
             _I2C_Write_Byte
               _i2c1_driver_TXData
         _wireWriteDataByte
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
     _resetGestureParameters
     _setGestureIntEnable
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureMode
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setLEDBoost
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setMode
       _getMode
         _wireReadDataByte
           _I2C_ReStart
             _i2c1_driver_restart
           _I2C_Read_Byte
             _i2c1_driver_getRXData
             _i2c1_driver_isBufferFull
             _i2c1_driver_startRX
           _I2C_Send_NACK
             _i2c1_driver_sendNACK
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _wireWriteDataByte
       _I2C_Start
         _i2c1_driver_start
       _I2C_Stop
         _i2c1_driver_stop
       _I2C_Write_Byte
         _i2c1_driver_TXData
   _initialize
     _i2c1_driver_open
     _setAmbientLightGain
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureEnterThresh
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureExitThresh
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureGain
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureIntEnable
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureLEDDrive
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureWaitTime
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setLEDDrive
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setLightIntHighThreshold
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setLightIntLowThreshold
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setMode
       _getMode
         _wireReadDataByte
           _I2C_ReStart
             _i2c1_driver_restart
           _I2C_Read_Byte
             _i2c1_driver_getRXData
             _i2c1_driver_isBufferFull
             _i2c1_driver_startRX
           _I2C_Send_NACK
             _i2c1_driver_sendNACK
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setProxIntHighThresh
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setProxIntLowThresh
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setProximityGain
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _wireReadDataByte
       _I2C_ReStart
         _i2c1_driver_restart
       _I2C_Read_Byte
         _i2c1_driver_getRXData
         _i2c1_driver_isBufferFull
         _i2c1_driver_startRX
       _I2C_Send_NACK
         _i2c1_driver_sendNACK
       _I2C_Start
         _i2c1_driver_start
       _I2C_Stop
         _i2c1_driver_stop
       _I2C_Write_Byte
         _i2c1_driver_TXData
     _wireWriteDataByte
       _I2C_Start
         _i2c1_driver_start
       _I2C_Stop
         _i2c1_driver_stop
       _I2C_Write_Byte
         _i2c1_driver_TXData

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART_Receive_ISR *
     Absolute function(Fake) *
     _EUSART_DefaultErrorHandler *
       _EUSART_RxDataHandler
     _EUSART_DefaultFramingErrorHandler *
     _EUSART_DefaultOverrunErrorHandler *
     _EUSART_RxDataHandler *
   _EUSART_Transmit_ISR *
   _PIN_MANAGER_IOC *
   _i2c_ISR *
     _do_I2C_DO_ACK *
       _i2c1_driver_sendACK
     _do_I2C_DO_ADDRESS_NACK *
       _do_I2C_SEND_RESTART
         i1_i2c1_driver_restart
       _do_I2C_SEND_STOP
         i1_i2c1_driver_stop
       _returnReset *
       _returnStop *
     _do_I2C_DO_NACK_RESTART *
       i1_i2c1_driver_sendNACK
     _do_I2C_DO_NACK_STOP *
       i1_i2c1_driver_sendNACK
     _do_I2C_IDLE *
     _do_I2C_RCEN *
       i1_i2c1_driver_startRX
     _do_I2C_RESET *
       _i2c1_driver_resetBus
     _do_I2C_RX *
       _do_I2C_DO_NACK_RESTART
         i1_i2c1_driver_sendNACK
       _do_I2C_DO_NACK_STOP
         i1_i2c1_driver_sendNACK
       _i2c1_driver_sendACK
       _returnReset *
       _returnStop *
       i1_i2c1_driver_getRXData *
     _do_I2C_SEND_ADR_READ *
       i1_i2c1_driver_TXData
     _do_I2C_SEND_ADR_WRITE *
       i1_i2c1_driver_TXData
     _do_I2C_SEND_RESTART *
       i1_i2c1_driver_restart
     _do_I2C_SEND_RESTART_READ *
       i1_i2c1_driver_restart
     _do_I2C_SEND_RESTART_WRITE *
       i1_i2c1_driver_restart
     _do_I2C_SEND_STOP *
       i1_i2c1_driver_stop
     _do_I2C_TX *
       _do_I2C_SEND_RESTART_READ
         i1_i2c1_driver_restart
       _do_I2C_SEND_RESTART_WRITE
         i1_i2c1_driver_restart
       _do_I2C_SEND_STOP
         i1_i2c1_driver_stop
       _i2c1_driver_isNACK
       _returnReset *
       _returnStop *
       i1_i2c1_driver_TXData *
     _do_I2C_TX_EMPTY *
       _do_I2C_SEND_RESTART
         i1_i2c1_driver_restart
       _do_I2C_SEND_STOP
         i1_i2c1_driver_stop
       _mssp1_setIRQ
       _returnReset *
       _returnStop *
     _i2c1_driver_isNACK *
     _mssp1_clearIRQ *
   _i2c_busCollisionISR *
     _i2c1_driver_clearBusCollision

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     21      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      2      43       9       83.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      44      11       85.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      20      13       40.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     153      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     153      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Wed Apr 10 09:34:32 2019

                ?_EUSART_SetRxInterruptHandler 0020                                   returnReset@p 0076  
                        ?_setGestureExitThresh 0076                             __size_of_I2C_Start 0003  
                                  __CFG_CP$OFF 0000                           __size_of_do_I2C_IDLE 0005  
                                           _on 00EC                            _do_I2C_SEND_RESTART 08E0  
                         __size_of_do_I2C_RCEN 0006                                    __CFG_LVP$ON 0000  
                                          l554 09F1                                            l645 0B77  
                                          l771 0D08                                            l772 0D0F  
                                          l926 07ED                                            l958 0FB8  
                                          l990 05F2                                            _PR2 001E  
                                 __CFG_CPD$OFF 0000                                            _abs 0ADE  
                       ??_EUSART_RxDataHandler 0076                           __size_of_I2C_ReStart 0003  
                                          _pad 0654                 ?_EUSART_SetFramingErrorHandler 0020  
                      __size_of_PMD_Initialize 0008                             I2C_Write_Byte@Byte 0023  
                              _TMR2_Initialize 0968                          __size_of_do_I2C_RESET 0007  
                                          wreg 0009                                     _TXSTA1bits 019E  
                           i1_i2c1_driver_stop 0899                                           ?_abs 0033  
                                         l1413 0B36                                           l1600 066C  
                                         l1603 068C                                           l1613 00F2  
                                         l1614 0106                                           l1608 00D0  
                                         l1617 019C                                           l1609 00D7  
                                         l1762 04AE                                           l1749 03CF  
                                         l7030 0B7C                                           ?_pad 0033  
                                         l7132 0C9F                                           l7108 0A53  
                                         l7214 0ECD                                           l7118 0A40  
                                         l7048 0F9B                                           l7232 0C5E  
                                         l7152 0C78                                           l7128 0C9D  
                                         l6522 0772                                           l6602 066E  
                                         l7250 0DA8                                           l6620 0316  
                                         l6508 0D27                                           l7148 0C76  
                                         l6518 074F                                           l6606 0698  
                                         l7270 0E69                                           l6552 0AB3  
                                         l6624 033E                                           l7360 0F78  
                                         l7168 0A1A                                           l6554 0ABF  
                                         l6626 0343                                           l6714 0101  
                                         l6802 053B                                           l7178 0A2D  
                                         l6636 035A                                           l6564 0BF0  
                                         l6740 01B0                                           l6708 00EA  
                                         l6812 0562                                           l6572 0B39  
                                         l7196 0E9B                                           l6646 03A2  
                                         l6638 0369                                           l6670 0442  
                                         l6662 0435                                           l6494 0D02  
                                         l6750 01C8                                           l6718 0133  
                                         l7358 0F77                                           l7374 09CB  
                                         l6648 03AE                                           l6672 0451  
                                         l6592 0662                                           l6728 010E  
                                         l6736 01A8                                           l6808 055C  
                                         l7288 0C37                                           l7392 01EE  
                                         l7624 07DA                                           l6658 040D  
                                         l6746 01BB                                           l6818 056D  
                                         l6578 09BB                                           l6850 06B3  
                                         l7298 09E7                                           l6676 0481  
                                         l6596 066A                                           l6844 0AD0  
                                         l7492 0625                                           l6758 09F6  
                                         l6678 048D                                           l6870 06E6  
                                         l6862 06CD                                           l6854 06B5  
                                         l6872 06E7                                           l6864 06DA  
                                         l6794 0501                                           l6890 0E31  
                                         l6888 0E13                                           STR_1 103D  
                                         STR_2 1030                                           STR_3 1020  
                                         STR_4 1049                                           STR_5 1054  
                                         STR_6 1054                                           STR_7 1054  
                                         STR_8 1054                                           STR_9 1054  
                      __end_of_PWM1_Initialize 09DB                                           _LATA 010C  
                                         _LATB 010D                                           _LATC 010E  
                                         _PMD0 0911                                           _PMD1 0912  
                                         _PMD2 0913                                           _PMD3 0914  
                                         _PMD4 0915                                           _PMD5 0916  
                                         u5515 0770                                           u6084 06C6  
                                         u6165 0FA5                                           u7037 0F83  
                                         u6405 0F48                                           u6085 06C5  
                                         u6094 06D2                                           u7047 0A00  
                                         u5615 0AE8                                           u6415 0F62  
                                         u6095 06D1                                           u6335 0E4A  
                                         u6175 0CBF                                           u7057 0A64  
                                         u6425 0F6E                                           u6185 0CE8  
                                         u6275 0E7C                                           u5660 034B  
                                         u5830 00A6                                           u6295 0EAE  
                                         u5840 00A7                                           u5595 0678  
                                         u5915 01A6                           ?_do_I2C_SEND_RESTART 0076  
                                         u5695 038F                                           u5935 0122  
                                         u5945 012E                                           u5795 046F  
                                         u5885 00E2                                           u6775 0DB7  
                                         _TMR2 001D                                           _WPUA 020C  
                                         _WPUB 020D                                           _WPUC 020E  
                                 __CFG_WRT$OFF 0000                                  __CFG_FCMEN$ON 0000  
            __size_of_do_I2C_SEND_RESTART_READ 0004                                           abs@a 0033  
                                         _dbuf 0220                            ?i1_i2c1_driver_stop 0076  
                    ?_do_I2C_SEND_RESTART_READ 0076                                           _main 07D2  
                                         _dtoa 008A                                           _name 00AA  
                    __size_of_do_I2C_SEND_STOP 0004                         __size_of_do_I2C_DO_ACK 0004  
                                         _prec 00A4                                           _nout 00A0  
                                         pad@i 0037                                           pad@p 0034  
                                         fsr0h 0005                                           fsr1h 0007  
                                         indf0 0000                                           fsr0l 0004  
                                         indf1 0001                                           _prox 00BD  
                                         fsr1l 0006                                           pad@w 0039  
                                         btemp 007E                          ??_setGestureIntEnable 002A  
                             __end_of_I2C_Stop 08C9                                  __CFG_BOREN$ON 0000  
                      i1_i2c1_driver_getRXData 089F                          ?_do_I2C_SEND_ADR_READ 0076  
                                __CFG_BORV$LOW 0000                ??_i2c1_driver_clearBusCollision 0076  
                                         start 0047                                __end_of_Get_ADC 0DD6  
                          I2C_Write_Byte@count 0024                                  __CFG_CSWEN$ON 0000  
                                __CFG_MCLRE$ON 0000                                __end_of_i2c_ISR 0BEC  
                     ??_do_I2C_DO_NACK_RESTART 0076                                          ??_abs 0035  
                                        ??_pad 0036                                   _do_I2C_RESET 0924  
                                ?_EUSART_Write 0076                 __size_of_OSCILLATOR_Initialize 0008  
                __end_of_OSCILLATOR_Initialize 0960                           ??i1_i2c1_driver_stop 0076  
                              __end_of___aodiv 03E1                                          _ADACT 009F  
                     __end_of_i2c1_driver_open 09B8                                          ?_main 0076  
                                        ?_dtoa 003C                                __end_of___aomod 04C0  
                     __end_of_i2c1_driver_stop 08C6                                          _T2CON 001F  
                   __end_of_i2c1_driver_TXData 0918                                 __CFG_DEBUG$OFF 0000  
                                        i1l252 001F                                          i1l157 0729  
                                        i1l173 07A6                                          i1l261 0045  
                                        i1l254 002C                                          i1l256 0039  
                                        i1l249 0010                                          i1l784 0B64  
                                 ?_setLEDBoost 0076                                   ?_setLEDDrive 0076  
                               _setGestureGain 0E6B                                          _OSCEN 091D  
                                 vfpfcnvrt@fmt 005A                                 _setGestureMode 0C12  
                                        _TRISA 008C                                          _TRISB 008D  
                                        _TRISC 008E                                          _RXPPS 0E24  
                  __end_of_setProxIntLowThresh 0A55                                __end_of_getMode 09AE  
                           __size_of_UART_Byte 0068                                    ?_PIR_Sensor 0076  
                      __end_of_PIN_MANAGER_IOC 0892                                          _flags 00A6  
                   __end_of_i2c1_driver_isNACK 0948                         __size_of_I2C_Read_Byte 000B  
                               _WDT_Initialize 08F4                                          _names 0155  
                                        _fputc 0745                                          _fputs 0BEC  
                             _b_i2c_error_flag 00BC                   __end_of_setProxIntHighThresh 0A42  
                   ?_do_I2C_SEND_RESTART_WRITE 0076                                          pad@fp 003B  
                                        _width 00A2                                          _putch 090C  
                                        _start 00ED                          ??_do_I2C_SEND_RESTART 0076  
                                        dtoa@d 003C                                          dtoa@i 0058  
                                        dtoa@n 0050                                          dtoa@p 004A  
                                        dtoa@s 004E                                          dtoa@w 004C  
                              __end_of_setMode 06F6                              __end_of_I2C_Start 08C3  
                                        pclath 000A                        __size_of_mssp1_clearIRQ 0003  
                         i1_i2c1_driver_TXData 08FC                   __size_of_setAmbientLightGain 001E  
                       ?_do_I2C_SEND_ADR_WRITE 0076                         __size_of_I2C_Send_NACK 0003  
                                        status 0003                                          wtemp0 007E  
                              __end_of_sprintf 0D54                             __size_of_SPI_Write 0015  
                     ?_setLightIntLowThreshold 002A                     __end_of_setGestureLEDDrive 0ECF  
                        setGestureWaitTime@val 002C                                  _gestureToggle 00EB  
                                _fsmStateTable 1000                                  _gesture_data_ 01A0  
                              __initialization 0049                         ??_setGestureExitThresh 002A  
                            _SPI2_Exchange8bit 09E9                                     _i2c_status 0120  
                                 __end_of_main 07FE                                   __end_of_dtoa 01DB  
                            _handleGestureFlag 00C0                                 ??_EUSART_Write 0020  
                           ?_SPI2_Exchange8bit 0076                        __end_of_TMR2_Initialize 0970  
                  ?_INTERRUPT_InterruptManager 0076                         __end_of_setGestureGain 0E9D  
                    __size_of_setProximityGain 0029                 ??_EUSART_SetRxInterruptHandler 0022  
                       __end_of_setGestureMode 0C39                                  _do_I2C_DO_ACK 08E8  
                                       ??_main 0070                                         ??_dtoa 0044  
                __size_of_i2c1_driver_sendNACK 0004                       __size_of_SPI2_Initialize 0007  
                          ??_SPI2_Exchange8bit 0020              __size_of_setLightIntHighThreshold 0027  
                __size_of_i2c1_driver_resetBus 0001                         __end_of_WDT_Initialize 08F8  
                      ?_do_I2C_DO_ADDRESS_NACK 0076                      ?_setLightIntHighThreshold 002A  
            setLightIntHighThreshold@threshold 002A                           __end_of_Display_Name 0FBC  
                         __size_of_enablePower 000E      __end_of_EUSART_DefaultFramingErrorHandler 0891  
   __size_of_EUSART_DefaultFramingErrorHandler 0001            ??_EUSART_DefaultFramingErrorHandler 0076  
           ?_EUSART_DefaultFramingErrorHandler 0076              _EUSART_DefaultFramingErrorHandler 0890  
                                       _ADCON0 009D                                         _ADCON1 009E  
                   _EUSART_OverrunErrorHandler 015F                                         ?_fputc 0023  
                                       ?_fputs 002B                                         _ADRESH 009C  
                                       _ADRESL 009B                                         _CCPR1H 0292  
                                       _CCPR1L 0291                                         _ANSELA 018C  
                                       ?_putch 0076                                         _ANSELB 018D  
                                       _ANSELC 018E                             __CFG_RSTOSC$HFINT1 0000  
                 setProxIntLowThresh@threshold 002B                          ?i1_i2c1_driver_TXData 0076  
                                       _RC1REG 0199                                         _RC1STA 019D  
                                       _RC2PPS 0EA2                                         _RB5PPS 0E9D  
                                       _RB6PPS 0E9E                               ?_PWM1_Initialize 0076  
                                       _RB7PPS 0E9F                                         _RC5PPS 0EA5  
                                       _ODCONA 028C                                         _ODCONB 028D  
                                       _RC6PPS 0EA6                                         _ODCONC 028E  
                                       i1l5500 0EE4                                         i1l5510 0F02  
                                       i1l5506 0EF3                                         i1l4900 0D5E  
                                       i1l5436 0BD6                                         i1l4906 0D61  
                                       i1l4922 06FF                                         i1l4940 0743  
                                       i1l4932 0705                                         i1l4926 0702  
                                       i1l4918 06FC                      ??i1_i2c1_driver_getRXData 0076  
                                       i1l4962 07A8                                         i1l4972 07AE  
                                       i1l4982 0DD9                                         i1l4966 07AB  
                                       i1l4992 0DE0                                         i1l4896 0D5B  
                                       i1l4986 0DDC                                         i1l4998 0DE3  
                                       i1l7882 07C3                                         i1l7884 071B  
                                       i1l7886 0D76                                         i1l7888 0DF8  
                                    ??_Get_ADC 00D5                               _wireReadDataByte 0BA2  
                                       _OSCFRQ 091F                        ?_resetGestureParameters 0076  
                       ??_do_I2C_SEND_ADR_READ 0076                                         _TX1REG 019A  
                                       _WDTCON 0097                                         _TX1STA 019E  
                                       u563lld 0313                                         u574lld 040A  
                                    ??_i2c_ISR 0079                                         _TXREG1 019A  
                            _gesture_lr_delta_ 0070                                 __CFG_PWRTE$OFF 0000  
                setProxIntHighThresh@threshold 002B                      __end_of_SPI2_Exchange8bit 09F8  
                                       _On_Off 0F3E                              _gesture_lr_count_ 00B4  
                          wireReadDataByte@reg 0027                          _i2c1_driver_getRXData 08B4  
                          wireReadDataByte@val 0028                                   vfprintf@cfmt 00C6  
                            _gesture_ud_delta_ 0072                              __end_of_UART_Byte 05F8  
                  __end_of_do_I2C_DO_NACK_STOP 08F0                                  _I2C_Read_Byte 09B8  
                            _gesture_ud_count_ 00B6                                      ??___aodiv 0030  
                          __size_of_PIR_Sensor 000C                                      ??___aomod 0030  
        __end_of_i2c1_driver_clearBusCollision 08AB         __size_of_i2c1_driver_clearBusCollision 0003  
                _i2c1_driver_clearBusCollision 08A8                     __end_of_setGestureWaitTime 0C60  
                               __CFG_STVREN$ON 0000                __size_of_do_I2C_DO_NACK_RESTART 0004  
                          _EUSART_Transmit_ISR 0B49                                 ?_do_I2C_DO_ACK 0076  
                              ?_setGestureGain 0076                                  _I2C_Send_NACK 08BA  
                                    ??_getMode 0029                                         pad@buf 0033  
                              ?_setGestureMode 0076                                         _strcat 0A7F  
                                       dtoa@fp 0047                                         _strcpy 0AC6  
                                       _strlen 0AAE                        ??_setGestureEnterThresh 002A  
                            __end_of_SPI_Write 0A6A                                         fputc@c 0023  
                  __end_of_i2c1_driver_sendACK 08D4                                 _PMD_Initialize 0960  
               __end_of_do_I2C_DO_ADDRESS_NACK 0D7F                                         fputs@c 002F  
                                       fputs@i 0030                                         fputs@s 0032  
                                    ?_I2C_Stop 0076                             Display_Name@length 0028  
                                    ??_setMode 002C                                ?_WDT_Initialize 0076  
                  __end_of_i2c1_driver_restart 08B1                                   ?_returnReset 0076  
                     ADC_GetConversion@channel 0023                    __end_of_i2c1_driver_startRX 08BA  
                             __end_of_vfprintf 0E39                               ?_PIN_MANAGER_IOC 0076  
                                    ??_sprintf 006F                           ?_EUSART_Transmit_ISR 0076  
               __end_of_resetGestureParameters 0A7F                              _SYSTEM_Initialize 0AF7  
                      __end_of__initialization 0086                               _do_I2C_SEND_STOP 08E4  
                           __size_of_do_I2C_RX 0046                             __size_of_do_I2C_TX 004F  
                           ?_SYSTEM_Initialize 0076                         setGestureWaitTime@time 002B  
                     __size_of_do_I2C_TX_EMPTY 0031           __end_of_EUSART_SetTxInterruptHandler 09A5  
        __size_of_EUSART_SetTxInterruptHandler 0009                   _EUSART_SetTxInterruptHandler 099C  
                               ?_I2C_Read_Byte 0076                                 __pcstackCOMMON 0076  
                                 __pidataBANK1 08C9                                   __pidataBANK2 0970  
                          ??_SYSTEM_Initialize 0023                                  __end_of_fputc 078C  
                                __end_of_fputs 0C12                          i1i2c1_driver_TXData@d 0076  
                         _setProxIntHighThresh 0A2F                                 _gesture_state_ 00AE  
                                __end_of_putch 0912                                 ?_I2C_Send_NACK 0076  
                             ?_TMR2_Initialize 0076                          i1_i2c1_driver_restart 0896  
                       __end_of_PMD_Initialize 0968                          i1_i2c1_driver_startRX 089C  
            __size_of_i2c1_driver_isBufferFull 0007                                     ??_I2C_Stop 0020  
                         _eusartRxStatusBuffer 013D                      ?_i2c1_driver_isBufferFull 0076  
                           _gesture_far_count_ 00B0                           __size_of_setLEDBoost 0032  
                         __size_of_setLEDDrive 0029                ??_EUSART_SetOverrunErrorHandler 0022  
                       _do_I2C_DO_NACK_RESTART 08F0                         ??i1_i2c1_driver_TXData 0076  
                                      ??_fputc 0026                      __end_of_SYSTEM_Initialize 0B12  
                                      ??_fputs 002C                          ??_EUSART_Transmit_ISR 0076  
                                      ??_putch 0022                              ??_SPI2_Initialize 0020  
                               _mssp1_clearIRQ 08A5                                     __pbssBANK1 00A0  
                                   __pbssBANK2 0120                                     __pbssBANK3 01A0  
                                   __pbssBANK4 0220                                 Get_ADC@string1 00D8  
                         wireWriteDataByte@reg 0029                           wireWriteDataByte@val 0026  
                         __end_of_EUSART_Write 0D2A                            getMode@enable_value 002A  
                     ??i1_i2c1_driver_sendNACK 0076                    __size_of_EUSART_Receive_ISR 0036  
                       ?_i2c1_driver_getRXData 0076                     __size_of_SPI2_Exchange8bit 000F  
                                      ?_On_Off 0076                   __size_of_i2c_busCollisionISR 0003  
                                   __pmaintext 07D2                          __end_of_Display_Clear 0A09  
                                ??_do_I2C_IDLE 0076                                  ??_do_I2C_RCEN 0076  
                ?_EUSART_SetTxInterruptHandler 0020               _EUSART_TxDefaultInterruptHandler 00E8  
                      setGestureLEDDrive@drive 002D                                __CFG_PPS1WAY$ON 0000  
                              ??_do_I2C_DO_ACK 0076                                 UART_Byte@onStr 00DE  
                 __size_of_enableGestureSensor 005C                                     __pintentry 0004  
                        ?_setProxIntHighThresh 0076                                        _CCP1CON 0293  
                      __size_of_I2C_Write_Byte 001C                                  ??_I2C_ReStart 0020  
                             _setProximityGain 0CD7                                    setMode@mode 002F  
                 ??_EUSART_DefaultErrorHandler 0077                                ?_PMD_Initialize 0076  
                          _setAmbientLightGain 0B84                        __size_of_ADC_Initialize 0008  
                                      ?_strcat 002A                          __size_of_Display_Name 0041  
               ?_i2c1_driver_clearBusCollision 0076                                        ?_strcpy 0025  
                                      ?_strlen 0020                              ?_i2c1_driver_open 0076  
                            __end_of_do_I2C_RX 07D2                              __end_of_do_I2C_TX 0745  
                            ?_i2c1_driver_stop 0076                                  _eusartRxCount 00C2  
                                      _SP1BRGH 019C                                        _SP1BRGL 019B  
                           ??_i2c1_driver_open 0020                             ??_i2c1_driver_stop 0020  
                                      _OSCCON1 0919                                        _OSCCON3 091B  
                                   _brightness 00A8                                  ?_mssp1_setIRQ 0076  
                           __size_of_vfpfcnvrt 00D0                                   ??_PIR_Sensor 0020  
                __size_of_EUSART_RxDataHandler 0018                                        _OSCTUNE 091E  
                                      _SSP1ADD 0212                                        _SSP2ADD 021A  
                                      _SLRCONA 030C                                        _SLRCONB 030D  
                                      _SLRCONC 030E                                        _SSP1BUF 0211  
                       __end_of_mssp1_clearIRQ 08A8                                        _SSP2BUF 0219  
                                      _SSP1MSK 0213                       ??_EUSART_SetErrorHandler 0022  
                            SPI_Write@incoming 0022                    __end_of_setGestureIntEnable 0DAA  
                      ??_do_I2C_SEND_ADR_WRITE 0076                               UART_Byte@proxStr 00DF  
                  ??_do_I2C_SEND_RESTART_WRITE 0076                                        _Get_ADC 0DAA  
                           _i2c1_driver_TXData 0912                           ?_setAmbientLightGain 0076  
                           _i2c1_driver_i2cISR 00B8                                        _i2c_ISR 0BC6  
                                    _I2C_Start 08C0                                ??_I2C_Read_Byte 0021  
                                setMode@enable 002B            __size_of_EUSART_DefaultErrorHandler 0003  
                           _i2c1_driver_isNACK 0940                                __size_of_On_Off 003D  
                          ?_i2c1_driver_TXData 0076                                   _Display_Name 0F7B  
                                      ___aodiv 02EA                                        ___aomod 03E1  
                              ??_I2C_Send_NACK 0020                             __end_of_PIR_Sensor 09CF  
                       ?i1_i2c1_driver_restart 0076                                      ?_vfprintf 006A  
                            ??_do_I2C_TX_EMPTY 0076                            ?_i2c1_driver_isNACK 0076  
                       ?i1_i2c1_driver_startRX 0076                       __end_of_wireReadDataByte 0BC6  
                                   _initialize 01DB                                        _getMode 09A5  
             __size_of_setLightIntLowThreshold 0027                             _setGestureLEDDrive 0E9D  
                                      __ptext1 01DB                                        __ptext2 0CD7  
                                      __ptext3 0A42                                        __ptext4 0A2F  
                                      __ptext5 0C87                                        __ptext6 0C60  
                                      __ptext7 0CAE                                        __ptext8 0C39  
                                      __ptext9 0E9D                    __size_ofi1_i2c1_driver_stop 0003  
                          __end_of_do_I2C_IDLE 0906                            __end_of_do_I2C_RCEN 090C  
                              __size_of_strcat 0017                                __size_of_strcpy 0018  
                              __size_of_strlen 0018                          _OSCILLATOR_Initialize 0958  
                                    _T2CONbits 001F                                   __size_of_abs 0019  
                                 __size_of_pad 0053                    __end_of_do_I2C_SEND_RESTART 08E4  
                               ??_mssp1_setIRQ 0076                           ??_i2c1_driver_TXData 0020  
                                      _setMode 06A7                       ??_PIN_MANAGER_Initialize 0020  
                          __end_of_I2C_ReStart 08B4                            ?_setGestureLEDDrive 0076  
                           UART_Byte@brightStr 00E1                                        _printed 00BF  
                              ?_mssp1_clearIRQ 0076                       _do_I2C_SEND_RESTART_READ 08D8  
                   __size_of_SYSTEM_Initialize 001B                                        _sprintf 0D2A  
                                      clrloop0 0919                           __size_of_returnReset 0002  
                         end_of_initialization 0086                           ??_i2c1_driver_isNACK 0076  
                        ??_setAmbientLightGain 002A                   __size_of_setProxIntLowThresh 0013  
        __end_of_EUSART_SetOverrunErrorHandler 0993         __size_of_EUSART_SetOverrunErrorHandler 0009  
                _EUSART_SetOverrunErrorHandler 098A                                        fputc@fp 0025  
                                      init_ram 091E                   __end_of_i2c1_driver_sendNACK 08FC  
                                      fputs@fp 002B                                        initloop 091F  
              __size_ofi1_i2c1_driver_sendNACK 0004                                     ?_I2C_Start 0076  
                enableGestureSensor@interrupts 0031                              _EUSART_Initialize 0FBC  
                 __end_of_i2c1_driver_resetBus 0893                  setGestureExitThresh@threshold 002B  
                         ??_setGestureLEDDrive 002A                             ?_EUSART_Initialize 0076  
                            __end_of_vfpfcnvrt 0590                                   initialize@id 0031  
                             ??_setGestureGain 002A                         ??_setProxIntHighThresh 002A  
                             ??_setGestureMode 002A                      _do_I2C_SEND_RESTART_WRITE 08DC  
                          Display_Name@string1 0025                                     ??_vfprintf 006D  
                __size_of_setGestureExitThresh 0013                                        strcpy@d 0028  
                                      strlen@a 0023                                        strcpy@s 0027  
                                      strlen@s 0020                                      _UART_Byte 0590  
                          ??_EUSART_Initialize 0022                               ??_WDT_Initialize 0020  
                            _wireWriteDataByte 0B12                 ??_EUSART_SetTxInterruptHandler 0022  
                                   _returnStop 0002                                      _PORTCbits 000E  
                     __end_of_do_I2C_SEND_STOP 08E8                                  ??_enablePower 0030  
                           ?_wireWriteDataByte 0026                setLightIntHighThreshold@val_low 002D  
               __size_of_setGestureEnterThresh 0013                  __end_of_setGestureEnterThresh 0A1C  
                           _setGestureWaitTime 0C39                          __size_of_EUSART_Write 002A  
                                    _SPI_Write 0A55                              __size_of_I2C_Stop 0003  
                                  returnStop@p 0076                            ??_wireWriteDataByte 0029  
                             __CFG_FEXTOSC$OFF 0000                __size_of_EUSART_SetErrorHandler 0009  
                          ?_setGestureWaitTime 0076                      __end_of_EUSART_Initialize 1000  
                                  _CCP1CONbits 0293                                      On_Off@val 0027  
                        SPI2_Exchange8bit@data 0020                  __size_of_do_I2C_SEND_ADR_READ 0008  
                        setProximityGain@drive 002D                       __size_of_PWM1_Initialize 000C  
                               __end_of_On_Off 0F7B               __end_of_i2c1_driver_isBufferFull 0940  
                                  _do_I2C_IDLE 0901                                    _do_I2C_RCEN 0906  
                    __end_of_wireWriteDataByte 0B2D                                 _I2C_Write_Byte 0B2D  
           __end_of_EUSART_DefaultErrorHandler 0896                     _EUSART_DefaultErrorHandler 0893  
                                  vfpfcnvrt@ap 005B                                    vfpfcnvrt@fp 0069  
                                  vfpfcnvrt@ll 0061                           ??_setGestureWaitTime 002A  
                                   ?_UART_Byte 0076                                   _EUSART_Write 0D00  
                                  ?_initialize 0076                                    _I2C_ReStart 08B1  
                               _ADC_Initialize 0950                         i1_i2c1_driver_sendNACK 08D4  
                       ?_OSCILLATOR_Initialize 0076                       _setLightIntHighThreshold 0C60  
                              _gesture_motion_ 00AC                                _SPI2_Initialize 0932  
                 __size_of_do_I2C_DO_NACK_STOP 0004                                 __end_of_strcat 0A96  
                               __end_of_strcpy 0ADE                                 __end_of_strlen 0AC6  
                      ?_do_I2C_DO_NACK_RESTART 0076                            start_initialization 0049  
                           setGestureGain@gain 002D                            _i2c_busCollisionISR 08AB  
              __size_of_PIN_MANAGER_Initialize 0039                       ?i1_i2c1_driver_getRXData 0076  
                                  __end_of_abs 0AF7                                    __end_of_pad 06A7  
                                   ?_SPI_Write 0076   EUSART_SetRxInterruptHandler@interruptHandler 0020  
 EUSART_SetTxInterruptHandler@interruptHandler 0020               setLightIntHighThreshold@val_high 002E  
                          _enableGestureSensor 05F8                            __end_of_enablePower 09E9  
                                  putch@txData 0022                   __size_of_i2c1_driver_sendACK 0004  
                      ??_i2c1_driver_getRXData 0020                       __end_of_setProximityGain 0D00  
                 __size_of_i2c1_driver_restart 0003                   __size_of_i2c1_driver_startRX 0003  
                                  ??_I2C_Start 0020                       __size_of_PIN_MANAGER_IOC 0001  
                                     ??_On_Off 0024                 ?_EUSART_SetOverrunErrorHandler 0020  
                         ?_i2c_busCollisionISR 0076                               __CFG_LPBOREN$OFF 0000  
                         __end_of_mssp1_setIRQ 08A5                                    vfprintf@fmt 006A  
                       __end_of_I2C_Write_Byte 0B49                     _EUSART_FramingErrorHandler 00E4  
                             ??_PMD_Initialize 0020                setLightIntLowThreshold@val_high 002E  
                       _EUSART_SetErrorHandler 0978                           ?_enableGestureSensor 0076  
                                  _CCPTMRSbits 029F                         __end_of_ADC_Initialize 0958  
                                ?_do_I2C_RESET 0076                                    __pdataBANK1 00EB  
                                  __pdataBANK2 0155                             setGestureMode@mode 002B  
                      _setLightIntLowThreshold 0C87                      setGestureIntEnable@enable 002C  
                     setAmbientLightGain@drive 002B                                    ?_returnStop 0076  
                                     ??_strcat 002B                                       ??_strcpy 0026  
                                     ??_strlen 0022                 __end_of_do_I2C_DO_NACK_RESTART 08F4  
                                ??_setLEDBoost 002A                                  ??_setLEDDrive 002A  
                         _i2c1_driver_sendNACK 08F8                    __end_of_EUSART_Transmit_ISR 0B66  
                       setGestureIntEnable@val 002B                                    __pbssCOMMON 0070  
                                    ___latbits 0002                                      _adcResult 00BE  
                         _i2c1_driver_resetBus 0892                                  __pcstackBANK0 0020  
                                __pcstackBANK1 00C5                               ___aodiv@dividend 0028  
                     __size_of_TMR2_Initialize 0008                                      _do_I2C_RX 078C  
                                    _do_I2C_TX 06F6                 __size_of_do_I2C_SEND_ADR_WRITE 0007  
                __size_ofi1_i2c1_driver_TXData 0005                     __end_of_EUSART_Receive_ISR 0F05  
                __end_of_do_I2C_SEND_ADR_WRITE 0932                                       ?_Get_ADC 0076  
                   __size_of_EUSART_Initialize 0044                      __size_of_i2c1_driver_open 000A  
                    __size_of_i2c1_driver_stop 0003               _EUSART_RxDefaultInterruptHandler 00E6  
                                     ?_i2c_ISR 0076                            __size_of_initialize 010F  
                              _do_I2C_TX_EMPTY 0DD6                                      __pnvBANK1 00E4  
                                    __pnvBANK2 015D                          ??_i2c_busCollisionISR 0076  
                        __end_of_fsmStateTable 1020                   __end_of_EUSART_RxDataHandler 0AAE  
                       _PIN_MANAGER_Initialize 0F05                                      _dtoa$2098 0048  
                      ??i1_i2c1_driver_restart 0076                        ??i1_i2c1_driver_startRX 0076  
                              ?_I2C_Write_Byte 0076                                  UART_Byte@bits 00D7  
                        ??_enableGestureSensor 0030                        __end_of_SPI2_Initialize 0939  
                                     ?___aodiv 0020                                       ?___aomod 0020  
                               ??_do_I2C_RESET 0076                                      __ptext100 0940  
                                    __ptext101 08FC                                      __ptext110 08D0  
                                    __ptext102 089F                               ___aodiv@quotient 0033  
                                    __ptext111 0891                                      __ptext103 08D4  
                                    __ptext112 0B49                                      __ptext104 0892  
                                    __ptext113 0ECF                                      __ptext105 089C  
                                    __ptext114 08CC                                      __ptext106 07FE  
                                    __ptext115 0890                                      __ptext107 0002  
                                    __ptext116 0893                                      __ptext108 0899  
                                    __ptext117 0A96                                      __ptext109 0896  
                   __size_of_wireWriteDataByte 001B                       ??_do_I2C_DO_ADDRESS_NACK 0076  
                              ?_ADC_Initialize 0076                    _i2c1_driver_busCollisionISR 00BA  
                                 _eusartRxHead 0075                                   _eusartTxHead 00C4  
                                 _eusartRxTail 0074                                   _eusartTxTail 00C3  
                                  ??_UART_Byte 00D5                            _setProxIntLowThresh 0A42  
                        __end_of_do_I2C_DO_ACK 08EC                              ??_PWM1_Initialize 0020  
                 ??_INTERRUPT_InterruptManager 007C                       _i2c1_driver_isBufferFull 0939  
                                     ?_getMode 0076                              ?_wireReadDataByte 0076  
                   ??_do_I2C_SEND_RESTART_READ 0076                              __size_of_vfprintf 0032  
                        ?_i2c1_driver_sendNACK 0076                __end_ofi1_i2c1_driver_getRXData 08A2  
                      _eusartTxBufferRemaining 00EA                               ??_mssp1_clearIRQ 0076  
                                     _BAUD1CON 019F                                    _enablePower 09DB  
                           ??_wireReadDataByte 0026                          ?_i2c1_driver_resetBus 0076  
           __size_of_do_I2C_SEND_RESTART_WRITE 0004                                       _I2C_Stop 08C6  
                     ??_resetGestureParameters 0020                                       ?_setMode 002B  
                                   ?_do_I2C_RX 0076                                     ?_do_I2C_TX 0076  
                             __CFG_WDTE$SWDTEN 0000                                    ??_SPI_Write 0021  
                            _i2c1_driver_start 08BD                         __size_of_Display_Clear 0011  
                                     ?_sprintf 00C8                            __end_of_setLEDBoost 0E6B  
                          __end_of_setLEDDrive 0CD7                                 __size_of_fputc 0047  
                               __size_of_fputs 0026                                 __size_of_putch 0006  
                         ?_setProxIntLowThresh 0076                             ?_i2c1_driver_start 0076  
                               _eusartRxBuffer 0145                                 _eusartTxBuffer 014D  
       EUSART_SetErrorHandler@interruptHandler 0020                                       _LATCbits 010E  
                          __size_of_returnStop 0002                                      clear_ram0 0918  
                                     _PIE0bits 0090                                       _PIE1bits 0091  
                 __size_of_setGestureIntEnable 002B                              _eusartRxLastError 00C1  
                          _gesture_near_count_ 00B2                            ??_i2c1_driver_start 0020  
          __size_of_INTERRUPT_InterruptManager 0043                                       _PIR0bits 0010  
                                     _PIR1bits 0011                ??_EUSART_SetFramingErrorHandler 0022  
                        __end_of_I2C_Read_Byte 09C3                      ??_setLightIntLowThreshold 002C  
                                     _SSP1CON1 0215                                       _SSP1CON2 0216  
                                     _SSP2CON1 021D      __end_of_EUSART_DefaultOverrunErrorHandler 08D0  
   __size_of_EUSART_DefaultOverrunErrorHandler 0004            ??_EUSART_DefaultOverrunErrorHandler 0076  
           ?_EUSART_DefaultOverrunErrorHandler 0076              _EUSART_DefaultOverrunErrorHandler 08CC  
                               setLEDBoost@val 002C                                       _SSP1STAT 0214  
                                     _SSP2STAT 021C                     __end_ofi1_i2c1_driver_stop 089C  
                            ??_PIN_MANAGER_IOC 0076                          __end_of_I2C_Send_NACK 08BD  
                               setLEDDrive@val 002C                                      _vfpfcnvrt 04C0  
                                   _ADCON0bits 009D                              ?_do_I2C_SEND_STOP 0076  
                    __end_of_i2c1_driver_start 08C0                                  ??_returnReset 0077  
                           ??_do_I2C_SEND_STOP 0076                    __size_of_i2c1_driver_TXData 0006  
                  __end_of_setAmbientLightGain 0BA2              __end_of_do_I2C_SEND_RESTART_WRITE 08E0  
                      __end_of_do_I2C_TX_EMPTY 0E07                   __end_of_setGestureExitThresh 0A2F  
                        ??_setProxIntLowThresh 002A                   __size_of_do_I2C_SEND_RESTART 0004  
                  __size_of_i2c1_driver_isNACK 0008                              setGestureGain@val 002C  
                        __size_of_mssp1_setIRQ 0003                              ??_TMR2_Initialize 0020  
                             __size_of_Get_ADC 002C                            _do_I2C_DO_NACK_STOP 08EC  
                             __size_of_i2c_ISR 0026                     ??_setLightIntHighThreshold 002C  
                                   vfprintf@ap 006C                                     vfprintf@fp 00C5  
                            _ADC_GetConversion 0B66                    __size_of_setGestureLEDDrive 0032  
                               setMode@reg_val 002E                 setLightIntLowThreshold@val_low 002D  
                                 ?_do_I2C_IDLE 0076                                  _Display_Clear 09F8  
                                 ?_do_I2C_RCEN 0076                              setGestureMode@val 002C  
                             ?_SPI2_Initialize 0076                        ?i1_i2c1_driver_sendNACK 0076  
                      ??_OSCILLATOR_Initialize 0020                            _EUSART_ErrorHandler 015D  
                           ?_ADC_GetConversion 0020                               __size_of___aodiv 00F7  
                             __size_of___aomod 00DF                            _i2c1_driver_sendACK 08D0  
                __size_of_setProxIntHighThresh 0013                __size_of_do_I2C_DO_ADDRESS_NACK 002B  
                  ?_EUSART_DefaultErrorHandler 0076                            i2c1_driver_TXData@d 0020  
                                   ?_vfpfcnvrt 005A                         ??_i2c1_driver_sendNACK 0020  
                                 ??_initialize 0030                                   ?_I2C_ReStart 0076  
                          _i2c1_driver_restart 08AE                                ___aodiv@divisor 0020  
                              ___aodiv@counter 0031               setLightIntLowThreshold@threshold 002A  
                         ?_do_I2C_DO_NACK_STOP 0076                            _i2c1_driver_startRX 08B7  
                 __end_of_do_I2C_SEND_ADR_READ 0950                               __size_of_getMode 0009  
                       ??_i2c1_driver_resetBus 0076                                    _setLEDBoost 0E39  
                          ??_ADC_GetConversion 0022                                    _setLEDDrive 0CAE  
                                   sprintf@fmt 00C8                                     strcat@dest 002E  
              __size_of_resetGestureParameters 0015                           _EUSART_RxDataHandler 0A96  
                                 _mssp1_setIRQ 08A2                __end_of_setLightIntLowThreshold 0CAE  
                                  ??_do_I2C_RX 0076                                    ??_do_I2C_TX 0076  
                        setGestureLEDDrive@val 002C                               __size_of_setMode 004F  
                                     __ptext10 0E6B                                       __ptext11 0A1C  
                                     __ptext20 09DB                                       __ptext12 0A09  
                                     __ptext21 06A7                                       __ptext13 0B84  
                                     __ptext30 08BD                                       __ptext22 0B12  
                                     __ptext14 09AE                                       __ptext31 08BA  
                                     __ptext23 09A5                                       __ptext15 05F8  
                                     __ptext40 0A7F                                       __ptext32 08F8  
                                     __ptext24 0BA2                                       __ptext16 0E39  
                                     __ptext41 0AC6                                       __ptext33 09B8  
                                     __ptext25 0B2D                                       __ptext17 0C12  
                                     __ptext50 0FBC                                       __ptext42 0AF7  
                                     __ptext34 08B7                                       __ptext26 0912  
                                     __ptext18 0D7F                                       __ptext51 099C  
                                     __ptext43 08F4                                       __ptext35 0939  
                                     __ptext27 08C6                                       __ptext19 0A6A  
                                     __ptext60 0D2A                                       __ptext52 0993  
                                     __ptext44 0968                                       __ptext36 08B4  
                                     __ptext28 08C3                                       __ptext61 0E07  
                                     __ptext53 098A                                       __ptext45 0932  
                                     __ptext37 08B1                                       __ptext29 08C0  
                                     __ptext70 03E1                                       __ptext62 04C0  
                                     __ptext54 0981                                       __ptext46 09CF  
                                     __ptext38 08AE                                       __ptext71 02EA  
                                     __ptext63 008A                                       __ptext55 0978  
                                     __ptext47 0960                                       __ptext39 0590  
                                     __ptext80 08A8                                       __ptext72 0F7B  
                                     __ptext64 0654                                       __ptext56 0950  
                                     __ptext48 0F05                                       __ptext81 0BC6  
                                     __ptext73 0AAE                                       __ptext65 0BEC  
                                     __ptext57 09C3                                       __ptext49 0958  
                                     __ptext90 092B                                       __ptext82 08A5  
                                     __ptext74 0B66                                       __ptext66 0745  
                                     __ptext58 0F3E                                       __ptext91 0948  
                                     __ptext83 078C                                       __ptext75 09F8  
                                     __ptext67 090C                                       __ptext59 0DAA  
                                     __ptext92 08E4                                       __ptext84 06F6  
                                     __ptext76 0A55                                       __ptext68 0D00  
                                     __ptext93 08E0                                       __ptext85 0D54  
                                     __ptext77 09E9                                       __ptext69 0ADE  
                                     __ptext94 08DC                                       __ptext86 08F0  
                                     __ptext95 08D8                                       __ptext87 08EC  
                                     __ptext79 08AB                                       __ptext96 0901  
                                     __ptext88 08E8                                       __ptext97 0924  
                                     __ptext89 0906                                       __ptext98 0DD6  
                                     __ptext99 08A2                          _setGestureEnterThresh 0A09  
                                 _SSP1CON1bits 0215                                   _SSP1CON2bits 0216  
               setGestureEnterThresh@threshold 002B                                   _SSP2CON1bits 021D  
                         ?_i2c1_driver_sendACK 0076                           __end_of_do_I2C_RESET 092B  
                             __size_of_sprintf 002A                                     strcpy@dest 0029  
                         ?_i2c1_driver_restart 0076                            __end_of_returnReset 0800  
                             _i2c1_driver_open 09AE                               _i2c1_driver_stop 08C3  
                                __size_of_main 002C                           ?_i2c1_driver_startRX 0076  
                                __size_of_dtoa 0151                              ?_setProximityGain 0076  
               __size_of_i2c1_driver_getRXData 0003                  __end_of_i2c1_driver_getRXData 08B7  
                           __end_of_initialize 02EA                      __end_of_ADC_GetConversion 0B84  
                      ?_EUSART_SetErrorHandler 0020                             ??_setProximityGain 002A  
             __size_ofi1_i2c1_driver_getRXData 0003                                     _RC1STAbits 019D  
                               ?_Display_Clear 0076                 __end_ofi1_i2c1_driver_sendNACK 08D8  
EUSART_SetOverrunErrorHandler@interruptHandler 0020                                       int$flags 007E  
                                     _vfprintf 0E07             __end_of_INTERRUPT_InterruptManager 0047  
                   _INTERRUPT_InterruptManager 0004          __end_of_EUSART_SetFramingErrorHandler 098A  
       __size_of_EUSART_SetFramingErrorHandler 0009                  _EUSART_SetFramingErrorHandler 0981  
                                 _SSP1STATbits 0214                                  Display_Name@i 002A  
                          setProximityGain@val 002C               __end_of_do_I2C_SEND_RESTART_READ 08DC  
                  __size_of_setGestureWaitTime 0027                                   ??_returnStop 0077  
                                 _SSP2STATbits 021C                          ??_do_I2C_DO_NACK_STOP 0076  
                             ___aomod@dividend 0028                        __size_of_setGestureGain 0032  
                                   _INTCONbits 000B                        __size_of_setGestureMode 0027  
                   __size_of_i2c1_driver_start 0003                          ?_EUSART_RxDataHandler 0076  
                       setAmbientLightGain@val 002C                          ??_i2c1_driver_sendACK 0076  
                             ?_do_I2C_TX_EMPTY 0076                        __size_of_WDT_Initialize 0004  
                       _do_I2C_DO_ADDRESS_NACK 0D54                                       intlevel1 0000  
                                    sprintf@ap 00CE                          ??_i2c1_driver_restart 0020  
                                    strcat@src 002A                          ??_i2c1_driver_startRX 0020  
                      ?_PIN_MANAGER_Initialize 0076                               ??_I2C_Write_Byte 0021  
               __end_of_EUSART_SetErrorHandler 0981                              __CFG_CLKOUTEN$OFF 0000  
                                    strcpy@src 0025                             __end_of_returnStop 0004  
                              _PWM1_Initialize 09CF                               ??_ADC_Initialize 0020  
         __end_of_EUSART_SetRxInterruptHandler 099C          __size_of_EUSART_SetRxInterruptHandler 0009  
                 _EUSART_SetRxInterruptHandler 0993                         _resetGestureParameters 0A6A  
                   ??_i2c1_driver_isBufferFull 0020                                  ?_Display_Name 0025  
               __size_ofi1_i2c1_driver_restart 0003                  __end_ofi1_i2c1_driver_restart 0899  
                           _EUSART_Receive_ISR 0ECF  EUSART_SetFramingErrorHandler@interruptHandler 0020  
               __size_ofi1_i2c1_driver_startRX 0003                   __end_ofi1_i2c1_driver_TXData 0901  
                __end_ofi1_i2c1_driver_startRX 089F                           _setGestureExitThresh 0A1C  
                              ___aomod@divisor 0020                                    ??_vfpfcnvrt 005C  
                              ___aomod@counter 0031                                  __pstringtext1 1000  
                                __pstringtext2 1020                                  __pstringtext3 1030  
                                __pstringtext4 103D                                  __pstringtext5 1049  
                                __pstringtext6 1054                                  __pstringtext7 0000  
                                     sprintf@f 00D0                                       sprintf@s 00CF  
                          ?_EUSART_Receive_ISR 0076                                     _SSP1DATPPS 0E21  
                                 ?_enablePower 0076                                     _SSP2DATPPS 0E1E  
                                   _SSP1CLKPPS 0E20                            _setGestureIntEnable 0D7F  
                                   _SSP2CLKPPS 0E1D                               setLEDBoost@boost 002D  
                       ?_setGestureEnterThresh 0076                                    _returnReset 07FE  
                                   _PIR_Sensor 09C3                                     _TX1STAbits 019E  
                           EUSART_Write@txData 0021                   __size_of_EUSART_Transmit_ISR 001D  
                                 ___aodiv@sign 0032                 __end_of_PIN_MANAGER_Initialize 0F3E  
                  __end_of_i2c_busCollisionISR 08AE                      __size_of_wireReadDataByte 0024  
                             setLEDDrive@drive 002D                                _PIN_MANAGER_IOC 0891  
                         ??_EUSART_Receive_ISR 0077                    __end_of_enableGestureSensor 0654  
                        _do_I2C_SEND_ADR_WRITE 092B                           ?_setGestureIntEnable 0076  
                   __size_of_ADC_GetConversion 001E                           _do_I2C_SEND_ADR_READ 0948  
                              ??_Display_Clear 0023                                   ___aomod@sign 0032  
             __end_of_setLightIntHighThreshold 0C87                                 ??_Display_Name 0027  
                          UART_Byte@profileStr 00E0  
