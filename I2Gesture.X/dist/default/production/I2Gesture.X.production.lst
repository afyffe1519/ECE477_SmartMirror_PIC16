

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Wed Apr 17 08:58:53 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F18345
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1
    10                           	psect	nvBANK3,global,class=BANK3,space=1,delta=1
    11                           	psect	stringtext2,global,class=STRCODE,delta=2
    12                           	psect	stringtext3,global,class=STRCODE,delta=2
    13                           	psect	stringtext4,global,class=STRCODE,delta=2
    14                           	psect	stringtext5,global,class=STRCODE,delta=2
    15                           	psect	stringtext6,global,class=STRCODE,delta=2
    16                           	psect	cinit,global,class=CODE,merge=1,delta=2
    17                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    21                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    22                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    23                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    24                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    25                           	psect	inittext,global,class=CODE,delta=2
    26                           	psect	clrtext,global,class=CODE,delta=2
    27                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    28                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    29                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    30                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    31                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    32                           	psect	text1,local,class=CODE,merge=1,delta=2
    33                           	psect	text2,local,class=CODE,merge=1,delta=2
    34                           	psect	text3,local,class=CODE,merge=1,delta=2
    35                           	psect	text4,local,class=CODE,merge=1,delta=2
    36                           	psect	text5,local,class=CODE,merge=1,delta=2
    37                           	psect	text6,local,class=CODE,merge=1,delta=2
    38                           	psect	text7,local,class=CODE,merge=1,delta=2
    39                           	psect	text8,local,class=CODE,merge=1,delta=2
    40                           	psect	text9,local,class=CODE,merge=1,delta=2
    41                           	psect	text10,local,class=CODE,merge=1,delta=2
    42                           	psect	text11,local,class=CODE,merge=1,delta=2
    43                           	psect	text12,local,class=CODE,merge=1,delta=2
    44                           	psect	text13,local,class=CODE,merge=1,delta=2
    45                           	psect	text14,local,class=CODE,merge=1,delta=2
    46                           	psect	text15,local,class=CODE,merge=1,delta=2
    47                           	psect	text16,local,class=CODE,merge=1,delta=2
    48                           	psect	text17,local,class=CODE,merge=1,delta=2
    49                           	psect	text18,local,class=CODE,merge=1,delta=2
    50                           	psect	text19,local,class=CODE,merge=1,delta=2,group=1
    51                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    52                           	psect	text21,local,class=CODE,merge=1,delta=2
    53                           	psect	text22,local,class=CODE,merge=1,delta=2
    54                           	psect	text23,local,class=CODE,merge=1,delta=2
    55                           	psect	text24,local,class=CODE,merge=1,delta=2
    56                           	psect	text25,local,class=CODE,merge=1,delta=2
    57                           	psect	text26,local,class=CODE,merge=1,delta=2
    58                           	psect	text27,local,class=CODE,merge=1,delta=2
    59                           	psect	text28,local,class=CODE,merge=1,delta=2
    60                           	psect	text29,local,class=CODE,merge=1,delta=2
    61                           	psect	text30,local,class=CODE,merge=1,delta=2
    62                           	psect	text31,local,class=CODE,merge=1,delta=2
    63                           	psect	text32,local,class=CODE,merge=1,delta=2
    64                           	psect	text33,local,class=CODE,merge=1,delta=2
    65                           	psect	text34,local,class=CODE,merge=1,inline,delta=2
    66                           	psect	text35,local,class=CODE,merge=1,delta=2
    67                           	psect	text36,local,class=CODE,merge=1,inline,delta=2
    68                           	psect	text37,local,class=CODE,merge=1,delta=2
    69                           	psect	text38,local,class=CODE,merge=1,inline,delta=2
    70                           	psect	text39,local,class=CODE,merge=1,delta=2
    71                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    72                           	psect	text41,local,class=CODE,merge=1,delta=2
    73                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text43,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text44,local,class=CODE,merge=1,inline,delta=2
    76                           	psect	text45,local,class=CODE,merge=1,delta=2
    77                           	psect	text46,local,class=CODE,merge=1,inline,delta=2
    78                           	psect	text47,local,class=CODE,merge=1,delta=2
    79                           	psect	text48,local,class=CODE,merge=1,delta=2
    80                           	psect	text49,local,class=CODE,merge=1,delta=2
    81                           	psect	text50,local,class=CODE,merge=1,delta=2
    82                           	psect	text51,local,class=CODE,merge=1,delta=2
    83                           	psect	text52,local,class=CODE,merge=1,delta=2
    84                           	psect	text53,local,class=CODE,merge=1,delta=2
    85                           	psect	text54,local,class=CODE,merge=1,delta=2
    86                           	psect	text55,local,class=CODE,merge=1,delta=2
    87                           	psect	text56,local,class=CODE,merge=1,delta=2
    88                           	psect	text57,local,class=CODE,merge=1,delta=2
    89                           	psect	text58,local,class=CODE,merge=1,delta=2
    90                           	psect	text59,local,class=CODE,merge=1,delta=2
    91                           	psect	text60,local,class=CODE,merge=1,delta=2
    92                           	psect	text61,local,class=CODE,merge=1,delta=2
    93                           	psect	text62,local,class=CODE,merge=1,delta=2
    94                           	psect	text63,local,class=CODE,merge=1,delta=2
    95                           	psect	text64,local,class=CODE,merge=1,delta=2
    96                           	psect	text65,local,class=CODE,merge=1,delta=2
    97                           	psect	text66,local,class=CODE,merge=1,delta=2
    98                           	psect	text67,local,class=CODE,merge=1,delta=2,group=2
    99                           	psect	text68,local,class=CODE,merge=1,delta=2
   100                           	psect	text69,local,class=CODE,merge=1,delta=2
   101                           	psect	text70,local,class=CODE,merge=1,delta=2
   102                           	psect	text71,local,class=CODE,merge=1,delta=2
   103                           	psect	intentry,global,class=CODE,delta=2
   104                           	psect	text73,local,class=CODE,merge=1,delta=2
   105                           	psect	text74,local,class=CODE,merge=1,inline,delta=2
   106                           	psect	text75,local,class=CODE,merge=1,delta=2
   107                           	psect	text76,local,class=CODE,merge=1,inline,delta=2
   108                           	psect	text77,local,class=CODE,merge=1,delta=2
   109                           	psect	text78,local,class=CODE,merge=1,delta=2
   110                           	psect	text79,local,class=CODE,merge=1,delta=2
   111                           	psect	text80,local,class=CODE,merge=1,delta=2
   112                           	psect	text81,local,class=CODE,merge=1,delta=2
   113                           	psect	text82,local,class=CODE,merge=1,delta=2
   114                           	psect	text83,local,class=CODE,merge=1,delta=2
   115                           	psect	text84,local,class=CODE,merge=1,delta=2
   116                           	psect	text85,local,class=CODE,merge=1,delta=2
   117                           	psect	text86,local,class=CODE,merge=1,delta=2
   118                           	psect	text87,local,class=CODE,merge=1,delta=2
   119                           	psect	text88,local,class=CODE,merge=1,delta=2
   120                           	psect	text89,local,class=CODE,merge=1,delta=2
   121                           	psect	text90,local,class=CODE,merge=1,delta=2
   122                           	psect	text91,local,class=CODE,merge=1,delta=2
   123                           	psect	text92,local,class=CODE,merge=1,delta=2
   124                           	psect	text93,local,class=CODE,merge=1,inline,delta=2
   125                           	psect	text94,local,class=CODE,merge=1,inline,delta=2
   126                           	psect	text95,local,class=CODE,merge=1,inline,delta=2
   127                           	psect	text96,local,class=CODE,merge=1,inline,delta=2
   128                           	psect	text97,local,class=CODE,merge=1,inline,delta=2
   129                           	psect	text98,local,class=CODE,merge=1,inline,delta=2
   130                           	psect	text99,local,class=CODE,merge=1,inline,delta=2
   131                           	psect	text100,local,class=CODE,merge=1,delta=2
   132                           	psect	text101,local,class=CODE,merge=1,delta=2
   133                           	psect	text102,local,class=CODE,merge=1,inline,delta=2
   134                           	psect	text103,local,class=CODE,merge=1,inline,delta=2
   135                           	psect	text104,local,class=CODE,merge=1,inline,delta=2
   136                           	psect	text105,local,class=CODE,merge=1,delta=2
   137                           	psect	text106,local,class=CODE,merge=1,delta=2
   138                           	psect	text107,local,class=CODE,merge=1,delta=2
   139                           	psect	text108,local,class=CODE,merge=1,delta=2
   140                           	psect	text109,local,class=CODE,merge=1,delta=2
   141                           	psect	text110,local,class=CODE,merge=1,delta=2
   142                           	psect	text111,local,class=CODE,merge=1,delta=2
   143                           	psect	text112,local,class=CODE,merge=1,delta=2
   144                           	psect	text113,local,class=CODE,merge=1,delta=2
   145                           	dabs	1,0x7E,2
   146  0000                     
   147                           ; Version 2.05
   148                           ; Generated 20/12/2018 GMT
   149                           ; 
   150                           ; Copyright © 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
   151                           ; All rights reserved.
   152                           ; 
   153                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   154                           ; 
   155                           ; Redistribution and use in source and binary forms, with or without modification, are
   156                           ; permitted provided that the following conditions are met:
   157                           ; 
   158                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   159                           ;        conditions and the following disclaimer.
   160                           ; 
   161                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   162                           ;        of conditions and the following disclaimer in the documentation and/or other
   163                           ;        materials provided with the distribution.
   164                           ; 
   165                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   166                           ;        software without specific prior written permission.
   167                           ; 
   168                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   169                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   170                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   171                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   172                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   173                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   174                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   175                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   176                           ; 
   177                           ; 
   178                           ; Code-generator required, PIC16F18345 Definitions
   179                           ; 
   180                           ; SFR Addresses
   181  0000                     	;# 
   182  0001                     	;# 
   183  0002                     	;# 
   184  0003                     	;# 
   185  0004                     	;# 
   186  0005                     	;# 
   187  0006                     	;# 
   188  0007                     	;# 
   189  0008                     	;# 
   190  0009                     	;# 
   191  000A                     	;# 
   192  000B                     	;# 
   193  000C                     	;# 
   194  000D                     	;# 
   195  000E                     	;# 
   196  0010                     	;# 
   197  0011                     	;# 
   198  0012                     	;# 
   199  0013                     	;# 
   200  0014                     	;# 
   201  0015                     	;# 
   202  0015                     	;# 
   203  0016                     	;# 
   204  0016                     	;# 
   205  0017                     	;# 
   206  0018                     	;# 
   207  0019                     	;# 
   208  0019                     	;# 
   209  001A                     	;# 
   210  001B                     	;# 
   211  001C                     	;# 
   212  001D                     	;# 
   213  001E                     	;# 
   214  001F                     	;# 
   215  008C                     	;# 
   216  008D                     	;# 
   217  008E                     	;# 
   218  0090                     	;# 
   219  0091                     	;# 
   220  0092                     	;# 
   221  0093                     	;# 
   222  0094                     	;# 
   223  0097                     	;# 
   224  009B                     	;# 
   225  009B                     	;# 
   226  009C                     	;# 
   227  009D                     	;# 
   228  009E                     	;# 
   229  009F                     	;# 
   230  010C                     	;# 
   231  010D                     	;# 
   232  010E                     	;# 
   233  0111                     	;# 
   234  0112                     	;# 
   235  0113                     	;# 
   236  0114                     	;# 
   237  0115                     	;# 
   238  0116                     	;# 
   239  0117                     	;# 
   240  0118                     	;# 
   241  0119                     	;# 
   242  018C                     	;# 
   243  018D                     	;# 
   244  018E                     	;# 
   245  0197                     	;# 
   246  0199                     	;# 
   247  0199                     	;# 
   248  0199                     	;# 
   249  019A                     	;# 
   250  019A                     	;# 
   251  019A                     	;# 
   252  019B                     	;# 
   253  019B                     	;# 
   254  019B                     	;# 
   255  019B                     	;# 
   256  019B                     	;# 
   257  019C                     	;# 
   258  019C                     	;# 
   259  019C                     	;# 
   260  019D                     	;# 
   261  019D                     	;# 
   262  019D                     	;# 
   263  019E                     	;# 
   264  019E                     	;# 
   265  019E                     	;# 
   266  019F                     	;# 
   267  019F                     	;# 
   268  019F                     	;# 
   269  019F                     	;# 
   270  019F                     	;# 
   271  020C                     	;# 
   272  020D                     	;# 
   273  020E                     	;# 
   274  0211                     	;# 
   275  0211                     	;# 
   276  0212                     	;# 
   277  0212                     	;# 
   278  0213                     	;# 
   279  0213                     	;# 
   280  0214                     	;# 
   281  0214                     	;# 
   282  0215                     	;# 
   283  0215                     	;# 
   284  0215                     	;# 
   285  0215                     	;# 
   286  0216                     	;# 
   287  0216                     	;# 
   288  0217                     	;# 
   289  0217                     	;# 
   290  0219                     	;# 
   291  021A                     	;# 
   292  021B                     	;# 
   293  021C                     	;# 
   294  021D                     	;# 
   295  021D                     	;# 
   296  021E                     	;# 
   297  021F                     	;# 
   298  028C                     	;# 
   299  028D                     	;# 
   300  028E                     	;# 
   301  0291                     	;# 
   302  0291                     	;# 
   303  0292                     	;# 
   304  0293                     	;# 
   305  0294                     	;# 
   306  0295                     	;# 
   307  0295                     	;# 
   308  0296                     	;# 
   309  0297                     	;# 
   310  0298                     	;# 
   311  029F                     	;# 
   312  030C                     	;# 
   313  030D                     	;# 
   314  030E                     	;# 
   315  0311                     	;# 
   316  0311                     	;# 
   317  0312                     	;# 
   318  0313                     	;# 
   319  0314                     	;# 
   320  0315                     	;# 
   321  0315                     	;# 
   322  0316                     	;# 
   323  0317                     	;# 
   324  0318                     	;# 
   325  038C                     	;# 
   326  038D                     	;# 
   327  038E                     	;# 
   328  0391                     	;# 
   329  0392                     	;# 
   330  0393                     	;# 
   331  0394                     	;# 
   332  0395                     	;# 
   333  0396                     	;# 
   334  0397                     	;# 
   335  0398                     	;# 
   336  0399                     	;# 
   337  039A                     	;# 
   338  039C                     	;# 
   339  039D                     	;# 
   340  039E                     	;# 
   341  039F                     	;# 
   342  0411                     	;# 
   343  0411                     	;# 
   344  0412                     	;# 
   345  0413                     	;# 
   346  0414                     	;# 
   347  0415                     	;# 
   348  0416                     	;# 
   349  0417                     	;# 
   350  0418                     	;# 
   351  0418                     	;# 
   352  0419                     	;# 
   353  041A                     	;# 
   354  041B                     	;# 
   355  041C                     	;# 
   356  041D                     	;# 
   357  041E                     	;# 
   358  041F                     	;# 
   359  0498                     	;# 
   360  0498                     	;# 
   361  0499                     	;# 
   362  049A                     	;# 
   363  049B                     	;# 
   364  049B                     	;# 
   365  049C                     	;# 
   366  049D                     	;# 
   367  049E                     	;# 
   368  049F                     	;# 
   369  0617                     	;# 
   370  0618                     	;# 
   371  0619                     	;# 
   372  0619                     	;# 
   373  061A                     	;# 
   374  061B                     	;# 
   375  061C                     	;# 
   376  061C                     	;# 
   377  061F                     	;# 
   378  0691                     	;# 
   379  0692                     	;# 
   380  0693                     	;# 
   381  0694                     	;# 
   382  0695                     	;# 
   383  0696                     	;# 
   384  0697                     	;# 
   385  0698                     	;# 
   386  0699                     	;# 
   387  0711                     	;# 
   388  0712                     	;# 
   389  0713                     	;# 
   390  0714                     	;# 
   391  0715                     	;# 
   392  0716                     	;# 
   393  0717                     	;# 
   394  0718                     	;# 
   395  0719                     	;# 
   396  0891                     	;# 
   397  0891                     	;# 
   398  0891                     	;# 
   399  0891                     	;# 
   400  0891                     	;# 
   401  0891                     	;# 
   402  0892                     	;# 
   403  0892                     	;# 
   404  0892                     	;# 
   405  0893                     	;# 
   406  0893                     	;# 
   407  0893                     	;# 
   408  0893                     	;# 
   409  0893                     	;# 
   410  0893                     	;# 
   411  0894                     	;# 
   412  0894                     	;# 
   413  0894                     	;# 
   414  0895                     	;# 
   415  0895                     	;# 
   416  0895                     	;# 
   417  0896                     	;# 
   418  0896                     	;# 
   419  0896                     	;# 
   420  089B                     	;# 
   421  0911                     	;# 
   422  0912                     	;# 
   423  0913                     	;# 
   424  0914                     	;# 
   425  0915                     	;# 
   426  0916                     	;# 
   427  0918                     	;# 
   428  0919                     	;# 
   429  091A                     	;# 
   430  091B                     	;# 
   431  091C                     	;# 
   432  091D                     	;# 
   433  091E                     	;# 
   434  091F                     	;# 
   435  0E0F                     	;# 
   436  0E10                     	;# 
   437  0E11                     	;# 
   438  0E12                     	;# 
   439  0E13                     	;# 
   440  0E14                     	;# 
   441  0E15                     	;# 
   442  0E16                     	;# 
   443  0E17                     	;# 
   444  0E18                     	;# 
   445  0E19                     	;# 
   446  0E1A                     	;# 
   447  0E1B                     	;# 
   448  0E1C                     	;# 
   449  0E1D                     	;# 
   450  0E1E                     	;# 
   451  0E1F                     	;# 
   452  0E20                     	;# 
   453  0E21                     	;# 
   454  0E22                     	;# 
   455  0E24                     	;# 
   456  0E25                     	;# 
   457  0E28                     	;# 
   458  0E29                     	;# 
   459  0E2A                     	;# 
   460  0E2B                     	;# 
   461  0E2C                     	;# 
   462  0E2D                     	;# 
   463  0E2E                     	;# 
   464  0E2F                     	;# 
   465  0E90                     	;# 
   466  0E91                     	;# 
   467  0E92                     	;# 
   468  0E94                     	;# 
   469  0E95                     	;# 
   470  0E9C                     	;# 
   471  0E9D                     	;# 
   472  0E9E                     	;# 
   473  0E9F                     	;# 
   474  0EA0                     	;# 
   475  0EA1                     	;# 
   476  0EA2                     	;# 
   477  0EA3                     	;# 
   478  0EA4                     	;# 
   479  0EA5                     	;# 
   480  0EA6                     	;# 
   481  0EA7                     	;# 
   482  0F0F                     	;# 
   483  0F10                     	;# 
   484  0F11                     	;# 
   485  0F12                     	;# 
   486  0F13                     	;# 
   487  0F14                     	;# 
   488  0F15                     	;# 
   489  0F16                     	;# 
   490  0F17                     	;# 
   491  0F18                     	;# 
   492  0F19                     	;# 
   493  0F1A                     	;# 
   494  0F1B                     	;# 
   495  0F1C                     	;# 
   496  0F1D                     	;# 
   497  0F1E                     	;# 
   498  0F1F                     	;# 
   499  0F20                     	;# 
   500  0F21                     	;# 
   501  0F22                     	;# 
   502  0F23                     	;# 
   503  0F24                     	;# 
   504  0F25                     	;# 
   505  0F26                     	;# 
   506  0F27                     	;# 
   507  0F28                     	;# 
   508  0F29                     	;# 
   509  0F2A                     	;# 
   510  0F2B                     	;# 
   511  0F2C                     	;# 
   512  0F2D                     	;# 
   513  0F2E                     	;# 
   514  0F2F                     	;# 
   515  0F30                     	;# 
   516  0F31                     	;# 
   517  0F32                     	;# 
   518  0F33                     	;# 
   519  0F34                     	;# 
   520  0F35                     	;# 
   521  0F36                     	;# 
   522  0F37                     	;# 
   523  0FE4                     	;# 
   524  0FE5                     	;# 
   525  0FE6                     	;# 
   526  0FE7                     	;# 
   527  0FE8                     	;# 
   528  0FE9                     	;# 
   529  0FEA                     	;# 
   530  0FEB                     	;# 
   531  0FED                     	;# 
   532  0FEE                     	;# 
   533  0FEF                     	;# 
   534  0000                     	;# 
   535  0001                     	;# 
   536  0002                     	;# 
   537  0003                     	;# 
   538  0004                     	;# 
   539  0005                     	;# 
   540  0006                     	;# 
   541  0007                     	;# 
   542  0008                     	;# 
   543  0009                     	;# 
   544  000A                     	;# 
   545  000B                     	;# 
   546  000C                     	;# 
   547  000D                     	;# 
   548  000E                     	;# 
   549  0010                     	;# 
   550  0011                     	;# 
   551  0012                     	;# 
   552  0013                     	;# 
   553  0014                     	;# 
   554  0015                     	;# 
   555  0015                     	;# 
   556  0016                     	;# 
   557  0016                     	;# 
   558  0017                     	;# 
   559  0018                     	;# 
   560  0019                     	;# 
   561  0019                     	;# 
   562  001A                     	;# 
   563  001B                     	;# 
   564  001C                     	;# 
   565  001D                     	;# 
   566  001E                     	;# 
   567  001F                     	;# 
   568  008C                     	;# 
   569  008D                     	;# 
   570  008E                     	;# 
   571  0090                     	;# 
   572  0091                     	;# 
   573  0092                     	;# 
   574  0093                     	;# 
   575  0094                     	;# 
   576  0097                     	;# 
   577  009B                     	;# 
   578  009B                     	;# 
   579  009C                     	;# 
   580  009D                     	;# 
   581  009E                     	;# 
   582  009F                     	;# 
   583  010C                     	;# 
   584  010D                     	;# 
   585  010E                     	;# 
   586  0111                     	;# 
   587  0112                     	;# 
   588  0113                     	;# 
   589  0114                     	;# 
   590  0115                     	;# 
   591  0116                     	;# 
   592  0117                     	;# 
   593  0118                     	;# 
   594  0119                     	;# 
   595  018C                     	;# 
   596  018D                     	;# 
   597  018E                     	;# 
   598  0197                     	;# 
   599  0199                     	;# 
   600  0199                     	;# 
   601  0199                     	;# 
   602  019A                     	;# 
   603  019A                     	;# 
   604  019A                     	;# 
   605  019B                     	;# 
   606  019B                     	;# 
   607  019B                     	;# 
   608  019B                     	;# 
   609  019B                     	;# 
   610  019C                     	;# 
   611  019C                     	;# 
   612  019C                     	;# 
   613  019D                     	;# 
   614  019D                     	;# 
   615  019D                     	;# 
   616  019E                     	;# 
   617  019E                     	;# 
   618  019E                     	;# 
   619  019F                     	;# 
   620  019F                     	;# 
   621  019F                     	;# 
   622  019F                     	;# 
   623  019F                     	;# 
   624  020C                     	;# 
   625  020D                     	;# 
   626  020E                     	;# 
   627  0211                     	;# 
   628  0211                     	;# 
   629  0212                     	;# 
   630  0212                     	;# 
   631  0213                     	;# 
   632  0213                     	;# 
   633  0214                     	;# 
   634  0214                     	;# 
   635  0215                     	;# 
   636  0215                     	;# 
   637  0215                     	;# 
   638  0215                     	;# 
   639  0216                     	;# 
   640  0216                     	;# 
   641  0217                     	;# 
   642  0217                     	;# 
   643  0219                     	;# 
   644  021A                     	;# 
   645  021B                     	;# 
   646  021C                     	;# 
   647  021D                     	;# 
   648  021D                     	;# 
   649  021E                     	;# 
   650  021F                     	;# 
   651  028C                     	;# 
   652  028D                     	;# 
   653  028E                     	;# 
   654  0291                     	;# 
   655  0291                     	;# 
   656  0292                     	;# 
   657  0293                     	;# 
   658  0294                     	;# 
   659  0295                     	;# 
   660  0295                     	;# 
   661  0296                     	;# 
   662  0297                     	;# 
   663  0298                     	;# 
   664  029F                     	;# 
   665  030C                     	;# 
   666  030D                     	;# 
   667  030E                     	;# 
   668  0311                     	;# 
   669  0311                     	;# 
   670  0312                     	;# 
   671  0313                     	;# 
   672  0314                     	;# 
   673  0315                     	;# 
   674  0315                     	;# 
   675  0316                     	;# 
   676  0317                     	;# 
   677  0318                     	;# 
   678  038C                     	;# 
   679  038D                     	;# 
   680  038E                     	;# 
   681  0391                     	;# 
   682  0392                     	;# 
   683  0393                     	;# 
   684  0394                     	;# 
   685  0395                     	;# 
   686  0396                     	;# 
   687  0397                     	;# 
   688  0398                     	;# 
   689  0399                     	;# 
   690  039A                     	;# 
   691  039C                     	;# 
   692  039D                     	;# 
   693  039E                     	;# 
   694  039F                     	;# 
   695  0411                     	;# 
   696  0411                     	;# 
   697  0412                     	;# 
   698  0413                     	;# 
   699  0414                     	;# 
   700  0415                     	;# 
   701  0416                     	;# 
   702  0417                     	;# 
   703  0418                     	;# 
   704  0418                     	;# 
   705  0419                     	;# 
   706  041A                     	;# 
   707  041B                     	;# 
   708  041C                     	;# 
   709  041D                     	;# 
   710  041E                     	;# 
   711  041F                     	;# 
   712  0498                     	;# 
   713  0498                     	;# 
   714  0499                     	;# 
   715  049A                     	;# 
   716  049B                     	;# 
   717  049B                     	;# 
   718  049C                     	;# 
   719  049D                     	;# 
   720  049E                     	;# 
   721  049F                     	;# 
   722  0617                     	;# 
   723  0618                     	;# 
   724  0619                     	;# 
   725  0619                     	;# 
   726  061A                     	;# 
   727  061B                     	;# 
   728  061C                     	;# 
   729  061C                     	;# 
   730  061F                     	;# 
   731  0691                     	;# 
   732  0692                     	;# 
   733  0693                     	;# 
   734  0694                     	;# 
   735  0695                     	;# 
   736  0696                     	;# 
   737  0697                     	;# 
   738  0698                     	;# 
   739  0699                     	;# 
   740  0711                     	;# 
   741  0712                     	;# 
   742  0713                     	;# 
   743  0714                     	;# 
   744  0715                     	;# 
   745  0716                     	;# 
   746  0717                     	;# 
   747  0718                     	;# 
   748  0719                     	;# 
   749  0891                     	;# 
   750  0891                     	;# 
   751  0891                     	;# 
   752  0891                     	;# 
   753  0891                     	;# 
   754  0891                     	;# 
   755  0892                     	;# 
   756  0892                     	;# 
   757  0892                     	;# 
   758  0893                     	;# 
   759  0893                     	;# 
   760  0893                     	;# 
   761  0893                     	;# 
   762  0893                     	;# 
   763  0893                     	;# 
   764  0894                     	;# 
   765  0894                     	;# 
   766  0894                     	;# 
   767  0895                     	;# 
   768  0895                     	;# 
   769  0895                     	;# 
   770  0896                     	;# 
   771  0896                     	;# 
   772  0896                     	;# 
   773  089B                     	;# 
   774  0911                     	;# 
   775  0912                     	;# 
   776  0913                     	;# 
   777  0914                     	;# 
   778  0915                     	;# 
   779  0916                     	;# 
   780  0918                     	;# 
   781  0919                     	;# 
   782  091A                     	;# 
   783  091B                     	;# 
   784  091C                     	;# 
   785  091D                     	;# 
   786  091E                     	;# 
   787  091F                     	;# 
   788  0E0F                     	;# 
   789  0E10                     	;# 
   790  0E11                     	;# 
   791  0E12                     	;# 
   792  0E13                     	;# 
   793  0E14                     	;# 
   794  0E15                     	;# 
   795  0E16                     	;# 
   796  0E17                     	;# 
   797  0E18                     	;# 
   798  0E19                     	;# 
   799  0E1A                     	;# 
   800  0E1B                     	;# 
   801  0E1C                     	;# 
   802  0E1D                     	;# 
   803  0E1E                     	;# 
   804  0E1F                     	;# 
   805  0E20                     	;# 
   806  0E21                     	;# 
   807  0E22                     	;# 
   808  0E24                     	;# 
   809  0E25                     	;# 
   810  0E28                     	;# 
   811  0E29                     	;# 
   812  0E2A                     	;# 
   813  0E2B                     	;# 
   814  0E2C                     	;# 
   815  0E2D                     	;# 
   816  0E2E                     	;# 
   817  0E2F                     	;# 
   818  0E90                     	;# 
   819  0E91                     	;# 
   820  0E92                     	;# 
   821  0E94                     	;# 
   822  0E95                     	;# 
   823  0E9C                     	;# 
   824  0E9D                     	;# 
   825  0E9E                     	;# 
   826  0E9F                     	;# 
   827  0EA0                     	;# 
   828  0EA1                     	;# 
   829  0EA2                     	;# 
   830  0EA3                     	;# 
   831  0EA4                     	;# 
   832  0EA5                     	;# 
   833  0EA6                     	;# 
   834  0EA7                     	;# 
   835  0F0F                     	;# 
   836  0F10                     	;# 
   837  0F11                     	;# 
   838  0F12                     	;# 
   839  0F13                     	;# 
   840  0F14                     	;# 
   841  0F15                     	;# 
   842  0F16                     	;# 
   843  0F17                     	;# 
   844  0F18                     	;# 
   845  0F19                     	;# 
   846  0F1A                     	;# 
   847  0F1B                     	;# 
   848  0F1C                     	;# 
   849  0F1D                     	;# 
   850  0F1E                     	;# 
   851  0F1F                     	;# 
   852  0F20                     	;# 
   853  0F21                     	;# 
   854  0F22                     	;# 
   855  0F23                     	;# 
   856  0F24                     	;# 
   857  0F25                     	;# 
   858  0F26                     	;# 
   859  0F27                     	;# 
   860  0F28                     	;# 
   861  0F29                     	;# 
   862  0F2A                     	;# 
   863  0F2B                     	;# 
   864  0F2C                     	;# 
   865  0F2D                     	;# 
   866  0F2E                     	;# 
   867  0F2F                     	;# 
   868  0F30                     	;# 
   869  0F31                     	;# 
   870  0F32                     	;# 
   871  0F33                     	;# 
   872  0F34                     	;# 
   873  0F35                     	;# 
   874  0F36                     	;# 
   875  0F37                     	;# 
   876  0FE4                     	;# 
   877  0FE5                     	;# 
   878  0FE6                     	;# 
   879  0FE7                     	;# 
   880  0FE8                     	;# 
   881  0FE9                     	;# 
   882  0FEA                     	;# 
   883  0FEB                     	;# 
   884  0FED                     	;# 
   885  0FEE                     	;# 
   886  0FEF                     	;# 
   887  0000                     	;# 
   888  0001                     	;# 
   889  0002                     	;# 
   890  0003                     	;# 
   891  0004                     	;# 
   892  0005                     	;# 
   893  0006                     	;# 
   894  0007                     	;# 
   895  0008                     	;# 
   896  0009                     	;# 
   897  000A                     	;# 
   898  000B                     	;# 
   899  000C                     	;# 
   900  000D                     	;# 
   901  000E                     	;# 
   902  0010                     	;# 
   903  0011                     	;# 
   904  0012                     	;# 
   905  0013                     	;# 
   906  0014                     	;# 
   907  0015                     	;# 
   908  0015                     	;# 
   909  0016                     	;# 
   910  0016                     	;# 
   911  0017                     	;# 
   912  0018                     	;# 
   913  0019                     	;# 
   914  0019                     	;# 
   915  001A                     	;# 
   916  001B                     	;# 
   917  001C                     	;# 
   918  001D                     	;# 
   919  001E                     	;# 
   920  001F                     	;# 
   921  008C                     	;# 
   922  008D                     	;# 
   923  008E                     	;# 
   924  0090                     	;# 
   925  0091                     	;# 
   926  0092                     	;# 
   927  0093                     	;# 
   928  0094                     	;# 
   929  0097                     	;# 
   930  009B                     	;# 
   931  009B                     	;# 
   932  009C                     	;# 
   933  009D                     	;# 
   934  009E                     	;# 
   935  009F                     	;# 
   936  010C                     	;# 
   937  010D                     	;# 
   938  010E                     	;# 
   939  0111                     	;# 
   940  0112                     	;# 
   941  0113                     	;# 
   942  0114                     	;# 
   943  0115                     	;# 
   944  0116                     	;# 
   945  0117                     	;# 
   946  0118                     	;# 
   947  0119                     	;# 
   948  018C                     	;# 
   949  018D                     	;# 
   950  018E                     	;# 
   951  0197                     	;# 
   952  0199                     	;# 
   953  0199                     	;# 
   954  0199                     	;# 
   955  019A                     	;# 
   956  019A                     	;# 
   957  019A                     	;# 
   958  019B                     	;# 
   959  019B                     	;# 
   960  019B                     	;# 
   961  019B                     	;# 
   962  019B                     	;# 
   963  019C                     	;# 
   964  019C                     	;# 
   965  019C                     	;# 
   966  019D                     	;# 
   967  019D                     	;# 
   968  019D                     	;# 
   969  019E                     	;# 
   970  019E                     	;# 
   971  019E                     	;# 
   972  019F                     	;# 
   973  019F                     	;# 
   974  019F                     	;# 
   975  019F                     	;# 
   976  019F                     	;# 
   977  020C                     	;# 
   978  020D                     	;# 
   979  020E                     	;# 
   980  0211                     	;# 
   981  0211                     	;# 
   982  0212                     	;# 
   983  0212                     	;# 
   984  0213                     	;# 
   985  0213                     	;# 
   986  0214                     	;# 
   987  0214                     	;# 
   988  0215                     	;# 
   989  0215                     	;# 
   990  0215                     	;# 
   991  0215                     	;# 
   992  0216                     	;# 
   993  0216                     	;# 
   994  0217                     	;# 
   995  0217                     	;# 
   996  0219                     	;# 
   997  021A                     	;# 
   998  021B                     	;# 
   999  021C                     	;# 
  1000  021D                     	;# 
  1001  021D                     	;# 
  1002  021E                     	;# 
  1003  021F                     	;# 
  1004  028C                     	;# 
  1005  028D                     	;# 
  1006  028E                     	;# 
  1007  0291                     	;# 
  1008  0291                     	;# 
  1009  0292                     	;# 
  1010  0293                     	;# 
  1011  0294                     	;# 
  1012  0295                     	;# 
  1013  0295                     	;# 
  1014  0296                     	;# 
  1015  0297                     	;# 
  1016  0298                     	;# 
  1017  029F                     	;# 
  1018  030C                     	;# 
  1019  030D                     	;# 
  1020  030E                     	;# 
  1021  0311                     	;# 
  1022  0311                     	;# 
  1023  0312                     	;# 
  1024  0313                     	;# 
  1025  0314                     	;# 
  1026  0315                     	;# 
  1027  0315                     	;# 
  1028  0316                     	;# 
  1029  0317                     	;# 
  1030  0318                     	;# 
  1031  038C                     	;# 
  1032  038D                     	;# 
  1033  038E                     	;# 
  1034  0391                     	;# 
  1035  0392                     	;# 
  1036  0393                     	;# 
  1037  0394                     	;# 
  1038  0395                     	;# 
  1039  0396                     	;# 
  1040  0397                     	;# 
  1041  0398                     	;# 
  1042  0399                     	;# 
  1043  039A                     	;# 
  1044  039C                     	;# 
  1045  039D                     	;# 
  1046  039E                     	;# 
  1047  039F                     	;# 
  1048  0411                     	;# 
  1049  0411                     	;# 
  1050  0412                     	;# 
  1051  0413                     	;# 
  1052  0414                     	;# 
  1053  0415                     	;# 
  1054  0416                     	;# 
  1055  0417                     	;# 
  1056  0418                     	;# 
  1057  0418                     	;# 
  1058  0419                     	;# 
  1059  041A                     	;# 
  1060  041B                     	;# 
  1061  041C                     	;# 
  1062  041D                     	;# 
  1063  041E                     	;# 
  1064  041F                     	;# 
  1065  0498                     	;# 
  1066  0498                     	;# 
  1067  0499                     	;# 
  1068  049A                     	;# 
  1069  049B                     	;# 
  1070  049B                     	;# 
  1071  049C                     	;# 
  1072  049D                     	;# 
  1073  049E                     	;# 
  1074  049F                     	;# 
  1075  0617                     	;# 
  1076  0618                     	;# 
  1077  0619                     	;# 
  1078  0619                     	;# 
  1079  061A                     	;# 
  1080  061B                     	;# 
  1081  061C                     	;# 
  1082  061C                     	;# 
  1083  061F                     	;# 
  1084  0691                     	;# 
  1085  0692                     	;# 
  1086  0693                     	;# 
  1087  0694                     	;# 
  1088  0695                     	;# 
  1089  0696                     	;# 
  1090  0697                     	;# 
  1091  0698                     	;# 
  1092  0699                     	;# 
  1093  0711                     	;# 
  1094  0712                     	;# 
  1095  0713                     	;# 
  1096  0714                     	;# 
  1097  0715                     	;# 
  1098  0716                     	;# 
  1099  0717                     	;# 
  1100  0718                     	;# 
  1101  0719                     	;# 
  1102  0891                     	;# 
  1103  0891                     	;# 
  1104  0891                     	;# 
  1105  0891                     	;# 
  1106  0891                     	;# 
  1107  0891                     	;# 
  1108  0892                     	;# 
  1109  0892                     	;# 
  1110  0892                     	;# 
  1111  0893                     	;# 
  1112  0893                     	;# 
  1113  0893                     	;# 
  1114  0893                     	;# 
  1115  0893                     	;# 
  1116  0893                     	;# 
  1117  0894                     	;# 
  1118  0894                     	;# 
  1119  0894                     	;# 
  1120  0895                     	;# 
  1121  0895                     	;# 
  1122  0895                     	;# 
  1123  0896                     	;# 
  1124  0896                     	;# 
  1125  0896                     	;# 
  1126  089B                     	;# 
  1127  0911                     	;# 
  1128  0912                     	;# 
  1129  0913                     	;# 
  1130  0914                     	;# 
  1131  0915                     	;# 
  1132  0916                     	;# 
  1133  0918                     	;# 
  1134  0919                     	;# 
  1135  091A                     	;# 
  1136  091B                     	;# 
  1137  091C                     	;# 
  1138  091D                     	;# 
  1139  091E                     	;# 
  1140  091F                     	;# 
  1141  0E0F                     	;# 
  1142  0E10                     	;# 
  1143  0E11                     	;# 
  1144  0E12                     	;# 
  1145  0E13                     	;# 
  1146  0E14                     	;# 
  1147  0E15                     	;# 
  1148  0E16                     	;# 
  1149  0E17                     	;# 
  1150  0E18                     	;# 
  1151  0E19                     	;# 
  1152  0E1A                     	;# 
  1153  0E1B                     	;# 
  1154  0E1C                     	;# 
  1155  0E1D                     	;# 
  1156  0E1E                     	;# 
  1157  0E1F                     	;# 
  1158  0E20                     	;# 
  1159  0E21                     	;# 
  1160  0E22                     	;# 
  1161  0E24                     	;# 
  1162  0E25                     	;# 
  1163  0E28                     	;# 
  1164  0E29                     	;# 
  1165  0E2A                     	;# 
  1166  0E2B                     	;# 
  1167  0E2C                     	;# 
  1168  0E2D                     	;# 
  1169  0E2E                     	;# 
  1170  0E2F                     	;# 
  1171  0E90                     	;# 
  1172  0E91                     	;# 
  1173  0E92                     	;# 
  1174  0E94                     	;# 
  1175  0E95                     	;# 
  1176  0E9C                     	;# 
  1177  0E9D                     	;# 
  1178  0E9E                     	;# 
  1179  0E9F                     	;# 
  1180  0EA0                     	;# 
  1181  0EA1                     	;# 
  1182  0EA2                     	;# 
  1183  0EA3                     	;# 
  1184  0EA4                     	;# 
  1185  0EA5                     	;# 
  1186  0EA6                     	;# 
  1187  0EA7                     	;# 
  1188  0F0F                     	;# 
  1189  0F10                     	;# 
  1190  0F11                     	;# 
  1191  0F12                     	;# 
  1192  0F13                     	;# 
  1193  0F14                     	;# 
  1194  0F15                     	;# 
  1195  0F16                     	;# 
  1196  0F17                     	;# 
  1197  0F18                     	;# 
  1198  0F19                     	;# 
  1199  0F1A                     	;# 
  1200  0F1B                     	;# 
  1201  0F1C                     	;# 
  1202  0F1D                     	;# 
  1203  0F1E                     	;# 
  1204  0F1F                     	;# 
  1205  0F20                     	;# 
  1206  0F21                     	;# 
  1207  0F22                     	;# 
  1208  0F23                     	;# 
  1209  0F24                     	;# 
  1210  0F25                     	;# 
  1211  0F26                     	;# 
  1212  0F27                     	;# 
  1213  0F28                     	;# 
  1214  0F29                     	;# 
  1215  0F2A                     	;# 
  1216  0F2B                     	;# 
  1217  0F2C                     	;# 
  1218  0F2D                     	;# 
  1219  0F2E                     	;# 
  1220  0F2F                     	;# 
  1221  0F30                     	;# 
  1222  0F31                     	;# 
  1223  0F32                     	;# 
  1224  0F33                     	;# 
  1225  0F34                     	;# 
  1226  0F35                     	;# 
  1227  0F36                     	;# 
  1228  0F37                     	;# 
  1229  0FE4                     	;# 
  1230  0FE5                     	;# 
  1231  0FE6                     	;# 
  1232  0FE7                     	;# 
  1233  0FE8                     	;# 
  1234  0FE9                     	;# 
  1235  0FEA                     	;# 
  1236  0FEB                     	;# 
  1237  0FED                     	;# 
  1238  0FEE                     	;# 
  1239  0FEF                     	;# 
  1240  0000                     	;# 
  1241  0001                     	;# 
  1242  0002                     	;# 
  1243  0003                     	;# 
  1244  0004                     	;# 
  1245  0005                     	;# 
  1246  0006                     	;# 
  1247  0007                     	;# 
  1248  0008                     	;# 
  1249  0009                     	;# 
  1250  000A                     	;# 
  1251  000B                     	;# 
  1252  000C                     	;# 
  1253  000D                     	;# 
  1254  000E                     	;# 
  1255  0010                     	;# 
  1256  0011                     	;# 
  1257  0012                     	;# 
  1258  0013                     	;# 
  1259  0014                     	;# 
  1260  0015                     	;# 
  1261  0015                     	;# 
  1262  0016                     	;# 
  1263  0016                     	;# 
  1264  0017                     	;# 
  1265  0018                     	;# 
  1266  0019                     	;# 
  1267  0019                     	;# 
  1268  001A                     	;# 
  1269  001B                     	;# 
  1270  001C                     	;# 
  1271  001D                     	;# 
  1272  001E                     	;# 
  1273  001F                     	;# 
  1274  008C                     	;# 
  1275  008D                     	;# 
  1276  008E                     	;# 
  1277  0090                     	;# 
  1278  0091                     	;# 
  1279  0092                     	;# 
  1280  0093                     	;# 
  1281  0094                     	;# 
  1282  0097                     	;# 
  1283  009B                     	;# 
  1284  009B                     	;# 
  1285  009C                     	;# 
  1286  009D                     	;# 
  1287  009E                     	;# 
  1288  009F                     	;# 
  1289  010C                     	;# 
  1290  010D                     	;# 
  1291  010E                     	;# 
  1292  0111                     	;# 
  1293  0112                     	;# 
  1294  0113                     	;# 
  1295  0114                     	;# 
  1296  0115                     	;# 
  1297  0116                     	;# 
  1298  0117                     	;# 
  1299  0118                     	;# 
  1300  0119                     	;# 
  1301  018C                     	;# 
  1302  018D                     	;# 
  1303  018E                     	;# 
  1304  0197                     	;# 
  1305  0199                     	;# 
  1306  0199                     	;# 
  1307  0199                     	;# 
  1308  019A                     	;# 
  1309  019A                     	;# 
  1310  019A                     	;# 
  1311  019B                     	;# 
  1312  019B                     	;# 
  1313  019B                     	;# 
  1314  019B                     	;# 
  1315  019B                     	;# 
  1316  019C                     	;# 
  1317  019C                     	;# 
  1318  019C                     	;# 
  1319  019D                     	;# 
  1320  019D                     	;# 
  1321  019D                     	;# 
  1322  019E                     	;# 
  1323  019E                     	;# 
  1324  019E                     	;# 
  1325  019F                     	;# 
  1326  019F                     	;# 
  1327  019F                     	;# 
  1328  019F                     	;# 
  1329  019F                     	;# 
  1330  020C                     	;# 
  1331  020D                     	;# 
  1332  020E                     	;# 
  1333  0211                     	;# 
  1334  0211                     	;# 
  1335  0212                     	;# 
  1336  0212                     	;# 
  1337  0213                     	;# 
  1338  0213                     	;# 
  1339  0214                     	;# 
  1340  0214                     	;# 
  1341  0215                     	;# 
  1342  0215                     	;# 
  1343  0215                     	;# 
  1344  0215                     	;# 
  1345  0216                     	;# 
  1346  0216                     	;# 
  1347  0217                     	;# 
  1348  0217                     	;# 
  1349  0219                     	;# 
  1350  021A                     	;# 
  1351  021B                     	;# 
  1352  021C                     	;# 
  1353  021D                     	;# 
  1354  021D                     	;# 
  1355  021E                     	;# 
  1356  021F                     	;# 
  1357  028C                     	;# 
  1358  028D                     	;# 
  1359  028E                     	;# 
  1360  0291                     	;# 
  1361  0291                     	;# 
  1362  0292                     	;# 
  1363  0293                     	;# 
  1364  0294                     	;# 
  1365  0295                     	;# 
  1366  0295                     	;# 
  1367  0296                     	;# 
  1368  0297                     	;# 
  1369  0298                     	;# 
  1370  029F                     	;# 
  1371  030C                     	;# 
  1372  030D                     	;# 
  1373  030E                     	;# 
  1374  0311                     	;# 
  1375  0311                     	;# 
  1376  0312                     	;# 
  1377  0313                     	;# 
  1378  0314                     	;# 
  1379  0315                     	;# 
  1380  0315                     	;# 
  1381  0316                     	;# 
  1382  0317                     	;# 
  1383  0318                     	;# 
  1384  038C                     	;# 
  1385  038D                     	;# 
  1386  038E                     	;# 
  1387  0391                     	;# 
  1388  0392                     	;# 
  1389  0393                     	;# 
  1390  0394                     	;# 
  1391  0395                     	;# 
  1392  0396                     	;# 
  1393  0397                     	;# 
  1394  0398                     	;# 
  1395  0399                     	;# 
  1396  039A                     	;# 
  1397  039C                     	;# 
  1398  039D                     	;# 
  1399  039E                     	;# 
  1400  039F                     	;# 
  1401  0411                     	;# 
  1402  0411                     	;# 
  1403  0412                     	;# 
  1404  0413                     	;# 
  1405  0414                     	;# 
  1406  0415                     	;# 
  1407  0416                     	;# 
  1408  0417                     	;# 
  1409  0418                     	;# 
  1410  0418                     	;# 
  1411  0419                     	;# 
  1412  041A                     	;# 
  1413  041B                     	;# 
  1414  041C                     	;# 
  1415  041D                     	;# 
  1416  041E                     	;# 
  1417  041F                     	;# 
  1418  0498                     	;# 
  1419  0498                     	;# 
  1420  0499                     	;# 
  1421  049A                     	;# 
  1422  049B                     	;# 
  1423  049B                     	;# 
  1424  049C                     	;# 
  1425  049D                     	;# 
  1426  049E                     	;# 
  1427  049F                     	;# 
  1428  0617                     	;# 
  1429  0618                     	;# 
  1430  0619                     	;# 
  1431  0619                     	;# 
  1432  061A                     	;# 
  1433  061B                     	;# 
  1434  061C                     	;# 
  1435  061C                     	;# 
  1436  061F                     	;# 
  1437  0691                     	;# 
  1438  0692                     	;# 
  1439  0693                     	;# 
  1440  0694                     	;# 
  1441  0695                     	;# 
  1442  0696                     	;# 
  1443  0697                     	;# 
  1444  0698                     	;# 
  1445  0699                     	;# 
  1446  0711                     	;# 
  1447  0712                     	;# 
  1448  0713                     	;# 
  1449  0714                     	;# 
  1450  0715                     	;# 
  1451  0716                     	;# 
  1452  0717                     	;# 
  1453  0718                     	;# 
  1454  0719                     	;# 
  1455  0891                     	;# 
  1456  0891                     	;# 
  1457  0891                     	;# 
  1458  0891                     	;# 
  1459  0891                     	;# 
  1460  0891                     	;# 
  1461  0892                     	;# 
  1462  0892                     	;# 
  1463  0892                     	;# 
  1464  0893                     	;# 
  1465  0893                     	;# 
  1466  0893                     	;# 
  1467  0893                     	;# 
  1468  0893                     	;# 
  1469  0893                     	;# 
  1470  0894                     	;# 
  1471  0894                     	;# 
  1472  0894                     	;# 
  1473  0895                     	;# 
  1474  0895                     	;# 
  1475  0895                     	;# 
  1476  0896                     	;# 
  1477  0896                     	;# 
  1478  0896                     	;# 
  1479  089B                     	;# 
  1480  0911                     	;# 
  1481  0912                     	;# 
  1482  0913                     	;# 
  1483  0914                     	;# 
  1484  0915                     	;# 
  1485  0916                     	;# 
  1486  0918                     	;# 
  1487  0919                     	;# 
  1488  091A                     	;# 
  1489  091B                     	;# 
  1490  091C                     	;# 
  1491  091D                     	;# 
  1492  091E                     	;# 
  1493  091F                     	;# 
  1494  0E0F                     	;# 
  1495  0E10                     	;# 
  1496  0E11                     	;# 
  1497  0E12                     	;# 
  1498  0E13                     	;# 
  1499  0E14                     	;# 
  1500  0E15                     	;# 
  1501  0E16                     	;# 
  1502  0E17                     	;# 
  1503  0E18                     	;# 
  1504  0E19                     	;# 
  1505  0E1A                     	;# 
  1506  0E1B                     	;# 
  1507  0E1C                     	;# 
  1508  0E1D                     	;# 
  1509  0E1E                     	;# 
  1510  0E1F                     	;# 
  1511  0E20                     	;# 
  1512  0E21                     	;# 
  1513  0E22                     	;# 
  1514  0E24                     	;# 
  1515  0E25                     	;# 
  1516  0E28                     	;# 
  1517  0E29                     	;# 
  1518  0E2A                     	;# 
  1519  0E2B                     	;# 
  1520  0E2C                     	;# 
  1521  0E2D                     	;# 
  1522  0E2E                     	;# 
  1523  0E2F                     	;# 
  1524  0E90                     	;# 
  1525  0E91                     	;# 
  1526  0E92                     	;# 
  1527  0E94                     	;# 
  1528  0E95                     	;# 
  1529  0E9C                     	;# 
  1530  0E9D                     	;# 
  1531  0E9E                     	;# 
  1532  0E9F                     	;# 
  1533  0EA0                     	;# 
  1534  0EA1                     	;# 
  1535  0EA2                     	;# 
  1536  0EA3                     	;# 
  1537  0EA4                     	;# 
  1538  0EA5                     	;# 
  1539  0EA6                     	;# 
  1540  0EA7                     	;# 
  1541  0F0F                     	;# 
  1542  0F10                     	;# 
  1543  0F11                     	;# 
  1544  0F12                     	;# 
  1545  0F13                     	;# 
  1546  0F14                     	;# 
  1547  0F15                     	;# 
  1548  0F16                     	;# 
  1549  0F17                     	;# 
  1550  0F18                     	;# 
  1551  0F19                     	;# 
  1552  0F1A                     	;# 
  1553  0F1B                     	;# 
  1554  0F1C                     	;# 
  1555  0F1D                     	;# 
  1556  0F1E                     	;# 
  1557  0F1F                     	;# 
  1558  0F20                     	;# 
  1559  0F21                     	;# 
  1560  0F22                     	;# 
  1561  0F23                     	;# 
  1562  0F24                     	;# 
  1563  0F25                     	;# 
  1564  0F26                     	;# 
  1565  0F27                     	;# 
  1566  0F28                     	;# 
  1567  0F29                     	;# 
  1568  0F2A                     	;# 
  1569  0F2B                     	;# 
  1570  0F2C                     	;# 
  1571  0F2D                     	;# 
  1572  0F2E                     	;# 
  1573  0F2F                     	;# 
  1574  0F30                     	;# 
  1575  0F31                     	;# 
  1576  0F32                     	;# 
  1577  0F33                     	;# 
  1578  0F34                     	;# 
  1579  0F35                     	;# 
  1580  0F36                     	;# 
  1581  0F37                     	;# 
  1582  0FE4                     	;# 
  1583  0FE5                     	;# 
  1584  0FE6                     	;# 
  1585  0FE7                     	;# 
  1586  0FE8                     	;# 
  1587  0FE9                     	;# 
  1588  0FEA                     	;# 
  1589  0FEB                     	;# 
  1590  0FED                     	;# 
  1591  0FEE                     	;# 
  1592  0FEF                     	;# 
  1593  0000                     	;# 
  1594  0001                     	;# 
  1595  0002                     	;# 
  1596  0003                     	;# 
  1597  0004                     	;# 
  1598  0005                     	;# 
  1599  0006                     	;# 
  1600  0007                     	;# 
  1601  0008                     	;# 
  1602  0009                     	;# 
  1603  000A                     	;# 
  1604  000B                     	;# 
  1605  000C                     	;# 
  1606  000D                     	;# 
  1607  000E                     	;# 
  1608  0010                     	;# 
  1609  0011                     	;# 
  1610  0012                     	;# 
  1611  0013                     	;# 
  1612  0014                     	;# 
  1613  0015                     	;# 
  1614  0015                     	;# 
  1615  0016                     	;# 
  1616  0016                     	;# 
  1617  0017                     	;# 
  1618  0018                     	;# 
  1619  0019                     	;# 
  1620  0019                     	;# 
  1621  001A                     	;# 
  1622  001B                     	;# 
  1623  001C                     	;# 
  1624  001D                     	;# 
  1625  001E                     	;# 
  1626  001F                     	;# 
  1627  008C                     	;# 
  1628  008D                     	;# 
  1629  008E                     	;# 
  1630  0090                     	;# 
  1631  0091                     	;# 
  1632  0092                     	;# 
  1633  0093                     	;# 
  1634  0094                     	;# 
  1635  0097                     	;# 
  1636  009B                     	;# 
  1637  009B                     	;# 
  1638  009C                     	;# 
  1639  009D                     	;# 
  1640  009E                     	;# 
  1641  009F                     	;# 
  1642  010C                     	;# 
  1643  010D                     	;# 
  1644  010E                     	;# 
  1645  0111                     	;# 
  1646  0112                     	;# 
  1647  0113                     	;# 
  1648  0114                     	;# 
  1649  0115                     	;# 
  1650  0116                     	;# 
  1651  0117                     	;# 
  1652  0118                     	;# 
  1653  0119                     	;# 
  1654  018C                     	;# 
  1655  018D                     	;# 
  1656  018E                     	;# 
  1657  0197                     	;# 
  1658  0199                     	;# 
  1659  0199                     	;# 
  1660  0199                     	;# 
  1661  019A                     	;# 
  1662  019A                     	;# 
  1663  019A                     	;# 
  1664  019B                     	;# 
  1665  019B                     	;# 
  1666  019B                     	;# 
  1667  019B                     	;# 
  1668  019B                     	;# 
  1669  019C                     	;# 
  1670  019C                     	;# 
  1671  019C                     	;# 
  1672  019D                     	;# 
  1673  019D                     	;# 
  1674  019D                     	;# 
  1675  019E                     	;# 
  1676  019E                     	;# 
  1677  019E                     	;# 
  1678  019F                     	;# 
  1679  019F                     	;# 
  1680  019F                     	;# 
  1681  019F                     	;# 
  1682  019F                     	;# 
  1683  020C                     	;# 
  1684  020D                     	;# 
  1685  020E                     	;# 
  1686  0211                     	;# 
  1687  0211                     	;# 
  1688  0212                     	;# 
  1689  0212                     	;# 
  1690  0213                     	;# 
  1691  0213                     	;# 
  1692  0214                     	;# 
  1693  0214                     	;# 
  1694  0215                     	;# 
  1695  0215                     	;# 
  1696  0215                     	;# 
  1697  0215                     	;# 
  1698  0216                     	;# 
  1699  0216                     	;# 
  1700  0217                     	;# 
  1701  0217                     	;# 
  1702  0219                     	;# 
  1703  021A                     	;# 
  1704  021B                     	;# 
  1705  021C                     	;# 
  1706  021D                     	;# 
  1707  021D                     	;# 
  1708  021E                     	;# 
  1709  021F                     	;# 
  1710  028C                     	;# 
  1711  028D                     	;# 
  1712  028E                     	;# 
  1713  0291                     	;# 
  1714  0291                     	;# 
  1715  0292                     	;# 
  1716  0293                     	;# 
  1717  0294                     	;# 
  1718  0295                     	;# 
  1719  0295                     	;# 
  1720  0296                     	;# 
  1721  0297                     	;# 
  1722  0298                     	;# 
  1723  029F                     	;# 
  1724  030C                     	;# 
  1725  030D                     	;# 
  1726  030E                     	;# 
  1727  0311                     	;# 
  1728  0311                     	;# 
  1729  0312                     	;# 
  1730  0313                     	;# 
  1731  0314                     	;# 
  1732  0315                     	;# 
  1733  0315                     	;# 
  1734  0316                     	;# 
  1735  0317                     	;# 
  1736  0318                     	;# 
  1737  038C                     	;# 
  1738  038D                     	;# 
  1739  038E                     	;# 
  1740  0391                     	;# 
  1741  0392                     	;# 
  1742  0393                     	;# 
  1743  0394                     	;# 
  1744  0395                     	;# 
  1745  0396                     	;# 
  1746  0397                     	;# 
  1747  0398                     	;# 
  1748  0399                     	;# 
  1749  039A                     	;# 
  1750  039C                     	;# 
  1751  039D                     	;# 
  1752  039E                     	;# 
  1753  039F                     	;# 
  1754  0411                     	;# 
  1755  0411                     	;# 
  1756  0412                     	;# 
  1757  0413                     	;# 
  1758  0414                     	;# 
  1759  0415                     	;# 
  1760  0416                     	;# 
  1761  0417                     	;# 
  1762  0418                     	;# 
  1763  0418                     	;# 
  1764  0419                     	;# 
  1765  041A                     	;# 
  1766  041B                     	;# 
  1767  041C                     	;# 
  1768  041D                     	;# 
  1769  041E                     	;# 
  1770  041F                     	;# 
  1771  0498                     	;# 
  1772  0498                     	;# 
  1773  0499                     	;# 
  1774  049A                     	;# 
  1775  049B                     	;# 
  1776  049B                     	;# 
  1777  049C                     	;# 
  1778  049D                     	;# 
  1779  049E                     	;# 
  1780  049F                     	;# 
  1781  0617                     	;# 
  1782  0618                     	;# 
  1783  0619                     	;# 
  1784  0619                     	;# 
  1785  061A                     	;# 
  1786  061B                     	;# 
  1787  061C                     	;# 
  1788  061C                     	;# 
  1789  061F                     	;# 
  1790  0691                     	;# 
  1791  0692                     	;# 
  1792  0693                     	;# 
  1793  0694                     	;# 
  1794  0695                     	;# 
  1795  0696                     	;# 
  1796  0697                     	;# 
  1797  0698                     	;# 
  1798  0699                     	;# 
  1799  0711                     	;# 
  1800  0712                     	;# 
  1801  0713                     	;# 
  1802  0714                     	;# 
  1803  0715                     	;# 
  1804  0716                     	;# 
  1805  0717                     	;# 
  1806  0718                     	;# 
  1807  0719                     	;# 
  1808  0891                     	;# 
  1809  0891                     	;# 
  1810  0891                     	;# 
  1811  0891                     	;# 
  1812  0891                     	;# 
  1813  0891                     	;# 
  1814  0892                     	;# 
  1815  0892                     	;# 
  1816  0892                     	;# 
  1817  0893                     	;# 
  1818  0893                     	;# 
  1819  0893                     	;# 
  1820  0893                     	;# 
  1821  0893                     	;# 
  1822  0893                     	;# 
  1823  0894                     	;# 
  1824  0894                     	;# 
  1825  0894                     	;# 
  1826  0895                     	;# 
  1827  0895                     	;# 
  1828  0895                     	;# 
  1829  0896                     	;# 
  1830  0896                     	;# 
  1831  0896                     	;# 
  1832  089B                     	;# 
  1833  0911                     	;# 
  1834  0912                     	;# 
  1835  0913                     	;# 
  1836  0914                     	;# 
  1837  0915                     	;# 
  1838  0916                     	;# 
  1839  0918                     	;# 
  1840  0919                     	;# 
  1841  091A                     	;# 
  1842  091B                     	;# 
  1843  091C                     	;# 
  1844  091D                     	;# 
  1845  091E                     	;# 
  1846  091F                     	;# 
  1847  0E0F                     	;# 
  1848  0E10                     	;# 
  1849  0E11                     	;# 
  1850  0E12                     	;# 
  1851  0E13                     	;# 
  1852  0E14                     	;# 
  1853  0E15                     	;# 
  1854  0E16                     	;# 
  1855  0E17                     	;# 
  1856  0E18                     	;# 
  1857  0E19                     	;# 
  1858  0E1A                     	;# 
  1859  0E1B                     	;# 
  1860  0E1C                     	;# 
  1861  0E1D                     	;# 
  1862  0E1E                     	;# 
  1863  0E1F                     	;# 
  1864  0E20                     	;# 
  1865  0E21                     	;# 
  1866  0E22                     	;# 
  1867  0E24                     	;# 
  1868  0E25                     	;# 
  1869  0E28                     	;# 
  1870  0E29                     	;# 
  1871  0E2A                     	;# 
  1872  0E2B                     	;# 
  1873  0E2C                     	;# 
  1874  0E2D                     	;# 
  1875  0E2E                     	;# 
  1876  0E2F                     	;# 
  1877  0E90                     	;# 
  1878  0E91                     	;# 
  1879  0E92                     	;# 
  1880  0E94                     	;# 
  1881  0E95                     	;# 
  1882  0E9C                     	;# 
  1883  0E9D                     	;# 
  1884  0E9E                     	;# 
  1885  0E9F                     	;# 
  1886  0EA0                     	;# 
  1887  0EA1                     	;# 
  1888  0EA2                     	;# 
  1889  0EA3                     	;# 
  1890  0EA4                     	;# 
  1891  0EA5                     	;# 
  1892  0EA6                     	;# 
  1893  0EA7                     	;# 
  1894  0F0F                     	;# 
  1895  0F10                     	;# 
  1896  0F11                     	;# 
  1897  0F12                     	;# 
  1898  0F13                     	;# 
  1899  0F14                     	;# 
  1900  0F15                     	;# 
  1901  0F16                     	;# 
  1902  0F17                     	;# 
  1903  0F18                     	;# 
  1904  0F19                     	;# 
  1905  0F1A                     	;# 
  1906  0F1B                     	;# 
  1907  0F1C                     	;# 
  1908  0F1D                     	;# 
  1909  0F1E                     	;# 
  1910  0F1F                     	;# 
  1911  0F20                     	;# 
  1912  0F21                     	;# 
  1913  0F22                     	;# 
  1914  0F23                     	;# 
  1915  0F24                     	;# 
  1916  0F25                     	;# 
  1917  0F26                     	;# 
  1918  0F27                     	;# 
  1919  0F28                     	;# 
  1920  0F29                     	;# 
  1921  0F2A                     	;# 
  1922  0F2B                     	;# 
  1923  0F2C                     	;# 
  1924  0F2D                     	;# 
  1925  0F2E                     	;# 
  1926  0F2F                     	;# 
  1927  0F30                     	;# 
  1928  0F31                     	;# 
  1929  0F32                     	;# 
  1930  0F33                     	;# 
  1931  0F34                     	;# 
  1932  0F35                     	;# 
  1933  0F36                     	;# 
  1934  0F37                     	;# 
  1935  0FE4                     	;# 
  1936  0FE5                     	;# 
  1937  0FE6                     	;# 
  1938  0FE7                     	;# 
  1939  0FE8                     	;# 
  1940  0FE9                     	;# 
  1941  0FEA                     	;# 
  1942  0FEB                     	;# 
  1943  0FED                     	;# 
  1944  0FEE                     	;# 
  1945  0FEF                     	;# 
  1946  0000                     	;# 
  1947  0001                     	;# 
  1948  0002                     	;# 
  1949  0003                     	;# 
  1950  0004                     	;# 
  1951  0005                     	;# 
  1952  0006                     	;# 
  1953  0007                     	;# 
  1954  0008                     	;# 
  1955  0009                     	;# 
  1956  000A                     	;# 
  1957  000B                     	;# 
  1958  000C                     	;# 
  1959  000D                     	;# 
  1960  000E                     	;# 
  1961  0010                     	;# 
  1962  0011                     	;# 
  1963  0012                     	;# 
  1964  0013                     	;# 
  1965  0014                     	;# 
  1966  0015                     	;# 
  1967  0015                     	;# 
  1968  0016                     	;# 
  1969  0016                     	;# 
  1970  0017                     	;# 
  1971  0018                     	;# 
  1972  0019                     	;# 
  1973  0019                     	;# 
  1974  001A                     	;# 
  1975  001B                     	;# 
  1976  001C                     	;# 
  1977  001D                     	;# 
  1978  001E                     	;# 
  1979  001F                     	;# 
  1980  008C                     	;# 
  1981  008D                     	;# 
  1982  008E                     	;# 
  1983  0090                     	;# 
  1984  0091                     	;# 
  1985  0092                     	;# 
  1986  0093                     	;# 
  1987  0094                     	;# 
  1988  0097                     	;# 
  1989  009B                     	;# 
  1990  009B                     	;# 
  1991  009C                     	;# 
  1992  009D                     	;# 
  1993  009E                     	;# 
  1994  009F                     	;# 
  1995  010C                     	;# 
  1996  010D                     	;# 
  1997  010E                     	;# 
  1998  0111                     	;# 
  1999  0112                     	;# 
  2000  0113                     	;# 
  2001  0114                     	;# 
  2002  0115                     	;# 
  2003  0116                     	;# 
  2004  0117                     	;# 
  2005  0118                     	;# 
  2006  0119                     	;# 
  2007  018C                     	;# 
  2008  018D                     	;# 
  2009  018E                     	;# 
  2010  0197                     	;# 
  2011  0199                     	;# 
  2012  0199                     	;# 
  2013  0199                     	;# 
  2014  019A                     	;# 
  2015  019A                     	;# 
  2016  019A                     	;# 
  2017  019B                     	;# 
  2018  019B                     	;# 
  2019  019B                     	;# 
  2020  019B                     	;# 
  2021  019B                     	;# 
  2022  019C                     	;# 
  2023  019C                     	;# 
  2024  019C                     	;# 
  2025  019D                     	;# 
  2026  019D                     	;# 
  2027  019D                     	;# 
  2028  019E                     	;# 
  2029  019E                     	;# 
  2030  019E                     	;# 
  2031  019F                     	;# 
  2032  019F                     	;# 
  2033  019F                     	;# 
  2034  019F                     	;# 
  2035  019F                     	;# 
  2036  020C                     	;# 
  2037  020D                     	;# 
  2038  020E                     	;# 
  2039  0211                     	;# 
  2040  0211                     	;# 
  2041  0212                     	;# 
  2042  0212                     	;# 
  2043  0213                     	;# 
  2044  0213                     	;# 
  2045  0214                     	;# 
  2046  0214                     	;# 
  2047  0215                     	;# 
  2048  0215                     	;# 
  2049  0215                     	;# 
  2050  0215                     	;# 
  2051  0216                     	;# 
  2052  0216                     	;# 
  2053  0217                     	;# 
  2054  0217                     	;# 
  2055  0219                     	;# 
  2056  021A                     	;# 
  2057  021B                     	;# 
  2058  021C                     	;# 
  2059  021D                     	;# 
  2060  021D                     	;# 
  2061  021E                     	;# 
  2062  021F                     	;# 
  2063  028C                     	;# 
  2064  028D                     	;# 
  2065  028E                     	;# 
  2066  0291                     	;# 
  2067  0291                     	;# 
  2068  0292                     	;# 
  2069  0293                     	;# 
  2070  0294                     	;# 
  2071  0295                     	;# 
  2072  0295                     	;# 
  2073  0296                     	;# 
  2074  0297                     	;# 
  2075  0298                     	;# 
  2076  029F                     	;# 
  2077  030C                     	;# 
  2078  030D                     	;# 
  2079  030E                     	;# 
  2080  0311                     	;# 
  2081  0311                     	;# 
  2082  0312                     	;# 
  2083  0313                     	;# 
  2084  0314                     	;# 
  2085  0315                     	;# 
  2086  0315                     	;# 
  2087  0316                     	;# 
  2088  0317                     	;# 
  2089  0318                     	;# 
  2090  038C                     	;# 
  2091  038D                     	;# 
  2092  038E                     	;# 
  2093  0391                     	;# 
  2094  0392                     	;# 
  2095  0393                     	;# 
  2096  0394                     	;# 
  2097  0395                     	;# 
  2098  0396                     	;# 
  2099  0397                     	;# 
  2100  0398                     	;# 
  2101  0399                     	;# 
  2102  039A                     	;# 
  2103  039C                     	;# 
  2104  039D                     	;# 
  2105  039E                     	;# 
  2106  039F                     	;# 
  2107  0411                     	;# 
  2108  0411                     	;# 
  2109  0412                     	;# 
  2110  0413                     	;# 
  2111  0414                     	;# 
  2112  0415                     	;# 
  2113  0416                     	;# 
  2114  0417                     	;# 
  2115  0418                     	;# 
  2116  0418                     	;# 
  2117  0419                     	;# 
  2118  041A                     	;# 
  2119  041B                     	;# 
  2120  041C                     	;# 
  2121  041D                     	;# 
  2122  041E                     	;# 
  2123  041F                     	;# 
  2124  0498                     	;# 
  2125  0498                     	;# 
  2126  0499                     	;# 
  2127  049A                     	;# 
  2128  049B                     	;# 
  2129  049B                     	;# 
  2130  049C                     	;# 
  2131  049D                     	;# 
  2132  049E                     	;# 
  2133  049F                     	;# 
  2134  0617                     	;# 
  2135  0618                     	;# 
  2136  0619                     	;# 
  2137  0619                     	;# 
  2138  061A                     	;# 
  2139  061B                     	;# 
  2140  061C                     	;# 
  2141  061C                     	;# 
  2142  061F                     	;# 
  2143  0691                     	;# 
  2144  0692                     	;# 
  2145  0693                     	;# 
  2146  0694                     	;# 
  2147  0695                     	;# 
  2148  0696                     	;# 
  2149  0697                     	;# 
  2150  0698                     	;# 
  2151  0699                     	;# 
  2152  0711                     	;# 
  2153  0712                     	;# 
  2154  0713                     	;# 
  2155  0714                     	;# 
  2156  0715                     	;# 
  2157  0716                     	;# 
  2158  0717                     	;# 
  2159  0718                     	;# 
  2160  0719                     	;# 
  2161  0891                     	;# 
  2162  0891                     	;# 
  2163  0891                     	;# 
  2164  0891                     	;# 
  2165  0891                     	;# 
  2166  0891                     	;# 
  2167  0892                     	;# 
  2168  0892                     	;# 
  2169  0892                     	;# 
  2170  0893                     	;# 
  2171  0893                     	;# 
  2172  0893                     	;# 
  2173  0893                     	;# 
  2174  0893                     	;# 
  2175  0893                     	;# 
  2176  0894                     	;# 
  2177  0894                     	;# 
  2178  0894                     	;# 
  2179  0895                     	;# 
  2180  0895                     	;# 
  2181  0895                     	;# 
  2182  0896                     	;# 
  2183  0896                     	;# 
  2184  0896                     	;# 
  2185  089B                     	;# 
  2186  0911                     	;# 
  2187  0912                     	;# 
  2188  0913                     	;# 
  2189  0914                     	;# 
  2190  0915                     	;# 
  2191  0916                     	;# 
  2192  0918                     	;# 
  2193  0919                     	;# 
  2194  091A                     	;# 
  2195  091B                     	;# 
  2196  091C                     	;# 
  2197  091D                     	;# 
  2198  091E                     	;# 
  2199  091F                     	;# 
  2200  0E0F                     	;# 
  2201  0E10                     	;# 
  2202  0E11                     	;# 
  2203  0E12                     	;# 
  2204  0E13                     	;# 
  2205  0E14                     	;# 
  2206  0E15                     	;# 
  2207  0E16                     	;# 
  2208  0E17                     	;# 
  2209  0E18                     	;# 
  2210  0E19                     	;# 
  2211  0E1A                     	;# 
  2212  0E1B                     	;# 
  2213  0E1C                     	;# 
  2214  0E1D                     	;# 
  2215  0E1E                     	;# 
  2216  0E1F                     	;# 
  2217  0E20                     	;# 
  2218  0E21                     	;# 
  2219  0E22                     	;# 
  2220  0E24                     	;# 
  2221  0E25                     	;# 
  2222  0E28                     	;# 
  2223  0E29                     	;# 
  2224  0E2A                     	;# 
  2225  0E2B                     	;# 
  2226  0E2C                     	;# 
  2227  0E2D                     	;# 
  2228  0E2E                     	;# 
  2229  0E2F                     	;# 
  2230  0E90                     	;# 
  2231  0E91                     	;# 
  2232  0E92                     	;# 
  2233  0E94                     	;# 
  2234  0E95                     	;# 
  2235  0E9C                     	;# 
  2236  0E9D                     	;# 
  2237  0E9E                     	;# 
  2238  0E9F                     	;# 
  2239  0EA0                     	;# 
  2240  0EA1                     	;# 
  2241  0EA2                     	;# 
  2242  0EA3                     	;# 
  2243  0EA4                     	;# 
  2244  0EA5                     	;# 
  2245  0EA6                     	;# 
  2246  0EA7                     	;# 
  2247  0F0F                     	;# 
  2248  0F10                     	;# 
  2249  0F11                     	;# 
  2250  0F12                     	;# 
  2251  0F13                     	;# 
  2252  0F14                     	;# 
  2253  0F15                     	;# 
  2254  0F16                     	;# 
  2255  0F17                     	;# 
  2256  0F18                     	;# 
  2257  0F19                     	;# 
  2258  0F1A                     	;# 
  2259  0F1B                     	;# 
  2260  0F1C                     	;# 
  2261  0F1D                     	;# 
  2262  0F1E                     	;# 
  2263  0F1F                     	;# 
  2264  0F20                     	;# 
  2265  0F21                     	;# 
  2266  0F22                     	;# 
  2267  0F23                     	;# 
  2268  0F24                     	;# 
  2269  0F25                     	;# 
  2270  0F26                     	;# 
  2271  0F27                     	;# 
  2272  0F28                     	;# 
  2273  0F29                     	;# 
  2274  0F2A                     	;# 
  2275  0F2B                     	;# 
  2276  0F2C                     	;# 
  2277  0F2D                     	;# 
  2278  0F2E                     	;# 
  2279  0F2F                     	;# 
  2280  0F30                     	;# 
  2281  0F31                     	;# 
  2282  0F32                     	;# 
  2283  0F33                     	;# 
  2284  0F34                     	;# 
  2285  0F35                     	;# 
  2286  0F36                     	;# 
  2287  0F37                     	;# 
  2288  0FE4                     	;# 
  2289  0FE5                     	;# 
  2290  0FE6                     	;# 
  2291  0FE7                     	;# 
  2292  0FE8                     	;# 
  2293  0FE9                     	;# 
  2294  0FEA                     	;# 
  2295  0FEB                     	;# 
  2296  0FED                     	;# 
  2297  0FEE                     	;# 
  2298  0FEF                     	;# 
  2299  0000                     	;# 
  2300  0001                     	;# 
  2301  0002                     	;# 
  2302  0003                     	;# 
  2303  0004                     	;# 
  2304  0005                     	;# 
  2305  0006                     	;# 
  2306  0007                     	;# 
  2307  0008                     	;# 
  2308  0009                     	;# 
  2309  000A                     	;# 
  2310  000B                     	;# 
  2311  000C                     	;# 
  2312  000D                     	;# 
  2313  000E                     	;# 
  2314  0010                     	;# 
  2315  0011                     	;# 
  2316  0012                     	;# 
  2317  0013                     	;# 
  2318  0014                     	;# 
  2319  0015                     	;# 
  2320  0015                     	;# 
  2321  0016                     	;# 
  2322  0016                     	;# 
  2323  0017                     	;# 
  2324  0018                     	;# 
  2325  0019                     	;# 
  2326  0019                     	;# 
  2327  001A                     	;# 
  2328  001B                     	;# 
  2329  001C                     	;# 
  2330  001D                     	;# 
  2331  001E                     	;# 
  2332  001F                     	;# 
  2333  008C                     	;# 
  2334  008D                     	;# 
  2335  008E                     	;# 
  2336  0090                     	;# 
  2337  0091                     	;# 
  2338  0092                     	;# 
  2339  0093                     	;# 
  2340  0094                     	;# 
  2341  0097                     	;# 
  2342  009B                     	;# 
  2343  009B                     	;# 
  2344  009C                     	;# 
  2345  009D                     	;# 
  2346  009E                     	;# 
  2347  009F                     	;# 
  2348  010C                     	;# 
  2349  010D                     	;# 
  2350  010E                     	;# 
  2351  0111                     	;# 
  2352  0112                     	;# 
  2353  0113                     	;# 
  2354  0114                     	;# 
  2355  0115                     	;# 
  2356  0116                     	;# 
  2357  0117                     	;# 
  2358  0118                     	;# 
  2359  0119                     	;# 
  2360  018C                     	;# 
  2361  018D                     	;# 
  2362  018E                     	;# 
  2363  0197                     	;# 
  2364  0199                     	;# 
  2365  0199                     	;# 
  2366  0199                     	;# 
  2367  019A                     	;# 
  2368  019A                     	;# 
  2369  019A                     	;# 
  2370  019B                     	;# 
  2371  019B                     	;# 
  2372  019B                     	;# 
  2373  019B                     	;# 
  2374  019B                     	;# 
  2375  019C                     	;# 
  2376  019C                     	;# 
  2377  019C                     	;# 
  2378  019D                     	;# 
  2379  019D                     	;# 
  2380  019D                     	;# 
  2381  019E                     	;# 
  2382  019E                     	;# 
  2383  019E                     	;# 
  2384  019F                     	;# 
  2385  019F                     	;# 
  2386  019F                     	;# 
  2387  019F                     	;# 
  2388  019F                     	;# 
  2389  020C                     	;# 
  2390  020D                     	;# 
  2391  020E                     	;# 
  2392  0211                     	;# 
  2393  0211                     	;# 
  2394  0212                     	;# 
  2395  0212                     	;# 
  2396  0213                     	;# 
  2397  0213                     	;# 
  2398  0214                     	;# 
  2399  0214                     	;# 
  2400  0215                     	;# 
  2401  0215                     	;# 
  2402  0215                     	;# 
  2403  0215                     	;# 
  2404  0216                     	;# 
  2405  0216                     	;# 
  2406  0217                     	;# 
  2407  0217                     	;# 
  2408  0219                     	;# 
  2409  021A                     	;# 
  2410  021B                     	;# 
  2411  021C                     	;# 
  2412  021D                     	;# 
  2413  021D                     	;# 
  2414  021E                     	;# 
  2415  021F                     	;# 
  2416  028C                     	;# 
  2417  028D                     	;# 
  2418  028E                     	;# 
  2419  0291                     	;# 
  2420  0291                     	;# 
  2421  0292                     	;# 
  2422  0293                     	;# 
  2423  0294                     	;# 
  2424  0295                     	;# 
  2425  0295                     	;# 
  2426  0296                     	;# 
  2427  0297                     	;# 
  2428  0298                     	;# 
  2429  029F                     	;# 
  2430  030C                     	;# 
  2431  030D                     	;# 
  2432  030E                     	;# 
  2433  0311                     	;# 
  2434  0311                     	;# 
  2435  0312                     	;# 
  2436  0313                     	;# 
  2437  0314                     	;# 
  2438  0315                     	;# 
  2439  0315                     	;# 
  2440  0316                     	;# 
  2441  0317                     	;# 
  2442  0318                     	;# 
  2443  038C                     	;# 
  2444  038D                     	;# 
  2445  038E                     	;# 
  2446  0391                     	;# 
  2447  0392                     	;# 
  2448  0393                     	;# 
  2449  0394                     	;# 
  2450  0395                     	;# 
  2451  0396                     	;# 
  2452  0397                     	;# 
  2453  0398                     	;# 
  2454  0399                     	;# 
  2455  039A                     	;# 
  2456  039C                     	;# 
  2457  039D                     	;# 
  2458  039E                     	;# 
  2459  039F                     	;# 
  2460  0411                     	;# 
  2461  0411                     	;# 
  2462  0412                     	;# 
  2463  0413                     	;# 
  2464  0414                     	;# 
  2465  0415                     	;# 
  2466  0416                     	;# 
  2467  0417                     	;# 
  2468  0418                     	;# 
  2469  0418                     	;# 
  2470  0419                     	;# 
  2471  041A                     	;# 
  2472  041B                     	;# 
  2473  041C                     	;# 
  2474  041D                     	;# 
  2475  041E                     	;# 
  2476  041F                     	;# 
  2477  0498                     	;# 
  2478  0498                     	;# 
  2479  0499                     	;# 
  2480  049A                     	;# 
  2481  049B                     	;# 
  2482  049B                     	;# 
  2483  049C                     	;# 
  2484  049D                     	;# 
  2485  049E                     	;# 
  2486  049F                     	;# 
  2487  0617                     	;# 
  2488  0618                     	;# 
  2489  0619                     	;# 
  2490  0619                     	;# 
  2491  061A                     	;# 
  2492  061B                     	;# 
  2493  061C                     	;# 
  2494  061C                     	;# 
  2495  061F                     	;# 
  2496  0691                     	;# 
  2497  0692                     	;# 
  2498  0693                     	;# 
  2499  0694                     	;# 
  2500  0695                     	;# 
  2501  0696                     	;# 
  2502  0697                     	;# 
  2503  0698                     	;# 
  2504  0699                     	;# 
  2505  0711                     	;# 
  2506  0712                     	;# 
  2507  0713                     	;# 
  2508  0714                     	;# 
  2509  0715                     	;# 
  2510  0716                     	;# 
  2511  0717                     	;# 
  2512  0718                     	;# 
  2513  0719                     	;# 
  2514  0891                     	;# 
  2515  0891                     	;# 
  2516  0891                     	;# 
  2517  0891                     	;# 
  2518  0891                     	;# 
  2519  0891                     	;# 
  2520  0892                     	;# 
  2521  0892                     	;# 
  2522  0892                     	;# 
  2523  0893                     	;# 
  2524  0893                     	;# 
  2525  0893                     	;# 
  2526  0893                     	;# 
  2527  0893                     	;# 
  2528  0893                     	;# 
  2529  0894                     	;# 
  2530  0894                     	;# 
  2531  0894                     	;# 
  2532  0895                     	;# 
  2533  0895                     	;# 
  2534  0895                     	;# 
  2535  0896                     	;# 
  2536  0896                     	;# 
  2537  0896                     	;# 
  2538  089B                     	;# 
  2539  0911                     	;# 
  2540  0912                     	;# 
  2541  0913                     	;# 
  2542  0914                     	;# 
  2543  0915                     	;# 
  2544  0916                     	;# 
  2545  0918                     	;# 
  2546  0919                     	;# 
  2547  091A                     	;# 
  2548  091B                     	;# 
  2549  091C                     	;# 
  2550  091D                     	;# 
  2551  091E                     	;# 
  2552  091F                     	;# 
  2553  0E0F                     	;# 
  2554  0E10                     	;# 
  2555  0E11                     	;# 
  2556  0E12                     	;# 
  2557  0E13                     	;# 
  2558  0E14                     	;# 
  2559  0E15                     	;# 
  2560  0E16                     	;# 
  2561  0E17                     	;# 
  2562  0E18                     	;# 
  2563  0E19                     	;# 
  2564  0E1A                     	;# 
  2565  0E1B                     	;# 
  2566  0E1C                     	;# 
  2567  0E1D                     	;# 
  2568  0E1E                     	;# 
  2569  0E1F                     	;# 
  2570  0E20                     	;# 
  2571  0E21                     	;# 
  2572  0E22                     	;# 
  2573  0E24                     	;# 
  2574  0E25                     	;# 
  2575  0E28                     	;# 
  2576  0E29                     	;# 
  2577  0E2A                     	;# 
  2578  0E2B                     	;# 
  2579  0E2C                     	;# 
  2580  0E2D                     	;# 
  2581  0E2E                     	;# 
  2582  0E2F                     	;# 
  2583  0E90                     	;# 
  2584  0E91                     	;# 
  2585  0E92                     	;# 
  2586  0E94                     	;# 
  2587  0E95                     	;# 
  2588  0E9C                     	;# 
  2589  0E9D                     	;# 
  2590  0E9E                     	;# 
  2591  0E9F                     	;# 
  2592  0EA0                     	;# 
  2593  0EA1                     	;# 
  2594  0EA2                     	;# 
  2595  0EA3                     	;# 
  2596  0EA4                     	;# 
  2597  0EA5                     	;# 
  2598  0EA6                     	;# 
  2599  0EA7                     	;# 
  2600  0F0F                     	;# 
  2601  0F10                     	;# 
  2602  0F11                     	;# 
  2603  0F12                     	;# 
  2604  0F13                     	;# 
  2605  0F14                     	;# 
  2606  0F15                     	;# 
  2607  0F16                     	;# 
  2608  0F17                     	;# 
  2609  0F18                     	;# 
  2610  0F19                     	;# 
  2611  0F1A                     	;# 
  2612  0F1B                     	;# 
  2613  0F1C                     	;# 
  2614  0F1D                     	;# 
  2615  0F1E                     	;# 
  2616  0F1F                     	;# 
  2617  0F20                     	;# 
  2618  0F21                     	;# 
  2619  0F22                     	;# 
  2620  0F23                     	;# 
  2621  0F24                     	;# 
  2622  0F25                     	;# 
  2623  0F26                     	;# 
  2624  0F27                     	;# 
  2625  0F28                     	;# 
  2626  0F29                     	;# 
  2627  0F2A                     	;# 
  2628  0F2B                     	;# 
  2629  0F2C                     	;# 
  2630  0F2D                     	;# 
  2631  0F2E                     	;# 
  2632  0F2F                     	;# 
  2633  0F30                     	;# 
  2634  0F31                     	;# 
  2635  0F32                     	;# 
  2636  0F33                     	;# 
  2637  0F34                     	;# 
  2638  0F35                     	;# 
  2639  0F36                     	;# 
  2640  0F37                     	;# 
  2641  0FE4                     	;# 
  2642  0FE5                     	;# 
  2643  0FE6                     	;# 
  2644  0FE7                     	;# 
  2645  0FE8                     	;# 
  2646  0FE9                     	;# 
  2647  0FEA                     	;# 
  2648  0FEB                     	;# 
  2649  0FED                     	;# 
  2650  0FEE                     	;# 
  2651  0FEF                     	;# 
  2652  0000                     	;# 
  2653  0001                     	;# 
  2654  0002                     	;# 
  2655  0003                     	;# 
  2656  0004                     	;# 
  2657  0005                     	;# 
  2658  0006                     	;# 
  2659  0007                     	;# 
  2660  0008                     	;# 
  2661  0009                     	;# 
  2662  000A                     	;# 
  2663  000B                     	;# 
  2664  000C                     	;# 
  2665  000D                     	;# 
  2666  000E                     	;# 
  2667  0010                     	;# 
  2668  0011                     	;# 
  2669  0012                     	;# 
  2670  0013                     	;# 
  2671  0014                     	;# 
  2672  0015                     	;# 
  2673  0015                     	;# 
  2674  0016                     	;# 
  2675  0016                     	;# 
  2676  0017                     	;# 
  2677  0018                     	;# 
  2678  0019                     	;# 
  2679  0019                     	;# 
  2680  001A                     	;# 
  2681  001B                     	;# 
  2682  001C                     	;# 
  2683  001D                     	;# 
  2684  001E                     	;# 
  2685  001F                     	;# 
  2686  008C                     	;# 
  2687  008D                     	;# 
  2688  008E                     	;# 
  2689  0090                     	;# 
  2690  0091                     	;# 
  2691  0092                     	;# 
  2692  0093                     	;# 
  2693  0094                     	;# 
  2694  0097                     	;# 
  2695  009B                     	;# 
  2696  009B                     	;# 
  2697  009C                     	;# 
  2698  009D                     	;# 
  2699  009E                     	;# 
  2700  009F                     	;# 
  2701  010C                     	;# 
  2702  010D                     	;# 
  2703  010E                     	;# 
  2704  0111                     	;# 
  2705  0112                     	;# 
  2706  0113                     	;# 
  2707  0114                     	;# 
  2708  0115                     	;# 
  2709  0116                     	;# 
  2710  0117                     	;# 
  2711  0118                     	;# 
  2712  0119                     	;# 
  2713  018C                     	;# 
  2714  018D                     	;# 
  2715  018E                     	;# 
  2716  0197                     	;# 
  2717  0199                     	;# 
  2718  0199                     	;# 
  2719  0199                     	;# 
  2720  019A                     	;# 
  2721  019A                     	;# 
  2722  019A                     	;# 
  2723  019B                     	;# 
  2724  019B                     	;# 
  2725  019B                     	;# 
  2726  019B                     	;# 
  2727  019B                     	;# 
  2728  019C                     	;# 
  2729  019C                     	;# 
  2730  019C                     	;# 
  2731  019D                     	;# 
  2732  019D                     	;# 
  2733  019D                     	;# 
  2734  019E                     	;# 
  2735  019E                     	;# 
  2736  019E                     	;# 
  2737  019F                     	;# 
  2738  019F                     	;# 
  2739  019F                     	;# 
  2740  019F                     	;# 
  2741  019F                     	;# 
  2742  020C                     	;# 
  2743  020D                     	;# 
  2744  020E                     	;# 
  2745  0211                     	;# 
  2746  0211                     	;# 
  2747  0212                     	;# 
  2748  0212                     	;# 
  2749  0213                     	;# 
  2750  0213                     	;# 
  2751  0214                     	;# 
  2752  0214                     	;# 
  2753  0215                     	;# 
  2754  0215                     	;# 
  2755  0215                     	;# 
  2756  0215                     	;# 
  2757  0216                     	;# 
  2758  0216                     	;# 
  2759  0217                     	;# 
  2760  0217                     	;# 
  2761  0219                     	;# 
  2762  021A                     	;# 
  2763  021B                     	;# 
  2764  021C                     	;# 
  2765  021D                     	;# 
  2766  021D                     	;# 
  2767  021E                     	;# 
  2768  021F                     	;# 
  2769  028C                     	;# 
  2770  028D                     	;# 
  2771  028E                     	;# 
  2772  0291                     	;# 
  2773  0291                     	;# 
  2774  0292                     	;# 
  2775  0293                     	;# 
  2776  0294                     	;# 
  2777  0295                     	;# 
  2778  0295                     	;# 
  2779  0296                     	;# 
  2780  0297                     	;# 
  2781  0298                     	;# 
  2782  029F                     	;# 
  2783  030C                     	;# 
  2784  030D                     	;# 
  2785  030E                     	;# 
  2786  0311                     	;# 
  2787  0311                     	;# 
  2788  0312                     	;# 
  2789  0313                     	;# 
  2790  0314                     	;# 
  2791  0315                     	;# 
  2792  0315                     	;# 
  2793  0316                     	;# 
  2794  0317                     	;# 
  2795  0318                     	;# 
  2796  038C                     	;# 
  2797  038D                     	;# 
  2798  038E                     	;# 
  2799  0391                     	;# 
  2800  0392                     	;# 
  2801  0393                     	;# 
  2802  0394                     	;# 
  2803  0395                     	;# 
  2804  0396                     	;# 
  2805  0397                     	;# 
  2806  0398                     	;# 
  2807  0399                     	;# 
  2808  039A                     	;# 
  2809  039C                     	;# 
  2810  039D                     	;# 
  2811  039E                     	;# 
  2812  039F                     	;# 
  2813  0411                     	;# 
  2814  0411                     	;# 
  2815  0412                     	;# 
  2816  0413                     	;# 
  2817  0414                     	;# 
  2818  0415                     	;# 
  2819  0416                     	;# 
  2820  0417                     	;# 
  2821  0418                     	;# 
  2822  0418                     	;# 
  2823  0419                     	;# 
  2824  041A                     	;# 
  2825  041B                     	;# 
  2826  041C                     	;# 
  2827  041D                     	;# 
  2828  041E                     	;# 
  2829  041F                     	;# 
  2830  0498                     	;# 
  2831  0498                     	;# 
  2832  0499                     	;# 
  2833  049A                     	;# 
  2834  049B                     	;# 
  2835  049B                     	;# 
  2836  049C                     	;# 
  2837  049D                     	;# 
  2838  049E                     	;# 
  2839  049F                     	;# 
  2840  0617                     	;# 
  2841  0618                     	;# 
  2842  0619                     	;# 
  2843  0619                     	;# 
  2844  061A                     	;# 
  2845  061B                     	;# 
  2846  061C                     	;# 
  2847  061C                     	;# 
  2848  061F                     	;# 
  2849  0691                     	;# 
  2850  0692                     	;# 
  2851  0693                     	;# 
  2852  0694                     	;# 
  2853  0695                     	;# 
  2854  0696                     	;# 
  2855  0697                     	;# 
  2856  0698                     	;# 
  2857  0699                     	;# 
  2858  0711                     	;# 
  2859  0712                     	;# 
  2860  0713                     	;# 
  2861  0714                     	;# 
  2862  0715                     	;# 
  2863  0716                     	;# 
  2864  0717                     	;# 
  2865  0718                     	;# 
  2866  0719                     	;# 
  2867  0891                     	;# 
  2868  0891                     	;# 
  2869  0891                     	;# 
  2870  0891                     	;# 
  2871  0891                     	;# 
  2872  0891                     	;# 
  2873  0892                     	;# 
  2874  0892                     	;# 
  2875  0892                     	;# 
  2876  0893                     	;# 
  2877  0893                     	;# 
  2878  0893                     	;# 
  2879  0893                     	;# 
  2880  0893                     	;# 
  2881  0893                     	;# 
  2882  0894                     	;# 
  2883  0894                     	;# 
  2884  0894                     	;# 
  2885  0895                     	;# 
  2886  0895                     	;# 
  2887  0895                     	;# 
  2888  0896                     	;# 
  2889  0896                     	;# 
  2890  0896                     	;# 
  2891  089B                     	;# 
  2892  0911                     	;# 
  2893  0912                     	;# 
  2894  0913                     	;# 
  2895  0914                     	;# 
  2896  0915                     	;# 
  2897  0916                     	;# 
  2898  0918                     	;# 
  2899  0919                     	;# 
  2900  091A                     	;# 
  2901  091B                     	;# 
  2902  091C                     	;# 
  2903  091D                     	;# 
  2904  091E                     	;# 
  2905  091F                     	;# 
  2906  0E0F                     	;# 
  2907  0E10                     	;# 
  2908  0E11                     	;# 
  2909  0E12                     	;# 
  2910  0E13                     	;# 
  2911  0E14                     	;# 
  2912  0E15                     	;# 
  2913  0E16                     	;# 
  2914  0E17                     	;# 
  2915  0E18                     	;# 
  2916  0E19                     	;# 
  2917  0E1A                     	;# 
  2918  0E1B                     	;# 
  2919  0E1C                     	;# 
  2920  0E1D                     	;# 
  2921  0E1E                     	;# 
  2922  0E1F                     	;# 
  2923  0E20                     	;# 
  2924  0E21                     	;# 
  2925  0E22                     	;# 
  2926  0E24                     	;# 
  2927  0E25                     	;# 
  2928  0E28                     	;# 
  2929  0E29                     	;# 
  2930  0E2A                     	;# 
  2931  0E2B                     	;# 
  2932  0E2C                     	;# 
  2933  0E2D                     	;# 
  2934  0E2E                     	;# 
  2935  0E2F                     	;# 
  2936  0E90                     	;# 
  2937  0E91                     	;# 
  2938  0E92                     	;# 
  2939  0E94                     	;# 
  2940  0E95                     	;# 
  2941  0E9C                     	;# 
  2942  0E9D                     	;# 
  2943  0E9E                     	;# 
  2944  0E9F                     	;# 
  2945  0EA0                     	;# 
  2946  0EA1                     	;# 
  2947  0EA2                     	;# 
  2948  0EA3                     	;# 
  2949  0EA4                     	;# 
  2950  0EA5                     	;# 
  2951  0EA6                     	;# 
  2952  0EA7                     	;# 
  2953  0F0F                     	;# 
  2954  0F10                     	;# 
  2955  0F11                     	;# 
  2956  0F12                     	;# 
  2957  0F13                     	;# 
  2958  0F14                     	;# 
  2959  0F15                     	;# 
  2960  0F16                     	;# 
  2961  0F17                     	;# 
  2962  0F18                     	;# 
  2963  0F19                     	;# 
  2964  0F1A                     	;# 
  2965  0F1B                     	;# 
  2966  0F1C                     	;# 
  2967  0F1D                     	;# 
  2968  0F1E                     	;# 
  2969  0F1F                     	;# 
  2970  0F20                     	;# 
  2971  0F21                     	;# 
  2972  0F22                     	;# 
  2973  0F23                     	;# 
  2974  0F24                     	;# 
  2975  0F25                     	;# 
  2976  0F26                     	;# 
  2977  0F27                     	;# 
  2978  0F28                     	;# 
  2979  0F29                     	;# 
  2980  0F2A                     	;# 
  2981  0F2B                     	;# 
  2982  0F2C                     	;# 
  2983  0F2D                     	;# 
  2984  0F2E                     	;# 
  2985  0F2F                     	;# 
  2986  0F30                     	;# 
  2987  0F31                     	;# 
  2988  0F32                     	;# 
  2989  0F33                     	;# 
  2990  0F34                     	;# 
  2991  0F35                     	;# 
  2992  0F36                     	;# 
  2993  0F37                     	;# 
  2994  0FE4                     	;# 
  2995  0FE5                     	;# 
  2996  0FE6                     	;# 
  2997  0FE7                     	;# 
  2998  0FE8                     	;# 
  2999  0FE9                     	;# 
  3000  0FEA                     	;# 
  3001  0FEB                     	;# 
  3002  0FED                     	;# 
  3003  0FEE                     	;# 
  3004  0FEF                     	;# 
  3005  0000                     	;# 
  3006  0001                     	;# 
  3007  0002                     	;# 
  3008  0003                     	;# 
  3009  0004                     	;# 
  3010  0005                     	;# 
  3011  0006                     	;# 
  3012  0007                     	;# 
  3013  0008                     	;# 
  3014  0009                     	;# 
  3015  000A                     	;# 
  3016  000B                     	;# 
  3017  000C                     	;# 
  3018  000D                     	;# 
  3019  000E                     	;# 
  3020  0010                     	;# 
  3021  0011                     	;# 
  3022  0012                     	;# 
  3023  0013                     	;# 
  3024  0014                     	;# 
  3025  0015                     	;# 
  3026  0015                     	;# 
  3027  0016                     	;# 
  3028  0016                     	;# 
  3029  0017                     	;# 
  3030  0018                     	;# 
  3031  0019                     	;# 
  3032  0019                     	;# 
  3033  001A                     	;# 
  3034  001B                     	;# 
  3035  001C                     	;# 
  3036  001D                     	;# 
  3037  001E                     	;# 
  3038  001F                     	;# 
  3039  008C                     	;# 
  3040  008D                     	;# 
  3041  008E                     	;# 
  3042  0090                     	;# 
  3043  0091                     	;# 
  3044  0092                     	;# 
  3045  0093                     	;# 
  3046  0094                     	;# 
  3047  0097                     	;# 
  3048  009B                     	;# 
  3049  009B                     	;# 
  3050  009C                     	;# 
  3051  009D                     	;# 
  3052  009E                     	;# 
  3053  009F                     	;# 
  3054  010C                     	;# 
  3055  010D                     	;# 
  3056  010E                     	;# 
  3057  0111                     	;# 
  3058  0112                     	;# 
  3059  0113                     	;# 
  3060  0114                     	;# 
  3061  0115                     	;# 
  3062  0116                     	;# 
  3063  0117                     	;# 
  3064  0118                     	;# 
  3065  0119                     	;# 
  3066  018C                     	;# 
  3067  018D                     	;# 
  3068  018E                     	;# 
  3069  0197                     	;# 
  3070  0199                     	;# 
  3071  0199                     	;# 
  3072  0199                     	;# 
  3073  019A                     	;# 
  3074  019A                     	;# 
  3075  019A                     	;# 
  3076  019B                     	;# 
  3077  019B                     	;# 
  3078  019B                     	;# 
  3079  019B                     	;# 
  3080  019B                     	;# 
  3081  019C                     	;# 
  3082  019C                     	;# 
  3083  019C                     	;# 
  3084  019D                     	;# 
  3085  019D                     	;# 
  3086  019D                     	;# 
  3087  019E                     	;# 
  3088  019E                     	;# 
  3089  019E                     	;# 
  3090  019F                     	;# 
  3091  019F                     	;# 
  3092  019F                     	;# 
  3093  019F                     	;# 
  3094  019F                     	;# 
  3095  020C                     	;# 
  3096  020D                     	;# 
  3097  020E                     	;# 
  3098  0211                     	;# 
  3099  0211                     	;# 
  3100  0212                     	;# 
  3101  0212                     	;# 
  3102  0213                     	;# 
  3103  0213                     	;# 
  3104  0214                     	;# 
  3105  0214                     	;# 
  3106  0215                     	;# 
  3107  0215                     	;# 
  3108  0215                     	;# 
  3109  0215                     	;# 
  3110  0216                     	;# 
  3111  0216                     	;# 
  3112  0217                     	;# 
  3113  0217                     	;# 
  3114  0219                     	;# 
  3115  021A                     	;# 
  3116  021B                     	;# 
  3117  021C                     	;# 
  3118  021D                     	;# 
  3119  021D                     	;# 
  3120  021E                     	;# 
  3121  021F                     	;# 
  3122  028C                     	;# 
  3123  028D                     	;# 
  3124  028E                     	;# 
  3125  0291                     	;# 
  3126  0291                     	;# 
  3127  0292                     	;# 
  3128  0293                     	;# 
  3129  0294                     	;# 
  3130  0295                     	;# 
  3131  0295                     	;# 
  3132  0296                     	;# 
  3133  0297                     	;# 
  3134  0298                     	;# 
  3135  029F                     	;# 
  3136  030C                     	;# 
  3137  030D                     	;# 
  3138  030E                     	;# 
  3139  0311                     	;# 
  3140  0311                     	;# 
  3141  0312                     	;# 
  3142  0313                     	;# 
  3143  0314                     	;# 
  3144  0315                     	;# 
  3145  0315                     	;# 
  3146  0316                     	;# 
  3147  0317                     	;# 
  3148  0318                     	;# 
  3149  038C                     	;# 
  3150  038D                     	;# 
  3151  038E                     	;# 
  3152  0391                     	;# 
  3153  0392                     	;# 
  3154  0393                     	;# 
  3155  0394                     	;# 
  3156  0395                     	;# 
  3157  0396                     	;# 
  3158  0397                     	;# 
  3159  0398                     	;# 
  3160  0399                     	;# 
  3161  039A                     	;# 
  3162  039C                     	;# 
  3163  039D                     	;# 
  3164  039E                     	;# 
  3165  039F                     	;# 
  3166  0411                     	;# 
  3167  0411                     	;# 
  3168  0412                     	;# 
  3169  0413                     	;# 
  3170  0414                     	;# 
  3171  0415                     	;# 
  3172  0416                     	;# 
  3173  0417                     	;# 
  3174  0418                     	;# 
  3175  0418                     	;# 
  3176  0419                     	;# 
  3177  041A                     	;# 
  3178  041B                     	;# 
  3179  041C                     	;# 
  3180  041D                     	;# 
  3181  041E                     	;# 
  3182  041F                     	;# 
  3183  0498                     	;# 
  3184  0498                     	;# 
  3185  0499                     	;# 
  3186  049A                     	;# 
  3187  049B                     	;# 
  3188  049B                     	;# 
  3189  049C                     	;# 
  3190  049D                     	;# 
  3191  049E                     	;# 
  3192  049F                     	;# 
  3193  0617                     	;# 
  3194  0618                     	;# 
  3195  0619                     	;# 
  3196  0619                     	;# 
  3197  061A                     	;# 
  3198  061B                     	;# 
  3199  061C                     	;# 
  3200  061C                     	;# 
  3201  061F                     	;# 
  3202  0691                     	;# 
  3203  0692                     	;# 
  3204  0693                     	;# 
  3205  0694                     	;# 
  3206  0695                     	;# 
  3207  0696                     	;# 
  3208  0697                     	;# 
  3209  0698                     	;# 
  3210  0699                     	;# 
  3211  0711                     	;# 
  3212  0712                     	;# 
  3213  0713                     	;# 
  3214  0714                     	;# 
  3215  0715                     	;# 
  3216  0716                     	;# 
  3217  0717                     	;# 
  3218  0718                     	;# 
  3219  0719                     	;# 
  3220  0891                     	;# 
  3221  0891                     	;# 
  3222  0891                     	;# 
  3223  0891                     	;# 
  3224  0891                     	;# 
  3225  0891                     	;# 
  3226  0892                     	;# 
  3227  0892                     	;# 
  3228  0892                     	;# 
  3229  0893                     	;# 
  3230  0893                     	;# 
  3231  0893                     	;# 
  3232  0893                     	;# 
  3233  0893                     	;# 
  3234  0893                     	;# 
  3235  0894                     	;# 
  3236  0894                     	;# 
  3237  0894                     	;# 
  3238  0895                     	;# 
  3239  0895                     	;# 
  3240  0895                     	;# 
  3241  0896                     	;# 
  3242  0896                     	;# 
  3243  0896                     	;# 
  3244  089B                     	;# 
  3245  0911                     	;# 
  3246  0912                     	;# 
  3247  0913                     	;# 
  3248  0914                     	;# 
  3249  0915                     	;# 
  3250  0916                     	;# 
  3251  0918                     	;# 
  3252  0919                     	;# 
  3253  091A                     	;# 
  3254  091B                     	;# 
  3255  091C                     	;# 
  3256  091D                     	;# 
  3257  091E                     	;# 
  3258  091F                     	;# 
  3259  0E0F                     	;# 
  3260  0E10                     	;# 
  3261  0E11                     	;# 
  3262  0E12                     	;# 
  3263  0E13                     	;# 
  3264  0E14                     	;# 
  3265  0E15                     	;# 
  3266  0E16                     	;# 
  3267  0E17                     	;# 
  3268  0E18                     	;# 
  3269  0E19                     	;# 
  3270  0E1A                     	;# 
  3271  0E1B                     	;# 
  3272  0E1C                     	;# 
  3273  0E1D                     	;# 
  3274  0E1E                     	;# 
  3275  0E1F                     	;# 
  3276  0E20                     	;# 
  3277  0E21                     	;# 
  3278  0E22                     	;# 
  3279  0E24                     	;# 
  3280  0E25                     	;# 
  3281  0E28                     	;# 
  3282  0E29                     	;# 
  3283  0E2A                     	;# 
  3284  0E2B                     	;# 
  3285  0E2C                     	;# 
  3286  0E2D                     	;# 
  3287  0E2E                     	;# 
  3288  0E2F                     	;# 
  3289  0E90                     	;# 
  3290  0E91                     	;# 
  3291  0E92                     	;# 
  3292  0E94                     	;# 
  3293  0E95                     	;# 
  3294  0E9C                     	;# 
  3295  0E9D                     	;# 
  3296  0E9E                     	;# 
  3297  0E9F                     	;# 
  3298  0EA0                     	;# 
  3299  0EA1                     	;# 
  3300  0EA2                     	;# 
  3301  0EA3                     	;# 
  3302  0EA4                     	;# 
  3303  0EA5                     	;# 
  3304  0EA6                     	;# 
  3305  0EA7                     	;# 
  3306  0F0F                     	;# 
  3307  0F10                     	;# 
  3308  0F11                     	;# 
  3309  0F12                     	;# 
  3310  0F13                     	;# 
  3311  0F14                     	;# 
  3312  0F15                     	;# 
  3313  0F16                     	;# 
  3314  0F17                     	;# 
  3315  0F18                     	;# 
  3316  0F19                     	;# 
  3317  0F1A                     	;# 
  3318  0F1B                     	;# 
  3319  0F1C                     	;# 
  3320  0F1D                     	;# 
  3321  0F1E                     	;# 
  3322  0F1F                     	;# 
  3323  0F20                     	;# 
  3324  0F21                     	;# 
  3325  0F22                     	;# 
  3326  0F23                     	;# 
  3327  0F24                     	;# 
  3328  0F25                     	;# 
  3329  0F26                     	;# 
  3330  0F27                     	;# 
  3331  0F28                     	;# 
  3332  0F29                     	;# 
  3333  0F2A                     	;# 
  3334  0F2B                     	;# 
  3335  0F2C                     	;# 
  3336  0F2D                     	;# 
  3337  0F2E                     	;# 
  3338  0F2F                     	;# 
  3339  0F30                     	;# 
  3340  0F31                     	;# 
  3341  0F32                     	;# 
  3342  0F33                     	;# 
  3343  0F34                     	;# 
  3344  0F35                     	;# 
  3345  0F36                     	;# 
  3346  0F37                     	;# 
  3347  0FE4                     	;# 
  3348  0FE5                     	;# 
  3349  0FE6                     	;# 
  3350  0FE7                     	;# 
  3351  0FE8                     	;# 
  3352  0FE9                     	;# 
  3353  0FEA                     	;# 
  3354  0FEB                     	;# 
  3355  0FED                     	;# 
  3356  0FEE                     	;# 
  3357  0FEF                     	;# 
  3358  0000                     	;# 
  3359  0001                     	;# 
  3360  0002                     	;# 
  3361  0003                     	;# 
  3362  0004                     	;# 
  3363  0005                     	;# 
  3364  0006                     	;# 
  3365  0007                     	;# 
  3366  0008                     	;# 
  3367  0009                     	;# 
  3368  000A                     	;# 
  3369  000B                     	;# 
  3370  000C                     	;# 
  3371  000D                     	;# 
  3372  000E                     	;# 
  3373  0010                     	;# 
  3374  0011                     	;# 
  3375  0012                     	;# 
  3376  0013                     	;# 
  3377  0014                     	;# 
  3378  0015                     	;# 
  3379  0015                     	;# 
  3380  0016                     	;# 
  3381  0016                     	;# 
  3382  0017                     	;# 
  3383  0018                     	;# 
  3384  0019                     	;# 
  3385  0019                     	;# 
  3386  001A                     	;# 
  3387  001B                     	;# 
  3388  001C                     	;# 
  3389  001D                     	;# 
  3390  001E                     	;# 
  3391  001F                     	;# 
  3392  008C                     	;# 
  3393  008D                     	;# 
  3394  008E                     	;# 
  3395  0090                     	;# 
  3396  0091                     	;# 
  3397  0092                     	;# 
  3398  0093                     	;# 
  3399  0094                     	;# 
  3400  0097                     	;# 
  3401  009B                     	;# 
  3402  009B                     	;# 
  3403  009C                     	;# 
  3404  009D                     	;# 
  3405  009E                     	;# 
  3406  009F                     	;# 
  3407  010C                     	;# 
  3408  010D                     	;# 
  3409  010E                     	;# 
  3410  0111                     	;# 
  3411  0112                     	;# 
  3412  0113                     	;# 
  3413  0114                     	;# 
  3414  0115                     	;# 
  3415  0116                     	;# 
  3416  0117                     	;# 
  3417  0118                     	;# 
  3418  0119                     	;# 
  3419  018C                     	;# 
  3420  018D                     	;# 
  3421  018E                     	;# 
  3422  0197                     	;# 
  3423  0199                     	;# 
  3424  0199                     	;# 
  3425  0199                     	;# 
  3426  019A                     	;# 
  3427  019A                     	;# 
  3428  019A                     	;# 
  3429  019B                     	;# 
  3430  019B                     	;# 
  3431  019B                     	;# 
  3432  019B                     	;# 
  3433  019B                     	;# 
  3434  019C                     	;# 
  3435  019C                     	;# 
  3436  019C                     	;# 
  3437  019D                     	;# 
  3438  019D                     	;# 
  3439  019D                     	;# 
  3440  019E                     	;# 
  3441  019E                     	;# 
  3442  019E                     	;# 
  3443  019F                     	;# 
  3444  019F                     	;# 
  3445  019F                     	;# 
  3446  019F                     	;# 
  3447  019F                     	;# 
  3448  020C                     	;# 
  3449  020D                     	;# 
  3450  020E                     	;# 
  3451  0211                     	;# 
  3452  0211                     	;# 
  3453  0212                     	;# 
  3454  0212                     	;# 
  3455  0213                     	;# 
  3456  0213                     	;# 
  3457  0214                     	;# 
  3458  0214                     	;# 
  3459  0215                     	;# 
  3460  0215                     	;# 
  3461  0215                     	;# 
  3462  0215                     	;# 
  3463  0216                     	;# 
  3464  0216                     	;# 
  3465  0217                     	;# 
  3466  0217                     	;# 
  3467  0219                     	;# 
  3468  021A                     	;# 
  3469  021B                     	;# 
  3470  021C                     	;# 
  3471  021D                     	;# 
  3472  021D                     	;# 
  3473  021E                     	;# 
  3474  021F                     	;# 
  3475  028C                     	;# 
  3476  028D                     	;# 
  3477  028E                     	;# 
  3478  0291                     	;# 
  3479  0291                     	;# 
  3480  0292                     	;# 
  3481  0293                     	;# 
  3482  0294                     	;# 
  3483  0295                     	;# 
  3484  0295                     	;# 
  3485  0296                     	;# 
  3486  0297                     	;# 
  3487  0298                     	;# 
  3488  029F                     	;# 
  3489  030C                     	;# 
  3490  030D                     	;# 
  3491  030E                     	;# 
  3492  0311                     	;# 
  3493  0311                     	;# 
  3494  0312                     	;# 
  3495  0313                     	;# 
  3496  0314                     	;# 
  3497  0315                     	;# 
  3498  0315                     	;# 
  3499  0316                     	;# 
  3500  0317                     	;# 
  3501  0318                     	;# 
  3502  038C                     	;# 
  3503  038D                     	;# 
  3504  038E                     	;# 
  3505  0391                     	;# 
  3506  0392                     	;# 
  3507  0393                     	;# 
  3508  0394                     	;# 
  3509  0395                     	;# 
  3510  0396                     	;# 
  3511  0397                     	;# 
  3512  0398                     	;# 
  3513  0399                     	;# 
  3514  039A                     	;# 
  3515  039C                     	;# 
  3516  039D                     	;# 
  3517  039E                     	;# 
  3518  039F                     	;# 
  3519  0411                     	;# 
  3520  0411                     	;# 
  3521  0412                     	;# 
  3522  0413                     	;# 
  3523  0414                     	;# 
  3524  0415                     	;# 
  3525  0416                     	;# 
  3526  0417                     	;# 
  3527  0418                     	;# 
  3528  0418                     	;# 
  3529  0419                     	;# 
  3530  041A                     	;# 
  3531  041B                     	;# 
  3532  041C                     	;# 
  3533  041D                     	;# 
  3534  041E                     	;# 
  3535  041F                     	;# 
  3536  0498                     	;# 
  3537  0498                     	;# 
  3538  0499                     	;# 
  3539  049A                     	;# 
  3540  049B                     	;# 
  3541  049B                     	;# 
  3542  049C                     	;# 
  3543  049D                     	;# 
  3544  049E                     	;# 
  3545  049F                     	;# 
  3546  0617                     	;# 
  3547  0618                     	;# 
  3548  0619                     	;# 
  3549  0619                     	;# 
  3550  061A                     	;# 
  3551  061B                     	;# 
  3552  061C                     	;# 
  3553  061C                     	;# 
  3554  061F                     	;# 
  3555  0691                     	;# 
  3556  0692                     	;# 
  3557  0693                     	;# 
  3558  0694                     	;# 
  3559  0695                     	;# 
  3560  0696                     	;# 
  3561  0697                     	;# 
  3562  0698                     	;# 
  3563  0699                     	;# 
  3564  0711                     	;# 
  3565  0712                     	;# 
  3566  0713                     	;# 
  3567  0714                     	;# 
  3568  0715                     	;# 
  3569  0716                     	;# 
  3570  0717                     	;# 
  3571  0718                     	;# 
  3572  0719                     	;# 
  3573  0891                     	;# 
  3574  0891                     	;# 
  3575  0891                     	;# 
  3576  0891                     	;# 
  3577  0891                     	;# 
  3578  0891                     	;# 
  3579  0892                     	;# 
  3580  0892                     	;# 
  3581  0892                     	;# 
  3582  0893                     	;# 
  3583  0893                     	;# 
  3584  0893                     	;# 
  3585  0893                     	;# 
  3586  0893                     	;# 
  3587  0893                     	;# 
  3588  0894                     	;# 
  3589  0894                     	;# 
  3590  0894                     	;# 
  3591  0895                     	;# 
  3592  0895                     	;# 
  3593  0895                     	;# 
  3594  0896                     	;# 
  3595  0896                     	;# 
  3596  0896                     	;# 
  3597  089B                     	;# 
  3598  0911                     	;# 
  3599  0912                     	;# 
  3600  0913                     	;# 
  3601  0914                     	;# 
  3602  0915                     	;# 
  3603  0916                     	;# 
  3604  0918                     	;# 
  3605  0919                     	;# 
  3606  091A                     	;# 
  3607  091B                     	;# 
  3608  091C                     	;# 
  3609  091D                     	;# 
  3610  091E                     	;# 
  3611  091F                     	;# 
  3612  0E0F                     	;# 
  3613  0E10                     	;# 
  3614  0E11                     	;# 
  3615  0E12                     	;# 
  3616  0E13                     	;# 
  3617  0E14                     	;# 
  3618  0E15                     	;# 
  3619  0E16                     	;# 
  3620  0E17                     	;# 
  3621  0E18                     	;# 
  3622  0E19                     	;# 
  3623  0E1A                     	;# 
  3624  0E1B                     	;# 
  3625  0E1C                     	;# 
  3626  0E1D                     	;# 
  3627  0E1E                     	;# 
  3628  0E1F                     	;# 
  3629  0E20                     	;# 
  3630  0E21                     	;# 
  3631  0E22                     	;# 
  3632  0E24                     	;# 
  3633  0E25                     	;# 
  3634  0E28                     	;# 
  3635  0E29                     	;# 
  3636  0E2A                     	;# 
  3637  0E2B                     	;# 
  3638  0E2C                     	;# 
  3639  0E2D                     	;# 
  3640  0E2E                     	;# 
  3641  0E2F                     	;# 
  3642  0E90                     	;# 
  3643  0E91                     	;# 
  3644  0E92                     	;# 
  3645  0E94                     	;# 
  3646  0E95                     	;# 
  3647  0E9C                     	;# 
  3648  0E9D                     	;# 
  3649  0E9E                     	;# 
  3650  0E9F                     	;# 
  3651  0EA0                     	;# 
  3652  0EA1                     	;# 
  3653  0EA2                     	;# 
  3654  0EA3                     	;# 
  3655  0EA4                     	;# 
  3656  0EA5                     	;# 
  3657  0EA6                     	;# 
  3658  0EA7                     	;# 
  3659  0F0F                     	;# 
  3660  0F10                     	;# 
  3661  0F11                     	;# 
  3662  0F12                     	;# 
  3663  0F13                     	;# 
  3664  0F14                     	;# 
  3665  0F15                     	;# 
  3666  0F16                     	;# 
  3667  0F17                     	;# 
  3668  0F18                     	;# 
  3669  0F19                     	;# 
  3670  0F1A                     	;# 
  3671  0F1B                     	;# 
  3672  0F1C                     	;# 
  3673  0F1D                     	;# 
  3674  0F1E                     	;# 
  3675  0F1F                     	;# 
  3676  0F20                     	;# 
  3677  0F21                     	;# 
  3678  0F22                     	;# 
  3679  0F23                     	;# 
  3680  0F24                     	;# 
  3681  0F25                     	;# 
  3682  0F26                     	;# 
  3683  0F27                     	;# 
  3684  0F28                     	;# 
  3685  0F29                     	;# 
  3686  0F2A                     	;# 
  3687  0F2B                     	;# 
  3688  0F2C                     	;# 
  3689  0F2D                     	;# 
  3690  0F2E                     	;# 
  3691  0F2F                     	;# 
  3692  0F30                     	;# 
  3693  0F31                     	;# 
  3694  0F32                     	;# 
  3695  0F33                     	;# 
  3696  0F34                     	;# 
  3697  0F35                     	;# 
  3698  0F36                     	;# 
  3699  0F37                     	;# 
  3700  0FE4                     	;# 
  3701  0FE5                     	;# 
  3702  0FE6                     	;# 
  3703  0FE7                     	;# 
  3704  0FE8                     	;# 
  3705  0FE9                     	;# 
  3706  0FEA                     	;# 
  3707  0FEB                     	;# 
  3708  0FED                     	;# 
  3709  0FEE                     	;# 
  3710  0FEF                     	;# 
  3711  0000                     	;# 
  3712  0001                     	;# 
  3713  0002                     	;# 
  3714  0003                     	;# 
  3715  0004                     	;# 
  3716  0005                     	;# 
  3717  0006                     	;# 
  3718  0007                     	;# 
  3719  0008                     	;# 
  3720  0009                     	;# 
  3721  000A                     	;# 
  3722  000B                     	;# 
  3723  000C                     	;# 
  3724  000D                     	;# 
  3725  000E                     	;# 
  3726  0010                     	;# 
  3727  0011                     	;# 
  3728  0012                     	;# 
  3729  0013                     	;# 
  3730  0014                     	;# 
  3731  0015                     	;# 
  3732  0015                     	;# 
  3733  0016                     	;# 
  3734  0016                     	;# 
  3735  0017                     	;# 
  3736  0018                     	;# 
  3737  0019                     	;# 
  3738  0019                     	;# 
  3739  001A                     	;# 
  3740  001B                     	;# 
  3741  001C                     	;# 
  3742  001D                     	;# 
  3743  001E                     	;# 
  3744  001F                     	;# 
  3745  008C                     	;# 
  3746  008D                     	;# 
  3747  008E                     	;# 
  3748  0090                     	;# 
  3749  0091                     	;# 
  3750  0092                     	;# 
  3751  0093                     	;# 
  3752  0094                     	;# 
  3753  0097                     	;# 
  3754  009B                     	;# 
  3755  009B                     	;# 
  3756  009C                     	;# 
  3757  009D                     	;# 
  3758  009E                     	;# 
  3759  009F                     	;# 
  3760  010C                     	;# 
  3761  010D                     	;# 
  3762  010E                     	;# 
  3763  0111                     	;# 
  3764  0112                     	;# 
  3765  0113                     	;# 
  3766  0114                     	;# 
  3767  0115                     	;# 
  3768  0116                     	;# 
  3769  0117                     	;# 
  3770  0118                     	;# 
  3771  0119                     	;# 
  3772  018C                     	;# 
  3773  018D                     	;# 
  3774  018E                     	;# 
  3775  0197                     	;# 
  3776  0199                     	;# 
  3777  0199                     	;# 
  3778  0199                     	;# 
  3779  019A                     	;# 
  3780  019A                     	;# 
  3781  019A                     	;# 
  3782  019B                     	;# 
  3783  019B                     	;# 
  3784  019B                     	;# 
  3785  019B                     	;# 
  3786  019B                     	;# 
  3787  019C                     	;# 
  3788  019C                     	;# 
  3789  019C                     	;# 
  3790  019D                     	;# 
  3791  019D                     	;# 
  3792  019D                     	;# 
  3793  019E                     	;# 
  3794  019E                     	;# 
  3795  019E                     	;# 
  3796  019F                     	;# 
  3797  019F                     	;# 
  3798  019F                     	;# 
  3799  019F                     	;# 
  3800  019F                     	;# 
  3801  020C                     	;# 
  3802  020D                     	;# 
  3803  020E                     	;# 
  3804  0211                     	;# 
  3805  0211                     	;# 
  3806  0212                     	;# 
  3807  0212                     	;# 
  3808  0213                     	;# 
  3809  0213                     	;# 
  3810  0214                     	;# 
  3811  0214                     	;# 
  3812  0215                     	;# 
  3813  0215                     	;# 
  3814  0215                     	;# 
  3815  0215                     	;# 
  3816  0216                     	;# 
  3817  0216                     	;# 
  3818  0217                     	;# 
  3819  0217                     	;# 
  3820  0219                     	;# 
  3821  021A                     	;# 
  3822  021B                     	;# 
  3823  021C                     	;# 
  3824  021D                     	;# 
  3825  021D                     	;# 
  3826  021E                     	;# 
  3827  021F                     	;# 
  3828  028C                     	;# 
  3829  028D                     	;# 
  3830  028E                     	;# 
  3831  0291                     	;# 
  3832  0291                     	;# 
  3833  0292                     	;# 
  3834  0293                     	;# 
  3835  0294                     	;# 
  3836  0295                     	;# 
  3837  0295                     	;# 
  3838  0296                     	;# 
  3839  0297                     	;# 
  3840  0298                     	;# 
  3841  029F                     	;# 
  3842  030C                     	;# 
  3843  030D                     	;# 
  3844  030E                     	;# 
  3845  0311                     	;# 
  3846  0311                     	;# 
  3847  0312                     	;# 
  3848  0313                     	;# 
  3849  0314                     	;# 
  3850  0315                     	;# 
  3851  0315                     	;# 
  3852  0316                     	;# 
  3853  0317                     	;# 
  3854  0318                     	;# 
  3855  038C                     	;# 
  3856  038D                     	;# 
  3857  038E                     	;# 
  3858  0391                     	;# 
  3859  0392                     	;# 
  3860  0393                     	;# 
  3861  0394                     	;# 
  3862  0395                     	;# 
  3863  0396                     	;# 
  3864  0397                     	;# 
  3865  0398                     	;# 
  3866  0399                     	;# 
  3867  039A                     	;# 
  3868  039C                     	;# 
  3869  039D                     	;# 
  3870  039E                     	;# 
  3871  039F                     	;# 
  3872  0411                     	;# 
  3873  0411                     	;# 
  3874  0412                     	;# 
  3875  0413                     	;# 
  3876  0414                     	;# 
  3877  0415                     	;# 
  3878  0416                     	;# 
  3879  0417                     	;# 
  3880  0418                     	;# 
  3881  0418                     	;# 
  3882  0419                     	;# 
  3883  041A                     	;# 
  3884  041B                     	;# 
  3885  041C                     	;# 
  3886  041D                     	;# 
  3887  041E                     	;# 
  3888  041F                     	;# 
  3889  0498                     	;# 
  3890  0498                     	;# 
  3891  0499                     	;# 
  3892  049A                     	;# 
  3893  049B                     	;# 
  3894  049B                     	;# 
  3895  049C                     	;# 
  3896  049D                     	;# 
  3897  049E                     	;# 
  3898  049F                     	;# 
  3899  0617                     	;# 
  3900  0618                     	;# 
  3901  0619                     	;# 
  3902  0619                     	;# 
  3903  061A                     	;# 
  3904  061B                     	;# 
  3905  061C                     	;# 
  3906  061C                     	;# 
  3907  061F                     	;# 
  3908  0691                     	;# 
  3909  0692                     	;# 
  3910  0693                     	;# 
  3911  0694                     	;# 
  3912  0695                     	;# 
  3913  0696                     	;# 
  3914  0697                     	;# 
  3915  0698                     	;# 
  3916  0699                     	;# 
  3917  0711                     	;# 
  3918  0712                     	;# 
  3919  0713                     	;# 
  3920  0714                     	;# 
  3921  0715                     	;# 
  3922  0716                     	;# 
  3923  0717                     	;# 
  3924  0718                     	;# 
  3925  0719                     	;# 
  3926  0891                     	;# 
  3927  0891                     	;# 
  3928  0891                     	;# 
  3929  0891                     	;# 
  3930  0891                     	;# 
  3931  0891                     	;# 
  3932  0892                     	;# 
  3933  0892                     	;# 
  3934  0892                     	;# 
  3935  0893                     	;# 
  3936  0893                     	;# 
  3937  0893                     	;# 
  3938  0893                     	;# 
  3939  0893                     	;# 
  3940  0893                     	;# 
  3941  0894                     	;# 
  3942  0894                     	;# 
  3943  0894                     	;# 
  3944  0895                     	;# 
  3945  0895                     	;# 
  3946  0895                     	;# 
  3947  0896                     	;# 
  3948  0896                     	;# 
  3949  0896                     	;# 
  3950  089B                     	;# 
  3951  0911                     	;# 
  3952  0912                     	;# 
  3953  0913                     	;# 
  3954  0914                     	;# 
  3955  0915                     	;# 
  3956  0916                     	;# 
  3957  0918                     	;# 
  3958  0919                     	;# 
  3959  091A                     	;# 
  3960  091B                     	;# 
  3961  091C                     	;# 
  3962  091D                     	;# 
  3963  091E                     	;# 
  3964  091F                     	;# 
  3965  0E0F                     	;# 
  3966  0E10                     	;# 
  3967  0E11                     	;# 
  3968  0E12                     	;# 
  3969  0E13                     	;# 
  3970  0E14                     	;# 
  3971  0E15                     	;# 
  3972  0E16                     	;# 
  3973  0E17                     	;# 
  3974  0E18                     	;# 
  3975  0E19                     	;# 
  3976  0E1A                     	;# 
  3977  0E1B                     	;# 
  3978  0E1C                     	;# 
  3979  0E1D                     	;# 
  3980  0E1E                     	;# 
  3981  0E1F                     	;# 
  3982  0E20                     	;# 
  3983  0E21                     	;# 
  3984  0E22                     	;# 
  3985  0E24                     	;# 
  3986  0E25                     	;# 
  3987  0E28                     	;# 
  3988  0E29                     	;# 
  3989  0E2A                     	;# 
  3990  0E2B                     	;# 
  3991  0E2C                     	;# 
  3992  0E2D                     	;# 
  3993  0E2E                     	;# 
  3994  0E2F                     	;# 
  3995  0E90                     	;# 
  3996  0E91                     	;# 
  3997  0E92                     	;# 
  3998  0E94                     	;# 
  3999  0E95                     	;# 
  4000  0E9C                     	;# 
  4001  0E9D                     	;# 
  4002  0E9E                     	;# 
  4003  0E9F                     	;# 
  4004  0EA0                     	;# 
  4005  0EA1                     	;# 
  4006  0EA2                     	;# 
  4007  0EA3                     	;# 
  4008  0EA4                     	;# 
  4009  0EA5                     	;# 
  4010  0EA6                     	;# 
  4011  0EA7                     	;# 
  4012  0F0F                     	;# 
  4013  0F10                     	;# 
  4014  0F11                     	;# 
  4015  0F12                     	;# 
  4016  0F13                     	;# 
  4017  0F14                     	;# 
  4018  0F15                     	;# 
  4019  0F16                     	;# 
  4020  0F17                     	;# 
  4021  0F18                     	;# 
  4022  0F19                     	;# 
  4023  0F1A                     	;# 
  4024  0F1B                     	;# 
  4025  0F1C                     	;# 
  4026  0F1D                     	;# 
  4027  0F1E                     	;# 
  4028  0F1F                     	;# 
  4029  0F20                     	;# 
  4030  0F21                     	;# 
  4031  0F22                     	;# 
  4032  0F23                     	;# 
  4033  0F24                     	;# 
  4034  0F25                     	;# 
  4035  0F26                     	;# 
  4036  0F27                     	;# 
  4037  0F28                     	;# 
  4038  0F29                     	;# 
  4039  0F2A                     	;# 
  4040  0F2B                     	;# 
  4041  0F2C                     	;# 
  4042  0F2D                     	;# 
  4043  0F2E                     	;# 
  4044  0F2F                     	;# 
  4045  0F30                     	;# 
  4046  0F31                     	;# 
  4047  0F32                     	;# 
  4048  0F33                     	;# 
  4049  0F34                     	;# 
  4050  0F35                     	;# 
  4051  0F36                     	;# 
  4052  0F37                     	;# 
  4053  0FE4                     	;# 
  4054  0FE5                     	;# 
  4055  0FE6                     	;# 
  4056  0FE7                     	;# 
  4057  0FE8                     	;# 
  4058  0FE9                     	;# 
  4059  0FEA                     	;# 
  4060  0FEB                     	;# 
  4061  0FED                     	;# 
  4062  0FEE                     	;# 
  4063  0FEF                     	;# 
  4064  0000                     	;# 
  4065  0001                     	;# 
  4066  0002                     	;# 
  4067  0003                     	;# 
  4068  0004                     	;# 
  4069  0005                     	;# 
  4070  0006                     	;# 
  4071  0007                     	;# 
  4072  0008                     	;# 
  4073  0009                     	;# 
  4074  000A                     	;# 
  4075  000B                     	;# 
  4076  000C                     	;# 
  4077  000D                     	;# 
  4078  000E                     	;# 
  4079  0010                     	;# 
  4080  0011                     	;# 
  4081  0012                     	;# 
  4082  0013                     	;# 
  4083  0014                     	;# 
  4084  0015                     	;# 
  4085  0015                     	;# 
  4086  0016                     	;# 
  4087  0016                     	;# 
  4088  0017                     	;# 
  4089  0018                     	;# 
  4090  0019                     	;# 
  4091  0019                     	;# 
  4092  001A                     	;# 
  4093  001B                     	;# 
  4094  001C                     	;# 
  4095  001D                     	;# 
  4096  001E                     	;# 
  4097  001F                     	;# 
  4098  008C                     	;# 
  4099  008D                     	;# 
  4100  008E                     	;# 
  4101  0090                     	;# 
  4102  0091                     	;# 
  4103  0092                     	;# 
  4104  0093                     	;# 
  4105  0094                     	;# 
  4106  0097                     	;# 
  4107  009B                     	;# 
  4108  009B                     	;# 
  4109  009C                     	;# 
  4110  009D                     	;# 
  4111  009E                     	;# 
  4112  009F                     	;# 
  4113  010C                     	;# 
  4114  010D                     	;# 
  4115  010E                     	;# 
  4116  0111                     	;# 
  4117  0112                     	;# 
  4118  0113                     	;# 
  4119  0114                     	;# 
  4120  0115                     	;# 
  4121  0116                     	;# 
  4122  0117                     	;# 
  4123  0118                     	;# 
  4124  0119                     	;# 
  4125  018C                     	;# 
  4126  018D                     	;# 
  4127  018E                     	;# 
  4128  0197                     	;# 
  4129  0199                     	;# 
  4130  0199                     	;# 
  4131  0199                     	;# 
  4132  019A                     	;# 
  4133  019A                     	;# 
  4134  019A                     	;# 
  4135  019B                     	;# 
  4136  019B                     	;# 
  4137  019B                     	;# 
  4138  019B                     	;# 
  4139  019B                     	;# 
  4140  019C                     	;# 
  4141  019C                     	;# 
  4142  019C                     	;# 
  4143  019D                     	;# 
  4144  019D                     	;# 
  4145  019D                     	;# 
  4146  019E                     	;# 
  4147  019E                     	;# 
  4148  019E                     	;# 
  4149  019F                     	;# 
  4150  019F                     	;# 
  4151  019F                     	;# 
  4152  019F                     	;# 
  4153  019F                     	;# 
  4154  020C                     	;# 
  4155  020D                     	;# 
  4156  020E                     	;# 
  4157  0211                     	;# 
  4158  0211                     	;# 
  4159  0212                     	;# 
  4160  0212                     	;# 
  4161  0213                     	;# 
  4162  0213                     	;# 
  4163  0214                     	;# 
  4164  0214                     	;# 
  4165  0215                     	;# 
  4166  0215                     	;# 
  4167  0215                     	;# 
  4168  0215                     	;# 
  4169  0216                     	;# 
  4170  0216                     	;# 
  4171  0217                     	;# 
  4172  0217                     	;# 
  4173  0219                     	;# 
  4174  021A                     	;# 
  4175  021B                     	;# 
  4176  021C                     	;# 
  4177  021D                     	;# 
  4178  021D                     	;# 
  4179  021E                     	;# 
  4180  021F                     	;# 
  4181  028C                     	;# 
  4182  028D                     	;# 
  4183  028E                     	;# 
  4184  0291                     	;# 
  4185  0291                     	;# 
  4186  0292                     	;# 
  4187  0293                     	;# 
  4188  0294                     	;# 
  4189  0295                     	;# 
  4190  0295                     	;# 
  4191  0296                     	;# 
  4192  0297                     	;# 
  4193  0298                     	;# 
  4194  029F                     	;# 
  4195  030C                     	;# 
  4196  030D                     	;# 
  4197  030E                     	;# 
  4198  0311                     	;# 
  4199  0311                     	;# 
  4200  0312                     	;# 
  4201  0313                     	;# 
  4202  0314                     	;# 
  4203  0315                     	;# 
  4204  0315                     	;# 
  4205  0316                     	;# 
  4206  0317                     	;# 
  4207  0318                     	;# 
  4208  038C                     	;# 
  4209  038D                     	;# 
  4210  038E                     	;# 
  4211  0391                     	;# 
  4212  0392                     	;# 
  4213  0393                     	;# 
  4214  0394                     	;# 
  4215  0395                     	;# 
  4216  0396                     	;# 
  4217  0397                     	;# 
  4218  0398                     	;# 
  4219  0399                     	;# 
  4220  039A                     	;# 
  4221  039C                     	;# 
  4222  039D                     	;# 
  4223  039E                     	;# 
  4224  039F                     	;# 
  4225  0411                     	;# 
  4226  0411                     	;# 
  4227  0412                     	;# 
  4228  0413                     	;# 
  4229  0414                     	;# 
  4230  0415                     	;# 
  4231  0416                     	;# 
  4232  0417                     	;# 
  4233  0418                     	;# 
  4234  0418                     	;# 
  4235  0419                     	;# 
  4236  041A                     	;# 
  4237  041B                     	;# 
  4238  041C                     	;# 
  4239  041D                     	;# 
  4240  041E                     	;# 
  4241  041F                     	;# 
  4242  0498                     	;# 
  4243  0498                     	;# 
  4244  0499                     	;# 
  4245  049A                     	;# 
  4246  049B                     	;# 
  4247  049B                     	;# 
  4248  049C                     	;# 
  4249  049D                     	;# 
  4250  049E                     	;# 
  4251  049F                     	;# 
  4252  0617                     	;# 
  4253  0618                     	;# 
  4254  0619                     	;# 
  4255  0619                     	;# 
  4256  061A                     	;# 
  4257  061B                     	;# 
  4258  061C                     	;# 
  4259  061C                     	;# 
  4260  061F                     	;# 
  4261  0691                     	;# 
  4262  0692                     	;# 
  4263  0693                     	;# 
  4264  0694                     	;# 
  4265  0695                     	;# 
  4266  0696                     	;# 
  4267  0697                     	;# 
  4268  0698                     	;# 
  4269  0699                     	;# 
  4270  0711                     	;# 
  4271  0712                     	;# 
  4272  0713                     	;# 
  4273  0714                     	;# 
  4274  0715                     	;# 
  4275  0716                     	;# 
  4276  0717                     	;# 
  4277  0718                     	;# 
  4278  0719                     	;# 
  4279  0891                     	;# 
  4280  0891                     	;# 
  4281  0891                     	;# 
  4282  0891                     	;# 
  4283  0891                     	;# 
  4284  0891                     	;# 
  4285  0892                     	;# 
  4286  0892                     	;# 
  4287  0892                     	;# 
  4288  0893                     	;# 
  4289  0893                     	;# 
  4290  0893                     	;# 
  4291  0893                     	;# 
  4292  0893                     	;# 
  4293  0893                     	;# 
  4294  0894                     	;# 
  4295  0894                     	;# 
  4296  0894                     	;# 
  4297  0895                     	;# 
  4298  0895                     	;# 
  4299  0895                     	;# 
  4300  0896                     	;# 
  4301  0896                     	;# 
  4302  0896                     	;# 
  4303  089B                     	;# 
  4304  0911                     	;# 
  4305  0912                     	;# 
  4306  0913                     	;# 
  4307  0914                     	;# 
  4308  0915                     	;# 
  4309  0916                     	;# 
  4310  0918                     	;# 
  4311  0919                     	;# 
  4312  091A                     	;# 
  4313  091B                     	;# 
  4314  091C                     	;# 
  4315  091D                     	;# 
  4316  091E                     	;# 
  4317  091F                     	;# 
  4318  0E0F                     	;# 
  4319  0E10                     	;# 
  4320  0E11                     	;# 
  4321  0E12                     	;# 
  4322  0E13                     	;# 
  4323  0E14                     	;# 
  4324  0E15                     	;# 
  4325  0E16                     	;# 
  4326  0E17                     	;# 
  4327  0E18                     	;# 
  4328  0E19                     	;# 
  4329  0E1A                     	;# 
  4330  0E1B                     	;# 
  4331  0E1C                     	;# 
  4332  0E1D                     	;# 
  4333  0E1E                     	;# 
  4334  0E1F                     	;# 
  4335  0E20                     	;# 
  4336  0E21                     	;# 
  4337  0E22                     	;# 
  4338  0E24                     	;# 
  4339  0E25                     	;# 
  4340  0E28                     	;# 
  4341  0E29                     	;# 
  4342  0E2A                     	;# 
  4343  0E2B                     	;# 
  4344  0E2C                     	;# 
  4345  0E2D                     	;# 
  4346  0E2E                     	;# 
  4347  0E2F                     	;# 
  4348  0E90                     	;# 
  4349  0E91                     	;# 
  4350  0E92                     	;# 
  4351  0E94                     	;# 
  4352  0E95                     	;# 
  4353  0E9C                     	;# 
  4354  0E9D                     	;# 
  4355  0E9E                     	;# 
  4356  0E9F                     	;# 
  4357  0EA0                     	;# 
  4358  0EA1                     	;# 
  4359  0EA2                     	;# 
  4360  0EA3                     	;# 
  4361  0EA4                     	;# 
  4362  0EA5                     	;# 
  4363  0EA6                     	;# 
  4364  0EA7                     	;# 
  4365  0F0F                     	;# 
  4366  0F10                     	;# 
  4367  0F11                     	;# 
  4368  0F12                     	;# 
  4369  0F13                     	;# 
  4370  0F14                     	;# 
  4371  0F15                     	;# 
  4372  0F16                     	;# 
  4373  0F17                     	;# 
  4374  0F18                     	;# 
  4375  0F19                     	;# 
  4376  0F1A                     	;# 
  4377  0F1B                     	;# 
  4378  0F1C                     	;# 
  4379  0F1D                     	;# 
  4380  0F1E                     	;# 
  4381  0F1F                     	;# 
  4382  0F20                     	;# 
  4383  0F21                     	;# 
  4384  0F22                     	;# 
  4385  0F23                     	;# 
  4386  0F24                     	;# 
  4387  0F25                     	;# 
  4388  0F26                     	;# 
  4389  0F27                     	;# 
  4390  0F28                     	;# 
  4391  0F29                     	;# 
  4392  0F2A                     	;# 
  4393  0F2B                     	;# 
  4394  0F2C                     	;# 
  4395  0F2D                     	;# 
  4396  0F2E                     	;# 
  4397  0F2F                     	;# 
  4398  0F30                     	;# 
  4399  0F31                     	;# 
  4400  0F32                     	;# 
  4401  0F33                     	;# 
  4402  0F34                     	;# 
  4403  0F35                     	;# 
  4404  0F36                     	;# 
  4405  0F37                     	;# 
  4406  0FE4                     	;# 
  4407  0FE5                     	;# 
  4408  0FE6                     	;# 
  4409  0FE7                     	;# 
  4410  0FE8                     	;# 
  4411  0FE9                     	;# 
  4412  0FEA                     	;# 
  4413  0FEB                     	;# 
  4414  0FED                     	;# 
  4415  0FEE                     	;# 
  4416  0FEF                     	;# 
  4417  0000                     	;# 
  4418  0001                     	;# 
  4419  0002                     	;# 
  4420  0003                     	;# 
  4421  0004                     	;# 
  4422  0005                     	;# 
  4423  0006                     	;# 
  4424  0007                     	;# 
  4425  0008                     	;# 
  4426  0009                     	;# 
  4427  000A                     	;# 
  4428  000B                     	;# 
  4429  000C                     	;# 
  4430  000D                     	;# 
  4431  000E                     	;# 
  4432  0010                     	;# 
  4433  0011                     	;# 
  4434  0012                     	;# 
  4435  0013                     	;# 
  4436  0014                     	;# 
  4437  0015                     	;# 
  4438  0015                     	;# 
  4439  0016                     	;# 
  4440  0016                     	;# 
  4441  0017                     	;# 
  4442  0018                     	;# 
  4443  0019                     	;# 
  4444  0019                     	;# 
  4445  001A                     	;# 
  4446  001B                     	;# 
  4447  001C                     	;# 
  4448  001D                     	;# 
  4449  001E                     	;# 
  4450  001F                     	;# 
  4451  008C                     	;# 
  4452  008D                     	;# 
  4453  008E                     	;# 
  4454  0090                     	;# 
  4455  0091                     	;# 
  4456  0092                     	;# 
  4457  0093                     	;# 
  4458  0094                     	;# 
  4459  0097                     	;# 
  4460  009B                     	;# 
  4461  009B                     	;# 
  4462  009C                     	;# 
  4463  009D                     	;# 
  4464  009E                     	;# 
  4465  009F                     	;# 
  4466  010C                     	;# 
  4467  010D                     	;# 
  4468  010E                     	;# 
  4469  0111                     	;# 
  4470  0112                     	;# 
  4471  0113                     	;# 
  4472  0114                     	;# 
  4473  0115                     	;# 
  4474  0116                     	;# 
  4475  0117                     	;# 
  4476  0118                     	;# 
  4477  0119                     	;# 
  4478  018C                     	;# 
  4479  018D                     	;# 
  4480  018E                     	;# 
  4481  0197                     	;# 
  4482  0199                     	;# 
  4483  0199                     	;# 
  4484  0199                     	;# 
  4485  019A                     	;# 
  4486  019A                     	;# 
  4487  019A                     	;# 
  4488  019B                     	;# 
  4489  019B                     	;# 
  4490  019B                     	;# 
  4491  019B                     	;# 
  4492  019B                     	;# 
  4493  019C                     	;# 
  4494  019C                     	;# 
  4495  019C                     	;# 
  4496  019D                     	;# 
  4497  019D                     	;# 
  4498  019D                     	;# 
  4499  019E                     	;# 
  4500  019E                     	;# 
  4501  019E                     	;# 
  4502  019F                     	;# 
  4503  019F                     	;# 
  4504  019F                     	;# 
  4505  019F                     	;# 
  4506  019F                     	;# 
  4507  020C                     	;# 
  4508  020D                     	;# 
  4509  020E                     	;# 
  4510  0211                     	;# 
  4511  0211                     	;# 
  4512  0212                     	;# 
  4513  0212                     	;# 
  4514  0213                     	;# 
  4515  0213                     	;# 
  4516  0214                     	;# 
  4517  0214                     	;# 
  4518  0215                     	;# 
  4519  0215                     	;# 
  4520  0215                     	;# 
  4521  0215                     	;# 
  4522  0216                     	;# 
  4523  0216                     	;# 
  4524  0217                     	;# 
  4525  0217                     	;# 
  4526  0219                     	;# 
  4527  021A                     	;# 
  4528  021B                     	;# 
  4529  021C                     	;# 
  4530  021D                     	;# 
  4531  021D                     	;# 
  4532  021E                     	;# 
  4533  021F                     	;# 
  4534  028C                     	;# 
  4535  028D                     	;# 
  4536  028E                     	;# 
  4537  0291                     	;# 
  4538  0291                     	;# 
  4539  0292                     	;# 
  4540  0293                     	;# 
  4541  0294                     	;# 
  4542  0295                     	;# 
  4543  0295                     	;# 
  4544  0296                     	;# 
  4545  0297                     	;# 
  4546  0298                     	;# 
  4547  029F                     	;# 
  4548  030C                     	;# 
  4549  030D                     	;# 
  4550  030E                     	;# 
  4551  0311                     	;# 
  4552  0311                     	;# 
  4553  0312                     	;# 
  4554  0313                     	;# 
  4555  0314                     	;# 
  4556  0315                     	;# 
  4557  0315                     	;# 
  4558  0316                     	;# 
  4559  0317                     	;# 
  4560  0318                     	;# 
  4561  038C                     	;# 
  4562  038D                     	;# 
  4563  038E                     	;# 
  4564  0391                     	;# 
  4565  0392                     	;# 
  4566  0393                     	;# 
  4567  0394                     	;# 
  4568  0395                     	;# 
  4569  0396                     	;# 
  4570  0397                     	;# 
  4571  0398                     	;# 
  4572  0399                     	;# 
  4573  039A                     	;# 
  4574  039C                     	;# 
  4575  039D                     	;# 
  4576  039E                     	;# 
  4577  039F                     	;# 
  4578  0411                     	;# 
  4579  0411                     	;# 
  4580  0412                     	;# 
  4581  0413                     	;# 
  4582  0414                     	;# 
  4583  0415                     	;# 
  4584  0416                     	;# 
  4585  0417                     	;# 
  4586  0418                     	;# 
  4587  0418                     	;# 
  4588  0419                     	;# 
  4589  041A                     	;# 
  4590  041B                     	;# 
  4591  041C                     	;# 
  4592  041D                     	;# 
  4593  041E                     	;# 
  4594  041F                     	;# 
  4595  0498                     	;# 
  4596  0498                     	;# 
  4597  0499                     	;# 
  4598  049A                     	;# 
  4599  049B                     	;# 
  4600  049B                     	;# 
  4601  049C                     	;# 
  4602  049D                     	;# 
  4603  049E                     	;# 
  4604  049F                     	;# 
  4605  0617                     	;# 
  4606  0618                     	;# 
  4607  0619                     	;# 
  4608  0619                     	;# 
  4609  061A                     	;# 
  4610  061B                     	;# 
  4611  061C                     	;# 
  4612  061C                     	;# 
  4613  061F                     	;# 
  4614  0691                     	;# 
  4615  0692                     	;# 
  4616  0693                     	;# 
  4617  0694                     	;# 
  4618  0695                     	;# 
  4619  0696                     	;# 
  4620  0697                     	;# 
  4621  0698                     	;# 
  4622  0699                     	;# 
  4623  0711                     	;# 
  4624  0712                     	;# 
  4625  0713                     	;# 
  4626  0714                     	;# 
  4627  0715                     	;# 
  4628  0716                     	;# 
  4629  0717                     	;# 
  4630  0718                     	;# 
  4631  0719                     	;# 
  4632  0891                     	;# 
  4633  0891                     	;# 
  4634  0891                     	;# 
  4635  0891                     	;# 
  4636  0891                     	;# 
  4637  0891                     	;# 
  4638  0892                     	;# 
  4639  0892                     	;# 
  4640  0892                     	;# 
  4641  0893                     	;# 
  4642  0893                     	;# 
  4643  0893                     	;# 
  4644  0893                     	;# 
  4645  0893                     	;# 
  4646  0893                     	;# 
  4647  0894                     	;# 
  4648  0894                     	;# 
  4649  0894                     	;# 
  4650  0895                     	;# 
  4651  0895                     	;# 
  4652  0895                     	;# 
  4653  0896                     	;# 
  4654  0896                     	;# 
  4655  0896                     	;# 
  4656  089B                     	;# 
  4657  0911                     	;# 
  4658  0912                     	;# 
  4659  0913                     	;# 
  4660  0914                     	;# 
  4661  0915                     	;# 
  4662  0916                     	;# 
  4663  0918                     	;# 
  4664  0919                     	;# 
  4665  091A                     	;# 
  4666  091B                     	;# 
  4667  091C                     	;# 
  4668  091D                     	;# 
  4669  091E                     	;# 
  4670  091F                     	;# 
  4671  0E0F                     	;# 
  4672  0E10                     	;# 
  4673  0E11                     	;# 
  4674  0E12                     	;# 
  4675  0E13                     	;# 
  4676  0E14                     	;# 
  4677  0E15                     	;# 
  4678  0E16                     	;# 
  4679  0E17                     	;# 
  4680  0E18                     	;# 
  4681  0E19                     	;# 
  4682  0E1A                     	;# 
  4683  0E1B                     	;# 
  4684  0E1C                     	;# 
  4685  0E1D                     	;# 
  4686  0E1E                     	;# 
  4687  0E1F                     	;# 
  4688  0E20                     	;# 
  4689  0E21                     	;# 
  4690  0E22                     	;# 
  4691  0E24                     	;# 
  4692  0E25                     	;# 
  4693  0E28                     	;# 
  4694  0E29                     	;# 
  4695  0E2A                     	;# 
  4696  0E2B                     	;# 
  4697  0E2C                     	;# 
  4698  0E2D                     	;# 
  4699  0E2E                     	;# 
  4700  0E2F                     	;# 
  4701  0E90                     	;# 
  4702  0E91                     	;# 
  4703  0E92                     	;# 
  4704  0E94                     	;# 
  4705  0E95                     	;# 
  4706  0E9C                     	;# 
  4707  0E9D                     	;# 
  4708  0E9E                     	;# 
  4709  0E9F                     	;# 
  4710  0EA0                     	;# 
  4711  0EA1                     	;# 
  4712  0EA2                     	;# 
  4713  0EA3                     	;# 
  4714  0EA4                     	;# 
  4715  0EA5                     	;# 
  4716  0EA6                     	;# 
  4717  0EA7                     	;# 
  4718  0F0F                     	;# 
  4719  0F10                     	;# 
  4720  0F11                     	;# 
  4721  0F12                     	;# 
  4722  0F13                     	;# 
  4723  0F14                     	;# 
  4724  0F15                     	;# 
  4725  0F16                     	;# 
  4726  0F17                     	;# 
  4727  0F18                     	;# 
  4728  0F19                     	;# 
  4729  0F1A                     	;# 
  4730  0F1B                     	;# 
  4731  0F1C                     	;# 
  4732  0F1D                     	;# 
  4733  0F1E                     	;# 
  4734  0F1F                     	;# 
  4735  0F20                     	;# 
  4736  0F21                     	;# 
  4737  0F22                     	;# 
  4738  0F23                     	;# 
  4739  0F24                     	;# 
  4740  0F25                     	;# 
  4741  0F26                     	;# 
  4742  0F27                     	;# 
  4743  0F28                     	;# 
  4744  0F29                     	;# 
  4745  0F2A                     	;# 
  4746  0F2B                     	;# 
  4747  0F2C                     	;# 
  4748  0F2D                     	;# 
  4749  0F2E                     	;# 
  4750  0F2F                     	;# 
  4751  0F30                     	;# 
  4752  0F31                     	;# 
  4753  0F32                     	;# 
  4754  0F33                     	;# 
  4755  0F34                     	;# 
  4756  0F35                     	;# 
  4757  0F36                     	;# 
  4758  0F37                     	;# 
  4759  0FE4                     	;# 
  4760  0FE5                     	;# 
  4761  0FE6                     	;# 
  4762  0FE7                     	;# 
  4763  0FE8                     	;# 
  4764  0FE9                     	;# 
  4765  0FEA                     	;# 
  4766  0FEB                     	;# 
  4767  0FED                     	;# 
  4768  0FEE                     	;# 
  4769  0FEF                     	;# 
  4770  0000                     	;# 
  4771  0001                     	;# 
  4772  0002                     	;# 
  4773  0003                     	;# 
  4774  0004                     	;# 
  4775  0005                     	;# 
  4776  0006                     	;# 
  4777  0007                     	;# 
  4778  0008                     	;# 
  4779  0009                     	;# 
  4780  000A                     	;# 
  4781  000B                     	;# 
  4782  000C                     	;# 
  4783  000D                     	;# 
  4784  000E                     	;# 
  4785  0010                     	;# 
  4786  0011                     	;# 
  4787  0012                     	;# 
  4788  0013                     	;# 
  4789  0014                     	;# 
  4790  0015                     	;# 
  4791  0015                     	;# 
  4792  0016                     	;# 
  4793  0016                     	;# 
  4794  0017                     	;# 
  4795  0018                     	;# 
  4796  0019                     	;# 
  4797  0019                     	;# 
  4798  001A                     	;# 
  4799  001B                     	;# 
  4800  001C                     	;# 
  4801  001D                     	;# 
  4802  001E                     	;# 
  4803  001F                     	;# 
  4804  008C                     	;# 
  4805  008D                     	;# 
  4806  008E                     	;# 
  4807  0090                     	;# 
  4808  0091                     	;# 
  4809  0092                     	;# 
  4810  0093                     	;# 
  4811  0094                     	;# 
  4812  0097                     	;# 
  4813  009B                     	;# 
  4814  009B                     	;# 
  4815  009C                     	;# 
  4816  009D                     	;# 
  4817  009E                     	;# 
  4818  009F                     	;# 
  4819  010C                     	;# 
  4820  010D                     	;# 
  4821  010E                     	;# 
  4822  0111                     	;# 
  4823  0112                     	;# 
  4824  0113                     	;# 
  4825  0114                     	;# 
  4826  0115                     	;# 
  4827  0116                     	;# 
  4828  0117                     	;# 
  4829  0118                     	;# 
  4830  0119                     	;# 
  4831  018C                     	;# 
  4832  018D                     	;# 
  4833  018E                     	;# 
  4834  0197                     	;# 
  4835  0199                     	;# 
  4836  0199                     	;# 
  4837  0199                     	;# 
  4838  019A                     	;# 
  4839  019A                     	;# 
  4840  019A                     	;# 
  4841  019B                     	;# 
  4842  019B                     	;# 
  4843  019B                     	;# 
  4844  019B                     	;# 
  4845  019B                     	;# 
  4846  019C                     	;# 
  4847  019C                     	;# 
  4848  019C                     	;# 
  4849  019D                     	;# 
  4850  019D                     	;# 
  4851  019D                     	;# 
  4852  019E                     	;# 
  4853  019E                     	;# 
  4854  019E                     	;# 
  4855  019F                     	;# 
  4856  019F                     	;# 
  4857  019F                     	;# 
  4858  019F                     	;# 
  4859  019F                     	;# 
  4860  020C                     	;# 
  4861  020D                     	;# 
  4862  020E                     	;# 
  4863  0211                     	;# 
  4864  0211                     	;# 
  4865  0212                     	;# 
  4866  0212                     	;# 
  4867  0213                     	;# 
  4868  0213                     	;# 
  4869  0214                     	;# 
  4870  0214                     	;# 
  4871  0215                     	;# 
  4872  0215                     	;# 
  4873  0215                     	;# 
  4874  0215                     	;# 
  4875  0216                     	;# 
  4876  0216                     	;# 
  4877  0217                     	;# 
  4878  0217                     	;# 
  4879  0219                     	;# 
  4880  021A                     	;# 
  4881  021B                     	;# 
  4882  021C                     	;# 
  4883  021D                     	;# 
  4884  021D                     	;# 
  4885  021E                     	;# 
  4886  021F                     	;# 
  4887  028C                     	;# 
  4888  028D                     	;# 
  4889  028E                     	;# 
  4890  0291                     	;# 
  4891  0291                     	;# 
  4892  0292                     	;# 
  4893  0293                     	;# 
  4894  0294                     	;# 
  4895  0295                     	;# 
  4896  0295                     	;# 
  4897  0296                     	;# 
  4898  0297                     	;# 
  4899  0298                     	;# 
  4900  029F                     	;# 
  4901  030C                     	;# 
  4902  030D                     	;# 
  4903  030E                     	;# 
  4904  0311                     	;# 
  4905  0311                     	;# 
  4906  0312                     	;# 
  4907  0313                     	;# 
  4908  0314                     	;# 
  4909  0315                     	;# 
  4910  0315                     	;# 
  4911  0316                     	;# 
  4912  0317                     	;# 
  4913  0318                     	;# 
  4914  038C                     	;# 
  4915  038D                     	;# 
  4916  038E                     	;# 
  4917  0391                     	;# 
  4918  0392                     	;# 
  4919  0393                     	;# 
  4920  0394                     	;# 
  4921  0395                     	;# 
  4922  0396                     	;# 
  4923  0397                     	;# 
  4924  0398                     	;# 
  4925  0399                     	;# 
  4926  039A                     	;# 
  4927  039C                     	;# 
  4928  039D                     	;# 
  4929  039E                     	;# 
  4930  039F                     	;# 
  4931  0411                     	;# 
  4932  0411                     	;# 
  4933  0412                     	;# 
  4934  0413                     	;# 
  4935  0414                     	;# 
  4936  0415                     	;# 
  4937  0416                     	;# 
  4938  0417                     	;# 
  4939  0418                     	;# 
  4940  0418                     	;# 
  4941  0419                     	;# 
  4942  041A                     	;# 
  4943  041B                     	;# 
  4944  041C                     	;# 
  4945  041D                     	;# 
  4946  041E                     	;# 
  4947  041F                     	;# 
  4948  0498                     	;# 
  4949  0498                     	;# 
  4950  0499                     	;# 
  4951  049A                     	;# 
  4952  049B                     	;# 
  4953  049B                     	;# 
  4954  049C                     	;# 
  4955  049D                     	;# 
  4956  049E                     	;# 
  4957  049F                     	;# 
  4958  0617                     	;# 
  4959  0618                     	;# 
  4960  0619                     	;# 
  4961  0619                     	;# 
  4962  061A                     	;# 
  4963  061B                     	;# 
  4964  061C                     	;# 
  4965  061C                     	;# 
  4966  061F                     	;# 
  4967  0691                     	;# 
  4968  0692                     	;# 
  4969  0693                     	;# 
  4970  0694                     	;# 
  4971  0695                     	;# 
  4972  0696                     	;# 
  4973  0697                     	;# 
  4974  0698                     	;# 
  4975  0699                     	;# 
  4976  0711                     	;# 
  4977  0712                     	;# 
  4978  0713                     	;# 
  4979  0714                     	;# 
  4980  0715                     	;# 
  4981  0716                     	;# 
  4982  0717                     	;# 
  4983  0718                     	;# 
  4984  0719                     	;# 
  4985  0891                     	;# 
  4986  0891                     	;# 
  4987  0891                     	;# 
  4988  0891                     	;# 
  4989  0891                     	;# 
  4990  0891                     	;# 
  4991  0892                     	;# 
  4992  0892                     	;# 
  4993  0892                     	;# 
  4994  0893                     	;# 
  4995  0893                     	;# 
  4996  0893                     	;# 
  4997  0893                     	;# 
  4998  0893                     	;# 
  4999  0893                     	;# 
  5000  0894                     	;# 
  5001  0894                     	;# 
  5002  0894                     	;# 
  5003  0895                     	;# 
  5004  0895                     	;# 
  5005  0895                     	;# 
  5006  0896                     	;# 
  5007  0896                     	;# 
  5008  0896                     	;# 
  5009  089B                     	;# 
  5010  0911                     	;# 
  5011  0912                     	;# 
  5012  0913                     	;# 
  5013  0914                     	;# 
  5014  0915                     	;# 
  5015  0916                     	;# 
  5016  0918                     	;# 
  5017  0919                     	;# 
  5018  091A                     	;# 
  5019  091B                     	;# 
  5020  091C                     	;# 
  5021  091D                     	;# 
  5022  091E                     	;# 
  5023  091F                     	;# 
  5024  0E0F                     	;# 
  5025  0E10                     	;# 
  5026  0E11                     	;# 
  5027  0E12                     	;# 
  5028  0E13                     	;# 
  5029  0E14                     	;# 
  5030  0E15                     	;# 
  5031  0E16                     	;# 
  5032  0E17                     	;# 
  5033  0E18                     	;# 
  5034  0E19                     	;# 
  5035  0E1A                     	;# 
  5036  0E1B                     	;# 
  5037  0E1C                     	;# 
  5038  0E1D                     	;# 
  5039  0E1E                     	;# 
  5040  0E1F                     	;# 
  5041  0E20                     	;# 
  5042  0E21                     	;# 
  5043  0E22                     	;# 
  5044  0E24                     	;# 
  5045  0E25                     	;# 
  5046  0E28                     	;# 
  5047  0E29                     	;# 
  5048  0E2A                     	;# 
  5049  0E2B                     	;# 
  5050  0E2C                     	;# 
  5051  0E2D                     	;# 
  5052  0E2E                     	;# 
  5053  0E2F                     	;# 
  5054  0E90                     	;# 
  5055  0E91                     	;# 
  5056  0E92                     	;# 
  5057  0E94                     	;# 
  5058  0E95                     	;# 
  5059  0E9C                     	;# 
  5060  0E9D                     	;# 
  5061  0E9E                     	;# 
  5062  0E9F                     	;# 
  5063  0EA0                     	;# 
  5064  0EA1                     	;# 
  5065  0EA2                     	;# 
  5066  0EA3                     	;# 
  5067  0EA4                     	;# 
  5068  0EA5                     	;# 
  5069  0EA6                     	;# 
  5070  0EA7                     	;# 
  5071  0F0F                     	;# 
  5072  0F10                     	;# 
  5073  0F11                     	;# 
  5074  0F12                     	;# 
  5075  0F13                     	;# 
  5076  0F14                     	;# 
  5077  0F15                     	;# 
  5078  0F16                     	;# 
  5079  0F17                     	;# 
  5080  0F18                     	;# 
  5081  0F19                     	;# 
  5082  0F1A                     	;# 
  5083  0F1B                     	;# 
  5084  0F1C                     	;# 
  5085  0F1D                     	;# 
  5086  0F1E                     	;# 
  5087  0F1F                     	;# 
  5088  0F20                     	;# 
  5089  0F21                     	;# 
  5090  0F22                     	;# 
  5091  0F23                     	;# 
  5092  0F24                     	;# 
  5093  0F25                     	;# 
  5094  0F26                     	;# 
  5095  0F27                     	;# 
  5096  0F28                     	;# 
  5097  0F29                     	;# 
  5098  0F2A                     	;# 
  5099  0F2B                     	;# 
  5100  0F2C                     	;# 
  5101  0F2D                     	;# 
  5102  0F2E                     	;# 
  5103  0F2F                     	;# 
  5104  0F30                     	;# 
  5105  0F31                     	;# 
  5106  0F32                     	;# 
  5107  0F33                     	;# 
  5108  0F34                     	;# 
  5109  0F35                     	;# 
  5110  0F36                     	;# 
  5111  0F37                     	;# 
  5112  0FE4                     	;# 
  5113  0FE5                     	;# 
  5114  0FE6                     	;# 
  5115  0FE7                     	;# 
  5116  0FE8                     	;# 
  5117  0FE9                     	;# 
  5118  0FEA                     	;# 
  5119  0FEB                     	;# 
  5120  0FED                     	;# 
  5121  0FEE                     	;# 
  5122  0FEF                     	;# 
  5123                           
  5124                           	psect	idataBANK0
  5125  07FF                     __pidataBANK0:	
  5126                           
  5127                           ;initializer for _start
  5128  07FF  3401               	retlw	1
  5129                           
  5130                           	psect	idataBANK2
  5131  178B                     __pidataBANK2:	
  5132                           
  5133                           ;initializer for _names
  5134  178B  3400               	retlw	low (STR_1| (0+32768))
  5135  178C  3498               	retlw	high (STR_1| (0+32768))
  5136  178D  3430               	retlw	low (STR_2| (0+32768))
  5137  178E  3490               	retlw	high (STR_2| (0+32768))
  5138  178F  3420               	retlw	low (STR_3| (0+32768))
  5139  1790  3490               	retlw	high (STR_3| (0+32768))
  5140  1791  340C               	retlw	low (STR_4| (0+32768))
  5141  1792  3498               	retlw	high (STR_4| (0+32768))
  5142                           
  5143                           	psect	stringtext1
  5144  1000                     __pstringtext1:	
  5145  1000                     _fsmStateTable:	
  5146  1000  341C               	retlw	low _do_I2C_IDLE
  5147  1001  3417               	retlw	high _do_I2C_IDLE
  5148  1002  3463               	retlw	low _do_I2C_SEND_ADR_READ
  5149  1003  3417               	retlw	high _do_I2C_SEND_ADR_READ
  5150  1004  3446               	retlw	low _do_I2C_SEND_ADR_WRITE
  5151  1005  3417               	retlw	high _do_I2C_SEND_ADR_WRITE
  5152  1006  34D4               	retlw	low _do_I2C_TX
  5153  1007  340D               	retlw	high _do_I2C_TX
  5154  1008  34FD               	retlw	low _do_I2C_RX
  5155  1009  340C               	retlw	high _do_I2C_RX
  5156  100A  3427               	retlw	low _do_I2C_RCEN
  5157  100B  3417               	retlw	high _do_I2C_RCEN
  5158  100C  343A               	retlw	low _do_I2C_TX_EMPTY
  5159  100D  340B               	retlw	high _do_I2C_TX_EMPTY
  5160  100E  34F3               	retlw	low _do_I2C_SEND_RESTART_READ
  5161  100F  3416               	retlw	high _do_I2C_SEND_RESTART_READ
  5162  1010  34F7               	retlw	low _do_I2C_SEND_RESTART_WRITE
  5163  1011  3416               	retlw	high _do_I2C_SEND_RESTART_WRITE
  5164  1012  34FB               	retlw	low _do_I2C_SEND_RESTART
  5165  1013  3416               	retlw	high _do_I2C_SEND_RESTART
  5166  1014  34FF               	retlw	low _do_I2C_SEND_STOP
  5167  1015  3416               	retlw	high _do_I2C_SEND_STOP
  5168  1016  3403               	retlw	low _do_I2C_DO_ACK
  5169  1017  3417               	retlw	high _do_I2C_DO_ACK
  5170  1018  3407               	retlw	low _do_I2C_DO_NACK_STOP
  5171  1019  3417               	retlw	high _do_I2C_DO_NACK_STOP
  5172  101A  340B               	retlw	low _do_I2C_DO_NACK_RESTART
  5173  101B  3417               	retlw	high _do_I2C_DO_NACK_RESTART
  5174  101C  343F               	retlw	low _do_I2C_RESET
  5175  101D  3417               	retlw	high _do_I2C_RESET
  5176  101E  34E4               	retlw	low _do_I2C_DO_ADDRESS_NACK
  5177  101F  340A               	retlw	high _do_I2C_DO_ADDRESS_NACK
  5178  1020                     __end_of_fsmStateTable:	
  5179                           
  5180                           	psect	nvBANK0
  5181  006E                     __pnvBANK0:	
  5182  006E                     _eusartTxBufferRemaining:	
  5183  006E                     	ds	1
  5184                           
  5185                           	psect	nvBANK1
  5186  00EC                     __pnvBANK1:	
  5187  00EC                     _IOCAF4_InterruptHandler:	
  5188  00EC                     	ds	2
  5189  00EE                     _EUSART_TxDefaultInterruptHandler:	
  5190  00EE                     	ds	2
  5191                           
  5192                           	psect	nvBANK2
  5193  016E                     __pnvBANK2:	
  5194  016E                     _EUSART_RxDefaultInterruptHandler:	
  5195  016E                     	ds	2
  5196                           
  5197                           	psect	nvBANK3
  5198  01D5                     __pnvBANK3:	
  5199  01D5                     _EUSART_ErrorHandler:	
  5200  01D5                     	ds	2
  5201  01D7                     _EUSART_OverrunErrorHandler:	
  5202  01D7                     	ds	2
  5203  01D9                     _EUSART_FramingErrorHandler:	
  5204  01D9                     	ds	2
  5205  000E                     _PORTCbits	set	14
  5206  001F                     _T2CONbits	set	31
  5207  001F                     _T2CON	set	31
  5208  001D                     _TMR2	set	29
  5209  001E                     _PR2	set	30
  5210  0011                     _PIR1bits	set	17
  5211  000B                     _INTCONbits	set	11
  5212  0010                     _PIR0bits	set	16
  5213  009D                     _ADCON0bits	set	157
  5214  009C                     _ADRESH	set	156
  5215  009B                     _ADRESL	set	155
  5216  009F                     _ADACT	set	159
  5217  009E                     _ADCON1	set	158
  5218  009D                     _ADCON0	set	157
  5219  008E                     _TRISC	set	142
  5220  008D                     _TRISB	set	141
  5221  008C                     _TRISA	set	140
  5222  0097                     _WDTCON	set	151
  5223  0091                     _PIE1bits	set	145
  5224  0090                     _PIE0bits	set	144
  5225  010E                     _LATCbits	set	270
  5226  010E                     _LATC	set	270
  5227  010D                     _LATB	set	269
  5228  010C                     _LATA	set	268
  5229  0199                     _RC1REG	set	409
  5230  019D                     _RC1STAbits	set	413
  5231  019A                     _TX1REG	set	410
  5232  019E                     _TX1STAbits	set	414
  5233  019C                     _SP1BRGH	set	412
  5234  019B                     _SP1BRGL	set	411
  5235  019E                     _TX1STA	set	414
  5236  019D                     _RC1STA	set	413
  5237  019F                     _BAUD1CON	set	415
  5238  019A                     _TXREG1	set	410
  5239  019E                     _TXSTA1bits	set	414
  5240  018C                     _ANSELA	set	396
  5241  018D                     _ANSELB	set	397
  5242  018E                     _ANSELC	set	398
  5243  021C                     _SSP2STATbits	set	540
  5244  0219                     _SSP2BUF	set	537
  5245  021D                     _SSP2CON1bits	set	541
  5246  021A                     _SSP2ADD	set	538
  5247  021D                     _SSP2CON1	set	541
  5248  021C                     _SSP2STAT	set	540
  5249  0214                     _SSP1STATbits	set	532
  5250  0213                     _SSP1MSK	set	531
  5251  0211                     _SSP1BUF	set	529
  5252  0216                     _SSP1CON2bits	set	534
  5253  0212                     _SSP1ADD	set	530
  5254  0216                     _SSP1CON2	set	534
  5255  0215                     _SSP1CON1	set	533
  5256  0214                     _SSP1STAT	set	532
  5257  0215                     _SSP1CON1bits	set	533
  5258  020E                     _WPUC	set	526
  5259  020C                     _WPUA	set	524
  5260  020D                     _WPUB	set	525
  5261  0293                     _CCP1CONbits	set	659
  5262  029F                     _CCPTMRSbits	set	671
  5263  0291                     _CCPR1L	set	657
  5264  0292                     _CCPR1H	set	658
  5265  0293                     _CCP1CON	set	659
  5266  028E                     _ODCONC	set	654
  5267  028D                     _ODCONB	set	653
  5268  028C                     _ODCONA	set	652
  5269  030E                     _SLRCONC	set	782
  5270  030D                     _SLRCONB	set	781
  5271  030C                     _SLRCONA	set	780
  5272  0391                     _IOCAPbits	set	913
  5273  0392                     _IOCANbits	set	914
  5274  0393                     _IOCAFbits	set	915
  5275  0916                     _PMD5	set	2326
  5276  0915                     _PMD4	set	2325
  5277  0914                     _PMD3	set	2324
  5278  0913                     _PMD2	set	2323
  5279  0912                     _PMD1	set	2322
  5280  0911                     _PMD0	set	2321
  5281  091E                     _OSCTUNE	set	2334
  5282  091F                     _OSCFRQ	set	2335
  5283  091D                     _OSCEN	set	2333
  5284  091B                     _OSCCON3	set	2331
  5285  0919                     _OSCCON1	set	2329
  5286  0E1D                     _SSP2CLKPPS	set	3613
  5287  0E21                     _SSP1DATPPS	set	3617
  5288  0E20                     _SSP1CLKPPS	set	3616
  5289  0E1E                     _SSP2DATPPS	set	3614
  5290  0EA6                     _RC6PPS	set	3750
  5291  0EA5                     _RC5PPS	set	3749
  5292  0EA2                     _RC2PPS	set	3746
  5293  0E9F                     _RB7PPS	set	3743
  5294  0E9E                     _RB6PPS	set	3742
  5295  0E94                     _RA4PPS	set	3732
  5296                           
  5297                           	psect	stringtext2
  5298  1020                     __pstringtext2:	
  5299  1020                     STR_3:	
  5300  1020  3441               	retlw	65	;'A'
  5301  1021  346C               	retlw	108	;'l'
  5302  1022  3465               	retlw	101	;'e'
  5303  1023  3478               	retlw	120	;'x'
  5304  1024  3461               	retlw	97	;'a'
  5305  1025  346E               	retlw	110	;'n'
  5306  1026  3464               	retlw	100	;'d'
  5307  1027  3472               	retlw	114	;'r'
  5308  1028  3461               	retlw	97	;'a'
  5309  1029  3420               	retlw	32	;' '
  5310  102A  3446               	retlw	70	;'F'
  5311  102B  3479               	retlw	121	;'y'
  5312  102C  3466               	retlw	102	;'f'
  5313  102D  3466               	retlw	102	;'f'
  5314  102E  3465               	retlw	101	;'e'
  5315  102F  3400               	retlw	0
  5316                           
  5317                           	psect	stringtext3
  5318  1030                     __pstringtext3:	
  5319  1030                     STR_2:	
  5320  1030  344E               	retlw	78	;'N'
  5321  1031  346F               	retlw	111	;'o'
  5322  1032  3465               	retlw	101	;'e'
  5323  1033  346C               	retlw	108	;'l'
  5324  1034  346C               	retlw	108	;'l'
  5325  1035  3465               	retlw	101	;'e'
  5326  1036  3420               	retlw	32	;' '
  5327  1037  3443               	retlw	67	;'C'
  5328  1038  3472               	retlw	114	;'r'
  5329  1039  3461               	retlw	97	;'a'
  5330  103A  346E               	retlw	110	;'n'
  5331  103B  3465               	retlw	101	;'e'
  5332  103C  3400               	retlw	0
  5333                           
  5334                           	psect	stringtext4
  5335  1800                     __pstringtext4:	
  5336  1800                     STR_1:	
  5337  1800  344A               	retlw	74	;'J'
  5338  1801  3475               	retlw	117	;'u'
  5339  1802  3473               	retlw	115	;'s'
  5340  1803  3474               	retlw	116	;'t'
  5341  1804  3469               	retlw	105	;'i'
  5342  1805  346E               	retlw	110	;'n'
  5343  1806  3420               	retlw	32	;' '
  5344  1807  3443               	retlw	67	;'C'
  5345  1808  3468               	retlw	104	;'h'
  5346  1809  3461               	retlw	97	;'a'
  5347  180A  346E               	retlw	110	;'n'
  5348  180B  3400               	retlw	0
  5349                           
  5350                           	psect	stringtext5
  5351  180C                     __pstringtext5:	
  5352  180C                     STR_4:	
  5353  180C  344A               	retlw	74	;'J'
  5354  180D  3465               	retlw	101	;'e'
  5355  180E  3466               	retlw	102	;'f'
  5356  180F  3466               	retlw	102	;'f'
  5357  1810  3420               	retlw	32	;' '
  5358  1811  3447               	retlw	71	;'G'
  5359  1812  3465               	retlw	101	;'e'
  5360  1813  3469               	retlw	105	;'i'
  5361  1814  3473               	retlw	115	;'s'
  5362  1815  3473               	retlw	115	;'s'
  5363  1816  3400               	retlw	0
  5364                           
  5365                           	psect	stringtext6
  5366  0000                     __pstringtext6:	
  5367                           
  5368                           ; #config settings
  5369  0000                     
  5370                           	psect	cinit
  5371  0049                     start_initialization:	
  5372  0049                     __initialization:	
  5373                           
  5374                           ; Initialize objects allocated to BANK0
  5375  0049  3187  27FF  3180   	fcall	__pidataBANK0	;fetch initializer
  5376  004C  00EF               	movwf	__pdataBANK0& (0+127)
  5377                           
  5378                           ; Initialize objects allocated to BANK2
  5379  004D  308B               	movlw	low __pidataBANK2
  5380  004E  0084               	movwf	4
  5381  004F  3097               	movlw	(high __pidataBANK2)| (0+128)
  5382  0050  0085               	movwf	5
  5383  0051  3060               	movlw	low __pdataBANK2
  5384  0052  0086               	movwf	6
  5385  0053  3001               	movlw	high __pdataBANK2
  5386  0054  0087               	movwf	7
  5387  0055  3008               	movlw	8
  5388  0056  3197  2739  3180   	fcall	init_ram
  5389                           
  5390                           ; Clear objects allocated to COMMON
  5391  0059  01F0               	clrf	__pbssCOMMON& (0+127)
  5392  005A  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
  5393  005B  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
  5394  005C  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
  5395  005D  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
  5396  005E  01F5               	clrf	(__pbssCOMMON+5)& (0+127)
  5397                           
  5398                           ; Clear objects allocated to BANK0
  5399  005F  305C               	movlw	low __pbssBANK0
  5400  0060  0084               	movwf	4
  5401  0061  3000               	movlw	high __pbssBANK0
  5402  0062  0085               	movwf	5
  5403  0063  3012               	movlw	18
  5404  0064  3197  2733  3180   	fcall	clear_ram0
  5405                           
  5406                           ; Clear objects allocated to BANK1
  5407  0067  30E0               	movlw	low __pbssBANK1
  5408  0068  0084               	movwf	4
  5409  0069  3000               	movlw	high __pbssBANK1
  5410  006A  0085               	movwf	5
  5411  006B  300C               	movlw	12
  5412  006C  3197  2733  3180   	fcall	clear_ram0
  5413                           
  5414                           ; Clear objects allocated to BANK2
  5415  006F  0022               	movlb	2	; select bank2
  5416  0070  01E8               	clrf	__pbssBANK2& (0+127)
  5417  0071  01E9               	clrf	(__pbssBANK2+1)& (0+127)
  5418  0072  01EA               	clrf	(__pbssBANK2+2)& (0+127)
  5419  0073  01EB               	clrf	(__pbssBANK2+3)& (0+127)
  5420  0074  01EC               	clrf	(__pbssBANK2+4)& (0+127)
  5421  0075  01ED               	clrf	(__pbssBANK2+5)& (0+127)
  5422                           
  5423                           ; Clear objects allocated to BANK3
  5424  0076  30A0               	movlw	low __pbssBANK3
  5425  0077  0084               	movwf	4
  5426  0078  3001               	movlw	high __pbssBANK3
  5427  0079  0085               	movwf	5
  5428  007A  3035               	movlw	53
  5429  007B  3197  2733  3180   	fcall	clear_ram0
  5430                           
  5431                           ; Clear objects allocated to BANK4
  5432  007E  3020               	movlw	low __pbssBANK4
  5433  007F  0084               	movwf	4
  5434  0080  3002               	movlw	high __pbssBANK4
  5435  0081  0085               	movwf	5
  5436  0082  3044               	movlw	68
  5437  0083  3197  2733         	fcall	clear_ram0
  5438  0085                     end_of_initialization:	
  5439                           ;End of C runtime variable initialization code
  5440                           
  5441  0085                     __end_of__initialization:	
  5442  0085  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  5443  0086  0020               	movlb	0
  5444  0087  318D  2D43         	ljmp	_main	;jump to C main() function
  5445                           
  5446                           	psect	bssCOMMON
  5447  0070                     __pbssCOMMON:	
  5448  0070                     _eusartRxCount:	
  5449  0070                     	ds	1
  5450  0071                     _eusartRxTail:	
  5451  0071                     	ds	1
  5452  0072                     _eusartRxHead:	
  5453  0072                     	ds	1
  5454  0073                     _eusartTxTail:	
  5455  0073                     	ds	1
  5456  0074                     _eusartTxHead:	
  5457  0074                     	ds	1
  5458  0075                     _handleGestureFlag:	
  5459  0075                     	ds	1
  5460                           
  5461                           	psect	bssBANK0
  5462  005C                     __pbssBANK0:	
  5463  005C                     _on:	
  5464  005C                     	ds	2
  5465  005E                     _brightness:	
  5466  005E                     	ds	2
  5467  0060                     _name:	
  5468  0060                     	ds	2
  5469  0062                     _gesture_lr_count_:	
  5470  0062                     	ds	2
  5471  0064                     _gesture_ud_count_:	
  5472  0064                     	ds	2
  5473  0066                     _gesture_lr_delta_:	
  5474  0066                     	ds	2
  5475  0068                     _gesture_ud_delta_:	
  5476  0068                     	ds	2
  5477  006A                     _eusartRxLastError:	
  5478  006A                     	ds	1
  5479  006B                     _b_i2c_error_flag:	
  5480  006B                     	ds	1
  5481  006C                     _adcResult:	
  5482  006C                     	ds	1
  5483  006D                     _printed:	
  5484  006D                     	ds	1
  5485                           
  5486                           	psect	dataBANK0
  5487  006F                     __pdataBANK0:	
  5488  006F                     _start:	
  5489  006F                     	ds	1
  5490                           
  5491                           	psect	bssBANK1
  5492  00E0                     __pbssBANK1:	
  5493  00E0                     _prox:	
  5494  00E0                     	ds	2
  5495  00E2                     _gesture_state_:	
  5496  00E2                     	ds	2
  5497  00E4                     _gesture_far_count_:	
  5498  00E4                     	ds	2
  5499  00E6                     _gesture_near_count_:	
  5500  00E6                     	ds	2
  5501  00E8                     _i2c1_driver_i2cISR:	
  5502  00E8                     	ds	2
  5503  00EA                     _i2c1_driver_busCollisionISR:	
  5504  00EA                     	ds	2
  5505                           
  5506                           	psect	bssBANK2
  5507  0168                     __pbssBANK2:	
  5508  0168                     UART_Byte@F7545:	
  5509  0168                     	ds	4
  5510  016C                     _gesture_motion_:	
  5511  016C                     	ds	2
  5512                           
  5513                           	psect	dataBANK2
  5514  0160                     __pdataBANK2:	
  5515  0160                     _names:	
  5516  0160                     	ds	8
  5517                           
  5518                           	psect	bssBANK3
  5519  01A0                     __pbssBANK3:	
  5520  01A0                     _i2c_status:	
  5521  01A0                     	ds	29
  5522  01BD                     _eusartRxStatusBuffer:	
  5523  01BD                     	ds	8
  5524  01C5                     _eusartRxBuffer:	
  5525  01C5                     	ds	8
  5526  01CD                     _eusartTxBuffer:	
  5527  01CD                     	ds	8
  5528                           
  5529                           	psect	bssBANK4
  5530  0220                     __pbssBANK4:	
  5531  0220                     _gesture_data_:	
  5532  0220                     	ds	68
  5533                           
  5534                           	psect	inittext
  5535  1739                     init_ram:	
  5536  1739  00FE               	movwf	126
  5537  173A                     initloop:	
  5538  173A  0012               	moviw fsr0++
  5539  173B  001E               	movwi fsr1++
  5540  173C  0BFE               	decfsz	126,f
  5541  173D  2F3A               	goto	initloop
  5542  173E  3400               	retlw	0
  5543                           
  5544                           	psect	clrtext
  5545  1733                     clear_ram0:	
  5546                           ;	Called with FSR0 containing the base address, and
  5547                           ;	WREG with the size to clear
  5548                           
  5549  1733  0064               	clrwdt	;clear the watchdog before getting into this loop
  5550  1734                     clrloop0:	
  5551  1734  0180               	clrf	0	;clear RAM location pointed to by FSR
  5552  1735  3101               	addfsr 0,1
  5553  1736  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  5554  1737  2F34               	goto	clrloop0	;have we reached the end yet?
  5555  1738  3400               	retlw	0	;all done for this memory range, return
  5556                           
  5557                           	psect	cstackBANK2
  5558  0120                     __pcstackBANK2:	
  5559  0120                     readGesture@fifo_data:	
  5560                           
  5561                           ; 64 bytes @ 0x0
  5562  0120                     	ds	64
  5563                           
  5564                           	psect	cstackBANK1
  5565  00A0                     __pcstackBANK1:	
  5566  00A0                     readGesture@fifo_data2:	
  5567                           
  5568                           ; 64 bytes @ 0x0
  5569  00A0                     	ds	64
  5570                           
  5571                           	psect	cstackCOMMON
  5572  0076                     __pcstackCOMMON:	
  5573  0076                     ?_i2c1_driver_open:	
  5574  0076                     ?_i2c1_driver_isNACK:	
  5575                           ; 1 bit 
  5576                           
  5577  0076                     ?_i2c1_driver_isBufferFull:	
  5578                           ; 1 bit 
  5579                           
  5580  0076                     ?_returnStop:	
  5581                           ; 1 bit 
  5582                           
  5583  0076                     ?_returnReset:	
  5584                           ; 1 bytes @ 0x0
  5585                           
  5586  0076                     ?_mssp1_clearIRQ:	
  5587                           ; 1 bytes @ 0x0
  5588                           
  5589  0076                     ??_mssp1_clearIRQ:	
  5590                           ; 1 bytes @ 0x0
  5591                           
  5592  0076                     ?_i2c_busCollisionISR:	
  5593                           ; 1 bytes @ 0x0
  5594                           
  5595  0076                     ??_i2c_busCollisionISR:	
  5596                           ; 1 bytes @ 0x0
  5597                           
  5598  0076                     ?_i2c_ISR:	
  5599                           ; 1 bytes @ 0x0
  5600                           
  5601  0076                     ?_i2c1_driver_start:	
  5602                           ; 1 bytes @ 0x0
  5603                           
  5604  0076                     ?_i2c1_driver_resetBus:	
  5605                           ; 1 bytes @ 0x0
  5606                           
  5607  0076                     ??_i2c1_driver_resetBus:	
  5608                           ; 1 bytes @ 0x0
  5609                           
  5610  0076                     ?_i2c1_driver_restart:	
  5611                           ; 1 bytes @ 0x0
  5612                           
  5613  0076                     ?_i2c1_driver_stop:	
  5614                           ; 1 bytes @ 0x0
  5615                           
  5616  0076                     ?_i2c1_driver_TXData:	
  5617                           ; 1 bytes @ 0x0
  5618                           
  5619  0076                     ?_i2c1_driver_startRX:	
  5620                           ; 1 bytes @ 0x0
  5621                           
  5622  0076                     ?_i2c1_driver_sendACK:	
  5623                           ; 1 bytes @ 0x0
  5624                           
  5625  0076                     ??_i2c1_driver_sendACK:	
  5626                           ; 1 bytes @ 0x0
  5627                           
  5628  0076                     ?_i2c1_driver_sendNACK:	
  5629                           ; 1 bytes @ 0x0
  5630                           
  5631  0076                     ??_i2c1_driver_isNACK:	
  5632                           ; 1 bytes @ 0x0
  5633                           
  5634  0076                     ?_i2c1_driver_getRXData:	
  5635                           ; 1 bytes @ 0x0
  5636                           
  5637  0076                     ?_mssp1_setIRQ:	
  5638                           ; 1 bytes @ 0x0
  5639                           
  5640  0076                     ??_mssp1_setIRQ:	
  5641                           ; 1 bytes @ 0x0
  5642                           
  5643  0076                     ?_i2c1_driver_clearBusCollision:	
  5644                           ; 1 bytes @ 0x0
  5645                           
  5646  0076                     ??_i2c1_driver_clearBusCollision:	
  5647                           ; 1 bytes @ 0x0
  5648                           
  5649  0076                     ?_PIN_MANAGER_IOC:	
  5650                           ; 1 bytes @ 0x0
  5651                           
  5652  0076                     ??_PIN_MANAGER_IOC:	
  5653                           ; 1 bytes @ 0x0
  5654                           
  5655  0076                     ?_PMD_Initialize:	
  5656                           ; 1 bytes @ 0x0
  5657                           
  5658  0076                     ?_PIN_MANAGER_Initialize:	
  5659                           ; 1 bytes @ 0x0
  5660                           
  5661  0076                     ?_OSCILLATOR_Initialize:	
  5662                           ; 1 bytes @ 0x0
  5663                           
  5664  0076                     ?_WDT_Initialize:	
  5665                           ; 1 bytes @ 0x0
  5666                           
  5667  0076                     ?_SPI2_Initialize:	
  5668                           ; 1 bytes @ 0x0
  5669                           
  5670  0076                     ?_PWM1_Initialize:	
  5671                           ; 1 bytes @ 0x0
  5672                           
  5673  0076                     ?_ADC_Initialize:	
  5674                           ; 1 bytes @ 0x0
  5675                           
  5676  0076                     ?_TMR2_Initialize:	
  5677                           ; 1 bytes @ 0x0
  5678                           
  5679  0076                     ?_EUSART_Initialize:	
  5680                           ; 1 bytes @ 0x0
  5681                           
  5682  0076                     ?_IOCAF4_DefaultInterruptHandler:	
  5683                           ; 1 bytes @ 0x0
  5684                           
  5685  0076                     ??_IOCAF4_DefaultInterruptHandler:	
  5686                           ; 1 bytes @ 0x0
  5687                           
  5688  0076                     ?_IOCAF4_ISR:	
  5689                           ; 1 bytes @ 0x0
  5690                           
  5691  0076                     ??_IOCAF4_ISR:	
  5692                           ; 1 bytes @ 0x0
  5693                           
  5694  0076                     ?_Display_Clear:	
  5695                           ; 1 bytes @ 0x0
  5696                           
  5697  0076                     ?_PIR_Sensor:	
  5698                           ; 1 bytes @ 0x0
  5699                           
  5700  0076                     ?_initialize:	
  5701                           ; 1 bytes @ 0x0
  5702                           
  5703  0076                     ?_enableGestureSensor:	
  5704                           ; 1 bytes @ 0x0
  5705                           
  5706  0076                     ?_UART_Byte:	
  5707                           ; 1 bytes @ 0x0
  5708                           
  5709  0076                     ?_Get_ADC:	
  5710                           ; 1 bytes @ 0x0
  5711                           
  5712  0076                     ?_isGestureAvailable:	
  5713                           ; 1 bytes @ 0x0
  5714                           
  5715  0076                     ?_handleGesture:	
  5716                           ; 1 bytes @ 0x0
  5717                           
  5718  0076                     ?_wireReadDataByte:	
  5719                           ; 1 bytes @ 0x0
  5720                           
  5721  0076                     ?_setLEDDrive:	
  5722                           ; 1 bytes @ 0x0
  5723                           
  5724  0076                     ?_setProximityGain:	
  5725                           ; 1 bytes @ 0x0
  5726                           
  5727  0076                     ?_setAmbientLightGain:	
  5728                           ; 1 bytes @ 0x0
  5729                           
  5730  0076                     ?_setProxIntLowThresh:	
  5731                           ; 1 bytes @ 0x0
  5732                           
  5733  0076                     ?_setProxIntHighThresh:	
  5734                           ; 1 bytes @ 0x0
  5735                           
  5736  0076                     ?_setGestureEnterThresh:	
  5737                           ; 1 bytes @ 0x0
  5738                           
  5739  0076                     ?_setGestureExitThresh:	
  5740                           ; 1 bytes @ 0x0
  5741                           
  5742  0076                     ?_setGestureGain:	
  5743                           ; 1 bytes @ 0x0
  5744                           
  5745  0076                     ?_setGestureLEDDrive:	
  5746                           ; 1 bytes @ 0x0
  5747                           
  5748  0076                     ?_setGestureWaitTime:	
  5749                           ; 1 bytes @ 0x0
  5750                           
  5751  0076                     ?_setGestureIntEnable:	
  5752                           ; 1 bytes @ 0x0
  5753                           
  5754  0076                     ?_getMode:	
  5755                           ; 1 bytes @ 0x0
  5756                           
  5757  0076                     ?_resetGestureParameters:	
  5758                           ; 1 bytes @ 0x0
  5759                           
  5760  0076                     ?_setLEDBoost:	
  5761                           ; 1 bytes @ 0x0
  5762                           
  5763  0076                     ?_setGestureMode:	
  5764                           ; 1 bytes @ 0x0
  5765                           
  5766  0076                     ?_enablePower:	
  5767                           ; 1 bytes @ 0x0
  5768                           
  5769  0076                     ?_processGestureData:	
  5770                           ; 1 bytes @ 0x0
  5771                           
  5772  0076                     ?_decodeGesture:	
  5773                           ; 1 bytes @ 0x0
  5774                           
  5775  0076                     ?_I2C_Start:	
  5776                           ; 1 bytes @ 0x0
  5777                           
  5778  0076                     ?_I2C_Write_Byte:	
  5779                           ; 1 bytes @ 0x0
  5780                           
  5781  0076                     ?_I2C_ReStart:	
  5782                           ; 1 bytes @ 0x0
  5783                           
  5784  0076                     ?_I2C_Read_Byte:	
  5785                           ; 1 bytes @ 0x0
  5786                           
  5787  0076                     ?_I2C_Send_NACK:	
  5788                           ; 1 bytes @ 0x0
  5789                           
  5790  0076                     ?_I2C_Stop:	
  5791                           ; 1 bytes @ 0x0
  5792                           
  5793  0076                     ?_EUSART_Receive_ISR:	
  5794                           ; 1 bytes @ 0x0
  5795                           
  5796  0076                     ?_EUSART_Transmit_ISR:	
  5797                           ; 1 bytes @ 0x0
  5798                           
  5799  0076                     ??_EUSART_Transmit_ISR:	
  5800                           ; 1 bytes @ 0x0
  5801                           
  5802  0076                     ?_EUSART_DefaultFramingErrorHandler:	
  5803                           ; 1 bytes @ 0x0
  5804                           
  5805  0076                     ??_EUSART_DefaultFramingErrorHandler:	
  5806                           ; 1 bytes @ 0x0
  5807                           
  5808  0076                     ?_EUSART_DefaultOverrunErrorHandler:	
  5809                           ; 1 bytes @ 0x0
  5810                           
  5811  0076                     ??_EUSART_DefaultOverrunErrorHandler:	
  5812                           ; 1 bytes @ 0x0
  5813                           
  5814  0076                     ?_EUSART_DefaultErrorHandler:	
  5815                           ; 1 bytes @ 0x0
  5816                           
  5817  0076                     ?_EUSART_RxDataHandler:	
  5818                           ; 1 bytes @ 0x0
  5819                           
  5820  0076                     ??_EUSART_RxDataHandler:	
  5821                           ; 1 bytes @ 0x0
  5822                           
  5823  0076                     ?_do_I2C_RESET:	
  5824                           ; 1 bytes @ 0x0
  5825                           
  5826  0076                     ??_do_I2C_RESET:	
  5827                           ; 1 bytes @ 0x0
  5828                           
  5829  0076                     ?_do_I2C_IDLE:	
  5830                           ; 1 bytes @ 0x0
  5831                           
  5832  0076                     ??_do_I2C_IDLE:	
  5833                           ; 1 bytes @ 0x0
  5834                           
  5835  0076                     ?_do_I2C_SEND_RESTART_READ:	
  5836                           ; 1 bytes @ 0x0
  5837                           
  5838  0076                     ??_do_I2C_SEND_RESTART_READ:	
  5839                           ; 1 bytes @ 0x0
  5840                           
  5841  0076                     ?_do_I2C_SEND_RESTART_WRITE:	
  5842                           ; 1 bytes @ 0x0
  5843                           
  5844  0076                     ??_do_I2C_SEND_RESTART_WRITE:	
  5845                           ; 1 bytes @ 0x0
  5846                           
  5847  0076                     ?_do_I2C_SEND_RESTART:	
  5848                           ; 1 bytes @ 0x0
  5849                           
  5850  0076                     ??_do_I2C_SEND_RESTART:	
  5851                           ; 1 bytes @ 0x0
  5852                           
  5853  0076                     ?_do_I2C_SEND_STOP:	
  5854                           ; 1 bytes @ 0x0
  5855                           
  5856  0076                     ??_do_I2C_SEND_STOP:	
  5857                           ; 1 bytes @ 0x0
  5858                           
  5859  0076                     ?_do_I2C_SEND_ADR_READ:	
  5860                           ; 1 bytes @ 0x0
  5861                           
  5862  0076                     ??_do_I2C_SEND_ADR_READ:	
  5863                           ; 1 bytes @ 0x0
  5864                           
  5865  0076                     ?_do_I2C_SEND_ADR_WRITE:	
  5866                           ; 1 bytes @ 0x0
  5867                           
  5868  0076                     ??_do_I2C_SEND_ADR_WRITE:	
  5869                           ; 1 bytes @ 0x0
  5870                           
  5871  0076                     ?_do_I2C_RCEN:	
  5872                           ; 1 bytes @ 0x0
  5873                           
  5874  0076                     ??_do_I2C_RCEN:	
  5875                           ; 1 bytes @ 0x0
  5876                           
  5877  0076                     ?_do_I2C_DO_ACK:	
  5878                           ; 1 bytes @ 0x0
  5879                           
  5880  0076                     ??_do_I2C_DO_ACK:	
  5881                           ; 1 bytes @ 0x0
  5882                           
  5883  0076                     ?_do_I2C_DO_NACK_STOP:	
  5884                           ; 1 bytes @ 0x0
  5885                           
  5886  0076                     ??_do_I2C_DO_NACK_STOP:	
  5887                           ; 1 bytes @ 0x0
  5888                           
  5889  0076                     ?_do_I2C_DO_NACK_RESTART:	
  5890                           ; 1 bytes @ 0x0
  5891                           
  5892  0076                     ??_do_I2C_DO_NACK_RESTART:	
  5893                           ; 1 bytes @ 0x0
  5894                           
  5895  0076                     ?_do_I2C_DO_ADDRESS_NACK:	
  5896                           ; 1 bytes @ 0x0
  5897                           
  5898  0076                     ??_do_I2C_DO_ADDRESS_NACK:	
  5899                           ; 1 bytes @ 0x0
  5900                           
  5901  0076                     ?_do_I2C_TX:	
  5902                           ; 1 bytes @ 0x0
  5903                           
  5904  0076                     ??_do_I2C_TX:	
  5905                           ; 1 bytes @ 0x0
  5906                           
  5907  0076                     ?_do_I2C_RX:	
  5908                           ; 1 bytes @ 0x0
  5909                           
  5910  0076                     ??_do_I2C_RX:	
  5911                           ; 1 bytes @ 0x0
  5912                           
  5913  0076                     ?_do_I2C_TX_EMPTY:	
  5914                           ; 1 bytes @ 0x0
  5915                           
  5916  0076                     ??_do_I2C_TX_EMPTY:	
  5917                           ; 1 bytes @ 0x0
  5918                           
  5919  0076                     ?_INTERRUPT_InterruptManager:	
  5920                           ; 1 bytes @ 0x0
  5921                           
  5922  0076                     ?_SYSTEM_Initialize:	
  5923                           ; 1 bytes @ 0x0
  5924                           
  5925  0076                     ?_SPI2_Exchange8bit:	
  5926                           ; 1 bytes @ 0x0
  5927                           
  5928  0076                     ?_main:	
  5929                           ; 1 bytes @ 0x0
  5930                           
  5931  0076                     ?_SPI_Write:	
  5932                           ; 1 bytes @ 0x0
  5933                           
  5934  0076                     ?i1_i2c1_driver_restart:	
  5935                           ; 1 bytes @ 0x0
  5936                           
  5937  0076                     ??i1_i2c1_driver_restart:	
  5938                           ; 1 bytes @ 0x0
  5939                           
  5940  0076                     ?i1_i2c1_driver_stop:	
  5941                           ; 1 bytes @ 0x0
  5942                           
  5943  0076                     ??i1_i2c1_driver_stop:	
  5944                           ; 1 bytes @ 0x0
  5945                           
  5946  0076                     ?i1_i2c1_driver_startRX:	
  5947                           ; 1 bytes @ 0x0
  5948                           
  5949  0076                     ??i1_i2c1_driver_startRX:	
  5950                           ; 1 bytes @ 0x0
  5951                           
  5952  0076                     ?i1_i2c1_driver_getRXData:	
  5953                           ; 1 bytes @ 0x0
  5954                           
  5955  0076                     ??i1_i2c1_driver_getRXData:	
  5956                           ; 1 bytes @ 0x0
  5957                           
  5958  0076                     ?i1_i2c1_driver_TXData:	
  5959                           ; 1 bytes @ 0x0
  5960                           
  5961  0076                     ??i1_i2c1_driver_TXData:	
  5962                           ; 1 bytes @ 0x0
  5963                           
  5964  0076                     ?i1_i2c1_driver_sendNACK:	
  5965                           ; 1 bytes @ 0x0
  5966                           
  5967  0076                     ??i1_i2c1_driver_sendNACK:	
  5968                           ; 1 bytes @ 0x0
  5969                           
  5970  0076                     returnStop@p:	
  5971                           ; 1 bytes @ 0x0
  5972                           
  5973  0076                     returnReset@p:	
  5974                           ; 1 bytes @ 0x0
  5975                           
  5976  0076                     i1i2c1_driver_TXData@d:	
  5977                           ; 1 bytes @ 0x0
  5978                           
  5979                           
  5980                           ; 1 bytes @ 0x0
  5981  0076                     	ds	1
  5982  0077                     ??_returnStop:	
  5983  0077                     ??_returnReset:	
  5984                           ; 1 bytes @ 0x1
  5985                           
  5986  0077                     ??_EUSART_Receive_ISR:	
  5987                           ; 1 bytes @ 0x1
  5988                           
  5989  0077                     ??_EUSART_DefaultErrorHandler:	
  5990                           ; 1 bytes @ 0x1
  5991                           
  5992                           
  5993                           ; 1 bytes @ 0x1
  5994  0077                     	ds	2
  5995  0079                     ??_i2c_ISR:	
  5996                           
  5997                           ; 1 bytes @ 0x3
  5998  0079                     	ds	3
  5999  007C                     ??_INTERRUPT_InterruptManager:	
  6000                           
  6001                           	psect	cstackBANK0
  6002  0020                     __pcstackBANK0:	
  6003                           ; 1 bytes @ 0x6
  6004                           
  6005  0020                     ??_i2c1_driver_open:	
  6006  0020                     ??_i2c1_driver_start:	
  6007                           ; 1 bytes @ 0x0
  6008                           
  6009  0020                     ??_i2c1_driver_restart:	
  6010                           ; 1 bytes @ 0x0
  6011                           
  6012  0020                     ??_i2c1_driver_stop:	
  6013                           ; 1 bytes @ 0x0
  6014                           
  6015  0020                     ??_i2c1_driver_TXData:	
  6016                           ; 1 bytes @ 0x0
  6017                           
  6018  0020                     ??_i2c1_driver_startRX:	
  6019                           ; 1 bytes @ 0x0
  6020                           
  6021  0020                     ??_i2c1_driver_sendNACK:	
  6022                           ; 1 bytes @ 0x0
  6023                           
  6024  0020                     ??_i2c1_driver_getRXData:	
  6025                           ; 1 bytes @ 0x0
  6026                           
  6027  0020                     ??_PMD_Initialize:	
  6028                           ; 1 bytes @ 0x0
  6029                           
  6030  0020                     ??_OSCILLATOR_Initialize:	
  6031                           ; 1 bytes @ 0x0
  6032                           
  6033  0020                     ??_WDT_Initialize:	
  6034                           ; 1 bytes @ 0x0
  6035                           
  6036  0020                     ??_SPI2_Initialize:	
  6037                           ; 1 bytes @ 0x0
  6038                           
  6039  0020                     ??_PWM1_Initialize:	
  6040                           ; 1 bytes @ 0x0
  6041                           
  6042  0020                     ??_ADC_Initialize:	
  6043                           ; 1 bytes @ 0x0
  6044                           
  6045  0020                     ??_TMR2_Initialize:	
  6046                           ; 1 bytes @ 0x0
  6047                           
  6048  0020                     ?_IOCAF4_SetInterruptHandler:	
  6049                           ; 1 bytes @ 0x0
  6050                           
  6051  0020                     ??_PIR_Sensor:	
  6052                           ; 1 bytes @ 0x0
  6053                           
  6054  0020                     ??_resetGestureParameters:	
  6055                           ; 1 bytes @ 0x0
  6056                           
  6057  0020                     ??_decodeGesture:	
  6058                           ; 1 bytes @ 0x0
  6059                           
  6060  0020                     ??_I2C_Start:	
  6061                           ; 1 bytes @ 0x0
  6062                           
  6063  0020                     ??_I2C_ReStart:	
  6064                           ; 1 bytes @ 0x0
  6065                           
  6066  0020                     ??_I2C_Send_NACK:	
  6067                           ; 1 bytes @ 0x0
  6068                           
  6069  0020                     ??_I2C_Stop:	
  6070                           ; 1 bytes @ 0x0
  6071                           
  6072  0020                     ?_EUSART_SetRxInterruptHandler:	
  6073                           ; 1 bytes @ 0x0
  6074                           
  6075  0020                     ?_EUSART_SetTxInterruptHandler:	
  6076                           ; 1 bytes @ 0x0
  6077                           
  6078  0020                     ?_EUSART_SetFramingErrorHandler:	
  6079                           ; 1 bytes @ 0x0
  6080                           
  6081  0020                     ?_EUSART_SetOverrunErrorHandler:	
  6082                           ; 1 bytes @ 0x0
  6083                           
  6084  0020                     ?_EUSART_SetErrorHandler:	
  6085                           ; 1 bytes @ 0x0
  6086                           
  6087  0020                     ??_i2c1_driver_isBufferFull:	
  6088                           ; 1 bytes @ 0x0
  6089                           
  6090  0020                     ??_SPI2_Exchange8bit:	
  6091                           ; 1 bytes @ 0x0
  6092                           
  6093  0020                     ?_strlen:	
  6094                           ; 1 bytes @ 0x0
  6095                           
  6096  0020                     ?_ADC_GetConversion:	
  6097                           ; 2 bytes @ 0x0
  6098                           
  6099  0020                     ?___wmul:	
  6100                           ; 2 bytes @ 0x0
  6101                           
  6102  0020                     i2c1_driver_TXData@d:	
  6103                           ; 2 bytes @ 0x0
  6104                           
  6105  0020                     SPI2_Exchange8bit@data:	
  6106                           ; 1 bytes @ 0x0
  6107                           
  6108  0020                     IOCAF4_SetInterruptHandler@InterruptHandler:	
  6109                           ; 1 bytes @ 0x0
  6110                           
  6111  0020                     EUSART_SetFramingErrorHandler@interruptHandler:	
  6112                           ; 2 bytes @ 0x0
  6113                           
  6114  0020                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  6115                           ; 2 bytes @ 0x0
  6116                           
  6117  0020                     EUSART_SetErrorHandler@interruptHandler:	
  6118                           ; 2 bytes @ 0x0
  6119                           
  6120  0020                     EUSART_SetTxInterruptHandler@interruptHandler:	
  6121                           ; 2 bytes @ 0x0
  6122                           
  6123  0020                     EUSART_SetRxInterruptHandler@interruptHandler:	
  6124                           ; 2 bytes @ 0x0
  6125                           
  6126  0020                     ___wmul@multiplier:	
  6127                           ; 2 bytes @ 0x0
  6128                           
  6129  0020                     strlen@s:	
  6130                           ; 2 bytes @ 0x0
  6131                           
  6132                           
  6133                           ; 2 bytes @ 0x0
  6134  0020                     	ds	1
  6135  0021                     ??_I2C_Write_Byte:	
  6136  0021                     ??_I2C_Read_Byte:	
  6137                           ; 1 bytes @ 0x1
  6138                           
  6139  0021                     ??_SPI_Write:	
  6140                           ; 1 bytes @ 0x1
  6141                           
  6142                           
  6143                           ; 1 bytes @ 0x1
  6144  0021                     	ds	1
  6145  0022                     ??_PIN_MANAGER_Initialize:	
  6146  0022                     ??_EUSART_Initialize:	
  6147                           ; 1 bytes @ 0x2
  6148                           
  6149  0022                     ??_IOCAF4_SetInterruptHandler:	
  6150                           ; 1 bytes @ 0x2
  6151                           
  6152  0022                     ??_strlen:	
  6153                           ; 1 bytes @ 0x2
  6154                           
  6155  0022                     ??_EUSART_SetRxInterruptHandler:	
  6156                           ; 1 bytes @ 0x2
  6157                           
  6158  0022                     ??_EUSART_SetTxInterruptHandler:	
  6159                           ; 1 bytes @ 0x2
  6160                           
  6161  0022                     ??_EUSART_SetFramingErrorHandler:	
  6162                           ; 1 bytes @ 0x2
  6163                           
  6164  0022                     ??_EUSART_SetOverrunErrorHandler:	
  6165                           ; 1 bytes @ 0x2
  6166                           
  6167  0022                     ??_EUSART_SetErrorHandler:	
  6168                           ; 1 bytes @ 0x2
  6169                           
  6170  0022                     ??_ADC_GetConversion:	
  6171                           ; 1 bytes @ 0x2
  6172                           
  6173  0022                     SPI_Write@incoming:	
  6174                           ; 1 bytes @ 0x2
  6175                           
  6176  0022                     _decodeGesture$1686:	
  6177                           ; 1 bytes @ 0x2
  6178                           
  6179  0022                     ___wmul@multiplicand:	
  6180                           ; 2 bytes @ 0x2
  6181                           
  6182                           
  6183                           ; 2 bytes @ 0x2
  6184  0022                     	ds	1
  6185  0023                     ??_Display_Clear:	
  6186  0023                     ??_SYSTEM_Initialize:	
  6187                           ; 1 bytes @ 0x3
  6188                           
  6189  0023                     ADC_GetConversion@channel:	
  6190                           ; 1 bytes @ 0x3
  6191                           
  6192  0023                     I2C_Write_Byte@Byte:	
  6193                           ; 1 bytes @ 0x3
  6194                           
  6195  0023                     strlen@a:	
  6196                           ; 1 bytes @ 0x3
  6197                           
  6198                           
  6199                           ; 2 bytes @ 0x3
  6200  0023                     	ds	1
  6201  0024                     ??___wmul:	
  6202  0024                     _decodeGesture$1687:	
  6203                           ; 1 bytes @ 0x4
  6204                           
  6205  0024                     I2C_Write_Byte@count:	
  6206                           ; 2 bytes @ 0x4
  6207                           
  6208  0024                     ___wmul@product:	
  6209                           ; 2 bytes @ 0x4
  6210                           
  6211                           
  6212                           ; 2 bytes @ 0x4
  6213  0024                     	ds	1
  6214  0025                     ??_UART_Byte:	
  6215  0025                     ?_Display_Name:	
  6216                           ; 1 bytes @ 0x5
  6217                           
  6218  0025                     Display_Name@string1:	
  6219                           ; 1 bytes @ 0x5
  6220                           
  6221                           
  6222                           ; 2 bytes @ 0x5
  6223  0025                     	ds	1
  6224  0026                     ??_wireReadDataByte:	
  6225  0026                     ?_wireWriteDataByte:	
  6226                           ; 1 bytes @ 0x6
  6227                           
  6228  0026                     ?_wireReadDataBlock:	
  6229                           ; 2 bytes @ 0x6
  6230                           
  6231  0026                     ?___awdiv:	
  6232                           ; 2 bytes @ 0x6
  6233                           
  6234  0026                     wireWriteDataByte@val:	
  6235                           ; 2 bytes @ 0x6
  6236                           
  6237  0026                     UART_Byte@tempOn:	
  6238                           ; 1 bytes @ 0x6
  6239                           
  6240  0026                     _decodeGesture$1688:	
  6241                           ; 2 bytes @ 0x6
  6242                           
  6243  0026                     wireReadDataBlock@val:	
  6244                           ; 2 bytes @ 0x6
  6245                           
  6246  0026                     ___awdiv@divisor:	
  6247                           ; 2 bytes @ 0x6
  6248                           
  6249                           
  6250                           ; 2 bytes @ 0x6
  6251  0026                     	ds	1
  6252  0027                     ??_Display_Name:	
  6253  0027                     wireReadDataByte@reg:	
  6254                           ; 1 bytes @ 0x7
  6255                           
  6256                           
  6257                           ; 1 bytes @ 0x7
  6258  0027                     	ds	1
  6259  0028                     wireReadDataByte@val:	
  6260  0028                     Display_Name@length:	
  6261                           ; 1 bytes @ 0x8
  6262                           
  6263  0028                     UART_Byte@tempProx:	
  6264                           ; 2 bytes @ 0x8
  6265                           
  6266  0028                     _decodeGesture$1689:	
  6267                           ; 2 bytes @ 0x8
  6268                           
  6269  0028                     wireReadDataBlock@len:	
  6270                           ; 2 bytes @ 0x8
  6271                           
  6272  0028                     ___awdiv@dividend:	
  6273                           ; 2 bytes @ 0x8
  6274                           
  6275                           
  6276                           ; 2 bytes @ 0x8
  6277  0028                     	ds	1
  6278  0029                     ??_isGestureAvailable:	
  6279  0029                     ??_wireWriteDataByte:	
  6280                           ; 1 bytes @ 0x9
  6281                           
  6282  0029                     ??_getMode:	
  6283                           ; 1 bytes @ 0x9
  6284                           
  6285  0029                     wireWriteDataByte@reg:	
  6286                           ; 1 bytes @ 0x9
  6287                           
  6288                           
  6289                           ; 1 bytes @ 0x9
  6290  0029                     	ds	1
  6291  002A                     ??_setLEDDrive:	
  6292  002A                     ??_setProximityGain:	
  6293                           ; 1 bytes @ 0xA
  6294                           
  6295  002A                     ??_setAmbientLightGain:	
  6296                           ; 1 bytes @ 0xA
  6297                           
  6298  002A                     ??_setProxIntLowThresh:	
  6299                           ; 1 bytes @ 0xA
  6300                           
  6301  002A                     ??_setProxIntHighThresh:	
  6302                           ; 1 bytes @ 0xA
  6303                           
  6304  002A                     ?_setLightIntLowThreshold:	
  6305                           ; 1 bytes @ 0xA
  6306                           
  6307  002A                     ?_setLightIntHighThreshold:	
  6308                           ; 1 bytes @ 0xA
  6309                           
  6310  002A                     ??_setGestureEnterThresh:	
  6311                           ; 1 bytes @ 0xA
  6312                           
  6313  002A                     ??_setGestureExitThresh:	
  6314                           ; 1 bytes @ 0xA
  6315                           
  6316  002A                     ??_setGestureGain:	
  6317                           ; 1 bytes @ 0xA
  6318                           
  6319  002A                     ??_setGestureLEDDrive:	
  6320                           ; 1 bytes @ 0xA
  6321                           
  6322  002A                     ??_setGestureWaitTime:	
  6323                           ; 1 bytes @ 0xA
  6324                           
  6325  002A                     ??_setGestureIntEnable:	
  6326                           ; 1 bytes @ 0xA
  6327                           
  6328  002A                     ??_setLEDBoost:	
  6329                           ; 1 bytes @ 0xA
  6330                           
  6331  002A                     ??_setGestureMode:	
  6332                           ; 1 bytes @ 0xA
  6333                           
  6334  002A                     ??_wireReadDataBlock:	
  6335                           ; 1 bytes @ 0xA
  6336                           
  6337  002A                     ??___awdiv:	
  6338                           ; 1 bytes @ 0xA
  6339                           
  6340  002A                     getMode@enable_value:	
  6341                           ; 1 bytes @ 0xA
  6342                           
  6343  002A                     isGestureAvailable@val:	
  6344                           ; 1 bytes @ 0xA
  6345                           
  6346  002A                     Display_Name@i:	
  6347                           ; 1 bytes @ 0xA
  6348                           
  6349  002A                     UART_Byte@tempName:	
  6350                           ; 2 bytes @ 0xA
  6351                           
  6352  002A                     setLightIntLowThreshold@threshold:	
  6353                           ; 2 bytes @ 0xA
  6354                           
  6355  002A                     setLightIntHighThreshold@threshold:	
  6356                           ; 2 bytes @ 0xA
  6357                           
  6358  002A                     _decodeGesture$1690:	
  6359                           ; 2 bytes @ 0xA
  6360                           
  6361                           
  6362                           ; 2 bytes @ 0xA
  6363  002A                     	ds	1
  6364  002B                     ?_setMode:	
  6365  002B                     setMode@enable:	
  6366                           ; 1 bytes @ 0xB
  6367                           
  6368  002B                     setAmbientLightGain@drive:	
  6369                           ; 1 bytes @ 0xB
  6370                           
  6371  002B                     setProxIntLowThresh@threshold:	
  6372                           ; 1 bytes @ 0xB
  6373                           
  6374  002B                     setProxIntHighThresh@threshold:	
  6375                           ; 1 bytes @ 0xB
  6376                           
  6377  002B                     setGestureEnterThresh@threshold:	
  6378                           ; 1 bytes @ 0xB
  6379                           
  6380  002B                     setGestureExitThresh@threshold:	
  6381                           ; 1 bytes @ 0xB
  6382                           
  6383  002B                     setGestureWaitTime@time:	
  6384                           ; 1 bytes @ 0xB
  6385                           
  6386  002B                     setGestureIntEnable@val:	
  6387                           ; 1 bytes @ 0xB
  6388                           
  6389  002B                     setGestureMode@mode:	
  6390                           ; 1 bytes @ 0xB
  6391                           
  6392  002B                     ___awdiv@counter:	
  6393                           ; 1 bytes @ 0xB
  6394                           
  6395                           
  6396                           ; 1 bytes @ 0xB
  6397  002B                     	ds	1
  6398  002C                     ??_Get_ADC:	
  6399  002C                     ??_setMode:	
  6400                           ; 1 bytes @ 0xC
  6401                           
  6402  002C                     ??_setLightIntLowThreshold:	
  6403                           ; 1 bytes @ 0xC
  6404                           
  6405  002C                     ??_setLightIntHighThreshold:	
  6406                           ; 1 bytes @ 0xC
  6407                           
  6408  002C                     setLEDDrive@val:	
  6409                           ; 1 bytes @ 0xC
  6410                           
  6411  002C                     setProximityGain@val:	
  6412                           ; 1 bytes @ 0xC
  6413                           
  6414  002C                     setAmbientLightGain@val:	
  6415                           ; 1 bytes @ 0xC
  6416                           
  6417  002C                     setGestureGain@val:	
  6418                           ; 1 bytes @ 0xC
  6419                           
  6420  002C                     setGestureLEDDrive@val:	
  6421                           ; 1 bytes @ 0xC
  6422                           
  6423  002C                     setGestureWaitTime@val:	
  6424                           ; 1 bytes @ 0xC
  6425                           
  6426  002C                     setGestureIntEnable@enable:	
  6427                           ; 1 bytes @ 0xC
  6428                           
  6429  002C                     setLEDBoost@val:	
  6430                           ; 1 bytes @ 0xC
  6431                           
  6432  002C                     setGestureMode@val:	
  6433                           ; 1 bytes @ 0xC
  6434                           
  6435  002C                     ___awdiv@sign:	
  6436                           ; 1 bytes @ 0xC
  6437                           
  6438  002C                     UART_Byte@tempBright:	
  6439                           ; 1 bytes @ 0xC
  6440                           
  6441  002C                     _decodeGesture$1691:	
  6442                           ; 2 bytes @ 0xC
  6443                           
  6444                           
  6445                           ; 2 bytes @ 0xC
  6446  002C                     	ds	1
  6447  002D                     setLEDDrive@drive:	
  6448  002D                     setProximityGain@drive:	
  6449                           ; 1 bytes @ 0xD
  6450                           
  6451  002D                     setLightIntLowThreshold@val_low:	
  6452                           ; 1 bytes @ 0xD
  6453                           
  6454  002D                     setLightIntHighThreshold@val_low:	
  6455                           ; 1 bytes @ 0xD
  6456                           
  6457  002D                     setGestureGain@gain:	
  6458                           ; 1 bytes @ 0xD
  6459                           
  6460  002D                     setGestureLEDDrive@drive:	
  6461                           ; 1 bytes @ 0xD
  6462                           
  6463  002D                     setLEDBoost@boost:	
  6464                           ; 1 bytes @ 0xD
  6465                           
  6466  002D                     ___awdiv@quotient:	
  6467                           ; 1 bytes @ 0xD
  6468                           
  6469                           
  6470                           ; 2 bytes @ 0xD
  6471  002D                     	ds	1
  6472  002E                     setMode@reg_val:	
  6473  002E                     setLightIntLowThreshold@val_high:	
  6474                           ; 1 bytes @ 0xE
  6475                           
  6476  002E                     setLightIntHighThreshold@val_high:	
  6477                           ; 1 bytes @ 0xE
  6478                           
  6479  002E                     _decodeGesture$1692:	
  6480                           ; 1 bytes @ 0xE
  6481                           
  6482  002E                     UART_Byte@bits:	
  6483                           ; 2 bytes @ 0xE
  6484                           
  6485                           
  6486                           ; 4 bytes @ 0xE
  6487  002E                     	ds	1
  6488  002F                     ??_processGestureData:	
  6489  002F                     setMode@mode:	
  6490                           ; 1 bytes @ 0xF
  6491                           
  6492  002F                     wireReadDataBlock@reg:	
  6493                           ; 1 bytes @ 0xF
  6494                           
  6495  002F                     Get_ADC@val:	
  6496                           ; 1 bytes @ 0xF
  6497                           
  6498                           
  6499                           ; 2 bytes @ 0xF
  6500  002F                     	ds	1
  6501  0030                     ??_initialize:	
  6502  0030                     ??_enableGestureSensor:	
  6503                           ; 1 bytes @ 0x10
  6504                           
  6505  0030                     ??_enablePower:	
  6506                           ; 1 bytes @ 0x10
  6507                           
  6508  0030                     wireReadDataBlock@j:	
  6509                           ; 1 bytes @ 0x10
  6510                           
  6511  0030                     _decodeGesture$1693:	
  6512                           ; 1 bytes @ 0x10
  6513                           
  6514                           
  6515                           ; 2 bytes @ 0x10
  6516  0030                     	ds	1
  6517  0031                     initialize@id:	
  6518  0031                     enableGestureSensor@interrupts:	
  6519                           ; 1 bytes @ 0x11
  6520                           
  6521  0031                     processGestureData@ud_ratio_first:	
  6522                           ; 1 bytes @ 0x11
  6523                           
  6524                           
  6525                           ; 2 bytes @ 0x11
  6526  0031                     	ds	1
  6527  0032                     UART_Byte@i:	
  6528                           
  6529                           ; 2 bytes @ 0x12
  6530  0032                     	ds	1
  6531  0033                     processGestureData@lr_ratio_first:	
  6532                           
  6533                           ; 2 bytes @ 0x13
  6534  0033                     	ds	2
  6535  0035                     processGestureData@ud_ratio_last:	
  6536                           
  6537                           ; 2 bytes @ 0x15
  6538  0035                     	ds	2
  6539  0037                     processGestureData@lr_ratio_last:	
  6540                           
  6541                           ; 2 bytes @ 0x17
  6542  0037                     	ds	2
  6543  0039                     _processGestureData$1681:	
  6544                           
  6545                           ; 2 bytes @ 0x19
  6546  0039                     	ds	2
  6547  003B                     _processGestureData$1682:	
  6548                           
  6549                           ; 2 bytes @ 0x1B
  6550  003B                     	ds	2
  6551  003D                     _processGestureData$1683:	
  6552                           
  6553                           ; 2 bytes @ 0x1D
  6554  003D                     	ds	2
  6555  003F                     _processGestureData$1684:	
  6556                           
  6557                           ; 2 bytes @ 0x1F
  6558  003F                     	ds	2
  6559  0041                     processGestureData@u_last:	
  6560                           
  6561                           ; 1 bytes @ 0x21
  6562  0041                     	ds	1
  6563  0042                     processGestureData@d_last:	
  6564                           
  6565                           ; 1 bytes @ 0x22
  6566  0042                     	ds	1
  6567  0043                     processGestureData@l_last:	
  6568                           
  6569                           ; 1 bytes @ 0x23
  6570  0043                     	ds	1
  6571  0044                     processGestureData@r_last:	
  6572                           
  6573                           ; 1 bytes @ 0x24
  6574  0044                     	ds	1
  6575  0045                     processGestureData@u_first:	
  6576                           
  6577                           ; 1 bytes @ 0x25
  6578  0045                     	ds	1
  6579  0046                     processGestureData@d_first:	
  6580                           
  6581                           ; 1 bytes @ 0x26
  6582  0046                     	ds	1
  6583  0047                     processGestureData@l_first:	
  6584                           
  6585                           ; 1 bytes @ 0x27
  6586  0047                     	ds	1
  6587  0048                     processGestureData@r_first:	
  6588                           
  6589                           ; 1 bytes @ 0x28
  6590  0048                     	ds	1
  6591  0049                     processGestureData@ud_delta:	
  6592                           
  6593                           ; 2 bytes @ 0x29
  6594  0049                     	ds	2
  6595  004B                     processGestureData@lr_delta:	
  6596                           
  6597                           ; 2 bytes @ 0x2B
  6598  004B                     	ds	2
  6599  004D                     processGestureData@i:	
  6600                           
  6601                           ; 2 bytes @ 0x2D
  6602  004D                     	ds	2
  6603  004F                     ?_readGesture:	
  6604                           
  6605                           ; 2 bytes @ 0x2F
  6606  004F                     	ds	2
  6607  0051                     ??_readGesture:	
  6608                           
  6609                           ; 1 bytes @ 0x31
  6610  0051                     	ds	2
  6611  0053                     readGesture@motion:	
  6612                           
  6613                           ; 2 bytes @ 0x33
  6614  0053                     	ds	2
  6615  0055                     readGesture@gstatus:	
  6616                           
  6617                           ; 1 bytes @ 0x35
  6618  0055                     	ds	1
  6619  0056                     readGesture@bytes_read:	
  6620                           
  6621                           ; 2 bytes @ 0x36
  6622  0056                     	ds	2
  6623  0058                     readGesture@fifo_level:	
  6624                           
  6625                           ; 1 bytes @ 0x38
  6626  0058                     	ds	1
  6627  0059                     readGesture@i:	
  6628                           
  6629                           ; 2 bytes @ 0x39
  6630  0059                     	ds	2
  6631  005B                     ??_handleGesture:	
  6632                           
  6633                           ; 1 bytes @ 0x3B
  6634  005B                     	ds	1
  6635  005C                     ??_main:	
  6636                           
  6637                           	psect	maintext
  6638  0D43                     __pmaintext:	
  6639                           ; 1 bytes @ 0x3C
  6640 ;;
  6641 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  6642 ;;
  6643 ;; *************** function _main *****************
  6644 ;; Defined at:
  6645 ;;		line 382 in file "main.c"
  6646 ;; Parameters:    Size  Location     Type
  6647 ;;		None
  6648 ;; Auto vars:     Size  Location     Type
  6649 ;;  count           2    0        unsigned int 
  6650 ;;  temp            2    0        int 
  6651 ;;  startSystem     1    0        _Bool 
  6652 ;; Return value:  Size  Location     Type
  6653 ;;                  1    wreg      void 
  6654 ;; Registers used:
  6655 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6656 ;; Tracked objects:
  6657 ;;		On entry : B1F/0
  6658 ;;		On exit  : 0/0
  6659 ;;		Unchanged: 0/0
  6660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6661 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6662 ;;      Locals:         0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0
  6663 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6664 ;;      Totals:         0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0
  6665 ;;Total ram usage:        2 bytes
  6666 ;; Hardware stack levels required when called:   12
  6667 ;; This function calls:
  6668 ;;		_Display_Clear
  6669 ;;		_Display_Name
  6670 ;;		_Get_ADC
  6671 ;;		_PIR_Sensor
  6672 ;;		_SYSTEM_Initialize
  6673 ;;		_UART_Byte
  6674 ;;		_enableGestureSensor
  6675 ;;		_handleGesture
  6676 ;;		_initialize
  6677 ;;		_isGestureAvailable
  6678 ;; This function is called by:
  6679 ;;		Startup code after reset
  6680 ;; This function uses a non-reentrant model
  6681 ;;
  6682                           
  6683                           
  6684                           ;psect for function _main
  6685  0D43                     _main:	
  6686                           
  6687                           ;main.c: 385:     SYSTEM_Initialize();
  6688                           
  6689                           ;incstack = 0
  6690                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6691  0D43  3188  20E4  318D   	fcall	_SYSTEM_Initialize
  6692                           
  6693                           ;main.c: 391:     (INTCONbits.GIE = 1);
  6694  0D46  178B               	bsf	11,7	;volatile
  6695                           
  6696                           ;main.c: 394:     (INTCONbits.PEIE = 1);
  6697  0D47  170B               	bsf	11,6	;volatile
  6698                           
  6699                           ;main.c: 397:     Display_Clear();
  6700  0D48  3188  202E  318D   	fcall	_Display_Clear
  6701                           
  6702                           ;main.c: 399:     if(PIR_Sensor()) {
  6703  0D4B  3188  201F  318D   	fcall	_PIR_Sensor
  6704  0D4E  3A00               	xorlw	0
  6705  0D4F  1903               	skipnz
  6706  0D50  2D58               	goto	l7796
  6707                           
  6708                           ;main.c: 400:         if(initialize()){
  6709  0D51  3184  24F1  318D   	fcall	_initialize
  6710                           
  6711                           ;main.c: 402:         if(enableGestureSensor(0)){
  6712  0D54  3000               	movlw	0
  6713  0D55  318F  271C  318D   	fcall	_enableGestureSensor
  6714  0D58                     l7796:	
  6715                           
  6716                           ;main.c: 407:     _Bool startSystem;;main.c: 408:     int temp;;main.c: 409:     on = 1;
  6717  0D58  3001               	movlw	1
  6718  0D59  0020               	movlb	0	; select bank0
  6719  0D5A  00DC               	movwf	_on
  6720  0D5B  3000               	movlw	0
  6721  0D5C  00DD               	movwf	_on+1
  6722  0D5D                     l7798:	
  6723                           
  6724                           ;main.c: 413:         UART_Byte();
  6725  0D5D  318E  26C4  318D   	fcall	_UART_Byte
  6726                           
  6727                           ;main.c: 414:         if(on) {
  6728  0D60  0020               	movlb	0	; select bank0
  6729  0D61  085C               	movf	_on,w
  6730  0D62  045D               	iorwf	_on+1,w
  6731  0D63  1903               	btfsc	3,2
  6732  0D64  2D5D               	goto	l7798
  6733                           
  6734                           ;main.c: 415:             if(PIR_Sensor()) {
  6735  0D65  3188  201F  318D   	fcall	_PIR_Sensor
  6736  0D68  3A00               	xorlw	0
  6737  0D69  1903               	skipnz
  6738  0D6A  2D5D               	goto	l7798
  6739                           
  6740                           ;main.c: 416:                 if(start == 1) {
  6741  0D6B  0020               	movlb	0	; select bank0
  6742  0D6C  036F               	decf	_start,w
  6743  0D6D  1D03               	btfss	3,2
  6744  0D6E  2D7D               	goto	l7810
  6745                           
  6746                           ;main.c: 417:                     Display_Name(names[name]);
  6747  0D6F  3560               	lslf	_name,w
  6748  0D70  3E60               	addlw	(low (_names| (0+256)))& (0+255)
  6749  0D71  0086               	movwf	6
  6750  0D72  3001               	movlw	1	; select bank2/3
  6751  0D73  0087               	movwf	7
  6752  0D74  3F40               	moviw [0]fsr1
  6753  0D75  00A5               	movwf	Display_Name@string1
  6754  0D76  3F41               	moviw [1]fsr1
  6755  0D77  00A6               	movwf	Display_Name@string1+1
  6756  0D78  318C  2435  318D   	fcall	_Display_Name
  6757                           
  6758                           ;main.c: 418:                     start = 0;
  6759  0D7B  0020               	movlb	0	; select bank0
  6760  0D7C  01EF               	clrf	_start
  6761  0D7D                     l7810:	
  6762                           
  6763                           ;main.c: 420:                 Get_ADC();
  6764  0D7D  3186  26FA  318D   	fcall	_Get_ADC
  6765                           
  6766                           ;main.c: 422:                 if( isGestureAvailable()){
  6767  0D80  3188  203F  318D   	fcall	_isGestureAvailable
  6768  0D83  3A00               	xorlw	0
  6769  0D84  1903               	skipnz
  6770  0D85  2D5D               	goto	l7798
  6771                           
  6772                           ;main.c: 423:                     handleGesture();
  6773  0D86  318F  2780  318D   	fcall	_handleGesture
  6774                           
  6775                           ;main.c: 426:         }
  6776  0D89  2D5D               	goto	l7798
  6777  0D8A                     __end_of_main:	
  6778                           
  6779                           	psect	text1
  6780  04F1                     __ptext1:	
  6781 ;; *************** function _initialize *****************
  6782 ;; Defined at:
  6783 ;;		line 20 in file "APDS9960.c"
  6784 ;; Parameters:    Size  Location     Type
  6785 ;;		None
  6786 ;; Auto vars:     Size  Location     Type
  6787 ;;  id              1   17[BANK0 ] unsigned char 
  6788 ;; Return value:  Size  Location     Type
  6789 ;;                  1    wreg      _Bool 
  6790 ;; Registers used:
  6791 ;;		wreg, status,2, status,0, pclath, cstack
  6792 ;; Tracked objects:
  6793 ;;		On entry : 0/0
  6794 ;;		On exit  : 0/0
  6795 ;;		Unchanged: 0/0
  6796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6798 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6799 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6800 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6801 ;;Total ram usage:        2 bytes
  6802 ;; Hardware stack levels used:    1
  6803 ;; Hardware stack levels required when called:   10
  6804 ;; This function calls:
  6805 ;;		_i2c1_driver_open
  6806 ;;		_setAmbientLightGain
  6807 ;;		_setGestureEnterThresh
  6808 ;;		_setGestureExitThresh
  6809 ;;		_setGestureGain
  6810 ;;		_setGestureIntEnable
  6811 ;;		_setGestureLEDDrive
  6812 ;;		_setGestureWaitTime
  6813 ;;		_setLEDDrive
  6814 ;;		_setLightIntHighThreshold
  6815 ;;		_setLightIntLowThreshold
  6816 ;;		_setMode
  6817 ;;		_setProxIntHighThresh
  6818 ;;		_setProxIntLowThresh
  6819 ;;		_setProximityGain
  6820 ;;		_wireReadDataByte
  6821 ;;		_wireWriteDataByte
  6822 ;; This function is called by:
  6823 ;;		_main
  6824 ;; This function uses a non-reentrant model
  6825 ;;
  6826                           
  6827                           
  6828                           ;psect for function _initialize
  6829  04F1                     _initialize:	
  6830                           
  6831                           ;APDS9960.c: 25:     i2c1_driver_open();
  6832                           
  6833                           ;incstack = 0
  6834                           ; Regs used in _initialize: [wreg+status,2+status,0+pclath+cstack]
  6835  04F1  3197  27D2  3184   	fcall	_i2c1_driver_open
  6836                           
  6837                           ;APDS9960.c: 31:     id = wireReadDataByte(0x92);
  6838  04F4  3092               	movlw	146
  6839  04F5  3189  21AC  3184   	fcall	_wireReadDataByte
  6840  04F8  0020               	movlb	0	; select bank0
  6841  04F9  00B0               	movwf	??_initialize
  6842  04FA  0830               	movf	??_initialize,w
  6843  04FB  00B1               	movwf	initialize@id
  6844                           
  6845                           ;APDS9960.c: 33:     if( !(id == 0xAB ||id == 0x9C ) )
  6846  04FC  30AB               	movlw	171
  6847  04FD  0631               	xorwf	initialize@id,w
  6848  04FE  1903               	btfsc	3,2
  6849  04FF  2D06               	goto	l7394
  6850  0500  309C               	movlw	156
  6851  0501  0631               	xorwf	initialize@id,w
  6852  0502  1903               	btfsc	3,2
  6853  0503  2D06               	goto	l7394
  6854  0504                     l7390:	
  6855                           
  6856                           ;APDS9960.c: 34:     {;APDS9960.c: 35:      return 0;
  6857  0504  3000               	movlw	0
  6858  0505  0008               	return
  6859  0506                     l7394:	
  6860                           
  6861                           ;APDS9960.c: 39:     setMode(7, 0);
  6862  0506  01AB               	clrf	setMode@enable
  6863  0507  3007               	movlw	7
  6864  0508  318E  2623  3184   	fcall	_setMode
  6865                           
  6866                           ;APDS9960.c: 41:     wireWriteDataByte(0x81, 219);
  6867  050B  30DB               	movlw	219
  6868  050C  0020               	movlb	0	; select bank0
  6869  050D  00B0               	movwf	??_initialize
  6870  050E  0830               	movf	??_initialize,w
  6871  050F  00A6               	movwf	wireWriteDataByte@val
  6872  0510  3081               	movlw	129
  6873  0511  3188  20FF  3184   	fcall	_wireWriteDataByte
  6874                           
  6875                           ;APDS9960.c: 42:     wireWriteDataByte(0x83, 246);
  6876  0514  30F6               	movlw	246
  6877  0515  0020               	movlb	0	; select bank0
  6878  0516  00B0               	movwf	??_initialize
  6879  0517  0830               	movf	??_initialize,w
  6880  0518  00A6               	movwf	wireWriteDataByte@val
  6881  0519  3083               	movlw	131
  6882  051A  3188  20FF  3184   	fcall	_wireWriteDataByte
  6883                           
  6884                           ;APDS9960.c: 43:     wireWriteDataByte(0x8E, 0x87);
  6885  051D  3087               	movlw	135
  6886  051E  0020               	movlb	0	; select bank0
  6887  051F  00B0               	movwf	??_initialize
  6888  0520  0830               	movf	??_initialize,w
  6889  0521  00A6               	movwf	wireWriteDataByte@val
  6890  0522  308E               	movlw	142
  6891  0523  3188  20FF  3184   	fcall	_wireWriteDataByte
  6892                           
  6893                           ;APDS9960.c: 44:     wireWriteDataByte(0x9D, 0) ;
  6894  0526  0020               	movlb	0	; select bank0
  6895  0527  01A6               	clrf	wireWriteDataByte@val
  6896  0528  309D               	movlw	157
  6897  0529  3188  20FF  3184   	fcall	_wireWriteDataByte
  6898                           
  6899                           ;APDS9960.c: 45:     wireWriteDataByte(0x9E, 0) ;
  6900  052C  0020               	movlb	0	; select bank0
  6901  052D  01A6               	clrf	wireWriteDataByte@val
  6902  052E  309E               	movlw	158
  6903  052F  3188  20FF  3184   	fcall	_wireWriteDataByte
  6904                           
  6905                           ;APDS9960.c: 46:     wireWriteDataByte(0x8D, 0x60) ;
  6906  0532  3060               	movlw	96
  6907  0533  0020               	movlb	0	; select bank0
  6908  0534  00B0               	movwf	??_initialize
  6909  0535  0830               	movf	??_initialize,w
  6910  0536  00A6               	movwf	wireWriteDataByte@val
  6911  0537  308D               	movlw	141
  6912  0538  3188  20FF  3184   	fcall	_wireWriteDataByte
  6913                           
  6914                           ;APDS9960.c: 47:     setLEDDrive(0);
  6915  053B  3000               	movlw	0
  6916  053C  318A  2292  3184   	fcall	_setLEDDrive
  6917                           
  6918                           ;APDS9960.c: 48:     setProximityGain(2);
  6919  053F  3002               	movlw	2
  6920  0540  318A  22BB  3184   	fcall	_setProximityGain
  6921                           
  6922                           ;APDS9960.c: 49:     setAmbientLightGain(1);
  6923  0543  3001               	movlw	1
  6924  0544  3189  218E  3184   	fcall	_setAmbientLightGain
  6925                           
  6926                           ;APDS9960.c: 51:     if( !setProxIntLowThresh(0) ) {
  6927  0547  3000               	movlw	0
  6928  0548  3188  208B  3184   	fcall	_setProxIntLowThresh
  6929  054B  3A00               	xorlw	0
  6930  054C  1903               	btfsc	3,2
  6931  054D  2D04               	goto	l7390
  6932                           
  6933                           ;APDS9960.c: 54:     if( !setProxIntHighThresh(50) ) {
  6934  054E  3032               	movlw	50
  6935  054F  3188  2078  3184   	fcall	_setProxIntHighThresh
  6936  0552  3A00               	xorlw	0
  6937  0553  1903               	btfsc	3,2
  6938  0554  2D04               	goto	l7390
  6939                           
  6940                           ;APDS9960.c: 59:     if( !setLightIntLowThreshold(0xFFFF) ) {
  6941  0555  30FF               	movlw	255
  6942  0556  0020               	movlb	0	; select bank0
  6943  0557  00AA               	movwf	setLightIntLowThreshold@threshold
  6944  0558  30FF               	movlw	255
  6945  0559  00AB               	movwf	setLightIntLowThreshold@threshold+1
  6946  055A  318A  226B  3184   	fcall	_setLightIntLowThreshold
  6947  055D  3A00               	xorlw	0
  6948  055E  1903               	btfsc	3,2
  6949  055F  2D04               	goto	l7390
  6950                           
  6951                           ;APDS9960.c: 62:     if( !setLightIntHighThreshold(0) ) {
  6952  0560  3000               	movlw	0
  6953  0561  0020               	movlb	0	; select bank0
  6954  0562  00AA               	movwf	setLightIntHighThreshold@threshold
  6955  0563  00AB               	movwf	setLightIntHighThreshold@threshold+1
  6956  0564  318A  2244  3184   	fcall	_setLightIntHighThreshold
  6957  0567  3A00               	xorlw	0
  6958  0568  1903               	btfsc	3,2
  6959  0569  2D04               	goto	l7390
  6960                           
  6961                           ;APDS9960.c: 66:     if( !wireWriteDataByte(0x8C, 0x11) ) {
  6962  056A  3011               	movlw	17
  6963  056B  0020               	movlb	0	; select bank0
  6964  056C  00B0               	movwf	??_initialize
  6965  056D  0830               	movf	??_initialize,w
  6966  056E  00A6               	movwf	wireWriteDataByte@val
  6967  056F  308C               	movlw	140
  6968  0570  3188  20FF  3184   	fcall	_wireWriteDataByte
  6969  0573  0020               	movlb	0	; select bank0
  6970  0574  0826               	movf	?_wireWriteDataByte,w
  6971  0575  0427               	iorwf	?_wireWriteDataByte+1,w
  6972  0576  1903               	btfsc	3,2
  6973  0577  2D04               	goto	l7390
  6974                           
  6975                           ;APDS9960.c: 71:     if( !wireWriteDataByte(0x90, 0x01) ) {
  6976  0578  01A6               	clrf	wireWriteDataByte@val
  6977  0579  0AA6               	incf	wireWriteDataByte@val,f
  6978  057A  3090               	movlw	144
  6979  057B  3188  20FF  3184   	fcall	_wireWriteDataByte
  6980  057E  0020               	movlb	0	; select bank0
  6981  057F  0826               	movf	?_wireWriteDataByte,w
  6982  0580  0427               	iorwf	?_wireWriteDataByte+1,w
  6983  0581  1903               	btfsc	3,2
  6984  0582  2D04               	goto	l7390
  6985                           
  6986                           ;APDS9960.c: 74:     if( !wireWriteDataByte(0x9F, 0) ) {
  6987  0583  01A6               	clrf	wireWriteDataByte@val
  6988  0584  309F               	movlw	159
  6989  0585  3188  20FF  3184   	fcall	_wireWriteDataByte
  6990  0588  0020               	movlb	0	; select bank0
  6991  0589  0826               	movf	?_wireWriteDataByte,w
  6992  058A  0427               	iorwf	?_wireWriteDataByte+1,w
  6993  058B  1903               	btfsc	3,2
  6994  058C  2D04               	goto	l7390
  6995                           
  6996                           ;APDS9960.c: 78:     if( !setGestureEnterThresh(40) ) {
  6997  058D  3028               	movlw	40
  6998  058E  3188  2052  3184   	fcall	_setGestureEnterThresh
  6999  0591  3A00               	xorlw	0
  7000  0592  1903               	btfsc	3,2
  7001  0593  2D04               	goto	l7390
  7002                           
  7003                           ;APDS9960.c: 82:     if( !setGestureExitThresh(30) ) {
  7004  0594  301E               	movlw	30
  7005  0595  3188  2065  3184   	fcall	_setGestureExitThresh
  7006  0598  3A00               	xorlw	0
  7007  0599  1903               	btfsc	3,2
  7008  059A  2D04               	goto	l7390
  7009                           
  7010                           ;APDS9960.c: 85:     if( !wireWriteDataByte(0xA2, 0x40) ) {
  7011  059B  3040               	movlw	64
  7012  059C  0020               	movlb	0	; select bank0
  7013  059D  00B0               	movwf	??_initialize
  7014  059E  0830               	movf	??_initialize,w
  7015  059F  00A6               	movwf	wireWriteDataByte@val
  7016  05A0  30A2               	movlw	162
  7017  05A1  3188  20FF  3184   	fcall	_wireWriteDataByte
  7018  05A4  0020               	movlb	0	; select bank0
  7019  05A5  0826               	movf	?_wireWriteDataByte,w
  7020  05A6  0427               	iorwf	?_wireWriteDataByte+1,w
  7021  05A7  1903               	btfsc	3,2
  7022  05A8  2D04               	goto	l7390
  7023                           
  7024                           ;APDS9960.c: 88:     if( !setGestureGain(2) ) {
  7025  05A9  3002               	movlw	2
  7026  05AA  318B  239D  3184   	fcall	_setGestureGain
  7027  05AD  3A00               	xorlw	0
  7028  05AE  1903               	btfsc	3,2
  7029  05AF  2D04               	goto	l7390
  7030                           
  7031                           ;APDS9960.c: 91:     if( !setGestureLEDDrive(0) ) {
  7032  05B0  3000               	movlw	0
  7033  05B1  318B  23CF  3184   	fcall	_setGestureLEDDrive
  7034  05B4  3A00               	xorlw	0
  7035  05B5  1903               	btfsc	3,2
  7036  05B6  2D04               	goto	l7390
  7037                           
  7038                           ;APDS9960.c: 95:     if( !setGestureWaitTime(1) ) {
  7039  05B7  3001               	movlw	1
  7040  05B8  318A  221D  3184   	fcall	_setGestureWaitTime
  7041  05BB  3A00               	xorlw	0
  7042  05BC  1903               	btfsc	3,2
  7043  05BD  2D04               	goto	l7390
  7044                           
  7045                           ;APDS9960.c: 98:     if( !wireWriteDataByte(0xA4, 0) ) {
  7046  05BE  0020               	movlb	0	; select bank0
  7047  05BF  01A6               	clrf	wireWriteDataByte@val
  7048  05C0  30A4               	movlw	164
  7049  05C1  3188  20FF  3184   	fcall	_wireWriteDataByte
  7050  05C4  0020               	movlb	0	; select bank0
  7051  05C5  0826               	movf	?_wireWriteDataByte,w
  7052  05C6  0427               	iorwf	?_wireWriteDataByte+1,w
  7053  05C7  1903               	btfsc	3,2
  7054  05C8  2D04               	goto	l7390
  7055                           
  7056                           ;APDS9960.c: 101:     if( !wireWriteDataByte(0xA5, 0) ) {
  7057  05C9  01A6               	clrf	wireWriteDataByte@val
  7058  05CA  30A5               	movlw	165
  7059  05CB  3188  20FF  3184   	fcall	_wireWriteDataByte
  7060  05CE  0020               	movlb	0	; select bank0
  7061  05CF  0826               	movf	?_wireWriteDataByte,w
  7062  05D0  0427               	iorwf	?_wireWriteDataByte+1,w
  7063  05D1  1903               	btfsc	3,2
  7064  05D2  2D04               	goto	l7390
  7065                           
  7066                           ;APDS9960.c: 104:     if( !wireWriteDataByte(0xA7, 0) ) {
  7067  05D3  01A6               	clrf	wireWriteDataByte@val
  7068  05D4  30A7               	movlw	167
  7069  05D5  3188  20FF  3184   	fcall	_wireWriteDataByte
  7070  05D8  0020               	movlb	0	; select bank0
  7071  05D9  0826               	movf	?_wireWriteDataByte,w
  7072  05DA  0427               	iorwf	?_wireWriteDataByte+1,w
  7073  05DB  1903               	btfsc	3,2
  7074  05DC  2D04               	goto	l7390
  7075                           
  7076                           ;APDS9960.c: 107:     if( !wireWriteDataByte(0xA9, 0) ) {
  7077  05DD  01A6               	clrf	wireWriteDataByte@val
  7078  05DE  30A9               	movlw	169
  7079  05DF  3188  20FF  3184   	fcall	_wireWriteDataByte
  7080  05E2  0020               	movlb	0	; select bank0
  7081  05E3  0826               	movf	?_wireWriteDataByte,w
  7082  05E4  0427               	iorwf	?_wireWriteDataByte+1,w
  7083  05E5  1903               	btfsc	3,2
  7084  05E6  2D04               	goto	l7390
  7085                           
  7086                           ;APDS9960.c: 110:     if( !wireWriteDataByte(0xA6, 0xC9) ) {
  7087  05E7  30C9               	movlw	201
  7088  05E8  00B0               	movwf	??_initialize
  7089  05E9  0830               	movf	??_initialize,w
  7090  05EA  00A6               	movwf	wireWriteDataByte@val
  7091  05EB  30A6               	movlw	166
  7092  05EC  3188  20FF  3184   	fcall	_wireWriteDataByte
  7093  05EF  0020               	movlb	0	; select bank0
  7094  05F0  0826               	movf	?_wireWriteDataByte,w
  7095  05F1  0427               	iorwf	?_wireWriteDataByte+1,w
  7096  05F2  1903               	btfsc	3,2
  7097  05F3  2D04               	goto	l7390
  7098                           
  7099                           ;APDS9960.c: 113:     if( !wireWriteDataByte(0xAA, 0) ) {
  7100  05F4  01A6               	clrf	wireWriteDataByte@val
  7101  05F5  30AA               	movlw	170
  7102  05F6  3188  20FF  3184   	fcall	_wireWriteDataByte
  7103  05F9  0020               	movlb	0	; select bank0
  7104  05FA  0826               	movf	?_wireWriteDataByte,w
  7105  05FB  0427               	iorwf	?_wireWriteDataByte+1,w
  7106  05FC  1903               	btfsc	3,2
  7107  05FD  2D04               	goto	l7390
  7108                           
  7109                           ;APDS9960.c: 116:     if( !setGestureIntEnable(0) ) {
  7110  05FE  3000               	movlw	0
  7111  05FF  318B  230F  3184   	fcall	_setGestureIntEnable
  7112  0602  3A00               	xorlw	0
  7113  0603  1903               	btfsc	3,2
  7114  0604  2D04               	goto	l7390
  7115                           
  7116                           ;APDS9960.c: 120:     return 1;
  7117  0605  3001               	movlw	1
  7118  0606  0008               	return
  7119  0607                     __end_of_initialize:	
  7120                           
  7121                           	psect	text2
  7122  0ABB                     __ptext2:	
  7123 ;; *************** function _setProximityGain *****************
  7124 ;; Defined at:
  7125 ;;		line 192 in file "APDS9960.c"
  7126 ;; Parameters:    Size  Location     Type
  7127 ;;  drive           1    wreg     unsigned char 
  7128 ;; Auto vars:     Size  Location     Type
  7129 ;;  drive           1   13[BANK0 ] unsigned char 
  7130 ;;  val             1   12[BANK0 ] unsigned char 
  7131 ;; Return value:  Size  Location     Type
  7132 ;;                  1    wreg      _Bool 
  7133 ;; Registers used:
  7134 ;;		wreg, status,2, status,0, pclath, cstack
  7135 ;; Tracked objects:
  7136 ;;		On entry : 0/0
  7137 ;;		On exit  : 0/0
  7138 ;;		Unchanged: 0/0
  7139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7140 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7141 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7142 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7143 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7144 ;;Total ram usage:        4 bytes
  7145 ;; Hardware stack levels used:    1
  7146 ;; Hardware stack levels required when called:    8
  7147 ;; This function calls:
  7148 ;;		_wireReadDataByte
  7149 ;;		_wireWriteDataByte
  7150 ;; This function is called by:
  7151 ;;		_initialize
  7152 ;; This function uses a non-reentrant model
  7153 ;;
  7154                           
  7155                           
  7156                           ;psect for function _setProximityGain
  7157  0ABB                     _setProximityGain:	
  7158                           
  7159                           ;incstack = 0
  7160                           ; Regs used in _setProximityGain: [wreg+status,2+status,0+pclath+cstack]
  7161                           ;setProximityGain@drive stored from wreg
  7162  0ABB  0020               	movlb	0	; select bank0
  7163  0ABC  00AD               	movwf	setProximityGain@drive
  7164                           
  7165                           ;APDS9960.c: 192: _Bool setProximityGain(uint8_t drive);APDS9960.c: 193: {;APDS9960.c: 1
      +                          94:     uint8_t val;;APDS9960.c: 197:     val=wireReadDataByte(0x8F);
  7166  0ABD  308F               	movlw	143
  7167  0ABE  3189  21AC  318A   	fcall	_wireReadDataByte
  7168  0AC1  0020               	movlb	0	; select bank0
  7169  0AC2  00AA               	movwf	??_setProximityGain
  7170  0AC3  082A               	movf	??_setProximityGain,w
  7171  0AC4  00AC               	movwf	setProximityGain@val
  7172                           
  7173                           ;APDS9960.c: 199:     drive &= 0b00000011;
  7174  0AC5  3003               	movlw	3
  7175  0AC6  00AA               	movwf	??_setProximityGain
  7176  0AC7  082A               	movf	??_setProximityGain,w
  7177  0AC8  05AD               	andwf	setProximityGain@drive,f
  7178                           
  7179                           ;APDS9960.c: 200:     drive = drive << 2;
  7180  0AC9  082D               	movf	setProximityGain@drive,w
  7181  0ACA  00AA               	movwf	??_setProximityGain
  7182  0ACB  3001               	movlw	1
  7183  0ACC                     u6095:	
  7184  0ACC  35AA               	lslf	??_setProximityGain,f
  7185  0ACD  3EFF               	addlw	-1
  7186  0ACE  1D03               	skipz
  7187  0ACF  2ACC               	goto	u6095
  7188  0AD0  352A               	lslf	??_setProximityGain,w
  7189  0AD1  00AB               	movwf	??_setProximityGain+1
  7190  0AD2  082B               	movf	??_setProximityGain+1,w
  7191  0AD3  00AD               	movwf	setProximityGain@drive
  7192                           
  7193                           ;APDS9960.c: 201:     val &= 0b11110011;
  7194  0AD4  30F3               	movlw	243
  7195  0AD5  00AA               	movwf	??_setProximityGain
  7196  0AD6  082A               	movf	??_setProximityGain,w
  7197  0AD7  05AC               	andwf	setProximityGain@val,f
  7198                           
  7199                           ;APDS9960.c: 202:     val |= drive;
  7200  0AD8  082D               	movf	setProximityGain@drive,w
  7201  0AD9  00AA               	movwf	??_setProximityGain
  7202  0ADA  082A               	movf	??_setProximityGain,w
  7203  0ADB  04AC               	iorwf	setProximityGain@val,f
  7204                           
  7205                           ;APDS9960.c: 205:     if( !wireWriteDataByte(0x8F, val) ) {
  7206  0ADC  082C               	movf	setProximityGain@val,w
  7207  0ADD  00AA               	movwf	??_setProximityGain
  7208  0ADE  082A               	movf	??_setProximityGain,w
  7209  0ADF  00A6               	movwf	wireWriteDataByte@val
  7210  0AE0  308F               	movlw	143
  7211  0AE1  3188  20FF         	fcall	_wireWriteDataByte
  7212  0AE3  0008               	return
  7213  0AE4                     __end_of_setProximityGain:	
  7214                           
  7215                           	psect	text3
  7216  088B                     __ptext3:	
  7217 ;; *************** function _setProxIntLowThresh *****************
  7218 ;; Defined at:
  7219 ;;		line 234 in file "APDS9960.c"
  7220 ;; Parameters:    Size  Location     Type
  7221 ;;  threshold       1    wreg     unsigned char 
  7222 ;; Auto vars:     Size  Location     Type
  7223 ;;  threshold       1   11[BANK0 ] unsigned char 
  7224 ;; Return value:  Size  Location     Type
  7225 ;;                  1    wreg      _Bool 
  7226 ;; Registers used:
  7227 ;;		wreg, status,2, status,0, pclath, cstack
  7228 ;; Tracked objects:
  7229 ;;		On entry : 0/0
  7230 ;;		On exit  : 0/0
  7231 ;;		Unchanged: 0/0
  7232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7233 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7234 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7235 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7236 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7237 ;;Total ram usage:        2 bytes
  7238 ;; Hardware stack levels used:    1
  7239 ;; Hardware stack levels required when called:    8
  7240 ;; This function calls:
  7241 ;;		_wireWriteDataByte
  7242 ;; This function is called by:
  7243 ;;		_initialize
  7244 ;; This function uses a non-reentrant model
  7245 ;;
  7246                           
  7247                           
  7248                           ;psect for function _setProxIntLowThresh
  7249  088B                     _setProxIntLowThresh:	
  7250                           
  7251                           ;incstack = 0
  7252                           ; Regs used in _setProxIntLowThresh: [wreg+status,2+status,0+pclath+cstack]
  7253                           ;setProxIntLowThresh@threshold stored from wreg
  7254  088B  0020               	movlb	0	; select bank0
  7255  088C  00AB               	movwf	setProxIntLowThresh@threshold
  7256                           
  7257                           ;APDS9960.c: 234: _Bool setProxIntLowThresh(uint8_t threshold);APDS9960.c: 235: {;APDS99
      +                          60.c: 236:     if( !wireWriteDataByte(0x89, threshold) ) {
  7258  088D  082B               	movf	setProxIntLowThresh@threshold,w
  7259  088E  00AA               	movwf	??_setProxIntLowThresh
  7260  088F  082A               	movf	??_setProxIntLowThresh,w
  7261  0890  00A6               	movwf	wireWriteDataByte@val
  7262  0891  3089               	movlw	137
  7263  0892  3188  20FF  3188   	fcall	_wireWriteDataByte
  7264  0895  0020               	movlb	0	; select bank0
  7265  0896  0826               	movf	?_wireWriteDataByte,w
  7266  0897  0427               	iorwf	?_wireWriteDataByte+1,w
  7267  0898  1D03               	btfss	3,2
  7268  0899  289C               	goto	l7130
  7269                           
  7270                           ;APDS9960.c: 237:         return 0;
  7271  089A  3000               	movlw	0
  7272  089B  0008               	return
  7273  089C                     l7130:	
  7274                           
  7275                           ;APDS9960.c: 240:     return 1;
  7276  089C  3001               	movlw	1
  7277  089D  0008               	return
  7278  089E                     __end_of_setProxIntLowThresh:	
  7279                           
  7280                           	psect	text4
  7281  0878                     __ptext4:	
  7282 ;; *************** function _setProxIntHighThresh *****************
  7283 ;; Defined at:
  7284 ;;		line 244 in file "APDS9960.c"
  7285 ;; Parameters:    Size  Location     Type
  7286 ;;  threshold       1    wreg     unsigned char 
  7287 ;; Auto vars:     Size  Location     Type
  7288 ;;  threshold       1   11[BANK0 ] unsigned char 
  7289 ;; Return value:  Size  Location     Type
  7290 ;;                  1    wreg      _Bool 
  7291 ;; Registers used:
  7292 ;;		wreg, status,2, status,0, pclath, cstack
  7293 ;; Tracked objects:
  7294 ;;		On entry : 0/0
  7295 ;;		On exit  : 0/0
  7296 ;;		Unchanged: 0/0
  7297 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7298 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7299 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7300 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7301 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7302 ;;Total ram usage:        2 bytes
  7303 ;; Hardware stack levels used:    1
  7304 ;; Hardware stack levels required when called:    8
  7305 ;; This function calls:
  7306 ;;		_wireWriteDataByte
  7307 ;; This function is called by:
  7308 ;;		_initialize
  7309 ;; This function uses a non-reentrant model
  7310 ;;
  7311                           
  7312                           
  7313                           ;psect for function _setProxIntHighThresh
  7314  0878                     _setProxIntHighThresh:	
  7315                           
  7316                           ;incstack = 0
  7317                           ; Regs used in _setProxIntHighThresh: [wreg+status,2+status,0+pclath+cstack]
  7318                           ;setProxIntHighThresh@threshold stored from wreg
  7319  0878  0020               	movlb	0	; select bank0
  7320  0879  00AB               	movwf	setProxIntHighThresh@threshold
  7321                           
  7322                           ;APDS9960.c: 244: _Bool setProxIntHighThresh(uint8_t threshold);APDS9960.c: 245: {;APDS9
      +                          960.c: 246:     if( !wireWriteDataByte(0x8B, threshold) ) {
  7323  087A  082B               	movf	setProxIntHighThresh@threshold,w
  7324  087B  00AA               	movwf	??_setProxIntHighThresh
  7325  087C  082A               	movf	??_setProxIntHighThresh,w
  7326  087D  00A6               	movwf	wireWriteDataByte@val
  7327  087E  308B               	movlw	139
  7328  087F  3188  20FF  3188   	fcall	_wireWriteDataByte
  7329  0882  0020               	movlb	0	; select bank0
  7330  0883  0826               	movf	?_wireWriteDataByte,w
  7331  0884  0427               	iorwf	?_wireWriteDataByte+1,w
  7332  0885  1D03               	btfss	3,2
  7333  0886  2889               	goto	l7140
  7334                           
  7335                           ;APDS9960.c: 247:         return 0;
  7336  0887  3000               	movlw	0
  7337  0888  0008               	return
  7338  0889                     l7140:	
  7339                           
  7340                           ;APDS9960.c: 250:     return 1;
  7341  0889  3001               	movlw	1
  7342  088A  0008               	return
  7343  088B                     __end_of_setProxIntHighThresh:	
  7344                           
  7345                           	psect	text5
  7346  0A6B                     __ptext5:	
  7347 ;; *************** function _setLightIntLowThreshold *****************
  7348 ;; Defined at:
  7349 ;;		line 254 in file "APDS9960.c"
  7350 ;; Parameters:    Size  Location     Type
  7351 ;;  threshold       2   10[BANK0 ] unsigned short 
  7352 ;; Auto vars:     Size  Location     Type
  7353 ;;  val_high        1   14[BANK0 ] unsigned char 
  7354 ;;  val_low         1   13[BANK0 ] unsigned char 
  7355 ;; Return value:  Size  Location     Type
  7356 ;;                  1    wreg      _Bool 
  7357 ;; Registers used:
  7358 ;;		wreg, status,2, status,0, pclath, cstack
  7359 ;; Tracked objects:
  7360 ;;		On entry : 0/0
  7361 ;;		On exit  : 0/0
  7362 ;;		Unchanged: 0/0
  7363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7364 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7365 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7366 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7367 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7368 ;;Total ram usage:        5 bytes
  7369 ;; Hardware stack levels used:    1
  7370 ;; Hardware stack levels required when called:    8
  7371 ;; This function calls:
  7372 ;;		_wireWriteDataByte
  7373 ;; This function is called by:
  7374 ;;		_initialize
  7375 ;; This function uses a non-reentrant model
  7376 ;;
  7377                           
  7378                           
  7379                           ;psect for function _setLightIntLowThreshold
  7380  0A6B                     _setLightIntLowThreshold:	
  7381                           
  7382                           ;APDS9960.c: 254: _Bool setLightIntLowThreshold(uint16_t threshold);APDS9960.c: 255: {;A
      +                          PDS9960.c: 256:     uint8_t val_low;;APDS9960.c: 257:     uint8_t val_high;;APDS9960.c: 
      +                          260:     val_low = threshold & 0x00FF;
  7383                           
  7384                           ;incstack = 0
  7385                           ; Regs used in _setLightIntLowThreshold: [wreg+status,2+status,0+pclath+cstack]
  7386  0A6B  0020               	movlb	0	; select bank0
  7387  0A6C  082A               	movf	setLightIntLowThreshold@threshold,w
  7388  0A6D  00AC               	movwf	??_setLightIntLowThreshold
  7389  0A6E  082C               	movf	??_setLightIntLowThreshold,w
  7390  0A6F  00AD               	movwf	setLightIntLowThreshold@val_low
  7391                           
  7392                           ;APDS9960.c: 261:     val_high = (threshold & 0xFF00) >> 8;
  7393  0A70  082B               	movf	setLightIntLowThreshold@threshold+1,w
  7394  0A71  00AC               	movwf	??_setLightIntLowThreshold
  7395  0A72  082C               	movf	??_setLightIntLowThreshold,w
  7396  0A73  00AE               	movwf	setLightIntLowThreshold@val_high
  7397                           
  7398                           ;APDS9960.c: 264:     if( !wireWriteDataByte(0x84, val_low) ) {
  7399  0A74  082D               	movf	setLightIntLowThreshold@val_low,w
  7400  0A75  00AC               	movwf	??_setLightIntLowThreshold
  7401  0A76  082C               	movf	??_setLightIntLowThreshold,w
  7402  0A77  00A6               	movwf	wireWriteDataByte@val
  7403  0A78  3084               	movlw	132
  7404  0A79  3188  20FF  318A   	fcall	_wireWriteDataByte
  7405  0A7C  0020               	movlb	0	; select bank0
  7406  0A7D  0826               	movf	?_wireWriteDataByte,w
  7407  0A7E  0427               	iorwf	?_wireWriteDataByte+1,w
  7408  0A7F  1D03               	btfss	3,2
  7409  0A80  2A83               	goto	l7154
  7410  0A81                     l7150:	
  7411                           
  7412                           ;APDS9960.c: 265:         return 0;
  7413  0A81  3000               	movlw	0
  7414  0A82  0008               	return
  7415  0A83                     l7154:	
  7416                           
  7417                           ;APDS9960.c: 269:     if( !wireWriteDataByte(0x85, val_high) ) {
  7418  0A83  082E               	movf	setLightIntLowThreshold@val_high,w
  7419  0A84  00AC               	movwf	??_setLightIntLowThreshold
  7420  0A85  082C               	movf	??_setLightIntLowThreshold,w
  7421  0A86  00A6               	movwf	wireWriteDataByte@val
  7422  0A87  3085               	movlw	133
  7423  0A88  3188  20FF  318A   	fcall	_wireWriteDataByte
  7424  0A8B  0020               	movlb	0	; select bank0
  7425  0A8C  0826               	movf	?_wireWriteDataByte,w
  7426  0A8D  0427               	iorwf	?_wireWriteDataByte+1,w
  7427  0A8E  1903               	btfsc	3,2
  7428  0A8F  2A81               	goto	l7150
  7429                           
  7430                           ;APDS9960.c: 273:     return 1;
  7431  0A90  3001               	movlw	1
  7432  0A91  0008               	return
  7433  0A92                     __end_of_setLightIntLowThreshold:	
  7434                           
  7435                           	psect	text6
  7436  0A44                     __ptext6:	
  7437 ;; *************** function _setLightIntHighThreshold *****************
  7438 ;; Defined at:
  7439 ;;		line 277 in file "APDS9960.c"
  7440 ;; Parameters:    Size  Location     Type
  7441 ;;  threshold       2   10[BANK0 ] unsigned short 
  7442 ;; Auto vars:     Size  Location     Type
  7443 ;;  val_high        1   14[BANK0 ] unsigned char 
  7444 ;;  val_low         1   13[BANK0 ] unsigned char 
  7445 ;; Return value:  Size  Location     Type
  7446 ;;                  1    wreg      _Bool 
  7447 ;; Registers used:
  7448 ;;		wreg, status,2, status,0, pclath, cstack
  7449 ;; Tracked objects:
  7450 ;;		On entry : 0/0
  7451 ;;		On exit  : 0/0
  7452 ;;		Unchanged: 0/0
  7453 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7454 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7455 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7456 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7457 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7458 ;;Total ram usage:        5 bytes
  7459 ;; Hardware stack levels used:    1
  7460 ;; Hardware stack levels required when called:    8
  7461 ;; This function calls:
  7462 ;;		_wireWriteDataByte
  7463 ;; This function is called by:
  7464 ;;		_initialize
  7465 ;; This function uses a non-reentrant model
  7466 ;;
  7467                           
  7468                           
  7469                           ;psect for function _setLightIntHighThreshold
  7470  0A44                     _setLightIntHighThreshold:	
  7471                           
  7472                           ;APDS9960.c: 277: _Bool setLightIntHighThreshold(uint16_t threshold);APDS9960.c: 278: {;
      +                          APDS9960.c: 279:     uint8_t val_low;;APDS9960.c: 280:     uint8_t val_high;;APDS9960.c:
      +                           283:     val_low = threshold & 0x00FF;
  7473                           
  7474                           ;incstack = 0
  7475                           ; Regs used in _setLightIntHighThreshold: [wreg+status,2+status,0+pclath+cstack]
  7476  0A44  0020               	movlb	0	; select bank0
  7477  0A45  082A               	movf	setLightIntHighThreshold@threshold,w
  7478  0A46  00AC               	movwf	??_setLightIntHighThreshold
  7479  0A47  082C               	movf	??_setLightIntHighThreshold,w
  7480  0A48  00AD               	movwf	setLightIntHighThreshold@val_low
  7481                           
  7482                           ;APDS9960.c: 284:     val_high = (threshold & 0xFF00) >> 8;
  7483  0A49  082B               	movf	setLightIntHighThreshold@threshold+1,w
  7484  0A4A  00AC               	movwf	??_setLightIntHighThreshold
  7485  0A4B  082C               	movf	??_setLightIntHighThreshold,w
  7486  0A4C  00AE               	movwf	setLightIntHighThreshold@val_high
  7487                           
  7488                           ;APDS9960.c: 287:     if( !wireWriteDataByte(0x86, val_low) ) {
  7489  0A4D  082D               	movf	setLightIntHighThreshold@val_low,w
  7490  0A4E  00AC               	movwf	??_setLightIntHighThreshold
  7491  0A4F  082C               	movf	??_setLightIntHighThreshold,w
  7492  0A50  00A6               	movwf	wireWriteDataByte@val
  7493  0A51  3086               	movlw	134
  7494  0A52  3188  20FF  318A   	fcall	_wireWriteDataByte
  7495  0A55  0020               	movlb	0	; select bank0
  7496  0A56  0826               	movf	?_wireWriteDataByte,w
  7497  0A57  0427               	iorwf	?_wireWriteDataByte+1,w
  7498  0A58  1D03               	btfss	3,2
  7499  0A59  2A5C               	goto	l7174
  7500  0A5A                     l7170:	
  7501                           
  7502                           ;APDS9960.c: 288:         return 0;
  7503  0A5A  3000               	movlw	0
  7504  0A5B  0008               	return
  7505  0A5C                     l7174:	
  7506                           
  7507                           ;APDS9960.c: 292:     if( !wireWriteDataByte(0x87, val_high) ) {
  7508  0A5C  082E               	movf	setLightIntHighThreshold@val_high,w
  7509  0A5D  00AC               	movwf	??_setLightIntHighThreshold
  7510  0A5E  082C               	movf	??_setLightIntHighThreshold,w
  7511  0A5F  00A6               	movwf	wireWriteDataByte@val
  7512  0A60  3087               	movlw	135
  7513  0A61  3188  20FF  318A   	fcall	_wireWriteDataByte
  7514  0A64  0020               	movlb	0	; select bank0
  7515  0A65  0826               	movf	?_wireWriteDataByte,w
  7516  0A66  0427               	iorwf	?_wireWriteDataByte+1,w
  7517  0A67  1903               	btfsc	3,2
  7518  0A68  2A5A               	goto	l7170
  7519                           
  7520                           ;APDS9960.c: 296:     return 1;
  7521  0A69  3001               	movlw	1
  7522  0A6A  0008               	return
  7523  0A6B                     __end_of_setLightIntHighThreshold:	
  7524                           
  7525                           	psect	text7
  7526  0A92                     __ptext7:	
  7527 ;; *************** function _setLEDDrive *****************
  7528 ;; Defined at:
  7529 ;;		line 170 in file "APDS9960.c"
  7530 ;; Parameters:    Size  Location     Type
  7531 ;;  drive           1    wreg     unsigned char 
  7532 ;; Auto vars:     Size  Location     Type
  7533 ;;  drive           1   13[BANK0 ] unsigned char 
  7534 ;;  val             1   12[BANK0 ] unsigned char 
  7535 ;; Return value:  Size  Location     Type
  7536 ;;                  1    wreg      _Bool 
  7537 ;; Registers used:
  7538 ;;		wreg, status,2, status,0, pclath, cstack
  7539 ;; Tracked objects:
  7540 ;;		On entry : 0/0
  7541 ;;		On exit  : 0/0
  7542 ;;		Unchanged: 0/0
  7543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7544 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7545 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7546 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7547 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7548 ;;Total ram usage:        4 bytes
  7549 ;; Hardware stack levels used:    1
  7550 ;; Hardware stack levels required when called:    8
  7551 ;; This function calls:
  7552 ;;		_wireReadDataByte
  7553 ;;		_wireWriteDataByte
  7554 ;; This function is called by:
  7555 ;;		_initialize
  7556 ;; This function uses a non-reentrant model
  7557 ;;
  7558                           
  7559                           
  7560                           ;psect for function _setLEDDrive
  7561  0A92                     _setLEDDrive:	
  7562                           
  7563                           ;incstack = 0
  7564                           ; Regs used in _setLEDDrive: [wreg+status,2+status,0+pclath+cstack]
  7565                           ;setLEDDrive@drive stored from wreg
  7566  0A92  0020               	movlb	0	; select bank0
  7567  0A93  00AD               	movwf	setLEDDrive@drive
  7568                           
  7569                           ;APDS9960.c: 170: _Bool setLEDDrive(uint8_t drive);APDS9960.c: 171: {;APDS9960.c: 172:  
      +                             uint8_t val;;APDS9960.c: 175:     val=wireReadDataByte(0x8F);
  7570  0A94  308F               	movlw	143
  7571  0A95  3189  21AC  318A   	fcall	_wireReadDataByte
  7572  0A98  0020               	movlb	0	; select bank0
  7573  0A99  00AA               	movwf	??_setLEDDrive
  7574  0A9A  082A               	movf	??_setLEDDrive,w
  7575  0A9B  00AC               	movwf	setLEDDrive@val
  7576                           
  7577                           ;APDS9960.c: 178:     drive &= 0b00000011;
  7578  0A9C  3003               	movlw	3
  7579  0A9D  00AA               	movwf	??_setLEDDrive
  7580  0A9E  082A               	movf	??_setLEDDrive,w
  7581  0A9F  05AD               	andwf	setLEDDrive@drive,f
  7582                           
  7583                           ;APDS9960.c: 179:     drive = drive << 6;
  7584  0AA0  082D               	movf	setLEDDrive@drive,w
  7585  0AA1  00AA               	movwf	??_setLEDDrive
  7586  0AA2  3005               	movlw	5
  7587  0AA3                     u6085:	
  7588  0AA3  35AA               	lslf	??_setLEDDrive,f
  7589  0AA4  3EFF               	addlw	-1
  7590  0AA5  1D03               	skipz
  7591  0AA6  2AA3               	goto	u6085
  7592  0AA7  352A               	lslf	??_setLEDDrive,w
  7593  0AA8  00AB               	movwf	??_setLEDDrive+1
  7594  0AA9  082B               	movf	??_setLEDDrive+1,w
  7595  0AAA  00AD               	movwf	setLEDDrive@drive
  7596                           
  7597                           ;APDS9960.c: 180:     val &= 0b00111111;
  7598  0AAB  303F               	movlw	63
  7599  0AAC  00AA               	movwf	??_setLEDDrive
  7600  0AAD  082A               	movf	??_setLEDDrive,w
  7601  0AAE  05AC               	andwf	setLEDDrive@val,f
  7602                           
  7603                           ;APDS9960.c: 181:     val |= drive;
  7604  0AAF  082D               	movf	setLEDDrive@drive,w
  7605  0AB0  00AA               	movwf	??_setLEDDrive
  7606  0AB1  082A               	movf	??_setLEDDrive,w
  7607  0AB2  04AC               	iorwf	setLEDDrive@val,f
  7608                           
  7609                           ;APDS9960.c: 184:     if( !wireWriteDataByte(0x8F, val) ) {
  7610  0AB3  082C               	movf	setLEDDrive@val,w
  7611  0AB4  00AA               	movwf	??_setLEDDrive
  7612  0AB5  082A               	movf	??_setLEDDrive,w
  7613  0AB6  00A6               	movwf	wireWriteDataByte@val
  7614  0AB7  308F               	movlw	143
  7615  0AB8  3188  20FF         	fcall	_wireWriteDataByte
  7616  0ABA  0008               	return
  7617  0ABB                     __end_of_setLEDDrive:	
  7618                           
  7619                           	psect	text8
  7620  0A1D                     __ptext8:	
  7621 ;; *************** function _setGestureWaitTime *****************
  7622 ;; Defined at:
  7623 ;;		line 366 in file "APDS9960.c"
  7624 ;; Parameters:    Size  Location     Type
  7625 ;;  time            1    wreg     unsigned char 
  7626 ;; Auto vars:     Size  Location     Type
  7627 ;;  time            1   11[BANK0 ] unsigned char 
  7628 ;;  val             1   12[BANK0 ] unsigned char 
  7629 ;; Return value:  Size  Location     Type
  7630 ;;                  1    wreg      _Bool 
  7631 ;; Registers used:
  7632 ;;		wreg, status,2, status,0, pclath, cstack
  7633 ;; Tracked objects:
  7634 ;;		On entry : 0/0
  7635 ;;		On exit  : 0/0
  7636 ;;		Unchanged: 0/0
  7637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7638 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7639 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7640 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7641 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7642 ;;Total ram usage:        3 bytes
  7643 ;; Hardware stack levels used:    1
  7644 ;; Hardware stack levels required when called:    8
  7645 ;; This function calls:
  7646 ;;		_wireReadDataByte
  7647 ;;		_wireWriteDataByte
  7648 ;; This function is called by:
  7649 ;;		_initialize
  7650 ;; This function uses a non-reentrant model
  7651 ;;
  7652                           
  7653                           
  7654                           ;psect for function _setGestureWaitTime
  7655  0A1D                     _setGestureWaitTime:	
  7656                           
  7657                           ;incstack = 0
  7658                           ; Regs used in _setGestureWaitTime: [wreg+status,2+status,0+pclath+cstack]
  7659                           ;setGestureWaitTime@time stored from wreg
  7660  0A1D  0020               	movlb	0	; select bank0
  7661  0A1E  00AB               	movwf	setGestureWaitTime@time
  7662                           
  7663                           ;APDS9960.c: 366: _Bool setGestureWaitTime(uint8_t time);APDS9960.c: 367: {;APDS9960.c: 
      +                          368:     uint8_t val;;APDS9960.c: 371:     val = wireReadDataByte(0xA3);
  7664  0A1F  30A3               	movlw	163
  7665  0A20  3189  21AC  318A   	fcall	_wireReadDataByte
  7666  0A23  0020               	movlb	0	; select bank0
  7667  0A24  00AA               	movwf	??_setGestureWaitTime
  7668  0A25  082A               	movf	??_setGestureWaitTime,w
  7669  0A26  00AC               	movwf	setGestureWaitTime@val
  7670                           
  7671                           ;APDS9960.c: 374:     time &= 0b00000111;
  7672  0A27  3007               	movlw	7
  7673  0A28  00AA               	movwf	??_setGestureWaitTime
  7674  0A29  082A               	movf	??_setGestureWaitTime,w
  7675  0A2A  05AB               	andwf	setGestureWaitTime@time,f
  7676                           
  7677                           ;APDS9960.c: 375:     val &= 0b11111000;
  7678  0A2B  30F8               	movlw	248
  7679  0A2C  00AA               	movwf	??_setGestureWaitTime
  7680  0A2D  082A               	movf	??_setGestureWaitTime,w
  7681  0A2E  05AC               	andwf	setGestureWaitTime@val,f
  7682                           
  7683                           ;APDS9960.c: 376:     val |= time;
  7684  0A2F  082B               	movf	setGestureWaitTime@time,w
  7685  0A30  00AA               	movwf	??_setGestureWaitTime
  7686  0A31  082A               	movf	??_setGestureWaitTime,w
  7687  0A32  04AC               	iorwf	setGestureWaitTime@val,f
  7688                           
  7689                           ;APDS9960.c: 379:     if( !wireWriteDataByte(0xA3, val) ) {
  7690  0A33  082C               	movf	setGestureWaitTime@val,w
  7691  0A34  00AA               	movwf	??_setGestureWaitTime
  7692  0A35  082A               	movf	??_setGestureWaitTime,w
  7693  0A36  00A6               	movwf	wireWriteDataByte@val
  7694  0A37  30A3               	movlw	163
  7695  0A38  3188  20FF  318A   	fcall	_wireWriteDataByte
  7696  0A3B  0020               	movlb	0	; select bank0
  7697  0A3C  0826               	movf	?_wireWriteDataByte,w
  7698  0A3D  0427               	iorwf	?_wireWriteDataByte+1,w
  7699  0A3E  1D03               	btfss	3,2
  7700  0A3F  2A42               	goto	l7254
  7701                           
  7702                           ;APDS9960.c: 380:         return 0;
  7703  0A40  3000               	movlw	0
  7704  0A41  0008               	return
  7705  0A42                     l7254:	
  7706                           
  7707                           ;APDS9960.c: 383:     return 1;
  7708  0A42  3001               	movlw	1
  7709  0A43  0008               	return
  7710  0A44                     __end_of_setGestureWaitTime:	
  7711                           
  7712                           	psect	text9
  7713  0BCF                     __ptext9:	
  7714 ;; *************** function _setGestureLEDDrive *****************
  7715 ;; Defined at:
  7716 ;;		line 343 in file "APDS9960.c"
  7717 ;; Parameters:    Size  Location     Type
  7718 ;;  drive           1    wreg     unsigned char 
  7719 ;; Auto vars:     Size  Location     Type
  7720 ;;  drive           1   13[BANK0 ] unsigned char 
  7721 ;;  val             1   12[BANK0 ] unsigned char 
  7722 ;; Return value:  Size  Location     Type
  7723 ;;                  1    wreg      _Bool 
  7724 ;; Registers used:
  7725 ;;		wreg, status,2, status,0, pclath, cstack
  7726 ;; Tracked objects:
  7727 ;;		On entry : 0/0
  7728 ;;		On exit  : 0/0
  7729 ;;		Unchanged: 0/0
  7730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7731 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7732 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7733 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7734 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7735 ;;Total ram usage:        4 bytes
  7736 ;; Hardware stack levels used:    1
  7737 ;; Hardware stack levels required when called:    8
  7738 ;; This function calls:
  7739 ;;		_wireReadDataByte
  7740 ;;		_wireWriteDataByte
  7741 ;; This function is called by:
  7742 ;;		_initialize
  7743 ;; This function uses a non-reentrant model
  7744 ;;
  7745                           
  7746                           
  7747                           ;psect for function _setGestureLEDDrive
  7748  0BCF                     _setGestureLEDDrive:	
  7749                           
  7750                           ;incstack = 0
  7751                           ; Regs used in _setGestureLEDDrive: [wreg+status,2+status,0+pclath+cstack]
  7752                           ;setGestureLEDDrive@drive stored from wreg
  7753  0BCF  0020               	movlb	0	; select bank0
  7754  0BD0  00AD               	movwf	setGestureLEDDrive@drive
  7755                           
  7756                           ;APDS9960.c: 343: _Bool setGestureLEDDrive(uint8_t drive);APDS9960.c: 344: {;APDS9960.c:
      +                           345:     uint8_t val;;APDS9960.c: 348:     val = wireReadDataByte(0xA3);
  7757  0BD1  30A3               	movlw	163
  7758  0BD2  3189  21AC  318B   	fcall	_wireReadDataByte
  7759  0BD5  0020               	movlb	0	; select bank0
  7760  0BD6  00AA               	movwf	??_setGestureLEDDrive
  7761  0BD7  082A               	movf	??_setGestureLEDDrive,w
  7762  0BD8  00AC               	movwf	setGestureLEDDrive@val
  7763                           
  7764                           ;APDS9960.c: 352:     drive &= 0b00000011;
  7765  0BD9  3003               	movlw	3
  7766  0BDA  00AA               	movwf	??_setGestureLEDDrive
  7767  0BDB  082A               	movf	??_setGestureLEDDrive,w
  7768  0BDC  05AD               	andwf	setGestureLEDDrive@drive,f
  7769                           
  7770                           ;APDS9960.c: 353:     drive = drive << 3;
  7771  0BDD  082D               	movf	setGestureLEDDrive@drive,w
  7772  0BDE  00AA               	movwf	??_setGestureLEDDrive
  7773  0BDF  3002               	movlw	2
  7774  0BE0                     u6205:	
  7775  0BE0  35AA               	lslf	??_setGestureLEDDrive,f
  7776  0BE1  3EFF               	addlw	-1
  7777  0BE2  1D03               	skipz
  7778  0BE3  2BE0               	goto	u6205
  7779  0BE4  352A               	lslf	??_setGestureLEDDrive,w
  7780  0BE5  00AB               	movwf	??_setGestureLEDDrive+1
  7781  0BE6  082B               	movf	??_setGestureLEDDrive+1,w
  7782  0BE7  00AD               	movwf	setGestureLEDDrive@drive
  7783                           
  7784                           ;APDS9960.c: 354:     val &= 0b11100111;
  7785  0BE8  30E7               	movlw	231
  7786  0BE9  00AA               	movwf	??_setGestureLEDDrive
  7787  0BEA  082A               	movf	??_setGestureLEDDrive,w
  7788  0BEB  05AC               	andwf	setGestureLEDDrive@val,f
  7789                           
  7790                           ;APDS9960.c: 355:     val |= drive;
  7791  0BEC  082D               	movf	setGestureLEDDrive@drive,w
  7792  0BED  00AA               	movwf	??_setGestureLEDDrive
  7793  0BEE  082A               	movf	??_setGestureLEDDrive,w
  7794  0BEF  04AC               	iorwf	setGestureLEDDrive@val,f
  7795                           
  7796                           ;APDS9960.c: 358:     if( !wireWriteDataByte(0xA3, val) ) {
  7797  0BF0  082C               	movf	setGestureLEDDrive@val,w
  7798  0BF1  00AA               	movwf	??_setGestureLEDDrive
  7799  0BF2  082A               	movf	??_setGestureLEDDrive,w
  7800  0BF3  00A6               	movwf	wireWriteDataByte@val
  7801  0BF4  30A3               	movlw	163
  7802  0BF5  3188  20FF  318B   	fcall	_wireWriteDataByte
  7803  0BF8  0020               	movlb	0	; select bank0
  7804  0BF9  0826               	movf	?_wireWriteDataByte,w
  7805  0BFA  0427               	iorwf	?_wireWriteDataByte+1,w
  7806  0BFB  1D03               	btfss	3,2
  7807  0BFC  2BFF               	goto	l7236
  7808                           
  7809                           ;APDS9960.c: 359:         return 0;
  7810  0BFD  3000               	movlw	0
  7811  0BFE  0008               	return
  7812  0BFF                     l7236:	
  7813                           
  7814                           ;APDS9960.c: 362:     return 1;
  7815  0BFF  3001               	movlw	1
  7816  0C00  0008               	return
  7817  0C01                     __end_of_setGestureLEDDrive:	
  7818                           
  7819                           	psect	text10
  7820  0B9D                     __ptext10:	
  7821 ;; *************** function _setGestureGain *****************
  7822 ;; Defined at:
  7823 ;;		line 320 in file "APDS9960.c"
  7824 ;; Parameters:    Size  Location     Type
  7825 ;;  gain            1    wreg     unsigned char 
  7826 ;; Auto vars:     Size  Location     Type
  7827 ;;  gain            1   13[BANK0 ] unsigned char 
  7828 ;;  val             1   12[BANK0 ] unsigned char 
  7829 ;; Return value:  Size  Location     Type
  7830 ;;                  1    wreg      _Bool 
  7831 ;; Registers used:
  7832 ;;		wreg, status,2, status,0, pclath, cstack
  7833 ;; Tracked objects:
  7834 ;;		On entry : 0/0
  7835 ;;		On exit  : 0/0
  7836 ;;		Unchanged: 0/0
  7837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7838 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7839 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7840 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7841 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7842 ;;Total ram usage:        4 bytes
  7843 ;; Hardware stack levels used:    1
  7844 ;; Hardware stack levels required when called:    8
  7845 ;; This function calls:
  7846 ;;		_wireReadDataByte
  7847 ;;		_wireWriteDataByte
  7848 ;; This function is called by:
  7849 ;;		_initialize
  7850 ;; This function uses a non-reentrant model
  7851 ;;
  7852                           
  7853                           
  7854                           ;psect for function _setGestureGain
  7855  0B9D                     _setGestureGain:	
  7856                           
  7857                           ;incstack = 0
  7858                           ; Regs used in _setGestureGain: [wreg+status,2+status,0+pclath+cstack]
  7859                           ;setGestureGain@gain stored from wreg
  7860  0B9D  0020               	movlb	0	; select bank0
  7861  0B9E  00AD               	movwf	setGestureGain@gain
  7862                           
  7863                           ;APDS9960.c: 320: _Bool setGestureGain(uint8_t gain);APDS9960.c: 321: {;APDS9960.c: 322:
      +                               uint8_t val;;APDS9960.c: 325:     val = wireReadDataByte(0xA3);
  7864  0B9F  30A3               	movlw	163
  7865  0BA0  3189  21AC  318B   	fcall	_wireReadDataByte
  7866  0BA3  0020               	movlb	0	; select bank0
  7867  0BA4  00AA               	movwf	??_setGestureGain
  7868  0BA5  082A               	movf	??_setGestureGain,w
  7869  0BA6  00AC               	movwf	setGestureGain@val
  7870                           
  7871                           ;APDS9960.c: 329:     gain &= 0b00000011;
  7872  0BA7  3003               	movlw	3
  7873  0BA8  00AA               	movwf	??_setGestureGain
  7874  0BA9  082A               	movf	??_setGestureGain,w
  7875  0BAA  05AD               	andwf	setGestureGain@gain,f
  7876                           
  7877                           ;APDS9960.c: 330:     gain = gain << 5;
  7878  0BAB  082D               	movf	setGestureGain@gain,w
  7879  0BAC  00AA               	movwf	??_setGestureGain
  7880  0BAD  3004               	movlw	4
  7881  0BAE                     u6185:	
  7882  0BAE  35AA               	lslf	??_setGestureGain,f
  7883  0BAF  3EFF               	addlw	-1
  7884  0BB0  1D03               	skipz
  7885  0BB1  2BAE               	goto	u6185
  7886  0BB2  352A               	lslf	??_setGestureGain,w
  7887  0BB3  00AB               	movwf	??_setGestureGain+1
  7888  0BB4  082B               	movf	??_setGestureGain+1,w
  7889  0BB5  00AD               	movwf	setGestureGain@gain
  7890                           
  7891                           ;APDS9960.c: 331:     val &= 0b10011111;
  7892  0BB6  309F               	movlw	159
  7893  0BB7  00AA               	movwf	??_setGestureGain
  7894  0BB8  082A               	movf	??_setGestureGain,w
  7895  0BB9  05AC               	andwf	setGestureGain@val,f
  7896                           
  7897                           ;APDS9960.c: 332:     val |= gain;
  7898  0BBA  082D               	movf	setGestureGain@gain,w
  7899  0BBB  00AA               	movwf	??_setGestureGain
  7900  0BBC  082A               	movf	??_setGestureGain,w
  7901  0BBD  04AC               	iorwf	setGestureGain@val,f
  7902                           
  7903                           ;APDS9960.c: 335:     if( !wireWriteDataByte(0xA3, val) ) {
  7904  0BBE  082C               	movf	setGestureGain@val,w
  7905  0BBF  00AA               	movwf	??_setGestureGain
  7906  0BC0  082A               	movf	??_setGestureGain,w
  7907  0BC1  00A6               	movwf	wireWriteDataByte@val
  7908  0BC2  30A3               	movlw	163
  7909  0BC3  3188  20FF  318B   	fcall	_wireWriteDataByte
  7910  0BC6  0020               	movlb	0	; select bank0
  7911  0BC7  0826               	movf	?_wireWriteDataByte,w
  7912  0BC8  0427               	iorwf	?_wireWriteDataByte+1,w
  7913  0BC9  1D03               	btfss	3,2
  7914  0BCA  2BCD               	goto	l7218
  7915                           
  7916                           ;APDS9960.c: 336:         return 0;
  7917  0BCB  3000               	movlw	0
  7918  0BCC  0008               	return
  7919  0BCD                     l7218:	
  7920                           
  7921                           ;APDS9960.c: 339:     return 1;
  7922  0BCD  3001               	movlw	1
  7923  0BCE  0008               	return
  7924  0BCF                     __end_of_setGestureGain:	
  7925                           
  7926                           	psect	text11
  7927  0865                     __ptext11:	
  7928 ;; *************** function _setGestureExitThresh *****************
  7929 ;; Defined at:
  7930 ;;		line 310 in file "APDS9960.c"
  7931 ;; Parameters:    Size  Location     Type
  7932 ;;  threshold       1    wreg     unsigned char 
  7933 ;; Auto vars:     Size  Location     Type
  7934 ;;  threshold       1   11[BANK0 ] unsigned char 
  7935 ;; Return value:  Size  Location     Type
  7936 ;;                  1    wreg      _Bool 
  7937 ;; Registers used:
  7938 ;;		wreg, status,2, status,0, pclath, cstack
  7939 ;; Tracked objects:
  7940 ;;		On entry : 0/0
  7941 ;;		On exit  : 0/0
  7942 ;;		Unchanged: 0/0
  7943 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7944 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7945 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7946 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7947 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7948 ;;Total ram usage:        2 bytes
  7949 ;; Hardware stack levels used:    1
  7950 ;; Hardware stack levels required when called:    8
  7951 ;; This function calls:
  7952 ;;		_wireWriteDataByte
  7953 ;; This function is called by:
  7954 ;;		_initialize
  7955 ;; This function uses a non-reentrant model
  7956 ;;
  7957                           
  7958                           
  7959                           ;psect for function _setGestureExitThresh
  7960  0865                     _setGestureExitThresh:	
  7961                           
  7962                           ;incstack = 0
  7963                           ; Regs used in _setGestureExitThresh: [wreg+status,2+status,0+pclath+cstack]
  7964                           ;setGestureExitThresh@threshold stored from wreg
  7965  0865  0020               	movlb	0	; select bank0
  7966  0866  00AB               	movwf	setGestureExitThresh@threshold
  7967                           
  7968                           ;APDS9960.c: 310: _Bool setGestureExitThresh(uint8_t threshold);APDS9960.c: 311: {;APDS9
      +                          960.c: 312:     if( !wireWriteDataByte(0xA1, threshold) ) {
  7969  0867  082B               	movf	setGestureExitThresh@threshold,w
  7970  0868  00AA               	movwf	??_setGestureExitThresh
  7971  0869  082A               	movf	??_setGestureExitThresh,w
  7972  086A  00A6               	movwf	wireWriteDataByte@val
  7973  086B  30A1               	movlw	161
  7974  086C  3188  20FF  3188   	fcall	_wireWriteDataByte
  7975  086F  0020               	movlb	0	; select bank0
  7976  0870  0826               	movf	?_wireWriteDataByte,w
  7977  0871  0427               	iorwf	?_wireWriteDataByte+1,w
  7978  0872  1D03               	btfss	3,2
  7979  0873  2876               	goto	l7200
  7980                           
  7981                           ;APDS9960.c: 313:         return 0;
  7982  0874  3000               	movlw	0
  7983  0875  0008               	return
  7984  0876                     l7200:	
  7985                           
  7986                           ;APDS9960.c: 316:     return 1;
  7987  0876  3001               	movlw	1
  7988  0877  0008               	return
  7989  0878                     __end_of_setGestureExitThresh:	
  7990                           
  7991                           	psect	text12
  7992  0852                     __ptext12:	
  7993 ;; *************** function _setGestureEnterThresh *****************
  7994 ;; Defined at:
  7995 ;;		line 300 in file "APDS9960.c"
  7996 ;; Parameters:    Size  Location     Type
  7997 ;;  threshold       1    wreg     unsigned char 
  7998 ;; Auto vars:     Size  Location     Type
  7999 ;;  threshold       1   11[BANK0 ] unsigned char 
  8000 ;; Return value:  Size  Location     Type
  8001 ;;                  1    wreg      _Bool 
  8002 ;; Registers used:
  8003 ;;		wreg, status,2, status,0, pclath, cstack
  8004 ;; Tracked objects:
  8005 ;;		On entry : 0/0
  8006 ;;		On exit  : 0/0
  8007 ;;		Unchanged: 0/0
  8008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8010 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8011 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8012 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8013 ;;Total ram usage:        2 bytes
  8014 ;; Hardware stack levels used:    1
  8015 ;; Hardware stack levels required when called:    8
  8016 ;; This function calls:
  8017 ;;		_wireWriteDataByte
  8018 ;; This function is called by:
  8019 ;;		_initialize
  8020 ;; This function uses a non-reentrant model
  8021 ;;
  8022                           
  8023                           
  8024                           ;psect for function _setGestureEnterThresh
  8025  0852                     _setGestureEnterThresh:	
  8026                           
  8027                           ;incstack = 0
  8028                           ; Regs used in _setGestureEnterThresh: [wreg+status,2+status,0+pclath+cstack]
  8029                           ;setGestureEnterThresh@threshold stored from wreg
  8030  0852  0020               	movlb	0	; select bank0
  8031  0853  00AB               	movwf	setGestureEnterThresh@threshold
  8032                           
  8033                           ;APDS9960.c: 300: _Bool setGestureEnterThresh(uint8_t threshold);APDS9960.c: 301: {;APDS
      +                          9960.c: 302:     if( !wireWriteDataByte(0xA0, threshold) ) {
  8034  0854  082B               	movf	setGestureEnterThresh@threshold,w
  8035  0855  00AA               	movwf	??_setGestureEnterThresh
  8036  0856  082A               	movf	??_setGestureEnterThresh,w
  8037  0857  00A6               	movwf	wireWriteDataByte@val
  8038  0858  30A0               	movlw	160
  8039  0859  3188  20FF  3188   	fcall	_wireWriteDataByte
  8040  085C  0020               	movlb	0	; select bank0
  8041  085D  0826               	movf	?_wireWriteDataByte,w
  8042  085E  0427               	iorwf	?_wireWriteDataByte+1,w
  8043  085F  1D03               	btfss	3,2
  8044  0860  2863               	goto	l7190
  8045                           
  8046                           ;APDS9960.c: 303:         return 0;
  8047  0861  3000               	movlw	0
  8048  0862  0008               	return
  8049  0863                     l7190:	
  8050                           
  8051                           ;APDS9960.c: 306:     return 1;
  8052  0863  3001               	movlw	1
  8053  0864  0008               	return
  8054  0865                     __end_of_setGestureEnterThresh:	
  8055                           
  8056                           	psect	text13
  8057  098E                     __ptext13:	
  8058 ;; *************** function _setAmbientLightGain *****************
  8059 ;; Defined at:
  8060 ;;		line 213 in file "APDS9960.c"
  8061 ;; Parameters:    Size  Location     Type
  8062 ;;  drive           1    wreg     unsigned char 
  8063 ;; Auto vars:     Size  Location     Type
  8064 ;;  drive           1   11[BANK0 ] unsigned char 
  8065 ;;  val             1   12[BANK0 ] unsigned char 
  8066 ;; Return value:  Size  Location     Type
  8067 ;;                  1    wreg      _Bool 
  8068 ;; Registers used:
  8069 ;;		wreg, status,2, status,0, pclath, cstack
  8070 ;; Tracked objects:
  8071 ;;		On entry : 0/0
  8072 ;;		On exit  : 0/0
  8073 ;;		Unchanged: 0/0
  8074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8075 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8076 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8077 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8078 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8079 ;;Total ram usage:        3 bytes
  8080 ;; Hardware stack levels used:    1
  8081 ;; Hardware stack levels required when called:    8
  8082 ;; This function calls:
  8083 ;;		_wireReadDataByte
  8084 ;;		_wireWriteDataByte
  8085 ;; This function is called by:
  8086 ;;		_initialize
  8087 ;; This function uses a non-reentrant model
  8088 ;;
  8089                           
  8090                           
  8091                           ;psect for function _setAmbientLightGain
  8092  098E                     _setAmbientLightGain:	
  8093                           
  8094                           ;incstack = 0
  8095                           ; Regs used in _setAmbientLightGain: [wreg+status,2+status,0+pclath+cstack]
  8096                           ;setAmbientLightGain@drive stored from wreg
  8097  098E  0020               	movlb	0	; select bank0
  8098  098F  00AB               	movwf	setAmbientLightGain@drive
  8099                           
  8100                           ;APDS9960.c: 213: _Bool setAmbientLightGain(uint8_t drive);APDS9960.c: 214: {;APDS9960.c
      +                          : 215:     uint8_t val;;APDS9960.c: 218:     val= wireReadDataByte(0x8F);
  8101  0990  308F               	movlw	143
  8102  0991  3189  21AC  3189   	fcall	_wireReadDataByte
  8103  0994  0020               	movlb	0	; select bank0
  8104  0995  00AA               	movwf	??_setAmbientLightGain
  8105  0996  082A               	movf	??_setAmbientLightGain,w
  8106  0997  00AC               	movwf	setAmbientLightGain@val
  8107                           
  8108                           ;APDS9960.c: 221:     drive &= 0b00000011;
  8109  0998  3003               	movlw	3
  8110  0999  00AA               	movwf	??_setAmbientLightGain
  8111  099A  082A               	movf	??_setAmbientLightGain,w
  8112  099B  05AB               	andwf	setAmbientLightGain@drive,f
  8113                           
  8114                           ;APDS9960.c: 222:     val &= 0b11111100;
  8115  099C  30FC               	movlw	252
  8116  099D  00AA               	movwf	??_setAmbientLightGain
  8117  099E  082A               	movf	??_setAmbientLightGain,w
  8118  099F  05AC               	andwf	setAmbientLightGain@val,f
  8119                           
  8120                           ;APDS9960.c: 223:     val |= drive;
  8121  09A0  082B               	movf	setAmbientLightGain@drive,w
  8122  09A1  00AA               	movwf	??_setAmbientLightGain
  8123  09A2  082A               	movf	??_setAmbientLightGain,w
  8124  09A3  04AC               	iorwf	setAmbientLightGain@val,f
  8125                           
  8126                           ;APDS9960.c: 226:     if( !wireWriteDataByte(0x8F, val) ) {
  8127  09A4  082C               	movf	setAmbientLightGain@val,w
  8128  09A5  00AA               	movwf	??_setAmbientLightGain
  8129  09A6  082A               	movf	??_setAmbientLightGain,w
  8130  09A7  00A6               	movwf	wireWriteDataByte@val
  8131  09A8  308F               	movlw	143
  8132  09A9  3188  20FF         	fcall	_wireWriteDataByte
  8133  09AB  0008               	return
  8134  09AC                     __end_of_setAmbientLightGain:	
  8135                           
  8136                           	psect	text14
  8137  17D2                     __ptext14:	
  8138 ;; *************** function _i2c1_driver_open *****************
  8139 ;; Defined at:
  8140 ;;		line 83 in file "mcc_generated_files/i2c1_driver.c"
  8141 ;; Parameters:    Size  Location     Type
  8142 ;;		None
  8143 ;; Auto vars:     Size  Location     Type
  8144 ;;		None
  8145 ;; Return value:  Size  Location     Type
  8146 ;;		None               void
  8147 ;; Registers used:
  8148 ;;		wreg, status,2
  8149 ;; Tracked objects:
  8150 ;;		On entry : 0/0
  8151 ;;		On exit  : 0/0
  8152 ;;		Unchanged: 0/0
  8153 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8154 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8155 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8156 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8157 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8158 ;;Total ram usage:        0 bytes
  8159 ;; Hardware stack levels used:    1
  8160 ;; Hardware stack levels required when called:    5
  8161 ;; This function calls:
  8162 ;;		Nothing
  8163 ;; This function is called by:
  8164 ;;		_initialize
  8165 ;;		_i2c_open
  8166 ;;		_InitI2C
  8167 ;; This function uses a non-reentrant model
  8168 ;;
  8169                           
  8170                           
  8171                           ;psect for function _i2c1_driver_open
  8172  17D2                     _i2c1_driver_open:	
  8173                           
  8174                           ;incstack = 0
  8175                           ; Regs used in _i2c1_driver_open: [wreg+status,2]
  8176  17D2  0024               	movlb	4	; select bank4
  8177  17D3  1A95               	btfsc	21,5	;volatile
  8178  17D4  0008               	return
  8179  17D5  0194               	clrf	20	;volatile
  8180  17D6  3028               	movlw	40
  8181  17D7  0095               	movwf	21	;volatile
  8182  17D8  0196               	clrf	22	;volatile
  8183  17D9  3003               	movlw	3
  8184  17DA  0092               	movwf	18	;volatile
  8185  17DB  0008               	return
  8186  17DC                     __end_of_i2c1_driver_open:	
  8187                           
  8188                           	psect	text15
  8189  0F80                     __ptext15:	
  8190 ;; *************** function _handleGesture *****************
  8191 ;; Defined at:
  8192 ;;		line 432 in file "main.c"
  8193 ;; Parameters:    Size  Location     Type
  8194 ;;		None
  8195 ;; Auto vars:     Size  Location     Type
  8196 ;;		None
  8197 ;; Return value:  Size  Location     Type
  8198 ;;                  1    wreg      void 
  8199 ;; Registers used:
  8200 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8201 ;; Tracked objects:
  8202 ;;		On entry : 0/0
  8203 ;;		On exit  : 0/0
  8204 ;;		Unchanged: 0/0
  8205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8206 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8207 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8208 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8209 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8210 ;;Total ram usage:        1 bytes
  8211 ;; Hardware stack levels used:    1
  8212 ;; Hardware stack levels required when called:   10
  8213 ;; This function calls:
  8214 ;;		_Display_Name
  8215 ;;		_readGesture
  8216 ;; This function is called by:
  8217 ;;		_main
  8218 ;; This function uses a non-reentrant model
  8219 ;;
  8220                           
  8221                           
  8222                           ;psect for function _handleGesture
  8223  0F80                     _handleGesture:	
  8224                           
  8225                           ;main.c: 433:     switch(readGesture()) {
  8226                           
  8227                           ;incstack = 0
  8228                           ; Regs used in _handleGesture: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8229  0F80  2FE0               	goto	l7702
  8230  0F81                     l7668:	
  8231                           
  8232                           ;main.c: 435:             brightness++;
  8233  0F81  3001               	movlw	1
  8234  0F82  07DE               	addwf	_brightness,f
  8235  0F83  3000               	movlw	0
  8236  0F84  3DDF               	addwfc	_brightness+1,f
  8237                           
  8238                           ;main.c: 436:             if(brightness > 7) {
  8239  0F85  085F               	movf	_brightness+1,w
  8240  0F86  3A80               	xorlw	128
  8241  0F87  00DB               	movwf	??_handleGesture
  8242  0F88  3080               	movlw	128
  8243  0F89  025B               	subwf	??_handleGesture,w
  8244  0F8A  3008               	movlw	8
  8245  0F8B  1903               	btfsc	3,2
  8246  0F8C  025E               	subwf	_brightness,w
  8247  0F8D  1C03               	skipc
  8248  0F8E  2F94               	goto	l804
  8249                           
  8250                           ;main.c: 437:                 brightness = 7;
  8251  0F8F  3007               	movlw	7
  8252  0F90  0020               	movlb	0	; select bank0
  8253  0F91  00DE               	movwf	_brightness
  8254  0F92  3000               	movlw	0
  8255  0F93  00DF               	movwf	_brightness+1
  8256  0F94                     l804:	
  8257                           ;main.c: 438:             }
  8258                           
  8259                           
  8260                           ;main.c: 439:             _delay((unsigned long)((200)*(500000/4000.0)));
  8261  0F94  3021               	movlw	33
  8262  0F95  0020               	movlb	0	; select bank0
  8263  0F96  00DB               	movwf	??_handleGesture
  8264  0F97  3076               	movlw	118
  8265  0F98                     u7027:	
  8266  0F98  0B89               	decfsz	9,f
  8267  0F99  2F98               	goto	u7027
  8268  0F9A  0BDB               	decfsz	??_handleGesture,f
  8269  0F9B  2F98               	goto	u7027
  8270  0F9C  0000               	nop
  8271                           
  8272                           ;main.c: 440:             break;
  8273  0F9D  2FFD               	goto	l7704
  8274  0F9E                     l7672:	
  8275                           
  8276                           ;main.c: 442:             --brightness;
  8277  0F9E  30FF               	movlw	255
  8278  0F9F  07DE               	addwf	_brightness,f
  8279  0FA0  30FF               	movlw	255
  8280  0FA1  3DDF               	addwfc	_brightness+1,f
  8281                           
  8282                           ;main.c: 443:             if(brightness < 0) {
  8283  0FA2  1FDF               	btfss	_brightness+1,7
  8284  0FA3  2F94               	goto	l804
  8285                           
  8286                           ;main.c: 444:                 brightness = 0;
  8287  0FA4  01DE               	clrf	_brightness
  8288  0FA5  01DF               	clrf	_brightness+1
  8289  0FA6  2F94               	goto	l804
  8290  0FA7                     l7680:	
  8291                           
  8292                           ;main.c: 449:             printed = 0;
  8293  0FA7  01ED               	clrf	_printed
  8294                           
  8295                           ;main.c: 452:             name++;
  8296  0FA8  3001               	movlw	1
  8297  0FA9  07E0               	addwf	_name,f
  8298  0FAA  3000               	movlw	0
  8299  0FAB  3DE1               	addwfc	_name+1,f
  8300                           
  8301                           ;main.c: 453:             if(name > 3) {
  8302  0FAC  0861               	movf	_name+1,w
  8303  0FAD  3A80               	xorlw	128
  8304  0FAE  00DB               	movwf	??_handleGesture
  8305  0FAF  3080               	movlw	128
  8306  0FB0  025B               	subwf	??_handleGesture,w
  8307  0FB1  1D03               	skipz
  8308  0FB2  2FB5               	goto	u6845
  8309  0FB3  3004               	movlw	4
  8310  0FB4  0260               	subwf	_name,w
  8311  0FB5                     u6845:	
  8312  0FB5  1C03               	skipc
  8313  0FB6  2FBA               	goto	l7688
  8314                           
  8315                           ;main.c: 454:                 name = 0;
  8316  0FB7  0020               	movlb	0	; select bank0
  8317  0FB8  01E0               	clrf	_name
  8318  0FB9  01E1               	clrf	_name+1
  8319  0FBA                     l7688:	
  8320                           
  8321                           ;main.c: 456:             Display_Name(names[name]);
  8322  0FBA  0020               	movlb	0	; select bank0
  8323  0FBB  3560               	lslf	_name,w
  8324  0FBC  3E60               	addlw	(low (_names| (0+256)))& (0+255)
  8325  0FBD  0086               	movwf	6
  8326  0FBE  3001               	movlw	1	; select bank2/3
  8327  0FBF  0087               	movwf	7
  8328  0FC0  3F40               	moviw [0]fsr1
  8329  0FC1  00A5               	movwf	Display_Name@string1
  8330  0FC2  3F41               	moviw [1]fsr1
  8331  0FC3  00A6               	movwf	Display_Name@string1+1
  8332  0FC4  318C  2435  318F   	fcall	_Display_Name
  8333                           
  8334                           ;main.c: 457:             break;
  8335  0FC7  2FFD               	goto	l7704
  8336  0FC8                     l7690:	
  8337                           
  8338                           ;main.c: 459:             printed = 0;
  8339  0FC8  01ED               	clrf	_printed
  8340                           
  8341                           ;main.c: 460:             --name;
  8342  0FC9  30FF               	movlw	255
  8343  0FCA  07E0               	addwf	_name,f
  8344  0FCB  30FF               	movlw	255
  8345  0FCC  3DE1               	addwfc	_name+1,f
  8346                           
  8347                           ;main.c: 461:             if(name < 0) {
  8348  0FCD  1FE1               	btfss	_name+1,7
  8349  0FCE  2FD3               	goto	l7698
  8350                           
  8351                           ;main.c: 462:                 name = 3;
  8352  0FCF  3003               	movlw	3
  8353  0FD0  00E0               	movwf	_name
  8354  0FD1  3000               	movlw	0
  8355  0FD2  00E1               	movwf	_name+1
  8356  0FD3                     l7698:	
  8357                           
  8358                           ;main.c: 464:             Display_Name(names[name]);
  8359  0FD3  3560               	lslf	_name,w
  8360  0FD4  3E60               	addlw	(low (_names| (0+256)))& (0+255)
  8361  0FD5  0086               	movwf	6
  8362  0FD6  3001               	movlw	1	; select bank2/3
  8363  0FD7  0087               	movwf	7
  8364  0FD8  3F40               	moviw [0]fsr1
  8365  0FD9  00A5               	movwf	Display_Name@string1
  8366  0FDA  3F41               	moviw [1]fsr1
  8367  0FDB  00A6               	movwf	Display_Name@string1+1
  8368  0FDC  318C  2435  318F   	fcall	_Display_Name
  8369                           
  8370                           ;main.c: 465:             break;
  8371  0FDF  2FFD               	goto	l7704
  8372  0FE0                     l7702:	
  8373  0FE0  3186  2607  318F   	fcall	_readGesture
  8374                           
  8375                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8376                           ; Switch size 1, requested type "simple"
  8377                           ; Number of cases is 1, Range of values is 0 to 0
  8378                           ; switch strategies available:
  8379                           ; Name         Instructions Cycles
  8380                           ; simple_byte            4     3 (average)
  8381                           ; direct_byte            8     6 (fixed)
  8382                           ; jumptable            260     6 (fixed)
  8383                           ;	Chosen strategy is simple_byte
  8384  0FE3  0020               	movlb	0	; select bank0
  8385  0FE4  0850               	movf	?_readGesture+1,w
  8386  0FE5  3A00               	xorlw	0	; case 0
  8387  0FE6  1903               	skipnz
  8388  0FE7  2FE9               	goto	l7974
  8389  0FE8  2FFD               	goto	l7704
  8390  0FE9                     l7974:	
  8391                           
  8392                           ; Switch size 1, requested type "simple"
  8393                           ; Number of cases is 6, Range of values is 1 to 6
  8394                           ; switch strategies available:
  8395                           ; Name         Instructions Cycles
  8396                           ; simple_byte           19    10 (average)
  8397                           ; direct_byte           21     9 (fixed)
  8398                           ; jumptable            263     9 (fixed)
  8399                           ;	Chosen strategy is simple_byte
  8400  0FE9  084F               	movf	?_readGesture,w
  8401  0FEA  3A01               	xorlw	1	; case 1
  8402  0FEB  1903               	skipnz
  8403  0FEC  2FA7               	goto	l7680
  8404  0FED  3A03               	xorlw	3	; case 2
  8405  0FEE  1903               	skipnz
  8406  0FEF  2FC8               	goto	l7690
  8407  0FF0  3A01               	xorlw	1	; case 3
  8408  0FF1  1903               	skipnz
  8409  0FF2  2F81               	goto	l7668
  8410  0FF3  3A07               	xorlw	7	; case 4
  8411  0FF4  1903               	skipnz
  8412  0FF5  2F9E               	goto	l7672
  8413  0FF6  3A01               	xorlw	1	; case 5
  8414  0FF7  1903               	skipnz
  8415  0FF8  2FFD               	goto	l7704
  8416  0FF9  3A03               	xorlw	3	; case 6
  8417  0FFA  1903               	skipnz
  8418  0FFB  2FFD               	goto	l7704
  8419  0FFC  2FFD               	goto	l7704
  8420  0FFD                     l7704:	
  8421                           
  8422                           ;main.c: 476:     printed = 0;
  8423  0FFD  0020               	movlb	0	; select bank0
  8424  0FFE  01ED               	clrf	_printed
  8425  0FFF  0008               	return
  8426  1000                     __end_of_handleGesture:	
  8427                           
  8428                           	psect	text16
  8429  0607                     __ptext16:	
  8430 ;; *************** function _readGesture *****************
  8431 ;; Defined at:
  8432 ;;		line 556 in file "APDS9960.c"
  8433 ;; Parameters:    Size  Location     Type
  8434 ;;		None
  8435 ;; Auto vars:     Size  Location     Type
  8436 ;;  fifo_data      64    0[BANK2 ] unsigned char [64]
  8437 ;;  fifo_data2     64    0[BANK1 ] unsigned char [64]
  8438 ;;  i               2   57[BANK0 ] int 
  8439 ;;  bytes_read      2   54[BANK0 ] int 
  8440 ;;  motion          2   51[BANK0 ] int 
  8441 ;;  fifo_level      1   56[BANK0 ] unsigned char 
  8442 ;;  gstatus         1   53[BANK0 ] unsigned char 
  8443 ;; Return value:  Size  Location     Type
  8444 ;;                  2   47[BANK0 ] int 
  8445 ;; Registers used:
  8446 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8447 ;; Tracked objects:
  8448 ;;		On entry : 0/0
  8449 ;;		On exit  : 0/0
  8450 ;;		Unchanged: 0/0
  8451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8452 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8453 ;;      Locals:         0       8      64      64       0       0       0       0       0       0       0       0       
      +0       0
  8454 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8455 ;;      Totals:         0      12      64      64       0       0       0       0       0       0       0       0       
      +0       0
  8456 ;;Total ram usage:      140 bytes
  8457 ;; Hardware stack levels used:    1
  8458 ;; Hardware stack levels required when called:    9
  8459 ;; This function calls:
  8460 ;;		_decodeGesture
  8461 ;;		_getMode
  8462 ;;		_isGestureAvailable
  8463 ;;		_processGestureData
  8464 ;;		_resetGestureParameters
  8465 ;;		_wireReadDataBlock
  8466 ;;		_wireReadDataByte
  8467 ;; This function is called by:
  8468 ;;		_handleGesture
  8469 ;; This function uses a non-reentrant model
  8470 ;;
  8471                           
  8472                           
  8473                           ;psect for function _readGesture
  8474  0607                     _readGesture:	
  8475                           
  8476                           ;APDS9960.c: 559:     int bytes_read = 0;
  8477                           
  8478                           ;incstack = 0
  8479                           ; Regs used in _readGesture: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8480  0607  0020               	movlb	0	; select bank0
  8481  0608  01D6               	clrf	readGesture@bytes_read
  8482  0609  01D7               	clrf	readGesture@bytes_read+1
  8483                           
  8484                           ;APDS9960.c: 560:     uint8_t fifo_data[64];;APDS9960.c: 561:     uint8_t fifo_data2[64]
      +                          ;;APDS9960.c: 562:     uint8_t gstatus;;APDS9960.c: 563:     int motion;;APDS9960.c: 564
      +                          :     int i;;APDS9960.c: 567:     if( !isGestureAvailable() || !(getMode() & 0b01000001)
      +                           ) {
  8485  060A  3188  203F  3186   	fcall	_isGestureAvailable
  8486  060D  3A00               	xorlw	0
  8487  060E  1903               	skipnz
  8488  060F  2E16               	goto	l7032
  8489  0610  3197  27C9  3186   	fcall	_getMode
  8490  0613  3941               	andlw	65
  8491  0614  1D03               	btfss	3,2
  8492  0615  2ECB               	goto	l7036
  8493  0616                     l7032:	
  8494                           
  8495                           ;APDS9960.c: 568:         return DIR_NONE;
  8496  0616  0020               	movlb	0	; select bank0
  8497  0617  01CF               	clrf	?_readGesture
  8498  0618  01D0               	clrf	?_readGesture+1
  8499  0619  0008               	return
  8500  061A                     l7042:	
  8501                           ;APDS9960.c: 569:     }
  8502                           
  8503                           
  8504                           ;APDS9960.c: 584:         {;APDS9960.c: 586:          fifo_level= wireReadDataByte(0xAE)
      +                          ;
  8505  061A  30AE               	movlw	174
  8506  061B  3189  21AC  3186   	fcall	_wireReadDataByte
  8507  061E  0020               	movlb	0	; select bank0
  8508  061F  00D1               	movwf	??_readGesture
  8509  0620  0851               	movf	??_readGesture,w
  8510  0621  00D8               	movwf	readGesture@fifo_level
  8511                           
  8512                           ;APDS9960.c: 590:             if( fifo_level > 0) {
  8513  0622  0858               	movf	readGesture@fifo_level,w
  8514  0623  1903               	btfsc	3,2
  8515  0624  2ECB               	goto	l7036
  8516                           
  8517                           ;APDS9960.c: 592:               if(fifo_level < 17)
  8518  0625  3011               	movlw	17
  8519  0626  0258               	subwf	readGesture@fifo_level,w
  8520  0627  1803               	skipnc
  8521  0628  2E2D               	goto	l7050
  8522                           
  8523                           ;APDS9960.c: 593:               {;APDS9960.c: 594:                 bytes_read = wireRead
      +                          DataBlock( 0xFC,
  8524  0629  3020               	movlw	low readGesture@fifo_data
  8525  062A  00A6               	movwf	wireReadDataBlock@val
  8526  062B  3001               	movlw	high readGesture@fifo_data
  8527  062C  2E30               	goto	L1
  8528  062D                     l7050:	
  8529                           ;APDS9960.c: 597:               } else
  8530                           
  8531                           
  8532                           ;APDS9960.c: 598:               {;APDS9960.c: 599:                 bytes_read = wireRead
      +                          DataBlock( 0xFC,
  8533  062D  30A0               	movlw	low readGesture@fifo_data2
  8534  062E  00A6               	movwf	wireReadDataBlock@val
  8535  062F  3000               	movlw	high readGesture@fifo_data2
  8536  0630                     L1:	
  8537  0630  00A7               	movwf	wireReadDataBlock@val+1
  8538  0631  0858               	movf	readGesture@fifo_level,w
  8539  0632  00D1               	movwf	??_readGesture
  8540  0633  01D2               	clrf	??_readGesture+1
  8541  0634  35D1               	lslf	??_readGesture,f
  8542  0635  0DD2               	rlf	??_readGesture+1,f
  8543  0636  35D1               	lslf	??_readGesture,f
  8544  0637  0DD2               	rlf	??_readGesture+1,f
  8545  0638  0851               	movf	??_readGesture,w
  8546  0639  00A8               	movwf	wireReadDataBlock@len
  8547  063A  0852               	movf	??_readGesture+1,w
  8548  063B  00A9               	movwf	wireReadDataBlock@len+1
  8549  063C  30FC               	movlw	252
  8550  063D  318D  258A  3186   	fcall	_wireReadDataBlock
  8551  0640  0020               	movlb	0	; select bank0
  8552  0641  0827               	movf	?_wireReadDataBlock+1,w
  8553  0642  00D7               	movwf	readGesture@bytes_read+1
  8554  0643  0826               	movf	?_wireReadDataBlock,w
  8555  0644  00D6               	movwf	readGesture@bytes_read
  8556                           
  8557                           ;APDS9960.c: 605:                 if( bytes_read == -1 )
  8558  0645  0A56               	incf	readGesture@bytes_read,w
  8559  0646  1D03               	skipz
  8560  0647  2E50               	goto	l7058
  8561  0648  0A57               	incf	readGesture@bytes_read+1,w
  8562  0649  1D03               	btfss	3,2
  8563  064A  2E50               	goto	l7058
  8564                           
  8565                           ;APDS9960.c: 606:                 {;APDS9960.c: 607:                     return 0xFF;
  8566  064B  30FF               	movlw	255
  8567  064C  00CF               	movwf	?_readGesture
  8568  064D  3000               	movlw	0
  8569  064E  00D0               	movwf	?_readGesture+1
  8570  064F  0008               	return
  8571  0650                     l7058:	
  8572                           
  8573                           ;APDS9960.c: 612:                 if( bytes_read >= 4 )
  8574  0650  0857               	movf	readGesture@bytes_read+1,w
  8575  0651  3A80               	xorlw	128
  8576  0652  00D1               	movwf	??_readGesture
  8577  0653  3080               	movlw	128
  8578  0654  0251               	subwf	??_readGesture,w
  8579  0655  1D03               	skipz
  8580  0656  2E59               	goto	u6055
  8581  0657  3004               	movlw	4
  8582  0658  0256               	subwf	readGesture@bytes_read,w
  8583  0659                     u6055:	
  8584  0659  1C03               	skipc
  8585  065A  2ECB               	goto	l7036
  8586                           
  8587                           ;APDS9960.c: 613:                 {;APDS9960.c: 615:                     for( i = 0; i <
      +                           bytes_read; i += 4 ) {
  8588  065B  0020               	movlb	0	; select bank0
  8589  065C  01D9               	clrf	readGesture@i
  8590  065D  01DA               	clrf	readGesture@i+1
  8591  065E                     l7070:	
  8592  065E  085A               	movf	readGesture@i+1,w
  8593  065F  3A80               	xorlw	128
  8594  0660  00D1               	movwf	??_readGesture
  8595  0661  0857               	movf	readGesture@bytes_read+1,w
  8596  0662  3A80               	xorlw	128
  8597  0663  0251               	subwf	??_readGesture,w
  8598  0664  1D03               	skipz
  8599  0665  2E68               	goto	u6065
  8600  0666  0856               	movf	readGesture@bytes_read,w
  8601  0667  0259               	subwf	readGesture@i,w
  8602  0668                     u6065:	
  8603  0668  1803               	btfsc	3,0
  8604  0669  2EBF               	goto	l7072
  8605                           
  8606                           ;APDS9960.c: 616:                         gesture_data_.u_data[gesture_data_.index] = fi
      +                          fo_data[i + 0];
  8607  066A  0020               	movlb	0	; select bank0
  8608  066B  0859               	movf	readGesture@i,w
  8609  066C  3E20               	addlw	(low (readGesture@fifo_data| (0+256)))& (0+255)
  8610  066D  0086               	movwf	6
  8611  066E  3001               	movlw	1	; select bank2/3
  8612  066F  0087               	movwf	7
  8613  0670  0801               	movf	1,w
  8614  0671  00D1               	movwf	??_readGesture
  8615  0672  0024               	movlb	4	; select bank4
  8616  0673  0860               	movf	(_gesture_data_^(0+512)+64),w
  8617  0674  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  8618  0675  0086               	movwf	6
  8619  0676  3002               	movlw	2	; select bank4/5
  8620  0677  0087               	movwf	7
  8621  0678  0020               	movlb	0	; select bank0
  8622  0679  0851               	movf	??_readGesture,w
  8623  067A  0081               	movwf	1
  8624                           
  8625                           ;APDS9960.c: 618:                         gesture_data_.d_data[gesture_data_.index] = fi
      +                          fo_data[i + 1];
  8626  067B  0859               	movf	readGesture@i,w
  8627  067C  3E01               	addlw	1
  8628  067D  3E20               	addlw	(low (readGesture@fifo_data| (0+256)))& (0+255)
  8629  067E  0086               	movwf	6
  8630  067F  3001               	movlw	1	; select bank2/3
  8631  0680  0087               	movwf	7
  8632  0681  0801               	movf	1,w
  8633  0682  00D1               	movwf	??_readGesture
  8634  0683  0024               	movlb	4	; select bank4
  8635  0684  0860               	movf	(_gesture_data_^(0+512)+64),w
  8636  0685  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  8637  0686  0086               	movwf	6
  8638  0687  3002               	movlw	2	; select bank4/5
  8639  0688  0087               	movwf	7
  8640  0689  0020               	movlb	0	; select bank0
  8641  068A  0851               	movf	??_readGesture,w
  8642  068B  0081               	movwf	1
  8643                           
  8644                           ;APDS9960.c: 620:                         gesture_data_.l_data[gesture_data_.index] = fi
      +                          fo_data[i + 2];
  8645  068C  0859               	movf	readGesture@i,w
  8646  068D  3E02               	addlw	2
  8647  068E  3E20               	addlw	(low (readGesture@fifo_data| (0+256)))& (0+255)
  8648  068F  0086               	movwf	6
  8649  0690  3001               	movlw	1	; select bank2/3
  8650  0691  0087               	movwf	7
  8651  0692  0801               	movf	1,w
  8652  0693  00D1               	movwf	??_readGesture
  8653  0694  0024               	movlb	4	; select bank4
  8654  0695  0860               	movf	(_gesture_data_^(0+512)+64),w
  8655  0696  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  8656  0697  0086               	movwf	6
  8657  0698  3002               	movlw	2	; select bank4/5
  8658  0699  0087               	movwf	7
  8659  069A  0020               	movlb	0	; select bank0
  8660  069B  0851               	movf	??_readGesture,w
  8661  069C  0081               	movwf	1
  8662                           
  8663                           ;APDS9960.c: 622:                         gesture_data_.r_data[gesture_data_.index] = fi
      +                          fo_data[i + 3];
  8664  069D  0859               	movf	readGesture@i,w
  8665  069E  3E03               	addlw	3
  8666  069F  3E20               	addlw	(low (readGesture@fifo_data| (0+256)))& (0+255)
  8667  06A0  0086               	movwf	6
  8668  06A1  3001               	movlw	1	; select bank2/3
  8669  06A2  0087               	movwf	7
  8670  06A3  0801               	movf	1,w
  8671  06A4  00D1               	movwf	??_readGesture
  8672  06A5  0024               	movlb	4	; select bank4
  8673  06A6  0860               	movf	(_gesture_data_^(0+512)+64),w
  8674  06A7  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  8675  06A8  0086               	movwf	6
  8676  06A9  3002               	movlw	2	; select bank4/5
  8677  06AA  0087               	movwf	7
  8678  06AB  0020               	movlb	0	; select bank0
  8679  06AC  0851               	movf	??_readGesture,w
  8680  06AD  0081               	movwf	1
  8681                           
  8682                           ;APDS9960.c: 624:                         gesture_data_.index++;
  8683  06AE  3001               	movlw	1
  8684  06AF  00D1               	movwf	??_readGesture
  8685  06B0  0851               	movf	??_readGesture,w
  8686  06B1  0024               	movlb	4	; select bank4
  8687  06B2  07E0               	addwf	(_gesture_data_^(0+512)+64),f
  8688                           
  8689                           ;APDS9960.c: 625:                         gesture_data_.total_gestures++;
  8690  06B3  3001               	movlw	1
  8691  06B4  0020               	movlb	0	; select bank0
  8692  06B5  00D1               	movwf	??_readGesture
  8693  06B6  0851               	movf	??_readGesture,w
  8694  06B7  0024               	movlb	4	; select bank4
  8695  06B8  07E1               	addwf	(_gesture_data_^(0+512)+65),f
  8696                           
  8697                           ;APDS9960.c: 626:                     }
  8698  06B9  3004               	movlw	4
  8699  06BA  0020               	movlb	0	; select bank0
  8700  06BB  07D9               	addwf	readGesture@i,f
  8701  06BC  3000               	movlw	0
  8702  06BD  3DDA               	addwfc	readGesture@i+1,f
  8703  06BE  2E5E               	goto	l7070
  8704  06BF                     l7072:	
  8705                           
  8706                           ;APDS9960.c: 629:                     if( processGestureData() )
  8707  06BF  3180  2089  3186   	fcall	_processGestureData
  8708  06C2  3A00               	xorlw	0
  8709  06C3  1903               	skipnz
  8710  06C4  2EC8               	goto	l7076
  8711                           
  8712                           ;APDS9960.c: 630:                     {;APDS9960.c: 632:                         if( dec
      +                          odeGesture() ) {
  8713  06C5  3183  2360  3186   	fcall	_decodeGesture
  8714  06C8                     l7076:	
  8715                           
  8716                           ;APDS9960.c: 638:                     gesture_data_.index = 0;
  8717  06C8  0024               	movlb	4	; select bank4
  8718  06C9  01E0               	clrf	(_gesture_data_^(0+512)+64)
  8719                           
  8720                           ;APDS9960.c: 639:                     gesture_data_.total_gestures = 0;
  8721  06CA  01E1               	clrf	(_gesture_data_^(0+512)+65)
  8722  06CB                     l7036:	
  8723                           
  8724                           ;APDS9960.c: 575:         _delay((unsigned long)((30)*(500000/4000.0)));
  8725  06CB  3005               	movlw	5
  8726  06CC  0020               	movlb	0	; select bank0
  8727  06CD  00D1               	movwf	??_readGesture
  8728  06CE  30DD               	movlw	221
  8729  06CF                     u7037:	
  8730  06CF  0B89               	decfsz	9,f
  8731  06D0  2ECF               	goto	u7037
  8732  06D1  0BD1               	decfsz	??_readGesture,f
  8733  06D2  2ECF               	goto	u7037
  8734  06D3  3200               	nop2
  8735                           
  8736                           ;APDS9960.c: 578:         gstatus = wireReadDataByte(0xAF);
  8737  06D4  30AF               	movlw	175
  8738  06D5  3189  21AC  3186   	fcall	_wireReadDataByte
  8739  06D8  0020               	movlb	0	; select bank0
  8740  06D9  00D1               	movwf	??_readGesture
  8741  06DA  0851               	movf	??_readGesture,w
  8742  06DB  00D5               	movwf	readGesture@gstatus
  8743                           
  8744                           ;APDS9960.c: 583:         if( (gstatus & 0b00000001) == 0b00000001 )
  8745  06DC  1855               	btfsc	readGesture@gstatus,0
  8746  06DD  2E1A               	goto	l7042
  8747                           
  8748                           ;APDS9960.c: 645:             _delay((unsigned long)((30)*(500000/4000.0)));
  8749  06DE  3005               	movlw	5
  8750  06DF  0020               	movlb	0	; select bank0
  8751  06E0  00D1               	movwf	??_readGesture
  8752  06E1  30DD               	movlw	221
  8753  06E2                     u7047:	
  8754  06E2  0B89               	decfsz	9,f
  8755  06E3  2EE2               	goto	u7047
  8756  06E4  0BD1               	decfsz	??_readGesture,f
  8757  06E5  2EE2               	goto	u7047
  8758  06E6  3200               	nop2
  8759                           
  8760                           ;APDS9960.c: 646:             decodeGesture();
  8761  06E7  3183  2360  3186   	fcall	_decodeGesture
  8762                           
  8763                           ;APDS9960.c: 647:             motion = gesture_motion_;
  8764  06EA  0022               	movlb	2	; select bank2
  8765  06EB  086D               	movf	(_gesture_motion_+1)^(0+256),w
  8766  06EC  0020               	movlb	0	; select bank0
  8767  06ED  00D4               	movwf	readGesture@motion+1
  8768  06EE  0022               	movlb	2	; select bank2
  8769  06EF  086C               	movf	_gesture_motion_^(0+256),w
  8770  06F0  0020               	movlb	0	; select bank0
  8771  06F1  00D3               	movwf	readGesture@motion
  8772                           
  8773                           ;APDS9960.c: 649:             resetGestureParameters();
  8774  06F2  3188  20B5         	fcall	_resetGestureParameters
  8775                           
  8776                           ;APDS9960.c: 651:             return motion;
  8777  06F4  0020               	movlb	0	; select bank0
  8778  06F5  0854               	movf	readGesture@motion+1,w
  8779  06F6  00D0               	movwf	?_readGesture+1
  8780  06F7  0853               	movf	readGesture@motion,w
  8781  06F8  00CF               	movwf	?_readGesture
  8782  06F9  0008               	return
  8783  06FA                     __end_of_readGesture:	
  8784                           
  8785                           	psect	text17
  8786  0D8A                     __ptext17:	
  8787 ;; *************** function _wireReadDataBlock *****************
  8788 ;; Defined at:
  8789 ;;		line 847 in file "APDS9960.c"
  8790 ;; Parameters:    Size  Location     Type
  8791 ;;  reg             1    wreg     unsigned char 
  8792 ;;  val             2    6[BANK0 ] PTR unsigned char 
  8793 ;;		 -> readGesture@fifo_data2(64), readGesture@fifo_data(64), 
  8794 ;;  len             2    8[BANK0 ] unsigned int 
  8795 ;; Auto vars:     Size  Location     Type
  8796 ;;  reg             1   15[BANK0 ] unsigned char 
  8797 ;;  j               1   16[BANK0 ] unsigned char 
  8798 ;; Return value:  Size  Location     Type
  8799 ;;                  2    6[BANK0 ] int 
  8800 ;; Registers used:
  8801 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8802 ;; Tracked objects:
  8803 ;;		On entry : 0/0
  8804 ;;		On exit  : 0/0
  8805 ;;		Unchanged: 0/0
  8806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8807 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8808 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8809 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8810 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8811 ;;Total ram usage:       11 bytes
  8812 ;; Hardware stack levels used:    1
  8813 ;; Hardware stack levels required when called:    7
  8814 ;; This function calls:
  8815 ;;		_I2C_ReStart
  8816 ;;		_I2C_Read_Byte
  8817 ;;		_I2C_Send_NACK
  8818 ;;		_I2C_Start
  8819 ;;		_I2C_Stop
  8820 ;;		_I2C_Write_Byte
  8821 ;; This function is called by:
  8822 ;;		_readGesture
  8823 ;; This function uses a non-reentrant model
  8824 ;;
  8825                           
  8826                           
  8827                           ;psect for function _wireReadDataBlock
  8828  0D8A                     _wireReadDataBlock:	
  8829                           
  8830                           ;incstack = 0
  8831                           ; Regs used in _wireReadDataBlock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8832                           ;wireReadDataBlock@reg stored from wreg
  8833  0D8A  0020               	movlb	0	; select bank0
  8834  0D8B  00AF               	movwf	wireReadDataBlock@reg
  8835                           
  8836                           ;APDS9960.c: 851:     I2C_Start();
  8837  0D8C  3196  26DE  318D   	fcall	_I2C_Start
  8838                           
  8839                           ;APDS9960.c: 852:     I2C_Write_Byte((0x39 << 1 )| 0x00);
  8840  0D8F  3072               	movlw	114
  8841  0D90  3189  211A  318D   	fcall	_I2C_Write_Byte
  8842                           
  8843                           ;APDS9960.c: 854:     I2C_Write_Byte(reg);
  8844  0D93  0020               	movlb	0	; select bank0
  8845  0D94  082F               	movf	wireReadDataBlock@reg,w
  8846  0D95  3189  211A  318D   	fcall	_I2C_Write_Byte
  8847                           
  8848                           ;APDS9960.c: 856:     for(j= 0; j < len ; j++)
  8849  0D98  0020               	movlb	0	; select bank0
  8850  0D99  01B0               	clrf	wireReadDataBlock@j
  8851  0D9A                     l6574:	
  8852  0D9A  0830               	movf	wireReadDataBlock@j,w
  8853  0D9B  00AA               	movwf	??_wireReadDataBlock
  8854  0D9C  01AB               	clrf	??_wireReadDataBlock+1
  8855  0D9D  0829               	movf	wireReadDataBlock@len+1,w
  8856  0D9E  022B               	subwf	??_wireReadDataBlock+1,w
  8857  0D9F  1D03               	skipz
  8858  0DA0  2DA3               	goto	u5215
  8859  0DA1  0828               	movf	wireReadDataBlock@len,w
  8860  0DA2  022A               	subwf	??_wireReadDataBlock,w
  8861  0DA3                     u5215:	
  8862  0DA3  1803               	btfsc	3,0
  8863  0DA4  2DC9               	goto	l6576
  8864                           
  8865                           ;APDS9960.c: 857:     {;APDS9960.c: 859:       I2C_ReStart();
  8866  0DA5  3196  26CF  318D   	fcall	_I2C_ReStart
  8867                           
  8868                           ;APDS9960.c: 860:       I2C_Write_Byte((0x39 << 1) | 0x01);
  8869  0DA8  3073               	movlw	115
  8870  0DA9  3189  211A  318D   	fcall	_I2C_Write_Byte
  8871                           
  8872                           ;APDS9960.c: 861:       val[j]=I2C_Read_Byte();
  8873  0DAC  3197  27DC  318D   	fcall	_I2C_Read_Byte
  8874  0DAF  0020               	movlb	0	; select bank0
  8875  0DB0  00AA               	movwf	??_wireReadDataBlock
  8876  0DB1  0830               	movf	wireReadDataBlock@j,w
  8877  0DB2  00AB               	movwf	??_wireReadDataBlock+1
  8878  0DB3  01AC               	clrf	??_wireReadDataBlock+2
  8879  0DB4  082B               	movf	??_wireReadDataBlock+1,w
  8880  0DB5  0726               	addwf	wireReadDataBlock@val,w
  8881  0DB6  00AD               	movwf	??_wireReadDataBlock+3
  8882  0DB7  082C               	movf	??_wireReadDataBlock+2,w
  8883  0DB8  3D27               	addwfc	wireReadDataBlock@val+1,w
  8884  0DB9  00AE               	movwf	??_wireReadDataBlock+4
  8885  0DBA  082D               	movf	??_wireReadDataBlock+3,w
  8886  0DBB  0086               	movwf	6
  8887  0DBC  082E               	movf	??_wireReadDataBlock+4,w
  8888  0DBD  0087               	movwf	7
  8889  0DBE  082A               	movf	??_wireReadDataBlock,w
  8890  0DBF  0081               	movwf	1
  8891                           
  8892                           ;APDS9960.c: 862:       I2C_Send_NACK();
  8893  0DC0  3196  26D8  318D   	fcall	_I2C_Send_NACK
  8894                           
  8895                           ;APDS9960.c: 864:     }
  8896  0DC3  3001               	movlw	1
  8897  0DC4  0020               	movlb	0	; select bank0
  8898  0DC5  00AA               	movwf	??_wireReadDataBlock
  8899  0DC6  082A               	movf	??_wireReadDataBlock,w
  8900  0DC7  07B0               	addwf	wireReadDataBlock@j,f
  8901  0DC8  2D9A               	goto	l6574
  8902  0DC9                     l6576:	
  8903                           
  8904                           ;APDS9960.c: 866:     I2C_Stop();
  8905  0DC9  3196  26E4         	fcall	_I2C_Stop
  8906                           
  8907                           ;APDS9960.c: 867:     return (int)j;
  8908  0DCB  0020               	movlb	0	; select bank0
  8909  0DCC  0830               	movf	wireReadDataBlock@j,w
  8910  0DCD  00AA               	movwf	??_wireReadDataBlock
  8911  0DCE  01AB               	clrf	??_wireReadDataBlock+1
  8912  0DCF  082A               	movf	??_wireReadDataBlock,w
  8913  0DD0  00A6               	movwf	?_wireReadDataBlock
  8914  0DD1  082B               	movf	??_wireReadDataBlock+1,w
  8915  0DD2  00A7               	movwf	?_wireReadDataBlock+1
  8916  0DD3  0008               	return
  8917  0DD4                     __end_of_wireReadDataBlock:	
  8918                           
  8919                           	psect	text18
  8920  0089                     __ptext18:	
  8921 ;; *************** function _processGestureData *****************
  8922 ;; Defined at:
  8923 ;;		line 657 in file "APDS9960.c"
  8924 ;; Parameters:    Size  Location     Type
  8925 ;;		None
  8926 ;; Auto vars:     Size  Location     Type
  8927 ;;  i               2   45[BANK0 ] int 
  8928 ;;  lr_delta        2   43[BANK0 ] int 
  8929 ;;  ud_delta        2   41[BANK0 ] int 
  8930 ;;  lr_ratio_las    2   23[BANK0 ] int 
  8931 ;;  ud_ratio_las    2   21[BANK0 ] int 
  8932 ;;  lr_ratio_fir    2   19[BANK0 ] int 
  8933 ;;  ud_ratio_fir    2   17[BANK0 ] int 
  8934 ;;  r_first         1   40[BANK0 ] unsigned char 
  8935 ;;  l_first         1   39[BANK0 ] unsigned char 
  8936 ;;  d_first         1   38[BANK0 ] unsigned char 
  8937 ;;  u_first         1   37[BANK0 ] unsigned char 
  8938 ;;  r_last          1   36[BANK0 ] unsigned char 
  8939 ;;  l_last          1   35[BANK0 ] unsigned char 
  8940 ;;  d_last          1   34[BANK0 ] unsigned char 
  8941 ;;  u_last          1   33[BANK0 ] unsigned char 
  8942 ;; Return value:  Size  Location     Type
  8943 ;;                  1    wreg      _Bool 
  8944 ;; Registers used:
  8945 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8946 ;; Tracked objects:
  8947 ;;		On entry : 0/0
  8948 ;;		On exit  : 0/0
  8949 ;;		Unchanged: 0/0
  8950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8951 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8952 ;;      Locals:         0      30       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8953 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8954 ;;      Totals:         0      32       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8955 ;;Total ram usage:       32 bytes
  8956 ;; Hardware stack levels used:    1
  8957 ;; Hardware stack levels required when called:    6
  8958 ;; This function calls:
  8959 ;;		___awdiv
  8960 ;;		___wmul
  8961 ;; This function is called by:
  8962 ;;		_readGesture
  8963 ;; This function uses a non-reentrant model
  8964 ;;
  8965                           
  8966                           
  8967                           ;psect for function _processGestureData
  8968  0089                     _processGestureData:	
  8969                           
  8970                           ;APDS9960.c: 659:     uint8_t u_first = 0;
  8971                           
  8972                           ;incstack = 0
  8973                           ; Regs used in _processGestureData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8974  0089  0020               	movlb	0	; select bank0
  8975  008A  01C5               	clrf	processGestureData@u_first
  8976                           
  8977                           ;APDS9960.c: 660:     uint8_t d_first = 0;
  8978  008B  01C6               	clrf	processGestureData@d_first
  8979                           
  8980                           ;APDS9960.c: 661:     uint8_t l_first = 0;
  8981  008C  01C7               	clrf	processGestureData@l_first
  8982                           
  8983                           ;APDS9960.c: 662:     uint8_t r_first = 0;
  8984  008D  01C8               	clrf	processGestureData@r_first
  8985                           
  8986                           ;APDS9960.c: 663:     uint8_t u_last = 0;
  8987  008E  01C1               	clrf	processGestureData@u_last
  8988                           
  8989                           ;APDS9960.c: 664:     uint8_t d_last = 0;
  8990  008F  01C2               	clrf	processGestureData@d_last
  8991                           
  8992                           ;APDS9960.c: 665:     uint8_t l_last = 0;
  8993  0090  01C3               	clrf	processGestureData@l_last
  8994                           
  8995                           ;APDS9960.c: 666:     uint8_t r_last = 0;
  8996  0091  01C4               	clrf	processGestureData@r_last
  8997                           
  8998                           ;APDS9960.c: 667:     int ud_ratio_first;;APDS9960.c: 668:     int lr_ratio_first;;APDS9
      +                          960.c: 669:     int ud_ratio_last;;APDS9960.c: 670:     int lr_ratio_last;;APDS9960.c: 6
      +                          71:     int ud_delta;;APDS9960.c: 672:     int lr_delta;;APDS9960.c: 673:     int i;;APD
      +                          S9960.c: 676:     if( gesture_data_.total_gestures <= 4 ) {
  8999  0092  3005               	movlw	5
  9000  0093  0024               	movlb	4	; select bank4
  9001  0094  0261               	subwf	(_gesture_data_^(0+512)+65),w
  9002  0095  1803               	skipnc
  9003  0096  2899               	goto	l6590
  9004  0097                     l6586:	
  9005                           
  9006                           ;APDS9960.c: 677:         return 0;
  9007  0097  3000               	movlw	0
  9008  0098  0008               	return
  9009  0099                     l6590:	
  9010                           
  9011                           ;APDS9960.c: 681:     if( (gesture_data_.total_gestures <= 32) && (gesture_data_.total_g
      +                          estures > 0) ) {
  9012  0099  3021               	movlw	33
  9013  009A  0261               	subwf	(_gesture_data_^(0+512)+65),w
  9014  009B  1803               	skipnc
  9015  009C  2963               	goto	l6640
  9016  009D  0861               	movf	(_gesture_data_^(0+512)+65),w
  9017  009E  1903               	btfsc	3,2
  9018  009F  2963               	goto	l6640
  9019                           
  9020                           ;APDS9960.c: 682: ;APDS9960.c: 685:         for( i = 0; i < gesture_data_.total_gestures
      +                          ; i++ ) {
  9021  00A0  0020               	movlb	0	; select bank0
  9022  00A1  01CD               	clrf	processGestureData@i
  9023  00A2  01CE               	clrf	processGestureData@i+1
  9024  00A3  28A8               	goto	l1117
  9025  00A4                     l6606:	
  9026                           ;APDS9960.c: 695:                 break;
  9027                           
  9028                           
  9029                           ;APDS9960.c: 697:         }
  9030  00A4  3001               	movlw	1
  9031  00A5  07CD               	addwf	processGestureData@i,f
  9032  00A6  3000               	movlw	0
  9033  00A7  3DCE               	addwfc	processGestureData@i+1,f
  9034  00A8                     l1117:	
  9035  00A8  084E               	movf	processGestureData@i+1,w
  9036  00A9  3A80               	xorlw	128
  9037  00AA  00AF               	movwf	??_processGestureData
  9038  00AB  3080               	movlw	128
  9039  00AC  022F               	subwf	??_processGestureData,w
  9040  00AD  1D03               	skipz
  9041  00AE  28B3               	goto	u5295
  9042  00AF  0024               	movlb	4	; select bank4
  9043  00B0  0861               	movf	(_gesture_data_^(0+512)+65),w
  9044  00B1  0020               	movlb	0	; select bank0
  9045  00B2  024D               	subwf	processGestureData@i,w
  9046  00B3                     u5295:	
  9047  00B3  1803               	btfsc	3,0
  9048  00B4  28FE               	goto	l6608
  9049                           
  9050                           ;APDS9960.c: 686:             if( (gesture_data_.u_data[i] > 10) &&
  9051  00B5  0020               	movlb	0	; select bank0
  9052  00B6  084D               	movf	processGestureData@i,w
  9053  00B7  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  9054  00B8  0086               	movwf	6
  9055  00B9  3002               	movlw	2	; select bank4/5
  9056  00BA  0087               	movwf	7
  9057  00BB  300B               	movlw	11
  9058  00BC  0201               	subwf	1,w
  9059  00BD  1C03               	skipc
  9060  00BE  28A4               	goto	l6606
  9061  00BF  084D               	movf	processGestureData@i,w
  9062  00C0  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  9063  00C1  0086               	movwf	6
  9064  00C2  3002               	movlw	2	; select bank4/5
  9065  00C3  0087               	movwf	7
  9066  00C4  300B               	movlw	11
  9067  00C5  0201               	subwf	1,w
  9068  00C6  1C03               	skipc
  9069  00C7  28A4               	goto	l6606
  9070  00C8  084D               	movf	processGestureData@i,w
  9071  00C9  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  9072  00CA  0086               	movwf	6
  9073  00CB  3002               	movlw	2	; select bank4/5
  9074  00CC  0087               	movwf	7
  9075  00CD  300B               	movlw	11
  9076  00CE  0201               	subwf	1,w
  9077  00CF  1C03               	skipc
  9078  00D0  28A4               	goto	l6606
  9079  00D1  084D               	movf	processGestureData@i,w
  9080  00D2  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  9081  00D3  0086               	movwf	6
  9082  00D4  3002               	movlw	2	; select bank4/5
  9083  00D5  0087               	movwf	7
  9084  00D6  300B               	movlw	11
  9085  00D7  0201               	subwf	1,w
  9086  00D8  1C03               	skipc
  9087  00D9  28A4               	goto	l6606
  9088                           
  9089                           ;APDS9960.c: 689:                 (gesture_data_.r_data[i] > 10) ) {;APDS9960.c: 691:   
      +                                        u_first = gesture_data_.u_data[i];
  9090  00DA  084D               	movf	processGestureData@i,w
  9091  00DB  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  9092  00DC  0086               	movwf	6
  9093  00DD  3002               	movlw	2	; select bank4/5
  9094  00DE  0087               	movwf	7
  9095  00DF  0801               	movf	1,w
  9096  00E0  00AF               	movwf	??_processGestureData
  9097  00E1  082F               	movf	??_processGestureData,w
  9098  00E2  00C5               	movwf	processGestureData@u_first
  9099                           
  9100                           ;APDS9960.c: 692:                 d_first = gesture_data_.d_data[i];
  9101  00E3  084D               	movf	processGestureData@i,w
  9102  00E4  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  9103  00E5  0086               	movwf	6
  9104  00E6  3002               	movlw	2	; select bank4/5
  9105  00E7  0087               	movwf	7
  9106  00E8  0801               	movf	1,w
  9107  00E9  00AF               	movwf	??_processGestureData
  9108  00EA  082F               	movf	??_processGestureData,w
  9109  00EB  00C6               	movwf	processGestureData@d_first
  9110                           
  9111                           ;APDS9960.c: 693:                 l_first = gesture_data_.l_data[i];
  9112  00EC  084D               	movf	processGestureData@i,w
  9113  00ED  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  9114  00EE  0086               	movwf	6
  9115  00EF  3002               	movlw	2	; select bank4/5
  9116  00F0  0087               	movwf	7
  9117  00F1  0801               	movf	1,w
  9118  00F2  00AF               	movwf	??_processGestureData
  9119  00F3  082F               	movf	??_processGestureData,w
  9120  00F4  00C7               	movwf	processGestureData@l_first
  9121                           
  9122                           ;APDS9960.c: 694:                 r_first = gesture_data_.r_data[i];
  9123  00F5  084D               	movf	processGestureData@i,w
  9124  00F6  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  9125  00F7  0086               	movwf	6
  9126  00F8  3002               	movlw	2	; select bank4/5
  9127  00F9  0087               	movwf	7
  9128  00FA  0801               	movf	1,w
  9129  00FB  00AF               	movwf	??_processGestureData
  9130  00FC  082F               	movf	??_processGestureData,w
  9131  00FD  00C8               	movwf	processGestureData@r_first
  9132  00FE                     l6608:	
  9133                           
  9134                           ;APDS9960.c: 700:         if( (u_first == 0) || (d_first == 0) || (l_first == 0) || (r_f
      +                          irst == 0) ) {
  9135  00FE  0020               	movlb	0	; select bank0
  9136  00FF  0845               	movf	processGestureData@u_first,w
  9137  0100  1903               	btfsc	3,2
  9138  0101  2897               	goto	l6586
  9139  0102  0846               	movf	processGestureData@d_first,w
  9140  0103  1903               	btfsc	3,2
  9141  0104  2897               	goto	l6586
  9142  0105  0847               	movf	processGestureData@l_first,w
  9143  0106  1903               	btfsc	3,2
  9144  0107  2897               	goto	l6586
  9145  0108  0848               	movf	processGestureData@r_first,w
  9146  0109  1903               	btfsc	3,2
  9147  010A  2897               	goto	l6586
  9148                           
  9149                           ;APDS9960.c: 706:         for( i = gesture_data_.total_gestures - 1; i >= 0; i-- ) {
  9150  010B  0024               	movlb	4	; select bank4
  9151  010C  0861               	movf	(_gesture_data_^(0+512)+65),w
  9152  010D  3EFF               	addlw	255
  9153  010E  0020               	movlb	0	; select bank0
  9154  010F  00CD               	movwf	processGestureData@i
  9155  0110  30FF               	movlw	255
  9156  0111  1803               	skipnc
  9157  0112  3000               	movlw	0
  9158  0113  00CE               	movwf	processGestureData@i+1
  9159                           
  9160                           ;APDS9960.c: 717:                 break;
  9161  0114  2919               	goto	l6622
  9162  0115                     l6636:	
  9163                           
  9164                           ;APDS9960.c: 719:         }
  9165  0115  30FF               	movlw	255
  9166  0116  07CD               	addwf	processGestureData@i,f
  9167  0117  30FF               	movlw	255
  9168  0118  3DCE               	addwfc	processGestureData@i+1,f
  9169  0119                     l6622:	
  9170  0119  1BCE               	btfsc	processGestureData@i+1,7
  9171  011A  2963               	goto	l6640
  9172                           
  9173                           ;APDS9960.c: 708:             if( (gesture_data_.u_data[i] > 10) &&
  9174  011B  084D               	movf	processGestureData@i,w
  9175  011C  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  9176  011D  0086               	movwf	6
  9177  011E  3002               	movlw	2	; select bank4/5
  9178  011F  0087               	movwf	7
  9179  0120  300B               	movlw	11
  9180  0121  0201               	subwf	1,w
  9181  0122  1C03               	skipc
  9182  0123  2915               	goto	l6636
  9183  0124  084D               	movf	processGestureData@i,w
  9184  0125  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  9185  0126  0086               	movwf	6
  9186  0127  3002               	movlw	2	; select bank4/5
  9187  0128  0087               	movwf	7
  9188  0129  300B               	movlw	11
  9189  012A  0201               	subwf	1,w
  9190  012B  1C03               	skipc
  9191  012C  2915               	goto	l6636
  9192  012D  084D               	movf	processGestureData@i,w
  9193  012E  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  9194  012F  0086               	movwf	6
  9195  0130  3002               	movlw	2	; select bank4/5
  9196  0131  0087               	movwf	7
  9197  0132  300B               	movlw	11
  9198  0133  0201               	subwf	1,w
  9199  0134  1C03               	skipc
  9200  0135  2915               	goto	l6636
  9201  0136  084D               	movf	processGestureData@i,w
  9202  0137  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  9203  0138  0086               	movwf	6
  9204  0139  3002               	movlw	2	; select bank4/5
  9205  013A  0087               	movwf	7
  9206  013B  300B               	movlw	11
  9207  013C  0201               	subwf	1,w
  9208  013D  1C03               	skipc
  9209  013E  2915               	goto	l6636
  9210                           
  9211                           ;APDS9960.c: 711:                 (gesture_data_.r_data[i] > 10) ) {;APDS9960.c: 713:   
      +                                        u_last = gesture_data_.u_data[i];
  9212  013F  084D               	movf	processGestureData@i,w
  9213  0140  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  9214  0141  0086               	movwf	6
  9215  0142  3002               	movlw	2	; select bank4/5
  9216  0143  0087               	movwf	7
  9217  0144  0801               	movf	1,w
  9218  0145  00AF               	movwf	??_processGestureData
  9219  0146  082F               	movf	??_processGestureData,w
  9220  0147  00C1               	movwf	processGestureData@u_last
  9221                           
  9222                           ;APDS9960.c: 714:                 d_last = gesture_data_.d_data[i];
  9223  0148  084D               	movf	processGestureData@i,w
  9224  0149  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  9225  014A  0086               	movwf	6
  9226  014B  3002               	movlw	2	; select bank4/5
  9227  014C  0087               	movwf	7
  9228  014D  0801               	movf	1,w
  9229  014E  00AF               	movwf	??_processGestureData
  9230  014F  082F               	movf	??_processGestureData,w
  9231  0150  00C2               	movwf	processGestureData@d_last
  9232                           
  9233                           ;APDS9960.c: 715:                 l_last = gesture_data_.l_data[i];
  9234  0151  084D               	movf	processGestureData@i,w
  9235  0152  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  9236  0153  0086               	movwf	6
  9237  0154  3002               	movlw	2	; select bank4/5
  9238  0155  0087               	movwf	7
  9239  0156  0801               	movf	1,w
  9240  0157  00AF               	movwf	??_processGestureData
  9241  0158  082F               	movf	??_processGestureData,w
  9242  0159  00C3               	movwf	processGestureData@l_last
  9243                           
  9244                           ;APDS9960.c: 716:                 r_last = gesture_data_.r_data[i];
  9245  015A  084D               	movf	processGestureData@i,w
  9246  015B  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  9247  015C  0086               	movwf	6
  9248  015D  3002               	movlw	2	; select bank4/5
  9249  015E  0087               	movwf	7
  9250  015F  0801               	movf	1,w
  9251  0160  00AF               	movwf	??_processGestureData
  9252  0161  082F               	movf	??_processGestureData,w
  9253  0162  00C4               	movwf	processGestureData@r_last
  9254  0163                     l6640:	
  9255                           
  9256                           ;APDS9960.c: 723:     ud_ratio_first = ((u_first - d_first) * 100) / (u_first + d_first)
      +                          ;
  9257  0163  0020               	movlb	0	; select bank0
  9258  0164  0845               	movf	processGestureData@u_first,w
  9259  0165  0746               	addwf	processGestureData@d_first,w
  9260  0166  00A6               	movwf	___awdiv@divisor
  9261  0167  01A7               	clrf	___awdiv@divisor+1
  9262  0168  0DA7               	rlf	___awdiv@divisor+1,f
  9263  0169  0846               	movf	processGestureData@d_first,w
  9264  016A  0245               	subwf	processGestureData@u_first,w
  9265  016B  00A0               	movwf	___wmul@multiplier
  9266  016C  01A1               	clrf	___wmul@multiplier+1
  9267  016D  1C03               	skipc
  9268  016E  03A1               	decf	___wmul@multiplier+1,f
  9269  016F  3064               	movlw	100
  9270  0170  00A2               	movwf	___wmul@multiplicand
  9271  0171  3000               	movlw	0
  9272  0172  00A3               	movwf	___wmul@multiplicand+1
  9273  0173  3189  2136  3180   	fcall	___wmul
  9274  0176  0020               	movlb	0	; select bank0
  9275  0177  0821               	movf	?___wmul+1,w
  9276  0178  00A9               	movwf	___awdiv@dividend+1
  9277  0179  0820               	movf	?___wmul,w
  9278  017A  00A8               	movwf	___awdiv@dividend
  9279  017B  318E  2672  3180   	fcall	___awdiv
  9280  017E  0020               	movlb	0	; select bank0
  9281  017F  0827               	movf	?___awdiv+1,w
  9282  0180  00B2               	movwf	processGestureData@ud_ratio_first+1
  9283  0181  0826               	movf	?___awdiv,w
  9284  0182  00B1               	movwf	processGestureData@ud_ratio_first
  9285                           
  9286                           ;APDS9960.c: 724:     lr_ratio_first = ((l_first - r_first) * 100) / (l_first + r_first)
      +                          ;
  9287  0183  0847               	movf	processGestureData@l_first,w
  9288  0184  0748               	addwf	processGestureData@r_first,w
  9289  0185  00A6               	movwf	___awdiv@divisor
  9290  0186  01A7               	clrf	___awdiv@divisor+1
  9291  0187  0DA7               	rlf	___awdiv@divisor+1,f
  9292  0188  0848               	movf	processGestureData@r_first,w
  9293  0189  0247               	subwf	processGestureData@l_first,w
  9294  018A  00A0               	movwf	___wmul@multiplier
  9295  018B  01A1               	clrf	___wmul@multiplier+1
  9296  018C  1C03               	skipc
  9297  018D  03A1               	decf	___wmul@multiplier+1,f
  9298  018E  3064               	movlw	100
  9299  018F  00A2               	movwf	___wmul@multiplicand
  9300  0190  3000               	movlw	0
  9301  0191  00A3               	movwf	___wmul@multiplicand+1
  9302  0192  3189  2136  3180   	fcall	___wmul
  9303  0195  0020               	movlb	0	; select bank0
  9304  0196  0821               	movf	?___wmul+1,w
  9305  0197  00A9               	movwf	___awdiv@dividend+1
  9306  0198  0820               	movf	?___wmul,w
  9307  0199  00A8               	movwf	___awdiv@dividend
  9308  019A  318E  2672  3180   	fcall	___awdiv
  9309  019D  0020               	movlb	0	; select bank0
  9310  019E  0827               	movf	?___awdiv+1,w
  9311  019F  00B4               	movwf	processGestureData@lr_ratio_first+1
  9312  01A0  0826               	movf	?___awdiv,w
  9313  01A1  00B3               	movwf	processGestureData@lr_ratio_first
  9314                           
  9315                           ;APDS9960.c: 725:     ud_ratio_last = ((u_last - d_last) * 100) / (u_last + d_last);
  9316  01A2  0841               	movf	processGestureData@u_last,w
  9317  01A3  0742               	addwf	processGestureData@d_last,w
  9318  01A4  00A6               	movwf	___awdiv@divisor
  9319  01A5  01A7               	clrf	___awdiv@divisor+1
  9320  01A6  0DA7               	rlf	___awdiv@divisor+1,f
  9321  01A7  0842               	movf	processGestureData@d_last,w
  9322  01A8  0241               	subwf	processGestureData@u_last,w
  9323  01A9  00A0               	movwf	___wmul@multiplier
  9324  01AA  01A1               	clrf	___wmul@multiplier+1
  9325  01AB  1C03               	skipc
  9326  01AC  03A1               	decf	___wmul@multiplier+1,f
  9327  01AD  3064               	movlw	100
  9328  01AE  00A2               	movwf	___wmul@multiplicand
  9329  01AF  3000               	movlw	0
  9330  01B0  00A3               	movwf	___wmul@multiplicand+1
  9331  01B1  3189  2136  3180   	fcall	___wmul
  9332  01B4  0020               	movlb	0	; select bank0
  9333  01B5  0821               	movf	?___wmul+1,w
  9334  01B6  00A9               	movwf	___awdiv@dividend+1
  9335  01B7  0820               	movf	?___wmul,w
  9336  01B8  00A8               	movwf	___awdiv@dividend
  9337  01B9  318E  2672  3180   	fcall	___awdiv
  9338  01BC  0020               	movlb	0	; select bank0
  9339  01BD  0827               	movf	?___awdiv+1,w
  9340  01BE  00B6               	movwf	processGestureData@ud_ratio_last+1
  9341  01BF  0826               	movf	?___awdiv,w
  9342  01C0  00B5               	movwf	processGestureData@ud_ratio_last
  9343                           
  9344                           ;APDS9960.c: 726:     lr_ratio_last = ((l_last - r_last) * 100) / (l_last + r_last);
  9345  01C1  0843               	movf	processGestureData@l_last,w
  9346  01C2  0744               	addwf	processGestureData@r_last,w
  9347  01C3  00A6               	movwf	___awdiv@divisor
  9348  01C4  01A7               	clrf	___awdiv@divisor+1
  9349  01C5  0DA7               	rlf	___awdiv@divisor+1,f
  9350  01C6  0844               	movf	processGestureData@r_last,w
  9351  01C7  0243               	subwf	processGestureData@l_last,w
  9352  01C8  00A0               	movwf	___wmul@multiplier
  9353  01C9  01A1               	clrf	___wmul@multiplier+1
  9354  01CA  1C03               	skipc
  9355  01CB  03A1               	decf	___wmul@multiplier+1,f
  9356  01CC  3064               	movlw	100
  9357  01CD  00A2               	movwf	___wmul@multiplicand
  9358  01CE  3000               	movlw	0
  9359  01CF  00A3               	movwf	___wmul@multiplicand+1
  9360  01D0  3189  2136  3180   	fcall	___wmul
  9361  01D3  0020               	movlb	0	; select bank0
  9362  01D4  0821               	movf	?___wmul+1,w
  9363  01D5  00A9               	movwf	___awdiv@dividend+1
  9364  01D6  0820               	movf	?___wmul,w
  9365  01D7  00A8               	movwf	___awdiv@dividend
  9366  01D8  318E  2672  3180   	fcall	___awdiv
  9367  01DB  0020               	movlb	0	; select bank0
  9368  01DC  0827               	movf	?___awdiv+1,w
  9369  01DD  00B8               	movwf	processGestureData@lr_ratio_last+1
  9370  01DE  0826               	movf	?___awdiv,w
  9371  01DF  00B7               	movwf	processGestureData@lr_ratio_last
  9372                           
  9373                           ;APDS9960.c: 729:     ud_delta = ud_ratio_last - ud_ratio_first;
  9374  01E0  0831               	movf	processGestureData@ud_ratio_first,w
  9375  01E1  0235               	subwf	processGestureData@ud_ratio_last,w
  9376  01E2  00C9               	movwf	processGestureData@ud_delta
  9377  01E3  0832               	movf	processGestureData@ud_ratio_first+1,w
  9378  01E4  3B36               	subwfb	processGestureData@ud_ratio_last+1,w
  9379  01E5  00CA               	movwf	processGestureData@ud_delta+1
  9380                           
  9381                           ;APDS9960.c: 730:     lr_delta = lr_ratio_last - lr_ratio_first;
  9382  01E6  0833               	movf	processGestureData@lr_ratio_first,w
  9383  01E7  0237               	subwf	processGestureData@lr_ratio_last,w
  9384  01E8  00CB               	movwf	processGestureData@lr_delta
  9385  01E9  0834               	movf	processGestureData@lr_ratio_first+1,w
  9386  01EA  3B38               	subwfb	processGestureData@lr_ratio_last+1,w
  9387  01EB  00CC               	movwf	processGestureData@lr_delta+1
  9388                           
  9389                           ;APDS9960.c: 733:     gesture_ud_delta_ += ud_delta;
  9390  01EC  0849               	movf	processGestureData@ud_delta,w
  9391  01ED  07E8               	addwf	_gesture_ud_delta_,f
  9392  01EE  084A               	movf	processGestureData@ud_delta+1,w
  9393  01EF  3DE9               	addwfc	_gesture_ud_delta_+1,f
  9394                           
  9395                           ;APDS9960.c: 734:     gesture_lr_delta_ += lr_delta;
  9396  01F0  084B               	movf	processGestureData@lr_delta,w
  9397  01F1  07E6               	addwf	_gesture_lr_delta_,f
  9398  01F2  084C               	movf	processGestureData@lr_delta+1,w
  9399  01F3  3DE7               	addwfc	_gesture_lr_delta_+1,f
  9400                           
  9401                           ;APDS9960.c: 737:     if( gesture_ud_delta_ >= 50 ) {
  9402  01F4  0869               	movf	_gesture_ud_delta_+1,w
  9403  01F5  3A80               	xorlw	128
  9404  01F6  00AF               	movwf	??_processGestureData
  9405  01F7  3080               	movlw	128
  9406  01F8  022F               	subwf	??_processGestureData,w
  9407  01F9  1D03               	skipz
  9408  01FA  29FD               	goto	u5395
  9409  01FB  3032               	movlw	50
  9410  01FC  0268               	subwf	_gesture_ud_delta_,w
  9411  01FD                     u5395:	
  9412  01FD  1C03               	skipc
  9413  01FE  2A04               	goto	l6654
  9414                           
  9415                           ;APDS9960.c: 738:         gesture_ud_count_ = 1;
  9416  01FF  3001               	movlw	1
  9417  0200  0020               	movlb	0	; select bank0
  9418  0201  00E4               	movwf	_gesture_ud_count_
  9419  0202  3000               	movlw	0
  9420  0203  2A14               	goto	L2
  9421  0204                     l6654:	
  9422                           ;APDS9960.c: 739:     } else if( gesture_ud_delta_ <= -50 ) {
  9423                           
  9424  0204  0020               	movlb	0	; select bank0
  9425  0205  0869               	movf	_gesture_ud_delta_+1,w
  9426  0206  3A80               	xorlw	128
  9427  0207  00AF               	movwf	??_processGestureData
  9428  0208  307F               	movlw	127
  9429  0209  022F               	subwf	??_processGestureData,w
  9430  020A  1D03               	skipz
  9431  020B  2A0E               	goto	u5405
  9432  020C  30CF               	movlw	207
  9433  020D  0268               	subwf	_gesture_ud_delta_,w
  9434  020E                     u5405:	
  9435  020E  1803               	skipnc
  9436  020F  2A16               	goto	l6658
  9437                           
  9438                           ;APDS9960.c: 740:         gesture_ud_count_ = -1;
  9439  0210  30FF               	movlw	255
  9440  0211  0020               	movlb	0	; select bank0
  9441  0212  00E4               	movwf	_gesture_ud_count_
  9442  0213  30FF               	movlw	255
  9443  0214                     L2:	
  9444  0214  00E5               	movwf	_gesture_ud_count_+1
  9445                           
  9446                           ;APDS9960.c: 741:     } else {
  9447  0215  2A19               	goto	l6660
  9448  0216                     l6658:	
  9449                           
  9450                           ;APDS9960.c: 742:         gesture_ud_count_ = 0;
  9451  0216  0020               	movlb	0	; select bank0
  9452  0217  01E4               	clrf	_gesture_ud_count_
  9453  0218  01E5               	clrf	_gesture_ud_count_+1
  9454  0219                     l6660:	
  9455                           
  9456                           ;APDS9960.c: 746:     if( gesture_lr_delta_ >= 50 ) {
  9457  0219  0867               	movf	_gesture_lr_delta_+1,w
  9458  021A  3A80               	xorlw	128
  9459  021B  00AF               	movwf	??_processGestureData
  9460  021C  3080               	movlw	128
  9461  021D  022F               	subwf	??_processGestureData,w
  9462  021E  1D03               	skipz
  9463  021F  2A22               	goto	u5415
  9464  0220  3032               	movlw	50
  9465  0221  0266               	subwf	_gesture_lr_delta_,w
  9466  0222                     u5415:	
  9467  0222  1C03               	skipc
  9468  0223  2A29               	goto	l6664
  9469                           
  9470                           ;APDS9960.c: 747:         gesture_lr_count_ = 1;
  9471  0224  3001               	movlw	1
  9472  0225  0020               	movlb	0	; select bank0
  9473  0226  00E2               	movwf	_gesture_lr_count_
  9474  0227  3000               	movlw	0
  9475  0228  2A39               	goto	L3
  9476  0229                     l6664:	
  9477                           ;APDS9960.c: 748:     } else if( gesture_lr_delta_ <= -50 ) {
  9478                           
  9479  0229  0020               	movlb	0	; select bank0
  9480  022A  0867               	movf	_gesture_lr_delta_+1,w
  9481  022B  3A80               	xorlw	128
  9482  022C  00AF               	movwf	??_processGestureData
  9483  022D  307F               	movlw	127
  9484  022E  022F               	subwf	??_processGestureData,w
  9485  022F  1D03               	skipz
  9486  0230  2A33               	goto	u5425
  9487  0231  30CF               	movlw	207
  9488  0232  0266               	subwf	_gesture_lr_delta_,w
  9489  0233                     u5425:	
  9490  0233  1803               	skipnc
  9491  0234  2A3B               	goto	l6668
  9492                           
  9493                           ;APDS9960.c: 749:         gesture_lr_count_ = -1;
  9494  0235  30FF               	movlw	255
  9495  0236  0020               	movlb	0	; select bank0
  9496  0237  00E2               	movwf	_gesture_lr_count_
  9497  0238  30FF               	movlw	255
  9498  0239                     L3:	
  9499  0239  00E3               	movwf	_gesture_lr_count_+1
  9500                           
  9501                           ;APDS9960.c: 750:     } else {
  9502  023A  2A3E               	goto	l6670
  9503  023B                     l6668:	
  9504                           
  9505                           ;APDS9960.c: 751:         gesture_lr_count_ = 0;
  9506  023B  0020               	movlb	0	; select bank0
  9507  023C  01E2               	clrf	_gesture_lr_count_
  9508  023D  01E3               	clrf	_gesture_lr_count_+1
  9509  023E                     l6670:	
  9510                           
  9511                           ;APDS9960.c: 755:     if( (gesture_ud_count_ == 0) && (gesture_lr_count_ == 0) ) {
  9512  023E  0864               	movf	_gesture_ud_count_,w
  9513  023F  0465               	iorwf	_gesture_ud_count_+1,w
  9514  0240  1D03               	btfss	3,2
  9515  0241  2AE9               	goto	l6714
  9516  0242  0862               	movf	_gesture_lr_count_,w
  9517  0243  0463               	iorwf	_gesture_lr_count_+1,w
  9518  0244  1D03               	btfss	3,2
  9519  0245  2AE9               	goto	l6714
  9520                           
  9521                           ;APDS9960.c: 756:         if( (((ud_delta) > 0 ? (ud_delta) : -(ud_delta)) < 20) && (((l
      +                          r_delta) > 0 ? (lr_delta) : -(lr_delta)) < 20) ) {
  9522  0246  084A               	movf	processGestureData@ud_delta+1,w
  9523  0247  3A80               	xorlw	128
  9524  0248  00AF               	movwf	??_processGestureData
  9525  0249  3080               	movlw	128
  9526  024A  022F               	subwf	??_processGestureData,w
  9527  024B  1D03               	skipz
  9528  024C  2A4F               	goto	u5455
  9529  024D  3001               	movlw	1
  9530  024E  0249               	subwf	processGestureData@ud_delta,w
  9531  024F                     u5455:	
  9532  024F  1803               	skipnc
  9533  0250  2A5E               	goto	l6678
  9534  0251  0020               	movlb	0	; select bank0
  9535  0252  0949               	comf	processGestureData@ud_delta,w
  9536  0253  00AF               	movwf	??_processGestureData
  9537  0254  094A               	comf	processGestureData@ud_delta+1,w
  9538  0255  00B0               	movwf	??_processGestureData+1
  9539  0256  0AAF               	incf	??_processGestureData,f
  9540  0257  1903               	skipnz
  9541  0258  0AB0               	incf	??_processGestureData+1,f
  9542  0259  082F               	movf	??_processGestureData,w
  9543  025A  00B9               	movwf	_processGestureData$1681
  9544  025B  0830               	movf	??_processGestureData+1,w
  9545  025C  00BA               	movwf	_processGestureData$1681+1
  9546  025D  2A63               	goto	l1140
  9547  025E                     l6678:	
  9548  025E  0020               	movlb	0	; select bank0
  9549  025F  084A               	movf	processGestureData@ud_delta+1,w
  9550  0260  00BA               	movwf	_processGestureData$1681+1
  9551  0261  0849               	movf	processGestureData@ud_delta,w
  9552  0262  00B9               	movwf	_processGestureData$1681
  9553  0263                     l1140:	
  9554  0263  083A               	movf	_processGestureData$1681+1,w
  9555  0264  3A80               	xorlw	128
  9556  0265  00AF               	movwf	??_processGestureData
  9557  0266  3080               	movlw	128
  9558  0267  022F               	subwf	??_processGestureData,w
  9559  0268  1D03               	skipz
  9560  0269  2A6C               	goto	u5465
  9561  026A  3014               	movlw	20
  9562  026B  0239               	subwf	_processGestureData$1681,w
  9563  026C                     u5465:	
  9564  026C  1803               	skipnc
  9565  026D  2897               	goto	l6586
  9566  026E  0020               	movlb	0	; select bank0
  9567  026F  084C               	movf	processGestureData@lr_delta+1,w
  9568  0270  3A80               	xorlw	128
  9569  0271  00AF               	movwf	??_processGestureData
  9570  0272  3080               	movlw	128
  9571  0273  022F               	subwf	??_processGestureData,w
  9572  0274  1D03               	skipz
  9573  0275  2A78               	goto	u5475
  9574  0276  3001               	movlw	1
  9575  0277  024B               	subwf	processGestureData@lr_delta,w
  9576  0278                     u5475:	
  9577  0278  1803               	skipnc
  9578  0279  2A87               	goto	l6684
  9579  027A  0020               	movlb	0	; select bank0
  9580  027B  094B               	comf	processGestureData@lr_delta,w
  9581  027C  00AF               	movwf	??_processGestureData
  9582  027D  094C               	comf	processGestureData@lr_delta+1,w
  9583  027E  00B0               	movwf	??_processGestureData+1
  9584  027F  0AAF               	incf	??_processGestureData,f
  9585  0280  1903               	skipnz
  9586  0281  0AB0               	incf	??_processGestureData+1,f
  9587  0282  082F               	movf	??_processGestureData,w
  9588  0283  00BB               	movwf	_processGestureData$1682
  9589  0284  0830               	movf	??_processGestureData+1,w
  9590  0285  00BC               	movwf	_processGestureData$1682+1
  9591  0286  2A8C               	goto	l1144
  9592  0287                     l6684:	
  9593  0287  0020               	movlb	0	; select bank0
  9594  0288  084C               	movf	processGestureData@lr_delta+1,w
  9595  0289  00BC               	movwf	_processGestureData$1682+1
  9596  028A  084B               	movf	processGestureData@lr_delta,w
  9597  028B  00BB               	movwf	_processGestureData$1682
  9598  028C                     l1144:	
  9599  028C  083C               	movf	_processGestureData$1682+1,w
  9600  028D  3A80               	xorlw	128
  9601  028E  00AF               	movwf	??_processGestureData
  9602  028F  3080               	movlw	128
  9603  0290  022F               	subwf	??_processGestureData,w
  9604  0291  1D03               	skipz
  9605  0292  2A95               	goto	u5485
  9606  0293  3014               	movlw	20
  9607  0294  023B               	subwf	_processGestureData$1682,w
  9608  0295                     u5485:	
  9609  0295  1803               	skipnc
  9610  0296  2897               	goto	l6586
  9611                           
  9612                           ;APDS9960.c: 757: ;APDS9960.c: 759:             if( (ud_delta == 0) && (lr_delta == 0) )
      +                           {
  9613  0297  0020               	movlb	0	; select bank0
  9614  0298  0849               	movf	processGestureData@ud_delta,w
  9615  0299  044A               	iorwf	processGestureData@ud_delta+1,w
  9616  029A  1D03               	btfss	3,2
  9617  029B  2AA6               	goto	l6692
  9618  029C  084B               	movf	processGestureData@lr_delta,w
  9619  029D  044C               	iorwf	processGestureData@lr_delta+1,w
  9620  029E  1D03               	btfss	3,2
  9621  029F  2AA6               	goto	l6692
  9622                           
  9623                           ;APDS9960.c: 760:                 gesture_near_count_++;
  9624  02A0  3001               	movlw	1
  9625  02A1  0021               	movlb	1	; select bank1
  9626  02A2  07E6               	addwf	_gesture_near_count_^(0+128),f
  9627  02A3  3000               	movlw	0
  9628  02A4  3DE7               	addwfc	(_gesture_near_count_+1)^(0+128),f
  9629                           
  9630                           ;APDS9960.c: 761:             } else if( (ud_delta != 0) || (lr_delta != 0) ) {
  9631  02A5  2AB3               	goto	l1146
  9632  02A6                     l6692:	
  9633  02A6  0849               	movf	processGestureData@ud_delta,w
  9634  02A7  044A               	iorwf	processGestureData@ud_delta+1,w
  9635  02A8  1D03               	btfss	3,2
  9636  02A9  2AAE               	goto	l6696
  9637  02AA  084B               	movf	processGestureData@lr_delta,w
  9638  02AB  044C               	iorwf	processGestureData@lr_delta+1,w
  9639  02AC  1903               	btfsc	3,2
  9640  02AD  2AB3               	goto	l1146
  9641  02AE                     l6696:	
  9642                           
  9643                           ;APDS9960.c: 762:                 gesture_far_count_++;
  9644  02AE  3001               	movlw	1
  9645  02AF  0021               	movlb	1	; select bank1
  9646  02B0  07E4               	addwf	_gesture_far_count_^(0+128),f
  9647  02B1  3000               	movlw	0
  9648  02B2  3DE5               	addwfc	(_gesture_far_count_+1)^(0+128),f
  9649  02B3                     l1146:	
  9650                           
  9651                           ;APDS9960.c: 765:             if( (gesture_near_count_ >= 10) && (gesture_far_count_ >= 
      +                          2) ) {
  9652  02B3  0021               	movlb	1	; select bank1
  9653  02B4  0867               	movf	(_gesture_near_count_+1)^(0+128),w
  9654  02B5  3A80               	xorlw	128
  9655  02B6  0020               	movlb	0	; select bank0
  9656  02B7  00AF               	movwf	??_processGestureData
  9657  02B8  3080               	movlw	128
  9658  02B9  022F               	subwf	??_processGestureData,w
  9659  02BA  1D03               	skipz
  9660  02BB  2ABF               	goto	u5535
  9661  02BC  300A               	movlw	10
  9662  02BD  0021               	movlb	1	; select bank1
  9663  02BE  0266               	subwf	_gesture_near_count_^(0+128),w
  9664  02BF                     u5535:	
  9665  02BF  1C03               	skipc
  9666  02C0  2897               	goto	l6586
  9667  02C1  0021               	movlb	1	; select bank1
  9668  02C2  0865               	movf	(_gesture_far_count_+1)^(0+128),w
  9669  02C3  3A80               	xorlw	128
  9670  02C4  0020               	movlb	0	; select bank0
  9671  02C5  00AF               	movwf	??_processGestureData
  9672  02C6  3080               	movlw	128
  9673  02C7  022F               	subwf	??_processGestureData,w
  9674  02C8  1D03               	skipz
  9675  02C9  2ACD               	goto	u5545
  9676  02CA  3002               	movlw	2
  9677  02CB  0021               	movlb	1	; select bank1
  9678  02CC  0264               	subwf	_gesture_far_count_^(0+128),w
  9679  02CD                     u5545:	
  9680  02CD  1C03               	skipc
  9681  02CE  2897               	goto	l6586
  9682                           
  9683                           ;APDS9960.c: 766:                 if( (ud_delta == 0) && (lr_delta == 0) ) {
  9684  02CF  0020               	movlb	0	; select bank0
  9685  02D0  0849               	movf	processGestureData@ud_delta,w
  9686  02D1  044A               	iorwf	processGestureData@ud_delta+1,w
  9687  02D2  1D03               	btfss	3,2
  9688  02D3  2ADA               	goto	l6706
  9689  02D4  084B               	movf	processGestureData@lr_delta,w
  9690  02D5  044C               	iorwf	processGestureData@lr_delta+1,w
  9691  02D6  1D03               	btfss	3,2
  9692  02D7  2ADA               	goto	l6706
  9693                           
  9694                           ;APDS9960.c: 767:                     gesture_state_ = NEAR_STATE;
  9695  02D8  3001               	movlw	1
  9696  02D9  2AE3               	goto	L4
  9697  02DA                     l6706:	
  9698                           ;APDS9960.c: 768:                 } else if( (ud_delta != 0) && (lr_delta != 0) ) {
  9699                           
  9700  02DA  0849               	movf	processGestureData@ud_delta,w
  9701  02DB  044A               	iorwf	processGestureData@ud_delta+1,w
  9702  02DC  1903               	btfsc	3,2
  9703  02DD  2AE7               	goto	l1152
  9704  02DE  084B               	movf	processGestureData@lr_delta,w
  9705  02DF  044C               	iorwf	processGestureData@lr_delta+1,w
  9706  02E0  1903               	btfsc	3,2
  9707  02E1  2AE7               	goto	l1152
  9708                           
  9709                           ;APDS9960.c: 769:                     gesture_state_ = FAR_STATE;
  9710  02E2  3002               	movlw	2
  9711  02E3                     L4:	
  9712  02E3  0021               	movlb	1	; select bank1
  9713  02E4  00E2               	movwf	_gesture_state_^(0+128)
  9714  02E5  3000               	movlw	0
  9715  02E6  00E3               	movwf	(_gesture_state_^(0+128)+1)
  9716  02E7                     l1152:	
  9717                           
  9718                           ;APDS9960.c: 771:                 return 1;
  9719  02E7  3001               	movlw	1
  9720  02E8  0008               	return
  9721  02E9                     l6714:	
  9722                           
  9723                           ;APDS9960.c: 775:         if( (((ud_delta) > 0 ? (ud_delta) : -(ud_delta)) < 20) && (((l
      +                          r_delta) > 0 ? (lr_delta) : -(lr_delta)) < 20) ) {
  9724  02E9  084A               	movf	processGestureData@ud_delta+1,w
  9725  02EA  3A80               	xorlw	128
  9726  02EB  00AF               	movwf	??_processGestureData
  9727  02EC  3080               	movlw	128
  9728  02ED  022F               	subwf	??_processGestureData,w
  9729  02EE  1D03               	skipz
  9730  02EF  2AF2               	goto	u5595
  9731  02F0  3001               	movlw	1
  9732  02F1  0249               	subwf	processGestureData@ud_delta,w
  9733  02F2                     u5595:	
  9734  02F2  1803               	skipnc
  9735  02F3  2B01               	goto	l6718
  9736  02F4  0020               	movlb	0	; select bank0
  9737  02F5  0949               	comf	processGestureData@ud_delta,w
  9738  02F6  00AF               	movwf	??_processGestureData
  9739  02F7  094A               	comf	processGestureData@ud_delta+1,w
  9740  02F8  00B0               	movwf	??_processGestureData+1
  9741  02F9  0AAF               	incf	??_processGestureData,f
  9742  02FA  1903               	skipnz
  9743  02FB  0AB0               	incf	??_processGestureData+1,f
  9744  02FC  082F               	movf	??_processGestureData,w
  9745  02FD  00BD               	movwf	_processGestureData$1683
  9746  02FE  0830               	movf	??_processGestureData+1,w
  9747  02FF  00BE               	movwf	_processGestureData$1683+1
  9748  0300  2B06               	goto	l1159
  9749  0301                     l6718:	
  9750  0301  0020               	movlb	0	; select bank0
  9751  0302  084A               	movf	processGestureData@ud_delta+1,w
  9752  0303  00BE               	movwf	_processGestureData$1683+1
  9753  0304  0849               	movf	processGestureData@ud_delta,w
  9754  0305  00BD               	movwf	_processGestureData$1683
  9755  0306                     l1159:	
  9756  0306  083E               	movf	_processGestureData$1683+1,w
  9757  0307  3A80               	xorlw	128
  9758  0308  00AF               	movwf	??_processGestureData
  9759  0309  3080               	movlw	128
  9760  030A  022F               	subwf	??_processGestureData,w
  9761  030B  1D03               	skipz
  9762  030C  2B0F               	goto	u5605
  9763  030D  3014               	movlw	20
  9764  030E  023D               	subwf	_processGestureData$1683,w
  9765  030F                     u5605:	
  9766  030F  1803               	skipnc
  9767  0310  2897               	goto	l6586
  9768  0311  0020               	movlb	0	; select bank0
  9769  0312  084C               	movf	processGestureData@lr_delta+1,w
  9770  0313  3A80               	xorlw	128
  9771  0314  00AF               	movwf	??_processGestureData
  9772  0315  3080               	movlw	128
  9773  0316  022F               	subwf	??_processGestureData,w
  9774  0317  1D03               	skipz
  9775  0318  2B1B               	goto	u5615
  9776  0319  3001               	movlw	1
  9777  031A  024B               	subwf	processGestureData@lr_delta,w
  9778  031B                     u5615:	
  9779  031B  1803               	skipnc
  9780  031C  2B2A               	goto	l6724
  9781  031D  0020               	movlb	0	; select bank0
  9782  031E  094B               	comf	processGestureData@lr_delta,w
  9783  031F  00AF               	movwf	??_processGestureData
  9784  0320  094C               	comf	processGestureData@lr_delta+1,w
  9785  0321  00B0               	movwf	??_processGestureData+1
  9786  0322  0AAF               	incf	??_processGestureData,f
  9787  0323  1903               	skipnz
  9788  0324  0AB0               	incf	??_processGestureData+1,f
  9789  0325  082F               	movf	??_processGestureData,w
  9790  0326  00BF               	movwf	_processGestureData$1684
  9791  0327  0830               	movf	??_processGestureData+1,w
  9792  0328  00C0               	movwf	_processGestureData$1684+1
  9793  0329  2B2F               	goto	l1163
  9794  032A                     l6724:	
  9795  032A  0020               	movlb	0	; select bank0
  9796  032B  084C               	movf	processGestureData@lr_delta+1,w
  9797  032C  00C0               	movwf	_processGestureData$1684+1
  9798  032D  084B               	movf	processGestureData@lr_delta,w
  9799  032E  00BF               	movwf	_processGestureData$1684
  9800  032F                     l1163:	
  9801  032F  0840               	movf	_processGestureData$1684+1,w
  9802  0330  3A80               	xorlw	128
  9803  0331  00AF               	movwf	??_processGestureData
  9804  0332  3080               	movlw	128
  9805  0333  022F               	subwf	??_processGestureData,w
  9806  0334  1D03               	skipz
  9807  0335  2B38               	goto	u5625
  9808  0336  3014               	movlw	20
  9809  0337  023F               	subwf	_processGestureData$1684,w
  9810  0338                     u5625:	
  9811  0338  1803               	skipnc
  9812  0339  2897               	goto	l6586
  9813                           
  9814                           ;APDS9960.c: 776: ;APDS9960.c: 778:             if( (ud_delta == 0) && (lr_delta == 0) )
      +                           {
  9815  033A  0020               	movlb	0	; select bank0
  9816  033B  0849               	movf	processGestureData@ud_delta,w
  9817  033C  044A               	iorwf	processGestureData@ud_delta+1,w
  9818  033D  1D03               	btfss	3,2
  9819  033E  2B48               	goto	l1164
  9820  033F  084B               	movf	processGestureData@lr_delta,w
  9821  0340  044C               	iorwf	processGestureData@lr_delta+1,w
  9822  0341  1D03               	btfss	3,2
  9823  0342  2B48               	goto	l1164
  9824                           
  9825                           ;APDS9960.c: 779:                 gesture_near_count_++;
  9826  0343  3001               	movlw	1
  9827  0344  0021               	movlb	1	; select bank1
  9828  0345  07E6               	addwf	_gesture_near_count_^(0+128),f
  9829  0346  3000               	movlw	0
  9830  0347  3DE7               	addwfc	(_gesture_near_count_+1)^(0+128),f
  9831  0348                     l1164:	
  9832                           ;APDS9960.c: 780:             }
  9833                           
  9834                           
  9835                           ;APDS9960.c: 782:             if( gesture_near_count_ >= 10 ) {
  9836  0348  0021               	movlb	1	; select bank1
  9837  0349  0867               	movf	(_gesture_near_count_+1)^(0+128),w
  9838  034A  3A80               	xorlw	128
  9839  034B  0020               	movlb	0	; select bank0
  9840  034C  00AF               	movwf	??_processGestureData
  9841  034D  3080               	movlw	128
  9842  034E  022F               	subwf	??_processGestureData,w
  9843  034F  1D03               	skipz
  9844  0350  2B54               	goto	u5655
  9845  0351  300A               	movlw	10
  9846  0352  0021               	movlb	1	; select bank1
  9847  0353  0266               	subwf	_gesture_near_count_^(0+128),w
  9848  0354                     u5655:	
  9849  0354  1C03               	skipc
  9850  0355  2897               	goto	l6586
  9851                           
  9852                           ;APDS9960.c: 783:                 gesture_ud_count_ = 0;
  9853  0356  0020               	movlb	0	; select bank0
  9854  0357  01E4               	clrf	_gesture_ud_count_
  9855  0358  01E5               	clrf	_gesture_ud_count_+1
  9856                           
  9857                           ;APDS9960.c: 784:                 gesture_lr_count_ = 0;
  9858  0359  01E2               	clrf	_gesture_lr_count_
  9859  035A  01E3               	clrf	_gesture_lr_count_+1
  9860                           
  9861                           ;APDS9960.c: 785:                 gesture_ud_delta_ = 0;
  9862  035B  01E8               	clrf	_gesture_ud_delta_
  9863  035C  01E9               	clrf	_gesture_ud_delta_+1
  9864                           
  9865                           ;APDS9960.c: 786:                 gesture_lr_delta_ = 0;
  9866  035D  01E6               	clrf	_gesture_lr_delta_
  9867  035E  01E7               	clrf	_gesture_lr_delta_+1
  9868  035F  2897               	goto	l6586
  9869  0360                     __end_of_processGestureData:	
  9870                           
  9871                           	psect	text19
  9872  0936                     __ptext19:	
  9873 ;; *************** function ___wmul *****************
  9874 ;; Defined at:
  9875 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
  9876 ;; Parameters:    Size  Location     Type
  9877 ;;  multiplier      2    0[BANK0 ] unsigned int 
  9878 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  9879 ;; Auto vars:     Size  Location     Type
  9880 ;;  product         2    4[BANK0 ] unsigned int 
  9881 ;; Return value:  Size  Location     Type
  9882 ;;                  2    0[BANK0 ] unsigned int 
  9883 ;; Registers used:
  9884 ;;		wreg, status,2, status,0
  9885 ;; Tracked objects:
  9886 ;;		On entry : 0/0
  9887 ;;		On exit  : 0/0
  9888 ;;		Unchanged: 0/0
  9889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9890 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9891 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9892 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9893 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9894 ;;Total ram usage:        6 bytes
  9895 ;; Hardware stack levels used:    1
  9896 ;; Hardware stack levels required when called:    5
  9897 ;; This function calls:
  9898 ;;		Nothing
  9899 ;; This function is called by:
  9900 ;;		_processGestureData
  9901 ;; This function uses a non-reentrant model
  9902 ;;
  9903                           
  9904                           
  9905                           ;psect for function ___wmul
  9906  0936                     ___wmul:	
  9907                           
  9908                           ;incstack = 0
  9909                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  9910  0936  0020               	movlb	0	; select bank0
  9911  0937  01A4               	clrf	___wmul@product
  9912  0938  01A5               	clrf	___wmul@product+1
  9913  0939                     l6426:	
  9914  0939  1C20               	btfss	___wmul@multiplier,0
  9915  093A  293F               	goto	l1606
  9916  093B  0822               	movf	___wmul@multiplicand,w
  9917  093C  07A4               	addwf	___wmul@product,f
  9918  093D  0823               	movf	___wmul@multiplicand+1,w
  9919  093E  3DA5               	addwfc	___wmul@product+1,f
  9920  093F                     l1606:	
  9921  093F  3001               	movlw	1
  9922  0940                     u4985:	
  9923  0940  35A2               	lslf	___wmul@multiplicand,f
  9924  0941  0DA3               	rlf	___wmul@multiplicand+1,f
  9925  0942  0B89               	decfsz	9,f
  9926  0943  2940               	goto	u4985
  9927  0944  3001               	movlw	1
  9928  0945                     u4995:	
  9929  0945  36A1               	lsrf	___wmul@multiplier+1,f
  9930  0946  0CA0               	rrf	___wmul@multiplier,f
  9931  0947  0B89               	decfsz	9,f
  9932  0948  2945               	goto	u4995
  9933  0949  0820               	movf	___wmul@multiplier,w
  9934  094A  0421               	iorwf	___wmul@multiplier+1,w
  9935  094B  1D03               	btfss	3,2
  9936  094C  2939               	goto	l6426
  9937  094D  0825               	movf	___wmul@product+1,w
  9938  094E  00A1               	movwf	?___wmul+1
  9939  094F  0824               	movf	___wmul@product,w
  9940  0950  00A0               	movwf	?___wmul
  9941  0951  0008               	return
  9942  0952                     __end_of___wmul:	
  9943                           
  9944                           	psect	text20
  9945  0E72                     __ptext20:	
  9946 ;; *************** function ___awdiv *****************
  9947 ;; Defined at:
  9948 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awdiv.c"
  9949 ;; Parameters:    Size  Location     Type
  9950 ;;  divisor         2    6[BANK0 ] int 
  9951 ;;  dividend        2    8[BANK0 ] int 
  9952 ;; Auto vars:     Size  Location     Type
  9953 ;;  quotient        2   13[BANK0 ] int 
  9954 ;;  sign            1   12[BANK0 ] unsigned char 
  9955 ;;  counter         1   11[BANK0 ] unsigned char 
  9956 ;; Return value:  Size  Location     Type
  9957 ;;                  2    6[BANK0 ] int 
  9958 ;; Registers used:
  9959 ;;		wreg, status,2, status,0
  9960 ;; Tracked objects:
  9961 ;;		On entry : 0/0
  9962 ;;		On exit  : 0/0
  9963 ;;		Unchanged: 0/0
  9964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9965 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9966 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9967 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9968 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9969 ;;Total ram usage:        9 bytes
  9970 ;; Hardware stack levels used:    1
  9971 ;; Hardware stack levels required when called:    5
  9972 ;; This function calls:
  9973 ;;		Nothing
  9974 ;; This function is called by:
  9975 ;;		_processGestureData
  9976 ;; This function uses a non-reentrant model
  9977 ;;
  9978                           
  9979                           
  9980                           ;psect for function ___awdiv
  9981  0E72                     ___awdiv:	
  9982                           
  9983                           ;incstack = 0
  9984                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  9985  0E72  0020               	movlb	0	; select bank0
  9986  0E73  01AC               	clrf	___awdiv@sign
  9987  0E74  1FA7               	btfss	___awdiv@divisor+1,7
  9988  0E75  2E7D               	goto	l6446
  9989  0E76  09A6               	comf	___awdiv@divisor,f
  9990  0E77  09A7               	comf	___awdiv@divisor+1,f
  9991  0E78  0AA6               	incf	___awdiv@divisor,f
  9992  0E79  1903               	skipnz
  9993  0E7A  0AA7               	incf	___awdiv@divisor+1,f
  9994  0E7B  01AC               	clrf	___awdiv@sign
  9995  0E7C  0AAC               	incf	___awdiv@sign,f
  9996  0E7D                     l6446:	
  9997  0E7D  1FA9               	btfss	___awdiv@dividend+1,7
  9998  0E7E  2E88               	goto	l6452
  9999  0E7F  09A8               	comf	___awdiv@dividend,f
 10000  0E80  09A9               	comf	___awdiv@dividend+1,f
 10001  0E81  0AA8               	incf	___awdiv@dividend,f
 10002  0E82  1903               	skipnz
 10003  0E83  0AA9               	incf	___awdiv@dividend+1,f
 10004  0E84  3001               	movlw	1
 10005  0E85  00AA               	movwf	??___awdiv
 10006  0E86  082A               	movf	??___awdiv,w
 10007  0E87  06AC               	xorwf	___awdiv@sign,f
 10008  0E88                     l6452:	
 10009  0E88  01AD               	clrf	___awdiv@quotient
 10010  0E89  01AE               	clrf	___awdiv@quotient+1
 10011  0E8A  0826               	movf	___awdiv@divisor,w
 10012  0E8B  0427               	iorwf	___awdiv@divisor+1,w
 10013  0E8C  1903               	btfsc	3,2
 10014  0E8D  2EB7               	goto	l6474
 10015  0E8E  01AB               	clrf	___awdiv@counter
 10016  0E8F  0AAB               	incf	___awdiv@counter,f
 10017  0E90                     l6462:	
 10018  0E90  1BA7               	btfsc	___awdiv@divisor+1,7
 10019  0E91  2E9C               	goto	l6464
 10020  0E92  3001               	movlw	1
 10021  0E93                     u5045:	
 10022  0E93  35A6               	lslf	___awdiv@divisor,f
 10023  0E94  0DA7               	rlf	___awdiv@divisor+1,f
 10024  0E95  0B89               	decfsz	9,f
 10025  0E96  2E93               	goto	u5045
 10026  0E97  3001               	movlw	1
 10027  0E98  00AA               	movwf	??___awdiv
 10028  0E99  082A               	movf	??___awdiv,w
 10029  0E9A  07AB               	addwf	___awdiv@counter,f
 10030  0E9B  2E90               	goto	l6462
 10031  0E9C                     l6464:	
 10032  0E9C  3001               	movlw	1
 10033  0E9D                     u5065:	
 10034  0E9D  35AD               	lslf	___awdiv@quotient,f
 10035  0E9E  0DAE               	rlf	___awdiv@quotient+1,f
 10036  0E9F  0B89               	decfsz	9,f
 10037  0EA0  2E9D               	goto	u5065
 10038  0EA1  0827               	movf	___awdiv@divisor+1,w
 10039  0EA2  0229               	subwf	___awdiv@dividend+1,w
 10040  0EA3  1D03               	skipz
 10041  0EA4  2EA7               	goto	u5075
 10042  0EA5  0826               	movf	___awdiv@divisor,w
 10043  0EA6  0228               	subwf	___awdiv@dividend,w
 10044  0EA7                     u5075:	
 10045  0EA7  1C03               	skipc
 10046  0EA8  2EAE               	goto	l6470
 10047  0EA9  0826               	movf	___awdiv@divisor,w
 10048  0EAA  02A8               	subwf	___awdiv@dividend,f
 10049  0EAB  0827               	movf	___awdiv@divisor+1,w
 10050  0EAC  3BA9               	subwfb	___awdiv@dividend+1,f
 10051  0EAD  142D               	bsf	___awdiv@quotient,0
 10052  0EAE                     l6470:	
 10053  0EAE  3001               	movlw	1
 10054  0EAF                     u5085:	
 10055  0EAF  36A7               	lsrf	___awdiv@divisor+1,f
 10056  0EB0  0CA6               	rrf	___awdiv@divisor,f
 10057  0EB1  0B89               	decfsz	9,f
 10058  0EB2  2EAF               	goto	u5085
 10059  0EB3  3001               	movlw	1
 10060  0EB4  02AB               	subwf	___awdiv@counter,f
 10061  0EB5  1D03               	btfss	3,2
 10062  0EB6  2E9C               	goto	l6464
 10063  0EB7                     l6474:	
 10064  0EB7  082C               	movf	___awdiv@sign,w
 10065  0EB8  1903               	btfsc	3,2
 10066  0EB9  2EBF               	goto	l6478
 10067  0EBA  09AD               	comf	___awdiv@quotient,f
 10068  0EBB  09AE               	comf	___awdiv@quotient+1,f
 10069  0EBC  0AAD               	incf	___awdiv@quotient,f
 10070  0EBD  1903               	skipnz
 10071  0EBE  0AAE               	incf	___awdiv@quotient+1,f
 10072  0EBF                     l6478:	
 10073  0EBF  082E               	movf	___awdiv@quotient+1,w
 10074  0EC0  00A7               	movwf	?___awdiv+1
 10075  0EC1  082D               	movf	___awdiv@quotient,w
 10076  0EC2  00A6               	movwf	?___awdiv
 10077  0EC3  0008               	return
 10078  0EC4                     __end_of___awdiv:	
 10079                           
 10080                           	psect	text21
 10081  083F                     __ptext21:	
 10082 ;; *************** function _isGestureAvailable *****************
 10083 ;; Defined at:
 10084 ;;		line 537 in file "APDS9960.c"
 10085 ;; Parameters:    Size  Location     Type
 10086 ;;		None
 10087 ;; Auto vars:     Size  Location     Type
 10088 ;;  val             1   10[BANK0 ] unsigned char 
 10089 ;; Return value:  Size  Location     Type
 10090 ;;                  1    wreg      _Bool 
 10091 ;; Registers used:
 10092 ;;		wreg, status,2, status,0, pclath, cstack
 10093 ;; Tracked objects:
 10094 ;;		On entry : 0/0
 10095 ;;		On exit  : 0/0
 10096 ;;		Unchanged: 0/0
 10097 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10098 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10099 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10100 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10101 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10102 ;;Total ram usage:        2 bytes
 10103 ;; Hardware stack levels used:    1
 10104 ;; Hardware stack levels required when called:    8
 10105 ;; This function calls:
 10106 ;;		_wireReadDataByte
 10107 ;; This function is called by:
 10108 ;;		_main
 10109 ;;		_readGesture
 10110 ;; This function uses a non-reentrant model
 10111 ;;
 10112                           
 10113                           
 10114                           ;psect for function _isGestureAvailable
 10115  083F                     _isGestureAvailable:	
 10116                           
 10117                           ;APDS9960.c: 539:     uint8_t val;;APDS9960.c: 542:     val=wireReadDataByte(0xAF);
 10118                           
 10119                           ;incstack = 0
 10120                           ; Regs used in _isGestureAvailable: [wreg+status,2+status,0+pclath+cstack]
 10121  083F  30AF               	movlw	175
 10122  0840  3189  21AC  3188   	fcall	_wireReadDataByte
 10123  0843  0020               	movlb	0	; select bank0
 10124  0844  00A9               	movwf	??_isGestureAvailable
 10125  0845  0829               	movf	??_isGestureAvailable,w
 10126  0846  00AA               	movwf	isGestureAvailable@val
 10127                           
 10128                           ;APDS9960.c: 545:     val &= 0b00000001;
 10129  0847  3001               	movlw	1
 10130  0848  00A9               	movwf	??_isGestureAvailable
 10131  0849  0829               	movf	??_isGestureAvailable,w
 10132  084A  05AA               	andwf	isGestureAvailable@val,f
 10133                           
 10134                           ;APDS9960.c: 548:     if( val == 1) {
 10135  084B  032A               	decf	isGestureAvailable@val,w
 10136  084C  1D03               	btfss	3,2
 10137  084D  2850               	goto	l6496
 10138                           
 10139                           ;APDS9960.c: 549:         return 1;
 10140  084E  3001               	movlw	1
 10141  084F  0008               	return
 10142  0850                     l6496:	
 10143                           
 10144                           ;APDS9960.c: 551:         return 0;
 10145  0850  3000               	movlw	0
 10146  0851  0008               	return
 10147  0852                     __end_of_isGestureAvailable:	
 10148                           
 10149                           	psect	text22
 10150  0360                     __ptext22:	
 10151 ;; *************** function _decodeGesture *****************
 10152 ;; Defined at:
 10153 ;;		line 795 in file "APDS9960.c"
 10154 ;; Parameters:    Size  Location     Type
 10155 ;;		None
 10156 ;; Auto vars:     Size  Location     Type
 10157 ;;		None
 10158 ;; Return value:  Size  Location     Type
 10159 ;;                  1    wreg      _Bool 
 10160 ;; Registers used:
 10161 ;;		wreg, status,2, status,0
 10162 ;; Tracked objects:
 10163 ;;		On entry : 0/0
 10164 ;;		On exit  : 0/0
 10165 ;;		Unchanged: 0/0
 10166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10168 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10169 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10170 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10171 ;;Total ram usage:       18 bytes
 10172 ;; Hardware stack levels used:    1
 10173 ;; Hardware stack levels required when called:    5
 10174 ;; This function calls:
 10175 ;;		Nothing
 10176 ;; This function is called by:
 10177 ;;		_readGesture
 10178 ;; This function uses a non-reentrant model
 10179 ;;
 10180                           
 10181                           
 10182                           ;psect for function _decodeGesture
 10183  0360                     _decodeGesture:	
 10184                           
 10185                           ;APDS9960.c: 798:     if( gesture_state_ == NEAR_STATE ) {
 10186                           
 10187                           ;incstack = 0
 10188                           ; Regs used in _decodeGesture: [wreg+status,2+status,0]
 10189  0360  0021               	movlb	1	; select bank1
 10190  0361  0362               	decf	_gesture_state_^(0+128),w
 10191  0362  0463               	iorwf	(_gesture_state_+1)^(0+128),w
 10192  0363  1D03               	btfss	3,2
 10193  0364  2B6C               	goto	l6746
 10194                           
 10195                           ;APDS9960.c: 799:         gesture_motion_ = DIR_NEAR;
 10196  0365  3005               	movlw	5
 10197  0366  0022               	movlb	2	; select bank2
 10198  0367  00EC               	movwf	_gesture_motion_^(0+256)
 10199  0368  3000               	movlw	0
 10200  0369  00ED               	movwf	(_gesture_motion_^(0+256)+1)
 10201                           
 10202                           ;APDS9960.c: 800:         return 1;
 10203  036A  3001               	movlw	1
 10204  036B  0008               	return
 10205  036C                     l6746:	
 10206  036C  3002               	movlw	2
 10207  036D  0662               	xorwf	_gesture_state_^(0+128),w
 10208  036E  0463               	iorwf	(_gesture_state_+1)^(0+128),w
 10209  036F  1D03               	btfss	3,2
 10210  0370  2B78               	goto	l6752
 10211                           
 10212                           ;APDS9960.c: 802:         gesture_motion_ = DIR_FAR;
 10213  0371  3006               	movlw	6
 10214  0372  0022               	movlb	2	; select bank2
 10215  0373  00EC               	movwf	_gesture_motion_^(0+256)
 10216  0374  3000               	movlw	0
 10217  0375  00ED               	movwf	(_gesture_motion_^(0+256)+1)
 10218                           
 10219                           ;APDS9960.c: 803:         return 1;
 10220  0376  3001               	movlw	1
 10221  0377  0008               	return
 10222  0378                     l6752:	
 10223                           
 10224                           ;APDS9960.c: 807:     if( (gesture_ud_count_ == -1) && (gesture_lr_count_ == 0) ) {
 10225  0378  0020               	movlb	0	; select bank0
 10226  0379  0A64               	incf	_gesture_ud_count_,w
 10227  037A  1D03               	skipz
 10228  037B  2B85               	goto	l6758
 10229  037C  0A65               	incf	_gesture_ud_count_+1,w
 10230  037D  1D03               	btfss	3,2
 10231  037E  2B85               	goto	l6758
 10232  037F  0862               	movf	_gesture_lr_count_,w
 10233  0380  0463               	iorwf	_gesture_lr_count_+1,w
 10234  0381  1D03               	btfss	3,2
 10235  0382  2B85               	goto	l6758
 10236  0383                     l6756:	
 10237                           
 10238                           ;APDS9960.c: 808:         gesture_motion_ = DIR_UP;
 10239  0383  3003               	movlw	3
 10240  0384  2BA4               	goto	L7
 10241  0385                     l6758:	
 10242                           ;APDS9960.c: 809:     } else if( (gesture_ud_count_ == 1) && (gesture_lr_count_ == 0) ) 
      +                          {
 10243                           
 10244  0385  0364               	decf	_gesture_ud_count_,w
 10245  0386  0465               	iorwf	_gesture_ud_count_+1,w
 10246  0387  1D03               	btfss	3,2
 10247  0388  2B8F               	goto	l6764
 10248  0389  0862               	movf	_gesture_lr_count_,w
 10249  038A  0463               	iorwf	_gesture_lr_count_+1,w
 10250  038B  1D03               	btfss	3,2
 10251  038C  2B8F               	goto	l6764
 10252  038D                     l6762:	
 10253                           
 10254                           ;APDS9960.c: 810:         gesture_motion_ = DIR_DOWN;
 10255  038D  3004               	movlw	4
 10256  038E  2BA4               	goto	L7
 10257  038F                     l6764:	
 10258                           ;APDS9960.c: 811:     } else if( (gesture_ud_count_ == 0) && (gesture_lr_count_ == 1) ) 
      +                          {
 10259                           
 10260  038F  0864               	movf	_gesture_ud_count_,w
 10261  0390  0465               	iorwf	_gesture_ud_count_+1,w
 10262  0391  1D03               	btfss	3,2
 10263  0392  2B99               	goto	l6770
 10264  0393  0362               	decf	_gesture_lr_count_,w
 10265  0394  0463               	iorwf	_gesture_lr_count_+1,w
 10266  0395  1D03               	btfss	3,2
 10267  0396  2B99               	goto	l6770
 10268  0397                     l6768:	
 10269                           
 10270                           ;APDS9960.c: 812:         gesture_motion_ = DIR_RIGHT;
 10271  0397  3002               	movlw	2
 10272  0398  2BA4               	goto	L7
 10273  0399                     l6770:	
 10274                           ;APDS9960.c: 813:     } else if( (gesture_ud_count_ == 0) && (gesture_lr_count_ == -1) )
      +                           {
 10275                           
 10276  0399  0864               	movf	_gesture_ud_count_,w
 10277  039A  0465               	iorwf	_gesture_ud_count_+1,w
 10278  039B  1D03               	btfss	3,2
 10279  039C  2BA9               	goto	l6776
 10280  039D  0A62               	incf	_gesture_lr_count_,w
 10281  039E  1D03               	skipz
 10282  039F  2BA9               	goto	l6776
 10283  03A0  0A63               	incf	_gesture_lr_count_+1,w
 10284  03A1  1D03               	btfss	3,2
 10285  03A2  2BA9               	goto	l6776
 10286  03A3                     l6774:	
 10287                           
 10288                           ;APDS9960.c: 814:         gesture_motion_ = DIR_LEFT;
 10289  03A3  3001               	movlw	1
 10290  03A4                     L7:	
 10291  03A4  0022               	movlb	2	; select bank2
 10292  03A5  00EC               	movwf	_gesture_motion_^(0+256)
 10293  03A6  3000               	movlw	0
 10294  03A7  00ED               	movwf	(_gesture_motion_^(0+256)+1)
 10295                           
 10296                           ;APDS9960.c: 815:     } else if( (gesture_ud_count_ == -1) && (gesture_lr_count_ == 1) )
      +                           {
 10297  03A8  2CEF               	goto	l6852
 10298  03A9                     l6776:	
 10299  03A9  0A64               	incf	_gesture_ud_count_,w
 10300  03AA  1D03               	skipz
 10301  03AB  2BFA               	goto	l6794
 10302  03AC  0A65               	incf	_gesture_ud_count_+1,w
 10303  03AD  1D03               	btfss	3,2
 10304  03AE  2BFA               	goto	l6794
 10305  03AF  0362               	decf	_gesture_lr_count_,w
 10306  03B0  0463               	iorwf	_gesture_lr_count_+1,w
 10307  03B1  1D03               	btfss	3,2
 10308  03B2  2BFA               	goto	l6794
 10309                           
 10310                           ;APDS9960.c: 816:         if( ((gesture_ud_delta_) > 0 ? (gesture_ud_delta_) : -(gesture
      +                          _ud_delta_)) > ((gesture_lr_delta_) > 0 ? (gesture_lr_delta_) : -(gesture_lr_delta_)) ) 
      +                          {
 10311  03B3  0869               	movf	_gesture_ud_delta_+1,w
 10312  03B4  3A80               	xorlw	128
 10313  03B5  00A0               	movwf	??_decodeGesture
 10314  03B6  3080               	movlw	128
 10315  03B7  0220               	subwf	??_decodeGesture,w
 10316  03B8  1D03               	skipz
 10317  03B9  2BBC               	goto	u5785
 10318  03BA  3001               	movlw	1
 10319  03BB  0268               	subwf	_gesture_ud_delta_,w
 10320  03BC                     u5785:	
 10321  03BC  1803               	skipnc
 10322  03BD  2BCB               	goto	l6784
 10323  03BE  0020               	movlb	0	; select bank0
 10324  03BF  0968               	comf	_gesture_ud_delta_,w
 10325  03C0  00A0               	movwf	??_decodeGesture
 10326  03C1  0969               	comf	_gesture_ud_delta_+1,w
 10327  03C2  00A1               	movwf	??_decodeGesture+1
 10328  03C3  0AA0               	incf	??_decodeGesture,f
 10329  03C4  1903               	skipnz
 10330  03C5  0AA1               	incf	??_decodeGesture+1,f
 10331  03C6  0820               	movf	??_decodeGesture,w
 10332  03C7  00A2               	movwf	_decodeGesture$1686
 10333  03C8  0821               	movf	??_decodeGesture+1,w
 10334  03C9  00A3               	movwf	_decodeGesture$1686+1
 10335  03CA  2BD0               	goto	l1185
 10336  03CB                     l6784:	
 10337  03CB  0020               	movlb	0	; select bank0
 10338  03CC  0869               	movf	_gesture_ud_delta_+1,w
 10339  03CD  00A3               	movwf	_decodeGesture$1686+1
 10340  03CE  0868               	movf	_gesture_ud_delta_,w
 10341  03CF  00A2               	movwf	_decodeGesture$1686
 10342  03D0                     l1185:	
 10343  03D0  0867               	movf	_gesture_lr_delta_+1,w
 10344  03D1  3A80               	xorlw	128
 10345  03D2  00A0               	movwf	??_decodeGesture
 10346  03D3  3080               	movlw	128
 10347  03D4  0220               	subwf	??_decodeGesture,w
 10348  03D5  1D03               	skipz
 10349  03D6  2BD9               	goto	u5795
 10350  03D7  3001               	movlw	1
 10351  03D8  0266               	subwf	_gesture_lr_delta_,w
 10352  03D9                     u5795:	
 10353  03D9  1803               	skipnc
 10354  03DA  2BE8               	goto	l6788
 10355  03DB  0020               	movlb	0	; select bank0
 10356  03DC  0966               	comf	_gesture_lr_delta_,w
 10357  03DD  00A0               	movwf	??_decodeGesture
 10358  03DE  0967               	comf	_gesture_lr_delta_+1,w
 10359  03DF  00A1               	movwf	??_decodeGesture+1
 10360  03E0  0AA0               	incf	??_decodeGesture,f
 10361  03E1  1903               	skipnz
 10362  03E2  0AA1               	incf	??_decodeGesture+1,f
 10363  03E3  0820               	movf	??_decodeGesture,w
 10364  03E4  00A4               	movwf	_decodeGesture$1687
 10365  03E5  0821               	movf	??_decodeGesture+1,w
 10366  03E6  00A5               	movwf	_decodeGesture$1687+1
 10367  03E7  2BED               	goto	l1189
 10368  03E8                     l6788:	
 10369  03E8  0020               	movlb	0	; select bank0
 10370  03E9  0867               	movf	_gesture_lr_delta_+1,w
 10371  03EA  00A5               	movwf	_decodeGesture$1687+1
 10372  03EB  0866               	movf	_gesture_lr_delta_,w
 10373  03EC  00A4               	movwf	_decodeGesture$1687
 10374  03ED                     l1189:	
 10375  03ED  0825               	movf	_decodeGesture$1687+1,w
 10376  03EE  3A80               	xorlw	128
 10377  03EF  00A0               	movwf	??_decodeGesture
 10378  03F0  0823               	movf	_decodeGesture$1686+1,w
 10379  03F1  3A80               	xorlw	128
 10380  03F2  0220               	subwf	??_decodeGesture,w
 10381  03F3  1D03               	skipz
 10382  03F4  2BF7               	goto	u5805
 10383  03F5  0822               	movf	_decodeGesture$1686,w
 10384  03F6  0224               	subwf	_decodeGesture$1687,w
 10385  03F7                     u5805:	
 10386  03F7  1C03               	btfss	3,0
 10387  03F8  2B83               	goto	l6756
 10388  03F9  2B97               	goto	l6768
 10389  03FA                     l6794:	
 10390  03FA  0364               	decf	_gesture_ud_count_,w
 10391  03FB  0465               	iorwf	_gesture_ud_count_+1,w
 10392  03FC  1D03               	btfss	3,2
 10393  03FD  2C4B               	goto	l6812
 10394  03FE  0A62               	incf	_gesture_lr_count_,w
 10395  03FF  1D03               	skipz
 10396  0400  2C4B               	goto	l6812
 10397  0401  0A63               	incf	_gesture_lr_count_+1,w
 10398  0402  1D03               	btfss	3,2
 10399  0403  2C4B               	goto	l6812
 10400                           
 10401                           ;APDS9960.c: 822:         if( ((gesture_ud_delta_) > 0 ? (gesture_ud_delta_) : -(gesture
      +                          _ud_delta_)) > ((gesture_lr_delta_) > 0 ? (gesture_lr_delta_) : -(gesture_lr_delta_)) ) 
      +                          {
 10402  0404  0869               	movf	_gesture_ud_delta_+1,w
 10403  0405  3A80               	xorlw	128
 10404  0406  00A0               	movwf	??_decodeGesture
 10405  0407  3080               	movlw	128
 10406  0408  0220               	subwf	??_decodeGesture,w
 10407  0409  1D03               	skipz
 10408  040A  2C0D               	goto	u5835
 10409  040B  3001               	movlw	1
 10410  040C  0268               	subwf	_gesture_ud_delta_,w
 10411  040D                     u5835:	
 10412  040D  1803               	skipnc
 10413  040E  2C1C               	goto	l6802
 10414  040F  0020               	movlb	0	; select bank0
 10415  0410  0968               	comf	_gesture_ud_delta_,w
 10416  0411  00A0               	movwf	??_decodeGesture
 10417  0412  0969               	comf	_gesture_ud_delta_+1,w
 10418  0413  00A1               	movwf	??_decodeGesture+1
 10419  0414  0AA0               	incf	??_decodeGesture,f
 10420  0415  1903               	skipnz
 10421  0416  0AA1               	incf	??_decodeGesture+1,f
 10422  0417  0820               	movf	??_decodeGesture,w
 10423  0418  00A6               	movwf	_decodeGesture$1688
 10424  0419  0821               	movf	??_decodeGesture+1,w
 10425  041A  00A7               	movwf	_decodeGesture$1688+1
 10426  041B  2C21               	goto	l1197
 10427  041C                     l6802:	
 10428  041C  0020               	movlb	0	; select bank0
 10429  041D  0869               	movf	_gesture_ud_delta_+1,w
 10430  041E  00A7               	movwf	_decodeGesture$1688+1
 10431  041F  0868               	movf	_gesture_ud_delta_,w
 10432  0420  00A6               	movwf	_decodeGesture$1688
 10433  0421                     l1197:	
 10434  0421  0867               	movf	_gesture_lr_delta_+1,w
 10435  0422  3A80               	xorlw	128
 10436  0423  00A0               	movwf	??_decodeGesture
 10437  0424  3080               	movlw	128
 10438  0425  0220               	subwf	??_decodeGesture,w
 10439  0426  1D03               	skipz
 10440  0427  2C2A               	goto	u5845
 10441  0428  3001               	movlw	1
 10442  0429  0266               	subwf	_gesture_lr_delta_,w
 10443  042A                     u5845:	
 10444  042A  1803               	skipnc
 10445  042B  2C39               	goto	l6806
 10446  042C  0020               	movlb	0	; select bank0
 10447  042D  0966               	comf	_gesture_lr_delta_,w
 10448  042E  00A0               	movwf	??_decodeGesture
 10449  042F  0967               	comf	_gesture_lr_delta_+1,w
 10450  0430  00A1               	movwf	??_decodeGesture+1
 10451  0431  0AA0               	incf	??_decodeGesture,f
 10452  0432  1903               	skipnz
 10453  0433  0AA1               	incf	??_decodeGesture+1,f
 10454  0434  0820               	movf	??_decodeGesture,w
 10455  0435  00A8               	movwf	_decodeGesture$1689
 10456  0436  0821               	movf	??_decodeGesture+1,w
 10457  0437  00A9               	movwf	_decodeGesture$1689+1
 10458  0438  2C3E               	goto	l1201
 10459  0439                     l6806:	
 10460  0439  0020               	movlb	0	; select bank0
 10461  043A  0867               	movf	_gesture_lr_delta_+1,w
 10462  043B  00A9               	movwf	_decodeGesture$1689+1
 10463  043C  0866               	movf	_gesture_lr_delta_,w
 10464  043D  00A8               	movwf	_decodeGesture$1689
 10465  043E                     l1201:	
 10466  043E  0829               	movf	_decodeGesture$1689+1,w
 10467  043F  3A80               	xorlw	128
 10468  0440  00A0               	movwf	??_decodeGesture
 10469  0441  0827               	movf	_decodeGesture$1688+1,w
 10470  0442  3A80               	xorlw	128
 10471  0443  0220               	subwf	??_decodeGesture,w
 10472  0444  1D03               	skipz
 10473  0445  2C48               	goto	u5855
 10474  0446  0826               	movf	_decodeGesture$1688,w
 10475  0447  0228               	subwf	_decodeGesture$1689,w
 10476  0448                     u5855:	
 10477  0448  1C03               	btfss	3,0
 10478  0449  2B8D               	goto	l6762
 10479  044A  2BA3               	goto	l6774
 10480  044B                     l6812:	
 10481  044B  0A64               	incf	_gesture_ud_count_,w
 10482  044C  1D03               	skipz
 10483  044D  2C9E               	goto	l6830
 10484  044E  0A65               	incf	_gesture_ud_count_+1,w
 10485  044F  1D03               	btfss	3,2
 10486  0450  2C9E               	goto	l6830
 10487  0451  0A62               	incf	_gesture_lr_count_,w
 10488  0452  1D03               	skipz
 10489  0453  2C9E               	goto	l6830
 10490  0454  0A63               	incf	_gesture_lr_count_+1,w
 10491  0455  1D03               	btfss	3,2
 10492  0456  2C9E               	goto	l6830
 10493                           
 10494                           ;APDS9960.c: 828:         if( ((gesture_ud_delta_) > 0 ? (gesture_ud_delta_) : -(gesture
      +                          _ud_delta_)) > ((gesture_lr_delta_) > 0 ? (gesture_lr_delta_) : -(gesture_lr_delta_)) ) 
      +                          {
 10495  0457  0869               	movf	_gesture_ud_delta_+1,w
 10496  0458  3A80               	xorlw	128
 10497  0459  00A0               	movwf	??_decodeGesture
 10498  045A  3080               	movlw	128
 10499  045B  0220               	subwf	??_decodeGesture,w
 10500  045C  1D03               	skipz
 10501  045D  2C60               	goto	u5885
 10502  045E  3001               	movlw	1
 10503  045F  0268               	subwf	_gesture_ud_delta_,w
 10504  0460                     u5885:	
 10505  0460  1803               	skipnc
 10506  0461  2C6F               	goto	l6820
 10507  0462  0020               	movlb	0	; select bank0
 10508  0463  0968               	comf	_gesture_ud_delta_,w
 10509  0464  00A0               	movwf	??_decodeGesture
 10510  0465  0969               	comf	_gesture_ud_delta_+1,w
 10511  0466  00A1               	movwf	??_decodeGesture+1
 10512  0467  0AA0               	incf	??_decodeGesture,f
 10513  0468  1903               	skipnz
 10514  0469  0AA1               	incf	??_decodeGesture+1,f
 10515  046A  0820               	movf	??_decodeGesture,w
 10516  046B  00AA               	movwf	_decodeGesture$1690
 10517  046C  0821               	movf	??_decodeGesture+1,w
 10518  046D  00AB               	movwf	_decodeGesture$1690+1
 10519  046E  2C74               	goto	l1209
 10520  046F                     l6820:	
 10521  046F  0020               	movlb	0	; select bank0
 10522  0470  0869               	movf	_gesture_ud_delta_+1,w
 10523  0471  00AB               	movwf	_decodeGesture$1690+1
 10524  0472  0868               	movf	_gesture_ud_delta_,w
 10525  0473  00AA               	movwf	_decodeGesture$1690
 10526  0474                     l1209:	
 10527  0474  0867               	movf	_gesture_lr_delta_+1,w
 10528  0475  3A80               	xorlw	128
 10529  0476  00A0               	movwf	??_decodeGesture
 10530  0477  3080               	movlw	128
 10531  0478  0220               	subwf	??_decodeGesture,w
 10532  0479  1D03               	skipz
 10533  047A  2C7D               	goto	u5895
 10534  047B  3001               	movlw	1
 10535  047C  0266               	subwf	_gesture_lr_delta_,w
 10536  047D                     u5895:	
 10537  047D  1803               	skipnc
 10538  047E  2C8C               	goto	l6824
 10539  047F  0020               	movlb	0	; select bank0
 10540  0480  0966               	comf	_gesture_lr_delta_,w
 10541  0481  00A0               	movwf	??_decodeGesture
 10542  0482  0967               	comf	_gesture_lr_delta_+1,w
 10543  0483  00A1               	movwf	??_decodeGesture+1
 10544  0484  0AA0               	incf	??_decodeGesture,f
 10545  0485  1903               	skipnz
 10546  0486  0AA1               	incf	??_decodeGesture+1,f
 10547  0487  0820               	movf	??_decodeGesture,w
 10548  0488  00AC               	movwf	_decodeGesture$1691
 10549  0489  0821               	movf	??_decodeGesture+1,w
 10550  048A  00AD               	movwf	_decodeGesture$1691+1
 10551  048B  2C91               	goto	l1213
 10552  048C                     l6824:	
 10553  048C  0020               	movlb	0	; select bank0
 10554  048D  0867               	movf	_gesture_lr_delta_+1,w
 10555  048E  00AD               	movwf	_decodeGesture$1691+1
 10556  048F  0866               	movf	_gesture_lr_delta_,w
 10557  0490  00AC               	movwf	_decodeGesture$1691
 10558  0491                     l1213:	
 10559  0491  082D               	movf	_decodeGesture$1691+1,w
 10560  0492  3A80               	xorlw	128
 10561  0493  00A0               	movwf	??_decodeGesture
 10562  0494  082B               	movf	_decodeGesture$1690+1,w
 10563  0495  3A80               	xorlw	128
 10564  0496  0220               	subwf	??_decodeGesture,w
 10565  0497  1D03               	skipz
 10566  0498  2C9B               	goto	u5905
 10567  0499  082A               	movf	_decodeGesture$1690,w
 10568  049A  022C               	subwf	_decodeGesture$1691,w
 10569  049B                     u5905:	
 10570  049B  1C03               	btfss	3,0
 10571  049C  2B83               	goto	l6756
 10572  049D  2BA3               	goto	l6774
 10573  049E                     l6830:	
 10574  049E  0364               	decf	_gesture_ud_count_,w
 10575  049F  0465               	iorwf	_gesture_ud_count_+1,w
 10576  04A0  1D03               	btfss	3,2
 10577  04A1  2CED               	goto	l6848
 10578  04A2  0362               	decf	_gesture_lr_count_,w
 10579  04A3  0463               	iorwf	_gesture_lr_count_+1,w
 10580  04A4  1D03               	btfss	3,2
 10581  04A5  2CED               	goto	l6848
 10582                           
 10583                           ;APDS9960.c: 834:         if( ((gesture_ud_delta_) > 0 ? (gesture_ud_delta_) : -(gesture
      +                          _ud_delta_)) > ((gesture_lr_delta_) > 0 ? (gesture_lr_delta_) : -(gesture_lr_delta_)) ) 
      +                          {
 10584  04A6  0869               	movf	_gesture_ud_delta_+1,w
 10585  04A7  3A80               	xorlw	128
 10586  04A8  00A0               	movwf	??_decodeGesture
 10587  04A9  3080               	movlw	128
 10588  04AA  0220               	subwf	??_decodeGesture,w
 10589  04AB  1D03               	skipz
 10590  04AC  2CAF               	goto	u5935
 10591  04AD  3001               	movlw	1
 10592  04AE  0268               	subwf	_gesture_ud_delta_,w
 10593  04AF                     u5935:	
 10594  04AF  1803               	skipnc
 10595  04B0  2CBE               	goto	l6838
 10596  04B1  0020               	movlb	0	; select bank0
 10597  04B2  0968               	comf	_gesture_ud_delta_,w
 10598  04B3  00A0               	movwf	??_decodeGesture
 10599  04B4  0969               	comf	_gesture_ud_delta_+1,w
 10600  04B5  00A1               	movwf	??_decodeGesture+1
 10601  04B6  0AA0               	incf	??_decodeGesture,f
 10602  04B7  1903               	skipnz
 10603  04B8  0AA1               	incf	??_decodeGesture+1,f
 10604  04B9  0820               	movf	??_decodeGesture,w
 10605  04BA  00AE               	movwf	_decodeGesture$1692
 10606  04BB  0821               	movf	??_decodeGesture+1,w
 10607  04BC  00AF               	movwf	_decodeGesture$1692+1
 10608  04BD  2CC3               	goto	l1221
 10609  04BE                     l6838:	
 10610  04BE  0020               	movlb	0	; select bank0
 10611  04BF  0869               	movf	_gesture_ud_delta_+1,w
 10612  04C0  00AF               	movwf	_decodeGesture$1692+1
 10613  04C1  0868               	movf	_gesture_ud_delta_,w
 10614  04C2  00AE               	movwf	_decodeGesture$1692
 10615  04C3                     l1221:	
 10616  04C3  0867               	movf	_gesture_lr_delta_+1,w
 10617  04C4  3A80               	xorlw	128
 10618  04C5  00A0               	movwf	??_decodeGesture
 10619  04C6  3080               	movlw	128
 10620  04C7  0220               	subwf	??_decodeGesture,w
 10621  04C8  1D03               	skipz
 10622  04C9  2CCC               	goto	u5945
 10623  04CA  3001               	movlw	1
 10624  04CB  0266               	subwf	_gesture_lr_delta_,w
 10625  04CC                     u5945:	
 10626  04CC  1803               	skipnc
 10627  04CD  2CDB               	goto	l6842
 10628  04CE  0020               	movlb	0	; select bank0
 10629  04CF  0966               	comf	_gesture_lr_delta_,w
 10630  04D0  00A0               	movwf	??_decodeGesture
 10631  04D1  0967               	comf	_gesture_lr_delta_+1,w
 10632  04D2  00A1               	movwf	??_decodeGesture+1
 10633  04D3  0AA0               	incf	??_decodeGesture,f
 10634  04D4  1903               	skipnz
 10635  04D5  0AA1               	incf	??_decodeGesture+1,f
 10636  04D6  0820               	movf	??_decodeGesture,w
 10637  04D7  00B0               	movwf	_decodeGesture$1693
 10638  04D8  0821               	movf	??_decodeGesture+1,w
 10639  04D9  00B1               	movwf	_decodeGesture$1693+1
 10640  04DA  2CE0               	goto	l1225
 10641  04DB                     l6842:	
 10642  04DB  0020               	movlb	0	; select bank0
 10643  04DC  0867               	movf	_gesture_lr_delta_+1,w
 10644  04DD  00B1               	movwf	_decodeGesture$1693+1
 10645  04DE  0866               	movf	_gesture_lr_delta_,w
 10646  04DF  00B0               	movwf	_decodeGesture$1693
 10647  04E0                     l1225:	
 10648  04E0  0831               	movf	_decodeGesture$1693+1,w
 10649  04E1  3A80               	xorlw	128
 10650  04E2  00A0               	movwf	??_decodeGesture
 10651  04E3  082F               	movf	_decodeGesture$1692+1,w
 10652  04E4  3A80               	xorlw	128
 10653  04E5  0220               	subwf	??_decodeGesture,w
 10654  04E6  1D03               	skipz
 10655  04E7  2CEA               	goto	u5955
 10656  04E8  082E               	movf	_decodeGesture$1692,w
 10657  04E9  0230               	subwf	_decodeGesture$1693,w
 10658  04EA                     u5955:	
 10659  04EA  1C03               	btfss	3,0
 10660  04EB  2B8D               	goto	l6762
 10661  04EC  2B97               	goto	l6768
 10662  04ED                     l6848:	
 10663                           
 10664                           ;APDS9960.c: 840:         return 0;
 10665  04ED  3000               	movlw	0
 10666  04EE  0008               	return
 10667  04EF                     l6852:	
 10668                           
 10669                           ;APDS9960.c: 843:     return 1;
 10670  04EF  3001               	movlw	1
 10671  04F0  0008               	return
 10672  04F1                     __end_of_decodeGesture:	
 10673                           
 10674                           	psect	text23
 10675  0F1C                     __ptext23:	
 10676 ;; *************** function _enableGestureSensor *****************
 10677 ;; Defined at:
 10678 ;;		line 409 in file "APDS9960.c"
 10679 ;; Parameters:    Size  Location     Type
 10680 ;;  interrupts      1    wreg     _Bool 
 10681 ;; Auto vars:     Size  Location     Type
 10682 ;;  interrupts      1   17[BANK0 ] _Bool 
 10683 ;; Return value:  Size  Location     Type
 10684 ;;                  1    wreg      _Bool 
 10685 ;; Registers used:
 10686 ;;		wreg, status,2, status,0, pclath, cstack
 10687 ;; Tracked objects:
 10688 ;;		On entry : 0/0
 10689 ;;		On exit  : 0/0
 10690 ;;		Unchanged: 0/0
 10691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10692 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10693 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10694 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10695 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10696 ;;Total ram usage:        2 bytes
 10697 ;; Hardware stack levels used:    1
 10698 ;; Hardware stack levels required when called:   11
 10699 ;; This function calls:
 10700 ;;		_enablePower
 10701 ;;		_resetGestureParameters
 10702 ;;		_setGestureIntEnable
 10703 ;;		_setGestureMode
 10704 ;;		_setLEDBoost
 10705 ;;		_setMode
 10706 ;;		_wireWriteDataByte
 10707 ;; This function is called by:
 10708 ;;		_main
 10709 ;; This function uses a non-reentrant model
 10710 ;;
 10711                           
 10712                           
 10713                           ;psect for function _enableGestureSensor
 10714  0F1C                     _enableGestureSensor:	
 10715                           
 10716                           ;incstack = 0
 10717                           ; Regs used in _enableGestureSensor: [wreg+status,2+status,0+pclath+cstack]
 10718                           ;enableGestureSensor@interrupts stored from wreg
 10719  0F1C  0020               	movlb	0	; select bank0
 10720  0F1D  00B1               	movwf	enableGestureSensor@interrupts
 10721                           
 10722                           ;APDS9960.c: 409: _Bool enableGestureSensor ( _Bool interrupts);APDS9960.c: 410: {;APDS9
      +                          960.c: 418:     resetGestureParameters();
 10723  0F1E  3188  20B5  318F   	fcall	_resetGestureParameters
 10724                           
 10725                           ;APDS9960.c: 419:     if( !wireWriteDataByte(0x83, 0xFF) ) {
 10726  0F21  30FF               	movlw	255
 10727  0F22  0020               	movlb	0	; select bank0
 10728  0F23  00B0               	movwf	??_enableGestureSensor
 10729  0F24  0830               	movf	??_enableGestureSensor,w
 10730  0F25  00A6               	movwf	wireWriteDataByte@val
 10731  0F26  3083               	movlw	131
 10732  0F27  3188  20FF  318F   	fcall	_wireWriteDataByte
 10733  0F2A  0020               	movlb	0	; select bank0
 10734  0F2B  0826               	movf	?_wireWriteDataByte,w
 10735  0F2C  0427               	iorwf	?_wireWriteDataByte+1,w
 10736  0F2D  1903               	btfsc	3,2
 10737  0F2E  2F32               	goto	l7522
 10738  0F2F  2F34               	goto	l7526
 10739  0F30                     l7540:	
 10740                           
 10741                           ;APDS9960.c: 429:         if( !setGestureIntEnable(1) ) {
 10742  0F30  3001               	movlw	1
 10743  0F31  2F4D               	goto	L8
 10744  0F32                     l7522:	
 10745                           
 10746                           ;APDS9960.c: 420:         return 0;
 10747  0F32  3000               	movlw	0
 10748  0F33  0008               	return
 10749  0F34                     l7526:	
 10750                           
 10751                           ;APDS9960.c: 422:     if( !wireWriteDataByte(0x8E, 0x89) ) {
 10752  0F34  3089               	movlw	137
 10753  0F35  00B0               	movwf	??_enableGestureSensor
 10754  0F36  0830               	movf	??_enableGestureSensor,w
 10755  0F37  00A6               	movwf	wireWriteDataByte@val
 10756  0F38  308E               	movlw	142
 10757  0F39  3188  20FF  318F   	fcall	_wireWriteDataByte
 10758  0F3C  0020               	movlb	0	; select bank0
 10759  0F3D  0826               	movf	?_wireWriteDataByte,w
 10760  0F3E  0427               	iorwf	?_wireWriteDataByte+1,w
 10761  0F3F  1903               	btfsc	3,2
 10762  0F40  2F32               	goto	l7522
 10763                           
 10764                           ;APDS9960.c: 425:     if( !setLEDBoost(3) ) {
 10765  0F41  3003               	movlw	3
 10766  0F42  318B  236B  318F   	fcall	_setLEDBoost
 10767  0F45  3A00               	xorlw	0
 10768  0F46  1903               	btfsc	3,2
 10769  0F47  2F32               	goto	l7522
 10770                           
 10771                           ;APDS9960.c: 428:     if( interrupts ) {
 10772  0F48  0020               	movlb	0	; select bank0
 10773  0F49  0831               	movf	enableGestureSensor@interrupts,w
 10774  0F4A  1D03               	btfss	3,2
 10775  0F4B  2F30               	goto	l7540
 10776                           
 10777                           ;APDS9960.c: 433:         if( !setGestureIntEnable(0) ) {
 10778  0F4C  3000               	movlw	0
 10779  0F4D                     L8:	
 10780  0F4D  318B  230F  318F   	fcall	_setGestureIntEnable
 10781  0F50  3A00               	xorlw	0
 10782  0F51  1903               	btfsc	3,2
 10783  0F52  2F32               	goto	l7522
 10784                           
 10785                           ;APDS9960.c: 437:     if( !setGestureMode(1) ) {
 10786  0F53  3001               	movlw	1
 10787  0F54  3189  21F6  318F   	fcall	_setGestureMode
 10788  0F57  3A00               	xorlw	0
 10789  0F58  1903               	btfsc	3,2
 10790  0F59  2F32               	goto	l7522
 10791                           
 10792                           ;APDS9960.c: 440:     if( !enablePower() ){
 10793  0F5A  3188  2002  318F   	fcall	_enablePower
 10794  0F5D  3A00               	xorlw	0
 10795  0F5E  1903               	btfsc	3,2
 10796  0F5F  2F32               	goto	l7522
 10797                           
 10798                           ;APDS9960.c: 443:     if( !setMode(3, 1) ) {
 10799  0F60  0020               	movlb	0	; select bank0
 10800  0F61  01AB               	clrf	setMode@enable
 10801  0F62  0AAB               	incf	setMode@enable,f
 10802  0F63  3003               	movlw	3
 10803  0F64  318E  2623  318F   	fcall	_setMode
 10804  0F67  3A00               	xorlw	0
 10805  0F68  1903               	btfsc	3,2
 10806  0F69  2F32               	goto	l7522
 10807                           
 10808                           ;APDS9960.c: 446:     if( !setMode(2, 1) ) {
 10809  0F6A  0020               	movlb	0	; select bank0
 10810  0F6B  01AB               	clrf	setMode@enable
 10811  0F6C  0AAB               	incf	setMode@enable,f
 10812  0F6D  3002               	movlw	2
 10813  0F6E  318E  2623  318F   	fcall	_setMode
 10814  0F71  3A00               	xorlw	0
 10815  0F72  1903               	btfsc	3,2
 10816  0F73  2F32               	goto	l7522
 10817                           
 10818                           ;APDS9960.c: 449:     if( !setMode(6, 1) ) {
 10819  0F74  0020               	movlb	0	; select bank0
 10820  0F75  01AB               	clrf	setMode@enable
 10821  0F76  0AAB               	incf	setMode@enable,f
 10822  0F77  3006               	movlw	6
 10823  0F78  318E  2623  318F   	fcall	_setMode
 10824  0F7B  3A00               	xorlw	0
 10825  0F7C  1903               	btfsc	3,2
 10826  0F7D  2F32               	goto	l7522
 10827                           
 10828                           ;APDS9960.c: 453:     return 1;
 10829  0F7E  3001               	movlw	1
 10830  0F7F  0008               	return
 10831  0F80                     __end_of_enableGestureSensor:	
 10832                           
 10833                           	psect	text24
 10834  0B6B                     __ptext24:	
 10835 ;; *************** function _setLEDBoost *****************
 10836 ;; Defined at:
 10837 ;;		line 484 in file "APDS9960.c"
 10838 ;; Parameters:    Size  Location     Type
 10839 ;;  boost           1    wreg     unsigned char 
 10840 ;; Auto vars:     Size  Location     Type
 10841 ;;  boost           1   13[BANK0 ] unsigned char 
 10842 ;;  val             1   12[BANK0 ] unsigned char 
 10843 ;; Return value:  Size  Location     Type
 10844 ;;                  1    wreg      _Bool 
 10845 ;; Registers used:
 10846 ;;		wreg, status,2, status,0, pclath, cstack
 10847 ;; Tracked objects:
 10848 ;;		On entry : 0/0
 10849 ;;		On exit  : 0/0
 10850 ;;		Unchanged: 0/0
 10851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10853 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10854 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10855 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10856 ;;Total ram usage:        4 bytes
 10857 ;; Hardware stack levels used:    1
 10858 ;; Hardware stack levels required when called:    8
 10859 ;; This function calls:
 10860 ;;		_wireReadDataByte
 10861 ;;		_wireWriteDataByte
 10862 ;; This function is called by:
 10863 ;;		_enableGestureSensor
 10864 ;; This function uses a non-reentrant model
 10865 ;;
 10866                           
 10867                           
 10868                           ;psect for function _setLEDBoost
 10869  0B6B                     _setLEDBoost:	
 10870                           
 10871                           ;incstack = 0
 10872                           ; Regs used in _setLEDBoost: [wreg+status,2+status,0+pclath+cstack]
 10873                           ;setLEDBoost@boost stored from wreg
 10874  0B6B  0020               	movlb	0	; select bank0
 10875  0B6C  00AD               	movwf	setLEDBoost@boost
 10876                           
 10877                           ;APDS9960.c: 484: _Bool setLEDBoost(uint8_t boost);APDS9960.c: 485: {;APDS9960.c: 486:  
      +                             uint8_t val;;APDS9960.c: 489:     val=wireReadDataByte(0x90);
 10878  0B6D  3090               	movlw	144
 10879  0B6E  3189  21AC  318B   	fcall	_wireReadDataByte
 10880  0B71  0020               	movlb	0	; select bank0
 10881  0B72  00AA               	movwf	??_setLEDBoost
 10882  0B73  082A               	movf	??_setLEDBoost,w
 10883  0B74  00AC               	movwf	setLEDBoost@val
 10884                           
 10885                           ;APDS9960.c: 492:     boost &= 0b00000011;
 10886  0B75  3003               	movlw	3
 10887  0B76  00AA               	movwf	??_setLEDBoost
 10888  0B77  082A               	movf	??_setLEDBoost,w
 10889  0B78  05AD               	andwf	setLEDBoost@boost,f
 10890                           
 10891                           ;APDS9960.c: 493:     boost = boost << 4;
 10892  0B79  082D               	movf	setLEDBoost@boost,w
 10893  0B7A  00AA               	movwf	??_setLEDBoost
 10894  0B7B  3003               	movlw	3
 10895  0B7C                     u6245:	
 10896  0B7C  35AA               	lslf	??_setLEDBoost,f
 10897  0B7D  3EFF               	addlw	-1
 10898  0B7E  1D03               	skipz
 10899  0B7F  2B7C               	goto	u6245
 10900  0B80  352A               	lslf	??_setLEDBoost,w
 10901  0B81  00AB               	movwf	??_setLEDBoost+1
 10902  0B82  082B               	movf	??_setLEDBoost+1,w
 10903  0B83  00AD               	movwf	setLEDBoost@boost
 10904                           
 10905                           ;APDS9960.c: 494:     val &= 0b11001111;
 10906  0B84  30CF               	movlw	207
 10907  0B85  00AA               	movwf	??_setLEDBoost
 10908  0B86  082A               	movf	??_setLEDBoost,w
 10909  0B87  05AC               	andwf	setLEDBoost@val,f
 10910                           
 10911                           ;APDS9960.c: 495:     val |= boost;
 10912  0B88  082D               	movf	setLEDBoost@boost,w
 10913  0B89  00AA               	movwf	??_setLEDBoost
 10914  0B8A  082A               	movf	??_setLEDBoost,w
 10915  0B8B  04AC               	iorwf	setLEDBoost@val,f
 10916                           
 10917                           ;APDS9960.c: 498:     if( !wireWriteDataByte(0x90, val) ) {
 10918  0B8C  082C               	movf	setLEDBoost@val,w
 10919  0B8D  00AA               	movwf	??_setLEDBoost
 10920  0B8E  082A               	movf	??_setLEDBoost,w
 10921  0B8F  00A6               	movwf	wireWriteDataByte@val
 10922  0B90  3090               	movlw	144
 10923  0B91  3188  20FF  318B   	fcall	_wireWriteDataByte
 10924  0B94  0020               	movlb	0	; select bank0
 10925  0B95  0826               	movf	?_wireWriteDataByte,w
 10926  0B96  0427               	iorwf	?_wireWriteDataByte+1,w
 10927  0B97  1D03               	btfss	3,2
 10928  0B98  2B9B               	goto	l7290
 10929                           
 10930                           ;APDS9960.c: 499:         return 0;
 10931  0B99  3000               	movlw	0
 10932  0B9A  0008               	return
 10933  0B9B                     l7290:	
 10934                           
 10935                           ;APDS9960.c: 502:     return 1;
 10936  0B9B  3001               	movlw	1
 10937  0B9C  0008               	return
 10938  0B9D                     __end_of_setLEDBoost:	
 10939                           
 10940                           	psect	text25
 10941  09F6                     __ptext25:	
 10942 ;; *************** function _setGestureMode *****************
 10943 ;; Defined at:
 10944 ;;		line 506 in file "APDS9960.c"
 10945 ;; Parameters:    Size  Location     Type
 10946 ;;  mode            1    wreg     unsigned char 
 10947 ;; Auto vars:     Size  Location     Type
 10948 ;;  mode            1   11[BANK0 ] unsigned char 
 10949 ;;  val             1   12[BANK0 ] unsigned char 
 10950 ;; Return value:  Size  Location     Type
 10951 ;;                  1    wreg      _Bool 
 10952 ;; Registers used:
 10953 ;;		wreg, status,2, status,0, pclath, cstack
 10954 ;; Tracked objects:
 10955 ;;		On entry : 0/0
 10956 ;;		On exit  : 0/0
 10957 ;;		Unchanged: 0/0
 10958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10959 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10960 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10961 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10962 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10963 ;;Total ram usage:        3 bytes
 10964 ;; Hardware stack levels used:    1
 10965 ;; Hardware stack levels required when called:    8
 10966 ;; This function calls:
 10967 ;;		_wireReadDataByte
 10968 ;;		_wireWriteDataByte
 10969 ;; This function is called by:
 10970 ;;		_enableGestureSensor
 10971 ;; This function uses a non-reentrant model
 10972 ;;
 10973                           
 10974                           
 10975                           ;psect for function _setGestureMode
 10976  09F6                     _setGestureMode:	
 10977                           
 10978                           ;incstack = 0
 10979                           ; Regs used in _setGestureMode: [wreg+status,2+status,0+pclath+cstack]
 10980                           ;setGestureMode@mode stored from wreg
 10981  09F6  0020               	movlb	0	; select bank0
 10982  09F7  00AB               	movwf	setGestureMode@mode
 10983                           
 10984                           ;APDS9960.c: 506: _Bool setGestureMode(uint8_t mode);APDS9960.c: 507: {;APDS9960.c: 508:
      +                               uint8_t val;;APDS9960.c: 511:     val = wireReadDataByte(0xAB);
 10985  09F8  30AB               	movlw	171
 10986  09F9  3189  21AC  3189   	fcall	_wireReadDataByte
 10987  09FC  0020               	movlb	0	; select bank0
 10988  09FD  00AA               	movwf	??_setGestureMode
 10989  09FE  082A               	movf	??_setGestureMode,w
 10990  09FF  00AC               	movwf	setGestureMode@val
 10991                           
 10992                           ;APDS9960.c: 514:     mode &= 0b00000001;
 10993  0A00  3001               	movlw	1
 10994  0A01  00AA               	movwf	??_setGestureMode
 10995  0A02  082A               	movf	??_setGestureMode,w
 10996  0A03  05AB               	andwf	setGestureMode@mode,f
 10997                           
 10998                           ;APDS9960.c: 515:     val &= 0b11111110;
 10999  0A04  30FE               	movlw	254
 11000  0A05  00AA               	movwf	??_setGestureMode
 11001  0A06  082A               	movf	??_setGestureMode,w
 11002  0A07  05AC               	andwf	setGestureMode@val,f
 11003                           
 11004                           ;APDS9960.c: 516:     val |= mode;
 11005  0A08  082B               	movf	setGestureMode@mode,w
 11006  0A09  00AA               	movwf	??_setGestureMode
 11007  0A0A  082A               	movf	??_setGestureMode,w
 11008  0A0B  04AC               	iorwf	setGestureMode@val,f
 11009                           
 11010                           ;APDS9960.c: 519:     if( !wireWriteDataByte(0xAB, val) ) {
 11011  0A0C  082C               	movf	setGestureMode@val,w
 11012  0A0D  00AA               	movwf	??_setGestureMode
 11013  0A0E  082A               	movf	??_setGestureMode,w
 11014  0A0F  00A6               	movwf	wireWriteDataByte@val
 11015  0A10  30AB               	movlw	171
 11016  0A11  3188  20FF  3189   	fcall	_wireWriteDataByte
 11017  0A14  0020               	movlb	0	; select bank0
 11018  0A15  0826               	movf	?_wireWriteDataByte,w
 11019  0A16  0427               	iorwf	?_wireWriteDataByte+1,w
 11020  0A17  1D03               	btfss	3,2
 11021  0A18  2A1B               	goto	l7308
 11022                           
 11023                           ;APDS9960.c: 520:         return 0;
 11024  0A19  3000               	movlw	0
 11025  0A1A  0008               	return
 11026  0A1B                     l7308:	
 11027                           
 11028                           ;APDS9960.c: 523:     return 1;
 11029  0A1B  3001               	movlw	1
 11030  0A1C  0008               	return
 11031  0A1D                     __end_of_setGestureMode:	
 11032                           
 11033                           	psect	text26
 11034  0B0F                     __ptext26:	
 11035 ;; *************** function _setGestureIntEnable *****************
 11036 ;; Defined at:
 11037 ;;		line 387 in file "APDS9960.c"
 11038 ;; Parameters:    Size  Location     Type
 11039 ;;  enable          1    wreg     unsigned char 
 11040 ;; Auto vars:     Size  Location     Type
 11041 ;;  enable          1   12[BANK0 ] unsigned char 
 11042 ;;  val             1   11[BANK0 ] unsigned char 
 11043 ;; Return value:  Size  Location     Type
 11044 ;;                  1    wreg      _Bool 
 11045 ;; Registers used:
 11046 ;;		wreg, status,2, status,0, pclath, cstack
 11047 ;; Tracked objects:
 11048 ;;		On entry : 0/0
 11049 ;;		On exit  : 0/0
 11050 ;;		Unchanged: 0/0
 11051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11052 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11053 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11054 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11055 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11056 ;;Total ram usage:        3 bytes
 11057 ;; Hardware stack levels used:    1
 11058 ;; Hardware stack levels required when called:    8
 11059 ;; This function calls:
 11060 ;;		_wireReadDataByte
 11061 ;;		_wireWriteDataByte
 11062 ;; This function is called by:
 11063 ;;		_initialize
 11064 ;;		_enableGestureSensor
 11065 ;; This function uses a non-reentrant model
 11066 ;;
 11067                           
 11068                           
 11069                           ;psect for function _setGestureIntEnable
 11070  0B0F                     _setGestureIntEnable:	
 11071                           
 11072                           ;incstack = 0
 11073                           ; Regs used in _setGestureIntEnable: [wreg+status,2+status,0+pclath+cstack]
 11074                           ;setGestureIntEnable@enable stored from wreg
 11075  0B0F  0020               	movlb	0	; select bank0
 11076  0B10  00AC               	movwf	setGestureIntEnable@enable
 11077                           
 11078                           ;APDS9960.c: 387: _Bool setGestureIntEnable(uint8_t enable);APDS9960.c: 388: {;APDS9960.
      +                          c: 389:     uint8_t val;;APDS9960.c: 392:     val = wireReadDataByte(0xAB);
 11079  0B11  30AB               	movlw	171
 11080  0B12  3189  21AC  318B   	fcall	_wireReadDataByte
 11081  0B15  0020               	movlb	0	; select bank0
 11082  0B16  00AA               	movwf	??_setGestureIntEnable
 11083  0B17  082A               	movf	??_setGestureIntEnable,w
 11084  0B18  00AB               	movwf	setGestureIntEnable@val
 11085                           
 11086                           ;APDS9960.c: 395:     enable &= 0b00000001;
 11087  0B19  3001               	movlw	1
 11088  0B1A  00AA               	movwf	??_setGestureIntEnable
 11089  0B1B  082A               	movf	??_setGestureIntEnable,w
 11090  0B1C  05AC               	andwf	setGestureIntEnable@enable,f
 11091                           
 11092                           ;APDS9960.c: 396:     enable = enable << 1;
 11093  0B1D  352C               	lslf	setGestureIntEnable@enable,w
 11094  0B1E  00AA               	movwf	??_setGestureIntEnable
 11095  0B1F  082A               	movf	??_setGestureIntEnable,w
 11096  0B20  00AC               	movwf	setGestureIntEnable@enable
 11097                           
 11098                           ;APDS9960.c: 397:     val &= 0b11111101;
 11099  0B21  30FD               	movlw	253
 11100  0B22  00AA               	movwf	??_setGestureIntEnable
 11101  0B23  082A               	movf	??_setGestureIntEnable,w
 11102  0B24  05AB               	andwf	setGestureIntEnable@val,f
 11103                           
 11104                           ;APDS9960.c: 398:     val |= enable;
 11105  0B25  082C               	movf	setGestureIntEnable@enable,w
 11106  0B26  00AA               	movwf	??_setGestureIntEnable
 11107  0B27  082A               	movf	??_setGestureIntEnable,w
 11108  0B28  04AB               	iorwf	setGestureIntEnable@val,f
 11109                           
 11110                           ;APDS9960.c: 401:     if( !wireWriteDataByte(0xAB, val) ) {
 11111  0B29  082B               	movf	setGestureIntEnable@val,w
 11112  0B2A  00AA               	movwf	??_setGestureIntEnable
 11113  0B2B  082A               	movf	??_setGestureIntEnable,w
 11114  0B2C  00A6               	movwf	wireWriteDataByte@val
 11115  0B2D  30AB               	movlw	171
 11116  0B2E  3188  20FF  318B   	fcall	_wireWriteDataByte
 11117  0B31  0020               	movlb	0	; select bank0
 11118  0B32  0826               	movf	?_wireWriteDataByte,w
 11119  0B33  0427               	iorwf	?_wireWriteDataByte+1,w
 11120  0B34  1D03               	btfss	3,2
 11121  0B35  2B38               	goto	l7272
 11122                           
 11123                           ;APDS9960.c: 402:         return 0;
 11124  0B36  3000               	movlw	0
 11125  0B37  0008               	return
 11126  0B38                     l7272:	
 11127                           
 11128                           ;APDS9960.c: 405:     return 1;
 11129  0B38  3001               	movlw	1
 11130  0B39  0008               	return
 11131  0B3A                     __end_of_setGestureIntEnable:	
 11132                           
 11133                           	psect	text27
 11134  08B5                     __ptext27:	
 11135 ;; *************** function _resetGestureParameters *****************
 11136 ;; Defined at:
 11137 ;;		line 457 in file "APDS9960.c"
 11138 ;; Parameters:    Size  Location     Type
 11139 ;;		None
 11140 ;; Auto vars:     Size  Location     Type
 11141 ;;		None
 11142 ;; Return value:  Size  Location     Type
 11143 ;;                  1    wreg      void 
 11144 ;; Registers used:
 11145 ;;		status,2
 11146 ;; Tracked objects:
 11147 ;;		On entry : 0/0
 11148 ;;		On exit  : 0/0
 11149 ;;		Unchanged: 0/0
 11150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11151 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11152 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11154 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11155 ;;Total ram usage:        0 bytes
 11156 ;; Hardware stack levels used:    1
 11157 ;; Hardware stack levels required when called:    5
 11158 ;; This function calls:
 11159 ;;		Nothing
 11160 ;; This function is called by:
 11161 ;;		_enableGestureSensor
 11162 ;;		_readGesture
 11163 ;; This function uses a non-reentrant model
 11164 ;;
 11165                           
 11166                           
 11167                           ;psect for function _resetGestureParameters
 11168  08B5                     _resetGestureParameters:	
 11169                           
 11170                           ;APDS9960.c: 460:     gesture_data_.index = 0;
 11171                           
 11172                           ;incstack = 0
 11173                           ; Regs used in _resetGestureParameters: [status,2]
 11174  08B5  0024               	movlb	4	; select bank4
 11175  08B6  01E0               	clrf	(_gesture_data_^(0+512)+64)
 11176                           
 11177                           ;APDS9960.c: 461:     gesture_data_.total_gestures = 0;
 11178  08B7  01E1               	clrf	(_gesture_data_^(0+512)+65)
 11179                           
 11180                           ;APDS9960.c: 463:     gesture_ud_delta_ = 0;
 11181  08B8  0020               	movlb	0	; select bank0
 11182  08B9  01E8               	clrf	_gesture_ud_delta_
 11183  08BA  01E9               	clrf	_gesture_ud_delta_+1
 11184                           
 11185                           ;APDS9960.c: 464:     gesture_lr_delta_ = 0;
 11186  08BB  01E6               	clrf	_gesture_lr_delta_
 11187  08BC  01E7               	clrf	_gesture_lr_delta_+1
 11188                           
 11189                           ;APDS9960.c: 466:     gesture_ud_count_ = 0;
 11190  08BD  01E4               	clrf	_gesture_ud_count_
 11191  08BE  01E5               	clrf	_gesture_ud_count_+1
 11192                           
 11193                           ;APDS9960.c: 467:     gesture_lr_count_ = 0;
 11194  08BF  01E2               	clrf	_gesture_lr_count_
 11195  08C0  01E3               	clrf	_gesture_lr_count_+1
 11196                           
 11197                           ;APDS9960.c: 469:     gesture_near_count_ = 0;
 11198  08C1  0021               	movlb	1	; select bank1
 11199  08C2  01E6               	clrf	_gesture_near_count_^(0+128)
 11200  08C3  01E7               	clrf	(_gesture_near_count_+1)^(0+128)
 11201                           
 11202                           ;APDS9960.c: 470:     gesture_far_count_ = 0;
 11203  08C4  01E4               	clrf	_gesture_far_count_^(0+128)
 11204  08C5  01E5               	clrf	(_gesture_far_count_+1)^(0+128)
 11205                           
 11206                           ;APDS9960.c: 472:     gesture_state_ = 0;
 11207  08C6  01E2               	clrf	_gesture_state_^(0+128)
 11208  08C7  01E3               	clrf	(_gesture_state_+1)^(0+128)
 11209                           
 11210                           ;APDS9960.c: 473:     gesture_motion_ = DIR_NONE;
 11211  08C8  0022               	movlb	2	; select bank2
 11212  08C9  01EC               	clrf	_gesture_motion_^(0+256)
 11213  08CA  01ED               	clrf	(_gesture_motion_+1)^(0+256)
 11214  08CB  0008               	return
 11215  08CC                     __end_of_resetGestureParameters:	
 11216                           
 11217                           	psect	text28
 11218  0802                     __ptext28:	
 11219 ;; *************** function _enablePower *****************
 11220 ;; Defined at:
 11221 ;;		line 527 in file "APDS9960.c"
 11222 ;; Parameters:    Size  Location     Type
 11223 ;;		None
 11224 ;; Auto vars:     Size  Location     Type
 11225 ;;		None
 11226 ;; Return value:  Size  Location     Type
 11227 ;;                  1    wreg      _Bool 
 11228 ;; Registers used:
 11229 ;;		wreg, status,2, status,0, pclath, cstack
 11230 ;; Tracked objects:
 11231 ;;		On entry : 0/0
 11232 ;;		On exit  : 0/0
 11233 ;;		Unchanged: 0/0
 11234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11235 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11236 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11237 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11238 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11239 ;;Total ram usage:        0 bytes
 11240 ;; Hardware stack levels used:    1
 11241 ;; Hardware stack levels required when called:   10
 11242 ;; This function calls:
 11243 ;;		_setMode
 11244 ;; This function is called by:
 11245 ;;		_enableGestureSensor
 11246 ;; This function uses a non-reentrant model
 11247 ;;
 11248                           
 11249                           
 11250                           ;psect for function _enablePower
 11251  0802                     _enablePower:	
 11252                           
 11253                           ;APDS9960.c: 529:     if( !setMode(0, 1) ) {
 11254                           
 11255                           ;incstack = 0
 11256                           ; Regs used in _enablePower: [wreg+status,2+status,0+pclath+cstack]
 11257  0802  0020               	movlb	0	; select bank0
 11258  0803  01AB               	clrf	setMode@enable
 11259  0804  0AAB               	incf	setMode@enable,f
 11260  0805  3000               	movlw	0
 11261  0806  318E  2623  3188   	fcall	_setMode
 11262  0809  3A00               	xorlw	0
 11263  080A  1D03               	skipz
 11264  080B  280E               	goto	l7318
 11265                           
 11266                           ;APDS9960.c: 530:         return 0;
 11267  080C  3000               	movlw	0
 11268  080D  0008               	return
 11269  080E                     l7318:	
 11270                           
 11271                           ;APDS9960.c: 533:     return 1;
 11272  080E  3001               	movlw	1
 11273  080F  0008               	return
 11274  0810                     __end_of_enablePower:	
 11275                           
 11276                           	psect	text29
 11277  0E23                     __ptext29:	
 11278 ;; *************** function _setMode *****************
 11279 ;; Defined at:
 11280 ;;		line 124 in file "APDS9960.c"
 11281 ;; Parameters:    Size  Location     Type
 11282 ;;  mode            1    wreg     unsigned char 
 11283 ;;  enable          1   11[BANK0 ] unsigned char 
 11284 ;; Auto vars:     Size  Location     Type
 11285 ;;  mode            1   15[BANK0 ] unsigned char 
 11286 ;;  reg_val         1   14[BANK0 ] unsigned char 
 11287 ;; Return value:  Size  Location     Type
 11288 ;;                  1    wreg      _Bool 
 11289 ;; Registers used:
 11290 ;;		wreg, status,2, status,0, pclath, cstack
 11291 ;; Tracked objects:
 11292 ;;		On entry : 0/0
 11293 ;;		On exit  : 0/0
 11294 ;;		Unchanged: 0/0
 11295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11296 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11297 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11298 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11299 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11300 ;;Total ram usage:        5 bytes
 11301 ;; Hardware stack levels used:    1
 11302 ;; Hardware stack levels required when called:    9
 11303 ;; This function calls:
 11304 ;;		_getMode
 11305 ;;		_wireWriteDataByte
 11306 ;; This function is called by:
 11307 ;;		_initialize
 11308 ;;		_enableGestureSensor
 11309 ;;		_enablePower
 11310 ;; This function uses a non-reentrant model
 11311 ;;
 11312                           
 11313                           
 11314                           ;psect for function _setMode
 11315  0E23                     _setMode:	
 11316                           
 11317                           ;incstack = 0
 11318                           ; Regs used in _setMode: [wreg+status,2+status,0+pclath+cstack]
 11319                           ;setMode@mode stored from wreg
 11320  0E23  0020               	movlb	0	; select bank0
 11321  0E24  00AF               	movwf	setMode@mode
 11322                           
 11323                           ;APDS9960.c: 124: _Bool setMode(uint8_t mode, uint8_t enable);APDS9960.c: 125: {;APDS996
      +                          0.c: 126:     uint8_t reg_val;;APDS9960.c: 129:     reg_val = getMode();
 11324  0E25  3197  27C9  318E   	fcall	_getMode
 11325  0E28  0020               	movlb	0	; select bank0
 11326  0E29  00AC               	movwf	??_setMode
 11327  0E2A  082C               	movf	??_setMode,w
 11328  0E2B  00AE               	movwf	setMode@reg_val
 11329                           
 11330                           ;APDS9960.c: 130:     if( reg_val == 0xFF ) {
 11331  0E2C  0A2E               	incf	setMode@reg_val,w
 11332  0E2D  1D03               	btfss	3,2
 11333  0E2E  2E31               	goto	l6524
 11334  0E2F                     l6520:	
 11335                           
 11336                           ;APDS9960.c: 131:         return 0;
 11337  0E2F  3000               	movlw	0
 11338  0E30  0008               	return
 11339  0E31                     l6524:	
 11340                           
 11341                           ;APDS9960.c: 135:     enable = enable & 0x01;
 11342  0E31  082B               	movf	setMode@enable,w
 11343  0E32  3901               	andlw	1
 11344  0E33  00AC               	movwf	??_setMode
 11345  0E34  082C               	movf	??_setMode,w
 11346  0E35  00AB               	movwf	setMode@enable
 11347                           
 11348                           ;APDS9960.c: 136:     if( mode >= 0 && mode <= 6 ) {
 11349  0E36  3007               	movlw	7
 11350  0E37  022F               	subwf	setMode@mode,w
 11351  0E38  1803               	skipnc
 11352  0E39  2E56               	goto	l6534
 11353                           
 11354                           ;APDS9960.c: 137:         if (enable) {
 11355  0E3A  082B               	movf	setMode@enable,w
 11356  0E3B  1903               	btfsc	3,2
 11357  0E3C  2E49               	goto	l6532
 11358                           
 11359                           ;APDS9960.c: 138:             reg_val |= (1 << mode);
 11360  0E3D  3001               	movlw	1
 11361  0E3E  00AC               	movwf	??_setMode
 11362  0E3F  0A2F               	incf	setMode@mode,w
 11363  0E40  2E42               	goto	u5164
 11364  0E41                     u5165:	
 11365  0E41  35AC               	lslf	??_setMode,f
 11366  0E42                     u5164:	
 11367  0E42  0B89               	decfsz	9,f
 11368  0E43  2E41               	goto	u5165
 11369  0E44  082C               	movf	??_setMode,w
 11370  0E45  00AD               	movwf	??_setMode+1
 11371  0E46  082D               	movf	??_setMode+1,w
 11372  0E47  04AE               	iorwf	setMode@reg_val,f
 11373                           
 11374                           ;APDS9960.c: 139:         } else {
 11375  0E48  2E63               	goto	l6542
 11376  0E49                     l6532:	
 11377                           
 11378                           ;APDS9960.c: 140:             reg_val &= ~(1 << mode);
 11379  0E49  3001               	movlw	1
 11380  0E4A  00AC               	movwf	??_setMode
 11381  0E4B  0A2F               	incf	setMode@mode,w
 11382  0E4C  2E4E               	goto	u5174
 11383  0E4D                     u5175:	
 11384  0E4D  35AC               	lslf	??_setMode,f
 11385  0E4E                     u5174:	
 11386  0E4E  0B89               	decfsz	9,f
 11387  0E4F  2E4D               	goto	u5175
 11388  0E50  082C               	movf	??_setMode,w
 11389  0E51  3AFF               	xorlw	255
 11390  0E52  00AD               	movwf	??_setMode+1
 11391  0E53  082D               	movf	??_setMode+1,w
 11392  0E54  05AE               	andwf	setMode@reg_val,f
 11393  0E55  2E63               	goto	l6542
 11394  0E56                     l6534:	
 11395  0E56  3007               	movlw	7
 11396  0E57  062F               	xorwf	setMode@mode,w
 11397  0E58  1D03               	btfss	3,2
 11398  0E59  2E63               	goto	l6542
 11399                           
 11400                           ;APDS9960.c: 143:         if (enable) {
 11401  0E5A  082B               	movf	setMode@enable,w
 11402  0E5B  1903               	btfsc	3,2
 11403  0E5C  2E62               	goto	l6540
 11404                           
 11405                           ;APDS9960.c: 144:             reg_val = 0x7F;
 11406  0E5D  307F               	movlw	127
 11407  0E5E  00AC               	movwf	??_setMode
 11408  0E5F  082C               	movf	??_setMode,w
 11409  0E60  00AE               	movwf	setMode@reg_val
 11410                           
 11411                           ;APDS9960.c: 145:         } else {
 11412  0E61  2E63               	goto	l6542
 11413  0E62                     l6540:	
 11414                           
 11415                           ;APDS9960.c: 146:             reg_val = 0x00;
 11416  0E62  01AE               	clrf	setMode@reg_val
 11417  0E63                     l6542:	
 11418                           
 11419                           ;APDS9960.c: 151:     if( !wireWriteDataByte(0x80, reg_val) ) {
 11420  0E63  082E               	movf	setMode@reg_val,w
 11421  0E64  00AC               	movwf	??_setMode
 11422  0E65  082C               	movf	??_setMode,w
 11423  0E66  00A6               	movwf	wireWriteDataByte@val
 11424  0E67  3080               	movlw	128
 11425  0E68  3188  20FF  318E   	fcall	_wireWriteDataByte
 11426  0E6B  0020               	movlb	0	; select bank0
 11427  0E6C  0826               	movf	?_wireWriteDataByte,w
 11428  0E6D  0427               	iorwf	?_wireWriteDataByte+1,w
 11429  0E6E  1903               	btfsc	3,2
 11430  0E6F  2E2F               	goto	l6520
 11431                           
 11432                           ;APDS9960.c: 155:     return 1;
 11433  0E70  3001               	movlw	1
 11434  0E71  0008               	return
 11435  0E72                     __end_of_setMode:	
 11436                           
 11437                           	psect	text30
 11438  08FF                     __ptext30:	
 11439 ;; *************** function _wireWriteDataByte *****************
 11440 ;; Defined at:
 11441 ;;		line 871 in file "APDS9960.c"
 11442 ;; Parameters:    Size  Location     Type
 11443 ;;  reg             1    wreg     unsigned char 
 11444 ;;  val             1    6[BANK0 ] unsigned char 
 11445 ;; Auto vars:     Size  Location     Type
 11446 ;;  reg             1    9[BANK0 ] unsigned char 
 11447 ;; Return value:  Size  Location     Type
 11448 ;;                  2    6[BANK0 ] int 
 11449 ;; Registers used:
 11450 ;;		wreg, status,2, status,0, pclath, cstack
 11451 ;; Tracked objects:
 11452 ;;		On entry : 0/0
 11453 ;;		On exit  : 0/0
 11454 ;;		Unchanged: 0/0
 11455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11456 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11457 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11458 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11459 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11460 ;;Total ram usage:        4 bytes
 11461 ;; Hardware stack levels used:    1
 11462 ;; Hardware stack levels required when called:    7
 11463 ;; This function calls:
 11464 ;;		_I2C_Start
 11465 ;;		_I2C_Stop
 11466 ;;		_I2C_Write_Byte
 11467 ;; This function is called by:
 11468 ;;		_initialize
 11469 ;;		_setMode
 11470 ;;		_setLEDDrive
 11471 ;;		_setProximityGain
 11472 ;;		_setAmbientLightGain
 11473 ;;		_setProxIntLowThresh
 11474 ;;		_setProxIntHighThresh
 11475 ;;		_setLightIntLowThreshold
 11476 ;;		_setLightIntHighThreshold
 11477 ;;		_setGestureEnterThresh
 11478 ;;		_setGestureExitThresh
 11479 ;;		_setGestureGain
 11480 ;;		_setGestureLEDDrive
 11481 ;;		_setGestureWaitTime
 11482 ;;		_setGestureIntEnable
 11483 ;;		_enableGestureSensor
 11484 ;;		_setLEDBoost
 11485 ;;		_setGestureMode
 11486 ;; This function uses a non-reentrant model
 11487 ;;
 11488                           
 11489                           
 11490                           ;psect for function _wireWriteDataByte
 11491  08FF                     _wireWriteDataByte:	
 11492                           
 11493                           ;incstack = 0
 11494                           ; Regs used in _wireWriteDataByte: [wreg+status,2+status,0+pclath+cstack]
 11495                           ;wireWriteDataByte@reg stored from wreg
 11496  08FF  0020               	movlb	0	; select bank0
 11497  0900  00A9               	movwf	wireWriteDataByte@reg
 11498                           
 11499                           ;APDS9960.c: 871: int wireWriteDataByte(unsigned char reg, unsigned char val);APDS9960.c
      +                          : 872: {;APDS9960.c: 882:     I2C_Start();
 11500  0901  3196  26DE  3188   	fcall	_I2C_Start
 11501                           
 11502                           ;APDS9960.c: 883:     I2C_Write_Byte((0x39 << 1 )| 0x00);
 11503  0904  3072               	movlw	114
 11504  0905  3189  211A  3188   	fcall	_I2C_Write_Byte
 11505                           
 11506                           ;APDS9960.c: 884:     I2C_Write_Byte(reg);
 11507  0908  0020               	movlb	0	; select bank0
 11508  0909  0829               	movf	wireWriteDataByte@reg,w
 11509  090A  3189  211A  3188   	fcall	_I2C_Write_Byte
 11510                           
 11511                           ;APDS9960.c: 885:     I2C_Write_Byte(val);
 11512  090D  0020               	movlb	0	; select bank0
 11513  090E  0826               	movf	wireWriteDataByte@val,w
 11514  090F  3189  211A  3188   	fcall	_I2C_Write_Byte
 11515                           
 11516                           ;APDS9960.c: 886:     I2C_Stop();
 11517  0912  3196  26E4         	fcall	_I2C_Stop
 11518                           
 11519                           ;APDS9960.c: 889:     return 1;
 11520  0914  3001               	movlw	1
 11521  0915  0020               	movlb	0	; select bank0
 11522  0916  00A6               	movwf	?_wireWriteDataByte
 11523  0917  3000               	movlw	0
 11524  0918  00A7               	movwf	?_wireWriteDataByte+1
 11525  0919  0008               	return
 11526  091A                     __end_of_wireWriteDataByte:	
 11527                           
 11528                           	psect	text31
 11529  17C9                     __ptext31:	
 11530 ;; *************** function _getMode *****************
 11531 ;; Defined at:
 11532 ;;		line 159 in file "APDS9960.c"
 11533 ;; Parameters:    Size  Location     Type
 11534 ;;		None
 11535 ;; Auto vars:     Size  Location     Type
 11536 ;;  enable_value    1   10[BANK0 ] unsigned char 
 11537 ;; Return value:  Size  Location     Type
 11538 ;;                  1    wreg      unsigned char 
 11539 ;; Registers used:
 11540 ;;		wreg, status,2, status,0, pclath, cstack
 11541 ;; Tracked objects:
 11542 ;;		On entry : 0/0
 11543 ;;		On exit  : 0/0
 11544 ;;		Unchanged: 0/0
 11545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11546 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11547 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11548 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11549 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11550 ;;Total ram usage:        2 bytes
 11551 ;; Hardware stack levels used:    1
 11552 ;; Hardware stack levels required when called:    8
 11553 ;; This function calls:
 11554 ;;		_wireReadDataByte
 11555 ;; This function is called by:
 11556 ;;		_setMode
 11557 ;;		_readGesture
 11558 ;; This function uses a non-reentrant model
 11559 ;;
 11560                           
 11561                           
 11562                           ;psect for function _getMode
 11563  17C9                     _getMode:	
 11564                           
 11565                           ;APDS9960.c: 161:     uint8_t enable_value;;APDS9960.c: 164:     enable_value = wireRead
      +                          DataByte(0x80);
 11566                           
 11567                           ;incstack = 0
 11568                           ; Regs used in _getMode: [wreg+status,2+status,0+pclath+cstack]
 11569  17C9  3080               	movlw	128
 11570  17CA  3189  21AC         	fcall	_wireReadDataByte
 11571  17CC  0020               	movlb	0	; select bank0
 11572  17CD  00A9               	movwf	??_getMode
 11573  17CE  0829               	movf	??_getMode,w
 11574  17CF  00AA               	movwf	getMode@enable_value
 11575                           
 11576                           ;APDS9960.c: 166:     return enable_value;
 11577  17D0  082A               	movf	getMode@enable_value,w
 11578  17D1  0008               	return
 11579  17D2                     __end_of_getMode:	
 11580                           
 11581                           	psect	text32
 11582  09AC                     __ptext32:	
 11583 ;; *************** function _wireReadDataByte *****************
 11584 ;; Defined at:
 11585 ;;		line 893 in file "APDS9960.c"
 11586 ;; Parameters:    Size  Location     Type
 11587 ;;  reg             1    wreg     unsigned char 
 11588 ;; Auto vars:     Size  Location     Type
 11589 ;;  reg             1    7[BANK0 ] unsigned char 
 11590 ;;  val             1    8[BANK0 ] unsigned char 
 11591 ;; Return value:  Size  Location     Type
 11592 ;;                  1    wreg      unsigned char 
 11593 ;; Registers used:
 11594 ;;		wreg, status,2, status,0, pclath, cstack
 11595 ;; Tracked objects:
 11596 ;;		On entry : 0/0
 11597 ;;		On exit  : 0/0
 11598 ;;		Unchanged: 0/0
 11599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11601 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11602 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11603 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11604 ;;Total ram usage:        3 bytes
 11605 ;; Hardware stack levels used:    1
 11606 ;; Hardware stack levels required when called:    7
 11607 ;; This function calls:
 11608 ;;		_I2C_ReStart
 11609 ;;		_I2C_Read_Byte
 11610 ;;		_I2C_Send_NACK
 11611 ;;		_I2C_Start
 11612 ;;		_I2C_Stop
 11613 ;;		_I2C_Write_Byte
 11614 ;; This function is called by:
 11615 ;;		_initialize
 11616 ;;		_getMode
 11617 ;;		_setLEDDrive
 11618 ;;		_setProximityGain
 11619 ;;		_setAmbientLightGain
 11620 ;;		_setGestureGain
 11621 ;;		_setGestureLEDDrive
 11622 ;;		_setGestureWaitTime
 11623 ;;		_setGestureIntEnable
 11624 ;;		_setLEDBoost
 11625 ;;		_setGestureMode
 11626 ;;		_isGestureAvailable
 11627 ;;		_readGesture
 11628 ;; This function uses a non-reentrant model
 11629 ;;
 11630                           
 11631                           
 11632                           ;psect for function _wireReadDataByte
 11633  09AC                     _wireReadDataByte:	
 11634                           
 11635                           ;incstack = 0
 11636                           ; Regs used in _wireReadDataByte: [wreg+status,2+status,0+pclath+cstack]
 11637                           ;wireReadDataByte@reg stored from wreg
 11638  09AC  0020               	movlb	0	; select bank0
 11639  09AD  00A7               	movwf	wireReadDataByte@reg
 11640                           
 11641                           ;APDS9960.c: 893:  unsigned char wireReadDataByte(unsigned char reg);APDS9960.c: 894: {;
      +                          APDS9960.c: 908:     unsigned char val;;APDS9960.c: 909:     I2C_Start();
 11642  09AE  3196  26DE  3189   	fcall	_I2C_Start
 11643                           
 11644                           ;APDS9960.c: 910:     I2C_Write_Byte((0x39 << 1 )| 0x00);
 11645  09B1  3072               	movlw	114
 11646  09B2  3189  211A  3189   	fcall	_I2C_Write_Byte
 11647                           
 11648                           ;APDS9960.c: 911:     I2C_Write_Byte(reg);
 11649  09B5  0020               	movlb	0	; select bank0
 11650  09B6  0827               	movf	wireReadDataByte@reg,w
 11651  09B7  3189  211A  3189   	fcall	_I2C_Write_Byte
 11652                           
 11653                           ;APDS9960.c: 912:     I2C_ReStart();
 11654  09BA  3196  26CF  3189   	fcall	_I2C_ReStart
 11655                           
 11656                           ;APDS9960.c: 914:     I2C_Write_Byte((0x39 << 1) | 0x01);
 11657  09BD  3073               	movlw	115
 11658  09BE  3189  211A  3189   	fcall	_I2C_Write_Byte
 11659                           
 11660                           ;APDS9960.c: 915:     val=I2C_Read_Byte();
 11661  09C1  3197  27DC  3189   	fcall	_I2C_Read_Byte
 11662  09C4  0020               	movlb	0	; select bank0
 11663  09C5  00A6               	movwf	??_wireReadDataByte
 11664  09C6  0826               	movf	??_wireReadDataByte,w
 11665  09C7  00A8               	movwf	wireReadDataByte@val
 11666                           
 11667                           ;APDS9960.c: 916:     I2C_Send_NACK();
 11668  09C8  3196  26D8  3189   	fcall	_I2C_Send_NACK
 11669                           
 11670                           ;APDS9960.c: 917:     I2C_Stop();
 11671  09CB  3196  26E4         	fcall	_I2C_Stop
 11672                           
 11673                           ;APDS9960.c: 919:     return val;
 11674  09CD  0020               	movlb	0	; select bank0
 11675  09CE  0828               	movf	wireReadDataByte@val,w
 11676  09CF  0008               	return
 11677  09D0                     __end_of_wireReadDataByte:	
 11678                           
 11679                           	psect	text33
 11680  091A                     __ptext33:	
 11681 ;; *************** function _I2C_Write_Byte *****************
 11682 ;; Defined at:
 11683 ;;		line 75 in file "i2c.c"
 11684 ;; Parameters:    Size  Location     Type
 11685 ;;  Byte            1    wreg     unsigned char 
 11686 ;; Auto vars:     Size  Location     Type
 11687 ;;  Byte            1    3[BANK0 ] unsigned char 
 11688 ;;  count           2    4[BANK0 ] unsigned int 
 11689 ;; Return value:  Size  Location     Type
 11690 ;;                  1    wreg      void 
 11691 ;; Registers used:
 11692 ;;		wreg, status,2, status,0, pclath, cstack
 11693 ;; Tracked objects:
 11694 ;;		On entry : 0/0
 11695 ;;		On exit  : 0/0
 11696 ;;		Unchanged: 0/0
 11697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11698 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11699 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11700 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11701 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11702 ;;Total ram usage:        5 bytes
 11703 ;; Hardware stack levels used:    1
 11704 ;; Hardware stack levels required when called:    6
 11705 ;; This function calls:
 11706 ;;		_i2c1_driver_TXData
 11707 ;; This function is called by:
 11708 ;;		_wireReadDataBlock
 11709 ;;		_wireWriteDataByte
 11710 ;;		_wireReadDataByte
 11711 ;; This function uses a non-reentrant model
 11712 ;;
 11713                           
 11714                           
 11715                           ;psect for function _I2C_Write_Byte
 11716  091A                     _I2C_Write_Byte:	
 11717                           
 11718                           ;incstack = 0
 11719                           ; Regs used in _I2C_Write_Byte: [wreg+status,2+status,0+pclath+cstack]
 11720                           ;I2C_Write_Byte@Byte stored from wreg
 11721  091A  0020               	movlb	0	; select bank0
 11722  091B  00A3               	movwf	I2C_Write_Byte@Byte
 11723                           
 11724                           ;i2c.c: 75: void I2C_Write_Byte(unsigned char Byte);i2c.c: 76: {;i2c.c: 80:     i2c1_dri
      +                          ver_TXData(Byte);
 11725  091C  0823               	movf	I2C_Write_Byte@Byte,w
 11726  091D  3197  272D  3189   	fcall	_i2c1_driver_TXData
 11727                           
 11728                           ;i2c.c: 83:     unsigned int count = 0;
 11729  0920  0020               	movlb	0	; select bank0
 11730  0921  01A4               	clrf	I2C_Write_Byte@count
 11731  0922  01A5               	clrf	I2C_Write_Byte@count+1
 11732  0923                     l1292:	
 11733                           ;i2c.c: 84:     while(SSP1CON2bits.ACKSTAT);
 11734                           
 11735  0923  0024               	movlb	4	; select bank4
 11736  0924  1B16               	btfsc	22,6	;volatile
 11737  0925  2923               	goto	l1292
 11738  0926                     l6366:	
 11739  0926  0020               	movlb	0	; select bank0
 11740  0927  0825               	movf	I2C_Write_Byte@count+1,w
 11741  0928  00A2               	movwf	??_I2C_Write_Byte+1
 11742  0929  0824               	movf	I2C_Write_Byte@count,w
 11743  092A  00A1               	movwf	??_I2C_Write_Byte
 11744  092B  0AA4               	incf	I2C_Write_Byte@count,f
 11745  092C  1903               	skipnz
 11746  092D  0AA5               	incf	I2C_Write_Byte@count+1,f
 11747  092E  3000               	movlw	0
 11748  092F  0222               	subwf	??_I2C_Write_Byte+1,w
 11749  0930  3005               	movlw	5
 11750  0931  1903               	skipnz
 11751  0932  0221               	subwf	??_I2C_Write_Byte,w
 11752  0933  1803               	btfsc	3,0
 11753  0934  0008               	return
 11754  0935  2926               	goto	l6366
 11755  0936                     __end_of_I2C_Write_Byte:	
 11756                           
 11757                           	psect	text34
 11758  172D                     __ptext34:	
 11759 ;; *************** function _i2c1_driver_TXData *****************
 11760 ;; Defined at:
 11761 ;;		line 186 in file "mcc_generated_files/i2c1_driver.c"
 11762 ;; Parameters:    Size  Location     Type
 11763 ;;  d               1    wreg     unsigned char 
 11764 ;; Auto vars:     Size  Location     Type
 11765 ;;  d               1    0[BANK0 ] unsigned char 
 11766 ;; Return value:  Size  Location     Type
 11767 ;;                  1    wreg      void 
 11768 ;; Registers used:
 11769 ;;		wreg
 11770 ;; Tracked objects:
 11771 ;;		On entry : 0/0
 11772 ;;		On exit  : 0/0
 11773 ;;		Unchanged: 0/0
 11774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11775 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11776 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11777 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11778 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11779 ;;Total ram usage:        1 bytes
 11780 ;; Hardware stack levels used:    1
 11781 ;; Hardware stack levels required when called:    5
 11782 ;; This function calls:
 11783 ;;		Nothing
 11784 ;; This function is called by:
 11785 ;;		_I2C_Write_Byte
 11786 ;; This function uses a non-reentrant model
 11787 ;;
 11788                           
 11789                           
 11790                           ;psect for function _i2c1_driver_TXData
 11791  172D                     _i2c1_driver_TXData:	
 11792                           
 11793                           ;incstack = 0
 11794                           ; Regs used in _i2c1_driver_TXData: [wreg]
 11795                           ;i2c1_driver_TXData@d stored from wreg
 11796  172D  0020               	movlb	0	; select bank0
 11797  172E  00A0               	movwf	i2c1_driver_TXData@d
 11798                           
 11799                           ;mcc_generated_files/i2c1_driver.c: 186: __attribute__((inline)) void i2c1_driver_TXData
      +                          (char d);mcc_generated_files/i2c1_driver.c: 187: {;mcc_generated_files/i2c1_driver.c: 18
      +                          8:     SSP1BUF = d;
 11800  172F  0820               	movf	i2c1_driver_TXData@d,w
 11801  1730  0024               	movlb	4	; select bank4
 11802  1731  0091               	movwf	17	;volatile
 11803  1732  0008               	return
 11804  1733                     __end_of_i2c1_driver_TXData:	
 11805                           
 11806                           	psect	text35
 11807  16E4                     __ptext35:	
 11808 ;; *************** function _I2C_Stop *****************
 11809 ;; Defined at:
 11810 ;;		line 50 in file "i2c.c"
 11811 ;; Parameters:    Size  Location     Type
 11812 ;;		None
 11813 ;; Auto vars:     Size  Location     Type
 11814 ;;		None
 11815 ;; Return value:  Size  Location     Type
 11816 ;;                  1    wreg      void 
 11817 ;; Registers used:
 11818 ;;		status,2, status,0, pclath, cstack
 11819 ;; Tracked objects:
 11820 ;;		On entry : 0/0
 11821 ;;		On exit  : 0/0
 11822 ;;		Unchanged: 0/0
 11823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11824 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11825 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11826 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11827 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11828 ;;Total ram usage:        0 bytes
 11829 ;; Hardware stack levels used:    1
 11830 ;; Hardware stack levels required when called:    6
 11831 ;; This function calls:
 11832 ;;		_i2c1_driver_stop
 11833 ;; This function is called by:
 11834 ;;		_wireReadDataBlock
 11835 ;;		_wireWriteDataByte
 11836 ;;		_wireReadDataByte
 11837 ;; This function uses a non-reentrant model
 11838 ;;
 11839                           
 11840                           
 11841                           ;psect for function _I2C_Stop
 11842  16E4                     _I2C_Stop:	
 11843                           
 11844                           ;i2c.c: 52:  i2c1_driver_stop();
 11845                           
 11846                           ;incstack = 0
 11847                           ; Regs used in _I2C_Stop: [status,2+status,0+pclath+cstack]
 11848  16E4  3196  26E1         	fcall	_i2c1_driver_stop
 11849  16E6  0008               	return
 11850  16E7                     __end_of_I2C_Stop:	
 11851                           
 11852                           	psect	text36
 11853  16E1                     __ptext36:	
 11854 ;; *************** function _i2c1_driver_stop *****************
 11855 ;; Defined at:
 11856 ;;		line 156 in file "mcc_generated_files/i2c1_driver.c"
 11857 ;; Parameters:    Size  Location     Type
 11858 ;;		None
 11859 ;; Auto vars:     Size  Location     Type
 11860 ;;		None
 11861 ;; Return value:  Size  Location     Type
 11862 ;;                  1    wreg      void 
 11863 ;; Registers used:
 11864 ;;		None
 11865 ;; Tracked objects:
 11866 ;;		On entry : 0/0
 11867 ;;		On exit  : 0/0
 11868 ;;		Unchanged: 0/0
 11869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11870 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11871 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11872 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11873 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11874 ;;Total ram usage:        0 bytes
 11875 ;; Hardware stack levels used:    1
 11876 ;; Hardware stack levels required when called:    5
 11877 ;; This function calls:
 11878 ;;		Nothing
 11879 ;; This function is called by:
 11880 ;;		_I2C_Stop
 11881 ;; This function uses a non-reentrant model
 11882 ;;
 11883                           
 11884                           
 11885                           ;psect for function _i2c1_driver_stop
 11886  16E1                     _i2c1_driver_stop:	
 11887                           
 11888                           ;mcc_generated_files/i2c1_driver.c: 158:     SSP1CON2bits.PEN = 1;
 11889                           
 11890                           ;incstack = 0
 11891                           ; Regs used in _i2c1_driver_stop: []
 11892  16E1  0024               	movlb	4	; select bank4
 11893  16E2  1516               	bsf	22,2	;volatile
 11894  16E3  0008               	return
 11895  16E4                     __end_of_i2c1_driver_stop:	
 11896                           
 11897                           	psect	text37
 11898  16DE                     __ptext37:	
 11899 ;; *************** function _I2C_Start *****************
 11900 ;; Defined at:
 11901 ;;		line 35 in file "i2c.c"
 11902 ;; Parameters:    Size  Location     Type
 11903 ;;		None
 11904 ;; Auto vars:     Size  Location     Type
 11905 ;;		None
 11906 ;; Return value:  Size  Location     Type
 11907 ;;                  1    wreg      void 
 11908 ;; Registers used:
 11909 ;;		status,2, status,0, pclath, cstack
 11910 ;; Tracked objects:
 11911 ;;		On entry : 0/0
 11912 ;;		On exit  : 0/0
 11913 ;;		Unchanged: 0/0
 11914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11915 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11916 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11917 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11918 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11919 ;;Total ram usage:        0 bytes
 11920 ;; Hardware stack levels used:    1
 11921 ;; Hardware stack levels required when called:    6
 11922 ;; This function calls:
 11923 ;;		_i2c1_driver_start
 11924 ;; This function is called by:
 11925 ;;		_wireReadDataBlock
 11926 ;;		_wireWriteDataByte
 11927 ;;		_wireReadDataByte
 11928 ;; This function uses a non-reentrant model
 11929 ;;
 11930                           
 11931                           
 11932                           ;psect for function _I2C_Start
 11933  16DE                     _I2C_Start:	
 11934                           
 11935                           ;i2c.c: 37:  i2c1_driver_start();
 11936                           
 11937                           ;incstack = 0
 11938                           ; Regs used in _I2C_Start: [status,2+status,0+pclath+cstack]
 11939  16DE  3196  26DB         	fcall	_i2c1_driver_start
 11940  16E0  0008               	return
 11941  16E1                     __end_of_I2C_Start:	
 11942                           
 11943                           	psect	text38
 11944  16DB                     __ptext38:	
 11945 ;; *************** function _i2c1_driver_start *****************
 11946 ;; Defined at:
 11947 ;;		line 146 in file "mcc_generated_files/i2c1_driver.c"
 11948 ;; Parameters:    Size  Location     Type
 11949 ;;		None
 11950 ;; Auto vars:     Size  Location     Type
 11951 ;;		None
 11952 ;; Return value:  Size  Location     Type
 11953 ;;                  1    wreg      void 
 11954 ;; Registers used:
 11955 ;;		None
 11956 ;; Tracked objects:
 11957 ;;		On entry : 0/0
 11958 ;;		On exit  : 0/0
 11959 ;;		Unchanged: 0/0
 11960 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11961 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11962 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11963 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11964 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11965 ;;Total ram usage:        0 bytes
 11966 ;; Hardware stack levels used:    1
 11967 ;; Hardware stack levels required when called:    5
 11968 ;; This function calls:
 11969 ;;		Nothing
 11970 ;; This function is called by:
 11971 ;;		_I2C_Start
 11972 ;;		_i2c_masterOperation
 11973 ;; This function uses a non-reentrant model
 11974 ;;
 11975                           
 11976                           
 11977                           ;psect for function _i2c1_driver_start
 11978  16DB                     _i2c1_driver_start:	
 11979                           
 11980                           ;mcc_generated_files/i2c1_driver.c: 148:     SSP1CON2bits.SEN = 1;
 11981                           
 11982                           ;incstack = 0
 11983                           ; Regs used in _i2c1_driver_start: []
 11984  16DB  0024               	movlb	4	; select bank4
 11985  16DC  1416               	bsf	22,0	;volatile
 11986  16DD  0008               	return
 11987  16DE                     __end_of_i2c1_driver_start:	
 11988                           
 11989                           	psect	text39
 11990  16D8                     __ptext39:	
 11991 ;; *************** function _I2C_Send_NACK *****************
 11992 ;; Defined at:
 11993 ;;		line 66 in file "i2c.c"
 11994 ;; Parameters:    Size  Location     Type
 11995 ;;		None
 11996 ;; Auto vars:     Size  Location     Type
 11997 ;;		None
 11998 ;; Return value:  Size  Location     Type
 11999 ;;                  1    wreg      void 
 12000 ;; Registers used:
 12001 ;;		status,2, status,0, pclath, cstack
 12002 ;; Tracked objects:
 12003 ;;		On entry : 0/0
 12004 ;;		On exit  : 0/0
 12005 ;;		Unchanged: 0/0
 12006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12007 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12008 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12009 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12010 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12011 ;;Total ram usage:        0 bytes
 12012 ;; Hardware stack levels used:    1
 12013 ;; Hardware stack levels required when called:    6
 12014 ;; This function calls:
 12015 ;;		_i2c1_driver_sendNACK
 12016 ;; This function is called by:
 12017 ;;		_wireReadDataBlock
 12018 ;;		_wireReadDataByte
 12019 ;; This function uses a non-reentrant model
 12020 ;;
 12021                           
 12022                           
 12023                           ;psect for function _I2C_Send_NACK
 12024  16D8                     _I2C_Send_NACK:	
 12025                           
 12026                           ;i2c.c: 68:     i2c1_driver_sendNACK();
 12027                           
 12028                           ;incstack = 0
 12029                           ; Regs used in _I2C_Send_NACK: [status,2+status,0+pclath+cstack]
 12030  16D8  3197  2713         	fcall	_i2c1_driver_sendNACK
 12031  16DA  0008               	return
 12032  16DB                     __end_of_I2C_Send_NACK:	
 12033                           
 12034                           	psect	text40
 12035  1713                     __ptext40:	
 12036 ;; *************** function _i2c1_driver_sendNACK *****************
 12037 ;; Defined at:
 12038 ;;		line 202 in file "mcc_generated_files/i2c1_driver.c"
 12039 ;; Parameters:    Size  Location     Type
 12040 ;;		None
 12041 ;; Auto vars:     Size  Location     Type
 12042 ;;		None
 12043 ;; Return value:  Size  Location     Type
 12044 ;;                  1    wreg      void 
 12045 ;; Registers used:
 12046 ;;		None
 12047 ;; Tracked objects:
 12048 ;;		On entry : 0/0
 12049 ;;		On exit  : 0/0
 12050 ;;		Unchanged: 0/0
 12051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12052 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12053 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12054 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12055 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12056 ;;Total ram usage:        0 bytes
 12057 ;; Hardware stack levels used:    1
 12058 ;; Hardware stack levels required when called:    5
 12059 ;; This function calls:
 12060 ;;		Nothing
 12061 ;; This function is called by:
 12062 ;;		_I2C_Send_NACK
 12063 ;; This function uses a non-reentrant model
 12064 ;;
 12065                           
 12066                           
 12067                           ;psect for function _i2c1_driver_sendNACK
 12068  1713                     _i2c1_driver_sendNACK:	
 12069                           
 12070                           ;mcc_generated_files/i2c1_driver.c: 204:     SSP1CON2bits.ACKDT = 1;
 12071                           
 12072                           ;incstack = 0
 12073                           ; Regs used in _i2c1_driver_sendNACK: []
 12074  1713  0024               	movlb	4	; select bank4
 12075  1714  1696               	bsf	22,5	;volatile
 12076                           
 12077                           ;mcc_generated_files/i2c1_driver.c: 205:     SSP1CON2bits.ACKEN = 1;
 12078  1715  1616               	bsf	22,4	;volatile
 12079  1716  0008               	return
 12080  1717                     __end_of_i2c1_driver_sendNACK:	
 12081                           
 12082                           	psect	text41
 12083  17DC                     __ptext41:	
 12084 ;; *************** function _I2C_Read_Byte *****************
 12085 ;; Defined at:
 12086 ;;		line 115 in file "i2c.c"
 12087 ;; Parameters:    Size  Location     Type
 12088 ;;		None
 12089 ;; Auto vars:     Size  Location     Type
 12090 ;;		None
 12091 ;; Return value:  Size  Location     Type
 12092 ;;                  1    wreg      unsigned char 
 12093 ;; Registers used:
 12094 ;;		wreg, status,2, status,0, pclath, cstack
 12095 ;; Tracked objects:
 12096 ;;		On entry : 0/0
 12097 ;;		On exit  : 0/0
 12098 ;;		Unchanged: 0/0
 12099 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12100 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12101 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12102 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12103 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12104 ;;Total ram usage:        0 bytes
 12105 ;; Hardware stack levels used:    1
 12106 ;; Hardware stack levels required when called:    6
 12107 ;; This function calls:
 12108 ;;		_i2c1_driver_getRXData
 12109 ;;		_i2c1_driver_isBufferFull
 12110 ;;		_i2c1_driver_startRX
 12111 ;; This function is called by:
 12112 ;;		_wireReadDataBlock
 12113 ;;		_wireReadDataByte
 12114 ;; This function uses a non-reentrant model
 12115 ;;
 12116                           
 12117                           
 12118                           ;psect for function _I2C_Read_Byte
 12119  17DC                     _I2C_Read_Byte:	
 12120                           
 12121                           ;i2c.c: 117:     i2c1_driver_startRX();
 12122                           
 12123                           ;incstack = 0
 12124                           ; Regs used in _I2C_Read_Byte: [wreg+status,2+status,0+pclath+cstack]
 12125  17DC  3196  26D5  3197   	fcall	_i2c1_driver_startRX
 12126  17DF                     l6372:	
 12127                           ;i2c.c: 121:  while (i2c1_driver_isBufferFull() == 0) {
 12128                           
 12129                           
 12130                           ;i2c.c: 121:  while (i2c1_driver_isBufferFull() == 0) {
 12131  17DF  3197  2754  3197   	fcall	_i2c1_driver_isBufferFull
 12132  17E2  1C03               	btfss	3,0
 12133  17E3  2FDF               	goto	l6372
 12134                           
 12135                           ;i2c.c: 137:   return i2c1_driver_getRXData();
 12136  17E4  3196  26D2         	fcall	_i2c1_driver_getRXData
 12137  17E6  0008               	return
 12138  17E7                     __end_of_I2C_Read_Byte:	
 12139                           
 12140                           	psect	text42
 12141  16D5                     __ptext42:	
 12142 ;; *************** function _i2c1_driver_startRX *****************
 12143 ;; Defined at:
 12144 ;;		line 166 in file "mcc_generated_files/i2c1_driver.c"
 12145 ;; Parameters:    Size  Location     Type
 12146 ;;		None
 12147 ;; Auto vars:     Size  Location     Type
 12148 ;;		None
 12149 ;; Return value:  Size  Location     Type
 12150 ;;                  1    wreg      void 
 12151 ;; Registers used:
 12152 ;;		None
 12153 ;; Tracked objects:
 12154 ;;		On entry : 0/0
 12155 ;;		On exit  : 0/0
 12156 ;;		Unchanged: 0/0
 12157 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12158 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12159 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12160 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12161 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12162 ;;Total ram usage:        0 bytes
 12163 ;; Hardware stack levels used:    1
 12164 ;; Hardware stack levels required when called:    5
 12165 ;; This function calls:
 12166 ;;		Nothing
 12167 ;; This function is called by:
 12168 ;;		_I2C_Read_Byte
 12169 ;; This function uses a non-reentrant model
 12170 ;;
 12171                           
 12172                           
 12173                           ;psect for function _i2c1_driver_startRX
 12174  16D5                     _i2c1_driver_startRX:	
 12175                           
 12176                           ;mcc_generated_files/i2c1_driver.c: 168:     SSP1CON2bits.RCEN = 1;
 12177                           
 12178                           ;incstack = 0
 12179                           ; Regs used in _i2c1_driver_startRX: []
 12180  16D5  0024               	movlb	4	; select bank4
 12181  16D6  1596               	bsf	22,3	;volatile
 12182  16D7  0008               	return
 12183  16D8                     __end_of_i2c1_driver_startRX:	
 12184                           
 12185                           	psect	text43
 12186  1754                     __ptext43:	
 12187 ;; *************** function _i2c1_driver_isBufferFull *****************
 12188 ;; Defined at:
 12189 ;;		line 213 in file "mcc_generated_files/i2c1_driver.c"
 12190 ;; Parameters:    Size  Location     Type
 12191 ;;		None
 12192 ;; Auto vars:     Size  Location     Type
 12193 ;;		None
 12194 ;; Return value:  Size  Location     Type
 12195 ;;		None               void
 12196 ;; Registers used:
 12197 ;;		wreg, status,2, status,0
 12198 ;; Tracked objects:
 12199 ;;		On entry : 0/0
 12200 ;;		On exit  : 0/0
 12201 ;;		Unchanged: 0/0
 12202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12204 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12205 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12206 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12207 ;;Total ram usage:        1 bytes
 12208 ;; Hardware stack levels used:    1
 12209 ;; Hardware stack levels required when called:    5
 12210 ;; This function calls:
 12211 ;;		Nothing
 12212 ;; This function is called by:
 12213 ;;		_I2C_Read_Byte
 12214 ;; This function uses a non-reentrant model
 12215 ;;
 12216                           
 12217                           
 12218                           ;psect for function _i2c1_driver_isBufferFull
 12219  1754                     _i2c1_driver_isBufferFull:	
 12220                           
 12221                           ;mcc_generated_files/i2c1_driver.c: 215:     return SSP1STATbits.BF;
 12222                           
 12223                           ;incstack = 0
 12224                           ; Regs used in _i2c1_driver_isBufferFull: [wreg+status,2+status,0]
 12225  1754  0024               	movlb	4	; select bank4
 12226  1755  0814               	movf	20,w	;volatile
 12227  1756  3901               	andlw	1
 12228  1757  0020               	movlb	0	; select bank0
 12229  1758  00A0               	movwf	??_i2c1_driver_isBufferFull
 12230  1759  0C20               	rrf	??_i2c1_driver_isBufferFull,w
 12231  175A  0008               	return
 12232  175B                     __end_of_i2c1_driver_isBufferFull:	
 12233                           
 12234                           	psect	text44
 12235  16D2                     __ptext44:	
 12236 ;; *************** function _i2c1_driver_getRXData *****************
 12237 ;; Defined at:
 12238 ;;		line 171 in file "mcc_generated_files/i2c1_driver.c"
 12239 ;; Parameters:    Size  Location     Type
 12240 ;;		None
 12241 ;; Auto vars:     Size  Location     Type
 12242 ;;		None
 12243 ;; Return value:  Size  Location     Type
 12244 ;;                  1    wreg      unsigned char 
 12245 ;; Registers used:
 12246 ;;		wreg
 12247 ;; Tracked objects:
 12248 ;;		On entry : 0/0
 12249 ;;		On exit  : 0/0
 12250 ;;		Unchanged: 0/0
 12251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12252 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12253 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12254 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12255 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12256 ;;Total ram usage:        0 bytes
 12257 ;; Hardware stack levels used:    1
 12258 ;; Hardware stack levels required when called:    5
 12259 ;; This function calls:
 12260 ;;		Nothing
 12261 ;; This function is called by:
 12262 ;;		_I2C_Read_Byte
 12263 ;; This function uses a non-reentrant model
 12264 ;;
 12265                           
 12266                           
 12267                           ;psect for function _i2c1_driver_getRXData
 12268  16D2                     _i2c1_driver_getRXData:	
 12269                           
 12270                           ;mcc_generated_files/i2c1_driver.c: 173:     return SSP1BUF;
 12271                           
 12272                           ;incstack = 0
 12273                           ; Regs used in _i2c1_driver_getRXData: [wreg]
 12274  16D2  0024               	movlb	4	; select bank4
 12275  16D3  0811               	movf	17,w	;volatile
 12276  16D4  0008               	return
 12277  16D5                     __end_of_i2c1_driver_getRXData:	
 12278                           
 12279                           	psect	text45
 12280  16CF                     __ptext45:	
 12281 ;; *************** function _I2C_ReStart *****************
 12282 ;; Defined at:
 12283 ;;		line 43 in file "i2c.c"
 12284 ;; Parameters:    Size  Location     Type
 12285 ;;		None
 12286 ;; Auto vars:     Size  Location     Type
 12287 ;;		None
 12288 ;; Return value:  Size  Location     Type
 12289 ;;                  1    wreg      void 
 12290 ;; Registers used:
 12291 ;;		status,2, status,0, pclath, cstack
 12292 ;; Tracked objects:
 12293 ;;		On entry : 0/0
 12294 ;;		On exit  : 0/0
 12295 ;;		Unchanged: 0/0
 12296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12297 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12298 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12300 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12301 ;;Total ram usage:        0 bytes
 12302 ;; Hardware stack levels used:    1
 12303 ;; Hardware stack levels required when called:    6
 12304 ;; This function calls:
 12305 ;;		_i2c1_driver_restart
 12306 ;; This function is called by:
 12307 ;;		_wireReadDataBlock
 12308 ;;		_wireReadDataByte
 12309 ;; This function uses a non-reentrant model
 12310 ;;
 12311                           
 12312                           
 12313                           ;psect for function _I2C_ReStart
 12314  16CF                     _I2C_ReStart:	
 12315                           
 12316                           ;i2c.c: 45:  i2c1_driver_restart();
 12317                           
 12318                           ;incstack = 0
 12319                           ; Regs used in _I2C_ReStart: [status,2+status,0+pclath+cstack]
 12320  16CF  3196  26CC         	fcall	_i2c1_driver_restart
 12321  16D1  0008               	return
 12322  16D2                     __end_of_I2C_ReStart:	
 12323                           
 12324                           	psect	text46
 12325  16CC                     __ptext46:	
 12326 ;; *************** function _i2c1_driver_restart *****************
 12327 ;; Defined at:
 12328 ;;		line 151 in file "mcc_generated_files/i2c1_driver.c"
 12329 ;; Parameters:    Size  Location     Type
 12330 ;;		None
 12331 ;; Auto vars:     Size  Location     Type
 12332 ;;		None
 12333 ;; Return value:  Size  Location     Type
 12334 ;;                  1    wreg      void 
 12335 ;; Registers used:
 12336 ;;		None
 12337 ;; Tracked objects:
 12338 ;;		On entry : 0/0
 12339 ;;		On exit  : 0/0
 12340 ;;		Unchanged: 0/0
 12341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12342 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12343 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12344 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12345 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12346 ;;Total ram usage:        0 bytes
 12347 ;; Hardware stack levels used:    1
 12348 ;; Hardware stack levels required when called:    5
 12349 ;; This function calls:
 12350 ;;		Nothing
 12351 ;; This function is called by:
 12352 ;;		_I2C_ReStart
 12353 ;; This function uses a non-reentrant model
 12354 ;;
 12355                           
 12356                           
 12357                           ;psect for function _i2c1_driver_restart
 12358  16CC                     _i2c1_driver_restart:	
 12359                           
 12360                           ;mcc_generated_files/i2c1_driver.c: 153:     SSP1CON2bits.RSEN = 1;
 12361                           
 12362                           ;incstack = 0
 12363                           ; Regs used in _i2c1_driver_restart: []
 12364  16CC  0024               	movlb	4	; select bank4
 12365  16CD  1496               	bsf	22,1	;volatile
 12366  16CE  0008               	return
 12367  16CF                     __end_of_i2c1_driver_restart:	
 12368                           
 12369                           	psect	text47
 12370  0EC4                     __ptext47:	
 12371 ;; *************** function _UART_Byte *****************
 12372 ;; Defined at:
 12373 ;;		line 596 in file "main.c"
 12374 ;; Parameters:    Size  Location     Type
 12375 ;;		None
 12376 ;; Auto vars:     Size  Location     Type
 12377 ;;  i               2   18[BANK0 ] int 
 12378 ;;  bits            4   14[BANK0 ] unsigned char [4]
 12379 ;;  tempBright      2   12[BANK0 ] int 
 12380 ;;  tempName        2   10[BANK0 ] int 
 12381 ;;  tempProx        2    8[BANK0 ] int 
 12382 ;;  tempOn          2    6[BANK0 ] int 
 12383 ;; Return value:  Size  Location     Type
 12384 ;;                  1    wreg      void 
 12385 ;; Registers used:
 12386 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12387 ;; Tracked objects:
 12388 ;;		On entry : 0/0
 12389 ;;		On exit  : 0/0
 12390 ;;		Unchanged: 0/0
 12391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12393 ;;      Locals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12394 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12395 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12396 ;;Total ram usage:       15 bytes
 12397 ;; Hardware stack levels used:    1
 12398 ;; Hardware stack levels required when called:    6
 12399 ;; This function calls:
 12400 ;;		_strlen
 12401 ;; This function is called by:
 12402 ;;		_main
 12403 ;; This function uses a non-reentrant model
 12404 ;;
 12405                           
 12406                           
 12407                           ;psect for function _UART_Byte
 12408  0EC4                     _UART_Byte:	
 12409                           
 12410                           ;main.c: 597:     int tempOn = on + 1;
 12411                           
 12412                           ;incstack = 0
 12413                           ; Regs used in _UART_Byte: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12414  0EC4  0020               	movlb	0	; select bank0
 12415  0EC5  085C               	movf	_on,w
 12416  0EC6  3E01               	addlw	1
 12417  0EC7  00A6               	movwf	UART_Byte@tempOn
 12418  0EC8  3000               	movlw	0
 12419  0EC9  3D5D               	addwfc	_on+1,w
 12420  0ECA  00A7               	movwf	UART_Byte@tempOn+1
 12421                           
 12422                           ;main.c: 598:     int tempProx = prox + 1;
 12423  0ECB  0021               	movlb	1	; select bank1
 12424  0ECC  0860               	movf	_prox^(0+128),w
 12425  0ECD  3E01               	addlw	1
 12426  0ECE  0020               	movlb	0	; select bank0
 12427  0ECF  00A8               	movwf	UART_Byte@tempProx
 12428  0ED0  3000               	movlw	0
 12429  0ED1  0021               	movlb	1	; select bank1
 12430  0ED2  3D61               	addwfc	(_prox+1)^(0+128),w
 12431  0ED3  0020               	movlb	0	; select bank0
 12432  0ED4  00A9               	movwf	UART_Byte@tempProx+1
 12433                           
 12434                           ;main.c: 599:     int tempName = name + 1;
 12435  0ED5  0860               	movf	_name,w
 12436  0ED6  3E01               	addlw	1
 12437  0ED7  00AA               	movwf	UART_Byte@tempName
 12438  0ED8  3000               	movlw	0
 12439  0ED9  3D61               	addwfc	_name+1,w
 12440  0EDA  00AB               	movwf	UART_Byte@tempName+1
 12441                           
 12442                           ;main.c: 600:     int tempBright = brightness + 1;
 12443  0EDB  085E               	movf	_brightness,w
 12444  0EDC  3E01               	addlw	1
 12445  0EDD  00AC               	movwf	UART_Byte@tempBright
 12446  0EDE  3000               	movlw	0
 12447  0EDF  3D5F               	addwfc	_brightness+1,w
 12448  0EE0  00AD               	movwf	UART_Byte@tempBright+1
 12449                           
 12450                           ;main.c: 601:     char bits[4] = {tempOn, tempProx, tempName, tempBright};
 12451  0EE1  3000               	movlw	0
 12452  0EE2  00B1               	movwf	UART_Byte@bits+3
 12453  0EE3  3000               	movlw	0
 12454  0EE4  00B0               	movwf	UART_Byte@bits+2
 12455  0EE5  3000               	movlw	0
 12456  0EE6  00AF               	movwf	UART_Byte@bits+1
 12457  0EE7  3000               	movlw	0
 12458  0EE8  00AE               	movwf	UART_Byte@bits
 12459  0EE9  0826               	movf	UART_Byte@tempOn,w
 12460  0EEA  00A5               	movwf	??_UART_Byte
 12461  0EEB  0825               	movf	??_UART_Byte,w
 12462  0EEC  00AE               	movwf	UART_Byte@bits
 12463  0EED  0828               	movf	UART_Byte@tempProx,w
 12464  0EEE  00A5               	movwf	??_UART_Byte
 12465  0EEF  0825               	movf	??_UART_Byte,w
 12466  0EF0  00AF               	movwf	UART_Byte@bits+1
 12467  0EF1  082A               	movf	UART_Byte@tempName,w
 12468  0EF2  00A5               	movwf	??_UART_Byte
 12469  0EF3  0825               	movf	??_UART_Byte,w
 12470  0EF4  00B0               	movwf	UART_Byte@bits+2
 12471  0EF5  082C               	movf	UART_Byte@tempBright,w
 12472  0EF6  00A5               	movwf	??_UART_Byte
 12473  0EF7  0825               	movf	??_UART_Byte,w
 12474  0EF8  00B1               	movwf	UART_Byte@bits+3
 12475                           
 12476                           ;main.c: 602:     for(int i = 0; i < strlen(bits); i++) {
 12477  0EF9  01B2               	clrf	UART_Byte@i
 12478  0EFA  01B3               	clrf	UART_Byte@i+1
 12479  0EFB                     l7604:	
 12480  0EFB  302E               	movlw	low UART_Byte@bits
 12481  0EFC  00A0               	movwf	strlen@s
 12482  0EFD  3000               	movlw	high UART_Byte@bits
 12483  0EFE  00A1               	movwf	strlen@s+1
 12484  0EFF  3188  20CC  318E   	fcall	_strlen
 12485  0F02  0020               	movlb	0	; select bank0
 12486  0F03  0821               	movf	?_strlen+1,w
 12487  0F04  0233               	subwf	UART_Byte@i+1,w
 12488  0F05  1D03               	skipz
 12489  0F06  2F09               	goto	u6665
 12490  0F07  0820               	movf	?_strlen,w
 12491  0F08  0232               	subwf	UART_Byte@i,w
 12492  0F09                     u6665:	
 12493  0F09  1803               	btfsc	3,0
 12494  0F0A  0008               	return
 12495  0F0B                     l868:	
 12496  0F0B  0023               	movlb	3	; select bank3
 12497  0F0C  1C9E               	btfss	30,1	;volatile
 12498  0F0D  2F0B               	goto	l868
 12499                           
 12500                           ;main.c: 604:         TXREG1 = bits[i];
 12501  0F0E  0020               	movlb	0	; select bank0
 12502  0F0F  0832               	movf	UART_Byte@i,w
 12503  0F10  3E2E               	addlw	(low (UART_Byte@bits| 0))& (0+255)
 12504  0F11  0086               	movwf	6
 12505  0F12  0187               	clrf	7
 12506  0F13  0801               	movf	1,w
 12507  0F14  0023               	movlb	3	; select bank3
 12508  0F15  009A               	movwf	26	;volatile
 12509                           
 12510                           ;main.c: 605:     }
 12511  0F16  3001               	movlw	1
 12512  0F17  0020               	movlb	0	; select bank0
 12513  0F18  07B2               	addwf	UART_Byte@i,f
 12514  0F19  3000               	movlw	0
 12515  0F1A  3DB3               	addwfc	UART_Byte@i+1,f
 12516  0F1B  2EFB               	goto	l7604
 12517  0F1C                     __end_of_UART_Byte:	
 12518                           
 12519                           	psect	text48
 12520  08E4                     __ptext48:	
 12521 ;; *************** function _SYSTEM_Initialize *****************
 12522 ;; Defined at:
 12523 ;;		line 50 in file "mcc_generated_files/mcc.c"
 12524 ;; Parameters:    Size  Location     Type
 12525 ;;		None
 12526 ;; Auto vars:     Size  Location     Type
 12527 ;;		None
 12528 ;; Return value:  Size  Location     Type
 12529 ;;                  1    wreg      void 
 12530 ;; Registers used:
 12531 ;;		wreg, status,2, status,0, pclath, cstack
 12532 ;; Tracked objects:
 12533 ;;		On entry : 0/0
 12534 ;;		On exit  : 0/0
 12535 ;;		Unchanged: 0/0
 12536 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12537 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12538 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12539 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12540 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12541 ;;Total ram usage:        0 bytes
 12542 ;; Hardware stack levels used:    1
 12543 ;; Hardware stack levels required when called:    7
 12544 ;; This function calls:
 12545 ;;		_ADC_Initialize
 12546 ;;		_EUSART_Initialize
 12547 ;;		_OSCILLATOR_Initialize
 12548 ;;		_PIN_MANAGER_Initialize
 12549 ;;		_PMD_Initialize
 12550 ;;		_PWM1_Initialize
 12551 ;;		_SPI2_Initialize
 12552 ;;		_TMR2_Initialize
 12553 ;;		_WDT_Initialize
 12554 ;; This function is called by:
 12555 ;;		_main
 12556 ;; This function uses a non-reentrant model
 12557 ;;
 12558                           
 12559                           
 12560                           ;psect for function _SYSTEM_Initialize
 12561  08E4                     _SYSTEM_Initialize:	
 12562                           
 12563                           ;mcc_generated_files/mcc.c: 53:     PMD_Initialize();
 12564                           
 12565                           ;incstack = 0
 12566                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
 12567  08E4  3197  277B  3188   	fcall	_PMD_Initialize
 12568                           
 12569                           ;mcc_generated_files/mcc.c: 54:     PIN_MANAGER_Initialize();
 12570  08E7  318C  24B9  3188   	fcall	_PIN_MANAGER_Initialize
 12571                           
 12572                           ;mcc_generated_files/mcc.c: 55:     OSCILLATOR_Initialize();
 12573  08EA  3197  2773  3188   	fcall	_OSCILLATOR_Initialize
 12574                           
 12575                           ;mcc_generated_files/mcc.c: 56:     WDT_Initialize();
 12576  08ED  3197  270F  3188   	fcall	_WDT_Initialize
 12577                           
 12578                           ;mcc_generated_files/mcc.c: 57:     SPI2_Initialize();
 12579  08F0  3197  274D  3188   	fcall	_SPI2_Initialize
 12580                           
 12581                           ;mcc_generated_files/mcc.c: 58:     PWM1_Initialize();
 12582  08F3  3197  27E7  3188   	fcall	_PWM1_Initialize
 12583                           
 12584                           ;mcc_generated_files/mcc.c: 59:     ADC_Initialize();
 12585  08F6  3197  276B  3188   	fcall	_ADC_Initialize
 12586                           
 12587                           ;mcc_generated_files/mcc.c: 60:     TMR2_Initialize();
 12588  08F9  3197  2783  3188   	fcall	_TMR2_Initialize
 12589                           
 12590                           ;mcc_generated_files/mcc.c: 61:     EUSART_Initialize();
 12591  08FC  318C  2476         	fcall	_EUSART_Initialize
 12592  08FE  0008               	return
 12593  08FF                     __end_of_SYSTEM_Initialize:	
 12594                           
 12595                           	psect	text49
 12596  170F                     __ptext49:	
 12597 ;; *************** function _WDT_Initialize *****************
 12598 ;; Defined at:
 12599 ;;		line 78 in file "mcc_generated_files/mcc.c"
 12600 ;; Parameters:    Size  Location     Type
 12601 ;;		None
 12602 ;; Auto vars:     Size  Location     Type
 12603 ;;		None
 12604 ;; Return value:  Size  Location     Type
 12605 ;;                  1    wreg      void 
 12606 ;; Registers used:
 12607 ;;		wreg
 12608 ;; Tracked objects:
 12609 ;;		On entry : 0/0
 12610 ;;		On exit  : 0/0
 12611 ;;		Unchanged: 0/0
 12612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12613 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12614 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12615 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12616 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12617 ;;Total ram usage:        0 bytes
 12618 ;; Hardware stack levels used:    1
 12619 ;; Hardware stack levels required when called:    5
 12620 ;; This function calls:
 12621 ;;		Nothing
 12622 ;; This function is called by:
 12623 ;;		_SYSTEM_Initialize
 12624 ;; This function uses a non-reentrant model
 12625 ;;
 12626                           
 12627                           
 12628                           ;psect for function _WDT_Initialize
 12629  170F                     _WDT_Initialize:	
 12630                           
 12631                           ;mcc_generated_files/mcc.c: 81:     WDTCON = 0x18;
 12632                           
 12633                           ;incstack = 0
 12634                           ; Regs used in _WDT_Initialize: [wreg]
 12635  170F  3018               	movlw	24
 12636  1710  0021               	movlb	1	; select bank1
 12637  1711  0097               	movwf	23	;volatile
 12638  1712  0008               	return
 12639  1713                     __end_of_WDT_Initialize:	
 12640                           
 12641                           	psect	text50
 12642  1783                     __ptext50:	
 12643 ;; *************** function _TMR2_Initialize *****************
 12644 ;; Defined at:
 12645 ;;		line 62 in file "mcc_generated_files/tmr2.c"
 12646 ;; Parameters:    Size  Location     Type
 12647 ;;		None
 12648 ;; Auto vars:     Size  Location     Type
 12649 ;;		None
 12650 ;; Return value:  Size  Location     Type
 12651 ;;                  1    wreg      void 
 12652 ;; Registers used:
 12653 ;;		wreg, status,2
 12654 ;; Tracked objects:
 12655 ;;		On entry : 0/0
 12656 ;;		On exit  : 0/0
 12657 ;;		Unchanged: 0/0
 12658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12659 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12660 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12661 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12662 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12663 ;;Total ram usage:        0 bytes
 12664 ;; Hardware stack levels used:    1
 12665 ;; Hardware stack levels required when called:    5
 12666 ;; This function calls:
 12667 ;;		Nothing
 12668 ;; This function is called by:
 12669 ;;		_SYSTEM_Initialize
 12670 ;; This function uses a non-reentrant model
 12671 ;;
 12672                           
 12673                           
 12674                           ;psect for function _TMR2_Initialize
 12675  1783                     _TMR2_Initialize:	
 12676                           
 12677                           ;mcc_generated_files/tmr2.c: 67:     PR2 = 0xFF;
 12678                           
 12679                           ;incstack = 0
 12680                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
 12681  1783  30FF               	movlw	255
 12682  1784  0020               	movlb	0	; select bank0
 12683  1785  009E               	movwf	30	;volatile
 12684                           
 12685                           ;mcc_generated_files/tmr2.c: 70:     TMR2 = 0x00;
 12686  1786  019D               	clrf	29	;volatile
 12687                           
 12688                           ;mcc_generated_files/tmr2.c: 73:     PIR1bits.TMR2IF = 0;
 12689  1787  1091               	bcf	17,1	;volatile
 12690                           
 12691                           ;mcc_generated_files/tmr2.c: 76:     T2CON = 0x04;
 12692  1788  3004               	movlw	4
 12693  1789  009F               	movwf	31	;volatile
 12694  178A  0008               	return
 12695  178B                     __end_of_TMR2_Initialize:	
 12696                           
 12697                           	psect	text51
 12698  174D                     __ptext51:	
 12699 ;; *************** function _SPI2_Initialize *****************
 12700 ;; Defined at:
 12701 ;;		line 65 in file "mcc_generated_files/spi2.c"
 12702 ;; Parameters:    Size  Location     Type
 12703 ;;		None
 12704 ;; Auto vars:     Size  Location     Type
 12705 ;;		None
 12706 ;; Return value:  Size  Location     Type
 12707 ;;                  1    wreg      void 
 12708 ;; Registers used:
 12709 ;;		wreg, status,2
 12710 ;; Tracked objects:
 12711 ;;		On entry : 0/0
 12712 ;;		On exit  : 0/0
 12713 ;;		Unchanged: 0/0
 12714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12716 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12718 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12719 ;;Total ram usage:        0 bytes
 12720 ;; Hardware stack levels used:    1
 12721 ;; Hardware stack levels required when called:    5
 12722 ;; This function calls:
 12723 ;;		Nothing
 12724 ;; This function is called by:
 12725 ;;		_SYSTEM_Initialize
 12726 ;; This function uses a non-reentrant model
 12727 ;;
 12728                           
 12729                           
 12730                           ;psect for function _SPI2_Initialize
 12731  174D                     _SPI2_Initialize:	
 12732                           
 12733                           ;mcc_generated_files/spi2.c: 70:     SSP2STAT = 0x80;
 12734                           
 12735                           ;incstack = 0
 12736                           ; Regs used in _SPI2_Initialize: [wreg+status,2]
 12737  174D  3080               	movlw	128
 12738  174E  0024               	movlb	4	; select bank4
 12739  174F  009C               	movwf	28	;volatile
 12740                           
 12741                           ;mcc_generated_files/spi2.c: 73:     SSP2CON1 = 0x31;
 12742  1750  3031               	movlw	49
 12743  1751  009D               	movwf	29	;volatile
 12744                           
 12745                           ;mcc_generated_files/spi2.c: 76:     SSP2ADD = 0x00;
 12746  1752  019A               	clrf	26	;volatile
 12747  1753  0008               	return
 12748  1754                     __end_of_SPI2_Initialize:	
 12749                           
 12750                           	psect	text52
 12751  17E7                     __ptext52:	
 12752 ;; *************** function _PWM1_Initialize *****************
 12753 ;; Defined at:
 12754 ;;		line 64 in file "mcc_generated_files/pwm1.c"
 12755 ;; Parameters:    Size  Location     Type
 12756 ;;		None
 12757 ;; Auto vars:     Size  Location     Type
 12758 ;;		None
 12759 ;; Return value:  Size  Location     Type
 12760 ;;                  1    wreg      void 
 12761 ;; Registers used:
 12762 ;;		wreg, status,2, status,0
 12763 ;; Tracked objects:
 12764 ;;		On entry : 0/0
 12765 ;;		On exit  : 0/0
 12766 ;;		Unchanged: 0/0
 12767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12768 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12769 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12770 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12771 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12772 ;;Total ram usage:        0 bytes
 12773 ;; Hardware stack levels used:    1
 12774 ;; Hardware stack levels required when called:    5
 12775 ;; This function calls:
 12776 ;;		Nothing
 12777 ;; This function is called by:
 12778 ;;		_SYSTEM_Initialize
 12779 ;; This function uses a non-reentrant model
 12780 ;;
 12781                           
 12782                           
 12783                           ;psect for function _PWM1_Initialize
 12784  17E7                     _PWM1_Initialize:	
 12785                           
 12786                           ;mcc_generated_files/pwm1.c: 69:  CCP1CON = 0x8F;
 12787                           
 12788                           ;incstack = 0
 12789                           ; Regs used in _PWM1_Initialize: [wreg+status,2+status,0]
 12790  17E7  308F               	movlw	143
 12791  17E8  0025               	movlb	5	; select bank5
 12792  17E9  0093               	movwf	19	;volatile
 12793                           
 12794                           ;mcc_generated_files/pwm1.c: 72:  CCPR1H = 0x01;
 12795  17EA  3001               	movlw	1
 12796  17EB  0092               	movwf	18	;volatile
 12797                           
 12798                           ;mcc_generated_files/pwm1.c: 75:  CCPR1L = 0x32;
 12799  17EC  3032               	movlw	50
 12800  17ED  0091               	movwf	17	;volatile
 12801                           
 12802                           ;mcc_generated_files/pwm1.c: 78:  CCPTMRSbits.C1TSEL = 0x1;
 12803  17EE  081F               	movf	31,w	;volatile
 12804  17EF  39FC               	andlw	-4
 12805  17F0  3801               	iorlw	1
 12806  17F1  009F               	movwf	31	;volatile
 12807  17F2  0008               	return
 12808  17F3                     __end_of_PWM1_Initialize:	
 12809                           
 12810                           	psect	text53
 12811  177B                     __ptext53:	
 12812 ;; *************** function _PMD_Initialize *****************
 12813 ;; Defined at:
 12814 ;;		line 84 in file "mcc_generated_files/mcc.c"
 12815 ;; Parameters:    Size  Location     Type
 12816 ;;		None
 12817 ;; Auto vars:     Size  Location     Type
 12818 ;;		None
 12819 ;; Return value:  Size  Location     Type
 12820 ;;                  1    wreg      void 
 12821 ;; Registers used:
 12822 ;;		status,2
 12823 ;; Tracked objects:
 12824 ;;		On entry : 0/0
 12825 ;;		On exit  : 0/0
 12826 ;;		Unchanged: 0/0
 12827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12828 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12829 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12830 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12831 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12832 ;;Total ram usage:        0 bytes
 12833 ;; Hardware stack levels used:    1
 12834 ;; Hardware stack levels required when called:    5
 12835 ;; This function calls:
 12836 ;;		Nothing
 12837 ;; This function is called by:
 12838 ;;		_SYSTEM_Initialize
 12839 ;; This function uses a non-reentrant model
 12840 ;;
 12841                           
 12842                           
 12843                           ;psect for function _PMD_Initialize
 12844  177B                     _PMD_Initialize:	
 12845                           
 12846                           ;mcc_generated_files/mcc.c: 87:     PMD0 = 0x00;
 12847                           
 12848                           ;incstack = 0
 12849                           ; Regs used in _PMD_Initialize: [status,2]
 12850  177B  0032               	movlb	18	; select bank18
 12851  177C  0191               	clrf	17	;volatile
 12852                           
 12853                           ;mcc_generated_files/mcc.c: 89:     PMD1 = 0x00;
 12854  177D  0192               	clrf	18	;volatile
 12855                           
 12856                           ;mcc_generated_files/mcc.c: 91:     PMD2 = 0x00;
 12857  177E  0193               	clrf	19	;volatile
 12858                           
 12859                           ;mcc_generated_files/mcc.c: 93:     PMD3 = 0x00;
 12860  177F  0194               	clrf	20	;volatile
 12861                           
 12862                           ;mcc_generated_files/mcc.c: 95:     PMD4 = 0x00;
 12863  1780  0195               	clrf	21	;volatile
 12864                           
 12865                           ;mcc_generated_files/mcc.c: 97:     PMD5 = 0x00;
 12866  1781  0196               	clrf	22	;volatile
 12867  1782  0008               	return
 12868  1783                     __end_of_PMD_Initialize:	
 12869                           
 12870                           	psect	text54
 12871  0CB9                     __ptext54:	
 12872 ;; *************** function _PIN_MANAGER_Initialize *****************
 12873 ;; Defined at:
 12874 ;;		line 57 in file "mcc_generated_files/pin_manager.c"
 12875 ;; Parameters:    Size  Location     Type
 12876 ;;		None
 12877 ;; Auto vars:     Size  Location     Type
 12878 ;;		None
 12879 ;; Return value:  Size  Location     Type
 12880 ;;                  1    wreg      void 
 12881 ;; Registers used:
 12882 ;;		wreg, status,2, status,0, pclath, cstack
 12883 ;; Tracked objects:
 12884 ;;		On entry : 0/0
 12885 ;;		On exit  : 0/0
 12886 ;;		Unchanged: 0/0
 12887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12888 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12889 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12890 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12891 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12892 ;;Total ram usage:        0 bytes
 12893 ;; Hardware stack levels used:    1
 12894 ;; Hardware stack levels required when called:    6
 12895 ;; This function calls:
 12896 ;;		_IOCAF4_SetInterruptHandler
 12897 ;; This function is called by:
 12898 ;;		_SYSTEM_Initialize
 12899 ;; This function uses a non-reentrant model
 12900 ;;
 12901                           
 12902                           
 12903                           ;psect for function _PIN_MANAGER_Initialize
 12904  0CB9                     _PIN_MANAGER_Initialize:	
 12905                           
 12906                           ;mcc_generated_files/pin_manager.c: 62:     LATA = 0x00;
 12907                           
 12908                           ;incstack = 0
 12909                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0+pclath+cstack]
 12910  0CB9  0022               	movlb	2	; select bank2
 12911  0CBA  018C               	clrf	12	;volatile
 12912                           
 12913                           ;mcc_generated_files/pin_manager.c: 63:     LATB = 0x00;
 12914  0CBB  018D               	clrf	13	;volatile
 12915                           
 12916                           ;mcc_generated_files/pin_manager.c: 64:     LATC = 0x00;
 12917  0CBC  018E               	clrf	14	;volatile
 12918                           
 12919                           ;mcc_generated_files/pin_manager.c: 69:     TRISA = 0x33;
 12920  0CBD  3033               	movlw	51
 12921  0CBE  0021               	movlb	1	; select bank1
 12922  0CBF  008C               	movwf	12	;volatile
 12923                           
 12924                           ;mcc_generated_files/pin_manager.c: 70:     TRISB = 0xB0;
 12925  0CC0  30B0               	movlw	176
 12926  0CC1  008D               	movwf	13	;volatile
 12927                           
 12928                           ;mcc_generated_files/pin_manager.c: 71:     TRISC = 0x9A;
 12929  0CC2  309A               	movlw	154
 12930  0CC3  008E               	movwf	14	;volatile
 12931                           
 12932                           ;mcc_generated_files/pin_manager.c: 76:     ANSELC = 0xF4;
 12933  0CC4  30F4               	movlw	244
 12934  0CC5  0023               	movlb	3	; select bank3
 12935  0CC6  008E               	movwf	14	;volatile
 12936                           
 12937                           ;mcc_generated_files/pin_manager.c: 77:     ANSELB = 0x20;
 12938  0CC7  3020               	movlw	32
 12939  0CC8  008D               	movwf	13	;volatile
 12940                           
 12941                           ;mcc_generated_files/pin_manager.c: 78:     ANSELA = 0x01;
 12942  0CC9  3001               	movlw	1
 12943  0CCA  008C               	movwf	12	;volatile
 12944                           
 12945                           ;mcc_generated_files/pin_manager.c: 83:     WPUB = 0x00;
 12946  0CCB  0024               	movlb	4	; select bank4
 12947  0CCC  018D               	clrf	13	;volatile
 12948                           
 12949                           ;mcc_generated_files/pin_manager.c: 84:     WPUA = 0x00;
 12950  0CCD  018C               	clrf	12	;volatile
 12951                           
 12952                           ;mcc_generated_files/pin_manager.c: 85:     WPUC = 0x00;
 12953  0CCE  018E               	clrf	14	;volatile
 12954                           
 12955                           ;mcc_generated_files/pin_manager.c: 90:     ODCONA = 0x00;
 12956  0CCF  0025               	movlb	5	; select bank5
 12957  0CD0  018C               	clrf	12	;volatile
 12958                           
 12959                           ;mcc_generated_files/pin_manager.c: 91:     ODCONB = 0x00;
 12960  0CD1  018D               	clrf	13	;volatile
 12961                           
 12962                           ;mcc_generated_files/pin_manager.c: 92:     ODCONC = 0x00;
 12963  0CD2  018E               	clrf	14	;volatile
 12964                           
 12965                           ;mcc_generated_files/pin_manager.c: 97:     SLRCONA = 0x37;
 12966  0CD3  3037               	movlw	55
 12967  0CD4  0026               	movlb	6	; select bank6
 12968  0CD5  008C               	movwf	12	;volatile
 12969                           
 12970                           ;mcc_generated_files/pin_manager.c: 98:     SLRCONB = 0xF0;
 12971  0CD6  30F0               	movlw	240
 12972  0CD7  008D               	movwf	13	;volatile
 12973                           
 12974                           ;mcc_generated_files/pin_manager.c: 99:     SLRCONC = 0xFF;
 12975  0CD8  30FF               	movlw	255
 12976  0CD9  008E               	movwf	14	;volatile
 12977                           
 12978                           ;mcc_generated_files/pin_manager.c: 106:     IOCAFbits.IOCAF4 = 0;
 12979  0CDA  0027               	movlb	7	; select bank7
 12980  0CDB  1213               	bcf	19,4	;volatile
 12981                           
 12982                           ;mcc_generated_files/pin_manager.c: 108:     IOCANbits.IOCAN4 = 1;
 12983  0CDC  1612               	bsf	18,4	;volatile
 12984                           
 12985                           ;mcc_generated_files/pin_manager.c: 110:     IOCAPbits.IOCAP4 = 0;
 12986  0CDD  1211               	bcf	17,4	;volatile
 12987                           
 12988                           ;mcc_generated_files/pin_manager.c: 115:     IOCAF4_SetInterruptHandler(IOCAF4_DefaultIn
      +                          terruptHandler);
 12989  0CDE  30AF               	movlw	low _IOCAF4_DefaultInterruptHandler
 12990  0CDF  0020               	movlb	0	; select bank0
 12991  0CE0  00A0               	movwf	IOCAF4_SetInterruptHandler@InterruptHandler
 12992  0CE1  3016               	movlw	high _IOCAF4_DefaultInterruptHandler
 12993  0CE2  00A1               	movwf	IOCAF4_SetInterruptHandler@InterruptHandler+1
 12994  0CE3  3197  27C0         	fcall	_IOCAF4_SetInterruptHandler
 12995                           
 12996                           ;mcc_generated_files/pin_manager.c: 118:     PIE0bits.IOCIE = 1;
 12997  0CE5  0021               	movlb	1	; select bank1
 12998  0CE6  1610               	bsf	16,4	;volatile
 12999                           
 13000                           ;mcc_generated_files/pin_manager.c: 121:     SSP2DATPPS = 0x0C;
 13001  0CE7  300C               	movlw	12
 13002  0CE8  003C               	movlb	28	; select bank28
 13003  0CE9  009E               	movwf	30	;volatile
 13004                           
 13005                           ;mcc_generated_files/pin_manager.c: 122:     SSP1CLKPPS = 0x0F;
 13006  0CEA  300F               	movlw	15
 13007  0CEB  00A0               	movwf	32	;volatile
 13008                           
 13009                           ;mcc_generated_files/pin_manager.c: 123:     RA4PPS = 0x19;
 13010  0CEC  3019               	movlw	25
 13011  0CED  003D               	movlb	29	; select bank29
 13012  0CEE  0094               	movwf	20	;volatile
 13013                           
 13014                           ;mcc_generated_files/pin_manager.c: 124:     RB6PPS = 0x1A;
 13015  0CEF  301A               	movlw	26
 13016  0CF0  009E               	movwf	30	;volatile
 13017                           
 13018                           ;mcc_generated_files/pin_manager.c: 125:     RB7PPS = 0x18;
 13019  0CF1  3018               	movlw	24
 13020  0CF2  009F               	movwf	31	;volatile
 13021                           
 13022                           ;mcc_generated_files/pin_manager.c: 126:     RC2PPS = 0x1B;
 13023  0CF3  301B               	movlw	27
 13024  0CF4  00A2               	movwf	34	;volatile
 13025                           
 13026                           ;mcc_generated_files/pin_manager.c: 127:     RC5PPS = 0x14;
 13027  0CF5  3014               	movlw	20
 13028  0CF6  00A5               	movwf	37	;volatile
 13029                           
 13030                           ;mcc_generated_files/pin_manager.c: 128:     SSP1DATPPS = 0x04;
 13031  0CF7  3004               	movlw	4
 13032  0CF8  003C               	movlb	28	; select bank28
 13033  0CF9  00A1               	movwf	33	;volatile
 13034                           
 13035                           ;mcc_generated_files/pin_manager.c: 129:     SSP2CLKPPS = 0x0E;
 13036  0CFA  300E               	movlw	14
 13037  0CFB  009D               	movwf	29	;volatile
 13038  0CFC  0008               	return
 13039  0CFD                     __end_of_PIN_MANAGER_Initialize:	
 13040                           
 13041                           	psect	text55
 13042  17C0                     __ptext55:	
 13043 ;; *************** function _IOCAF4_SetInterruptHandler *****************
 13044 ;; Defined at:
 13045 ;;		line 159 in file "mcc_generated_files/pin_manager.c"
 13046 ;; Parameters:    Size  Location     Type
 13047 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
 13048 ;;		 -> IOCAF4_DefaultInterruptHandler(1), 
 13049 ;; Auto vars:     Size  Location     Type
 13050 ;;		None
 13051 ;; Return value:  Size  Location     Type
 13052 ;;                  1    wreg      void 
 13053 ;; Registers used:
 13054 ;;		wreg
 13055 ;; Tracked objects:
 13056 ;;		On entry : 0/0
 13057 ;;		On exit  : 0/0
 13058 ;;		Unchanged: 0/0
 13059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13060 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13061 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13062 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13063 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13064 ;;Total ram usage:        2 bytes
 13065 ;; Hardware stack levels used:    1
 13066 ;; Hardware stack levels required when called:    5
 13067 ;; This function calls:
 13068 ;;		Nothing
 13069 ;; This function is called by:
 13070 ;;		_PIN_MANAGER_Initialize
 13071 ;; This function uses a non-reentrant model
 13072 ;;
 13073                           
 13074                           
 13075                           ;psect for function _IOCAF4_SetInterruptHandler
 13076  17C0                     _IOCAF4_SetInterruptHandler:	
 13077                           
 13078                           ;mcc_generated_files/pin_manager.c: 160:     IOCAF4_InterruptHandler = InterruptHandler;
 13079                           
 13080                           ;incstack = 0
 13081                           ; Regs used in _IOCAF4_SetInterruptHandler: [wreg]
 13082  17C0  0020               	movlb	0	; select bank0
 13083  17C1  0821               	movf	IOCAF4_SetInterruptHandler@InterruptHandler+1,w
 13084  17C2  0021               	movlb	1	; select bank1
 13085  17C3  00ED               	movwf	(_IOCAF4_InterruptHandler+1)^(0+128)
 13086  17C4  0020               	movlb	0	; select bank0
 13087  17C5  0820               	movf	IOCAF4_SetInterruptHandler@InterruptHandler,w
 13088  17C6  0021               	movlb	1	; select bank1
 13089  17C7  00EC               	movwf	_IOCAF4_InterruptHandler^(0+128)
 13090  17C8  0008               	return
 13091  17C9                     __end_of_IOCAF4_SetInterruptHandler:	
 13092                           
 13093                           	psect	text56
 13094  1773                     __ptext56:	
 13095 ;; *************** function _OSCILLATOR_Initialize *****************
 13096 ;; Defined at:
 13097 ;;		line 64 in file "mcc_generated_files/mcc.c"
 13098 ;; Parameters:    Size  Location     Type
 13099 ;;		None
 13100 ;; Auto vars:     Size  Location     Type
 13101 ;;		None
 13102 ;; Return value:  Size  Location     Type
 13103 ;;                  1    wreg      void 
 13104 ;; Registers used:
 13105 ;;		wreg, status,2
 13106 ;; Tracked objects:
 13107 ;;		On entry : 0/0
 13108 ;;		On exit  : 0/0
 13109 ;;		Unchanged: 0/0
 13110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13111 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13112 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13113 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13114 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13115 ;;Total ram usage:        0 bytes
 13116 ;; Hardware stack levels used:    1
 13117 ;; Hardware stack levels required when called:    5
 13118 ;; This function calls:
 13119 ;;		Nothing
 13120 ;; This function is called by:
 13121 ;;		_SYSTEM_Initialize
 13122 ;; This function uses a non-reentrant model
 13123 ;;
 13124                           
 13125                           
 13126                           ;psect for function _OSCILLATOR_Initialize
 13127  1773                     _OSCILLATOR_Initialize:	
 13128                           
 13129                           ;mcc_generated_files/mcc.c: 67:     OSCCON1 = 0x61;
 13130                           
 13131                           ;incstack = 0
 13132                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 13133  1773  3061               	movlw	97
 13134  1774  0032               	movlb	18	; select bank18
 13135  1775  0099               	movwf	25	;volatile
 13136                           
 13137                           ;mcc_generated_files/mcc.c: 69:     OSCCON3 = 0x00;
 13138  1776  019B               	clrf	27	;volatile
 13139                           
 13140                           ;mcc_generated_files/mcc.c: 71:     OSCEN = 0x00;
 13141  1777  019D               	clrf	29	;volatile
 13142                           
 13143                           ;mcc_generated_files/mcc.c: 73:     OSCFRQ = 0x00;
 13144  1778  019F               	clrf	31	;volatile
 13145                           
 13146                           ;mcc_generated_files/mcc.c: 75:     OSCTUNE = 0x00;
 13147  1779  019E               	clrf	30	;volatile
 13148  177A  0008               	return
 13149  177B                     __end_of_OSCILLATOR_Initialize:	
 13150                           
 13151                           	psect	text57
 13152  0C76                     __ptext57:	
 13153 ;; *************** function _EUSART_Initialize *****************
 13154 ;; Defined at:
 13155 ;;		line 85 in file "mcc_generated_files/eusart.c"
 13156 ;; Parameters:    Size  Location     Type
 13157 ;;		None
 13158 ;; Auto vars:     Size  Location     Type
 13159 ;;		None
 13160 ;; Return value:  Size  Location     Type
 13161 ;;                  1    wreg      void 
 13162 ;; Registers used:
 13163 ;;		wreg, status,2, status,0, pclath, cstack
 13164 ;; Tracked objects:
 13165 ;;		On entry : 0/0
 13166 ;;		On exit  : 0/0
 13167 ;;		Unchanged: 0/0
 13168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13169 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13170 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13171 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13172 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13173 ;;Total ram usage:        1 bytes
 13174 ;; Hardware stack levels used:    1
 13175 ;; Hardware stack levels required when called:    6
 13176 ;; This function calls:
 13177 ;;		_EUSART_SetErrorHandler
 13178 ;;		_EUSART_SetFramingErrorHandler
 13179 ;;		_EUSART_SetOverrunErrorHandler
 13180 ;;		_EUSART_SetRxInterruptHandler
 13181 ;;		_EUSART_SetTxInterruptHandler
 13182 ;; This function is called by:
 13183 ;;		_SYSTEM_Initialize
 13184 ;; This function uses a non-reentrant model
 13185 ;;
 13186                           
 13187                           
 13188                           ;psect for function _EUSART_Initialize
 13189  0C76                     _EUSART_Initialize:	
 13190                           
 13191                           ;mcc_generated_files/eusart.c: 88:     PIE1bits.RCIE = 0;
 13192                           
 13193                           ;incstack = 0
 13194                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
 13195  0C76  0021               	movlb	1	; select bank1
 13196  0C77  1291               	bcf	17,5	;volatile
 13197                           
 13198                           ;mcc_generated_files/eusart.c: 89:     EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
 13199  0C78  3001               	movlw	low _EUSART_Receive_ISR
 13200  0C79  0020               	movlb	0	; select bank0
 13201  0C7A  00A0               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
 13202  0C7B  300C               	movlw	high _EUSART_Receive_ISR
 13203  0C7C  00A1               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
 13204  0C7D  3197  27AE  318C   	fcall	_EUSART_SetRxInterruptHandler
 13205                           
 13206                           ;mcc_generated_files/eusart.c: 90:     PIE1bits.TXIE = 0;
 13207  0C80  0021               	movlb	1	; select bank1
 13208  0C81  1211               	bcf	17,4	;volatile
 13209                           
 13210                           ;mcc_generated_files/eusart.c: 91:     EUSART_SetTxInterruptHandler(EUSART_Transmit_ISR)
      +                          ;
 13211  0C82  3052               	movlw	low _EUSART_Transmit_ISR
 13212  0C83  0020               	movlb	0	; select bank0
 13213  0C84  00A0               	movwf	EUSART_SetTxInterruptHandler@interruptHandler
 13214  0C85  3009               	movlw	high _EUSART_Transmit_ISR
 13215  0C86  00A1               	movwf	EUSART_SetTxInterruptHandler@interruptHandler+1
 13216  0C87  3197  27B7  318C   	fcall	_EUSART_SetTxInterruptHandler
 13217                           
 13218                           ;mcc_generated_files/eusart.c: 95:     BAUD1CON = 0x0A;
 13219  0C8A  300A               	movlw	10
 13220  0C8B  0023               	movlb	3	; select bank3
 13221  0C8C  009F               	movwf	31	;volatile
 13222                           
 13223                           ;mcc_generated_files/eusart.c: 98:     RC1STA = 0x80;
 13224  0C8D  3080               	movlw	128
 13225  0C8E  009D               	movwf	29	;volatile
 13226                           
 13227                           ;mcc_generated_files/eusart.c: 101:     TX1STA = 0x24;
 13228  0C8F  3024               	movlw	36
 13229  0C90  009E               	movwf	30	;volatile
 13230                           
 13231                           ;mcc_generated_files/eusart.c: 104:     SP1BRGL = 0x0C;
 13232  0C91  300C               	movlw	12
 13233  0C92  009B               	movwf	27	;volatile
 13234                           
 13235                           ;mcc_generated_files/eusart.c: 107:     SP1BRGH = 0x00;
 13236  0C93  019C               	clrf	28	;volatile
 13237                           
 13238                           ;mcc_generated_files/eusart.c: 110:     EUSART_SetFramingErrorHandler(EUSART_DefaultFram
      +                          ingErrorHandler);
 13239  0C94  30AE               	movlw	low _EUSART_DefaultFramingErrorHandler
 13240  0C95  0020               	movlb	0	; select bank0
 13241  0C96  00A0               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
 13242  0C97  3016               	movlw	high _EUSART_DefaultFramingErrorHandler
 13243  0C98  00A1               	movwf	EUSART_SetFramingErrorHandler@interruptHandler+1
 13244  0C99  3197  279C  318C   	fcall	_EUSART_SetFramingErrorHandler
 13245                           
 13246                           ;mcc_generated_files/eusart.c: 111:     EUSART_SetOverrunErrorHandler(EUSART_DefaultOver
      +                          runErrorHandler);
 13247  0C9C  30E7               	movlw	low _EUSART_DefaultOverrunErrorHandler
 13248  0C9D  0020               	movlb	0	; select bank0
 13249  0C9E  00A0               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
 13250  0C9F  3016               	movlw	high _EUSART_DefaultOverrunErrorHandler
 13251  0CA0  00A1               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler+1
 13252  0CA1  3197  27A5  318C   	fcall	_EUSART_SetOverrunErrorHandler
 13253                           
 13254                           ;mcc_generated_files/eusart.c: 112:     EUSART_SetErrorHandler(EUSART_DefaultErrorHandle
      +                          r);
 13255  0CA4  30B1               	movlw	low _EUSART_DefaultErrorHandler
 13256  0CA5  0020               	movlb	0	; select bank0
 13257  0CA6  00A0               	movwf	EUSART_SetErrorHandler@interruptHandler
 13258  0CA7  3016               	movlw	high _EUSART_DefaultErrorHandler
 13259  0CA8  00A1               	movwf	EUSART_SetErrorHandler@interruptHandler+1
 13260  0CA9  3197  2793         	fcall	_EUSART_SetErrorHandler
 13261                           
 13262                           ;mcc_generated_files/eusart.c: 114:     eusartRxLastError.status = 0;
 13263  0CAB  0020               	movlb	0	; select bank0
 13264  0CAC  01EA               	clrf	_eusartRxLastError	;volatile
 13265                           
 13266                           ;mcc_generated_files/eusart.c: 117:     eusartTxHead = 0;
 13267  0CAD  01F4               	clrf	_eusartTxHead	;volatile
 13268                           
 13269                           ;mcc_generated_files/eusart.c: 118:     eusartTxTail = 0;
 13270  0CAE  01F3               	clrf	_eusartTxTail	;volatile
 13271                           
 13272                           ;mcc_generated_files/eusart.c: 119:     eusartTxBufferRemaining = sizeof(eusartTxBuffer)
      +                          ;
 13273  0CAF  3008               	movlw	8
 13274  0CB0  00A2               	movwf	??_EUSART_Initialize
 13275  0CB1  0822               	movf	??_EUSART_Initialize,w
 13276  0CB2  00EE               	movwf	_eusartTxBufferRemaining	;volatile
 13277                           
 13278                           ;mcc_generated_files/eusart.c: 121:     eusartRxHead = 0;
 13279  0CB3  01F2               	clrf	_eusartRxHead	;volatile
 13280                           
 13281                           ;mcc_generated_files/eusart.c: 122:     eusartRxTail = 0;
 13282  0CB4  01F1               	clrf	_eusartRxTail	;volatile
 13283                           
 13284                           ;mcc_generated_files/eusart.c: 123:     eusartRxCount = 0;
 13285  0CB5  01F0               	clrf	_eusartRxCount	;volatile
 13286                           
 13287                           ;mcc_generated_files/eusart.c: 126:     PIE1bits.RCIE = 1;
 13288  0CB6  0021               	movlb	1	; select bank1
 13289  0CB7  1691               	bsf	17,5	;volatile
 13290  0CB8  0008               	return
 13291  0CB9                     __end_of_EUSART_Initialize:	
 13292                           
 13293                           	psect	text58
 13294  17B7                     __ptext58:	
 13295 ;; *************** function _EUSART_SetTxInterruptHandler *****************
 13296 ;; Defined at:
 13297 ;;		line 284 in file "mcc_generated_files/eusart.c"
 13298 ;; Parameters:    Size  Location     Type
 13299 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
 13300 ;;		 -> EUSART_Transmit_ISR(1), 
 13301 ;; Auto vars:     Size  Location     Type
 13302 ;;		None
 13303 ;; Return value:  Size  Location     Type
 13304 ;;                  1    wreg      void 
 13305 ;; Registers used:
 13306 ;;		wreg
 13307 ;; Tracked objects:
 13308 ;;		On entry : 0/0
 13309 ;;		On exit  : 0/0
 13310 ;;		Unchanged: 0/0
 13311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13312 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13313 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13314 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13315 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13316 ;;Total ram usage:        2 bytes
 13317 ;; Hardware stack levels used:    1
 13318 ;; Hardware stack levels required when called:    5
 13319 ;; This function calls:
 13320 ;;		Nothing
 13321 ;; This function is called by:
 13322 ;;		_EUSART_Initialize
 13323 ;; This function uses a non-reentrant model
 13324 ;;
 13325                           
 13326                           
 13327                           ;psect for function _EUSART_SetTxInterruptHandler
 13328  17B7                     _EUSART_SetTxInterruptHandler:	
 13329                           
 13330                           ;mcc_generated_files/eusart.c: 285:     EUSART_TxDefaultInterruptHandler = interruptHand
      +                          ler;
 13331                           
 13332                           ;incstack = 0
 13333                           ; Regs used in _EUSART_SetTxInterruptHandler: [wreg]
 13334  17B7  0020               	movlb	0	; select bank0
 13335  17B8  0821               	movf	EUSART_SetTxInterruptHandler@interruptHandler+1,w
 13336  17B9  0021               	movlb	1	; select bank1
 13337  17BA  00EF               	movwf	(_EUSART_TxDefaultInterruptHandler+1)^(0+128)
 13338  17BB  0020               	movlb	0	; select bank0
 13339  17BC  0820               	movf	EUSART_SetTxInterruptHandler@interruptHandler,w
 13340  17BD  0021               	movlb	1	; select bank1
 13341  17BE  00EE               	movwf	_EUSART_TxDefaultInterruptHandler^(0+128)
 13342  17BF  0008               	return
 13343  17C0                     __end_of_EUSART_SetTxInterruptHandler:	
 13344                           
 13345                           	psect	text59
 13346  17AE                     __ptext59:	
 13347 ;; *************** function _EUSART_SetRxInterruptHandler *****************
 13348 ;; Defined at:
 13349 ;;		line 288 in file "mcc_generated_files/eusart.c"
 13350 ;; Parameters:    Size  Location     Type
 13351 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
 13352 ;;		 -> EUSART_Receive_ISR(1), 
 13353 ;; Auto vars:     Size  Location     Type
 13354 ;;		None
 13355 ;; Return value:  Size  Location     Type
 13356 ;;                  1    wreg      void 
 13357 ;; Registers used:
 13358 ;;		wreg
 13359 ;; Tracked objects:
 13360 ;;		On entry : 0/0
 13361 ;;		On exit  : 0/0
 13362 ;;		Unchanged: 0/0
 13363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13364 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13365 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13366 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13367 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13368 ;;Total ram usage:        2 bytes
 13369 ;; Hardware stack levels used:    1
 13370 ;; Hardware stack levels required when called:    5
 13371 ;; This function calls:
 13372 ;;		Nothing
 13373 ;; This function is called by:
 13374 ;;		_EUSART_Initialize
 13375 ;; This function uses a non-reentrant model
 13376 ;;
 13377                           
 13378                           
 13379                           ;psect for function _EUSART_SetRxInterruptHandler
 13380  17AE                     _EUSART_SetRxInterruptHandler:	
 13381                           
 13382                           ;mcc_generated_files/eusart.c: 289:     EUSART_RxDefaultInterruptHandler = interruptHand
      +                          ler;
 13383                           
 13384                           ;incstack = 0
 13385                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
 13386  17AE  0020               	movlb	0	; select bank0
 13387  17AF  0821               	movf	EUSART_SetRxInterruptHandler@interruptHandler+1,w
 13388  17B0  0022               	movlb	2	; select bank2
 13389  17B1  00EF               	movwf	(_EUSART_RxDefaultInterruptHandler+1)^(0+256)
 13390  17B2  0020               	movlb	0	; select bank0
 13391  17B3  0820               	movf	EUSART_SetRxInterruptHandler@interruptHandler,w
 13392  17B4  0022               	movlb	2	; select bank2
 13393  17B5  00EE               	movwf	_EUSART_RxDefaultInterruptHandler^(0+256)
 13394  17B6  0008               	return
 13395  17B7                     __end_of_EUSART_SetRxInterruptHandler:	
 13396                           
 13397                           	psect	text60
 13398  17A5                     __ptext60:	
 13399 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
 13400 ;; Defined at:
 13401 ;;		line 276 in file "mcc_generated_files/eusart.c"
 13402 ;; Parameters:    Size  Location     Type
 13403 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
 13404 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
 13405 ;; Auto vars:     Size  Location     Type
 13406 ;;		None
 13407 ;; Return value:  Size  Location     Type
 13408 ;;                  1    wreg      void 
 13409 ;; Registers used:
 13410 ;;		wreg
 13411 ;; Tracked objects:
 13412 ;;		On entry : 0/0
 13413 ;;		On exit  : 0/0
 13414 ;;		Unchanged: 0/0
 13415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13416 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13417 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13418 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13419 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13420 ;;Total ram usage:        2 bytes
 13421 ;; Hardware stack levels used:    1
 13422 ;; Hardware stack levels required when called:    5
 13423 ;; This function calls:
 13424 ;;		Nothing
 13425 ;; This function is called by:
 13426 ;;		_EUSART_Initialize
 13427 ;; This function uses a non-reentrant model
 13428 ;;
 13429                           
 13430                           
 13431                           ;psect for function _EUSART_SetOverrunErrorHandler
 13432  17A5                     _EUSART_SetOverrunErrorHandler:	
 13433                           
 13434                           ;mcc_generated_files/eusart.c: 277:     EUSART_OverrunErrorHandler = interruptHandler;
 13435                           
 13436                           ;incstack = 0
 13437                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
 13438  17A5  0020               	movlb	0	; select bank0
 13439  17A6  0821               	movf	EUSART_SetOverrunErrorHandler@interruptHandler+1,w
 13440  17A7  0023               	movlb	3	; select bank3
 13441  17A8  00D8               	movwf	(_EUSART_OverrunErrorHandler+1)^(0+384)
 13442  17A9  0020               	movlb	0	; select bank0
 13443  17AA  0820               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
 13444  17AB  0023               	movlb	3	; select bank3
 13445  17AC  00D7               	movwf	_EUSART_OverrunErrorHandler^(0+384)
 13446  17AD  0008               	return
 13447  17AE                     __end_of_EUSART_SetOverrunErrorHandler:	
 13448                           
 13449                           	psect	text61
 13450  179C                     __ptext61:	
 13451 ;; *************** function _EUSART_SetFramingErrorHandler *****************
 13452 ;; Defined at:
 13453 ;;		line 272 in file "mcc_generated_files/eusart.c"
 13454 ;; Parameters:    Size  Location     Type
 13455 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
 13456 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
 13457 ;; Auto vars:     Size  Location     Type
 13458 ;;		None
 13459 ;; Return value:  Size  Location     Type
 13460 ;;                  1    wreg      void 
 13461 ;; Registers used:
 13462 ;;		wreg
 13463 ;; Tracked objects:
 13464 ;;		On entry : 0/0
 13465 ;;		On exit  : 0/0
 13466 ;;		Unchanged: 0/0
 13467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13468 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13469 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13470 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13471 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13472 ;;Total ram usage:        2 bytes
 13473 ;; Hardware stack levels used:    1
 13474 ;; Hardware stack levels required when called:    5
 13475 ;; This function calls:
 13476 ;;		Nothing
 13477 ;; This function is called by:
 13478 ;;		_EUSART_Initialize
 13479 ;; This function uses a non-reentrant model
 13480 ;;
 13481                           
 13482                           
 13483                           ;psect for function _EUSART_SetFramingErrorHandler
 13484  179C                     _EUSART_SetFramingErrorHandler:	
 13485                           
 13486                           ;mcc_generated_files/eusart.c: 273:     EUSART_FramingErrorHandler = interruptHandler;
 13487                           
 13488                           ;incstack = 0
 13489                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
 13490  179C  0020               	movlb	0	; select bank0
 13491  179D  0821               	movf	EUSART_SetFramingErrorHandler@interruptHandler+1,w
 13492  179E  0023               	movlb	3	; select bank3
 13493  179F  00DA               	movwf	(_EUSART_FramingErrorHandler+1)^(0+384)
 13494  17A0  0020               	movlb	0	; select bank0
 13495  17A1  0820               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
 13496  17A2  0023               	movlb	3	; select bank3
 13497  17A3  00D9               	movwf	_EUSART_FramingErrorHandler^(0+384)
 13498  17A4  0008               	return
 13499  17A5                     __end_of_EUSART_SetFramingErrorHandler:	
 13500                           
 13501                           	psect	text62
 13502  1793                     __ptext62:	
 13503 ;; *************** function _EUSART_SetErrorHandler *****************
 13504 ;; Defined at:
 13505 ;;		line 280 in file "mcc_generated_files/eusart.c"
 13506 ;; Parameters:    Size  Location     Type
 13507 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
 13508 ;;		 -> EUSART_DefaultErrorHandler(1), 
 13509 ;; Auto vars:     Size  Location     Type
 13510 ;;		None
 13511 ;; Return value:  Size  Location     Type
 13512 ;;                  1    wreg      void 
 13513 ;; Registers used:
 13514 ;;		wreg
 13515 ;; Tracked objects:
 13516 ;;		On entry : 0/0
 13517 ;;		On exit  : 0/0
 13518 ;;		Unchanged: 0/0
 13519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13520 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13521 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13522 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13523 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13524 ;;Total ram usage:        2 bytes
 13525 ;; Hardware stack levels used:    1
 13526 ;; Hardware stack levels required when called:    5
 13527 ;; This function calls:
 13528 ;;		Nothing
 13529 ;; This function is called by:
 13530 ;;		_EUSART_Initialize
 13531 ;; This function uses a non-reentrant model
 13532 ;;
 13533                           
 13534                           
 13535                           ;psect for function _EUSART_SetErrorHandler
 13536  1793                     _EUSART_SetErrorHandler:	
 13537                           
 13538                           ;mcc_generated_files/eusart.c: 281:     EUSART_ErrorHandler = interruptHandler;
 13539                           
 13540                           ;incstack = 0
 13541                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
 13542  1793  0020               	movlb	0	; select bank0
 13543  1794  0821               	movf	EUSART_SetErrorHandler@interruptHandler+1,w
 13544  1795  0023               	movlb	3	; select bank3
 13545  1796  00D6               	movwf	(_EUSART_ErrorHandler+1)^(0+384)
 13546  1797  0020               	movlb	0	; select bank0
 13547  1798  0820               	movf	EUSART_SetErrorHandler@interruptHandler,w
 13548  1799  0023               	movlb	3	; select bank3
 13549  179A  00D5               	movwf	_EUSART_ErrorHandler^(0+384)
 13550  179B  0008               	return
 13551  179C                     __end_of_EUSART_SetErrorHandler:	
 13552                           
 13553                           	psect	text63
 13554  176B                     __ptext63:	
 13555 ;; *************** function _ADC_Initialize *****************
 13556 ;; Defined at:
 13557 ;;		line 65 in file "mcc_generated_files/adc.c"
 13558 ;; Parameters:    Size  Location     Type
 13559 ;;		None
 13560 ;; Auto vars:     Size  Location     Type
 13561 ;;		None
 13562 ;; Return value:  Size  Location     Type
 13563 ;;                  1    wreg      void 
 13564 ;; Registers used:
 13565 ;;		wreg, status,2
 13566 ;; Tracked objects:
 13567 ;;		On entry : 0/0
 13568 ;;		On exit  : 0/0
 13569 ;;		Unchanged: 0/0
 13570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13572 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13573 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13574 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13575 ;;Total ram usage:        0 bytes
 13576 ;; Hardware stack levels used:    1
 13577 ;; Hardware stack levels required when called:    5
 13578 ;; This function calls:
 13579 ;;		Nothing
 13580 ;; This function is called by:
 13581 ;;		_SYSTEM_Initialize
 13582 ;; This function uses a non-reentrant model
 13583 ;;
 13584                           
 13585                           
 13586                           ;psect for function _ADC_Initialize
 13587  176B                     _ADC_Initialize:	
 13588                           
 13589                           ;mcc_generated_files/adc.c: 70:     ADCON0 = 0x01;
 13590                           
 13591                           ;incstack = 0
 13592                           ; Regs used in _ADC_Initialize: [wreg+status,2]
 13593  176B  3001               	movlw	1
 13594  176C  0021               	movlb	1	; select bank1
 13595  176D  009D               	movwf	29	;volatile
 13596                           
 13597                           ;mcc_generated_files/adc.c: 73:     ADCON1 = 0x00;
 13598  176E  019E               	clrf	30	;volatile
 13599                           
 13600                           ;mcc_generated_files/adc.c: 76:     ADACT = 0x00;
 13601  176F  019F               	clrf	31	;volatile
 13602                           
 13603                           ;mcc_generated_files/adc.c: 79:     ADRESL = 0x00;
 13604  1770  019B               	clrf	27	;volatile
 13605                           
 13606                           ;mcc_generated_files/adc.c: 82:     ADRESH = 0x00;
 13607  1771  019C               	clrf	28	;volatile
 13608  1772  0008               	return
 13609  1773                     __end_of_ADC_Initialize:	
 13610                           
 13611                           	psect	text64
 13612  081F                     __ptext64:	
 13613 ;; *************** function _PIR_Sensor *****************
 13614 ;; Defined at:
 13615 ;;		line 584 in file "main.c"
 13616 ;; Parameters:    Size  Location     Type
 13617 ;;		None
 13618 ;; Auto vars:     Size  Location     Type
 13619 ;;		None
 13620 ;; Return value:  Size  Location     Type
 13621 ;;                  1    wreg      _Bool 
 13622 ;; Registers used:
 13623 ;;		wreg, status,2
 13624 ;; Tracked objects:
 13625 ;;		On entry : 0/0
 13626 ;;		On exit  : 0/0
 13627 ;;		Unchanged: 0/0
 13628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13629 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13630 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13631 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13632 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13633 ;;Total ram usage:        0 bytes
 13634 ;; Hardware stack levels used:    1
 13635 ;; Hardware stack levels required when called:    5
 13636 ;; This function calls:
 13637 ;;		Nothing
 13638 ;; This function is called by:
 13639 ;;		_main
 13640 ;; This function uses a non-reentrant model
 13641 ;;
 13642                           
 13643                           
 13644                           ;psect for function _PIR_Sensor
 13645  081F                     _PIR_Sensor:	
 13646                           
 13647                           ;main.c: 586:     if(PORTCbits.RC3 >= 1){
 13648                           
 13649                           ;incstack = 0
 13650                           ; Regs used in _PIR_Sensor: [wreg+status,2]
 13651  081F  0020               	movlb	0	; select bank0
 13652  0820  1D8E               	btfss	14,3	;volatile
 13653  0821  2829               	goto	l7374
 13654                           
 13655                           ;main.c: 587:         prox = 1;
 13656  0822  3001               	movlw	1
 13657  0823  0021               	movlb	1	; select bank1
 13658  0824  00E0               	movwf	_prox^(0+128)
 13659  0825  3000               	movlw	0
 13660  0826  00E1               	movwf	(_prox^(0+128)+1)
 13661                           
 13662                           ;main.c: 588:         return 1;
 13663  0827  3001               	movlw	1
 13664  0828  0008               	return
 13665  0829                     l7374:	
 13666                           
 13667                           ;main.c: 591:         prox = 0;
 13668  0829  0021               	movlb	1	; select bank1
 13669  082A  01E0               	clrf	_prox^(0+128)
 13670  082B  01E1               	clrf	(_prox+1)^(0+128)
 13671                           
 13672                           ;main.c: 592:         return 0;
 13673  082C  3000               	movlw	0
 13674  082D  0008               	return
 13675  082E                     __end_of_PIR_Sensor:	
 13676                           
 13677                           	psect	text65
 13678  06FA                     __ptext65:	
 13679 ;; *************** function _Get_ADC *****************
 13680 ;; Defined at:
 13681 ;;		line 513 in file "main.c"
 13682 ;; Parameters:    Size  Location     Type
 13683 ;;		None
 13684 ;; Auto vars:     Size  Location     Type
 13685 ;;  val             2   15[BANK0 ] int 
 13686 ;; Return value:  Size  Location     Type
 13687 ;;                  1    wreg      void 
 13688 ;; Registers used:
 13689 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13690 ;; Tracked objects:
 13691 ;;		On entry : 0/0
 13692 ;;		On exit  : 0/0
 13693 ;;		Unchanged: 0/0
 13694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13696 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13697 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13698 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13699 ;;Total ram usage:        5 bytes
 13700 ;; Hardware stack levels used:    1
 13701 ;; Hardware stack levels required when called:    8
 13702 ;; This function calls:
 13703 ;;		_ADC_GetConversion
 13704 ;;		_Display_Name
 13705 ;; This function is called by:
 13706 ;;		_main
 13707 ;; This function uses a non-reentrant model
 13708 ;;
 13709                           
 13710                           
 13711                           ;psect for function _Get_ADC
 13712  06FA                     _Get_ADC:	
 13713                           
 13714                           ;main.c: 514:     adcResult = ADC_GetConversion(BTN) >> 6;
 13715                           
 13716                           ;incstack = 0
 13717                           ; Regs used in _Get_ADC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13718  06FA  3017               	movlw	23
 13719  06FB  3189  2170  3186   	fcall	_ADC_GetConversion
 13720  06FE  0020               	movlb	0	; select bank0
 13721  06FF  0820               	movf	?_ADC_GetConversion,w
 13722  0700  00AC               	movwf	??_Get_ADC
 13723  0701  0821               	movf	?_ADC_GetConversion+1,w
 13724  0702  00AD               	movwf	??_Get_ADC+1
 13725  0703  3006               	movlw	6
 13726  0704                     u6675:	
 13727  0704  36AD               	lsrf	??_Get_ADC+1,f
 13728  0705  0CAC               	rrf	??_Get_ADC,f
 13729  0706  0B89               	decfsz	9,f
 13730  0707  2F04               	goto	u6675
 13731  0708  082C               	movf	??_Get_ADC,w
 13732  0709  00AE               	movwf	??_Get_ADC+2
 13733  070A  082E               	movf	??_Get_ADC+2,w
 13734  070B  00EC               	movwf	_adcResult
 13735                           
 13736                           ;main.c: 515:     int val = adcResult;
 13737  070C  086C               	movf	_adcResult,w
 13738  070D  00AC               	movwf	??_Get_ADC
 13739  070E  01AD               	clrf	??_Get_ADC+1
 13740  070F  082C               	movf	??_Get_ADC,w
 13741  0710  00AF               	movwf	Get_ADC@val
 13742  0711  082D               	movf	??_Get_ADC+1,w
 13743  0712  00B0               	movwf	Get_ADC@val+1
 13744                           
 13745                           ;main.c: 527:     if(val >= 230 && val <= 239) {
 13746  0713  0830               	movf	Get_ADC@val+1,w
 13747  0714  3A80               	xorlw	128
 13748  0715  00AC               	movwf	??_Get_ADC
 13749  0716  3080               	movlw	128
 13750  0717  022C               	subwf	??_Get_ADC,w
 13751  0718  1D03               	skipz
 13752  0719  2F1C               	goto	u6685
 13753  071A  30E6               	movlw	230
 13754  071B  022F               	subwf	Get_ADC@val,w
 13755  071C                     u6685:	
 13756  071C  1C03               	skipc
 13757  071D  2F2A               	goto	l7616
 13758  071E  0020               	movlb	0	; select bank0
 13759  071F  0830               	movf	Get_ADC@val+1,w
 13760  0720  3A80               	xorlw	128
 13761  0721  00AC               	movwf	??_Get_ADC
 13762  0722  3080               	movlw	128
 13763  0723  022C               	subwf	??_Get_ADC,w
 13764  0724  1D03               	skipz
 13765  0725  2F28               	goto	u6695
 13766  0726  30F0               	movlw	240
 13767  0727  022F               	subwf	Get_ADC@val,w
 13768  0728                     u6695:	
 13769  0728  1C03               	btfss	3,0
 13770  0729  2FE7               	goto	l7664
 13771  072A                     l7616:	
 13772                           ;main.c: 529:     }
 13773                           
 13774  072A  0020               	movlb	0	; select bank0
 13775  072B  0830               	movf	Get_ADC@val+1,w
 13776  072C  3A80               	xorlw	128
 13777  072D  00AC               	movwf	??_Get_ADC
 13778  072E  3080               	movlw	128
 13779  072F  022C               	subwf	??_Get_ADC,w
 13780  0730  1D03               	skipz
 13781  0731  2F34               	goto	u6705
 13782  0732  30C8               	movlw	200
 13783  0733  022F               	subwf	Get_ADC@val,w
 13784  0734                     u6705:	
 13785  0734  1C03               	skipc
 13786  0735  2F60               	goto	l7624
 13787  0736  0020               	movlb	0	; select bank0
 13788  0737  0830               	movf	Get_ADC@val+1,w
 13789  0738  3A80               	xorlw	128
 13790  0739  00AC               	movwf	??_Get_ADC
 13791  073A  3080               	movlw	128
 13792  073B  022C               	subwf	??_Get_ADC,w
 13793  073C  1D03               	skipz
 13794  073D  2F40               	goto	u6715
 13795  073E  30D3               	movlw	211
 13796  073F  022F               	subwf	Get_ADC@val,w
 13797  0740                     u6715:	
 13798  0740  1803               	skipnc
 13799  0741  2F60               	goto	l7624
 13800                           
 13801                           ;main.c: 531:         brightness++;
 13802  0742  3001               	movlw	1
 13803  0743  0020               	movlb	0	; select bank0
 13804  0744  07DE               	addwf	_brightness,f
 13805  0745  3000               	movlw	0
 13806  0746  3DDF               	addwfc	_brightness+1,f
 13807                           
 13808                           ;main.c: 532:         if(brightness > 7) {
 13809  0747  085F               	movf	_brightness+1,w
 13810  0748  3A80               	xorlw	128
 13811  0749  00AC               	movwf	??_Get_ADC
 13812  074A  3080               	movlw	128
 13813  074B  022C               	subwf	??_Get_ADC,w
 13814  074C  3008               	movlw	8
 13815  074D  1903               	btfsc	3,2
 13816  074E  025E               	subwf	_brightness,w
 13817  074F  1C03               	skipc
 13818  0750  2F56               	goto	l840
 13819                           
 13820                           ;main.c: 533:            brightness = 7;
 13821  0751  3007               	movlw	7
 13822  0752  0020               	movlb	0	; select bank0
 13823  0753  00DE               	movwf	_brightness
 13824  0754  3000               	movlw	0
 13825  0755  00DF               	movwf	_brightness+1
 13826  0756                     l840:	
 13827                           ;main.c: 534:         }
 13828                           
 13829                           
 13830                           ;main.c: 535:         _delay((unsigned long)((200)*(500000/4000.0)));
 13831  0756  3021               	movlw	33
 13832  0757  0020               	movlb	0	; select bank0
 13833  0758  00AC               	movwf	??_Get_ADC
 13834  0759  3076               	movlw	118
 13835  075A                     u7057:	
 13836  075A  0B89               	decfsz	9,f
 13837  075B  2F5A               	goto	u7057
 13838  075C  0BAC               	decfsz	??_Get_ADC,f
 13839  075D  2F5A               	goto	u7057
 13840  075E  0000               	nop
 13841                           
 13842                           ;main.c: 536:     }
 13843  075F  2FE7               	goto	l7664
 13844  0760                     l7624:	
 13845  0760  0020               	movlb	0	; select bank0
 13846  0761  0830               	movf	Get_ADC@val+1,w
 13847  0762  3A80               	xorlw	128
 13848  0763  00AC               	movwf	??_Get_ADC
 13849  0764  3080               	movlw	128
 13850  0765  022C               	subwf	??_Get_ADC,w
 13851  0766  1D03               	skipz
 13852  0767  2F6A               	goto	u6735
 13853  0768  30B4               	movlw	180
 13854  0769  022F               	subwf	Get_ADC@val,w
 13855  076A                     u6735:	
 13856  076A  1C03               	skipc
 13857  076B  2F8D               	goto	l7638
 13858  076C  0020               	movlb	0	; select bank0
 13859  076D  0830               	movf	Get_ADC@val+1,w
 13860  076E  3A80               	xorlw	128
 13861  076F  00AC               	movwf	??_Get_ADC
 13862  0770  3080               	movlw	128
 13863  0771  022C               	subwf	??_Get_ADC,w
 13864  0772  1D03               	skipz
 13865  0773  2F76               	goto	u6745
 13866  0774  30BF               	movlw	191
 13867  0775  022F               	subwf	Get_ADC@val,w
 13868  0776                     u6745:	
 13869  0776  1803               	skipnc
 13870  0777  2F8D               	goto	l7638
 13871                           
 13872                           ;main.c: 538:         printed = 0;
 13873  0778  0020               	movlb	0	; select bank0
 13874  0779  01ED               	clrf	_printed
 13875                           
 13876                           ;main.c: 539:         --name;
 13877  077A  30FF               	movlw	255
 13878  077B  07E0               	addwf	_name,f
 13879  077C  30FF               	movlw	255
 13880  077D  3DE1               	addwfc	_name+1,f
 13881                           
 13882                           ;main.c: 540:         if(name < 0) {
 13883  077E  1FE1               	btfss	_name+1,7
 13884  077F  2F84               	goto	l7636
 13885                           
 13886                           ;main.c: 541:             name = 3;
 13887  0780  3003               	movlw	3
 13888  0781  00E0               	movwf	_name
 13889  0782  3000               	movlw	0
 13890  0783  00E1               	movwf	_name+1
 13891  0784                     l7636:	
 13892                           
 13893                           ;main.c: 543:         Display_Name(names[name]);
 13894  0784  3560               	lslf	_name,w
 13895  0785  3E60               	addlw	(low (_names| (0+256)))& (0+255)
 13896  0786  0086               	movwf	6
 13897  0787  3001               	movlw	1	; select bank2/3
 13898  0788  0087               	movwf	7
 13899  0789  3F40               	moviw [0]fsr1
 13900  078A  00A5               	movwf	Display_Name@string1
 13901  078B  3F41               	moviw [1]fsr1
 13902  078C  2FE4               	goto	L9
 13903  078D                     l7638:	
 13904                           ;main.c: 544:     }
 13905                           
 13906  078D  0020               	movlb	0	; select bank0
 13907  078E  0830               	movf	Get_ADC@val+1,w
 13908  078F  3A80               	xorlw	128
 13909  0790  00AC               	movwf	??_Get_ADC
 13910  0791  3080               	movlw	128
 13911  0792  022C               	subwf	??_Get_ADC,w
 13912  0793  1D03               	skipz
 13913  0794  2F97               	goto	u6765
 13914  0795  3096               	movlw	150
 13915  0796  022F               	subwf	Get_ADC@val,w
 13916  0797                     u6765:	
 13917  0797  1C03               	skipc
 13918  0798  2FAF               	goto	l7650
 13919  0799  0020               	movlb	0	; select bank0
 13920  079A  0830               	movf	Get_ADC@val+1,w
 13921  079B  3A80               	xorlw	128
 13922  079C  00AC               	movwf	??_Get_ADC
 13923  079D  3080               	movlw	128
 13924  079E  022C               	subwf	??_Get_ADC,w
 13925  079F  1D03               	skipz
 13926  07A0  2FA3               	goto	u6775
 13927  07A1  30A1               	movlw	161
 13928  07A2  022F               	subwf	Get_ADC@val,w
 13929  07A3                     u6775:	
 13930  07A3  1803               	skipnc
 13931  07A4  2FAF               	goto	l7650
 13932                           
 13933                           ;main.c: 546:         --brightness;
 13934  07A5  30FF               	movlw	255
 13935  07A6  0020               	movlb	0	; select bank0
 13936  07A7  07DE               	addwf	_brightness,f
 13937  07A8  30FF               	movlw	255
 13938  07A9  3DDF               	addwfc	_brightness+1,f
 13939                           
 13940                           ;main.c: 547:         if(brightness < 0) {
 13941  07AA  1FDF               	btfss	_brightness+1,7
 13942  07AB  2F56               	goto	l840
 13943                           
 13944                           ;main.c: 548:             brightness = 0;
 13945  07AC  01DE               	clrf	_brightness
 13946  07AD  01DF               	clrf	_brightness+1
 13947  07AE  2F56               	goto	l840
 13948  07AF                     l7650:	
 13949  07AF  0020               	movlb	0	; select bank0
 13950  07B0  0830               	movf	Get_ADC@val+1,w
 13951  07B1  3A80               	xorlw	128
 13952  07B2  00AC               	movwf	??_Get_ADC
 13953  07B3  3080               	movlw	128
 13954  07B4  022C               	subwf	??_Get_ADC,w
 13955  07B5  1D03               	skipz
 13956  07B6  2FB9               	goto	u6795
 13957  07B7  3014               	movlw	20
 13958  07B8  022F               	subwf	Get_ADC@val,w
 13959  07B9                     u6795:	
 13960  07B9  1C03               	skipc
 13961  07BA  2FE7               	goto	l7664
 13962  07BB  0020               	movlb	0	; select bank0
 13963  07BC  0830               	movf	Get_ADC@val+1,w
 13964  07BD  3A80               	xorlw	128
 13965  07BE  00AC               	movwf	??_Get_ADC
 13966  07BF  3080               	movlw	128
 13967  07C0  022C               	subwf	??_Get_ADC,w
 13968  07C1  1D03               	skipz
 13969  07C2  2FC5               	goto	u6805
 13970  07C3  3018               	movlw	24
 13971  07C4  022F               	subwf	Get_ADC@val,w
 13972  07C5                     u6805:	
 13973  07C5  1803               	skipnc
 13974  07C6  2FE7               	goto	l7664
 13975                           
 13976                           ;main.c: 553:         printed = 0;
 13977  07C7  0020               	movlb	0	; select bank0
 13978  07C8  01ED               	clrf	_printed
 13979                           
 13980                           ;main.c: 554:         name++;
 13981  07C9  3001               	movlw	1
 13982  07CA  07E0               	addwf	_name,f
 13983  07CB  3000               	movlw	0
 13984  07CC  3DE1               	addwfc	_name+1,f
 13985                           
 13986                           ;main.c: 555:         if(name > 3) {
 13987  07CD  0861               	movf	_name+1,w
 13988  07CE  3A80               	xorlw	128
 13989  07CF  00AC               	movwf	??_Get_ADC
 13990  07D0  3080               	movlw	128
 13991  07D1  022C               	subwf	??_Get_ADC,w
 13992  07D2  1D03               	skipz
 13993  07D3  2FD6               	goto	u6815
 13994  07D4  3004               	movlw	4
 13995  07D5  0260               	subwf	_name,w
 13996  07D6                     u6815:	
 13997  07D6  1C03               	skipc
 13998  07D7  2FDB               	goto	l7662
 13999                           
 14000                           ;main.c: 556:            name = 0;
 14001  07D8  0020               	movlb	0	; select bank0
 14002  07D9  01E0               	clrf	_name
 14003  07DA  01E1               	clrf	_name+1
 14004  07DB                     l7662:	
 14005                           
 14006                           ;main.c: 558:         Display_Name(names[name]);
 14007  07DB  0020               	movlb	0	; select bank0
 14008  07DC  3560               	lslf	_name,w
 14009  07DD  3E60               	addlw	(low (_names| (0+256)))& (0+255)
 14010  07DE  0086               	movwf	6
 14011  07DF  3001               	movlw	1	; select bank2/3
 14012  07E0  0087               	movwf	7
 14013  07E1  3F40               	moviw [0]fsr1
 14014  07E2  00A5               	movwf	Display_Name@string1
 14015  07E3  3F41               	moviw [1]fsr1
 14016  07E4                     L9:	
 14017  07E4  00A6               	movwf	Display_Name@string1+1
 14018  07E5  318C  2435         	fcall	_Display_Name
 14019  07E7                     l7664:	
 14020                           
 14021                           ;main.c: 560:     adcResult = 0;
 14022  07E7  0020               	movlb	0	; select bank0
 14023  07E8  01EC               	clrf	_adcResult
 14024  07E9  0008               	return
 14025  07EA                     __end_of_Get_ADC:	
 14026                           
 14027                           	psect	text66
 14028  0C35                     __ptext66:	
 14029 ;; *************** function _Display_Name *****************
 14030 ;; Defined at:
 14031 ;;		line 487 in file "main.c"
 14032 ;; Parameters:    Size  Location     Type
 14033 ;;  string1         2    5[BANK0 ] PTR unsigned char 
 14034 ;;		 -> STR_4(11), STR_3(16), STR_2(13), STR_1(12), 
 14035 ;; Auto vars:     Size  Location     Type
 14036 ;;  i               2   10[BANK0 ] int 
 14037 ;;  length          2    8[BANK0 ] int 
 14038 ;; Return value:  Size  Location     Type
 14039 ;;                  1    wreg      void 
 14040 ;; Registers used:
 14041 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 14042 ;; Tracked objects:
 14043 ;;		On entry : 0/0
 14044 ;;		On exit  : 0/0
 14045 ;;		Unchanged: 0/0
 14046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14047 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14048 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14049 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14050 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14051 ;;Total ram usage:        7 bytes
 14052 ;; Hardware stack levels used:    1
 14053 ;; Hardware stack levels required when called:    7
 14054 ;; This function calls:
 14055 ;;		_SPI_Write
 14056 ;;		_strlen
 14057 ;; This function is called by:
 14058 ;;		_main
 14059 ;;		_handleGesture
 14060 ;;		_Get_ADC
 14061 ;; This function uses a non-reentrant model
 14062 ;;
 14063                           
 14064                           
 14065                           ;psect for function _Display_Name
 14066  0C35                     _Display_Name:	
 14067                           
 14068                           ;main.c: 488:     int length;;main.c: 489:     int i;;main.c: 490:     SPI_Write(0xFE);
 14069                           
 14070                           ;incstack = 0
 14071                           ; Regs used in _Display_Name: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 14072  0C35  30FE               	movlw	254
 14073  0C36  3187  27EA  318C   	fcall	_SPI_Write
 14074                           
 14075                           ;main.c: 491:     _delay((unsigned long)((100)*(500000/4000.0)));
 14076  0C39  3011               	movlw	17
 14077  0C3A  0020               	movlb	0	; select bank0
 14078  0C3B  00A7               	movwf	??_Display_Name
 14079  0C3C  303A               	movlw	58
 14080  0C3D                     u7067:	
 14081  0C3D  0B89               	decfsz	9,f
 14082  0C3E  2C3D               	goto	u7067
 14083  0C3F  0BA7               	decfsz	??_Display_Name,f
 14084  0C40  2C3D               	goto	u7067
 14085  0C41  0000               	nop
 14086                           
 14087                           ;main.c: 492:     SPI_Write(0x51);
 14088  0C42  3051               	movlw	81
 14089  0C43  3187  27EA  318C   	fcall	_SPI_Write
 14090                           
 14091                           ;main.c: 493:     length = strlen(string1);
 14092  0C46  0020               	movlb	0	; select bank0
 14093  0C47  0826               	movf	Display_Name@string1+1,w
 14094  0C48  00A1               	movwf	strlen@s+1
 14095  0C49  0825               	movf	Display_Name@string1,w
 14096  0C4A  00A0               	movwf	strlen@s
 14097  0C4B  3188  20CC  318C   	fcall	_strlen
 14098  0C4E  0020               	movlb	0	; select bank0
 14099  0C4F  0821               	movf	?_strlen+1,w
 14100  0C50  00A9               	movwf	Display_Name@length+1
 14101  0C51  0820               	movf	?_strlen,w
 14102  0C52  00A8               	movwf	Display_Name@length
 14103                           
 14104                           ;main.c: 494:     for(i = 0; i < length; i++){
 14105  0C53  01AA               	clrf	Display_Name@i
 14106  0C54  01AB               	clrf	Display_Name@i+1
 14107  0C55                     l7024:	
 14108  0C55  082B               	movf	Display_Name@i+1,w
 14109  0C56  3A80               	xorlw	128
 14110  0C57  00A7               	movwf	??_Display_Name
 14111  0C58  0829               	movf	Display_Name@length+1,w
 14112  0C59  3A80               	xorlw	128
 14113  0C5A  0227               	subwf	??_Display_Name,w
 14114  0C5B  1D03               	skipz
 14115  0C5C  2C5F               	goto	u5985
 14116  0C5D  0828               	movf	Display_Name@length,w
 14117  0C5E  022A               	subwf	Display_Name@i,w
 14118  0C5F                     u5985:	
 14119  0C5F  1803               	btfsc	3,0
 14120  0C60  2C72               	goto	l827
 14121                           
 14122                           ;main.c: 495:         SPI_Write(string1[i]);
 14123  0C61  0020               	movlb	0	; select bank0
 14124  0C62  0825               	movf	Display_Name@string1,w
 14125  0C63  072A               	addwf	Display_Name@i,w
 14126  0C64  0084               	movwf	4
 14127  0C65  0826               	movf	Display_Name@string1+1,w
 14128  0C66  3D2B               	addwfc	Display_Name@i+1,w
 14129  0C67  0085               	movwf	5
 14130  0C68  0800               	movf	0,w	;code access
 14131  0C69  3187  27EA  318C   	fcall	_SPI_Write
 14132                           
 14133                           ;main.c: 496:     }
 14134  0C6C  3001               	movlw	1
 14135  0C6D  0020               	movlb	0	; select bank0
 14136  0C6E  07AA               	addwf	Display_Name@i,f
 14137  0C6F  3000               	movlw	0
 14138  0C70  3DAB               	addwfc	Display_Name@i+1,f
 14139  0C71  2C55               	goto	l7024
 14140  0C72                     l827:	
 14141                           
 14142                           ;main.c: 497:     printed = 1;
 14143  0C72  0020               	movlb	0	; select bank0
 14144  0C73  01ED               	clrf	_printed
 14145  0C74  0AED               	incf	_printed,f
 14146  0C75  0008               	return
 14147  0C76                     __end_of_Display_Name:	
 14148                           
 14149                           	psect	text67
 14150  08CC                     __ptext67:	
 14151 ;; *************** function _strlen *****************
 14152 ;; Defined at:
 14153 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
 14154 ;; Parameters:    Size  Location     Type
 14155 ;;  s               2    0[BANK0 ] PTR const unsigned char 
 14156 ;;		 -> UART_Byte@bits(4), STR_4(11), STR_3(16), STR_2(13), 
 14157 ;;		 -> STR_1(12), 
 14158 ;; Auto vars:     Size  Location     Type
 14159 ;;  a               2    3[BANK0 ] PTR const unsigned char 
 14160 ;;		 -> UART_Byte@bits(4), STR_4(11), STR_3(16), STR_2(13), 
 14161 ;;		 -> STR_1(12), 
 14162 ;; Return value:  Size  Location     Type
 14163 ;;                  2    0[BANK0 ] unsigned int 
 14164 ;; Registers used:
 14165 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 14166 ;; Tracked objects:
 14167 ;;		On entry : 0/0
 14168 ;;		On exit  : 0/0
 14169 ;;		Unchanged: 0/0
 14170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14171 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14172 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14173 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14174 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14175 ;;Total ram usage:        5 bytes
 14176 ;; Hardware stack levels used:    1
 14177 ;; Hardware stack levels required when called:    5
 14178 ;; This function calls:
 14179 ;;		Nothing
 14180 ;; This function is called by:
 14181 ;;		_Display_Name
 14182 ;;		_UART_Byte
 14183 ;; This function uses a non-reentrant model
 14184 ;;
 14185                           
 14186                           
 14187                           ;psect for function _strlen
 14188  08CC                     _strlen:	
 14189                           
 14190                           ;incstack = 0
 14191                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0]
 14192  08CC  0020               	movlb	0	; select bank0
 14193  08CD  0821               	movf	strlen@s+1,w
 14194  08CE  00A4               	movwf	strlen@a+1
 14195  08CF  0820               	movf	strlen@s,w
 14196  08D0  00A3               	movwf	strlen@a
 14197  08D1                     l6510:	
 14198  08D1  0820               	movf	strlen@s,w
 14199  08D2  0084               	movwf	4
 14200  08D3  0821               	movf	strlen@s+1,w
 14201  08D4  0085               	movwf	5
 14202  08D5  0012               	moviw fsr0++
 14203  08D6  1903               	btfsc	3,2
 14204  08D7  28DD               	goto	l6512
 14205  08D8  3001               	movlw	1
 14206  08D9  07A0               	addwf	strlen@s,f
 14207  08DA  3000               	movlw	0
 14208  08DB  3DA1               	addwfc	strlen@s+1,f
 14209  08DC  28D1               	goto	l6510
 14210  08DD                     l6512:	
 14211  08DD  0823               	movf	strlen@a,w
 14212  08DE  0220               	subwf	strlen@s,w
 14213  08DF  00A0               	movwf	?_strlen
 14214  08E0  0824               	movf	strlen@a+1,w
 14215  08E1  3B21               	subwfb	strlen@s+1,w
 14216  08E2  00A1               	movwf	?_strlen+1
 14217  08E3  0008               	return
 14218  08E4                     __end_of_strlen:	
 14219                           
 14220                           	psect	text68
 14221  0970                     __ptext68:	
 14222 ;; *************** function _ADC_GetConversion *****************
 14223 ;; Defined at:
 14224 ;;		line 113 in file "mcc_generated_files/adc.c"
 14225 ;; Parameters:    Size  Location     Type
 14226 ;;  channel         1    wreg     enum E6648
 14227 ;; Auto vars:     Size  Location     Type
 14228 ;;  channel         1    3[BANK0 ] enum E6648
 14229 ;; Return value:  Size  Location     Type
 14230 ;;                  2    0[BANK0 ] unsigned short 
 14231 ;; Registers used:
 14232 ;;		wreg, status,2, status,0
 14233 ;; Tracked objects:
 14234 ;;		On entry : 0/0
 14235 ;;		On exit  : 0/0
 14236 ;;		Unchanged: 0/0
 14237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14238 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14239 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14240 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14241 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14242 ;;Total ram usage:        4 bytes
 14243 ;; Hardware stack levels used:    1
 14244 ;; Hardware stack levels required when called:    5
 14245 ;; This function calls:
 14246 ;;		Nothing
 14247 ;; This function is called by:
 14248 ;;		_Get_ADC
 14249 ;;		_On_Off
 14250 ;; This function uses a non-reentrant model
 14251 ;;
 14252                           
 14253                           
 14254                           ;psect for function _ADC_GetConversion
 14255  0970                     _ADC_GetConversion:	
 14256                           
 14257                           ;incstack = 0
 14258                           ; Regs used in _ADC_GetConversion: [wreg+status,2+status,0]
 14259                           ;ADC_GetConversion@channel stored from wreg
 14260  0970  0020               	movlb	0	; select bank0
 14261  0971  00A3               	movwf	ADC_GetConversion@channel
 14262                           
 14263                           ;mcc_generated_files/adc.c: 113: adc_result_t ADC_GetConversion(adc_channel_t channel);m
      +                          cc_generated_files/adc.c: 114: {;mcc_generated_files/adc.c: 116:     ADCON0bits.CHS = ch
      +                          annel;
 14264  0972  0823               	movf	ADC_GetConversion@channel,w
 14265  0973  00A2               	movwf	??_ADC_GetConversion
 14266  0974  0DA2               	rlf	??_ADC_GetConversion,f
 14267  0975  0DA2               	rlf	??_ADC_GetConversion,f
 14268  0976  0021               	movlb	1	; select bank1
 14269  0977  081D               	movf	29,w	;volatile
 14270  0978  0020               	movlb	0	; select bank0
 14271  0979  0622               	xorwf	??_ADC_GetConversion,w
 14272  097A  3903               	andlw	-253
 14273  097B  0622               	xorwf	??_ADC_GetConversion,w
 14274  097C  0021               	movlb	1	; select bank1
 14275  097D  009D               	movwf	29	;volatile
 14276                           
 14277                           ;mcc_generated_files/adc.c: 119:     ADCON0bits.ADON = 1;
 14278  097E  141D               	bsf	29,0	;volatile
 14279                           
 14280                           ;mcc_generated_files/adc.c: 125:     ADCON0bits.ADGO = 1;
 14281                           
 14282                           ;mcc_generated_files/adc.c: 122:     _delay((unsigned long)((5)*(500000/4000000.0)));
 14283  097F  0021               	movlb	1	; select bank1
 14284  0980  149D               	bsf	29,1	;volatile
 14285  0981                     l668:	
 14286                           ;mcc_generated_files/adc.c: 131:     }
 14287                           
 14288                           ;mcc_generated_files/adc.c: 128:     while (ADCON0bits.ADGO)
 14289                           
 14290                           
 14291                           ;mcc_generated_files/adc.c: 128:     while (ADCON0bits.ADGO)
 14292  0981  0021               	movlb	1	; select bank1
 14293  0982  1C9D               	btfss	29,1	;volatile
 14294  0983  2986               	goto	l7006
 14295  0984  0064               	clrwdt	;# 
 14296  0985  2981               	goto	l668
 14297  0986                     l7006:	
 14298                           
 14299                           ;mcc_generated_files/adc.c: 134:     return ((adc_result_t)((ADRESH << 8) + ADRESL));
 14300  0986  081C               	movf	28,w	;volatile
 14301  0987  0020               	movlb	0	; select bank0
 14302  0988  00A1               	movwf	?_ADC_GetConversion+1
 14303  0989  0021               	movlb	1	; select bank1
 14304  098A  081B               	movf	27,w	;volatile
 14305  098B  0020               	movlb	0	; select bank0
 14306  098C  00A0               	movwf	?_ADC_GetConversion
 14307  098D  0008               	return
 14308  098E                     __end_of_ADC_GetConversion:	
 14309                           
 14310                           	psect	text69
 14311  082E                     __ptext69:	
 14312 ;; *************** function _Display_Clear *****************
 14313 ;; Defined at:
 14314 ;;		line 500 in file "main.c"
 14315 ;; Parameters:    Size  Location     Type
 14316 ;;		None
 14317 ;; Auto vars:     Size  Location     Type
 14318 ;;		None
 14319 ;; Return value:  Size  Location     Type
 14320 ;;                  1    wreg      void 
 14321 ;; Registers used:
 14322 ;;		wreg, status,2, status,0, pclath, cstack
 14323 ;; Tracked objects:
 14324 ;;		On entry : 0/0
 14325 ;;		On exit  : 0/0
 14326 ;;		Unchanged: 0/0
 14327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14328 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14329 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14330 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14331 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14332 ;;Total ram usage:        1 bytes
 14333 ;; Hardware stack levels used:    1
 14334 ;; Hardware stack levels required when called:    7
 14335 ;; This function calls:
 14336 ;;		_SPI_Write
 14337 ;; This function is called by:
 14338 ;;		_main
 14339 ;;		_On_Off
 14340 ;; This function uses a non-reentrant model
 14341 ;;
 14342                           
 14343                           
 14344                           ;psect for function _Display_Clear
 14345  082E                     _Display_Clear:	
 14346                           
 14347                           ;main.c: 501:     SPI_Write(0xFE);
 14348                           
 14349                           ;incstack = 0
 14350                           ; Regs used in _Display_Clear: [wreg+status,2+status,0+pclath+cstack]
 14351  082E  30FE               	movlw	254
 14352  082F  3187  27EA  3188   	fcall	_SPI_Write
 14353                           
 14354                           ;main.c: 502:     _delay((unsigned long)((100)*(500000/4000.0)));
 14355  0832  3011               	movlw	17
 14356  0833  0020               	movlb	0	; select bank0
 14357  0834  00A3               	movwf	??_Display_Clear
 14358  0835  303A               	movlw	58
 14359  0836                     u7077:	
 14360  0836  0B89               	decfsz	9,f
 14361  0837  2836               	goto	u7077
 14362  0838  0BA3               	decfsz	??_Display_Clear,f
 14363  0839  2836               	goto	u7077
 14364  083A  0000               	nop
 14365                           
 14366                           ;main.c: 503:     SPI_Write(0x51);
 14367  083B  3051               	movlw	81
 14368  083C  3187  27EA         	fcall	_SPI_Write
 14369  083E  0008               	return
 14370  083F                     __end_of_Display_Clear:	
 14371                           
 14372                           	psect	text70
 14373  07EA                     __ptext70:	
 14374 ;; *************** function _SPI_Write *****************
 14375 ;; Defined at:
 14376 ;;		line 480 in file "main.c"
 14377 ;; Parameters:    Size  Location     Type
 14378 ;;  incoming        1    wreg     unsigned char 
 14379 ;; Auto vars:     Size  Location     Type
 14380 ;;  incoming        1    2[BANK0 ] unsigned char 
 14381 ;; Return value:  Size  Location     Type
 14382 ;;                  1    wreg      void 
 14383 ;; Registers used:
 14384 ;;		wreg, status,2, status,0, pclath, cstack
 14385 ;; Tracked objects:
 14386 ;;		On entry : 0/0
 14387 ;;		On exit  : 0/0
 14388 ;;		Unchanged: 0/0
 14389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14390 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14391 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14392 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14393 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14394 ;;Total ram usage:        2 bytes
 14395 ;; Hardware stack levels used:    1
 14396 ;; Hardware stack levels required when called:    6
 14397 ;; This function calls:
 14398 ;;		_SPI2_Exchange8bit
 14399 ;; This function is called by:
 14400 ;;		_Display_Name
 14401 ;;		_Display_Clear
 14402 ;; This function uses a non-reentrant model
 14403 ;;
 14404                           
 14405                           
 14406                           ;psect for function _SPI_Write
 14407  07EA                     _SPI_Write:	
 14408                           
 14409                           ;incstack = 0
 14410                           ; Regs used in _SPI_Write: [wreg+status,2+status,0+pclath+cstack]
 14411                           ;SPI_Write@incoming stored from wreg
 14412  07EA  0020               	movlb	0	; select bank0
 14413  07EB  00A2               	movwf	SPI_Write@incoming
 14414                           
 14415                           ;main.c: 481:     do { LATCbits.LATC0 = 0; } while(0);
 14416  07EC  0022               	movlb	2	; select bank2
 14417  07ED  100E               	bcf	14,0	;volatile
 14418                           
 14419                           ;main.c: 482:     SPI2_Exchange8bit(incoming);
 14420  07EE  0020               	movlb	0	; select bank0
 14421  07EF  0822               	movf	SPI_Write@incoming,w
 14422  07F0  3188  2010  3187   	fcall	_SPI2_Exchange8bit
 14423  07F3  0022               	movlb	2	; select bank2
 14424  07F4  140E               	bsf	14,0	;volatile
 14425                           
 14426                           ;main.c: 484:     _delay((unsigned long)((100)*(500000/4000.0)));
 14427  07F5  3011               	movlw	17
 14428  07F6  0020               	movlb	0	; select bank0
 14429  07F7  00A1               	movwf	??_SPI_Write
 14430  07F8  303A               	movlw	58
 14431  07F9                     u7087:	
 14432  07F9  0B89               	decfsz	9,f
 14433  07FA  2FF9               	goto	u7087
 14434  07FB  0BA1               	decfsz	??_SPI_Write,f
 14435  07FC  2FF9               	goto	u7087
 14436  07FD  0000               	nop
 14437  07FE  0008               	return
 14438  07FF                     __end_of_SPI_Write:	
 14439                           
 14440                           	psect	text71
 14441  0810                     __ptext71:	
 14442 ;; *************** function _SPI2_Exchange8bit *****************
 14443 ;; Defined at:
 14444 ;;		line 79 in file "mcc_generated_files/spi2.c"
 14445 ;; Parameters:    Size  Location     Type
 14446 ;;  data            1    wreg     unsigned char 
 14447 ;; Auto vars:     Size  Location     Type
 14448 ;;  data            1    0[BANK0 ] unsigned char 
 14449 ;; Return value:  Size  Location     Type
 14450 ;;                  1    wreg      unsigned char 
 14451 ;; Registers used:
 14452 ;;		wreg
 14453 ;; Tracked objects:
 14454 ;;		On entry : 0/0
 14455 ;;		On exit  : 0/0
 14456 ;;		Unchanged: 0/0
 14457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14458 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14459 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14460 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14461 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14462 ;;Total ram usage:        1 bytes
 14463 ;; Hardware stack levels used:    1
 14464 ;; Hardware stack levels required when called:    5
 14465 ;; This function calls:
 14466 ;;		Nothing
 14467 ;; This function is called by:
 14468 ;;		_SPI_Write
 14469 ;;		_SPI2_Exchange8bitBuffer
 14470 ;; This function uses a non-reentrant model
 14471 ;;
 14472                           
 14473                           
 14474                           ;psect for function _SPI2_Exchange8bit
 14475  0810                     _SPI2_Exchange8bit:	
 14476                           
 14477                           ;incstack = 0
 14478                           ; Regs used in _SPI2_Exchange8bit: [wreg]
 14479                           ;SPI2_Exchange8bit@data stored from wreg
 14480  0810  0020               	movlb	0	; select bank0
 14481  0811  00A0               	movwf	SPI2_Exchange8bit@data
 14482                           
 14483                           ;mcc_generated_files/spi2.c: 79: uint8_t SPI2_Exchange8bit(uint8_t data);mcc_generated_f
      +                          iles/spi2.c: 80: {;mcc_generated_files/spi2.c: 82:     SSP2CON1bits.WCOL = 0;
 14484  0812  0024               	movlb	4	; select bank4
 14485  0813  139D               	bcf	29,7	;volatile
 14486                           
 14487                           ;mcc_generated_files/spi2.c: 84:     SSP2BUF = data;
 14488  0814  0020               	movlb	0	; select bank0
 14489  0815  0820               	movf	SPI2_Exchange8bit@data,w
 14490  0816  0024               	movlb	4	; select bank4
 14491  0817  0099               	movwf	25	;volatile
 14492  0818                     l577:	
 14493                           ;mcc_generated_files/spi2.c: 89:     }
 14494                           
 14495                           ;mcc_generated_files/spi2.c: 86:     while(SSP2STATbits.BF == 0x0)
 14496                           
 14497                           
 14498                           ;mcc_generated_files/spi2.c: 86:     while(SSP2STATbits.BF == 0x0)
 14499  0818  0024               	movlb	4	; select bank4
 14500  0819  181C               	btfsc	28,0	;volatile
 14501  081A  281D               	goto	l6400
 14502  081B  0064               	clrwdt	;# 
 14503  081C  2818               	goto	l577
 14504  081D                     l6400:	
 14505                           
 14506                           ;mcc_generated_files/spi2.c: 91:     return (SSP2BUF);
 14507  081D  0819               	movf	25,w	;volatile
 14508  081E  0008               	return
 14509  081F                     __end_of_SPI2_Exchange8bit:	
 14510                           
 14511                           	psect	intentry
 14512  0004                     __pintentry:	
 14513 ;; *************** function _INTERRUPT_InterruptManager *****************
 14514 ;; Defined at:
 14515 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 14516 ;; Parameters:    Size  Location     Type
 14517 ;;		None
 14518 ;; Auto vars:     Size  Location     Type
 14519 ;;		None
 14520 ;; Return value:  Size  Location     Type
 14521 ;;                  1    wreg      void 
 14522 ;; Registers used:
 14523 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14524 ;; Tracked objects:
 14525 ;;		On entry : 0/0
 14526 ;;		On exit  : 0/0
 14527 ;;		Unchanged: 0/0
 14528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14530 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14532 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14533 ;;Total ram usage:        0 bytes
 14534 ;; Hardware stack levels used:    1
 14535 ;; Hardware stack levels required when called:    4
 14536 ;; This function calls:
 14537 ;;		Absolute function
 14538 ;;		_EUSART_Receive_ISR
 14539 ;;		_EUSART_Transmit_ISR
 14540 ;;		_PIN_MANAGER_IOC
 14541 ;;		_i2c_ISR
 14542 ;;		_i2c_busCollisionISR
 14543 ;; This function is called by:
 14544 ;;		Interrupt level 1
 14545 ;; This function uses a non-reentrant model
 14546 ;;
 14547                           
 14548  0004                     _INTERRUPT_InterruptManager:	
 14549                           
 14550                           ;incstack = 0
 14551  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 14552                           
 14553                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14554  0005  3180               	pagesel	$
 14555                           
 14556                           ;mcc_generated_files/interrupt_manager.c: 55:     if(PIE0bits.IOCIE == 1 && PIR0bits.IOC
      +                          IF == 1)
 14557  0006  0021               	movlb	1	; select bank1
 14558  0007  1E10               	btfss	16,4	;volatile
 14559  0008  2810               	goto	i1l249
 14560  0009  0020               	movlb	0	; select bank0
 14561  000A  1E10               	btfss	16,4	;volatile
 14562  000B  2810               	goto	i1l249
 14563                           
 14564                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         PIN_MANAGER_IOC();
 14565  000C  3197  2721  3180   	fcall	_PIN_MANAGER_IOC
 14566                           
 14567                           ;mcc_generated_files/interrupt_manager.c: 58:     }
 14568  000F  2845               	goto	i1l261
 14569  0010                     i1l249:	
 14570                           ;mcc_generated_files/interrupt_manager.c: 59:     else if(INTCONbits.PEIE == 1)
 14571                           
 14572  0010  1F0B               	btfss	11,6	;volatile
 14573  0011  2845               	goto	i1l261
 14574                           
 14575                           ;mcc_generated_files/interrupt_manager.c: 60:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 61:         if(PIE1bits.TXIE == 1 && PIR1bits.TXIF == 1)
 14576  0012  0021               	movlb	1	; select bank1
 14577  0013  1E11               	btfss	17,4	;volatile
 14578  0014  281F               	goto	i1l252
 14579  0015  0020               	movlb	0	; select bank0
 14580  0016  1E11               	btfss	17,4	;volatile
 14581  0017  281F               	goto	i1l252
 14582                           
 14583                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             EUSART_TxDefaultInterruptHandler();
 14584  0018  0021               	movlb	1	; select bank1
 14585  0019  086F               	movf	(_EUSART_TxDefaultInterruptHandler+1)^(0+128),w
 14586  001A  008A               	movwf	10
 14587  001B  086E               	movf	_EUSART_TxDefaultInterruptHandler^(0+128),w
 14588  001C  000A               	callw
 14589  001D  3180               	pagesel	$
 14590                           
 14591                           ;mcc_generated_files/interrupt_manager.c: 64:         }
 14592  001E  2845               	goto	i1l261
 14593  001F                     i1l252:	
 14594                           ;mcc_generated_files/interrupt_manager.c: 65:         else if(PIE1bits.RCIE == 1 && PIR1
      +                          bits.RCIF == 1)
 14595                           
 14596  001F  0021               	movlb	1	; select bank1
 14597  0020  1E91               	btfss	17,5	;volatile
 14598  0021  282C               	goto	i1l254
 14599  0022  0020               	movlb	0	; select bank0
 14600  0023  1E91               	btfss	17,5	;volatile
 14601  0024  282C               	goto	i1l254
 14602                           
 14603                           ;mcc_generated_files/interrupt_manager.c: 66:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 67:             EUSART_RxDefaultInterruptHandler();
 14604  0025  0022               	movlb	2	; select bank2
 14605  0026  086F               	movf	(_EUSART_RxDefaultInterruptHandler+1)^(0+256),w
 14606  0027  008A               	movwf	10
 14607  0028  086E               	movf	_EUSART_RxDefaultInterruptHandler^(0+256),w
 14608  0029  000A               	callw
 14609  002A  3180               	pagesel	$
 14610                           
 14611                           ;mcc_generated_files/interrupt_manager.c: 68:         }
 14612  002B  2845               	goto	i1l261
 14613  002C                     i1l254:	
 14614                           ;mcc_generated_files/interrupt_manager.c: 69:         else if(PIE1bits.BCL1IE == 1 && PI
      +                          R1bits.BCL1IF == 1)
 14615                           
 14616  002C  0021               	movlb	1	; select bank1
 14617  002D  1D11               	btfss	17,2	;volatile
 14618  002E  2839               	goto	i1l256
 14619  002F  0020               	movlb	0	; select bank0
 14620  0030  1D11               	btfss	17,2	;volatile
 14621  0031  2839               	goto	i1l256
 14622                           
 14623                           ;mcc_generated_files/interrupt_manager.c: 70:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 71:             i2c1_driver_busCollisionISR();
 14624  0032  0021               	movlb	1	; select bank1
 14625  0033  086B               	movf	(_i2c1_driver_busCollisionISR+1)^(0+128),w
 14626  0034  008A               	movwf	10
 14627  0035  086A               	movf	_i2c1_driver_busCollisionISR^(0+128),w
 14628  0036  000A               	callw
 14629  0037  3180               	pagesel	$
 14630                           
 14631                           ;mcc_generated_files/interrupt_manager.c: 72:         }
 14632  0038  2845               	goto	i1l261
 14633  0039                     i1l256:	
 14634                           ;mcc_generated_files/interrupt_manager.c: 73:         else if(PIE1bits.SSP1IE == 1 && PI
      +                          R1bits.SSP1IF == 1)
 14635                           
 14636  0039  0021               	movlb	1	; select bank1
 14637  003A  1D91               	btfss	17,3	;volatile
 14638  003B  2845               	goto	i1l261
 14639  003C  0020               	movlb	0	; select bank0
 14640  003D  1D91               	btfss	17,3	;volatile
 14641  003E  2845               	goto	i1l261
 14642                           
 14643                           ;mcc_generated_files/interrupt_manager.c: 74:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 75:             i2c1_driver_i2cISR();
 14644  003F  0021               	movlb	1	; select bank1
 14645  0040  0869               	movf	(_i2c1_driver_i2cISR+1)^(0+128),w
 14646  0041  008A               	movwf	10
 14647  0042  0868               	movf	_i2c1_driver_i2cISR^(0+128),w
 14648  0043  000A               	callw
 14649  0044  3180               	pagesel	$
 14650  0045                     i1l261:	
 14651                           ;mcc_generated_files/interrupt_manager.c: 76:         }
 14652                           
 14653  0045  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 14654  0046  0009               	retfie
 14655  0047                     __end_of_INTERRUPT_InterruptManager:	
 14656                           
 14657                           	psect	text73
 14658  16C9                     __ptext73:	
 14659 ;; *************** function _i2c_busCollisionISR *****************
 14660 ;; Defined at:
 14661 ;;		line 435 in file "mcc_generated_files/drivers/i2c_master.c"
 14662 ;; Parameters:    Size  Location     Type
 14663 ;;		None
 14664 ;; Auto vars:     Size  Location     Type
 14665 ;;		None
 14666 ;; Return value:  Size  Location     Type
 14667 ;;                  1    wreg      void 
 14668 ;; Registers used:
 14669 ;;		status,2, status,0, pclath, cstack
 14670 ;; Tracked objects:
 14671 ;;		On entry : 0/0
 14672 ;;		On exit  : 0/0
 14673 ;;		Unchanged: 0/0
 14674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14675 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14676 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14677 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14678 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14679 ;;Total ram usage:        0 bytes
 14680 ;; Hardware stack levels used:    1
 14681 ;; Hardware stack levels required when called:    1
 14682 ;; This function calls:
 14683 ;;		_i2c1_driver_clearBusCollision
 14684 ;; This function is called by:
 14685 ;;		_i2c_open
 14686 ;;		_INTERRUPT_InterruptManager
 14687 ;; This function uses a non-reentrant model
 14688 ;;
 14689                           
 14690                           
 14691                           ;psect for function _i2c_busCollisionISR
 14692  16C9                     _i2c_busCollisionISR:	
 14693                           
 14694                           ;mcc_generated_files/drivers/i2c_master.c: 437:     i2c1_driver_clearBusCollision();
 14695                           
 14696                           ;incstack = 0
 14697                           ; Regs used in _i2c_busCollisionISR: [status,2+status,0+pclath+cstack]
 14698  16C9  3196  26C6         	fcall	_i2c1_driver_clearBusCollision
 14699  16CB  0008               	return
 14700  16CC                     __end_of_i2c_busCollisionISR:	
 14701                           
 14702                           	psect	text74
 14703  16C6                     __ptext74:	
 14704 ;; *************** function _i2c1_driver_clearBusCollision *****************
 14705 ;; Defined at:
 14706 ;;		line 253 in file "mcc_generated_files/i2c1_driver.c"
 14707 ;; Parameters:    Size  Location     Type
 14708 ;;		None
 14709 ;; Auto vars:     Size  Location     Type
 14710 ;;		None
 14711 ;; Return value:  Size  Location     Type
 14712 ;;                  1    wreg      void 
 14713 ;; Registers used:
 14714 ;;		None
 14715 ;; Tracked objects:
 14716 ;;		On entry : 0/0
 14717 ;;		On exit  : 0/0
 14718 ;;		Unchanged: 0/0
 14719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14720 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14721 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14722 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14723 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14724 ;;Total ram usage:        0 bytes
 14725 ;; Hardware stack levels used:    1
 14726 ;; This function calls:
 14727 ;;		Nothing
 14728 ;; This function is called by:
 14729 ;;		_i2c_busCollisionISR
 14730 ;; This function uses a non-reentrant model
 14731 ;;
 14732                           
 14733                           
 14734                           ;psect for function _i2c1_driver_clearBusCollision
 14735  16C6                     _i2c1_driver_clearBusCollision:	
 14736                           
 14737                           ;mcc_generated_files/i2c1_driver.c: 255:     PIR1bits.BCL1IF = 0;
 14738                           
 14739                           ;incstack = 0
 14740                           ; Regs used in _i2c1_driver_clearBusCollision: []
 14741  16C6  0020               	movlb	0	; select bank0
 14742  16C7  1111               	bcf	17,2	;volatile
 14743  16C8  0008               	return
 14744  16C9                     __end_of_i2c1_driver_clearBusCollision:	
 14745                           
 14746                           	psect	text75
 14747  09D0                     __ptext75:	
 14748 ;; *************** function _i2c_ISR *****************
 14749 ;; Defined at:
 14750 ;;		line 419 in file "mcc_generated_files/drivers/i2c_master.c"
 14751 ;; Parameters:    Size  Location     Type
 14752 ;;		None
 14753 ;; Auto vars:     Size  Location     Type
 14754 ;;		None
 14755 ;; Return value:  Size  Location     Type
 14756 ;;                  1    wreg      void 
 14757 ;; Registers used:
 14758 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14759 ;; Tracked objects:
 14760 ;;		On entry : 0/0
 14761 ;;		On exit  : 0/0
 14762 ;;		Unchanged: 0/0
 14763 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14765 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14766 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14767 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14768 ;;Total ram usage:        3 bytes
 14769 ;; Hardware stack levels used:    1
 14770 ;; Hardware stack levels required when called:    3
 14771 ;; This function calls:
 14772 ;;		_do_I2C_DO_ACK
 14773 ;;		_do_I2C_DO_ADDRESS_NACK
 14774 ;;		_do_I2C_DO_NACK_RESTART
 14775 ;;		_do_I2C_DO_NACK_STOP
 14776 ;;		_do_I2C_IDLE
 14777 ;;		_do_I2C_RCEN
 14778 ;;		_do_I2C_RESET
 14779 ;;		_do_I2C_RX
 14780 ;;		_do_I2C_SEND_ADR_READ
 14781 ;;		_do_I2C_SEND_ADR_WRITE
 14782 ;;		_do_I2C_SEND_RESTART
 14783 ;;		_do_I2C_SEND_RESTART_READ
 14784 ;;		_do_I2C_SEND_RESTART_WRITE
 14785 ;;		_do_I2C_SEND_STOP
 14786 ;;		_do_I2C_TX
 14787 ;;		_do_I2C_TX_EMPTY
 14788 ;;		_i2c1_driver_isNACK
 14789 ;;		_mssp1_clearIRQ
 14790 ;; This function is called by:
 14791 ;;		_i2c_open
 14792 ;;		_i2c_poller
 14793 ;;		_INTERRUPT_InterruptManager
 14794 ;; This function uses a non-reentrant model
 14795 ;;
 14796                           
 14797                           
 14798                           ;psect for function _i2c_ISR
 14799  09D0                     _i2c_ISR:	
 14800                           
 14801                           ;mcc_generated_files/drivers/i2c_master.c: 421:     mssp1_clearIRQ();
 14802                           
 14803                           ;incstack = 0
 14804                           ; Regs used in _i2c_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14805  09D0  3196  26C3  3189   	fcall	_mssp1_clearIRQ
 14806                           
 14807                           ;mcc_generated_files/drivers/i2c_master.c: 427:     if(i2c_status.addressNACKCheck && i2
      +                          c1_driver_isNACK())
 14808  09D3  0023               	movlb	3	; select bank3
 14809  09D4  1DA0               	btfss	_i2c_status^(0+384),3
 14810  09D5  29E0               	goto	i1l5528
 14811  09D6  3197  275B  3189   	fcall	_i2c1_driver_isNACK
 14812  09D9  1C03               	btfss	3,0
 14813  09DA  29E0               	goto	i1l5528
 14814                           
 14815                           ;mcc_generated_files/drivers/i2c_master.c: 428:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 429:         i2c_status.state = I2C_ADDRESS_NACK;
 14816  09DB  300F               	movlw	15
 14817  09DC  00F9               	movwf	??_i2c_ISR
 14818  09DD  0879               	movf	??_i2c_ISR,w
 14819  09DE  0023               	movlb	3	; select bank3
 14820  09DF  00A9               	movwf	(_i2c_status^(0+384)+9)
 14821  09E0                     i1l5528:	
 14822                           
 14823                           ;mcc_generated_files/drivers/i2c_master.c: 432:     i2c_status.state = fsmStateTable[i2c
      +                          _status.state]();
 14824  09E0  0023               	movlb	3	; select bank3
 14825  09E1  0829               	movf	(_i2c_status^(0+384)+9),w
 14826  09E2  00F9               	movwf	??_i2c_ISR
 14827  09E3  01FA               	clrf	??_i2c_ISR+1
 14828  09E4  35F9               	lslf	??_i2c_ISR,f
 14829  09E5  0DFA               	rlf	??_i2c_ISR+1,f
 14830  09E6  3000               	movlw	low (_fsmStateTable| (0+32768))
 14831  09E7  0779               	addwf	??_i2c_ISR,w
 14832  09E8  0084               	movwf	4
 14833  09E9  3090               	movlw	high (_fsmStateTable| (0+32768))
 14834  09EA  3D7A               	addwfc	??_i2c_ISR+1,w
 14835  09EB  0085               	movwf	5
 14836  09EC  3F01               	moviw [1]fsr0
 14837  09ED  008A               	movwf	10
 14838  09EE  3F00               	moviw [0]fsr0
 14839  09EF  000A               	callw
 14840  09F0  3189               	pagesel	$
 14841  09F1  00FB               	movwf	??_i2c_ISR+2
 14842  09F2  087B               	movf	??_i2c_ISR+2,w
 14843  09F3  0023               	movlb	3	; select bank3
 14844  09F4  00A9               	movwf	(_i2c_status^(0+384)+9)
 14845  09F5  0008               	return
 14846  09F6                     __end_of_i2c_ISR:	
 14847                           
 14848                           	psect	text76
 14849  16C3                     __ptext76:	
 14850 ;; *************** function _mssp1_clearIRQ *****************
 14851 ;; Defined at:
 14852 ;;		line 53 in file "mcc_generated_files/i2c1_driver.c"
 14853 ;; Parameters:    Size  Location     Type
 14854 ;;		None
 14855 ;; Auto vars:     Size  Location     Type
 14856 ;;		None
 14857 ;; Return value:  Size  Location     Type
 14858 ;;                  1    wreg      void 
 14859 ;; Registers used:
 14860 ;;		None
 14861 ;; Tracked objects:
 14862 ;;		On entry : 0/0
 14863 ;;		On exit  : 0/0
 14864 ;;		Unchanged: 0/0
 14865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14867 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14868 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14869 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14870 ;;Total ram usage:        0 bytes
 14871 ;; Hardware stack levels used:    1
 14872 ;; This function calls:
 14873 ;;		Nothing
 14874 ;; This function is called by:
 14875 ;;		_i2c_ISR
 14876 ;;		_i2c_open
 14877 ;;		_i2c_close
 14878 ;; This function uses a non-reentrant model
 14879 ;;
 14880                           
 14881                           
 14882                           ;psect for function _mssp1_clearIRQ
 14883  16C3                     _mssp1_clearIRQ:	
 14884                           
 14885                           ;mcc_generated_files/i2c1_driver.c: 55:         SSP1STAT = 0x00;
 14886                           
 14887                           ;incstack = 0
 14888                           ; Regs used in _mssp1_clearIRQ: []
 14889  16C3  0020               	movlb	0	; select bank0
 14890  16C4  1191               	bcf	17,3	;volatile
 14891  16C5  0008               	return
 14892  16C6                     __end_of_mssp1_clearIRQ:	
 14893                           
 14894                           	psect	text77
 14895  0CFD                     __ptext77:	
 14896 ;; *************** function _do_I2C_RX *****************
 14897 ;; Defined at:
 14898 ;;		line 357 in file "mcc_generated_files/drivers/i2c_master.c"
 14899 ;; Parameters:    Size  Location     Type
 14900 ;;		None
 14901 ;; Auto vars:     Size  Location     Type
 14902 ;;		None
 14903 ;; Return value:  Size  Location     Type
 14904 ;;                  1    wreg      enum E7120
 14905 ;; Registers used:
 14906 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14907 ;; Tracked objects:
 14908 ;;		On entry : 0/0
 14909 ;;		On exit  : 0/0
 14910 ;;		Unchanged: 0/0
 14911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14912 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14913 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14914 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14915 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14916 ;;Total ram usage:        3 bytes
 14917 ;; Hardware stack levels used:    1
 14918 ;; Hardware stack levels required when called:    2
 14919 ;; This function calls:
 14920 ;;		_do_I2C_DO_NACK_RESTART
 14921 ;;		_do_I2C_DO_NACK_STOP
 14922 ;;		_i2c1_driver_sendACK
 14923 ;;		_returnReset
 14924 ;;		_returnStop
 14925 ;;		i1_i2c1_driver_getRXData
 14926 ;; This function is called by:
 14927 ;;		_i2c_ISR
 14928 ;; This function uses a non-reentrant model
 14929 ;;
 14930                           
 14931                           
 14932                           ;psect for function _do_I2C_RX
 14933  0CFD                     _do_I2C_RX:	
 14934                           
 14935                           ;mcc_generated_files/drivers/i2c_master.c: 359:     *i2c_status.data_ptr++ = i2c1_driver
      +                          _getRXData();
 14936                           
 14937                           ;incstack = 0
 14938                           ; Regs used in _do_I2C_RX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14939  0CFD  3196  26BD  318C   	fcall	i1_i2c1_driver_getRXData
 14940  0D00  00F6               	movwf	??_do_I2C_RX
 14941  0D01  0023               	movlb	3	; select bank3
 14942  0D02  0822               	movf	(low ((_i2c_status| (0+256)+2)))^(0+128),w
 14943  0D03  0086               	movwf	6
 14944  0D04  0187               	clrf	7
 14945  0D05  0876               	movf	??_do_I2C_RX,w
 14946  0D06  0081               	movwf	1
 14947  0D07  3001               	movlw	1
 14948  0D08  00F6               	movwf	??_do_I2C_RX
 14949  0D09  0876               	movf	??_do_I2C_RX,w
 14950  0D0A  07A2               	addwf	(low ((_i2c_status| (0+256)+2)))^(0+128),f
 14951                           
 14952                           ;mcc_generated_files/drivers/i2c_master.c: 360:     if(--i2c_status.data_length)
 14953  0D0B  3001               	movlw	1
 14954  0D0C  02A3               	subwf	(_i2c_status^(0+384)+3),f
 14955  0D0D  3000               	movlw	0
 14956  0D0E  3BA4               	subwfb	((_i2c_status+1)^(0+384)+3),f
 14957  0D0F  0823               	movf	(_i2c_status^(0+384)+3),w
 14958  0D10  0424               	iorwf	((_i2c_status+1)^(0+384)+3),w
 14959  0D11  1903               	btfsc	3,2
 14960  0D12  2D17               	goto	i1l173
 14961                           
 14962                           ;mcc_generated_files/drivers/i2c_master.c: 361:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 362:         i2c1_driver_sendACK();
 14963  0D13  3196  26EB         	fcall	_i2c1_driver_sendACK
 14964                           
 14965                           ;mcc_generated_files/drivers/i2c_master.c: 363:         return I2C_RCEN;
 14966  0D15  3005               	movlw	5
 14967  0D16  0008               	return
 14968  0D17                     i1l173:	
 14969                           ;mcc_generated_files/drivers/i2c_master.c: 365:     else
 14970                           
 14971                           
 14972                           ;mcc_generated_files/drivers/i2c_master.c: 366:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 367:         i2c_status.bufferFree = 1;
 14973  0D17  1520               	bsf	_i2c_status^(0+384),2
 14974                           
 14975                           ;mcc_generated_files/drivers/i2c_master.c: 368:         switch(i2c_status.callbackTable[
      +                          i2c_dataComplete](i2c_status.callbackPayload[i2c_dataComplete]))
 14976  0D18  2D1F               	goto	i1l5010
 14977  0D19                     i1l5000:	
 14978                           
 14979                           ;mcc_generated_files/drivers/i2c_master.c: 372:                 return do_I2C_DO_NACK_RE
      +                          START();
 14980  0D19  3197  270B         	fcall	_do_I2C_DO_NACK_RESTART
 14981  0D1B  0008               	return
 14982  0D1C                     i1l5004:	
 14983                           
 14984                           ;mcc_generated_files/drivers/i2c_master.c: 376:                 return do_I2C_DO_NACK_ST
      +                          OP();
 14985  0D1C  3197  2707         	fcall	_do_I2C_DO_NACK_STOP
 14986  0D1E  0008               	return
 14987  0D1F                     i1l5010:	
 14988  0D1F  0837               	movf	(low ((_i2c_status| (0+256)+23)))^(0+128),w
 14989  0D20  00F6               	movwf	??_do_I2C_RX
 14990  0D21  0876               	movf	??_do_I2C_RX,w
 14991  0D22  00F6               	movwf	returnReset@p
 14992  0D23  300B               	movlw	11
 14993  0D24  3EA0               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 14994  0D25  0086               	movwf	6
 14995  0D26  3001               	movlw	1	; select bank3/4
 14996  0D27  0087               	movwf	7
 14997  0D28  3F41               	moviw [1]fsr1
 14998  0D29  008A               	movwf	10
 14999  0D2A  3F40               	moviw [0]fsr1
 15000  0D2B  000A               	callw
 15001  0D2C  318C               	pagesel	$
 15002  0D2D  00F7               	movwf	??_do_I2C_RX+1
 15003  0D2E  01F8               	clrf	??_do_I2C_RX+2
 15004                           
 15005                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15006                           ; Switch size 1, requested type "simple"
 15007                           ; Number of cases is 1, Range of values is 0 to 0
 15008                           ; switch strategies available:
 15009                           ; Name         Instructions Cycles
 15010                           ; simple_byte            4     3 (average)
 15011                           ; direct_byte            8     6 (fixed)
 15012                           ; jumptable            260     6 (fixed)
 15013                           ;	Chosen strategy is simple_byte
 15014  0D2F  0878               	movf	??_do_I2C_RX+2,w
 15015  0D30  3A00               	xorlw	0	; case 0
 15016  0D31  1903               	skipnz
 15017  0D32  2D34               	goto	i1l7976
 15018  0D33  2D1C               	goto	i1l5004
 15019  0D34                     i1l7976:	
 15020                           
 15021                           ; Switch size 1, requested type "simple"
 15022                           ; Number of cases is 4, Range of values is 1 to 4
 15023                           ; switch strategies available:
 15024                           ; Name         Instructions Cycles
 15025                           ; simple_byte           13     7 (average)
 15026                           ; direct_byte           17     9 (fixed)
 15027                           ; jumptable            263     9 (fixed)
 15028                           ;	Chosen strategy is simple_byte
 15029  0D34  0877               	movf	??_do_I2C_RX+1,w
 15030  0D35  3A01               	xorlw	1	; case 1
 15031  0D36  1903               	skipnz
 15032  0D37  2D1C               	goto	i1l5004
 15033  0D38  3A03               	xorlw	3	; case 2
 15034  0D39  1903               	skipnz
 15035  0D3A  2D19               	goto	i1l5000
 15036  0D3B  3A01               	xorlw	1	; case 3
 15037  0D3C  1903               	skipnz
 15038  0D3D  2D19               	goto	i1l5000
 15039  0D3E  3A07               	xorlw	7	; case 4
 15040  0D3F  1903               	skipnz
 15041  0D40  2D1C               	goto	i1l5004
 15042  0D41  2D1C               	goto	i1l5004
 15043  0D42  0008               	return
 15044  0D43                     __end_of_do_I2C_RX:	
 15045                           
 15046                           	psect	text78
 15047  0DD4                     __ptext78:	
 15048 ;; *************** function _do_I2C_TX *****************
 15049 ;; Defined at:
 15050 ;;		line 333 in file "mcc_generated_files/drivers/i2c_master.c"
 15051 ;; Parameters:    Size  Location     Type
 15052 ;;		None
 15053 ;; Auto vars:     Size  Location     Type
 15054 ;;		None
 15055 ;; Return value:  Size  Location     Type
 15056 ;;                  1    wreg      enum E7120
 15057 ;; Registers used:
 15058 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15059 ;; Tracked objects:
 15060 ;;		On entry : 0/0
 15061 ;;		On exit  : 0/0
 15062 ;;		Unchanged: 0/0
 15063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15064 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15065 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15066 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15067 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15068 ;;Total ram usage:        3 bytes
 15069 ;; Hardware stack levels used:    1
 15070 ;; Hardware stack levels required when called:    2
 15071 ;; This function calls:
 15072 ;;		_do_I2C_SEND_RESTART_READ
 15073 ;;		_do_I2C_SEND_RESTART_WRITE
 15074 ;;		_do_I2C_SEND_STOP
 15075 ;;		_i2c1_driver_isNACK
 15076 ;;		_returnReset
 15077 ;;		_returnStop
 15078 ;;		i1_i2c1_driver_TXData
 15079 ;; This function is called by:
 15080 ;;		_i2c_ISR
 15081 ;; This function uses a non-reentrant model
 15082 ;;
 15083                           
 15084                           
 15085                           ;psect for function _do_I2C_TX
 15086  0DD4                     _do_I2C_TX:	
 15087                           
 15088                           ;mcc_generated_files/drivers/i2c_master.c: 335:     if(i2c1_driver_isNACK())
 15089                           
 15090                           ;incstack = 0
 15091                           ; Regs used in _do_I2C_TX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15092  0DD4  3197  275B  318D   	fcall	_i2c1_driver_isNACK
 15093  0DD7  1803               	btfsc	3,0
 15094  0DD8  2DE3               	goto	i1l4970
 15095  0DD9  2E07               	goto	i1l157
 15096  0DDA                     i1l4956:	
 15097                           
 15098                           ;mcc_generated_files/drivers/i2c_master.c: 340:                 return do_I2C_SEND_RESTA
      +                          RT_READ();
 15099  0DDA  3196  26F3         	fcall	_do_I2C_SEND_RESTART_READ
 15100  0DDC  0008               	return
 15101  0DDD                     i1l4960:	
 15102                           
 15103                           ;mcc_generated_files/drivers/i2c_master.c: 342:                 return do_I2C_SEND_RESTA
      +                          RT_WRITE();
 15104  0DDD  3196  26F7         	fcall	_do_I2C_SEND_RESTART_WRITE
 15105  0DDF  0008               	return
 15106  0DE0                     i1l4964:	
 15107                           
 15108                           ;mcc_generated_files/drivers/i2c_master.c: 346:                 return do_I2C_SEND_STOP(
      +                          );
 15109  0DE0  3196  26FF         	fcall	_do_I2C_SEND_STOP
 15110  0DE2  0008               	return
 15111  0DE3                     i1l4970:	
 15112  0DE3  0023               	movlb	3	; select bank3
 15113  0DE4  083A               	movf	(low ((_i2c_status| (0+256)+26)))^(0+128),w
 15114  0DE5  00F6               	movwf	??_do_I2C_TX
 15115  0DE6  0876               	movf	??_do_I2C_TX,w
 15116  0DE7  00F6               	movwf	returnReset@p
 15117  0DE8  3011               	movlw	17
 15118  0DE9  3EA0               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 15119  0DEA  0086               	movwf	6
 15120  0DEB  3001               	movlw	1	; select bank3/4
 15121  0DEC  0087               	movwf	7
 15122  0DED  3F41               	moviw [1]fsr1
 15123  0DEE  008A               	movwf	10
 15124  0DEF  3F40               	moviw [0]fsr1
 15125  0DF0  000A               	callw
 15126  0DF1  318D               	pagesel	$
 15127  0DF2  00F7               	movwf	??_do_I2C_TX+1
 15128  0DF3  01F8               	clrf	??_do_I2C_TX+2
 15129                           
 15130                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15131                           ; Switch size 1, requested type "simple"
 15132                           ; Number of cases is 1, Range of values is 0 to 0
 15133                           ; switch strategies available:
 15134                           ; Name         Instructions Cycles
 15135                           ; simple_byte            4     3 (average)
 15136                           ; direct_byte            8     6 (fixed)
 15137                           ; jumptable            260     6 (fixed)
 15138                           ;	Chosen strategy is simple_byte
 15139  0DF4  0878               	movf	??_do_I2C_TX+2,w
 15140  0DF5  3A00               	xorlw	0	; case 0
 15141  0DF6  1903               	skipnz
 15142  0DF7  2DF9               	goto	i1l7978
 15143  0DF8  2DE0               	goto	i1l4964
 15144  0DF9                     i1l7978:	
 15145                           
 15146                           ; Switch size 1, requested type "simple"
 15147                           ; Number of cases is 4, Range of values is 1 to 4
 15148                           ; switch strategies available:
 15149                           ; Name         Instructions Cycles
 15150                           ; simple_byte           13     7 (average)
 15151                           ; direct_byte           17     9 (fixed)
 15152                           ; jumptable            263     9 (fixed)
 15153                           ;	Chosen strategy is simple_byte
 15154  0DF9  0877               	movf	??_do_I2C_TX+1,w
 15155  0DFA  3A01               	xorlw	1	; case 1
 15156  0DFB  1903               	skipnz
 15157  0DFC  2DE0               	goto	i1l4964
 15158  0DFD  3A03               	xorlw	3	; case 2
 15159  0DFE  1903               	skipnz
 15160  0DFF  2DDA               	goto	i1l4956
 15161  0E00  3A01               	xorlw	1	; case 3
 15162  0E01  1903               	skipnz
 15163  0E02  2DDD               	goto	i1l4960
 15164  0E03  3A07               	xorlw	7	; case 4
 15165  0E04  1903               	skipnz
 15166  0E05  2DE0               	goto	i1l4964
 15167  0E06  2DE0               	goto	i1l4964
 15168  0E07                     i1l157:	
 15169                           ;mcc_generated_files/drivers/i2c_master.c: 349:     else
 15170                           
 15171                           
 15172                           ;mcc_generated_files/drivers/i2c_master.c: 350:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 351:         i2c_status.addressNACKCheck = 0;
 15173  0E07  0023               	movlb	3	; select bank3
 15174  0E08  11A0               	bcf	_i2c_status^(0+384),3
 15175                           
 15176                           ;mcc_generated_files/drivers/i2c_master.c: 352:         i2c1_driver_TXData(*i2c_status.d
      +                          ata_ptr++);
 15177  0E09  3002               	movlw	2
 15178  0E0A  3EA0               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 15179  0E0B  0086               	movwf	6
 15180  0E0C  3001               	movlw	1	; select bank3/4
 15181  0E0D  0087               	movwf	7
 15182  0E0E  3F40               	moviw [0]fsr1
 15183  0E0F  0084               	movwf	4
 15184  0E10  0185               	clrf	5
 15185  0E11  0A81               	incf	1,f
 15186  0E12  0800               	movf	0,w
 15187  0E13  3197  2717  318D   	fcall	i1_i2c1_driver_TXData
 15188                           
 15189                           ;mcc_generated_files/drivers/i2c_master.c: 353:         return (--i2c_status.data_length
      +                          )?I2C_TX:I2C_TX_EMPTY;
 15190  0E16  3001               	movlw	1
 15191  0E17  0023               	movlb	3	; select bank3
 15192  0E18  02A3               	subwf	(_i2c_status^(0+384)+3),f
 15193  0E19  3000               	movlw	0
 15194  0E1A  3BA4               	subwfb	((_i2c_status+1)^(0+384)+3),f
 15195  0E1B  0823               	movf	(_i2c_status^(0+384)+3),w
 15196  0E1C  0424               	iorwf	((_i2c_status+1)^(0+384)+3),w
 15197  0E1D  1D03               	btfss	3,2
 15198  0E1E  2E21               	goto	i1l4978
 15199  0E1F  3006               	movlw	6
 15200  0E20  0008               	return
 15201  0E21                     i1l4978:	
 15202  0E21  3003               	movlw	3
 15203  0E22  0008               	return
 15204  0E23                     __end_of_do_I2C_TX:	
 15205                           
 15206                           	psect	text79
 15207  0AE4                     __ptext79:	
 15208 ;; *************** function _do_I2C_DO_ADDRESS_NACK *****************
 15209 ;; Defined at:
 15210 ;;		line 319 in file "mcc_generated_files/drivers/i2c_master.c"
 15211 ;; Parameters:    Size  Location     Type
 15212 ;;		None
 15213 ;; Auto vars:     Size  Location     Type
 15214 ;;		None
 15215 ;; Return value:  Size  Location     Type
 15216 ;;                  1    wreg      enum E7120
 15217 ;; Registers used:
 15218 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15219 ;; Tracked objects:
 15220 ;;		On entry : 0/0
 15221 ;;		On exit  : 0/0
 15222 ;;		Unchanged: 0/0
 15223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15225 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15226 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15227 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15228 ;;Total ram usage:        3 bytes
 15229 ;; Hardware stack levels used:    1
 15230 ;; Hardware stack levels required when called:    2
 15231 ;; This function calls:
 15232 ;;		_do_I2C_SEND_RESTART
 15233 ;;		_do_I2C_SEND_STOP
 15234 ;;		_returnReset
 15235 ;;		_returnStop
 15236 ;; This function is called by:
 15237 ;;		_i2c_ISR
 15238 ;; This function uses a non-reentrant model
 15239 ;;
 15240                           
 15241                           
 15242                           ;psect for function _do_I2C_DO_ADDRESS_NACK
 15243  0AE4                     _do_I2C_DO_ADDRESS_NACK:	
 15244                           
 15245                           ;mcc_generated_files/drivers/i2c_master.c: 321:     i2c_status.addressNACKCheck = 0;
 15246                           
 15247                           ;incstack = 0
 15248                           ; Regs used in _do_I2C_DO_ADDRESS_NACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15249  0AE4  0023               	movlb	3	; select bank3
 15250  0AE5  11A0               	bcf	_i2c_status^(0+384),3
 15251                           
 15252                           ;mcc_generated_files/drivers/i2c_master.c: 322:     i2c_status.error = I2C_FAIL;
 15253  0AE6  3002               	movlw	2
 15254  0AE7  00F6               	movwf	??_do_I2C_DO_ADDRESS_NACK
 15255  0AE8  0876               	movf	??_do_I2C_DO_ADDRESS_NACK,w
 15256  0AE9  00AA               	movwf	(_i2c_status^(0+384)+10)
 15257                           
 15258                           ;mcc_generated_files/drivers/i2c_master.c: 323:     switch(i2c_status.callbackTable[i2c_
      +                          addressNACK](i2c_status.callbackPayload[i2c_addressNACK]))
 15259  0AEA  2AF1               	goto	i1l4944
 15260  0AEB                     i1l4934:	
 15261                           
 15262                           ;mcc_generated_files/drivers/i2c_master.c: 327:             return do_I2C_SEND_RESTART()
      +                          ;
 15263  0AEB  3196  26FB         	fcall	_do_I2C_SEND_RESTART
 15264  0AED  0008               	return
 15265  0AEE                     i1l4938:	
 15266                           
 15267                           ;mcc_generated_files/drivers/i2c_master.c: 329:             return do_I2C_SEND_STOP();
 15268  0AEE  3196  26FF         	fcall	_do_I2C_SEND_STOP
 15269  0AF0  0008               	return
 15270  0AF1                     i1l4944:	
 15271  0AF1  0839               	movf	(low ((_i2c_status| (0+256)+25)))^(0+128),w
 15272  0AF2  00F6               	movwf	??_do_I2C_DO_ADDRESS_NACK
 15273  0AF3  0876               	movf	??_do_I2C_DO_ADDRESS_NACK,w
 15274  0AF4  00F6               	movwf	returnReset@p
 15275  0AF5  300F               	movlw	15
 15276  0AF6  3EA0               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 15277  0AF7  0086               	movwf	6
 15278  0AF8  3001               	movlw	1	; select bank3/4
 15279  0AF9  0087               	movwf	7
 15280  0AFA  3F41               	moviw [1]fsr1
 15281  0AFB  008A               	movwf	10
 15282  0AFC  3F40               	moviw [0]fsr1
 15283  0AFD  000A               	callw
 15284  0AFE  318A               	pagesel	$
 15285  0AFF  00F7               	movwf	??_do_I2C_DO_ADDRESS_NACK+1
 15286  0B00  01F8               	clrf	??_do_I2C_DO_ADDRESS_NACK+2
 15287                           
 15288                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15289                           ; Switch size 1, requested type "simple"
 15290                           ; Number of cases is 1, Range of values is 0 to 0
 15291                           ; switch strategies available:
 15292                           ; Name         Instructions Cycles
 15293                           ; simple_byte            4     3 (average)
 15294                           ; direct_byte            8     6 (fixed)
 15295                           ; jumptable            260     6 (fixed)
 15296                           ;	Chosen strategy is simple_byte
 15297  0B01  0878               	movf	??_do_I2C_DO_ADDRESS_NACK+2,w
 15298  0B02  3A00               	xorlw	0	; case 0
 15299  0B03  1903               	skipnz
 15300  0B04  2B06               	goto	i1l7980
 15301  0B05  2AEE               	goto	i1l4938
 15302  0B06                     i1l7980:	
 15303                           
 15304                           ; Switch size 1, requested type "simple"
 15305                           ; Number of cases is 2, Range of values is 2 to 3
 15306                           ; switch strategies available:
 15307                           ; Name         Instructions Cycles
 15308                           ; simple_byte            7     4 (average)
 15309                           ; direct_byte           13     9 (fixed)
 15310                           ; jumptable            263     9 (fixed)
 15311                           ;	Chosen strategy is simple_byte
 15312  0B06  0877               	movf	??_do_I2C_DO_ADDRESS_NACK+1,w
 15313  0B07  3A02               	xorlw	2	; case 2
 15314  0B08  1903               	skipnz
 15315  0B09  2AEB               	goto	i1l4934
 15316  0B0A  3A01               	xorlw	1	; case 3
 15317  0B0B  1903               	skipnz
 15318  0B0C  2AEB               	goto	i1l4934
 15319  0B0D  2AEE               	goto	i1l4938
 15320  0B0E  0008               	return
 15321  0B0F                     __end_of_do_I2C_DO_ADDRESS_NACK:	
 15322                           
 15323                           	psect	text80
 15324  170B                     __ptext80:	
 15325 ;; *************** function _do_I2C_DO_NACK_RESTART *****************
 15326 ;; Defined at:
 15327 ;;		line 311 in file "mcc_generated_files/drivers/i2c_master.c"
 15328 ;; Parameters:    Size  Location     Type
 15329 ;;		None
 15330 ;; Auto vars:     Size  Location     Type
 15331 ;;		None
 15332 ;; Return value:  Size  Location     Type
 15333 ;;                  1    wreg      enum E7120
 15334 ;; Registers used:
 15335 ;;		wreg, status,2, status,0, pclath, cstack
 15336 ;; Tracked objects:
 15337 ;;		On entry : 0/0
 15338 ;;		On exit  : 0/0
 15339 ;;		Unchanged: 0/0
 15340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15341 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15342 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15343 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15344 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15345 ;;Total ram usage:        0 bytes
 15346 ;; Hardware stack levels used:    1
 15347 ;; Hardware stack levels required when called:    1
 15348 ;; This function calls:
 15349 ;;		i1_i2c1_driver_sendNACK
 15350 ;; This function is called by:
 15351 ;;		_do_I2C_RX
 15352 ;;		_i2c_ISR
 15353 ;; This function uses a non-reentrant model
 15354 ;;
 15355                           
 15356                           
 15357                           ;psect for function _do_I2C_DO_NACK_RESTART
 15358  170B                     _do_I2C_DO_NACK_RESTART:	
 15359                           
 15360                           ;mcc_generated_files/drivers/i2c_master.c: 313:     i2c1_driver_sendNACK();
 15361                           
 15362                           ;incstack = 0
 15363                           ; Regs used in _do_I2C_DO_NACK_RESTART: [wreg+status,2+status,0+pclath+cstack]
 15364  170B  3196  26EF         	fcall	i1_i2c1_driver_sendNACK
 15365                           
 15366                           ;mcc_generated_files/drivers/i2c_master.c: 314:     return I2C_SEND_RESTART;
 15367  170D  3009               	movlw	9
 15368  170E  0008               	return
 15369  170F                     __end_of_do_I2C_DO_NACK_RESTART:	
 15370                           
 15371                           	psect	text81
 15372  1707                     __ptext81:	
 15373 ;; *************** function _do_I2C_DO_NACK_STOP *****************
 15374 ;; Defined at:
 15375 ;;		line 305 in file "mcc_generated_files/drivers/i2c_master.c"
 15376 ;; Parameters:    Size  Location     Type
 15377 ;;		None
 15378 ;; Auto vars:     Size  Location     Type
 15379 ;;		None
 15380 ;; Return value:  Size  Location     Type
 15381 ;;                  1    wreg      enum E7120
 15382 ;; Registers used:
 15383 ;;		wreg, status,2, status,0, pclath, cstack
 15384 ;; Tracked objects:
 15385 ;;		On entry : 0/0
 15386 ;;		On exit  : 0/0
 15387 ;;		Unchanged: 0/0
 15388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15389 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15390 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15391 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15392 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15393 ;;Total ram usage:        0 bytes
 15394 ;; Hardware stack levels used:    1
 15395 ;; Hardware stack levels required when called:    1
 15396 ;; This function calls:
 15397 ;;		i1_i2c1_driver_sendNACK
 15398 ;; This function is called by:
 15399 ;;		_do_I2C_RX
 15400 ;;		_i2c_ISR
 15401 ;; This function uses a non-reentrant model
 15402 ;;
 15403                           
 15404                           
 15405                           ;psect for function _do_I2C_DO_NACK_STOP
 15406  1707                     _do_I2C_DO_NACK_STOP:	
 15407                           
 15408                           ;mcc_generated_files/drivers/i2c_master.c: 307:     i2c1_driver_sendNACK();
 15409                           
 15410                           ;incstack = 0
 15411                           ; Regs used in _do_I2C_DO_NACK_STOP: [wreg+status,2+status,0+pclath+cstack]
 15412  1707  3196  26EF         	fcall	i1_i2c1_driver_sendNACK
 15413                           
 15414                           ;mcc_generated_files/drivers/i2c_master.c: 308:     return I2C_SEND_STOP;
 15415  1709  300A               	movlw	10
 15416  170A  0008               	return
 15417  170B                     __end_of_do_I2C_DO_NACK_STOP:	
 15418                           
 15419                           	psect	text82
 15420  1703                     __ptext82:	
 15421 ;; *************** function _do_I2C_DO_ACK *****************
 15422 ;; Defined at:
 15423 ;;		line 299 in file "mcc_generated_files/drivers/i2c_master.c"
 15424 ;; Parameters:    Size  Location     Type
 15425 ;;		None
 15426 ;; Auto vars:     Size  Location     Type
 15427 ;;		None
 15428 ;; Return value:  Size  Location     Type
 15429 ;;                  1    wreg      enum E7120
 15430 ;; Registers used:
 15431 ;;		wreg, status,2, status,0, pclath, cstack
 15432 ;; Tracked objects:
 15433 ;;		On entry : 0/0
 15434 ;;		On exit  : 0/0
 15435 ;;		Unchanged: 0/0
 15436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15438 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15439 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15440 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15441 ;;Total ram usage:        0 bytes
 15442 ;; Hardware stack levels used:    1
 15443 ;; Hardware stack levels required when called:    1
 15444 ;; This function calls:
 15445 ;;		_i2c1_driver_sendACK
 15446 ;; This function is called by:
 15447 ;;		_i2c_ISR
 15448 ;; This function uses a non-reentrant model
 15449 ;;
 15450                           
 15451                           
 15452                           ;psect for function _do_I2C_DO_ACK
 15453  1703                     _do_I2C_DO_ACK:	
 15454                           
 15455                           ;mcc_generated_files/drivers/i2c_master.c: 301:     i2c1_driver_sendACK();
 15456                           
 15457                           ;incstack = 0
 15458                           ; Regs used in _do_I2C_DO_ACK: [wreg+status,2+status,0+pclath+cstack]
 15459  1703  3196  26EB         	fcall	_i2c1_driver_sendACK
 15460                           
 15461                           ;mcc_generated_files/drivers/i2c_master.c: 302:     return I2C_RCEN;
 15462  1705  3005               	movlw	5
 15463  1706  0008               	return
 15464  1707                     __end_of_do_I2C_DO_ACK:	
 15465                           
 15466                           	psect	text83
 15467  1727                     __ptext83:	
 15468 ;; *************** function _do_I2C_RCEN *****************
 15469 ;; Defined at:
 15470 ;;		line 292 in file "mcc_generated_files/drivers/i2c_master.c"
 15471 ;; Parameters:    Size  Location     Type
 15472 ;;		None
 15473 ;; Auto vars:     Size  Location     Type
 15474 ;;		None
 15475 ;; Return value:  Size  Location     Type
 15476 ;;                  1    wreg      enum E7120
 15477 ;; Registers used:
 15478 ;;		wreg, status,2, status,0, pclath, cstack
 15479 ;; Tracked objects:
 15480 ;;		On entry : 0/0
 15481 ;;		On exit  : 0/0
 15482 ;;		Unchanged: 0/0
 15483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15484 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15485 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15486 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15487 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15488 ;;Total ram usage:        0 bytes
 15489 ;; Hardware stack levels used:    1
 15490 ;; Hardware stack levels required when called:    1
 15491 ;; This function calls:
 15492 ;;		i1_i2c1_driver_startRX
 15493 ;; This function is called by:
 15494 ;;		_i2c_ISR
 15495 ;; This function uses a non-reentrant model
 15496 ;;
 15497                           
 15498                           
 15499                           ;psect for function _do_I2C_RCEN
 15500  1727                     _do_I2C_RCEN:	
 15501                           
 15502                           ;mcc_generated_files/drivers/i2c_master.c: 294:     i2c_status.addressNACKCheck = 0;
 15503                           
 15504                           ;incstack = 0
 15505                           ; Regs used in _do_I2C_RCEN: [wreg+status,2+status,0+pclath+cstack]
 15506  1727  0023               	movlb	3	; select bank3
 15507  1728  11A0               	bcf	_i2c_status^(0+384),3
 15508                           
 15509                           ;mcc_generated_files/drivers/i2c_master.c: 295:     i2c1_driver_startRX();
 15510  1729  3196  26BA         	fcall	i1_i2c1_driver_startRX
 15511                           
 15512                           ;mcc_generated_files/drivers/i2c_master.c: 296:     return I2C_RX;
 15513  172B  3004               	movlw	4
 15514  172C  0008               	return
 15515  172D                     __end_of_do_I2C_RCEN:	
 15516                           
 15517                           	psect	text84
 15518  1746                     __ptext84:	
 15519 ;; *************** function _do_I2C_SEND_ADR_WRITE *****************
 15520 ;; Defined at:
 15521 ;;		line 285 in file "mcc_generated_files/drivers/i2c_master.c"
 15522 ;; Parameters:    Size  Location     Type
 15523 ;;		None
 15524 ;; Auto vars:     Size  Location     Type
 15525 ;;		None
 15526 ;; Return value:  Size  Location     Type
 15527 ;;                  1    wreg      enum E7120
 15528 ;; Registers used:
 15529 ;;		wreg, status,2, status,0, pclath, cstack
 15530 ;; Tracked objects:
 15531 ;;		On entry : 0/0
 15532 ;;		On exit  : 0/0
 15533 ;;		Unchanged: 0/0
 15534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15535 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15536 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15537 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15538 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15539 ;;Total ram usage:        0 bytes
 15540 ;; Hardware stack levels used:    1
 15541 ;; Hardware stack levels required when called:    1
 15542 ;; This function calls:
 15543 ;;		i1_i2c1_driver_TXData
 15544 ;; This function is called by:
 15545 ;;		_i2c_ISR
 15546 ;; This function uses a non-reentrant model
 15547 ;;
 15548                           
 15549                           
 15550                           ;psect for function _do_I2C_SEND_ADR_WRITE
 15551  1746                     _do_I2C_SEND_ADR_WRITE:	
 15552                           
 15553                           ;mcc_generated_files/drivers/i2c_master.c: 287:     i2c_status.addressNACKCheck = 1;
 15554                           
 15555                           ;incstack = 0
 15556                           ; Regs used in _do_I2C_SEND_ADR_WRITE: [wreg+status,2+status,0+pclath+cstack]
 15557  1746  0023               	movlb	3	; select bank3
 15558  1747  15A0               	bsf	_i2c_status^(0+384),3
 15559                           
 15560                           ;mcc_generated_files/drivers/i2c_master.c: 288:     i2c1_driver_TXData(i2c_status.addres
      +                          s << 1);
 15561  1748  3521               	lslf	(_i2c_status^(0+384)+1),w
 15562  1749  3197  2717         	fcall	i1_i2c1_driver_TXData
 15563                           
 15564                           ;mcc_generated_files/drivers/i2c_master.c: 289:     return I2C_TX;
 15565  174B  3003               	movlw	3
 15566  174C  0008               	return
 15567  174D                     __end_of_do_I2C_SEND_ADR_WRITE:	
 15568                           
 15569                           	psect	text85
 15570  1763                     __ptext85:	
 15571 ;; *************** function _do_I2C_SEND_ADR_READ *****************
 15572 ;; Defined at:
 15573 ;;		line 278 in file "mcc_generated_files/drivers/i2c_master.c"
 15574 ;; Parameters:    Size  Location     Type
 15575 ;;		None
 15576 ;; Auto vars:     Size  Location     Type
 15577 ;;		None
 15578 ;; Return value:  Size  Location     Type
 15579 ;;                  1    wreg      enum E7120
 15580 ;; Registers used:
 15581 ;;		wreg, status,2, status,0, pclath, cstack
 15582 ;; Tracked objects:
 15583 ;;		On entry : 0/0
 15584 ;;		On exit  : 0/0
 15585 ;;		Unchanged: 0/0
 15586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15587 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15588 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15589 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15590 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15591 ;;Total ram usage:        0 bytes
 15592 ;; Hardware stack levels used:    1
 15593 ;; Hardware stack levels required when called:    1
 15594 ;; This function calls:
 15595 ;;		i1_i2c1_driver_TXData
 15596 ;; This function is called by:
 15597 ;;		_i2c_ISR
 15598 ;; This function uses a non-reentrant model
 15599 ;;
 15600                           
 15601                           
 15602                           ;psect for function _do_I2C_SEND_ADR_READ
 15603  1763                     _do_I2C_SEND_ADR_READ:	
 15604                           
 15605                           ;mcc_generated_files/drivers/i2c_master.c: 280:     i2c_status.addressNACKCheck = 1;
 15606                           
 15607                           ;incstack = 0
 15608                           ; Regs used in _do_I2C_SEND_ADR_READ: [wreg+status,2+status,0+pclath+cstack]
 15609  1763  0023               	movlb	3	; select bank3
 15610  1764  15A0               	bsf	_i2c_status^(0+384),3
 15611                           
 15612                           ;mcc_generated_files/drivers/i2c_master.c: 281:     i2c1_driver_TXData(i2c_status.addres
      +                          s << 1 | 1);
 15613  1765  1403               	setc
 15614  1766  0D21               	rlf	(_i2c_status^(0+384)+1),w
 15615  1767  3197  2717         	fcall	i1_i2c1_driver_TXData
 15616                           
 15617                           ;mcc_generated_files/drivers/i2c_master.c: 282:     return I2C_RCEN;
 15618  1769  3005               	movlw	5
 15619  176A  0008               	return
 15620  176B                     __end_of_do_I2C_SEND_ADR_READ:	
 15621                           
 15622                           	psect	text86
 15623  16FF                     __ptext86:	
 15624 ;; *************** function _do_I2C_SEND_STOP *****************
 15625 ;; Defined at:
 15626 ;;		line 272 in file "mcc_generated_files/drivers/i2c_master.c"
 15627 ;; Parameters:    Size  Location     Type
 15628 ;;		None
 15629 ;; Auto vars:     Size  Location     Type
 15630 ;;		None
 15631 ;; Return value:  Size  Location     Type
 15632 ;;                  1    wreg      enum E7120
 15633 ;; Registers used:
 15634 ;;		wreg, status,2, status,0, pclath, cstack
 15635 ;; Tracked objects:
 15636 ;;		On entry : 0/0
 15637 ;;		On exit  : 0/0
 15638 ;;		Unchanged: 0/0
 15639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15640 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15641 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15642 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15643 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15644 ;;Total ram usage:        0 bytes
 15645 ;; Hardware stack levels used:    1
 15646 ;; Hardware stack levels required when called:    1
 15647 ;; This function calls:
 15648 ;;		i1_i2c1_driver_stop
 15649 ;; This function is called by:
 15650 ;;		_do_I2C_DO_ADDRESS_NACK
 15651 ;;		_do_I2C_TX
 15652 ;;		_do_I2C_TX_EMPTY
 15653 ;;		_i2c_ISR
 15654 ;; This function uses a non-reentrant model
 15655 ;;
 15656                           
 15657                           
 15658                           ;psect for function _do_I2C_SEND_STOP
 15659  16FF                     _do_I2C_SEND_STOP:	
 15660                           
 15661                           ;mcc_generated_files/drivers/i2c_master.c: 274:     i2c1_driver_stop();
 15662                           
 15663                           ;incstack = 0
 15664                           ; Regs used in _do_I2C_SEND_STOP: [wreg+status,2+status,0+pclath+cstack]
 15665  16FF  3196  26B7         	fcall	i1_i2c1_driver_stop
 15666                           
 15667                           ;mcc_generated_files/drivers/i2c_master.c: 275:     return I2C_IDLE;
 15668  1701  3000               	movlw	0
 15669  1702  0008               	return
 15670  1703                     __end_of_do_I2C_SEND_STOP:	
 15671                           
 15672                           	psect	text87
 15673  16FB                     __ptext87:	
 15674 ;; *************** function _do_I2C_SEND_RESTART *****************
 15675 ;; Defined at:
 15676 ;;		line 266 in file "mcc_generated_files/drivers/i2c_master.c"
 15677 ;; Parameters:    Size  Location     Type
 15678 ;;		None
 15679 ;; Auto vars:     Size  Location     Type
 15680 ;;		None
 15681 ;; Return value:  Size  Location     Type
 15682 ;;                  1    wreg      enum E7120
 15683 ;; Registers used:
 15684 ;;		wreg, status,2, status,0, pclath, cstack
 15685 ;; Tracked objects:
 15686 ;;		On entry : 0/0
 15687 ;;		On exit  : 0/0
 15688 ;;		Unchanged: 0/0
 15689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15690 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15691 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15692 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15693 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15694 ;;Total ram usage:        0 bytes
 15695 ;; Hardware stack levels used:    1
 15696 ;; Hardware stack levels required when called:    1
 15697 ;; This function calls:
 15698 ;;		i1_i2c1_driver_restart
 15699 ;; This function is called by:
 15700 ;;		_do_I2C_DO_ADDRESS_NACK
 15701 ;;		_do_I2C_TX_EMPTY
 15702 ;;		_i2c_ISR
 15703 ;; This function uses a non-reentrant model
 15704 ;;
 15705                           
 15706                           
 15707                           ;psect for function _do_I2C_SEND_RESTART
 15708  16FB                     _do_I2C_SEND_RESTART:	
 15709                           
 15710                           ;mcc_generated_files/drivers/i2c_master.c: 268:     i2c1_driver_restart();
 15711                           
 15712                           ;incstack = 0
 15713                           ; Regs used in _do_I2C_SEND_RESTART: [wreg+status,2+status,0+pclath+cstack]
 15714  16FB  3196  26B4         	fcall	i1_i2c1_driver_restart
 15715                           
 15716                           ;mcc_generated_files/drivers/i2c_master.c: 269:     return I2C_SEND_ADR_READ;
 15717  16FD  3001               	movlw	1
 15718  16FE  0008               	return
 15719  16FF                     __end_of_do_I2C_SEND_RESTART:	
 15720                           
 15721                           	psect	text88
 15722  16F7                     __ptext88:	
 15723 ;; *************** function _do_I2C_SEND_RESTART_WRITE *****************
 15724 ;; Defined at:
 15725 ;;		line 260 in file "mcc_generated_files/drivers/i2c_master.c"
 15726 ;; Parameters:    Size  Location     Type
 15727 ;;		None
 15728 ;; Auto vars:     Size  Location     Type
 15729 ;;		None
 15730 ;; Return value:  Size  Location     Type
 15731 ;;                  1    wreg      enum E7120
 15732 ;; Registers used:
 15733 ;;		wreg, status,2, status,0, pclath, cstack
 15734 ;; Tracked objects:
 15735 ;;		On entry : 0/0
 15736 ;;		On exit  : 0/0
 15737 ;;		Unchanged: 0/0
 15738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15740 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15741 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15742 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15743 ;;Total ram usage:        0 bytes
 15744 ;; Hardware stack levels used:    1
 15745 ;; Hardware stack levels required when called:    1
 15746 ;; This function calls:
 15747 ;;		i1_i2c1_driver_restart
 15748 ;; This function is called by:
 15749 ;;		_do_I2C_TX
 15750 ;;		_i2c_ISR
 15751 ;; This function uses a non-reentrant model
 15752 ;;
 15753                           
 15754                           
 15755                           ;psect for function _do_I2C_SEND_RESTART_WRITE
 15756  16F7                     _do_I2C_SEND_RESTART_WRITE:	
 15757                           
 15758                           ;mcc_generated_files/drivers/i2c_master.c: 262:     i2c1_driver_restart();
 15759                           
 15760                           ;incstack = 0
 15761                           ; Regs used in _do_I2C_SEND_RESTART_WRITE: [wreg+status,2+status,0+pclath+cstack]
 15762  16F7  3196  26B4         	fcall	i1_i2c1_driver_restart
 15763                           
 15764                           ;mcc_generated_files/drivers/i2c_master.c: 263:     return I2C_SEND_ADR_WRITE;
 15765  16F9  3002               	movlw	2
 15766  16FA  0008               	return
 15767  16FB                     __end_of_do_I2C_SEND_RESTART_WRITE:	
 15768                           
 15769                           	psect	text89
 15770  16F3                     __ptext89:	
 15771 ;; *************** function _do_I2C_SEND_RESTART_READ *****************
 15772 ;; Defined at:
 15773 ;;		line 254 in file "mcc_generated_files/drivers/i2c_master.c"
 15774 ;; Parameters:    Size  Location     Type
 15775 ;;		None
 15776 ;; Auto vars:     Size  Location     Type
 15777 ;;		None
 15778 ;; Return value:  Size  Location     Type
 15779 ;;                  1    wreg      enum E7120
 15780 ;; Registers used:
 15781 ;;		wreg, status,2, status,0, pclath, cstack
 15782 ;; Tracked objects:
 15783 ;;		On entry : 0/0
 15784 ;;		On exit  : 0/0
 15785 ;;		Unchanged: 0/0
 15786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15787 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15788 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15789 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15790 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15791 ;;Total ram usage:        0 bytes
 15792 ;; Hardware stack levels used:    1
 15793 ;; Hardware stack levels required when called:    1
 15794 ;; This function calls:
 15795 ;;		i1_i2c1_driver_restart
 15796 ;; This function is called by:
 15797 ;;		_do_I2C_TX
 15798 ;;		_i2c_ISR
 15799 ;; This function uses a non-reentrant model
 15800 ;;
 15801                           
 15802                           
 15803                           ;psect for function _do_I2C_SEND_RESTART_READ
 15804  16F3                     _do_I2C_SEND_RESTART_READ:	
 15805                           
 15806                           ;mcc_generated_files/drivers/i2c_master.c: 256:     i2c1_driver_restart();
 15807                           
 15808                           ;incstack = 0
 15809                           ; Regs used in _do_I2C_SEND_RESTART_READ: [wreg+status,2+status,0+pclath+cstack]
 15810  16F3  3196  26B4         	fcall	i1_i2c1_driver_restart
 15811                           
 15812                           ;mcc_generated_files/drivers/i2c_master.c: 257:     return I2C_SEND_ADR_READ;
 15813  16F5  3001               	movlw	1
 15814  16F6  0008               	return
 15815  16F7                     __end_of_do_I2C_SEND_RESTART_READ:	
 15816                           
 15817                           	psect	text90
 15818  171C                     __ptext90:	
 15819 ;; *************** function _do_I2C_IDLE *****************
 15820 ;; Defined at:
 15821 ;;		line 247 in file "mcc_generated_files/drivers/i2c_master.c"
 15822 ;; Parameters:    Size  Location     Type
 15823 ;;		None
 15824 ;; Auto vars:     Size  Location     Type
 15825 ;;		None
 15826 ;; Return value:  Size  Location     Type
 15827 ;;                  1    wreg      enum E7120
 15828 ;; Registers used:
 15829 ;;		wreg, status,2
 15830 ;; Tracked objects:
 15831 ;;		On entry : 0/0
 15832 ;;		On exit  : 0/0
 15833 ;;		Unchanged: 0/0
 15834 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15835 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15836 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15837 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15838 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15839 ;;Total ram usage:        0 bytes
 15840 ;; Hardware stack levels used:    1
 15841 ;; This function calls:
 15842 ;;		Nothing
 15843 ;; This function is called by:
 15844 ;;		_i2c_ISR
 15845 ;; This function uses a non-reentrant model
 15846 ;;
 15847                           
 15848                           
 15849                           ;psect for function _do_I2C_IDLE
 15850  171C                     _do_I2C_IDLE:	
 15851                           
 15852                           ;mcc_generated_files/drivers/i2c_master.c: 249:     i2c_status.busy = 0;
 15853                           
 15854                           ;incstack = 0
 15855                           ; Regs used in _do_I2C_IDLE: [wreg+status,2]
 15856  171C  0023               	movlb	3	; select bank3
 15857  171D  1020               	bcf	_i2c_status^(0+384),0
 15858                           
 15859                           ;mcc_generated_files/drivers/i2c_master.c: 250:     i2c_status.error = I2C_NOERR;
 15860  171E  01AA               	clrf	(_i2c_status^(0+384)+10)
 15861                           
 15862                           ;mcc_generated_files/drivers/i2c_master.c: 251:     return I2C_RESET;
 15863  171F  300E               	movlw	14
 15864  1720  0008               	return
 15865  1721                     __end_of_do_I2C_IDLE:	
 15866                           
 15867                           	psect	text91
 15868  173F                     __ptext91:	
 15869 ;; *************** function _do_I2C_RESET *****************
 15870 ;; Defined at:
 15871 ;;		line 239 in file "mcc_generated_files/drivers/i2c_master.c"
 15872 ;; Parameters:    Size  Location     Type
 15873 ;;		None
 15874 ;; Auto vars:     Size  Location     Type
 15875 ;;		None
 15876 ;; Return value:  Size  Location     Type
 15877 ;;                  1    wreg      enum E7120
 15878 ;; Registers used:
 15879 ;;		wreg, status,2, status,0, pclath, cstack
 15880 ;; Tracked objects:
 15881 ;;		On entry : 0/0
 15882 ;;		On exit  : 0/0
 15883 ;;		Unchanged: 0/0
 15884 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15885 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15886 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15887 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15888 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15889 ;;Total ram usage:        0 bytes
 15890 ;; Hardware stack levels used:    1
 15891 ;; Hardware stack levels required when called:    1
 15892 ;; This function calls:
 15893 ;;		_i2c1_driver_resetBus
 15894 ;; This function is called by:
 15895 ;;		_i2c_ISR
 15896 ;; This function uses a non-reentrant model
 15897 ;;
 15898                           
 15899                           
 15900                           ;psect for function _do_I2C_RESET
 15901  173F                     _do_I2C_RESET:	
 15902                           
 15903                           ;mcc_generated_files/drivers/i2c_master.c: 241:     i2c1_driver_resetBus();
 15904                           
 15905                           ;incstack = 0
 15906                           ; Regs used in _do_I2C_RESET: [wreg+status,2+status,0+pclath+cstack]
 15907  173F  3196  26B0         	fcall	_i2c1_driver_resetBus
 15908                           
 15909                           ;mcc_generated_files/drivers/i2c_master.c: 242:     i2c_status.busy = 0;
 15910  1741  0023               	movlb	3	; select bank3
 15911  1742  1020               	bcf	_i2c_status^(0+384),0
 15912                           
 15913                           ;mcc_generated_files/drivers/i2c_master.c: 243:     i2c_status.error = I2C_NOERR;
 15914  1743  01AA               	clrf	(_i2c_status^(0+384)+10)
 15915                           
 15916                           ;mcc_generated_files/drivers/i2c_master.c: 244:     return I2C_RESET;
 15917  1744  300E               	movlw	14
 15918  1745  0008               	return
 15919  1746                     __end_of_do_I2C_RESET:	
 15920                           
 15921                           	psect	text92
 15922  0B3A                     __ptext92:	
 15923 ;; *************** function _do_I2C_TX_EMPTY *****************
 15924 ;; Defined at:
 15925 ;;		line 382 in file "mcc_generated_files/drivers/i2c_master.c"
 15926 ;; Parameters:    Size  Location     Type
 15927 ;;		None
 15928 ;; Auto vars:     Size  Location     Type
 15929 ;;		None
 15930 ;; Return value:  Size  Location     Type
 15931 ;;                  1    wreg      enum E7120
 15932 ;; Registers used:
 15933 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15934 ;; Tracked objects:
 15935 ;;		On entry : 0/0
 15936 ;;		On exit  : 0/0
 15937 ;;		Unchanged: 0/0
 15938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15939 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15940 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15941 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15942 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15943 ;;Total ram usage:        3 bytes
 15944 ;; Hardware stack levels used:    1
 15945 ;; Hardware stack levels required when called:    2
 15946 ;; This function calls:
 15947 ;;		_do_I2C_SEND_RESTART
 15948 ;;		_do_I2C_SEND_STOP
 15949 ;;		_mssp1_setIRQ
 15950 ;;		_returnReset
 15951 ;;		_returnStop
 15952 ;; This function is called by:
 15953 ;;		_i2c_ISR
 15954 ;; This function uses a non-reentrant model
 15955 ;;
 15956                           
 15957                           
 15958                           ;psect for function _do_I2C_TX_EMPTY
 15959  0B3A                     _do_I2C_TX_EMPTY:	
 15960                           
 15961                           ;mcc_generated_files/drivers/i2c_master.c: 384:     i2c_status.bufferFree = 1;
 15962                           
 15963                           ;incstack = 0
 15964                           ; Regs used in _do_I2C_TX_EMPTY: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15965  0B3A  0023               	movlb	3	; select bank3
 15966  0B3B  1520               	bsf	_i2c_status^(0+384),2
 15967                           
 15968                           ;mcc_generated_files/drivers/i2c_master.c: 385:     switch(i2c_status.callbackTable[i2c_
      +                          dataComplete](i2c_status.callbackPayload[i2c_dataComplete]))
 15969  0B3C  2B47               	goto	i1l5036
 15970  0B3D                     i1l5020:	
 15971                           
 15972                           ;mcc_generated_files/drivers/i2c_master.c: 389:             return do_I2C_SEND_RESTART()
      +                          ;
 15973  0B3D  3196  26FB         	fcall	_do_I2C_SEND_RESTART
 15974  0B3F  0008               	return
 15975  0B40                     i1l5024:	
 15976                           
 15977                           ;mcc_generated_files/drivers/i2c_master.c: 391:             mssp1_setIRQ();
 15978  0B40  3196  26C0         	fcall	_mssp1_setIRQ
 15979                           
 15980                           ;mcc_generated_files/drivers/i2c_master.c: 392:             return I2C_TX;
 15981  0B42  3003               	movlw	3
 15982  0B43  0008               	return
 15983  0B44                     i1l5030:	
 15984                           
 15985                           ;mcc_generated_files/drivers/i2c_master.c: 395:             return do_I2C_SEND_STOP();
 15986  0B44  3196  26FF         	fcall	_do_I2C_SEND_STOP
 15987  0B46  0008               	return
 15988  0B47                     i1l5036:	
 15989  0B47  0837               	movf	(low ((_i2c_status| (0+256)+23)))^(0+128),w
 15990  0B48  00F6               	movwf	??_do_I2C_TX_EMPTY
 15991  0B49  0876               	movf	??_do_I2C_TX_EMPTY,w
 15992  0B4A  00F6               	movwf	returnReset@p
 15993  0B4B  300B               	movlw	11
 15994  0B4C  3EA0               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 15995  0B4D  0086               	movwf	6
 15996  0B4E  3001               	movlw	1	; select bank3/4
 15997  0B4F  0087               	movwf	7
 15998  0B50  3F41               	moviw [1]fsr1
 15999  0B51  008A               	movwf	10
 16000  0B52  3F40               	moviw [0]fsr1
 16001  0B53  000A               	callw
 16002  0B54  318B               	pagesel	$
 16003  0B55  00F7               	movwf	??_do_I2C_TX_EMPTY+1
 16004  0B56  01F8               	clrf	??_do_I2C_TX_EMPTY+2
 16005                           
 16006                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 16007                           ; Switch size 1, requested type "simple"
 16008                           ; Number of cases is 1, Range of values is 0 to 0
 16009                           ; switch strategies available:
 16010                           ; Name         Instructions Cycles
 16011                           ; simple_byte            4     3 (average)
 16012                           ; direct_byte            8     6 (fixed)
 16013                           ; jumptable            260     6 (fixed)
 16014                           ;	Chosen strategy is simple_byte
 16015  0B57  0878               	movf	??_do_I2C_TX_EMPTY+2,w
 16016  0B58  3A00               	xorlw	0	; case 0
 16017  0B59  1903               	skipnz
 16018  0B5A  2B5C               	goto	i1l7982
 16019  0B5B  2B44               	goto	i1l5030
 16020  0B5C                     i1l7982:	
 16021                           
 16022                           ; Switch size 1, requested type "simple"
 16023                           ; Number of cases is 4, Range of values is 1 to 4
 16024                           ; switch strategies available:
 16025                           ; Name         Instructions Cycles
 16026                           ; simple_byte           13     7 (average)
 16027                           ; direct_byte           17     9 (fixed)
 16028                           ; jumptable            263     9 (fixed)
 16029                           ;	Chosen strategy is simple_byte
 16030  0B5C  0877               	movf	??_do_I2C_TX_EMPTY+1,w
 16031  0B5D  3A01               	xorlw	1	; case 1
 16032  0B5E  1903               	skipnz
 16033  0B5F  2B44               	goto	i1l5030
 16034  0B60  3A03               	xorlw	3	; case 2
 16035  0B61  1903               	skipnz
 16036  0B62  2B3D               	goto	i1l5020
 16037  0B63  3A01               	xorlw	1	; case 3
 16038  0B64  1903               	skipnz
 16039  0B65  2B3D               	goto	i1l5020
 16040  0B66  3A07               	xorlw	7	; case 4
 16041  0B67  1903               	skipnz
 16042  0B68  2B40               	goto	i1l5024
 16043  0B69  2B44               	goto	i1l5030
 16044  0B6A  0008               	return
 16045  0B6B                     __end_of_do_I2C_TX_EMPTY:	
 16046                           
 16047                           	psect	text93
 16048  16C0                     __ptext93:	
 16049 ;; *************** function _mssp1_setIRQ *****************
 16050 ;; Defined at:
 16051 ;;		line 58 in file "mcc_generated_files/i2c1_driver.c"
 16052 ;; Parameters:    Size  Location     Type
 16053 ;;		None
 16054 ;; Auto vars:     Size  Location     Type
 16055 ;;		None
 16056 ;; Return value:  Size  Location     Type
 16057 ;;                  1    wreg      void 
 16058 ;; Registers used:
 16059 ;;		None
 16060 ;; Tracked objects:
 16061 ;;		On entry : 0/0
 16062 ;;		On exit  : 0/0
 16063 ;;		Unchanged: 0/0
 16064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16066 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16068 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16069 ;;Total ram usage:        0 bytes
 16070 ;; Hardware stack levels used:    1
 16071 ;; This function calls:
 16072 ;;		Nothing
 16073 ;; This function is called by:
 16074 ;;		_do_I2C_TX_EMPTY
 16075 ;; This function uses a non-reentrant model
 16076 ;;
 16077                           
 16078                           
 16079                           ;psect for function _mssp1_setIRQ
 16080  16C0                     _mssp1_setIRQ:	
 16081                           
 16082                           ;mcc_generated_files/i2c1_driver.c: 60:     }
 16083                           
 16084                           ;incstack = 0
 16085                           ; Regs used in _mssp1_setIRQ: []
 16086  16C0  0020               	movlb	0	; select bank0
 16087  16C1  1591               	bsf	17,3	;volatile
 16088  16C2  0008               	return
 16089  16C3                     __end_of_mssp1_setIRQ:	
 16090                           
 16091                           	psect	text94
 16092  175B                     __ptext94:	
 16093 ;; *************** function _i2c1_driver_isNACK *****************
 16094 ;; Defined at:
 16095 ;;		line 161 in file "mcc_generated_files/i2c1_driver.c"
 16096 ;; Parameters:    Size  Location     Type
 16097 ;;		None
 16098 ;; Auto vars:     Size  Location     Type
 16099 ;;		None
 16100 ;; Return value:  Size  Location     Type
 16101 ;;		None               void
 16102 ;; Registers used:
 16103 ;;		wreg, status,2, status,0
 16104 ;; Tracked objects:
 16105 ;;		On entry : 0/0
 16106 ;;		On exit  : 0/0
 16107 ;;		Unchanged: 0/0
 16108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16109 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16110 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16111 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16112 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16113 ;;Total ram usage:        1 bytes
 16114 ;; Hardware stack levels used:    1
 16115 ;; This function calls:
 16116 ;;		Nothing
 16117 ;; This function is called by:
 16118 ;;		_do_I2C_TX
 16119 ;;		_i2c_ISR
 16120 ;; This function uses a non-reentrant model
 16121 ;;
 16122                           
 16123                           
 16124                           ;psect for function _i2c1_driver_isNACK
 16125  175B                     _i2c1_driver_isNACK:	
 16126                           
 16127                           ;mcc_generated_files/i2c1_driver.c: 163:     return SSP1CON2bits.ACKSTAT;
 16128                           
 16129                           ;incstack = 0
 16130                           ; Regs used in _i2c1_driver_isNACK: [wreg+status,2+status,0]
 16131  175B  0024               	movlb	4	; select bank4
 16132  175C  0E16               	swapf	22,w	;volatile
 16133  175D  0C89               	rrf	9,f
 16134  175E  0C89               	rrf	9,f
 16135  175F  3901               	andlw	1
 16136  1760  00F6               	movwf	??_i2c1_driver_isNACK
 16137  1761  0C76               	rrf	??_i2c1_driver_isNACK,w
 16138  1762  0008               	return
 16139  1763                     __end_of_i2c1_driver_isNACK:	
 16140                           
 16141                           	psect	text95
 16142  1717                     __ptext95:	
 16143 ;; *************** function i1_i2c1_driver_TXData *****************
 16144 ;; Defined at:
 16145 ;;		line 186 in file "mcc_generated_files/i2c1_driver.c"
 16146 ;; Parameters:    Size  Location     Type
 16147 ;;  d               1    wreg     unsigned char 
 16148 ;; Auto vars:     Size  Location     Type
 16149 ;;  d               1    0[COMMON] unsigned char 
 16150 ;; Return value:  Size  Location     Type
 16151 ;;                  1    wreg      void 
 16152 ;; Registers used:
 16153 ;;		wreg
 16154 ;; Tracked objects:
 16155 ;;		On entry : 0/0
 16156 ;;		On exit  : 0/0
 16157 ;;		Unchanged: 0/0
 16158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16159 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16160 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16161 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16162 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16163 ;;Total ram usage:        1 bytes
 16164 ;; Hardware stack levels used:    1
 16165 ;; This function calls:
 16166 ;;		Nothing
 16167 ;; This function is called by:
 16168 ;;		_do_I2C_SEND_ADR_READ
 16169 ;;		_do_I2C_SEND_ADR_WRITE
 16170 ;;		_do_I2C_TX
 16171 ;; This function uses a non-reentrant model
 16172 ;;
 16173                           
 16174                           
 16175                           ;psect for function i1_i2c1_driver_TXData
 16176  1717                     i1_i2c1_driver_TXData:	
 16177                           
 16178                           ;incstack = 0
 16179                           ; Regs used in i1_i2c1_driver_TXData: [wreg]
 16180                           ;i1i2c1_driver_TXData@d stored from wreg
 16181  1717  00F6               	movwf	i1i2c1_driver_TXData@d
 16182                           
 16183                           ;mcc_generated_files/i2c1_driver.c: 186: __attribute__((inline)) void i2c1_driver_TXData
      +                          (char d);mcc_generated_files/i2c1_driver.c: 187: {;mcc_generated_files/i2c1_driver.c: 18
      +                          8:     SSP1BUF = d;
 16184  1718  0876               	movf	i1i2c1_driver_TXData@d,w
 16185  1719  0024               	movlb	4	; select bank4
 16186  171A  0091               	movwf	17	;volatile
 16187  171B  0008               	return
 16188  171C                     __end_ofi1_i2c1_driver_TXData:	
 16189                           
 16190                           	psect	text96
 16191  16BD                     __ptext96:	
 16192 ;; *************** function i1_i2c1_driver_getRXData *****************
 16193 ;; Defined at:
 16194 ;;		line 171 in file "mcc_generated_files/i2c1_driver.c"
 16195 ;; Parameters:    Size  Location     Type
 16196 ;;		None
 16197 ;; Auto vars:     Size  Location     Type
 16198 ;;		None
 16199 ;; Return value:  Size  Location     Type
 16200 ;;                  1    wreg      unsigned char 
 16201 ;; Registers used:
 16202 ;;		wreg
 16203 ;; Tracked objects:
 16204 ;;		On entry : 0/0
 16205 ;;		On exit  : 0/0
 16206 ;;		Unchanged: 0/0
 16207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16208 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16209 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16210 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16211 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16212 ;;Total ram usage:        0 bytes
 16213 ;; Hardware stack levels used:    1
 16214 ;; This function calls:
 16215 ;;		Nothing
 16216 ;; This function is called by:
 16217 ;;		_do_I2C_RX
 16218 ;; This function uses a non-reentrant model
 16219 ;;
 16220                           
 16221                           
 16222                           ;psect for function i1_i2c1_driver_getRXData
 16223  16BD                     i1_i2c1_driver_getRXData:	
 16224                           
 16225                           ;mcc_generated_files/i2c1_driver.c: 173:     return SSP1BUF;
 16226                           
 16227                           ;incstack = 0
 16228                           ; Regs used in i1_i2c1_driver_getRXData: [wreg]
 16229  16BD  0024               	movlb	4	; select bank4
 16230  16BE  0811               	movf	17,w	;volatile
 16231  16BF  0008               	return
 16232  16C0                     __end_ofi1_i2c1_driver_getRXData:	
 16233                           
 16234                           	psect	text97
 16235  16EF                     __ptext97:	
 16236 ;; *************** function i1_i2c1_driver_sendNACK *****************
 16237 ;; Defined at:
 16238 ;;		line 202 in file "mcc_generated_files/i2c1_driver.c"
 16239 ;; Parameters:    Size  Location     Type
 16240 ;;		None
 16241 ;; Auto vars:     Size  Location     Type
 16242 ;;		None
 16243 ;; Return value:  Size  Location     Type
 16244 ;;                  1    wreg      void 
 16245 ;; Registers used:
 16246 ;;		None
 16247 ;; Tracked objects:
 16248 ;;		On entry : 0/0
 16249 ;;		On exit  : 0/0
 16250 ;;		Unchanged: 0/0
 16251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16252 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16253 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16254 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16255 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16256 ;;Total ram usage:        0 bytes
 16257 ;; Hardware stack levels used:    1
 16258 ;; This function calls:
 16259 ;;		Nothing
 16260 ;; This function is called by:
 16261 ;;		_do_I2C_DO_NACK_STOP
 16262 ;;		_do_I2C_DO_NACK_RESTART
 16263 ;; This function uses a non-reentrant model
 16264 ;;
 16265                           
 16266                           
 16267                           ;psect for function i1_i2c1_driver_sendNACK
 16268  16EF                     i1_i2c1_driver_sendNACK:	
 16269                           
 16270                           ;mcc_generated_files/i2c1_driver.c: 204:     SSP1CON2bits.ACKDT = 1;
 16271                           
 16272                           ;incstack = 0
 16273                           ; Regs used in i1_i2c1_driver_sendNACK: []
 16274  16EF  0024               	movlb	4	; select bank4
 16275  16F0  1696               	bsf	22,5	;volatile
 16276                           
 16277                           ;mcc_generated_files/i2c1_driver.c: 205:     SSP1CON2bits.ACKEN = 1;
 16278  16F1  1616               	bsf	22,4	;volatile
 16279  16F2  0008               	return
 16280  16F3                     __end_ofi1_i2c1_driver_sendNACK:	
 16281                           
 16282                           	psect	text98
 16283  16B0                     __ptext98:	
 16284 ;; *************** function _i2c1_driver_resetBus *****************
 16285 ;; Defined at:
 16286 ;;		line 141 in file "mcc_generated_files/i2c1_driver.c"
 16287 ;; Parameters:    Size  Location     Type
 16288 ;;		None
 16289 ;; Auto vars:     Size  Location     Type
 16290 ;;		None
 16291 ;; Return value:  Size  Location     Type
 16292 ;;                  1    wreg      void 
 16293 ;; Registers used:
 16294 ;;		None
 16295 ;; Tracked objects:
 16296 ;;		On entry : 0/0
 16297 ;;		On exit  : 0/0
 16298 ;;		Unchanged: 0/0
 16299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16300 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16301 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16302 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16303 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16304 ;;Total ram usage:        0 bytes
 16305 ;; Hardware stack levels used:    1
 16306 ;; This function calls:
 16307 ;;		Nothing
 16308 ;; This function is called by:
 16309 ;;		_do_I2C_RESET
 16310 ;; This function uses a non-reentrant model
 16311 ;;
 16312                           
 16313                           
 16314                           ;psect for function _i2c1_driver_resetBus
 16315  16B0                     _i2c1_driver_resetBus:	
 16316                           
 16317                           ;incstack = 0
 16318                           ; Regs used in _i2c1_driver_resetBus: []
 16319  16B0  0008               	return
 16320  16B1                     __end_of_i2c1_driver_resetBus:	
 16321                           
 16322                           	psect	text99
 16323  16BA                     __ptext99:	
 16324 ;; *************** function i1_i2c1_driver_startRX *****************
 16325 ;; Defined at:
 16326 ;;		line 166 in file "mcc_generated_files/i2c1_driver.c"
 16327 ;; Parameters:    Size  Location     Type
 16328 ;;		None
 16329 ;; Auto vars:     Size  Location     Type
 16330 ;;		None
 16331 ;; Return value:  Size  Location     Type
 16332 ;;                  1    wreg      void 
 16333 ;; Registers used:
 16334 ;;		None
 16335 ;; Tracked objects:
 16336 ;;		On entry : 0/0
 16337 ;;		On exit  : 0/0
 16338 ;;		Unchanged: 0/0
 16339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16341 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16343 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16344 ;;Total ram usage:        0 bytes
 16345 ;; Hardware stack levels used:    1
 16346 ;; This function calls:
 16347 ;;		Nothing
 16348 ;; This function is called by:
 16349 ;;		_do_I2C_RCEN
 16350 ;; This function uses a non-reentrant model
 16351 ;;
 16352                           
 16353                           
 16354                           ;psect for function i1_i2c1_driver_startRX
 16355  16BA                     i1_i2c1_driver_startRX:	
 16356                           
 16357                           ;mcc_generated_files/i2c1_driver.c: 168:     SSP1CON2bits.RCEN = 1;
 16358                           
 16359                           ;incstack = 0
 16360                           ; Regs used in i1_i2c1_driver_startRX: []
 16361  16BA  0024               	movlb	4	; select bank4
 16362  16BB  1596               	bsf	22,3	;volatile
 16363  16BC  0008               	return
 16364  16BD                     __end_ofi1_i2c1_driver_startRX:	
 16365                           
 16366                           	psect	text100
 16367  0002                     __ptext100:	
 16368 ;; *************** function _returnReset *****************
 16369 ;; Defined at:
 16370 ;;		line 448 in file "mcc_generated_files/drivers/i2c_master.c"
 16371 ;; Parameters:    Size  Location     Type
 16372 ;;  p               1    0[COMMON] PTR void 
 16373 ;;		 -> NULL(0), 
 16374 ;; Auto vars:     Size  Location     Type
 16375 ;;		None
 16376 ;; Return value:  Size  Location     Type
 16377 ;;                  1    wreg      enum E6966
 16378 ;; Registers used:
 16379 ;;		wreg
 16380 ;; Tracked objects:
 16381 ;;		On entry : 0/0
 16382 ;;		On exit  : 0/0
 16383 ;;		Unchanged: 0/0
 16384 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16385 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16386 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16387 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16388 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16389 ;;Total ram usage:        1 bytes
 16390 ;; Hardware stack levels used:    1
 16391 ;; This function calls:
 16392 ;;		Nothing
 16393 ;; This function is called by:
 16394 ;;		_i2c_open
 16395 ;;		_do_I2C_DO_ADDRESS_NACK
 16396 ;;		_do_I2C_TX
 16397 ;;		_do_I2C_RX
 16398 ;;		_do_I2C_TX_EMPTY
 16399 ;; This function uses a non-reentrant model
 16400 ;;
 16401                           
 16402                           
 16403                           ;psect for function _returnReset
 16404  0002                     _returnReset:	
 16405                           
 16406                           ;mcc_generated_files/drivers/i2c_master.c: 448: static i2c_operations_t returnReset(void
      +                           *p);mcc_generated_files/drivers/i2c_master.c: 449: {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 450:     return i2c_reset_link;
 16407                           
 16408                           ;incstack = 0
 16409                           ; Regs used in _returnReset: [wreg]
 16410  0002  3005               	movlw	5
 16411  0003  0008               	return
 16412  0004                     __end_of_returnReset:	
 16413                           
 16414                           	psect	text101
 16415  0800                     __ptext101:	
 16416 ;; *************** function _returnStop *****************
 16417 ;; Defined at:
 16418 ;;		line 443 in file "mcc_generated_files/drivers/i2c_master.c"
 16419 ;; Parameters:    Size  Location     Type
 16420 ;;  p               1    0[COMMON] PTR void 
 16421 ;;		 -> NULL(0), 
 16422 ;; Auto vars:     Size  Location     Type
 16423 ;;		None
 16424 ;; Return value:  Size  Location     Type
 16425 ;;                  1    wreg      enum E6966
 16426 ;; Registers used:
 16427 ;;		wreg
 16428 ;; Tracked objects:
 16429 ;;		On entry : 0/0
 16430 ;;		On exit  : 0/0
 16431 ;;		Unchanged: 0/0
 16432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16433 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16434 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16435 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16436 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16437 ;;Total ram usage:        1 bytes
 16438 ;; Hardware stack levels used:    1
 16439 ;; This function calls:
 16440 ;;		Nothing
 16441 ;; This function is called by:
 16442 ;;		_i2c_open
 16443 ;;		_setCallBack
 16444 ;;		_do_I2C_DO_ADDRESS_NACK
 16445 ;;		_do_I2C_TX
 16446 ;;		_do_I2C_RX
 16447 ;;		_do_I2C_TX_EMPTY
 16448 ;; This function uses a non-reentrant model
 16449 ;;
 16450                           
 16451                           
 16452                           ;psect for function _returnStop
 16453  0800                     _returnStop:	
 16454                           
 16455                           ;mcc_generated_files/drivers/i2c_master.c: 443: static i2c_operations_t returnStop(void 
      +                          *p);mcc_generated_files/drivers/i2c_master.c: 444: {;mcc_generated_files/drivers/i2c_mas
      +                          ter.c: 445:     return i2c_stop;
 16456                           
 16457                           ;incstack = 0
 16458                           ; Regs used in _returnStop: [wreg]
 16459  0800  3001               	movlw	1
 16460  0801  0008               	return
 16461  0802                     __end_of_returnStop:	
 16462                           
 16463                           	psect	text102
 16464  16B7                     __ptext102:	
 16465 ;; *************** function i1_i2c1_driver_stop *****************
 16466 ;; Defined at:
 16467 ;;		line 156 in file "mcc_generated_files/i2c1_driver.c"
 16468 ;; Parameters:    Size  Location     Type
 16469 ;;		None
 16470 ;; Auto vars:     Size  Location     Type
 16471 ;;		None
 16472 ;; Return value:  Size  Location     Type
 16473 ;;                  1    wreg      void 
 16474 ;; Registers used:
 16475 ;;		None
 16476 ;; Tracked objects:
 16477 ;;		On entry : 0/0
 16478 ;;		On exit  : 0/0
 16479 ;;		Unchanged: 0/0
 16480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16484 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16485 ;;Total ram usage:        0 bytes
 16486 ;; Hardware stack levels used:    1
 16487 ;; This function calls:
 16488 ;;		Nothing
 16489 ;; This function is called by:
 16490 ;;		_do_I2C_SEND_STOP
 16491 ;; This function uses a non-reentrant model
 16492 ;;
 16493                           
 16494                           
 16495                           ;psect for function i1_i2c1_driver_stop
 16496  16B7                     i1_i2c1_driver_stop:	
 16497                           
 16498                           ;mcc_generated_files/i2c1_driver.c: 158:     SSP1CON2bits.PEN = 1;
 16499                           
 16500                           ;incstack = 0
 16501                           ; Regs used in i1_i2c1_driver_stop: []
 16502  16B7  0024               	movlb	4	; select bank4
 16503  16B8  1516               	bsf	22,2	;volatile
 16504  16B9  0008               	return
 16505  16BA                     __end_ofi1_i2c1_driver_stop:	
 16506                           
 16507                           	psect	text103
 16508  16B4                     __ptext103:	
 16509 ;; *************** function i1_i2c1_driver_restart *****************
 16510 ;; Defined at:
 16511 ;;		line 151 in file "mcc_generated_files/i2c1_driver.c"
 16512 ;; Parameters:    Size  Location     Type
 16513 ;;		None
 16514 ;; Auto vars:     Size  Location     Type
 16515 ;;		None
 16516 ;; Return value:  Size  Location     Type
 16517 ;;                  1    wreg      void 
 16518 ;; Registers used:
 16519 ;;		None
 16520 ;; Tracked objects:
 16521 ;;		On entry : 0/0
 16522 ;;		On exit  : 0/0
 16523 ;;		Unchanged: 0/0
 16524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16525 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16526 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16527 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16528 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16529 ;;Total ram usage:        0 bytes
 16530 ;; Hardware stack levels used:    1
 16531 ;; This function calls:
 16532 ;;		Nothing
 16533 ;; This function is called by:
 16534 ;;		_do_I2C_SEND_RESTART_READ
 16535 ;;		_do_I2C_SEND_RESTART_WRITE
 16536 ;;		_do_I2C_SEND_RESTART
 16537 ;; This function uses a non-reentrant model
 16538 ;;
 16539                           
 16540                           
 16541                           ;psect for function i1_i2c1_driver_restart
 16542  16B4                     i1_i2c1_driver_restart:	
 16543                           
 16544                           ;mcc_generated_files/i2c1_driver.c: 153:     SSP1CON2bits.RSEN = 1;
 16545                           
 16546                           ;incstack = 0
 16547                           ; Regs used in i1_i2c1_driver_restart: []
 16548  16B4  0024               	movlb	4	; select bank4
 16549  16B5  1496               	bsf	22,1	;volatile
 16550  16B6  0008               	return
 16551  16B7                     __end_ofi1_i2c1_driver_restart:	
 16552                           
 16553                           	psect	text104
 16554  16EB                     __ptext104:	
 16555 ;; *************** function _i2c1_driver_sendACK *****************
 16556 ;; Defined at:
 16557 ;;		line 196 in file "mcc_generated_files/i2c1_driver.c"
 16558 ;; Parameters:    Size  Location     Type
 16559 ;;		None
 16560 ;; Auto vars:     Size  Location     Type
 16561 ;;		None
 16562 ;; Return value:  Size  Location     Type
 16563 ;;                  1    wreg      void 
 16564 ;; Registers used:
 16565 ;;		None
 16566 ;; Tracked objects:
 16567 ;;		On entry : 0/0
 16568 ;;		On exit  : 0/0
 16569 ;;		Unchanged: 0/0
 16570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16572 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16573 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16574 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16575 ;;Total ram usage:        0 bytes
 16576 ;; Hardware stack levels used:    1
 16577 ;; This function calls:
 16578 ;;		Nothing
 16579 ;; This function is called by:
 16580 ;;		_do_I2C_DO_ACK
 16581 ;;		_do_I2C_RX
 16582 ;;		_I2C_Send_ACK
 16583 ;; This function uses a non-reentrant model
 16584 ;;
 16585                           
 16586                           
 16587                           ;psect for function _i2c1_driver_sendACK
 16588  16EB                     _i2c1_driver_sendACK:	
 16589                           
 16590                           ;mcc_generated_files/i2c1_driver.c: 198:     SSP1CON2bits.ACKDT = 0;
 16591                           
 16592                           ;incstack = 0
 16593                           ; Regs used in _i2c1_driver_sendACK: []
 16594  16EB  0024               	movlb	4	; select bank4
 16595  16EC  1296               	bcf	22,5	;volatile
 16596                           
 16597                           ;mcc_generated_files/i2c1_driver.c: 199:     SSP1CON2bits.ACKEN = 1;
 16598  16ED  1616               	bsf	22,4	;volatile
 16599  16EE  0008               	return
 16600  16EF                     __end_of_i2c1_driver_sendACK:	
 16601                           
 16602                           	psect	text105
 16603  1721                     __ptext105:	
 16604 ;; *************** function _PIN_MANAGER_IOC *****************
 16605 ;; Defined at:
 16606 ;;		line 132 in file "mcc_generated_files/pin_manager.c"
 16607 ;; Parameters:    Size  Location     Type
 16608 ;;		None
 16609 ;; Auto vars:     Size  Location     Type
 16610 ;;		None
 16611 ;; Return value:  Size  Location     Type
 16612 ;;                  1    wreg      void 
 16613 ;; Registers used:
 16614 ;;		wreg, status,2, status,0, pclath, cstack
 16615 ;; Tracked objects:
 16616 ;;		On entry : 0/0
 16617 ;;		On exit  : 0/0
 16618 ;;		Unchanged: 0/0
 16619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16621 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16622 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16623 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16624 ;;Total ram usage:        0 bytes
 16625 ;; Hardware stack levels used:    1
 16626 ;; Hardware stack levels required when called:    2
 16627 ;; This function calls:
 16628 ;;		_IOCAF4_ISR
 16629 ;; This function is called by:
 16630 ;;		_INTERRUPT_InterruptManager
 16631 ;; This function uses a non-reentrant model
 16632 ;;
 16633                           
 16634                           
 16635                           ;psect for function _PIN_MANAGER_IOC
 16636  1721                     _PIN_MANAGER_IOC:	
 16637                           
 16638                           ;mcc_generated_files/pin_manager.c: 135:     if(IOCAFbits.IOCAF4 == 1)
 16639                           
 16640                           ;incstack = 0
 16641                           ; Regs used in _PIN_MANAGER_IOC: [wreg+status,2+status,0+pclath+cstack]
 16642  1721  0027               	movlb	7	; select bank7
 16643  1722  1E13               	btfss	19,4	;volatile
 16644  1723  0008               	return
 16645                           
 16646                           ;mcc_generated_files/pin_manager.c: 136:     {;mcc_generated_files/pin_manager.c: 137:  
      +                                 IOCAF4_ISR();
 16647  1724  3197  27F3         	fcall	_IOCAF4_ISR
 16648  1726  0008               	return
 16649  1727                     __end_of_PIN_MANAGER_IOC:	
 16650                           
 16651                           	psect	text106
 16652  17F3                     __ptext106:	
 16653 ;; *************** function _IOCAF4_ISR *****************
 16654 ;; Defined at:
 16655 ;;		line 144 in file "mcc_generated_files/pin_manager.c"
 16656 ;; Parameters:    Size  Location     Type
 16657 ;;		None
 16658 ;; Auto vars:     Size  Location     Type
 16659 ;;		None
 16660 ;; Return value:  Size  Location     Type
 16661 ;;                  1    wreg      void 
 16662 ;; Registers used:
 16663 ;;		wreg, status,2, status,0, pclath, cstack
 16664 ;; Tracked objects:
 16665 ;;		On entry : 0/0
 16666 ;;		On exit  : 0/0
 16667 ;;		Unchanged: 0/0
 16668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16669 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16670 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16671 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16672 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16673 ;;Total ram usage:        0 bytes
 16674 ;; Hardware stack levels used:    1
 16675 ;; Hardware stack levels required when called:    1
 16676 ;; This function calls:
 16677 ;;		Absolute function
 16678 ;;		_IOCAF4_DefaultInterruptHandler
 16679 ;; This function is called by:
 16680 ;;		_PIN_MANAGER_IOC
 16681 ;; This function uses a non-reentrant model
 16682 ;;
 16683                           
 16684                           
 16685                           ;psect for function _IOCAF4_ISR
 16686  17F3                     _IOCAF4_ISR:	
 16687                           
 16688                           ;mcc_generated_files/pin_manager.c: 149:     if(IOCAF4_InterruptHandler)
 16689                           
 16690                           ;incstack = 0
 16691                           ; Regs used in _IOCAF4_ISR: [wreg+status,2+status,0+pclath+cstack]
 16692  17F3  0021               	movlb	1	; select bank1
 16693  17F4  086C               	movf	_IOCAF4_InterruptHandler^(0+128),w
 16694  17F5  046D               	iorwf	(_IOCAF4_InterruptHandler+1)^(0+128),w
 16695  17F6  1903               	btfsc	3,2
 16696  17F7  2FFD               	goto	i1l5170
 16697                           
 16698                           ;mcc_generated_files/pin_manager.c: 150:     {;mcc_generated_files/pin_manager.c: 151:  
      +                                 IOCAF4_InterruptHandler();
 16699  17F8  086D               	movf	(_IOCAF4_InterruptHandler+1)^(0+128),w
 16700  17F9  008A               	movwf	10
 16701  17FA  086C               	movf	_IOCAF4_InterruptHandler^(0+128),w
 16702  17FB  000A               	callw
 16703  17FC  3197               	pagesel	$
 16704  17FD                     i1l5170:	
 16705                           
 16706                           ;mcc_generated_files/pin_manager.c: 153:     IOCAFbits.IOCAF4 = 0;
 16707  17FD  0027               	movlb	7	; select bank7
 16708  17FE  1213               	bcf	19,4	;volatile
 16709  17FF  0008               	return
 16710  1800                     __end_of_IOCAF4_ISR:	
 16711                           
 16712                           	psect	text107
 16713  16AF                     __ptext107:	
 16714 ;; *************** function _IOCAF4_DefaultInterruptHandler *****************
 16715 ;; Defined at:
 16716 ;;		line 166 in file "mcc_generated_files/pin_manager.c"
 16717 ;; Parameters:    Size  Location     Type
 16718 ;;		None
 16719 ;; Auto vars:     Size  Location     Type
 16720 ;;		None
 16721 ;; Return value:  Size  Location     Type
 16722 ;;                  1    wreg      void 
 16723 ;; Registers used:
 16724 ;;		None
 16725 ;; Tracked objects:
 16726 ;;		On entry : 0/0
 16727 ;;		On exit  : 0/0
 16728 ;;		Unchanged: 0/0
 16729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16730 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16731 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16732 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16733 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16734 ;;Total ram usage:        0 bytes
 16735 ;; Hardware stack levels used:    1
 16736 ;; This function calls:
 16737 ;;		Nothing
 16738 ;; This function is called by:
 16739 ;;		_PIN_MANAGER_Initialize
 16740 ;;		_IOCAF4_ISR
 16741 ;; This function uses a non-reentrant model
 16742 ;;
 16743                           
 16744                           
 16745                           ;psect for function _IOCAF4_DefaultInterruptHandler
 16746  16AF                     _IOCAF4_DefaultInterruptHandler:	
 16747                           
 16748                           ;incstack = 0
 16749                           ; Regs used in _IOCAF4_DefaultInterruptHandler: []
 16750  16AF  0008               	return
 16751  16B0                     __end_of_IOCAF4_DefaultInterruptHandler:	
 16752                           
 16753                           	psect	text108
 16754  0952                     __ptext108:	
 16755 ;; *************** function _EUSART_Transmit_ISR *****************
 16756 ;; Defined at:
 16757 ;;		line 205 in file "mcc_generated_files/eusart.c"
 16758 ;; Parameters:    Size  Location     Type
 16759 ;;		None
 16760 ;; Auto vars:     Size  Location     Type
 16761 ;;		None
 16762 ;; Return value:  Size  Location     Type
 16763 ;;                  1    wreg      void 
 16764 ;; Registers used:
 16765 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16766 ;; Tracked objects:
 16767 ;;		On entry : 0/0
 16768 ;;		On exit  : 0/0
 16769 ;;		Unchanged: 0/0
 16770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16771 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16772 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16773 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16774 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16775 ;;Total ram usage:        1 bytes
 16776 ;; Hardware stack levels used:    1
 16777 ;; This function calls:
 16778 ;;		Nothing
 16779 ;; This function is called by:
 16780 ;;		_EUSART_Initialize
 16781 ;;		_INTERRUPT_InterruptManager
 16782 ;; This function uses a non-reentrant model
 16783 ;;
 16784                           
 16785                           
 16786                           ;psect for function _EUSART_Transmit_ISR
 16787  0952                     _EUSART_Transmit_ISR:	
 16788                           
 16789                           ;mcc_generated_files/eusart.c: 209:     if(sizeof(eusartTxBuffer) > eusartTxBufferRemain
      +                          ing)
 16790                           
 16791                           ;incstack = 0
 16792                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 16793  0952  3008               	movlw	8
 16794  0953  0020               	movlb	0	; select bank0
 16795  0954  026E               	subwf	_eusartTxBufferRemaining,w	;volatile
 16796  0955  1803               	skipnc
 16797  0956  296D               	goto	i1l1416
 16798                           
 16799                           ;mcc_generated_files/eusart.c: 210:     {;mcc_generated_files/eusart.c: 211:         TX1
      +                          REG = eusartTxBuffer[eusartTxTail++];
 16800  0957  0873               	movf	_eusartTxTail,w
 16801  0958  3ECD               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
 16802  0959  0086               	movwf	6
 16803  095A  3001               	movlw	1	; select bank3/4
 16804  095B  0087               	movwf	7
 16805  095C  0801               	movf	1,w
 16806  095D  0023               	movlb	3	; select bank3
 16807  095E  009A               	movwf	26	;volatile
 16808  095F  3001               	movlw	1
 16809  0960  00F6               	movwf	??_EUSART_Transmit_ISR
 16810  0961  0876               	movf	??_EUSART_Transmit_ISR,w
 16811  0962  07F3               	addwf	_eusartTxTail,f	;volatile
 16812                           
 16813                           ;mcc_generated_files/eusart.c: 212:         if(sizeof(eusartTxBuffer) <= eusartTxTail)
 16814  0963  3008               	movlw	8
 16815  0964  0273               	subwf	_eusartTxTail,w	;volatile
 16816  0965  1803               	btfsc	3,0
 16817                           
 16818                           ;mcc_generated_files/eusart.c: 213:         {;mcc_generated_files/eusart.c: 214:        
      +                               eusartTxTail = 0;
 16819  0966  01F3               	clrf	_eusartTxTail	;volatile
 16820                           
 16821                           ;mcc_generated_files/eusart.c: 216:         eusartTxBufferRemaining++;
 16822  0967  3001               	movlw	1
 16823  0968  00F6               	movwf	??_EUSART_Transmit_ISR
 16824  0969  0876               	movf	??_EUSART_Transmit_ISR,w
 16825  096A  0020               	movlb	0	; select bank0
 16826  096B  07EE               	addwf	_eusartTxBufferRemaining,f	;volatile
 16827                           
 16828                           ;mcc_generated_files/eusart.c: 217:     }
 16829  096C  0008               	return
 16830  096D                     i1l1416:	
 16831                           ;mcc_generated_files/eusart.c: 218:     else
 16832                           
 16833                           
 16834                           ;mcc_generated_files/eusart.c: 219:     {;mcc_generated_files/eusart.c: 220:         PIE
      +                          1bits.TXIE = 0;
 16835  096D  0021               	movlb	1	; select bank1
 16836  096E  1211               	bcf	17,4	;volatile
 16837  096F  0008               	return
 16838  0970                     __end_of_EUSART_Transmit_ISR:	
 16839                           
 16840                           	psect	text109
 16841  0C01                     __ptext109:	
 16842 ;; *************** function _EUSART_Receive_ISR *****************
 16843 ;; Defined at:
 16844 ;;		line 224 in file "mcc_generated_files/eusart.c"
 16845 ;; Parameters:    Size  Location     Type
 16846 ;;		None
 16847 ;; Auto vars:     Size  Location     Type
 16848 ;;		None
 16849 ;; Return value:  Size  Location     Type
 16850 ;;                  1    wreg      void 
 16851 ;; Registers used:
 16852 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16853 ;; Tracked objects:
 16854 ;;		On entry : 0/0
 16855 ;;		On exit  : 0/0
 16856 ;;		Unchanged: 0/0
 16857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16858 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16859 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16860 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16861 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16862 ;;Total ram usage:        0 bytes
 16863 ;; Hardware stack levels used:    1
 16864 ;; Hardware stack levels required when called:    2
 16865 ;; This function calls:
 16866 ;;		Absolute function
 16867 ;;		_EUSART_DefaultErrorHandler
 16868 ;;		_EUSART_DefaultFramingErrorHandler
 16869 ;;		_EUSART_DefaultOverrunErrorHandler
 16870 ;;		_EUSART_RxDataHandler
 16871 ;; This function is called by:
 16872 ;;		_EUSART_Initialize
 16873 ;;		_INTERRUPT_InterruptManager
 16874 ;; This function uses a non-reentrant model
 16875 ;;
 16876                           
 16877                           
 16878                           ;psect for function _EUSART_Receive_ISR
 16879  0C01                     _EUSART_Receive_ISR:	
 16880                           
 16881                           ;mcc_generated_files/eusart.c: 227:     eusartRxStatusBuffer[eusartRxHead].status = 0;
 16882                           
 16883                           ;incstack = 0
 16884                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16885  0C01  0872               	movf	_eusartRxHead,w	;volatile
 16886  0C02  3EBD               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 16887  0C03  0086               	movwf	6
 16888  0C04  3001               	movlw	1	; select bank3/4
 16889  0C05  0087               	movwf	7
 16890  0C06  0181               	clrf	1
 16891                           
 16892                           ;mcc_generated_files/eusart.c: 229:     if(RC1STAbits.FERR){
 16893  0C07  0023               	movlb	3	; select bank3
 16894  0C08  1D1D               	btfss	29,2	;volatile
 16895  0C09  2C15               	goto	i1l5964
 16896                           
 16897                           ;mcc_generated_files/eusart.c: 230:         eusartRxStatusBuffer[eusartRxHead].ferr = 1;
 16898  0C0A  0872               	movf	_eusartRxHead,w	;volatile
 16899  0C0B  3EBD               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 16900  0C0C  0086               	movwf	6
 16901  0C0D  3001               	movlw	1	; select bank3/4
 16902  0C0E  0087               	movwf	7
 16903  0C0F  1481               	bsf	1,1
 16904                           
 16905                           ;mcc_generated_files/eusart.c: 231:         EUSART_FramingErrorHandler();
 16906  0C10  085A               	movf	(_EUSART_FramingErrorHandler+1)^(0+384),w
 16907  0C11  008A               	movwf	10
 16908  0C12  0859               	movf	_EUSART_FramingErrorHandler^(0+384),w
 16909  0C13  000A               	callw
 16910  0C14  318C               	pagesel	$
 16911  0C15                     i1l5964:	
 16912                           
 16913                           ;mcc_generated_files/eusart.c: 234:     if(RC1STAbits.OERR){
 16914  0C15  0023               	movlb	3	; select bank3
 16915  0C16  1C9D               	btfss	29,1	;volatile
 16916  0C17  2C23               	goto	i1l5970
 16917                           
 16918                           ;mcc_generated_files/eusart.c: 235:         eusartRxStatusBuffer[eusartRxHead].oerr = 1;
 16919  0C18  0872               	movf	_eusartRxHead,w	;volatile
 16920  0C19  3EBD               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 16921  0C1A  0086               	movwf	6
 16922  0C1B  3001               	movlw	1	; select bank3/4
 16923  0C1C  0087               	movwf	7
 16924  0C1D  1501               	bsf	1,2
 16925                           
 16926                           ;mcc_generated_files/eusart.c: 236:         EUSART_OverrunErrorHandler();
 16927  0C1E  0858               	movf	(_EUSART_OverrunErrorHandler+1)^(0+384),w
 16928  0C1F  008A               	movwf	10
 16929  0C20  0857               	movf	_EUSART_OverrunErrorHandler^(0+384),w
 16930  0C21  000A               	callw
 16931  0C22  318C               	pagesel	$
 16932  0C23                     i1l5970:	
 16933                           
 16934                           ;mcc_generated_files/eusart.c: 239:     if(eusartRxStatusBuffer[eusartRxHead].status){
 16935  0C23  0872               	movf	_eusartRxHead,w	;volatile
 16936  0C24  3EBD               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 16937  0C25  0086               	movwf	6
 16938  0C26  3001               	movlw	1	; select bank3/4
 16939  0C27  0087               	movwf	7
 16940  0C28  0801               	movf	1,w
 16941  0C29  1903               	btfsc	3,2
 16942  0C2A  2C32               	goto	i1l5974
 16943                           
 16944                           ;mcc_generated_files/eusart.c: 240:         EUSART_ErrorHandler();
 16945  0C2B  0023               	movlb	3	; select bank3
 16946  0C2C  0856               	movf	(_EUSART_ErrorHandler+1)^(0+384),w
 16947  0C2D  008A               	movwf	10
 16948  0C2E  0855               	movf	_EUSART_ErrorHandler^(0+384),w
 16949  0C2F  000A               	callw
 16950  0C30  318C               	pagesel	$
 16951                           
 16952                           ;mcc_generated_files/eusart.c: 241:     } else {
 16953  0C31  0008               	return
 16954  0C32                     i1l5974:	
 16955                           
 16956                           ;mcc_generated_files/eusart.c: 242:         EUSART_RxDataHandler();
 16957  0C32  3188  209E         	fcall	_EUSART_RxDataHandler
 16958  0C34  0008               	return
 16959  0C35                     __end_of_EUSART_Receive_ISR:	
 16960                           
 16961                           	psect	text110
 16962  16E7                     __ptext110:	
 16963 ;; *************** function _EUSART_DefaultOverrunErrorHandler *****************
 16964 ;; Defined at:
 16965 ;;		line 260 in file "mcc_generated_files/eusart.c"
 16966 ;; Parameters:    Size  Location     Type
 16967 ;;		None
 16968 ;; Auto vars:     Size  Location     Type
 16969 ;;		None
 16970 ;; Return value:  Size  Location     Type
 16971 ;;                  1    wreg      void 
 16972 ;; Registers used:
 16973 ;;		None
 16974 ;; Tracked objects:
 16975 ;;		On entry : 0/0
 16976 ;;		On exit  : 0/0
 16977 ;;		Unchanged: 0/0
 16978 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16979 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16980 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16981 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16982 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16983 ;;Total ram usage:        0 bytes
 16984 ;; Hardware stack levels used:    1
 16985 ;; This function calls:
 16986 ;;		Nothing
 16987 ;; This function is called by:
 16988 ;;		_EUSART_Initialize
 16989 ;;		_EUSART_Receive_ISR
 16990 ;; This function uses a non-reentrant model
 16991 ;;
 16992                           
 16993                           
 16994                           ;psect for function _EUSART_DefaultOverrunErrorHandler
 16995  16E7                     _EUSART_DefaultOverrunErrorHandler:	
 16996                           
 16997                           ;mcc_generated_files/eusart.c: 263:     RC1STAbits.CREN = 0;
 16998                           
 16999                           ;incstack = 0
 17000                           ; Regs used in _EUSART_DefaultOverrunErrorHandler: []
 17001  16E7  0023               	movlb	3	; select bank3
 17002  16E8  121D               	bcf	29,4	;volatile
 17003                           
 17004                           ;mcc_generated_files/eusart.c: 264:     RC1STAbits.CREN = 1;
 17005  16E9  161D               	bsf	29,4	;volatile
 17006  16EA  0008               	return
 17007  16EB                     __end_of_EUSART_DefaultOverrunErrorHandler:	
 17008                           
 17009                           	psect	text111
 17010  16AE                     __ptext111:	
 17011 ;; *************** function _EUSART_DefaultFramingErrorHandler *****************
 17012 ;; Defined at:
 17013 ;;		line 258 in file "mcc_generated_files/eusart.c"
 17014 ;; Parameters:    Size  Location     Type
 17015 ;;		None
 17016 ;; Auto vars:     Size  Location     Type
 17017 ;;		None
 17018 ;; Return value:  Size  Location     Type
 17019 ;;                  1    wreg      void 
 17020 ;; Registers used:
 17021 ;;		None
 17022 ;; Tracked objects:
 17023 ;;		On entry : 0/0
 17024 ;;		On exit  : 0/0
 17025 ;;		Unchanged: 0/0
 17026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17027 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17028 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17029 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17030 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17031 ;;Total ram usage:        0 bytes
 17032 ;; Hardware stack levels used:    1
 17033 ;; This function calls:
 17034 ;;		Nothing
 17035 ;; This function is called by:
 17036 ;;		_EUSART_Initialize
 17037 ;;		_EUSART_Receive_ISR
 17038 ;; This function uses a non-reentrant model
 17039 ;;
 17040                           
 17041                           
 17042                           ;psect for function _EUSART_DefaultFramingErrorHandler
 17043  16AE                     _EUSART_DefaultFramingErrorHandler:	
 17044                           
 17045                           ;incstack = 0
 17046                           ; Regs used in _EUSART_DefaultFramingErrorHandler: []
 17047  16AE  0008               	return
 17048  16AF                     __end_of_EUSART_DefaultFramingErrorHandler:	
 17049                           
 17050                           	psect	text112
 17051  16B1                     __ptext112:	
 17052 ;; *************** function _EUSART_DefaultErrorHandler *****************
 17053 ;; Defined at:
 17054 ;;		line 268 in file "mcc_generated_files/eusart.c"
 17055 ;; Parameters:    Size  Location     Type
 17056 ;;		None
 17057 ;; Auto vars:     Size  Location     Type
 17058 ;;		None
 17059 ;; Return value:  Size  Location     Type
 17060 ;;                  1    wreg      void 
 17061 ;; Registers used:
 17062 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17063 ;; Tracked objects:
 17064 ;;		On entry : 0/0
 17065 ;;		On exit  : 0/0
 17066 ;;		Unchanged: 0/0
 17067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17068 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17069 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17070 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17071 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17072 ;;Total ram usage:        0 bytes
 17073 ;; Hardware stack levels used:    1
 17074 ;; Hardware stack levels required when called:    1
 17075 ;; This function calls:
 17076 ;;		_EUSART_RxDataHandler
 17077 ;; This function is called by:
 17078 ;;		_EUSART_Initialize
 17079 ;;		_EUSART_Receive_ISR
 17080 ;; This function uses a non-reentrant model
 17081 ;;
 17082                           
 17083                           
 17084                           ;psect for function _EUSART_DefaultErrorHandler
 17085  16B1                     _EUSART_DefaultErrorHandler:	
 17086                           
 17087                           ;mcc_generated_files/eusart.c: 269:     EUSART_RxDataHandler();
 17088                           
 17089                           ;incstack = 0
 17090                           ; Regs used in _EUSART_DefaultErrorHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 17091  16B1  3188  209E         	fcall	_EUSART_RxDataHandler
 17092  16B3  0008               	return
 17093  16B4                     __end_of_EUSART_DefaultErrorHandler:	
 17094                           
 17095                           	psect	text113
 17096  089E                     __ptext113:	
 17097 ;; *************** function _EUSART_RxDataHandler *****************
 17098 ;; Defined at:
 17099 ;;		line 248 in file "mcc_generated_files/eusart.c"
 17100 ;; Parameters:    Size  Location     Type
 17101 ;;		None
 17102 ;; Auto vars:     Size  Location     Type
 17103 ;;		None
 17104 ;; Return value:  Size  Location     Type
 17105 ;;                  1    wreg      void 
 17106 ;; Registers used:
 17107 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17108 ;; Tracked objects:
 17109 ;;		On entry : 0/0
 17110 ;;		On exit  : 0/0
 17111 ;;		Unchanged: 0/0
 17112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17113 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17114 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17115 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17116 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17117 ;;Total ram usage:        1 bytes
 17118 ;; Hardware stack levels used:    1
 17119 ;; This function calls:
 17120 ;;		Nothing
 17121 ;; This function is called by:
 17122 ;;		_EUSART_Receive_ISR
 17123 ;;		_EUSART_DefaultErrorHandler
 17124 ;; This function uses a non-reentrant model
 17125 ;;
 17126                           
 17127                           
 17128                           ;psect for function _EUSART_RxDataHandler
 17129  089E                     _EUSART_RxDataHandler:	
 17130                           
 17131                           ;mcc_generated_files/eusart.c: 250:     eusartRxBuffer[eusartRxHead++] = RC1REG;
 17132                           
 17133                           ;incstack = 0
 17134                           ; Regs used in _EUSART_RxDataHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
 17135  089E  0023               	movlb	3	; select bank3
 17136  089F  0819               	movf	25,w	;volatile
 17137  08A0  00F6               	movwf	??_EUSART_RxDataHandler
 17138  08A1  0872               	movf	_eusartRxHead,w
 17139  08A2  3EC5               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
 17140  08A3  0086               	movwf	6
 17141  08A4  3001               	movlw	1	; select bank3/4
 17142  08A5  0087               	movwf	7
 17143  08A6  0876               	movf	??_EUSART_RxDataHandler,w
 17144  08A7  0081               	movwf	1
 17145  08A8  3001               	movlw	1
 17146  08A9  00F6               	movwf	??_EUSART_RxDataHandler
 17147  08AA  0876               	movf	??_EUSART_RxDataHandler,w
 17148  08AB  07F2               	addwf	_eusartRxHead,f	;volatile
 17149                           
 17150                           ;mcc_generated_files/eusart.c: 251:     if(sizeof(eusartRxBuffer) <= eusartRxHead)
 17151  08AC  3008               	movlw	8
 17152  08AD  0272               	subwf	_eusartRxHead,w	;volatile
 17153  08AE  1803               	btfsc	3,0
 17154                           
 17155                           ;mcc_generated_files/eusart.c: 252:     {;mcc_generated_files/eusart.c: 253:         eus
      +                          artRxHead = 0;
 17156  08AF  01F2               	clrf	_eusartRxHead	;volatile
 17157                           
 17158                           ;mcc_generated_files/eusart.c: 255:     eusartRxCount++;
 17159  08B0  3001               	movlw	1
 17160  08B1  00F6               	movwf	??_EUSART_RxDataHandler
 17161  08B2  0876               	movf	??_EUSART_RxDataHandler,w
 17162  08B3  07F0               	addwf	_eusartRxCount,f	;volatile
 17163  08B4  0008               	return
 17164  08B5                     __end_of_EUSART_RxDataHandler:	
 17165  007E                     btemp	set	126	;btemp
 17166  007E                     int$flags	set	126
 17167  007E                     wtemp0	set	126


Data Sizes:
    Strings     52
    Constant    32
    Data        9
    BSS         163
    Persistent  45
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      12
    BANK0            80     60      80
    BANK1            80     64      80
    BANK2            80     64      80
    BANK3            80      2      61
    BANK4            80      0      68
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    i2c_ISR$2804	const PTR FTN()enum E7120 size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_SEND_ADR_READ(), do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), 
		 -> do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), do_I2C_IDLE(), do_I2C_RESET(), 

    returnStop@p	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    returnReset@p	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    S52$11$0	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 16
		 -> UART_Byte@bits(BANK0[4]), STR_4(CODE[11]), STR_3(CODE[16]), STR_2(CODE[13]), 
		 -> STR_1(CODE[12]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 16
		 -> UART_Byte@bits(BANK0[4]), STR_4(CODE[11]), STR_3(CODE[16]), STR_2(CODE[13]), 
		 -> STR_1(CODE[12]), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    EUSART_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), Absolute function(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), Absolute function(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), Absolute function(), 

    wireReadDataBlock@val	PTR unsigned char  size(2) Largest target is 64
		 -> readGesture@fifo_data2(BANK1[64]), readGesture@fifo_data(BANK2[64]), 

    Display_Name@string1	PTR unsigned char  size(2) Largest target is 16
		 -> STR_4(CODE[11]), STR_3(CODE[16]), STR_2(CODE[13]), STR_1(CODE[12]), 

    names	PTR unsigned char [4] size(2) Largest target is 16
		 -> STR_4(CODE[11]), STR_3(CODE[16]), STR_2(CODE[13]), STR_1(CODE[12]), 

    IOCAF4_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCAF4_DefaultInterruptHandler(), 

    IOCAF4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCAF4_DefaultInterruptHandler(), Absolute function(), 

    i2c1_driver_i2cISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), i2c_ISR(), 

    i2c1_driver_busCollisionISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), i2c_busCollisionISR(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), Absolute function(), 

    EUSART_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), Absolute function(), 

    fsmStateTable	const PTR FTN()enum E7120[16] size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_SEND_ADR_READ(), do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), 
		 -> do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), do_I2C_IDLE(), do_I2C_RESET(), 

    S52$callbackPayload	PTR void [6] size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    i2c_status.callbackPayload	PTR void [6] size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    S52$callbackTable	PTR FTN(PTR void ,)enum E6966[6] size(2) Largest target is 1
		 -> returnReset(), returnStop(), 

    i2c_status.callbackTable	PTR FTN(PTR void ,)enum E6966[6] size(2) Largest target is 1
		 -> returnReset(), returnStop(), 

    S52$data_ptr	PTR unsigned char  size(1) Largest target is 0

    i2c_status.data_ptr	PTR unsigned char  size(1) Largest target is 0


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_i2c_ISR
    _i2c_ISR->_do_I2C_DO_ADDRESS_NACK
    _i2c_ISR->_do_I2C_RX
    _i2c_ISR->_do_I2C_TX
    _i2c_ISR->_do_I2C_TX_EMPTY
    _EUSART_Receive_ISR->_EUSART_RxDataHandler
    _EUSART_DefaultErrorHandler->_EUSART_RxDataHandler

Critical Paths under _main in BANK0

    _main->_handleGesture
    _initialize->_setMode
    _setProximityGain->_wireWriteDataByte
    _setProxIntLowThresh->_wireWriteDataByte
    _setProxIntHighThresh->_wireWriteDataByte
    _setLightIntLowThreshold->_wireWriteDataByte
    _setLightIntHighThreshold->_wireWriteDataByte
    _setLEDDrive->_wireWriteDataByte
    _setGestureWaitTime->_wireWriteDataByte
    _setGestureLEDDrive->_wireWriteDataByte
    _setGestureGain->_wireWriteDataByte
    _setGestureExitThresh->_wireWriteDataByte
    _setGestureEnterThresh->_wireWriteDataByte
    _setAmbientLightGain->_wireWriteDataByte
    _handleGesture->_readGesture
    _readGesture->_processGestureData
    _wireReadDataBlock->_I2C_Write_Byte
    _processGestureData->___awdiv
    ___awdiv->___wmul
    _isGestureAvailable->_wireReadDataByte
    _enableGestureSensor->_setMode
    _setLEDBoost->_wireWriteDataByte
    _setGestureMode->_wireWriteDataByte
    _setGestureIntEnable->_wireWriteDataByte
    _enablePower->_setMode
    _setMode->_getMode
    _wireWriteDataByte->_I2C_Write_Byte
    _getMode->_wireReadDataByte
    _wireReadDataByte->_I2C_Write_Byte
    _I2C_Write_Byte->_i2c1_driver_TXData
    _I2C_Read_Byte->_i2c1_driver_isBufferFull
    _UART_Byte->_strlen
    _SYSTEM_Initialize->_EUSART_Initialize
    _PIN_MANAGER_Initialize->_IOCAF4_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _EUSART_Initialize->_EUSART_SetTxInterruptHandler
    _Get_ADC->_Display_Name
    _Display_Name->_strlen
    _Display_Clear->_SPI_Write
    _SPI_Write->_SPI2_Exchange8bit

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _handleGesture->_readGesture

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    _handleGesture->_readGesture

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   90622
                                              0 BANK3      2     2      0
                      _Display_Clear
                       _Display_Name
                            _Get_ADC
                         _PIR_Sensor
                  _SYSTEM_Initialize
                          _UART_Byte
                _enableGestureSensor
                      _handleGesture
                         _initialize
                 _isGestureAvailable
 ---------------------------------------------------------------------------------
 (1) _initialize                                           2     2      0   54520
                                             16 BANK0      2     2      0
                   _i2c1_driver_open
                _setAmbientLightGain
              _setGestureEnterThresh
               _setGestureExitThresh
                     _setGestureGain
                _setGestureIntEnable
                 _setGestureLEDDrive
                 _setGestureWaitTime
                        _setLEDDrive
           _setLightIntHighThreshold
            _setLightIntLowThreshold
                            _setMode
               _setProxIntHighThresh
                _setProxIntLowThresh
                   _setProximityGain
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setProximityGain                                     4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setProxIntLowThresh                                  2     2      0    3429
                                             10 BANK0      2     2      0
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setProxIntHighThresh                                 2     2      0    3429
                                             10 BANK0      2     2      0
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setLightIntLowThreshold                              5     3      2    3618
                                             10 BANK0      5     3      2
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setLightIntHighThreshold                             5     3      2    3618
                                             10 BANK0      5     3      2
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setLEDDrive                                          4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureWaitTime                                   3     3      0    3633
                                             10 BANK0      3     3      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureLEDDrive                                   4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureGain                                       4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureExitThresh                                 2     2      0    3429
                                             10 BANK0      2     2      0
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureEnterThresh                                2     2      0    3429
                                             10 BANK0      2     2      0
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setAmbientLightGain                                  3     3      0    3633
                                             10 BANK0      3     3      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _i2c1_driver_open                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _handleGesture                                        1     1      0    9022
                                             59 BANK0      1     1      0
                       _Display_Name
                        _readGesture
 ---------------------------------------------------------------------------------
 (2) _readGesture                                        140   138      2    8036
                                             47 BANK0     12    10      2
                                              0 BANK1     64    64      0
                                              0 BANK2     64    64      0
                      _decodeGesture
                            _getMode
                 _isGestureAvailable
                 _processGestureData
             _resetGestureParameters
                  _wireReadDataBlock
                   _wireReadDataByte
 ---------------------------------------------------------------------------------
 (3) _wireReadDataBlock                                   11     7      4     651
                                              6 BANK0     11     7      4
                        _I2C_ReStart
                      _I2C_Read_Byte
                      _I2C_Send_NACK
                          _I2C_Start
                           _I2C_Stop
                     _I2C_Write_Byte
 ---------------------------------------------------------------------------------
 (3) _processGestureData                                  32    32      0    5864
                                             15 BANK0     32    32      0
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    2396
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              9     5      4    1165
                                              6 BANK0      9     5      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _isGestureAvailable                                   2     2      0     198
                                              9 BANK0      2     2      0
                   _wireReadDataByte
 ---------------------------------------------------------------------------------
 (3) _decodeGesture                                       18    18      0     296
                                              0 BANK0     18    18      0
 ---------------------------------------------------------------------------------
 (1) _enableGestureSensor                                  2     2      0   23076
                                             16 BANK0      2     2      0
                        _enablePower
             _resetGestureParameters
                _setGestureIntEnable
                     _setGestureMode
                        _setLEDBoost
                            _setMode
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setLEDBoost                                          4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureMode                                       3     3      0    3633
                                             10 BANK0      3     3      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureIntEnable                                  3     3      0    3667
                                             10 BANK0      3     3      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (3) _resetGestureParameters                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _enablePower                                          0     0      0    4340
                            _setMode
 ---------------------------------------------------------------------------------
 (2) _setMode                                              5     4      1    4340
                                             11 BANK0      5     4      1
                            _getMode
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _wireWriteDataByte                                    4     1      3    3398
                                              6 BANK0      4     1      3
                          _I2C_Start
                           _I2C_Stop
                     _I2C_Write_Byte
 ---------------------------------------------------------------------------------
 (3) _getMode                                              2     2      0     195
                                              9 BANK0      2     2      0
                   _wireReadDataByte
 ---------------------------------------------------------------------------------
 (2) _wireReadDataByte                                     3     3      0     161
                                              6 BANK0      3     3      0
                        _I2C_ReStart
                      _I2C_Read_Byte
                      _I2C_Send_NACK
                          _I2C_Start
                           _I2C_Stop
                     _I2C_Write_Byte
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Byte                                       5     5      0      96
                                              1 BANK0      5     5      0
                 _i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_TXData                                   1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _I2C_Stop                                             0     0      0       0
                   _i2c1_driver_stop
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_stop                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_Start                                            0     0      0       0
                  _i2c1_driver_start
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_start                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_Send_NACK                                        0     0      0       0
               _i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_sendNACK                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_Read_Byte                                        0     0      0       0
              _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
                _i2c1_driver_startRX
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_startRX                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_isBufferFull                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_getRXData                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_ReStart                                          0     0      0       0
                _i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_restart                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UART_Byte                                           15    15      0     699
                                              5 BANK0     15    15      0
                             _strlen
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     726
                     _ADC_Initialize
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PMD_Initialize
                    _PWM1_Initialize
                    _SPI2_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SPI2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PMD_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0     121
         _IOCAF4_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _IOCAF4_SetInterruptHandler                           2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0     605
                                              2 BANK0      1     1      0
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetTxInterruptHandler                         2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PIR_Sensor                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Get_ADC                                              5     5      0    1330
                                             12 BANK0      5     5      0
                  _ADC_GetConversion
                       _Display_Name
 ---------------------------------------------------------------------------------
 (2) _Display_Name                                         7     5      2     986
                                              5 BANK0      7     5      2
                          _SPI_Write
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _strlen                                               5     3      2     310
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _ADC_GetConversion                                    4     2      2      31
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _Display_Clear                                        1     1      0      62
                                              3 BANK0      1     1      0
                          _SPI_Write
 ---------------------------------------------------------------------------------
 (3) _SPI_Write                                            2     2      0      62
                                              1 BANK0      2     2      0
                  _SPI2_Exchange8bit
 ---------------------------------------------------------------------------------
 (4) _SPI2_Exchange8bit                                    1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                           0     0      0     914
                   Absolute function *
                 _EUSART_Receive_ISR *
                _EUSART_Transmit_ISR *
                    _PIN_MANAGER_IOC
                            _i2c_ISR *
                _i2c_busCollisionISR *
 ---------------------------------------------------------------------------------
 (9) _i2c_busCollisionISR                                  0     0      0       0
      _i2c1_driver_clearBusCollision
 ---------------------------------------------------------------------------------
 (10) _i2c1_driver_clearBusCollision                       0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _i2c_ISR                                              3     3      0     914
                                              3 COMMON     3     3      0
                      _do_I2C_DO_ACK *
             _do_I2C_DO_ADDRESS_NACK *
             _do_I2C_DO_NACK_RESTART *
                _do_I2C_DO_NACK_STOP *
                        _do_I2C_IDLE *
                        _do_I2C_RCEN *
                       _do_I2C_RESET *
                          _do_I2C_RX *
               _do_I2C_SEND_ADR_READ *
              _do_I2C_SEND_ADR_WRITE *
                _do_I2C_SEND_RESTART *
           _do_I2C_SEND_RESTART_READ *
          _do_I2C_SEND_RESTART_WRITE *
                   _do_I2C_SEND_STOP *
                          _do_I2C_TX *
                    _do_I2C_TX_EMPTY *
                 _i2c1_driver_isNACK
                     _mssp1_clearIRQ
 ---------------------------------------------------------------------------------
 (10) _mssp1_clearIRQ                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_TX_EMPTY                                     3     3      0     212
                                              0 COMMON     3     3      0
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                       _mssp1_setIRQ
                        _returnReset *
                         _returnStop *
 ---------------------------------------------------------------------------------
 (11) _mssp1_setIRQ                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_TX                                           3     3      0     234
                                              0 COMMON     3     3      0
           _do_I2C_SEND_RESTART_READ
          _do_I2C_SEND_RESTART_WRITE
                   _do_I2C_SEND_STOP
                 _i2c1_driver_isNACK
                        _returnReset *
                         _returnStop *
               i1_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (10) _i2c1_driver_isNACK                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _do_I2C_SEND_RESTART_WRITE                           0     0      0       0
              i1_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (11) _do_I2C_SEND_RESTART_READ                            0     0      0       0
              i1_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (10) _do_I2C_SEND_ADR_WRITE                               0     0      0      22
               i1_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (10) _do_I2C_SEND_ADR_READ                                0     0      0      22
               i1_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (11) i1_i2c1_driver_TXData                                1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_RX                                           3     3      0     212
                                              0 COMMON     3     3      0
             _do_I2C_DO_NACK_RESTART
                _do_I2C_DO_NACK_STOP
                _i2c1_driver_sendACK
                        _returnReset *
                         _returnStop *
            i1_i2c1_driver_getRXData
 ---------------------------------------------------------------------------------
 (11) i1_i2c1_driver_getRXData                             0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _do_I2C_DO_NACK_STOP                                 0     0      0       0
             i1_i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (11) _do_I2C_DO_NACK_RESTART                              0     0      0       0
             i1_i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (12) i1_i2c1_driver_sendNACK                              0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_RESET                                        0     0      0       0
               _i2c1_driver_resetBus
 ---------------------------------------------------------------------------------
 (11) _i2c1_driver_resetBus                                0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_RCEN                                         0     0      0       0
              i1_i2c1_driver_startRX
 ---------------------------------------------------------------------------------
 (11) i1_i2c1_driver_startRX                               0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_IDLE                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_DO_ADDRESS_NACK                              3     3      0     212
                                              0 COMMON     3     3      0
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                        _returnReset *
                         _returnStop *
 ---------------------------------------------------------------------------------
 (11) _returnStop                                          1     0      1       0
                                              0 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (11) _returnReset                                         1     0      1     212
                                              0 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (11) _do_I2C_SEND_STOP                                    0     0      0       0
                 i1_i2c1_driver_stop
 ---------------------------------------------------------------------------------
 (12) i1_i2c1_driver_stop                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _do_I2C_SEND_RESTART                                 0     0      0       0
              i1_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (12) i1_i2c1_driver_restart                               0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_DO_ACK                                       0     0      0       0
                _i2c1_driver_sendACK
 ---------------------------------------------------------------------------------
 (11) _i2c1_driver_sendACK                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _PIN_MANAGER_IOC                                      0     0      0       0
                         _IOCAF4_ISR
 ---------------------------------------------------------------------------------
 (10) _IOCAF4_ISR                                          0     0      0       0
                   Absolute function *
     _IOCAF4_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (11) _IOCAF4_DefaultInterruptHandler                      0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (9) _EUSART_Receive_ISR                                   0     0      0       0
                   Absolute function *
         _EUSART_DefaultErrorHandler *
  _EUSART_DefaultFramingErrorHandler *
  _EUSART_DefaultOverrunErrorHandler *
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (10) _EUSART_DefaultOverrunErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _EUSART_DefaultFramingErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _EUSART_DefaultErrorHandler                          0     0      0       0
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (10) _EUSART_RxDataHandler                                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Display_Clear
     _SPI_Write
       _SPI2_Exchange8bit
   _Display_Name
     _SPI_Write
       _SPI2_Exchange8bit
     _strlen
   _Get_ADC
     _ADC_GetConversion
     _Display_Name
       _SPI_Write
         _SPI2_Exchange8bit
       _strlen
   _PIR_Sensor
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
       _IOCAF4_SetInterruptHandler
     _PMD_Initialize
     _PWM1_Initialize
     _SPI2_Initialize
     _TMR2_Initialize
     _WDT_Initialize
   _UART_Byte
     _strlen
   _enableGestureSensor
     _enablePower
       _setMode
         _getMode
           _wireReadDataByte
             _I2C_ReStart
               _i2c1_driver_restart
             _I2C_Read_Byte
               _i2c1_driver_getRXData
               _i2c1_driver_isBufferFull
               _i2c1_driver_startRX
             _I2C_Send_NACK
               _i2c1_driver_sendNACK
             _I2C_Start
               _i2c1_driver_start
             _I2C_Stop
               _i2c1_driver_stop
             _I2C_Write_Byte
               _i2c1_driver_TXData
         _wireWriteDataByte
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
     _resetGestureParameters
     _setGestureIntEnable
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureMode
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setLEDBoost
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setMode
       _getMode
         _wireReadDataByte
           _I2C_ReStart
             _i2c1_driver_restart
           _I2C_Read_Byte
             _i2c1_driver_getRXData
             _i2c1_driver_isBufferFull
             _i2c1_driver_startRX
           _I2C_Send_NACK
             _i2c1_driver_sendNACK
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _wireWriteDataByte
       _I2C_Start
         _i2c1_driver_start
       _I2C_Stop
         _i2c1_driver_stop
       _I2C_Write_Byte
         _i2c1_driver_TXData
   _handleGesture
     _Display_Name
       _SPI_Write
         _SPI2_Exchange8bit
       _strlen
     _readGesture
       _decodeGesture
       _getMode
         _wireReadDataByte
           _I2C_ReStart
             _i2c1_driver_restart
           _I2C_Read_Byte
             _i2c1_driver_getRXData
             _i2c1_driver_isBufferFull
             _i2c1_driver_startRX
           _I2C_Send_NACK
             _i2c1_driver_sendNACK
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
       _isGestureAvailable
         _wireReadDataByte
           _I2C_ReStart
             _i2c1_driver_restart
           _I2C_Read_Byte
             _i2c1_driver_getRXData
             _i2c1_driver_isBufferFull
             _i2c1_driver_startRX
           _I2C_Send_NACK
             _i2c1_driver_sendNACK
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
       _processGestureData
         ___awdiv
           ___wmul (ARG)
         ___wmul
       _resetGestureParameters
       _wireReadDataBlock
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
   _initialize
     _i2c1_driver_open
     _setAmbientLightGain
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureEnterThresh
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureExitThresh
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureGain
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureIntEnable
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureLEDDrive
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureWaitTime
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setLEDDrive
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setLightIntHighThreshold
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setLightIntLowThreshold
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setMode
       _getMode
         _wireReadDataByte
           _I2C_ReStart
             _i2c1_driver_restart
           _I2C_Read_Byte
             _i2c1_driver_getRXData
             _i2c1_driver_isBufferFull
             _i2c1_driver_startRX
           _I2C_Send_NACK
             _i2c1_driver_sendNACK
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setProxIntHighThresh
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setProxIntLowThresh
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setProximityGain
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _wireReadDataByte
       _I2C_ReStart
         _i2c1_driver_restart
       _I2C_Read_Byte
         _i2c1_driver_getRXData
         _i2c1_driver_isBufferFull
         _i2c1_driver_startRX
       _I2C_Send_NACK
         _i2c1_driver_sendNACK
       _I2C_Start
         _i2c1_driver_start
       _I2C_Stop
         _i2c1_driver_stop
       _I2C_Write_Byte
         _i2c1_driver_TXData
     _wireWriteDataByte
       _I2C_Start
         _i2c1_driver_start
       _I2C_Stop
         _i2c1_driver_stop
       _I2C_Write_Byte
         _i2c1_driver_TXData
   _isGestureAvailable
     _wireReadDataByte
       _I2C_ReStart
         _i2c1_driver_restart
       _I2C_Read_Byte
         _i2c1_driver_getRXData
         _i2c1_driver_isBufferFull
         _i2c1_driver_startRX
       _I2C_Send_NACK
         _i2c1_driver_sendNACK
       _I2C_Start
         _i2c1_driver_start
       _I2C_Stop
         _i2c1_driver_stop
       _I2C_Write_Byte
         _i2c1_driver_TXData

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART_Receive_ISR *
     Absolute function(Fake) *
     _EUSART_DefaultErrorHandler *
       _EUSART_RxDataHandler
     _EUSART_DefaultFramingErrorHandler *
     _EUSART_DefaultOverrunErrorHandler *
     _EUSART_RxDataHandler *
   _EUSART_Transmit_ISR *
   _PIN_MANAGER_IOC *
     _IOCAF4_ISR
       Absolute function(Fake) *
       _IOCAF4_DefaultInterruptHandler *
   _i2c_ISR *
     _do_I2C_DO_ACK *
       _i2c1_driver_sendACK
     _do_I2C_DO_ADDRESS_NACK *
       _do_I2C_SEND_RESTART
         i1_i2c1_driver_restart
       _do_I2C_SEND_STOP
         i1_i2c1_driver_stop
       _returnReset *
       _returnStop *
     _do_I2C_DO_NACK_RESTART *
       i1_i2c1_driver_sendNACK
     _do_I2C_DO_NACK_STOP *
       i1_i2c1_driver_sendNACK
     _do_I2C_IDLE *
     _do_I2C_RCEN *
       i1_i2c1_driver_startRX
     _do_I2C_RESET *
       _i2c1_driver_resetBus
     _do_I2C_RX *
       _do_I2C_DO_NACK_RESTART
         i1_i2c1_driver_sendNACK
       _do_I2C_DO_NACK_STOP
         i1_i2c1_driver_sendNACK
       _i2c1_driver_sendACK
       _returnReset *
       _returnStop *
       i1_i2c1_driver_getRXData *
     _do_I2C_SEND_ADR_READ *
       i1_i2c1_driver_TXData
     _do_I2C_SEND_ADR_WRITE *
       i1_i2c1_driver_TXData
     _do_I2C_SEND_RESTART *
       i1_i2c1_driver_restart
     _do_I2C_SEND_RESTART_READ *
       i1_i2c1_driver_restart
     _do_I2C_SEND_RESTART_WRITE *
       i1_i2c1_driver_restart
     _do_I2C_SEND_STOP *
       i1_i2c1_driver_stop
     _do_I2C_TX *
       _do_I2C_SEND_RESTART_READ
         i1_i2c1_driver_restart
       _do_I2C_SEND_RESTART_WRITE
         i1_i2c1_driver_restart
       _do_I2C_SEND_STOP
         i1_i2c1_driver_stop
       _i2c1_driver_isNACK
       _returnReset *
       _returnStop *
       i1_i2c1_driver_TXData *
     _do_I2C_TX_EMPTY *
       _do_I2C_SEND_RESTART
         i1_i2c1_driver_restart
       _do_I2C_SEND_STOP
         i1_i2c1_driver_stop
       _mssp1_setIRQ
       _returnReset *
       _returnStop *
     _i2c1_driver_isNACK *
     _mssp1_clearIRQ *
   _i2c_busCollisionISR *
     _i2c1_driver_clearBusCollision

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     3C      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     40      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     40      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      2      3D      11       76.3%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      44      13       85.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     17D      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     17D      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Wed Apr 17 08:58:53 2019

                ?_EUSART_SetRxInterruptHandler 0020                                   returnReset@p 0076  
                        ?_setGestureExitThresh 0076                             __size_of_I2C_Start 0003  
                                  __CFG_CP$OFF 0000                                   ___awdiv@sign 002C  
                         __size_of_do_I2C_IDLE 0005                                             _on 005C  
                          _do_I2C_SEND_RESTART 16FB                           __size_of_do_I2C_RCEN 0006  
                          ___wmul@multiplicand 0022                                    __CFG_LVP$ON 0000  
                                          l804 0F94                                            l840 0756  
                                          l577 0818                                            l827 0C72  
             processGestureData@ud_ratio_first 0031                                            l668 0981  
                                          l868 0F0B                                            _PR2 001E  
                                 __CFG_CPD$OFF 0000                         ??_EUSART_RxDataHandler 0076  
                        __end_of_decodeGesture 04F1                           __size_of_I2C_ReStart 0003  
               ?_EUSART_SetFramingErrorHandler 0020                        __size_of_PMD_Initialize 0008  
                           I2C_Write_Byte@Byte 0023                                _TMR2_Initialize 1783  
                        __size_of_do_I2C_RESET 0007                                            wreg 0009  
                                   _TXSTA1bits 019E                             i1_i2c1_driver_stop 16B7  
                                         l1201 043E                                           l1140 0263  
                                         l1221 04C3                                           l1213 0491  
                                         l1117 00A8                                           l1152 02E7  
                                         l1144 028C                                           l1225 04E0  
                                         l1209 0474                                           l1146 02B3  
                                         l1163 032F                                           l1164 0348  
                                         l1159 0306                                           l1185 03D0  
                                         l1292 0923                                           l1197 0421  
                                         l1189 03ED                                           l1606 093F  
                                         l7006 0986                                           l6400 081D  
                                         l7024 0C55                                           l7032 0616  
                                         l7200 0876                                           l7050 062D  
                                         l7042 061A                                           l7130 089C  
                                         l7036 06CB                                           l7140 0889  
                                         l6510 08D1                                           l7070 065E  
                                         l7150 0A81                                           l6512 08DD  
                                         l6520 0E2F                                           l7072 06BF  
                                         l6426 0939                                           l7058 0650  
                                         l7218 0BCD                                           l7170 0A5A  
                                         l7154 0A83                                           l6372 17DF  
                                         l6540 0E62                                           l6532 0E49  
                                         l6524 0E31                                           l7308 0A1B  
                                         l6452 0E88                                           l7076 06C8  
                                         l7236 0BFF                                           l6366 0926  
                                         l6542 0E63                                           l6534 0E56  
                                         l7318 080E                                           l6470 0EAE  
                                         l6462 0E90                                           l6446 0E7D  
                                         l6622 0119                                           l6606 00A4  
                                         l7190 0863                                           l7254 0A42  
                                         l7174 0A5C                                           l7272 0B38  
                                         l6464 0E9C                                           l6608 00FE  
                                         l6640 0163                                           l7290 0B9B  
                                         l7522 0F32                                           l6802 041C  
                                         l6474 0EB7                                           l6706 02DA  
                                         l6714 02E9                                           l7604 0EFB  
                                         l7540 0F30                                           l6820 046F  
                                         l6812 044B                                           l6724 032A  
                                         l6660 0219                                           l6636 0115  
                                         l7374 0829                                           l7526 0F34  
                                         l6830 049E                                           l6806 0439  
                                         l6478 0EBF                                           l6718 0301  
                                         l6670 023E                                           l6654 0204  
                                         l6590 0099                                           l6574 0D9A  
                                         l7702 0FE0                                           l7390 0504  
                                         l7624 0760                                           l7616 072A  
                                         l6824 048C                                           l6752 0378  
                                         l6496 0850                                           l6664 0229  
                                         l6576 0DC9                                           l7704 0FFD  
                                         l7650 07AF                                           l6842 04DB  
                                         l6770 0399                                           l6762 038D  
                                         l6746 036C                                           l6658 0216  
                                         l6586 0097                                           l7394 0506  
                                         l7810 0D7D                                           l7636 0784  
                                         l6764 038F                                           l6852 04EF  
                                         l6756 0383                                           l6692 02A6  
                                         l6684 0287                                           l6668 023B  
                                         l7662 07DB                                           l7638 078D  
                                         l6838 04BE                                           l6774 03A3  
                                         l6758 0385                                           l6678 025E  
                                         l7664 07E7                                           l6848 04ED  
                                         l6784 03CB                                           l6776 03A9  
                                         l6768 0397                                           l6696 02AE  
                                         l7680 0FA7                                           l7672 0F9E  
                                         l6794 03FA                                           l7690 0FC8  
                                         l6788 03E8                                           l7668 0F81  
                                         l7688 0FBA                                           l7698 0FD3  
                                         l7796 0D58                                           l7974 0FE9  
                                         l7798 0D5D                                           STR_1 1800  
                                         STR_2 1030                                           STR_3 1020  
                                         STR_4 180C                        __end_of_PWM1_Initialize 17F3  
                                         _LATA 010C                                           _LATB 010D  
                                         _LATC 010E                                           u5045 0E93  
                                         u5215 0DA3                                           u5065 0E9D  
                                         u5075 0EA7                                           u5164 0E42  
                                         _PMD0 0911                                           u5165 0E41  
                                         u5085 0EAF                                           u5405 020E  
                                         u6205 0BE0                                           _PMD1 0912  
                                         u5174 0E4E                                           _PMD2 0913  
                                         u5175 0E4D                                           u5415 0222  
                                         u6055 0659                                           _PMD3 0914  
                                         _PMD4 0915                                           u5425 0233  
                                         u6065 0668                                           _PMD5 0916  
                                         u7027 0F98                                           u6245 0B7C  
                                         u5605 030F                                           u7037 06CF  
                                         u6085 0AA3                                           u5615 031B  
                                         u5535 02BF                                           u5455 024F  
                                         u5295 00B3                                           u7047 06E2  
                                         u6095 0ACC                                           u7057 075A  
                                         u5625 0338                                           u5545 02CD  
                                         u5465 026C                                           u6185 0BAE  
                                         u7067 0C3D                                           u5475 0278  
                                         u5395 01FD                                           u7077 0836  
                                         u5805 03F7                                           u5485 0295  
                                         u7087 07F9                                           u5655 0354  
                                         u6705 0734                                           u5905 049B  
                                         u6715 0740                                           u5835 040D  
                                         u5595 02F2                                           u6805 07C5  
                                         u5845 042A                           ?_do_I2C_SEND_RESTART 0076  
                                         u6815 07D6                                           u6735 076A  
                                         u5935 04AF                                           u5855 0448  
                                         u6745 0776                                           u6665 0F09  
                                         u5945 04CC                                           u5785 03BC  
                                         u4985 0940                                           u6675 0704  
                                         u5955 04EA                                           u5795 03D9  
                                         u4995 0945                                           u6765 0797  
                                         u6685 071C                                           u5885 0460  
                                         u6845 0FB5                                           u6775 07A3  
                                         u6695 0728                                           u5895 047D  
                                         u5985 0C5F                                           u6795 07B9  
                                         _TMR2 001D                                           _WPUA 020C  
                                         _WPUB 020D                                           _WPUC 020E  
                                 __CFG_WRT$OFF 0000                                  __CFG_FCMEN$ON 0000  
            __size_of_do_I2C_SEND_RESTART_READ 0004                            ?i1_i2c1_driver_stop 0076  
                    ?_do_I2C_SEND_RESTART_READ 0076                                           _main 0D43  
                                         _name 0060                      __size_of_do_I2C_SEND_STOP 0004  
                       __size_of_do_I2C_DO_ACK 0004                                           fsr0h 0005  
                                         fsr1h 0007                                           indf0 0000  
                                         fsr0l 0004                                           indf1 0001  
                                         _prox 00E0                                           fsr1l 0006  
                                         btemp 007E                          ??_setGestureIntEnable 002A  
                             __end_of_I2C_Stop 16E7                                  __CFG_BOREN$ON 0000  
                      i1_i2c1_driver_getRXData 16BD                          ?_do_I2C_SEND_ADR_READ 0076  
                                __CFG_BORV$LOW 0000                ??_i2c1_driver_clearBusCollision 0076  
                                         start 0047                                __end_of_Get_ADC 07EA  
                          I2C_Write_Byte@count 0024                                  __CFG_CSWEN$ON 0000  
                                __CFG_MCLRE$ON 0000                                __end_of_i2c_ISR 09F6  
                     ??_do_I2C_DO_NACK_RESTART 0076                                   ?_readGesture 004F  
                                 _do_I2C_RESET 173F                 __size_of_OSCILLATOR_Initialize 0008  
                          __size_of_IOCAF4_ISR 000D                  __end_of_OSCILLATOR_Initialize 177B  
                         ??i1_i2c1_driver_stop 0076                                          _ADACT 009F  
                     __end_of_i2c1_driver_open 17DC                                          ?_main 0076  
                              __end_of___awdiv 0EC4                       __end_of_i2c1_driver_stop 16E4  
                              ___awdiv@divisor 0026                                          _T2CON 001F  
                   __end_of_i2c1_driver_TXData 1733                                 __CFG_DEBUG$OFF 0000  
                                        i1l252 001F                                          i1l157 0E07  
                                        i1l173 0D17                                          i1l261 0045  
                                        i1l254 002C                                          i1l256 0039  
                                        i1l249 0010                                   ?_setLEDBoost 0076  
                              ___awdiv@counter 002B                                   ?_setLEDDrive 0076  
                               _setGestureGain 0B9D                                          _OSCEN 091D  
                           wireReadDataBlock@j 0030                                 _setGestureMode 09F6  
                                        _TRISA 008C                                          _TRISB 008D  
                                        _TRISC 008E                    __end_of_setProxIntLowThresh 089E  
                              __end_of_getMode 17D2                             __size_of_UART_Byte 0058  
                                  ?_PIR_Sensor 0076                          isGestureAvailable@val 002A  
                      __end_of_PIN_MANAGER_IOC 1727                     __end_of_i2c1_driver_isNACK 1763  
                       __size_of_I2C_Read_Byte 000B                                 _WDT_Initialize 170F  
                                        _names 0160                               _b_i2c_error_flag 006B  
                 __end_of_setProxIntHighThresh 088B                     ?_do_I2C_SEND_RESTART_WRITE 0076  
                                        _start 006F                          ??_do_I2C_SEND_RESTART 0076  
                              __end_of_setMode 0E72                              __end_of_I2C_Start 16E1  
                                        pclath 000A                        __size_of_mssp1_clearIRQ 0003  
                         i1_i2c1_driver_TXData 1717                   __size_of_setAmbientLightGain 001E  
                       ?_do_I2C_SEND_ADR_WRITE 0076                         __size_of_I2C_Send_NACK 0003  
                                        status 0003                                          wtemp0 007E  
                           __size_of_SPI_Write 0015                       ?_setLightIntLowThreshold 002A  
                   __end_of_setGestureLEDDrive 0C01                          setGestureWaitTime@val 002C  
                                _fsmStateTable 1000                                  _gesture_data_ 0220  
                              __initialization 0049                         ??_setGestureExitThresh 002A  
                            _SPI2_Exchange8bit 0810                     processGestureData@lr_delta 004B  
                                   _i2c_status 01A0                                   __end_of_main 0D8A  
                            _handleGestureFlag 0075                     processGestureData@ud_delta 0049  
                           ?_SPI2_Exchange8bit 0076                        __end_of_TMR2_Initialize 178B  
                  ?_INTERRUPT_InterruptManager 0076                         __end_of_setGestureGain 0BCF  
                    __size_of_setProximityGain 0029                 ??_EUSART_SetRxInterruptHandler 0022  
                       __end_of_setGestureMode 0A1D                                  _do_I2C_DO_ACK 1703  
                                       ??_main 005C                  __size_of_i2c1_driver_sendNACK 0004  
                     __size_of_SPI2_Initialize 0007                            ??_SPI2_Exchange8bit 0020  
                      _IOCAF4_InterruptHandler 00EC              __size_of_setLightIntHighThreshold 0027  
                __size_of_i2c1_driver_resetBus 0001                         __end_of_WDT_Initialize 1713  
                      ?_do_I2C_DO_ADDRESS_NACK 0076                      ?_setLightIntHighThreshold 002A  
            setLightIntHighThreshold@threshold 002A                           __end_of_Display_Name 0C76  
                         __size_of_enablePower 000E      __end_of_EUSART_DefaultFramingErrorHandler 16AF  
   __size_of_EUSART_DefaultFramingErrorHandler 0001            ??_EUSART_DefaultFramingErrorHandler 0076  
           ?_EUSART_DefaultFramingErrorHandler 0076              _EUSART_DefaultFramingErrorHandler 16AE  
                                       _ADCON0 009D                                         _ADCON1 009E  
                   _EUSART_OverrunErrorHandler 01D7                                         _ADRESH 009C  
                                       _ADRESL 009B                                         _CCPR1H 0292  
                                       _CCPR1L 0291                               ___awdiv@dividend 0028  
                           _processGestureData 0089                                         _ANSELA 018C  
                                       _ANSELB 018D                                         _ANSELC 018E  
                           __CFG_RSTOSC$HFINT1 0000                   setProxIntLowThresh@threshold 002B  
                        ?i1_i2c1_driver_TXData 0076                                         _RC1REG 0199  
                                       _RA4PPS 0E94                                         _RC1STA 019D  
                                       _RC2PPS 0EA2                                         _RB6PPS 0E9E  
                             ?_PWM1_Initialize 0076                                         _RB7PPS 0E9F  
                                       _RC5PPS 0EA5                                         i1l1416 096D  
                                       _ODCONA 028C                                         _ODCONB 028D  
                                       _RC6PPS 0EA6                                         _ODCONC 028E  
                                       i1l5000 0D19                                         i1l5010 0D1F  
                                       i1l5020 0B3D                                         i1l5004 0D1C  
                                       i1l5030 0B44                                         i1l5024 0B40  
                                       i1l5036 0B47                                         i1l5170 17FD  
                                       i1l5528 09E0                                         i1l4934 0AEB  
                    ??i1_i2c1_driver_getRXData 0076                                         i1l4944 0AF1  
                                       i1l4960 0DDD                                         i1l4938 0AEE  
                                       i1l4970 0DE3                                         i1l4964 0DE0  
                                       i1l4956 0DDA                                         i1l5970 0C23  
                                       i1l4978 0E21                                         i1l5964 0C15  
                                       i1l5974 0C32                                         i1l7980 0B06  
                                       i1l7982 0B5C                                         i1l7976 0D34  
                                       i1l7978 0DF9                                      ??_Get_ADC 002C  
                             _wireReadDataByte 09AC                                         _OSCFRQ 091F  
                      ?_resetGestureParameters 0076                         ??_do_I2C_SEND_ADR_READ 0076  
                                       _TX1REG 019A                                         _WDTCON 0097  
                                       _TX1STA 019E                                      ??_i2c_ISR 0079  
                                       _TXREG1 019A                            ?_processGestureData 0076  
                            _gesture_lr_delta_ 0066                                 __CFG_PWRTE$OFF 0000  
                setProxIntHighThresh@threshold 002B                      __end_of_SPI2_Exchange8bit 081F  
                            _gesture_lr_count_ 0062                            wireReadDataByte@reg 0027  
                        _i2c1_driver_getRXData 16D2                            wireReadDataByte@val 0028  
                            _gesture_ud_delta_ 0068                              __end_of_UART_Byte 0F1C  
                  __end_of_do_I2C_DO_NACK_STOP 170B                                  _I2C_Read_Byte 17DC  
                   __end_of_isGestureAvailable 0852                              _gesture_ud_count_ 0064  
                          __size_of_PIR_Sensor 000F                                         ___wmul 0936  
                                    ??___awdiv 002A          __end_of_i2c1_driver_clearBusCollision 16C9  
       __size_of_i2c1_driver_clearBusCollision 0003                  _i2c1_driver_clearBusCollision 16C6  
                   __end_of_setGestureWaitTime 0A44                                 __CFG_STVREN$ON 0000  
              __size_of_do_I2C_DO_NACK_RESTART 0004                            _EUSART_Transmit_ISR 0952  
                             ___awdiv@quotient 002D                                 ?_do_I2C_DO_ACK 0076  
                              ?_setGestureGain 0076                                  _I2C_Send_NACK 16D8  
                                    ??_getMode 0029                                ?_setGestureMode 0076  
                                       _strlen 08CC                        ??_setGestureEnterThresh 002A  
                         ??_processGestureData 002F                              __end_of_SPI_Write 07FF  
                  __end_of_i2c1_driver_sendACK 16EF                                 _PMD_Initialize 177B  
               __end_of_do_I2C_DO_ADDRESS_NACK 0B0F                                      ?_I2C_Stop 0076  
                           Display_Name@length 0028                                      ??_setMode 002C  
                              ?_WDT_Initialize 0076                    __end_of_i2c1_driver_restart 16CF  
                                 ?_returnReset 0076                       ADC_GetConversion@channel 0023  
                            readGesture@motion 0053                    __end_of_i2c1_driver_startRX 16D8  
   IOCAF4_SetInterruptHandler@InterruptHandler 0020                               ?_PIN_MANAGER_IOC 0076  
                                 ??_IOCAF4_ISR 0076                           ?_EUSART_Transmit_ISR 0076  
               __end_of_resetGestureParameters 08CC                              _SYSTEM_Initialize 08E4  
                      __end_of__initialization 0085                               _do_I2C_SEND_STOP 16FF  
                           __size_of_do_I2C_RX 0046                             __size_of_do_I2C_TX 004F  
                           ?_SYSTEM_Initialize 0076                         setGestureWaitTime@time 002B  
                     __size_of_do_I2C_TX_EMPTY 0031           __end_of_EUSART_SetTxInterruptHandler 17C0  
        __size_of_EUSART_SetTxInterruptHandler 0009                   _EUSART_SetTxInterruptHandler 17B7  
                               ?_I2C_Read_Byte 0076                                 __pcstackCOMMON 0076  
                                 __pidataBANK0 07FF                                   __pidataBANK2 178B  
                          ??_SYSTEM_Initialize 0023                          i1i2c1_driver_TXData@d 0076  
       __end_of_IOCAF4_DefaultInterruptHandler 16B0        __size_of_IOCAF4_DefaultInterruptHandler 0001  
               _IOCAF4_DefaultInterruptHandler 16AF                           _setProxIntHighThresh 0878  
                               _gesture_state_ 00E2                                 ?_I2C_Send_NACK 0076  
                             ?_TMR2_Initialize 0076                          i1_i2c1_driver_restart 16B4  
                       __end_of_PMD_Initialize 1783                             __end_of_IOCAF4_ISR 1800  
                        i1_i2c1_driver_startRX 16BA                           __size_of_readGesture 00F3  
                        __end_of_handleGesture 1000              __size_of_i2c1_driver_isBufferFull 0007  
                                   ??_I2C_Stop 0020                           _eusartRxStatusBuffer 01BD  
                    ?_i2c1_driver_isBufferFull 0076                             _gesture_far_count_ 00E4  
                         __size_of_setLEDBoost 0032                           __size_of_setLEDDrive 0029  
              ??_EUSART_SetOverrunErrorHandler 0022                         _do_I2C_DO_NACK_RESTART 170B  
                       ??i1_i2c1_driver_TXData 0076                      __end_of_SYSTEM_Initialize 08FF  
                        ??_EUSART_Transmit_ISR 0076                              ??_SPI2_Initialize 0020  
                               _mssp1_clearIRQ 16C3                                     __pbssBANK0 005C  
                                   __pbssBANK1 00E0                                     __pbssBANK2 0168  
                                   __pbssBANK3 01A0                                     __pbssBANK4 0220  
                         wireWriteDataByte@reg 0029                           wireWriteDataByte@val 0026  
                          getMode@enable_value 002A                                 UART_Byte@F7545 0168  
                     ??i1_i2c1_driver_sendNACK 0076                    __size_of_EUSART_Receive_ISR 0034  
                       ?_i2c1_driver_getRXData 0076                     __size_of_SPI2_Exchange8bit 000F  
                 __size_of_i2c_busCollisionISR 0003                                     __pmaintext 0D43  
                        __end_of_Display_Clear 083F                                  ??_do_I2C_IDLE 0076  
                                ??_do_I2C_RCEN 0076                  ?_EUSART_SetTxInterruptHandler 0020  
             _EUSART_TxDefaultInterruptHandler 00EE                        setGestureLEDDrive@drive 002D  
                                      ?___wmul 0020                                __CFG_PPS1WAY$ON 0000  
                              ??_do_I2C_DO_ACK 0076                   __size_of_enableGestureSensor 0064  
                                   __pintentry 0004                          ?_setProxIntHighThresh 0076  
                                      _CCP1CON 0293                        __size_of_I2C_Write_Byte 001C  
                                ??_I2C_ReStart 0020                               _setProximityGain 0ABB  
                                  setMode@mode 002F                   ??_EUSART_DefaultErrorHandler 0077  
                              ?_PMD_Initialize 0076                            _setAmbientLightGain 098E  
                      __size_of_ADC_Initialize 0008                          __size_of_Display_Name 0041  
               ?_i2c1_driver_clearBusCollision 0076                                        ?_strlen 0020  
                            ?_i2c1_driver_open 0076                              __end_of_do_I2C_RX 0D43  
                            __end_of_do_I2C_TX 0E23                              ?_i2c1_driver_stop 0076  
                                _eusartRxCount 0070                              _wireReadDataBlock 0D8A  
                                      _SP1BRGH 019C                                        _SP1BRGL 019B  
                           ??_i2c1_driver_open 0020                             ??_i2c1_driver_stop 0020  
                                      _OSCCON1 0919                                        _OSCCON3 091B  
                                   _brightness 005E                                  ?_mssp1_setIRQ 0076  
                                 ??_PIR_Sensor 0020                  __size_of_EUSART_RxDataHandler 0017  
                                      _OSCTUNE 091E                           wireReadDataBlock@len 0028  
                         wireReadDataBlock@reg 002F                           wireReadDataBlock@val 0026  
                                      _SSP1ADD 0212                                        _SSP2ADD 021A  
                                      _SLRCONA 030C                                        _SLRCONB 030D  
                                      _SLRCONC 030E                                        _SSP1BUF 0211  
                       __end_of_mssp1_clearIRQ 16C6                                        _SSP2BUF 0219  
                           ?_wireReadDataBlock 0026                                        _SSP1MSK 0213  
                     ??_EUSART_SetErrorHandler 0022                              SPI_Write@incoming 0022  
                  __end_of_setGestureIntEnable 0B3A                        ??_do_I2C_SEND_ADR_WRITE 0076  
              processGestureData@lr_ratio_last 0037                    ??_do_I2C_SEND_RESTART_WRITE 0076  
                                 readGesture@i 0059                                        _Get_ADC 06FA  
                           _i2c1_driver_TXData 172D                           ?_setAmbientLightGain 0076  
                           _i2c1_driver_i2cISR 00E8                            ??_wireReadDataBlock 002A  
                                      _i2c_ISR 09D0                                      _I2C_Start 16DE  
                              ??_I2C_Read_Byte 0021                                  setMode@enable 002B  
          __size_of_EUSART_DefaultErrorHandler 0003                             _i2c1_driver_isNACK 175B  
                       __size_of_decodeGesture 0191                            ?_i2c1_driver_TXData 0076  
                                 _Display_Name 0C35                                ??_I2C_Send_NACK 0020  
                                      ___awdiv 0E72                                __size_of___wmul 001C  
                           __end_of_PIR_Sensor 082E                         ?i1_i2c1_driver_restart 0076  
                            ??_do_I2C_TX_EMPTY 0076                            ?_i2c1_driver_isNACK 0076  
                       ?i1_i2c1_driver_startRX 0076                       __end_of_wireReadDataByte 09D0  
                                   _initialize 04F1                                        _getMode 17C9  
             __size_of_setLightIntLowThreshold 0027                             _setGestureLEDDrive 0BCF  
                                      __ptext1 04F1                                        __ptext2 0ABB  
                                      __ptext3 088B                                        __ptext4 0878  
                                      __ptext5 0A6B                                        __ptext6 0A44  
                                      __ptext7 0A92                                        __ptext8 0A1D  
                                      __ptext9 0BCF                    __size_ofi1_i2c1_driver_stop 0003  
                          __end_of_do_I2C_IDLE 1721                      __end_of_wireReadDataBlock 0DD4  
                          __end_of_do_I2C_RCEN 172D                                __size_of_strlen 0018  
                        _OSCILLATOR_Initialize 1773                                      _T2CONbits 001F  
                  __end_of_do_I2C_SEND_RESTART 16FF                                 ??_mssp1_setIRQ 0076  
                         ??_i2c1_driver_TXData 0020                                        _setMode 0E23  
                     ??_PIN_MANAGER_Initialize 0022                                      _IOCAFbits 0393  
                          __end_of_I2C_ReStart 16D2                                      _IOCANbits 0392  
                                    _IOCAPbits 0391                            ?_setGestureLEDDrive 0076  
                                      _printed 006D                                ?_mssp1_clearIRQ 0076  
                     _do_I2C_SEND_RESTART_READ 16F3                     __size_of_SYSTEM_Initialize 001B  
                                      clrloop0 1734                           __size_of_returnReset 0002  
                         end_of_initialization 0085                           ??_i2c1_driver_isNACK 0076  
                        ??_setAmbientLightGain 002A                   __size_of_setProxIntLowThresh 0013  
        __end_of_EUSART_SetOverrunErrorHandler 17AE         __size_of_EUSART_SetOverrunErrorHandler 0009  
                _EUSART_SetOverrunErrorHandler 17A5                                        init_ram 1739  
                 __end_of_i2c1_driver_sendNACK 1717                                        initloop 173A  
              __size_ofi1_i2c1_driver_sendNACK 0004                                     ?_I2C_Start 0076  
                enableGestureSensor@interrupts 0031                              _EUSART_Initialize 0C76  
                 __end_of_i2c1_driver_resetBus 16B1                  setGestureExitThresh@threshold 002B  
                         ??_setGestureLEDDrive 002A                             readGesture@gstatus 0055  
                           ?_EUSART_Initialize 0076                                   initialize@id 0031  
                             ??_setGestureGain 002A                         ??_setProxIntHighThresh 002A  
                             ??_setGestureMode 002A                      _do_I2C_SEND_RESTART_WRITE 16F7  
                          Display_Name@string1 0025                  __size_of_setGestureExitThresh 0013  
                                      strlen@a 0023                                        strlen@s 0020  
                                    _UART_Byte 0EC4                            ??_EUSART_Initialize 0022  
                             ??_WDT_Initialize 0020                              _wireWriteDataByte 08FF  
               ??_EUSART_SetTxInterruptHandler 0022                                     _returnStop 0800  
                                    _PORTCbits 000E                       __end_of_do_I2C_SEND_STOP 1703  
                                ??_enablePower 0030                             ?_wireWriteDataByte 0026  
              setLightIntHighThreshold@val_low 002D                 __size_of_setGestureEnterThresh 0013  
                __end_of_setGestureEnterThresh 0865                                  _decodeGesture 0360  
                           _isGestureAvailable 083F                             _setGestureWaitTime 0A1D  
                 ??_IOCAF4_SetInterruptHandler 0022                                      _SPI_Write 07EA  
                            __size_of_I2C_Stop 0003                                    returnStop@p 0076  
                          ??_wireWriteDataByte 0029                               __CFG_FEXTOSC$OFF 0000  
              __size_of_EUSART_SetErrorHandler 0009                processGestureData@ud_ratio_last 0035  
                          ?_isGestureAvailable 0076                            ?_setGestureWaitTime 0076  
                    __end_of_EUSART_Initialize 0CB9                                    _CCP1CONbits 0293  
                        SPI2_Exchange8bit@data 0020                  __size_of_do_I2C_SEND_ADR_READ 0008  
                        setProximityGain@drive 002D                       __size_of_PWM1_Initialize 000C  
             __end_of_i2c1_driver_isBufferFull 175B                                    _do_I2C_IDLE 171C  
                                  _do_I2C_RCEN 1727                      __end_of_wireWriteDataByte 091A  
                               _I2C_Write_Byte 091A             __end_of_EUSART_DefaultErrorHandler 16B4  
                   _EUSART_DefaultErrorHandler 16B1                           ??_isGestureAvailable 0029  
                               __end_of___wmul 0952                           ??_setGestureWaitTime 002A  
                                   ?_UART_Byte 0076                                    ?_initialize 0076  
                                  _I2C_ReStart 16CF                                 _ADC_Initialize 176B  
          __size_of_IOCAF4_SetInterruptHandler 0009                         i1_i2c1_driver_sendNACK 16EF  
                       ?_OSCILLATOR_Initialize 0076                       _setLightIntHighThreshold 0A44  
                   __size_of_wireReadDataBlock 004A                                _gesture_motion_ 016C  
                              _SPI2_Initialize 174D                   __size_of_do_I2C_DO_NACK_STOP 0004  
                  __size_of_processGestureData 02D7                                 ?_decodeGesture 0076  
                               __end_of_strlen 08E4                        ?_do_I2C_DO_NACK_RESTART 0076  
                          start_initialization 0049                             setGestureGain@gain 002D  
                          _i2c_busCollisionISR 16C9                __size_of_PIN_MANAGER_Initialize 0044  
                     ?i1_i2c1_driver_getRXData 0076                                     ?_SPI_Write 0076  
 EUSART_SetRxInterruptHandler@interruptHandler 0020   EUSART_SetTxInterruptHandler@interruptHandler 0020  
             setLightIntHighThreshold@val_high 002E                            _enableGestureSensor 0F1C  
                          __end_of_enablePower 0810                   __size_of_i2c1_driver_sendACK 0004  
                      ??_i2c1_driver_getRXData 0020                       __end_of_setProximityGain 0AE4  
                 __size_of_i2c1_driver_restart 0003                       processGestureData@d_last 0042  
                 __size_of_i2c1_driver_startRX 0003                       processGestureData@l_last 0043  
                                  ??_I2C_Start 0020                       processGestureData@r_last 0044  
                     __size_of_PIN_MANAGER_IOC 0006                       processGestureData@u_last 0041  
                      _processGestureData$1681 0039                        _processGestureData$1682 003B  
                      _processGestureData$1683 003D                        _processGestureData$1684 003F  
               ?_EUSART_SetOverrunErrorHandler 0020                           ?_i2c_busCollisionISR 0076  
                             __CFG_LPBOREN$OFF 0000                           __end_of_mssp1_setIRQ 16C3  
                       __end_of_I2C_Write_Byte 0936                     _EUSART_FramingErrorHandler 01D9  
                             ??_PMD_Initialize 0020                setLightIntLowThreshold@val_high 002E  
                                     ??___wmul 0024                         _EUSART_SetErrorHandler 1793  
                         ?_enableGestureSensor 0076                                    _CCPTMRSbits 029F  
                                ??_readGesture 0051                         __end_of_ADC_Initialize 1773  
                                ?_do_I2C_RESET 0076                                    __pdataBANK0 006F  
                                  __pdataBANK2 0160                             setGestureMode@mode 002B  
                      _setLightIntLowThreshold 0A6B                      setGestureIntEnable@enable 002C  
                     setAmbientLightGain@drive 002B                                    ?_returnStop 0076  
                                     ??_strlen 0022                 __end_of_do_I2C_DO_NACK_RESTART 170F  
                                ??_setLEDBoost 002A                                  ??_setLEDDrive 002A  
                         _i2c1_driver_sendNACK 1713                    __end_of_EUSART_Transmit_ISR 0970  
                       setGestureIntEnable@val 002B                                    __pbssCOMMON 0070  
                                    ___latbits 0002                                      _adcResult 006C  
                         _i2c1_driver_resetBus 16B0                                  __pcstackBANK0 0020  
                                __pcstackBANK1 00A0                                  __pcstackBANK2 0120  
                     __size_of_TMR2_Initialize 0008                                      _do_I2C_RX 0CFD  
                                    _do_I2C_TX 0DD4                 __size_of_do_I2C_SEND_ADR_WRITE 0007  
                __size_ofi1_i2c1_driver_TXData 0005                     __end_of_EUSART_Receive_ISR 0C35  
                __end_of_do_I2C_SEND_ADR_WRITE 174D                                       ?_Get_ADC 0076  
                        readGesture@fifo_data2 00A0                     __size_of_EUSART_Initialize 0043  
                    __size_of_i2c1_driver_open 000A                          readGesture@fifo_level 0058  
                    __size_of_i2c1_driver_stop 0003               _EUSART_RxDefaultInterruptHandler 016E  
                                     ?_i2c_ISR 0076                            __size_of_initialize 0116  
                              _do_I2C_TX_EMPTY 0B3A                                      __pnvBANK0 006E  
                                    __pnvBANK1 00EC                                      __pnvBANK2 016E  
                                    __pnvBANK3 01D5                         __size_of_handleGesture 0080  
                        ??_i2c_busCollisionISR 0076                          __end_of_fsmStateTable 1020  
                 __end_of_EUSART_RxDataHandler 08B5                         _PIN_MANAGER_Initialize 0CB9  
                      ??i1_i2c1_driver_restart 0076                        ??i1_i2c1_driver_startRX 0076  
                              ?_I2C_Write_Byte 0076                                  UART_Byte@bits 002E  
                        ??_enableGestureSensor 0030                        __end_of_SPI2_Initialize 1754  
                               ??_do_I2C_RESET 0076                                       ?___awdiv 0026  
                                    __ptext100 0002                                      __ptext101 0800  
                                    __ptext110 16E7                                      __ptext102 16B7  
                                    __ptext111 16AE                                      __ptext103 16B4  
                                    __ptext112 16B1                                      __ptext104 16EB  
                                    __ptext113 089E                                      __ptext105 1721  
                                    __ptext106 17F3                                      __ptext107 16AF  
                                    __ptext108 0952                                      __ptext109 0C01  
                   __size_of_wireWriteDataByte 001B                       ??_do_I2C_DO_ADDRESS_NACK 0076  
                              ?_ADC_Initialize 0076                    _i2c1_driver_busCollisionISR 00EA  
                                 _eusartRxHead 0072                                   _eusartTxHead 0074  
                                 _eusartRxTail 0071                                   _eusartTxTail 0073  
                                  ??_UART_Byte 0025                            _setProxIntLowThresh 088B  
                        __end_of_do_I2C_DO_ACK 1707                              ??_PWM1_Initialize 0020  
                 ??_INTERRUPT_InterruptManager 007C                       _i2c1_driver_isBufferFull 1754  
                                     ?_getMode 0076                                ??_decodeGesture 0020  
                              UART_Byte@tempOn 0026                              ?_wireReadDataByte 0076  
                   ??_do_I2C_SEND_RESTART_READ 0076                          ?_i2c1_driver_sendNACK 0076  
              __end_ofi1_i2c1_driver_getRXData 16C0                        _eusartTxBufferRemaining 006E  
                             ??_mssp1_clearIRQ 0076                                       _BAUD1CON 019F  
                                  _enablePower 0802                             ??_wireReadDataByte 0026  
                          __end_of_readGesture 06FA                          ?_i2c1_driver_resetBus 0076  
           __size_of_do_I2C_SEND_RESTART_WRITE 0004                                       _I2C_Stop 16E4  
                     ??_resetGestureParameters 0020                                       ?_setMode 002B  
           __end_of_IOCAF4_SetInterruptHandler 17C9                     _IOCAF4_SetInterruptHandler 17C0  
                                   ?_do_I2C_RX 0076                                     ?_do_I2C_TX 0076  
                             __CFG_WDTE$SWDTEN 0000                                    ??_SPI_Write 0021  
                            _i2c1_driver_start 16DB                         __size_of_Display_Clear 0011  
                          __end_of_setLEDBoost 0B9D                            __end_of_setLEDDrive 0ABB  
                                   UART_Byte@i 0032                           ?_setProxIntLowThresh 0076  
                        readGesture@bytes_read 0056                             ?_i2c1_driver_start 0076  
                               _eusartRxBuffer 01C5                                 _eusartTxBuffer 01CD  
                               ___wmul@product 0024         EUSART_SetErrorHandler@interruptHandler 0020  
                                     _LATCbits 010E                            __size_of_returnStop 0002  
                                    clear_ram0 1733                                       _PIE0bits 0090  
                                     _PIE1bits 0091                   __size_of_setGestureIntEnable 002B  
                            _eusartRxLastError 006A                            _gesture_near_count_ 00E6  
                          ??_i2c1_driver_start 0020            __size_of_INTERRUPT_InterruptManager 0043  
                                     _PIR0bits 0010                                       _PIR1bits 0011  
              ??_EUSART_SetFramingErrorHandler 0022                          __end_of_I2C_Read_Byte 17E7  
                    ??_setLightIntLowThreshold 002C                                       _SSP1CON1 0215  
                                     _SSP1CON2 0216                                       _SSP2CON1 021D  
    __end_of_EUSART_DefaultOverrunErrorHandler 16EB     __size_of_EUSART_DefaultOverrunErrorHandler 0004  
          ??_EUSART_DefaultOverrunErrorHandler 0076             ?_EUSART_DefaultOverrunErrorHandler 0076  
            _EUSART_DefaultOverrunErrorHandler 16E7                                 setLEDBoost@val 002C  
                            UART_Byte@tempName 002A                                       _SSP1STAT 0214  
                                     _SSP2STAT 021C                     __end_ofi1_i2c1_driver_stop 16BA  
                            ??_PIN_MANAGER_IOC 0076                              UART_Byte@tempProx 0028  
                        __end_of_I2C_Send_NACK 16DB                                 setLEDDrive@val 002C  
             processGestureData@lr_ratio_first 0033                                     _ADCON0bits 009D  
                            ___wmul@multiplier 0020                              ?_do_I2C_SEND_STOP 0076  
                    processGestureData@d_first 0046                                  _handleGesture 0F80  
                    __end_of_i2c1_driver_start 16DE                                  ??_returnReset 0077  
                           ??_do_I2C_SEND_STOP 0076                    __size_of_i2c1_driver_TXData 0006  
                  __end_of_setAmbientLightGain 09AC                      processGestureData@l_first 0047  
            __end_of_do_I2C_SEND_RESTART_WRITE 16FB                        __end_of_do_I2C_TX_EMPTY 0B6B  
                 __end_of_setGestureExitThresh 0878                      processGestureData@r_first 0048  
                    processGestureData@u_first 0045                          ??_setProxIntLowThresh 002A  
                 __size_of_do_I2C_SEND_RESTART 0004                    __size_of_i2c1_driver_isNACK 0008  
                            setGestureGain@val 002C                          __size_of_mssp1_setIRQ 0003  
                            ??_TMR2_Initialize 0020                               __size_of_Get_ADC 00F0  
                          _do_I2C_DO_NACK_STOP 1707                               __size_of_i2c_ISR 0026  
                   ??_setLightIntHighThreshold 002C                              _ADC_GetConversion 0970  
                  __size_of_setGestureLEDDrive 0032                                 setMode@reg_val 002E  
               setLightIntLowThreshold@val_low 002D                                   ?_do_I2C_IDLE 0076  
                                _Display_Clear 082E                                   ?_do_I2C_RCEN 0076  
                            setGestureMode@val 002C                               ?_SPI2_Initialize 0076  
                      ?i1_i2c1_driver_sendNACK 0076                        ??_OSCILLATOR_Initialize 0020  
                          _EUSART_ErrorHandler 01D5                             ?_ADC_GetConversion 0020  
                          _i2c1_driver_sendACK 16EB                               __size_of___awdiv 0052  
                __size_of_setProxIntHighThresh 0013                                    _readGesture 0607  
              __size_of_do_I2C_DO_ADDRESS_NACK 002B                    ?_EUSART_DefaultErrorHandler 0076  
                          i2c1_driver_TXData@d 0020                         ??_i2c1_driver_sendNACK 0020  
                                 ??_initialize 0030                                   ?_I2C_ReStart 0076  
                          _i2c1_driver_restart 16CC               setLightIntLowThreshold@threshold 002A  
                         ?_do_I2C_DO_NACK_STOP 0076                            _i2c1_driver_startRX 16D5  
                               ?_handleGesture 0076                   __end_of_do_I2C_SEND_ADR_READ 176B  
                             __size_of_getMode 0009                         ??_i2c1_driver_resetBus 0076  
                         readGesture@fifo_data 0120                                    _setLEDBoost 0B6B  
                          ??_ADC_GetConversion 0022                                    _setLEDDrive 0A92  
              __size_of_resetGestureParameters 0017                           _EUSART_RxDataHandler 089E  
                                 _mssp1_setIRQ 16C0                __end_of_setLightIntLowThreshold 0A92  
                                  ??_do_I2C_RX 0076                                    ??_do_I2C_TX 0076  
                        setGestureLEDDrive@val 002C                               __size_of_setMode 004F  
                                     __ptext10 0B9D                                       __ptext11 0865  
                                     __ptext20 0E72                                       __ptext12 0852  
                                     __ptext21 083F                                       __ptext13 098E  
                                     __ptext30 08FF                                       __ptext22 0360  
                                     __ptext14 17D2                                       __ptext31 17C9  
                                     __ptext23 0F1C                                       __ptext15 0F80  
                                     __ptext40 1713                                       __ptext32 09AC  
                                     __ptext24 0B6B                                       __ptext16 0607  
                                     __ptext41 17DC                                       __ptext33 091A  
                                     __ptext25 09F6                                       __ptext17 0D8A  
                                     __ptext50 1783                                       __ptext42 16D5  
                                     __ptext34 172D                                       __ptext26 0B0F  
                                     __ptext18 0089                                       __ptext51 174D  
                                     __ptext43 1754                                       __ptext35 16E4  
                                     __ptext27 08B5                                       __ptext19 0936  
                                     __ptext60 17A5                                       __ptext52 17E7  
                                     __ptext44 16D2                                       __ptext36 16E1  
                                     __ptext28 0802                                       __ptext61 179C  
                                     __ptext53 177B                                       __ptext45 16CF  
                                     __ptext37 16DE                                       __ptext29 0E23  
                                     __ptext70 07EA                                       __ptext62 1793  
                                     __ptext54 0CB9                                       __ptext46 16CC  
                                     __ptext38 16DB                                       __ptext71 0810  
                                     __ptext63 176B                                       __ptext55 17C0  
                                     __ptext47 0EC4                                       __ptext39 16D8  
                                     __ptext80 170B                                       __ptext64 081F  
                                     __ptext56 1773                                       __ptext48 08E4  
                                     __ptext81 1707                                       __ptext73 16C9  
                                     __ptext65 06FA                                       __ptext57 0C76  
                                     __ptext49 170F                                       __ptext90 171C  
                                     __ptext82 1703                                       __ptext74 16C6  
                                     __ptext66 0C35                                       __ptext58 17B7  
                                     __ptext91 173F                                       __ptext83 1727  
                                     __ptext75 09D0                                       __ptext67 08CC  
                                     __ptext59 17AE                                       __ptext92 0B3A  
                                     __ptext84 1746                                       __ptext76 16C3  
                                     __ptext68 0970                                       __ptext93 16C0  
                                     __ptext85 1763                                       __ptext77 0CFD  
                                     __ptext69 082E                                       __ptext94 175B  
                                     __ptext86 16FF                                       __ptext78 0DD4  
                                     __ptext95 1717                                       __ptext87 16FB  
                                     __ptext79 0AE4                                       __ptext96 16BD  
                                     __ptext88 16F7                                       __ptext97 16EF  
                                     __ptext89 16F3                                       __ptext98 16B0  
                                     __ptext99 16BA                          _setGestureEnterThresh 0852  
                                 _SSP1CON1bits 0215                                   _SSP1CON2bits 0216  
               setGestureEnterThresh@threshold 002B                                   _SSP2CON1bits 021D  
                         ?_i2c1_driver_sendACK 0076                           __end_of_do_I2C_RESET 1746  
                                   _IOCAF4_ISR 17F3                           ?_i2c1_driver_restart 0076  
                          __end_of_returnReset 0004                               _i2c1_driver_open 17D2  
                             _i2c1_driver_stop 16E1                                  __size_of_main 0047  
                         ?_i2c1_driver_startRX 0076                              ?_setProximityGain 0076  
               __size_of_i2c1_driver_getRXData 0003                  __end_of_i2c1_driver_getRXData 16D5  
                           __end_of_initialize 0607                      __end_of_ADC_GetConversion 098E  
                      ?_EUSART_SetErrorHandler 0020                             ??_setProximityGain 002A  
             __size_ofi1_i2c1_driver_getRXData 0003                             _decodeGesture$1690 002A  
                           _decodeGesture$1691 002C                             _decodeGesture$1692 002E  
                           _decodeGesture$1693 0030                             _decodeGesture$1686 0022  
                           _decodeGesture$1687 0024                             _decodeGesture$1688 0026  
                           _decodeGesture$1689 0028                                     _RC1STAbits 019D  
                               ?_Display_Clear 0076                 __end_ofi1_i2c1_driver_sendNACK 16F3  
EUSART_SetOverrunErrorHandler@interruptHandler 0020                                       int$flags 007E  
           __end_of_INTERRUPT_InterruptManager 0047                     _INTERRUPT_InterruptManager 0004  
        __end_of_EUSART_SetFramingErrorHandler 17A5         __size_of_EUSART_SetFramingErrorHandler 0009  
                _EUSART_SetFramingErrorHandler 179C                                   _SSP1STATbits 0214  
                  __size_of_isGestureAvailable 0013                                  Display_Name@i 002A  
                          setProximityGain@val 002C               __end_of_do_I2C_SEND_RESTART_READ 16F7  
                  __size_of_setGestureWaitTime 0027                     __end_of_processGestureData 0360  
                                 ??_returnStop 0077                                   _SSP2STATbits 021C  
                        ??_do_I2C_DO_NACK_STOP 0076                                     Get_ADC@val 002F  
                      __size_of_setGestureGain 0032                                     _INTCONbits 000B  
                      __size_of_setGestureMode 0027                     __size_of_i2c1_driver_start 0003  
                        ?_EUSART_RxDataHandler 0076                         setAmbientLightGain@val 002C  
                        ??_i2c1_driver_sendACK 0076                               ?_do_I2C_TX_EMPTY 0076  
                      __size_of_WDT_Initialize 0004                         _do_I2C_DO_ADDRESS_NACK 0AE4  
                                     intlevel1 0000                          ??_i2c1_driver_restart 0020  
                        ??_i2c1_driver_startRX 0020                        ?_PIN_MANAGER_Initialize 0076  
                             ??_I2C_Write_Byte 0021                 __end_of_EUSART_SetErrorHandler 179C  
                            __CFG_CLKOUTEN$OFF 0000                             __end_of_returnStop 0802  
                              _PWM1_Initialize 17E7                               ??_ADC_Initialize 0020  
         __end_of_EUSART_SetRxInterruptHandler 17B7          __size_of_EUSART_SetRxInterruptHandler 0009  
                 _EUSART_SetRxInterruptHandler 17AE                         _resetGestureParameters 08B5  
                   ??_i2c1_driver_isBufferFull 0020                                  ?_Display_Name 0025  
               __size_ofi1_i2c1_driver_restart 0003                  __end_ofi1_i2c1_driver_restart 16B7  
                           _EUSART_Receive_ISR 0C01  EUSART_SetFramingErrorHandler@interruptHandler 0020  
               __size_ofi1_i2c1_driver_startRX 0003                   __end_ofi1_i2c1_driver_TXData 171C  
                __end_ofi1_i2c1_driver_startRX 16BD                           _setGestureExitThresh 0865  
                              ??_handleGesture 005B                                  __pstringtext1 1000  
                                __pstringtext2 1020                                  __pstringtext3 1030  
                                __pstringtext4 1800                                  __pstringtext5 180C  
                                __pstringtext6 0000                            ?_EUSART_Receive_ISR 0076  
                                   _SSP1DATPPS 0E21                                   ?_enablePower 0076  
                                   _SSP2DATPPS 0E1E                                     _SSP1CLKPPS 0E20  
                          _setGestureIntEnable 0B0F                                     _SSP2CLKPPS 0E1D  
                             setLEDBoost@boost 002D                         ?_setGestureEnterThresh 0076  
                          UART_Byte@tempBright 002C                    ?_IOCAF4_SetInterruptHandler 0020  
                                  _returnReset 0002                                     _PIR_Sensor 081F  
                                   _TX1STAbits 019E                                    ?_IOCAF4_ISR 0076  
                 __size_of_EUSART_Transmit_ISR 001E                 __end_of_PIN_MANAGER_Initialize 0CFD  
                  __end_of_i2c_busCollisionISR 16CC                      __size_of_wireReadDataByte 0024  
             ??_IOCAF4_DefaultInterruptHandler 0076                ?_IOCAF4_DefaultInterruptHandler 0076  
                             setLEDDrive@drive 002D                            processGestureData@i 004D  
                              _PIN_MANAGER_IOC 1721                           ??_EUSART_Receive_ISR 0077  
                  __end_of_enableGestureSensor 0F80                          _do_I2C_SEND_ADR_WRITE 1746  
                         ?_setGestureIntEnable 0076                     __size_of_ADC_GetConversion 001E  
                         _do_I2C_SEND_ADR_READ 1763                                ??_Display_Clear 0023  
             __end_of_setLightIntHighThreshold 0A6B                                 ??_Display_Name 0027  
