

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Mon Apr 01 17:08:04 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F18345
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	stringtext2,global,class=STRCODE,delta=2
     8                           	psect	stringtext3,global,class=STRCODE,delta=2
     9                           	psect	stringtext4,global,class=STRCODE,delta=2
    10                           	psect	stringtext5,global,class=STRCODE,delta=2
    11                           	psect	stringtext6,global,class=STRCODE,delta=2
    12                           	psect	cinit,global,class=CODE,merge=1,delta=2
    13                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    17                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    18                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    19                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    20                           	psect	inittext,global,class=CODE,delta=2
    21                           	psect	clrtext,global,class=CODE,delta=2
    22                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    23                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    24                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    25                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    26                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    27                           	psect	text1,local,class=CODE,merge=1,delta=2
    28                           	psect	text2,local,class=CODE,merge=1,delta=2
    29                           	psect	text3,local,class=CODE,merge=1,delta=2
    30                           	psect	text4,local,class=CODE,merge=1,delta=2
    31                           	psect	text5,local,class=CODE,merge=1,delta=2
    32                           	psect	text6,local,class=CODE,merge=1,delta=2
    33                           	psect	text7,local,class=CODE,merge=1,delta=2
    34                           	psect	text8,local,class=CODE,merge=1,delta=2
    35                           	psect	text9,local,class=CODE,merge=1,delta=2
    36                           	psect	text10,local,class=CODE,merge=1,delta=2
    37                           	psect	text11,local,class=CODE,merge=1,delta=2
    38                           	psect	text12,local,class=CODE,merge=1,delta=2
    39                           	psect	text13,local,class=CODE,merge=1,delta=2
    40                           	psect	text14,local,class=CODE,merge=1,delta=2
    41                           	psect	text15,local,class=CODE,merge=1,delta=2
    42                           	psect	text16,local,class=CODE,merge=1,delta=2
    43                           	psect	text17,local,class=CODE,merge=1,delta=2
    44                           	psect	text18,local,class=CODE,merge=1,delta=2
    45                           	psect	text19,local,class=CODE,merge=1,delta=2,group=1
    46                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    47                           	psect	text21,local,class=CODE,merge=1,delta=2
    48                           	psect	text22,local,class=CODE,merge=1,delta=2
    49                           	psect	text23,local,class=CODE,merge=1,delta=2
    50                           	psect	text24,local,class=CODE,merge=1,delta=2,group=2
    51                           	psect	text25,local,class=CODE,merge=1,delta=2
    52                           	psect	text26,local,class=CODE,merge=1,delta=2
    53                           	psect	text27,local,class=CODE,merge=1,delta=2
    54                           	psect	text28,local,class=CODE,merge=1,delta=2
    55                           	psect	text29,local,class=CODE,merge=1,delta=2
    56                           	psect	text30,local,class=CODE,merge=1,delta=2
    57                           	psect	text31,local,class=CODE,merge=1,delta=2
    58                           	psect	text32,local,class=CODE,merge=1,delta=2
    59                           	psect	text33,local,class=CODE,merge=1,delta=2
    60                           	psect	text34,local,class=CODE,merge=1,delta=2
    61                           	psect	text35,local,class=CODE,merge=1,delta=2
    62                           	psect	text36,local,class=CODE,merge=1,delta=2
    63                           	psect	text37,local,class=CODE,merge=1,delta=2
    64                           	psect	text38,local,class=CODE,merge=1,inline,delta=2
    65                           	psect	text39,local,class=CODE,merge=1,delta=2
    66                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    67                           	psect	text41,local,class=CODE,merge=1,delta=2
    68                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    69                           	psect	text43,local,class=CODE,merge=1,delta=2
    70                           	psect	text44,local,class=CODE,merge=1,inline,delta=2
    71                           	psect	text45,local,class=CODE,merge=1,delta=2
    72                           	psect	text46,local,class=CODE,merge=1,inline,delta=2
    73                           	psect	text47,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text48,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text49,local,class=CODE,merge=1,delta=2
    76                           	psect	text50,local,class=CODE,merge=1,inline,delta=2
    77                           	psect	text51,local,class=CODE,merge=1,delta=2
    78                           	psect	text52,local,class=CODE,merge=1,delta=2
    79                           	psect	text53,local,class=CODE,merge=1,delta=2
    80                           	psect	text54,local,class=CODE,merge=1,delta=2
    81                           	psect	text55,local,class=CODE,merge=1,delta=2
    82                           	psect	text56,local,class=CODE,merge=1,delta=2
    83                           	psect	intentry,global,class=CODE,delta=2
    84                           	psect	text58,local,class=CODE,merge=1,delta=2
    85                           	psect	text59,local,class=CODE,merge=1,inline,delta=2
    86                           	psect	text60,local,class=CODE,merge=1,delta=2
    87                           	psect	text61,local,class=CODE,merge=1,inline,delta=2
    88                           	psect	text62,local,class=CODE,merge=1,delta=2
    89                           	psect	text63,local,class=CODE,merge=1,delta=2
    90                           	psect	text64,local,class=CODE,merge=1,delta=2
    91                           	psect	text65,local,class=CODE,merge=1,delta=2
    92                           	psect	text66,local,class=CODE,merge=1,delta=2
    93                           	psect	text67,local,class=CODE,merge=1,delta=2
    94                           	psect	text68,local,class=CODE,merge=1,delta=2
    95                           	psect	text69,local,class=CODE,merge=1,delta=2
    96                           	psect	text70,local,class=CODE,merge=1,delta=2
    97                           	psect	text71,local,class=CODE,merge=1,delta=2
    98                           	psect	text72,local,class=CODE,merge=1,delta=2
    99                           	psect	text73,local,class=CODE,merge=1,delta=2
   100                           	psect	text74,local,class=CODE,merge=1,delta=2
   101                           	psect	text75,local,class=CODE,merge=1,delta=2
   102                           	psect	text76,local,class=CODE,merge=1,delta=2
   103                           	psect	text77,local,class=CODE,merge=1,delta=2
   104                           	psect	text78,local,class=CODE,merge=1,inline,delta=2
   105                           	psect	text79,local,class=CODE,merge=1,inline,delta=2
   106                           	psect	text80,local,class=CODE,merge=1,inline,delta=2
   107                           	psect	text81,local,class=CODE,merge=1,inline,delta=2
   108                           	psect	text82,local,class=CODE,merge=1,inline,delta=2
   109                           	psect	text83,local,class=CODE,merge=1,inline,delta=2
   110                           	psect	text84,local,class=CODE,merge=1,inline,delta=2
   111                           	psect	text85,local,class=CODE,merge=1,delta=2
   112                           	psect	text86,local,class=CODE,merge=1,delta=2
   113                           	psect	text87,local,class=CODE,merge=1,inline,delta=2
   114                           	psect	text88,local,class=CODE,merge=1,inline,delta=2
   115                           	psect	text89,local,class=CODE,merge=1,inline,delta=2
   116                           	psect	text90,local,class=CODE,merge=1,delta=2
   117                           	dabs	1,0x7E,2
   118  0000                     
   119                           ; Version 2.05
   120                           ; Generated 20/12/2018 GMT
   121                           ; 
   122                           ; Copyright © 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
   123                           ; All rights reserved.
   124                           ; 
   125                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   126                           ; 
   127                           ; Redistribution and use in source and binary forms, with or without modification, are
   128                           ; permitted provided that the following conditions are met:
   129                           ; 
   130                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   131                           ;        conditions and the following disclaimer.
   132                           ; 
   133                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   134                           ;        of conditions and the following disclaimer in the documentation and/or other
   135                           ;        materials provided with the distribution.
   136                           ; 
   137                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   138                           ;        software without specific prior written permission.
   139                           ; 
   140                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   141                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   142                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   143                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   144                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   145                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   146                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   147                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   148                           ; 
   149                           ; 
   150                           ; Code-generator required, PIC16F18345 Definitions
   151                           ; 
   152                           ; SFR Addresses
   153  0000                     	;# 
   154  0001                     	;# 
   155  0002                     	;# 
   156  0003                     	;# 
   157  0004                     	;# 
   158  0005                     	;# 
   159  0006                     	;# 
   160  0007                     	;# 
   161  0008                     	;# 
   162  0009                     	;# 
   163  000A                     	;# 
   164  000B                     	;# 
   165  000C                     	;# 
   166  000D                     	;# 
   167  000E                     	;# 
   168  0010                     	;# 
   169  0011                     	;# 
   170  0012                     	;# 
   171  0013                     	;# 
   172  0014                     	;# 
   173  0015                     	;# 
   174  0015                     	;# 
   175  0016                     	;# 
   176  0016                     	;# 
   177  0017                     	;# 
   178  0018                     	;# 
   179  0019                     	;# 
   180  0019                     	;# 
   181  001A                     	;# 
   182  001B                     	;# 
   183  001C                     	;# 
   184  001D                     	;# 
   185  001E                     	;# 
   186  001F                     	;# 
   187  008C                     	;# 
   188  008D                     	;# 
   189  008E                     	;# 
   190  0090                     	;# 
   191  0091                     	;# 
   192  0092                     	;# 
   193  0093                     	;# 
   194  0094                     	;# 
   195  0097                     	;# 
   196  009B                     	;# 
   197  009B                     	;# 
   198  009C                     	;# 
   199  009D                     	;# 
   200  009E                     	;# 
   201  009F                     	;# 
   202  010C                     	;# 
   203  010D                     	;# 
   204  010E                     	;# 
   205  0111                     	;# 
   206  0112                     	;# 
   207  0113                     	;# 
   208  0114                     	;# 
   209  0115                     	;# 
   210  0116                     	;# 
   211  0117                     	;# 
   212  0118                     	;# 
   213  0119                     	;# 
   214  018C                     	;# 
   215  018D                     	;# 
   216  018E                     	;# 
   217  0197                     	;# 
   218  0199                     	;# 
   219  0199                     	;# 
   220  0199                     	;# 
   221  019A                     	;# 
   222  019A                     	;# 
   223  019A                     	;# 
   224  019B                     	;# 
   225  019B                     	;# 
   226  019B                     	;# 
   227  019B                     	;# 
   228  019B                     	;# 
   229  019C                     	;# 
   230  019C                     	;# 
   231  019C                     	;# 
   232  019D                     	;# 
   233  019D                     	;# 
   234  019D                     	;# 
   235  019E                     	;# 
   236  019E                     	;# 
   237  019E                     	;# 
   238  019F                     	;# 
   239  019F                     	;# 
   240  019F                     	;# 
   241  019F                     	;# 
   242  019F                     	;# 
   243  020C                     	;# 
   244  020D                     	;# 
   245  020E                     	;# 
   246  0211                     	;# 
   247  0211                     	;# 
   248  0212                     	;# 
   249  0212                     	;# 
   250  0213                     	;# 
   251  0213                     	;# 
   252  0214                     	;# 
   253  0214                     	;# 
   254  0215                     	;# 
   255  0215                     	;# 
   256  0215                     	;# 
   257  0215                     	;# 
   258  0216                     	;# 
   259  0216                     	;# 
   260  0217                     	;# 
   261  0217                     	;# 
   262  0219                     	;# 
   263  021A                     	;# 
   264  021B                     	;# 
   265  021C                     	;# 
   266  021D                     	;# 
   267  021D                     	;# 
   268  021E                     	;# 
   269  021F                     	;# 
   270  028C                     	;# 
   271  028D                     	;# 
   272  028E                     	;# 
   273  0291                     	;# 
   274  0291                     	;# 
   275  0292                     	;# 
   276  0293                     	;# 
   277  0294                     	;# 
   278  0295                     	;# 
   279  0295                     	;# 
   280  0296                     	;# 
   281  0297                     	;# 
   282  0298                     	;# 
   283  029F                     	;# 
   284  030C                     	;# 
   285  030D                     	;# 
   286  030E                     	;# 
   287  0311                     	;# 
   288  0311                     	;# 
   289  0312                     	;# 
   290  0313                     	;# 
   291  0314                     	;# 
   292  0315                     	;# 
   293  0315                     	;# 
   294  0316                     	;# 
   295  0317                     	;# 
   296  0318                     	;# 
   297  038C                     	;# 
   298  038D                     	;# 
   299  038E                     	;# 
   300  0391                     	;# 
   301  0392                     	;# 
   302  0393                     	;# 
   303  0394                     	;# 
   304  0395                     	;# 
   305  0396                     	;# 
   306  0397                     	;# 
   307  0398                     	;# 
   308  0399                     	;# 
   309  039A                     	;# 
   310  039C                     	;# 
   311  039D                     	;# 
   312  039E                     	;# 
   313  039F                     	;# 
   314  0411                     	;# 
   315  0411                     	;# 
   316  0412                     	;# 
   317  0413                     	;# 
   318  0414                     	;# 
   319  0415                     	;# 
   320  0416                     	;# 
   321  0417                     	;# 
   322  0418                     	;# 
   323  0418                     	;# 
   324  0419                     	;# 
   325  041A                     	;# 
   326  041B                     	;# 
   327  041C                     	;# 
   328  041D                     	;# 
   329  041E                     	;# 
   330  041F                     	;# 
   331  0498                     	;# 
   332  0498                     	;# 
   333  0499                     	;# 
   334  049A                     	;# 
   335  049B                     	;# 
   336  049B                     	;# 
   337  049C                     	;# 
   338  049D                     	;# 
   339  049E                     	;# 
   340  049F                     	;# 
   341  0617                     	;# 
   342  0618                     	;# 
   343  0619                     	;# 
   344  0619                     	;# 
   345  061A                     	;# 
   346  061B                     	;# 
   347  061C                     	;# 
   348  061C                     	;# 
   349  061F                     	;# 
   350  0691                     	;# 
   351  0692                     	;# 
   352  0693                     	;# 
   353  0694                     	;# 
   354  0695                     	;# 
   355  0696                     	;# 
   356  0697                     	;# 
   357  0698                     	;# 
   358  0699                     	;# 
   359  0711                     	;# 
   360  0712                     	;# 
   361  0713                     	;# 
   362  0714                     	;# 
   363  0715                     	;# 
   364  0716                     	;# 
   365  0717                     	;# 
   366  0718                     	;# 
   367  0719                     	;# 
   368  0891                     	;# 
   369  0891                     	;# 
   370  0891                     	;# 
   371  0891                     	;# 
   372  0891                     	;# 
   373  0891                     	;# 
   374  0892                     	;# 
   375  0892                     	;# 
   376  0892                     	;# 
   377  0893                     	;# 
   378  0893                     	;# 
   379  0893                     	;# 
   380  0893                     	;# 
   381  0893                     	;# 
   382  0893                     	;# 
   383  0894                     	;# 
   384  0894                     	;# 
   385  0894                     	;# 
   386  0895                     	;# 
   387  0895                     	;# 
   388  0895                     	;# 
   389  0896                     	;# 
   390  0896                     	;# 
   391  0896                     	;# 
   392  089B                     	;# 
   393  0911                     	;# 
   394  0912                     	;# 
   395  0913                     	;# 
   396  0914                     	;# 
   397  0915                     	;# 
   398  0916                     	;# 
   399  0918                     	;# 
   400  0919                     	;# 
   401  091A                     	;# 
   402  091B                     	;# 
   403  091C                     	;# 
   404  091D                     	;# 
   405  091E                     	;# 
   406  091F                     	;# 
   407  0E0F                     	;# 
   408  0E10                     	;# 
   409  0E11                     	;# 
   410  0E12                     	;# 
   411  0E13                     	;# 
   412  0E14                     	;# 
   413  0E15                     	;# 
   414  0E16                     	;# 
   415  0E17                     	;# 
   416  0E18                     	;# 
   417  0E19                     	;# 
   418  0E1A                     	;# 
   419  0E1B                     	;# 
   420  0E1C                     	;# 
   421  0E1D                     	;# 
   422  0E1E                     	;# 
   423  0E1F                     	;# 
   424  0E20                     	;# 
   425  0E21                     	;# 
   426  0E22                     	;# 
   427  0E24                     	;# 
   428  0E25                     	;# 
   429  0E28                     	;# 
   430  0E29                     	;# 
   431  0E2A                     	;# 
   432  0E2B                     	;# 
   433  0E2C                     	;# 
   434  0E2D                     	;# 
   435  0E2E                     	;# 
   436  0E2F                     	;# 
   437  0E90                     	;# 
   438  0E91                     	;# 
   439  0E92                     	;# 
   440  0E94                     	;# 
   441  0E95                     	;# 
   442  0E9C                     	;# 
   443  0E9D                     	;# 
   444  0E9E                     	;# 
   445  0E9F                     	;# 
   446  0EA0                     	;# 
   447  0EA1                     	;# 
   448  0EA2                     	;# 
   449  0EA3                     	;# 
   450  0EA4                     	;# 
   451  0EA5                     	;# 
   452  0EA6                     	;# 
   453  0EA7                     	;# 
   454  0F0F                     	;# 
   455  0F10                     	;# 
   456  0F11                     	;# 
   457  0F12                     	;# 
   458  0F13                     	;# 
   459  0F14                     	;# 
   460  0F15                     	;# 
   461  0F16                     	;# 
   462  0F17                     	;# 
   463  0F18                     	;# 
   464  0F19                     	;# 
   465  0F1A                     	;# 
   466  0F1B                     	;# 
   467  0F1C                     	;# 
   468  0F1D                     	;# 
   469  0F1E                     	;# 
   470  0F1F                     	;# 
   471  0F20                     	;# 
   472  0F21                     	;# 
   473  0F22                     	;# 
   474  0F23                     	;# 
   475  0F24                     	;# 
   476  0F25                     	;# 
   477  0F26                     	;# 
   478  0F27                     	;# 
   479  0F28                     	;# 
   480  0F29                     	;# 
   481  0F2A                     	;# 
   482  0F2B                     	;# 
   483  0F2C                     	;# 
   484  0F2D                     	;# 
   485  0F2E                     	;# 
   486  0F2F                     	;# 
   487  0F30                     	;# 
   488  0F31                     	;# 
   489  0F32                     	;# 
   490  0F33                     	;# 
   491  0F34                     	;# 
   492  0F35                     	;# 
   493  0F36                     	;# 
   494  0F37                     	;# 
   495  0FE4                     	;# 
   496  0FE5                     	;# 
   497  0FE6                     	;# 
   498  0FE7                     	;# 
   499  0FE8                     	;# 
   500  0FE9                     	;# 
   501  0FEA                     	;# 
   502  0FEB                     	;# 
   503  0FED                     	;# 
   504  0FEE                     	;# 
   505  0FEF                     	;# 
   506  0000                     	;# 
   507  0001                     	;# 
   508  0002                     	;# 
   509  0003                     	;# 
   510  0004                     	;# 
   511  0005                     	;# 
   512  0006                     	;# 
   513  0007                     	;# 
   514  0008                     	;# 
   515  0009                     	;# 
   516  000A                     	;# 
   517  000B                     	;# 
   518  000C                     	;# 
   519  000D                     	;# 
   520  000E                     	;# 
   521  0010                     	;# 
   522  0011                     	;# 
   523  0012                     	;# 
   524  0013                     	;# 
   525  0014                     	;# 
   526  0015                     	;# 
   527  0015                     	;# 
   528  0016                     	;# 
   529  0016                     	;# 
   530  0017                     	;# 
   531  0018                     	;# 
   532  0019                     	;# 
   533  0019                     	;# 
   534  001A                     	;# 
   535  001B                     	;# 
   536  001C                     	;# 
   537  001D                     	;# 
   538  001E                     	;# 
   539  001F                     	;# 
   540  008C                     	;# 
   541  008D                     	;# 
   542  008E                     	;# 
   543  0090                     	;# 
   544  0091                     	;# 
   545  0092                     	;# 
   546  0093                     	;# 
   547  0094                     	;# 
   548  0097                     	;# 
   549  009B                     	;# 
   550  009B                     	;# 
   551  009C                     	;# 
   552  009D                     	;# 
   553  009E                     	;# 
   554  009F                     	;# 
   555  010C                     	;# 
   556  010D                     	;# 
   557  010E                     	;# 
   558  0111                     	;# 
   559  0112                     	;# 
   560  0113                     	;# 
   561  0114                     	;# 
   562  0115                     	;# 
   563  0116                     	;# 
   564  0117                     	;# 
   565  0118                     	;# 
   566  0119                     	;# 
   567  018C                     	;# 
   568  018D                     	;# 
   569  018E                     	;# 
   570  0197                     	;# 
   571  0199                     	;# 
   572  0199                     	;# 
   573  0199                     	;# 
   574  019A                     	;# 
   575  019A                     	;# 
   576  019A                     	;# 
   577  019B                     	;# 
   578  019B                     	;# 
   579  019B                     	;# 
   580  019B                     	;# 
   581  019B                     	;# 
   582  019C                     	;# 
   583  019C                     	;# 
   584  019C                     	;# 
   585  019D                     	;# 
   586  019D                     	;# 
   587  019D                     	;# 
   588  019E                     	;# 
   589  019E                     	;# 
   590  019E                     	;# 
   591  019F                     	;# 
   592  019F                     	;# 
   593  019F                     	;# 
   594  019F                     	;# 
   595  019F                     	;# 
   596  020C                     	;# 
   597  020D                     	;# 
   598  020E                     	;# 
   599  0211                     	;# 
   600  0211                     	;# 
   601  0212                     	;# 
   602  0212                     	;# 
   603  0213                     	;# 
   604  0213                     	;# 
   605  0214                     	;# 
   606  0214                     	;# 
   607  0215                     	;# 
   608  0215                     	;# 
   609  0215                     	;# 
   610  0215                     	;# 
   611  0216                     	;# 
   612  0216                     	;# 
   613  0217                     	;# 
   614  0217                     	;# 
   615  0219                     	;# 
   616  021A                     	;# 
   617  021B                     	;# 
   618  021C                     	;# 
   619  021D                     	;# 
   620  021D                     	;# 
   621  021E                     	;# 
   622  021F                     	;# 
   623  028C                     	;# 
   624  028D                     	;# 
   625  028E                     	;# 
   626  0291                     	;# 
   627  0291                     	;# 
   628  0292                     	;# 
   629  0293                     	;# 
   630  0294                     	;# 
   631  0295                     	;# 
   632  0295                     	;# 
   633  0296                     	;# 
   634  0297                     	;# 
   635  0298                     	;# 
   636  029F                     	;# 
   637  030C                     	;# 
   638  030D                     	;# 
   639  030E                     	;# 
   640  0311                     	;# 
   641  0311                     	;# 
   642  0312                     	;# 
   643  0313                     	;# 
   644  0314                     	;# 
   645  0315                     	;# 
   646  0315                     	;# 
   647  0316                     	;# 
   648  0317                     	;# 
   649  0318                     	;# 
   650  038C                     	;# 
   651  038D                     	;# 
   652  038E                     	;# 
   653  0391                     	;# 
   654  0392                     	;# 
   655  0393                     	;# 
   656  0394                     	;# 
   657  0395                     	;# 
   658  0396                     	;# 
   659  0397                     	;# 
   660  0398                     	;# 
   661  0399                     	;# 
   662  039A                     	;# 
   663  039C                     	;# 
   664  039D                     	;# 
   665  039E                     	;# 
   666  039F                     	;# 
   667  0411                     	;# 
   668  0411                     	;# 
   669  0412                     	;# 
   670  0413                     	;# 
   671  0414                     	;# 
   672  0415                     	;# 
   673  0416                     	;# 
   674  0417                     	;# 
   675  0418                     	;# 
   676  0418                     	;# 
   677  0419                     	;# 
   678  041A                     	;# 
   679  041B                     	;# 
   680  041C                     	;# 
   681  041D                     	;# 
   682  041E                     	;# 
   683  041F                     	;# 
   684  0498                     	;# 
   685  0498                     	;# 
   686  0499                     	;# 
   687  049A                     	;# 
   688  049B                     	;# 
   689  049B                     	;# 
   690  049C                     	;# 
   691  049D                     	;# 
   692  049E                     	;# 
   693  049F                     	;# 
   694  0617                     	;# 
   695  0618                     	;# 
   696  0619                     	;# 
   697  0619                     	;# 
   698  061A                     	;# 
   699  061B                     	;# 
   700  061C                     	;# 
   701  061C                     	;# 
   702  061F                     	;# 
   703  0691                     	;# 
   704  0692                     	;# 
   705  0693                     	;# 
   706  0694                     	;# 
   707  0695                     	;# 
   708  0696                     	;# 
   709  0697                     	;# 
   710  0698                     	;# 
   711  0699                     	;# 
   712  0711                     	;# 
   713  0712                     	;# 
   714  0713                     	;# 
   715  0714                     	;# 
   716  0715                     	;# 
   717  0716                     	;# 
   718  0717                     	;# 
   719  0718                     	;# 
   720  0719                     	;# 
   721  0891                     	;# 
   722  0891                     	;# 
   723  0891                     	;# 
   724  0891                     	;# 
   725  0891                     	;# 
   726  0891                     	;# 
   727  0892                     	;# 
   728  0892                     	;# 
   729  0892                     	;# 
   730  0893                     	;# 
   731  0893                     	;# 
   732  0893                     	;# 
   733  0893                     	;# 
   734  0893                     	;# 
   735  0893                     	;# 
   736  0894                     	;# 
   737  0894                     	;# 
   738  0894                     	;# 
   739  0895                     	;# 
   740  0895                     	;# 
   741  0895                     	;# 
   742  0896                     	;# 
   743  0896                     	;# 
   744  0896                     	;# 
   745  089B                     	;# 
   746  0911                     	;# 
   747  0912                     	;# 
   748  0913                     	;# 
   749  0914                     	;# 
   750  0915                     	;# 
   751  0916                     	;# 
   752  0918                     	;# 
   753  0919                     	;# 
   754  091A                     	;# 
   755  091B                     	;# 
   756  091C                     	;# 
   757  091D                     	;# 
   758  091E                     	;# 
   759  091F                     	;# 
   760  0E0F                     	;# 
   761  0E10                     	;# 
   762  0E11                     	;# 
   763  0E12                     	;# 
   764  0E13                     	;# 
   765  0E14                     	;# 
   766  0E15                     	;# 
   767  0E16                     	;# 
   768  0E17                     	;# 
   769  0E18                     	;# 
   770  0E19                     	;# 
   771  0E1A                     	;# 
   772  0E1B                     	;# 
   773  0E1C                     	;# 
   774  0E1D                     	;# 
   775  0E1E                     	;# 
   776  0E1F                     	;# 
   777  0E20                     	;# 
   778  0E21                     	;# 
   779  0E22                     	;# 
   780  0E24                     	;# 
   781  0E25                     	;# 
   782  0E28                     	;# 
   783  0E29                     	;# 
   784  0E2A                     	;# 
   785  0E2B                     	;# 
   786  0E2C                     	;# 
   787  0E2D                     	;# 
   788  0E2E                     	;# 
   789  0E2F                     	;# 
   790  0E90                     	;# 
   791  0E91                     	;# 
   792  0E92                     	;# 
   793  0E94                     	;# 
   794  0E95                     	;# 
   795  0E9C                     	;# 
   796  0E9D                     	;# 
   797  0E9E                     	;# 
   798  0E9F                     	;# 
   799  0EA0                     	;# 
   800  0EA1                     	;# 
   801  0EA2                     	;# 
   802  0EA3                     	;# 
   803  0EA4                     	;# 
   804  0EA5                     	;# 
   805  0EA6                     	;# 
   806  0EA7                     	;# 
   807  0F0F                     	;# 
   808  0F10                     	;# 
   809  0F11                     	;# 
   810  0F12                     	;# 
   811  0F13                     	;# 
   812  0F14                     	;# 
   813  0F15                     	;# 
   814  0F16                     	;# 
   815  0F17                     	;# 
   816  0F18                     	;# 
   817  0F19                     	;# 
   818  0F1A                     	;# 
   819  0F1B                     	;# 
   820  0F1C                     	;# 
   821  0F1D                     	;# 
   822  0F1E                     	;# 
   823  0F1F                     	;# 
   824  0F20                     	;# 
   825  0F21                     	;# 
   826  0F22                     	;# 
   827  0F23                     	;# 
   828  0F24                     	;# 
   829  0F25                     	;# 
   830  0F26                     	;# 
   831  0F27                     	;# 
   832  0F28                     	;# 
   833  0F29                     	;# 
   834  0F2A                     	;# 
   835  0F2B                     	;# 
   836  0F2C                     	;# 
   837  0F2D                     	;# 
   838  0F2E                     	;# 
   839  0F2F                     	;# 
   840  0F30                     	;# 
   841  0F31                     	;# 
   842  0F32                     	;# 
   843  0F33                     	;# 
   844  0F34                     	;# 
   845  0F35                     	;# 
   846  0F36                     	;# 
   847  0F37                     	;# 
   848  0FE4                     	;# 
   849  0FE5                     	;# 
   850  0FE6                     	;# 
   851  0FE7                     	;# 
   852  0FE8                     	;# 
   853  0FE9                     	;# 
   854  0FEA                     	;# 
   855  0FEB                     	;# 
   856  0FED                     	;# 
   857  0FEE                     	;# 
   858  0FEF                     	;# 
   859  0000                     	;# 
   860  0001                     	;# 
   861  0002                     	;# 
   862  0003                     	;# 
   863  0004                     	;# 
   864  0005                     	;# 
   865  0006                     	;# 
   866  0007                     	;# 
   867  0008                     	;# 
   868  0009                     	;# 
   869  000A                     	;# 
   870  000B                     	;# 
   871  000C                     	;# 
   872  000D                     	;# 
   873  000E                     	;# 
   874  0010                     	;# 
   875  0011                     	;# 
   876  0012                     	;# 
   877  0013                     	;# 
   878  0014                     	;# 
   879  0015                     	;# 
   880  0015                     	;# 
   881  0016                     	;# 
   882  0016                     	;# 
   883  0017                     	;# 
   884  0018                     	;# 
   885  0019                     	;# 
   886  0019                     	;# 
   887  001A                     	;# 
   888  001B                     	;# 
   889  001C                     	;# 
   890  001D                     	;# 
   891  001E                     	;# 
   892  001F                     	;# 
   893  008C                     	;# 
   894  008D                     	;# 
   895  008E                     	;# 
   896  0090                     	;# 
   897  0091                     	;# 
   898  0092                     	;# 
   899  0093                     	;# 
   900  0094                     	;# 
   901  0097                     	;# 
   902  009B                     	;# 
   903  009B                     	;# 
   904  009C                     	;# 
   905  009D                     	;# 
   906  009E                     	;# 
   907  009F                     	;# 
   908  010C                     	;# 
   909  010D                     	;# 
   910  010E                     	;# 
   911  0111                     	;# 
   912  0112                     	;# 
   913  0113                     	;# 
   914  0114                     	;# 
   915  0115                     	;# 
   916  0116                     	;# 
   917  0117                     	;# 
   918  0118                     	;# 
   919  0119                     	;# 
   920  018C                     	;# 
   921  018D                     	;# 
   922  018E                     	;# 
   923  0197                     	;# 
   924  0199                     	;# 
   925  0199                     	;# 
   926  0199                     	;# 
   927  019A                     	;# 
   928  019A                     	;# 
   929  019A                     	;# 
   930  019B                     	;# 
   931  019B                     	;# 
   932  019B                     	;# 
   933  019B                     	;# 
   934  019B                     	;# 
   935  019C                     	;# 
   936  019C                     	;# 
   937  019C                     	;# 
   938  019D                     	;# 
   939  019D                     	;# 
   940  019D                     	;# 
   941  019E                     	;# 
   942  019E                     	;# 
   943  019E                     	;# 
   944  019F                     	;# 
   945  019F                     	;# 
   946  019F                     	;# 
   947  019F                     	;# 
   948  019F                     	;# 
   949  020C                     	;# 
   950  020D                     	;# 
   951  020E                     	;# 
   952  0211                     	;# 
   953  0211                     	;# 
   954  0212                     	;# 
   955  0212                     	;# 
   956  0213                     	;# 
   957  0213                     	;# 
   958  0214                     	;# 
   959  0214                     	;# 
   960  0215                     	;# 
   961  0215                     	;# 
   962  0215                     	;# 
   963  0215                     	;# 
   964  0216                     	;# 
   965  0216                     	;# 
   966  0217                     	;# 
   967  0217                     	;# 
   968  0219                     	;# 
   969  021A                     	;# 
   970  021B                     	;# 
   971  021C                     	;# 
   972  021D                     	;# 
   973  021D                     	;# 
   974  021E                     	;# 
   975  021F                     	;# 
   976  028C                     	;# 
   977  028D                     	;# 
   978  028E                     	;# 
   979  0291                     	;# 
   980  0291                     	;# 
   981  0292                     	;# 
   982  0293                     	;# 
   983  0294                     	;# 
   984  0295                     	;# 
   985  0295                     	;# 
   986  0296                     	;# 
   987  0297                     	;# 
   988  0298                     	;# 
   989  029F                     	;# 
   990  030C                     	;# 
   991  030D                     	;# 
   992  030E                     	;# 
   993  0311                     	;# 
   994  0311                     	;# 
   995  0312                     	;# 
   996  0313                     	;# 
   997  0314                     	;# 
   998  0315                     	;# 
   999  0315                     	;# 
  1000  0316                     	;# 
  1001  0317                     	;# 
  1002  0318                     	;# 
  1003  038C                     	;# 
  1004  038D                     	;# 
  1005  038E                     	;# 
  1006  0391                     	;# 
  1007  0392                     	;# 
  1008  0393                     	;# 
  1009  0394                     	;# 
  1010  0395                     	;# 
  1011  0396                     	;# 
  1012  0397                     	;# 
  1013  0398                     	;# 
  1014  0399                     	;# 
  1015  039A                     	;# 
  1016  039C                     	;# 
  1017  039D                     	;# 
  1018  039E                     	;# 
  1019  039F                     	;# 
  1020  0411                     	;# 
  1021  0411                     	;# 
  1022  0412                     	;# 
  1023  0413                     	;# 
  1024  0414                     	;# 
  1025  0415                     	;# 
  1026  0416                     	;# 
  1027  0417                     	;# 
  1028  0418                     	;# 
  1029  0418                     	;# 
  1030  0419                     	;# 
  1031  041A                     	;# 
  1032  041B                     	;# 
  1033  041C                     	;# 
  1034  041D                     	;# 
  1035  041E                     	;# 
  1036  041F                     	;# 
  1037  0498                     	;# 
  1038  0498                     	;# 
  1039  0499                     	;# 
  1040  049A                     	;# 
  1041  049B                     	;# 
  1042  049B                     	;# 
  1043  049C                     	;# 
  1044  049D                     	;# 
  1045  049E                     	;# 
  1046  049F                     	;# 
  1047  0617                     	;# 
  1048  0618                     	;# 
  1049  0619                     	;# 
  1050  0619                     	;# 
  1051  061A                     	;# 
  1052  061B                     	;# 
  1053  061C                     	;# 
  1054  061C                     	;# 
  1055  061F                     	;# 
  1056  0691                     	;# 
  1057  0692                     	;# 
  1058  0693                     	;# 
  1059  0694                     	;# 
  1060  0695                     	;# 
  1061  0696                     	;# 
  1062  0697                     	;# 
  1063  0698                     	;# 
  1064  0699                     	;# 
  1065  0711                     	;# 
  1066  0712                     	;# 
  1067  0713                     	;# 
  1068  0714                     	;# 
  1069  0715                     	;# 
  1070  0716                     	;# 
  1071  0717                     	;# 
  1072  0718                     	;# 
  1073  0719                     	;# 
  1074  0891                     	;# 
  1075  0891                     	;# 
  1076  0891                     	;# 
  1077  0891                     	;# 
  1078  0891                     	;# 
  1079  0891                     	;# 
  1080  0892                     	;# 
  1081  0892                     	;# 
  1082  0892                     	;# 
  1083  0893                     	;# 
  1084  0893                     	;# 
  1085  0893                     	;# 
  1086  0893                     	;# 
  1087  0893                     	;# 
  1088  0893                     	;# 
  1089  0894                     	;# 
  1090  0894                     	;# 
  1091  0894                     	;# 
  1092  0895                     	;# 
  1093  0895                     	;# 
  1094  0895                     	;# 
  1095  0896                     	;# 
  1096  0896                     	;# 
  1097  0896                     	;# 
  1098  089B                     	;# 
  1099  0911                     	;# 
  1100  0912                     	;# 
  1101  0913                     	;# 
  1102  0914                     	;# 
  1103  0915                     	;# 
  1104  0916                     	;# 
  1105  0918                     	;# 
  1106  0919                     	;# 
  1107  091A                     	;# 
  1108  091B                     	;# 
  1109  091C                     	;# 
  1110  091D                     	;# 
  1111  091E                     	;# 
  1112  091F                     	;# 
  1113  0E0F                     	;# 
  1114  0E10                     	;# 
  1115  0E11                     	;# 
  1116  0E12                     	;# 
  1117  0E13                     	;# 
  1118  0E14                     	;# 
  1119  0E15                     	;# 
  1120  0E16                     	;# 
  1121  0E17                     	;# 
  1122  0E18                     	;# 
  1123  0E19                     	;# 
  1124  0E1A                     	;# 
  1125  0E1B                     	;# 
  1126  0E1C                     	;# 
  1127  0E1D                     	;# 
  1128  0E1E                     	;# 
  1129  0E1F                     	;# 
  1130  0E20                     	;# 
  1131  0E21                     	;# 
  1132  0E22                     	;# 
  1133  0E24                     	;# 
  1134  0E25                     	;# 
  1135  0E28                     	;# 
  1136  0E29                     	;# 
  1137  0E2A                     	;# 
  1138  0E2B                     	;# 
  1139  0E2C                     	;# 
  1140  0E2D                     	;# 
  1141  0E2E                     	;# 
  1142  0E2F                     	;# 
  1143  0E90                     	;# 
  1144  0E91                     	;# 
  1145  0E92                     	;# 
  1146  0E94                     	;# 
  1147  0E95                     	;# 
  1148  0E9C                     	;# 
  1149  0E9D                     	;# 
  1150  0E9E                     	;# 
  1151  0E9F                     	;# 
  1152  0EA0                     	;# 
  1153  0EA1                     	;# 
  1154  0EA2                     	;# 
  1155  0EA3                     	;# 
  1156  0EA4                     	;# 
  1157  0EA5                     	;# 
  1158  0EA6                     	;# 
  1159  0EA7                     	;# 
  1160  0F0F                     	;# 
  1161  0F10                     	;# 
  1162  0F11                     	;# 
  1163  0F12                     	;# 
  1164  0F13                     	;# 
  1165  0F14                     	;# 
  1166  0F15                     	;# 
  1167  0F16                     	;# 
  1168  0F17                     	;# 
  1169  0F18                     	;# 
  1170  0F19                     	;# 
  1171  0F1A                     	;# 
  1172  0F1B                     	;# 
  1173  0F1C                     	;# 
  1174  0F1D                     	;# 
  1175  0F1E                     	;# 
  1176  0F1F                     	;# 
  1177  0F20                     	;# 
  1178  0F21                     	;# 
  1179  0F22                     	;# 
  1180  0F23                     	;# 
  1181  0F24                     	;# 
  1182  0F25                     	;# 
  1183  0F26                     	;# 
  1184  0F27                     	;# 
  1185  0F28                     	;# 
  1186  0F29                     	;# 
  1187  0F2A                     	;# 
  1188  0F2B                     	;# 
  1189  0F2C                     	;# 
  1190  0F2D                     	;# 
  1191  0F2E                     	;# 
  1192  0F2F                     	;# 
  1193  0F30                     	;# 
  1194  0F31                     	;# 
  1195  0F32                     	;# 
  1196  0F33                     	;# 
  1197  0F34                     	;# 
  1198  0F35                     	;# 
  1199  0F36                     	;# 
  1200  0F37                     	;# 
  1201  0FE4                     	;# 
  1202  0FE5                     	;# 
  1203  0FE6                     	;# 
  1204  0FE7                     	;# 
  1205  0FE8                     	;# 
  1206  0FE9                     	;# 
  1207  0FEA                     	;# 
  1208  0FEB                     	;# 
  1209  0FED                     	;# 
  1210  0FEE                     	;# 
  1211  0FEF                     	;# 
  1212  0000                     	;# 
  1213  0001                     	;# 
  1214  0002                     	;# 
  1215  0003                     	;# 
  1216  0004                     	;# 
  1217  0005                     	;# 
  1218  0006                     	;# 
  1219  0007                     	;# 
  1220  0008                     	;# 
  1221  0009                     	;# 
  1222  000A                     	;# 
  1223  000B                     	;# 
  1224  000C                     	;# 
  1225  000D                     	;# 
  1226  000E                     	;# 
  1227  0010                     	;# 
  1228  0011                     	;# 
  1229  0012                     	;# 
  1230  0013                     	;# 
  1231  0014                     	;# 
  1232  0015                     	;# 
  1233  0015                     	;# 
  1234  0016                     	;# 
  1235  0016                     	;# 
  1236  0017                     	;# 
  1237  0018                     	;# 
  1238  0019                     	;# 
  1239  0019                     	;# 
  1240  001A                     	;# 
  1241  001B                     	;# 
  1242  001C                     	;# 
  1243  001D                     	;# 
  1244  001E                     	;# 
  1245  001F                     	;# 
  1246  008C                     	;# 
  1247  008D                     	;# 
  1248  008E                     	;# 
  1249  0090                     	;# 
  1250  0091                     	;# 
  1251  0092                     	;# 
  1252  0093                     	;# 
  1253  0094                     	;# 
  1254  0097                     	;# 
  1255  009B                     	;# 
  1256  009B                     	;# 
  1257  009C                     	;# 
  1258  009D                     	;# 
  1259  009E                     	;# 
  1260  009F                     	;# 
  1261  010C                     	;# 
  1262  010D                     	;# 
  1263  010E                     	;# 
  1264  0111                     	;# 
  1265  0112                     	;# 
  1266  0113                     	;# 
  1267  0114                     	;# 
  1268  0115                     	;# 
  1269  0116                     	;# 
  1270  0117                     	;# 
  1271  0118                     	;# 
  1272  0119                     	;# 
  1273  018C                     	;# 
  1274  018D                     	;# 
  1275  018E                     	;# 
  1276  0197                     	;# 
  1277  0199                     	;# 
  1278  0199                     	;# 
  1279  0199                     	;# 
  1280  019A                     	;# 
  1281  019A                     	;# 
  1282  019A                     	;# 
  1283  019B                     	;# 
  1284  019B                     	;# 
  1285  019B                     	;# 
  1286  019B                     	;# 
  1287  019B                     	;# 
  1288  019C                     	;# 
  1289  019C                     	;# 
  1290  019C                     	;# 
  1291  019D                     	;# 
  1292  019D                     	;# 
  1293  019D                     	;# 
  1294  019E                     	;# 
  1295  019E                     	;# 
  1296  019E                     	;# 
  1297  019F                     	;# 
  1298  019F                     	;# 
  1299  019F                     	;# 
  1300  019F                     	;# 
  1301  019F                     	;# 
  1302  020C                     	;# 
  1303  020D                     	;# 
  1304  020E                     	;# 
  1305  0211                     	;# 
  1306  0211                     	;# 
  1307  0212                     	;# 
  1308  0212                     	;# 
  1309  0213                     	;# 
  1310  0213                     	;# 
  1311  0214                     	;# 
  1312  0214                     	;# 
  1313  0215                     	;# 
  1314  0215                     	;# 
  1315  0215                     	;# 
  1316  0215                     	;# 
  1317  0216                     	;# 
  1318  0216                     	;# 
  1319  0217                     	;# 
  1320  0217                     	;# 
  1321  0219                     	;# 
  1322  021A                     	;# 
  1323  021B                     	;# 
  1324  021C                     	;# 
  1325  021D                     	;# 
  1326  021D                     	;# 
  1327  021E                     	;# 
  1328  021F                     	;# 
  1329  028C                     	;# 
  1330  028D                     	;# 
  1331  028E                     	;# 
  1332  0291                     	;# 
  1333  0291                     	;# 
  1334  0292                     	;# 
  1335  0293                     	;# 
  1336  0294                     	;# 
  1337  0295                     	;# 
  1338  0295                     	;# 
  1339  0296                     	;# 
  1340  0297                     	;# 
  1341  0298                     	;# 
  1342  029F                     	;# 
  1343  030C                     	;# 
  1344  030D                     	;# 
  1345  030E                     	;# 
  1346  0311                     	;# 
  1347  0311                     	;# 
  1348  0312                     	;# 
  1349  0313                     	;# 
  1350  0314                     	;# 
  1351  0315                     	;# 
  1352  0315                     	;# 
  1353  0316                     	;# 
  1354  0317                     	;# 
  1355  0318                     	;# 
  1356  038C                     	;# 
  1357  038D                     	;# 
  1358  038E                     	;# 
  1359  0391                     	;# 
  1360  0392                     	;# 
  1361  0393                     	;# 
  1362  0394                     	;# 
  1363  0395                     	;# 
  1364  0396                     	;# 
  1365  0397                     	;# 
  1366  0398                     	;# 
  1367  0399                     	;# 
  1368  039A                     	;# 
  1369  039C                     	;# 
  1370  039D                     	;# 
  1371  039E                     	;# 
  1372  039F                     	;# 
  1373  0411                     	;# 
  1374  0411                     	;# 
  1375  0412                     	;# 
  1376  0413                     	;# 
  1377  0414                     	;# 
  1378  0415                     	;# 
  1379  0416                     	;# 
  1380  0417                     	;# 
  1381  0418                     	;# 
  1382  0418                     	;# 
  1383  0419                     	;# 
  1384  041A                     	;# 
  1385  041B                     	;# 
  1386  041C                     	;# 
  1387  041D                     	;# 
  1388  041E                     	;# 
  1389  041F                     	;# 
  1390  0498                     	;# 
  1391  0498                     	;# 
  1392  0499                     	;# 
  1393  049A                     	;# 
  1394  049B                     	;# 
  1395  049B                     	;# 
  1396  049C                     	;# 
  1397  049D                     	;# 
  1398  049E                     	;# 
  1399  049F                     	;# 
  1400  0617                     	;# 
  1401  0618                     	;# 
  1402  0619                     	;# 
  1403  0619                     	;# 
  1404  061A                     	;# 
  1405  061B                     	;# 
  1406  061C                     	;# 
  1407  061C                     	;# 
  1408  061F                     	;# 
  1409  0691                     	;# 
  1410  0692                     	;# 
  1411  0693                     	;# 
  1412  0694                     	;# 
  1413  0695                     	;# 
  1414  0696                     	;# 
  1415  0697                     	;# 
  1416  0698                     	;# 
  1417  0699                     	;# 
  1418  0711                     	;# 
  1419  0712                     	;# 
  1420  0713                     	;# 
  1421  0714                     	;# 
  1422  0715                     	;# 
  1423  0716                     	;# 
  1424  0717                     	;# 
  1425  0718                     	;# 
  1426  0719                     	;# 
  1427  0891                     	;# 
  1428  0891                     	;# 
  1429  0891                     	;# 
  1430  0891                     	;# 
  1431  0891                     	;# 
  1432  0891                     	;# 
  1433  0892                     	;# 
  1434  0892                     	;# 
  1435  0892                     	;# 
  1436  0893                     	;# 
  1437  0893                     	;# 
  1438  0893                     	;# 
  1439  0893                     	;# 
  1440  0893                     	;# 
  1441  0893                     	;# 
  1442  0894                     	;# 
  1443  0894                     	;# 
  1444  0894                     	;# 
  1445  0895                     	;# 
  1446  0895                     	;# 
  1447  0895                     	;# 
  1448  0896                     	;# 
  1449  0896                     	;# 
  1450  0896                     	;# 
  1451  089B                     	;# 
  1452  0911                     	;# 
  1453  0912                     	;# 
  1454  0913                     	;# 
  1455  0914                     	;# 
  1456  0915                     	;# 
  1457  0916                     	;# 
  1458  0918                     	;# 
  1459  0919                     	;# 
  1460  091A                     	;# 
  1461  091B                     	;# 
  1462  091C                     	;# 
  1463  091D                     	;# 
  1464  091E                     	;# 
  1465  091F                     	;# 
  1466  0E0F                     	;# 
  1467  0E10                     	;# 
  1468  0E11                     	;# 
  1469  0E12                     	;# 
  1470  0E13                     	;# 
  1471  0E14                     	;# 
  1472  0E15                     	;# 
  1473  0E16                     	;# 
  1474  0E17                     	;# 
  1475  0E18                     	;# 
  1476  0E19                     	;# 
  1477  0E1A                     	;# 
  1478  0E1B                     	;# 
  1479  0E1C                     	;# 
  1480  0E1D                     	;# 
  1481  0E1E                     	;# 
  1482  0E1F                     	;# 
  1483  0E20                     	;# 
  1484  0E21                     	;# 
  1485  0E22                     	;# 
  1486  0E24                     	;# 
  1487  0E25                     	;# 
  1488  0E28                     	;# 
  1489  0E29                     	;# 
  1490  0E2A                     	;# 
  1491  0E2B                     	;# 
  1492  0E2C                     	;# 
  1493  0E2D                     	;# 
  1494  0E2E                     	;# 
  1495  0E2F                     	;# 
  1496  0E90                     	;# 
  1497  0E91                     	;# 
  1498  0E92                     	;# 
  1499  0E94                     	;# 
  1500  0E95                     	;# 
  1501  0E9C                     	;# 
  1502  0E9D                     	;# 
  1503  0E9E                     	;# 
  1504  0E9F                     	;# 
  1505  0EA0                     	;# 
  1506  0EA1                     	;# 
  1507  0EA2                     	;# 
  1508  0EA3                     	;# 
  1509  0EA4                     	;# 
  1510  0EA5                     	;# 
  1511  0EA6                     	;# 
  1512  0EA7                     	;# 
  1513  0F0F                     	;# 
  1514  0F10                     	;# 
  1515  0F11                     	;# 
  1516  0F12                     	;# 
  1517  0F13                     	;# 
  1518  0F14                     	;# 
  1519  0F15                     	;# 
  1520  0F16                     	;# 
  1521  0F17                     	;# 
  1522  0F18                     	;# 
  1523  0F19                     	;# 
  1524  0F1A                     	;# 
  1525  0F1B                     	;# 
  1526  0F1C                     	;# 
  1527  0F1D                     	;# 
  1528  0F1E                     	;# 
  1529  0F1F                     	;# 
  1530  0F20                     	;# 
  1531  0F21                     	;# 
  1532  0F22                     	;# 
  1533  0F23                     	;# 
  1534  0F24                     	;# 
  1535  0F25                     	;# 
  1536  0F26                     	;# 
  1537  0F27                     	;# 
  1538  0F28                     	;# 
  1539  0F29                     	;# 
  1540  0F2A                     	;# 
  1541  0F2B                     	;# 
  1542  0F2C                     	;# 
  1543  0F2D                     	;# 
  1544  0F2E                     	;# 
  1545  0F2F                     	;# 
  1546  0F30                     	;# 
  1547  0F31                     	;# 
  1548  0F32                     	;# 
  1549  0F33                     	;# 
  1550  0F34                     	;# 
  1551  0F35                     	;# 
  1552  0F36                     	;# 
  1553  0F37                     	;# 
  1554  0FE4                     	;# 
  1555  0FE5                     	;# 
  1556  0FE6                     	;# 
  1557  0FE7                     	;# 
  1558  0FE8                     	;# 
  1559  0FE9                     	;# 
  1560  0FEA                     	;# 
  1561  0FEB                     	;# 
  1562  0FED                     	;# 
  1563  0FEE                     	;# 
  1564  0FEF                     	;# 
  1565  0000                     	;# 
  1566  0001                     	;# 
  1567  0002                     	;# 
  1568  0003                     	;# 
  1569  0004                     	;# 
  1570  0005                     	;# 
  1571  0006                     	;# 
  1572  0007                     	;# 
  1573  0008                     	;# 
  1574  0009                     	;# 
  1575  000A                     	;# 
  1576  000B                     	;# 
  1577  000C                     	;# 
  1578  000D                     	;# 
  1579  000E                     	;# 
  1580  0010                     	;# 
  1581  0011                     	;# 
  1582  0012                     	;# 
  1583  0013                     	;# 
  1584  0014                     	;# 
  1585  0015                     	;# 
  1586  0015                     	;# 
  1587  0016                     	;# 
  1588  0016                     	;# 
  1589  0017                     	;# 
  1590  0018                     	;# 
  1591  0019                     	;# 
  1592  0019                     	;# 
  1593  001A                     	;# 
  1594  001B                     	;# 
  1595  001C                     	;# 
  1596  001D                     	;# 
  1597  001E                     	;# 
  1598  001F                     	;# 
  1599  008C                     	;# 
  1600  008D                     	;# 
  1601  008E                     	;# 
  1602  0090                     	;# 
  1603  0091                     	;# 
  1604  0092                     	;# 
  1605  0093                     	;# 
  1606  0094                     	;# 
  1607  0097                     	;# 
  1608  009B                     	;# 
  1609  009B                     	;# 
  1610  009C                     	;# 
  1611  009D                     	;# 
  1612  009E                     	;# 
  1613  009F                     	;# 
  1614  010C                     	;# 
  1615  010D                     	;# 
  1616  010E                     	;# 
  1617  0111                     	;# 
  1618  0112                     	;# 
  1619  0113                     	;# 
  1620  0114                     	;# 
  1621  0115                     	;# 
  1622  0116                     	;# 
  1623  0117                     	;# 
  1624  0118                     	;# 
  1625  0119                     	;# 
  1626  018C                     	;# 
  1627  018D                     	;# 
  1628  018E                     	;# 
  1629  0197                     	;# 
  1630  0199                     	;# 
  1631  0199                     	;# 
  1632  0199                     	;# 
  1633  019A                     	;# 
  1634  019A                     	;# 
  1635  019A                     	;# 
  1636  019B                     	;# 
  1637  019B                     	;# 
  1638  019B                     	;# 
  1639  019B                     	;# 
  1640  019B                     	;# 
  1641  019C                     	;# 
  1642  019C                     	;# 
  1643  019C                     	;# 
  1644  019D                     	;# 
  1645  019D                     	;# 
  1646  019D                     	;# 
  1647  019E                     	;# 
  1648  019E                     	;# 
  1649  019E                     	;# 
  1650  019F                     	;# 
  1651  019F                     	;# 
  1652  019F                     	;# 
  1653  019F                     	;# 
  1654  019F                     	;# 
  1655  020C                     	;# 
  1656  020D                     	;# 
  1657  020E                     	;# 
  1658  0211                     	;# 
  1659  0211                     	;# 
  1660  0212                     	;# 
  1661  0212                     	;# 
  1662  0213                     	;# 
  1663  0213                     	;# 
  1664  0214                     	;# 
  1665  0214                     	;# 
  1666  0215                     	;# 
  1667  0215                     	;# 
  1668  0215                     	;# 
  1669  0215                     	;# 
  1670  0216                     	;# 
  1671  0216                     	;# 
  1672  0217                     	;# 
  1673  0217                     	;# 
  1674  0219                     	;# 
  1675  021A                     	;# 
  1676  021B                     	;# 
  1677  021C                     	;# 
  1678  021D                     	;# 
  1679  021D                     	;# 
  1680  021E                     	;# 
  1681  021F                     	;# 
  1682  028C                     	;# 
  1683  028D                     	;# 
  1684  028E                     	;# 
  1685  0291                     	;# 
  1686  0291                     	;# 
  1687  0292                     	;# 
  1688  0293                     	;# 
  1689  0294                     	;# 
  1690  0295                     	;# 
  1691  0295                     	;# 
  1692  0296                     	;# 
  1693  0297                     	;# 
  1694  0298                     	;# 
  1695  029F                     	;# 
  1696  030C                     	;# 
  1697  030D                     	;# 
  1698  030E                     	;# 
  1699  0311                     	;# 
  1700  0311                     	;# 
  1701  0312                     	;# 
  1702  0313                     	;# 
  1703  0314                     	;# 
  1704  0315                     	;# 
  1705  0315                     	;# 
  1706  0316                     	;# 
  1707  0317                     	;# 
  1708  0318                     	;# 
  1709  038C                     	;# 
  1710  038D                     	;# 
  1711  038E                     	;# 
  1712  0391                     	;# 
  1713  0392                     	;# 
  1714  0393                     	;# 
  1715  0394                     	;# 
  1716  0395                     	;# 
  1717  0396                     	;# 
  1718  0397                     	;# 
  1719  0398                     	;# 
  1720  0399                     	;# 
  1721  039A                     	;# 
  1722  039C                     	;# 
  1723  039D                     	;# 
  1724  039E                     	;# 
  1725  039F                     	;# 
  1726  0411                     	;# 
  1727  0411                     	;# 
  1728  0412                     	;# 
  1729  0413                     	;# 
  1730  0414                     	;# 
  1731  0415                     	;# 
  1732  0416                     	;# 
  1733  0417                     	;# 
  1734  0418                     	;# 
  1735  0418                     	;# 
  1736  0419                     	;# 
  1737  041A                     	;# 
  1738  041B                     	;# 
  1739  041C                     	;# 
  1740  041D                     	;# 
  1741  041E                     	;# 
  1742  041F                     	;# 
  1743  0498                     	;# 
  1744  0498                     	;# 
  1745  0499                     	;# 
  1746  049A                     	;# 
  1747  049B                     	;# 
  1748  049B                     	;# 
  1749  049C                     	;# 
  1750  049D                     	;# 
  1751  049E                     	;# 
  1752  049F                     	;# 
  1753  0617                     	;# 
  1754  0618                     	;# 
  1755  0619                     	;# 
  1756  0619                     	;# 
  1757  061A                     	;# 
  1758  061B                     	;# 
  1759  061C                     	;# 
  1760  061C                     	;# 
  1761  061F                     	;# 
  1762  0691                     	;# 
  1763  0692                     	;# 
  1764  0693                     	;# 
  1765  0694                     	;# 
  1766  0695                     	;# 
  1767  0696                     	;# 
  1768  0697                     	;# 
  1769  0698                     	;# 
  1770  0699                     	;# 
  1771  0711                     	;# 
  1772  0712                     	;# 
  1773  0713                     	;# 
  1774  0714                     	;# 
  1775  0715                     	;# 
  1776  0716                     	;# 
  1777  0717                     	;# 
  1778  0718                     	;# 
  1779  0719                     	;# 
  1780  0891                     	;# 
  1781  0891                     	;# 
  1782  0891                     	;# 
  1783  0891                     	;# 
  1784  0891                     	;# 
  1785  0891                     	;# 
  1786  0892                     	;# 
  1787  0892                     	;# 
  1788  0892                     	;# 
  1789  0893                     	;# 
  1790  0893                     	;# 
  1791  0893                     	;# 
  1792  0893                     	;# 
  1793  0893                     	;# 
  1794  0893                     	;# 
  1795  0894                     	;# 
  1796  0894                     	;# 
  1797  0894                     	;# 
  1798  0895                     	;# 
  1799  0895                     	;# 
  1800  0895                     	;# 
  1801  0896                     	;# 
  1802  0896                     	;# 
  1803  0896                     	;# 
  1804  089B                     	;# 
  1805  0911                     	;# 
  1806  0912                     	;# 
  1807  0913                     	;# 
  1808  0914                     	;# 
  1809  0915                     	;# 
  1810  0916                     	;# 
  1811  0918                     	;# 
  1812  0919                     	;# 
  1813  091A                     	;# 
  1814  091B                     	;# 
  1815  091C                     	;# 
  1816  091D                     	;# 
  1817  091E                     	;# 
  1818  091F                     	;# 
  1819  0E0F                     	;# 
  1820  0E10                     	;# 
  1821  0E11                     	;# 
  1822  0E12                     	;# 
  1823  0E13                     	;# 
  1824  0E14                     	;# 
  1825  0E15                     	;# 
  1826  0E16                     	;# 
  1827  0E17                     	;# 
  1828  0E18                     	;# 
  1829  0E19                     	;# 
  1830  0E1A                     	;# 
  1831  0E1B                     	;# 
  1832  0E1C                     	;# 
  1833  0E1D                     	;# 
  1834  0E1E                     	;# 
  1835  0E1F                     	;# 
  1836  0E20                     	;# 
  1837  0E21                     	;# 
  1838  0E22                     	;# 
  1839  0E24                     	;# 
  1840  0E25                     	;# 
  1841  0E28                     	;# 
  1842  0E29                     	;# 
  1843  0E2A                     	;# 
  1844  0E2B                     	;# 
  1845  0E2C                     	;# 
  1846  0E2D                     	;# 
  1847  0E2E                     	;# 
  1848  0E2F                     	;# 
  1849  0E90                     	;# 
  1850  0E91                     	;# 
  1851  0E92                     	;# 
  1852  0E94                     	;# 
  1853  0E95                     	;# 
  1854  0E9C                     	;# 
  1855  0E9D                     	;# 
  1856  0E9E                     	;# 
  1857  0E9F                     	;# 
  1858  0EA0                     	;# 
  1859  0EA1                     	;# 
  1860  0EA2                     	;# 
  1861  0EA3                     	;# 
  1862  0EA4                     	;# 
  1863  0EA5                     	;# 
  1864  0EA6                     	;# 
  1865  0EA7                     	;# 
  1866  0F0F                     	;# 
  1867  0F10                     	;# 
  1868  0F11                     	;# 
  1869  0F12                     	;# 
  1870  0F13                     	;# 
  1871  0F14                     	;# 
  1872  0F15                     	;# 
  1873  0F16                     	;# 
  1874  0F17                     	;# 
  1875  0F18                     	;# 
  1876  0F19                     	;# 
  1877  0F1A                     	;# 
  1878  0F1B                     	;# 
  1879  0F1C                     	;# 
  1880  0F1D                     	;# 
  1881  0F1E                     	;# 
  1882  0F1F                     	;# 
  1883  0F20                     	;# 
  1884  0F21                     	;# 
  1885  0F22                     	;# 
  1886  0F23                     	;# 
  1887  0F24                     	;# 
  1888  0F25                     	;# 
  1889  0F26                     	;# 
  1890  0F27                     	;# 
  1891  0F28                     	;# 
  1892  0F29                     	;# 
  1893  0F2A                     	;# 
  1894  0F2B                     	;# 
  1895  0F2C                     	;# 
  1896  0F2D                     	;# 
  1897  0F2E                     	;# 
  1898  0F2F                     	;# 
  1899  0F30                     	;# 
  1900  0F31                     	;# 
  1901  0F32                     	;# 
  1902  0F33                     	;# 
  1903  0F34                     	;# 
  1904  0F35                     	;# 
  1905  0F36                     	;# 
  1906  0F37                     	;# 
  1907  0FE4                     	;# 
  1908  0FE5                     	;# 
  1909  0FE6                     	;# 
  1910  0FE7                     	;# 
  1911  0FE8                     	;# 
  1912  0FE9                     	;# 
  1913  0FEA                     	;# 
  1914  0FEB                     	;# 
  1915  0FED                     	;# 
  1916  0FEE                     	;# 
  1917  0FEF                     	;# 
  1918  0000                     	;# 
  1919  0001                     	;# 
  1920  0002                     	;# 
  1921  0003                     	;# 
  1922  0004                     	;# 
  1923  0005                     	;# 
  1924  0006                     	;# 
  1925  0007                     	;# 
  1926  0008                     	;# 
  1927  0009                     	;# 
  1928  000A                     	;# 
  1929  000B                     	;# 
  1930  000C                     	;# 
  1931  000D                     	;# 
  1932  000E                     	;# 
  1933  0010                     	;# 
  1934  0011                     	;# 
  1935  0012                     	;# 
  1936  0013                     	;# 
  1937  0014                     	;# 
  1938  0015                     	;# 
  1939  0015                     	;# 
  1940  0016                     	;# 
  1941  0016                     	;# 
  1942  0017                     	;# 
  1943  0018                     	;# 
  1944  0019                     	;# 
  1945  0019                     	;# 
  1946  001A                     	;# 
  1947  001B                     	;# 
  1948  001C                     	;# 
  1949  001D                     	;# 
  1950  001E                     	;# 
  1951  001F                     	;# 
  1952  008C                     	;# 
  1953  008D                     	;# 
  1954  008E                     	;# 
  1955  0090                     	;# 
  1956  0091                     	;# 
  1957  0092                     	;# 
  1958  0093                     	;# 
  1959  0094                     	;# 
  1960  0097                     	;# 
  1961  009B                     	;# 
  1962  009B                     	;# 
  1963  009C                     	;# 
  1964  009D                     	;# 
  1965  009E                     	;# 
  1966  009F                     	;# 
  1967  010C                     	;# 
  1968  010D                     	;# 
  1969  010E                     	;# 
  1970  0111                     	;# 
  1971  0112                     	;# 
  1972  0113                     	;# 
  1973  0114                     	;# 
  1974  0115                     	;# 
  1975  0116                     	;# 
  1976  0117                     	;# 
  1977  0118                     	;# 
  1978  0119                     	;# 
  1979  018C                     	;# 
  1980  018D                     	;# 
  1981  018E                     	;# 
  1982  0197                     	;# 
  1983  0199                     	;# 
  1984  0199                     	;# 
  1985  0199                     	;# 
  1986  019A                     	;# 
  1987  019A                     	;# 
  1988  019A                     	;# 
  1989  019B                     	;# 
  1990  019B                     	;# 
  1991  019B                     	;# 
  1992  019B                     	;# 
  1993  019B                     	;# 
  1994  019C                     	;# 
  1995  019C                     	;# 
  1996  019C                     	;# 
  1997  019D                     	;# 
  1998  019D                     	;# 
  1999  019D                     	;# 
  2000  019E                     	;# 
  2001  019E                     	;# 
  2002  019E                     	;# 
  2003  019F                     	;# 
  2004  019F                     	;# 
  2005  019F                     	;# 
  2006  019F                     	;# 
  2007  019F                     	;# 
  2008  020C                     	;# 
  2009  020D                     	;# 
  2010  020E                     	;# 
  2011  0211                     	;# 
  2012  0211                     	;# 
  2013  0212                     	;# 
  2014  0212                     	;# 
  2015  0213                     	;# 
  2016  0213                     	;# 
  2017  0214                     	;# 
  2018  0214                     	;# 
  2019  0215                     	;# 
  2020  0215                     	;# 
  2021  0215                     	;# 
  2022  0215                     	;# 
  2023  0216                     	;# 
  2024  0216                     	;# 
  2025  0217                     	;# 
  2026  0217                     	;# 
  2027  0219                     	;# 
  2028  021A                     	;# 
  2029  021B                     	;# 
  2030  021C                     	;# 
  2031  021D                     	;# 
  2032  021D                     	;# 
  2033  021E                     	;# 
  2034  021F                     	;# 
  2035  028C                     	;# 
  2036  028D                     	;# 
  2037  028E                     	;# 
  2038  0291                     	;# 
  2039  0291                     	;# 
  2040  0292                     	;# 
  2041  0293                     	;# 
  2042  0294                     	;# 
  2043  0295                     	;# 
  2044  0295                     	;# 
  2045  0296                     	;# 
  2046  0297                     	;# 
  2047  0298                     	;# 
  2048  029F                     	;# 
  2049  030C                     	;# 
  2050  030D                     	;# 
  2051  030E                     	;# 
  2052  0311                     	;# 
  2053  0311                     	;# 
  2054  0312                     	;# 
  2055  0313                     	;# 
  2056  0314                     	;# 
  2057  0315                     	;# 
  2058  0315                     	;# 
  2059  0316                     	;# 
  2060  0317                     	;# 
  2061  0318                     	;# 
  2062  038C                     	;# 
  2063  038D                     	;# 
  2064  038E                     	;# 
  2065  0391                     	;# 
  2066  0392                     	;# 
  2067  0393                     	;# 
  2068  0394                     	;# 
  2069  0395                     	;# 
  2070  0396                     	;# 
  2071  0397                     	;# 
  2072  0398                     	;# 
  2073  0399                     	;# 
  2074  039A                     	;# 
  2075  039C                     	;# 
  2076  039D                     	;# 
  2077  039E                     	;# 
  2078  039F                     	;# 
  2079  0411                     	;# 
  2080  0411                     	;# 
  2081  0412                     	;# 
  2082  0413                     	;# 
  2083  0414                     	;# 
  2084  0415                     	;# 
  2085  0416                     	;# 
  2086  0417                     	;# 
  2087  0418                     	;# 
  2088  0418                     	;# 
  2089  0419                     	;# 
  2090  041A                     	;# 
  2091  041B                     	;# 
  2092  041C                     	;# 
  2093  041D                     	;# 
  2094  041E                     	;# 
  2095  041F                     	;# 
  2096  0498                     	;# 
  2097  0498                     	;# 
  2098  0499                     	;# 
  2099  049A                     	;# 
  2100  049B                     	;# 
  2101  049B                     	;# 
  2102  049C                     	;# 
  2103  049D                     	;# 
  2104  049E                     	;# 
  2105  049F                     	;# 
  2106  0617                     	;# 
  2107  0618                     	;# 
  2108  0619                     	;# 
  2109  0619                     	;# 
  2110  061A                     	;# 
  2111  061B                     	;# 
  2112  061C                     	;# 
  2113  061C                     	;# 
  2114  061F                     	;# 
  2115  0691                     	;# 
  2116  0692                     	;# 
  2117  0693                     	;# 
  2118  0694                     	;# 
  2119  0695                     	;# 
  2120  0696                     	;# 
  2121  0697                     	;# 
  2122  0698                     	;# 
  2123  0699                     	;# 
  2124  0711                     	;# 
  2125  0712                     	;# 
  2126  0713                     	;# 
  2127  0714                     	;# 
  2128  0715                     	;# 
  2129  0716                     	;# 
  2130  0717                     	;# 
  2131  0718                     	;# 
  2132  0719                     	;# 
  2133  0891                     	;# 
  2134  0891                     	;# 
  2135  0891                     	;# 
  2136  0891                     	;# 
  2137  0891                     	;# 
  2138  0891                     	;# 
  2139  0892                     	;# 
  2140  0892                     	;# 
  2141  0892                     	;# 
  2142  0893                     	;# 
  2143  0893                     	;# 
  2144  0893                     	;# 
  2145  0893                     	;# 
  2146  0893                     	;# 
  2147  0893                     	;# 
  2148  0894                     	;# 
  2149  0894                     	;# 
  2150  0894                     	;# 
  2151  0895                     	;# 
  2152  0895                     	;# 
  2153  0895                     	;# 
  2154  0896                     	;# 
  2155  0896                     	;# 
  2156  0896                     	;# 
  2157  089B                     	;# 
  2158  0911                     	;# 
  2159  0912                     	;# 
  2160  0913                     	;# 
  2161  0914                     	;# 
  2162  0915                     	;# 
  2163  0916                     	;# 
  2164  0918                     	;# 
  2165  0919                     	;# 
  2166  091A                     	;# 
  2167  091B                     	;# 
  2168  091C                     	;# 
  2169  091D                     	;# 
  2170  091E                     	;# 
  2171  091F                     	;# 
  2172  0E0F                     	;# 
  2173  0E10                     	;# 
  2174  0E11                     	;# 
  2175  0E12                     	;# 
  2176  0E13                     	;# 
  2177  0E14                     	;# 
  2178  0E15                     	;# 
  2179  0E16                     	;# 
  2180  0E17                     	;# 
  2181  0E18                     	;# 
  2182  0E19                     	;# 
  2183  0E1A                     	;# 
  2184  0E1B                     	;# 
  2185  0E1C                     	;# 
  2186  0E1D                     	;# 
  2187  0E1E                     	;# 
  2188  0E1F                     	;# 
  2189  0E20                     	;# 
  2190  0E21                     	;# 
  2191  0E22                     	;# 
  2192  0E24                     	;# 
  2193  0E25                     	;# 
  2194  0E28                     	;# 
  2195  0E29                     	;# 
  2196  0E2A                     	;# 
  2197  0E2B                     	;# 
  2198  0E2C                     	;# 
  2199  0E2D                     	;# 
  2200  0E2E                     	;# 
  2201  0E2F                     	;# 
  2202  0E90                     	;# 
  2203  0E91                     	;# 
  2204  0E92                     	;# 
  2205  0E94                     	;# 
  2206  0E95                     	;# 
  2207  0E9C                     	;# 
  2208  0E9D                     	;# 
  2209  0E9E                     	;# 
  2210  0E9F                     	;# 
  2211  0EA0                     	;# 
  2212  0EA1                     	;# 
  2213  0EA2                     	;# 
  2214  0EA3                     	;# 
  2215  0EA4                     	;# 
  2216  0EA5                     	;# 
  2217  0EA6                     	;# 
  2218  0EA7                     	;# 
  2219  0F0F                     	;# 
  2220  0F10                     	;# 
  2221  0F11                     	;# 
  2222  0F12                     	;# 
  2223  0F13                     	;# 
  2224  0F14                     	;# 
  2225  0F15                     	;# 
  2226  0F16                     	;# 
  2227  0F17                     	;# 
  2228  0F18                     	;# 
  2229  0F19                     	;# 
  2230  0F1A                     	;# 
  2231  0F1B                     	;# 
  2232  0F1C                     	;# 
  2233  0F1D                     	;# 
  2234  0F1E                     	;# 
  2235  0F1F                     	;# 
  2236  0F20                     	;# 
  2237  0F21                     	;# 
  2238  0F22                     	;# 
  2239  0F23                     	;# 
  2240  0F24                     	;# 
  2241  0F25                     	;# 
  2242  0F26                     	;# 
  2243  0F27                     	;# 
  2244  0F28                     	;# 
  2245  0F29                     	;# 
  2246  0F2A                     	;# 
  2247  0F2B                     	;# 
  2248  0F2C                     	;# 
  2249  0F2D                     	;# 
  2250  0F2E                     	;# 
  2251  0F2F                     	;# 
  2252  0F30                     	;# 
  2253  0F31                     	;# 
  2254  0F32                     	;# 
  2255  0F33                     	;# 
  2256  0F34                     	;# 
  2257  0F35                     	;# 
  2258  0F36                     	;# 
  2259  0F37                     	;# 
  2260  0FE4                     	;# 
  2261  0FE5                     	;# 
  2262  0FE6                     	;# 
  2263  0FE7                     	;# 
  2264  0FE8                     	;# 
  2265  0FE9                     	;# 
  2266  0FEA                     	;# 
  2267  0FEB                     	;# 
  2268  0FED                     	;# 
  2269  0FEE                     	;# 
  2270  0FEF                     	;# 
  2271  0000                     	;# 
  2272  0001                     	;# 
  2273  0002                     	;# 
  2274  0003                     	;# 
  2275  0004                     	;# 
  2276  0005                     	;# 
  2277  0006                     	;# 
  2278  0007                     	;# 
  2279  0008                     	;# 
  2280  0009                     	;# 
  2281  000A                     	;# 
  2282  000B                     	;# 
  2283  000C                     	;# 
  2284  000D                     	;# 
  2285  000E                     	;# 
  2286  0010                     	;# 
  2287  0011                     	;# 
  2288  0012                     	;# 
  2289  0013                     	;# 
  2290  0014                     	;# 
  2291  0015                     	;# 
  2292  0015                     	;# 
  2293  0016                     	;# 
  2294  0016                     	;# 
  2295  0017                     	;# 
  2296  0018                     	;# 
  2297  0019                     	;# 
  2298  0019                     	;# 
  2299  001A                     	;# 
  2300  001B                     	;# 
  2301  001C                     	;# 
  2302  001D                     	;# 
  2303  001E                     	;# 
  2304  001F                     	;# 
  2305  008C                     	;# 
  2306  008D                     	;# 
  2307  008E                     	;# 
  2308  0090                     	;# 
  2309  0091                     	;# 
  2310  0092                     	;# 
  2311  0093                     	;# 
  2312  0094                     	;# 
  2313  0097                     	;# 
  2314  009B                     	;# 
  2315  009B                     	;# 
  2316  009C                     	;# 
  2317  009D                     	;# 
  2318  009E                     	;# 
  2319  009F                     	;# 
  2320  010C                     	;# 
  2321  010D                     	;# 
  2322  010E                     	;# 
  2323  0111                     	;# 
  2324  0112                     	;# 
  2325  0113                     	;# 
  2326  0114                     	;# 
  2327  0115                     	;# 
  2328  0116                     	;# 
  2329  0117                     	;# 
  2330  0118                     	;# 
  2331  0119                     	;# 
  2332  018C                     	;# 
  2333  018D                     	;# 
  2334  018E                     	;# 
  2335  0197                     	;# 
  2336  0199                     	;# 
  2337  0199                     	;# 
  2338  0199                     	;# 
  2339  019A                     	;# 
  2340  019A                     	;# 
  2341  019A                     	;# 
  2342  019B                     	;# 
  2343  019B                     	;# 
  2344  019B                     	;# 
  2345  019B                     	;# 
  2346  019B                     	;# 
  2347  019C                     	;# 
  2348  019C                     	;# 
  2349  019C                     	;# 
  2350  019D                     	;# 
  2351  019D                     	;# 
  2352  019D                     	;# 
  2353  019E                     	;# 
  2354  019E                     	;# 
  2355  019E                     	;# 
  2356  019F                     	;# 
  2357  019F                     	;# 
  2358  019F                     	;# 
  2359  019F                     	;# 
  2360  019F                     	;# 
  2361  020C                     	;# 
  2362  020D                     	;# 
  2363  020E                     	;# 
  2364  0211                     	;# 
  2365  0211                     	;# 
  2366  0212                     	;# 
  2367  0212                     	;# 
  2368  0213                     	;# 
  2369  0213                     	;# 
  2370  0214                     	;# 
  2371  0214                     	;# 
  2372  0215                     	;# 
  2373  0215                     	;# 
  2374  0215                     	;# 
  2375  0215                     	;# 
  2376  0216                     	;# 
  2377  0216                     	;# 
  2378  0217                     	;# 
  2379  0217                     	;# 
  2380  0219                     	;# 
  2381  021A                     	;# 
  2382  021B                     	;# 
  2383  021C                     	;# 
  2384  021D                     	;# 
  2385  021D                     	;# 
  2386  021E                     	;# 
  2387  021F                     	;# 
  2388  028C                     	;# 
  2389  028D                     	;# 
  2390  028E                     	;# 
  2391  0291                     	;# 
  2392  0291                     	;# 
  2393  0292                     	;# 
  2394  0293                     	;# 
  2395  0294                     	;# 
  2396  0295                     	;# 
  2397  0295                     	;# 
  2398  0296                     	;# 
  2399  0297                     	;# 
  2400  0298                     	;# 
  2401  029F                     	;# 
  2402  030C                     	;# 
  2403  030D                     	;# 
  2404  030E                     	;# 
  2405  0311                     	;# 
  2406  0311                     	;# 
  2407  0312                     	;# 
  2408  0313                     	;# 
  2409  0314                     	;# 
  2410  0315                     	;# 
  2411  0315                     	;# 
  2412  0316                     	;# 
  2413  0317                     	;# 
  2414  0318                     	;# 
  2415  038C                     	;# 
  2416  038D                     	;# 
  2417  038E                     	;# 
  2418  0391                     	;# 
  2419  0392                     	;# 
  2420  0393                     	;# 
  2421  0394                     	;# 
  2422  0395                     	;# 
  2423  0396                     	;# 
  2424  0397                     	;# 
  2425  0398                     	;# 
  2426  0399                     	;# 
  2427  039A                     	;# 
  2428  039C                     	;# 
  2429  039D                     	;# 
  2430  039E                     	;# 
  2431  039F                     	;# 
  2432  0411                     	;# 
  2433  0411                     	;# 
  2434  0412                     	;# 
  2435  0413                     	;# 
  2436  0414                     	;# 
  2437  0415                     	;# 
  2438  0416                     	;# 
  2439  0417                     	;# 
  2440  0418                     	;# 
  2441  0418                     	;# 
  2442  0419                     	;# 
  2443  041A                     	;# 
  2444  041B                     	;# 
  2445  041C                     	;# 
  2446  041D                     	;# 
  2447  041E                     	;# 
  2448  041F                     	;# 
  2449  0498                     	;# 
  2450  0498                     	;# 
  2451  0499                     	;# 
  2452  049A                     	;# 
  2453  049B                     	;# 
  2454  049B                     	;# 
  2455  049C                     	;# 
  2456  049D                     	;# 
  2457  049E                     	;# 
  2458  049F                     	;# 
  2459  0617                     	;# 
  2460  0618                     	;# 
  2461  0619                     	;# 
  2462  0619                     	;# 
  2463  061A                     	;# 
  2464  061B                     	;# 
  2465  061C                     	;# 
  2466  061C                     	;# 
  2467  061F                     	;# 
  2468  0691                     	;# 
  2469  0692                     	;# 
  2470  0693                     	;# 
  2471  0694                     	;# 
  2472  0695                     	;# 
  2473  0696                     	;# 
  2474  0697                     	;# 
  2475  0698                     	;# 
  2476  0699                     	;# 
  2477  0711                     	;# 
  2478  0712                     	;# 
  2479  0713                     	;# 
  2480  0714                     	;# 
  2481  0715                     	;# 
  2482  0716                     	;# 
  2483  0717                     	;# 
  2484  0718                     	;# 
  2485  0719                     	;# 
  2486  0891                     	;# 
  2487  0891                     	;# 
  2488  0891                     	;# 
  2489  0891                     	;# 
  2490  0891                     	;# 
  2491  0891                     	;# 
  2492  0892                     	;# 
  2493  0892                     	;# 
  2494  0892                     	;# 
  2495  0893                     	;# 
  2496  0893                     	;# 
  2497  0893                     	;# 
  2498  0893                     	;# 
  2499  0893                     	;# 
  2500  0893                     	;# 
  2501  0894                     	;# 
  2502  0894                     	;# 
  2503  0894                     	;# 
  2504  0895                     	;# 
  2505  0895                     	;# 
  2506  0895                     	;# 
  2507  0896                     	;# 
  2508  0896                     	;# 
  2509  0896                     	;# 
  2510  089B                     	;# 
  2511  0911                     	;# 
  2512  0912                     	;# 
  2513  0913                     	;# 
  2514  0914                     	;# 
  2515  0915                     	;# 
  2516  0916                     	;# 
  2517  0918                     	;# 
  2518  0919                     	;# 
  2519  091A                     	;# 
  2520  091B                     	;# 
  2521  091C                     	;# 
  2522  091D                     	;# 
  2523  091E                     	;# 
  2524  091F                     	;# 
  2525  0E0F                     	;# 
  2526  0E10                     	;# 
  2527  0E11                     	;# 
  2528  0E12                     	;# 
  2529  0E13                     	;# 
  2530  0E14                     	;# 
  2531  0E15                     	;# 
  2532  0E16                     	;# 
  2533  0E17                     	;# 
  2534  0E18                     	;# 
  2535  0E19                     	;# 
  2536  0E1A                     	;# 
  2537  0E1B                     	;# 
  2538  0E1C                     	;# 
  2539  0E1D                     	;# 
  2540  0E1E                     	;# 
  2541  0E1F                     	;# 
  2542  0E20                     	;# 
  2543  0E21                     	;# 
  2544  0E22                     	;# 
  2545  0E24                     	;# 
  2546  0E25                     	;# 
  2547  0E28                     	;# 
  2548  0E29                     	;# 
  2549  0E2A                     	;# 
  2550  0E2B                     	;# 
  2551  0E2C                     	;# 
  2552  0E2D                     	;# 
  2553  0E2E                     	;# 
  2554  0E2F                     	;# 
  2555  0E90                     	;# 
  2556  0E91                     	;# 
  2557  0E92                     	;# 
  2558  0E94                     	;# 
  2559  0E95                     	;# 
  2560  0E9C                     	;# 
  2561  0E9D                     	;# 
  2562  0E9E                     	;# 
  2563  0E9F                     	;# 
  2564  0EA0                     	;# 
  2565  0EA1                     	;# 
  2566  0EA2                     	;# 
  2567  0EA3                     	;# 
  2568  0EA4                     	;# 
  2569  0EA5                     	;# 
  2570  0EA6                     	;# 
  2571  0EA7                     	;# 
  2572  0F0F                     	;# 
  2573  0F10                     	;# 
  2574  0F11                     	;# 
  2575  0F12                     	;# 
  2576  0F13                     	;# 
  2577  0F14                     	;# 
  2578  0F15                     	;# 
  2579  0F16                     	;# 
  2580  0F17                     	;# 
  2581  0F18                     	;# 
  2582  0F19                     	;# 
  2583  0F1A                     	;# 
  2584  0F1B                     	;# 
  2585  0F1C                     	;# 
  2586  0F1D                     	;# 
  2587  0F1E                     	;# 
  2588  0F1F                     	;# 
  2589  0F20                     	;# 
  2590  0F21                     	;# 
  2591  0F22                     	;# 
  2592  0F23                     	;# 
  2593  0F24                     	;# 
  2594  0F25                     	;# 
  2595  0F26                     	;# 
  2596  0F27                     	;# 
  2597  0F28                     	;# 
  2598  0F29                     	;# 
  2599  0F2A                     	;# 
  2600  0F2B                     	;# 
  2601  0F2C                     	;# 
  2602  0F2D                     	;# 
  2603  0F2E                     	;# 
  2604  0F2F                     	;# 
  2605  0F30                     	;# 
  2606  0F31                     	;# 
  2607  0F32                     	;# 
  2608  0F33                     	;# 
  2609  0F34                     	;# 
  2610  0F35                     	;# 
  2611  0F36                     	;# 
  2612  0F37                     	;# 
  2613  0FE4                     	;# 
  2614  0FE5                     	;# 
  2615  0FE6                     	;# 
  2616  0FE7                     	;# 
  2617  0FE8                     	;# 
  2618  0FE9                     	;# 
  2619  0FEA                     	;# 
  2620  0FEB                     	;# 
  2621  0FED                     	;# 
  2622  0FEE                     	;# 
  2623  0FEF                     	;# 
  2624  0000                     	;# 
  2625  0001                     	;# 
  2626  0002                     	;# 
  2627  0003                     	;# 
  2628  0004                     	;# 
  2629  0005                     	;# 
  2630  0006                     	;# 
  2631  0007                     	;# 
  2632  0008                     	;# 
  2633  0009                     	;# 
  2634  000A                     	;# 
  2635  000B                     	;# 
  2636  000C                     	;# 
  2637  000D                     	;# 
  2638  000E                     	;# 
  2639  0010                     	;# 
  2640  0011                     	;# 
  2641  0012                     	;# 
  2642  0013                     	;# 
  2643  0014                     	;# 
  2644  0015                     	;# 
  2645  0015                     	;# 
  2646  0016                     	;# 
  2647  0016                     	;# 
  2648  0017                     	;# 
  2649  0018                     	;# 
  2650  0019                     	;# 
  2651  0019                     	;# 
  2652  001A                     	;# 
  2653  001B                     	;# 
  2654  001C                     	;# 
  2655  001D                     	;# 
  2656  001E                     	;# 
  2657  001F                     	;# 
  2658  008C                     	;# 
  2659  008D                     	;# 
  2660  008E                     	;# 
  2661  0090                     	;# 
  2662  0091                     	;# 
  2663  0092                     	;# 
  2664  0093                     	;# 
  2665  0094                     	;# 
  2666  0097                     	;# 
  2667  009B                     	;# 
  2668  009B                     	;# 
  2669  009C                     	;# 
  2670  009D                     	;# 
  2671  009E                     	;# 
  2672  009F                     	;# 
  2673  010C                     	;# 
  2674  010D                     	;# 
  2675  010E                     	;# 
  2676  0111                     	;# 
  2677  0112                     	;# 
  2678  0113                     	;# 
  2679  0114                     	;# 
  2680  0115                     	;# 
  2681  0116                     	;# 
  2682  0117                     	;# 
  2683  0118                     	;# 
  2684  0119                     	;# 
  2685  018C                     	;# 
  2686  018D                     	;# 
  2687  018E                     	;# 
  2688  0197                     	;# 
  2689  0199                     	;# 
  2690  0199                     	;# 
  2691  0199                     	;# 
  2692  019A                     	;# 
  2693  019A                     	;# 
  2694  019A                     	;# 
  2695  019B                     	;# 
  2696  019B                     	;# 
  2697  019B                     	;# 
  2698  019B                     	;# 
  2699  019B                     	;# 
  2700  019C                     	;# 
  2701  019C                     	;# 
  2702  019C                     	;# 
  2703  019D                     	;# 
  2704  019D                     	;# 
  2705  019D                     	;# 
  2706  019E                     	;# 
  2707  019E                     	;# 
  2708  019E                     	;# 
  2709  019F                     	;# 
  2710  019F                     	;# 
  2711  019F                     	;# 
  2712  019F                     	;# 
  2713  019F                     	;# 
  2714  020C                     	;# 
  2715  020D                     	;# 
  2716  020E                     	;# 
  2717  0211                     	;# 
  2718  0211                     	;# 
  2719  0212                     	;# 
  2720  0212                     	;# 
  2721  0213                     	;# 
  2722  0213                     	;# 
  2723  0214                     	;# 
  2724  0214                     	;# 
  2725  0215                     	;# 
  2726  0215                     	;# 
  2727  0215                     	;# 
  2728  0215                     	;# 
  2729  0216                     	;# 
  2730  0216                     	;# 
  2731  0217                     	;# 
  2732  0217                     	;# 
  2733  0219                     	;# 
  2734  021A                     	;# 
  2735  021B                     	;# 
  2736  021C                     	;# 
  2737  021D                     	;# 
  2738  021D                     	;# 
  2739  021E                     	;# 
  2740  021F                     	;# 
  2741  028C                     	;# 
  2742  028D                     	;# 
  2743  028E                     	;# 
  2744  0291                     	;# 
  2745  0291                     	;# 
  2746  0292                     	;# 
  2747  0293                     	;# 
  2748  0294                     	;# 
  2749  0295                     	;# 
  2750  0295                     	;# 
  2751  0296                     	;# 
  2752  0297                     	;# 
  2753  0298                     	;# 
  2754  029F                     	;# 
  2755  030C                     	;# 
  2756  030D                     	;# 
  2757  030E                     	;# 
  2758  0311                     	;# 
  2759  0311                     	;# 
  2760  0312                     	;# 
  2761  0313                     	;# 
  2762  0314                     	;# 
  2763  0315                     	;# 
  2764  0315                     	;# 
  2765  0316                     	;# 
  2766  0317                     	;# 
  2767  0318                     	;# 
  2768  038C                     	;# 
  2769  038D                     	;# 
  2770  038E                     	;# 
  2771  0391                     	;# 
  2772  0392                     	;# 
  2773  0393                     	;# 
  2774  0394                     	;# 
  2775  0395                     	;# 
  2776  0396                     	;# 
  2777  0397                     	;# 
  2778  0398                     	;# 
  2779  0399                     	;# 
  2780  039A                     	;# 
  2781  039C                     	;# 
  2782  039D                     	;# 
  2783  039E                     	;# 
  2784  039F                     	;# 
  2785  0411                     	;# 
  2786  0411                     	;# 
  2787  0412                     	;# 
  2788  0413                     	;# 
  2789  0414                     	;# 
  2790  0415                     	;# 
  2791  0416                     	;# 
  2792  0417                     	;# 
  2793  0418                     	;# 
  2794  0418                     	;# 
  2795  0419                     	;# 
  2796  041A                     	;# 
  2797  041B                     	;# 
  2798  041C                     	;# 
  2799  041D                     	;# 
  2800  041E                     	;# 
  2801  041F                     	;# 
  2802  0498                     	;# 
  2803  0498                     	;# 
  2804  0499                     	;# 
  2805  049A                     	;# 
  2806  049B                     	;# 
  2807  049B                     	;# 
  2808  049C                     	;# 
  2809  049D                     	;# 
  2810  049E                     	;# 
  2811  049F                     	;# 
  2812  0617                     	;# 
  2813  0618                     	;# 
  2814  0619                     	;# 
  2815  0619                     	;# 
  2816  061A                     	;# 
  2817  061B                     	;# 
  2818  061C                     	;# 
  2819  061C                     	;# 
  2820  061F                     	;# 
  2821  0691                     	;# 
  2822  0692                     	;# 
  2823  0693                     	;# 
  2824  0694                     	;# 
  2825  0695                     	;# 
  2826  0696                     	;# 
  2827  0697                     	;# 
  2828  0698                     	;# 
  2829  0699                     	;# 
  2830  0711                     	;# 
  2831  0712                     	;# 
  2832  0713                     	;# 
  2833  0714                     	;# 
  2834  0715                     	;# 
  2835  0716                     	;# 
  2836  0717                     	;# 
  2837  0718                     	;# 
  2838  0719                     	;# 
  2839  0891                     	;# 
  2840  0891                     	;# 
  2841  0891                     	;# 
  2842  0891                     	;# 
  2843  0891                     	;# 
  2844  0891                     	;# 
  2845  0892                     	;# 
  2846  0892                     	;# 
  2847  0892                     	;# 
  2848  0893                     	;# 
  2849  0893                     	;# 
  2850  0893                     	;# 
  2851  0893                     	;# 
  2852  0893                     	;# 
  2853  0893                     	;# 
  2854  0894                     	;# 
  2855  0894                     	;# 
  2856  0894                     	;# 
  2857  0895                     	;# 
  2858  0895                     	;# 
  2859  0895                     	;# 
  2860  0896                     	;# 
  2861  0896                     	;# 
  2862  0896                     	;# 
  2863  089B                     	;# 
  2864  0911                     	;# 
  2865  0912                     	;# 
  2866  0913                     	;# 
  2867  0914                     	;# 
  2868  0915                     	;# 
  2869  0916                     	;# 
  2870  0918                     	;# 
  2871  0919                     	;# 
  2872  091A                     	;# 
  2873  091B                     	;# 
  2874  091C                     	;# 
  2875  091D                     	;# 
  2876  091E                     	;# 
  2877  091F                     	;# 
  2878  0E0F                     	;# 
  2879  0E10                     	;# 
  2880  0E11                     	;# 
  2881  0E12                     	;# 
  2882  0E13                     	;# 
  2883  0E14                     	;# 
  2884  0E15                     	;# 
  2885  0E16                     	;# 
  2886  0E17                     	;# 
  2887  0E18                     	;# 
  2888  0E19                     	;# 
  2889  0E1A                     	;# 
  2890  0E1B                     	;# 
  2891  0E1C                     	;# 
  2892  0E1D                     	;# 
  2893  0E1E                     	;# 
  2894  0E1F                     	;# 
  2895  0E20                     	;# 
  2896  0E21                     	;# 
  2897  0E22                     	;# 
  2898  0E24                     	;# 
  2899  0E25                     	;# 
  2900  0E28                     	;# 
  2901  0E29                     	;# 
  2902  0E2A                     	;# 
  2903  0E2B                     	;# 
  2904  0E2C                     	;# 
  2905  0E2D                     	;# 
  2906  0E2E                     	;# 
  2907  0E2F                     	;# 
  2908  0E90                     	;# 
  2909  0E91                     	;# 
  2910  0E92                     	;# 
  2911  0E94                     	;# 
  2912  0E95                     	;# 
  2913  0E9C                     	;# 
  2914  0E9D                     	;# 
  2915  0E9E                     	;# 
  2916  0E9F                     	;# 
  2917  0EA0                     	;# 
  2918  0EA1                     	;# 
  2919  0EA2                     	;# 
  2920  0EA3                     	;# 
  2921  0EA4                     	;# 
  2922  0EA5                     	;# 
  2923  0EA6                     	;# 
  2924  0EA7                     	;# 
  2925  0F0F                     	;# 
  2926  0F10                     	;# 
  2927  0F11                     	;# 
  2928  0F12                     	;# 
  2929  0F13                     	;# 
  2930  0F14                     	;# 
  2931  0F15                     	;# 
  2932  0F16                     	;# 
  2933  0F17                     	;# 
  2934  0F18                     	;# 
  2935  0F19                     	;# 
  2936  0F1A                     	;# 
  2937  0F1B                     	;# 
  2938  0F1C                     	;# 
  2939  0F1D                     	;# 
  2940  0F1E                     	;# 
  2941  0F1F                     	;# 
  2942  0F20                     	;# 
  2943  0F21                     	;# 
  2944  0F22                     	;# 
  2945  0F23                     	;# 
  2946  0F24                     	;# 
  2947  0F25                     	;# 
  2948  0F26                     	;# 
  2949  0F27                     	;# 
  2950  0F28                     	;# 
  2951  0F29                     	;# 
  2952  0F2A                     	;# 
  2953  0F2B                     	;# 
  2954  0F2C                     	;# 
  2955  0F2D                     	;# 
  2956  0F2E                     	;# 
  2957  0F2F                     	;# 
  2958  0F30                     	;# 
  2959  0F31                     	;# 
  2960  0F32                     	;# 
  2961  0F33                     	;# 
  2962  0F34                     	;# 
  2963  0F35                     	;# 
  2964  0F36                     	;# 
  2965  0F37                     	;# 
  2966  0FE4                     	;# 
  2967  0FE5                     	;# 
  2968  0FE6                     	;# 
  2969  0FE7                     	;# 
  2970  0FE8                     	;# 
  2971  0FE9                     	;# 
  2972  0FEA                     	;# 
  2973  0FEB                     	;# 
  2974  0FED                     	;# 
  2975  0FEE                     	;# 
  2976  0FEF                     	;# 
  2977  0000                     	;# 
  2978  0001                     	;# 
  2979  0002                     	;# 
  2980  0003                     	;# 
  2981  0004                     	;# 
  2982  0005                     	;# 
  2983  0006                     	;# 
  2984  0007                     	;# 
  2985  0008                     	;# 
  2986  0009                     	;# 
  2987  000A                     	;# 
  2988  000B                     	;# 
  2989  000C                     	;# 
  2990  000D                     	;# 
  2991  000E                     	;# 
  2992  0010                     	;# 
  2993  0011                     	;# 
  2994  0012                     	;# 
  2995  0013                     	;# 
  2996  0014                     	;# 
  2997  0015                     	;# 
  2998  0015                     	;# 
  2999  0016                     	;# 
  3000  0016                     	;# 
  3001  0017                     	;# 
  3002  0018                     	;# 
  3003  0019                     	;# 
  3004  0019                     	;# 
  3005  001A                     	;# 
  3006  001B                     	;# 
  3007  001C                     	;# 
  3008  001D                     	;# 
  3009  001E                     	;# 
  3010  001F                     	;# 
  3011  008C                     	;# 
  3012  008D                     	;# 
  3013  008E                     	;# 
  3014  0090                     	;# 
  3015  0091                     	;# 
  3016  0092                     	;# 
  3017  0093                     	;# 
  3018  0094                     	;# 
  3019  0097                     	;# 
  3020  009B                     	;# 
  3021  009B                     	;# 
  3022  009C                     	;# 
  3023  009D                     	;# 
  3024  009E                     	;# 
  3025  009F                     	;# 
  3026  010C                     	;# 
  3027  010D                     	;# 
  3028  010E                     	;# 
  3029  0111                     	;# 
  3030  0112                     	;# 
  3031  0113                     	;# 
  3032  0114                     	;# 
  3033  0115                     	;# 
  3034  0116                     	;# 
  3035  0117                     	;# 
  3036  0118                     	;# 
  3037  0119                     	;# 
  3038  018C                     	;# 
  3039  018D                     	;# 
  3040  018E                     	;# 
  3041  0197                     	;# 
  3042  0199                     	;# 
  3043  0199                     	;# 
  3044  0199                     	;# 
  3045  019A                     	;# 
  3046  019A                     	;# 
  3047  019A                     	;# 
  3048  019B                     	;# 
  3049  019B                     	;# 
  3050  019B                     	;# 
  3051  019B                     	;# 
  3052  019B                     	;# 
  3053  019C                     	;# 
  3054  019C                     	;# 
  3055  019C                     	;# 
  3056  019D                     	;# 
  3057  019D                     	;# 
  3058  019D                     	;# 
  3059  019E                     	;# 
  3060  019E                     	;# 
  3061  019E                     	;# 
  3062  019F                     	;# 
  3063  019F                     	;# 
  3064  019F                     	;# 
  3065  019F                     	;# 
  3066  019F                     	;# 
  3067  020C                     	;# 
  3068  020D                     	;# 
  3069  020E                     	;# 
  3070  0211                     	;# 
  3071  0211                     	;# 
  3072  0212                     	;# 
  3073  0212                     	;# 
  3074  0213                     	;# 
  3075  0213                     	;# 
  3076  0214                     	;# 
  3077  0214                     	;# 
  3078  0215                     	;# 
  3079  0215                     	;# 
  3080  0215                     	;# 
  3081  0215                     	;# 
  3082  0216                     	;# 
  3083  0216                     	;# 
  3084  0217                     	;# 
  3085  0217                     	;# 
  3086  0219                     	;# 
  3087  021A                     	;# 
  3088  021B                     	;# 
  3089  021C                     	;# 
  3090  021D                     	;# 
  3091  021D                     	;# 
  3092  021E                     	;# 
  3093  021F                     	;# 
  3094  028C                     	;# 
  3095  028D                     	;# 
  3096  028E                     	;# 
  3097  0291                     	;# 
  3098  0291                     	;# 
  3099  0292                     	;# 
  3100  0293                     	;# 
  3101  0294                     	;# 
  3102  0295                     	;# 
  3103  0295                     	;# 
  3104  0296                     	;# 
  3105  0297                     	;# 
  3106  0298                     	;# 
  3107  029F                     	;# 
  3108  030C                     	;# 
  3109  030D                     	;# 
  3110  030E                     	;# 
  3111  0311                     	;# 
  3112  0311                     	;# 
  3113  0312                     	;# 
  3114  0313                     	;# 
  3115  0314                     	;# 
  3116  0315                     	;# 
  3117  0315                     	;# 
  3118  0316                     	;# 
  3119  0317                     	;# 
  3120  0318                     	;# 
  3121  038C                     	;# 
  3122  038D                     	;# 
  3123  038E                     	;# 
  3124  0391                     	;# 
  3125  0392                     	;# 
  3126  0393                     	;# 
  3127  0394                     	;# 
  3128  0395                     	;# 
  3129  0396                     	;# 
  3130  0397                     	;# 
  3131  0398                     	;# 
  3132  0399                     	;# 
  3133  039A                     	;# 
  3134  039C                     	;# 
  3135  039D                     	;# 
  3136  039E                     	;# 
  3137  039F                     	;# 
  3138  0411                     	;# 
  3139  0411                     	;# 
  3140  0412                     	;# 
  3141  0413                     	;# 
  3142  0414                     	;# 
  3143  0415                     	;# 
  3144  0416                     	;# 
  3145  0417                     	;# 
  3146  0418                     	;# 
  3147  0418                     	;# 
  3148  0419                     	;# 
  3149  041A                     	;# 
  3150  041B                     	;# 
  3151  041C                     	;# 
  3152  041D                     	;# 
  3153  041E                     	;# 
  3154  041F                     	;# 
  3155  0498                     	;# 
  3156  0498                     	;# 
  3157  0499                     	;# 
  3158  049A                     	;# 
  3159  049B                     	;# 
  3160  049B                     	;# 
  3161  049C                     	;# 
  3162  049D                     	;# 
  3163  049E                     	;# 
  3164  049F                     	;# 
  3165  0617                     	;# 
  3166  0618                     	;# 
  3167  0619                     	;# 
  3168  0619                     	;# 
  3169  061A                     	;# 
  3170  061B                     	;# 
  3171  061C                     	;# 
  3172  061C                     	;# 
  3173  061F                     	;# 
  3174  0691                     	;# 
  3175  0692                     	;# 
  3176  0693                     	;# 
  3177  0694                     	;# 
  3178  0695                     	;# 
  3179  0696                     	;# 
  3180  0697                     	;# 
  3181  0698                     	;# 
  3182  0699                     	;# 
  3183  0711                     	;# 
  3184  0712                     	;# 
  3185  0713                     	;# 
  3186  0714                     	;# 
  3187  0715                     	;# 
  3188  0716                     	;# 
  3189  0717                     	;# 
  3190  0718                     	;# 
  3191  0719                     	;# 
  3192  0891                     	;# 
  3193  0891                     	;# 
  3194  0891                     	;# 
  3195  0891                     	;# 
  3196  0891                     	;# 
  3197  0891                     	;# 
  3198  0892                     	;# 
  3199  0892                     	;# 
  3200  0892                     	;# 
  3201  0893                     	;# 
  3202  0893                     	;# 
  3203  0893                     	;# 
  3204  0893                     	;# 
  3205  0893                     	;# 
  3206  0893                     	;# 
  3207  0894                     	;# 
  3208  0894                     	;# 
  3209  0894                     	;# 
  3210  0895                     	;# 
  3211  0895                     	;# 
  3212  0895                     	;# 
  3213  0896                     	;# 
  3214  0896                     	;# 
  3215  0896                     	;# 
  3216  089B                     	;# 
  3217  0911                     	;# 
  3218  0912                     	;# 
  3219  0913                     	;# 
  3220  0914                     	;# 
  3221  0915                     	;# 
  3222  0916                     	;# 
  3223  0918                     	;# 
  3224  0919                     	;# 
  3225  091A                     	;# 
  3226  091B                     	;# 
  3227  091C                     	;# 
  3228  091D                     	;# 
  3229  091E                     	;# 
  3230  091F                     	;# 
  3231  0E0F                     	;# 
  3232  0E10                     	;# 
  3233  0E11                     	;# 
  3234  0E12                     	;# 
  3235  0E13                     	;# 
  3236  0E14                     	;# 
  3237  0E15                     	;# 
  3238  0E16                     	;# 
  3239  0E17                     	;# 
  3240  0E18                     	;# 
  3241  0E19                     	;# 
  3242  0E1A                     	;# 
  3243  0E1B                     	;# 
  3244  0E1C                     	;# 
  3245  0E1D                     	;# 
  3246  0E1E                     	;# 
  3247  0E1F                     	;# 
  3248  0E20                     	;# 
  3249  0E21                     	;# 
  3250  0E22                     	;# 
  3251  0E24                     	;# 
  3252  0E25                     	;# 
  3253  0E28                     	;# 
  3254  0E29                     	;# 
  3255  0E2A                     	;# 
  3256  0E2B                     	;# 
  3257  0E2C                     	;# 
  3258  0E2D                     	;# 
  3259  0E2E                     	;# 
  3260  0E2F                     	;# 
  3261  0E90                     	;# 
  3262  0E91                     	;# 
  3263  0E92                     	;# 
  3264  0E94                     	;# 
  3265  0E95                     	;# 
  3266  0E9C                     	;# 
  3267  0E9D                     	;# 
  3268  0E9E                     	;# 
  3269  0E9F                     	;# 
  3270  0EA0                     	;# 
  3271  0EA1                     	;# 
  3272  0EA2                     	;# 
  3273  0EA3                     	;# 
  3274  0EA4                     	;# 
  3275  0EA5                     	;# 
  3276  0EA6                     	;# 
  3277  0EA7                     	;# 
  3278  0F0F                     	;# 
  3279  0F10                     	;# 
  3280  0F11                     	;# 
  3281  0F12                     	;# 
  3282  0F13                     	;# 
  3283  0F14                     	;# 
  3284  0F15                     	;# 
  3285  0F16                     	;# 
  3286  0F17                     	;# 
  3287  0F18                     	;# 
  3288  0F19                     	;# 
  3289  0F1A                     	;# 
  3290  0F1B                     	;# 
  3291  0F1C                     	;# 
  3292  0F1D                     	;# 
  3293  0F1E                     	;# 
  3294  0F1F                     	;# 
  3295  0F20                     	;# 
  3296  0F21                     	;# 
  3297  0F22                     	;# 
  3298  0F23                     	;# 
  3299  0F24                     	;# 
  3300  0F25                     	;# 
  3301  0F26                     	;# 
  3302  0F27                     	;# 
  3303  0F28                     	;# 
  3304  0F29                     	;# 
  3305  0F2A                     	;# 
  3306  0F2B                     	;# 
  3307  0F2C                     	;# 
  3308  0F2D                     	;# 
  3309  0F2E                     	;# 
  3310  0F2F                     	;# 
  3311  0F30                     	;# 
  3312  0F31                     	;# 
  3313  0F32                     	;# 
  3314  0F33                     	;# 
  3315  0F34                     	;# 
  3316  0F35                     	;# 
  3317  0F36                     	;# 
  3318  0F37                     	;# 
  3319  0FE4                     	;# 
  3320  0FE5                     	;# 
  3321  0FE6                     	;# 
  3322  0FE7                     	;# 
  3323  0FE8                     	;# 
  3324  0FE9                     	;# 
  3325  0FEA                     	;# 
  3326  0FEB                     	;# 
  3327  0FED                     	;# 
  3328  0FEE                     	;# 
  3329  0FEF                     	;# 
  3330  0000                     	;# 
  3331  0001                     	;# 
  3332  0002                     	;# 
  3333  0003                     	;# 
  3334  0004                     	;# 
  3335  0005                     	;# 
  3336  0006                     	;# 
  3337  0007                     	;# 
  3338  0008                     	;# 
  3339  0009                     	;# 
  3340  000A                     	;# 
  3341  000B                     	;# 
  3342  000C                     	;# 
  3343  000D                     	;# 
  3344  000E                     	;# 
  3345  0010                     	;# 
  3346  0011                     	;# 
  3347  0012                     	;# 
  3348  0013                     	;# 
  3349  0014                     	;# 
  3350  0015                     	;# 
  3351  0015                     	;# 
  3352  0016                     	;# 
  3353  0016                     	;# 
  3354  0017                     	;# 
  3355  0018                     	;# 
  3356  0019                     	;# 
  3357  0019                     	;# 
  3358  001A                     	;# 
  3359  001B                     	;# 
  3360  001C                     	;# 
  3361  001D                     	;# 
  3362  001E                     	;# 
  3363  001F                     	;# 
  3364  008C                     	;# 
  3365  008D                     	;# 
  3366  008E                     	;# 
  3367  0090                     	;# 
  3368  0091                     	;# 
  3369  0092                     	;# 
  3370  0093                     	;# 
  3371  0094                     	;# 
  3372  0097                     	;# 
  3373  009B                     	;# 
  3374  009B                     	;# 
  3375  009C                     	;# 
  3376  009D                     	;# 
  3377  009E                     	;# 
  3378  009F                     	;# 
  3379  010C                     	;# 
  3380  010D                     	;# 
  3381  010E                     	;# 
  3382  0111                     	;# 
  3383  0112                     	;# 
  3384  0113                     	;# 
  3385  0114                     	;# 
  3386  0115                     	;# 
  3387  0116                     	;# 
  3388  0117                     	;# 
  3389  0118                     	;# 
  3390  0119                     	;# 
  3391  018C                     	;# 
  3392  018D                     	;# 
  3393  018E                     	;# 
  3394  0197                     	;# 
  3395  0199                     	;# 
  3396  0199                     	;# 
  3397  0199                     	;# 
  3398  019A                     	;# 
  3399  019A                     	;# 
  3400  019A                     	;# 
  3401  019B                     	;# 
  3402  019B                     	;# 
  3403  019B                     	;# 
  3404  019B                     	;# 
  3405  019B                     	;# 
  3406  019C                     	;# 
  3407  019C                     	;# 
  3408  019C                     	;# 
  3409  019D                     	;# 
  3410  019D                     	;# 
  3411  019D                     	;# 
  3412  019E                     	;# 
  3413  019E                     	;# 
  3414  019E                     	;# 
  3415  019F                     	;# 
  3416  019F                     	;# 
  3417  019F                     	;# 
  3418  019F                     	;# 
  3419  019F                     	;# 
  3420  020C                     	;# 
  3421  020D                     	;# 
  3422  020E                     	;# 
  3423  0211                     	;# 
  3424  0211                     	;# 
  3425  0212                     	;# 
  3426  0212                     	;# 
  3427  0213                     	;# 
  3428  0213                     	;# 
  3429  0214                     	;# 
  3430  0214                     	;# 
  3431  0215                     	;# 
  3432  0215                     	;# 
  3433  0215                     	;# 
  3434  0215                     	;# 
  3435  0216                     	;# 
  3436  0216                     	;# 
  3437  0217                     	;# 
  3438  0217                     	;# 
  3439  0219                     	;# 
  3440  021A                     	;# 
  3441  021B                     	;# 
  3442  021C                     	;# 
  3443  021D                     	;# 
  3444  021D                     	;# 
  3445  021E                     	;# 
  3446  021F                     	;# 
  3447  028C                     	;# 
  3448  028D                     	;# 
  3449  028E                     	;# 
  3450  0291                     	;# 
  3451  0291                     	;# 
  3452  0292                     	;# 
  3453  0293                     	;# 
  3454  0294                     	;# 
  3455  0295                     	;# 
  3456  0295                     	;# 
  3457  0296                     	;# 
  3458  0297                     	;# 
  3459  0298                     	;# 
  3460  029F                     	;# 
  3461  030C                     	;# 
  3462  030D                     	;# 
  3463  030E                     	;# 
  3464  0311                     	;# 
  3465  0311                     	;# 
  3466  0312                     	;# 
  3467  0313                     	;# 
  3468  0314                     	;# 
  3469  0315                     	;# 
  3470  0315                     	;# 
  3471  0316                     	;# 
  3472  0317                     	;# 
  3473  0318                     	;# 
  3474  038C                     	;# 
  3475  038D                     	;# 
  3476  038E                     	;# 
  3477  0391                     	;# 
  3478  0392                     	;# 
  3479  0393                     	;# 
  3480  0394                     	;# 
  3481  0395                     	;# 
  3482  0396                     	;# 
  3483  0397                     	;# 
  3484  0398                     	;# 
  3485  0399                     	;# 
  3486  039A                     	;# 
  3487  039C                     	;# 
  3488  039D                     	;# 
  3489  039E                     	;# 
  3490  039F                     	;# 
  3491  0411                     	;# 
  3492  0411                     	;# 
  3493  0412                     	;# 
  3494  0413                     	;# 
  3495  0414                     	;# 
  3496  0415                     	;# 
  3497  0416                     	;# 
  3498  0417                     	;# 
  3499  0418                     	;# 
  3500  0418                     	;# 
  3501  0419                     	;# 
  3502  041A                     	;# 
  3503  041B                     	;# 
  3504  041C                     	;# 
  3505  041D                     	;# 
  3506  041E                     	;# 
  3507  041F                     	;# 
  3508  0498                     	;# 
  3509  0498                     	;# 
  3510  0499                     	;# 
  3511  049A                     	;# 
  3512  049B                     	;# 
  3513  049B                     	;# 
  3514  049C                     	;# 
  3515  049D                     	;# 
  3516  049E                     	;# 
  3517  049F                     	;# 
  3518  0617                     	;# 
  3519  0618                     	;# 
  3520  0619                     	;# 
  3521  0619                     	;# 
  3522  061A                     	;# 
  3523  061B                     	;# 
  3524  061C                     	;# 
  3525  061C                     	;# 
  3526  061F                     	;# 
  3527  0691                     	;# 
  3528  0692                     	;# 
  3529  0693                     	;# 
  3530  0694                     	;# 
  3531  0695                     	;# 
  3532  0696                     	;# 
  3533  0697                     	;# 
  3534  0698                     	;# 
  3535  0699                     	;# 
  3536  0711                     	;# 
  3537  0712                     	;# 
  3538  0713                     	;# 
  3539  0714                     	;# 
  3540  0715                     	;# 
  3541  0716                     	;# 
  3542  0717                     	;# 
  3543  0718                     	;# 
  3544  0719                     	;# 
  3545  0891                     	;# 
  3546  0891                     	;# 
  3547  0891                     	;# 
  3548  0891                     	;# 
  3549  0891                     	;# 
  3550  0891                     	;# 
  3551  0892                     	;# 
  3552  0892                     	;# 
  3553  0892                     	;# 
  3554  0893                     	;# 
  3555  0893                     	;# 
  3556  0893                     	;# 
  3557  0893                     	;# 
  3558  0893                     	;# 
  3559  0893                     	;# 
  3560  0894                     	;# 
  3561  0894                     	;# 
  3562  0894                     	;# 
  3563  0895                     	;# 
  3564  0895                     	;# 
  3565  0895                     	;# 
  3566  0896                     	;# 
  3567  0896                     	;# 
  3568  0896                     	;# 
  3569  089B                     	;# 
  3570  0911                     	;# 
  3571  0912                     	;# 
  3572  0913                     	;# 
  3573  0914                     	;# 
  3574  0915                     	;# 
  3575  0916                     	;# 
  3576  0918                     	;# 
  3577  0919                     	;# 
  3578  091A                     	;# 
  3579  091B                     	;# 
  3580  091C                     	;# 
  3581  091D                     	;# 
  3582  091E                     	;# 
  3583  091F                     	;# 
  3584  0E0F                     	;# 
  3585  0E10                     	;# 
  3586  0E11                     	;# 
  3587  0E12                     	;# 
  3588  0E13                     	;# 
  3589  0E14                     	;# 
  3590  0E15                     	;# 
  3591  0E16                     	;# 
  3592  0E17                     	;# 
  3593  0E18                     	;# 
  3594  0E19                     	;# 
  3595  0E1A                     	;# 
  3596  0E1B                     	;# 
  3597  0E1C                     	;# 
  3598  0E1D                     	;# 
  3599  0E1E                     	;# 
  3600  0E1F                     	;# 
  3601  0E20                     	;# 
  3602  0E21                     	;# 
  3603  0E22                     	;# 
  3604  0E24                     	;# 
  3605  0E25                     	;# 
  3606  0E28                     	;# 
  3607  0E29                     	;# 
  3608  0E2A                     	;# 
  3609  0E2B                     	;# 
  3610  0E2C                     	;# 
  3611  0E2D                     	;# 
  3612  0E2E                     	;# 
  3613  0E2F                     	;# 
  3614  0E90                     	;# 
  3615  0E91                     	;# 
  3616  0E92                     	;# 
  3617  0E94                     	;# 
  3618  0E95                     	;# 
  3619  0E9C                     	;# 
  3620  0E9D                     	;# 
  3621  0E9E                     	;# 
  3622  0E9F                     	;# 
  3623  0EA0                     	;# 
  3624  0EA1                     	;# 
  3625  0EA2                     	;# 
  3626  0EA3                     	;# 
  3627  0EA4                     	;# 
  3628  0EA5                     	;# 
  3629  0EA6                     	;# 
  3630  0EA7                     	;# 
  3631  0F0F                     	;# 
  3632  0F10                     	;# 
  3633  0F11                     	;# 
  3634  0F12                     	;# 
  3635  0F13                     	;# 
  3636  0F14                     	;# 
  3637  0F15                     	;# 
  3638  0F16                     	;# 
  3639  0F17                     	;# 
  3640  0F18                     	;# 
  3641  0F19                     	;# 
  3642  0F1A                     	;# 
  3643  0F1B                     	;# 
  3644  0F1C                     	;# 
  3645  0F1D                     	;# 
  3646  0F1E                     	;# 
  3647  0F1F                     	;# 
  3648  0F20                     	;# 
  3649  0F21                     	;# 
  3650  0F22                     	;# 
  3651  0F23                     	;# 
  3652  0F24                     	;# 
  3653  0F25                     	;# 
  3654  0F26                     	;# 
  3655  0F27                     	;# 
  3656  0F28                     	;# 
  3657  0F29                     	;# 
  3658  0F2A                     	;# 
  3659  0F2B                     	;# 
  3660  0F2C                     	;# 
  3661  0F2D                     	;# 
  3662  0F2E                     	;# 
  3663  0F2F                     	;# 
  3664  0F30                     	;# 
  3665  0F31                     	;# 
  3666  0F32                     	;# 
  3667  0F33                     	;# 
  3668  0F34                     	;# 
  3669  0F35                     	;# 
  3670  0F36                     	;# 
  3671  0F37                     	;# 
  3672  0FE4                     	;# 
  3673  0FE5                     	;# 
  3674  0FE6                     	;# 
  3675  0FE7                     	;# 
  3676  0FE8                     	;# 
  3677  0FE9                     	;# 
  3678  0FEA                     	;# 
  3679  0FEB                     	;# 
  3680  0FED                     	;# 
  3681  0FEE                     	;# 
  3682  0FEF                     	;# 
  3683                           
  3684                           	psect	idataBANK0
  3685  09DD                     __pidataBANK0:	
  3686                           
  3687                           ;initializer for _start
  3688  09DD  3401               	retlw	1
  3689                           
  3690                           	psect	idataBANK2
  3691  0A9B                     __pidataBANK2:	
  3692                           
  3693                           ;initializer for _names
  3694  0A9B  343D               	retlw	low (STR_1| (0+32768))
  3695  0A9C  3490               	retlw	high (STR_1| (0+32768))
  3696  0A9D  3430               	retlw	low (STR_2| (0+32768))
  3697  0A9E  3490               	retlw	high (STR_2| (0+32768))
  3698  0A9F  3420               	retlw	low (STR_3| (0+32768))
  3699  0AA0  3490               	retlw	high (STR_3| (0+32768))
  3700  0AA1  3449               	retlw	low (STR_4| (0+32768))
  3701  0AA2  3490               	retlw	high (STR_4| (0+32768))
  3702                           
  3703                           	psect	stringtext1
  3704  1000                     __pstringtext1:	
  3705  1000                     _fsmStateTable:	
  3706  1000  3442               	retlw	low _do_I2C_IDLE
  3707  1001  340A               	retlw	high _do_I2C_IDLE
  3708  1002  3483               	retlw	low _do_I2C_SEND_ADR_READ
  3709  1003  340A               	retlw	high _do_I2C_SEND_ADR_READ
  3710  1004  3466               	retlw	low _do_I2C_SEND_ADR_WRITE
  3711  1005  340A               	retlw	high _do_I2C_SEND_ADR_WRITE
  3712  1006  3462               	retlw	low _do_I2C_TX
  3713  1007  340F               	retlw	high _do_I2C_TX
  3714  1008  34D2               	retlw	low _do_I2C_RX
  3715  1009  340E               	retlw	high _do_I2C_RX
  3716  100A  3447               	retlw	low _do_I2C_RCEN
  3717  100B  340A               	retlw	high _do_I2C_RCEN
  3718  100C  3493               	retlw	low _do_I2C_TX_EMPTY
  3719  100D  340D               	retlw	high _do_I2C_TX_EMPTY
  3720  100E  3419               	retlw	low _do_I2C_SEND_RESTART_READ
  3721  100F  340A               	retlw	high _do_I2C_SEND_RESTART_READ
  3722  1010  341D               	retlw	low _do_I2C_SEND_RESTART_WRITE
  3723  1011  340A               	retlw	high _do_I2C_SEND_RESTART_WRITE
  3724  1012  3421               	retlw	low _do_I2C_SEND_RESTART
  3725  1013  340A               	retlw	high _do_I2C_SEND_RESTART
  3726  1014  3425               	retlw	low _do_I2C_SEND_STOP
  3727  1015  340A               	retlw	high _do_I2C_SEND_STOP
  3728  1016  3429               	retlw	low _do_I2C_DO_ACK
  3729  1017  340A               	retlw	high _do_I2C_DO_ACK
  3730  1018  342D               	retlw	low _do_I2C_DO_NACK_STOP
  3731  1019  340A               	retlw	high _do_I2C_DO_NACK_STOP
  3732  101A  3431               	retlw	low _do_I2C_DO_NACK_RESTART
  3733  101B  340A               	retlw	high _do_I2C_DO_NACK_RESTART
  3734  101C  345F               	retlw	low _do_I2C_RESET
  3735  101D  340A               	retlw	high _do_I2C_RESET
  3736  101E  3438               	retlw	low _do_I2C_DO_ADDRESS_NACK
  3737  101F  340D               	retlw	high _do_I2C_DO_ADDRESS_NACK
  3738  1020                     __end_of_fsmStateTable:	
  3739  0011                     _PIR1bits	set	17
  3740  000B                     _INTCONbits	set	11
  3741  0010                     _PIR0bits	set	16
  3742  008E                     _TRISC	set	142
  3743  008D                     _TRISB	set	141
  3744  008C                     _TRISA	set	140
  3745  0097                     _WDTCON	set	151
  3746  0091                     _PIE1bits	set	145
  3747  0090                     _PIE0bits	set	144
  3748  010E                     _LATCbits	set	270
  3749  010E                     _LATC	set	270
  3750  010D                     _LATB	set	269
  3751  010C                     _LATA	set	268
  3752  018C                     _ANSELA	set	396
  3753  018D                     _ANSELB	set	397
  3754  018E                     _ANSELC	set	398
  3755  021C                     _SSP2STATbits	set	540
  3756  0219                     _SSP2BUF	set	537
  3757  021D                     _SSP2CON1bits	set	541
  3758  021A                     _SSP2ADD	set	538
  3759  021D                     _SSP2CON1	set	541
  3760  021C                     _SSP2STAT	set	540
  3761  0214                     _SSP1STATbits	set	532
  3762  0213                     _SSP1MSK	set	531
  3763  0211                     _SSP1BUF	set	529
  3764  0216                     _SSP1CON2bits	set	534
  3765  0212                     _SSP1ADD	set	530
  3766  0216                     _SSP1CON2	set	534
  3767  0215                     _SSP1CON1	set	533
  3768  0214                     _SSP1STAT	set	532
  3769  0215                     _SSP1CON1bits	set	533
  3770  020E                     _WPUC	set	526
  3771  020C                     _WPUA	set	524
  3772  020D                     _WPUB	set	525
  3773  028E                     _ODCONC	set	654
  3774  028D                     _ODCONB	set	653
  3775  028C                     _ODCONA	set	652
  3776  030E                     _SLRCONC	set	782
  3777  030D                     _SLRCONB	set	781
  3778  030C                     _SLRCONA	set	780
  3779  0916                     _PMD5	set	2326
  3780  0915                     _PMD4	set	2325
  3781  0914                     _PMD3	set	2324
  3782  0913                     _PMD2	set	2323
  3783  0912                     _PMD1	set	2322
  3784  0911                     _PMD0	set	2321
  3785  091E                     _OSCTUNE	set	2334
  3786  091F                     _OSCFRQ	set	2335
  3787  091D                     _OSCEN	set	2333
  3788  091B                     _OSCCON3	set	2331
  3789  0919                     _OSCCON1	set	2329
  3790  0E1D                     _SSP2CLKPPS	set	3613
  3791  0E21                     _SSP1DATPPS	set	3617
  3792  0E20                     _SSP1CLKPPS	set	3616
  3793  0E1E                     _SSP2DATPPS	set	3614
  3794  0EA2                     _RC2PPS	set	3746
  3795  0E9D                     _RB5PPS	set	3741
  3796  0E9F                     _RB7PPS	set	3743
  3797  0E9E                     _RB6PPS	set	3742
  3798  1020                     STR_3:	
  3799  1020  3441               	retlw	65	;'A'
  3800  1021  346C               	retlw	108	;'l'
  3801  1022  3465               	retlw	101	;'e'
  3802  1023  3478               	retlw	120	;'x'
  3803  1024  3461               	retlw	97	;'a'
  3804  1025  346E               	retlw	110	;'n'
  3805  1026  3464               	retlw	100	;'d'
  3806  1027  3472               	retlw	114	;'r'
  3807  1028  3461               	retlw	97	;'a'
  3808  1029  3420               	retlw	32	;' '
  3809  102A  3446               	retlw	70	;'F'
  3810  102B  3479               	retlw	121	;'y'
  3811  102C  3466               	retlw	102	;'f'
  3812  102D  3466               	retlw	102	;'f'
  3813  102E  3465               	retlw	101	;'e'
  3814  102F  3400               	retlw	0
  3815                           
  3816                           	psect	stringtext2
  3817  1030                     __pstringtext2:	
  3818  1030                     STR_2:	
  3819  1030  344E               	retlw	78	;'N'
  3820  1031  346F               	retlw	111	;'o'
  3821  1032  3465               	retlw	101	;'e'
  3822  1033  346C               	retlw	108	;'l'
  3823  1034  346C               	retlw	108	;'l'
  3824  1035  3465               	retlw	101	;'e'
  3825  1036  3420               	retlw	32	;' '
  3826  1037  3443               	retlw	67	;'C'
  3827  1038  3472               	retlw	114	;'r'
  3828  1039  3461               	retlw	97	;'a'
  3829  103A  346E               	retlw	110	;'n'
  3830  103B  3465               	retlw	101	;'e'
  3831  103C  3400               	retlw	0
  3832                           
  3833                           	psect	stringtext3
  3834  103D                     __pstringtext3:	
  3835  103D                     STR_1:	
  3836  103D  344A               	retlw	74	;'J'
  3837  103E  3475               	retlw	117	;'u'
  3838  103F  3473               	retlw	115	;'s'
  3839  1040  3474               	retlw	116	;'t'
  3840  1041  3469               	retlw	105	;'i'
  3841  1042  346E               	retlw	110	;'n'
  3842  1043  3420               	retlw	32	;' '
  3843  1044  3443               	retlw	67	;'C'
  3844  1045  3468               	retlw	104	;'h'
  3845  1046  3461               	retlw	97	;'a'
  3846  1047  346E               	retlw	110	;'n'
  3847  1048  3400               	retlw	0
  3848                           
  3849                           	psect	stringtext4
  3850  1049                     __pstringtext4:	
  3851  1049                     STR_4:	
  3852  1049  344A               	retlw	74	;'J'
  3853  104A  3465               	retlw	101	;'e'
  3854  104B  3466               	retlw	102	;'f'
  3855  104C  3466               	retlw	102	;'f'
  3856  104D  3420               	retlw	32	;' '
  3857  104E  3447               	retlw	71	;'G'
  3858  104F  3465               	retlw	101	;'e'
  3859  1050  3469               	retlw	105	;'i'
  3860  1051  3473               	retlw	115	;'s'
  3861  1052  3473               	retlw	115	;'s'
  3862  1053  3400               	retlw	0
  3863                           
  3864                           	psect	stringtext5
  3865  1054                     __pstringtext5:	
  3866  1054                     STR_5:	
  3867  1054  3472               	retlw	114	;'r'
  3868  1055  3465               	retlw	101	;'e'
  3869  1056  3473               	retlw	115	;'s'
  3870  1057  3465               	retlw	101	;'e'
  3871  1058  3474               	retlw	116	;'t'
  3872  1059  3400               	retlw	0
  3873                           
  3874                           	psect	stringtext6
  3875  0000                     __pstringtext6:	
  3876  1020                     
  3877                           ; #config settings
  3878  0000                     
  3879                           	psect	cinit
  3880  002D                     start_initialization:	
  3881  002D                     __initialization:	
  3882                           
  3883                           ; Initialize objects allocated to BANK0
  3884  002D  3189  21DD  3180   	fcall	__pidataBANK0	;fetch initializer
  3885  0030  00EF               	movwf	__pdataBANK0& (0+127)
  3886                           
  3887                           ; Initialize objects allocated to BANK2
  3888  0031  309B               	movlw	low __pidataBANK2
  3889  0032  0084               	movwf	4
  3890  0033  308A               	movlw	(high __pidataBANK2)| (0+128)
  3891  0034  0085               	movwf	5
  3892  0035  3060               	movlw	low __pdataBANK2
  3893  0036  0086               	movwf	6
  3894  0037  3001               	movlw	high __pdataBANK2
  3895  0038  0087               	movwf	7
  3896  0039  3008               	movlw	8
  3897  003A  318A  2259  3180   	fcall	init_ram
  3898                           
  3899                           ; Clear objects allocated to COMMON
  3900  003D  01F0               	clrf	__pbssCOMMON& (0+127)
  3901  003E  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
  3902  003F  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
  3903  0040  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
  3904  0041  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
  3905  0042  01F5               	clrf	(__pbssCOMMON+5)& (0+127)
  3906                           
  3907                           ; Clear objects allocated to BANK0
  3908  0043  305C               	movlw	low __pbssBANK0
  3909  0044  0084               	movwf	4
  3910  0045  3000               	movlw	high __pbssBANK0
  3911  0046  0085               	movwf	5
  3912  0047  3013               	movlw	19
  3913  0048  318A  2253  3180   	fcall	clear_ram0
  3914                           
  3915                           ; Clear objects allocated to BANK2
  3916  004B  0022               	movlb	2	; select bank2
  3917  004C  01E8               	clrf	__pbssBANK2& (0+127)
  3918  004D  01E9               	clrf	(__pbssBANK2+1)& (0+127)
  3919                           
  3920                           ; Clear objects allocated to BANK3
  3921  004E  30A0               	movlw	low __pbssBANK3
  3922  004F  0084               	movwf	4
  3923  0050  3001               	movlw	high __pbssBANK3
  3924  0051  0085               	movwf	5
  3925  0052  301D               	movlw	29
  3926  0053  318A  2253  3180   	fcall	clear_ram0
  3927                           
  3928                           ; Clear objects allocated to BANK4
  3929  0056  3020               	movlw	low __pbssBANK4
  3930  0057  0084               	movwf	4
  3931  0058  3002               	movlw	high __pbssBANK4
  3932  0059  0085               	movwf	5
  3933  005A  3044               	movlw	68
  3934  005B  318A  2253         	fcall	clear_ram0
  3935  005D                     end_of_initialization:	
  3936                           ;End of C runtime variable initialization code
  3937                           
  3938  005D                     __end_of__initialization:	
  3939  005D  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3940  005E  0020               	movlb	0
  3941  005F  318D  2D63         	ljmp	_main	;jump to C main() function
  3942                           
  3943                           	psect	bssCOMMON
  3944  0070                     __pbssCOMMON:	
  3945  0070                     _i2c1_driver_busCollisionISR:	
  3946  0070                     	ds	2
  3947  0072                     _b_i2c_error_flag:	
  3948  0072                     	ds	1
  3949  0073                     _handleGestureFlag:	
  3950  0073                     	ds	1
  3951  0074                     _adcResult:	
  3952  0074                     	ds	1
  3953  0075                     _button:	
  3954  0075                     	ds	1
  3955                           
  3956                           	psect	bssBANK0
  3957  005C                     __pbssBANK0:	
  3958  005C                     _name:	
  3959  005C                     	ds	2
  3960  005E                     _gesture_state_:	
  3961  005E                     	ds	2
  3962  0060                     _gesture_far_count_:	
  3963  0060                     	ds	2
  3964  0062                     _gesture_near_count_:	
  3965  0062                     	ds	2
  3966  0064                     _gesture_lr_count_:	
  3967  0064                     	ds	2
  3968  0066                     _gesture_ud_count_:	
  3969  0066                     	ds	2
  3970  0068                     _gesture_lr_delta_:	
  3971  0068                     	ds	2
  3972  006A                     _gesture_ud_delta_:	
  3973  006A                     	ds	2
  3974  006C                     _i2c1_driver_i2cISR:	
  3975  006C                     	ds	2
  3976  006E                     _printed:	
  3977  006E                     	ds	1
  3978                           
  3979                           	psect	dataBANK0
  3980  006F                     __pdataBANK0:	
  3981  006F                     _start:	
  3982  006F                     	ds	1
  3983                           
  3984                           	psect	bssBANK2
  3985  0168                     __pbssBANK2:	
  3986  0168                     _gesture_motion_:	
  3987  0168                     	ds	2
  3988                           
  3989                           	psect	dataBANK2
  3990  0160                     __pdataBANK2:	
  3991  0160                     _names:	
  3992  0160                     	ds	8
  3993                           
  3994                           	psect	bssBANK3
  3995  01A0                     __pbssBANK3:	
  3996  01A0                     _i2c_status:	
  3997  01A0                     	ds	29
  3998                           
  3999                           	psect	bssBANK4
  4000  0220                     __pbssBANK4:	
  4001  0220                     _gesture_data_:	
  4002  0220                     	ds	68
  4003                           
  4004                           	psect	inittext
  4005  0A59                     init_ram:	
  4006  0A59  00FE               	movwf	126
  4007  0A5A                     initloop:	
  4008  0A5A  0012               	moviw fsr0++
  4009  0A5B  001E               	movwi fsr1++
  4010  0A5C  0BFE               	decfsz	126,f
  4011  0A5D  2A5A               	goto	initloop
  4012  0A5E  3400               	retlw	0
  4013                           
  4014                           	psect	clrtext
  4015  0A53                     clear_ram0:	
  4016                           ;	Called with FSR0 containing the base address, and
  4017                           ;	WREG with the size to clear
  4018                           
  4019  0A53  0064               	clrwdt	;clear the watchdog before getting into this loop
  4020  0A54                     clrloop0:	
  4021  0A54  0180               	clrf	0	;clear RAM location pointed to by FSR
  4022  0A55  3101               	addfsr 0,1
  4023  0A56  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  4024  0A57  2A54               	goto	clrloop0	;have we reached the end yet?
  4025  0A58  3400               	retlw	0	;all done for this memory range, return
  4026                           
  4027                           	psect	cstackBANK2
  4028  0120                     __pcstackBANK2:	
  4029  0120                     readGesture@fifo_data:	
  4030                           
  4031                           ; 64 bytes @ 0x0
  4032  0120                     	ds	64
  4033                           
  4034                           	psect	cstackBANK1
  4035  00A0                     __pcstackBANK1:	
  4036  00A0                     readGesture@fifo_data2:	
  4037                           
  4038                           ; 64 bytes @ 0x0
  4039  00A0                     	ds	64
  4040                           
  4041                           	psect	cstackCOMMON
  4042  0076                     __pcstackCOMMON:	
  4043  0076                     ?_i2c1_driver_open:	
  4044  0076                     ?_i2c1_driver_isNACK:	
  4045                           ; 1 bit 
  4046                           
  4047  0076                     ?_i2c1_driver_isBufferFull:	
  4048                           ; 1 bit 
  4049                           
  4050  0076                     ?_returnStop:	
  4051                           ; 1 bit 
  4052                           
  4053  0076                     ?_returnReset:	
  4054                           ; 1 bytes @ 0x0
  4055                           
  4056  0076                     ?_mssp1_clearIRQ:	
  4057                           ; 1 bytes @ 0x0
  4058                           
  4059  0076                     ??_mssp1_clearIRQ:	
  4060                           ; 1 bytes @ 0x0
  4061                           
  4062  0076                     ?_i2c_busCollisionISR:	
  4063                           ; 1 bytes @ 0x0
  4064                           
  4065  0076                     ??_i2c_busCollisionISR:	
  4066                           ; 1 bytes @ 0x0
  4067                           
  4068  0076                     ?_i2c_ISR:	
  4069                           ; 1 bytes @ 0x0
  4070                           
  4071  0076                     ?_i2c1_driver_start:	
  4072                           ; 1 bytes @ 0x0
  4073                           
  4074  0076                     ?_i2c1_driver_resetBus:	
  4075                           ; 1 bytes @ 0x0
  4076                           
  4077  0076                     ??_i2c1_driver_resetBus:	
  4078                           ; 1 bytes @ 0x0
  4079                           
  4080  0076                     ?_i2c1_driver_restart:	
  4081                           ; 1 bytes @ 0x0
  4082                           
  4083  0076                     ?_i2c1_driver_stop:	
  4084                           ; 1 bytes @ 0x0
  4085                           
  4086  0076                     ?_i2c1_driver_TXData:	
  4087                           ; 1 bytes @ 0x0
  4088                           
  4089  0076                     ?_i2c1_driver_startRX:	
  4090                           ; 1 bytes @ 0x0
  4091                           
  4092  0076                     ?_i2c1_driver_sendACK:	
  4093                           ; 1 bytes @ 0x0
  4094                           
  4095  0076                     ??_i2c1_driver_sendACK:	
  4096                           ; 1 bytes @ 0x0
  4097                           
  4098  0076                     ?_i2c1_driver_sendNACK:	
  4099                           ; 1 bytes @ 0x0
  4100                           
  4101  0076                     ??_i2c1_driver_isNACK:	
  4102                           ; 1 bytes @ 0x0
  4103                           
  4104  0076                     ?_i2c1_driver_getRXData:	
  4105                           ; 1 bytes @ 0x0
  4106                           
  4107  0076                     ?_mssp1_setIRQ:	
  4108                           ; 1 bytes @ 0x0
  4109                           
  4110  0076                     ??_mssp1_setIRQ:	
  4111                           ; 1 bytes @ 0x0
  4112                           
  4113  0076                     ?_i2c1_driver_clearBusCollision:	
  4114                           ; 1 bytes @ 0x0
  4115                           
  4116  0076                     ??_i2c1_driver_clearBusCollision:	
  4117                           ; 1 bytes @ 0x0
  4118                           
  4119  0076                     ?_PIN_MANAGER_IOC:	
  4120                           ; 1 bytes @ 0x0
  4121                           
  4122  0076                     ??_PIN_MANAGER_IOC:	
  4123                           ; 1 bytes @ 0x0
  4124                           
  4125  0076                     ?_PMD_Initialize:	
  4126                           ; 1 bytes @ 0x0
  4127                           
  4128  0076                     ?_PIN_MANAGER_Initialize:	
  4129                           ; 1 bytes @ 0x0
  4130                           
  4131  0076                     ?_OSCILLATOR_Initialize:	
  4132                           ; 1 bytes @ 0x0
  4133                           
  4134  0076                     ?_WDT_Initialize:	
  4135                           ; 1 bytes @ 0x0
  4136                           
  4137  0076                     ?_SPI2_Initialize:	
  4138                           ; 1 bytes @ 0x0
  4139                           
  4140  0076                     ?_initialize:	
  4141                           ; 1 bytes @ 0x0
  4142                           
  4143  0076                     ?_enableGestureSensor:	
  4144                           ; 1 bytes @ 0x0
  4145                           
  4146  0076                     ?_isGestureAvailable:	
  4147                           ; 1 bytes @ 0x0
  4148                           
  4149  0076                     ?_handleGesture:	
  4150                           ; 1 bytes @ 0x0
  4151                           
  4152  0076                     ?_wireReadDataByte:	
  4153                           ; 1 bytes @ 0x0
  4154                           
  4155  0076                     ?_setLEDDrive:	
  4156                           ; 1 bytes @ 0x0
  4157                           
  4158  0076                     ?_setProximityGain:	
  4159                           ; 1 bytes @ 0x0
  4160                           
  4161  0076                     ?_setAmbientLightGain:	
  4162                           ; 1 bytes @ 0x0
  4163                           
  4164  0076                     ?_setProxIntLowThresh:	
  4165                           ; 1 bytes @ 0x0
  4166                           
  4167  0076                     ?_setProxIntHighThresh:	
  4168                           ; 1 bytes @ 0x0
  4169                           
  4170  0076                     ?_setGestureEnterThresh:	
  4171                           ; 1 bytes @ 0x0
  4172                           
  4173  0076                     ?_setGestureExitThresh:	
  4174                           ; 1 bytes @ 0x0
  4175                           
  4176  0076                     ?_setGestureGain:	
  4177                           ; 1 bytes @ 0x0
  4178                           
  4179  0076                     ?_setGestureLEDDrive:	
  4180                           ; 1 bytes @ 0x0
  4181                           
  4182  0076                     ?_setGestureWaitTime:	
  4183                           ; 1 bytes @ 0x0
  4184                           
  4185  0076                     ?_setGestureIntEnable:	
  4186                           ; 1 bytes @ 0x0
  4187                           
  4188  0076                     ?_getMode:	
  4189                           ; 1 bytes @ 0x0
  4190                           
  4191  0076                     ?_resetGestureParameters:	
  4192                           ; 1 bytes @ 0x0
  4193                           
  4194  0076                     ?_setLEDBoost:	
  4195                           ; 1 bytes @ 0x0
  4196                           
  4197  0076                     ?_setGestureMode:	
  4198                           ; 1 bytes @ 0x0
  4199                           
  4200  0076                     ?_enablePower:	
  4201                           ; 1 bytes @ 0x0
  4202                           
  4203  0076                     ?_processGestureData:	
  4204                           ; 1 bytes @ 0x0
  4205                           
  4206  0076                     ?_decodeGesture:	
  4207                           ; 1 bytes @ 0x0
  4208                           
  4209  0076                     ?_I2C_Start:	
  4210                           ; 1 bytes @ 0x0
  4211                           
  4212  0076                     ?_I2C_Write_Byte:	
  4213                           ; 1 bytes @ 0x0
  4214                           
  4215  0076                     ?_I2C_ReStart:	
  4216                           ; 1 bytes @ 0x0
  4217                           
  4218  0076                     ?_I2C_Read_Byte:	
  4219                           ; 1 bytes @ 0x0
  4220                           
  4221  0076                     ?_I2C_Send_NACK:	
  4222                           ; 1 bytes @ 0x0
  4223                           
  4224  0076                     ?_I2C_Stop:	
  4225                           ; 1 bytes @ 0x0
  4226                           
  4227  0076                     ?_do_I2C_RESET:	
  4228                           ; 1 bytes @ 0x0
  4229                           
  4230  0076                     ??_do_I2C_RESET:	
  4231                           ; 1 bytes @ 0x0
  4232                           
  4233  0076                     ?_do_I2C_IDLE:	
  4234                           ; 1 bytes @ 0x0
  4235                           
  4236  0076                     ??_do_I2C_IDLE:	
  4237                           ; 1 bytes @ 0x0
  4238                           
  4239  0076                     ?_do_I2C_SEND_RESTART_READ:	
  4240                           ; 1 bytes @ 0x0
  4241                           
  4242  0076                     ??_do_I2C_SEND_RESTART_READ:	
  4243                           ; 1 bytes @ 0x0
  4244                           
  4245  0076                     ?_do_I2C_SEND_RESTART_WRITE:	
  4246                           ; 1 bytes @ 0x0
  4247                           
  4248  0076                     ??_do_I2C_SEND_RESTART_WRITE:	
  4249                           ; 1 bytes @ 0x0
  4250                           
  4251  0076                     ?_do_I2C_SEND_RESTART:	
  4252                           ; 1 bytes @ 0x0
  4253                           
  4254  0076                     ??_do_I2C_SEND_RESTART:	
  4255                           ; 1 bytes @ 0x0
  4256                           
  4257  0076                     ?_do_I2C_SEND_STOP:	
  4258                           ; 1 bytes @ 0x0
  4259                           
  4260  0076                     ??_do_I2C_SEND_STOP:	
  4261                           ; 1 bytes @ 0x0
  4262                           
  4263  0076                     ?_do_I2C_SEND_ADR_READ:	
  4264                           ; 1 bytes @ 0x0
  4265                           
  4266  0076                     ??_do_I2C_SEND_ADR_READ:	
  4267                           ; 1 bytes @ 0x0
  4268                           
  4269  0076                     ?_do_I2C_SEND_ADR_WRITE:	
  4270                           ; 1 bytes @ 0x0
  4271                           
  4272  0076                     ??_do_I2C_SEND_ADR_WRITE:	
  4273                           ; 1 bytes @ 0x0
  4274                           
  4275  0076                     ?_do_I2C_RCEN:	
  4276                           ; 1 bytes @ 0x0
  4277                           
  4278  0076                     ??_do_I2C_RCEN:	
  4279                           ; 1 bytes @ 0x0
  4280                           
  4281  0076                     ?_do_I2C_DO_ACK:	
  4282                           ; 1 bytes @ 0x0
  4283                           
  4284  0076                     ??_do_I2C_DO_ACK:	
  4285                           ; 1 bytes @ 0x0
  4286                           
  4287  0076                     ?_do_I2C_DO_NACK_STOP:	
  4288                           ; 1 bytes @ 0x0
  4289                           
  4290  0076                     ??_do_I2C_DO_NACK_STOP:	
  4291                           ; 1 bytes @ 0x0
  4292                           
  4293  0076                     ?_do_I2C_DO_NACK_RESTART:	
  4294                           ; 1 bytes @ 0x0
  4295                           
  4296  0076                     ??_do_I2C_DO_NACK_RESTART:	
  4297                           ; 1 bytes @ 0x0
  4298                           
  4299  0076                     ?_do_I2C_DO_ADDRESS_NACK:	
  4300                           ; 1 bytes @ 0x0
  4301                           
  4302  0076                     ??_do_I2C_DO_ADDRESS_NACK:	
  4303                           ; 1 bytes @ 0x0
  4304                           
  4305  0076                     ?_do_I2C_TX:	
  4306                           ; 1 bytes @ 0x0
  4307                           
  4308  0076                     ??_do_I2C_TX:	
  4309                           ; 1 bytes @ 0x0
  4310                           
  4311  0076                     ?_do_I2C_RX:	
  4312                           ; 1 bytes @ 0x0
  4313                           
  4314  0076                     ??_do_I2C_RX:	
  4315                           ; 1 bytes @ 0x0
  4316                           
  4317  0076                     ?_do_I2C_TX_EMPTY:	
  4318                           ; 1 bytes @ 0x0
  4319                           
  4320  0076                     ??_do_I2C_TX_EMPTY:	
  4321                           ; 1 bytes @ 0x0
  4322                           
  4323  0076                     ?_INTERRUPT_InterruptManager:	
  4324                           ; 1 bytes @ 0x0
  4325                           
  4326  0076                     ?_SYSTEM_Initialize:	
  4327                           ; 1 bytes @ 0x0
  4328                           
  4329  0076                     ?_SPI2_Exchange8bit:	
  4330                           ; 1 bytes @ 0x0
  4331                           
  4332  0076                     ?_main:	
  4333                           ; 1 bytes @ 0x0
  4334                           
  4335  0076                     ?_SPI_Write:	
  4336                           ; 1 bytes @ 0x0
  4337                           
  4338  0076                     ?i1_i2c1_driver_restart:	
  4339                           ; 1 bytes @ 0x0
  4340                           
  4341  0076                     ??i1_i2c1_driver_restart:	
  4342                           ; 1 bytes @ 0x0
  4343                           
  4344  0076                     ?i1_i2c1_driver_stop:	
  4345                           ; 1 bytes @ 0x0
  4346                           
  4347  0076                     ??i1_i2c1_driver_stop:	
  4348                           ; 1 bytes @ 0x0
  4349                           
  4350  0076                     ?i1_i2c1_driver_startRX:	
  4351                           ; 1 bytes @ 0x0
  4352                           
  4353  0076                     ??i1_i2c1_driver_startRX:	
  4354                           ; 1 bytes @ 0x0
  4355                           
  4356  0076                     ?i1_i2c1_driver_getRXData:	
  4357                           ; 1 bytes @ 0x0
  4358                           
  4359  0076                     ??i1_i2c1_driver_getRXData:	
  4360                           ; 1 bytes @ 0x0
  4361                           
  4362  0076                     ?i1_i2c1_driver_TXData:	
  4363                           ; 1 bytes @ 0x0
  4364                           
  4365  0076                     ??i1_i2c1_driver_TXData:	
  4366                           ; 1 bytes @ 0x0
  4367                           
  4368  0076                     ?i1_i2c1_driver_sendNACK:	
  4369                           ; 1 bytes @ 0x0
  4370                           
  4371  0076                     ??i1_i2c1_driver_sendNACK:	
  4372                           ; 1 bytes @ 0x0
  4373                           
  4374  0076                     returnStop@p:	
  4375                           ; 1 bytes @ 0x0
  4376                           
  4377  0076                     returnReset@p:	
  4378                           ; 1 bytes @ 0x0
  4379                           
  4380  0076                     i1i2c1_driver_TXData@d:	
  4381                           ; 1 bytes @ 0x0
  4382                           
  4383                           
  4384                           ; 1 bytes @ 0x0
  4385  0076                     	ds	1
  4386  0077                     ??_returnStop:	
  4387  0077                     ??_returnReset:	
  4388                           ; 1 bytes @ 0x1
  4389                           
  4390                           
  4391                           ; 1 bytes @ 0x1
  4392  0077                     	ds	2
  4393  0079                     ??_i2c_ISR:	
  4394                           
  4395                           ; 1 bytes @ 0x3
  4396  0079                     	ds	3
  4397  007C                     ??_INTERRUPT_InterruptManager:	
  4398                           
  4399                           	psect	cstackBANK0
  4400  0020                     __pcstackBANK0:	
  4401                           ; 1 bytes @ 0x6
  4402                           
  4403  0020                     ??_i2c1_driver_open:	
  4404  0020                     ??_i2c1_driver_start:	
  4405                           ; 1 bytes @ 0x0
  4406                           
  4407  0020                     ??_i2c1_driver_restart:	
  4408                           ; 1 bytes @ 0x0
  4409                           
  4410  0020                     ??_i2c1_driver_stop:	
  4411                           ; 1 bytes @ 0x0
  4412                           
  4413  0020                     ??_i2c1_driver_TXData:	
  4414                           ; 1 bytes @ 0x0
  4415                           
  4416  0020                     ??_i2c1_driver_startRX:	
  4417                           ; 1 bytes @ 0x0
  4418                           
  4419  0020                     ??_i2c1_driver_sendNACK:	
  4420                           ; 1 bytes @ 0x0
  4421                           
  4422  0020                     ??_i2c1_driver_getRXData:	
  4423                           ; 1 bytes @ 0x0
  4424                           
  4425  0020                     ??_PMD_Initialize:	
  4426                           ; 1 bytes @ 0x0
  4427                           
  4428  0020                     ??_PIN_MANAGER_Initialize:	
  4429                           ; 1 bytes @ 0x0
  4430                           
  4431  0020                     ??_OSCILLATOR_Initialize:	
  4432                           ; 1 bytes @ 0x0
  4433                           
  4434  0020                     ??_WDT_Initialize:	
  4435                           ; 1 bytes @ 0x0
  4436                           
  4437  0020                     ??_SPI2_Initialize:	
  4438                           ; 1 bytes @ 0x0
  4439                           
  4440  0020                     ??_resetGestureParameters:	
  4441                           ; 1 bytes @ 0x0
  4442                           
  4443  0020                     ??_decodeGesture:	
  4444                           ; 1 bytes @ 0x0
  4445                           
  4446  0020                     ??_I2C_Start:	
  4447                           ; 1 bytes @ 0x0
  4448                           
  4449  0020                     ??_I2C_ReStart:	
  4450                           ; 1 bytes @ 0x0
  4451                           
  4452  0020                     ??_I2C_Send_NACK:	
  4453                           ; 1 bytes @ 0x0
  4454                           
  4455  0020                     ??_I2C_Stop:	
  4456                           ; 1 bytes @ 0x0
  4457                           
  4458  0020                     ??_SYSTEM_Initialize:	
  4459                           ; 1 bytes @ 0x0
  4460                           
  4461  0020                     ??_i2c1_driver_isBufferFull:	
  4462                           ; 1 bytes @ 0x0
  4463                           
  4464  0020                     ??_SPI2_Exchange8bit:	
  4465                           ; 1 bytes @ 0x0
  4466                           
  4467  0020                     ?_strlen:	
  4468                           ; 1 bytes @ 0x0
  4469                           
  4470  0020                     ?___wmul:	
  4471                           ; 2 bytes @ 0x0
  4472                           
  4473  0020                     i2c1_driver_TXData@d:	
  4474                           ; 2 bytes @ 0x0
  4475                           
  4476  0020                     SPI2_Exchange8bit@data:	
  4477                           ; 1 bytes @ 0x0
  4478                           
  4479  0020                     ___wmul@multiplier:	
  4480                           ; 1 bytes @ 0x0
  4481                           
  4482  0020                     strlen@s:	
  4483                           ; 2 bytes @ 0x0
  4484                           
  4485                           
  4486                           ; 2 bytes @ 0x0
  4487  0020                     	ds	1
  4488  0021                     ??_I2C_Write_Byte:	
  4489  0021                     ??_I2C_Read_Byte:	
  4490                           ; 1 bytes @ 0x1
  4491                           
  4492  0021                     ??_SPI_Write:	
  4493                           ; 1 bytes @ 0x1
  4494                           
  4495                           
  4496                           ; 1 bytes @ 0x1
  4497  0021                     	ds	1
  4498  0022                     ??_strlen:	
  4499  0022                     SPI_Write@incoming:	
  4500                           ; 1 bytes @ 0x2
  4501                           
  4502  0022                     _decodeGesture$1257:	
  4503                           ; 1 bytes @ 0x2
  4504                           
  4505  0022                     ___wmul@multiplicand:	
  4506                           ; 2 bytes @ 0x2
  4507                           
  4508                           
  4509                           ; 2 bytes @ 0x2
  4510  0022                     	ds	1
  4511  0023                     I2C_Write_Byte@Byte:	
  4512  0023                     strlen@a:	
  4513                           ; 1 bytes @ 0x3
  4514                           
  4515                           
  4516                           ; 2 bytes @ 0x3
  4517  0023                     	ds	1
  4518  0024                     ??___wmul:	
  4519  0024                     _decodeGesture$1258:	
  4520                           ; 1 bytes @ 0x4
  4521                           
  4522  0024                     I2C_Write_Byte@count:	
  4523                           ; 2 bytes @ 0x4
  4524                           
  4525  0024                     ___wmul@product:	
  4526                           ; 2 bytes @ 0x4
  4527                           
  4528                           
  4529                           ; 2 bytes @ 0x4
  4530  0024                     	ds	1
  4531  0025                     ?_Display_Name:	
  4532  0025                     Display_Name@string1:	
  4533                           ; 1 bytes @ 0x5
  4534                           
  4535                           
  4536                           ; 2 bytes @ 0x5
  4537  0025                     	ds	1
  4538  0026                     ??_wireReadDataByte:	
  4539  0026                     ?_wireWriteDataByte:	
  4540                           ; 1 bytes @ 0x6
  4541                           
  4542  0026                     ?_wireReadDataBlock:	
  4543                           ; 2 bytes @ 0x6
  4544                           
  4545  0026                     ?___awdiv:	
  4546                           ; 2 bytes @ 0x6
  4547                           
  4548  0026                     wireWriteDataByte@val:	
  4549                           ; 2 bytes @ 0x6
  4550                           
  4551  0026                     _decodeGesture$1259:	
  4552                           ; 1 bytes @ 0x6
  4553                           
  4554  0026                     wireReadDataBlock@val:	
  4555                           ; 2 bytes @ 0x6
  4556                           
  4557  0026                     ___awdiv@divisor:	
  4558                           ; 2 bytes @ 0x6
  4559                           
  4560                           
  4561                           ; 2 bytes @ 0x6
  4562  0026                     	ds	1
  4563  0027                     ??_Display_Name:	
  4564  0027                     wireReadDataByte@reg:	
  4565                           ; 1 bytes @ 0x7
  4566                           
  4567                           
  4568                           ; 1 bytes @ 0x7
  4569  0027                     	ds	1
  4570  0028                     wireReadDataByte@val:	
  4571  0028                     Display_Name@length:	
  4572                           ; 1 bytes @ 0x8
  4573                           
  4574  0028                     _decodeGesture$1260:	
  4575                           ; 2 bytes @ 0x8
  4576                           
  4577  0028                     wireReadDataBlock@len:	
  4578                           ; 2 bytes @ 0x8
  4579                           
  4580  0028                     ___awdiv@dividend:	
  4581                           ; 2 bytes @ 0x8
  4582                           
  4583                           
  4584                           ; 2 bytes @ 0x8
  4585  0028                     	ds	1
  4586  0029                     ??_isGestureAvailable:	
  4587  0029                     ??_wireWriteDataByte:	
  4588                           ; 1 bytes @ 0x9
  4589                           
  4590  0029                     ??_getMode:	
  4591                           ; 1 bytes @ 0x9
  4592                           
  4593  0029                     wireWriteDataByte@reg:	
  4594                           ; 1 bytes @ 0x9
  4595                           
  4596                           
  4597                           ; 1 bytes @ 0x9
  4598  0029                     	ds	1
  4599  002A                     ??_setLEDDrive:	
  4600  002A                     ??_setProximityGain:	
  4601                           ; 1 bytes @ 0xA
  4602                           
  4603  002A                     ??_setAmbientLightGain:	
  4604                           ; 1 bytes @ 0xA
  4605                           
  4606  002A                     ??_setProxIntLowThresh:	
  4607                           ; 1 bytes @ 0xA
  4608                           
  4609  002A                     ??_setProxIntHighThresh:	
  4610                           ; 1 bytes @ 0xA
  4611                           
  4612  002A                     ?_setLightIntLowThreshold:	
  4613                           ; 1 bytes @ 0xA
  4614                           
  4615  002A                     ?_setLightIntHighThreshold:	
  4616                           ; 1 bytes @ 0xA
  4617                           
  4618  002A                     ??_setGestureEnterThresh:	
  4619                           ; 1 bytes @ 0xA
  4620                           
  4621  002A                     ??_setGestureExitThresh:	
  4622                           ; 1 bytes @ 0xA
  4623                           
  4624  002A                     ??_setGestureGain:	
  4625                           ; 1 bytes @ 0xA
  4626                           
  4627  002A                     ??_setGestureLEDDrive:	
  4628                           ; 1 bytes @ 0xA
  4629                           
  4630  002A                     ??_setGestureWaitTime:	
  4631                           ; 1 bytes @ 0xA
  4632                           
  4633  002A                     ??_setGestureIntEnable:	
  4634                           ; 1 bytes @ 0xA
  4635                           
  4636  002A                     ??_setLEDBoost:	
  4637                           ; 1 bytes @ 0xA
  4638                           
  4639  002A                     ??_setGestureMode:	
  4640                           ; 1 bytes @ 0xA
  4641                           
  4642  002A                     ??_wireReadDataBlock:	
  4643                           ; 1 bytes @ 0xA
  4644                           
  4645  002A                     ??___awdiv:	
  4646                           ; 1 bytes @ 0xA
  4647                           
  4648  002A                     getMode@enable_value:	
  4649                           ; 1 bytes @ 0xA
  4650                           
  4651  002A                     isGestureAvailable@val:	
  4652                           ; 1 bytes @ 0xA
  4653                           
  4654  002A                     Display_Name@i:	
  4655                           ; 1 bytes @ 0xA
  4656                           
  4657  002A                     setLightIntLowThreshold@threshold:	
  4658                           ; 2 bytes @ 0xA
  4659                           
  4660  002A                     setLightIntHighThreshold@threshold:	
  4661                           ; 2 bytes @ 0xA
  4662                           
  4663  002A                     _decodeGesture$1261:	
  4664                           ; 2 bytes @ 0xA
  4665                           
  4666                           
  4667                           ; 2 bytes @ 0xA
  4668  002A                     	ds	1
  4669  002B                     ?_setMode:	
  4670  002B                     setMode@enable:	
  4671                           ; 1 bytes @ 0xB
  4672                           
  4673  002B                     setAmbientLightGain@drive:	
  4674                           ; 1 bytes @ 0xB
  4675                           
  4676  002B                     setProxIntLowThresh@threshold:	
  4677                           ; 1 bytes @ 0xB
  4678                           
  4679  002B                     setProxIntHighThresh@threshold:	
  4680                           ; 1 bytes @ 0xB
  4681                           
  4682  002B                     setGestureEnterThresh@threshold:	
  4683                           ; 1 bytes @ 0xB
  4684                           
  4685  002B                     setGestureExitThresh@threshold:	
  4686                           ; 1 bytes @ 0xB
  4687                           
  4688  002B                     setGestureWaitTime@time:	
  4689                           ; 1 bytes @ 0xB
  4690                           
  4691  002B                     setGestureIntEnable@val:	
  4692                           ; 1 bytes @ 0xB
  4693                           
  4694  002B                     setGestureMode@mode:	
  4695                           ; 1 bytes @ 0xB
  4696                           
  4697  002B                     ___awdiv@counter:	
  4698                           ; 1 bytes @ 0xB
  4699                           
  4700                           
  4701                           ; 1 bytes @ 0xB
  4702  002B                     	ds	1
  4703  002C                     ??_setMode:	
  4704  002C                     ??_setLightIntLowThreshold:	
  4705                           ; 1 bytes @ 0xC
  4706                           
  4707  002C                     ??_setLightIntHighThreshold:	
  4708                           ; 1 bytes @ 0xC
  4709                           
  4710  002C                     setLEDDrive@val:	
  4711                           ; 1 bytes @ 0xC
  4712                           
  4713  002C                     setProximityGain@val:	
  4714                           ; 1 bytes @ 0xC
  4715                           
  4716  002C                     setAmbientLightGain@val:	
  4717                           ; 1 bytes @ 0xC
  4718                           
  4719  002C                     setGestureGain@val:	
  4720                           ; 1 bytes @ 0xC
  4721                           
  4722  002C                     setGestureLEDDrive@val:	
  4723                           ; 1 bytes @ 0xC
  4724                           
  4725  002C                     setGestureWaitTime@val:	
  4726                           ; 1 bytes @ 0xC
  4727                           
  4728  002C                     setGestureIntEnable@enable:	
  4729                           ; 1 bytes @ 0xC
  4730                           
  4731  002C                     setLEDBoost@val:	
  4732                           ; 1 bytes @ 0xC
  4733                           
  4734  002C                     setGestureMode@val:	
  4735                           ; 1 bytes @ 0xC
  4736                           
  4737  002C                     ___awdiv@sign:	
  4738                           ; 1 bytes @ 0xC
  4739                           
  4740  002C                     _decodeGesture$1262:	
  4741                           ; 1 bytes @ 0xC
  4742                           
  4743                           
  4744                           ; 2 bytes @ 0xC
  4745  002C                     	ds	1
  4746  002D                     setLEDDrive@drive:	
  4747  002D                     setProximityGain@drive:	
  4748                           ; 1 bytes @ 0xD
  4749                           
  4750  002D                     setLightIntLowThreshold@val_low:	
  4751                           ; 1 bytes @ 0xD
  4752                           
  4753  002D                     setLightIntHighThreshold@val_low:	
  4754                           ; 1 bytes @ 0xD
  4755                           
  4756  002D                     setGestureGain@gain:	
  4757                           ; 1 bytes @ 0xD
  4758                           
  4759  002D                     setGestureLEDDrive@drive:	
  4760                           ; 1 bytes @ 0xD
  4761                           
  4762  002D                     setLEDBoost@boost:	
  4763                           ; 1 bytes @ 0xD
  4764                           
  4765  002D                     ___awdiv@quotient:	
  4766                           ; 1 bytes @ 0xD
  4767                           
  4768                           
  4769                           ; 2 bytes @ 0xD
  4770  002D                     	ds	1
  4771  002E                     setMode@reg_val:	
  4772  002E                     setLightIntLowThreshold@val_high:	
  4773                           ; 1 bytes @ 0xE
  4774                           
  4775  002E                     setLightIntHighThreshold@val_high:	
  4776                           ; 1 bytes @ 0xE
  4777                           
  4778  002E                     _decodeGesture$1263:	
  4779                           ; 1 bytes @ 0xE
  4780                           
  4781                           
  4782                           ; 2 bytes @ 0xE
  4783  002E                     	ds	1
  4784  002F                     ??_processGestureData:	
  4785  002F                     setMode@mode:	
  4786                           ; 1 bytes @ 0xF
  4787                           
  4788  002F                     wireReadDataBlock@reg:	
  4789                           ; 1 bytes @ 0xF
  4790                           
  4791                           
  4792                           ; 1 bytes @ 0xF
  4793  002F                     	ds	1
  4794  0030                     ??_initialize:	
  4795  0030                     ??_enableGestureSensor:	
  4796                           ; 1 bytes @ 0x10
  4797                           
  4798  0030                     ??_enablePower:	
  4799                           ; 1 bytes @ 0x10
  4800                           
  4801  0030                     wireReadDataBlock@j:	
  4802                           ; 1 bytes @ 0x10
  4803                           
  4804  0030                     _decodeGesture$1264:	
  4805                           ; 1 bytes @ 0x10
  4806                           
  4807                           
  4808                           ; 2 bytes @ 0x10
  4809  0030                     	ds	1
  4810  0031                     initialize@id:	
  4811  0031                     enableGestureSensor@interrupts:	
  4812                           ; 1 bytes @ 0x11
  4813                           
  4814  0031                     processGestureData@ud_ratio_first:	
  4815                           ; 1 bytes @ 0x11
  4816                           
  4817                           
  4818                           ; 2 bytes @ 0x11
  4819  0031                     	ds	2
  4820  0033                     processGestureData@lr_ratio_first:	
  4821                           
  4822                           ; 2 bytes @ 0x13
  4823  0033                     	ds	2
  4824  0035                     processGestureData@ud_ratio_last:	
  4825                           
  4826                           ; 2 bytes @ 0x15
  4827  0035                     	ds	2
  4828  0037                     processGestureData@lr_ratio_last:	
  4829                           
  4830                           ; 2 bytes @ 0x17
  4831  0037                     	ds	2
  4832  0039                     _processGestureData$1252:	
  4833                           
  4834                           ; 2 bytes @ 0x19
  4835  0039                     	ds	2
  4836  003B                     _processGestureData$1253:	
  4837                           
  4838                           ; 2 bytes @ 0x1B
  4839  003B                     	ds	2
  4840  003D                     _processGestureData$1254:	
  4841                           
  4842                           ; 2 bytes @ 0x1D
  4843  003D                     	ds	2
  4844  003F                     _processGestureData$1255:	
  4845                           
  4846                           ; 2 bytes @ 0x1F
  4847  003F                     	ds	2
  4848  0041                     processGestureData@u_last:	
  4849                           
  4850                           ; 1 bytes @ 0x21
  4851  0041                     	ds	1
  4852  0042                     processGestureData@d_last:	
  4853                           
  4854                           ; 1 bytes @ 0x22
  4855  0042                     	ds	1
  4856  0043                     processGestureData@l_last:	
  4857                           
  4858                           ; 1 bytes @ 0x23
  4859  0043                     	ds	1
  4860  0044                     processGestureData@r_last:	
  4861                           
  4862                           ; 1 bytes @ 0x24
  4863  0044                     	ds	1
  4864  0045                     processGestureData@u_first:	
  4865                           
  4866                           ; 1 bytes @ 0x25
  4867  0045                     	ds	1
  4868  0046                     processGestureData@d_first:	
  4869                           
  4870                           ; 1 bytes @ 0x26
  4871  0046                     	ds	1
  4872  0047                     processGestureData@l_first:	
  4873                           
  4874                           ; 1 bytes @ 0x27
  4875  0047                     	ds	1
  4876  0048                     processGestureData@r_first:	
  4877                           
  4878                           ; 1 bytes @ 0x28
  4879  0048                     	ds	1
  4880  0049                     processGestureData@ud_delta:	
  4881                           
  4882                           ; 2 bytes @ 0x29
  4883  0049                     	ds	2
  4884  004B                     processGestureData@lr_delta:	
  4885                           
  4886                           ; 2 bytes @ 0x2B
  4887  004B                     	ds	2
  4888  004D                     processGestureData@i:	
  4889                           
  4890                           ; 2 bytes @ 0x2D
  4891  004D                     	ds	2
  4892  004F                     ?_readGesture:	
  4893                           
  4894                           ; 2 bytes @ 0x2F
  4895  004F                     	ds	2
  4896  0051                     ??_readGesture:	
  4897                           
  4898                           ; 1 bytes @ 0x31
  4899  0051                     	ds	2
  4900  0053                     readGesture@motion:	
  4901                           
  4902                           ; 2 bytes @ 0x33
  4903  0053                     	ds	2
  4904  0055                     readGesture@gstatus:	
  4905                           
  4906                           ; 1 bytes @ 0x35
  4907  0055                     	ds	1
  4908  0056                     readGesture@bytes_read:	
  4909                           
  4910                           ; 2 bytes @ 0x36
  4911  0056                     	ds	2
  4912  0058                     readGesture@fifo_level:	
  4913                           
  4914                           ; 1 bytes @ 0x38
  4915  0058                     	ds	1
  4916  0059                     readGesture@i:	
  4917                           
  4918                           ; 2 bytes @ 0x39
  4919  0059                     	ds	2
  4920  005B                     ??_handleGesture:	
  4921                           
  4922                           ; 1 bytes @ 0x3B
  4923  005B                     	ds	1
  4924  005C                     ??_main:	
  4925                           
  4926                           	psect	maintext
  4927  0D63                     __pmaintext:	
  4928                           ; 1 bytes @ 0x3C
  4929 ;;
  4930 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4931 ;;
  4932 ;; *************** function _main *****************
  4933 ;; Defined at:
  4934 ;;		line 90 in file "main.c"
  4935 ;; Parameters:    Size  Location     Type
  4936 ;;		None
  4937 ;; Auto vars:     Size  Location     Type
  4938 ;;  count           2    0        unsigned int 
  4939 ;; Return value:  Size  Location     Type
  4940 ;;                  1    wreg      void 
  4941 ;; Registers used:
  4942 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4943 ;; Tracked objects:
  4944 ;;		On entry : B1F/0
  4945 ;;		On exit  : 0/0
  4946 ;;		Unchanged: 0/0
  4947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4948 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4949 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4951 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4952 ;;Total ram usage:        2 bytes
  4953 ;; Hardware stack levels required when called:   12
  4954 ;; This function calls:
  4955 ;;		_Display_Name
  4956 ;;		_SYSTEM_Initialize
  4957 ;;		_enableGestureSensor
  4958 ;;		_handleGesture
  4959 ;;		_initialize
  4960 ;;		_isGestureAvailable
  4961 ;; This function is called by:
  4962 ;;		Startup code after reset
  4963 ;; This function uses a non-reentrant model
  4964 ;;
  4965                           
  4966                           
  4967                           ;psect for function _main
  4968  0D63                     _main:	
  4969                           
  4970                           ;main.c: 93:     SYSTEM_Initialize();
  4971                           
  4972                           ;incstack = 0
  4973                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4974  0D63  318A  22CF  318D   	fcall	_SYSTEM_Initialize
  4975                           
  4976                           ;main.c: 99:     (INTCONbits.GIE = 1);
  4977  0D66  178B               	bsf	11,7	;volatile
  4978                           
  4979                           ;main.c: 102:     (INTCONbits.PEIE = 1);
  4980  0D67  170B               	bsf	11,6	;volatile
  4981                           
  4982                           ;main.c: 108:     if(initialize()){
  4983  0D68  3184  24BC  318D   	fcall	_initialize
  4984                           
  4985                           ;main.c: 111:     if(enableGestureSensor(0)){
  4986  0D6B  3000               	movlw	0
  4987  0D6C  3186  26C3  318D   	fcall	_enableGestureSensor
  4988                           
  4989                           ;main.c: 113:     Display_Name("reset");
  4990  0D6F  3054               	movlw	low (STR_5| (0+32768))
  4991  0D70  0020               	movlb	0	; select bank0
  4992  0D71  00A5               	movwf	Display_Name@string1
  4993  0D72  3090               	movlw	high (STR_5| (0+32768))
  4994  0D73  00A6               	movwf	Display_Name@string1+1
  4995  0D74  318E  2691  318D   	fcall	_Display_Name
  4996  0D77                     l6507:	
  4997                           
  4998                           ;main.c: 115:     {;main.c: 116:         if(start == 1) {
  4999  0D77  0020               	movlb	0	; select bank0
  5000  0D78  036F               	decf	_start,w
  5001  0D79  1D03               	btfss	3,2
  5002  0D7A  2D89               	goto	l6513
  5003                           
  5004                           ;main.c: 117:             Display_Name(names[name]);
  5005  0D7B  355C               	lslf	_name,w
  5006  0D7C  3E60               	addlw	(low (_names| (0+256)))& (0+255)
  5007  0D7D  0086               	movwf	6
  5008  0D7E  3001               	movlw	1	; select bank2/3
  5009  0D7F  0087               	movwf	7
  5010  0D80  3F40               	moviw [0]fsr1
  5011  0D81  00A5               	movwf	Display_Name@string1
  5012  0D82  3F41               	moviw [1]fsr1
  5013  0D83  00A6               	movwf	Display_Name@string1+1
  5014  0D84  318E  2691  318D   	fcall	_Display_Name
  5015                           
  5016                           ;main.c: 118:             start = 0;
  5017  0D87  0020               	movlb	0	; select bank0
  5018  0D88  01EF               	clrf	_start
  5019  0D89                     l6513:	
  5020                           
  5021                           ;main.c: 120:         if(isGestureAvailable()){
  5022  0D89  318A  22ED  318D   	fcall	_isGestureAvailable
  5023  0D8C  3A00               	xorlw	0
  5024  0D8D  1903               	skipnz
  5025  0D8E  2D77               	goto	l6507
  5026                           
  5027                           ;main.c: 124:             handleGesture();
  5028  0D8F  3187  2727  318D   	fcall	_handleGesture
  5029  0D92  2D77               	goto	l6507
  5030  0D93                     __end_of_main:	
  5031                           
  5032                           	psect	text1
  5033  04BC                     __ptext1:	
  5034 ;; *************** function _initialize *****************
  5035 ;; Defined at:
  5036 ;;		line 20 in file "APDS9960.c"
  5037 ;; Parameters:    Size  Location     Type
  5038 ;;		None
  5039 ;; Auto vars:     Size  Location     Type
  5040 ;;  id              1   17[BANK0 ] unsigned char 
  5041 ;; Return value:  Size  Location     Type
  5042 ;;                  1    wreg      _Bool 
  5043 ;; Registers used:
  5044 ;;		wreg, status,2, status,0, pclath, cstack
  5045 ;; Tracked objects:
  5046 ;;		On entry : 0/0
  5047 ;;		On exit  : 0/0
  5048 ;;		Unchanged: 0/0
  5049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5050 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5051 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5052 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5053 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5054 ;;Total ram usage:        2 bytes
  5055 ;; Hardware stack levels used:    1
  5056 ;; Hardware stack levels required when called:   10
  5057 ;; This function calls:
  5058 ;;		_i2c1_driver_open
  5059 ;;		_setAmbientLightGain
  5060 ;;		_setGestureEnterThresh
  5061 ;;		_setGestureExitThresh
  5062 ;;		_setGestureGain
  5063 ;;		_setGestureIntEnable
  5064 ;;		_setGestureLEDDrive
  5065 ;;		_setGestureWaitTime
  5066 ;;		_setLEDDrive
  5067 ;;		_setLightIntHighThreshold
  5068 ;;		_setLightIntLowThreshold
  5069 ;;		_setMode
  5070 ;;		_setProxIntHighThresh
  5071 ;;		_setProxIntLowThresh
  5072 ;;		_setProximityGain
  5073 ;;		_wireReadDataByte
  5074 ;;		_wireWriteDataByte
  5075 ;; This function is called by:
  5076 ;;		_main
  5077 ;; This function uses a non-reentrant model
  5078 ;;
  5079                           
  5080                           
  5081                           ;psect for function _initialize
  5082  04BC                     _initialize:	
  5083                           
  5084                           ;APDS9960.c: 25:     i2c1_driver_open();
  5085                           
  5086                           ;incstack = 0
  5087                           ; Regs used in _initialize: [wreg+status,2+status,0+pclath+cstack]
  5088  04BC  318A  22AC  3184   	fcall	_i2c1_driver_open
  5089                           
  5090                           ;APDS9960.c: 31:     id = wireReadDataByte(0x92);
  5091  04BF  3092               	movlw	146
  5092  04C0  318C  2400  3184   	fcall	_wireReadDataByte
  5093  04C3  0020               	movlb	0	; select bank0
  5094  04C4  00B0               	movwf	??_initialize
  5095  04C5  0830               	movf	??_initialize,w
  5096  04C6  00B1               	movwf	initialize@id
  5097                           
  5098                           ;APDS9960.c: 33:     if( !(id == 0xAB ||id == 0x9C ) )
  5099  04C7  30AB               	movlw	171
  5100  04C8  0631               	xorwf	initialize@id,w
  5101  04C9  1903               	btfsc	3,2
  5102  04CA  2CD1               	goto	l6197
  5103  04CB  309C               	movlw	156
  5104  04CC  0631               	xorwf	initialize@id,w
  5105  04CD  1903               	btfsc	3,2
  5106  04CE  2CD1               	goto	l6197
  5107  04CF                     l6193:	
  5108                           
  5109                           ;APDS9960.c: 34:     {;APDS9960.c: 35:      return 0;
  5110  04CF  3000               	movlw	0
  5111  04D0  0008               	return
  5112  04D1                     l6197:	
  5113                           
  5114                           ;APDS9960.c: 39:     setMode(7, 0);
  5115  04D1  01AB               	clrf	setMode@enable
  5116  04D2  3007               	movlw	7
  5117  04D3  318F  27B1  3184   	fcall	_setMode
  5118                           
  5119                           ;APDS9960.c: 41:     wireWriteDataByte(0x81, 219);
  5120  04D6  30DB               	movlw	219
  5121  04D7  0020               	movlb	0	; select bank0
  5122  04D8  00B0               	movwf	??_initialize
  5123  04D9  0830               	movf	??_initialize,w
  5124  04DA  00A6               	movwf	wireWriteDataByte@val
  5125  04DB  3081               	movlw	129
  5126  04DC  318B  238F  3184   	fcall	_wireWriteDataByte
  5127                           
  5128                           ;APDS9960.c: 42:     wireWriteDataByte(0x83, 246);
  5129  04DF  30F6               	movlw	246
  5130  04E0  0020               	movlb	0	; select bank0
  5131  04E1  00B0               	movwf	??_initialize
  5132  04E2  0830               	movf	??_initialize,w
  5133  04E3  00A6               	movwf	wireWriteDataByte@val
  5134  04E4  3083               	movlw	131
  5135  04E5  318B  238F  3184   	fcall	_wireWriteDataByte
  5136                           
  5137                           ;APDS9960.c: 43:     wireWriteDataByte(0x8E, 0x87);
  5138  04E8  3087               	movlw	135
  5139  04E9  0020               	movlb	0	; select bank0
  5140  04EA  00B0               	movwf	??_initialize
  5141  04EB  0830               	movf	??_initialize,w
  5142  04EC  00A6               	movwf	wireWriteDataByte@val
  5143  04ED  308E               	movlw	142
  5144  04EE  318B  238F  3184   	fcall	_wireWriteDataByte
  5145                           
  5146                           ;APDS9960.c: 44:     wireWriteDataByte(0x9D, 0) ;
  5147  04F1  0020               	movlb	0	; select bank0
  5148  04F2  01A6               	clrf	wireWriteDataByte@val
  5149  04F3  309D               	movlw	157
  5150  04F4  318B  238F  3184   	fcall	_wireWriteDataByte
  5151                           
  5152                           ;APDS9960.c: 45:     wireWriteDataByte(0x9E, 0) ;
  5153  04F7  0020               	movlb	0	; select bank0
  5154  04F8  01A6               	clrf	wireWriteDataByte@val
  5155  04F9  309E               	movlw	158
  5156  04FA  318B  238F  3184   	fcall	_wireWriteDataByte
  5157                           
  5158                           ;APDS9960.c: 46:     wireWriteDataByte(0x8D, 0x60) ;
  5159  04FD  3060               	movlw	96
  5160  04FE  0020               	movlb	0	; select bank0
  5161  04FF  00B0               	movwf	??_initialize
  5162  0500  0830               	movf	??_initialize,w
  5163  0501  00A6               	movwf	wireWriteDataByte@val
  5164  0502  308D               	movlw	141
  5165  0503  318B  238F  3184   	fcall	_wireWriteDataByte
  5166                           
  5167                           ;APDS9960.c: 47:     setLEDDrive(0);
  5168  0506  3000               	movlw	0
  5169  0507  318C  24E6  3184   	fcall	_setLEDDrive
  5170                           
  5171                           ;APDS9960.c: 48:     setProximityGain(2);
  5172  050A  3002               	movlw	2
  5173  050B  318D  250F  3184   	fcall	_setProximityGain
  5174                           
  5175                           ;APDS9960.c: 49:     setAmbientLightGain(1);
  5176  050E  3001               	movlw	1
  5177  050F  318B  23E2  3184   	fcall	_setAmbientLightGain
  5178                           
  5179                           ;APDS9960.c: 51:     if( !setProxIntLowThresh(0) ) {
  5180  0512  3000               	movlw	0
  5181  0513  318B  2339  3184   	fcall	_setProxIntLowThresh
  5182  0516  3A00               	xorlw	0
  5183  0517  1903               	btfsc	3,2
  5184  0518  2CCF               	goto	l6193
  5185                           
  5186                           ;APDS9960.c: 54:     if( !setProxIntHighThresh(50) ) {
  5187  0519  3032               	movlw	50
  5188  051A  318B  2326  3184   	fcall	_setProxIntHighThresh
  5189  051D  3A00               	xorlw	0
  5190  051E  1903               	btfsc	3,2
  5191  051F  2CCF               	goto	l6193
  5192                           
  5193                           ;APDS9960.c: 59:     if( !setLightIntLowThreshold(0xFFFF) ) {
  5194  0520  30FF               	movlw	255
  5195  0521  0020               	movlb	0	; select bank0
  5196  0522  00AA               	movwf	setLightIntLowThreshold@threshold
  5197  0523  30FF               	movlw	255
  5198  0524  00AB               	movwf	setLightIntLowThreshold@threshold+1
  5199  0525  318C  24BF  3184   	fcall	_setLightIntLowThreshold
  5200  0528  3A00               	xorlw	0
  5201  0529  1903               	btfsc	3,2
  5202  052A  2CCF               	goto	l6193
  5203                           
  5204                           ;APDS9960.c: 62:     if( !setLightIntHighThreshold(0) ) {
  5205  052B  3000               	movlw	0
  5206  052C  0020               	movlb	0	; select bank0
  5207  052D  00AA               	movwf	setLightIntHighThreshold@threshold
  5208  052E  00AB               	movwf	setLightIntHighThreshold@threshold+1
  5209  052F  318C  2498  3184   	fcall	_setLightIntHighThreshold
  5210  0532  3A00               	xorlw	0
  5211  0533  1903               	btfsc	3,2
  5212  0534  2CCF               	goto	l6193
  5213                           
  5214                           ;APDS9960.c: 66:     if( !wireWriteDataByte(0x8C, 0x11) ) {
  5215  0535  3011               	movlw	17
  5216  0536  0020               	movlb	0	; select bank0
  5217  0537  00B0               	movwf	??_initialize
  5218  0538  0830               	movf	??_initialize,w
  5219  0539  00A6               	movwf	wireWriteDataByte@val
  5220  053A  308C               	movlw	140
  5221  053B  318B  238F  3184   	fcall	_wireWriteDataByte
  5222  053E  0020               	movlb	0	; select bank0
  5223  053F  0826               	movf	?_wireWriteDataByte,w
  5224  0540  0427               	iorwf	?_wireWriteDataByte+1,w
  5225  0541  1903               	btfsc	3,2
  5226  0542  2CCF               	goto	l6193
  5227                           
  5228                           ;APDS9960.c: 71:     if( !wireWriteDataByte(0x90, 0x01) ) {
  5229  0543  01A6               	clrf	wireWriteDataByte@val
  5230  0544  0AA6               	incf	wireWriteDataByte@val,f
  5231  0545  3090               	movlw	144
  5232  0546  318B  238F  3184   	fcall	_wireWriteDataByte
  5233  0549  0020               	movlb	0	; select bank0
  5234  054A  0826               	movf	?_wireWriteDataByte,w
  5235  054B  0427               	iorwf	?_wireWriteDataByte+1,w
  5236  054C  1903               	btfsc	3,2
  5237  054D  2CCF               	goto	l6193
  5238                           
  5239                           ;APDS9960.c: 74:     if( !wireWriteDataByte(0x9F, 0) ) {
  5240  054E  01A6               	clrf	wireWriteDataByte@val
  5241  054F  309F               	movlw	159
  5242  0550  318B  238F  3184   	fcall	_wireWriteDataByte
  5243  0553  0020               	movlb	0	; select bank0
  5244  0554  0826               	movf	?_wireWriteDataByte,w
  5245  0555  0427               	iorwf	?_wireWriteDataByte+1,w
  5246  0556  1903               	btfsc	3,2
  5247  0557  2CCF               	goto	l6193
  5248                           
  5249                           ;APDS9960.c: 78:     if( !setGestureEnterThresh(40) ) {
  5250  0558  3028               	movlw	40
  5251  0559  318B  2300  3184   	fcall	_setGestureEnterThresh
  5252  055C  3A00               	xorlw	0
  5253  055D  1903               	btfsc	3,2
  5254  055E  2CCF               	goto	l6193
  5255                           
  5256                           ;APDS9960.c: 82:     if( !setGestureExitThresh(30) ) {
  5257  055F  301E               	movlw	30
  5258  0560  318B  2313  3184   	fcall	_setGestureExitThresh
  5259  0563  3A00               	xorlw	0
  5260  0564  1903               	btfsc	3,2
  5261  0565  2CCF               	goto	l6193
  5262                           
  5263                           ;APDS9960.c: 85:     if( !wireWriteDataByte(0xA2, 0x40) ) {
  5264  0566  3040               	movlw	64
  5265  0567  0020               	movlb	0	; select bank0
  5266  0568  00B0               	movwf	??_initialize
  5267  0569  0830               	movf	??_initialize,w
  5268  056A  00A6               	movwf	wireWriteDataByte@val
  5269  056B  30A2               	movlw	162
  5270  056C  318B  238F  3184   	fcall	_wireWriteDataByte
  5271  056F  0020               	movlb	0	; select bank0
  5272  0570  0826               	movf	?_wireWriteDataByte,w
  5273  0571  0427               	iorwf	?_wireWriteDataByte+1,w
  5274  0572  1903               	btfsc	3,2
  5275  0573  2CCF               	goto	l6193
  5276                           
  5277                           ;APDS9960.c: 88:     if( !setGestureGain(2) ) {
  5278  0574  3002               	movlw	2
  5279  0575  318D  25F6  3184   	fcall	_setGestureGain
  5280  0578  3A00               	xorlw	0
  5281  0579  1903               	btfsc	3,2
  5282  057A  2CCF               	goto	l6193
  5283                           
  5284                           ;APDS9960.c: 91:     if( !setGestureLEDDrive(0) ) {
  5285  057B  3000               	movlw	0
  5286  057C  318E  2628  3184   	fcall	_setGestureLEDDrive
  5287  057F  3A00               	xorlw	0
  5288  0580  1903               	btfsc	3,2
  5289  0581  2CCF               	goto	l6193
  5290                           
  5291                           ;APDS9960.c: 95:     if( !setGestureWaitTime(1) ) {
  5292  0582  3001               	movlw	1
  5293  0583  318C  2471  3184   	fcall	_setGestureWaitTime
  5294  0586  3A00               	xorlw	0
  5295  0587  1903               	btfsc	3,2
  5296  0588  2CCF               	goto	l6193
  5297                           
  5298                           ;APDS9960.c: 98:     if( !wireWriteDataByte(0xA4, 0) ) {
  5299  0589  0020               	movlb	0	; select bank0
  5300  058A  01A6               	clrf	wireWriteDataByte@val
  5301  058B  30A4               	movlw	164
  5302  058C  318B  238F  3184   	fcall	_wireWriteDataByte
  5303  058F  0020               	movlb	0	; select bank0
  5304  0590  0826               	movf	?_wireWriteDataByte,w
  5305  0591  0427               	iorwf	?_wireWriteDataByte+1,w
  5306  0592  1903               	btfsc	3,2
  5307  0593  2CCF               	goto	l6193
  5308                           
  5309                           ;APDS9960.c: 101:     if( !wireWriteDataByte(0xA5, 0) ) {
  5310  0594  01A6               	clrf	wireWriteDataByte@val
  5311  0595  30A5               	movlw	165
  5312  0596  318B  238F  3184   	fcall	_wireWriteDataByte
  5313  0599  0020               	movlb	0	; select bank0
  5314  059A  0826               	movf	?_wireWriteDataByte,w
  5315  059B  0427               	iorwf	?_wireWriteDataByte+1,w
  5316  059C  1903               	btfsc	3,2
  5317  059D  2CCF               	goto	l6193
  5318                           
  5319                           ;APDS9960.c: 104:     if( !wireWriteDataByte(0xA7, 0) ) {
  5320  059E  01A6               	clrf	wireWriteDataByte@val
  5321  059F  30A7               	movlw	167
  5322  05A0  318B  238F  3184   	fcall	_wireWriteDataByte
  5323  05A3  0020               	movlb	0	; select bank0
  5324  05A4  0826               	movf	?_wireWriteDataByte,w
  5325  05A5  0427               	iorwf	?_wireWriteDataByte+1,w
  5326  05A6  1903               	btfsc	3,2
  5327  05A7  2CCF               	goto	l6193
  5328                           
  5329                           ;APDS9960.c: 107:     if( !wireWriteDataByte(0xA9, 0) ) {
  5330  05A8  01A6               	clrf	wireWriteDataByte@val
  5331  05A9  30A9               	movlw	169
  5332  05AA  318B  238F  3184   	fcall	_wireWriteDataByte
  5333  05AD  0020               	movlb	0	; select bank0
  5334  05AE  0826               	movf	?_wireWriteDataByte,w
  5335  05AF  0427               	iorwf	?_wireWriteDataByte+1,w
  5336  05B0  1903               	btfsc	3,2
  5337  05B1  2CCF               	goto	l6193
  5338                           
  5339                           ;APDS9960.c: 110:     if( !wireWriteDataByte(0xA6, 0xC9) ) {
  5340  05B2  30C9               	movlw	201
  5341  05B3  00B0               	movwf	??_initialize
  5342  05B4  0830               	movf	??_initialize,w
  5343  05B5  00A6               	movwf	wireWriteDataByte@val
  5344  05B6  30A6               	movlw	166
  5345  05B7  318B  238F  3184   	fcall	_wireWriteDataByte
  5346  05BA  0020               	movlb	0	; select bank0
  5347  05BB  0826               	movf	?_wireWriteDataByte,w
  5348  05BC  0427               	iorwf	?_wireWriteDataByte+1,w
  5349  05BD  1903               	btfsc	3,2
  5350  05BE  2CCF               	goto	l6193
  5351                           
  5352                           ;APDS9960.c: 113:     if( !wireWriteDataByte(0xAA, 0) ) {
  5353  05BF  01A6               	clrf	wireWriteDataByte@val
  5354  05C0  30AA               	movlw	170
  5355  05C1  318B  238F  3184   	fcall	_wireWriteDataByte
  5356  05C4  0020               	movlb	0	; select bank0
  5357  05C5  0826               	movf	?_wireWriteDataByte,w
  5358  05C6  0427               	iorwf	?_wireWriteDataByte+1,w
  5359  05C7  1903               	btfsc	3,2
  5360  05C8  2CCF               	goto	l6193
  5361                           
  5362                           ;APDS9960.c: 116:     if( !setGestureIntEnable(0) ) {
  5363  05C9  3000               	movlw	0
  5364  05CA  3187  27D3  3184   	fcall	_setGestureIntEnable
  5365  05CD  3A00               	xorlw	0
  5366  05CE  1903               	btfsc	3,2
  5367  05CF  2CCF               	goto	l6193
  5368                           
  5369                           ;APDS9960.c: 120:     return 1;
  5370  05D0  3001               	movlw	1
  5371  05D1  0008               	return
  5372  05D2                     __end_of_initialize:	
  5373                           
  5374                           	psect	text2
  5375  0D0F                     __ptext2:	
  5376 ;; *************** function _setProximityGain *****************
  5377 ;; Defined at:
  5378 ;;		line 192 in file "APDS9960.c"
  5379 ;; Parameters:    Size  Location     Type
  5380 ;;  drive           1    wreg     unsigned char 
  5381 ;; Auto vars:     Size  Location     Type
  5382 ;;  drive           1   13[BANK0 ] unsigned char 
  5383 ;;  val             1   12[BANK0 ] unsigned char 
  5384 ;; Return value:  Size  Location     Type
  5385 ;;                  1    wreg      _Bool 
  5386 ;; Registers used:
  5387 ;;		wreg, status,2, status,0, pclath, cstack
  5388 ;; Tracked objects:
  5389 ;;		On entry : 0/0
  5390 ;;		On exit  : 0/0
  5391 ;;		Unchanged: 0/0
  5392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5394 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5395 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5396 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5397 ;;Total ram usage:        4 bytes
  5398 ;; Hardware stack levels used:    1
  5399 ;; Hardware stack levels required when called:    8
  5400 ;; This function calls:
  5401 ;;		_wireReadDataByte
  5402 ;;		_wireWriteDataByte
  5403 ;; This function is called by:
  5404 ;;		_initialize
  5405 ;; This function uses a non-reentrant model
  5406 ;;
  5407                           
  5408                           
  5409                           ;psect for function _setProximityGain
  5410  0D0F                     _setProximityGain:	
  5411                           
  5412                           ;incstack = 0
  5413                           ; Regs used in _setProximityGain: [wreg+status,2+status,0+pclath+cstack]
  5414                           ;setProximityGain@drive stored from wreg
  5415  0D0F  0020               	movlb	0	; select bank0
  5416  0D10  00AD               	movwf	setProximityGain@drive
  5417                           
  5418                           ;APDS9960.c: 192: _Bool setProximityGain(uint8_t drive);APDS9960.c: 193: {;APDS9960.c: 1
      +                          94:     uint8_t val;;APDS9960.c: 197:     val=wireReadDataByte(0x8F);
  5419  0D11  308F               	movlw	143
  5420  0D12  318C  2400  318D   	fcall	_wireReadDataByte
  5421  0D15  0020               	movlb	0	; select bank0
  5422  0D16  00AA               	movwf	??_setProximityGain
  5423  0D17  082A               	movf	??_setProximityGain,w
  5424  0D18  00AC               	movwf	setProximityGain@val
  5425                           
  5426                           ;APDS9960.c: 199:     drive &= 0b00000011;
  5427  0D19  3003               	movlw	3
  5428  0D1A  00AA               	movwf	??_setProximityGain
  5429  0D1B  082A               	movf	??_setProximityGain,w
  5430  0D1C  05AD               	andwf	setProximityGain@drive,f
  5431                           
  5432                           ;APDS9960.c: 200:     drive = drive << 2;
  5433  0D1D  082D               	movf	setProximityGain@drive,w
  5434  0D1E  00AA               	movwf	??_setProximityGain
  5435  0D1F  3001               	movlw	1
  5436  0D20                     u5155:	
  5437  0D20  35AA               	lslf	??_setProximityGain,f
  5438  0D21  3EFF               	addlw	-1
  5439  0D22  1D03               	skipz
  5440  0D23  2D20               	goto	u5155
  5441  0D24  352A               	lslf	??_setProximityGain,w
  5442  0D25  00AB               	movwf	??_setProximityGain+1
  5443  0D26  082B               	movf	??_setProximityGain+1,w
  5444  0D27  00AD               	movwf	setProximityGain@drive
  5445                           
  5446                           ;APDS9960.c: 201:     val &= 0b11110011;
  5447  0D28  30F3               	movlw	243
  5448  0D29  00AA               	movwf	??_setProximityGain
  5449  0D2A  082A               	movf	??_setProximityGain,w
  5450  0D2B  05AC               	andwf	setProximityGain@val,f
  5451                           
  5452                           ;APDS9960.c: 202:     val |= drive;
  5453  0D2C  082D               	movf	setProximityGain@drive,w
  5454  0D2D  00AA               	movwf	??_setProximityGain
  5455  0D2E  082A               	movf	??_setProximityGain,w
  5456  0D2F  04AC               	iorwf	setProximityGain@val,f
  5457                           
  5458                           ;APDS9960.c: 205:     if( !wireWriteDataByte(0x8F, val) ) {
  5459  0D30  082C               	movf	setProximityGain@val,w
  5460  0D31  00AA               	movwf	??_setProximityGain
  5461  0D32  082A               	movf	??_setProximityGain,w
  5462  0D33  00A6               	movwf	wireWriteDataByte@val
  5463  0D34  308F               	movlw	143
  5464  0D35  318B  238F         	fcall	_wireWriteDataByte
  5465  0D37  0008               	return
  5466  0D38                     __end_of_setProximityGain:	
  5467                           
  5468                           	psect	text3
  5469  0B39                     __ptext3:	
  5470 ;; *************** function _setProxIntLowThresh *****************
  5471 ;; Defined at:
  5472 ;;		line 234 in file "APDS9960.c"
  5473 ;; Parameters:    Size  Location     Type
  5474 ;;  threshold       1    wreg     unsigned char 
  5475 ;; Auto vars:     Size  Location     Type
  5476 ;;  threshold       1   11[BANK0 ] unsigned char 
  5477 ;; Return value:  Size  Location     Type
  5478 ;;                  1    wreg      _Bool 
  5479 ;; Registers used:
  5480 ;;		wreg, status,2, status,0, pclath, cstack
  5481 ;; Tracked objects:
  5482 ;;		On entry : 0/0
  5483 ;;		On exit  : 0/0
  5484 ;;		Unchanged: 0/0
  5485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5487 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5488 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5489 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5490 ;;Total ram usage:        2 bytes
  5491 ;; Hardware stack levels used:    1
  5492 ;; Hardware stack levels required when called:    8
  5493 ;; This function calls:
  5494 ;;		_wireWriteDataByte
  5495 ;; This function is called by:
  5496 ;;		_initialize
  5497 ;; This function uses a non-reentrant model
  5498 ;;
  5499                           
  5500                           
  5501                           ;psect for function _setProxIntLowThresh
  5502  0B39                     _setProxIntLowThresh:	
  5503                           
  5504                           ;incstack = 0
  5505                           ; Regs used in _setProxIntLowThresh: [wreg+status,2+status,0+pclath+cstack]
  5506                           ;setProxIntLowThresh@threshold stored from wreg
  5507  0B39  0020               	movlb	0	; select bank0
  5508  0B3A  00AB               	movwf	setProxIntLowThresh@threshold
  5509                           
  5510                           ;APDS9960.c: 234: _Bool setProxIntLowThresh(uint8_t threshold);APDS9960.c: 235: {;APDS99
      +                          60.c: 236:     if( !wireWriteDataByte(0x89, threshold) ) {
  5511  0B3B  082B               	movf	setProxIntLowThresh@threshold,w
  5512  0B3C  00AA               	movwf	??_setProxIntLowThresh
  5513  0B3D  082A               	movf	??_setProxIntLowThresh,w
  5514  0B3E  00A6               	movwf	wireWriteDataByte@val
  5515  0B3F  3089               	movlw	137
  5516  0B40  318B  238F  318B   	fcall	_wireWriteDataByte
  5517  0B43  0020               	movlb	0	; select bank0
  5518  0B44  0826               	movf	?_wireWriteDataByte,w
  5519  0B45  0427               	iorwf	?_wireWriteDataByte+1,w
  5520  0B46  1D03               	btfss	3,2
  5521  0B47  2B4A               	goto	l5961
  5522                           
  5523                           ;APDS9960.c: 237:         return 0;
  5524  0B48  3000               	movlw	0
  5525  0B49  0008               	return
  5526  0B4A                     l5961:	
  5527                           
  5528                           ;APDS9960.c: 240:     return 1;
  5529  0B4A  3001               	movlw	1
  5530  0B4B  0008               	return
  5531  0B4C                     __end_of_setProxIntLowThresh:	
  5532                           
  5533                           	psect	text4
  5534  0B26                     __ptext4:	
  5535 ;; *************** function _setProxIntHighThresh *****************
  5536 ;; Defined at:
  5537 ;;		line 244 in file "APDS9960.c"
  5538 ;; Parameters:    Size  Location     Type
  5539 ;;  threshold       1    wreg     unsigned char 
  5540 ;; Auto vars:     Size  Location     Type
  5541 ;;  threshold       1   11[BANK0 ] unsigned char 
  5542 ;; Return value:  Size  Location     Type
  5543 ;;                  1    wreg      _Bool 
  5544 ;; Registers used:
  5545 ;;		wreg, status,2, status,0, pclath, cstack
  5546 ;; Tracked objects:
  5547 ;;		On entry : 0/0
  5548 ;;		On exit  : 0/0
  5549 ;;		Unchanged: 0/0
  5550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5551 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5552 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5553 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5554 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5555 ;;Total ram usage:        2 bytes
  5556 ;; Hardware stack levels used:    1
  5557 ;; Hardware stack levels required when called:    8
  5558 ;; This function calls:
  5559 ;;		_wireWriteDataByte
  5560 ;; This function is called by:
  5561 ;;		_initialize
  5562 ;; This function uses a non-reentrant model
  5563 ;;
  5564                           
  5565                           
  5566                           ;psect for function _setProxIntHighThresh
  5567  0B26                     _setProxIntHighThresh:	
  5568                           
  5569                           ;incstack = 0
  5570                           ; Regs used in _setProxIntHighThresh: [wreg+status,2+status,0+pclath+cstack]
  5571                           ;setProxIntHighThresh@threshold stored from wreg
  5572  0B26  0020               	movlb	0	; select bank0
  5573  0B27  00AB               	movwf	setProxIntHighThresh@threshold
  5574                           
  5575                           ;APDS9960.c: 244: _Bool setProxIntHighThresh(uint8_t threshold);APDS9960.c: 245: {;APDS9
      +                          960.c: 246:     if( !wireWriteDataByte(0x8B, threshold) ) {
  5576  0B28  082B               	movf	setProxIntHighThresh@threshold,w
  5577  0B29  00AA               	movwf	??_setProxIntHighThresh
  5578  0B2A  082A               	movf	??_setProxIntHighThresh,w
  5579  0B2B  00A6               	movwf	wireWriteDataByte@val
  5580  0B2C  308B               	movlw	139
  5581  0B2D  318B  238F  318B   	fcall	_wireWriteDataByte
  5582  0B30  0020               	movlb	0	; select bank0
  5583  0B31  0826               	movf	?_wireWriteDataByte,w
  5584  0B32  0427               	iorwf	?_wireWriteDataByte+1,w
  5585  0B33  1D03               	btfss	3,2
  5586  0B34  2B37               	goto	l5971
  5587                           
  5588                           ;APDS9960.c: 247:         return 0;
  5589  0B35  3000               	movlw	0
  5590  0B36  0008               	return
  5591  0B37                     l5971:	
  5592                           
  5593                           ;APDS9960.c: 250:     return 1;
  5594  0B37  3001               	movlw	1
  5595  0B38  0008               	return
  5596  0B39                     __end_of_setProxIntHighThresh:	
  5597                           
  5598                           	psect	text5
  5599  0CBF                     __ptext5:	
  5600 ;; *************** function _setLightIntLowThreshold *****************
  5601 ;; Defined at:
  5602 ;;		line 254 in file "APDS9960.c"
  5603 ;; Parameters:    Size  Location     Type
  5604 ;;  threshold       2   10[BANK0 ] unsigned short 
  5605 ;; Auto vars:     Size  Location     Type
  5606 ;;  val_high        1   14[BANK0 ] unsigned char 
  5607 ;;  val_low         1   13[BANK0 ] unsigned char 
  5608 ;; Return value:  Size  Location     Type
  5609 ;;                  1    wreg      _Bool 
  5610 ;; Registers used:
  5611 ;;		wreg, status,2, status,0, pclath, cstack
  5612 ;; Tracked objects:
  5613 ;;		On entry : 0/0
  5614 ;;		On exit  : 0/0
  5615 ;;		Unchanged: 0/0
  5616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5617 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5618 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5619 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5620 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5621 ;;Total ram usage:        5 bytes
  5622 ;; Hardware stack levels used:    1
  5623 ;; Hardware stack levels required when called:    8
  5624 ;; This function calls:
  5625 ;;		_wireWriteDataByte
  5626 ;; This function is called by:
  5627 ;;		_initialize
  5628 ;; This function uses a non-reentrant model
  5629 ;;
  5630                           
  5631                           
  5632                           ;psect for function _setLightIntLowThreshold
  5633  0CBF                     _setLightIntLowThreshold:	
  5634                           
  5635                           ;APDS9960.c: 254: _Bool setLightIntLowThreshold(uint16_t threshold);APDS9960.c: 255: {;A
      +                          PDS9960.c: 256:     uint8_t val_low;;APDS9960.c: 257:     uint8_t val_high;;APDS9960.c: 
      +                          260:     val_low = threshold & 0x00FF;
  5636                           
  5637                           ;incstack = 0
  5638                           ; Regs used in _setLightIntLowThreshold: [wreg+status,2+status,0+pclath+cstack]
  5639  0CBF  0020               	movlb	0	; select bank0
  5640  0CC0  082A               	movf	setLightIntLowThreshold@threshold,w
  5641  0CC1  00AC               	movwf	??_setLightIntLowThreshold
  5642  0CC2  082C               	movf	??_setLightIntLowThreshold,w
  5643  0CC3  00AD               	movwf	setLightIntLowThreshold@val_low
  5644                           
  5645                           ;APDS9960.c: 261:     val_high = (threshold & 0xFF00) >> 8;
  5646  0CC4  082B               	movf	setLightIntLowThreshold@threshold+1,w
  5647  0CC5  00AC               	movwf	??_setLightIntLowThreshold
  5648  0CC6  082C               	movf	??_setLightIntLowThreshold,w
  5649  0CC7  00AE               	movwf	setLightIntLowThreshold@val_high
  5650                           
  5651                           ;APDS9960.c: 264:     if( !wireWriteDataByte(0x84, val_low) ) {
  5652  0CC8  082D               	movf	setLightIntLowThreshold@val_low,w
  5653  0CC9  00AC               	movwf	??_setLightIntLowThreshold
  5654  0CCA  082C               	movf	??_setLightIntLowThreshold,w
  5655  0CCB  00A6               	movwf	wireWriteDataByte@val
  5656  0CCC  3084               	movlw	132
  5657  0CCD  318B  238F  318C   	fcall	_wireWriteDataByte
  5658  0CD0  0020               	movlb	0	; select bank0
  5659  0CD1  0826               	movf	?_wireWriteDataByte,w
  5660  0CD2  0427               	iorwf	?_wireWriteDataByte+1,w
  5661  0CD3  1D03               	btfss	3,2
  5662  0CD4  2CD7               	goto	l5985
  5663  0CD5                     l5981:	
  5664                           
  5665                           ;APDS9960.c: 265:         return 0;
  5666  0CD5  3000               	movlw	0
  5667  0CD6  0008               	return
  5668  0CD7                     l5985:	
  5669                           
  5670                           ;APDS9960.c: 269:     if( !wireWriteDataByte(0x85, val_high) ) {
  5671  0CD7  082E               	movf	setLightIntLowThreshold@val_high,w
  5672  0CD8  00AC               	movwf	??_setLightIntLowThreshold
  5673  0CD9  082C               	movf	??_setLightIntLowThreshold,w
  5674  0CDA  00A6               	movwf	wireWriteDataByte@val
  5675  0CDB  3085               	movlw	133
  5676  0CDC  318B  238F  318C   	fcall	_wireWriteDataByte
  5677  0CDF  0020               	movlb	0	; select bank0
  5678  0CE0  0826               	movf	?_wireWriteDataByte,w
  5679  0CE1  0427               	iorwf	?_wireWriteDataByte+1,w
  5680  0CE2  1903               	btfsc	3,2
  5681  0CE3  2CD5               	goto	l5981
  5682                           
  5683                           ;APDS9960.c: 273:     return 1;
  5684  0CE4  3001               	movlw	1
  5685  0CE5  0008               	return
  5686  0CE6                     __end_of_setLightIntLowThreshold:	
  5687                           
  5688                           	psect	text6
  5689  0C98                     __ptext6:	
  5690 ;; *************** function _setLightIntHighThreshold *****************
  5691 ;; Defined at:
  5692 ;;		line 277 in file "APDS9960.c"
  5693 ;; Parameters:    Size  Location     Type
  5694 ;;  threshold       2   10[BANK0 ] unsigned short 
  5695 ;; Auto vars:     Size  Location     Type
  5696 ;;  val_high        1   14[BANK0 ] unsigned char 
  5697 ;;  val_low         1   13[BANK0 ] unsigned char 
  5698 ;; Return value:  Size  Location     Type
  5699 ;;                  1    wreg      _Bool 
  5700 ;; Registers used:
  5701 ;;		wreg, status,2, status,0, pclath, cstack
  5702 ;; Tracked objects:
  5703 ;;		On entry : 0/0
  5704 ;;		On exit  : 0/0
  5705 ;;		Unchanged: 0/0
  5706 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5707 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5708 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5709 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5710 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5711 ;;Total ram usage:        5 bytes
  5712 ;; Hardware stack levels used:    1
  5713 ;; Hardware stack levels required when called:    8
  5714 ;; This function calls:
  5715 ;;		_wireWriteDataByte
  5716 ;; This function is called by:
  5717 ;;		_initialize
  5718 ;; This function uses a non-reentrant model
  5719 ;;
  5720                           
  5721                           
  5722                           ;psect for function _setLightIntHighThreshold
  5723  0C98                     _setLightIntHighThreshold:	
  5724                           
  5725                           ;APDS9960.c: 277: _Bool setLightIntHighThreshold(uint16_t threshold);APDS9960.c: 278: {;
      +                          APDS9960.c: 279:     uint8_t val_low;;APDS9960.c: 280:     uint8_t val_high;;APDS9960.c:
      +                           283:     val_low = threshold & 0x00FF;
  5726                           
  5727                           ;incstack = 0
  5728                           ; Regs used in _setLightIntHighThreshold: [wreg+status,2+status,0+pclath+cstack]
  5729  0C98  0020               	movlb	0	; select bank0
  5730  0C99  082A               	movf	setLightIntHighThreshold@threshold,w
  5731  0C9A  00AC               	movwf	??_setLightIntHighThreshold
  5732  0C9B  082C               	movf	??_setLightIntHighThreshold,w
  5733  0C9C  00AD               	movwf	setLightIntHighThreshold@val_low
  5734                           
  5735                           ;APDS9960.c: 284:     val_high = (threshold & 0xFF00) >> 8;
  5736  0C9D  082B               	movf	setLightIntHighThreshold@threshold+1,w
  5737  0C9E  00AC               	movwf	??_setLightIntHighThreshold
  5738  0C9F  082C               	movf	??_setLightIntHighThreshold,w
  5739  0CA0  00AE               	movwf	setLightIntHighThreshold@val_high
  5740                           
  5741                           ;APDS9960.c: 287:     if( !wireWriteDataByte(0x86, val_low) ) {
  5742  0CA1  082D               	movf	setLightIntHighThreshold@val_low,w
  5743  0CA2  00AC               	movwf	??_setLightIntHighThreshold
  5744  0CA3  082C               	movf	??_setLightIntHighThreshold,w
  5745  0CA4  00A6               	movwf	wireWriteDataByte@val
  5746  0CA5  3086               	movlw	134
  5747  0CA6  318B  238F  318C   	fcall	_wireWriteDataByte
  5748  0CA9  0020               	movlb	0	; select bank0
  5749  0CAA  0826               	movf	?_wireWriteDataByte,w
  5750  0CAB  0427               	iorwf	?_wireWriteDataByte+1,w
  5751  0CAC  1D03               	btfss	3,2
  5752  0CAD  2CB0               	goto	l6005
  5753  0CAE                     l6001:	
  5754                           
  5755                           ;APDS9960.c: 288:         return 0;
  5756  0CAE  3000               	movlw	0
  5757  0CAF  0008               	return
  5758  0CB0                     l6005:	
  5759                           
  5760                           ;APDS9960.c: 292:     if( !wireWriteDataByte(0x87, val_high) ) {
  5761  0CB0  082E               	movf	setLightIntHighThreshold@val_high,w
  5762  0CB1  00AC               	movwf	??_setLightIntHighThreshold
  5763  0CB2  082C               	movf	??_setLightIntHighThreshold,w
  5764  0CB3  00A6               	movwf	wireWriteDataByte@val
  5765  0CB4  3087               	movlw	135
  5766  0CB5  318B  238F  318C   	fcall	_wireWriteDataByte
  5767  0CB8  0020               	movlb	0	; select bank0
  5768  0CB9  0826               	movf	?_wireWriteDataByte,w
  5769  0CBA  0427               	iorwf	?_wireWriteDataByte+1,w
  5770  0CBB  1903               	btfsc	3,2
  5771  0CBC  2CAE               	goto	l6001
  5772                           
  5773                           ;APDS9960.c: 296:     return 1;
  5774  0CBD  3001               	movlw	1
  5775  0CBE  0008               	return
  5776  0CBF                     __end_of_setLightIntHighThreshold:	
  5777                           
  5778                           	psect	text7
  5779  0CE6                     __ptext7:	
  5780 ;; *************** function _setLEDDrive *****************
  5781 ;; Defined at:
  5782 ;;		line 170 in file "APDS9960.c"
  5783 ;; Parameters:    Size  Location     Type
  5784 ;;  drive           1    wreg     unsigned char 
  5785 ;; Auto vars:     Size  Location     Type
  5786 ;;  drive           1   13[BANK0 ] unsigned char 
  5787 ;;  val             1   12[BANK0 ] unsigned char 
  5788 ;; Return value:  Size  Location     Type
  5789 ;;                  1    wreg      _Bool 
  5790 ;; Registers used:
  5791 ;;		wreg, status,2, status,0, pclath, cstack
  5792 ;; Tracked objects:
  5793 ;;		On entry : 0/0
  5794 ;;		On exit  : 0/0
  5795 ;;		Unchanged: 0/0
  5796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5798 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5799 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5800 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5801 ;;Total ram usage:        4 bytes
  5802 ;; Hardware stack levels used:    1
  5803 ;; Hardware stack levels required when called:    8
  5804 ;; This function calls:
  5805 ;;		_wireReadDataByte
  5806 ;;		_wireWriteDataByte
  5807 ;; This function is called by:
  5808 ;;		_initialize
  5809 ;; This function uses a non-reentrant model
  5810 ;;
  5811                           
  5812                           
  5813                           ;psect for function _setLEDDrive
  5814  0CE6                     _setLEDDrive:	
  5815                           
  5816                           ;incstack = 0
  5817                           ; Regs used in _setLEDDrive: [wreg+status,2+status,0+pclath+cstack]
  5818                           ;setLEDDrive@drive stored from wreg
  5819  0CE6  0020               	movlb	0	; select bank0
  5820  0CE7  00AD               	movwf	setLEDDrive@drive
  5821                           
  5822                           ;APDS9960.c: 170: _Bool setLEDDrive(uint8_t drive);APDS9960.c: 171: {;APDS9960.c: 172:  
      +                             uint8_t val;;APDS9960.c: 175:     val=wireReadDataByte(0x8F);
  5823  0CE8  308F               	movlw	143
  5824  0CE9  318C  2400  318C   	fcall	_wireReadDataByte
  5825  0CEC  0020               	movlb	0	; select bank0
  5826  0CED  00AA               	movwf	??_setLEDDrive
  5827  0CEE  082A               	movf	??_setLEDDrive,w
  5828  0CEF  00AC               	movwf	setLEDDrive@val
  5829                           
  5830                           ;APDS9960.c: 178:     drive &= 0b00000011;
  5831  0CF0  3003               	movlw	3
  5832  0CF1  00AA               	movwf	??_setLEDDrive
  5833  0CF2  082A               	movf	??_setLEDDrive,w
  5834  0CF3  05AD               	andwf	setLEDDrive@drive,f
  5835                           
  5836                           ;APDS9960.c: 179:     drive = drive << 6;
  5837  0CF4  082D               	movf	setLEDDrive@drive,w
  5838  0CF5  00AA               	movwf	??_setLEDDrive
  5839  0CF6  3005               	movlw	5
  5840  0CF7                     u5145:	
  5841  0CF7  35AA               	lslf	??_setLEDDrive,f
  5842  0CF8  3EFF               	addlw	-1
  5843  0CF9  1D03               	skipz
  5844  0CFA  2CF7               	goto	u5145
  5845  0CFB  352A               	lslf	??_setLEDDrive,w
  5846  0CFC  00AB               	movwf	??_setLEDDrive+1
  5847  0CFD  082B               	movf	??_setLEDDrive+1,w
  5848  0CFE  00AD               	movwf	setLEDDrive@drive
  5849                           
  5850                           ;APDS9960.c: 180:     val &= 0b00111111;
  5851  0CFF  303F               	movlw	63
  5852  0D00  00AA               	movwf	??_setLEDDrive
  5853  0D01  082A               	movf	??_setLEDDrive,w
  5854  0D02  05AC               	andwf	setLEDDrive@val,f
  5855                           
  5856                           ;APDS9960.c: 181:     val |= drive;
  5857  0D03  082D               	movf	setLEDDrive@drive,w
  5858  0D04  00AA               	movwf	??_setLEDDrive
  5859  0D05  082A               	movf	??_setLEDDrive,w
  5860  0D06  04AC               	iorwf	setLEDDrive@val,f
  5861                           
  5862                           ;APDS9960.c: 184:     if( !wireWriteDataByte(0x8F, val) ) {
  5863  0D07  082C               	movf	setLEDDrive@val,w
  5864  0D08  00AA               	movwf	??_setLEDDrive
  5865  0D09  082A               	movf	??_setLEDDrive,w
  5866  0D0A  00A6               	movwf	wireWriteDataByte@val
  5867  0D0B  308F               	movlw	143
  5868  0D0C  318B  238F         	fcall	_wireWriteDataByte
  5869  0D0E  0008               	return
  5870  0D0F                     __end_of_setLEDDrive:	
  5871                           
  5872                           	psect	text8
  5873  0C71                     __ptext8:	
  5874 ;; *************** function _setGestureWaitTime *****************
  5875 ;; Defined at:
  5876 ;;		line 366 in file "APDS9960.c"
  5877 ;; Parameters:    Size  Location     Type
  5878 ;;  time            1    wreg     unsigned char 
  5879 ;; Auto vars:     Size  Location     Type
  5880 ;;  time            1   11[BANK0 ] unsigned char 
  5881 ;;  val             1   12[BANK0 ] unsigned char 
  5882 ;; Return value:  Size  Location     Type
  5883 ;;                  1    wreg      _Bool 
  5884 ;; Registers used:
  5885 ;;		wreg, status,2, status,0, pclath, cstack
  5886 ;; Tracked objects:
  5887 ;;		On entry : 0/0
  5888 ;;		On exit  : 0/0
  5889 ;;		Unchanged: 0/0
  5890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5891 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5892 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5893 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5894 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5895 ;;Total ram usage:        3 bytes
  5896 ;; Hardware stack levels used:    1
  5897 ;; Hardware stack levels required when called:    8
  5898 ;; This function calls:
  5899 ;;		_wireReadDataByte
  5900 ;;		_wireWriteDataByte
  5901 ;; This function is called by:
  5902 ;;		_initialize
  5903 ;; This function uses a non-reentrant model
  5904 ;;
  5905                           
  5906                           
  5907                           ;psect for function _setGestureWaitTime
  5908  0C71                     _setGestureWaitTime:	
  5909                           
  5910                           ;incstack = 0
  5911                           ; Regs used in _setGestureWaitTime: [wreg+status,2+status,0+pclath+cstack]
  5912                           ;setGestureWaitTime@time stored from wreg
  5913  0C71  0020               	movlb	0	; select bank0
  5914  0C72  00AB               	movwf	setGestureWaitTime@time
  5915                           
  5916                           ;APDS9960.c: 366: _Bool setGestureWaitTime(uint8_t time);APDS9960.c: 367: {;APDS9960.c: 
      +                          368:     uint8_t val;;APDS9960.c: 371:     val = wireReadDataByte(0xA3);
  5917  0C73  30A3               	movlw	163
  5918  0C74  318C  2400  318C   	fcall	_wireReadDataByte
  5919  0C77  0020               	movlb	0	; select bank0
  5920  0C78  00AA               	movwf	??_setGestureWaitTime
  5921  0C79  082A               	movf	??_setGestureWaitTime,w
  5922  0C7A  00AC               	movwf	setGestureWaitTime@val
  5923                           
  5924                           ;APDS9960.c: 374:     time &= 0b00000111;
  5925  0C7B  3007               	movlw	7
  5926  0C7C  00AA               	movwf	??_setGestureWaitTime
  5927  0C7D  082A               	movf	??_setGestureWaitTime,w
  5928  0C7E  05AB               	andwf	setGestureWaitTime@time,f
  5929                           
  5930                           ;APDS9960.c: 375:     val &= 0b11111000;
  5931  0C7F  30F8               	movlw	248
  5932  0C80  00AA               	movwf	??_setGestureWaitTime
  5933  0C81  082A               	movf	??_setGestureWaitTime,w
  5934  0C82  05AC               	andwf	setGestureWaitTime@val,f
  5935                           
  5936                           ;APDS9960.c: 376:     val |= time;
  5937  0C83  082B               	movf	setGestureWaitTime@time,w
  5938  0C84  00AA               	movwf	??_setGestureWaitTime
  5939  0C85  082A               	movf	??_setGestureWaitTime,w
  5940  0C86  04AC               	iorwf	setGestureWaitTime@val,f
  5941                           
  5942                           ;APDS9960.c: 379:     if( !wireWriteDataByte(0xA3, val) ) {
  5943  0C87  082C               	movf	setGestureWaitTime@val,w
  5944  0C88  00AA               	movwf	??_setGestureWaitTime
  5945  0C89  082A               	movf	??_setGestureWaitTime,w
  5946  0C8A  00A6               	movwf	wireWriteDataByte@val
  5947  0C8B  30A3               	movlw	163
  5948  0C8C  318B  238F  318C   	fcall	_wireWriteDataByte
  5949  0C8F  0020               	movlb	0	; select bank0
  5950  0C90  0826               	movf	?_wireWriteDataByte,w
  5951  0C91  0427               	iorwf	?_wireWriteDataByte+1,w
  5952  0C92  1D03               	btfss	3,2
  5953  0C93  2C96               	goto	l6085
  5954                           
  5955                           ;APDS9960.c: 380:         return 0;
  5956  0C94  3000               	movlw	0
  5957  0C95  0008               	return
  5958  0C96                     l6085:	
  5959                           
  5960                           ;APDS9960.c: 383:     return 1;
  5961  0C96  3001               	movlw	1
  5962  0C97  0008               	return
  5963  0C98                     __end_of_setGestureWaitTime:	
  5964                           
  5965                           	psect	text9
  5966  0E28                     __ptext9:	
  5967 ;; *************** function _setGestureLEDDrive *****************
  5968 ;; Defined at:
  5969 ;;		line 343 in file "APDS9960.c"
  5970 ;; Parameters:    Size  Location     Type
  5971 ;;  drive           1    wreg     unsigned char 
  5972 ;; Auto vars:     Size  Location     Type
  5973 ;;  drive           1   13[BANK0 ] unsigned char 
  5974 ;;  val             1   12[BANK0 ] unsigned char 
  5975 ;; Return value:  Size  Location     Type
  5976 ;;                  1    wreg      _Bool 
  5977 ;; Registers used:
  5978 ;;		wreg, status,2, status,0, pclath, cstack
  5979 ;; Tracked objects:
  5980 ;;		On entry : 0/0
  5981 ;;		On exit  : 0/0
  5982 ;;		Unchanged: 0/0
  5983 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5984 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5985 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5986 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5987 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5988 ;;Total ram usage:        4 bytes
  5989 ;; Hardware stack levels used:    1
  5990 ;; Hardware stack levels required when called:    8
  5991 ;; This function calls:
  5992 ;;		_wireReadDataByte
  5993 ;;		_wireWriteDataByte
  5994 ;; This function is called by:
  5995 ;;		_initialize
  5996 ;; This function uses a non-reentrant model
  5997 ;;
  5998                           
  5999                           
  6000                           ;psect for function _setGestureLEDDrive
  6001  0E28                     _setGestureLEDDrive:	
  6002                           
  6003                           ;incstack = 0
  6004                           ; Regs used in _setGestureLEDDrive: [wreg+status,2+status,0+pclath+cstack]
  6005                           ;setGestureLEDDrive@drive stored from wreg
  6006  0E28  0020               	movlb	0	; select bank0
  6007  0E29  00AD               	movwf	setGestureLEDDrive@drive
  6008                           
  6009                           ;APDS9960.c: 343: _Bool setGestureLEDDrive(uint8_t drive);APDS9960.c: 344: {;APDS9960.c:
      +                           345:     uint8_t val;;APDS9960.c: 348:     val = wireReadDataByte(0xA3);
  6010  0E2A  30A3               	movlw	163
  6011  0E2B  318C  2400  318E   	fcall	_wireReadDataByte
  6012  0E2E  0020               	movlb	0	; select bank0
  6013  0E2F  00AA               	movwf	??_setGestureLEDDrive
  6014  0E30  082A               	movf	??_setGestureLEDDrive,w
  6015  0E31  00AC               	movwf	setGestureLEDDrive@val
  6016                           
  6017                           ;APDS9960.c: 352:     drive &= 0b00000011;
  6018  0E32  3003               	movlw	3
  6019  0E33  00AA               	movwf	??_setGestureLEDDrive
  6020  0E34  082A               	movf	??_setGestureLEDDrive,w
  6021  0E35  05AD               	andwf	setGestureLEDDrive@drive,f
  6022                           
  6023                           ;APDS9960.c: 353:     drive = drive << 3;
  6024  0E36  082D               	movf	setGestureLEDDrive@drive,w
  6025  0E37  00AA               	movwf	??_setGestureLEDDrive
  6026  0E38  3002               	movlw	2
  6027  0E39                     u5265:	
  6028  0E39  35AA               	lslf	??_setGestureLEDDrive,f
  6029  0E3A  3EFF               	addlw	-1
  6030  0E3B  1D03               	skipz
  6031  0E3C  2E39               	goto	u5265
  6032  0E3D  352A               	lslf	??_setGestureLEDDrive,w
  6033  0E3E  00AB               	movwf	??_setGestureLEDDrive+1
  6034  0E3F  082B               	movf	??_setGestureLEDDrive+1,w
  6035  0E40  00AD               	movwf	setGestureLEDDrive@drive
  6036                           
  6037                           ;APDS9960.c: 354:     val &= 0b11100111;
  6038  0E41  30E7               	movlw	231
  6039  0E42  00AA               	movwf	??_setGestureLEDDrive
  6040  0E43  082A               	movf	??_setGestureLEDDrive,w
  6041  0E44  05AC               	andwf	setGestureLEDDrive@val,f
  6042                           
  6043                           ;APDS9960.c: 355:     val |= drive;
  6044  0E45  082D               	movf	setGestureLEDDrive@drive,w
  6045  0E46  00AA               	movwf	??_setGestureLEDDrive
  6046  0E47  082A               	movf	??_setGestureLEDDrive,w
  6047  0E48  04AC               	iorwf	setGestureLEDDrive@val,f
  6048                           
  6049                           ;APDS9960.c: 358:     if( !wireWriteDataByte(0xA3, val) ) {
  6050  0E49  082C               	movf	setGestureLEDDrive@val,w
  6051  0E4A  00AA               	movwf	??_setGestureLEDDrive
  6052  0E4B  082A               	movf	??_setGestureLEDDrive,w
  6053  0E4C  00A6               	movwf	wireWriteDataByte@val
  6054  0E4D  30A3               	movlw	163
  6055  0E4E  318B  238F  318E   	fcall	_wireWriteDataByte
  6056  0E51  0020               	movlb	0	; select bank0
  6057  0E52  0826               	movf	?_wireWriteDataByte,w
  6058  0E53  0427               	iorwf	?_wireWriteDataByte+1,w
  6059  0E54  1D03               	btfss	3,2
  6060  0E55  2E58               	goto	l6067
  6061                           
  6062                           ;APDS9960.c: 359:         return 0;
  6063  0E56  3000               	movlw	0
  6064  0E57  0008               	return
  6065  0E58                     l6067:	
  6066                           
  6067                           ;APDS9960.c: 362:     return 1;
  6068  0E58  3001               	movlw	1
  6069  0E59  0008               	return
  6070  0E5A                     __end_of_setGestureLEDDrive:	
  6071                           
  6072                           	psect	text10
  6073  0DF6                     __ptext10:	
  6074 ;; *************** function _setGestureGain *****************
  6075 ;; Defined at:
  6076 ;;		line 320 in file "APDS9960.c"
  6077 ;; Parameters:    Size  Location     Type
  6078 ;;  gain            1    wreg     unsigned char 
  6079 ;; Auto vars:     Size  Location     Type
  6080 ;;  gain            1   13[BANK0 ] unsigned char 
  6081 ;;  val             1   12[BANK0 ] unsigned char 
  6082 ;; Return value:  Size  Location     Type
  6083 ;;                  1    wreg      _Bool 
  6084 ;; Registers used:
  6085 ;;		wreg, status,2, status,0, pclath, cstack
  6086 ;; Tracked objects:
  6087 ;;		On entry : 0/0
  6088 ;;		On exit  : 0/0
  6089 ;;		Unchanged: 0/0
  6090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6091 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6092 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6093 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6094 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6095 ;;Total ram usage:        4 bytes
  6096 ;; Hardware stack levels used:    1
  6097 ;; Hardware stack levels required when called:    8
  6098 ;; This function calls:
  6099 ;;		_wireReadDataByte
  6100 ;;		_wireWriteDataByte
  6101 ;; This function is called by:
  6102 ;;		_initialize
  6103 ;; This function uses a non-reentrant model
  6104 ;;
  6105                           
  6106                           
  6107                           ;psect for function _setGestureGain
  6108  0DF6                     _setGestureGain:	
  6109                           
  6110                           ;incstack = 0
  6111                           ; Regs used in _setGestureGain: [wreg+status,2+status,0+pclath+cstack]
  6112                           ;setGestureGain@gain stored from wreg
  6113  0DF6  0020               	movlb	0	; select bank0
  6114  0DF7  00AD               	movwf	setGestureGain@gain
  6115                           
  6116                           ;APDS9960.c: 320: _Bool setGestureGain(uint8_t gain);APDS9960.c: 321: {;APDS9960.c: 322:
      +                               uint8_t val;;APDS9960.c: 325:     val = wireReadDataByte(0xA3);
  6117  0DF8  30A3               	movlw	163
  6118  0DF9  318C  2400  318D   	fcall	_wireReadDataByte
  6119  0DFC  0020               	movlb	0	; select bank0
  6120  0DFD  00AA               	movwf	??_setGestureGain
  6121  0DFE  082A               	movf	??_setGestureGain,w
  6122  0DFF  00AC               	movwf	setGestureGain@val
  6123                           
  6124                           ;APDS9960.c: 329:     gain &= 0b00000011;
  6125  0E00  3003               	movlw	3
  6126  0E01  00AA               	movwf	??_setGestureGain
  6127  0E02  082A               	movf	??_setGestureGain,w
  6128  0E03  05AD               	andwf	setGestureGain@gain,f
  6129                           
  6130                           ;APDS9960.c: 330:     gain = gain << 5;
  6131  0E04  082D               	movf	setGestureGain@gain,w
  6132  0E05  00AA               	movwf	??_setGestureGain
  6133  0E06  3004               	movlw	4
  6134  0E07                     u5245:	
  6135  0E07  35AA               	lslf	??_setGestureGain,f
  6136  0E08  3EFF               	addlw	-1
  6137  0E09  1D03               	skipz
  6138  0E0A  2E07               	goto	u5245
  6139  0E0B  352A               	lslf	??_setGestureGain,w
  6140  0E0C  00AB               	movwf	??_setGestureGain+1
  6141  0E0D  082B               	movf	??_setGestureGain+1,w
  6142  0E0E  00AD               	movwf	setGestureGain@gain
  6143                           
  6144                           ;APDS9960.c: 331:     val &= 0b10011111;
  6145  0E0F  309F               	movlw	159
  6146  0E10  00AA               	movwf	??_setGestureGain
  6147  0E11  082A               	movf	??_setGestureGain,w
  6148  0E12  05AC               	andwf	setGestureGain@val,f
  6149                           
  6150                           ;APDS9960.c: 332:     val |= gain;
  6151  0E13  082D               	movf	setGestureGain@gain,w
  6152  0E14  00AA               	movwf	??_setGestureGain
  6153  0E15  082A               	movf	??_setGestureGain,w
  6154  0E16  04AC               	iorwf	setGestureGain@val,f
  6155                           
  6156                           ;APDS9960.c: 335:     if( !wireWriteDataByte(0xA3, val) ) {
  6157  0E17  082C               	movf	setGestureGain@val,w
  6158  0E18  00AA               	movwf	??_setGestureGain
  6159  0E19  082A               	movf	??_setGestureGain,w
  6160  0E1A  00A6               	movwf	wireWriteDataByte@val
  6161  0E1B  30A3               	movlw	163
  6162  0E1C  318B  238F  318D   	fcall	_wireWriteDataByte
  6163  0E1F  0020               	movlb	0	; select bank0
  6164  0E20  0826               	movf	?_wireWriteDataByte,w
  6165  0E21  0427               	iorwf	?_wireWriteDataByte+1,w
  6166  0E22  1D03               	btfss	3,2
  6167  0E23  2E26               	goto	l6049
  6168                           
  6169                           ;APDS9960.c: 336:         return 0;
  6170  0E24  3000               	movlw	0
  6171  0E25  0008               	return
  6172  0E26                     l6049:	
  6173                           
  6174                           ;APDS9960.c: 339:     return 1;
  6175  0E26  3001               	movlw	1
  6176  0E27  0008               	return
  6177  0E28                     __end_of_setGestureGain:	
  6178                           
  6179                           	psect	text11
  6180  0B13                     __ptext11:	
  6181 ;; *************** function _setGestureExitThresh *****************
  6182 ;; Defined at:
  6183 ;;		line 310 in file "APDS9960.c"
  6184 ;; Parameters:    Size  Location     Type
  6185 ;;  threshold       1    wreg     unsigned char 
  6186 ;; Auto vars:     Size  Location     Type
  6187 ;;  threshold       1   11[BANK0 ] unsigned char 
  6188 ;; Return value:  Size  Location     Type
  6189 ;;                  1    wreg      _Bool 
  6190 ;; Registers used:
  6191 ;;		wreg, status,2, status,0, pclath, cstack
  6192 ;; Tracked objects:
  6193 ;;		On entry : 0/0
  6194 ;;		On exit  : 0/0
  6195 ;;		Unchanged: 0/0
  6196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6197 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6198 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6199 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6200 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6201 ;;Total ram usage:        2 bytes
  6202 ;; Hardware stack levels used:    1
  6203 ;; Hardware stack levels required when called:    8
  6204 ;; This function calls:
  6205 ;;		_wireWriteDataByte
  6206 ;; This function is called by:
  6207 ;;		_initialize
  6208 ;; This function uses a non-reentrant model
  6209 ;;
  6210                           
  6211                           
  6212                           ;psect for function _setGestureExitThresh
  6213  0B13                     _setGestureExitThresh:	
  6214                           
  6215                           ;incstack = 0
  6216                           ; Regs used in _setGestureExitThresh: [wreg+status,2+status,0+pclath+cstack]
  6217                           ;setGestureExitThresh@threshold stored from wreg
  6218  0B13  0020               	movlb	0	; select bank0
  6219  0B14  00AB               	movwf	setGestureExitThresh@threshold
  6220                           
  6221                           ;APDS9960.c: 310: _Bool setGestureExitThresh(uint8_t threshold);APDS9960.c: 311: {;APDS9
      +                          960.c: 312:     if( !wireWriteDataByte(0xA1, threshold) ) {
  6222  0B15  082B               	movf	setGestureExitThresh@threshold,w
  6223  0B16  00AA               	movwf	??_setGestureExitThresh
  6224  0B17  082A               	movf	??_setGestureExitThresh,w
  6225  0B18  00A6               	movwf	wireWriteDataByte@val
  6226  0B19  30A1               	movlw	161
  6227  0B1A  318B  238F  318B   	fcall	_wireWriteDataByte
  6228  0B1D  0020               	movlb	0	; select bank0
  6229  0B1E  0826               	movf	?_wireWriteDataByte,w
  6230  0B1F  0427               	iorwf	?_wireWriteDataByte+1,w
  6231  0B20  1D03               	btfss	3,2
  6232  0B21  2B24               	goto	l6031
  6233                           
  6234                           ;APDS9960.c: 313:         return 0;
  6235  0B22  3000               	movlw	0
  6236  0B23  0008               	return
  6237  0B24                     l6031:	
  6238                           
  6239                           ;APDS9960.c: 316:     return 1;
  6240  0B24  3001               	movlw	1
  6241  0B25  0008               	return
  6242  0B26                     __end_of_setGestureExitThresh:	
  6243                           
  6244                           	psect	text12
  6245  0B00                     __ptext12:	
  6246 ;; *************** function _setGestureEnterThresh *****************
  6247 ;; Defined at:
  6248 ;;		line 300 in file "APDS9960.c"
  6249 ;; Parameters:    Size  Location     Type
  6250 ;;  threshold       1    wreg     unsigned char 
  6251 ;; Auto vars:     Size  Location     Type
  6252 ;;  threshold       1   11[BANK0 ] unsigned char 
  6253 ;; Return value:  Size  Location     Type
  6254 ;;                  1    wreg      _Bool 
  6255 ;; Registers used:
  6256 ;;		wreg, status,2, status,0, pclath, cstack
  6257 ;; Tracked objects:
  6258 ;;		On entry : 0/0
  6259 ;;		On exit  : 0/0
  6260 ;;		Unchanged: 0/0
  6261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6262 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6263 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6264 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6265 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6266 ;;Total ram usage:        2 bytes
  6267 ;; Hardware stack levels used:    1
  6268 ;; Hardware stack levels required when called:    8
  6269 ;; This function calls:
  6270 ;;		_wireWriteDataByte
  6271 ;; This function is called by:
  6272 ;;		_initialize
  6273 ;; This function uses a non-reentrant model
  6274 ;;
  6275                           
  6276                           
  6277                           ;psect for function _setGestureEnterThresh
  6278  0B00                     _setGestureEnterThresh:	
  6279                           
  6280                           ;incstack = 0
  6281                           ; Regs used in _setGestureEnterThresh: [wreg+status,2+status,0+pclath+cstack]
  6282                           ;setGestureEnterThresh@threshold stored from wreg
  6283  0B00  0020               	movlb	0	; select bank0
  6284  0B01  00AB               	movwf	setGestureEnterThresh@threshold
  6285                           
  6286                           ;APDS9960.c: 300: _Bool setGestureEnterThresh(uint8_t threshold);APDS9960.c: 301: {;APDS
      +                          9960.c: 302:     if( !wireWriteDataByte(0xA0, threshold) ) {
  6287  0B02  082B               	movf	setGestureEnterThresh@threshold,w
  6288  0B03  00AA               	movwf	??_setGestureEnterThresh
  6289  0B04  082A               	movf	??_setGestureEnterThresh,w
  6290  0B05  00A6               	movwf	wireWriteDataByte@val
  6291  0B06  30A0               	movlw	160
  6292  0B07  318B  238F  318B   	fcall	_wireWriteDataByte
  6293  0B0A  0020               	movlb	0	; select bank0
  6294  0B0B  0826               	movf	?_wireWriteDataByte,w
  6295  0B0C  0427               	iorwf	?_wireWriteDataByte+1,w
  6296  0B0D  1D03               	btfss	3,2
  6297  0B0E  2B11               	goto	l6021
  6298                           
  6299                           ;APDS9960.c: 303:         return 0;
  6300  0B0F  3000               	movlw	0
  6301  0B10  0008               	return
  6302  0B11                     l6021:	
  6303                           
  6304                           ;APDS9960.c: 306:     return 1;
  6305  0B11  3001               	movlw	1
  6306  0B12  0008               	return
  6307  0B13                     __end_of_setGestureEnterThresh:	
  6308                           
  6309                           	psect	text13
  6310  0BE2                     __ptext13:	
  6311 ;; *************** function _setAmbientLightGain *****************
  6312 ;; Defined at:
  6313 ;;		line 213 in file "APDS9960.c"
  6314 ;; Parameters:    Size  Location     Type
  6315 ;;  drive           1    wreg     unsigned char 
  6316 ;; Auto vars:     Size  Location     Type
  6317 ;;  drive           1   11[BANK0 ] unsigned char 
  6318 ;;  val             1   12[BANK0 ] unsigned char 
  6319 ;; Return value:  Size  Location     Type
  6320 ;;                  1    wreg      _Bool 
  6321 ;; Registers used:
  6322 ;;		wreg, status,2, status,0, pclath, cstack
  6323 ;; Tracked objects:
  6324 ;;		On entry : 0/0
  6325 ;;		On exit  : 0/0
  6326 ;;		Unchanged: 0/0
  6327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6328 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6329 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6330 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6331 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6332 ;;Total ram usage:        3 bytes
  6333 ;; Hardware stack levels used:    1
  6334 ;; Hardware stack levels required when called:    8
  6335 ;; This function calls:
  6336 ;;		_wireReadDataByte
  6337 ;;		_wireWriteDataByte
  6338 ;; This function is called by:
  6339 ;;		_initialize
  6340 ;; This function uses a non-reentrant model
  6341 ;;
  6342                           
  6343                           
  6344                           ;psect for function _setAmbientLightGain
  6345  0BE2                     _setAmbientLightGain:	
  6346                           
  6347                           ;incstack = 0
  6348                           ; Regs used in _setAmbientLightGain: [wreg+status,2+status,0+pclath+cstack]
  6349                           ;setAmbientLightGain@drive stored from wreg
  6350  0BE2  0020               	movlb	0	; select bank0
  6351  0BE3  00AB               	movwf	setAmbientLightGain@drive
  6352                           
  6353                           ;APDS9960.c: 213: _Bool setAmbientLightGain(uint8_t drive);APDS9960.c: 214: {;APDS9960.c
      +                          : 215:     uint8_t val;;APDS9960.c: 218:     val= wireReadDataByte(0x8F);
  6354  0BE4  308F               	movlw	143
  6355  0BE5  318C  2400  318B   	fcall	_wireReadDataByte
  6356  0BE8  0020               	movlb	0	; select bank0
  6357  0BE9  00AA               	movwf	??_setAmbientLightGain
  6358  0BEA  082A               	movf	??_setAmbientLightGain,w
  6359  0BEB  00AC               	movwf	setAmbientLightGain@val
  6360                           
  6361                           ;APDS9960.c: 221:     drive &= 0b00000011;
  6362  0BEC  3003               	movlw	3
  6363  0BED  00AA               	movwf	??_setAmbientLightGain
  6364  0BEE  082A               	movf	??_setAmbientLightGain,w
  6365  0BEF  05AB               	andwf	setAmbientLightGain@drive,f
  6366                           
  6367                           ;APDS9960.c: 222:     val &= 0b11111100;
  6368  0BF0  30FC               	movlw	252
  6369  0BF1  00AA               	movwf	??_setAmbientLightGain
  6370  0BF2  082A               	movf	??_setAmbientLightGain,w
  6371  0BF3  05AC               	andwf	setAmbientLightGain@val,f
  6372                           
  6373                           ;APDS9960.c: 223:     val |= drive;
  6374  0BF4  082B               	movf	setAmbientLightGain@drive,w
  6375  0BF5  00AA               	movwf	??_setAmbientLightGain
  6376  0BF6  082A               	movf	??_setAmbientLightGain,w
  6377  0BF7  04AC               	iorwf	setAmbientLightGain@val,f
  6378                           
  6379                           ;APDS9960.c: 226:     if( !wireWriteDataByte(0x8F, val) ) {
  6380  0BF8  082C               	movf	setAmbientLightGain@val,w
  6381  0BF9  00AA               	movwf	??_setAmbientLightGain
  6382  0BFA  082A               	movf	??_setAmbientLightGain,w
  6383  0BFB  00A6               	movwf	wireWriteDataByte@val
  6384  0BFC  308F               	movlw	143
  6385  0BFD  318B  238F         	fcall	_wireWriteDataByte
  6386  0BFF  0008               	return
  6387  0C00                     __end_of_setAmbientLightGain:	
  6388                           
  6389                           	psect	text14
  6390  0AAC                     __ptext14:	
  6391 ;; *************** function _i2c1_driver_open *****************
  6392 ;; Defined at:
  6393 ;;		line 83 in file "mcc_generated_files/i2c1_driver.c"
  6394 ;; Parameters:    Size  Location     Type
  6395 ;;		None
  6396 ;; Auto vars:     Size  Location     Type
  6397 ;;		None
  6398 ;; Return value:  Size  Location     Type
  6399 ;;		None               void
  6400 ;; Registers used:
  6401 ;;		wreg, status,2
  6402 ;; Tracked objects:
  6403 ;;		On entry : 0/0
  6404 ;;		On exit  : 0/0
  6405 ;;		Unchanged: 0/0
  6406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6407 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6408 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6409 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6410 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6411 ;;Total ram usage:        0 bytes
  6412 ;; Hardware stack levels used:    1
  6413 ;; Hardware stack levels required when called:    5
  6414 ;; This function calls:
  6415 ;;		Nothing
  6416 ;; This function is called by:
  6417 ;;		_initialize
  6418 ;;		_i2c_open
  6419 ;;		_InitI2C
  6420 ;; This function uses a non-reentrant model
  6421 ;;
  6422                           
  6423                           
  6424                           ;psect for function _i2c1_driver_open
  6425  0AAC                     _i2c1_driver_open:	
  6426                           
  6427                           ;incstack = 0
  6428                           ; Regs used in _i2c1_driver_open: [wreg+status,2]
  6429  0AAC  0024               	movlb	4	; select bank4
  6430  0AAD  1A95               	btfsc	21,5	;volatile
  6431  0AAE  0008               	return
  6432  0AAF  0194               	clrf	20	;volatile
  6433  0AB0  3028               	movlw	40
  6434  0AB1  0095               	movwf	21	;volatile
  6435  0AB2  0196               	clrf	22	;volatile
  6436  0AB3  3003               	movlw	3
  6437  0AB4  0092               	movwf	18	;volatile
  6438  0AB5  0008               	return
  6439  0AB6                     __end_of_i2c1_driver_open:	
  6440                           
  6441                           	psect	text15
  6442  0727                     __ptext15:	
  6443 ;; *************** function _handleGesture *****************
  6444 ;; Defined at:
  6445 ;;		line 129 in file "main.c"
  6446 ;; Parameters:    Size  Location     Type
  6447 ;;		None
  6448 ;; Auto vars:     Size  Location     Type
  6449 ;;		None
  6450 ;; Return value:  Size  Location     Type
  6451 ;;                  1    wreg      void 
  6452 ;; Registers used:
  6453 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6454 ;; Tracked objects:
  6455 ;;		On entry : 0/0
  6456 ;;		On exit  : 0/0
  6457 ;;		Unchanged: 0/0
  6458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6459 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6460 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6461 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6462 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6463 ;;Total ram usage:        1 bytes
  6464 ;; Hardware stack levels used:    1
  6465 ;; Hardware stack levels required when called:   10
  6466 ;; This function calls:
  6467 ;;		_Display_Name
  6468 ;;		_readGesture
  6469 ;; This function is called by:
  6470 ;;		_main
  6471 ;; This function uses a non-reentrant model
  6472 ;;
  6473                           
  6474                           
  6475                           ;psect for function _handleGesture
  6476  0727                     _handleGesture:	
  6477                           
  6478                           ;main.c: 131:     switch(readGesture()){
  6479                           
  6480                           ;incstack = 0
  6481                           ; Regs used in _handleGesture: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6482  0727  2F61               	goto	l6413
  6483  0728                     l6391:	
  6484                           
  6485                           ;main.c: 139:             printed = 0;
  6486  0728  01EE               	clrf	_printed
  6487                           
  6488                           ;main.c: 142:             name++;
  6489  0729  3001               	movlw	1
  6490  072A  07DC               	addwf	_name,f
  6491  072B  3000               	movlw	0
  6492  072C  3DDD               	addwfc	_name+1,f
  6493                           
  6494                           ;main.c: 143:             if(name > 3) {
  6495  072D  085D               	movf	_name+1,w
  6496  072E  3A80               	xorlw	128
  6497  072F  00DB               	movwf	??_handleGesture
  6498  0730  3080               	movlw	128
  6499  0731  025B               	subwf	??_handleGesture,w
  6500  0732  1D03               	skipz
  6501  0733  2F36               	goto	u5705
  6502  0734  3004               	movlw	4
  6503  0735  025C               	subwf	_name,w
  6504  0736                     u5705:	
  6505  0736  1C03               	skipc
  6506  0737  2F3B               	goto	l6399
  6507                           
  6508                           ;main.c: 144:                 name = 0;
  6509  0738  0020               	movlb	0	; select bank0
  6510  0739  01DC               	clrf	_name
  6511  073A  01DD               	clrf	_name+1
  6512  073B                     l6399:	
  6513                           
  6514                           ;main.c: 146:             Display_Name(names[name]);
  6515  073B  0020               	movlb	0	; select bank0
  6516  073C  355C               	lslf	_name,w
  6517  073D  3E60               	addlw	(low (_names| (0+256)))& (0+255)
  6518  073E  0086               	movwf	6
  6519  073F  3001               	movlw	1	; select bank2/3
  6520  0740  0087               	movwf	7
  6521  0741  3F40               	moviw [0]fsr1
  6522  0742  00A5               	movwf	Display_Name@string1
  6523  0743  3F41               	moviw [1]fsr1
  6524  0744  00A6               	movwf	Display_Name@string1+1
  6525  0745  318E  2691  3187   	fcall	_Display_Name
  6526                           
  6527                           ;main.c: 155:             break;
  6528  0748  2F7E               	goto	l6415
  6529  0749                     l6401:	
  6530                           
  6531                           ;main.c: 157:             printed = 0;
  6532  0749  01EE               	clrf	_printed
  6533                           
  6534                           ;main.c: 158:             --name;
  6535  074A  30FF               	movlw	255
  6536  074B  07DC               	addwf	_name,f
  6537  074C  30FF               	movlw	255
  6538  074D  3DDD               	addwfc	_name+1,f
  6539                           
  6540                           ;main.c: 159:             if(name < 0) {
  6541  074E  1FDD               	btfss	_name+1,7
  6542  074F  2F54               	goto	l6409
  6543                           
  6544                           ;main.c: 160:                 name = 3;
  6545  0750  3003               	movlw	3
  6546  0751  00DC               	movwf	_name
  6547  0752  3000               	movlw	0
  6548  0753  00DD               	movwf	_name+1
  6549  0754                     l6409:	
  6550                           
  6551                           ;main.c: 162:             Display_Name(names[name]);
  6552  0754  355C               	lslf	_name,w
  6553  0755  3E60               	addlw	(low (_names| (0+256)))& (0+255)
  6554  0756  0086               	movwf	6
  6555  0757  3001               	movlw	1	; select bank2/3
  6556  0758  0087               	movwf	7
  6557  0759  3F40               	moviw [0]fsr1
  6558  075A  00A5               	movwf	Display_Name@string1
  6559  075B  3F41               	moviw [1]fsr1
  6560  075C  00A6               	movwf	Display_Name@string1+1
  6561  075D  318E  2691  3187   	fcall	_Display_Name
  6562                           
  6563                           ;main.c: 171:             break;
  6564  0760  2F7E               	goto	l6415
  6565  0761                     l6413:	
  6566  0761  3185  25D2  3187   	fcall	_readGesture
  6567                           
  6568                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6569                           ; Switch size 1, requested type "simple"
  6570                           ; Number of cases is 1, Range of values is 0 to 0
  6571                           ; switch strategies available:
  6572                           ; Name         Instructions Cycles
  6573                           ; simple_byte            4     3 (average)
  6574                           ; direct_byte            8     6 (fixed)
  6575                           ; jumptable            260     6 (fixed)
  6576                           ;	Chosen strategy is simple_byte
  6577  0764  0020               	movlb	0	; select bank0
  6578  0765  0850               	movf	?_readGesture+1,w
  6579  0766  3A00               	xorlw	0	; case 0
  6580  0767  1903               	skipnz
  6581  0768  2F6A               	goto	l6673
  6582  0769  2F7E               	goto	l6415
  6583  076A                     l6673:	
  6584                           
  6585                           ; Switch size 1, requested type "simple"
  6586                           ; Number of cases is 6, Range of values is 1 to 6
  6587                           ; switch strategies available:
  6588                           ; Name         Instructions Cycles
  6589                           ; simple_byte           19    10 (average)
  6590                           ; direct_byte           21     9 (fixed)
  6591                           ; jumptable            263     9 (fixed)
  6592                           ;	Chosen strategy is simple_byte
  6593  076A  084F               	movf	?_readGesture,w
  6594  076B  3A01               	xorlw	1	; case 1
  6595  076C  1903               	skipnz
  6596  076D  2F28               	goto	l6391
  6597  076E  3A03               	xorlw	3	; case 2
  6598  076F  1903               	skipnz
  6599  0770  2F49               	goto	l6401
  6600  0771  3A01               	xorlw	1	; case 3
  6601  0772  1903               	skipnz
  6602  0773  2F7E               	goto	l6415
  6603  0774  3A07               	xorlw	7	; case 4
  6604  0775  1903               	skipnz
  6605  0776  2F7E               	goto	l6415
  6606  0777  3A01               	xorlw	1	; case 5
  6607  0778  1903               	skipnz
  6608  0779  2F7E               	goto	l6415
  6609  077A  3A03               	xorlw	3	; case 6
  6610  077B  1903               	skipnz
  6611  077C  2F7E               	goto	l6415
  6612  077D  2F7E               	goto	l6415
  6613  077E                     l6415:	
  6614                           
  6615                           ;main.c: 182:     printed = 0;
  6616  077E  0020               	movlb	0	; select bank0
  6617  077F  01EE               	clrf	_printed
  6618  0780  0008               	return
  6619  0781                     __end_of_handleGesture:	
  6620                           
  6621                           	psect	text16
  6622  05D2                     __ptext16:	
  6623 ;; *************** function _readGesture *****************
  6624 ;; Defined at:
  6625 ;;		line 556 in file "APDS9960.c"
  6626 ;; Parameters:    Size  Location     Type
  6627 ;;		None
  6628 ;; Auto vars:     Size  Location     Type
  6629 ;;  fifo_data      64    0[BANK2 ] unsigned char [64]
  6630 ;;  fifo_data2     64    0[BANK1 ] unsigned char [64]
  6631 ;;  i               2   57[BANK0 ] int 
  6632 ;;  bytes_read      2   54[BANK0 ] int 
  6633 ;;  motion          2   51[BANK0 ] int 
  6634 ;;  fifo_level      1   56[BANK0 ] unsigned char 
  6635 ;;  gstatus         1   53[BANK0 ] unsigned char 
  6636 ;; Return value:  Size  Location     Type
  6637 ;;                  2   47[BANK0 ] int 
  6638 ;; Registers used:
  6639 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6640 ;; Tracked objects:
  6641 ;;		On entry : 0/0
  6642 ;;		On exit  : 0/0
  6643 ;;		Unchanged: 0/0
  6644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6645 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6646 ;;      Locals:         0       8      64      64       0       0       0       0       0       0       0       0       
      +0       0
  6647 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6648 ;;      Totals:         0      12      64      64       0       0       0       0       0       0       0       0       
      +0       0
  6649 ;;Total ram usage:      140 bytes
  6650 ;; Hardware stack levels used:    1
  6651 ;; Hardware stack levels required when called:    9
  6652 ;; This function calls:
  6653 ;;		_decodeGesture
  6654 ;;		_getMode
  6655 ;;		_isGestureAvailable
  6656 ;;		_processGestureData
  6657 ;;		_resetGestureParameters
  6658 ;;		_wireReadDataBlock
  6659 ;;		_wireReadDataByte
  6660 ;; This function is called by:
  6661 ;;		_handleGesture
  6662 ;; This function uses a non-reentrant model
  6663 ;;
  6664                           
  6665                           
  6666                           ;psect for function _readGesture
  6667  05D2                     _readGesture:	
  6668                           
  6669                           ;APDS9960.c: 559:     int bytes_read = 0;
  6670                           
  6671                           ;incstack = 0
  6672                           ; Regs used in _readGesture: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6673  05D2  0020               	movlb	0	; select bank0
  6674  05D3  01D6               	clrf	readGesture@bytes_read
  6675  05D4  01D7               	clrf	readGesture@bytes_read+1
  6676                           
  6677                           ;APDS9960.c: 560:     uint8_t fifo_data[64];;APDS9960.c: 561:     uint8_t fifo_data2[64]
      +                          ;;APDS9960.c: 562:     uint8_t gstatus;;APDS9960.c: 563:     int motion;;APDS9960.c: 564
      +                          :     int i;;APDS9960.c: 567:     if( !isGestureAvailable() || !(getMode() & 0b01000001)
      +                           ) {
  6678  05D5  318A  22ED  3185   	fcall	_isGestureAvailable
  6679  05D8  3A00               	xorlw	0
  6680  05D9  1903               	skipnz
  6681  05DA  2DE1               	goto	l5863
  6682  05DB  318A  22A3  3185   	fcall	_getMode
  6683  05DE  3941               	andlw	65
  6684  05DF  1D03               	btfss	3,2
  6685  05E0  2E96               	goto	l5867
  6686  05E1                     l5863:	
  6687                           
  6688                           ;APDS9960.c: 568:         return DIR_NONE;
  6689  05E1  0020               	movlb	0	; select bank0
  6690  05E2  01CF               	clrf	?_readGesture
  6691  05E3  01D0               	clrf	?_readGesture+1
  6692  05E4  0008               	return
  6693  05E5                     l5873:	
  6694                           ;APDS9960.c: 569:     }
  6695                           
  6696                           
  6697                           ;APDS9960.c: 584:         {;APDS9960.c: 586:          fifo_level= wireReadDataByte(0xAE)
      +                          ;
  6698  05E5  30AE               	movlw	174
  6699  05E6  318C  2400  3185   	fcall	_wireReadDataByte
  6700  05E9  0020               	movlb	0	; select bank0
  6701  05EA  00D1               	movwf	??_readGesture
  6702  05EB  0851               	movf	??_readGesture,w
  6703  05EC  00D8               	movwf	readGesture@fifo_level
  6704                           
  6705                           ;APDS9960.c: 590:             if( fifo_level > 0) {
  6706  05ED  0858               	movf	readGesture@fifo_level,w
  6707  05EE  1903               	btfsc	3,2
  6708  05EF  2E96               	goto	l5867
  6709                           
  6710                           ;APDS9960.c: 592:               if(fifo_level < 17)
  6711  05F0  3011               	movlw	17
  6712  05F1  0258               	subwf	readGesture@fifo_level,w
  6713  05F2  1803               	skipnc
  6714  05F3  2DF8               	goto	l5881
  6715                           
  6716                           ;APDS9960.c: 593:               {;APDS9960.c: 594:                 bytes_read = wireRead
      +                          DataBlock( 0xFC,
  6717  05F4  3020               	movlw	low readGesture@fifo_data
  6718  05F5  00A6               	movwf	wireReadDataBlock@val
  6719  05F6  3001               	movlw	high readGesture@fifo_data
  6720  05F7  2DFB               	goto	L1
  6721  05F8                     l5881:	
  6722                           ;APDS9960.c: 597:               } else
  6723                           
  6724                           
  6725                           ;APDS9960.c: 598:               {;APDS9960.c: 599:                 bytes_read = wireRead
      +                          DataBlock( 0xFC,
  6726  05F8  30A0               	movlw	low readGesture@fifo_data2
  6727  05F9  00A6               	movwf	wireReadDataBlock@val
  6728  05FA  3000               	movlw	high readGesture@fifo_data2
  6729  05FB                     L1:	
  6730  05FB  00A7               	movwf	wireReadDataBlock@val+1
  6731  05FC  0858               	movf	readGesture@fifo_level,w
  6732  05FD  00D1               	movwf	??_readGesture
  6733  05FE  01D2               	clrf	??_readGesture+1
  6734  05FF  35D1               	lslf	??_readGesture,f
  6735  0600  0DD2               	rlf	??_readGesture+1,f
  6736  0601  35D1               	lslf	??_readGesture,f
  6737  0602  0DD2               	rlf	??_readGesture+1,f
  6738  0603  0851               	movf	??_readGesture,w
  6739  0604  00A8               	movwf	wireReadDataBlock@len
  6740  0605  0852               	movf	??_readGesture+1,w
  6741  0606  00A9               	movwf	wireReadDataBlock@len+1
  6742  0607  30FC               	movlw	252
  6743  0608  318F  2718  3185   	fcall	_wireReadDataBlock
  6744  060B  0020               	movlb	0	; select bank0
  6745  060C  0827               	movf	?_wireReadDataBlock+1,w
  6746  060D  00D7               	movwf	readGesture@bytes_read+1
  6747  060E  0826               	movf	?_wireReadDataBlock,w
  6748  060F  00D6               	movwf	readGesture@bytes_read
  6749                           
  6750                           ;APDS9960.c: 605:                 if( bytes_read == -1 )
  6751  0610  0A56               	incf	readGesture@bytes_read,w
  6752  0611  1D03               	skipz
  6753  0612  2E1B               	goto	l5889
  6754  0613  0A57               	incf	readGesture@bytes_read+1,w
  6755  0614  1D03               	btfss	3,2
  6756  0615  2E1B               	goto	l5889
  6757                           
  6758                           ;APDS9960.c: 606:                 {;APDS9960.c: 607:                     return 0xFF;
  6759  0616  30FF               	movlw	255
  6760  0617  00CF               	movwf	?_readGesture
  6761  0618  3000               	movlw	0
  6762  0619  00D0               	movwf	?_readGesture+1
  6763  061A  0008               	return
  6764  061B                     l5889:	
  6765                           
  6766                           ;APDS9960.c: 612:                 if( bytes_read >= 4 )
  6767  061B  0857               	movf	readGesture@bytes_read+1,w
  6768  061C  3A80               	xorlw	128
  6769  061D  00D1               	movwf	??_readGesture
  6770  061E  3080               	movlw	128
  6771  061F  0251               	subwf	??_readGesture,w
  6772  0620  1D03               	skipz
  6773  0621  2E24               	goto	u5115
  6774  0622  3004               	movlw	4
  6775  0623  0256               	subwf	readGesture@bytes_read,w
  6776  0624                     u5115:	
  6777  0624  1C03               	skipc
  6778  0625  2E96               	goto	l5867
  6779                           
  6780                           ;APDS9960.c: 613:                 {;APDS9960.c: 615:                     for( i = 0; i <
      +                           bytes_read; i += 4 ) {
  6781  0626  0020               	movlb	0	; select bank0
  6782  0627  01D9               	clrf	readGesture@i
  6783  0628  01DA               	clrf	readGesture@i+1
  6784  0629                     l5901:	
  6785  0629  085A               	movf	readGesture@i+1,w
  6786  062A  3A80               	xorlw	128
  6787  062B  00D1               	movwf	??_readGesture
  6788  062C  0857               	movf	readGesture@bytes_read+1,w
  6789  062D  3A80               	xorlw	128
  6790  062E  0251               	subwf	??_readGesture,w
  6791  062F  1D03               	skipz
  6792  0630  2E33               	goto	u5125
  6793  0631  0856               	movf	readGesture@bytes_read,w
  6794  0632  0259               	subwf	readGesture@i,w
  6795  0633                     u5125:	
  6796  0633  1803               	btfsc	3,0
  6797  0634  2E8A               	goto	l5903
  6798                           
  6799                           ;APDS9960.c: 616:                         gesture_data_.u_data[gesture_data_.index] = fi
      +                          fo_data[i + 0];
  6800  0635  0020               	movlb	0	; select bank0
  6801  0636  0859               	movf	readGesture@i,w
  6802  0637  3E20               	addlw	(low (readGesture@fifo_data| (0+256)))& (0+255)
  6803  0638  0086               	movwf	6
  6804  0639  3001               	movlw	1	; select bank2/3
  6805  063A  0087               	movwf	7
  6806  063B  0801               	movf	1,w
  6807  063C  00D1               	movwf	??_readGesture
  6808  063D  0024               	movlb	4	; select bank4
  6809  063E  0860               	movf	(_gesture_data_^(0+512)+64),w
  6810  063F  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  6811  0640  0086               	movwf	6
  6812  0641  3002               	movlw	2	; select bank4/5
  6813  0642  0087               	movwf	7
  6814  0643  0020               	movlb	0	; select bank0
  6815  0644  0851               	movf	??_readGesture,w
  6816  0645  0081               	movwf	1
  6817                           
  6818                           ;APDS9960.c: 618:                         gesture_data_.d_data[gesture_data_.index] = fi
      +                          fo_data[i + 1];
  6819  0646  0859               	movf	readGesture@i,w
  6820  0647  3E01               	addlw	1
  6821  0648  3E20               	addlw	(low (readGesture@fifo_data| (0+256)))& (0+255)
  6822  0649  0086               	movwf	6
  6823  064A  3001               	movlw	1	; select bank2/3
  6824  064B  0087               	movwf	7
  6825  064C  0801               	movf	1,w
  6826  064D  00D1               	movwf	??_readGesture
  6827  064E  0024               	movlb	4	; select bank4
  6828  064F  0860               	movf	(_gesture_data_^(0+512)+64),w
  6829  0650  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  6830  0651  0086               	movwf	6
  6831  0652  3002               	movlw	2	; select bank4/5
  6832  0653  0087               	movwf	7
  6833  0654  0020               	movlb	0	; select bank0
  6834  0655  0851               	movf	??_readGesture,w
  6835  0656  0081               	movwf	1
  6836                           
  6837                           ;APDS9960.c: 620:                         gesture_data_.l_data[gesture_data_.index] = fi
      +                          fo_data[i + 2];
  6838  0657  0859               	movf	readGesture@i,w
  6839  0658  3E02               	addlw	2
  6840  0659  3E20               	addlw	(low (readGesture@fifo_data| (0+256)))& (0+255)
  6841  065A  0086               	movwf	6
  6842  065B  3001               	movlw	1	; select bank2/3
  6843  065C  0087               	movwf	7
  6844  065D  0801               	movf	1,w
  6845  065E  00D1               	movwf	??_readGesture
  6846  065F  0024               	movlb	4	; select bank4
  6847  0660  0860               	movf	(_gesture_data_^(0+512)+64),w
  6848  0661  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  6849  0662  0086               	movwf	6
  6850  0663  3002               	movlw	2	; select bank4/5
  6851  0664  0087               	movwf	7
  6852  0665  0020               	movlb	0	; select bank0
  6853  0666  0851               	movf	??_readGesture,w
  6854  0667  0081               	movwf	1
  6855                           
  6856                           ;APDS9960.c: 622:                         gesture_data_.r_data[gesture_data_.index] = fi
      +                          fo_data[i + 3];
  6857  0668  0859               	movf	readGesture@i,w
  6858  0669  3E03               	addlw	3
  6859  066A  3E20               	addlw	(low (readGesture@fifo_data| (0+256)))& (0+255)
  6860  066B  0086               	movwf	6
  6861  066C  3001               	movlw	1	; select bank2/3
  6862  066D  0087               	movwf	7
  6863  066E  0801               	movf	1,w
  6864  066F  00D1               	movwf	??_readGesture
  6865  0670  0024               	movlb	4	; select bank4
  6866  0671  0860               	movf	(_gesture_data_^(0+512)+64),w
  6867  0672  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  6868  0673  0086               	movwf	6
  6869  0674  3002               	movlw	2	; select bank4/5
  6870  0675  0087               	movwf	7
  6871  0676  0020               	movlb	0	; select bank0
  6872  0677  0851               	movf	??_readGesture,w
  6873  0678  0081               	movwf	1
  6874                           
  6875                           ;APDS9960.c: 624:                         gesture_data_.index++;
  6876  0679  3001               	movlw	1
  6877  067A  00D1               	movwf	??_readGesture
  6878  067B  0851               	movf	??_readGesture,w
  6879  067C  0024               	movlb	4	; select bank4
  6880  067D  07E0               	addwf	(_gesture_data_^(0+512)+64),f
  6881                           
  6882                           ;APDS9960.c: 625:                         gesture_data_.total_gestures++;
  6883  067E  3001               	movlw	1
  6884  067F  0020               	movlb	0	; select bank0
  6885  0680  00D1               	movwf	??_readGesture
  6886  0681  0851               	movf	??_readGesture,w
  6887  0682  0024               	movlb	4	; select bank4
  6888  0683  07E1               	addwf	(_gesture_data_^(0+512)+65),f
  6889                           
  6890                           ;APDS9960.c: 626:                     }
  6891  0684  3004               	movlw	4
  6892  0685  0020               	movlb	0	; select bank0
  6893  0686  07D9               	addwf	readGesture@i,f
  6894  0687  3000               	movlw	0
  6895  0688  3DDA               	addwfc	readGesture@i+1,f
  6896  0689  2E29               	goto	l5901
  6897  068A                     l5903:	
  6898                           
  6899                           ;APDS9960.c: 629:                     if( processGestureData() )
  6900  068A  3180  2061  3185   	fcall	_processGestureData
  6901  068D  3A00               	xorlw	0
  6902  068E  1903               	skipnz
  6903  068F  2E93               	goto	l5907
  6904                           
  6905                           ;APDS9960.c: 630:                     {;APDS9960.c: 632:                         if( dec
      +                          odeGesture() ) {
  6906  0690  3183  232C  3185   	fcall	_decodeGesture
  6907  0693                     l5907:	
  6908                           
  6909                           ;APDS9960.c: 638:                     gesture_data_.index = 0;
  6910  0693  0024               	movlb	4	; select bank4
  6911  0694  01E0               	clrf	(_gesture_data_^(0+512)+64)
  6912                           
  6913                           ;APDS9960.c: 639:                     gesture_data_.total_gestures = 0;
  6914  0695  01E1               	clrf	(_gesture_data_^(0+512)+65)
  6915  0696                     l5867:	
  6916                           
  6917                           ;APDS9960.c: 575:         _delay((unsigned long)((30)*(250000/4000.0)));
  6918  0696  3003               	movlw	3
  6919  0697  0020               	movlb	0	; select bank0
  6920  0698  00D1               	movwf	??_readGesture
  6921  0699  306E               	movlw	110
  6922  069A                     u5817:	
  6923  069A  0B89               	decfsz	9,f
  6924  069B  2E9A               	goto	u5817
  6925  069C  0BD1               	decfsz	??_readGesture,f
  6926  069D  2E9A               	goto	u5817
  6927                           
  6928                           ;APDS9960.c: 578:         gstatus = wireReadDataByte(0xAF);
  6929  069E  30AF               	movlw	175
  6930  069F  318C  2400  3185   	fcall	_wireReadDataByte
  6931  06A2  0020               	movlb	0	; select bank0
  6932  06A3  00D1               	movwf	??_readGesture
  6933  06A4  0851               	movf	??_readGesture,w
  6934  06A5  00D5               	movwf	readGesture@gstatus
  6935                           
  6936                           ;APDS9960.c: 583:         if( (gstatus & 0b00000001) == 0b00000001 )
  6937  06A6  1855               	btfsc	readGesture@gstatus,0
  6938  06A7  2DE5               	goto	l5873
  6939                           
  6940                           ;APDS9960.c: 645:             _delay((unsigned long)((30)*(250000/4000.0)));
  6941  06A8  3003               	movlw	3
  6942  06A9  0020               	movlb	0	; select bank0
  6943  06AA  00D1               	movwf	??_readGesture
  6944  06AB  306E               	movlw	110
  6945  06AC                     u5827:	
  6946  06AC  0B89               	decfsz	9,f
  6947  06AD  2EAC               	goto	u5827
  6948  06AE  0BD1               	decfsz	??_readGesture,f
  6949  06AF  2EAC               	goto	u5827
  6950                           
  6951                           ;APDS9960.c: 646:             decodeGesture();
  6952  06B0  3183  232C  3185   	fcall	_decodeGesture
  6953                           
  6954                           ;APDS9960.c: 647:             motion = gesture_motion_;
  6955  06B3  0022               	movlb	2	; select bank2
  6956  06B4  0869               	movf	(_gesture_motion_+1)^(0+256),w
  6957  06B5  0020               	movlb	0	; select bank0
  6958  06B6  00D4               	movwf	readGesture@motion+1
  6959  06B7  0022               	movlb	2	; select bank2
  6960  06B8  0868               	movf	_gesture_motion_^(0+256),w
  6961  06B9  0020               	movlb	0	; select bank0
  6962  06BA  00D3               	movwf	readGesture@motion
  6963                           
  6964                           ;APDS9960.c: 649:             resetGestureParameters();
  6965  06BB  318B  2361         	fcall	_resetGestureParameters
  6966                           
  6967                           ;APDS9960.c: 651:             return motion;
  6968  06BD  0020               	movlb	0	; select bank0
  6969  06BE  0854               	movf	readGesture@motion+1,w
  6970  06BF  00D0               	movwf	?_readGesture+1
  6971  06C0  0853               	movf	readGesture@motion,w
  6972  06C1  00CF               	movwf	?_readGesture
  6973  06C2  0008               	return
  6974  06C3                     __end_of_readGesture:	
  6975                           
  6976                           	psect	text17
  6977  0F18                     __ptext17:	
  6978 ;; *************** function _wireReadDataBlock *****************
  6979 ;; Defined at:
  6980 ;;		line 847 in file "APDS9960.c"
  6981 ;; Parameters:    Size  Location     Type
  6982 ;;  reg             1    wreg     unsigned char 
  6983 ;;  val             2    6[BANK0 ] PTR unsigned char 
  6984 ;;		 -> readGesture@fifo_data2(64), readGesture@fifo_data(64), 
  6985 ;;  len             2    8[BANK0 ] unsigned int 
  6986 ;; Auto vars:     Size  Location     Type
  6987 ;;  reg             1   15[BANK0 ] unsigned char 
  6988 ;;  j               1   16[BANK0 ] unsigned char 
  6989 ;; Return value:  Size  Location     Type
  6990 ;;                  2    6[BANK0 ] int 
  6991 ;; Registers used:
  6992 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6993 ;; Tracked objects:
  6994 ;;		On entry : 0/0
  6995 ;;		On exit  : 0/0
  6996 ;;		Unchanged: 0/0
  6997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6998 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6999 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7000 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7001 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7002 ;;Total ram usage:       11 bytes
  7003 ;; Hardware stack levels used:    1
  7004 ;; Hardware stack levels required when called:    7
  7005 ;; This function calls:
  7006 ;;		_I2C_ReStart
  7007 ;;		_I2C_Read_Byte
  7008 ;;		_I2C_Send_NACK
  7009 ;;		_I2C_Start
  7010 ;;		_I2C_Stop
  7011 ;;		_I2C_Write_Byte
  7012 ;; This function is called by:
  7013 ;;		_readGesture
  7014 ;; This function uses a non-reentrant model
  7015 ;;
  7016                           
  7017                           
  7018                           ;psect for function _wireReadDataBlock
  7019  0F18                     _wireReadDataBlock:	
  7020                           
  7021                           ;incstack = 0
  7022                           ; Regs used in _wireReadDataBlock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7023                           ;wireReadDataBlock@reg stored from wreg
  7024  0F18  0020               	movlb	0	; select bank0
  7025  0F19  00AF               	movwf	wireReadDataBlock@reg
  7026                           
  7027                           ;APDS9960.c: 851:     I2C_Start();
  7028  0F1A  318A  2208  318F   	fcall	_I2C_Start
  7029                           
  7030                           ;APDS9960.c: 852:     I2C_Write_Byte((0x39 << 1 )| 0x00);
  7031  0F1D  3072               	movlw	114
  7032  0F1E  318B  23AA  318F   	fcall	_I2C_Write_Byte
  7033                           
  7034                           ;APDS9960.c: 854:     I2C_Write_Byte(reg);
  7035  0F21  0020               	movlb	0	; select bank0
  7036  0F22  082F               	movf	wireReadDataBlock@reg,w
  7037  0F23  318B  23AA  318F   	fcall	_I2C_Write_Byte
  7038                           
  7039                           ;APDS9960.c: 856:     for(j= 0; j < len ; j++)
  7040  0F26  0020               	movlb	0	; select bank0
  7041  0F27  01B0               	clrf	wireReadDataBlock@j
  7042  0F28                     l5487:	
  7043  0F28  0830               	movf	wireReadDataBlock@j,w
  7044  0F29  00AA               	movwf	??_wireReadDataBlock
  7045  0F2A  01AB               	clrf	??_wireReadDataBlock+1
  7046  0F2B  0829               	movf	wireReadDataBlock@len+1,w
  7047  0F2C  022B               	subwf	??_wireReadDataBlock+1,w
  7048  0F2D  1D03               	skipz
  7049  0F2E  2F31               	goto	u4285
  7050  0F2F  0828               	movf	wireReadDataBlock@len,w
  7051  0F30  022A               	subwf	??_wireReadDataBlock,w
  7052  0F31                     u4285:	
  7053  0F31  1803               	btfsc	3,0
  7054  0F32  2F57               	goto	l5489
  7055                           
  7056                           ;APDS9960.c: 857:     {;APDS9960.c: 859:       I2C_ReStart();
  7057  0F33  3189  21F9  318F   	fcall	_I2C_ReStart
  7058                           
  7059                           ;APDS9960.c: 860:       I2C_Write_Byte((0x39 << 1) | 0x01);
  7060  0F36  3073               	movlw	115
  7061  0F37  318B  23AA  318F   	fcall	_I2C_Write_Byte
  7062                           
  7063                           ;APDS9960.c: 861:       val[j]=I2C_Read_Byte();
  7064  0F3A  318A  22B6  318F   	fcall	_I2C_Read_Byte
  7065  0F3D  0020               	movlb	0	; select bank0
  7066  0F3E  00AA               	movwf	??_wireReadDataBlock
  7067  0F3F  0830               	movf	wireReadDataBlock@j,w
  7068  0F40  00AB               	movwf	??_wireReadDataBlock+1
  7069  0F41  01AC               	clrf	??_wireReadDataBlock+2
  7070  0F42  082B               	movf	??_wireReadDataBlock+1,w
  7071  0F43  0726               	addwf	wireReadDataBlock@val,w
  7072  0F44  00AD               	movwf	??_wireReadDataBlock+3
  7073  0F45  082C               	movf	??_wireReadDataBlock+2,w
  7074  0F46  3D27               	addwfc	wireReadDataBlock@val+1,w
  7075  0F47  00AE               	movwf	??_wireReadDataBlock+4
  7076  0F48  082D               	movf	??_wireReadDataBlock+3,w
  7077  0F49  0086               	movwf	6
  7078  0F4A  082E               	movf	??_wireReadDataBlock+4,w
  7079  0F4B  0087               	movwf	7
  7080  0F4C  082A               	movf	??_wireReadDataBlock,w
  7081  0F4D  0081               	movwf	1
  7082                           
  7083                           ;APDS9960.c: 862:       I2C_Send_NACK();
  7084  0F4E  318A  2202  318F   	fcall	_I2C_Send_NACK
  7085                           
  7086                           ;APDS9960.c: 864:     }
  7087  0F51  3001               	movlw	1
  7088  0F52  0020               	movlb	0	; select bank0
  7089  0F53  00AA               	movwf	??_wireReadDataBlock
  7090  0F54  082A               	movf	??_wireReadDataBlock,w
  7091  0F55  07B0               	addwf	wireReadDataBlock@j,f
  7092  0F56  2F28               	goto	l5487
  7093  0F57                     l5489:	
  7094                           
  7095                           ;APDS9960.c: 866:     I2C_Stop();
  7096  0F57  318A  220E         	fcall	_I2C_Stop
  7097                           
  7098                           ;APDS9960.c: 867:     return (int)j;
  7099  0F59  0020               	movlb	0	; select bank0
  7100  0F5A  0830               	movf	wireReadDataBlock@j,w
  7101  0F5B  00AA               	movwf	??_wireReadDataBlock
  7102  0F5C  01AB               	clrf	??_wireReadDataBlock+1
  7103  0F5D  082A               	movf	??_wireReadDataBlock,w
  7104  0F5E  00A6               	movwf	?_wireReadDataBlock
  7105  0F5F  082B               	movf	??_wireReadDataBlock+1,w
  7106  0F60  00A7               	movwf	?_wireReadDataBlock+1
  7107  0F61  0008               	return
  7108  0F62                     __end_of_wireReadDataBlock:	
  7109                           
  7110                           	psect	text18
  7111  0061                     __ptext18:	
  7112 ;; *************** function _processGestureData *****************
  7113 ;; Defined at:
  7114 ;;		line 657 in file "APDS9960.c"
  7115 ;; Parameters:    Size  Location     Type
  7116 ;;		None
  7117 ;; Auto vars:     Size  Location     Type
  7118 ;;  i               2   45[BANK0 ] int 
  7119 ;;  lr_delta        2   43[BANK0 ] int 
  7120 ;;  ud_delta        2   41[BANK0 ] int 
  7121 ;;  lr_ratio_las    2   23[BANK0 ] int 
  7122 ;;  ud_ratio_las    2   21[BANK0 ] int 
  7123 ;;  lr_ratio_fir    2   19[BANK0 ] int 
  7124 ;;  ud_ratio_fir    2   17[BANK0 ] int 
  7125 ;;  r_first         1   40[BANK0 ] unsigned char 
  7126 ;;  l_first         1   39[BANK0 ] unsigned char 
  7127 ;;  d_first         1   38[BANK0 ] unsigned char 
  7128 ;;  u_first         1   37[BANK0 ] unsigned char 
  7129 ;;  r_last          1   36[BANK0 ] unsigned char 
  7130 ;;  l_last          1   35[BANK0 ] unsigned char 
  7131 ;;  d_last          1   34[BANK0 ] unsigned char 
  7132 ;;  u_last          1   33[BANK0 ] unsigned char 
  7133 ;; Return value:  Size  Location     Type
  7134 ;;                  1    wreg      _Bool 
  7135 ;; Registers used:
  7136 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7137 ;; Tracked objects:
  7138 ;;		On entry : 0/0
  7139 ;;		On exit  : 0/0
  7140 ;;		Unchanged: 0/0
  7141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7142 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7143 ;;      Locals:         0      30       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7144 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7145 ;;      Totals:         0      32       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7146 ;;Total ram usage:       32 bytes
  7147 ;; Hardware stack levels used:    1
  7148 ;; Hardware stack levels required when called:    6
  7149 ;; This function calls:
  7150 ;;		___awdiv
  7151 ;;		___wmul
  7152 ;; This function is called by:
  7153 ;;		_readGesture
  7154 ;; This function uses a non-reentrant model
  7155 ;;
  7156                           
  7157                           
  7158                           ;psect for function _processGestureData
  7159  0061                     _processGestureData:	
  7160                           
  7161                           ;APDS9960.c: 659:     uint8_t u_first = 0;
  7162                           
  7163                           ;incstack = 0
  7164                           ; Regs used in _processGestureData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7165  0061  0020               	movlb	0	; select bank0
  7166  0062  01C5               	clrf	processGestureData@u_first
  7167                           
  7168                           ;APDS9960.c: 660:     uint8_t d_first = 0;
  7169  0063  01C6               	clrf	processGestureData@d_first
  7170                           
  7171                           ;APDS9960.c: 661:     uint8_t l_first = 0;
  7172  0064  01C7               	clrf	processGestureData@l_first
  7173                           
  7174                           ;APDS9960.c: 662:     uint8_t r_first = 0;
  7175  0065  01C8               	clrf	processGestureData@r_first
  7176                           
  7177                           ;APDS9960.c: 663:     uint8_t u_last = 0;
  7178  0066  01C1               	clrf	processGestureData@u_last
  7179                           
  7180                           ;APDS9960.c: 664:     uint8_t d_last = 0;
  7181  0067  01C2               	clrf	processGestureData@d_last
  7182                           
  7183                           ;APDS9960.c: 665:     uint8_t l_last = 0;
  7184  0068  01C3               	clrf	processGestureData@l_last
  7185                           
  7186                           ;APDS9960.c: 666:     uint8_t r_last = 0;
  7187  0069  01C4               	clrf	processGestureData@r_last
  7188                           
  7189                           ;APDS9960.c: 667:     int ud_ratio_first;;APDS9960.c: 668:     int lr_ratio_first;;APDS9
      +                          960.c: 669:     int ud_ratio_last;;APDS9960.c: 670:     int lr_ratio_last;;APDS9960.c: 6
      +                          71:     int ud_delta;;APDS9960.c: 672:     int lr_delta;;APDS9960.c: 673:     int i;;APD
      +                          S9960.c: 676:     if( gesture_data_.total_gestures <= 4 ) {
  7190  006A  3005               	movlw	5
  7191  006B  0024               	movlb	4	; select bank4
  7192  006C  0261               	subwf	(_gesture_data_^(0+512)+65),w
  7193  006D  1803               	skipnc
  7194  006E  2871               	goto	l5503
  7195  006F                     l5499:	
  7196                           
  7197                           ;APDS9960.c: 677:         return 0;
  7198  006F  3000               	movlw	0
  7199  0070  0008               	return
  7200  0071                     l5503:	
  7201                           
  7202                           ;APDS9960.c: 681:     if( (gesture_data_.total_gestures <= 32) && (gesture_data_.total_g
      +                          estures > 0) ) {
  7203  0071  3021               	movlw	33
  7204  0072  0261               	subwf	(_gesture_data_^(0+512)+65),w
  7205  0073  1803               	skipnc
  7206  0074  293B               	goto	l5553
  7207  0075  0861               	movf	(_gesture_data_^(0+512)+65),w
  7208  0076  1903               	btfsc	3,2
  7209  0077  293B               	goto	l5553
  7210                           
  7211                           ;APDS9960.c: 682: ;APDS9960.c: 685:         for( i = 0; i < gesture_data_.total_gestures
      +                          ; i++ ) {
  7212  0078  0020               	movlb	0	; select bank0
  7213  0079  01CD               	clrf	processGestureData@i
  7214  007A  01CE               	clrf	processGestureData@i+1
  7215  007B  2880               	goto	l908
  7216  007C                     l5519:	
  7217                           ;APDS9960.c: 695:                 break;
  7218                           
  7219                           
  7220                           ;APDS9960.c: 697:         }
  7221  007C  3001               	movlw	1
  7222  007D  07CD               	addwf	processGestureData@i,f
  7223  007E  3000               	movlw	0
  7224  007F  3DCE               	addwfc	processGestureData@i+1,f
  7225  0080                     l908:	
  7226  0080  084E               	movf	processGestureData@i+1,w
  7227  0081  3A80               	xorlw	128
  7228  0082  00AF               	movwf	??_processGestureData
  7229  0083  3080               	movlw	128
  7230  0084  022F               	subwf	??_processGestureData,w
  7231  0085  1D03               	skipz
  7232  0086  288B               	goto	u4365
  7233  0087  0024               	movlb	4	; select bank4
  7234  0088  0861               	movf	(_gesture_data_^(0+512)+65),w
  7235  0089  0020               	movlb	0	; select bank0
  7236  008A  024D               	subwf	processGestureData@i,w
  7237  008B                     u4365:	
  7238  008B  1803               	btfsc	3,0
  7239  008C  28D6               	goto	l5521
  7240                           
  7241                           ;APDS9960.c: 686:             if( (gesture_data_.u_data[i] > 10) &&
  7242  008D  0020               	movlb	0	; select bank0
  7243  008E  084D               	movf	processGestureData@i,w
  7244  008F  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  7245  0090  0086               	movwf	6
  7246  0091  3002               	movlw	2	; select bank4/5
  7247  0092  0087               	movwf	7
  7248  0093  300B               	movlw	11
  7249  0094  0201               	subwf	1,w
  7250  0095  1C03               	skipc
  7251  0096  287C               	goto	l5519
  7252  0097  084D               	movf	processGestureData@i,w
  7253  0098  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  7254  0099  0086               	movwf	6
  7255  009A  3002               	movlw	2	; select bank4/5
  7256  009B  0087               	movwf	7
  7257  009C  300B               	movlw	11
  7258  009D  0201               	subwf	1,w
  7259  009E  1C03               	skipc
  7260  009F  287C               	goto	l5519
  7261  00A0  084D               	movf	processGestureData@i,w
  7262  00A1  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  7263  00A2  0086               	movwf	6
  7264  00A3  3002               	movlw	2	; select bank4/5
  7265  00A4  0087               	movwf	7
  7266  00A5  300B               	movlw	11
  7267  00A6  0201               	subwf	1,w
  7268  00A7  1C03               	skipc
  7269  00A8  287C               	goto	l5519
  7270  00A9  084D               	movf	processGestureData@i,w
  7271  00AA  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  7272  00AB  0086               	movwf	6
  7273  00AC  3002               	movlw	2	; select bank4/5
  7274  00AD  0087               	movwf	7
  7275  00AE  300B               	movlw	11
  7276  00AF  0201               	subwf	1,w
  7277  00B0  1C03               	skipc
  7278  00B1  287C               	goto	l5519
  7279                           
  7280                           ;APDS9960.c: 689:                 (gesture_data_.r_data[i] > 10) ) {;APDS9960.c: 691:   
      +                                        u_first = gesture_data_.u_data[i];
  7281  00B2  084D               	movf	processGestureData@i,w
  7282  00B3  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  7283  00B4  0086               	movwf	6
  7284  00B5  3002               	movlw	2	; select bank4/5
  7285  00B6  0087               	movwf	7
  7286  00B7  0801               	movf	1,w
  7287  00B8  00AF               	movwf	??_processGestureData
  7288  00B9  082F               	movf	??_processGestureData,w
  7289  00BA  00C5               	movwf	processGestureData@u_first
  7290                           
  7291                           ;APDS9960.c: 692:                 d_first = gesture_data_.d_data[i];
  7292  00BB  084D               	movf	processGestureData@i,w
  7293  00BC  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  7294  00BD  0086               	movwf	6
  7295  00BE  3002               	movlw	2	; select bank4/5
  7296  00BF  0087               	movwf	7
  7297  00C0  0801               	movf	1,w
  7298  00C1  00AF               	movwf	??_processGestureData
  7299  00C2  082F               	movf	??_processGestureData,w
  7300  00C3  00C6               	movwf	processGestureData@d_first
  7301                           
  7302                           ;APDS9960.c: 693:                 l_first = gesture_data_.l_data[i];
  7303  00C4  084D               	movf	processGestureData@i,w
  7304  00C5  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  7305  00C6  0086               	movwf	6
  7306  00C7  3002               	movlw	2	; select bank4/5
  7307  00C8  0087               	movwf	7
  7308  00C9  0801               	movf	1,w
  7309  00CA  00AF               	movwf	??_processGestureData
  7310  00CB  082F               	movf	??_processGestureData,w
  7311  00CC  00C7               	movwf	processGestureData@l_first
  7312                           
  7313                           ;APDS9960.c: 694:                 r_first = gesture_data_.r_data[i];
  7314  00CD  084D               	movf	processGestureData@i,w
  7315  00CE  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  7316  00CF  0086               	movwf	6
  7317  00D0  3002               	movlw	2	; select bank4/5
  7318  00D1  0087               	movwf	7
  7319  00D2  0801               	movf	1,w
  7320  00D3  00AF               	movwf	??_processGestureData
  7321  00D4  082F               	movf	??_processGestureData,w
  7322  00D5  00C8               	movwf	processGestureData@r_first
  7323  00D6                     l5521:	
  7324                           
  7325                           ;APDS9960.c: 700:         if( (u_first == 0) || (d_first == 0) || (l_first == 0) || (r_f
      +                          irst == 0) ) {
  7326  00D6  0020               	movlb	0	; select bank0
  7327  00D7  0845               	movf	processGestureData@u_first,w
  7328  00D8  1903               	btfsc	3,2
  7329  00D9  286F               	goto	l5499
  7330  00DA  0846               	movf	processGestureData@d_first,w
  7331  00DB  1903               	btfsc	3,2
  7332  00DC  286F               	goto	l5499
  7333  00DD  0847               	movf	processGestureData@l_first,w
  7334  00DE  1903               	btfsc	3,2
  7335  00DF  286F               	goto	l5499
  7336  00E0  0848               	movf	processGestureData@r_first,w
  7337  00E1  1903               	btfsc	3,2
  7338  00E2  286F               	goto	l5499
  7339                           
  7340                           ;APDS9960.c: 706:         for( i = gesture_data_.total_gestures - 1; i >= 0; i-- ) {
  7341  00E3  0024               	movlb	4	; select bank4
  7342  00E4  0861               	movf	(_gesture_data_^(0+512)+65),w
  7343  00E5  3EFF               	addlw	255
  7344  00E6  0020               	movlb	0	; select bank0
  7345  00E7  00CD               	movwf	processGestureData@i
  7346  00E8  30FF               	movlw	255
  7347  00E9  1803               	skipnc
  7348  00EA  3000               	movlw	0
  7349  00EB  00CE               	movwf	processGestureData@i+1
  7350                           
  7351                           ;APDS9960.c: 717:                 break;
  7352  00EC  28F1               	goto	l5535
  7353  00ED                     l5549:	
  7354                           
  7355                           ;APDS9960.c: 719:         }
  7356  00ED  30FF               	movlw	255
  7357  00EE  07CD               	addwf	processGestureData@i,f
  7358  00EF  30FF               	movlw	255
  7359  00F0  3DCE               	addwfc	processGestureData@i+1,f
  7360  00F1                     l5535:	
  7361  00F1  1BCE               	btfsc	processGestureData@i+1,7
  7362  00F2  293B               	goto	l5553
  7363                           
  7364                           ;APDS9960.c: 708:             if( (gesture_data_.u_data[i] > 10) &&
  7365  00F3  084D               	movf	processGestureData@i,w
  7366  00F4  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  7367  00F5  0086               	movwf	6
  7368  00F6  3002               	movlw	2	; select bank4/5
  7369  00F7  0087               	movwf	7
  7370  00F8  300B               	movlw	11
  7371  00F9  0201               	subwf	1,w
  7372  00FA  1C03               	skipc
  7373  00FB  28ED               	goto	l5549
  7374  00FC  084D               	movf	processGestureData@i,w
  7375  00FD  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  7376  00FE  0086               	movwf	6
  7377  00FF  3002               	movlw	2	; select bank4/5
  7378  0100  0087               	movwf	7
  7379  0101  300B               	movlw	11
  7380  0102  0201               	subwf	1,w
  7381  0103  1C03               	skipc
  7382  0104  28ED               	goto	l5549
  7383  0105  084D               	movf	processGestureData@i,w
  7384  0106  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  7385  0107  0086               	movwf	6
  7386  0108  3002               	movlw	2	; select bank4/5
  7387  0109  0087               	movwf	7
  7388  010A  300B               	movlw	11
  7389  010B  0201               	subwf	1,w
  7390  010C  1C03               	skipc
  7391  010D  28ED               	goto	l5549
  7392  010E  084D               	movf	processGestureData@i,w
  7393  010F  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  7394  0110  0086               	movwf	6
  7395  0111  3002               	movlw	2	; select bank4/5
  7396  0112  0087               	movwf	7
  7397  0113  300B               	movlw	11
  7398  0114  0201               	subwf	1,w
  7399  0115  1C03               	skipc
  7400  0116  28ED               	goto	l5549
  7401                           
  7402                           ;APDS9960.c: 711:                 (gesture_data_.r_data[i] > 10) ) {;APDS9960.c: 713:   
      +                                        u_last = gesture_data_.u_data[i];
  7403  0117  084D               	movf	processGestureData@i,w
  7404  0118  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  7405  0119  0086               	movwf	6
  7406  011A  3002               	movlw	2	; select bank4/5
  7407  011B  0087               	movwf	7
  7408  011C  0801               	movf	1,w
  7409  011D  00AF               	movwf	??_processGestureData
  7410  011E  082F               	movf	??_processGestureData,w
  7411  011F  00C1               	movwf	processGestureData@u_last
  7412                           
  7413                           ;APDS9960.c: 714:                 d_last = gesture_data_.d_data[i];
  7414  0120  084D               	movf	processGestureData@i,w
  7415  0121  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  7416  0122  0086               	movwf	6
  7417  0123  3002               	movlw	2	; select bank4/5
  7418  0124  0087               	movwf	7
  7419  0125  0801               	movf	1,w
  7420  0126  00AF               	movwf	??_processGestureData
  7421  0127  082F               	movf	??_processGestureData,w
  7422  0128  00C2               	movwf	processGestureData@d_last
  7423                           
  7424                           ;APDS9960.c: 715:                 l_last = gesture_data_.l_data[i];
  7425  0129  084D               	movf	processGestureData@i,w
  7426  012A  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  7427  012B  0086               	movwf	6
  7428  012C  3002               	movlw	2	; select bank4/5
  7429  012D  0087               	movwf	7
  7430  012E  0801               	movf	1,w
  7431  012F  00AF               	movwf	??_processGestureData
  7432  0130  082F               	movf	??_processGestureData,w
  7433  0131  00C3               	movwf	processGestureData@l_last
  7434                           
  7435                           ;APDS9960.c: 716:                 r_last = gesture_data_.r_data[i];
  7436  0132  084D               	movf	processGestureData@i,w
  7437  0133  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  7438  0134  0086               	movwf	6
  7439  0135  3002               	movlw	2	; select bank4/5
  7440  0136  0087               	movwf	7
  7441  0137  0801               	movf	1,w
  7442  0138  00AF               	movwf	??_processGestureData
  7443  0139  082F               	movf	??_processGestureData,w
  7444  013A  00C4               	movwf	processGestureData@r_last
  7445  013B                     l5553:	
  7446                           
  7447                           ;APDS9960.c: 723:     ud_ratio_first = ((u_first - d_first) * 100) / (u_first + d_first)
      +                          ;
  7448  013B  0020               	movlb	0	; select bank0
  7449  013C  0845               	movf	processGestureData@u_first,w
  7450  013D  0746               	addwf	processGestureData@d_first,w
  7451  013E  00A6               	movwf	___awdiv@divisor
  7452  013F  01A7               	clrf	___awdiv@divisor+1
  7453  0140  0DA7               	rlf	___awdiv@divisor+1,f
  7454  0141  0846               	movf	processGestureData@d_first,w
  7455  0142  0245               	subwf	processGestureData@u_first,w
  7456  0143  00A0               	movwf	___wmul@multiplier
  7457  0144  01A1               	clrf	___wmul@multiplier+1
  7458  0145  1C03               	skipc
  7459  0146  03A1               	decf	___wmul@multiplier+1,f
  7460  0147  3064               	movlw	100
  7461  0148  00A2               	movwf	___wmul@multiplicand
  7462  0149  3000               	movlw	0
  7463  014A  00A3               	movwf	___wmul@multiplicand+1
  7464  014B  318B  23C6  3180   	fcall	___wmul
  7465  014E  0020               	movlb	0	; select bank0
  7466  014F  0821               	movf	?___wmul+1,w
  7467  0150  00A9               	movwf	___awdiv@dividend+1
  7468  0151  0820               	movf	?___wmul,w
  7469  0152  00A8               	movwf	___awdiv@dividend
  7470  0153  3187  2781  3180   	fcall	___awdiv
  7471  0156  0020               	movlb	0	; select bank0
  7472  0157  0827               	movf	?___awdiv+1,w
  7473  0158  00B2               	movwf	processGestureData@ud_ratio_first+1
  7474  0159  0826               	movf	?___awdiv,w
  7475  015A  00B1               	movwf	processGestureData@ud_ratio_first
  7476                           
  7477                           ;APDS9960.c: 724:     lr_ratio_first = ((l_first - r_first) * 100) / (l_first + r_first)
      +                          ;
  7478  015B  0847               	movf	processGestureData@l_first,w
  7479  015C  0748               	addwf	processGestureData@r_first,w
  7480  015D  00A6               	movwf	___awdiv@divisor
  7481  015E  01A7               	clrf	___awdiv@divisor+1
  7482  015F  0DA7               	rlf	___awdiv@divisor+1,f
  7483  0160  0848               	movf	processGestureData@r_first,w
  7484  0161  0247               	subwf	processGestureData@l_first,w
  7485  0162  00A0               	movwf	___wmul@multiplier
  7486  0163  01A1               	clrf	___wmul@multiplier+1
  7487  0164  1C03               	skipc
  7488  0165  03A1               	decf	___wmul@multiplier+1,f
  7489  0166  3064               	movlw	100
  7490  0167  00A2               	movwf	___wmul@multiplicand
  7491  0168  3000               	movlw	0
  7492  0169  00A3               	movwf	___wmul@multiplicand+1
  7493  016A  318B  23C6  3180   	fcall	___wmul
  7494  016D  0020               	movlb	0	; select bank0
  7495  016E  0821               	movf	?___wmul+1,w
  7496  016F  00A9               	movwf	___awdiv@dividend+1
  7497  0170  0820               	movf	?___wmul,w
  7498  0171  00A8               	movwf	___awdiv@dividend
  7499  0172  3187  2781  3180   	fcall	___awdiv
  7500  0175  0020               	movlb	0	; select bank0
  7501  0176  0827               	movf	?___awdiv+1,w
  7502  0177  00B4               	movwf	processGestureData@lr_ratio_first+1
  7503  0178  0826               	movf	?___awdiv,w
  7504  0179  00B3               	movwf	processGestureData@lr_ratio_first
  7505                           
  7506                           ;APDS9960.c: 725:     ud_ratio_last = ((u_last - d_last) * 100) / (u_last + d_last);
  7507  017A  0841               	movf	processGestureData@u_last,w
  7508  017B  0742               	addwf	processGestureData@d_last,w
  7509  017C  00A6               	movwf	___awdiv@divisor
  7510  017D  01A7               	clrf	___awdiv@divisor+1
  7511  017E  0DA7               	rlf	___awdiv@divisor+1,f
  7512  017F  0842               	movf	processGestureData@d_last,w
  7513  0180  0241               	subwf	processGestureData@u_last,w
  7514  0181  00A0               	movwf	___wmul@multiplier
  7515  0182  01A1               	clrf	___wmul@multiplier+1
  7516  0183  1C03               	skipc
  7517  0184  03A1               	decf	___wmul@multiplier+1,f
  7518  0185  3064               	movlw	100
  7519  0186  00A2               	movwf	___wmul@multiplicand
  7520  0187  3000               	movlw	0
  7521  0188  00A3               	movwf	___wmul@multiplicand+1
  7522  0189  318B  23C6  3180   	fcall	___wmul
  7523  018C  0020               	movlb	0	; select bank0
  7524  018D  0821               	movf	?___wmul+1,w
  7525  018E  00A9               	movwf	___awdiv@dividend+1
  7526  018F  0820               	movf	?___wmul,w
  7527  0190  00A8               	movwf	___awdiv@dividend
  7528  0191  3187  2781  3180   	fcall	___awdiv
  7529  0194  0020               	movlb	0	; select bank0
  7530  0195  0827               	movf	?___awdiv+1,w
  7531  0196  00B6               	movwf	processGestureData@ud_ratio_last+1
  7532  0197  0826               	movf	?___awdiv,w
  7533  0198  00B5               	movwf	processGestureData@ud_ratio_last
  7534                           
  7535                           ;APDS9960.c: 726:     lr_ratio_last = ((l_last - r_last) * 100) / (l_last + r_last);
  7536  0199  0843               	movf	processGestureData@l_last,w
  7537  019A  0744               	addwf	processGestureData@r_last,w
  7538  019B  00A6               	movwf	___awdiv@divisor
  7539  019C  01A7               	clrf	___awdiv@divisor+1
  7540  019D  0DA7               	rlf	___awdiv@divisor+1,f
  7541  019E  0844               	movf	processGestureData@r_last,w
  7542  019F  0243               	subwf	processGestureData@l_last,w
  7543  01A0  00A0               	movwf	___wmul@multiplier
  7544  01A1  01A1               	clrf	___wmul@multiplier+1
  7545  01A2  1C03               	skipc
  7546  01A3  03A1               	decf	___wmul@multiplier+1,f
  7547  01A4  3064               	movlw	100
  7548  01A5  00A2               	movwf	___wmul@multiplicand
  7549  01A6  3000               	movlw	0
  7550  01A7  00A3               	movwf	___wmul@multiplicand+1
  7551  01A8  318B  23C6  3180   	fcall	___wmul
  7552  01AB  0020               	movlb	0	; select bank0
  7553  01AC  0821               	movf	?___wmul+1,w
  7554  01AD  00A9               	movwf	___awdiv@dividend+1
  7555  01AE  0820               	movf	?___wmul,w
  7556  01AF  00A8               	movwf	___awdiv@dividend
  7557  01B0  3187  2781  3180   	fcall	___awdiv
  7558  01B3  0020               	movlb	0	; select bank0
  7559  01B4  0827               	movf	?___awdiv+1,w
  7560  01B5  00B8               	movwf	processGestureData@lr_ratio_last+1
  7561  01B6  0826               	movf	?___awdiv,w
  7562  01B7  00B7               	movwf	processGestureData@lr_ratio_last
  7563                           
  7564                           ;APDS9960.c: 729:     ud_delta = ud_ratio_last - ud_ratio_first;
  7565  01B8  0831               	movf	processGestureData@ud_ratio_first,w
  7566  01B9  0235               	subwf	processGestureData@ud_ratio_last,w
  7567  01BA  00C9               	movwf	processGestureData@ud_delta
  7568  01BB  0832               	movf	processGestureData@ud_ratio_first+1,w
  7569  01BC  3B36               	subwfb	processGestureData@ud_ratio_last+1,w
  7570  01BD  00CA               	movwf	processGestureData@ud_delta+1
  7571                           
  7572                           ;APDS9960.c: 730:     lr_delta = lr_ratio_last - lr_ratio_first;
  7573  01BE  0833               	movf	processGestureData@lr_ratio_first,w
  7574  01BF  0237               	subwf	processGestureData@lr_ratio_last,w
  7575  01C0  00CB               	movwf	processGestureData@lr_delta
  7576  01C1  0834               	movf	processGestureData@lr_ratio_first+1,w
  7577  01C2  3B38               	subwfb	processGestureData@lr_ratio_last+1,w
  7578  01C3  00CC               	movwf	processGestureData@lr_delta+1
  7579                           
  7580                           ;APDS9960.c: 733:     gesture_ud_delta_ += ud_delta;
  7581  01C4  0849               	movf	processGestureData@ud_delta,w
  7582  01C5  07EA               	addwf	_gesture_ud_delta_,f
  7583  01C6  084A               	movf	processGestureData@ud_delta+1,w
  7584  01C7  3DEB               	addwfc	_gesture_ud_delta_+1,f
  7585                           
  7586                           ;APDS9960.c: 734:     gesture_lr_delta_ += lr_delta;
  7587  01C8  084B               	movf	processGestureData@lr_delta,w
  7588  01C9  07E8               	addwf	_gesture_lr_delta_,f
  7589  01CA  084C               	movf	processGestureData@lr_delta+1,w
  7590  01CB  3DE9               	addwfc	_gesture_lr_delta_+1,f
  7591                           
  7592                           ;APDS9960.c: 737:     if( gesture_ud_delta_ >= 50 ) {
  7593  01CC  086B               	movf	_gesture_ud_delta_+1,w
  7594  01CD  3A80               	xorlw	128
  7595  01CE  00AF               	movwf	??_processGestureData
  7596  01CF  3080               	movlw	128
  7597  01D0  022F               	subwf	??_processGestureData,w
  7598  01D1  1D03               	skipz
  7599  01D2  29D5               	goto	u4465
  7600  01D3  3032               	movlw	50
  7601  01D4  026A               	subwf	_gesture_ud_delta_,w
  7602  01D5                     u4465:	
  7603  01D5  1C03               	skipc
  7604  01D6  29DC               	goto	l5567
  7605                           
  7606                           ;APDS9960.c: 738:         gesture_ud_count_ = 1;
  7607  01D7  3001               	movlw	1
  7608  01D8  0020               	movlb	0	; select bank0
  7609  01D9  00E6               	movwf	_gesture_ud_count_
  7610  01DA  3000               	movlw	0
  7611  01DB  29EC               	goto	L2
  7612  01DC                     l5567:	
  7613                           ;APDS9960.c: 739:     } else if( gesture_ud_delta_ <= -50 ) {
  7614                           
  7615  01DC  0020               	movlb	0	; select bank0
  7616  01DD  086B               	movf	_gesture_ud_delta_+1,w
  7617  01DE  3A80               	xorlw	128
  7618  01DF  00AF               	movwf	??_processGestureData
  7619  01E0  307F               	movlw	127
  7620  01E1  022F               	subwf	??_processGestureData,w
  7621  01E2  1D03               	skipz
  7622  01E3  29E6               	goto	u4475
  7623  01E4  30CF               	movlw	207
  7624  01E5  026A               	subwf	_gesture_ud_delta_,w
  7625  01E6                     u4475:	
  7626  01E6  1803               	skipnc
  7627  01E7  29EE               	goto	l5571
  7628                           
  7629                           ;APDS9960.c: 740:         gesture_ud_count_ = -1;
  7630  01E8  30FF               	movlw	255
  7631  01E9  0020               	movlb	0	; select bank0
  7632  01EA  00E6               	movwf	_gesture_ud_count_
  7633  01EB  30FF               	movlw	255
  7634  01EC                     L2:	
  7635  01EC  00E7               	movwf	_gesture_ud_count_+1
  7636                           
  7637                           ;APDS9960.c: 741:     } else {
  7638  01ED  29F1               	goto	l5573
  7639  01EE                     l5571:	
  7640                           
  7641                           ;APDS9960.c: 742:         gesture_ud_count_ = 0;
  7642  01EE  0020               	movlb	0	; select bank0
  7643  01EF  01E6               	clrf	_gesture_ud_count_
  7644  01F0  01E7               	clrf	_gesture_ud_count_+1
  7645  01F1                     l5573:	
  7646                           
  7647                           ;APDS9960.c: 746:     if( gesture_lr_delta_ >= 50 ) {
  7648  01F1  0869               	movf	_gesture_lr_delta_+1,w
  7649  01F2  3A80               	xorlw	128
  7650  01F3  00AF               	movwf	??_processGestureData
  7651  01F4  3080               	movlw	128
  7652  01F5  022F               	subwf	??_processGestureData,w
  7653  01F6  1D03               	skipz
  7654  01F7  29FA               	goto	u4485
  7655  01F8  3032               	movlw	50
  7656  01F9  0268               	subwf	_gesture_lr_delta_,w
  7657  01FA                     u4485:	
  7658  01FA  1C03               	skipc
  7659  01FB  2A01               	goto	l5577
  7660                           
  7661                           ;APDS9960.c: 747:         gesture_lr_count_ = 1;
  7662  01FC  3001               	movlw	1
  7663  01FD  0020               	movlb	0	; select bank0
  7664  01FE  00E4               	movwf	_gesture_lr_count_
  7665  01FF  3000               	movlw	0
  7666  0200  2A11               	goto	L3
  7667  0201                     l5577:	
  7668                           ;APDS9960.c: 748:     } else if( gesture_lr_delta_ <= -50 ) {
  7669                           
  7670  0201  0020               	movlb	0	; select bank0
  7671  0202  0869               	movf	_gesture_lr_delta_+1,w
  7672  0203  3A80               	xorlw	128
  7673  0204  00AF               	movwf	??_processGestureData
  7674  0205  307F               	movlw	127
  7675  0206  022F               	subwf	??_processGestureData,w
  7676  0207  1D03               	skipz
  7677  0208  2A0B               	goto	u4495
  7678  0209  30CF               	movlw	207
  7679  020A  0268               	subwf	_gesture_lr_delta_,w
  7680  020B                     u4495:	
  7681  020B  1803               	skipnc
  7682  020C  2A13               	goto	l5581
  7683                           
  7684                           ;APDS9960.c: 749:         gesture_lr_count_ = -1;
  7685  020D  30FF               	movlw	255
  7686  020E  0020               	movlb	0	; select bank0
  7687  020F  00E4               	movwf	_gesture_lr_count_
  7688  0210  30FF               	movlw	255
  7689  0211                     L3:	
  7690  0211  00E5               	movwf	_gesture_lr_count_+1
  7691                           
  7692                           ;APDS9960.c: 750:     } else {
  7693  0212  2A16               	goto	l5583
  7694  0213                     l5581:	
  7695                           
  7696                           ;APDS9960.c: 751:         gesture_lr_count_ = 0;
  7697  0213  0020               	movlb	0	; select bank0
  7698  0214  01E4               	clrf	_gesture_lr_count_
  7699  0215  01E5               	clrf	_gesture_lr_count_+1
  7700  0216                     l5583:	
  7701                           
  7702                           ;APDS9960.c: 755:     if( (gesture_ud_count_ == 0) && (gesture_lr_count_ == 0) ) {
  7703  0216  0866               	movf	_gesture_ud_count_,w
  7704  0217  0467               	iorwf	_gesture_ud_count_+1,w
  7705  0218  1D03               	btfss	3,2
  7706  0219  2AB9               	goto	l5627
  7707  021A  0864               	movf	_gesture_lr_count_,w
  7708  021B  0465               	iorwf	_gesture_lr_count_+1,w
  7709  021C  1D03               	btfss	3,2
  7710  021D  2AB9               	goto	l5627
  7711                           
  7712                           ;APDS9960.c: 756:         if( (((ud_delta) > 0 ? (ud_delta) : -(ud_delta)) < 20) && (((l
      +                          r_delta) > 0 ? (lr_delta) : -(lr_delta)) < 20) ) {
  7713  021E  084A               	movf	processGestureData@ud_delta+1,w
  7714  021F  3A80               	xorlw	128
  7715  0220  00AF               	movwf	??_processGestureData
  7716  0221  3080               	movlw	128
  7717  0222  022F               	subwf	??_processGestureData,w
  7718  0223  1D03               	skipz
  7719  0224  2A27               	goto	u4525
  7720  0225  3001               	movlw	1
  7721  0226  0249               	subwf	processGestureData@ud_delta,w
  7722  0227                     u4525:	
  7723  0227  1803               	skipnc
  7724  0228  2A36               	goto	l5591
  7725  0229  0020               	movlb	0	; select bank0
  7726  022A  0949               	comf	processGestureData@ud_delta,w
  7727  022B  00AF               	movwf	??_processGestureData
  7728  022C  094A               	comf	processGestureData@ud_delta+1,w
  7729  022D  00B0               	movwf	??_processGestureData+1
  7730  022E  0AAF               	incf	??_processGestureData,f
  7731  022F  1903               	skipnz
  7732  0230  0AB0               	incf	??_processGestureData+1,f
  7733  0231  082F               	movf	??_processGestureData,w
  7734  0232  00B9               	movwf	_processGestureData$1252
  7735  0233  0830               	movf	??_processGestureData+1,w
  7736  0234  00BA               	movwf	_processGestureData$1252+1
  7737  0235  2A3B               	goto	l931
  7738  0236                     l5591:	
  7739  0236  0020               	movlb	0	; select bank0
  7740  0237  084A               	movf	processGestureData@ud_delta+1,w
  7741  0238  00BA               	movwf	_processGestureData$1252+1
  7742  0239  0849               	movf	processGestureData@ud_delta,w
  7743  023A  00B9               	movwf	_processGestureData$1252
  7744  023B                     l931:	
  7745  023B  083A               	movf	_processGestureData$1252+1,w
  7746  023C  3A80               	xorlw	128
  7747  023D  00AF               	movwf	??_processGestureData
  7748  023E  3080               	movlw	128
  7749  023F  022F               	subwf	??_processGestureData,w
  7750  0240  1D03               	skipz
  7751  0241  2A44               	goto	u4535
  7752  0242  3014               	movlw	20
  7753  0243  0239               	subwf	_processGestureData$1252,w
  7754  0244                     u4535:	
  7755  0244  1803               	skipnc
  7756  0245  286F               	goto	l5499
  7757  0246  0020               	movlb	0	; select bank0
  7758  0247  084C               	movf	processGestureData@lr_delta+1,w
  7759  0248  3A80               	xorlw	128
  7760  0249  00AF               	movwf	??_processGestureData
  7761  024A  3080               	movlw	128
  7762  024B  022F               	subwf	??_processGestureData,w
  7763  024C  1D03               	skipz
  7764  024D  2A50               	goto	u4545
  7765  024E  3001               	movlw	1
  7766  024F  024B               	subwf	processGestureData@lr_delta,w
  7767  0250                     u4545:	
  7768  0250  1803               	skipnc
  7769  0251  2A5F               	goto	l5597
  7770  0252  0020               	movlb	0	; select bank0
  7771  0253  094B               	comf	processGestureData@lr_delta,w
  7772  0254  00AF               	movwf	??_processGestureData
  7773  0255  094C               	comf	processGestureData@lr_delta+1,w
  7774  0256  00B0               	movwf	??_processGestureData+1
  7775  0257  0AAF               	incf	??_processGestureData,f
  7776  0258  1903               	skipnz
  7777  0259  0AB0               	incf	??_processGestureData+1,f
  7778  025A  082F               	movf	??_processGestureData,w
  7779  025B  00BB               	movwf	_processGestureData$1253
  7780  025C  0830               	movf	??_processGestureData+1,w
  7781  025D  00BC               	movwf	_processGestureData$1253+1
  7782  025E  2A64               	goto	l935
  7783  025F                     l5597:	
  7784  025F  0020               	movlb	0	; select bank0
  7785  0260  084C               	movf	processGestureData@lr_delta+1,w
  7786  0261  00BC               	movwf	_processGestureData$1253+1
  7787  0262  084B               	movf	processGestureData@lr_delta,w
  7788  0263  00BB               	movwf	_processGestureData$1253
  7789  0264                     l935:	
  7790  0264  083C               	movf	_processGestureData$1253+1,w
  7791  0265  3A80               	xorlw	128
  7792  0266  00AF               	movwf	??_processGestureData
  7793  0267  3080               	movlw	128
  7794  0268  022F               	subwf	??_processGestureData,w
  7795  0269  1D03               	skipz
  7796  026A  2A6D               	goto	u4555
  7797  026B  3014               	movlw	20
  7798  026C  023B               	subwf	_processGestureData$1253,w
  7799  026D                     u4555:	
  7800  026D  1803               	skipnc
  7801  026E  286F               	goto	l5499
  7802                           
  7803                           ;APDS9960.c: 757: ;APDS9960.c: 759:             if( (ud_delta == 0) && (lr_delta == 0) )
      +                           {
  7804  026F  0020               	movlb	0	; select bank0
  7805  0270  0849               	movf	processGestureData@ud_delta,w
  7806  0271  044A               	iorwf	processGestureData@ud_delta+1,w
  7807  0272  1D03               	btfss	3,2
  7808  0273  2A7D               	goto	l5605
  7809  0274  084B               	movf	processGestureData@lr_delta,w
  7810  0275  044C               	iorwf	processGestureData@lr_delta+1,w
  7811  0276  1D03               	btfss	3,2
  7812  0277  2A7D               	goto	l5605
  7813                           
  7814                           ;APDS9960.c: 760:                 gesture_near_count_++;
  7815  0278  3001               	movlw	1
  7816  0279  07E2               	addwf	_gesture_near_count_,f
  7817  027A  3000               	movlw	0
  7818  027B  3DE3               	addwfc	_gesture_near_count_+1,f
  7819                           
  7820                           ;APDS9960.c: 761:             } else if( (ud_delta != 0) || (lr_delta != 0) ) {
  7821  027C  2A89               	goto	l937
  7822  027D                     l5605:	
  7823  027D  0849               	movf	processGestureData@ud_delta,w
  7824  027E  044A               	iorwf	processGestureData@ud_delta+1,w
  7825  027F  1D03               	btfss	3,2
  7826  0280  2A85               	goto	l5609
  7827  0281  084B               	movf	processGestureData@lr_delta,w
  7828  0282  044C               	iorwf	processGestureData@lr_delta+1,w
  7829  0283  1903               	btfsc	3,2
  7830  0284  2A89               	goto	l937
  7831  0285                     l5609:	
  7832                           
  7833                           ;APDS9960.c: 762:                 gesture_far_count_++;
  7834  0285  3001               	movlw	1
  7835  0286  07E0               	addwf	_gesture_far_count_,f
  7836  0287  3000               	movlw	0
  7837  0288  3DE1               	addwfc	_gesture_far_count_+1,f
  7838  0289                     l937:	
  7839                           
  7840                           ;APDS9960.c: 765:             if( (gesture_near_count_ >= 10) && (gesture_far_count_ >= 
      +                          2) ) {
  7841  0289  0863               	movf	_gesture_near_count_+1,w
  7842  028A  3A80               	xorlw	128
  7843  028B  00AF               	movwf	??_processGestureData
  7844  028C  3080               	movlw	128
  7845  028D  022F               	subwf	??_processGestureData,w
  7846  028E  1D03               	skipz
  7847  028F  2A92               	goto	u4605
  7848  0290  300A               	movlw	10
  7849  0291  0262               	subwf	_gesture_near_count_,w
  7850  0292                     u4605:	
  7851  0292  1C03               	skipc
  7852  0293  286F               	goto	l5499
  7853  0294  0020               	movlb	0	; select bank0
  7854  0295  0861               	movf	_gesture_far_count_+1,w
  7855  0296  3A80               	xorlw	128
  7856  0297  00AF               	movwf	??_processGestureData
  7857  0298  3080               	movlw	128
  7858  0299  022F               	subwf	??_processGestureData,w
  7859  029A  1D03               	skipz
  7860  029B  2A9E               	goto	u4615
  7861  029C  3002               	movlw	2
  7862  029D  0260               	subwf	_gesture_far_count_,w
  7863  029E                     u4615:	
  7864  029E  1C03               	skipc
  7865  029F  286F               	goto	l5499
  7866                           
  7867                           ;APDS9960.c: 766:                 if( (ud_delta == 0) && (lr_delta == 0) ) {
  7868  02A0  0020               	movlb	0	; select bank0
  7869  02A1  0849               	movf	processGestureData@ud_delta,w
  7870  02A2  044A               	iorwf	processGestureData@ud_delta+1,w
  7871  02A3  1D03               	btfss	3,2
  7872  02A4  2AAB               	goto	l5619
  7873  02A5  084B               	movf	processGestureData@lr_delta,w
  7874  02A6  044C               	iorwf	processGestureData@lr_delta+1,w
  7875  02A7  1D03               	btfss	3,2
  7876  02A8  2AAB               	goto	l5619
  7877                           
  7878                           ;APDS9960.c: 767:                     gesture_state_ = NEAR_STATE;
  7879  02A9  3001               	movlw	1
  7880  02AA  2AB4               	goto	L4
  7881  02AB                     l5619:	
  7882                           ;APDS9960.c: 768:                 } else if( (ud_delta != 0) && (lr_delta != 0) ) {
  7883                           
  7884  02AB  0849               	movf	processGestureData@ud_delta,w
  7885  02AC  044A               	iorwf	processGestureData@ud_delta+1,w
  7886  02AD  1903               	btfsc	3,2
  7887  02AE  2AB7               	goto	l943
  7888  02AF  084B               	movf	processGestureData@lr_delta,w
  7889  02B0  044C               	iorwf	processGestureData@lr_delta+1,w
  7890  02B1  1903               	btfsc	3,2
  7891  02B2  2AB7               	goto	l943
  7892                           
  7893                           ;APDS9960.c: 769:                     gesture_state_ = FAR_STATE;
  7894  02B3  3002               	movlw	2
  7895  02B4                     L4:	
  7896  02B4  00DE               	movwf	_gesture_state_
  7897  02B5  3000               	movlw	0
  7898  02B6  00DF               	movwf	_gesture_state_+1
  7899  02B7                     l943:	
  7900                           
  7901                           ;APDS9960.c: 771:                 return 1;
  7902  02B7  3001               	movlw	1
  7903  02B8  0008               	return
  7904  02B9                     l5627:	
  7905                           
  7906                           ;APDS9960.c: 775:         if( (((ud_delta) > 0 ? (ud_delta) : -(ud_delta)) < 20) && (((l
      +                          r_delta) > 0 ? (lr_delta) : -(lr_delta)) < 20) ) {
  7907  02B9  084A               	movf	processGestureData@ud_delta+1,w
  7908  02BA  3A80               	xorlw	128
  7909  02BB  00AF               	movwf	??_processGestureData
  7910  02BC  3080               	movlw	128
  7911  02BD  022F               	subwf	??_processGestureData,w
  7912  02BE  1D03               	skipz
  7913  02BF  2AC2               	goto	u4665
  7914  02C0  3001               	movlw	1
  7915  02C1  0249               	subwf	processGestureData@ud_delta,w
  7916  02C2                     u4665:	
  7917  02C2  1803               	skipnc
  7918  02C3  2AD1               	goto	l5631
  7919  02C4  0020               	movlb	0	; select bank0
  7920  02C5  0949               	comf	processGestureData@ud_delta,w
  7921  02C6  00AF               	movwf	??_processGestureData
  7922  02C7  094A               	comf	processGestureData@ud_delta+1,w
  7923  02C8  00B0               	movwf	??_processGestureData+1
  7924  02C9  0AAF               	incf	??_processGestureData,f
  7925  02CA  1903               	skipnz
  7926  02CB  0AB0               	incf	??_processGestureData+1,f
  7927  02CC  082F               	movf	??_processGestureData,w
  7928  02CD  00BD               	movwf	_processGestureData$1254
  7929  02CE  0830               	movf	??_processGestureData+1,w
  7930  02CF  00BE               	movwf	_processGestureData$1254+1
  7931  02D0  2AD6               	goto	l950
  7932  02D1                     l5631:	
  7933  02D1  0020               	movlb	0	; select bank0
  7934  02D2  084A               	movf	processGestureData@ud_delta+1,w
  7935  02D3  00BE               	movwf	_processGestureData$1254+1
  7936  02D4  0849               	movf	processGestureData@ud_delta,w
  7937  02D5  00BD               	movwf	_processGestureData$1254
  7938  02D6                     l950:	
  7939  02D6  083E               	movf	_processGestureData$1254+1,w
  7940  02D7  3A80               	xorlw	128
  7941  02D8  00AF               	movwf	??_processGestureData
  7942  02D9  3080               	movlw	128
  7943  02DA  022F               	subwf	??_processGestureData,w
  7944  02DB  1D03               	skipz
  7945  02DC  2ADF               	goto	u4675
  7946  02DD  3014               	movlw	20
  7947  02DE  023D               	subwf	_processGestureData$1254,w
  7948  02DF                     u4675:	
  7949  02DF  1803               	skipnc
  7950  02E0  286F               	goto	l5499
  7951  02E1  0020               	movlb	0	; select bank0
  7952  02E2  084C               	movf	processGestureData@lr_delta+1,w
  7953  02E3  3A80               	xorlw	128
  7954  02E4  00AF               	movwf	??_processGestureData
  7955  02E5  3080               	movlw	128
  7956  02E6  022F               	subwf	??_processGestureData,w
  7957  02E7  1D03               	skipz
  7958  02E8  2AEB               	goto	u4685
  7959  02E9  3001               	movlw	1
  7960  02EA  024B               	subwf	processGestureData@lr_delta,w
  7961  02EB                     u4685:	
  7962  02EB  1803               	skipnc
  7963  02EC  2AFA               	goto	l5637
  7964  02ED  0020               	movlb	0	; select bank0
  7965  02EE  094B               	comf	processGestureData@lr_delta,w
  7966  02EF  00AF               	movwf	??_processGestureData
  7967  02F0  094C               	comf	processGestureData@lr_delta+1,w
  7968  02F1  00B0               	movwf	??_processGestureData+1
  7969  02F2  0AAF               	incf	??_processGestureData,f
  7970  02F3  1903               	skipnz
  7971  02F4  0AB0               	incf	??_processGestureData+1,f
  7972  02F5  082F               	movf	??_processGestureData,w
  7973  02F6  00BF               	movwf	_processGestureData$1255
  7974  02F7  0830               	movf	??_processGestureData+1,w
  7975  02F8  00C0               	movwf	_processGestureData$1255+1
  7976  02F9  2AFF               	goto	l954
  7977  02FA                     l5637:	
  7978  02FA  0020               	movlb	0	; select bank0
  7979  02FB  084C               	movf	processGestureData@lr_delta+1,w
  7980  02FC  00C0               	movwf	_processGestureData$1255+1
  7981  02FD  084B               	movf	processGestureData@lr_delta,w
  7982  02FE  00BF               	movwf	_processGestureData$1255
  7983  02FF                     l954:	
  7984  02FF  0840               	movf	_processGestureData$1255+1,w
  7985  0300  3A80               	xorlw	128
  7986  0301  00AF               	movwf	??_processGestureData
  7987  0302  3080               	movlw	128
  7988  0303  022F               	subwf	??_processGestureData,w
  7989  0304  1D03               	skipz
  7990  0305  2B08               	goto	u4695
  7991  0306  3014               	movlw	20
  7992  0307  023F               	subwf	_processGestureData$1255,w
  7993  0308                     u4695:	
  7994  0308  1803               	skipnc
  7995  0309  286F               	goto	l5499
  7996                           
  7997                           ;APDS9960.c: 776: ;APDS9960.c: 778:             if( (ud_delta == 0) && (lr_delta == 0) )
      +                           {
  7998  030A  0020               	movlb	0	; select bank0
  7999  030B  0849               	movf	processGestureData@ud_delta,w
  8000  030C  044A               	iorwf	processGestureData@ud_delta+1,w
  8001  030D  1D03               	btfss	3,2
  8002  030E  2B17               	goto	l955
  8003  030F  084B               	movf	processGestureData@lr_delta,w
  8004  0310  044C               	iorwf	processGestureData@lr_delta+1,w
  8005  0311  1D03               	btfss	3,2
  8006  0312  2B17               	goto	l955
  8007                           
  8008                           ;APDS9960.c: 779:                 gesture_near_count_++;
  8009  0313  3001               	movlw	1
  8010  0314  07E2               	addwf	_gesture_near_count_,f
  8011  0315  3000               	movlw	0
  8012  0316  3DE3               	addwfc	_gesture_near_count_+1,f
  8013  0317                     l955:	
  8014                           ;APDS9960.c: 780:             }
  8015                           
  8016                           
  8017                           ;APDS9960.c: 782:             if( gesture_near_count_ >= 10 ) {
  8018  0317  0863               	movf	_gesture_near_count_+1,w
  8019  0318  3A80               	xorlw	128
  8020  0319  00AF               	movwf	??_processGestureData
  8021  031A  3080               	movlw	128
  8022  031B  022F               	subwf	??_processGestureData,w
  8023  031C  1D03               	skipz
  8024  031D  2B20               	goto	u4725
  8025  031E  300A               	movlw	10
  8026  031F  0262               	subwf	_gesture_near_count_,w
  8027  0320                     u4725:	
  8028  0320  1C03               	skipc
  8029  0321  286F               	goto	l5499
  8030                           
  8031                           ;APDS9960.c: 783:                 gesture_ud_count_ = 0;
  8032  0322  0020               	movlb	0	; select bank0
  8033  0323  01E6               	clrf	_gesture_ud_count_
  8034  0324  01E7               	clrf	_gesture_ud_count_+1
  8035                           
  8036                           ;APDS9960.c: 784:                 gesture_lr_count_ = 0;
  8037  0325  01E4               	clrf	_gesture_lr_count_
  8038  0326  01E5               	clrf	_gesture_lr_count_+1
  8039                           
  8040                           ;APDS9960.c: 785:                 gesture_ud_delta_ = 0;
  8041  0327  01EA               	clrf	_gesture_ud_delta_
  8042  0328  01EB               	clrf	_gesture_ud_delta_+1
  8043                           
  8044                           ;APDS9960.c: 786:                 gesture_lr_delta_ = 0;
  8045  0329  01E8               	clrf	_gesture_lr_delta_
  8046  032A  01E9               	clrf	_gesture_lr_delta_+1
  8047  032B  286F               	goto	l5499
  8048  032C                     __end_of_processGestureData:	
  8049                           
  8050                           	psect	text19
  8051  0BC6                     __ptext19:	
  8052 ;; *************** function ___wmul *****************
  8053 ;; Defined at:
  8054 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
  8055 ;; Parameters:    Size  Location     Type
  8056 ;;  multiplier      2    0[BANK0 ] unsigned int 
  8057 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  8058 ;; Auto vars:     Size  Location     Type
  8059 ;;  product         2    4[BANK0 ] unsigned int 
  8060 ;; Return value:  Size  Location     Type
  8061 ;;                  2    0[BANK0 ] unsigned int 
  8062 ;; Registers used:
  8063 ;;		wreg, status,2, status,0
  8064 ;; Tracked objects:
  8065 ;;		On entry : 0/0
  8066 ;;		On exit  : 0/0
  8067 ;;		Unchanged: 0/0
  8068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8069 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8070 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8071 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8072 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8073 ;;Total ram usage:        6 bytes
  8074 ;; Hardware stack levels used:    1
  8075 ;; Hardware stack levels required when called:    5
  8076 ;; This function calls:
  8077 ;;		Nothing
  8078 ;; This function is called by:
  8079 ;;		_processGestureData
  8080 ;; This function uses a non-reentrant model
  8081 ;;
  8082                           
  8083                           
  8084                           ;psect for function ___wmul
  8085  0BC6                     ___wmul:	
  8086                           
  8087                           ;incstack = 0
  8088                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  8089  0BC6  0020               	movlb	0	; select bank0
  8090  0BC7  01A4               	clrf	___wmul@product
  8091  0BC8  01A5               	clrf	___wmul@product+1
  8092  0BC9                     l5341:	
  8093  0BC9  1C20               	btfss	___wmul@multiplier,0
  8094  0BCA  2BCF               	goto	l1243
  8095  0BCB  0822               	movf	___wmul@multiplicand,w
  8096  0BCC  07A4               	addwf	___wmul@product,f
  8097  0BCD  0823               	movf	___wmul@multiplicand+1,w
  8098  0BCE  3DA5               	addwfc	___wmul@product+1,f
  8099  0BCF                     l1243:	
  8100  0BCF  3001               	movlw	1
  8101  0BD0                     u4055:	
  8102  0BD0  35A2               	lslf	___wmul@multiplicand,f
  8103  0BD1  0DA3               	rlf	___wmul@multiplicand+1,f
  8104  0BD2  0B89               	decfsz	9,f
  8105  0BD3  2BD0               	goto	u4055
  8106  0BD4  3001               	movlw	1
  8107  0BD5                     u4065:	
  8108  0BD5  36A1               	lsrf	___wmul@multiplier+1,f
  8109  0BD6  0CA0               	rrf	___wmul@multiplier,f
  8110  0BD7  0B89               	decfsz	9,f
  8111  0BD8  2BD5               	goto	u4065
  8112  0BD9  0820               	movf	___wmul@multiplier,w
  8113  0BDA  0421               	iorwf	___wmul@multiplier+1,w
  8114  0BDB  1D03               	btfss	3,2
  8115  0BDC  2BC9               	goto	l5341
  8116  0BDD  0825               	movf	___wmul@product+1,w
  8117  0BDE  00A1               	movwf	?___wmul+1
  8118  0BDF  0824               	movf	___wmul@product,w
  8119  0BE0  00A0               	movwf	?___wmul
  8120  0BE1  0008               	return
  8121  0BE2                     __end_of___wmul:	
  8122                           
  8123                           	psect	text20
  8124  0781                     __ptext20:	
  8125 ;; *************** function ___awdiv *****************
  8126 ;; Defined at:
  8127 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awdiv.c"
  8128 ;; Parameters:    Size  Location     Type
  8129 ;;  divisor         2    6[BANK0 ] int 
  8130 ;;  dividend        2    8[BANK0 ] int 
  8131 ;; Auto vars:     Size  Location     Type
  8132 ;;  quotient        2   13[BANK0 ] int 
  8133 ;;  sign            1   12[BANK0 ] unsigned char 
  8134 ;;  counter         1   11[BANK0 ] unsigned char 
  8135 ;; Return value:  Size  Location     Type
  8136 ;;                  2    6[BANK0 ] int 
  8137 ;; Registers used:
  8138 ;;		wreg, status,2, status,0
  8139 ;; Tracked objects:
  8140 ;;		On entry : 0/0
  8141 ;;		On exit  : 0/0
  8142 ;;		Unchanged: 0/0
  8143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8144 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8145 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8146 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8147 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8148 ;;Total ram usage:        9 bytes
  8149 ;; Hardware stack levels used:    1
  8150 ;; Hardware stack levels required when called:    5
  8151 ;; This function calls:
  8152 ;;		Nothing
  8153 ;; This function is called by:
  8154 ;;		_processGestureData
  8155 ;; This function uses a non-reentrant model
  8156 ;;
  8157                           
  8158                           
  8159                           ;psect for function ___awdiv
  8160  0781                     ___awdiv:	
  8161                           
  8162                           ;incstack = 0
  8163                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  8164  0781  0020               	movlb	0	; select bank0
  8165  0782  01AC               	clrf	___awdiv@sign
  8166  0783  1FA7               	btfss	___awdiv@divisor+1,7
  8167  0784  2F8C               	goto	l5361
  8168  0785  09A6               	comf	___awdiv@divisor,f
  8169  0786  09A7               	comf	___awdiv@divisor+1,f
  8170  0787  0AA6               	incf	___awdiv@divisor,f
  8171  0788  1903               	skipnz
  8172  0789  0AA7               	incf	___awdiv@divisor+1,f
  8173  078A  01AC               	clrf	___awdiv@sign
  8174  078B  0AAC               	incf	___awdiv@sign,f
  8175  078C                     l5361:	
  8176  078C  1FA9               	btfss	___awdiv@dividend+1,7
  8177  078D  2F97               	goto	l5367
  8178  078E  09A8               	comf	___awdiv@dividend,f
  8179  078F  09A9               	comf	___awdiv@dividend+1,f
  8180  0790  0AA8               	incf	___awdiv@dividend,f
  8181  0791  1903               	skipnz
  8182  0792  0AA9               	incf	___awdiv@dividend+1,f
  8183  0793  3001               	movlw	1
  8184  0794  00AA               	movwf	??___awdiv
  8185  0795  082A               	movf	??___awdiv,w
  8186  0796  06AC               	xorwf	___awdiv@sign,f
  8187  0797                     l5367:	
  8188  0797  01AD               	clrf	___awdiv@quotient
  8189  0798  01AE               	clrf	___awdiv@quotient+1
  8190  0799  0826               	movf	___awdiv@divisor,w
  8191  079A  0427               	iorwf	___awdiv@divisor+1,w
  8192  079B  1903               	btfsc	3,2
  8193  079C  2FC6               	goto	l5389
  8194  079D  01AB               	clrf	___awdiv@counter
  8195  079E  0AAB               	incf	___awdiv@counter,f
  8196  079F                     l5377:	
  8197  079F  1BA7               	btfsc	___awdiv@divisor+1,7
  8198  07A0  2FAB               	goto	l5379
  8199  07A1  3001               	movlw	1
  8200  07A2                     u4115:	
  8201  07A2  35A6               	lslf	___awdiv@divisor,f
  8202  07A3  0DA7               	rlf	___awdiv@divisor+1,f
  8203  07A4  0B89               	decfsz	9,f
  8204  07A5  2FA2               	goto	u4115
  8205  07A6  3001               	movlw	1
  8206  07A7  00AA               	movwf	??___awdiv
  8207  07A8  082A               	movf	??___awdiv,w
  8208  07A9  07AB               	addwf	___awdiv@counter,f
  8209  07AA  2F9F               	goto	l5377
  8210  07AB                     l5379:	
  8211  07AB  3001               	movlw	1
  8212  07AC                     u4135:	
  8213  07AC  35AD               	lslf	___awdiv@quotient,f
  8214  07AD  0DAE               	rlf	___awdiv@quotient+1,f
  8215  07AE  0B89               	decfsz	9,f
  8216  07AF  2FAC               	goto	u4135
  8217  07B0  0827               	movf	___awdiv@divisor+1,w
  8218  07B1  0229               	subwf	___awdiv@dividend+1,w
  8219  07B2  1D03               	skipz
  8220  07B3  2FB6               	goto	u4145
  8221  07B4  0826               	movf	___awdiv@divisor,w
  8222  07B5  0228               	subwf	___awdiv@dividend,w
  8223  07B6                     u4145:	
  8224  07B6  1C03               	skipc
  8225  07B7  2FBD               	goto	l5385
  8226  07B8  0826               	movf	___awdiv@divisor,w
  8227  07B9  02A8               	subwf	___awdiv@dividend,f
  8228  07BA  0827               	movf	___awdiv@divisor+1,w
  8229  07BB  3BA9               	subwfb	___awdiv@dividend+1,f
  8230  07BC  142D               	bsf	___awdiv@quotient,0
  8231  07BD                     l5385:	
  8232  07BD  3001               	movlw	1
  8233  07BE                     u4155:	
  8234  07BE  36A7               	lsrf	___awdiv@divisor+1,f
  8235  07BF  0CA6               	rrf	___awdiv@divisor,f
  8236  07C0  0B89               	decfsz	9,f
  8237  07C1  2FBE               	goto	u4155
  8238  07C2  3001               	movlw	1
  8239  07C3  02AB               	subwf	___awdiv@counter,f
  8240  07C4  1D03               	btfss	3,2
  8241  07C5  2FAB               	goto	l5379
  8242  07C6                     l5389:	
  8243  07C6  082C               	movf	___awdiv@sign,w
  8244  07C7  1903               	btfsc	3,2
  8245  07C8  2FCE               	goto	l5393
  8246  07C9  09AD               	comf	___awdiv@quotient,f
  8247  07CA  09AE               	comf	___awdiv@quotient+1,f
  8248  07CB  0AAD               	incf	___awdiv@quotient,f
  8249  07CC  1903               	skipnz
  8250  07CD  0AAE               	incf	___awdiv@quotient+1,f
  8251  07CE                     l5393:	
  8252  07CE  082E               	movf	___awdiv@quotient+1,w
  8253  07CF  00A7               	movwf	?___awdiv+1
  8254  07D0  082D               	movf	___awdiv@quotient,w
  8255  07D1  00A6               	movwf	?___awdiv
  8256  07D2  0008               	return
  8257  07D3                     __end_of___awdiv:	
  8258                           
  8259                           	psect	text21
  8260  0AED                     __ptext21:	
  8261 ;; *************** function _isGestureAvailable *****************
  8262 ;; Defined at:
  8263 ;;		line 537 in file "APDS9960.c"
  8264 ;; Parameters:    Size  Location     Type
  8265 ;;		None
  8266 ;; Auto vars:     Size  Location     Type
  8267 ;;  val             1   10[BANK0 ] unsigned char 
  8268 ;; Return value:  Size  Location     Type
  8269 ;;                  1    wreg      _Bool 
  8270 ;; Registers used:
  8271 ;;		wreg, status,2, status,0, pclath, cstack
  8272 ;; Tracked objects:
  8273 ;;		On entry : 0/0
  8274 ;;		On exit  : 0/0
  8275 ;;		Unchanged: 0/0
  8276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8277 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8278 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8279 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8280 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8281 ;;Total ram usage:        2 bytes
  8282 ;; Hardware stack levels used:    1
  8283 ;; Hardware stack levels required when called:    8
  8284 ;; This function calls:
  8285 ;;		_wireReadDataByte
  8286 ;; This function is called by:
  8287 ;;		_main
  8288 ;;		_readGesture
  8289 ;; This function uses a non-reentrant model
  8290 ;;
  8291                           
  8292                           
  8293                           ;psect for function _isGestureAvailable
  8294  0AED                     _isGestureAvailable:	
  8295                           
  8296                           ;APDS9960.c: 539:     uint8_t val;;APDS9960.c: 542:     val=wireReadDataByte(0xAF);
  8297                           
  8298                           ;incstack = 0
  8299                           ; Regs used in _isGestureAvailable: [wreg+status,2+status,0+pclath+cstack]
  8300  0AED  30AF               	movlw	175
  8301  0AEE  318C  2400  318A   	fcall	_wireReadDataByte
  8302  0AF1  0020               	movlb	0	; select bank0
  8303  0AF2  00A9               	movwf	??_isGestureAvailable
  8304  0AF3  0829               	movf	??_isGestureAvailable,w
  8305  0AF4  00AA               	movwf	isGestureAvailable@val
  8306                           
  8307                           ;APDS9960.c: 545:     val &= 0b00000001;
  8308  0AF5  3001               	movlw	1
  8309  0AF6  00A9               	movwf	??_isGestureAvailable
  8310  0AF7  0829               	movf	??_isGestureAvailable,w
  8311  0AF8  05AA               	andwf	isGestureAvailable@val,f
  8312                           
  8313                           ;APDS9960.c: 548:     if( val == 1) {
  8314  0AF9  032A               	decf	isGestureAvailable@val,w
  8315  0AFA  1D03               	btfss	3,2
  8316  0AFB  2AFE               	goto	l5409
  8317                           
  8318                           ;APDS9960.c: 549:         return 1;
  8319  0AFC  3001               	movlw	1
  8320  0AFD  0008               	return
  8321  0AFE                     l5409:	
  8322                           
  8323                           ;APDS9960.c: 551:         return 0;
  8324  0AFE  3000               	movlw	0
  8325  0AFF  0008               	return
  8326  0B00                     __end_of_isGestureAvailable:	
  8327                           
  8328                           	psect	text22
  8329  032C                     __ptext22:	
  8330 ;; *************** function _decodeGesture *****************
  8331 ;; Defined at:
  8332 ;;		line 795 in file "APDS9960.c"
  8333 ;; Parameters:    Size  Location     Type
  8334 ;;		None
  8335 ;; Auto vars:     Size  Location     Type
  8336 ;;		None
  8337 ;; Return value:  Size  Location     Type
  8338 ;;                  1    wreg      _Bool 
  8339 ;; Registers used:
  8340 ;;		wreg, status,2, status,0
  8341 ;; Tracked objects:
  8342 ;;		On entry : 0/0
  8343 ;;		On exit  : 0/0
  8344 ;;		Unchanged: 0/0
  8345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8346 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8347 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8348 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8349 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8350 ;;Total ram usage:       18 bytes
  8351 ;; Hardware stack levels used:    1
  8352 ;; Hardware stack levels required when called:    5
  8353 ;; This function calls:
  8354 ;;		Nothing
  8355 ;; This function is called by:
  8356 ;;		_readGesture
  8357 ;; This function uses a non-reentrant model
  8358 ;;
  8359                           
  8360                           
  8361                           ;psect for function _decodeGesture
  8362  032C                     _decodeGesture:	
  8363                           
  8364                           ;APDS9960.c: 798:     if( gesture_state_ == NEAR_STATE ) {
  8365                           
  8366                           ;incstack = 0
  8367                           ; Regs used in _decodeGesture: [wreg+status,2+status,0]
  8368  032C  0020               	movlb	0	; select bank0
  8369  032D  035E               	decf	_gesture_state_,w
  8370  032E  045F               	iorwf	_gesture_state_+1,w
  8371  032F  1D03               	btfss	3,2
  8372  0330  2B38               	goto	l5659
  8373                           
  8374                           ;APDS9960.c: 799:         gesture_motion_ = DIR_NEAR;
  8375  0331  3005               	movlw	5
  8376  0332  0022               	movlb	2	; select bank2
  8377  0333  00E8               	movwf	_gesture_motion_^(0+256)
  8378  0334  3000               	movlw	0
  8379  0335  00E9               	movwf	(_gesture_motion_^(0+256)+1)
  8380                           
  8381                           ;APDS9960.c: 800:         return 1;
  8382  0336  3001               	movlw	1
  8383  0337  0008               	return
  8384  0338                     l5659:	
  8385  0338  3002               	movlw	2
  8386  0339  065E               	xorwf	_gesture_state_,w
  8387  033A  045F               	iorwf	_gesture_state_+1,w
  8388  033B  1D03               	btfss	3,2
  8389  033C  2B44               	goto	l5665
  8390                           
  8391                           ;APDS9960.c: 802:         gesture_motion_ = DIR_FAR;
  8392  033D  3006               	movlw	6
  8393  033E  0022               	movlb	2	; select bank2
  8394  033F  00E8               	movwf	_gesture_motion_^(0+256)
  8395  0340  3000               	movlw	0
  8396  0341  00E9               	movwf	(_gesture_motion_^(0+256)+1)
  8397                           
  8398                           ;APDS9960.c: 803:         return 1;
  8399  0342  3001               	movlw	1
  8400  0343  0008               	return
  8401  0344                     l5665:	
  8402                           
  8403                           ;APDS9960.c: 807:     if( (gesture_ud_count_ == -1) && (gesture_lr_count_ == 0) ) {
  8404  0344  0A66               	incf	_gesture_ud_count_,w
  8405  0345  1D03               	skipz
  8406  0346  2B50               	goto	l5671
  8407  0347  0A67               	incf	_gesture_ud_count_+1,w
  8408  0348  1D03               	btfss	3,2
  8409  0349  2B50               	goto	l5671
  8410  034A  0864               	movf	_gesture_lr_count_,w
  8411  034B  0465               	iorwf	_gesture_lr_count_+1,w
  8412  034C  1D03               	btfss	3,2
  8413  034D  2B50               	goto	l5671
  8414  034E                     l5669:	
  8415                           
  8416                           ;APDS9960.c: 808:         gesture_motion_ = DIR_UP;
  8417  034E  3003               	movlw	3
  8418  034F  2B6F               	goto	L7
  8419  0350                     l5671:	
  8420                           ;APDS9960.c: 809:     } else if( (gesture_ud_count_ == 1) && (gesture_lr_count_ == 0) ) 
      +                          {
  8421                           
  8422  0350  0366               	decf	_gesture_ud_count_,w
  8423  0351  0467               	iorwf	_gesture_ud_count_+1,w
  8424  0352  1D03               	btfss	3,2
  8425  0353  2B5A               	goto	l5677
  8426  0354  0864               	movf	_gesture_lr_count_,w
  8427  0355  0465               	iorwf	_gesture_lr_count_+1,w
  8428  0356  1D03               	btfss	3,2
  8429  0357  2B5A               	goto	l5677
  8430  0358                     l5675:	
  8431                           
  8432                           ;APDS9960.c: 810:         gesture_motion_ = DIR_DOWN;
  8433  0358  3004               	movlw	4
  8434  0359  2B6F               	goto	L7
  8435  035A                     l5677:	
  8436                           ;APDS9960.c: 811:     } else if( (gesture_ud_count_ == 0) && (gesture_lr_count_ == 1) ) 
      +                          {
  8437                           
  8438  035A  0866               	movf	_gesture_ud_count_,w
  8439  035B  0467               	iorwf	_gesture_ud_count_+1,w
  8440  035C  1D03               	btfss	3,2
  8441  035D  2B64               	goto	l5683
  8442  035E  0364               	decf	_gesture_lr_count_,w
  8443  035F  0465               	iorwf	_gesture_lr_count_+1,w
  8444  0360  1D03               	btfss	3,2
  8445  0361  2B64               	goto	l5683
  8446  0362                     l5681:	
  8447                           
  8448                           ;APDS9960.c: 812:         gesture_motion_ = DIR_RIGHT;
  8449  0362  3002               	movlw	2
  8450  0363  2B6F               	goto	L7
  8451  0364                     l5683:	
  8452                           ;APDS9960.c: 813:     } else if( (gesture_ud_count_ == 0) && (gesture_lr_count_ == -1) )
      +                           {
  8453                           
  8454  0364  0866               	movf	_gesture_ud_count_,w
  8455  0365  0467               	iorwf	_gesture_ud_count_+1,w
  8456  0366  1D03               	btfss	3,2
  8457  0367  2B74               	goto	l5689
  8458  0368  0A64               	incf	_gesture_lr_count_,w
  8459  0369  1D03               	skipz
  8460  036A  2B74               	goto	l5689
  8461  036B  0A65               	incf	_gesture_lr_count_+1,w
  8462  036C  1D03               	btfss	3,2
  8463  036D  2B74               	goto	l5689
  8464  036E                     l5687:	
  8465                           
  8466                           ;APDS9960.c: 814:         gesture_motion_ = DIR_LEFT;
  8467  036E  3001               	movlw	1
  8468  036F                     L7:	
  8469  036F  0022               	movlb	2	; select bank2
  8470  0370  00E8               	movwf	_gesture_motion_^(0+256)
  8471  0371  3000               	movlw	0
  8472  0372  00E9               	movwf	(_gesture_motion_^(0+256)+1)
  8473                           
  8474                           ;APDS9960.c: 815:     } else if( (gesture_ud_count_ == -1) && (gesture_lr_count_ == 1) )
      +                           {
  8475  0373  2CBA               	goto	l5765
  8476  0374                     l5689:	
  8477  0374  0A66               	incf	_gesture_ud_count_,w
  8478  0375  1D03               	skipz
  8479  0376  2BC5               	goto	l5707
  8480  0377  0A67               	incf	_gesture_ud_count_+1,w
  8481  0378  1D03               	btfss	3,2
  8482  0379  2BC5               	goto	l5707
  8483  037A  0364               	decf	_gesture_lr_count_,w
  8484  037B  0465               	iorwf	_gesture_lr_count_+1,w
  8485  037C  1D03               	btfss	3,2
  8486  037D  2BC5               	goto	l5707
  8487                           
  8488                           ;APDS9960.c: 816:         if( ((gesture_ud_delta_) > 0 ? (gesture_ud_delta_) : -(gesture
      +                          _ud_delta_)) > ((gesture_lr_delta_) > 0 ? (gesture_lr_delta_) : -(gesture_lr_delta_)) ) 
      +                          {
  8489  037E  086B               	movf	_gesture_ud_delta_+1,w
  8490  037F  3A80               	xorlw	128
  8491  0380  00A0               	movwf	??_decodeGesture
  8492  0381  3080               	movlw	128
  8493  0382  0220               	subwf	??_decodeGesture,w
  8494  0383  1D03               	skipz
  8495  0384  2B87               	goto	u4855
  8496  0385  3001               	movlw	1
  8497  0386  026A               	subwf	_gesture_ud_delta_,w
  8498  0387                     u4855:	
  8499  0387  1803               	skipnc
  8500  0388  2B96               	goto	l5697
  8501  0389  0020               	movlb	0	; select bank0
  8502  038A  096A               	comf	_gesture_ud_delta_,w
  8503  038B  00A0               	movwf	??_decodeGesture
  8504  038C  096B               	comf	_gesture_ud_delta_+1,w
  8505  038D  00A1               	movwf	??_decodeGesture+1
  8506  038E  0AA0               	incf	??_decodeGesture,f
  8507  038F  1903               	skipnz
  8508  0390  0AA1               	incf	??_decodeGesture+1,f
  8509  0391  0820               	movf	??_decodeGesture,w
  8510  0392  00A2               	movwf	_decodeGesture$1257
  8511  0393  0821               	movf	??_decodeGesture+1,w
  8512  0394  00A3               	movwf	_decodeGesture$1257+1
  8513  0395  2B9B               	goto	l976
  8514  0396                     l5697:	
  8515  0396  0020               	movlb	0	; select bank0
  8516  0397  086B               	movf	_gesture_ud_delta_+1,w
  8517  0398  00A3               	movwf	_decodeGesture$1257+1
  8518  0399  086A               	movf	_gesture_ud_delta_,w
  8519  039A  00A2               	movwf	_decodeGesture$1257
  8520  039B                     l976:	
  8521  039B  0869               	movf	_gesture_lr_delta_+1,w
  8522  039C  3A80               	xorlw	128
  8523  039D  00A0               	movwf	??_decodeGesture
  8524  039E  3080               	movlw	128
  8525  039F  0220               	subwf	??_decodeGesture,w
  8526  03A0  1D03               	skipz
  8527  03A1  2BA4               	goto	u4865
  8528  03A2  3001               	movlw	1
  8529  03A3  0268               	subwf	_gesture_lr_delta_,w
  8530  03A4                     u4865:	
  8531  03A4  1803               	skipnc
  8532  03A5  2BB3               	goto	l5701
  8533  03A6  0020               	movlb	0	; select bank0
  8534  03A7  0968               	comf	_gesture_lr_delta_,w
  8535  03A8  00A0               	movwf	??_decodeGesture
  8536  03A9  0969               	comf	_gesture_lr_delta_+1,w
  8537  03AA  00A1               	movwf	??_decodeGesture+1
  8538  03AB  0AA0               	incf	??_decodeGesture,f
  8539  03AC  1903               	skipnz
  8540  03AD  0AA1               	incf	??_decodeGesture+1,f
  8541  03AE  0820               	movf	??_decodeGesture,w
  8542  03AF  00A4               	movwf	_decodeGesture$1258
  8543  03B0  0821               	movf	??_decodeGesture+1,w
  8544  03B1  00A5               	movwf	_decodeGesture$1258+1
  8545  03B2  2BB8               	goto	l980
  8546  03B3                     l5701:	
  8547  03B3  0020               	movlb	0	; select bank0
  8548  03B4  0869               	movf	_gesture_lr_delta_+1,w
  8549  03B5  00A5               	movwf	_decodeGesture$1258+1
  8550  03B6  0868               	movf	_gesture_lr_delta_,w
  8551  03B7  00A4               	movwf	_decodeGesture$1258
  8552  03B8                     l980:	
  8553  03B8  0825               	movf	_decodeGesture$1258+1,w
  8554  03B9  3A80               	xorlw	128
  8555  03BA  00A0               	movwf	??_decodeGesture
  8556  03BB  0823               	movf	_decodeGesture$1257+1,w
  8557  03BC  3A80               	xorlw	128
  8558  03BD  0220               	subwf	??_decodeGesture,w
  8559  03BE  1D03               	skipz
  8560  03BF  2BC2               	goto	u4875
  8561  03C0  0822               	movf	_decodeGesture$1257,w
  8562  03C1  0224               	subwf	_decodeGesture$1258,w
  8563  03C2                     u4875:	
  8564  03C2  1C03               	btfss	3,0
  8565  03C3  2B4E               	goto	l5669
  8566  03C4  2B62               	goto	l5681
  8567  03C5                     l5707:	
  8568  03C5  0366               	decf	_gesture_ud_count_,w
  8569  03C6  0467               	iorwf	_gesture_ud_count_+1,w
  8570  03C7  1D03               	btfss	3,2
  8571  03C8  2C16               	goto	l5725
  8572  03C9  0A64               	incf	_gesture_lr_count_,w
  8573  03CA  1D03               	skipz
  8574  03CB  2C16               	goto	l5725
  8575  03CC  0A65               	incf	_gesture_lr_count_+1,w
  8576  03CD  1D03               	btfss	3,2
  8577  03CE  2C16               	goto	l5725
  8578                           
  8579                           ;APDS9960.c: 822:         if( ((gesture_ud_delta_) > 0 ? (gesture_ud_delta_) : -(gesture
      +                          _ud_delta_)) > ((gesture_lr_delta_) > 0 ? (gesture_lr_delta_) : -(gesture_lr_delta_)) ) 
      +                          {
  8580  03CF  086B               	movf	_gesture_ud_delta_+1,w
  8581  03D0  3A80               	xorlw	128
  8582  03D1  00A0               	movwf	??_decodeGesture
  8583  03D2  3080               	movlw	128
  8584  03D3  0220               	subwf	??_decodeGesture,w
  8585  03D4  1D03               	skipz
  8586  03D5  2BD8               	goto	u4905
  8587  03D6  3001               	movlw	1
  8588  03D7  026A               	subwf	_gesture_ud_delta_,w
  8589  03D8                     u4905:	
  8590  03D8  1803               	skipnc
  8591  03D9  2BE7               	goto	l5715
  8592  03DA  0020               	movlb	0	; select bank0
  8593  03DB  096A               	comf	_gesture_ud_delta_,w
  8594  03DC  00A0               	movwf	??_decodeGesture
  8595  03DD  096B               	comf	_gesture_ud_delta_+1,w
  8596  03DE  00A1               	movwf	??_decodeGesture+1
  8597  03DF  0AA0               	incf	??_decodeGesture,f
  8598  03E0  1903               	skipnz
  8599  03E1  0AA1               	incf	??_decodeGesture+1,f
  8600  03E2  0820               	movf	??_decodeGesture,w
  8601  03E3  00A6               	movwf	_decodeGesture$1259
  8602  03E4  0821               	movf	??_decodeGesture+1,w
  8603  03E5  00A7               	movwf	_decodeGesture$1259+1
  8604  03E6  2BEC               	goto	l988
  8605  03E7                     l5715:	
  8606  03E7  0020               	movlb	0	; select bank0
  8607  03E8  086B               	movf	_gesture_ud_delta_+1,w
  8608  03E9  00A7               	movwf	_decodeGesture$1259+1
  8609  03EA  086A               	movf	_gesture_ud_delta_,w
  8610  03EB  00A6               	movwf	_decodeGesture$1259
  8611  03EC                     l988:	
  8612  03EC  0869               	movf	_gesture_lr_delta_+1,w
  8613  03ED  3A80               	xorlw	128
  8614  03EE  00A0               	movwf	??_decodeGesture
  8615  03EF  3080               	movlw	128
  8616  03F0  0220               	subwf	??_decodeGesture,w
  8617  03F1  1D03               	skipz
  8618  03F2  2BF5               	goto	u4915
  8619  03F3  3001               	movlw	1
  8620  03F4  0268               	subwf	_gesture_lr_delta_,w
  8621  03F5                     u4915:	
  8622  03F5  1803               	skipnc
  8623  03F6  2C04               	goto	l5719
  8624  03F7  0020               	movlb	0	; select bank0
  8625  03F8  0968               	comf	_gesture_lr_delta_,w
  8626  03F9  00A0               	movwf	??_decodeGesture
  8627  03FA  0969               	comf	_gesture_lr_delta_+1,w
  8628  03FB  00A1               	movwf	??_decodeGesture+1
  8629  03FC  0AA0               	incf	??_decodeGesture,f
  8630  03FD  1903               	skipnz
  8631  03FE  0AA1               	incf	??_decodeGesture+1,f
  8632  03FF  0820               	movf	??_decodeGesture,w
  8633  0400  00A8               	movwf	_decodeGesture$1260
  8634  0401  0821               	movf	??_decodeGesture+1,w
  8635  0402  00A9               	movwf	_decodeGesture$1260+1
  8636  0403  2C09               	goto	l992
  8637  0404                     l5719:	
  8638  0404  0020               	movlb	0	; select bank0
  8639  0405  0869               	movf	_gesture_lr_delta_+1,w
  8640  0406  00A9               	movwf	_decodeGesture$1260+1
  8641  0407  0868               	movf	_gesture_lr_delta_,w
  8642  0408  00A8               	movwf	_decodeGesture$1260
  8643  0409                     l992:	
  8644  0409  0829               	movf	_decodeGesture$1260+1,w
  8645  040A  3A80               	xorlw	128
  8646  040B  00A0               	movwf	??_decodeGesture
  8647  040C  0827               	movf	_decodeGesture$1259+1,w
  8648  040D  3A80               	xorlw	128
  8649  040E  0220               	subwf	??_decodeGesture,w
  8650  040F  1D03               	skipz
  8651  0410  2C13               	goto	u4925
  8652  0411  0826               	movf	_decodeGesture$1259,w
  8653  0412  0228               	subwf	_decodeGesture$1260,w
  8654  0413                     u4925:	
  8655  0413  1C03               	btfss	3,0
  8656  0414  2B58               	goto	l5675
  8657  0415  2B6E               	goto	l5687
  8658  0416                     l5725:	
  8659  0416  0A66               	incf	_gesture_ud_count_,w
  8660  0417  1D03               	skipz
  8661  0418  2C69               	goto	l5743
  8662  0419  0A67               	incf	_gesture_ud_count_+1,w
  8663  041A  1D03               	btfss	3,2
  8664  041B  2C69               	goto	l5743
  8665  041C  0A64               	incf	_gesture_lr_count_,w
  8666  041D  1D03               	skipz
  8667  041E  2C69               	goto	l5743
  8668  041F  0A65               	incf	_gesture_lr_count_+1,w
  8669  0420  1D03               	btfss	3,2
  8670  0421  2C69               	goto	l5743
  8671                           
  8672                           ;APDS9960.c: 828:         if( ((gesture_ud_delta_) > 0 ? (gesture_ud_delta_) : -(gesture
      +                          _ud_delta_)) > ((gesture_lr_delta_) > 0 ? (gesture_lr_delta_) : -(gesture_lr_delta_)) ) 
      +                          {
  8673  0422  086B               	movf	_gesture_ud_delta_+1,w
  8674  0423  3A80               	xorlw	128
  8675  0424  00A0               	movwf	??_decodeGesture
  8676  0425  3080               	movlw	128
  8677  0426  0220               	subwf	??_decodeGesture,w
  8678  0427  1D03               	skipz
  8679  0428  2C2B               	goto	u4955
  8680  0429  3001               	movlw	1
  8681  042A  026A               	subwf	_gesture_ud_delta_,w
  8682  042B                     u4955:	
  8683  042B  1803               	skipnc
  8684  042C  2C3A               	goto	l5733
  8685  042D  0020               	movlb	0	; select bank0
  8686  042E  096A               	comf	_gesture_ud_delta_,w
  8687  042F  00A0               	movwf	??_decodeGesture
  8688  0430  096B               	comf	_gesture_ud_delta_+1,w
  8689  0431  00A1               	movwf	??_decodeGesture+1
  8690  0432  0AA0               	incf	??_decodeGesture,f
  8691  0433  1903               	skipnz
  8692  0434  0AA1               	incf	??_decodeGesture+1,f
  8693  0435  0820               	movf	??_decodeGesture,w
  8694  0436  00AA               	movwf	_decodeGesture$1261
  8695  0437  0821               	movf	??_decodeGesture+1,w
  8696  0438  00AB               	movwf	_decodeGesture$1261+1
  8697  0439  2C3F               	goto	l1000
  8698  043A                     l5733:	
  8699  043A  0020               	movlb	0	; select bank0
  8700  043B  086B               	movf	_gesture_ud_delta_+1,w
  8701  043C  00AB               	movwf	_decodeGesture$1261+1
  8702  043D  086A               	movf	_gesture_ud_delta_,w
  8703  043E  00AA               	movwf	_decodeGesture$1261
  8704  043F                     l1000:	
  8705  043F  0869               	movf	_gesture_lr_delta_+1,w
  8706  0440  3A80               	xorlw	128
  8707  0441  00A0               	movwf	??_decodeGesture
  8708  0442  3080               	movlw	128
  8709  0443  0220               	subwf	??_decodeGesture,w
  8710  0444  1D03               	skipz
  8711  0445  2C48               	goto	u4965
  8712  0446  3001               	movlw	1
  8713  0447  0268               	subwf	_gesture_lr_delta_,w
  8714  0448                     u4965:	
  8715  0448  1803               	skipnc
  8716  0449  2C57               	goto	l5737
  8717  044A  0020               	movlb	0	; select bank0
  8718  044B  0968               	comf	_gesture_lr_delta_,w
  8719  044C  00A0               	movwf	??_decodeGesture
  8720  044D  0969               	comf	_gesture_lr_delta_+1,w
  8721  044E  00A1               	movwf	??_decodeGesture+1
  8722  044F  0AA0               	incf	??_decodeGesture,f
  8723  0450  1903               	skipnz
  8724  0451  0AA1               	incf	??_decodeGesture+1,f
  8725  0452  0820               	movf	??_decodeGesture,w
  8726  0453  00AC               	movwf	_decodeGesture$1262
  8727  0454  0821               	movf	??_decodeGesture+1,w
  8728  0455  00AD               	movwf	_decodeGesture$1262+1
  8729  0456  2C5C               	goto	l1004
  8730  0457                     l5737:	
  8731  0457  0020               	movlb	0	; select bank0
  8732  0458  0869               	movf	_gesture_lr_delta_+1,w
  8733  0459  00AD               	movwf	_decodeGesture$1262+1
  8734  045A  0868               	movf	_gesture_lr_delta_,w
  8735  045B  00AC               	movwf	_decodeGesture$1262
  8736  045C                     l1004:	
  8737  045C  082D               	movf	_decodeGesture$1262+1,w
  8738  045D  3A80               	xorlw	128
  8739  045E  00A0               	movwf	??_decodeGesture
  8740  045F  082B               	movf	_decodeGesture$1261+1,w
  8741  0460  3A80               	xorlw	128
  8742  0461  0220               	subwf	??_decodeGesture,w
  8743  0462  1D03               	skipz
  8744  0463  2C66               	goto	u4975
  8745  0464  082A               	movf	_decodeGesture$1261,w
  8746  0465  022C               	subwf	_decodeGesture$1262,w
  8747  0466                     u4975:	
  8748  0466  1C03               	btfss	3,0
  8749  0467  2B4E               	goto	l5669
  8750  0468  2B6E               	goto	l5687
  8751  0469                     l5743:	
  8752  0469  0366               	decf	_gesture_ud_count_,w
  8753  046A  0467               	iorwf	_gesture_ud_count_+1,w
  8754  046B  1D03               	btfss	3,2
  8755  046C  2CB8               	goto	l5761
  8756  046D  0364               	decf	_gesture_lr_count_,w
  8757  046E  0465               	iorwf	_gesture_lr_count_+1,w
  8758  046F  1D03               	btfss	3,2
  8759  0470  2CB8               	goto	l5761
  8760                           
  8761                           ;APDS9960.c: 834:         if( ((gesture_ud_delta_) > 0 ? (gesture_ud_delta_) : -(gesture
      +                          _ud_delta_)) > ((gesture_lr_delta_) > 0 ? (gesture_lr_delta_) : -(gesture_lr_delta_)) ) 
      +                          {
  8762  0471  086B               	movf	_gesture_ud_delta_+1,w
  8763  0472  3A80               	xorlw	128
  8764  0473  00A0               	movwf	??_decodeGesture
  8765  0474  3080               	movlw	128
  8766  0475  0220               	subwf	??_decodeGesture,w
  8767  0476  1D03               	skipz
  8768  0477  2C7A               	goto	u5005
  8769  0478  3001               	movlw	1
  8770  0479  026A               	subwf	_gesture_ud_delta_,w
  8771  047A                     u5005:	
  8772  047A  1803               	skipnc
  8773  047B  2C89               	goto	l5751
  8774  047C  0020               	movlb	0	; select bank0
  8775  047D  096A               	comf	_gesture_ud_delta_,w
  8776  047E  00A0               	movwf	??_decodeGesture
  8777  047F  096B               	comf	_gesture_ud_delta_+1,w
  8778  0480  00A1               	movwf	??_decodeGesture+1
  8779  0481  0AA0               	incf	??_decodeGesture,f
  8780  0482  1903               	skipnz
  8781  0483  0AA1               	incf	??_decodeGesture+1,f
  8782  0484  0820               	movf	??_decodeGesture,w
  8783  0485  00AE               	movwf	_decodeGesture$1263
  8784  0486  0821               	movf	??_decodeGesture+1,w
  8785  0487  00AF               	movwf	_decodeGesture$1263+1
  8786  0488  2C8E               	goto	l1012
  8787  0489                     l5751:	
  8788  0489  0020               	movlb	0	; select bank0
  8789  048A  086B               	movf	_gesture_ud_delta_+1,w
  8790  048B  00AF               	movwf	_decodeGesture$1263+1
  8791  048C  086A               	movf	_gesture_ud_delta_,w
  8792  048D  00AE               	movwf	_decodeGesture$1263
  8793  048E                     l1012:	
  8794  048E  0869               	movf	_gesture_lr_delta_+1,w
  8795  048F  3A80               	xorlw	128
  8796  0490  00A0               	movwf	??_decodeGesture
  8797  0491  3080               	movlw	128
  8798  0492  0220               	subwf	??_decodeGesture,w
  8799  0493  1D03               	skipz
  8800  0494  2C97               	goto	u5015
  8801  0495  3001               	movlw	1
  8802  0496  0268               	subwf	_gesture_lr_delta_,w
  8803  0497                     u5015:	
  8804  0497  1803               	skipnc
  8805  0498  2CA6               	goto	l5755
  8806  0499  0020               	movlb	0	; select bank0
  8807  049A  0968               	comf	_gesture_lr_delta_,w
  8808  049B  00A0               	movwf	??_decodeGesture
  8809  049C  0969               	comf	_gesture_lr_delta_+1,w
  8810  049D  00A1               	movwf	??_decodeGesture+1
  8811  049E  0AA0               	incf	??_decodeGesture,f
  8812  049F  1903               	skipnz
  8813  04A0  0AA1               	incf	??_decodeGesture+1,f
  8814  04A1  0820               	movf	??_decodeGesture,w
  8815  04A2  00B0               	movwf	_decodeGesture$1264
  8816  04A3  0821               	movf	??_decodeGesture+1,w
  8817  04A4  00B1               	movwf	_decodeGesture$1264+1
  8818  04A5  2CAB               	goto	l1016
  8819  04A6                     l5755:	
  8820  04A6  0020               	movlb	0	; select bank0
  8821  04A7  0869               	movf	_gesture_lr_delta_+1,w
  8822  04A8  00B1               	movwf	_decodeGesture$1264+1
  8823  04A9  0868               	movf	_gesture_lr_delta_,w
  8824  04AA  00B0               	movwf	_decodeGesture$1264
  8825  04AB                     l1016:	
  8826  04AB  0831               	movf	_decodeGesture$1264+1,w
  8827  04AC  3A80               	xorlw	128
  8828  04AD  00A0               	movwf	??_decodeGesture
  8829  04AE  082F               	movf	_decodeGesture$1263+1,w
  8830  04AF  3A80               	xorlw	128
  8831  04B0  0220               	subwf	??_decodeGesture,w
  8832  04B1  1D03               	skipz
  8833  04B2  2CB5               	goto	u5025
  8834  04B3  082E               	movf	_decodeGesture$1263,w
  8835  04B4  0230               	subwf	_decodeGesture$1264,w
  8836  04B5                     u5025:	
  8837  04B5  1C03               	btfss	3,0
  8838  04B6  2B58               	goto	l5675
  8839  04B7  2B62               	goto	l5681
  8840  04B8                     l5761:	
  8841                           
  8842                           ;APDS9960.c: 840:         return 0;
  8843  04B8  3000               	movlw	0
  8844  04B9  0008               	return
  8845  04BA                     l5765:	
  8846                           
  8847                           ;APDS9960.c: 843:     return 1;
  8848  04BA  3001               	movlw	1
  8849  04BB  0008               	return
  8850  04BC                     __end_of_decodeGesture:	
  8851                           
  8852                           	psect	text23
  8853  0E91                     __ptext23:	
  8854 ;; *************** function _Display_Name *****************
  8855 ;; Defined at:
  8856 ;;		line 194 in file "main.c"
  8857 ;; Parameters:    Size  Location     Type
  8858 ;;  string1         2    5[BANK0 ] PTR unsigned char 
  8859 ;;		 -> STR_9(11), STR_8(16), STR_7(13), STR_6(12), 
  8860 ;;		 -> STR_5(6), STR_4(11), STR_3(16), STR_2(13), 
  8861 ;;		 -> STR_1(12), 
  8862 ;; Auto vars:     Size  Location     Type
  8863 ;;  i               2   10[BANK0 ] int 
  8864 ;;  length          2    8[BANK0 ] int 
  8865 ;; Return value:  Size  Location     Type
  8866 ;;                  1    wreg      void 
  8867 ;; Registers used:
  8868 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8869 ;; Tracked objects:
  8870 ;;		On entry : 0/0
  8871 ;;		On exit  : 0/0
  8872 ;;		Unchanged: 0/0
  8873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8874 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8875 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8876 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8877 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8878 ;;Total ram usage:        7 bytes
  8879 ;; Hardware stack levels used:    1
  8880 ;; Hardware stack levels required when called:    7
  8881 ;; This function calls:
  8882 ;;		_SPI_Write
  8883 ;;		_strlen
  8884 ;; This function is called by:
  8885 ;;		_main
  8886 ;;		_handleGesture
  8887 ;;		_Send_Names
  8888 ;; This function uses a non-reentrant model
  8889 ;;
  8890                           
  8891                           
  8892                           ;psect for function _Display_Name
  8893  0E91                     _Display_Name:	
  8894                           
  8895                           ;main.c: 195:     int length;;main.c: 196:     int i;;main.c: 198:         SPI_Write(0xF
      +                          E);
  8896                           
  8897                           ;incstack = 0
  8898                           ; Regs used in _Display_Name: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8899  0E91  30FE               	movlw	254
  8900  0E92  318B  234C  318E   	fcall	_SPI_Write
  8901                           
  8902                           ;main.c: 199:         _delay((unsigned long)((100)*(250000/4000.0)));
  8903  0E95  3009               	movlw	9
  8904  0E96  0020               	movlb	0	; select bank0
  8905  0E97  00A7               	movwf	??_Display_Name
  8906  0E98  301C               	movlw	28
  8907  0E99                     u5837:	
  8908  0E99  0B89               	decfsz	9,f
  8909  0E9A  2E99               	goto	u5837
  8910  0E9B  0BA7               	decfsz	??_Display_Name,f
  8911  0E9C  2E99               	goto	u5837
  8912  0E9D  0000               	nop
  8913                           
  8914                           ;main.c: 200:         SPI_Write(0x51);
  8915  0E9E  3051               	movlw	81
  8916  0E9F  318B  234C  318E   	fcall	_SPI_Write
  8917                           
  8918                           ;main.c: 201:         length = strlen(string1);
  8919  0EA2  0020               	movlb	0	; select bank0
  8920  0EA3  0826               	movf	Display_Name@string1+1,w
  8921  0EA4  00A1               	movwf	strlen@s+1
  8922  0EA5  0825               	movf	Display_Name@string1,w
  8923  0EA6  00A0               	movwf	strlen@s
  8924  0EA7  318B  2377  318E   	fcall	_strlen
  8925  0EAA  0020               	movlb	0	; select bank0
  8926  0EAB  0821               	movf	?_strlen+1,w
  8927  0EAC  00A9               	movwf	Display_Name@length+1
  8928  0EAD  0820               	movf	?_strlen,w
  8929  0EAE  00A8               	movwf	Display_Name@length
  8930                           
  8931                           ;main.c: 202:         for(i = 0; i < length; i++){
  8932  0EAF  01AA               	clrf	Display_Name@i
  8933  0EB0  01AB               	clrf	Display_Name@i+1
  8934  0EB1                     l5855:	
  8935  0EB1  082B               	movf	Display_Name@i+1,w
  8936  0EB2  3A80               	xorlw	128
  8937  0EB3  00A7               	movwf	??_Display_Name
  8938  0EB4  0829               	movf	Display_Name@length+1,w
  8939  0EB5  3A80               	xorlw	128
  8940  0EB6  0227               	subwf	??_Display_Name,w
  8941  0EB7  1D03               	skipz
  8942  0EB8  2EBB               	goto	u5045
  8943  0EB9  0828               	movf	Display_Name@length,w
  8944  0EBA  022A               	subwf	Display_Name@i,w
  8945  0EBB                     u5045:	
  8946  0EBB  1803               	btfsc	3,0
  8947  0EBC  2ECE               	goto	l654
  8948                           
  8949                           ;main.c: 203:             SPI_Write(string1[i]);
  8950  0EBD  0020               	movlb	0	; select bank0
  8951  0EBE  0825               	movf	Display_Name@string1,w
  8952  0EBF  072A               	addwf	Display_Name@i,w
  8953  0EC0  0084               	movwf	4
  8954  0EC1  0826               	movf	Display_Name@string1+1,w
  8955  0EC2  3D2B               	addwfc	Display_Name@i+1,w
  8956  0EC3  0085               	movwf	5
  8957  0EC4  0800               	movf	0,w	;code access
  8958  0EC5  318B  234C  318E   	fcall	_SPI_Write
  8959                           
  8960                           ;main.c: 204:         }
  8961  0EC8  3001               	movlw	1
  8962  0EC9  0020               	movlb	0	; select bank0
  8963  0ECA  07AA               	addwf	Display_Name@i,f
  8964  0ECB  3000               	movlw	0
  8965  0ECC  3DAB               	addwfc	Display_Name@i+1,f
  8966  0ECD  2EB1               	goto	l5855
  8967  0ECE                     l654:	
  8968                           
  8969                           ;main.c: 206:     printed = 1;
  8970  0ECE  0020               	movlb	0	; select bank0
  8971  0ECF  01EE               	clrf	_printed
  8972  0ED0  0AEE               	incf	_printed,f
  8973  0ED1  0008               	return
  8974  0ED2                     __end_of_Display_Name:	
  8975                           
  8976                           	psect	text24
  8977  0B77                     __ptext24:	
  8978 ;; *************** function _strlen *****************
  8979 ;; Defined at:
  8980 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
  8981 ;; Parameters:    Size  Location     Type
  8982 ;;  s               2    0[BANK0 ] PTR const unsigned char 
  8983 ;;		 -> STR_9(11), STR_8(16), STR_7(13), STR_6(12), 
  8984 ;;		 -> STR_5(6), STR_4(11), STR_3(16), STR_2(13), 
  8985 ;;		 -> STR_1(12), 
  8986 ;; Auto vars:     Size  Location     Type
  8987 ;;  a               2    3[BANK0 ] PTR const unsigned char 
  8988 ;;		 -> STR_9(11), STR_8(16), STR_7(13), STR_6(12), 
  8989 ;;		 -> STR_5(6), STR_4(11), STR_3(16), STR_2(13), 
  8990 ;;		 -> STR_1(12), 
  8991 ;; Return value:  Size  Location     Type
  8992 ;;                  2    0[BANK0 ] unsigned int 
  8993 ;; Registers used:
  8994 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8995 ;; Tracked objects:
  8996 ;;		On entry : 0/0
  8997 ;;		On exit  : 0/0
  8998 ;;		Unchanged: 0/0
  8999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9000 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9001 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9002 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9003 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9004 ;;Total ram usage:        5 bytes
  9005 ;; Hardware stack levels used:    1
  9006 ;; Hardware stack levels required when called:    5
  9007 ;; This function calls:
  9008 ;;		Nothing
  9009 ;; This function is called by:
  9010 ;;		_Display_Name
  9011 ;; This function uses a non-reentrant model
  9012 ;;
  9013                           
  9014                           
  9015                           ;psect for function _strlen
  9016  0B77                     _strlen:	
  9017                           
  9018                           ;incstack = 0
  9019                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0]
  9020  0B77  0020               	movlb	0	; select bank0
  9021  0B78  0821               	movf	strlen@s+1,w
  9022  0B79  00A4               	movwf	strlen@a+1
  9023  0B7A  0820               	movf	strlen@s,w
  9024  0B7B  00A3               	movwf	strlen@a
  9025  0B7C                     l5423:	
  9026  0B7C  0820               	movf	strlen@s,w
  9027  0B7D  0084               	movwf	4
  9028  0B7E  0821               	movf	strlen@s+1,w
  9029  0B7F  0085               	movwf	5
  9030  0B80  0012               	moviw fsr0++
  9031  0B81  1903               	btfsc	3,2
  9032  0B82  2B88               	goto	l5425
  9033  0B83  3001               	movlw	1
  9034  0B84  07A0               	addwf	strlen@s,f
  9035  0B85  3000               	movlw	0
  9036  0B86  3DA1               	addwfc	strlen@s+1,f
  9037  0B87  2B7C               	goto	l5423
  9038  0B88                     l5425:	
  9039  0B88  0823               	movf	strlen@a,w
  9040  0B89  0220               	subwf	strlen@s,w
  9041  0B8A  00A0               	movwf	?_strlen
  9042  0B8B  0824               	movf	strlen@a+1,w
  9043  0B8C  3B21               	subwfb	strlen@s+1,w
  9044  0B8D  00A1               	movwf	?_strlen+1
  9045  0B8E  0008               	return
  9046  0B8F                     __end_of_strlen:	
  9047                           
  9048                           	psect	text25
  9049  0B4C                     __ptext25:	
  9050 ;; *************** function _SPI_Write *****************
  9051 ;; Defined at:
  9052 ;;		line 185 in file "main.c"
  9053 ;; Parameters:    Size  Location     Type
  9054 ;;  incoming        1    wreg     unsigned char 
  9055 ;; Auto vars:     Size  Location     Type
  9056 ;;  incoming        1    2[BANK0 ] unsigned char 
  9057 ;; Return value:  Size  Location     Type
  9058 ;;                  1    wreg      void 
  9059 ;; Registers used:
  9060 ;;		wreg, status,2, status,0, pclath, cstack
  9061 ;; Tracked objects:
  9062 ;;		On entry : 0/0
  9063 ;;		On exit  : 0/0
  9064 ;;		Unchanged: 0/0
  9065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9066 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9067 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9068 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9069 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9070 ;;Total ram usage:        2 bytes
  9071 ;; Hardware stack levels used:    1
  9072 ;; Hardware stack levels required when called:    6
  9073 ;; This function calls:
  9074 ;;		_SPI2_Exchange8bit
  9075 ;; This function is called by:
  9076 ;;		_Display_Name
  9077 ;;		_Display_Clear
  9078 ;; This function uses a non-reentrant model
  9079 ;;
  9080                           
  9081                           
  9082                           ;psect for function _SPI_Write
  9083  0B4C                     _SPI_Write:	
  9084                           
  9085                           ;incstack = 0
  9086                           ; Regs used in _SPI_Write: [wreg+status,2+status,0+pclath+cstack]
  9087                           ;SPI_Write@incoming stored from wreg
  9088  0B4C  0020               	movlb	0	; select bank0
  9089  0B4D  00A2               	movwf	SPI_Write@incoming
  9090                           
  9091                           ;main.c: 185: void SPI_Write(char incoming);main.c: 186: {;main.c: 187:     do { LATCbit
      +                          s.LATC0 = 0; } while(0);
  9092  0B4E  0022               	movlb	2	; select bank2
  9093  0B4F  100E               	bcf	14,0	;volatile
  9094                           
  9095                           ;main.c: 188:     SPI2_Exchange8bit(incoming);
  9096  0B50  0020               	movlb	0	; select bank0
  9097  0B51  0822               	movf	SPI_Write@incoming,w
  9098  0B52  318A  22DE  318B   	fcall	_SPI2_Exchange8bit
  9099  0B55  0022               	movlb	2	; select bank2
  9100  0B56  140E               	bsf	14,0	;volatile
  9101                           
  9102                           ;main.c: 190:     _delay((unsigned long)((100)*(250000/4000.0)));
  9103  0B57  3009               	movlw	9
  9104  0B58  0020               	movlb	0	; select bank0
  9105  0B59  00A1               	movwf	??_SPI_Write
  9106  0B5A  301C               	movlw	28
  9107  0B5B                     u5847:	
  9108  0B5B  0B89               	decfsz	9,f
  9109  0B5C  2B5B               	goto	u5847
  9110  0B5D  0BA1               	decfsz	??_SPI_Write,f
  9111  0B5E  2B5B               	goto	u5847
  9112  0B5F  0000               	nop
  9113  0B60  0008               	return
  9114  0B61                     __end_of_SPI_Write:	
  9115                           
  9116                           	psect	text26
  9117  0ADE                     __ptext26:	
  9118 ;; *************** function _SPI2_Exchange8bit *****************
  9119 ;; Defined at:
  9120 ;;		line 79 in file "mcc_generated_files/spi2.c"
  9121 ;; Parameters:    Size  Location     Type
  9122 ;;  data            1    wreg     unsigned char 
  9123 ;; Auto vars:     Size  Location     Type
  9124 ;;  data            1    0[BANK0 ] unsigned char 
  9125 ;; Return value:  Size  Location     Type
  9126 ;;                  1    wreg      unsigned char 
  9127 ;; Registers used:
  9128 ;;		wreg
  9129 ;; Tracked objects:
  9130 ;;		On entry : 0/0
  9131 ;;		On exit  : 0/0
  9132 ;;		Unchanged: 0/0
  9133 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9134 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9135 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9136 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9137 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9138 ;;Total ram usage:        1 bytes
  9139 ;; Hardware stack levels used:    1
  9140 ;; Hardware stack levels required when called:    5
  9141 ;; This function calls:
  9142 ;;		Nothing
  9143 ;; This function is called by:
  9144 ;;		_SPI_Write
  9145 ;;		_SPI2_Exchange8bitBuffer
  9146 ;; This function uses a non-reentrant model
  9147 ;;
  9148                           
  9149                           
  9150                           ;psect for function _SPI2_Exchange8bit
  9151  0ADE                     _SPI2_Exchange8bit:	
  9152                           
  9153                           ;incstack = 0
  9154                           ; Regs used in _SPI2_Exchange8bit: [wreg]
  9155                           ;SPI2_Exchange8bit@data stored from wreg
  9156  0ADE  0020               	movlb	0	; select bank0
  9157  0ADF  00A0               	movwf	SPI2_Exchange8bit@data
  9158                           
  9159                           ;mcc_generated_files/spi2.c: 79: uint8_t SPI2_Exchange8bit(uint8_t data);mcc_generated_f
      +                          iles/spi2.c: 80: {;mcc_generated_files/spi2.c: 82:     SSP2CON1bits.WCOL = 0;
  9160  0AE0  0024               	movlb	4	; select bank4
  9161  0AE1  139D               	bcf	29,7	;volatile
  9162                           
  9163                           ;mcc_generated_files/spi2.c: 84:     SSP2BUF = data;
  9164  0AE2  0020               	movlb	0	; select bank0
  9165  0AE3  0820               	movf	SPI2_Exchange8bit@data,w
  9166  0AE4  0024               	movlb	4	; select bank4
  9167  0AE5  0099               	movwf	25	;volatile
  9168  0AE6                     l526:	
  9169                           ;mcc_generated_files/spi2.c: 89:     }
  9170                           
  9171                           ;mcc_generated_files/spi2.c: 86:     while(SSP2STATbits.BF == 0x0)
  9172                           
  9173                           
  9174                           ;mcc_generated_files/spi2.c: 86:     while(SSP2STATbits.BF == 0x0)
  9175  0AE6  0024               	movlb	4	; select bank4
  9176  0AE7  181C               	btfsc	28,0	;volatile
  9177  0AE8  2AEB               	goto	l5315
  9178  0AE9  0064               	clrwdt	;# 
  9179  0AEA  2AE6               	goto	l526
  9180  0AEB                     l5315:	
  9181                           
  9182                           ;mcc_generated_files/spi2.c: 91:     return (SSP2BUF);
  9183  0AEB  0819               	movf	25,w	;volatile
  9184  0AEC  0008               	return
  9185  0AED                     __end_of_SPI2_Exchange8bit:	
  9186                           
  9187                           	psect	text27
  9188  06C3                     __ptext27:	
  9189 ;; *************** function _enableGestureSensor *****************
  9190 ;; Defined at:
  9191 ;;		line 409 in file "APDS9960.c"
  9192 ;; Parameters:    Size  Location     Type
  9193 ;;  interrupts      1    wreg     _Bool 
  9194 ;; Auto vars:     Size  Location     Type
  9195 ;;  interrupts      1   17[BANK0 ] _Bool 
  9196 ;; Return value:  Size  Location     Type
  9197 ;;                  1    wreg      _Bool 
  9198 ;; Registers used:
  9199 ;;		wreg, status,2, status,0, pclath, cstack
  9200 ;; Tracked objects:
  9201 ;;		On entry : 0/0
  9202 ;;		On exit  : 0/0
  9203 ;;		Unchanged: 0/0
  9204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9205 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9206 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9207 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9208 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9209 ;;Total ram usage:        2 bytes
  9210 ;; Hardware stack levels used:    1
  9211 ;; Hardware stack levels required when called:   11
  9212 ;; This function calls:
  9213 ;;		_enablePower
  9214 ;;		_resetGestureParameters
  9215 ;;		_setGestureIntEnable
  9216 ;;		_setGestureMode
  9217 ;;		_setLEDBoost
  9218 ;;		_setMode
  9219 ;;		_wireWriteDataByte
  9220 ;; This function is called by:
  9221 ;;		_main
  9222 ;; This function uses a non-reentrant model
  9223 ;;
  9224                           
  9225                           
  9226                           ;psect for function _enableGestureSensor
  9227  06C3                     _enableGestureSensor:	
  9228                           
  9229                           ;incstack = 0
  9230                           ; Regs used in _enableGestureSensor: [wreg+status,2+status,0+pclath+cstack]
  9231                           ;enableGestureSensor@interrupts stored from wreg
  9232  06C3  0020               	movlb	0	; select bank0
  9233  06C4  00B1               	movwf	enableGestureSensor@interrupts
  9234                           
  9235                           ;APDS9960.c: 409: _Bool enableGestureSensor ( _Bool interrupts);APDS9960.c: 410: {;APDS9
      +                          960.c: 418:     resetGestureParameters();
  9236  06C5  318B  2361  3186   	fcall	_resetGestureParameters
  9237                           
  9238                           ;APDS9960.c: 419:     if( !wireWriteDataByte(0x83, 0xFF) ) {
  9239  06C8  30FF               	movlw	255
  9240  06C9  0020               	movlb	0	; select bank0
  9241  06CA  00B0               	movwf	??_enableGestureSensor
  9242  06CB  0830               	movf	??_enableGestureSensor,w
  9243  06CC  00A6               	movwf	wireWriteDataByte@val
  9244  06CD  3083               	movlw	131
  9245  06CE  318B  238F  3186   	fcall	_wireWriteDataByte
  9246  06D1  0020               	movlb	0	; select bank0
  9247  06D2  0826               	movf	?_wireWriteDataByte,w
  9248  06D3  0427               	iorwf	?_wireWriteDataByte+1,w
  9249  06D4  1903               	btfsc	3,2
  9250  06D5  2ED9               	goto	l6325
  9251  06D6  2EDB               	goto	l6329
  9252  06D7                     l6343:	
  9253                           
  9254                           ;APDS9960.c: 429:         if( !setGestureIntEnable(1) ) {
  9255  06D7  3001               	movlw	1
  9256  06D8  2EF4               	goto	L8
  9257  06D9                     l6325:	
  9258                           
  9259                           ;APDS9960.c: 420:         return 0;
  9260  06D9  3000               	movlw	0
  9261  06DA  0008               	return
  9262  06DB                     l6329:	
  9263                           
  9264                           ;APDS9960.c: 422:     if( !wireWriteDataByte(0x8E, 0x89) ) {
  9265  06DB  3089               	movlw	137
  9266  06DC  00B0               	movwf	??_enableGestureSensor
  9267  06DD  0830               	movf	??_enableGestureSensor,w
  9268  06DE  00A6               	movwf	wireWriteDataByte@val
  9269  06DF  308E               	movlw	142
  9270  06E0  318B  238F  3186   	fcall	_wireWriteDataByte
  9271  06E3  0020               	movlb	0	; select bank0
  9272  06E4  0826               	movf	?_wireWriteDataByte,w
  9273  06E5  0427               	iorwf	?_wireWriteDataByte+1,w
  9274  06E6  1903               	btfsc	3,2
  9275  06E7  2ED9               	goto	l6325
  9276                           
  9277                           ;APDS9960.c: 425:     if( !setLEDBoost(3) ) {
  9278  06E8  3003               	movlw	3
  9279  06E9  318D  25C4  3186   	fcall	_setLEDBoost
  9280  06EC  3A00               	xorlw	0
  9281  06ED  1903               	btfsc	3,2
  9282  06EE  2ED9               	goto	l6325
  9283                           
  9284                           ;APDS9960.c: 428:     if( interrupts ) {
  9285  06EF  0020               	movlb	0	; select bank0
  9286  06F0  0831               	movf	enableGestureSensor@interrupts,w
  9287  06F1  1D03               	btfss	3,2
  9288  06F2  2ED7               	goto	l6343
  9289                           
  9290                           ;APDS9960.c: 433:         if( !setGestureIntEnable(0) ) {
  9291  06F3  3000               	movlw	0
  9292  06F4                     L8:	
  9293  06F4  3187  27D3  3186   	fcall	_setGestureIntEnable
  9294  06F7  3A00               	xorlw	0
  9295  06F8  1903               	btfsc	3,2
  9296  06F9  2ED9               	goto	l6325
  9297                           
  9298                           ;APDS9960.c: 437:     if( !setGestureMode(1) ) {
  9299  06FA  3001               	movlw	1
  9300  06FB  318C  244A  3186   	fcall	_setGestureMode
  9301  06FE  3A00               	xorlw	0
  9302  06FF  1903               	btfsc	3,2
  9303  0700  2ED9               	goto	l6325
  9304                           
  9305                           ;APDS9960.c: 440:     if( !enablePower() ){
  9306  0701  318A  22C1  3186   	fcall	_enablePower
  9307  0704  3A00               	xorlw	0
  9308  0705  1903               	btfsc	3,2
  9309  0706  2ED9               	goto	l6325
  9310                           
  9311                           ;APDS9960.c: 443:     if( !setMode(3, 1) ) {
  9312  0707  0020               	movlb	0	; select bank0
  9313  0708  01AB               	clrf	setMode@enable
  9314  0709  0AAB               	incf	setMode@enable,f
  9315  070A  3003               	movlw	3
  9316  070B  318F  27B1  3186   	fcall	_setMode
  9317  070E  3A00               	xorlw	0
  9318  070F  1903               	btfsc	3,2
  9319  0710  2ED9               	goto	l6325
  9320                           
  9321                           ;APDS9960.c: 446:     if( !setMode(2, 1) ) {
  9322  0711  0020               	movlb	0	; select bank0
  9323  0712  01AB               	clrf	setMode@enable
  9324  0713  0AAB               	incf	setMode@enable,f
  9325  0714  3002               	movlw	2
  9326  0715  318F  27B1  3186   	fcall	_setMode
  9327  0718  3A00               	xorlw	0
  9328  0719  1903               	btfsc	3,2
  9329  071A  2ED9               	goto	l6325
  9330                           
  9331                           ;APDS9960.c: 449:     if( !setMode(6, 1) ) {
  9332  071B  0020               	movlb	0	; select bank0
  9333  071C  01AB               	clrf	setMode@enable
  9334  071D  0AAB               	incf	setMode@enable,f
  9335  071E  3006               	movlw	6
  9336  071F  318F  27B1  3186   	fcall	_setMode
  9337  0722  3A00               	xorlw	0
  9338  0723  1903               	btfsc	3,2
  9339  0724  2ED9               	goto	l6325
  9340                           
  9341                           ;APDS9960.c: 453:     return 1;
  9342  0725  3001               	movlw	1
  9343  0726  0008               	return
  9344  0727                     __end_of_enableGestureSensor:	
  9345                           
  9346                           	psect	text28
  9347  0DC4                     __ptext28:	
  9348 ;; *************** function _setLEDBoost *****************
  9349 ;; Defined at:
  9350 ;;		line 484 in file "APDS9960.c"
  9351 ;; Parameters:    Size  Location     Type
  9352 ;;  boost           1    wreg     unsigned char 
  9353 ;; Auto vars:     Size  Location     Type
  9354 ;;  boost           1   13[BANK0 ] unsigned char 
  9355 ;;  val             1   12[BANK0 ] unsigned char 
  9356 ;; Return value:  Size  Location     Type
  9357 ;;                  1    wreg      _Bool 
  9358 ;; Registers used:
  9359 ;;		wreg, status,2, status,0, pclath, cstack
  9360 ;; Tracked objects:
  9361 ;;		On entry : 0/0
  9362 ;;		On exit  : 0/0
  9363 ;;		Unchanged: 0/0
  9364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9365 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9366 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9367 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9368 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9369 ;;Total ram usage:        4 bytes
  9370 ;; Hardware stack levels used:    1
  9371 ;; Hardware stack levels required when called:    8
  9372 ;; This function calls:
  9373 ;;		_wireReadDataByte
  9374 ;;		_wireWriteDataByte
  9375 ;; This function is called by:
  9376 ;;		_enableGestureSensor
  9377 ;; This function uses a non-reentrant model
  9378 ;;
  9379                           
  9380                           
  9381                           ;psect for function _setLEDBoost
  9382  0DC4                     _setLEDBoost:	
  9383                           
  9384                           ;incstack = 0
  9385                           ; Regs used in _setLEDBoost: [wreg+status,2+status,0+pclath+cstack]
  9386                           ;setLEDBoost@boost stored from wreg
  9387  0DC4  0020               	movlb	0	; select bank0
  9388  0DC5  00AD               	movwf	setLEDBoost@boost
  9389                           
  9390                           ;APDS9960.c: 484: _Bool setLEDBoost(uint8_t boost);APDS9960.c: 485: {;APDS9960.c: 486:  
      +                             uint8_t val;;APDS9960.c: 489:     val=wireReadDataByte(0x90);
  9391  0DC6  3090               	movlw	144
  9392  0DC7  318C  2400  318D   	fcall	_wireReadDataByte
  9393  0DCA  0020               	movlb	0	; select bank0
  9394  0DCB  00AA               	movwf	??_setLEDBoost
  9395  0DCC  082A               	movf	??_setLEDBoost,w
  9396  0DCD  00AC               	movwf	setLEDBoost@val
  9397                           
  9398                           ;APDS9960.c: 492:     boost &= 0b00000011;
  9399  0DCE  3003               	movlw	3
  9400  0DCF  00AA               	movwf	??_setLEDBoost
  9401  0DD0  082A               	movf	??_setLEDBoost,w
  9402  0DD1  05AD               	andwf	setLEDBoost@boost,f
  9403                           
  9404                           ;APDS9960.c: 493:     boost = boost << 4;
  9405  0DD2  082D               	movf	setLEDBoost@boost,w
  9406  0DD3  00AA               	movwf	??_setLEDBoost
  9407  0DD4  3003               	movlw	3
  9408  0DD5                     u5305:	
  9409  0DD5  35AA               	lslf	??_setLEDBoost,f
  9410  0DD6  3EFF               	addlw	-1
  9411  0DD7  1D03               	skipz
  9412  0DD8  2DD5               	goto	u5305
  9413  0DD9  352A               	lslf	??_setLEDBoost,w
  9414  0DDA  00AB               	movwf	??_setLEDBoost+1
  9415  0DDB  082B               	movf	??_setLEDBoost+1,w
  9416  0DDC  00AD               	movwf	setLEDBoost@boost
  9417                           
  9418                           ;APDS9960.c: 494:     val &= 0b11001111;
  9419  0DDD  30CF               	movlw	207
  9420  0DDE  00AA               	movwf	??_setLEDBoost
  9421  0DDF  082A               	movf	??_setLEDBoost,w
  9422  0DE0  05AC               	andwf	setLEDBoost@val,f
  9423                           
  9424                           ;APDS9960.c: 495:     val |= boost;
  9425  0DE1  082D               	movf	setLEDBoost@boost,w
  9426  0DE2  00AA               	movwf	??_setLEDBoost
  9427  0DE3  082A               	movf	??_setLEDBoost,w
  9428  0DE4  04AC               	iorwf	setLEDBoost@val,f
  9429                           
  9430                           ;APDS9960.c: 498:     if( !wireWriteDataByte(0x90, val) ) {
  9431  0DE5  082C               	movf	setLEDBoost@val,w
  9432  0DE6  00AA               	movwf	??_setLEDBoost
  9433  0DE7  082A               	movf	??_setLEDBoost,w
  9434  0DE8  00A6               	movwf	wireWriteDataByte@val
  9435  0DE9  3090               	movlw	144
  9436  0DEA  318B  238F  318D   	fcall	_wireWriteDataByte
  9437  0DED  0020               	movlb	0	; select bank0
  9438  0DEE  0826               	movf	?_wireWriteDataByte,w
  9439  0DEF  0427               	iorwf	?_wireWriteDataByte+1,w
  9440  0DF0  1D03               	btfss	3,2
  9441  0DF1  2DF4               	goto	l6121
  9442                           
  9443                           ;APDS9960.c: 499:         return 0;
  9444  0DF2  3000               	movlw	0
  9445  0DF3  0008               	return
  9446  0DF4                     l6121:	
  9447                           
  9448                           ;APDS9960.c: 502:     return 1;
  9449  0DF4  3001               	movlw	1
  9450  0DF5  0008               	return
  9451  0DF6                     __end_of_setLEDBoost:	
  9452                           
  9453                           	psect	text29
  9454  0C4A                     __ptext29:	
  9455 ;; *************** function _setGestureMode *****************
  9456 ;; Defined at:
  9457 ;;		line 506 in file "APDS9960.c"
  9458 ;; Parameters:    Size  Location     Type
  9459 ;;  mode            1    wreg     unsigned char 
  9460 ;; Auto vars:     Size  Location     Type
  9461 ;;  mode            1   11[BANK0 ] unsigned char 
  9462 ;;  val             1   12[BANK0 ] unsigned char 
  9463 ;; Return value:  Size  Location     Type
  9464 ;;                  1    wreg      _Bool 
  9465 ;; Registers used:
  9466 ;;		wreg, status,2, status,0, pclath, cstack
  9467 ;; Tracked objects:
  9468 ;;		On entry : 0/0
  9469 ;;		On exit  : 0/0
  9470 ;;		Unchanged: 0/0
  9471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9472 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9473 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9474 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9475 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9476 ;;Total ram usage:        3 bytes
  9477 ;; Hardware stack levels used:    1
  9478 ;; Hardware stack levels required when called:    8
  9479 ;; This function calls:
  9480 ;;		_wireReadDataByte
  9481 ;;		_wireWriteDataByte
  9482 ;; This function is called by:
  9483 ;;		_enableGestureSensor
  9484 ;; This function uses a non-reentrant model
  9485 ;;
  9486                           
  9487                           
  9488                           ;psect for function _setGestureMode
  9489  0C4A                     _setGestureMode:	
  9490                           
  9491                           ;incstack = 0
  9492                           ; Regs used in _setGestureMode: [wreg+status,2+status,0+pclath+cstack]
  9493                           ;setGestureMode@mode stored from wreg
  9494  0C4A  0020               	movlb	0	; select bank0
  9495  0C4B  00AB               	movwf	setGestureMode@mode
  9496                           
  9497                           ;APDS9960.c: 506: _Bool setGestureMode(uint8_t mode);APDS9960.c: 507: {;APDS9960.c: 508:
      +                               uint8_t val;;APDS9960.c: 511:     val = wireReadDataByte(0xAB);
  9498  0C4C  30AB               	movlw	171
  9499  0C4D  318C  2400  318C   	fcall	_wireReadDataByte
  9500  0C50  0020               	movlb	0	; select bank0
  9501  0C51  00AA               	movwf	??_setGestureMode
  9502  0C52  082A               	movf	??_setGestureMode,w
  9503  0C53  00AC               	movwf	setGestureMode@val
  9504                           
  9505                           ;APDS9960.c: 514:     mode &= 0b00000001;
  9506  0C54  3001               	movlw	1
  9507  0C55  00AA               	movwf	??_setGestureMode
  9508  0C56  082A               	movf	??_setGestureMode,w
  9509  0C57  05AB               	andwf	setGestureMode@mode,f
  9510                           
  9511                           ;APDS9960.c: 515:     val &= 0b11111110;
  9512  0C58  30FE               	movlw	254
  9513  0C59  00AA               	movwf	??_setGestureMode
  9514  0C5A  082A               	movf	??_setGestureMode,w
  9515  0C5B  05AC               	andwf	setGestureMode@val,f
  9516                           
  9517                           ;APDS9960.c: 516:     val |= mode;
  9518  0C5C  082B               	movf	setGestureMode@mode,w
  9519  0C5D  00AA               	movwf	??_setGestureMode
  9520  0C5E  082A               	movf	??_setGestureMode,w
  9521  0C5F  04AC               	iorwf	setGestureMode@val,f
  9522                           
  9523                           ;APDS9960.c: 519:     if( !wireWriteDataByte(0xAB, val) ) {
  9524  0C60  082C               	movf	setGestureMode@val,w
  9525  0C61  00AA               	movwf	??_setGestureMode
  9526  0C62  082A               	movf	??_setGestureMode,w
  9527  0C63  00A6               	movwf	wireWriteDataByte@val
  9528  0C64  30AB               	movlw	171
  9529  0C65  318B  238F  318C   	fcall	_wireWriteDataByte
  9530  0C68  0020               	movlb	0	; select bank0
  9531  0C69  0826               	movf	?_wireWriteDataByte,w
  9532  0C6A  0427               	iorwf	?_wireWriteDataByte+1,w
  9533  0C6B  1D03               	btfss	3,2
  9534  0C6C  2C6F               	goto	l6139
  9535                           
  9536                           ;APDS9960.c: 520:         return 0;
  9537  0C6D  3000               	movlw	0
  9538  0C6E  0008               	return
  9539  0C6F                     l6139:	
  9540                           
  9541                           ;APDS9960.c: 523:     return 1;
  9542  0C6F  3001               	movlw	1
  9543  0C70  0008               	return
  9544  0C71                     __end_of_setGestureMode:	
  9545                           
  9546                           	psect	text30
  9547  07D3                     __ptext30:	
  9548 ;; *************** function _setGestureIntEnable *****************
  9549 ;; Defined at:
  9550 ;;		line 387 in file "APDS9960.c"
  9551 ;; Parameters:    Size  Location     Type
  9552 ;;  enable          1    wreg     unsigned char 
  9553 ;; Auto vars:     Size  Location     Type
  9554 ;;  enable          1   12[BANK0 ] unsigned char 
  9555 ;;  val             1   11[BANK0 ] unsigned char 
  9556 ;; Return value:  Size  Location     Type
  9557 ;;                  1    wreg      _Bool 
  9558 ;; Registers used:
  9559 ;;		wreg, status,2, status,0, pclath, cstack
  9560 ;; Tracked objects:
  9561 ;;		On entry : 0/0
  9562 ;;		On exit  : 0/0
  9563 ;;		Unchanged: 0/0
  9564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9565 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9566 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9567 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9568 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9569 ;;Total ram usage:        3 bytes
  9570 ;; Hardware stack levels used:    1
  9571 ;; Hardware stack levels required when called:    8
  9572 ;; This function calls:
  9573 ;;		_wireReadDataByte
  9574 ;;		_wireWriteDataByte
  9575 ;; This function is called by:
  9576 ;;		_initialize
  9577 ;;		_enableGestureSensor
  9578 ;; This function uses a non-reentrant model
  9579 ;;
  9580                           
  9581                           
  9582                           ;psect for function _setGestureIntEnable
  9583  07D3                     _setGestureIntEnable:	
  9584                           
  9585                           ;incstack = 0
  9586                           ; Regs used in _setGestureIntEnable: [wreg+status,2+status,0+pclath+cstack]
  9587                           ;setGestureIntEnable@enable stored from wreg
  9588  07D3  0020               	movlb	0	; select bank0
  9589  07D4  00AC               	movwf	setGestureIntEnable@enable
  9590                           
  9591                           ;APDS9960.c: 387: _Bool setGestureIntEnable(uint8_t enable);APDS9960.c: 388: {;APDS9960.
      +                          c: 389:     uint8_t val;;APDS9960.c: 392:     val = wireReadDataByte(0xAB);
  9592  07D5  30AB               	movlw	171
  9593  07D6  318C  2400  3187   	fcall	_wireReadDataByte
  9594  07D9  0020               	movlb	0	; select bank0
  9595  07DA  00AA               	movwf	??_setGestureIntEnable
  9596  07DB  082A               	movf	??_setGestureIntEnable,w
  9597  07DC  00AB               	movwf	setGestureIntEnable@val
  9598                           
  9599                           ;APDS9960.c: 395:     enable &= 0b00000001;
  9600  07DD  3001               	movlw	1
  9601  07DE  00AA               	movwf	??_setGestureIntEnable
  9602  07DF  082A               	movf	??_setGestureIntEnable,w
  9603  07E0  05AC               	andwf	setGestureIntEnable@enable,f
  9604                           
  9605                           ;APDS9960.c: 396:     enable = enable << 1;
  9606  07E1  352C               	lslf	setGestureIntEnable@enable,w
  9607  07E2  00AA               	movwf	??_setGestureIntEnable
  9608  07E3  082A               	movf	??_setGestureIntEnable,w
  9609  07E4  00AC               	movwf	setGestureIntEnable@enable
  9610                           
  9611                           ;APDS9960.c: 397:     val &= 0b11111101;
  9612  07E5  30FD               	movlw	253
  9613  07E6  00AA               	movwf	??_setGestureIntEnable
  9614  07E7  082A               	movf	??_setGestureIntEnable,w
  9615  07E8  05AB               	andwf	setGestureIntEnable@val,f
  9616                           
  9617                           ;APDS9960.c: 398:     val |= enable;
  9618  07E9  082C               	movf	setGestureIntEnable@enable,w
  9619  07EA  00AA               	movwf	??_setGestureIntEnable
  9620  07EB  082A               	movf	??_setGestureIntEnable,w
  9621  07EC  04AB               	iorwf	setGestureIntEnable@val,f
  9622                           
  9623                           ;APDS9960.c: 401:     if( !wireWriteDataByte(0xAB, val) ) {
  9624  07ED  082B               	movf	setGestureIntEnable@val,w
  9625  07EE  00AA               	movwf	??_setGestureIntEnable
  9626  07EF  082A               	movf	??_setGestureIntEnable,w
  9627  07F0  00A6               	movwf	wireWriteDataByte@val
  9628  07F1  30AB               	movlw	171
  9629  07F2  318B  238F  3187   	fcall	_wireWriteDataByte
  9630  07F5  0020               	movlb	0	; select bank0
  9631  07F6  0826               	movf	?_wireWriteDataByte,w
  9632  07F7  0427               	iorwf	?_wireWriteDataByte+1,w
  9633  07F8  1D03               	btfss	3,2
  9634  07F9  2FFC               	goto	l6103
  9635                           
  9636                           ;APDS9960.c: 402:         return 0;
  9637  07FA  3000               	movlw	0
  9638  07FB  0008               	return
  9639  07FC                     l6103:	
  9640                           
  9641                           ;APDS9960.c: 405:     return 1;
  9642  07FC  3001               	movlw	1
  9643  07FD  0008               	return
  9644  07FE                     __end_of_setGestureIntEnable:	
  9645                           
  9646                           	psect	text31
  9647  0B61                     __ptext31:	
  9648 ;; *************** function _resetGestureParameters *****************
  9649 ;; Defined at:
  9650 ;;		line 457 in file "APDS9960.c"
  9651 ;; Parameters:    Size  Location     Type
  9652 ;;		None
  9653 ;; Auto vars:     Size  Location     Type
  9654 ;;		None
  9655 ;; Return value:  Size  Location     Type
  9656 ;;                  1    wreg      void 
  9657 ;; Registers used:
  9658 ;;		status,2
  9659 ;; Tracked objects:
  9660 ;;		On entry : 0/0
  9661 ;;		On exit  : 0/0
  9662 ;;		Unchanged: 0/0
  9663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9664 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9665 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9666 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9667 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9668 ;;Total ram usage:        0 bytes
  9669 ;; Hardware stack levels used:    1
  9670 ;; Hardware stack levels required when called:    5
  9671 ;; This function calls:
  9672 ;;		Nothing
  9673 ;; This function is called by:
  9674 ;;		_enableGestureSensor
  9675 ;;		_readGesture
  9676 ;; This function uses a non-reentrant model
  9677 ;;
  9678                           
  9679                           
  9680                           ;psect for function _resetGestureParameters
  9681  0B61                     _resetGestureParameters:	
  9682                           
  9683                           ;APDS9960.c: 460:     gesture_data_.index = 0;
  9684                           
  9685                           ;incstack = 0
  9686                           ; Regs used in _resetGestureParameters: [status,2]
  9687  0B61  0024               	movlb	4	; select bank4
  9688  0B62  01E0               	clrf	(_gesture_data_^(0+512)+64)
  9689                           
  9690                           ;APDS9960.c: 461:     gesture_data_.total_gestures = 0;
  9691  0B63  01E1               	clrf	(_gesture_data_^(0+512)+65)
  9692                           
  9693                           ;APDS9960.c: 463:     gesture_ud_delta_ = 0;
  9694  0B64  0020               	movlb	0	; select bank0
  9695  0B65  01EA               	clrf	_gesture_ud_delta_
  9696  0B66  01EB               	clrf	_gesture_ud_delta_+1
  9697                           
  9698                           ;APDS9960.c: 464:     gesture_lr_delta_ = 0;
  9699  0B67  01E8               	clrf	_gesture_lr_delta_
  9700  0B68  01E9               	clrf	_gesture_lr_delta_+1
  9701                           
  9702                           ;APDS9960.c: 466:     gesture_ud_count_ = 0;
  9703  0B69  01E6               	clrf	_gesture_ud_count_
  9704  0B6A  01E7               	clrf	_gesture_ud_count_+1
  9705                           
  9706                           ;APDS9960.c: 467:     gesture_lr_count_ = 0;
  9707  0B6B  01E4               	clrf	_gesture_lr_count_
  9708  0B6C  01E5               	clrf	_gesture_lr_count_+1
  9709                           
  9710                           ;APDS9960.c: 469:     gesture_near_count_ = 0;
  9711  0B6D  01E2               	clrf	_gesture_near_count_
  9712  0B6E  01E3               	clrf	_gesture_near_count_+1
  9713                           
  9714                           ;APDS9960.c: 470:     gesture_far_count_ = 0;
  9715  0B6F  01E0               	clrf	_gesture_far_count_
  9716  0B70  01E1               	clrf	_gesture_far_count_+1
  9717                           
  9718                           ;APDS9960.c: 472:     gesture_state_ = 0;
  9719  0B71  01DE               	clrf	_gesture_state_
  9720  0B72  01DF               	clrf	_gesture_state_+1
  9721                           
  9722                           ;APDS9960.c: 473:     gesture_motion_ = DIR_NONE;
  9723  0B73  0022               	movlb	2	; select bank2
  9724  0B74  01E8               	clrf	_gesture_motion_^(0+256)
  9725  0B75  01E9               	clrf	(_gesture_motion_+1)^(0+256)
  9726  0B76  0008               	return
  9727  0B77                     __end_of_resetGestureParameters:	
  9728                           
  9729                           	psect	text32
  9730  0AC1                     __ptext32:	
  9731 ;; *************** function _enablePower *****************
  9732 ;; Defined at:
  9733 ;;		line 527 in file "APDS9960.c"
  9734 ;; Parameters:    Size  Location     Type
  9735 ;;		None
  9736 ;; Auto vars:     Size  Location     Type
  9737 ;;		None
  9738 ;; Return value:  Size  Location     Type
  9739 ;;                  1    wreg      _Bool 
  9740 ;; Registers used:
  9741 ;;		wreg, status,2, status,0, pclath, cstack
  9742 ;; Tracked objects:
  9743 ;;		On entry : 0/0
  9744 ;;		On exit  : 0/0
  9745 ;;		Unchanged: 0/0
  9746 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9747 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9748 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9749 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9750 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9751 ;;Total ram usage:        0 bytes
  9752 ;; Hardware stack levels used:    1
  9753 ;; Hardware stack levels required when called:   10
  9754 ;; This function calls:
  9755 ;;		_setMode
  9756 ;; This function is called by:
  9757 ;;		_enableGestureSensor
  9758 ;; This function uses a non-reentrant model
  9759 ;;
  9760                           
  9761                           
  9762                           ;psect for function _enablePower
  9763  0AC1                     _enablePower:	
  9764                           
  9765                           ;APDS9960.c: 529:     if( !setMode(0, 1) ) {
  9766                           
  9767                           ;incstack = 0
  9768                           ; Regs used in _enablePower: [wreg+status,2+status,0+pclath+cstack]
  9769  0AC1  0020               	movlb	0	; select bank0
  9770  0AC2  01AB               	clrf	setMode@enable
  9771  0AC3  0AAB               	incf	setMode@enable,f
  9772  0AC4  3000               	movlw	0
  9773  0AC5  318F  27B1  318A   	fcall	_setMode
  9774  0AC8  3A00               	xorlw	0
  9775  0AC9  1D03               	skipz
  9776  0ACA  2ACD               	goto	l6149
  9777                           
  9778                           ;APDS9960.c: 530:         return 0;
  9779  0ACB  3000               	movlw	0
  9780  0ACC  0008               	return
  9781  0ACD                     l6149:	
  9782                           
  9783                           ;APDS9960.c: 533:     return 1;
  9784  0ACD  3001               	movlw	1
  9785  0ACE  0008               	return
  9786  0ACF                     __end_of_enablePower:	
  9787                           
  9788                           	psect	text33
  9789  0FB1                     __ptext33:	
  9790 ;; *************** function _setMode *****************
  9791 ;; Defined at:
  9792 ;;		line 124 in file "APDS9960.c"
  9793 ;; Parameters:    Size  Location     Type
  9794 ;;  mode            1    wreg     unsigned char 
  9795 ;;  enable          1   11[BANK0 ] unsigned char 
  9796 ;; Auto vars:     Size  Location     Type
  9797 ;;  mode            1   15[BANK0 ] unsigned char 
  9798 ;;  reg_val         1   14[BANK0 ] unsigned char 
  9799 ;; Return value:  Size  Location     Type
  9800 ;;                  1    wreg      _Bool 
  9801 ;; Registers used:
  9802 ;;		wreg, status,2, status,0, pclath, cstack
  9803 ;; Tracked objects:
  9804 ;;		On entry : 0/0
  9805 ;;		On exit  : 0/0
  9806 ;;		Unchanged: 0/0
  9807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9808 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9809 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9810 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9811 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9812 ;;Total ram usage:        5 bytes
  9813 ;; Hardware stack levels used:    1
  9814 ;; Hardware stack levels required when called:    9
  9815 ;; This function calls:
  9816 ;;		_getMode
  9817 ;;		_wireWriteDataByte
  9818 ;; This function is called by:
  9819 ;;		_initialize
  9820 ;;		_enableGestureSensor
  9821 ;;		_enablePower
  9822 ;; This function uses a non-reentrant model
  9823 ;;
  9824                           
  9825                           
  9826                           ;psect for function _setMode
  9827  0FB1                     _setMode:	
  9828                           
  9829                           ;incstack = 0
  9830                           ; Regs used in _setMode: [wreg+status,2+status,0+pclath+cstack]
  9831                           ;setMode@mode stored from wreg
  9832  0FB1  0020               	movlb	0	; select bank0
  9833  0FB2  00AF               	movwf	setMode@mode
  9834                           
  9835                           ;APDS9960.c: 124: _Bool setMode(uint8_t mode, uint8_t enable);APDS9960.c: 125: {;APDS996
      +                          0.c: 126:     uint8_t reg_val;;APDS9960.c: 129:     reg_val = getMode();
  9836  0FB3  318A  22A3  318F   	fcall	_getMode
  9837  0FB6  0020               	movlb	0	; select bank0
  9838  0FB7  00AC               	movwf	??_setMode
  9839  0FB8  082C               	movf	??_setMode,w
  9840  0FB9  00AE               	movwf	setMode@reg_val
  9841                           
  9842                           ;APDS9960.c: 130:     if( reg_val == 0xFF ) {
  9843  0FBA  0A2E               	incf	setMode@reg_val,w
  9844  0FBB  1D03               	btfss	3,2
  9845  0FBC  2FBF               	goto	l5437
  9846  0FBD                     l5433:	
  9847                           
  9848                           ;APDS9960.c: 131:         return 0;
  9849  0FBD  3000               	movlw	0
  9850  0FBE  0008               	return
  9851  0FBF                     l5437:	
  9852                           
  9853                           ;APDS9960.c: 135:     enable = enable & 0x01;
  9854  0FBF  082B               	movf	setMode@enable,w
  9855  0FC0  3901               	andlw	1
  9856  0FC1  00AC               	movwf	??_setMode
  9857  0FC2  082C               	movf	??_setMode,w
  9858  0FC3  00AB               	movwf	setMode@enable
  9859                           
  9860                           ;APDS9960.c: 136:     if( mode >= 0 && mode <= 6 ) {
  9861  0FC4  3007               	movlw	7
  9862  0FC5  022F               	subwf	setMode@mode,w
  9863  0FC6  1803               	skipnc
  9864  0FC7  2FE4               	goto	l5447
  9865                           
  9866                           ;APDS9960.c: 137:         if (enable) {
  9867  0FC8  082B               	movf	setMode@enable,w
  9868  0FC9  1903               	btfsc	3,2
  9869  0FCA  2FD7               	goto	l5445
  9870                           
  9871                           ;APDS9960.c: 138:             reg_val |= (1 << mode);
  9872  0FCB  3001               	movlw	1
  9873  0FCC  00AC               	movwf	??_setMode
  9874  0FCD  0A2F               	incf	setMode@mode,w
  9875  0FCE  2FD0               	goto	u4234
  9876  0FCF                     u4235:	
  9877  0FCF  35AC               	lslf	??_setMode,f
  9878  0FD0                     u4234:	
  9879  0FD0  0B89               	decfsz	9,f
  9880  0FD1  2FCF               	goto	u4235
  9881  0FD2  082C               	movf	??_setMode,w
  9882  0FD3  00AD               	movwf	??_setMode+1
  9883  0FD4  082D               	movf	??_setMode+1,w
  9884  0FD5  04AE               	iorwf	setMode@reg_val,f
  9885                           
  9886                           ;APDS9960.c: 139:         } else {
  9887  0FD6  2FF1               	goto	l5455
  9888  0FD7                     l5445:	
  9889                           
  9890                           ;APDS9960.c: 140:             reg_val &= ~(1 << mode);
  9891  0FD7  3001               	movlw	1
  9892  0FD8  00AC               	movwf	??_setMode
  9893  0FD9  0A2F               	incf	setMode@mode,w
  9894  0FDA  2FDC               	goto	u4244
  9895  0FDB                     u4245:	
  9896  0FDB  35AC               	lslf	??_setMode,f
  9897  0FDC                     u4244:	
  9898  0FDC  0B89               	decfsz	9,f
  9899  0FDD  2FDB               	goto	u4245
  9900  0FDE  082C               	movf	??_setMode,w
  9901  0FDF  3AFF               	xorlw	255
  9902  0FE0  00AD               	movwf	??_setMode+1
  9903  0FE1  082D               	movf	??_setMode+1,w
  9904  0FE2  05AE               	andwf	setMode@reg_val,f
  9905  0FE3  2FF1               	goto	l5455
  9906  0FE4                     l5447:	
  9907  0FE4  3007               	movlw	7
  9908  0FE5  062F               	xorwf	setMode@mode,w
  9909  0FE6  1D03               	btfss	3,2
  9910  0FE7  2FF1               	goto	l5455
  9911                           
  9912                           ;APDS9960.c: 143:         if (enable) {
  9913  0FE8  082B               	movf	setMode@enable,w
  9914  0FE9  1903               	btfsc	3,2
  9915  0FEA  2FF0               	goto	l5453
  9916                           
  9917                           ;APDS9960.c: 144:             reg_val = 0x7F;
  9918  0FEB  307F               	movlw	127
  9919  0FEC  00AC               	movwf	??_setMode
  9920  0FED  082C               	movf	??_setMode,w
  9921  0FEE  00AE               	movwf	setMode@reg_val
  9922                           
  9923                           ;APDS9960.c: 145:         } else {
  9924  0FEF  2FF1               	goto	l5455
  9925  0FF0                     l5453:	
  9926                           
  9927                           ;APDS9960.c: 146:             reg_val = 0x00;
  9928  0FF0  01AE               	clrf	setMode@reg_val
  9929  0FF1                     l5455:	
  9930                           
  9931                           ;APDS9960.c: 151:     if( !wireWriteDataByte(0x80, reg_val) ) {
  9932  0FF1  082E               	movf	setMode@reg_val,w
  9933  0FF2  00AC               	movwf	??_setMode
  9934  0FF3  082C               	movf	??_setMode,w
  9935  0FF4  00A6               	movwf	wireWriteDataByte@val
  9936  0FF5  3080               	movlw	128
  9937  0FF6  318B  238F  318F   	fcall	_wireWriteDataByte
  9938  0FF9  0020               	movlb	0	; select bank0
  9939  0FFA  0826               	movf	?_wireWriteDataByte,w
  9940  0FFB  0427               	iorwf	?_wireWriteDataByte+1,w
  9941  0FFC  1903               	btfsc	3,2
  9942  0FFD  2FBD               	goto	l5433
  9943                           
  9944                           ;APDS9960.c: 155:     return 1;
  9945  0FFE  3001               	movlw	1
  9946  0FFF  0008               	return
  9947  1000                     __end_of_setMode:	
  9948                           
  9949                           	psect	text34
  9950  0B8F                     __ptext34:	
  9951 ;; *************** function _wireWriteDataByte *****************
  9952 ;; Defined at:
  9953 ;;		line 871 in file "APDS9960.c"
  9954 ;; Parameters:    Size  Location     Type
  9955 ;;  reg             1    wreg     unsigned char 
  9956 ;;  val             1    6[BANK0 ] unsigned char 
  9957 ;; Auto vars:     Size  Location     Type
  9958 ;;  reg             1    9[BANK0 ] unsigned char 
  9959 ;; Return value:  Size  Location     Type
  9960 ;;                  2    6[BANK0 ] int 
  9961 ;; Registers used:
  9962 ;;		wreg, status,2, status,0, pclath, cstack
  9963 ;; Tracked objects:
  9964 ;;		On entry : 0/0
  9965 ;;		On exit  : 0/0
  9966 ;;		Unchanged: 0/0
  9967 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9968 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9969 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9970 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9971 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9972 ;;Total ram usage:        4 bytes
  9973 ;; Hardware stack levels used:    1
  9974 ;; Hardware stack levels required when called:    7
  9975 ;; This function calls:
  9976 ;;		_I2C_Start
  9977 ;;		_I2C_Stop
  9978 ;;		_I2C_Write_Byte
  9979 ;; This function is called by:
  9980 ;;		_initialize
  9981 ;;		_setMode
  9982 ;;		_setLEDDrive
  9983 ;;		_setProximityGain
  9984 ;;		_setAmbientLightGain
  9985 ;;		_setProxIntLowThresh
  9986 ;;		_setProxIntHighThresh
  9987 ;;		_setLightIntLowThreshold
  9988 ;;		_setLightIntHighThreshold
  9989 ;;		_setGestureEnterThresh
  9990 ;;		_setGestureExitThresh
  9991 ;;		_setGestureGain
  9992 ;;		_setGestureLEDDrive
  9993 ;;		_setGestureWaitTime
  9994 ;;		_setGestureIntEnable
  9995 ;;		_enableGestureSensor
  9996 ;;		_setLEDBoost
  9997 ;;		_setGestureMode
  9998 ;; This function uses a non-reentrant model
  9999 ;;
 10000                           
 10001                           
 10002                           ;psect for function _wireWriteDataByte
 10003  0B8F                     _wireWriteDataByte:	
 10004                           
 10005                           ;incstack = 0
 10006                           ; Regs used in _wireWriteDataByte: [wreg+status,2+status,0+pclath+cstack]
 10007                           ;wireWriteDataByte@reg stored from wreg
 10008  0B8F  0020               	movlb	0	; select bank0
 10009  0B90  00A9               	movwf	wireWriteDataByte@reg
 10010                           
 10011                           ;APDS9960.c: 871: int wireWriteDataByte(unsigned char reg, unsigned char val);APDS9960.c
      +                          : 872: {;APDS9960.c: 882:     I2C_Start();
 10012  0B91  318A  2208  318B   	fcall	_I2C_Start
 10013                           
 10014                           ;APDS9960.c: 883:     I2C_Write_Byte((0x39 << 1 )| 0x00);
 10015  0B94  3072               	movlw	114
 10016  0B95  318B  23AA  318B   	fcall	_I2C_Write_Byte
 10017                           
 10018                           ;APDS9960.c: 884:     I2C_Write_Byte(reg);
 10019  0B98  0020               	movlb	0	; select bank0
 10020  0B99  0829               	movf	wireWriteDataByte@reg,w
 10021  0B9A  318B  23AA  318B   	fcall	_I2C_Write_Byte
 10022                           
 10023                           ;APDS9960.c: 885:     I2C_Write_Byte(val);
 10024  0B9D  0020               	movlb	0	; select bank0
 10025  0B9E  0826               	movf	wireWriteDataByte@val,w
 10026  0B9F  318B  23AA  318B   	fcall	_I2C_Write_Byte
 10027                           
 10028                           ;APDS9960.c: 886:     I2C_Stop();
 10029  0BA2  318A  220E         	fcall	_I2C_Stop
 10030                           
 10031                           ;APDS9960.c: 889:     return 1;
 10032  0BA4  3001               	movlw	1
 10033  0BA5  0020               	movlb	0	; select bank0
 10034  0BA6  00A6               	movwf	?_wireWriteDataByte
 10035  0BA7  3000               	movlw	0
 10036  0BA8  00A7               	movwf	?_wireWriteDataByte+1
 10037  0BA9  0008               	return
 10038  0BAA                     __end_of_wireWriteDataByte:	
 10039                           
 10040                           	psect	text35
 10041  0AA3                     __ptext35:	
 10042 ;; *************** function _getMode *****************
 10043 ;; Defined at:
 10044 ;;		line 159 in file "APDS9960.c"
 10045 ;; Parameters:    Size  Location     Type
 10046 ;;		None
 10047 ;; Auto vars:     Size  Location     Type
 10048 ;;  enable_value    1   10[BANK0 ] unsigned char 
 10049 ;; Return value:  Size  Location     Type
 10050 ;;                  1    wreg      unsigned char 
 10051 ;; Registers used:
 10052 ;;		wreg, status,2, status,0, pclath, cstack
 10053 ;; Tracked objects:
 10054 ;;		On entry : 0/0
 10055 ;;		On exit  : 0/0
 10056 ;;		Unchanged: 0/0
 10057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10058 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10059 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10060 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10061 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10062 ;;Total ram usage:        2 bytes
 10063 ;; Hardware stack levels used:    1
 10064 ;; Hardware stack levels required when called:    8
 10065 ;; This function calls:
 10066 ;;		_wireReadDataByte
 10067 ;; This function is called by:
 10068 ;;		_setMode
 10069 ;;		_readGesture
 10070 ;; This function uses a non-reentrant model
 10071 ;;
 10072                           
 10073                           
 10074                           ;psect for function _getMode
 10075  0AA3                     _getMode:	
 10076                           
 10077                           ;APDS9960.c: 161:     uint8_t enable_value;;APDS9960.c: 164:     enable_value = wireRead
      +                          DataByte(0x80);
 10078                           
 10079                           ;incstack = 0
 10080                           ; Regs used in _getMode: [wreg+status,2+status,0+pclath+cstack]
 10081  0AA3  3080               	movlw	128
 10082  0AA4  318C  2400         	fcall	_wireReadDataByte
 10083  0AA6  0020               	movlb	0	; select bank0
 10084  0AA7  00A9               	movwf	??_getMode
 10085  0AA8  0829               	movf	??_getMode,w
 10086  0AA9  00AA               	movwf	getMode@enable_value
 10087                           
 10088                           ;APDS9960.c: 166:     return enable_value;
 10089  0AAA  082A               	movf	getMode@enable_value,w
 10090  0AAB  0008               	return
 10091  0AAC                     __end_of_getMode:	
 10092                           
 10093                           	psect	text36
 10094  0C00                     __ptext36:	
 10095 ;; *************** function _wireReadDataByte *****************
 10096 ;; Defined at:
 10097 ;;		line 893 in file "APDS9960.c"
 10098 ;; Parameters:    Size  Location     Type
 10099 ;;  reg             1    wreg     unsigned char 
 10100 ;; Auto vars:     Size  Location     Type
 10101 ;;  reg             1    7[BANK0 ] unsigned char 
 10102 ;;  val             1    8[BANK0 ] unsigned char 
 10103 ;; Return value:  Size  Location     Type
 10104 ;;                  1    wreg      unsigned char 
 10105 ;; Registers used:
 10106 ;;		wreg, status,2, status,0, pclath, cstack
 10107 ;; Tracked objects:
 10108 ;;		On entry : 0/0
 10109 ;;		On exit  : 0/0
 10110 ;;		Unchanged: 0/0
 10111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10112 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10113 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10114 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10115 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10116 ;;Total ram usage:        3 bytes
 10117 ;; Hardware stack levels used:    1
 10118 ;; Hardware stack levels required when called:    7
 10119 ;; This function calls:
 10120 ;;		_I2C_ReStart
 10121 ;;		_I2C_Read_Byte
 10122 ;;		_I2C_Send_NACK
 10123 ;;		_I2C_Start
 10124 ;;		_I2C_Stop
 10125 ;;		_I2C_Write_Byte
 10126 ;; This function is called by:
 10127 ;;		_initialize
 10128 ;;		_getMode
 10129 ;;		_setLEDDrive
 10130 ;;		_setProximityGain
 10131 ;;		_setAmbientLightGain
 10132 ;;		_setGestureGain
 10133 ;;		_setGestureLEDDrive
 10134 ;;		_setGestureWaitTime
 10135 ;;		_setGestureIntEnable
 10136 ;;		_setLEDBoost
 10137 ;;		_setGestureMode
 10138 ;;		_isGestureAvailable
 10139 ;;		_readGesture
 10140 ;; This function uses a non-reentrant model
 10141 ;;
 10142                           
 10143                           
 10144                           ;psect for function _wireReadDataByte
 10145  0C00                     _wireReadDataByte:	
 10146                           
 10147                           ;incstack = 0
 10148                           ; Regs used in _wireReadDataByte: [wreg+status,2+status,0+pclath+cstack]
 10149                           ;wireReadDataByte@reg stored from wreg
 10150  0C00  0020               	movlb	0	; select bank0
 10151  0C01  00A7               	movwf	wireReadDataByte@reg
 10152                           
 10153                           ;APDS9960.c: 893:  unsigned char wireReadDataByte(unsigned char reg);APDS9960.c: 894: {;
      +                          APDS9960.c: 908:     unsigned char val;;APDS9960.c: 909:     I2C_Start();
 10154  0C02  318A  2208  318C   	fcall	_I2C_Start
 10155                           
 10156                           ;APDS9960.c: 910:     I2C_Write_Byte((0x39 << 1 )| 0x00);
 10157  0C05  3072               	movlw	114
 10158  0C06  318B  23AA  318C   	fcall	_I2C_Write_Byte
 10159                           
 10160                           ;APDS9960.c: 911:     I2C_Write_Byte(reg);
 10161  0C09  0020               	movlb	0	; select bank0
 10162  0C0A  0827               	movf	wireReadDataByte@reg,w
 10163  0C0B  318B  23AA  318C   	fcall	_I2C_Write_Byte
 10164                           
 10165                           ;APDS9960.c: 912:     I2C_ReStart();
 10166  0C0E  3189  21F9  318C   	fcall	_I2C_ReStart
 10167                           
 10168                           ;APDS9960.c: 914:     I2C_Write_Byte((0x39 << 1) | 0x01);
 10169  0C11  3073               	movlw	115
 10170  0C12  318B  23AA  318C   	fcall	_I2C_Write_Byte
 10171                           
 10172                           ;APDS9960.c: 915:     val=I2C_Read_Byte();
 10173  0C15  318A  22B6  318C   	fcall	_I2C_Read_Byte
 10174  0C18  0020               	movlb	0	; select bank0
 10175  0C19  00A6               	movwf	??_wireReadDataByte
 10176  0C1A  0826               	movf	??_wireReadDataByte,w
 10177  0C1B  00A8               	movwf	wireReadDataByte@val
 10178                           
 10179                           ;APDS9960.c: 916:     I2C_Send_NACK();
 10180  0C1C  318A  2202  318C   	fcall	_I2C_Send_NACK
 10181                           
 10182                           ;APDS9960.c: 917:     I2C_Stop();
 10183  0C1F  318A  220E         	fcall	_I2C_Stop
 10184                           
 10185                           ;APDS9960.c: 919:     return val;
 10186  0C21  0020               	movlb	0	; select bank0
 10187  0C22  0828               	movf	wireReadDataByte@val,w
 10188  0C23  0008               	return
 10189  0C24                     __end_of_wireReadDataByte:	
 10190                           
 10191                           	psect	text37
 10192  0BAA                     __ptext37:	
 10193 ;; *************** function _I2C_Write_Byte *****************
 10194 ;; Defined at:
 10195 ;;		line 75 in file "i2c.c"
 10196 ;; Parameters:    Size  Location     Type
 10197 ;;  Byte            1    wreg     unsigned char 
 10198 ;; Auto vars:     Size  Location     Type
 10199 ;;  Byte            1    3[BANK0 ] unsigned char 
 10200 ;;  count           2    4[BANK0 ] unsigned int 
 10201 ;; Return value:  Size  Location     Type
 10202 ;;                  1    wreg      void 
 10203 ;; Registers used:
 10204 ;;		wreg, status,2, status,0, pclath, cstack
 10205 ;; Tracked objects:
 10206 ;;		On entry : 0/0
 10207 ;;		On exit  : 0/0
 10208 ;;		Unchanged: 0/0
 10209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10211 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10212 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10213 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10214 ;;Total ram usage:        5 bytes
 10215 ;; Hardware stack levels used:    1
 10216 ;; Hardware stack levels required when called:    6
 10217 ;; This function calls:
 10218 ;;		_i2c1_driver_TXData
 10219 ;; This function is called by:
 10220 ;;		_wireReadDataBlock
 10221 ;;		_wireWriteDataByte
 10222 ;;		_wireReadDataByte
 10223 ;; This function uses a non-reentrant model
 10224 ;;
 10225                           
 10226                           
 10227                           ;psect for function _I2C_Write_Byte
 10228  0BAA                     _I2C_Write_Byte:	
 10229                           
 10230                           ;incstack = 0
 10231                           ; Regs used in _I2C_Write_Byte: [wreg+status,2+status,0+pclath+cstack]
 10232                           ;I2C_Write_Byte@Byte stored from wreg
 10233  0BAA  0020               	movlb	0	; select bank0
 10234  0BAB  00A3               	movwf	I2C_Write_Byte@Byte
 10235                           
 10236                           ;i2c.c: 75: void I2C_Write_Byte(unsigned char Byte);i2c.c: 76: {;i2c.c: 80:     i2c1_dri
      +                          ver_TXData(Byte);
 10237  0BAC  0823               	movf	I2C_Write_Byte@Byte,w
 10238  0BAD  318A  224D  318B   	fcall	_i2c1_driver_TXData
 10239                           
 10240                           ;i2c.c: 83:     unsigned int count = 0;
 10241  0BB0  0020               	movlb	0	; select bank0
 10242  0BB1  01A4               	clrf	I2C_Write_Byte@count
 10243  0BB2  01A5               	clrf	I2C_Write_Byte@count+1
 10244  0BB3                     l1079:	
 10245                           ;i2c.c: 84:     while(SSP1CON2bits.ACKSTAT);
 10246                           
 10247  0BB3  0024               	movlb	4	; select bank4
 10248  0BB4  1B16               	btfsc	22,6	;volatile
 10249  0BB5  2BB3               	goto	l1079
 10250  0BB6                     l5281:	
 10251  0BB6  0020               	movlb	0	; select bank0
 10252  0BB7  0825               	movf	I2C_Write_Byte@count+1,w
 10253  0BB8  00A2               	movwf	??_I2C_Write_Byte+1
 10254  0BB9  0824               	movf	I2C_Write_Byte@count,w
 10255  0BBA  00A1               	movwf	??_I2C_Write_Byte
 10256  0BBB  0AA4               	incf	I2C_Write_Byte@count,f
 10257  0BBC  1903               	skipnz
 10258  0BBD  0AA5               	incf	I2C_Write_Byte@count+1,f
 10259  0BBE  3000               	movlw	0
 10260  0BBF  0222               	subwf	??_I2C_Write_Byte+1,w
 10261  0BC0  3005               	movlw	5
 10262  0BC1  1903               	skipnz
 10263  0BC2  0221               	subwf	??_I2C_Write_Byte,w
 10264  0BC3  1803               	btfsc	3,0
 10265  0BC4  0008               	return
 10266  0BC5  2BB6               	goto	l5281
 10267  0BC6                     __end_of_I2C_Write_Byte:	
 10268                           
 10269                           	psect	text38
 10270  0A4D                     __ptext38:	
 10271 ;; *************** function _i2c1_driver_TXData *****************
 10272 ;; Defined at:
 10273 ;;		line 186 in file "mcc_generated_files/i2c1_driver.c"
 10274 ;; Parameters:    Size  Location     Type
 10275 ;;  d               1    wreg     unsigned char 
 10276 ;; Auto vars:     Size  Location     Type
 10277 ;;  d               1    0[BANK0 ] unsigned char 
 10278 ;; Return value:  Size  Location     Type
 10279 ;;                  1    wreg      void 
 10280 ;; Registers used:
 10281 ;;		wreg
 10282 ;; Tracked objects:
 10283 ;;		On entry : 0/0
 10284 ;;		On exit  : 0/0
 10285 ;;		Unchanged: 0/0
 10286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10287 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10288 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10289 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10290 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10291 ;;Total ram usage:        1 bytes
 10292 ;; Hardware stack levels used:    1
 10293 ;; Hardware stack levels required when called:    5
 10294 ;; This function calls:
 10295 ;;		Nothing
 10296 ;; This function is called by:
 10297 ;;		_I2C_Write_Byte
 10298 ;; This function uses a non-reentrant model
 10299 ;;
 10300                           
 10301                           
 10302                           ;psect for function _i2c1_driver_TXData
 10303  0A4D                     _i2c1_driver_TXData:	
 10304                           
 10305                           ;incstack = 0
 10306                           ; Regs used in _i2c1_driver_TXData: [wreg]
 10307                           ;i2c1_driver_TXData@d stored from wreg
 10308  0A4D  0020               	movlb	0	; select bank0
 10309  0A4E  00A0               	movwf	i2c1_driver_TXData@d
 10310                           
 10311                           ;mcc_generated_files/i2c1_driver.c: 186: __attribute__((inline)) void i2c1_driver_TXData
      +                          (char d);mcc_generated_files/i2c1_driver.c: 187: {;mcc_generated_files/i2c1_driver.c: 18
      +                          8:     SSP1BUF = d;
 10312  0A4F  0820               	movf	i2c1_driver_TXData@d,w
 10313  0A50  0024               	movlb	4	; select bank4
 10314  0A51  0091               	movwf	17	;volatile
 10315  0A52  0008               	return
 10316  0A53                     __end_of_i2c1_driver_TXData:	
 10317                           
 10318                           	psect	text39
 10319  0A0E                     __ptext39:	
 10320 ;; *************** function _I2C_Stop *****************
 10321 ;; Defined at:
 10322 ;;		line 50 in file "i2c.c"
 10323 ;; Parameters:    Size  Location     Type
 10324 ;;		None
 10325 ;; Auto vars:     Size  Location     Type
 10326 ;;		None
 10327 ;; Return value:  Size  Location     Type
 10328 ;;                  1    wreg      void 
 10329 ;; Registers used:
 10330 ;;		status,2, status,0, pclath, cstack
 10331 ;; Tracked objects:
 10332 ;;		On entry : 0/0
 10333 ;;		On exit  : 0/0
 10334 ;;		Unchanged: 0/0
 10335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10336 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10337 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10338 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10339 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10340 ;;Total ram usage:        0 bytes
 10341 ;; Hardware stack levels used:    1
 10342 ;; Hardware stack levels required when called:    6
 10343 ;; This function calls:
 10344 ;;		_i2c1_driver_stop
 10345 ;; This function is called by:
 10346 ;;		_wireReadDataBlock
 10347 ;;		_wireWriteDataByte
 10348 ;;		_wireReadDataByte
 10349 ;; This function uses a non-reentrant model
 10350 ;;
 10351                           
 10352                           
 10353                           ;psect for function _I2C_Stop
 10354  0A0E                     _I2C_Stop:	
 10355                           
 10356                           ;i2c.c: 52:  i2c1_driver_stop();
 10357                           
 10358                           ;incstack = 0
 10359                           ; Regs used in _I2C_Stop: [status,2+status,0+pclath+cstack]
 10360  0A0E  318A  220B         	fcall	_i2c1_driver_stop
 10361  0A10  0008               	return
 10362  0A11                     __end_of_I2C_Stop:	
 10363                           
 10364                           	psect	text40
 10365  0A0B                     __ptext40:	
 10366 ;; *************** function _i2c1_driver_stop *****************
 10367 ;; Defined at:
 10368 ;;		line 156 in file "mcc_generated_files/i2c1_driver.c"
 10369 ;; Parameters:    Size  Location     Type
 10370 ;;		None
 10371 ;; Auto vars:     Size  Location     Type
 10372 ;;		None
 10373 ;; Return value:  Size  Location     Type
 10374 ;;                  1    wreg      void 
 10375 ;; Registers used:
 10376 ;;		None
 10377 ;; Tracked objects:
 10378 ;;		On entry : 0/0
 10379 ;;		On exit  : 0/0
 10380 ;;		Unchanged: 0/0
 10381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10382 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10383 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10384 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10385 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10386 ;;Total ram usage:        0 bytes
 10387 ;; Hardware stack levels used:    1
 10388 ;; Hardware stack levels required when called:    5
 10389 ;; This function calls:
 10390 ;;		Nothing
 10391 ;; This function is called by:
 10392 ;;		_I2C_Stop
 10393 ;; This function uses a non-reentrant model
 10394 ;;
 10395                           
 10396                           
 10397                           ;psect for function _i2c1_driver_stop
 10398  0A0B                     _i2c1_driver_stop:	
 10399                           
 10400                           ;mcc_generated_files/i2c1_driver.c: 158:     SSP1CON2bits.PEN = 1;
 10401                           
 10402                           ;incstack = 0
 10403                           ; Regs used in _i2c1_driver_stop: []
 10404  0A0B  0024               	movlb	4	; select bank4
 10405  0A0C  1516               	bsf	22,2	;volatile
 10406  0A0D  0008               	return
 10407  0A0E                     __end_of_i2c1_driver_stop:	
 10408                           
 10409                           	psect	text41
 10410  0A08                     __ptext41:	
 10411 ;; *************** function _I2C_Start *****************
 10412 ;; Defined at:
 10413 ;;		line 35 in file "i2c.c"
 10414 ;; Parameters:    Size  Location     Type
 10415 ;;		None
 10416 ;; Auto vars:     Size  Location     Type
 10417 ;;		None
 10418 ;; Return value:  Size  Location     Type
 10419 ;;                  1    wreg      void 
 10420 ;; Registers used:
 10421 ;;		status,2, status,0, pclath, cstack
 10422 ;; Tracked objects:
 10423 ;;		On entry : 0/0
 10424 ;;		On exit  : 0/0
 10425 ;;		Unchanged: 0/0
 10426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10427 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10428 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10429 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10430 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10431 ;;Total ram usage:        0 bytes
 10432 ;; Hardware stack levels used:    1
 10433 ;; Hardware stack levels required when called:    6
 10434 ;; This function calls:
 10435 ;;		_i2c1_driver_start
 10436 ;; This function is called by:
 10437 ;;		_wireReadDataBlock
 10438 ;;		_wireWriteDataByte
 10439 ;;		_wireReadDataByte
 10440 ;; This function uses a non-reentrant model
 10441 ;;
 10442                           
 10443                           
 10444                           ;psect for function _I2C_Start
 10445  0A08                     _I2C_Start:	
 10446                           
 10447                           ;i2c.c: 37:  i2c1_driver_start();
 10448                           
 10449                           ;incstack = 0
 10450                           ; Regs used in _I2C_Start: [status,2+status,0+pclath+cstack]
 10451  0A08  318A  2205         	fcall	_i2c1_driver_start
 10452  0A0A  0008               	return
 10453  0A0B                     __end_of_I2C_Start:	
 10454                           
 10455                           	psect	text42
 10456  0A05                     __ptext42:	
 10457 ;; *************** function _i2c1_driver_start *****************
 10458 ;; Defined at:
 10459 ;;		line 146 in file "mcc_generated_files/i2c1_driver.c"
 10460 ;; Parameters:    Size  Location     Type
 10461 ;;		None
 10462 ;; Auto vars:     Size  Location     Type
 10463 ;;		None
 10464 ;; Return value:  Size  Location     Type
 10465 ;;                  1    wreg      void 
 10466 ;; Registers used:
 10467 ;;		None
 10468 ;; Tracked objects:
 10469 ;;		On entry : 0/0
 10470 ;;		On exit  : 0/0
 10471 ;;		Unchanged: 0/0
 10472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10473 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10474 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10475 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10476 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10477 ;;Total ram usage:        0 bytes
 10478 ;; Hardware stack levels used:    1
 10479 ;; Hardware stack levels required when called:    5
 10480 ;; This function calls:
 10481 ;;		Nothing
 10482 ;; This function is called by:
 10483 ;;		_I2C_Start
 10484 ;;		_i2c_masterOperation
 10485 ;; This function uses a non-reentrant model
 10486 ;;
 10487                           
 10488                           
 10489                           ;psect for function _i2c1_driver_start
 10490  0A05                     _i2c1_driver_start:	
 10491                           
 10492                           ;mcc_generated_files/i2c1_driver.c: 148:     SSP1CON2bits.SEN = 1;
 10493                           
 10494                           ;incstack = 0
 10495                           ; Regs used in _i2c1_driver_start: []
 10496  0A05  0024               	movlb	4	; select bank4
 10497  0A06  1416               	bsf	22,0	;volatile
 10498  0A07  0008               	return
 10499  0A08                     __end_of_i2c1_driver_start:	
 10500                           
 10501                           	psect	text43
 10502  0A02                     __ptext43:	
 10503 ;; *************** function _I2C_Send_NACK *****************
 10504 ;; Defined at:
 10505 ;;		line 66 in file "i2c.c"
 10506 ;; Parameters:    Size  Location     Type
 10507 ;;		None
 10508 ;; Auto vars:     Size  Location     Type
 10509 ;;		None
 10510 ;; Return value:  Size  Location     Type
 10511 ;;                  1    wreg      void 
 10512 ;; Registers used:
 10513 ;;		status,2, status,0, pclath, cstack
 10514 ;; Tracked objects:
 10515 ;;		On entry : 0/0
 10516 ;;		On exit  : 0/0
 10517 ;;		Unchanged: 0/0
 10518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10520 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10521 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10522 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10523 ;;Total ram usage:        0 bytes
 10524 ;; Hardware stack levels used:    1
 10525 ;; Hardware stack levels required when called:    6
 10526 ;; This function calls:
 10527 ;;		_i2c1_driver_sendNACK
 10528 ;; This function is called by:
 10529 ;;		_wireReadDataBlock
 10530 ;;		_wireReadDataByte
 10531 ;; This function uses a non-reentrant model
 10532 ;;
 10533                           
 10534                           
 10535                           ;psect for function _I2C_Send_NACK
 10536  0A02                     _I2C_Send_NACK:	
 10537                           
 10538                           ;i2c.c: 68:     i2c1_driver_sendNACK();
 10539                           
 10540                           ;incstack = 0
 10541                           ; Regs used in _I2C_Send_NACK: [status,2+status,0+pclath+cstack]
 10542  0A02  318A  2239         	fcall	_i2c1_driver_sendNACK
 10543  0A04  0008               	return
 10544  0A05                     __end_of_I2C_Send_NACK:	
 10545                           
 10546                           	psect	text44
 10547  0A39                     __ptext44:	
 10548 ;; *************** function _i2c1_driver_sendNACK *****************
 10549 ;; Defined at:
 10550 ;;		line 202 in file "mcc_generated_files/i2c1_driver.c"
 10551 ;; Parameters:    Size  Location     Type
 10552 ;;		None
 10553 ;; Auto vars:     Size  Location     Type
 10554 ;;		None
 10555 ;; Return value:  Size  Location     Type
 10556 ;;                  1    wreg      void 
 10557 ;; Registers used:
 10558 ;;		None
 10559 ;; Tracked objects:
 10560 ;;		On entry : 0/0
 10561 ;;		On exit  : 0/0
 10562 ;;		Unchanged: 0/0
 10563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10564 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10565 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10566 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10567 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10568 ;;Total ram usage:        0 bytes
 10569 ;; Hardware stack levels used:    1
 10570 ;; Hardware stack levels required when called:    5
 10571 ;; This function calls:
 10572 ;;		Nothing
 10573 ;; This function is called by:
 10574 ;;		_I2C_Send_NACK
 10575 ;; This function uses a non-reentrant model
 10576 ;;
 10577                           
 10578                           
 10579                           ;psect for function _i2c1_driver_sendNACK
 10580  0A39                     _i2c1_driver_sendNACK:	
 10581                           
 10582                           ;mcc_generated_files/i2c1_driver.c: 204:     SSP1CON2bits.ACKDT = 1;
 10583                           
 10584                           ;incstack = 0
 10585                           ; Regs used in _i2c1_driver_sendNACK: []
 10586  0A39  0024               	movlb	4	; select bank4
 10587  0A3A  1696               	bsf	22,5	;volatile
 10588                           
 10589                           ;mcc_generated_files/i2c1_driver.c: 205:     SSP1CON2bits.ACKEN = 1;
 10590  0A3B  1616               	bsf	22,4	;volatile
 10591  0A3C  0008               	return
 10592  0A3D                     __end_of_i2c1_driver_sendNACK:	
 10593                           
 10594                           	psect	text45
 10595  0AB6                     __ptext45:	
 10596 ;; *************** function _I2C_Read_Byte *****************
 10597 ;; Defined at:
 10598 ;;		line 115 in file "i2c.c"
 10599 ;; Parameters:    Size  Location     Type
 10600 ;;		None
 10601 ;; Auto vars:     Size  Location     Type
 10602 ;;		None
 10603 ;; Return value:  Size  Location     Type
 10604 ;;                  1    wreg      unsigned char 
 10605 ;; Registers used:
 10606 ;;		wreg, status,2, status,0, pclath, cstack
 10607 ;; Tracked objects:
 10608 ;;		On entry : 0/0
 10609 ;;		On exit  : 0/0
 10610 ;;		Unchanged: 0/0
 10611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10612 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10613 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10614 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10615 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10616 ;;Total ram usage:        0 bytes
 10617 ;; Hardware stack levels used:    1
 10618 ;; Hardware stack levels required when called:    6
 10619 ;; This function calls:
 10620 ;;		_i2c1_driver_getRXData
 10621 ;;		_i2c1_driver_isBufferFull
 10622 ;;		_i2c1_driver_startRX
 10623 ;; This function is called by:
 10624 ;;		_wireReadDataBlock
 10625 ;;		_wireReadDataByte
 10626 ;; This function uses a non-reentrant model
 10627 ;;
 10628                           
 10629                           
 10630                           ;psect for function _I2C_Read_Byte
 10631  0AB6                     _I2C_Read_Byte:	
 10632                           
 10633                           ;i2c.c: 117:     i2c1_driver_startRX();
 10634                           
 10635                           ;incstack = 0
 10636                           ; Regs used in _I2C_Read_Byte: [wreg+status,2+status,0+pclath+cstack]
 10637  0AB6  3189  21FF  318A   	fcall	_i2c1_driver_startRX
 10638  0AB9                     l5287:	
 10639                           ;i2c.c: 121:  while (i2c1_driver_isBufferFull() == 0) {
 10640                           
 10641                           
 10642                           ;i2c.c: 121:  while (i2c1_driver_isBufferFull() == 0) {
 10643  0AB9  318A  2274  318A   	fcall	_i2c1_driver_isBufferFull
 10644  0ABC  1C03               	btfss	3,0
 10645  0ABD  2AB9               	goto	l5287
 10646                           
 10647                           ;i2c.c: 137:   return i2c1_driver_getRXData();
 10648  0ABE  3189  21FC         	fcall	_i2c1_driver_getRXData
 10649  0AC0  0008               	return
 10650  0AC1                     __end_of_I2C_Read_Byte:	
 10651                           
 10652                           	psect	text46
 10653  09FF                     __ptext46:	
 10654 ;; *************** function _i2c1_driver_startRX *****************
 10655 ;; Defined at:
 10656 ;;		line 166 in file "mcc_generated_files/i2c1_driver.c"
 10657 ;; Parameters:    Size  Location     Type
 10658 ;;		None
 10659 ;; Auto vars:     Size  Location     Type
 10660 ;;		None
 10661 ;; Return value:  Size  Location     Type
 10662 ;;                  1    wreg      void 
 10663 ;; Registers used:
 10664 ;;		None
 10665 ;; Tracked objects:
 10666 ;;		On entry : 0/0
 10667 ;;		On exit  : 0/0
 10668 ;;		Unchanged: 0/0
 10669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10670 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10671 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10672 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10673 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10674 ;;Total ram usage:        0 bytes
 10675 ;; Hardware stack levels used:    1
 10676 ;; Hardware stack levels required when called:    5
 10677 ;; This function calls:
 10678 ;;		Nothing
 10679 ;; This function is called by:
 10680 ;;		_I2C_Read_Byte
 10681 ;; This function uses a non-reentrant model
 10682 ;;
 10683                           
 10684                           
 10685                           ;psect for function _i2c1_driver_startRX
 10686  09FF                     _i2c1_driver_startRX:	
 10687                           
 10688                           ;mcc_generated_files/i2c1_driver.c: 168:     SSP1CON2bits.RCEN = 1;
 10689                           
 10690                           ;incstack = 0
 10691                           ; Regs used in _i2c1_driver_startRX: []
 10692  09FF  0024               	movlb	4	; select bank4
 10693  0A00  1596               	bsf	22,3	;volatile
 10694  0A01  0008               	return
 10695  0A02                     __end_of_i2c1_driver_startRX:	
 10696                           
 10697                           	psect	text47
 10698  0A74                     __ptext47:	
 10699 ;; *************** function _i2c1_driver_isBufferFull *****************
 10700 ;; Defined at:
 10701 ;;		line 213 in file "mcc_generated_files/i2c1_driver.c"
 10702 ;; Parameters:    Size  Location     Type
 10703 ;;		None
 10704 ;; Auto vars:     Size  Location     Type
 10705 ;;		None
 10706 ;; Return value:  Size  Location     Type
 10707 ;;		None               void
 10708 ;; Registers used:
 10709 ;;		wreg, status,2, status,0
 10710 ;; Tracked objects:
 10711 ;;		On entry : 0/0
 10712 ;;		On exit  : 0/0
 10713 ;;		Unchanged: 0/0
 10714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10716 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10717 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10718 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10719 ;;Total ram usage:        1 bytes
 10720 ;; Hardware stack levels used:    1
 10721 ;; Hardware stack levels required when called:    5
 10722 ;; This function calls:
 10723 ;;		Nothing
 10724 ;; This function is called by:
 10725 ;;		_I2C_Read_Byte
 10726 ;; This function uses a non-reentrant model
 10727 ;;
 10728                           
 10729                           
 10730                           ;psect for function _i2c1_driver_isBufferFull
 10731  0A74                     _i2c1_driver_isBufferFull:	
 10732                           
 10733                           ;mcc_generated_files/i2c1_driver.c: 215:     return SSP1STATbits.BF;
 10734                           
 10735                           ;incstack = 0
 10736                           ; Regs used in _i2c1_driver_isBufferFull: [wreg+status,2+status,0]
 10737  0A74  0024               	movlb	4	; select bank4
 10738  0A75  0814               	movf	20,w	;volatile
 10739  0A76  3901               	andlw	1
 10740  0A77  0020               	movlb	0	; select bank0
 10741  0A78  00A0               	movwf	??_i2c1_driver_isBufferFull
 10742  0A79  0C20               	rrf	??_i2c1_driver_isBufferFull,w
 10743  0A7A  0008               	return
 10744  0A7B                     __end_of_i2c1_driver_isBufferFull:	
 10745                           
 10746                           	psect	text48
 10747  09FC                     __ptext48:	
 10748 ;; *************** function _i2c1_driver_getRXData *****************
 10749 ;; Defined at:
 10750 ;;		line 171 in file "mcc_generated_files/i2c1_driver.c"
 10751 ;; Parameters:    Size  Location     Type
 10752 ;;		None
 10753 ;; Auto vars:     Size  Location     Type
 10754 ;;		None
 10755 ;; Return value:  Size  Location     Type
 10756 ;;                  1    wreg      unsigned char 
 10757 ;; Registers used:
 10758 ;;		wreg
 10759 ;; Tracked objects:
 10760 ;;		On entry : 0/0
 10761 ;;		On exit  : 0/0
 10762 ;;		Unchanged: 0/0
 10763 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10765 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10766 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10767 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10768 ;;Total ram usage:        0 bytes
 10769 ;; Hardware stack levels used:    1
 10770 ;; Hardware stack levels required when called:    5
 10771 ;; This function calls:
 10772 ;;		Nothing
 10773 ;; This function is called by:
 10774 ;;		_I2C_Read_Byte
 10775 ;; This function uses a non-reentrant model
 10776 ;;
 10777                           
 10778                           
 10779                           ;psect for function _i2c1_driver_getRXData
 10780  09FC                     _i2c1_driver_getRXData:	
 10781                           
 10782                           ;mcc_generated_files/i2c1_driver.c: 173:     return SSP1BUF;
 10783                           
 10784                           ;incstack = 0
 10785                           ; Regs used in _i2c1_driver_getRXData: [wreg]
 10786  09FC  0024               	movlb	4	; select bank4
 10787  09FD  0811               	movf	17,w	;volatile
 10788  09FE  0008               	return
 10789  09FF                     __end_of_i2c1_driver_getRXData:	
 10790                           
 10791                           	psect	text49
 10792  09F9                     __ptext49:	
 10793 ;; *************** function _I2C_ReStart *****************
 10794 ;; Defined at:
 10795 ;;		line 43 in file "i2c.c"
 10796 ;; Parameters:    Size  Location     Type
 10797 ;;		None
 10798 ;; Auto vars:     Size  Location     Type
 10799 ;;		None
 10800 ;; Return value:  Size  Location     Type
 10801 ;;                  1    wreg      void 
 10802 ;; Registers used:
 10803 ;;		status,2, status,0, pclath, cstack
 10804 ;; Tracked objects:
 10805 ;;		On entry : 0/0
 10806 ;;		On exit  : 0/0
 10807 ;;		Unchanged: 0/0
 10808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10810 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10812 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10813 ;;Total ram usage:        0 bytes
 10814 ;; Hardware stack levels used:    1
 10815 ;; Hardware stack levels required when called:    6
 10816 ;; This function calls:
 10817 ;;		_i2c1_driver_restart
 10818 ;; This function is called by:
 10819 ;;		_wireReadDataBlock
 10820 ;;		_wireReadDataByte
 10821 ;; This function uses a non-reentrant model
 10822 ;;
 10823                           
 10824                           
 10825                           ;psect for function _I2C_ReStart
 10826  09F9                     _I2C_ReStart:	
 10827                           
 10828                           ;i2c.c: 45:  i2c1_driver_restart();
 10829                           
 10830                           ;incstack = 0
 10831                           ; Regs used in _I2C_ReStart: [status,2+status,0+pclath+cstack]
 10832  09F9  3189  21F6         	fcall	_i2c1_driver_restart
 10833  09FB  0008               	return
 10834  09FC                     __end_of_I2C_ReStart:	
 10835                           
 10836                           	psect	text50
 10837  09F6                     __ptext50:	
 10838 ;; *************** function _i2c1_driver_restart *****************
 10839 ;; Defined at:
 10840 ;;		line 151 in file "mcc_generated_files/i2c1_driver.c"
 10841 ;; Parameters:    Size  Location     Type
 10842 ;;		None
 10843 ;; Auto vars:     Size  Location     Type
 10844 ;;		None
 10845 ;; Return value:  Size  Location     Type
 10846 ;;                  1    wreg      void 
 10847 ;; Registers used:
 10848 ;;		None
 10849 ;; Tracked objects:
 10850 ;;		On entry : 0/0
 10851 ;;		On exit  : 0/0
 10852 ;;		Unchanged: 0/0
 10853 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10854 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10855 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10856 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10857 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10858 ;;Total ram usage:        0 bytes
 10859 ;; Hardware stack levels used:    1
 10860 ;; Hardware stack levels required when called:    5
 10861 ;; This function calls:
 10862 ;;		Nothing
 10863 ;; This function is called by:
 10864 ;;		_I2C_ReStart
 10865 ;; This function uses a non-reentrant model
 10866 ;;
 10867                           
 10868                           
 10869                           ;psect for function _i2c1_driver_restart
 10870  09F6                     _i2c1_driver_restart:	
 10871                           
 10872                           ;mcc_generated_files/i2c1_driver.c: 153:     SSP1CON2bits.RSEN = 1;
 10873                           
 10874                           ;incstack = 0
 10875                           ; Regs used in _i2c1_driver_restart: []
 10876  09F6  0024               	movlb	4	; select bank4
 10877  09F7  1496               	bsf	22,1	;volatile
 10878  09F8  0008               	return
 10879  09F9                     __end_of_i2c1_driver_restart:	
 10880                           
 10881                           	psect	text51
 10882  0ACF                     __ptext51:	
 10883 ;; *************** function _SYSTEM_Initialize *****************
 10884 ;; Defined at:
 10885 ;;		line 50 in file "mcc_generated_files/mcc.c"
 10886 ;; Parameters:    Size  Location     Type
 10887 ;;		None
 10888 ;; Auto vars:     Size  Location     Type
 10889 ;;		None
 10890 ;; Return value:  Size  Location     Type
 10891 ;;                  1    wreg      void 
 10892 ;; Registers used:
 10893 ;;		wreg, status,2, status,0, pclath, cstack
 10894 ;; Tracked objects:
 10895 ;;		On entry : 0/0
 10896 ;;		On exit  : 0/0
 10897 ;;		Unchanged: 0/0
 10898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10899 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10900 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10901 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10902 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10903 ;;Total ram usage:        0 bytes
 10904 ;; Hardware stack levels used:    1
 10905 ;; Hardware stack levels required when called:    6
 10906 ;; This function calls:
 10907 ;;		_OSCILLATOR_Initialize
 10908 ;;		_PIN_MANAGER_Initialize
 10909 ;;		_PMD_Initialize
 10910 ;;		_SPI2_Initialize
 10911 ;;		_WDT_Initialize
 10912 ;; This function is called by:
 10913 ;;		_main
 10914 ;; This function uses a non-reentrant model
 10915 ;;
 10916                           
 10917                           
 10918                           ;psect for function _SYSTEM_Initialize
 10919  0ACF                     _SYSTEM_Initialize:	
 10920                           
 10921                           ;mcc_generated_files/mcc.c: 53:     PMD_Initialize();
 10922                           
 10923                           ;incstack = 0
 10924                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
 10925  0ACF  318A  2293  318A   	fcall	_PMD_Initialize
 10926                           
 10927                           ;mcc_generated_files/mcc.c: 54:     PIN_MANAGER_Initialize();
 10928  0AD2  318E  265A  318A   	fcall	_PIN_MANAGER_Initialize
 10929                           
 10930                           ;mcc_generated_files/mcc.c: 55:     OSCILLATOR_Initialize();
 10931  0AD5  318A  228B  318A   	fcall	_OSCILLATOR_Initialize
 10932                           
 10933                           ;mcc_generated_files/mcc.c: 56:     WDT_Initialize();
 10934  0AD8  318A  2235  318A   	fcall	_WDT_Initialize
 10935                           
 10936                           ;mcc_generated_files/mcc.c: 57:     SPI2_Initialize();
 10937  0ADB  318A  226D         	fcall	_SPI2_Initialize
 10938  0ADD  0008               	return
 10939  0ADE                     __end_of_SYSTEM_Initialize:	
 10940                           
 10941                           	psect	text52
 10942  0A35                     __ptext52:	
 10943 ;; *************** function _WDT_Initialize *****************
 10944 ;; Defined at:
 10945 ;;		line 74 in file "mcc_generated_files/mcc.c"
 10946 ;; Parameters:    Size  Location     Type
 10947 ;;		None
 10948 ;; Auto vars:     Size  Location     Type
 10949 ;;		None
 10950 ;; Return value:  Size  Location     Type
 10951 ;;                  1    wreg      void 
 10952 ;; Registers used:
 10953 ;;		wreg
 10954 ;; Tracked objects:
 10955 ;;		On entry : 0/0
 10956 ;;		On exit  : 0/0
 10957 ;;		Unchanged: 0/0
 10958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10959 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10960 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10961 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10962 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10963 ;;Total ram usage:        0 bytes
 10964 ;; Hardware stack levels used:    1
 10965 ;; Hardware stack levels required when called:    5
 10966 ;; This function calls:
 10967 ;;		Nothing
 10968 ;; This function is called by:
 10969 ;;		_SYSTEM_Initialize
 10970 ;; This function uses a non-reentrant model
 10971 ;;
 10972                           
 10973                           
 10974                           ;psect for function _WDT_Initialize
 10975  0A35                     _WDT_Initialize:	
 10976                           
 10977                           ;mcc_generated_files/mcc.c: 77:     WDTCON = 0x18;
 10978                           
 10979                           ;incstack = 0
 10980                           ; Regs used in _WDT_Initialize: [wreg]
 10981  0A35  3018               	movlw	24
 10982  0A36  0021               	movlb	1	; select bank1
 10983  0A37  0097               	movwf	23	;volatile
 10984  0A38  0008               	return
 10985  0A39                     __end_of_WDT_Initialize:	
 10986                           
 10987                           	psect	text53
 10988  0A6D                     __ptext53:	
 10989 ;; *************** function _SPI2_Initialize *****************
 10990 ;; Defined at:
 10991 ;;		line 65 in file "mcc_generated_files/spi2.c"
 10992 ;; Parameters:    Size  Location     Type
 10993 ;;		None
 10994 ;; Auto vars:     Size  Location     Type
 10995 ;;		None
 10996 ;; Return value:  Size  Location     Type
 10997 ;;                  1    wreg      void 
 10998 ;; Registers used:
 10999 ;;		wreg, status,2
 11000 ;; Tracked objects:
 11001 ;;		On entry : 0/0
 11002 ;;		On exit  : 0/0
 11003 ;;		Unchanged: 0/0
 11004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11005 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11006 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11007 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11008 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11009 ;;Total ram usage:        0 bytes
 11010 ;; Hardware stack levels used:    1
 11011 ;; Hardware stack levels required when called:    5
 11012 ;; This function calls:
 11013 ;;		Nothing
 11014 ;; This function is called by:
 11015 ;;		_SYSTEM_Initialize
 11016 ;; This function uses a non-reentrant model
 11017 ;;
 11018                           
 11019                           
 11020                           ;psect for function _SPI2_Initialize
 11021  0A6D                     _SPI2_Initialize:	
 11022                           
 11023                           ;mcc_generated_files/spi2.c: 70:     SSP2STAT = 0x80;
 11024                           
 11025                           ;incstack = 0
 11026                           ; Regs used in _SPI2_Initialize: [wreg+status,2]
 11027  0A6D  3080               	movlw	128
 11028  0A6E  0024               	movlb	4	; select bank4
 11029  0A6F  009C               	movwf	28	;volatile
 11030                           
 11031                           ;mcc_generated_files/spi2.c: 73:     SSP2CON1 = 0x30;
 11032  0A70  3030               	movlw	48
 11033  0A71  009D               	movwf	29	;volatile
 11034                           
 11035                           ;mcc_generated_files/spi2.c: 76:     SSP2ADD = 0x00;
 11036  0A72  019A               	clrf	26	;volatile
 11037  0A73  0008               	return
 11038  0A74                     __end_of_SPI2_Initialize:	
 11039                           
 11040                           	psect	text54
 11041  0A93                     __ptext54:	
 11042 ;; *************** function _PMD_Initialize *****************
 11043 ;; Defined at:
 11044 ;;		line 80 in file "mcc_generated_files/mcc.c"
 11045 ;; Parameters:    Size  Location     Type
 11046 ;;		None
 11047 ;; Auto vars:     Size  Location     Type
 11048 ;;		None
 11049 ;; Return value:  Size  Location     Type
 11050 ;;                  1    wreg      void 
 11051 ;; Registers used:
 11052 ;;		status,2
 11053 ;; Tracked objects:
 11054 ;;		On entry : 0/0
 11055 ;;		On exit  : 0/0
 11056 ;;		Unchanged: 0/0
 11057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11058 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11059 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11060 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11061 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11062 ;;Total ram usage:        0 bytes
 11063 ;; Hardware stack levels used:    1
 11064 ;; Hardware stack levels required when called:    5
 11065 ;; This function calls:
 11066 ;;		Nothing
 11067 ;; This function is called by:
 11068 ;;		_SYSTEM_Initialize
 11069 ;; This function uses a non-reentrant model
 11070 ;;
 11071                           
 11072                           
 11073                           ;psect for function _PMD_Initialize
 11074  0A93                     _PMD_Initialize:	
 11075                           
 11076                           ;mcc_generated_files/mcc.c: 83:     PMD0 = 0x00;
 11077                           
 11078                           ;incstack = 0
 11079                           ; Regs used in _PMD_Initialize: [status,2]
 11080  0A93  0032               	movlb	18	; select bank18
 11081  0A94  0191               	clrf	17	;volatile
 11082                           
 11083                           ;mcc_generated_files/mcc.c: 85:     PMD1 = 0x00;
 11084  0A95  0192               	clrf	18	;volatile
 11085                           
 11086                           ;mcc_generated_files/mcc.c: 87:     PMD2 = 0x00;
 11087  0A96  0193               	clrf	19	;volatile
 11088                           
 11089                           ;mcc_generated_files/mcc.c: 89:     PMD3 = 0x00;
 11090  0A97  0194               	clrf	20	;volatile
 11091                           
 11092                           ;mcc_generated_files/mcc.c: 91:     PMD4 = 0x00;
 11093  0A98  0195               	clrf	21	;volatile
 11094                           
 11095                           ;mcc_generated_files/mcc.c: 93:     PMD5 = 0x00;
 11096  0A99  0196               	clrf	22	;volatile
 11097  0A9A  0008               	return
 11098  0A9B                     __end_of_PMD_Initialize:	
 11099                           
 11100                           	psect	text55
 11101  0E5A                     __ptext55:	
 11102 ;; *************** function _PIN_MANAGER_Initialize *****************
 11103 ;; Defined at:
 11104 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
 11105 ;; Parameters:    Size  Location     Type
 11106 ;;		None
 11107 ;; Auto vars:     Size  Location     Type
 11108 ;;		None
 11109 ;; Return value:  Size  Location     Type
 11110 ;;                  1    wreg      void 
 11111 ;; Registers used:
 11112 ;;		wreg, status,2
 11113 ;; Tracked objects:
 11114 ;;		On entry : 0/0
 11115 ;;		On exit  : 0/0
 11116 ;;		Unchanged: 0/0
 11117 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11118 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11119 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11120 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11121 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11122 ;;Total ram usage:        0 bytes
 11123 ;; Hardware stack levels used:    1
 11124 ;; Hardware stack levels required when called:    5
 11125 ;; This function calls:
 11126 ;;		Nothing
 11127 ;; This function is called by:
 11128 ;;		_SYSTEM_Initialize
 11129 ;; This function uses a non-reentrant model
 11130 ;;
 11131                           
 11132                           
 11133                           ;psect for function _PIN_MANAGER_Initialize
 11134  0E5A                     _PIN_MANAGER_Initialize:	
 11135                           
 11136                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x00;
 11137                           
 11138                           ;incstack = 0
 11139                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
 11140  0E5A  0022               	movlb	2	; select bank2
 11141  0E5B  018C               	clrf	12	;volatile
 11142                           
 11143                           ;mcc_generated_files/pin_manager.c: 61:     LATB = 0x00;
 11144  0E5C  018D               	clrf	13	;volatile
 11145                           
 11146                           ;mcc_generated_files/pin_manager.c: 62:     LATC = 0x00;
 11147  0E5D  018E               	clrf	14	;volatile
 11148                           
 11149                           ;mcc_generated_files/pin_manager.c: 67:     TRISA = 0x37;
 11150  0E5E  3037               	movlw	55
 11151  0E5F  0021               	movlb	1	; select bank1
 11152  0E60  008C               	movwf	12	;volatile
 11153                           
 11154                           ;mcc_generated_files/pin_manager.c: 68:     TRISB = 0xB0;
 11155  0E61  30B0               	movlw	176
 11156  0E62  008D               	movwf	13	;volatile
 11157                           
 11158                           ;mcc_generated_files/pin_manager.c: 69:     TRISC = 0xFA;
 11159  0E63  30FA               	movlw	250
 11160  0E64  008E               	movwf	14	;volatile
 11161                           
 11162                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0xD7;
 11163  0E65  30D7               	movlw	215
 11164  0E66  0023               	movlb	3	; select bank3
 11165  0E67  008E               	movwf	14	;volatile
 11166                           
 11167                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0x00;
 11168  0E68  018D               	clrf	13	;volatile
 11169                           
 11170                           ;mcc_generated_files/pin_manager.c: 76:     ANSELA = 0x11;
 11171  0E69  3011               	movlw	17
 11172  0E6A  008C               	movwf	12	;volatile
 11173                           
 11174                           ;mcc_generated_files/pin_manager.c: 81:     WPUB = 0x00;
 11175  0E6B  0024               	movlb	4	; select bank4
 11176  0E6C  018D               	clrf	13	;volatile
 11177                           
 11178                           ;mcc_generated_files/pin_manager.c: 82:     WPUA = 0x00;
 11179  0E6D  018C               	clrf	12	;volatile
 11180                           
 11181                           ;mcc_generated_files/pin_manager.c: 83:     WPUC = 0x02;
 11182  0E6E  3002               	movlw	2
 11183  0E6F  008E               	movwf	14	;volatile
 11184                           
 11185                           ;mcc_generated_files/pin_manager.c: 88:     ODCONA = 0x00;
 11186  0E70  0025               	movlb	5	; select bank5
 11187  0E71  018C               	clrf	12	;volatile
 11188                           
 11189                           ;mcc_generated_files/pin_manager.c: 89:     ODCONB = 0x00;
 11190  0E72  018D               	clrf	13	;volatile
 11191                           
 11192                           ;mcc_generated_files/pin_manager.c: 90:     ODCONC = 0x00;
 11193  0E73  018E               	clrf	14	;volatile
 11194                           
 11195                           ;mcc_generated_files/pin_manager.c: 95:     SLRCONA = 0x37;
 11196  0E74  3037               	movlw	55
 11197  0E75  0026               	movlb	6	; select bank6
 11198  0E76  008C               	movwf	12	;volatile
 11199                           
 11200                           ;mcc_generated_files/pin_manager.c: 96:     SLRCONB = 0xF0;
 11201  0E77  30F0               	movlw	240
 11202  0E78  008D               	movwf	13	;volatile
 11203                           
 11204                           ;mcc_generated_files/pin_manager.c: 97:     SLRCONC = 0xFF;
 11205  0E79  30FF               	movlw	255
 11206  0E7A  008E               	movwf	14	;volatile
 11207                           
 11208                           ;mcc_generated_files/pin_manager.c: 105:     PIE0bits.IOCIE = 1;
 11209  0E7B  0021               	movlb	1	; select bank1
 11210  0E7C  1610               	bsf	16,4	;volatile
 11211                           
 11212                           ;mcc_generated_files/pin_manager.c: 108:     SSP2DATPPS = 0x0C;
 11213  0E7D  300C               	movlw	12
 11214  0E7E  003C               	movlb	28	; select bank28
 11215  0E7F  009E               	movwf	30	;volatile
 11216                           
 11217                           ;mcc_generated_files/pin_manager.c: 109:     SSP1CLKPPS = 0x0F;
 11218  0E80  300F               	movlw	15
 11219  0E81  00A0               	movwf	32	;volatile
 11220                           
 11221                           ;mcc_generated_files/pin_manager.c: 110:     RB6PPS = 0x1A;
 11222  0E82  301A               	movlw	26
 11223  0E83  003D               	movlb	29	; select bank29
 11224  0E84  009E               	movwf	30	;volatile
 11225                           
 11226                           ;mcc_generated_files/pin_manager.c: 111:     RB7PPS = 0x18;
 11227  0E85  3018               	movlw	24
 11228  0E86  009F               	movwf	31	;volatile
 11229                           
 11230                           ;mcc_generated_files/pin_manager.c: 112:     RB5PPS = 0x19;
 11231  0E87  3019               	movlw	25
 11232  0E88  009D               	movwf	29	;volatile
 11233                           
 11234                           ;mcc_generated_files/pin_manager.c: 113:     RC2PPS = 0x1B;
 11235  0E89  301B               	movlw	27
 11236  0E8A  00A2               	movwf	34	;volatile
 11237                           
 11238                           ;mcc_generated_files/pin_manager.c: 114:     SSP1DATPPS = 0x0D;
 11239  0E8B  300D               	movlw	13
 11240  0E8C  003C               	movlb	28	; select bank28
 11241  0E8D  00A1               	movwf	33	;volatile
 11242                           
 11243                           ;mcc_generated_files/pin_manager.c: 115:     SSP2CLKPPS = 0x0E;
 11244  0E8E  300E               	movlw	14
 11245  0E8F  009D               	movwf	29	;volatile
 11246  0E90  0008               	return
 11247  0E91                     __end_of_PIN_MANAGER_Initialize:	
 11248                           
 11249                           	psect	text56
 11250  0A8B                     __ptext56:	
 11251 ;; *************** function _OSCILLATOR_Initialize *****************
 11252 ;; Defined at:
 11253 ;;		line 60 in file "mcc_generated_files/mcc.c"
 11254 ;; Parameters:    Size  Location     Type
 11255 ;;		None
 11256 ;; Auto vars:     Size  Location     Type
 11257 ;;		None
 11258 ;; Return value:  Size  Location     Type
 11259 ;;                  1    wreg      void 
 11260 ;; Registers used:
 11261 ;;		wreg, status,2
 11262 ;; Tracked objects:
 11263 ;;		On entry : 0/0
 11264 ;;		On exit  : 0/0
 11265 ;;		Unchanged: 0/0
 11266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11268 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11270 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11271 ;;Total ram usage:        0 bytes
 11272 ;; Hardware stack levels used:    1
 11273 ;; Hardware stack levels required when called:    5
 11274 ;; This function calls:
 11275 ;;		Nothing
 11276 ;; This function is called by:
 11277 ;;		_SYSTEM_Initialize
 11278 ;; This function uses a non-reentrant model
 11279 ;;
 11280                           
 11281                           
 11282                           ;psect for function _OSCILLATOR_Initialize
 11283  0A8B                     _OSCILLATOR_Initialize:	
 11284                           
 11285                           ;mcc_generated_files/mcc.c: 63:     OSCCON1 = 0x62;
 11286                           
 11287                           ;incstack = 0
 11288                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 11289  0A8B  3062               	movlw	98
 11290  0A8C  0032               	movlb	18	; select bank18
 11291  0A8D  0099               	movwf	25	;volatile
 11292                           
 11293                           ;mcc_generated_files/mcc.c: 65:     OSCCON3 = 0x00;
 11294  0A8E  019B               	clrf	27	;volatile
 11295                           
 11296                           ;mcc_generated_files/mcc.c: 67:     OSCEN = 0x00;
 11297  0A8F  019D               	clrf	29	;volatile
 11298                           
 11299                           ;mcc_generated_files/mcc.c: 69:     OSCFRQ = 0x00;
 11300  0A90  019F               	clrf	31	;volatile
 11301                           
 11302                           ;mcc_generated_files/mcc.c: 71:     OSCTUNE = 0x00;
 11303  0A91  019E               	clrf	30	;volatile
 11304  0A92  0008               	return
 11305  0A93                     __end_of_OSCILLATOR_Initialize:	
 11306                           
 11307                           	psect	intentry
 11308  0004                     __pintentry:	
 11309 ;; *************** function _INTERRUPT_InterruptManager *****************
 11310 ;; Defined at:
 11311 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 11312 ;; Parameters:    Size  Location     Type
 11313 ;;		None
 11314 ;; Auto vars:     Size  Location     Type
 11315 ;;		None
 11316 ;; Return value:  Size  Location     Type
 11317 ;;                  1    wreg      void 
 11318 ;; Registers used:
 11319 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11320 ;; Tracked objects:
 11321 ;;		On entry : 0/0
 11322 ;;		On exit  : 0/0
 11323 ;;		Unchanged: 0/0
 11324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11325 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11326 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11327 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11328 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11329 ;;Total ram usage:        0 bytes
 11330 ;; Hardware stack levels used:    1
 11331 ;; Hardware stack levels required when called:    4
 11332 ;; This function calls:
 11333 ;;		Absolute function
 11334 ;;		_PIN_MANAGER_IOC
 11335 ;;		_i2c_ISR
 11336 ;;		_i2c_busCollisionISR
 11337 ;; This function is called by:
 11338 ;;		Interrupt level 1
 11339 ;; This function uses a non-reentrant model
 11340 ;;
 11341                           
 11342  0004                     _INTERRUPT_InterruptManager:	
 11343                           
 11344                           ;incstack = 0
 11345  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 11346                           
 11347                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11348  0005  3180               	pagesel	$
 11349                           
 11350                           ;mcc_generated_files/interrupt_manager.c: 55:     if(PIE0bits.IOCIE == 1 && PIR0bits.IOC
      +                          IF == 1)
 11351  0006  0021               	movlb	1	; select bank1
 11352  0007  1E10               	btfss	16,4	;volatile
 11353  0008  2810               	goto	i1l245
 11354  0009  0020               	movlb	0	; select bank0
 11355  000A  1E10               	btfss	16,4	;volatile
 11356  000B  2810               	goto	i1l245
 11357                           
 11358                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         PIN_MANAGER_IOC();
 11359  000C  3189  21DB  3180   	fcall	_PIN_MANAGER_IOC
 11360                           
 11361                           ;mcc_generated_files/interrupt_manager.c: 58:     }
 11362  000F  2829               	goto	i1l253
 11363  0010                     i1l245:	
 11364                           ;mcc_generated_files/interrupt_manager.c: 59:     else if(INTCONbits.PEIE == 1)
 11365                           
 11366  0010  1F0B               	btfss	11,6	;volatile
 11367  0011  2829               	goto	i1l253
 11368                           
 11369                           ;mcc_generated_files/interrupt_manager.c: 60:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 61:         if(PIE1bits.BCL1IE == 1 && PIR1bits.BCL1IF == 1)
 11370  0012  0021               	movlb	1	; select bank1
 11371  0013  1D11               	btfss	17,2	;volatile
 11372  0014  281E               	goto	i1l248
 11373  0015  0020               	movlb	0	; select bank0
 11374  0016  1D11               	btfss	17,2	;volatile
 11375  0017  281E               	goto	i1l248
 11376                           
 11377                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             i2c1_driver_busCollisionISR();
 11378  0018  0871               	movf	_i2c1_driver_busCollisionISR+1,w
 11379  0019  008A               	movwf	10
 11380  001A  0870               	movf	_i2c1_driver_busCollisionISR,w
 11381  001B  000A               	callw
 11382  001C  3180               	pagesel	$
 11383                           
 11384                           ;mcc_generated_files/interrupt_manager.c: 64:         }
 11385  001D  2829               	goto	i1l253
 11386  001E                     i1l248:	
 11387                           ;mcc_generated_files/interrupt_manager.c: 65:         else if(PIE1bits.SSP1IE == 1 && PI
      +                          R1bits.SSP1IF == 1)
 11388                           
 11389  001E  0021               	movlb	1	; select bank1
 11390  001F  1D91               	btfss	17,3	;volatile
 11391  0020  2829               	goto	i1l253
 11392  0021  0020               	movlb	0	; select bank0
 11393  0022  1D91               	btfss	17,3	;volatile
 11394  0023  2829               	goto	i1l253
 11395                           
 11396                           ;mcc_generated_files/interrupt_manager.c: 66:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 67:             i2c1_driver_i2cISR();
 11397  0024  086D               	movf	_i2c1_driver_i2cISR+1,w
 11398  0025  008A               	movwf	10
 11399  0026  086C               	movf	_i2c1_driver_i2cISR,w
 11400  0027  000A               	callw
 11401  0028  3180               	pagesel	$
 11402  0029                     i1l253:	
 11403                           ;mcc_generated_files/interrupt_manager.c: 75:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 77:     }
 11404                           
 11405                           ;mcc_generated_files/interrupt_manager.c: 68:         }
 11406                           
 11407  0029  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 11408  002A  0009               	retfie
 11409  002B                     __end_of_INTERRUPT_InterruptManager:	
 11410                           
 11411                           	psect	text58
 11412  09F3                     __ptext58:	
 11413 ;; *************** function _i2c_busCollisionISR *****************
 11414 ;; Defined at:
 11415 ;;		line 435 in file "mcc_generated_files/drivers/i2c_master.c"
 11416 ;; Parameters:    Size  Location     Type
 11417 ;;		None
 11418 ;; Auto vars:     Size  Location     Type
 11419 ;;		None
 11420 ;; Return value:  Size  Location     Type
 11421 ;;                  1    wreg      void 
 11422 ;; Registers used:
 11423 ;;		status,2, status,0, pclath, cstack
 11424 ;; Tracked objects:
 11425 ;;		On entry : 0/0
 11426 ;;		On exit  : 0/0
 11427 ;;		Unchanged: 0/0
 11428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11429 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11430 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11431 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11432 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11433 ;;Total ram usage:        0 bytes
 11434 ;; Hardware stack levels used:    1
 11435 ;; Hardware stack levels required when called:    1
 11436 ;; This function calls:
 11437 ;;		_i2c1_driver_clearBusCollision
 11438 ;; This function is called by:
 11439 ;;		_i2c_open
 11440 ;;		_INTERRUPT_InterruptManager
 11441 ;; This function uses a non-reentrant model
 11442 ;;
 11443                           
 11444                           
 11445                           ;psect for function _i2c_busCollisionISR
 11446  09F3                     _i2c_busCollisionISR:	
 11447                           
 11448                           ;mcc_generated_files/drivers/i2c_master.c: 437:     i2c1_driver_clearBusCollision();
 11449                           
 11450                           ;incstack = 0
 11451                           ; Regs used in _i2c_busCollisionISR: [status,2+status,0+pclath+cstack]
 11452  09F3  3189  21F0         	fcall	_i2c1_driver_clearBusCollision
 11453  09F5  0008               	return
 11454  09F6                     __end_of_i2c_busCollisionISR:	
 11455                           
 11456                           	psect	text59
 11457  09F0                     __ptext59:	
 11458 ;; *************** function _i2c1_driver_clearBusCollision *****************
 11459 ;; Defined at:
 11460 ;;		line 253 in file "mcc_generated_files/i2c1_driver.c"
 11461 ;; Parameters:    Size  Location     Type
 11462 ;;		None
 11463 ;; Auto vars:     Size  Location     Type
 11464 ;;		None
 11465 ;; Return value:  Size  Location     Type
 11466 ;;                  1    wreg      void 
 11467 ;; Registers used:
 11468 ;;		None
 11469 ;; Tracked objects:
 11470 ;;		On entry : 0/0
 11471 ;;		On exit  : 0/0
 11472 ;;		Unchanged: 0/0
 11473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11474 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11475 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11476 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11477 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11478 ;;Total ram usage:        0 bytes
 11479 ;; Hardware stack levels used:    1
 11480 ;; This function calls:
 11481 ;;		Nothing
 11482 ;; This function is called by:
 11483 ;;		_i2c_busCollisionISR
 11484 ;; This function uses a non-reentrant model
 11485 ;;
 11486                           
 11487                           
 11488                           ;psect for function _i2c1_driver_clearBusCollision
 11489  09F0                     _i2c1_driver_clearBusCollision:	
 11490                           
 11491                           ;mcc_generated_files/i2c1_driver.c: 255:     PIR1bits.BCL1IF = 0;
 11492                           
 11493                           ;incstack = 0
 11494                           ; Regs used in _i2c1_driver_clearBusCollision: []
 11495  09F0  0020               	movlb	0	; select bank0
 11496  09F1  1111               	bcf	17,2	;volatile
 11497  09F2  0008               	return
 11498  09F3                     __end_of_i2c1_driver_clearBusCollision:	
 11499                           
 11500                           	psect	text60
 11501  0C24                     __ptext60:	
 11502 ;; *************** function _i2c_ISR *****************
 11503 ;; Defined at:
 11504 ;;		line 419 in file "mcc_generated_files/drivers/i2c_master.c"
 11505 ;; Parameters:    Size  Location     Type
 11506 ;;		None
 11507 ;; Auto vars:     Size  Location     Type
 11508 ;;		None
 11509 ;; Return value:  Size  Location     Type
 11510 ;;                  1    wreg      void 
 11511 ;; Registers used:
 11512 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11513 ;; Tracked objects:
 11514 ;;		On entry : 0/0
 11515 ;;		On exit  : 0/0
 11516 ;;		Unchanged: 0/0
 11517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11519 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11520 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11521 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11522 ;;Total ram usage:        3 bytes
 11523 ;; Hardware stack levels used:    1
 11524 ;; Hardware stack levels required when called:    3
 11525 ;; This function calls:
 11526 ;;		_do_I2C_DO_ACK
 11527 ;;		_do_I2C_DO_ADDRESS_NACK
 11528 ;;		_do_I2C_DO_NACK_RESTART
 11529 ;;		_do_I2C_DO_NACK_STOP
 11530 ;;		_do_I2C_IDLE
 11531 ;;		_do_I2C_RCEN
 11532 ;;		_do_I2C_RESET
 11533 ;;		_do_I2C_RX
 11534 ;;		_do_I2C_SEND_ADR_READ
 11535 ;;		_do_I2C_SEND_ADR_WRITE
 11536 ;;		_do_I2C_SEND_RESTART
 11537 ;;		_do_I2C_SEND_RESTART_READ
 11538 ;;		_do_I2C_SEND_RESTART_WRITE
 11539 ;;		_do_I2C_SEND_STOP
 11540 ;;		_do_I2C_TX
 11541 ;;		_do_I2C_TX_EMPTY
 11542 ;;		_i2c1_driver_isNACK
 11543 ;;		_mssp1_clearIRQ
 11544 ;; This function is called by:
 11545 ;;		_i2c_open
 11546 ;;		_i2c_poller
 11547 ;;		_INTERRUPT_InterruptManager
 11548 ;; This function uses a non-reentrant model
 11549 ;;
 11550                           
 11551                           
 11552                           ;psect for function _i2c_ISR
 11553  0C24                     _i2c_ISR:	
 11554                           
 11555                           ;mcc_generated_files/drivers/i2c_master.c: 421:     mssp1_clearIRQ();
 11556                           
 11557                           ;incstack = 0
 11558                           ; Regs used in _i2c_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11559  0C24  3189  21ED  318C   	fcall	_mssp1_clearIRQ
 11560                           
 11561                           ;mcc_generated_files/drivers/i2c_master.c: 427:     if(i2c_status.addressNACKCheck && i2
      +                          c1_driver_isNACK())
 11562  0C27  0023               	movlb	3	; select bank3
 11563  0C28  1DA0               	btfss	_i2c_status^(0+384),3
 11564  0C29  2C34               	goto	i1l4667
 11565  0C2A  318A  227B  318C   	fcall	_i2c1_driver_isNACK
 11566  0C2D  1C03               	btfss	3,0
 11567  0C2E  2C34               	goto	i1l4667
 11568                           
 11569                           ;mcc_generated_files/drivers/i2c_master.c: 428:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 429:         i2c_status.state = I2C_ADDRESS_NACK;
 11570  0C2F  300F               	movlw	15
 11571  0C30  00F9               	movwf	??_i2c_ISR
 11572  0C31  0879               	movf	??_i2c_ISR,w
 11573  0C32  0023               	movlb	3	; select bank3
 11574  0C33  00A9               	movwf	(_i2c_status^(0+384)+9)
 11575  0C34                     i1l4667:	
 11576                           
 11577                           ;mcc_generated_files/drivers/i2c_master.c: 432:     i2c_status.state = fsmStateTable[i2c
      +                          _status.state]();
 11578  0C34  0023               	movlb	3	; select bank3
 11579  0C35  0829               	movf	(_i2c_status^(0+384)+9),w
 11580  0C36  00F9               	movwf	??_i2c_ISR
 11581  0C37  01FA               	clrf	??_i2c_ISR+1
 11582  0C38  35F9               	lslf	??_i2c_ISR,f
 11583  0C39  0DFA               	rlf	??_i2c_ISR+1,f
 11584  0C3A  3000               	movlw	low (_fsmStateTable| (0+32768))
 11585  0C3B  0779               	addwf	??_i2c_ISR,w
 11586  0C3C  0084               	movwf	4
 11587  0C3D  3090               	movlw	high (_fsmStateTable| (0+32768))
 11588  0C3E  3D7A               	addwfc	??_i2c_ISR+1,w
 11589  0C3F  0085               	movwf	5
 11590  0C40  3F01               	moviw [1]fsr0
 11591  0C41  008A               	movwf	10
 11592  0C42  3F00               	moviw [0]fsr0
 11593  0C43  000A               	callw
 11594  0C44  318C               	pagesel	$
 11595  0C45  00FB               	movwf	??_i2c_ISR+2
 11596  0C46  087B               	movf	??_i2c_ISR+2,w
 11597  0C47  0023               	movlb	3	; select bank3
 11598  0C48  00A9               	movwf	(_i2c_status^(0+384)+9)
 11599  0C49  0008               	return
 11600  0C4A                     __end_of_i2c_ISR:	
 11601                           
 11602                           	psect	text61
 11603  09ED                     __ptext61:	
 11604 ;; *************** function _mssp1_clearIRQ *****************
 11605 ;; Defined at:
 11606 ;;		line 53 in file "mcc_generated_files/i2c1_driver.c"
 11607 ;; Parameters:    Size  Location     Type
 11608 ;;		None
 11609 ;; Auto vars:     Size  Location     Type
 11610 ;;		None
 11611 ;; Return value:  Size  Location     Type
 11612 ;;                  1    wreg      void 
 11613 ;; Registers used:
 11614 ;;		None
 11615 ;; Tracked objects:
 11616 ;;		On entry : 0/0
 11617 ;;		On exit  : 0/0
 11618 ;;		Unchanged: 0/0
 11619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11621 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11622 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11623 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11624 ;;Total ram usage:        0 bytes
 11625 ;; Hardware stack levels used:    1
 11626 ;; This function calls:
 11627 ;;		Nothing
 11628 ;; This function is called by:
 11629 ;;		_i2c_ISR
 11630 ;;		_i2c_open
 11631 ;;		_i2c_close
 11632 ;; This function uses a non-reentrant model
 11633 ;;
 11634                           
 11635                           
 11636                           ;psect for function _mssp1_clearIRQ
 11637  09ED                     _mssp1_clearIRQ:	
 11638                           
 11639                           ;mcc_generated_files/i2c1_driver.c: 55:         SSP1STAT = 0x00;
 11640                           
 11641                           ;incstack = 0
 11642                           ; Regs used in _mssp1_clearIRQ: []
 11643  09ED  0020               	movlb	0	; select bank0
 11644  09EE  1191               	bcf	17,3	;volatile
 11645  09EF  0008               	return
 11646  09F0                     __end_of_mssp1_clearIRQ:	
 11647                           
 11648                           	psect	text62
 11649  0ED2                     __ptext62:	
 11650 ;; *************** function _do_I2C_RX *****************
 11651 ;; Defined at:
 11652 ;;		line 357 in file "mcc_generated_files/drivers/i2c_master.c"
 11653 ;; Parameters:    Size  Location     Type
 11654 ;;		None
 11655 ;; Auto vars:     Size  Location     Type
 11656 ;;		None
 11657 ;; Return value:  Size  Location     Type
 11658 ;;                  1    wreg      enum E7120
 11659 ;; Registers used:
 11660 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11661 ;; Tracked objects:
 11662 ;;		On entry : 0/0
 11663 ;;		On exit  : 0/0
 11664 ;;		Unchanged: 0/0
 11665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11666 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11667 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11668 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11669 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11670 ;;Total ram usage:        3 bytes
 11671 ;; Hardware stack levels used:    1
 11672 ;; Hardware stack levels required when called:    2
 11673 ;; This function calls:
 11674 ;;		_do_I2C_DO_NACK_RESTART
 11675 ;;		_do_I2C_DO_NACK_STOP
 11676 ;;		_i2c1_driver_sendACK
 11677 ;;		_returnReset
 11678 ;;		_returnStop
 11679 ;;		i1_i2c1_driver_getRXData
 11680 ;; This function is called by:
 11681 ;;		_i2c_ISR
 11682 ;; This function uses a non-reentrant model
 11683 ;;
 11684                           
 11685                           
 11686                           ;psect for function _do_I2C_RX
 11687  0ED2                     _do_I2C_RX:	
 11688                           
 11689                           ;mcc_generated_files/drivers/i2c_master.c: 359:     *i2c_status.data_ptr++ = i2c1_driver
      +                          _getRXData();
 11690                           
 11691                           ;incstack = 0
 11692                           ; Regs used in _do_I2C_RX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11693  0ED2  3189  21E7  318E   	fcall	i1_i2c1_driver_getRXData
 11694  0ED5  00F6               	movwf	??_do_I2C_RX
 11695  0ED6  0023               	movlb	3	; select bank3
 11696  0ED7  0822               	movf	(low ((_i2c_status| (0+256)+2)))^(0+128),w
 11697  0ED8  0086               	movwf	6
 11698  0ED9  0187               	clrf	7
 11699  0EDA  0876               	movf	??_do_I2C_RX,w
 11700  0EDB  0081               	movwf	1
 11701  0EDC  3001               	movlw	1
 11702  0EDD  00F6               	movwf	??_do_I2C_RX
 11703  0EDE  0876               	movf	??_do_I2C_RX,w
 11704  0EDF  07A2               	addwf	(low ((_i2c_status| (0+256)+2)))^(0+128),f
 11705                           
 11706                           ;mcc_generated_files/drivers/i2c_master.c: 360:     if(--i2c_status.data_length)
 11707  0EE0  3001               	movlw	1
 11708  0EE1  02A3               	subwf	(_i2c_status^(0+384)+3),f
 11709  0EE2  3000               	movlw	0
 11710  0EE3  3BA4               	subwfb	((_i2c_status+1)^(0+384)+3),f
 11711  0EE4  0823               	movf	(_i2c_status^(0+384)+3),w
 11712  0EE5  0424               	iorwf	((_i2c_status+1)^(0+384)+3),w
 11713  0EE6  1903               	btfsc	3,2
 11714  0EE7  2EEC               	goto	i1l173
 11715                           
 11716                           ;mcc_generated_files/drivers/i2c_master.c: 361:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 362:         i2c1_driver_sendACK();
 11717  0EE8  318A  2211         	fcall	_i2c1_driver_sendACK
 11718                           
 11719                           ;mcc_generated_files/drivers/i2c_master.c: 363:         return I2C_RCEN;
 11720  0EEA  3005               	movlw	5
 11721  0EEB  0008               	return
 11722  0EEC                     i1l173:	
 11723                           ;mcc_generated_files/drivers/i2c_master.c: 365:     else
 11724                           
 11725                           
 11726                           ;mcc_generated_files/drivers/i2c_master.c: 366:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 367:         i2c_status.bufferFree = 1;
 11727  0EEC  1520               	bsf	_i2c_status^(0+384),2
 11728                           
 11729                           ;mcc_generated_files/drivers/i2c_master.c: 368:         switch(i2c_status.callbackTable[
      +                          i2c_dataComplete](i2c_status.callbackPayload[i2c_dataComplete]))
 11730  0EED  2EF4               	goto	i1l4231
 11731  0EEE                     i1l4221:	
 11732                           
 11733                           ;mcc_generated_files/drivers/i2c_master.c: 372:                 return do_I2C_DO_NACK_RE
      +                          START();
 11734  0EEE  318A  2231         	fcall	_do_I2C_DO_NACK_RESTART
 11735  0EF0  0008               	return
 11736  0EF1                     i1l4225:	
 11737                           
 11738                           ;mcc_generated_files/drivers/i2c_master.c: 376:                 return do_I2C_DO_NACK_ST
      +                          OP();
 11739  0EF1  318A  222D         	fcall	_do_I2C_DO_NACK_STOP
 11740  0EF3  0008               	return
 11741  0EF4                     i1l4231:	
 11742  0EF4  0837               	movf	(low ((_i2c_status| (0+256)+23)))^(0+128),w
 11743  0EF5  00F6               	movwf	??_do_I2C_RX
 11744  0EF6  0876               	movf	??_do_I2C_RX,w
 11745  0EF7  00F6               	movwf	returnReset@p
 11746  0EF8  300B               	movlw	11
 11747  0EF9  3EA0               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 11748  0EFA  0086               	movwf	6
 11749  0EFB  3001               	movlw	1	; select bank3/4
 11750  0EFC  0087               	movwf	7
 11751  0EFD  3F41               	moviw [1]fsr1
 11752  0EFE  008A               	movwf	10
 11753  0EFF  3F40               	moviw [0]fsr1
 11754  0F00  000A               	callw
 11755  0F01  318E               	pagesel	$
 11756  0F02  00F7               	movwf	??_do_I2C_RX+1
 11757  0F03  01F8               	clrf	??_do_I2C_RX+2
 11758                           
 11759                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11760                           ; Switch size 1, requested type "simple"
 11761                           ; Number of cases is 1, Range of values is 0 to 0
 11762                           ; switch strategies available:
 11763                           ; Name         Instructions Cycles
 11764                           ; simple_byte            4     3 (average)
 11765                           ; direct_byte            8     6 (fixed)
 11766                           ; jumptable            260     6 (fixed)
 11767                           ;	Chosen strategy is simple_byte
 11768  0F04  0878               	movf	??_do_I2C_RX+2,w
 11769  0F05  3A00               	xorlw	0	; case 0
 11770  0F06  1903               	skipnz
 11771  0F07  2F09               	goto	i1l6675
 11772  0F08  2EF1               	goto	i1l4225
 11773  0F09                     i1l6675:	
 11774                           
 11775                           ; Switch size 1, requested type "simple"
 11776                           ; Number of cases is 4, Range of values is 1 to 4
 11777                           ; switch strategies available:
 11778                           ; Name         Instructions Cycles
 11779                           ; simple_byte           13     7 (average)
 11780                           ; direct_byte           17     9 (fixed)
 11781                           ; jumptable            263     9 (fixed)
 11782                           ;	Chosen strategy is simple_byte
 11783  0F09  0877               	movf	??_do_I2C_RX+1,w
 11784  0F0A  3A01               	xorlw	1	; case 1
 11785  0F0B  1903               	skipnz
 11786  0F0C  2EF1               	goto	i1l4225
 11787  0F0D  3A03               	xorlw	3	; case 2
 11788  0F0E  1903               	skipnz
 11789  0F0F  2EEE               	goto	i1l4221
 11790  0F10  3A01               	xorlw	1	; case 3
 11791  0F11  1903               	skipnz
 11792  0F12  2EEE               	goto	i1l4221
 11793  0F13  3A07               	xorlw	7	; case 4
 11794  0F14  1903               	skipnz
 11795  0F15  2EF1               	goto	i1l4225
 11796  0F16  2EF1               	goto	i1l4225
 11797  0F17  0008               	return
 11798  0F18                     __end_of_do_I2C_RX:	
 11799                           
 11800                           	psect	text63
 11801  0F62                     __ptext63:	
 11802 ;; *************** function _do_I2C_TX *****************
 11803 ;; Defined at:
 11804 ;;		line 333 in file "mcc_generated_files/drivers/i2c_master.c"
 11805 ;; Parameters:    Size  Location     Type
 11806 ;;		None
 11807 ;; Auto vars:     Size  Location     Type
 11808 ;;		None
 11809 ;; Return value:  Size  Location     Type
 11810 ;;                  1    wreg      enum E7120
 11811 ;; Registers used:
 11812 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11813 ;; Tracked objects:
 11814 ;;		On entry : 0/0
 11815 ;;		On exit  : 0/0
 11816 ;;		Unchanged: 0/0
 11817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11818 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11819 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11820 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11821 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11822 ;;Total ram usage:        3 bytes
 11823 ;; Hardware stack levels used:    1
 11824 ;; Hardware stack levels required when called:    2
 11825 ;; This function calls:
 11826 ;;		_do_I2C_SEND_RESTART_READ
 11827 ;;		_do_I2C_SEND_RESTART_WRITE
 11828 ;;		_do_I2C_SEND_STOP
 11829 ;;		_i2c1_driver_isNACK
 11830 ;;		_returnReset
 11831 ;;		_returnStop
 11832 ;;		i1_i2c1_driver_TXData
 11833 ;; This function is called by:
 11834 ;;		_i2c_ISR
 11835 ;; This function uses a non-reentrant model
 11836 ;;
 11837                           
 11838                           
 11839                           ;psect for function _do_I2C_TX
 11840  0F62                     _do_I2C_TX:	
 11841                           
 11842                           ;mcc_generated_files/drivers/i2c_master.c: 335:     if(i2c1_driver_isNACK())
 11843                           
 11844                           ;incstack = 0
 11845                           ; Regs used in _do_I2C_TX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11846  0F62  318A  227B  318F   	fcall	_i2c1_driver_isNACK
 11847  0F65  1803               	btfsc	3,0
 11848  0F66  2F71               	goto	i1l4191
 11849  0F67  2F95               	goto	i1l157
 11850  0F68                     i1l4177:	
 11851                           
 11852                           ;mcc_generated_files/drivers/i2c_master.c: 340:                 return do_I2C_SEND_RESTA
      +                          RT_READ();
 11853  0F68  318A  2219         	fcall	_do_I2C_SEND_RESTART_READ
 11854  0F6A  0008               	return
 11855  0F6B                     i1l4181:	
 11856                           
 11857                           ;mcc_generated_files/drivers/i2c_master.c: 342:                 return do_I2C_SEND_RESTA
      +                          RT_WRITE();
 11858  0F6B  318A  221D         	fcall	_do_I2C_SEND_RESTART_WRITE
 11859  0F6D  0008               	return
 11860  0F6E                     i1l4185:	
 11861                           
 11862                           ;mcc_generated_files/drivers/i2c_master.c: 346:                 return do_I2C_SEND_STOP(
      +                          );
 11863  0F6E  318A  2225         	fcall	_do_I2C_SEND_STOP
 11864  0F70  0008               	return
 11865  0F71                     i1l4191:	
 11866  0F71  0023               	movlb	3	; select bank3
 11867  0F72  083A               	movf	(low ((_i2c_status| (0+256)+26)))^(0+128),w
 11868  0F73  00F6               	movwf	??_do_I2C_TX
 11869  0F74  0876               	movf	??_do_I2C_TX,w
 11870  0F75  00F6               	movwf	returnReset@p
 11871  0F76  3011               	movlw	17
 11872  0F77  3EA0               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 11873  0F78  0086               	movwf	6
 11874  0F79  3001               	movlw	1	; select bank3/4
 11875  0F7A  0087               	movwf	7
 11876  0F7B  3F41               	moviw [1]fsr1
 11877  0F7C  008A               	movwf	10
 11878  0F7D  3F40               	moviw [0]fsr1
 11879  0F7E  000A               	callw
 11880  0F7F  318F               	pagesel	$
 11881  0F80  00F7               	movwf	??_do_I2C_TX+1
 11882  0F81  01F8               	clrf	??_do_I2C_TX+2
 11883                           
 11884                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11885                           ; Switch size 1, requested type "simple"
 11886                           ; Number of cases is 1, Range of values is 0 to 0
 11887                           ; switch strategies available:
 11888                           ; Name         Instructions Cycles
 11889                           ; simple_byte            4     3 (average)
 11890                           ; direct_byte            8     6 (fixed)
 11891                           ; jumptable            260     6 (fixed)
 11892                           ;	Chosen strategy is simple_byte
 11893  0F82  0878               	movf	??_do_I2C_TX+2,w
 11894  0F83  3A00               	xorlw	0	; case 0
 11895  0F84  1903               	skipnz
 11896  0F85  2F87               	goto	i1l6677
 11897  0F86  2F6E               	goto	i1l4185
 11898  0F87                     i1l6677:	
 11899                           
 11900                           ; Switch size 1, requested type "simple"
 11901                           ; Number of cases is 4, Range of values is 1 to 4
 11902                           ; switch strategies available:
 11903                           ; Name         Instructions Cycles
 11904                           ; simple_byte           13     7 (average)
 11905                           ; direct_byte           17     9 (fixed)
 11906                           ; jumptable            263     9 (fixed)
 11907                           ;	Chosen strategy is simple_byte
 11908  0F87  0877               	movf	??_do_I2C_TX+1,w
 11909  0F88  3A01               	xorlw	1	; case 1
 11910  0F89  1903               	skipnz
 11911  0F8A  2F6E               	goto	i1l4185
 11912  0F8B  3A03               	xorlw	3	; case 2
 11913  0F8C  1903               	skipnz
 11914  0F8D  2F68               	goto	i1l4177
 11915  0F8E  3A01               	xorlw	1	; case 3
 11916  0F8F  1903               	skipnz
 11917  0F90  2F6B               	goto	i1l4181
 11918  0F91  3A07               	xorlw	7	; case 4
 11919  0F92  1903               	skipnz
 11920  0F93  2F6E               	goto	i1l4185
 11921  0F94  2F6E               	goto	i1l4185
 11922  0F95                     i1l157:	
 11923                           ;mcc_generated_files/drivers/i2c_master.c: 349:     else
 11924                           
 11925                           
 11926                           ;mcc_generated_files/drivers/i2c_master.c: 350:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 351:         i2c_status.addressNACKCheck = 0;
 11927  0F95  0023               	movlb	3	; select bank3
 11928  0F96  11A0               	bcf	_i2c_status^(0+384),3
 11929                           
 11930                           ;mcc_generated_files/drivers/i2c_master.c: 352:         i2c1_driver_TXData(*i2c_status.d
      +                          ata_ptr++);
 11931  0F97  3002               	movlw	2
 11932  0F98  3EA0               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 11933  0F99  0086               	movwf	6
 11934  0F9A  3001               	movlw	1	; select bank3/4
 11935  0F9B  0087               	movwf	7
 11936  0F9C  3F40               	moviw [0]fsr1
 11937  0F9D  0084               	movwf	4
 11938  0F9E  0185               	clrf	5
 11939  0F9F  0A81               	incf	1,f
 11940  0FA0  0800               	movf	0,w
 11941  0FA1  318A  223D  318F   	fcall	i1_i2c1_driver_TXData
 11942                           
 11943                           ;mcc_generated_files/drivers/i2c_master.c: 353:         return (--i2c_status.data_length
      +                          )?I2C_TX:I2C_TX_EMPTY;
 11944  0FA4  3001               	movlw	1
 11945  0FA5  0023               	movlb	3	; select bank3
 11946  0FA6  02A3               	subwf	(_i2c_status^(0+384)+3),f
 11947  0FA7  3000               	movlw	0
 11948  0FA8  3BA4               	subwfb	((_i2c_status+1)^(0+384)+3),f
 11949  0FA9  0823               	movf	(_i2c_status^(0+384)+3),w
 11950  0FAA  0424               	iorwf	((_i2c_status+1)^(0+384)+3),w
 11951  0FAB  1D03               	btfss	3,2
 11952  0FAC  2FAF               	goto	i1l4199
 11953  0FAD  3006               	movlw	6
 11954  0FAE  0008               	return
 11955  0FAF                     i1l4199:	
 11956  0FAF  3003               	movlw	3
 11957  0FB0  0008               	return
 11958  0FB1                     __end_of_do_I2C_TX:	
 11959                           
 11960                           	psect	text64
 11961  0D38                     __ptext64:	
 11962 ;; *************** function _do_I2C_DO_ADDRESS_NACK *****************
 11963 ;; Defined at:
 11964 ;;		line 319 in file "mcc_generated_files/drivers/i2c_master.c"
 11965 ;; Parameters:    Size  Location     Type
 11966 ;;		None
 11967 ;; Auto vars:     Size  Location     Type
 11968 ;;		None
 11969 ;; Return value:  Size  Location     Type
 11970 ;;                  1    wreg      enum E7120
 11971 ;; Registers used:
 11972 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11973 ;; Tracked objects:
 11974 ;;		On entry : 0/0
 11975 ;;		On exit  : 0/0
 11976 ;;		Unchanged: 0/0
 11977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11978 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11979 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11980 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11981 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11982 ;;Total ram usage:        3 bytes
 11983 ;; Hardware stack levels used:    1
 11984 ;; Hardware stack levels required when called:    2
 11985 ;; This function calls:
 11986 ;;		_do_I2C_SEND_RESTART
 11987 ;;		_do_I2C_SEND_STOP
 11988 ;;		_returnReset
 11989 ;;		_returnStop
 11990 ;; This function is called by:
 11991 ;;		_i2c_ISR
 11992 ;; This function uses a non-reentrant model
 11993 ;;
 11994                           
 11995                           
 11996                           ;psect for function _do_I2C_DO_ADDRESS_NACK
 11997  0D38                     _do_I2C_DO_ADDRESS_NACK:	
 11998                           
 11999                           ;mcc_generated_files/drivers/i2c_master.c: 321:     i2c_status.addressNACKCheck = 0;
 12000                           
 12001                           ;incstack = 0
 12002                           ; Regs used in _do_I2C_DO_ADDRESS_NACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12003  0D38  0023               	movlb	3	; select bank3
 12004  0D39  11A0               	bcf	_i2c_status^(0+384),3
 12005                           
 12006                           ;mcc_generated_files/drivers/i2c_master.c: 322:     i2c_status.error = I2C_FAIL;
 12007  0D3A  3002               	movlw	2
 12008  0D3B  00F6               	movwf	??_do_I2C_DO_ADDRESS_NACK
 12009  0D3C  0876               	movf	??_do_I2C_DO_ADDRESS_NACK,w
 12010  0D3D  00AA               	movwf	(_i2c_status^(0+384)+10)
 12011                           
 12012                           ;mcc_generated_files/drivers/i2c_master.c: 323:     switch(i2c_status.callbackTable[i2c_
      +                          addressNACK](i2c_status.callbackPayload[i2c_addressNACK]))
 12013  0D3E  2D45               	goto	i1l4165
 12014  0D3F                     i1l4155:	
 12015                           
 12016                           ;mcc_generated_files/drivers/i2c_master.c: 327:             return do_I2C_SEND_RESTART()
      +                          ;
 12017  0D3F  318A  2221         	fcall	_do_I2C_SEND_RESTART
 12018  0D41  0008               	return
 12019  0D42                     i1l4159:	
 12020                           
 12021                           ;mcc_generated_files/drivers/i2c_master.c: 329:             return do_I2C_SEND_STOP();
 12022  0D42  318A  2225         	fcall	_do_I2C_SEND_STOP
 12023  0D44  0008               	return
 12024  0D45                     i1l4165:	
 12025  0D45  0839               	movf	(low ((_i2c_status| (0+256)+25)))^(0+128),w
 12026  0D46  00F6               	movwf	??_do_I2C_DO_ADDRESS_NACK
 12027  0D47  0876               	movf	??_do_I2C_DO_ADDRESS_NACK,w
 12028  0D48  00F6               	movwf	returnReset@p
 12029  0D49  300F               	movlw	15
 12030  0D4A  3EA0               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 12031  0D4B  0086               	movwf	6
 12032  0D4C  3001               	movlw	1	; select bank3/4
 12033  0D4D  0087               	movwf	7
 12034  0D4E  3F41               	moviw [1]fsr1
 12035  0D4F  008A               	movwf	10
 12036  0D50  3F40               	moviw [0]fsr1
 12037  0D51  000A               	callw
 12038  0D52  318D               	pagesel	$
 12039  0D53  00F7               	movwf	??_do_I2C_DO_ADDRESS_NACK+1
 12040  0D54  01F8               	clrf	??_do_I2C_DO_ADDRESS_NACK+2
 12041                           
 12042                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12043                           ; Switch size 1, requested type "simple"
 12044                           ; Number of cases is 1, Range of values is 0 to 0
 12045                           ; switch strategies available:
 12046                           ; Name         Instructions Cycles
 12047                           ; simple_byte            4     3 (average)
 12048                           ; direct_byte            8     6 (fixed)
 12049                           ; jumptable            260     6 (fixed)
 12050                           ;	Chosen strategy is simple_byte
 12051  0D55  0878               	movf	??_do_I2C_DO_ADDRESS_NACK+2,w
 12052  0D56  3A00               	xorlw	0	; case 0
 12053  0D57  1903               	skipnz
 12054  0D58  2D5A               	goto	i1l6679
 12055  0D59  2D42               	goto	i1l4159
 12056  0D5A                     i1l6679:	
 12057                           
 12058                           ; Switch size 1, requested type "simple"
 12059                           ; Number of cases is 2, Range of values is 2 to 3
 12060                           ; switch strategies available:
 12061                           ; Name         Instructions Cycles
 12062                           ; simple_byte            7     4 (average)
 12063                           ; direct_byte           13     9 (fixed)
 12064                           ; jumptable            263     9 (fixed)
 12065                           ;	Chosen strategy is simple_byte
 12066  0D5A  0877               	movf	??_do_I2C_DO_ADDRESS_NACK+1,w
 12067  0D5B  3A02               	xorlw	2	; case 2
 12068  0D5C  1903               	skipnz
 12069  0D5D  2D3F               	goto	i1l4155
 12070  0D5E  3A01               	xorlw	1	; case 3
 12071  0D5F  1903               	skipnz
 12072  0D60  2D3F               	goto	i1l4155
 12073  0D61  2D42               	goto	i1l4159
 12074  0D62  0008               	return
 12075  0D63                     __end_of_do_I2C_DO_ADDRESS_NACK:	
 12076                           
 12077                           	psect	text65
 12078  0A31                     __ptext65:	
 12079 ;; *************** function _do_I2C_DO_NACK_RESTART *****************
 12080 ;; Defined at:
 12081 ;;		line 311 in file "mcc_generated_files/drivers/i2c_master.c"
 12082 ;; Parameters:    Size  Location     Type
 12083 ;;		None
 12084 ;; Auto vars:     Size  Location     Type
 12085 ;;		None
 12086 ;; Return value:  Size  Location     Type
 12087 ;;                  1    wreg      enum E7120
 12088 ;; Registers used:
 12089 ;;		wreg, status,2, status,0, pclath, cstack
 12090 ;; Tracked objects:
 12091 ;;		On entry : 0/0
 12092 ;;		On exit  : 0/0
 12093 ;;		Unchanged: 0/0
 12094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12095 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12096 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12097 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12098 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12099 ;;Total ram usage:        0 bytes
 12100 ;; Hardware stack levels used:    1
 12101 ;; Hardware stack levels required when called:    1
 12102 ;; This function calls:
 12103 ;;		i1_i2c1_driver_sendNACK
 12104 ;; This function is called by:
 12105 ;;		_do_I2C_RX
 12106 ;;		_i2c_ISR
 12107 ;; This function uses a non-reentrant model
 12108 ;;
 12109                           
 12110                           
 12111                           ;psect for function _do_I2C_DO_NACK_RESTART
 12112  0A31                     _do_I2C_DO_NACK_RESTART:	
 12113                           
 12114                           ;mcc_generated_files/drivers/i2c_master.c: 313:     i2c1_driver_sendNACK();
 12115                           
 12116                           ;incstack = 0
 12117                           ; Regs used in _do_I2C_DO_NACK_RESTART: [wreg+status,2+status,0+pclath+cstack]
 12118  0A31  318A  2215         	fcall	i1_i2c1_driver_sendNACK
 12119                           
 12120                           ;mcc_generated_files/drivers/i2c_master.c: 314:     return I2C_SEND_RESTART;
 12121  0A33  3009               	movlw	9
 12122  0A34  0008               	return
 12123  0A35                     __end_of_do_I2C_DO_NACK_RESTART:	
 12124                           
 12125                           	psect	text66
 12126  0A2D                     __ptext66:	
 12127 ;; *************** function _do_I2C_DO_NACK_STOP *****************
 12128 ;; Defined at:
 12129 ;;		line 305 in file "mcc_generated_files/drivers/i2c_master.c"
 12130 ;; Parameters:    Size  Location     Type
 12131 ;;		None
 12132 ;; Auto vars:     Size  Location     Type
 12133 ;;		None
 12134 ;; Return value:  Size  Location     Type
 12135 ;;                  1    wreg      enum E7120
 12136 ;; Registers used:
 12137 ;;		wreg, status,2, status,0, pclath, cstack
 12138 ;; Tracked objects:
 12139 ;;		On entry : 0/0
 12140 ;;		On exit  : 0/0
 12141 ;;		Unchanged: 0/0
 12142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12144 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12145 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12146 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12147 ;;Total ram usage:        0 bytes
 12148 ;; Hardware stack levels used:    1
 12149 ;; Hardware stack levels required when called:    1
 12150 ;; This function calls:
 12151 ;;		i1_i2c1_driver_sendNACK
 12152 ;; This function is called by:
 12153 ;;		_do_I2C_RX
 12154 ;;		_i2c_ISR
 12155 ;; This function uses a non-reentrant model
 12156 ;;
 12157                           
 12158                           
 12159                           ;psect for function _do_I2C_DO_NACK_STOP
 12160  0A2D                     _do_I2C_DO_NACK_STOP:	
 12161                           
 12162                           ;mcc_generated_files/drivers/i2c_master.c: 307:     i2c1_driver_sendNACK();
 12163                           
 12164                           ;incstack = 0
 12165                           ; Regs used in _do_I2C_DO_NACK_STOP: [wreg+status,2+status,0+pclath+cstack]
 12166  0A2D  318A  2215         	fcall	i1_i2c1_driver_sendNACK
 12167                           
 12168                           ;mcc_generated_files/drivers/i2c_master.c: 308:     return I2C_SEND_STOP;
 12169  0A2F  300A               	movlw	10
 12170  0A30  0008               	return
 12171  0A31                     __end_of_do_I2C_DO_NACK_STOP:	
 12172                           
 12173                           	psect	text67
 12174  0A29                     __ptext67:	
 12175 ;; *************** function _do_I2C_DO_ACK *****************
 12176 ;; Defined at:
 12177 ;;		line 299 in file "mcc_generated_files/drivers/i2c_master.c"
 12178 ;; Parameters:    Size  Location     Type
 12179 ;;		None
 12180 ;; Auto vars:     Size  Location     Type
 12181 ;;		None
 12182 ;; Return value:  Size  Location     Type
 12183 ;;                  1    wreg      enum E7120
 12184 ;; Registers used:
 12185 ;;		wreg, status,2, status,0, pclath, cstack
 12186 ;; Tracked objects:
 12187 ;;		On entry : 0/0
 12188 ;;		On exit  : 0/0
 12189 ;;		Unchanged: 0/0
 12190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12191 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12192 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12193 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12194 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12195 ;;Total ram usage:        0 bytes
 12196 ;; Hardware stack levels used:    1
 12197 ;; Hardware stack levels required when called:    1
 12198 ;; This function calls:
 12199 ;;		_i2c1_driver_sendACK
 12200 ;; This function is called by:
 12201 ;;		_i2c_ISR
 12202 ;; This function uses a non-reentrant model
 12203 ;;
 12204                           
 12205                           
 12206                           ;psect for function _do_I2C_DO_ACK
 12207  0A29                     _do_I2C_DO_ACK:	
 12208                           
 12209                           ;mcc_generated_files/drivers/i2c_master.c: 301:     i2c1_driver_sendACK();
 12210                           
 12211                           ;incstack = 0
 12212                           ; Regs used in _do_I2C_DO_ACK: [wreg+status,2+status,0+pclath+cstack]
 12213  0A29  318A  2211         	fcall	_i2c1_driver_sendACK
 12214                           
 12215                           ;mcc_generated_files/drivers/i2c_master.c: 302:     return I2C_RCEN;
 12216  0A2B  3005               	movlw	5
 12217  0A2C  0008               	return
 12218  0A2D                     __end_of_do_I2C_DO_ACK:	
 12219                           
 12220                           	psect	text68
 12221  0A47                     __ptext68:	
 12222 ;; *************** function _do_I2C_RCEN *****************
 12223 ;; Defined at:
 12224 ;;		line 292 in file "mcc_generated_files/drivers/i2c_master.c"
 12225 ;; Parameters:    Size  Location     Type
 12226 ;;		None
 12227 ;; Auto vars:     Size  Location     Type
 12228 ;;		None
 12229 ;; Return value:  Size  Location     Type
 12230 ;;                  1    wreg      enum E7120
 12231 ;; Registers used:
 12232 ;;		wreg, status,2, status,0, pclath, cstack
 12233 ;; Tracked objects:
 12234 ;;		On entry : 0/0
 12235 ;;		On exit  : 0/0
 12236 ;;		Unchanged: 0/0
 12237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12239 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12240 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12241 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12242 ;;Total ram usage:        0 bytes
 12243 ;; Hardware stack levels used:    1
 12244 ;; Hardware stack levels required when called:    1
 12245 ;; This function calls:
 12246 ;;		i1_i2c1_driver_startRX
 12247 ;; This function is called by:
 12248 ;;		_i2c_ISR
 12249 ;; This function uses a non-reentrant model
 12250 ;;
 12251                           
 12252                           
 12253                           ;psect for function _do_I2C_RCEN
 12254  0A47                     _do_I2C_RCEN:	
 12255                           
 12256                           ;mcc_generated_files/drivers/i2c_master.c: 294:     i2c_status.addressNACKCheck = 0;
 12257                           
 12258                           ;incstack = 0
 12259                           ; Regs used in _do_I2C_RCEN: [wreg+status,2+status,0+pclath+cstack]
 12260  0A47  0023               	movlb	3	; select bank3
 12261  0A48  11A0               	bcf	_i2c_status^(0+384),3
 12262                           
 12263                           ;mcc_generated_files/drivers/i2c_master.c: 295:     i2c1_driver_startRX();
 12264  0A49  3189  21E4         	fcall	i1_i2c1_driver_startRX
 12265                           
 12266                           ;mcc_generated_files/drivers/i2c_master.c: 296:     return I2C_RX;
 12267  0A4B  3004               	movlw	4
 12268  0A4C  0008               	return
 12269  0A4D                     __end_of_do_I2C_RCEN:	
 12270                           
 12271                           	psect	text69
 12272  0A66                     __ptext69:	
 12273 ;; *************** function _do_I2C_SEND_ADR_WRITE *****************
 12274 ;; Defined at:
 12275 ;;		line 285 in file "mcc_generated_files/drivers/i2c_master.c"
 12276 ;; Parameters:    Size  Location     Type
 12277 ;;		None
 12278 ;; Auto vars:     Size  Location     Type
 12279 ;;		None
 12280 ;; Return value:  Size  Location     Type
 12281 ;;                  1    wreg      enum E7120
 12282 ;; Registers used:
 12283 ;;		wreg, status,2, status,0, pclath, cstack
 12284 ;; Tracked objects:
 12285 ;;		On entry : 0/0
 12286 ;;		On exit  : 0/0
 12287 ;;		Unchanged: 0/0
 12288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12289 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12290 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12291 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12292 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12293 ;;Total ram usage:        0 bytes
 12294 ;; Hardware stack levels used:    1
 12295 ;; Hardware stack levels required when called:    1
 12296 ;; This function calls:
 12297 ;;		i1_i2c1_driver_TXData
 12298 ;; This function is called by:
 12299 ;;		_i2c_ISR
 12300 ;; This function uses a non-reentrant model
 12301 ;;
 12302                           
 12303                           
 12304                           ;psect for function _do_I2C_SEND_ADR_WRITE
 12305  0A66                     _do_I2C_SEND_ADR_WRITE:	
 12306                           
 12307                           ;mcc_generated_files/drivers/i2c_master.c: 287:     i2c_status.addressNACKCheck = 1;
 12308                           
 12309                           ;incstack = 0
 12310                           ; Regs used in _do_I2C_SEND_ADR_WRITE: [wreg+status,2+status,0+pclath+cstack]
 12311  0A66  0023               	movlb	3	; select bank3
 12312  0A67  15A0               	bsf	_i2c_status^(0+384),3
 12313                           
 12314                           ;mcc_generated_files/drivers/i2c_master.c: 288:     i2c1_driver_TXData(i2c_status.addres
      +                          s << 1);
 12315  0A68  3521               	lslf	(_i2c_status^(0+384)+1),w
 12316  0A69  318A  223D         	fcall	i1_i2c1_driver_TXData
 12317                           
 12318                           ;mcc_generated_files/drivers/i2c_master.c: 289:     return I2C_TX;
 12319  0A6B  3003               	movlw	3
 12320  0A6C  0008               	return
 12321  0A6D                     __end_of_do_I2C_SEND_ADR_WRITE:	
 12322                           
 12323                           	psect	text70
 12324  0A83                     __ptext70:	
 12325 ;; *************** function _do_I2C_SEND_ADR_READ *****************
 12326 ;; Defined at:
 12327 ;;		line 278 in file "mcc_generated_files/drivers/i2c_master.c"
 12328 ;; Parameters:    Size  Location     Type
 12329 ;;		None
 12330 ;; Auto vars:     Size  Location     Type
 12331 ;;		None
 12332 ;; Return value:  Size  Location     Type
 12333 ;;                  1    wreg      enum E7120
 12334 ;; Registers used:
 12335 ;;		wreg, status,2, status,0, pclath, cstack
 12336 ;; Tracked objects:
 12337 ;;		On entry : 0/0
 12338 ;;		On exit  : 0/0
 12339 ;;		Unchanged: 0/0
 12340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12341 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12342 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12343 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12344 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12345 ;;Total ram usage:        0 bytes
 12346 ;; Hardware stack levels used:    1
 12347 ;; Hardware stack levels required when called:    1
 12348 ;; This function calls:
 12349 ;;		i1_i2c1_driver_TXData
 12350 ;; This function is called by:
 12351 ;;		_i2c_ISR
 12352 ;; This function uses a non-reentrant model
 12353 ;;
 12354                           
 12355                           
 12356                           ;psect for function _do_I2C_SEND_ADR_READ
 12357  0A83                     _do_I2C_SEND_ADR_READ:	
 12358                           
 12359                           ;mcc_generated_files/drivers/i2c_master.c: 280:     i2c_status.addressNACKCheck = 1;
 12360                           
 12361                           ;incstack = 0
 12362                           ; Regs used in _do_I2C_SEND_ADR_READ: [wreg+status,2+status,0+pclath+cstack]
 12363  0A83  0023               	movlb	3	; select bank3
 12364  0A84  15A0               	bsf	_i2c_status^(0+384),3
 12365                           
 12366                           ;mcc_generated_files/drivers/i2c_master.c: 281:     i2c1_driver_TXData(i2c_status.addres
      +                          s << 1 | 1);
 12367  0A85  1403               	setc
 12368  0A86  0D21               	rlf	(_i2c_status^(0+384)+1),w
 12369  0A87  318A  223D         	fcall	i1_i2c1_driver_TXData
 12370                           
 12371                           ;mcc_generated_files/drivers/i2c_master.c: 282:     return I2C_RCEN;
 12372  0A89  3005               	movlw	5
 12373  0A8A  0008               	return
 12374  0A8B                     __end_of_do_I2C_SEND_ADR_READ:	
 12375                           
 12376                           	psect	text71
 12377  0A25                     __ptext71:	
 12378 ;; *************** function _do_I2C_SEND_STOP *****************
 12379 ;; Defined at:
 12380 ;;		line 272 in file "mcc_generated_files/drivers/i2c_master.c"
 12381 ;; Parameters:    Size  Location     Type
 12382 ;;		None
 12383 ;; Auto vars:     Size  Location     Type
 12384 ;;		None
 12385 ;; Return value:  Size  Location     Type
 12386 ;;                  1    wreg      enum E7120
 12387 ;; Registers used:
 12388 ;;		wreg, status,2, status,0, pclath, cstack
 12389 ;; Tracked objects:
 12390 ;;		On entry : 0/0
 12391 ;;		On exit  : 0/0
 12392 ;;		Unchanged: 0/0
 12393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12394 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12395 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12396 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12397 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12398 ;;Total ram usage:        0 bytes
 12399 ;; Hardware stack levels used:    1
 12400 ;; Hardware stack levels required when called:    1
 12401 ;; This function calls:
 12402 ;;		i1_i2c1_driver_stop
 12403 ;; This function is called by:
 12404 ;;		_do_I2C_DO_ADDRESS_NACK
 12405 ;;		_do_I2C_TX
 12406 ;;		_do_I2C_TX_EMPTY
 12407 ;;		_i2c_ISR
 12408 ;; This function uses a non-reentrant model
 12409 ;;
 12410                           
 12411                           
 12412                           ;psect for function _do_I2C_SEND_STOP
 12413  0A25                     _do_I2C_SEND_STOP:	
 12414                           
 12415                           ;mcc_generated_files/drivers/i2c_master.c: 274:     i2c1_driver_stop();
 12416                           
 12417                           ;incstack = 0
 12418                           ; Regs used in _do_I2C_SEND_STOP: [wreg+status,2+status,0+pclath+cstack]
 12419  0A25  3189  21E1         	fcall	i1_i2c1_driver_stop
 12420                           
 12421                           ;mcc_generated_files/drivers/i2c_master.c: 275:     return I2C_IDLE;
 12422  0A27  3000               	movlw	0
 12423  0A28  0008               	return
 12424  0A29                     __end_of_do_I2C_SEND_STOP:	
 12425                           
 12426                           	psect	text72
 12427  0A21                     __ptext72:	
 12428 ;; *************** function _do_I2C_SEND_RESTART *****************
 12429 ;; Defined at:
 12430 ;;		line 266 in file "mcc_generated_files/drivers/i2c_master.c"
 12431 ;; Parameters:    Size  Location     Type
 12432 ;;		None
 12433 ;; Auto vars:     Size  Location     Type
 12434 ;;		None
 12435 ;; Return value:  Size  Location     Type
 12436 ;;                  1    wreg      enum E7120
 12437 ;; Registers used:
 12438 ;;		wreg, status,2, status,0, pclath, cstack
 12439 ;; Tracked objects:
 12440 ;;		On entry : 0/0
 12441 ;;		On exit  : 0/0
 12442 ;;		Unchanged: 0/0
 12443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12444 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12445 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12446 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12447 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12448 ;;Total ram usage:        0 bytes
 12449 ;; Hardware stack levels used:    1
 12450 ;; Hardware stack levels required when called:    1
 12451 ;; This function calls:
 12452 ;;		i1_i2c1_driver_restart
 12453 ;; This function is called by:
 12454 ;;		_do_I2C_DO_ADDRESS_NACK
 12455 ;;		_do_I2C_TX_EMPTY
 12456 ;;		_i2c_ISR
 12457 ;; This function uses a non-reentrant model
 12458 ;;
 12459                           
 12460                           
 12461                           ;psect for function _do_I2C_SEND_RESTART
 12462  0A21                     _do_I2C_SEND_RESTART:	
 12463                           
 12464                           ;mcc_generated_files/drivers/i2c_master.c: 268:     i2c1_driver_restart();
 12465                           
 12466                           ;incstack = 0
 12467                           ; Regs used in _do_I2C_SEND_RESTART: [wreg+status,2+status,0+pclath+cstack]
 12468  0A21  3189  21DE         	fcall	i1_i2c1_driver_restart
 12469                           
 12470                           ;mcc_generated_files/drivers/i2c_master.c: 269:     return I2C_SEND_ADR_READ;
 12471  0A23  3001               	movlw	1
 12472  0A24  0008               	return
 12473  0A25                     __end_of_do_I2C_SEND_RESTART:	
 12474                           
 12475                           	psect	text73
 12476  0A1D                     __ptext73:	
 12477 ;; *************** function _do_I2C_SEND_RESTART_WRITE *****************
 12478 ;; Defined at:
 12479 ;;		line 260 in file "mcc_generated_files/drivers/i2c_master.c"
 12480 ;; Parameters:    Size  Location     Type
 12481 ;;		None
 12482 ;; Auto vars:     Size  Location     Type
 12483 ;;		None
 12484 ;; Return value:  Size  Location     Type
 12485 ;;                  1    wreg      enum E7120
 12486 ;; Registers used:
 12487 ;;		wreg, status,2, status,0, pclath, cstack
 12488 ;; Tracked objects:
 12489 ;;		On entry : 0/0
 12490 ;;		On exit  : 0/0
 12491 ;;		Unchanged: 0/0
 12492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12494 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12496 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12497 ;;Total ram usage:        0 bytes
 12498 ;; Hardware stack levels used:    1
 12499 ;; Hardware stack levels required when called:    1
 12500 ;; This function calls:
 12501 ;;		i1_i2c1_driver_restart
 12502 ;; This function is called by:
 12503 ;;		_do_I2C_TX
 12504 ;;		_i2c_ISR
 12505 ;; This function uses a non-reentrant model
 12506 ;;
 12507                           
 12508                           
 12509                           ;psect for function _do_I2C_SEND_RESTART_WRITE
 12510  0A1D                     _do_I2C_SEND_RESTART_WRITE:	
 12511                           
 12512                           ;mcc_generated_files/drivers/i2c_master.c: 262:     i2c1_driver_restart();
 12513                           
 12514                           ;incstack = 0
 12515                           ; Regs used in _do_I2C_SEND_RESTART_WRITE: [wreg+status,2+status,0+pclath+cstack]
 12516  0A1D  3189  21DE         	fcall	i1_i2c1_driver_restart
 12517                           
 12518                           ;mcc_generated_files/drivers/i2c_master.c: 263:     return I2C_SEND_ADR_WRITE;
 12519  0A1F  3002               	movlw	2
 12520  0A20  0008               	return
 12521  0A21                     __end_of_do_I2C_SEND_RESTART_WRITE:	
 12522                           
 12523                           	psect	text74
 12524  0A19                     __ptext74:	
 12525 ;; *************** function _do_I2C_SEND_RESTART_READ *****************
 12526 ;; Defined at:
 12527 ;;		line 254 in file "mcc_generated_files/drivers/i2c_master.c"
 12528 ;; Parameters:    Size  Location     Type
 12529 ;;		None
 12530 ;; Auto vars:     Size  Location     Type
 12531 ;;		None
 12532 ;; Return value:  Size  Location     Type
 12533 ;;                  1    wreg      enum E7120
 12534 ;; Registers used:
 12535 ;;		wreg, status,2, status,0, pclath, cstack
 12536 ;; Tracked objects:
 12537 ;;		On entry : 0/0
 12538 ;;		On exit  : 0/0
 12539 ;;		Unchanged: 0/0
 12540 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12541 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12542 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12543 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12544 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12545 ;;Total ram usage:        0 bytes
 12546 ;; Hardware stack levels used:    1
 12547 ;; Hardware stack levels required when called:    1
 12548 ;; This function calls:
 12549 ;;		i1_i2c1_driver_restart
 12550 ;; This function is called by:
 12551 ;;		_do_I2C_TX
 12552 ;;		_i2c_ISR
 12553 ;; This function uses a non-reentrant model
 12554 ;;
 12555                           
 12556                           
 12557                           ;psect for function _do_I2C_SEND_RESTART_READ
 12558  0A19                     _do_I2C_SEND_RESTART_READ:	
 12559                           
 12560                           ;mcc_generated_files/drivers/i2c_master.c: 256:     i2c1_driver_restart();
 12561                           
 12562                           ;incstack = 0
 12563                           ; Regs used in _do_I2C_SEND_RESTART_READ: [wreg+status,2+status,0+pclath+cstack]
 12564  0A19  3189  21DE         	fcall	i1_i2c1_driver_restart
 12565                           
 12566                           ;mcc_generated_files/drivers/i2c_master.c: 257:     return I2C_SEND_ADR_READ;
 12567  0A1B  3001               	movlw	1
 12568  0A1C  0008               	return
 12569  0A1D                     __end_of_do_I2C_SEND_RESTART_READ:	
 12570                           
 12571                           	psect	text75
 12572  0A42                     __ptext75:	
 12573 ;; *************** function _do_I2C_IDLE *****************
 12574 ;; Defined at:
 12575 ;;		line 247 in file "mcc_generated_files/drivers/i2c_master.c"
 12576 ;; Parameters:    Size  Location     Type
 12577 ;;		None
 12578 ;; Auto vars:     Size  Location     Type
 12579 ;;		None
 12580 ;; Return value:  Size  Location     Type
 12581 ;;                  1    wreg      enum E7120
 12582 ;; Registers used:
 12583 ;;		wreg, status,2
 12584 ;; Tracked objects:
 12585 ;;		On entry : 0/0
 12586 ;;		On exit  : 0/0
 12587 ;;		Unchanged: 0/0
 12588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12589 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12590 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12591 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12592 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12593 ;;Total ram usage:        0 bytes
 12594 ;; Hardware stack levels used:    1
 12595 ;; This function calls:
 12596 ;;		Nothing
 12597 ;; This function is called by:
 12598 ;;		_i2c_ISR
 12599 ;; This function uses a non-reentrant model
 12600 ;;
 12601                           
 12602                           
 12603                           ;psect for function _do_I2C_IDLE
 12604  0A42                     _do_I2C_IDLE:	
 12605                           
 12606                           ;mcc_generated_files/drivers/i2c_master.c: 249:     i2c_status.busy = 0;
 12607                           
 12608                           ;incstack = 0
 12609                           ; Regs used in _do_I2C_IDLE: [wreg+status,2]
 12610  0A42  0023               	movlb	3	; select bank3
 12611  0A43  1020               	bcf	_i2c_status^(0+384),0
 12612                           
 12613                           ;mcc_generated_files/drivers/i2c_master.c: 250:     i2c_status.error = I2C_NOERR;
 12614  0A44  01AA               	clrf	(_i2c_status^(0+384)+10)
 12615                           
 12616                           ;mcc_generated_files/drivers/i2c_master.c: 251:     return I2C_RESET;
 12617  0A45  300E               	movlw	14
 12618  0A46  0008               	return
 12619  0A47                     __end_of_do_I2C_IDLE:	
 12620                           
 12621                           	psect	text76
 12622  0A5F                     __ptext76:	
 12623 ;; *************** function _do_I2C_RESET *****************
 12624 ;; Defined at:
 12625 ;;		line 239 in file "mcc_generated_files/drivers/i2c_master.c"
 12626 ;; Parameters:    Size  Location     Type
 12627 ;;		None
 12628 ;; Auto vars:     Size  Location     Type
 12629 ;;		None
 12630 ;; Return value:  Size  Location     Type
 12631 ;;                  1    wreg      enum E7120
 12632 ;; Registers used:
 12633 ;;		wreg, status,2, status,0, pclath, cstack
 12634 ;; Tracked objects:
 12635 ;;		On entry : 0/0
 12636 ;;		On exit  : 0/0
 12637 ;;		Unchanged: 0/0
 12638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12639 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12640 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12641 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12642 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12643 ;;Total ram usage:        0 bytes
 12644 ;; Hardware stack levels used:    1
 12645 ;; Hardware stack levels required when called:    1
 12646 ;; This function calls:
 12647 ;;		_i2c1_driver_resetBus
 12648 ;; This function is called by:
 12649 ;;		_i2c_ISR
 12650 ;; This function uses a non-reentrant model
 12651 ;;
 12652                           
 12653                           
 12654                           ;psect for function _do_I2C_RESET
 12655  0A5F                     _do_I2C_RESET:	
 12656                           
 12657                           ;mcc_generated_files/drivers/i2c_master.c: 241:     i2c1_driver_resetBus();
 12658                           
 12659                           ;incstack = 0
 12660                           ; Regs used in _do_I2C_RESET: [wreg+status,2+status,0+pclath+cstack]
 12661  0A5F  3189  21DC         	fcall	_i2c1_driver_resetBus
 12662                           
 12663                           ;mcc_generated_files/drivers/i2c_master.c: 242:     i2c_status.busy = 0;
 12664  0A61  0023               	movlb	3	; select bank3
 12665  0A62  1020               	bcf	_i2c_status^(0+384),0
 12666                           
 12667                           ;mcc_generated_files/drivers/i2c_master.c: 243:     i2c_status.error = I2C_NOERR;
 12668  0A63  01AA               	clrf	(_i2c_status^(0+384)+10)
 12669                           
 12670                           ;mcc_generated_files/drivers/i2c_master.c: 244:     return I2C_RESET;
 12671  0A64  300E               	movlw	14
 12672  0A65  0008               	return
 12673  0A66                     __end_of_do_I2C_RESET:	
 12674                           
 12675                           	psect	text77
 12676  0D93                     __ptext77:	
 12677 ;; *************** function _do_I2C_TX_EMPTY *****************
 12678 ;; Defined at:
 12679 ;;		line 382 in file "mcc_generated_files/drivers/i2c_master.c"
 12680 ;; Parameters:    Size  Location     Type
 12681 ;;		None
 12682 ;; Auto vars:     Size  Location     Type
 12683 ;;		None
 12684 ;; Return value:  Size  Location     Type
 12685 ;;                  1    wreg      enum E7120
 12686 ;; Registers used:
 12687 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12688 ;; Tracked objects:
 12689 ;;		On entry : 0/0
 12690 ;;		On exit  : 0/0
 12691 ;;		Unchanged: 0/0
 12692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12693 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12694 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12695 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12696 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12697 ;;Total ram usage:        3 bytes
 12698 ;; Hardware stack levels used:    1
 12699 ;; Hardware stack levels required when called:    2
 12700 ;; This function calls:
 12701 ;;		_do_I2C_SEND_RESTART
 12702 ;;		_do_I2C_SEND_STOP
 12703 ;;		_mssp1_setIRQ
 12704 ;;		_returnReset
 12705 ;;		_returnStop
 12706 ;; This function is called by:
 12707 ;;		_i2c_ISR
 12708 ;; This function uses a non-reentrant model
 12709 ;;
 12710                           
 12711                           
 12712                           ;psect for function _do_I2C_TX_EMPTY
 12713  0D93                     _do_I2C_TX_EMPTY:	
 12714                           
 12715                           ;mcc_generated_files/drivers/i2c_master.c: 384:     i2c_status.bufferFree = 1;
 12716                           
 12717                           ;incstack = 0
 12718                           ; Regs used in _do_I2C_TX_EMPTY: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12719  0D93  0023               	movlb	3	; select bank3
 12720  0D94  1520               	bsf	_i2c_status^(0+384),2
 12721                           
 12722                           ;mcc_generated_files/drivers/i2c_master.c: 385:     switch(i2c_status.callbackTable[i2c_
      +                          dataComplete](i2c_status.callbackPayload[i2c_dataComplete]))
 12723  0D95  2DA0               	goto	i1l4257
 12724  0D96                     i1l4241:	
 12725                           
 12726                           ;mcc_generated_files/drivers/i2c_master.c: 389:             return do_I2C_SEND_RESTART()
      +                          ;
 12727  0D96  318A  2221         	fcall	_do_I2C_SEND_RESTART
 12728  0D98  0008               	return
 12729  0D99                     i1l4245:	
 12730                           
 12731                           ;mcc_generated_files/drivers/i2c_master.c: 391:             mssp1_setIRQ();
 12732  0D99  3189  21EA         	fcall	_mssp1_setIRQ
 12733                           
 12734                           ;mcc_generated_files/drivers/i2c_master.c: 392:             return I2C_TX;
 12735  0D9B  3003               	movlw	3
 12736  0D9C  0008               	return
 12737  0D9D                     i1l4251:	
 12738                           
 12739                           ;mcc_generated_files/drivers/i2c_master.c: 395:             return do_I2C_SEND_STOP();
 12740  0D9D  318A  2225         	fcall	_do_I2C_SEND_STOP
 12741  0D9F  0008               	return
 12742  0DA0                     i1l4257:	
 12743  0DA0  0837               	movf	(low ((_i2c_status| (0+256)+23)))^(0+128),w
 12744  0DA1  00F6               	movwf	??_do_I2C_TX_EMPTY
 12745  0DA2  0876               	movf	??_do_I2C_TX_EMPTY,w
 12746  0DA3  00F6               	movwf	returnReset@p
 12747  0DA4  300B               	movlw	11
 12748  0DA5  3EA0               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 12749  0DA6  0086               	movwf	6
 12750  0DA7  3001               	movlw	1	; select bank3/4
 12751  0DA8  0087               	movwf	7
 12752  0DA9  3F41               	moviw [1]fsr1
 12753  0DAA  008A               	movwf	10
 12754  0DAB  3F40               	moviw [0]fsr1
 12755  0DAC  000A               	callw
 12756  0DAD  318D               	pagesel	$
 12757  0DAE  00F7               	movwf	??_do_I2C_TX_EMPTY+1
 12758  0DAF  01F8               	clrf	??_do_I2C_TX_EMPTY+2
 12759                           
 12760                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12761                           ; Switch size 1, requested type "simple"
 12762                           ; Number of cases is 1, Range of values is 0 to 0
 12763                           ; switch strategies available:
 12764                           ; Name         Instructions Cycles
 12765                           ; simple_byte            4     3 (average)
 12766                           ; direct_byte            8     6 (fixed)
 12767                           ; jumptable            260     6 (fixed)
 12768                           ;	Chosen strategy is simple_byte
 12769  0DB0  0878               	movf	??_do_I2C_TX_EMPTY+2,w
 12770  0DB1  3A00               	xorlw	0	; case 0
 12771  0DB2  1903               	skipnz
 12772  0DB3  2DB5               	goto	i1l6681
 12773  0DB4  2D9D               	goto	i1l4251
 12774  0DB5                     i1l6681:	
 12775                           
 12776                           ; Switch size 1, requested type "simple"
 12777                           ; Number of cases is 4, Range of values is 1 to 4
 12778                           ; switch strategies available:
 12779                           ; Name         Instructions Cycles
 12780                           ; simple_byte           13     7 (average)
 12781                           ; direct_byte           17     9 (fixed)
 12782                           ; jumptable            263     9 (fixed)
 12783                           ;	Chosen strategy is simple_byte
 12784  0DB5  0877               	movf	??_do_I2C_TX_EMPTY+1,w
 12785  0DB6  3A01               	xorlw	1	; case 1
 12786  0DB7  1903               	skipnz
 12787  0DB8  2D9D               	goto	i1l4251
 12788  0DB9  3A03               	xorlw	3	; case 2
 12789  0DBA  1903               	skipnz
 12790  0DBB  2D96               	goto	i1l4241
 12791  0DBC  3A01               	xorlw	1	; case 3
 12792  0DBD  1903               	skipnz
 12793  0DBE  2D96               	goto	i1l4241
 12794  0DBF  3A07               	xorlw	7	; case 4
 12795  0DC0  1903               	skipnz
 12796  0DC1  2D99               	goto	i1l4245
 12797  0DC2  2D9D               	goto	i1l4251
 12798  0DC3  0008               	return
 12799  0DC4                     __end_of_do_I2C_TX_EMPTY:	
 12800                           
 12801                           	psect	text78
 12802  09EA                     __ptext78:	
 12803 ;; *************** function _mssp1_setIRQ *****************
 12804 ;; Defined at:
 12805 ;;		line 58 in file "mcc_generated_files/i2c1_driver.c"
 12806 ;; Parameters:    Size  Location     Type
 12807 ;;		None
 12808 ;; Auto vars:     Size  Location     Type
 12809 ;;		None
 12810 ;; Return value:  Size  Location     Type
 12811 ;;                  1    wreg      void 
 12812 ;; Registers used:
 12813 ;;		None
 12814 ;; Tracked objects:
 12815 ;;		On entry : 0/0
 12816 ;;		On exit  : 0/0
 12817 ;;		Unchanged: 0/0
 12818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12819 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12820 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12821 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12822 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12823 ;;Total ram usage:        0 bytes
 12824 ;; Hardware stack levels used:    1
 12825 ;; This function calls:
 12826 ;;		Nothing
 12827 ;; This function is called by:
 12828 ;;		_do_I2C_TX_EMPTY
 12829 ;; This function uses a non-reentrant model
 12830 ;;
 12831                           
 12832                           
 12833                           ;psect for function _mssp1_setIRQ
 12834  09EA                     _mssp1_setIRQ:	
 12835                           
 12836                           ;mcc_generated_files/i2c1_driver.c: 60:     }
 12837                           
 12838                           ;incstack = 0
 12839                           ; Regs used in _mssp1_setIRQ: []
 12840  09EA  0020               	movlb	0	; select bank0
 12841  09EB  1591               	bsf	17,3	;volatile
 12842  09EC  0008               	return
 12843  09ED                     __end_of_mssp1_setIRQ:	
 12844                           
 12845                           	psect	text79
 12846  0A7B                     __ptext79:	
 12847 ;; *************** function _i2c1_driver_isNACK *****************
 12848 ;; Defined at:
 12849 ;;		line 161 in file "mcc_generated_files/i2c1_driver.c"
 12850 ;; Parameters:    Size  Location     Type
 12851 ;;		None
 12852 ;; Auto vars:     Size  Location     Type
 12853 ;;		None
 12854 ;; Return value:  Size  Location     Type
 12855 ;;		None               void
 12856 ;; Registers used:
 12857 ;;		wreg, status,2, status,0
 12858 ;; Tracked objects:
 12859 ;;		On entry : 0/0
 12860 ;;		On exit  : 0/0
 12861 ;;		Unchanged: 0/0
 12862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12863 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12864 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12865 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12866 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12867 ;;Total ram usage:        1 bytes
 12868 ;; Hardware stack levels used:    1
 12869 ;; This function calls:
 12870 ;;		Nothing
 12871 ;; This function is called by:
 12872 ;;		_do_I2C_TX
 12873 ;;		_i2c_ISR
 12874 ;; This function uses a non-reentrant model
 12875 ;;
 12876                           
 12877                           
 12878                           ;psect for function _i2c1_driver_isNACK
 12879  0A7B                     _i2c1_driver_isNACK:	
 12880                           
 12881                           ;mcc_generated_files/i2c1_driver.c: 163:     return SSP1CON2bits.ACKSTAT;
 12882                           
 12883                           ;incstack = 0
 12884                           ; Regs used in _i2c1_driver_isNACK: [wreg+status,2+status,0]
 12885  0A7B  0024               	movlb	4	; select bank4
 12886  0A7C  0E16               	swapf	22,w	;volatile
 12887  0A7D  0C89               	rrf	9,f
 12888  0A7E  0C89               	rrf	9,f
 12889  0A7F  3901               	andlw	1
 12890  0A80  00F6               	movwf	??_i2c1_driver_isNACK
 12891  0A81  0C76               	rrf	??_i2c1_driver_isNACK,w
 12892  0A82  0008               	return
 12893  0A83                     __end_of_i2c1_driver_isNACK:	
 12894                           
 12895                           	psect	text80
 12896  0A3D                     __ptext80:	
 12897 ;; *************** function i1_i2c1_driver_TXData *****************
 12898 ;; Defined at:
 12899 ;;		line 186 in file "mcc_generated_files/i2c1_driver.c"
 12900 ;; Parameters:    Size  Location     Type
 12901 ;;  d               1    wreg     unsigned char 
 12902 ;; Auto vars:     Size  Location     Type
 12903 ;;  d               1    0[COMMON] unsigned char 
 12904 ;; Return value:  Size  Location     Type
 12905 ;;                  1    wreg      void 
 12906 ;; Registers used:
 12907 ;;		wreg
 12908 ;; Tracked objects:
 12909 ;;		On entry : 0/0
 12910 ;;		On exit  : 0/0
 12911 ;;		Unchanged: 0/0
 12912 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12913 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12914 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12915 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12916 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12917 ;;Total ram usage:        1 bytes
 12918 ;; Hardware stack levels used:    1
 12919 ;; This function calls:
 12920 ;;		Nothing
 12921 ;; This function is called by:
 12922 ;;		_do_I2C_SEND_ADR_READ
 12923 ;;		_do_I2C_SEND_ADR_WRITE
 12924 ;;		_do_I2C_TX
 12925 ;; This function uses a non-reentrant model
 12926 ;;
 12927                           
 12928                           
 12929                           ;psect for function i1_i2c1_driver_TXData
 12930  0A3D                     i1_i2c1_driver_TXData:	
 12931                           
 12932                           ;incstack = 0
 12933                           ; Regs used in i1_i2c1_driver_TXData: [wreg]
 12934                           ;i1i2c1_driver_TXData@d stored from wreg
 12935  0A3D  00F6               	movwf	i1i2c1_driver_TXData@d
 12936                           
 12937                           ;mcc_generated_files/i2c1_driver.c: 186: __attribute__((inline)) void i2c1_driver_TXData
      +                          (char d);mcc_generated_files/i2c1_driver.c: 187: {;mcc_generated_files/i2c1_driver.c: 18
      +                          8:     SSP1BUF = d;
 12938  0A3E  0876               	movf	i1i2c1_driver_TXData@d,w
 12939  0A3F  0024               	movlb	4	; select bank4
 12940  0A40  0091               	movwf	17	;volatile
 12941  0A41  0008               	return
 12942  0A42                     __end_ofi1_i2c1_driver_TXData:	
 12943                           
 12944                           	psect	text81
 12945  09E7                     __ptext81:	
 12946 ;; *************** function i1_i2c1_driver_getRXData *****************
 12947 ;; Defined at:
 12948 ;;		line 171 in file "mcc_generated_files/i2c1_driver.c"
 12949 ;; Parameters:    Size  Location     Type
 12950 ;;		None
 12951 ;; Auto vars:     Size  Location     Type
 12952 ;;		None
 12953 ;; Return value:  Size  Location     Type
 12954 ;;                  1    wreg      unsigned char 
 12955 ;; Registers used:
 12956 ;;		wreg
 12957 ;; Tracked objects:
 12958 ;;		On entry : 0/0
 12959 ;;		On exit  : 0/0
 12960 ;;		Unchanged: 0/0
 12961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12962 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12963 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12964 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12965 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12966 ;;Total ram usage:        0 bytes
 12967 ;; Hardware stack levels used:    1
 12968 ;; This function calls:
 12969 ;;		Nothing
 12970 ;; This function is called by:
 12971 ;;		_do_I2C_RX
 12972 ;; This function uses a non-reentrant model
 12973 ;;
 12974                           
 12975                           
 12976                           ;psect for function i1_i2c1_driver_getRXData
 12977  09E7                     i1_i2c1_driver_getRXData:	
 12978                           
 12979                           ;mcc_generated_files/i2c1_driver.c: 173:     return SSP1BUF;
 12980                           
 12981                           ;incstack = 0
 12982                           ; Regs used in i1_i2c1_driver_getRXData: [wreg]
 12983  09E7  0024               	movlb	4	; select bank4
 12984  09E8  0811               	movf	17,w	;volatile
 12985  09E9  0008               	return
 12986  09EA                     __end_ofi1_i2c1_driver_getRXData:	
 12987                           
 12988                           	psect	text82
 12989  0A15                     __ptext82:	
 12990 ;; *************** function i1_i2c1_driver_sendNACK *****************
 12991 ;; Defined at:
 12992 ;;		line 202 in file "mcc_generated_files/i2c1_driver.c"
 12993 ;; Parameters:    Size  Location     Type
 12994 ;;		None
 12995 ;; Auto vars:     Size  Location     Type
 12996 ;;		None
 12997 ;; Return value:  Size  Location     Type
 12998 ;;                  1    wreg      void 
 12999 ;; Registers used:
 13000 ;;		None
 13001 ;; Tracked objects:
 13002 ;;		On entry : 0/0
 13003 ;;		On exit  : 0/0
 13004 ;;		Unchanged: 0/0
 13005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13006 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13007 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13008 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13009 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13010 ;;Total ram usage:        0 bytes
 13011 ;; Hardware stack levels used:    1
 13012 ;; This function calls:
 13013 ;;		Nothing
 13014 ;; This function is called by:
 13015 ;;		_do_I2C_DO_NACK_STOP
 13016 ;;		_do_I2C_DO_NACK_RESTART
 13017 ;; This function uses a non-reentrant model
 13018 ;;
 13019                           
 13020                           
 13021                           ;psect for function i1_i2c1_driver_sendNACK
 13022  0A15                     i1_i2c1_driver_sendNACK:	
 13023                           
 13024                           ;mcc_generated_files/i2c1_driver.c: 204:     SSP1CON2bits.ACKDT = 1;
 13025                           
 13026                           ;incstack = 0
 13027                           ; Regs used in i1_i2c1_driver_sendNACK: []
 13028  0A15  0024               	movlb	4	; select bank4
 13029  0A16  1696               	bsf	22,5	;volatile
 13030                           
 13031                           ;mcc_generated_files/i2c1_driver.c: 205:     SSP1CON2bits.ACKEN = 1;
 13032  0A17  1616               	bsf	22,4	;volatile
 13033  0A18  0008               	return
 13034  0A19                     __end_ofi1_i2c1_driver_sendNACK:	
 13035                           
 13036                           	psect	text83
 13037  09DC                     __ptext83:	
 13038 ;; *************** function _i2c1_driver_resetBus *****************
 13039 ;; Defined at:
 13040 ;;		line 141 in file "mcc_generated_files/i2c1_driver.c"
 13041 ;; Parameters:    Size  Location     Type
 13042 ;;		None
 13043 ;; Auto vars:     Size  Location     Type
 13044 ;;		None
 13045 ;; Return value:  Size  Location     Type
 13046 ;;                  1    wreg      void 
 13047 ;; Registers used:
 13048 ;;		None
 13049 ;; Tracked objects:
 13050 ;;		On entry : 0/0
 13051 ;;		On exit  : 0/0
 13052 ;;		Unchanged: 0/0
 13053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13054 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13055 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13056 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13057 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13058 ;;Total ram usage:        0 bytes
 13059 ;; Hardware stack levels used:    1
 13060 ;; This function calls:
 13061 ;;		Nothing
 13062 ;; This function is called by:
 13063 ;;		_do_I2C_RESET
 13064 ;; This function uses a non-reentrant model
 13065 ;;
 13066                           
 13067                           
 13068                           ;psect for function _i2c1_driver_resetBus
 13069  09DC                     _i2c1_driver_resetBus:	
 13070                           
 13071                           ;incstack = 0
 13072                           ; Regs used in _i2c1_driver_resetBus: []
 13073  09DC  0008               	return
 13074  09DD                     __end_of_i2c1_driver_resetBus:	
 13075                           
 13076                           	psect	text84
 13077  09E4                     __ptext84:	
 13078 ;; *************** function i1_i2c1_driver_startRX *****************
 13079 ;; Defined at:
 13080 ;;		line 166 in file "mcc_generated_files/i2c1_driver.c"
 13081 ;; Parameters:    Size  Location     Type
 13082 ;;		None
 13083 ;; Auto vars:     Size  Location     Type
 13084 ;;		None
 13085 ;; Return value:  Size  Location     Type
 13086 ;;                  1    wreg      void 
 13087 ;; Registers used:
 13088 ;;		None
 13089 ;; Tracked objects:
 13090 ;;		On entry : 0/0
 13091 ;;		On exit  : 0/0
 13092 ;;		Unchanged: 0/0
 13093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13094 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13095 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13096 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13097 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13098 ;;Total ram usage:        0 bytes
 13099 ;; Hardware stack levels used:    1
 13100 ;; This function calls:
 13101 ;;		Nothing
 13102 ;; This function is called by:
 13103 ;;		_do_I2C_RCEN
 13104 ;; This function uses a non-reentrant model
 13105 ;;
 13106                           
 13107                           
 13108                           ;psect for function i1_i2c1_driver_startRX
 13109  09E4                     i1_i2c1_driver_startRX:	
 13110                           
 13111                           ;mcc_generated_files/i2c1_driver.c: 168:     SSP1CON2bits.RCEN = 1;
 13112                           
 13113                           ;incstack = 0
 13114                           ; Regs used in i1_i2c1_driver_startRX: []
 13115  09E4  0024               	movlb	4	; select bank4
 13116  09E5  1596               	bsf	22,3	;volatile
 13117  09E6  0008               	return
 13118  09E7                     __end_ofi1_i2c1_driver_startRX:	
 13119                           
 13120                           	psect	text85
 13121  07FE                     __ptext85:	
 13122 ;; *************** function _returnReset *****************
 13123 ;; Defined at:
 13124 ;;		line 448 in file "mcc_generated_files/drivers/i2c_master.c"
 13125 ;; Parameters:    Size  Location     Type
 13126 ;;  p               1    0[COMMON] PTR void 
 13127 ;;		 -> NULL(0), 
 13128 ;; Auto vars:     Size  Location     Type
 13129 ;;		None
 13130 ;; Return value:  Size  Location     Type
 13131 ;;                  1    wreg      enum E6966
 13132 ;; Registers used:
 13133 ;;		wreg
 13134 ;; Tracked objects:
 13135 ;;		On entry : 0/0
 13136 ;;		On exit  : 0/0
 13137 ;;		Unchanged: 0/0
 13138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13139 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13140 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13141 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13142 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13143 ;;Total ram usage:        1 bytes
 13144 ;; Hardware stack levels used:    1
 13145 ;; This function calls:
 13146 ;;		Nothing
 13147 ;; This function is called by:
 13148 ;;		_i2c_open
 13149 ;;		_do_I2C_DO_ADDRESS_NACK
 13150 ;;		_do_I2C_TX
 13151 ;;		_do_I2C_RX
 13152 ;;		_do_I2C_TX_EMPTY
 13153 ;; This function uses a non-reentrant model
 13154 ;;
 13155                           
 13156                           
 13157                           ;psect for function _returnReset
 13158  07FE                     _returnReset:	
 13159                           
 13160                           ;mcc_generated_files/drivers/i2c_master.c: 448: static i2c_operations_t returnReset(void
      +                           *p);mcc_generated_files/drivers/i2c_master.c: 449: {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 450:     return i2c_reset_link;
 13161                           
 13162                           ;incstack = 0
 13163                           ; Regs used in _returnReset: [wreg]
 13164  07FE  3005               	movlw	5
 13165  07FF  0008               	return
 13166  0800                     __end_of_returnReset:	
 13167                           
 13168                           	psect	text86
 13169  0002                     __ptext86:	
 13170 ;; *************** function _returnStop *****************
 13171 ;; Defined at:
 13172 ;;		line 443 in file "mcc_generated_files/drivers/i2c_master.c"
 13173 ;; Parameters:    Size  Location     Type
 13174 ;;  p               1    0[COMMON] PTR void 
 13175 ;;		 -> NULL(0), 
 13176 ;; Auto vars:     Size  Location     Type
 13177 ;;		None
 13178 ;; Return value:  Size  Location     Type
 13179 ;;                  1    wreg      enum E6966
 13180 ;; Registers used:
 13181 ;;		wreg
 13182 ;; Tracked objects:
 13183 ;;		On entry : 0/0
 13184 ;;		On exit  : 0/0
 13185 ;;		Unchanged: 0/0
 13186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13187 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13188 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13189 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13190 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13191 ;;Total ram usage:        1 bytes
 13192 ;; Hardware stack levels used:    1
 13193 ;; This function calls:
 13194 ;;		Nothing
 13195 ;; This function is called by:
 13196 ;;		_i2c_open
 13197 ;;		_setCallBack
 13198 ;;		_do_I2C_DO_ADDRESS_NACK
 13199 ;;		_do_I2C_TX
 13200 ;;		_do_I2C_RX
 13201 ;;		_do_I2C_TX_EMPTY
 13202 ;; This function uses a non-reentrant model
 13203 ;;
 13204                           
 13205                           
 13206                           ;psect for function _returnStop
 13207  0002                     _returnStop:	
 13208                           
 13209                           ;mcc_generated_files/drivers/i2c_master.c: 443: static i2c_operations_t returnStop(void 
      +                          *p);mcc_generated_files/drivers/i2c_master.c: 444: {;mcc_generated_files/drivers/i2c_mas
      +                          ter.c: 445:     return i2c_stop;
 13210                           
 13211                           ;incstack = 0
 13212                           ; Regs used in _returnStop: [wreg]
 13213  0002  3001               	movlw	1
 13214  0003  0008               	return
 13215  0004                     __end_of_returnStop:	
 13216                           
 13217                           	psect	text87
 13218  09E1                     __ptext87:	
 13219 ;; *************** function i1_i2c1_driver_stop *****************
 13220 ;; Defined at:
 13221 ;;		line 156 in file "mcc_generated_files/i2c1_driver.c"
 13222 ;; Parameters:    Size  Location     Type
 13223 ;;		None
 13224 ;; Auto vars:     Size  Location     Type
 13225 ;;		None
 13226 ;; Return value:  Size  Location     Type
 13227 ;;                  1    wreg      void 
 13228 ;; Registers used:
 13229 ;;		None
 13230 ;; Tracked objects:
 13231 ;;		On entry : 0/0
 13232 ;;		On exit  : 0/0
 13233 ;;		Unchanged: 0/0
 13234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13235 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13236 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13237 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13238 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13239 ;;Total ram usage:        0 bytes
 13240 ;; Hardware stack levels used:    1
 13241 ;; This function calls:
 13242 ;;		Nothing
 13243 ;; This function is called by:
 13244 ;;		_do_I2C_SEND_STOP
 13245 ;; This function uses a non-reentrant model
 13246 ;;
 13247                           
 13248                           
 13249                           ;psect for function i1_i2c1_driver_stop
 13250  09E1                     i1_i2c1_driver_stop:	
 13251                           
 13252                           ;mcc_generated_files/i2c1_driver.c: 158:     SSP1CON2bits.PEN = 1;
 13253                           
 13254                           ;incstack = 0
 13255                           ; Regs used in i1_i2c1_driver_stop: []
 13256  09E1  0024               	movlb	4	; select bank4
 13257  09E2  1516               	bsf	22,2	;volatile
 13258  09E3  0008               	return
 13259  09E4                     __end_ofi1_i2c1_driver_stop:	
 13260                           
 13261                           	psect	text88
 13262  09DE                     __ptext88:	
 13263 ;; *************** function i1_i2c1_driver_restart *****************
 13264 ;; Defined at:
 13265 ;;		line 151 in file "mcc_generated_files/i2c1_driver.c"
 13266 ;; Parameters:    Size  Location     Type
 13267 ;;		None
 13268 ;; Auto vars:     Size  Location     Type
 13269 ;;		None
 13270 ;; Return value:  Size  Location     Type
 13271 ;;                  1    wreg      void 
 13272 ;; Registers used:
 13273 ;;		None
 13274 ;; Tracked objects:
 13275 ;;		On entry : 0/0
 13276 ;;		On exit  : 0/0
 13277 ;;		Unchanged: 0/0
 13278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13279 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13280 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13281 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13282 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13283 ;;Total ram usage:        0 bytes
 13284 ;; Hardware stack levels used:    1
 13285 ;; This function calls:
 13286 ;;		Nothing
 13287 ;; This function is called by:
 13288 ;;		_do_I2C_SEND_RESTART_READ
 13289 ;;		_do_I2C_SEND_RESTART_WRITE
 13290 ;;		_do_I2C_SEND_RESTART
 13291 ;; This function uses a non-reentrant model
 13292 ;;
 13293                           
 13294                           
 13295                           ;psect for function i1_i2c1_driver_restart
 13296  09DE                     i1_i2c1_driver_restart:	
 13297                           
 13298                           ;mcc_generated_files/i2c1_driver.c: 153:     SSP1CON2bits.RSEN = 1;
 13299                           
 13300                           ;incstack = 0
 13301                           ; Regs used in i1_i2c1_driver_restart: []
 13302  09DE  0024               	movlb	4	; select bank4
 13303  09DF  1496               	bsf	22,1	;volatile
 13304  09E0  0008               	return
 13305  09E1                     __end_ofi1_i2c1_driver_restart:	
 13306                           
 13307                           	psect	text89
 13308  0A11                     __ptext89:	
 13309 ;; *************** function _i2c1_driver_sendACK *****************
 13310 ;; Defined at:
 13311 ;;		line 196 in file "mcc_generated_files/i2c1_driver.c"
 13312 ;; Parameters:    Size  Location     Type
 13313 ;;		None
 13314 ;; Auto vars:     Size  Location     Type
 13315 ;;		None
 13316 ;; Return value:  Size  Location     Type
 13317 ;;                  1    wreg      void 
 13318 ;; Registers used:
 13319 ;;		None
 13320 ;; Tracked objects:
 13321 ;;		On entry : 0/0
 13322 ;;		On exit  : 0/0
 13323 ;;		Unchanged: 0/0
 13324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13325 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13326 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13327 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13328 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13329 ;;Total ram usage:        0 bytes
 13330 ;; Hardware stack levels used:    1
 13331 ;; This function calls:
 13332 ;;		Nothing
 13333 ;; This function is called by:
 13334 ;;		_do_I2C_DO_ACK
 13335 ;;		_do_I2C_RX
 13336 ;;		_I2C_Send_ACK
 13337 ;; This function uses a non-reentrant model
 13338 ;;
 13339                           
 13340                           
 13341                           ;psect for function _i2c1_driver_sendACK
 13342  0A11                     _i2c1_driver_sendACK:	
 13343                           
 13344                           ;mcc_generated_files/i2c1_driver.c: 198:     SSP1CON2bits.ACKDT = 0;
 13345                           
 13346                           ;incstack = 0
 13347                           ; Regs used in _i2c1_driver_sendACK: []
 13348  0A11  0024               	movlb	4	; select bank4
 13349  0A12  1296               	bcf	22,5	;volatile
 13350                           
 13351                           ;mcc_generated_files/i2c1_driver.c: 199:     SSP1CON2bits.ACKEN = 1;
 13352  0A13  1616               	bsf	22,4	;volatile
 13353  0A14  0008               	return
 13354  0A15                     __end_of_i2c1_driver_sendACK:	
 13355                           
 13356                           	psect	text90
 13357  09DB                     __ptext90:	
 13358 ;; *************** function _PIN_MANAGER_IOC *****************
 13359 ;; Defined at:
 13360 ;;		line 118 in file "mcc_generated_files/pin_manager.c"
 13361 ;; Parameters:    Size  Location     Type
 13362 ;;		None
 13363 ;; Auto vars:     Size  Location     Type
 13364 ;;		None
 13365 ;; Return value:  Size  Location     Type
 13366 ;;                  1    wreg      void 
 13367 ;; Registers used:
 13368 ;;		None
 13369 ;; Tracked objects:
 13370 ;;		On entry : 0/0
 13371 ;;		On exit  : 0/0
 13372 ;;		Unchanged: 0/0
 13373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13374 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13375 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13376 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13377 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13378 ;;Total ram usage:        0 bytes
 13379 ;; Hardware stack levels used:    1
 13380 ;; This function calls:
 13381 ;;		Nothing
 13382 ;; This function is called by:
 13383 ;;		_INTERRUPT_InterruptManager
 13384 ;; This function uses a non-reentrant model
 13385 ;;
 13386                           
 13387                           
 13388                           ;psect for function _PIN_MANAGER_IOC
 13389  09DB                     _PIN_MANAGER_IOC:	
 13390                           
 13391                           ;incstack = 0
 13392                           ; Regs used in _PIN_MANAGER_IOC: []
 13393  09DB  0008               	return
 13394  09DC                     __end_of_PIN_MANAGER_IOC:	
 13395  007E                     btemp	set	126	;btemp
 13396  007E                     int$flags	set	126
 13397  007E                     wtemp0	set	126


Data Sizes:
    Strings     58
    Constant    32
    Data        9
    BSS         124
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      12
    BANK0            80     60      80
    BANK1            80     66      66
    BANK2            80     64      74
    BANK3            80      0      29
    BANK4            80      0      68
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    i2c_ISR$2096	const PTR FTN()enum E7120 size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_SEND_ADR_READ(), do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), 
		 -> do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), do_I2C_IDLE(), do_I2C_RESET(), 

    returnStop@p	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    returnReset@p	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    S52$11$0	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_9(CODE[11]), STR_8(CODE[16]), STR_7(CODE[13]), STR_6(CODE[12]), 
		 -> STR_5(CODE[6]), STR_4(CODE[11]), STR_3(CODE[16]), STR_2(CODE[13]), 
		 -> STR_1(CODE[12]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_9(CODE[11]), STR_8(CODE[16]), STR_7(CODE[13]), STR_6(CODE[12]), 
		 -> STR_5(CODE[6]), STR_4(CODE[11]), STR_3(CODE[16]), STR_2(CODE[13]), 
		 -> STR_1(CODE[12]), 

    wireReadDataBlock@val	PTR unsigned char  size(2) Largest target is 64
		 -> readGesture@fifo_data2(BANK1[64]), readGesture@fifo_data(BANK2[64]), 

    Display_Name@string1	PTR unsigned char  size(2) Largest target is 16
		 -> STR_9(CODE[11]), STR_8(CODE[16]), STR_7(CODE[13]), STR_6(CODE[12]), 
		 -> STR_5(CODE[6]), STR_4(CODE[11]), STR_3(CODE[16]), STR_2(CODE[13]), 
		 -> STR_1(CODE[12]), 

    names	PTR unsigned char [4] size(2) Largest target is 16
		 -> STR_4(CODE[11]), STR_3(CODE[16]), STR_2(CODE[13]), STR_1(CODE[12]), 

    i2c1_driver_i2cISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), i2c_ISR(), 

    i2c1_driver_busCollisionISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), i2c_busCollisionISR(), 

    fsmStateTable	const PTR FTN()enum E7120[16] size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_SEND_ADR_READ(), do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), 
		 -> do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), do_I2C_IDLE(), do_I2C_RESET(), 

    S52$callbackPayload	PTR void [6] size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    i2c_status.callbackPayload	PTR void [6] size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    S52$callbackTable	PTR FTN(PTR void ,)enum E6966[6] size(2) Largest target is 1
		 -> returnReset(), returnStop(), 

    i2c_status.callbackTable	PTR FTN(PTR void ,)enum E6966[6] size(2) Largest target is 1
		 -> returnReset(), returnStop(), 

    S52$data_ptr	PTR unsigned char  size(1) Largest target is 0

    i2c_status.data_ptr	PTR unsigned char  size(1) Largest target is 0


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_i2c_ISR
    _i2c_ISR->_do_I2C_DO_ADDRESS_NACK
    _i2c_ISR->_do_I2C_RX
    _i2c_ISR->_do_I2C_TX
    _i2c_ISR->_do_I2C_TX_EMPTY

Critical Paths under _main in BANK0

    _main->_handleGesture
    _initialize->_setMode
    _setProximityGain->_wireWriteDataByte
    _setProxIntLowThresh->_wireWriteDataByte
    _setProxIntHighThresh->_wireWriteDataByte
    _setLightIntLowThreshold->_wireWriteDataByte
    _setLightIntHighThreshold->_wireWriteDataByte
    _setLEDDrive->_wireWriteDataByte
    _setGestureWaitTime->_wireWriteDataByte
    _setGestureLEDDrive->_wireWriteDataByte
    _setGestureGain->_wireWriteDataByte
    _setGestureExitThresh->_wireWriteDataByte
    _setGestureEnterThresh->_wireWriteDataByte
    _setAmbientLightGain->_wireWriteDataByte
    _handleGesture->_readGesture
    _readGesture->_processGestureData
    _wireReadDataBlock->_I2C_Write_Byte
    _processGestureData->___awdiv
    ___awdiv->___wmul
    _isGestureAvailable->_wireReadDataByte
    _Display_Name->_strlen
    _SPI_Write->_SPI2_Exchange8bit
    _enableGestureSensor->_setMode
    _setLEDBoost->_wireWriteDataByte
    _setGestureMode->_wireWriteDataByte
    _setGestureIntEnable->_wireWriteDataByte
    _enablePower->_setMode
    _setMode->_getMode
    _wireWriteDataByte->_I2C_Write_Byte
    _getMode->_wireReadDataByte
    _wireReadDataByte->_I2C_Write_Byte
    _I2C_Write_Byte->_i2c1_driver_TXData
    _I2C_Read_Byte->_i2c1_driver_isBufferFull

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _handleGesture->_readGesture

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    _handleGesture->_readGesture

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   87945
                                             64 BANK1      2     2      0
                       _Display_Name
                  _SYSTEM_Initialize
                _enableGestureSensor
                      _handleGesture
                         _initialize
                 _isGestureAvailable
 ---------------------------------------------------------------------------------
 (1) _initialize                                           2     2      0   54520
                                             16 BANK0      2     2      0
                   _i2c1_driver_open
                _setAmbientLightGain
              _setGestureEnterThresh
               _setGestureExitThresh
                     _setGestureGain
                _setGestureIntEnable
                 _setGestureLEDDrive
                 _setGestureWaitTime
                        _setLEDDrive
           _setLightIntHighThreshold
            _setLightIntLowThreshold
                            _setMode
               _setProxIntHighThresh
                _setProxIntLowThresh
                   _setProximityGain
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setProximityGain                                     4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setProxIntLowThresh                                  2     2      0    3429
                                             10 BANK0      2     2      0
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setProxIntHighThresh                                 2     2      0    3429
                                             10 BANK0      2     2      0
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setLightIntLowThreshold                              5     3      2    3618
                                             10 BANK0      5     3      2
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setLightIntHighThreshold                             5     3      2    3618
                                             10 BANK0      5     3      2
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setLEDDrive                                          4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureWaitTime                                   3     3      0    3633
                                             10 BANK0      3     3      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureLEDDrive                                   4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureGain                                       4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureExitThresh                                 2     2      0    3429
                                             10 BANK0      2     2      0
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureEnterThresh                                2     2      0    3429
                                             10 BANK0      2     2      0
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setAmbientLightGain                                  3     3      0    3633
                                             10 BANK0      3     3      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _i2c1_driver_open                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _handleGesture                                        1     1      0    8982
                                             59 BANK0      1     1      0
                       _Display_Name
                        _readGesture
 ---------------------------------------------------------------------------------
 (2) _readGesture                                        140   138      2    7816
                                             47 BANK0     12    10      2
                                              0 BANK1     64    64      0
                                              0 BANK2     64    64      0
                      _decodeGesture
                            _getMode
                 _isGestureAvailable
                 _processGestureData
             _resetGestureParameters
                  _wireReadDataBlock
                   _wireReadDataByte
 ---------------------------------------------------------------------------------
 (3) _wireReadDataBlock                                   11     7      4     651
                                              6 BANK0     11     7      4
                        _I2C_ReStart
                      _I2C_Read_Byte
                      _I2C_Send_NACK
                          _I2C_Start
                           _I2C_Stop
                     _I2C_Write_Byte
 ---------------------------------------------------------------------------------
 (3) _processGestureData                                  32    32      0    5644
                                             15 BANK0     32    32      0
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    2176
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              9     5      4    1165
                                              6 BANK0      9     5      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _isGestureAvailable                                   2     2      0     198
                                              9 BANK0      2     2      0
                   _wireReadDataByte
 ---------------------------------------------------------------------------------
 (3) _decodeGesture                                       18    18      0     296
                                              0 BANK0     18    18      0
 ---------------------------------------------------------------------------------
 (2) _Display_Name                                         7     5      2    1166
                                              5 BANK0      7     5      2
                          _SPI_Write
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _strlen                                               5     3      2     220
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (3) _SPI_Write                                            2     2      0      62
                                              1 BANK0      2     2      0
                  _SPI2_Exchange8bit
 ---------------------------------------------------------------------------------
 (4) _SPI2_Exchange8bit                                    1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _enableGestureSensor                                  2     2      0   23076
                                             16 BANK0      2     2      0
                        _enablePower
             _resetGestureParameters
                _setGestureIntEnable
                     _setGestureMode
                        _setLEDBoost
                            _setMode
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setLEDBoost                                          4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureMode                                       3     3      0    3633
                                             10 BANK0      3     3      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureIntEnable                                  3     3      0    3667
                                             10 BANK0      3     3      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (3) _resetGestureParameters                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _enablePower                                          0     0      0    4340
                            _setMode
 ---------------------------------------------------------------------------------
 (2) _setMode                                              5     4      1    4340
                                             11 BANK0      5     4      1
                            _getMode
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _wireWriteDataByte                                    4     1      3    3398
                                              6 BANK0      4     1      3
                          _I2C_Start
                           _I2C_Stop
                     _I2C_Write_Byte
 ---------------------------------------------------------------------------------
 (3) _getMode                                              2     2      0     195
                                              9 BANK0      2     2      0
                   _wireReadDataByte
 ---------------------------------------------------------------------------------
 (2) _wireReadDataByte                                     3     3      0     161
                                              6 BANK0      3     3      0
                        _I2C_ReStart
                      _I2C_Read_Byte
                      _I2C_Send_NACK
                          _I2C_Start
                           _I2C_Stop
                     _I2C_Write_Byte
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Byte                                       5     5      0      96
                                              1 BANK0      5     5      0
                 _i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_TXData                                   1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _I2C_Stop                                             0     0      0       0
                   _i2c1_driver_stop
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_stop                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_Start                                            0     0      0       0
                  _i2c1_driver_start
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_start                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_Send_NACK                                        0     0      0       0
               _i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_sendNACK                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_Read_Byte                                        0     0      0       0
              _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
                _i2c1_driver_startRX
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_startRX                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_isBufferFull                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_getRXData                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_ReStart                                          0     0      0       0
                _i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_restart                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PMD_Initialize
                    _SPI2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SPI2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PMD_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                           0     0      0     914
                   Absolute function *
                    _PIN_MANAGER_IOC
                            _i2c_ISR *
                _i2c_busCollisionISR *
 ---------------------------------------------------------------------------------
 (9) _i2c_busCollisionISR                                  0     0      0       0
      _i2c1_driver_clearBusCollision
 ---------------------------------------------------------------------------------
 (10) _i2c1_driver_clearBusCollision                       0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _i2c_ISR                                              3     3      0     914
                                              3 COMMON     3     3      0
                      _do_I2C_DO_ACK *
             _do_I2C_DO_ADDRESS_NACK *
             _do_I2C_DO_NACK_RESTART *
                _do_I2C_DO_NACK_STOP *
                        _do_I2C_IDLE *
                        _do_I2C_RCEN *
                       _do_I2C_RESET *
                          _do_I2C_RX *
               _do_I2C_SEND_ADR_READ *
              _do_I2C_SEND_ADR_WRITE *
                _do_I2C_SEND_RESTART *
           _do_I2C_SEND_RESTART_READ *
          _do_I2C_SEND_RESTART_WRITE *
                   _do_I2C_SEND_STOP *
                          _do_I2C_TX *
                    _do_I2C_TX_EMPTY *
                 _i2c1_driver_isNACK
                     _mssp1_clearIRQ
 ---------------------------------------------------------------------------------
 (10) _mssp1_clearIRQ                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_TX_EMPTY                                     3     3      0     212
                                              0 COMMON     3     3      0
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                       _mssp1_setIRQ
                        _returnReset *
                         _returnStop *
 ---------------------------------------------------------------------------------
 (11) _mssp1_setIRQ                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_TX                                           3     3      0     234
                                              0 COMMON     3     3      0
           _do_I2C_SEND_RESTART_READ
          _do_I2C_SEND_RESTART_WRITE
                   _do_I2C_SEND_STOP
                 _i2c1_driver_isNACK
                        _returnReset *
                         _returnStop *
               i1_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (10) _i2c1_driver_isNACK                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _do_I2C_SEND_RESTART_WRITE                           0     0      0       0
              i1_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (11) _do_I2C_SEND_RESTART_READ                            0     0      0       0
              i1_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (10) _do_I2C_SEND_ADR_WRITE                               0     0      0      22
               i1_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (10) _do_I2C_SEND_ADR_READ                                0     0      0      22
               i1_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (11) i1_i2c1_driver_TXData                                1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_RX                                           3     3      0     212
                                              0 COMMON     3     3      0
             _do_I2C_DO_NACK_RESTART
                _do_I2C_DO_NACK_STOP
                _i2c1_driver_sendACK
                        _returnReset *
                         _returnStop *
            i1_i2c1_driver_getRXData
 ---------------------------------------------------------------------------------
 (11) i1_i2c1_driver_getRXData                             0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _do_I2C_DO_NACK_STOP                                 0     0      0       0
             i1_i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (11) _do_I2C_DO_NACK_RESTART                              0     0      0       0
             i1_i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (12) i1_i2c1_driver_sendNACK                              0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_RESET                                        0     0      0       0
               _i2c1_driver_resetBus
 ---------------------------------------------------------------------------------
 (11) _i2c1_driver_resetBus                                0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_RCEN                                         0     0      0       0
              i1_i2c1_driver_startRX
 ---------------------------------------------------------------------------------
 (11) i1_i2c1_driver_startRX                               0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_IDLE                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_DO_ADDRESS_NACK                              3     3      0     212
                                              0 COMMON     3     3      0
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                        _returnReset *
                         _returnStop *
 ---------------------------------------------------------------------------------
 (11) _returnStop                                          1     0      1       0
                                              0 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (11) _returnReset                                         1     0      1     212
                                              0 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (11) _do_I2C_SEND_STOP                                    0     0      0       0
                 i1_i2c1_driver_stop
 ---------------------------------------------------------------------------------
 (12) i1_i2c1_driver_stop                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _do_I2C_SEND_RESTART                                 0     0      0       0
              i1_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (12) i1_i2c1_driver_restart                               0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_DO_ACK                                       0     0      0       0
                _i2c1_driver_sendACK
 ---------------------------------------------------------------------------------
 (11) _i2c1_driver_sendACK                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _PIN_MANAGER_IOC                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (9) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Display_Name
     _SPI_Write
       _SPI2_Exchange8bit
     _strlen
   _SYSTEM_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PMD_Initialize
     _SPI2_Initialize
     _WDT_Initialize
   _enableGestureSensor
     _enablePower
       _setMode
         _getMode
           _wireReadDataByte
             _I2C_ReStart
               _i2c1_driver_restart
             _I2C_Read_Byte
               _i2c1_driver_getRXData
               _i2c1_driver_isBufferFull
               _i2c1_driver_startRX
             _I2C_Send_NACK
               _i2c1_driver_sendNACK
             _I2C_Start
               _i2c1_driver_start
             _I2C_Stop
               _i2c1_driver_stop
             _I2C_Write_Byte
               _i2c1_driver_TXData
         _wireWriteDataByte
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
     _resetGestureParameters
     _setGestureIntEnable
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureMode
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setLEDBoost
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setMode
       _getMode
         _wireReadDataByte
           _I2C_ReStart
             _i2c1_driver_restart
           _I2C_Read_Byte
             _i2c1_driver_getRXData
             _i2c1_driver_isBufferFull
             _i2c1_driver_startRX
           _I2C_Send_NACK
             _i2c1_driver_sendNACK
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _wireWriteDataByte
       _I2C_Start
         _i2c1_driver_start
       _I2C_Stop
         _i2c1_driver_stop
       _I2C_Write_Byte
         _i2c1_driver_TXData
   _handleGesture
     _Display_Name
       _SPI_Write
         _SPI2_Exchange8bit
       _strlen
     _readGesture
       _decodeGesture
       _getMode
         _wireReadDataByte
           _I2C_ReStart
             _i2c1_driver_restart
           _I2C_Read_Byte
             _i2c1_driver_getRXData
             _i2c1_driver_isBufferFull
             _i2c1_driver_startRX
           _I2C_Send_NACK
             _i2c1_driver_sendNACK
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
       _isGestureAvailable
         _wireReadDataByte
           _I2C_ReStart
             _i2c1_driver_restart
           _I2C_Read_Byte
             _i2c1_driver_getRXData
             _i2c1_driver_isBufferFull
             _i2c1_driver_startRX
           _I2C_Send_NACK
             _i2c1_driver_sendNACK
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
       _processGestureData
         ___awdiv
           ___wmul (ARG)
         ___wmul
       _resetGestureParameters
       _wireReadDataBlock
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
   _initialize
     _i2c1_driver_open
     _setAmbientLightGain
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureEnterThresh
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureExitThresh
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureGain
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureIntEnable
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureLEDDrive
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureWaitTime
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setLEDDrive
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setLightIntHighThreshold
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setLightIntLowThreshold
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setMode
       _getMode
         _wireReadDataByte
           _I2C_ReStart
             _i2c1_driver_restart
           _I2C_Read_Byte
             _i2c1_driver_getRXData
             _i2c1_driver_isBufferFull
             _i2c1_driver_startRX
           _I2C_Send_NACK
             _i2c1_driver_sendNACK
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setProxIntHighThresh
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setProxIntLowThresh
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setProximityGain
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _wireReadDataByte
       _I2C_ReStart
         _i2c1_driver_restart
       _I2C_Read_Byte
         _i2c1_driver_getRXData
         _i2c1_driver_isBufferFull
         _i2c1_driver_startRX
       _I2C_Send_NACK
         _i2c1_driver_sendNACK
       _I2C_Start
         _i2c1_driver_start
       _I2C_Stop
         _i2c1_driver_stop
       _I2C_Write_Byte
         _i2c1_driver_TXData
     _wireWriteDataByte
       _I2C_Start
         _i2c1_driver_start
       _I2C_Stop
         _i2c1_driver_stop
       _I2C_Write_Byte
         _i2c1_driver_TXData
   _isGestureAvailable
     _wireReadDataByte
       _I2C_ReStart
         _i2c1_driver_restart
       _I2C_Read_Byte
         _i2c1_driver_getRXData
         _i2c1_driver_isBufferFull
         _i2c1_driver_startRX
       _I2C_Send_NACK
         _i2c1_driver_sendNACK
       _I2C_Start
         _i2c1_driver_start
       _I2C_Stop
         _i2c1_driver_stop
       _I2C_Write_Byte
         _i2c1_driver_TXData

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _PIN_MANAGER_IOC *
   _i2c_ISR *
     _do_I2C_DO_ACK *
       _i2c1_driver_sendACK
     _do_I2C_DO_ADDRESS_NACK *
       _do_I2C_SEND_RESTART
         i1_i2c1_driver_restart
       _do_I2C_SEND_STOP
         i1_i2c1_driver_stop
       _returnReset *
       _returnStop *
     _do_I2C_DO_NACK_RESTART *
       i1_i2c1_driver_sendNACK
     _do_I2C_DO_NACK_STOP *
       i1_i2c1_driver_sendNACK
     _do_I2C_IDLE *
     _do_I2C_RCEN *
       i1_i2c1_driver_startRX
     _do_I2C_RESET *
       _i2c1_driver_resetBus
     _do_I2C_RX *
       _do_I2C_DO_NACK_RESTART
         i1_i2c1_driver_sendNACK
       _do_I2C_DO_NACK_STOP
         i1_i2c1_driver_sendNACK
       _i2c1_driver_sendACK
       _returnReset *
       _returnStop *
       i1_i2c1_driver_getRXData *
     _do_I2C_SEND_ADR_READ *
       i1_i2c1_driver_TXData
     _do_I2C_SEND_ADR_WRITE *
       i1_i2c1_driver_TXData
     _do_I2C_SEND_RESTART *
       i1_i2c1_driver_restart
     _do_I2C_SEND_RESTART_READ *
       i1_i2c1_driver_restart
     _do_I2C_SEND_RESTART_WRITE *
       i1_i2c1_driver_restart
     _do_I2C_SEND_STOP *
       i1_i2c1_driver_stop
     _do_I2C_TX *
       _do_I2C_SEND_RESTART_READ
         i1_i2c1_driver_restart
       _do_I2C_SEND_RESTART_WRITE
         i1_i2c1_driver_restart
       _do_I2C_SEND_STOP
         i1_i2c1_driver_stop
       _i2c1_driver_isNACK
       _returnReset *
       _returnStop *
       i1_i2c1_driver_TXData *
     _do_I2C_TX_EMPTY *
       _do_I2C_SEND_RESTART
         i1_i2c1_driver_restart
       _do_I2C_SEND_STOP
         i1_i2c1_driver_stop
       _mssp1_setIRQ
       _returnReset *
       _returnStop *
     _i2c1_driver_isNACK *
     _mssp1_clearIRQ *
   _i2c_busCollisionISR *
     _i2c1_driver_clearBusCollision

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     3C      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     42      42       7       82.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     40      4A       9       92.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      1D      11       36.3%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      44      13       85.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     149      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     149      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Mon Apr 01 17:08:04 2019

                          returnReset@p 0076                   ?_setGestureExitThresh 0076  
                    __size_of_I2C_Start 0003                             __CFG_CP$OFF 0000  
                          ___awdiv@sign 002C                    __size_of_do_I2C_IDLE 0005  
                   _do_I2C_SEND_RESTART 0A21                    __size_of_do_I2C_RCEN 0006  
                   ___wmul@multiplicand 0022                             __CFG_LVP$ON 0000  
                                   l526 0AE6                                     l654 0ECE  
                                   l931 023B        processGestureData@ud_ratio_first 0031  
                                   l908 0080                                     l950 02D6  
                                   l943 02B7                                     l935 0264  
                                   l937 0289                                     l954 02FF  
                                   l955 0317                                     l980 03B8  
                                   l992 0409                                     l976 039B  
                                   l988 03EC                            __CFG_CPD$OFF 0000  
                 __end_of_decodeGesture 04BC                    __size_of_I2C_ReStart 0003  
               __size_of_PMD_Initialize 0008                      I2C_Write_Byte@Byte 0023  
                 __size_of_do_I2C_RESET 0007                                     wreg 0009  
                    i1_i2c1_driver_stop 09E1                                    l1000 043F  
                                  l1012 048E                                    l1004 045C  
                                  l1016 04AB                                    l1243 0BCF  
                                  l1079 0BB3                                    l6001 0CAE  
                                  l6021 0B11                                    l6005 0CB0  
                                  l6103 07FC                                    l6031 0B24  
                                  l6121 0DF4                                    l5315 0AEB  
                                  l5341 0BC9                                    l5423 0B7C  
                                  l5503 0071                                    l5281 0BB6  
                                  l5433 0FBD                                    l5425 0B88  
                                  l5409 0AFE                                    l5361 078C  
                                  l5521 00D6                                    l6401 0749  
                                  l6049 0E26                                    l6139 0C6F  
                                  l6067 0E58                                    l5453 0FF0  
                                  l5445 0FD7                                    l5437 0FBF  
                                  l6149 0ACD                                    l6325 06D9  
                                  l5701 03B3                                    l5605 027D  
                                  l6413 0761                                    l6085 0C96  
                                  l5287 0AB9                                    l5455 0FF1  
                                  l5447 0FE4                                    l6343 06D7  
                                  l5367 0797                                    l5631 02D1  
                                  l5535 00F1                                    l5519 007C  
                                  l6415 077E                                    l6329 06DB  
                                  l5393 07CE                                    l5385 07BD  
                                  l5377 079F                                    l5609 0285  
                                  l5553 013B                                    l6409 0754  
                                  l6193 04CF                                    l6513 0D89  
                                  l5715 03E7                                    l5707 03C5  
                                  l5379 07AB                                    l5619 02AB  
                                  l5627 02B9                                    l5571 01EE  
                                  l6507 0D77                                    l5733 043A  
                                  l5725 0416                                    l5389 07C6  
                                  l5637 02FA                                    l5581 0213  
                                  l5573 01F1                                    l5549 00ED  
                                  l5901 0629                                    l6197 04D1  
                                  l5751 0489                                    l5743 0469  
                                  l5719 0404                                    l5671 0350  
                                  l5591 0236                                    l5583 0216  
                                  l5567 01DC                                    l5487 0F28  
                                  l5903 068A                                    l6391 0728  
                                  l5761 04B8                                    l5737 0457  
                                  l5681 0362                                    l5665 0344  
                                  l5577 0201                                    l5489 0F57  
                                  l5755 04A6                                    l5683 0364  
                                  l5675 0358                                    l5659 0338  
                                  l5499 006F                                    l5907 0693  
                                  l5677 035A                                    l5765 04BA  
                                  l5669 034E                                    l5597 025F  
                                  l5855 0EB1                                    l5687 036E  
                                  l5863 05E1                                    l6399 073B  
                                  l5697 0396                                    l5689 0374  
                                  l5881 05F8                                    l5873 05E5  
                                  l6673 076A                                    l5961 0B4A  
                                  l5867 0696                                    l5971 0B37  
                                  l5981 0CD5                                    l5889 061B  
                                  l5985 0CD7                                    STR_1 103D  
                                  STR_2 1030                                    STR_3 1020  
                                  STR_4 1049                                    STR_5 1054  
                                  _LATA 010C                                    _LATB 010D  
                                  _LATC 010E                                    u4115 07A2  
                                  u5005 047A                                    u5015 0497  
                                  u4135 07AC                                    u4055 0BD0  
                                  u5025 04B5                                    u4145 07B6  
                                  u4065 0BD5                                    u4234 0FD0  
                                  u4235 0FCF                                    u4155 07BE  
                                  u5115 0624                                    u4244 0FDC  
                                  u4245 0FDB                                    u5045 0EBB  
                                  u5125 0633                                    u5305 0DD5  
                                  u5145 0CF7                                    u5155 0D20  
                                  _PMD0 0911                                    u4605 0292  
                                  u4525 0227                                    u4365 008B  
                                  u4285 0F31                                    u5245 0E07  
                                  _PMD1 0912                                    _PMD2 0913  
                                  u4615 029E                                    u4535 0244  
                                  _PMD3 0914                                    _PMD4 0915  
                                  u4545 0250                                    u4465 01D5  
                                  u5265 0E39                                    _PMD5 0916  
                                  u4555 026D                                    u4475 01E6  
                                  u4725 0320                                    u4485 01FA  
                                  u4495 020B                                    u4905 03D8  
                                  u4665 02C2                                    u5705 0736  
                                  u4915 03F5                                    u4675 02DF  
                                  u4925 0413                                    u4685 02EB  
                                  u4855 0387                                    u4695 0308  
                                  u4865 03A4                                    u5817 069A  
                                  u4955 042B                                    u4875 03C2  
                                  u5827 06AC                                    u5837 0E99  
                                  u4965 0448                    ?_do_I2C_SEND_RESTART 0076  
                                  u5847 0B5B                                    u4975 0466  
                                  _WPUA 020C                                    _WPUB 020D  
                                  _WPUC 020E                            __CFG_WRT$OFF 0000  
                         __CFG_FCMEN$ON 0000       __size_of_do_I2C_SEND_RESTART_READ 0004  
                   ?i1_i2c1_driver_stop 0076               ?_do_I2C_SEND_RESTART_READ 0076  
                                  _main 0D63                                    _name 005C  
             __size_of_do_I2C_SEND_STOP 0004                  __size_of_do_I2C_DO_ACK 0004  
                                  fsr0h 0005                                    fsr1h 0007  
                                  indf0 0000                                    fsr0l 0004  
                                  indf1 0001                                    fsr1l 0006  
                                  btemp 007E                   ??_setGestureIntEnable 002A  
                      __end_of_I2C_Stop 0A11                           __CFG_BOREN$ON 0000  
               i1_i2c1_driver_getRXData 09E7                   ?_do_I2C_SEND_ADR_READ 0076  
                         __CFG_BORV$LOW 0000         ??_i2c1_driver_clearBusCollision 0076  
                                  start 002B                     I2C_Write_Byte@count 0024  
                         __CFG_CSWEN$ON 0000                           __CFG_MCLRE$ON 0000  
                       __end_of_i2c_ISR 0C4A                ??_do_I2C_DO_NACK_RESTART 0076  
                          ?_readGesture 004F                            _do_I2C_RESET 0A5F  
        __size_of_OSCILLATOR_Initialize 0008           __end_of_OSCILLATOR_Initialize 0A93  
                  ??i1_i2c1_driver_stop 0076                __end_of_i2c1_driver_open 0AB6  
                                 ?_main 0076                         __end_of___awdiv 07D3  
              __end_of_i2c1_driver_stop 0A0E                         ___awdiv@divisor 0026  
            __end_of_i2c1_driver_TXData 0A53                          __CFG_DEBUG$OFF 0000  
                                 i1l157 0F95                                   i1l173 0EEC  
                                 i1l253 0029                                   i1l245 0010  
                                 i1l248 001E                            ?_setLEDBoost 0076  
                       ___awdiv@counter 002B                            ?_setLEDDrive 0076  
                        _setGestureGain 0DF6                                   _OSCEN 091D  
                    wireReadDataBlock@j 0030                          _setGestureMode 0C4A  
                                 _TRISA 008C                                   _TRISB 008D  
                                 _TRISC 008E             __end_of_setProxIntLowThresh 0B4C  
                       __end_of_getMode 0AAC                   isGestureAvailable@val 002A  
               __end_of_PIN_MANAGER_IOC 09DC              __end_of_i2c1_driver_isNACK 0A83  
                __size_of_I2C_Read_Byte 000B                          _WDT_Initialize 0A35  
                                 _names 0160                        _b_i2c_error_flag 0072  
          __end_of_setProxIntHighThresh 0B39              ?_do_I2C_SEND_RESTART_WRITE 0076  
                                 _start 006F                   ??_do_I2C_SEND_RESTART 0076  
                       __end_of_setMode 1000                       __end_of_I2C_Start 0A0B  
                                 pclath 000A                 __size_of_mssp1_clearIRQ 0003  
                  i1_i2c1_driver_TXData 0A3D            __size_of_setAmbientLightGain 001E  
                ?_do_I2C_SEND_ADR_WRITE 0076                  __size_of_I2C_Send_NACK 0003  
                                 status 0003                                   wtemp0 007E  
                    __size_of_SPI_Write 0015                ?_setLightIntLowThreshold 002A  
            __end_of_setGestureLEDDrive 0E5A                   setGestureWaitTime@val 002C  
                         _fsmStateTable 1000                           _gesture_data_ 0220  
                       __initialization 002D                  ??_setGestureExitThresh 002A  
                     _SPI2_Exchange8bit 0ADE              processGestureData@lr_delta 004B  
                            _i2c_status 01A0                            __end_of_main 0D93  
                     _handleGestureFlag 0073              processGestureData@ud_delta 0049  
                    ?_SPI2_Exchange8bit 0076             ?_INTERRUPT_InterruptManager 0076  
                __end_of_setGestureGain 0E28               __size_of_setProximityGain 0029  
                __end_of_setGestureMode 0C71                           _do_I2C_DO_ACK 0A29  
                                ??_main 005C           __size_of_i2c1_driver_sendNACK 0004  
              __size_of_SPI2_Initialize 0007                     ??_SPI2_Exchange8bit 0020  
     __size_of_setLightIntHighThreshold 0027           __size_of_i2c1_driver_resetBus 0001  
                __end_of_WDT_Initialize 0A39                 ?_do_I2C_DO_ADDRESS_NACK 0076  
             ?_setLightIntHighThreshold 002A       setLightIntHighThreshold@threshold 002A  
                  __end_of_Display_Name 0ED2                    __size_of_enablePower 000E  
                      ___awdiv@dividend 0028                      _processGestureData 0061  
                                _ANSELA 018C                                  _ANSELB 018D  
                                _ANSELC 018E                      __CFG_RSTOSC$HFINT1 0000  
          setProxIntLowThresh@threshold 002B                   ?i1_i2c1_driver_TXData 0076  
                                _RC2PPS 0EA2                                  _RB5PPS 0E9D  
                                _RB6PPS 0E9E                                  _RB7PPS 0E9F  
                                _ODCONA 028C                                  _ODCONB 028D  
                                _ODCONC 028E                                  i1l4221 0EEE  
                                i1l4231 0EF4                                  i1l4241 0D96  
                                i1l4225 0EF1                                  i1l4251 0D9D  
                                i1l4155 0D3F                                  i1l4245 0D99  
                                i1l4165 0D45                                  i1l4181 0F6B  
                                i1l4159 0D42                                  i1l4191 0F71  
                                i1l4257 0DA0                                  i1l4185 0F6E  
                                i1l4177 0F68                                  i1l4199 0FAF  
                                i1l4667 0C34               ??i1_i2c1_driver_getRXData 0076  
                                i1l6681 0DB5                                  i1l6675 0F09  
                                i1l6677 0F87                                  i1l6679 0D5A  
                      _wireReadDataByte 0C00                                  _OSCFRQ 091F  
               ?_resetGestureParameters 0076                  ??_do_I2C_SEND_ADR_READ 0076  
                                _WDTCON 0097                               ??_i2c_ISR 0079  
                   ?_processGestureData 0076                       _gesture_lr_delta_ 0068  
                        __CFG_PWRTE$OFF 0000           setProxIntHighThresh@threshold 002B  
             __end_of_SPI2_Exchange8bit 0AED                       _gesture_lr_count_ 0064  
                   wireReadDataByte@reg 0027                   _i2c1_driver_getRXData 09FC  
                   wireReadDataByte@val 0028                       _gesture_ud_delta_ 006A  
           __end_of_do_I2C_DO_NACK_STOP 0A31                           _I2C_Read_Byte 0AB6  
            __end_of_isGestureAvailable 0B00                       _gesture_ud_count_ 0066  
                                ___wmul 0BC6                               ??___awdiv 002A  
 __end_of_i2c1_driver_clearBusCollision 09F3  __size_of_i2c1_driver_clearBusCollision 0003  
         _i2c1_driver_clearBusCollision 09F0              __end_of_setGestureWaitTime 0C98  
                        __CFG_STVREN$ON 0000         __size_of_do_I2C_DO_NACK_RESTART 0004  
                                _button 0075                        ___awdiv@quotient 002D  
                        ?_do_I2C_DO_ACK 0076                         ?_setGestureGain 0076  
                         _I2C_Send_NACK 0A02                               ??_getMode 0029  
                       ?_setGestureMode 0076                                  _strlen 0B77  
               ??_setGestureEnterThresh 002A                    ??_processGestureData 002F  
                     __end_of_SPI_Write 0B61             __end_of_i2c1_driver_sendACK 0A15  
                        _PMD_Initialize 0A93          __end_of_do_I2C_DO_ADDRESS_NACK 0D63  
                             ?_I2C_Stop 0076                      Display_Name@length 0028  
                             ??_setMode 002C                         ?_WDT_Initialize 0076  
           __end_of_i2c1_driver_restart 09F9                            ?_returnReset 0076  
                     readGesture@motion 0053             __end_of_i2c1_driver_startRX 0A02  
                      ?_PIN_MANAGER_IOC 0076          __end_of_resetGestureParameters 0B77  
                     _SYSTEM_Initialize 0ACF                 __end_of__initialization 005D  
                      _do_I2C_SEND_STOP 0A25                      __size_of_do_I2C_RX 0046  
                    __size_of_do_I2C_TX 004F                      ?_SYSTEM_Initialize 0076  
                setGestureWaitTime@time 002B                __size_of_do_I2C_TX_EMPTY 0031  
                        ?_I2C_Read_Byte 0076                          __pcstackCOMMON 0076  
                          __pidataBANK0 09DD                            __pidataBANK2 0A9B  
                   ??_SYSTEM_Initialize 0020                   i1i2c1_driver_TXData@d 0076  
                  _setProxIntHighThresh 0B26                          _gesture_state_ 005E  
                        ?_I2C_Send_NACK 0076                   i1_i2c1_driver_restart 09DE  
                __end_of_PMD_Initialize 0A9B                   i1_i2c1_driver_startRX 09E4  
                  __size_of_readGesture 00F1                   __end_of_handleGesture 0781  
     __size_of_i2c1_driver_isBufferFull 0007                              ??_I2C_Stop 0020  
             ?_i2c1_driver_isBufferFull 0076                      _gesture_far_count_ 0060  
                  __size_of_setLEDBoost 0032                    __size_of_setLEDDrive 0029  
                _do_I2C_DO_NACK_RESTART 0A31                  ??i1_i2c1_driver_TXData 0076  
             __end_of_SYSTEM_Initialize 0ADE                       ??_SPI2_Initialize 0020  
                        _mssp1_clearIRQ 09ED                              __pbssBANK0 005C  
                            __pbssBANK2 0168                              __pbssBANK3 01A0  
                            __pbssBANK4 0220                    wireWriteDataByte@reg 0029  
                  wireWriteDataByte@val 0026                     getMode@enable_value 002A  
              ??i1_i2c1_driver_sendNACK 0076                  ?_i2c1_driver_getRXData 0076  
            __size_of_SPI2_Exchange8bit 000F            __size_of_i2c_busCollisionISR 0003  
                            __pmaintext 0D63                           ??_do_I2C_IDLE 0076  
                         ??_do_I2C_RCEN 0076                 setGestureLEDDrive@drive 002D  
                               ?___wmul 0020                         __CFG_PPS1WAY$ON 0000  
                       ??_do_I2C_DO_ACK 0076            __size_of_enableGestureSensor 0064  
                            __pintentry 0004                   ?_setProxIntHighThresh 0076  
               __size_of_I2C_Write_Byte 001C                           ??_I2C_ReStart 0020  
                      _setProximityGain 0D0F                             setMode@mode 002F  
                       ?_PMD_Initialize 0076                     _setAmbientLightGain 0BE2  
                 __size_of_Display_Name 0041          ?_i2c1_driver_clearBusCollision 0076  
                               ?_strlen 0020                       ?_i2c1_driver_open 0076  
                     __end_of_do_I2C_RX 0F18                       __end_of_do_I2C_TX 0FB1  
                     ?_i2c1_driver_stop 0076                       _wireReadDataBlock 0F18  
                    ??_i2c1_driver_open 0020                      ??_i2c1_driver_stop 0020  
                               _OSCCON1 0919                                 _OSCCON3 091B  
                         ?_mssp1_setIRQ 0076                                 _OSCTUNE 091E  
                  wireReadDataBlock@len 0028                    wireReadDataBlock@reg 002F  
                  wireReadDataBlock@val 0026                                 _SSP1ADD 0212  
                               _SSP2ADD 021A                                 _SLRCONA 030C  
                               _SLRCONB 030D                                 _SLRCONC 030E  
                               _SSP1BUF 0211                  __end_of_mssp1_clearIRQ 09F0  
                               _SSP2BUF 0219                      ?_wireReadDataBlock 0026  
                               _SSP1MSK 0213                       SPI_Write@incoming 0022  
           __end_of_setGestureIntEnable 07FE                 ??_do_I2C_SEND_ADR_WRITE 0076  
       processGestureData@lr_ratio_last 0037             ??_do_I2C_SEND_RESTART_WRITE 0076  
                          readGesture@i 0059                      _i2c1_driver_TXData 0A4D  
                  ?_setAmbientLightGain 0076                      _i2c1_driver_i2cISR 006C  
                   ??_wireReadDataBlock 002A                                 _i2c_ISR 0C24  
                             _I2C_Start 0A08                         ??_I2C_Read_Byte 0021  
                         setMode@enable 002B                      _i2c1_driver_isNACK 0A7B  
                __size_of_decodeGesture 0190                     ?_i2c1_driver_TXData 0076  
                          _Display_Name 0E91                         ??_I2C_Send_NACK 0020  
                               ___awdiv 0781                         __size_of___wmul 001C  
                ?i1_i2c1_driver_restart 0076                       ??_do_I2C_TX_EMPTY 0076  
                   ?_i2c1_driver_isNACK 0076                  ?i1_i2c1_driver_startRX 0076  
              __end_of_wireReadDataByte 0C24                              _initialize 04BC  
                               _getMode 0AA3        __size_of_setLightIntLowThreshold 0027  
                    _setGestureLEDDrive 0E28                                 __ptext1 04BC  
                               __ptext2 0D0F                                 __ptext3 0B39  
                               __ptext4 0B26                                 __ptext5 0CBF  
                               __ptext6 0C98                                 __ptext7 0CE6  
                               __ptext8 0C71                                 __ptext9 0E28  
           __size_ofi1_i2c1_driver_stop 0003                     __end_of_do_I2C_IDLE 0A47  
             __end_of_wireReadDataBlock 0F62                     __end_of_do_I2C_RCEN 0A4D  
                       __size_of_strlen 0018                   _OSCILLATOR_Initialize 0A8B  
           __end_of_do_I2C_SEND_RESTART 0A25                          ??_mssp1_setIRQ 0076  
                  ??_i2c1_driver_TXData 0020                                 _setMode 0FB1  
              ??_PIN_MANAGER_Initialize 0020                     __end_of_I2C_ReStart 09FC  
                   ?_setGestureLEDDrive 0076                                 _printed 006E  
                       ?_mssp1_clearIRQ 0076                _do_I2C_SEND_RESTART_READ 0A19  
            __size_of_SYSTEM_Initialize 000F                                 clrloop0 0A54  
                  __size_of_returnReset 0002                    end_of_initialization 005D  
                  ??_i2c1_driver_isNACK 0076                   ??_setAmbientLightGain 002A  
          __size_of_setProxIntLowThresh 0013                                 init_ram 0A59  
          __end_of_i2c1_driver_sendNACK 0A3D                                 initloop 0A5A  
       __size_ofi1_i2c1_driver_sendNACK 0004                              ?_I2C_Start 0076  
         enableGestureSensor@interrupts 0031            __end_of_i2c1_driver_resetBus 09DD  
         setGestureExitThresh@threshold 002B                    ??_setGestureLEDDrive 002A  
                    readGesture@gstatus 0055                            initialize@id 0031  
                      ??_setGestureGain 002A                  ??_setProxIntHighThresh 002A  
                      ??_setGestureMode 002A               _do_I2C_SEND_RESTART_WRITE 0A1D  
                   Display_Name@string1 0025           __size_of_setGestureExitThresh 0013  
                               strlen@a 0023                                 strlen@s 0020  
                      ??_WDT_Initialize 0020                       _wireWriteDataByte 0B8F  
                            _returnStop 0002                __end_of_do_I2C_SEND_STOP 0A29  
                         ??_enablePower 0030                      ?_wireWriteDataByte 0026  
       setLightIntHighThreshold@val_low 002D          __size_of_setGestureEnterThresh 0013  
         __end_of_setGestureEnterThresh 0B13                           _decodeGesture 032C  
                    _isGestureAvailable 0AED                      _setGestureWaitTime 0C71  
                             _SPI_Write 0B4C                       __size_of_I2C_Stop 0003  
                           returnStop@p 0076                     ??_wireWriteDataByte 0029  
                      __CFG_FEXTOSC$OFF 0000         processGestureData@ud_ratio_last 0035  
                   ?_isGestureAvailable 0076                     ?_setGestureWaitTime 0076  
                 SPI2_Exchange8bit@data 0020           __size_of_do_I2C_SEND_ADR_READ 0008  
                 setProximityGain@drive 002D        __end_of_i2c1_driver_isBufferFull 0A7B  
                           _do_I2C_IDLE 0A42                             _do_I2C_RCEN 0A47  
             __end_of_wireWriteDataByte 0BAA                          _I2C_Write_Byte 0BAA  
                  ??_isGestureAvailable 0029                          __end_of___wmul 0BE2  
                  ??_setGestureWaitTime 002A                             ?_initialize 0076  
                           _I2C_ReStart 09F9                  i1_i2c1_driver_sendNACK 0A15  
                ?_OSCILLATOR_Initialize 0076                _setLightIntHighThreshold 0C98  
            __size_of_wireReadDataBlock 004A                         _gesture_motion_ 0168  
                       _SPI2_Initialize 0A6D            __size_of_do_I2C_DO_NACK_STOP 0004  
           __size_of_processGestureData 02CB                          ?_decodeGesture 0076  
                        __end_of_strlen 0B8F                 ?_do_I2C_DO_NACK_RESTART 0076  
                   start_initialization 002D                      setGestureGain@gain 002D  
                   _i2c_busCollisionISR 09F3         __size_of_PIN_MANAGER_Initialize 0037  
              ?i1_i2c1_driver_getRXData 0076                              ?_SPI_Write 0076  
      setLightIntHighThreshold@val_high 002E                     _enableGestureSensor 06C3  
                   __end_of_enablePower 0ACF            __size_of_i2c1_driver_sendACK 0004  
               ??_i2c1_driver_getRXData 0020                __end_of_setProximityGain 0D38  
          __size_of_i2c1_driver_restart 0003                processGestureData@d_last 0042  
          __size_of_i2c1_driver_startRX 0003                processGestureData@l_last 0043  
                           ??_I2C_Start 0020                processGestureData@r_last 0044  
              __size_of_PIN_MANAGER_IOC 0001                processGestureData@u_last 0041  
               _processGestureData$1252 0039                 _processGestureData$1253 003B  
               _processGestureData$1254 003D                 _processGestureData$1255 003F  
                  ?_i2c_busCollisionISR 0076                        __CFG_LPBOREN$OFF 0000  
                  __end_of_mssp1_setIRQ 09ED                  __end_of_I2C_Write_Byte 0BC6  
                      ??_PMD_Initialize 0020         setLightIntLowThreshold@val_high 002E  
                              ??___wmul 0024                    ?_enableGestureSensor 0076  
                         ??_readGesture 0051                           ?_do_I2C_RESET 0076  
                           __pdataBANK0 006F                             __pdataBANK2 0160  
                    setGestureMode@mode 002B                 _setLightIntLowThreshold 0CBF  
             setGestureIntEnable@enable 002C                setAmbientLightGain@drive 002B  
                           ?_returnStop 0076                                ??_strlen 0022  
        __end_of_do_I2C_DO_NACK_RESTART 0A35                           ??_setLEDBoost 002A  
                         ??_setLEDDrive 002A                    _i2c1_driver_sendNACK 0A39  
                setGestureIntEnable@val 002B                             __pbssCOMMON 0070  
                             ___latbits 0002                               _adcResult 0074  
                  _i2c1_driver_resetBus 09DC                           __pcstackBANK0 0020  
                         __pcstackBANK1 00A0                           __pcstackBANK2 0120  
                             _do_I2C_RX 0ED2                               _do_I2C_TX 0F62  
        __size_of_do_I2C_SEND_ADR_WRITE 0007           __size_ofi1_i2c1_driver_TXData 0005  
         __end_of_do_I2C_SEND_ADR_WRITE 0A6D                   readGesture@fifo_data2 00A0  
             __size_of_i2c1_driver_open 000A                   readGesture@fifo_level 0058  
             __size_of_i2c1_driver_stop 0003                                ?_i2c_ISR 0076  
                   __size_of_initialize 0116                         _do_I2C_TX_EMPTY 0D93  
                __size_of_handleGesture 005A                   ??_i2c_busCollisionISR 0076  
                 __end_of_fsmStateTable 1020                  _PIN_MANAGER_Initialize 0E5A  
               ??i1_i2c1_driver_restart 0076                 ??i1_i2c1_driver_startRX 0076  
                       ?_I2C_Write_Byte 0076                   ??_enableGestureSensor 0030  
               __end_of_SPI2_Initialize 0A74                          ??_do_I2C_RESET 0076  
                              ?___awdiv 0026              __size_of_wireWriteDataByte 001B  
              ??_do_I2C_DO_ADDRESS_NACK 0076             _i2c1_driver_busCollisionISR 0070  
                   _setProxIntLowThresh 0B39                   __end_of_do_I2C_DO_ACK 0A2D  
          ??_INTERRUPT_InterruptManager 007C                _i2c1_driver_isBufferFull 0A74  
                              ?_getMode 0076                         ??_decodeGesture 0020  
                     ?_wireReadDataByte 0076              ??_do_I2C_SEND_RESTART_READ 0076  
                 ?_i2c1_driver_sendNACK 0076         __end_ofi1_i2c1_driver_getRXData 09EA  
                      ??_mssp1_clearIRQ 0076                             _enablePower 0AC1  
                    ??_wireReadDataByte 0026                     __end_of_readGesture 06C3  
                 ?_i2c1_driver_resetBus 0076      __size_of_do_I2C_SEND_RESTART_WRITE 0004  
                              _I2C_Stop 0A0E                ??_resetGestureParameters 0020  
                              ?_setMode 002B                              ?_do_I2C_RX 0076  
                            ?_do_I2C_TX 0076                        __CFG_WDTE$SWDTEN 0000  
                           ??_SPI_Write 0021                       _i2c1_driver_start 0A05  
                   __end_of_setLEDBoost 0DF6                     __end_of_setLEDDrive 0D0F  
                  ?_setProxIntLowThresh 0076                   readGesture@bytes_read 0056  
                    ?_i2c1_driver_start 0076                          ___wmul@product 0024  
                              _LATCbits 010E                     __size_of_returnStop 0002  
                             clear_ram0 0A53                                _PIE0bits 0090  
                              _PIE1bits 0091            __size_of_setGestureIntEnable 002B  
                   _gesture_near_count_ 0062                     ??_i2c1_driver_start 0020  
   __size_of_INTERRUPT_InterruptManager 0027                                _PIR0bits 0010  
                              _PIR1bits 0011                   __end_of_I2C_Read_Byte 0AC1  
             ??_setLightIntLowThreshold 002C                                _SSP1CON1 0215  
                              _SSP1CON2 0216                                _SSP2CON1 021D  
                        setLEDBoost@val 002C                                _SSP1STAT 0214  
                              _SSP2STAT 021C              __end_ofi1_i2c1_driver_stop 09E4  
                     ??_PIN_MANAGER_IOC 0076                   __end_of_I2C_Send_NACK 0A05  
                        setLEDDrive@val 002C        processGestureData@lr_ratio_first 0033  
                     ___wmul@multiplier 0020                       ?_do_I2C_SEND_STOP 0076  
             processGestureData@d_first 0046                           _handleGesture 0727  
             __end_of_i2c1_driver_start 0A08                           ??_returnReset 0077  
                    ??_do_I2C_SEND_STOP 0076             __size_of_i2c1_driver_TXData 0006  
           __end_of_setAmbientLightGain 0C00               processGestureData@l_first 0047  
     __end_of_do_I2C_SEND_RESTART_WRITE 0A21                 __end_of_do_I2C_TX_EMPTY 0DC4  
          __end_of_setGestureExitThresh 0B26               processGestureData@r_first 0048  
             processGestureData@u_first 0045                   ??_setProxIntLowThresh 002A  
          __size_of_do_I2C_SEND_RESTART 0004             __size_of_i2c1_driver_isNACK 0008  
                     setGestureGain@val 002C                   __size_of_mssp1_setIRQ 0003  
                   _do_I2C_DO_NACK_STOP 0A2D                        __size_of_i2c_ISR 0026  
            ??_setLightIntHighThreshold 002C             __size_of_setGestureLEDDrive 0032  
                        setMode@reg_val 002E          setLightIntLowThreshold@val_low 002D  
                          ?_do_I2C_IDLE 0076                            ?_do_I2C_RCEN 0076  
                     setGestureMode@val 002C                        ?_SPI2_Initialize 0076  
               ?i1_i2c1_driver_sendNACK 0076                 ??_OSCILLATOR_Initialize 0020  
                   _i2c1_driver_sendACK 0A11                        __size_of___awdiv 0052  
         __size_of_setProxIntHighThresh 0013                             _readGesture 05D2  
       __size_of_do_I2C_DO_ADDRESS_NACK 002B                     i2c1_driver_TXData@d 0020  
                ??_i2c1_driver_sendNACK 0020                            ??_initialize 0030  
                          ?_I2C_ReStart 0076                     _i2c1_driver_restart 09F6  
      setLightIntLowThreshold@threshold 002A                    ?_do_I2C_DO_NACK_STOP 0076  
                   _i2c1_driver_startRX 09FF                          ?_handleGesture 0076  
          __end_of_do_I2C_SEND_ADR_READ 0A8B                        __size_of_getMode 0009  
                ??_i2c1_driver_resetBus 0076                    readGesture@fifo_data 0120  
                           _setLEDBoost 0DC4                             _setLEDDrive 0CE6  
       __size_of_resetGestureParameters 0016                            _mssp1_setIRQ 09EA  
       __end_of_setLightIntLowThreshold 0CE6                             ??_do_I2C_RX 0076  
                           ??_do_I2C_TX 0076                   setGestureLEDDrive@val 002C  
                      __size_of_setMode 004F                                __ptext10 0DF6  
                              __ptext11 0B13                                __ptext20 0781  
                              __ptext12 0B00                                __ptext21 0AED  
                              __ptext13 0BE2                                __ptext30 07D3  
                              __ptext22 032C                                __ptext14 0AAC  
                              __ptext31 0B61                                __ptext23 0E91  
                              __ptext15 0727                                __ptext40 0A0B  
                              __ptext32 0AC1                                __ptext24 0B77  
                              __ptext16 05D2                                __ptext41 0A08  
                              __ptext33 0FB1                                __ptext25 0B4C  
                              __ptext17 0F18                                __ptext50 09F6  
                              __ptext42 0A05                                __ptext34 0B8F  
                              __ptext26 0ADE                                __ptext18 0061  
                              __ptext51 0ACF                                __ptext43 0A02  
                              __ptext35 0AA3                                __ptext27 06C3  
                              __ptext19 0BC6                                __ptext60 0C24  
                              __ptext52 0A35                                __ptext44 0A39  
                              __ptext36 0C00                                __ptext28 0DC4  
                              __ptext61 09ED                                __ptext53 0A6D  
                              __ptext45 0AB6                                __ptext37 0BAA  
                              __ptext29 0C4A                                __ptext70 0A83  
                              __ptext62 0ED2                                __ptext54 0A93  
                              __ptext46 09FF                                __ptext38 0A4D  
                              __ptext71 0A25                                __ptext63 0F62  
                              __ptext55 0E5A                                __ptext47 0A74  
                              __ptext39 0A0E                                __ptext80 0A3D  
                              __ptext72 0A21                                __ptext64 0D38  
                              __ptext56 0A8B                                __ptext48 09FC  
                              __ptext81 09E7                                __ptext73 0A1D  
                              __ptext65 0A31                                __ptext49 09F9  
                              __ptext90 09DB                                __ptext82 0A15  
                              __ptext74 0A19                                __ptext66 0A2D  
                              __ptext58 09F3                                __ptext83 09DC  
                              __ptext75 0A42                                __ptext67 0A29  
                              __ptext59 09F0                                __ptext84 09E4  
                              __ptext76 0A5F                                __ptext68 0A47  
                              __ptext85 07FE                                __ptext77 0D93  
                              __ptext69 0A66                                __ptext86 0002  
                              __ptext78 09EA                                __ptext87 09E1  
                              __ptext79 0A7B                                __ptext88 09DE  
                              __ptext89 0A11                   _setGestureEnterThresh 0B00  
                          _SSP1CON1bits 0215                            _SSP1CON2bits 0216  
        setGestureEnterThresh@threshold 002B                            _SSP2CON1bits 021D  
                  ?_i2c1_driver_sendACK 0076                    __end_of_do_I2C_RESET 0A66  
                  ?_i2c1_driver_restart 0076                     __end_of_returnReset 0800  
                      _i2c1_driver_open 0AAC                        _i2c1_driver_stop 0A0B  
                         __size_of_main 0030                    ?_i2c1_driver_startRX 0076  
                     ?_setProximityGain 0076          __size_of_i2c1_driver_getRXData 0003  
         __end_of_i2c1_driver_getRXData 09FF                      __end_of_initialize 05D2  
                    ??_setProximityGain 002A        __size_ofi1_i2c1_driver_getRXData 0003  
                    _decodeGesture$1260 0028                      _decodeGesture$1261 002A  
                    _decodeGesture$1262 002C                      _decodeGesture$1263 002E  
                    _decodeGesture$1264 0030                      _decodeGesture$1257 0022  
                    _decodeGesture$1258 0024                      _decodeGesture$1259 0026  
        __end_ofi1_i2c1_driver_sendNACK 0A19                                int$flags 007E  
    __end_of_INTERRUPT_InterruptManager 002B              _INTERRUPT_InterruptManager 0004  
                          _SSP1STATbits 0214             __size_of_isGestureAvailable 0013  
                         Display_Name@i 002A                     setProximityGain@val 002C  
      __end_of_do_I2C_SEND_RESTART_READ 0A1D             __size_of_setGestureWaitTime 0027  
            __end_of_processGestureData 032C                            ??_returnStop 0077  
                          _SSP2STATbits 021C                   ??_do_I2C_DO_NACK_STOP 0076  
               __size_of_setGestureGain 0032                              _INTCONbits 000B  
               __size_of_setGestureMode 0027              __size_of_i2c1_driver_start 0003  
                setAmbientLightGain@val 002C                   ??_i2c1_driver_sendACK 0076  
                      ?_do_I2C_TX_EMPTY 0076                 __size_of_WDT_Initialize 0004  
                _do_I2C_DO_ADDRESS_NACK 0D38                                intlevel1 0000  
                 ??_i2c1_driver_restart 0020                   ??_i2c1_driver_startRX 0020  
               ?_PIN_MANAGER_Initialize 0076                        ??_I2C_Write_Byte 0021  
                     __CFG_CLKOUTEN$OFF 0000                      __end_of_returnStop 0004  
                _resetGestureParameters 0B61              ??_i2c1_driver_isBufferFull 0020  
                         ?_Display_Name 0025          __size_ofi1_i2c1_driver_restart 0003  
         __end_ofi1_i2c1_driver_restart 09E1          __size_ofi1_i2c1_driver_startRX 0003  
          __end_ofi1_i2c1_driver_TXData 0A42           __end_ofi1_i2c1_driver_startRX 09E7  
                  _setGestureExitThresh 0B13                         ??_handleGesture 005B  
                         __pstringtext1 1000                           __pstringtext2 1030  
                         __pstringtext3 103D                           __pstringtext4 1049  
                         __pstringtext5 1054                           __pstringtext6 0000  
                            _SSP1DATPPS 0E21                            ?_enablePower 0076  
                            _SSP2DATPPS 0E1E                              _SSP1CLKPPS 0E20  
                   _setGestureIntEnable 07D3                              _SSP2CLKPPS 0E1D  
                      setLEDBoost@boost 002D                  ?_setGestureEnterThresh 0076  
                           _returnReset 07FE          __end_of_PIN_MANAGER_Initialize 0E91  
           __end_of_i2c_busCollisionISR 09F6               __size_of_wireReadDataByte 0024  
                      setLEDDrive@drive 002D                     processGestureData@i 004D  
                       _PIN_MANAGER_IOC 09DB             __end_of_enableGestureSensor 0727  
                 _do_I2C_SEND_ADR_WRITE 0A66                    ?_setGestureIntEnable 0076  
                  _do_I2C_SEND_ADR_READ 0A83        __end_of_setLightIntHighThreshold 0CBF  
                        ??_Display_Name 0027  
