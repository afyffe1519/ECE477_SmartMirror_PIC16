

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Sun Mar 31 15:44:45 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F18345
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	stringtext2,global,class=STRCODE,delta=2
     7                           	psect	stringtext3,global,class=STRCODE,delta=2
     8                           	psect	stringtext4,global,class=STRCODE,delta=2
     9                           	psect	stringtext5,global,class=STRCODE,delta=2
    10                           	psect	stringtext6,global,class=STRCODE,delta=2
    11                           	psect	cinit,global,class=CODE,merge=1,delta=2
    12                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    17                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    18                           	psect	clrtext,global,class=CODE,delta=2
    19                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    20                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    21                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    22                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    23                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    24                           	psect	text1,local,class=CODE,merge=1,delta=2
    25                           	psect	text2,local,class=CODE,merge=1,delta=2
    26                           	psect	text3,local,class=CODE,merge=1,delta=2
    27                           	psect	text4,local,class=CODE,merge=1,delta=2
    28                           	psect	text5,local,class=CODE,merge=1,delta=2
    29                           	psect	text6,local,class=CODE,merge=1,delta=2
    30                           	psect	text7,local,class=CODE,merge=1,delta=2
    31                           	psect	text8,local,class=CODE,merge=1,delta=2
    32                           	psect	text9,local,class=CODE,merge=1,delta=2
    33                           	psect	text10,local,class=CODE,merge=1,delta=2
    34                           	psect	text11,local,class=CODE,merge=1,delta=2
    35                           	psect	text12,local,class=CODE,merge=1,delta=2
    36                           	psect	text13,local,class=CODE,merge=1,delta=2
    37                           	psect	text14,local,class=CODE,merge=1,delta=2
    38                           	psect	text15,local,class=CODE,merge=1,delta=2
    39                           	psect	text16,local,class=CODE,merge=1,delta=2
    40                           	psect	text17,local,class=CODE,merge=1,delta=2
    41                           	psect	text18,local,class=CODE,merge=1,delta=2
    42                           	psect	text19,local,class=CODE,merge=1,delta=2,group=1
    43                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    44                           	psect	text21,local,class=CODE,merge=1,delta=2
    45                           	psect	text22,local,class=CODE,merge=1,delta=2
    46                           	psect	text23,local,class=CODE,merge=1,delta=2
    47                           	psect	text24,local,class=CODE,merge=1,delta=2
    48                           	psect	text25,local,class=CODE,merge=1,delta=2,group=2
    49                           	psect	text26,local,class=CODE,merge=1,delta=2
    50                           	psect	text27,local,class=CODE,merge=1,delta=2
    51                           	psect	text28,local,class=CODE,merge=1,delta=2
    52                           	psect	text29,local,class=CODE,merge=1,delta=2
    53                           	psect	text30,local,class=CODE,merge=1,delta=2
    54                           	psect	text31,local,class=CODE,merge=1,delta=2
    55                           	psect	text32,local,class=CODE,merge=1,delta=2
    56                           	psect	text33,local,class=CODE,merge=1,delta=2
    57                           	psect	text34,local,class=CODE,merge=1,delta=2
    58                           	psect	text35,local,class=CODE,merge=1,delta=2
    59                           	psect	text36,local,class=CODE,merge=1,delta=2
    60                           	psect	text37,local,class=CODE,merge=1,delta=2
    61                           	psect	text38,local,class=CODE,merge=1,delta=2
    62                           	psect	text39,local,class=CODE,merge=1,delta=2
    63                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    64                           	psect	text41,local,class=CODE,merge=1,delta=2
    65                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    66                           	psect	text43,local,class=CODE,merge=1,delta=2
    67                           	psect	text44,local,class=CODE,merge=1,inline,delta=2
    68                           	psect	text45,local,class=CODE,merge=1,delta=2
    69                           	psect	text46,local,class=CODE,merge=1,inline,delta=2
    70                           	psect	text47,local,class=CODE,merge=1,delta=2
    71                           	psect	text48,local,class=CODE,merge=1,inline,delta=2
    72                           	psect	text49,local,class=CODE,merge=1,inline,delta=2
    73                           	psect	text50,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text51,local,class=CODE,merge=1,delta=2
    75                           	psect	text52,local,class=CODE,merge=1,inline,delta=2
    76                           	psect	text53,local,class=CODE,merge=1,delta=2
    77                           	psect	text54,local,class=CODE,merge=1,delta=2
    78                           	psect	text55,local,class=CODE,merge=1,delta=2
    79                           	psect	text56,local,class=CODE,merge=1,delta=2
    80                           	psect	text57,local,class=CODE,merge=1,delta=2
    81                           	psect	text58,local,class=CODE,merge=1,delta=2
    82                           	psect	intentry,global,class=CODE,delta=2
    83                           	psect	text60,local,class=CODE,merge=1,delta=2
    84                           	psect	text61,local,class=CODE,merge=1,inline,delta=2
    85                           	psect	text62,local,class=CODE,merge=1,delta=2
    86                           	psect	text63,local,class=CODE,merge=1,inline,delta=2
    87                           	psect	text64,local,class=CODE,merge=1,delta=2
    88                           	psect	text65,local,class=CODE,merge=1,delta=2
    89                           	psect	text66,local,class=CODE,merge=1,delta=2
    90                           	psect	text67,local,class=CODE,merge=1,delta=2
    91                           	psect	text68,local,class=CODE,merge=1,delta=2
    92                           	psect	text69,local,class=CODE,merge=1,delta=2
    93                           	psect	text70,local,class=CODE,merge=1,delta=2
    94                           	psect	text71,local,class=CODE,merge=1,delta=2
    95                           	psect	text72,local,class=CODE,merge=1,delta=2
    96                           	psect	text73,local,class=CODE,merge=1,delta=2
    97                           	psect	text74,local,class=CODE,merge=1,delta=2
    98                           	psect	text75,local,class=CODE,merge=1,delta=2
    99                           	psect	text76,local,class=CODE,merge=1,delta=2
   100                           	psect	text77,local,class=CODE,merge=1,delta=2
   101                           	psect	text78,local,class=CODE,merge=1,delta=2
   102                           	psect	text79,local,class=CODE,merge=1,delta=2
   103                           	psect	text80,local,class=CODE,merge=1,inline,delta=2
   104                           	psect	text81,local,class=CODE,merge=1,inline,delta=2
   105                           	psect	text82,local,class=CODE,merge=1,inline,delta=2
   106                           	psect	text83,local,class=CODE,merge=1,inline,delta=2
   107                           	psect	text84,local,class=CODE,merge=1,inline,delta=2
   108                           	psect	text85,local,class=CODE,merge=1,inline,delta=2
   109                           	psect	text86,local,class=CODE,merge=1,inline,delta=2
   110                           	psect	text87,local,class=CODE,merge=1,delta=2
   111                           	psect	text88,local,class=CODE,merge=1,delta=2
   112                           	psect	text89,local,class=CODE,merge=1,inline,delta=2
   113                           	psect	text90,local,class=CODE,merge=1,inline,delta=2
   114                           	psect	text91,local,class=CODE,merge=1,inline,delta=2
   115                           	psect	text92,local,class=CODE,merge=1,delta=2
   116                           	dabs	1,0x7E,2
   117  0000                     
   118                           ; Version 2.05
   119                           ; Generated 20/12/2018 GMT
   120                           ; 
   121                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
   122                           ; All rights reserved.
   123                           ; 
   124                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   125                           ; 
   126                           ; Redistribution and use in source and binary forms, with or without modification, are
   127                           ; permitted provided that the following conditions are met:
   128                           ; 
   129                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   130                           ;        conditions and the following disclaimer.
   131                           ; 
   132                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   133                           ;        of conditions and the following disclaimer in the documentation and/or other
   134                           ;        materials provided with the distribution.
   135                           ; 
   136                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   137                           ;        software without specific prior written permission.
   138                           ; 
   139                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   140                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   141                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   142                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   143                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   144                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   145                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   146                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   147                           ; 
   148                           ; 
   149                           ; Code-generator required, PIC16F18345 Definitions
   150                           ; 
   151                           ; SFR Addresses
   152  0000                     	;# 
   153  0001                     	;# 
   154  0002                     	;# 
   155  0003                     	;# 
   156  0004                     	;# 
   157  0005                     	;# 
   158  0006                     	;# 
   159  0007                     	;# 
   160  0008                     	;# 
   161  0009                     	;# 
   162  000A                     	;# 
   163  000B                     	;# 
   164  000C                     	;# 
   165  000D                     	;# 
   166  000E                     	;# 
   167  0010                     	;# 
   168  0011                     	;# 
   169  0012                     	;# 
   170  0013                     	;# 
   171  0014                     	;# 
   172  0015                     	;# 
   173  0015                     	;# 
   174  0016                     	;# 
   175  0016                     	;# 
   176  0017                     	;# 
   177  0018                     	;# 
   178  0019                     	;# 
   179  0019                     	;# 
   180  001A                     	;# 
   181  001B                     	;# 
   182  001C                     	;# 
   183  001D                     	;# 
   184  001E                     	;# 
   185  001F                     	;# 
   186  008C                     	;# 
   187  008D                     	;# 
   188  008E                     	;# 
   189  0090                     	;# 
   190  0091                     	;# 
   191  0092                     	;# 
   192  0093                     	;# 
   193  0094                     	;# 
   194  0097                     	;# 
   195  009B                     	;# 
   196  009B                     	;# 
   197  009C                     	;# 
   198  009D                     	;# 
   199  009E                     	;# 
   200  009F                     	;# 
   201  010C                     	;# 
   202  010D                     	;# 
   203  010E                     	;# 
   204  0111                     	;# 
   205  0112                     	;# 
   206  0113                     	;# 
   207  0114                     	;# 
   208  0115                     	;# 
   209  0116                     	;# 
   210  0117                     	;# 
   211  0118                     	;# 
   212  0119                     	;# 
   213  018C                     	;# 
   214  018D                     	;# 
   215  018E                     	;# 
   216  0197                     	;# 
   217  0199                     	;# 
   218  0199                     	;# 
   219  0199                     	;# 
   220  019A                     	;# 
   221  019A                     	;# 
   222  019A                     	;# 
   223  019B                     	;# 
   224  019B                     	;# 
   225  019B                     	;# 
   226  019B                     	;# 
   227  019B                     	;# 
   228  019C                     	;# 
   229  019C                     	;# 
   230  019C                     	;# 
   231  019D                     	;# 
   232  019D                     	;# 
   233  019D                     	;# 
   234  019E                     	;# 
   235  019E                     	;# 
   236  019E                     	;# 
   237  019F                     	;# 
   238  019F                     	;# 
   239  019F                     	;# 
   240  019F                     	;# 
   241  019F                     	;# 
   242  020C                     	;# 
   243  020D                     	;# 
   244  020E                     	;# 
   245  0211                     	;# 
   246  0211                     	;# 
   247  0212                     	;# 
   248  0212                     	;# 
   249  0213                     	;# 
   250  0213                     	;# 
   251  0214                     	;# 
   252  0214                     	;# 
   253  0215                     	;# 
   254  0215                     	;# 
   255  0215                     	;# 
   256  0215                     	;# 
   257  0216                     	;# 
   258  0216                     	;# 
   259  0217                     	;# 
   260  0217                     	;# 
   261  0219                     	;# 
   262  021A                     	;# 
   263  021B                     	;# 
   264  021C                     	;# 
   265  021D                     	;# 
   266  021D                     	;# 
   267  021E                     	;# 
   268  021F                     	;# 
   269  028C                     	;# 
   270  028D                     	;# 
   271  028E                     	;# 
   272  0291                     	;# 
   273  0291                     	;# 
   274  0292                     	;# 
   275  0293                     	;# 
   276  0294                     	;# 
   277  0295                     	;# 
   278  0295                     	;# 
   279  0296                     	;# 
   280  0297                     	;# 
   281  0298                     	;# 
   282  029F                     	;# 
   283  030C                     	;# 
   284  030D                     	;# 
   285  030E                     	;# 
   286  0311                     	;# 
   287  0311                     	;# 
   288  0312                     	;# 
   289  0313                     	;# 
   290  0314                     	;# 
   291  0315                     	;# 
   292  0315                     	;# 
   293  0316                     	;# 
   294  0317                     	;# 
   295  0318                     	;# 
   296  038C                     	;# 
   297  038D                     	;# 
   298  038E                     	;# 
   299  0391                     	;# 
   300  0392                     	;# 
   301  0393                     	;# 
   302  0394                     	;# 
   303  0395                     	;# 
   304  0396                     	;# 
   305  0397                     	;# 
   306  0398                     	;# 
   307  0399                     	;# 
   308  039A                     	;# 
   309  039C                     	;# 
   310  039D                     	;# 
   311  039E                     	;# 
   312  039F                     	;# 
   313  0411                     	;# 
   314  0411                     	;# 
   315  0412                     	;# 
   316  0413                     	;# 
   317  0414                     	;# 
   318  0415                     	;# 
   319  0416                     	;# 
   320  0417                     	;# 
   321  0418                     	;# 
   322  0418                     	;# 
   323  0419                     	;# 
   324  041A                     	;# 
   325  041B                     	;# 
   326  041C                     	;# 
   327  041D                     	;# 
   328  041E                     	;# 
   329  041F                     	;# 
   330  0498                     	;# 
   331  0498                     	;# 
   332  0499                     	;# 
   333  049A                     	;# 
   334  049B                     	;# 
   335  049B                     	;# 
   336  049C                     	;# 
   337  049D                     	;# 
   338  049E                     	;# 
   339  049F                     	;# 
   340  0617                     	;# 
   341  0618                     	;# 
   342  0619                     	;# 
   343  0619                     	;# 
   344  061A                     	;# 
   345  061B                     	;# 
   346  061C                     	;# 
   347  061C                     	;# 
   348  061F                     	;# 
   349  0691                     	;# 
   350  0692                     	;# 
   351  0693                     	;# 
   352  0694                     	;# 
   353  0695                     	;# 
   354  0696                     	;# 
   355  0697                     	;# 
   356  0698                     	;# 
   357  0699                     	;# 
   358  0711                     	;# 
   359  0712                     	;# 
   360  0713                     	;# 
   361  0714                     	;# 
   362  0715                     	;# 
   363  0716                     	;# 
   364  0717                     	;# 
   365  0718                     	;# 
   366  0719                     	;# 
   367  0891                     	;# 
   368  0891                     	;# 
   369  0891                     	;# 
   370  0891                     	;# 
   371  0891                     	;# 
   372  0891                     	;# 
   373  0892                     	;# 
   374  0892                     	;# 
   375  0892                     	;# 
   376  0893                     	;# 
   377  0893                     	;# 
   378  0893                     	;# 
   379  0893                     	;# 
   380  0893                     	;# 
   381  0893                     	;# 
   382  0894                     	;# 
   383  0894                     	;# 
   384  0894                     	;# 
   385  0895                     	;# 
   386  0895                     	;# 
   387  0895                     	;# 
   388  0896                     	;# 
   389  0896                     	;# 
   390  0896                     	;# 
   391  089B                     	;# 
   392  0911                     	;# 
   393  0912                     	;# 
   394  0913                     	;# 
   395  0914                     	;# 
   396  0915                     	;# 
   397  0916                     	;# 
   398  0918                     	;# 
   399  0919                     	;# 
   400  091A                     	;# 
   401  091B                     	;# 
   402  091C                     	;# 
   403  091D                     	;# 
   404  091E                     	;# 
   405  091F                     	;# 
   406  0E0F                     	;# 
   407  0E10                     	;# 
   408  0E11                     	;# 
   409  0E12                     	;# 
   410  0E13                     	;# 
   411  0E14                     	;# 
   412  0E15                     	;# 
   413  0E16                     	;# 
   414  0E17                     	;# 
   415  0E18                     	;# 
   416  0E19                     	;# 
   417  0E1A                     	;# 
   418  0E1B                     	;# 
   419  0E1C                     	;# 
   420  0E1D                     	;# 
   421  0E1E                     	;# 
   422  0E1F                     	;# 
   423  0E20                     	;# 
   424  0E21                     	;# 
   425  0E22                     	;# 
   426  0E24                     	;# 
   427  0E25                     	;# 
   428  0E28                     	;# 
   429  0E29                     	;# 
   430  0E2A                     	;# 
   431  0E2B                     	;# 
   432  0E2C                     	;# 
   433  0E2D                     	;# 
   434  0E2E                     	;# 
   435  0E2F                     	;# 
   436  0E90                     	;# 
   437  0E91                     	;# 
   438  0E92                     	;# 
   439  0E94                     	;# 
   440  0E95                     	;# 
   441  0E9C                     	;# 
   442  0E9D                     	;# 
   443  0E9E                     	;# 
   444  0E9F                     	;# 
   445  0EA0                     	;# 
   446  0EA1                     	;# 
   447  0EA2                     	;# 
   448  0EA3                     	;# 
   449  0EA4                     	;# 
   450  0EA5                     	;# 
   451  0EA6                     	;# 
   452  0EA7                     	;# 
   453  0F0F                     	;# 
   454  0F10                     	;# 
   455  0F11                     	;# 
   456  0F12                     	;# 
   457  0F13                     	;# 
   458  0F14                     	;# 
   459  0F15                     	;# 
   460  0F16                     	;# 
   461  0F17                     	;# 
   462  0F18                     	;# 
   463  0F19                     	;# 
   464  0F1A                     	;# 
   465  0F1B                     	;# 
   466  0F1C                     	;# 
   467  0F1D                     	;# 
   468  0F1E                     	;# 
   469  0F1F                     	;# 
   470  0F20                     	;# 
   471  0F21                     	;# 
   472  0F22                     	;# 
   473  0F23                     	;# 
   474  0F24                     	;# 
   475  0F25                     	;# 
   476  0F26                     	;# 
   477  0F27                     	;# 
   478  0F28                     	;# 
   479  0F29                     	;# 
   480  0F2A                     	;# 
   481  0F2B                     	;# 
   482  0F2C                     	;# 
   483  0F2D                     	;# 
   484  0F2E                     	;# 
   485  0F2F                     	;# 
   486  0F30                     	;# 
   487  0F31                     	;# 
   488  0F32                     	;# 
   489  0F33                     	;# 
   490  0F34                     	;# 
   491  0F35                     	;# 
   492  0F36                     	;# 
   493  0F37                     	;# 
   494  0FE4                     	;# 
   495  0FE5                     	;# 
   496  0FE6                     	;# 
   497  0FE7                     	;# 
   498  0FE8                     	;# 
   499  0FE9                     	;# 
   500  0FEA                     	;# 
   501  0FEB                     	;# 
   502  0FED                     	;# 
   503  0FEE                     	;# 
   504  0FEF                     	;# 
   505  0000                     	;# 
   506  0001                     	;# 
   507  0002                     	;# 
   508  0003                     	;# 
   509  0004                     	;# 
   510  0005                     	;# 
   511  0006                     	;# 
   512  0007                     	;# 
   513  0008                     	;# 
   514  0009                     	;# 
   515  000A                     	;# 
   516  000B                     	;# 
   517  000C                     	;# 
   518  000D                     	;# 
   519  000E                     	;# 
   520  0010                     	;# 
   521  0011                     	;# 
   522  0012                     	;# 
   523  0013                     	;# 
   524  0014                     	;# 
   525  0015                     	;# 
   526  0015                     	;# 
   527  0016                     	;# 
   528  0016                     	;# 
   529  0017                     	;# 
   530  0018                     	;# 
   531  0019                     	;# 
   532  0019                     	;# 
   533  001A                     	;# 
   534  001B                     	;# 
   535  001C                     	;# 
   536  001D                     	;# 
   537  001E                     	;# 
   538  001F                     	;# 
   539  008C                     	;# 
   540  008D                     	;# 
   541  008E                     	;# 
   542  0090                     	;# 
   543  0091                     	;# 
   544  0092                     	;# 
   545  0093                     	;# 
   546  0094                     	;# 
   547  0097                     	;# 
   548  009B                     	;# 
   549  009B                     	;# 
   550  009C                     	;# 
   551  009D                     	;# 
   552  009E                     	;# 
   553  009F                     	;# 
   554  010C                     	;# 
   555  010D                     	;# 
   556  010E                     	;# 
   557  0111                     	;# 
   558  0112                     	;# 
   559  0113                     	;# 
   560  0114                     	;# 
   561  0115                     	;# 
   562  0116                     	;# 
   563  0117                     	;# 
   564  0118                     	;# 
   565  0119                     	;# 
   566  018C                     	;# 
   567  018D                     	;# 
   568  018E                     	;# 
   569  0197                     	;# 
   570  0199                     	;# 
   571  0199                     	;# 
   572  0199                     	;# 
   573  019A                     	;# 
   574  019A                     	;# 
   575  019A                     	;# 
   576  019B                     	;# 
   577  019B                     	;# 
   578  019B                     	;# 
   579  019B                     	;# 
   580  019B                     	;# 
   581  019C                     	;# 
   582  019C                     	;# 
   583  019C                     	;# 
   584  019D                     	;# 
   585  019D                     	;# 
   586  019D                     	;# 
   587  019E                     	;# 
   588  019E                     	;# 
   589  019E                     	;# 
   590  019F                     	;# 
   591  019F                     	;# 
   592  019F                     	;# 
   593  019F                     	;# 
   594  019F                     	;# 
   595  020C                     	;# 
   596  020D                     	;# 
   597  020E                     	;# 
   598  0211                     	;# 
   599  0211                     	;# 
   600  0212                     	;# 
   601  0212                     	;# 
   602  0213                     	;# 
   603  0213                     	;# 
   604  0214                     	;# 
   605  0214                     	;# 
   606  0215                     	;# 
   607  0215                     	;# 
   608  0215                     	;# 
   609  0215                     	;# 
   610  0216                     	;# 
   611  0216                     	;# 
   612  0217                     	;# 
   613  0217                     	;# 
   614  0219                     	;# 
   615  021A                     	;# 
   616  021B                     	;# 
   617  021C                     	;# 
   618  021D                     	;# 
   619  021D                     	;# 
   620  021E                     	;# 
   621  021F                     	;# 
   622  028C                     	;# 
   623  028D                     	;# 
   624  028E                     	;# 
   625  0291                     	;# 
   626  0291                     	;# 
   627  0292                     	;# 
   628  0293                     	;# 
   629  0294                     	;# 
   630  0295                     	;# 
   631  0295                     	;# 
   632  0296                     	;# 
   633  0297                     	;# 
   634  0298                     	;# 
   635  029F                     	;# 
   636  030C                     	;# 
   637  030D                     	;# 
   638  030E                     	;# 
   639  0311                     	;# 
   640  0311                     	;# 
   641  0312                     	;# 
   642  0313                     	;# 
   643  0314                     	;# 
   644  0315                     	;# 
   645  0315                     	;# 
   646  0316                     	;# 
   647  0317                     	;# 
   648  0318                     	;# 
   649  038C                     	;# 
   650  038D                     	;# 
   651  038E                     	;# 
   652  0391                     	;# 
   653  0392                     	;# 
   654  0393                     	;# 
   655  0394                     	;# 
   656  0395                     	;# 
   657  0396                     	;# 
   658  0397                     	;# 
   659  0398                     	;# 
   660  0399                     	;# 
   661  039A                     	;# 
   662  039C                     	;# 
   663  039D                     	;# 
   664  039E                     	;# 
   665  039F                     	;# 
   666  0411                     	;# 
   667  0411                     	;# 
   668  0412                     	;# 
   669  0413                     	;# 
   670  0414                     	;# 
   671  0415                     	;# 
   672  0416                     	;# 
   673  0417                     	;# 
   674  0418                     	;# 
   675  0418                     	;# 
   676  0419                     	;# 
   677  041A                     	;# 
   678  041B                     	;# 
   679  041C                     	;# 
   680  041D                     	;# 
   681  041E                     	;# 
   682  041F                     	;# 
   683  0498                     	;# 
   684  0498                     	;# 
   685  0499                     	;# 
   686  049A                     	;# 
   687  049B                     	;# 
   688  049B                     	;# 
   689  049C                     	;# 
   690  049D                     	;# 
   691  049E                     	;# 
   692  049F                     	;# 
   693  0617                     	;# 
   694  0618                     	;# 
   695  0619                     	;# 
   696  0619                     	;# 
   697  061A                     	;# 
   698  061B                     	;# 
   699  061C                     	;# 
   700  061C                     	;# 
   701  061F                     	;# 
   702  0691                     	;# 
   703  0692                     	;# 
   704  0693                     	;# 
   705  0694                     	;# 
   706  0695                     	;# 
   707  0696                     	;# 
   708  0697                     	;# 
   709  0698                     	;# 
   710  0699                     	;# 
   711  0711                     	;# 
   712  0712                     	;# 
   713  0713                     	;# 
   714  0714                     	;# 
   715  0715                     	;# 
   716  0716                     	;# 
   717  0717                     	;# 
   718  0718                     	;# 
   719  0719                     	;# 
   720  0891                     	;# 
   721  0891                     	;# 
   722  0891                     	;# 
   723  0891                     	;# 
   724  0891                     	;# 
   725  0891                     	;# 
   726  0892                     	;# 
   727  0892                     	;# 
   728  0892                     	;# 
   729  0893                     	;# 
   730  0893                     	;# 
   731  0893                     	;# 
   732  0893                     	;# 
   733  0893                     	;# 
   734  0893                     	;# 
   735  0894                     	;# 
   736  0894                     	;# 
   737  0894                     	;# 
   738  0895                     	;# 
   739  0895                     	;# 
   740  0895                     	;# 
   741  0896                     	;# 
   742  0896                     	;# 
   743  0896                     	;# 
   744  089B                     	;# 
   745  0911                     	;# 
   746  0912                     	;# 
   747  0913                     	;# 
   748  0914                     	;# 
   749  0915                     	;# 
   750  0916                     	;# 
   751  0918                     	;# 
   752  0919                     	;# 
   753  091A                     	;# 
   754  091B                     	;# 
   755  091C                     	;# 
   756  091D                     	;# 
   757  091E                     	;# 
   758  091F                     	;# 
   759  0E0F                     	;# 
   760  0E10                     	;# 
   761  0E11                     	;# 
   762  0E12                     	;# 
   763  0E13                     	;# 
   764  0E14                     	;# 
   765  0E15                     	;# 
   766  0E16                     	;# 
   767  0E17                     	;# 
   768  0E18                     	;# 
   769  0E19                     	;# 
   770  0E1A                     	;# 
   771  0E1B                     	;# 
   772  0E1C                     	;# 
   773  0E1D                     	;# 
   774  0E1E                     	;# 
   775  0E1F                     	;# 
   776  0E20                     	;# 
   777  0E21                     	;# 
   778  0E22                     	;# 
   779  0E24                     	;# 
   780  0E25                     	;# 
   781  0E28                     	;# 
   782  0E29                     	;# 
   783  0E2A                     	;# 
   784  0E2B                     	;# 
   785  0E2C                     	;# 
   786  0E2D                     	;# 
   787  0E2E                     	;# 
   788  0E2F                     	;# 
   789  0E90                     	;# 
   790  0E91                     	;# 
   791  0E92                     	;# 
   792  0E94                     	;# 
   793  0E95                     	;# 
   794  0E9C                     	;# 
   795  0E9D                     	;# 
   796  0E9E                     	;# 
   797  0E9F                     	;# 
   798  0EA0                     	;# 
   799  0EA1                     	;# 
   800  0EA2                     	;# 
   801  0EA3                     	;# 
   802  0EA4                     	;# 
   803  0EA5                     	;# 
   804  0EA6                     	;# 
   805  0EA7                     	;# 
   806  0F0F                     	;# 
   807  0F10                     	;# 
   808  0F11                     	;# 
   809  0F12                     	;# 
   810  0F13                     	;# 
   811  0F14                     	;# 
   812  0F15                     	;# 
   813  0F16                     	;# 
   814  0F17                     	;# 
   815  0F18                     	;# 
   816  0F19                     	;# 
   817  0F1A                     	;# 
   818  0F1B                     	;# 
   819  0F1C                     	;# 
   820  0F1D                     	;# 
   821  0F1E                     	;# 
   822  0F1F                     	;# 
   823  0F20                     	;# 
   824  0F21                     	;# 
   825  0F22                     	;# 
   826  0F23                     	;# 
   827  0F24                     	;# 
   828  0F25                     	;# 
   829  0F26                     	;# 
   830  0F27                     	;# 
   831  0F28                     	;# 
   832  0F29                     	;# 
   833  0F2A                     	;# 
   834  0F2B                     	;# 
   835  0F2C                     	;# 
   836  0F2D                     	;# 
   837  0F2E                     	;# 
   838  0F2F                     	;# 
   839  0F30                     	;# 
   840  0F31                     	;# 
   841  0F32                     	;# 
   842  0F33                     	;# 
   843  0F34                     	;# 
   844  0F35                     	;# 
   845  0F36                     	;# 
   846  0F37                     	;# 
   847  0FE4                     	;# 
   848  0FE5                     	;# 
   849  0FE6                     	;# 
   850  0FE7                     	;# 
   851  0FE8                     	;# 
   852  0FE9                     	;# 
   853  0FEA                     	;# 
   854  0FEB                     	;# 
   855  0FED                     	;# 
   856  0FEE                     	;# 
   857  0FEF                     	;# 
   858  0000                     	;# 
   859  0001                     	;# 
   860  0002                     	;# 
   861  0003                     	;# 
   862  0004                     	;# 
   863  0005                     	;# 
   864  0006                     	;# 
   865  0007                     	;# 
   866  0008                     	;# 
   867  0009                     	;# 
   868  000A                     	;# 
   869  000B                     	;# 
   870  000C                     	;# 
   871  000D                     	;# 
   872  000E                     	;# 
   873  0010                     	;# 
   874  0011                     	;# 
   875  0012                     	;# 
   876  0013                     	;# 
   877  0014                     	;# 
   878  0015                     	;# 
   879  0015                     	;# 
   880  0016                     	;# 
   881  0016                     	;# 
   882  0017                     	;# 
   883  0018                     	;# 
   884  0019                     	;# 
   885  0019                     	;# 
   886  001A                     	;# 
   887  001B                     	;# 
   888  001C                     	;# 
   889  001D                     	;# 
   890  001E                     	;# 
   891  001F                     	;# 
   892  008C                     	;# 
   893  008D                     	;# 
   894  008E                     	;# 
   895  0090                     	;# 
   896  0091                     	;# 
   897  0092                     	;# 
   898  0093                     	;# 
   899  0094                     	;# 
   900  0097                     	;# 
   901  009B                     	;# 
   902  009B                     	;# 
   903  009C                     	;# 
   904  009D                     	;# 
   905  009E                     	;# 
   906  009F                     	;# 
   907  010C                     	;# 
   908  010D                     	;# 
   909  010E                     	;# 
   910  0111                     	;# 
   911  0112                     	;# 
   912  0113                     	;# 
   913  0114                     	;# 
   914  0115                     	;# 
   915  0116                     	;# 
   916  0117                     	;# 
   917  0118                     	;# 
   918  0119                     	;# 
   919  018C                     	;# 
   920  018D                     	;# 
   921  018E                     	;# 
   922  0197                     	;# 
   923  0199                     	;# 
   924  0199                     	;# 
   925  0199                     	;# 
   926  019A                     	;# 
   927  019A                     	;# 
   928  019A                     	;# 
   929  019B                     	;# 
   930  019B                     	;# 
   931  019B                     	;# 
   932  019B                     	;# 
   933  019B                     	;# 
   934  019C                     	;# 
   935  019C                     	;# 
   936  019C                     	;# 
   937  019D                     	;# 
   938  019D                     	;# 
   939  019D                     	;# 
   940  019E                     	;# 
   941  019E                     	;# 
   942  019E                     	;# 
   943  019F                     	;# 
   944  019F                     	;# 
   945  019F                     	;# 
   946  019F                     	;# 
   947  019F                     	;# 
   948  020C                     	;# 
   949  020D                     	;# 
   950  020E                     	;# 
   951  0211                     	;# 
   952  0211                     	;# 
   953  0212                     	;# 
   954  0212                     	;# 
   955  0213                     	;# 
   956  0213                     	;# 
   957  0214                     	;# 
   958  0214                     	;# 
   959  0215                     	;# 
   960  0215                     	;# 
   961  0215                     	;# 
   962  0215                     	;# 
   963  0216                     	;# 
   964  0216                     	;# 
   965  0217                     	;# 
   966  0217                     	;# 
   967  0219                     	;# 
   968  021A                     	;# 
   969  021B                     	;# 
   970  021C                     	;# 
   971  021D                     	;# 
   972  021D                     	;# 
   973  021E                     	;# 
   974  021F                     	;# 
   975  028C                     	;# 
   976  028D                     	;# 
   977  028E                     	;# 
   978  0291                     	;# 
   979  0291                     	;# 
   980  0292                     	;# 
   981  0293                     	;# 
   982  0294                     	;# 
   983  0295                     	;# 
   984  0295                     	;# 
   985  0296                     	;# 
   986  0297                     	;# 
   987  0298                     	;# 
   988  029F                     	;# 
   989  030C                     	;# 
   990  030D                     	;# 
   991  030E                     	;# 
   992  0311                     	;# 
   993  0311                     	;# 
   994  0312                     	;# 
   995  0313                     	;# 
   996  0314                     	;# 
   997  0315                     	;# 
   998  0315                     	;# 
   999  0316                     	;# 
  1000  0317                     	;# 
  1001  0318                     	;# 
  1002  038C                     	;# 
  1003  038D                     	;# 
  1004  038E                     	;# 
  1005  0391                     	;# 
  1006  0392                     	;# 
  1007  0393                     	;# 
  1008  0394                     	;# 
  1009  0395                     	;# 
  1010  0396                     	;# 
  1011  0397                     	;# 
  1012  0398                     	;# 
  1013  0399                     	;# 
  1014  039A                     	;# 
  1015  039C                     	;# 
  1016  039D                     	;# 
  1017  039E                     	;# 
  1018  039F                     	;# 
  1019  0411                     	;# 
  1020  0411                     	;# 
  1021  0412                     	;# 
  1022  0413                     	;# 
  1023  0414                     	;# 
  1024  0415                     	;# 
  1025  0416                     	;# 
  1026  0417                     	;# 
  1027  0418                     	;# 
  1028  0418                     	;# 
  1029  0419                     	;# 
  1030  041A                     	;# 
  1031  041B                     	;# 
  1032  041C                     	;# 
  1033  041D                     	;# 
  1034  041E                     	;# 
  1035  041F                     	;# 
  1036  0498                     	;# 
  1037  0498                     	;# 
  1038  0499                     	;# 
  1039  049A                     	;# 
  1040  049B                     	;# 
  1041  049B                     	;# 
  1042  049C                     	;# 
  1043  049D                     	;# 
  1044  049E                     	;# 
  1045  049F                     	;# 
  1046  0617                     	;# 
  1047  0618                     	;# 
  1048  0619                     	;# 
  1049  0619                     	;# 
  1050  061A                     	;# 
  1051  061B                     	;# 
  1052  061C                     	;# 
  1053  061C                     	;# 
  1054  061F                     	;# 
  1055  0691                     	;# 
  1056  0692                     	;# 
  1057  0693                     	;# 
  1058  0694                     	;# 
  1059  0695                     	;# 
  1060  0696                     	;# 
  1061  0697                     	;# 
  1062  0698                     	;# 
  1063  0699                     	;# 
  1064  0711                     	;# 
  1065  0712                     	;# 
  1066  0713                     	;# 
  1067  0714                     	;# 
  1068  0715                     	;# 
  1069  0716                     	;# 
  1070  0717                     	;# 
  1071  0718                     	;# 
  1072  0719                     	;# 
  1073  0891                     	;# 
  1074  0891                     	;# 
  1075  0891                     	;# 
  1076  0891                     	;# 
  1077  0891                     	;# 
  1078  0891                     	;# 
  1079  0892                     	;# 
  1080  0892                     	;# 
  1081  0892                     	;# 
  1082  0893                     	;# 
  1083  0893                     	;# 
  1084  0893                     	;# 
  1085  0893                     	;# 
  1086  0893                     	;# 
  1087  0893                     	;# 
  1088  0894                     	;# 
  1089  0894                     	;# 
  1090  0894                     	;# 
  1091  0895                     	;# 
  1092  0895                     	;# 
  1093  0895                     	;# 
  1094  0896                     	;# 
  1095  0896                     	;# 
  1096  0896                     	;# 
  1097  089B                     	;# 
  1098  0911                     	;# 
  1099  0912                     	;# 
  1100  0913                     	;# 
  1101  0914                     	;# 
  1102  0915                     	;# 
  1103  0916                     	;# 
  1104  0918                     	;# 
  1105  0919                     	;# 
  1106  091A                     	;# 
  1107  091B                     	;# 
  1108  091C                     	;# 
  1109  091D                     	;# 
  1110  091E                     	;# 
  1111  091F                     	;# 
  1112  0E0F                     	;# 
  1113  0E10                     	;# 
  1114  0E11                     	;# 
  1115  0E12                     	;# 
  1116  0E13                     	;# 
  1117  0E14                     	;# 
  1118  0E15                     	;# 
  1119  0E16                     	;# 
  1120  0E17                     	;# 
  1121  0E18                     	;# 
  1122  0E19                     	;# 
  1123  0E1A                     	;# 
  1124  0E1B                     	;# 
  1125  0E1C                     	;# 
  1126  0E1D                     	;# 
  1127  0E1E                     	;# 
  1128  0E1F                     	;# 
  1129  0E20                     	;# 
  1130  0E21                     	;# 
  1131  0E22                     	;# 
  1132  0E24                     	;# 
  1133  0E25                     	;# 
  1134  0E28                     	;# 
  1135  0E29                     	;# 
  1136  0E2A                     	;# 
  1137  0E2B                     	;# 
  1138  0E2C                     	;# 
  1139  0E2D                     	;# 
  1140  0E2E                     	;# 
  1141  0E2F                     	;# 
  1142  0E90                     	;# 
  1143  0E91                     	;# 
  1144  0E92                     	;# 
  1145  0E94                     	;# 
  1146  0E95                     	;# 
  1147  0E9C                     	;# 
  1148  0E9D                     	;# 
  1149  0E9E                     	;# 
  1150  0E9F                     	;# 
  1151  0EA0                     	;# 
  1152  0EA1                     	;# 
  1153  0EA2                     	;# 
  1154  0EA3                     	;# 
  1155  0EA4                     	;# 
  1156  0EA5                     	;# 
  1157  0EA6                     	;# 
  1158  0EA7                     	;# 
  1159  0F0F                     	;# 
  1160  0F10                     	;# 
  1161  0F11                     	;# 
  1162  0F12                     	;# 
  1163  0F13                     	;# 
  1164  0F14                     	;# 
  1165  0F15                     	;# 
  1166  0F16                     	;# 
  1167  0F17                     	;# 
  1168  0F18                     	;# 
  1169  0F19                     	;# 
  1170  0F1A                     	;# 
  1171  0F1B                     	;# 
  1172  0F1C                     	;# 
  1173  0F1D                     	;# 
  1174  0F1E                     	;# 
  1175  0F1F                     	;# 
  1176  0F20                     	;# 
  1177  0F21                     	;# 
  1178  0F22                     	;# 
  1179  0F23                     	;# 
  1180  0F24                     	;# 
  1181  0F25                     	;# 
  1182  0F26                     	;# 
  1183  0F27                     	;# 
  1184  0F28                     	;# 
  1185  0F29                     	;# 
  1186  0F2A                     	;# 
  1187  0F2B                     	;# 
  1188  0F2C                     	;# 
  1189  0F2D                     	;# 
  1190  0F2E                     	;# 
  1191  0F2F                     	;# 
  1192  0F30                     	;# 
  1193  0F31                     	;# 
  1194  0F32                     	;# 
  1195  0F33                     	;# 
  1196  0F34                     	;# 
  1197  0F35                     	;# 
  1198  0F36                     	;# 
  1199  0F37                     	;# 
  1200  0FE4                     	;# 
  1201  0FE5                     	;# 
  1202  0FE6                     	;# 
  1203  0FE7                     	;# 
  1204  0FE8                     	;# 
  1205  0FE9                     	;# 
  1206  0FEA                     	;# 
  1207  0FEB                     	;# 
  1208  0FED                     	;# 
  1209  0FEE                     	;# 
  1210  0FEF                     	;# 
  1211  0000                     	;# 
  1212  0001                     	;# 
  1213  0002                     	;# 
  1214  0003                     	;# 
  1215  0004                     	;# 
  1216  0005                     	;# 
  1217  0006                     	;# 
  1218  0007                     	;# 
  1219  0008                     	;# 
  1220  0009                     	;# 
  1221  000A                     	;# 
  1222  000B                     	;# 
  1223  000C                     	;# 
  1224  000D                     	;# 
  1225  000E                     	;# 
  1226  0010                     	;# 
  1227  0011                     	;# 
  1228  0012                     	;# 
  1229  0013                     	;# 
  1230  0014                     	;# 
  1231  0015                     	;# 
  1232  0015                     	;# 
  1233  0016                     	;# 
  1234  0016                     	;# 
  1235  0017                     	;# 
  1236  0018                     	;# 
  1237  0019                     	;# 
  1238  0019                     	;# 
  1239  001A                     	;# 
  1240  001B                     	;# 
  1241  001C                     	;# 
  1242  001D                     	;# 
  1243  001E                     	;# 
  1244  001F                     	;# 
  1245  008C                     	;# 
  1246  008D                     	;# 
  1247  008E                     	;# 
  1248  0090                     	;# 
  1249  0091                     	;# 
  1250  0092                     	;# 
  1251  0093                     	;# 
  1252  0094                     	;# 
  1253  0097                     	;# 
  1254  009B                     	;# 
  1255  009B                     	;# 
  1256  009C                     	;# 
  1257  009D                     	;# 
  1258  009E                     	;# 
  1259  009F                     	;# 
  1260  010C                     	;# 
  1261  010D                     	;# 
  1262  010E                     	;# 
  1263  0111                     	;# 
  1264  0112                     	;# 
  1265  0113                     	;# 
  1266  0114                     	;# 
  1267  0115                     	;# 
  1268  0116                     	;# 
  1269  0117                     	;# 
  1270  0118                     	;# 
  1271  0119                     	;# 
  1272  018C                     	;# 
  1273  018D                     	;# 
  1274  018E                     	;# 
  1275  0197                     	;# 
  1276  0199                     	;# 
  1277  0199                     	;# 
  1278  0199                     	;# 
  1279  019A                     	;# 
  1280  019A                     	;# 
  1281  019A                     	;# 
  1282  019B                     	;# 
  1283  019B                     	;# 
  1284  019B                     	;# 
  1285  019B                     	;# 
  1286  019B                     	;# 
  1287  019C                     	;# 
  1288  019C                     	;# 
  1289  019C                     	;# 
  1290  019D                     	;# 
  1291  019D                     	;# 
  1292  019D                     	;# 
  1293  019E                     	;# 
  1294  019E                     	;# 
  1295  019E                     	;# 
  1296  019F                     	;# 
  1297  019F                     	;# 
  1298  019F                     	;# 
  1299  019F                     	;# 
  1300  019F                     	;# 
  1301  020C                     	;# 
  1302  020D                     	;# 
  1303  020E                     	;# 
  1304  0211                     	;# 
  1305  0211                     	;# 
  1306  0212                     	;# 
  1307  0212                     	;# 
  1308  0213                     	;# 
  1309  0213                     	;# 
  1310  0214                     	;# 
  1311  0214                     	;# 
  1312  0215                     	;# 
  1313  0215                     	;# 
  1314  0215                     	;# 
  1315  0215                     	;# 
  1316  0216                     	;# 
  1317  0216                     	;# 
  1318  0217                     	;# 
  1319  0217                     	;# 
  1320  0219                     	;# 
  1321  021A                     	;# 
  1322  021B                     	;# 
  1323  021C                     	;# 
  1324  021D                     	;# 
  1325  021D                     	;# 
  1326  021E                     	;# 
  1327  021F                     	;# 
  1328  028C                     	;# 
  1329  028D                     	;# 
  1330  028E                     	;# 
  1331  0291                     	;# 
  1332  0291                     	;# 
  1333  0292                     	;# 
  1334  0293                     	;# 
  1335  0294                     	;# 
  1336  0295                     	;# 
  1337  0295                     	;# 
  1338  0296                     	;# 
  1339  0297                     	;# 
  1340  0298                     	;# 
  1341  029F                     	;# 
  1342  030C                     	;# 
  1343  030D                     	;# 
  1344  030E                     	;# 
  1345  0311                     	;# 
  1346  0311                     	;# 
  1347  0312                     	;# 
  1348  0313                     	;# 
  1349  0314                     	;# 
  1350  0315                     	;# 
  1351  0315                     	;# 
  1352  0316                     	;# 
  1353  0317                     	;# 
  1354  0318                     	;# 
  1355  038C                     	;# 
  1356  038D                     	;# 
  1357  038E                     	;# 
  1358  0391                     	;# 
  1359  0392                     	;# 
  1360  0393                     	;# 
  1361  0394                     	;# 
  1362  0395                     	;# 
  1363  0396                     	;# 
  1364  0397                     	;# 
  1365  0398                     	;# 
  1366  0399                     	;# 
  1367  039A                     	;# 
  1368  039C                     	;# 
  1369  039D                     	;# 
  1370  039E                     	;# 
  1371  039F                     	;# 
  1372  0411                     	;# 
  1373  0411                     	;# 
  1374  0412                     	;# 
  1375  0413                     	;# 
  1376  0414                     	;# 
  1377  0415                     	;# 
  1378  0416                     	;# 
  1379  0417                     	;# 
  1380  0418                     	;# 
  1381  0418                     	;# 
  1382  0419                     	;# 
  1383  041A                     	;# 
  1384  041B                     	;# 
  1385  041C                     	;# 
  1386  041D                     	;# 
  1387  041E                     	;# 
  1388  041F                     	;# 
  1389  0498                     	;# 
  1390  0498                     	;# 
  1391  0499                     	;# 
  1392  049A                     	;# 
  1393  049B                     	;# 
  1394  049B                     	;# 
  1395  049C                     	;# 
  1396  049D                     	;# 
  1397  049E                     	;# 
  1398  049F                     	;# 
  1399  0617                     	;# 
  1400  0618                     	;# 
  1401  0619                     	;# 
  1402  0619                     	;# 
  1403  061A                     	;# 
  1404  061B                     	;# 
  1405  061C                     	;# 
  1406  061C                     	;# 
  1407  061F                     	;# 
  1408  0691                     	;# 
  1409  0692                     	;# 
  1410  0693                     	;# 
  1411  0694                     	;# 
  1412  0695                     	;# 
  1413  0696                     	;# 
  1414  0697                     	;# 
  1415  0698                     	;# 
  1416  0699                     	;# 
  1417  0711                     	;# 
  1418  0712                     	;# 
  1419  0713                     	;# 
  1420  0714                     	;# 
  1421  0715                     	;# 
  1422  0716                     	;# 
  1423  0717                     	;# 
  1424  0718                     	;# 
  1425  0719                     	;# 
  1426  0891                     	;# 
  1427  0891                     	;# 
  1428  0891                     	;# 
  1429  0891                     	;# 
  1430  0891                     	;# 
  1431  0891                     	;# 
  1432  0892                     	;# 
  1433  0892                     	;# 
  1434  0892                     	;# 
  1435  0893                     	;# 
  1436  0893                     	;# 
  1437  0893                     	;# 
  1438  0893                     	;# 
  1439  0893                     	;# 
  1440  0893                     	;# 
  1441  0894                     	;# 
  1442  0894                     	;# 
  1443  0894                     	;# 
  1444  0895                     	;# 
  1445  0895                     	;# 
  1446  0895                     	;# 
  1447  0896                     	;# 
  1448  0896                     	;# 
  1449  0896                     	;# 
  1450  089B                     	;# 
  1451  0911                     	;# 
  1452  0912                     	;# 
  1453  0913                     	;# 
  1454  0914                     	;# 
  1455  0915                     	;# 
  1456  0916                     	;# 
  1457  0918                     	;# 
  1458  0919                     	;# 
  1459  091A                     	;# 
  1460  091B                     	;# 
  1461  091C                     	;# 
  1462  091D                     	;# 
  1463  091E                     	;# 
  1464  091F                     	;# 
  1465  0E0F                     	;# 
  1466  0E10                     	;# 
  1467  0E11                     	;# 
  1468  0E12                     	;# 
  1469  0E13                     	;# 
  1470  0E14                     	;# 
  1471  0E15                     	;# 
  1472  0E16                     	;# 
  1473  0E17                     	;# 
  1474  0E18                     	;# 
  1475  0E19                     	;# 
  1476  0E1A                     	;# 
  1477  0E1B                     	;# 
  1478  0E1C                     	;# 
  1479  0E1D                     	;# 
  1480  0E1E                     	;# 
  1481  0E1F                     	;# 
  1482  0E20                     	;# 
  1483  0E21                     	;# 
  1484  0E22                     	;# 
  1485  0E24                     	;# 
  1486  0E25                     	;# 
  1487  0E28                     	;# 
  1488  0E29                     	;# 
  1489  0E2A                     	;# 
  1490  0E2B                     	;# 
  1491  0E2C                     	;# 
  1492  0E2D                     	;# 
  1493  0E2E                     	;# 
  1494  0E2F                     	;# 
  1495  0E90                     	;# 
  1496  0E91                     	;# 
  1497  0E92                     	;# 
  1498  0E94                     	;# 
  1499  0E95                     	;# 
  1500  0E9C                     	;# 
  1501  0E9D                     	;# 
  1502  0E9E                     	;# 
  1503  0E9F                     	;# 
  1504  0EA0                     	;# 
  1505  0EA1                     	;# 
  1506  0EA2                     	;# 
  1507  0EA3                     	;# 
  1508  0EA4                     	;# 
  1509  0EA5                     	;# 
  1510  0EA6                     	;# 
  1511  0EA7                     	;# 
  1512  0F0F                     	;# 
  1513  0F10                     	;# 
  1514  0F11                     	;# 
  1515  0F12                     	;# 
  1516  0F13                     	;# 
  1517  0F14                     	;# 
  1518  0F15                     	;# 
  1519  0F16                     	;# 
  1520  0F17                     	;# 
  1521  0F18                     	;# 
  1522  0F19                     	;# 
  1523  0F1A                     	;# 
  1524  0F1B                     	;# 
  1525  0F1C                     	;# 
  1526  0F1D                     	;# 
  1527  0F1E                     	;# 
  1528  0F1F                     	;# 
  1529  0F20                     	;# 
  1530  0F21                     	;# 
  1531  0F22                     	;# 
  1532  0F23                     	;# 
  1533  0F24                     	;# 
  1534  0F25                     	;# 
  1535  0F26                     	;# 
  1536  0F27                     	;# 
  1537  0F28                     	;# 
  1538  0F29                     	;# 
  1539  0F2A                     	;# 
  1540  0F2B                     	;# 
  1541  0F2C                     	;# 
  1542  0F2D                     	;# 
  1543  0F2E                     	;# 
  1544  0F2F                     	;# 
  1545  0F30                     	;# 
  1546  0F31                     	;# 
  1547  0F32                     	;# 
  1548  0F33                     	;# 
  1549  0F34                     	;# 
  1550  0F35                     	;# 
  1551  0F36                     	;# 
  1552  0F37                     	;# 
  1553  0FE4                     	;# 
  1554  0FE5                     	;# 
  1555  0FE6                     	;# 
  1556  0FE7                     	;# 
  1557  0FE8                     	;# 
  1558  0FE9                     	;# 
  1559  0FEA                     	;# 
  1560  0FEB                     	;# 
  1561  0FED                     	;# 
  1562  0FEE                     	;# 
  1563  0FEF                     	;# 
  1564  0000                     	;# 
  1565  0001                     	;# 
  1566  0002                     	;# 
  1567  0003                     	;# 
  1568  0004                     	;# 
  1569  0005                     	;# 
  1570  0006                     	;# 
  1571  0007                     	;# 
  1572  0008                     	;# 
  1573  0009                     	;# 
  1574  000A                     	;# 
  1575  000B                     	;# 
  1576  000C                     	;# 
  1577  000D                     	;# 
  1578  000E                     	;# 
  1579  0010                     	;# 
  1580  0011                     	;# 
  1581  0012                     	;# 
  1582  0013                     	;# 
  1583  0014                     	;# 
  1584  0015                     	;# 
  1585  0015                     	;# 
  1586  0016                     	;# 
  1587  0016                     	;# 
  1588  0017                     	;# 
  1589  0018                     	;# 
  1590  0019                     	;# 
  1591  0019                     	;# 
  1592  001A                     	;# 
  1593  001B                     	;# 
  1594  001C                     	;# 
  1595  001D                     	;# 
  1596  001E                     	;# 
  1597  001F                     	;# 
  1598  008C                     	;# 
  1599  008D                     	;# 
  1600  008E                     	;# 
  1601  0090                     	;# 
  1602  0091                     	;# 
  1603  0092                     	;# 
  1604  0093                     	;# 
  1605  0094                     	;# 
  1606  0097                     	;# 
  1607  009B                     	;# 
  1608  009B                     	;# 
  1609  009C                     	;# 
  1610  009D                     	;# 
  1611  009E                     	;# 
  1612  009F                     	;# 
  1613  010C                     	;# 
  1614  010D                     	;# 
  1615  010E                     	;# 
  1616  0111                     	;# 
  1617  0112                     	;# 
  1618  0113                     	;# 
  1619  0114                     	;# 
  1620  0115                     	;# 
  1621  0116                     	;# 
  1622  0117                     	;# 
  1623  0118                     	;# 
  1624  0119                     	;# 
  1625  018C                     	;# 
  1626  018D                     	;# 
  1627  018E                     	;# 
  1628  0197                     	;# 
  1629  0199                     	;# 
  1630  0199                     	;# 
  1631  0199                     	;# 
  1632  019A                     	;# 
  1633  019A                     	;# 
  1634  019A                     	;# 
  1635  019B                     	;# 
  1636  019B                     	;# 
  1637  019B                     	;# 
  1638  019B                     	;# 
  1639  019B                     	;# 
  1640  019C                     	;# 
  1641  019C                     	;# 
  1642  019C                     	;# 
  1643  019D                     	;# 
  1644  019D                     	;# 
  1645  019D                     	;# 
  1646  019E                     	;# 
  1647  019E                     	;# 
  1648  019E                     	;# 
  1649  019F                     	;# 
  1650  019F                     	;# 
  1651  019F                     	;# 
  1652  019F                     	;# 
  1653  019F                     	;# 
  1654  020C                     	;# 
  1655  020D                     	;# 
  1656  020E                     	;# 
  1657  0211                     	;# 
  1658  0211                     	;# 
  1659  0212                     	;# 
  1660  0212                     	;# 
  1661  0213                     	;# 
  1662  0213                     	;# 
  1663  0214                     	;# 
  1664  0214                     	;# 
  1665  0215                     	;# 
  1666  0215                     	;# 
  1667  0215                     	;# 
  1668  0215                     	;# 
  1669  0216                     	;# 
  1670  0216                     	;# 
  1671  0217                     	;# 
  1672  0217                     	;# 
  1673  0219                     	;# 
  1674  021A                     	;# 
  1675  021B                     	;# 
  1676  021C                     	;# 
  1677  021D                     	;# 
  1678  021D                     	;# 
  1679  021E                     	;# 
  1680  021F                     	;# 
  1681  028C                     	;# 
  1682  028D                     	;# 
  1683  028E                     	;# 
  1684  0291                     	;# 
  1685  0291                     	;# 
  1686  0292                     	;# 
  1687  0293                     	;# 
  1688  0294                     	;# 
  1689  0295                     	;# 
  1690  0295                     	;# 
  1691  0296                     	;# 
  1692  0297                     	;# 
  1693  0298                     	;# 
  1694  029F                     	;# 
  1695  030C                     	;# 
  1696  030D                     	;# 
  1697  030E                     	;# 
  1698  0311                     	;# 
  1699  0311                     	;# 
  1700  0312                     	;# 
  1701  0313                     	;# 
  1702  0314                     	;# 
  1703  0315                     	;# 
  1704  0315                     	;# 
  1705  0316                     	;# 
  1706  0317                     	;# 
  1707  0318                     	;# 
  1708  038C                     	;# 
  1709  038D                     	;# 
  1710  038E                     	;# 
  1711  0391                     	;# 
  1712  0392                     	;# 
  1713  0393                     	;# 
  1714  0394                     	;# 
  1715  0395                     	;# 
  1716  0396                     	;# 
  1717  0397                     	;# 
  1718  0398                     	;# 
  1719  0399                     	;# 
  1720  039A                     	;# 
  1721  039C                     	;# 
  1722  039D                     	;# 
  1723  039E                     	;# 
  1724  039F                     	;# 
  1725  0411                     	;# 
  1726  0411                     	;# 
  1727  0412                     	;# 
  1728  0413                     	;# 
  1729  0414                     	;# 
  1730  0415                     	;# 
  1731  0416                     	;# 
  1732  0417                     	;# 
  1733  0418                     	;# 
  1734  0418                     	;# 
  1735  0419                     	;# 
  1736  041A                     	;# 
  1737  041B                     	;# 
  1738  041C                     	;# 
  1739  041D                     	;# 
  1740  041E                     	;# 
  1741  041F                     	;# 
  1742  0498                     	;# 
  1743  0498                     	;# 
  1744  0499                     	;# 
  1745  049A                     	;# 
  1746  049B                     	;# 
  1747  049B                     	;# 
  1748  049C                     	;# 
  1749  049D                     	;# 
  1750  049E                     	;# 
  1751  049F                     	;# 
  1752  0617                     	;# 
  1753  0618                     	;# 
  1754  0619                     	;# 
  1755  0619                     	;# 
  1756  061A                     	;# 
  1757  061B                     	;# 
  1758  061C                     	;# 
  1759  061C                     	;# 
  1760  061F                     	;# 
  1761  0691                     	;# 
  1762  0692                     	;# 
  1763  0693                     	;# 
  1764  0694                     	;# 
  1765  0695                     	;# 
  1766  0696                     	;# 
  1767  0697                     	;# 
  1768  0698                     	;# 
  1769  0699                     	;# 
  1770  0711                     	;# 
  1771  0712                     	;# 
  1772  0713                     	;# 
  1773  0714                     	;# 
  1774  0715                     	;# 
  1775  0716                     	;# 
  1776  0717                     	;# 
  1777  0718                     	;# 
  1778  0719                     	;# 
  1779  0891                     	;# 
  1780  0891                     	;# 
  1781  0891                     	;# 
  1782  0891                     	;# 
  1783  0891                     	;# 
  1784  0891                     	;# 
  1785  0892                     	;# 
  1786  0892                     	;# 
  1787  0892                     	;# 
  1788  0893                     	;# 
  1789  0893                     	;# 
  1790  0893                     	;# 
  1791  0893                     	;# 
  1792  0893                     	;# 
  1793  0893                     	;# 
  1794  0894                     	;# 
  1795  0894                     	;# 
  1796  0894                     	;# 
  1797  0895                     	;# 
  1798  0895                     	;# 
  1799  0895                     	;# 
  1800  0896                     	;# 
  1801  0896                     	;# 
  1802  0896                     	;# 
  1803  089B                     	;# 
  1804  0911                     	;# 
  1805  0912                     	;# 
  1806  0913                     	;# 
  1807  0914                     	;# 
  1808  0915                     	;# 
  1809  0916                     	;# 
  1810  0918                     	;# 
  1811  0919                     	;# 
  1812  091A                     	;# 
  1813  091B                     	;# 
  1814  091C                     	;# 
  1815  091D                     	;# 
  1816  091E                     	;# 
  1817  091F                     	;# 
  1818  0E0F                     	;# 
  1819  0E10                     	;# 
  1820  0E11                     	;# 
  1821  0E12                     	;# 
  1822  0E13                     	;# 
  1823  0E14                     	;# 
  1824  0E15                     	;# 
  1825  0E16                     	;# 
  1826  0E17                     	;# 
  1827  0E18                     	;# 
  1828  0E19                     	;# 
  1829  0E1A                     	;# 
  1830  0E1B                     	;# 
  1831  0E1C                     	;# 
  1832  0E1D                     	;# 
  1833  0E1E                     	;# 
  1834  0E1F                     	;# 
  1835  0E20                     	;# 
  1836  0E21                     	;# 
  1837  0E22                     	;# 
  1838  0E24                     	;# 
  1839  0E25                     	;# 
  1840  0E28                     	;# 
  1841  0E29                     	;# 
  1842  0E2A                     	;# 
  1843  0E2B                     	;# 
  1844  0E2C                     	;# 
  1845  0E2D                     	;# 
  1846  0E2E                     	;# 
  1847  0E2F                     	;# 
  1848  0E90                     	;# 
  1849  0E91                     	;# 
  1850  0E92                     	;# 
  1851  0E94                     	;# 
  1852  0E95                     	;# 
  1853  0E9C                     	;# 
  1854  0E9D                     	;# 
  1855  0E9E                     	;# 
  1856  0E9F                     	;# 
  1857  0EA0                     	;# 
  1858  0EA1                     	;# 
  1859  0EA2                     	;# 
  1860  0EA3                     	;# 
  1861  0EA4                     	;# 
  1862  0EA5                     	;# 
  1863  0EA6                     	;# 
  1864  0EA7                     	;# 
  1865  0F0F                     	;# 
  1866  0F10                     	;# 
  1867  0F11                     	;# 
  1868  0F12                     	;# 
  1869  0F13                     	;# 
  1870  0F14                     	;# 
  1871  0F15                     	;# 
  1872  0F16                     	;# 
  1873  0F17                     	;# 
  1874  0F18                     	;# 
  1875  0F19                     	;# 
  1876  0F1A                     	;# 
  1877  0F1B                     	;# 
  1878  0F1C                     	;# 
  1879  0F1D                     	;# 
  1880  0F1E                     	;# 
  1881  0F1F                     	;# 
  1882  0F20                     	;# 
  1883  0F21                     	;# 
  1884  0F22                     	;# 
  1885  0F23                     	;# 
  1886  0F24                     	;# 
  1887  0F25                     	;# 
  1888  0F26                     	;# 
  1889  0F27                     	;# 
  1890  0F28                     	;# 
  1891  0F29                     	;# 
  1892  0F2A                     	;# 
  1893  0F2B                     	;# 
  1894  0F2C                     	;# 
  1895  0F2D                     	;# 
  1896  0F2E                     	;# 
  1897  0F2F                     	;# 
  1898  0F30                     	;# 
  1899  0F31                     	;# 
  1900  0F32                     	;# 
  1901  0F33                     	;# 
  1902  0F34                     	;# 
  1903  0F35                     	;# 
  1904  0F36                     	;# 
  1905  0F37                     	;# 
  1906  0FE4                     	;# 
  1907  0FE5                     	;# 
  1908  0FE6                     	;# 
  1909  0FE7                     	;# 
  1910  0FE8                     	;# 
  1911  0FE9                     	;# 
  1912  0FEA                     	;# 
  1913  0FEB                     	;# 
  1914  0FED                     	;# 
  1915  0FEE                     	;# 
  1916  0FEF                     	;# 
  1917  0000                     	;# 
  1918  0001                     	;# 
  1919  0002                     	;# 
  1920  0003                     	;# 
  1921  0004                     	;# 
  1922  0005                     	;# 
  1923  0006                     	;# 
  1924  0007                     	;# 
  1925  0008                     	;# 
  1926  0009                     	;# 
  1927  000A                     	;# 
  1928  000B                     	;# 
  1929  000C                     	;# 
  1930  000D                     	;# 
  1931  000E                     	;# 
  1932  0010                     	;# 
  1933  0011                     	;# 
  1934  0012                     	;# 
  1935  0013                     	;# 
  1936  0014                     	;# 
  1937  0015                     	;# 
  1938  0015                     	;# 
  1939  0016                     	;# 
  1940  0016                     	;# 
  1941  0017                     	;# 
  1942  0018                     	;# 
  1943  0019                     	;# 
  1944  0019                     	;# 
  1945  001A                     	;# 
  1946  001B                     	;# 
  1947  001C                     	;# 
  1948  001D                     	;# 
  1949  001E                     	;# 
  1950  001F                     	;# 
  1951  008C                     	;# 
  1952  008D                     	;# 
  1953  008E                     	;# 
  1954  0090                     	;# 
  1955  0091                     	;# 
  1956  0092                     	;# 
  1957  0093                     	;# 
  1958  0094                     	;# 
  1959  0097                     	;# 
  1960  009B                     	;# 
  1961  009B                     	;# 
  1962  009C                     	;# 
  1963  009D                     	;# 
  1964  009E                     	;# 
  1965  009F                     	;# 
  1966  010C                     	;# 
  1967  010D                     	;# 
  1968  010E                     	;# 
  1969  0111                     	;# 
  1970  0112                     	;# 
  1971  0113                     	;# 
  1972  0114                     	;# 
  1973  0115                     	;# 
  1974  0116                     	;# 
  1975  0117                     	;# 
  1976  0118                     	;# 
  1977  0119                     	;# 
  1978  018C                     	;# 
  1979  018D                     	;# 
  1980  018E                     	;# 
  1981  0197                     	;# 
  1982  0199                     	;# 
  1983  0199                     	;# 
  1984  0199                     	;# 
  1985  019A                     	;# 
  1986  019A                     	;# 
  1987  019A                     	;# 
  1988  019B                     	;# 
  1989  019B                     	;# 
  1990  019B                     	;# 
  1991  019B                     	;# 
  1992  019B                     	;# 
  1993  019C                     	;# 
  1994  019C                     	;# 
  1995  019C                     	;# 
  1996  019D                     	;# 
  1997  019D                     	;# 
  1998  019D                     	;# 
  1999  019E                     	;# 
  2000  019E                     	;# 
  2001  019E                     	;# 
  2002  019F                     	;# 
  2003  019F                     	;# 
  2004  019F                     	;# 
  2005  019F                     	;# 
  2006  019F                     	;# 
  2007  020C                     	;# 
  2008  020D                     	;# 
  2009  020E                     	;# 
  2010  0211                     	;# 
  2011  0211                     	;# 
  2012  0212                     	;# 
  2013  0212                     	;# 
  2014  0213                     	;# 
  2015  0213                     	;# 
  2016  0214                     	;# 
  2017  0214                     	;# 
  2018  0215                     	;# 
  2019  0215                     	;# 
  2020  0215                     	;# 
  2021  0215                     	;# 
  2022  0216                     	;# 
  2023  0216                     	;# 
  2024  0217                     	;# 
  2025  0217                     	;# 
  2026  0219                     	;# 
  2027  021A                     	;# 
  2028  021B                     	;# 
  2029  021C                     	;# 
  2030  021D                     	;# 
  2031  021D                     	;# 
  2032  021E                     	;# 
  2033  021F                     	;# 
  2034  028C                     	;# 
  2035  028D                     	;# 
  2036  028E                     	;# 
  2037  0291                     	;# 
  2038  0291                     	;# 
  2039  0292                     	;# 
  2040  0293                     	;# 
  2041  0294                     	;# 
  2042  0295                     	;# 
  2043  0295                     	;# 
  2044  0296                     	;# 
  2045  0297                     	;# 
  2046  0298                     	;# 
  2047  029F                     	;# 
  2048  030C                     	;# 
  2049  030D                     	;# 
  2050  030E                     	;# 
  2051  0311                     	;# 
  2052  0311                     	;# 
  2053  0312                     	;# 
  2054  0313                     	;# 
  2055  0314                     	;# 
  2056  0315                     	;# 
  2057  0315                     	;# 
  2058  0316                     	;# 
  2059  0317                     	;# 
  2060  0318                     	;# 
  2061  038C                     	;# 
  2062  038D                     	;# 
  2063  038E                     	;# 
  2064  0391                     	;# 
  2065  0392                     	;# 
  2066  0393                     	;# 
  2067  0394                     	;# 
  2068  0395                     	;# 
  2069  0396                     	;# 
  2070  0397                     	;# 
  2071  0398                     	;# 
  2072  0399                     	;# 
  2073  039A                     	;# 
  2074  039C                     	;# 
  2075  039D                     	;# 
  2076  039E                     	;# 
  2077  039F                     	;# 
  2078  0411                     	;# 
  2079  0411                     	;# 
  2080  0412                     	;# 
  2081  0413                     	;# 
  2082  0414                     	;# 
  2083  0415                     	;# 
  2084  0416                     	;# 
  2085  0417                     	;# 
  2086  0418                     	;# 
  2087  0418                     	;# 
  2088  0419                     	;# 
  2089  041A                     	;# 
  2090  041B                     	;# 
  2091  041C                     	;# 
  2092  041D                     	;# 
  2093  041E                     	;# 
  2094  041F                     	;# 
  2095  0498                     	;# 
  2096  0498                     	;# 
  2097  0499                     	;# 
  2098  049A                     	;# 
  2099  049B                     	;# 
  2100  049B                     	;# 
  2101  049C                     	;# 
  2102  049D                     	;# 
  2103  049E                     	;# 
  2104  049F                     	;# 
  2105  0617                     	;# 
  2106  0618                     	;# 
  2107  0619                     	;# 
  2108  0619                     	;# 
  2109  061A                     	;# 
  2110  061B                     	;# 
  2111  061C                     	;# 
  2112  061C                     	;# 
  2113  061F                     	;# 
  2114  0691                     	;# 
  2115  0692                     	;# 
  2116  0693                     	;# 
  2117  0694                     	;# 
  2118  0695                     	;# 
  2119  0696                     	;# 
  2120  0697                     	;# 
  2121  0698                     	;# 
  2122  0699                     	;# 
  2123  0711                     	;# 
  2124  0712                     	;# 
  2125  0713                     	;# 
  2126  0714                     	;# 
  2127  0715                     	;# 
  2128  0716                     	;# 
  2129  0717                     	;# 
  2130  0718                     	;# 
  2131  0719                     	;# 
  2132  0891                     	;# 
  2133  0891                     	;# 
  2134  0891                     	;# 
  2135  0891                     	;# 
  2136  0891                     	;# 
  2137  0891                     	;# 
  2138  0892                     	;# 
  2139  0892                     	;# 
  2140  0892                     	;# 
  2141  0893                     	;# 
  2142  0893                     	;# 
  2143  0893                     	;# 
  2144  0893                     	;# 
  2145  0893                     	;# 
  2146  0893                     	;# 
  2147  0894                     	;# 
  2148  0894                     	;# 
  2149  0894                     	;# 
  2150  0895                     	;# 
  2151  0895                     	;# 
  2152  0895                     	;# 
  2153  0896                     	;# 
  2154  0896                     	;# 
  2155  0896                     	;# 
  2156  089B                     	;# 
  2157  0911                     	;# 
  2158  0912                     	;# 
  2159  0913                     	;# 
  2160  0914                     	;# 
  2161  0915                     	;# 
  2162  0916                     	;# 
  2163  0918                     	;# 
  2164  0919                     	;# 
  2165  091A                     	;# 
  2166  091B                     	;# 
  2167  091C                     	;# 
  2168  091D                     	;# 
  2169  091E                     	;# 
  2170  091F                     	;# 
  2171  0E0F                     	;# 
  2172  0E10                     	;# 
  2173  0E11                     	;# 
  2174  0E12                     	;# 
  2175  0E13                     	;# 
  2176  0E14                     	;# 
  2177  0E15                     	;# 
  2178  0E16                     	;# 
  2179  0E17                     	;# 
  2180  0E18                     	;# 
  2181  0E19                     	;# 
  2182  0E1A                     	;# 
  2183  0E1B                     	;# 
  2184  0E1C                     	;# 
  2185  0E1D                     	;# 
  2186  0E1E                     	;# 
  2187  0E1F                     	;# 
  2188  0E20                     	;# 
  2189  0E21                     	;# 
  2190  0E22                     	;# 
  2191  0E24                     	;# 
  2192  0E25                     	;# 
  2193  0E28                     	;# 
  2194  0E29                     	;# 
  2195  0E2A                     	;# 
  2196  0E2B                     	;# 
  2197  0E2C                     	;# 
  2198  0E2D                     	;# 
  2199  0E2E                     	;# 
  2200  0E2F                     	;# 
  2201  0E90                     	;# 
  2202  0E91                     	;# 
  2203  0E92                     	;# 
  2204  0E94                     	;# 
  2205  0E95                     	;# 
  2206  0E9C                     	;# 
  2207  0E9D                     	;# 
  2208  0E9E                     	;# 
  2209  0E9F                     	;# 
  2210  0EA0                     	;# 
  2211  0EA1                     	;# 
  2212  0EA2                     	;# 
  2213  0EA3                     	;# 
  2214  0EA4                     	;# 
  2215  0EA5                     	;# 
  2216  0EA6                     	;# 
  2217  0EA7                     	;# 
  2218  0F0F                     	;# 
  2219  0F10                     	;# 
  2220  0F11                     	;# 
  2221  0F12                     	;# 
  2222  0F13                     	;# 
  2223  0F14                     	;# 
  2224  0F15                     	;# 
  2225  0F16                     	;# 
  2226  0F17                     	;# 
  2227  0F18                     	;# 
  2228  0F19                     	;# 
  2229  0F1A                     	;# 
  2230  0F1B                     	;# 
  2231  0F1C                     	;# 
  2232  0F1D                     	;# 
  2233  0F1E                     	;# 
  2234  0F1F                     	;# 
  2235  0F20                     	;# 
  2236  0F21                     	;# 
  2237  0F22                     	;# 
  2238  0F23                     	;# 
  2239  0F24                     	;# 
  2240  0F25                     	;# 
  2241  0F26                     	;# 
  2242  0F27                     	;# 
  2243  0F28                     	;# 
  2244  0F29                     	;# 
  2245  0F2A                     	;# 
  2246  0F2B                     	;# 
  2247  0F2C                     	;# 
  2248  0F2D                     	;# 
  2249  0F2E                     	;# 
  2250  0F2F                     	;# 
  2251  0F30                     	;# 
  2252  0F31                     	;# 
  2253  0F32                     	;# 
  2254  0F33                     	;# 
  2255  0F34                     	;# 
  2256  0F35                     	;# 
  2257  0F36                     	;# 
  2258  0F37                     	;# 
  2259  0FE4                     	;# 
  2260  0FE5                     	;# 
  2261  0FE6                     	;# 
  2262  0FE7                     	;# 
  2263  0FE8                     	;# 
  2264  0FE9                     	;# 
  2265  0FEA                     	;# 
  2266  0FEB                     	;# 
  2267  0FED                     	;# 
  2268  0FEE                     	;# 
  2269  0FEF                     	;# 
  2270  0000                     	;# 
  2271  0001                     	;# 
  2272  0002                     	;# 
  2273  0003                     	;# 
  2274  0004                     	;# 
  2275  0005                     	;# 
  2276  0006                     	;# 
  2277  0007                     	;# 
  2278  0008                     	;# 
  2279  0009                     	;# 
  2280  000A                     	;# 
  2281  000B                     	;# 
  2282  000C                     	;# 
  2283  000D                     	;# 
  2284  000E                     	;# 
  2285  0010                     	;# 
  2286  0011                     	;# 
  2287  0012                     	;# 
  2288  0013                     	;# 
  2289  0014                     	;# 
  2290  0015                     	;# 
  2291  0015                     	;# 
  2292  0016                     	;# 
  2293  0016                     	;# 
  2294  0017                     	;# 
  2295  0018                     	;# 
  2296  0019                     	;# 
  2297  0019                     	;# 
  2298  001A                     	;# 
  2299  001B                     	;# 
  2300  001C                     	;# 
  2301  001D                     	;# 
  2302  001E                     	;# 
  2303  001F                     	;# 
  2304  008C                     	;# 
  2305  008D                     	;# 
  2306  008E                     	;# 
  2307  0090                     	;# 
  2308  0091                     	;# 
  2309  0092                     	;# 
  2310  0093                     	;# 
  2311  0094                     	;# 
  2312  0097                     	;# 
  2313  009B                     	;# 
  2314  009B                     	;# 
  2315  009C                     	;# 
  2316  009D                     	;# 
  2317  009E                     	;# 
  2318  009F                     	;# 
  2319  010C                     	;# 
  2320  010D                     	;# 
  2321  010E                     	;# 
  2322  0111                     	;# 
  2323  0112                     	;# 
  2324  0113                     	;# 
  2325  0114                     	;# 
  2326  0115                     	;# 
  2327  0116                     	;# 
  2328  0117                     	;# 
  2329  0118                     	;# 
  2330  0119                     	;# 
  2331  018C                     	;# 
  2332  018D                     	;# 
  2333  018E                     	;# 
  2334  0197                     	;# 
  2335  0199                     	;# 
  2336  0199                     	;# 
  2337  0199                     	;# 
  2338  019A                     	;# 
  2339  019A                     	;# 
  2340  019A                     	;# 
  2341  019B                     	;# 
  2342  019B                     	;# 
  2343  019B                     	;# 
  2344  019B                     	;# 
  2345  019B                     	;# 
  2346  019C                     	;# 
  2347  019C                     	;# 
  2348  019C                     	;# 
  2349  019D                     	;# 
  2350  019D                     	;# 
  2351  019D                     	;# 
  2352  019E                     	;# 
  2353  019E                     	;# 
  2354  019E                     	;# 
  2355  019F                     	;# 
  2356  019F                     	;# 
  2357  019F                     	;# 
  2358  019F                     	;# 
  2359  019F                     	;# 
  2360  020C                     	;# 
  2361  020D                     	;# 
  2362  020E                     	;# 
  2363  0211                     	;# 
  2364  0211                     	;# 
  2365  0212                     	;# 
  2366  0212                     	;# 
  2367  0213                     	;# 
  2368  0213                     	;# 
  2369  0214                     	;# 
  2370  0214                     	;# 
  2371  0215                     	;# 
  2372  0215                     	;# 
  2373  0215                     	;# 
  2374  0215                     	;# 
  2375  0216                     	;# 
  2376  0216                     	;# 
  2377  0217                     	;# 
  2378  0217                     	;# 
  2379  0219                     	;# 
  2380  021A                     	;# 
  2381  021B                     	;# 
  2382  021C                     	;# 
  2383  021D                     	;# 
  2384  021D                     	;# 
  2385  021E                     	;# 
  2386  021F                     	;# 
  2387  028C                     	;# 
  2388  028D                     	;# 
  2389  028E                     	;# 
  2390  0291                     	;# 
  2391  0291                     	;# 
  2392  0292                     	;# 
  2393  0293                     	;# 
  2394  0294                     	;# 
  2395  0295                     	;# 
  2396  0295                     	;# 
  2397  0296                     	;# 
  2398  0297                     	;# 
  2399  0298                     	;# 
  2400  029F                     	;# 
  2401  030C                     	;# 
  2402  030D                     	;# 
  2403  030E                     	;# 
  2404  0311                     	;# 
  2405  0311                     	;# 
  2406  0312                     	;# 
  2407  0313                     	;# 
  2408  0314                     	;# 
  2409  0315                     	;# 
  2410  0315                     	;# 
  2411  0316                     	;# 
  2412  0317                     	;# 
  2413  0318                     	;# 
  2414  038C                     	;# 
  2415  038D                     	;# 
  2416  038E                     	;# 
  2417  0391                     	;# 
  2418  0392                     	;# 
  2419  0393                     	;# 
  2420  0394                     	;# 
  2421  0395                     	;# 
  2422  0396                     	;# 
  2423  0397                     	;# 
  2424  0398                     	;# 
  2425  0399                     	;# 
  2426  039A                     	;# 
  2427  039C                     	;# 
  2428  039D                     	;# 
  2429  039E                     	;# 
  2430  039F                     	;# 
  2431  0411                     	;# 
  2432  0411                     	;# 
  2433  0412                     	;# 
  2434  0413                     	;# 
  2435  0414                     	;# 
  2436  0415                     	;# 
  2437  0416                     	;# 
  2438  0417                     	;# 
  2439  0418                     	;# 
  2440  0418                     	;# 
  2441  0419                     	;# 
  2442  041A                     	;# 
  2443  041B                     	;# 
  2444  041C                     	;# 
  2445  041D                     	;# 
  2446  041E                     	;# 
  2447  041F                     	;# 
  2448  0498                     	;# 
  2449  0498                     	;# 
  2450  0499                     	;# 
  2451  049A                     	;# 
  2452  049B                     	;# 
  2453  049B                     	;# 
  2454  049C                     	;# 
  2455  049D                     	;# 
  2456  049E                     	;# 
  2457  049F                     	;# 
  2458  0617                     	;# 
  2459  0618                     	;# 
  2460  0619                     	;# 
  2461  0619                     	;# 
  2462  061A                     	;# 
  2463  061B                     	;# 
  2464  061C                     	;# 
  2465  061C                     	;# 
  2466  061F                     	;# 
  2467  0691                     	;# 
  2468  0692                     	;# 
  2469  0693                     	;# 
  2470  0694                     	;# 
  2471  0695                     	;# 
  2472  0696                     	;# 
  2473  0697                     	;# 
  2474  0698                     	;# 
  2475  0699                     	;# 
  2476  0711                     	;# 
  2477  0712                     	;# 
  2478  0713                     	;# 
  2479  0714                     	;# 
  2480  0715                     	;# 
  2481  0716                     	;# 
  2482  0717                     	;# 
  2483  0718                     	;# 
  2484  0719                     	;# 
  2485  0891                     	;# 
  2486  0891                     	;# 
  2487  0891                     	;# 
  2488  0891                     	;# 
  2489  0891                     	;# 
  2490  0891                     	;# 
  2491  0892                     	;# 
  2492  0892                     	;# 
  2493  0892                     	;# 
  2494  0893                     	;# 
  2495  0893                     	;# 
  2496  0893                     	;# 
  2497  0893                     	;# 
  2498  0893                     	;# 
  2499  0893                     	;# 
  2500  0894                     	;# 
  2501  0894                     	;# 
  2502  0894                     	;# 
  2503  0895                     	;# 
  2504  0895                     	;# 
  2505  0895                     	;# 
  2506  0896                     	;# 
  2507  0896                     	;# 
  2508  0896                     	;# 
  2509  089B                     	;# 
  2510  0911                     	;# 
  2511  0912                     	;# 
  2512  0913                     	;# 
  2513  0914                     	;# 
  2514  0915                     	;# 
  2515  0916                     	;# 
  2516  0918                     	;# 
  2517  0919                     	;# 
  2518  091A                     	;# 
  2519  091B                     	;# 
  2520  091C                     	;# 
  2521  091D                     	;# 
  2522  091E                     	;# 
  2523  091F                     	;# 
  2524  0E0F                     	;# 
  2525  0E10                     	;# 
  2526  0E11                     	;# 
  2527  0E12                     	;# 
  2528  0E13                     	;# 
  2529  0E14                     	;# 
  2530  0E15                     	;# 
  2531  0E16                     	;# 
  2532  0E17                     	;# 
  2533  0E18                     	;# 
  2534  0E19                     	;# 
  2535  0E1A                     	;# 
  2536  0E1B                     	;# 
  2537  0E1C                     	;# 
  2538  0E1D                     	;# 
  2539  0E1E                     	;# 
  2540  0E1F                     	;# 
  2541  0E20                     	;# 
  2542  0E21                     	;# 
  2543  0E22                     	;# 
  2544  0E24                     	;# 
  2545  0E25                     	;# 
  2546  0E28                     	;# 
  2547  0E29                     	;# 
  2548  0E2A                     	;# 
  2549  0E2B                     	;# 
  2550  0E2C                     	;# 
  2551  0E2D                     	;# 
  2552  0E2E                     	;# 
  2553  0E2F                     	;# 
  2554  0E90                     	;# 
  2555  0E91                     	;# 
  2556  0E92                     	;# 
  2557  0E94                     	;# 
  2558  0E95                     	;# 
  2559  0E9C                     	;# 
  2560  0E9D                     	;# 
  2561  0E9E                     	;# 
  2562  0E9F                     	;# 
  2563  0EA0                     	;# 
  2564  0EA1                     	;# 
  2565  0EA2                     	;# 
  2566  0EA3                     	;# 
  2567  0EA4                     	;# 
  2568  0EA5                     	;# 
  2569  0EA6                     	;# 
  2570  0EA7                     	;# 
  2571  0F0F                     	;# 
  2572  0F10                     	;# 
  2573  0F11                     	;# 
  2574  0F12                     	;# 
  2575  0F13                     	;# 
  2576  0F14                     	;# 
  2577  0F15                     	;# 
  2578  0F16                     	;# 
  2579  0F17                     	;# 
  2580  0F18                     	;# 
  2581  0F19                     	;# 
  2582  0F1A                     	;# 
  2583  0F1B                     	;# 
  2584  0F1C                     	;# 
  2585  0F1D                     	;# 
  2586  0F1E                     	;# 
  2587  0F1F                     	;# 
  2588  0F20                     	;# 
  2589  0F21                     	;# 
  2590  0F22                     	;# 
  2591  0F23                     	;# 
  2592  0F24                     	;# 
  2593  0F25                     	;# 
  2594  0F26                     	;# 
  2595  0F27                     	;# 
  2596  0F28                     	;# 
  2597  0F29                     	;# 
  2598  0F2A                     	;# 
  2599  0F2B                     	;# 
  2600  0F2C                     	;# 
  2601  0F2D                     	;# 
  2602  0F2E                     	;# 
  2603  0F2F                     	;# 
  2604  0F30                     	;# 
  2605  0F31                     	;# 
  2606  0F32                     	;# 
  2607  0F33                     	;# 
  2608  0F34                     	;# 
  2609  0F35                     	;# 
  2610  0F36                     	;# 
  2611  0F37                     	;# 
  2612  0FE4                     	;# 
  2613  0FE5                     	;# 
  2614  0FE6                     	;# 
  2615  0FE7                     	;# 
  2616  0FE8                     	;# 
  2617  0FE9                     	;# 
  2618  0FEA                     	;# 
  2619  0FEB                     	;# 
  2620  0FED                     	;# 
  2621  0FEE                     	;# 
  2622  0FEF                     	;# 
  2623  0000                     	;# 
  2624  0001                     	;# 
  2625  0002                     	;# 
  2626  0003                     	;# 
  2627  0004                     	;# 
  2628  0005                     	;# 
  2629  0006                     	;# 
  2630  0007                     	;# 
  2631  0008                     	;# 
  2632  0009                     	;# 
  2633  000A                     	;# 
  2634  000B                     	;# 
  2635  000C                     	;# 
  2636  000D                     	;# 
  2637  000E                     	;# 
  2638  0010                     	;# 
  2639  0011                     	;# 
  2640  0012                     	;# 
  2641  0013                     	;# 
  2642  0014                     	;# 
  2643  0015                     	;# 
  2644  0015                     	;# 
  2645  0016                     	;# 
  2646  0016                     	;# 
  2647  0017                     	;# 
  2648  0018                     	;# 
  2649  0019                     	;# 
  2650  0019                     	;# 
  2651  001A                     	;# 
  2652  001B                     	;# 
  2653  001C                     	;# 
  2654  001D                     	;# 
  2655  001E                     	;# 
  2656  001F                     	;# 
  2657  008C                     	;# 
  2658  008D                     	;# 
  2659  008E                     	;# 
  2660  0090                     	;# 
  2661  0091                     	;# 
  2662  0092                     	;# 
  2663  0093                     	;# 
  2664  0094                     	;# 
  2665  0097                     	;# 
  2666  009B                     	;# 
  2667  009B                     	;# 
  2668  009C                     	;# 
  2669  009D                     	;# 
  2670  009E                     	;# 
  2671  009F                     	;# 
  2672  010C                     	;# 
  2673  010D                     	;# 
  2674  010E                     	;# 
  2675  0111                     	;# 
  2676  0112                     	;# 
  2677  0113                     	;# 
  2678  0114                     	;# 
  2679  0115                     	;# 
  2680  0116                     	;# 
  2681  0117                     	;# 
  2682  0118                     	;# 
  2683  0119                     	;# 
  2684  018C                     	;# 
  2685  018D                     	;# 
  2686  018E                     	;# 
  2687  0197                     	;# 
  2688  0199                     	;# 
  2689  0199                     	;# 
  2690  0199                     	;# 
  2691  019A                     	;# 
  2692  019A                     	;# 
  2693  019A                     	;# 
  2694  019B                     	;# 
  2695  019B                     	;# 
  2696  019B                     	;# 
  2697  019B                     	;# 
  2698  019B                     	;# 
  2699  019C                     	;# 
  2700  019C                     	;# 
  2701  019C                     	;# 
  2702  019D                     	;# 
  2703  019D                     	;# 
  2704  019D                     	;# 
  2705  019E                     	;# 
  2706  019E                     	;# 
  2707  019E                     	;# 
  2708  019F                     	;# 
  2709  019F                     	;# 
  2710  019F                     	;# 
  2711  019F                     	;# 
  2712  019F                     	;# 
  2713  020C                     	;# 
  2714  020D                     	;# 
  2715  020E                     	;# 
  2716  0211                     	;# 
  2717  0211                     	;# 
  2718  0212                     	;# 
  2719  0212                     	;# 
  2720  0213                     	;# 
  2721  0213                     	;# 
  2722  0214                     	;# 
  2723  0214                     	;# 
  2724  0215                     	;# 
  2725  0215                     	;# 
  2726  0215                     	;# 
  2727  0215                     	;# 
  2728  0216                     	;# 
  2729  0216                     	;# 
  2730  0217                     	;# 
  2731  0217                     	;# 
  2732  0219                     	;# 
  2733  021A                     	;# 
  2734  021B                     	;# 
  2735  021C                     	;# 
  2736  021D                     	;# 
  2737  021D                     	;# 
  2738  021E                     	;# 
  2739  021F                     	;# 
  2740  028C                     	;# 
  2741  028D                     	;# 
  2742  028E                     	;# 
  2743  0291                     	;# 
  2744  0291                     	;# 
  2745  0292                     	;# 
  2746  0293                     	;# 
  2747  0294                     	;# 
  2748  0295                     	;# 
  2749  0295                     	;# 
  2750  0296                     	;# 
  2751  0297                     	;# 
  2752  0298                     	;# 
  2753  029F                     	;# 
  2754  030C                     	;# 
  2755  030D                     	;# 
  2756  030E                     	;# 
  2757  0311                     	;# 
  2758  0311                     	;# 
  2759  0312                     	;# 
  2760  0313                     	;# 
  2761  0314                     	;# 
  2762  0315                     	;# 
  2763  0315                     	;# 
  2764  0316                     	;# 
  2765  0317                     	;# 
  2766  0318                     	;# 
  2767  038C                     	;# 
  2768  038D                     	;# 
  2769  038E                     	;# 
  2770  0391                     	;# 
  2771  0392                     	;# 
  2772  0393                     	;# 
  2773  0394                     	;# 
  2774  0395                     	;# 
  2775  0396                     	;# 
  2776  0397                     	;# 
  2777  0398                     	;# 
  2778  0399                     	;# 
  2779  039A                     	;# 
  2780  039C                     	;# 
  2781  039D                     	;# 
  2782  039E                     	;# 
  2783  039F                     	;# 
  2784  0411                     	;# 
  2785  0411                     	;# 
  2786  0412                     	;# 
  2787  0413                     	;# 
  2788  0414                     	;# 
  2789  0415                     	;# 
  2790  0416                     	;# 
  2791  0417                     	;# 
  2792  0418                     	;# 
  2793  0418                     	;# 
  2794  0419                     	;# 
  2795  041A                     	;# 
  2796  041B                     	;# 
  2797  041C                     	;# 
  2798  041D                     	;# 
  2799  041E                     	;# 
  2800  041F                     	;# 
  2801  0498                     	;# 
  2802  0498                     	;# 
  2803  0499                     	;# 
  2804  049A                     	;# 
  2805  049B                     	;# 
  2806  049B                     	;# 
  2807  049C                     	;# 
  2808  049D                     	;# 
  2809  049E                     	;# 
  2810  049F                     	;# 
  2811  0617                     	;# 
  2812  0618                     	;# 
  2813  0619                     	;# 
  2814  0619                     	;# 
  2815  061A                     	;# 
  2816  061B                     	;# 
  2817  061C                     	;# 
  2818  061C                     	;# 
  2819  061F                     	;# 
  2820  0691                     	;# 
  2821  0692                     	;# 
  2822  0693                     	;# 
  2823  0694                     	;# 
  2824  0695                     	;# 
  2825  0696                     	;# 
  2826  0697                     	;# 
  2827  0698                     	;# 
  2828  0699                     	;# 
  2829  0711                     	;# 
  2830  0712                     	;# 
  2831  0713                     	;# 
  2832  0714                     	;# 
  2833  0715                     	;# 
  2834  0716                     	;# 
  2835  0717                     	;# 
  2836  0718                     	;# 
  2837  0719                     	;# 
  2838  0891                     	;# 
  2839  0891                     	;# 
  2840  0891                     	;# 
  2841  0891                     	;# 
  2842  0891                     	;# 
  2843  0891                     	;# 
  2844  0892                     	;# 
  2845  0892                     	;# 
  2846  0892                     	;# 
  2847  0893                     	;# 
  2848  0893                     	;# 
  2849  0893                     	;# 
  2850  0893                     	;# 
  2851  0893                     	;# 
  2852  0893                     	;# 
  2853  0894                     	;# 
  2854  0894                     	;# 
  2855  0894                     	;# 
  2856  0895                     	;# 
  2857  0895                     	;# 
  2858  0895                     	;# 
  2859  0896                     	;# 
  2860  0896                     	;# 
  2861  0896                     	;# 
  2862  089B                     	;# 
  2863  0911                     	;# 
  2864  0912                     	;# 
  2865  0913                     	;# 
  2866  0914                     	;# 
  2867  0915                     	;# 
  2868  0916                     	;# 
  2869  0918                     	;# 
  2870  0919                     	;# 
  2871  091A                     	;# 
  2872  091B                     	;# 
  2873  091C                     	;# 
  2874  091D                     	;# 
  2875  091E                     	;# 
  2876  091F                     	;# 
  2877  0E0F                     	;# 
  2878  0E10                     	;# 
  2879  0E11                     	;# 
  2880  0E12                     	;# 
  2881  0E13                     	;# 
  2882  0E14                     	;# 
  2883  0E15                     	;# 
  2884  0E16                     	;# 
  2885  0E17                     	;# 
  2886  0E18                     	;# 
  2887  0E19                     	;# 
  2888  0E1A                     	;# 
  2889  0E1B                     	;# 
  2890  0E1C                     	;# 
  2891  0E1D                     	;# 
  2892  0E1E                     	;# 
  2893  0E1F                     	;# 
  2894  0E20                     	;# 
  2895  0E21                     	;# 
  2896  0E22                     	;# 
  2897  0E24                     	;# 
  2898  0E25                     	;# 
  2899  0E28                     	;# 
  2900  0E29                     	;# 
  2901  0E2A                     	;# 
  2902  0E2B                     	;# 
  2903  0E2C                     	;# 
  2904  0E2D                     	;# 
  2905  0E2E                     	;# 
  2906  0E2F                     	;# 
  2907  0E90                     	;# 
  2908  0E91                     	;# 
  2909  0E92                     	;# 
  2910  0E94                     	;# 
  2911  0E95                     	;# 
  2912  0E9C                     	;# 
  2913  0E9D                     	;# 
  2914  0E9E                     	;# 
  2915  0E9F                     	;# 
  2916  0EA0                     	;# 
  2917  0EA1                     	;# 
  2918  0EA2                     	;# 
  2919  0EA3                     	;# 
  2920  0EA4                     	;# 
  2921  0EA5                     	;# 
  2922  0EA6                     	;# 
  2923  0EA7                     	;# 
  2924  0F0F                     	;# 
  2925  0F10                     	;# 
  2926  0F11                     	;# 
  2927  0F12                     	;# 
  2928  0F13                     	;# 
  2929  0F14                     	;# 
  2930  0F15                     	;# 
  2931  0F16                     	;# 
  2932  0F17                     	;# 
  2933  0F18                     	;# 
  2934  0F19                     	;# 
  2935  0F1A                     	;# 
  2936  0F1B                     	;# 
  2937  0F1C                     	;# 
  2938  0F1D                     	;# 
  2939  0F1E                     	;# 
  2940  0F1F                     	;# 
  2941  0F20                     	;# 
  2942  0F21                     	;# 
  2943  0F22                     	;# 
  2944  0F23                     	;# 
  2945  0F24                     	;# 
  2946  0F25                     	;# 
  2947  0F26                     	;# 
  2948  0F27                     	;# 
  2949  0F28                     	;# 
  2950  0F29                     	;# 
  2951  0F2A                     	;# 
  2952  0F2B                     	;# 
  2953  0F2C                     	;# 
  2954  0F2D                     	;# 
  2955  0F2E                     	;# 
  2956  0F2F                     	;# 
  2957  0F30                     	;# 
  2958  0F31                     	;# 
  2959  0F32                     	;# 
  2960  0F33                     	;# 
  2961  0F34                     	;# 
  2962  0F35                     	;# 
  2963  0F36                     	;# 
  2964  0F37                     	;# 
  2965  0FE4                     	;# 
  2966  0FE5                     	;# 
  2967  0FE6                     	;# 
  2968  0FE7                     	;# 
  2969  0FE8                     	;# 
  2970  0FE9                     	;# 
  2971  0FEA                     	;# 
  2972  0FEB                     	;# 
  2973  0FED                     	;# 
  2974  0FEE                     	;# 
  2975  0FEF                     	;# 
  2976  0000                     	;# 
  2977  0001                     	;# 
  2978  0002                     	;# 
  2979  0003                     	;# 
  2980  0004                     	;# 
  2981  0005                     	;# 
  2982  0006                     	;# 
  2983  0007                     	;# 
  2984  0008                     	;# 
  2985  0009                     	;# 
  2986  000A                     	;# 
  2987  000B                     	;# 
  2988  000C                     	;# 
  2989  000D                     	;# 
  2990  000E                     	;# 
  2991  0010                     	;# 
  2992  0011                     	;# 
  2993  0012                     	;# 
  2994  0013                     	;# 
  2995  0014                     	;# 
  2996  0015                     	;# 
  2997  0015                     	;# 
  2998  0016                     	;# 
  2999  0016                     	;# 
  3000  0017                     	;# 
  3001  0018                     	;# 
  3002  0019                     	;# 
  3003  0019                     	;# 
  3004  001A                     	;# 
  3005  001B                     	;# 
  3006  001C                     	;# 
  3007  001D                     	;# 
  3008  001E                     	;# 
  3009  001F                     	;# 
  3010  008C                     	;# 
  3011  008D                     	;# 
  3012  008E                     	;# 
  3013  0090                     	;# 
  3014  0091                     	;# 
  3015  0092                     	;# 
  3016  0093                     	;# 
  3017  0094                     	;# 
  3018  0097                     	;# 
  3019  009B                     	;# 
  3020  009B                     	;# 
  3021  009C                     	;# 
  3022  009D                     	;# 
  3023  009E                     	;# 
  3024  009F                     	;# 
  3025  010C                     	;# 
  3026  010D                     	;# 
  3027  010E                     	;# 
  3028  0111                     	;# 
  3029  0112                     	;# 
  3030  0113                     	;# 
  3031  0114                     	;# 
  3032  0115                     	;# 
  3033  0116                     	;# 
  3034  0117                     	;# 
  3035  0118                     	;# 
  3036  0119                     	;# 
  3037  018C                     	;# 
  3038  018D                     	;# 
  3039  018E                     	;# 
  3040  0197                     	;# 
  3041  0199                     	;# 
  3042  0199                     	;# 
  3043  0199                     	;# 
  3044  019A                     	;# 
  3045  019A                     	;# 
  3046  019A                     	;# 
  3047  019B                     	;# 
  3048  019B                     	;# 
  3049  019B                     	;# 
  3050  019B                     	;# 
  3051  019B                     	;# 
  3052  019C                     	;# 
  3053  019C                     	;# 
  3054  019C                     	;# 
  3055  019D                     	;# 
  3056  019D                     	;# 
  3057  019D                     	;# 
  3058  019E                     	;# 
  3059  019E                     	;# 
  3060  019E                     	;# 
  3061  019F                     	;# 
  3062  019F                     	;# 
  3063  019F                     	;# 
  3064  019F                     	;# 
  3065  019F                     	;# 
  3066  020C                     	;# 
  3067  020D                     	;# 
  3068  020E                     	;# 
  3069  0211                     	;# 
  3070  0211                     	;# 
  3071  0212                     	;# 
  3072  0212                     	;# 
  3073  0213                     	;# 
  3074  0213                     	;# 
  3075  0214                     	;# 
  3076  0214                     	;# 
  3077  0215                     	;# 
  3078  0215                     	;# 
  3079  0215                     	;# 
  3080  0215                     	;# 
  3081  0216                     	;# 
  3082  0216                     	;# 
  3083  0217                     	;# 
  3084  0217                     	;# 
  3085  0219                     	;# 
  3086  021A                     	;# 
  3087  021B                     	;# 
  3088  021C                     	;# 
  3089  021D                     	;# 
  3090  021D                     	;# 
  3091  021E                     	;# 
  3092  021F                     	;# 
  3093  028C                     	;# 
  3094  028D                     	;# 
  3095  028E                     	;# 
  3096  0291                     	;# 
  3097  0291                     	;# 
  3098  0292                     	;# 
  3099  0293                     	;# 
  3100  0294                     	;# 
  3101  0295                     	;# 
  3102  0295                     	;# 
  3103  0296                     	;# 
  3104  0297                     	;# 
  3105  0298                     	;# 
  3106  029F                     	;# 
  3107  030C                     	;# 
  3108  030D                     	;# 
  3109  030E                     	;# 
  3110  0311                     	;# 
  3111  0311                     	;# 
  3112  0312                     	;# 
  3113  0313                     	;# 
  3114  0314                     	;# 
  3115  0315                     	;# 
  3116  0315                     	;# 
  3117  0316                     	;# 
  3118  0317                     	;# 
  3119  0318                     	;# 
  3120  038C                     	;# 
  3121  038D                     	;# 
  3122  038E                     	;# 
  3123  0391                     	;# 
  3124  0392                     	;# 
  3125  0393                     	;# 
  3126  0394                     	;# 
  3127  0395                     	;# 
  3128  0396                     	;# 
  3129  0397                     	;# 
  3130  0398                     	;# 
  3131  0399                     	;# 
  3132  039A                     	;# 
  3133  039C                     	;# 
  3134  039D                     	;# 
  3135  039E                     	;# 
  3136  039F                     	;# 
  3137  0411                     	;# 
  3138  0411                     	;# 
  3139  0412                     	;# 
  3140  0413                     	;# 
  3141  0414                     	;# 
  3142  0415                     	;# 
  3143  0416                     	;# 
  3144  0417                     	;# 
  3145  0418                     	;# 
  3146  0418                     	;# 
  3147  0419                     	;# 
  3148  041A                     	;# 
  3149  041B                     	;# 
  3150  041C                     	;# 
  3151  041D                     	;# 
  3152  041E                     	;# 
  3153  041F                     	;# 
  3154  0498                     	;# 
  3155  0498                     	;# 
  3156  0499                     	;# 
  3157  049A                     	;# 
  3158  049B                     	;# 
  3159  049B                     	;# 
  3160  049C                     	;# 
  3161  049D                     	;# 
  3162  049E                     	;# 
  3163  049F                     	;# 
  3164  0617                     	;# 
  3165  0618                     	;# 
  3166  0619                     	;# 
  3167  0619                     	;# 
  3168  061A                     	;# 
  3169  061B                     	;# 
  3170  061C                     	;# 
  3171  061C                     	;# 
  3172  061F                     	;# 
  3173  0691                     	;# 
  3174  0692                     	;# 
  3175  0693                     	;# 
  3176  0694                     	;# 
  3177  0695                     	;# 
  3178  0696                     	;# 
  3179  0697                     	;# 
  3180  0698                     	;# 
  3181  0699                     	;# 
  3182  0711                     	;# 
  3183  0712                     	;# 
  3184  0713                     	;# 
  3185  0714                     	;# 
  3186  0715                     	;# 
  3187  0716                     	;# 
  3188  0717                     	;# 
  3189  0718                     	;# 
  3190  0719                     	;# 
  3191  0891                     	;# 
  3192  0891                     	;# 
  3193  0891                     	;# 
  3194  0891                     	;# 
  3195  0891                     	;# 
  3196  0891                     	;# 
  3197  0892                     	;# 
  3198  0892                     	;# 
  3199  0892                     	;# 
  3200  0893                     	;# 
  3201  0893                     	;# 
  3202  0893                     	;# 
  3203  0893                     	;# 
  3204  0893                     	;# 
  3205  0893                     	;# 
  3206  0894                     	;# 
  3207  0894                     	;# 
  3208  0894                     	;# 
  3209  0895                     	;# 
  3210  0895                     	;# 
  3211  0895                     	;# 
  3212  0896                     	;# 
  3213  0896                     	;# 
  3214  0896                     	;# 
  3215  089B                     	;# 
  3216  0911                     	;# 
  3217  0912                     	;# 
  3218  0913                     	;# 
  3219  0914                     	;# 
  3220  0915                     	;# 
  3221  0916                     	;# 
  3222  0918                     	;# 
  3223  0919                     	;# 
  3224  091A                     	;# 
  3225  091B                     	;# 
  3226  091C                     	;# 
  3227  091D                     	;# 
  3228  091E                     	;# 
  3229  091F                     	;# 
  3230  0E0F                     	;# 
  3231  0E10                     	;# 
  3232  0E11                     	;# 
  3233  0E12                     	;# 
  3234  0E13                     	;# 
  3235  0E14                     	;# 
  3236  0E15                     	;# 
  3237  0E16                     	;# 
  3238  0E17                     	;# 
  3239  0E18                     	;# 
  3240  0E19                     	;# 
  3241  0E1A                     	;# 
  3242  0E1B                     	;# 
  3243  0E1C                     	;# 
  3244  0E1D                     	;# 
  3245  0E1E                     	;# 
  3246  0E1F                     	;# 
  3247  0E20                     	;# 
  3248  0E21                     	;# 
  3249  0E22                     	;# 
  3250  0E24                     	;# 
  3251  0E25                     	;# 
  3252  0E28                     	;# 
  3253  0E29                     	;# 
  3254  0E2A                     	;# 
  3255  0E2B                     	;# 
  3256  0E2C                     	;# 
  3257  0E2D                     	;# 
  3258  0E2E                     	;# 
  3259  0E2F                     	;# 
  3260  0E90                     	;# 
  3261  0E91                     	;# 
  3262  0E92                     	;# 
  3263  0E94                     	;# 
  3264  0E95                     	;# 
  3265  0E9C                     	;# 
  3266  0E9D                     	;# 
  3267  0E9E                     	;# 
  3268  0E9F                     	;# 
  3269  0EA0                     	;# 
  3270  0EA1                     	;# 
  3271  0EA2                     	;# 
  3272  0EA3                     	;# 
  3273  0EA4                     	;# 
  3274  0EA5                     	;# 
  3275  0EA6                     	;# 
  3276  0EA7                     	;# 
  3277  0F0F                     	;# 
  3278  0F10                     	;# 
  3279  0F11                     	;# 
  3280  0F12                     	;# 
  3281  0F13                     	;# 
  3282  0F14                     	;# 
  3283  0F15                     	;# 
  3284  0F16                     	;# 
  3285  0F17                     	;# 
  3286  0F18                     	;# 
  3287  0F19                     	;# 
  3288  0F1A                     	;# 
  3289  0F1B                     	;# 
  3290  0F1C                     	;# 
  3291  0F1D                     	;# 
  3292  0F1E                     	;# 
  3293  0F1F                     	;# 
  3294  0F20                     	;# 
  3295  0F21                     	;# 
  3296  0F22                     	;# 
  3297  0F23                     	;# 
  3298  0F24                     	;# 
  3299  0F25                     	;# 
  3300  0F26                     	;# 
  3301  0F27                     	;# 
  3302  0F28                     	;# 
  3303  0F29                     	;# 
  3304  0F2A                     	;# 
  3305  0F2B                     	;# 
  3306  0F2C                     	;# 
  3307  0F2D                     	;# 
  3308  0F2E                     	;# 
  3309  0F2F                     	;# 
  3310  0F30                     	;# 
  3311  0F31                     	;# 
  3312  0F32                     	;# 
  3313  0F33                     	;# 
  3314  0F34                     	;# 
  3315  0F35                     	;# 
  3316  0F36                     	;# 
  3317  0F37                     	;# 
  3318  0FE4                     	;# 
  3319  0FE5                     	;# 
  3320  0FE6                     	;# 
  3321  0FE7                     	;# 
  3322  0FE8                     	;# 
  3323  0FE9                     	;# 
  3324  0FEA                     	;# 
  3325  0FEB                     	;# 
  3326  0FED                     	;# 
  3327  0FEE                     	;# 
  3328  0FEF                     	;# 
  3329  0000                     	;# 
  3330  0001                     	;# 
  3331  0002                     	;# 
  3332  0003                     	;# 
  3333  0004                     	;# 
  3334  0005                     	;# 
  3335  0006                     	;# 
  3336  0007                     	;# 
  3337  0008                     	;# 
  3338  0009                     	;# 
  3339  000A                     	;# 
  3340  000B                     	;# 
  3341  000C                     	;# 
  3342  000D                     	;# 
  3343  000E                     	;# 
  3344  0010                     	;# 
  3345  0011                     	;# 
  3346  0012                     	;# 
  3347  0013                     	;# 
  3348  0014                     	;# 
  3349  0015                     	;# 
  3350  0015                     	;# 
  3351  0016                     	;# 
  3352  0016                     	;# 
  3353  0017                     	;# 
  3354  0018                     	;# 
  3355  0019                     	;# 
  3356  0019                     	;# 
  3357  001A                     	;# 
  3358  001B                     	;# 
  3359  001C                     	;# 
  3360  001D                     	;# 
  3361  001E                     	;# 
  3362  001F                     	;# 
  3363  008C                     	;# 
  3364  008D                     	;# 
  3365  008E                     	;# 
  3366  0090                     	;# 
  3367  0091                     	;# 
  3368  0092                     	;# 
  3369  0093                     	;# 
  3370  0094                     	;# 
  3371  0097                     	;# 
  3372  009B                     	;# 
  3373  009B                     	;# 
  3374  009C                     	;# 
  3375  009D                     	;# 
  3376  009E                     	;# 
  3377  009F                     	;# 
  3378  010C                     	;# 
  3379  010D                     	;# 
  3380  010E                     	;# 
  3381  0111                     	;# 
  3382  0112                     	;# 
  3383  0113                     	;# 
  3384  0114                     	;# 
  3385  0115                     	;# 
  3386  0116                     	;# 
  3387  0117                     	;# 
  3388  0118                     	;# 
  3389  0119                     	;# 
  3390  018C                     	;# 
  3391  018D                     	;# 
  3392  018E                     	;# 
  3393  0197                     	;# 
  3394  0199                     	;# 
  3395  0199                     	;# 
  3396  0199                     	;# 
  3397  019A                     	;# 
  3398  019A                     	;# 
  3399  019A                     	;# 
  3400  019B                     	;# 
  3401  019B                     	;# 
  3402  019B                     	;# 
  3403  019B                     	;# 
  3404  019B                     	;# 
  3405  019C                     	;# 
  3406  019C                     	;# 
  3407  019C                     	;# 
  3408  019D                     	;# 
  3409  019D                     	;# 
  3410  019D                     	;# 
  3411  019E                     	;# 
  3412  019E                     	;# 
  3413  019E                     	;# 
  3414  019F                     	;# 
  3415  019F                     	;# 
  3416  019F                     	;# 
  3417  019F                     	;# 
  3418  019F                     	;# 
  3419  020C                     	;# 
  3420  020D                     	;# 
  3421  020E                     	;# 
  3422  0211                     	;# 
  3423  0211                     	;# 
  3424  0212                     	;# 
  3425  0212                     	;# 
  3426  0213                     	;# 
  3427  0213                     	;# 
  3428  0214                     	;# 
  3429  0214                     	;# 
  3430  0215                     	;# 
  3431  0215                     	;# 
  3432  0215                     	;# 
  3433  0215                     	;# 
  3434  0216                     	;# 
  3435  0216                     	;# 
  3436  0217                     	;# 
  3437  0217                     	;# 
  3438  0219                     	;# 
  3439  021A                     	;# 
  3440  021B                     	;# 
  3441  021C                     	;# 
  3442  021D                     	;# 
  3443  021D                     	;# 
  3444  021E                     	;# 
  3445  021F                     	;# 
  3446  028C                     	;# 
  3447  028D                     	;# 
  3448  028E                     	;# 
  3449  0291                     	;# 
  3450  0291                     	;# 
  3451  0292                     	;# 
  3452  0293                     	;# 
  3453  0294                     	;# 
  3454  0295                     	;# 
  3455  0295                     	;# 
  3456  0296                     	;# 
  3457  0297                     	;# 
  3458  0298                     	;# 
  3459  029F                     	;# 
  3460  030C                     	;# 
  3461  030D                     	;# 
  3462  030E                     	;# 
  3463  0311                     	;# 
  3464  0311                     	;# 
  3465  0312                     	;# 
  3466  0313                     	;# 
  3467  0314                     	;# 
  3468  0315                     	;# 
  3469  0315                     	;# 
  3470  0316                     	;# 
  3471  0317                     	;# 
  3472  0318                     	;# 
  3473  038C                     	;# 
  3474  038D                     	;# 
  3475  038E                     	;# 
  3476  0391                     	;# 
  3477  0392                     	;# 
  3478  0393                     	;# 
  3479  0394                     	;# 
  3480  0395                     	;# 
  3481  0396                     	;# 
  3482  0397                     	;# 
  3483  0398                     	;# 
  3484  0399                     	;# 
  3485  039A                     	;# 
  3486  039C                     	;# 
  3487  039D                     	;# 
  3488  039E                     	;# 
  3489  039F                     	;# 
  3490  0411                     	;# 
  3491  0411                     	;# 
  3492  0412                     	;# 
  3493  0413                     	;# 
  3494  0414                     	;# 
  3495  0415                     	;# 
  3496  0416                     	;# 
  3497  0417                     	;# 
  3498  0418                     	;# 
  3499  0418                     	;# 
  3500  0419                     	;# 
  3501  041A                     	;# 
  3502  041B                     	;# 
  3503  041C                     	;# 
  3504  041D                     	;# 
  3505  041E                     	;# 
  3506  041F                     	;# 
  3507  0498                     	;# 
  3508  0498                     	;# 
  3509  0499                     	;# 
  3510  049A                     	;# 
  3511  049B                     	;# 
  3512  049B                     	;# 
  3513  049C                     	;# 
  3514  049D                     	;# 
  3515  049E                     	;# 
  3516  049F                     	;# 
  3517  0617                     	;# 
  3518  0618                     	;# 
  3519  0619                     	;# 
  3520  0619                     	;# 
  3521  061A                     	;# 
  3522  061B                     	;# 
  3523  061C                     	;# 
  3524  061C                     	;# 
  3525  061F                     	;# 
  3526  0691                     	;# 
  3527  0692                     	;# 
  3528  0693                     	;# 
  3529  0694                     	;# 
  3530  0695                     	;# 
  3531  0696                     	;# 
  3532  0697                     	;# 
  3533  0698                     	;# 
  3534  0699                     	;# 
  3535  0711                     	;# 
  3536  0712                     	;# 
  3537  0713                     	;# 
  3538  0714                     	;# 
  3539  0715                     	;# 
  3540  0716                     	;# 
  3541  0717                     	;# 
  3542  0718                     	;# 
  3543  0719                     	;# 
  3544  0891                     	;# 
  3545  0891                     	;# 
  3546  0891                     	;# 
  3547  0891                     	;# 
  3548  0891                     	;# 
  3549  0891                     	;# 
  3550  0892                     	;# 
  3551  0892                     	;# 
  3552  0892                     	;# 
  3553  0893                     	;# 
  3554  0893                     	;# 
  3555  0893                     	;# 
  3556  0893                     	;# 
  3557  0893                     	;# 
  3558  0893                     	;# 
  3559  0894                     	;# 
  3560  0894                     	;# 
  3561  0894                     	;# 
  3562  0895                     	;# 
  3563  0895                     	;# 
  3564  0895                     	;# 
  3565  0896                     	;# 
  3566  0896                     	;# 
  3567  0896                     	;# 
  3568  089B                     	;# 
  3569  0911                     	;# 
  3570  0912                     	;# 
  3571  0913                     	;# 
  3572  0914                     	;# 
  3573  0915                     	;# 
  3574  0916                     	;# 
  3575  0918                     	;# 
  3576  0919                     	;# 
  3577  091A                     	;# 
  3578  091B                     	;# 
  3579  091C                     	;# 
  3580  091D                     	;# 
  3581  091E                     	;# 
  3582  091F                     	;# 
  3583  0E0F                     	;# 
  3584  0E10                     	;# 
  3585  0E11                     	;# 
  3586  0E12                     	;# 
  3587  0E13                     	;# 
  3588  0E14                     	;# 
  3589  0E15                     	;# 
  3590  0E16                     	;# 
  3591  0E17                     	;# 
  3592  0E18                     	;# 
  3593  0E19                     	;# 
  3594  0E1A                     	;# 
  3595  0E1B                     	;# 
  3596  0E1C                     	;# 
  3597  0E1D                     	;# 
  3598  0E1E                     	;# 
  3599  0E1F                     	;# 
  3600  0E20                     	;# 
  3601  0E21                     	;# 
  3602  0E22                     	;# 
  3603  0E24                     	;# 
  3604  0E25                     	;# 
  3605  0E28                     	;# 
  3606  0E29                     	;# 
  3607  0E2A                     	;# 
  3608  0E2B                     	;# 
  3609  0E2C                     	;# 
  3610  0E2D                     	;# 
  3611  0E2E                     	;# 
  3612  0E2F                     	;# 
  3613  0E90                     	;# 
  3614  0E91                     	;# 
  3615  0E92                     	;# 
  3616  0E94                     	;# 
  3617  0E95                     	;# 
  3618  0E9C                     	;# 
  3619  0E9D                     	;# 
  3620  0E9E                     	;# 
  3621  0E9F                     	;# 
  3622  0EA0                     	;# 
  3623  0EA1                     	;# 
  3624  0EA2                     	;# 
  3625  0EA3                     	;# 
  3626  0EA4                     	;# 
  3627  0EA5                     	;# 
  3628  0EA6                     	;# 
  3629  0EA7                     	;# 
  3630  0F0F                     	;# 
  3631  0F10                     	;# 
  3632  0F11                     	;# 
  3633  0F12                     	;# 
  3634  0F13                     	;# 
  3635  0F14                     	;# 
  3636  0F15                     	;# 
  3637  0F16                     	;# 
  3638  0F17                     	;# 
  3639  0F18                     	;# 
  3640  0F19                     	;# 
  3641  0F1A                     	;# 
  3642  0F1B                     	;# 
  3643  0F1C                     	;# 
  3644  0F1D                     	;# 
  3645  0F1E                     	;# 
  3646  0F1F                     	;# 
  3647  0F20                     	;# 
  3648  0F21                     	;# 
  3649  0F22                     	;# 
  3650  0F23                     	;# 
  3651  0F24                     	;# 
  3652  0F25                     	;# 
  3653  0F26                     	;# 
  3654  0F27                     	;# 
  3655  0F28                     	;# 
  3656  0F29                     	;# 
  3657  0F2A                     	;# 
  3658  0F2B                     	;# 
  3659  0F2C                     	;# 
  3660  0F2D                     	;# 
  3661  0F2E                     	;# 
  3662  0F2F                     	;# 
  3663  0F30                     	;# 
  3664  0F31                     	;# 
  3665  0F32                     	;# 
  3666  0F33                     	;# 
  3667  0F34                     	;# 
  3668  0F35                     	;# 
  3669  0F36                     	;# 
  3670  0F37                     	;# 
  3671  0FE4                     	;# 
  3672  0FE5                     	;# 
  3673  0FE6                     	;# 
  3674  0FE7                     	;# 
  3675  0FE8                     	;# 
  3676  0FE9                     	;# 
  3677  0FEA                     	;# 
  3678  0FEB                     	;# 
  3679  0FED                     	;# 
  3680  0FEE                     	;# 
  3681  0FEF                     	;# 
  3682                           
  3683                           	psect	idataBANK0
  3684  09DD                     __pidataBANK0:	
  3685                           
  3686                           ;initializer for _name
  3687  09DD  3401               	retlw	1
  3688                           
  3689                           	psect	stringtext1
  3690  1000                     __pstringtext1:	
  3691  1000                     _fsmStateTable:	
  3692  1000  34FB               	retlw	low _do_I2C_IDLE
  3693  1001  3407               	retlw	high _do_I2C_IDLE
  3694  1002  347A               	retlw	low _do_I2C_SEND_ADR_READ
  3695  1003  340A               	retlw	high _do_I2C_SEND_ADR_READ
  3696  1004  345D               	retlw	low _do_I2C_SEND_ADR_WRITE
  3697  1005  340A               	retlw	high _do_I2C_SEND_ADR_WRITE
  3698  1006  34B1               	retlw	low _do_I2C_TX
  3699  1007  340F               	retlw	high _do_I2C_TX
  3700  1008  3421               	retlw	low _do_I2C_RX
  3701  1009  340F               	retlw	high _do_I2C_RX
  3702  100A  3444               	retlw	low _do_I2C_RCEN
  3703  100B  340A               	retlw	high _do_I2C_RCEN
  3704  100C  34BB               	retlw	low _do_I2C_TX_EMPTY
  3705  100D  340D               	retlw	high _do_I2C_TX_EMPTY
  3706  100E  341B               	retlw	low _do_I2C_SEND_RESTART_READ
  3707  100F  340A               	retlw	high _do_I2C_SEND_RESTART_READ
  3708  1010  341F               	retlw	low _do_I2C_SEND_RESTART_WRITE
  3709  1011  340A               	retlw	high _do_I2C_SEND_RESTART_WRITE
  3710  1012  3423               	retlw	low _do_I2C_SEND_RESTART
  3711  1013  340A               	retlw	high _do_I2C_SEND_RESTART
  3712  1014  3427               	retlw	low _do_I2C_SEND_STOP
  3713  1015  340A               	retlw	high _do_I2C_SEND_STOP
  3714  1016  342B               	retlw	low _do_I2C_DO_ACK
  3715  1017  340A               	retlw	high _do_I2C_DO_ACK
  3716  1018  342F               	retlw	low _do_I2C_DO_NACK_STOP
  3717  1019  340A               	retlw	high _do_I2C_DO_NACK_STOP
  3718  101A  3433               	retlw	low _do_I2C_DO_NACK_RESTART
  3719  101B  340A               	retlw	high _do_I2C_DO_NACK_RESTART
  3720  101C  3456               	retlw	low _do_I2C_RESET
  3721  101D  340A               	retlw	high _do_I2C_RESET
  3722  101E  3438               	retlw	low _do_I2C_DO_ADDRESS_NACK
  3723  101F  340D               	retlw	high _do_I2C_DO_ADDRESS_NACK
  3724  1020                     __end_of_fsmStateTable:	
  3725  0011                     _PIR1bits	set	17
  3726  000B                     _INTCONbits	set	11
  3727  0010                     _PIR0bits	set	16
  3728  008E                     _TRISC	set	142
  3729  008D                     _TRISB	set	141
  3730  008C                     _TRISA	set	140
  3731  0097                     _WDTCON	set	151
  3732  0091                     _PIE1bits	set	145
  3733  0090                     _PIE0bits	set	144
  3734  010E                     _LATCbits	set	270
  3735  010E                     _LATC	set	270
  3736  010D                     _LATB	set	269
  3737  010C                     _LATA	set	268
  3738  018C                     _ANSELA	set	396
  3739  018D                     _ANSELB	set	397
  3740  018E                     _ANSELC	set	398
  3741  021C                     _SSP2STATbits	set	540
  3742  0219                     _SSP2BUF	set	537
  3743  021D                     _SSP2CON1bits	set	541
  3744  021A                     _SSP2ADD	set	538
  3745  021D                     _SSP2CON1	set	541
  3746  021C                     _SSP2STAT	set	540
  3747  0214                     _SSP1STATbits	set	532
  3748  0213                     _SSP1MSK	set	531
  3749  0211                     _SSP1BUF	set	529
  3750  0216                     _SSP1CON2bits	set	534
  3751  0212                     _SSP1ADD	set	530
  3752  0216                     _SSP1CON2	set	534
  3753  0215                     _SSP1CON1	set	533
  3754  0214                     _SSP1STAT	set	532
  3755  0215                     _SSP1CON1bits	set	533
  3756  020E                     _WPUC	set	526
  3757  020C                     _WPUA	set	524
  3758  020D                     _WPUB	set	525
  3759  028E                     _ODCONC	set	654
  3760  028D                     _ODCONB	set	653
  3761  028C                     _ODCONA	set	652
  3762  030E                     _SLRCONC	set	782
  3763  030D                     _SLRCONB	set	781
  3764  030C                     _SLRCONA	set	780
  3765  0916                     _PMD5	set	2326
  3766  0915                     _PMD4	set	2325
  3767  0914                     _PMD3	set	2324
  3768  0913                     _PMD2	set	2323
  3769  0912                     _PMD1	set	2322
  3770  0911                     _PMD0	set	2321
  3771  091E                     _OSCTUNE	set	2334
  3772  091F                     _OSCFRQ	set	2335
  3773  091D                     _OSCEN	set	2333
  3774  091B                     _OSCCON3	set	2331
  3775  0919                     _OSCCON1	set	2329
  3776  0E1D                     _SSP2CLKPPS	set	3613
  3777  0E21                     _SSP1DATPPS	set	3617
  3778  0E20                     _SSP1CLKPPS	set	3616
  3779  0E1E                     _SSP2DATPPS	set	3614
  3780  0EA2                     _RC2PPS	set	3746
  3781  0E9D                     _RB5PPS	set	3741
  3782  0E9F                     _RB7PPS	set	3743
  3783  0E9E                     _RB6PPS	set	3742
  3784  1020                     STR_4:	
  3785  1020  3441               	retlw	65	;'A'
  3786  1021  346C               	retlw	108	;'l'
  3787  1022  3465               	retlw	101	;'e'
  3788  1023  3478               	retlw	120	;'x'
  3789  1024  3461               	retlw	97	;'a'
  3790  1025  346E               	retlw	110	;'n'
  3791  1026  3464               	retlw	100	;'d'
  3792  1027  3472               	retlw	114	;'r'
  3793  1028  3461               	retlw	97	;'a'
  3794  1029  3420               	retlw	32	;' '
  3795  102A  3446               	retlw	70	;'F'
  3796  102B  3479               	retlw	121	;'y'
  3797  102C  3466               	retlw	102	;'f'
  3798  102D  3466               	retlw	102	;'f'
  3799  102E  3465               	retlw	101	;'e'
  3800  102F  3400               	retlw	0
  3801                           
  3802                           	psect	stringtext2
  3803  1030                     __pstringtext2:	
  3804  1030                     STR_3:	
  3805  1030  344E               	retlw	78	;'N'
  3806  1031  346F               	retlw	111	;'o'
  3807  1032  3465               	retlw	101	;'e'
  3808  1033  346C               	retlw	108	;'l'
  3809  1034  346C               	retlw	108	;'l'
  3810  1035  3465               	retlw	101	;'e'
  3811  1036  3420               	retlw	32	;' '
  3812  1037  3443               	retlw	67	;'C'
  3813  1038  3472               	retlw	114	;'r'
  3814  1039  3461               	retlw	97	;'a'
  3815  103A  346E               	retlw	110	;'n'
  3816  103B  3465               	retlw	101	;'e'
  3817  103C  3400               	retlw	0
  3818                           
  3819                           	psect	stringtext3
  3820  103D                     __pstringtext3:	
  3821  103D                     STR_2:	
  3822  103D  344A               	retlw	74	;'J'
  3823  103E  3475               	retlw	117	;'u'
  3824  103F  3473               	retlw	115	;'s'
  3825  1040  3474               	retlw	116	;'t'
  3826  1041  3469               	retlw	105	;'i'
  3827  1042  346E               	retlw	110	;'n'
  3828  1043  3420               	retlw	32	;' '
  3829  1044  3443               	retlw	67	;'C'
  3830  1045  3468               	retlw	104	;'h'
  3831  1046  3461               	retlw	97	;'a'
  3832  1047  346E               	retlw	110	;'n'
  3833  1048  3400               	retlw	0
  3834                           
  3835                           	psect	stringtext4
  3836  1049                     __pstringtext4:	
  3837  1049                     STR_5:	
  3838  1049  344A               	retlw	74	;'J'
  3839  104A  3465               	retlw	101	;'e'
  3840  104B  3466               	retlw	102	;'f'
  3841  104C  3466               	retlw	102	;'f'
  3842  104D  3420               	retlw	32	;' '
  3843  104E  3447               	retlw	71	;'G'
  3844  104F  3465               	retlw	101	;'e'
  3845  1050  3469               	retlw	105	;'i'
  3846  1051  3473               	retlw	115	;'s'
  3847  1052  3473               	retlw	115	;'s'
  3848  1053  3400               	retlw	0
  3849                           
  3850                           	psect	stringtext5
  3851  1054                     __pstringtext5:	
  3852  1054                     STR_1:	
  3853  1054  3449               	retlw	73	;'I'
  3854  1055  3420               	retlw	32	;' '
  3855  1056  3473               	retlw	115	;'s'
  3856  1057  3475               	retlw	117	;'u'
  3857  1058  3463               	retlw	99	;'c'
  3858  1059  346B               	retlw	107	;'k'
  3859  105A  3400               	retlw	0
  3860                           
  3861                           	psect	stringtext6
  3862  0000                     __pstringtext6:	
  3863                           
  3864                           ; #config settings
  3865  0000                     
  3866                           	psect	cinit
  3867  002D                     start_initialization:	
  3868  002D                     __initialization:	
  3869                           
  3870                           ; Initialize objects allocated to BANK0
  3871  002D  3189  21DD  3180   	fcall	__pidataBANK0	;fetch initializer
  3872  0030  00EE               	movwf	__pdataBANK0& (0+127)
  3873                           
  3874                           ; Clear objects allocated to COMMON
  3875  0031  01F0               	clrf	__pbssCOMMON& (0+127)
  3876  0032  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
  3877  0033  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
  3878  0034  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
  3879  0035  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
  3880  0036  01F5               	clrf	(__pbssCOMMON+5)& (0+127)
  3881                           
  3882                           ; Clear objects allocated to BANK0
  3883  0037  305D               	movlw	low __pbssBANK0
  3884  0038  0084               	movwf	4
  3885  0039  3000               	movlw	high __pbssBANK0
  3886  003A  0085               	movwf	5
  3887  003B  3011               	movlw	17
  3888  003C  318A  2250  3180   	fcall	clear_ram0
  3889                           
  3890                           ; Clear objects allocated to BANK2
  3891  003F  0022               	movlb	2	; select bank2
  3892  0040  01E0               	clrf	__pbssBANK2& (0+127)
  3893  0041  01E1               	clrf	(__pbssBANK2+1)& (0+127)
  3894                           
  3895                           ; Clear objects allocated to BANK3
  3896  0042  30A0               	movlw	low __pbssBANK3
  3897  0043  0084               	movwf	4
  3898  0044  3001               	movlw	high __pbssBANK3
  3899  0045  0085               	movwf	5
  3900  0046  301D               	movlw	29
  3901  0047  318A  2250  3180   	fcall	clear_ram0
  3902                           
  3903                           ; Clear objects allocated to BANK4
  3904  004A  3020               	movlw	low __pbssBANK4
  3905  004B  0084               	movwf	4
  3906  004C  3002               	movlw	high __pbssBANK4
  3907  004D  0085               	movwf	5
  3908  004E  3044               	movlw	68
  3909  004F  318A  2250         	fcall	clear_ram0
  3910  0051                     end_of_initialization:	
  3911                           ;End of C runtime variable initialization code
  3912                           
  3913  0051                     __end_of__initialization:	
  3914  0051  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3915  0052  0020               	movlb	0
  3916  0053  318D  2D8E         	ljmp	_main	;jump to C main() function
  3917                           
  3918                           	psect	bssCOMMON
  3919  0070                     __pbssCOMMON:	
  3920  0070                     _i2c1_driver_busCollisionISR:	
  3921  0070                     	ds	2
  3922  0072                     _b_i2c_error_flag:	
  3923  0072                     	ds	1
  3924  0073                     _handleGestureFlag:	
  3925  0073                     	ds	1
  3926  0074                     _adcResult:	
  3927  0074                     	ds	1
  3928  0075                     _button:	
  3929  0075                     	ds	1
  3930                           
  3931                           	psect	bssBANK0
  3932  005D                     __pbssBANK0:	
  3933  005D                     _gesture_state_:	
  3934  005D                     	ds	2
  3935  005F                     _gesture_far_count_:	
  3936  005F                     	ds	2
  3937  0061                     _gesture_near_count_:	
  3938  0061                     	ds	2
  3939  0063                     _gesture_lr_count_:	
  3940  0063                     	ds	2
  3941  0065                     _gesture_ud_count_:	
  3942  0065                     	ds	2
  3943  0067                     _gesture_lr_delta_:	
  3944  0067                     	ds	2
  3945  0069                     _gesture_ud_delta_:	
  3946  0069                     	ds	2
  3947  006B                     _i2c1_driver_i2cISR:	
  3948  006B                     	ds	2
  3949  006D                     _printed:	
  3950  006D                     	ds	1
  3951                           
  3952                           	psect	dataBANK0
  3953  006E                     __pdataBANK0:	
  3954  006E                     _name:	
  3955  006E                     	ds	1
  3956                           
  3957                           	psect	bssBANK2
  3958  0160                     __pbssBANK2:	
  3959  0160                     _gesture_motion_:	
  3960  0160                     	ds	2
  3961                           
  3962                           	psect	bssBANK3
  3963  01A0                     __pbssBANK3:	
  3964  01A0                     _i2c_status:	
  3965  01A0                     	ds	29
  3966                           
  3967                           	psect	bssBANK4
  3968  0220                     __pbssBANK4:	
  3969  0220                     _gesture_data_:	
  3970  0220                     	ds	68
  3971                           
  3972                           	psect	clrtext
  3973  0A50                     clear_ram0:	
  3974                           ;	Called with FSR0 containing the base address, and
  3975                           ;	WREG with the size to clear
  3976                           
  3977  0A50  0064               	clrwdt	;clear the watchdog before getting into this loop
  3978  0A51                     clrloop0:	
  3979  0A51  0180               	clrf	0	;clear RAM location pointed to by FSR
  3980  0A52  3101               	addfsr 0,1
  3981  0A53  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  3982  0A54  2A51               	goto	clrloop0	;have we reached the end yet?
  3983  0A55  3400               	retlw	0	;all done for this memory range, return
  3984                           
  3985                           	psect	cstackBANK2
  3986  0120                     __pcstackBANK2:	
  3987  0120                     readGesture@fifo_data:	
  3988                           
  3989                           ; 64 bytes @ 0x0
  3990  0120                     	ds	64
  3991                           
  3992                           	psect	cstackBANK1
  3993  00A0                     __pcstackBANK1:	
  3994  00A0                     readGesture@fifo_data2:	
  3995                           
  3996                           ; 64 bytes @ 0x0
  3997  00A0                     	ds	64
  3998                           
  3999                           	psect	cstackCOMMON
  4000  0076                     __pcstackCOMMON:	
  4001  0076                     ?_i2c1_driver_open:	
  4002  0076                     ?_i2c1_driver_isNACK:	
  4003                           ; 1 bit 
  4004                           
  4005  0076                     ?_i2c1_driver_isBufferFull:	
  4006                           ; 1 bit 
  4007                           
  4008  0076                     ?_returnStop:	
  4009                           ; 1 bit 
  4010                           
  4011  0076                     ?_returnReset:	
  4012                           ; 1 bytes @ 0x0
  4013                           
  4014  0076                     ?_mssp1_clearIRQ:	
  4015                           ; 1 bytes @ 0x0
  4016                           
  4017  0076                     ??_mssp1_clearIRQ:	
  4018                           ; 1 bytes @ 0x0
  4019                           
  4020  0076                     ?_i2c_busCollisionISR:	
  4021                           ; 1 bytes @ 0x0
  4022                           
  4023  0076                     ??_i2c_busCollisionISR:	
  4024                           ; 1 bytes @ 0x0
  4025                           
  4026  0076                     ?_i2c_ISR:	
  4027                           ; 1 bytes @ 0x0
  4028                           
  4029  0076                     ?_i2c1_driver_start:	
  4030                           ; 1 bytes @ 0x0
  4031                           
  4032  0076                     ?_i2c1_driver_resetBus:	
  4033                           ; 1 bytes @ 0x0
  4034                           
  4035  0076                     ??_i2c1_driver_resetBus:	
  4036                           ; 1 bytes @ 0x0
  4037                           
  4038  0076                     ?_i2c1_driver_restart:	
  4039                           ; 1 bytes @ 0x0
  4040                           
  4041  0076                     ?_i2c1_driver_stop:	
  4042                           ; 1 bytes @ 0x0
  4043                           
  4044  0076                     ?_i2c1_driver_TXData:	
  4045                           ; 1 bytes @ 0x0
  4046                           
  4047  0076                     ?_i2c1_driver_startRX:	
  4048                           ; 1 bytes @ 0x0
  4049                           
  4050  0076                     ?_i2c1_driver_sendACK:	
  4051                           ; 1 bytes @ 0x0
  4052                           
  4053  0076                     ??_i2c1_driver_sendACK:	
  4054                           ; 1 bytes @ 0x0
  4055                           
  4056  0076                     ?_i2c1_driver_sendNACK:	
  4057                           ; 1 bytes @ 0x0
  4058                           
  4059  0076                     ??_i2c1_driver_isNACK:	
  4060                           ; 1 bytes @ 0x0
  4061                           
  4062  0076                     ?_i2c1_driver_getRXData:	
  4063                           ; 1 bytes @ 0x0
  4064                           
  4065  0076                     ?_mssp1_setIRQ:	
  4066                           ; 1 bytes @ 0x0
  4067                           
  4068  0076                     ??_mssp1_setIRQ:	
  4069                           ; 1 bytes @ 0x0
  4070                           
  4071  0076                     ?_i2c1_driver_clearBusCollision:	
  4072                           ; 1 bytes @ 0x0
  4073                           
  4074  0076                     ??_i2c1_driver_clearBusCollision:	
  4075                           ; 1 bytes @ 0x0
  4076                           
  4077  0076                     ?_PIN_MANAGER_IOC:	
  4078                           ; 1 bytes @ 0x0
  4079                           
  4080  0076                     ??_PIN_MANAGER_IOC:	
  4081                           ; 1 bytes @ 0x0
  4082                           
  4083  0076                     ?_PMD_Initialize:	
  4084                           ; 1 bytes @ 0x0
  4085                           
  4086  0076                     ?_PIN_MANAGER_Initialize:	
  4087                           ; 1 bytes @ 0x0
  4088                           
  4089  0076                     ?_OSCILLATOR_Initialize:	
  4090                           ; 1 bytes @ 0x0
  4091                           
  4092  0076                     ?_WDT_Initialize:	
  4093                           ; 1 bytes @ 0x0
  4094                           
  4095  0076                     ?_SPI2_Initialize:	
  4096                           ; 1 bytes @ 0x0
  4097                           
  4098  0076                     ?_initialize:	
  4099                           ; 1 bytes @ 0x0
  4100                           
  4101  0076                     ?_enableGestureSensor:	
  4102                           ; 1 bytes @ 0x0
  4103                           
  4104  0076                     ?_Display_Clear:	
  4105                           ; 1 bytes @ 0x0
  4106                           
  4107  0076                     ?_isGestureAvailable:	
  4108                           ; 1 bytes @ 0x0
  4109                           
  4110  0076                     ?_handleGesture:	
  4111                           ; 1 bytes @ 0x0
  4112                           
  4113  0076                     ?_Send_Names:	
  4114                           ; 1 bytes @ 0x0
  4115                           
  4116  0076                     ?_SPI2_Exchange8bit:	
  4117                           ; 1 bytes @ 0x0
  4118                           
  4119  0076                     ?_wireReadDataByte:	
  4120                           ; 1 bytes @ 0x0
  4121                           
  4122  0076                     ?_setLEDDrive:	
  4123                           ; 1 bytes @ 0x0
  4124                           
  4125  0076                     ?_setProximityGain:	
  4126                           ; 1 bytes @ 0x0
  4127                           
  4128  0076                     ?_setAmbientLightGain:	
  4129                           ; 1 bytes @ 0x0
  4130                           
  4131  0076                     ?_setProxIntLowThresh:	
  4132                           ; 1 bytes @ 0x0
  4133                           
  4134  0076                     ?_setProxIntHighThresh:	
  4135                           ; 1 bytes @ 0x0
  4136                           
  4137  0076                     ?_setGestureEnterThresh:	
  4138                           ; 1 bytes @ 0x0
  4139                           
  4140  0076                     ?_setGestureExitThresh:	
  4141                           ; 1 bytes @ 0x0
  4142                           
  4143  0076                     ?_setGestureGain:	
  4144                           ; 1 bytes @ 0x0
  4145                           
  4146  0076                     ?_setGestureLEDDrive:	
  4147                           ; 1 bytes @ 0x0
  4148                           
  4149  0076                     ?_setGestureWaitTime:	
  4150                           ; 1 bytes @ 0x0
  4151                           
  4152  0076                     ?_setGestureIntEnable:	
  4153                           ; 1 bytes @ 0x0
  4154                           
  4155  0076                     ?_getMode:	
  4156                           ; 1 bytes @ 0x0
  4157                           
  4158  0076                     ?_resetGestureParameters:	
  4159                           ; 1 bytes @ 0x0
  4160                           
  4161  0076                     ?_setLEDBoost:	
  4162                           ; 1 bytes @ 0x0
  4163                           
  4164  0076                     ?_setGestureMode:	
  4165                           ; 1 bytes @ 0x0
  4166                           
  4167  0076                     ?_enablePower:	
  4168                           ; 1 bytes @ 0x0
  4169                           
  4170  0076                     ?_processGestureData:	
  4171                           ; 1 bytes @ 0x0
  4172                           
  4173  0076                     ?_decodeGesture:	
  4174                           ; 1 bytes @ 0x0
  4175                           
  4176  0076                     ?_I2C_Start:	
  4177                           ; 1 bytes @ 0x0
  4178                           
  4179  0076                     ?_I2C_Write_Byte:	
  4180                           ; 1 bytes @ 0x0
  4181                           
  4182  0076                     ?_I2C_ReStart:	
  4183                           ; 1 bytes @ 0x0
  4184                           
  4185  0076                     ?_I2C_Read_Byte:	
  4186                           ; 1 bytes @ 0x0
  4187                           
  4188  0076                     ?_I2C_Send_NACK:	
  4189                           ; 1 bytes @ 0x0
  4190                           
  4191  0076                     ?_I2C_Stop:	
  4192                           ; 1 bytes @ 0x0
  4193                           
  4194  0076                     ?_do_I2C_RESET:	
  4195                           ; 1 bytes @ 0x0
  4196                           
  4197  0076                     ??_do_I2C_RESET:	
  4198                           ; 1 bytes @ 0x0
  4199                           
  4200  0076                     ?_do_I2C_IDLE:	
  4201                           ; 1 bytes @ 0x0
  4202                           
  4203  0076                     ??_do_I2C_IDLE:	
  4204                           ; 1 bytes @ 0x0
  4205                           
  4206  0076                     ?_do_I2C_SEND_RESTART_READ:	
  4207                           ; 1 bytes @ 0x0
  4208                           
  4209  0076                     ??_do_I2C_SEND_RESTART_READ:	
  4210                           ; 1 bytes @ 0x0
  4211                           
  4212  0076                     ?_do_I2C_SEND_RESTART_WRITE:	
  4213                           ; 1 bytes @ 0x0
  4214                           
  4215  0076                     ??_do_I2C_SEND_RESTART_WRITE:	
  4216                           ; 1 bytes @ 0x0
  4217                           
  4218  0076                     ?_do_I2C_SEND_RESTART:	
  4219                           ; 1 bytes @ 0x0
  4220                           
  4221  0076                     ??_do_I2C_SEND_RESTART:	
  4222                           ; 1 bytes @ 0x0
  4223                           
  4224  0076                     ?_do_I2C_SEND_STOP:	
  4225                           ; 1 bytes @ 0x0
  4226                           
  4227  0076                     ??_do_I2C_SEND_STOP:	
  4228                           ; 1 bytes @ 0x0
  4229                           
  4230  0076                     ?_do_I2C_SEND_ADR_READ:	
  4231                           ; 1 bytes @ 0x0
  4232                           
  4233  0076                     ??_do_I2C_SEND_ADR_READ:	
  4234                           ; 1 bytes @ 0x0
  4235                           
  4236  0076                     ?_do_I2C_SEND_ADR_WRITE:	
  4237                           ; 1 bytes @ 0x0
  4238                           
  4239  0076                     ??_do_I2C_SEND_ADR_WRITE:	
  4240                           ; 1 bytes @ 0x0
  4241                           
  4242  0076                     ?_do_I2C_RCEN:	
  4243                           ; 1 bytes @ 0x0
  4244                           
  4245  0076                     ??_do_I2C_RCEN:	
  4246                           ; 1 bytes @ 0x0
  4247                           
  4248  0076                     ?_do_I2C_DO_ACK:	
  4249                           ; 1 bytes @ 0x0
  4250                           
  4251  0076                     ??_do_I2C_DO_ACK:	
  4252                           ; 1 bytes @ 0x0
  4253                           
  4254  0076                     ?_do_I2C_DO_NACK_STOP:	
  4255                           ; 1 bytes @ 0x0
  4256                           
  4257  0076                     ??_do_I2C_DO_NACK_STOP:	
  4258                           ; 1 bytes @ 0x0
  4259                           
  4260  0076                     ?_do_I2C_DO_NACK_RESTART:	
  4261                           ; 1 bytes @ 0x0
  4262                           
  4263  0076                     ??_do_I2C_DO_NACK_RESTART:	
  4264                           ; 1 bytes @ 0x0
  4265                           
  4266  0076                     ?_do_I2C_DO_ADDRESS_NACK:	
  4267                           ; 1 bytes @ 0x0
  4268                           
  4269  0076                     ??_do_I2C_DO_ADDRESS_NACK:	
  4270                           ; 1 bytes @ 0x0
  4271                           
  4272  0076                     ?_do_I2C_TX:	
  4273                           ; 1 bytes @ 0x0
  4274                           
  4275  0076                     ??_do_I2C_TX:	
  4276                           ; 1 bytes @ 0x0
  4277                           
  4278  0076                     ?_do_I2C_RX:	
  4279                           ; 1 bytes @ 0x0
  4280                           
  4281  0076                     ??_do_I2C_RX:	
  4282                           ; 1 bytes @ 0x0
  4283                           
  4284  0076                     ?_do_I2C_TX_EMPTY:	
  4285                           ; 1 bytes @ 0x0
  4286                           
  4287  0076                     ??_do_I2C_TX_EMPTY:	
  4288                           ; 1 bytes @ 0x0
  4289                           
  4290  0076                     ?_INTERRUPT_InterruptManager:	
  4291                           ; 1 bytes @ 0x0
  4292                           
  4293  0076                     ?_SYSTEM_Initialize:	
  4294                           ; 1 bytes @ 0x0
  4295                           
  4296  0076                     ?_main:	
  4297                           ; 1 bytes @ 0x0
  4298                           
  4299  0076                     ?_SPI_Write:	
  4300                           ; 1 bytes @ 0x0
  4301                           
  4302  0076                     ?i1_i2c1_driver_restart:	
  4303                           ; 1 bytes @ 0x0
  4304                           
  4305  0076                     ??i1_i2c1_driver_restart:	
  4306                           ; 1 bytes @ 0x0
  4307                           
  4308  0076                     ?i1_i2c1_driver_stop:	
  4309                           ; 1 bytes @ 0x0
  4310                           
  4311  0076                     ??i1_i2c1_driver_stop:	
  4312                           ; 1 bytes @ 0x0
  4313                           
  4314  0076                     ?i1_i2c1_driver_startRX:	
  4315                           ; 1 bytes @ 0x0
  4316                           
  4317  0076                     ??i1_i2c1_driver_startRX:	
  4318                           ; 1 bytes @ 0x0
  4319                           
  4320  0076                     ?i1_i2c1_driver_getRXData:	
  4321                           ; 1 bytes @ 0x0
  4322                           
  4323  0076                     ??i1_i2c1_driver_getRXData:	
  4324                           ; 1 bytes @ 0x0
  4325                           
  4326  0076                     ?i1_i2c1_driver_TXData:	
  4327                           ; 1 bytes @ 0x0
  4328                           
  4329  0076                     ??i1_i2c1_driver_TXData:	
  4330                           ; 1 bytes @ 0x0
  4331                           
  4332  0076                     ?i1_i2c1_driver_sendNACK:	
  4333                           ; 1 bytes @ 0x0
  4334                           
  4335  0076                     ??i1_i2c1_driver_sendNACK:	
  4336                           ; 1 bytes @ 0x0
  4337                           
  4338  0076                     returnStop@p:	
  4339                           ; 1 bytes @ 0x0
  4340                           
  4341  0076                     returnReset@p:	
  4342                           ; 1 bytes @ 0x0
  4343                           
  4344  0076                     i1i2c1_driver_TXData@d:	
  4345                           ; 1 bytes @ 0x0
  4346                           
  4347                           
  4348                           ; 1 bytes @ 0x0
  4349  0076                     	ds	1
  4350  0077                     ??_returnStop:	
  4351  0077                     ??_returnReset:	
  4352                           ; 1 bytes @ 0x1
  4353                           
  4354                           
  4355                           ; 1 bytes @ 0x1
  4356  0077                     	ds	2
  4357  0079                     ??_i2c_ISR:	
  4358                           
  4359                           ; 1 bytes @ 0x3
  4360  0079                     	ds	3
  4361  007C                     ??_INTERRUPT_InterruptManager:	
  4362                           
  4363                           	psect	cstackBANK0
  4364  0020                     __pcstackBANK0:	
  4365                           ; 1 bytes @ 0x6
  4366                           
  4367  0020                     ??_i2c1_driver_open:	
  4368  0020                     ??_i2c1_driver_start:	
  4369                           ; 1 bytes @ 0x0
  4370                           
  4371  0020                     ??_i2c1_driver_restart:	
  4372                           ; 1 bytes @ 0x0
  4373                           
  4374  0020                     ??_i2c1_driver_stop:	
  4375                           ; 1 bytes @ 0x0
  4376                           
  4377  0020                     ??_i2c1_driver_TXData:	
  4378                           ; 1 bytes @ 0x0
  4379                           
  4380  0020                     ??_i2c1_driver_startRX:	
  4381                           ; 1 bytes @ 0x0
  4382                           
  4383  0020                     ??_i2c1_driver_sendNACK:	
  4384                           ; 1 bytes @ 0x0
  4385                           
  4386  0020                     ??_i2c1_driver_getRXData:	
  4387                           ; 1 bytes @ 0x0
  4388                           
  4389  0020                     ??_PMD_Initialize:	
  4390                           ; 1 bytes @ 0x0
  4391                           
  4392  0020                     ??_PIN_MANAGER_Initialize:	
  4393                           ; 1 bytes @ 0x0
  4394                           
  4395  0020                     ??_OSCILLATOR_Initialize:	
  4396                           ; 1 bytes @ 0x0
  4397                           
  4398  0020                     ??_WDT_Initialize:	
  4399                           ; 1 bytes @ 0x0
  4400                           
  4401  0020                     ??_SPI2_Initialize:	
  4402                           ; 1 bytes @ 0x0
  4403                           
  4404  0020                     ??_SPI2_Exchange8bit:	
  4405                           ; 1 bytes @ 0x0
  4406                           
  4407  0020                     ??_resetGestureParameters:	
  4408                           ; 1 bytes @ 0x0
  4409                           
  4410  0020                     ??_decodeGesture:	
  4411                           ; 1 bytes @ 0x0
  4412                           
  4413  0020                     ??_I2C_Start:	
  4414                           ; 1 bytes @ 0x0
  4415                           
  4416  0020                     ??_I2C_ReStart:	
  4417                           ; 1 bytes @ 0x0
  4418                           
  4419  0020                     ??_I2C_Send_NACK:	
  4420                           ; 1 bytes @ 0x0
  4421                           
  4422  0020                     ??_I2C_Stop:	
  4423                           ; 1 bytes @ 0x0
  4424                           
  4425  0020                     ??_SYSTEM_Initialize:	
  4426                           ; 1 bytes @ 0x0
  4427                           
  4428  0020                     ??_i2c1_driver_isBufferFull:	
  4429                           ; 1 bytes @ 0x0
  4430                           
  4431  0020                     ?_strlen:	
  4432                           ; 1 bytes @ 0x0
  4433                           
  4434  0020                     ?___wmul:	
  4435                           ; 2 bytes @ 0x0
  4436                           
  4437  0020                     i2c1_driver_TXData@d:	
  4438                           ; 2 bytes @ 0x0
  4439                           
  4440  0020                     SPI2_Exchange8bit@data:	
  4441                           ; 1 bytes @ 0x0
  4442                           
  4443  0020                     ___wmul@multiplier:	
  4444                           ; 1 bytes @ 0x0
  4445                           
  4446  0020                     strlen@s:	
  4447                           ; 2 bytes @ 0x0
  4448                           
  4449                           
  4450                           ; 2 bytes @ 0x0
  4451  0020                     	ds	1
  4452  0021                     ??_I2C_Write_Byte:	
  4453  0021                     ??_I2C_Read_Byte:	
  4454                           ; 1 bytes @ 0x1
  4455                           
  4456  0021                     ??_SPI_Write:	
  4457                           ; 1 bytes @ 0x1
  4458                           
  4459                           
  4460                           ; 1 bytes @ 0x1
  4461  0021                     	ds	1
  4462  0022                     ??_strlen:	
  4463  0022                     SPI_Write@incoming:	
  4464                           ; 1 bytes @ 0x2
  4465                           
  4466  0022                     _decodeGesture$1187:	
  4467                           ; 1 bytes @ 0x2
  4468                           
  4469  0022                     ___wmul@multiplicand:	
  4470                           ; 2 bytes @ 0x2
  4471                           
  4472                           
  4473                           ; 2 bytes @ 0x2
  4474  0022                     	ds	1
  4475  0023                     ??_Display_Clear:	
  4476  0023                     I2C_Write_Byte@Byte:	
  4477                           ; 1 bytes @ 0x3
  4478                           
  4479  0023                     strlen@a:	
  4480                           ; 1 bytes @ 0x3
  4481                           
  4482                           
  4483                           ; 2 bytes @ 0x3
  4484  0023                     	ds	1
  4485  0024                     ??___wmul:	
  4486  0024                     _decodeGesture$1188:	
  4487                           ; 1 bytes @ 0x4
  4488                           
  4489  0024                     I2C_Write_Byte@count:	
  4490                           ; 2 bytes @ 0x4
  4491                           
  4492  0024                     ___wmul@product:	
  4493                           ; 2 bytes @ 0x4
  4494                           
  4495                           
  4496                           ; 2 bytes @ 0x4
  4497  0024                     	ds	1
  4498  0025                     ?_Display_Name:	
  4499  0025                     Display_Name@string1:	
  4500                           ; 1 bytes @ 0x5
  4501                           
  4502                           
  4503                           ; 2 bytes @ 0x5
  4504  0025                     	ds	1
  4505  0026                     ??_wireReadDataByte:	
  4506  0026                     ?_wireWriteDataByte:	
  4507                           ; 1 bytes @ 0x6
  4508                           
  4509  0026                     ?_wireReadDataBlock:	
  4510                           ; 2 bytes @ 0x6
  4511                           
  4512  0026                     ?___awdiv:	
  4513                           ; 2 bytes @ 0x6
  4514                           
  4515  0026                     wireWriteDataByte@val:	
  4516                           ; 2 bytes @ 0x6
  4517                           
  4518  0026                     _decodeGesture$1189:	
  4519                           ; 1 bytes @ 0x6
  4520                           
  4521  0026                     wireReadDataBlock@val:	
  4522                           ; 2 bytes @ 0x6
  4523                           
  4524  0026                     ___awdiv@divisor:	
  4525                           ; 2 bytes @ 0x6
  4526                           
  4527                           
  4528                           ; 2 bytes @ 0x6
  4529  0026                     	ds	1
  4530  0027                     ??_Display_Name:	
  4531  0027                     wireReadDataByte@reg:	
  4532                           ; 1 bytes @ 0x7
  4533                           
  4534                           
  4535                           ; 1 bytes @ 0x7
  4536  0027                     	ds	1
  4537  0028                     wireReadDataByte@val:	
  4538  0028                     Display_Name@length:	
  4539                           ; 1 bytes @ 0x8
  4540                           
  4541  0028                     _decodeGesture$1190:	
  4542                           ; 2 bytes @ 0x8
  4543                           
  4544  0028                     wireReadDataBlock@len:	
  4545                           ; 2 bytes @ 0x8
  4546                           
  4547  0028                     ___awdiv@dividend:	
  4548                           ; 2 bytes @ 0x8
  4549                           
  4550                           
  4551                           ; 2 bytes @ 0x8
  4552  0028                     	ds	1
  4553  0029                     ??_isGestureAvailable:	
  4554  0029                     ??_wireWriteDataByte:	
  4555                           ; 1 bytes @ 0x9
  4556                           
  4557  0029                     ??_getMode:	
  4558                           ; 1 bytes @ 0x9
  4559                           
  4560  0029                     wireWriteDataByte@reg:	
  4561                           ; 1 bytes @ 0x9
  4562                           
  4563                           
  4564                           ; 1 bytes @ 0x9
  4565  0029                     	ds	1
  4566  002A                     ??_setLEDDrive:	
  4567  002A                     ??_setProximityGain:	
  4568                           ; 1 bytes @ 0xA
  4569                           
  4570  002A                     ??_setAmbientLightGain:	
  4571                           ; 1 bytes @ 0xA
  4572                           
  4573  002A                     ??_setProxIntLowThresh:	
  4574                           ; 1 bytes @ 0xA
  4575                           
  4576  002A                     ??_setProxIntHighThresh:	
  4577                           ; 1 bytes @ 0xA
  4578                           
  4579  002A                     ?_setLightIntLowThreshold:	
  4580                           ; 1 bytes @ 0xA
  4581                           
  4582  002A                     ?_setLightIntHighThreshold:	
  4583                           ; 1 bytes @ 0xA
  4584                           
  4585  002A                     ??_setGestureEnterThresh:	
  4586                           ; 1 bytes @ 0xA
  4587                           
  4588  002A                     ??_setGestureExitThresh:	
  4589                           ; 1 bytes @ 0xA
  4590                           
  4591  002A                     ??_setGestureGain:	
  4592                           ; 1 bytes @ 0xA
  4593                           
  4594  002A                     ??_setGestureLEDDrive:	
  4595                           ; 1 bytes @ 0xA
  4596                           
  4597  002A                     ??_setGestureWaitTime:	
  4598                           ; 1 bytes @ 0xA
  4599                           
  4600  002A                     ??_setGestureIntEnable:	
  4601                           ; 1 bytes @ 0xA
  4602                           
  4603  002A                     ??_setLEDBoost:	
  4604                           ; 1 bytes @ 0xA
  4605                           
  4606  002A                     ??_setGestureMode:	
  4607                           ; 1 bytes @ 0xA
  4608                           
  4609  002A                     ??_wireReadDataBlock:	
  4610                           ; 1 bytes @ 0xA
  4611                           
  4612  002A                     ??___awdiv:	
  4613                           ; 1 bytes @ 0xA
  4614                           
  4615  002A                     getMode@enable_value:	
  4616                           ; 1 bytes @ 0xA
  4617                           
  4618  002A                     isGestureAvailable@val:	
  4619                           ; 1 bytes @ 0xA
  4620                           
  4621  002A                     Display_Name@i:	
  4622                           ; 1 bytes @ 0xA
  4623                           
  4624  002A                     setLightIntLowThreshold@threshold:	
  4625                           ; 2 bytes @ 0xA
  4626                           
  4627  002A                     setLightIntHighThreshold@threshold:	
  4628                           ; 2 bytes @ 0xA
  4629                           
  4630  002A                     _decodeGesture$1191:	
  4631                           ; 2 bytes @ 0xA
  4632                           
  4633                           
  4634                           ; 2 bytes @ 0xA
  4635  002A                     	ds	1
  4636  002B                     ?_setMode:	
  4637  002B                     setMode@enable:	
  4638                           ; 1 bytes @ 0xB
  4639                           
  4640  002B                     setAmbientLightGain@drive:	
  4641                           ; 1 bytes @ 0xB
  4642                           
  4643  002B                     setProxIntLowThresh@threshold:	
  4644                           ; 1 bytes @ 0xB
  4645                           
  4646  002B                     setProxIntHighThresh@threshold:	
  4647                           ; 1 bytes @ 0xB
  4648                           
  4649  002B                     setGestureEnterThresh@threshold:	
  4650                           ; 1 bytes @ 0xB
  4651                           
  4652  002B                     setGestureExitThresh@threshold:	
  4653                           ; 1 bytes @ 0xB
  4654                           
  4655  002B                     setGestureWaitTime@time:	
  4656                           ; 1 bytes @ 0xB
  4657                           
  4658  002B                     setGestureIntEnable@val:	
  4659                           ; 1 bytes @ 0xB
  4660                           
  4661  002B                     setGestureMode@mode:	
  4662                           ; 1 bytes @ 0xB
  4663                           
  4664  002B                     ___awdiv@counter:	
  4665                           ; 1 bytes @ 0xB
  4666                           
  4667                           
  4668                           ; 1 bytes @ 0xB
  4669  002B                     	ds	1
  4670  002C                     ??_Send_Names:	
  4671  002C                     ??_setMode:	
  4672                           ; 1 bytes @ 0xC
  4673                           
  4674  002C                     ??_setLightIntLowThreshold:	
  4675                           ; 1 bytes @ 0xC
  4676                           
  4677  002C                     ??_setLightIntHighThreshold:	
  4678                           ; 1 bytes @ 0xC
  4679                           
  4680  002C                     setLEDDrive@val:	
  4681                           ; 1 bytes @ 0xC
  4682                           
  4683  002C                     setProximityGain@val:	
  4684                           ; 1 bytes @ 0xC
  4685                           
  4686  002C                     setAmbientLightGain@val:	
  4687                           ; 1 bytes @ 0xC
  4688                           
  4689  002C                     setGestureGain@val:	
  4690                           ; 1 bytes @ 0xC
  4691                           
  4692  002C                     setGestureLEDDrive@val:	
  4693                           ; 1 bytes @ 0xC
  4694                           
  4695  002C                     setGestureWaitTime@val:	
  4696                           ; 1 bytes @ 0xC
  4697                           
  4698  002C                     setGestureIntEnable@enable:	
  4699                           ; 1 bytes @ 0xC
  4700                           
  4701  002C                     setLEDBoost@val:	
  4702                           ; 1 bytes @ 0xC
  4703                           
  4704  002C                     setGestureMode@val:	
  4705                           ; 1 bytes @ 0xC
  4706                           
  4707  002C                     ___awdiv@sign:	
  4708                           ; 1 bytes @ 0xC
  4709                           
  4710  002C                     _decodeGesture$1192:	
  4711                           ; 1 bytes @ 0xC
  4712                           
  4713                           
  4714                           ; 2 bytes @ 0xC
  4715  002C                     	ds	1
  4716  002D                     setLEDDrive@drive:	
  4717  002D                     setProximityGain@drive:	
  4718                           ; 1 bytes @ 0xD
  4719                           
  4720  002D                     setLightIntLowThreshold@val_low:	
  4721                           ; 1 bytes @ 0xD
  4722                           
  4723  002D                     setLightIntHighThreshold@val_low:	
  4724                           ; 1 bytes @ 0xD
  4725                           
  4726  002D                     setGestureGain@gain:	
  4727                           ; 1 bytes @ 0xD
  4728                           
  4729  002D                     setGestureLEDDrive@drive:	
  4730                           ; 1 bytes @ 0xD
  4731                           
  4732  002D                     setLEDBoost@boost:	
  4733                           ; 1 bytes @ 0xD
  4734                           
  4735  002D                     ___awdiv@quotient:	
  4736                           ; 1 bytes @ 0xD
  4737                           
  4738                           
  4739                           ; 2 bytes @ 0xD
  4740  002D                     	ds	1
  4741  002E                     setMode@reg_val:	
  4742  002E                     setLightIntLowThreshold@val_high:	
  4743                           ; 1 bytes @ 0xE
  4744                           
  4745  002E                     setLightIntHighThreshold@val_high:	
  4746                           ; 1 bytes @ 0xE
  4747                           
  4748  002E                     _decodeGesture$1193:	
  4749                           ; 1 bytes @ 0xE
  4750                           
  4751                           
  4752                           ; 2 bytes @ 0xE
  4753  002E                     	ds	1
  4754  002F                     ??_processGestureData:	
  4755  002F                     setMode@mode:	
  4756                           ; 1 bytes @ 0xF
  4757                           
  4758  002F                     wireReadDataBlock@reg:	
  4759                           ; 1 bytes @ 0xF
  4760                           
  4761                           
  4762                           ; 1 bytes @ 0xF
  4763  002F                     	ds	1
  4764  0030                     ??_initialize:	
  4765  0030                     ??_enableGestureSensor:	
  4766                           ; 1 bytes @ 0x10
  4767                           
  4768  0030                     ??_enablePower:	
  4769                           ; 1 bytes @ 0x10
  4770                           
  4771  0030                     wireReadDataBlock@j:	
  4772                           ; 1 bytes @ 0x10
  4773                           
  4774  0030                     _decodeGesture$1194:	
  4775                           ; 1 bytes @ 0x10
  4776                           
  4777                           
  4778                           ; 2 bytes @ 0x10
  4779  0030                     	ds	1
  4780  0031                     initialize@id:	
  4781  0031                     enableGestureSensor@interrupts:	
  4782                           ; 1 bytes @ 0x11
  4783                           
  4784  0031                     processGestureData@ud_ratio_first:	
  4785                           ; 1 bytes @ 0x11
  4786                           
  4787                           
  4788                           ; 2 bytes @ 0x11
  4789  0031                     	ds	2
  4790  0033                     processGestureData@lr_ratio_first:	
  4791                           
  4792                           ; 2 bytes @ 0x13
  4793  0033                     	ds	2
  4794  0035                     processGestureData@ud_ratio_last:	
  4795                           
  4796                           ; 2 bytes @ 0x15
  4797  0035                     	ds	2
  4798  0037                     processGestureData@lr_ratio_last:	
  4799                           
  4800                           ; 2 bytes @ 0x17
  4801  0037                     	ds	2
  4802  0039                     _processGestureData$1182:	
  4803                           
  4804                           ; 2 bytes @ 0x19
  4805  0039                     	ds	2
  4806  003B                     _processGestureData$1183:	
  4807                           
  4808                           ; 2 bytes @ 0x1B
  4809  003B                     	ds	2
  4810  003D                     _processGestureData$1184:	
  4811                           
  4812                           ; 2 bytes @ 0x1D
  4813  003D                     	ds	2
  4814  003F                     _processGestureData$1185:	
  4815                           
  4816                           ; 2 bytes @ 0x1F
  4817  003F                     	ds	2
  4818  0041                     processGestureData@u_last:	
  4819                           
  4820                           ; 1 bytes @ 0x21
  4821  0041                     	ds	1
  4822  0042                     processGestureData@d_last:	
  4823                           
  4824                           ; 1 bytes @ 0x22
  4825  0042                     	ds	1
  4826  0043                     processGestureData@l_last:	
  4827                           
  4828                           ; 1 bytes @ 0x23
  4829  0043                     	ds	1
  4830  0044                     processGestureData@r_last:	
  4831                           
  4832                           ; 1 bytes @ 0x24
  4833  0044                     	ds	1
  4834  0045                     processGestureData@u_first:	
  4835                           
  4836                           ; 1 bytes @ 0x25
  4837  0045                     	ds	1
  4838  0046                     processGestureData@d_first:	
  4839                           
  4840                           ; 1 bytes @ 0x26
  4841  0046                     	ds	1
  4842  0047                     processGestureData@l_first:	
  4843                           
  4844                           ; 1 bytes @ 0x27
  4845  0047                     	ds	1
  4846  0048                     processGestureData@r_first:	
  4847                           
  4848                           ; 1 bytes @ 0x28
  4849  0048                     	ds	1
  4850  0049                     processGestureData@ud_delta:	
  4851                           
  4852                           ; 2 bytes @ 0x29
  4853  0049                     	ds	2
  4854  004B                     processGestureData@lr_delta:	
  4855                           
  4856                           ; 2 bytes @ 0x2B
  4857  004B                     	ds	2
  4858  004D                     processGestureData@i:	
  4859                           
  4860                           ; 2 bytes @ 0x2D
  4861  004D                     	ds	2
  4862  004F                     ?_readGesture:	
  4863                           
  4864                           ; 2 bytes @ 0x2F
  4865  004F                     	ds	2
  4866  0051                     ??_readGesture:	
  4867                           
  4868                           ; 1 bytes @ 0x31
  4869  0051                     	ds	2
  4870  0053                     readGesture@motion:	
  4871                           
  4872                           ; 2 bytes @ 0x33
  4873  0053                     	ds	2
  4874  0055                     readGesture@gstatus:	
  4875                           
  4876                           ; 1 bytes @ 0x35
  4877  0055                     	ds	1
  4878  0056                     readGesture@bytes_read:	
  4879                           
  4880                           ; 2 bytes @ 0x36
  4881  0056                     	ds	2
  4882  0058                     readGesture@fifo_level:	
  4883                           
  4884                           ; 1 bytes @ 0x38
  4885  0058                     	ds	1
  4886  0059                     readGesture@i:	
  4887                           
  4888                           ; 2 bytes @ 0x39
  4889  0059                     	ds	2
  4890  005B                     ??_handleGesture:	
  4891                           
  4892                           ; 1 bytes @ 0x3B
  4893  005B                     	ds	1
  4894  005C                     ??_main:	
  4895                           
  4896                           ; 1 bytes @ 0x3C
  4897  005C                     	ds	1
  4898                           
  4899                           	psect	maintext
  4900  0D8E                     __pmaintext:	
  4901 ;;
  4902 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  4903 ;;
  4904 ;; *************** function _main *****************
  4905 ;; Defined at:
  4906 ;;		line 88 in file "main.c"
  4907 ;; Parameters:    Size  Location     Type
  4908 ;;		None
  4909 ;; Auto vars:     Size  Location     Type
  4910 ;;  count           2    0        unsigned int 
  4911 ;; Return value:  Size  Location     Type
  4912 ;;                  1    wreg      void 
  4913 ;; Registers used:
  4914 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4915 ;; Tracked objects:
  4916 ;;		On entry : B1F/0
  4917 ;;		On exit  : 0/0
  4918 ;;		Unchanged: 0/0
  4919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4920 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4921 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4922 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4923 ;;      Totals:         0       1       2       0       0       0       0       0       0       0       0       0       
      +0       0
  4924 ;;Total ram usage:        3 bytes
  4925 ;; Hardware stack levels required when called:   12
  4926 ;; This function calls:
  4927 ;;		_Display_Clear
  4928 ;;		_Display_Name
  4929 ;;		_SYSTEM_Initialize
  4930 ;;		_enableGestureSensor
  4931 ;;		_handleGesture
  4932 ;;		_initialize
  4933 ;;		_isGestureAvailable
  4934 ;; This function is called by:
  4935 ;;		Startup code after reset
  4936 ;; This function uses a non-reentrant model
  4937 ;;
  4938                           
  4939                           
  4940                           ;psect for function _main
  4941  0D8E                     _main:	
  4942                           
  4943                           ;main.c: 91:     SYSTEM_Initialize();
  4944                           
  4945                           ;incstack = 0
  4946                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4947  0D8E  318A  22BE  318D   	fcall	_SYSTEM_Initialize
  4948                           
  4949                           ;main.c: 97:     (INTCONbits.GIE = 1);
  4950  0D91  178B               	bsf	11,7	;volatile
  4951                           
  4952                           ;main.c: 100:     (INTCONbits.PEIE = 1);
  4953  0D92  170B               	bsf	11,6	;volatile
  4954                           
  4955                           ;main.c: 106:     if(initialize()){
  4956  0D93  3184  24B0  318D   	fcall	_initialize
  4957                           
  4958                           ;main.c: 108:     if(enableGestureSensor(1)){
  4959  0D96  3001               	movlw	1
  4960  0D97  3186  26B7  318D   	fcall	_enableGestureSensor
  4961  0D9A  3A00               	xorlw	0
  4962  0D9B  1903               	skipnz
  4963  0D9C  2DB1               	goto	l6534
  4964                           
  4965                           ;main.c: 109:         Display_Clear();
  4966  0D9D  318A  22DC  318D   	fcall	_Display_Clear
  4967                           
  4968                           ;main.c: 110:         _delay((unsigned long)((100)*(250000/4000.0)));
  4969  0DA0  3009               	movlw	9
  4970  0DA1  0020               	movlb	0	; select bank0
  4971  0DA2  00DC               	movwf	??_main
  4972  0DA3  301C               	movlw	28
  4973  0DA4                     u5847:	
  4974  0DA4  0B89               	decfsz	9,f
  4975  0DA5  2DA4               	goto	u5847
  4976  0DA6  0BDC               	decfsz	??_main,f
  4977  0DA7  2DA4               	goto	u5847
  4978  0DA8  0000               	nop
  4979                           
  4980                           ;main.c: 111:         Display_Name("I suck");
  4981  0DA9  3054               	movlw	low (STR_1| (0+32768))
  4982  0DAA  0020               	movlb	0	; select bank0
  4983  0DAB  00A5               	movwf	Display_Name@string1
  4984  0DAC  3090               	movlw	high (STR_1| (0+32768))
  4985  0DAD  00A6               	movwf	Display_Name@string1+1
  4986  0DAE  318E  2682  318D   	fcall	_Display_Name
  4987  0DB1                     l6534:	
  4988                           
  4989                           ;main.c: 116:     {;main.c: 117:         if(isGestureAvailable()){
  4990  0DB1  318A  22ED  318D   	fcall	_isGestureAvailable
  4991  0DB4  3A00               	xorlw	0
  4992  0DB5  1903               	skipnz
  4993  0DB6  2DB1               	goto	l6534
  4994                           
  4995                           ;main.c: 118:             handleGesture();
  4996  0DB7  3187  27BC  318D   	fcall	_handleGesture
  4997  0DBA  2DB1               	goto	l6534
  4998  0DBB                     __end_of_main:	
  4999                           
  5000                           	psect	text1
  5001  04B0                     __ptext1:	
  5002 ;; *************** function _initialize *****************
  5003 ;; Defined at:
  5004 ;;		line 20 in file "APDS9960.c"
  5005 ;; Parameters:    Size  Location     Type
  5006 ;;		None
  5007 ;; Auto vars:     Size  Location     Type
  5008 ;;  id              1   17[BANK0 ] unsigned char 
  5009 ;; Return value:  Size  Location     Type
  5010 ;;                  1    wreg      _Bool 
  5011 ;; Registers used:
  5012 ;;		wreg, status,2, status,0, pclath, cstack
  5013 ;; Tracked objects:
  5014 ;;		On entry : 0/0
  5015 ;;		On exit  : 0/0
  5016 ;;		Unchanged: 0/0
  5017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5018 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5019 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5020 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5021 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5022 ;;Total ram usage:        2 bytes
  5023 ;; Hardware stack levels used:    1
  5024 ;; Hardware stack levels required when called:   10
  5025 ;; This function calls:
  5026 ;;		_i2c1_driver_open
  5027 ;;		_setAmbientLightGain
  5028 ;;		_setGestureEnterThresh
  5029 ;;		_setGestureExitThresh
  5030 ;;		_setGestureGain
  5031 ;;		_setGestureIntEnable
  5032 ;;		_setGestureLEDDrive
  5033 ;;		_setGestureWaitTime
  5034 ;;		_setLEDDrive
  5035 ;;		_setLightIntHighThreshold
  5036 ;;		_setLightIntLowThreshold
  5037 ;;		_setMode
  5038 ;;		_setProxIntHighThresh
  5039 ;;		_setProxIntLowThresh
  5040 ;;		_setProximityGain
  5041 ;;		_wireReadDataByte
  5042 ;;		_wireWriteDataByte
  5043 ;; This function is called by:
  5044 ;;		_main
  5045 ;; This function uses a non-reentrant model
  5046 ;;
  5047                           
  5048                           
  5049                           ;psect for function _initialize
  5050  04B0                     _initialize:	
  5051                           
  5052                           ;APDS9960.c: 25:     i2c1_driver_open();
  5053                           
  5054                           ;incstack = 0
  5055                           ; Regs used in _initialize: [wreg+status,2+status,0+pclath+cstack]
  5056  04B0  318A  229B  3184   	fcall	_i2c1_driver_open
  5057                           
  5058                           ;APDS9960.c: 31:     id = wireReadDataByte(0x92);
  5059  04B3  3092               	movlw	146
  5060  04B4  318C  2400  3184   	fcall	_wireReadDataByte
  5061  04B7  0020               	movlb	0	; select bank0
  5062  04B8  00B0               	movwf	??_initialize
  5063  04B9  0830               	movf	??_initialize,w
  5064  04BA  00B1               	movwf	initialize@id
  5065                           
  5066                           ;APDS9960.c: 33:     if( !(id == 0xAB ||id == 0x9C ) )
  5067  04BB  30AB               	movlw	171
  5068  04BC  0631               	xorwf	initialize@id,w
  5069  04BD  1903               	btfsc	3,2
  5070  04BE  2CC5               	goto	l6246
  5071  04BF  309C               	movlw	156
  5072  04C0  0631               	xorwf	initialize@id,w
  5073  04C1  1903               	btfsc	3,2
  5074  04C2  2CC5               	goto	l6246
  5075  04C3                     l6242:	
  5076                           
  5077                           ;APDS9960.c: 34:     {;APDS9960.c: 35:      return 0;
  5078  04C3  3000               	movlw	0
  5079  04C4  0008               	return
  5080  04C5                     l6246:	
  5081                           
  5082                           ;APDS9960.c: 39:     setMode(7, 0);
  5083  04C5  01AB               	clrf	setMode@enable
  5084  04C6  3007               	movlw	7
  5085  04C7  3187  276D  3184   	fcall	_setMode
  5086                           
  5087                           ;APDS9960.c: 41:     wireWriteDataByte(0x81, 219);
  5088  04CA  30DB               	movlw	219
  5089  04CB  0020               	movlb	0	; select bank0
  5090  04CC  00B0               	movwf	??_initialize
  5091  04CD  0830               	movf	??_initialize,w
  5092  04CE  00A6               	movwf	wireWriteDataByte@val
  5093  04CF  3081               	movlw	129
  5094  04D0  318B  238F  3184   	fcall	_wireWriteDataByte
  5095                           
  5096                           ;APDS9960.c: 42:     wireWriteDataByte(0x83, 246);
  5097  04D3  30F6               	movlw	246
  5098  04D4  0020               	movlb	0	; select bank0
  5099  04D5  00B0               	movwf	??_initialize
  5100  04D6  0830               	movf	??_initialize,w
  5101  04D7  00A6               	movwf	wireWriteDataByte@val
  5102  04D8  3083               	movlw	131
  5103  04D9  318B  238F  3184   	fcall	_wireWriteDataByte
  5104                           
  5105                           ;APDS9960.c: 43:     wireWriteDataByte(0x8E, 0x87);
  5106  04DC  3087               	movlw	135
  5107  04DD  0020               	movlb	0	; select bank0
  5108  04DE  00B0               	movwf	??_initialize
  5109  04DF  0830               	movf	??_initialize,w
  5110  04E0  00A6               	movwf	wireWriteDataByte@val
  5111  04E1  308E               	movlw	142
  5112  04E2  318B  238F  3184   	fcall	_wireWriteDataByte
  5113                           
  5114                           ;APDS9960.c: 44:     wireWriteDataByte(0x9D, 0) ;
  5115  04E5  0020               	movlb	0	; select bank0
  5116  04E6  01A6               	clrf	wireWriteDataByte@val
  5117  04E7  309D               	movlw	157
  5118  04E8  318B  238F  3184   	fcall	_wireWriteDataByte
  5119                           
  5120                           ;APDS9960.c: 45:     wireWriteDataByte(0x9E, 0) ;
  5121  04EB  0020               	movlb	0	; select bank0
  5122  04EC  01A6               	clrf	wireWriteDataByte@val
  5123  04ED  309E               	movlw	158
  5124  04EE  318B  238F  3184   	fcall	_wireWriteDataByte
  5125                           
  5126                           ;APDS9960.c: 46:     wireWriteDataByte(0x8D, 0x60) ;
  5127  04F1  3060               	movlw	96
  5128  04F2  0020               	movlb	0	; select bank0
  5129  04F3  00B0               	movwf	??_initialize
  5130  04F4  0830               	movf	??_initialize,w
  5131  04F5  00A6               	movwf	wireWriteDataByte@val
  5132  04F6  308D               	movlw	141
  5133  04F7  318B  238F  3184   	fcall	_wireWriteDataByte
  5134                           
  5135                           ;APDS9960.c: 47:     setLEDDrive(0);
  5136  04FA  3000               	movlw	0
  5137  04FB  318C  24E6  3184   	fcall	_setLEDDrive
  5138                           
  5139                           ;APDS9960.c: 48:     setProximityGain(2);
  5140  04FE  3002               	movlw	2
  5141  04FF  318D  250F  3184   	fcall	_setProximityGain
  5142                           
  5143                           ;APDS9960.c: 49:     setAmbientLightGain(1);
  5144  0502  3001               	movlw	1
  5145  0503  318B  23E2  3184   	fcall	_setAmbientLightGain
  5146                           
  5147                           ;APDS9960.c: 51:     if( !setProxIntLowThresh(0) ) {
  5148  0506  3000               	movlw	0
  5149  0507  318B  2339  3184   	fcall	_setProxIntLowThresh
  5150  050A  3A00               	xorlw	0
  5151  050B  1903               	btfsc	3,2
  5152  050C  2CC3               	goto	l6242
  5153                           
  5154                           ;APDS9960.c: 54:     if( !setProxIntHighThresh(50) ) {
  5155  050D  3032               	movlw	50
  5156  050E  318B  2326  3184   	fcall	_setProxIntHighThresh
  5157  0511  3A00               	xorlw	0
  5158  0512  1903               	btfsc	3,2
  5159  0513  2CC3               	goto	l6242
  5160                           
  5161                           ;APDS9960.c: 59:     if( !setLightIntLowThreshold(0xFFFF) ) {
  5162  0514  30FF               	movlw	255
  5163  0515  0020               	movlb	0	; select bank0
  5164  0516  00AA               	movwf	setLightIntLowThreshold@threshold
  5165  0517  30FF               	movlw	255
  5166  0518  00AB               	movwf	setLightIntLowThreshold@threshold+1
  5167  0519  318C  24BF  3184   	fcall	_setLightIntLowThreshold
  5168  051C  3A00               	xorlw	0
  5169  051D  1903               	btfsc	3,2
  5170  051E  2CC3               	goto	l6242
  5171                           
  5172                           ;APDS9960.c: 62:     if( !setLightIntHighThreshold(0) ) {
  5173  051F  3000               	movlw	0
  5174  0520  0020               	movlb	0	; select bank0
  5175  0521  00AA               	movwf	setLightIntHighThreshold@threshold
  5176  0522  00AB               	movwf	setLightIntHighThreshold@threshold+1
  5177  0523  318C  2498  3184   	fcall	_setLightIntHighThreshold
  5178  0526  3A00               	xorlw	0
  5179  0527  1903               	btfsc	3,2
  5180  0528  2CC3               	goto	l6242
  5181                           
  5182                           ;APDS9960.c: 66:     if( !wireWriteDataByte(0x8C, 0x11) ) {
  5183  0529  3011               	movlw	17
  5184  052A  0020               	movlb	0	; select bank0
  5185  052B  00B0               	movwf	??_initialize
  5186  052C  0830               	movf	??_initialize,w
  5187  052D  00A6               	movwf	wireWriteDataByte@val
  5188  052E  308C               	movlw	140
  5189  052F  318B  238F  3184   	fcall	_wireWriteDataByte
  5190  0532  0020               	movlb	0	; select bank0
  5191  0533  0826               	movf	?_wireWriteDataByte,w
  5192  0534  0427               	iorwf	?_wireWriteDataByte+1,w
  5193  0535  1903               	btfsc	3,2
  5194  0536  2CC3               	goto	l6242
  5195                           
  5196                           ;APDS9960.c: 71:     if( !wireWriteDataByte(0x90, 0x01) ) {
  5197  0537  01A6               	clrf	wireWriteDataByte@val
  5198  0538  0AA6               	incf	wireWriteDataByte@val,f
  5199  0539  3090               	movlw	144
  5200  053A  318B  238F  3184   	fcall	_wireWriteDataByte
  5201  053D  0020               	movlb	0	; select bank0
  5202  053E  0826               	movf	?_wireWriteDataByte,w
  5203  053F  0427               	iorwf	?_wireWriteDataByte+1,w
  5204  0540  1903               	btfsc	3,2
  5205  0541  2CC3               	goto	l6242
  5206                           
  5207                           ;APDS9960.c: 74:     if( !wireWriteDataByte(0x9F, 0) ) {
  5208  0542  01A6               	clrf	wireWriteDataByte@val
  5209  0543  309F               	movlw	159
  5210  0544  318B  238F  3184   	fcall	_wireWriteDataByte
  5211  0547  0020               	movlb	0	; select bank0
  5212  0548  0826               	movf	?_wireWriteDataByte,w
  5213  0549  0427               	iorwf	?_wireWriteDataByte+1,w
  5214  054A  1903               	btfsc	3,2
  5215  054B  2CC3               	goto	l6242
  5216                           
  5217                           ;APDS9960.c: 78:     if( !setGestureEnterThresh(40) ) {
  5218  054C  3028               	movlw	40
  5219  054D  318B  2300  3184   	fcall	_setGestureEnterThresh
  5220  0550  3A00               	xorlw	0
  5221  0551  1903               	btfsc	3,2
  5222  0552  2CC3               	goto	l6242
  5223                           
  5224                           ;APDS9960.c: 82:     if( !setGestureExitThresh(30) ) {
  5225  0553  301E               	movlw	30
  5226  0554  318B  2313  3184   	fcall	_setGestureExitThresh
  5227  0557  3A00               	xorlw	0
  5228  0558  1903               	btfsc	3,2
  5229  0559  2CC3               	goto	l6242
  5230                           
  5231                           ;APDS9960.c: 85:     if( !wireWriteDataByte(0xA2, 0x40) ) {
  5232  055A  3040               	movlw	64
  5233  055B  0020               	movlb	0	; select bank0
  5234  055C  00B0               	movwf	??_initialize
  5235  055D  0830               	movf	??_initialize,w
  5236  055E  00A6               	movwf	wireWriteDataByte@val
  5237  055F  30A2               	movlw	162
  5238  0560  318B  238F  3184   	fcall	_wireWriteDataByte
  5239  0563  0020               	movlb	0	; select bank0
  5240  0564  0826               	movf	?_wireWriteDataByte,w
  5241  0565  0427               	iorwf	?_wireWriteDataByte+1,w
  5242  0566  1903               	btfsc	3,2
  5243  0567  2CC3               	goto	l6242
  5244                           
  5245                           ;APDS9960.c: 88:     if( !setGestureGain(2) ) {
  5246  0568  3002               	movlw	2
  5247  0569  318E  261E  3184   	fcall	_setGestureGain
  5248  056C  3A00               	xorlw	0
  5249  056D  1903               	btfsc	3,2
  5250  056E  2CC3               	goto	l6242
  5251                           
  5252                           ;APDS9960.c: 91:     if( !setGestureLEDDrive(0) ) {
  5253  056F  3000               	movlw	0
  5254  0570  318E  2650  3184   	fcall	_setGestureLEDDrive
  5255  0573  3A00               	xorlw	0
  5256  0574  1903               	btfsc	3,2
  5257  0575  2CC3               	goto	l6242
  5258                           
  5259                           ;APDS9960.c: 95:     if( !setGestureWaitTime(1) ) {
  5260  0576  3001               	movlw	1
  5261  0577  318C  2471  3184   	fcall	_setGestureWaitTime
  5262  057A  3A00               	xorlw	0
  5263  057B  1903               	btfsc	3,2
  5264  057C  2CC3               	goto	l6242
  5265                           
  5266                           ;APDS9960.c: 98:     if( !wireWriteDataByte(0xA4, 0) ) {
  5267  057D  0020               	movlb	0	; select bank0
  5268  057E  01A6               	clrf	wireWriteDataByte@val
  5269  057F  30A4               	movlw	164
  5270  0580  318B  238F  3184   	fcall	_wireWriteDataByte
  5271  0583  0020               	movlb	0	; select bank0
  5272  0584  0826               	movf	?_wireWriteDataByte,w
  5273  0585  0427               	iorwf	?_wireWriteDataByte+1,w
  5274  0586  1903               	btfsc	3,2
  5275  0587  2CC3               	goto	l6242
  5276                           
  5277                           ;APDS9960.c: 101:     if( !wireWriteDataByte(0xA5, 0) ) {
  5278  0588  01A6               	clrf	wireWriteDataByte@val
  5279  0589  30A5               	movlw	165
  5280  058A  318B  238F  3184   	fcall	_wireWriteDataByte
  5281  058D  0020               	movlb	0	; select bank0
  5282  058E  0826               	movf	?_wireWriteDataByte,w
  5283  058F  0427               	iorwf	?_wireWriteDataByte+1,w
  5284  0590  1903               	btfsc	3,2
  5285  0591  2CC3               	goto	l6242
  5286                           
  5287                           ;APDS9960.c: 104:     if( !wireWriteDataByte(0xA7, 0) ) {
  5288  0592  01A6               	clrf	wireWriteDataByte@val
  5289  0593  30A7               	movlw	167
  5290  0594  318B  238F  3184   	fcall	_wireWriteDataByte
  5291  0597  0020               	movlb	0	; select bank0
  5292  0598  0826               	movf	?_wireWriteDataByte,w
  5293  0599  0427               	iorwf	?_wireWriteDataByte+1,w
  5294  059A  1903               	btfsc	3,2
  5295  059B  2CC3               	goto	l6242
  5296                           
  5297                           ;APDS9960.c: 107:     if( !wireWriteDataByte(0xA9, 0) ) {
  5298  059C  01A6               	clrf	wireWriteDataByte@val
  5299  059D  30A9               	movlw	169
  5300  059E  318B  238F  3184   	fcall	_wireWriteDataByte
  5301  05A1  0020               	movlb	0	; select bank0
  5302  05A2  0826               	movf	?_wireWriteDataByte,w
  5303  05A3  0427               	iorwf	?_wireWriteDataByte+1,w
  5304  05A4  1903               	btfsc	3,2
  5305  05A5  2CC3               	goto	l6242
  5306                           
  5307                           ;APDS9960.c: 110:     if( !wireWriteDataByte(0xA6, 0xC9) ) {
  5308  05A6  30C9               	movlw	201
  5309  05A7  00B0               	movwf	??_initialize
  5310  05A8  0830               	movf	??_initialize,w
  5311  05A9  00A6               	movwf	wireWriteDataByte@val
  5312  05AA  30A6               	movlw	166
  5313  05AB  318B  238F  3184   	fcall	_wireWriteDataByte
  5314  05AE  0020               	movlb	0	; select bank0
  5315  05AF  0826               	movf	?_wireWriteDataByte,w
  5316  05B0  0427               	iorwf	?_wireWriteDataByte+1,w
  5317  05B1  1903               	btfsc	3,2
  5318  05B2  2CC3               	goto	l6242
  5319                           
  5320                           ;APDS9960.c: 113:     if( !wireWriteDataByte(0xAA, 0) ) {
  5321  05B3  01A6               	clrf	wireWriteDataByte@val
  5322  05B4  30AA               	movlw	170
  5323  05B5  318B  238F  3184   	fcall	_wireWriteDataByte
  5324  05B8  0020               	movlb	0	; select bank0
  5325  05B9  0826               	movf	?_wireWriteDataByte,w
  5326  05BA  0427               	iorwf	?_wireWriteDataByte+1,w
  5327  05BB  1903               	btfsc	3,2
  5328  05BC  2CC3               	goto	l6242
  5329                           
  5330                           ;APDS9960.c: 116:     if( !setGestureIntEnable(0) ) {
  5331  05BD  3000               	movlw	0
  5332  05BE  318D  2563  3184   	fcall	_setGestureIntEnable
  5333  05C1  3A00               	xorlw	0
  5334  05C2  1903               	btfsc	3,2
  5335  05C3  2CC3               	goto	l6242
  5336                           
  5337                           ;APDS9960.c: 120:     return 1;
  5338  05C4  3001               	movlw	1
  5339  05C5  0008               	return
  5340  05C6                     __end_of_initialize:	
  5341                           
  5342                           	psect	text2
  5343  0D0F                     __ptext2:	
  5344 ;; *************** function _setProximityGain *****************
  5345 ;; Defined at:
  5346 ;;		line 192 in file "APDS9960.c"
  5347 ;; Parameters:    Size  Location     Type
  5348 ;;  drive           1    wreg     unsigned char 
  5349 ;; Auto vars:     Size  Location     Type
  5350 ;;  drive           1   13[BANK0 ] unsigned char 
  5351 ;;  val             1   12[BANK0 ] unsigned char 
  5352 ;; Return value:  Size  Location     Type
  5353 ;;                  1    wreg      _Bool 
  5354 ;; Registers used:
  5355 ;;		wreg, status,2, status,0, pclath, cstack
  5356 ;; Tracked objects:
  5357 ;;		On entry : 0/0
  5358 ;;		On exit  : 0/0
  5359 ;;		Unchanged: 0/0
  5360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5361 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5362 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5363 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5364 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5365 ;;Total ram usage:        4 bytes
  5366 ;; Hardware stack levels used:    1
  5367 ;; Hardware stack levels required when called:    8
  5368 ;; This function calls:
  5369 ;;		_wireReadDataByte
  5370 ;;		_wireWriteDataByte
  5371 ;; This function is called by:
  5372 ;;		_initialize
  5373 ;; This function uses a non-reentrant model
  5374 ;;
  5375                           
  5376                           
  5377                           ;psect for function _setProximityGain
  5378  0D0F                     _setProximityGain:	
  5379                           
  5380                           ;incstack = 0
  5381                           ; Regs used in _setProximityGain: [wreg+status,2+status,0+pclath+cstack]
  5382                           ;setProximityGain@drive stored from wreg
  5383  0D0F  0020               	movlb	0	; select bank0
  5384  0D10  00AD               	movwf	setProximityGain@drive
  5385                           
  5386                           ;APDS9960.c: 192: _Bool setProximityGain(uint8_t drive);APDS9960.c: 193: {;APDS9960.c: 1
      +                          94:     uint8_t val;;APDS9960.c: 197:     val=wireReadDataByte(0x8F);
  5387  0D11  308F               	movlw	143
  5388  0D12  318C  2400  318D   	fcall	_wireReadDataByte
  5389  0D15  0020               	movlb	0	; select bank0
  5390  0D16  00AA               	movwf	??_setProximityGain
  5391  0D17  082A               	movf	??_setProximityGain,w
  5392  0D18  00AC               	movwf	setProximityGain@val
  5393                           
  5394                           ;APDS9960.c: 199:     drive &= 0b00000011;
  5395  0D19  3003               	movlw	3
  5396  0D1A  00AA               	movwf	??_setProximityGain
  5397  0D1B  082A               	movf	??_setProximityGain,w
  5398  0D1C  05AD               	andwf	setProximityGain@drive,f
  5399                           
  5400                           ;APDS9960.c: 200:     drive = drive << 2;
  5401  0D1D  082D               	movf	setProximityGain@drive,w
  5402  0D1E  00AA               	movwf	??_setProximityGain
  5403  0D1F  3001               	movlw	1
  5404  0D20                     u5185:	
  5405  0D20  35AA               	lslf	??_setProximityGain,f
  5406  0D21  3EFF               	addlw	-1
  5407  0D22  1D03               	skipz
  5408  0D23  2D20               	goto	u5185
  5409  0D24  352A               	lslf	??_setProximityGain,w
  5410  0D25  00AB               	movwf	??_setProximityGain+1
  5411  0D26  082B               	movf	??_setProximityGain+1,w
  5412  0D27  00AD               	movwf	setProximityGain@drive
  5413                           
  5414                           ;APDS9960.c: 201:     val &= 0b11110011;
  5415  0D28  30F3               	movlw	243
  5416  0D29  00AA               	movwf	??_setProximityGain
  5417  0D2A  082A               	movf	??_setProximityGain,w
  5418  0D2B  05AC               	andwf	setProximityGain@val,f
  5419                           
  5420                           ;APDS9960.c: 202:     val |= drive;
  5421  0D2C  082D               	movf	setProximityGain@drive,w
  5422  0D2D  00AA               	movwf	??_setProximityGain
  5423  0D2E  082A               	movf	??_setProximityGain,w
  5424  0D2F  04AC               	iorwf	setProximityGain@val,f
  5425                           
  5426                           ;APDS9960.c: 205:     if( !wireWriteDataByte(0x8F, val) ) {
  5427  0D30  082C               	movf	setProximityGain@val,w
  5428  0D31  00AA               	movwf	??_setProximityGain
  5429  0D32  082A               	movf	??_setProximityGain,w
  5430  0D33  00A6               	movwf	wireWriteDataByte@val
  5431  0D34  308F               	movlw	143
  5432  0D35  318B  238F         	fcall	_wireWriteDataByte
  5433  0D37  0008               	return
  5434  0D38                     __end_of_setProximityGain:	
  5435                           
  5436                           	psect	text3
  5437  0B39                     __ptext3:	
  5438 ;; *************** function _setProxIntLowThresh *****************
  5439 ;; Defined at:
  5440 ;;		line 234 in file "APDS9960.c"
  5441 ;; Parameters:    Size  Location     Type
  5442 ;;  threshold       1    wreg     unsigned char 
  5443 ;; Auto vars:     Size  Location     Type
  5444 ;;  threshold       1   11[BANK0 ] unsigned char 
  5445 ;; Return value:  Size  Location     Type
  5446 ;;                  1    wreg      _Bool 
  5447 ;; Registers used:
  5448 ;;		wreg, status,2, status,0, pclath, cstack
  5449 ;; Tracked objects:
  5450 ;;		On entry : 0/0
  5451 ;;		On exit  : 0/0
  5452 ;;		Unchanged: 0/0
  5453 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5454 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5455 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5456 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5457 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5458 ;;Total ram usage:        2 bytes
  5459 ;; Hardware stack levels used:    1
  5460 ;; Hardware stack levels required when called:    8
  5461 ;; This function calls:
  5462 ;;		_wireWriteDataByte
  5463 ;; This function is called by:
  5464 ;;		_initialize
  5465 ;; This function uses a non-reentrant model
  5466 ;;
  5467                           
  5468                           
  5469                           ;psect for function _setProxIntLowThresh
  5470  0B39                     _setProxIntLowThresh:	
  5471                           
  5472                           ;incstack = 0
  5473                           ; Regs used in _setProxIntLowThresh: [wreg+status,2+status,0+pclath+cstack]
  5474                           ;setProxIntLowThresh@threshold stored from wreg
  5475  0B39  0020               	movlb	0	; select bank0
  5476  0B3A  00AB               	movwf	setProxIntLowThresh@threshold
  5477                           
  5478                           ;APDS9960.c: 234: _Bool setProxIntLowThresh(uint8_t threshold);APDS9960.c: 235: {;APDS99
      +                          60.c: 236:     if( !wireWriteDataByte(0x89, threshold) ) {
  5479  0B3B  082B               	movf	setProxIntLowThresh@threshold,w
  5480  0B3C  00AA               	movwf	??_setProxIntLowThresh
  5481  0B3D  082A               	movf	??_setProxIntLowThresh,w
  5482  0B3E  00A6               	movwf	wireWriteDataByte@val
  5483  0B3F  3089               	movlw	137
  5484  0B40  318B  238F  318B   	fcall	_wireWriteDataByte
  5485  0B43  0020               	movlb	0	; select bank0
  5486  0B44  0826               	movf	?_wireWriteDataByte,w
  5487  0B45  0427               	iorwf	?_wireWriteDataByte+1,w
  5488  0B46  1D03               	btfss	3,2
  5489  0B47  2B4A               	goto	l6010
  5490                           
  5491                           ;APDS9960.c: 237:         return 0;
  5492  0B48  3000               	movlw	0
  5493  0B49  0008               	return
  5494  0B4A                     l6010:	
  5495                           
  5496                           ;APDS9960.c: 240:     return 1;
  5497  0B4A  3001               	movlw	1
  5498  0B4B  0008               	return
  5499  0B4C                     __end_of_setProxIntLowThresh:	
  5500                           
  5501                           	psect	text4
  5502  0B26                     __ptext4:	
  5503 ;; *************** function _setProxIntHighThresh *****************
  5504 ;; Defined at:
  5505 ;;		line 244 in file "APDS9960.c"
  5506 ;; Parameters:    Size  Location     Type
  5507 ;;  threshold       1    wreg     unsigned char 
  5508 ;; Auto vars:     Size  Location     Type
  5509 ;;  threshold       1   11[BANK0 ] unsigned char 
  5510 ;; Return value:  Size  Location     Type
  5511 ;;                  1    wreg      _Bool 
  5512 ;; Registers used:
  5513 ;;		wreg, status,2, status,0, pclath, cstack
  5514 ;; Tracked objects:
  5515 ;;		On entry : 0/0
  5516 ;;		On exit  : 0/0
  5517 ;;		Unchanged: 0/0
  5518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5520 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5521 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5522 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5523 ;;Total ram usage:        2 bytes
  5524 ;; Hardware stack levels used:    1
  5525 ;; Hardware stack levels required when called:    8
  5526 ;; This function calls:
  5527 ;;		_wireWriteDataByte
  5528 ;; This function is called by:
  5529 ;;		_initialize
  5530 ;; This function uses a non-reentrant model
  5531 ;;
  5532                           
  5533                           
  5534                           ;psect for function _setProxIntHighThresh
  5535  0B26                     _setProxIntHighThresh:	
  5536                           
  5537                           ;incstack = 0
  5538                           ; Regs used in _setProxIntHighThresh: [wreg+status,2+status,0+pclath+cstack]
  5539                           ;setProxIntHighThresh@threshold stored from wreg
  5540  0B26  0020               	movlb	0	; select bank0
  5541  0B27  00AB               	movwf	setProxIntHighThresh@threshold
  5542                           
  5543                           ;APDS9960.c: 244: _Bool setProxIntHighThresh(uint8_t threshold);APDS9960.c: 245: {;APDS9
      +                          960.c: 246:     if( !wireWriteDataByte(0x8B, threshold) ) {
  5544  0B28  082B               	movf	setProxIntHighThresh@threshold,w
  5545  0B29  00AA               	movwf	??_setProxIntHighThresh
  5546  0B2A  082A               	movf	??_setProxIntHighThresh,w
  5547  0B2B  00A6               	movwf	wireWriteDataByte@val
  5548  0B2C  308B               	movlw	139
  5549  0B2D  318B  238F  318B   	fcall	_wireWriteDataByte
  5550  0B30  0020               	movlb	0	; select bank0
  5551  0B31  0826               	movf	?_wireWriteDataByte,w
  5552  0B32  0427               	iorwf	?_wireWriteDataByte+1,w
  5553  0B33  1D03               	btfss	3,2
  5554  0B34  2B37               	goto	l6020
  5555                           
  5556                           ;APDS9960.c: 247:         return 0;
  5557  0B35  3000               	movlw	0
  5558  0B36  0008               	return
  5559  0B37                     l6020:	
  5560                           
  5561                           ;APDS9960.c: 250:     return 1;
  5562  0B37  3001               	movlw	1
  5563  0B38  0008               	return
  5564  0B39                     __end_of_setProxIntHighThresh:	
  5565                           
  5566                           	psect	text5
  5567  0CBF                     __ptext5:	
  5568 ;; *************** function _setLightIntLowThreshold *****************
  5569 ;; Defined at:
  5570 ;;		line 254 in file "APDS9960.c"
  5571 ;; Parameters:    Size  Location     Type
  5572 ;;  threshold       2   10[BANK0 ] unsigned short 
  5573 ;; Auto vars:     Size  Location     Type
  5574 ;;  val_high        1   14[BANK0 ] unsigned char 
  5575 ;;  val_low         1   13[BANK0 ] unsigned char 
  5576 ;; Return value:  Size  Location     Type
  5577 ;;                  1    wreg      _Bool 
  5578 ;; Registers used:
  5579 ;;		wreg, status,2, status,0, pclath, cstack
  5580 ;; Tracked objects:
  5581 ;;		On entry : 0/0
  5582 ;;		On exit  : 0/0
  5583 ;;		Unchanged: 0/0
  5584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5585 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5586 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5587 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5588 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5589 ;;Total ram usage:        5 bytes
  5590 ;; Hardware stack levels used:    1
  5591 ;; Hardware stack levels required when called:    8
  5592 ;; This function calls:
  5593 ;;		_wireWriteDataByte
  5594 ;; This function is called by:
  5595 ;;		_initialize
  5596 ;; This function uses a non-reentrant model
  5597 ;;
  5598                           
  5599                           
  5600                           ;psect for function _setLightIntLowThreshold
  5601  0CBF                     _setLightIntLowThreshold:	
  5602                           
  5603                           ;APDS9960.c: 254: _Bool setLightIntLowThreshold(uint16_t threshold);APDS9960.c: 255: {;A
      +                          PDS9960.c: 256:     uint8_t val_low;;APDS9960.c: 257:     uint8_t val_high;;APDS9960.c: 
      +                          260:     val_low = threshold & 0x00FF;
  5604                           
  5605                           ;incstack = 0
  5606                           ; Regs used in _setLightIntLowThreshold: [wreg+status,2+status,0+pclath+cstack]
  5607  0CBF  0020               	movlb	0	; select bank0
  5608  0CC0  082A               	movf	setLightIntLowThreshold@threshold,w
  5609  0CC1  00AC               	movwf	??_setLightIntLowThreshold
  5610  0CC2  082C               	movf	??_setLightIntLowThreshold,w
  5611  0CC3  00AD               	movwf	setLightIntLowThreshold@val_low
  5612                           
  5613                           ;APDS9960.c: 261:     val_high = (threshold & 0xFF00) >> 8;
  5614  0CC4  082B               	movf	setLightIntLowThreshold@threshold+1,w
  5615  0CC5  00AC               	movwf	??_setLightIntLowThreshold
  5616  0CC6  082C               	movf	??_setLightIntLowThreshold,w
  5617  0CC7  00AE               	movwf	setLightIntLowThreshold@val_high
  5618                           
  5619                           ;APDS9960.c: 264:     if( !wireWriteDataByte(0x84, val_low) ) {
  5620  0CC8  082D               	movf	setLightIntLowThreshold@val_low,w
  5621  0CC9  00AC               	movwf	??_setLightIntLowThreshold
  5622  0CCA  082C               	movf	??_setLightIntLowThreshold,w
  5623  0CCB  00A6               	movwf	wireWriteDataByte@val
  5624  0CCC  3084               	movlw	132
  5625  0CCD  318B  238F  318C   	fcall	_wireWriteDataByte
  5626  0CD0  0020               	movlb	0	; select bank0
  5627  0CD1  0826               	movf	?_wireWriteDataByte,w
  5628  0CD2  0427               	iorwf	?_wireWriteDataByte+1,w
  5629  0CD3  1D03               	btfss	3,2
  5630  0CD4  2CD7               	goto	l6034
  5631  0CD5                     l6030:	
  5632                           
  5633                           ;APDS9960.c: 265:         return 0;
  5634  0CD5  3000               	movlw	0
  5635  0CD6  0008               	return
  5636  0CD7                     l6034:	
  5637                           
  5638                           ;APDS9960.c: 269:     if( !wireWriteDataByte(0x85, val_high) ) {
  5639  0CD7  082E               	movf	setLightIntLowThreshold@val_high,w
  5640  0CD8  00AC               	movwf	??_setLightIntLowThreshold
  5641  0CD9  082C               	movf	??_setLightIntLowThreshold,w
  5642  0CDA  00A6               	movwf	wireWriteDataByte@val
  5643  0CDB  3085               	movlw	133
  5644  0CDC  318B  238F  318C   	fcall	_wireWriteDataByte
  5645  0CDF  0020               	movlb	0	; select bank0
  5646  0CE0  0826               	movf	?_wireWriteDataByte,w
  5647  0CE1  0427               	iorwf	?_wireWriteDataByte+1,w
  5648  0CE2  1903               	btfsc	3,2
  5649  0CE3  2CD5               	goto	l6030
  5650                           
  5651                           ;APDS9960.c: 273:     return 1;
  5652  0CE4  3001               	movlw	1
  5653  0CE5  0008               	return
  5654  0CE6                     __end_of_setLightIntLowThreshold:	
  5655                           
  5656                           	psect	text6
  5657  0C98                     __ptext6:	
  5658 ;; *************** function _setLightIntHighThreshold *****************
  5659 ;; Defined at:
  5660 ;;		line 277 in file "APDS9960.c"
  5661 ;; Parameters:    Size  Location     Type
  5662 ;;  threshold       2   10[BANK0 ] unsigned short 
  5663 ;; Auto vars:     Size  Location     Type
  5664 ;;  val_high        1   14[BANK0 ] unsigned char 
  5665 ;;  val_low         1   13[BANK0 ] unsigned char 
  5666 ;; Return value:  Size  Location     Type
  5667 ;;                  1    wreg      _Bool 
  5668 ;; Registers used:
  5669 ;;		wreg, status,2, status,0, pclath, cstack
  5670 ;; Tracked objects:
  5671 ;;		On entry : 0/0
  5672 ;;		On exit  : 0/0
  5673 ;;		Unchanged: 0/0
  5674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5675 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5676 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5677 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5678 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5679 ;;Total ram usage:        5 bytes
  5680 ;; Hardware stack levels used:    1
  5681 ;; Hardware stack levels required when called:    8
  5682 ;; This function calls:
  5683 ;;		_wireWriteDataByte
  5684 ;; This function is called by:
  5685 ;;		_initialize
  5686 ;; This function uses a non-reentrant model
  5687 ;;
  5688                           
  5689                           
  5690                           ;psect for function _setLightIntHighThreshold
  5691  0C98                     _setLightIntHighThreshold:	
  5692                           
  5693                           ;APDS9960.c: 277: _Bool setLightIntHighThreshold(uint16_t threshold);APDS9960.c: 278: {;
      +                          APDS9960.c: 279:     uint8_t val_low;;APDS9960.c: 280:     uint8_t val_high;;APDS9960.c:
      +                           283:     val_low = threshold & 0x00FF;
  5694                           
  5695                           ;incstack = 0
  5696                           ; Regs used in _setLightIntHighThreshold: [wreg+status,2+status,0+pclath+cstack]
  5697  0C98  0020               	movlb	0	; select bank0
  5698  0C99  082A               	movf	setLightIntHighThreshold@threshold,w
  5699  0C9A  00AC               	movwf	??_setLightIntHighThreshold
  5700  0C9B  082C               	movf	??_setLightIntHighThreshold,w
  5701  0C9C  00AD               	movwf	setLightIntHighThreshold@val_low
  5702                           
  5703                           ;APDS9960.c: 284:     val_high = (threshold & 0xFF00) >> 8;
  5704  0C9D  082B               	movf	setLightIntHighThreshold@threshold+1,w
  5705  0C9E  00AC               	movwf	??_setLightIntHighThreshold
  5706  0C9F  082C               	movf	??_setLightIntHighThreshold,w
  5707  0CA0  00AE               	movwf	setLightIntHighThreshold@val_high
  5708                           
  5709                           ;APDS9960.c: 287:     if( !wireWriteDataByte(0x86, val_low) ) {
  5710  0CA1  082D               	movf	setLightIntHighThreshold@val_low,w
  5711  0CA2  00AC               	movwf	??_setLightIntHighThreshold
  5712  0CA3  082C               	movf	??_setLightIntHighThreshold,w
  5713  0CA4  00A6               	movwf	wireWriteDataByte@val
  5714  0CA5  3086               	movlw	134
  5715  0CA6  318B  238F  318C   	fcall	_wireWriteDataByte
  5716  0CA9  0020               	movlb	0	; select bank0
  5717  0CAA  0826               	movf	?_wireWriteDataByte,w
  5718  0CAB  0427               	iorwf	?_wireWriteDataByte+1,w
  5719  0CAC  1D03               	btfss	3,2
  5720  0CAD  2CB0               	goto	l6054
  5721  0CAE                     l6050:	
  5722                           
  5723                           ;APDS9960.c: 288:         return 0;
  5724  0CAE  3000               	movlw	0
  5725  0CAF  0008               	return
  5726  0CB0                     l6054:	
  5727                           
  5728                           ;APDS9960.c: 292:     if( !wireWriteDataByte(0x87, val_high) ) {
  5729  0CB0  082E               	movf	setLightIntHighThreshold@val_high,w
  5730  0CB1  00AC               	movwf	??_setLightIntHighThreshold
  5731  0CB2  082C               	movf	??_setLightIntHighThreshold,w
  5732  0CB3  00A6               	movwf	wireWriteDataByte@val
  5733  0CB4  3087               	movlw	135
  5734  0CB5  318B  238F  318C   	fcall	_wireWriteDataByte
  5735  0CB8  0020               	movlb	0	; select bank0
  5736  0CB9  0826               	movf	?_wireWriteDataByte,w
  5737  0CBA  0427               	iorwf	?_wireWriteDataByte+1,w
  5738  0CBB  1903               	btfsc	3,2
  5739  0CBC  2CAE               	goto	l6050
  5740                           
  5741                           ;APDS9960.c: 296:     return 1;
  5742  0CBD  3001               	movlw	1
  5743  0CBE  0008               	return
  5744  0CBF                     __end_of_setLightIntHighThreshold:	
  5745                           
  5746                           	psect	text7
  5747  0CE6                     __ptext7:	
  5748 ;; *************** function _setLEDDrive *****************
  5749 ;; Defined at:
  5750 ;;		line 170 in file "APDS9960.c"
  5751 ;; Parameters:    Size  Location     Type
  5752 ;;  drive           1    wreg     unsigned char 
  5753 ;; Auto vars:     Size  Location     Type
  5754 ;;  drive           1   13[BANK0 ] unsigned char 
  5755 ;;  val             1   12[BANK0 ] unsigned char 
  5756 ;; Return value:  Size  Location     Type
  5757 ;;                  1    wreg      _Bool 
  5758 ;; Registers used:
  5759 ;;		wreg, status,2, status,0, pclath, cstack
  5760 ;; Tracked objects:
  5761 ;;		On entry : 0/0
  5762 ;;		On exit  : 0/0
  5763 ;;		Unchanged: 0/0
  5764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5766 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5767 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5768 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5769 ;;Total ram usage:        4 bytes
  5770 ;; Hardware stack levels used:    1
  5771 ;; Hardware stack levels required when called:    8
  5772 ;; This function calls:
  5773 ;;		_wireReadDataByte
  5774 ;;		_wireWriteDataByte
  5775 ;; This function is called by:
  5776 ;;		_initialize
  5777 ;; This function uses a non-reentrant model
  5778 ;;
  5779                           
  5780                           
  5781                           ;psect for function _setLEDDrive
  5782  0CE6                     _setLEDDrive:	
  5783                           
  5784                           ;incstack = 0
  5785                           ; Regs used in _setLEDDrive: [wreg+status,2+status,0+pclath+cstack]
  5786                           ;setLEDDrive@drive stored from wreg
  5787  0CE6  0020               	movlb	0	; select bank0
  5788  0CE7  00AD               	movwf	setLEDDrive@drive
  5789                           
  5790                           ;APDS9960.c: 170: _Bool setLEDDrive(uint8_t drive);APDS9960.c: 171: {;APDS9960.c: 172:  
      +                             uint8_t val;;APDS9960.c: 175:     val=wireReadDataByte(0x8F);
  5791  0CE8  308F               	movlw	143
  5792  0CE9  318C  2400  318C   	fcall	_wireReadDataByte
  5793  0CEC  0020               	movlb	0	; select bank0
  5794  0CED  00AA               	movwf	??_setLEDDrive
  5795  0CEE  082A               	movf	??_setLEDDrive,w
  5796  0CEF  00AC               	movwf	setLEDDrive@val
  5797                           
  5798                           ;APDS9960.c: 178:     drive &= 0b00000011;
  5799  0CF0  3003               	movlw	3
  5800  0CF1  00AA               	movwf	??_setLEDDrive
  5801  0CF2  082A               	movf	??_setLEDDrive,w
  5802  0CF3  05AD               	andwf	setLEDDrive@drive,f
  5803                           
  5804                           ;APDS9960.c: 179:     drive = drive << 6;
  5805  0CF4  082D               	movf	setLEDDrive@drive,w
  5806  0CF5  00AA               	movwf	??_setLEDDrive
  5807  0CF6  3005               	movlw	5
  5808  0CF7                     u5175:	
  5809  0CF7  35AA               	lslf	??_setLEDDrive,f
  5810  0CF8  3EFF               	addlw	-1
  5811  0CF9  1D03               	skipz
  5812  0CFA  2CF7               	goto	u5175
  5813  0CFB  352A               	lslf	??_setLEDDrive,w
  5814  0CFC  00AB               	movwf	??_setLEDDrive+1
  5815  0CFD  082B               	movf	??_setLEDDrive+1,w
  5816  0CFE  00AD               	movwf	setLEDDrive@drive
  5817                           
  5818                           ;APDS9960.c: 180:     val &= 0b00111111;
  5819  0CFF  303F               	movlw	63
  5820  0D00  00AA               	movwf	??_setLEDDrive
  5821  0D01  082A               	movf	??_setLEDDrive,w
  5822  0D02  05AC               	andwf	setLEDDrive@val,f
  5823                           
  5824                           ;APDS9960.c: 181:     val |= drive;
  5825  0D03  082D               	movf	setLEDDrive@drive,w
  5826  0D04  00AA               	movwf	??_setLEDDrive
  5827  0D05  082A               	movf	??_setLEDDrive,w
  5828  0D06  04AC               	iorwf	setLEDDrive@val,f
  5829                           
  5830                           ;APDS9960.c: 184:     if( !wireWriteDataByte(0x8F, val) ) {
  5831  0D07  082C               	movf	setLEDDrive@val,w
  5832  0D08  00AA               	movwf	??_setLEDDrive
  5833  0D09  082A               	movf	??_setLEDDrive,w
  5834  0D0A  00A6               	movwf	wireWriteDataByte@val
  5835  0D0B  308F               	movlw	143
  5836  0D0C  318B  238F         	fcall	_wireWriteDataByte
  5837  0D0E  0008               	return
  5838  0D0F                     __end_of_setLEDDrive:	
  5839                           
  5840                           	psect	text8
  5841  0C71                     __ptext8:	
  5842 ;; *************** function _setGestureWaitTime *****************
  5843 ;; Defined at:
  5844 ;;		line 366 in file "APDS9960.c"
  5845 ;; Parameters:    Size  Location     Type
  5846 ;;  time            1    wreg     unsigned char 
  5847 ;; Auto vars:     Size  Location     Type
  5848 ;;  time            1   11[BANK0 ] unsigned char 
  5849 ;;  val             1   12[BANK0 ] unsigned char 
  5850 ;; Return value:  Size  Location     Type
  5851 ;;                  1    wreg      _Bool 
  5852 ;; Registers used:
  5853 ;;		wreg, status,2, status,0, pclath, cstack
  5854 ;; Tracked objects:
  5855 ;;		On entry : 0/0
  5856 ;;		On exit  : 0/0
  5857 ;;		Unchanged: 0/0
  5858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5860 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5861 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5862 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5863 ;;Total ram usage:        3 bytes
  5864 ;; Hardware stack levels used:    1
  5865 ;; Hardware stack levels required when called:    8
  5866 ;; This function calls:
  5867 ;;		_wireReadDataByte
  5868 ;;		_wireWriteDataByte
  5869 ;; This function is called by:
  5870 ;;		_initialize
  5871 ;; This function uses a non-reentrant model
  5872 ;;
  5873                           
  5874                           
  5875                           ;psect for function _setGestureWaitTime
  5876  0C71                     _setGestureWaitTime:	
  5877                           
  5878                           ;incstack = 0
  5879                           ; Regs used in _setGestureWaitTime: [wreg+status,2+status,0+pclath+cstack]
  5880                           ;setGestureWaitTime@time stored from wreg
  5881  0C71  0020               	movlb	0	; select bank0
  5882  0C72  00AB               	movwf	setGestureWaitTime@time
  5883                           
  5884                           ;APDS9960.c: 366: _Bool setGestureWaitTime(uint8_t time);APDS9960.c: 367: {;APDS9960.c: 
      +                          368:     uint8_t val;;APDS9960.c: 371:     val = wireReadDataByte(0xA3);
  5885  0C73  30A3               	movlw	163
  5886  0C74  318C  2400  318C   	fcall	_wireReadDataByte
  5887  0C77  0020               	movlb	0	; select bank0
  5888  0C78  00AA               	movwf	??_setGestureWaitTime
  5889  0C79  082A               	movf	??_setGestureWaitTime,w
  5890  0C7A  00AC               	movwf	setGestureWaitTime@val
  5891                           
  5892                           ;APDS9960.c: 374:     time &= 0b00000111;
  5893  0C7B  3007               	movlw	7
  5894  0C7C  00AA               	movwf	??_setGestureWaitTime
  5895  0C7D  082A               	movf	??_setGestureWaitTime,w
  5896  0C7E  05AB               	andwf	setGestureWaitTime@time,f
  5897                           
  5898                           ;APDS9960.c: 375:     val &= 0b11111000;
  5899  0C7F  30F8               	movlw	248
  5900  0C80  00AA               	movwf	??_setGestureWaitTime
  5901  0C81  082A               	movf	??_setGestureWaitTime,w
  5902  0C82  05AC               	andwf	setGestureWaitTime@val,f
  5903                           
  5904                           ;APDS9960.c: 376:     val |= time;
  5905  0C83  082B               	movf	setGestureWaitTime@time,w
  5906  0C84  00AA               	movwf	??_setGestureWaitTime
  5907  0C85  082A               	movf	??_setGestureWaitTime,w
  5908  0C86  04AC               	iorwf	setGestureWaitTime@val,f
  5909                           
  5910                           ;APDS9960.c: 379:     if( !wireWriteDataByte(0xA3, val) ) {
  5911  0C87  082C               	movf	setGestureWaitTime@val,w
  5912  0C88  00AA               	movwf	??_setGestureWaitTime
  5913  0C89  082A               	movf	??_setGestureWaitTime,w
  5914  0C8A  00A6               	movwf	wireWriteDataByte@val
  5915  0C8B  30A3               	movlw	163
  5916  0C8C  318B  238F  318C   	fcall	_wireWriteDataByte
  5917  0C8F  0020               	movlb	0	; select bank0
  5918  0C90  0826               	movf	?_wireWriteDataByte,w
  5919  0C91  0427               	iorwf	?_wireWriteDataByte+1,w
  5920  0C92  1D03               	btfss	3,2
  5921  0C93  2C96               	goto	l6134
  5922                           
  5923                           ;APDS9960.c: 380:         return 0;
  5924  0C94  3000               	movlw	0
  5925  0C95  0008               	return
  5926  0C96                     l6134:	
  5927                           
  5928                           ;APDS9960.c: 383:     return 1;
  5929  0C96  3001               	movlw	1
  5930  0C97  0008               	return
  5931  0C98                     __end_of_setGestureWaitTime:	
  5932                           
  5933                           	psect	text9
  5934  0E50                     __ptext9:	
  5935 ;; *************** function _setGestureLEDDrive *****************
  5936 ;; Defined at:
  5937 ;;		line 343 in file "APDS9960.c"
  5938 ;; Parameters:    Size  Location     Type
  5939 ;;  drive           1    wreg     unsigned char 
  5940 ;; Auto vars:     Size  Location     Type
  5941 ;;  drive           1   13[BANK0 ] unsigned char 
  5942 ;;  val             1   12[BANK0 ] unsigned char 
  5943 ;; Return value:  Size  Location     Type
  5944 ;;                  1    wreg      _Bool 
  5945 ;; Registers used:
  5946 ;;		wreg, status,2, status,0, pclath, cstack
  5947 ;; Tracked objects:
  5948 ;;		On entry : 0/0
  5949 ;;		On exit  : 0/0
  5950 ;;		Unchanged: 0/0
  5951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5952 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5953 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5954 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5955 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5956 ;;Total ram usage:        4 bytes
  5957 ;; Hardware stack levels used:    1
  5958 ;; Hardware stack levels required when called:    8
  5959 ;; This function calls:
  5960 ;;		_wireReadDataByte
  5961 ;;		_wireWriteDataByte
  5962 ;; This function is called by:
  5963 ;;		_initialize
  5964 ;; This function uses a non-reentrant model
  5965 ;;
  5966                           
  5967                           
  5968                           ;psect for function _setGestureLEDDrive
  5969  0E50                     _setGestureLEDDrive:	
  5970                           
  5971                           ;incstack = 0
  5972                           ; Regs used in _setGestureLEDDrive: [wreg+status,2+status,0+pclath+cstack]
  5973                           ;setGestureLEDDrive@drive stored from wreg
  5974  0E50  0020               	movlb	0	; select bank0
  5975  0E51  00AD               	movwf	setGestureLEDDrive@drive
  5976                           
  5977                           ;APDS9960.c: 343: _Bool setGestureLEDDrive(uint8_t drive);APDS9960.c: 344: {;APDS9960.c:
      +                           345:     uint8_t val;;APDS9960.c: 348:     val = wireReadDataByte(0xA3);
  5978  0E52  30A3               	movlw	163
  5979  0E53  318C  2400  318E   	fcall	_wireReadDataByte
  5980  0E56  0020               	movlb	0	; select bank0
  5981  0E57  00AA               	movwf	??_setGestureLEDDrive
  5982  0E58  082A               	movf	??_setGestureLEDDrive,w
  5983  0E59  00AC               	movwf	setGestureLEDDrive@val
  5984                           
  5985                           ;APDS9960.c: 352:     drive &= 0b00000011;
  5986  0E5A  3003               	movlw	3
  5987  0E5B  00AA               	movwf	??_setGestureLEDDrive
  5988  0E5C  082A               	movf	??_setGestureLEDDrive,w
  5989  0E5D  05AD               	andwf	setGestureLEDDrive@drive,f
  5990                           
  5991                           ;APDS9960.c: 353:     drive = drive << 3;
  5992  0E5E  082D               	movf	setGestureLEDDrive@drive,w
  5993  0E5F  00AA               	movwf	??_setGestureLEDDrive
  5994  0E60  3002               	movlw	2
  5995  0E61                     u5295:	
  5996  0E61  35AA               	lslf	??_setGestureLEDDrive,f
  5997  0E62  3EFF               	addlw	-1
  5998  0E63  1D03               	skipz
  5999  0E64  2E61               	goto	u5295
  6000  0E65  352A               	lslf	??_setGestureLEDDrive,w
  6001  0E66  00AB               	movwf	??_setGestureLEDDrive+1
  6002  0E67  082B               	movf	??_setGestureLEDDrive+1,w
  6003  0E68  00AD               	movwf	setGestureLEDDrive@drive
  6004                           
  6005                           ;APDS9960.c: 354:     val &= 0b11100111;
  6006  0E69  30E7               	movlw	231
  6007  0E6A  00AA               	movwf	??_setGestureLEDDrive
  6008  0E6B  082A               	movf	??_setGestureLEDDrive,w
  6009  0E6C  05AC               	andwf	setGestureLEDDrive@val,f
  6010                           
  6011                           ;APDS9960.c: 355:     val |= drive;
  6012  0E6D  082D               	movf	setGestureLEDDrive@drive,w
  6013  0E6E  00AA               	movwf	??_setGestureLEDDrive
  6014  0E6F  082A               	movf	??_setGestureLEDDrive,w
  6015  0E70  04AC               	iorwf	setGestureLEDDrive@val,f
  6016                           
  6017                           ;APDS9960.c: 358:     if( !wireWriteDataByte(0xA3, val) ) {
  6018  0E71  082C               	movf	setGestureLEDDrive@val,w
  6019  0E72  00AA               	movwf	??_setGestureLEDDrive
  6020  0E73  082A               	movf	??_setGestureLEDDrive,w
  6021  0E74  00A6               	movwf	wireWriteDataByte@val
  6022  0E75  30A3               	movlw	163
  6023  0E76  318B  238F  318E   	fcall	_wireWriteDataByte
  6024  0E79  0020               	movlb	0	; select bank0
  6025  0E7A  0826               	movf	?_wireWriteDataByte,w
  6026  0E7B  0427               	iorwf	?_wireWriteDataByte+1,w
  6027  0E7C  1D03               	btfss	3,2
  6028  0E7D  2E80               	goto	l6116
  6029                           
  6030                           ;APDS9960.c: 359:         return 0;
  6031  0E7E  3000               	movlw	0
  6032  0E7F  0008               	return
  6033  0E80                     l6116:	
  6034                           
  6035                           ;APDS9960.c: 362:     return 1;
  6036  0E80  3001               	movlw	1
  6037  0E81  0008               	return
  6038  0E82                     __end_of_setGestureLEDDrive:	
  6039                           
  6040                           	psect	text10
  6041  0E1E                     __ptext10:	
  6042 ;; *************** function _setGestureGain *****************
  6043 ;; Defined at:
  6044 ;;		line 320 in file "APDS9960.c"
  6045 ;; Parameters:    Size  Location     Type
  6046 ;;  gain            1    wreg     unsigned char 
  6047 ;; Auto vars:     Size  Location     Type
  6048 ;;  gain            1   13[BANK0 ] unsigned char 
  6049 ;;  val             1   12[BANK0 ] unsigned char 
  6050 ;; Return value:  Size  Location     Type
  6051 ;;                  1    wreg      _Bool 
  6052 ;; Registers used:
  6053 ;;		wreg, status,2, status,0, pclath, cstack
  6054 ;; Tracked objects:
  6055 ;;		On entry : 0/0
  6056 ;;		On exit  : 0/0
  6057 ;;		Unchanged: 0/0
  6058 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6059 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6060 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6061 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6062 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6063 ;;Total ram usage:        4 bytes
  6064 ;; Hardware stack levels used:    1
  6065 ;; Hardware stack levels required when called:    8
  6066 ;; This function calls:
  6067 ;;		_wireReadDataByte
  6068 ;;		_wireWriteDataByte
  6069 ;; This function is called by:
  6070 ;;		_initialize
  6071 ;; This function uses a non-reentrant model
  6072 ;;
  6073                           
  6074                           
  6075                           ;psect for function _setGestureGain
  6076  0E1E                     _setGestureGain:	
  6077                           
  6078                           ;incstack = 0
  6079                           ; Regs used in _setGestureGain: [wreg+status,2+status,0+pclath+cstack]
  6080                           ;setGestureGain@gain stored from wreg
  6081  0E1E  0020               	movlb	0	; select bank0
  6082  0E1F  00AD               	movwf	setGestureGain@gain
  6083                           
  6084                           ;APDS9960.c: 320: _Bool setGestureGain(uint8_t gain);APDS9960.c: 321: {;APDS9960.c: 322:
      +                               uint8_t val;;APDS9960.c: 325:     val = wireReadDataByte(0xA3);
  6085  0E20  30A3               	movlw	163
  6086  0E21  318C  2400  318E   	fcall	_wireReadDataByte
  6087  0E24  0020               	movlb	0	; select bank0
  6088  0E25  00AA               	movwf	??_setGestureGain
  6089  0E26  082A               	movf	??_setGestureGain,w
  6090  0E27  00AC               	movwf	setGestureGain@val
  6091                           
  6092                           ;APDS9960.c: 329:     gain &= 0b00000011;
  6093  0E28  3003               	movlw	3
  6094  0E29  00AA               	movwf	??_setGestureGain
  6095  0E2A  082A               	movf	??_setGestureGain,w
  6096  0E2B  05AD               	andwf	setGestureGain@gain,f
  6097                           
  6098                           ;APDS9960.c: 330:     gain = gain << 5;
  6099  0E2C  082D               	movf	setGestureGain@gain,w
  6100  0E2D  00AA               	movwf	??_setGestureGain
  6101  0E2E  3004               	movlw	4
  6102  0E2F                     u5275:	
  6103  0E2F  35AA               	lslf	??_setGestureGain,f
  6104  0E30  3EFF               	addlw	-1
  6105  0E31  1D03               	skipz
  6106  0E32  2E2F               	goto	u5275
  6107  0E33  352A               	lslf	??_setGestureGain,w
  6108  0E34  00AB               	movwf	??_setGestureGain+1
  6109  0E35  082B               	movf	??_setGestureGain+1,w
  6110  0E36  00AD               	movwf	setGestureGain@gain
  6111                           
  6112                           ;APDS9960.c: 331:     val &= 0b10011111;
  6113  0E37  309F               	movlw	159
  6114  0E38  00AA               	movwf	??_setGestureGain
  6115  0E39  082A               	movf	??_setGestureGain,w
  6116  0E3A  05AC               	andwf	setGestureGain@val,f
  6117                           
  6118                           ;APDS9960.c: 332:     val |= gain;
  6119  0E3B  082D               	movf	setGestureGain@gain,w
  6120  0E3C  00AA               	movwf	??_setGestureGain
  6121  0E3D  082A               	movf	??_setGestureGain,w
  6122  0E3E  04AC               	iorwf	setGestureGain@val,f
  6123                           
  6124                           ;APDS9960.c: 335:     if( !wireWriteDataByte(0xA3, val) ) {
  6125  0E3F  082C               	movf	setGestureGain@val,w
  6126  0E40  00AA               	movwf	??_setGestureGain
  6127  0E41  082A               	movf	??_setGestureGain,w
  6128  0E42  00A6               	movwf	wireWriteDataByte@val
  6129  0E43  30A3               	movlw	163
  6130  0E44  318B  238F  318E   	fcall	_wireWriteDataByte
  6131  0E47  0020               	movlb	0	; select bank0
  6132  0E48  0826               	movf	?_wireWriteDataByte,w
  6133  0E49  0427               	iorwf	?_wireWriteDataByte+1,w
  6134  0E4A  1D03               	btfss	3,2
  6135  0E4B  2E4E               	goto	l6098
  6136                           
  6137                           ;APDS9960.c: 336:         return 0;
  6138  0E4C  3000               	movlw	0
  6139  0E4D  0008               	return
  6140  0E4E                     l6098:	
  6141                           
  6142                           ;APDS9960.c: 339:     return 1;
  6143  0E4E  3001               	movlw	1
  6144  0E4F  0008               	return
  6145  0E50                     __end_of_setGestureGain:	
  6146                           
  6147                           	psect	text11
  6148  0B13                     __ptext11:	
  6149 ;; *************** function _setGestureExitThresh *****************
  6150 ;; Defined at:
  6151 ;;		line 310 in file "APDS9960.c"
  6152 ;; Parameters:    Size  Location     Type
  6153 ;;  threshold       1    wreg     unsigned char 
  6154 ;; Auto vars:     Size  Location     Type
  6155 ;;  threshold       1   11[BANK0 ] unsigned char 
  6156 ;; Return value:  Size  Location     Type
  6157 ;;                  1    wreg      _Bool 
  6158 ;; Registers used:
  6159 ;;		wreg, status,2, status,0, pclath, cstack
  6160 ;; Tracked objects:
  6161 ;;		On entry : 0/0
  6162 ;;		On exit  : 0/0
  6163 ;;		Unchanged: 0/0
  6164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6166 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6167 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6168 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6169 ;;Total ram usage:        2 bytes
  6170 ;; Hardware stack levels used:    1
  6171 ;; Hardware stack levels required when called:    8
  6172 ;; This function calls:
  6173 ;;		_wireWriteDataByte
  6174 ;; This function is called by:
  6175 ;;		_initialize
  6176 ;; This function uses a non-reentrant model
  6177 ;;
  6178                           
  6179                           
  6180                           ;psect for function _setGestureExitThresh
  6181  0B13                     _setGestureExitThresh:	
  6182                           
  6183                           ;incstack = 0
  6184                           ; Regs used in _setGestureExitThresh: [wreg+status,2+status,0+pclath+cstack]
  6185                           ;setGestureExitThresh@threshold stored from wreg
  6186  0B13  0020               	movlb	0	; select bank0
  6187  0B14  00AB               	movwf	setGestureExitThresh@threshold
  6188                           
  6189                           ;APDS9960.c: 310: _Bool setGestureExitThresh(uint8_t threshold);APDS9960.c: 311: {;APDS9
      +                          960.c: 312:     if( !wireWriteDataByte(0xA1, threshold) ) {
  6190  0B15  082B               	movf	setGestureExitThresh@threshold,w
  6191  0B16  00AA               	movwf	??_setGestureExitThresh
  6192  0B17  082A               	movf	??_setGestureExitThresh,w
  6193  0B18  00A6               	movwf	wireWriteDataByte@val
  6194  0B19  30A1               	movlw	161
  6195  0B1A  318B  238F  318B   	fcall	_wireWriteDataByte
  6196  0B1D  0020               	movlb	0	; select bank0
  6197  0B1E  0826               	movf	?_wireWriteDataByte,w
  6198  0B1F  0427               	iorwf	?_wireWriteDataByte+1,w
  6199  0B20  1D03               	btfss	3,2
  6200  0B21  2B24               	goto	l6080
  6201                           
  6202                           ;APDS9960.c: 313:         return 0;
  6203  0B22  3000               	movlw	0
  6204  0B23  0008               	return
  6205  0B24                     l6080:	
  6206                           
  6207                           ;APDS9960.c: 316:     return 1;
  6208  0B24  3001               	movlw	1
  6209  0B25  0008               	return
  6210  0B26                     __end_of_setGestureExitThresh:	
  6211                           
  6212                           	psect	text12
  6213  0B00                     __ptext12:	
  6214 ;; *************** function _setGestureEnterThresh *****************
  6215 ;; Defined at:
  6216 ;;		line 300 in file "APDS9960.c"
  6217 ;; Parameters:    Size  Location     Type
  6218 ;;  threshold       1    wreg     unsigned char 
  6219 ;; Auto vars:     Size  Location     Type
  6220 ;;  threshold       1   11[BANK0 ] unsigned char 
  6221 ;; Return value:  Size  Location     Type
  6222 ;;                  1    wreg      _Bool 
  6223 ;; Registers used:
  6224 ;;		wreg, status,2, status,0, pclath, cstack
  6225 ;; Tracked objects:
  6226 ;;		On entry : 0/0
  6227 ;;		On exit  : 0/0
  6228 ;;		Unchanged: 0/0
  6229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6230 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6231 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6232 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6233 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6234 ;;Total ram usage:        2 bytes
  6235 ;; Hardware stack levels used:    1
  6236 ;; Hardware stack levels required when called:    8
  6237 ;; This function calls:
  6238 ;;		_wireWriteDataByte
  6239 ;; This function is called by:
  6240 ;;		_initialize
  6241 ;; This function uses a non-reentrant model
  6242 ;;
  6243                           
  6244                           
  6245                           ;psect for function _setGestureEnterThresh
  6246  0B00                     _setGestureEnterThresh:	
  6247                           
  6248                           ;incstack = 0
  6249                           ; Regs used in _setGestureEnterThresh: [wreg+status,2+status,0+pclath+cstack]
  6250                           ;setGestureEnterThresh@threshold stored from wreg
  6251  0B00  0020               	movlb	0	; select bank0
  6252  0B01  00AB               	movwf	setGestureEnterThresh@threshold
  6253                           
  6254                           ;APDS9960.c: 300: _Bool setGestureEnterThresh(uint8_t threshold);APDS9960.c: 301: {;APDS
      +                          9960.c: 302:     if( !wireWriteDataByte(0xA0, threshold) ) {
  6255  0B02  082B               	movf	setGestureEnterThresh@threshold,w
  6256  0B03  00AA               	movwf	??_setGestureEnterThresh
  6257  0B04  082A               	movf	??_setGestureEnterThresh,w
  6258  0B05  00A6               	movwf	wireWriteDataByte@val
  6259  0B06  30A0               	movlw	160
  6260  0B07  318B  238F  318B   	fcall	_wireWriteDataByte
  6261  0B0A  0020               	movlb	0	; select bank0
  6262  0B0B  0826               	movf	?_wireWriteDataByte,w
  6263  0B0C  0427               	iorwf	?_wireWriteDataByte+1,w
  6264  0B0D  1D03               	btfss	3,2
  6265  0B0E  2B11               	goto	l6070
  6266                           
  6267                           ;APDS9960.c: 303:         return 0;
  6268  0B0F  3000               	movlw	0
  6269  0B10  0008               	return
  6270  0B11                     l6070:	
  6271                           
  6272                           ;APDS9960.c: 306:     return 1;
  6273  0B11  3001               	movlw	1
  6274  0B12  0008               	return
  6275  0B13                     __end_of_setGestureEnterThresh:	
  6276                           
  6277                           	psect	text13
  6278  0BE2                     __ptext13:	
  6279 ;; *************** function _setAmbientLightGain *****************
  6280 ;; Defined at:
  6281 ;;		line 213 in file "APDS9960.c"
  6282 ;; Parameters:    Size  Location     Type
  6283 ;;  drive           1    wreg     unsigned char 
  6284 ;; Auto vars:     Size  Location     Type
  6285 ;;  drive           1   11[BANK0 ] unsigned char 
  6286 ;;  val             1   12[BANK0 ] unsigned char 
  6287 ;; Return value:  Size  Location     Type
  6288 ;;                  1    wreg      _Bool 
  6289 ;; Registers used:
  6290 ;;		wreg, status,2, status,0, pclath, cstack
  6291 ;; Tracked objects:
  6292 ;;		On entry : 0/0
  6293 ;;		On exit  : 0/0
  6294 ;;		Unchanged: 0/0
  6295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6297 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6298 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6299 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6300 ;;Total ram usage:        3 bytes
  6301 ;; Hardware stack levels used:    1
  6302 ;; Hardware stack levels required when called:    8
  6303 ;; This function calls:
  6304 ;;		_wireReadDataByte
  6305 ;;		_wireWriteDataByte
  6306 ;; This function is called by:
  6307 ;;		_initialize
  6308 ;; This function uses a non-reentrant model
  6309 ;;
  6310                           
  6311                           
  6312                           ;psect for function _setAmbientLightGain
  6313  0BE2                     _setAmbientLightGain:	
  6314                           
  6315                           ;incstack = 0
  6316                           ; Regs used in _setAmbientLightGain: [wreg+status,2+status,0+pclath+cstack]
  6317                           ;setAmbientLightGain@drive stored from wreg
  6318  0BE2  0020               	movlb	0	; select bank0
  6319  0BE3  00AB               	movwf	setAmbientLightGain@drive
  6320                           
  6321                           ;APDS9960.c: 213: _Bool setAmbientLightGain(uint8_t drive);APDS9960.c: 214: {;APDS9960.c
      +                          : 215:     uint8_t val;;APDS9960.c: 218:     val= wireReadDataByte(0x8F);
  6322  0BE4  308F               	movlw	143
  6323  0BE5  318C  2400  318B   	fcall	_wireReadDataByte
  6324  0BE8  0020               	movlb	0	; select bank0
  6325  0BE9  00AA               	movwf	??_setAmbientLightGain
  6326  0BEA  082A               	movf	??_setAmbientLightGain,w
  6327  0BEB  00AC               	movwf	setAmbientLightGain@val
  6328                           
  6329                           ;APDS9960.c: 221:     drive &= 0b00000011;
  6330  0BEC  3003               	movlw	3
  6331  0BED  00AA               	movwf	??_setAmbientLightGain
  6332  0BEE  082A               	movf	??_setAmbientLightGain,w
  6333  0BEF  05AB               	andwf	setAmbientLightGain@drive,f
  6334                           
  6335                           ;APDS9960.c: 222:     val &= 0b11111100;
  6336  0BF0  30FC               	movlw	252
  6337  0BF1  00AA               	movwf	??_setAmbientLightGain
  6338  0BF2  082A               	movf	??_setAmbientLightGain,w
  6339  0BF3  05AC               	andwf	setAmbientLightGain@val,f
  6340                           
  6341                           ;APDS9960.c: 223:     val |= drive;
  6342  0BF4  082B               	movf	setAmbientLightGain@drive,w
  6343  0BF5  00AA               	movwf	??_setAmbientLightGain
  6344  0BF6  082A               	movf	??_setAmbientLightGain,w
  6345  0BF7  04AC               	iorwf	setAmbientLightGain@val,f
  6346                           
  6347                           ;APDS9960.c: 226:     if( !wireWriteDataByte(0x8F, val) ) {
  6348  0BF8  082C               	movf	setAmbientLightGain@val,w
  6349  0BF9  00AA               	movwf	??_setAmbientLightGain
  6350  0BFA  082A               	movf	??_setAmbientLightGain,w
  6351  0BFB  00A6               	movwf	wireWriteDataByte@val
  6352  0BFC  308F               	movlw	143
  6353  0BFD  318B  238F         	fcall	_wireWriteDataByte
  6354  0BFF  0008               	return
  6355  0C00                     __end_of_setAmbientLightGain:	
  6356                           
  6357                           	psect	text14
  6358  0A9B                     __ptext14:	
  6359 ;; *************** function _i2c1_driver_open *****************
  6360 ;; Defined at:
  6361 ;;		line 83 in file "mcc_generated_files/i2c1_driver.c"
  6362 ;; Parameters:    Size  Location     Type
  6363 ;;		None
  6364 ;; Auto vars:     Size  Location     Type
  6365 ;;		None
  6366 ;; Return value:  Size  Location     Type
  6367 ;;		None               void
  6368 ;; Registers used:
  6369 ;;		wreg, status,2
  6370 ;; Tracked objects:
  6371 ;;		On entry : 0/0
  6372 ;;		On exit  : 0/0
  6373 ;;		Unchanged: 0/0
  6374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6375 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6376 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6377 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6378 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6379 ;;Total ram usage:        0 bytes
  6380 ;; Hardware stack levels used:    1
  6381 ;; Hardware stack levels required when called:    5
  6382 ;; This function calls:
  6383 ;;		Nothing
  6384 ;; This function is called by:
  6385 ;;		_initialize
  6386 ;;		_i2c_open
  6387 ;;		_InitI2C
  6388 ;; This function uses a non-reentrant model
  6389 ;;
  6390                           
  6391                           
  6392                           ;psect for function _i2c1_driver_open
  6393  0A9B                     _i2c1_driver_open:	
  6394                           
  6395                           ;incstack = 0
  6396                           ; Regs used in _i2c1_driver_open: [wreg+status,2]
  6397  0A9B  0024               	movlb	4	; select bank4
  6398  0A9C  1A95               	btfsc	21,5	;volatile
  6399  0A9D  0008               	return
  6400  0A9E  0194               	clrf	20	;volatile
  6401  0A9F  3028               	movlw	40
  6402  0AA0  0095               	movwf	21	;volatile
  6403  0AA1  0196               	clrf	22	;volatile
  6404  0AA2  3003               	movlw	3
  6405  0AA3  0092               	movwf	18	;volatile
  6406  0AA4  0008               	return
  6407  0AA5                     __end_of_i2c1_driver_open:	
  6408                           
  6409                           	psect	text15
  6410  07BC                     __ptext15:	
  6411 ;; *************** function _handleGesture *****************
  6412 ;; Defined at:
  6413 ;;		line 123 in file "main.c"
  6414 ;; Parameters:    Size  Location     Type
  6415 ;;		None
  6416 ;; Auto vars:     Size  Location     Type
  6417 ;;		None
  6418 ;; Return value:  Size  Location     Type
  6419 ;;                  1    wreg      void 
  6420 ;; Registers used:
  6421 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6422 ;; Tracked objects:
  6423 ;;		On entry : 0/0
  6424 ;;		On exit  : 0/0
  6425 ;;		Unchanged: 0/0
  6426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6427 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6428 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6429 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6430 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6431 ;;Total ram usage:        1 bytes
  6432 ;; Hardware stack levels used:    1
  6433 ;; Hardware stack levels required when called:   10
  6434 ;; This function calls:
  6435 ;;		_Display_Clear
  6436 ;;		_Send_Names
  6437 ;;		_readGesture
  6438 ;; This function is called by:
  6439 ;;		_main
  6440 ;; This function uses a non-reentrant model
  6441 ;;
  6442                           
  6443                           
  6444                           ;psect for function _handleGesture
  6445  07BC                     _handleGesture:	
  6446                           
  6447                           ;main.c: 124:     switch(readGesture()){
  6448                           
  6449                           ;incstack = 0
  6450                           ; Regs used in _handleGesture: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6451  07BC  2FE1               	goto	l6464
  6452  07BD                     l6440:	
  6453                           
  6454                           ;main.c: 130:             name++;
  6455  07BD  3001               	movlw	1
  6456  07BE  00DB               	movwf	??_handleGesture
  6457  07BF  085B               	movf	??_handleGesture,w
  6458  07C0  07EE               	addwf	_name,f
  6459                           
  6460                           ;main.c: 131:             if(name > 4) {
  6461  07C1  3005               	movlw	5
  6462  07C2  026E               	subwf	_name,w
  6463  07C3  1C03               	skipc
  6464  07C4  2FC7               	goto	l6446
  6465                           
  6466                           ;main.c: 132:                 name = 1;
  6467  07C5  01EE               	clrf	_name
  6468  07C6  0AEE               	incf	_name,f
  6469  07C7                     l6446:	
  6470                           
  6471                           ;main.c: 134:             Display_Clear();
  6472  07C7  318A  22DC  3187   	fcall	_Display_Clear
  6473                           
  6474                           ;main.c: 135:             Send_Names();
  6475  07CA  318E  26B5  3187   	fcall	_Send_Names
  6476                           
  6477                           ;main.c: 136:             _delay((unsigned long)((1000)*(250000/4000.0)));
  6478  07CD  3052               	movlw	82
  6479  07CE  0020               	movlb	0	; select bank0
  6480  07CF  00DB               	movwf	??_handleGesture
  6481  07D0  3029               	movlw	41
  6482  07D1                     u5857:	
  6483  07D1  0B89               	decfsz	9,f
  6484  07D2  2FD1               	goto	u5857
  6485  07D3  0BDB               	decfsz	??_handleGesture,f
  6486  07D4  2FD1               	goto	u5857
  6487  07D5  3200               	nop2
  6488                           
  6489                           ;main.c: 137:             break;
  6490  07D6  2FF8               	goto	l6466
  6491  07D7                     l6452:	
  6492                           
  6493                           ;main.c: 139:             name--;
  6494  07D7  3001               	movlw	1
  6495  07D8  02EE               	subwf	_name,f
  6496                           
  6497                           ;main.c: 140:             if(name < 1) {
  6498  07D9  086E               	movf	_name,w
  6499  07DA  1D03               	btfss	3,2
  6500  07DB  2FC7               	goto	l6446
  6501                           
  6502                           ;main.c: 141:                 name = 4;
  6503  07DC  3004               	movlw	4
  6504  07DD  00DB               	movwf	??_handleGesture
  6505  07DE  085B               	movf	??_handleGesture,w
  6506  07DF  00EE               	movwf	_name
  6507  07E0  2FC7               	goto	l6446
  6508  07E1                     l6464:	
  6509  07E1  3185  25C6  3187   	fcall	_readGesture
  6510                           
  6511                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6512                           ; Switch size 1, requested type "simple"
  6513                           ; Number of cases is 1, Range of values is 0 to 0
  6514                           ; switch strategies available:
  6515                           ; Name         Instructions Cycles
  6516                           ; simple_byte            4     3 (average)
  6517                           ; direct_byte            8     6 (fixed)
  6518                           ; jumptable            260     6 (fixed)
  6519                           ;	Chosen strategy is simple_byte
  6520  07E4  0020               	movlb	0	; select bank0
  6521  07E5  0850               	movf	?_readGesture+1,w
  6522  07E6  3A00               	xorlw	0	; case 0
  6523  07E7  1903               	skipnz
  6524  07E8  2FEA               	goto	l6718
  6525  07E9  2FF8               	goto	l6466
  6526  07EA                     l6718:	
  6527                           
  6528                           ; Switch size 1, requested type "simple"
  6529                           ; Number of cases is 4, Range of values is 1 to 4
  6530                           ; switch strategies available:
  6531                           ; Name         Instructions Cycles
  6532                           ; simple_byte           13     7 (average)
  6533                           ; direct_byte           17     9 (fixed)
  6534                           ; jumptable            263     9 (fixed)
  6535                           ;	Chosen strategy is simple_byte
  6536  07EA  084F               	movf	?_readGesture,w
  6537  07EB  3A01               	xorlw	1	; case 1
  6538  07EC  1903               	skipnz
  6539  07ED  2FBD               	goto	l6440
  6540  07EE  3A03               	xorlw	3	; case 2
  6541  07EF  1903               	skipnz
  6542  07F0  2FD7               	goto	l6452
  6543  07F1  3A01               	xorlw	1	; case 3
  6544  07F2  1903               	skipnz
  6545  07F3  2FF8               	goto	l6466
  6546  07F4  3A07               	xorlw	7	; case 4
  6547  07F5  1903               	skipnz
  6548  07F6  2FF8               	goto	l6466
  6549  07F7  2FF8               	goto	l6466
  6550  07F8                     l6466:	
  6551                           
  6552                           ;main.c: 148:     printed = 0;
  6553  07F8  0020               	movlb	0	; select bank0
  6554  07F9  01ED               	clrf	_printed
  6555  07FA  0008               	return
  6556  07FB                     __end_of_handleGesture:	
  6557                           
  6558                           	psect	text16
  6559  05C6                     __ptext16:	
  6560 ;; *************** function _readGesture *****************
  6561 ;; Defined at:
  6562 ;;		line 556 in file "APDS9960.c"
  6563 ;; Parameters:    Size  Location     Type
  6564 ;;		None
  6565 ;; Auto vars:     Size  Location     Type
  6566 ;;  fifo_data      64    0[BANK2 ] unsigned char [64]
  6567 ;;  fifo_data2     64    0[BANK1 ] unsigned char [64]
  6568 ;;  i               2   57[BANK0 ] int 
  6569 ;;  bytes_read      2   54[BANK0 ] int 
  6570 ;;  motion          2   51[BANK0 ] int 
  6571 ;;  fifo_level      1   56[BANK0 ] unsigned char 
  6572 ;;  gstatus         1   53[BANK0 ] unsigned char 
  6573 ;; Return value:  Size  Location     Type
  6574 ;;                  2   47[BANK0 ] int 
  6575 ;; Registers used:
  6576 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6577 ;; Tracked objects:
  6578 ;;		On entry : 0/0
  6579 ;;		On exit  : 0/0
  6580 ;;		Unchanged: 0/0
  6581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6582 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6583 ;;      Locals:         0       8      64      64       0       0       0       0       0       0       0       0       
      +0       0
  6584 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6585 ;;      Totals:         0      12      64      64       0       0       0       0       0       0       0       0       
      +0       0
  6586 ;;Total ram usage:      140 bytes
  6587 ;; Hardware stack levels used:    1
  6588 ;; Hardware stack levels required when called:    9
  6589 ;; This function calls:
  6590 ;;		_decodeGesture
  6591 ;;		_getMode
  6592 ;;		_isGestureAvailable
  6593 ;;		_processGestureData
  6594 ;;		_resetGestureParameters
  6595 ;;		_wireReadDataBlock
  6596 ;;		_wireReadDataByte
  6597 ;; This function is called by:
  6598 ;;		_handleGesture
  6599 ;; This function uses a non-reentrant model
  6600 ;;
  6601                           
  6602                           
  6603                           ;psect for function _readGesture
  6604  05C6                     _readGesture:	
  6605                           
  6606                           ;APDS9960.c: 559:     int bytes_read = 0;
  6607                           
  6608                           ;incstack = 0
  6609                           ; Regs used in _readGesture: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6610  05C6  0020               	movlb	0	; select bank0
  6611  05C7  01D6               	clrf	readGesture@bytes_read
  6612  05C8  01D7               	clrf	readGesture@bytes_read+1
  6613                           
  6614                           ;APDS9960.c: 560:     uint8_t fifo_data[64];;APDS9960.c: 561:     uint8_t fifo_data2[64]
      +                          ;;APDS9960.c: 562:     uint8_t gstatus;;APDS9960.c: 563:     int motion;;APDS9960.c: 564
      +                          :     int i;;APDS9960.c: 567:     if( !isGestureAvailable() || !(getMode() & 0b01000001)
      +                           ) {
  6615  05C9  318A  22ED  3185   	fcall	_isGestureAvailable
  6616  05CC  3A00               	xorlw	0
  6617  05CD  1903               	skipnz
  6618  05CE  2DD5               	goto	l5912
  6619  05CF  318A  2292  3185   	fcall	_getMode
  6620  05D2  3941               	andlw	65
  6621  05D3  1D03               	btfss	3,2
  6622  05D4  2E8A               	goto	l5916
  6623  05D5                     l5912:	
  6624                           
  6625                           ;APDS9960.c: 568:         return DIR_NONE;
  6626  05D5  0020               	movlb	0	; select bank0
  6627  05D6  01CF               	clrf	?_readGesture
  6628  05D7  01D0               	clrf	?_readGesture+1
  6629  05D8  0008               	return
  6630  05D9                     l5922:	
  6631                           ;APDS9960.c: 569:     }
  6632                           
  6633                           
  6634                           ;APDS9960.c: 584:         {;APDS9960.c: 586:          fifo_level= wireReadDataByte(0xAE)
      +                          ;
  6635  05D9  30AE               	movlw	174
  6636  05DA  318C  2400  3185   	fcall	_wireReadDataByte
  6637  05DD  0020               	movlb	0	; select bank0
  6638  05DE  00D1               	movwf	??_readGesture
  6639  05DF  0851               	movf	??_readGesture,w
  6640  05E0  00D8               	movwf	readGesture@fifo_level
  6641                           
  6642                           ;APDS9960.c: 590:             if( fifo_level > 0) {
  6643  05E1  0858               	movf	readGesture@fifo_level,w
  6644  05E2  1903               	btfsc	3,2
  6645  05E3  2E8A               	goto	l5916
  6646                           
  6647                           ;APDS9960.c: 592:               if(fifo_level < 17)
  6648  05E4  3011               	movlw	17
  6649  05E5  0258               	subwf	readGesture@fifo_level,w
  6650  05E6  1803               	skipnc
  6651  05E7  2DEC               	goto	l5930
  6652                           
  6653                           ;APDS9960.c: 593:               {;APDS9960.c: 594:                 bytes_read = wireRead
      +                          DataBlock( 0xFC,
  6654  05E8  3020               	movlw	low readGesture@fifo_data
  6655  05E9  00A6               	movwf	wireReadDataBlock@val
  6656  05EA  3001               	movlw	high readGesture@fifo_data
  6657  05EB  2DEF               	goto	L1
  6658  05EC                     l5930:	
  6659                           ;APDS9960.c: 597:               } else
  6660                           
  6661                           
  6662                           ;APDS9960.c: 598:               {;APDS9960.c: 599:                 bytes_read = wireRead
      +                          DataBlock( 0xFC,
  6663  05EC  30A0               	movlw	low readGesture@fifo_data2
  6664  05ED  00A6               	movwf	wireReadDataBlock@val
  6665  05EE  3000               	movlw	high readGesture@fifo_data2
  6666  05EF                     L1:	
  6667  05EF  00A7               	movwf	wireReadDataBlock@val+1
  6668  05F0  0858               	movf	readGesture@fifo_level,w
  6669  05F1  00D1               	movwf	??_readGesture
  6670  05F2  01D2               	clrf	??_readGesture+1
  6671  05F3  35D1               	lslf	??_readGesture,f
  6672  05F4  0DD2               	rlf	??_readGesture+1,f
  6673  05F5  35D1               	lslf	??_readGesture,f
  6674  05F6  0DD2               	rlf	??_readGesture+1,f
  6675  05F7  0851               	movf	??_readGesture,w
  6676  05F8  00A8               	movwf	wireReadDataBlock@len
  6677  05F9  0852               	movf	??_readGesture+1,w
  6678  05FA  00A9               	movwf	wireReadDataBlock@len+1
  6679  05FB  30FC               	movlw	252
  6680  05FC  318F  2767  3185   	fcall	_wireReadDataBlock
  6681  05FF  0020               	movlb	0	; select bank0
  6682  0600  0827               	movf	?_wireReadDataBlock+1,w
  6683  0601  00D7               	movwf	readGesture@bytes_read+1
  6684  0602  0826               	movf	?_wireReadDataBlock,w
  6685  0603  00D6               	movwf	readGesture@bytes_read
  6686                           
  6687                           ;APDS9960.c: 605:                 if( bytes_read == -1 )
  6688  0604  0A56               	incf	readGesture@bytes_read,w
  6689  0605  1D03               	skipz
  6690  0606  2E0F               	goto	l5938
  6691  0607  0A57               	incf	readGesture@bytes_read+1,w
  6692  0608  1D03               	btfss	3,2
  6693  0609  2E0F               	goto	l5938
  6694                           
  6695                           ;APDS9960.c: 606:                 {;APDS9960.c: 607:                     return 0xFF;
  6696  060A  30FF               	movlw	255
  6697  060B  00CF               	movwf	?_readGesture
  6698  060C  3000               	movlw	0
  6699  060D  00D0               	movwf	?_readGesture+1
  6700  060E  0008               	return
  6701  060F                     l5938:	
  6702                           
  6703                           ;APDS9960.c: 612:                 if( bytes_read >= 4 )
  6704  060F  0857               	movf	readGesture@bytes_read+1,w
  6705  0610  3A80               	xorlw	128
  6706  0611  00D1               	movwf	??_readGesture
  6707  0612  3080               	movlw	128
  6708  0613  0251               	subwf	??_readGesture,w
  6709  0614  1D03               	skipz
  6710  0615  2E18               	goto	u5145
  6711  0616  3004               	movlw	4
  6712  0617  0256               	subwf	readGesture@bytes_read,w
  6713  0618                     u5145:	
  6714  0618  1C03               	skipc
  6715  0619  2E8A               	goto	l5916
  6716                           
  6717                           ;APDS9960.c: 613:                 {;APDS9960.c: 615:                     for( i = 0; i <
      +                           bytes_read; i += 4 ) {
  6718  061A  0020               	movlb	0	; select bank0
  6719  061B  01D9               	clrf	readGesture@i
  6720  061C  01DA               	clrf	readGesture@i+1
  6721  061D                     l5950:	
  6722  061D  085A               	movf	readGesture@i+1,w
  6723  061E  3A80               	xorlw	128
  6724  061F  00D1               	movwf	??_readGesture
  6725  0620  0857               	movf	readGesture@bytes_read+1,w
  6726  0621  3A80               	xorlw	128
  6727  0622  0251               	subwf	??_readGesture,w
  6728  0623  1D03               	skipz
  6729  0624  2E27               	goto	u5155
  6730  0625  0856               	movf	readGesture@bytes_read,w
  6731  0626  0259               	subwf	readGesture@i,w
  6732  0627                     u5155:	
  6733  0627  1803               	btfsc	3,0
  6734  0628  2E7E               	goto	l5952
  6735                           
  6736                           ;APDS9960.c: 616:                         gesture_data_.u_data[gesture_data_.index] = fi
      +                          fo_data[i + 0];
  6737  0629  0020               	movlb	0	; select bank0
  6738  062A  0859               	movf	readGesture@i,w
  6739  062B  3E20               	addlw	(low (readGesture@fifo_data| (0+256)))& (0+255)
  6740  062C  0086               	movwf	6
  6741  062D  3001               	movlw	1	; select bank2/3
  6742  062E  0087               	movwf	7
  6743  062F  0801               	movf	1,w
  6744  0630  00D1               	movwf	??_readGesture
  6745  0631  0024               	movlb	4	; select bank4
  6746  0632  0860               	movf	(_gesture_data_^(0+512)+64),w
  6747  0633  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  6748  0634  0086               	movwf	6
  6749  0635  3002               	movlw	2	; select bank4/5
  6750  0636  0087               	movwf	7
  6751  0637  0020               	movlb	0	; select bank0
  6752  0638  0851               	movf	??_readGesture,w
  6753  0639  0081               	movwf	1
  6754                           
  6755                           ;APDS9960.c: 618:                         gesture_data_.d_data[gesture_data_.index] = fi
      +                          fo_data[i + 1];
  6756  063A  0859               	movf	readGesture@i,w
  6757  063B  3E01               	addlw	1
  6758  063C  3E20               	addlw	(low (readGesture@fifo_data| (0+256)))& (0+255)
  6759  063D  0086               	movwf	6
  6760  063E  3001               	movlw	1	; select bank2/3
  6761  063F  0087               	movwf	7
  6762  0640  0801               	movf	1,w
  6763  0641  00D1               	movwf	??_readGesture
  6764  0642  0024               	movlb	4	; select bank4
  6765  0643  0860               	movf	(_gesture_data_^(0+512)+64),w
  6766  0644  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  6767  0645  0086               	movwf	6
  6768  0646  3002               	movlw	2	; select bank4/5
  6769  0647  0087               	movwf	7
  6770  0648  0020               	movlb	0	; select bank0
  6771  0649  0851               	movf	??_readGesture,w
  6772  064A  0081               	movwf	1
  6773                           
  6774                           ;APDS9960.c: 620:                         gesture_data_.l_data[gesture_data_.index] = fi
      +                          fo_data[i + 2];
  6775  064B  0859               	movf	readGesture@i,w
  6776  064C  3E02               	addlw	2
  6777  064D  3E20               	addlw	(low (readGesture@fifo_data| (0+256)))& (0+255)
  6778  064E  0086               	movwf	6
  6779  064F  3001               	movlw	1	; select bank2/3
  6780  0650  0087               	movwf	7
  6781  0651  0801               	movf	1,w
  6782  0652  00D1               	movwf	??_readGesture
  6783  0653  0024               	movlb	4	; select bank4
  6784  0654  0860               	movf	(_gesture_data_^(0+512)+64),w
  6785  0655  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  6786  0656  0086               	movwf	6
  6787  0657  3002               	movlw	2	; select bank4/5
  6788  0658  0087               	movwf	7
  6789  0659  0020               	movlb	0	; select bank0
  6790  065A  0851               	movf	??_readGesture,w
  6791  065B  0081               	movwf	1
  6792                           
  6793                           ;APDS9960.c: 622:                         gesture_data_.r_data[gesture_data_.index] = fi
      +                          fo_data[i + 3];
  6794  065C  0859               	movf	readGesture@i,w
  6795  065D  3E03               	addlw	3
  6796  065E  3E20               	addlw	(low (readGesture@fifo_data| (0+256)))& (0+255)
  6797  065F  0086               	movwf	6
  6798  0660  3001               	movlw	1	; select bank2/3
  6799  0661  0087               	movwf	7
  6800  0662  0801               	movf	1,w
  6801  0663  00D1               	movwf	??_readGesture
  6802  0664  0024               	movlb	4	; select bank4
  6803  0665  0860               	movf	(_gesture_data_^(0+512)+64),w
  6804  0666  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  6805  0667  0086               	movwf	6
  6806  0668  3002               	movlw	2	; select bank4/5
  6807  0669  0087               	movwf	7
  6808  066A  0020               	movlb	0	; select bank0
  6809  066B  0851               	movf	??_readGesture,w
  6810  066C  0081               	movwf	1
  6811                           
  6812                           ;APDS9960.c: 624:                         gesture_data_.index++;
  6813  066D  3001               	movlw	1
  6814  066E  00D1               	movwf	??_readGesture
  6815  066F  0851               	movf	??_readGesture,w
  6816  0670  0024               	movlb	4	; select bank4
  6817  0671  07E0               	addwf	(_gesture_data_^(0+512)+64),f
  6818                           
  6819                           ;APDS9960.c: 625:                         gesture_data_.total_gestures++;
  6820  0672  3001               	movlw	1
  6821  0673  0020               	movlb	0	; select bank0
  6822  0674  00D1               	movwf	??_readGesture
  6823  0675  0851               	movf	??_readGesture,w
  6824  0676  0024               	movlb	4	; select bank4
  6825  0677  07E1               	addwf	(_gesture_data_^(0+512)+65),f
  6826                           
  6827                           ;APDS9960.c: 626:                     }
  6828  0678  3004               	movlw	4
  6829  0679  0020               	movlb	0	; select bank0
  6830  067A  07D9               	addwf	readGesture@i,f
  6831  067B  3000               	movlw	0
  6832  067C  3DDA               	addwfc	readGesture@i+1,f
  6833  067D  2E1D               	goto	l5950
  6834  067E                     l5952:	
  6835                           
  6836                           ;APDS9960.c: 629:                     if( processGestureData() )
  6837  067E  3180  2055  3185   	fcall	_processGestureData
  6838  0681  3A00               	xorlw	0
  6839  0682  1903               	skipnz
  6840  0683  2E87               	goto	l5956
  6841                           
  6842                           ;APDS9960.c: 630:                     {;APDS9960.c: 632:                         if( dec
      +                          odeGesture() ) {
  6843  0684  3183  2320  3185   	fcall	_decodeGesture
  6844  0687                     l5956:	
  6845                           
  6846                           ;APDS9960.c: 638:                     gesture_data_.index = 0;
  6847  0687  0024               	movlb	4	; select bank4
  6848  0688  01E0               	clrf	(_gesture_data_^(0+512)+64)
  6849                           
  6850                           ;APDS9960.c: 639:                     gesture_data_.total_gestures = 0;
  6851  0689  01E1               	clrf	(_gesture_data_^(0+512)+65)
  6852  068A                     l5916:	
  6853                           
  6854                           ;APDS9960.c: 575:         _delay((unsigned long)((30)*(250000/4000.0)));
  6855  068A  3003               	movlw	3
  6856  068B  0020               	movlb	0	; select bank0
  6857  068C  00D1               	movwf	??_readGesture
  6858  068D  306E               	movlw	110
  6859  068E                     u5867:	
  6860  068E  0B89               	decfsz	9,f
  6861  068F  2E8E               	goto	u5867
  6862  0690  0BD1               	decfsz	??_readGesture,f
  6863  0691  2E8E               	goto	u5867
  6864                           
  6865                           ;APDS9960.c: 578:         gstatus = wireReadDataByte(0xAF);
  6866  0692  30AF               	movlw	175
  6867  0693  318C  2400  3185   	fcall	_wireReadDataByte
  6868  0696  0020               	movlb	0	; select bank0
  6869  0697  00D1               	movwf	??_readGesture
  6870  0698  0851               	movf	??_readGesture,w
  6871  0699  00D5               	movwf	readGesture@gstatus
  6872                           
  6873                           ;APDS9960.c: 583:         if( (gstatus & 0b00000001) == 0b00000001 )
  6874  069A  1855               	btfsc	readGesture@gstatus,0
  6875  069B  2DD9               	goto	l5922
  6876                           
  6877                           ;APDS9960.c: 645:             _delay((unsigned long)((30)*(250000/4000.0)));
  6878  069C  3003               	movlw	3
  6879  069D  0020               	movlb	0	; select bank0
  6880  069E  00D1               	movwf	??_readGesture
  6881  069F  306E               	movlw	110
  6882  06A0                     u5877:	
  6883  06A0  0B89               	decfsz	9,f
  6884  06A1  2EA0               	goto	u5877
  6885  06A2  0BD1               	decfsz	??_readGesture,f
  6886  06A3  2EA0               	goto	u5877
  6887                           
  6888                           ;APDS9960.c: 646:             decodeGesture();
  6889  06A4  3183  2320  3185   	fcall	_decodeGesture
  6890                           
  6891                           ;APDS9960.c: 647:             motion = gesture_motion_;
  6892  06A7  0022               	movlb	2	; select bank2
  6893  06A8  0861               	movf	(_gesture_motion_+1)^(0+256),w
  6894  06A9  0020               	movlb	0	; select bank0
  6895  06AA  00D4               	movwf	readGesture@motion+1
  6896  06AB  0022               	movlb	2	; select bank2
  6897  06AC  0860               	movf	_gesture_motion_^(0+256),w
  6898  06AD  0020               	movlb	0	; select bank0
  6899  06AE  00D3               	movwf	readGesture@motion
  6900                           
  6901                           ;APDS9960.c: 649:             resetGestureParameters();
  6902  06AF  318B  2361         	fcall	_resetGestureParameters
  6903                           
  6904                           ;APDS9960.c: 651:             return motion;
  6905  06B1  0020               	movlb	0	; select bank0
  6906  06B2  0854               	movf	readGesture@motion+1,w
  6907  06B3  00D0               	movwf	?_readGesture+1
  6908  06B4  0853               	movf	readGesture@motion,w
  6909  06B5  00CF               	movwf	?_readGesture
  6910  06B6  0008               	return
  6911  06B7                     __end_of_readGesture:	
  6912                           
  6913                           	psect	text17
  6914  0F67                     __ptext17:	
  6915 ;; *************** function _wireReadDataBlock *****************
  6916 ;; Defined at:
  6917 ;;		line 847 in file "APDS9960.c"
  6918 ;; Parameters:    Size  Location     Type
  6919 ;;  reg             1    wreg     unsigned char 
  6920 ;;  val             2    6[BANK0 ] PTR unsigned char 
  6921 ;;		 -> readGesture@fifo_data2(64), readGesture@fifo_data(64), 
  6922 ;;  len             2    8[BANK0 ] unsigned int 
  6923 ;; Auto vars:     Size  Location     Type
  6924 ;;  reg             1   15[BANK0 ] unsigned char 
  6925 ;;  j               1   16[BANK0 ] unsigned char 
  6926 ;; Return value:  Size  Location     Type
  6927 ;;                  2    6[BANK0 ] int 
  6928 ;; Registers used:
  6929 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6930 ;; Tracked objects:
  6931 ;;		On entry : 0/0
  6932 ;;		On exit  : 0/0
  6933 ;;		Unchanged: 0/0
  6934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6935 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6936 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6937 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6938 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6939 ;;Total ram usage:       11 bytes
  6940 ;; Hardware stack levels used:    1
  6941 ;; Hardware stack levels required when called:    7
  6942 ;; This function calls:
  6943 ;;		_I2C_ReStart
  6944 ;;		_I2C_Read_Byte
  6945 ;;		_I2C_Send_NACK
  6946 ;;		_I2C_Start
  6947 ;;		_I2C_Stop
  6948 ;;		_I2C_Write_Byte
  6949 ;; This function is called by:
  6950 ;;		_readGesture
  6951 ;; This function uses a non-reentrant model
  6952 ;;
  6953                           
  6954                           
  6955                           ;psect for function _wireReadDataBlock
  6956  0F67                     _wireReadDataBlock:	
  6957                           
  6958                           ;incstack = 0
  6959                           ; Regs used in _wireReadDataBlock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6960                           ;wireReadDataBlock@reg stored from wreg
  6961  0F67  0020               	movlb	0	; select bank0
  6962  0F68  00AF               	movwf	wireReadDataBlock@reg
  6963                           
  6964                           ;APDS9960.c: 851:     I2C_Start();
  6965  0F69  318A  220A  318F   	fcall	_I2C_Start
  6966                           
  6967                           ;APDS9960.c: 852:     I2C_Write_Byte((0x39 << 1 )| 0x00);
  6968  0F6C  3072               	movlw	114
  6969  0F6D  318B  23AA  318F   	fcall	_I2C_Write_Byte
  6970                           
  6971                           ;APDS9960.c: 854:     I2C_Write_Byte(reg);
  6972  0F70  0020               	movlb	0	; select bank0
  6973  0F71  082F               	movf	wireReadDataBlock@reg,w
  6974  0F72  318B  23AA  318F   	fcall	_I2C_Write_Byte
  6975                           
  6976                           ;APDS9960.c: 856:     for(j= 0; j < len ; j++)
  6977  0F75  0020               	movlb	0	; select bank0
  6978  0F76  01B0               	clrf	wireReadDataBlock@j
  6979  0F77                     l5528:	
  6980  0F77  0830               	movf	wireReadDataBlock@j,w
  6981  0F78  00AA               	movwf	??_wireReadDataBlock
  6982  0F79  01AB               	clrf	??_wireReadDataBlock+1
  6983  0F7A  0829               	movf	wireReadDataBlock@len+1,w
  6984  0F7B  022B               	subwf	??_wireReadDataBlock+1,w
  6985  0F7C  1D03               	skipz
  6986  0F7D  2F80               	goto	u4325
  6987  0F7E  0828               	movf	wireReadDataBlock@len,w
  6988  0F7F  022A               	subwf	??_wireReadDataBlock,w
  6989  0F80                     u4325:	
  6990  0F80  1803               	btfsc	3,0
  6991  0F81  2FA6               	goto	l5530
  6992                           
  6993                           ;APDS9960.c: 857:     {;APDS9960.c: 859:       I2C_ReStart();
  6994  0F82  3189  21FB  318F   	fcall	_I2C_ReStart
  6995                           
  6996                           ;APDS9960.c: 860:       I2C_Write_Byte((0x39 << 1) | 0x01);
  6997  0F85  3073               	movlw	115
  6998  0F86  318B  23AA  318F   	fcall	_I2C_Write_Byte
  6999                           
  7000                           ;APDS9960.c: 861:       val[j]=I2C_Read_Byte();
  7001  0F89  318A  22A5  318F   	fcall	_I2C_Read_Byte
  7002  0F8C  0020               	movlb	0	; select bank0
  7003  0F8D  00AA               	movwf	??_wireReadDataBlock
  7004  0F8E  0830               	movf	wireReadDataBlock@j,w
  7005  0F8F  00AB               	movwf	??_wireReadDataBlock+1
  7006  0F90  01AC               	clrf	??_wireReadDataBlock+2
  7007  0F91  082B               	movf	??_wireReadDataBlock+1,w
  7008  0F92  0726               	addwf	wireReadDataBlock@val,w
  7009  0F93  00AD               	movwf	??_wireReadDataBlock+3
  7010  0F94  082C               	movf	??_wireReadDataBlock+2,w
  7011  0F95  3D27               	addwfc	wireReadDataBlock@val+1,w
  7012  0F96  00AE               	movwf	??_wireReadDataBlock+4
  7013  0F97  082D               	movf	??_wireReadDataBlock+3,w
  7014  0F98  0086               	movwf	6
  7015  0F99  082E               	movf	??_wireReadDataBlock+4,w
  7016  0F9A  0087               	movwf	7
  7017  0F9B  082A               	movf	??_wireReadDataBlock,w
  7018  0F9C  0081               	movwf	1
  7019                           
  7020                           ;APDS9960.c: 862:       I2C_Send_NACK();
  7021  0F9D  318A  2204  318F   	fcall	_I2C_Send_NACK
  7022                           
  7023                           ;APDS9960.c: 864:     }
  7024  0FA0  3001               	movlw	1
  7025  0FA1  0020               	movlb	0	; select bank0
  7026  0FA2  00AA               	movwf	??_wireReadDataBlock
  7027  0FA3  082A               	movf	??_wireReadDataBlock,w
  7028  0FA4  07B0               	addwf	wireReadDataBlock@j,f
  7029  0FA5  2F77               	goto	l5528
  7030  0FA6                     l5530:	
  7031                           
  7032                           ;APDS9960.c: 866:     I2C_Stop();
  7033  0FA6  318A  2210         	fcall	_I2C_Stop
  7034                           
  7035                           ;APDS9960.c: 867:     return (int)j;
  7036  0FA8  0020               	movlb	0	; select bank0
  7037  0FA9  0830               	movf	wireReadDataBlock@j,w
  7038  0FAA  00AA               	movwf	??_wireReadDataBlock
  7039  0FAB  01AB               	clrf	??_wireReadDataBlock+1
  7040  0FAC  082A               	movf	??_wireReadDataBlock,w
  7041  0FAD  00A6               	movwf	?_wireReadDataBlock
  7042  0FAE  082B               	movf	??_wireReadDataBlock+1,w
  7043  0FAF  00A7               	movwf	?_wireReadDataBlock+1
  7044  0FB0  0008               	return
  7045  0FB1                     __end_of_wireReadDataBlock:	
  7046                           
  7047                           	psect	text18
  7048  0055                     __ptext18:	
  7049 ;; *************** function _processGestureData *****************
  7050 ;; Defined at:
  7051 ;;		line 657 in file "APDS9960.c"
  7052 ;; Parameters:    Size  Location     Type
  7053 ;;		None
  7054 ;; Auto vars:     Size  Location     Type
  7055 ;;  i               2   45[BANK0 ] int 
  7056 ;;  lr_delta        2   43[BANK0 ] int 
  7057 ;;  ud_delta        2   41[BANK0 ] int 
  7058 ;;  lr_ratio_las    2   23[BANK0 ] int 
  7059 ;;  ud_ratio_las    2   21[BANK0 ] int 
  7060 ;;  lr_ratio_fir    2   19[BANK0 ] int 
  7061 ;;  ud_ratio_fir    2   17[BANK0 ] int 
  7062 ;;  r_first         1   40[BANK0 ] unsigned char 
  7063 ;;  l_first         1   39[BANK0 ] unsigned char 
  7064 ;;  d_first         1   38[BANK0 ] unsigned char 
  7065 ;;  u_first         1   37[BANK0 ] unsigned char 
  7066 ;;  r_last          1   36[BANK0 ] unsigned char 
  7067 ;;  l_last          1   35[BANK0 ] unsigned char 
  7068 ;;  d_last          1   34[BANK0 ] unsigned char 
  7069 ;;  u_last          1   33[BANK0 ] unsigned char 
  7070 ;; Return value:  Size  Location     Type
  7071 ;;                  1    wreg      _Bool 
  7072 ;; Registers used:
  7073 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7074 ;; Tracked objects:
  7075 ;;		On entry : 0/0
  7076 ;;		On exit  : 0/0
  7077 ;;		Unchanged: 0/0
  7078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7080 ;;      Locals:         0      30       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7081 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7082 ;;      Totals:         0      32       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7083 ;;Total ram usage:       32 bytes
  7084 ;; Hardware stack levels used:    1
  7085 ;; Hardware stack levels required when called:    6
  7086 ;; This function calls:
  7087 ;;		___awdiv
  7088 ;;		___wmul
  7089 ;; This function is called by:
  7090 ;;		_readGesture
  7091 ;; This function uses a non-reentrant model
  7092 ;;
  7093                           
  7094                           
  7095                           ;psect for function _processGestureData
  7096  0055                     _processGestureData:	
  7097                           
  7098                           ;APDS9960.c: 659:     uint8_t u_first = 0;
  7099                           
  7100                           ;incstack = 0
  7101                           ; Regs used in _processGestureData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7102  0055  0020               	movlb	0	; select bank0
  7103  0056  01C5               	clrf	processGestureData@u_first
  7104                           
  7105                           ;APDS9960.c: 660:     uint8_t d_first = 0;
  7106  0057  01C6               	clrf	processGestureData@d_first
  7107                           
  7108                           ;APDS9960.c: 661:     uint8_t l_first = 0;
  7109  0058  01C7               	clrf	processGestureData@l_first
  7110                           
  7111                           ;APDS9960.c: 662:     uint8_t r_first = 0;
  7112  0059  01C8               	clrf	processGestureData@r_first
  7113                           
  7114                           ;APDS9960.c: 663:     uint8_t u_last = 0;
  7115  005A  01C1               	clrf	processGestureData@u_last
  7116                           
  7117                           ;APDS9960.c: 664:     uint8_t d_last = 0;
  7118  005B  01C2               	clrf	processGestureData@d_last
  7119                           
  7120                           ;APDS9960.c: 665:     uint8_t l_last = 0;
  7121  005C  01C3               	clrf	processGestureData@l_last
  7122                           
  7123                           ;APDS9960.c: 666:     uint8_t r_last = 0;
  7124  005D  01C4               	clrf	processGestureData@r_last
  7125                           
  7126                           ;APDS9960.c: 667:     int ud_ratio_first;;APDS9960.c: 668:     int lr_ratio_first;;APDS9
      +                          960.c: 669:     int ud_ratio_last;;APDS9960.c: 670:     int lr_ratio_last;;APDS9960.c: 6
      +                          71:     int ud_delta;;APDS9960.c: 672:     int lr_delta;;APDS9960.c: 673:     int i;;APD
      +                          S9960.c: 676:     if( gesture_data_.total_gestures <= 4 ) {
  7127  005E  3005               	movlw	5
  7128  005F  0024               	movlb	4	; select bank4
  7129  0060  0261               	subwf	(_gesture_data_^(0+512)+65),w
  7130  0061  1803               	skipnc
  7131  0062  2865               	goto	l5544
  7132  0063                     l5540:	
  7133                           
  7134                           ;APDS9960.c: 677:         return 0;
  7135  0063  3000               	movlw	0
  7136  0064  0008               	return
  7137  0065                     l5544:	
  7138                           
  7139                           ;APDS9960.c: 681:     if( (gesture_data_.total_gestures <= 32) && (gesture_data_.total_g
      +                          estures > 0) ) {
  7140  0065  3021               	movlw	33
  7141  0066  0261               	subwf	(_gesture_data_^(0+512)+65),w
  7142  0067  1803               	skipnc
  7143  0068  292F               	goto	l5594
  7144  0069  0861               	movf	(_gesture_data_^(0+512)+65),w
  7145  006A  1903               	btfsc	3,2
  7146  006B  292F               	goto	l5594
  7147                           
  7148                           ;APDS9960.c: 682: ;APDS9960.c: 685:         for( i = 0; i < gesture_data_.total_gestures
      +                          ; i++ ) {
  7149  006C  0020               	movlb	0	; select bank0
  7150  006D  01CD               	clrf	processGestureData@i
  7151  006E  01CE               	clrf	processGestureData@i+1
  7152  006F  2874               	goto	l860
  7153  0070                     l5560:	
  7154                           ;APDS9960.c: 695:                 break;
  7155                           
  7156                           
  7157                           ;APDS9960.c: 697:         }
  7158  0070  3001               	movlw	1
  7159  0071  07CD               	addwf	processGestureData@i,f
  7160  0072  3000               	movlw	0
  7161  0073  3DCE               	addwfc	processGestureData@i+1,f
  7162  0074                     l860:	
  7163  0074  084E               	movf	processGestureData@i+1,w
  7164  0075  3A80               	xorlw	128
  7165  0076  00AF               	movwf	??_processGestureData
  7166  0077  3080               	movlw	128
  7167  0078  022F               	subwf	??_processGestureData,w
  7168  0079  1D03               	skipz
  7169  007A  287F               	goto	u4405
  7170  007B  0024               	movlb	4	; select bank4
  7171  007C  0861               	movf	(_gesture_data_^(0+512)+65),w
  7172  007D  0020               	movlb	0	; select bank0
  7173  007E  024D               	subwf	processGestureData@i,w
  7174  007F                     u4405:	
  7175  007F  1803               	btfsc	3,0
  7176  0080  28CA               	goto	l5562
  7177                           
  7178                           ;APDS9960.c: 686:             if( (gesture_data_.u_data[i] > 10) &&
  7179  0081  0020               	movlb	0	; select bank0
  7180  0082  084D               	movf	processGestureData@i,w
  7181  0083  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  7182  0084  0086               	movwf	6
  7183  0085  3002               	movlw	2	; select bank4/5
  7184  0086  0087               	movwf	7
  7185  0087  300B               	movlw	11
  7186  0088  0201               	subwf	1,w
  7187  0089  1C03               	skipc
  7188  008A  2870               	goto	l5560
  7189  008B  084D               	movf	processGestureData@i,w
  7190  008C  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  7191  008D  0086               	movwf	6
  7192  008E  3002               	movlw	2	; select bank4/5
  7193  008F  0087               	movwf	7
  7194  0090  300B               	movlw	11
  7195  0091  0201               	subwf	1,w
  7196  0092  1C03               	skipc
  7197  0093  2870               	goto	l5560
  7198  0094  084D               	movf	processGestureData@i,w
  7199  0095  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  7200  0096  0086               	movwf	6
  7201  0097  3002               	movlw	2	; select bank4/5
  7202  0098  0087               	movwf	7
  7203  0099  300B               	movlw	11
  7204  009A  0201               	subwf	1,w
  7205  009B  1C03               	skipc
  7206  009C  2870               	goto	l5560
  7207  009D  084D               	movf	processGestureData@i,w
  7208  009E  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  7209  009F  0086               	movwf	6
  7210  00A0  3002               	movlw	2	; select bank4/5
  7211  00A1  0087               	movwf	7
  7212  00A2  300B               	movlw	11
  7213  00A3  0201               	subwf	1,w
  7214  00A4  1C03               	skipc
  7215  00A5  2870               	goto	l5560
  7216                           
  7217                           ;APDS9960.c: 689:                 (gesture_data_.r_data[i] > 10) ) {;APDS9960.c: 691:   
      +                                        u_first = gesture_data_.u_data[i];
  7218  00A6  084D               	movf	processGestureData@i,w
  7219  00A7  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  7220  00A8  0086               	movwf	6
  7221  00A9  3002               	movlw	2	; select bank4/5
  7222  00AA  0087               	movwf	7
  7223  00AB  0801               	movf	1,w
  7224  00AC  00AF               	movwf	??_processGestureData
  7225  00AD  082F               	movf	??_processGestureData,w
  7226  00AE  00C5               	movwf	processGestureData@u_first
  7227                           
  7228                           ;APDS9960.c: 692:                 d_first = gesture_data_.d_data[i];
  7229  00AF  084D               	movf	processGestureData@i,w
  7230  00B0  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  7231  00B1  0086               	movwf	6
  7232  00B2  3002               	movlw	2	; select bank4/5
  7233  00B3  0087               	movwf	7
  7234  00B4  0801               	movf	1,w
  7235  00B5  00AF               	movwf	??_processGestureData
  7236  00B6  082F               	movf	??_processGestureData,w
  7237  00B7  00C6               	movwf	processGestureData@d_first
  7238                           
  7239                           ;APDS9960.c: 693:                 l_first = gesture_data_.l_data[i];
  7240  00B8  084D               	movf	processGestureData@i,w
  7241  00B9  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  7242  00BA  0086               	movwf	6
  7243  00BB  3002               	movlw	2	; select bank4/5
  7244  00BC  0087               	movwf	7
  7245  00BD  0801               	movf	1,w
  7246  00BE  00AF               	movwf	??_processGestureData
  7247  00BF  082F               	movf	??_processGestureData,w
  7248  00C0  00C7               	movwf	processGestureData@l_first
  7249                           
  7250                           ;APDS9960.c: 694:                 r_first = gesture_data_.r_data[i];
  7251  00C1  084D               	movf	processGestureData@i,w
  7252  00C2  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  7253  00C3  0086               	movwf	6
  7254  00C4  3002               	movlw	2	; select bank4/5
  7255  00C5  0087               	movwf	7
  7256  00C6  0801               	movf	1,w
  7257  00C7  00AF               	movwf	??_processGestureData
  7258  00C8  082F               	movf	??_processGestureData,w
  7259  00C9  00C8               	movwf	processGestureData@r_first
  7260  00CA                     l5562:	
  7261                           
  7262                           ;APDS9960.c: 700:         if( (u_first == 0) || (d_first == 0) || (l_first == 0) || (r_f
      +                          irst == 0) ) {
  7263  00CA  0020               	movlb	0	; select bank0
  7264  00CB  0845               	movf	processGestureData@u_first,w
  7265  00CC  1903               	btfsc	3,2
  7266  00CD  2863               	goto	l5540
  7267  00CE  0846               	movf	processGestureData@d_first,w
  7268  00CF  1903               	btfsc	3,2
  7269  00D0  2863               	goto	l5540
  7270  00D1  0847               	movf	processGestureData@l_first,w
  7271  00D2  1903               	btfsc	3,2
  7272  00D3  2863               	goto	l5540
  7273  00D4  0848               	movf	processGestureData@r_first,w
  7274  00D5  1903               	btfsc	3,2
  7275  00D6  2863               	goto	l5540
  7276                           
  7277                           ;APDS9960.c: 706:         for( i = gesture_data_.total_gestures - 1; i >= 0; i-- ) {
  7278  00D7  0024               	movlb	4	; select bank4
  7279  00D8  0861               	movf	(_gesture_data_^(0+512)+65),w
  7280  00D9  3EFF               	addlw	255
  7281  00DA  0020               	movlb	0	; select bank0
  7282  00DB  00CD               	movwf	processGestureData@i
  7283  00DC  30FF               	movlw	255
  7284  00DD  1803               	skipnc
  7285  00DE  3000               	movlw	0
  7286  00DF  00CE               	movwf	processGestureData@i+1
  7287                           
  7288                           ;APDS9960.c: 717:                 break;
  7289  00E0  28E5               	goto	l5576
  7290  00E1                     l5590:	
  7291                           
  7292                           ;APDS9960.c: 719:         }
  7293  00E1  30FF               	movlw	255
  7294  00E2  07CD               	addwf	processGestureData@i,f
  7295  00E3  30FF               	movlw	255
  7296  00E4  3DCE               	addwfc	processGestureData@i+1,f
  7297  00E5                     l5576:	
  7298  00E5  1BCE               	btfsc	processGestureData@i+1,7
  7299  00E6  292F               	goto	l5594
  7300                           
  7301                           ;APDS9960.c: 708:             if( (gesture_data_.u_data[i] > 10) &&
  7302  00E7  084D               	movf	processGestureData@i,w
  7303  00E8  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  7304  00E9  0086               	movwf	6
  7305  00EA  3002               	movlw	2	; select bank4/5
  7306  00EB  0087               	movwf	7
  7307  00EC  300B               	movlw	11
  7308  00ED  0201               	subwf	1,w
  7309  00EE  1C03               	skipc
  7310  00EF  28E1               	goto	l5590
  7311  00F0  084D               	movf	processGestureData@i,w
  7312  00F1  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  7313  00F2  0086               	movwf	6
  7314  00F3  3002               	movlw	2	; select bank4/5
  7315  00F4  0087               	movwf	7
  7316  00F5  300B               	movlw	11
  7317  00F6  0201               	subwf	1,w
  7318  00F7  1C03               	skipc
  7319  00F8  28E1               	goto	l5590
  7320  00F9  084D               	movf	processGestureData@i,w
  7321  00FA  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  7322  00FB  0086               	movwf	6
  7323  00FC  3002               	movlw	2	; select bank4/5
  7324  00FD  0087               	movwf	7
  7325  00FE  300B               	movlw	11
  7326  00FF  0201               	subwf	1,w
  7327  0100  1C03               	skipc
  7328  0101  28E1               	goto	l5590
  7329  0102  084D               	movf	processGestureData@i,w
  7330  0103  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  7331  0104  0086               	movwf	6
  7332  0105  3002               	movlw	2	; select bank4/5
  7333  0106  0087               	movwf	7
  7334  0107  300B               	movlw	11
  7335  0108  0201               	subwf	1,w
  7336  0109  1C03               	skipc
  7337  010A  28E1               	goto	l5590
  7338                           
  7339                           ;APDS9960.c: 711:                 (gesture_data_.r_data[i] > 10) ) {;APDS9960.c: 713:   
      +                                        u_last = gesture_data_.u_data[i];
  7340  010B  084D               	movf	processGestureData@i,w
  7341  010C  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  7342  010D  0086               	movwf	6
  7343  010E  3002               	movlw	2	; select bank4/5
  7344  010F  0087               	movwf	7
  7345  0110  0801               	movf	1,w
  7346  0111  00AF               	movwf	??_processGestureData
  7347  0112  082F               	movf	??_processGestureData,w
  7348  0113  00C1               	movwf	processGestureData@u_last
  7349                           
  7350                           ;APDS9960.c: 714:                 d_last = gesture_data_.d_data[i];
  7351  0114  084D               	movf	processGestureData@i,w
  7352  0115  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  7353  0116  0086               	movwf	6
  7354  0117  3002               	movlw	2	; select bank4/5
  7355  0118  0087               	movwf	7
  7356  0119  0801               	movf	1,w
  7357  011A  00AF               	movwf	??_processGestureData
  7358  011B  082F               	movf	??_processGestureData,w
  7359  011C  00C2               	movwf	processGestureData@d_last
  7360                           
  7361                           ;APDS9960.c: 715:                 l_last = gesture_data_.l_data[i];
  7362  011D  084D               	movf	processGestureData@i,w
  7363  011E  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  7364  011F  0086               	movwf	6
  7365  0120  3002               	movlw	2	; select bank4/5
  7366  0121  0087               	movwf	7
  7367  0122  0801               	movf	1,w
  7368  0123  00AF               	movwf	??_processGestureData
  7369  0124  082F               	movf	??_processGestureData,w
  7370  0125  00C3               	movwf	processGestureData@l_last
  7371                           
  7372                           ;APDS9960.c: 716:                 r_last = gesture_data_.r_data[i];
  7373  0126  084D               	movf	processGestureData@i,w
  7374  0127  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  7375  0128  0086               	movwf	6
  7376  0129  3002               	movlw	2	; select bank4/5
  7377  012A  0087               	movwf	7
  7378  012B  0801               	movf	1,w
  7379  012C  00AF               	movwf	??_processGestureData
  7380  012D  082F               	movf	??_processGestureData,w
  7381  012E  00C4               	movwf	processGestureData@r_last
  7382  012F                     l5594:	
  7383                           
  7384                           ;APDS9960.c: 723:     ud_ratio_first = ((u_first - d_first) * 100) / (u_first + d_first)
      +                          ;
  7385  012F  0020               	movlb	0	; select bank0
  7386  0130  0845               	movf	processGestureData@u_first,w
  7387  0131  0746               	addwf	processGestureData@d_first,w
  7388  0132  00A6               	movwf	___awdiv@divisor
  7389  0133  01A7               	clrf	___awdiv@divisor+1
  7390  0134  0DA7               	rlf	___awdiv@divisor+1,f
  7391  0135  0846               	movf	processGestureData@d_first,w
  7392  0136  0245               	subwf	processGestureData@u_first,w
  7393  0137  00A0               	movwf	___wmul@multiplier
  7394  0138  01A1               	clrf	___wmul@multiplier+1
  7395  0139  1C03               	skipc
  7396  013A  03A1               	decf	___wmul@multiplier+1,f
  7397  013B  3064               	movlw	100
  7398  013C  00A2               	movwf	___wmul@multiplicand
  7399  013D  3000               	movlw	0
  7400  013E  00A3               	movwf	___wmul@multiplicand+1
  7401  013F  318B  23C6  3180   	fcall	___wmul
  7402  0142  0020               	movlb	0	; select bank0
  7403  0143  0821               	movf	?___wmul+1,w
  7404  0144  00A9               	movwf	___awdiv@dividend+1
  7405  0145  0820               	movf	?___wmul,w
  7406  0146  00A8               	movwf	___awdiv@dividend
  7407  0147  3187  271B  3180   	fcall	___awdiv
  7408  014A  0020               	movlb	0	; select bank0
  7409  014B  0827               	movf	?___awdiv+1,w
  7410  014C  00B2               	movwf	processGestureData@ud_ratio_first+1
  7411  014D  0826               	movf	?___awdiv,w
  7412  014E  00B1               	movwf	processGestureData@ud_ratio_first
  7413                           
  7414                           ;APDS9960.c: 724:     lr_ratio_first = ((l_first - r_first) * 100) / (l_first + r_first)
      +                          ;
  7415  014F  0847               	movf	processGestureData@l_first,w
  7416  0150  0748               	addwf	processGestureData@r_first,w
  7417  0151  00A6               	movwf	___awdiv@divisor
  7418  0152  01A7               	clrf	___awdiv@divisor+1
  7419  0153  0DA7               	rlf	___awdiv@divisor+1,f
  7420  0154  0848               	movf	processGestureData@r_first,w
  7421  0155  0247               	subwf	processGestureData@l_first,w
  7422  0156  00A0               	movwf	___wmul@multiplier
  7423  0157  01A1               	clrf	___wmul@multiplier+1
  7424  0158  1C03               	skipc
  7425  0159  03A1               	decf	___wmul@multiplier+1,f
  7426  015A  3064               	movlw	100
  7427  015B  00A2               	movwf	___wmul@multiplicand
  7428  015C  3000               	movlw	0
  7429  015D  00A3               	movwf	___wmul@multiplicand+1
  7430  015E  318B  23C6  3180   	fcall	___wmul
  7431  0161  0020               	movlb	0	; select bank0
  7432  0162  0821               	movf	?___wmul+1,w
  7433  0163  00A9               	movwf	___awdiv@dividend+1
  7434  0164  0820               	movf	?___wmul,w
  7435  0165  00A8               	movwf	___awdiv@dividend
  7436  0166  3187  271B  3180   	fcall	___awdiv
  7437  0169  0020               	movlb	0	; select bank0
  7438  016A  0827               	movf	?___awdiv+1,w
  7439  016B  00B4               	movwf	processGestureData@lr_ratio_first+1
  7440  016C  0826               	movf	?___awdiv,w
  7441  016D  00B3               	movwf	processGestureData@lr_ratio_first
  7442                           
  7443                           ;APDS9960.c: 725:     ud_ratio_last = ((u_last - d_last) * 100) / (u_last + d_last);
  7444  016E  0841               	movf	processGestureData@u_last,w
  7445  016F  0742               	addwf	processGestureData@d_last,w
  7446  0170  00A6               	movwf	___awdiv@divisor
  7447  0171  01A7               	clrf	___awdiv@divisor+1
  7448  0172  0DA7               	rlf	___awdiv@divisor+1,f
  7449  0173  0842               	movf	processGestureData@d_last,w
  7450  0174  0241               	subwf	processGestureData@u_last,w
  7451  0175  00A0               	movwf	___wmul@multiplier
  7452  0176  01A1               	clrf	___wmul@multiplier+1
  7453  0177  1C03               	skipc
  7454  0178  03A1               	decf	___wmul@multiplier+1,f
  7455  0179  3064               	movlw	100
  7456  017A  00A2               	movwf	___wmul@multiplicand
  7457  017B  3000               	movlw	0
  7458  017C  00A3               	movwf	___wmul@multiplicand+1
  7459  017D  318B  23C6  3180   	fcall	___wmul
  7460  0180  0020               	movlb	0	; select bank0
  7461  0181  0821               	movf	?___wmul+1,w
  7462  0182  00A9               	movwf	___awdiv@dividend+1
  7463  0183  0820               	movf	?___wmul,w
  7464  0184  00A8               	movwf	___awdiv@dividend
  7465  0185  3187  271B  3180   	fcall	___awdiv
  7466  0188  0020               	movlb	0	; select bank0
  7467  0189  0827               	movf	?___awdiv+1,w
  7468  018A  00B6               	movwf	processGestureData@ud_ratio_last+1
  7469  018B  0826               	movf	?___awdiv,w
  7470  018C  00B5               	movwf	processGestureData@ud_ratio_last
  7471                           
  7472                           ;APDS9960.c: 726:     lr_ratio_last = ((l_last - r_last) * 100) / (l_last + r_last);
  7473  018D  0843               	movf	processGestureData@l_last,w
  7474  018E  0744               	addwf	processGestureData@r_last,w
  7475  018F  00A6               	movwf	___awdiv@divisor
  7476  0190  01A7               	clrf	___awdiv@divisor+1
  7477  0191  0DA7               	rlf	___awdiv@divisor+1,f
  7478  0192  0844               	movf	processGestureData@r_last,w
  7479  0193  0243               	subwf	processGestureData@l_last,w
  7480  0194  00A0               	movwf	___wmul@multiplier
  7481  0195  01A1               	clrf	___wmul@multiplier+1
  7482  0196  1C03               	skipc
  7483  0197  03A1               	decf	___wmul@multiplier+1,f
  7484  0198  3064               	movlw	100
  7485  0199  00A2               	movwf	___wmul@multiplicand
  7486  019A  3000               	movlw	0
  7487  019B  00A3               	movwf	___wmul@multiplicand+1
  7488  019C  318B  23C6  3180   	fcall	___wmul
  7489  019F  0020               	movlb	0	; select bank0
  7490  01A0  0821               	movf	?___wmul+1,w
  7491  01A1  00A9               	movwf	___awdiv@dividend+1
  7492  01A2  0820               	movf	?___wmul,w
  7493  01A3  00A8               	movwf	___awdiv@dividend
  7494  01A4  3187  271B  3180   	fcall	___awdiv
  7495  01A7  0020               	movlb	0	; select bank0
  7496  01A8  0827               	movf	?___awdiv+1,w
  7497  01A9  00B8               	movwf	processGestureData@lr_ratio_last+1
  7498  01AA  0826               	movf	?___awdiv,w
  7499  01AB  00B7               	movwf	processGestureData@lr_ratio_last
  7500                           
  7501                           ;APDS9960.c: 729:     ud_delta = ud_ratio_last - ud_ratio_first;
  7502  01AC  0831               	movf	processGestureData@ud_ratio_first,w
  7503  01AD  0235               	subwf	processGestureData@ud_ratio_last,w
  7504  01AE  00C9               	movwf	processGestureData@ud_delta
  7505  01AF  0832               	movf	processGestureData@ud_ratio_first+1,w
  7506  01B0  3B36               	subwfb	processGestureData@ud_ratio_last+1,w
  7507  01B1  00CA               	movwf	processGestureData@ud_delta+1
  7508                           
  7509                           ;APDS9960.c: 730:     lr_delta = lr_ratio_last - lr_ratio_first;
  7510  01B2  0833               	movf	processGestureData@lr_ratio_first,w
  7511  01B3  0237               	subwf	processGestureData@lr_ratio_last,w
  7512  01B4  00CB               	movwf	processGestureData@lr_delta
  7513  01B5  0834               	movf	processGestureData@lr_ratio_first+1,w
  7514  01B6  3B38               	subwfb	processGestureData@lr_ratio_last+1,w
  7515  01B7  00CC               	movwf	processGestureData@lr_delta+1
  7516                           
  7517                           ;APDS9960.c: 733:     gesture_ud_delta_ += ud_delta;
  7518  01B8  0849               	movf	processGestureData@ud_delta,w
  7519  01B9  07E9               	addwf	_gesture_ud_delta_,f
  7520  01BA  084A               	movf	processGestureData@ud_delta+1,w
  7521  01BB  3DEA               	addwfc	_gesture_ud_delta_+1,f
  7522                           
  7523                           ;APDS9960.c: 734:     gesture_lr_delta_ += lr_delta;
  7524  01BC  084B               	movf	processGestureData@lr_delta,w
  7525  01BD  07E7               	addwf	_gesture_lr_delta_,f
  7526  01BE  084C               	movf	processGestureData@lr_delta+1,w
  7527  01BF  3DE8               	addwfc	_gesture_lr_delta_+1,f
  7528                           
  7529                           ;APDS9960.c: 737:     if( gesture_ud_delta_ >= 50 ) {
  7530  01C0  086A               	movf	_gesture_ud_delta_+1,w
  7531  01C1  3A80               	xorlw	128
  7532  01C2  00AF               	movwf	??_processGestureData
  7533  01C3  3080               	movlw	128
  7534  01C4  022F               	subwf	??_processGestureData,w
  7535  01C5  1D03               	skipz
  7536  01C6  29C9               	goto	u4505
  7537  01C7  3032               	movlw	50
  7538  01C8  0269               	subwf	_gesture_ud_delta_,w
  7539  01C9                     u4505:	
  7540  01C9  1C03               	skipc
  7541  01CA  29D0               	goto	l5608
  7542                           
  7543                           ;APDS9960.c: 738:         gesture_ud_count_ = 1;
  7544  01CB  3001               	movlw	1
  7545  01CC  0020               	movlb	0	; select bank0
  7546  01CD  00E5               	movwf	_gesture_ud_count_
  7547  01CE  3000               	movlw	0
  7548  01CF  29E0               	goto	L2
  7549  01D0                     l5608:	
  7550                           ;APDS9960.c: 739:     } else if( gesture_ud_delta_ <= -50 ) {
  7551                           
  7552  01D0  0020               	movlb	0	; select bank0
  7553  01D1  086A               	movf	_gesture_ud_delta_+1,w
  7554  01D2  3A80               	xorlw	128
  7555  01D3  00AF               	movwf	??_processGestureData
  7556  01D4  307F               	movlw	127
  7557  01D5  022F               	subwf	??_processGestureData,w
  7558  01D6  1D03               	skipz
  7559  01D7  29DA               	goto	u4515
  7560  01D8  30CF               	movlw	207
  7561  01D9  0269               	subwf	_gesture_ud_delta_,w
  7562  01DA                     u4515:	
  7563  01DA  1803               	skipnc
  7564  01DB  29E2               	goto	l5612
  7565                           
  7566                           ;APDS9960.c: 740:         gesture_ud_count_ = -1;
  7567  01DC  30FF               	movlw	255
  7568  01DD  0020               	movlb	0	; select bank0
  7569  01DE  00E5               	movwf	_gesture_ud_count_
  7570  01DF  30FF               	movlw	255
  7571  01E0                     L2:	
  7572  01E0  00E6               	movwf	_gesture_ud_count_+1
  7573                           
  7574                           ;APDS9960.c: 741:     } else {
  7575  01E1  29E5               	goto	l5614
  7576  01E2                     l5612:	
  7577                           
  7578                           ;APDS9960.c: 742:         gesture_ud_count_ = 0;
  7579  01E2  0020               	movlb	0	; select bank0
  7580  01E3  01E5               	clrf	_gesture_ud_count_
  7581  01E4  01E6               	clrf	_gesture_ud_count_+1
  7582  01E5                     l5614:	
  7583                           
  7584                           ;APDS9960.c: 746:     if( gesture_lr_delta_ >= 50 ) {
  7585  01E5  0868               	movf	_gesture_lr_delta_+1,w
  7586  01E6  3A80               	xorlw	128
  7587  01E7  00AF               	movwf	??_processGestureData
  7588  01E8  3080               	movlw	128
  7589  01E9  022F               	subwf	??_processGestureData,w
  7590  01EA  1D03               	skipz
  7591  01EB  29EE               	goto	u4525
  7592  01EC  3032               	movlw	50
  7593  01ED  0267               	subwf	_gesture_lr_delta_,w
  7594  01EE                     u4525:	
  7595  01EE  1C03               	skipc
  7596  01EF  29F5               	goto	l5618
  7597                           
  7598                           ;APDS9960.c: 747:         gesture_lr_count_ = 1;
  7599  01F0  3001               	movlw	1
  7600  01F1  0020               	movlb	0	; select bank0
  7601  01F2  00E3               	movwf	_gesture_lr_count_
  7602  01F3  3000               	movlw	0
  7603  01F4  2A05               	goto	L3
  7604  01F5                     l5618:	
  7605                           ;APDS9960.c: 748:     } else if( gesture_lr_delta_ <= -50 ) {
  7606                           
  7607  01F5  0020               	movlb	0	; select bank0
  7608  01F6  0868               	movf	_gesture_lr_delta_+1,w
  7609  01F7  3A80               	xorlw	128
  7610  01F8  00AF               	movwf	??_processGestureData
  7611  01F9  307F               	movlw	127
  7612  01FA  022F               	subwf	??_processGestureData,w
  7613  01FB  1D03               	skipz
  7614  01FC  29FF               	goto	u4535
  7615  01FD  30CF               	movlw	207
  7616  01FE  0267               	subwf	_gesture_lr_delta_,w
  7617  01FF                     u4535:	
  7618  01FF  1803               	skipnc
  7619  0200  2A07               	goto	l5622
  7620                           
  7621                           ;APDS9960.c: 749:         gesture_lr_count_ = -1;
  7622  0201  30FF               	movlw	255
  7623  0202  0020               	movlb	0	; select bank0
  7624  0203  00E3               	movwf	_gesture_lr_count_
  7625  0204  30FF               	movlw	255
  7626  0205                     L3:	
  7627  0205  00E4               	movwf	_gesture_lr_count_+1
  7628                           
  7629                           ;APDS9960.c: 750:     } else {
  7630  0206  2A0A               	goto	l5624
  7631  0207                     l5622:	
  7632                           
  7633                           ;APDS9960.c: 751:         gesture_lr_count_ = 0;
  7634  0207  0020               	movlb	0	; select bank0
  7635  0208  01E3               	clrf	_gesture_lr_count_
  7636  0209  01E4               	clrf	_gesture_lr_count_+1
  7637  020A                     l5624:	
  7638                           
  7639                           ;APDS9960.c: 755:     if( (gesture_ud_count_ == 0) && (gesture_lr_count_ == 0) ) {
  7640  020A  0865               	movf	_gesture_ud_count_,w
  7641  020B  0466               	iorwf	_gesture_ud_count_+1,w
  7642  020C  1D03               	btfss	3,2
  7643  020D  2AAD               	goto	l5668
  7644  020E  0863               	movf	_gesture_lr_count_,w
  7645  020F  0464               	iorwf	_gesture_lr_count_+1,w
  7646  0210  1D03               	btfss	3,2
  7647  0211  2AAD               	goto	l5668
  7648                           
  7649                           ;APDS9960.c: 756:         if( (((ud_delta) > 0 ? (ud_delta) : -(ud_delta)) < 20) && (((l
      +                          r_delta) > 0 ? (lr_delta) : -(lr_delta)) < 20) ) {
  7650  0212  084A               	movf	processGestureData@ud_delta+1,w
  7651  0213  3A80               	xorlw	128
  7652  0214  00AF               	movwf	??_processGestureData
  7653  0215  3080               	movlw	128
  7654  0216  022F               	subwf	??_processGestureData,w
  7655  0217  1D03               	skipz
  7656  0218  2A1B               	goto	u4565
  7657  0219  3001               	movlw	1
  7658  021A  0249               	subwf	processGestureData@ud_delta,w
  7659  021B                     u4565:	
  7660  021B  1803               	skipnc
  7661  021C  2A2A               	goto	l5632
  7662  021D  0020               	movlb	0	; select bank0
  7663  021E  0949               	comf	processGestureData@ud_delta,w
  7664  021F  00AF               	movwf	??_processGestureData
  7665  0220  094A               	comf	processGestureData@ud_delta+1,w
  7666  0221  00B0               	movwf	??_processGestureData+1
  7667  0222  0AAF               	incf	??_processGestureData,f
  7668  0223  1903               	skipnz
  7669  0224  0AB0               	incf	??_processGestureData+1,f
  7670  0225  082F               	movf	??_processGestureData,w
  7671  0226  00B9               	movwf	_processGestureData$1182
  7672  0227  0830               	movf	??_processGestureData+1,w
  7673  0228  00BA               	movwf	_processGestureData$1182+1
  7674  0229  2A2F               	goto	l883
  7675  022A                     l5632:	
  7676  022A  0020               	movlb	0	; select bank0
  7677  022B  084A               	movf	processGestureData@ud_delta+1,w
  7678  022C  00BA               	movwf	_processGestureData$1182+1
  7679  022D  0849               	movf	processGestureData@ud_delta,w
  7680  022E  00B9               	movwf	_processGestureData$1182
  7681  022F                     l883:	
  7682  022F  083A               	movf	_processGestureData$1182+1,w
  7683  0230  3A80               	xorlw	128
  7684  0231  00AF               	movwf	??_processGestureData
  7685  0232  3080               	movlw	128
  7686  0233  022F               	subwf	??_processGestureData,w
  7687  0234  1D03               	skipz
  7688  0235  2A38               	goto	u4575
  7689  0236  3014               	movlw	20
  7690  0237  0239               	subwf	_processGestureData$1182,w
  7691  0238                     u4575:	
  7692  0238  1803               	skipnc
  7693  0239  2863               	goto	l5540
  7694  023A  0020               	movlb	0	; select bank0
  7695  023B  084C               	movf	processGestureData@lr_delta+1,w
  7696  023C  3A80               	xorlw	128
  7697  023D  00AF               	movwf	??_processGestureData
  7698  023E  3080               	movlw	128
  7699  023F  022F               	subwf	??_processGestureData,w
  7700  0240  1D03               	skipz
  7701  0241  2A44               	goto	u4585
  7702  0242  3001               	movlw	1
  7703  0243  024B               	subwf	processGestureData@lr_delta,w
  7704  0244                     u4585:	
  7705  0244  1803               	skipnc
  7706  0245  2A53               	goto	l5638
  7707  0246  0020               	movlb	0	; select bank0
  7708  0247  094B               	comf	processGestureData@lr_delta,w
  7709  0248  00AF               	movwf	??_processGestureData
  7710  0249  094C               	comf	processGestureData@lr_delta+1,w
  7711  024A  00B0               	movwf	??_processGestureData+1
  7712  024B  0AAF               	incf	??_processGestureData,f
  7713  024C  1903               	skipnz
  7714  024D  0AB0               	incf	??_processGestureData+1,f
  7715  024E  082F               	movf	??_processGestureData,w
  7716  024F  00BB               	movwf	_processGestureData$1183
  7717  0250  0830               	movf	??_processGestureData+1,w
  7718  0251  00BC               	movwf	_processGestureData$1183+1
  7719  0252  2A58               	goto	l887
  7720  0253                     l5638:	
  7721  0253  0020               	movlb	0	; select bank0
  7722  0254  084C               	movf	processGestureData@lr_delta+1,w
  7723  0255  00BC               	movwf	_processGestureData$1183+1
  7724  0256  084B               	movf	processGestureData@lr_delta,w
  7725  0257  00BB               	movwf	_processGestureData$1183
  7726  0258                     l887:	
  7727  0258  083C               	movf	_processGestureData$1183+1,w
  7728  0259  3A80               	xorlw	128
  7729  025A  00AF               	movwf	??_processGestureData
  7730  025B  3080               	movlw	128
  7731  025C  022F               	subwf	??_processGestureData,w
  7732  025D  1D03               	skipz
  7733  025E  2A61               	goto	u4595
  7734  025F  3014               	movlw	20
  7735  0260  023B               	subwf	_processGestureData$1183,w
  7736  0261                     u4595:	
  7737  0261  1803               	skipnc
  7738  0262  2863               	goto	l5540
  7739                           
  7740                           ;APDS9960.c: 757: ;APDS9960.c: 759:             if( (ud_delta == 0) && (lr_delta == 0) )
      +                           {
  7741  0263  0020               	movlb	0	; select bank0
  7742  0264  0849               	movf	processGestureData@ud_delta,w
  7743  0265  044A               	iorwf	processGestureData@ud_delta+1,w
  7744  0266  1D03               	btfss	3,2
  7745  0267  2A71               	goto	l5646
  7746  0268  084B               	movf	processGestureData@lr_delta,w
  7747  0269  044C               	iorwf	processGestureData@lr_delta+1,w
  7748  026A  1D03               	btfss	3,2
  7749  026B  2A71               	goto	l5646
  7750                           
  7751                           ;APDS9960.c: 760:                 gesture_near_count_++;
  7752  026C  3001               	movlw	1
  7753  026D  07E1               	addwf	_gesture_near_count_,f
  7754  026E  3000               	movlw	0
  7755  026F  3DE2               	addwfc	_gesture_near_count_+1,f
  7756                           
  7757                           ;APDS9960.c: 761:             } else if( (ud_delta != 0) || (lr_delta != 0) ) {
  7758  0270  2A7D               	goto	l889
  7759  0271                     l5646:	
  7760  0271  0849               	movf	processGestureData@ud_delta,w
  7761  0272  044A               	iorwf	processGestureData@ud_delta+1,w
  7762  0273  1D03               	btfss	3,2
  7763  0274  2A79               	goto	l5650
  7764  0275  084B               	movf	processGestureData@lr_delta,w
  7765  0276  044C               	iorwf	processGestureData@lr_delta+1,w
  7766  0277  1903               	btfsc	3,2
  7767  0278  2A7D               	goto	l889
  7768  0279                     l5650:	
  7769                           
  7770                           ;APDS9960.c: 762:                 gesture_far_count_++;
  7771  0279  3001               	movlw	1
  7772  027A  07DF               	addwf	_gesture_far_count_,f
  7773  027B  3000               	movlw	0
  7774  027C  3DE0               	addwfc	_gesture_far_count_+1,f
  7775  027D                     l889:	
  7776                           
  7777                           ;APDS9960.c: 765:             if( (gesture_near_count_ >= 10) && (gesture_far_count_ >= 
      +                          2) ) {
  7778  027D  0862               	movf	_gesture_near_count_+1,w
  7779  027E  3A80               	xorlw	128
  7780  027F  00AF               	movwf	??_processGestureData
  7781  0280  3080               	movlw	128
  7782  0281  022F               	subwf	??_processGestureData,w
  7783  0282  1D03               	skipz
  7784  0283  2A86               	goto	u4645
  7785  0284  300A               	movlw	10
  7786  0285  0261               	subwf	_gesture_near_count_,w
  7787  0286                     u4645:	
  7788  0286  1C03               	skipc
  7789  0287  2863               	goto	l5540
  7790  0288  0020               	movlb	0	; select bank0
  7791  0289  0860               	movf	_gesture_far_count_+1,w
  7792  028A  3A80               	xorlw	128
  7793  028B  00AF               	movwf	??_processGestureData
  7794  028C  3080               	movlw	128
  7795  028D  022F               	subwf	??_processGestureData,w
  7796  028E  1D03               	skipz
  7797  028F  2A92               	goto	u4655
  7798  0290  3002               	movlw	2
  7799  0291  025F               	subwf	_gesture_far_count_,w
  7800  0292                     u4655:	
  7801  0292  1C03               	skipc
  7802  0293  2863               	goto	l5540
  7803                           
  7804                           ;APDS9960.c: 766:                 if( (ud_delta == 0) && (lr_delta == 0) ) {
  7805  0294  0020               	movlb	0	; select bank0
  7806  0295  0849               	movf	processGestureData@ud_delta,w
  7807  0296  044A               	iorwf	processGestureData@ud_delta+1,w
  7808  0297  1D03               	btfss	3,2
  7809  0298  2A9F               	goto	l5660
  7810  0299  084B               	movf	processGestureData@lr_delta,w
  7811  029A  044C               	iorwf	processGestureData@lr_delta+1,w
  7812  029B  1D03               	btfss	3,2
  7813  029C  2A9F               	goto	l5660
  7814                           
  7815                           ;APDS9960.c: 767:                     gesture_state_ = NEAR_STATE;
  7816  029D  3001               	movlw	1
  7817  029E  2AA8               	goto	L4
  7818  029F                     l5660:	
  7819                           ;APDS9960.c: 768:                 } else if( (ud_delta != 0) && (lr_delta != 0) ) {
  7820                           
  7821  029F  0849               	movf	processGestureData@ud_delta,w
  7822  02A0  044A               	iorwf	processGestureData@ud_delta+1,w
  7823  02A1  1903               	btfsc	3,2
  7824  02A2  2AAB               	goto	l895
  7825  02A3  084B               	movf	processGestureData@lr_delta,w
  7826  02A4  044C               	iorwf	processGestureData@lr_delta+1,w
  7827  02A5  1903               	btfsc	3,2
  7828  02A6  2AAB               	goto	l895
  7829                           
  7830                           ;APDS9960.c: 769:                     gesture_state_ = FAR_STATE;
  7831  02A7  3002               	movlw	2
  7832  02A8                     L4:	
  7833  02A8  00DD               	movwf	_gesture_state_
  7834  02A9  3000               	movlw	0
  7835  02AA  00DE               	movwf	_gesture_state_+1
  7836  02AB                     l895:	
  7837                           
  7838                           ;APDS9960.c: 771:                 return 1;
  7839  02AB  3001               	movlw	1
  7840  02AC  0008               	return
  7841  02AD                     l5668:	
  7842                           
  7843                           ;APDS9960.c: 775:         if( (((ud_delta) > 0 ? (ud_delta) : -(ud_delta)) < 20) && (((l
      +                          r_delta) > 0 ? (lr_delta) : -(lr_delta)) < 20) ) {
  7844  02AD  084A               	movf	processGestureData@ud_delta+1,w
  7845  02AE  3A80               	xorlw	128
  7846  02AF  00AF               	movwf	??_processGestureData
  7847  02B0  3080               	movlw	128
  7848  02B1  022F               	subwf	??_processGestureData,w
  7849  02B2  1D03               	skipz
  7850  02B3  2AB6               	goto	u4705
  7851  02B4  3001               	movlw	1
  7852  02B5  0249               	subwf	processGestureData@ud_delta,w
  7853  02B6                     u4705:	
  7854  02B6  1803               	skipnc
  7855  02B7  2AC5               	goto	l5672
  7856  02B8  0020               	movlb	0	; select bank0
  7857  02B9  0949               	comf	processGestureData@ud_delta,w
  7858  02BA  00AF               	movwf	??_processGestureData
  7859  02BB  094A               	comf	processGestureData@ud_delta+1,w
  7860  02BC  00B0               	movwf	??_processGestureData+1
  7861  02BD  0AAF               	incf	??_processGestureData,f
  7862  02BE  1903               	skipnz
  7863  02BF  0AB0               	incf	??_processGestureData+1,f
  7864  02C0  082F               	movf	??_processGestureData,w
  7865  02C1  00BD               	movwf	_processGestureData$1184
  7866  02C2  0830               	movf	??_processGestureData+1,w
  7867  02C3  00BE               	movwf	_processGestureData$1184+1
  7868  02C4  2ACA               	goto	l902
  7869  02C5                     l5672:	
  7870  02C5  0020               	movlb	0	; select bank0
  7871  02C6  084A               	movf	processGestureData@ud_delta+1,w
  7872  02C7  00BE               	movwf	_processGestureData$1184+1
  7873  02C8  0849               	movf	processGestureData@ud_delta,w
  7874  02C9  00BD               	movwf	_processGestureData$1184
  7875  02CA                     l902:	
  7876  02CA  083E               	movf	_processGestureData$1184+1,w
  7877  02CB  3A80               	xorlw	128
  7878  02CC  00AF               	movwf	??_processGestureData
  7879  02CD  3080               	movlw	128
  7880  02CE  022F               	subwf	??_processGestureData,w
  7881  02CF  1D03               	skipz
  7882  02D0  2AD3               	goto	u4715
  7883  02D1  3014               	movlw	20
  7884  02D2  023D               	subwf	_processGestureData$1184,w
  7885  02D3                     u4715:	
  7886  02D3  1803               	skipnc
  7887  02D4  2863               	goto	l5540
  7888  02D5  0020               	movlb	0	; select bank0
  7889  02D6  084C               	movf	processGestureData@lr_delta+1,w
  7890  02D7  3A80               	xorlw	128
  7891  02D8  00AF               	movwf	??_processGestureData
  7892  02D9  3080               	movlw	128
  7893  02DA  022F               	subwf	??_processGestureData,w
  7894  02DB  1D03               	skipz
  7895  02DC  2ADF               	goto	u4725
  7896  02DD  3001               	movlw	1
  7897  02DE  024B               	subwf	processGestureData@lr_delta,w
  7898  02DF                     u4725:	
  7899  02DF  1803               	skipnc
  7900  02E0  2AEE               	goto	l5678
  7901  02E1  0020               	movlb	0	; select bank0
  7902  02E2  094B               	comf	processGestureData@lr_delta,w
  7903  02E3  00AF               	movwf	??_processGestureData
  7904  02E4  094C               	comf	processGestureData@lr_delta+1,w
  7905  02E5  00B0               	movwf	??_processGestureData+1
  7906  02E6  0AAF               	incf	??_processGestureData,f
  7907  02E7  1903               	skipnz
  7908  02E8  0AB0               	incf	??_processGestureData+1,f
  7909  02E9  082F               	movf	??_processGestureData,w
  7910  02EA  00BF               	movwf	_processGestureData$1185
  7911  02EB  0830               	movf	??_processGestureData+1,w
  7912  02EC  00C0               	movwf	_processGestureData$1185+1
  7913  02ED  2AF3               	goto	l906
  7914  02EE                     l5678:	
  7915  02EE  0020               	movlb	0	; select bank0
  7916  02EF  084C               	movf	processGestureData@lr_delta+1,w
  7917  02F0  00C0               	movwf	_processGestureData$1185+1
  7918  02F1  084B               	movf	processGestureData@lr_delta,w
  7919  02F2  00BF               	movwf	_processGestureData$1185
  7920  02F3                     l906:	
  7921  02F3  0840               	movf	_processGestureData$1185+1,w
  7922  02F4  3A80               	xorlw	128
  7923  02F5  00AF               	movwf	??_processGestureData
  7924  02F6  3080               	movlw	128
  7925  02F7  022F               	subwf	??_processGestureData,w
  7926  02F8  1D03               	skipz
  7927  02F9  2AFC               	goto	u4735
  7928  02FA  3014               	movlw	20
  7929  02FB  023F               	subwf	_processGestureData$1185,w
  7930  02FC                     u4735:	
  7931  02FC  1803               	skipnc
  7932  02FD  2863               	goto	l5540
  7933                           
  7934                           ;APDS9960.c: 776: ;APDS9960.c: 778:             if( (ud_delta == 0) && (lr_delta == 0) )
      +                           {
  7935  02FE  0020               	movlb	0	; select bank0
  7936  02FF  0849               	movf	processGestureData@ud_delta,w
  7937  0300  044A               	iorwf	processGestureData@ud_delta+1,w
  7938  0301  1D03               	btfss	3,2
  7939  0302  2B0B               	goto	l907
  7940  0303  084B               	movf	processGestureData@lr_delta,w
  7941  0304  044C               	iorwf	processGestureData@lr_delta+1,w
  7942  0305  1D03               	btfss	3,2
  7943  0306  2B0B               	goto	l907
  7944                           
  7945                           ;APDS9960.c: 779:                 gesture_near_count_++;
  7946  0307  3001               	movlw	1
  7947  0308  07E1               	addwf	_gesture_near_count_,f
  7948  0309  3000               	movlw	0
  7949  030A  3DE2               	addwfc	_gesture_near_count_+1,f
  7950  030B                     l907:	
  7951                           ;APDS9960.c: 780:             }
  7952                           
  7953                           
  7954                           ;APDS9960.c: 782:             if( gesture_near_count_ >= 10 ) {
  7955  030B  0862               	movf	_gesture_near_count_+1,w
  7956  030C  3A80               	xorlw	128
  7957  030D  00AF               	movwf	??_processGestureData
  7958  030E  3080               	movlw	128
  7959  030F  022F               	subwf	??_processGestureData,w
  7960  0310  1D03               	skipz
  7961  0311  2B14               	goto	u4765
  7962  0312  300A               	movlw	10
  7963  0313  0261               	subwf	_gesture_near_count_,w
  7964  0314                     u4765:	
  7965  0314  1C03               	skipc
  7966  0315  2863               	goto	l5540
  7967                           
  7968                           ;APDS9960.c: 783:                 gesture_ud_count_ = 0;
  7969  0316  0020               	movlb	0	; select bank0
  7970  0317  01E5               	clrf	_gesture_ud_count_
  7971  0318  01E6               	clrf	_gesture_ud_count_+1
  7972                           
  7973                           ;APDS9960.c: 784:                 gesture_lr_count_ = 0;
  7974  0319  01E3               	clrf	_gesture_lr_count_
  7975  031A  01E4               	clrf	_gesture_lr_count_+1
  7976                           
  7977                           ;APDS9960.c: 785:                 gesture_ud_delta_ = 0;
  7978  031B  01E9               	clrf	_gesture_ud_delta_
  7979  031C  01EA               	clrf	_gesture_ud_delta_+1
  7980                           
  7981                           ;APDS9960.c: 786:                 gesture_lr_delta_ = 0;
  7982  031D  01E7               	clrf	_gesture_lr_delta_
  7983  031E  01E8               	clrf	_gesture_lr_delta_+1
  7984  031F  2863               	goto	l5540
  7985  0320                     __end_of_processGestureData:	
  7986                           
  7987                           	psect	text19
  7988  0BC6                     __ptext19:	
  7989 ;; *************** function ___wmul *****************
  7990 ;; Defined at:
  7991 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
  7992 ;; Parameters:    Size  Location     Type
  7993 ;;  multiplier      2    0[BANK0 ] unsigned int 
  7994 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  7995 ;; Auto vars:     Size  Location     Type
  7996 ;;  product         2    4[BANK0 ] unsigned int 
  7997 ;; Return value:  Size  Location     Type
  7998 ;;                  2    0[BANK0 ] unsigned int 
  7999 ;; Registers used:
  8000 ;;		wreg, status,2, status,0
  8001 ;; Tracked objects:
  8002 ;;		On entry : 0/0
  8003 ;;		On exit  : 0/0
  8004 ;;		Unchanged: 0/0
  8005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8006 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8007 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8008 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8009 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8010 ;;Total ram usage:        6 bytes
  8011 ;; Hardware stack levels used:    1
  8012 ;; Hardware stack levels required when called:    5
  8013 ;; This function calls:
  8014 ;;		Nothing
  8015 ;; This function is called by:
  8016 ;;		_processGestureData
  8017 ;; This function uses a non-reentrant model
  8018 ;;
  8019                           
  8020                           
  8021                           ;psect for function ___wmul
  8022  0BC6                     ___wmul:	
  8023                           
  8024                           ;incstack = 0
  8025                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  8026  0BC6  0020               	movlb	0	; select bank0
  8027  0BC7  01A4               	clrf	___wmul@product
  8028  0BC8  01A5               	clrf	___wmul@product+1
  8029  0BC9                     l5386:	
  8030  0BC9  1C20               	btfss	___wmul@multiplier,0
  8031  0BCA  2BCF               	goto	l1240
  8032  0BCB  0822               	movf	___wmul@multiplicand,w
  8033  0BCC  07A4               	addwf	___wmul@product,f
  8034  0BCD  0823               	movf	___wmul@multiplicand+1,w
  8035  0BCE  3DA5               	addwfc	___wmul@product+1,f
  8036  0BCF                     l1240:	
  8037  0BCF  3001               	movlw	1
  8038  0BD0                     u4085:	
  8039  0BD0  35A2               	lslf	___wmul@multiplicand,f
  8040  0BD1  0DA3               	rlf	___wmul@multiplicand+1,f
  8041  0BD2  0B89               	decfsz	9,f
  8042  0BD3  2BD0               	goto	u4085
  8043  0BD4  3001               	movlw	1
  8044  0BD5                     u4095:	
  8045  0BD5  36A1               	lsrf	___wmul@multiplier+1,f
  8046  0BD6  0CA0               	rrf	___wmul@multiplier,f
  8047  0BD7  0B89               	decfsz	9,f
  8048  0BD8  2BD5               	goto	u4095
  8049  0BD9  0820               	movf	___wmul@multiplier,w
  8050  0BDA  0421               	iorwf	___wmul@multiplier+1,w
  8051  0BDB  1D03               	btfss	3,2
  8052  0BDC  2BC9               	goto	l5386
  8053  0BDD  0825               	movf	___wmul@product+1,w
  8054  0BDE  00A1               	movwf	?___wmul+1
  8055  0BDF  0824               	movf	___wmul@product,w
  8056  0BE0  00A0               	movwf	?___wmul
  8057  0BE1  0008               	return
  8058  0BE2                     __end_of___wmul:	
  8059                           
  8060                           	psect	text20
  8061  071B                     __ptext20:	
  8062 ;; *************** function ___awdiv *****************
  8063 ;; Defined at:
  8064 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awdiv.c"
  8065 ;; Parameters:    Size  Location     Type
  8066 ;;  divisor         2    6[BANK0 ] int 
  8067 ;;  dividend        2    8[BANK0 ] int 
  8068 ;; Auto vars:     Size  Location     Type
  8069 ;;  quotient        2   13[BANK0 ] int 
  8070 ;;  sign            1   12[BANK0 ] unsigned char 
  8071 ;;  counter         1   11[BANK0 ] unsigned char 
  8072 ;; Return value:  Size  Location     Type
  8073 ;;                  2    6[BANK0 ] int 
  8074 ;; Registers used:
  8075 ;;		wreg, status,2, status,0
  8076 ;; Tracked objects:
  8077 ;;		On entry : 0/0
  8078 ;;		On exit  : 0/0
  8079 ;;		Unchanged: 0/0
  8080 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8081 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8082 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8083 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8084 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8085 ;;Total ram usage:        9 bytes
  8086 ;; Hardware stack levels used:    1
  8087 ;; Hardware stack levels required when called:    5
  8088 ;; This function calls:
  8089 ;;		Nothing
  8090 ;; This function is called by:
  8091 ;;		_processGestureData
  8092 ;; This function uses a non-reentrant model
  8093 ;;
  8094                           
  8095                           
  8096                           ;psect for function ___awdiv
  8097  071B                     ___awdiv:	
  8098                           
  8099                           ;incstack = 0
  8100                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  8101  071B  0020               	movlb	0	; select bank0
  8102  071C  01AC               	clrf	___awdiv@sign
  8103  071D  1FA7               	btfss	___awdiv@divisor+1,7
  8104  071E  2F26               	goto	l5406
  8105  071F  09A6               	comf	___awdiv@divisor,f
  8106  0720  09A7               	comf	___awdiv@divisor+1,f
  8107  0721  0AA6               	incf	___awdiv@divisor,f
  8108  0722  1903               	skipnz
  8109  0723  0AA7               	incf	___awdiv@divisor+1,f
  8110  0724  01AC               	clrf	___awdiv@sign
  8111  0725  0AAC               	incf	___awdiv@sign,f
  8112  0726                     l5406:	
  8113  0726  1FA9               	btfss	___awdiv@dividend+1,7
  8114  0727  2F31               	goto	l5412
  8115  0728  09A8               	comf	___awdiv@dividend,f
  8116  0729  09A9               	comf	___awdiv@dividend+1,f
  8117  072A  0AA8               	incf	___awdiv@dividend,f
  8118  072B  1903               	skipnz
  8119  072C  0AA9               	incf	___awdiv@dividend+1,f
  8120  072D  3001               	movlw	1
  8121  072E  00AA               	movwf	??___awdiv
  8122  072F  082A               	movf	??___awdiv,w
  8123  0730  06AC               	xorwf	___awdiv@sign,f
  8124  0731                     l5412:	
  8125  0731  01AD               	clrf	___awdiv@quotient
  8126  0732  01AE               	clrf	___awdiv@quotient+1
  8127  0733  0826               	movf	___awdiv@divisor,w
  8128  0734  0427               	iorwf	___awdiv@divisor+1,w
  8129  0735  1903               	btfsc	3,2
  8130  0736  2F60               	goto	l5434
  8131  0737  01AB               	clrf	___awdiv@counter
  8132  0738  0AAB               	incf	___awdiv@counter,f
  8133  0739                     l5422:	
  8134  0739  1BA7               	btfsc	___awdiv@divisor+1,7
  8135  073A  2F45               	goto	l5424
  8136  073B  3001               	movlw	1
  8137  073C                     u4145:	
  8138  073C  35A6               	lslf	___awdiv@divisor,f
  8139  073D  0DA7               	rlf	___awdiv@divisor+1,f
  8140  073E  0B89               	decfsz	9,f
  8141  073F  2F3C               	goto	u4145
  8142  0740  3001               	movlw	1
  8143  0741  00AA               	movwf	??___awdiv
  8144  0742  082A               	movf	??___awdiv,w
  8145  0743  07AB               	addwf	___awdiv@counter,f
  8146  0744  2F39               	goto	l5422
  8147  0745                     l5424:	
  8148  0745  3001               	movlw	1
  8149  0746                     u4165:	
  8150  0746  35AD               	lslf	___awdiv@quotient,f
  8151  0747  0DAE               	rlf	___awdiv@quotient+1,f
  8152  0748  0B89               	decfsz	9,f
  8153  0749  2F46               	goto	u4165
  8154  074A  0827               	movf	___awdiv@divisor+1,w
  8155  074B  0229               	subwf	___awdiv@dividend+1,w
  8156  074C  1D03               	skipz
  8157  074D  2F50               	goto	u4175
  8158  074E  0826               	movf	___awdiv@divisor,w
  8159  074F  0228               	subwf	___awdiv@dividend,w
  8160  0750                     u4175:	
  8161  0750  1C03               	skipc
  8162  0751  2F57               	goto	l5430
  8163  0752  0826               	movf	___awdiv@divisor,w
  8164  0753  02A8               	subwf	___awdiv@dividend,f
  8165  0754  0827               	movf	___awdiv@divisor+1,w
  8166  0755  3BA9               	subwfb	___awdiv@dividend+1,f
  8167  0756  142D               	bsf	___awdiv@quotient,0
  8168  0757                     l5430:	
  8169  0757  3001               	movlw	1
  8170  0758                     u4185:	
  8171  0758  36A7               	lsrf	___awdiv@divisor+1,f
  8172  0759  0CA6               	rrf	___awdiv@divisor,f
  8173  075A  0B89               	decfsz	9,f
  8174  075B  2F58               	goto	u4185
  8175  075C  3001               	movlw	1
  8176  075D  02AB               	subwf	___awdiv@counter,f
  8177  075E  1D03               	btfss	3,2
  8178  075F  2F45               	goto	l5424
  8179  0760                     l5434:	
  8180  0760  082C               	movf	___awdiv@sign,w
  8181  0761  1903               	btfsc	3,2
  8182  0762  2F68               	goto	l5438
  8183  0763  09AD               	comf	___awdiv@quotient,f
  8184  0764  09AE               	comf	___awdiv@quotient+1,f
  8185  0765  0AAD               	incf	___awdiv@quotient,f
  8186  0766  1903               	skipnz
  8187  0767  0AAE               	incf	___awdiv@quotient+1,f
  8188  0768                     l5438:	
  8189  0768  082E               	movf	___awdiv@quotient+1,w
  8190  0769  00A7               	movwf	?___awdiv+1
  8191  076A  082D               	movf	___awdiv@quotient,w
  8192  076B  00A6               	movwf	?___awdiv
  8193  076C  0008               	return
  8194  076D                     __end_of___awdiv:	
  8195                           
  8196                           	psect	text21
  8197  0AED                     __ptext21:	
  8198 ;; *************** function _isGestureAvailable *****************
  8199 ;; Defined at:
  8200 ;;		line 537 in file "APDS9960.c"
  8201 ;; Parameters:    Size  Location     Type
  8202 ;;		None
  8203 ;; Auto vars:     Size  Location     Type
  8204 ;;  val             1   10[BANK0 ] unsigned char 
  8205 ;; Return value:  Size  Location     Type
  8206 ;;                  1    wreg      _Bool 
  8207 ;; Registers used:
  8208 ;;		wreg, status,2, status,0, pclath, cstack
  8209 ;; Tracked objects:
  8210 ;;		On entry : 0/0
  8211 ;;		On exit  : 0/0
  8212 ;;		Unchanged: 0/0
  8213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8214 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8215 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8216 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8217 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8218 ;;Total ram usage:        2 bytes
  8219 ;; Hardware stack levels used:    1
  8220 ;; Hardware stack levels required when called:    8
  8221 ;; This function calls:
  8222 ;;		_wireReadDataByte
  8223 ;; This function is called by:
  8224 ;;		_main
  8225 ;;		_readGesture
  8226 ;; This function uses a non-reentrant model
  8227 ;;
  8228                           
  8229                           
  8230                           ;psect for function _isGestureAvailable
  8231  0AED                     _isGestureAvailable:	
  8232                           
  8233                           ;APDS9960.c: 539:     uint8_t val;;APDS9960.c: 542:     val=wireReadDataByte(0xAF);
  8234                           
  8235                           ;incstack = 0
  8236                           ; Regs used in _isGestureAvailable: [wreg+status,2+status,0+pclath+cstack]
  8237  0AED  30AF               	movlw	175
  8238  0AEE  318C  2400  318A   	fcall	_wireReadDataByte
  8239  0AF1  0020               	movlb	0	; select bank0
  8240  0AF2  00A9               	movwf	??_isGestureAvailable
  8241  0AF3  0829               	movf	??_isGestureAvailable,w
  8242  0AF4  00AA               	movwf	isGestureAvailable@val
  8243                           
  8244                           ;APDS9960.c: 545:     val &= 0b00000001;
  8245  0AF5  3001               	movlw	1
  8246  0AF6  00A9               	movwf	??_isGestureAvailable
  8247  0AF7  0829               	movf	??_isGestureAvailable,w
  8248  0AF8  05AA               	andwf	isGestureAvailable@val,f
  8249                           
  8250                           ;APDS9960.c: 548:     if( val == 1) {
  8251  0AF9  032A               	decf	isGestureAvailable@val,w
  8252  0AFA  1D03               	btfss	3,2
  8253  0AFB  2AFE               	goto	l5466
  8254                           
  8255                           ;APDS9960.c: 549:         return 1;
  8256  0AFC  3001               	movlw	1
  8257  0AFD  0008               	return
  8258  0AFE                     l5466:	
  8259                           
  8260                           ;APDS9960.c: 551:         return 0;
  8261  0AFE  3000               	movlw	0
  8262  0AFF  0008               	return
  8263  0B00                     __end_of_isGestureAvailable:	
  8264                           
  8265                           	psect	text22
  8266  0320                     __ptext22:	
  8267 ;; *************** function _decodeGesture *****************
  8268 ;; Defined at:
  8269 ;;		line 795 in file "APDS9960.c"
  8270 ;; Parameters:    Size  Location     Type
  8271 ;;		None
  8272 ;; Auto vars:     Size  Location     Type
  8273 ;;		None
  8274 ;; Return value:  Size  Location     Type
  8275 ;;                  1    wreg      _Bool 
  8276 ;; Registers used:
  8277 ;;		wreg, status,2, status,0
  8278 ;; Tracked objects:
  8279 ;;		On entry : 0/0
  8280 ;;		On exit  : 0/0
  8281 ;;		Unchanged: 0/0
  8282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8283 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8284 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8285 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8286 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8287 ;;Total ram usage:       18 bytes
  8288 ;; Hardware stack levels used:    1
  8289 ;; Hardware stack levels required when called:    5
  8290 ;; This function calls:
  8291 ;;		Nothing
  8292 ;; This function is called by:
  8293 ;;		_readGesture
  8294 ;; This function uses a non-reentrant model
  8295 ;;
  8296                           
  8297                           
  8298                           ;psect for function _decodeGesture
  8299  0320                     _decodeGesture:	
  8300                           
  8301                           ;APDS9960.c: 798:     if( gesture_state_ == NEAR_STATE ) {
  8302                           
  8303                           ;incstack = 0
  8304                           ; Regs used in _decodeGesture: [wreg+status,2+status,0]
  8305  0320  0020               	movlb	0	; select bank0
  8306  0321  035D               	decf	_gesture_state_,w
  8307  0322  045E               	iorwf	_gesture_state_+1,w
  8308  0323  1D03               	btfss	3,2
  8309  0324  2B2C               	goto	l5700
  8310                           
  8311                           ;APDS9960.c: 799:         gesture_motion_ = DIR_NEAR;
  8312  0325  3005               	movlw	5
  8313  0326  0022               	movlb	2	; select bank2
  8314  0327  00E0               	movwf	_gesture_motion_^(0+256)
  8315  0328  3000               	movlw	0
  8316  0329  00E1               	movwf	(_gesture_motion_^(0+256)+1)
  8317                           
  8318                           ;APDS9960.c: 800:         return 1;
  8319  032A  3001               	movlw	1
  8320  032B  0008               	return
  8321  032C                     l5700:	
  8322  032C  3002               	movlw	2
  8323  032D  065D               	xorwf	_gesture_state_,w
  8324  032E  045E               	iorwf	_gesture_state_+1,w
  8325  032F  1D03               	btfss	3,2
  8326  0330  2B38               	goto	l5706
  8327                           
  8328                           ;APDS9960.c: 802:         gesture_motion_ = DIR_FAR;
  8329  0331  3006               	movlw	6
  8330  0332  0022               	movlb	2	; select bank2
  8331  0333  00E0               	movwf	_gesture_motion_^(0+256)
  8332  0334  3000               	movlw	0
  8333  0335  00E1               	movwf	(_gesture_motion_^(0+256)+1)
  8334                           
  8335                           ;APDS9960.c: 803:         return 1;
  8336  0336  3001               	movlw	1
  8337  0337  0008               	return
  8338  0338                     l5706:	
  8339                           
  8340                           ;APDS9960.c: 807:     if( (gesture_ud_count_ == -1) && (gesture_lr_count_ == 0) ) {
  8341  0338  0A65               	incf	_gesture_ud_count_,w
  8342  0339  1D03               	skipz
  8343  033A  2B44               	goto	l5712
  8344  033B  0A66               	incf	_gesture_ud_count_+1,w
  8345  033C  1D03               	btfss	3,2
  8346  033D  2B44               	goto	l5712
  8347  033E  0863               	movf	_gesture_lr_count_,w
  8348  033F  0464               	iorwf	_gesture_lr_count_+1,w
  8349  0340  1D03               	btfss	3,2
  8350  0341  2B44               	goto	l5712
  8351  0342                     l5710:	
  8352                           
  8353                           ;APDS9960.c: 808:         gesture_motion_ = DIR_UP;
  8354  0342  3003               	movlw	3
  8355  0343  2B63               	goto	L7
  8356  0344                     l5712:	
  8357                           ;APDS9960.c: 809:     } else if( (gesture_ud_count_ == 1) && (gesture_lr_count_ == 0) ) 
      +                          {
  8358                           
  8359  0344  0365               	decf	_gesture_ud_count_,w
  8360  0345  0466               	iorwf	_gesture_ud_count_+1,w
  8361  0346  1D03               	btfss	3,2
  8362  0347  2B4E               	goto	l5718
  8363  0348  0863               	movf	_gesture_lr_count_,w
  8364  0349  0464               	iorwf	_gesture_lr_count_+1,w
  8365  034A  1D03               	btfss	3,2
  8366  034B  2B4E               	goto	l5718
  8367  034C                     l5716:	
  8368                           
  8369                           ;APDS9960.c: 810:         gesture_motion_ = DIR_DOWN;
  8370  034C  3004               	movlw	4
  8371  034D  2B63               	goto	L7
  8372  034E                     l5718:	
  8373                           ;APDS9960.c: 811:     } else if( (gesture_ud_count_ == 0) && (gesture_lr_count_ == 1) ) 
      +                          {
  8374                           
  8375  034E  0865               	movf	_gesture_ud_count_,w
  8376  034F  0466               	iorwf	_gesture_ud_count_+1,w
  8377  0350  1D03               	btfss	3,2
  8378  0351  2B58               	goto	l5724
  8379  0352  0363               	decf	_gesture_lr_count_,w
  8380  0353  0464               	iorwf	_gesture_lr_count_+1,w
  8381  0354  1D03               	btfss	3,2
  8382  0355  2B58               	goto	l5724
  8383  0356                     l5722:	
  8384                           
  8385                           ;APDS9960.c: 812:         gesture_motion_ = DIR_RIGHT;
  8386  0356  3002               	movlw	2
  8387  0357  2B63               	goto	L7
  8388  0358                     l5724:	
  8389                           ;APDS9960.c: 813:     } else if( (gesture_ud_count_ == 0) && (gesture_lr_count_ == -1) )
      +                           {
  8390                           
  8391  0358  0865               	movf	_gesture_ud_count_,w
  8392  0359  0466               	iorwf	_gesture_ud_count_+1,w
  8393  035A  1D03               	btfss	3,2
  8394  035B  2B68               	goto	l5730
  8395  035C  0A63               	incf	_gesture_lr_count_,w
  8396  035D  1D03               	skipz
  8397  035E  2B68               	goto	l5730
  8398  035F  0A64               	incf	_gesture_lr_count_+1,w
  8399  0360  1D03               	btfss	3,2
  8400  0361  2B68               	goto	l5730
  8401  0362                     l5728:	
  8402                           
  8403                           ;APDS9960.c: 814:         gesture_motion_ = DIR_LEFT;
  8404  0362  3001               	movlw	1
  8405  0363                     L7:	
  8406  0363  0022               	movlb	2	; select bank2
  8407  0364  00E0               	movwf	_gesture_motion_^(0+256)
  8408  0365  3000               	movlw	0
  8409  0366  00E1               	movwf	(_gesture_motion_^(0+256)+1)
  8410                           
  8411                           ;APDS9960.c: 815:     } else if( (gesture_ud_count_ == -1) && (gesture_lr_count_ == 1) )
      +                           {
  8412  0367  2CAE               	goto	l5806
  8413  0368                     l5730:	
  8414  0368  0A65               	incf	_gesture_ud_count_,w
  8415  0369  1D03               	skipz
  8416  036A  2BB9               	goto	l5748
  8417  036B  0A66               	incf	_gesture_ud_count_+1,w
  8418  036C  1D03               	btfss	3,2
  8419  036D  2BB9               	goto	l5748
  8420  036E  0363               	decf	_gesture_lr_count_,w
  8421  036F  0464               	iorwf	_gesture_lr_count_+1,w
  8422  0370  1D03               	btfss	3,2
  8423  0371  2BB9               	goto	l5748
  8424                           
  8425                           ;APDS9960.c: 816:         if( ((gesture_ud_delta_) > 0 ? (gesture_ud_delta_) : -(gesture
      +                          _ud_delta_)) > ((gesture_lr_delta_) > 0 ? (gesture_lr_delta_) : -(gesture_lr_delta_)) ) 
      +                          {
  8426  0372  086A               	movf	_gesture_ud_delta_+1,w
  8427  0373  3A80               	xorlw	128
  8428  0374  00A0               	movwf	??_decodeGesture
  8429  0375  3080               	movlw	128
  8430  0376  0220               	subwf	??_decodeGesture,w
  8431  0377  1D03               	skipz
  8432  0378  2B7B               	goto	u4895
  8433  0379  3001               	movlw	1
  8434  037A  0269               	subwf	_gesture_ud_delta_,w
  8435  037B                     u4895:	
  8436  037B  1803               	skipnc
  8437  037C  2B8A               	goto	l5738
  8438  037D  0020               	movlb	0	; select bank0
  8439  037E  0969               	comf	_gesture_ud_delta_,w
  8440  037F  00A0               	movwf	??_decodeGesture
  8441  0380  096A               	comf	_gesture_ud_delta_+1,w
  8442  0381  00A1               	movwf	??_decodeGesture+1
  8443  0382  0AA0               	incf	??_decodeGesture,f
  8444  0383  1903               	skipnz
  8445  0384  0AA1               	incf	??_decodeGesture+1,f
  8446  0385  0820               	movf	??_decodeGesture,w
  8447  0386  00A2               	movwf	_decodeGesture$1187
  8448  0387  0821               	movf	??_decodeGesture+1,w
  8449  0388  00A3               	movwf	_decodeGesture$1187+1
  8450  0389  2B8F               	goto	l928
  8451  038A                     l5738:	
  8452  038A  0020               	movlb	0	; select bank0
  8453  038B  086A               	movf	_gesture_ud_delta_+1,w
  8454  038C  00A3               	movwf	_decodeGesture$1187+1
  8455  038D  0869               	movf	_gesture_ud_delta_,w
  8456  038E  00A2               	movwf	_decodeGesture$1187
  8457  038F                     l928:	
  8458  038F  0868               	movf	_gesture_lr_delta_+1,w
  8459  0390  3A80               	xorlw	128
  8460  0391  00A0               	movwf	??_decodeGesture
  8461  0392  3080               	movlw	128
  8462  0393  0220               	subwf	??_decodeGesture,w
  8463  0394  1D03               	skipz
  8464  0395  2B98               	goto	u4905
  8465  0396  3001               	movlw	1
  8466  0397  0267               	subwf	_gesture_lr_delta_,w
  8467  0398                     u4905:	
  8468  0398  1803               	skipnc
  8469  0399  2BA7               	goto	l5742
  8470  039A  0020               	movlb	0	; select bank0
  8471  039B  0967               	comf	_gesture_lr_delta_,w
  8472  039C  00A0               	movwf	??_decodeGesture
  8473  039D  0968               	comf	_gesture_lr_delta_+1,w
  8474  039E  00A1               	movwf	??_decodeGesture+1
  8475  039F  0AA0               	incf	??_decodeGesture,f
  8476  03A0  1903               	skipnz
  8477  03A1  0AA1               	incf	??_decodeGesture+1,f
  8478  03A2  0820               	movf	??_decodeGesture,w
  8479  03A3  00A4               	movwf	_decodeGesture$1188
  8480  03A4  0821               	movf	??_decodeGesture+1,w
  8481  03A5  00A5               	movwf	_decodeGesture$1188+1
  8482  03A6  2BAC               	goto	l932
  8483  03A7                     l5742:	
  8484  03A7  0020               	movlb	0	; select bank0
  8485  03A8  0868               	movf	_gesture_lr_delta_+1,w
  8486  03A9  00A5               	movwf	_decodeGesture$1188+1
  8487  03AA  0867               	movf	_gesture_lr_delta_,w
  8488  03AB  00A4               	movwf	_decodeGesture$1188
  8489  03AC                     l932:	
  8490  03AC  0825               	movf	_decodeGesture$1188+1,w
  8491  03AD  3A80               	xorlw	128
  8492  03AE  00A0               	movwf	??_decodeGesture
  8493  03AF  0823               	movf	_decodeGesture$1187+1,w
  8494  03B0  3A80               	xorlw	128
  8495  03B1  0220               	subwf	??_decodeGesture,w
  8496  03B2  1D03               	skipz
  8497  03B3  2BB6               	goto	u4915
  8498  03B4  0822               	movf	_decodeGesture$1187,w
  8499  03B5  0224               	subwf	_decodeGesture$1188,w
  8500  03B6                     u4915:	
  8501  03B6  1C03               	btfss	3,0
  8502  03B7  2B42               	goto	l5710
  8503  03B8  2B56               	goto	l5722
  8504  03B9                     l5748:	
  8505  03B9  0365               	decf	_gesture_ud_count_,w
  8506  03BA  0466               	iorwf	_gesture_ud_count_+1,w
  8507  03BB  1D03               	btfss	3,2
  8508  03BC  2C0A               	goto	l5766
  8509  03BD  0A63               	incf	_gesture_lr_count_,w
  8510  03BE  1D03               	skipz
  8511  03BF  2C0A               	goto	l5766
  8512  03C0  0A64               	incf	_gesture_lr_count_+1,w
  8513  03C1  1D03               	btfss	3,2
  8514  03C2  2C0A               	goto	l5766
  8515                           
  8516                           ;APDS9960.c: 822:         if( ((gesture_ud_delta_) > 0 ? (gesture_ud_delta_) : -(gesture
      +                          _ud_delta_)) > ((gesture_lr_delta_) > 0 ? (gesture_lr_delta_) : -(gesture_lr_delta_)) ) 
      +                          {
  8517  03C3  086A               	movf	_gesture_ud_delta_+1,w
  8518  03C4  3A80               	xorlw	128
  8519  03C5  00A0               	movwf	??_decodeGesture
  8520  03C6  3080               	movlw	128
  8521  03C7  0220               	subwf	??_decodeGesture,w
  8522  03C8  1D03               	skipz
  8523  03C9  2BCC               	goto	u4945
  8524  03CA  3001               	movlw	1
  8525  03CB  0269               	subwf	_gesture_ud_delta_,w
  8526  03CC                     u4945:	
  8527  03CC  1803               	skipnc
  8528  03CD  2BDB               	goto	l5756
  8529  03CE  0020               	movlb	0	; select bank0
  8530  03CF  0969               	comf	_gesture_ud_delta_,w
  8531  03D0  00A0               	movwf	??_decodeGesture
  8532  03D1  096A               	comf	_gesture_ud_delta_+1,w
  8533  03D2  00A1               	movwf	??_decodeGesture+1
  8534  03D3  0AA0               	incf	??_decodeGesture,f
  8535  03D4  1903               	skipnz
  8536  03D5  0AA1               	incf	??_decodeGesture+1,f
  8537  03D6  0820               	movf	??_decodeGesture,w
  8538  03D7  00A6               	movwf	_decodeGesture$1189
  8539  03D8  0821               	movf	??_decodeGesture+1,w
  8540  03D9  00A7               	movwf	_decodeGesture$1189+1
  8541  03DA  2BE0               	goto	l940
  8542  03DB                     l5756:	
  8543  03DB  0020               	movlb	0	; select bank0
  8544  03DC  086A               	movf	_gesture_ud_delta_+1,w
  8545  03DD  00A7               	movwf	_decodeGesture$1189+1
  8546  03DE  0869               	movf	_gesture_ud_delta_,w
  8547  03DF  00A6               	movwf	_decodeGesture$1189
  8548  03E0                     l940:	
  8549  03E0  0868               	movf	_gesture_lr_delta_+1,w
  8550  03E1  3A80               	xorlw	128
  8551  03E2  00A0               	movwf	??_decodeGesture
  8552  03E3  3080               	movlw	128
  8553  03E4  0220               	subwf	??_decodeGesture,w
  8554  03E5  1D03               	skipz
  8555  03E6  2BE9               	goto	u4955
  8556  03E7  3001               	movlw	1
  8557  03E8  0267               	subwf	_gesture_lr_delta_,w
  8558  03E9                     u4955:	
  8559  03E9  1803               	skipnc
  8560  03EA  2BF8               	goto	l5760
  8561  03EB  0020               	movlb	0	; select bank0
  8562  03EC  0967               	comf	_gesture_lr_delta_,w
  8563  03ED  00A0               	movwf	??_decodeGesture
  8564  03EE  0968               	comf	_gesture_lr_delta_+1,w
  8565  03EF  00A1               	movwf	??_decodeGesture+1
  8566  03F0  0AA0               	incf	??_decodeGesture,f
  8567  03F1  1903               	skipnz
  8568  03F2  0AA1               	incf	??_decodeGesture+1,f
  8569  03F3  0820               	movf	??_decodeGesture,w
  8570  03F4  00A8               	movwf	_decodeGesture$1190
  8571  03F5  0821               	movf	??_decodeGesture+1,w
  8572  03F6  00A9               	movwf	_decodeGesture$1190+1
  8573  03F7  2BFD               	goto	l944
  8574  03F8                     l5760:	
  8575  03F8  0020               	movlb	0	; select bank0
  8576  03F9  0868               	movf	_gesture_lr_delta_+1,w
  8577  03FA  00A9               	movwf	_decodeGesture$1190+1
  8578  03FB  0867               	movf	_gesture_lr_delta_,w
  8579  03FC  00A8               	movwf	_decodeGesture$1190
  8580  03FD                     l944:	
  8581  03FD  0829               	movf	_decodeGesture$1190+1,w
  8582  03FE  3A80               	xorlw	128
  8583  03FF  00A0               	movwf	??_decodeGesture
  8584  0400  0827               	movf	_decodeGesture$1189+1,w
  8585  0401  3A80               	xorlw	128
  8586  0402  0220               	subwf	??_decodeGesture,w
  8587  0403  1D03               	skipz
  8588  0404  2C07               	goto	u4965
  8589  0405  0826               	movf	_decodeGesture$1189,w
  8590  0406  0228               	subwf	_decodeGesture$1190,w
  8591  0407                     u4965:	
  8592  0407  1C03               	btfss	3,0
  8593  0408  2B4C               	goto	l5716
  8594  0409  2B62               	goto	l5728
  8595  040A                     l5766:	
  8596  040A  0A65               	incf	_gesture_ud_count_,w
  8597  040B  1D03               	skipz
  8598  040C  2C5D               	goto	l5784
  8599  040D  0A66               	incf	_gesture_ud_count_+1,w
  8600  040E  1D03               	btfss	3,2
  8601  040F  2C5D               	goto	l5784
  8602  0410  0A63               	incf	_gesture_lr_count_,w
  8603  0411  1D03               	skipz
  8604  0412  2C5D               	goto	l5784
  8605  0413  0A64               	incf	_gesture_lr_count_+1,w
  8606  0414  1D03               	btfss	3,2
  8607  0415  2C5D               	goto	l5784
  8608                           
  8609                           ;APDS9960.c: 828:         if( ((gesture_ud_delta_) > 0 ? (gesture_ud_delta_) : -(gesture
      +                          _ud_delta_)) > ((gesture_lr_delta_) > 0 ? (gesture_lr_delta_) : -(gesture_lr_delta_)) ) 
      +                          {
  8610  0416  086A               	movf	_gesture_ud_delta_+1,w
  8611  0417  3A80               	xorlw	128
  8612  0418  00A0               	movwf	??_decodeGesture
  8613  0419  3080               	movlw	128
  8614  041A  0220               	subwf	??_decodeGesture,w
  8615  041B  1D03               	skipz
  8616  041C  2C1F               	goto	u4995
  8617  041D  3001               	movlw	1
  8618  041E  0269               	subwf	_gesture_ud_delta_,w
  8619  041F                     u4995:	
  8620  041F  1803               	skipnc
  8621  0420  2C2E               	goto	l5774
  8622  0421  0020               	movlb	0	; select bank0
  8623  0422  0969               	comf	_gesture_ud_delta_,w
  8624  0423  00A0               	movwf	??_decodeGesture
  8625  0424  096A               	comf	_gesture_ud_delta_+1,w
  8626  0425  00A1               	movwf	??_decodeGesture+1
  8627  0426  0AA0               	incf	??_decodeGesture,f
  8628  0427  1903               	skipnz
  8629  0428  0AA1               	incf	??_decodeGesture+1,f
  8630  0429  0820               	movf	??_decodeGesture,w
  8631  042A  00AA               	movwf	_decodeGesture$1191
  8632  042B  0821               	movf	??_decodeGesture+1,w
  8633  042C  00AB               	movwf	_decodeGesture$1191+1
  8634  042D  2C33               	goto	l952
  8635  042E                     l5774:	
  8636  042E  0020               	movlb	0	; select bank0
  8637  042F  086A               	movf	_gesture_ud_delta_+1,w
  8638  0430  00AB               	movwf	_decodeGesture$1191+1
  8639  0431  0869               	movf	_gesture_ud_delta_,w
  8640  0432  00AA               	movwf	_decodeGesture$1191
  8641  0433                     l952:	
  8642  0433  0868               	movf	_gesture_lr_delta_+1,w
  8643  0434  3A80               	xorlw	128
  8644  0435  00A0               	movwf	??_decodeGesture
  8645  0436  3080               	movlw	128
  8646  0437  0220               	subwf	??_decodeGesture,w
  8647  0438  1D03               	skipz
  8648  0439  2C3C               	goto	u5005
  8649  043A  3001               	movlw	1
  8650  043B  0267               	subwf	_gesture_lr_delta_,w
  8651  043C                     u5005:	
  8652  043C  1803               	skipnc
  8653  043D  2C4B               	goto	l5778
  8654  043E  0020               	movlb	0	; select bank0
  8655  043F  0967               	comf	_gesture_lr_delta_,w
  8656  0440  00A0               	movwf	??_decodeGesture
  8657  0441  0968               	comf	_gesture_lr_delta_+1,w
  8658  0442  00A1               	movwf	??_decodeGesture+1
  8659  0443  0AA0               	incf	??_decodeGesture,f
  8660  0444  1903               	skipnz
  8661  0445  0AA1               	incf	??_decodeGesture+1,f
  8662  0446  0820               	movf	??_decodeGesture,w
  8663  0447  00AC               	movwf	_decodeGesture$1192
  8664  0448  0821               	movf	??_decodeGesture+1,w
  8665  0449  00AD               	movwf	_decodeGesture$1192+1
  8666  044A  2C50               	goto	l956
  8667  044B                     l5778:	
  8668  044B  0020               	movlb	0	; select bank0
  8669  044C  0868               	movf	_gesture_lr_delta_+1,w
  8670  044D  00AD               	movwf	_decodeGesture$1192+1
  8671  044E  0867               	movf	_gesture_lr_delta_,w
  8672  044F  00AC               	movwf	_decodeGesture$1192
  8673  0450                     l956:	
  8674  0450  082D               	movf	_decodeGesture$1192+1,w
  8675  0451  3A80               	xorlw	128
  8676  0452  00A0               	movwf	??_decodeGesture
  8677  0453  082B               	movf	_decodeGesture$1191+1,w
  8678  0454  3A80               	xorlw	128
  8679  0455  0220               	subwf	??_decodeGesture,w
  8680  0456  1D03               	skipz
  8681  0457  2C5A               	goto	u5015
  8682  0458  082A               	movf	_decodeGesture$1191,w
  8683  0459  022C               	subwf	_decodeGesture$1192,w
  8684  045A                     u5015:	
  8685  045A  1C03               	btfss	3,0
  8686  045B  2B42               	goto	l5710
  8687  045C  2B62               	goto	l5728
  8688  045D                     l5784:	
  8689  045D  0365               	decf	_gesture_ud_count_,w
  8690  045E  0466               	iorwf	_gesture_ud_count_+1,w
  8691  045F  1D03               	btfss	3,2
  8692  0460  2CAC               	goto	l5802
  8693  0461  0363               	decf	_gesture_lr_count_,w
  8694  0462  0464               	iorwf	_gesture_lr_count_+1,w
  8695  0463  1D03               	btfss	3,2
  8696  0464  2CAC               	goto	l5802
  8697                           
  8698                           ;APDS9960.c: 834:         if( ((gesture_ud_delta_) > 0 ? (gesture_ud_delta_) : -(gesture
      +                          _ud_delta_)) > ((gesture_lr_delta_) > 0 ? (gesture_lr_delta_) : -(gesture_lr_delta_)) ) 
      +                          {
  8699  0465  086A               	movf	_gesture_ud_delta_+1,w
  8700  0466  3A80               	xorlw	128
  8701  0467  00A0               	movwf	??_decodeGesture
  8702  0468  3080               	movlw	128
  8703  0469  0220               	subwf	??_decodeGesture,w
  8704  046A  1D03               	skipz
  8705  046B  2C6E               	goto	u5045
  8706  046C  3001               	movlw	1
  8707  046D  0269               	subwf	_gesture_ud_delta_,w
  8708  046E                     u5045:	
  8709  046E  1803               	skipnc
  8710  046F  2C7D               	goto	l5792
  8711  0470  0020               	movlb	0	; select bank0
  8712  0471  0969               	comf	_gesture_ud_delta_,w
  8713  0472  00A0               	movwf	??_decodeGesture
  8714  0473  096A               	comf	_gesture_ud_delta_+1,w
  8715  0474  00A1               	movwf	??_decodeGesture+1
  8716  0475  0AA0               	incf	??_decodeGesture,f
  8717  0476  1903               	skipnz
  8718  0477  0AA1               	incf	??_decodeGesture+1,f
  8719  0478  0820               	movf	??_decodeGesture,w
  8720  0479  00AE               	movwf	_decodeGesture$1193
  8721  047A  0821               	movf	??_decodeGesture+1,w
  8722  047B  00AF               	movwf	_decodeGesture$1193+1
  8723  047C  2C82               	goto	l964
  8724  047D                     l5792:	
  8725  047D  0020               	movlb	0	; select bank0
  8726  047E  086A               	movf	_gesture_ud_delta_+1,w
  8727  047F  00AF               	movwf	_decodeGesture$1193+1
  8728  0480  0869               	movf	_gesture_ud_delta_,w
  8729  0481  00AE               	movwf	_decodeGesture$1193
  8730  0482                     l964:	
  8731  0482  0868               	movf	_gesture_lr_delta_+1,w
  8732  0483  3A80               	xorlw	128
  8733  0484  00A0               	movwf	??_decodeGesture
  8734  0485  3080               	movlw	128
  8735  0486  0220               	subwf	??_decodeGesture,w
  8736  0487  1D03               	skipz
  8737  0488  2C8B               	goto	u5055
  8738  0489  3001               	movlw	1
  8739  048A  0267               	subwf	_gesture_lr_delta_,w
  8740  048B                     u5055:	
  8741  048B  1803               	skipnc
  8742  048C  2C9A               	goto	l5796
  8743  048D  0020               	movlb	0	; select bank0
  8744  048E  0967               	comf	_gesture_lr_delta_,w
  8745  048F  00A0               	movwf	??_decodeGesture
  8746  0490  0968               	comf	_gesture_lr_delta_+1,w
  8747  0491  00A1               	movwf	??_decodeGesture+1
  8748  0492  0AA0               	incf	??_decodeGesture,f
  8749  0493  1903               	skipnz
  8750  0494  0AA1               	incf	??_decodeGesture+1,f
  8751  0495  0820               	movf	??_decodeGesture,w
  8752  0496  00B0               	movwf	_decodeGesture$1194
  8753  0497  0821               	movf	??_decodeGesture+1,w
  8754  0498  00B1               	movwf	_decodeGesture$1194+1
  8755  0499  2C9F               	goto	l968
  8756  049A                     l5796:	
  8757  049A  0020               	movlb	0	; select bank0
  8758  049B  0868               	movf	_gesture_lr_delta_+1,w
  8759  049C  00B1               	movwf	_decodeGesture$1194+1
  8760  049D  0867               	movf	_gesture_lr_delta_,w
  8761  049E  00B0               	movwf	_decodeGesture$1194
  8762  049F                     l968:	
  8763  049F  0831               	movf	_decodeGesture$1194+1,w
  8764  04A0  3A80               	xorlw	128
  8765  04A1  00A0               	movwf	??_decodeGesture
  8766  04A2  082F               	movf	_decodeGesture$1193+1,w
  8767  04A3  3A80               	xorlw	128
  8768  04A4  0220               	subwf	??_decodeGesture,w
  8769  04A5  1D03               	skipz
  8770  04A6  2CA9               	goto	u5065
  8771  04A7  082E               	movf	_decodeGesture$1193,w
  8772  04A8  0230               	subwf	_decodeGesture$1194,w
  8773  04A9                     u5065:	
  8774  04A9  1C03               	btfss	3,0
  8775  04AA  2B4C               	goto	l5716
  8776  04AB  2B56               	goto	l5722
  8777  04AC                     l5802:	
  8778                           
  8779                           ;APDS9960.c: 840:         return 0;
  8780  04AC  3000               	movlw	0
  8781  04AD  0008               	return
  8782  04AE                     l5806:	
  8783                           
  8784                           ;APDS9960.c: 843:     return 1;
  8785  04AE  3001               	movlw	1
  8786  04AF  0008               	return
  8787  04B0                     __end_of_decodeGesture:	
  8788                           
  8789                           	psect	text23
  8790  0EB5                     __ptext23:	
  8791 ;; *************** function _Send_Names *****************
  8792 ;; Defined at:
  8793 ;;		line 172 in file "main.c"
  8794 ;; Parameters:    Size  Location     Type
  8795 ;;		None
  8796 ;; Auto vars:     Size  Location     Type
  8797 ;;		None
  8798 ;; Return value:  Size  Location     Type
  8799 ;;                  1    wreg      void 
  8800 ;; Registers used:
  8801 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8802 ;; Tracked objects:
  8803 ;;		On entry : 0/0
  8804 ;;		On exit  : 0/0
  8805 ;;		Unchanged: 0/0
  8806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8807 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8808 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8809 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8810 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8811 ;;Total ram usage:        2 bytes
  8812 ;; Hardware stack levels used:    1
  8813 ;; Hardware stack levels required when called:    8
  8814 ;; This function calls:
  8815 ;;		_Display_Name
  8816 ;; This function is called by:
  8817 ;;		_handleGesture
  8818 ;; This function uses a non-reentrant model
  8819 ;;
  8820                           
  8821                           
  8822                           ;psect for function _Send_Names
  8823  0EB5                     _Send_Names:	
  8824                           
  8825                           ;main.c: 173:     switch(name) {
  8826                           
  8827                           ;incstack = 0
  8828                           ; Regs used in _Send_Names: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8829  0EB5  2ED2               	goto	l5900
  8830  0EB6                     l5890:	
  8831  0EB6  303D               	movlw	low (STR_2| (0+32768))
  8832  0EB7  00A5               	movwf	Display_Name@string1
  8833  0EB8  3090               	movlw	high (STR_2| (0+32768))
  8834  0EB9  00A6               	movwf	Display_Name@string1+1
  8835  0EBA  318E  2682         	fcall	_Display_Name
  8836  0EBC  0008               	return
  8837  0EBD                     l5892:	
  8838  0EBD  3030               	movlw	low (STR_3| (0+32768))
  8839  0EBE  00A5               	movwf	Display_Name@string1
  8840  0EBF  3090               	movlw	high (STR_3| (0+32768))
  8841  0EC0  00A6               	movwf	Display_Name@string1+1
  8842  0EC1  318E  2682         	fcall	_Display_Name
  8843  0EC3  0008               	return
  8844  0EC4                     l5894:	
  8845  0EC4  3020               	movlw	low (STR_4| (0+32768))
  8846  0EC5  00A5               	movwf	Display_Name@string1
  8847  0EC6  3090               	movlw	high (STR_4| (0+32768))
  8848  0EC7  00A6               	movwf	Display_Name@string1+1
  8849  0EC8  318E  2682         	fcall	_Display_Name
  8850  0ECA  0008               	return
  8851  0ECB                     l5896:	
  8852  0ECB  3049               	movlw	low (STR_5| (0+32768))
  8853  0ECC  00A5               	movwf	Display_Name@string1
  8854  0ECD  3090               	movlw	high (STR_5| (0+32768))
  8855  0ECE  00A6               	movwf	Display_Name@string1+1
  8856  0ECF  318E  2682         	fcall	_Display_Name
  8857  0ED1  0008               	return
  8858  0ED2                     l5900:	
  8859  0ED2  0020               	movlb	0	; select bank0
  8860  0ED3  086E               	movf	_name,w
  8861  0ED4  00AC               	movwf	??_Send_Names
  8862  0ED5  01AD               	clrf	??_Send_Names+1
  8863                           
  8864                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8865                           ; Switch size 1, requested type "simple"
  8866                           ; Number of cases is 1, Range of values is 0 to 0
  8867                           ; switch strategies available:
  8868                           ; Name         Instructions Cycles
  8869                           ; simple_byte            4     3 (average)
  8870                           ; direct_byte            8     6 (fixed)
  8871                           ; jumptable            260     6 (fixed)
  8872                           ;	Chosen strategy is simple_byte
  8873  0ED6  082D               	movf	??_Send_Names+1,w
  8874  0ED7  3A00               	xorlw	0	; case 0
  8875  0ED8  1903               	skipnz
  8876  0ED9  2EDB               	goto	l6720
  8877  0EDA  2EE9               	goto	l616
  8878  0EDB                     l6720:	
  8879                           
  8880                           ; Switch size 1, requested type "simple"
  8881                           ; Number of cases is 4, Range of values is 1 to 4
  8882                           ; switch strategies available:
  8883                           ; Name         Instructions Cycles
  8884                           ; simple_byte           13     7 (average)
  8885                           ; direct_byte           17     9 (fixed)
  8886                           ; jumptable            263     9 (fixed)
  8887                           ;	Chosen strategy is simple_byte
  8888  0EDB  082C               	movf	??_Send_Names,w
  8889  0EDC  3A01               	xorlw	1	; case 1
  8890  0EDD  1903               	skipnz
  8891  0EDE  2EB6               	goto	l5890
  8892  0EDF  3A03               	xorlw	3	; case 2
  8893  0EE0  1903               	skipnz
  8894  0EE1  2EBD               	goto	l5892
  8895  0EE2  3A01               	xorlw	1	; case 3
  8896  0EE3  1903               	skipnz
  8897  0EE4  2EC4               	goto	l5894
  8898  0EE5  3A07               	xorlw	7	; case 4
  8899  0EE6  1903               	skipnz
  8900  0EE7  2ECB               	goto	l5896
  8901  0EE8  2EE9               	goto	l616
  8902  0EE9                     l616:	
  8903  0EE9  0008               	return
  8904  0EEA                     __end_of_Send_Names:	
  8905                           
  8906                           	psect	text24
  8907  0E82                     __ptext24:	
  8908 ;; *************** function _Display_Name *****************
  8909 ;; Defined at:
  8910 ;;		line 160 in file "main.c"
  8911 ;; Parameters:    Size  Location     Type
  8912 ;;  string1         2    5[BANK0 ] PTR unsigned char 
  8913 ;;		 -> STR_5(11), STR_4(16), STR_3(13), STR_2(12), 
  8914 ;;		 -> STR_1(7), 
  8915 ;; Auto vars:     Size  Location     Type
  8916 ;;  i               2   10[BANK0 ] int 
  8917 ;;  length          2    8[BANK0 ] int 
  8918 ;; Return value:  Size  Location     Type
  8919 ;;                  1    wreg      void 
  8920 ;; Registers used:
  8921 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8922 ;; Tracked objects:
  8923 ;;		On entry : 0/0
  8924 ;;		On exit  : 0/0
  8925 ;;		Unchanged: 0/0
  8926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8927 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8928 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8929 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8930 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8931 ;;Total ram usage:        7 bytes
  8932 ;; Hardware stack levels used:    1
  8933 ;; Hardware stack levels required when called:    7
  8934 ;; This function calls:
  8935 ;;		_SPI_Write
  8936 ;;		_strlen
  8937 ;; This function is called by:
  8938 ;;		_main
  8939 ;;		_Send_Names
  8940 ;; This function uses a non-reentrant model
  8941 ;;
  8942                           
  8943                           
  8944                           ;psect for function _Display_Name
  8945  0E82                     _Display_Name:	
  8946                           
  8947                           ;main.c: 161:     int length;;main.c: 162:     int i;;main.c: 163:     if(printed == 0) 
      +                          {
  8948                           
  8949                           ;incstack = 0
  8950                           ; Regs used in _Display_Name: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8951  0E82  0020               	movlb	0	; select bank0
  8952  0E83  086D               	movf	_printed,w
  8953  0E84  1D03               	btfss	3,2
  8954  0E85  2EB1               	goto	l603
  8955                           
  8956                           ;main.c: 164:         length = strlen(string1);
  8957  0E86  0826               	movf	Display_Name@string1+1,w
  8958  0E87  00A1               	movwf	strlen@s+1
  8959  0E88  0825               	movf	Display_Name@string1,w
  8960  0E89  00A0               	movwf	strlen@s
  8961  0E8A  318B  2377  318E   	fcall	_strlen
  8962  0E8D  0020               	movlb	0	; select bank0
  8963  0E8E  0821               	movf	?_strlen+1,w
  8964  0E8F  00A9               	movwf	Display_Name@length+1
  8965  0E90  0820               	movf	?_strlen,w
  8966  0E91  00A8               	movwf	Display_Name@length
  8967                           
  8968                           ;main.c: 165:         for(i = 0; i < length; i++){
  8969  0E92  01AA               	clrf	Display_Name@i
  8970  0E93  01AB               	clrf	Display_Name@i+1
  8971  0E94                     l5452:	
  8972  0E94  082B               	movf	Display_Name@i+1,w
  8973  0E95  3A80               	xorlw	128
  8974  0E96  00A7               	movwf	??_Display_Name
  8975  0E97  0829               	movf	Display_Name@length+1,w
  8976  0E98  3A80               	xorlw	128
  8977  0E99  0227               	subwf	??_Display_Name,w
  8978  0E9A  1D03               	skipz
  8979  0E9B  2E9E               	goto	u4225
  8980  0E9C  0828               	movf	Display_Name@length,w
  8981  0E9D  022A               	subwf	Display_Name@i,w
  8982  0E9E                     u4225:	
  8983  0E9E  1803               	btfsc	3,0
  8984  0E9F  2EB1               	goto	l603
  8985                           
  8986                           ;main.c: 166:             SPI_Write(string1[i]);
  8987  0EA0  0020               	movlb	0	; select bank0
  8988  0EA1  0825               	movf	Display_Name@string1,w
  8989  0EA2  072A               	addwf	Display_Name@i,w
  8990  0EA3  0084               	movwf	4
  8991  0EA4  0826               	movf	Display_Name@string1+1,w
  8992  0EA5  3D2B               	addwfc	Display_Name@i+1,w
  8993  0EA6  0085               	movwf	5
  8994  0EA7  0800               	movf	0,w	;code access
  8995  0EA8  318B  234C  318E   	fcall	_SPI_Write
  8996                           
  8997                           ;main.c: 167:         }
  8998  0EAB  3001               	movlw	1
  8999  0EAC  0020               	movlb	0	; select bank0
  9000  0EAD  07AA               	addwf	Display_Name@i,f
  9001  0EAE  3000               	movlw	0
  9002  0EAF  3DAB               	addwfc	Display_Name@i+1,f
  9003  0EB0  2E94               	goto	l5452
  9004  0EB1                     l603:	
  9005                           ;main.c: 168:     }
  9006                           
  9007                           
  9008                           ;main.c: 169:     printed = 1;
  9009  0EB1  0020               	movlb	0	; select bank0
  9010  0EB2  01ED               	clrf	_printed
  9011  0EB3  0AED               	incf	_printed,f
  9012  0EB4  0008               	return
  9013  0EB5                     __end_of_Display_Name:	
  9014                           
  9015                           	psect	text25
  9016  0B77                     __ptext25:	
  9017 ;; *************** function _strlen *****************
  9018 ;; Defined at:
  9019 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
  9020 ;; Parameters:    Size  Location     Type
  9021 ;;  s               2    0[BANK0 ] PTR const unsigned char 
  9022 ;;		 -> STR_5(11), STR_4(16), STR_3(13), STR_2(12), 
  9023 ;;		 -> STR_1(7), 
  9024 ;; Auto vars:     Size  Location     Type
  9025 ;;  a               2    3[BANK0 ] PTR const unsigned char 
  9026 ;;		 -> STR_5(11), STR_4(16), STR_3(13), STR_2(12), 
  9027 ;;		 -> STR_1(7), 
  9028 ;; Return value:  Size  Location     Type
  9029 ;;                  2    0[BANK0 ] unsigned int 
  9030 ;; Registers used:
  9031 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9032 ;; Tracked objects:
  9033 ;;		On entry : 0/0
  9034 ;;		On exit  : 0/0
  9035 ;;		Unchanged: 0/0
  9036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9037 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9038 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9039 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9040 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9041 ;;Total ram usage:        5 bytes
  9042 ;; Hardware stack levels used:    1
  9043 ;; Hardware stack levels required when called:    5
  9044 ;; This function calls:
  9045 ;;		Nothing
  9046 ;; This function is called by:
  9047 ;;		_Display_Name
  9048 ;; This function uses a non-reentrant model
  9049 ;;
  9050                           
  9051                           
  9052                           ;psect for function _strlen
  9053  0B77                     _strlen:	
  9054                           
  9055                           ;incstack = 0
  9056                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0]
  9057  0B77  0020               	movlb	0	; select bank0
  9058  0B78  0821               	movf	strlen@s+1,w
  9059  0B79  00A4               	movwf	strlen@a+1
  9060  0B7A  0820               	movf	strlen@s,w
  9061  0B7B  00A3               	movwf	strlen@a
  9062  0B7C                     l5358:	
  9063  0B7C  0820               	movf	strlen@s,w
  9064  0B7D  0084               	movwf	4
  9065  0B7E  0821               	movf	strlen@s+1,w
  9066  0B7F  0085               	movwf	5
  9067  0B80  0012               	moviw fsr0++
  9068  0B81  1903               	btfsc	3,2
  9069  0B82  2B88               	goto	l5360
  9070  0B83  3001               	movlw	1
  9071  0B84  07A0               	addwf	strlen@s,f
  9072  0B85  3000               	movlw	0
  9073  0B86  3DA1               	addwfc	strlen@s+1,f
  9074  0B87  2B7C               	goto	l5358
  9075  0B88                     l5360:	
  9076  0B88  0823               	movf	strlen@a,w
  9077  0B89  0220               	subwf	strlen@s,w
  9078  0B8A  00A0               	movwf	?_strlen
  9079  0B8B  0824               	movf	strlen@a+1,w
  9080  0B8C  3B21               	subwfb	strlen@s+1,w
  9081  0B8D  00A1               	movwf	?_strlen+1
  9082  0B8E  0008               	return
  9083  0B8F                     __end_of_strlen:	
  9084                           
  9085                           	psect	text26
  9086  0ADC                     __ptext26:	
  9087 ;; *************** function _Display_Clear *****************
  9088 ;; Defined at:
  9089 ;;		line 181 in file "main.c"
  9090 ;; Parameters:    Size  Location     Type
  9091 ;;		None
  9092 ;; Auto vars:     Size  Location     Type
  9093 ;;		None
  9094 ;; Return value:  Size  Location     Type
  9095 ;;                  1    wreg      void 
  9096 ;; Registers used:
  9097 ;;		wreg, status,2, status,0, pclath, cstack
  9098 ;; Tracked objects:
  9099 ;;		On entry : 0/0
  9100 ;;		On exit  : 0/0
  9101 ;;		Unchanged: 0/0
  9102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9103 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9104 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9105 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9106 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9107 ;;Total ram usage:        1 bytes
  9108 ;; Hardware stack levels used:    1
  9109 ;; Hardware stack levels required when called:    7
  9110 ;; This function calls:
  9111 ;;		_SPI_Write
  9112 ;; This function is called by:
  9113 ;;		_main
  9114 ;;		_handleGesture
  9115 ;; This function uses a non-reentrant model
  9116 ;;
  9117                           
  9118                           
  9119                           ;psect for function _Display_Clear
  9120  0ADC                     _Display_Clear:	
  9121                           
  9122                           ;main.c: 182:     SPI_Write(0xFE);
  9123                           
  9124                           ;incstack = 0
  9125                           ; Regs used in _Display_Clear: [wreg+status,2+status,0+pclath+cstack]
  9126  0ADC  30FE               	movlw	254
  9127  0ADD  318B  234C  318A   	fcall	_SPI_Write
  9128                           
  9129                           ;main.c: 183:     _delay((unsigned long)((100)*(250000/4000.0)));
  9130  0AE0  3009               	movlw	9
  9131  0AE1  0020               	movlb	0	; select bank0
  9132  0AE2  00A3               	movwf	??_Display_Clear
  9133  0AE3  301C               	movlw	28
  9134  0AE4                     u5887:	
  9135  0AE4  0B89               	decfsz	9,f
  9136  0AE5  2AE4               	goto	u5887
  9137  0AE6  0BA3               	decfsz	??_Display_Clear,f
  9138  0AE7  2AE4               	goto	u5887
  9139  0AE8  0000               	nop
  9140                           
  9141                           ;main.c: 184:     SPI_Write(0x51);
  9142  0AE9  3051               	movlw	81
  9143  0AEA  318B  234C         	fcall	_SPI_Write
  9144  0AEC  0008               	return
  9145  0AED                     __end_of_Display_Clear:	
  9146                           
  9147                           	psect	text27
  9148  0B4C                     __ptext27:	
  9149 ;; *************** function _SPI_Write *****************
  9150 ;; Defined at:
  9151 ;;		line 151 in file "main.c"
  9152 ;; Parameters:    Size  Location     Type
  9153 ;;  incoming        1    wreg     unsigned char 
  9154 ;; Auto vars:     Size  Location     Type
  9155 ;;  incoming        1    2[BANK0 ] unsigned char 
  9156 ;; Return value:  Size  Location     Type
  9157 ;;                  1    wreg      void 
  9158 ;; Registers used:
  9159 ;;		wreg, status,2, status,0, pclath, cstack
  9160 ;; Tracked objects:
  9161 ;;		On entry : 0/0
  9162 ;;		On exit  : 0/0
  9163 ;;		Unchanged: 0/0
  9164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9166 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9167 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9168 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9169 ;;Total ram usage:        2 bytes
  9170 ;; Hardware stack levels used:    1
  9171 ;; Hardware stack levels required when called:    6
  9172 ;; This function calls:
  9173 ;;		_SPI2_Exchange8bit
  9174 ;; This function is called by:
  9175 ;;		_Display_Name
  9176 ;;		_Display_Clear
  9177 ;; This function uses a non-reentrant model
  9178 ;;
  9179                           
  9180                           
  9181                           ;psect for function _SPI_Write
  9182  0B4C                     _SPI_Write:	
  9183                           
  9184                           ;incstack = 0
  9185                           ; Regs used in _SPI_Write: [wreg+status,2+status,0+pclath+cstack]
  9186                           ;SPI_Write@incoming stored from wreg
  9187  0B4C  0020               	movlb	0	; select bank0
  9188  0B4D  00A2               	movwf	SPI_Write@incoming
  9189                           
  9190                           ;main.c: 151: void SPI_Write(char incoming);main.c: 152: {;main.c: 153:     do { LATCbit
      +                          s.LATC0 = 0; } while(0);
  9191  0B4E  0022               	movlb	2	; select bank2
  9192  0B4F  100E               	bcf	14,0	;volatile
  9193                           
  9194                           ;main.c: 154:     SPI2_Exchange8bit(incoming);
  9195  0B50  0020               	movlb	0	; select bank0
  9196  0B51  0822               	movf	SPI_Write@incoming,w
  9197  0B52  318A  22CD  318B   	fcall	_SPI2_Exchange8bit
  9198  0B55  0022               	movlb	2	; select bank2
  9199  0B56  140E               	bsf	14,0	;volatile
  9200                           
  9201                           ;main.c: 156:     _delay((unsigned long)((100)*(250000/4000.0)));
  9202  0B57  3009               	movlw	9
  9203  0B58  0020               	movlb	0	; select bank0
  9204  0B59  00A1               	movwf	??_SPI_Write
  9205  0B5A  301C               	movlw	28
  9206  0B5B                     u5897:	
  9207  0B5B  0B89               	decfsz	9,f
  9208  0B5C  2B5B               	goto	u5897
  9209  0B5D  0BA1               	decfsz	??_SPI_Write,f
  9210  0B5E  2B5B               	goto	u5897
  9211  0B5F  0000               	nop
  9212  0B60  0008               	return
  9213  0B61                     __end_of_SPI_Write:	
  9214                           
  9215                           	psect	text28
  9216  0ACD                     __ptext28:	
  9217 ;; *************** function _SPI2_Exchange8bit *****************
  9218 ;; Defined at:
  9219 ;;		line 79 in file "mcc_generated_files/spi2.c"
  9220 ;; Parameters:    Size  Location     Type
  9221 ;;  data            1    wreg     unsigned char 
  9222 ;; Auto vars:     Size  Location     Type
  9223 ;;  data            1    0[BANK0 ] unsigned char 
  9224 ;; Return value:  Size  Location     Type
  9225 ;;                  1    wreg      unsigned char 
  9226 ;; Registers used:
  9227 ;;		wreg
  9228 ;; Tracked objects:
  9229 ;;		On entry : 0/0
  9230 ;;		On exit  : 0/0
  9231 ;;		Unchanged: 0/0
  9232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9233 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9234 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9235 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9236 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9237 ;;Total ram usage:        1 bytes
  9238 ;; Hardware stack levels used:    1
  9239 ;; Hardware stack levels required when called:    5
  9240 ;; This function calls:
  9241 ;;		Nothing
  9242 ;; This function is called by:
  9243 ;;		_SPI_Write
  9244 ;;		_SPI2_Exchange8bitBuffer
  9245 ;; This function uses a non-reentrant model
  9246 ;;
  9247                           
  9248                           
  9249                           ;psect for function _SPI2_Exchange8bit
  9250  0ACD                     _SPI2_Exchange8bit:	
  9251                           
  9252                           ;incstack = 0
  9253                           ; Regs used in _SPI2_Exchange8bit: [wreg]
  9254                           ;SPI2_Exchange8bit@data stored from wreg
  9255  0ACD  0020               	movlb	0	; select bank0
  9256  0ACE  00A0               	movwf	SPI2_Exchange8bit@data
  9257                           
  9258                           ;mcc_generated_files/spi2.c: 79: uint8_t SPI2_Exchange8bit(uint8_t data);mcc_generated_f
      +                          iles/spi2.c: 80: {;mcc_generated_files/spi2.c: 82:     SSP2CON1bits.WCOL = 0;
  9259  0ACF  0024               	movlb	4	; select bank4
  9260  0AD0  139D               	bcf	29,7	;volatile
  9261                           
  9262                           ;mcc_generated_files/spi2.c: 84:     SSP2BUF = data;
  9263  0AD1  0020               	movlb	0	; select bank0
  9264  0AD2  0820               	movf	SPI2_Exchange8bit@data,w
  9265  0AD3  0024               	movlb	4	; select bank4
  9266  0AD4  0099               	movwf	25	;volatile
  9267  0AD5                     l1061:	
  9268                           ;mcc_generated_files/spi2.c: 89:     }
  9269                           
  9270                           ;mcc_generated_files/spi2.c: 86:     while(SSP2STATbits.BF == 0x0)
  9271                           
  9272                           
  9273                           ;mcc_generated_files/spi2.c: 86:     while(SSP2STATbits.BF == 0x0)
  9274  0AD5  0024               	movlb	4	; select bank4
  9275  0AD6  181C               	btfsc	28,0	;volatile
  9276  0AD7  2ADA               	goto	l5330
  9277  0AD8  0064               	clrwdt	;# 
  9278  0AD9  2AD5               	goto	l1061
  9279  0ADA                     l5330:	
  9280                           
  9281                           ;mcc_generated_files/spi2.c: 91:     return (SSP2BUF);
  9282  0ADA  0819               	movf	25,w	;volatile
  9283  0ADB  0008               	return
  9284  0ADC                     __end_of_SPI2_Exchange8bit:	
  9285                           
  9286                           	psect	text29
  9287  06B7                     __ptext29:	
  9288 ;; *************** function _enableGestureSensor *****************
  9289 ;; Defined at:
  9290 ;;		line 409 in file "APDS9960.c"
  9291 ;; Parameters:    Size  Location     Type
  9292 ;;  interrupts      1    wreg     _Bool 
  9293 ;; Auto vars:     Size  Location     Type
  9294 ;;  interrupts      1   17[BANK0 ] _Bool 
  9295 ;; Return value:  Size  Location     Type
  9296 ;;                  1    wreg      _Bool 
  9297 ;; Registers used:
  9298 ;;		wreg, status,2, status,0, pclath, cstack
  9299 ;; Tracked objects:
  9300 ;;		On entry : 0/0
  9301 ;;		On exit  : 0/0
  9302 ;;		Unchanged: 0/0
  9303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9305 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9306 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9307 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9308 ;;Total ram usage:        2 bytes
  9309 ;; Hardware stack levels used:    1
  9310 ;; Hardware stack levels required when called:   11
  9311 ;; This function calls:
  9312 ;;		_enablePower
  9313 ;;		_resetGestureParameters
  9314 ;;		_setGestureIntEnable
  9315 ;;		_setGestureMode
  9316 ;;		_setLEDBoost
  9317 ;;		_setMode
  9318 ;;		_wireWriteDataByte
  9319 ;; This function is called by:
  9320 ;;		_main
  9321 ;; This function uses a non-reentrant model
  9322 ;;
  9323                           
  9324                           
  9325                           ;psect for function _enableGestureSensor
  9326  06B7                     _enableGestureSensor:	
  9327                           
  9328                           ;incstack = 0
  9329                           ; Regs used in _enableGestureSensor: [wreg+status,2+status,0+pclath+cstack]
  9330                           ;enableGestureSensor@interrupts stored from wreg
  9331  06B7  0020               	movlb	0	; select bank0
  9332  06B8  00B1               	movwf	enableGestureSensor@interrupts
  9333                           
  9334                           ;APDS9960.c: 409: _Bool enableGestureSensor ( _Bool interrupts);APDS9960.c: 410: {;APDS9
      +                          960.c: 418:     resetGestureParameters();
  9335  06B9  318B  2361  3186   	fcall	_resetGestureParameters
  9336                           
  9337                           ;APDS9960.c: 419:     if( !wireWriteDataByte(0x83, 0xFF) ) {
  9338  06BC  30FF               	movlw	255
  9339  06BD  0020               	movlb	0	; select bank0
  9340  06BE  00B0               	movwf	??_enableGestureSensor
  9341  06BF  0830               	movf	??_enableGestureSensor,w
  9342  06C0  00A6               	movwf	wireWriteDataByte@val
  9343  06C1  3083               	movlw	131
  9344  06C2  318B  238F  3186   	fcall	_wireWriteDataByte
  9345  06C5  0020               	movlb	0	; select bank0
  9346  06C6  0826               	movf	?_wireWriteDataByte,w
  9347  06C7  0427               	iorwf	?_wireWriteDataByte+1,w
  9348  06C8  1903               	btfsc	3,2
  9349  06C9  2ECD               	goto	l6374
  9350  06CA  2ECF               	goto	l6378
  9351  06CB                     l6392:	
  9352                           
  9353                           ;APDS9960.c: 429:         if( !setGestureIntEnable(1) ) {
  9354  06CB  3001               	movlw	1
  9355  06CC  2EE8               	goto	L8
  9356  06CD                     l6374:	
  9357                           
  9358                           ;APDS9960.c: 420:         return 0;
  9359  06CD  3000               	movlw	0
  9360  06CE  0008               	return
  9361  06CF                     l6378:	
  9362                           
  9363                           ;APDS9960.c: 422:     if( !wireWriteDataByte(0x8E, 0x89) ) {
  9364  06CF  3089               	movlw	137
  9365  06D0  00B0               	movwf	??_enableGestureSensor
  9366  06D1  0830               	movf	??_enableGestureSensor,w
  9367  06D2  00A6               	movwf	wireWriteDataByte@val
  9368  06D3  308E               	movlw	142
  9369  06D4  318B  238F  3186   	fcall	_wireWriteDataByte
  9370  06D7  0020               	movlb	0	; select bank0
  9371  06D8  0826               	movf	?_wireWriteDataByte,w
  9372  06D9  0427               	iorwf	?_wireWriteDataByte+1,w
  9373  06DA  1903               	btfsc	3,2
  9374  06DB  2ECD               	goto	l6374
  9375                           
  9376                           ;APDS9960.c: 425:     if( !setLEDBoost(3) ) {
  9377  06DC  3003               	movlw	3
  9378  06DD  318D  25EC  3186   	fcall	_setLEDBoost
  9379  06E0  3A00               	xorlw	0
  9380  06E1  1903               	btfsc	3,2
  9381  06E2  2ECD               	goto	l6374
  9382                           
  9383                           ;APDS9960.c: 428:     if( interrupts ) {
  9384  06E3  0020               	movlb	0	; select bank0
  9385  06E4  0831               	movf	enableGestureSensor@interrupts,w
  9386  06E5  1D03               	btfss	3,2
  9387  06E6  2ECB               	goto	l6392
  9388                           
  9389                           ;APDS9960.c: 433:         if( !setGestureIntEnable(0) ) {
  9390  06E7  3000               	movlw	0
  9391  06E8                     L8:	
  9392  06E8  318D  2563  3186   	fcall	_setGestureIntEnable
  9393  06EB  3A00               	xorlw	0
  9394  06EC  1903               	btfsc	3,2
  9395  06ED  2ECD               	goto	l6374
  9396                           
  9397                           ;APDS9960.c: 437:     if( !setGestureMode(1) ) {
  9398  06EE  3001               	movlw	1
  9399  06EF  318C  244A  3186   	fcall	_setGestureMode
  9400  06F2  3A00               	xorlw	0
  9401  06F3  1903               	btfsc	3,2
  9402  06F4  2ECD               	goto	l6374
  9403                           
  9404                           ;APDS9960.c: 440:     if( !enablePower() ){
  9405  06F5  318A  22B0  3186   	fcall	_enablePower
  9406  06F8  3A00               	xorlw	0
  9407  06F9  1903               	btfsc	3,2
  9408  06FA  2ECD               	goto	l6374
  9409                           
  9410                           ;APDS9960.c: 443:     if( !setMode(3, 1) ) {
  9411  06FB  0020               	movlb	0	; select bank0
  9412  06FC  01AB               	clrf	setMode@enable
  9413  06FD  0AAB               	incf	setMode@enable,f
  9414  06FE  3003               	movlw	3
  9415  06FF  3187  276D  3186   	fcall	_setMode
  9416  0702  3A00               	xorlw	0
  9417  0703  1903               	btfsc	3,2
  9418  0704  2ECD               	goto	l6374
  9419                           
  9420                           ;APDS9960.c: 446:     if( !setMode(2, 1) ) {
  9421  0705  0020               	movlb	0	; select bank0
  9422  0706  01AB               	clrf	setMode@enable
  9423  0707  0AAB               	incf	setMode@enable,f
  9424  0708  3002               	movlw	2
  9425  0709  3187  276D  3186   	fcall	_setMode
  9426  070C  3A00               	xorlw	0
  9427  070D  1903               	btfsc	3,2
  9428  070E  2ECD               	goto	l6374
  9429                           
  9430                           ;APDS9960.c: 449:     if( !setMode(6, 1) ) {
  9431  070F  0020               	movlb	0	; select bank0
  9432  0710  01AB               	clrf	setMode@enable
  9433  0711  0AAB               	incf	setMode@enable,f
  9434  0712  3006               	movlw	6
  9435  0713  3187  276D  3186   	fcall	_setMode
  9436  0716  3A00               	xorlw	0
  9437  0717  1903               	btfsc	3,2
  9438  0718  2ECD               	goto	l6374
  9439                           
  9440                           ;APDS9960.c: 453:     return 1;
  9441  0719  3001               	movlw	1
  9442  071A  0008               	return
  9443  071B                     __end_of_enableGestureSensor:	
  9444                           
  9445                           	psect	text30
  9446  0DEC                     __ptext30:	
  9447 ;; *************** function _setLEDBoost *****************
  9448 ;; Defined at:
  9449 ;;		line 484 in file "APDS9960.c"
  9450 ;; Parameters:    Size  Location     Type
  9451 ;;  boost           1    wreg     unsigned char 
  9452 ;; Auto vars:     Size  Location     Type
  9453 ;;  boost           1   13[BANK0 ] unsigned char 
  9454 ;;  val             1   12[BANK0 ] unsigned char 
  9455 ;; Return value:  Size  Location     Type
  9456 ;;                  1    wreg      _Bool 
  9457 ;; Registers used:
  9458 ;;		wreg, status,2, status,0, pclath, cstack
  9459 ;; Tracked objects:
  9460 ;;		On entry : 0/0
  9461 ;;		On exit  : 0/0
  9462 ;;		Unchanged: 0/0
  9463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9464 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9465 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9466 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9467 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9468 ;;Total ram usage:        4 bytes
  9469 ;; Hardware stack levels used:    1
  9470 ;; Hardware stack levels required when called:    8
  9471 ;; This function calls:
  9472 ;;		_wireReadDataByte
  9473 ;;		_wireWriteDataByte
  9474 ;; This function is called by:
  9475 ;;		_enableGestureSensor
  9476 ;; This function uses a non-reentrant model
  9477 ;;
  9478                           
  9479                           
  9480                           ;psect for function _setLEDBoost
  9481  0DEC                     _setLEDBoost:	
  9482                           
  9483                           ;incstack = 0
  9484                           ; Regs used in _setLEDBoost: [wreg+status,2+status,0+pclath+cstack]
  9485                           ;setLEDBoost@boost stored from wreg
  9486  0DEC  0020               	movlb	0	; select bank0
  9487  0DED  00AD               	movwf	setLEDBoost@boost
  9488                           
  9489                           ;APDS9960.c: 484: _Bool setLEDBoost(uint8_t boost);APDS9960.c: 485: {;APDS9960.c: 486:  
      +                             uint8_t val;;APDS9960.c: 489:     val=wireReadDataByte(0x90);
  9490  0DEE  3090               	movlw	144
  9491  0DEF  318C  2400  318D   	fcall	_wireReadDataByte
  9492  0DF2  0020               	movlb	0	; select bank0
  9493  0DF3  00AA               	movwf	??_setLEDBoost
  9494  0DF4  082A               	movf	??_setLEDBoost,w
  9495  0DF5  00AC               	movwf	setLEDBoost@val
  9496                           
  9497                           ;APDS9960.c: 492:     boost &= 0b00000011;
  9498  0DF6  3003               	movlw	3
  9499  0DF7  00AA               	movwf	??_setLEDBoost
  9500  0DF8  082A               	movf	??_setLEDBoost,w
  9501  0DF9  05AD               	andwf	setLEDBoost@boost,f
  9502                           
  9503                           ;APDS9960.c: 493:     boost = boost << 4;
  9504  0DFA  082D               	movf	setLEDBoost@boost,w
  9505  0DFB  00AA               	movwf	??_setLEDBoost
  9506  0DFC  3003               	movlw	3
  9507  0DFD                     u5335:	
  9508  0DFD  35AA               	lslf	??_setLEDBoost,f
  9509  0DFE  3EFF               	addlw	-1
  9510  0DFF  1D03               	skipz
  9511  0E00  2DFD               	goto	u5335
  9512  0E01  352A               	lslf	??_setLEDBoost,w
  9513  0E02  00AB               	movwf	??_setLEDBoost+1
  9514  0E03  082B               	movf	??_setLEDBoost+1,w
  9515  0E04  00AD               	movwf	setLEDBoost@boost
  9516                           
  9517                           ;APDS9960.c: 494:     val &= 0b11001111;
  9518  0E05  30CF               	movlw	207
  9519  0E06  00AA               	movwf	??_setLEDBoost
  9520  0E07  082A               	movf	??_setLEDBoost,w
  9521  0E08  05AC               	andwf	setLEDBoost@val,f
  9522                           
  9523                           ;APDS9960.c: 495:     val |= boost;
  9524  0E09  082D               	movf	setLEDBoost@boost,w
  9525  0E0A  00AA               	movwf	??_setLEDBoost
  9526  0E0B  082A               	movf	??_setLEDBoost,w
  9527  0E0C  04AC               	iorwf	setLEDBoost@val,f
  9528                           
  9529                           ;APDS9960.c: 498:     if( !wireWriteDataByte(0x90, val) ) {
  9530  0E0D  082C               	movf	setLEDBoost@val,w
  9531  0E0E  00AA               	movwf	??_setLEDBoost
  9532  0E0F  082A               	movf	??_setLEDBoost,w
  9533  0E10  00A6               	movwf	wireWriteDataByte@val
  9534  0E11  3090               	movlw	144
  9535  0E12  318B  238F  318D   	fcall	_wireWriteDataByte
  9536  0E15  0020               	movlb	0	; select bank0
  9537  0E16  0826               	movf	?_wireWriteDataByte,w
  9538  0E17  0427               	iorwf	?_wireWriteDataByte+1,w
  9539  0E18  1D03               	btfss	3,2
  9540  0E19  2E1C               	goto	l6170
  9541                           
  9542                           ;APDS9960.c: 499:         return 0;
  9543  0E1A  3000               	movlw	0
  9544  0E1B  0008               	return
  9545  0E1C                     l6170:	
  9546                           
  9547                           ;APDS9960.c: 502:     return 1;
  9548  0E1C  3001               	movlw	1
  9549  0E1D  0008               	return
  9550  0E1E                     __end_of_setLEDBoost:	
  9551                           
  9552                           	psect	text31
  9553  0C4A                     __ptext31:	
  9554 ;; *************** function _setGestureMode *****************
  9555 ;; Defined at:
  9556 ;;		line 506 in file "APDS9960.c"
  9557 ;; Parameters:    Size  Location     Type
  9558 ;;  mode            1    wreg     unsigned char 
  9559 ;; Auto vars:     Size  Location     Type
  9560 ;;  mode            1   11[BANK0 ] unsigned char 
  9561 ;;  val             1   12[BANK0 ] unsigned char 
  9562 ;; Return value:  Size  Location     Type
  9563 ;;                  1    wreg      _Bool 
  9564 ;; Registers used:
  9565 ;;		wreg, status,2, status,0, pclath, cstack
  9566 ;; Tracked objects:
  9567 ;;		On entry : 0/0
  9568 ;;		On exit  : 0/0
  9569 ;;		Unchanged: 0/0
  9570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9572 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9573 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9574 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9575 ;;Total ram usage:        3 bytes
  9576 ;; Hardware stack levels used:    1
  9577 ;; Hardware stack levels required when called:    8
  9578 ;; This function calls:
  9579 ;;		_wireReadDataByte
  9580 ;;		_wireWriteDataByte
  9581 ;; This function is called by:
  9582 ;;		_enableGestureSensor
  9583 ;; This function uses a non-reentrant model
  9584 ;;
  9585                           
  9586                           
  9587                           ;psect for function _setGestureMode
  9588  0C4A                     _setGestureMode:	
  9589                           
  9590                           ;incstack = 0
  9591                           ; Regs used in _setGestureMode: [wreg+status,2+status,0+pclath+cstack]
  9592                           ;setGestureMode@mode stored from wreg
  9593  0C4A  0020               	movlb	0	; select bank0
  9594  0C4B  00AB               	movwf	setGestureMode@mode
  9595                           
  9596                           ;APDS9960.c: 506: _Bool setGestureMode(uint8_t mode);APDS9960.c: 507: {;APDS9960.c: 508:
      +                               uint8_t val;;APDS9960.c: 511:     val = wireReadDataByte(0xAB);
  9597  0C4C  30AB               	movlw	171
  9598  0C4D  318C  2400  318C   	fcall	_wireReadDataByte
  9599  0C50  0020               	movlb	0	; select bank0
  9600  0C51  00AA               	movwf	??_setGestureMode
  9601  0C52  082A               	movf	??_setGestureMode,w
  9602  0C53  00AC               	movwf	setGestureMode@val
  9603                           
  9604                           ;APDS9960.c: 514:     mode &= 0b00000001;
  9605  0C54  3001               	movlw	1
  9606  0C55  00AA               	movwf	??_setGestureMode
  9607  0C56  082A               	movf	??_setGestureMode,w
  9608  0C57  05AB               	andwf	setGestureMode@mode,f
  9609                           
  9610                           ;APDS9960.c: 515:     val &= 0b11111110;
  9611  0C58  30FE               	movlw	254
  9612  0C59  00AA               	movwf	??_setGestureMode
  9613  0C5A  082A               	movf	??_setGestureMode,w
  9614  0C5B  05AC               	andwf	setGestureMode@val,f
  9615                           
  9616                           ;APDS9960.c: 516:     val |= mode;
  9617  0C5C  082B               	movf	setGestureMode@mode,w
  9618  0C5D  00AA               	movwf	??_setGestureMode
  9619  0C5E  082A               	movf	??_setGestureMode,w
  9620  0C5F  04AC               	iorwf	setGestureMode@val,f
  9621                           
  9622                           ;APDS9960.c: 519:     if( !wireWriteDataByte(0xAB, val) ) {
  9623  0C60  082C               	movf	setGestureMode@val,w
  9624  0C61  00AA               	movwf	??_setGestureMode
  9625  0C62  082A               	movf	??_setGestureMode,w
  9626  0C63  00A6               	movwf	wireWriteDataByte@val
  9627  0C64  30AB               	movlw	171
  9628  0C65  318B  238F  318C   	fcall	_wireWriteDataByte
  9629  0C68  0020               	movlb	0	; select bank0
  9630  0C69  0826               	movf	?_wireWriteDataByte,w
  9631  0C6A  0427               	iorwf	?_wireWriteDataByte+1,w
  9632  0C6B  1D03               	btfss	3,2
  9633  0C6C  2C6F               	goto	l6188
  9634                           
  9635                           ;APDS9960.c: 520:         return 0;
  9636  0C6D  3000               	movlw	0
  9637  0C6E  0008               	return
  9638  0C6F                     l6188:	
  9639                           
  9640                           ;APDS9960.c: 523:     return 1;
  9641  0C6F  3001               	movlw	1
  9642  0C70  0008               	return
  9643  0C71                     __end_of_setGestureMode:	
  9644                           
  9645                           	psect	text32
  9646  0D63                     __ptext32:	
  9647 ;; *************** function _setGestureIntEnable *****************
  9648 ;; Defined at:
  9649 ;;		line 387 in file "APDS9960.c"
  9650 ;; Parameters:    Size  Location     Type
  9651 ;;  enable          1    wreg     unsigned char 
  9652 ;; Auto vars:     Size  Location     Type
  9653 ;;  enable          1   12[BANK0 ] unsigned char 
  9654 ;;  val             1   11[BANK0 ] unsigned char 
  9655 ;; Return value:  Size  Location     Type
  9656 ;;                  1    wreg      _Bool 
  9657 ;; Registers used:
  9658 ;;		wreg, status,2, status,0, pclath, cstack
  9659 ;; Tracked objects:
  9660 ;;		On entry : 0/0
  9661 ;;		On exit  : 0/0
  9662 ;;		Unchanged: 0/0
  9663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9664 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9665 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9666 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9667 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9668 ;;Total ram usage:        3 bytes
  9669 ;; Hardware stack levels used:    1
  9670 ;; Hardware stack levels required when called:    8
  9671 ;; This function calls:
  9672 ;;		_wireReadDataByte
  9673 ;;		_wireWriteDataByte
  9674 ;; This function is called by:
  9675 ;;		_initialize
  9676 ;;		_enableGestureSensor
  9677 ;; This function uses a non-reentrant model
  9678 ;;
  9679                           
  9680                           
  9681                           ;psect for function _setGestureIntEnable
  9682  0D63                     _setGestureIntEnable:	
  9683                           
  9684                           ;incstack = 0
  9685                           ; Regs used in _setGestureIntEnable: [wreg+status,2+status,0+pclath+cstack]
  9686                           ;setGestureIntEnable@enable stored from wreg
  9687  0D63  0020               	movlb	0	; select bank0
  9688  0D64  00AC               	movwf	setGestureIntEnable@enable
  9689                           
  9690                           ;APDS9960.c: 387: _Bool setGestureIntEnable(uint8_t enable);APDS9960.c: 388: {;APDS9960.
      +                          c: 389:     uint8_t val;;APDS9960.c: 392:     val = wireReadDataByte(0xAB);
  9691  0D65  30AB               	movlw	171
  9692  0D66  318C  2400  318D   	fcall	_wireReadDataByte
  9693  0D69  0020               	movlb	0	; select bank0
  9694  0D6A  00AA               	movwf	??_setGestureIntEnable
  9695  0D6B  082A               	movf	??_setGestureIntEnable,w
  9696  0D6C  00AB               	movwf	setGestureIntEnable@val
  9697                           
  9698                           ;APDS9960.c: 395:     enable &= 0b00000001;
  9699  0D6D  3001               	movlw	1
  9700  0D6E  00AA               	movwf	??_setGestureIntEnable
  9701  0D6F  082A               	movf	??_setGestureIntEnable,w
  9702  0D70  05AC               	andwf	setGestureIntEnable@enable,f
  9703                           
  9704                           ;APDS9960.c: 396:     enable = enable << 1;
  9705  0D71  352C               	lslf	setGestureIntEnable@enable,w
  9706  0D72  00AA               	movwf	??_setGestureIntEnable
  9707  0D73  082A               	movf	??_setGestureIntEnable,w
  9708  0D74  00AC               	movwf	setGestureIntEnable@enable
  9709                           
  9710                           ;APDS9960.c: 397:     val &= 0b11111101;
  9711  0D75  30FD               	movlw	253
  9712  0D76  00AA               	movwf	??_setGestureIntEnable
  9713  0D77  082A               	movf	??_setGestureIntEnable,w
  9714  0D78  05AB               	andwf	setGestureIntEnable@val,f
  9715                           
  9716                           ;APDS9960.c: 398:     val |= enable;
  9717  0D79  082C               	movf	setGestureIntEnable@enable,w
  9718  0D7A  00AA               	movwf	??_setGestureIntEnable
  9719  0D7B  082A               	movf	??_setGestureIntEnable,w
  9720  0D7C  04AB               	iorwf	setGestureIntEnable@val,f
  9721                           
  9722                           ;APDS9960.c: 401:     if( !wireWriteDataByte(0xAB, val) ) {
  9723  0D7D  082B               	movf	setGestureIntEnable@val,w
  9724  0D7E  00AA               	movwf	??_setGestureIntEnable
  9725  0D7F  082A               	movf	??_setGestureIntEnable,w
  9726  0D80  00A6               	movwf	wireWriteDataByte@val
  9727  0D81  30AB               	movlw	171
  9728  0D82  318B  238F  318D   	fcall	_wireWriteDataByte
  9729  0D85  0020               	movlb	0	; select bank0
  9730  0D86  0826               	movf	?_wireWriteDataByte,w
  9731  0D87  0427               	iorwf	?_wireWriteDataByte+1,w
  9732  0D88  1D03               	btfss	3,2
  9733  0D89  2D8C               	goto	l6152
  9734                           
  9735                           ;APDS9960.c: 402:         return 0;
  9736  0D8A  3000               	movlw	0
  9737  0D8B  0008               	return
  9738  0D8C                     l6152:	
  9739                           
  9740                           ;APDS9960.c: 405:     return 1;
  9741  0D8C  3001               	movlw	1
  9742  0D8D  0008               	return
  9743  0D8E                     __end_of_setGestureIntEnable:	
  9744                           
  9745                           	psect	text33
  9746  0B61                     __ptext33:	
  9747 ;; *************** function _resetGestureParameters *****************
  9748 ;; Defined at:
  9749 ;;		line 457 in file "APDS9960.c"
  9750 ;; Parameters:    Size  Location     Type
  9751 ;;		None
  9752 ;; Auto vars:     Size  Location     Type
  9753 ;;		None
  9754 ;; Return value:  Size  Location     Type
  9755 ;;                  1    wreg      void 
  9756 ;; Registers used:
  9757 ;;		status,2
  9758 ;; Tracked objects:
  9759 ;;		On entry : 0/0
  9760 ;;		On exit  : 0/0
  9761 ;;		Unchanged: 0/0
  9762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9764 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9765 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9766 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9767 ;;Total ram usage:        0 bytes
  9768 ;; Hardware stack levels used:    1
  9769 ;; Hardware stack levels required when called:    5
  9770 ;; This function calls:
  9771 ;;		Nothing
  9772 ;; This function is called by:
  9773 ;;		_enableGestureSensor
  9774 ;;		_readGesture
  9775 ;; This function uses a non-reentrant model
  9776 ;;
  9777                           
  9778                           
  9779                           ;psect for function _resetGestureParameters
  9780  0B61                     _resetGestureParameters:	
  9781                           
  9782                           ;APDS9960.c: 460:     gesture_data_.index = 0;
  9783                           
  9784                           ;incstack = 0
  9785                           ; Regs used in _resetGestureParameters: [status,2]
  9786  0B61  0024               	movlb	4	; select bank4
  9787  0B62  01E0               	clrf	(_gesture_data_^(0+512)+64)
  9788                           
  9789                           ;APDS9960.c: 461:     gesture_data_.total_gestures = 0;
  9790  0B63  01E1               	clrf	(_gesture_data_^(0+512)+65)
  9791                           
  9792                           ;APDS9960.c: 463:     gesture_ud_delta_ = 0;
  9793  0B64  0020               	movlb	0	; select bank0
  9794  0B65  01E9               	clrf	_gesture_ud_delta_
  9795  0B66  01EA               	clrf	_gesture_ud_delta_+1
  9796                           
  9797                           ;APDS9960.c: 464:     gesture_lr_delta_ = 0;
  9798  0B67  01E7               	clrf	_gesture_lr_delta_
  9799  0B68  01E8               	clrf	_gesture_lr_delta_+1
  9800                           
  9801                           ;APDS9960.c: 466:     gesture_ud_count_ = 0;
  9802  0B69  01E5               	clrf	_gesture_ud_count_
  9803  0B6A  01E6               	clrf	_gesture_ud_count_+1
  9804                           
  9805                           ;APDS9960.c: 467:     gesture_lr_count_ = 0;
  9806  0B6B  01E3               	clrf	_gesture_lr_count_
  9807  0B6C  01E4               	clrf	_gesture_lr_count_+1
  9808                           
  9809                           ;APDS9960.c: 469:     gesture_near_count_ = 0;
  9810  0B6D  01E1               	clrf	_gesture_near_count_
  9811  0B6E  01E2               	clrf	_gesture_near_count_+1
  9812                           
  9813                           ;APDS9960.c: 470:     gesture_far_count_ = 0;
  9814  0B6F  01DF               	clrf	_gesture_far_count_
  9815  0B70  01E0               	clrf	_gesture_far_count_+1
  9816                           
  9817                           ;APDS9960.c: 472:     gesture_state_ = 0;
  9818  0B71  01DD               	clrf	_gesture_state_
  9819  0B72  01DE               	clrf	_gesture_state_+1
  9820                           
  9821                           ;APDS9960.c: 473:     gesture_motion_ = DIR_NONE;
  9822  0B73  0022               	movlb	2	; select bank2
  9823  0B74  01E0               	clrf	_gesture_motion_^(0+256)
  9824  0B75  01E1               	clrf	(_gesture_motion_+1)^(0+256)
  9825  0B76  0008               	return
  9826  0B77                     __end_of_resetGestureParameters:	
  9827                           
  9828                           	psect	text34
  9829  0AB0                     __ptext34:	
  9830 ;; *************** function _enablePower *****************
  9831 ;; Defined at:
  9832 ;;		line 527 in file "APDS9960.c"
  9833 ;; Parameters:    Size  Location     Type
  9834 ;;		None
  9835 ;; Auto vars:     Size  Location     Type
  9836 ;;		None
  9837 ;; Return value:  Size  Location     Type
  9838 ;;                  1    wreg      _Bool 
  9839 ;; Registers used:
  9840 ;;		wreg, status,2, status,0, pclath, cstack
  9841 ;; Tracked objects:
  9842 ;;		On entry : 0/0
  9843 ;;		On exit  : 0/0
  9844 ;;		Unchanged: 0/0
  9845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9846 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9847 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9848 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9849 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9850 ;;Total ram usage:        0 bytes
  9851 ;; Hardware stack levels used:    1
  9852 ;; Hardware stack levels required when called:   10
  9853 ;; This function calls:
  9854 ;;		_setMode
  9855 ;; This function is called by:
  9856 ;;		_enableGestureSensor
  9857 ;; This function uses a non-reentrant model
  9858 ;;
  9859                           
  9860                           
  9861                           ;psect for function _enablePower
  9862  0AB0                     _enablePower:	
  9863                           
  9864                           ;APDS9960.c: 529:     if( !setMode(0, 1) ) {
  9865                           
  9866                           ;incstack = 0
  9867                           ; Regs used in _enablePower: [wreg+status,2+status,0+pclath+cstack]
  9868  0AB0  0020               	movlb	0	; select bank0
  9869  0AB1  01AB               	clrf	setMode@enable
  9870  0AB2  0AAB               	incf	setMode@enable,f
  9871  0AB3  3000               	movlw	0
  9872  0AB4  3187  276D  318A   	fcall	_setMode
  9873  0AB7  3A00               	xorlw	0
  9874  0AB8  1D03               	skipz
  9875  0AB9  2ABC               	goto	l6198
  9876                           
  9877                           ;APDS9960.c: 530:         return 0;
  9878  0ABA  3000               	movlw	0
  9879  0ABB  0008               	return
  9880  0ABC                     l6198:	
  9881                           
  9882                           ;APDS9960.c: 533:     return 1;
  9883  0ABC  3001               	movlw	1
  9884  0ABD  0008               	return
  9885  0ABE                     __end_of_enablePower:	
  9886                           
  9887                           	psect	text35
  9888  076D                     __ptext35:	
  9889 ;; *************** function _setMode *****************
  9890 ;; Defined at:
  9891 ;;		line 124 in file "APDS9960.c"
  9892 ;; Parameters:    Size  Location     Type
  9893 ;;  mode            1    wreg     unsigned char 
  9894 ;;  enable          1   11[BANK0 ] unsigned char 
  9895 ;; Auto vars:     Size  Location     Type
  9896 ;;  mode            1   15[BANK0 ] unsigned char 
  9897 ;;  reg_val         1   14[BANK0 ] unsigned char 
  9898 ;; Return value:  Size  Location     Type
  9899 ;;                  1    wreg      _Bool 
  9900 ;; Registers used:
  9901 ;;		wreg, status,2, status,0, pclath, cstack
  9902 ;; Tracked objects:
  9903 ;;		On entry : 0/0
  9904 ;;		On exit  : 0/0
  9905 ;;		Unchanged: 0/0
  9906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9907 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9908 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9909 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9910 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9911 ;;Total ram usage:        5 bytes
  9912 ;; Hardware stack levels used:    1
  9913 ;; Hardware stack levels required when called:    9
  9914 ;; This function calls:
  9915 ;;		_getMode
  9916 ;;		_wireWriteDataByte
  9917 ;; This function is called by:
  9918 ;;		_initialize
  9919 ;;		_enableGestureSensor
  9920 ;;		_enablePower
  9921 ;; This function uses a non-reentrant model
  9922 ;;
  9923                           
  9924                           
  9925                           ;psect for function _setMode
  9926  076D                     _setMode:	
  9927                           
  9928                           ;incstack = 0
  9929                           ; Regs used in _setMode: [wreg+status,2+status,0+pclath+cstack]
  9930                           ;setMode@mode stored from wreg
  9931  076D  0020               	movlb	0	; select bank0
  9932  076E  00AF               	movwf	setMode@mode
  9933                           
  9934                           ;APDS9960.c: 124: _Bool setMode(uint8_t mode, uint8_t enable);APDS9960.c: 125: {;APDS996
      +                          0.c: 126:     uint8_t reg_val;;APDS9960.c: 129:     reg_val = getMode();
  9935  076F  318A  2292  3187   	fcall	_getMode
  9936  0772  0020               	movlb	0	; select bank0
  9937  0773  00AC               	movwf	??_setMode
  9938  0774  082C               	movf	??_setMode,w
  9939  0775  00AE               	movwf	setMode@reg_val
  9940                           
  9941                           ;APDS9960.c: 130:     if( reg_val == 0xFF ) {
  9942  0776  0A2E               	incf	setMode@reg_val,w
  9943  0777  1D03               	btfss	3,2
  9944  0778  2F7B               	goto	l5478
  9945  0779                     l5474:	
  9946                           
  9947                           ;APDS9960.c: 131:         return 0;
  9948  0779  3000               	movlw	0
  9949  077A  0008               	return
  9950  077B                     l5478:	
  9951                           
  9952                           ;APDS9960.c: 135:     enable = enable & 0x01;
  9953  077B  082B               	movf	setMode@enable,w
  9954  077C  3901               	andlw	1
  9955  077D  00AC               	movwf	??_setMode
  9956  077E  082C               	movf	??_setMode,w
  9957  077F  00AB               	movwf	setMode@enable
  9958                           
  9959                           ;APDS9960.c: 136:     if( mode >= 0 && mode <= 6 ) {
  9960  0780  3007               	movlw	7
  9961  0781  022F               	subwf	setMode@mode,w
  9962  0782  1803               	skipnc
  9963  0783  2FA0               	goto	l5488
  9964                           
  9965                           ;APDS9960.c: 137:         if (enable) {
  9966  0784  082B               	movf	setMode@enable,w
  9967  0785  1903               	btfsc	3,2
  9968  0786  2F93               	goto	l5486
  9969                           
  9970                           ;APDS9960.c: 138:             reg_val |= (1 << mode);
  9971  0787  3001               	movlw	1
  9972  0788  00AC               	movwf	??_setMode
  9973  0789  0A2F               	incf	setMode@mode,w
  9974  078A  2F8C               	goto	u4274
  9975  078B                     u4275:	
  9976  078B  35AC               	lslf	??_setMode,f
  9977  078C                     u4274:	
  9978  078C  0B89               	decfsz	9,f
  9979  078D  2F8B               	goto	u4275
  9980  078E  082C               	movf	??_setMode,w
  9981  078F  00AD               	movwf	??_setMode+1
  9982  0790  082D               	movf	??_setMode+1,w
  9983  0791  04AE               	iorwf	setMode@reg_val,f
  9984                           
  9985                           ;APDS9960.c: 139:         } else {
  9986  0792  2FAD               	goto	l5496
  9987  0793                     l5486:	
  9988                           
  9989                           ;APDS9960.c: 140:             reg_val &= ~(1 << mode);
  9990  0793  3001               	movlw	1
  9991  0794  00AC               	movwf	??_setMode
  9992  0795  0A2F               	incf	setMode@mode,w
  9993  0796  2F98               	goto	u4284
  9994  0797                     u4285:	
  9995  0797  35AC               	lslf	??_setMode,f
  9996  0798                     u4284:	
  9997  0798  0B89               	decfsz	9,f
  9998  0799  2F97               	goto	u4285
  9999  079A  082C               	movf	??_setMode,w
 10000  079B  3AFF               	xorlw	255
 10001  079C  00AD               	movwf	??_setMode+1
 10002  079D  082D               	movf	??_setMode+1,w
 10003  079E  05AE               	andwf	setMode@reg_val,f
 10004  079F  2FAD               	goto	l5496
 10005  07A0                     l5488:	
 10006  07A0  3007               	movlw	7
 10007  07A1  062F               	xorwf	setMode@mode,w
 10008  07A2  1D03               	btfss	3,2
 10009  07A3  2FAD               	goto	l5496
 10010                           
 10011                           ;APDS9960.c: 143:         if (enable) {
 10012  07A4  082B               	movf	setMode@enable,w
 10013  07A5  1903               	btfsc	3,2
 10014  07A6  2FAC               	goto	l5494
 10015                           
 10016                           ;APDS9960.c: 144:             reg_val = 0x7F;
 10017  07A7  307F               	movlw	127
 10018  07A8  00AC               	movwf	??_setMode
 10019  07A9  082C               	movf	??_setMode,w
 10020  07AA  00AE               	movwf	setMode@reg_val
 10021                           
 10022                           ;APDS9960.c: 145:         } else {
 10023  07AB  2FAD               	goto	l5496
 10024  07AC                     l5494:	
 10025                           
 10026                           ;APDS9960.c: 146:             reg_val = 0x00;
 10027  07AC  01AE               	clrf	setMode@reg_val
 10028  07AD                     l5496:	
 10029                           
 10030                           ;APDS9960.c: 151:     if( !wireWriteDataByte(0x80, reg_val) ) {
 10031  07AD  082E               	movf	setMode@reg_val,w
 10032  07AE  00AC               	movwf	??_setMode
 10033  07AF  082C               	movf	??_setMode,w
 10034  07B0  00A6               	movwf	wireWriteDataByte@val
 10035  07B1  3080               	movlw	128
 10036  07B2  318B  238F  3187   	fcall	_wireWriteDataByte
 10037  07B5  0020               	movlb	0	; select bank0
 10038  07B6  0826               	movf	?_wireWriteDataByte,w
 10039  07B7  0427               	iorwf	?_wireWriteDataByte+1,w
 10040  07B8  1903               	btfsc	3,2
 10041  07B9  2F79               	goto	l5474
 10042                           
 10043                           ;APDS9960.c: 155:     return 1;
 10044  07BA  3001               	movlw	1
 10045  07BB  0008               	return
 10046  07BC                     __end_of_setMode:	
 10047                           
 10048                           	psect	text36
 10049  0B8F                     __ptext36:	
 10050 ;; *************** function _wireWriteDataByte *****************
 10051 ;; Defined at:
 10052 ;;		line 871 in file "APDS9960.c"
 10053 ;; Parameters:    Size  Location     Type
 10054 ;;  reg             1    wreg     unsigned char 
 10055 ;;  val             1    6[BANK0 ] unsigned char 
 10056 ;; Auto vars:     Size  Location     Type
 10057 ;;  reg             1    9[BANK0 ] unsigned char 
 10058 ;; Return value:  Size  Location     Type
 10059 ;;                  2    6[BANK0 ] int 
 10060 ;; Registers used:
 10061 ;;		wreg, status,2, status,0, pclath, cstack
 10062 ;; Tracked objects:
 10063 ;;		On entry : 0/0
 10064 ;;		On exit  : 0/0
 10065 ;;		Unchanged: 0/0
 10066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10067 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10068 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10069 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10070 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10071 ;;Total ram usage:        4 bytes
 10072 ;; Hardware stack levels used:    1
 10073 ;; Hardware stack levels required when called:    7
 10074 ;; This function calls:
 10075 ;;		_I2C_Start
 10076 ;;		_I2C_Stop
 10077 ;;		_I2C_Write_Byte
 10078 ;; This function is called by:
 10079 ;;		_initialize
 10080 ;;		_setMode
 10081 ;;		_setLEDDrive
 10082 ;;		_setProximityGain
 10083 ;;		_setAmbientLightGain
 10084 ;;		_setProxIntLowThresh
 10085 ;;		_setProxIntHighThresh
 10086 ;;		_setLightIntLowThreshold
 10087 ;;		_setLightIntHighThreshold
 10088 ;;		_setGestureEnterThresh
 10089 ;;		_setGestureExitThresh
 10090 ;;		_setGestureGain
 10091 ;;		_setGestureLEDDrive
 10092 ;;		_setGestureWaitTime
 10093 ;;		_setGestureIntEnable
 10094 ;;		_enableGestureSensor
 10095 ;;		_setLEDBoost
 10096 ;;		_setGestureMode
 10097 ;; This function uses a non-reentrant model
 10098 ;;
 10099                           
 10100                           
 10101                           ;psect for function _wireWriteDataByte
 10102  0B8F                     _wireWriteDataByte:	
 10103                           
 10104                           ;incstack = 0
 10105                           ; Regs used in _wireWriteDataByte: [wreg+status,2+status,0+pclath+cstack]
 10106                           ;wireWriteDataByte@reg stored from wreg
 10107  0B8F  0020               	movlb	0	; select bank0
 10108  0B90  00A9               	movwf	wireWriteDataByte@reg
 10109                           
 10110                           ;APDS9960.c: 871: int wireWriteDataByte(unsigned char reg, unsigned char val);APDS9960.c
      +                          : 872: {;APDS9960.c: 882:     I2C_Start();
 10111  0B91  318A  220A  318B   	fcall	_I2C_Start
 10112                           
 10113                           ;APDS9960.c: 883:     I2C_Write_Byte((0x39 << 1 )| 0x00);
 10114  0B94  3072               	movlw	114
 10115  0B95  318B  23AA  318B   	fcall	_I2C_Write_Byte
 10116                           
 10117                           ;APDS9960.c: 884:     I2C_Write_Byte(reg);
 10118  0B98  0020               	movlb	0	; select bank0
 10119  0B99  0829               	movf	wireWriteDataByte@reg,w
 10120  0B9A  318B  23AA  318B   	fcall	_I2C_Write_Byte
 10121                           
 10122                           ;APDS9960.c: 885:     I2C_Write_Byte(val);
 10123  0B9D  0020               	movlb	0	; select bank0
 10124  0B9E  0826               	movf	wireWriteDataByte@val,w
 10125  0B9F  318B  23AA  318B   	fcall	_I2C_Write_Byte
 10126                           
 10127                           ;APDS9960.c: 886:     I2C_Stop();
 10128  0BA2  318A  2210         	fcall	_I2C_Stop
 10129                           
 10130                           ;APDS9960.c: 889:     return 1;
 10131  0BA4  3001               	movlw	1
 10132  0BA5  0020               	movlb	0	; select bank0
 10133  0BA6  00A6               	movwf	?_wireWriteDataByte
 10134  0BA7  3000               	movlw	0
 10135  0BA8  00A7               	movwf	?_wireWriteDataByte+1
 10136  0BA9  0008               	return
 10137  0BAA                     __end_of_wireWriteDataByte:	
 10138                           
 10139                           	psect	text37
 10140  0A92                     __ptext37:	
 10141 ;; *************** function _getMode *****************
 10142 ;; Defined at:
 10143 ;;		line 159 in file "APDS9960.c"
 10144 ;; Parameters:    Size  Location     Type
 10145 ;;		None
 10146 ;; Auto vars:     Size  Location     Type
 10147 ;;  enable_value    1   10[BANK0 ] unsigned char 
 10148 ;; Return value:  Size  Location     Type
 10149 ;;                  1    wreg      unsigned char 
 10150 ;; Registers used:
 10151 ;;		wreg, status,2, status,0, pclath, cstack
 10152 ;; Tracked objects:
 10153 ;;		On entry : 0/0
 10154 ;;		On exit  : 0/0
 10155 ;;		Unchanged: 0/0
 10156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10157 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10158 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10159 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10160 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10161 ;;Total ram usage:        2 bytes
 10162 ;; Hardware stack levels used:    1
 10163 ;; Hardware stack levels required when called:    8
 10164 ;; This function calls:
 10165 ;;		_wireReadDataByte
 10166 ;; This function is called by:
 10167 ;;		_setMode
 10168 ;;		_readGesture
 10169 ;; This function uses a non-reentrant model
 10170 ;;
 10171                           
 10172                           
 10173                           ;psect for function _getMode
 10174  0A92                     _getMode:	
 10175                           
 10176                           ;APDS9960.c: 161:     uint8_t enable_value;;APDS9960.c: 164:     enable_value = wireRead
      +                          DataByte(0x80);
 10177                           
 10178                           ;incstack = 0
 10179                           ; Regs used in _getMode: [wreg+status,2+status,0+pclath+cstack]
 10180  0A92  3080               	movlw	128
 10181  0A93  318C  2400         	fcall	_wireReadDataByte
 10182  0A95  0020               	movlb	0	; select bank0
 10183  0A96  00A9               	movwf	??_getMode
 10184  0A97  0829               	movf	??_getMode,w
 10185  0A98  00AA               	movwf	getMode@enable_value
 10186                           
 10187                           ;APDS9960.c: 166:     return enable_value;
 10188  0A99  082A               	movf	getMode@enable_value,w
 10189  0A9A  0008               	return
 10190  0A9B                     __end_of_getMode:	
 10191                           
 10192                           	psect	text38
 10193  0C00                     __ptext38:	
 10194 ;; *************** function _wireReadDataByte *****************
 10195 ;; Defined at:
 10196 ;;		line 893 in file "APDS9960.c"
 10197 ;; Parameters:    Size  Location     Type
 10198 ;;  reg             1    wreg     unsigned char 
 10199 ;; Auto vars:     Size  Location     Type
 10200 ;;  reg             1    7[BANK0 ] unsigned char 
 10201 ;;  val             1    8[BANK0 ] unsigned char 
 10202 ;; Return value:  Size  Location     Type
 10203 ;;                  1    wreg      unsigned char 
 10204 ;; Registers used:
 10205 ;;		wreg, status,2, status,0, pclath, cstack
 10206 ;; Tracked objects:
 10207 ;;		On entry : 0/0
 10208 ;;		On exit  : 0/0
 10209 ;;		Unchanged: 0/0
 10210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10211 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10212 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10213 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10214 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10215 ;;Total ram usage:        3 bytes
 10216 ;; Hardware stack levels used:    1
 10217 ;; Hardware stack levels required when called:    7
 10218 ;; This function calls:
 10219 ;;		_I2C_ReStart
 10220 ;;		_I2C_Read_Byte
 10221 ;;		_I2C_Send_NACK
 10222 ;;		_I2C_Start
 10223 ;;		_I2C_Stop
 10224 ;;		_I2C_Write_Byte
 10225 ;; This function is called by:
 10226 ;;		_initialize
 10227 ;;		_getMode
 10228 ;;		_setLEDDrive
 10229 ;;		_setProximityGain
 10230 ;;		_setAmbientLightGain
 10231 ;;		_setGestureGain
 10232 ;;		_setGestureLEDDrive
 10233 ;;		_setGestureWaitTime
 10234 ;;		_setGestureIntEnable
 10235 ;;		_setLEDBoost
 10236 ;;		_setGestureMode
 10237 ;;		_isGestureAvailable
 10238 ;;		_readGesture
 10239 ;; This function uses a non-reentrant model
 10240 ;;
 10241                           
 10242                           
 10243                           ;psect for function _wireReadDataByte
 10244  0C00                     _wireReadDataByte:	
 10245                           
 10246                           ;incstack = 0
 10247                           ; Regs used in _wireReadDataByte: [wreg+status,2+status,0+pclath+cstack]
 10248                           ;wireReadDataByte@reg stored from wreg
 10249  0C00  0020               	movlb	0	; select bank0
 10250  0C01  00A7               	movwf	wireReadDataByte@reg
 10251                           
 10252                           ;APDS9960.c: 893:  unsigned char wireReadDataByte(unsigned char reg);APDS9960.c: 894: {;
      +                          APDS9960.c: 908:     unsigned char val;;APDS9960.c: 909:     I2C_Start();
 10253  0C02  318A  220A  318C   	fcall	_I2C_Start
 10254                           
 10255                           ;APDS9960.c: 910:     I2C_Write_Byte((0x39 << 1 )| 0x00);
 10256  0C05  3072               	movlw	114
 10257  0C06  318B  23AA  318C   	fcall	_I2C_Write_Byte
 10258                           
 10259                           ;APDS9960.c: 911:     I2C_Write_Byte(reg);
 10260  0C09  0020               	movlb	0	; select bank0
 10261  0C0A  0827               	movf	wireReadDataByte@reg,w
 10262  0C0B  318B  23AA  318C   	fcall	_I2C_Write_Byte
 10263                           
 10264                           ;APDS9960.c: 912:     I2C_ReStart();
 10265  0C0E  3189  21FB  318C   	fcall	_I2C_ReStart
 10266                           
 10267                           ;APDS9960.c: 914:     I2C_Write_Byte((0x39 << 1) | 0x01);
 10268  0C11  3073               	movlw	115
 10269  0C12  318B  23AA  318C   	fcall	_I2C_Write_Byte
 10270                           
 10271                           ;APDS9960.c: 915:     val=I2C_Read_Byte();
 10272  0C15  318A  22A5  318C   	fcall	_I2C_Read_Byte
 10273  0C18  0020               	movlb	0	; select bank0
 10274  0C19  00A6               	movwf	??_wireReadDataByte
 10275  0C1A  0826               	movf	??_wireReadDataByte,w
 10276  0C1B  00A8               	movwf	wireReadDataByte@val
 10277                           
 10278                           ;APDS9960.c: 916:     I2C_Send_NACK();
 10279  0C1C  318A  2204  318C   	fcall	_I2C_Send_NACK
 10280                           
 10281                           ;APDS9960.c: 917:     I2C_Stop();
 10282  0C1F  318A  2210         	fcall	_I2C_Stop
 10283                           
 10284                           ;APDS9960.c: 919:     return val;
 10285  0C21  0020               	movlb	0	; select bank0
 10286  0C22  0828               	movf	wireReadDataByte@val,w
 10287  0C23  0008               	return
 10288  0C24                     __end_of_wireReadDataByte:	
 10289                           
 10290                           	psect	text39
 10291  0BAA                     __ptext39:	
 10292 ;; *************** function _I2C_Write_Byte *****************
 10293 ;; Defined at:
 10294 ;;		line 75 in file "i2c.c"
 10295 ;; Parameters:    Size  Location     Type
 10296 ;;  Byte            1    wreg     unsigned char 
 10297 ;; Auto vars:     Size  Location     Type
 10298 ;;  Byte            1    3[BANK0 ] unsigned char 
 10299 ;;  count           2    4[BANK0 ] unsigned int 
 10300 ;; Return value:  Size  Location     Type
 10301 ;;                  1    wreg      void 
 10302 ;; Registers used:
 10303 ;;		wreg, status,2, status,0, pclath, cstack
 10304 ;; Tracked objects:
 10305 ;;		On entry : 0/0
 10306 ;;		On exit  : 0/0
 10307 ;;		Unchanged: 0/0
 10308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10310 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10311 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10312 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10313 ;;Total ram usage:        5 bytes
 10314 ;; Hardware stack levels used:    1
 10315 ;; Hardware stack levels required when called:    6
 10316 ;; This function calls:
 10317 ;;		_i2c1_driver_TXData
 10318 ;; This function is called by:
 10319 ;;		_wireReadDataBlock
 10320 ;;		_wireWriteDataByte
 10321 ;;		_wireReadDataByte
 10322 ;; This function uses a non-reentrant model
 10323 ;;
 10324                           
 10325                           
 10326                           ;psect for function _I2C_Write_Byte
 10327  0BAA                     _I2C_Write_Byte:	
 10328                           
 10329                           ;incstack = 0
 10330                           ; Regs used in _I2C_Write_Byte: [wreg+status,2+status,0+pclath+cstack]
 10331                           ;I2C_Write_Byte@Byte stored from wreg
 10332  0BAA  0020               	movlb	0	; select bank0
 10333  0BAB  00A3               	movwf	I2C_Write_Byte@Byte
 10334                           
 10335                           ;i2c.c: 75: void I2C_Write_Byte(unsigned char Byte);i2c.c: 76: {;i2c.c: 80:     i2c1_dri
      +                          ver_TXData(Byte);
 10336  0BAC  0823               	movf	I2C_Write_Byte@Byte,w
 10337  0BAD  318A  224A  318B   	fcall	_i2c1_driver_TXData
 10338                           
 10339                           ;i2c.c: 83:     unsigned int count = 0;
 10340  0BB0  0020               	movlb	0	; select bank0
 10341  0BB1  01A4               	clrf	I2C_Write_Byte@count
 10342  0BB2  01A5               	clrf	I2C_Write_Byte@count+1
 10343  0BB3                     l1031:	
 10344                           ;i2c.c: 84:     while(SSP1CON2bits.ACKSTAT);
 10345                           
 10346  0BB3  0024               	movlb	4	; select bank4
 10347  0BB4  1B16               	btfsc	22,6	;volatile
 10348  0BB5  2BB3               	goto	l1031
 10349  0BB6                     l5310:	
 10350  0BB6  0020               	movlb	0	; select bank0
 10351  0BB7  0825               	movf	I2C_Write_Byte@count+1,w
 10352  0BB8  00A2               	movwf	??_I2C_Write_Byte+1
 10353  0BB9  0824               	movf	I2C_Write_Byte@count,w
 10354  0BBA  00A1               	movwf	??_I2C_Write_Byte
 10355  0BBB  0AA4               	incf	I2C_Write_Byte@count,f
 10356  0BBC  1903               	skipnz
 10357  0BBD  0AA5               	incf	I2C_Write_Byte@count+1,f
 10358  0BBE  3000               	movlw	0
 10359  0BBF  0222               	subwf	??_I2C_Write_Byte+1,w
 10360  0BC0  3005               	movlw	5
 10361  0BC1  1903               	skipnz
 10362  0BC2  0221               	subwf	??_I2C_Write_Byte,w
 10363  0BC3  1803               	btfsc	3,0
 10364  0BC4  0008               	return
 10365  0BC5  2BB6               	goto	l5310
 10366  0BC6                     __end_of_I2C_Write_Byte:	
 10367                           
 10368                           	psect	text40
 10369  0A4A                     __ptext40:	
 10370 ;; *************** function _i2c1_driver_TXData *****************
 10371 ;; Defined at:
 10372 ;;		line 186 in file "mcc_generated_files/i2c1_driver.c"
 10373 ;; Parameters:    Size  Location     Type
 10374 ;;  d               1    wreg     unsigned char 
 10375 ;; Auto vars:     Size  Location     Type
 10376 ;;  d               1    0[BANK0 ] unsigned char 
 10377 ;; Return value:  Size  Location     Type
 10378 ;;                  1    wreg      void 
 10379 ;; Registers used:
 10380 ;;		wreg
 10381 ;; Tracked objects:
 10382 ;;		On entry : 0/0
 10383 ;;		On exit  : 0/0
 10384 ;;		Unchanged: 0/0
 10385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10386 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10387 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10389 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10390 ;;Total ram usage:        1 bytes
 10391 ;; Hardware stack levels used:    1
 10392 ;; Hardware stack levels required when called:    5
 10393 ;; This function calls:
 10394 ;;		Nothing
 10395 ;; This function is called by:
 10396 ;;		_I2C_Write_Byte
 10397 ;; This function uses a non-reentrant model
 10398 ;;
 10399                           
 10400                           
 10401                           ;psect for function _i2c1_driver_TXData
 10402  0A4A                     _i2c1_driver_TXData:	
 10403                           
 10404                           ;incstack = 0
 10405                           ; Regs used in _i2c1_driver_TXData: [wreg]
 10406                           ;i2c1_driver_TXData@d stored from wreg
 10407  0A4A  0020               	movlb	0	; select bank0
 10408  0A4B  00A0               	movwf	i2c1_driver_TXData@d
 10409                           
 10410                           ;mcc_generated_files/i2c1_driver.c: 186: __attribute__((inline)) void i2c1_driver_TXData
      +                          (char d);mcc_generated_files/i2c1_driver.c: 187: {;mcc_generated_files/i2c1_driver.c: 18
      +                          8:     SSP1BUF = d;
 10411  0A4C  0820               	movf	i2c1_driver_TXData@d,w
 10412  0A4D  0024               	movlb	4	; select bank4
 10413  0A4E  0091               	movwf	17	;volatile
 10414  0A4F  0008               	return
 10415  0A50                     __end_of_i2c1_driver_TXData:	
 10416                           
 10417                           	psect	text41
 10418  0A10                     __ptext41:	
 10419 ;; *************** function _I2C_Stop *****************
 10420 ;; Defined at:
 10421 ;;		line 50 in file "i2c.c"
 10422 ;; Parameters:    Size  Location     Type
 10423 ;;		None
 10424 ;; Auto vars:     Size  Location     Type
 10425 ;;		None
 10426 ;; Return value:  Size  Location     Type
 10427 ;;                  1    wreg      void 
 10428 ;; Registers used:
 10429 ;;		status,2, status,0, pclath, cstack
 10430 ;; Tracked objects:
 10431 ;;		On entry : 0/0
 10432 ;;		On exit  : 0/0
 10433 ;;		Unchanged: 0/0
 10434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10435 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10436 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10437 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10438 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10439 ;;Total ram usage:        0 bytes
 10440 ;; Hardware stack levels used:    1
 10441 ;; Hardware stack levels required when called:    6
 10442 ;; This function calls:
 10443 ;;		_i2c1_driver_stop
 10444 ;; This function is called by:
 10445 ;;		_wireReadDataBlock
 10446 ;;		_wireWriteDataByte
 10447 ;;		_wireReadDataByte
 10448 ;; This function uses a non-reentrant model
 10449 ;;
 10450                           
 10451                           
 10452                           ;psect for function _I2C_Stop
 10453  0A10                     _I2C_Stop:	
 10454                           
 10455                           ;i2c.c: 52:  i2c1_driver_stop();
 10456                           
 10457                           ;incstack = 0
 10458                           ; Regs used in _I2C_Stop: [status,2+status,0+pclath+cstack]
 10459  0A10  318A  220D         	fcall	_i2c1_driver_stop
 10460  0A12  0008               	return
 10461  0A13                     __end_of_I2C_Stop:	
 10462                           
 10463                           	psect	text42
 10464  0A0D                     __ptext42:	
 10465 ;; *************** function _i2c1_driver_stop *****************
 10466 ;; Defined at:
 10467 ;;		line 156 in file "mcc_generated_files/i2c1_driver.c"
 10468 ;; Parameters:    Size  Location     Type
 10469 ;;		None
 10470 ;; Auto vars:     Size  Location     Type
 10471 ;;		None
 10472 ;; Return value:  Size  Location     Type
 10473 ;;                  1    wreg      void 
 10474 ;; Registers used:
 10475 ;;		None
 10476 ;; Tracked objects:
 10477 ;;		On entry : 0/0
 10478 ;;		On exit  : 0/0
 10479 ;;		Unchanged: 0/0
 10480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10484 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10485 ;;Total ram usage:        0 bytes
 10486 ;; Hardware stack levels used:    1
 10487 ;; Hardware stack levels required when called:    5
 10488 ;; This function calls:
 10489 ;;		Nothing
 10490 ;; This function is called by:
 10491 ;;		_I2C_Stop
 10492 ;; This function uses a non-reentrant model
 10493 ;;
 10494                           
 10495                           
 10496                           ;psect for function _i2c1_driver_stop
 10497  0A0D                     _i2c1_driver_stop:	
 10498                           
 10499                           ;mcc_generated_files/i2c1_driver.c: 158:     SSP1CON2bits.PEN = 1;
 10500                           
 10501                           ;incstack = 0
 10502                           ; Regs used in _i2c1_driver_stop: []
 10503  0A0D  0024               	movlb	4	; select bank4
 10504  0A0E  1516               	bsf	22,2	;volatile
 10505  0A0F  0008               	return
 10506  0A10                     __end_of_i2c1_driver_stop:	
 10507                           
 10508                           	psect	text43
 10509  0A0A                     __ptext43:	
 10510 ;; *************** function _I2C_Start *****************
 10511 ;; Defined at:
 10512 ;;		line 35 in file "i2c.c"
 10513 ;; Parameters:    Size  Location     Type
 10514 ;;		None
 10515 ;; Auto vars:     Size  Location     Type
 10516 ;;		None
 10517 ;; Return value:  Size  Location     Type
 10518 ;;                  1    wreg      void 
 10519 ;; Registers used:
 10520 ;;		status,2, status,0, pclath, cstack
 10521 ;; Tracked objects:
 10522 ;;		On entry : 0/0
 10523 ;;		On exit  : 0/0
 10524 ;;		Unchanged: 0/0
 10525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10526 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10527 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10528 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10529 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10530 ;;Total ram usage:        0 bytes
 10531 ;; Hardware stack levels used:    1
 10532 ;; Hardware stack levels required when called:    6
 10533 ;; This function calls:
 10534 ;;		_i2c1_driver_start
 10535 ;; This function is called by:
 10536 ;;		_wireReadDataBlock
 10537 ;;		_wireWriteDataByte
 10538 ;;		_wireReadDataByte
 10539 ;; This function uses a non-reentrant model
 10540 ;;
 10541                           
 10542                           
 10543                           ;psect for function _I2C_Start
 10544  0A0A                     _I2C_Start:	
 10545                           
 10546                           ;i2c.c: 37:  i2c1_driver_start();
 10547                           
 10548                           ;incstack = 0
 10549                           ; Regs used in _I2C_Start: [status,2+status,0+pclath+cstack]
 10550  0A0A  318A  2207         	fcall	_i2c1_driver_start
 10551  0A0C  0008               	return
 10552  0A0D                     __end_of_I2C_Start:	
 10553                           
 10554                           	psect	text44
 10555  0A07                     __ptext44:	
 10556 ;; *************** function _i2c1_driver_start *****************
 10557 ;; Defined at:
 10558 ;;		line 146 in file "mcc_generated_files/i2c1_driver.c"
 10559 ;; Parameters:    Size  Location     Type
 10560 ;;		None
 10561 ;; Auto vars:     Size  Location     Type
 10562 ;;		None
 10563 ;; Return value:  Size  Location     Type
 10564 ;;                  1    wreg      void 
 10565 ;; Registers used:
 10566 ;;		None
 10567 ;; Tracked objects:
 10568 ;;		On entry : 0/0
 10569 ;;		On exit  : 0/0
 10570 ;;		Unchanged: 0/0
 10571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10572 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10573 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10574 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10575 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10576 ;;Total ram usage:        0 bytes
 10577 ;; Hardware stack levels used:    1
 10578 ;; Hardware stack levels required when called:    5
 10579 ;; This function calls:
 10580 ;;		Nothing
 10581 ;; This function is called by:
 10582 ;;		_I2C_Start
 10583 ;;		_i2c_masterOperation
 10584 ;; This function uses a non-reentrant model
 10585 ;;
 10586                           
 10587                           
 10588                           ;psect for function _i2c1_driver_start
 10589  0A07                     _i2c1_driver_start:	
 10590                           
 10591                           ;mcc_generated_files/i2c1_driver.c: 148:     SSP1CON2bits.SEN = 1;
 10592                           
 10593                           ;incstack = 0
 10594                           ; Regs used in _i2c1_driver_start: []
 10595  0A07  0024               	movlb	4	; select bank4
 10596  0A08  1416               	bsf	22,0	;volatile
 10597  0A09  0008               	return
 10598  0A0A                     __end_of_i2c1_driver_start:	
 10599                           
 10600                           	psect	text45
 10601  0A04                     __ptext45:	
 10602 ;; *************** function _I2C_Send_NACK *****************
 10603 ;; Defined at:
 10604 ;;		line 66 in file "i2c.c"
 10605 ;; Parameters:    Size  Location     Type
 10606 ;;		None
 10607 ;; Auto vars:     Size  Location     Type
 10608 ;;		None
 10609 ;; Return value:  Size  Location     Type
 10610 ;;                  1    wreg      void 
 10611 ;; Registers used:
 10612 ;;		status,2, status,0, pclath, cstack
 10613 ;; Tracked objects:
 10614 ;;		On entry : 0/0
 10615 ;;		On exit  : 0/0
 10616 ;;		Unchanged: 0/0
 10617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10618 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10619 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10620 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10621 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10622 ;;Total ram usage:        0 bytes
 10623 ;; Hardware stack levels used:    1
 10624 ;; Hardware stack levels required when called:    6
 10625 ;; This function calls:
 10626 ;;		_i2c1_driver_sendNACK
 10627 ;; This function is called by:
 10628 ;;		_wireReadDataBlock
 10629 ;;		_wireReadDataByte
 10630 ;; This function uses a non-reentrant model
 10631 ;;
 10632                           
 10633                           
 10634                           ;psect for function _I2C_Send_NACK
 10635  0A04                     _I2C_Send_NACK:	
 10636                           
 10637                           ;i2c.c: 68:     i2c1_driver_sendNACK();
 10638                           
 10639                           ;incstack = 0
 10640                           ; Regs used in _I2C_Send_NACK: [status,2+status,0+pclath+cstack]
 10641  0A04  318A  223B         	fcall	_i2c1_driver_sendNACK
 10642  0A06  0008               	return
 10643  0A07                     __end_of_I2C_Send_NACK:	
 10644                           
 10645                           	psect	text46
 10646  0A3B                     __ptext46:	
 10647 ;; *************** function _i2c1_driver_sendNACK *****************
 10648 ;; Defined at:
 10649 ;;		line 202 in file "mcc_generated_files/i2c1_driver.c"
 10650 ;; Parameters:    Size  Location     Type
 10651 ;;		None
 10652 ;; Auto vars:     Size  Location     Type
 10653 ;;		None
 10654 ;; Return value:  Size  Location     Type
 10655 ;;                  1    wreg      void 
 10656 ;; Registers used:
 10657 ;;		None
 10658 ;; Tracked objects:
 10659 ;;		On entry : 0/0
 10660 ;;		On exit  : 0/0
 10661 ;;		Unchanged: 0/0
 10662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10663 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10664 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10665 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10666 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10667 ;;Total ram usage:        0 bytes
 10668 ;; Hardware stack levels used:    1
 10669 ;; Hardware stack levels required when called:    5
 10670 ;; This function calls:
 10671 ;;		Nothing
 10672 ;; This function is called by:
 10673 ;;		_I2C_Send_NACK
 10674 ;; This function uses a non-reentrant model
 10675 ;;
 10676                           
 10677                           
 10678                           ;psect for function _i2c1_driver_sendNACK
 10679  0A3B                     _i2c1_driver_sendNACK:	
 10680                           
 10681                           ;mcc_generated_files/i2c1_driver.c: 204:     SSP1CON2bits.ACKDT = 1;
 10682                           
 10683                           ;incstack = 0
 10684                           ; Regs used in _i2c1_driver_sendNACK: []
 10685  0A3B  0024               	movlb	4	; select bank4
 10686  0A3C  1696               	bsf	22,5	;volatile
 10687                           
 10688                           ;mcc_generated_files/i2c1_driver.c: 205:     SSP1CON2bits.ACKEN = 1;
 10689  0A3D  1616               	bsf	22,4	;volatile
 10690  0A3E  0008               	return
 10691  0A3F                     __end_of_i2c1_driver_sendNACK:	
 10692                           
 10693                           	psect	text47
 10694  0AA5                     __ptext47:	
 10695 ;; *************** function _I2C_Read_Byte *****************
 10696 ;; Defined at:
 10697 ;;		line 115 in file "i2c.c"
 10698 ;; Parameters:    Size  Location     Type
 10699 ;;		None
 10700 ;; Auto vars:     Size  Location     Type
 10701 ;;		None
 10702 ;; Return value:  Size  Location     Type
 10703 ;;                  1    wreg      unsigned char 
 10704 ;; Registers used:
 10705 ;;		wreg, status,2, status,0, pclath, cstack
 10706 ;; Tracked objects:
 10707 ;;		On entry : 0/0
 10708 ;;		On exit  : 0/0
 10709 ;;		Unchanged: 0/0
 10710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10711 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10712 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10713 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10714 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10715 ;;Total ram usage:        0 bytes
 10716 ;; Hardware stack levels used:    1
 10717 ;; Hardware stack levels required when called:    6
 10718 ;; This function calls:
 10719 ;;		_i2c1_driver_getRXData
 10720 ;;		_i2c1_driver_isBufferFull
 10721 ;;		_i2c1_driver_startRX
 10722 ;; This function is called by:
 10723 ;;		_wireReadDataBlock
 10724 ;;		_wireReadDataByte
 10725 ;; This function uses a non-reentrant model
 10726 ;;
 10727                           
 10728                           
 10729                           ;psect for function _I2C_Read_Byte
 10730  0AA5                     _I2C_Read_Byte:	
 10731                           
 10732                           ;i2c.c: 117:     i2c1_driver_startRX();
 10733                           
 10734                           ;incstack = 0
 10735                           ; Regs used in _I2C_Read_Byte: [wreg+status,2+status,0+pclath+cstack]
 10736  0AA5  318A  2201  318A   	fcall	_i2c1_driver_startRX
 10737  0AA8                     l5316:	
 10738                           ;i2c.c: 121:  while (i2c1_driver_isBufferFull() == 0) {
 10739                           
 10740                           
 10741                           ;i2c.c: 121:  while (i2c1_driver_isBufferFull() == 0) {
 10742  0AA8  318A  226B  318A   	fcall	_i2c1_driver_isBufferFull
 10743  0AAB  1C03               	btfss	3,0
 10744  0AAC  2AA8               	goto	l5316
 10745                           
 10746                           ;i2c.c: 137:   return i2c1_driver_getRXData();
 10747  0AAD  3189  21FE         	fcall	_i2c1_driver_getRXData
 10748  0AAF  0008               	return
 10749  0AB0                     __end_of_I2C_Read_Byte:	
 10750                           
 10751                           	psect	text48
 10752  0A01                     __ptext48:	
 10753 ;; *************** function _i2c1_driver_startRX *****************
 10754 ;; Defined at:
 10755 ;;		line 166 in file "mcc_generated_files/i2c1_driver.c"
 10756 ;; Parameters:    Size  Location     Type
 10757 ;;		None
 10758 ;; Auto vars:     Size  Location     Type
 10759 ;;		None
 10760 ;; Return value:  Size  Location     Type
 10761 ;;                  1    wreg      void 
 10762 ;; Registers used:
 10763 ;;		None
 10764 ;; Tracked objects:
 10765 ;;		On entry : 0/0
 10766 ;;		On exit  : 0/0
 10767 ;;		Unchanged: 0/0
 10768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10770 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10771 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10772 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10773 ;;Total ram usage:        0 bytes
 10774 ;; Hardware stack levels used:    1
 10775 ;; Hardware stack levels required when called:    5
 10776 ;; This function calls:
 10777 ;;		Nothing
 10778 ;; This function is called by:
 10779 ;;		_I2C_Read_Byte
 10780 ;; This function uses a non-reentrant model
 10781 ;;
 10782                           
 10783                           
 10784                           ;psect for function _i2c1_driver_startRX
 10785  0A01                     _i2c1_driver_startRX:	
 10786                           
 10787                           ;mcc_generated_files/i2c1_driver.c: 168:     SSP1CON2bits.RCEN = 1;
 10788                           
 10789                           ;incstack = 0
 10790                           ; Regs used in _i2c1_driver_startRX: []
 10791  0A01  0024               	movlb	4	; select bank4
 10792  0A02  1596               	bsf	22,3	;volatile
 10793  0A03  0008               	return
 10794  0A04                     __end_of_i2c1_driver_startRX:	
 10795                           
 10796                           	psect	text49
 10797  0A6B                     __ptext49:	
 10798 ;; *************** function _i2c1_driver_isBufferFull *****************
 10799 ;; Defined at:
 10800 ;;		line 213 in file "mcc_generated_files/i2c1_driver.c"
 10801 ;; Parameters:    Size  Location     Type
 10802 ;;		None
 10803 ;; Auto vars:     Size  Location     Type
 10804 ;;		None
 10805 ;; Return value:  Size  Location     Type
 10806 ;;		None               void
 10807 ;; Registers used:
 10808 ;;		wreg, status,2, status,0
 10809 ;; Tracked objects:
 10810 ;;		On entry : 0/0
 10811 ;;		On exit  : 0/0
 10812 ;;		Unchanged: 0/0
 10813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10814 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10815 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10816 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10817 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10818 ;;Total ram usage:        1 bytes
 10819 ;; Hardware stack levels used:    1
 10820 ;; Hardware stack levels required when called:    5
 10821 ;; This function calls:
 10822 ;;		Nothing
 10823 ;; This function is called by:
 10824 ;;		_I2C_Read_Byte
 10825 ;; This function uses a non-reentrant model
 10826 ;;
 10827                           
 10828                           
 10829                           ;psect for function _i2c1_driver_isBufferFull
 10830  0A6B                     _i2c1_driver_isBufferFull:	
 10831                           
 10832                           ;mcc_generated_files/i2c1_driver.c: 215:     return SSP1STATbits.BF;
 10833                           
 10834                           ;incstack = 0
 10835                           ; Regs used in _i2c1_driver_isBufferFull: [wreg+status,2+status,0]
 10836  0A6B  0024               	movlb	4	; select bank4
 10837  0A6C  0814               	movf	20,w	;volatile
 10838  0A6D  3901               	andlw	1
 10839  0A6E  0020               	movlb	0	; select bank0
 10840  0A6F  00A0               	movwf	??_i2c1_driver_isBufferFull
 10841  0A70  0C20               	rrf	??_i2c1_driver_isBufferFull,w
 10842  0A71  0008               	return
 10843  0A72                     __end_of_i2c1_driver_isBufferFull:	
 10844                           
 10845                           	psect	text50
 10846  09FE                     __ptext50:	
 10847 ;; *************** function _i2c1_driver_getRXData *****************
 10848 ;; Defined at:
 10849 ;;		line 171 in file "mcc_generated_files/i2c1_driver.c"
 10850 ;; Parameters:    Size  Location     Type
 10851 ;;		None
 10852 ;; Auto vars:     Size  Location     Type
 10853 ;;		None
 10854 ;; Return value:  Size  Location     Type
 10855 ;;                  1    wreg      unsigned char 
 10856 ;; Registers used:
 10857 ;;		wreg
 10858 ;; Tracked objects:
 10859 ;;		On entry : 0/0
 10860 ;;		On exit  : 0/0
 10861 ;;		Unchanged: 0/0
 10862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10863 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10864 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10865 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10866 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10867 ;;Total ram usage:        0 bytes
 10868 ;; Hardware stack levels used:    1
 10869 ;; Hardware stack levels required when called:    5
 10870 ;; This function calls:
 10871 ;;		Nothing
 10872 ;; This function is called by:
 10873 ;;		_I2C_Read_Byte
 10874 ;; This function uses a non-reentrant model
 10875 ;;
 10876                           
 10877                           
 10878                           ;psect for function _i2c1_driver_getRXData
 10879  09FE                     _i2c1_driver_getRXData:	
 10880                           
 10881                           ;mcc_generated_files/i2c1_driver.c: 173:     return SSP1BUF;
 10882                           
 10883                           ;incstack = 0
 10884                           ; Regs used in _i2c1_driver_getRXData: [wreg]
 10885  09FE  0024               	movlb	4	; select bank4
 10886  09FF  0811               	movf	17,w	;volatile
 10887  0A00  0008               	return
 10888  0A01                     __end_of_i2c1_driver_getRXData:	
 10889                           
 10890                           	psect	text51
 10891  09FB                     __ptext51:	
 10892 ;; *************** function _I2C_ReStart *****************
 10893 ;; Defined at:
 10894 ;;		line 43 in file "i2c.c"
 10895 ;; Parameters:    Size  Location     Type
 10896 ;;		None
 10897 ;; Auto vars:     Size  Location     Type
 10898 ;;		None
 10899 ;; Return value:  Size  Location     Type
 10900 ;;                  1    wreg      void 
 10901 ;; Registers used:
 10902 ;;		status,2, status,0, pclath, cstack
 10903 ;; Tracked objects:
 10904 ;;		On entry : 0/0
 10905 ;;		On exit  : 0/0
 10906 ;;		Unchanged: 0/0
 10907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10909 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10911 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10912 ;;Total ram usage:        0 bytes
 10913 ;; Hardware stack levels used:    1
 10914 ;; Hardware stack levels required when called:    6
 10915 ;; This function calls:
 10916 ;;		_i2c1_driver_restart
 10917 ;; This function is called by:
 10918 ;;		_wireReadDataBlock
 10919 ;;		_wireReadDataByte
 10920 ;; This function uses a non-reentrant model
 10921 ;;
 10922                           
 10923                           
 10924                           ;psect for function _I2C_ReStart
 10925  09FB                     _I2C_ReStart:	
 10926                           
 10927                           ;i2c.c: 45:  i2c1_driver_restart();
 10928                           
 10929                           ;incstack = 0
 10930                           ; Regs used in _I2C_ReStart: [status,2+status,0+pclath+cstack]
 10931  09FB  3189  21F8         	fcall	_i2c1_driver_restart
 10932  09FD  0008               	return
 10933  09FE                     __end_of_I2C_ReStart:	
 10934                           
 10935                           	psect	text52
 10936  09F8                     __ptext52:	
 10937 ;; *************** function _i2c1_driver_restart *****************
 10938 ;; Defined at:
 10939 ;;		line 151 in file "mcc_generated_files/i2c1_driver.c"
 10940 ;; Parameters:    Size  Location     Type
 10941 ;;		None
 10942 ;; Auto vars:     Size  Location     Type
 10943 ;;		None
 10944 ;; Return value:  Size  Location     Type
 10945 ;;                  1    wreg      void 
 10946 ;; Registers used:
 10947 ;;		None
 10948 ;; Tracked objects:
 10949 ;;		On entry : 0/0
 10950 ;;		On exit  : 0/0
 10951 ;;		Unchanged: 0/0
 10952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10953 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10954 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10956 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10957 ;;Total ram usage:        0 bytes
 10958 ;; Hardware stack levels used:    1
 10959 ;; Hardware stack levels required when called:    5
 10960 ;; This function calls:
 10961 ;;		Nothing
 10962 ;; This function is called by:
 10963 ;;		_I2C_ReStart
 10964 ;; This function uses a non-reentrant model
 10965 ;;
 10966                           
 10967                           
 10968                           ;psect for function _i2c1_driver_restart
 10969  09F8                     _i2c1_driver_restart:	
 10970                           
 10971                           ;mcc_generated_files/i2c1_driver.c: 153:     SSP1CON2bits.RSEN = 1;
 10972                           
 10973                           ;incstack = 0
 10974                           ; Regs used in _i2c1_driver_restart: []
 10975  09F8  0024               	movlb	4	; select bank4
 10976  09F9  1496               	bsf	22,1	;volatile
 10977  09FA  0008               	return
 10978  09FB                     __end_of_i2c1_driver_restart:	
 10979                           
 10980                           	psect	text53
 10981  0ABE                     __ptext53:	
 10982 ;; *************** function _SYSTEM_Initialize *****************
 10983 ;; Defined at:
 10984 ;;		line 50 in file "mcc_generated_files/mcc.c"
 10985 ;; Parameters:    Size  Location     Type
 10986 ;;		None
 10987 ;; Auto vars:     Size  Location     Type
 10988 ;;		None
 10989 ;; Return value:  Size  Location     Type
 10990 ;;                  1    wreg      void 
 10991 ;; Registers used:
 10992 ;;		wreg, status,2, status,0, pclath, cstack
 10993 ;; Tracked objects:
 10994 ;;		On entry : 0/0
 10995 ;;		On exit  : 0/0
 10996 ;;		Unchanged: 0/0
 10997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10999 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11000 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11001 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11002 ;;Total ram usage:        0 bytes
 11003 ;; Hardware stack levels used:    1
 11004 ;; Hardware stack levels required when called:    6
 11005 ;; This function calls:
 11006 ;;		_OSCILLATOR_Initialize
 11007 ;;		_PIN_MANAGER_Initialize
 11008 ;;		_PMD_Initialize
 11009 ;;		_SPI2_Initialize
 11010 ;;		_WDT_Initialize
 11011 ;; This function is called by:
 11012 ;;		_main
 11013 ;; This function uses a non-reentrant model
 11014 ;;
 11015                           
 11016                           
 11017                           ;psect for function _SYSTEM_Initialize
 11018  0ABE                     _SYSTEM_Initialize:	
 11019                           
 11020                           ;mcc_generated_files/mcc.c: 53:     PMD_Initialize();
 11021                           
 11022                           ;incstack = 0
 11023                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
 11024  0ABE  318A  228A  318A   	fcall	_PMD_Initialize
 11025                           
 11026                           ;mcc_generated_files/mcc.c: 54:     PIN_MANAGER_Initialize();
 11027  0AC1  318E  26EA  318A   	fcall	_PIN_MANAGER_Initialize
 11028                           
 11029                           ;mcc_generated_files/mcc.c: 55:     OSCILLATOR_Initialize();
 11030  0AC4  318A  2282  318A   	fcall	_OSCILLATOR_Initialize
 11031                           
 11032                           ;mcc_generated_files/mcc.c: 56:     WDT_Initialize();
 11033  0AC7  318A  2237  318A   	fcall	_WDT_Initialize
 11034                           
 11035                           ;mcc_generated_files/mcc.c: 57:     SPI2_Initialize();
 11036  0ACA  318A  2264         	fcall	_SPI2_Initialize
 11037  0ACC  0008               	return
 11038  0ACD                     __end_of_SYSTEM_Initialize:	
 11039                           
 11040                           	psect	text54
 11041  0A37                     __ptext54:	
 11042 ;; *************** function _WDT_Initialize *****************
 11043 ;; Defined at:
 11044 ;;		line 74 in file "mcc_generated_files/mcc.c"
 11045 ;; Parameters:    Size  Location     Type
 11046 ;;		None
 11047 ;; Auto vars:     Size  Location     Type
 11048 ;;		None
 11049 ;; Return value:  Size  Location     Type
 11050 ;;                  1    wreg      void 
 11051 ;; Registers used:
 11052 ;;		wreg
 11053 ;; Tracked objects:
 11054 ;;		On entry : 0/0
 11055 ;;		On exit  : 0/0
 11056 ;;		Unchanged: 0/0
 11057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11058 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11059 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11060 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11061 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11062 ;;Total ram usage:        0 bytes
 11063 ;; Hardware stack levels used:    1
 11064 ;; Hardware stack levels required when called:    5
 11065 ;; This function calls:
 11066 ;;		Nothing
 11067 ;; This function is called by:
 11068 ;;		_SYSTEM_Initialize
 11069 ;; This function uses a non-reentrant model
 11070 ;;
 11071                           
 11072                           
 11073                           ;psect for function _WDT_Initialize
 11074  0A37                     _WDT_Initialize:	
 11075                           
 11076                           ;mcc_generated_files/mcc.c: 77:     WDTCON = 0x18;
 11077                           
 11078                           ;incstack = 0
 11079                           ; Regs used in _WDT_Initialize: [wreg]
 11080  0A37  3018               	movlw	24
 11081  0A38  0021               	movlb	1	; select bank1
 11082  0A39  0097               	movwf	23	;volatile
 11083  0A3A  0008               	return
 11084  0A3B                     __end_of_WDT_Initialize:	
 11085                           
 11086                           	psect	text55
 11087  0A64                     __ptext55:	
 11088 ;; *************** function _SPI2_Initialize *****************
 11089 ;; Defined at:
 11090 ;;		line 65 in file "mcc_generated_files/spi2.c"
 11091 ;; Parameters:    Size  Location     Type
 11092 ;;		None
 11093 ;; Auto vars:     Size  Location     Type
 11094 ;;		None
 11095 ;; Return value:  Size  Location     Type
 11096 ;;                  1    wreg      void 
 11097 ;; Registers used:
 11098 ;;		wreg, status,2
 11099 ;; Tracked objects:
 11100 ;;		On entry : 0/0
 11101 ;;		On exit  : 0/0
 11102 ;;		Unchanged: 0/0
 11103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11104 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11105 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11106 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11107 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11108 ;;Total ram usage:        0 bytes
 11109 ;; Hardware stack levels used:    1
 11110 ;; Hardware stack levels required when called:    5
 11111 ;; This function calls:
 11112 ;;		Nothing
 11113 ;; This function is called by:
 11114 ;;		_SYSTEM_Initialize
 11115 ;; This function uses a non-reentrant model
 11116 ;;
 11117                           
 11118                           
 11119                           ;psect for function _SPI2_Initialize
 11120  0A64                     _SPI2_Initialize:	
 11121                           
 11122                           ;mcc_generated_files/spi2.c: 70:     SSP2STAT = 0x80;
 11123                           
 11124                           ;incstack = 0
 11125                           ; Regs used in _SPI2_Initialize: [wreg+status,2]
 11126  0A64  3080               	movlw	128
 11127  0A65  0024               	movlb	4	; select bank4
 11128  0A66  009C               	movwf	28	;volatile
 11129                           
 11130                           ;mcc_generated_files/spi2.c: 73:     SSP2CON1 = 0x30;
 11131  0A67  3030               	movlw	48
 11132  0A68  009D               	movwf	29	;volatile
 11133                           
 11134                           ;mcc_generated_files/spi2.c: 76:     SSP2ADD = 0x00;
 11135  0A69  019A               	clrf	26	;volatile
 11136  0A6A  0008               	return
 11137  0A6B                     __end_of_SPI2_Initialize:	
 11138                           
 11139                           	psect	text56
 11140  0A8A                     __ptext56:	
 11141 ;; *************** function _PMD_Initialize *****************
 11142 ;; Defined at:
 11143 ;;		line 80 in file "mcc_generated_files/mcc.c"
 11144 ;; Parameters:    Size  Location     Type
 11145 ;;		None
 11146 ;; Auto vars:     Size  Location     Type
 11147 ;;		None
 11148 ;; Return value:  Size  Location     Type
 11149 ;;                  1    wreg      void 
 11150 ;; Registers used:
 11151 ;;		status,2
 11152 ;; Tracked objects:
 11153 ;;		On entry : 0/0
 11154 ;;		On exit  : 0/0
 11155 ;;		Unchanged: 0/0
 11156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11157 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11158 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11159 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11160 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11161 ;;Total ram usage:        0 bytes
 11162 ;; Hardware stack levels used:    1
 11163 ;; Hardware stack levels required when called:    5
 11164 ;; This function calls:
 11165 ;;		Nothing
 11166 ;; This function is called by:
 11167 ;;		_SYSTEM_Initialize
 11168 ;; This function uses a non-reentrant model
 11169 ;;
 11170                           
 11171                           
 11172                           ;psect for function _PMD_Initialize
 11173  0A8A                     _PMD_Initialize:	
 11174                           
 11175                           ;mcc_generated_files/mcc.c: 83:     PMD0 = 0x00;
 11176                           
 11177                           ;incstack = 0
 11178                           ; Regs used in _PMD_Initialize: [status,2]
 11179  0A8A  0032               	movlb	18	; select bank18
 11180  0A8B  0191               	clrf	17	;volatile
 11181                           
 11182                           ;mcc_generated_files/mcc.c: 85:     PMD1 = 0x00;
 11183  0A8C  0192               	clrf	18	;volatile
 11184                           
 11185                           ;mcc_generated_files/mcc.c: 87:     PMD2 = 0x00;
 11186  0A8D  0193               	clrf	19	;volatile
 11187                           
 11188                           ;mcc_generated_files/mcc.c: 89:     PMD3 = 0x00;
 11189  0A8E  0194               	clrf	20	;volatile
 11190                           
 11191                           ;mcc_generated_files/mcc.c: 91:     PMD4 = 0x00;
 11192  0A8F  0195               	clrf	21	;volatile
 11193                           
 11194                           ;mcc_generated_files/mcc.c: 93:     PMD5 = 0x00;
 11195  0A90  0196               	clrf	22	;volatile
 11196  0A91  0008               	return
 11197  0A92                     __end_of_PMD_Initialize:	
 11198                           
 11199                           	psect	text57
 11200  0EEA                     __ptext57:	
 11201 ;; *************** function _PIN_MANAGER_Initialize *****************
 11202 ;; Defined at:
 11203 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
 11204 ;; Parameters:    Size  Location     Type
 11205 ;;		None
 11206 ;; Auto vars:     Size  Location     Type
 11207 ;;		None
 11208 ;; Return value:  Size  Location     Type
 11209 ;;                  1    wreg      void 
 11210 ;; Registers used:
 11211 ;;		wreg, status,2
 11212 ;; Tracked objects:
 11213 ;;		On entry : 0/0
 11214 ;;		On exit  : 0/0
 11215 ;;		Unchanged: 0/0
 11216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11217 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11218 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11219 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11220 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11221 ;;Total ram usage:        0 bytes
 11222 ;; Hardware stack levels used:    1
 11223 ;; Hardware stack levels required when called:    5
 11224 ;; This function calls:
 11225 ;;		Nothing
 11226 ;; This function is called by:
 11227 ;;		_SYSTEM_Initialize
 11228 ;; This function uses a non-reentrant model
 11229 ;;
 11230                           
 11231                           
 11232                           ;psect for function _PIN_MANAGER_Initialize
 11233  0EEA                     _PIN_MANAGER_Initialize:	
 11234                           
 11235                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x00;
 11236                           
 11237                           ;incstack = 0
 11238                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
 11239  0EEA  0022               	movlb	2	; select bank2
 11240  0EEB  018C               	clrf	12	;volatile
 11241                           
 11242                           ;mcc_generated_files/pin_manager.c: 61:     LATB = 0x00;
 11243  0EEC  018D               	clrf	13	;volatile
 11244                           
 11245                           ;mcc_generated_files/pin_manager.c: 62:     LATC = 0x00;
 11246  0EED  018E               	clrf	14	;volatile
 11247                           
 11248                           ;mcc_generated_files/pin_manager.c: 67:     TRISA = 0x37;
 11249  0EEE  3037               	movlw	55
 11250  0EEF  0021               	movlb	1	; select bank1
 11251  0EF0  008C               	movwf	12	;volatile
 11252                           
 11253                           ;mcc_generated_files/pin_manager.c: 68:     TRISB = 0xB0;
 11254  0EF1  30B0               	movlw	176
 11255  0EF2  008D               	movwf	13	;volatile
 11256                           
 11257                           ;mcc_generated_files/pin_manager.c: 69:     TRISC = 0xFA;
 11258  0EF3  30FA               	movlw	250
 11259  0EF4  008E               	movwf	14	;volatile
 11260                           
 11261                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0xD7;
 11262  0EF5  30D7               	movlw	215
 11263  0EF6  0023               	movlb	3	; select bank3
 11264  0EF7  008E               	movwf	14	;volatile
 11265                           
 11266                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0x00;
 11267  0EF8  018D               	clrf	13	;volatile
 11268                           
 11269                           ;mcc_generated_files/pin_manager.c: 76:     ANSELA = 0x11;
 11270  0EF9  3011               	movlw	17
 11271  0EFA  008C               	movwf	12	;volatile
 11272                           
 11273                           ;mcc_generated_files/pin_manager.c: 81:     WPUB = 0x00;
 11274  0EFB  0024               	movlb	4	; select bank4
 11275  0EFC  018D               	clrf	13	;volatile
 11276                           
 11277                           ;mcc_generated_files/pin_manager.c: 82:     WPUA = 0x00;
 11278  0EFD  018C               	clrf	12	;volatile
 11279                           
 11280                           ;mcc_generated_files/pin_manager.c: 83:     WPUC = 0x02;
 11281  0EFE  3002               	movlw	2
 11282  0EFF  008E               	movwf	14	;volatile
 11283                           
 11284                           ;mcc_generated_files/pin_manager.c: 88:     ODCONA = 0x00;
 11285  0F00  0025               	movlb	5	; select bank5
 11286  0F01  018C               	clrf	12	;volatile
 11287                           
 11288                           ;mcc_generated_files/pin_manager.c: 89:     ODCONB = 0x00;
 11289  0F02  018D               	clrf	13	;volatile
 11290                           
 11291                           ;mcc_generated_files/pin_manager.c: 90:     ODCONC = 0x00;
 11292  0F03  018E               	clrf	14	;volatile
 11293                           
 11294                           ;mcc_generated_files/pin_manager.c: 95:     SLRCONA = 0x37;
 11295  0F04  3037               	movlw	55
 11296  0F05  0026               	movlb	6	; select bank6
 11297  0F06  008C               	movwf	12	;volatile
 11298                           
 11299                           ;mcc_generated_files/pin_manager.c: 96:     SLRCONB = 0xF0;
 11300  0F07  30F0               	movlw	240
 11301  0F08  008D               	movwf	13	;volatile
 11302                           
 11303                           ;mcc_generated_files/pin_manager.c: 97:     SLRCONC = 0xFF;
 11304  0F09  30FF               	movlw	255
 11305  0F0A  008E               	movwf	14	;volatile
 11306                           
 11307                           ;mcc_generated_files/pin_manager.c: 105:     PIE0bits.IOCIE = 1;
 11308  0F0B  0021               	movlb	1	; select bank1
 11309  0F0C  1610               	bsf	16,4	;volatile
 11310                           
 11311                           ;mcc_generated_files/pin_manager.c: 108:     SSP2DATPPS = 0x0C;
 11312  0F0D  300C               	movlw	12
 11313  0F0E  003C               	movlb	28	; select bank28
 11314  0F0F  009E               	movwf	30	;volatile
 11315                           
 11316                           ;mcc_generated_files/pin_manager.c: 109:     SSP1CLKPPS = 0x0F;
 11317  0F10  300F               	movlw	15
 11318  0F11  00A0               	movwf	32	;volatile
 11319                           
 11320                           ;mcc_generated_files/pin_manager.c: 110:     RB6PPS = 0x1A;
 11321  0F12  301A               	movlw	26
 11322  0F13  003D               	movlb	29	; select bank29
 11323  0F14  009E               	movwf	30	;volatile
 11324                           
 11325                           ;mcc_generated_files/pin_manager.c: 111:     RB7PPS = 0x18;
 11326  0F15  3018               	movlw	24
 11327  0F16  009F               	movwf	31	;volatile
 11328                           
 11329                           ;mcc_generated_files/pin_manager.c: 112:     RB5PPS = 0x19;
 11330  0F17  3019               	movlw	25
 11331  0F18  009D               	movwf	29	;volatile
 11332                           
 11333                           ;mcc_generated_files/pin_manager.c: 113:     RC2PPS = 0x1B;
 11334  0F19  301B               	movlw	27
 11335  0F1A  00A2               	movwf	34	;volatile
 11336                           
 11337                           ;mcc_generated_files/pin_manager.c: 114:     SSP1DATPPS = 0x0D;
 11338  0F1B  300D               	movlw	13
 11339  0F1C  003C               	movlb	28	; select bank28
 11340  0F1D  00A1               	movwf	33	;volatile
 11341                           
 11342                           ;mcc_generated_files/pin_manager.c: 115:     SSP2CLKPPS = 0x0E;
 11343  0F1E  300E               	movlw	14
 11344  0F1F  009D               	movwf	29	;volatile
 11345  0F20  0008               	return
 11346  0F21                     __end_of_PIN_MANAGER_Initialize:	
 11347                           
 11348                           	psect	text58
 11349  0A82                     __ptext58:	
 11350 ;; *************** function _OSCILLATOR_Initialize *****************
 11351 ;; Defined at:
 11352 ;;		line 60 in file "mcc_generated_files/mcc.c"
 11353 ;; Parameters:    Size  Location     Type
 11354 ;;		None
 11355 ;; Auto vars:     Size  Location     Type
 11356 ;;		None
 11357 ;; Return value:  Size  Location     Type
 11358 ;;                  1    wreg      void 
 11359 ;; Registers used:
 11360 ;;		wreg, status,2
 11361 ;; Tracked objects:
 11362 ;;		On entry : 0/0
 11363 ;;		On exit  : 0/0
 11364 ;;		Unchanged: 0/0
 11365 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11366 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11367 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11368 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11369 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11370 ;;Total ram usage:        0 bytes
 11371 ;; Hardware stack levels used:    1
 11372 ;; Hardware stack levels required when called:    5
 11373 ;; This function calls:
 11374 ;;		Nothing
 11375 ;; This function is called by:
 11376 ;;		_SYSTEM_Initialize
 11377 ;; This function uses a non-reentrant model
 11378 ;;
 11379                           
 11380                           
 11381                           ;psect for function _OSCILLATOR_Initialize
 11382  0A82                     _OSCILLATOR_Initialize:	
 11383                           
 11384                           ;mcc_generated_files/mcc.c: 63:     OSCCON1 = 0x62;
 11385                           
 11386                           ;incstack = 0
 11387                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 11388  0A82  3062               	movlw	98
 11389  0A83  0032               	movlb	18	; select bank18
 11390  0A84  0099               	movwf	25	;volatile
 11391                           
 11392                           ;mcc_generated_files/mcc.c: 65:     OSCCON3 = 0x00;
 11393  0A85  019B               	clrf	27	;volatile
 11394                           
 11395                           ;mcc_generated_files/mcc.c: 67:     OSCEN = 0x00;
 11396  0A86  019D               	clrf	29	;volatile
 11397                           
 11398                           ;mcc_generated_files/mcc.c: 69:     OSCFRQ = 0x00;
 11399  0A87  019F               	clrf	31	;volatile
 11400                           
 11401                           ;mcc_generated_files/mcc.c: 71:     OSCTUNE = 0x00;
 11402  0A88  019E               	clrf	30	;volatile
 11403  0A89  0008               	return
 11404  0A8A                     __end_of_OSCILLATOR_Initialize:	
 11405                           
 11406                           	psect	intentry
 11407  0004                     __pintentry:	
 11408 ;; *************** function _INTERRUPT_InterruptManager *****************
 11409 ;; Defined at:
 11410 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 11411 ;; Parameters:    Size  Location     Type
 11412 ;;		None
 11413 ;; Auto vars:     Size  Location     Type
 11414 ;;		None
 11415 ;; Return value:  Size  Location     Type
 11416 ;;                  1    wreg      void 
 11417 ;; Registers used:
 11418 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11419 ;; Tracked objects:
 11420 ;;		On entry : 0/0
 11421 ;;		On exit  : 0/0
 11422 ;;		Unchanged: 0/0
 11423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11424 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11425 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11426 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11427 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11428 ;;Total ram usage:        0 bytes
 11429 ;; Hardware stack levels used:    1
 11430 ;; Hardware stack levels required when called:    4
 11431 ;; This function calls:
 11432 ;;		Absolute function
 11433 ;;		_PIN_MANAGER_IOC
 11434 ;;		_i2c_ISR
 11435 ;;		_i2c_busCollisionISR
 11436 ;; This function is called by:
 11437 ;;		Interrupt level 1
 11438 ;; This function uses a non-reentrant model
 11439 ;;
 11440                           
 11441  0004                     _INTERRUPT_InterruptManager:	
 11442                           
 11443                           ;incstack = 0
 11444  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 11445                           
 11446                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11447  0005  3180               	pagesel	$
 11448                           
 11449                           ;mcc_generated_files/interrupt_manager.c: 55:     if(PIE0bits.IOCIE == 1 && PIR0bits.IOC
      +                          IF == 1)
 11450  0006  0021               	movlb	1	; select bank1
 11451  0007  1E10               	btfss	16,4	;volatile
 11452  0008  2810               	goto	i1l245
 11453  0009  0020               	movlb	0	; select bank0
 11454  000A  1E10               	btfss	16,4	;volatile
 11455  000B  2810               	goto	i1l245
 11456                           
 11457                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         PIN_MANAGER_IOC();
 11458  000C  3189  21DB  3180   	fcall	_PIN_MANAGER_IOC
 11459                           
 11460                           ;mcc_generated_files/interrupt_manager.c: 58:     }
 11461  000F  2829               	goto	i1l253
 11462  0010                     i1l245:	
 11463                           ;mcc_generated_files/interrupt_manager.c: 59:     else if(INTCONbits.PEIE == 1)
 11464                           
 11465  0010  1F0B               	btfss	11,6	;volatile
 11466  0011  2829               	goto	i1l253
 11467                           
 11468                           ;mcc_generated_files/interrupt_manager.c: 60:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 61:         if(PIE1bits.BCL1IE == 1 && PIR1bits.BCL1IF == 1)
 11469  0012  0021               	movlb	1	; select bank1
 11470  0013  1D11               	btfss	17,2	;volatile
 11471  0014  281E               	goto	i1l248
 11472  0015  0020               	movlb	0	; select bank0
 11473  0016  1D11               	btfss	17,2	;volatile
 11474  0017  281E               	goto	i1l248
 11475                           
 11476                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             i2c1_driver_busCollisionISR();
 11477  0018  0871               	movf	_i2c1_driver_busCollisionISR+1,w
 11478  0019  008A               	movwf	10
 11479  001A  0870               	movf	_i2c1_driver_busCollisionISR,w
 11480  001B  000A               	callw
 11481  001C  3180               	pagesel	$
 11482                           
 11483                           ;mcc_generated_files/interrupt_manager.c: 64:         }
 11484  001D  2829               	goto	i1l253
 11485  001E                     i1l248:	
 11486                           ;mcc_generated_files/interrupt_manager.c: 65:         else if(PIE1bits.SSP1IE == 1 && PI
      +                          R1bits.SSP1IF == 1)
 11487                           
 11488  001E  0021               	movlb	1	; select bank1
 11489  001F  1D91               	btfss	17,3	;volatile
 11490  0020  2829               	goto	i1l253
 11491  0021  0020               	movlb	0	; select bank0
 11492  0022  1D91               	btfss	17,3	;volatile
 11493  0023  2829               	goto	i1l253
 11494                           
 11495                           ;mcc_generated_files/interrupt_manager.c: 66:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 67:             i2c1_driver_i2cISR();
 11496  0024  086C               	movf	_i2c1_driver_i2cISR+1,w
 11497  0025  008A               	movwf	10
 11498  0026  086B               	movf	_i2c1_driver_i2cISR,w
 11499  0027  000A               	callw
 11500  0028  3180               	pagesel	$
 11501  0029                     i1l253:	
 11502                           ;mcc_generated_files/interrupt_manager.c: 75:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 77:     }
 11503                           
 11504                           ;mcc_generated_files/interrupt_manager.c: 68:         }
 11505                           
 11506  0029  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 11507  002A  0009               	retfie
 11508  002B                     __end_of_INTERRUPT_InterruptManager:	
 11509                           
 11510                           	psect	text60
 11511  09F5                     __ptext60:	
 11512 ;; *************** function _i2c_busCollisionISR *****************
 11513 ;; Defined at:
 11514 ;;		line 435 in file "mcc_generated_files/drivers/i2c_master.c"
 11515 ;; Parameters:    Size  Location     Type
 11516 ;;		None
 11517 ;; Auto vars:     Size  Location     Type
 11518 ;;		None
 11519 ;; Return value:  Size  Location     Type
 11520 ;;                  1    wreg      void 
 11521 ;; Registers used:
 11522 ;;		status,2, status,0, pclath, cstack
 11523 ;; Tracked objects:
 11524 ;;		On entry : 0/0
 11525 ;;		On exit  : 0/0
 11526 ;;		Unchanged: 0/0
 11527 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11528 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11529 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11530 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11531 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11532 ;;Total ram usage:        0 bytes
 11533 ;; Hardware stack levels used:    1
 11534 ;; Hardware stack levels required when called:    1
 11535 ;; This function calls:
 11536 ;;		_i2c1_driver_clearBusCollision
 11537 ;; This function is called by:
 11538 ;;		_i2c_open
 11539 ;;		_INTERRUPT_InterruptManager
 11540 ;; This function uses a non-reentrant model
 11541 ;;
 11542                           
 11543                           
 11544                           ;psect for function _i2c_busCollisionISR
 11545  09F5                     _i2c_busCollisionISR:	
 11546                           
 11547                           ;mcc_generated_files/drivers/i2c_master.c: 437:     i2c1_driver_clearBusCollision();
 11548                           
 11549                           ;incstack = 0
 11550                           ; Regs used in _i2c_busCollisionISR: [status,2+status,0+pclath+cstack]
 11551  09F5  3189  21F2         	fcall	_i2c1_driver_clearBusCollision
 11552  09F7  0008               	return
 11553  09F8                     __end_of_i2c_busCollisionISR:	
 11554                           
 11555                           	psect	text61
 11556  09F2                     __ptext61:	
 11557 ;; *************** function _i2c1_driver_clearBusCollision *****************
 11558 ;; Defined at:
 11559 ;;		line 253 in file "mcc_generated_files/i2c1_driver.c"
 11560 ;; Parameters:    Size  Location     Type
 11561 ;;		None
 11562 ;; Auto vars:     Size  Location     Type
 11563 ;;		None
 11564 ;; Return value:  Size  Location     Type
 11565 ;;                  1    wreg      void 
 11566 ;; Registers used:
 11567 ;;		None
 11568 ;; Tracked objects:
 11569 ;;		On entry : 0/0
 11570 ;;		On exit  : 0/0
 11571 ;;		Unchanged: 0/0
 11572 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11573 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11574 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11575 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11576 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11577 ;;Total ram usage:        0 bytes
 11578 ;; Hardware stack levels used:    1
 11579 ;; This function calls:
 11580 ;;		Nothing
 11581 ;; This function is called by:
 11582 ;;		_i2c_busCollisionISR
 11583 ;; This function uses a non-reentrant model
 11584 ;;
 11585                           
 11586                           
 11587                           ;psect for function _i2c1_driver_clearBusCollision
 11588  09F2                     _i2c1_driver_clearBusCollision:	
 11589                           
 11590                           ;mcc_generated_files/i2c1_driver.c: 255:     PIR1bits.BCL1IF = 0;
 11591                           
 11592                           ;incstack = 0
 11593                           ; Regs used in _i2c1_driver_clearBusCollision: []
 11594  09F2  0020               	movlb	0	; select bank0
 11595  09F3  1111               	bcf	17,2	;volatile
 11596  09F4  0008               	return
 11597  09F5                     __end_of_i2c1_driver_clearBusCollision:	
 11598                           
 11599                           	psect	text62
 11600  0C24                     __ptext62:	
 11601 ;; *************** function _i2c_ISR *****************
 11602 ;; Defined at:
 11603 ;;		line 419 in file "mcc_generated_files/drivers/i2c_master.c"
 11604 ;; Parameters:    Size  Location     Type
 11605 ;;		None
 11606 ;; Auto vars:     Size  Location     Type
 11607 ;;		None
 11608 ;; Return value:  Size  Location     Type
 11609 ;;                  1    wreg      void 
 11610 ;; Registers used:
 11611 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11612 ;; Tracked objects:
 11613 ;;		On entry : 0/0
 11614 ;;		On exit  : 0/0
 11615 ;;		Unchanged: 0/0
 11616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11617 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11618 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11619 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11620 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11621 ;;Total ram usage:        3 bytes
 11622 ;; Hardware stack levels used:    1
 11623 ;; Hardware stack levels required when called:    3
 11624 ;; This function calls:
 11625 ;;		_do_I2C_DO_ACK
 11626 ;;		_do_I2C_DO_ADDRESS_NACK
 11627 ;;		_do_I2C_DO_NACK_RESTART
 11628 ;;		_do_I2C_DO_NACK_STOP
 11629 ;;		_do_I2C_IDLE
 11630 ;;		_do_I2C_RCEN
 11631 ;;		_do_I2C_RESET
 11632 ;;		_do_I2C_RX
 11633 ;;		_do_I2C_SEND_ADR_READ
 11634 ;;		_do_I2C_SEND_ADR_WRITE
 11635 ;;		_do_I2C_SEND_RESTART
 11636 ;;		_do_I2C_SEND_RESTART_READ
 11637 ;;		_do_I2C_SEND_RESTART_WRITE
 11638 ;;		_do_I2C_SEND_STOP
 11639 ;;		_do_I2C_TX
 11640 ;;		_do_I2C_TX_EMPTY
 11641 ;;		_i2c1_driver_isNACK
 11642 ;;		_mssp1_clearIRQ
 11643 ;; This function is called by:
 11644 ;;		_i2c_open
 11645 ;;		_i2c_poller
 11646 ;;		_INTERRUPT_InterruptManager
 11647 ;; This function uses a non-reentrant model
 11648 ;;
 11649                           
 11650                           
 11651                           ;psect for function _i2c_ISR
 11652  0C24                     _i2c_ISR:	
 11653                           
 11654                           ;mcc_generated_files/drivers/i2c_master.c: 421:     mssp1_clearIRQ();
 11655                           
 11656                           ;incstack = 0
 11657                           ; Regs used in _i2c_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11658  0C24  3189  21EF  318C   	fcall	_mssp1_clearIRQ
 11659                           
 11660                           ;mcc_generated_files/drivers/i2c_master.c: 427:     if(i2c_status.addressNACKCheck && i2
      +                          c1_driver_isNACK())
 11661  0C27  0023               	movlb	3	; select bank3
 11662  0C28  1DA0               	btfss	_i2c_status^(0+384),3
 11663  0C29  2C34               	goto	i1l4700
 11664  0C2A  318A  2272  318C   	fcall	_i2c1_driver_isNACK
 11665  0C2D  1C03               	btfss	3,0
 11666  0C2E  2C34               	goto	i1l4700
 11667                           
 11668                           ;mcc_generated_files/drivers/i2c_master.c: 428:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 429:         i2c_status.state = I2C_ADDRESS_NACK;
 11669  0C2F  300F               	movlw	15
 11670  0C30  00F9               	movwf	??_i2c_ISR
 11671  0C31  0879               	movf	??_i2c_ISR,w
 11672  0C32  0023               	movlb	3	; select bank3
 11673  0C33  00A9               	movwf	(_i2c_status^(0+384)+9)
 11674  0C34                     i1l4700:	
 11675                           
 11676                           ;mcc_generated_files/drivers/i2c_master.c: 432:     i2c_status.state = fsmStateTable[i2c
      +                          _status.state]();
 11677  0C34  0023               	movlb	3	; select bank3
 11678  0C35  0829               	movf	(_i2c_status^(0+384)+9),w
 11679  0C36  00F9               	movwf	??_i2c_ISR
 11680  0C37  01FA               	clrf	??_i2c_ISR+1
 11681  0C38  35F9               	lslf	??_i2c_ISR,f
 11682  0C39  0DFA               	rlf	??_i2c_ISR+1,f
 11683  0C3A  3000               	movlw	low (_fsmStateTable| (0+32768))
 11684  0C3B  0779               	addwf	??_i2c_ISR,w
 11685  0C3C  0084               	movwf	4
 11686  0C3D  3090               	movlw	high (_fsmStateTable| (0+32768))
 11687  0C3E  3D7A               	addwfc	??_i2c_ISR+1,w
 11688  0C3F  0085               	movwf	5
 11689  0C40  3F01               	moviw [1]fsr0
 11690  0C41  008A               	movwf	10
 11691  0C42  3F00               	moviw [0]fsr0
 11692  0C43  000A               	callw
 11693  0C44  318C               	pagesel	$
 11694  0C45  00FB               	movwf	??_i2c_ISR+2
 11695  0C46  087B               	movf	??_i2c_ISR+2,w
 11696  0C47  0023               	movlb	3	; select bank3
 11697  0C48  00A9               	movwf	(_i2c_status^(0+384)+9)
 11698  0C49  0008               	return
 11699  0C4A                     __end_of_i2c_ISR:	
 11700                           
 11701                           	psect	text63
 11702  09EF                     __ptext63:	
 11703 ;; *************** function _mssp1_clearIRQ *****************
 11704 ;; Defined at:
 11705 ;;		line 53 in file "mcc_generated_files/i2c1_driver.c"
 11706 ;; Parameters:    Size  Location     Type
 11707 ;;		None
 11708 ;; Auto vars:     Size  Location     Type
 11709 ;;		None
 11710 ;; Return value:  Size  Location     Type
 11711 ;;                  1    wreg      void 
 11712 ;; Registers used:
 11713 ;;		None
 11714 ;; Tracked objects:
 11715 ;;		On entry : 0/0
 11716 ;;		On exit  : 0/0
 11717 ;;		Unchanged: 0/0
 11718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11719 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11720 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11721 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11722 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11723 ;;Total ram usage:        0 bytes
 11724 ;; Hardware stack levels used:    1
 11725 ;; This function calls:
 11726 ;;		Nothing
 11727 ;; This function is called by:
 11728 ;;		_i2c_ISR
 11729 ;;		_i2c_open
 11730 ;;		_i2c_close
 11731 ;; This function uses a non-reentrant model
 11732 ;;
 11733                           
 11734                           
 11735                           ;psect for function _mssp1_clearIRQ
 11736  09EF                     _mssp1_clearIRQ:	
 11737                           
 11738                           ;mcc_generated_files/i2c1_driver.c: 55:         SSP1STAT = 0x00;
 11739                           
 11740                           ;incstack = 0
 11741                           ; Regs used in _mssp1_clearIRQ: []
 11742  09EF  0020               	movlb	0	; select bank0
 11743  09F0  1191               	bcf	17,3	;volatile
 11744  09F1  0008               	return
 11745  09F2                     __end_of_mssp1_clearIRQ:	
 11746                           
 11747                           	psect	text64
 11748  0F21                     __ptext64:	
 11749 ;; *************** function _do_I2C_RX *****************
 11750 ;; Defined at:
 11751 ;;		line 357 in file "mcc_generated_files/drivers/i2c_master.c"
 11752 ;; Parameters:    Size  Location     Type
 11753 ;;		None
 11754 ;; Auto vars:     Size  Location     Type
 11755 ;;		None
 11756 ;; Return value:  Size  Location     Type
 11757 ;;                  1    wreg      enum E7120
 11758 ;; Registers used:
 11759 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11760 ;; Tracked objects:
 11761 ;;		On entry : 0/0
 11762 ;;		On exit  : 0/0
 11763 ;;		Unchanged: 0/0
 11764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11766 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11767 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11768 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11769 ;;Total ram usage:        3 bytes
 11770 ;; Hardware stack levels used:    1
 11771 ;; Hardware stack levels required when called:    2
 11772 ;; This function calls:
 11773 ;;		_do_I2C_DO_NACK_RESTART
 11774 ;;		_do_I2C_DO_NACK_STOP
 11775 ;;		_i2c1_driver_sendACK
 11776 ;;		_returnReset
 11777 ;;		_returnStop
 11778 ;;		i1_i2c1_driver_getRXData
 11779 ;; This function is called by:
 11780 ;;		_i2c_ISR
 11781 ;; This function uses a non-reentrant model
 11782 ;;
 11783                           
 11784                           
 11785                           ;psect for function _do_I2C_RX
 11786  0F21                     _do_I2C_RX:	
 11787                           
 11788                           ;mcc_generated_files/drivers/i2c_master.c: 359:     *i2c_status.data_ptr++ = i2c1_driver
      +                          _getRXData();
 11789                           
 11790                           ;incstack = 0
 11791                           ; Regs used in _do_I2C_RX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11792  0F21  3189  21E9  318F   	fcall	i1_i2c1_driver_getRXData
 11793  0F24  00F6               	movwf	??_do_I2C_RX
 11794  0F25  0023               	movlb	3	; select bank3
 11795  0F26  0822               	movf	(low ((_i2c_status| (0+256)+2)))^(0+128),w
 11796  0F27  0086               	movwf	6
 11797  0F28  0187               	clrf	7
 11798  0F29  0876               	movf	??_do_I2C_RX,w
 11799  0F2A  0081               	movwf	1
 11800  0F2B  3001               	movlw	1
 11801  0F2C  00F6               	movwf	??_do_I2C_RX
 11802  0F2D  0876               	movf	??_do_I2C_RX,w
 11803  0F2E  07A2               	addwf	(low ((_i2c_status| (0+256)+2)))^(0+128),f
 11804                           
 11805                           ;mcc_generated_files/drivers/i2c_master.c: 360:     if(--i2c_status.data_length)
 11806  0F2F  3001               	movlw	1
 11807  0F30  02A3               	subwf	(_i2c_status^(0+384)+3),f
 11808  0F31  3000               	movlw	0
 11809  0F32  3BA4               	subwfb	((_i2c_status+1)^(0+384)+3),f
 11810  0F33  0823               	movf	(_i2c_status^(0+384)+3),w
 11811  0F34  0424               	iorwf	((_i2c_status+1)^(0+384)+3),w
 11812  0F35  1903               	btfsc	3,2
 11813  0F36  2F3B               	goto	i1l173
 11814                           
 11815                           ;mcc_generated_files/drivers/i2c_master.c: 361:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 362:         i2c1_driver_sendACK();
 11816  0F37  318A  2213         	fcall	_i2c1_driver_sendACK
 11817                           
 11818                           ;mcc_generated_files/drivers/i2c_master.c: 363:         return I2C_RCEN;
 11819  0F39  3005               	movlw	5
 11820  0F3A  0008               	return
 11821  0F3B                     i1l173:	
 11822                           ;mcc_generated_files/drivers/i2c_master.c: 365:     else
 11823                           
 11824                           
 11825                           ;mcc_generated_files/drivers/i2c_master.c: 366:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 367:         i2c_status.bufferFree = 1;
 11826  0F3B  1520               	bsf	_i2c_status^(0+384),2
 11827                           
 11828                           ;mcc_generated_files/drivers/i2c_master.c: 368:         switch(i2c_status.callbackTable[
      +                          i2c_dataComplete](i2c_status.callbackPayload[i2c_dataComplete]))
 11829  0F3C  2F43               	goto	i1l4256
 11830  0F3D                     i1l4246:	
 11831                           
 11832                           ;mcc_generated_files/drivers/i2c_master.c: 372:                 return do_I2C_DO_NACK_RE
      +                          START();
 11833  0F3D  318A  2233         	fcall	_do_I2C_DO_NACK_RESTART
 11834  0F3F  0008               	return
 11835  0F40                     i1l4250:	
 11836                           
 11837                           ;mcc_generated_files/drivers/i2c_master.c: 376:                 return do_I2C_DO_NACK_ST
      +                          OP();
 11838  0F40  318A  222F         	fcall	_do_I2C_DO_NACK_STOP
 11839  0F42  0008               	return
 11840  0F43                     i1l4256:	
 11841  0F43  0837               	movf	(low ((_i2c_status| (0+256)+23)))^(0+128),w
 11842  0F44  00F6               	movwf	??_do_I2C_RX
 11843  0F45  0876               	movf	??_do_I2C_RX,w
 11844  0F46  00F6               	movwf	returnReset@p
 11845  0F47  300B               	movlw	11
 11846  0F48  3EA0               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 11847  0F49  0086               	movwf	6
 11848  0F4A  3001               	movlw	1	; select bank3/4
 11849  0F4B  0087               	movwf	7
 11850  0F4C  3F41               	moviw [1]fsr1
 11851  0F4D  008A               	movwf	10
 11852  0F4E  3F40               	moviw [0]fsr1
 11853  0F4F  000A               	callw
 11854  0F50  318F               	pagesel	$
 11855  0F51  00F7               	movwf	??_do_I2C_RX+1
 11856  0F52  01F8               	clrf	??_do_I2C_RX+2
 11857                           
 11858                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11859                           ; Switch size 1, requested type "simple"
 11860                           ; Number of cases is 1, Range of values is 0 to 0
 11861                           ; switch strategies available:
 11862                           ; Name         Instructions Cycles
 11863                           ; simple_byte            4     3 (average)
 11864                           ; direct_byte            8     6 (fixed)
 11865                           ; jumptable            260     6 (fixed)
 11866                           ;	Chosen strategy is simple_byte
 11867  0F53  0878               	movf	??_do_I2C_RX+2,w
 11868  0F54  3A00               	xorlw	0	; case 0
 11869  0F55  1903               	skipnz
 11870  0F56  2F58               	goto	i1l6722
 11871  0F57  2F40               	goto	i1l4250
 11872  0F58                     i1l6722:	
 11873                           
 11874                           ; Switch size 1, requested type "simple"
 11875                           ; Number of cases is 4, Range of values is 1 to 4
 11876                           ; switch strategies available:
 11877                           ; Name         Instructions Cycles
 11878                           ; simple_byte           13     7 (average)
 11879                           ; direct_byte           17     9 (fixed)
 11880                           ; jumptable            263     9 (fixed)
 11881                           ;	Chosen strategy is simple_byte
 11882  0F58  0877               	movf	??_do_I2C_RX+1,w
 11883  0F59  3A01               	xorlw	1	; case 1
 11884  0F5A  1903               	skipnz
 11885  0F5B  2F40               	goto	i1l4250
 11886  0F5C  3A03               	xorlw	3	; case 2
 11887  0F5D  1903               	skipnz
 11888  0F5E  2F3D               	goto	i1l4246
 11889  0F5F  3A01               	xorlw	1	; case 3
 11890  0F60  1903               	skipnz
 11891  0F61  2F3D               	goto	i1l4246
 11892  0F62  3A07               	xorlw	7	; case 4
 11893  0F63  1903               	skipnz
 11894  0F64  2F40               	goto	i1l4250
 11895  0F65  2F40               	goto	i1l4250
 11896  0F66  0008               	return
 11897  0F67                     __end_of_do_I2C_RX:	
 11898                           
 11899                           	psect	text65
 11900  0FB1                     __ptext65:	
 11901 ;; *************** function _do_I2C_TX *****************
 11902 ;; Defined at:
 11903 ;;		line 333 in file "mcc_generated_files/drivers/i2c_master.c"
 11904 ;; Parameters:    Size  Location     Type
 11905 ;;		None
 11906 ;; Auto vars:     Size  Location     Type
 11907 ;;		None
 11908 ;; Return value:  Size  Location     Type
 11909 ;;                  1    wreg      enum E7120
 11910 ;; Registers used:
 11911 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11912 ;; Tracked objects:
 11913 ;;		On entry : 0/0
 11914 ;;		On exit  : 0/0
 11915 ;;		Unchanged: 0/0
 11916 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11917 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11918 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11919 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11920 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11921 ;;Total ram usage:        3 bytes
 11922 ;; Hardware stack levels used:    1
 11923 ;; Hardware stack levels required when called:    2
 11924 ;; This function calls:
 11925 ;;		_do_I2C_SEND_RESTART_READ
 11926 ;;		_do_I2C_SEND_RESTART_WRITE
 11927 ;;		_do_I2C_SEND_STOP
 11928 ;;		_i2c1_driver_isNACK
 11929 ;;		_returnReset
 11930 ;;		_returnStop
 11931 ;;		i1_i2c1_driver_TXData
 11932 ;; This function is called by:
 11933 ;;		_i2c_ISR
 11934 ;; This function uses a non-reentrant model
 11935 ;;
 11936                           
 11937                           
 11938                           ;psect for function _do_I2C_TX
 11939  0FB1                     _do_I2C_TX:	
 11940                           
 11941                           ;mcc_generated_files/drivers/i2c_master.c: 335:     if(i2c1_driver_isNACK())
 11942                           
 11943                           ;incstack = 0
 11944                           ; Regs used in _do_I2C_TX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11945  0FB1  318A  2272  318F   	fcall	_i2c1_driver_isNACK
 11946  0FB4  1803               	btfsc	3,0
 11947  0FB5  2FC0               	goto	i1l4216
 11948  0FB6  2FE4               	goto	i1l157
 11949  0FB7                     i1l4202:	
 11950                           
 11951                           ;mcc_generated_files/drivers/i2c_master.c: 340:                 return do_I2C_SEND_RESTA
      +                          RT_READ();
 11952  0FB7  318A  221B         	fcall	_do_I2C_SEND_RESTART_READ
 11953  0FB9  0008               	return
 11954  0FBA                     i1l4206:	
 11955                           
 11956                           ;mcc_generated_files/drivers/i2c_master.c: 342:                 return do_I2C_SEND_RESTA
      +                          RT_WRITE();
 11957  0FBA  318A  221F         	fcall	_do_I2C_SEND_RESTART_WRITE
 11958  0FBC  0008               	return
 11959  0FBD                     i1l4210:	
 11960                           
 11961                           ;mcc_generated_files/drivers/i2c_master.c: 346:                 return do_I2C_SEND_STOP(
      +                          );
 11962  0FBD  318A  2227         	fcall	_do_I2C_SEND_STOP
 11963  0FBF  0008               	return
 11964  0FC0                     i1l4216:	
 11965  0FC0  0023               	movlb	3	; select bank3
 11966  0FC1  083A               	movf	(low ((_i2c_status| (0+256)+26)))^(0+128),w
 11967  0FC2  00F6               	movwf	??_do_I2C_TX
 11968  0FC3  0876               	movf	??_do_I2C_TX,w
 11969  0FC4  00F6               	movwf	returnReset@p
 11970  0FC5  3011               	movlw	17
 11971  0FC6  3EA0               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 11972  0FC7  0086               	movwf	6
 11973  0FC8  3001               	movlw	1	; select bank3/4
 11974  0FC9  0087               	movwf	7
 11975  0FCA  3F41               	moviw [1]fsr1
 11976  0FCB  008A               	movwf	10
 11977  0FCC  3F40               	moviw [0]fsr1
 11978  0FCD  000A               	callw
 11979  0FCE  318F               	pagesel	$
 11980  0FCF  00F7               	movwf	??_do_I2C_TX+1
 11981  0FD0  01F8               	clrf	??_do_I2C_TX+2
 11982                           
 11983                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11984                           ; Switch size 1, requested type "simple"
 11985                           ; Number of cases is 1, Range of values is 0 to 0
 11986                           ; switch strategies available:
 11987                           ; Name         Instructions Cycles
 11988                           ; simple_byte            4     3 (average)
 11989                           ; direct_byte            8     6 (fixed)
 11990                           ; jumptable            260     6 (fixed)
 11991                           ;	Chosen strategy is simple_byte
 11992  0FD1  0878               	movf	??_do_I2C_TX+2,w
 11993  0FD2  3A00               	xorlw	0	; case 0
 11994  0FD3  1903               	skipnz
 11995  0FD4  2FD6               	goto	i1l6724
 11996  0FD5  2FBD               	goto	i1l4210
 11997  0FD6                     i1l6724:	
 11998                           
 11999                           ; Switch size 1, requested type "simple"
 12000                           ; Number of cases is 4, Range of values is 1 to 4
 12001                           ; switch strategies available:
 12002                           ; Name         Instructions Cycles
 12003                           ; simple_byte           13     7 (average)
 12004                           ; direct_byte           17     9 (fixed)
 12005                           ; jumptable            263     9 (fixed)
 12006                           ;	Chosen strategy is simple_byte
 12007  0FD6  0877               	movf	??_do_I2C_TX+1,w
 12008  0FD7  3A01               	xorlw	1	; case 1
 12009  0FD8  1903               	skipnz
 12010  0FD9  2FBD               	goto	i1l4210
 12011  0FDA  3A03               	xorlw	3	; case 2
 12012  0FDB  1903               	skipnz
 12013  0FDC  2FB7               	goto	i1l4202
 12014  0FDD  3A01               	xorlw	1	; case 3
 12015  0FDE  1903               	skipnz
 12016  0FDF  2FBA               	goto	i1l4206
 12017  0FE0  3A07               	xorlw	7	; case 4
 12018  0FE1  1903               	skipnz
 12019  0FE2  2FBD               	goto	i1l4210
 12020  0FE3  2FBD               	goto	i1l4210
 12021  0FE4                     i1l157:	
 12022                           ;mcc_generated_files/drivers/i2c_master.c: 349:     else
 12023                           
 12024                           
 12025                           ;mcc_generated_files/drivers/i2c_master.c: 350:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 351:         i2c_status.addressNACKCheck = 0;
 12026  0FE4  0023               	movlb	3	; select bank3
 12027  0FE5  11A0               	bcf	_i2c_status^(0+384),3
 12028                           
 12029                           ;mcc_generated_files/drivers/i2c_master.c: 352:         i2c1_driver_TXData(*i2c_status.d
      +                          ata_ptr++);
 12030  0FE6  3002               	movlw	2
 12031  0FE7  3EA0               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 12032  0FE8  0086               	movwf	6
 12033  0FE9  3001               	movlw	1	; select bank3/4
 12034  0FEA  0087               	movwf	7
 12035  0FEB  3F40               	moviw [0]fsr1
 12036  0FEC  0084               	movwf	4
 12037  0FED  0185               	clrf	5
 12038  0FEE  0A81               	incf	1,f
 12039  0FEF  0800               	movf	0,w
 12040  0FF0  318A  223F  318F   	fcall	i1_i2c1_driver_TXData
 12041                           
 12042                           ;mcc_generated_files/drivers/i2c_master.c: 353:         return (--i2c_status.data_length
      +                          )?I2C_TX:I2C_TX_EMPTY;
 12043  0FF3  3001               	movlw	1
 12044  0FF4  0023               	movlb	3	; select bank3
 12045  0FF5  02A3               	subwf	(_i2c_status^(0+384)+3),f
 12046  0FF6  3000               	movlw	0
 12047  0FF7  3BA4               	subwfb	((_i2c_status+1)^(0+384)+3),f
 12048  0FF8  0823               	movf	(_i2c_status^(0+384)+3),w
 12049  0FF9  0424               	iorwf	((_i2c_status+1)^(0+384)+3),w
 12050  0FFA  1D03               	btfss	3,2
 12051  0FFB  2FFE               	goto	i1l4224
 12052  0FFC  3006               	movlw	6
 12053  0FFD  0008               	return
 12054  0FFE                     i1l4224:	
 12055  0FFE  3003               	movlw	3
 12056  0FFF  0008               	return
 12057  1000                     __end_of_do_I2C_TX:	
 12058                           
 12059                           	psect	text66
 12060  0D38                     __ptext66:	
 12061 ;; *************** function _do_I2C_DO_ADDRESS_NACK *****************
 12062 ;; Defined at:
 12063 ;;		line 319 in file "mcc_generated_files/drivers/i2c_master.c"
 12064 ;; Parameters:    Size  Location     Type
 12065 ;;		None
 12066 ;; Auto vars:     Size  Location     Type
 12067 ;;		None
 12068 ;; Return value:  Size  Location     Type
 12069 ;;                  1    wreg      enum E7120
 12070 ;; Registers used:
 12071 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12072 ;; Tracked objects:
 12073 ;;		On entry : 0/0
 12074 ;;		On exit  : 0/0
 12075 ;;		Unchanged: 0/0
 12076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12077 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12078 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12079 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12080 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12081 ;;Total ram usage:        3 bytes
 12082 ;; Hardware stack levels used:    1
 12083 ;; Hardware stack levels required when called:    2
 12084 ;; This function calls:
 12085 ;;		_do_I2C_SEND_RESTART
 12086 ;;		_do_I2C_SEND_STOP
 12087 ;;		_returnReset
 12088 ;;		_returnStop
 12089 ;; This function is called by:
 12090 ;;		_i2c_ISR
 12091 ;; This function uses a non-reentrant model
 12092 ;;
 12093                           
 12094                           
 12095                           ;psect for function _do_I2C_DO_ADDRESS_NACK
 12096  0D38                     _do_I2C_DO_ADDRESS_NACK:	
 12097                           
 12098                           ;mcc_generated_files/drivers/i2c_master.c: 321:     i2c_status.addressNACKCheck = 0;
 12099                           
 12100                           ;incstack = 0
 12101                           ; Regs used in _do_I2C_DO_ADDRESS_NACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12102  0D38  0023               	movlb	3	; select bank3
 12103  0D39  11A0               	bcf	_i2c_status^(0+384),3
 12104                           
 12105                           ;mcc_generated_files/drivers/i2c_master.c: 322:     i2c_status.error = I2C_FAIL;
 12106  0D3A  3002               	movlw	2
 12107  0D3B  00F6               	movwf	??_do_I2C_DO_ADDRESS_NACK
 12108  0D3C  0876               	movf	??_do_I2C_DO_ADDRESS_NACK,w
 12109  0D3D  00AA               	movwf	(_i2c_status^(0+384)+10)
 12110                           
 12111                           ;mcc_generated_files/drivers/i2c_master.c: 323:     switch(i2c_status.callbackTable[i2c_
      +                          addressNACK](i2c_status.callbackPayload[i2c_addressNACK]))
 12112  0D3E  2D45               	goto	i1l4190
 12113  0D3F                     i1l4180:	
 12114                           
 12115                           ;mcc_generated_files/drivers/i2c_master.c: 327:             return do_I2C_SEND_RESTART()
      +                          ;
 12116  0D3F  318A  2223         	fcall	_do_I2C_SEND_RESTART
 12117  0D41  0008               	return
 12118  0D42                     i1l4184:	
 12119                           
 12120                           ;mcc_generated_files/drivers/i2c_master.c: 329:             return do_I2C_SEND_STOP();
 12121  0D42  318A  2227         	fcall	_do_I2C_SEND_STOP
 12122  0D44  0008               	return
 12123  0D45                     i1l4190:	
 12124  0D45  0839               	movf	(low ((_i2c_status| (0+256)+25)))^(0+128),w
 12125  0D46  00F6               	movwf	??_do_I2C_DO_ADDRESS_NACK
 12126  0D47  0876               	movf	??_do_I2C_DO_ADDRESS_NACK,w
 12127  0D48  00F6               	movwf	returnReset@p
 12128  0D49  300F               	movlw	15
 12129  0D4A  3EA0               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 12130  0D4B  0086               	movwf	6
 12131  0D4C  3001               	movlw	1	; select bank3/4
 12132  0D4D  0087               	movwf	7
 12133  0D4E  3F41               	moviw [1]fsr1
 12134  0D4F  008A               	movwf	10
 12135  0D50  3F40               	moviw [0]fsr1
 12136  0D51  000A               	callw
 12137  0D52  318D               	pagesel	$
 12138  0D53  00F7               	movwf	??_do_I2C_DO_ADDRESS_NACK+1
 12139  0D54  01F8               	clrf	??_do_I2C_DO_ADDRESS_NACK+2
 12140                           
 12141                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12142                           ; Switch size 1, requested type "simple"
 12143                           ; Number of cases is 1, Range of values is 0 to 0
 12144                           ; switch strategies available:
 12145                           ; Name         Instructions Cycles
 12146                           ; simple_byte            4     3 (average)
 12147                           ; direct_byte            8     6 (fixed)
 12148                           ; jumptable            260     6 (fixed)
 12149                           ;	Chosen strategy is simple_byte
 12150  0D55  0878               	movf	??_do_I2C_DO_ADDRESS_NACK+2,w
 12151  0D56  3A00               	xorlw	0	; case 0
 12152  0D57  1903               	skipnz
 12153  0D58  2D5A               	goto	i1l6726
 12154  0D59  2D42               	goto	i1l4184
 12155  0D5A                     i1l6726:	
 12156                           
 12157                           ; Switch size 1, requested type "simple"
 12158                           ; Number of cases is 2, Range of values is 2 to 3
 12159                           ; switch strategies available:
 12160                           ; Name         Instructions Cycles
 12161                           ; simple_byte            7     4 (average)
 12162                           ; direct_byte           13     9 (fixed)
 12163                           ; jumptable            263     9 (fixed)
 12164                           ;	Chosen strategy is simple_byte
 12165  0D5A  0877               	movf	??_do_I2C_DO_ADDRESS_NACK+1,w
 12166  0D5B  3A02               	xorlw	2	; case 2
 12167  0D5C  1903               	skipnz
 12168  0D5D  2D3F               	goto	i1l4180
 12169  0D5E  3A01               	xorlw	1	; case 3
 12170  0D5F  1903               	skipnz
 12171  0D60  2D3F               	goto	i1l4180
 12172  0D61  2D42               	goto	i1l4184
 12173  0D62  0008               	return
 12174  0D63                     __end_of_do_I2C_DO_ADDRESS_NACK:	
 12175                           
 12176                           	psect	text67
 12177  0A33                     __ptext67:	
 12178 ;; *************** function _do_I2C_DO_NACK_RESTART *****************
 12179 ;; Defined at:
 12180 ;;		line 311 in file "mcc_generated_files/drivers/i2c_master.c"
 12181 ;; Parameters:    Size  Location     Type
 12182 ;;		None
 12183 ;; Auto vars:     Size  Location     Type
 12184 ;;		None
 12185 ;; Return value:  Size  Location     Type
 12186 ;;                  1    wreg      enum E7120
 12187 ;; Registers used:
 12188 ;;		wreg, status,2, status,0, pclath, cstack
 12189 ;; Tracked objects:
 12190 ;;		On entry : 0/0
 12191 ;;		On exit  : 0/0
 12192 ;;		Unchanged: 0/0
 12193 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12194 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12195 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12196 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12197 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12198 ;;Total ram usage:        0 bytes
 12199 ;; Hardware stack levels used:    1
 12200 ;; Hardware stack levels required when called:    1
 12201 ;; This function calls:
 12202 ;;		i1_i2c1_driver_sendNACK
 12203 ;; This function is called by:
 12204 ;;		_do_I2C_RX
 12205 ;;		_i2c_ISR
 12206 ;; This function uses a non-reentrant model
 12207 ;;
 12208                           
 12209                           
 12210                           ;psect for function _do_I2C_DO_NACK_RESTART
 12211  0A33                     _do_I2C_DO_NACK_RESTART:	
 12212                           
 12213                           ;mcc_generated_files/drivers/i2c_master.c: 313:     i2c1_driver_sendNACK();
 12214                           
 12215                           ;incstack = 0
 12216                           ; Regs used in _do_I2C_DO_NACK_RESTART: [wreg+status,2+status,0+pclath+cstack]
 12217  0A33  318A  2217         	fcall	i1_i2c1_driver_sendNACK
 12218                           
 12219                           ;mcc_generated_files/drivers/i2c_master.c: 314:     return I2C_SEND_RESTART;
 12220  0A35  3009               	movlw	9
 12221  0A36  0008               	return
 12222  0A37                     __end_of_do_I2C_DO_NACK_RESTART:	
 12223                           
 12224                           	psect	text68
 12225  0A2F                     __ptext68:	
 12226 ;; *************** function _do_I2C_DO_NACK_STOP *****************
 12227 ;; Defined at:
 12228 ;;		line 305 in file "mcc_generated_files/drivers/i2c_master.c"
 12229 ;; Parameters:    Size  Location     Type
 12230 ;;		None
 12231 ;; Auto vars:     Size  Location     Type
 12232 ;;		None
 12233 ;; Return value:  Size  Location     Type
 12234 ;;                  1    wreg      enum E7120
 12235 ;; Registers used:
 12236 ;;		wreg, status,2, status,0, pclath, cstack
 12237 ;; Tracked objects:
 12238 ;;		On entry : 0/0
 12239 ;;		On exit  : 0/0
 12240 ;;		Unchanged: 0/0
 12241 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12242 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12243 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12244 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12245 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12246 ;;Total ram usage:        0 bytes
 12247 ;; Hardware stack levels used:    1
 12248 ;; Hardware stack levels required when called:    1
 12249 ;; This function calls:
 12250 ;;		i1_i2c1_driver_sendNACK
 12251 ;; This function is called by:
 12252 ;;		_do_I2C_RX
 12253 ;;		_i2c_ISR
 12254 ;; This function uses a non-reentrant model
 12255 ;;
 12256                           
 12257                           
 12258                           ;psect for function _do_I2C_DO_NACK_STOP
 12259  0A2F                     _do_I2C_DO_NACK_STOP:	
 12260                           
 12261                           ;mcc_generated_files/drivers/i2c_master.c: 307:     i2c1_driver_sendNACK();
 12262                           
 12263                           ;incstack = 0
 12264                           ; Regs used in _do_I2C_DO_NACK_STOP: [wreg+status,2+status,0+pclath+cstack]
 12265  0A2F  318A  2217         	fcall	i1_i2c1_driver_sendNACK
 12266                           
 12267                           ;mcc_generated_files/drivers/i2c_master.c: 308:     return I2C_SEND_STOP;
 12268  0A31  300A               	movlw	10
 12269  0A32  0008               	return
 12270  0A33                     __end_of_do_I2C_DO_NACK_STOP:	
 12271                           
 12272                           	psect	text69
 12273  0A2B                     __ptext69:	
 12274 ;; *************** function _do_I2C_DO_ACK *****************
 12275 ;; Defined at:
 12276 ;;		line 299 in file "mcc_generated_files/drivers/i2c_master.c"
 12277 ;; Parameters:    Size  Location     Type
 12278 ;;		None
 12279 ;; Auto vars:     Size  Location     Type
 12280 ;;		None
 12281 ;; Return value:  Size  Location     Type
 12282 ;;                  1    wreg      enum E7120
 12283 ;; Registers used:
 12284 ;;		wreg, status,2, status,0, pclath, cstack
 12285 ;; Tracked objects:
 12286 ;;		On entry : 0/0
 12287 ;;		On exit  : 0/0
 12288 ;;		Unchanged: 0/0
 12289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12291 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12292 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12293 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12294 ;;Total ram usage:        0 bytes
 12295 ;; Hardware stack levels used:    1
 12296 ;; Hardware stack levels required when called:    1
 12297 ;; This function calls:
 12298 ;;		_i2c1_driver_sendACK
 12299 ;; This function is called by:
 12300 ;;		_i2c_ISR
 12301 ;; This function uses a non-reentrant model
 12302 ;;
 12303                           
 12304                           
 12305                           ;psect for function _do_I2C_DO_ACK
 12306  0A2B                     _do_I2C_DO_ACK:	
 12307                           
 12308                           ;mcc_generated_files/drivers/i2c_master.c: 301:     i2c1_driver_sendACK();
 12309                           
 12310                           ;incstack = 0
 12311                           ; Regs used in _do_I2C_DO_ACK: [wreg+status,2+status,0+pclath+cstack]
 12312  0A2B  318A  2213         	fcall	_i2c1_driver_sendACK
 12313                           
 12314                           ;mcc_generated_files/drivers/i2c_master.c: 302:     return I2C_RCEN;
 12315  0A2D  3005               	movlw	5
 12316  0A2E  0008               	return
 12317  0A2F                     __end_of_do_I2C_DO_ACK:	
 12318                           
 12319                           	psect	text70
 12320  0A44                     __ptext70:	
 12321 ;; *************** function _do_I2C_RCEN *****************
 12322 ;; Defined at:
 12323 ;;		line 292 in file "mcc_generated_files/drivers/i2c_master.c"
 12324 ;; Parameters:    Size  Location     Type
 12325 ;;		None
 12326 ;; Auto vars:     Size  Location     Type
 12327 ;;		None
 12328 ;; Return value:  Size  Location     Type
 12329 ;;                  1    wreg      enum E7120
 12330 ;; Registers used:
 12331 ;;		wreg, status,2, status,0, pclath, cstack
 12332 ;; Tracked objects:
 12333 ;;		On entry : 0/0
 12334 ;;		On exit  : 0/0
 12335 ;;		Unchanged: 0/0
 12336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12337 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12338 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12339 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12340 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12341 ;;Total ram usage:        0 bytes
 12342 ;; Hardware stack levels used:    1
 12343 ;; Hardware stack levels required when called:    1
 12344 ;; This function calls:
 12345 ;;		i1_i2c1_driver_startRX
 12346 ;; This function is called by:
 12347 ;;		_i2c_ISR
 12348 ;; This function uses a non-reentrant model
 12349 ;;
 12350                           
 12351                           
 12352                           ;psect for function _do_I2C_RCEN
 12353  0A44                     _do_I2C_RCEN:	
 12354                           
 12355                           ;mcc_generated_files/drivers/i2c_master.c: 294:     i2c_status.addressNACKCheck = 0;
 12356                           
 12357                           ;incstack = 0
 12358                           ; Regs used in _do_I2C_RCEN: [wreg+status,2+status,0+pclath+cstack]
 12359  0A44  0023               	movlb	3	; select bank3
 12360  0A45  11A0               	bcf	_i2c_status^(0+384),3
 12361                           
 12362                           ;mcc_generated_files/drivers/i2c_master.c: 295:     i2c1_driver_startRX();
 12363  0A46  3189  21E6         	fcall	i1_i2c1_driver_startRX
 12364                           
 12365                           ;mcc_generated_files/drivers/i2c_master.c: 296:     return I2C_RX;
 12366  0A48  3004               	movlw	4
 12367  0A49  0008               	return
 12368  0A4A                     __end_of_do_I2C_RCEN:	
 12369                           
 12370                           	psect	text71
 12371  0A5D                     __ptext71:	
 12372 ;; *************** function _do_I2C_SEND_ADR_WRITE *****************
 12373 ;; Defined at:
 12374 ;;		line 285 in file "mcc_generated_files/drivers/i2c_master.c"
 12375 ;; Parameters:    Size  Location     Type
 12376 ;;		None
 12377 ;; Auto vars:     Size  Location     Type
 12378 ;;		None
 12379 ;; Return value:  Size  Location     Type
 12380 ;;                  1    wreg      enum E7120
 12381 ;; Registers used:
 12382 ;;		wreg, status,2, status,0, pclath, cstack
 12383 ;; Tracked objects:
 12384 ;;		On entry : 0/0
 12385 ;;		On exit  : 0/0
 12386 ;;		Unchanged: 0/0
 12387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12388 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12389 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12390 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12391 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12392 ;;Total ram usage:        0 bytes
 12393 ;; Hardware stack levels used:    1
 12394 ;; Hardware stack levels required when called:    1
 12395 ;; This function calls:
 12396 ;;		i1_i2c1_driver_TXData
 12397 ;; This function is called by:
 12398 ;;		_i2c_ISR
 12399 ;; This function uses a non-reentrant model
 12400 ;;
 12401                           
 12402                           
 12403                           ;psect for function _do_I2C_SEND_ADR_WRITE
 12404  0A5D                     _do_I2C_SEND_ADR_WRITE:	
 12405                           
 12406                           ;mcc_generated_files/drivers/i2c_master.c: 287:     i2c_status.addressNACKCheck = 1;
 12407                           
 12408                           ;incstack = 0
 12409                           ; Regs used in _do_I2C_SEND_ADR_WRITE: [wreg+status,2+status,0+pclath+cstack]
 12410  0A5D  0023               	movlb	3	; select bank3
 12411  0A5E  15A0               	bsf	_i2c_status^(0+384),3
 12412                           
 12413                           ;mcc_generated_files/drivers/i2c_master.c: 288:     i2c1_driver_TXData(i2c_status.addres
      +                          s << 1);
 12414  0A5F  3521               	lslf	(_i2c_status^(0+384)+1),w
 12415  0A60  318A  223F         	fcall	i1_i2c1_driver_TXData
 12416                           
 12417                           ;mcc_generated_files/drivers/i2c_master.c: 289:     return I2C_TX;
 12418  0A62  3003               	movlw	3
 12419  0A63  0008               	return
 12420  0A64                     __end_of_do_I2C_SEND_ADR_WRITE:	
 12421                           
 12422                           	psect	text72
 12423  0A7A                     __ptext72:	
 12424 ;; *************** function _do_I2C_SEND_ADR_READ *****************
 12425 ;; Defined at:
 12426 ;;		line 278 in file "mcc_generated_files/drivers/i2c_master.c"
 12427 ;; Parameters:    Size  Location     Type
 12428 ;;		None
 12429 ;; Auto vars:     Size  Location     Type
 12430 ;;		None
 12431 ;; Return value:  Size  Location     Type
 12432 ;;                  1    wreg      enum E7120
 12433 ;; Registers used:
 12434 ;;		wreg, status,2, status,0, pclath, cstack
 12435 ;; Tracked objects:
 12436 ;;		On entry : 0/0
 12437 ;;		On exit  : 0/0
 12438 ;;		Unchanged: 0/0
 12439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12440 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12441 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12442 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12443 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12444 ;;Total ram usage:        0 bytes
 12445 ;; Hardware stack levels used:    1
 12446 ;; Hardware stack levels required when called:    1
 12447 ;; This function calls:
 12448 ;;		i1_i2c1_driver_TXData
 12449 ;; This function is called by:
 12450 ;;		_i2c_ISR
 12451 ;; This function uses a non-reentrant model
 12452 ;;
 12453                           
 12454                           
 12455                           ;psect for function _do_I2C_SEND_ADR_READ
 12456  0A7A                     _do_I2C_SEND_ADR_READ:	
 12457                           
 12458                           ;mcc_generated_files/drivers/i2c_master.c: 280:     i2c_status.addressNACKCheck = 1;
 12459                           
 12460                           ;incstack = 0
 12461                           ; Regs used in _do_I2C_SEND_ADR_READ: [wreg+status,2+status,0+pclath+cstack]
 12462  0A7A  0023               	movlb	3	; select bank3
 12463  0A7B  15A0               	bsf	_i2c_status^(0+384),3
 12464                           
 12465                           ;mcc_generated_files/drivers/i2c_master.c: 281:     i2c1_driver_TXData(i2c_status.addres
      +                          s << 1 | 1);
 12466  0A7C  1403               	setc
 12467  0A7D  0D21               	rlf	(_i2c_status^(0+384)+1),w
 12468  0A7E  318A  223F         	fcall	i1_i2c1_driver_TXData
 12469                           
 12470                           ;mcc_generated_files/drivers/i2c_master.c: 282:     return I2C_RCEN;
 12471  0A80  3005               	movlw	5
 12472  0A81  0008               	return
 12473  0A82                     __end_of_do_I2C_SEND_ADR_READ:	
 12474                           
 12475                           	psect	text73
 12476  0A27                     __ptext73:	
 12477 ;; *************** function _do_I2C_SEND_STOP *****************
 12478 ;; Defined at:
 12479 ;;		line 272 in file "mcc_generated_files/drivers/i2c_master.c"
 12480 ;; Parameters:    Size  Location     Type
 12481 ;;		None
 12482 ;; Auto vars:     Size  Location     Type
 12483 ;;		None
 12484 ;; Return value:  Size  Location     Type
 12485 ;;                  1    wreg      enum E7120
 12486 ;; Registers used:
 12487 ;;		wreg, status,2, status,0, pclath, cstack
 12488 ;; Tracked objects:
 12489 ;;		On entry : 0/0
 12490 ;;		On exit  : 0/0
 12491 ;;		Unchanged: 0/0
 12492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12494 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12496 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12497 ;;Total ram usage:        0 bytes
 12498 ;; Hardware stack levels used:    1
 12499 ;; Hardware stack levels required when called:    1
 12500 ;; This function calls:
 12501 ;;		i1_i2c1_driver_stop
 12502 ;; This function is called by:
 12503 ;;		_do_I2C_DO_ADDRESS_NACK
 12504 ;;		_do_I2C_TX
 12505 ;;		_do_I2C_TX_EMPTY
 12506 ;;		_i2c_ISR
 12507 ;; This function uses a non-reentrant model
 12508 ;;
 12509                           
 12510                           
 12511                           ;psect for function _do_I2C_SEND_STOP
 12512  0A27                     _do_I2C_SEND_STOP:	
 12513                           
 12514                           ;mcc_generated_files/drivers/i2c_master.c: 274:     i2c1_driver_stop();
 12515                           
 12516                           ;incstack = 0
 12517                           ; Regs used in _do_I2C_SEND_STOP: [wreg+status,2+status,0+pclath+cstack]
 12518  0A27  3189  21E3         	fcall	i1_i2c1_driver_stop
 12519                           
 12520                           ;mcc_generated_files/drivers/i2c_master.c: 275:     return I2C_IDLE;
 12521  0A29  3000               	movlw	0
 12522  0A2A  0008               	return
 12523  0A2B                     __end_of_do_I2C_SEND_STOP:	
 12524                           
 12525                           	psect	text74
 12526  0A23                     __ptext74:	
 12527 ;; *************** function _do_I2C_SEND_RESTART *****************
 12528 ;; Defined at:
 12529 ;;		line 266 in file "mcc_generated_files/drivers/i2c_master.c"
 12530 ;; Parameters:    Size  Location     Type
 12531 ;;		None
 12532 ;; Auto vars:     Size  Location     Type
 12533 ;;		None
 12534 ;; Return value:  Size  Location     Type
 12535 ;;                  1    wreg      enum E7120
 12536 ;; Registers used:
 12537 ;;		wreg, status,2, status,0, pclath, cstack
 12538 ;; Tracked objects:
 12539 ;;		On entry : 0/0
 12540 ;;		On exit  : 0/0
 12541 ;;		Unchanged: 0/0
 12542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12543 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12544 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12545 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12546 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12547 ;;Total ram usage:        0 bytes
 12548 ;; Hardware stack levels used:    1
 12549 ;; Hardware stack levels required when called:    1
 12550 ;; This function calls:
 12551 ;;		i1_i2c1_driver_restart
 12552 ;; This function is called by:
 12553 ;;		_do_I2C_DO_ADDRESS_NACK
 12554 ;;		_do_I2C_TX_EMPTY
 12555 ;;		_i2c_ISR
 12556 ;; This function uses a non-reentrant model
 12557 ;;
 12558                           
 12559                           
 12560                           ;psect for function _do_I2C_SEND_RESTART
 12561  0A23                     _do_I2C_SEND_RESTART:	
 12562                           
 12563                           ;mcc_generated_files/drivers/i2c_master.c: 268:     i2c1_driver_restart();
 12564                           
 12565                           ;incstack = 0
 12566                           ; Regs used in _do_I2C_SEND_RESTART: [wreg+status,2+status,0+pclath+cstack]
 12567  0A23  3189  21E0         	fcall	i1_i2c1_driver_restart
 12568                           
 12569                           ;mcc_generated_files/drivers/i2c_master.c: 269:     return I2C_SEND_ADR_READ;
 12570  0A25  3001               	movlw	1
 12571  0A26  0008               	return
 12572  0A27                     __end_of_do_I2C_SEND_RESTART:	
 12573                           
 12574                           	psect	text75
 12575  0A1F                     __ptext75:	
 12576 ;; *************** function _do_I2C_SEND_RESTART_WRITE *****************
 12577 ;; Defined at:
 12578 ;;		line 260 in file "mcc_generated_files/drivers/i2c_master.c"
 12579 ;; Parameters:    Size  Location     Type
 12580 ;;		None
 12581 ;; Auto vars:     Size  Location     Type
 12582 ;;		None
 12583 ;; Return value:  Size  Location     Type
 12584 ;;                  1    wreg      enum E7120
 12585 ;; Registers used:
 12586 ;;		wreg, status,2, status,0, pclath, cstack
 12587 ;; Tracked objects:
 12588 ;;		On entry : 0/0
 12589 ;;		On exit  : 0/0
 12590 ;;		Unchanged: 0/0
 12591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12592 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12593 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12594 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12595 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12596 ;;Total ram usage:        0 bytes
 12597 ;; Hardware stack levels used:    1
 12598 ;; Hardware stack levels required when called:    1
 12599 ;; This function calls:
 12600 ;;		i1_i2c1_driver_restart
 12601 ;; This function is called by:
 12602 ;;		_do_I2C_TX
 12603 ;;		_i2c_ISR
 12604 ;; This function uses a non-reentrant model
 12605 ;;
 12606                           
 12607                           
 12608                           ;psect for function _do_I2C_SEND_RESTART_WRITE
 12609  0A1F                     _do_I2C_SEND_RESTART_WRITE:	
 12610                           
 12611                           ;mcc_generated_files/drivers/i2c_master.c: 262:     i2c1_driver_restart();
 12612                           
 12613                           ;incstack = 0
 12614                           ; Regs used in _do_I2C_SEND_RESTART_WRITE: [wreg+status,2+status,0+pclath+cstack]
 12615  0A1F  3189  21E0         	fcall	i1_i2c1_driver_restart
 12616                           
 12617                           ;mcc_generated_files/drivers/i2c_master.c: 263:     return I2C_SEND_ADR_WRITE;
 12618  0A21  3002               	movlw	2
 12619  0A22  0008               	return
 12620  0A23                     __end_of_do_I2C_SEND_RESTART_WRITE:	
 12621                           
 12622                           	psect	text76
 12623  0A1B                     __ptext76:	
 12624 ;; *************** function _do_I2C_SEND_RESTART_READ *****************
 12625 ;; Defined at:
 12626 ;;		line 254 in file "mcc_generated_files/drivers/i2c_master.c"
 12627 ;; Parameters:    Size  Location     Type
 12628 ;;		None
 12629 ;; Auto vars:     Size  Location     Type
 12630 ;;		None
 12631 ;; Return value:  Size  Location     Type
 12632 ;;                  1    wreg      enum E7120
 12633 ;; Registers used:
 12634 ;;		wreg, status,2, status,0, pclath, cstack
 12635 ;; Tracked objects:
 12636 ;;		On entry : 0/0
 12637 ;;		On exit  : 0/0
 12638 ;;		Unchanged: 0/0
 12639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12640 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12641 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12642 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12643 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12644 ;;Total ram usage:        0 bytes
 12645 ;; Hardware stack levels used:    1
 12646 ;; Hardware stack levels required when called:    1
 12647 ;; This function calls:
 12648 ;;		i1_i2c1_driver_restart
 12649 ;; This function is called by:
 12650 ;;		_do_I2C_TX
 12651 ;;		_i2c_ISR
 12652 ;; This function uses a non-reentrant model
 12653 ;;
 12654                           
 12655                           
 12656                           ;psect for function _do_I2C_SEND_RESTART_READ
 12657  0A1B                     _do_I2C_SEND_RESTART_READ:	
 12658                           
 12659                           ;mcc_generated_files/drivers/i2c_master.c: 256:     i2c1_driver_restart();
 12660                           
 12661                           ;incstack = 0
 12662                           ; Regs used in _do_I2C_SEND_RESTART_READ: [wreg+status,2+status,0+pclath+cstack]
 12663  0A1B  3189  21E0         	fcall	i1_i2c1_driver_restart
 12664                           
 12665                           ;mcc_generated_files/drivers/i2c_master.c: 257:     return I2C_SEND_ADR_READ;
 12666  0A1D  3001               	movlw	1
 12667  0A1E  0008               	return
 12668  0A1F                     __end_of_do_I2C_SEND_RESTART_READ:	
 12669                           
 12670                           	psect	text77
 12671  07FB                     __ptext77:	
 12672 ;; *************** function _do_I2C_IDLE *****************
 12673 ;; Defined at:
 12674 ;;		line 247 in file "mcc_generated_files/drivers/i2c_master.c"
 12675 ;; Parameters:    Size  Location     Type
 12676 ;;		None
 12677 ;; Auto vars:     Size  Location     Type
 12678 ;;		None
 12679 ;; Return value:  Size  Location     Type
 12680 ;;                  1    wreg      enum E7120
 12681 ;; Registers used:
 12682 ;;		wreg, status,2
 12683 ;; Tracked objects:
 12684 ;;		On entry : 0/0
 12685 ;;		On exit  : 0/0
 12686 ;;		Unchanged: 0/0
 12687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12688 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12689 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12690 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12691 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12692 ;;Total ram usage:        0 bytes
 12693 ;; Hardware stack levels used:    1
 12694 ;; This function calls:
 12695 ;;		Nothing
 12696 ;; This function is called by:
 12697 ;;		_i2c_ISR
 12698 ;; This function uses a non-reentrant model
 12699 ;;
 12700                           
 12701                           
 12702                           ;psect for function _do_I2C_IDLE
 12703  07FB                     _do_I2C_IDLE:	
 12704                           
 12705                           ;mcc_generated_files/drivers/i2c_master.c: 249:     i2c_status.busy = 0;
 12706                           
 12707                           ;incstack = 0
 12708                           ; Regs used in _do_I2C_IDLE: [wreg+status,2]
 12709  07FB  0023               	movlb	3	; select bank3
 12710  07FC  1020               	bcf	_i2c_status^(0+384),0
 12711                           
 12712                           ;mcc_generated_files/drivers/i2c_master.c: 250:     i2c_status.error = I2C_NOERR;
 12713  07FD  01AA               	clrf	(_i2c_status^(0+384)+10)
 12714                           
 12715                           ;mcc_generated_files/drivers/i2c_master.c: 251:     return I2C_RESET;
 12716  07FE  300E               	movlw	14
 12717  07FF  0008               	return
 12718  0800                     __end_of_do_I2C_IDLE:	
 12719                           
 12720                           	psect	text78
 12721  0A56                     __ptext78:	
 12722 ;; *************** function _do_I2C_RESET *****************
 12723 ;; Defined at:
 12724 ;;		line 239 in file "mcc_generated_files/drivers/i2c_master.c"
 12725 ;; Parameters:    Size  Location     Type
 12726 ;;		None
 12727 ;; Auto vars:     Size  Location     Type
 12728 ;;		None
 12729 ;; Return value:  Size  Location     Type
 12730 ;;                  1    wreg      enum E7120
 12731 ;; Registers used:
 12732 ;;		wreg, status,2, status,0, pclath, cstack
 12733 ;; Tracked objects:
 12734 ;;		On entry : 0/0
 12735 ;;		On exit  : 0/0
 12736 ;;		Unchanged: 0/0
 12737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12738 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12739 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12740 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12741 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12742 ;;Total ram usage:        0 bytes
 12743 ;; Hardware stack levels used:    1
 12744 ;; Hardware stack levels required when called:    1
 12745 ;; This function calls:
 12746 ;;		_i2c1_driver_resetBus
 12747 ;; This function is called by:
 12748 ;;		_i2c_ISR
 12749 ;; This function uses a non-reentrant model
 12750 ;;
 12751                           
 12752                           
 12753                           ;psect for function _do_I2C_RESET
 12754  0A56                     _do_I2C_RESET:	
 12755                           
 12756                           ;mcc_generated_files/drivers/i2c_master.c: 241:     i2c1_driver_resetBus();
 12757                           
 12758                           ;incstack = 0
 12759                           ; Regs used in _do_I2C_RESET: [wreg+status,2+status,0+pclath+cstack]
 12760  0A56  3189  21DC         	fcall	_i2c1_driver_resetBus
 12761                           
 12762                           ;mcc_generated_files/drivers/i2c_master.c: 242:     i2c_status.busy = 0;
 12763  0A58  0023               	movlb	3	; select bank3
 12764  0A59  1020               	bcf	_i2c_status^(0+384),0
 12765                           
 12766                           ;mcc_generated_files/drivers/i2c_master.c: 243:     i2c_status.error = I2C_NOERR;
 12767  0A5A  01AA               	clrf	(_i2c_status^(0+384)+10)
 12768                           
 12769                           ;mcc_generated_files/drivers/i2c_master.c: 244:     return I2C_RESET;
 12770  0A5B  300E               	movlw	14
 12771  0A5C  0008               	return
 12772  0A5D                     __end_of_do_I2C_RESET:	
 12773                           
 12774                           	psect	text79
 12775  0DBB                     __ptext79:	
 12776 ;; *************** function _do_I2C_TX_EMPTY *****************
 12777 ;; Defined at:
 12778 ;;		line 382 in file "mcc_generated_files/drivers/i2c_master.c"
 12779 ;; Parameters:    Size  Location     Type
 12780 ;;		None
 12781 ;; Auto vars:     Size  Location     Type
 12782 ;;		None
 12783 ;; Return value:  Size  Location     Type
 12784 ;;                  1    wreg      enum E7120
 12785 ;; Registers used:
 12786 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12787 ;; Tracked objects:
 12788 ;;		On entry : 0/0
 12789 ;;		On exit  : 0/0
 12790 ;;		Unchanged: 0/0
 12791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12792 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12793 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12794 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12795 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12796 ;;Total ram usage:        3 bytes
 12797 ;; Hardware stack levels used:    1
 12798 ;; Hardware stack levels required when called:    2
 12799 ;; This function calls:
 12800 ;;		_do_I2C_SEND_RESTART
 12801 ;;		_do_I2C_SEND_STOP
 12802 ;;		_mssp1_setIRQ
 12803 ;;		_returnReset
 12804 ;;		_returnStop
 12805 ;; This function is called by:
 12806 ;;		_i2c_ISR
 12807 ;; This function uses a non-reentrant model
 12808 ;;
 12809                           
 12810                           
 12811                           ;psect for function _do_I2C_TX_EMPTY
 12812  0DBB                     _do_I2C_TX_EMPTY:	
 12813                           
 12814                           ;mcc_generated_files/drivers/i2c_master.c: 384:     i2c_status.bufferFree = 1;
 12815                           
 12816                           ;incstack = 0
 12817                           ; Regs used in _do_I2C_TX_EMPTY: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12818  0DBB  0023               	movlb	3	; select bank3
 12819  0DBC  1520               	bsf	_i2c_status^(0+384),2
 12820                           
 12821                           ;mcc_generated_files/drivers/i2c_master.c: 385:     switch(i2c_status.callbackTable[i2c_
      +                          dataComplete](i2c_status.callbackPayload[i2c_dataComplete]))
 12822  0DBD  2DC8               	goto	i1l4282
 12823  0DBE                     i1l4266:	
 12824                           
 12825                           ;mcc_generated_files/drivers/i2c_master.c: 389:             return do_I2C_SEND_RESTART()
      +                          ;
 12826  0DBE  318A  2223         	fcall	_do_I2C_SEND_RESTART
 12827  0DC0  0008               	return
 12828  0DC1                     i1l4270:	
 12829                           
 12830                           ;mcc_generated_files/drivers/i2c_master.c: 391:             mssp1_setIRQ();
 12831  0DC1  3189  21EC         	fcall	_mssp1_setIRQ
 12832                           
 12833                           ;mcc_generated_files/drivers/i2c_master.c: 392:             return I2C_TX;
 12834  0DC3  3003               	movlw	3
 12835  0DC4  0008               	return
 12836  0DC5                     i1l4276:	
 12837                           
 12838                           ;mcc_generated_files/drivers/i2c_master.c: 395:             return do_I2C_SEND_STOP();
 12839  0DC5  318A  2227         	fcall	_do_I2C_SEND_STOP
 12840  0DC7  0008               	return
 12841  0DC8                     i1l4282:	
 12842  0DC8  0837               	movf	(low ((_i2c_status| (0+256)+23)))^(0+128),w
 12843  0DC9  00F6               	movwf	??_do_I2C_TX_EMPTY
 12844  0DCA  0876               	movf	??_do_I2C_TX_EMPTY,w
 12845  0DCB  00F6               	movwf	returnReset@p
 12846  0DCC  300B               	movlw	11
 12847  0DCD  3EA0               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 12848  0DCE  0086               	movwf	6
 12849  0DCF  3001               	movlw	1	; select bank3/4
 12850  0DD0  0087               	movwf	7
 12851  0DD1  3F41               	moviw [1]fsr1
 12852  0DD2  008A               	movwf	10
 12853  0DD3  3F40               	moviw [0]fsr1
 12854  0DD4  000A               	callw
 12855  0DD5  318D               	pagesel	$
 12856  0DD6  00F7               	movwf	??_do_I2C_TX_EMPTY+1
 12857  0DD7  01F8               	clrf	??_do_I2C_TX_EMPTY+2
 12858                           
 12859                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12860                           ; Switch size 1, requested type "simple"
 12861                           ; Number of cases is 1, Range of values is 0 to 0
 12862                           ; switch strategies available:
 12863                           ; Name         Instructions Cycles
 12864                           ; simple_byte            4     3 (average)
 12865                           ; direct_byte            8     6 (fixed)
 12866                           ; jumptable            260     6 (fixed)
 12867                           ;	Chosen strategy is simple_byte
 12868  0DD8  0878               	movf	??_do_I2C_TX_EMPTY+2,w
 12869  0DD9  3A00               	xorlw	0	; case 0
 12870  0DDA  1903               	skipnz
 12871  0DDB  2DDD               	goto	i1l6728
 12872  0DDC  2DC5               	goto	i1l4276
 12873  0DDD                     i1l6728:	
 12874                           
 12875                           ; Switch size 1, requested type "simple"
 12876                           ; Number of cases is 4, Range of values is 1 to 4
 12877                           ; switch strategies available:
 12878                           ; Name         Instructions Cycles
 12879                           ; simple_byte           13     7 (average)
 12880                           ; direct_byte           17     9 (fixed)
 12881                           ; jumptable            263     9 (fixed)
 12882                           ;	Chosen strategy is simple_byte
 12883  0DDD  0877               	movf	??_do_I2C_TX_EMPTY+1,w
 12884  0DDE  3A01               	xorlw	1	; case 1
 12885  0DDF  1903               	skipnz
 12886  0DE0  2DC5               	goto	i1l4276
 12887  0DE1  3A03               	xorlw	3	; case 2
 12888  0DE2  1903               	skipnz
 12889  0DE3  2DBE               	goto	i1l4266
 12890  0DE4  3A01               	xorlw	1	; case 3
 12891  0DE5  1903               	skipnz
 12892  0DE6  2DBE               	goto	i1l4266
 12893  0DE7  3A07               	xorlw	7	; case 4
 12894  0DE8  1903               	skipnz
 12895  0DE9  2DC1               	goto	i1l4270
 12896  0DEA  2DC5               	goto	i1l4276
 12897  0DEB  0008               	return
 12898  0DEC                     __end_of_do_I2C_TX_EMPTY:	
 12899                           
 12900                           	psect	text80
 12901  09EC                     __ptext80:	
 12902 ;; *************** function _mssp1_setIRQ *****************
 12903 ;; Defined at:
 12904 ;;		line 58 in file "mcc_generated_files/i2c1_driver.c"
 12905 ;; Parameters:    Size  Location     Type
 12906 ;;		None
 12907 ;; Auto vars:     Size  Location     Type
 12908 ;;		None
 12909 ;; Return value:  Size  Location     Type
 12910 ;;                  1    wreg      void 
 12911 ;; Registers used:
 12912 ;;		None
 12913 ;; Tracked objects:
 12914 ;;		On entry : 0/0
 12915 ;;		On exit  : 0/0
 12916 ;;		Unchanged: 0/0
 12917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12918 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12919 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12920 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12921 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12922 ;;Total ram usage:        0 bytes
 12923 ;; Hardware stack levels used:    1
 12924 ;; This function calls:
 12925 ;;		Nothing
 12926 ;; This function is called by:
 12927 ;;		_do_I2C_TX_EMPTY
 12928 ;; This function uses a non-reentrant model
 12929 ;;
 12930                           
 12931                           
 12932                           ;psect for function _mssp1_setIRQ
 12933  09EC                     _mssp1_setIRQ:	
 12934                           
 12935                           ;mcc_generated_files/i2c1_driver.c: 60:     }
 12936                           
 12937                           ;incstack = 0
 12938                           ; Regs used in _mssp1_setIRQ: []
 12939  09EC  0020               	movlb	0	; select bank0
 12940  09ED  1591               	bsf	17,3	;volatile
 12941  09EE  0008               	return
 12942  09EF                     __end_of_mssp1_setIRQ:	
 12943                           
 12944                           	psect	text81
 12945  0A72                     __ptext81:	
 12946 ;; *************** function _i2c1_driver_isNACK *****************
 12947 ;; Defined at:
 12948 ;;		line 161 in file "mcc_generated_files/i2c1_driver.c"
 12949 ;; Parameters:    Size  Location     Type
 12950 ;;		None
 12951 ;; Auto vars:     Size  Location     Type
 12952 ;;		None
 12953 ;; Return value:  Size  Location     Type
 12954 ;;		None               void
 12955 ;; Registers used:
 12956 ;;		wreg, status,2, status,0
 12957 ;; Tracked objects:
 12958 ;;		On entry : 0/0
 12959 ;;		On exit  : 0/0
 12960 ;;		Unchanged: 0/0
 12961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12962 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12963 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12964 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12965 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12966 ;;Total ram usage:        1 bytes
 12967 ;; Hardware stack levels used:    1
 12968 ;; This function calls:
 12969 ;;		Nothing
 12970 ;; This function is called by:
 12971 ;;		_do_I2C_TX
 12972 ;;		_i2c_ISR
 12973 ;; This function uses a non-reentrant model
 12974 ;;
 12975                           
 12976                           
 12977                           ;psect for function _i2c1_driver_isNACK
 12978  0A72                     _i2c1_driver_isNACK:	
 12979                           
 12980                           ;mcc_generated_files/i2c1_driver.c: 163:     return SSP1CON2bits.ACKSTAT;
 12981                           
 12982                           ;incstack = 0
 12983                           ; Regs used in _i2c1_driver_isNACK: [wreg+status,2+status,0]
 12984  0A72  0024               	movlb	4	; select bank4
 12985  0A73  0E16               	swapf	22,w	;volatile
 12986  0A74  0C89               	rrf	9,f
 12987  0A75  0C89               	rrf	9,f
 12988  0A76  3901               	andlw	1
 12989  0A77  00F6               	movwf	??_i2c1_driver_isNACK
 12990  0A78  0C76               	rrf	??_i2c1_driver_isNACK,w
 12991  0A79  0008               	return
 12992  0A7A                     __end_of_i2c1_driver_isNACK:	
 12993                           
 12994                           	psect	text82
 12995  0A3F                     __ptext82:	
 12996 ;; *************** function i1_i2c1_driver_TXData *****************
 12997 ;; Defined at:
 12998 ;;		line 186 in file "mcc_generated_files/i2c1_driver.c"
 12999 ;; Parameters:    Size  Location     Type
 13000 ;;  d               1    wreg     unsigned char 
 13001 ;; Auto vars:     Size  Location     Type
 13002 ;;  d               1    0[COMMON] unsigned char 
 13003 ;; Return value:  Size  Location     Type
 13004 ;;                  1    wreg      void 
 13005 ;; Registers used:
 13006 ;;		wreg
 13007 ;; Tracked objects:
 13008 ;;		On entry : 0/0
 13009 ;;		On exit  : 0/0
 13010 ;;		Unchanged: 0/0
 13011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13013 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13014 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13015 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13016 ;;Total ram usage:        1 bytes
 13017 ;; Hardware stack levels used:    1
 13018 ;; This function calls:
 13019 ;;		Nothing
 13020 ;; This function is called by:
 13021 ;;		_do_I2C_SEND_ADR_READ
 13022 ;;		_do_I2C_SEND_ADR_WRITE
 13023 ;;		_do_I2C_TX
 13024 ;; This function uses a non-reentrant model
 13025 ;;
 13026                           
 13027                           
 13028                           ;psect for function i1_i2c1_driver_TXData
 13029  0A3F                     i1_i2c1_driver_TXData:	
 13030                           
 13031                           ;incstack = 0
 13032                           ; Regs used in i1_i2c1_driver_TXData: [wreg]
 13033                           ;i1i2c1_driver_TXData@d stored from wreg
 13034  0A3F  00F6               	movwf	i1i2c1_driver_TXData@d
 13035                           
 13036                           ;mcc_generated_files/i2c1_driver.c: 186: __attribute__((inline)) void i2c1_driver_TXData
      +                          (char d);mcc_generated_files/i2c1_driver.c: 187: {;mcc_generated_files/i2c1_driver.c: 18
      +                          8:     SSP1BUF = d;
 13037  0A40  0876               	movf	i1i2c1_driver_TXData@d,w
 13038  0A41  0024               	movlb	4	; select bank4
 13039  0A42  0091               	movwf	17	;volatile
 13040  0A43  0008               	return
 13041  0A44                     __end_ofi1_i2c1_driver_TXData:	
 13042                           
 13043                           	psect	text83
 13044  09E9                     __ptext83:	
 13045 ;; *************** function i1_i2c1_driver_getRXData *****************
 13046 ;; Defined at:
 13047 ;;		line 171 in file "mcc_generated_files/i2c1_driver.c"
 13048 ;; Parameters:    Size  Location     Type
 13049 ;;		None
 13050 ;; Auto vars:     Size  Location     Type
 13051 ;;		None
 13052 ;; Return value:  Size  Location     Type
 13053 ;;                  1    wreg      unsigned char 
 13054 ;; Registers used:
 13055 ;;		wreg
 13056 ;; Tracked objects:
 13057 ;;		On entry : 0/0
 13058 ;;		On exit  : 0/0
 13059 ;;		Unchanged: 0/0
 13060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13061 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13062 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13063 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13064 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13065 ;;Total ram usage:        0 bytes
 13066 ;; Hardware stack levels used:    1
 13067 ;; This function calls:
 13068 ;;		Nothing
 13069 ;; This function is called by:
 13070 ;;		_do_I2C_RX
 13071 ;; This function uses a non-reentrant model
 13072 ;;
 13073                           
 13074                           
 13075                           ;psect for function i1_i2c1_driver_getRXData
 13076  09E9                     i1_i2c1_driver_getRXData:	
 13077                           
 13078                           ;mcc_generated_files/i2c1_driver.c: 173:     return SSP1BUF;
 13079                           
 13080                           ;incstack = 0
 13081                           ; Regs used in i1_i2c1_driver_getRXData: [wreg]
 13082  09E9  0024               	movlb	4	; select bank4
 13083  09EA  0811               	movf	17,w	;volatile
 13084  09EB  0008               	return
 13085  09EC                     __end_ofi1_i2c1_driver_getRXData:	
 13086                           
 13087                           	psect	text84
 13088  0A17                     __ptext84:	
 13089 ;; *************** function i1_i2c1_driver_sendNACK *****************
 13090 ;; Defined at:
 13091 ;;		line 202 in file "mcc_generated_files/i2c1_driver.c"
 13092 ;; Parameters:    Size  Location     Type
 13093 ;;		None
 13094 ;; Auto vars:     Size  Location     Type
 13095 ;;		None
 13096 ;; Return value:  Size  Location     Type
 13097 ;;                  1    wreg      void 
 13098 ;; Registers used:
 13099 ;;		None
 13100 ;; Tracked objects:
 13101 ;;		On entry : 0/0
 13102 ;;		On exit  : 0/0
 13103 ;;		Unchanged: 0/0
 13104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13105 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13106 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13107 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13108 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13109 ;;Total ram usage:        0 bytes
 13110 ;; Hardware stack levels used:    1
 13111 ;; This function calls:
 13112 ;;		Nothing
 13113 ;; This function is called by:
 13114 ;;		_do_I2C_DO_NACK_STOP
 13115 ;;		_do_I2C_DO_NACK_RESTART
 13116 ;; This function uses a non-reentrant model
 13117 ;;
 13118                           
 13119                           
 13120                           ;psect for function i1_i2c1_driver_sendNACK
 13121  0A17                     i1_i2c1_driver_sendNACK:	
 13122                           
 13123                           ;mcc_generated_files/i2c1_driver.c: 204:     SSP1CON2bits.ACKDT = 1;
 13124                           
 13125                           ;incstack = 0
 13126                           ; Regs used in i1_i2c1_driver_sendNACK: []
 13127  0A17  0024               	movlb	4	; select bank4
 13128  0A18  1696               	bsf	22,5	;volatile
 13129                           
 13130                           ;mcc_generated_files/i2c1_driver.c: 205:     SSP1CON2bits.ACKEN = 1;
 13131  0A19  1616               	bsf	22,4	;volatile
 13132  0A1A  0008               	return
 13133  0A1B                     __end_ofi1_i2c1_driver_sendNACK:	
 13134                           
 13135                           	psect	text85
 13136  09DC                     __ptext85:	
 13137 ;; *************** function _i2c1_driver_resetBus *****************
 13138 ;; Defined at:
 13139 ;;		line 141 in file "mcc_generated_files/i2c1_driver.c"
 13140 ;; Parameters:    Size  Location     Type
 13141 ;;		None
 13142 ;; Auto vars:     Size  Location     Type
 13143 ;;		None
 13144 ;; Return value:  Size  Location     Type
 13145 ;;                  1    wreg      void 
 13146 ;; Registers used:
 13147 ;;		None
 13148 ;; Tracked objects:
 13149 ;;		On entry : 0/0
 13150 ;;		On exit  : 0/0
 13151 ;;		Unchanged: 0/0
 13152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13153 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13154 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13155 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13156 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13157 ;;Total ram usage:        0 bytes
 13158 ;; Hardware stack levels used:    1
 13159 ;; This function calls:
 13160 ;;		Nothing
 13161 ;; This function is called by:
 13162 ;;		_do_I2C_RESET
 13163 ;; This function uses a non-reentrant model
 13164 ;;
 13165                           
 13166                           
 13167                           ;psect for function _i2c1_driver_resetBus
 13168  09DC                     _i2c1_driver_resetBus:	
 13169                           
 13170                           ;incstack = 0
 13171                           ; Regs used in _i2c1_driver_resetBus: []
 13172  09DC  0008               	return
 13173  09DD                     __end_of_i2c1_driver_resetBus:	
 13174                           
 13175                           	psect	text86
 13176  09E6                     __ptext86:	
 13177 ;; *************** function i1_i2c1_driver_startRX *****************
 13178 ;; Defined at:
 13179 ;;		line 166 in file "mcc_generated_files/i2c1_driver.c"
 13180 ;; Parameters:    Size  Location     Type
 13181 ;;		None
 13182 ;; Auto vars:     Size  Location     Type
 13183 ;;		None
 13184 ;; Return value:  Size  Location     Type
 13185 ;;                  1    wreg      void 
 13186 ;; Registers used:
 13187 ;;		None
 13188 ;; Tracked objects:
 13189 ;;		On entry : 0/0
 13190 ;;		On exit  : 0/0
 13191 ;;		Unchanged: 0/0
 13192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13193 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13194 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13196 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13197 ;;Total ram usage:        0 bytes
 13198 ;; Hardware stack levels used:    1
 13199 ;; This function calls:
 13200 ;;		Nothing
 13201 ;; This function is called by:
 13202 ;;		_do_I2C_RCEN
 13203 ;; This function uses a non-reentrant model
 13204 ;;
 13205                           
 13206                           
 13207                           ;psect for function i1_i2c1_driver_startRX
 13208  09E6                     i1_i2c1_driver_startRX:	
 13209                           
 13210                           ;mcc_generated_files/i2c1_driver.c: 168:     SSP1CON2bits.RCEN = 1;
 13211                           
 13212                           ;incstack = 0
 13213                           ; Regs used in i1_i2c1_driver_startRX: []
 13214  09E6  0024               	movlb	4	; select bank4
 13215  09E7  1596               	bsf	22,3	;volatile
 13216  09E8  0008               	return
 13217  09E9                     __end_ofi1_i2c1_driver_startRX:	
 13218                           
 13219                           	psect	text87
 13220  0002                     __ptext87:	
 13221 ;; *************** function _returnReset *****************
 13222 ;; Defined at:
 13223 ;;		line 448 in file "mcc_generated_files/drivers/i2c_master.c"
 13224 ;; Parameters:    Size  Location     Type
 13225 ;;  p               1    0[COMMON] PTR void 
 13226 ;;		 -> NULL(0), 
 13227 ;; Auto vars:     Size  Location     Type
 13228 ;;		None
 13229 ;; Return value:  Size  Location     Type
 13230 ;;                  1    wreg      enum E6966
 13231 ;; Registers used:
 13232 ;;		wreg
 13233 ;; Tracked objects:
 13234 ;;		On entry : 0/0
 13235 ;;		On exit  : 0/0
 13236 ;;		Unchanged: 0/0
 13237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13238 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13239 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13240 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13241 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13242 ;;Total ram usage:        1 bytes
 13243 ;; Hardware stack levels used:    1
 13244 ;; This function calls:
 13245 ;;		Nothing
 13246 ;; This function is called by:
 13247 ;;		_i2c_open
 13248 ;;		_do_I2C_DO_ADDRESS_NACK
 13249 ;;		_do_I2C_TX
 13250 ;;		_do_I2C_RX
 13251 ;;		_do_I2C_TX_EMPTY
 13252 ;; This function uses a non-reentrant model
 13253 ;;
 13254                           
 13255                           
 13256                           ;psect for function _returnReset
 13257  0002                     _returnReset:	
 13258                           
 13259                           ;mcc_generated_files/drivers/i2c_master.c: 448: static i2c_operations_t returnReset(void
      +                           *p);mcc_generated_files/drivers/i2c_master.c: 449: {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 450:     return i2c_reset_link;
 13260                           
 13261                           ;incstack = 0
 13262                           ; Regs used in _returnReset: [wreg]
 13263  0002  3005               	movlw	5
 13264  0003  0008               	return
 13265  0004                     __end_of_returnReset:	
 13266                           
 13267                           	psect	text88
 13268  09DE                     __ptext88:	
 13269 ;; *************** function _returnStop *****************
 13270 ;; Defined at:
 13271 ;;		line 443 in file "mcc_generated_files/drivers/i2c_master.c"
 13272 ;; Parameters:    Size  Location     Type
 13273 ;;  p               1    0[COMMON] PTR void 
 13274 ;;		 -> NULL(0), 
 13275 ;; Auto vars:     Size  Location     Type
 13276 ;;		None
 13277 ;; Return value:  Size  Location     Type
 13278 ;;                  1    wreg      enum E6966
 13279 ;; Registers used:
 13280 ;;		wreg
 13281 ;; Tracked objects:
 13282 ;;		On entry : 0/0
 13283 ;;		On exit  : 0/0
 13284 ;;		Unchanged: 0/0
 13285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13286 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13287 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13288 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13289 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13290 ;;Total ram usage:        1 bytes
 13291 ;; Hardware stack levels used:    1
 13292 ;; This function calls:
 13293 ;;		Nothing
 13294 ;; This function is called by:
 13295 ;;		_i2c_open
 13296 ;;		_setCallBack
 13297 ;;		_do_I2C_DO_ADDRESS_NACK
 13298 ;;		_do_I2C_TX
 13299 ;;		_do_I2C_RX
 13300 ;;		_do_I2C_TX_EMPTY
 13301 ;; This function uses a non-reentrant model
 13302 ;;
 13303                           
 13304                           
 13305                           ;psect for function _returnStop
 13306  09DE                     _returnStop:	
 13307                           
 13308                           ;mcc_generated_files/drivers/i2c_master.c: 443: static i2c_operations_t returnStop(void 
      +                          *p);mcc_generated_files/drivers/i2c_master.c: 444: {;mcc_generated_files/drivers/i2c_mas
      +                          ter.c: 445:     return i2c_stop;
 13309                           
 13310                           ;incstack = 0
 13311                           ; Regs used in _returnStop: [wreg]
 13312  09DE  3001               	movlw	1
 13313  09DF  0008               	return
 13314  09E0                     __end_of_returnStop:	
 13315                           
 13316                           	psect	text89
 13317  09E3                     __ptext89:	
 13318 ;; *************** function i1_i2c1_driver_stop *****************
 13319 ;; Defined at:
 13320 ;;		line 156 in file "mcc_generated_files/i2c1_driver.c"
 13321 ;; Parameters:    Size  Location     Type
 13322 ;;		None
 13323 ;; Auto vars:     Size  Location     Type
 13324 ;;		None
 13325 ;; Return value:  Size  Location     Type
 13326 ;;                  1    wreg      void 
 13327 ;; Registers used:
 13328 ;;		None
 13329 ;; Tracked objects:
 13330 ;;		On entry : 0/0
 13331 ;;		On exit  : 0/0
 13332 ;;		Unchanged: 0/0
 13333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13335 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13336 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13337 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13338 ;;Total ram usage:        0 bytes
 13339 ;; Hardware stack levels used:    1
 13340 ;; This function calls:
 13341 ;;		Nothing
 13342 ;; This function is called by:
 13343 ;;		_do_I2C_SEND_STOP
 13344 ;; This function uses a non-reentrant model
 13345 ;;
 13346                           
 13347                           
 13348                           ;psect for function i1_i2c1_driver_stop
 13349  09E3                     i1_i2c1_driver_stop:	
 13350                           
 13351                           ;mcc_generated_files/i2c1_driver.c: 158:     SSP1CON2bits.PEN = 1;
 13352                           
 13353                           ;incstack = 0
 13354                           ; Regs used in i1_i2c1_driver_stop: []
 13355  09E3  0024               	movlb	4	; select bank4
 13356  09E4  1516               	bsf	22,2	;volatile
 13357  09E5  0008               	return
 13358  09E6                     __end_ofi1_i2c1_driver_stop:	
 13359                           
 13360                           	psect	text90
 13361  09E0                     __ptext90:	
 13362 ;; *************** function i1_i2c1_driver_restart *****************
 13363 ;; Defined at:
 13364 ;;		line 151 in file "mcc_generated_files/i2c1_driver.c"
 13365 ;; Parameters:    Size  Location     Type
 13366 ;;		None
 13367 ;; Auto vars:     Size  Location     Type
 13368 ;;		None
 13369 ;; Return value:  Size  Location     Type
 13370 ;;                  1    wreg      void 
 13371 ;; Registers used:
 13372 ;;		None
 13373 ;; Tracked objects:
 13374 ;;		On entry : 0/0
 13375 ;;		On exit  : 0/0
 13376 ;;		Unchanged: 0/0
 13377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13378 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13379 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13380 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13381 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13382 ;;Total ram usage:        0 bytes
 13383 ;; Hardware stack levels used:    1
 13384 ;; This function calls:
 13385 ;;		Nothing
 13386 ;; This function is called by:
 13387 ;;		_do_I2C_SEND_RESTART_READ
 13388 ;;		_do_I2C_SEND_RESTART_WRITE
 13389 ;;		_do_I2C_SEND_RESTART
 13390 ;; This function uses a non-reentrant model
 13391 ;;
 13392                           
 13393                           
 13394                           ;psect for function i1_i2c1_driver_restart
 13395  09E0                     i1_i2c1_driver_restart:	
 13396                           
 13397                           ;mcc_generated_files/i2c1_driver.c: 153:     SSP1CON2bits.RSEN = 1;
 13398                           
 13399                           ;incstack = 0
 13400                           ; Regs used in i1_i2c1_driver_restart: []
 13401  09E0  0024               	movlb	4	; select bank4
 13402  09E1  1496               	bsf	22,1	;volatile
 13403  09E2  0008               	return
 13404  09E3                     __end_ofi1_i2c1_driver_restart:	
 13405                           
 13406                           	psect	text91
 13407  0A13                     __ptext91:	
 13408 ;; *************** function _i2c1_driver_sendACK *****************
 13409 ;; Defined at:
 13410 ;;		line 196 in file "mcc_generated_files/i2c1_driver.c"
 13411 ;; Parameters:    Size  Location     Type
 13412 ;;		None
 13413 ;; Auto vars:     Size  Location     Type
 13414 ;;		None
 13415 ;; Return value:  Size  Location     Type
 13416 ;;                  1    wreg      void 
 13417 ;; Registers used:
 13418 ;;		None
 13419 ;; Tracked objects:
 13420 ;;		On entry : 0/0
 13421 ;;		On exit  : 0/0
 13422 ;;		Unchanged: 0/0
 13423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13424 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13425 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13426 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13427 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13428 ;;Total ram usage:        0 bytes
 13429 ;; Hardware stack levels used:    1
 13430 ;; This function calls:
 13431 ;;		Nothing
 13432 ;; This function is called by:
 13433 ;;		_do_I2C_DO_ACK
 13434 ;;		_do_I2C_RX
 13435 ;;		_I2C_Send_ACK
 13436 ;; This function uses a non-reentrant model
 13437 ;;
 13438                           
 13439                           
 13440                           ;psect for function _i2c1_driver_sendACK
 13441  0A13                     _i2c1_driver_sendACK:	
 13442                           
 13443                           ;mcc_generated_files/i2c1_driver.c: 198:     SSP1CON2bits.ACKDT = 0;
 13444                           
 13445                           ;incstack = 0
 13446                           ; Regs used in _i2c1_driver_sendACK: []
 13447  0A13  0024               	movlb	4	; select bank4
 13448  0A14  1296               	bcf	22,5	;volatile
 13449                           
 13450                           ;mcc_generated_files/i2c1_driver.c: 199:     SSP1CON2bits.ACKEN = 1;
 13451  0A15  1616               	bsf	22,4	;volatile
 13452  0A16  0008               	return
 13453  0A17                     __end_of_i2c1_driver_sendACK:	
 13454                           
 13455                           	psect	text92
 13456  09DB                     __ptext92:	
 13457 ;; *************** function _PIN_MANAGER_IOC *****************
 13458 ;; Defined at:
 13459 ;;		line 118 in file "mcc_generated_files/pin_manager.c"
 13460 ;; Parameters:    Size  Location     Type
 13461 ;;		None
 13462 ;; Auto vars:     Size  Location     Type
 13463 ;;		None
 13464 ;; Return value:  Size  Location     Type
 13465 ;;                  1    wreg      void 
 13466 ;; Registers used:
 13467 ;;		None
 13468 ;; Tracked objects:
 13469 ;;		On entry : 0/0
 13470 ;;		On exit  : 0/0
 13471 ;;		Unchanged: 0/0
 13472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13473 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13474 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13475 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13476 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13477 ;;Total ram usage:        0 bytes
 13478 ;; Hardware stack levels used:    1
 13479 ;; This function calls:
 13480 ;;		Nothing
 13481 ;; This function is called by:
 13482 ;;		_INTERRUPT_InterruptManager
 13483 ;; This function uses a non-reentrant model
 13484 ;;
 13485                           
 13486                           
 13487                           ;psect for function _PIN_MANAGER_IOC
 13488  09DB                     _PIN_MANAGER_IOC:	
 13489                           
 13490                           ;incstack = 0
 13491                           ; Regs used in _PIN_MANAGER_IOC: []
 13492  09DB  0008               	return
 13493  09DC                     __end_of_PIN_MANAGER_IOC:	
 13494  007E                     btemp	set	126	;btemp
 13495  007E                     int$flags	set	126
 13496  007E                     wtemp0	set	126


Data Sizes:
    Strings     59
    Constant    32
    Data        1
    BSS         122
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      12
    BANK0            80     61      79
    BANK1            80     66      66
    BANK2            80     64      66
    BANK3            80      0      29
    BANK4            80      0      68
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    i2c_ISR$2093	const PTR FTN()enum E7120 size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_SEND_ADR_READ(), do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), 
		 -> do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), do_I2C_IDLE(), do_I2C_RESET(), 

    returnStop@p	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    returnReset@p	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    S52$11$0	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_5(CODE[11]), STR_4(CODE[16]), STR_3(CODE[13]), STR_2(CODE[12]), 
		 -> STR_1(CODE[7]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_5(CODE[11]), STR_4(CODE[16]), STR_3(CODE[13]), STR_2(CODE[12]), 
		 -> STR_1(CODE[7]), 

    wireReadDataBlock@val	PTR unsigned char  size(2) Largest target is 64
		 -> readGesture@fifo_data2(BANK1[64]), readGesture@fifo_data(BANK2[64]), 

    Display_Name@string1	PTR unsigned char  size(2) Largest target is 16
		 -> STR_5(CODE[11]), STR_4(CODE[16]), STR_3(CODE[13]), STR_2(CODE[12]), 
		 -> STR_1(CODE[7]), 

    i2c1_driver_i2cISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), i2c_ISR(), 

    i2c1_driver_busCollisionISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), i2c_busCollisionISR(), 

    fsmStateTable	const PTR FTN()enum E7120[16] size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_SEND_ADR_READ(), do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), 
		 -> do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), do_I2C_IDLE(), do_I2C_RESET(), 

    S52$callbackPayload	PTR void [6] size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    i2c_status.callbackPayload	PTR void [6] size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    S52$callbackTable	PTR FTN(PTR void ,)enum E6966[6] size(2) Largest target is 1
		 -> returnReset(), returnStop(), 

    i2c_status.callbackTable	PTR FTN(PTR void ,)enum E6966[6] size(2) Largest target is 1
		 -> returnReset(), returnStop(), 

    S52$data_ptr	PTR unsigned char  size(1) Largest target is 0

    i2c_status.data_ptr	PTR unsigned char  size(1) Largest target is 0


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_i2c_ISR
    _i2c_ISR->_do_I2C_DO_ADDRESS_NACK
    _i2c_ISR->_do_I2C_RX
    _i2c_ISR->_do_I2C_TX
    _i2c_ISR->_do_I2C_TX_EMPTY

Critical Paths under _main in BANK0

    _main->_handleGesture
    _initialize->_setMode
    _setProximityGain->_wireWriteDataByte
    _setProxIntLowThresh->_wireWriteDataByte
    _setProxIntHighThresh->_wireWriteDataByte
    _setLightIntLowThreshold->_wireWriteDataByte
    _setLightIntHighThreshold->_wireWriteDataByte
    _setLEDDrive->_wireWriteDataByte
    _setGestureWaitTime->_wireWriteDataByte
    _setGestureLEDDrive->_wireWriteDataByte
    _setGestureGain->_wireWriteDataByte
    _setGestureExitThresh->_wireWriteDataByte
    _setGestureEnterThresh->_wireWriteDataByte
    _setAmbientLightGain->_wireWriteDataByte
    _handleGesture->_readGesture
    _readGesture->_processGestureData
    _wireReadDataBlock->_I2C_Write_Byte
    _processGestureData->___awdiv
    ___awdiv->___wmul
    _isGestureAvailable->_wireReadDataByte
    _Send_Names->_Display_Name
    _Display_Name->_strlen
    _Display_Clear->_SPI_Write
    _SPI_Write->_SPI2_Exchange8bit
    _enableGestureSensor->_setMode
    _setLEDBoost->_wireWriteDataByte
    _setGestureMode->_wireWriteDataByte
    _setGestureIntEnable->_wireWriteDataByte
    _enablePower->_setMode
    _setMode->_getMode
    _wireWriteDataByte->_I2C_Write_Byte
    _getMode->_wireReadDataByte
    _wireReadDataByte->_I2C_Write_Byte
    _I2C_Write_Byte->_i2c1_driver_TXData
    _I2C_Read_Byte->_i2c1_driver_isBufferFull

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _handleGesture->_readGesture

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    _handleGesture->_readGesture

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   87199
                                             60 BANK0      1     1      0
                                             64 BANK1      2     2      0
                      _Display_Clear
                       _Display_Name
                  _SYSTEM_Initialize
                _enableGestureSensor
                      _handleGesture
                         _initialize
                 _isGestureAvailable
 ---------------------------------------------------------------------------------
 (1) _initialize                                           2     2      0   54520
                                             16 BANK0      2     2      0
                   _i2c1_driver_open
                _setAmbientLightGain
              _setGestureEnterThresh
               _setGestureExitThresh
                     _setGestureGain
                _setGestureIntEnable
                 _setGestureLEDDrive
                 _setGestureWaitTime
                        _setLEDDrive
           _setLightIntHighThreshold
            _setLightIntLowThreshold
                            _setMode
               _setProxIntHighThresh
                _setProxIntLowThresh
                   _setProximityGain
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setProximityGain                                     4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setProxIntLowThresh                                  2     2      0    3429
                                             10 BANK0      2     2      0
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setProxIntHighThresh                                 2     2      0    3429
                                             10 BANK0      2     2      0
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setLightIntLowThreshold                              5     3      2    3618
                                             10 BANK0      5     3      2
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setLightIntHighThreshold                             5     3      2    3618
                                             10 BANK0      5     3      2
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setLEDDrive                                          4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureWaitTime                                   3     3      0    3633
                                             10 BANK0      3     3      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureLEDDrive                                   4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureGain                                       4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureExitThresh                                 2     2      0    3429
                                             10 BANK0      2     2      0
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureEnterThresh                                2     2      0    3429
                                             10 BANK0      2     2      0
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setAmbientLightGain                                  3     3      0    3633
                                             10 BANK0      3     3      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _i2c1_driver_open                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _handleGesture                                        1     1      0    8444
                                             59 BANK0      1     1      0
                      _Display_Clear
                         _Send_Names
                        _readGesture
 ---------------------------------------------------------------------------------
 (2) _readGesture                                        140   138      2    7486
                                             47 BANK0     12    10      2
                                              0 BANK1     64    64      0
                                              0 BANK2     64    64      0
                      _decodeGesture
                            _getMode
                 _isGestureAvailable
                 _processGestureData
             _resetGestureParameters
                  _wireReadDataBlock
                   _wireReadDataByte
 ---------------------------------------------------------------------------------
 (3) _wireReadDataBlock                                   11     7      4     651
                                              6 BANK0     11     7      4
                        _I2C_ReStart
                      _I2C_Read_Byte
                      _I2C_Send_NACK
                          _I2C_Start
                           _I2C_Stop
                     _I2C_Write_Byte
 ---------------------------------------------------------------------------------
 (3) _processGestureData                                  32    32      0    5314
                                             15 BANK0     32    32      0
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    1846
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              9     5      4    1165
                                              6 BANK0      9     5      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _isGestureAvailable                                   2     2      0     198
                                              9 BANK0      2     2      0
                   _wireReadDataByte
 ---------------------------------------------------------------------------------
 (3) _decodeGesture                                       18    18      0     296
                                              0 BANK0     18    18      0
 ---------------------------------------------------------------------------------
 (2) _Send_Names                                           2     2      0     896
                                             12 BANK0      2     2      0
                       _Display_Name
 ---------------------------------------------------------------------------------
 (3) _Display_Name                                         7     5      2     896
                                              5 BANK0      7     5      2
                          _SPI_Write
                             _strlen
 ---------------------------------------------------------------------------------
 (4) _strlen                                               5     3      2     220
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _Display_Clear                                        1     1      0      62
                                              3 BANK0      1     1      0
                          _SPI_Write
 ---------------------------------------------------------------------------------
 (4) _SPI_Write                                            2     2      0      62
                                              1 BANK0      2     2      0
                  _SPI2_Exchange8bit
 ---------------------------------------------------------------------------------
 (5) _SPI2_Exchange8bit                                    1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _enableGestureSensor                                  2     2      0   23076
                                             16 BANK0      2     2      0
                        _enablePower
             _resetGestureParameters
                _setGestureIntEnable
                     _setGestureMode
                        _setLEDBoost
                            _setMode
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setLEDBoost                                          4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureMode                                       3     3      0    3633
                                             10 BANK0      3     3      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureIntEnable                                  3     3      0    3667
                                             10 BANK0      3     3      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (3) _resetGestureParameters                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _enablePower                                          0     0      0    4340
                            _setMode
 ---------------------------------------------------------------------------------
 (2) _setMode                                              5     4      1    4340
                                             11 BANK0      5     4      1
                            _getMode
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _wireWriteDataByte                                    4     1      3    3398
                                              6 BANK0      4     1      3
                          _I2C_Start
                           _I2C_Stop
                     _I2C_Write_Byte
 ---------------------------------------------------------------------------------
 (3) _getMode                                              2     2      0     195
                                              9 BANK0      2     2      0
                   _wireReadDataByte
 ---------------------------------------------------------------------------------
 (2) _wireReadDataByte                                     3     3      0     161
                                              6 BANK0      3     3      0
                        _I2C_ReStart
                      _I2C_Read_Byte
                      _I2C_Send_NACK
                          _I2C_Start
                           _I2C_Stop
                     _I2C_Write_Byte
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Byte                                       5     5      0      96
                                              1 BANK0      5     5      0
                 _i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_TXData                                   1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _I2C_Stop                                             0     0      0       0
                   _i2c1_driver_stop
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_stop                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_Start                                            0     0      0       0
                  _i2c1_driver_start
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_start                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_Send_NACK                                        0     0      0       0
               _i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_sendNACK                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_Read_Byte                                        0     0      0       0
              _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
                _i2c1_driver_startRX
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_startRX                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_isBufferFull                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_getRXData                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_ReStart                                          0     0      0       0
                _i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_restart                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PMD_Initialize
                    _SPI2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SPI2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PMD_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                           0     0      0     914
                   Absolute function *
                    _PIN_MANAGER_IOC
                            _i2c_ISR *
                _i2c_busCollisionISR *
 ---------------------------------------------------------------------------------
 (9) _i2c_busCollisionISR                                  0     0      0       0
      _i2c1_driver_clearBusCollision
 ---------------------------------------------------------------------------------
 (10) _i2c1_driver_clearBusCollision                       0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _i2c_ISR                                              3     3      0     914
                                              3 COMMON     3     3      0
                      _do_I2C_DO_ACK *
             _do_I2C_DO_ADDRESS_NACK *
             _do_I2C_DO_NACK_RESTART *
                _do_I2C_DO_NACK_STOP *
                        _do_I2C_IDLE *
                        _do_I2C_RCEN *
                       _do_I2C_RESET *
                          _do_I2C_RX *
               _do_I2C_SEND_ADR_READ *
              _do_I2C_SEND_ADR_WRITE *
                _do_I2C_SEND_RESTART *
           _do_I2C_SEND_RESTART_READ *
          _do_I2C_SEND_RESTART_WRITE *
                   _do_I2C_SEND_STOP *
                          _do_I2C_TX *
                    _do_I2C_TX_EMPTY *
                 _i2c1_driver_isNACK
                     _mssp1_clearIRQ
 ---------------------------------------------------------------------------------
 (10) _mssp1_clearIRQ                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_TX_EMPTY                                     3     3      0     212
                                              0 COMMON     3     3      0
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                       _mssp1_setIRQ
                        _returnReset *
                         _returnStop *
 ---------------------------------------------------------------------------------
 (11) _mssp1_setIRQ                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_TX                                           3     3      0     234
                                              0 COMMON     3     3      0
           _do_I2C_SEND_RESTART_READ
          _do_I2C_SEND_RESTART_WRITE
                   _do_I2C_SEND_STOP
                 _i2c1_driver_isNACK
                        _returnReset *
                         _returnStop *
               i1_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (10) _i2c1_driver_isNACK                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _do_I2C_SEND_RESTART_WRITE                           0     0      0       0
              i1_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (11) _do_I2C_SEND_RESTART_READ                            0     0      0       0
              i1_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (10) _do_I2C_SEND_ADR_WRITE                               0     0      0      22
               i1_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (10) _do_I2C_SEND_ADR_READ                                0     0      0      22
               i1_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (11) i1_i2c1_driver_TXData                                1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_RX                                           3     3      0     212
                                              0 COMMON     3     3      0
             _do_I2C_DO_NACK_RESTART
                _do_I2C_DO_NACK_STOP
                _i2c1_driver_sendACK
                        _returnReset *
                         _returnStop *
            i1_i2c1_driver_getRXData
 ---------------------------------------------------------------------------------
 (11) i1_i2c1_driver_getRXData                             0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _do_I2C_DO_NACK_STOP                                 0     0      0       0
             i1_i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (11) _do_I2C_DO_NACK_RESTART                              0     0      0       0
             i1_i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (12) i1_i2c1_driver_sendNACK                              0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_RESET                                        0     0      0       0
               _i2c1_driver_resetBus
 ---------------------------------------------------------------------------------
 (11) _i2c1_driver_resetBus                                0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_RCEN                                         0     0      0       0
              i1_i2c1_driver_startRX
 ---------------------------------------------------------------------------------
 (11) i1_i2c1_driver_startRX                               0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_IDLE                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_DO_ADDRESS_NACK                              3     3      0     212
                                              0 COMMON     3     3      0
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                        _returnReset *
                         _returnStop *
 ---------------------------------------------------------------------------------
 (11) _returnStop                                          1     0      1       0
                                              0 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (11) _returnReset                                         1     0      1     212
                                              0 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (11) _do_I2C_SEND_STOP                                    0     0      0       0
                 i1_i2c1_driver_stop
 ---------------------------------------------------------------------------------
 (12) i1_i2c1_driver_stop                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _do_I2C_SEND_RESTART                                 0     0      0       0
              i1_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (12) i1_i2c1_driver_restart                               0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_DO_ACK                                       0     0      0       0
                _i2c1_driver_sendACK
 ---------------------------------------------------------------------------------
 (11) _i2c1_driver_sendACK                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _PIN_MANAGER_IOC                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (9) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Display_Clear
     _SPI_Write
       _SPI2_Exchange8bit
   _Display_Name
     _SPI_Write
       _SPI2_Exchange8bit
     _strlen
   _SYSTEM_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PMD_Initialize
     _SPI2_Initialize
     _WDT_Initialize
   _enableGestureSensor
     _enablePower
       _setMode
         _getMode
           _wireReadDataByte
             _I2C_ReStart
               _i2c1_driver_restart
             _I2C_Read_Byte
               _i2c1_driver_getRXData
               _i2c1_driver_isBufferFull
               _i2c1_driver_startRX
             _I2C_Send_NACK
               _i2c1_driver_sendNACK
             _I2C_Start
               _i2c1_driver_start
             _I2C_Stop
               _i2c1_driver_stop
             _I2C_Write_Byte
               _i2c1_driver_TXData
         _wireWriteDataByte
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
     _resetGestureParameters
     _setGestureIntEnable
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureMode
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setLEDBoost
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setMode
       _getMode
         _wireReadDataByte
           _I2C_ReStart
             _i2c1_driver_restart
           _I2C_Read_Byte
             _i2c1_driver_getRXData
             _i2c1_driver_isBufferFull
             _i2c1_driver_startRX
           _I2C_Send_NACK
             _i2c1_driver_sendNACK
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _wireWriteDataByte
       _I2C_Start
         _i2c1_driver_start
       _I2C_Stop
         _i2c1_driver_stop
       _I2C_Write_Byte
         _i2c1_driver_TXData
   _handleGesture
     _Display_Clear
       _SPI_Write
         _SPI2_Exchange8bit
     _Send_Names
       _Display_Name
         _SPI_Write
           _SPI2_Exchange8bit
         _strlen
     _readGesture
       _decodeGesture
       _getMode
         _wireReadDataByte
           _I2C_ReStart
             _i2c1_driver_restart
           _I2C_Read_Byte
             _i2c1_driver_getRXData
             _i2c1_driver_isBufferFull
             _i2c1_driver_startRX
           _I2C_Send_NACK
             _i2c1_driver_sendNACK
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
       _isGestureAvailable
         _wireReadDataByte
           _I2C_ReStart
             _i2c1_driver_restart
           _I2C_Read_Byte
             _i2c1_driver_getRXData
             _i2c1_driver_isBufferFull
             _i2c1_driver_startRX
           _I2C_Send_NACK
             _i2c1_driver_sendNACK
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
       _processGestureData
         ___awdiv
           ___wmul (ARG)
         ___wmul
       _resetGestureParameters
       _wireReadDataBlock
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
   _initialize
     _i2c1_driver_open
     _setAmbientLightGain
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureEnterThresh
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureExitThresh
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureGain
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureIntEnable
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureLEDDrive
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureWaitTime
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setLEDDrive
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setLightIntHighThreshold
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setLightIntLowThreshold
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setMode
       _getMode
         _wireReadDataByte
           _I2C_ReStart
             _i2c1_driver_restart
           _I2C_Read_Byte
             _i2c1_driver_getRXData
             _i2c1_driver_isBufferFull
             _i2c1_driver_startRX
           _I2C_Send_NACK
             _i2c1_driver_sendNACK
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setProxIntHighThresh
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setProxIntLowThresh
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setProximityGain
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _wireReadDataByte
       _I2C_ReStart
         _i2c1_driver_restart
       _I2C_Read_Byte
         _i2c1_driver_getRXData
         _i2c1_driver_isBufferFull
         _i2c1_driver_startRX
       _I2C_Send_NACK
         _i2c1_driver_sendNACK
       _I2C_Start
         _i2c1_driver_start
       _I2C_Stop
         _i2c1_driver_stop
       _I2C_Write_Byte
         _i2c1_driver_TXData
     _wireWriteDataByte
       _I2C_Start
         _i2c1_driver_start
       _I2C_Stop
         _i2c1_driver_stop
       _I2C_Write_Byte
         _i2c1_driver_TXData
   _isGestureAvailable
     _wireReadDataByte
       _I2C_ReStart
         _i2c1_driver_restart
       _I2C_Read_Byte
         _i2c1_driver_getRXData
         _i2c1_driver_isBufferFull
         _i2c1_driver_startRX
       _I2C_Send_NACK
         _i2c1_driver_sendNACK
       _I2C_Start
         _i2c1_driver_start
       _I2C_Stop
         _i2c1_driver_stop
       _I2C_Write_Byte
         _i2c1_driver_TXData

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _PIN_MANAGER_IOC *
   _i2c_ISR *
     _do_I2C_DO_ACK *
       _i2c1_driver_sendACK
     _do_I2C_DO_ADDRESS_NACK *
       _do_I2C_SEND_RESTART
         i1_i2c1_driver_restart
       _do_I2C_SEND_STOP
         i1_i2c1_driver_stop
       _returnReset *
       _returnStop *
     _do_I2C_DO_NACK_RESTART *
       i1_i2c1_driver_sendNACK
     _do_I2C_DO_NACK_STOP *
       i1_i2c1_driver_sendNACK
     _do_I2C_IDLE *
     _do_I2C_RCEN *
       i1_i2c1_driver_startRX
     _do_I2C_RESET *
       _i2c1_driver_resetBus
     _do_I2C_RX *
       _do_I2C_DO_NACK_RESTART
         i1_i2c1_driver_sendNACK
       _do_I2C_DO_NACK_STOP
         i1_i2c1_driver_sendNACK
       _i2c1_driver_sendACK
       _returnReset *
       _returnStop *
       i1_i2c1_driver_getRXData *
     _do_I2C_SEND_ADR_READ *
       i1_i2c1_driver_TXData
     _do_I2C_SEND_ADR_WRITE *
       i1_i2c1_driver_TXData
     _do_I2C_SEND_RESTART *
       i1_i2c1_driver_restart
     _do_I2C_SEND_RESTART_READ *
       i1_i2c1_driver_restart
     _do_I2C_SEND_RESTART_WRITE *
       i1_i2c1_driver_restart
     _do_I2C_SEND_STOP *
       i1_i2c1_driver_stop
     _do_I2C_TX *
       _do_I2C_SEND_RESTART_READ
         i1_i2c1_driver_restart
       _do_I2C_SEND_RESTART_WRITE
         i1_i2c1_driver_restart
       _do_I2C_SEND_STOP
         i1_i2c1_driver_stop
       _i2c1_driver_isNACK
       _returnReset *
       _returnStop *
       i1_i2c1_driver_TXData *
     _do_I2C_TX_EMPTY *
       _do_I2C_SEND_RESTART
         i1_i2c1_driver_restart
       _do_I2C_SEND_STOP
         i1_i2c1_driver_stop
       _mssp1_setIRQ
       _returnReset *
       _returnStop *
     _i2c1_driver_isNACK *
     _mssp1_clearIRQ *
   _i2c_busCollisionISR *
     _i2c1_driver_clearBusCollision

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     3D      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     42      42       7       82.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     40      42       9       82.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      1D      11       36.3%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      44      13       85.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     140      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     140      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Sun Mar 31 15:44:45 2019

                          returnReset@p 0076                   ?_setGestureExitThresh 0076  
                    __size_of_I2C_Start 0003                             __CFG_CP$OFF 0000  
                          ___awdiv@sign 002C                    __size_of_do_I2C_IDLE 0005  
                   _do_I2C_SEND_RESTART 0A23                    __size_of_do_I2C_RCEN 0006  
                   ___wmul@multiplicand 0022                             __CFG_LVP$ON 0000  
                                   l603 0EB1                                     l616 0EE9  
                                   l902 02CA                                     l906 02F3  
                                   l907 030B        processGestureData@ud_ratio_first 0031  
                                   l940 03E0                                     l932 03AC  
                                   l860 0074                                     l952 0433  
                                   l944 03FD                                     l928 038F  
                                   l883 022F                                     l964 0482  
                                   l956 0450                                     l895 02AB  
                                   l887 0258                                     l968 049F  
                                   l889 027D                            __CFG_CPD$OFF 0000  
                 __end_of_decodeGesture 04B0                    __size_of_I2C_ReStart 0003  
               __size_of_PMD_Initialize 0008                      I2C_Write_Byte@Byte 0023  
                 __size_of_do_I2C_RESET 0007                                     wreg 0009  
                    i1_i2c1_driver_stop 09E3                                    l1031 0BB3  
                                  l1061 0AD5                                    l1240 0BCF  
                                  l6010 0B4A                                    l6020 0B37  
                                  l5310 0BB6                                    l6030 0CD5  
                                  l5330 0ADA                                    l6050 0CAE  
                                  l6034 0CD7                                    l5316 0AA8  
                                  l5412 0731                                    l6116 0E80  
                                  l5430 0757                                    l5422 0739  
                                  l5406 0726                                    l6070 0B11  
                                  l6134 0C96                                    l6054 0CB0  
                                  l6152 0D8C                                    l5360 0B88  
                                  l5424 0745                                    l6080 0B24  
                                  l6170 0E1C                                    l5434 0760  
                                  l5530 0FA6                                    l6242 04C3  
                                  l5452 0E94                                    l5700 032C  
                                  l5612 01E2                                    l5540 0063  
                                  l5358 0B7C                                    l5710 0342  
                                  l5438 0768                                    l5622 0207  
                                  l5614 01E5                                    l6246 04C5  
                                  l5712 0344                                    l5632 022A  
                                  l5624 020A                                    l5608 01D0  
                                  l5560 0070                                    l5544 0065  
                                  l5528 0F77                                    l6440 07BD  
                                  l5474 0779                                    l5802 04AC  
                                  l5730 0368                                    l5722 0356  
                                  l5706 0338                                    l5466 0AFE  
                                  l5386 0BC9                                    l5650 0279  
                                  l5618 01F5                                    l5562 00CA  
                                  l6098 0E4E                                    l6188 0C6F  
                                  l5900 0ED2                                    l5724 0358  
                                  l5716 034C                                    l5660 029F  
                                  l6452 07D7                                    l5494 07AC  
                                  l5486 0793                                    l5478 077B  
                                  l6198 0ABC                                    l6374 06CD  
                                  l5742 03A7                                    l5718 034E  
                                  l5806 04AE                                    l5646 0271  
                                  l5638 0253                                    l5590 00E1  
                                  l6446 07C7                                    l6534 0DB1  
                                  l5496 07AD                                    l5488 07A0  
                                  l6392 06CB                                    l6720 0EDB  
                                  l5760 03F8                                    l5728 0362  
                                  l5672 02C5                                    l5576 00E5  
                                  l5912 05D5                                    l6464 07E1  
                                  l6378 06CF                                    l5738 038A  
                                  l5594 012F                                    l5930 05EC  
                                  l5922 05D9                                    l6466 07F8  
                                  l5756 03DB                                    l5748 03B9  
                                  l5668 02AD                                    l5916 068A  
                                  l5774 042E                                    l5766 040A  
                                  l5678 02EE                                    l5950 061D  
                                  l6718 07EA                                    l5792 047D  
                                  l5784 045D                                    l5952 067E  
                                  l5890 0EB6                                    l5778 044B  
                                  l5938 060F                                    l5892 0EBD  
                                  l5796 049A                                    l5956 0687  
                                  l5894 0EC4                                    l5896 0ECB  
                                  STR_1 1054                                    STR_2 103D  
                                  STR_3 1030                                    STR_4 1020  
                                  STR_5 1049                                    _LATA 010C  
                                  _LATB 010D                                    _LATC 010E  
                                  u5005 043C                                    u5015 045A  
                                  u4225 0E9E                                    u4145 073C  
                                  u5045 046E                                    u4165 0746  
                                  u4085 0BD0                                    u4405 007F  
                                  u4325 0F80                                    u5055 048B  
                                  u4175 0750                                    u4095 0BD5  
                                  u5065 04A9                                    u4185 0758  
                                  u4505 01C9                                    u5145 0618  
                                  u4274 078C                                    u4275 078B  
                                  u4515 01DA                                    u5155 0627  
                                  u4284 0798                                    _PMD0 0911  
                                  u4285 0797                                    u4525 01EE  
                                  _PMD1 0912                                    _PMD2 0913  
                                  u5335 0DFD                                    u4535 01FF  
                                  u5175 0CF7                                    _PMD3 0914  
                                  _PMD4 0915                                    u4705 02B6  
                                  u5185 0D20                                    _PMD5 0916  
                                  u4715 02D3                                    u5275 0E2F  
                                  u4725 02DF                                    u4645 0286  
                                  u4565 021B                                    u4735 02FC  
                                  u4655 0292                                    u4575 0238  
                                  u5295 0E61                                    u4905 0398  
                                  u4585 0244                                    u4915 03B6  
                                  u4595 0261                                    u4765 0314  
                                  u4945 03CC                                    u4955 03E9  
                                  u4965 0407                    ?_do_I2C_SEND_RESTART 0076  
                                  u4895 037B                                    u5847 0DA4  
                                  u5857 07D1                                    u4995 041F  
                                  u5867 068E                                    u5877 06A0  
                                  u5887 0AE4                                    u5897 0B5B  
                                  _WPUA 020C                                    _WPUB 020D  
                                  _WPUC 020E                            __CFG_WRT$OFF 0000  
                         __CFG_FCMEN$ON 0000       __size_of_do_I2C_SEND_RESTART_READ 0004  
                   ?i1_i2c1_driver_stop 0076               ?_do_I2C_SEND_RESTART_READ 0076  
                                  _main 0D8E                                    _name 006E  
             __size_of_do_I2C_SEND_STOP 0004                  __size_of_do_I2C_DO_ACK 0004  
                                  fsr0h 0005                                    fsr1h 0007  
                                  indf0 0000                                    fsr0l 0004  
                                  indf1 0001                                    fsr1l 0006  
                                  btemp 007E                   ??_setGestureIntEnable 002A  
                      __end_of_I2C_Stop 0A13                           __CFG_BOREN$ON 0000  
               i1_i2c1_driver_getRXData 09E9                   ?_do_I2C_SEND_ADR_READ 0076  
                         __CFG_BORV$LOW 0000         ??_i2c1_driver_clearBusCollision 0076  
                                  start 002B                     I2C_Write_Byte@count 0024  
                         __CFG_CSWEN$ON 0000                           __CFG_MCLRE$ON 0000  
                       __end_of_i2c_ISR 0C4A                ??_do_I2C_DO_NACK_RESTART 0076  
                          ?_readGesture 004F                            _do_I2C_RESET 0A56  
        __size_of_OSCILLATOR_Initialize 0008           __end_of_OSCILLATOR_Initialize 0A8A  
                  ??i1_i2c1_driver_stop 0076                __end_of_i2c1_driver_open 0AA5  
                                 ?_main 0076                         __end_of___awdiv 076D  
              __end_of_i2c1_driver_stop 0A10                         ___awdiv@divisor 0026  
            __end_of_i2c1_driver_TXData 0A50                          __CFG_DEBUG$OFF 0000  
                                 i1l157 0FE4                                   i1l173 0F3B  
                                 i1l253 0029                                   i1l245 0010  
                                 i1l248 001E                            ?_setLEDBoost 0076  
                       ___awdiv@counter 002B                            ?_setLEDDrive 0076  
                        _setGestureGain 0E1E                                   _OSCEN 091D  
                    wireReadDataBlock@j 0030                          _setGestureMode 0C4A  
                                 _TRISA 008C                                   _TRISB 008D  
                                 _TRISC 008E             __end_of_setProxIntLowThresh 0B4C  
                       __end_of_getMode 0A9B                   isGestureAvailable@val 002A  
               __end_of_PIN_MANAGER_IOC 09DC              __end_of_i2c1_driver_isNACK 0A7A  
                __size_of_I2C_Read_Byte 000B                          _WDT_Initialize 0A37  
                      _b_i2c_error_flag 0072            __end_of_setProxIntHighThresh 0B39  
            ?_do_I2C_SEND_RESTART_WRITE 0076                   ??_do_I2C_SEND_RESTART 0076  
                       __end_of_setMode 07BC                       __end_of_I2C_Start 0A0D  
                                 pclath 000A                 __size_of_mssp1_clearIRQ 0003  
                  i1_i2c1_driver_TXData 0A3F            __size_of_setAmbientLightGain 001E  
                ?_do_I2C_SEND_ADR_WRITE 0076                  __size_of_I2C_Send_NACK 0003  
                                 status 0003                                   wtemp0 007E  
                    __size_of_SPI_Write 0015                ?_setLightIntLowThreshold 002A  
            __end_of_setGestureLEDDrive 0E82                   setGestureWaitTime@val 002C  
                         _fsmStateTable 1000                           _gesture_data_ 0220  
                       __initialization 002D                  ??_setGestureExitThresh 002A  
                     _SPI2_Exchange8bit 0ACD              processGestureData@lr_delta 004B  
                            _i2c_status 01A0                            __end_of_main 0DBB  
                     _handleGestureFlag 0073              processGestureData@ud_delta 0049  
                    ?_SPI2_Exchange8bit 0076             ?_INTERRUPT_InterruptManager 0076  
                __end_of_setGestureGain 0E50               __size_of_setProximityGain 0029  
                __end_of_setGestureMode 0C71                           _do_I2C_DO_ACK 0A2B  
                                ??_main 005C           __size_of_i2c1_driver_sendNACK 0004  
              __size_of_SPI2_Initialize 0007                     ??_SPI2_Exchange8bit 0020  
     __size_of_setLightIntHighThreshold 0027           __size_of_i2c1_driver_resetBus 0001  
                __end_of_WDT_Initialize 0A3B                 ?_do_I2C_DO_ADDRESS_NACK 0076  
             ?_setLightIntHighThreshold 002A       setLightIntHighThreshold@threshold 002A  
                  __end_of_Display_Name 0EB5                    __size_of_enablePower 000E  
                            _Send_Names 0EB5                        ___awdiv@dividend 0028  
                    _processGestureData 0055                                  _ANSELA 018C  
                                _ANSELB 018D                                  _ANSELC 018E  
                    __CFG_RSTOSC$HFINT1 0000            setProxIntLowThresh@threshold 002B  
                 ?i1_i2c1_driver_TXData 0076                                  _RC2PPS 0EA2  
                                _RB5PPS 0E9D                                  _RB6PPS 0E9E  
                                _RB7PPS 0E9F                                  _ODCONA 028C  
                                _ODCONB 028D                                  _ODCONC 028E  
                                i1l4210 0FBD                                  i1l4202 0FB7  
                                i1l4206 0FBA                                  i1l4224 0FFE  
                                i1l4216 0FC0                                  i1l4250 0F40  
                                i1l4180 0D3F                                  i1l4270 0DC1  
                                i1l4190 0D45                                  i1l4246 0F3D  
                                i1l4184 0D42                                  i1l4256 0F43  
                                i1l4266 0DBE                                  i1l4282 0DC8  
                                i1l4276 0DC5                                  i1l4700 0C34  
             ??i1_i2c1_driver_getRXData 0076                                  i1l6722 0F58  
                                i1l6724 0FD6                                  i1l6726 0D5A  
                                i1l6728 0DDD                        _wireReadDataByte 0C00  
                                _OSCFRQ 091F                 ?_resetGestureParameters 0076  
                ??_do_I2C_SEND_ADR_READ 0076                                  _WDTCON 0097  
                             ??_i2c_ISR 0079                     ?_processGestureData 0076  
                     _gesture_lr_delta_ 0067                          __CFG_PWRTE$OFF 0000  
         setProxIntHighThresh@threshold 002B               __end_of_SPI2_Exchange8bit 0ADC  
                     _gesture_lr_count_ 0063                     wireReadDataByte@reg 0027  
                 _i2c1_driver_getRXData 09FE                     wireReadDataByte@val 0028  
                     _gesture_ud_delta_ 0069             __end_of_do_I2C_DO_NACK_STOP 0A33  
                         _I2C_Read_Byte 0AA5              __end_of_isGestureAvailable 0B00  
                     _gesture_ud_count_ 0065                                  ___wmul 0BC6  
                             ??___awdiv 002A   __end_of_i2c1_driver_clearBusCollision 09F5  
__size_of_i2c1_driver_clearBusCollision 0003           _i2c1_driver_clearBusCollision 09F2  
            __end_of_setGestureWaitTime 0C98                          __CFG_STVREN$ON 0000  
       __size_of_do_I2C_DO_NACK_RESTART 0004                                  _button 0075  
                      ___awdiv@quotient 002D                          ?_do_I2C_DO_ACK 0076  
                       ?_setGestureGain 0076                           _I2C_Send_NACK 0A04  
                             ??_getMode 0029                         ?_setGestureMode 0076  
                                _strlen 0B77                 ??_setGestureEnterThresh 002A  
                  ??_processGestureData 002F                       __end_of_SPI_Write 0B61  
           __end_of_i2c1_driver_sendACK 0A17                          _PMD_Initialize 0A8A  
        __end_of_do_I2C_DO_ADDRESS_NACK 0D63                               ?_I2C_Stop 0076  
                    Display_Name@length 0028                               ??_setMode 002C  
                       ?_WDT_Initialize 0076             __end_of_i2c1_driver_restart 09FB  
                          ?_returnReset 0076                       readGesture@motion 0053  
           __end_of_i2c1_driver_startRX 0A04                        ?_PIN_MANAGER_IOC 0076  
        __end_of_resetGestureParameters 0B77                       _SYSTEM_Initialize 0ABE  
               __end_of__initialization 0051                        _do_I2C_SEND_STOP 0A27  
                    __size_of_do_I2C_RX 0046                      __size_of_do_I2C_TX 004F  
                    ?_SYSTEM_Initialize 0076                  setGestureWaitTime@time 002B  
              __size_of_do_I2C_TX_EMPTY 0031                          ?_I2C_Read_Byte 0076  
                        __pcstackCOMMON 0076                            __pidataBANK0 09DD  
                   ??_SYSTEM_Initialize 0020                   i1i2c1_driver_TXData@d 0076  
                  _setProxIntHighThresh 0B26                          _gesture_state_ 005D  
                        ?_I2C_Send_NACK 0076                   i1_i2c1_driver_restart 09E0  
                __end_of_PMD_Initialize 0A92                   i1_i2c1_driver_startRX 09E6  
                  __size_of_readGesture 00F1                   __end_of_handleGesture 07FB  
     __size_of_i2c1_driver_isBufferFull 0007                              ??_I2C_Stop 0020  
             ?_i2c1_driver_isBufferFull 0076                      _gesture_far_count_ 005F  
                  __size_of_setLEDBoost 0032                    __size_of_setLEDDrive 0029  
                _do_I2C_DO_NACK_RESTART 0A33                  ??i1_i2c1_driver_TXData 0076  
             __end_of_SYSTEM_Initialize 0ACD                             ?_Send_Names 0076  
                     ??_SPI2_Initialize 0020                          _mssp1_clearIRQ 09EF  
                            __pbssBANK0 005D                              __pbssBANK2 0160  
                            __pbssBANK3 01A0                              __pbssBANK4 0220  
                  wireWriteDataByte@reg 0029                    wireWriteDataByte@val 0026  
                   getMode@enable_value 002A                ??i1_i2c1_driver_sendNACK 0076  
                ?_i2c1_driver_getRXData 0076              __size_of_SPI2_Exchange8bit 000F  
          __size_of_i2c_busCollisionISR 0003                              __pmaintext 0D8E  
                 __end_of_Display_Clear 0AED                           ??_do_I2C_IDLE 0076  
                         ??_do_I2C_RCEN 0076                 setGestureLEDDrive@drive 002D  
                               ?___wmul 0020                         __CFG_PPS1WAY$ON 0000  
                       ??_do_I2C_DO_ACK 0076            __size_of_enableGestureSensor 0064  
                            __pintentry 0004                   ?_setProxIntHighThresh 0076  
               __size_of_I2C_Write_Byte 001C                           ??_I2C_ReStart 0020  
                      _setProximityGain 0D0F                             setMode@mode 002F  
                       ?_PMD_Initialize 0076                     _setAmbientLightGain 0BE2  
                 __size_of_Display_Name 0033          ?_i2c1_driver_clearBusCollision 0076  
                               ?_strlen 0020                       ?_i2c1_driver_open 0076  
                     __end_of_do_I2C_RX 0F67                       __end_of_do_I2C_TX 1000  
                     ?_i2c1_driver_stop 0076                       _wireReadDataBlock 0F67  
                    ??_i2c1_driver_open 0020                      ??_i2c1_driver_stop 0020  
                               _OSCCON1 0919                                 _OSCCON3 091B  
                         ?_mssp1_setIRQ 0076                                 _OSCTUNE 091E  
                  wireReadDataBlock@len 0028                    wireReadDataBlock@reg 002F  
                  wireReadDataBlock@val 0026                                 _SSP1ADD 0212  
                               _SSP2ADD 021A                                 _SLRCONA 030C  
                               _SLRCONB 030D                                 _SLRCONC 030E  
                               _SSP1BUF 0211                  __end_of_mssp1_clearIRQ 09F2  
                               _SSP2BUF 0219                      ?_wireReadDataBlock 0026  
                               _SSP1MSK 0213                       SPI_Write@incoming 0022  
           __end_of_setGestureIntEnable 0D8E                 ??_do_I2C_SEND_ADR_WRITE 0076  
       processGestureData@lr_ratio_last 0037             ??_do_I2C_SEND_RESTART_WRITE 0076  
                          readGesture@i 0059                      _i2c1_driver_TXData 0A4A  
                  ?_setAmbientLightGain 0076                      _i2c1_driver_i2cISR 006B  
                   ??_wireReadDataBlock 002A                                 _i2c_ISR 0C24  
                             _I2C_Start 0A0A                         ??_I2C_Read_Byte 0021  
                         setMode@enable 002B                      _i2c1_driver_isNACK 0A72  
                __size_of_decodeGesture 0190                     ?_i2c1_driver_TXData 0076  
                          _Display_Name 0E82                         ??_I2C_Send_NACK 0020  
                               ___awdiv 071B                         __size_of___wmul 001C  
                ?i1_i2c1_driver_restart 0076                       ??_do_I2C_TX_EMPTY 0076  
                   __size_of_Send_Names 0035                     ?_i2c1_driver_isNACK 0076  
                ?i1_i2c1_driver_startRX 0076                __end_of_wireReadDataByte 0C24  
                            _initialize 04B0                                 _getMode 0A92  
      __size_of_setLightIntLowThreshold 0027                      _setGestureLEDDrive 0E50  
                               __ptext1 04B0                                 __ptext2 0D0F  
                               __ptext3 0B39                                 __ptext4 0B26  
                               __ptext5 0CBF                                 __ptext6 0C98  
                               __ptext7 0CE6                                 __ptext8 0C71  
                               __ptext9 0E50             __size_ofi1_i2c1_driver_stop 0003  
                   __end_of_do_I2C_IDLE 0800               __end_of_wireReadDataBlock 0FB1  
                   __end_of_do_I2C_RCEN 0A4A                         __size_of_strlen 0018  
                 _OSCILLATOR_Initialize 0A82             __end_of_do_I2C_SEND_RESTART 0A27  
                        ??_mssp1_setIRQ 0076                    ??_i2c1_driver_TXData 0020  
                               _setMode 076D                ??_PIN_MANAGER_Initialize 0020  
                   __end_of_I2C_ReStart 09FE                     ?_setGestureLEDDrive 0076  
                               _printed 006D                         ?_mssp1_clearIRQ 0076  
              _do_I2C_SEND_RESTART_READ 0A1B              __size_of_SYSTEM_Initialize 000F  
                               clrloop0 0A51                    __size_of_returnReset 0002  
                  end_of_initialization 0051                    ??_i2c1_driver_isNACK 0076  
                 ??_setAmbientLightGain 002A            __size_of_setProxIntLowThresh 0013  
          __end_of_i2c1_driver_sendNACK 0A3F         __size_ofi1_i2c1_driver_sendNACK 0004  
                            ?_I2C_Start 0076           enableGestureSensor@interrupts 0031  
          __end_of_i2c1_driver_resetBus 09DD           setGestureExitThresh@threshold 002B  
                  ??_setGestureLEDDrive 002A                      readGesture@gstatus 0055  
                          initialize@id 0031                        ??_setGestureGain 002A  
                ??_setProxIntHighThresh 002A                        ??_setGestureMode 002A  
             _do_I2C_SEND_RESTART_WRITE 0A1F                     Display_Name@string1 0025  
         __size_of_setGestureExitThresh 0013                                 strlen@a 0023  
                               strlen@s 0020                        ??_WDT_Initialize 0020  
                     _wireWriteDataByte 0B8F                              _returnStop 09DE  
              __end_of_do_I2C_SEND_STOP 0A2B                           ??_enablePower 0030  
                    ?_wireWriteDataByte 0026         setLightIntHighThreshold@val_low 002D  
        __size_of_setGestureEnterThresh 0013           __end_of_setGestureEnterThresh 0B13  
                         _decodeGesture 0320                      _isGestureAvailable 0AED  
                    _setGestureWaitTime 0C71                               _SPI_Write 0B4C  
                     __size_of_I2C_Stop 0003                             returnStop@p 0076  
                   ??_wireWriteDataByte 0029                        __CFG_FEXTOSC$OFF 0000  
       processGestureData@ud_ratio_last 0035                     ?_isGestureAvailable 0076  
                   ?_setGestureWaitTime 0076                   SPI2_Exchange8bit@data 0020  
         __size_of_do_I2C_SEND_ADR_READ 0008                   setProximityGain@drive 002D  
      __end_of_i2c1_driver_isBufferFull 0A72                             _do_I2C_IDLE 07FB  
                           _do_I2C_RCEN 0A44               __end_of_wireWriteDataByte 0BAA  
                        _I2C_Write_Byte 0BAA                    ??_isGestureAvailable 0029  
                        __end_of___wmul 0BE2                    ??_setGestureWaitTime 002A  
                           ?_initialize 0076                             _I2C_ReStart 09FB  
                i1_i2c1_driver_sendNACK 0A17                  ?_OSCILLATOR_Initialize 0076  
              _setLightIntHighThreshold 0C98              __size_of_wireReadDataBlock 004A  
                       _gesture_motion_ 0160                         _SPI2_Initialize 0A64  
          __size_of_do_I2C_DO_NACK_STOP 0004             __size_of_processGestureData 02CB  
                        ?_decodeGesture 0076                          __end_of_strlen 0B8F  
               ?_do_I2C_DO_NACK_RESTART 0076                     start_initialization 002D  
                    setGestureGain@gain 002D                     _i2c_busCollisionISR 09F5  
       __size_of_PIN_MANAGER_Initialize 0037                ?i1_i2c1_driver_getRXData 0076  
                            ?_SPI_Write 0076                            ??_Send_Names 002C  
      setLightIntHighThreshold@val_high 002E                     _enableGestureSensor 06B7  
                   __end_of_enablePower 0ABE            __size_of_i2c1_driver_sendACK 0004  
               ??_i2c1_driver_getRXData 0020                __end_of_setProximityGain 0D38  
          __size_of_i2c1_driver_restart 0003                processGestureData@d_last 0042  
          __size_of_i2c1_driver_startRX 0003                processGestureData@l_last 0043  
                           ??_I2C_Start 0020                processGestureData@r_last 0044  
              __size_of_PIN_MANAGER_IOC 0001                processGestureData@u_last 0041  
               _processGestureData$1182 0039                 _processGestureData$1183 003B  
               _processGestureData$1184 003D                 _processGestureData$1185 003F  
                  ?_i2c_busCollisionISR 0076                        __CFG_LPBOREN$OFF 0000  
                  __end_of_mssp1_setIRQ 09EF                  __end_of_I2C_Write_Byte 0BC6  
                      ??_PMD_Initialize 0020         setLightIntLowThreshold@val_high 002E  
                              ??___wmul 0024                    ?_enableGestureSensor 0076  
                         ??_readGesture 0051                           ?_do_I2C_RESET 0076  
                           __pdataBANK0 006E                      setGestureMode@mode 002B  
               _setLightIntLowThreshold 0CBF               setGestureIntEnable@enable 002C  
                    __end_of_Send_Names 0EEA                setAmbientLightGain@drive 002B  
                           ?_returnStop 0076                                ??_strlen 0022  
        __end_of_do_I2C_DO_NACK_RESTART 0A37                           ??_setLEDBoost 002A  
                         ??_setLEDDrive 002A                    _i2c1_driver_sendNACK 0A3B  
                setGestureIntEnable@val 002B                             __pbssCOMMON 0070  
                             ___latbits 0002                               _adcResult 0074  
                  _i2c1_driver_resetBus 09DC                           __pcstackBANK0 0020  
                         __pcstackBANK1 00A0                           __pcstackBANK2 0120  
                             _do_I2C_RX 0F21                               _do_I2C_TX 0FB1  
        __size_of_do_I2C_SEND_ADR_WRITE 0007           __size_ofi1_i2c1_driver_TXData 0005  
         __end_of_do_I2C_SEND_ADR_WRITE 0A64                   readGesture@fifo_data2 00A0  
             __size_of_i2c1_driver_open 000A                   readGesture@fifo_level 0058  
             __size_of_i2c1_driver_stop 0003                                ?_i2c_ISR 0076  
                   __size_of_initialize 0116                         _do_I2C_TX_EMPTY 0DBB  
                __size_of_handleGesture 003F                   ??_i2c_busCollisionISR 0076  
                 __end_of_fsmStateTable 1020                  _PIN_MANAGER_Initialize 0EEA  
               ??i1_i2c1_driver_restart 0076                 ??i1_i2c1_driver_startRX 0076  
                       ?_I2C_Write_Byte 0076                   ??_enableGestureSensor 0030  
               __end_of_SPI2_Initialize 0A6B                          ??_do_I2C_RESET 0076  
                              ?___awdiv 0026              __size_of_wireWriteDataByte 001B  
              ??_do_I2C_DO_ADDRESS_NACK 0076             _i2c1_driver_busCollisionISR 0070  
                   _setProxIntLowThresh 0B39                   __end_of_do_I2C_DO_ACK 0A2F  
          ??_INTERRUPT_InterruptManager 007C                _i2c1_driver_isBufferFull 0A6B  
                              ?_getMode 0076                         ??_decodeGesture 0020  
                     ?_wireReadDataByte 0076              ??_do_I2C_SEND_RESTART_READ 0076  
                 ?_i2c1_driver_sendNACK 0076         __end_ofi1_i2c1_driver_getRXData 09EC  
                      ??_mssp1_clearIRQ 0076                             _enablePower 0AB0  
                    ??_wireReadDataByte 0026                     __end_of_readGesture 06B7  
                 ?_i2c1_driver_resetBus 0076      __size_of_do_I2C_SEND_RESTART_WRITE 0004  
                              _I2C_Stop 0A10                ??_resetGestureParameters 0020  
                              ?_setMode 002B                              ?_do_I2C_RX 0076  
                            ?_do_I2C_TX 0076                        __CFG_WDTE$SWDTEN 0000  
                           ??_SPI_Write 0021                       _i2c1_driver_start 0A07  
                __size_of_Display_Clear 0011                     __end_of_setLEDBoost 0E1E  
                   __end_of_setLEDDrive 0D0F                    ?_setProxIntLowThresh 0076  
                 readGesture@bytes_read 0056                      ?_i2c1_driver_start 0076  
                        ___wmul@product 0024                                _LATCbits 010E  
                   __size_of_returnStop 0002                               clear_ram0 0A50  
                              _PIE0bits 0090                                _PIE1bits 0091  
          __size_of_setGestureIntEnable 002B                     _gesture_near_count_ 0061  
                   ??_i2c1_driver_start 0020     __size_of_INTERRUPT_InterruptManager 0027  
                              _PIR0bits 0010                                _PIR1bits 0011  
                 __end_of_I2C_Read_Byte 0AB0               ??_setLightIntLowThreshold 002C  
                              _SSP1CON1 0215                                _SSP1CON2 0216  
                              _SSP2CON1 021D                          setLEDBoost@val 002C  
                              _SSP1STAT 0214                                _SSP2STAT 021C  
            __end_ofi1_i2c1_driver_stop 09E6                       ??_PIN_MANAGER_IOC 0076  
                 __end_of_I2C_Send_NACK 0A07                          setLEDDrive@val 002C  
      processGestureData@lr_ratio_first 0033                       ___wmul@multiplier 0020  
                     ?_do_I2C_SEND_STOP 0076               processGestureData@d_first 0046  
                         _handleGesture 07BC               __end_of_i2c1_driver_start 0A0A  
                         ??_returnReset 0077                      ??_do_I2C_SEND_STOP 0076  
           __size_of_i2c1_driver_TXData 0006             __end_of_setAmbientLightGain 0C00  
             processGestureData@l_first 0047       __end_of_do_I2C_SEND_RESTART_WRITE 0A23  
               __end_of_do_I2C_TX_EMPTY 0DEC            __end_of_setGestureExitThresh 0B26  
             processGestureData@r_first 0048               processGestureData@u_first 0045  
                 ??_setProxIntLowThresh 002A            __size_of_do_I2C_SEND_RESTART 0004  
           __size_of_i2c1_driver_isNACK 0008                       setGestureGain@val 002C  
                 __size_of_mssp1_setIRQ 0003                     _do_I2C_DO_NACK_STOP 0A2F  
                      __size_of_i2c_ISR 0026              ??_setLightIntHighThreshold 002C  
           __size_of_setGestureLEDDrive 0032                          setMode@reg_val 002E  
        setLightIntLowThreshold@val_low 002D                            ?_do_I2C_IDLE 0076  
                         _Display_Clear 0ADC                            ?_do_I2C_RCEN 0076  
                     setGestureMode@val 002C                        ?_SPI2_Initialize 0076  
               ?i1_i2c1_driver_sendNACK 0076                 ??_OSCILLATOR_Initialize 0020  
                   _i2c1_driver_sendACK 0A13                        __size_of___awdiv 0052  
         __size_of_setProxIntHighThresh 0013                             _readGesture 05C6  
       __size_of_do_I2C_DO_ADDRESS_NACK 002B                     i2c1_driver_TXData@d 0020  
                ??_i2c1_driver_sendNACK 0020                            ??_initialize 0030  
                          ?_I2C_ReStart 0076                     _i2c1_driver_restart 09F8  
      setLightIntLowThreshold@threshold 002A                    ?_do_I2C_DO_NACK_STOP 0076  
                   _i2c1_driver_startRX 0A01                          ?_handleGesture 0076  
          __end_of_do_I2C_SEND_ADR_READ 0A82                        __size_of_getMode 0009  
                ??_i2c1_driver_resetBus 0076                    readGesture@fifo_data 0120  
                           _setLEDBoost 0DEC                             _setLEDDrive 0CE6  
       __size_of_resetGestureParameters 0016                            _mssp1_setIRQ 09EC  
       __end_of_setLightIntLowThreshold 0CE6                             ??_do_I2C_RX 0076  
                           ??_do_I2C_TX 0076                   setGestureLEDDrive@val 002C  
                      __size_of_setMode 004F                                __ptext10 0E1E  
                              __ptext11 0B13                                __ptext20 071B  
                              __ptext12 0B00                                __ptext21 0AED  
                              __ptext13 0BE2                                __ptext30 0DEC  
                              __ptext22 0320                                __ptext14 0A9B  
                              __ptext31 0C4A                                __ptext23 0EB5  
                              __ptext15 07BC                                __ptext40 0A4A  
                              __ptext32 0D63                                __ptext24 0E82  
                              __ptext16 05C6                                __ptext41 0A10  
                              __ptext33 0B61                                __ptext25 0B77  
                              __ptext17 0F67                                __ptext50 09FE  
                              __ptext42 0A0D                                __ptext34 0AB0  
                              __ptext26 0ADC                                __ptext18 0055  
                              __ptext51 09FB                                __ptext43 0A0A  
                              __ptext35 076D                                __ptext27 0B4C  
                              __ptext19 0BC6                                __ptext60 09F5  
                              __ptext52 09F8                                __ptext44 0A07  
                              __ptext36 0B8F                                __ptext28 0ACD  
                              __ptext61 09F2                                __ptext53 0ABE  
                              __ptext45 0A04                                __ptext37 0A92  
                              __ptext29 06B7                                __ptext70 0A44  
                              __ptext62 0C24                                __ptext54 0A37  
                              __ptext46 0A3B                                __ptext38 0C00  
                              __ptext71 0A5D                                __ptext63 09EF  
                              __ptext55 0A64                                __ptext47 0AA5  
                              __ptext39 0BAA                                __ptext80 09EC  
                              __ptext72 0A7A                                __ptext64 0F21  
                              __ptext56 0A8A                                __ptext48 0A01  
                              __ptext81 0A72                                __ptext73 0A27  
                              __ptext65 0FB1                                __ptext57 0EEA  
                              __ptext49 0A6B                                __ptext90 09E0  
                              __ptext82 0A3F                                __ptext74 0A23  
                              __ptext66 0D38                                __ptext58 0A82  
                              __ptext91 0A13                                __ptext83 09E9  
                              __ptext75 0A1F                                __ptext67 0A33  
                              __ptext92 09DB                                __ptext84 0A17  
                              __ptext76 0A1B                                __ptext68 0A2F  
                              __ptext85 09DC                                __ptext77 07FB  
                              __ptext69 0A2B                                __ptext86 09E6  
                              __ptext78 0A56                                __ptext87 0002  
                              __ptext79 0DBB                                __ptext88 09DE  
                              __ptext89 09E3                   _setGestureEnterThresh 0B00  
                          _SSP1CON1bits 0215                            _SSP1CON2bits 0216  
        setGestureEnterThresh@threshold 002B                            _SSP2CON1bits 021D  
                  ?_i2c1_driver_sendACK 0076                    __end_of_do_I2C_RESET 0A5D  
                  ?_i2c1_driver_restart 0076                     __end_of_returnReset 0004  
                      _i2c1_driver_open 0A9B                        _i2c1_driver_stop 0A0D  
                         __size_of_main 002D                    ?_i2c1_driver_startRX 0076  
                     ?_setProximityGain 0076          __size_of_i2c1_driver_getRXData 0003  
         __end_of_i2c1_driver_getRXData 0A01                      __end_of_initialize 05C6  
                    ??_setProximityGain 002A        __size_ofi1_i2c1_driver_getRXData 0003  
                    _decodeGesture$1190 0028                      _decodeGesture$1191 002A  
                    _decodeGesture$1192 002C                      _decodeGesture$1193 002E  
                    _decodeGesture$1194 0030                      _decodeGesture$1187 0022  
                    _decodeGesture$1188 0024                      _decodeGesture$1189 0026  
                        ?_Display_Clear 0076          __end_ofi1_i2c1_driver_sendNACK 0A1B  
                              int$flags 007E      __end_of_INTERRUPT_InterruptManager 002B  
            _INTERRUPT_InterruptManager 0004                            _SSP1STATbits 0214  
           __size_of_isGestureAvailable 0013                           Display_Name@i 002A  
                   setProximityGain@val 002C        __end_of_do_I2C_SEND_RESTART_READ 0A1F  
           __size_of_setGestureWaitTime 0027              __end_of_processGestureData 0320  
                          ??_returnStop 0077                            _SSP2STATbits 021C  
                 ??_do_I2C_DO_NACK_STOP 0076                 __size_of_setGestureGain 0032  
                            _INTCONbits 000B                 __size_of_setGestureMode 0027  
            __size_of_i2c1_driver_start 0003                  setAmbientLightGain@val 002C  
                 ??_i2c1_driver_sendACK 0076                        ?_do_I2C_TX_EMPTY 0076  
               __size_of_WDT_Initialize 0004                  _do_I2C_DO_ADDRESS_NACK 0D38  
                              intlevel1 0000                   ??_i2c1_driver_restart 0020  
                 ??_i2c1_driver_startRX 0020                 ?_PIN_MANAGER_Initialize 0076  
                      ??_I2C_Write_Byte 0021                       __CFG_CLKOUTEN$OFF 0000  
                    __end_of_returnStop 09E0                  _resetGestureParameters 0B61  
            ??_i2c1_driver_isBufferFull 0020                           ?_Display_Name 0025  
        __size_ofi1_i2c1_driver_restart 0003           __end_ofi1_i2c1_driver_restart 09E3  
        __size_ofi1_i2c1_driver_startRX 0003            __end_ofi1_i2c1_driver_TXData 0A44  
         __end_ofi1_i2c1_driver_startRX 09E9                    _setGestureExitThresh 0B13  
                       ??_handleGesture 005B                           __pstringtext1 1000  
                         __pstringtext2 1030                           __pstringtext3 103D  
                         __pstringtext4 1049                           __pstringtext5 1054  
                         __pstringtext6 0000                              _SSP1DATPPS 0E21  
                          ?_enablePower 0076                              _SSP2DATPPS 0E1E  
                            _SSP1CLKPPS 0E20                     _setGestureIntEnable 0D63  
                            _SSP2CLKPPS 0E1D                        setLEDBoost@boost 002D  
                ?_setGestureEnterThresh 0076                             _returnReset 0002  
        __end_of_PIN_MANAGER_Initialize 0F21             __end_of_i2c_busCollisionISR 09F8  
             __size_of_wireReadDataByte 0024                        setLEDDrive@drive 002D  
                   processGestureData@i 004D                         _PIN_MANAGER_IOC 09DB  
           __end_of_enableGestureSensor 071B                   _do_I2C_SEND_ADR_WRITE 0A5D  
                  ?_setGestureIntEnable 0076                    _do_I2C_SEND_ADR_READ 0A7A  
                       ??_Display_Clear 0023        __end_of_setLightIntHighThreshold 0CBF  
                        ??_Display_Name 0027  
