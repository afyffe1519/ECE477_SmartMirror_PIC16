

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Mon Apr 15 15:14:02 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F18345
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	idataBANK2,global,class=CODE,delta=2
     7                           	psect	stringtext1,global,class=STRCODE,delta=2
     8                           	psect	stringtext2,global,class=STRCODE,delta=2
     9                           	psect	stringtext3,global,class=STRCODE,delta=2
    10                           	psect	stringtext4,global,class=STRCODE,delta=2
    11                           	psect	stringtext5,global,class=STRCODE,delta=2
    12                           	psect	stringtext6,global,class=STRCODE,delta=2
    13                           	psect	stringtext7,global,class=STRCODE,delta=2
    14                           	psect	stringtext8,global,class=STRCODE,delta=2
    15                           	psect	stringtext9,global,class=STRCODE,delta=2
    16                           	psect	cinit,global,class=CODE,merge=1,delta=2
    17                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    22                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    23                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    24                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    25                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    26                           	psect	inittext,global,class=CODE,delta=2
    27                           	psect	clrtext,global,class=CODE,delta=2
    28                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    29                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    30                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    31                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    32                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    33                           	psect	text1,local,class=CODE,merge=1,delta=2
    34                           	psect	text2,local,class=CODE,merge=1,delta=2
    35                           	psect	text3,local,class=CODE,merge=1,delta=2
    36                           	psect	text4,local,class=CODE,merge=1,delta=2
    37                           	psect	text5,local,class=CODE,merge=1,delta=2
    38                           	psect	text6,local,class=CODE,merge=1,delta=2
    39                           	psect	text7,local,class=CODE,merge=1,delta=2
    40                           	psect	text8,local,class=CODE,merge=1,delta=2
    41                           	psect	text9,local,class=CODE,merge=1,delta=2
    42                           	psect	text10,local,class=CODE,merge=1,delta=2
    43                           	psect	text11,local,class=CODE,merge=1,delta=2
    44                           	psect	text12,local,class=CODE,merge=1,delta=2
    45                           	psect	text13,local,class=CODE,merge=1,delta=2
    46                           	psect	text14,local,class=CODE,merge=1,delta=2
    47                           	psect	text15,local,class=CODE,merge=1,delta=2
    48                           	psect	text16,local,class=CODE,merge=1,delta=2
    49                           	psect	text17,local,class=CODE,merge=1,delta=2
    50                           	psect	text18,local,class=CODE,merge=1,delta=2
    51                           	psect	text19,local,class=CODE,merge=1,delta=2,group=1
    52                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    53                           	psect	text21,local,class=CODE,merge=1,delta=2
    54                           	psect	text22,local,class=CODE,merge=1,delta=2
    55                           	psect	text23,local,class=CODE,merge=1,delta=2
    56                           	psect	text24,local,class=CODE,merge=1,delta=2
    57                           	psect	text25,local,class=CODE,merge=1,delta=2
    58                           	psect	text26,local,class=CODE,merge=1,delta=2
    59                           	psect	text27,local,class=CODE,merge=1,delta=2
    60                           	psect	text28,local,class=CODE,merge=1,delta=2
    61                           	psect	text29,local,class=CODE,merge=1,delta=2
    62                           	psect	text30,local,class=CODE,merge=1,delta=2
    63                           	psect	text31,local,class=CODE,merge=1,delta=2
    64                           	psect	text32,local,class=CODE,merge=1,delta=2
    65                           	psect	text33,local,class=CODE,merge=1,delta=2
    66                           	psect	text34,local,class=CODE,merge=1,inline,delta=2
    67                           	psect	text35,local,class=CODE,merge=1,delta=2
    68                           	psect	text36,local,class=CODE,merge=1,inline,delta=2
    69                           	psect	text37,local,class=CODE,merge=1,delta=2
    70                           	psect	text38,local,class=CODE,merge=1,inline,delta=2
    71                           	psect	text39,local,class=CODE,merge=1,delta=2
    72                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    73                           	psect	text41,local,class=CODE,merge=1,delta=2
    74                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text43,local,class=CODE,merge=1,inline,delta=2
    76                           	psect	text44,local,class=CODE,merge=1,inline,delta=2
    77                           	psect	text45,local,class=CODE,merge=1,delta=2
    78                           	psect	text46,local,class=CODE,merge=1,inline,delta=2
    79                           	psect	text47,local,class=CODE,merge=1,delta=2
    80                           	psect	text48,local,class=CODE,merge=1,delta=2
    81                           	psect	text49,local,class=CODE,merge=1,delta=2
    82                           	psect	text50,local,class=CODE,merge=1,delta=2
    83                           	psect	text51,local,class=CODE,merge=1,delta=2
    84                           	psect	text52,local,class=CODE,merge=1,delta=2
    85                           	psect	text53,local,class=CODE,merge=1,delta=2
    86                           	psect	text54,local,class=CODE,merge=1,delta=2
    87                           	psect	text55,local,class=CODE,merge=1,delta=2
    88                           	psect	text56,local,class=CODE,merge=1,delta=2
    89                           	psect	text57,local,class=CODE,merge=1,delta=2
    90                           	psect	text58,local,class=CODE,merge=1,delta=2,group=2
    91                           	psect	text59,local,class=CODE,merge=1,delta=2
    92                           	psect	text60,local,class=CODE,merge=1,delta=2
    93                           	psect	text61,local,class=CODE,merge=1,delta=2
    94                           	psect	text62,local,class=CODE,merge=1,delta=2
    95                           	psect	intentry,global,class=CODE,delta=2
    96                           	psect	text64,local,class=CODE,merge=1,delta=2
    97                           	psect	text65,local,class=CODE,merge=1,inline,delta=2
    98                           	psect	text66,local,class=CODE,merge=1,delta=2
    99                           	psect	text67,local,class=CODE,merge=1,inline,delta=2
   100                           	psect	text68,local,class=CODE,merge=1,delta=2
   101                           	psect	text69,local,class=CODE,merge=1,delta=2
   102                           	psect	text70,local,class=CODE,merge=1,delta=2
   103                           	psect	text71,local,class=CODE,merge=1,delta=2
   104                           	psect	text72,local,class=CODE,merge=1,delta=2
   105                           	psect	text73,local,class=CODE,merge=1,delta=2
   106                           	psect	text74,local,class=CODE,merge=1,delta=2
   107                           	psect	text75,local,class=CODE,merge=1,delta=2
   108                           	psect	text76,local,class=CODE,merge=1,delta=2
   109                           	psect	text77,local,class=CODE,merge=1,delta=2
   110                           	psect	text78,local,class=CODE,merge=1,delta=2
   111                           	psect	text79,local,class=CODE,merge=1,delta=2
   112                           	psect	text80,local,class=CODE,merge=1,delta=2
   113                           	psect	text81,local,class=CODE,merge=1,delta=2
   114                           	psect	text82,local,class=CODE,merge=1,delta=2
   115                           	psect	text83,local,class=CODE,merge=1,delta=2
   116                           	psect	text84,local,class=CODE,merge=1,inline,delta=2
   117                           	psect	text85,local,class=CODE,merge=1,inline,delta=2
   118                           	psect	text86,local,class=CODE,merge=1,inline,delta=2
   119                           	psect	text87,local,class=CODE,merge=1,inline,delta=2
   120                           	psect	text88,local,class=CODE,merge=1,inline,delta=2
   121                           	psect	text89,local,class=CODE,merge=1,inline,delta=2
   122                           	psect	text90,local,class=CODE,merge=1,inline,delta=2
   123                           	psect	text91,local,class=CODE,merge=1,delta=2
   124                           	psect	text92,local,class=CODE,merge=1,delta=2
   125                           	psect	text93,local,class=CODE,merge=1,inline,delta=2
   126                           	psect	text94,local,class=CODE,merge=1,inline,delta=2
   127                           	psect	text95,local,class=CODE,merge=1,inline,delta=2
   128                           	psect	text96,local,class=CODE,merge=1,delta=2
   129                           	dabs	1,0x7E,2
   130  0000                     
   131                           ; Version 2.05
   132                           ; Generated 20/12/2018 GMT
   133                           ; 
   134                           ; Copyright © 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
   135                           ; All rights reserved.
   136                           ; 
   137                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   138                           ; 
   139                           ; Redistribution and use in source and binary forms, with or without modification, are
   140                           ; permitted provided that the following conditions are met:
   141                           ; 
   142                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   143                           ;        conditions and the following disclaimer.
   144                           ; 
   145                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   146                           ;        of conditions and the following disclaimer in the documentation and/or other
   147                           ;        materials provided with the distribution.
   148                           ; 
   149                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   150                           ;        software without specific prior written permission.
   151                           ; 
   152                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   153                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   154                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   155                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   156                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   157                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   158                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   159                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   160                           ; 
   161                           ; 
   162                           ; Code-generator required, PIC16F18345 Definitions
   163                           ; 
   164                           ; SFR Addresses
   165  0000                     	;# 
   166  0001                     	;# 
   167  0002                     	;# 
   168  0003                     	;# 
   169  0004                     	;# 
   170  0005                     	;# 
   171  0006                     	;# 
   172  0007                     	;# 
   173  0008                     	;# 
   174  0009                     	;# 
   175  000A                     	;# 
   176  000B                     	;# 
   177  000C                     	;# 
   178  000D                     	;# 
   179  000E                     	;# 
   180  0010                     	;# 
   181  0011                     	;# 
   182  0012                     	;# 
   183  0013                     	;# 
   184  0014                     	;# 
   185  0015                     	;# 
   186  0015                     	;# 
   187  0016                     	;# 
   188  0016                     	;# 
   189  0017                     	;# 
   190  0018                     	;# 
   191  0019                     	;# 
   192  0019                     	;# 
   193  001A                     	;# 
   194  001B                     	;# 
   195  001C                     	;# 
   196  001D                     	;# 
   197  001E                     	;# 
   198  001F                     	;# 
   199  008C                     	;# 
   200  008D                     	;# 
   201  008E                     	;# 
   202  0090                     	;# 
   203  0091                     	;# 
   204  0092                     	;# 
   205  0093                     	;# 
   206  0094                     	;# 
   207  0097                     	;# 
   208  009B                     	;# 
   209  009B                     	;# 
   210  009C                     	;# 
   211  009D                     	;# 
   212  009E                     	;# 
   213  009F                     	;# 
   214  010C                     	;# 
   215  010D                     	;# 
   216  010E                     	;# 
   217  0111                     	;# 
   218  0112                     	;# 
   219  0113                     	;# 
   220  0114                     	;# 
   221  0115                     	;# 
   222  0116                     	;# 
   223  0117                     	;# 
   224  0118                     	;# 
   225  0119                     	;# 
   226  018C                     	;# 
   227  018D                     	;# 
   228  018E                     	;# 
   229  0197                     	;# 
   230  0199                     	;# 
   231  0199                     	;# 
   232  0199                     	;# 
   233  019A                     	;# 
   234  019A                     	;# 
   235  019A                     	;# 
   236  019B                     	;# 
   237  019B                     	;# 
   238  019B                     	;# 
   239  019B                     	;# 
   240  019B                     	;# 
   241  019C                     	;# 
   242  019C                     	;# 
   243  019C                     	;# 
   244  019D                     	;# 
   245  019D                     	;# 
   246  019D                     	;# 
   247  019E                     	;# 
   248  019E                     	;# 
   249  019E                     	;# 
   250  019F                     	;# 
   251  019F                     	;# 
   252  019F                     	;# 
   253  019F                     	;# 
   254  019F                     	;# 
   255  020C                     	;# 
   256  020D                     	;# 
   257  020E                     	;# 
   258  0211                     	;# 
   259  0211                     	;# 
   260  0212                     	;# 
   261  0212                     	;# 
   262  0213                     	;# 
   263  0213                     	;# 
   264  0214                     	;# 
   265  0214                     	;# 
   266  0215                     	;# 
   267  0215                     	;# 
   268  0215                     	;# 
   269  0215                     	;# 
   270  0216                     	;# 
   271  0216                     	;# 
   272  0217                     	;# 
   273  0217                     	;# 
   274  0219                     	;# 
   275  021A                     	;# 
   276  021B                     	;# 
   277  021C                     	;# 
   278  021D                     	;# 
   279  021D                     	;# 
   280  021E                     	;# 
   281  021F                     	;# 
   282  028C                     	;# 
   283  028D                     	;# 
   284  028E                     	;# 
   285  0291                     	;# 
   286  0291                     	;# 
   287  0292                     	;# 
   288  0293                     	;# 
   289  0294                     	;# 
   290  0295                     	;# 
   291  0295                     	;# 
   292  0296                     	;# 
   293  0297                     	;# 
   294  0298                     	;# 
   295  029F                     	;# 
   296  030C                     	;# 
   297  030D                     	;# 
   298  030E                     	;# 
   299  0311                     	;# 
   300  0311                     	;# 
   301  0312                     	;# 
   302  0313                     	;# 
   303  0314                     	;# 
   304  0315                     	;# 
   305  0315                     	;# 
   306  0316                     	;# 
   307  0317                     	;# 
   308  0318                     	;# 
   309  038C                     	;# 
   310  038D                     	;# 
   311  038E                     	;# 
   312  0391                     	;# 
   313  0392                     	;# 
   314  0393                     	;# 
   315  0394                     	;# 
   316  0395                     	;# 
   317  0396                     	;# 
   318  0397                     	;# 
   319  0398                     	;# 
   320  0399                     	;# 
   321  039A                     	;# 
   322  039C                     	;# 
   323  039D                     	;# 
   324  039E                     	;# 
   325  039F                     	;# 
   326  0411                     	;# 
   327  0411                     	;# 
   328  0412                     	;# 
   329  0413                     	;# 
   330  0414                     	;# 
   331  0415                     	;# 
   332  0416                     	;# 
   333  0417                     	;# 
   334  0418                     	;# 
   335  0418                     	;# 
   336  0419                     	;# 
   337  041A                     	;# 
   338  041B                     	;# 
   339  041C                     	;# 
   340  041D                     	;# 
   341  041E                     	;# 
   342  041F                     	;# 
   343  0498                     	;# 
   344  0498                     	;# 
   345  0499                     	;# 
   346  049A                     	;# 
   347  049B                     	;# 
   348  049B                     	;# 
   349  049C                     	;# 
   350  049D                     	;# 
   351  049E                     	;# 
   352  049F                     	;# 
   353  0617                     	;# 
   354  0618                     	;# 
   355  0619                     	;# 
   356  0619                     	;# 
   357  061A                     	;# 
   358  061B                     	;# 
   359  061C                     	;# 
   360  061C                     	;# 
   361  061F                     	;# 
   362  0691                     	;# 
   363  0692                     	;# 
   364  0693                     	;# 
   365  0694                     	;# 
   366  0695                     	;# 
   367  0696                     	;# 
   368  0697                     	;# 
   369  0698                     	;# 
   370  0699                     	;# 
   371  0711                     	;# 
   372  0712                     	;# 
   373  0713                     	;# 
   374  0714                     	;# 
   375  0715                     	;# 
   376  0716                     	;# 
   377  0717                     	;# 
   378  0718                     	;# 
   379  0719                     	;# 
   380  0891                     	;# 
   381  0891                     	;# 
   382  0891                     	;# 
   383  0891                     	;# 
   384  0891                     	;# 
   385  0891                     	;# 
   386  0892                     	;# 
   387  0892                     	;# 
   388  0892                     	;# 
   389  0893                     	;# 
   390  0893                     	;# 
   391  0893                     	;# 
   392  0893                     	;# 
   393  0893                     	;# 
   394  0893                     	;# 
   395  0894                     	;# 
   396  0894                     	;# 
   397  0894                     	;# 
   398  0895                     	;# 
   399  0895                     	;# 
   400  0895                     	;# 
   401  0896                     	;# 
   402  0896                     	;# 
   403  0896                     	;# 
   404  089B                     	;# 
   405  0911                     	;# 
   406  0912                     	;# 
   407  0913                     	;# 
   408  0914                     	;# 
   409  0915                     	;# 
   410  0916                     	;# 
   411  0918                     	;# 
   412  0919                     	;# 
   413  091A                     	;# 
   414  091B                     	;# 
   415  091C                     	;# 
   416  091D                     	;# 
   417  091E                     	;# 
   418  091F                     	;# 
   419  0E0F                     	;# 
   420  0E10                     	;# 
   421  0E11                     	;# 
   422  0E12                     	;# 
   423  0E13                     	;# 
   424  0E14                     	;# 
   425  0E15                     	;# 
   426  0E16                     	;# 
   427  0E17                     	;# 
   428  0E18                     	;# 
   429  0E19                     	;# 
   430  0E1A                     	;# 
   431  0E1B                     	;# 
   432  0E1C                     	;# 
   433  0E1D                     	;# 
   434  0E1E                     	;# 
   435  0E1F                     	;# 
   436  0E20                     	;# 
   437  0E21                     	;# 
   438  0E22                     	;# 
   439  0E24                     	;# 
   440  0E25                     	;# 
   441  0E28                     	;# 
   442  0E29                     	;# 
   443  0E2A                     	;# 
   444  0E2B                     	;# 
   445  0E2C                     	;# 
   446  0E2D                     	;# 
   447  0E2E                     	;# 
   448  0E2F                     	;# 
   449  0E90                     	;# 
   450  0E91                     	;# 
   451  0E92                     	;# 
   452  0E94                     	;# 
   453  0E95                     	;# 
   454  0E9C                     	;# 
   455  0E9D                     	;# 
   456  0E9E                     	;# 
   457  0E9F                     	;# 
   458  0EA0                     	;# 
   459  0EA1                     	;# 
   460  0EA2                     	;# 
   461  0EA3                     	;# 
   462  0EA4                     	;# 
   463  0EA5                     	;# 
   464  0EA6                     	;# 
   465  0EA7                     	;# 
   466  0F0F                     	;# 
   467  0F10                     	;# 
   468  0F11                     	;# 
   469  0F12                     	;# 
   470  0F13                     	;# 
   471  0F14                     	;# 
   472  0F15                     	;# 
   473  0F16                     	;# 
   474  0F17                     	;# 
   475  0F18                     	;# 
   476  0F19                     	;# 
   477  0F1A                     	;# 
   478  0F1B                     	;# 
   479  0F1C                     	;# 
   480  0F1D                     	;# 
   481  0F1E                     	;# 
   482  0F1F                     	;# 
   483  0F20                     	;# 
   484  0F21                     	;# 
   485  0F22                     	;# 
   486  0F23                     	;# 
   487  0F24                     	;# 
   488  0F25                     	;# 
   489  0F26                     	;# 
   490  0F27                     	;# 
   491  0F28                     	;# 
   492  0F29                     	;# 
   493  0F2A                     	;# 
   494  0F2B                     	;# 
   495  0F2C                     	;# 
   496  0F2D                     	;# 
   497  0F2E                     	;# 
   498  0F2F                     	;# 
   499  0F30                     	;# 
   500  0F31                     	;# 
   501  0F32                     	;# 
   502  0F33                     	;# 
   503  0F34                     	;# 
   504  0F35                     	;# 
   505  0F36                     	;# 
   506  0F37                     	;# 
   507  0FE4                     	;# 
   508  0FE5                     	;# 
   509  0FE6                     	;# 
   510  0FE7                     	;# 
   511  0FE8                     	;# 
   512  0FE9                     	;# 
   513  0FEA                     	;# 
   514  0FEB                     	;# 
   515  0FED                     	;# 
   516  0FEE                     	;# 
   517  0FEF                     	;# 
   518  0000                     	;# 
   519  0001                     	;# 
   520  0002                     	;# 
   521  0003                     	;# 
   522  0004                     	;# 
   523  0005                     	;# 
   524  0006                     	;# 
   525  0007                     	;# 
   526  0008                     	;# 
   527  0009                     	;# 
   528  000A                     	;# 
   529  000B                     	;# 
   530  000C                     	;# 
   531  000D                     	;# 
   532  000E                     	;# 
   533  0010                     	;# 
   534  0011                     	;# 
   535  0012                     	;# 
   536  0013                     	;# 
   537  0014                     	;# 
   538  0015                     	;# 
   539  0015                     	;# 
   540  0016                     	;# 
   541  0016                     	;# 
   542  0017                     	;# 
   543  0018                     	;# 
   544  0019                     	;# 
   545  0019                     	;# 
   546  001A                     	;# 
   547  001B                     	;# 
   548  001C                     	;# 
   549  001D                     	;# 
   550  001E                     	;# 
   551  001F                     	;# 
   552  008C                     	;# 
   553  008D                     	;# 
   554  008E                     	;# 
   555  0090                     	;# 
   556  0091                     	;# 
   557  0092                     	;# 
   558  0093                     	;# 
   559  0094                     	;# 
   560  0097                     	;# 
   561  009B                     	;# 
   562  009B                     	;# 
   563  009C                     	;# 
   564  009D                     	;# 
   565  009E                     	;# 
   566  009F                     	;# 
   567  010C                     	;# 
   568  010D                     	;# 
   569  010E                     	;# 
   570  0111                     	;# 
   571  0112                     	;# 
   572  0113                     	;# 
   573  0114                     	;# 
   574  0115                     	;# 
   575  0116                     	;# 
   576  0117                     	;# 
   577  0118                     	;# 
   578  0119                     	;# 
   579  018C                     	;# 
   580  018D                     	;# 
   581  018E                     	;# 
   582  0197                     	;# 
   583  0199                     	;# 
   584  0199                     	;# 
   585  0199                     	;# 
   586  019A                     	;# 
   587  019A                     	;# 
   588  019A                     	;# 
   589  019B                     	;# 
   590  019B                     	;# 
   591  019B                     	;# 
   592  019B                     	;# 
   593  019B                     	;# 
   594  019C                     	;# 
   595  019C                     	;# 
   596  019C                     	;# 
   597  019D                     	;# 
   598  019D                     	;# 
   599  019D                     	;# 
   600  019E                     	;# 
   601  019E                     	;# 
   602  019E                     	;# 
   603  019F                     	;# 
   604  019F                     	;# 
   605  019F                     	;# 
   606  019F                     	;# 
   607  019F                     	;# 
   608  020C                     	;# 
   609  020D                     	;# 
   610  020E                     	;# 
   611  0211                     	;# 
   612  0211                     	;# 
   613  0212                     	;# 
   614  0212                     	;# 
   615  0213                     	;# 
   616  0213                     	;# 
   617  0214                     	;# 
   618  0214                     	;# 
   619  0215                     	;# 
   620  0215                     	;# 
   621  0215                     	;# 
   622  0215                     	;# 
   623  0216                     	;# 
   624  0216                     	;# 
   625  0217                     	;# 
   626  0217                     	;# 
   627  0219                     	;# 
   628  021A                     	;# 
   629  021B                     	;# 
   630  021C                     	;# 
   631  021D                     	;# 
   632  021D                     	;# 
   633  021E                     	;# 
   634  021F                     	;# 
   635  028C                     	;# 
   636  028D                     	;# 
   637  028E                     	;# 
   638  0291                     	;# 
   639  0291                     	;# 
   640  0292                     	;# 
   641  0293                     	;# 
   642  0294                     	;# 
   643  0295                     	;# 
   644  0295                     	;# 
   645  0296                     	;# 
   646  0297                     	;# 
   647  0298                     	;# 
   648  029F                     	;# 
   649  030C                     	;# 
   650  030D                     	;# 
   651  030E                     	;# 
   652  0311                     	;# 
   653  0311                     	;# 
   654  0312                     	;# 
   655  0313                     	;# 
   656  0314                     	;# 
   657  0315                     	;# 
   658  0315                     	;# 
   659  0316                     	;# 
   660  0317                     	;# 
   661  0318                     	;# 
   662  038C                     	;# 
   663  038D                     	;# 
   664  038E                     	;# 
   665  0391                     	;# 
   666  0392                     	;# 
   667  0393                     	;# 
   668  0394                     	;# 
   669  0395                     	;# 
   670  0396                     	;# 
   671  0397                     	;# 
   672  0398                     	;# 
   673  0399                     	;# 
   674  039A                     	;# 
   675  039C                     	;# 
   676  039D                     	;# 
   677  039E                     	;# 
   678  039F                     	;# 
   679  0411                     	;# 
   680  0411                     	;# 
   681  0412                     	;# 
   682  0413                     	;# 
   683  0414                     	;# 
   684  0415                     	;# 
   685  0416                     	;# 
   686  0417                     	;# 
   687  0418                     	;# 
   688  0418                     	;# 
   689  0419                     	;# 
   690  041A                     	;# 
   691  041B                     	;# 
   692  041C                     	;# 
   693  041D                     	;# 
   694  041E                     	;# 
   695  041F                     	;# 
   696  0498                     	;# 
   697  0498                     	;# 
   698  0499                     	;# 
   699  049A                     	;# 
   700  049B                     	;# 
   701  049B                     	;# 
   702  049C                     	;# 
   703  049D                     	;# 
   704  049E                     	;# 
   705  049F                     	;# 
   706  0617                     	;# 
   707  0618                     	;# 
   708  0619                     	;# 
   709  0619                     	;# 
   710  061A                     	;# 
   711  061B                     	;# 
   712  061C                     	;# 
   713  061C                     	;# 
   714  061F                     	;# 
   715  0691                     	;# 
   716  0692                     	;# 
   717  0693                     	;# 
   718  0694                     	;# 
   719  0695                     	;# 
   720  0696                     	;# 
   721  0697                     	;# 
   722  0698                     	;# 
   723  0699                     	;# 
   724  0711                     	;# 
   725  0712                     	;# 
   726  0713                     	;# 
   727  0714                     	;# 
   728  0715                     	;# 
   729  0716                     	;# 
   730  0717                     	;# 
   731  0718                     	;# 
   732  0719                     	;# 
   733  0891                     	;# 
   734  0891                     	;# 
   735  0891                     	;# 
   736  0891                     	;# 
   737  0891                     	;# 
   738  0891                     	;# 
   739  0892                     	;# 
   740  0892                     	;# 
   741  0892                     	;# 
   742  0893                     	;# 
   743  0893                     	;# 
   744  0893                     	;# 
   745  0893                     	;# 
   746  0893                     	;# 
   747  0893                     	;# 
   748  0894                     	;# 
   749  0894                     	;# 
   750  0894                     	;# 
   751  0895                     	;# 
   752  0895                     	;# 
   753  0895                     	;# 
   754  0896                     	;# 
   755  0896                     	;# 
   756  0896                     	;# 
   757  089B                     	;# 
   758  0911                     	;# 
   759  0912                     	;# 
   760  0913                     	;# 
   761  0914                     	;# 
   762  0915                     	;# 
   763  0916                     	;# 
   764  0918                     	;# 
   765  0919                     	;# 
   766  091A                     	;# 
   767  091B                     	;# 
   768  091C                     	;# 
   769  091D                     	;# 
   770  091E                     	;# 
   771  091F                     	;# 
   772  0E0F                     	;# 
   773  0E10                     	;# 
   774  0E11                     	;# 
   775  0E12                     	;# 
   776  0E13                     	;# 
   777  0E14                     	;# 
   778  0E15                     	;# 
   779  0E16                     	;# 
   780  0E17                     	;# 
   781  0E18                     	;# 
   782  0E19                     	;# 
   783  0E1A                     	;# 
   784  0E1B                     	;# 
   785  0E1C                     	;# 
   786  0E1D                     	;# 
   787  0E1E                     	;# 
   788  0E1F                     	;# 
   789  0E20                     	;# 
   790  0E21                     	;# 
   791  0E22                     	;# 
   792  0E24                     	;# 
   793  0E25                     	;# 
   794  0E28                     	;# 
   795  0E29                     	;# 
   796  0E2A                     	;# 
   797  0E2B                     	;# 
   798  0E2C                     	;# 
   799  0E2D                     	;# 
   800  0E2E                     	;# 
   801  0E2F                     	;# 
   802  0E90                     	;# 
   803  0E91                     	;# 
   804  0E92                     	;# 
   805  0E94                     	;# 
   806  0E95                     	;# 
   807  0E9C                     	;# 
   808  0E9D                     	;# 
   809  0E9E                     	;# 
   810  0E9F                     	;# 
   811  0EA0                     	;# 
   812  0EA1                     	;# 
   813  0EA2                     	;# 
   814  0EA3                     	;# 
   815  0EA4                     	;# 
   816  0EA5                     	;# 
   817  0EA6                     	;# 
   818  0EA7                     	;# 
   819  0F0F                     	;# 
   820  0F10                     	;# 
   821  0F11                     	;# 
   822  0F12                     	;# 
   823  0F13                     	;# 
   824  0F14                     	;# 
   825  0F15                     	;# 
   826  0F16                     	;# 
   827  0F17                     	;# 
   828  0F18                     	;# 
   829  0F19                     	;# 
   830  0F1A                     	;# 
   831  0F1B                     	;# 
   832  0F1C                     	;# 
   833  0F1D                     	;# 
   834  0F1E                     	;# 
   835  0F1F                     	;# 
   836  0F20                     	;# 
   837  0F21                     	;# 
   838  0F22                     	;# 
   839  0F23                     	;# 
   840  0F24                     	;# 
   841  0F25                     	;# 
   842  0F26                     	;# 
   843  0F27                     	;# 
   844  0F28                     	;# 
   845  0F29                     	;# 
   846  0F2A                     	;# 
   847  0F2B                     	;# 
   848  0F2C                     	;# 
   849  0F2D                     	;# 
   850  0F2E                     	;# 
   851  0F2F                     	;# 
   852  0F30                     	;# 
   853  0F31                     	;# 
   854  0F32                     	;# 
   855  0F33                     	;# 
   856  0F34                     	;# 
   857  0F35                     	;# 
   858  0F36                     	;# 
   859  0F37                     	;# 
   860  0FE4                     	;# 
   861  0FE5                     	;# 
   862  0FE6                     	;# 
   863  0FE7                     	;# 
   864  0FE8                     	;# 
   865  0FE9                     	;# 
   866  0FEA                     	;# 
   867  0FEB                     	;# 
   868  0FED                     	;# 
   869  0FEE                     	;# 
   870  0FEF                     	;# 
   871  0000                     	;# 
   872  0001                     	;# 
   873  0002                     	;# 
   874  0003                     	;# 
   875  0004                     	;# 
   876  0005                     	;# 
   877  0006                     	;# 
   878  0007                     	;# 
   879  0008                     	;# 
   880  0009                     	;# 
   881  000A                     	;# 
   882  000B                     	;# 
   883  000C                     	;# 
   884  000D                     	;# 
   885  000E                     	;# 
   886  0010                     	;# 
   887  0011                     	;# 
   888  0012                     	;# 
   889  0013                     	;# 
   890  0014                     	;# 
   891  0015                     	;# 
   892  0015                     	;# 
   893  0016                     	;# 
   894  0016                     	;# 
   895  0017                     	;# 
   896  0018                     	;# 
   897  0019                     	;# 
   898  0019                     	;# 
   899  001A                     	;# 
   900  001B                     	;# 
   901  001C                     	;# 
   902  001D                     	;# 
   903  001E                     	;# 
   904  001F                     	;# 
   905  008C                     	;# 
   906  008D                     	;# 
   907  008E                     	;# 
   908  0090                     	;# 
   909  0091                     	;# 
   910  0092                     	;# 
   911  0093                     	;# 
   912  0094                     	;# 
   913  0097                     	;# 
   914  009B                     	;# 
   915  009B                     	;# 
   916  009C                     	;# 
   917  009D                     	;# 
   918  009E                     	;# 
   919  009F                     	;# 
   920  010C                     	;# 
   921  010D                     	;# 
   922  010E                     	;# 
   923  0111                     	;# 
   924  0112                     	;# 
   925  0113                     	;# 
   926  0114                     	;# 
   927  0115                     	;# 
   928  0116                     	;# 
   929  0117                     	;# 
   930  0118                     	;# 
   931  0119                     	;# 
   932  018C                     	;# 
   933  018D                     	;# 
   934  018E                     	;# 
   935  0197                     	;# 
   936  0199                     	;# 
   937  0199                     	;# 
   938  0199                     	;# 
   939  019A                     	;# 
   940  019A                     	;# 
   941  019A                     	;# 
   942  019B                     	;# 
   943  019B                     	;# 
   944  019B                     	;# 
   945  019B                     	;# 
   946  019B                     	;# 
   947  019C                     	;# 
   948  019C                     	;# 
   949  019C                     	;# 
   950  019D                     	;# 
   951  019D                     	;# 
   952  019D                     	;# 
   953  019E                     	;# 
   954  019E                     	;# 
   955  019E                     	;# 
   956  019F                     	;# 
   957  019F                     	;# 
   958  019F                     	;# 
   959  019F                     	;# 
   960  019F                     	;# 
   961  020C                     	;# 
   962  020D                     	;# 
   963  020E                     	;# 
   964  0211                     	;# 
   965  0211                     	;# 
   966  0212                     	;# 
   967  0212                     	;# 
   968  0213                     	;# 
   969  0213                     	;# 
   970  0214                     	;# 
   971  0214                     	;# 
   972  0215                     	;# 
   973  0215                     	;# 
   974  0215                     	;# 
   975  0215                     	;# 
   976  0216                     	;# 
   977  0216                     	;# 
   978  0217                     	;# 
   979  0217                     	;# 
   980  0219                     	;# 
   981  021A                     	;# 
   982  021B                     	;# 
   983  021C                     	;# 
   984  021D                     	;# 
   985  021D                     	;# 
   986  021E                     	;# 
   987  021F                     	;# 
   988  028C                     	;# 
   989  028D                     	;# 
   990  028E                     	;# 
   991  0291                     	;# 
   992  0291                     	;# 
   993  0292                     	;# 
   994  0293                     	;# 
   995  0294                     	;# 
   996  0295                     	;# 
   997  0295                     	;# 
   998  0296                     	;# 
   999  0297                     	;# 
  1000  0298                     	;# 
  1001  029F                     	;# 
  1002  030C                     	;# 
  1003  030D                     	;# 
  1004  030E                     	;# 
  1005  0311                     	;# 
  1006  0311                     	;# 
  1007  0312                     	;# 
  1008  0313                     	;# 
  1009  0314                     	;# 
  1010  0315                     	;# 
  1011  0315                     	;# 
  1012  0316                     	;# 
  1013  0317                     	;# 
  1014  0318                     	;# 
  1015  038C                     	;# 
  1016  038D                     	;# 
  1017  038E                     	;# 
  1018  0391                     	;# 
  1019  0392                     	;# 
  1020  0393                     	;# 
  1021  0394                     	;# 
  1022  0395                     	;# 
  1023  0396                     	;# 
  1024  0397                     	;# 
  1025  0398                     	;# 
  1026  0399                     	;# 
  1027  039A                     	;# 
  1028  039C                     	;# 
  1029  039D                     	;# 
  1030  039E                     	;# 
  1031  039F                     	;# 
  1032  0411                     	;# 
  1033  0411                     	;# 
  1034  0412                     	;# 
  1035  0413                     	;# 
  1036  0414                     	;# 
  1037  0415                     	;# 
  1038  0416                     	;# 
  1039  0417                     	;# 
  1040  0418                     	;# 
  1041  0418                     	;# 
  1042  0419                     	;# 
  1043  041A                     	;# 
  1044  041B                     	;# 
  1045  041C                     	;# 
  1046  041D                     	;# 
  1047  041E                     	;# 
  1048  041F                     	;# 
  1049  0498                     	;# 
  1050  0498                     	;# 
  1051  0499                     	;# 
  1052  049A                     	;# 
  1053  049B                     	;# 
  1054  049B                     	;# 
  1055  049C                     	;# 
  1056  049D                     	;# 
  1057  049E                     	;# 
  1058  049F                     	;# 
  1059  0617                     	;# 
  1060  0618                     	;# 
  1061  0619                     	;# 
  1062  0619                     	;# 
  1063  061A                     	;# 
  1064  061B                     	;# 
  1065  061C                     	;# 
  1066  061C                     	;# 
  1067  061F                     	;# 
  1068  0691                     	;# 
  1069  0692                     	;# 
  1070  0693                     	;# 
  1071  0694                     	;# 
  1072  0695                     	;# 
  1073  0696                     	;# 
  1074  0697                     	;# 
  1075  0698                     	;# 
  1076  0699                     	;# 
  1077  0711                     	;# 
  1078  0712                     	;# 
  1079  0713                     	;# 
  1080  0714                     	;# 
  1081  0715                     	;# 
  1082  0716                     	;# 
  1083  0717                     	;# 
  1084  0718                     	;# 
  1085  0719                     	;# 
  1086  0891                     	;# 
  1087  0891                     	;# 
  1088  0891                     	;# 
  1089  0891                     	;# 
  1090  0891                     	;# 
  1091  0891                     	;# 
  1092  0892                     	;# 
  1093  0892                     	;# 
  1094  0892                     	;# 
  1095  0893                     	;# 
  1096  0893                     	;# 
  1097  0893                     	;# 
  1098  0893                     	;# 
  1099  0893                     	;# 
  1100  0893                     	;# 
  1101  0894                     	;# 
  1102  0894                     	;# 
  1103  0894                     	;# 
  1104  0895                     	;# 
  1105  0895                     	;# 
  1106  0895                     	;# 
  1107  0896                     	;# 
  1108  0896                     	;# 
  1109  0896                     	;# 
  1110  089B                     	;# 
  1111  0911                     	;# 
  1112  0912                     	;# 
  1113  0913                     	;# 
  1114  0914                     	;# 
  1115  0915                     	;# 
  1116  0916                     	;# 
  1117  0918                     	;# 
  1118  0919                     	;# 
  1119  091A                     	;# 
  1120  091B                     	;# 
  1121  091C                     	;# 
  1122  091D                     	;# 
  1123  091E                     	;# 
  1124  091F                     	;# 
  1125  0E0F                     	;# 
  1126  0E10                     	;# 
  1127  0E11                     	;# 
  1128  0E12                     	;# 
  1129  0E13                     	;# 
  1130  0E14                     	;# 
  1131  0E15                     	;# 
  1132  0E16                     	;# 
  1133  0E17                     	;# 
  1134  0E18                     	;# 
  1135  0E19                     	;# 
  1136  0E1A                     	;# 
  1137  0E1B                     	;# 
  1138  0E1C                     	;# 
  1139  0E1D                     	;# 
  1140  0E1E                     	;# 
  1141  0E1F                     	;# 
  1142  0E20                     	;# 
  1143  0E21                     	;# 
  1144  0E22                     	;# 
  1145  0E24                     	;# 
  1146  0E25                     	;# 
  1147  0E28                     	;# 
  1148  0E29                     	;# 
  1149  0E2A                     	;# 
  1150  0E2B                     	;# 
  1151  0E2C                     	;# 
  1152  0E2D                     	;# 
  1153  0E2E                     	;# 
  1154  0E2F                     	;# 
  1155  0E90                     	;# 
  1156  0E91                     	;# 
  1157  0E92                     	;# 
  1158  0E94                     	;# 
  1159  0E95                     	;# 
  1160  0E9C                     	;# 
  1161  0E9D                     	;# 
  1162  0E9E                     	;# 
  1163  0E9F                     	;# 
  1164  0EA0                     	;# 
  1165  0EA1                     	;# 
  1166  0EA2                     	;# 
  1167  0EA3                     	;# 
  1168  0EA4                     	;# 
  1169  0EA5                     	;# 
  1170  0EA6                     	;# 
  1171  0EA7                     	;# 
  1172  0F0F                     	;# 
  1173  0F10                     	;# 
  1174  0F11                     	;# 
  1175  0F12                     	;# 
  1176  0F13                     	;# 
  1177  0F14                     	;# 
  1178  0F15                     	;# 
  1179  0F16                     	;# 
  1180  0F17                     	;# 
  1181  0F18                     	;# 
  1182  0F19                     	;# 
  1183  0F1A                     	;# 
  1184  0F1B                     	;# 
  1185  0F1C                     	;# 
  1186  0F1D                     	;# 
  1187  0F1E                     	;# 
  1188  0F1F                     	;# 
  1189  0F20                     	;# 
  1190  0F21                     	;# 
  1191  0F22                     	;# 
  1192  0F23                     	;# 
  1193  0F24                     	;# 
  1194  0F25                     	;# 
  1195  0F26                     	;# 
  1196  0F27                     	;# 
  1197  0F28                     	;# 
  1198  0F29                     	;# 
  1199  0F2A                     	;# 
  1200  0F2B                     	;# 
  1201  0F2C                     	;# 
  1202  0F2D                     	;# 
  1203  0F2E                     	;# 
  1204  0F2F                     	;# 
  1205  0F30                     	;# 
  1206  0F31                     	;# 
  1207  0F32                     	;# 
  1208  0F33                     	;# 
  1209  0F34                     	;# 
  1210  0F35                     	;# 
  1211  0F36                     	;# 
  1212  0F37                     	;# 
  1213  0FE4                     	;# 
  1214  0FE5                     	;# 
  1215  0FE6                     	;# 
  1216  0FE7                     	;# 
  1217  0FE8                     	;# 
  1218  0FE9                     	;# 
  1219  0FEA                     	;# 
  1220  0FEB                     	;# 
  1221  0FED                     	;# 
  1222  0FEE                     	;# 
  1223  0FEF                     	;# 
  1224  0000                     	;# 
  1225  0001                     	;# 
  1226  0002                     	;# 
  1227  0003                     	;# 
  1228  0004                     	;# 
  1229  0005                     	;# 
  1230  0006                     	;# 
  1231  0007                     	;# 
  1232  0008                     	;# 
  1233  0009                     	;# 
  1234  000A                     	;# 
  1235  000B                     	;# 
  1236  000C                     	;# 
  1237  000D                     	;# 
  1238  000E                     	;# 
  1239  0010                     	;# 
  1240  0011                     	;# 
  1241  0012                     	;# 
  1242  0013                     	;# 
  1243  0014                     	;# 
  1244  0015                     	;# 
  1245  0015                     	;# 
  1246  0016                     	;# 
  1247  0016                     	;# 
  1248  0017                     	;# 
  1249  0018                     	;# 
  1250  0019                     	;# 
  1251  0019                     	;# 
  1252  001A                     	;# 
  1253  001B                     	;# 
  1254  001C                     	;# 
  1255  001D                     	;# 
  1256  001E                     	;# 
  1257  001F                     	;# 
  1258  008C                     	;# 
  1259  008D                     	;# 
  1260  008E                     	;# 
  1261  0090                     	;# 
  1262  0091                     	;# 
  1263  0092                     	;# 
  1264  0093                     	;# 
  1265  0094                     	;# 
  1266  0097                     	;# 
  1267  009B                     	;# 
  1268  009B                     	;# 
  1269  009C                     	;# 
  1270  009D                     	;# 
  1271  009E                     	;# 
  1272  009F                     	;# 
  1273  010C                     	;# 
  1274  010D                     	;# 
  1275  010E                     	;# 
  1276  0111                     	;# 
  1277  0112                     	;# 
  1278  0113                     	;# 
  1279  0114                     	;# 
  1280  0115                     	;# 
  1281  0116                     	;# 
  1282  0117                     	;# 
  1283  0118                     	;# 
  1284  0119                     	;# 
  1285  018C                     	;# 
  1286  018D                     	;# 
  1287  018E                     	;# 
  1288  0197                     	;# 
  1289  0199                     	;# 
  1290  0199                     	;# 
  1291  0199                     	;# 
  1292  019A                     	;# 
  1293  019A                     	;# 
  1294  019A                     	;# 
  1295  019B                     	;# 
  1296  019B                     	;# 
  1297  019B                     	;# 
  1298  019B                     	;# 
  1299  019B                     	;# 
  1300  019C                     	;# 
  1301  019C                     	;# 
  1302  019C                     	;# 
  1303  019D                     	;# 
  1304  019D                     	;# 
  1305  019D                     	;# 
  1306  019E                     	;# 
  1307  019E                     	;# 
  1308  019E                     	;# 
  1309  019F                     	;# 
  1310  019F                     	;# 
  1311  019F                     	;# 
  1312  019F                     	;# 
  1313  019F                     	;# 
  1314  020C                     	;# 
  1315  020D                     	;# 
  1316  020E                     	;# 
  1317  0211                     	;# 
  1318  0211                     	;# 
  1319  0212                     	;# 
  1320  0212                     	;# 
  1321  0213                     	;# 
  1322  0213                     	;# 
  1323  0214                     	;# 
  1324  0214                     	;# 
  1325  0215                     	;# 
  1326  0215                     	;# 
  1327  0215                     	;# 
  1328  0215                     	;# 
  1329  0216                     	;# 
  1330  0216                     	;# 
  1331  0217                     	;# 
  1332  0217                     	;# 
  1333  0219                     	;# 
  1334  021A                     	;# 
  1335  021B                     	;# 
  1336  021C                     	;# 
  1337  021D                     	;# 
  1338  021D                     	;# 
  1339  021E                     	;# 
  1340  021F                     	;# 
  1341  028C                     	;# 
  1342  028D                     	;# 
  1343  028E                     	;# 
  1344  0291                     	;# 
  1345  0291                     	;# 
  1346  0292                     	;# 
  1347  0293                     	;# 
  1348  0294                     	;# 
  1349  0295                     	;# 
  1350  0295                     	;# 
  1351  0296                     	;# 
  1352  0297                     	;# 
  1353  0298                     	;# 
  1354  029F                     	;# 
  1355  030C                     	;# 
  1356  030D                     	;# 
  1357  030E                     	;# 
  1358  0311                     	;# 
  1359  0311                     	;# 
  1360  0312                     	;# 
  1361  0313                     	;# 
  1362  0314                     	;# 
  1363  0315                     	;# 
  1364  0315                     	;# 
  1365  0316                     	;# 
  1366  0317                     	;# 
  1367  0318                     	;# 
  1368  038C                     	;# 
  1369  038D                     	;# 
  1370  038E                     	;# 
  1371  0391                     	;# 
  1372  0392                     	;# 
  1373  0393                     	;# 
  1374  0394                     	;# 
  1375  0395                     	;# 
  1376  0396                     	;# 
  1377  0397                     	;# 
  1378  0398                     	;# 
  1379  0399                     	;# 
  1380  039A                     	;# 
  1381  039C                     	;# 
  1382  039D                     	;# 
  1383  039E                     	;# 
  1384  039F                     	;# 
  1385  0411                     	;# 
  1386  0411                     	;# 
  1387  0412                     	;# 
  1388  0413                     	;# 
  1389  0414                     	;# 
  1390  0415                     	;# 
  1391  0416                     	;# 
  1392  0417                     	;# 
  1393  0418                     	;# 
  1394  0418                     	;# 
  1395  0419                     	;# 
  1396  041A                     	;# 
  1397  041B                     	;# 
  1398  041C                     	;# 
  1399  041D                     	;# 
  1400  041E                     	;# 
  1401  041F                     	;# 
  1402  0498                     	;# 
  1403  0498                     	;# 
  1404  0499                     	;# 
  1405  049A                     	;# 
  1406  049B                     	;# 
  1407  049B                     	;# 
  1408  049C                     	;# 
  1409  049D                     	;# 
  1410  049E                     	;# 
  1411  049F                     	;# 
  1412  0617                     	;# 
  1413  0618                     	;# 
  1414  0619                     	;# 
  1415  0619                     	;# 
  1416  061A                     	;# 
  1417  061B                     	;# 
  1418  061C                     	;# 
  1419  061C                     	;# 
  1420  061F                     	;# 
  1421  0691                     	;# 
  1422  0692                     	;# 
  1423  0693                     	;# 
  1424  0694                     	;# 
  1425  0695                     	;# 
  1426  0696                     	;# 
  1427  0697                     	;# 
  1428  0698                     	;# 
  1429  0699                     	;# 
  1430  0711                     	;# 
  1431  0712                     	;# 
  1432  0713                     	;# 
  1433  0714                     	;# 
  1434  0715                     	;# 
  1435  0716                     	;# 
  1436  0717                     	;# 
  1437  0718                     	;# 
  1438  0719                     	;# 
  1439  0891                     	;# 
  1440  0891                     	;# 
  1441  0891                     	;# 
  1442  0891                     	;# 
  1443  0891                     	;# 
  1444  0891                     	;# 
  1445  0892                     	;# 
  1446  0892                     	;# 
  1447  0892                     	;# 
  1448  0893                     	;# 
  1449  0893                     	;# 
  1450  0893                     	;# 
  1451  0893                     	;# 
  1452  0893                     	;# 
  1453  0893                     	;# 
  1454  0894                     	;# 
  1455  0894                     	;# 
  1456  0894                     	;# 
  1457  0895                     	;# 
  1458  0895                     	;# 
  1459  0895                     	;# 
  1460  0896                     	;# 
  1461  0896                     	;# 
  1462  0896                     	;# 
  1463  089B                     	;# 
  1464  0911                     	;# 
  1465  0912                     	;# 
  1466  0913                     	;# 
  1467  0914                     	;# 
  1468  0915                     	;# 
  1469  0916                     	;# 
  1470  0918                     	;# 
  1471  0919                     	;# 
  1472  091A                     	;# 
  1473  091B                     	;# 
  1474  091C                     	;# 
  1475  091D                     	;# 
  1476  091E                     	;# 
  1477  091F                     	;# 
  1478  0E0F                     	;# 
  1479  0E10                     	;# 
  1480  0E11                     	;# 
  1481  0E12                     	;# 
  1482  0E13                     	;# 
  1483  0E14                     	;# 
  1484  0E15                     	;# 
  1485  0E16                     	;# 
  1486  0E17                     	;# 
  1487  0E18                     	;# 
  1488  0E19                     	;# 
  1489  0E1A                     	;# 
  1490  0E1B                     	;# 
  1491  0E1C                     	;# 
  1492  0E1D                     	;# 
  1493  0E1E                     	;# 
  1494  0E1F                     	;# 
  1495  0E20                     	;# 
  1496  0E21                     	;# 
  1497  0E22                     	;# 
  1498  0E24                     	;# 
  1499  0E25                     	;# 
  1500  0E28                     	;# 
  1501  0E29                     	;# 
  1502  0E2A                     	;# 
  1503  0E2B                     	;# 
  1504  0E2C                     	;# 
  1505  0E2D                     	;# 
  1506  0E2E                     	;# 
  1507  0E2F                     	;# 
  1508  0E90                     	;# 
  1509  0E91                     	;# 
  1510  0E92                     	;# 
  1511  0E94                     	;# 
  1512  0E95                     	;# 
  1513  0E9C                     	;# 
  1514  0E9D                     	;# 
  1515  0E9E                     	;# 
  1516  0E9F                     	;# 
  1517  0EA0                     	;# 
  1518  0EA1                     	;# 
  1519  0EA2                     	;# 
  1520  0EA3                     	;# 
  1521  0EA4                     	;# 
  1522  0EA5                     	;# 
  1523  0EA6                     	;# 
  1524  0EA7                     	;# 
  1525  0F0F                     	;# 
  1526  0F10                     	;# 
  1527  0F11                     	;# 
  1528  0F12                     	;# 
  1529  0F13                     	;# 
  1530  0F14                     	;# 
  1531  0F15                     	;# 
  1532  0F16                     	;# 
  1533  0F17                     	;# 
  1534  0F18                     	;# 
  1535  0F19                     	;# 
  1536  0F1A                     	;# 
  1537  0F1B                     	;# 
  1538  0F1C                     	;# 
  1539  0F1D                     	;# 
  1540  0F1E                     	;# 
  1541  0F1F                     	;# 
  1542  0F20                     	;# 
  1543  0F21                     	;# 
  1544  0F22                     	;# 
  1545  0F23                     	;# 
  1546  0F24                     	;# 
  1547  0F25                     	;# 
  1548  0F26                     	;# 
  1549  0F27                     	;# 
  1550  0F28                     	;# 
  1551  0F29                     	;# 
  1552  0F2A                     	;# 
  1553  0F2B                     	;# 
  1554  0F2C                     	;# 
  1555  0F2D                     	;# 
  1556  0F2E                     	;# 
  1557  0F2F                     	;# 
  1558  0F30                     	;# 
  1559  0F31                     	;# 
  1560  0F32                     	;# 
  1561  0F33                     	;# 
  1562  0F34                     	;# 
  1563  0F35                     	;# 
  1564  0F36                     	;# 
  1565  0F37                     	;# 
  1566  0FE4                     	;# 
  1567  0FE5                     	;# 
  1568  0FE6                     	;# 
  1569  0FE7                     	;# 
  1570  0FE8                     	;# 
  1571  0FE9                     	;# 
  1572  0FEA                     	;# 
  1573  0FEB                     	;# 
  1574  0FED                     	;# 
  1575  0FEE                     	;# 
  1576  0FEF                     	;# 
  1577  0000                     	;# 
  1578  0001                     	;# 
  1579  0002                     	;# 
  1580  0003                     	;# 
  1581  0004                     	;# 
  1582  0005                     	;# 
  1583  0006                     	;# 
  1584  0007                     	;# 
  1585  0008                     	;# 
  1586  0009                     	;# 
  1587  000A                     	;# 
  1588  000B                     	;# 
  1589  000C                     	;# 
  1590  000D                     	;# 
  1591  000E                     	;# 
  1592  0010                     	;# 
  1593  0011                     	;# 
  1594  0012                     	;# 
  1595  0013                     	;# 
  1596  0014                     	;# 
  1597  0015                     	;# 
  1598  0015                     	;# 
  1599  0016                     	;# 
  1600  0016                     	;# 
  1601  0017                     	;# 
  1602  0018                     	;# 
  1603  0019                     	;# 
  1604  0019                     	;# 
  1605  001A                     	;# 
  1606  001B                     	;# 
  1607  001C                     	;# 
  1608  001D                     	;# 
  1609  001E                     	;# 
  1610  001F                     	;# 
  1611  008C                     	;# 
  1612  008D                     	;# 
  1613  008E                     	;# 
  1614  0090                     	;# 
  1615  0091                     	;# 
  1616  0092                     	;# 
  1617  0093                     	;# 
  1618  0094                     	;# 
  1619  0097                     	;# 
  1620  009B                     	;# 
  1621  009B                     	;# 
  1622  009C                     	;# 
  1623  009D                     	;# 
  1624  009E                     	;# 
  1625  009F                     	;# 
  1626  010C                     	;# 
  1627  010D                     	;# 
  1628  010E                     	;# 
  1629  0111                     	;# 
  1630  0112                     	;# 
  1631  0113                     	;# 
  1632  0114                     	;# 
  1633  0115                     	;# 
  1634  0116                     	;# 
  1635  0117                     	;# 
  1636  0118                     	;# 
  1637  0119                     	;# 
  1638  018C                     	;# 
  1639  018D                     	;# 
  1640  018E                     	;# 
  1641  0197                     	;# 
  1642  0199                     	;# 
  1643  0199                     	;# 
  1644  0199                     	;# 
  1645  019A                     	;# 
  1646  019A                     	;# 
  1647  019A                     	;# 
  1648  019B                     	;# 
  1649  019B                     	;# 
  1650  019B                     	;# 
  1651  019B                     	;# 
  1652  019B                     	;# 
  1653  019C                     	;# 
  1654  019C                     	;# 
  1655  019C                     	;# 
  1656  019D                     	;# 
  1657  019D                     	;# 
  1658  019D                     	;# 
  1659  019E                     	;# 
  1660  019E                     	;# 
  1661  019E                     	;# 
  1662  019F                     	;# 
  1663  019F                     	;# 
  1664  019F                     	;# 
  1665  019F                     	;# 
  1666  019F                     	;# 
  1667  020C                     	;# 
  1668  020D                     	;# 
  1669  020E                     	;# 
  1670  0211                     	;# 
  1671  0211                     	;# 
  1672  0212                     	;# 
  1673  0212                     	;# 
  1674  0213                     	;# 
  1675  0213                     	;# 
  1676  0214                     	;# 
  1677  0214                     	;# 
  1678  0215                     	;# 
  1679  0215                     	;# 
  1680  0215                     	;# 
  1681  0215                     	;# 
  1682  0216                     	;# 
  1683  0216                     	;# 
  1684  0217                     	;# 
  1685  0217                     	;# 
  1686  0219                     	;# 
  1687  021A                     	;# 
  1688  021B                     	;# 
  1689  021C                     	;# 
  1690  021D                     	;# 
  1691  021D                     	;# 
  1692  021E                     	;# 
  1693  021F                     	;# 
  1694  028C                     	;# 
  1695  028D                     	;# 
  1696  028E                     	;# 
  1697  0291                     	;# 
  1698  0291                     	;# 
  1699  0292                     	;# 
  1700  0293                     	;# 
  1701  0294                     	;# 
  1702  0295                     	;# 
  1703  0295                     	;# 
  1704  0296                     	;# 
  1705  0297                     	;# 
  1706  0298                     	;# 
  1707  029F                     	;# 
  1708  030C                     	;# 
  1709  030D                     	;# 
  1710  030E                     	;# 
  1711  0311                     	;# 
  1712  0311                     	;# 
  1713  0312                     	;# 
  1714  0313                     	;# 
  1715  0314                     	;# 
  1716  0315                     	;# 
  1717  0315                     	;# 
  1718  0316                     	;# 
  1719  0317                     	;# 
  1720  0318                     	;# 
  1721  038C                     	;# 
  1722  038D                     	;# 
  1723  038E                     	;# 
  1724  0391                     	;# 
  1725  0392                     	;# 
  1726  0393                     	;# 
  1727  0394                     	;# 
  1728  0395                     	;# 
  1729  0396                     	;# 
  1730  0397                     	;# 
  1731  0398                     	;# 
  1732  0399                     	;# 
  1733  039A                     	;# 
  1734  039C                     	;# 
  1735  039D                     	;# 
  1736  039E                     	;# 
  1737  039F                     	;# 
  1738  0411                     	;# 
  1739  0411                     	;# 
  1740  0412                     	;# 
  1741  0413                     	;# 
  1742  0414                     	;# 
  1743  0415                     	;# 
  1744  0416                     	;# 
  1745  0417                     	;# 
  1746  0418                     	;# 
  1747  0418                     	;# 
  1748  0419                     	;# 
  1749  041A                     	;# 
  1750  041B                     	;# 
  1751  041C                     	;# 
  1752  041D                     	;# 
  1753  041E                     	;# 
  1754  041F                     	;# 
  1755  0498                     	;# 
  1756  0498                     	;# 
  1757  0499                     	;# 
  1758  049A                     	;# 
  1759  049B                     	;# 
  1760  049B                     	;# 
  1761  049C                     	;# 
  1762  049D                     	;# 
  1763  049E                     	;# 
  1764  049F                     	;# 
  1765  0617                     	;# 
  1766  0618                     	;# 
  1767  0619                     	;# 
  1768  0619                     	;# 
  1769  061A                     	;# 
  1770  061B                     	;# 
  1771  061C                     	;# 
  1772  061C                     	;# 
  1773  061F                     	;# 
  1774  0691                     	;# 
  1775  0692                     	;# 
  1776  0693                     	;# 
  1777  0694                     	;# 
  1778  0695                     	;# 
  1779  0696                     	;# 
  1780  0697                     	;# 
  1781  0698                     	;# 
  1782  0699                     	;# 
  1783  0711                     	;# 
  1784  0712                     	;# 
  1785  0713                     	;# 
  1786  0714                     	;# 
  1787  0715                     	;# 
  1788  0716                     	;# 
  1789  0717                     	;# 
  1790  0718                     	;# 
  1791  0719                     	;# 
  1792  0891                     	;# 
  1793  0891                     	;# 
  1794  0891                     	;# 
  1795  0891                     	;# 
  1796  0891                     	;# 
  1797  0891                     	;# 
  1798  0892                     	;# 
  1799  0892                     	;# 
  1800  0892                     	;# 
  1801  0893                     	;# 
  1802  0893                     	;# 
  1803  0893                     	;# 
  1804  0893                     	;# 
  1805  0893                     	;# 
  1806  0893                     	;# 
  1807  0894                     	;# 
  1808  0894                     	;# 
  1809  0894                     	;# 
  1810  0895                     	;# 
  1811  0895                     	;# 
  1812  0895                     	;# 
  1813  0896                     	;# 
  1814  0896                     	;# 
  1815  0896                     	;# 
  1816  089B                     	;# 
  1817  0911                     	;# 
  1818  0912                     	;# 
  1819  0913                     	;# 
  1820  0914                     	;# 
  1821  0915                     	;# 
  1822  0916                     	;# 
  1823  0918                     	;# 
  1824  0919                     	;# 
  1825  091A                     	;# 
  1826  091B                     	;# 
  1827  091C                     	;# 
  1828  091D                     	;# 
  1829  091E                     	;# 
  1830  091F                     	;# 
  1831  0E0F                     	;# 
  1832  0E10                     	;# 
  1833  0E11                     	;# 
  1834  0E12                     	;# 
  1835  0E13                     	;# 
  1836  0E14                     	;# 
  1837  0E15                     	;# 
  1838  0E16                     	;# 
  1839  0E17                     	;# 
  1840  0E18                     	;# 
  1841  0E19                     	;# 
  1842  0E1A                     	;# 
  1843  0E1B                     	;# 
  1844  0E1C                     	;# 
  1845  0E1D                     	;# 
  1846  0E1E                     	;# 
  1847  0E1F                     	;# 
  1848  0E20                     	;# 
  1849  0E21                     	;# 
  1850  0E22                     	;# 
  1851  0E24                     	;# 
  1852  0E25                     	;# 
  1853  0E28                     	;# 
  1854  0E29                     	;# 
  1855  0E2A                     	;# 
  1856  0E2B                     	;# 
  1857  0E2C                     	;# 
  1858  0E2D                     	;# 
  1859  0E2E                     	;# 
  1860  0E2F                     	;# 
  1861  0E90                     	;# 
  1862  0E91                     	;# 
  1863  0E92                     	;# 
  1864  0E94                     	;# 
  1865  0E95                     	;# 
  1866  0E9C                     	;# 
  1867  0E9D                     	;# 
  1868  0E9E                     	;# 
  1869  0E9F                     	;# 
  1870  0EA0                     	;# 
  1871  0EA1                     	;# 
  1872  0EA2                     	;# 
  1873  0EA3                     	;# 
  1874  0EA4                     	;# 
  1875  0EA5                     	;# 
  1876  0EA6                     	;# 
  1877  0EA7                     	;# 
  1878  0F0F                     	;# 
  1879  0F10                     	;# 
  1880  0F11                     	;# 
  1881  0F12                     	;# 
  1882  0F13                     	;# 
  1883  0F14                     	;# 
  1884  0F15                     	;# 
  1885  0F16                     	;# 
  1886  0F17                     	;# 
  1887  0F18                     	;# 
  1888  0F19                     	;# 
  1889  0F1A                     	;# 
  1890  0F1B                     	;# 
  1891  0F1C                     	;# 
  1892  0F1D                     	;# 
  1893  0F1E                     	;# 
  1894  0F1F                     	;# 
  1895  0F20                     	;# 
  1896  0F21                     	;# 
  1897  0F22                     	;# 
  1898  0F23                     	;# 
  1899  0F24                     	;# 
  1900  0F25                     	;# 
  1901  0F26                     	;# 
  1902  0F27                     	;# 
  1903  0F28                     	;# 
  1904  0F29                     	;# 
  1905  0F2A                     	;# 
  1906  0F2B                     	;# 
  1907  0F2C                     	;# 
  1908  0F2D                     	;# 
  1909  0F2E                     	;# 
  1910  0F2F                     	;# 
  1911  0F30                     	;# 
  1912  0F31                     	;# 
  1913  0F32                     	;# 
  1914  0F33                     	;# 
  1915  0F34                     	;# 
  1916  0F35                     	;# 
  1917  0F36                     	;# 
  1918  0F37                     	;# 
  1919  0FE4                     	;# 
  1920  0FE5                     	;# 
  1921  0FE6                     	;# 
  1922  0FE7                     	;# 
  1923  0FE8                     	;# 
  1924  0FE9                     	;# 
  1925  0FEA                     	;# 
  1926  0FEB                     	;# 
  1927  0FED                     	;# 
  1928  0FEE                     	;# 
  1929  0FEF                     	;# 
  1930  0000                     	;# 
  1931  0001                     	;# 
  1932  0002                     	;# 
  1933  0003                     	;# 
  1934  0004                     	;# 
  1935  0005                     	;# 
  1936  0006                     	;# 
  1937  0007                     	;# 
  1938  0008                     	;# 
  1939  0009                     	;# 
  1940  000A                     	;# 
  1941  000B                     	;# 
  1942  000C                     	;# 
  1943  000D                     	;# 
  1944  000E                     	;# 
  1945  0010                     	;# 
  1946  0011                     	;# 
  1947  0012                     	;# 
  1948  0013                     	;# 
  1949  0014                     	;# 
  1950  0015                     	;# 
  1951  0015                     	;# 
  1952  0016                     	;# 
  1953  0016                     	;# 
  1954  0017                     	;# 
  1955  0018                     	;# 
  1956  0019                     	;# 
  1957  0019                     	;# 
  1958  001A                     	;# 
  1959  001B                     	;# 
  1960  001C                     	;# 
  1961  001D                     	;# 
  1962  001E                     	;# 
  1963  001F                     	;# 
  1964  008C                     	;# 
  1965  008D                     	;# 
  1966  008E                     	;# 
  1967  0090                     	;# 
  1968  0091                     	;# 
  1969  0092                     	;# 
  1970  0093                     	;# 
  1971  0094                     	;# 
  1972  0097                     	;# 
  1973  009B                     	;# 
  1974  009B                     	;# 
  1975  009C                     	;# 
  1976  009D                     	;# 
  1977  009E                     	;# 
  1978  009F                     	;# 
  1979  010C                     	;# 
  1980  010D                     	;# 
  1981  010E                     	;# 
  1982  0111                     	;# 
  1983  0112                     	;# 
  1984  0113                     	;# 
  1985  0114                     	;# 
  1986  0115                     	;# 
  1987  0116                     	;# 
  1988  0117                     	;# 
  1989  0118                     	;# 
  1990  0119                     	;# 
  1991  018C                     	;# 
  1992  018D                     	;# 
  1993  018E                     	;# 
  1994  0197                     	;# 
  1995  0199                     	;# 
  1996  0199                     	;# 
  1997  0199                     	;# 
  1998  019A                     	;# 
  1999  019A                     	;# 
  2000  019A                     	;# 
  2001  019B                     	;# 
  2002  019B                     	;# 
  2003  019B                     	;# 
  2004  019B                     	;# 
  2005  019B                     	;# 
  2006  019C                     	;# 
  2007  019C                     	;# 
  2008  019C                     	;# 
  2009  019D                     	;# 
  2010  019D                     	;# 
  2011  019D                     	;# 
  2012  019E                     	;# 
  2013  019E                     	;# 
  2014  019E                     	;# 
  2015  019F                     	;# 
  2016  019F                     	;# 
  2017  019F                     	;# 
  2018  019F                     	;# 
  2019  019F                     	;# 
  2020  020C                     	;# 
  2021  020D                     	;# 
  2022  020E                     	;# 
  2023  0211                     	;# 
  2024  0211                     	;# 
  2025  0212                     	;# 
  2026  0212                     	;# 
  2027  0213                     	;# 
  2028  0213                     	;# 
  2029  0214                     	;# 
  2030  0214                     	;# 
  2031  0215                     	;# 
  2032  0215                     	;# 
  2033  0215                     	;# 
  2034  0215                     	;# 
  2035  0216                     	;# 
  2036  0216                     	;# 
  2037  0217                     	;# 
  2038  0217                     	;# 
  2039  0219                     	;# 
  2040  021A                     	;# 
  2041  021B                     	;# 
  2042  021C                     	;# 
  2043  021D                     	;# 
  2044  021D                     	;# 
  2045  021E                     	;# 
  2046  021F                     	;# 
  2047  028C                     	;# 
  2048  028D                     	;# 
  2049  028E                     	;# 
  2050  0291                     	;# 
  2051  0291                     	;# 
  2052  0292                     	;# 
  2053  0293                     	;# 
  2054  0294                     	;# 
  2055  0295                     	;# 
  2056  0295                     	;# 
  2057  0296                     	;# 
  2058  0297                     	;# 
  2059  0298                     	;# 
  2060  029F                     	;# 
  2061  030C                     	;# 
  2062  030D                     	;# 
  2063  030E                     	;# 
  2064  0311                     	;# 
  2065  0311                     	;# 
  2066  0312                     	;# 
  2067  0313                     	;# 
  2068  0314                     	;# 
  2069  0315                     	;# 
  2070  0315                     	;# 
  2071  0316                     	;# 
  2072  0317                     	;# 
  2073  0318                     	;# 
  2074  038C                     	;# 
  2075  038D                     	;# 
  2076  038E                     	;# 
  2077  0391                     	;# 
  2078  0392                     	;# 
  2079  0393                     	;# 
  2080  0394                     	;# 
  2081  0395                     	;# 
  2082  0396                     	;# 
  2083  0397                     	;# 
  2084  0398                     	;# 
  2085  0399                     	;# 
  2086  039A                     	;# 
  2087  039C                     	;# 
  2088  039D                     	;# 
  2089  039E                     	;# 
  2090  039F                     	;# 
  2091  0411                     	;# 
  2092  0411                     	;# 
  2093  0412                     	;# 
  2094  0413                     	;# 
  2095  0414                     	;# 
  2096  0415                     	;# 
  2097  0416                     	;# 
  2098  0417                     	;# 
  2099  0418                     	;# 
  2100  0418                     	;# 
  2101  0419                     	;# 
  2102  041A                     	;# 
  2103  041B                     	;# 
  2104  041C                     	;# 
  2105  041D                     	;# 
  2106  041E                     	;# 
  2107  041F                     	;# 
  2108  0498                     	;# 
  2109  0498                     	;# 
  2110  0499                     	;# 
  2111  049A                     	;# 
  2112  049B                     	;# 
  2113  049B                     	;# 
  2114  049C                     	;# 
  2115  049D                     	;# 
  2116  049E                     	;# 
  2117  049F                     	;# 
  2118  0617                     	;# 
  2119  0618                     	;# 
  2120  0619                     	;# 
  2121  0619                     	;# 
  2122  061A                     	;# 
  2123  061B                     	;# 
  2124  061C                     	;# 
  2125  061C                     	;# 
  2126  061F                     	;# 
  2127  0691                     	;# 
  2128  0692                     	;# 
  2129  0693                     	;# 
  2130  0694                     	;# 
  2131  0695                     	;# 
  2132  0696                     	;# 
  2133  0697                     	;# 
  2134  0698                     	;# 
  2135  0699                     	;# 
  2136  0711                     	;# 
  2137  0712                     	;# 
  2138  0713                     	;# 
  2139  0714                     	;# 
  2140  0715                     	;# 
  2141  0716                     	;# 
  2142  0717                     	;# 
  2143  0718                     	;# 
  2144  0719                     	;# 
  2145  0891                     	;# 
  2146  0891                     	;# 
  2147  0891                     	;# 
  2148  0891                     	;# 
  2149  0891                     	;# 
  2150  0891                     	;# 
  2151  0892                     	;# 
  2152  0892                     	;# 
  2153  0892                     	;# 
  2154  0893                     	;# 
  2155  0893                     	;# 
  2156  0893                     	;# 
  2157  0893                     	;# 
  2158  0893                     	;# 
  2159  0893                     	;# 
  2160  0894                     	;# 
  2161  0894                     	;# 
  2162  0894                     	;# 
  2163  0895                     	;# 
  2164  0895                     	;# 
  2165  0895                     	;# 
  2166  0896                     	;# 
  2167  0896                     	;# 
  2168  0896                     	;# 
  2169  089B                     	;# 
  2170  0911                     	;# 
  2171  0912                     	;# 
  2172  0913                     	;# 
  2173  0914                     	;# 
  2174  0915                     	;# 
  2175  0916                     	;# 
  2176  0918                     	;# 
  2177  0919                     	;# 
  2178  091A                     	;# 
  2179  091B                     	;# 
  2180  091C                     	;# 
  2181  091D                     	;# 
  2182  091E                     	;# 
  2183  091F                     	;# 
  2184  0E0F                     	;# 
  2185  0E10                     	;# 
  2186  0E11                     	;# 
  2187  0E12                     	;# 
  2188  0E13                     	;# 
  2189  0E14                     	;# 
  2190  0E15                     	;# 
  2191  0E16                     	;# 
  2192  0E17                     	;# 
  2193  0E18                     	;# 
  2194  0E19                     	;# 
  2195  0E1A                     	;# 
  2196  0E1B                     	;# 
  2197  0E1C                     	;# 
  2198  0E1D                     	;# 
  2199  0E1E                     	;# 
  2200  0E1F                     	;# 
  2201  0E20                     	;# 
  2202  0E21                     	;# 
  2203  0E22                     	;# 
  2204  0E24                     	;# 
  2205  0E25                     	;# 
  2206  0E28                     	;# 
  2207  0E29                     	;# 
  2208  0E2A                     	;# 
  2209  0E2B                     	;# 
  2210  0E2C                     	;# 
  2211  0E2D                     	;# 
  2212  0E2E                     	;# 
  2213  0E2F                     	;# 
  2214  0E90                     	;# 
  2215  0E91                     	;# 
  2216  0E92                     	;# 
  2217  0E94                     	;# 
  2218  0E95                     	;# 
  2219  0E9C                     	;# 
  2220  0E9D                     	;# 
  2221  0E9E                     	;# 
  2222  0E9F                     	;# 
  2223  0EA0                     	;# 
  2224  0EA1                     	;# 
  2225  0EA2                     	;# 
  2226  0EA3                     	;# 
  2227  0EA4                     	;# 
  2228  0EA5                     	;# 
  2229  0EA6                     	;# 
  2230  0EA7                     	;# 
  2231  0F0F                     	;# 
  2232  0F10                     	;# 
  2233  0F11                     	;# 
  2234  0F12                     	;# 
  2235  0F13                     	;# 
  2236  0F14                     	;# 
  2237  0F15                     	;# 
  2238  0F16                     	;# 
  2239  0F17                     	;# 
  2240  0F18                     	;# 
  2241  0F19                     	;# 
  2242  0F1A                     	;# 
  2243  0F1B                     	;# 
  2244  0F1C                     	;# 
  2245  0F1D                     	;# 
  2246  0F1E                     	;# 
  2247  0F1F                     	;# 
  2248  0F20                     	;# 
  2249  0F21                     	;# 
  2250  0F22                     	;# 
  2251  0F23                     	;# 
  2252  0F24                     	;# 
  2253  0F25                     	;# 
  2254  0F26                     	;# 
  2255  0F27                     	;# 
  2256  0F28                     	;# 
  2257  0F29                     	;# 
  2258  0F2A                     	;# 
  2259  0F2B                     	;# 
  2260  0F2C                     	;# 
  2261  0F2D                     	;# 
  2262  0F2E                     	;# 
  2263  0F2F                     	;# 
  2264  0F30                     	;# 
  2265  0F31                     	;# 
  2266  0F32                     	;# 
  2267  0F33                     	;# 
  2268  0F34                     	;# 
  2269  0F35                     	;# 
  2270  0F36                     	;# 
  2271  0F37                     	;# 
  2272  0FE4                     	;# 
  2273  0FE5                     	;# 
  2274  0FE6                     	;# 
  2275  0FE7                     	;# 
  2276  0FE8                     	;# 
  2277  0FE9                     	;# 
  2278  0FEA                     	;# 
  2279  0FEB                     	;# 
  2280  0FED                     	;# 
  2281  0FEE                     	;# 
  2282  0FEF                     	;# 
  2283  0000                     	;# 
  2284  0001                     	;# 
  2285  0002                     	;# 
  2286  0003                     	;# 
  2287  0004                     	;# 
  2288  0005                     	;# 
  2289  0006                     	;# 
  2290  0007                     	;# 
  2291  0008                     	;# 
  2292  0009                     	;# 
  2293  000A                     	;# 
  2294  000B                     	;# 
  2295  000C                     	;# 
  2296  000D                     	;# 
  2297  000E                     	;# 
  2298  0010                     	;# 
  2299  0011                     	;# 
  2300  0012                     	;# 
  2301  0013                     	;# 
  2302  0014                     	;# 
  2303  0015                     	;# 
  2304  0015                     	;# 
  2305  0016                     	;# 
  2306  0016                     	;# 
  2307  0017                     	;# 
  2308  0018                     	;# 
  2309  0019                     	;# 
  2310  0019                     	;# 
  2311  001A                     	;# 
  2312  001B                     	;# 
  2313  001C                     	;# 
  2314  001D                     	;# 
  2315  001E                     	;# 
  2316  001F                     	;# 
  2317  008C                     	;# 
  2318  008D                     	;# 
  2319  008E                     	;# 
  2320  0090                     	;# 
  2321  0091                     	;# 
  2322  0092                     	;# 
  2323  0093                     	;# 
  2324  0094                     	;# 
  2325  0097                     	;# 
  2326  009B                     	;# 
  2327  009B                     	;# 
  2328  009C                     	;# 
  2329  009D                     	;# 
  2330  009E                     	;# 
  2331  009F                     	;# 
  2332  010C                     	;# 
  2333  010D                     	;# 
  2334  010E                     	;# 
  2335  0111                     	;# 
  2336  0112                     	;# 
  2337  0113                     	;# 
  2338  0114                     	;# 
  2339  0115                     	;# 
  2340  0116                     	;# 
  2341  0117                     	;# 
  2342  0118                     	;# 
  2343  0119                     	;# 
  2344  018C                     	;# 
  2345  018D                     	;# 
  2346  018E                     	;# 
  2347  0197                     	;# 
  2348  0199                     	;# 
  2349  0199                     	;# 
  2350  0199                     	;# 
  2351  019A                     	;# 
  2352  019A                     	;# 
  2353  019A                     	;# 
  2354  019B                     	;# 
  2355  019B                     	;# 
  2356  019B                     	;# 
  2357  019B                     	;# 
  2358  019B                     	;# 
  2359  019C                     	;# 
  2360  019C                     	;# 
  2361  019C                     	;# 
  2362  019D                     	;# 
  2363  019D                     	;# 
  2364  019D                     	;# 
  2365  019E                     	;# 
  2366  019E                     	;# 
  2367  019E                     	;# 
  2368  019F                     	;# 
  2369  019F                     	;# 
  2370  019F                     	;# 
  2371  019F                     	;# 
  2372  019F                     	;# 
  2373  020C                     	;# 
  2374  020D                     	;# 
  2375  020E                     	;# 
  2376  0211                     	;# 
  2377  0211                     	;# 
  2378  0212                     	;# 
  2379  0212                     	;# 
  2380  0213                     	;# 
  2381  0213                     	;# 
  2382  0214                     	;# 
  2383  0214                     	;# 
  2384  0215                     	;# 
  2385  0215                     	;# 
  2386  0215                     	;# 
  2387  0215                     	;# 
  2388  0216                     	;# 
  2389  0216                     	;# 
  2390  0217                     	;# 
  2391  0217                     	;# 
  2392  0219                     	;# 
  2393  021A                     	;# 
  2394  021B                     	;# 
  2395  021C                     	;# 
  2396  021D                     	;# 
  2397  021D                     	;# 
  2398  021E                     	;# 
  2399  021F                     	;# 
  2400  028C                     	;# 
  2401  028D                     	;# 
  2402  028E                     	;# 
  2403  0291                     	;# 
  2404  0291                     	;# 
  2405  0292                     	;# 
  2406  0293                     	;# 
  2407  0294                     	;# 
  2408  0295                     	;# 
  2409  0295                     	;# 
  2410  0296                     	;# 
  2411  0297                     	;# 
  2412  0298                     	;# 
  2413  029F                     	;# 
  2414  030C                     	;# 
  2415  030D                     	;# 
  2416  030E                     	;# 
  2417  0311                     	;# 
  2418  0311                     	;# 
  2419  0312                     	;# 
  2420  0313                     	;# 
  2421  0314                     	;# 
  2422  0315                     	;# 
  2423  0315                     	;# 
  2424  0316                     	;# 
  2425  0317                     	;# 
  2426  0318                     	;# 
  2427  038C                     	;# 
  2428  038D                     	;# 
  2429  038E                     	;# 
  2430  0391                     	;# 
  2431  0392                     	;# 
  2432  0393                     	;# 
  2433  0394                     	;# 
  2434  0395                     	;# 
  2435  0396                     	;# 
  2436  0397                     	;# 
  2437  0398                     	;# 
  2438  0399                     	;# 
  2439  039A                     	;# 
  2440  039C                     	;# 
  2441  039D                     	;# 
  2442  039E                     	;# 
  2443  039F                     	;# 
  2444  0411                     	;# 
  2445  0411                     	;# 
  2446  0412                     	;# 
  2447  0413                     	;# 
  2448  0414                     	;# 
  2449  0415                     	;# 
  2450  0416                     	;# 
  2451  0417                     	;# 
  2452  0418                     	;# 
  2453  0418                     	;# 
  2454  0419                     	;# 
  2455  041A                     	;# 
  2456  041B                     	;# 
  2457  041C                     	;# 
  2458  041D                     	;# 
  2459  041E                     	;# 
  2460  041F                     	;# 
  2461  0498                     	;# 
  2462  0498                     	;# 
  2463  0499                     	;# 
  2464  049A                     	;# 
  2465  049B                     	;# 
  2466  049B                     	;# 
  2467  049C                     	;# 
  2468  049D                     	;# 
  2469  049E                     	;# 
  2470  049F                     	;# 
  2471  0617                     	;# 
  2472  0618                     	;# 
  2473  0619                     	;# 
  2474  0619                     	;# 
  2475  061A                     	;# 
  2476  061B                     	;# 
  2477  061C                     	;# 
  2478  061C                     	;# 
  2479  061F                     	;# 
  2480  0691                     	;# 
  2481  0692                     	;# 
  2482  0693                     	;# 
  2483  0694                     	;# 
  2484  0695                     	;# 
  2485  0696                     	;# 
  2486  0697                     	;# 
  2487  0698                     	;# 
  2488  0699                     	;# 
  2489  0711                     	;# 
  2490  0712                     	;# 
  2491  0713                     	;# 
  2492  0714                     	;# 
  2493  0715                     	;# 
  2494  0716                     	;# 
  2495  0717                     	;# 
  2496  0718                     	;# 
  2497  0719                     	;# 
  2498  0891                     	;# 
  2499  0891                     	;# 
  2500  0891                     	;# 
  2501  0891                     	;# 
  2502  0891                     	;# 
  2503  0891                     	;# 
  2504  0892                     	;# 
  2505  0892                     	;# 
  2506  0892                     	;# 
  2507  0893                     	;# 
  2508  0893                     	;# 
  2509  0893                     	;# 
  2510  0893                     	;# 
  2511  0893                     	;# 
  2512  0893                     	;# 
  2513  0894                     	;# 
  2514  0894                     	;# 
  2515  0894                     	;# 
  2516  0895                     	;# 
  2517  0895                     	;# 
  2518  0895                     	;# 
  2519  0896                     	;# 
  2520  0896                     	;# 
  2521  0896                     	;# 
  2522  089B                     	;# 
  2523  0911                     	;# 
  2524  0912                     	;# 
  2525  0913                     	;# 
  2526  0914                     	;# 
  2527  0915                     	;# 
  2528  0916                     	;# 
  2529  0918                     	;# 
  2530  0919                     	;# 
  2531  091A                     	;# 
  2532  091B                     	;# 
  2533  091C                     	;# 
  2534  091D                     	;# 
  2535  091E                     	;# 
  2536  091F                     	;# 
  2537  0E0F                     	;# 
  2538  0E10                     	;# 
  2539  0E11                     	;# 
  2540  0E12                     	;# 
  2541  0E13                     	;# 
  2542  0E14                     	;# 
  2543  0E15                     	;# 
  2544  0E16                     	;# 
  2545  0E17                     	;# 
  2546  0E18                     	;# 
  2547  0E19                     	;# 
  2548  0E1A                     	;# 
  2549  0E1B                     	;# 
  2550  0E1C                     	;# 
  2551  0E1D                     	;# 
  2552  0E1E                     	;# 
  2553  0E1F                     	;# 
  2554  0E20                     	;# 
  2555  0E21                     	;# 
  2556  0E22                     	;# 
  2557  0E24                     	;# 
  2558  0E25                     	;# 
  2559  0E28                     	;# 
  2560  0E29                     	;# 
  2561  0E2A                     	;# 
  2562  0E2B                     	;# 
  2563  0E2C                     	;# 
  2564  0E2D                     	;# 
  2565  0E2E                     	;# 
  2566  0E2F                     	;# 
  2567  0E90                     	;# 
  2568  0E91                     	;# 
  2569  0E92                     	;# 
  2570  0E94                     	;# 
  2571  0E95                     	;# 
  2572  0E9C                     	;# 
  2573  0E9D                     	;# 
  2574  0E9E                     	;# 
  2575  0E9F                     	;# 
  2576  0EA0                     	;# 
  2577  0EA1                     	;# 
  2578  0EA2                     	;# 
  2579  0EA3                     	;# 
  2580  0EA4                     	;# 
  2581  0EA5                     	;# 
  2582  0EA6                     	;# 
  2583  0EA7                     	;# 
  2584  0F0F                     	;# 
  2585  0F10                     	;# 
  2586  0F11                     	;# 
  2587  0F12                     	;# 
  2588  0F13                     	;# 
  2589  0F14                     	;# 
  2590  0F15                     	;# 
  2591  0F16                     	;# 
  2592  0F17                     	;# 
  2593  0F18                     	;# 
  2594  0F19                     	;# 
  2595  0F1A                     	;# 
  2596  0F1B                     	;# 
  2597  0F1C                     	;# 
  2598  0F1D                     	;# 
  2599  0F1E                     	;# 
  2600  0F1F                     	;# 
  2601  0F20                     	;# 
  2602  0F21                     	;# 
  2603  0F22                     	;# 
  2604  0F23                     	;# 
  2605  0F24                     	;# 
  2606  0F25                     	;# 
  2607  0F26                     	;# 
  2608  0F27                     	;# 
  2609  0F28                     	;# 
  2610  0F29                     	;# 
  2611  0F2A                     	;# 
  2612  0F2B                     	;# 
  2613  0F2C                     	;# 
  2614  0F2D                     	;# 
  2615  0F2E                     	;# 
  2616  0F2F                     	;# 
  2617  0F30                     	;# 
  2618  0F31                     	;# 
  2619  0F32                     	;# 
  2620  0F33                     	;# 
  2621  0F34                     	;# 
  2622  0F35                     	;# 
  2623  0F36                     	;# 
  2624  0F37                     	;# 
  2625  0FE4                     	;# 
  2626  0FE5                     	;# 
  2627  0FE6                     	;# 
  2628  0FE7                     	;# 
  2629  0FE8                     	;# 
  2630  0FE9                     	;# 
  2631  0FEA                     	;# 
  2632  0FEB                     	;# 
  2633  0FED                     	;# 
  2634  0FEE                     	;# 
  2635  0FEF                     	;# 
  2636  0000                     	;# 
  2637  0001                     	;# 
  2638  0002                     	;# 
  2639  0003                     	;# 
  2640  0004                     	;# 
  2641  0005                     	;# 
  2642  0006                     	;# 
  2643  0007                     	;# 
  2644  0008                     	;# 
  2645  0009                     	;# 
  2646  000A                     	;# 
  2647  000B                     	;# 
  2648  000C                     	;# 
  2649  000D                     	;# 
  2650  000E                     	;# 
  2651  0010                     	;# 
  2652  0011                     	;# 
  2653  0012                     	;# 
  2654  0013                     	;# 
  2655  0014                     	;# 
  2656  0015                     	;# 
  2657  0015                     	;# 
  2658  0016                     	;# 
  2659  0016                     	;# 
  2660  0017                     	;# 
  2661  0018                     	;# 
  2662  0019                     	;# 
  2663  0019                     	;# 
  2664  001A                     	;# 
  2665  001B                     	;# 
  2666  001C                     	;# 
  2667  001D                     	;# 
  2668  001E                     	;# 
  2669  001F                     	;# 
  2670  008C                     	;# 
  2671  008D                     	;# 
  2672  008E                     	;# 
  2673  0090                     	;# 
  2674  0091                     	;# 
  2675  0092                     	;# 
  2676  0093                     	;# 
  2677  0094                     	;# 
  2678  0097                     	;# 
  2679  009B                     	;# 
  2680  009B                     	;# 
  2681  009C                     	;# 
  2682  009D                     	;# 
  2683  009E                     	;# 
  2684  009F                     	;# 
  2685  010C                     	;# 
  2686  010D                     	;# 
  2687  010E                     	;# 
  2688  0111                     	;# 
  2689  0112                     	;# 
  2690  0113                     	;# 
  2691  0114                     	;# 
  2692  0115                     	;# 
  2693  0116                     	;# 
  2694  0117                     	;# 
  2695  0118                     	;# 
  2696  0119                     	;# 
  2697  018C                     	;# 
  2698  018D                     	;# 
  2699  018E                     	;# 
  2700  0197                     	;# 
  2701  0199                     	;# 
  2702  0199                     	;# 
  2703  0199                     	;# 
  2704  019A                     	;# 
  2705  019A                     	;# 
  2706  019A                     	;# 
  2707  019B                     	;# 
  2708  019B                     	;# 
  2709  019B                     	;# 
  2710  019B                     	;# 
  2711  019B                     	;# 
  2712  019C                     	;# 
  2713  019C                     	;# 
  2714  019C                     	;# 
  2715  019D                     	;# 
  2716  019D                     	;# 
  2717  019D                     	;# 
  2718  019E                     	;# 
  2719  019E                     	;# 
  2720  019E                     	;# 
  2721  019F                     	;# 
  2722  019F                     	;# 
  2723  019F                     	;# 
  2724  019F                     	;# 
  2725  019F                     	;# 
  2726  020C                     	;# 
  2727  020D                     	;# 
  2728  020E                     	;# 
  2729  0211                     	;# 
  2730  0211                     	;# 
  2731  0212                     	;# 
  2732  0212                     	;# 
  2733  0213                     	;# 
  2734  0213                     	;# 
  2735  0214                     	;# 
  2736  0214                     	;# 
  2737  0215                     	;# 
  2738  0215                     	;# 
  2739  0215                     	;# 
  2740  0215                     	;# 
  2741  0216                     	;# 
  2742  0216                     	;# 
  2743  0217                     	;# 
  2744  0217                     	;# 
  2745  0219                     	;# 
  2746  021A                     	;# 
  2747  021B                     	;# 
  2748  021C                     	;# 
  2749  021D                     	;# 
  2750  021D                     	;# 
  2751  021E                     	;# 
  2752  021F                     	;# 
  2753  028C                     	;# 
  2754  028D                     	;# 
  2755  028E                     	;# 
  2756  0291                     	;# 
  2757  0291                     	;# 
  2758  0292                     	;# 
  2759  0293                     	;# 
  2760  0294                     	;# 
  2761  0295                     	;# 
  2762  0295                     	;# 
  2763  0296                     	;# 
  2764  0297                     	;# 
  2765  0298                     	;# 
  2766  029F                     	;# 
  2767  030C                     	;# 
  2768  030D                     	;# 
  2769  030E                     	;# 
  2770  0311                     	;# 
  2771  0311                     	;# 
  2772  0312                     	;# 
  2773  0313                     	;# 
  2774  0314                     	;# 
  2775  0315                     	;# 
  2776  0315                     	;# 
  2777  0316                     	;# 
  2778  0317                     	;# 
  2779  0318                     	;# 
  2780  038C                     	;# 
  2781  038D                     	;# 
  2782  038E                     	;# 
  2783  0391                     	;# 
  2784  0392                     	;# 
  2785  0393                     	;# 
  2786  0394                     	;# 
  2787  0395                     	;# 
  2788  0396                     	;# 
  2789  0397                     	;# 
  2790  0398                     	;# 
  2791  0399                     	;# 
  2792  039A                     	;# 
  2793  039C                     	;# 
  2794  039D                     	;# 
  2795  039E                     	;# 
  2796  039F                     	;# 
  2797  0411                     	;# 
  2798  0411                     	;# 
  2799  0412                     	;# 
  2800  0413                     	;# 
  2801  0414                     	;# 
  2802  0415                     	;# 
  2803  0416                     	;# 
  2804  0417                     	;# 
  2805  0418                     	;# 
  2806  0418                     	;# 
  2807  0419                     	;# 
  2808  041A                     	;# 
  2809  041B                     	;# 
  2810  041C                     	;# 
  2811  041D                     	;# 
  2812  041E                     	;# 
  2813  041F                     	;# 
  2814  0498                     	;# 
  2815  0498                     	;# 
  2816  0499                     	;# 
  2817  049A                     	;# 
  2818  049B                     	;# 
  2819  049B                     	;# 
  2820  049C                     	;# 
  2821  049D                     	;# 
  2822  049E                     	;# 
  2823  049F                     	;# 
  2824  0617                     	;# 
  2825  0618                     	;# 
  2826  0619                     	;# 
  2827  0619                     	;# 
  2828  061A                     	;# 
  2829  061B                     	;# 
  2830  061C                     	;# 
  2831  061C                     	;# 
  2832  061F                     	;# 
  2833  0691                     	;# 
  2834  0692                     	;# 
  2835  0693                     	;# 
  2836  0694                     	;# 
  2837  0695                     	;# 
  2838  0696                     	;# 
  2839  0697                     	;# 
  2840  0698                     	;# 
  2841  0699                     	;# 
  2842  0711                     	;# 
  2843  0712                     	;# 
  2844  0713                     	;# 
  2845  0714                     	;# 
  2846  0715                     	;# 
  2847  0716                     	;# 
  2848  0717                     	;# 
  2849  0718                     	;# 
  2850  0719                     	;# 
  2851  0891                     	;# 
  2852  0891                     	;# 
  2853  0891                     	;# 
  2854  0891                     	;# 
  2855  0891                     	;# 
  2856  0891                     	;# 
  2857  0892                     	;# 
  2858  0892                     	;# 
  2859  0892                     	;# 
  2860  0893                     	;# 
  2861  0893                     	;# 
  2862  0893                     	;# 
  2863  0893                     	;# 
  2864  0893                     	;# 
  2865  0893                     	;# 
  2866  0894                     	;# 
  2867  0894                     	;# 
  2868  0894                     	;# 
  2869  0895                     	;# 
  2870  0895                     	;# 
  2871  0895                     	;# 
  2872  0896                     	;# 
  2873  0896                     	;# 
  2874  0896                     	;# 
  2875  089B                     	;# 
  2876  0911                     	;# 
  2877  0912                     	;# 
  2878  0913                     	;# 
  2879  0914                     	;# 
  2880  0915                     	;# 
  2881  0916                     	;# 
  2882  0918                     	;# 
  2883  0919                     	;# 
  2884  091A                     	;# 
  2885  091B                     	;# 
  2886  091C                     	;# 
  2887  091D                     	;# 
  2888  091E                     	;# 
  2889  091F                     	;# 
  2890  0E0F                     	;# 
  2891  0E10                     	;# 
  2892  0E11                     	;# 
  2893  0E12                     	;# 
  2894  0E13                     	;# 
  2895  0E14                     	;# 
  2896  0E15                     	;# 
  2897  0E16                     	;# 
  2898  0E17                     	;# 
  2899  0E18                     	;# 
  2900  0E19                     	;# 
  2901  0E1A                     	;# 
  2902  0E1B                     	;# 
  2903  0E1C                     	;# 
  2904  0E1D                     	;# 
  2905  0E1E                     	;# 
  2906  0E1F                     	;# 
  2907  0E20                     	;# 
  2908  0E21                     	;# 
  2909  0E22                     	;# 
  2910  0E24                     	;# 
  2911  0E25                     	;# 
  2912  0E28                     	;# 
  2913  0E29                     	;# 
  2914  0E2A                     	;# 
  2915  0E2B                     	;# 
  2916  0E2C                     	;# 
  2917  0E2D                     	;# 
  2918  0E2E                     	;# 
  2919  0E2F                     	;# 
  2920  0E90                     	;# 
  2921  0E91                     	;# 
  2922  0E92                     	;# 
  2923  0E94                     	;# 
  2924  0E95                     	;# 
  2925  0E9C                     	;# 
  2926  0E9D                     	;# 
  2927  0E9E                     	;# 
  2928  0E9F                     	;# 
  2929  0EA0                     	;# 
  2930  0EA1                     	;# 
  2931  0EA2                     	;# 
  2932  0EA3                     	;# 
  2933  0EA4                     	;# 
  2934  0EA5                     	;# 
  2935  0EA6                     	;# 
  2936  0EA7                     	;# 
  2937  0F0F                     	;# 
  2938  0F10                     	;# 
  2939  0F11                     	;# 
  2940  0F12                     	;# 
  2941  0F13                     	;# 
  2942  0F14                     	;# 
  2943  0F15                     	;# 
  2944  0F16                     	;# 
  2945  0F17                     	;# 
  2946  0F18                     	;# 
  2947  0F19                     	;# 
  2948  0F1A                     	;# 
  2949  0F1B                     	;# 
  2950  0F1C                     	;# 
  2951  0F1D                     	;# 
  2952  0F1E                     	;# 
  2953  0F1F                     	;# 
  2954  0F20                     	;# 
  2955  0F21                     	;# 
  2956  0F22                     	;# 
  2957  0F23                     	;# 
  2958  0F24                     	;# 
  2959  0F25                     	;# 
  2960  0F26                     	;# 
  2961  0F27                     	;# 
  2962  0F28                     	;# 
  2963  0F29                     	;# 
  2964  0F2A                     	;# 
  2965  0F2B                     	;# 
  2966  0F2C                     	;# 
  2967  0F2D                     	;# 
  2968  0F2E                     	;# 
  2969  0F2F                     	;# 
  2970  0F30                     	;# 
  2971  0F31                     	;# 
  2972  0F32                     	;# 
  2973  0F33                     	;# 
  2974  0F34                     	;# 
  2975  0F35                     	;# 
  2976  0F36                     	;# 
  2977  0F37                     	;# 
  2978  0FE4                     	;# 
  2979  0FE5                     	;# 
  2980  0FE6                     	;# 
  2981  0FE7                     	;# 
  2982  0FE8                     	;# 
  2983  0FE9                     	;# 
  2984  0FEA                     	;# 
  2985  0FEB                     	;# 
  2986  0FED                     	;# 
  2987  0FEE                     	;# 
  2988  0FEF                     	;# 
  2989  0000                     	;# 
  2990  0001                     	;# 
  2991  0002                     	;# 
  2992  0003                     	;# 
  2993  0004                     	;# 
  2994  0005                     	;# 
  2995  0006                     	;# 
  2996  0007                     	;# 
  2997  0008                     	;# 
  2998  0009                     	;# 
  2999  000A                     	;# 
  3000  000B                     	;# 
  3001  000C                     	;# 
  3002  000D                     	;# 
  3003  000E                     	;# 
  3004  0010                     	;# 
  3005  0011                     	;# 
  3006  0012                     	;# 
  3007  0013                     	;# 
  3008  0014                     	;# 
  3009  0015                     	;# 
  3010  0015                     	;# 
  3011  0016                     	;# 
  3012  0016                     	;# 
  3013  0017                     	;# 
  3014  0018                     	;# 
  3015  0019                     	;# 
  3016  0019                     	;# 
  3017  001A                     	;# 
  3018  001B                     	;# 
  3019  001C                     	;# 
  3020  001D                     	;# 
  3021  001E                     	;# 
  3022  001F                     	;# 
  3023  008C                     	;# 
  3024  008D                     	;# 
  3025  008E                     	;# 
  3026  0090                     	;# 
  3027  0091                     	;# 
  3028  0092                     	;# 
  3029  0093                     	;# 
  3030  0094                     	;# 
  3031  0097                     	;# 
  3032  009B                     	;# 
  3033  009B                     	;# 
  3034  009C                     	;# 
  3035  009D                     	;# 
  3036  009E                     	;# 
  3037  009F                     	;# 
  3038  010C                     	;# 
  3039  010D                     	;# 
  3040  010E                     	;# 
  3041  0111                     	;# 
  3042  0112                     	;# 
  3043  0113                     	;# 
  3044  0114                     	;# 
  3045  0115                     	;# 
  3046  0116                     	;# 
  3047  0117                     	;# 
  3048  0118                     	;# 
  3049  0119                     	;# 
  3050  018C                     	;# 
  3051  018D                     	;# 
  3052  018E                     	;# 
  3053  0197                     	;# 
  3054  0199                     	;# 
  3055  0199                     	;# 
  3056  0199                     	;# 
  3057  019A                     	;# 
  3058  019A                     	;# 
  3059  019A                     	;# 
  3060  019B                     	;# 
  3061  019B                     	;# 
  3062  019B                     	;# 
  3063  019B                     	;# 
  3064  019B                     	;# 
  3065  019C                     	;# 
  3066  019C                     	;# 
  3067  019C                     	;# 
  3068  019D                     	;# 
  3069  019D                     	;# 
  3070  019D                     	;# 
  3071  019E                     	;# 
  3072  019E                     	;# 
  3073  019E                     	;# 
  3074  019F                     	;# 
  3075  019F                     	;# 
  3076  019F                     	;# 
  3077  019F                     	;# 
  3078  019F                     	;# 
  3079  020C                     	;# 
  3080  020D                     	;# 
  3081  020E                     	;# 
  3082  0211                     	;# 
  3083  0211                     	;# 
  3084  0212                     	;# 
  3085  0212                     	;# 
  3086  0213                     	;# 
  3087  0213                     	;# 
  3088  0214                     	;# 
  3089  0214                     	;# 
  3090  0215                     	;# 
  3091  0215                     	;# 
  3092  0215                     	;# 
  3093  0215                     	;# 
  3094  0216                     	;# 
  3095  0216                     	;# 
  3096  0217                     	;# 
  3097  0217                     	;# 
  3098  0219                     	;# 
  3099  021A                     	;# 
  3100  021B                     	;# 
  3101  021C                     	;# 
  3102  021D                     	;# 
  3103  021D                     	;# 
  3104  021E                     	;# 
  3105  021F                     	;# 
  3106  028C                     	;# 
  3107  028D                     	;# 
  3108  028E                     	;# 
  3109  0291                     	;# 
  3110  0291                     	;# 
  3111  0292                     	;# 
  3112  0293                     	;# 
  3113  0294                     	;# 
  3114  0295                     	;# 
  3115  0295                     	;# 
  3116  0296                     	;# 
  3117  0297                     	;# 
  3118  0298                     	;# 
  3119  029F                     	;# 
  3120  030C                     	;# 
  3121  030D                     	;# 
  3122  030E                     	;# 
  3123  0311                     	;# 
  3124  0311                     	;# 
  3125  0312                     	;# 
  3126  0313                     	;# 
  3127  0314                     	;# 
  3128  0315                     	;# 
  3129  0315                     	;# 
  3130  0316                     	;# 
  3131  0317                     	;# 
  3132  0318                     	;# 
  3133  038C                     	;# 
  3134  038D                     	;# 
  3135  038E                     	;# 
  3136  0391                     	;# 
  3137  0392                     	;# 
  3138  0393                     	;# 
  3139  0394                     	;# 
  3140  0395                     	;# 
  3141  0396                     	;# 
  3142  0397                     	;# 
  3143  0398                     	;# 
  3144  0399                     	;# 
  3145  039A                     	;# 
  3146  039C                     	;# 
  3147  039D                     	;# 
  3148  039E                     	;# 
  3149  039F                     	;# 
  3150  0411                     	;# 
  3151  0411                     	;# 
  3152  0412                     	;# 
  3153  0413                     	;# 
  3154  0414                     	;# 
  3155  0415                     	;# 
  3156  0416                     	;# 
  3157  0417                     	;# 
  3158  0418                     	;# 
  3159  0418                     	;# 
  3160  0419                     	;# 
  3161  041A                     	;# 
  3162  041B                     	;# 
  3163  041C                     	;# 
  3164  041D                     	;# 
  3165  041E                     	;# 
  3166  041F                     	;# 
  3167  0498                     	;# 
  3168  0498                     	;# 
  3169  0499                     	;# 
  3170  049A                     	;# 
  3171  049B                     	;# 
  3172  049B                     	;# 
  3173  049C                     	;# 
  3174  049D                     	;# 
  3175  049E                     	;# 
  3176  049F                     	;# 
  3177  0617                     	;# 
  3178  0618                     	;# 
  3179  0619                     	;# 
  3180  0619                     	;# 
  3181  061A                     	;# 
  3182  061B                     	;# 
  3183  061C                     	;# 
  3184  061C                     	;# 
  3185  061F                     	;# 
  3186  0691                     	;# 
  3187  0692                     	;# 
  3188  0693                     	;# 
  3189  0694                     	;# 
  3190  0695                     	;# 
  3191  0696                     	;# 
  3192  0697                     	;# 
  3193  0698                     	;# 
  3194  0699                     	;# 
  3195  0711                     	;# 
  3196  0712                     	;# 
  3197  0713                     	;# 
  3198  0714                     	;# 
  3199  0715                     	;# 
  3200  0716                     	;# 
  3201  0717                     	;# 
  3202  0718                     	;# 
  3203  0719                     	;# 
  3204  0891                     	;# 
  3205  0891                     	;# 
  3206  0891                     	;# 
  3207  0891                     	;# 
  3208  0891                     	;# 
  3209  0891                     	;# 
  3210  0892                     	;# 
  3211  0892                     	;# 
  3212  0892                     	;# 
  3213  0893                     	;# 
  3214  0893                     	;# 
  3215  0893                     	;# 
  3216  0893                     	;# 
  3217  0893                     	;# 
  3218  0893                     	;# 
  3219  0894                     	;# 
  3220  0894                     	;# 
  3221  0894                     	;# 
  3222  0895                     	;# 
  3223  0895                     	;# 
  3224  0895                     	;# 
  3225  0896                     	;# 
  3226  0896                     	;# 
  3227  0896                     	;# 
  3228  089B                     	;# 
  3229  0911                     	;# 
  3230  0912                     	;# 
  3231  0913                     	;# 
  3232  0914                     	;# 
  3233  0915                     	;# 
  3234  0916                     	;# 
  3235  0918                     	;# 
  3236  0919                     	;# 
  3237  091A                     	;# 
  3238  091B                     	;# 
  3239  091C                     	;# 
  3240  091D                     	;# 
  3241  091E                     	;# 
  3242  091F                     	;# 
  3243  0E0F                     	;# 
  3244  0E10                     	;# 
  3245  0E11                     	;# 
  3246  0E12                     	;# 
  3247  0E13                     	;# 
  3248  0E14                     	;# 
  3249  0E15                     	;# 
  3250  0E16                     	;# 
  3251  0E17                     	;# 
  3252  0E18                     	;# 
  3253  0E19                     	;# 
  3254  0E1A                     	;# 
  3255  0E1B                     	;# 
  3256  0E1C                     	;# 
  3257  0E1D                     	;# 
  3258  0E1E                     	;# 
  3259  0E1F                     	;# 
  3260  0E20                     	;# 
  3261  0E21                     	;# 
  3262  0E22                     	;# 
  3263  0E24                     	;# 
  3264  0E25                     	;# 
  3265  0E28                     	;# 
  3266  0E29                     	;# 
  3267  0E2A                     	;# 
  3268  0E2B                     	;# 
  3269  0E2C                     	;# 
  3270  0E2D                     	;# 
  3271  0E2E                     	;# 
  3272  0E2F                     	;# 
  3273  0E90                     	;# 
  3274  0E91                     	;# 
  3275  0E92                     	;# 
  3276  0E94                     	;# 
  3277  0E95                     	;# 
  3278  0E9C                     	;# 
  3279  0E9D                     	;# 
  3280  0E9E                     	;# 
  3281  0E9F                     	;# 
  3282  0EA0                     	;# 
  3283  0EA1                     	;# 
  3284  0EA2                     	;# 
  3285  0EA3                     	;# 
  3286  0EA4                     	;# 
  3287  0EA5                     	;# 
  3288  0EA6                     	;# 
  3289  0EA7                     	;# 
  3290  0F0F                     	;# 
  3291  0F10                     	;# 
  3292  0F11                     	;# 
  3293  0F12                     	;# 
  3294  0F13                     	;# 
  3295  0F14                     	;# 
  3296  0F15                     	;# 
  3297  0F16                     	;# 
  3298  0F17                     	;# 
  3299  0F18                     	;# 
  3300  0F19                     	;# 
  3301  0F1A                     	;# 
  3302  0F1B                     	;# 
  3303  0F1C                     	;# 
  3304  0F1D                     	;# 
  3305  0F1E                     	;# 
  3306  0F1F                     	;# 
  3307  0F20                     	;# 
  3308  0F21                     	;# 
  3309  0F22                     	;# 
  3310  0F23                     	;# 
  3311  0F24                     	;# 
  3312  0F25                     	;# 
  3313  0F26                     	;# 
  3314  0F27                     	;# 
  3315  0F28                     	;# 
  3316  0F29                     	;# 
  3317  0F2A                     	;# 
  3318  0F2B                     	;# 
  3319  0F2C                     	;# 
  3320  0F2D                     	;# 
  3321  0F2E                     	;# 
  3322  0F2F                     	;# 
  3323  0F30                     	;# 
  3324  0F31                     	;# 
  3325  0F32                     	;# 
  3326  0F33                     	;# 
  3327  0F34                     	;# 
  3328  0F35                     	;# 
  3329  0F36                     	;# 
  3330  0F37                     	;# 
  3331  0FE4                     	;# 
  3332  0FE5                     	;# 
  3333  0FE6                     	;# 
  3334  0FE7                     	;# 
  3335  0FE8                     	;# 
  3336  0FE9                     	;# 
  3337  0FEA                     	;# 
  3338  0FEB                     	;# 
  3339  0FED                     	;# 
  3340  0FEE                     	;# 
  3341  0FEF                     	;# 
  3342  0000                     	;# 
  3343  0001                     	;# 
  3344  0002                     	;# 
  3345  0003                     	;# 
  3346  0004                     	;# 
  3347  0005                     	;# 
  3348  0006                     	;# 
  3349  0007                     	;# 
  3350  0008                     	;# 
  3351  0009                     	;# 
  3352  000A                     	;# 
  3353  000B                     	;# 
  3354  000C                     	;# 
  3355  000D                     	;# 
  3356  000E                     	;# 
  3357  0010                     	;# 
  3358  0011                     	;# 
  3359  0012                     	;# 
  3360  0013                     	;# 
  3361  0014                     	;# 
  3362  0015                     	;# 
  3363  0015                     	;# 
  3364  0016                     	;# 
  3365  0016                     	;# 
  3366  0017                     	;# 
  3367  0018                     	;# 
  3368  0019                     	;# 
  3369  0019                     	;# 
  3370  001A                     	;# 
  3371  001B                     	;# 
  3372  001C                     	;# 
  3373  001D                     	;# 
  3374  001E                     	;# 
  3375  001F                     	;# 
  3376  008C                     	;# 
  3377  008D                     	;# 
  3378  008E                     	;# 
  3379  0090                     	;# 
  3380  0091                     	;# 
  3381  0092                     	;# 
  3382  0093                     	;# 
  3383  0094                     	;# 
  3384  0097                     	;# 
  3385  009B                     	;# 
  3386  009B                     	;# 
  3387  009C                     	;# 
  3388  009D                     	;# 
  3389  009E                     	;# 
  3390  009F                     	;# 
  3391  010C                     	;# 
  3392  010D                     	;# 
  3393  010E                     	;# 
  3394  0111                     	;# 
  3395  0112                     	;# 
  3396  0113                     	;# 
  3397  0114                     	;# 
  3398  0115                     	;# 
  3399  0116                     	;# 
  3400  0117                     	;# 
  3401  0118                     	;# 
  3402  0119                     	;# 
  3403  018C                     	;# 
  3404  018D                     	;# 
  3405  018E                     	;# 
  3406  0197                     	;# 
  3407  0199                     	;# 
  3408  0199                     	;# 
  3409  0199                     	;# 
  3410  019A                     	;# 
  3411  019A                     	;# 
  3412  019A                     	;# 
  3413  019B                     	;# 
  3414  019B                     	;# 
  3415  019B                     	;# 
  3416  019B                     	;# 
  3417  019B                     	;# 
  3418  019C                     	;# 
  3419  019C                     	;# 
  3420  019C                     	;# 
  3421  019D                     	;# 
  3422  019D                     	;# 
  3423  019D                     	;# 
  3424  019E                     	;# 
  3425  019E                     	;# 
  3426  019E                     	;# 
  3427  019F                     	;# 
  3428  019F                     	;# 
  3429  019F                     	;# 
  3430  019F                     	;# 
  3431  019F                     	;# 
  3432  020C                     	;# 
  3433  020D                     	;# 
  3434  020E                     	;# 
  3435  0211                     	;# 
  3436  0211                     	;# 
  3437  0212                     	;# 
  3438  0212                     	;# 
  3439  0213                     	;# 
  3440  0213                     	;# 
  3441  0214                     	;# 
  3442  0214                     	;# 
  3443  0215                     	;# 
  3444  0215                     	;# 
  3445  0215                     	;# 
  3446  0215                     	;# 
  3447  0216                     	;# 
  3448  0216                     	;# 
  3449  0217                     	;# 
  3450  0217                     	;# 
  3451  0219                     	;# 
  3452  021A                     	;# 
  3453  021B                     	;# 
  3454  021C                     	;# 
  3455  021D                     	;# 
  3456  021D                     	;# 
  3457  021E                     	;# 
  3458  021F                     	;# 
  3459  028C                     	;# 
  3460  028D                     	;# 
  3461  028E                     	;# 
  3462  0291                     	;# 
  3463  0291                     	;# 
  3464  0292                     	;# 
  3465  0293                     	;# 
  3466  0294                     	;# 
  3467  0295                     	;# 
  3468  0295                     	;# 
  3469  0296                     	;# 
  3470  0297                     	;# 
  3471  0298                     	;# 
  3472  029F                     	;# 
  3473  030C                     	;# 
  3474  030D                     	;# 
  3475  030E                     	;# 
  3476  0311                     	;# 
  3477  0311                     	;# 
  3478  0312                     	;# 
  3479  0313                     	;# 
  3480  0314                     	;# 
  3481  0315                     	;# 
  3482  0315                     	;# 
  3483  0316                     	;# 
  3484  0317                     	;# 
  3485  0318                     	;# 
  3486  038C                     	;# 
  3487  038D                     	;# 
  3488  038E                     	;# 
  3489  0391                     	;# 
  3490  0392                     	;# 
  3491  0393                     	;# 
  3492  0394                     	;# 
  3493  0395                     	;# 
  3494  0396                     	;# 
  3495  0397                     	;# 
  3496  0398                     	;# 
  3497  0399                     	;# 
  3498  039A                     	;# 
  3499  039C                     	;# 
  3500  039D                     	;# 
  3501  039E                     	;# 
  3502  039F                     	;# 
  3503  0411                     	;# 
  3504  0411                     	;# 
  3505  0412                     	;# 
  3506  0413                     	;# 
  3507  0414                     	;# 
  3508  0415                     	;# 
  3509  0416                     	;# 
  3510  0417                     	;# 
  3511  0418                     	;# 
  3512  0418                     	;# 
  3513  0419                     	;# 
  3514  041A                     	;# 
  3515  041B                     	;# 
  3516  041C                     	;# 
  3517  041D                     	;# 
  3518  041E                     	;# 
  3519  041F                     	;# 
  3520  0498                     	;# 
  3521  0498                     	;# 
  3522  0499                     	;# 
  3523  049A                     	;# 
  3524  049B                     	;# 
  3525  049B                     	;# 
  3526  049C                     	;# 
  3527  049D                     	;# 
  3528  049E                     	;# 
  3529  049F                     	;# 
  3530  0617                     	;# 
  3531  0618                     	;# 
  3532  0619                     	;# 
  3533  0619                     	;# 
  3534  061A                     	;# 
  3535  061B                     	;# 
  3536  061C                     	;# 
  3537  061C                     	;# 
  3538  061F                     	;# 
  3539  0691                     	;# 
  3540  0692                     	;# 
  3541  0693                     	;# 
  3542  0694                     	;# 
  3543  0695                     	;# 
  3544  0696                     	;# 
  3545  0697                     	;# 
  3546  0698                     	;# 
  3547  0699                     	;# 
  3548  0711                     	;# 
  3549  0712                     	;# 
  3550  0713                     	;# 
  3551  0714                     	;# 
  3552  0715                     	;# 
  3553  0716                     	;# 
  3554  0717                     	;# 
  3555  0718                     	;# 
  3556  0719                     	;# 
  3557  0891                     	;# 
  3558  0891                     	;# 
  3559  0891                     	;# 
  3560  0891                     	;# 
  3561  0891                     	;# 
  3562  0891                     	;# 
  3563  0892                     	;# 
  3564  0892                     	;# 
  3565  0892                     	;# 
  3566  0893                     	;# 
  3567  0893                     	;# 
  3568  0893                     	;# 
  3569  0893                     	;# 
  3570  0893                     	;# 
  3571  0893                     	;# 
  3572  0894                     	;# 
  3573  0894                     	;# 
  3574  0894                     	;# 
  3575  0895                     	;# 
  3576  0895                     	;# 
  3577  0895                     	;# 
  3578  0896                     	;# 
  3579  0896                     	;# 
  3580  0896                     	;# 
  3581  089B                     	;# 
  3582  0911                     	;# 
  3583  0912                     	;# 
  3584  0913                     	;# 
  3585  0914                     	;# 
  3586  0915                     	;# 
  3587  0916                     	;# 
  3588  0918                     	;# 
  3589  0919                     	;# 
  3590  091A                     	;# 
  3591  091B                     	;# 
  3592  091C                     	;# 
  3593  091D                     	;# 
  3594  091E                     	;# 
  3595  091F                     	;# 
  3596  0E0F                     	;# 
  3597  0E10                     	;# 
  3598  0E11                     	;# 
  3599  0E12                     	;# 
  3600  0E13                     	;# 
  3601  0E14                     	;# 
  3602  0E15                     	;# 
  3603  0E16                     	;# 
  3604  0E17                     	;# 
  3605  0E18                     	;# 
  3606  0E19                     	;# 
  3607  0E1A                     	;# 
  3608  0E1B                     	;# 
  3609  0E1C                     	;# 
  3610  0E1D                     	;# 
  3611  0E1E                     	;# 
  3612  0E1F                     	;# 
  3613  0E20                     	;# 
  3614  0E21                     	;# 
  3615  0E22                     	;# 
  3616  0E24                     	;# 
  3617  0E25                     	;# 
  3618  0E28                     	;# 
  3619  0E29                     	;# 
  3620  0E2A                     	;# 
  3621  0E2B                     	;# 
  3622  0E2C                     	;# 
  3623  0E2D                     	;# 
  3624  0E2E                     	;# 
  3625  0E2F                     	;# 
  3626  0E90                     	;# 
  3627  0E91                     	;# 
  3628  0E92                     	;# 
  3629  0E94                     	;# 
  3630  0E95                     	;# 
  3631  0E9C                     	;# 
  3632  0E9D                     	;# 
  3633  0E9E                     	;# 
  3634  0E9F                     	;# 
  3635  0EA0                     	;# 
  3636  0EA1                     	;# 
  3637  0EA2                     	;# 
  3638  0EA3                     	;# 
  3639  0EA4                     	;# 
  3640  0EA5                     	;# 
  3641  0EA6                     	;# 
  3642  0EA7                     	;# 
  3643  0F0F                     	;# 
  3644  0F10                     	;# 
  3645  0F11                     	;# 
  3646  0F12                     	;# 
  3647  0F13                     	;# 
  3648  0F14                     	;# 
  3649  0F15                     	;# 
  3650  0F16                     	;# 
  3651  0F17                     	;# 
  3652  0F18                     	;# 
  3653  0F19                     	;# 
  3654  0F1A                     	;# 
  3655  0F1B                     	;# 
  3656  0F1C                     	;# 
  3657  0F1D                     	;# 
  3658  0F1E                     	;# 
  3659  0F1F                     	;# 
  3660  0F20                     	;# 
  3661  0F21                     	;# 
  3662  0F22                     	;# 
  3663  0F23                     	;# 
  3664  0F24                     	;# 
  3665  0F25                     	;# 
  3666  0F26                     	;# 
  3667  0F27                     	;# 
  3668  0F28                     	;# 
  3669  0F29                     	;# 
  3670  0F2A                     	;# 
  3671  0F2B                     	;# 
  3672  0F2C                     	;# 
  3673  0F2D                     	;# 
  3674  0F2E                     	;# 
  3675  0F2F                     	;# 
  3676  0F30                     	;# 
  3677  0F31                     	;# 
  3678  0F32                     	;# 
  3679  0F33                     	;# 
  3680  0F34                     	;# 
  3681  0F35                     	;# 
  3682  0F36                     	;# 
  3683  0F37                     	;# 
  3684  0FE4                     	;# 
  3685  0FE5                     	;# 
  3686  0FE6                     	;# 
  3687  0FE7                     	;# 
  3688  0FE8                     	;# 
  3689  0FE9                     	;# 
  3690  0FEA                     	;# 
  3691  0FEB                     	;# 
  3692  0FED                     	;# 
  3693  0FEE                     	;# 
  3694  0FEF                     	;# 
  3695  0000                     	;# 
  3696  0001                     	;# 
  3697  0002                     	;# 
  3698  0003                     	;# 
  3699  0004                     	;# 
  3700  0005                     	;# 
  3701  0006                     	;# 
  3702  0007                     	;# 
  3703  0008                     	;# 
  3704  0009                     	;# 
  3705  000A                     	;# 
  3706  000B                     	;# 
  3707  000C                     	;# 
  3708  000D                     	;# 
  3709  000E                     	;# 
  3710  0010                     	;# 
  3711  0011                     	;# 
  3712  0012                     	;# 
  3713  0013                     	;# 
  3714  0014                     	;# 
  3715  0015                     	;# 
  3716  0015                     	;# 
  3717  0016                     	;# 
  3718  0016                     	;# 
  3719  0017                     	;# 
  3720  0018                     	;# 
  3721  0019                     	;# 
  3722  0019                     	;# 
  3723  001A                     	;# 
  3724  001B                     	;# 
  3725  001C                     	;# 
  3726  001D                     	;# 
  3727  001E                     	;# 
  3728  001F                     	;# 
  3729  008C                     	;# 
  3730  008D                     	;# 
  3731  008E                     	;# 
  3732  0090                     	;# 
  3733  0091                     	;# 
  3734  0092                     	;# 
  3735  0093                     	;# 
  3736  0094                     	;# 
  3737  0097                     	;# 
  3738  009B                     	;# 
  3739  009B                     	;# 
  3740  009C                     	;# 
  3741  009D                     	;# 
  3742  009E                     	;# 
  3743  009F                     	;# 
  3744  010C                     	;# 
  3745  010D                     	;# 
  3746  010E                     	;# 
  3747  0111                     	;# 
  3748  0112                     	;# 
  3749  0113                     	;# 
  3750  0114                     	;# 
  3751  0115                     	;# 
  3752  0116                     	;# 
  3753  0117                     	;# 
  3754  0118                     	;# 
  3755  0119                     	;# 
  3756  018C                     	;# 
  3757  018D                     	;# 
  3758  018E                     	;# 
  3759  0197                     	;# 
  3760  0199                     	;# 
  3761  0199                     	;# 
  3762  0199                     	;# 
  3763  019A                     	;# 
  3764  019A                     	;# 
  3765  019A                     	;# 
  3766  019B                     	;# 
  3767  019B                     	;# 
  3768  019B                     	;# 
  3769  019B                     	;# 
  3770  019B                     	;# 
  3771  019C                     	;# 
  3772  019C                     	;# 
  3773  019C                     	;# 
  3774  019D                     	;# 
  3775  019D                     	;# 
  3776  019D                     	;# 
  3777  019E                     	;# 
  3778  019E                     	;# 
  3779  019E                     	;# 
  3780  019F                     	;# 
  3781  019F                     	;# 
  3782  019F                     	;# 
  3783  019F                     	;# 
  3784  019F                     	;# 
  3785  020C                     	;# 
  3786  020D                     	;# 
  3787  020E                     	;# 
  3788  0211                     	;# 
  3789  0211                     	;# 
  3790  0212                     	;# 
  3791  0212                     	;# 
  3792  0213                     	;# 
  3793  0213                     	;# 
  3794  0214                     	;# 
  3795  0214                     	;# 
  3796  0215                     	;# 
  3797  0215                     	;# 
  3798  0215                     	;# 
  3799  0215                     	;# 
  3800  0216                     	;# 
  3801  0216                     	;# 
  3802  0217                     	;# 
  3803  0217                     	;# 
  3804  0219                     	;# 
  3805  021A                     	;# 
  3806  021B                     	;# 
  3807  021C                     	;# 
  3808  021D                     	;# 
  3809  021D                     	;# 
  3810  021E                     	;# 
  3811  021F                     	;# 
  3812  028C                     	;# 
  3813  028D                     	;# 
  3814  028E                     	;# 
  3815  0291                     	;# 
  3816  0291                     	;# 
  3817  0292                     	;# 
  3818  0293                     	;# 
  3819  0294                     	;# 
  3820  0295                     	;# 
  3821  0295                     	;# 
  3822  0296                     	;# 
  3823  0297                     	;# 
  3824  0298                     	;# 
  3825  029F                     	;# 
  3826  030C                     	;# 
  3827  030D                     	;# 
  3828  030E                     	;# 
  3829  0311                     	;# 
  3830  0311                     	;# 
  3831  0312                     	;# 
  3832  0313                     	;# 
  3833  0314                     	;# 
  3834  0315                     	;# 
  3835  0315                     	;# 
  3836  0316                     	;# 
  3837  0317                     	;# 
  3838  0318                     	;# 
  3839  038C                     	;# 
  3840  038D                     	;# 
  3841  038E                     	;# 
  3842  0391                     	;# 
  3843  0392                     	;# 
  3844  0393                     	;# 
  3845  0394                     	;# 
  3846  0395                     	;# 
  3847  0396                     	;# 
  3848  0397                     	;# 
  3849  0398                     	;# 
  3850  0399                     	;# 
  3851  039A                     	;# 
  3852  039C                     	;# 
  3853  039D                     	;# 
  3854  039E                     	;# 
  3855  039F                     	;# 
  3856  0411                     	;# 
  3857  0411                     	;# 
  3858  0412                     	;# 
  3859  0413                     	;# 
  3860  0414                     	;# 
  3861  0415                     	;# 
  3862  0416                     	;# 
  3863  0417                     	;# 
  3864  0418                     	;# 
  3865  0418                     	;# 
  3866  0419                     	;# 
  3867  041A                     	;# 
  3868  041B                     	;# 
  3869  041C                     	;# 
  3870  041D                     	;# 
  3871  041E                     	;# 
  3872  041F                     	;# 
  3873  0498                     	;# 
  3874  0498                     	;# 
  3875  0499                     	;# 
  3876  049A                     	;# 
  3877  049B                     	;# 
  3878  049B                     	;# 
  3879  049C                     	;# 
  3880  049D                     	;# 
  3881  049E                     	;# 
  3882  049F                     	;# 
  3883  0617                     	;# 
  3884  0618                     	;# 
  3885  0619                     	;# 
  3886  0619                     	;# 
  3887  061A                     	;# 
  3888  061B                     	;# 
  3889  061C                     	;# 
  3890  061C                     	;# 
  3891  061F                     	;# 
  3892  0691                     	;# 
  3893  0692                     	;# 
  3894  0693                     	;# 
  3895  0694                     	;# 
  3896  0695                     	;# 
  3897  0696                     	;# 
  3898  0697                     	;# 
  3899  0698                     	;# 
  3900  0699                     	;# 
  3901  0711                     	;# 
  3902  0712                     	;# 
  3903  0713                     	;# 
  3904  0714                     	;# 
  3905  0715                     	;# 
  3906  0716                     	;# 
  3907  0717                     	;# 
  3908  0718                     	;# 
  3909  0719                     	;# 
  3910  0891                     	;# 
  3911  0891                     	;# 
  3912  0891                     	;# 
  3913  0891                     	;# 
  3914  0891                     	;# 
  3915  0891                     	;# 
  3916  0892                     	;# 
  3917  0892                     	;# 
  3918  0892                     	;# 
  3919  0893                     	;# 
  3920  0893                     	;# 
  3921  0893                     	;# 
  3922  0893                     	;# 
  3923  0893                     	;# 
  3924  0893                     	;# 
  3925  0894                     	;# 
  3926  0894                     	;# 
  3927  0894                     	;# 
  3928  0895                     	;# 
  3929  0895                     	;# 
  3930  0895                     	;# 
  3931  0896                     	;# 
  3932  0896                     	;# 
  3933  0896                     	;# 
  3934  089B                     	;# 
  3935  0911                     	;# 
  3936  0912                     	;# 
  3937  0913                     	;# 
  3938  0914                     	;# 
  3939  0915                     	;# 
  3940  0916                     	;# 
  3941  0918                     	;# 
  3942  0919                     	;# 
  3943  091A                     	;# 
  3944  091B                     	;# 
  3945  091C                     	;# 
  3946  091D                     	;# 
  3947  091E                     	;# 
  3948  091F                     	;# 
  3949  0E0F                     	;# 
  3950  0E10                     	;# 
  3951  0E11                     	;# 
  3952  0E12                     	;# 
  3953  0E13                     	;# 
  3954  0E14                     	;# 
  3955  0E15                     	;# 
  3956  0E16                     	;# 
  3957  0E17                     	;# 
  3958  0E18                     	;# 
  3959  0E19                     	;# 
  3960  0E1A                     	;# 
  3961  0E1B                     	;# 
  3962  0E1C                     	;# 
  3963  0E1D                     	;# 
  3964  0E1E                     	;# 
  3965  0E1F                     	;# 
  3966  0E20                     	;# 
  3967  0E21                     	;# 
  3968  0E22                     	;# 
  3969  0E24                     	;# 
  3970  0E25                     	;# 
  3971  0E28                     	;# 
  3972  0E29                     	;# 
  3973  0E2A                     	;# 
  3974  0E2B                     	;# 
  3975  0E2C                     	;# 
  3976  0E2D                     	;# 
  3977  0E2E                     	;# 
  3978  0E2F                     	;# 
  3979  0E90                     	;# 
  3980  0E91                     	;# 
  3981  0E92                     	;# 
  3982  0E94                     	;# 
  3983  0E95                     	;# 
  3984  0E9C                     	;# 
  3985  0E9D                     	;# 
  3986  0E9E                     	;# 
  3987  0E9F                     	;# 
  3988  0EA0                     	;# 
  3989  0EA1                     	;# 
  3990  0EA2                     	;# 
  3991  0EA3                     	;# 
  3992  0EA4                     	;# 
  3993  0EA5                     	;# 
  3994  0EA6                     	;# 
  3995  0EA7                     	;# 
  3996  0F0F                     	;# 
  3997  0F10                     	;# 
  3998  0F11                     	;# 
  3999  0F12                     	;# 
  4000  0F13                     	;# 
  4001  0F14                     	;# 
  4002  0F15                     	;# 
  4003  0F16                     	;# 
  4004  0F17                     	;# 
  4005  0F18                     	;# 
  4006  0F19                     	;# 
  4007  0F1A                     	;# 
  4008  0F1B                     	;# 
  4009  0F1C                     	;# 
  4010  0F1D                     	;# 
  4011  0F1E                     	;# 
  4012  0F1F                     	;# 
  4013  0F20                     	;# 
  4014  0F21                     	;# 
  4015  0F22                     	;# 
  4016  0F23                     	;# 
  4017  0F24                     	;# 
  4018  0F25                     	;# 
  4019  0F26                     	;# 
  4020  0F27                     	;# 
  4021  0F28                     	;# 
  4022  0F29                     	;# 
  4023  0F2A                     	;# 
  4024  0F2B                     	;# 
  4025  0F2C                     	;# 
  4026  0F2D                     	;# 
  4027  0F2E                     	;# 
  4028  0F2F                     	;# 
  4029  0F30                     	;# 
  4030  0F31                     	;# 
  4031  0F32                     	;# 
  4032  0F33                     	;# 
  4033  0F34                     	;# 
  4034  0F35                     	;# 
  4035  0F36                     	;# 
  4036  0F37                     	;# 
  4037  0FE4                     	;# 
  4038  0FE5                     	;# 
  4039  0FE6                     	;# 
  4040  0FE7                     	;# 
  4041  0FE8                     	;# 
  4042  0FE9                     	;# 
  4043  0FEA                     	;# 
  4044  0FEB                     	;# 
  4045  0FED                     	;# 
  4046  0FEE                     	;# 
  4047  0FEF                     	;# 
  4048  0000                     	;# 
  4049  0001                     	;# 
  4050  0002                     	;# 
  4051  0003                     	;# 
  4052  0004                     	;# 
  4053  0005                     	;# 
  4054  0006                     	;# 
  4055  0007                     	;# 
  4056  0008                     	;# 
  4057  0009                     	;# 
  4058  000A                     	;# 
  4059  000B                     	;# 
  4060  000C                     	;# 
  4061  000D                     	;# 
  4062  000E                     	;# 
  4063  0010                     	;# 
  4064  0011                     	;# 
  4065  0012                     	;# 
  4066  0013                     	;# 
  4067  0014                     	;# 
  4068  0015                     	;# 
  4069  0015                     	;# 
  4070  0016                     	;# 
  4071  0016                     	;# 
  4072  0017                     	;# 
  4073  0018                     	;# 
  4074  0019                     	;# 
  4075  0019                     	;# 
  4076  001A                     	;# 
  4077  001B                     	;# 
  4078  001C                     	;# 
  4079  001D                     	;# 
  4080  001E                     	;# 
  4081  001F                     	;# 
  4082  008C                     	;# 
  4083  008D                     	;# 
  4084  008E                     	;# 
  4085  0090                     	;# 
  4086  0091                     	;# 
  4087  0092                     	;# 
  4088  0093                     	;# 
  4089  0094                     	;# 
  4090  0097                     	;# 
  4091  009B                     	;# 
  4092  009B                     	;# 
  4093  009C                     	;# 
  4094  009D                     	;# 
  4095  009E                     	;# 
  4096  009F                     	;# 
  4097  010C                     	;# 
  4098  010D                     	;# 
  4099  010E                     	;# 
  4100  0111                     	;# 
  4101  0112                     	;# 
  4102  0113                     	;# 
  4103  0114                     	;# 
  4104  0115                     	;# 
  4105  0116                     	;# 
  4106  0117                     	;# 
  4107  0118                     	;# 
  4108  0119                     	;# 
  4109  018C                     	;# 
  4110  018D                     	;# 
  4111  018E                     	;# 
  4112  0197                     	;# 
  4113  0199                     	;# 
  4114  0199                     	;# 
  4115  0199                     	;# 
  4116  019A                     	;# 
  4117  019A                     	;# 
  4118  019A                     	;# 
  4119  019B                     	;# 
  4120  019B                     	;# 
  4121  019B                     	;# 
  4122  019B                     	;# 
  4123  019B                     	;# 
  4124  019C                     	;# 
  4125  019C                     	;# 
  4126  019C                     	;# 
  4127  019D                     	;# 
  4128  019D                     	;# 
  4129  019D                     	;# 
  4130  019E                     	;# 
  4131  019E                     	;# 
  4132  019E                     	;# 
  4133  019F                     	;# 
  4134  019F                     	;# 
  4135  019F                     	;# 
  4136  019F                     	;# 
  4137  019F                     	;# 
  4138  020C                     	;# 
  4139  020D                     	;# 
  4140  020E                     	;# 
  4141  0211                     	;# 
  4142  0211                     	;# 
  4143  0212                     	;# 
  4144  0212                     	;# 
  4145  0213                     	;# 
  4146  0213                     	;# 
  4147  0214                     	;# 
  4148  0214                     	;# 
  4149  0215                     	;# 
  4150  0215                     	;# 
  4151  0215                     	;# 
  4152  0215                     	;# 
  4153  0216                     	;# 
  4154  0216                     	;# 
  4155  0217                     	;# 
  4156  0217                     	;# 
  4157  0219                     	;# 
  4158  021A                     	;# 
  4159  021B                     	;# 
  4160  021C                     	;# 
  4161  021D                     	;# 
  4162  021D                     	;# 
  4163  021E                     	;# 
  4164  021F                     	;# 
  4165  028C                     	;# 
  4166  028D                     	;# 
  4167  028E                     	;# 
  4168  0291                     	;# 
  4169  0291                     	;# 
  4170  0292                     	;# 
  4171  0293                     	;# 
  4172  0294                     	;# 
  4173  0295                     	;# 
  4174  0295                     	;# 
  4175  0296                     	;# 
  4176  0297                     	;# 
  4177  0298                     	;# 
  4178  029F                     	;# 
  4179  030C                     	;# 
  4180  030D                     	;# 
  4181  030E                     	;# 
  4182  0311                     	;# 
  4183  0311                     	;# 
  4184  0312                     	;# 
  4185  0313                     	;# 
  4186  0314                     	;# 
  4187  0315                     	;# 
  4188  0315                     	;# 
  4189  0316                     	;# 
  4190  0317                     	;# 
  4191  0318                     	;# 
  4192  038C                     	;# 
  4193  038D                     	;# 
  4194  038E                     	;# 
  4195  0391                     	;# 
  4196  0392                     	;# 
  4197  0393                     	;# 
  4198  0394                     	;# 
  4199  0395                     	;# 
  4200  0396                     	;# 
  4201  0397                     	;# 
  4202  0398                     	;# 
  4203  0399                     	;# 
  4204  039A                     	;# 
  4205  039C                     	;# 
  4206  039D                     	;# 
  4207  039E                     	;# 
  4208  039F                     	;# 
  4209  0411                     	;# 
  4210  0411                     	;# 
  4211  0412                     	;# 
  4212  0413                     	;# 
  4213  0414                     	;# 
  4214  0415                     	;# 
  4215  0416                     	;# 
  4216  0417                     	;# 
  4217  0418                     	;# 
  4218  0418                     	;# 
  4219  0419                     	;# 
  4220  041A                     	;# 
  4221  041B                     	;# 
  4222  041C                     	;# 
  4223  041D                     	;# 
  4224  041E                     	;# 
  4225  041F                     	;# 
  4226  0498                     	;# 
  4227  0498                     	;# 
  4228  0499                     	;# 
  4229  049A                     	;# 
  4230  049B                     	;# 
  4231  049B                     	;# 
  4232  049C                     	;# 
  4233  049D                     	;# 
  4234  049E                     	;# 
  4235  049F                     	;# 
  4236  0617                     	;# 
  4237  0618                     	;# 
  4238  0619                     	;# 
  4239  0619                     	;# 
  4240  061A                     	;# 
  4241  061B                     	;# 
  4242  061C                     	;# 
  4243  061C                     	;# 
  4244  061F                     	;# 
  4245  0691                     	;# 
  4246  0692                     	;# 
  4247  0693                     	;# 
  4248  0694                     	;# 
  4249  0695                     	;# 
  4250  0696                     	;# 
  4251  0697                     	;# 
  4252  0698                     	;# 
  4253  0699                     	;# 
  4254  0711                     	;# 
  4255  0712                     	;# 
  4256  0713                     	;# 
  4257  0714                     	;# 
  4258  0715                     	;# 
  4259  0716                     	;# 
  4260  0717                     	;# 
  4261  0718                     	;# 
  4262  0719                     	;# 
  4263  0891                     	;# 
  4264  0891                     	;# 
  4265  0891                     	;# 
  4266  0891                     	;# 
  4267  0891                     	;# 
  4268  0891                     	;# 
  4269  0892                     	;# 
  4270  0892                     	;# 
  4271  0892                     	;# 
  4272  0893                     	;# 
  4273  0893                     	;# 
  4274  0893                     	;# 
  4275  0893                     	;# 
  4276  0893                     	;# 
  4277  0893                     	;# 
  4278  0894                     	;# 
  4279  0894                     	;# 
  4280  0894                     	;# 
  4281  0895                     	;# 
  4282  0895                     	;# 
  4283  0895                     	;# 
  4284  0896                     	;# 
  4285  0896                     	;# 
  4286  0896                     	;# 
  4287  089B                     	;# 
  4288  0911                     	;# 
  4289  0912                     	;# 
  4290  0913                     	;# 
  4291  0914                     	;# 
  4292  0915                     	;# 
  4293  0916                     	;# 
  4294  0918                     	;# 
  4295  0919                     	;# 
  4296  091A                     	;# 
  4297  091B                     	;# 
  4298  091C                     	;# 
  4299  091D                     	;# 
  4300  091E                     	;# 
  4301  091F                     	;# 
  4302  0E0F                     	;# 
  4303  0E10                     	;# 
  4304  0E11                     	;# 
  4305  0E12                     	;# 
  4306  0E13                     	;# 
  4307  0E14                     	;# 
  4308  0E15                     	;# 
  4309  0E16                     	;# 
  4310  0E17                     	;# 
  4311  0E18                     	;# 
  4312  0E19                     	;# 
  4313  0E1A                     	;# 
  4314  0E1B                     	;# 
  4315  0E1C                     	;# 
  4316  0E1D                     	;# 
  4317  0E1E                     	;# 
  4318  0E1F                     	;# 
  4319  0E20                     	;# 
  4320  0E21                     	;# 
  4321  0E22                     	;# 
  4322  0E24                     	;# 
  4323  0E25                     	;# 
  4324  0E28                     	;# 
  4325  0E29                     	;# 
  4326  0E2A                     	;# 
  4327  0E2B                     	;# 
  4328  0E2C                     	;# 
  4329  0E2D                     	;# 
  4330  0E2E                     	;# 
  4331  0E2F                     	;# 
  4332  0E90                     	;# 
  4333  0E91                     	;# 
  4334  0E92                     	;# 
  4335  0E94                     	;# 
  4336  0E95                     	;# 
  4337  0E9C                     	;# 
  4338  0E9D                     	;# 
  4339  0E9E                     	;# 
  4340  0E9F                     	;# 
  4341  0EA0                     	;# 
  4342  0EA1                     	;# 
  4343  0EA2                     	;# 
  4344  0EA3                     	;# 
  4345  0EA4                     	;# 
  4346  0EA5                     	;# 
  4347  0EA6                     	;# 
  4348  0EA7                     	;# 
  4349  0F0F                     	;# 
  4350  0F10                     	;# 
  4351  0F11                     	;# 
  4352  0F12                     	;# 
  4353  0F13                     	;# 
  4354  0F14                     	;# 
  4355  0F15                     	;# 
  4356  0F16                     	;# 
  4357  0F17                     	;# 
  4358  0F18                     	;# 
  4359  0F19                     	;# 
  4360  0F1A                     	;# 
  4361  0F1B                     	;# 
  4362  0F1C                     	;# 
  4363  0F1D                     	;# 
  4364  0F1E                     	;# 
  4365  0F1F                     	;# 
  4366  0F20                     	;# 
  4367  0F21                     	;# 
  4368  0F22                     	;# 
  4369  0F23                     	;# 
  4370  0F24                     	;# 
  4371  0F25                     	;# 
  4372  0F26                     	;# 
  4373  0F27                     	;# 
  4374  0F28                     	;# 
  4375  0F29                     	;# 
  4376  0F2A                     	;# 
  4377  0F2B                     	;# 
  4378  0F2C                     	;# 
  4379  0F2D                     	;# 
  4380  0F2E                     	;# 
  4381  0F2F                     	;# 
  4382  0F30                     	;# 
  4383  0F31                     	;# 
  4384  0F32                     	;# 
  4385  0F33                     	;# 
  4386  0F34                     	;# 
  4387  0F35                     	;# 
  4388  0F36                     	;# 
  4389  0F37                     	;# 
  4390  0FE4                     	;# 
  4391  0FE5                     	;# 
  4392  0FE6                     	;# 
  4393  0FE7                     	;# 
  4394  0FE8                     	;# 
  4395  0FE9                     	;# 
  4396  0FEA                     	;# 
  4397  0FEB                     	;# 
  4398  0FED                     	;# 
  4399  0FEE                     	;# 
  4400  0FEF                     	;# 
  4401  0000                     	;# 
  4402  0001                     	;# 
  4403  0002                     	;# 
  4404  0003                     	;# 
  4405  0004                     	;# 
  4406  0005                     	;# 
  4407  0006                     	;# 
  4408  0007                     	;# 
  4409  0008                     	;# 
  4410  0009                     	;# 
  4411  000A                     	;# 
  4412  000B                     	;# 
  4413  000C                     	;# 
  4414  000D                     	;# 
  4415  000E                     	;# 
  4416  0010                     	;# 
  4417  0011                     	;# 
  4418  0012                     	;# 
  4419  0013                     	;# 
  4420  0014                     	;# 
  4421  0015                     	;# 
  4422  0015                     	;# 
  4423  0016                     	;# 
  4424  0016                     	;# 
  4425  0017                     	;# 
  4426  0018                     	;# 
  4427  0019                     	;# 
  4428  0019                     	;# 
  4429  001A                     	;# 
  4430  001B                     	;# 
  4431  001C                     	;# 
  4432  001D                     	;# 
  4433  001E                     	;# 
  4434  001F                     	;# 
  4435  008C                     	;# 
  4436  008D                     	;# 
  4437  008E                     	;# 
  4438  0090                     	;# 
  4439  0091                     	;# 
  4440  0092                     	;# 
  4441  0093                     	;# 
  4442  0094                     	;# 
  4443  0097                     	;# 
  4444  009B                     	;# 
  4445  009B                     	;# 
  4446  009C                     	;# 
  4447  009D                     	;# 
  4448  009E                     	;# 
  4449  009F                     	;# 
  4450  010C                     	;# 
  4451  010D                     	;# 
  4452  010E                     	;# 
  4453  0111                     	;# 
  4454  0112                     	;# 
  4455  0113                     	;# 
  4456  0114                     	;# 
  4457  0115                     	;# 
  4458  0116                     	;# 
  4459  0117                     	;# 
  4460  0118                     	;# 
  4461  0119                     	;# 
  4462  018C                     	;# 
  4463  018D                     	;# 
  4464  018E                     	;# 
  4465  0197                     	;# 
  4466  0199                     	;# 
  4467  0199                     	;# 
  4468  0199                     	;# 
  4469  019A                     	;# 
  4470  019A                     	;# 
  4471  019A                     	;# 
  4472  019B                     	;# 
  4473  019B                     	;# 
  4474  019B                     	;# 
  4475  019B                     	;# 
  4476  019B                     	;# 
  4477  019C                     	;# 
  4478  019C                     	;# 
  4479  019C                     	;# 
  4480  019D                     	;# 
  4481  019D                     	;# 
  4482  019D                     	;# 
  4483  019E                     	;# 
  4484  019E                     	;# 
  4485  019E                     	;# 
  4486  019F                     	;# 
  4487  019F                     	;# 
  4488  019F                     	;# 
  4489  019F                     	;# 
  4490  019F                     	;# 
  4491  020C                     	;# 
  4492  020D                     	;# 
  4493  020E                     	;# 
  4494  0211                     	;# 
  4495  0211                     	;# 
  4496  0212                     	;# 
  4497  0212                     	;# 
  4498  0213                     	;# 
  4499  0213                     	;# 
  4500  0214                     	;# 
  4501  0214                     	;# 
  4502  0215                     	;# 
  4503  0215                     	;# 
  4504  0215                     	;# 
  4505  0215                     	;# 
  4506  0216                     	;# 
  4507  0216                     	;# 
  4508  0217                     	;# 
  4509  0217                     	;# 
  4510  0219                     	;# 
  4511  021A                     	;# 
  4512  021B                     	;# 
  4513  021C                     	;# 
  4514  021D                     	;# 
  4515  021D                     	;# 
  4516  021E                     	;# 
  4517  021F                     	;# 
  4518  028C                     	;# 
  4519  028D                     	;# 
  4520  028E                     	;# 
  4521  0291                     	;# 
  4522  0291                     	;# 
  4523  0292                     	;# 
  4524  0293                     	;# 
  4525  0294                     	;# 
  4526  0295                     	;# 
  4527  0295                     	;# 
  4528  0296                     	;# 
  4529  0297                     	;# 
  4530  0298                     	;# 
  4531  029F                     	;# 
  4532  030C                     	;# 
  4533  030D                     	;# 
  4534  030E                     	;# 
  4535  0311                     	;# 
  4536  0311                     	;# 
  4537  0312                     	;# 
  4538  0313                     	;# 
  4539  0314                     	;# 
  4540  0315                     	;# 
  4541  0315                     	;# 
  4542  0316                     	;# 
  4543  0317                     	;# 
  4544  0318                     	;# 
  4545  038C                     	;# 
  4546  038D                     	;# 
  4547  038E                     	;# 
  4548  0391                     	;# 
  4549  0392                     	;# 
  4550  0393                     	;# 
  4551  0394                     	;# 
  4552  0395                     	;# 
  4553  0396                     	;# 
  4554  0397                     	;# 
  4555  0398                     	;# 
  4556  0399                     	;# 
  4557  039A                     	;# 
  4558  039C                     	;# 
  4559  039D                     	;# 
  4560  039E                     	;# 
  4561  039F                     	;# 
  4562  0411                     	;# 
  4563  0411                     	;# 
  4564  0412                     	;# 
  4565  0413                     	;# 
  4566  0414                     	;# 
  4567  0415                     	;# 
  4568  0416                     	;# 
  4569  0417                     	;# 
  4570  0418                     	;# 
  4571  0418                     	;# 
  4572  0419                     	;# 
  4573  041A                     	;# 
  4574  041B                     	;# 
  4575  041C                     	;# 
  4576  041D                     	;# 
  4577  041E                     	;# 
  4578  041F                     	;# 
  4579  0498                     	;# 
  4580  0498                     	;# 
  4581  0499                     	;# 
  4582  049A                     	;# 
  4583  049B                     	;# 
  4584  049B                     	;# 
  4585  049C                     	;# 
  4586  049D                     	;# 
  4587  049E                     	;# 
  4588  049F                     	;# 
  4589  0617                     	;# 
  4590  0618                     	;# 
  4591  0619                     	;# 
  4592  0619                     	;# 
  4593  061A                     	;# 
  4594  061B                     	;# 
  4595  061C                     	;# 
  4596  061C                     	;# 
  4597  061F                     	;# 
  4598  0691                     	;# 
  4599  0692                     	;# 
  4600  0693                     	;# 
  4601  0694                     	;# 
  4602  0695                     	;# 
  4603  0696                     	;# 
  4604  0697                     	;# 
  4605  0698                     	;# 
  4606  0699                     	;# 
  4607  0711                     	;# 
  4608  0712                     	;# 
  4609  0713                     	;# 
  4610  0714                     	;# 
  4611  0715                     	;# 
  4612  0716                     	;# 
  4613  0717                     	;# 
  4614  0718                     	;# 
  4615  0719                     	;# 
  4616  0891                     	;# 
  4617  0891                     	;# 
  4618  0891                     	;# 
  4619  0891                     	;# 
  4620  0891                     	;# 
  4621  0891                     	;# 
  4622  0892                     	;# 
  4623  0892                     	;# 
  4624  0892                     	;# 
  4625  0893                     	;# 
  4626  0893                     	;# 
  4627  0893                     	;# 
  4628  0893                     	;# 
  4629  0893                     	;# 
  4630  0893                     	;# 
  4631  0894                     	;# 
  4632  0894                     	;# 
  4633  0894                     	;# 
  4634  0895                     	;# 
  4635  0895                     	;# 
  4636  0895                     	;# 
  4637  0896                     	;# 
  4638  0896                     	;# 
  4639  0896                     	;# 
  4640  089B                     	;# 
  4641  0911                     	;# 
  4642  0912                     	;# 
  4643  0913                     	;# 
  4644  0914                     	;# 
  4645  0915                     	;# 
  4646  0916                     	;# 
  4647  0918                     	;# 
  4648  0919                     	;# 
  4649  091A                     	;# 
  4650  091B                     	;# 
  4651  091C                     	;# 
  4652  091D                     	;# 
  4653  091E                     	;# 
  4654  091F                     	;# 
  4655  0E0F                     	;# 
  4656  0E10                     	;# 
  4657  0E11                     	;# 
  4658  0E12                     	;# 
  4659  0E13                     	;# 
  4660  0E14                     	;# 
  4661  0E15                     	;# 
  4662  0E16                     	;# 
  4663  0E17                     	;# 
  4664  0E18                     	;# 
  4665  0E19                     	;# 
  4666  0E1A                     	;# 
  4667  0E1B                     	;# 
  4668  0E1C                     	;# 
  4669  0E1D                     	;# 
  4670  0E1E                     	;# 
  4671  0E1F                     	;# 
  4672  0E20                     	;# 
  4673  0E21                     	;# 
  4674  0E22                     	;# 
  4675  0E24                     	;# 
  4676  0E25                     	;# 
  4677  0E28                     	;# 
  4678  0E29                     	;# 
  4679  0E2A                     	;# 
  4680  0E2B                     	;# 
  4681  0E2C                     	;# 
  4682  0E2D                     	;# 
  4683  0E2E                     	;# 
  4684  0E2F                     	;# 
  4685  0E90                     	;# 
  4686  0E91                     	;# 
  4687  0E92                     	;# 
  4688  0E94                     	;# 
  4689  0E95                     	;# 
  4690  0E9C                     	;# 
  4691  0E9D                     	;# 
  4692  0E9E                     	;# 
  4693  0E9F                     	;# 
  4694  0EA0                     	;# 
  4695  0EA1                     	;# 
  4696  0EA2                     	;# 
  4697  0EA3                     	;# 
  4698  0EA4                     	;# 
  4699  0EA5                     	;# 
  4700  0EA6                     	;# 
  4701  0EA7                     	;# 
  4702  0F0F                     	;# 
  4703  0F10                     	;# 
  4704  0F11                     	;# 
  4705  0F12                     	;# 
  4706  0F13                     	;# 
  4707  0F14                     	;# 
  4708  0F15                     	;# 
  4709  0F16                     	;# 
  4710  0F17                     	;# 
  4711  0F18                     	;# 
  4712  0F19                     	;# 
  4713  0F1A                     	;# 
  4714  0F1B                     	;# 
  4715  0F1C                     	;# 
  4716  0F1D                     	;# 
  4717  0F1E                     	;# 
  4718  0F1F                     	;# 
  4719  0F20                     	;# 
  4720  0F21                     	;# 
  4721  0F22                     	;# 
  4722  0F23                     	;# 
  4723  0F24                     	;# 
  4724  0F25                     	;# 
  4725  0F26                     	;# 
  4726  0F27                     	;# 
  4727  0F28                     	;# 
  4728  0F29                     	;# 
  4729  0F2A                     	;# 
  4730  0F2B                     	;# 
  4731  0F2C                     	;# 
  4732  0F2D                     	;# 
  4733  0F2E                     	;# 
  4734  0F2F                     	;# 
  4735  0F30                     	;# 
  4736  0F31                     	;# 
  4737  0F32                     	;# 
  4738  0F33                     	;# 
  4739  0F34                     	;# 
  4740  0F35                     	;# 
  4741  0F36                     	;# 
  4742  0F37                     	;# 
  4743  0FE4                     	;# 
  4744  0FE5                     	;# 
  4745  0FE6                     	;# 
  4746  0FE7                     	;# 
  4747  0FE8                     	;# 
  4748  0FE9                     	;# 
  4749  0FEA                     	;# 
  4750  0FEB                     	;# 
  4751  0FED                     	;# 
  4752  0FEE                     	;# 
  4753  0FEF                     	;# 
  4754                           
  4755                           	psect	idataCOMMON
  4756  07FF                     __pidataCOMMON:	
  4757                           
  4758                           ;initializer for _val
  4759  07FF  3404               	retlw	4
  4760                           
  4761                           	psect	idataBANK0
  4762  0876                     __pidataBANK0:	
  4763                           
  4764                           ;initializer for _start
  4765  0876  3401               	retlw	1
  4766                           
  4767                           	psect	idataBANK2
  4768  0946                     __pidataBANK2:	
  4769                           
  4770                           ;initializer for _names
  4771  0946  343D               	retlw	low (STR_1| (0+32768))
  4772  0947  3490               	retlw	high (STR_1| (0+32768))
  4773  0948  3430               	retlw	low (STR_2| (0+32768))
  4774  0949  3490               	retlw	high (STR_2| (0+32768))
  4775  094A  3420               	retlw	low (STR_3| (0+32768))
  4776  094B  3490               	retlw	high (STR_3| (0+32768))
  4777  094C  3449               	retlw	low (STR_4| (0+32768))
  4778  094D  3490               	retlw	high (STR_4| (0+32768))
  4779                           
  4780                           	psect	stringtext1
  4781  1000                     __pstringtext1:	
  4782  1000                     _fsmStateTable:	
  4783  1000  34DD               	retlw	low _do_I2C_IDLE
  4784  1001  3408               	retlw	high _do_I2C_IDLE
  4785  1002  341E               	retlw	low _do_I2C_SEND_ADR_READ
  4786  1003  3409               	retlw	high _do_I2C_SEND_ADR_READ
  4787  1004  3401               	retlw	low _do_I2C_SEND_ADR_WRITE
  4788  1005  3409               	retlw	high _do_I2C_SEND_ADR_WRITE
  4789  1006  3452               	retlw	low _do_I2C_TX
  4790  1007  340E               	retlw	high _do_I2C_TX
  4791  1008  34C2               	retlw	low _do_I2C_RX
  4792  1009  340D               	retlw	high _do_I2C_RX
  4793  100A  34E2               	retlw	low _do_I2C_RCEN
  4794  100B  3408               	retlw	high _do_I2C_RCEN
  4795  100C  3484               	retlw	low _do_I2C_TX_EMPTY
  4796  100D  340C               	retlw	high _do_I2C_TX_EMPTY
  4797  100E  34B4               	retlw	low _do_I2C_SEND_RESTART_READ
  4798  100F  3408               	retlw	high _do_I2C_SEND_RESTART_READ
  4799  1010  34B8               	retlw	low _do_I2C_SEND_RESTART_WRITE
  4800  1011  3408               	retlw	high _do_I2C_SEND_RESTART_WRITE
  4801  1012  34BC               	retlw	low _do_I2C_SEND_RESTART
  4802  1013  3408               	retlw	high _do_I2C_SEND_RESTART
  4803  1014  34C0               	retlw	low _do_I2C_SEND_STOP
  4804  1015  3408               	retlw	high _do_I2C_SEND_STOP
  4805  1016  34C4               	retlw	low _do_I2C_DO_ACK
  4806  1017  3408               	retlw	high _do_I2C_DO_ACK
  4807  1018  34C8               	retlw	low _do_I2C_DO_NACK_STOP
  4808  1019  3408               	retlw	high _do_I2C_DO_NACK_STOP
  4809  101A  34CC               	retlw	low _do_I2C_DO_NACK_RESTART
  4810  101B  3408               	retlw	high _do_I2C_DO_NACK_RESTART
  4811  101C  34FA               	retlw	low _do_I2C_RESET
  4812  101D  3408               	retlw	high _do_I2C_RESET
  4813  101E  3400               	retlw	low _do_I2C_DO_ADDRESS_NACK
  4814  101F  340C               	retlw	high _do_I2C_DO_ADDRESS_NACK
  4815  1020                     __end_of_fsmStateTable:	
  4816  000E                     _PORTCbits	set	14
  4817  001F                     _T2CONbits	set	31
  4818  001F                     _T2CON	set	31
  4819  001D                     _TMR2	set	29
  4820  001E                     _PR2	set	30
  4821  0011                     _PIR1bits	set	17
  4822  000B                     _INTCONbits	set	11
  4823  0010                     _PIR0bits	set	16
  4824  009D                     _ADCON0bits	set	157
  4825  009C                     _ADRESH	set	156
  4826  009B                     _ADRESL	set	155
  4827  009F                     _ADACT	set	159
  4828  009E                     _ADCON1	set	158
  4829  009D                     _ADCON0	set	157
  4830  008E                     _TRISC	set	142
  4831  008D                     _TRISB	set	141
  4832  008C                     _TRISA	set	140
  4833  0097                     _WDTCON	set	151
  4834  0091                     _PIE1bits	set	145
  4835  0090                     _PIE0bits	set	144
  4836  010E                     _LATCbits	set	270
  4837  010E                     _LATC	set	270
  4838  010D                     _LATB	set	269
  4839  010C                     _LATA	set	268
  4840  018C                     _ANSELA	set	396
  4841  018D                     _ANSELB	set	397
  4842  018E                     _ANSELC	set	398
  4843  021C                     _SSP2STATbits	set	540
  4844  0219                     _SSP2BUF	set	537
  4845  021D                     _SSP2CON1bits	set	541
  4846  021A                     _SSP2ADD	set	538
  4847  021D                     _SSP2CON1	set	541
  4848  021C                     _SSP2STAT	set	540
  4849  0214                     _SSP1STATbits	set	532
  4850  0213                     _SSP1MSK	set	531
  4851  0211                     _SSP1BUF	set	529
  4852  0216                     _SSP1CON2bits	set	534
  4853  0212                     _SSP1ADD	set	530
  4854  0216                     _SSP1CON2	set	534
  4855  0215                     _SSP1CON1	set	533
  4856  0214                     _SSP1STAT	set	532
  4857  0215                     _SSP1CON1bits	set	533
  4858  020E                     _WPUC	set	526
  4859  020C                     _WPUA	set	524
  4860  020D                     _WPUB	set	525
  4861  0293                     _CCP1CONbits	set	659
  4862  029F                     _CCPTMRSbits	set	671
  4863  0291                     _CCPR1L	set	657
  4864  0292                     _CCPR1H	set	658
  4865  0293                     _CCP1CON	set	659
  4866  028E                     _ODCONC	set	654
  4867  028D                     _ODCONB	set	653
  4868  028C                     _ODCONA	set	652
  4869  030E                     _SLRCONC	set	782
  4870  030D                     _SLRCONB	set	781
  4871  030C                     _SLRCONA	set	780
  4872  0916                     _PMD5	set	2326
  4873  0915                     _PMD4	set	2325
  4874  0914                     _PMD3	set	2324
  4875  0913                     _PMD2	set	2323
  4876  0912                     _PMD1	set	2322
  4877  0911                     _PMD0	set	2321
  4878  091E                     _OSCTUNE	set	2334
  4879  091F                     _OSCFRQ	set	2335
  4880  091D                     _OSCEN	set	2333
  4881  091B                     _OSCCON3	set	2331
  4882  0919                     _OSCCON1	set	2329
  4883  0E1D                     _SSP2CLKPPS	set	3613
  4884  0E21                     _SSP1DATPPS	set	3617
  4885  0E20                     _SSP1CLKPPS	set	3616
  4886  0E1E                     _SSP2DATPPS	set	3614
  4887  0EA6                     _RC6PPS	set	3750
  4888  0EA2                     _RC2PPS	set	3746
  4889  0E9D                     _RB5PPS	set	3741
  4890  0E9F                     _RB7PPS	set	3743
  4891  0E9E                     _RB6PPS	set	3742
  4892  1020                     STR_3:	
  4893  1020  3441               	retlw	65	;'A'
  4894  1021  346C               	retlw	108	;'l'
  4895  1022  3465               	retlw	101	;'e'
  4896  1023  3478               	retlw	120	;'x'
  4897  1024  3461               	retlw	97	;'a'
  4898  1025  346E               	retlw	110	;'n'
  4899  1026  3464               	retlw	100	;'d'
  4900  1027  3472               	retlw	114	;'r'
  4901  1028  3461               	retlw	97	;'a'
  4902  1029  3420               	retlw	32	;' '
  4903  102A  3446               	retlw	70	;'F'
  4904  102B  3479               	retlw	121	;'y'
  4905  102C  3466               	retlw	102	;'f'
  4906  102D  3466               	retlw	102	;'f'
  4907  102E  3465               	retlw	101	;'e'
  4908  102F  3400               	retlw	0
  4909                           
  4910                           	psect	stringtext2
  4911  1030                     __pstringtext2:	
  4912  1030                     STR_2:	
  4913  1030  344E               	retlw	78	;'N'
  4914  1031  346F               	retlw	111	;'o'
  4915  1032  3465               	retlw	101	;'e'
  4916  1033  346C               	retlw	108	;'l'
  4917  1034  346C               	retlw	108	;'l'
  4918  1035  3465               	retlw	101	;'e'
  4919  1036  3420               	retlw	32	;' '
  4920  1037  3443               	retlw	67	;'C'
  4921  1038  3472               	retlw	114	;'r'
  4922  1039  3461               	retlw	97	;'a'
  4923  103A  346E               	retlw	110	;'n'
  4924  103B  3465               	retlw	101	;'e'
  4925  103C  3400               	retlw	0
  4926                           
  4927                           	psect	stringtext3
  4928  103D                     __pstringtext3:	
  4929  103D                     STR_1:	
  4930  103D  344A               	retlw	74	;'J'
  4931  103E  3475               	retlw	117	;'u'
  4932  103F  3473               	retlw	115	;'s'
  4933  1040  3474               	retlw	116	;'t'
  4934  1041  3469               	retlw	105	;'i'
  4935  1042  346E               	retlw	110	;'n'
  4936  1043  3420               	retlw	32	;' '
  4937  1044  3443               	retlw	67	;'C'
  4938  1045  3468               	retlw	104	;'h'
  4939  1046  3461               	retlw	97	;'a'
  4940  1047  346E               	retlw	110	;'n'
  4941  1048  3400               	retlw	0
  4942                           
  4943                           	psect	stringtext4
  4944  1049                     __pstringtext4:	
  4945  1049                     STR_4:	
  4946  1049  344A               	retlw	74	;'J'
  4947  104A  3465               	retlw	101	;'e'
  4948  104B  3466               	retlw	102	;'f'
  4949  104C  3466               	retlw	102	;'f'
  4950  104D  3420               	retlw	32	;' '
  4951  104E  3447               	retlw	71	;'G'
  4952  104F  3465               	retlw	101	;'e'
  4953  1050  3469               	retlw	105	;'i'
  4954  1051  3473               	retlw	115	;'s'
  4955  1052  3473               	retlw	115	;'s'
  4956  1053  3400               	retlw	0
  4957                           
  4958                           	psect	stringtext5
  4959  1054                     __pstringtext5:	
  4960  1054                     STR_6:	
  4961  1054  3474               	retlw	116	;'t'
  4962  1055  346F               	retlw	111	;'o'
  4963  1056  3467               	retlw	103	;'g'
  4964  1057  3467               	retlw	103	;'g'
  4965  1058  346C               	retlw	108	;'l'
  4966  1059  3465               	retlw	101	;'e'
  4967  105A  3400               	retlw	0
  4968                           
  4969                           	psect	stringtext6
  4970  105B                     __pstringtext6:	
  4971  105B                     STR_8:	
  4972  105B  3464               	retlw	100	;'d'
  4973  105C  346F               	retlw	111	;'o'
  4974  105D  3477               	retlw	119	;'w'
  4975  105E  346E               	retlw	110	;'n'
  4976  105F  3400               	retlw	0
  4977                           
  4978                           	psect	stringtext7
  4979  1060                     __pstringtext7:	
  4980  1060                     STR_5:	
  4981  1060  346F               	retlw	111	;'o'
  4982  1061  346E               	retlw	110	;'n'
  4983  1062  3400               	retlw	0
  4984                           
  4985                           	psect	stringtext8
  4986  1063                     __pstringtext8:	
  4987  1063                     STR_7:	
  4988  1063  3475               	retlw	117	;'u'
  4989  1064  3470               	retlw	112	;'p'
  4990  1065  3400               	retlw	0
  4991                           
  4992                           	psect	stringtext9
  4993  0000                     __pstringtext9:	
  4994                           
  4995                           ; #config settings
  4996  0000                     
  4997                           	psect	cinit
  4998  002E                     start_initialization:	
  4999  002E                     __initialization:	
  5000                           
  5001                           ; Initialize objects allocated to COMMON
  5002  002E  3187  27FF  3180   	fcall	__pidataCOMMON	;fetch initializer
  5003  0031  00FA               	movwf	__pdataCOMMON& (0+127)
  5004                           
  5005                           ; Initialize objects allocated to BANK0
  5006  0032  3188  2076  3180   	fcall	__pidataBANK0	;fetch initializer
  5007  0035  00EE               	movwf	__pdataBANK0& (0+127)
  5008                           
  5009                           ; Initialize objects allocated to BANK2
  5010  0036  3046               	movlw	low __pidataBANK2
  5011  0037  0084               	movwf	4
  5012  0038  3089               	movlw	(high __pidataBANK2)| (0+128)
  5013  0039  0085               	movwf	5
  5014  003A  3060               	movlw	low __pdataBANK2
  5015  003B  0086               	movwf	6
  5016  003C  3001               	movlw	high __pdataBANK2
  5017  003D  0087               	movwf	7
  5018  003E  3008               	movlw	8
  5019  003F  3188  20F4  3180   	fcall	init_ram
  5020                           
  5021                           ; Clear objects allocated to COMMON
  5022  0042  01F6               	clrf	__pbssCOMMON& (0+127)
  5023  0043  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  5024  0044  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  5025  0045  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  5026                           
  5027                           ; Clear objects allocated to BANK0
  5028  0046  305C               	movlw	low __pbssBANK0
  5029  0047  0084               	movwf	4
  5030  0048  3000               	movlw	high __pbssBANK0
  5031  0049  0085               	movwf	5
  5032  004A  3012               	movlw	18
  5033  004B  3188  20EE  3180   	fcall	clear_ram0
  5034                           
  5035                           ; Clear objects allocated to BANK1
  5036  004E  0021               	movlb	1	; select bank1
  5037  004F  01E0               	clrf	__pbssBANK1& (0+127)
  5038  0050  01E1               	clrf	(__pbssBANK1+1)& (0+127)
  5039  0051  01E2               	clrf	(__pbssBANK1+2)& (0+127)
  5040  0052  01E3               	clrf	(__pbssBANK1+3)& (0+127)
  5041  0053  01E4               	clrf	(__pbssBANK1+4)& (0+127)
  5042  0054  01E5               	clrf	(__pbssBANK1+5)& (0+127)
  5043                           
  5044                           ; Clear objects allocated to BANK2
  5045  0055  0022               	movlb	2	; select bank2
  5046  0056  01E8               	clrf	__pbssBANK2& (0+127)
  5047  0057  01E9               	clrf	(__pbssBANK2+1)& (0+127)
  5048                           
  5049                           ; Clear objects allocated to BANK3
  5050  0058  30A0               	movlw	low __pbssBANK3
  5051  0059  0084               	movwf	4
  5052  005A  3001               	movlw	high __pbssBANK3
  5053  005B  0085               	movwf	5
  5054  005C  301D               	movlw	29
  5055  005D  3188  20EE  3180   	fcall	clear_ram0
  5056                           
  5057                           ; Clear objects allocated to BANK4
  5058  0060  3020               	movlw	low __pbssBANK4
  5059  0061  0084               	movwf	4
  5060  0062  3002               	movlw	high __pbssBANK4
  5061  0063  0085               	movwf	5
  5062  0064  3044               	movlw	68
  5063  0065  3188  20EE         	fcall	clear_ram0
  5064  0067                     end_of_initialization:	
  5065                           ;End of C runtime variable initialization code
  5066                           
  5067  0067                     __end_of__initialization:	
  5068  0067  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  5069  0068  0020               	movlb	0
  5070  0069  318C  2C56         	ljmp	_main	;jump to C main() function
  5071                           
  5072                           	psect	bssCOMMON
  5073  0076                     __pbssCOMMON:	
  5074  0076                     _b_i2c_error_flag:	
  5075  0076                     	ds	1
  5076  0077                     _handleGestureFlag:	
  5077  0077                     	ds	1
  5078  0078                     _state:	
  5079  0078                     	ds	1
  5080  0079                     _button:	
  5081  0079                     	ds	1
  5082                           
  5083                           	psect	dataCOMMON
  5084  007A                     __pdataCOMMON:	
  5085  007A                     _val:	
  5086  007A                     	ds	1
  5087                           
  5088                           	psect	bssBANK0
  5089  005C                     __pbssBANK0:	
  5090  005C                     _name:	
  5091  005C                     	ds	2
  5092  005E                     _gesture_state_:	
  5093  005E                     	ds	2
  5094  0060                     _gesture_near_count_:	
  5095  0060                     	ds	2
  5096  0062                     _gesture_lr_count_:	
  5097  0062                     	ds	2
  5098  0064                     _gesture_ud_count_:	
  5099  0064                     	ds	2
  5100  0066                     _gesture_lr_delta_:	
  5101  0066                     	ds	2
  5102  0068                     _gesture_ud_delta_:	
  5103  0068                     	ds	2
  5104  006A                     _i2c1_driver_busCollisionISR:	
  5105  006A                     	ds	2
  5106  006C                     _adcResult:	
  5107  006C                     	ds	1
  5108  006D                     _printed:	
  5109  006D                     	ds	1
  5110                           
  5111                           	psect	dataBANK0
  5112  006E                     __pdataBANK0:	
  5113  006E                     _start:	
  5114  006E                     	ds	1
  5115                           
  5116                           	psect	bssBANK1
  5117  00E0                     __pbssBANK1:	
  5118  00E0                     _adcResult2:	
  5119  00E0                     	ds	2
  5120  00E2                     _gesture_far_count_:	
  5121  00E2                     	ds	2
  5122  00E4                     _i2c1_driver_i2cISR:	
  5123  00E4                     	ds	2
  5124                           
  5125                           	psect	bssBANK2
  5126  0168                     __pbssBANK2:	
  5127  0168                     _gesture_motion_:	
  5128  0168                     	ds	2
  5129                           
  5130                           	psect	dataBANK2
  5131  0160                     __pdataBANK2:	
  5132  0160                     _names:	
  5133  0160                     	ds	8
  5134                           
  5135                           	psect	bssBANK3
  5136  01A0                     __pbssBANK3:	
  5137  01A0                     _i2c_status:	
  5138  01A0                     	ds	29
  5139                           
  5140                           	psect	bssBANK4
  5141  0220                     __pbssBANK4:	
  5142  0220                     _gesture_data_:	
  5143  0220                     	ds	68
  5144                           
  5145                           	psect	inittext
  5146  08F4                     init_ram:	
  5147  08F4  00FE               	movwf	126
  5148  08F5                     initloop:	
  5149  08F5  0012               	moviw fsr0++
  5150  08F6  001E               	movwi fsr1++
  5151  08F7  0BFE               	decfsz	126,f
  5152  08F8  28F5               	goto	initloop
  5153  08F9  3400               	retlw	0
  5154                           
  5155                           	psect	clrtext
  5156  08EE                     clear_ram0:	
  5157                           ;	Called with FSR0 containing the base address, and
  5158                           ;	WREG with the size to clear
  5159                           
  5160  08EE  0064               	clrwdt	;clear the watchdog before getting into this loop
  5161  08EF                     clrloop0:	
  5162  08EF  0180               	clrf	0	;clear RAM location pointed to by FSR
  5163  08F0  3101               	addfsr 0,1
  5164  08F1  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  5165  08F2  28EF               	goto	clrloop0	;have we reached the end yet?
  5166  08F3  3400               	retlw	0	;all done for this memory range, return
  5167                           
  5168                           	psect	cstackBANK2
  5169  0120                     __pcstackBANK2:	
  5170  0120                     readGesture@fifo_data:	
  5171                           
  5172                           ; 64 bytes @ 0x0
  5173  0120                     	ds	64
  5174                           
  5175                           	psect	cstackBANK1
  5176  00A0                     __pcstackBANK1:	
  5177  00A0                     readGesture@fifo_data2:	
  5178                           
  5179                           ; 64 bytes @ 0x0
  5180  00A0                     	ds	64
  5181                           
  5182                           	psect	cstackCOMMON
  5183  0070                     __pcstackCOMMON:	
  5184  0070                     ?_i2c1_driver_open:	
  5185  0070                     ?_i2c1_driver_isNACK:	
  5186                           ; 1 bit 
  5187                           
  5188  0070                     ?_i2c1_driver_isBufferFull:	
  5189                           ; 1 bit 
  5190                           
  5191  0070                     ?_returnStop:	
  5192                           ; 1 bit 
  5193                           
  5194  0070                     ?_returnReset:	
  5195                           ; 1 bytes @ 0x0
  5196                           
  5197  0070                     ?_mssp1_clearIRQ:	
  5198                           ; 1 bytes @ 0x0
  5199                           
  5200  0070                     ??_mssp1_clearIRQ:	
  5201                           ; 1 bytes @ 0x0
  5202                           
  5203  0070                     ?_i2c_busCollisionISR:	
  5204                           ; 1 bytes @ 0x0
  5205                           
  5206  0070                     ??_i2c_busCollisionISR:	
  5207                           ; 1 bytes @ 0x0
  5208                           
  5209  0070                     ?_i2c_ISR:	
  5210                           ; 1 bytes @ 0x0
  5211                           
  5212  0070                     ?_i2c1_driver_start:	
  5213                           ; 1 bytes @ 0x0
  5214                           
  5215  0070                     ?_i2c1_driver_resetBus:	
  5216                           ; 1 bytes @ 0x0
  5217                           
  5218  0070                     ??_i2c1_driver_resetBus:	
  5219                           ; 1 bytes @ 0x0
  5220                           
  5221  0070                     ?_i2c1_driver_restart:	
  5222                           ; 1 bytes @ 0x0
  5223                           
  5224  0070                     ?_i2c1_driver_stop:	
  5225                           ; 1 bytes @ 0x0
  5226                           
  5227  0070                     ?_i2c1_driver_TXData:	
  5228                           ; 1 bytes @ 0x0
  5229                           
  5230  0070                     ?_i2c1_driver_startRX:	
  5231                           ; 1 bytes @ 0x0
  5232                           
  5233  0070                     ?_i2c1_driver_sendACK:	
  5234                           ; 1 bytes @ 0x0
  5235                           
  5236  0070                     ??_i2c1_driver_sendACK:	
  5237                           ; 1 bytes @ 0x0
  5238                           
  5239  0070                     ?_i2c1_driver_sendNACK:	
  5240                           ; 1 bytes @ 0x0
  5241                           
  5242  0070                     ??_i2c1_driver_isNACK:	
  5243                           ; 1 bytes @ 0x0
  5244                           
  5245  0070                     ?_i2c1_driver_getRXData:	
  5246                           ; 1 bytes @ 0x0
  5247                           
  5248  0070                     ?_mssp1_setIRQ:	
  5249                           ; 1 bytes @ 0x0
  5250                           
  5251  0070                     ??_mssp1_setIRQ:	
  5252                           ; 1 bytes @ 0x0
  5253                           
  5254  0070                     ?_i2c1_driver_clearBusCollision:	
  5255                           ; 1 bytes @ 0x0
  5256                           
  5257  0070                     ??_i2c1_driver_clearBusCollision:	
  5258                           ; 1 bytes @ 0x0
  5259                           
  5260  0070                     ?_PIN_MANAGER_IOC:	
  5261                           ; 1 bytes @ 0x0
  5262                           
  5263  0070                     ??_PIN_MANAGER_IOC:	
  5264                           ; 1 bytes @ 0x0
  5265                           
  5266  0070                     ?_PMD_Initialize:	
  5267                           ; 1 bytes @ 0x0
  5268                           
  5269  0070                     ?_PIN_MANAGER_Initialize:	
  5270                           ; 1 bytes @ 0x0
  5271                           
  5272  0070                     ?_OSCILLATOR_Initialize:	
  5273                           ; 1 bytes @ 0x0
  5274                           
  5275  0070                     ?_WDT_Initialize:	
  5276                           ; 1 bytes @ 0x0
  5277                           
  5278  0070                     ?_SPI2_Initialize:	
  5279                           ; 1 bytes @ 0x0
  5280                           
  5281  0070                     ?_PWM1_Initialize:	
  5282                           ; 1 bytes @ 0x0
  5283                           
  5284  0070                     ?_ADC_Initialize:	
  5285                           ; 1 bytes @ 0x0
  5286                           
  5287  0070                     ?_TMR2_Initialize:	
  5288                           ; 1 bytes @ 0x0
  5289                           
  5290  0070                     ?_Display_Clear:	
  5291                           ; 1 bytes @ 0x0
  5292                           
  5293  0070                     ?_initialize:	
  5294                           ; 1 bytes @ 0x0
  5295                           
  5296  0070                     ?_enableGestureSensor:	
  5297                           ; 1 bytes @ 0x0
  5298                           
  5299  0070                     ?_Get_ADC:	
  5300                           ; 1 bytes @ 0x0
  5301                           
  5302  0070                     ?_isGestureAvailable:	
  5303                           ; 1 bytes @ 0x0
  5304                           
  5305  0070                     ?_handleGesture:	
  5306                           ; 1 bytes @ 0x0
  5307                           
  5308  0070                     ?_wireReadDataByte:	
  5309                           ; 1 bytes @ 0x0
  5310                           
  5311  0070                     ?_setLEDDrive:	
  5312                           ; 1 bytes @ 0x0
  5313                           
  5314  0070                     ?_setProximityGain:	
  5315                           ; 1 bytes @ 0x0
  5316                           
  5317  0070                     ?_setAmbientLightGain:	
  5318                           ; 1 bytes @ 0x0
  5319                           
  5320  0070                     ?_setProxIntLowThresh:	
  5321                           ; 1 bytes @ 0x0
  5322                           
  5323  0070                     ?_setProxIntHighThresh:	
  5324                           ; 1 bytes @ 0x0
  5325                           
  5326  0070                     ?_setGestureEnterThresh:	
  5327                           ; 1 bytes @ 0x0
  5328                           
  5329  0070                     ?_setGestureExitThresh:	
  5330                           ; 1 bytes @ 0x0
  5331                           
  5332  0070                     ?_setGestureGain:	
  5333                           ; 1 bytes @ 0x0
  5334                           
  5335  0070                     ?_setGestureLEDDrive:	
  5336                           ; 1 bytes @ 0x0
  5337                           
  5338  0070                     ?_setGestureWaitTime:	
  5339                           ; 1 bytes @ 0x0
  5340                           
  5341  0070                     ?_setGestureIntEnable:	
  5342                           ; 1 bytes @ 0x0
  5343                           
  5344  0070                     ?_getMode:	
  5345                           ; 1 bytes @ 0x0
  5346                           
  5347  0070                     ?_resetGestureParameters:	
  5348                           ; 1 bytes @ 0x0
  5349                           
  5350  0070                     ?_setLEDBoost:	
  5351                           ; 1 bytes @ 0x0
  5352                           
  5353  0070                     ?_setGestureMode:	
  5354                           ; 1 bytes @ 0x0
  5355                           
  5356  0070                     ?_enablePower:	
  5357                           ; 1 bytes @ 0x0
  5358                           
  5359  0070                     ?_processGestureData:	
  5360                           ; 1 bytes @ 0x0
  5361                           
  5362  0070                     ?_decodeGesture:	
  5363                           ; 1 bytes @ 0x0
  5364                           
  5365  0070                     ?_I2C_Start:	
  5366                           ; 1 bytes @ 0x0
  5367                           
  5368  0070                     ?_I2C_Write_Byte:	
  5369                           ; 1 bytes @ 0x0
  5370                           
  5371  0070                     ?_I2C_ReStart:	
  5372                           ; 1 bytes @ 0x0
  5373                           
  5374  0070                     ?_I2C_Read_Byte:	
  5375                           ; 1 bytes @ 0x0
  5376                           
  5377  0070                     ?_I2C_Send_NACK:	
  5378                           ; 1 bytes @ 0x0
  5379                           
  5380  0070                     ?_I2C_Stop:	
  5381                           ; 1 bytes @ 0x0
  5382                           
  5383  0070                     ?_do_I2C_RESET:	
  5384                           ; 1 bytes @ 0x0
  5385                           
  5386  0070                     ??_do_I2C_RESET:	
  5387                           ; 1 bytes @ 0x0
  5388                           
  5389  0070                     ?_do_I2C_IDLE:	
  5390                           ; 1 bytes @ 0x0
  5391                           
  5392  0070                     ??_do_I2C_IDLE:	
  5393                           ; 1 bytes @ 0x0
  5394                           
  5395  0070                     ?_do_I2C_SEND_RESTART_READ:	
  5396                           ; 1 bytes @ 0x0
  5397                           
  5398  0070                     ??_do_I2C_SEND_RESTART_READ:	
  5399                           ; 1 bytes @ 0x0
  5400                           
  5401  0070                     ?_do_I2C_SEND_RESTART_WRITE:	
  5402                           ; 1 bytes @ 0x0
  5403                           
  5404  0070                     ??_do_I2C_SEND_RESTART_WRITE:	
  5405                           ; 1 bytes @ 0x0
  5406                           
  5407  0070                     ?_do_I2C_SEND_RESTART:	
  5408                           ; 1 bytes @ 0x0
  5409                           
  5410  0070                     ??_do_I2C_SEND_RESTART:	
  5411                           ; 1 bytes @ 0x0
  5412                           
  5413  0070                     ?_do_I2C_SEND_STOP:	
  5414                           ; 1 bytes @ 0x0
  5415                           
  5416  0070                     ??_do_I2C_SEND_STOP:	
  5417                           ; 1 bytes @ 0x0
  5418                           
  5419  0070                     ?_do_I2C_SEND_ADR_READ:	
  5420                           ; 1 bytes @ 0x0
  5421                           
  5422  0070                     ??_do_I2C_SEND_ADR_READ:	
  5423                           ; 1 bytes @ 0x0
  5424                           
  5425  0070                     ?_do_I2C_SEND_ADR_WRITE:	
  5426                           ; 1 bytes @ 0x0
  5427                           
  5428  0070                     ??_do_I2C_SEND_ADR_WRITE:	
  5429                           ; 1 bytes @ 0x0
  5430                           
  5431  0070                     ?_do_I2C_RCEN:	
  5432                           ; 1 bytes @ 0x0
  5433                           
  5434  0070                     ??_do_I2C_RCEN:	
  5435                           ; 1 bytes @ 0x0
  5436                           
  5437  0070                     ?_do_I2C_DO_ACK:	
  5438                           ; 1 bytes @ 0x0
  5439                           
  5440  0070                     ??_do_I2C_DO_ACK:	
  5441                           ; 1 bytes @ 0x0
  5442                           
  5443  0070                     ?_do_I2C_DO_NACK_STOP:	
  5444                           ; 1 bytes @ 0x0
  5445                           
  5446  0070                     ??_do_I2C_DO_NACK_STOP:	
  5447                           ; 1 bytes @ 0x0
  5448                           
  5449  0070                     ?_do_I2C_DO_NACK_RESTART:	
  5450                           ; 1 bytes @ 0x0
  5451                           
  5452  0070                     ??_do_I2C_DO_NACK_RESTART:	
  5453                           ; 1 bytes @ 0x0
  5454                           
  5455  0070                     ?_do_I2C_DO_ADDRESS_NACK:	
  5456                           ; 1 bytes @ 0x0
  5457                           
  5458  0070                     ??_do_I2C_DO_ADDRESS_NACK:	
  5459                           ; 1 bytes @ 0x0
  5460                           
  5461  0070                     ?_do_I2C_TX:	
  5462                           ; 1 bytes @ 0x0
  5463                           
  5464  0070                     ??_do_I2C_TX:	
  5465                           ; 1 bytes @ 0x0
  5466                           
  5467  0070                     ?_do_I2C_RX:	
  5468                           ; 1 bytes @ 0x0
  5469                           
  5470  0070                     ??_do_I2C_RX:	
  5471                           ; 1 bytes @ 0x0
  5472                           
  5473  0070                     ?_do_I2C_TX_EMPTY:	
  5474                           ; 1 bytes @ 0x0
  5475                           
  5476  0070                     ??_do_I2C_TX_EMPTY:	
  5477                           ; 1 bytes @ 0x0
  5478                           
  5479  0070                     ?_INTERRUPT_InterruptManager:	
  5480                           ; 1 bytes @ 0x0
  5481                           
  5482  0070                     ?_SYSTEM_Initialize:	
  5483                           ; 1 bytes @ 0x0
  5484                           
  5485  0070                     ?_SPI2_Exchange8bit:	
  5486                           ; 1 bytes @ 0x0
  5487                           
  5488  0070                     ?_main:	
  5489                           ; 1 bytes @ 0x0
  5490                           
  5491  0070                     ?_SPI_Write:	
  5492                           ; 1 bytes @ 0x0
  5493                           
  5494  0070                     ?i1_i2c1_driver_restart:	
  5495                           ; 1 bytes @ 0x0
  5496                           
  5497  0070                     ??i1_i2c1_driver_restart:	
  5498                           ; 1 bytes @ 0x0
  5499                           
  5500  0070                     ?i1_i2c1_driver_stop:	
  5501                           ; 1 bytes @ 0x0
  5502                           
  5503  0070                     ??i1_i2c1_driver_stop:	
  5504                           ; 1 bytes @ 0x0
  5505                           
  5506  0070                     ?i1_i2c1_driver_startRX:	
  5507                           ; 1 bytes @ 0x0
  5508                           
  5509  0070                     ??i1_i2c1_driver_startRX:	
  5510                           ; 1 bytes @ 0x0
  5511                           
  5512  0070                     ?i1_i2c1_driver_getRXData:	
  5513                           ; 1 bytes @ 0x0
  5514                           
  5515  0070                     ??i1_i2c1_driver_getRXData:	
  5516                           ; 1 bytes @ 0x0
  5517                           
  5518  0070                     ?i1_i2c1_driver_TXData:	
  5519                           ; 1 bytes @ 0x0
  5520                           
  5521  0070                     ??i1_i2c1_driver_TXData:	
  5522                           ; 1 bytes @ 0x0
  5523                           
  5524  0070                     ?i1_i2c1_driver_sendNACK:	
  5525                           ; 1 bytes @ 0x0
  5526                           
  5527  0070                     ??i1_i2c1_driver_sendNACK:	
  5528                           ; 1 bytes @ 0x0
  5529                           
  5530  0070                     returnStop@p:	
  5531                           ; 1 bytes @ 0x0
  5532                           
  5533  0070                     returnReset@p:	
  5534                           ; 1 bytes @ 0x0
  5535                           
  5536  0070                     i1i2c1_driver_TXData@d:	
  5537                           ; 1 bytes @ 0x0
  5538                           
  5539                           
  5540                           ; 1 bytes @ 0x0
  5541  0070                     	ds	1
  5542  0071                     ??_returnStop:	
  5543  0071                     ??_returnReset:	
  5544                           ; 1 bytes @ 0x1
  5545                           
  5546                           
  5547                           ; 1 bytes @ 0x1
  5548  0071                     	ds	2
  5549  0073                     ??_i2c_ISR:	
  5550                           
  5551                           ; 1 bytes @ 0x3
  5552  0073                     	ds	3
  5553  0076                     ??_INTERRUPT_InterruptManager:	
  5554                           
  5555                           	psect	cstackBANK0
  5556  0020                     __pcstackBANK0:	
  5557                           ; 1 bytes @ 0x6
  5558                           
  5559  0020                     ??_i2c1_driver_open:	
  5560  0020                     ??_i2c1_driver_start:	
  5561                           ; 1 bytes @ 0x0
  5562                           
  5563  0020                     ??_i2c1_driver_restart:	
  5564                           ; 1 bytes @ 0x0
  5565                           
  5566  0020                     ??_i2c1_driver_stop:	
  5567                           ; 1 bytes @ 0x0
  5568                           
  5569  0020                     ??_i2c1_driver_TXData:	
  5570                           ; 1 bytes @ 0x0
  5571                           
  5572  0020                     ??_i2c1_driver_startRX:	
  5573                           ; 1 bytes @ 0x0
  5574                           
  5575  0020                     ??_i2c1_driver_sendNACK:	
  5576                           ; 1 bytes @ 0x0
  5577                           
  5578  0020                     ??_i2c1_driver_getRXData:	
  5579                           ; 1 bytes @ 0x0
  5580                           
  5581  0020                     ??_PMD_Initialize:	
  5582                           ; 1 bytes @ 0x0
  5583                           
  5584  0020                     ??_PIN_MANAGER_Initialize:	
  5585                           ; 1 bytes @ 0x0
  5586                           
  5587  0020                     ??_OSCILLATOR_Initialize:	
  5588                           ; 1 bytes @ 0x0
  5589                           
  5590  0020                     ??_WDT_Initialize:	
  5591                           ; 1 bytes @ 0x0
  5592                           
  5593  0020                     ??_SPI2_Initialize:	
  5594                           ; 1 bytes @ 0x0
  5595                           
  5596  0020                     ??_PWM1_Initialize:	
  5597                           ; 1 bytes @ 0x0
  5598                           
  5599  0020                     ??_ADC_Initialize:	
  5600                           ; 1 bytes @ 0x0
  5601                           
  5602  0020                     ??_TMR2_Initialize:	
  5603                           ; 1 bytes @ 0x0
  5604                           
  5605  0020                     ??_resetGestureParameters:	
  5606                           ; 1 bytes @ 0x0
  5607                           
  5608  0020                     ??_decodeGesture:	
  5609                           ; 1 bytes @ 0x0
  5610                           
  5611  0020                     ??_I2C_Start:	
  5612                           ; 1 bytes @ 0x0
  5613                           
  5614  0020                     ??_I2C_ReStart:	
  5615                           ; 1 bytes @ 0x0
  5616                           
  5617  0020                     ??_I2C_Send_NACK:	
  5618                           ; 1 bytes @ 0x0
  5619                           
  5620  0020                     ??_I2C_Stop:	
  5621                           ; 1 bytes @ 0x0
  5622                           
  5623  0020                     ??_SYSTEM_Initialize:	
  5624                           ; 1 bytes @ 0x0
  5625                           
  5626  0020                     ??_i2c1_driver_isBufferFull:	
  5627                           ; 1 bytes @ 0x0
  5628                           
  5629  0020                     ??_SPI2_Exchange8bit:	
  5630                           ; 1 bytes @ 0x0
  5631                           
  5632  0020                     ?_strlen:	
  5633                           ; 1 bytes @ 0x0
  5634                           
  5635  0020                     ?_ADC_GetConversion:	
  5636                           ; 2 bytes @ 0x0
  5637                           
  5638  0020                     ?___wmul:	
  5639                           ; 2 bytes @ 0x0
  5640                           
  5641  0020                     i2c1_driver_TXData@d:	
  5642                           ; 2 bytes @ 0x0
  5643                           
  5644  0020                     SPI2_Exchange8bit@data:	
  5645                           ; 1 bytes @ 0x0
  5646                           
  5647  0020                     ___wmul@multiplier:	
  5648                           ; 1 bytes @ 0x0
  5649                           
  5650  0020                     strlen@s:	
  5651                           ; 2 bytes @ 0x0
  5652                           
  5653                           
  5654                           ; 2 bytes @ 0x0
  5655  0020                     	ds	1
  5656  0021                     ??_I2C_Write_Byte:	
  5657  0021                     ??_I2C_Read_Byte:	
  5658                           ; 1 bytes @ 0x1
  5659                           
  5660  0021                     ??_SPI_Write:	
  5661                           ; 1 bytes @ 0x1
  5662                           
  5663                           
  5664                           ; 1 bytes @ 0x1
  5665  0021                     	ds	1
  5666  0022                     ??_strlen:	
  5667  0022                     ??_ADC_GetConversion:	
  5668                           ; 1 bytes @ 0x2
  5669                           
  5670  0022                     SPI_Write@incoming:	
  5671                           ; 1 bytes @ 0x2
  5672                           
  5673  0022                     _decodeGesture$1540:	
  5674                           ; 1 bytes @ 0x2
  5675                           
  5676  0022                     ___wmul@multiplicand:	
  5677                           ; 2 bytes @ 0x2
  5678                           
  5679                           
  5680                           ; 2 bytes @ 0x2
  5681  0022                     	ds	1
  5682  0023                     ??_Display_Clear:	
  5683  0023                     ADC_GetConversion@channel:	
  5684                           ; 1 bytes @ 0x3
  5685                           
  5686  0023                     I2C_Write_Byte@Byte:	
  5687                           ; 1 bytes @ 0x3
  5688                           
  5689  0023                     strlen@a:	
  5690                           ; 1 bytes @ 0x3
  5691                           
  5692                           
  5693                           ; 2 bytes @ 0x3
  5694  0023                     	ds	1
  5695  0024                     ??___wmul:	
  5696  0024                     _decodeGesture$1541:	
  5697                           ; 1 bytes @ 0x4
  5698                           
  5699  0024                     I2C_Write_Byte@count:	
  5700                           ; 2 bytes @ 0x4
  5701                           
  5702  0024                     ___wmul@product:	
  5703                           ; 2 bytes @ 0x4
  5704                           
  5705                           
  5706                           ; 2 bytes @ 0x4
  5707  0024                     	ds	1
  5708  0025                     ?_Display_Name:	
  5709  0025                     Display_Name@string1:	
  5710                           ; 1 bytes @ 0x5
  5711                           
  5712                           
  5713                           ; 2 bytes @ 0x5
  5714  0025                     	ds	1
  5715  0026                     ??_wireReadDataByte:	
  5716  0026                     ?_wireWriteDataByte:	
  5717                           ; 1 bytes @ 0x6
  5718                           
  5719  0026                     ?_wireReadDataBlock:	
  5720                           ; 2 bytes @ 0x6
  5721                           
  5722  0026                     ?___awdiv:	
  5723                           ; 2 bytes @ 0x6
  5724                           
  5725  0026                     wireWriteDataByte@val:	
  5726                           ; 2 bytes @ 0x6
  5727                           
  5728  0026                     _decodeGesture$1542:	
  5729                           ; 1 bytes @ 0x6
  5730                           
  5731  0026                     wireReadDataBlock@val:	
  5732                           ; 2 bytes @ 0x6
  5733                           
  5734  0026                     ___awdiv@divisor:	
  5735                           ; 2 bytes @ 0x6
  5736                           
  5737                           
  5738                           ; 2 bytes @ 0x6
  5739  0026                     	ds	1
  5740  0027                     ??_Display_Name:	
  5741  0027                     wireReadDataByte@reg:	
  5742                           ; 1 bytes @ 0x7
  5743                           
  5744                           
  5745                           ; 1 bytes @ 0x7
  5746  0027                     	ds	1
  5747  0028                     wireReadDataByte@val:	
  5748  0028                     Display_Name@length:	
  5749                           ; 1 bytes @ 0x8
  5750                           
  5751  0028                     _decodeGesture$1543:	
  5752                           ; 2 bytes @ 0x8
  5753                           
  5754  0028                     wireReadDataBlock@len:	
  5755                           ; 2 bytes @ 0x8
  5756                           
  5757  0028                     ___awdiv@dividend:	
  5758                           ; 2 bytes @ 0x8
  5759                           
  5760                           
  5761                           ; 2 bytes @ 0x8
  5762  0028                     	ds	1
  5763  0029                     ??_isGestureAvailable:	
  5764  0029                     ??_wireWriteDataByte:	
  5765                           ; 1 bytes @ 0x9
  5766                           
  5767  0029                     ??_getMode:	
  5768                           ; 1 bytes @ 0x9
  5769                           
  5770  0029                     wireWriteDataByte@reg:	
  5771                           ; 1 bytes @ 0x9
  5772                           
  5773                           
  5774                           ; 1 bytes @ 0x9
  5775  0029                     	ds	1
  5776  002A                     ??_setLEDDrive:	
  5777  002A                     ??_setProximityGain:	
  5778                           ; 1 bytes @ 0xA
  5779                           
  5780  002A                     ??_setAmbientLightGain:	
  5781                           ; 1 bytes @ 0xA
  5782                           
  5783  002A                     ??_setProxIntLowThresh:	
  5784                           ; 1 bytes @ 0xA
  5785                           
  5786  002A                     ??_setProxIntHighThresh:	
  5787                           ; 1 bytes @ 0xA
  5788                           
  5789  002A                     ?_setLightIntLowThreshold:	
  5790                           ; 1 bytes @ 0xA
  5791                           
  5792  002A                     ?_setLightIntHighThreshold:	
  5793                           ; 1 bytes @ 0xA
  5794                           
  5795  002A                     ??_setGestureEnterThresh:	
  5796                           ; 1 bytes @ 0xA
  5797                           
  5798  002A                     ??_setGestureExitThresh:	
  5799                           ; 1 bytes @ 0xA
  5800                           
  5801  002A                     ??_setGestureGain:	
  5802                           ; 1 bytes @ 0xA
  5803                           
  5804  002A                     ??_setGestureLEDDrive:	
  5805                           ; 1 bytes @ 0xA
  5806                           
  5807  002A                     ??_setGestureWaitTime:	
  5808                           ; 1 bytes @ 0xA
  5809                           
  5810  002A                     ??_setGestureIntEnable:	
  5811                           ; 1 bytes @ 0xA
  5812                           
  5813  002A                     ??_setLEDBoost:	
  5814                           ; 1 bytes @ 0xA
  5815                           
  5816  002A                     ??_setGestureMode:	
  5817                           ; 1 bytes @ 0xA
  5818                           
  5819  002A                     ??_wireReadDataBlock:	
  5820                           ; 1 bytes @ 0xA
  5821                           
  5822  002A                     ??___awdiv:	
  5823                           ; 1 bytes @ 0xA
  5824                           
  5825  002A                     getMode@enable_value:	
  5826                           ; 1 bytes @ 0xA
  5827                           
  5828  002A                     isGestureAvailable@val:	
  5829                           ; 1 bytes @ 0xA
  5830                           
  5831  002A                     Display_Name@i:	
  5832                           ; 1 bytes @ 0xA
  5833                           
  5834  002A                     setLightIntLowThreshold@threshold:	
  5835                           ; 2 bytes @ 0xA
  5836                           
  5837  002A                     setLightIntHighThreshold@threshold:	
  5838                           ; 2 bytes @ 0xA
  5839                           
  5840  002A                     _decodeGesture$1544:	
  5841                           ; 2 bytes @ 0xA
  5842                           
  5843                           
  5844                           ; 2 bytes @ 0xA
  5845  002A                     	ds	1
  5846  002B                     ?_setMode:	
  5847  002B                     setMode@enable:	
  5848                           ; 1 bytes @ 0xB
  5849                           
  5850  002B                     setAmbientLightGain@drive:	
  5851                           ; 1 bytes @ 0xB
  5852                           
  5853  002B                     setProxIntLowThresh@threshold:	
  5854                           ; 1 bytes @ 0xB
  5855                           
  5856  002B                     setProxIntHighThresh@threshold:	
  5857                           ; 1 bytes @ 0xB
  5858                           
  5859  002B                     setGestureEnterThresh@threshold:	
  5860                           ; 1 bytes @ 0xB
  5861                           
  5862  002B                     setGestureExitThresh@threshold:	
  5863                           ; 1 bytes @ 0xB
  5864                           
  5865  002B                     setGestureWaitTime@time:	
  5866                           ; 1 bytes @ 0xB
  5867                           
  5868  002B                     setGestureIntEnable@val:	
  5869                           ; 1 bytes @ 0xB
  5870                           
  5871  002B                     setGestureMode@mode:	
  5872                           ; 1 bytes @ 0xB
  5873                           
  5874  002B                     ___awdiv@counter:	
  5875                           ; 1 bytes @ 0xB
  5876                           
  5877                           
  5878                           ; 1 bytes @ 0xB
  5879  002B                     	ds	1
  5880  002C                     ??_Get_ADC:	
  5881  002C                     ??_setMode:	
  5882                           ; 1 bytes @ 0xC
  5883                           
  5884  002C                     ??_setLightIntLowThreshold:	
  5885                           ; 1 bytes @ 0xC
  5886                           
  5887  002C                     ??_setLightIntHighThreshold:	
  5888                           ; 1 bytes @ 0xC
  5889                           
  5890  002C                     setLEDDrive@val:	
  5891                           ; 1 bytes @ 0xC
  5892                           
  5893  002C                     setProximityGain@val:	
  5894                           ; 1 bytes @ 0xC
  5895                           
  5896  002C                     setAmbientLightGain@val:	
  5897                           ; 1 bytes @ 0xC
  5898                           
  5899  002C                     setGestureGain@val:	
  5900                           ; 1 bytes @ 0xC
  5901                           
  5902  002C                     setGestureLEDDrive@val:	
  5903                           ; 1 bytes @ 0xC
  5904                           
  5905  002C                     setGestureWaitTime@val:	
  5906                           ; 1 bytes @ 0xC
  5907                           
  5908  002C                     setGestureIntEnable@enable:	
  5909                           ; 1 bytes @ 0xC
  5910                           
  5911  002C                     setLEDBoost@val:	
  5912                           ; 1 bytes @ 0xC
  5913                           
  5914  002C                     setGestureMode@val:	
  5915                           ; 1 bytes @ 0xC
  5916                           
  5917  002C                     ___awdiv@sign:	
  5918                           ; 1 bytes @ 0xC
  5919                           
  5920  002C                     _decodeGesture$1545:	
  5921                           ; 1 bytes @ 0xC
  5922                           
  5923                           
  5924                           ; 2 bytes @ 0xC
  5925  002C                     	ds	1
  5926  002D                     setLEDDrive@drive:	
  5927  002D                     setProximityGain@drive:	
  5928                           ; 1 bytes @ 0xD
  5929                           
  5930  002D                     setLightIntLowThreshold@val_low:	
  5931                           ; 1 bytes @ 0xD
  5932                           
  5933  002D                     setLightIntHighThreshold@val_low:	
  5934                           ; 1 bytes @ 0xD
  5935                           
  5936  002D                     setGestureGain@gain:	
  5937                           ; 1 bytes @ 0xD
  5938                           
  5939  002D                     setGestureLEDDrive@drive:	
  5940                           ; 1 bytes @ 0xD
  5941                           
  5942  002D                     setLEDBoost@boost:	
  5943                           ; 1 bytes @ 0xD
  5944                           
  5945  002D                     ___awdiv@quotient:	
  5946                           ; 1 bytes @ 0xD
  5947                           
  5948                           
  5949                           ; 2 bytes @ 0xD
  5950  002D                     	ds	1
  5951  002E                     setMode@reg_val:	
  5952  002E                     setLightIntLowThreshold@val_high:	
  5953                           ; 1 bytes @ 0xE
  5954                           
  5955  002E                     setLightIntHighThreshold@val_high:	
  5956                           ; 1 bytes @ 0xE
  5957                           
  5958  002E                     _decodeGesture$1546:	
  5959                           ; 1 bytes @ 0xE
  5960                           
  5961                           
  5962                           ; 2 bytes @ 0xE
  5963  002E                     	ds	1
  5964  002F                     ??_processGestureData:	
  5965  002F                     setMode@mode:	
  5966                           ; 1 bytes @ 0xF
  5967                           
  5968  002F                     wireReadDataBlock@reg:	
  5969                           ; 1 bytes @ 0xF
  5970                           
  5971  002F                     Get_ADC@val:	
  5972                           ; 1 bytes @ 0xF
  5973                           
  5974                           
  5975                           ; 2 bytes @ 0xF
  5976  002F                     	ds	1
  5977  0030                     ??_initialize:	
  5978  0030                     ??_enableGestureSensor:	
  5979                           ; 1 bytes @ 0x10
  5980                           
  5981  0030                     ??_enablePower:	
  5982                           ; 1 bytes @ 0x10
  5983                           
  5984  0030                     wireReadDataBlock@j:	
  5985                           ; 1 bytes @ 0x10
  5986                           
  5987  0030                     _decodeGesture$1547:	
  5988                           ; 1 bytes @ 0x10
  5989                           
  5990                           
  5991                           ; 2 bytes @ 0x10
  5992  0030                     	ds	1
  5993  0031                     initialize@id:	
  5994  0031                     enableGestureSensor@interrupts:	
  5995                           ; 1 bytes @ 0x11
  5996                           
  5997  0031                     processGestureData@ud_ratio_first:	
  5998                           ; 1 bytes @ 0x11
  5999                           
  6000                           
  6001                           ; 2 bytes @ 0x11
  6002  0031                     	ds	2
  6003  0033                     processGestureData@lr_ratio_first:	
  6004                           
  6005                           ; 2 bytes @ 0x13
  6006  0033                     	ds	2
  6007  0035                     processGestureData@ud_ratio_last:	
  6008                           
  6009                           ; 2 bytes @ 0x15
  6010  0035                     	ds	2
  6011  0037                     processGestureData@lr_ratio_last:	
  6012                           
  6013                           ; 2 bytes @ 0x17
  6014  0037                     	ds	2
  6015  0039                     _processGestureData$1535:	
  6016                           
  6017                           ; 2 bytes @ 0x19
  6018  0039                     	ds	2
  6019  003B                     _processGestureData$1536:	
  6020                           
  6021                           ; 2 bytes @ 0x1B
  6022  003B                     	ds	2
  6023  003D                     _processGestureData$1537:	
  6024                           
  6025                           ; 2 bytes @ 0x1D
  6026  003D                     	ds	2
  6027  003F                     _processGestureData$1538:	
  6028                           
  6029                           ; 2 bytes @ 0x1F
  6030  003F                     	ds	2
  6031  0041                     processGestureData@u_last:	
  6032                           
  6033                           ; 1 bytes @ 0x21
  6034  0041                     	ds	1
  6035  0042                     processGestureData@d_last:	
  6036                           
  6037                           ; 1 bytes @ 0x22
  6038  0042                     	ds	1
  6039  0043                     processGestureData@l_last:	
  6040                           
  6041                           ; 1 bytes @ 0x23
  6042  0043                     	ds	1
  6043  0044                     processGestureData@r_last:	
  6044                           
  6045                           ; 1 bytes @ 0x24
  6046  0044                     	ds	1
  6047  0045                     processGestureData@u_first:	
  6048                           
  6049                           ; 1 bytes @ 0x25
  6050  0045                     	ds	1
  6051  0046                     processGestureData@d_first:	
  6052                           
  6053                           ; 1 bytes @ 0x26
  6054  0046                     	ds	1
  6055  0047                     processGestureData@l_first:	
  6056                           
  6057                           ; 1 bytes @ 0x27
  6058  0047                     	ds	1
  6059  0048                     processGestureData@r_first:	
  6060                           
  6061                           ; 1 bytes @ 0x28
  6062  0048                     	ds	1
  6063  0049                     processGestureData@ud_delta:	
  6064                           
  6065                           ; 2 bytes @ 0x29
  6066  0049                     	ds	2
  6067  004B                     processGestureData@lr_delta:	
  6068                           
  6069                           ; 2 bytes @ 0x2B
  6070  004B                     	ds	2
  6071  004D                     processGestureData@i:	
  6072                           
  6073                           ; 2 bytes @ 0x2D
  6074  004D                     	ds	2
  6075  004F                     ?_readGesture:	
  6076                           
  6077                           ; 2 bytes @ 0x2F
  6078  004F                     	ds	2
  6079  0051                     ??_readGesture:	
  6080                           
  6081                           ; 1 bytes @ 0x31
  6082  0051                     	ds	2
  6083  0053                     readGesture@motion:	
  6084                           
  6085                           ; 2 bytes @ 0x33
  6086  0053                     	ds	2
  6087  0055                     readGesture@gstatus:	
  6088                           
  6089                           ; 1 bytes @ 0x35
  6090  0055                     	ds	1
  6091  0056                     readGesture@bytes_read:	
  6092                           
  6093                           ; 2 bytes @ 0x36
  6094  0056                     	ds	2
  6095  0058                     readGesture@fifo_level:	
  6096                           
  6097                           ; 1 bytes @ 0x38
  6098  0058                     	ds	1
  6099  0059                     readGesture@i:	
  6100                           
  6101                           ; 2 bytes @ 0x39
  6102  0059                     	ds	2
  6103  005B                     ??_handleGesture:	
  6104                           
  6105                           ; 1 bytes @ 0x3B
  6106  005B                     	ds	1
  6107  005C                     ??_main:	
  6108                           
  6109                           	psect	maintext
  6110  0C56                     __pmaintext:	
  6111                           ; 1 bytes @ 0x3C
  6112 ;;
  6113 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  6114 ;;
  6115 ;; *************** function _main *****************
  6116 ;; Defined at:
  6117 ;;		line 111 in file "main.c"
  6118 ;; Parameters:    Size  Location     Type
  6119 ;;		None
  6120 ;; Auto vars:     Size  Location     Type
  6121 ;;  count           2    0        unsigned int 
  6122 ;;  temp            2    0        int 
  6123 ;;  startSystem     1    0        _Bool 
  6124 ;; Return value:  Size  Location     Type
  6125 ;;                  1    wreg      void 
  6126 ;; Registers used:
  6127 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6128 ;; Tracked objects:
  6129 ;;		On entry : B1F/0
  6130 ;;		On exit  : 0/0
  6131 ;;		Unchanged: 0/0
  6132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6134 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6135 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6136 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6137 ;;Total ram usage:        2 bytes
  6138 ;; Hardware stack levels required when called:   12
  6139 ;; This function calls:
  6140 ;;		_Display_Clear
  6141 ;;		_Display_Name
  6142 ;;		_Get_ADC
  6143 ;;		_SYSTEM_Initialize
  6144 ;;		_enableGestureSensor
  6145 ;;		_handleGesture
  6146 ;;		_initialize
  6147 ;;		_isGestureAvailable
  6148 ;; This function is called by:
  6149 ;;		Startup code after reset
  6150 ;; This function uses a non-reentrant model
  6151 ;;
  6152                           
  6153                           
  6154                           ;psect for function _main
  6155  0C56                     _main:	
  6156                           
  6157                           ;main.c: 114:     SYSTEM_Initialize();
  6158                           
  6159                           ;incstack = 0
  6160                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6161  0C56  318A  2232  318C   	fcall	_SYSTEM_Initialize
  6162                           
  6163                           ;main.c: 120:     (INTCONbits.GIE = 1);
  6164  0C59  178B               	bsf	11,7	;volatile
  6165                           
  6166                           ;main.c: 123:     (INTCONbits.PEIE = 1);
  6167  0C5A  170B               	bsf	11,6	;volatile
  6168                           
  6169                           ;main.c: 126:     Display_Clear();
  6170  0C5B  3189  2195  318C   	fcall	_Display_Clear
  6171                           
  6172                           ;main.c: 129:         if(initialize()){
  6173  0C5E  3184  24CA  318C   	fcall	_initialize
  6174                           
  6175                           ;main.c: 132:         if(enableGestureSensor(0)){
  6176  0C61  3000               	movlw	0
  6177  0C62  318F  279C  318C   	fcall	_enableGestureSensor
  6178  0C65                     l7083:	
  6179                           
  6180                           ;main.c: 140:     {;main.c: 146:             if(start == 1) {
  6181  0C65  0020               	movlb	0	; select bank0
  6182  0C66  036E               	decf	_start,w
  6183  0C67  1D03               	btfss	3,2
  6184  0C68  2C77               	goto	l7089
  6185                           
  6186                           ;main.c: 147:                 Display_Name(names[name]);
  6187  0C69  355C               	lslf	_name,w
  6188  0C6A  3E60               	addlw	(low (_names| (0+256)))& (0+255)
  6189  0C6B  0086               	movwf	6
  6190  0C6C  3001               	movlw	1	; select bank2/3
  6191  0C6D  0087               	movwf	7
  6192  0C6E  3F40               	moviw [0]fsr1
  6193  0C6F  00A5               	movwf	Display_Name@string1
  6194  0C70  3F41               	moviw [1]fsr1
  6195  0C71  00A6               	movwf	Display_Name@string1+1
  6196  0C72  318D  2581  318C   	fcall	_Display_Name
  6197                           
  6198                           ;main.c: 148:                 start = 0;
  6199  0C75  0020               	movlb	0	; select bank0
  6200  0C76  01EE               	clrf	_start
  6201  0C77                     l7089:	
  6202                           
  6203                           ;main.c: 150:             Get_ADC();
  6204  0C77  3185  25E0  318C   	fcall	_Get_ADC
  6205                           
  6206                           ;main.c: 152:             if( isGestureAvailable()){
  6207  0C7A  3189  21A6  318C   	fcall	_isGestureAvailable
  6208  0C7D  3A00               	xorlw	0
  6209  0C7E  1903               	skipnz
  6210  0C7F  2C65               	goto	l7083
  6211                           
  6212                           ;main.c: 153:                 handleGesture();
  6213  0C80  318F  2742  318C   	fcall	_handleGesture
  6214  0C83  2C65               	goto	l7083
  6215  0C84                     __end_of_main:	
  6216                           
  6217                           	psect	text1
  6218  04CA                     __ptext1:	
  6219 ;; *************** function _initialize *****************
  6220 ;; Defined at:
  6221 ;;		line 20 in file "APDS9960.c"
  6222 ;; Parameters:    Size  Location     Type
  6223 ;;		None
  6224 ;; Auto vars:     Size  Location     Type
  6225 ;;  id              1   17[BANK0 ] unsigned char 
  6226 ;; Return value:  Size  Location     Type
  6227 ;;                  1    wreg      _Bool 
  6228 ;; Registers used:
  6229 ;;		wreg, status,2, status,0, pclath, cstack
  6230 ;; Tracked objects:
  6231 ;;		On entry : 0/0
  6232 ;;		On exit  : 0/0
  6233 ;;		Unchanged: 0/0
  6234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6235 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6236 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6237 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6238 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6239 ;;Total ram usage:        2 bytes
  6240 ;; Hardware stack levels used:    1
  6241 ;; Hardware stack levels required when called:   10
  6242 ;; This function calls:
  6243 ;;		_i2c1_driver_open
  6244 ;;		_setAmbientLightGain
  6245 ;;		_setGestureEnterThresh
  6246 ;;		_setGestureExitThresh
  6247 ;;		_setGestureGain
  6248 ;;		_setGestureIntEnable
  6249 ;;		_setGestureLEDDrive
  6250 ;;		_setGestureWaitTime
  6251 ;;		_setLEDDrive
  6252 ;;		_setLightIntHighThreshold
  6253 ;;		_setLightIntLowThreshold
  6254 ;;		_setMode
  6255 ;;		_setProxIntHighThresh
  6256 ;;		_setProxIntLowThresh
  6257 ;;		_setProximityGain
  6258 ;;		_wireReadDataByte
  6259 ;;		_wireWriteDataByte
  6260 ;; This function is called by:
  6261 ;;		_main
  6262 ;; This function uses a non-reentrant model
  6263 ;;
  6264                           
  6265                           
  6266                           ;psect for function _initialize
  6267  04CA                     _initialize:	
  6268                           
  6269                           ;APDS9960.c: 25:     i2c1_driver_open();
  6270                           
  6271                           ;incstack = 0
  6272                           ; Regs used in _initialize: [wreg+status,2+status,0+pclath+cstack]
  6273  04CA  3189  2157  3184   	fcall	_i2c1_driver_open
  6274                           
  6275                           ;APDS9960.c: 31:     id = wireReadDataByte(0x92);
  6276  04CD  3092               	movlw	146
  6277  04CE  318A  22F1  3184   	fcall	_wireReadDataByte
  6278  04D1  0020               	movlb	0	; select bank0
  6279  04D2  00B0               	movwf	??_initialize
  6280  04D3  0830               	movf	??_initialize,w
  6281  04D4  00B1               	movwf	initialize@id
  6282                           
  6283                           ;APDS9960.c: 33:     if( !(id == 0xAB ||id == 0x9C ) )
  6284  04D5  30AB               	movlw	171
  6285  04D6  0631               	xorwf	initialize@id,w
  6286  04D7  1903               	btfsc	3,2
  6287  04D8  2CDF               	goto	l6713
  6288  04D9  309C               	movlw	156
  6289  04DA  0631               	xorwf	initialize@id,w
  6290  04DB  1903               	btfsc	3,2
  6291  04DC  2CDF               	goto	l6713
  6292  04DD                     l6709:	
  6293                           
  6294                           ;APDS9960.c: 34:     {;APDS9960.c: 35:      return 0;
  6295  04DD  3000               	movlw	0
  6296  04DE  0008               	return
  6297  04DF                     l6713:	
  6298                           
  6299                           ;APDS9960.c: 39:     setMode(7, 0);
  6300  04DF  01AB               	clrf	setMode@enable
  6301  04E0  3007               	movlw	7
  6302  04E1  318E  26A1  3184   	fcall	_setMode
  6303                           
  6304                           ;APDS9960.c: 41:     wireWriteDataByte(0x81, 219);
  6305  04E4  30DB               	movlw	219
  6306  04E5  0020               	movlb	0	; select bank0
  6307  04E6  00B0               	movwf	??_initialize
  6308  04E7  0830               	movf	??_initialize,w
  6309  04E8  00A6               	movwf	wireWriteDataByte@val
  6310  04E9  3081               	movlw	129
  6311  04EA  318A  2262  3184   	fcall	_wireWriteDataByte
  6312                           
  6313                           ;APDS9960.c: 42:     wireWriteDataByte(0x83, 246);
  6314  04ED  30F6               	movlw	246
  6315  04EE  0020               	movlb	0	; select bank0
  6316  04EF  00B0               	movwf	??_initialize
  6317  04F0  0830               	movf	??_initialize,w
  6318  04F1  00A6               	movwf	wireWriteDataByte@val
  6319  04F2  3083               	movlw	131
  6320  04F3  318A  2262  3184   	fcall	_wireWriteDataByte
  6321                           
  6322                           ;APDS9960.c: 43:     wireWriteDataByte(0x8E, 0x87);
  6323  04F6  3087               	movlw	135
  6324  04F7  0020               	movlb	0	; select bank0
  6325  04F8  00B0               	movwf	??_initialize
  6326  04F9  0830               	movf	??_initialize,w
  6327  04FA  00A6               	movwf	wireWriteDataByte@val
  6328  04FB  308E               	movlw	142
  6329  04FC  318A  2262  3184   	fcall	_wireWriteDataByte
  6330                           
  6331                           ;APDS9960.c: 44:     wireWriteDataByte(0x9D, 0) ;
  6332  04FF  0020               	movlb	0	; select bank0
  6333  0500  01A6               	clrf	wireWriteDataByte@val
  6334  0501  309D               	movlw	157
  6335  0502  318A  2262  3184   	fcall	_wireWriteDataByte
  6336                           
  6337                           ;APDS9960.c: 45:     wireWriteDataByte(0x9E, 0) ;
  6338  0505  0020               	movlb	0	; select bank0
  6339  0506  01A6               	clrf	wireWriteDataByte@val
  6340  0507  309E               	movlw	158
  6341  0508  318A  2262  3184   	fcall	_wireWriteDataByte
  6342                           
  6343                           ;APDS9960.c: 46:     wireWriteDataByte(0x8D, 0x60) ;
  6344  050B  3060               	movlw	96
  6345  050C  0020               	movlb	0	; select bank0
  6346  050D  00B0               	movwf	??_initialize
  6347  050E  0830               	movf	??_initialize,w
  6348  050F  00A6               	movwf	wireWriteDataByte@val
  6349  0510  308D               	movlw	141
  6350  0511  318A  2262  3184   	fcall	_wireWriteDataByte
  6351                           
  6352                           ;APDS9960.c: 47:     setLEDDrive(0);
  6353  0514  3000               	movlw	0
  6354  0515  318B  23D7  3184   	fcall	_setLEDDrive
  6355                           
  6356                           ;APDS9960.c: 48:     setProximityGain(2);
  6357  0518  3002               	movlw	2
  6358  0519  3187  27D6  3184   	fcall	_setProximityGain
  6359                           
  6360                           ;APDS9960.c: 49:     setAmbientLightGain(1);
  6361  051C  3001               	movlw	1
  6362  051D  318A  22D3  3184   	fcall	_setAmbientLightGain
  6363                           
  6364                           ;APDS9960.c: 51:     if( !setProxIntLowThresh(0) ) {
  6365  0520  3000               	movlw	0
  6366  0521  3189  21F2  3184   	fcall	_setProxIntLowThresh
  6367  0524  3A00               	xorlw	0
  6368  0525  1903               	btfsc	3,2
  6369  0526  2CDD               	goto	l6709
  6370                           
  6371                           ;APDS9960.c: 54:     if( !setProxIntHighThresh(50) ) {
  6372  0527  3032               	movlw	50
  6373  0528  3189  21DF  3184   	fcall	_setProxIntHighThresh
  6374  052B  3A00               	xorlw	0
  6375  052C  1903               	btfsc	3,2
  6376  052D  2CDD               	goto	l6709
  6377                           
  6378                           ;APDS9960.c: 59:     if( !setLightIntLowThreshold(0xFFFF) ) {
  6379  052E  30FF               	movlw	255
  6380  052F  0020               	movlb	0	; select bank0
  6381  0530  00AA               	movwf	setLightIntLowThreshold@threshold
  6382  0531  30FF               	movlw	255
  6383  0532  00AB               	movwf	setLightIntLowThreshold@threshold+1
  6384  0533  318B  23B0  3184   	fcall	_setLightIntLowThreshold
  6385  0536  3A00               	xorlw	0
  6386  0537  1903               	btfsc	3,2
  6387  0538  2CDD               	goto	l6709
  6388                           
  6389                           ;APDS9960.c: 62:     if( !setLightIntHighThreshold(0) ) {
  6390  0539  3000               	movlw	0
  6391  053A  0020               	movlb	0	; select bank0
  6392  053B  00AA               	movwf	setLightIntHighThreshold@threshold
  6393  053C  00AB               	movwf	setLightIntHighThreshold@threshold+1
  6394  053D  318B  2389  3184   	fcall	_setLightIntHighThreshold
  6395  0540  3A00               	xorlw	0
  6396  0541  1903               	btfsc	3,2
  6397  0542  2CDD               	goto	l6709
  6398                           
  6399                           ;APDS9960.c: 66:     if( !wireWriteDataByte(0x8C, 0x11) ) {
  6400  0543  3011               	movlw	17
  6401  0544  0020               	movlb	0	; select bank0
  6402  0545  00B0               	movwf	??_initialize
  6403  0546  0830               	movf	??_initialize,w
  6404  0547  00A6               	movwf	wireWriteDataByte@val
  6405  0548  308C               	movlw	140
  6406  0549  318A  2262  3184   	fcall	_wireWriteDataByte
  6407  054C  0020               	movlb	0	; select bank0
  6408  054D  0826               	movf	?_wireWriteDataByte,w
  6409  054E  0427               	iorwf	?_wireWriteDataByte+1,w
  6410  054F  1903               	btfsc	3,2
  6411  0550  2CDD               	goto	l6709
  6412                           
  6413                           ;APDS9960.c: 71:     if( !wireWriteDataByte(0x90, 0x01) ) {
  6414  0551  01A6               	clrf	wireWriteDataByte@val
  6415  0552  0AA6               	incf	wireWriteDataByte@val,f
  6416  0553  3090               	movlw	144
  6417  0554  318A  2262  3184   	fcall	_wireWriteDataByte
  6418  0557  0020               	movlb	0	; select bank0
  6419  0558  0826               	movf	?_wireWriteDataByte,w
  6420  0559  0427               	iorwf	?_wireWriteDataByte+1,w
  6421  055A  1903               	btfsc	3,2
  6422  055B  2CDD               	goto	l6709
  6423                           
  6424                           ;APDS9960.c: 74:     if( !wireWriteDataByte(0x9F, 0) ) {
  6425  055C  01A6               	clrf	wireWriteDataByte@val
  6426  055D  309F               	movlw	159
  6427  055E  318A  2262  3184   	fcall	_wireWriteDataByte
  6428  0561  0020               	movlb	0	; select bank0
  6429  0562  0826               	movf	?_wireWriteDataByte,w
  6430  0563  0427               	iorwf	?_wireWriteDataByte+1,w
  6431  0564  1903               	btfsc	3,2
  6432  0565  2CDD               	goto	l6709
  6433                           
  6434                           ;APDS9960.c: 78:     if( !setGestureEnterThresh(40) ) {
  6435  0566  3028               	movlw	40
  6436  0567  3189  21B9  3184   	fcall	_setGestureEnterThresh
  6437  056A  3A00               	xorlw	0
  6438  056B  1903               	btfsc	3,2
  6439  056C  2CDD               	goto	l6709
  6440                           
  6441                           ;APDS9960.c: 82:     if( !setGestureExitThresh(30) ) {
  6442  056D  301E               	movlw	30
  6443  056E  3189  21CC  3184   	fcall	_setGestureExitThresh
  6444  0571  3A00               	xorlw	0
  6445  0572  1903               	btfsc	3,2
  6446  0573  2CDD               	goto	l6709
  6447                           
  6448                           ;APDS9960.c: 85:     if( !wireWriteDataByte(0xA2, 0x40) ) {
  6449  0574  3040               	movlw	64
  6450  0575  0020               	movlb	0	; select bank0
  6451  0576  00B0               	movwf	??_initialize
  6452  0577  0830               	movf	??_initialize,w
  6453  0578  00A6               	movwf	wireWriteDataByte@val
  6454  0579  30A2               	movlw	162
  6455  057A  318A  2262  3184   	fcall	_wireWriteDataByte
  6456  057D  0020               	movlb	0	; select bank0
  6457  057E  0826               	movf	?_wireWriteDataByte,w
  6458  057F  0427               	iorwf	?_wireWriteDataByte+1,w
  6459  0580  1903               	btfsc	3,2
  6460  0581  2CDD               	goto	l6709
  6461                           
  6462                           ;APDS9960.c: 88:     if( !setGestureGain(2) ) {
  6463  0582  3002               	movlw	2
  6464  0583  318C  24E7  3184   	fcall	_setGestureGain
  6465  0586  3A00               	xorlw	0
  6466  0587  1903               	btfsc	3,2
  6467  0588  2CDD               	goto	l6709
  6468                           
  6469                           ;APDS9960.c: 91:     if( !setGestureLEDDrive(0) ) {
  6470  0589  3000               	movlw	0
  6471  058A  318D  2519  3184   	fcall	_setGestureLEDDrive
  6472  058D  3A00               	xorlw	0
  6473  058E  1903               	btfsc	3,2
  6474  058F  2CDD               	goto	l6709
  6475                           
  6476                           ;APDS9960.c: 95:     if( !setGestureWaitTime(1) ) {
  6477  0590  3001               	movlw	1
  6478  0591  318B  2362  3184   	fcall	_setGestureWaitTime
  6479  0594  3A00               	xorlw	0
  6480  0595  1903               	btfsc	3,2
  6481  0596  2CDD               	goto	l6709
  6482                           
  6483                           ;APDS9960.c: 98:     if( !wireWriteDataByte(0xA4, 0) ) {
  6484  0597  0020               	movlb	0	; select bank0
  6485  0598  01A6               	clrf	wireWriteDataByte@val
  6486  0599  30A4               	movlw	164
  6487  059A  318A  2262  3184   	fcall	_wireWriteDataByte
  6488  059D  0020               	movlb	0	; select bank0
  6489  059E  0826               	movf	?_wireWriteDataByte,w
  6490  059F  0427               	iorwf	?_wireWriteDataByte+1,w
  6491  05A0  1903               	btfsc	3,2
  6492  05A1  2CDD               	goto	l6709
  6493                           
  6494                           ;APDS9960.c: 101:     if( !wireWriteDataByte(0xA5, 0) ) {
  6495  05A2  01A6               	clrf	wireWriteDataByte@val
  6496  05A3  30A5               	movlw	165
  6497  05A4  318A  2262  3184   	fcall	_wireWriteDataByte
  6498  05A7  0020               	movlb	0	; select bank0
  6499  05A8  0826               	movf	?_wireWriteDataByte,w
  6500  05A9  0427               	iorwf	?_wireWriteDataByte+1,w
  6501  05AA  1903               	btfsc	3,2
  6502  05AB  2CDD               	goto	l6709
  6503                           
  6504                           ;APDS9960.c: 104:     if( !wireWriteDataByte(0xA7, 0) ) {
  6505  05AC  01A6               	clrf	wireWriteDataByte@val
  6506  05AD  30A7               	movlw	167
  6507  05AE  318A  2262  3184   	fcall	_wireWriteDataByte
  6508  05B1  0020               	movlb	0	; select bank0
  6509  05B2  0826               	movf	?_wireWriteDataByte,w
  6510  05B3  0427               	iorwf	?_wireWriteDataByte+1,w
  6511  05B4  1903               	btfsc	3,2
  6512  05B5  2CDD               	goto	l6709
  6513                           
  6514                           ;APDS9960.c: 107:     if( !wireWriteDataByte(0xA9, 0) ) {
  6515  05B6  01A6               	clrf	wireWriteDataByte@val
  6516  05B7  30A9               	movlw	169
  6517  05B8  318A  2262  3184   	fcall	_wireWriteDataByte
  6518  05BB  0020               	movlb	0	; select bank0
  6519  05BC  0826               	movf	?_wireWriteDataByte,w
  6520  05BD  0427               	iorwf	?_wireWriteDataByte+1,w
  6521  05BE  1903               	btfsc	3,2
  6522  05BF  2CDD               	goto	l6709
  6523                           
  6524                           ;APDS9960.c: 110:     if( !wireWriteDataByte(0xA6, 0xC9) ) {
  6525  05C0  30C9               	movlw	201
  6526  05C1  00B0               	movwf	??_initialize
  6527  05C2  0830               	movf	??_initialize,w
  6528  05C3  00A6               	movwf	wireWriteDataByte@val
  6529  05C4  30A6               	movlw	166
  6530  05C5  318A  2262  3184   	fcall	_wireWriteDataByte
  6531  05C8  0020               	movlb	0	; select bank0
  6532  05C9  0826               	movf	?_wireWriteDataByte,w
  6533  05CA  0427               	iorwf	?_wireWriteDataByte+1,w
  6534  05CB  1903               	btfsc	3,2
  6535  05CC  2CDD               	goto	l6709
  6536                           
  6537                           ;APDS9960.c: 113:     if( !wireWriteDataByte(0xAA, 0) ) {
  6538  05CD  01A6               	clrf	wireWriteDataByte@val
  6539  05CE  30AA               	movlw	170
  6540  05CF  318A  2262  3184   	fcall	_wireWriteDataByte
  6541  05D2  0020               	movlb	0	; select bank0
  6542  05D3  0826               	movf	?_wireWriteDataByte,w
  6543  05D4  0427               	iorwf	?_wireWriteDataByte+1,w
  6544  05D5  1903               	btfsc	3,2
  6545  05D6  2CDD               	goto	l6709
  6546                           
  6547                           ;APDS9960.c: 116:     if( !setGestureIntEnable(0) ) {
  6548  05D7  3000               	movlw	0
  6549  05D8  318C  242B  3184   	fcall	_setGestureIntEnable
  6550  05DB  3A00               	xorlw	0
  6551  05DC  1903               	btfsc	3,2
  6552  05DD  2CDD               	goto	l6709
  6553                           
  6554                           ;APDS9960.c: 120:     return 1;
  6555  05DE  3001               	movlw	1
  6556  05DF  0008               	return
  6557  05E0                     __end_of_initialize:	
  6558                           
  6559                           	psect	text2
  6560  07D6                     __ptext2:	
  6561 ;; *************** function _setProximityGain *****************
  6562 ;; Defined at:
  6563 ;;		line 192 in file "APDS9960.c"
  6564 ;; Parameters:    Size  Location     Type
  6565 ;;  drive           1    wreg     unsigned char 
  6566 ;; Auto vars:     Size  Location     Type
  6567 ;;  drive           1   13[BANK0 ] unsigned char 
  6568 ;;  val             1   12[BANK0 ] unsigned char 
  6569 ;; Return value:  Size  Location     Type
  6570 ;;                  1    wreg      _Bool 
  6571 ;; Registers used:
  6572 ;;		wreg, status,2, status,0, pclath, cstack
  6573 ;; Tracked objects:
  6574 ;;		On entry : 0/0
  6575 ;;		On exit  : 0/0
  6576 ;;		Unchanged: 0/0
  6577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6578 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6579 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6580 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6581 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6582 ;;Total ram usage:        4 bytes
  6583 ;; Hardware stack levels used:    1
  6584 ;; Hardware stack levels required when called:    8
  6585 ;; This function calls:
  6586 ;;		_wireReadDataByte
  6587 ;;		_wireWriteDataByte
  6588 ;; This function is called by:
  6589 ;;		_initialize
  6590 ;; This function uses a non-reentrant model
  6591 ;;
  6592                           
  6593                           
  6594                           ;psect for function _setProximityGain
  6595  07D6                     _setProximityGain:	
  6596                           
  6597                           ;incstack = 0
  6598                           ; Regs used in _setProximityGain: [wreg+status,2+status,0+pclath+cstack]
  6599                           ;setProximityGain@drive stored from wreg
  6600  07D6  0020               	movlb	0	; select bank0
  6601  07D7  00AD               	movwf	setProximityGain@drive
  6602                           
  6603                           ;APDS9960.c: 192: _Bool setProximityGain(uint8_t drive);APDS9960.c: 193: {;APDS9960.c: 1
      +                          94:     uint8_t val;;APDS9960.c: 197:     val=wireReadDataByte(0x8F);
  6604  07D8  308F               	movlw	143
  6605  07D9  318A  22F1  3187   	fcall	_wireReadDataByte
  6606  07DC  0020               	movlb	0	; select bank0
  6607  07DD  00AA               	movwf	??_setProximityGain
  6608  07DE  082A               	movf	??_setProximityGain,w
  6609  07DF  00AC               	movwf	setProximityGain@val
  6610                           
  6611                           ;APDS9960.c: 199:     drive &= 0b00000011;
  6612  07E0  3003               	movlw	3
  6613  07E1  00AA               	movwf	??_setProximityGain
  6614  07E2  082A               	movf	??_setProximityGain,w
  6615  07E3  05AD               	andwf	setProximityGain@drive,f
  6616                           
  6617                           ;APDS9960.c: 200:     drive = drive << 2;
  6618  07E4  082D               	movf	setProximityGain@drive,w
  6619  07E5  00AA               	movwf	??_setProximityGain
  6620  07E6  3001               	movlw	1
  6621  07E7                     u5595:	
  6622  07E7  35AA               	lslf	??_setProximityGain,f
  6623  07E8  3EFF               	addlw	-1
  6624  07E9  1D03               	skipz
  6625  07EA  2FE7               	goto	u5595
  6626  07EB  352A               	lslf	??_setProximityGain,w
  6627  07EC  00AB               	movwf	??_setProximityGain+1
  6628  07ED  082B               	movf	??_setProximityGain+1,w
  6629  07EE  00AD               	movwf	setProximityGain@drive
  6630                           
  6631                           ;APDS9960.c: 201:     val &= 0b11110011;
  6632  07EF  30F3               	movlw	243
  6633  07F0  00AA               	movwf	??_setProximityGain
  6634  07F1  082A               	movf	??_setProximityGain,w
  6635  07F2  05AC               	andwf	setProximityGain@val,f
  6636                           
  6637                           ;APDS9960.c: 202:     val |= drive;
  6638  07F3  082D               	movf	setProximityGain@drive,w
  6639  07F4  00AA               	movwf	??_setProximityGain
  6640  07F5  082A               	movf	??_setProximityGain,w
  6641  07F6  04AC               	iorwf	setProximityGain@val,f
  6642                           
  6643                           ;APDS9960.c: 205:     if( !wireWriteDataByte(0x8F, val) ) {
  6644  07F7  082C               	movf	setProximityGain@val,w
  6645  07F8  00AA               	movwf	??_setProximityGain
  6646  07F9  082A               	movf	??_setProximityGain,w
  6647  07FA  00A6               	movwf	wireWriteDataByte@val
  6648  07FB  308F               	movlw	143
  6649  07FC  318A  2262         	fcall	_wireWriteDataByte
  6650  07FE  0008               	return
  6651  07FF                     __end_of_setProximityGain:	
  6652                           
  6653                           	psect	text3
  6654  09F2                     __ptext3:	
  6655 ;; *************** function _setProxIntLowThresh *****************
  6656 ;; Defined at:
  6657 ;;		line 234 in file "APDS9960.c"
  6658 ;; Parameters:    Size  Location     Type
  6659 ;;  threshold       1    wreg     unsigned char 
  6660 ;; Auto vars:     Size  Location     Type
  6661 ;;  threshold       1   11[BANK0 ] unsigned char 
  6662 ;; Return value:  Size  Location     Type
  6663 ;;                  1    wreg      _Bool 
  6664 ;; Registers used:
  6665 ;;		wreg, status,2, status,0, pclath, cstack
  6666 ;; Tracked objects:
  6667 ;;		On entry : 0/0
  6668 ;;		On exit  : 0/0
  6669 ;;		Unchanged: 0/0
  6670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6671 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6672 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6673 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6674 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6675 ;;Total ram usage:        2 bytes
  6676 ;; Hardware stack levels used:    1
  6677 ;; Hardware stack levels required when called:    8
  6678 ;; This function calls:
  6679 ;;		_wireWriteDataByte
  6680 ;; This function is called by:
  6681 ;;		_initialize
  6682 ;; This function uses a non-reentrant model
  6683 ;;
  6684                           
  6685                           
  6686                           ;psect for function _setProxIntLowThresh
  6687  09F2                     _setProxIntLowThresh:	
  6688                           
  6689                           ;incstack = 0
  6690                           ; Regs used in _setProxIntLowThresh: [wreg+status,2+status,0+pclath+cstack]
  6691                           ;setProxIntLowThresh@threshold stored from wreg
  6692  09F2  0020               	movlb	0	; select bank0
  6693  09F3  00AB               	movwf	setProxIntLowThresh@threshold
  6694                           
  6695                           ;APDS9960.c: 234: _Bool setProxIntLowThresh(uint8_t threshold);APDS9960.c: 235: {;APDS99
      +                          60.c: 236:     if( !wireWriteDataByte(0x89, threshold) ) {
  6696  09F4  082B               	movf	setProxIntLowThresh@threshold,w
  6697  09F5  00AA               	movwf	??_setProxIntLowThresh
  6698  09F6  082A               	movf	??_setProxIntLowThresh,w
  6699  09F7  00A6               	movwf	wireWriteDataByte@val
  6700  09F8  3089               	movlw	137
  6701  09F9  318A  2262  3189   	fcall	_wireWriteDataByte
  6702  09FC  0020               	movlb	0	; select bank0
  6703  09FD  0826               	movf	?_wireWriteDataByte,w
  6704  09FE  0427               	iorwf	?_wireWriteDataByte+1,w
  6705  09FF  1D03               	btfss	3,2
  6706  0A00  2A03               	goto	l6465
  6707                           
  6708                           ;APDS9960.c: 237:         return 0;
  6709  0A01  3000               	movlw	0
  6710  0A02  0008               	return
  6711  0A03                     l6465:	
  6712                           
  6713                           ;APDS9960.c: 240:     return 1;
  6714  0A03  3001               	movlw	1
  6715  0A04  0008               	return
  6716  0A05                     __end_of_setProxIntLowThresh:	
  6717                           
  6718                           	psect	text4
  6719  09DF                     __ptext4:	
  6720 ;; *************** function _setProxIntHighThresh *****************
  6721 ;; Defined at:
  6722 ;;		line 244 in file "APDS9960.c"
  6723 ;; Parameters:    Size  Location     Type
  6724 ;;  threshold       1    wreg     unsigned char 
  6725 ;; Auto vars:     Size  Location     Type
  6726 ;;  threshold       1   11[BANK0 ] unsigned char 
  6727 ;; Return value:  Size  Location     Type
  6728 ;;                  1    wreg      _Bool 
  6729 ;; Registers used:
  6730 ;;		wreg, status,2, status,0, pclath, cstack
  6731 ;; Tracked objects:
  6732 ;;		On entry : 0/0
  6733 ;;		On exit  : 0/0
  6734 ;;		Unchanged: 0/0
  6735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6737 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6738 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6739 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6740 ;;Total ram usage:        2 bytes
  6741 ;; Hardware stack levels used:    1
  6742 ;; Hardware stack levels required when called:    8
  6743 ;; This function calls:
  6744 ;;		_wireWriteDataByte
  6745 ;; This function is called by:
  6746 ;;		_initialize
  6747 ;; This function uses a non-reentrant model
  6748 ;;
  6749                           
  6750                           
  6751                           ;psect for function _setProxIntHighThresh
  6752  09DF                     _setProxIntHighThresh:	
  6753                           
  6754                           ;incstack = 0
  6755                           ; Regs used in _setProxIntHighThresh: [wreg+status,2+status,0+pclath+cstack]
  6756                           ;setProxIntHighThresh@threshold stored from wreg
  6757  09DF  0020               	movlb	0	; select bank0
  6758  09E0  00AB               	movwf	setProxIntHighThresh@threshold
  6759                           
  6760                           ;APDS9960.c: 244: _Bool setProxIntHighThresh(uint8_t threshold);APDS9960.c: 245: {;APDS9
      +                          960.c: 246:     if( !wireWriteDataByte(0x8B, threshold) ) {
  6761  09E1  082B               	movf	setProxIntHighThresh@threshold,w
  6762  09E2  00AA               	movwf	??_setProxIntHighThresh
  6763  09E3  082A               	movf	??_setProxIntHighThresh,w
  6764  09E4  00A6               	movwf	wireWriteDataByte@val
  6765  09E5  308B               	movlw	139
  6766  09E6  318A  2262  3189   	fcall	_wireWriteDataByte
  6767  09E9  0020               	movlb	0	; select bank0
  6768  09EA  0826               	movf	?_wireWriteDataByte,w
  6769  09EB  0427               	iorwf	?_wireWriteDataByte+1,w
  6770  09EC  1D03               	btfss	3,2
  6771  09ED  29F0               	goto	l6475
  6772                           
  6773                           ;APDS9960.c: 247:         return 0;
  6774  09EE  3000               	movlw	0
  6775  09EF  0008               	return
  6776  09F0                     l6475:	
  6777                           
  6778                           ;APDS9960.c: 250:     return 1;
  6779  09F0  3001               	movlw	1
  6780  09F1  0008               	return
  6781  09F2                     __end_of_setProxIntHighThresh:	
  6782                           
  6783                           	psect	text5
  6784  0BB0                     __ptext5:	
  6785 ;; *************** function _setLightIntLowThreshold *****************
  6786 ;; Defined at:
  6787 ;;		line 254 in file "APDS9960.c"
  6788 ;; Parameters:    Size  Location     Type
  6789 ;;  threshold       2   10[BANK0 ] unsigned short 
  6790 ;; Auto vars:     Size  Location     Type
  6791 ;;  val_high        1   14[BANK0 ] unsigned char 
  6792 ;;  val_low         1   13[BANK0 ] unsigned char 
  6793 ;; Return value:  Size  Location     Type
  6794 ;;                  1    wreg      _Bool 
  6795 ;; Registers used:
  6796 ;;		wreg, status,2, status,0, pclath, cstack
  6797 ;; Tracked objects:
  6798 ;;		On entry : 0/0
  6799 ;;		On exit  : 0/0
  6800 ;;		Unchanged: 0/0
  6801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6802 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6803 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6804 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6805 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6806 ;;Total ram usage:        5 bytes
  6807 ;; Hardware stack levels used:    1
  6808 ;; Hardware stack levels required when called:    8
  6809 ;; This function calls:
  6810 ;;		_wireWriteDataByte
  6811 ;; This function is called by:
  6812 ;;		_initialize
  6813 ;; This function uses a non-reentrant model
  6814 ;;
  6815                           
  6816                           
  6817                           ;psect for function _setLightIntLowThreshold
  6818  0BB0                     _setLightIntLowThreshold:	
  6819                           
  6820                           ;APDS9960.c: 254: _Bool setLightIntLowThreshold(uint16_t threshold);APDS9960.c: 255: {;A
      +                          PDS9960.c: 256:     uint8_t val_low;;APDS9960.c: 257:     uint8_t val_high;;APDS9960.c: 
      +                          260:     val_low = threshold & 0x00FF;
  6821                           
  6822                           ;incstack = 0
  6823                           ; Regs used in _setLightIntLowThreshold: [wreg+status,2+status,0+pclath+cstack]
  6824  0BB0  0020               	movlb	0	; select bank0
  6825  0BB1  082A               	movf	setLightIntLowThreshold@threshold,w
  6826  0BB2  00AC               	movwf	??_setLightIntLowThreshold
  6827  0BB3  082C               	movf	??_setLightIntLowThreshold,w
  6828  0BB4  00AD               	movwf	setLightIntLowThreshold@val_low
  6829                           
  6830                           ;APDS9960.c: 261:     val_high = (threshold & 0xFF00) >> 8;
  6831  0BB5  082B               	movf	setLightIntLowThreshold@threshold+1,w
  6832  0BB6  00AC               	movwf	??_setLightIntLowThreshold
  6833  0BB7  082C               	movf	??_setLightIntLowThreshold,w
  6834  0BB8  00AE               	movwf	setLightIntLowThreshold@val_high
  6835                           
  6836                           ;APDS9960.c: 264:     if( !wireWriteDataByte(0x84, val_low) ) {
  6837  0BB9  082D               	movf	setLightIntLowThreshold@val_low,w
  6838  0BBA  00AC               	movwf	??_setLightIntLowThreshold
  6839  0BBB  082C               	movf	??_setLightIntLowThreshold,w
  6840  0BBC  00A6               	movwf	wireWriteDataByte@val
  6841  0BBD  3084               	movlw	132
  6842  0BBE  318A  2262  318B   	fcall	_wireWriteDataByte
  6843  0BC1  0020               	movlb	0	; select bank0
  6844  0BC2  0826               	movf	?_wireWriteDataByte,w
  6845  0BC3  0427               	iorwf	?_wireWriteDataByte+1,w
  6846  0BC4  1D03               	btfss	3,2
  6847  0BC5  2BC8               	goto	l6489
  6848  0BC6                     l6485:	
  6849                           
  6850                           ;APDS9960.c: 265:         return 0;
  6851  0BC6  3000               	movlw	0
  6852  0BC7  0008               	return
  6853  0BC8                     l6489:	
  6854                           
  6855                           ;APDS9960.c: 269:     if( !wireWriteDataByte(0x85, val_high) ) {
  6856  0BC8  082E               	movf	setLightIntLowThreshold@val_high,w
  6857  0BC9  00AC               	movwf	??_setLightIntLowThreshold
  6858  0BCA  082C               	movf	??_setLightIntLowThreshold,w
  6859  0BCB  00A6               	movwf	wireWriteDataByte@val
  6860  0BCC  3085               	movlw	133
  6861  0BCD  318A  2262  318B   	fcall	_wireWriteDataByte
  6862  0BD0  0020               	movlb	0	; select bank0
  6863  0BD1  0826               	movf	?_wireWriteDataByte,w
  6864  0BD2  0427               	iorwf	?_wireWriteDataByte+1,w
  6865  0BD3  1903               	btfsc	3,2
  6866  0BD4  2BC6               	goto	l6485
  6867                           
  6868                           ;APDS9960.c: 273:     return 1;
  6869  0BD5  3001               	movlw	1
  6870  0BD6  0008               	return
  6871  0BD7                     __end_of_setLightIntLowThreshold:	
  6872                           
  6873                           	psect	text6
  6874  0B89                     __ptext6:	
  6875 ;; *************** function _setLightIntHighThreshold *****************
  6876 ;; Defined at:
  6877 ;;		line 277 in file "APDS9960.c"
  6878 ;; Parameters:    Size  Location     Type
  6879 ;;  threshold       2   10[BANK0 ] unsigned short 
  6880 ;; Auto vars:     Size  Location     Type
  6881 ;;  val_high        1   14[BANK0 ] unsigned char 
  6882 ;;  val_low         1   13[BANK0 ] unsigned char 
  6883 ;; Return value:  Size  Location     Type
  6884 ;;                  1    wreg      _Bool 
  6885 ;; Registers used:
  6886 ;;		wreg, status,2, status,0, pclath, cstack
  6887 ;; Tracked objects:
  6888 ;;		On entry : 0/0
  6889 ;;		On exit  : 0/0
  6890 ;;		Unchanged: 0/0
  6891 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6892 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6893 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6894 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6895 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6896 ;;Total ram usage:        5 bytes
  6897 ;; Hardware stack levels used:    1
  6898 ;; Hardware stack levels required when called:    8
  6899 ;; This function calls:
  6900 ;;		_wireWriteDataByte
  6901 ;; This function is called by:
  6902 ;;		_initialize
  6903 ;; This function uses a non-reentrant model
  6904 ;;
  6905                           
  6906                           
  6907                           ;psect for function _setLightIntHighThreshold
  6908  0B89                     _setLightIntHighThreshold:	
  6909                           
  6910                           ;APDS9960.c: 277: _Bool setLightIntHighThreshold(uint16_t threshold);APDS9960.c: 278: {;
      +                          APDS9960.c: 279:     uint8_t val_low;;APDS9960.c: 280:     uint8_t val_high;;APDS9960.c:
      +                           283:     val_low = threshold & 0x00FF;
  6911                           
  6912                           ;incstack = 0
  6913                           ; Regs used in _setLightIntHighThreshold: [wreg+status,2+status,0+pclath+cstack]
  6914  0B89  0020               	movlb	0	; select bank0
  6915  0B8A  082A               	movf	setLightIntHighThreshold@threshold,w
  6916  0B8B  00AC               	movwf	??_setLightIntHighThreshold
  6917  0B8C  082C               	movf	??_setLightIntHighThreshold,w
  6918  0B8D  00AD               	movwf	setLightIntHighThreshold@val_low
  6919                           
  6920                           ;APDS9960.c: 284:     val_high = (threshold & 0xFF00) >> 8;
  6921  0B8E  082B               	movf	setLightIntHighThreshold@threshold+1,w
  6922  0B8F  00AC               	movwf	??_setLightIntHighThreshold
  6923  0B90  082C               	movf	??_setLightIntHighThreshold,w
  6924  0B91  00AE               	movwf	setLightIntHighThreshold@val_high
  6925                           
  6926                           ;APDS9960.c: 287:     if( !wireWriteDataByte(0x86, val_low) ) {
  6927  0B92  082D               	movf	setLightIntHighThreshold@val_low,w
  6928  0B93  00AC               	movwf	??_setLightIntHighThreshold
  6929  0B94  082C               	movf	??_setLightIntHighThreshold,w
  6930  0B95  00A6               	movwf	wireWriteDataByte@val
  6931  0B96  3086               	movlw	134
  6932  0B97  318A  2262  318B   	fcall	_wireWriteDataByte
  6933  0B9A  0020               	movlb	0	; select bank0
  6934  0B9B  0826               	movf	?_wireWriteDataByte,w
  6935  0B9C  0427               	iorwf	?_wireWriteDataByte+1,w
  6936  0B9D  1D03               	btfss	3,2
  6937  0B9E  2BA1               	goto	l6509
  6938  0B9F                     l6505:	
  6939                           
  6940                           ;APDS9960.c: 288:         return 0;
  6941  0B9F  3000               	movlw	0
  6942  0BA0  0008               	return
  6943  0BA1                     l6509:	
  6944                           
  6945                           ;APDS9960.c: 292:     if( !wireWriteDataByte(0x87, val_high) ) {
  6946  0BA1  082E               	movf	setLightIntHighThreshold@val_high,w
  6947  0BA2  00AC               	movwf	??_setLightIntHighThreshold
  6948  0BA3  082C               	movf	??_setLightIntHighThreshold,w
  6949  0BA4  00A6               	movwf	wireWriteDataByte@val
  6950  0BA5  3087               	movlw	135
  6951  0BA6  318A  2262  318B   	fcall	_wireWriteDataByte
  6952  0BA9  0020               	movlb	0	; select bank0
  6953  0BAA  0826               	movf	?_wireWriteDataByte,w
  6954  0BAB  0427               	iorwf	?_wireWriteDataByte+1,w
  6955  0BAC  1903               	btfsc	3,2
  6956  0BAD  2B9F               	goto	l6505
  6957                           
  6958                           ;APDS9960.c: 296:     return 1;
  6959  0BAE  3001               	movlw	1
  6960  0BAF  0008               	return
  6961  0BB0                     __end_of_setLightIntHighThreshold:	
  6962                           
  6963                           	psect	text7
  6964  0BD7                     __ptext7:	
  6965 ;; *************** function _setLEDDrive *****************
  6966 ;; Defined at:
  6967 ;;		line 170 in file "APDS9960.c"
  6968 ;; Parameters:    Size  Location     Type
  6969 ;;  drive           1    wreg     unsigned char 
  6970 ;; Auto vars:     Size  Location     Type
  6971 ;;  drive           1   13[BANK0 ] unsigned char 
  6972 ;;  val             1   12[BANK0 ] unsigned char 
  6973 ;; Return value:  Size  Location     Type
  6974 ;;                  1    wreg      _Bool 
  6975 ;; Registers used:
  6976 ;;		wreg, status,2, status,0, pclath, cstack
  6977 ;; Tracked objects:
  6978 ;;		On entry : 0/0
  6979 ;;		On exit  : 0/0
  6980 ;;		Unchanged: 0/0
  6981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6982 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6983 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6984 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6985 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6986 ;;Total ram usage:        4 bytes
  6987 ;; Hardware stack levels used:    1
  6988 ;; Hardware stack levels required when called:    8
  6989 ;; This function calls:
  6990 ;;		_wireReadDataByte
  6991 ;;		_wireWriteDataByte
  6992 ;; This function is called by:
  6993 ;;		_initialize
  6994 ;; This function uses a non-reentrant model
  6995 ;;
  6996                           
  6997                           
  6998                           ;psect for function _setLEDDrive
  6999  0BD7                     _setLEDDrive:	
  7000                           
  7001                           ;incstack = 0
  7002                           ; Regs used in _setLEDDrive: [wreg+status,2+status,0+pclath+cstack]
  7003                           ;setLEDDrive@drive stored from wreg
  7004  0BD7  0020               	movlb	0	; select bank0
  7005  0BD8  00AD               	movwf	setLEDDrive@drive
  7006                           
  7007                           ;APDS9960.c: 170: _Bool setLEDDrive(uint8_t drive);APDS9960.c: 171: {;APDS9960.c: 172:  
      +                             uint8_t val;;APDS9960.c: 175:     val=wireReadDataByte(0x8F);
  7008  0BD9  308F               	movlw	143
  7009  0BDA  318A  22F1  318B   	fcall	_wireReadDataByte
  7010  0BDD  0020               	movlb	0	; select bank0
  7011  0BDE  00AA               	movwf	??_setLEDDrive
  7012  0BDF  082A               	movf	??_setLEDDrive,w
  7013  0BE0  00AC               	movwf	setLEDDrive@val
  7014                           
  7015                           ;APDS9960.c: 178:     drive &= 0b00000011;
  7016  0BE1  3003               	movlw	3
  7017  0BE2  00AA               	movwf	??_setLEDDrive
  7018  0BE3  082A               	movf	??_setLEDDrive,w
  7019  0BE4  05AD               	andwf	setLEDDrive@drive,f
  7020                           
  7021                           ;APDS9960.c: 179:     drive = drive << 6;
  7022  0BE5  082D               	movf	setLEDDrive@drive,w
  7023  0BE6  00AA               	movwf	??_setLEDDrive
  7024  0BE7  3005               	movlw	5
  7025  0BE8                     u5585:	
  7026  0BE8  35AA               	lslf	??_setLEDDrive,f
  7027  0BE9  3EFF               	addlw	-1
  7028  0BEA  1D03               	skipz
  7029  0BEB  2BE8               	goto	u5585
  7030  0BEC  352A               	lslf	??_setLEDDrive,w
  7031  0BED  00AB               	movwf	??_setLEDDrive+1
  7032  0BEE  082B               	movf	??_setLEDDrive+1,w
  7033  0BEF  00AD               	movwf	setLEDDrive@drive
  7034                           
  7035                           ;APDS9960.c: 180:     val &= 0b00111111;
  7036  0BF0  303F               	movlw	63
  7037  0BF1  00AA               	movwf	??_setLEDDrive
  7038  0BF2  082A               	movf	??_setLEDDrive,w
  7039  0BF3  05AC               	andwf	setLEDDrive@val,f
  7040                           
  7041                           ;APDS9960.c: 181:     val |= drive;
  7042  0BF4  082D               	movf	setLEDDrive@drive,w
  7043  0BF5  00AA               	movwf	??_setLEDDrive
  7044  0BF6  082A               	movf	??_setLEDDrive,w
  7045  0BF7  04AC               	iorwf	setLEDDrive@val,f
  7046                           
  7047                           ;APDS9960.c: 184:     if( !wireWriteDataByte(0x8F, val) ) {
  7048  0BF8  082C               	movf	setLEDDrive@val,w
  7049  0BF9  00AA               	movwf	??_setLEDDrive
  7050  0BFA  082A               	movf	??_setLEDDrive,w
  7051  0BFB  00A6               	movwf	wireWriteDataByte@val
  7052  0BFC  308F               	movlw	143
  7053  0BFD  318A  2262         	fcall	_wireWriteDataByte
  7054  0BFF  0008               	return
  7055  0C00                     __end_of_setLEDDrive:	
  7056                           
  7057                           	psect	text8
  7058  0B62                     __ptext8:	
  7059 ;; *************** function _setGestureWaitTime *****************
  7060 ;; Defined at:
  7061 ;;		line 366 in file "APDS9960.c"
  7062 ;; Parameters:    Size  Location     Type
  7063 ;;  time            1    wreg     unsigned char 
  7064 ;; Auto vars:     Size  Location     Type
  7065 ;;  time            1   11[BANK0 ] unsigned char 
  7066 ;;  val             1   12[BANK0 ] unsigned char 
  7067 ;; Return value:  Size  Location     Type
  7068 ;;                  1    wreg      _Bool 
  7069 ;; Registers used:
  7070 ;;		wreg, status,2, status,0, pclath, cstack
  7071 ;; Tracked objects:
  7072 ;;		On entry : 0/0
  7073 ;;		On exit  : 0/0
  7074 ;;		Unchanged: 0/0
  7075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7076 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7077 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7078 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7079 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7080 ;;Total ram usage:        3 bytes
  7081 ;; Hardware stack levels used:    1
  7082 ;; Hardware stack levels required when called:    8
  7083 ;; This function calls:
  7084 ;;		_wireReadDataByte
  7085 ;;		_wireWriteDataByte
  7086 ;; This function is called by:
  7087 ;;		_initialize
  7088 ;; This function uses a non-reentrant model
  7089 ;;
  7090                           
  7091                           
  7092                           ;psect for function _setGestureWaitTime
  7093  0B62                     _setGestureWaitTime:	
  7094                           
  7095                           ;incstack = 0
  7096                           ; Regs used in _setGestureWaitTime: [wreg+status,2+status,0+pclath+cstack]
  7097                           ;setGestureWaitTime@time stored from wreg
  7098  0B62  0020               	movlb	0	; select bank0
  7099  0B63  00AB               	movwf	setGestureWaitTime@time
  7100                           
  7101                           ;APDS9960.c: 366: _Bool setGestureWaitTime(uint8_t time);APDS9960.c: 367: {;APDS9960.c: 
      +                          368:     uint8_t val;;APDS9960.c: 371:     val = wireReadDataByte(0xA3);
  7102  0B64  30A3               	movlw	163
  7103  0B65  318A  22F1  318B   	fcall	_wireReadDataByte
  7104  0B68  0020               	movlb	0	; select bank0
  7105  0B69  00AA               	movwf	??_setGestureWaitTime
  7106  0B6A  082A               	movf	??_setGestureWaitTime,w
  7107  0B6B  00AC               	movwf	setGestureWaitTime@val
  7108                           
  7109                           ;APDS9960.c: 374:     time &= 0b00000111;
  7110  0B6C  3007               	movlw	7
  7111  0B6D  00AA               	movwf	??_setGestureWaitTime
  7112  0B6E  082A               	movf	??_setGestureWaitTime,w
  7113  0B6F  05AB               	andwf	setGestureWaitTime@time,f
  7114                           
  7115                           ;APDS9960.c: 375:     val &= 0b11111000;
  7116  0B70  30F8               	movlw	248
  7117  0B71  00AA               	movwf	??_setGestureWaitTime
  7118  0B72  082A               	movf	??_setGestureWaitTime,w
  7119  0B73  05AC               	andwf	setGestureWaitTime@val,f
  7120                           
  7121                           ;APDS9960.c: 376:     val |= time;
  7122  0B74  082B               	movf	setGestureWaitTime@time,w
  7123  0B75  00AA               	movwf	??_setGestureWaitTime
  7124  0B76  082A               	movf	??_setGestureWaitTime,w
  7125  0B77  04AC               	iorwf	setGestureWaitTime@val,f
  7126                           
  7127                           ;APDS9960.c: 379:     if( !wireWriteDataByte(0xA3, val) ) {
  7128  0B78  082C               	movf	setGestureWaitTime@val,w
  7129  0B79  00AA               	movwf	??_setGestureWaitTime
  7130  0B7A  082A               	movf	??_setGestureWaitTime,w
  7131  0B7B  00A6               	movwf	wireWriteDataByte@val
  7132  0B7C  30A3               	movlw	163
  7133  0B7D  318A  2262  318B   	fcall	_wireWriteDataByte
  7134  0B80  0020               	movlb	0	; select bank0
  7135  0B81  0826               	movf	?_wireWriteDataByte,w
  7136  0B82  0427               	iorwf	?_wireWriteDataByte+1,w
  7137  0B83  1D03               	btfss	3,2
  7138  0B84  2B87               	goto	l6589
  7139                           
  7140                           ;APDS9960.c: 380:         return 0;
  7141  0B85  3000               	movlw	0
  7142  0B86  0008               	return
  7143  0B87                     l6589:	
  7144                           
  7145                           ;APDS9960.c: 383:     return 1;
  7146  0B87  3001               	movlw	1
  7147  0B88  0008               	return
  7148  0B89                     __end_of_setGestureWaitTime:	
  7149                           
  7150                           	psect	text9
  7151  0D19                     __ptext9:	
  7152 ;; *************** function _setGestureLEDDrive *****************
  7153 ;; Defined at:
  7154 ;;		line 343 in file "APDS9960.c"
  7155 ;; Parameters:    Size  Location     Type
  7156 ;;  drive           1    wreg     unsigned char 
  7157 ;; Auto vars:     Size  Location     Type
  7158 ;;  drive           1   13[BANK0 ] unsigned char 
  7159 ;;  val             1   12[BANK0 ] unsigned char 
  7160 ;; Return value:  Size  Location     Type
  7161 ;;                  1    wreg      _Bool 
  7162 ;; Registers used:
  7163 ;;		wreg, status,2, status,0, pclath, cstack
  7164 ;; Tracked objects:
  7165 ;;		On entry : 0/0
  7166 ;;		On exit  : 0/0
  7167 ;;		Unchanged: 0/0
  7168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7169 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7170 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7171 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7172 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7173 ;;Total ram usage:        4 bytes
  7174 ;; Hardware stack levels used:    1
  7175 ;; Hardware stack levels required when called:    8
  7176 ;; This function calls:
  7177 ;;		_wireReadDataByte
  7178 ;;		_wireWriteDataByte
  7179 ;; This function is called by:
  7180 ;;		_initialize
  7181 ;; This function uses a non-reentrant model
  7182 ;;
  7183                           
  7184                           
  7185                           ;psect for function _setGestureLEDDrive
  7186  0D19                     _setGestureLEDDrive:	
  7187                           
  7188                           ;incstack = 0
  7189                           ; Regs used in _setGestureLEDDrive: [wreg+status,2+status,0+pclath+cstack]
  7190                           ;setGestureLEDDrive@drive stored from wreg
  7191  0D19  0020               	movlb	0	; select bank0
  7192  0D1A  00AD               	movwf	setGestureLEDDrive@drive
  7193                           
  7194                           ;APDS9960.c: 343: _Bool setGestureLEDDrive(uint8_t drive);APDS9960.c: 344: {;APDS9960.c:
      +                           345:     uint8_t val;;APDS9960.c: 348:     val = wireReadDataByte(0xA3);
  7195  0D1B  30A3               	movlw	163
  7196  0D1C  318A  22F1  318D   	fcall	_wireReadDataByte
  7197  0D1F  0020               	movlb	0	; select bank0
  7198  0D20  00AA               	movwf	??_setGestureLEDDrive
  7199  0D21  082A               	movf	??_setGestureLEDDrive,w
  7200  0D22  00AC               	movwf	setGestureLEDDrive@val
  7201                           
  7202                           ;APDS9960.c: 352:     drive &= 0b00000011;
  7203  0D23  3003               	movlw	3
  7204  0D24  00AA               	movwf	??_setGestureLEDDrive
  7205  0D25  082A               	movf	??_setGestureLEDDrive,w
  7206  0D26  05AD               	andwf	setGestureLEDDrive@drive,f
  7207                           
  7208                           ;APDS9960.c: 353:     drive = drive << 3;
  7209  0D27  082D               	movf	setGestureLEDDrive@drive,w
  7210  0D28  00AA               	movwf	??_setGestureLEDDrive
  7211  0D29  3002               	movlw	2
  7212  0D2A                     u5705:	
  7213  0D2A  35AA               	lslf	??_setGestureLEDDrive,f
  7214  0D2B  3EFF               	addlw	-1
  7215  0D2C  1D03               	skipz
  7216  0D2D  2D2A               	goto	u5705
  7217  0D2E  352A               	lslf	??_setGestureLEDDrive,w
  7218  0D2F  00AB               	movwf	??_setGestureLEDDrive+1
  7219  0D30  082B               	movf	??_setGestureLEDDrive+1,w
  7220  0D31  00AD               	movwf	setGestureLEDDrive@drive
  7221                           
  7222                           ;APDS9960.c: 354:     val &= 0b11100111;
  7223  0D32  30E7               	movlw	231
  7224  0D33  00AA               	movwf	??_setGestureLEDDrive
  7225  0D34  082A               	movf	??_setGestureLEDDrive,w
  7226  0D35  05AC               	andwf	setGestureLEDDrive@val,f
  7227                           
  7228                           ;APDS9960.c: 355:     val |= drive;
  7229  0D36  082D               	movf	setGestureLEDDrive@drive,w
  7230  0D37  00AA               	movwf	??_setGestureLEDDrive
  7231  0D38  082A               	movf	??_setGestureLEDDrive,w
  7232  0D39  04AC               	iorwf	setGestureLEDDrive@val,f
  7233                           
  7234                           ;APDS9960.c: 358:     if( !wireWriteDataByte(0xA3, val) ) {
  7235  0D3A  082C               	movf	setGestureLEDDrive@val,w
  7236  0D3B  00AA               	movwf	??_setGestureLEDDrive
  7237  0D3C  082A               	movf	??_setGestureLEDDrive,w
  7238  0D3D  00A6               	movwf	wireWriteDataByte@val
  7239  0D3E  30A3               	movlw	163
  7240  0D3F  318A  2262  318D   	fcall	_wireWriteDataByte
  7241  0D42  0020               	movlb	0	; select bank0
  7242  0D43  0826               	movf	?_wireWriteDataByte,w
  7243  0D44  0427               	iorwf	?_wireWriteDataByte+1,w
  7244  0D45  1D03               	btfss	3,2
  7245  0D46  2D49               	goto	l6571
  7246                           
  7247                           ;APDS9960.c: 359:         return 0;
  7248  0D47  3000               	movlw	0
  7249  0D48  0008               	return
  7250  0D49                     l6571:	
  7251                           
  7252                           ;APDS9960.c: 362:     return 1;
  7253  0D49  3001               	movlw	1
  7254  0D4A  0008               	return
  7255  0D4B                     __end_of_setGestureLEDDrive:	
  7256                           
  7257                           	psect	text10
  7258  0CE7                     __ptext10:	
  7259 ;; *************** function _setGestureGain *****************
  7260 ;; Defined at:
  7261 ;;		line 320 in file "APDS9960.c"
  7262 ;; Parameters:    Size  Location     Type
  7263 ;;  gain            1    wreg     unsigned char 
  7264 ;; Auto vars:     Size  Location     Type
  7265 ;;  gain            1   13[BANK0 ] unsigned char 
  7266 ;;  val             1   12[BANK0 ] unsigned char 
  7267 ;; Return value:  Size  Location     Type
  7268 ;;                  1    wreg      _Bool 
  7269 ;; Registers used:
  7270 ;;		wreg, status,2, status,0, pclath, cstack
  7271 ;; Tracked objects:
  7272 ;;		On entry : 0/0
  7273 ;;		On exit  : 0/0
  7274 ;;		Unchanged: 0/0
  7275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7276 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7277 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7278 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7279 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7280 ;;Total ram usage:        4 bytes
  7281 ;; Hardware stack levels used:    1
  7282 ;; Hardware stack levels required when called:    8
  7283 ;; This function calls:
  7284 ;;		_wireReadDataByte
  7285 ;;		_wireWriteDataByte
  7286 ;; This function is called by:
  7287 ;;		_initialize
  7288 ;; This function uses a non-reentrant model
  7289 ;;
  7290                           
  7291                           
  7292                           ;psect for function _setGestureGain
  7293  0CE7                     _setGestureGain:	
  7294                           
  7295                           ;incstack = 0
  7296                           ; Regs used in _setGestureGain: [wreg+status,2+status,0+pclath+cstack]
  7297                           ;setGestureGain@gain stored from wreg
  7298  0CE7  0020               	movlb	0	; select bank0
  7299  0CE8  00AD               	movwf	setGestureGain@gain
  7300                           
  7301                           ;APDS9960.c: 320: _Bool setGestureGain(uint8_t gain);APDS9960.c: 321: {;APDS9960.c: 322:
      +                               uint8_t val;;APDS9960.c: 325:     val = wireReadDataByte(0xA3);
  7302  0CE9  30A3               	movlw	163
  7303  0CEA  318A  22F1  318C   	fcall	_wireReadDataByte
  7304  0CED  0020               	movlb	0	; select bank0
  7305  0CEE  00AA               	movwf	??_setGestureGain
  7306  0CEF  082A               	movf	??_setGestureGain,w
  7307  0CF0  00AC               	movwf	setGestureGain@val
  7308                           
  7309                           ;APDS9960.c: 329:     gain &= 0b00000011;
  7310  0CF1  3003               	movlw	3
  7311  0CF2  00AA               	movwf	??_setGestureGain
  7312  0CF3  082A               	movf	??_setGestureGain,w
  7313  0CF4  05AD               	andwf	setGestureGain@gain,f
  7314                           
  7315                           ;APDS9960.c: 330:     gain = gain << 5;
  7316  0CF5  082D               	movf	setGestureGain@gain,w
  7317  0CF6  00AA               	movwf	??_setGestureGain
  7318  0CF7  3004               	movlw	4
  7319  0CF8                     u5685:	
  7320  0CF8  35AA               	lslf	??_setGestureGain,f
  7321  0CF9  3EFF               	addlw	-1
  7322  0CFA  1D03               	skipz
  7323  0CFB  2CF8               	goto	u5685
  7324  0CFC  352A               	lslf	??_setGestureGain,w
  7325  0CFD  00AB               	movwf	??_setGestureGain+1
  7326  0CFE  082B               	movf	??_setGestureGain+1,w
  7327  0CFF  00AD               	movwf	setGestureGain@gain
  7328                           
  7329                           ;APDS9960.c: 331:     val &= 0b10011111;
  7330  0D00  309F               	movlw	159
  7331  0D01  00AA               	movwf	??_setGestureGain
  7332  0D02  082A               	movf	??_setGestureGain,w
  7333  0D03  05AC               	andwf	setGestureGain@val,f
  7334                           
  7335                           ;APDS9960.c: 332:     val |= gain;
  7336  0D04  082D               	movf	setGestureGain@gain,w
  7337  0D05  00AA               	movwf	??_setGestureGain
  7338  0D06  082A               	movf	??_setGestureGain,w
  7339  0D07  04AC               	iorwf	setGestureGain@val,f
  7340                           
  7341                           ;APDS9960.c: 335:     if( !wireWriteDataByte(0xA3, val) ) {
  7342  0D08  082C               	movf	setGestureGain@val,w
  7343  0D09  00AA               	movwf	??_setGestureGain
  7344  0D0A  082A               	movf	??_setGestureGain,w
  7345  0D0B  00A6               	movwf	wireWriteDataByte@val
  7346  0D0C  30A3               	movlw	163
  7347  0D0D  318A  2262  318C   	fcall	_wireWriteDataByte
  7348  0D10  0020               	movlb	0	; select bank0
  7349  0D11  0826               	movf	?_wireWriteDataByte,w
  7350  0D12  0427               	iorwf	?_wireWriteDataByte+1,w
  7351  0D13  1D03               	btfss	3,2
  7352  0D14  2D17               	goto	l6553
  7353                           
  7354                           ;APDS9960.c: 336:         return 0;
  7355  0D15  3000               	movlw	0
  7356  0D16  0008               	return
  7357  0D17                     l6553:	
  7358                           
  7359                           ;APDS9960.c: 339:     return 1;
  7360  0D17  3001               	movlw	1
  7361  0D18  0008               	return
  7362  0D19                     __end_of_setGestureGain:	
  7363                           
  7364                           	psect	text11
  7365  09CC                     __ptext11:	
  7366 ;; *************** function _setGestureExitThresh *****************
  7367 ;; Defined at:
  7368 ;;		line 310 in file "APDS9960.c"
  7369 ;; Parameters:    Size  Location     Type
  7370 ;;  threshold       1    wreg     unsigned char 
  7371 ;; Auto vars:     Size  Location     Type
  7372 ;;  threshold       1   11[BANK0 ] unsigned char 
  7373 ;; Return value:  Size  Location     Type
  7374 ;;                  1    wreg      _Bool 
  7375 ;; Registers used:
  7376 ;;		wreg, status,2, status,0, pclath, cstack
  7377 ;; Tracked objects:
  7378 ;;		On entry : 0/0
  7379 ;;		On exit  : 0/0
  7380 ;;		Unchanged: 0/0
  7381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7382 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7383 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7384 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7385 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7386 ;;Total ram usage:        2 bytes
  7387 ;; Hardware stack levels used:    1
  7388 ;; Hardware stack levels required when called:    8
  7389 ;; This function calls:
  7390 ;;		_wireWriteDataByte
  7391 ;; This function is called by:
  7392 ;;		_initialize
  7393 ;; This function uses a non-reentrant model
  7394 ;;
  7395                           
  7396                           
  7397                           ;psect for function _setGestureExitThresh
  7398  09CC                     _setGestureExitThresh:	
  7399                           
  7400                           ;incstack = 0
  7401                           ; Regs used in _setGestureExitThresh: [wreg+status,2+status,0+pclath+cstack]
  7402                           ;setGestureExitThresh@threshold stored from wreg
  7403  09CC  0020               	movlb	0	; select bank0
  7404  09CD  00AB               	movwf	setGestureExitThresh@threshold
  7405                           
  7406                           ;APDS9960.c: 310: _Bool setGestureExitThresh(uint8_t threshold);APDS9960.c: 311: {;APDS9
      +                          960.c: 312:     if( !wireWriteDataByte(0xA1, threshold) ) {
  7407  09CE  082B               	movf	setGestureExitThresh@threshold,w
  7408  09CF  00AA               	movwf	??_setGestureExitThresh
  7409  09D0  082A               	movf	??_setGestureExitThresh,w
  7410  09D1  00A6               	movwf	wireWriteDataByte@val
  7411  09D2  30A1               	movlw	161
  7412  09D3  318A  2262  3189   	fcall	_wireWriteDataByte
  7413  09D6  0020               	movlb	0	; select bank0
  7414  09D7  0826               	movf	?_wireWriteDataByte,w
  7415  09D8  0427               	iorwf	?_wireWriteDataByte+1,w
  7416  09D9  1D03               	btfss	3,2
  7417  09DA  29DD               	goto	l6535
  7418                           
  7419                           ;APDS9960.c: 313:         return 0;
  7420  09DB  3000               	movlw	0
  7421  09DC  0008               	return
  7422  09DD                     l6535:	
  7423                           
  7424                           ;APDS9960.c: 316:     return 1;
  7425  09DD  3001               	movlw	1
  7426  09DE  0008               	return
  7427  09DF                     __end_of_setGestureExitThresh:	
  7428                           
  7429                           	psect	text12
  7430  09B9                     __ptext12:	
  7431 ;; *************** function _setGestureEnterThresh *****************
  7432 ;; Defined at:
  7433 ;;		line 300 in file "APDS9960.c"
  7434 ;; Parameters:    Size  Location     Type
  7435 ;;  threshold       1    wreg     unsigned char 
  7436 ;; Auto vars:     Size  Location     Type
  7437 ;;  threshold       1   11[BANK0 ] unsigned char 
  7438 ;; Return value:  Size  Location     Type
  7439 ;;                  1    wreg      _Bool 
  7440 ;; Registers used:
  7441 ;;		wreg, status,2, status,0, pclath, cstack
  7442 ;; Tracked objects:
  7443 ;;		On entry : 0/0
  7444 ;;		On exit  : 0/0
  7445 ;;		Unchanged: 0/0
  7446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7447 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7448 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7449 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7450 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7451 ;;Total ram usage:        2 bytes
  7452 ;; Hardware stack levels used:    1
  7453 ;; Hardware stack levels required when called:    8
  7454 ;; This function calls:
  7455 ;;		_wireWriteDataByte
  7456 ;; This function is called by:
  7457 ;;		_initialize
  7458 ;; This function uses a non-reentrant model
  7459 ;;
  7460                           
  7461                           
  7462                           ;psect for function _setGestureEnterThresh
  7463  09B9                     _setGestureEnterThresh:	
  7464                           
  7465                           ;incstack = 0
  7466                           ; Regs used in _setGestureEnterThresh: [wreg+status,2+status,0+pclath+cstack]
  7467                           ;setGestureEnterThresh@threshold stored from wreg
  7468  09B9  0020               	movlb	0	; select bank0
  7469  09BA  00AB               	movwf	setGestureEnterThresh@threshold
  7470                           
  7471                           ;APDS9960.c: 300: _Bool setGestureEnterThresh(uint8_t threshold);APDS9960.c: 301: {;APDS
      +                          9960.c: 302:     if( !wireWriteDataByte(0xA0, threshold) ) {
  7472  09BB  082B               	movf	setGestureEnterThresh@threshold,w
  7473  09BC  00AA               	movwf	??_setGestureEnterThresh
  7474  09BD  082A               	movf	??_setGestureEnterThresh,w
  7475  09BE  00A6               	movwf	wireWriteDataByte@val
  7476  09BF  30A0               	movlw	160
  7477  09C0  318A  2262  3189   	fcall	_wireWriteDataByte
  7478  09C3  0020               	movlb	0	; select bank0
  7479  09C4  0826               	movf	?_wireWriteDataByte,w
  7480  09C5  0427               	iorwf	?_wireWriteDataByte+1,w
  7481  09C6  1D03               	btfss	3,2
  7482  09C7  29CA               	goto	l6525
  7483                           
  7484                           ;APDS9960.c: 303:         return 0;
  7485  09C8  3000               	movlw	0
  7486  09C9  0008               	return
  7487  09CA                     l6525:	
  7488                           
  7489                           ;APDS9960.c: 306:     return 1;
  7490  09CA  3001               	movlw	1
  7491  09CB  0008               	return
  7492  09CC                     __end_of_setGestureEnterThresh:	
  7493                           
  7494                           	psect	text13
  7495  0AD3                     __ptext13:	
  7496 ;; *************** function _setAmbientLightGain *****************
  7497 ;; Defined at:
  7498 ;;		line 213 in file "APDS9960.c"
  7499 ;; Parameters:    Size  Location     Type
  7500 ;;  drive           1    wreg     unsigned char 
  7501 ;; Auto vars:     Size  Location     Type
  7502 ;;  drive           1   11[BANK0 ] unsigned char 
  7503 ;;  val             1   12[BANK0 ] unsigned char 
  7504 ;; Return value:  Size  Location     Type
  7505 ;;                  1    wreg      _Bool 
  7506 ;; Registers used:
  7507 ;;		wreg, status,2, status,0, pclath, cstack
  7508 ;; Tracked objects:
  7509 ;;		On entry : 0/0
  7510 ;;		On exit  : 0/0
  7511 ;;		Unchanged: 0/0
  7512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7513 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7514 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7515 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7516 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7517 ;;Total ram usage:        3 bytes
  7518 ;; Hardware stack levels used:    1
  7519 ;; Hardware stack levels required when called:    8
  7520 ;; This function calls:
  7521 ;;		_wireReadDataByte
  7522 ;;		_wireWriteDataByte
  7523 ;; This function is called by:
  7524 ;;		_initialize
  7525 ;; This function uses a non-reentrant model
  7526 ;;
  7527                           
  7528                           
  7529                           ;psect for function _setAmbientLightGain
  7530  0AD3                     _setAmbientLightGain:	
  7531                           
  7532                           ;incstack = 0
  7533                           ; Regs used in _setAmbientLightGain: [wreg+status,2+status,0+pclath+cstack]
  7534                           ;setAmbientLightGain@drive stored from wreg
  7535  0AD3  0020               	movlb	0	; select bank0
  7536  0AD4  00AB               	movwf	setAmbientLightGain@drive
  7537                           
  7538                           ;APDS9960.c: 213: _Bool setAmbientLightGain(uint8_t drive);APDS9960.c: 214: {;APDS9960.c
      +                          : 215:     uint8_t val;;APDS9960.c: 218:     val= wireReadDataByte(0x8F);
  7539  0AD5  308F               	movlw	143
  7540  0AD6  318A  22F1  318A   	fcall	_wireReadDataByte
  7541  0AD9  0020               	movlb	0	; select bank0
  7542  0ADA  00AA               	movwf	??_setAmbientLightGain
  7543  0ADB  082A               	movf	??_setAmbientLightGain,w
  7544  0ADC  00AC               	movwf	setAmbientLightGain@val
  7545                           
  7546                           ;APDS9960.c: 221:     drive &= 0b00000011;
  7547  0ADD  3003               	movlw	3
  7548  0ADE  00AA               	movwf	??_setAmbientLightGain
  7549  0ADF  082A               	movf	??_setAmbientLightGain,w
  7550  0AE0  05AB               	andwf	setAmbientLightGain@drive,f
  7551                           
  7552                           ;APDS9960.c: 222:     val &= 0b11111100;
  7553  0AE1  30FC               	movlw	252
  7554  0AE2  00AA               	movwf	??_setAmbientLightGain
  7555  0AE3  082A               	movf	??_setAmbientLightGain,w
  7556  0AE4  05AC               	andwf	setAmbientLightGain@val,f
  7557                           
  7558                           ;APDS9960.c: 223:     val |= drive;
  7559  0AE5  082B               	movf	setAmbientLightGain@drive,w
  7560  0AE6  00AA               	movwf	??_setAmbientLightGain
  7561  0AE7  082A               	movf	??_setAmbientLightGain,w
  7562  0AE8  04AC               	iorwf	setAmbientLightGain@val,f
  7563                           
  7564                           ;APDS9960.c: 226:     if( !wireWriteDataByte(0x8F, val) ) {
  7565  0AE9  082C               	movf	setAmbientLightGain@val,w
  7566  0AEA  00AA               	movwf	??_setAmbientLightGain
  7567  0AEB  082A               	movf	??_setAmbientLightGain,w
  7568  0AEC  00A6               	movwf	wireWriteDataByte@val
  7569  0AED  308F               	movlw	143
  7570  0AEE  318A  2262         	fcall	_wireWriteDataByte
  7571  0AF0  0008               	return
  7572  0AF1                     __end_of_setAmbientLightGain:	
  7573                           
  7574                           	psect	text14
  7575  0957                     __ptext14:	
  7576 ;; *************** function _i2c1_driver_open *****************
  7577 ;; Defined at:
  7578 ;;		line 83 in file "mcc_generated_files/i2c1_driver.c"
  7579 ;; Parameters:    Size  Location     Type
  7580 ;;		None
  7581 ;; Auto vars:     Size  Location     Type
  7582 ;;		None
  7583 ;; Return value:  Size  Location     Type
  7584 ;;		None               void
  7585 ;; Registers used:
  7586 ;;		wreg, status,2
  7587 ;; Tracked objects:
  7588 ;;		On entry : 0/0
  7589 ;;		On exit  : 0/0
  7590 ;;		Unchanged: 0/0
  7591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7592 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7593 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7594 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7595 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7596 ;;Total ram usage:        0 bytes
  7597 ;; Hardware stack levels used:    1
  7598 ;; Hardware stack levels required when called:    5
  7599 ;; This function calls:
  7600 ;;		Nothing
  7601 ;; This function is called by:
  7602 ;;		_initialize
  7603 ;;		_i2c_open
  7604 ;;		_InitI2C
  7605 ;; This function uses a non-reentrant model
  7606 ;;
  7607                           
  7608                           
  7609                           ;psect for function _i2c1_driver_open
  7610  0957                     _i2c1_driver_open:	
  7611                           
  7612                           ;incstack = 0
  7613                           ; Regs used in _i2c1_driver_open: [wreg+status,2]
  7614  0957  0024               	movlb	4	; select bank4
  7615  0958  1A95               	btfsc	21,5	;volatile
  7616  0959  0008               	return
  7617  095A  0194               	clrf	20	;volatile
  7618  095B  3028               	movlw	40
  7619  095C  0095               	movwf	21	;volatile
  7620  095D  0196               	clrf	22	;volatile
  7621  095E  3003               	movlw	3
  7622  095F  0092               	movwf	18	;volatile
  7623  0960  0008               	return
  7624  0961                     __end_of_i2c1_driver_open:	
  7625                           
  7626                           	psect	text15
  7627  0F42                     __ptext15:	
  7628 ;; *************** function _handleGesture *****************
  7629 ;; Defined at:
  7630 ;;		line 162 in file "main.c"
  7631 ;; Parameters:    Size  Location     Type
  7632 ;;		None
  7633 ;; Auto vars:     Size  Location     Type
  7634 ;;		None
  7635 ;; Return value:  Size  Location     Type
  7636 ;;                  1    wreg      void 
  7637 ;; Registers used:
  7638 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7639 ;; Tracked objects:
  7640 ;;		On entry : 0/0
  7641 ;;		On exit  : 0/0
  7642 ;;		Unchanged: 0/0
  7643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7644 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7645 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7646 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7647 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7648 ;;Total ram usage:        1 bytes
  7649 ;; Hardware stack levels used:    1
  7650 ;; Hardware stack levels required when called:   10
  7651 ;; This function calls:
  7652 ;;		_Display_Name
  7653 ;;		_readGesture
  7654 ;; This function is called by:
  7655 ;;		_main
  7656 ;; This function uses a non-reentrant model
  7657 ;;
  7658                           
  7659                           
  7660                           ;psect for function _handleGesture
  7661  0F42                     _handleGesture:	
  7662                           
  7663                           ;main.c: 168:     switch(readGesture()) {
  7664                           
  7665                           ;incstack = 0
  7666                           ; Regs used in _handleGesture: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7667  0F42  2F7C               	goto	l6991
  7668  0F43                     l6969:	
  7669                           
  7670                           ;main.c: 176:             printed = 0;
  7671  0F43  01ED               	clrf	_printed
  7672                           
  7673                           ;main.c: 179:             name++;
  7674  0F44  3001               	movlw	1
  7675  0F45  07DC               	addwf	_name,f
  7676  0F46  3000               	movlw	0
  7677  0F47  3DDD               	addwfc	_name+1,f
  7678                           
  7679                           ;main.c: 180:             if(name > 3) {
  7680  0F48  085D               	movf	_name+1,w
  7681  0F49  3A80               	xorlw	128
  7682  0F4A  00DB               	movwf	??_handleGesture
  7683  0F4B  3080               	movlw	128
  7684  0F4C  025B               	subwf	??_handleGesture,w
  7685  0F4D  1D03               	skipz
  7686  0F4E  2F51               	goto	u6305
  7687  0F4F  3004               	movlw	4
  7688  0F50  025C               	subwf	_name,w
  7689  0F51                     u6305:	
  7690  0F51  1C03               	skipc
  7691  0F52  2F56               	goto	l6977
  7692                           
  7693                           ;main.c: 181:                 name = 0;
  7694  0F53  0020               	movlb	0	; select bank0
  7695  0F54  01DC               	clrf	_name
  7696  0F55  01DD               	clrf	_name+1
  7697  0F56                     l6977:	
  7698                           
  7699                           ;main.c: 183:             Display_Name(names[name]);
  7700  0F56  0020               	movlb	0	; select bank0
  7701  0F57  355C               	lslf	_name,w
  7702  0F58  3E60               	addlw	(low (_names| (0+256)))& (0+255)
  7703  0F59  0086               	movwf	6
  7704  0F5A  3001               	movlw	1	; select bank2/3
  7705  0F5B  0087               	movwf	7
  7706  0F5C  3F40               	moviw [0]fsr1
  7707  0F5D  00A5               	movwf	Display_Name@string1
  7708  0F5E  3F41               	moviw [1]fsr1
  7709  0F5F  00A6               	movwf	Display_Name@string1+1
  7710  0F60  318D  2581  318F   	fcall	_Display_Name
  7711                           
  7712                           ;main.c: 184:             break;
  7713  0F63  2F99               	goto	l6993
  7714  0F64                     l6979:	
  7715                           
  7716                           ;main.c: 186:             printed = 0;
  7717  0F64  01ED               	clrf	_printed
  7718                           
  7719                           ;main.c: 187:             --name;
  7720  0F65  30FF               	movlw	255
  7721  0F66  07DC               	addwf	_name,f
  7722  0F67  30FF               	movlw	255
  7723  0F68  3DDD               	addwfc	_name+1,f
  7724                           
  7725                           ;main.c: 188:             if(name < 0) {
  7726  0F69  1FDD               	btfss	_name+1,7
  7727  0F6A  2F6F               	goto	l6987
  7728                           
  7729                           ;main.c: 189:                 name = 3;
  7730  0F6B  3003               	movlw	3
  7731  0F6C  00DC               	movwf	_name
  7732  0F6D  3000               	movlw	0
  7733  0F6E  00DD               	movwf	_name+1
  7734  0F6F                     l6987:	
  7735                           
  7736                           ;main.c: 191:             Display_Name(names[name]);
  7737  0F6F  355C               	lslf	_name,w
  7738  0F70  3E60               	addlw	(low (_names| (0+256)))& (0+255)
  7739  0F71  0086               	movwf	6
  7740  0F72  3001               	movlw	1	; select bank2/3
  7741  0F73  0087               	movwf	7
  7742  0F74  3F40               	moviw [0]fsr1
  7743  0F75  00A5               	movwf	Display_Name@string1
  7744  0F76  3F41               	moviw [1]fsr1
  7745  0F77  00A6               	movwf	Display_Name@string1+1
  7746  0F78  318D  2581  318F   	fcall	_Display_Name
  7747                           
  7748                           ;main.c: 192:             break;
  7749  0F7B  2F99               	goto	l6993
  7750  0F7C                     l6991:	
  7751  0F7C  3186  26E3  318F   	fcall	_readGesture
  7752                           
  7753                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7754                           ; Switch size 1, requested type "simple"
  7755                           ; Number of cases is 1, Range of values is 0 to 0
  7756                           ; switch strategies available:
  7757                           ; Name         Instructions Cycles
  7758                           ; simple_byte            4     3 (average)
  7759                           ; direct_byte            8     6 (fixed)
  7760                           ; jumptable            260     6 (fixed)
  7761                           ;	Chosen strategy is simple_byte
  7762  0F7F  0020               	movlb	0	; select bank0
  7763  0F80  0850               	movf	?_readGesture+1,w
  7764  0F81  3A00               	xorlw	0	; case 0
  7765  0F82  1903               	skipnz
  7766  0F83  2F85               	goto	l7227
  7767  0F84  2F99               	goto	l6993
  7768  0F85                     l7227:	
  7769                           
  7770                           ; Switch size 1, requested type "simple"
  7771                           ; Number of cases is 6, Range of values is 1 to 6
  7772                           ; switch strategies available:
  7773                           ; Name         Instructions Cycles
  7774                           ; simple_byte           19    10 (average)
  7775                           ; direct_byte           21     9 (fixed)
  7776                           ; jumptable            263     9 (fixed)
  7777                           ;	Chosen strategy is simple_byte
  7778  0F85  084F               	movf	?_readGesture,w
  7779  0F86  3A01               	xorlw	1	; case 1
  7780  0F87  1903               	skipnz
  7781  0F88  2F43               	goto	l6969
  7782  0F89  3A03               	xorlw	3	; case 2
  7783  0F8A  1903               	skipnz
  7784  0F8B  2F64               	goto	l6979
  7785  0F8C  3A01               	xorlw	1	; case 3
  7786  0F8D  1903               	skipnz
  7787  0F8E  2F99               	goto	l6993
  7788  0F8F  3A07               	xorlw	7	; case 4
  7789  0F90  1903               	skipnz
  7790  0F91  2F99               	goto	l6993
  7791  0F92  3A01               	xorlw	1	; case 5
  7792  0F93  1903               	skipnz
  7793  0F94  2F99               	goto	l6993
  7794  0F95  3A03               	xorlw	3	; case 6
  7795  0F96  1903               	skipnz
  7796  0F97  2F99               	goto	l6993
  7797  0F98  2F99               	goto	l6993
  7798  0F99                     l6993:	
  7799                           
  7800                           ;main.c: 204:     printed = 0;
  7801  0F99  0020               	movlb	0	; select bank0
  7802  0F9A  01ED               	clrf	_printed
  7803  0F9B  0008               	return
  7804  0F9C                     __end_of_handleGesture:	
  7805                           
  7806                           	psect	text16
  7807  06E3                     __ptext16:	
  7808 ;; *************** function _readGesture *****************
  7809 ;; Defined at:
  7810 ;;		line 556 in file "APDS9960.c"
  7811 ;; Parameters:    Size  Location     Type
  7812 ;;		None
  7813 ;; Auto vars:     Size  Location     Type
  7814 ;;  fifo_data      64    0[BANK2 ] unsigned char [64]
  7815 ;;  fifo_data2     64    0[BANK1 ] unsigned char [64]
  7816 ;;  i               2   57[BANK0 ] int 
  7817 ;;  bytes_read      2   54[BANK0 ] int 
  7818 ;;  motion          2   51[BANK0 ] int 
  7819 ;;  fifo_level      1   56[BANK0 ] unsigned char 
  7820 ;;  gstatus         1   53[BANK0 ] unsigned char 
  7821 ;; Return value:  Size  Location     Type
  7822 ;;                  2   47[BANK0 ] int 
  7823 ;; Registers used:
  7824 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7825 ;; Tracked objects:
  7826 ;;		On entry : 0/0
  7827 ;;		On exit  : 0/0
  7828 ;;		Unchanged: 0/0
  7829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7830 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7831 ;;      Locals:         0       8      64      64       0       0       0       0       0       0       0       0       
      +0       0
  7832 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7833 ;;      Totals:         0      12      64      64       0       0       0       0       0       0       0       0       
      +0       0
  7834 ;;Total ram usage:      140 bytes
  7835 ;; Hardware stack levels used:    1
  7836 ;; Hardware stack levels required when called:    9
  7837 ;; This function calls:
  7838 ;;		_decodeGesture
  7839 ;;		_getMode
  7840 ;;		_isGestureAvailable
  7841 ;;		_processGestureData
  7842 ;;		_resetGestureParameters
  7843 ;;		_wireReadDataBlock
  7844 ;;		_wireReadDataByte
  7845 ;; This function is called by:
  7846 ;;		_handleGesture
  7847 ;; This function uses a non-reentrant model
  7848 ;;
  7849                           
  7850                           
  7851                           ;psect for function _readGesture
  7852  06E3                     _readGesture:	
  7853                           
  7854                           ;APDS9960.c: 559:     int bytes_read = 0;
  7855                           
  7856                           ;incstack = 0
  7857                           ; Regs used in _readGesture: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7858  06E3  0020               	movlb	0	; select bank0
  7859  06E4  01D6               	clrf	readGesture@bytes_read
  7860  06E5  01D7               	clrf	readGesture@bytes_read+1
  7861                           
  7862                           ;APDS9960.c: 560:     uint8_t fifo_data[64];;APDS9960.c: 561:     uint8_t fifo_data2[64]
      +                          ;;APDS9960.c: 562:     uint8_t gstatus;;APDS9960.c: 563:     int motion;;APDS9960.c: 564
      +                          :     int i;;APDS9960.c: 567:     if( !isGestureAvailable() || !(getMode() & 0b01000001)
      +                           ) {
  7863  06E6  3189  21A6  3186   	fcall	_isGestureAvailable
  7864  06E9  3A00               	xorlw	0
  7865  06EA  1903               	skipnz
  7866  06EB  2EF2               	goto	l6367
  7867  06EC  3189  214E  3186   	fcall	_getMode
  7868  06EF  3941               	andlw	65
  7869  06F0  1D03               	btfss	3,2
  7870  06F1  2FA7               	goto	l6371
  7871  06F2                     l6367:	
  7872                           
  7873                           ;APDS9960.c: 568:         return DIR_NONE;
  7874  06F2  0020               	movlb	0	; select bank0
  7875  06F3  01CF               	clrf	?_readGesture
  7876  06F4  01D0               	clrf	?_readGesture+1
  7877  06F5  0008               	return
  7878  06F6                     l6377:	
  7879                           ;APDS9960.c: 569:     }
  7880                           
  7881                           
  7882                           ;APDS9960.c: 584:         {;APDS9960.c: 586:          fifo_level= wireReadDataByte(0xAE)
      +                          ;
  7883  06F6  30AE               	movlw	174
  7884  06F7  318A  22F1  3186   	fcall	_wireReadDataByte
  7885  06FA  0020               	movlb	0	; select bank0
  7886  06FB  00D1               	movwf	??_readGesture
  7887  06FC  0851               	movf	??_readGesture,w
  7888  06FD  00D8               	movwf	readGesture@fifo_level
  7889                           
  7890                           ;APDS9960.c: 590:             if( fifo_level > 0) {
  7891  06FE  0858               	movf	readGesture@fifo_level,w
  7892  06FF  1903               	btfsc	3,2
  7893  0700  2FA7               	goto	l6371
  7894                           
  7895                           ;APDS9960.c: 592:               if(fifo_level < 17)
  7896  0701  3011               	movlw	17
  7897  0702  0258               	subwf	readGesture@fifo_level,w
  7898  0703  1803               	skipnc
  7899  0704  2F09               	goto	l6385
  7900                           
  7901                           ;APDS9960.c: 593:               {;APDS9960.c: 594:                 bytes_read = wireRead
      +                          DataBlock( 0xFC,
  7902  0705  3020               	movlw	low readGesture@fifo_data
  7903  0706  00A6               	movwf	wireReadDataBlock@val
  7904  0707  3001               	movlw	high readGesture@fifo_data
  7905  0708  2F0C               	goto	L1
  7906  0709                     l6385:	
  7907                           ;APDS9960.c: 597:               } else
  7908                           
  7909                           
  7910                           ;APDS9960.c: 598:               {;APDS9960.c: 599:                 bytes_read = wireRead
      +                          DataBlock( 0xFC,
  7911  0709  30A0               	movlw	low readGesture@fifo_data2
  7912  070A  00A6               	movwf	wireReadDataBlock@val
  7913  070B  3000               	movlw	high readGesture@fifo_data2
  7914  070C                     L1:	
  7915  070C  00A7               	movwf	wireReadDataBlock@val+1
  7916  070D  0858               	movf	readGesture@fifo_level,w
  7917  070E  00D1               	movwf	??_readGesture
  7918  070F  01D2               	clrf	??_readGesture+1
  7919  0710  35D1               	lslf	??_readGesture,f
  7920  0711  0DD2               	rlf	??_readGesture+1,f
  7921  0712  35D1               	lslf	??_readGesture,f
  7922  0713  0DD2               	rlf	??_readGesture+1,f
  7923  0714  0851               	movf	??_readGesture,w
  7924  0715  00A8               	movwf	wireReadDataBlock@len
  7925  0716  0852               	movf	??_readGesture+1,w
  7926  0717  00A9               	movwf	wireReadDataBlock@len+1
  7927  0718  30FC               	movlw	252
  7928  0719  318E  2608  3186   	fcall	_wireReadDataBlock
  7929  071C  0020               	movlb	0	; select bank0
  7930  071D  0827               	movf	?_wireReadDataBlock+1,w
  7931  071E  00D7               	movwf	readGesture@bytes_read+1
  7932  071F  0826               	movf	?_wireReadDataBlock,w
  7933  0720  00D6               	movwf	readGesture@bytes_read
  7934                           
  7935                           ;APDS9960.c: 605:                 if( bytes_read == -1 )
  7936  0721  0A56               	incf	readGesture@bytes_read,w
  7937  0722  1D03               	skipz
  7938  0723  2F2C               	goto	l6393
  7939  0724  0A57               	incf	readGesture@bytes_read+1,w
  7940  0725  1D03               	btfss	3,2
  7941  0726  2F2C               	goto	l6393
  7942                           
  7943                           ;APDS9960.c: 606:                 {;APDS9960.c: 607:                     return 0xFF;
  7944  0727  30FF               	movlw	255
  7945  0728  00CF               	movwf	?_readGesture
  7946  0729  3000               	movlw	0
  7947  072A  00D0               	movwf	?_readGesture+1
  7948  072B  0008               	return
  7949  072C                     l6393:	
  7950                           
  7951                           ;APDS9960.c: 612:                 if( bytes_read >= 4 )
  7952  072C  0857               	movf	readGesture@bytes_read+1,w
  7953  072D  3A80               	xorlw	128
  7954  072E  00D1               	movwf	??_readGesture
  7955  072F  3080               	movlw	128
  7956  0730  0251               	subwf	??_readGesture,w
  7957  0731  1D03               	skipz
  7958  0732  2F35               	goto	u5555
  7959  0733  3004               	movlw	4
  7960  0734  0256               	subwf	readGesture@bytes_read,w
  7961  0735                     u5555:	
  7962  0735  1C03               	skipc
  7963  0736  2FA7               	goto	l6371
  7964                           
  7965                           ;APDS9960.c: 613:                 {;APDS9960.c: 615:                     for( i = 0; i <
      +                           bytes_read; i += 4 ) {
  7966  0737  0020               	movlb	0	; select bank0
  7967  0738  01D9               	clrf	readGesture@i
  7968  0739  01DA               	clrf	readGesture@i+1
  7969  073A                     l6405:	
  7970  073A  085A               	movf	readGesture@i+1,w
  7971  073B  3A80               	xorlw	128
  7972  073C  00D1               	movwf	??_readGesture
  7973  073D  0857               	movf	readGesture@bytes_read+1,w
  7974  073E  3A80               	xorlw	128
  7975  073F  0251               	subwf	??_readGesture,w
  7976  0740  1D03               	skipz
  7977  0741  2F44               	goto	u5565
  7978  0742  0856               	movf	readGesture@bytes_read,w
  7979  0743  0259               	subwf	readGesture@i,w
  7980  0744                     u5565:	
  7981  0744  1803               	btfsc	3,0
  7982  0745  2F9B               	goto	l6407
  7983                           
  7984                           ;APDS9960.c: 616:                         gesture_data_.u_data[gesture_data_.index] = fi
      +                          fo_data[i + 0];
  7985  0746  0020               	movlb	0	; select bank0
  7986  0747  0859               	movf	readGesture@i,w
  7987  0748  3E20               	addlw	(low (readGesture@fifo_data| (0+256)))& (0+255)
  7988  0749  0086               	movwf	6
  7989  074A  3001               	movlw	1	; select bank2/3
  7990  074B  0087               	movwf	7
  7991  074C  0801               	movf	1,w
  7992  074D  00D1               	movwf	??_readGesture
  7993  074E  0024               	movlb	4	; select bank4
  7994  074F  0860               	movf	(_gesture_data_^(0+512)+64),w
  7995  0750  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  7996  0751  0086               	movwf	6
  7997  0752  3002               	movlw	2	; select bank4/5
  7998  0753  0087               	movwf	7
  7999  0754  0020               	movlb	0	; select bank0
  8000  0755  0851               	movf	??_readGesture,w
  8001  0756  0081               	movwf	1
  8002                           
  8003                           ;APDS9960.c: 618:                         gesture_data_.d_data[gesture_data_.index] = fi
      +                          fo_data[i + 1];
  8004  0757  0859               	movf	readGesture@i,w
  8005  0758  3E01               	addlw	1
  8006  0759  3E20               	addlw	(low (readGesture@fifo_data| (0+256)))& (0+255)
  8007  075A  0086               	movwf	6
  8008  075B  3001               	movlw	1	; select bank2/3
  8009  075C  0087               	movwf	7
  8010  075D  0801               	movf	1,w
  8011  075E  00D1               	movwf	??_readGesture
  8012  075F  0024               	movlb	4	; select bank4
  8013  0760  0860               	movf	(_gesture_data_^(0+512)+64),w
  8014  0761  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  8015  0762  0086               	movwf	6
  8016  0763  3002               	movlw	2	; select bank4/5
  8017  0764  0087               	movwf	7
  8018  0765  0020               	movlb	0	; select bank0
  8019  0766  0851               	movf	??_readGesture,w
  8020  0767  0081               	movwf	1
  8021                           
  8022                           ;APDS9960.c: 620:                         gesture_data_.l_data[gesture_data_.index] = fi
      +                          fo_data[i + 2];
  8023  0768  0859               	movf	readGesture@i,w
  8024  0769  3E02               	addlw	2
  8025  076A  3E20               	addlw	(low (readGesture@fifo_data| (0+256)))& (0+255)
  8026  076B  0086               	movwf	6
  8027  076C  3001               	movlw	1	; select bank2/3
  8028  076D  0087               	movwf	7
  8029  076E  0801               	movf	1,w
  8030  076F  00D1               	movwf	??_readGesture
  8031  0770  0024               	movlb	4	; select bank4
  8032  0771  0860               	movf	(_gesture_data_^(0+512)+64),w
  8033  0772  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  8034  0773  0086               	movwf	6
  8035  0774  3002               	movlw	2	; select bank4/5
  8036  0775  0087               	movwf	7
  8037  0776  0020               	movlb	0	; select bank0
  8038  0777  0851               	movf	??_readGesture,w
  8039  0778  0081               	movwf	1
  8040                           
  8041                           ;APDS9960.c: 622:                         gesture_data_.r_data[gesture_data_.index] = fi
      +                          fo_data[i + 3];
  8042  0779  0859               	movf	readGesture@i,w
  8043  077A  3E03               	addlw	3
  8044  077B  3E20               	addlw	(low (readGesture@fifo_data| (0+256)))& (0+255)
  8045  077C  0086               	movwf	6
  8046  077D  3001               	movlw	1	; select bank2/3
  8047  077E  0087               	movwf	7
  8048  077F  0801               	movf	1,w
  8049  0780  00D1               	movwf	??_readGesture
  8050  0781  0024               	movlb	4	; select bank4
  8051  0782  0860               	movf	(_gesture_data_^(0+512)+64),w
  8052  0783  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  8053  0784  0086               	movwf	6
  8054  0785  3002               	movlw	2	; select bank4/5
  8055  0786  0087               	movwf	7
  8056  0787  0020               	movlb	0	; select bank0
  8057  0788  0851               	movf	??_readGesture,w
  8058  0789  0081               	movwf	1
  8059                           
  8060                           ;APDS9960.c: 624:                         gesture_data_.index++;
  8061  078A  3001               	movlw	1
  8062  078B  00D1               	movwf	??_readGesture
  8063  078C  0851               	movf	??_readGesture,w
  8064  078D  0024               	movlb	4	; select bank4
  8065  078E  07E0               	addwf	(_gesture_data_^(0+512)+64),f
  8066                           
  8067                           ;APDS9960.c: 625:                         gesture_data_.total_gestures++;
  8068  078F  3001               	movlw	1
  8069  0790  0020               	movlb	0	; select bank0
  8070  0791  00D1               	movwf	??_readGesture
  8071  0792  0851               	movf	??_readGesture,w
  8072  0793  0024               	movlb	4	; select bank4
  8073  0794  07E1               	addwf	(_gesture_data_^(0+512)+65),f
  8074                           
  8075                           ;APDS9960.c: 626:                     }
  8076  0795  3004               	movlw	4
  8077  0796  0020               	movlb	0	; select bank0
  8078  0797  07D9               	addwf	readGesture@i,f
  8079  0798  3000               	movlw	0
  8080  0799  3DDA               	addwfc	readGesture@i+1,f
  8081  079A  2F3A               	goto	l6405
  8082  079B                     l6407:	
  8083                           
  8084                           ;APDS9960.c: 629:                     if( processGestureData() )
  8085  079B  3180  206B  3186   	fcall	_processGestureData
  8086  079E  3A00               	xorlw	0
  8087  079F  1903               	skipnz
  8088  07A0  2FA4               	goto	l6411
  8089                           
  8090                           ;APDS9960.c: 630:                     {;APDS9960.c: 632:                         if( dec
      +                          odeGesture() ) {
  8091  07A1  3183  233A  3186   	fcall	_decodeGesture
  8092  07A4                     l6411:	
  8093                           
  8094                           ;APDS9960.c: 638:                     gesture_data_.index = 0;
  8095  07A4  0024               	movlb	4	; select bank4
  8096  07A5  01E0               	clrf	(_gesture_data_^(0+512)+64)
  8097                           
  8098                           ;APDS9960.c: 639:                     gesture_data_.total_gestures = 0;
  8099  07A6  01E1               	clrf	(_gesture_data_^(0+512)+65)
  8100  07A7                     l6371:	
  8101                           
  8102                           ;APDS9960.c: 575:         _delay((unsigned long)((30)*(500000/4000.0)));
  8103  07A7  3005               	movlw	5
  8104  07A8  0020               	movlb	0	; select bank0
  8105  07A9  00D1               	movwf	??_readGesture
  8106  07AA  30DD               	movlw	221
  8107  07AB                     u6417:	
  8108  07AB  0B89               	decfsz	9,f
  8109  07AC  2FAB               	goto	u6417
  8110  07AD  0BD1               	decfsz	??_readGesture,f
  8111  07AE  2FAB               	goto	u6417
  8112  07AF  3200               	nop2
  8113                           
  8114                           ;APDS9960.c: 578:         gstatus = wireReadDataByte(0xAF);
  8115  07B0  30AF               	movlw	175
  8116  07B1  318A  22F1  3186   	fcall	_wireReadDataByte
  8117  07B4  0020               	movlb	0	; select bank0
  8118  07B5  00D1               	movwf	??_readGesture
  8119  07B6  0851               	movf	??_readGesture,w
  8120  07B7  00D5               	movwf	readGesture@gstatus
  8121                           
  8122                           ;APDS9960.c: 583:         if( (gstatus & 0b00000001) == 0b00000001 )
  8123  07B8  1855               	btfsc	readGesture@gstatus,0
  8124  07B9  2EF6               	goto	l6377
  8125                           
  8126                           ;APDS9960.c: 645:             _delay((unsigned long)((30)*(500000/4000.0)));
  8127  07BA  3005               	movlw	5
  8128  07BB  0020               	movlb	0	; select bank0
  8129  07BC  00D1               	movwf	??_readGesture
  8130  07BD  30DD               	movlw	221
  8131  07BE                     u6427:	
  8132  07BE  0B89               	decfsz	9,f
  8133  07BF  2FBE               	goto	u6427
  8134  07C0  0BD1               	decfsz	??_readGesture,f
  8135  07C1  2FBE               	goto	u6427
  8136  07C2  3200               	nop2
  8137                           
  8138                           ;APDS9960.c: 646:             decodeGesture();
  8139  07C3  3183  233A  3186   	fcall	_decodeGesture
  8140                           
  8141                           ;APDS9960.c: 647:             motion = gesture_motion_;
  8142  07C6  0022               	movlb	2	; select bank2
  8143  07C7  0869               	movf	(_gesture_motion_+1)^(0+256),w
  8144  07C8  0020               	movlb	0	; select bank0
  8145  07C9  00D4               	movwf	readGesture@motion+1
  8146  07CA  0022               	movlb	2	; select bank2
  8147  07CB  0868               	movf	_gesture_motion_^(0+256),w
  8148  07CC  0020               	movlb	0	; select bank0
  8149  07CD  00D3               	movwf	readGesture@motion
  8150                           
  8151                           ;APDS9960.c: 649:             resetGestureParameters();
  8152  07CE  318A  224A         	fcall	_resetGestureParameters
  8153                           
  8154                           ;APDS9960.c: 651:             return motion;
  8155  07D0  0020               	movlb	0	; select bank0
  8156  07D1  0854               	movf	readGesture@motion+1,w
  8157  07D2  00D0               	movwf	?_readGesture+1
  8158  07D3  0853               	movf	readGesture@motion,w
  8159  07D4  00CF               	movwf	?_readGesture
  8160  07D5  0008               	return
  8161  07D6                     __end_of_readGesture:	
  8162                           
  8163                           	psect	text17
  8164  0E08                     __ptext17:	
  8165 ;; *************** function _wireReadDataBlock *****************
  8166 ;; Defined at:
  8167 ;;		line 847 in file "APDS9960.c"
  8168 ;; Parameters:    Size  Location     Type
  8169 ;;  reg             1    wreg     unsigned char 
  8170 ;;  val             2    6[BANK0 ] PTR unsigned char 
  8171 ;;		 -> readGesture@fifo_data2(64), readGesture@fifo_data(64), 
  8172 ;;  len             2    8[BANK0 ] unsigned int 
  8173 ;; Auto vars:     Size  Location     Type
  8174 ;;  reg             1   15[BANK0 ] unsigned char 
  8175 ;;  j               1   16[BANK0 ] unsigned char 
  8176 ;; Return value:  Size  Location     Type
  8177 ;;                  2    6[BANK0 ] int 
  8178 ;; Registers used:
  8179 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8180 ;; Tracked objects:
  8181 ;;		On entry : 0/0
  8182 ;;		On exit  : 0/0
  8183 ;;		Unchanged: 0/0
  8184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8185 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8186 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8187 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8188 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8189 ;;Total ram usage:       11 bytes
  8190 ;; Hardware stack levels used:    1
  8191 ;; Hardware stack levels required when called:    7
  8192 ;; This function calls:
  8193 ;;		_I2C_ReStart
  8194 ;;		_I2C_Read_Byte
  8195 ;;		_I2C_Send_NACK
  8196 ;;		_I2C_Start
  8197 ;;		_I2C_Stop
  8198 ;;		_I2C_Write_Byte
  8199 ;; This function is called by:
  8200 ;;		_readGesture
  8201 ;; This function uses a non-reentrant model
  8202 ;;
  8203                           
  8204                           
  8205                           ;psect for function _wireReadDataBlock
  8206  0E08                     _wireReadDataBlock:	
  8207                           
  8208                           ;incstack = 0
  8209                           ; Regs used in _wireReadDataBlock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8210                           ;wireReadDataBlock@reg stored from wreg
  8211  0E08  0020               	movlb	0	; select bank0
  8212  0E09  00AF               	movwf	wireReadDataBlock@reg
  8213                           
  8214                           ;APDS9960.c: 851:     I2C_Start();
  8215  0E0A  3188  20A3  318E   	fcall	_I2C_Start
  8216                           
  8217                           ;APDS9960.c: 852:     I2C_Write_Byte((0x39 << 1 )| 0x00);
  8218  0E0D  3072               	movlw	114
  8219  0E0E  318A  227D  318E   	fcall	_I2C_Write_Byte
  8220                           
  8221                           ;APDS9960.c: 854:     I2C_Write_Byte(reg);
  8222  0E11  0020               	movlb	0	; select bank0
  8223  0E12  082F               	movf	wireReadDataBlock@reg,w
  8224  0E13  318A  227D  318E   	fcall	_I2C_Write_Byte
  8225                           
  8226                           ;APDS9960.c: 856:     for(j= 0; j < len ; j++)
  8227  0E16  0020               	movlb	0	; select bank0
  8228  0E17  01B0               	clrf	wireReadDataBlock@j
  8229  0E18                     l5951:	
  8230  0E18  0830               	movf	wireReadDataBlock@j,w
  8231  0E19  00AA               	movwf	??_wireReadDataBlock
  8232  0E1A  01AB               	clrf	??_wireReadDataBlock+1
  8233  0E1B  0829               	movf	wireReadDataBlock@len+1,w
  8234  0E1C  022B               	subwf	??_wireReadDataBlock+1,w
  8235  0E1D  1D03               	skipz
  8236  0E1E  2E21               	goto	u4715
  8237  0E1F  0828               	movf	wireReadDataBlock@len,w
  8238  0E20  022A               	subwf	??_wireReadDataBlock,w
  8239  0E21                     u4715:	
  8240  0E21  1803               	btfsc	3,0
  8241  0E22  2E47               	goto	l5953
  8242                           
  8243                           ;APDS9960.c: 857:     {;APDS9960.c: 859:       I2C_ReStart();
  8244  0E23  3188  2094  318E   	fcall	_I2C_ReStart
  8245                           
  8246                           ;APDS9960.c: 860:       I2C_Write_Byte((0x39 << 1) | 0x01);
  8247  0E26  3073               	movlw	115
  8248  0E27  318A  227D  318E   	fcall	_I2C_Write_Byte
  8249                           
  8250                           ;APDS9960.c: 861:       val[j]=I2C_Read_Byte();
  8251  0E2A  3189  2161  318E   	fcall	_I2C_Read_Byte
  8252  0E2D  0020               	movlb	0	; select bank0
  8253  0E2E  00AA               	movwf	??_wireReadDataBlock
  8254  0E2F  0830               	movf	wireReadDataBlock@j,w
  8255  0E30  00AB               	movwf	??_wireReadDataBlock+1
  8256  0E31  01AC               	clrf	??_wireReadDataBlock+2
  8257  0E32  082B               	movf	??_wireReadDataBlock+1,w
  8258  0E33  0726               	addwf	wireReadDataBlock@val,w
  8259  0E34  00AD               	movwf	??_wireReadDataBlock+3
  8260  0E35  082C               	movf	??_wireReadDataBlock+2,w
  8261  0E36  3D27               	addwfc	wireReadDataBlock@val+1,w
  8262  0E37  00AE               	movwf	??_wireReadDataBlock+4
  8263  0E38  082D               	movf	??_wireReadDataBlock+3,w
  8264  0E39  0086               	movwf	6
  8265  0E3A  082E               	movf	??_wireReadDataBlock+4,w
  8266  0E3B  0087               	movwf	7
  8267  0E3C  082A               	movf	??_wireReadDataBlock,w
  8268  0E3D  0081               	movwf	1
  8269                           
  8270                           ;APDS9960.c: 862:       I2C_Send_NACK();
  8271  0E3E  3188  209D  318E   	fcall	_I2C_Send_NACK
  8272                           
  8273                           ;APDS9960.c: 864:     }
  8274  0E41  3001               	movlw	1
  8275  0E42  0020               	movlb	0	; select bank0
  8276  0E43  00AA               	movwf	??_wireReadDataBlock
  8277  0E44  082A               	movf	??_wireReadDataBlock,w
  8278  0E45  07B0               	addwf	wireReadDataBlock@j,f
  8279  0E46  2E18               	goto	l5951
  8280  0E47                     l5953:	
  8281                           
  8282                           ;APDS9960.c: 866:     I2C_Stop();
  8283  0E47  3188  20A9         	fcall	_I2C_Stop
  8284                           
  8285                           ;APDS9960.c: 867:     return (int)j;
  8286  0E49  0020               	movlb	0	; select bank0
  8287  0E4A  0830               	movf	wireReadDataBlock@j,w
  8288  0E4B  00AA               	movwf	??_wireReadDataBlock
  8289  0E4C  01AB               	clrf	??_wireReadDataBlock+1
  8290  0E4D  082A               	movf	??_wireReadDataBlock,w
  8291  0E4E  00A6               	movwf	?_wireReadDataBlock
  8292  0E4F  082B               	movf	??_wireReadDataBlock+1,w
  8293  0E50  00A7               	movwf	?_wireReadDataBlock+1
  8294  0E51  0008               	return
  8295  0E52                     __end_of_wireReadDataBlock:	
  8296                           
  8297                           	psect	text18
  8298  006B                     __ptext18:	
  8299 ;; *************** function _processGestureData *****************
  8300 ;; Defined at:
  8301 ;;		line 657 in file "APDS9960.c"
  8302 ;; Parameters:    Size  Location     Type
  8303 ;;		None
  8304 ;; Auto vars:     Size  Location     Type
  8305 ;;  i               2   45[BANK0 ] int 
  8306 ;;  lr_delta        2   43[BANK0 ] int 
  8307 ;;  ud_delta        2   41[BANK0 ] int 
  8308 ;;  lr_ratio_las    2   23[BANK0 ] int 
  8309 ;;  ud_ratio_las    2   21[BANK0 ] int 
  8310 ;;  lr_ratio_fir    2   19[BANK0 ] int 
  8311 ;;  ud_ratio_fir    2   17[BANK0 ] int 
  8312 ;;  r_first         1   40[BANK0 ] unsigned char 
  8313 ;;  l_first         1   39[BANK0 ] unsigned char 
  8314 ;;  d_first         1   38[BANK0 ] unsigned char 
  8315 ;;  u_first         1   37[BANK0 ] unsigned char 
  8316 ;;  r_last          1   36[BANK0 ] unsigned char 
  8317 ;;  l_last          1   35[BANK0 ] unsigned char 
  8318 ;;  d_last          1   34[BANK0 ] unsigned char 
  8319 ;;  u_last          1   33[BANK0 ] unsigned char 
  8320 ;; Return value:  Size  Location     Type
  8321 ;;                  1    wreg      _Bool 
  8322 ;; Registers used:
  8323 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8324 ;; Tracked objects:
  8325 ;;		On entry : 0/0
  8326 ;;		On exit  : 0/0
  8327 ;;		Unchanged: 0/0
  8328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8329 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8330 ;;      Locals:         0      30       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8331 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8332 ;;      Totals:         0      32       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8333 ;;Total ram usage:       32 bytes
  8334 ;; Hardware stack levels used:    1
  8335 ;; Hardware stack levels required when called:    6
  8336 ;; This function calls:
  8337 ;;		___awdiv
  8338 ;;		___wmul
  8339 ;; This function is called by:
  8340 ;;		_readGesture
  8341 ;; This function uses a non-reentrant model
  8342 ;;
  8343                           
  8344                           
  8345                           ;psect for function _processGestureData
  8346  006B                     _processGestureData:	
  8347                           
  8348                           ;APDS9960.c: 659:     uint8_t u_first = 0;
  8349                           
  8350                           ;incstack = 0
  8351                           ; Regs used in _processGestureData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8352  006B  0020               	movlb	0	; select bank0
  8353  006C  01C5               	clrf	processGestureData@u_first
  8354                           
  8355                           ;APDS9960.c: 660:     uint8_t d_first = 0;
  8356  006D  01C6               	clrf	processGestureData@d_first
  8357                           
  8358                           ;APDS9960.c: 661:     uint8_t l_first = 0;
  8359  006E  01C7               	clrf	processGestureData@l_first
  8360                           
  8361                           ;APDS9960.c: 662:     uint8_t r_first = 0;
  8362  006F  01C8               	clrf	processGestureData@r_first
  8363                           
  8364                           ;APDS9960.c: 663:     uint8_t u_last = 0;
  8365  0070  01C1               	clrf	processGestureData@u_last
  8366                           
  8367                           ;APDS9960.c: 664:     uint8_t d_last = 0;
  8368  0071  01C2               	clrf	processGestureData@d_last
  8369                           
  8370                           ;APDS9960.c: 665:     uint8_t l_last = 0;
  8371  0072  01C3               	clrf	processGestureData@l_last
  8372                           
  8373                           ;APDS9960.c: 666:     uint8_t r_last = 0;
  8374  0073  01C4               	clrf	processGestureData@r_last
  8375                           
  8376                           ;APDS9960.c: 667:     int ud_ratio_first;;APDS9960.c: 668:     int lr_ratio_first;;APDS9
      +                          960.c: 669:     int ud_ratio_last;;APDS9960.c: 670:     int lr_ratio_last;;APDS9960.c: 6
      +                          71:     int ud_delta;;APDS9960.c: 672:     int lr_delta;;APDS9960.c: 673:     int i;;APD
      +                          S9960.c: 676:     if( gesture_data_.total_gestures <= 4 ) {
  8377  0074  3005               	movlw	5
  8378  0075  0024               	movlb	4	; select bank4
  8379  0076  0261               	subwf	(_gesture_data_^(0+512)+65),w
  8380  0077  1803               	skipnc
  8381  0078  287B               	goto	l5967
  8382  0079                     l5963:	
  8383                           
  8384                           ;APDS9960.c: 677:         return 0;
  8385  0079  3000               	movlw	0
  8386  007A  0008               	return
  8387  007B                     l5967:	
  8388                           
  8389                           ;APDS9960.c: 681:     if( (gesture_data_.total_gestures <= 32) && (gesture_data_.total_g
      +                          estures > 0) ) {
  8390  007B  3021               	movlw	33
  8391  007C  0261               	subwf	(_gesture_data_^(0+512)+65),w
  8392  007D  1803               	skipnc
  8393  007E  2945               	goto	l6017
  8394  007F  0861               	movf	(_gesture_data_^(0+512)+65),w
  8395  0080  1903               	btfsc	3,2
  8396  0081  2945               	goto	l6017
  8397                           
  8398                           ;APDS9960.c: 682: ;APDS9960.c: 685:         for( i = 0; i < gesture_data_.total_gestures
      +                          ; i++ ) {
  8399  0082  0020               	movlb	0	; select bank0
  8400  0083  01CD               	clrf	processGestureData@i
  8401  0084  01CE               	clrf	processGestureData@i+1
  8402  0085  288A               	goto	l1060
  8403  0086                     l5983:	
  8404                           ;APDS9960.c: 695:                 break;
  8405                           
  8406                           
  8407                           ;APDS9960.c: 697:         }
  8408  0086  3001               	movlw	1
  8409  0087  07CD               	addwf	processGestureData@i,f
  8410  0088  3000               	movlw	0
  8411  0089  3DCE               	addwfc	processGestureData@i+1,f
  8412  008A                     l1060:	
  8413  008A  084E               	movf	processGestureData@i+1,w
  8414  008B  3A80               	xorlw	128
  8415  008C  00AF               	movwf	??_processGestureData
  8416  008D  3080               	movlw	128
  8417  008E  022F               	subwf	??_processGestureData,w
  8418  008F  1D03               	skipz
  8419  0090  2895               	goto	u4795
  8420  0091  0024               	movlb	4	; select bank4
  8421  0092  0861               	movf	(_gesture_data_^(0+512)+65),w
  8422  0093  0020               	movlb	0	; select bank0
  8423  0094  024D               	subwf	processGestureData@i,w
  8424  0095                     u4795:	
  8425  0095  1803               	btfsc	3,0
  8426  0096  28E0               	goto	l5985
  8427                           
  8428                           ;APDS9960.c: 686:             if( (gesture_data_.u_data[i] > 10) &&
  8429  0097  0020               	movlb	0	; select bank0
  8430  0098  084D               	movf	processGestureData@i,w
  8431  0099  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  8432  009A  0086               	movwf	6
  8433  009B  3002               	movlw	2	; select bank4/5
  8434  009C  0087               	movwf	7
  8435  009D  300B               	movlw	11
  8436  009E  0201               	subwf	1,w
  8437  009F  1C03               	skipc
  8438  00A0  2886               	goto	l5983
  8439  00A1  084D               	movf	processGestureData@i,w
  8440  00A2  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  8441  00A3  0086               	movwf	6
  8442  00A4  3002               	movlw	2	; select bank4/5
  8443  00A5  0087               	movwf	7
  8444  00A6  300B               	movlw	11
  8445  00A7  0201               	subwf	1,w
  8446  00A8  1C03               	skipc
  8447  00A9  2886               	goto	l5983
  8448  00AA  084D               	movf	processGestureData@i,w
  8449  00AB  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  8450  00AC  0086               	movwf	6
  8451  00AD  3002               	movlw	2	; select bank4/5
  8452  00AE  0087               	movwf	7
  8453  00AF  300B               	movlw	11
  8454  00B0  0201               	subwf	1,w
  8455  00B1  1C03               	skipc
  8456  00B2  2886               	goto	l5983
  8457  00B3  084D               	movf	processGestureData@i,w
  8458  00B4  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  8459  00B5  0086               	movwf	6
  8460  00B6  3002               	movlw	2	; select bank4/5
  8461  00B7  0087               	movwf	7
  8462  00B8  300B               	movlw	11
  8463  00B9  0201               	subwf	1,w
  8464  00BA  1C03               	skipc
  8465  00BB  2886               	goto	l5983
  8466                           
  8467                           ;APDS9960.c: 689:                 (gesture_data_.r_data[i] > 10) ) {;APDS9960.c: 691:   
      +                                        u_first = gesture_data_.u_data[i];
  8468  00BC  084D               	movf	processGestureData@i,w
  8469  00BD  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  8470  00BE  0086               	movwf	6
  8471  00BF  3002               	movlw	2	; select bank4/5
  8472  00C0  0087               	movwf	7
  8473  00C1  0801               	movf	1,w
  8474  00C2  00AF               	movwf	??_processGestureData
  8475  00C3  082F               	movf	??_processGestureData,w
  8476  00C4  00C5               	movwf	processGestureData@u_first
  8477                           
  8478                           ;APDS9960.c: 692:                 d_first = gesture_data_.d_data[i];
  8479  00C5  084D               	movf	processGestureData@i,w
  8480  00C6  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  8481  00C7  0086               	movwf	6
  8482  00C8  3002               	movlw	2	; select bank4/5
  8483  00C9  0087               	movwf	7
  8484  00CA  0801               	movf	1,w
  8485  00CB  00AF               	movwf	??_processGestureData
  8486  00CC  082F               	movf	??_processGestureData,w
  8487  00CD  00C6               	movwf	processGestureData@d_first
  8488                           
  8489                           ;APDS9960.c: 693:                 l_first = gesture_data_.l_data[i];
  8490  00CE  084D               	movf	processGestureData@i,w
  8491  00CF  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  8492  00D0  0086               	movwf	6
  8493  00D1  3002               	movlw	2	; select bank4/5
  8494  00D2  0087               	movwf	7
  8495  00D3  0801               	movf	1,w
  8496  00D4  00AF               	movwf	??_processGestureData
  8497  00D5  082F               	movf	??_processGestureData,w
  8498  00D6  00C7               	movwf	processGestureData@l_first
  8499                           
  8500                           ;APDS9960.c: 694:                 r_first = gesture_data_.r_data[i];
  8501  00D7  084D               	movf	processGestureData@i,w
  8502  00D8  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  8503  00D9  0086               	movwf	6
  8504  00DA  3002               	movlw	2	; select bank4/5
  8505  00DB  0087               	movwf	7
  8506  00DC  0801               	movf	1,w
  8507  00DD  00AF               	movwf	??_processGestureData
  8508  00DE  082F               	movf	??_processGestureData,w
  8509  00DF  00C8               	movwf	processGestureData@r_first
  8510  00E0                     l5985:	
  8511                           
  8512                           ;APDS9960.c: 700:         if( (u_first == 0) || (d_first == 0) || (l_first == 0) || (r_f
      +                          irst == 0) ) {
  8513  00E0  0020               	movlb	0	; select bank0
  8514  00E1  0845               	movf	processGestureData@u_first,w
  8515  00E2  1903               	btfsc	3,2
  8516  00E3  2879               	goto	l5963
  8517  00E4  0846               	movf	processGestureData@d_first,w
  8518  00E5  1903               	btfsc	3,2
  8519  00E6  2879               	goto	l5963
  8520  00E7  0847               	movf	processGestureData@l_first,w
  8521  00E8  1903               	btfsc	3,2
  8522  00E9  2879               	goto	l5963
  8523  00EA  0848               	movf	processGestureData@r_first,w
  8524  00EB  1903               	btfsc	3,2
  8525  00EC  2879               	goto	l5963
  8526                           
  8527                           ;APDS9960.c: 706:         for( i = gesture_data_.total_gestures - 1; i >= 0; i-- ) {
  8528  00ED  0024               	movlb	4	; select bank4
  8529  00EE  0861               	movf	(_gesture_data_^(0+512)+65),w
  8530  00EF  3EFF               	addlw	255
  8531  00F0  0020               	movlb	0	; select bank0
  8532  00F1  00CD               	movwf	processGestureData@i
  8533  00F2  30FF               	movlw	255
  8534  00F3  1803               	skipnc
  8535  00F4  3000               	movlw	0
  8536  00F5  00CE               	movwf	processGestureData@i+1
  8537                           
  8538                           ;APDS9960.c: 717:                 break;
  8539  00F6  28FB               	goto	l5999
  8540  00F7                     l6013:	
  8541                           
  8542                           ;APDS9960.c: 719:         }
  8543  00F7  30FF               	movlw	255
  8544  00F8  07CD               	addwf	processGestureData@i,f
  8545  00F9  30FF               	movlw	255
  8546  00FA  3DCE               	addwfc	processGestureData@i+1,f
  8547  00FB                     l5999:	
  8548  00FB  1BCE               	btfsc	processGestureData@i+1,7
  8549  00FC  2945               	goto	l6017
  8550                           
  8551                           ;APDS9960.c: 708:             if( (gesture_data_.u_data[i] > 10) &&
  8552  00FD  084D               	movf	processGestureData@i,w
  8553  00FE  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  8554  00FF  0086               	movwf	6
  8555  0100  3002               	movlw	2	; select bank4/5
  8556  0101  0087               	movwf	7
  8557  0102  300B               	movlw	11
  8558  0103  0201               	subwf	1,w
  8559  0104  1C03               	skipc
  8560  0105  28F7               	goto	l6013
  8561  0106  084D               	movf	processGestureData@i,w
  8562  0107  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  8563  0108  0086               	movwf	6
  8564  0109  3002               	movlw	2	; select bank4/5
  8565  010A  0087               	movwf	7
  8566  010B  300B               	movlw	11
  8567  010C  0201               	subwf	1,w
  8568  010D  1C03               	skipc
  8569  010E  28F7               	goto	l6013
  8570  010F  084D               	movf	processGestureData@i,w
  8571  0110  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  8572  0111  0086               	movwf	6
  8573  0112  3002               	movlw	2	; select bank4/5
  8574  0113  0087               	movwf	7
  8575  0114  300B               	movlw	11
  8576  0115  0201               	subwf	1,w
  8577  0116  1C03               	skipc
  8578  0117  28F7               	goto	l6013
  8579  0118  084D               	movf	processGestureData@i,w
  8580  0119  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  8581  011A  0086               	movwf	6
  8582  011B  3002               	movlw	2	; select bank4/5
  8583  011C  0087               	movwf	7
  8584  011D  300B               	movlw	11
  8585  011E  0201               	subwf	1,w
  8586  011F  1C03               	skipc
  8587  0120  28F7               	goto	l6013
  8588                           
  8589                           ;APDS9960.c: 711:                 (gesture_data_.r_data[i] > 10) ) {;APDS9960.c: 713:   
      +                                        u_last = gesture_data_.u_data[i];
  8590  0121  084D               	movf	processGestureData@i,w
  8591  0122  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  8592  0123  0086               	movwf	6
  8593  0124  3002               	movlw	2	; select bank4/5
  8594  0125  0087               	movwf	7
  8595  0126  0801               	movf	1,w
  8596  0127  00AF               	movwf	??_processGestureData
  8597  0128  082F               	movf	??_processGestureData,w
  8598  0129  00C1               	movwf	processGestureData@u_last
  8599                           
  8600                           ;APDS9960.c: 714:                 d_last = gesture_data_.d_data[i];
  8601  012A  084D               	movf	processGestureData@i,w
  8602  012B  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  8603  012C  0086               	movwf	6
  8604  012D  3002               	movlw	2	; select bank4/5
  8605  012E  0087               	movwf	7
  8606  012F  0801               	movf	1,w
  8607  0130  00AF               	movwf	??_processGestureData
  8608  0131  082F               	movf	??_processGestureData,w
  8609  0132  00C2               	movwf	processGestureData@d_last
  8610                           
  8611                           ;APDS9960.c: 715:                 l_last = gesture_data_.l_data[i];
  8612  0133  084D               	movf	processGestureData@i,w
  8613  0134  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  8614  0135  0086               	movwf	6
  8615  0136  3002               	movlw	2	; select bank4/5
  8616  0137  0087               	movwf	7
  8617  0138  0801               	movf	1,w
  8618  0139  00AF               	movwf	??_processGestureData
  8619  013A  082F               	movf	??_processGestureData,w
  8620  013B  00C3               	movwf	processGestureData@l_last
  8621                           
  8622                           ;APDS9960.c: 716:                 r_last = gesture_data_.r_data[i];
  8623  013C  084D               	movf	processGestureData@i,w
  8624  013D  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  8625  013E  0086               	movwf	6
  8626  013F  3002               	movlw	2	; select bank4/5
  8627  0140  0087               	movwf	7
  8628  0141  0801               	movf	1,w
  8629  0142  00AF               	movwf	??_processGestureData
  8630  0143  082F               	movf	??_processGestureData,w
  8631  0144  00C4               	movwf	processGestureData@r_last
  8632  0145                     l6017:	
  8633                           
  8634                           ;APDS9960.c: 723:     ud_ratio_first = ((u_first - d_first) * 100) / (u_first + d_first)
      +                          ;
  8635  0145  0020               	movlb	0	; select bank0
  8636  0146  0845               	movf	processGestureData@u_first,w
  8637  0147  0746               	addwf	processGestureData@d_first,w
  8638  0148  00A6               	movwf	___awdiv@divisor
  8639  0149  01A7               	clrf	___awdiv@divisor+1
  8640  014A  0DA7               	rlf	___awdiv@divisor+1,f
  8641  014B  0846               	movf	processGestureData@d_first,w
  8642  014C  0245               	subwf	processGestureData@u_first,w
  8643  014D  00A0               	movwf	___wmul@multiplier
  8644  014E  01A1               	clrf	___wmul@multiplier+1
  8645  014F  1C03               	skipc
  8646  0150  03A1               	decf	___wmul@multiplier+1,f
  8647  0151  3064               	movlw	100
  8648  0152  00A2               	movwf	___wmul@multiplicand
  8649  0153  3000               	movlw	0
  8650  0154  00A3               	movwf	___wmul@multiplicand+1
  8651  0155  318A  2299  3180   	fcall	___wmul
  8652  0158  0020               	movlb	0	; select bank0
  8653  0159  0821               	movf	?___wmul+1,w
  8654  015A  00A9               	movwf	___awdiv@dividend+1
  8655  015B  0820               	movf	?___wmul,w
  8656  015C  00A8               	movwf	___awdiv@dividend
  8657  015D  318E  26F0  3180   	fcall	___awdiv
  8658  0160  0020               	movlb	0	; select bank0
  8659  0161  0827               	movf	?___awdiv+1,w
  8660  0162  00B2               	movwf	processGestureData@ud_ratio_first+1
  8661  0163  0826               	movf	?___awdiv,w
  8662  0164  00B1               	movwf	processGestureData@ud_ratio_first
  8663                           
  8664                           ;APDS9960.c: 724:     lr_ratio_first = ((l_first - r_first) * 100) / (l_first + r_first)
      +                          ;
  8665  0165  0847               	movf	processGestureData@l_first,w
  8666  0166  0748               	addwf	processGestureData@r_first,w
  8667  0167  00A6               	movwf	___awdiv@divisor
  8668  0168  01A7               	clrf	___awdiv@divisor+1
  8669  0169  0DA7               	rlf	___awdiv@divisor+1,f
  8670  016A  0848               	movf	processGestureData@r_first,w
  8671  016B  0247               	subwf	processGestureData@l_first,w
  8672  016C  00A0               	movwf	___wmul@multiplier
  8673  016D  01A1               	clrf	___wmul@multiplier+1
  8674  016E  1C03               	skipc
  8675  016F  03A1               	decf	___wmul@multiplier+1,f
  8676  0170  3064               	movlw	100
  8677  0171  00A2               	movwf	___wmul@multiplicand
  8678  0172  3000               	movlw	0
  8679  0173  00A3               	movwf	___wmul@multiplicand+1
  8680  0174  318A  2299  3180   	fcall	___wmul
  8681  0177  0020               	movlb	0	; select bank0
  8682  0178  0821               	movf	?___wmul+1,w
  8683  0179  00A9               	movwf	___awdiv@dividend+1
  8684  017A  0820               	movf	?___wmul,w
  8685  017B  00A8               	movwf	___awdiv@dividend
  8686  017C  318E  26F0  3180   	fcall	___awdiv
  8687  017F  0020               	movlb	0	; select bank0
  8688  0180  0827               	movf	?___awdiv+1,w
  8689  0181  00B4               	movwf	processGestureData@lr_ratio_first+1
  8690  0182  0826               	movf	?___awdiv,w
  8691  0183  00B3               	movwf	processGestureData@lr_ratio_first
  8692                           
  8693                           ;APDS9960.c: 725:     ud_ratio_last = ((u_last - d_last) * 100) / (u_last + d_last);
  8694  0184  0841               	movf	processGestureData@u_last,w
  8695  0185  0742               	addwf	processGestureData@d_last,w
  8696  0186  00A6               	movwf	___awdiv@divisor
  8697  0187  01A7               	clrf	___awdiv@divisor+1
  8698  0188  0DA7               	rlf	___awdiv@divisor+1,f
  8699  0189  0842               	movf	processGestureData@d_last,w
  8700  018A  0241               	subwf	processGestureData@u_last,w
  8701  018B  00A0               	movwf	___wmul@multiplier
  8702  018C  01A1               	clrf	___wmul@multiplier+1
  8703  018D  1C03               	skipc
  8704  018E  03A1               	decf	___wmul@multiplier+1,f
  8705  018F  3064               	movlw	100
  8706  0190  00A2               	movwf	___wmul@multiplicand
  8707  0191  3000               	movlw	0
  8708  0192  00A3               	movwf	___wmul@multiplicand+1
  8709  0193  318A  2299  3180   	fcall	___wmul
  8710  0196  0020               	movlb	0	; select bank0
  8711  0197  0821               	movf	?___wmul+1,w
  8712  0198  00A9               	movwf	___awdiv@dividend+1
  8713  0199  0820               	movf	?___wmul,w
  8714  019A  00A8               	movwf	___awdiv@dividend
  8715  019B  318E  26F0  3180   	fcall	___awdiv
  8716  019E  0020               	movlb	0	; select bank0
  8717  019F  0827               	movf	?___awdiv+1,w
  8718  01A0  00B6               	movwf	processGestureData@ud_ratio_last+1
  8719  01A1  0826               	movf	?___awdiv,w
  8720  01A2  00B5               	movwf	processGestureData@ud_ratio_last
  8721                           
  8722                           ;APDS9960.c: 726:     lr_ratio_last = ((l_last - r_last) * 100) / (l_last + r_last);
  8723  01A3  0843               	movf	processGestureData@l_last,w
  8724  01A4  0744               	addwf	processGestureData@r_last,w
  8725  01A5  00A6               	movwf	___awdiv@divisor
  8726  01A6  01A7               	clrf	___awdiv@divisor+1
  8727  01A7  0DA7               	rlf	___awdiv@divisor+1,f
  8728  01A8  0844               	movf	processGestureData@r_last,w
  8729  01A9  0243               	subwf	processGestureData@l_last,w
  8730  01AA  00A0               	movwf	___wmul@multiplier
  8731  01AB  01A1               	clrf	___wmul@multiplier+1
  8732  01AC  1C03               	skipc
  8733  01AD  03A1               	decf	___wmul@multiplier+1,f
  8734  01AE  3064               	movlw	100
  8735  01AF  00A2               	movwf	___wmul@multiplicand
  8736  01B0  3000               	movlw	0
  8737  01B1  00A3               	movwf	___wmul@multiplicand+1
  8738  01B2  318A  2299  3180   	fcall	___wmul
  8739  01B5  0020               	movlb	0	; select bank0
  8740  01B6  0821               	movf	?___wmul+1,w
  8741  01B7  00A9               	movwf	___awdiv@dividend+1
  8742  01B8  0820               	movf	?___wmul,w
  8743  01B9  00A8               	movwf	___awdiv@dividend
  8744  01BA  318E  26F0  3180   	fcall	___awdiv
  8745  01BD  0020               	movlb	0	; select bank0
  8746  01BE  0827               	movf	?___awdiv+1,w
  8747  01BF  00B8               	movwf	processGestureData@lr_ratio_last+1
  8748  01C0  0826               	movf	?___awdiv,w
  8749  01C1  00B7               	movwf	processGestureData@lr_ratio_last
  8750                           
  8751                           ;APDS9960.c: 729:     ud_delta = ud_ratio_last - ud_ratio_first;
  8752  01C2  0831               	movf	processGestureData@ud_ratio_first,w
  8753  01C3  0235               	subwf	processGestureData@ud_ratio_last,w
  8754  01C4  00C9               	movwf	processGestureData@ud_delta
  8755  01C5  0832               	movf	processGestureData@ud_ratio_first+1,w
  8756  01C6  3B36               	subwfb	processGestureData@ud_ratio_last+1,w
  8757  01C7  00CA               	movwf	processGestureData@ud_delta+1
  8758                           
  8759                           ;APDS9960.c: 730:     lr_delta = lr_ratio_last - lr_ratio_first;
  8760  01C8  0833               	movf	processGestureData@lr_ratio_first,w
  8761  01C9  0237               	subwf	processGestureData@lr_ratio_last,w
  8762  01CA  00CB               	movwf	processGestureData@lr_delta
  8763  01CB  0834               	movf	processGestureData@lr_ratio_first+1,w
  8764  01CC  3B38               	subwfb	processGestureData@lr_ratio_last+1,w
  8765  01CD  00CC               	movwf	processGestureData@lr_delta+1
  8766                           
  8767                           ;APDS9960.c: 733:     gesture_ud_delta_ += ud_delta;
  8768  01CE  0849               	movf	processGestureData@ud_delta,w
  8769  01CF  07E8               	addwf	_gesture_ud_delta_,f
  8770  01D0  084A               	movf	processGestureData@ud_delta+1,w
  8771  01D1  3DE9               	addwfc	_gesture_ud_delta_+1,f
  8772                           
  8773                           ;APDS9960.c: 734:     gesture_lr_delta_ += lr_delta;
  8774  01D2  084B               	movf	processGestureData@lr_delta,w
  8775  01D3  07E6               	addwf	_gesture_lr_delta_,f
  8776  01D4  084C               	movf	processGestureData@lr_delta+1,w
  8777  01D5  3DE7               	addwfc	_gesture_lr_delta_+1,f
  8778                           
  8779                           ;APDS9960.c: 737:     if( gesture_ud_delta_ >= 50 ) {
  8780  01D6  0869               	movf	_gesture_ud_delta_+1,w
  8781  01D7  3A80               	xorlw	128
  8782  01D8  00AF               	movwf	??_processGestureData
  8783  01D9  3080               	movlw	128
  8784  01DA  022F               	subwf	??_processGestureData,w
  8785  01DB  1D03               	skipz
  8786  01DC  29DF               	goto	u4895
  8787  01DD  3032               	movlw	50
  8788  01DE  0268               	subwf	_gesture_ud_delta_,w
  8789  01DF                     u4895:	
  8790  01DF  1C03               	skipc
  8791  01E0  29E6               	goto	l6031
  8792                           
  8793                           ;APDS9960.c: 738:         gesture_ud_count_ = 1;
  8794  01E1  3001               	movlw	1
  8795  01E2  0020               	movlb	0	; select bank0
  8796  01E3  00E4               	movwf	_gesture_ud_count_
  8797  01E4  3000               	movlw	0
  8798  01E5  29F6               	goto	L2
  8799  01E6                     l6031:	
  8800                           ;APDS9960.c: 739:     } else if( gesture_ud_delta_ <= -50 ) {
  8801                           
  8802  01E6  0020               	movlb	0	; select bank0
  8803  01E7  0869               	movf	_gesture_ud_delta_+1,w
  8804  01E8  3A80               	xorlw	128
  8805  01E9  00AF               	movwf	??_processGestureData
  8806  01EA  307F               	movlw	127
  8807  01EB  022F               	subwf	??_processGestureData,w
  8808  01EC  1D03               	skipz
  8809  01ED  29F0               	goto	u4905
  8810  01EE  30CF               	movlw	207
  8811  01EF  0268               	subwf	_gesture_ud_delta_,w
  8812  01F0                     u4905:	
  8813  01F0  1803               	skipnc
  8814  01F1  29F8               	goto	l6035
  8815                           
  8816                           ;APDS9960.c: 740:         gesture_ud_count_ = -1;
  8817  01F2  30FF               	movlw	255
  8818  01F3  0020               	movlb	0	; select bank0
  8819  01F4  00E4               	movwf	_gesture_ud_count_
  8820  01F5  30FF               	movlw	255
  8821  01F6                     L2:	
  8822  01F6  00E5               	movwf	_gesture_ud_count_+1
  8823                           
  8824                           ;APDS9960.c: 741:     } else {
  8825  01F7  29FB               	goto	l6037
  8826  01F8                     l6035:	
  8827                           
  8828                           ;APDS9960.c: 742:         gesture_ud_count_ = 0;
  8829  01F8  0020               	movlb	0	; select bank0
  8830  01F9  01E4               	clrf	_gesture_ud_count_
  8831  01FA  01E5               	clrf	_gesture_ud_count_+1
  8832  01FB                     l6037:	
  8833                           
  8834                           ;APDS9960.c: 746:     if( gesture_lr_delta_ >= 50 ) {
  8835  01FB  0867               	movf	_gesture_lr_delta_+1,w
  8836  01FC  3A80               	xorlw	128
  8837  01FD  00AF               	movwf	??_processGestureData
  8838  01FE  3080               	movlw	128
  8839  01FF  022F               	subwf	??_processGestureData,w
  8840  0200  1D03               	skipz
  8841  0201  2A04               	goto	u4915
  8842  0202  3032               	movlw	50
  8843  0203  0266               	subwf	_gesture_lr_delta_,w
  8844  0204                     u4915:	
  8845  0204  1C03               	skipc
  8846  0205  2A0B               	goto	l6041
  8847                           
  8848                           ;APDS9960.c: 747:         gesture_lr_count_ = 1;
  8849  0206  3001               	movlw	1
  8850  0207  0020               	movlb	0	; select bank0
  8851  0208  00E2               	movwf	_gesture_lr_count_
  8852  0209  3000               	movlw	0
  8853  020A  2A1B               	goto	L3
  8854  020B                     l6041:	
  8855                           ;APDS9960.c: 748:     } else if( gesture_lr_delta_ <= -50 ) {
  8856                           
  8857  020B  0020               	movlb	0	; select bank0
  8858  020C  0867               	movf	_gesture_lr_delta_+1,w
  8859  020D  3A80               	xorlw	128
  8860  020E  00AF               	movwf	??_processGestureData
  8861  020F  307F               	movlw	127
  8862  0210  022F               	subwf	??_processGestureData,w
  8863  0211  1D03               	skipz
  8864  0212  2A15               	goto	u4925
  8865  0213  30CF               	movlw	207
  8866  0214  0266               	subwf	_gesture_lr_delta_,w
  8867  0215                     u4925:	
  8868  0215  1803               	skipnc
  8869  0216  2A1D               	goto	l6045
  8870                           
  8871                           ;APDS9960.c: 749:         gesture_lr_count_ = -1;
  8872  0217  30FF               	movlw	255
  8873  0218  0020               	movlb	0	; select bank0
  8874  0219  00E2               	movwf	_gesture_lr_count_
  8875  021A  30FF               	movlw	255
  8876  021B                     L3:	
  8877  021B  00E3               	movwf	_gesture_lr_count_+1
  8878                           
  8879                           ;APDS9960.c: 750:     } else {
  8880  021C  2A20               	goto	l6047
  8881  021D                     l6045:	
  8882                           
  8883                           ;APDS9960.c: 751:         gesture_lr_count_ = 0;
  8884  021D  0020               	movlb	0	; select bank0
  8885  021E  01E2               	clrf	_gesture_lr_count_
  8886  021F  01E3               	clrf	_gesture_lr_count_+1
  8887  0220                     l6047:	
  8888                           
  8889                           ;APDS9960.c: 755:     if( (gesture_ud_count_ == 0) && (gesture_lr_count_ == 0) ) {
  8890  0220  0864               	movf	_gesture_ud_count_,w
  8891  0221  0465               	iorwf	_gesture_ud_count_+1,w
  8892  0222  1D03               	btfss	3,2
  8893  0223  2AC7               	goto	l6091
  8894  0224  0862               	movf	_gesture_lr_count_,w
  8895  0225  0463               	iorwf	_gesture_lr_count_+1,w
  8896  0226  1D03               	btfss	3,2
  8897  0227  2AC7               	goto	l6091
  8898                           
  8899                           ;APDS9960.c: 756:         if( (((ud_delta) > 0 ? (ud_delta) : -(ud_delta)) < 20) && (((l
      +                          r_delta) > 0 ? (lr_delta) : -(lr_delta)) < 20) ) {
  8900  0228  084A               	movf	processGestureData@ud_delta+1,w
  8901  0229  3A80               	xorlw	128
  8902  022A  00AF               	movwf	??_processGestureData
  8903  022B  3080               	movlw	128
  8904  022C  022F               	subwf	??_processGestureData,w
  8905  022D  1D03               	skipz
  8906  022E  2A31               	goto	u4955
  8907  022F  3001               	movlw	1
  8908  0230  0249               	subwf	processGestureData@ud_delta,w
  8909  0231                     u4955:	
  8910  0231  1803               	skipnc
  8911  0232  2A40               	goto	l6055
  8912  0233  0020               	movlb	0	; select bank0
  8913  0234  0949               	comf	processGestureData@ud_delta,w
  8914  0235  00AF               	movwf	??_processGestureData
  8915  0236  094A               	comf	processGestureData@ud_delta+1,w
  8916  0237  00B0               	movwf	??_processGestureData+1
  8917  0238  0AAF               	incf	??_processGestureData,f
  8918  0239  1903               	skipnz
  8919  023A  0AB0               	incf	??_processGestureData+1,f
  8920  023B  082F               	movf	??_processGestureData,w
  8921  023C  00B9               	movwf	_processGestureData$1535
  8922  023D  0830               	movf	??_processGestureData+1,w
  8923  023E  00BA               	movwf	_processGestureData$1535+1
  8924  023F  2A45               	goto	l1083
  8925  0240                     l6055:	
  8926  0240  0020               	movlb	0	; select bank0
  8927  0241  084A               	movf	processGestureData@ud_delta+1,w
  8928  0242  00BA               	movwf	_processGestureData$1535+1
  8929  0243  0849               	movf	processGestureData@ud_delta,w
  8930  0244  00B9               	movwf	_processGestureData$1535
  8931  0245                     l1083:	
  8932  0245  083A               	movf	_processGestureData$1535+1,w
  8933  0246  3A80               	xorlw	128
  8934  0247  00AF               	movwf	??_processGestureData
  8935  0248  3080               	movlw	128
  8936  0249  022F               	subwf	??_processGestureData,w
  8937  024A  1D03               	skipz
  8938  024B  2A4E               	goto	u4965
  8939  024C  3014               	movlw	20
  8940  024D  0239               	subwf	_processGestureData$1535,w
  8941  024E                     u4965:	
  8942  024E  1803               	skipnc
  8943  024F  2879               	goto	l5963
  8944  0250  0020               	movlb	0	; select bank0
  8945  0251  084C               	movf	processGestureData@lr_delta+1,w
  8946  0252  3A80               	xorlw	128
  8947  0253  00AF               	movwf	??_processGestureData
  8948  0254  3080               	movlw	128
  8949  0255  022F               	subwf	??_processGestureData,w
  8950  0256  1D03               	skipz
  8951  0257  2A5A               	goto	u4975
  8952  0258  3001               	movlw	1
  8953  0259  024B               	subwf	processGestureData@lr_delta,w
  8954  025A                     u4975:	
  8955  025A  1803               	skipnc
  8956  025B  2A69               	goto	l6061
  8957  025C  0020               	movlb	0	; select bank0
  8958  025D  094B               	comf	processGestureData@lr_delta,w
  8959  025E  00AF               	movwf	??_processGestureData
  8960  025F  094C               	comf	processGestureData@lr_delta+1,w
  8961  0260  00B0               	movwf	??_processGestureData+1
  8962  0261  0AAF               	incf	??_processGestureData,f
  8963  0262  1903               	skipnz
  8964  0263  0AB0               	incf	??_processGestureData+1,f
  8965  0264  082F               	movf	??_processGestureData,w
  8966  0265  00BB               	movwf	_processGestureData$1536
  8967  0266  0830               	movf	??_processGestureData+1,w
  8968  0267  00BC               	movwf	_processGestureData$1536+1
  8969  0268  2A6E               	goto	l1087
  8970  0269                     l6061:	
  8971  0269  0020               	movlb	0	; select bank0
  8972  026A  084C               	movf	processGestureData@lr_delta+1,w
  8973  026B  00BC               	movwf	_processGestureData$1536+1
  8974  026C  084B               	movf	processGestureData@lr_delta,w
  8975  026D  00BB               	movwf	_processGestureData$1536
  8976  026E                     l1087:	
  8977  026E  083C               	movf	_processGestureData$1536+1,w
  8978  026F  3A80               	xorlw	128
  8979  0270  00AF               	movwf	??_processGestureData
  8980  0271  3080               	movlw	128
  8981  0272  022F               	subwf	??_processGestureData,w
  8982  0273  1D03               	skipz
  8983  0274  2A77               	goto	u4985
  8984  0275  3014               	movlw	20
  8985  0276  023B               	subwf	_processGestureData$1536,w
  8986  0277                     u4985:	
  8987  0277  1803               	skipnc
  8988  0278  2879               	goto	l5963
  8989                           
  8990                           ;APDS9960.c: 757: ;APDS9960.c: 759:             if( (ud_delta == 0) && (lr_delta == 0) )
      +                           {
  8991  0279  0020               	movlb	0	; select bank0
  8992  027A  0849               	movf	processGestureData@ud_delta,w
  8993  027B  044A               	iorwf	processGestureData@ud_delta+1,w
  8994  027C  1D03               	btfss	3,2
  8995  027D  2A87               	goto	l6069
  8996  027E  084B               	movf	processGestureData@lr_delta,w
  8997  027F  044C               	iorwf	processGestureData@lr_delta+1,w
  8998  0280  1D03               	btfss	3,2
  8999  0281  2A87               	goto	l6069
  9000                           
  9001                           ;APDS9960.c: 760:                 gesture_near_count_++;
  9002  0282  3001               	movlw	1
  9003  0283  07E0               	addwf	_gesture_near_count_,f
  9004  0284  3000               	movlw	0
  9005  0285  3DE1               	addwfc	_gesture_near_count_+1,f
  9006                           
  9007                           ;APDS9960.c: 761:             } else if( (ud_delta != 0) || (lr_delta != 0) ) {
  9008  0286  2A94               	goto	l1089
  9009  0287                     l6069:	
  9010  0287  0849               	movf	processGestureData@ud_delta,w
  9011  0288  044A               	iorwf	processGestureData@ud_delta+1,w
  9012  0289  1D03               	btfss	3,2
  9013  028A  2A8F               	goto	l6073
  9014  028B  084B               	movf	processGestureData@lr_delta,w
  9015  028C  044C               	iorwf	processGestureData@lr_delta+1,w
  9016  028D  1903               	btfsc	3,2
  9017  028E  2A94               	goto	l1089
  9018  028F                     l6073:	
  9019                           
  9020                           ;APDS9960.c: 762:                 gesture_far_count_++;
  9021  028F  3001               	movlw	1
  9022  0290  0021               	movlb	1	; select bank1
  9023  0291  07E2               	addwf	_gesture_far_count_^(0+128),f
  9024  0292  3000               	movlw	0
  9025  0293  3DE3               	addwfc	(_gesture_far_count_+1)^(0+128),f
  9026  0294                     l1089:	
  9027                           
  9028                           ;APDS9960.c: 765:             if( (gesture_near_count_ >= 10) && (gesture_far_count_ >= 
      +                          2) ) {
  9029  0294  0020               	movlb	0	; select bank0
  9030  0295  0861               	movf	_gesture_near_count_+1,w
  9031  0296  3A80               	xorlw	128
  9032  0297  00AF               	movwf	??_processGestureData
  9033  0298  3080               	movlw	128
  9034  0299  022F               	subwf	??_processGestureData,w
  9035  029A  1D03               	skipz
  9036  029B  2A9E               	goto	u5035
  9037  029C  300A               	movlw	10
  9038  029D  0260               	subwf	_gesture_near_count_,w
  9039  029E                     u5035:	
  9040  029E  1C03               	skipc
  9041  029F  2879               	goto	l5963
  9042  02A0  0021               	movlb	1	; select bank1
  9043  02A1  0863               	movf	(_gesture_far_count_+1)^(0+128),w
  9044  02A2  3A80               	xorlw	128
  9045  02A3  0020               	movlb	0	; select bank0
  9046  02A4  00AF               	movwf	??_processGestureData
  9047  02A5  3080               	movlw	128
  9048  02A6  022F               	subwf	??_processGestureData,w
  9049  02A7  1D03               	skipz
  9050  02A8  2AAC               	goto	u5045
  9051  02A9  3002               	movlw	2
  9052  02AA  0021               	movlb	1	; select bank1
  9053  02AB  0262               	subwf	_gesture_far_count_^(0+128),w
  9054  02AC                     u5045:	
  9055  02AC  1C03               	skipc
  9056  02AD  2879               	goto	l5963
  9057                           
  9058                           ;APDS9960.c: 766:                 if( (ud_delta == 0) && (lr_delta == 0) ) {
  9059  02AE  0020               	movlb	0	; select bank0
  9060  02AF  0849               	movf	processGestureData@ud_delta,w
  9061  02B0  044A               	iorwf	processGestureData@ud_delta+1,w
  9062  02B1  1D03               	btfss	3,2
  9063  02B2  2AB9               	goto	l6083
  9064  02B3  084B               	movf	processGestureData@lr_delta,w
  9065  02B4  044C               	iorwf	processGestureData@lr_delta+1,w
  9066  02B5  1D03               	btfss	3,2
  9067  02B6  2AB9               	goto	l6083
  9068                           
  9069                           ;APDS9960.c: 767:                     gesture_state_ = NEAR_STATE;
  9070  02B7  3001               	movlw	1
  9071  02B8  2AC2               	goto	L4
  9072  02B9                     l6083:	
  9073                           ;APDS9960.c: 768:                 } else if( (ud_delta != 0) && (lr_delta != 0) ) {
  9074                           
  9075  02B9  0849               	movf	processGestureData@ud_delta,w
  9076  02BA  044A               	iorwf	processGestureData@ud_delta+1,w
  9077  02BB  1903               	btfsc	3,2
  9078  02BC  2AC5               	goto	l1095
  9079  02BD  084B               	movf	processGestureData@lr_delta,w
  9080  02BE  044C               	iorwf	processGestureData@lr_delta+1,w
  9081  02BF  1903               	btfsc	3,2
  9082  02C0  2AC5               	goto	l1095
  9083                           
  9084                           ;APDS9960.c: 769:                     gesture_state_ = FAR_STATE;
  9085  02C1  3002               	movlw	2
  9086  02C2                     L4:	
  9087  02C2  00DE               	movwf	_gesture_state_
  9088  02C3  3000               	movlw	0
  9089  02C4  00DF               	movwf	_gesture_state_+1
  9090  02C5                     l1095:	
  9091                           
  9092                           ;APDS9960.c: 771:                 return 1;
  9093  02C5  3001               	movlw	1
  9094  02C6  0008               	return
  9095  02C7                     l6091:	
  9096                           
  9097                           ;APDS9960.c: 775:         if( (((ud_delta) > 0 ? (ud_delta) : -(ud_delta)) < 20) && (((l
      +                          r_delta) > 0 ? (lr_delta) : -(lr_delta)) < 20) ) {
  9098  02C7  084A               	movf	processGestureData@ud_delta+1,w
  9099  02C8  3A80               	xorlw	128
  9100  02C9  00AF               	movwf	??_processGestureData
  9101  02CA  3080               	movlw	128
  9102  02CB  022F               	subwf	??_processGestureData,w
  9103  02CC  1D03               	skipz
  9104  02CD  2AD0               	goto	u5095
  9105  02CE  3001               	movlw	1
  9106  02CF  0249               	subwf	processGestureData@ud_delta,w
  9107  02D0                     u5095:	
  9108  02D0  1803               	skipnc
  9109  02D1  2ADF               	goto	l6095
  9110  02D2  0020               	movlb	0	; select bank0
  9111  02D3  0949               	comf	processGestureData@ud_delta,w
  9112  02D4  00AF               	movwf	??_processGestureData
  9113  02D5  094A               	comf	processGestureData@ud_delta+1,w
  9114  02D6  00B0               	movwf	??_processGestureData+1
  9115  02D7  0AAF               	incf	??_processGestureData,f
  9116  02D8  1903               	skipnz
  9117  02D9  0AB0               	incf	??_processGestureData+1,f
  9118  02DA  082F               	movf	??_processGestureData,w
  9119  02DB  00BD               	movwf	_processGestureData$1537
  9120  02DC  0830               	movf	??_processGestureData+1,w
  9121  02DD  00BE               	movwf	_processGestureData$1537+1
  9122  02DE  2AE4               	goto	l1102
  9123  02DF                     l6095:	
  9124  02DF  0020               	movlb	0	; select bank0
  9125  02E0  084A               	movf	processGestureData@ud_delta+1,w
  9126  02E1  00BE               	movwf	_processGestureData$1537+1
  9127  02E2  0849               	movf	processGestureData@ud_delta,w
  9128  02E3  00BD               	movwf	_processGestureData$1537
  9129  02E4                     l1102:	
  9130  02E4  083E               	movf	_processGestureData$1537+1,w
  9131  02E5  3A80               	xorlw	128
  9132  02E6  00AF               	movwf	??_processGestureData
  9133  02E7  3080               	movlw	128
  9134  02E8  022F               	subwf	??_processGestureData,w
  9135  02E9  1D03               	skipz
  9136  02EA  2AED               	goto	u5105
  9137  02EB  3014               	movlw	20
  9138  02EC  023D               	subwf	_processGestureData$1537,w
  9139  02ED                     u5105:	
  9140  02ED  1803               	skipnc
  9141  02EE  2879               	goto	l5963
  9142  02EF  0020               	movlb	0	; select bank0
  9143  02F0  084C               	movf	processGestureData@lr_delta+1,w
  9144  02F1  3A80               	xorlw	128
  9145  02F2  00AF               	movwf	??_processGestureData
  9146  02F3  3080               	movlw	128
  9147  02F4  022F               	subwf	??_processGestureData,w
  9148  02F5  1D03               	skipz
  9149  02F6  2AF9               	goto	u5115
  9150  02F7  3001               	movlw	1
  9151  02F8  024B               	subwf	processGestureData@lr_delta,w
  9152  02F9                     u5115:	
  9153  02F9  1803               	skipnc
  9154  02FA  2B08               	goto	l6101
  9155  02FB  0020               	movlb	0	; select bank0
  9156  02FC  094B               	comf	processGestureData@lr_delta,w
  9157  02FD  00AF               	movwf	??_processGestureData
  9158  02FE  094C               	comf	processGestureData@lr_delta+1,w
  9159  02FF  00B0               	movwf	??_processGestureData+1
  9160  0300  0AAF               	incf	??_processGestureData,f
  9161  0301  1903               	skipnz
  9162  0302  0AB0               	incf	??_processGestureData+1,f
  9163  0303  082F               	movf	??_processGestureData,w
  9164  0304  00BF               	movwf	_processGestureData$1538
  9165  0305  0830               	movf	??_processGestureData+1,w
  9166  0306  00C0               	movwf	_processGestureData$1538+1
  9167  0307  2B0D               	goto	l1106
  9168  0308                     l6101:	
  9169  0308  0020               	movlb	0	; select bank0
  9170  0309  084C               	movf	processGestureData@lr_delta+1,w
  9171  030A  00C0               	movwf	_processGestureData$1538+1
  9172  030B  084B               	movf	processGestureData@lr_delta,w
  9173  030C  00BF               	movwf	_processGestureData$1538
  9174  030D                     l1106:	
  9175  030D  0840               	movf	_processGestureData$1538+1,w
  9176  030E  3A80               	xorlw	128
  9177  030F  00AF               	movwf	??_processGestureData
  9178  0310  3080               	movlw	128
  9179  0311  022F               	subwf	??_processGestureData,w
  9180  0312  1D03               	skipz
  9181  0313  2B16               	goto	u5125
  9182  0314  3014               	movlw	20
  9183  0315  023F               	subwf	_processGestureData$1538,w
  9184  0316                     u5125:	
  9185  0316  1803               	skipnc
  9186  0317  2879               	goto	l5963
  9187                           
  9188                           ;APDS9960.c: 776: ;APDS9960.c: 778:             if( (ud_delta == 0) && (lr_delta == 0) )
      +                           {
  9189  0318  0020               	movlb	0	; select bank0
  9190  0319  0849               	movf	processGestureData@ud_delta,w
  9191  031A  044A               	iorwf	processGestureData@ud_delta+1,w
  9192  031B  1D03               	btfss	3,2
  9193  031C  2B25               	goto	l1107
  9194  031D  084B               	movf	processGestureData@lr_delta,w
  9195  031E  044C               	iorwf	processGestureData@lr_delta+1,w
  9196  031F  1D03               	btfss	3,2
  9197  0320  2B25               	goto	l1107
  9198                           
  9199                           ;APDS9960.c: 779:                 gesture_near_count_++;
  9200  0321  3001               	movlw	1
  9201  0322  07E0               	addwf	_gesture_near_count_,f
  9202  0323  3000               	movlw	0
  9203  0324  3DE1               	addwfc	_gesture_near_count_+1,f
  9204  0325                     l1107:	
  9205                           ;APDS9960.c: 780:             }
  9206                           
  9207                           
  9208                           ;APDS9960.c: 782:             if( gesture_near_count_ >= 10 ) {
  9209  0325  0861               	movf	_gesture_near_count_+1,w
  9210  0326  3A80               	xorlw	128
  9211  0327  00AF               	movwf	??_processGestureData
  9212  0328  3080               	movlw	128
  9213  0329  022F               	subwf	??_processGestureData,w
  9214  032A  1D03               	skipz
  9215  032B  2B2E               	goto	u5155
  9216  032C  300A               	movlw	10
  9217  032D  0260               	subwf	_gesture_near_count_,w
  9218  032E                     u5155:	
  9219  032E  1C03               	skipc
  9220  032F  2879               	goto	l5963
  9221                           
  9222                           ;APDS9960.c: 783:                 gesture_ud_count_ = 0;
  9223  0330  0020               	movlb	0	; select bank0
  9224  0331  01E4               	clrf	_gesture_ud_count_
  9225  0332  01E5               	clrf	_gesture_ud_count_+1
  9226                           
  9227                           ;APDS9960.c: 784:                 gesture_lr_count_ = 0;
  9228  0333  01E2               	clrf	_gesture_lr_count_
  9229  0334  01E3               	clrf	_gesture_lr_count_+1
  9230                           
  9231                           ;APDS9960.c: 785:                 gesture_ud_delta_ = 0;
  9232  0335  01E8               	clrf	_gesture_ud_delta_
  9233  0336  01E9               	clrf	_gesture_ud_delta_+1
  9234                           
  9235                           ;APDS9960.c: 786:                 gesture_lr_delta_ = 0;
  9236  0337  01E6               	clrf	_gesture_lr_delta_
  9237  0338  01E7               	clrf	_gesture_lr_delta_+1
  9238  0339  2879               	goto	l5963
  9239  033A                     __end_of_processGestureData:	
  9240                           
  9241                           	psect	text19
  9242  0A99                     __ptext19:	
  9243 ;; *************** function ___wmul *****************
  9244 ;; Defined at:
  9245 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
  9246 ;; Parameters:    Size  Location     Type
  9247 ;;  multiplier      2    0[BANK0 ] unsigned int 
  9248 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  9249 ;; Auto vars:     Size  Location     Type
  9250 ;;  product         2    4[BANK0 ] unsigned int 
  9251 ;; Return value:  Size  Location     Type
  9252 ;;                  2    0[BANK0 ] unsigned int 
  9253 ;; Registers used:
  9254 ;;		wreg, status,2, status,0
  9255 ;; Tracked objects:
  9256 ;;		On entry : 0/0
  9257 ;;		On exit  : 0/0
  9258 ;;		Unchanged: 0/0
  9259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9260 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9261 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9262 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9263 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9264 ;;Total ram usage:        6 bytes
  9265 ;; Hardware stack levels used:    1
  9266 ;; Hardware stack levels required when called:    5
  9267 ;; This function calls:
  9268 ;;		Nothing
  9269 ;; This function is called by:
  9270 ;;		_processGestureData
  9271 ;; This function uses a non-reentrant model
  9272 ;;
  9273                           
  9274                           
  9275                           ;psect for function ___wmul
  9276  0A99                     ___wmul:	
  9277                           
  9278                           ;incstack = 0
  9279                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  9280  0A99  0020               	movlb	0	; select bank0
  9281  0A9A  01A4               	clrf	___wmul@product
  9282  0A9B  01A5               	clrf	___wmul@product+1
  9283  0A9C                     l5805:	
  9284  0A9C  1C20               	btfss	___wmul@multiplier,0
  9285  0A9D  2AA2               	goto	l1395
  9286  0A9E  0822               	movf	___wmul@multiplicand,w
  9287  0A9F  07A4               	addwf	___wmul@product,f
  9288  0AA0  0823               	movf	___wmul@multiplicand+1,w
  9289  0AA1  3DA5               	addwfc	___wmul@product+1,f
  9290  0AA2                     l1395:	
  9291  0AA2  3001               	movlw	1
  9292  0AA3                     u4485:	
  9293  0AA3  35A2               	lslf	___wmul@multiplicand,f
  9294  0AA4  0DA3               	rlf	___wmul@multiplicand+1,f
  9295  0AA5  0B89               	decfsz	9,f
  9296  0AA6  2AA3               	goto	u4485
  9297  0AA7  3001               	movlw	1
  9298  0AA8                     u4495:	
  9299  0AA8  36A1               	lsrf	___wmul@multiplier+1,f
  9300  0AA9  0CA0               	rrf	___wmul@multiplier,f
  9301  0AAA  0B89               	decfsz	9,f
  9302  0AAB  2AA8               	goto	u4495
  9303  0AAC  0820               	movf	___wmul@multiplier,w
  9304  0AAD  0421               	iorwf	___wmul@multiplier+1,w
  9305  0AAE  1D03               	btfss	3,2
  9306  0AAF  2A9C               	goto	l5805
  9307  0AB0  0825               	movf	___wmul@product+1,w
  9308  0AB1  00A1               	movwf	?___wmul+1
  9309  0AB2  0824               	movf	___wmul@product,w
  9310  0AB3  00A0               	movwf	?___wmul
  9311  0AB4  0008               	return
  9312  0AB5                     __end_of___wmul:	
  9313                           
  9314                           	psect	text20
  9315  0EF0                     __ptext20:	
  9316 ;; *************** function ___awdiv *****************
  9317 ;; Defined at:
  9318 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awdiv.c"
  9319 ;; Parameters:    Size  Location     Type
  9320 ;;  divisor         2    6[BANK0 ] int 
  9321 ;;  dividend        2    8[BANK0 ] int 
  9322 ;; Auto vars:     Size  Location     Type
  9323 ;;  quotient        2   13[BANK0 ] int 
  9324 ;;  sign            1   12[BANK0 ] unsigned char 
  9325 ;;  counter         1   11[BANK0 ] unsigned char 
  9326 ;; Return value:  Size  Location     Type
  9327 ;;                  2    6[BANK0 ] int 
  9328 ;; Registers used:
  9329 ;;		wreg, status,2, status,0
  9330 ;; Tracked objects:
  9331 ;;		On entry : 0/0
  9332 ;;		On exit  : 0/0
  9333 ;;		Unchanged: 0/0
  9334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9335 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9336 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9337 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9338 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9339 ;;Total ram usage:        9 bytes
  9340 ;; Hardware stack levels used:    1
  9341 ;; Hardware stack levels required when called:    5
  9342 ;; This function calls:
  9343 ;;		Nothing
  9344 ;; This function is called by:
  9345 ;;		_processGestureData
  9346 ;; This function uses a non-reentrant model
  9347 ;;
  9348                           
  9349                           
  9350                           ;psect for function ___awdiv
  9351  0EF0                     ___awdiv:	
  9352                           
  9353                           ;incstack = 0
  9354                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  9355  0EF0  0020               	movlb	0	; select bank0
  9356  0EF1  01AC               	clrf	___awdiv@sign
  9357  0EF2  1FA7               	btfss	___awdiv@divisor+1,7
  9358  0EF3  2EFB               	goto	l5825
  9359  0EF4  09A6               	comf	___awdiv@divisor,f
  9360  0EF5  09A7               	comf	___awdiv@divisor+1,f
  9361  0EF6  0AA6               	incf	___awdiv@divisor,f
  9362  0EF7  1903               	skipnz
  9363  0EF8  0AA7               	incf	___awdiv@divisor+1,f
  9364  0EF9  01AC               	clrf	___awdiv@sign
  9365  0EFA  0AAC               	incf	___awdiv@sign,f
  9366  0EFB                     l5825:	
  9367  0EFB  1FA9               	btfss	___awdiv@dividend+1,7
  9368  0EFC  2F06               	goto	l5831
  9369  0EFD  09A8               	comf	___awdiv@dividend,f
  9370  0EFE  09A9               	comf	___awdiv@dividend+1,f
  9371  0EFF  0AA8               	incf	___awdiv@dividend,f
  9372  0F00  1903               	skipnz
  9373  0F01  0AA9               	incf	___awdiv@dividend+1,f
  9374  0F02  3001               	movlw	1
  9375  0F03  00AA               	movwf	??___awdiv
  9376  0F04  082A               	movf	??___awdiv,w
  9377  0F05  06AC               	xorwf	___awdiv@sign,f
  9378  0F06                     l5831:	
  9379  0F06  01AD               	clrf	___awdiv@quotient
  9380  0F07  01AE               	clrf	___awdiv@quotient+1
  9381  0F08  0826               	movf	___awdiv@divisor,w
  9382  0F09  0427               	iorwf	___awdiv@divisor+1,w
  9383  0F0A  1903               	btfsc	3,2
  9384  0F0B  2F35               	goto	l5853
  9385  0F0C  01AB               	clrf	___awdiv@counter
  9386  0F0D  0AAB               	incf	___awdiv@counter,f
  9387  0F0E                     l5841:	
  9388  0F0E  1BA7               	btfsc	___awdiv@divisor+1,7
  9389  0F0F  2F1A               	goto	l5843
  9390  0F10  3001               	movlw	1
  9391  0F11                     u4545:	
  9392  0F11  35A6               	lslf	___awdiv@divisor,f
  9393  0F12  0DA7               	rlf	___awdiv@divisor+1,f
  9394  0F13  0B89               	decfsz	9,f
  9395  0F14  2F11               	goto	u4545
  9396  0F15  3001               	movlw	1
  9397  0F16  00AA               	movwf	??___awdiv
  9398  0F17  082A               	movf	??___awdiv,w
  9399  0F18  07AB               	addwf	___awdiv@counter,f
  9400  0F19  2F0E               	goto	l5841
  9401  0F1A                     l5843:	
  9402  0F1A  3001               	movlw	1
  9403  0F1B                     u4565:	
  9404  0F1B  35AD               	lslf	___awdiv@quotient,f
  9405  0F1C  0DAE               	rlf	___awdiv@quotient+1,f
  9406  0F1D  0B89               	decfsz	9,f
  9407  0F1E  2F1B               	goto	u4565
  9408  0F1F  0827               	movf	___awdiv@divisor+1,w
  9409  0F20  0229               	subwf	___awdiv@dividend+1,w
  9410  0F21  1D03               	skipz
  9411  0F22  2F25               	goto	u4575
  9412  0F23  0826               	movf	___awdiv@divisor,w
  9413  0F24  0228               	subwf	___awdiv@dividend,w
  9414  0F25                     u4575:	
  9415  0F25  1C03               	skipc
  9416  0F26  2F2C               	goto	l5849
  9417  0F27  0826               	movf	___awdiv@divisor,w
  9418  0F28  02A8               	subwf	___awdiv@dividend,f
  9419  0F29  0827               	movf	___awdiv@divisor+1,w
  9420  0F2A  3BA9               	subwfb	___awdiv@dividend+1,f
  9421  0F2B  142D               	bsf	___awdiv@quotient,0
  9422  0F2C                     l5849:	
  9423  0F2C  3001               	movlw	1
  9424  0F2D                     u4585:	
  9425  0F2D  36A7               	lsrf	___awdiv@divisor+1,f
  9426  0F2E  0CA6               	rrf	___awdiv@divisor,f
  9427  0F2F  0B89               	decfsz	9,f
  9428  0F30  2F2D               	goto	u4585
  9429  0F31  3001               	movlw	1
  9430  0F32  02AB               	subwf	___awdiv@counter,f
  9431  0F33  1D03               	btfss	3,2
  9432  0F34  2F1A               	goto	l5843
  9433  0F35                     l5853:	
  9434  0F35  082C               	movf	___awdiv@sign,w
  9435  0F36  1903               	btfsc	3,2
  9436  0F37  2F3D               	goto	l5857
  9437  0F38  09AD               	comf	___awdiv@quotient,f
  9438  0F39  09AE               	comf	___awdiv@quotient+1,f
  9439  0F3A  0AAD               	incf	___awdiv@quotient,f
  9440  0F3B  1903               	skipnz
  9441  0F3C  0AAE               	incf	___awdiv@quotient+1,f
  9442  0F3D                     l5857:	
  9443  0F3D  082E               	movf	___awdiv@quotient+1,w
  9444  0F3E  00A7               	movwf	?___awdiv+1
  9445  0F3F  082D               	movf	___awdiv@quotient,w
  9446  0F40  00A6               	movwf	?___awdiv
  9447  0F41  0008               	return
  9448  0F42                     __end_of___awdiv:	
  9449                           
  9450                           	psect	text21
  9451  09A6                     __ptext21:	
  9452 ;; *************** function _isGestureAvailable *****************
  9453 ;; Defined at:
  9454 ;;		line 537 in file "APDS9960.c"
  9455 ;; Parameters:    Size  Location     Type
  9456 ;;		None
  9457 ;; Auto vars:     Size  Location     Type
  9458 ;;  val             1   10[BANK0 ] unsigned char 
  9459 ;; Return value:  Size  Location     Type
  9460 ;;                  1    wreg      _Bool 
  9461 ;; Registers used:
  9462 ;;		wreg, status,2, status,0, pclath, cstack
  9463 ;; Tracked objects:
  9464 ;;		On entry : 0/0
  9465 ;;		On exit  : 0/0
  9466 ;;		Unchanged: 0/0
  9467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9468 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9469 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9470 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9471 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9472 ;;Total ram usage:        2 bytes
  9473 ;; Hardware stack levels used:    1
  9474 ;; Hardware stack levels required when called:    8
  9475 ;; This function calls:
  9476 ;;		_wireReadDataByte
  9477 ;; This function is called by:
  9478 ;;		_main
  9479 ;;		_readGesture
  9480 ;; This function uses a non-reentrant model
  9481 ;;
  9482                           
  9483                           
  9484                           ;psect for function _isGestureAvailable
  9485  09A6                     _isGestureAvailable:	
  9486                           
  9487                           ;APDS9960.c: 539:     uint8_t val;;APDS9960.c: 542:     val=wireReadDataByte(0xAF);
  9488                           
  9489                           ;incstack = 0
  9490                           ; Regs used in _isGestureAvailable: [wreg+status,2+status,0+pclath+cstack]
  9491  09A6  30AF               	movlw	175
  9492  09A7  318A  22F1  3189   	fcall	_wireReadDataByte
  9493  09AA  0020               	movlb	0	; select bank0
  9494  09AB  00A9               	movwf	??_isGestureAvailable
  9495  09AC  0829               	movf	??_isGestureAvailable,w
  9496  09AD  00AA               	movwf	isGestureAvailable@val
  9497                           
  9498                           ;APDS9960.c: 545:     val &= 0b00000001;
  9499  09AE  3001               	movlw	1
  9500  09AF  00A9               	movwf	??_isGestureAvailable
  9501  09B0  0829               	movf	??_isGestureAvailable,w
  9502  09B1  05AA               	andwf	isGestureAvailable@val,f
  9503                           
  9504                           ;APDS9960.c: 548:     if( val == 1) {
  9505  09B2  032A               	decf	isGestureAvailable@val,w
  9506  09B3  1D03               	btfss	3,2
  9507  09B4  29B7               	goto	l5873
  9508                           
  9509                           ;APDS9960.c: 549:         return 1;
  9510  09B5  3001               	movlw	1
  9511  09B6  0008               	return
  9512  09B7                     l5873:	
  9513                           
  9514                           ;APDS9960.c: 551:         return 0;
  9515  09B7  3000               	movlw	0
  9516  09B8  0008               	return
  9517  09B9                     __end_of_isGestureAvailable:	
  9518                           
  9519                           	psect	text22
  9520  033A                     __ptext22:	
  9521 ;; *************** function _decodeGesture *****************
  9522 ;; Defined at:
  9523 ;;		line 795 in file "APDS9960.c"
  9524 ;; Parameters:    Size  Location     Type
  9525 ;;		None
  9526 ;; Auto vars:     Size  Location     Type
  9527 ;;		None
  9528 ;; Return value:  Size  Location     Type
  9529 ;;                  1    wreg      _Bool 
  9530 ;; Registers used:
  9531 ;;		wreg, status,2, status,0
  9532 ;; Tracked objects:
  9533 ;;		On entry : 0/0
  9534 ;;		On exit  : 0/0
  9535 ;;		Unchanged: 0/0
  9536 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9537 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9538 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9539 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9540 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9541 ;;Total ram usage:       18 bytes
  9542 ;; Hardware stack levels used:    1
  9543 ;; Hardware stack levels required when called:    5
  9544 ;; This function calls:
  9545 ;;		Nothing
  9546 ;; This function is called by:
  9547 ;;		_readGesture
  9548 ;; This function uses a non-reentrant model
  9549 ;;
  9550                           
  9551                           
  9552                           ;psect for function _decodeGesture
  9553  033A                     _decodeGesture:	
  9554                           
  9555                           ;APDS9960.c: 798:     if( gesture_state_ == NEAR_STATE ) {
  9556                           
  9557                           ;incstack = 0
  9558                           ; Regs used in _decodeGesture: [wreg+status,2+status,0]
  9559  033A  0020               	movlb	0	; select bank0
  9560  033B  035E               	decf	_gesture_state_,w
  9561  033C  045F               	iorwf	_gesture_state_+1,w
  9562  033D  1D03               	btfss	3,2
  9563  033E  2B46               	goto	l6123
  9564                           
  9565                           ;APDS9960.c: 799:         gesture_motion_ = DIR_NEAR;
  9566  033F  3005               	movlw	5
  9567  0340  0022               	movlb	2	; select bank2
  9568  0341  00E8               	movwf	_gesture_motion_^(0+256)
  9569  0342  3000               	movlw	0
  9570  0343  00E9               	movwf	(_gesture_motion_^(0+256)+1)
  9571                           
  9572                           ;APDS9960.c: 800:         return 1;
  9573  0344  3001               	movlw	1
  9574  0345  0008               	return
  9575  0346                     l6123:	
  9576  0346  3002               	movlw	2
  9577  0347  065E               	xorwf	_gesture_state_,w
  9578  0348  045F               	iorwf	_gesture_state_+1,w
  9579  0349  1D03               	btfss	3,2
  9580  034A  2B52               	goto	l6129
  9581                           
  9582                           ;APDS9960.c: 802:         gesture_motion_ = DIR_FAR;
  9583  034B  3006               	movlw	6
  9584  034C  0022               	movlb	2	; select bank2
  9585  034D  00E8               	movwf	_gesture_motion_^(0+256)
  9586  034E  3000               	movlw	0
  9587  034F  00E9               	movwf	(_gesture_motion_^(0+256)+1)
  9588                           
  9589                           ;APDS9960.c: 803:         return 1;
  9590  0350  3001               	movlw	1
  9591  0351  0008               	return
  9592  0352                     l6129:	
  9593                           
  9594                           ;APDS9960.c: 807:     if( (gesture_ud_count_ == -1) && (gesture_lr_count_ == 0) ) {
  9595  0352  0A64               	incf	_gesture_ud_count_,w
  9596  0353  1D03               	skipz
  9597  0354  2B5E               	goto	l6135
  9598  0355  0A65               	incf	_gesture_ud_count_+1,w
  9599  0356  1D03               	btfss	3,2
  9600  0357  2B5E               	goto	l6135
  9601  0358  0862               	movf	_gesture_lr_count_,w
  9602  0359  0463               	iorwf	_gesture_lr_count_+1,w
  9603  035A  1D03               	btfss	3,2
  9604  035B  2B5E               	goto	l6135
  9605  035C                     l6133:	
  9606                           
  9607                           ;APDS9960.c: 808:         gesture_motion_ = DIR_UP;
  9608  035C  3003               	movlw	3
  9609  035D  2B7D               	goto	L7
  9610  035E                     l6135:	
  9611                           ;APDS9960.c: 809:     } else if( (gesture_ud_count_ == 1) && (gesture_lr_count_ == 0) ) 
      +                          {
  9612                           
  9613  035E  0364               	decf	_gesture_ud_count_,w
  9614  035F  0465               	iorwf	_gesture_ud_count_+1,w
  9615  0360  1D03               	btfss	3,2
  9616  0361  2B68               	goto	l6141
  9617  0362  0862               	movf	_gesture_lr_count_,w
  9618  0363  0463               	iorwf	_gesture_lr_count_+1,w
  9619  0364  1D03               	btfss	3,2
  9620  0365  2B68               	goto	l6141
  9621  0366                     l6139:	
  9622                           
  9623                           ;APDS9960.c: 810:         gesture_motion_ = DIR_DOWN;
  9624  0366  3004               	movlw	4
  9625  0367  2B7D               	goto	L7
  9626  0368                     l6141:	
  9627                           ;APDS9960.c: 811:     } else if( (gesture_ud_count_ == 0) && (gesture_lr_count_ == 1) ) 
      +                          {
  9628                           
  9629  0368  0864               	movf	_gesture_ud_count_,w
  9630  0369  0465               	iorwf	_gesture_ud_count_+1,w
  9631  036A  1D03               	btfss	3,2
  9632  036B  2B72               	goto	l6147
  9633  036C  0362               	decf	_gesture_lr_count_,w
  9634  036D  0463               	iorwf	_gesture_lr_count_+1,w
  9635  036E  1D03               	btfss	3,2
  9636  036F  2B72               	goto	l6147
  9637  0370                     l6145:	
  9638                           
  9639                           ;APDS9960.c: 812:         gesture_motion_ = DIR_RIGHT;
  9640  0370  3002               	movlw	2
  9641  0371  2B7D               	goto	L7
  9642  0372                     l6147:	
  9643                           ;APDS9960.c: 813:     } else if( (gesture_ud_count_ == 0) && (gesture_lr_count_ == -1) )
      +                           {
  9644                           
  9645  0372  0864               	movf	_gesture_ud_count_,w
  9646  0373  0465               	iorwf	_gesture_ud_count_+1,w
  9647  0374  1D03               	btfss	3,2
  9648  0375  2B82               	goto	l6153
  9649  0376  0A62               	incf	_gesture_lr_count_,w
  9650  0377  1D03               	skipz
  9651  0378  2B82               	goto	l6153
  9652  0379  0A63               	incf	_gesture_lr_count_+1,w
  9653  037A  1D03               	btfss	3,2
  9654  037B  2B82               	goto	l6153
  9655  037C                     l6151:	
  9656                           
  9657                           ;APDS9960.c: 814:         gesture_motion_ = DIR_LEFT;
  9658  037C  3001               	movlw	1
  9659  037D                     L7:	
  9660  037D  0022               	movlb	2	; select bank2
  9661  037E  00E8               	movwf	_gesture_motion_^(0+256)
  9662  037F  3000               	movlw	0
  9663  0380  00E9               	movwf	(_gesture_motion_^(0+256)+1)
  9664                           
  9665                           ;APDS9960.c: 815:     } else if( (gesture_ud_count_ == -1) && (gesture_lr_count_ == 1) )
      +                           {
  9666  0381  2CC8               	goto	l6229
  9667  0382                     l6153:	
  9668  0382  0A64               	incf	_gesture_ud_count_,w
  9669  0383  1D03               	skipz
  9670  0384  2BD3               	goto	l6171
  9671  0385  0A65               	incf	_gesture_ud_count_+1,w
  9672  0386  1D03               	btfss	3,2
  9673  0387  2BD3               	goto	l6171
  9674  0388  0362               	decf	_gesture_lr_count_,w
  9675  0389  0463               	iorwf	_gesture_lr_count_+1,w
  9676  038A  1D03               	btfss	3,2
  9677  038B  2BD3               	goto	l6171
  9678                           
  9679                           ;APDS9960.c: 816:         if( ((gesture_ud_delta_) > 0 ? (gesture_ud_delta_) : -(gesture
      +                          _ud_delta_)) > ((gesture_lr_delta_) > 0 ? (gesture_lr_delta_) : -(gesture_lr_delta_)) ) 
      +                          {
  9680  038C  0869               	movf	_gesture_ud_delta_+1,w
  9681  038D  3A80               	xorlw	128
  9682  038E  00A0               	movwf	??_decodeGesture
  9683  038F  3080               	movlw	128
  9684  0390  0220               	subwf	??_decodeGesture,w
  9685  0391  1D03               	skipz
  9686  0392  2B95               	goto	u5285
  9687  0393  3001               	movlw	1
  9688  0394  0268               	subwf	_gesture_ud_delta_,w
  9689  0395                     u5285:	
  9690  0395  1803               	skipnc
  9691  0396  2BA4               	goto	l6161
  9692  0397  0020               	movlb	0	; select bank0
  9693  0398  0968               	comf	_gesture_ud_delta_,w
  9694  0399  00A0               	movwf	??_decodeGesture
  9695  039A  0969               	comf	_gesture_ud_delta_+1,w
  9696  039B  00A1               	movwf	??_decodeGesture+1
  9697  039C  0AA0               	incf	??_decodeGesture,f
  9698  039D  1903               	skipnz
  9699  039E  0AA1               	incf	??_decodeGesture+1,f
  9700  039F  0820               	movf	??_decodeGesture,w
  9701  03A0  00A2               	movwf	_decodeGesture$1540
  9702  03A1  0821               	movf	??_decodeGesture+1,w
  9703  03A2  00A3               	movwf	_decodeGesture$1540+1
  9704  03A3  2BA9               	goto	l1128
  9705  03A4                     l6161:	
  9706  03A4  0020               	movlb	0	; select bank0
  9707  03A5  0869               	movf	_gesture_ud_delta_+1,w
  9708  03A6  00A3               	movwf	_decodeGesture$1540+1
  9709  03A7  0868               	movf	_gesture_ud_delta_,w
  9710  03A8  00A2               	movwf	_decodeGesture$1540
  9711  03A9                     l1128:	
  9712  03A9  0867               	movf	_gesture_lr_delta_+1,w
  9713  03AA  3A80               	xorlw	128
  9714  03AB  00A0               	movwf	??_decodeGesture
  9715  03AC  3080               	movlw	128
  9716  03AD  0220               	subwf	??_decodeGesture,w
  9717  03AE  1D03               	skipz
  9718  03AF  2BB2               	goto	u5295
  9719  03B0  3001               	movlw	1
  9720  03B1  0266               	subwf	_gesture_lr_delta_,w
  9721  03B2                     u5295:	
  9722  03B2  1803               	skipnc
  9723  03B3  2BC1               	goto	l6165
  9724  03B4  0020               	movlb	0	; select bank0
  9725  03B5  0966               	comf	_gesture_lr_delta_,w
  9726  03B6  00A0               	movwf	??_decodeGesture
  9727  03B7  0967               	comf	_gesture_lr_delta_+1,w
  9728  03B8  00A1               	movwf	??_decodeGesture+1
  9729  03B9  0AA0               	incf	??_decodeGesture,f
  9730  03BA  1903               	skipnz
  9731  03BB  0AA1               	incf	??_decodeGesture+1,f
  9732  03BC  0820               	movf	??_decodeGesture,w
  9733  03BD  00A4               	movwf	_decodeGesture$1541
  9734  03BE  0821               	movf	??_decodeGesture+1,w
  9735  03BF  00A5               	movwf	_decodeGesture$1541+1
  9736  03C0  2BC6               	goto	l1132
  9737  03C1                     l6165:	
  9738  03C1  0020               	movlb	0	; select bank0
  9739  03C2  0867               	movf	_gesture_lr_delta_+1,w
  9740  03C3  00A5               	movwf	_decodeGesture$1541+1
  9741  03C4  0866               	movf	_gesture_lr_delta_,w
  9742  03C5  00A4               	movwf	_decodeGesture$1541
  9743  03C6                     l1132:	
  9744  03C6  0825               	movf	_decodeGesture$1541+1,w
  9745  03C7  3A80               	xorlw	128
  9746  03C8  00A0               	movwf	??_decodeGesture
  9747  03C9  0823               	movf	_decodeGesture$1540+1,w
  9748  03CA  3A80               	xorlw	128
  9749  03CB  0220               	subwf	??_decodeGesture,w
  9750  03CC  1D03               	skipz
  9751  03CD  2BD0               	goto	u5305
  9752  03CE  0822               	movf	_decodeGesture$1540,w
  9753  03CF  0224               	subwf	_decodeGesture$1541,w
  9754  03D0                     u5305:	
  9755  03D0  1C03               	btfss	3,0
  9756  03D1  2B5C               	goto	l6133
  9757  03D2  2B70               	goto	l6145
  9758  03D3                     l6171:	
  9759  03D3  0364               	decf	_gesture_ud_count_,w
  9760  03D4  0465               	iorwf	_gesture_ud_count_+1,w
  9761  03D5  1D03               	btfss	3,2
  9762  03D6  2C24               	goto	l6189
  9763  03D7  0A62               	incf	_gesture_lr_count_,w
  9764  03D8  1D03               	skipz
  9765  03D9  2C24               	goto	l6189
  9766  03DA  0A63               	incf	_gesture_lr_count_+1,w
  9767  03DB  1D03               	btfss	3,2
  9768  03DC  2C24               	goto	l6189
  9769                           
  9770                           ;APDS9960.c: 822:         if( ((gesture_ud_delta_) > 0 ? (gesture_ud_delta_) : -(gesture
      +                          _ud_delta_)) > ((gesture_lr_delta_) > 0 ? (gesture_lr_delta_) : -(gesture_lr_delta_)) ) 
      +                          {
  9771  03DD  0869               	movf	_gesture_ud_delta_+1,w
  9772  03DE  3A80               	xorlw	128
  9773  03DF  00A0               	movwf	??_decodeGesture
  9774  03E0  3080               	movlw	128
  9775  03E1  0220               	subwf	??_decodeGesture,w
  9776  03E2  1D03               	skipz
  9777  03E3  2BE6               	goto	u5335
  9778  03E4  3001               	movlw	1
  9779  03E5  0268               	subwf	_gesture_ud_delta_,w
  9780  03E6                     u5335:	
  9781  03E6  1803               	skipnc
  9782  03E7  2BF5               	goto	l6179
  9783  03E8  0020               	movlb	0	; select bank0
  9784  03E9  0968               	comf	_gesture_ud_delta_,w
  9785  03EA  00A0               	movwf	??_decodeGesture
  9786  03EB  0969               	comf	_gesture_ud_delta_+1,w
  9787  03EC  00A1               	movwf	??_decodeGesture+1
  9788  03ED  0AA0               	incf	??_decodeGesture,f
  9789  03EE  1903               	skipnz
  9790  03EF  0AA1               	incf	??_decodeGesture+1,f
  9791  03F0  0820               	movf	??_decodeGesture,w
  9792  03F1  00A6               	movwf	_decodeGesture$1542
  9793  03F2  0821               	movf	??_decodeGesture+1,w
  9794  03F3  00A7               	movwf	_decodeGesture$1542+1
  9795  03F4  2BFA               	goto	l1140
  9796  03F5                     l6179:	
  9797  03F5  0020               	movlb	0	; select bank0
  9798  03F6  0869               	movf	_gesture_ud_delta_+1,w
  9799  03F7  00A7               	movwf	_decodeGesture$1542+1
  9800  03F8  0868               	movf	_gesture_ud_delta_,w
  9801  03F9  00A6               	movwf	_decodeGesture$1542
  9802  03FA                     l1140:	
  9803  03FA  0867               	movf	_gesture_lr_delta_+1,w
  9804  03FB  3A80               	xorlw	128
  9805  03FC  00A0               	movwf	??_decodeGesture
  9806  03FD  3080               	movlw	128
  9807  03FE  0220               	subwf	??_decodeGesture,w
  9808  03FF  1D03               	skipz
  9809  0400  2C03               	goto	u5345
  9810  0401  3001               	movlw	1
  9811  0402  0266               	subwf	_gesture_lr_delta_,w
  9812  0403                     u5345:	
  9813  0403  1803               	skipnc
  9814  0404  2C12               	goto	l6183
  9815  0405  0020               	movlb	0	; select bank0
  9816  0406  0966               	comf	_gesture_lr_delta_,w
  9817  0407  00A0               	movwf	??_decodeGesture
  9818  0408  0967               	comf	_gesture_lr_delta_+1,w
  9819  0409  00A1               	movwf	??_decodeGesture+1
  9820  040A  0AA0               	incf	??_decodeGesture,f
  9821  040B  1903               	skipnz
  9822  040C  0AA1               	incf	??_decodeGesture+1,f
  9823  040D  0820               	movf	??_decodeGesture,w
  9824  040E  00A8               	movwf	_decodeGesture$1543
  9825  040F  0821               	movf	??_decodeGesture+1,w
  9826  0410  00A9               	movwf	_decodeGesture$1543+1
  9827  0411  2C17               	goto	l1144
  9828  0412                     l6183:	
  9829  0412  0020               	movlb	0	; select bank0
  9830  0413  0867               	movf	_gesture_lr_delta_+1,w
  9831  0414  00A9               	movwf	_decodeGesture$1543+1
  9832  0415  0866               	movf	_gesture_lr_delta_,w
  9833  0416  00A8               	movwf	_decodeGesture$1543
  9834  0417                     l1144:	
  9835  0417  0829               	movf	_decodeGesture$1543+1,w
  9836  0418  3A80               	xorlw	128
  9837  0419  00A0               	movwf	??_decodeGesture
  9838  041A  0827               	movf	_decodeGesture$1542+1,w
  9839  041B  3A80               	xorlw	128
  9840  041C  0220               	subwf	??_decodeGesture,w
  9841  041D  1D03               	skipz
  9842  041E  2C21               	goto	u5355
  9843  041F  0826               	movf	_decodeGesture$1542,w
  9844  0420  0228               	subwf	_decodeGesture$1543,w
  9845  0421                     u5355:	
  9846  0421  1C03               	btfss	3,0
  9847  0422  2B66               	goto	l6139
  9848  0423  2B7C               	goto	l6151
  9849  0424                     l6189:	
  9850  0424  0A64               	incf	_gesture_ud_count_,w
  9851  0425  1D03               	skipz
  9852  0426  2C77               	goto	l6207
  9853  0427  0A65               	incf	_gesture_ud_count_+1,w
  9854  0428  1D03               	btfss	3,2
  9855  0429  2C77               	goto	l6207
  9856  042A  0A62               	incf	_gesture_lr_count_,w
  9857  042B  1D03               	skipz
  9858  042C  2C77               	goto	l6207
  9859  042D  0A63               	incf	_gesture_lr_count_+1,w
  9860  042E  1D03               	btfss	3,2
  9861  042F  2C77               	goto	l6207
  9862                           
  9863                           ;APDS9960.c: 828:         if( ((gesture_ud_delta_) > 0 ? (gesture_ud_delta_) : -(gesture
      +                          _ud_delta_)) > ((gesture_lr_delta_) > 0 ? (gesture_lr_delta_) : -(gesture_lr_delta_)) ) 
      +                          {
  9864  0430  0869               	movf	_gesture_ud_delta_+1,w
  9865  0431  3A80               	xorlw	128
  9866  0432  00A0               	movwf	??_decodeGesture
  9867  0433  3080               	movlw	128
  9868  0434  0220               	subwf	??_decodeGesture,w
  9869  0435  1D03               	skipz
  9870  0436  2C39               	goto	u5385
  9871  0437  3001               	movlw	1
  9872  0438  0268               	subwf	_gesture_ud_delta_,w
  9873  0439                     u5385:	
  9874  0439  1803               	skipnc
  9875  043A  2C48               	goto	l6197
  9876  043B  0020               	movlb	0	; select bank0
  9877  043C  0968               	comf	_gesture_ud_delta_,w
  9878  043D  00A0               	movwf	??_decodeGesture
  9879  043E  0969               	comf	_gesture_ud_delta_+1,w
  9880  043F  00A1               	movwf	??_decodeGesture+1
  9881  0440  0AA0               	incf	??_decodeGesture,f
  9882  0441  1903               	skipnz
  9883  0442  0AA1               	incf	??_decodeGesture+1,f
  9884  0443  0820               	movf	??_decodeGesture,w
  9885  0444  00AA               	movwf	_decodeGesture$1544
  9886  0445  0821               	movf	??_decodeGesture+1,w
  9887  0446  00AB               	movwf	_decodeGesture$1544+1
  9888  0447  2C4D               	goto	l1152
  9889  0448                     l6197:	
  9890  0448  0020               	movlb	0	; select bank0
  9891  0449  0869               	movf	_gesture_ud_delta_+1,w
  9892  044A  00AB               	movwf	_decodeGesture$1544+1
  9893  044B  0868               	movf	_gesture_ud_delta_,w
  9894  044C  00AA               	movwf	_decodeGesture$1544
  9895  044D                     l1152:	
  9896  044D  0867               	movf	_gesture_lr_delta_+1,w
  9897  044E  3A80               	xorlw	128
  9898  044F  00A0               	movwf	??_decodeGesture
  9899  0450  3080               	movlw	128
  9900  0451  0220               	subwf	??_decodeGesture,w
  9901  0452  1D03               	skipz
  9902  0453  2C56               	goto	u5395
  9903  0454  3001               	movlw	1
  9904  0455  0266               	subwf	_gesture_lr_delta_,w
  9905  0456                     u5395:	
  9906  0456  1803               	skipnc
  9907  0457  2C65               	goto	l6201
  9908  0458  0020               	movlb	0	; select bank0
  9909  0459  0966               	comf	_gesture_lr_delta_,w
  9910  045A  00A0               	movwf	??_decodeGesture
  9911  045B  0967               	comf	_gesture_lr_delta_+1,w
  9912  045C  00A1               	movwf	??_decodeGesture+1
  9913  045D  0AA0               	incf	??_decodeGesture,f
  9914  045E  1903               	skipnz
  9915  045F  0AA1               	incf	??_decodeGesture+1,f
  9916  0460  0820               	movf	??_decodeGesture,w
  9917  0461  00AC               	movwf	_decodeGesture$1545
  9918  0462  0821               	movf	??_decodeGesture+1,w
  9919  0463  00AD               	movwf	_decodeGesture$1545+1
  9920  0464  2C6A               	goto	l1156
  9921  0465                     l6201:	
  9922  0465  0020               	movlb	0	; select bank0
  9923  0466  0867               	movf	_gesture_lr_delta_+1,w
  9924  0467  00AD               	movwf	_decodeGesture$1545+1
  9925  0468  0866               	movf	_gesture_lr_delta_,w
  9926  0469  00AC               	movwf	_decodeGesture$1545
  9927  046A                     l1156:	
  9928  046A  082D               	movf	_decodeGesture$1545+1,w
  9929  046B  3A80               	xorlw	128
  9930  046C  00A0               	movwf	??_decodeGesture
  9931  046D  082B               	movf	_decodeGesture$1544+1,w
  9932  046E  3A80               	xorlw	128
  9933  046F  0220               	subwf	??_decodeGesture,w
  9934  0470  1D03               	skipz
  9935  0471  2C74               	goto	u5405
  9936  0472  082A               	movf	_decodeGesture$1544,w
  9937  0473  022C               	subwf	_decodeGesture$1545,w
  9938  0474                     u5405:	
  9939  0474  1C03               	btfss	3,0
  9940  0475  2B5C               	goto	l6133
  9941  0476  2B7C               	goto	l6151
  9942  0477                     l6207:	
  9943  0477  0364               	decf	_gesture_ud_count_,w
  9944  0478  0465               	iorwf	_gesture_ud_count_+1,w
  9945  0479  1D03               	btfss	3,2
  9946  047A  2CC6               	goto	l6225
  9947  047B  0362               	decf	_gesture_lr_count_,w
  9948  047C  0463               	iorwf	_gesture_lr_count_+1,w
  9949  047D  1D03               	btfss	3,2
  9950  047E  2CC6               	goto	l6225
  9951                           
  9952                           ;APDS9960.c: 834:         if( ((gesture_ud_delta_) > 0 ? (gesture_ud_delta_) : -(gesture
      +                          _ud_delta_)) > ((gesture_lr_delta_) > 0 ? (gesture_lr_delta_) : -(gesture_lr_delta_)) ) 
      +                          {
  9953  047F  0869               	movf	_gesture_ud_delta_+1,w
  9954  0480  3A80               	xorlw	128
  9955  0481  00A0               	movwf	??_decodeGesture
  9956  0482  3080               	movlw	128
  9957  0483  0220               	subwf	??_decodeGesture,w
  9958  0484  1D03               	skipz
  9959  0485  2C88               	goto	u5435
  9960  0486  3001               	movlw	1
  9961  0487  0268               	subwf	_gesture_ud_delta_,w
  9962  0488                     u5435:	
  9963  0488  1803               	skipnc
  9964  0489  2C97               	goto	l6215
  9965  048A  0020               	movlb	0	; select bank0
  9966  048B  0968               	comf	_gesture_ud_delta_,w
  9967  048C  00A0               	movwf	??_decodeGesture
  9968  048D  0969               	comf	_gesture_ud_delta_+1,w
  9969  048E  00A1               	movwf	??_decodeGesture+1
  9970  048F  0AA0               	incf	??_decodeGesture,f
  9971  0490  1903               	skipnz
  9972  0491  0AA1               	incf	??_decodeGesture+1,f
  9973  0492  0820               	movf	??_decodeGesture,w
  9974  0493  00AE               	movwf	_decodeGesture$1546
  9975  0494  0821               	movf	??_decodeGesture+1,w
  9976  0495  00AF               	movwf	_decodeGesture$1546+1
  9977  0496  2C9C               	goto	l1164
  9978  0497                     l6215:	
  9979  0497  0020               	movlb	0	; select bank0
  9980  0498  0869               	movf	_gesture_ud_delta_+1,w
  9981  0499  00AF               	movwf	_decodeGesture$1546+1
  9982  049A  0868               	movf	_gesture_ud_delta_,w
  9983  049B  00AE               	movwf	_decodeGesture$1546
  9984  049C                     l1164:	
  9985  049C  0867               	movf	_gesture_lr_delta_+1,w
  9986  049D  3A80               	xorlw	128
  9987  049E  00A0               	movwf	??_decodeGesture
  9988  049F  3080               	movlw	128
  9989  04A0  0220               	subwf	??_decodeGesture,w
  9990  04A1  1D03               	skipz
  9991  04A2  2CA5               	goto	u5445
  9992  04A3  3001               	movlw	1
  9993  04A4  0266               	subwf	_gesture_lr_delta_,w
  9994  04A5                     u5445:	
  9995  04A5  1803               	skipnc
  9996  04A6  2CB4               	goto	l6219
  9997  04A7  0020               	movlb	0	; select bank0
  9998  04A8  0966               	comf	_gesture_lr_delta_,w
  9999  04A9  00A0               	movwf	??_decodeGesture
 10000  04AA  0967               	comf	_gesture_lr_delta_+1,w
 10001  04AB  00A1               	movwf	??_decodeGesture+1
 10002  04AC  0AA0               	incf	??_decodeGesture,f
 10003  04AD  1903               	skipnz
 10004  04AE  0AA1               	incf	??_decodeGesture+1,f
 10005  04AF  0820               	movf	??_decodeGesture,w
 10006  04B0  00B0               	movwf	_decodeGesture$1547
 10007  04B1  0821               	movf	??_decodeGesture+1,w
 10008  04B2  00B1               	movwf	_decodeGesture$1547+1
 10009  04B3  2CB9               	goto	l1168
 10010  04B4                     l6219:	
 10011  04B4  0020               	movlb	0	; select bank0
 10012  04B5  0867               	movf	_gesture_lr_delta_+1,w
 10013  04B6  00B1               	movwf	_decodeGesture$1547+1
 10014  04B7  0866               	movf	_gesture_lr_delta_,w
 10015  04B8  00B0               	movwf	_decodeGesture$1547
 10016  04B9                     l1168:	
 10017  04B9  0831               	movf	_decodeGesture$1547+1,w
 10018  04BA  3A80               	xorlw	128
 10019  04BB  00A0               	movwf	??_decodeGesture
 10020  04BC  082F               	movf	_decodeGesture$1546+1,w
 10021  04BD  3A80               	xorlw	128
 10022  04BE  0220               	subwf	??_decodeGesture,w
 10023  04BF  1D03               	skipz
 10024  04C0  2CC3               	goto	u5455
 10025  04C1  082E               	movf	_decodeGesture$1546,w
 10026  04C2  0230               	subwf	_decodeGesture$1547,w
 10027  04C3                     u5455:	
 10028  04C3  1C03               	btfss	3,0
 10029  04C4  2B66               	goto	l6139
 10030  04C5  2B70               	goto	l6145
 10031  04C6                     l6225:	
 10032                           
 10033                           ;APDS9960.c: 840:         return 0;
 10034  04C6  3000               	movlw	0
 10035  04C7  0008               	return
 10036  04C8                     l6229:	
 10037                           
 10038                           ;APDS9960.c: 843:     return 1;
 10039  04C8  3001               	movlw	1
 10040  04C9  0008               	return
 10041  04CA                     __end_of_decodeGesture:	
 10042                           
 10043                           	psect	text23
 10044  0F9C                     __ptext23:	
 10045 ;; *************** function _enableGestureSensor *****************
 10046 ;; Defined at:
 10047 ;;		line 409 in file "APDS9960.c"
 10048 ;; Parameters:    Size  Location     Type
 10049 ;;  interrupts      1    wreg     _Bool 
 10050 ;; Auto vars:     Size  Location     Type
 10051 ;;  interrupts      1   17[BANK0 ] _Bool 
 10052 ;; Return value:  Size  Location     Type
 10053 ;;                  1    wreg      _Bool 
 10054 ;; Registers used:
 10055 ;;		wreg, status,2, status,0, pclath, cstack
 10056 ;; Tracked objects:
 10057 ;;		On entry : 0/0
 10058 ;;		On exit  : 0/0
 10059 ;;		Unchanged: 0/0
 10060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10061 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10062 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10063 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10064 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10065 ;;Total ram usage:        2 bytes
 10066 ;; Hardware stack levels used:    1
 10067 ;; Hardware stack levels required when called:   11
 10068 ;; This function calls:
 10069 ;;		_enablePower
 10070 ;;		_resetGestureParameters
 10071 ;;		_setGestureIntEnable
 10072 ;;		_setGestureMode
 10073 ;;		_setLEDBoost
 10074 ;;		_setMode
 10075 ;;		_wireWriteDataByte
 10076 ;; This function is called by:
 10077 ;;		_main
 10078 ;; This function uses a non-reentrant model
 10079 ;;
 10080                           
 10081                           
 10082                           ;psect for function _enableGestureSensor
 10083  0F9C                     _enableGestureSensor:	
 10084                           
 10085                           ;incstack = 0
 10086                           ; Regs used in _enableGestureSensor: [wreg+status,2+status,0+pclath+cstack]
 10087                           ;enableGestureSensor@interrupts stored from wreg
 10088  0F9C  0020               	movlb	0	; select bank0
 10089  0F9D  00B1               	movwf	enableGestureSensor@interrupts
 10090                           
 10091                           ;APDS9960.c: 409: _Bool enableGestureSensor ( _Bool interrupts);APDS9960.c: 410: {;APDS9
      +                          960.c: 418:     resetGestureParameters();
 10092  0F9E  318A  224A  318F   	fcall	_resetGestureParameters
 10093                           
 10094                           ;APDS9960.c: 419:     if( !wireWriteDataByte(0x83, 0xFF) ) {
 10095  0FA1  30FF               	movlw	255
 10096  0FA2  0020               	movlb	0	; select bank0
 10097  0FA3  00B0               	movwf	??_enableGestureSensor
 10098  0FA4  0830               	movf	??_enableGestureSensor,w
 10099  0FA5  00A6               	movwf	wireWriteDataByte@val
 10100  0FA6  3083               	movlw	131
 10101  0FA7  318A  2262  318F   	fcall	_wireWriteDataByte
 10102  0FAA  0020               	movlb	0	; select bank0
 10103  0FAB  0826               	movf	?_wireWriteDataByte,w
 10104  0FAC  0427               	iorwf	?_wireWriteDataByte+1,w
 10105  0FAD  1903               	btfsc	3,2
 10106  0FAE  2FB2               	goto	l6841
 10107  0FAF  2FB4               	goto	l6845
 10108  0FB0                     l6859:	
 10109                           
 10110                           ;APDS9960.c: 429:         if( !setGestureIntEnable(1) ) {
 10111  0FB0  3001               	movlw	1
 10112  0FB1  2FCD               	goto	L8
 10113  0FB2                     l6841:	
 10114                           
 10115                           ;APDS9960.c: 420:         return 0;
 10116  0FB2  3000               	movlw	0
 10117  0FB3  0008               	return
 10118  0FB4                     l6845:	
 10119                           
 10120                           ;APDS9960.c: 422:     if( !wireWriteDataByte(0x8E, 0x89) ) {
 10121  0FB4  3089               	movlw	137
 10122  0FB5  00B0               	movwf	??_enableGestureSensor
 10123  0FB6  0830               	movf	??_enableGestureSensor,w
 10124  0FB7  00A6               	movwf	wireWriteDataByte@val
 10125  0FB8  308E               	movlw	142
 10126  0FB9  318A  2262  318F   	fcall	_wireWriteDataByte
 10127  0FBC  0020               	movlb	0	; select bank0
 10128  0FBD  0826               	movf	?_wireWriteDataByte,w
 10129  0FBE  0427               	iorwf	?_wireWriteDataByte+1,w
 10130  0FBF  1903               	btfsc	3,2
 10131  0FC0  2FB2               	goto	l6841
 10132                           
 10133                           ;APDS9960.c: 425:     if( !setLEDBoost(3) ) {
 10134  0FC1  3003               	movlw	3
 10135  0FC2  318C  24B5  318F   	fcall	_setLEDBoost
 10136  0FC5  3A00               	xorlw	0
 10137  0FC6  1903               	btfsc	3,2
 10138  0FC7  2FB2               	goto	l6841
 10139                           
 10140                           ;APDS9960.c: 428:     if( interrupts ) {
 10141  0FC8  0020               	movlb	0	; select bank0
 10142  0FC9  0831               	movf	enableGestureSensor@interrupts,w
 10143  0FCA  1D03               	btfss	3,2
 10144  0FCB  2FB0               	goto	l6859
 10145                           
 10146                           ;APDS9960.c: 433:         if( !setGestureIntEnable(0) ) {
 10147  0FCC  3000               	movlw	0
 10148  0FCD                     L8:	
 10149  0FCD  318C  242B  318F   	fcall	_setGestureIntEnable
 10150  0FD0  3A00               	xorlw	0
 10151  0FD1  1903               	btfsc	3,2
 10152  0FD2  2FB2               	goto	l6841
 10153                           
 10154                           ;APDS9960.c: 437:     if( !setGestureMode(1) ) {
 10155  0FD3  3001               	movlw	1
 10156  0FD4  318B  233B  318F   	fcall	_setGestureMode
 10157  0FD7  3A00               	xorlw	0
 10158  0FD8  1903               	btfsc	3,2
 10159  0FD9  2FB2               	goto	l6841
 10160                           
 10161                           ;APDS9960.c: 440:     if( !enablePower() ){
 10162  0FDA  3189  2178  318F   	fcall	_enablePower
 10163  0FDD  3A00               	xorlw	0
 10164  0FDE  1903               	btfsc	3,2
 10165  0FDF  2FB2               	goto	l6841
 10166                           
 10167                           ;APDS9960.c: 443:     if( !setMode(3, 1) ) {
 10168  0FE0  0020               	movlb	0	; select bank0
 10169  0FE1  01AB               	clrf	setMode@enable
 10170  0FE2  0AAB               	incf	setMode@enable,f
 10171  0FE3  3003               	movlw	3
 10172  0FE4  318E  26A1  318F   	fcall	_setMode
 10173  0FE7  3A00               	xorlw	0
 10174  0FE8  1903               	btfsc	3,2
 10175  0FE9  2FB2               	goto	l6841
 10176                           
 10177                           ;APDS9960.c: 446:     if( !setMode(2, 1) ) {
 10178  0FEA  0020               	movlb	0	; select bank0
 10179  0FEB  01AB               	clrf	setMode@enable
 10180  0FEC  0AAB               	incf	setMode@enable,f
 10181  0FED  3002               	movlw	2
 10182  0FEE  318E  26A1  318F   	fcall	_setMode
 10183  0FF1  3A00               	xorlw	0
 10184  0FF2  1903               	btfsc	3,2
 10185  0FF3  2FB2               	goto	l6841
 10186                           
 10187                           ;APDS9960.c: 449:     if( !setMode(6, 1) ) {
 10188  0FF4  0020               	movlb	0	; select bank0
 10189  0FF5  01AB               	clrf	setMode@enable
 10190  0FF6  0AAB               	incf	setMode@enable,f
 10191  0FF7  3006               	movlw	6
 10192  0FF8  318E  26A1  318F   	fcall	_setMode
 10193  0FFB  3A00               	xorlw	0
 10194  0FFC  1903               	btfsc	3,2
 10195  0FFD  2FB2               	goto	l6841
 10196                           
 10197                           ;APDS9960.c: 453:     return 1;
 10198  0FFE  3001               	movlw	1
 10199  0FFF  0008               	return
 10200  1000                     __end_of_enableGestureSensor:	
 10201                           
 10202                           	psect	text24
 10203  0CB5                     __ptext24:	
 10204 ;; *************** function _setLEDBoost *****************
 10205 ;; Defined at:
 10206 ;;		line 484 in file "APDS9960.c"
 10207 ;; Parameters:    Size  Location     Type
 10208 ;;  boost           1    wreg     unsigned char 
 10209 ;; Auto vars:     Size  Location     Type
 10210 ;;  boost           1   13[BANK0 ] unsigned char 
 10211 ;;  val             1   12[BANK0 ] unsigned char 
 10212 ;; Return value:  Size  Location     Type
 10213 ;;                  1    wreg      _Bool 
 10214 ;; Registers used:
 10215 ;;		wreg, status,2, status,0, pclath, cstack
 10216 ;; Tracked objects:
 10217 ;;		On entry : 0/0
 10218 ;;		On exit  : 0/0
 10219 ;;		Unchanged: 0/0
 10220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10221 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10222 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10223 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10224 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10225 ;;Total ram usage:        4 bytes
 10226 ;; Hardware stack levels used:    1
 10227 ;; Hardware stack levels required when called:    8
 10228 ;; This function calls:
 10229 ;;		_wireReadDataByte
 10230 ;;		_wireWriteDataByte
 10231 ;; This function is called by:
 10232 ;;		_enableGestureSensor
 10233 ;; This function uses a non-reentrant model
 10234 ;;
 10235                           
 10236                           
 10237                           ;psect for function _setLEDBoost
 10238  0CB5                     _setLEDBoost:	
 10239                           
 10240                           ;incstack = 0
 10241                           ; Regs used in _setLEDBoost: [wreg+status,2+status,0+pclath+cstack]
 10242                           ;setLEDBoost@boost stored from wreg
 10243  0CB5  0020               	movlb	0	; select bank0
 10244  0CB6  00AD               	movwf	setLEDBoost@boost
 10245                           
 10246                           ;APDS9960.c: 484: _Bool setLEDBoost(uint8_t boost);APDS9960.c: 485: {;APDS9960.c: 486:  
      +                             uint8_t val;;APDS9960.c: 489:     val=wireReadDataByte(0x90);
 10247  0CB7  3090               	movlw	144
 10248  0CB8  318A  22F1  318C   	fcall	_wireReadDataByte
 10249  0CBB  0020               	movlb	0	; select bank0
 10250  0CBC  00AA               	movwf	??_setLEDBoost
 10251  0CBD  082A               	movf	??_setLEDBoost,w
 10252  0CBE  00AC               	movwf	setLEDBoost@val
 10253                           
 10254                           ;APDS9960.c: 492:     boost &= 0b00000011;
 10255  0CBF  3003               	movlw	3
 10256  0CC0  00AA               	movwf	??_setLEDBoost
 10257  0CC1  082A               	movf	??_setLEDBoost,w
 10258  0CC2  05AD               	andwf	setLEDBoost@boost,f
 10259                           
 10260                           ;APDS9960.c: 493:     boost = boost << 4;
 10261  0CC3  082D               	movf	setLEDBoost@boost,w
 10262  0CC4  00AA               	movwf	??_setLEDBoost
 10263  0CC5  3003               	movlw	3
 10264  0CC6                     u5745:	
 10265  0CC6  35AA               	lslf	??_setLEDBoost,f
 10266  0CC7  3EFF               	addlw	-1
 10267  0CC8  1D03               	skipz
 10268  0CC9  2CC6               	goto	u5745
 10269  0CCA  352A               	lslf	??_setLEDBoost,w
 10270  0CCB  00AB               	movwf	??_setLEDBoost+1
 10271  0CCC  082B               	movf	??_setLEDBoost+1,w
 10272  0CCD  00AD               	movwf	setLEDBoost@boost
 10273                           
 10274                           ;APDS9960.c: 494:     val &= 0b11001111;
 10275  0CCE  30CF               	movlw	207
 10276  0CCF  00AA               	movwf	??_setLEDBoost
 10277  0CD0  082A               	movf	??_setLEDBoost,w
 10278  0CD1  05AC               	andwf	setLEDBoost@val,f
 10279                           
 10280                           ;APDS9960.c: 495:     val |= boost;
 10281  0CD2  082D               	movf	setLEDBoost@boost,w
 10282  0CD3  00AA               	movwf	??_setLEDBoost
 10283  0CD4  082A               	movf	??_setLEDBoost,w
 10284  0CD5  04AC               	iorwf	setLEDBoost@val,f
 10285                           
 10286                           ;APDS9960.c: 498:     if( !wireWriteDataByte(0x90, val) ) {
 10287  0CD6  082C               	movf	setLEDBoost@val,w
 10288  0CD7  00AA               	movwf	??_setLEDBoost
 10289  0CD8  082A               	movf	??_setLEDBoost,w
 10290  0CD9  00A6               	movwf	wireWriteDataByte@val
 10291  0CDA  3090               	movlw	144
 10292  0CDB  318A  2262  318C   	fcall	_wireWriteDataByte
 10293  0CDE  0020               	movlb	0	; select bank0
 10294  0CDF  0826               	movf	?_wireWriteDataByte,w
 10295  0CE0  0427               	iorwf	?_wireWriteDataByte+1,w
 10296  0CE1  1D03               	btfss	3,2
 10297  0CE2  2CE5               	goto	l6625
 10298                           
 10299                           ;APDS9960.c: 499:         return 0;
 10300  0CE3  3000               	movlw	0
 10301  0CE4  0008               	return
 10302  0CE5                     l6625:	
 10303                           
 10304                           ;APDS9960.c: 502:     return 1;
 10305  0CE5  3001               	movlw	1
 10306  0CE6  0008               	return
 10307  0CE7                     __end_of_setLEDBoost:	
 10308                           
 10309                           	psect	text25
 10310  0B3B                     __ptext25:	
 10311 ;; *************** function _setGestureMode *****************
 10312 ;; Defined at:
 10313 ;;		line 506 in file "APDS9960.c"
 10314 ;; Parameters:    Size  Location     Type
 10315 ;;  mode            1    wreg     unsigned char 
 10316 ;; Auto vars:     Size  Location     Type
 10317 ;;  mode            1   11[BANK0 ] unsigned char 
 10318 ;;  val             1   12[BANK0 ] unsigned char 
 10319 ;; Return value:  Size  Location     Type
 10320 ;;                  1    wreg      _Bool 
 10321 ;; Registers used:
 10322 ;;		wreg, status,2, status,0, pclath, cstack
 10323 ;; Tracked objects:
 10324 ;;		On entry : 0/0
 10325 ;;		On exit  : 0/0
 10326 ;;		Unchanged: 0/0
 10327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10328 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10329 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10330 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10331 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10332 ;;Total ram usage:        3 bytes
 10333 ;; Hardware stack levels used:    1
 10334 ;; Hardware stack levels required when called:    8
 10335 ;; This function calls:
 10336 ;;		_wireReadDataByte
 10337 ;;		_wireWriteDataByte
 10338 ;; This function is called by:
 10339 ;;		_enableGestureSensor
 10340 ;; This function uses a non-reentrant model
 10341 ;;
 10342                           
 10343                           
 10344                           ;psect for function _setGestureMode
 10345  0B3B                     _setGestureMode:	
 10346                           
 10347                           ;incstack = 0
 10348                           ; Regs used in _setGestureMode: [wreg+status,2+status,0+pclath+cstack]
 10349                           ;setGestureMode@mode stored from wreg
 10350  0B3B  0020               	movlb	0	; select bank0
 10351  0B3C  00AB               	movwf	setGestureMode@mode
 10352                           
 10353                           ;APDS9960.c: 506: _Bool setGestureMode(uint8_t mode);APDS9960.c: 507: {;APDS9960.c: 508:
      +                               uint8_t val;;APDS9960.c: 511:     val = wireReadDataByte(0xAB);
 10354  0B3D  30AB               	movlw	171
 10355  0B3E  318A  22F1  318B   	fcall	_wireReadDataByte
 10356  0B41  0020               	movlb	0	; select bank0
 10357  0B42  00AA               	movwf	??_setGestureMode
 10358  0B43  082A               	movf	??_setGestureMode,w
 10359  0B44  00AC               	movwf	setGestureMode@val
 10360                           
 10361                           ;APDS9960.c: 514:     mode &= 0b00000001;
 10362  0B45  3001               	movlw	1
 10363  0B46  00AA               	movwf	??_setGestureMode
 10364  0B47  082A               	movf	??_setGestureMode,w
 10365  0B48  05AB               	andwf	setGestureMode@mode,f
 10366                           
 10367                           ;APDS9960.c: 515:     val &= 0b11111110;
 10368  0B49  30FE               	movlw	254
 10369  0B4A  00AA               	movwf	??_setGestureMode
 10370  0B4B  082A               	movf	??_setGestureMode,w
 10371  0B4C  05AC               	andwf	setGestureMode@val,f
 10372                           
 10373                           ;APDS9960.c: 516:     val |= mode;
 10374  0B4D  082B               	movf	setGestureMode@mode,w
 10375  0B4E  00AA               	movwf	??_setGestureMode
 10376  0B4F  082A               	movf	??_setGestureMode,w
 10377  0B50  04AC               	iorwf	setGestureMode@val,f
 10378                           
 10379                           ;APDS9960.c: 519:     if( !wireWriteDataByte(0xAB, val) ) {
 10380  0B51  082C               	movf	setGestureMode@val,w
 10381  0B52  00AA               	movwf	??_setGestureMode
 10382  0B53  082A               	movf	??_setGestureMode,w
 10383  0B54  00A6               	movwf	wireWriteDataByte@val
 10384  0B55  30AB               	movlw	171
 10385  0B56  318A  2262  318B   	fcall	_wireWriteDataByte
 10386  0B59  0020               	movlb	0	; select bank0
 10387  0B5A  0826               	movf	?_wireWriteDataByte,w
 10388  0B5B  0427               	iorwf	?_wireWriteDataByte+1,w
 10389  0B5C  1D03               	btfss	3,2
 10390  0B5D  2B60               	goto	l6643
 10391                           
 10392                           ;APDS9960.c: 520:         return 0;
 10393  0B5E  3000               	movlw	0
 10394  0B5F  0008               	return
 10395  0B60                     l6643:	
 10396                           
 10397                           ;APDS9960.c: 523:     return 1;
 10398  0B60  3001               	movlw	1
 10399  0B61  0008               	return
 10400  0B62                     __end_of_setGestureMode:	
 10401                           
 10402                           	psect	text26
 10403  0C2B                     __ptext26:	
 10404 ;; *************** function _setGestureIntEnable *****************
 10405 ;; Defined at:
 10406 ;;		line 387 in file "APDS9960.c"
 10407 ;; Parameters:    Size  Location     Type
 10408 ;;  enable          1    wreg     unsigned char 
 10409 ;; Auto vars:     Size  Location     Type
 10410 ;;  enable          1   12[BANK0 ] unsigned char 
 10411 ;;  val             1   11[BANK0 ] unsigned char 
 10412 ;; Return value:  Size  Location     Type
 10413 ;;                  1    wreg      _Bool 
 10414 ;; Registers used:
 10415 ;;		wreg, status,2, status,0, pclath, cstack
 10416 ;; Tracked objects:
 10417 ;;		On entry : 0/0
 10418 ;;		On exit  : 0/0
 10419 ;;		Unchanged: 0/0
 10420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10421 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10422 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10423 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10424 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10425 ;;Total ram usage:        3 bytes
 10426 ;; Hardware stack levels used:    1
 10427 ;; Hardware stack levels required when called:    8
 10428 ;; This function calls:
 10429 ;;		_wireReadDataByte
 10430 ;;		_wireWriteDataByte
 10431 ;; This function is called by:
 10432 ;;		_initialize
 10433 ;;		_enableGestureSensor
 10434 ;; This function uses a non-reentrant model
 10435 ;;
 10436                           
 10437                           
 10438                           ;psect for function _setGestureIntEnable
 10439  0C2B                     _setGestureIntEnable:	
 10440                           
 10441                           ;incstack = 0
 10442                           ; Regs used in _setGestureIntEnable: [wreg+status,2+status,0+pclath+cstack]
 10443                           ;setGestureIntEnable@enable stored from wreg
 10444  0C2B  0020               	movlb	0	; select bank0
 10445  0C2C  00AC               	movwf	setGestureIntEnable@enable
 10446                           
 10447                           ;APDS9960.c: 387: _Bool setGestureIntEnable(uint8_t enable);APDS9960.c: 388: {;APDS9960.
      +                          c: 389:     uint8_t val;;APDS9960.c: 392:     val = wireReadDataByte(0xAB);
 10448  0C2D  30AB               	movlw	171
 10449  0C2E  318A  22F1  318C   	fcall	_wireReadDataByte
 10450  0C31  0020               	movlb	0	; select bank0
 10451  0C32  00AA               	movwf	??_setGestureIntEnable
 10452  0C33  082A               	movf	??_setGestureIntEnable,w
 10453  0C34  00AB               	movwf	setGestureIntEnable@val
 10454                           
 10455                           ;APDS9960.c: 395:     enable &= 0b00000001;
 10456  0C35  3001               	movlw	1
 10457  0C36  00AA               	movwf	??_setGestureIntEnable
 10458  0C37  082A               	movf	??_setGestureIntEnable,w
 10459  0C38  05AC               	andwf	setGestureIntEnable@enable,f
 10460                           
 10461                           ;APDS9960.c: 396:     enable = enable << 1;
 10462  0C39  352C               	lslf	setGestureIntEnable@enable,w
 10463  0C3A  00AA               	movwf	??_setGestureIntEnable
 10464  0C3B  082A               	movf	??_setGestureIntEnable,w
 10465  0C3C  00AC               	movwf	setGestureIntEnable@enable
 10466                           
 10467                           ;APDS9960.c: 397:     val &= 0b11111101;
 10468  0C3D  30FD               	movlw	253
 10469  0C3E  00AA               	movwf	??_setGestureIntEnable
 10470  0C3F  082A               	movf	??_setGestureIntEnable,w
 10471  0C40  05AB               	andwf	setGestureIntEnable@val,f
 10472                           
 10473                           ;APDS9960.c: 398:     val |= enable;
 10474  0C41  082C               	movf	setGestureIntEnable@enable,w
 10475  0C42  00AA               	movwf	??_setGestureIntEnable
 10476  0C43  082A               	movf	??_setGestureIntEnable,w
 10477  0C44  04AB               	iorwf	setGestureIntEnable@val,f
 10478                           
 10479                           ;APDS9960.c: 401:     if( !wireWriteDataByte(0xAB, val) ) {
 10480  0C45  082B               	movf	setGestureIntEnable@val,w
 10481  0C46  00AA               	movwf	??_setGestureIntEnable
 10482  0C47  082A               	movf	??_setGestureIntEnable,w
 10483  0C48  00A6               	movwf	wireWriteDataByte@val
 10484  0C49  30AB               	movlw	171
 10485  0C4A  318A  2262  318C   	fcall	_wireWriteDataByte
 10486  0C4D  0020               	movlb	0	; select bank0
 10487  0C4E  0826               	movf	?_wireWriteDataByte,w
 10488  0C4F  0427               	iorwf	?_wireWriteDataByte+1,w
 10489  0C50  1D03               	btfss	3,2
 10490  0C51  2C54               	goto	l6607
 10491                           
 10492                           ;APDS9960.c: 402:         return 0;
 10493  0C52  3000               	movlw	0
 10494  0C53  0008               	return
 10495  0C54                     l6607:	
 10496                           
 10497                           ;APDS9960.c: 405:     return 1;
 10498  0C54  3001               	movlw	1
 10499  0C55  0008               	return
 10500  0C56                     __end_of_setGestureIntEnable:	
 10501                           
 10502                           	psect	text27
 10503  0A4A                     __ptext27:	
 10504 ;; *************** function _resetGestureParameters *****************
 10505 ;; Defined at:
 10506 ;;		line 457 in file "APDS9960.c"
 10507 ;; Parameters:    Size  Location     Type
 10508 ;;		None
 10509 ;; Auto vars:     Size  Location     Type
 10510 ;;		None
 10511 ;; Return value:  Size  Location     Type
 10512 ;;                  1    wreg      void 
 10513 ;; Registers used:
 10514 ;;		status,2
 10515 ;; Tracked objects:
 10516 ;;		On entry : 0/0
 10517 ;;		On exit  : 0/0
 10518 ;;		Unchanged: 0/0
 10519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10520 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10521 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10522 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10523 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10524 ;;Total ram usage:        0 bytes
 10525 ;; Hardware stack levels used:    1
 10526 ;; Hardware stack levels required when called:    5
 10527 ;; This function calls:
 10528 ;;		Nothing
 10529 ;; This function is called by:
 10530 ;;		_enableGestureSensor
 10531 ;;		_readGesture
 10532 ;; This function uses a non-reentrant model
 10533 ;;
 10534                           
 10535                           
 10536                           ;psect for function _resetGestureParameters
 10537  0A4A                     _resetGestureParameters:	
 10538                           
 10539                           ;APDS9960.c: 460:     gesture_data_.index = 0;
 10540                           
 10541                           ;incstack = 0
 10542                           ; Regs used in _resetGestureParameters: [status,2]
 10543  0A4A  0024               	movlb	4	; select bank4
 10544  0A4B  01E0               	clrf	(_gesture_data_^(0+512)+64)
 10545                           
 10546                           ;APDS9960.c: 461:     gesture_data_.total_gestures = 0;
 10547  0A4C  01E1               	clrf	(_gesture_data_^(0+512)+65)
 10548                           
 10549                           ;APDS9960.c: 463:     gesture_ud_delta_ = 0;
 10550  0A4D  0020               	movlb	0	; select bank0
 10551  0A4E  01E8               	clrf	_gesture_ud_delta_
 10552  0A4F  01E9               	clrf	_gesture_ud_delta_+1
 10553                           
 10554                           ;APDS9960.c: 464:     gesture_lr_delta_ = 0;
 10555  0A50  01E6               	clrf	_gesture_lr_delta_
 10556  0A51  01E7               	clrf	_gesture_lr_delta_+1
 10557                           
 10558                           ;APDS9960.c: 466:     gesture_ud_count_ = 0;
 10559  0A52  01E4               	clrf	_gesture_ud_count_
 10560  0A53  01E5               	clrf	_gesture_ud_count_+1
 10561                           
 10562                           ;APDS9960.c: 467:     gesture_lr_count_ = 0;
 10563  0A54  01E2               	clrf	_gesture_lr_count_
 10564  0A55  01E3               	clrf	_gesture_lr_count_+1
 10565                           
 10566                           ;APDS9960.c: 469:     gesture_near_count_ = 0;
 10567  0A56  01E0               	clrf	_gesture_near_count_
 10568  0A57  01E1               	clrf	_gesture_near_count_+1
 10569                           
 10570                           ;APDS9960.c: 470:     gesture_far_count_ = 0;
 10571  0A58  0021               	movlb	1	; select bank1
 10572  0A59  01E2               	clrf	_gesture_far_count_^(0+128)
 10573  0A5A  01E3               	clrf	(_gesture_far_count_+1)^(0+128)
 10574                           
 10575                           ;APDS9960.c: 472:     gesture_state_ = 0;
 10576  0A5B  0020               	movlb	0	; select bank0
 10577  0A5C  01DE               	clrf	_gesture_state_
 10578  0A5D  01DF               	clrf	_gesture_state_+1
 10579                           
 10580                           ;APDS9960.c: 473:     gesture_motion_ = DIR_NONE;
 10581  0A5E  0022               	movlb	2	; select bank2
 10582  0A5F  01E8               	clrf	_gesture_motion_^(0+256)
 10583  0A60  01E9               	clrf	(_gesture_motion_+1)^(0+256)
 10584  0A61  0008               	return
 10585  0A62                     __end_of_resetGestureParameters:	
 10586                           
 10587                           	psect	text28
 10588  0978                     __ptext28:	
 10589 ;; *************** function _enablePower *****************
 10590 ;; Defined at:
 10591 ;;		line 527 in file "APDS9960.c"
 10592 ;; Parameters:    Size  Location     Type
 10593 ;;		None
 10594 ;; Auto vars:     Size  Location     Type
 10595 ;;		None
 10596 ;; Return value:  Size  Location     Type
 10597 ;;                  1    wreg      _Bool 
 10598 ;; Registers used:
 10599 ;;		wreg, status,2, status,0, pclath, cstack
 10600 ;; Tracked objects:
 10601 ;;		On entry : 0/0
 10602 ;;		On exit  : 0/0
 10603 ;;		Unchanged: 0/0
 10604 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10605 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10606 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10607 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10608 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10609 ;;Total ram usage:        0 bytes
 10610 ;; Hardware stack levels used:    1
 10611 ;; Hardware stack levels required when called:   10
 10612 ;; This function calls:
 10613 ;;		_setMode
 10614 ;; This function is called by:
 10615 ;;		_enableGestureSensor
 10616 ;; This function uses a non-reentrant model
 10617 ;;
 10618                           
 10619                           
 10620                           ;psect for function _enablePower
 10621  0978                     _enablePower:	
 10622                           
 10623                           ;APDS9960.c: 529:     if( !setMode(0, 1) ) {
 10624                           
 10625                           ;incstack = 0
 10626                           ; Regs used in _enablePower: [wreg+status,2+status,0+pclath+cstack]
 10627  0978  0020               	movlb	0	; select bank0
 10628  0979  01AB               	clrf	setMode@enable
 10629  097A  0AAB               	incf	setMode@enable,f
 10630  097B  3000               	movlw	0
 10631  097C  318E  26A1  3189   	fcall	_setMode
 10632  097F  3A00               	xorlw	0
 10633  0980  1D03               	skipz
 10634  0981  2984               	goto	l6653
 10635                           
 10636                           ;APDS9960.c: 530:         return 0;
 10637  0982  3000               	movlw	0
 10638  0983  0008               	return
 10639  0984                     l6653:	
 10640                           
 10641                           ;APDS9960.c: 533:     return 1;
 10642  0984  3001               	movlw	1
 10643  0985  0008               	return
 10644  0986                     __end_of_enablePower:	
 10645                           
 10646                           	psect	text29
 10647  0EA1                     __ptext29:	
 10648 ;; *************** function _setMode *****************
 10649 ;; Defined at:
 10650 ;;		line 124 in file "APDS9960.c"
 10651 ;; Parameters:    Size  Location     Type
 10652 ;;  mode            1    wreg     unsigned char 
 10653 ;;  enable          1   11[BANK0 ] unsigned char 
 10654 ;; Auto vars:     Size  Location     Type
 10655 ;;  mode            1   15[BANK0 ] unsigned char 
 10656 ;;  reg_val         1   14[BANK0 ] unsigned char 
 10657 ;; Return value:  Size  Location     Type
 10658 ;;                  1    wreg      _Bool 
 10659 ;; Registers used:
 10660 ;;		wreg, status,2, status,0, pclath, cstack
 10661 ;; Tracked objects:
 10662 ;;		On entry : 0/0
 10663 ;;		On exit  : 0/0
 10664 ;;		Unchanged: 0/0
 10665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10666 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10667 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10668 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10669 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10670 ;;Total ram usage:        5 bytes
 10671 ;; Hardware stack levels used:    1
 10672 ;; Hardware stack levels required when called:    9
 10673 ;; This function calls:
 10674 ;;		_getMode
 10675 ;;		_wireWriteDataByte
 10676 ;; This function is called by:
 10677 ;;		_initialize
 10678 ;;		_enableGestureSensor
 10679 ;;		_enablePower
 10680 ;; This function uses a non-reentrant model
 10681 ;;
 10682                           
 10683                           
 10684                           ;psect for function _setMode
 10685  0EA1                     _setMode:	
 10686                           
 10687                           ;incstack = 0
 10688                           ; Regs used in _setMode: [wreg+status,2+status,0+pclath+cstack]
 10689                           ;setMode@mode stored from wreg
 10690  0EA1  0020               	movlb	0	; select bank0
 10691  0EA2  00AF               	movwf	setMode@mode
 10692                           
 10693                           ;APDS9960.c: 124: _Bool setMode(uint8_t mode, uint8_t enable);APDS9960.c: 125: {;APDS996
      +                          0.c: 126:     uint8_t reg_val;;APDS9960.c: 129:     reg_val = getMode();
 10694  0EA3  3189  214E  318E   	fcall	_getMode
 10695  0EA6  0020               	movlb	0	; select bank0
 10696  0EA7  00AC               	movwf	??_setMode
 10697  0EA8  082C               	movf	??_setMode,w
 10698  0EA9  00AE               	movwf	setMode@reg_val
 10699                           
 10700                           ;APDS9960.c: 130:     if( reg_val == 0xFF ) {
 10701  0EAA  0A2E               	incf	setMode@reg_val,w
 10702  0EAB  1D03               	btfss	3,2
 10703  0EAC  2EAF               	goto	l5901
 10704  0EAD                     l5897:	
 10705                           
 10706                           ;APDS9960.c: 131:         return 0;
 10707  0EAD  3000               	movlw	0
 10708  0EAE  0008               	return
 10709  0EAF                     l5901:	
 10710                           
 10711                           ;APDS9960.c: 135:     enable = enable & 0x01;
 10712  0EAF  082B               	movf	setMode@enable,w
 10713  0EB0  3901               	andlw	1
 10714  0EB1  00AC               	movwf	??_setMode
 10715  0EB2  082C               	movf	??_setMode,w
 10716  0EB3  00AB               	movwf	setMode@enable
 10717                           
 10718                           ;APDS9960.c: 136:     if( mode >= 0 && mode <= 6 ) {
 10719  0EB4  3007               	movlw	7
 10720  0EB5  022F               	subwf	setMode@mode,w
 10721  0EB6  1803               	skipnc
 10722  0EB7  2ED4               	goto	l5911
 10723                           
 10724                           ;APDS9960.c: 137:         if (enable) {
 10725  0EB8  082B               	movf	setMode@enable,w
 10726  0EB9  1903               	btfsc	3,2
 10727  0EBA  2EC7               	goto	l5909
 10728                           
 10729                           ;APDS9960.c: 138:             reg_val |= (1 << mode);
 10730  0EBB  3001               	movlw	1
 10731  0EBC  00AC               	movwf	??_setMode
 10732  0EBD  0A2F               	incf	setMode@mode,w
 10733  0EBE  2EC0               	goto	u4664
 10734  0EBF                     u4665:	
 10735  0EBF  35AC               	lslf	??_setMode,f
 10736  0EC0                     u4664:	
 10737  0EC0  0B89               	decfsz	9,f
 10738  0EC1  2EBF               	goto	u4665
 10739  0EC2  082C               	movf	??_setMode,w
 10740  0EC3  00AD               	movwf	??_setMode+1
 10741  0EC4  082D               	movf	??_setMode+1,w
 10742  0EC5  04AE               	iorwf	setMode@reg_val,f
 10743                           
 10744                           ;APDS9960.c: 139:         } else {
 10745  0EC6  2EE1               	goto	l5919
 10746  0EC7                     l5909:	
 10747                           
 10748                           ;APDS9960.c: 140:             reg_val &= ~(1 << mode);
 10749  0EC7  3001               	movlw	1
 10750  0EC8  00AC               	movwf	??_setMode
 10751  0EC9  0A2F               	incf	setMode@mode,w
 10752  0ECA  2ECC               	goto	u4674
 10753  0ECB                     u4675:	
 10754  0ECB  35AC               	lslf	??_setMode,f
 10755  0ECC                     u4674:	
 10756  0ECC  0B89               	decfsz	9,f
 10757  0ECD  2ECB               	goto	u4675
 10758  0ECE  082C               	movf	??_setMode,w
 10759  0ECF  3AFF               	xorlw	255
 10760  0ED0  00AD               	movwf	??_setMode+1
 10761  0ED1  082D               	movf	??_setMode+1,w
 10762  0ED2  05AE               	andwf	setMode@reg_val,f
 10763  0ED3  2EE1               	goto	l5919
 10764  0ED4                     l5911:	
 10765  0ED4  3007               	movlw	7
 10766  0ED5  062F               	xorwf	setMode@mode,w
 10767  0ED6  1D03               	btfss	3,2
 10768  0ED7  2EE1               	goto	l5919
 10769                           
 10770                           ;APDS9960.c: 143:         if (enable) {
 10771  0ED8  082B               	movf	setMode@enable,w
 10772  0ED9  1903               	btfsc	3,2
 10773  0EDA  2EE0               	goto	l5917
 10774                           
 10775                           ;APDS9960.c: 144:             reg_val = 0x7F;
 10776  0EDB  307F               	movlw	127
 10777  0EDC  00AC               	movwf	??_setMode
 10778  0EDD  082C               	movf	??_setMode,w
 10779  0EDE  00AE               	movwf	setMode@reg_val
 10780                           
 10781                           ;APDS9960.c: 145:         } else {
 10782  0EDF  2EE1               	goto	l5919
 10783  0EE0                     l5917:	
 10784                           
 10785                           ;APDS9960.c: 146:             reg_val = 0x00;
 10786  0EE0  01AE               	clrf	setMode@reg_val
 10787  0EE1                     l5919:	
 10788                           
 10789                           ;APDS9960.c: 151:     if( !wireWriteDataByte(0x80, reg_val) ) {
 10790  0EE1  082E               	movf	setMode@reg_val,w
 10791  0EE2  00AC               	movwf	??_setMode
 10792  0EE3  082C               	movf	??_setMode,w
 10793  0EE4  00A6               	movwf	wireWriteDataByte@val
 10794  0EE5  3080               	movlw	128
 10795  0EE6  318A  2262  318E   	fcall	_wireWriteDataByte
 10796  0EE9  0020               	movlb	0	; select bank0
 10797  0EEA  0826               	movf	?_wireWriteDataByte,w
 10798  0EEB  0427               	iorwf	?_wireWriteDataByte+1,w
 10799  0EEC  1903               	btfsc	3,2
 10800  0EED  2EAD               	goto	l5897
 10801                           
 10802                           ;APDS9960.c: 155:     return 1;
 10803  0EEE  3001               	movlw	1
 10804  0EEF  0008               	return
 10805  0EF0                     __end_of_setMode:	
 10806                           
 10807                           	psect	text30
 10808  0A62                     __ptext30:	
 10809 ;; *************** function _wireWriteDataByte *****************
 10810 ;; Defined at:
 10811 ;;		line 871 in file "APDS9960.c"
 10812 ;; Parameters:    Size  Location     Type
 10813 ;;  reg             1    wreg     unsigned char 
 10814 ;;  val             1    6[BANK0 ] unsigned char 
 10815 ;; Auto vars:     Size  Location     Type
 10816 ;;  reg             1    9[BANK0 ] unsigned char 
 10817 ;; Return value:  Size  Location     Type
 10818 ;;                  2    6[BANK0 ] int 
 10819 ;; Registers used:
 10820 ;;		wreg, status,2, status,0, pclath, cstack
 10821 ;; Tracked objects:
 10822 ;;		On entry : 0/0
 10823 ;;		On exit  : 0/0
 10824 ;;		Unchanged: 0/0
 10825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10826 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10827 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10828 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10829 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10830 ;;Total ram usage:        4 bytes
 10831 ;; Hardware stack levels used:    1
 10832 ;; Hardware stack levels required when called:    7
 10833 ;; This function calls:
 10834 ;;		_I2C_Start
 10835 ;;		_I2C_Stop
 10836 ;;		_I2C_Write_Byte
 10837 ;; This function is called by:
 10838 ;;		_initialize
 10839 ;;		_setMode
 10840 ;;		_setLEDDrive
 10841 ;;		_setProximityGain
 10842 ;;		_setAmbientLightGain
 10843 ;;		_setProxIntLowThresh
 10844 ;;		_setProxIntHighThresh
 10845 ;;		_setLightIntLowThreshold
 10846 ;;		_setLightIntHighThreshold
 10847 ;;		_setGestureEnterThresh
 10848 ;;		_setGestureExitThresh
 10849 ;;		_setGestureGain
 10850 ;;		_setGestureLEDDrive
 10851 ;;		_setGestureWaitTime
 10852 ;;		_setGestureIntEnable
 10853 ;;		_enableGestureSensor
 10854 ;;		_setLEDBoost
 10855 ;;		_setGestureMode
 10856 ;; This function uses a non-reentrant model
 10857 ;;
 10858                           
 10859                           
 10860                           ;psect for function _wireWriteDataByte
 10861  0A62                     _wireWriteDataByte:	
 10862                           
 10863                           ;incstack = 0
 10864                           ; Regs used in _wireWriteDataByte: [wreg+status,2+status,0+pclath+cstack]
 10865                           ;wireWriteDataByte@reg stored from wreg
 10866  0A62  0020               	movlb	0	; select bank0
 10867  0A63  00A9               	movwf	wireWriteDataByte@reg
 10868                           
 10869                           ;APDS9960.c: 871: int wireWriteDataByte(unsigned char reg, unsigned char val);APDS9960.c
      +                          : 872: {;APDS9960.c: 882:     I2C_Start();
 10870  0A64  3188  20A3  318A   	fcall	_I2C_Start
 10871                           
 10872                           ;APDS9960.c: 883:     I2C_Write_Byte((0x39 << 1 )| 0x00);
 10873  0A67  3072               	movlw	114
 10874  0A68  318A  227D  318A   	fcall	_I2C_Write_Byte
 10875                           
 10876                           ;APDS9960.c: 884:     I2C_Write_Byte(reg);
 10877  0A6B  0020               	movlb	0	; select bank0
 10878  0A6C  0829               	movf	wireWriteDataByte@reg,w
 10879  0A6D  318A  227D  318A   	fcall	_I2C_Write_Byte
 10880                           
 10881                           ;APDS9960.c: 885:     I2C_Write_Byte(val);
 10882  0A70  0020               	movlb	0	; select bank0
 10883  0A71  0826               	movf	wireWriteDataByte@val,w
 10884  0A72  318A  227D  318A   	fcall	_I2C_Write_Byte
 10885                           
 10886                           ;APDS9960.c: 886:     I2C_Stop();
 10887  0A75  3188  20A9         	fcall	_I2C_Stop
 10888                           
 10889                           ;APDS9960.c: 889:     return 1;
 10890  0A77  3001               	movlw	1
 10891  0A78  0020               	movlb	0	; select bank0
 10892  0A79  00A6               	movwf	?_wireWriteDataByte
 10893  0A7A  3000               	movlw	0
 10894  0A7B  00A7               	movwf	?_wireWriteDataByte+1
 10895  0A7C  0008               	return
 10896  0A7D                     __end_of_wireWriteDataByte:	
 10897                           
 10898                           	psect	text31
 10899  094E                     __ptext31:	
 10900 ;; *************** function _getMode *****************
 10901 ;; Defined at:
 10902 ;;		line 159 in file "APDS9960.c"
 10903 ;; Parameters:    Size  Location     Type
 10904 ;;		None
 10905 ;; Auto vars:     Size  Location     Type
 10906 ;;  enable_value    1   10[BANK0 ] unsigned char 
 10907 ;; Return value:  Size  Location     Type
 10908 ;;                  1    wreg      unsigned char 
 10909 ;; Registers used:
 10910 ;;		wreg, status,2, status,0, pclath, cstack
 10911 ;; Tracked objects:
 10912 ;;		On entry : 0/0
 10913 ;;		On exit  : 0/0
 10914 ;;		Unchanged: 0/0
 10915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10917 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10918 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10919 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10920 ;;Total ram usage:        2 bytes
 10921 ;; Hardware stack levels used:    1
 10922 ;; Hardware stack levels required when called:    8
 10923 ;; This function calls:
 10924 ;;		_wireReadDataByte
 10925 ;; This function is called by:
 10926 ;;		_setMode
 10927 ;;		_readGesture
 10928 ;; This function uses a non-reentrant model
 10929 ;;
 10930                           
 10931                           
 10932                           ;psect for function _getMode
 10933  094E                     _getMode:	
 10934                           
 10935                           ;APDS9960.c: 161:     uint8_t enable_value;;APDS9960.c: 164:     enable_value = wireRead
      +                          DataByte(0x80);
 10936                           
 10937                           ;incstack = 0
 10938                           ; Regs used in _getMode: [wreg+status,2+status,0+pclath+cstack]
 10939  094E  3080               	movlw	128
 10940  094F  318A  22F1         	fcall	_wireReadDataByte
 10941  0951  0020               	movlb	0	; select bank0
 10942  0952  00A9               	movwf	??_getMode
 10943  0953  0829               	movf	??_getMode,w
 10944  0954  00AA               	movwf	getMode@enable_value
 10945                           
 10946                           ;APDS9960.c: 166:     return enable_value;
 10947  0955  082A               	movf	getMode@enable_value,w
 10948  0956  0008               	return
 10949  0957                     __end_of_getMode:	
 10950                           
 10951                           	psect	text32
 10952  0AF1                     __ptext32:	
 10953 ;; *************** function _wireReadDataByte *****************
 10954 ;; Defined at:
 10955 ;;		line 893 in file "APDS9960.c"
 10956 ;; Parameters:    Size  Location     Type
 10957 ;;  reg             1    wreg     unsigned char 
 10958 ;; Auto vars:     Size  Location     Type
 10959 ;;  reg             1    7[BANK0 ] unsigned char 
 10960 ;;  val             1    8[BANK0 ] unsigned char 
 10961 ;; Return value:  Size  Location     Type
 10962 ;;                  1    wreg      unsigned char 
 10963 ;; Registers used:
 10964 ;;		wreg, status,2, status,0, pclath, cstack
 10965 ;; Tracked objects:
 10966 ;;		On entry : 0/0
 10967 ;;		On exit  : 0/0
 10968 ;;		Unchanged: 0/0
 10969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10970 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10971 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10972 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10973 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10974 ;;Total ram usage:        3 bytes
 10975 ;; Hardware stack levels used:    1
 10976 ;; Hardware stack levels required when called:    7
 10977 ;; This function calls:
 10978 ;;		_I2C_ReStart
 10979 ;;		_I2C_Read_Byte
 10980 ;;		_I2C_Send_NACK
 10981 ;;		_I2C_Start
 10982 ;;		_I2C_Stop
 10983 ;;		_I2C_Write_Byte
 10984 ;; This function is called by:
 10985 ;;		_initialize
 10986 ;;		_getMode
 10987 ;;		_setLEDDrive
 10988 ;;		_setProximityGain
 10989 ;;		_setAmbientLightGain
 10990 ;;		_setGestureGain
 10991 ;;		_setGestureLEDDrive
 10992 ;;		_setGestureWaitTime
 10993 ;;		_setGestureIntEnable
 10994 ;;		_setLEDBoost
 10995 ;;		_setGestureMode
 10996 ;;		_isGestureAvailable
 10997 ;;		_readGesture
 10998 ;; This function uses a non-reentrant model
 10999 ;;
 11000                           
 11001                           
 11002                           ;psect for function _wireReadDataByte
 11003  0AF1                     _wireReadDataByte:	
 11004                           
 11005                           ;incstack = 0
 11006                           ; Regs used in _wireReadDataByte: [wreg+status,2+status,0+pclath+cstack]
 11007                           ;wireReadDataByte@reg stored from wreg
 11008  0AF1  0020               	movlb	0	; select bank0
 11009  0AF2  00A7               	movwf	wireReadDataByte@reg
 11010                           
 11011                           ;APDS9960.c: 893:  unsigned char wireReadDataByte(unsigned char reg);APDS9960.c: 894: {;
      +                          APDS9960.c: 908:     unsigned char val;;APDS9960.c: 909:     I2C_Start();
 11012  0AF3  3188  20A3  318A   	fcall	_I2C_Start
 11013                           
 11014                           ;APDS9960.c: 910:     I2C_Write_Byte((0x39 << 1 )| 0x00);
 11015  0AF6  3072               	movlw	114
 11016  0AF7  318A  227D  318A   	fcall	_I2C_Write_Byte
 11017                           
 11018                           ;APDS9960.c: 911:     I2C_Write_Byte(reg);
 11019  0AFA  0020               	movlb	0	; select bank0
 11020  0AFB  0827               	movf	wireReadDataByte@reg,w
 11021  0AFC  318A  227D  318A   	fcall	_I2C_Write_Byte
 11022                           
 11023                           ;APDS9960.c: 912:     I2C_ReStart();
 11024  0AFF  3188  2094  318A   	fcall	_I2C_ReStart
 11025                           
 11026                           ;APDS9960.c: 914:     I2C_Write_Byte((0x39 << 1) | 0x01);
 11027  0B02  3073               	movlw	115
 11028  0B03  318A  227D  318A   	fcall	_I2C_Write_Byte
 11029                           
 11030                           ;APDS9960.c: 915:     val=I2C_Read_Byte();
 11031  0B06  3189  2161  318A   	fcall	_I2C_Read_Byte
 11032  0B09  0020               	movlb	0	; select bank0
 11033  0B0A  00A6               	movwf	??_wireReadDataByte
 11034  0B0B  0826               	movf	??_wireReadDataByte,w
 11035  0B0C  00A8               	movwf	wireReadDataByte@val
 11036                           
 11037                           ;APDS9960.c: 916:     I2C_Send_NACK();
 11038  0B0D  3188  209D  318A   	fcall	_I2C_Send_NACK
 11039                           
 11040                           ;APDS9960.c: 917:     I2C_Stop();
 11041  0B10  3188  20A9         	fcall	_I2C_Stop
 11042                           
 11043                           ;APDS9960.c: 919:     return val;
 11044  0B12  0020               	movlb	0	; select bank0
 11045  0B13  0828               	movf	wireReadDataByte@val,w
 11046  0B14  0008               	return
 11047  0B15                     __end_of_wireReadDataByte:	
 11048                           
 11049                           	psect	text33
 11050  0A7D                     __ptext33:	
 11051 ;; *************** function _I2C_Write_Byte *****************
 11052 ;; Defined at:
 11053 ;;		line 75 in file "i2c.c"
 11054 ;; Parameters:    Size  Location     Type
 11055 ;;  Byte            1    wreg     unsigned char 
 11056 ;; Auto vars:     Size  Location     Type
 11057 ;;  Byte            1    3[BANK0 ] unsigned char 
 11058 ;;  count           2    4[BANK0 ] unsigned int 
 11059 ;; Return value:  Size  Location     Type
 11060 ;;                  1    wreg      void 
 11061 ;; Registers used:
 11062 ;;		wreg, status,2, status,0, pclath, cstack
 11063 ;; Tracked objects:
 11064 ;;		On entry : 0/0
 11065 ;;		On exit  : 0/0
 11066 ;;		Unchanged: 0/0
 11067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11068 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11069 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11070 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11071 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11072 ;;Total ram usage:        5 bytes
 11073 ;; Hardware stack levels used:    1
 11074 ;; Hardware stack levels required when called:    6
 11075 ;; This function calls:
 11076 ;;		_i2c1_driver_TXData
 11077 ;; This function is called by:
 11078 ;;		_wireReadDataBlock
 11079 ;;		_wireWriteDataByte
 11080 ;;		_wireReadDataByte
 11081 ;; This function uses a non-reentrant model
 11082 ;;
 11083                           
 11084                           
 11085                           ;psect for function _I2C_Write_Byte
 11086  0A7D                     _I2C_Write_Byte:	
 11087                           
 11088                           ;incstack = 0
 11089                           ; Regs used in _I2C_Write_Byte: [wreg+status,2+status,0+pclath+cstack]
 11090                           ;I2C_Write_Byte@Byte stored from wreg
 11091  0A7D  0020               	movlb	0	; select bank0
 11092  0A7E  00A3               	movwf	I2C_Write_Byte@Byte
 11093                           
 11094                           ;i2c.c: 75: void I2C_Write_Byte(unsigned char Byte);i2c.c: 76: {;i2c.c: 80:     i2c1_dri
      +                          ver_TXData(Byte);
 11095  0A7F  0823               	movf	I2C_Write_Byte@Byte,w
 11096  0A80  3188  20E8  318A   	fcall	_i2c1_driver_TXData
 11097                           
 11098                           ;i2c.c: 83:     unsigned int count = 0;
 11099  0A83  0020               	movlb	0	; select bank0
 11100  0A84  01A4               	clrf	I2C_Write_Byte@count
 11101  0A85  01A5               	clrf	I2C_Write_Byte@count+1
 11102  0A86                     l1231:	
 11103                           ;i2c.c: 84:     while(SSP1CON2bits.ACKSTAT);
 11104                           
 11105  0A86  0024               	movlb	4	; select bank4
 11106  0A87  1B16               	btfsc	22,6	;volatile
 11107  0A88  2A86               	goto	l1231
 11108  0A89                     l5745:	
 11109  0A89  0020               	movlb	0	; select bank0
 11110  0A8A  0825               	movf	I2C_Write_Byte@count+1,w
 11111  0A8B  00A2               	movwf	??_I2C_Write_Byte+1
 11112  0A8C  0824               	movf	I2C_Write_Byte@count,w
 11113  0A8D  00A1               	movwf	??_I2C_Write_Byte
 11114  0A8E  0AA4               	incf	I2C_Write_Byte@count,f
 11115  0A8F  1903               	skipnz
 11116  0A90  0AA5               	incf	I2C_Write_Byte@count+1,f
 11117  0A91  3000               	movlw	0
 11118  0A92  0222               	subwf	??_I2C_Write_Byte+1,w
 11119  0A93  3005               	movlw	5
 11120  0A94  1903               	skipnz
 11121  0A95  0221               	subwf	??_I2C_Write_Byte,w
 11122  0A96  1803               	btfsc	3,0
 11123  0A97  0008               	return
 11124  0A98  2A89               	goto	l5745
 11125  0A99                     __end_of_I2C_Write_Byte:	
 11126                           
 11127                           	psect	text34
 11128  08E8                     __ptext34:	
 11129 ;; *************** function _i2c1_driver_TXData *****************
 11130 ;; Defined at:
 11131 ;;		line 186 in file "mcc_generated_files/i2c1_driver.c"
 11132 ;; Parameters:    Size  Location     Type
 11133 ;;  d               1    wreg     unsigned char 
 11134 ;; Auto vars:     Size  Location     Type
 11135 ;;  d               1    0[BANK0 ] unsigned char 
 11136 ;; Return value:  Size  Location     Type
 11137 ;;                  1    wreg      void 
 11138 ;; Registers used:
 11139 ;;		wreg
 11140 ;; Tracked objects:
 11141 ;;		On entry : 0/0
 11142 ;;		On exit  : 0/0
 11143 ;;		Unchanged: 0/0
 11144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11145 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11146 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11147 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11148 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11149 ;;Total ram usage:        1 bytes
 11150 ;; Hardware stack levels used:    1
 11151 ;; Hardware stack levels required when called:    5
 11152 ;; This function calls:
 11153 ;;		Nothing
 11154 ;; This function is called by:
 11155 ;;		_I2C_Write_Byte
 11156 ;; This function uses a non-reentrant model
 11157 ;;
 11158                           
 11159                           
 11160                           ;psect for function _i2c1_driver_TXData
 11161  08E8                     _i2c1_driver_TXData:	
 11162                           
 11163                           ;incstack = 0
 11164                           ; Regs used in _i2c1_driver_TXData: [wreg]
 11165                           ;i2c1_driver_TXData@d stored from wreg
 11166  08E8  0020               	movlb	0	; select bank0
 11167  08E9  00A0               	movwf	i2c1_driver_TXData@d
 11168                           
 11169                           ;mcc_generated_files/i2c1_driver.c: 186: __attribute__((inline)) void i2c1_driver_TXData
      +                          (char d);mcc_generated_files/i2c1_driver.c: 187: {;mcc_generated_files/i2c1_driver.c: 18
      +                          8:     SSP1BUF = d;
 11170  08EA  0820               	movf	i2c1_driver_TXData@d,w
 11171  08EB  0024               	movlb	4	; select bank4
 11172  08EC  0091               	movwf	17	;volatile
 11173  08ED  0008               	return
 11174  08EE                     __end_of_i2c1_driver_TXData:	
 11175                           
 11176                           	psect	text35
 11177  08A9                     __ptext35:	
 11178 ;; *************** function _I2C_Stop *****************
 11179 ;; Defined at:
 11180 ;;		line 50 in file "i2c.c"
 11181 ;; Parameters:    Size  Location     Type
 11182 ;;		None
 11183 ;; Auto vars:     Size  Location     Type
 11184 ;;		None
 11185 ;; Return value:  Size  Location     Type
 11186 ;;                  1    wreg      void 
 11187 ;; Registers used:
 11188 ;;		status,2, status,0, pclath, cstack
 11189 ;; Tracked objects:
 11190 ;;		On entry : 0/0
 11191 ;;		On exit  : 0/0
 11192 ;;		Unchanged: 0/0
 11193 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11194 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11195 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11196 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11197 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11198 ;;Total ram usage:        0 bytes
 11199 ;; Hardware stack levels used:    1
 11200 ;; Hardware stack levels required when called:    6
 11201 ;; This function calls:
 11202 ;;		_i2c1_driver_stop
 11203 ;; This function is called by:
 11204 ;;		_wireReadDataBlock
 11205 ;;		_wireWriteDataByte
 11206 ;;		_wireReadDataByte
 11207 ;; This function uses a non-reentrant model
 11208 ;;
 11209                           
 11210                           
 11211                           ;psect for function _I2C_Stop
 11212  08A9                     _I2C_Stop:	
 11213                           
 11214                           ;i2c.c: 52:  i2c1_driver_stop();
 11215                           
 11216                           ;incstack = 0
 11217                           ; Regs used in _I2C_Stop: [status,2+status,0+pclath+cstack]
 11218  08A9  3188  20A6         	fcall	_i2c1_driver_stop
 11219  08AB  0008               	return
 11220  08AC                     __end_of_I2C_Stop:	
 11221                           
 11222                           	psect	text36
 11223  08A6                     __ptext36:	
 11224 ;; *************** function _i2c1_driver_stop *****************
 11225 ;; Defined at:
 11226 ;;		line 156 in file "mcc_generated_files/i2c1_driver.c"
 11227 ;; Parameters:    Size  Location     Type
 11228 ;;		None
 11229 ;; Auto vars:     Size  Location     Type
 11230 ;;		None
 11231 ;; Return value:  Size  Location     Type
 11232 ;;                  1    wreg      void 
 11233 ;; Registers used:
 11234 ;;		None
 11235 ;; Tracked objects:
 11236 ;;		On entry : 0/0
 11237 ;;		On exit  : 0/0
 11238 ;;		Unchanged: 0/0
 11239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11240 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11241 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11242 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11243 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11244 ;;Total ram usage:        0 bytes
 11245 ;; Hardware stack levels used:    1
 11246 ;; Hardware stack levels required when called:    5
 11247 ;; This function calls:
 11248 ;;		Nothing
 11249 ;; This function is called by:
 11250 ;;		_I2C_Stop
 11251 ;; This function uses a non-reentrant model
 11252 ;;
 11253                           
 11254                           
 11255                           ;psect for function _i2c1_driver_stop
 11256  08A6                     _i2c1_driver_stop:	
 11257                           
 11258                           ;mcc_generated_files/i2c1_driver.c: 158:     SSP1CON2bits.PEN = 1;
 11259                           
 11260                           ;incstack = 0
 11261                           ; Regs used in _i2c1_driver_stop: []
 11262  08A6  0024               	movlb	4	; select bank4
 11263  08A7  1516               	bsf	22,2	;volatile
 11264  08A8  0008               	return
 11265  08A9                     __end_of_i2c1_driver_stop:	
 11266                           
 11267                           	psect	text37
 11268  08A3                     __ptext37:	
 11269 ;; *************** function _I2C_Start *****************
 11270 ;; Defined at:
 11271 ;;		line 35 in file "i2c.c"
 11272 ;; Parameters:    Size  Location     Type
 11273 ;;		None
 11274 ;; Auto vars:     Size  Location     Type
 11275 ;;		None
 11276 ;; Return value:  Size  Location     Type
 11277 ;;                  1    wreg      void 
 11278 ;; Registers used:
 11279 ;;		status,2, status,0, pclath, cstack
 11280 ;; Tracked objects:
 11281 ;;		On entry : 0/0
 11282 ;;		On exit  : 0/0
 11283 ;;		Unchanged: 0/0
 11284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11285 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11286 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11287 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11288 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11289 ;;Total ram usage:        0 bytes
 11290 ;; Hardware stack levels used:    1
 11291 ;; Hardware stack levels required when called:    6
 11292 ;; This function calls:
 11293 ;;		_i2c1_driver_start
 11294 ;; This function is called by:
 11295 ;;		_wireReadDataBlock
 11296 ;;		_wireWriteDataByte
 11297 ;;		_wireReadDataByte
 11298 ;; This function uses a non-reentrant model
 11299 ;;
 11300                           
 11301                           
 11302                           ;psect for function _I2C_Start
 11303  08A3                     _I2C_Start:	
 11304                           
 11305                           ;i2c.c: 37:  i2c1_driver_start();
 11306                           
 11307                           ;incstack = 0
 11308                           ; Regs used in _I2C_Start: [status,2+status,0+pclath+cstack]
 11309  08A3  3188  20A0         	fcall	_i2c1_driver_start
 11310  08A5  0008               	return
 11311  08A6                     __end_of_I2C_Start:	
 11312                           
 11313                           	psect	text38
 11314  08A0                     __ptext38:	
 11315 ;; *************** function _i2c1_driver_start *****************
 11316 ;; Defined at:
 11317 ;;		line 146 in file "mcc_generated_files/i2c1_driver.c"
 11318 ;; Parameters:    Size  Location     Type
 11319 ;;		None
 11320 ;; Auto vars:     Size  Location     Type
 11321 ;;		None
 11322 ;; Return value:  Size  Location     Type
 11323 ;;                  1    wreg      void 
 11324 ;; Registers used:
 11325 ;;		None
 11326 ;; Tracked objects:
 11327 ;;		On entry : 0/0
 11328 ;;		On exit  : 0/0
 11329 ;;		Unchanged: 0/0
 11330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11331 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11332 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11333 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11334 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11335 ;;Total ram usage:        0 bytes
 11336 ;; Hardware stack levels used:    1
 11337 ;; Hardware stack levels required when called:    5
 11338 ;; This function calls:
 11339 ;;		Nothing
 11340 ;; This function is called by:
 11341 ;;		_I2C_Start
 11342 ;;		_i2c_masterOperation
 11343 ;; This function uses a non-reentrant model
 11344 ;;
 11345                           
 11346                           
 11347                           ;psect for function _i2c1_driver_start
 11348  08A0                     _i2c1_driver_start:	
 11349                           
 11350                           ;mcc_generated_files/i2c1_driver.c: 148:     SSP1CON2bits.SEN = 1;
 11351                           
 11352                           ;incstack = 0
 11353                           ; Regs used in _i2c1_driver_start: []
 11354  08A0  0024               	movlb	4	; select bank4
 11355  08A1  1416               	bsf	22,0	;volatile
 11356  08A2  0008               	return
 11357  08A3                     __end_of_i2c1_driver_start:	
 11358                           
 11359                           	psect	text39
 11360  089D                     __ptext39:	
 11361 ;; *************** function _I2C_Send_NACK *****************
 11362 ;; Defined at:
 11363 ;;		line 66 in file "i2c.c"
 11364 ;; Parameters:    Size  Location     Type
 11365 ;;		None
 11366 ;; Auto vars:     Size  Location     Type
 11367 ;;		None
 11368 ;; Return value:  Size  Location     Type
 11369 ;;                  1    wreg      void 
 11370 ;; Registers used:
 11371 ;;		status,2, status,0, pclath, cstack
 11372 ;; Tracked objects:
 11373 ;;		On entry : 0/0
 11374 ;;		On exit  : 0/0
 11375 ;;		Unchanged: 0/0
 11376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11377 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11378 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11379 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11380 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11381 ;;Total ram usage:        0 bytes
 11382 ;; Hardware stack levels used:    1
 11383 ;; Hardware stack levels required when called:    6
 11384 ;; This function calls:
 11385 ;;		_i2c1_driver_sendNACK
 11386 ;; This function is called by:
 11387 ;;		_wireReadDataBlock
 11388 ;;		_wireReadDataByte
 11389 ;; This function uses a non-reentrant model
 11390 ;;
 11391                           
 11392                           
 11393                           ;psect for function _I2C_Send_NACK
 11394  089D                     _I2C_Send_NACK:	
 11395                           
 11396                           ;i2c.c: 68:     i2c1_driver_sendNACK();
 11397                           
 11398                           ;incstack = 0
 11399                           ; Regs used in _I2C_Send_NACK: [status,2+status,0+pclath+cstack]
 11400  089D  3188  20D4         	fcall	_i2c1_driver_sendNACK
 11401  089F  0008               	return
 11402  08A0                     __end_of_I2C_Send_NACK:	
 11403                           
 11404                           	psect	text40
 11405  08D4                     __ptext40:	
 11406 ;; *************** function _i2c1_driver_sendNACK *****************
 11407 ;; Defined at:
 11408 ;;		line 202 in file "mcc_generated_files/i2c1_driver.c"
 11409 ;; Parameters:    Size  Location     Type
 11410 ;;		None
 11411 ;; Auto vars:     Size  Location     Type
 11412 ;;		None
 11413 ;; Return value:  Size  Location     Type
 11414 ;;                  1    wreg      void 
 11415 ;; Registers used:
 11416 ;;		None
 11417 ;; Tracked objects:
 11418 ;;		On entry : 0/0
 11419 ;;		On exit  : 0/0
 11420 ;;		Unchanged: 0/0
 11421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11423 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11424 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11425 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11426 ;;Total ram usage:        0 bytes
 11427 ;; Hardware stack levels used:    1
 11428 ;; Hardware stack levels required when called:    5
 11429 ;; This function calls:
 11430 ;;		Nothing
 11431 ;; This function is called by:
 11432 ;;		_I2C_Send_NACK
 11433 ;; This function uses a non-reentrant model
 11434 ;;
 11435                           
 11436                           
 11437                           ;psect for function _i2c1_driver_sendNACK
 11438  08D4                     _i2c1_driver_sendNACK:	
 11439                           
 11440                           ;mcc_generated_files/i2c1_driver.c: 204:     SSP1CON2bits.ACKDT = 1;
 11441                           
 11442                           ;incstack = 0
 11443                           ; Regs used in _i2c1_driver_sendNACK: []
 11444  08D4  0024               	movlb	4	; select bank4
 11445  08D5  1696               	bsf	22,5	;volatile
 11446                           
 11447                           ;mcc_generated_files/i2c1_driver.c: 205:     SSP1CON2bits.ACKEN = 1;
 11448  08D6  1616               	bsf	22,4	;volatile
 11449  08D7  0008               	return
 11450  08D8                     __end_of_i2c1_driver_sendNACK:	
 11451                           
 11452                           	psect	text41
 11453  0961                     __ptext41:	
 11454 ;; *************** function _I2C_Read_Byte *****************
 11455 ;; Defined at:
 11456 ;;		line 115 in file "i2c.c"
 11457 ;; Parameters:    Size  Location     Type
 11458 ;;		None
 11459 ;; Auto vars:     Size  Location     Type
 11460 ;;		None
 11461 ;; Return value:  Size  Location     Type
 11462 ;;                  1    wreg      unsigned char 
 11463 ;; Registers used:
 11464 ;;		wreg, status,2, status,0, pclath, cstack
 11465 ;; Tracked objects:
 11466 ;;		On entry : 0/0
 11467 ;;		On exit  : 0/0
 11468 ;;		Unchanged: 0/0
 11469 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11470 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11471 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11472 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11473 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11474 ;;Total ram usage:        0 bytes
 11475 ;; Hardware stack levels used:    1
 11476 ;; Hardware stack levels required when called:    6
 11477 ;; This function calls:
 11478 ;;		_i2c1_driver_getRXData
 11479 ;;		_i2c1_driver_isBufferFull
 11480 ;;		_i2c1_driver_startRX
 11481 ;; This function is called by:
 11482 ;;		_wireReadDataBlock
 11483 ;;		_wireReadDataByte
 11484 ;; This function uses a non-reentrant model
 11485 ;;
 11486                           
 11487                           
 11488                           ;psect for function _I2C_Read_Byte
 11489  0961                     _I2C_Read_Byte:	
 11490                           
 11491                           ;i2c.c: 117:     i2c1_driver_startRX();
 11492                           
 11493                           ;incstack = 0
 11494                           ; Regs used in _I2C_Read_Byte: [wreg+status,2+status,0+pclath+cstack]
 11495  0961  3188  209A  3189   	fcall	_i2c1_driver_startRX
 11496  0964                     l5751:	
 11497                           ;i2c.c: 121:  while (i2c1_driver_isBufferFull() == 0) {
 11498                           
 11499                           
 11500                           ;i2c.c: 121:  while (i2c1_driver_isBufferFull() == 0) {
 11501  0964  3189  210F  3189   	fcall	_i2c1_driver_isBufferFull
 11502  0967  1C03               	btfss	3,0
 11503  0968  2964               	goto	l5751
 11504                           
 11505                           ;i2c.c: 137:   return i2c1_driver_getRXData();
 11506  0969  3188  2097         	fcall	_i2c1_driver_getRXData
 11507  096B  0008               	return
 11508  096C                     __end_of_I2C_Read_Byte:	
 11509                           
 11510                           	psect	text42
 11511  089A                     __ptext42:	
 11512 ;; *************** function _i2c1_driver_startRX *****************
 11513 ;; Defined at:
 11514 ;;		line 166 in file "mcc_generated_files/i2c1_driver.c"
 11515 ;; Parameters:    Size  Location     Type
 11516 ;;		None
 11517 ;; Auto vars:     Size  Location     Type
 11518 ;;		None
 11519 ;; Return value:  Size  Location     Type
 11520 ;;                  1    wreg      void 
 11521 ;; Registers used:
 11522 ;;		None
 11523 ;; Tracked objects:
 11524 ;;		On entry : 0/0
 11525 ;;		On exit  : 0/0
 11526 ;;		Unchanged: 0/0
 11527 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11528 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11529 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11530 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11531 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11532 ;;Total ram usage:        0 bytes
 11533 ;; Hardware stack levels used:    1
 11534 ;; Hardware stack levels required when called:    5
 11535 ;; This function calls:
 11536 ;;		Nothing
 11537 ;; This function is called by:
 11538 ;;		_I2C_Read_Byte
 11539 ;; This function uses a non-reentrant model
 11540 ;;
 11541                           
 11542                           
 11543                           ;psect for function _i2c1_driver_startRX
 11544  089A                     _i2c1_driver_startRX:	
 11545                           
 11546                           ;mcc_generated_files/i2c1_driver.c: 168:     SSP1CON2bits.RCEN = 1;
 11547                           
 11548                           ;incstack = 0
 11549                           ; Regs used in _i2c1_driver_startRX: []
 11550  089A  0024               	movlb	4	; select bank4
 11551  089B  1596               	bsf	22,3	;volatile
 11552  089C  0008               	return
 11553  089D                     __end_of_i2c1_driver_startRX:	
 11554                           
 11555                           	psect	text43
 11556  090F                     __ptext43:	
 11557 ;; *************** function _i2c1_driver_isBufferFull *****************
 11558 ;; Defined at:
 11559 ;;		line 213 in file "mcc_generated_files/i2c1_driver.c"
 11560 ;; Parameters:    Size  Location     Type
 11561 ;;		None
 11562 ;; Auto vars:     Size  Location     Type
 11563 ;;		None
 11564 ;; Return value:  Size  Location     Type
 11565 ;;		None               void
 11566 ;; Registers used:
 11567 ;;		wreg, status,2, status,0
 11568 ;; Tracked objects:
 11569 ;;		On entry : 0/0
 11570 ;;		On exit  : 0/0
 11571 ;;		Unchanged: 0/0
 11572 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11573 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11574 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11575 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11576 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11577 ;;Total ram usage:        1 bytes
 11578 ;; Hardware stack levels used:    1
 11579 ;; Hardware stack levels required when called:    5
 11580 ;; This function calls:
 11581 ;;		Nothing
 11582 ;; This function is called by:
 11583 ;;		_I2C_Read_Byte
 11584 ;; This function uses a non-reentrant model
 11585 ;;
 11586                           
 11587                           
 11588                           ;psect for function _i2c1_driver_isBufferFull
 11589  090F                     _i2c1_driver_isBufferFull:	
 11590                           
 11591                           ;mcc_generated_files/i2c1_driver.c: 215:     return SSP1STATbits.BF;
 11592                           
 11593                           ;incstack = 0
 11594                           ; Regs used in _i2c1_driver_isBufferFull: [wreg+status,2+status,0]
 11595  090F  0024               	movlb	4	; select bank4
 11596  0910  0814               	movf	20,w	;volatile
 11597  0911  3901               	andlw	1
 11598  0912  0020               	movlb	0	; select bank0
 11599  0913  00A0               	movwf	??_i2c1_driver_isBufferFull
 11600  0914  0C20               	rrf	??_i2c1_driver_isBufferFull,w
 11601  0915  0008               	return
 11602  0916                     __end_of_i2c1_driver_isBufferFull:	
 11603                           
 11604                           	psect	text44
 11605  0897                     __ptext44:	
 11606 ;; *************** function _i2c1_driver_getRXData *****************
 11607 ;; Defined at:
 11608 ;;		line 171 in file "mcc_generated_files/i2c1_driver.c"
 11609 ;; Parameters:    Size  Location     Type
 11610 ;;		None
 11611 ;; Auto vars:     Size  Location     Type
 11612 ;;		None
 11613 ;; Return value:  Size  Location     Type
 11614 ;;                  1    wreg      unsigned char 
 11615 ;; Registers used:
 11616 ;;		wreg
 11617 ;; Tracked objects:
 11618 ;;		On entry : 0/0
 11619 ;;		On exit  : 0/0
 11620 ;;		Unchanged: 0/0
 11621 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11622 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11623 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11624 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11625 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11626 ;;Total ram usage:        0 bytes
 11627 ;; Hardware stack levels used:    1
 11628 ;; Hardware stack levels required when called:    5
 11629 ;; This function calls:
 11630 ;;		Nothing
 11631 ;; This function is called by:
 11632 ;;		_I2C_Read_Byte
 11633 ;; This function uses a non-reentrant model
 11634 ;;
 11635                           
 11636                           
 11637                           ;psect for function _i2c1_driver_getRXData
 11638  0897                     _i2c1_driver_getRXData:	
 11639                           
 11640                           ;mcc_generated_files/i2c1_driver.c: 173:     return SSP1BUF;
 11641                           
 11642                           ;incstack = 0
 11643                           ; Regs used in _i2c1_driver_getRXData: [wreg]
 11644  0897  0024               	movlb	4	; select bank4
 11645  0898  0811               	movf	17,w	;volatile
 11646  0899  0008               	return
 11647  089A                     __end_of_i2c1_driver_getRXData:	
 11648                           
 11649                           	psect	text45
 11650  0894                     __ptext45:	
 11651 ;; *************** function _I2C_ReStart *****************
 11652 ;; Defined at:
 11653 ;;		line 43 in file "i2c.c"
 11654 ;; Parameters:    Size  Location     Type
 11655 ;;		None
 11656 ;; Auto vars:     Size  Location     Type
 11657 ;;		None
 11658 ;; Return value:  Size  Location     Type
 11659 ;;                  1    wreg      void 
 11660 ;; Registers used:
 11661 ;;		status,2, status,0, pclath, cstack
 11662 ;; Tracked objects:
 11663 ;;		On entry : 0/0
 11664 ;;		On exit  : 0/0
 11665 ;;		Unchanged: 0/0
 11666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11667 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11668 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11669 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11670 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11671 ;;Total ram usage:        0 bytes
 11672 ;; Hardware stack levels used:    1
 11673 ;; Hardware stack levels required when called:    6
 11674 ;; This function calls:
 11675 ;;		_i2c1_driver_restart
 11676 ;; This function is called by:
 11677 ;;		_wireReadDataBlock
 11678 ;;		_wireReadDataByte
 11679 ;; This function uses a non-reentrant model
 11680 ;;
 11681                           
 11682                           
 11683                           ;psect for function _I2C_ReStart
 11684  0894                     _I2C_ReStart:	
 11685                           
 11686                           ;i2c.c: 45:  i2c1_driver_restart();
 11687                           
 11688                           ;incstack = 0
 11689                           ; Regs used in _I2C_ReStart: [status,2+status,0+pclath+cstack]
 11690  0894  3188  2091         	fcall	_i2c1_driver_restart
 11691  0896  0008               	return
 11692  0897                     __end_of_I2C_ReStart:	
 11693                           
 11694                           	psect	text46
 11695  0891                     __ptext46:	
 11696 ;; *************** function _i2c1_driver_restart *****************
 11697 ;; Defined at:
 11698 ;;		line 151 in file "mcc_generated_files/i2c1_driver.c"
 11699 ;; Parameters:    Size  Location     Type
 11700 ;;		None
 11701 ;; Auto vars:     Size  Location     Type
 11702 ;;		None
 11703 ;; Return value:  Size  Location     Type
 11704 ;;                  1    wreg      void 
 11705 ;; Registers used:
 11706 ;;		None
 11707 ;; Tracked objects:
 11708 ;;		On entry : 0/0
 11709 ;;		On exit  : 0/0
 11710 ;;		Unchanged: 0/0
 11711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11712 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11713 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11714 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11715 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11716 ;;Total ram usage:        0 bytes
 11717 ;; Hardware stack levels used:    1
 11718 ;; Hardware stack levels required when called:    5
 11719 ;; This function calls:
 11720 ;;		Nothing
 11721 ;; This function is called by:
 11722 ;;		_I2C_ReStart
 11723 ;; This function uses a non-reentrant model
 11724 ;;
 11725                           
 11726                           
 11727                           ;psect for function _i2c1_driver_restart
 11728  0891                     _i2c1_driver_restart:	
 11729                           
 11730                           ;mcc_generated_files/i2c1_driver.c: 153:     SSP1CON2bits.RSEN = 1;
 11731                           
 11732                           ;incstack = 0
 11733                           ; Regs used in _i2c1_driver_restart: []
 11734  0891  0024               	movlb	4	; select bank4
 11735  0892  1496               	bsf	22,1	;volatile
 11736  0893  0008               	return
 11737  0894                     __end_of_i2c1_driver_restart:	
 11738                           
 11739                           	psect	text47
 11740  0A32                     __ptext47:	
 11741 ;; *************** function _SYSTEM_Initialize *****************
 11742 ;; Defined at:
 11743 ;;		line 50 in file "mcc_generated_files/mcc.c"
 11744 ;; Parameters:    Size  Location     Type
 11745 ;;		None
 11746 ;; Auto vars:     Size  Location     Type
 11747 ;;		None
 11748 ;; Return value:  Size  Location     Type
 11749 ;;                  1    wreg      void 
 11750 ;; Registers used:
 11751 ;;		wreg, status,2, status,0, pclath, cstack
 11752 ;; Tracked objects:
 11753 ;;		On entry : 0/0
 11754 ;;		On exit  : 0/0
 11755 ;;		Unchanged: 0/0
 11756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11757 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11758 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11759 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11760 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11761 ;;Total ram usage:        0 bytes
 11762 ;; Hardware stack levels used:    1
 11763 ;; Hardware stack levels required when called:    6
 11764 ;; This function calls:
 11765 ;;		_ADC_Initialize
 11766 ;;		_OSCILLATOR_Initialize
 11767 ;;		_PIN_MANAGER_Initialize
 11768 ;;		_PMD_Initialize
 11769 ;;		_PWM1_Initialize
 11770 ;;		_SPI2_Initialize
 11771 ;;		_TMR2_Initialize
 11772 ;;		_WDT_Initialize
 11773 ;; This function is called by:
 11774 ;;		_main
 11775 ;; This function uses a non-reentrant model
 11776 ;;
 11777                           
 11778                           
 11779                           ;psect for function _SYSTEM_Initialize
 11780  0A32                     _SYSTEM_Initialize:	
 11781                           
 11782                           ;mcc_generated_files/mcc.c: 53:     PMD_Initialize();
 11783                           
 11784                           ;incstack = 0
 11785                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
 11786  0A32  3189  2136  318A   	fcall	_PMD_Initialize
 11787                           
 11788                           ;mcc_generated_files/mcc.c: 54:     PIN_MANAGER_Initialize();
 11789  0A35  318D  254B  318A   	fcall	_PIN_MANAGER_Initialize
 11790                           
 11791                           ;mcc_generated_files/mcc.c: 55:     OSCILLATOR_Initialize();
 11792  0A38  3189  212E  318A   	fcall	_OSCILLATOR_Initialize
 11793                           
 11794                           ;mcc_generated_files/mcc.c: 56:     WDT_Initialize();
 11795  0A3B  3188  20D0  318A   	fcall	_WDT_Initialize
 11796                           
 11797                           ;mcc_generated_files/mcc.c: 57:     SPI2_Initialize();
 11798  0A3E  3189  2108  318A   	fcall	_SPI2_Initialize
 11799                           
 11800                           ;mcc_generated_files/mcc.c: 58:     PWM1_Initialize();
 11801  0A41  3189  216C  318A   	fcall	_PWM1_Initialize
 11802                           
 11803                           ;mcc_generated_files/mcc.c: 59:     ADC_Initialize();
 11804  0A44  3189  2126  318A   	fcall	_ADC_Initialize
 11805                           
 11806                           ;mcc_generated_files/mcc.c: 60:     TMR2_Initialize();
 11807  0A47  3189  213E         	fcall	_TMR2_Initialize
 11808  0A49  0008               	return
 11809  0A4A                     __end_of_SYSTEM_Initialize:	
 11810                           
 11811                           	psect	text48
 11812  08D0                     __ptext48:	
 11813 ;; *************** function _WDT_Initialize *****************
 11814 ;; Defined at:
 11815 ;;		line 77 in file "mcc_generated_files/mcc.c"
 11816 ;; Parameters:    Size  Location     Type
 11817 ;;		None
 11818 ;; Auto vars:     Size  Location     Type
 11819 ;;		None
 11820 ;; Return value:  Size  Location     Type
 11821 ;;                  1    wreg      void 
 11822 ;; Registers used:
 11823 ;;		wreg
 11824 ;; Tracked objects:
 11825 ;;		On entry : 0/0
 11826 ;;		On exit  : 0/0
 11827 ;;		Unchanged: 0/0
 11828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11829 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11830 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11831 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11832 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11833 ;;Total ram usage:        0 bytes
 11834 ;; Hardware stack levels used:    1
 11835 ;; Hardware stack levels required when called:    5
 11836 ;; This function calls:
 11837 ;;		Nothing
 11838 ;; This function is called by:
 11839 ;;		_SYSTEM_Initialize
 11840 ;; This function uses a non-reentrant model
 11841 ;;
 11842                           
 11843                           
 11844                           ;psect for function _WDT_Initialize
 11845  08D0                     _WDT_Initialize:	
 11846                           
 11847                           ;mcc_generated_files/mcc.c: 80:     WDTCON = 0x18;
 11848                           
 11849                           ;incstack = 0
 11850                           ; Regs used in _WDT_Initialize: [wreg]
 11851  08D0  3018               	movlw	24
 11852  08D1  0021               	movlb	1	; select bank1
 11853  08D2  0097               	movwf	23	;volatile
 11854  08D3  0008               	return
 11855  08D4                     __end_of_WDT_Initialize:	
 11856                           
 11857                           	psect	text49
 11858  093E                     __ptext49:	
 11859 ;; *************** function _TMR2_Initialize *****************
 11860 ;; Defined at:
 11861 ;;		line 62 in file "mcc_generated_files/tmr2.c"
 11862 ;; Parameters:    Size  Location     Type
 11863 ;;		None
 11864 ;; Auto vars:     Size  Location     Type
 11865 ;;		None
 11866 ;; Return value:  Size  Location     Type
 11867 ;;                  1    wreg      void 
 11868 ;; Registers used:
 11869 ;;		wreg, status,2
 11870 ;; Tracked objects:
 11871 ;;		On entry : 0/0
 11872 ;;		On exit  : 0/0
 11873 ;;		Unchanged: 0/0
 11874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11875 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11876 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11877 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11878 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11879 ;;Total ram usage:        0 bytes
 11880 ;; Hardware stack levels used:    1
 11881 ;; Hardware stack levels required when called:    5
 11882 ;; This function calls:
 11883 ;;		Nothing
 11884 ;; This function is called by:
 11885 ;;		_SYSTEM_Initialize
 11886 ;; This function uses a non-reentrant model
 11887 ;;
 11888                           
 11889                           
 11890                           ;psect for function _TMR2_Initialize
 11891  093E                     _TMR2_Initialize:	
 11892                           
 11893                           ;mcc_generated_files/tmr2.c: 67:     PR2 = 0xFF;
 11894                           
 11895                           ;incstack = 0
 11896                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
 11897  093E  30FF               	movlw	255
 11898  093F  0020               	movlb	0	; select bank0
 11899  0940  009E               	movwf	30	;volatile
 11900                           
 11901                           ;mcc_generated_files/tmr2.c: 70:     TMR2 = 0x00;
 11902  0941  019D               	clrf	29	;volatile
 11903                           
 11904                           ;mcc_generated_files/tmr2.c: 73:     PIR1bits.TMR2IF = 0;
 11905  0942  1091               	bcf	17,1	;volatile
 11906                           
 11907                           ;mcc_generated_files/tmr2.c: 76:     T2CON = 0x04;
 11908  0943  3004               	movlw	4
 11909  0944  009F               	movwf	31	;volatile
 11910  0945  0008               	return
 11911  0946                     __end_of_TMR2_Initialize:	
 11912                           
 11913                           	psect	text50
 11914  0908                     __ptext50:	
 11915 ;; *************** function _SPI2_Initialize *****************
 11916 ;; Defined at:
 11917 ;;		line 65 in file "mcc_generated_files/spi2.c"
 11918 ;; Parameters:    Size  Location     Type
 11919 ;;		None
 11920 ;; Auto vars:     Size  Location     Type
 11921 ;;		None
 11922 ;; Return value:  Size  Location     Type
 11923 ;;                  1    wreg      void 
 11924 ;; Registers used:
 11925 ;;		wreg, status,2
 11926 ;; Tracked objects:
 11927 ;;		On entry : 0/0
 11928 ;;		On exit  : 0/0
 11929 ;;		Unchanged: 0/0
 11930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11931 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11932 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11933 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11934 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11935 ;;Total ram usage:        0 bytes
 11936 ;; Hardware stack levels used:    1
 11937 ;; Hardware stack levels required when called:    5
 11938 ;; This function calls:
 11939 ;;		Nothing
 11940 ;; This function is called by:
 11941 ;;		_SYSTEM_Initialize
 11942 ;; This function uses a non-reentrant model
 11943 ;;
 11944                           
 11945                           
 11946                           ;psect for function _SPI2_Initialize
 11947  0908                     _SPI2_Initialize:	
 11948                           
 11949                           ;mcc_generated_files/spi2.c: 70:     SSP2STAT = 0x80;
 11950                           
 11951                           ;incstack = 0
 11952                           ; Regs used in _SPI2_Initialize: [wreg+status,2]
 11953  0908  3080               	movlw	128
 11954  0909  0024               	movlb	4	; select bank4
 11955  090A  009C               	movwf	28	;volatile
 11956                           
 11957                           ;mcc_generated_files/spi2.c: 73:     SSP2CON1 = 0x31;
 11958  090B  3031               	movlw	49
 11959  090C  009D               	movwf	29	;volatile
 11960                           
 11961                           ;mcc_generated_files/spi2.c: 76:     SSP2ADD = 0x00;
 11962  090D  019A               	clrf	26	;volatile
 11963  090E  0008               	return
 11964  090F                     __end_of_SPI2_Initialize:	
 11965                           
 11966                           	psect	text51
 11967  096C                     __ptext51:	
 11968 ;; *************** function _PWM1_Initialize *****************
 11969 ;; Defined at:
 11970 ;;		line 64 in file "mcc_generated_files/pwm1.c"
 11971 ;; Parameters:    Size  Location     Type
 11972 ;;		None
 11973 ;; Auto vars:     Size  Location     Type
 11974 ;;		None
 11975 ;; Return value:  Size  Location     Type
 11976 ;;                  1    wreg      void 
 11977 ;; Registers used:
 11978 ;;		wreg, status,2, status,0
 11979 ;; Tracked objects:
 11980 ;;		On entry : 0/0
 11981 ;;		On exit  : 0/0
 11982 ;;		Unchanged: 0/0
 11983 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11984 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11985 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11986 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11987 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11988 ;;Total ram usage:        0 bytes
 11989 ;; Hardware stack levels used:    1
 11990 ;; Hardware stack levels required when called:    5
 11991 ;; This function calls:
 11992 ;;		Nothing
 11993 ;; This function is called by:
 11994 ;;		_SYSTEM_Initialize
 11995 ;; This function uses a non-reentrant model
 11996 ;;
 11997                           
 11998                           
 11999                           ;psect for function _PWM1_Initialize
 12000  096C                     _PWM1_Initialize:	
 12001                           
 12002                           ;mcc_generated_files/pwm1.c: 69:  CCP1CON = 0x8F;
 12003                           
 12004                           ;incstack = 0
 12005                           ; Regs used in _PWM1_Initialize: [wreg+status,2+status,0]
 12006  096C  308F               	movlw	143
 12007  096D  0025               	movlb	5	; select bank5
 12008  096E  0093               	movwf	19	;volatile
 12009                           
 12010                           ;mcc_generated_files/pwm1.c: 72:  CCPR1H = 0x01;
 12011  096F  3001               	movlw	1
 12012  0970  0092               	movwf	18	;volatile
 12013                           
 12014                           ;mcc_generated_files/pwm1.c: 75:  CCPR1L = 0x32;
 12015  0971  3032               	movlw	50
 12016  0972  0091               	movwf	17	;volatile
 12017                           
 12018                           ;mcc_generated_files/pwm1.c: 78:  CCPTMRSbits.C1TSEL = 0x1;
 12019  0973  081F               	movf	31,w	;volatile
 12020  0974  39FC               	andlw	-4
 12021  0975  3801               	iorlw	1
 12022  0976  009F               	movwf	31	;volatile
 12023  0977  0008               	return
 12024  0978                     __end_of_PWM1_Initialize:	
 12025                           
 12026                           	psect	text52
 12027  0936                     __ptext52:	
 12028 ;; *************** function _PMD_Initialize *****************
 12029 ;; Defined at:
 12030 ;;		line 83 in file "mcc_generated_files/mcc.c"
 12031 ;; Parameters:    Size  Location     Type
 12032 ;;		None
 12033 ;; Auto vars:     Size  Location     Type
 12034 ;;		None
 12035 ;; Return value:  Size  Location     Type
 12036 ;;                  1    wreg      void 
 12037 ;; Registers used:
 12038 ;;		status,2
 12039 ;; Tracked objects:
 12040 ;;		On entry : 0/0
 12041 ;;		On exit  : 0/0
 12042 ;;		Unchanged: 0/0
 12043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12044 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12045 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12046 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12047 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12048 ;;Total ram usage:        0 bytes
 12049 ;; Hardware stack levels used:    1
 12050 ;; Hardware stack levels required when called:    5
 12051 ;; This function calls:
 12052 ;;		Nothing
 12053 ;; This function is called by:
 12054 ;;		_SYSTEM_Initialize
 12055 ;; This function uses a non-reentrant model
 12056 ;;
 12057                           
 12058                           
 12059                           ;psect for function _PMD_Initialize
 12060  0936                     _PMD_Initialize:	
 12061                           
 12062                           ;mcc_generated_files/mcc.c: 86:     PMD0 = 0x00;
 12063                           
 12064                           ;incstack = 0
 12065                           ; Regs used in _PMD_Initialize: [status,2]
 12066  0936  0032               	movlb	18	; select bank18
 12067  0937  0191               	clrf	17	;volatile
 12068                           
 12069                           ;mcc_generated_files/mcc.c: 88:     PMD1 = 0x00;
 12070  0938  0192               	clrf	18	;volatile
 12071                           
 12072                           ;mcc_generated_files/mcc.c: 90:     PMD2 = 0x00;
 12073  0939  0193               	clrf	19	;volatile
 12074                           
 12075                           ;mcc_generated_files/mcc.c: 92:     PMD3 = 0x00;
 12076  093A  0194               	clrf	20	;volatile
 12077                           
 12078                           ;mcc_generated_files/mcc.c: 94:     PMD4 = 0x00;
 12079  093B  0195               	clrf	21	;volatile
 12080                           
 12081                           ;mcc_generated_files/mcc.c: 96:     PMD5 = 0x00;
 12082  093C  0196               	clrf	22	;volatile
 12083  093D  0008               	return
 12084  093E                     __end_of_PMD_Initialize:	
 12085                           
 12086                           	psect	text53
 12087  0D4B                     __ptext53:	
 12088 ;; *************** function _PIN_MANAGER_Initialize *****************
 12089 ;; Defined at:
 12090 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
 12091 ;; Parameters:    Size  Location     Type
 12092 ;;		None
 12093 ;; Auto vars:     Size  Location     Type
 12094 ;;		None
 12095 ;; Return value:  Size  Location     Type
 12096 ;;                  1    wreg      void 
 12097 ;; Registers used:
 12098 ;;		wreg, status,2
 12099 ;; Tracked objects:
 12100 ;;		On entry : 0/0
 12101 ;;		On exit  : 0/0
 12102 ;;		Unchanged: 0/0
 12103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12104 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12105 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12106 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12107 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12108 ;;Total ram usage:        0 bytes
 12109 ;; Hardware stack levels used:    1
 12110 ;; Hardware stack levels required when called:    5
 12111 ;; This function calls:
 12112 ;;		Nothing
 12113 ;; This function is called by:
 12114 ;;		_SYSTEM_Initialize
 12115 ;; This function uses a non-reentrant model
 12116 ;;
 12117                           
 12118                           
 12119                           ;psect for function _PIN_MANAGER_Initialize
 12120  0D4B                     _PIN_MANAGER_Initialize:	
 12121                           
 12122                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x00;
 12123                           
 12124                           ;incstack = 0
 12125                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
 12126  0D4B  0022               	movlb	2	; select bank2
 12127  0D4C  018C               	clrf	12	;volatile
 12128                           
 12129                           ;mcc_generated_files/pin_manager.c: 61:     LATB = 0x00;
 12130  0D4D  018D               	clrf	13	;volatile
 12131                           
 12132                           ;mcc_generated_files/pin_manager.c: 62:     LATC = 0x00;
 12133  0D4E  018E               	clrf	14	;volatile
 12134                           
 12135                           ;mcc_generated_files/pin_manager.c: 67:     TRISA = 0x33;
 12136  0D4F  3033               	movlw	51
 12137  0D50  0021               	movlb	1	; select bank1
 12138  0D51  008C               	movwf	12	;volatile
 12139                           
 12140                           ;mcc_generated_files/pin_manager.c: 68:     TRISB = 0xB0;
 12141  0D52  30B0               	movlw	176
 12142  0D53  008D               	movwf	13	;volatile
 12143                           
 12144                           ;mcc_generated_files/pin_manager.c: 69:     TRISC = 0xBA;
 12145  0D54  30BA               	movlw	186
 12146  0D55  008E               	movwf	14	;volatile
 12147                           
 12148                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0xF4;
 12149  0D56  30F4               	movlw	244
 12150  0D57  0023               	movlb	3	; select bank3
 12151  0D58  008E               	movwf	14	;volatile
 12152                           
 12153                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0x00;
 12154  0D59  018D               	clrf	13	;volatile
 12155                           
 12156                           ;mcc_generated_files/pin_manager.c: 76:     ANSELA = 0x11;
 12157  0D5A  3011               	movlw	17
 12158  0D5B  008C               	movwf	12	;volatile
 12159                           
 12160                           ;mcc_generated_files/pin_manager.c: 81:     WPUB = 0x00;
 12161  0D5C  0024               	movlb	4	; select bank4
 12162  0D5D  018D               	clrf	13	;volatile
 12163                           
 12164                           ;mcc_generated_files/pin_manager.c: 82:     WPUA = 0x00;
 12165  0D5E  018C               	clrf	12	;volatile
 12166                           
 12167                           ;mcc_generated_files/pin_manager.c: 83:     WPUC = 0x00;
 12168  0D5F  018E               	clrf	14	;volatile
 12169                           
 12170                           ;mcc_generated_files/pin_manager.c: 88:     ODCONA = 0x00;
 12171  0D60  0025               	movlb	5	; select bank5
 12172  0D61  018C               	clrf	12	;volatile
 12173                           
 12174                           ;mcc_generated_files/pin_manager.c: 89:     ODCONB = 0x00;
 12175  0D62  018D               	clrf	13	;volatile
 12176                           
 12177                           ;mcc_generated_files/pin_manager.c: 90:     ODCONC = 0x00;
 12178  0D63  018E               	clrf	14	;volatile
 12179                           
 12180                           ;mcc_generated_files/pin_manager.c: 95:     SLRCONA = 0x37;
 12181  0D64  3037               	movlw	55
 12182  0D65  0026               	movlb	6	; select bank6
 12183  0D66  008C               	movwf	12	;volatile
 12184                           
 12185                           ;mcc_generated_files/pin_manager.c: 96:     SLRCONB = 0xF0;
 12186  0D67  30F0               	movlw	240
 12187  0D68  008D               	movwf	13	;volatile
 12188                           
 12189                           ;mcc_generated_files/pin_manager.c: 97:     SLRCONC = 0xFF;
 12190  0D69  30FF               	movlw	255
 12191  0D6A  008E               	movwf	14	;volatile
 12192                           
 12193                           ;mcc_generated_files/pin_manager.c: 105:     PIE0bits.IOCIE = 1;
 12194  0D6B  0021               	movlb	1	; select bank1
 12195  0D6C  1610               	bsf	16,4	;volatile
 12196                           
 12197                           ;mcc_generated_files/pin_manager.c: 108:     SSP2DATPPS = 0x0C;
 12198  0D6D  300C               	movlw	12
 12199  0D6E  003C               	movlb	28	; select bank28
 12200  0D6F  009E               	movwf	30	;volatile
 12201                           
 12202                           ;mcc_generated_files/pin_manager.c: 109:     SSP1CLKPPS = 0x0F;
 12203  0D70  300F               	movlw	15
 12204  0D71  00A0               	movwf	32	;volatile
 12205                           
 12206                           ;mcc_generated_files/pin_manager.c: 110:     RB6PPS = 0x1A;
 12207  0D72  301A               	movlw	26
 12208  0D73  003D               	movlb	29	; select bank29
 12209  0D74  009E               	movwf	30	;volatile
 12210                           
 12211                           ;mcc_generated_files/pin_manager.c: 111:     RB7PPS = 0x18;
 12212  0D75  3018               	movlw	24
 12213  0D76  009F               	movwf	31	;volatile
 12214                           
 12215                           ;mcc_generated_files/pin_manager.c: 112:     RB5PPS = 0x19;
 12216  0D77  3019               	movlw	25
 12217  0D78  009D               	movwf	29	;volatile
 12218                           
 12219                           ;mcc_generated_files/pin_manager.c: 113:     RC2PPS = 0x1B;
 12220  0D79  301B               	movlw	27
 12221  0D7A  00A2               	movwf	34	;volatile
 12222                           
 12223                           ;mcc_generated_files/pin_manager.c: 114:     SSP1DATPPS = 0x0D;
 12224  0D7B  300D               	movlw	13
 12225  0D7C  003C               	movlb	28	; select bank28
 12226  0D7D  00A1               	movwf	33	;volatile
 12227                           
 12228                           ;mcc_generated_files/pin_manager.c: 115:     SSP2CLKPPS = 0x0E;
 12229  0D7E  300E               	movlw	14
 12230  0D7F  009D               	movwf	29	;volatile
 12231  0D80  0008               	return
 12232  0D81                     __end_of_PIN_MANAGER_Initialize:	
 12233                           
 12234                           	psect	text54
 12235  092E                     __ptext54:	
 12236 ;; *************** function _OSCILLATOR_Initialize *****************
 12237 ;; Defined at:
 12238 ;;		line 63 in file "mcc_generated_files/mcc.c"
 12239 ;; Parameters:    Size  Location     Type
 12240 ;;		None
 12241 ;; Auto vars:     Size  Location     Type
 12242 ;;		None
 12243 ;; Return value:  Size  Location     Type
 12244 ;;                  1    wreg      void 
 12245 ;; Registers used:
 12246 ;;		wreg, status,2
 12247 ;; Tracked objects:
 12248 ;;		On entry : 0/0
 12249 ;;		On exit  : 0/0
 12250 ;;		Unchanged: 0/0
 12251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12252 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12253 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12254 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12255 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12256 ;;Total ram usage:        0 bytes
 12257 ;; Hardware stack levels used:    1
 12258 ;; Hardware stack levels required when called:    5
 12259 ;; This function calls:
 12260 ;;		Nothing
 12261 ;; This function is called by:
 12262 ;;		_SYSTEM_Initialize
 12263 ;; This function uses a non-reentrant model
 12264 ;;
 12265                           
 12266                           
 12267                           ;psect for function _OSCILLATOR_Initialize
 12268  092E                     _OSCILLATOR_Initialize:	
 12269                           
 12270                           ;mcc_generated_files/mcc.c: 66:     OSCCON1 = 0x61;
 12271                           
 12272                           ;incstack = 0
 12273                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 12274  092E  3061               	movlw	97
 12275  092F  0032               	movlb	18	; select bank18
 12276  0930  0099               	movwf	25	;volatile
 12277                           
 12278                           ;mcc_generated_files/mcc.c: 68:     OSCCON3 = 0x00;
 12279  0931  019B               	clrf	27	;volatile
 12280                           
 12281                           ;mcc_generated_files/mcc.c: 70:     OSCEN = 0x00;
 12282  0932  019D               	clrf	29	;volatile
 12283                           
 12284                           ;mcc_generated_files/mcc.c: 72:     OSCFRQ = 0x00;
 12285  0933  019F               	clrf	31	;volatile
 12286                           
 12287                           ;mcc_generated_files/mcc.c: 74:     OSCTUNE = 0x00;
 12288  0934  019E               	clrf	30	;volatile
 12289  0935  0008               	return
 12290  0936                     __end_of_OSCILLATOR_Initialize:	
 12291                           
 12292                           	psect	text55
 12293  0926                     __ptext55:	
 12294 ;; *************** function _ADC_Initialize *****************
 12295 ;; Defined at:
 12296 ;;		line 65 in file "mcc_generated_files/adc.c"
 12297 ;; Parameters:    Size  Location     Type
 12298 ;;		None
 12299 ;; Auto vars:     Size  Location     Type
 12300 ;;		None
 12301 ;; Return value:  Size  Location     Type
 12302 ;;                  1    wreg      void 
 12303 ;; Registers used:
 12304 ;;		wreg, status,2
 12305 ;; Tracked objects:
 12306 ;;		On entry : 0/0
 12307 ;;		On exit  : 0/0
 12308 ;;		Unchanged: 0/0
 12309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12310 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12311 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12312 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12313 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12314 ;;Total ram usage:        0 bytes
 12315 ;; Hardware stack levels used:    1
 12316 ;; Hardware stack levels required when called:    5
 12317 ;; This function calls:
 12318 ;;		Nothing
 12319 ;; This function is called by:
 12320 ;;		_SYSTEM_Initialize
 12321 ;; This function uses a non-reentrant model
 12322 ;;
 12323                           
 12324                           
 12325                           ;psect for function _ADC_Initialize
 12326  0926                     _ADC_Initialize:	
 12327                           
 12328                           ;mcc_generated_files/adc.c: 70:     ADCON0 = 0x01;
 12329                           
 12330                           ;incstack = 0
 12331                           ; Regs used in _ADC_Initialize: [wreg+status,2]
 12332  0926  3001               	movlw	1
 12333  0927  0021               	movlb	1	; select bank1
 12334  0928  009D               	movwf	29	;volatile
 12335                           
 12336                           ;mcc_generated_files/adc.c: 73:     ADCON1 = 0x00;
 12337  0929  019E               	clrf	30	;volatile
 12338                           
 12339                           ;mcc_generated_files/adc.c: 76:     ADACT = 0x00;
 12340  092A  019F               	clrf	31	;volatile
 12341                           
 12342                           ;mcc_generated_files/adc.c: 79:     ADRESL = 0x00;
 12343  092B  019B               	clrf	27	;volatile
 12344                           
 12345                           ;mcc_generated_files/adc.c: 82:     ADRESH = 0x00;
 12346  092C  019C               	clrf	28	;volatile
 12347  092D  0008               	return
 12348  092E                     __end_of_ADC_Initialize:	
 12349                           
 12350                           	psect	text56
 12351  05E0                     __ptext56:	
 12352 ;; *************** function _Get_ADC *****************
 12353 ;; Defined at:
 12354 ;;		line 294 in file "main.c"
 12355 ;; Parameters:    Size  Location     Type
 12356 ;;		None
 12357 ;; Auto vars:     Size  Location     Type
 12358 ;;  val             2   15[BANK0 ] int 
 12359 ;; Return value:  Size  Location     Type
 12360 ;;                  1    wreg      void 
 12361 ;; Registers used:
 12362 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12363 ;; Tracked objects:
 12364 ;;		On entry : 0/0
 12365 ;;		On exit  : 0/0
 12366 ;;		Unchanged: 0/0
 12367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12368 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12369 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12370 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12371 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12372 ;;Total ram usage:        5 bytes
 12373 ;; Hardware stack levels used:    1
 12374 ;; Hardware stack levels required when called:    8
 12375 ;; This function calls:
 12376 ;;		_ADC_GetConversion
 12377 ;;		_Display_Name
 12378 ;; This function is called by:
 12379 ;;		_main
 12380 ;; This function uses a non-reentrant model
 12381 ;;
 12382                           
 12383                           
 12384                           ;psect for function _Get_ADC
 12385  05E0                     _Get_ADC:	
 12386                           
 12387                           ;main.c: 295:     adcResult = ADC_GetConversion(BTN) >> 6;
 12388                           
 12389                           ;incstack = 0
 12390                           ; Regs used in _Get_ADC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12391  05E0  3017               	movlw	23
 12392  05E1  318A  22B5  3185   	fcall	_ADC_GetConversion
 12393  05E4  0020               	movlb	0	; select bank0
 12394  05E5  0820               	movf	?_ADC_GetConversion,w
 12395  05E6  00AC               	movwf	??_Get_ADC
 12396  05E7  0821               	movf	?_ADC_GetConversion+1,w
 12397  05E8  00AD               	movwf	??_Get_ADC+1
 12398  05E9  3006               	movlw	6
 12399  05EA                     u6145:	
 12400  05EA  36AD               	lsrf	??_Get_ADC+1,f
 12401  05EB  0CAC               	rrf	??_Get_ADC,f
 12402  05EC  0B89               	decfsz	9,f
 12403  05ED  2DEA               	goto	u6145
 12404  05EE  082C               	movf	??_Get_ADC,w
 12405  05EF  00AE               	movwf	??_Get_ADC+2
 12406  05F0  082E               	movf	??_Get_ADC+2,w
 12407  05F1  00EC               	movwf	_adcResult
 12408                           
 12409                           ;main.c: 296:     int val = adcResult;
 12410  05F2  086C               	movf	_adcResult,w
 12411  05F3  00AC               	movwf	??_Get_ADC
 12412  05F4  01AD               	clrf	??_Get_ADC+1
 12413  05F5  082C               	movf	??_Get_ADC,w
 12414  05F6  00AF               	movwf	Get_ADC@val
 12415  05F7  082D               	movf	??_Get_ADC+1,w
 12416  05F8  00B0               	movwf	Get_ADC@val+1
 12417                           
 12418                           ;main.c: 302:     if(val < 10) {
 12419  05F9  0830               	movf	Get_ADC@val+1,w
 12420  05FA  3A80               	xorlw	128
 12421  05FB  00AC               	movwf	??_Get_ADC
 12422  05FC  3080               	movlw	128
 12423  05FD  022C               	subwf	??_Get_ADC,w
 12424  05FE  1D03               	skipz
 12425  05FF  2E02               	goto	u6155
 12426  0600  300A               	movlw	10
 12427  0601  022F               	subwf	Get_ADC@val,w
 12428  0602                     u6155:	
 12429  0602  1803               	skipnc
 12430  0603  2E07               	goto	l6913
 12431                           
 12432                           ;main.c: 303:         val = 0;
 12433  0604  0020               	movlb	0	; select bank0
 12434  0605  01AF               	clrf	Get_ADC@val
 12435  0606  01B0               	clrf	Get_ADC@val+1
 12436  0607                     l6913:	
 12437                           
 12438                           ;main.c: 306:     if(val >= 240 && val <= 254) {
 12439  0607  0020               	movlb	0	; select bank0
 12440  0608  0830               	movf	Get_ADC@val+1,w
 12441  0609  3A80               	xorlw	128
 12442  060A  00AC               	movwf	??_Get_ADC
 12443  060B  3080               	movlw	128
 12444  060C  022C               	subwf	??_Get_ADC,w
 12445  060D  1D03               	skipz
 12446  060E  2E11               	goto	u6165
 12447  060F  30F0               	movlw	240
 12448  0610  022F               	subwf	Get_ADC@val,w
 12449  0611                     u6165:	
 12450  0611  1C03               	skipc
 12451  0612  2E24               	goto	l6919
 12452  0613  0020               	movlb	0	; select bank0
 12453  0614  0830               	movf	Get_ADC@val+1,w
 12454  0615  3A80               	xorlw	128
 12455  0616  00AC               	movwf	??_Get_ADC
 12456  0617  3080               	movlw	128
 12457  0618  022C               	subwf	??_Get_ADC,w
 12458  0619  1D03               	skipz
 12459  061A  2E1D               	goto	u6175
 12460  061B  30FF               	movlw	255
 12461  061C  022F               	subwf	Get_ADC@val,w
 12462  061D                     u6175:	
 12463  061D  1803               	skipnc
 12464  061E  2E24               	goto	l6919
 12465                           
 12466                           ;main.c: 307:         Display_Name("on");
 12467  061F  3060               	movlw	low (STR_5| (0+32768))
 12468  0620  0020               	movlb	0	; select bank0
 12469  0621  00A5               	movwf	Display_Name@string1
 12470  0622  3090               	movlw	high (STR_5| (0+32768))
 12471  0623  2EDD               	goto	L9
 12472  0624                     l6919:	
 12473                           ;main.c: 308:     }
 12474                           
 12475  0624  0020               	movlb	0	; select bank0
 12476  0625  0830               	movf	Get_ADC@val+1,w
 12477  0626  3A80               	xorlw	128
 12478  0627  00AC               	movwf	??_Get_ADC
 12479  0628  3080               	movlw	128
 12480  0629  022C               	subwf	??_Get_ADC,w
 12481  062A  1D03               	skipz
 12482  062B  2E2E               	goto	u6185
 12483  062C  30E6               	movlw	230
 12484  062D  022F               	subwf	Get_ADC@val,w
 12485  062E                     u6185:	
 12486  062E  1C03               	skipc
 12487  062F  2E41               	goto	l6925
 12488  0630  0020               	movlb	0	; select bank0
 12489  0631  0830               	movf	Get_ADC@val+1,w
 12490  0632  3A80               	xorlw	128
 12491  0633  00AC               	movwf	??_Get_ADC
 12492  0634  3080               	movlw	128
 12493  0635  022C               	subwf	??_Get_ADC,w
 12494  0636  1D03               	skipz
 12495  0637  2E3A               	goto	u6195
 12496  0638  30F0               	movlw	240
 12497  0639  022F               	subwf	Get_ADC@val,w
 12498  063A                     u6195:	
 12499  063A  1803               	skipnc
 12500  063B  2E41               	goto	l6925
 12501                           
 12502                           ;main.c: 310:         Display_Name("toggle");
 12503  063C  3054               	movlw	low (STR_6| (0+32768))
 12504  063D  0020               	movlb	0	; select bank0
 12505  063E  00A5               	movwf	Display_Name@string1
 12506  063F  3090               	movlw	high (STR_6| (0+32768))
 12507  0640  2EDD               	goto	L9
 12508  0641                     l6925:	
 12509                           ;main.c: 311:     }
 12510                           
 12511  0641  0020               	movlb	0	; select bank0
 12512  0642  0830               	movf	Get_ADC@val+1,w
 12513  0643  3A80               	xorlw	128
 12514  0644  00AC               	movwf	??_Get_ADC
 12515  0645  3080               	movlw	128
 12516  0646  022C               	subwf	??_Get_ADC,w
 12517  0647  1D03               	skipz
 12518  0648  2E4B               	goto	u6205
 12519  0649  30C8               	movlw	200
 12520  064A  022F               	subwf	Get_ADC@val,w
 12521  064B                     u6205:	
 12522  064B  1C03               	skipc
 12523  064C  2E5E               	goto	l6931
 12524  064D  0020               	movlb	0	; select bank0
 12525  064E  0830               	movf	Get_ADC@val+1,w
 12526  064F  3A80               	xorlw	128
 12527  0650  00AC               	movwf	??_Get_ADC
 12528  0651  3080               	movlw	128
 12529  0652  022C               	subwf	??_Get_ADC,w
 12530  0653  1D03               	skipz
 12531  0654  2E57               	goto	u6215
 12532  0655  30D3               	movlw	211
 12533  0656  022F               	subwf	Get_ADC@val,w
 12534  0657                     u6215:	
 12535  0657  1803               	skipnc
 12536  0658  2E5E               	goto	l6931
 12537                           
 12538                           ;main.c: 313:         Display_Name("up");
 12539  0659  3063               	movlw	low (STR_7| (0+32768))
 12540  065A  0020               	movlb	0	; select bank0
 12541  065B  00A5               	movwf	Display_Name@string1
 12542  065C  3090               	movlw	high (STR_7| (0+32768))
 12543  065D  2EDD               	goto	L9
 12544  065E                     l6931:	
 12545                           ;main.c: 314:     }
 12546                           
 12547  065E  0020               	movlb	0	; select bank0
 12548  065F  0830               	movf	Get_ADC@val+1,w
 12549  0660  3A80               	xorlw	128
 12550  0661  00AC               	movwf	??_Get_ADC
 12551  0662  3080               	movlw	128
 12552  0663  022C               	subwf	??_Get_ADC,w
 12553  0664  1D03               	skipz
 12554  0665  2E68               	goto	u6225
 12555  0666  30B4               	movlw	180
 12556  0667  022F               	subwf	Get_ADC@val,w
 12557  0668                     u6225:	
 12558  0668  1C03               	skipc
 12559  0669  2E8B               	goto	l6945
 12560  066A  0020               	movlb	0	; select bank0
 12561  066B  0830               	movf	Get_ADC@val+1,w
 12562  066C  3A80               	xorlw	128
 12563  066D  00AC               	movwf	??_Get_ADC
 12564  066E  3080               	movlw	128
 12565  066F  022C               	subwf	??_Get_ADC,w
 12566  0670  1D03               	skipz
 12567  0671  2E74               	goto	u6235
 12568  0672  30BF               	movlw	191
 12569  0673  022F               	subwf	Get_ADC@val,w
 12570  0674                     u6235:	
 12571  0674  1803               	skipnc
 12572  0675  2E8B               	goto	l6945
 12573                           
 12574                           ;main.c: 316:         printed = 0;
 12575  0676  0020               	movlb	0	; select bank0
 12576  0677  01ED               	clrf	_printed
 12577                           
 12578                           ;main.c: 317:         --name;
 12579  0678  30FF               	movlw	255
 12580  0679  07DC               	addwf	_name,f
 12581  067A  30FF               	movlw	255
 12582  067B  3DDD               	addwfc	_name+1,f
 12583                           
 12584                           ;main.c: 318:         if(name < 0) {
 12585  067C  1FDD               	btfss	_name+1,7
 12586  067D  2E82               	goto	l6943
 12587                           
 12588                           ;main.c: 319:             name = 3;
 12589  067E  3003               	movlw	3
 12590  067F  00DC               	movwf	_name
 12591  0680  3000               	movlw	0
 12592  0681  00DD               	movwf	_name+1
 12593  0682                     l6943:	
 12594                           
 12595                           ;main.c: 321:         Display_Name(names[name]);
 12596  0682  355C               	lslf	_name,w
 12597  0683  3E60               	addlw	(low (_names| (0+256)))& (0+255)
 12598  0684  0086               	movwf	6
 12599  0685  3001               	movlw	1	; select bank2/3
 12600  0686  0087               	movwf	7
 12601  0687  3F40               	moviw [0]fsr1
 12602  0688  00A5               	movwf	Display_Name@string1
 12603  0689  3F41               	moviw [1]fsr1
 12604  068A  2EDD               	goto	L9
 12605  068B                     l6945:	
 12606                           ;main.c: 322:     }
 12607                           
 12608  068B  0020               	movlb	0	; select bank0
 12609  068C  0830               	movf	Get_ADC@val+1,w
 12610  068D  3A80               	xorlw	128
 12611  068E  00AC               	movwf	??_Get_ADC
 12612  068F  3080               	movlw	128
 12613  0690  022C               	subwf	??_Get_ADC,w
 12614  0691  1D03               	skipz
 12615  0692  2E95               	goto	u6255
 12616  0693  3096               	movlw	150
 12617  0694  022F               	subwf	Get_ADC@val,w
 12618  0695                     u6255:	
 12619  0695  1C03               	skipc
 12620  0696  2EA8               	goto	l6951
 12621  0697  0020               	movlb	0	; select bank0
 12622  0698  0830               	movf	Get_ADC@val+1,w
 12623  0699  3A80               	xorlw	128
 12624  069A  00AC               	movwf	??_Get_ADC
 12625  069B  3080               	movlw	128
 12626  069C  022C               	subwf	??_Get_ADC,w
 12627  069D  1D03               	skipz
 12628  069E  2EA1               	goto	u6265
 12629  069F  30A1               	movlw	161
 12630  06A0  022F               	subwf	Get_ADC@val,w
 12631  06A1                     u6265:	
 12632  06A1  1803               	skipnc
 12633  06A2  2EA8               	goto	l6951
 12634                           
 12635                           ;main.c: 324:         Display_Name("down");
 12636  06A3  305B               	movlw	low (STR_8| (0+32768))
 12637  06A4  0020               	movlb	0	; select bank0
 12638  06A5  00A5               	movwf	Display_Name@string1
 12639  06A6  3090               	movlw	high (STR_8| (0+32768))
 12640  06A7  2EDD               	goto	L9
 12641  06A8                     l6951:	
 12642                           ;main.c: 325:     }
 12643                           
 12644  06A8  0020               	movlb	0	; select bank0
 12645  06A9  0830               	movf	Get_ADC@val+1,w
 12646  06AA  3A80               	xorlw	128
 12647  06AB  00AC               	movwf	??_Get_ADC
 12648  06AC  3080               	movlw	128
 12649  06AD  022C               	subwf	??_Get_ADC,w
 12650  06AE  1D03               	skipz
 12651  06AF  2EB2               	goto	u6275
 12652  06B0  3014               	movlw	20
 12653  06B1  022F               	subwf	Get_ADC@val,w
 12654  06B2                     u6275:	
 12655  06B2  1C03               	skipc
 12656  06B3  2EE0               	goto	l6965
 12657  06B4  0020               	movlb	0	; select bank0
 12658  06B5  0830               	movf	Get_ADC@val+1,w
 12659  06B6  3A80               	xorlw	128
 12660  06B7  00AC               	movwf	??_Get_ADC
 12661  06B8  3080               	movlw	128
 12662  06B9  022C               	subwf	??_Get_ADC,w
 12663  06BA  1D03               	skipz
 12664  06BB  2EBE               	goto	u6285
 12665  06BC  3018               	movlw	24
 12666  06BD  022F               	subwf	Get_ADC@val,w
 12667  06BE                     u6285:	
 12668  06BE  1803               	skipnc
 12669  06BF  2EE0               	goto	l6965
 12670                           
 12671                           ;main.c: 327:         printed = 0;
 12672  06C0  0020               	movlb	0	; select bank0
 12673  06C1  01ED               	clrf	_printed
 12674                           
 12675                           ;main.c: 328:         name++;
 12676  06C2  3001               	movlw	1
 12677  06C3  07DC               	addwf	_name,f
 12678  06C4  3000               	movlw	0
 12679  06C5  3DDD               	addwfc	_name+1,f
 12680                           
 12681                           ;main.c: 329:         if(name > 3) {
 12682  06C6  085D               	movf	_name+1,w
 12683  06C7  3A80               	xorlw	128
 12684  06C8  00AC               	movwf	??_Get_ADC
 12685  06C9  3080               	movlw	128
 12686  06CA  022C               	subwf	??_Get_ADC,w
 12687  06CB  1D03               	skipz
 12688  06CC  2ECF               	goto	u6295
 12689  06CD  3004               	movlw	4
 12690  06CE  025C               	subwf	_name,w
 12691  06CF                     u6295:	
 12692  06CF  1C03               	skipc
 12693  06D0  2ED4               	goto	l6963
 12694                           
 12695                           ;main.c: 330:            name = 0;
 12696  06D1  0020               	movlb	0	; select bank0
 12697  06D2  01DC               	clrf	_name
 12698  06D3  01DD               	clrf	_name+1
 12699  06D4                     l6963:	
 12700                           
 12701                           ;main.c: 332:         Display_Name(names[name]);
 12702  06D4  0020               	movlb	0	; select bank0
 12703  06D5  355C               	lslf	_name,w
 12704  06D6  3E60               	addlw	(low (_names| (0+256)))& (0+255)
 12705  06D7  0086               	movwf	6
 12706  06D8  3001               	movlw	1	; select bank2/3
 12707  06D9  0087               	movwf	7
 12708  06DA  3F40               	moviw [0]fsr1
 12709  06DB  00A5               	movwf	Display_Name@string1
 12710  06DC  3F41               	moviw [1]fsr1
 12711  06DD                     L9:	
 12712  06DD  00A6               	movwf	Display_Name@string1+1
 12713  06DE  318D  2581         	fcall	_Display_Name
 12714  06E0                     l6965:	
 12715                           
 12716                           ;main.c: 334:     adcResult = 0;
 12717  06E0  0020               	movlb	0	; select bank0
 12718  06E1  01EC               	clrf	_adcResult
 12719  06E2  0008               	return
 12720  06E3                     __end_of_Get_ADC:	
 12721                           
 12722                           	psect	text57
 12723  0D81                     __ptext57:	
 12724 ;; *************** function _Display_Name *****************
 12725 ;; Defined at:
 12726 ;;		line 215 in file "main.c"
 12727 ;; Parameters:    Size  Location     Type
 12728 ;;  string1         2    5[BANK0 ] PTR unsigned char 
 12729 ;;		 -> STR_8(5), STR_7(3), STR_6(7), STR_5(3), 
 12730 ;;		 -> STR_4(11), STR_3(16), STR_2(13), STR_1(12), 
 12731 ;; Auto vars:     Size  Location     Type
 12732 ;;  i               2   10[BANK0 ] int 
 12733 ;;  length          2    8[BANK0 ] int 
 12734 ;; Return value:  Size  Location     Type
 12735 ;;                  1    wreg      void 
 12736 ;; Registers used:
 12737 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12738 ;; Tracked objects:
 12739 ;;		On entry : 0/0
 12740 ;;		On exit  : 0/0
 12741 ;;		Unchanged: 0/0
 12742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12743 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12744 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12745 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12746 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12747 ;;Total ram usage:        7 bytes
 12748 ;; Hardware stack levels used:    1
 12749 ;; Hardware stack levels required when called:    7
 12750 ;; This function calls:
 12751 ;;		_SPI_Write
 12752 ;;		_strlen
 12753 ;; This function is called by:
 12754 ;;		_main
 12755 ;;		_handleGesture
 12756 ;;		_Get_ADC
 12757 ;; This function uses a non-reentrant model
 12758 ;;
 12759                           
 12760                           
 12761                           ;psect for function _Display_Name
 12762  0D81                     _Display_Name:	
 12763                           
 12764                           ;main.c: 216:     int length;;main.c: 217:     int i;;main.c: 219:         SPI_Write(0xF
      +                          E);
 12765                           
 12766                           ;incstack = 0
 12767                           ; Regs used in _Display_Name: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12768  0D81  30FE               	movlw	254
 12769  0D82  318A  2205  318D   	fcall	_SPI_Write
 12770                           
 12771                           ;main.c: 220:         _delay((unsigned long)((100)*(500000/4000.0)));
 12772  0D85  3011               	movlw	17
 12773  0D86  0020               	movlb	0	; select bank0
 12774  0D87  00A7               	movwf	??_Display_Name
 12775  0D88  303A               	movlw	58
 12776  0D89                     u6437:	
 12777  0D89  0B89               	decfsz	9,f
 12778  0D8A  2D89               	goto	u6437
 12779  0D8B  0BA7               	decfsz	??_Display_Name,f
 12780  0D8C  2D89               	goto	u6437
 12781  0D8D  0000               	nop
 12782                           
 12783                           ;main.c: 221:         SPI_Write(0x51);
 12784  0D8E  3051               	movlw	81
 12785  0D8F  318A  2205  318D   	fcall	_SPI_Write
 12786                           
 12787                           ;main.c: 222:         length = strlen(string1);
 12788  0D92  0020               	movlb	0	; select bank0
 12789  0D93  0826               	movf	Display_Name@string1+1,w
 12790  0D94  00A1               	movwf	strlen@s+1
 12791  0D95  0825               	movf	Display_Name@string1,w
 12792  0D96  00A0               	movwf	strlen@s
 12793  0D97  318A  221A  318D   	fcall	_strlen
 12794  0D9A  0020               	movlb	0	; select bank0
 12795  0D9B  0821               	movf	?_strlen+1,w
 12796  0D9C  00A9               	movwf	Display_Name@length+1
 12797  0D9D  0820               	movf	?_strlen,w
 12798  0D9E  00A8               	movwf	Display_Name@length
 12799                           
 12800                           ;main.c: 223:         for(i = 0; i < length; i++){
 12801  0D9F  01AA               	clrf	Display_Name@i
 12802  0DA0  01AB               	clrf	Display_Name@i+1
 12803  0DA1                     l6359:	
 12804  0DA1  082B               	movf	Display_Name@i+1,w
 12805  0DA2  3A80               	xorlw	128
 12806  0DA3  00A7               	movwf	??_Display_Name
 12807  0DA4  0829               	movf	Display_Name@length+1,w
 12808  0DA5  3A80               	xorlw	128
 12809  0DA6  0227               	subwf	??_Display_Name,w
 12810  0DA7  1D03               	skipz
 12811  0DA8  2DAB               	goto	u5485
 12812  0DA9  0828               	movf	Display_Name@length,w
 12813  0DAA  022A               	subwf	Display_Name@i,w
 12814  0DAB                     u5485:	
 12815  0DAB  1803               	btfsc	3,0
 12816  0DAC  2DBE               	goto	l779
 12817                           
 12818                           ;main.c: 224:             SPI_Write(string1[i]);
 12819  0DAD  0020               	movlb	0	; select bank0
 12820  0DAE  0825               	movf	Display_Name@string1,w
 12821  0DAF  072A               	addwf	Display_Name@i,w
 12822  0DB0  0084               	movwf	4
 12823  0DB1  0826               	movf	Display_Name@string1+1,w
 12824  0DB2  3D2B               	addwfc	Display_Name@i+1,w
 12825  0DB3  0085               	movwf	5
 12826  0DB4  0800               	movf	0,w	;code access
 12827  0DB5  318A  2205  318D   	fcall	_SPI_Write
 12828                           
 12829                           ;main.c: 225:         }
 12830  0DB8  3001               	movlw	1
 12831  0DB9  0020               	movlb	0	; select bank0
 12832  0DBA  07AA               	addwf	Display_Name@i,f
 12833  0DBB  3000               	movlw	0
 12834  0DBC  3DAB               	addwfc	Display_Name@i+1,f
 12835  0DBD  2DA1               	goto	l6359
 12836  0DBE                     l779:	
 12837                           
 12838                           ;main.c: 227:     printed = 1;
 12839  0DBE  0020               	movlb	0	; select bank0
 12840  0DBF  01ED               	clrf	_printed
 12841  0DC0  0AED               	incf	_printed,f
 12842  0DC1  0008               	return
 12843  0DC2                     __end_of_Display_Name:	
 12844                           
 12845                           	psect	text58
 12846  0A1A                     __ptext58:	
 12847 ;; *************** function _strlen *****************
 12848 ;; Defined at:
 12849 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
 12850 ;; Parameters:    Size  Location     Type
 12851 ;;  s               2    0[BANK0 ] PTR const unsigned char 
 12852 ;;		 -> STR_8(5), STR_7(3), STR_6(7), STR_5(3), 
 12853 ;;		 -> STR_4(11), STR_3(16), STR_2(13), STR_1(12), 
 12854 ;; Auto vars:     Size  Location     Type
 12855 ;;  a               2    3[BANK0 ] PTR const unsigned char 
 12856 ;;		 -> STR_8(5), STR_7(3), STR_6(7), STR_5(3), 
 12857 ;;		 -> STR_4(11), STR_3(16), STR_2(13), STR_1(12), 
 12858 ;; Return value:  Size  Location     Type
 12859 ;;                  2    0[BANK0 ] unsigned int 
 12860 ;; Registers used:
 12861 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 12862 ;; Tracked objects:
 12863 ;;		On entry : 0/0
 12864 ;;		On exit  : 0/0
 12865 ;;		Unchanged: 0/0
 12866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12867 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12868 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12869 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12870 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12871 ;;Total ram usage:        5 bytes
 12872 ;; Hardware stack levels used:    1
 12873 ;; Hardware stack levels required when called:    5
 12874 ;; This function calls:
 12875 ;;		Nothing
 12876 ;; This function is called by:
 12877 ;;		_Display_Name
 12878 ;; This function uses a non-reentrant model
 12879 ;;
 12880                           
 12881                           
 12882                           ;psect for function _strlen
 12883  0A1A                     _strlen:	
 12884                           
 12885                           ;incstack = 0
 12886                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0]
 12887  0A1A  0020               	movlb	0	; select bank0
 12888  0A1B  0821               	movf	strlen@s+1,w
 12889  0A1C  00A4               	movwf	strlen@a+1
 12890  0A1D  0820               	movf	strlen@s,w
 12891  0A1E  00A3               	movwf	strlen@a
 12892  0A1F                     l5887:	
 12893  0A1F  0820               	movf	strlen@s,w
 12894  0A20  0084               	movwf	4
 12895  0A21  0821               	movf	strlen@s+1,w
 12896  0A22  0085               	movwf	5
 12897  0A23  0012               	moviw fsr0++
 12898  0A24  1903               	btfsc	3,2
 12899  0A25  2A2B               	goto	l5889
 12900  0A26  3001               	movlw	1
 12901  0A27  07A0               	addwf	strlen@s,f
 12902  0A28  3000               	movlw	0
 12903  0A29  3DA1               	addwfc	strlen@s+1,f
 12904  0A2A  2A1F               	goto	l5887
 12905  0A2B                     l5889:	
 12906  0A2B  0823               	movf	strlen@a,w
 12907  0A2C  0220               	subwf	strlen@s,w
 12908  0A2D  00A0               	movwf	?_strlen
 12909  0A2E  0824               	movf	strlen@a+1,w
 12910  0A2F  3B21               	subwfb	strlen@s+1,w
 12911  0A30  00A1               	movwf	?_strlen+1
 12912  0A31  0008               	return
 12913  0A32                     __end_of_strlen:	
 12914                           
 12915                           	psect	text59
 12916  0AB5                     __ptext59:	
 12917 ;; *************** function _ADC_GetConversion *****************
 12918 ;; Defined at:
 12919 ;;		line 113 in file "mcc_generated_files/adc.c"
 12920 ;; Parameters:    Size  Location     Type
 12921 ;;  channel         1    wreg     enum E6648
 12922 ;; Auto vars:     Size  Location     Type
 12923 ;;  channel         1    3[BANK0 ] enum E6648
 12924 ;; Return value:  Size  Location     Type
 12925 ;;                  2    0[BANK0 ] unsigned short 
 12926 ;; Registers used:
 12927 ;;		wreg, status,2, status,0
 12928 ;; Tracked objects:
 12929 ;;		On entry : 0/0
 12930 ;;		On exit  : 0/0
 12931 ;;		Unchanged: 0/0
 12932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12933 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12934 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12935 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12936 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12937 ;;Total ram usage:        4 bytes
 12938 ;; Hardware stack levels used:    1
 12939 ;; Hardware stack levels required when called:    5
 12940 ;; This function calls:
 12941 ;;		Nothing
 12942 ;; This function is called by:
 12943 ;;		_Get_ADC
 12944 ;; This function uses a non-reentrant model
 12945 ;;
 12946                           
 12947                           
 12948                           ;psect for function _ADC_GetConversion
 12949  0AB5                     _ADC_GetConversion:	
 12950                           
 12951                           ;incstack = 0
 12952                           ; Regs used in _ADC_GetConversion: [wreg+status,2+status,0]
 12953                           ;ADC_GetConversion@channel stored from wreg
 12954  0AB5  0020               	movlb	0	; select bank0
 12955  0AB6  00A3               	movwf	ADC_GetConversion@channel
 12956                           
 12957                           ;mcc_generated_files/adc.c: 113: adc_result_t ADC_GetConversion(adc_channel_t channel);m
      +                          cc_generated_files/adc.c: 114: {;mcc_generated_files/adc.c: 116:     ADCON0bits.CHS = ch
      +                          annel;
 12958  0AB7  0823               	movf	ADC_GetConversion@channel,w
 12959  0AB8  00A2               	movwf	??_ADC_GetConversion
 12960  0AB9  0DA2               	rlf	??_ADC_GetConversion,f
 12961  0ABA  0DA2               	rlf	??_ADC_GetConversion,f
 12962  0ABB  0021               	movlb	1	; select bank1
 12963  0ABC  081D               	movf	29,w	;volatile
 12964  0ABD  0020               	movlb	0	; select bank0
 12965  0ABE  0622               	xorwf	??_ADC_GetConversion,w
 12966  0ABF  3903               	andlw	-253
 12967  0AC0  0622               	xorwf	??_ADC_GetConversion,w
 12968  0AC1  0021               	movlb	1	; select bank1
 12969  0AC2  009D               	movwf	29	;volatile
 12970                           
 12971                           ;mcc_generated_files/adc.c: 119:     ADCON0bits.ADON = 1;
 12972  0AC3  141D               	bsf	29,0	;volatile
 12973                           
 12974                           ;mcc_generated_files/adc.c: 125:     ADCON0bits.ADGO = 1;
 12975                           
 12976                           ;mcc_generated_files/adc.c: 122:     _delay((unsigned long)((5)*(500000/4000000.0)));
 12977  0AC4  0021               	movlb	1	; select bank1
 12978  0AC5  149D               	bsf	29,1	;volatile
 12979  0AC6                     l623:	
 12980                           ;mcc_generated_files/adc.c: 131:     }
 12981                           
 12982                           ;mcc_generated_files/adc.c: 128:     while (ADCON0bits.ADGO)
 12983                           
 12984                           
 12985                           ;mcc_generated_files/adc.c: 128:     while (ADCON0bits.ADGO)
 12986  0AC6  0021               	movlb	1	; select bank1
 12987  0AC7  1C9D               	btfss	29,1	;volatile
 12988  0AC8  2ACB               	goto	l6341
 12989  0AC9  0064               	clrwdt	;# 
 12990  0ACA  2AC6               	goto	l623
 12991  0ACB                     l6341:	
 12992                           
 12993                           ;mcc_generated_files/adc.c: 134:     return ((adc_result_t)((ADRESH << 8) + ADRESL));
 12994  0ACB  081C               	movf	28,w	;volatile
 12995  0ACC  0020               	movlb	0	; select bank0
 12996  0ACD  00A1               	movwf	?_ADC_GetConversion+1
 12997  0ACE  0021               	movlb	1	; select bank1
 12998  0ACF  081B               	movf	27,w	;volatile
 12999  0AD0  0020               	movlb	0	; select bank0
 13000  0AD1  00A0               	movwf	?_ADC_GetConversion
 13001  0AD2  0008               	return
 13002  0AD3                     __end_of_ADC_GetConversion:	
 13003                           
 13004                           	psect	text60
 13005  0995                     __ptext60:	
 13006 ;; *************** function _Display_Clear *****************
 13007 ;; Defined at:
 13008 ;;		line 248 in file "main.c"
 13009 ;; Parameters:    Size  Location     Type
 13010 ;;		None
 13011 ;; Auto vars:     Size  Location     Type
 13012 ;;		None
 13013 ;; Return value:  Size  Location     Type
 13014 ;;                  1    wreg      void 
 13015 ;; Registers used:
 13016 ;;		wreg, status,2, status,0, pclath, cstack
 13017 ;; Tracked objects:
 13018 ;;		On entry : 0/0
 13019 ;;		On exit  : 0/0
 13020 ;;		Unchanged: 0/0
 13021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13022 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13023 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13024 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13025 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13026 ;;Total ram usage:        1 bytes
 13027 ;; Hardware stack levels used:    1
 13028 ;; Hardware stack levels required when called:    7
 13029 ;; This function calls:
 13030 ;;		_SPI_Write
 13031 ;; This function is called by:
 13032 ;;		_main
 13033 ;; This function uses a non-reentrant model
 13034 ;;
 13035                           
 13036                           
 13037                           ;psect for function _Display_Clear
 13038  0995                     _Display_Clear:	
 13039                           
 13040                           ;main.c: 249:     SPI_Write(0xFE);
 13041                           
 13042                           ;incstack = 0
 13043                           ; Regs used in _Display_Clear: [wreg+status,2+status,0+pclath+cstack]
 13044  0995  30FE               	movlw	254
 13045  0996  318A  2205  3189   	fcall	_SPI_Write
 13046                           
 13047                           ;main.c: 250:     _delay((unsigned long)((100)*(500000/4000.0)));
 13048  0999  3011               	movlw	17
 13049  099A  0020               	movlb	0	; select bank0
 13050  099B  00A3               	movwf	??_Display_Clear
 13051  099C  303A               	movlw	58
 13052  099D                     u6447:	
 13053  099D  0B89               	decfsz	9,f
 13054  099E  299D               	goto	u6447
 13055  099F  0BA3               	decfsz	??_Display_Clear,f
 13056  09A0  299D               	goto	u6447
 13057  09A1  0000               	nop
 13058                           
 13059                           ;main.c: 251:     SPI_Write(0x51);
 13060  09A2  3051               	movlw	81
 13061  09A3  318A  2205         	fcall	_SPI_Write
 13062  09A5  0008               	return
 13063  09A6                     __end_of_Display_Clear:	
 13064                           
 13065                           	psect	text61
 13066  0A05                     __ptext61:	
 13067 ;; *************** function _SPI_Write *****************
 13068 ;; Defined at:
 13069 ;;		line 208 in file "main.c"
 13070 ;; Parameters:    Size  Location     Type
 13071 ;;  incoming        1    wreg     unsigned char 
 13072 ;; Auto vars:     Size  Location     Type
 13073 ;;  incoming        1    2[BANK0 ] unsigned char 
 13074 ;; Return value:  Size  Location     Type
 13075 ;;                  1    wreg      void 
 13076 ;; Registers used:
 13077 ;;		wreg, status,2, status,0, pclath, cstack
 13078 ;; Tracked objects:
 13079 ;;		On entry : 0/0
 13080 ;;		On exit  : 0/0
 13081 ;;		Unchanged: 0/0
 13082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13083 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13084 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13085 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13086 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13087 ;;Total ram usage:        2 bytes
 13088 ;; Hardware stack levels used:    1
 13089 ;; Hardware stack levels required when called:    6
 13090 ;; This function calls:
 13091 ;;		_SPI2_Exchange8bit
 13092 ;; This function is called by:
 13093 ;;		_Display_Name
 13094 ;;		_Display_Clear
 13095 ;; This function uses a non-reentrant model
 13096 ;;
 13097                           
 13098                           
 13099                           ;psect for function _SPI_Write
 13100  0A05                     _SPI_Write:	
 13101                           
 13102                           ;incstack = 0
 13103                           ; Regs used in _SPI_Write: [wreg+status,2+status,0+pclath+cstack]
 13104                           ;SPI_Write@incoming stored from wreg
 13105  0A05  0020               	movlb	0	; select bank0
 13106  0A06  00A2               	movwf	SPI_Write@incoming
 13107                           
 13108                           ;main.c: 209:     do { LATCbits.LATC0 = 0; } while(0);
 13109  0A07  0022               	movlb	2	; select bank2
 13110  0A08  100E               	bcf	14,0	;volatile
 13111                           
 13112                           ;main.c: 210:     SPI2_Exchange8bit(incoming);
 13113  0A09  0020               	movlb	0	; select bank0
 13114  0A0A  0822               	movf	SPI_Write@incoming,w
 13115  0A0B  3189  2186  318A   	fcall	_SPI2_Exchange8bit
 13116  0A0E  0022               	movlb	2	; select bank2
 13117  0A0F  140E               	bsf	14,0	;volatile
 13118                           
 13119                           ;main.c: 212:     _delay((unsigned long)((100)*(500000/4000.0)));
 13120  0A10  3011               	movlw	17
 13121  0A11  0020               	movlb	0	; select bank0
 13122  0A12  00A1               	movwf	??_SPI_Write
 13123  0A13  303A               	movlw	58
 13124  0A14                     u6457:	
 13125  0A14  0B89               	decfsz	9,f
 13126  0A15  2A14               	goto	u6457
 13127  0A16  0BA1               	decfsz	??_SPI_Write,f
 13128  0A17  2A14               	goto	u6457
 13129  0A18  0000               	nop
 13130  0A19  0008               	return
 13131  0A1A                     __end_of_SPI_Write:	
 13132                           
 13133                           	psect	text62
 13134  0986                     __ptext62:	
 13135 ;; *************** function _SPI2_Exchange8bit *****************
 13136 ;; Defined at:
 13137 ;;		line 79 in file "mcc_generated_files/spi2.c"
 13138 ;; Parameters:    Size  Location     Type
 13139 ;;  data            1    wreg     unsigned char 
 13140 ;; Auto vars:     Size  Location     Type
 13141 ;;  data            1    0[BANK0 ] unsigned char 
 13142 ;; Return value:  Size  Location     Type
 13143 ;;                  1    wreg      unsigned char 
 13144 ;; Registers used:
 13145 ;;		wreg
 13146 ;; Tracked objects:
 13147 ;;		On entry : 0/0
 13148 ;;		On exit  : 0/0
 13149 ;;		Unchanged: 0/0
 13150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13151 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13152 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13154 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13155 ;;Total ram usage:        1 bytes
 13156 ;; Hardware stack levels used:    1
 13157 ;; Hardware stack levels required when called:    5
 13158 ;; This function calls:
 13159 ;;		Nothing
 13160 ;; This function is called by:
 13161 ;;		_SPI_Write
 13162 ;;		_SPI2_Exchange8bitBuffer
 13163 ;; This function uses a non-reentrant model
 13164 ;;
 13165                           
 13166                           
 13167                           ;psect for function _SPI2_Exchange8bit
 13168  0986                     _SPI2_Exchange8bit:	
 13169                           
 13170                           ;incstack = 0
 13171                           ; Regs used in _SPI2_Exchange8bit: [wreg]
 13172                           ;SPI2_Exchange8bit@data stored from wreg
 13173  0986  0020               	movlb	0	; select bank0
 13174  0987  00A0               	movwf	SPI2_Exchange8bit@data
 13175                           
 13176                           ;mcc_generated_files/spi2.c: 79: uint8_t SPI2_Exchange8bit(uint8_t data);mcc_generated_f
      +                          iles/spi2.c: 80: {;mcc_generated_files/spi2.c: 82:     SSP2CON1bits.WCOL = 0;
 13177  0988  0024               	movlb	4	; select bank4
 13178  0989  139D               	bcf	29,7	;volatile
 13179                           
 13180                           ;mcc_generated_files/spi2.c: 84:     SSP2BUF = data;
 13181  098A  0020               	movlb	0	; select bank0
 13182  098B  0820               	movf	SPI2_Exchange8bit@data,w
 13183  098C  0024               	movlb	4	; select bank4
 13184  098D  0099               	movwf	25	;volatile
 13185  098E                     l532:	
 13186                           ;mcc_generated_files/spi2.c: 89:     }
 13187                           
 13188                           ;mcc_generated_files/spi2.c: 86:     while(SSP2STATbits.BF == 0x0)
 13189                           
 13190                           
 13191                           ;mcc_generated_files/spi2.c: 86:     while(SSP2STATbits.BF == 0x0)
 13192  098E  0024               	movlb	4	; select bank4
 13193  098F  181C               	btfsc	28,0	;volatile
 13194  0990  2993               	goto	l5779
 13195  0991  0064               	clrwdt	;# 
 13196  0992  298E               	goto	l532
 13197  0993                     l5779:	
 13198                           
 13199                           ;mcc_generated_files/spi2.c: 91:     return (SSP2BUF);
 13200  0993  0819               	movf	25,w	;volatile
 13201  0994  0008               	return
 13202  0995                     __end_of_SPI2_Exchange8bit:	
 13203                           
 13204                           	psect	intentry
 13205  0004                     __pintentry:	
 13206 ;; *************** function _INTERRUPT_InterruptManager *****************
 13207 ;; Defined at:
 13208 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 13209 ;; Parameters:    Size  Location     Type
 13210 ;;		None
 13211 ;; Auto vars:     Size  Location     Type
 13212 ;;		None
 13213 ;; Return value:  Size  Location     Type
 13214 ;;                  1    wreg      void 
 13215 ;; Registers used:
 13216 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13217 ;; Tracked objects:
 13218 ;;		On entry : 0/0
 13219 ;;		On exit  : 0/0
 13220 ;;		Unchanged: 0/0
 13221 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13222 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13223 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13224 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13225 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13226 ;;Total ram usage:        0 bytes
 13227 ;; Hardware stack levels used:    1
 13228 ;; Hardware stack levels required when called:    4
 13229 ;; This function calls:
 13230 ;;		Absolute function
 13231 ;;		_PIN_MANAGER_IOC
 13232 ;;		_i2c_ISR
 13233 ;;		_i2c_busCollisionISR
 13234 ;; This function is called by:
 13235 ;;		Interrupt level 1
 13236 ;; This function uses a non-reentrant model
 13237 ;;
 13238                           
 13239  0004                     _INTERRUPT_InterruptManager:	
 13240                           
 13241                           ;incstack = 0
 13242  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 13243                           
 13244                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13245  0005  3180               	pagesel	$
 13246                           
 13247                           ;mcc_generated_files/interrupt_manager.c: 55:     if(PIE0bits.IOCIE == 1 && PIR0bits.IOC
      +                          IF == 1)
 13248  0006  0021               	movlb	1	; select bank1
 13249  0007  1E10               	btfss	16,4	;volatile
 13250  0008  2810               	goto	i1l245
 13251  0009  0020               	movlb	0	; select bank0
 13252  000A  1E10               	btfss	16,4	;volatile
 13253  000B  2810               	goto	i1l245
 13254                           
 13255                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         PIN_MANAGER_IOC();
 13256  000C  3188  2074  3180   	fcall	_PIN_MANAGER_IOC
 13257                           
 13258                           ;mcc_generated_files/interrupt_manager.c: 58:     }
 13259  000F  282A               	goto	i1l253
 13260  0010                     i1l245:	
 13261                           ;mcc_generated_files/interrupt_manager.c: 59:     else if(INTCONbits.PEIE == 1)
 13262                           
 13263  0010  1F0B               	btfss	11,6	;volatile
 13264  0011  282A               	goto	i1l253
 13265                           
 13266                           ;mcc_generated_files/interrupt_manager.c: 60:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 61:         if(PIE1bits.BCL1IE == 1 && PIR1bits.BCL1IF == 1)
 13267  0012  0021               	movlb	1	; select bank1
 13268  0013  1D11               	btfss	17,2	;volatile
 13269  0014  281E               	goto	i1l248
 13270  0015  0020               	movlb	0	; select bank0
 13271  0016  1D11               	btfss	17,2	;volatile
 13272  0017  281E               	goto	i1l248
 13273                           
 13274                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             i2c1_driver_busCollisionISR();
 13275  0018  086B               	movf	_i2c1_driver_busCollisionISR+1,w
 13276  0019  008A               	movwf	10
 13277  001A  086A               	movf	_i2c1_driver_busCollisionISR,w
 13278  001B  000A               	callw
 13279  001C  3180               	pagesel	$
 13280                           
 13281                           ;mcc_generated_files/interrupt_manager.c: 64:         }
 13282  001D  282A               	goto	i1l253
 13283  001E                     i1l248:	
 13284                           ;mcc_generated_files/interrupt_manager.c: 65:         else if(PIE1bits.SSP1IE == 1 && PI
      +                          R1bits.SSP1IF == 1)
 13285                           
 13286  001E  0021               	movlb	1	; select bank1
 13287  001F  1D91               	btfss	17,3	;volatile
 13288  0020  282A               	goto	i1l253
 13289  0021  0020               	movlb	0	; select bank0
 13290  0022  1D91               	btfss	17,3	;volatile
 13291  0023  282A               	goto	i1l253
 13292                           
 13293                           ;mcc_generated_files/interrupt_manager.c: 66:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 67:             i2c1_driver_i2cISR();
 13294  0024  0021               	movlb	1	; select bank1
 13295  0025  0865               	movf	(_i2c1_driver_i2cISR+1)^(0+128),w
 13296  0026  008A               	movwf	10
 13297  0027  0864               	movf	_i2c1_driver_i2cISR^(0+128),w
 13298  0028  000A               	callw
 13299  0029  3180               	pagesel	$
 13300  002A                     i1l253:	
 13301                           ;mcc_generated_files/interrupt_manager.c: 75:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 77:     }
 13302                           
 13303                           ;mcc_generated_files/interrupt_manager.c: 68:         }
 13304                           
 13305  002A  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 13306  002B  0009               	retfie
 13307  002C                     __end_of_INTERRUPT_InterruptManager:	
 13308                           
 13309                           	psect	text64
 13310  088E                     __ptext64:	
 13311 ;; *************** function _i2c_busCollisionISR *****************
 13312 ;; Defined at:
 13313 ;;		line 435 in file "mcc_generated_files/drivers/i2c_master.c"
 13314 ;; Parameters:    Size  Location     Type
 13315 ;;		None
 13316 ;; Auto vars:     Size  Location     Type
 13317 ;;		None
 13318 ;; Return value:  Size  Location     Type
 13319 ;;                  1    wreg      void 
 13320 ;; Registers used:
 13321 ;;		status,2, status,0, pclath, cstack
 13322 ;; Tracked objects:
 13323 ;;		On entry : 0/0
 13324 ;;		On exit  : 0/0
 13325 ;;		Unchanged: 0/0
 13326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13328 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13329 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13330 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13331 ;;Total ram usage:        0 bytes
 13332 ;; Hardware stack levels used:    1
 13333 ;; Hardware stack levels required when called:    1
 13334 ;; This function calls:
 13335 ;;		_i2c1_driver_clearBusCollision
 13336 ;; This function is called by:
 13337 ;;		_i2c_open
 13338 ;;		_INTERRUPT_InterruptManager
 13339 ;; This function uses a non-reentrant model
 13340 ;;
 13341                           
 13342                           
 13343                           ;psect for function _i2c_busCollisionISR
 13344  088E                     _i2c_busCollisionISR:	
 13345                           
 13346                           ;mcc_generated_files/drivers/i2c_master.c: 437:     i2c1_driver_clearBusCollision();
 13347                           
 13348                           ;incstack = 0
 13349                           ; Regs used in _i2c_busCollisionISR: [status,2+status,0+pclath+cstack]
 13350  088E  3188  208B         	fcall	_i2c1_driver_clearBusCollision
 13351  0890  0008               	return
 13352  0891                     __end_of_i2c_busCollisionISR:	
 13353                           
 13354                           	psect	text65
 13355  088B                     __ptext65:	
 13356 ;; *************** function _i2c1_driver_clearBusCollision *****************
 13357 ;; Defined at:
 13358 ;;		line 253 in file "mcc_generated_files/i2c1_driver.c"
 13359 ;; Parameters:    Size  Location     Type
 13360 ;;		None
 13361 ;; Auto vars:     Size  Location     Type
 13362 ;;		None
 13363 ;; Return value:  Size  Location     Type
 13364 ;;                  1    wreg      void 
 13365 ;; Registers used:
 13366 ;;		None
 13367 ;; Tracked objects:
 13368 ;;		On entry : 0/0
 13369 ;;		On exit  : 0/0
 13370 ;;		Unchanged: 0/0
 13371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13372 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13373 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13374 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13375 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13376 ;;Total ram usage:        0 bytes
 13377 ;; Hardware stack levels used:    1
 13378 ;; This function calls:
 13379 ;;		Nothing
 13380 ;; This function is called by:
 13381 ;;		_i2c_busCollisionISR
 13382 ;; This function uses a non-reentrant model
 13383 ;;
 13384                           
 13385                           
 13386                           ;psect for function _i2c1_driver_clearBusCollision
 13387  088B                     _i2c1_driver_clearBusCollision:	
 13388                           
 13389                           ;mcc_generated_files/i2c1_driver.c: 255:     PIR1bits.BCL1IF = 0;
 13390                           
 13391                           ;incstack = 0
 13392                           ; Regs used in _i2c1_driver_clearBusCollision: []
 13393  088B  0020               	movlb	0	; select bank0
 13394  088C  1111               	bcf	17,2	;volatile
 13395  088D  0008               	return
 13396  088E                     __end_of_i2c1_driver_clearBusCollision:	
 13397                           
 13398                           	psect	text66
 13399  0B15                     __ptext66:	
 13400 ;; *************** function _i2c_ISR *****************
 13401 ;; Defined at:
 13402 ;;		line 419 in file "mcc_generated_files/drivers/i2c_master.c"
 13403 ;; Parameters:    Size  Location     Type
 13404 ;;		None
 13405 ;; Auto vars:     Size  Location     Type
 13406 ;;		None
 13407 ;; Return value:  Size  Location     Type
 13408 ;;                  1    wreg      void 
 13409 ;; Registers used:
 13410 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13411 ;; Tracked objects:
 13412 ;;		On entry : 0/0
 13413 ;;		On exit  : 0/0
 13414 ;;		Unchanged: 0/0
 13415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13416 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13417 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13418 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13419 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13420 ;;Total ram usage:        3 bytes
 13421 ;; Hardware stack levels used:    1
 13422 ;; Hardware stack levels required when called:    3
 13423 ;; This function calls:
 13424 ;;		_do_I2C_DO_ACK
 13425 ;;		_do_I2C_DO_ADDRESS_NACK
 13426 ;;		_do_I2C_DO_NACK_RESTART
 13427 ;;		_do_I2C_DO_NACK_STOP
 13428 ;;		_do_I2C_IDLE
 13429 ;;		_do_I2C_RCEN
 13430 ;;		_do_I2C_RESET
 13431 ;;		_do_I2C_RX
 13432 ;;		_do_I2C_SEND_ADR_READ
 13433 ;;		_do_I2C_SEND_ADR_WRITE
 13434 ;;		_do_I2C_SEND_RESTART
 13435 ;;		_do_I2C_SEND_RESTART_READ
 13436 ;;		_do_I2C_SEND_RESTART_WRITE
 13437 ;;		_do_I2C_SEND_STOP
 13438 ;;		_do_I2C_TX
 13439 ;;		_do_I2C_TX_EMPTY
 13440 ;;		_i2c1_driver_isNACK
 13441 ;;		_mssp1_clearIRQ
 13442 ;; This function is called by:
 13443 ;;		_i2c_open
 13444 ;;		_i2c_poller
 13445 ;;		_INTERRUPT_InterruptManager
 13446 ;; This function uses a non-reentrant model
 13447 ;;
 13448                           
 13449                           
 13450                           ;psect for function _i2c_ISR
 13451  0B15                     _i2c_ISR:	
 13452                           
 13453                           ;mcc_generated_files/drivers/i2c_master.c: 421:     mssp1_clearIRQ();
 13454                           
 13455                           ;incstack = 0
 13456                           ; Regs used in _i2c_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13457  0B15  3188  2088  318B   	fcall	_mssp1_clearIRQ
 13458                           
 13459                           ;mcc_generated_files/drivers/i2c_master.c: 427:     if(i2c_status.addressNACKCheck && i2
      +                          c1_driver_isNACK())
 13460  0B18  0023               	movlb	3	; select bank3
 13461  0B19  1DA0               	btfss	_i2c_status^(0+384),3
 13462  0B1A  2B25               	goto	i1l5037
 13463  0B1B  3189  2116  318B   	fcall	_i2c1_driver_isNACK
 13464  0B1E  1C03               	btfss	3,0
 13465  0B1F  2B25               	goto	i1l5037
 13466                           
 13467                           ;mcc_generated_files/drivers/i2c_master.c: 428:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 429:         i2c_status.state = I2C_ADDRESS_NACK;
 13468  0B20  300F               	movlw	15
 13469  0B21  00F3               	movwf	??_i2c_ISR
 13470  0B22  0873               	movf	??_i2c_ISR,w
 13471  0B23  0023               	movlb	3	; select bank3
 13472  0B24  00A9               	movwf	(_i2c_status^(0+384)+9)
 13473  0B25                     i1l5037:	
 13474                           
 13475                           ;mcc_generated_files/drivers/i2c_master.c: 432:     i2c_status.state = fsmStateTable[i2c
      +                          _status.state]();
 13476  0B25  0023               	movlb	3	; select bank3
 13477  0B26  0829               	movf	(_i2c_status^(0+384)+9),w
 13478  0B27  00F3               	movwf	??_i2c_ISR
 13479  0B28  01F4               	clrf	??_i2c_ISR+1
 13480  0B29  35F3               	lslf	??_i2c_ISR,f
 13481  0B2A  0DF4               	rlf	??_i2c_ISR+1,f
 13482  0B2B  3000               	movlw	low (_fsmStateTable| (0+32768))
 13483  0B2C  0773               	addwf	??_i2c_ISR,w
 13484  0B2D  0084               	movwf	4
 13485  0B2E  3090               	movlw	high (_fsmStateTable| (0+32768))
 13486  0B2F  3D74               	addwfc	??_i2c_ISR+1,w
 13487  0B30  0085               	movwf	5
 13488  0B31  3F01               	moviw [1]fsr0
 13489  0B32  008A               	movwf	10
 13490  0B33  3F00               	moviw [0]fsr0
 13491  0B34  000A               	callw
 13492  0B35  318B               	pagesel	$
 13493  0B36  00F5               	movwf	??_i2c_ISR+2
 13494  0B37  0875               	movf	??_i2c_ISR+2,w
 13495  0B38  0023               	movlb	3	; select bank3
 13496  0B39  00A9               	movwf	(_i2c_status^(0+384)+9)
 13497  0B3A  0008               	return
 13498  0B3B                     __end_of_i2c_ISR:	
 13499                           
 13500                           	psect	text67
 13501  0888                     __ptext67:	
 13502 ;; *************** function _mssp1_clearIRQ *****************
 13503 ;; Defined at:
 13504 ;;		line 53 in file "mcc_generated_files/i2c1_driver.c"
 13505 ;; Parameters:    Size  Location     Type
 13506 ;;		None
 13507 ;; Auto vars:     Size  Location     Type
 13508 ;;		None
 13509 ;; Return value:  Size  Location     Type
 13510 ;;                  1    wreg      void 
 13511 ;; Registers used:
 13512 ;;		None
 13513 ;; Tracked objects:
 13514 ;;		On entry : 0/0
 13515 ;;		On exit  : 0/0
 13516 ;;		Unchanged: 0/0
 13517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13519 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13521 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13522 ;;Total ram usage:        0 bytes
 13523 ;; Hardware stack levels used:    1
 13524 ;; This function calls:
 13525 ;;		Nothing
 13526 ;; This function is called by:
 13527 ;;		_i2c_ISR
 13528 ;;		_i2c_open
 13529 ;;		_i2c_close
 13530 ;; This function uses a non-reentrant model
 13531 ;;
 13532                           
 13533                           
 13534                           ;psect for function _mssp1_clearIRQ
 13535  0888                     _mssp1_clearIRQ:	
 13536                           
 13537                           ;mcc_generated_files/i2c1_driver.c: 55:         SSP1STAT = 0x00;
 13538                           
 13539                           ;incstack = 0
 13540                           ; Regs used in _mssp1_clearIRQ: []
 13541  0888  0020               	movlb	0	; select bank0
 13542  0889  1191               	bcf	17,3	;volatile
 13543  088A  0008               	return
 13544  088B                     __end_of_mssp1_clearIRQ:	
 13545                           
 13546                           	psect	text68
 13547  0DC2                     __ptext68:	
 13548 ;; *************** function _do_I2C_RX *****************
 13549 ;; Defined at:
 13550 ;;		line 357 in file "mcc_generated_files/drivers/i2c_master.c"
 13551 ;; Parameters:    Size  Location     Type
 13552 ;;		None
 13553 ;; Auto vars:     Size  Location     Type
 13554 ;;		None
 13555 ;; Return value:  Size  Location     Type
 13556 ;;                  1    wreg      enum E7120
 13557 ;; Registers used:
 13558 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13559 ;; Tracked objects:
 13560 ;;		On entry : 0/0
 13561 ;;		On exit  : 0/0
 13562 ;;		Unchanged: 0/0
 13563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13564 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13565 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13566 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13567 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13568 ;;Total ram usage:        3 bytes
 13569 ;; Hardware stack levels used:    1
 13570 ;; Hardware stack levels required when called:    2
 13571 ;; This function calls:
 13572 ;;		_do_I2C_DO_NACK_RESTART
 13573 ;;		_do_I2C_DO_NACK_STOP
 13574 ;;		_i2c1_driver_sendACK
 13575 ;;		_returnReset
 13576 ;;		_returnStop
 13577 ;;		i1_i2c1_driver_getRXData
 13578 ;; This function is called by:
 13579 ;;		_i2c_ISR
 13580 ;; This function uses a non-reentrant model
 13581 ;;
 13582                           
 13583                           
 13584                           ;psect for function _do_I2C_RX
 13585  0DC2                     _do_I2C_RX:	
 13586                           
 13587                           ;mcc_generated_files/drivers/i2c_master.c: 359:     *i2c_status.data_ptr++ = i2c1_driver
      +                          _getRXData();
 13588                           
 13589                           ;incstack = 0
 13590                           ; Regs used in _do_I2C_RX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13591  0DC2  3188  2082  318D   	fcall	i1_i2c1_driver_getRXData
 13592  0DC5  00F0               	movwf	??_do_I2C_RX
 13593  0DC6  0023               	movlb	3	; select bank3
 13594  0DC7  0822               	movf	(low ((_i2c_status| (0+256)+2)))^(0+128),w
 13595  0DC8  0086               	movwf	6
 13596  0DC9  0187               	clrf	7
 13597  0DCA  0870               	movf	??_do_I2C_RX,w
 13598  0DCB  0081               	movwf	1
 13599  0DCC  3001               	movlw	1
 13600  0DCD  00F0               	movwf	??_do_I2C_RX
 13601  0DCE  0870               	movf	??_do_I2C_RX,w
 13602  0DCF  07A2               	addwf	(low ((_i2c_status| (0+256)+2)))^(0+128),f
 13603                           
 13604                           ;mcc_generated_files/drivers/i2c_master.c: 360:     if(--i2c_status.data_length)
 13605  0DD0  3001               	movlw	1
 13606  0DD1  02A3               	subwf	(_i2c_status^(0+384)+3),f
 13607  0DD2  3000               	movlw	0
 13608  0DD3  3BA4               	subwfb	((_i2c_status+1)^(0+384)+3),f
 13609  0DD4  0823               	movf	(_i2c_status^(0+384)+3),w
 13610  0DD5  0424               	iorwf	((_i2c_status+1)^(0+384)+3),w
 13611  0DD6  1903               	btfsc	3,2
 13612  0DD7  2DDC               	goto	i1l173
 13613                           
 13614                           ;mcc_generated_files/drivers/i2c_master.c: 361:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 362:         i2c1_driver_sendACK();
 13615  0DD8  3188  20AC         	fcall	_i2c1_driver_sendACK
 13616                           
 13617                           ;mcc_generated_files/drivers/i2c_master.c: 363:         return I2C_RCEN;
 13618  0DDA  3005               	movlw	5
 13619  0DDB  0008               	return
 13620  0DDC                     i1l173:	
 13621                           ;mcc_generated_files/drivers/i2c_master.c: 365:     else
 13622                           
 13623                           
 13624                           ;mcc_generated_files/drivers/i2c_master.c: 366:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 367:         i2c_status.bufferFree = 1;
 13625  0DDC  1520               	bsf	_i2c_status^(0+384),2
 13626                           
 13627                           ;mcc_generated_files/drivers/i2c_master.c: 368:         switch(i2c_status.callbackTable[
      +                          i2c_dataComplete](i2c_status.callbackPayload[i2c_dataComplete]))
 13628  0DDD  2DE4               	goto	i1l4561
 13629  0DDE                     i1l4551:	
 13630                           
 13631                           ;mcc_generated_files/drivers/i2c_master.c: 372:                 return do_I2C_DO_NACK_RE
      +                          START();
 13632  0DDE  3188  20CC         	fcall	_do_I2C_DO_NACK_RESTART
 13633  0DE0  0008               	return
 13634  0DE1                     i1l4555:	
 13635                           
 13636                           ;mcc_generated_files/drivers/i2c_master.c: 376:                 return do_I2C_DO_NACK_ST
      +                          OP();
 13637  0DE1  3188  20C8         	fcall	_do_I2C_DO_NACK_STOP
 13638  0DE3  0008               	return
 13639  0DE4                     i1l4561:	
 13640  0DE4  0837               	movf	(low ((_i2c_status| (0+256)+23)))^(0+128),w
 13641  0DE5  00F0               	movwf	??_do_I2C_RX
 13642  0DE6  0870               	movf	??_do_I2C_RX,w
 13643  0DE7  00F0               	movwf	returnReset@p
 13644  0DE8  300B               	movlw	11
 13645  0DE9  3EA0               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 13646  0DEA  0086               	movwf	6
 13647  0DEB  3001               	movlw	1	; select bank3/4
 13648  0DEC  0087               	movwf	7
 13649  0DED  3F41               	moviw [1]fsr1
 13650  0DEE  008A               	movwf	10
 13651  0DEF  3F40               	moviw [0]fsr1
 13652  0DF0  000A               	callw
 13653  0DF1  318D               	pagesel	$
 13654  0DF2  00F1               	movwf	??_do_I2C_RX+1
 13655  0DF3  01F2               	clrf	??_do_I2C_RX+2
 13656                           
 13657                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13658                           ; Switch size 1, requested type "simple"
 13659                           ; Number of cases is 1, Range of values is 0 to 0
 13660                           ; switch strategies available:
 13661                           ; Name         Instructions Cycles
 13662                           ; simple_byte            4     3 (average)
 13663                           ; direct_byte            8     6 (fixed)
 13664                           ; jumptable            260     6 (fixed)
 13665                           ;	Chosen strategy is simple_byte
 13666  0DF4  0872               	movf	??_do_I2C_RX+2,w
 13667  0DF5  3A00               	xorlw	0	; case 0
 13668  0DF6  1903               	skipnz
 13669  0DF7  2DF9               	goto	i1l7229
 13670  0DF8  2DE1               	goto	i1l4555
 13671  0DF9                     i1l7229:	
 13672                           
 13673                           ; Switch size 1, requested type "simple"
 13674                           ; Number of cases is 4, Range of values is 1 to 4
 13675                           ; switch strategies available:
 13676                           ; Name         Instructions Cycles
 13677                           ; simple_byte           13     7 (average)
 13678                           ; direct_byte           17     9 (fixed)
 13679                           ; jumptable            263     9 (fixed)
 13680                           ;	Chosen strategy is simple_byte
 13681  0DF9  0871               	movf	??_do_I2C_RX+1,w
 13682  0DFA  3A01               	xorlw	1	; case 1
 13683  0DFB  1903               	skipnz
 13684  0DFC  2DE1               	goto	i1l4555
 13685  0DFD  3A03               	xorlw	3	; case 2
 13686  0DFE  1903               	skipnz
 13687  0DFF  2DDE               	goto	i1l4551
 13688  0E00  3A01               	xorlw	1	; case 3
 13689  0E01  1903               	skipnz
 13690  0E02  2DDE               	goto	i1l4551
 13691  0E03  3A07               	xorlw	7	; case 4
 13692  0E04  1903               	skipnz
 13693  0E05  2DE1               	goto	i1l4555
 13694  0E06  2DE1               	goto	i1l4555
 13695  0E07  0008               	return
 13696  0E08                     __end_of_do_I2C_RX:	
 13697                           
 13698                           	psect	text69
 13699  0E52                     __ptext69:	
 13700 ;; *************** function _do_I2C_TX *****************
 13701 ;; Defined at:
 13702 ;;		line 333 in file "mcc_generated_files/drivers/i2c_master.c"
 13703 ;; Parameters:    Size  Location     Type
 13704 ;;		None
 13705 ;; Auto vars:     Size  Location     Type
 13706 ;;		None
 13707 ;; Return value:  Size  Location     Type
 13708 ;;                  1    wreg      enum E7120
 13709 ;; Registers used:
 13710 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13711 ;; Tracked objects:
 13712 ;;		On entry : 0/0
 13713 ;;		On exit  : 0/0
 13714 ;;		Unchanged: 0/0
 13715 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13716 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13717 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13718 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13719 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13720 ;;Total ram usage:        3 bytes
 13721 ;; Hardware stack levels used:    1
 13722 ;; Hardware stack levels required when called:    2
 13723 ;; This function calls:
 13724 ;;		_do_I2C_SEND_RESTART_READ
 13725 ;;		_do_I2C_SEND_RESTART_WRITE
 13726 ;;		_do_I2C_SEND_STOP
 13727 ;;		_i2c1_driver_isNACK
 13728 ;;		_returnReset
 13729 ;;		_returnStop
 13730 ;;		i1_i2c1_driver_TXData
 13731 ;; This function is called by:
 13732 ;;		_i2c_ISR
 13733 ;; This function uses a non-reentrant model
 13734 ;;
 13735                           
 13736                           
 13737                           ;psect for function _do_I2C_TX
 13738  0E52                     _do_I2C_TX:	
 13739                           
 13740                           ;mcc_generated_files/drivers/i2c_master.c: 335:     if(i2c1_driver_isNACK())
 13741                           
 13742                           ;incstack = 0
 13743                           ; Regs used in _do_I2C_TX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13744  0E52  3189  2116  318E   	fcall	_i2c1_driver_isNACK
 13745  0E55  1803               	btfsc	3,0
 13746  0E56  2E61               	goto	i1l4521
 13747  0E57  2E85               	goto	i1l157
 13748  0E58                     i1l4507:	
 13749                           
 13750                           ;mcc_generated_files/drivers/i2c_master.c: 340:                 return do_I2C_SEND_RESTA
      +                          RT_READ();
 13751  0E58  3188  20B4         	fcall	_do_I2C_SEND_RESTART_READ
 13752  0E5A  0008               	return
 13753  0E5B                     i1l4511:	
 13754                           
 13755                           ;mcc_generated_files/drivers/i2c_master.c: 342:                 return do_I2C_SEND_RESTA
      +                          RT_WRITE();
 13756  0E5B  3188  20B8         	fcall	_do_I2C_SEND_RESTART_WRITE
 13757  0E5D  0008               	return
 13758  0E5E                     i1l4515:	
 13759                           
 13760                           ;mcc_generated_files/drivers/i2c_master.c: 346:                 return do_I2C_SEND_STOP(
      +                          );
 13761  0E5E  3188  20C0         	fcall	_do_I2C_SEND_STOP
 13762  0E60  0008               	return
 13763  0E61                     i1l4521:	
 13764  0E61  0023               	movlb	3	; select bank3
 13765  0E62  083A               	movf	(low ((_i2c_status| (0+256)+26)))^(0+128),w
 13766  0E63  00F0               	movwf	??_do_I2C_TX
 13767  0E64  0870               	movf	??_do_I2C_TX,w
 13768  0E65  00F0               	movwf	returnReset@p
 13769  0E66  3011               	movlw	17
 13770  0E67  3EA0               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 13771  0E68  0086               	movwf	6
 13772  0E69  3001               	movlw	1	; select bank3/4
 13773  0E6A  0087               	movwf	7
 13774  0E6B  3F41               	moviw [1]fsr1
 13775  0E6C  008A               	movwf	10
 13776  0E6D  3F40               	moviw [0]fsr1
 13777  0E6E  000A               	callw
 13778  0E6F  318E               	pagesel	$
 13779  0E70  00F1               	movwf	??_do_I2C_TX+1
 13780  0E71  01F2               	clrf	??_do_I2C_TX+2
 13781                           
 13782                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13783                           ; Switch size 1, requested type "simple"
 13784                           ; Number of cases is 1, Range of values is 0 to 0
 13785                           ; switch strategies available:
 13786                           ; Name         Instructions Cycles
 13787                           ; simple_byte            4     3 (average)
 13788                           ; direct_byte            8     6 (fixed)
 13789                           ; jumptable            260     6 (fixed)
 13790                           ;	Chosen strategy is simple_byte
 13791  0E72  0872               	movf	??_do_I2C_TX+2,w
 13792  0E73  3A00               	xorlw	0	; case 0
 13793  0E74  1903               	skipnz
 13794  0E75  2E77               	goto	i1l7231
 13795  0E76  2E5E               	goto	i1l4515
 13796  0E77                     i1l7231:	
 13797                           
 13798                           ; Switch size 1, requested type "simple"
 13799                           ; Number of cases is 4, Range of values is 1 to 4
 13800                           ; switch strategies available:
 13801                           ; Name         Instructions Cycles
 13802                           ; simple_byte           13     7 (average)
 13803                           ; direct_byte           17     9 (fixed)
 13804                           ; jumptable            263     9 (fixed)
 13805                           ;	Chosen strategy is simple_byte
 13806  0E77  0871               	movf	??_do_I2C_TX+1,w
 13807  0E78  3A01               	xorlw	1	; case 1
 13808  0E79  1903               	skipnz
 13809  0E7A  2E5E               	goto	i1l4515
 13810  0E7B  3A03               	xorlw	3	; case 2
 13811  0E7C  1903               	skipnz
 13812  0E7D  2E58               	goto	i1l4507
 13813  0E7E  3A01               	xorlw	1	; case 3
 13814  0E7F  1903               	skipnz
 13815  0E80  2E5B               	goto	i1l4511
 13816  0E81  3A07               	xorlw	7	; case 4
 13817  0E82  1903               	skipnz
 13818  0E83  2E5E               	goto	i1l4515
 13819  0E84  2E5E               	goto	i1l4515
 13820  0E85                     i1l157:	
 13821                           ;mcc_generated_files/drivers/i2c_master.c: 349:     else
 13822                           
 13823                           
 13824                           ;mcc_generated_files/drivers/i2c_master.c: 350:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 351:         i2c_status.addressNACKCheck = 0;
 13825  0E85  0023               	movlb	3	; select bank3
 13826  0E86  11A0               	bcf	_i2c_status^(0+384),3
 13827                           
 13828                           ;mcc_generated_files/drivers/i2c_master.c: 352:         i2c1_driver_TXData(*i2c_status.d
      +                          ata_ptr++);
 13829  0E87  3002               	movlw	2
 13830  0E88  3EA0               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 13831  0E89  0086               	movwf	6
 13832  0E8A  3001               	movlw	1	; select bank3/4
 13833  0E8B  0087               	movwf	7
 13834  0E8C  3F40               	moviw [0]fsr1
 13835  0E8D  0084               	movwf	4
 13836  0E8E  0185               	clrf	5
 13837  0E8F  0A81               	incf	1,f
 13838  0E90  0800               	movf	0,w
 13839  0E91  3188  20D8  318E   	fcall	i1_i2c1_driver_TXData
 13840                           
 13841                           ;mcc_generated_files/drivers/i2c_master.c: 353:         return (--i2c_status.data_length
      +                          )?I2C_TX:I2C_TX_EMPTY;
 13842  0E94  3001               	movlw	1
 13843  0E95  0023               	movlb	3	; select bank3
 13844  0E96  02A3               	subwf	(_i2c_status^(0+384)+3),f
 13845  0E97  3000               	movlw	0
 13846  0E98  3BA4               	subwfb	((_i2c_status+1)^(0+384)+3),f
 13847  0E99  0823               	movf	(_i2c_status^(0+384)+3),w
 13848  0E9A  0424               	iorwf	((_i2c_status+1)^(0+384)+3),w
 13849  0E9B  1D03               	btfss	3,2
 13850  0E9C  2E9F               	goto	i1l4529
 13851  0E9D  3006               	movlw	6
 13852  0E9E  0008               	return
 13853  0E9F                     i1l4529:	
 13854  0E9F  3003               	movlw	3
 13855  0EA0  0008               	return
 13856  0EA1                     __end_of_do_I2C_TX:	
 13857                           
 13858                           	psect	text70
 13859  0C00                     __ptext70:	
 13860 ;; *************** function _do_I2C_DO_ADDRESS_NACK *****************
 13861 ;; Defined at:
 13862 ;;		line 319 in file "mcc_generated_files/drivers/i2c_master.c"
 13863 ;; Parameters:    Size  Location     Type
 13864 ;;		None
 13865 ;; Auto vars:     Size  Location     Type
 13866 ;;		None
 13867 ;; Return value:  Size  Location     Type
 13868 ;;                  1    wreg      enum E7120
 13869 ;; Registers used:
 13870 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13871 ;; Tracked objects:
 13872 ;;		On entry : 0/0
 13873 ;;		On exit  : 0/0
 13874 ;;		Unchanged: 0/0
 13875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13876 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13877 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13878 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13879 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13880 ;;Total ram usage:        3 bytes
 13881 ;; Hardware stack levels used:    1
 13882 ;; Hardware stack levels required when called:    2
 13883 ;; This function calls:
 13884 ;;		_do_I2C_SEND_RESTART
 13885 ;;		_do_I2C_SEND_STOP
 13886 ;;		_returnReset
 13887 ;;		_returnStop
 13888 ;; This function is called by:
 13889 ;;		_i2c_ISR
 13890 ;; This function uses a non-reentrant model
 13891 ;;
 13892                           
 13893                           
 13894                           ;psect for function _do_I2C_DO_ADDRESS_NACK
 13895  0C00                     _do_I2C_DO_ADDRESS_NACK:	
 13896                           
 13897                           ;mcc_generated_files/drivers/i2c_master.c: 321:     i2c_status.addressNACKCheck = 0;
 13898                           
 13899                           ;incstack = 0
 13900                           ; Regs used in _do_I2C_DO_ADDRESS_NACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13901  0C00  0023               	movlb	3	; select bank3
 13902  0C01  11A0               	bcf	_i2c_status^(0+384),3
 13903                           
 13904                           ;mcc_generated_files/drivers/i2c_master.c: 322:     i2c_status.error = I2C_FAIL;
 13905  0C02  3002               	movlw	2
 13906  0C03  00F0               	movwf	??_do_I2C_DO_ADDRESS_NACK
 13907  0C04  0870               	movf	??_do_I2C_DO_ADDRESS_NACK,w
 13908  0C05  00AA               	movwf	(_i2c_status^(0+384)+10)
 13909                           
 13910                           ;mcc_generated_files/drivers/i2c_master.c: 323:     switch(i2c_status.callbackTable[i2c_
      +                          addressNACK](i2c_status.callbackPayload[i2c_addressNACK]))
 13911  0C06  2C0D               	goto	i1l4495
 13912  0C07                     i1l4485:	
 13913                           
 13914                           ;mcc_generated_files/drivers/i2c_master.c: 327:             return do_I2C_SEND_RESTART()
      +                          ;
 13915  0C07  3188  20BC         	fcall	_do_I2C_SEND_RESTART
 13916  0C09  0008               	return
 13917  0C0A                     i1l4489:	
 13918                           
 13919                           ;mcc_generated_files/drivers/i2c_master.c: 329:             return do_I2C_SEND_STOP();
 13920  0C0A  3188  20C0         	fcall	_do_I2C_SEND_STOP
 13921  0C0C  0008               	return
 13922  0C0D                     i1l4495:	
 13923  0C0D  0839               	movf	(low ((_i2c_status| (0+256)+25)))^(0+128),w
 13924  0C0E  00F0               	movwf	??_do_I2C_DO_ADDRESS_NACK
 13925  0C0F  0870               	movf	??_do_I2C_DO_ADDRESS_NACK,w
 13926  0C10  00F0               	movwf	returnReset@p
 13927  0C11  300F               	movlw	15
 13928  0C12  3EA0               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 13929  0C13  0086               	movwf	6
 13930  0C14  3001               	movlw	1	; select bank3/4
 13931  0C15  0087               	movwf	7
 13932  0C16  3F41               	moviw [1]fsr1
 13933  0C17  008A               	movwf	10
 13934  0C18  3F40               	moviw [0]fsr1
 13935  0C19  000A               	callw
 13936  0C1A  318C               	pagesel	$
 13937  0C1B  00F1               	movwf	??_do_I2C_DO_ADDRESS_NACK+1
 13938  0C1C  01F2               	clrf	??_do_I2C_DO_ADDRESS_NACK+2
 13939                           
 13940                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13941                           ; Switch size 1, requested type "simple"
 13942                           ; Number of cases is 1, Range of values is 0 to 0
 13943                           ; switch strategies available:
 13944                           ; Name         Instructions Cycles
 13945                           ; simple_byte            4     3 (average)
 13946                           ; direct_byte            8     6 (fixed)
 13947                           ; jumptable            260     6 (fixed)
 13948                           ;	Chosen strategy is simple_byte
 13949  0C1D  0872               	movf	??_do_I2C_DO_ADDRESS_NACK+2,w
 13950  0C1E  3A00               	xorlw	0	; case 0
 13951  0C1F  1903               	skipnz
 13952  0C20  2C22               	goto	i1l7233
 13953  0C21  2C0A               	goto	i1l4489
 13954  0C22                     i1l7233:	
 13955                           
 13956                           ; Switch size 1, requested type "simple"
 13957                           ; Number of cases is 2, Range of values is 2 to 3
 13958                           ; switch strategies available:
 13959                           ; Name         Instructions Cycles
 13960                           ; simple_byte            7     4 (average)
 13961                           ; direct_byte           13     9 (fixed)
 13962                           ; jumptable            263     9 (fixed)
 13963                           ;	Chosen strategy is simple_byte
 13964  0C22  0871               	movf	??_do_I2C_DO_ADDRESS_NACK+1,w
 13965  0C23  3A02               	xorlw	2	; case 2
 13966  0C24  1903               	skipnz
 13967  0C25  2C07               	goto	i1l4485
 13968  0C26  3A01               	xorlw	1	; case 3
 13969  0C27  1903               	skipnz
 13970  0C28  2C07               	goto	i1l4485
 13971  0C29  2C0A               	goto	i1l4489
 13972  0C2A  0008               	return
 13973  0C2B                     __end_of_do_I2C_DO_ADDRESS_NACK:	
 13974                           
 13975                           	psect	text71
 13976  08CC                     __ptext71:	
 13977 ;; *************** function _do_I2C_DO_NACK_RESTART *****************
 13978 ;; Defined at:
 13979 ;;		line 311 in file "mcc_generated_files/drivers/i2c_master.c"
 13980 ;; Parameters:    Size  Location     Type
 13981 ;;		None
 13982 ;; Auto vars:     Size  Location     Type
 13983 ;;		None
 13984 ;; Return value:  Size  Location     Type
 13985 ;;                  1    wreg      enum E7120
 13986 ;; Registers used:
 13987 ;;		wreg, status,2, status,0, pclath, cstack
 13988 ;; Tracked objects:
 13989 ;;		On entry : 0/0
 13990 ;;		On exit  : 0/0
 13991 ;;		Unchanged: 0/0
 13992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13993 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13994 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13995 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13996 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13997 ;;Total ram usage:        0 bytes
 13998 ;; Hardware stack levels used:    1
 13999 ;; Hardware stack levels required when called:    1
 14000 ;; This function calls:
 14001 ;;		i1_i2c1_driver_sendNACK
 14002 ;; This function is called by:
 14003 ;;		_do_I2C_RX
 14004 ;;		_i2c_ISR
 14005 ;; This function uses a non-reentrant model
 14006 ;;
 14007                           
 14008                           
 14009                           ;psect for function _do_I2C_DO_NACK_RESTART
 14010  08CC                     _do_I2C_DO_NACK_RESTART:	
 14011                           
 14012                           ;mcc_generated_files/drivers/i2c_master.c: 313:     i2c1_driver_sendNACK();
 14013                           
 14014                           ;incstack = 0
 14015                           ; Regs used in _do_I2C_DO_NACK_RESTART: [wreg+status,2+status,0+pclath+cstack]
 14016  08CC  3188  20B0         	fcall	i1_i2c1_driver_sendNACK
 14017                           
 14018                           ;mcc_generated_files/drivers/i2c_master.c: 314:     return I2C_SEND_RESTART;
 14019  08CE  3009               	movlw	9
 14020  08CF  0008               	return
 14021  08D0                     __end_of_do_I2C_DO_NACK_RESTART:	
 14022                           
 14023                           	psect	text72
 14024  08C8                     __ptext72:	
 14025 ;; *************** function _do_I2C_DO_NACK_STOP *****************
 14026 ;; Defined at:
 14027 ;;		line 305 in file "mcc_generated_files/drivers/i2c_master.c"
 14028 ;; Parameters:    Size  Location     Type
 14029 ;;		None
 14030 ;; Auto vars:     Size  Location     Type
 14031 ;;		None
 14032 ;; Return value:  Size  Location     Type
 14033 ;;                  1    wreg      enum E7120
 14034 ;; Registers used:
 14035 ;;		wreg, status,2, status,0, pclath, cstack
 14036 ;; Tracked objects:
 14037 ;;		On entry : 0/0
 14038 ;;		On exit  : 0/0
 14039 ;;		Unchanged: 0/0
 14040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14041 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14042 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14043 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14044 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14045 ;;Total ram usage:        0 bytes
 14046 ;; Hardware stack levels used:    1
 14047 ;; Hardware stack levels required when called:    1
 14048 ;; This function calls:
 14049 ;;		i1_i2c1_driver_sendNACK
 14050 ;; This function is called by:
 14051 ;;		_do_I2C_RX
 14052 ;;		_i2c_ISR
 14053 ;; This function uses a non-reentrant model
 14054 ;;
 14055                           
 14056                           
 14057                           ;psect for function _do_I2C_DO_NACK_STOP
 14058  08C8                     _do_I2C_DO_NACK_STOP:	
 14059                           
 14060                           ;mcc_generated_files/drivers/i2c_master.c: 307:     i2c1_driver_sendNACK();
 14061                           
 14062                           ;incstack = 0
 14063                           ; Regs used in _do_I2C_DO_NACK_STOP: [wreg+status,2+status,0+pclath+cstack]
 14064  08C8  3188  20B0         	fcall	i1_i2c1_driver_sendNACK
 14065                           
 14066                           ;mcc_generated_files/drivers/i2c_master.c: 308:     return I2C_SEND_STOP;
 14067  08CA  300A               	movlw	10
 14068  08CB  0008               	return
 14069  08CC                     __end_of_do_I2C_DO_NACK_STOP:	
 14070                           
 14071                           	psect	text73
 14072  08C4                     __ptext73:	
 14073 ;; *************** function _do_I2C_DO_ACK *****************
 14074 ;; Defined at:
 14075 ;;		line 299 in file "mcc_generated_files/drivers/i2c_master.c"
 14076 ;; Parameters:    Size  Location     Type
 14077 ;;		None
 14078 ;; Auto vars:     Size  Location     Type
 14079 ;;		None
 14080 ;; Return value:  Size  Location     Type
 14081 ;;                  1    wreg      enum E7120
 14082 ;; Registers used:
 14083 ;;		wreg, status,2, status,0, pclath, cstack
 14084 ;; Tracked objects:
 14085 ;;		On entry : 0/0
 14086 ;;		On exit  : 0/0
 14087 ;;		Unchanged: 0/0
 14088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14089 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14090 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14091 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14092 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14093 ;;Total ram usage:        0 bytes
 14094 ;; Hardware stack levels used:    1
 14095 ;; Hardware stack levels required when called:    1
 14096 ;; This function calls:
 14097 ;;		_i2c1_driver_sendACK
 14098 ;; This function is called by:
 14099 ;;		_i2c_ISR
 14100 ;; This function uses a non-reentrant model
 14101 ;;
 14102                           
 14103                           
 14104                           ;psect for function _do_I2C_DO_ACK
 14105  08C4                     _do_I2C_DO_ACK:	
 14106                           
 14107                           ;mcc_generated_files/drivers/i2c_master.c: 301:     i2c1_driver_sendACK();
 14108                           
 14109                           ;incstack = 0
 14110                           ; Regs used in _do_I2C_DO_ACK: [wreg+status,2+status,0+pclath+cstack]
 14111  08C4  3188  20AC         	fcall	_i2c1_driver_sendACK
 14112                           
 14113                           ;mcc_generated_files/drivers/i2c_master.c: 302:     return I2C_RCEN;
 14114  08C6  3005               	movlw	5
 14115  08C7  0008               	return
 14116  08C8                     __end_of_do_I2C_DO_ACK:	
 14117                           
 14118                           	psect	text74
 14119  08E2                     __ptext74:	
 14120 ;; *************** function _do_I2C_RCEN *****************
 14121 ;; Defined at:
 14122 ;;		line 292 in file "mcc_generated_files/drivers/i2c_master.c"
 14123 ;; Parameters:    Size  Location     Type
 14124 ;;		None
 14125 ;; Auto vars:     Size  Location     Type
 14126 ;;		None
 14127 ;; Return value:  Size  Location     Type
 14128 ;;                  1    wreg      enum E7120
 14129 ;; Registers used:
 14130 ;;		wreg, status,2, status,0, pclath, cstack
 14131 ;; Tracked objects:
 14132 ;;		On entry : 0/0
 14133 ;;		On exit  : 0/0
 14134 ;;		Unchanged: 0/0
 14135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14136 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14137 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14139 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14140 ;;Total ram usage:        0 bytes
 14141 ;; Hardware stack levels used:    1
 14142 ;; Hardware stack levels required when called:    1
 14143 ;; This function calls:
 14144 ;;		i1_i2c1_driver_startRX
 14145 ;; This function is called by:
 14146 ;;		_i2c_ISR
 14147 ;; This function uses a non-reentrant model
 14148 ;;
 14149                           
 14150                           
 14151                           ;psect for function _do_I2C_RCEN
 14152  08E2                     _do_I2C_RCEN:	
 14153                           
 14154                           ;mcc_generated_files/drivers/i2c_master.c: 294:     i2c_status.addressNACKCheck = 0;
 14155                           
 14156                           ;incstack = 0
 14157                           ; Regs used in _do_I2C_RCEN: [wreg+status,2+status,0+pclath+cstack]
 14158  08E2  0023               	movlb	3	; select bank3
 14159  08E3  11A0               	bcf	_i2c_status^(0+384),3
 14160                           
 14161                           ;mcc_generated_files/drivers/i2c_master.c: 295:     i2c1_driver_startRX();
 14162  08E4  3188  207F         	fcall	i1_i2c1_driver_startRX
 14163                           
 14164                           ;mcc_generated_files/drivers/i2c_master.c: 296:     return I2C_RX;
 14165  08E6  3004               	movlw	4
 14166  08E7  0008               	return
 14167  08E8                     __end_of_do_I2C_RCEN:	
 14168                           
 14169                           	psect	text75
 14170  0901                     __ptext75:	
 14171 ;; *************** function _do_I2C_SEND_ADR_WRITE *****************
 14172 ;; Defined at:
 14173 ;;		line 285 in file "mcc_generated_files/drivers/i2c_master.c"
 14174 ;; Parameters:    Size  Location     Type
 14175 ;;		None
 14176 ;; Auto vars:     Size  Location     Type
 14177 ;;		None
 14178 ;; Return value:  Size  Location     Type
 14179 ;;                  1    wreg      enum E7120
 14180 ;; Registers used:
 14181 ;;		wreg, status,2, status,0, pclath, cstack
 14182 ;; Tracked objects:
 14183 ;;		On entry : 0/0
 14184 ;;		On exit  : 0/0
 14185 ;;		Unchanged: 0/0
 14186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14187 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14188 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14189 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14190 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14191 ;;Total ram usage:        0 bytes
 14192 ;; Hardware stack levels used:    1
 14193 ;; Hardware stack levels required when called:    1
 14194 ;; This function calls:
 14195 ;;		i1_i2c1_driver_TXData
 14196 ;; This function is called by:
 14197 ;;		_i2c_ISR
 14198 ;; This function uses a non-reentrant model
 14199 ;;
 14200                           
 14201                           
 14202                           ;psect for function _do_I2C_SEND_ADR_WRITE
 14203  0901                     _do_I2C_SEND_ADR_WRITE:	
 14204                           
 14205                           ;mcc_generated_files/drivers/i2c_master.c: 287:     i2c_status.addressNACKCheck = 1;
 14206                           
 14207                           ;incstack = 0
 14208                           ; Regs used in _do_I2C_SEND_ADR_WRITE: [wreg+status,2+status,0+pclath+cstack]
 14209  0901  0023               	movlb	3	; select bank3
 14210  0902  15A0               	bsf	_i2c_status^(0+384),3
 14211                           
 14212                           ;mcc_generated_files/drivers/i2c_master.c: 288:     i2c1_driver_TXData(i2c_status.addres
      +                          s << 1);
 14213  0903  3521               	lslf	(_i2c_status^(0+384)+1),w
 14214  0904  3188  20D8         	fcall	i1_i2c1_driver_TXData
 14215                           
 14216                           ;mcc_generated_files/drivers/i2c_master.c: 289:     return I2C_TX;
 14217  0906  3003               	movlw	3
 14218  0907  0008               	return
 14219  0908                     __end_of_do_I2C_SEND_ADR_WRITE:	
 14220                           
 14221                           	psect	text76
 14222  091E                     __ptext76:	
 14223 ;; *************** function _do_I2C_SEND_ADR_READ *****************
 14224 ;; Defined at:
 14225 ;;		line 278 in file "mcc_generated_files/drivers/i2c_master.c"
 14226 ;; Parameters:    Size  Location     Type
 14227 ;;		None
 14228 ;; Auto vars:     Size  Location     Type
 14229 ;;		None
 14230 ;; Return value:  Size  Location     Type
 14231 ;;                  1    wreg      enum E7120
 14232 ;; Registers used:
 14233 ;;		wreg, status,2, status,0, pclath, cstack
 14234 ;; Tracked objects:
 14235 ;;		On entry : 0/0
 14236 ;;		On exit  : 0/0
 14237 ;;		Unchanged: 0/0
 14238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14239 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14240 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14241 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14242 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14243 ;;Total ram usage:        0 bytes
 14244 ;; Hardware stack levels used:    1
 14245 ;; Hardware stack levels required when called:    1
 14246 ;; This function calls:
 14247 ;;		i1_i2c1_driver_TXData
 14248 ;; This function is called by:
 14249 ;;		_i2c_ISR
 14250 ;; This function uses a non-reentrant model
 14251 ;;
 14252                           
 14253                           
 14254                           ;psect for function _do_I2C_SEND_ADR_READ
 14255  091E                     _do_I2C_SEND_ADR_READ:	
 14256                           
 14257                           ;mcc_generated_files/drivers/i2c_master.c: 280:     i2c_status.addressNACKCheck = 1;
 14258                           
 14259                           ;incstack = 0
 14260                           ; Regs used in _do_I2C_SEND_ADR_READ: [wreg+status,2+status,0+pclath+cstack]
 14261  091E  0023               	movlb	3	; select bank3
 14262  091F  15A0               	bsf	_i2c_status^(0+384),3
 14263                           
 14264                           ;mcc_generated_files/drivers/i2c_master.c: 281:     i2c1_driver_TXData(i2c_status.addres
      +                          s << 1 | 1);
 14265  0920  1403               	setc
 14266  0921  0D21               	rlf	(_i2c_status^(0+384)+1),w
 14267  0922  3188  20D8         	fcall	i1_i2c1_driver_TXData
 14268                           
 14269                           ;mcc_generated_files/drivers/i2c_master.c: 282:     return I2C_RCEN;
 14270  0924  3005               	movlw	5
 14271  0925  0008               	return
 14272  0926                     __end_of_do_I2C_SEND_ADR_READ:	
 14273                           
 14274                           	psect	text77
 14275  08C0                     __ptext77:	
 14276 ;; *************** function _do_I2C_SEND_STOP *****************
 14277 ;; Defined at:
 14278 ;;		line 272 in file "mcc_generated_files/drivers/i2c_master.c"
 14279 ;; Parameters:    Size  Location     Type
 14280 ;;		None
 14281 ;; Auto vars:     Size  Location     Type
 14282 ;;		None
 14283 ;; Return value:  Size  Location     Type
 14284 ;;                  1    wreg      enum E7120
 14285 ;; Registers used:
 14286 ;;		wreg, status,2, status,0, pclath, cstack
 14287 ;; Tracked objects:
 14288 ;;		On entry : 0/0
 14289 ;;		On exit  : 0/0
 14290 ;;		Unchanged: 0/0
 14291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14292 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14293 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14294 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14295 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14296 ;;Total ram usage:        0 bytes
 14297 ;; Hardware stack levels used:    1
 14298 ;; Hardware stack levels required when called:    1
 14299 ;; This function calls:
 14300 ;;		i1_i2c1_driver_stop
 14301 ;; This function is called by:
 14302 ;;		_do_I2C_DO_ADDRESS_NACK
 14303 ;;		_do_I2C_TX
 14304 ;;		_do_I2C_TX_EMPTY
 14305 ;;		_i2c_ISR
 14306 ;; This function uses a non-reentrant model
 14307 ;;
 14308                           
 14309                           
 14310                           ;psect for function _do_I2C_SEND_STOP
 14311  08C0                     _do_I2C_SEND_STOP:	
 14312                           
 14313                           ;mcc_generated_files/drivers/i2c_master.c: 274:     i2c1_driver_stop();
 14314                           
 14315                           ;incstack = 0
 14316                           ; Regs used in _do_I2C_SEND_STOP: [wreg+status,2+status,0+pclath+cstack]
 14317  08C0  3188  207C         	fcall	i1_i2c1_driver_stop
 14318                           
 14319                           ;mcc_generated_files/drivers/i2c_master.c: 275:     return I2C_IDLE;
 14320  08C2  3000               	movlw	0
 14321  08C3  0008               	return
 14322  08C4                     __end_of_do_I2C_SEND_STOP:	
 14323                           
 14324                           	psect	text78
 14325  08BC                     __ptext78:	
 14326 ;; *************** function _do_I2C_SEND_RESTART *****************
 14327 ;; Defined at:
 14328 ;;		line 266 in file "mcc_generated_files/drivers/i2c_master.c"
 14329 ;; Parameters:    Size  Location     Type
 14330 ;;		None
 14331 ;; Auto vars:     Size  Location     Type
 14332 ;;		None
 14333 ;; Return value:  Size  Location     Type
 14334 ;;                  1    wreg      enum E7120
 14335 ;; Registers used:
 14336 ;;		wreg, status,2, status,0, pclath, cstack
 14337 ;; Tracked objects:
 14338 ;;		On entry : 0/0
 14339 ;;		On exit  : 0/0
 14340 ;;		Unchanged: 0/0
 14341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14342 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14343 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14344 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14345 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14346 ;;Total ram usage:        0 bytes
 14347 ;; Hardware stack levels used:    1
 14348 ;; Hardware stack levels required when called:    1
 14349 ;; This function calls:
 14350 ;;		i1_i2c1_driver_restart
 14351 ;; This function is called by:
 14352 ;;		_do_I2C_DO_ADDRESS_NACK
 14353 ;;		_do_I2C_TX_EMPTY
 14354 ;;		_i2c_ISR
 14355 ;; This function uses a non-reentrant model
 14356 ;;
 14357                           
 14358                           
 14359                           ;psect for function _do_I2C_SEND_RESTART
 14360  08BC                     _do_I2C_SEND_RESTART:	
 14361                           
 14362                           ;mcc_generated_files/drivers/i2c_master.c: 268:     i2c1_driver_restart();
 14363                           
 14364                           ;incstack = 0
 14365                           ; Regs used in _do_I2C_SEND_RESTART: [wreg+status,2+status,0+pclath+cstack]
 14366  08BC  3188  2079         	fcall	i1_i2c1_driver_restart
 14367                           
 14368                           ;mcc_generated_files/drivers/i2c_master.c: 269:     return I2C_SEND_ADR_READ;
 14369  08BE  3001               	movlw	1
 14370  08BF  0008               	return
 14371  08C0                     __end_of_do_I2C_SEND_RESTART:	
 14372                           
 14373                           	psect	text79
 14374  08B8                     __ptext79:	
 14375 ;; *************** function _do_I2C_SEND_RESTART_WRITE *****************
 14376 ;; Defined at:
 14377 ;;		line 260 in file "mcc_generated_files/drivers/i2c_master.c"
 14378 ;; Parameters:    Size  Location     Type
 14379 ;;		None
 14380 ;; Auto vars:     Size  Location     Type
 14381 ;;		None
 14382 ;; Return value:  Size  Location     Type
 14383 ;;                  1    wreg      enum E7120
 14384 ;; Registers used:
 14385 ;;		wreg, status,2, status,0, pclath, cstack
 14386 ;; Tracked objects:
 14387 ;;		On entry : 0/0
 14388 ;;		On exit  : 0/0
 14389 ;;		Unchanged: 0/0
 14390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14392 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14394 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14395 ;;Total ram usage:        0 bytes
 14396 ;; Hardware stack levels used:    1
 14397 ;; Hardware stack levels required when called:    1
 14398 ;; This function calls:
 14399 ;;		i1_i2c1_driver_restart
 14400 ;; This function is called by:
 14401 ;;		_do_I2C_TX
 14402 ;;		_i2c_ISR
 14403 ;; This function uses a non-reentrant model
 14404 ;;
 14405                           
 14406                           
 14407                           ;psect for function _do_I2C_SEND_RESTART_WRITE
 14408  08B8                     _do_I2C_SEND_RESTART_WRITE:	
 14409                           
 14410                           ;mcc_generated_files/drivers/i2c_master.c: 262:     i2c1_driver_restart();
 14411                           
 14412                           ;incstack = 0
 14413                           ; Regs used in _do_I2C_SEND_RESTART_WRITE: [wreg+status,2+status,0+pclath+cstack]
 14414  08B8  3188  2079         	fcall	i1_i2c1_driver_restart
 14415                           
 14416                           ;mcc_generated_files/drivers/i2c_master.c: 263:     return I2C_SEND_ADR_WRITE;
 14417  08BA  3002               	movlw	2
 14418  08BB  0008               	return
 14419  08BC                     __end_of_do_I2C_SEND_RESTART_WRITE:	
 14420                           
 14421                           	psect	text80
 14422  08B4                     __ptext80:	
 14423 ;; *************** function _do_I2C_SEND_RESTART_READ *****************
 14424 ;; Defined at:
 14425 ;;		line 254 in file "mcc_generated_files/drivers/i2c_master.c"
 14426 ;; Parameters:    Size  Location     Type
 14427 ;;		None
 14428 ;; Auto vars:     Size  Location     Type
 14429 ;;		None
 14430 ;; Return value:  Size  Location     Type
 14431 ;;                  1    wreg      enum E7120
 14432 ;; Registers used:
 14433 ;;		wreg, status,2, status,0, pclath, cstack
 14434 ;; Tracked objects:
 14435 ;;		On entry : 0/0
 14436 ;;		On exit  : 0/0
 14437 ;;		Unchanged: 0/0
 14438 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14440 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14441 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14442 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14443 ;;Total ram usage:        0 bytes
 14444 ;; Hardware stack levels used:    1
 14445 ;; Hardware stack levels required when called:    1
 14446 ;; This function calls:
 14447 ;;		i1_i2c1_driver_restart
 14448 ;; This function is called by:
 14449 ;;		_do_I2C_TX
 14450 ;;		_i2c_ISR
 14451 ;; This function uses a non-reentrant model
 14452 ;;
 14453                           
 14454                           
 14455                           ;psect for function _do_I2C_SEND_RESTART_READ
 14456  08B4                     _do_I2C_SEND_RESTART_READ:	
 14457                           
 14458                           ;mcc_generated_files/drivers/i2c_master.c: 256:     i2c1_driver_restart();
 14459                           
 14460                           ;incstack = 0
 14461                           ; Regs used in _do_I2C_SEND_RESTART_READ: [wreg+status,2+status,0+pclath+cstack]
 14462  08B4  3188  2079         	fcall	i1_i2c1_driver_restart
 14463                           
 14464                           ;mcc_generated_files/drivers/i2c_master.c: 257:     return I2C_SEND_ADR_READ;
 14465  08B6  3001               	movlw	1
 14466  08B7  0008               	return
 14467  08B8                     __end_of_do_I2C_SEND_RESTART_READ:	
 14468                           
 14469                           	psect	text81
 14470  08DD                     __ptext81:	
 14471 ;; *************** function _do_I2C_IDLE *****************
 14472 ;; Defined at:
 14473 ;;		line 247 in file "mcc_generated_files/drivers/i2c_master.c"
 14474 ;; Parameters:    Size  Location     Type
 14475 ;;		None
 14476 ;; Auto vars:     Size  Location     Type
 14477 ;;		None
 14478 ;; Return value:  Size  Location     Type
 14479 ;;                  1    wreg      enum E7120
 14480 ;; Registers used:
 14481 ;;		wreg, status,2
 14482 ;; Tracked objects:
 14483 ;;		On entry : 0/0
 14484 ;;		On exit  : 0/0
 14485 ;;		Unchanged: 0/0
 14486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14487 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14488 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14489 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14490 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14491 ;;Total ram usage:        0 bytes
 14492 ;; Hardware stack levels used:    1
 14493 ;; This function calls:
 14494 ;;		Nothing
 14495 ;; This function is called by:
 14496 ;;		_i2c_ISR
 14497 ;; This function uses a non-reentrant model
 14498 ;;
 14499                           
 14500                           
 14501                           ;psect for function _do_I2C_IDLE
 14502  08DD                     _do_I2C_IDLE:	
 14503                           
 14504                           ;mcc_generated_files/drivers/i2c_master.c: 249:     i2c_status.busy = 0;
 14505                           
 14506                           ;incstack = 0
 14507                           ; Regs used in _do_I2C_IDLE: [wreg+status,2]
 14508  08DD  0023               	movlb	3	; select bank3
 14509  08DE  1020               	bcf	_i2c_status^(0+384),0
 14510                           
 14511                           ;mcc_generated_files/drivers/i2c_master.c: 250:     i2c_status.error = I2C_NOERR;
 14512  08DF  01AA               	clrf	(_i2c_status^(0+384)+10)
 14513                           
 14514                           ;mcc_generated_files/drivers/i2c_master.c: 251:     return I2C_RESET;
 14515  08E0  300E               	movlw	14
 14516  08E1  0008               	return
 14517  08E2                     __end_of_do_I2C_IDLE:	
 14518                           
 14519                           	psect	text82
 14520  08FA                     __ptext82:	
 14521 ;; *************** function _do_I2C_RESET *****************
 14522 ;; Defined at:
 14523 ;;		line 239 in file "mcc_generated_files/drivers/i2c_master.c"
 14524 ;; Parameters:    Size  Location     Type
 14525 ;;		None
 14526 ;; Auto vars:     Size  Location     Type
 14527 ;;		None
 14528 ;; Return value:  Size  Location     Type
 14529 ;;                  1    wreg      enum E7120
 14530 ;; Registers used:
 14531 ;;		wreg, status,2, status,0, pclath, cstack
 14532 ;; Tracked objects:
 14533 ;;		On entry : 0/0
 14534 ;;		On exit  : 0/0
 14535 ;;		Unchanged: 0/0
 14536 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14537 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14538 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14539 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14540 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14541 ;;Total ram usage:        0 bytes
 14542 ;; Hardware stack levels used:    1
 14543 ;; Hardware stack levels required when called:    1
 14544 ;; This function calls:
 14545 ;;		_i2c1_driver_resetBus
 14546 ;; This function is called by:
 14547 ;;		_i2c_ISR
 14548 ;; This function uses a non-reentrant model
 14549 ;;
 14550                           
 14551                           
 14552                           ;psect for function _do_I2C_RESET
 14553  08FA                     _do_I2C_RESET:	
 14554                           
 14555                           ;mcc_generated_files/drivers/i2c_master.c: 241:     i2c1_driver_resetBus();
 14556                           
 14557                           ;incstack = 0
 14558                           ; Regs used in _do_I2C_RESET: [wreg+status,2+status,0+pclath+cstack]
 14559  08FA  3188  2075         	fcall	_i2c1_driver_resetBus
 14560                           
 14561                           ;mcc_generated_files/drivers/i2c_master.c: 242:     i2c_status.busy = 0;
 14562  08FC  0023               	movlb	3	; select bank3
 14563  08FD  1020               	bcf	_i2c_status^(0+384),0
 14564                           
 14565                           ;mcc_generated_files/drivers/i2c_master.c: 243:     i2c_status.error = I2C_NOERR;
 14566  08FE  01AA               	clrf	(_i2c_status^(0+384)+10)
 14567                           
 14568                           ;mcc_generated_files/drivers/i2c_master.c: 244:     return I2C_RESET;
 14569  08FF  300E               	movlw	14
 14570  0900  0008               	return
 14571  0901                     __end_of_do_I2C_RESET:	
 14572                           
 14573                           	psect	text83
 14574  0C84                     __ptext83:	
 14575 ;; *************** function _do_I2C_TX_EMPTY *****************
 14576 ;; Defined at:
 14577 ;;		line 382 in file "mcc_generated_files/drivers/i2c_master.c"
 14578 ;; Parameters:    Size  Location     Type
 14579 ;;		None
 14580 ;; Auto vars:     Size  Location     Type
 14581 ;;		None
 14582 ;; Return value:  Size  Location     Type
 14583 ;;                  1    wreg      enum E7120
 14584 ;; Registers used:
 14585 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14586 ;; Tracked objects:
 14587 ;;		On entry : 0/0
 14588 ;;		On exit  : 0/0
 14589 ;;		Unchanged: 0/0
 14590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14591 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14592 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14593 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14594 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14595 ;;Total ram usage:        3 bytes
 14596 ;; Hardware stack levels used:    1
 14597 ;; Hardware stack levels required when called:    2
 14598 ;; This function calls:
 14599 ;;		_do_I2C_SEND_RESTART
 14600 ;;		_do_I2C_SEND_STOP
 14601 ;;		_mssp1_setIRQ
 14602 ;;		_returnReset
 14603 ;;		_returnStop
 14604 ;; This function is called by:
 14605 ;;		_i2c_ISR
 14606 ;; This function uses a non-reentrant model
 14607 ;;
 14608                           
 14609                           
 14610                           ;psect for function _do_I2C_TX_EMPTY
 14611  0C84                     _do_I2C_TX_EMPTY:	
 14612                           
 14613                           ;mcc_generated_files/drivers/i2c_master.c: 384:     i2c_status.bufferFree = 1;
 14614                           
 14615                           ;incstack = 0
 14616                           ; Regs used in _do_I2C_TX_EMPTY: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14617  0C84  0023               	movlb	3	; select bank3
 14618  0C85  1520               	bsf	_i2c_status^(0+384),2
 14619                           
 14620                           ;mcc_generated_files/drivers/i2c_master.c: 385:     switch(i2c_status.callbackTable[i2c_
      +                          dataComplete](i2c_status.callbackPayload[i2c_dataComplete]))
 14621  0C86  2C91               	goto	i1l4587
 14622  0C87                     i1l4571:	
 14623                           
 14624                           ;mcc_generated_files/drivers/i2c_master.c: 389:             return do_I2C_SEND_RESTART()
      +                          ;
 14625  0C87  3188  20BC         	fcall	_do_I2C_SEND_RESTART
 14626  0C89  0008               	return
 14627  0C8A                     i1l4575:	
 14628                           
 14629                           ;mcc_generated_files/drivers/i2c_master.c: 391:             mssp1_setIRQ();
 14630  0C8A  3188  2085         	fcall	_mssp1_setIRQ
 14631                           
 14632                           ;mcc_generated_files/drivers/i2c_master.c: 392:             return I2C_TX;
 14633  0C8C  3003               	movlw	3
 14634  0C8D  0008               	return
 14635  0C8E                     i1l4581:	
 14636                           
 14637                           ;mcc_generated_files/drivers/i2c_master.c: 395:             return do_I2C_SEND_STOP();
 14638  0C8E  3188  20C0         	fcall	_do_I2C_SEND_STOP
 14639  0C90  0008               	return
 14640  0C91                     i1l4587:	
 14641  0C91  0837               	movf	(low ((_i2c_status| (0+256)+23)))^(0+128),w
 14642  0C92  00F0               	movwf	??_do_I2C_TX_EMPTY
 14643  0C93  0870               	movf	??_do_I2C_TX_EMPTY,w
 14644  0C94  00F0               	movwf	returnReset@p
 14645  0C95  300B               	movlw	11
 14646  0C96  3EA0               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 14647  0C97  0086               	movwf	6
 14648  0C98  3001               	movlw	1	; select bank3/4
 14649  0C99  0087               	movwf	7
 14650  0C9A  3F41               	moviw [1]fsr1
 14651  0C9B  008A               	movwf	10
 14652  0C9C  3F40               	moviw [0]fsr1
 14653  0C9D  000A               	callw
 14654  0C9E  318C               	pagesel	$
 14655  0C9F  00F1               	movwf	??_do_I2C_TX_EMPTY+1
 14656  0CA0  01F2               	clrf	??_do_I2C_TX_EMPTY+2
 14657                           
 14658                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14659                           ; Switch size 1, requested type "simple"
 14660                           ; Number of cases is 1, Range of values is 0 to 0
 14661                           ; switch strategies available:
 14662                           ; Name         Instructions Cycles
 14663                           ; simple_byte            4     3 (average)
 14664                           ; direct_byte            8     6 (fixed)
 14665                           ; jumptable            260     6 (fixed)
 14666                           ;	Chosen strategy is simple_byte
 14667  0CA1  0872               	movf	??_do_I2C_TX_EMPTY+2,w
 14668  0CA2  3A00               	xorlw	0	; case 0
 14669  0CA3  1903               	skipnz
 14670  0CA4  2CA6               	goto	i1l7235
 14671  0CA5  2C8E               	goto	i1l4581
 14672  0CA6                     i1l7235:	
 14673                           
 14674                           ; Switch size 1, requested type "simple"
 14675                           ; Number of cases is 4, Range of values is 1 to 4
 14676                           ; switch strategies available:
 14677                           ; Name         Instructions Cycles
 14678                           ; simple_byte           13     7 (average)
 14679                           ; direct_byte           17     9 (fixed)
 14680                           ; jumptable            263     9 (fixed)
 14681                           ;	Chosen strategy is simple_byte
 14682  0CA6  0871               	movf	??_do_I2C_TX_EMPTY+1,w
 14683  0CA7  3A01               	xorlw	1	; case 1
 14684  0CA8  1903               	skipnz
 14685  0CA9  2C8E               	goto	i1l4581
 14686  0CAA  3A03               	xorlw	3	; case 2
 14687  0CAB  1903               	skipnz
 14688  0CAC  2C87               	goto	i1l4571
 14689  0CAD  3A01               	xorlw	1	; case 3
 14690  0CAE  1903               	skipnz
 14691  0CAF  2C87               	goto	i1l4571
 14692  0CB0  3A07               	xorlw	7	; case 4
 14693  0CB1  1903               	skipnz
 14694  0CB2  2C8A               	goto	i1l4575
 14695  0CB3  2C8E               	goto	i1l4581
 14696  0CB4  0008               	return
 14697  0CB5                     __end_of_do_I2C_TX_EMPTY:	
 14698                           
 14699                           	psect	text84
 14700  0885                     __ptext84:	
 14701 ;; *************** function _mssp1_setIRQ *****************
 14702 ;; Defined at:
 14703 ;;		line 58 in file "mcc_generated_files/i2c1_driver.c"
 14704 ;; Parameters:    Size  Location     Type
 14705 ;;		None
 14706 ;; Auto vars:     Size  Location     Type
 14707 ;;		None
 14708 ;; Return value:  Size  Location     Type
 14709 ;;                  1    wreg      void 
 14710 ;; Registers used:
 14711 ;;		None
 14712 ;; Tracked objects:
 14713 ;;		On entry : 0/0
 14714 ;;		On exit  : 0/0
 14715 ;;		Unchanged: 0/0
 14716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14717 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14718 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14719 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14720 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14721 ;;Total ram usage:        0 bytes
 14722 ;; Hardware stack levels used:    1
 14723 ;; This function calls:
 14724 ;;		Nothing
 14725 ;; This function is called by:
 14726 ;;		_do_I2C_TX_EMPTY
 14727 ;; This function uses a non-reentrant model
 14728 ;;
 14729                           
 14730                           
 14731                           ;psect for function _mssp1_setIRQ
 14732  0885                     _mssp1_setIRQ:	
 14733                           
 14734                           ;mcc_generated_files/i2c1_driver.c: 60:     }
 14735                           
 14736                           ;incstack = 0
 14737                           ; Regs used in _mssp1_setIRQ: []
 14738  0885  0020               	movlb	0	; select bank0
 14739  0886  1591               	bsf	17,3	;volatile
 14740  0887  0008               	return
 14741  0888                     __end_of_mssp1_setIRQ:	
 14742                           
 14743                           	psect	text85
 14744  0916                     __ptext85:	
 14745 ;; *************** function _i2c1_driver_isNACK *****************
 14746 ;; Defined at:
 14747 ;;		line 161 in file "mcc_generated_files/i2c1_driver.c"
 14748 ;; Parameters:    Size  Location     Type
 14749 ;;		None
 14750 ;; Auto vars:     Size  Location     Type
 14751 ;;		None
 14752 ;; Return value:  Size  Location     Type
 14753 ;;		None               void
 14754 ;; Registers used:
 14755 ;;		wreg, status,2, status,0
 14756 ;; Tracked objects:
 14757 ;;		On entry : 0/0
 14758 ;;		On exit  : 0/0
 14759 ;;		Unchanged: 0/0
 14760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14761 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14762 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14763 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14764 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14765 ;;Total ram usage:        1 bytes
 14766 ;; Hardware stack levels used:    1
 14767 ;; This function calls:
 14768 ;;		Nothing
 14769 ;; This function is called by:
 14770 ;;		_do_I2C_TX
 14771 ;;		_i2c_ISR
 14772 ;; This function uses a non-reentrant model
 14773 ;;
 14774                           
 14775                           
 14776                           ;psect for function _i2c1_driver_isNACK
 14777  0916                     _i2c1_driver_isNACK:	
 14778                           
 14779                           ;mcc_generated_files/i2c1_driver.c: 163:     return SSP1CON2bits.ACKSTAT;
 14780                           
 14781                           ;incstack = 0
 14782                           ; Regs used in _i2c1_driver_isNACK: [wreg+status,2+status,0]
 14783  0916  0024               	movlb	4	; select bank4
 14784  0917  0E16               	swapf	22,w	;volatile
 14785  0918  0C89               	rrf	9,f
 14786  0919  0C89               	rrf	9,f
 14787  091A  3901               	andlw	1
 14788  091B  00F0               	movwf	??_i2c1_driver_isNACK
 14789  091C  0C70               	rrf	??_i2c1_driver_isNACK,w
 14790  091D  0008               	return
 14791  091E                     __end_of_i2c1_driver_isNACK:	
 14792                           
 14793                           	psect	text86
 14794  08D8                     __ptext86:	
 14795 ;; *************** function i1_i2c1_driver_TXData *****************
 14796 ;; Defined at:
 14797 ;;		line 186 in file "mcc_generated_files/i2c1_driver.c"
 14798 ;; Parameters:    Size  Location     Type
 14799 ;;  d               1    wreg     unsigned char 
 14800 ;; Auto vars:     Size  Location     Type
 14801 ;;  d               1    0[COMMON] unsigned char 
 14802 ;; Return value:  Size  Location     Type
 14803 ;;                  1    wreg      void 
 14804 ;; Registers used:
 14805 ;;		wreg
 14806 ;; Tracked objects:
 14807 ;;		On entry : 0/0
 14808 ;;		On exit  : 0/0
 14809 ;;		Unchanged: 0/0
 14810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14812 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14813 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14814 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14815 ;;Total ram usage:        1 bytes
 14816 ;; Hardware stack levels used:    1
 14817 ;; This function calls:
 14818 ;;		Nothing
 14819 ;; This function is called by:
 14820 ;;		_do_I2C_SEND_ADR_READ
 14821 ;;		_do_I2C_SEND_ADR_WRITE
 14822 ;;		_do_I2C_TX
 14823 ;; This function uses a non-reentrant model
 14824 ;;
 14825                           
 14826                           
 14827                           ;psect for function i1_i2c1_driver_TXData
 14828  08D8                     i1_i2c1_driver_TXData:	
 14829                           
 14830                           ;incstack = 0
 14831                           ; Regs used in i1_i2c1_driver_TXData: [wreg]
 14832                           ;i1i2c1_driver_TXData@d stored from wreg
 14833  08D8  00F0               	movwf	i1i2c1_driver_TXData@d
 14834                           
 14835                           ;mcc_generated_files/i2c1_driver.c: 186: __attribute__((inline)) void i2c1_driver_TXData
      +                          (char d);mcc_generated_files/i2c1_driver.c: 187: {;mcc_generated_files/i2c1_driver.c: 18
      +                          8:     SSP1BUF = d;
 14836  08D9  0870               	movf	i1i2c1_driver_TXData@d,w
 14837  08DA  0024               	movlb	4	; select bank4
 14838  08DB  0091               	movwf	17	;volatile
 14839  08DC  0008               	return
 14840  08DD                     __end_ofi1_i2c1_driver_TXData:	
 14841                           
 14842                           	psect	text87
 14843  0882                     __ptext87:	
 14844 ;; *************** function i1_i2c1_driver_getRXData *****************
 14845 ;; Defined at:
 14846 ;;		line 171 in file "mcc_generated_files/i2c1_driver.c"
 14847 ;; Parameters:    Size  Location     Type
 14848 ;;		None
 14849 ;; Auto vars:     Size  Location     Type
 14850 ;;		None
 14851 ;; Return value:  Size  Location     Type
 14852 ;;                  1    wreg      unsigned char 
 14853 ;; Registers used:
 14854 ;;		wreg
 14855 ;; Tracked objects:
 14856 ;;		On entry : 0/0
 14857 ;;		On exit  : 0/0
 14858 ;;		Unchanged: 0/0
 14859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14860 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14861 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14862 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14863 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14864 ;;Total ram usage:        0 bytes
 14865 ;; Hardware stack levels used:    1
 14866 ;; This function calls:
 14867 ;;		Nothing
 14868 ;; This function is called by:
 14869 ;;		_do_I2C_RX
 14870 ;; This function uses a non-reentrant model
 14871 ;;
 14872                           
 14873                           
 14874                           ;psect for function i1_i2c1_driver_getRXData
 14875  0882                     i1_i2c1_driver_getRXData:	
 14876                           
 14877                           ;mcc_generated_files/i2c1_driver.c: 173:     return SSP1BUF;
 14878                           
 14879                           ;incstack = 0
 14880                           ; Regs used in i1_i2c1_driver_getRXData: [wreg]
 14881  0882  0024               	movlb	4	; select bank4
 14882  0883  0811               	movf	17,w	;volatile
 14883  0884  0008               	return
 14884  0885                     __end_ofi1_i2c1_driver_getRXData:	
 14885                           
 14886                           	psect	text88
 14887  08B0                     __ptext88:	
 14888 ;; *************** function i1_i2c1_driver_sendNACK *****************
 14889 ;; Defined at:
 14890 ;;		line 202 in file "mcc_generated_files/i2c1_driver.c"
 14891 ;; Parameters:    Size  Location     Type
 14892 ;;		None
 14893 ;; Auto vars:     Size  Location     Type
 14894 ;;		None
 14895 ;; Return value:  Size  Location     Type
 14896 ;;                  1    wreg      void 
 14897 ;; Registers used:
 14898 ;;		None
 14899 ;; Tracked objects:
 14900 ;;		On entry : 0/0
 14901 ;;		On exit  : 0/0
 14902 ;;		Unchanged: 0/0
 14903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14904 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14905 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14906 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14907 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14908 ;;Total ram usage:        0 bytes
 14909 ;; Hardware stack levels used:    1
 14910 ;; This function calls:
 14911 ;;		Nothing
 14912 ;; This function is called by:
 14913 ;;		_do_I2C_DO_NACK_STOP
 14914 ;;		_do_I2C_DO_NACK_RESTART
 14915 ;; This function uses a non-reentrant model
 14916 ;;
 14917                           
 14918                           
 14919                           ;psect for function i1_i2c1_driver_sendNACK
 14920  08B0                     i1_i2c1_driver_sendNACK:	
 14921                           
 14922                           ;mcc_generated_files/i2c1_driver.c: 204:     SSP1CON2bits.ACKDT = 1;
 14923                           
 14924                           ;incstack = 0
 14925                           ; Regs used in i1_i2c1_driver_sendNACK: []
 14926  08B0  0024               	movlb	4	; select bank4
 14927  08B1  1696               	bsf	22,5	;volatile
 14928                           
 14929                           ;mcc_generated_files/i2c1_driver.c: 205:     SSP1CON2bits.ACKEN = 1;
 14930  08B2  1616               	bsf	22,4	;volatile
 14931  08B3  0008               	return
 14932  08B4                     __end_ofi1_i2c1_driver_sendNACK:	
 14933                           
 14934                           	psect	text89
 14935  0875                     __ptext89:	
 14936 ;; *************** function _i2c1_driver_resetBus *****************
 14937 ;; Defined at:
 14938 ;;		line 141 in file "mcc_generated_files/i2c1_driver.c"
 14939 ;; Parameters:    Size  Location     Type
 14940 ;;		None
 14941 ;; Auto vars:     Size  Location     Type
 14942 ;;		None
 14943 ;; Return value:  Size  Location     Type
 14944 ;;                  1    wreg      void 
 14945 ;; Registers used:
 14946 ;;		None
 14947 ;; Tracked objects:
 14948 ;;		On entry : 0/0
 14949 ;;		On exit  : 0/0
 14950 ;;		Unchanged: 0/0
 14951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14952 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14953 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14954 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14955 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14956 ;;Total ram usage:        0 bytes
 14957 ;; Hardware stack levels used:    1
 14958 ;; This function calls:
 14959 ;;		Nothing
 14960 ;; This function is called by:
 14961 ;;		_do_I2C_RESET
 14962 ;; This function uses a non-reentrant model
 14963 ;;
 14964                           
 14965                           
 14966                           ;psect for function _i2c1_driver_resetBus
 14967  0875                     _i2c1_driver_resetBus:	
 14968                           
 14969                           ;incstack = 0
 14970                           ; Regs used in _i2c1_driver_resetBus: []
 14971  0875  0008               	return
 14972  0876                     __end_of_i2c1_driver_resetBus:	
 14973                           
 14974                           	psect	text90
 14975  087F                     __ptext90:	
 14976 ;; *************** function i1_i2c1_driver_startRX *****************
 14977 ;; Defined at:
 14978 ;;		line 166 in file "mcc_generated_files/i2c1_driver.c"
 14979 ;; Parameters:    Size  Location     Type
 14980 ;;		None
 14981 ;; Auto vars:     Size  Location     Type
 14982 ;;		None
 14983 ;; Return value:  Size  Location     Type
 14984 ;;                  1    wreg      void 
 14985 ;; Registers used:
 14986 ;;		None
 14987 ;; Tracked objects:
 14988 ;;		On entry : 0/0
 14989 ;;		On exit  : 0/0
 14990 ;;		Unchanged: 0/0
 14991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14992 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14993 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14994 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14995 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14996 ;;Total ram usage:        0 bytes
 14997 ;; Hardware stack levels used:    1
 14998 ;; This function calls:
 14999 ;;		Nothing
 15000 ;; This function is called by:
 15001 ;;		_do_I2C_RCEN
 15002 ;; This function uses a non-reentrant model
 15003 ;;
 15004                           
 15005                           
 15006                           ;psect for function i1_i2c1_driver_startRX
 15007  087F                     i1_i2c1_driver_startRX:	
 15008                           
 15009                           ;mcc_generated_files/i2c1_driver.c: 168:     SSP1CON2bits.RCEN = 1;
 15010                           
 15011                           ;incstack = 0
 15012                           ; Regs used in i1_i2c1_driver_startRX: []
 15013  087F  0024               	movlb	4	; select bank4
 15014  0880  1596               	bsf	22,3	;volatile
 15015  0881  0008               	return
 15016  0882                     __end_ofi1_i2c1_driver_startRX:	
 15017                           
 15018                           	psect	text91
 15019  0002                     __ptext91:	
 15020 ;; *************** function _returnReset *****************
 15021 ;; Defined at:
 15022 ;;		line 448 in file "mcc_generated_files/drivers/i2c_master.c"
 15023 ;; Parameters:    Size  Location     Type
 15024 ;;  p               1    0[COMMON] PTR void 
 15025 ;;		 -> NULL(0), 
 15026 ;; Auto vars:     Size  Location     Type
 15027 ;;		None
 15028 ;; Return value:  Size  Location     Type
 15029 ;;                  1    wreg      enum E6966
 15030 ;; Registers used:
 15031 ;;		wreg
 15032 ;; Tracked objects:
 15033 ;;		On entry : 0/0
 15034 ;;		On exit  : 0/0
 15035 ;;		Unchanged: 0/0
 15036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15037 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15038 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15039 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15040 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15041 ;;Total ram usage:        1 bytes
 15042 ;; Hardware stack levels used:    1
 15043 ;; This function calls:
 15044 ;;		Nothing
 15045 ;; This function is called by:
 15046 ;;		_i2c_open
 15047 ;;		_do_I2C_DO_ADDRESS_NACK
 15048 ;;		_do_I2C_TX
 15049 ;;		_do_I2C_RX
 15050 ;;		_do_I2C_TX_EMPTY
 15051 ;; This function uses a non-reentrant model
 15052 ;;
 15053                           
 15054                           
 15055                           ;psect for function _returnReset
 15056  0002                     _returnReset:	
 15057                           
 15058                           ;mcc_generated_files/drivers/i2c_master.c: 448: static i2c_operations_t returnReset(void
      +                           *p);mcc_generated_files/drivers/i2c_master.c: 449: {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 450:     return i2c_reset_link;
 15059                           
 15060                           ;incstack = 0
 15061                           ; Regs used in _returnReset: [wreg]
 15062  0002  3005               	movlw	5
 15063  0003  0008               	return
 15064  0004                     __end_of_returnReset:	
 15065                           
 15066                           	psect	text92
 15067  0877                     __ptext92:	
 15068 ;; *************** function _returnStop *****************
 15069 ;; Defined at:
 15070 ;;		line 443 in file "mcc_generated_files/drivers/i2c_master.c"
 15071 ;; Parameters:    Size  Location     Type
 15072 ;;  p               1    0[COMMON] PTR void 
 15073 ;;		 -> NULL(0), 
 15074 ;; Auto vars:     Size  Location     Type
 15075 ;;		None
 15076 ;; Return value:  Size  Location     Type
 15077 ;;                  1    wreg      enum E6966
 15078 ;; Registers used:
 15079 ;;		wreg
 15080 ;; Tracked objects:
 15081 ;;		On entry : 0/0
 15082 ;;		On exit  : 0/0
 15083 ;;		Unchanged: 0/0
 15084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15085 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15086 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15088 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15089 ;;Total ram usage:        1 bytes
 15090 ;; Hardware stack levels used:    1
 15091 ;; This function calls:
 15092 ;;		Nothing
 15093 ;; This function is called by:
 15094 ;;		_i2c_open
 15095 ;;		_setCallBack
 15096 ;;		_do_I2C_DO_ADDRESS_NACK
 15097 ;;		_do_I2C_TX
 15098 ;;		_do_I2C_RX
 15099 ;;		_do_I2C_TX_EMPTY
 15100 ;; This function uses a non-reentrant model
 15101 ;;
 15102                           
 15103                           
 15104                           ;psect for function _returnStop
 15105  0877                     _returnStop:	
 15106                           
 15107                           ;mcc_generated_files/drivers/i2c_master.c: 443: static i2c_operations_t returnStop(void 
      +                          *p);mcc_generated_files/drivers/i2c_master.c: 444: {;mcc_generated_files/drivers/i2c_mas
      +                          ter.c: 445:     return i2c_stop;
 15108                           
 15109                           ;incstack = 0
 15110                           ; Regs used in _returnStop: [wreg]
 15111  0877  3001               	movlw	1
 15112  0878  0008               	return
 15113  0879                     __end_of_returnStop:	
 15114                           
 15115                           	psect	text93
 15116  087C                     __ptext93:	
 15117 ;; *************** function i1_i2c1_driver_stop *****************
 15118 ;; Defined at:
 15119 ;;		line 156 in file "mcc_generated_files/i2c1_driver.c"
 15120 ;; Parameters:    Size  Location     Type
 15121 ;;		None
 15122 ;; Auto vars:     Size  Location     Type
 15123 ;;		None
 15124 ;; Return value:  Size  Location     Type
 15125 ;;                  1    wreg      void 
 15126 ;; Registers used:
 15127 ;;		None
 15128 ;; Tracked objects:
 15129 ;;		On entry : 0/0
 15130 ;;		On exit  : 0/0
 15131 ;;		Unchanged: 0/0
 15132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15134 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15135 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15136 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15137 ;;Total ram usage:        0 bytes
 15138 ;; Hardware stack levels used:    1
 15139 ;; This function calls:
 15140 ;;		Nothing
 15141 ;; This function is called by:
 15142 ;;		_do_I2C_SEND_STOP
 15143 ;; This function uses a non-reentrant model
 15144 ;;
 15145                           
 15146                           
 15147                           ;psect for function i1_i2c1_driver_stop
 15148  087C                     i1_i2c1_driver_stop:	
 15149                           
 15150                           ;mcc_generated_files/i2c1_driver.c: 158:     SSP1CON2bits.PEN = 1;
 15151                           
 15152                           ;incstack = 0
 15153                           ; Regs used in i1_i2c1_driver_stop: []
 15154  087C  0024               	movlb	4	; select bank4
 15155  087D  1516               	bsf	22,2	;volatile
 15156  087E  0008               	return
 15157  087F                     __end_ofi1_i2c1_driver_stop:	
 15158                           
 15159                           	psect	text94
 15160  0879                     __ptext94:	
 15161 ;; *************** function i1_i2c1_driver_restart *****************
 15162 ;; Defined at:
 15163 ;;		line 151 in file "mcc_generated_files/i2c1_driver.c"
 15164 ;; Parameters:    Size  Location     Type
 15165 ;;		None
 15166 ;; Auto vars:     Size  Location     Type
 15167 ;;		None
 15168 ;; Return value:  Size  Location     Type
 15169 ;;                  1    wreg      void 
 15170 ;; Registers used:
 15171 ;;		None
 15172 ;; Tracked objects:
 15173 ;;		On entry : 0/0
 15174 ;;		On exit  : 0/0
 15175 ;;		Unchanged: 0/0
 15176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15178 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15179 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15180 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15181 ;;Total ram usage:        0 bytes
 15182 ;; Hardware stack levels used:    1
 15183 ;; This function calls:
 15184 ;;		Nothing
 15185 ;; This function is called by:
 15186 ;;		_do_I2C_SEND_RESTART_READ
 15187 ;;		_do_I2C_SEND_RESTART_WRITE
 15188 ;;		_do_I2C_SEND_RESTART
 15189 ;; This function uses a non-reentrant model
 15190 ;;
 15191                           
 15192                           
 15193                           ;psect for function i1_i2c1_driver_restart
 15194  0879                     i1_i2c1_driver_restart:	
 15195                           
 15196                           ;mcc_generated_files/i2c1_driver.c: 153:     SSP1CON2bits.RSEN = 1;
 15197                           
 15198                           ;incstack = 0
 15199                           ; Regs used in i1_i2c1_driver_restart: []
 15200  0879  0024               	movlb	4	; select bank4
 15201  087A  1496               	bsf	22,1	;volatile
 15202  087B  0008               	return
 15203  087C                     __end_ofi1_i2c1_driver_restart:	
 15204                           
 15205                           	psect	text95
 15206  08AC                     __ptext95:	
 15207 ;; *************** function _i2c1_driver_sendACK *****************
 15208 ;; Defined at:
 15209 ;;		line 196 in file "mcc_generated_files/i2c1_driver.c"
 15210 ;; Parameters:    Size  Location     Type
 15211 ;;		None
 15212 ;; Auto vars:     Size  Location     Type
 15213 ;;		None
 15214 ;; Return value:  Size  Location     Type
 15215 ;;                  1    wreg      void 
 15216 ;; Registers used:
 15217 ;;		None
 15218 ;; Tracked objects:
 15219 ;;		On entry : 0/0
 15220 ;;		On exit  : 0/0
 15221 ;;		Unchanged: 0/0
 15222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15223 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15224 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15225 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15226 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15227 ;;Total ram usage:        0 bytes
 15228 ;; Hardware stack levels used:    1
 15229 ;; This function calls:
 15230 ;;		Nothing
 15231 ;; This function is called by:
 15232 ;;		_do_I2C_DO_ACK
 15233 ;;		_do_I2C_RX
 15234 ;;		_I2C_Send_ACK
 15235 ;; This function uses a non-reentrant model
 15236 ;;
 15237                           
 15238                           
 15239                           ;psect for function _i2c1_driver_sendACK
 15240  08AC                     _i2c1_driver_sendACK:	
 15241                           
 15242                           ;mcc_generated_files/i2c1_driver.c: 198:     SSP1CON2bits.ACKDT = 0;
 15243                           
 15244                           ;incstack = 0
 15245                           ; Regs used in _i2c1_driver_sendACK: []
 15246  08AC  0024               	movlb	4	; select bank4
 15247  08AD  1296               	bcf	22,5	;volatile
 15248                           
 15249                           ;mcc_generated_files/i2c1_driver.c: 199:     SSP1CON2bits.ACKEN = 1;
 15250  08AE  1616               	bsf	22,4	;volatile
 15251  08AF  0008               	return
 15252  08B0                     __end_of_i2c1_driver_sendACK:	
 15253                           
 15254                           	psect	text96
 15255  0874                     __ptext96:	
 15256 ;; *************** function _PIN_MANAGER_IOC *****************
 15257 ;; Defined at:
 15258 ;;		line 118 in file "mcc_generated_files/pin_manager.c"
 15259 ;; Parameters:    Size  Location     Type
 15260 ;;		None
 15261 ;; Auto vars:     Size  Location     Type
 15262 ;;		None
 15263 ;; Return value:  Size  Location     Type
 15264 ;;                  1    wreg      void 
 15265 ;; Registers used:
 15266 ;;		None
 15267 ;; Tracked objects:
 15268 ;;		On entry : 0/0
 15269 ;;		On exit  : 0/0
 15270 ;;		Unchanged: 0/0
 15271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15272 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15273 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15274 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15275 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15276 ;;Total ram usage:        0 bytes
 15277 ;; Hardware stack levels used:    1
 15278 ;; This function calls:
 15279 ;;		Nothing
 15280 ;; This function is called by:
 15281 ;;		_INTERRUPT_InterruptManager
 15282 ;; This function uses a non-reentrant model
 15283 ;;
 15284                           
 15285                           
 15286                           ;psect for function _PIN_MANAGER_IOC
 15287  0874                     _PIN_MANAGER_IOC:	
 15288                           
 15289                           ;incstack = 0
 15290                           ; Regs used in _PIN_MANAGER_IOC: []
 15291  0874  0008               	return
 15292  0875                     __end_of_PIN_MANAGER_IOC:	
 15293  007E                     btemp	set	126	;btemp
 15294  007E                     int$flags	set	126
 15295  007E                     wtemp0	set	126


Data Sizes:
    Strings     70
    Constant    32
    Data        10
    BSS         127
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      11
    BANK0            80     60      79
    BANK1            80     66      72
    BANK2            80     64      74
    BANK3            80      0      29
    BANK4            80      0      68
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    i2c_ISR$2418	const PTR FTN()enum E7120 size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_SEND_ADR_READ(), do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), 
		 -> do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), do_I2C_IDLE(), do_I2C_RESET(), 

    returnStop@p	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    returnReset@p	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    S52$11$0	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_8(CODE[5]), STR_7(CODE[3]), STR_6(CODE[7]), STR_5(CODE[3]), 
		 -> STR_4(CODE[11]), STR_3(CODE[16]), STR_2(CODE[13]), STR_1(CODE[12]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_8(CODE[5]), STR_7(CODE[3]), STR_6(CODE[7]), STR_5(CODE[3]), 
		 -> STR_4(CODE[11]), STR_3(CODE[16]), STR_2(CODE[13]), STR_1(CODE[12]), 

    wireReadDataBlock@val	PTR unsigned char  size(2) Largest target is 64
		 -> readGesture@fifo_data2(BANK1[64]), readGesture@fifo_data(BANK2[64]), 

    Display_Name@string1	PTR unsigned char  size(2) Largest target is 16
		 -> STR_8(CODE[5]), STR_7(CODE[3]), STR_6(CODE[7]), STR_5(CODE[3]), 
		 -> STR_4(CODE[11]), STR_3(CODE[16]), STR_2(CODE[13]), STR_1(CODE[12]), 

    names	PTR unsigned char [4] size(2) Largest target is 16
		 -> STR_4(CODE[11]), STR_3(CODE[16]), STR_2(CODE[13]), STR_1(CODE[12]), 

    i2c1_driver_i2cISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), i2c_ISR(), 

    i2c1_driver_busCollisionISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), i2c_busCollisionISR(), 

    fsmStateTable	const PTR FTN()enum E7120[16] size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_SEND_ADR_READ(), do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), 
		 -> do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), do_I2C_IDLE(), do_I2C_RESET(), 

    S52$callbackPayload	PTR void [6] size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    i2c_status.callbackPayload	PTR void [6] size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    S52$callbackTable	PTR FTN(PTR void ,)enum E6966[6] size(2) Largest target is 1
		 -> returnReset(), returnStop(), 

    i2c_status.callbackTable	PTR FTN(PTR void ,)enum E6966[6] size(2) Largest target is 1
		 -> returnReset(), returnStop(), 

    S52$data_ptr	PTR unsigned char  size(1) Largest target is 0

    i2c_status.data_ptr	PTR unsigned char  size(1) Largest target is 0


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_i2c_ISR
    _i2c_ISR->_do_I2C_DO_ADDRESS_NACK
    _i2c_ISR->_do_I2C_RX
    _i2c_ISR->_do_I2C_TX
    _i2c_ISR->_do_I2C_TX_EMPTY

Critical Paths under _main in BANK0

    _main->_handleGesture
    _initialize->_setMode
    _setProximityGain->_wireWriteDataByte
    _setProxIntLowThresh->_wireWriteDataByte
    _setProxIntHighThresh->_wireWriteDataByte
    _setLightIntLowThreshold->_wireWriteDataByte
    _setLightIntHighThreshold->_wireWriteDataByte
    _setLEDDrive->_wireWriteDataByte
    _setGestureWaitTime->_wireWriteDataByte
    _setGestureLEDDrive->_wireWriteDataByte
    _setGestureGain->_wireWriteDataByte
    _setGestureExitThresh->_wireWriteDataByte
    _setGestureEnterThresh->_wireWriteDataByte
    _setAmbientLightGain->_wireWriteDataByte
    _handleGesture->_readGesture
    _readGesture->_processGestureData
    _wireReadDataBlock->_I2C_Write_Byte
    _processGestureData->___awdiv
    ___awdiv->___wmul
    _isGestureAvailable->_wireReadDataByte
    _enableGestureSensor->_setMode
    _setLEDBoost->_wireWriteDataByte
    _setGestureMode->_wireWriteDataByte
    _setGestureIntEnable->_wireWriteDataByte
    _enablePower->_setMode
    _setMode->_getMode
    _wireWriteDataByte->_I2C_Write_Byte
    _getMode->_wireReadDataByte
    _wireReadDataByte->_I2C_Write_Byte
    _I2C_Write_Byte->_i2c1_driver_TXData
    _I2C_Read_Byte->_i2c1_driver_isBufferFull
    _Get_ADC->_Display_Name
    _Display_Name->_strlen
    _Display_Clear->_SPI_Write
    _SPI_Write->_SPI2_Exchange8bit

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _handleGesture->_readGesture

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    _handleGesture->_readGesture

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   90103
                                             64 BANK1      2     2      0
                      _Display_Clear
                       _Display_Name
                            _Get_ADC
                  _SYSTEM_Initialize
                _enableGestureSensor
                      _handleGesture
                         _initialize
                 _isGestureAvailable
 ---------------------------------------------------------------------------------
 (1) _initialize                                           2     2      0   54520
                                             16 BANK0      2     2      0
                   _i2c1_driver_open
                _setAmbientLightGain
              _setGestureEnterThresh
               _setGestureExitThresh
                     _setGestureGain
                _setGestureIntEnable
                 _setGestureLEDDrive
                 _setGestureWaitTime
                        _setLEDDrive
           _setLightIntHighThreshold
            _setLightIntLowThreshold
                            _setMode
               _setProxIntHighThresh
                _setProxIntLowThresh
                   _setProximityGain
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setProximityGain                                     4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setProxIntLowThresh                                  2     2      0    3429
                                             10 BANK0      2     2      0
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setProxIntHighThresh                                 2     2      0    3429
                                             10 BANK0      2     2      0
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setLightIntLowThreshold                              5     3      2    3618
                                             10 BANK0      5     3      2
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setLightIntHighThreshold                             5     3      2    3618
                                             10 BANK0      5     3      2
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setLEDDrive                                          4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureWaitTime                                   3     3      0    3633
                                             10 BANK0      3     3      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureLEDDrive                                   4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureGain                                       4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureExitThresh                                 2     2      0    3429
                                             10 BANK0      2     2      0
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureEnterThresh                                2     2      0    3429
                                             10 BANK0      2     2      0
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setAmbientLightGain                                  3     3      0    3633
                                             10 BANK0      3     3      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _i2c1_driver_open                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _handleGesture                                        1     1      0    9292
                                             59 BANK0      1     1      0
                       _Display_Name
                        _readGesture
 ---------------------------------------------------------------------------------
 (2) _readGesture                                        140   138      2    8036
                                             47 BANK0     12    10      2
                                              0 BANK1     64    64      0
                                              0 BANK2     64    64      0
                      _decodeGesture
                            _getMode
                 _isGestureAvailable
                 _processGestureData
             _resetGestureParameters
                  _wireReadDataBlock
                   _wireReadDataByte
 ---------------------------------------------------------------------------------
 (3) _wireReadDataBlock                                   11     7      4     651
                                              6 BANK0     11     7      4
                        _I2C_ReStart
                      _I2C_Read_Byte
                      _I2C_Send_NACK
                          _I2C_Start
                           _I2C_Stop
                     _I2C_Write_Byte
 ---------------------------------------------------------------------------------
 (3) _processGestureData                                  32    32      0    5864
                                             15 BANK0     32    32      0
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    2396
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              9     5      4    1165
                                              6 BANK0      9     5      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _isGestureAvailable                                   2     2      0     198
                                              9 BANK0      2     2      0
                   _wireReadDataByte
 ---------------------------------------------------------------------------------
 (3) _decodeGesture                                       18    18      0     296
                                              0 BANK0     18    18      0
 ---------------------------------------------------------------------------------
 (1) _enableGestureSensor                                  2     2      0   23076
                                             16 BANK0      2     2      0
                        _enablePower
             _resetGestureParameters
                _setGestureIntEnable
                     _setGestureMode
                        _setLEDBoost
                            _setMode
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setLEDBoost                                          4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureMode                                       3     3      0    3633
                                             10 BANK0      3     3      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureIntEnable                                  3     3      0    3667
                                             10 BANK0      3     3      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (3) _resetGestureParameters                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _enablePower                                          0     0      0    4340
                            _setMode
 ---------------------------------------------------------------------------------
 (2) _setMode                                              5     4      1    4340
                                             11 BANK0      5     4      1
                            _getMode
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _wireWriteDataByte                                    4     1      3    3398
                                              6 BANK0      4     1      3
                          _I2C_Start
                           _I2C_Stop
                     _I2C_Write_Byte
 ---------------------------------------------------------------------------------
 (3) _getMode                                              2     2      0     195
                                              9 BANK0      2     2      0
                   _wireReadDataByte
 ---------------------------------------------------------------------------------
 (2) _wireReadDataByte                                     3     3      0     161
                                              6 BANK0      3     3      0
                        _I2C_ReStart
                      _I2C_Read_Byte
                      _I2C_Send_NACK
                          _I2C_Start
                           _I2C_Stop
                     _I2C_Write_Byte
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Byte                                       5     5      0      96
                                              1 BANK0      5     5      0
                 _i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_TXData                                   1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _I2C_Stop                                             0     0      0       0
                   _i2c1_driver_stop
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_stop                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_Start                                            0     0      0       0
                  _i2c1_driver_start
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_start                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_Send_NACK                                        0     0      0       0
               _i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_sendNACK                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_Read_Byte                                        0     0      0       0
              _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
                _i2c1_driver_startRX
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_startRX                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_isBufferFull                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_getRXData                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_ReStart                                          0     0      0       0
                _i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_restart                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                     _ADC_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PMD_Initialize
                    _PWM1_Initialize
                    _SPI2_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SPI2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PMD_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Get_ADC                                              5     5      0    1696
                                             12 BANK0      5     5      0
                  _ADC_GetConversion
                       _Display_Name
 ---------------------------------------------------------------------------------
 (2) _Display_Name                                         7     5      2    1256
                                              5 BANK0      7     5      2
                          _SPI_Write
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _strlen                                               5     3      2     220
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _ADC_GetConversion                                    4     2      2      31
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _Display_Clear                                        1     1      0      62
                                              3 BANK0      1     1      0
                          _SPI_Write
 ---------------------------------------------------------------------------------
 (3) _SPI_Write                                            2     2      0      62
                                              1 BANK0      2     2      0
                  _SPI2_Exchange8bit
 ---------------------------------------------------------------------------------
 (4) _SPI2_Exchange8bit                                    1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                           0     0      0     914
                   Absolute function *
                    _PIN_MANAGER_IOC
                            _i2c_ISR *
                _i2c_busCollisionISR *
 ---------------------------------------------------------------------------------
 (9) _i2c_busCollisionISR                                  0     0      0       0
      _i2c1_driver_clearBusCollision
 ---------------------------------------------------------------------------------
 (10) _i2c1_driver_clearBusCollision                       0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _i2c_ISR                                              3     3      0     914
                                              3 COMMON     3     3      0
                      _do_I2C_DO_ACK *
             _do_I2C_DO_ADDRESS_NACK *
             _do_I2C_DO_NACK_RESTART *
                _do_I2C_DO_NACK_STOP *
                        _do_I2C_IDLE *
                        _do_I2C_RCEN *
                       _do_I2C_RESET *
                          _do_I2C_RX *
               _do_I2C_SEND_ADR_READ *
              _do_I2C_SEND_ADR_WRITE *
                _do_I2C_SEND_RESTART *
           _do_I2C_SEND_RESTART_READ *
          _do_I2C_SEND_RESTART_WRITE *
                   _do_I2C_SEND_STOP *
                          _do_I2C_TX *
                    _do_I2C_TX_EMPTY *
                 _i2c1_driver_isNACK
                     _mssp1_clearIRQ
 ---------------------------------------------------------------------------------
 (10) _mssp1_clearIRQ                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_TX_EMPTY                                     3     3      0     212
                                              0 COMMON     3     3      0
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                       _mssp1_setIRQ
                        _returnReset *
                         _returnStop *
 ---------------------------------------------------------------------------------
 (11) _mssp1_setIRQ                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_TX                                           3     3      0     234
                                              0 COMMON     3     3      0
           _do_I2C_SEND_RESTART_READ
          _do_I2C_SEND_RESTART_WRITE
                   _do_I2C_SEND_STOP
                 _i2c1_driver_isNACK
                        _returnReset *
                         _returnStop *
               i1_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (10) _i2c1_driver_isNACK                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _do_I2C_SEND_RESTART_WRITE                           0     0      0       0
              i1_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (11) _do_I2C_SEND_RESTART_READ                            0     0      0       0
              i1_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (10) _do_I2C_SEND_ADR_WRITE                               0     0      0      22
               i1_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (10) _do_I2C_SEND_ADR_READ                                0     0      0      22
               i1_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (11) i1_i2c1_driver_TXData                                1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_RX                                           3     3      0     212
                                              0 COMMON     3     3      0
             _do_I2C_DO_NACK_RESTART
                _do_I2C_DO_NACK_STOP
                _i2c1_driver_sendACK
                        _returnReset *
                         _returnStop *
            i1_i2c1_driver_getRXData
 ---------------------------------------------------------------------------------
 (11) i1_i2c1_driver_getRXData                             0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _do_I2C_DO_NACK_STOP                                 0     0      0       0
             i1_i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (11) _do_I2C_DO_NACK_RESTART                              0     0      0       0
             i1_i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (12) i1_i2c1_driver_sendNACK                              0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_RESET                                        0     0      0       0
               _i2c1_driver_resetBus
 ---------------------------------------------------------------------------------
 (11) _i2c1_driver_resetBus                                0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_RCEN                                         0     0      0       0
              i1_i2c1_driver_startRX
 ---------------------------------------------------------------------------------
 (11) i1_i2c1_driver_startRX                               0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_IDLE                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_DO_ADDRESS_NACK                              3     3      0     212
                                              0 COMMON     3     3      0
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                        _returnReset *
                         _returnStop *
 ---------------------------------------------------------------------------------
 (11) _returnStop                                          1     0      1       0
                                              0 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (11) _returnReset                                         1     0      1     212
                                              0 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (11) _do_I2C_SEND_STOP                                    0     0      0       0
                 i1_i2c1_driver_stop
 ---------------------------------------------------------------------------------
 (12) i1_i2c1_driver_stop                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _do_I2C_SEND_RESTART                                 0     0      0       0
              i1_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (12) i1_i2c1_driver_restart                               0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_DO_ACK                                       0     0      0       0
                _i2c1_driver_sendACK
 ---------------------------------------------------------------------------------
 (11) _i2c1_driver_sendACK                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _PIN_MANAGER_IOC                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (9) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Display_Clear
     _SPI_Write
       _SPI2_Exchange8bit
   _Display_Name
     _SPI_Write
       _SPI2_Exchange8bit
     _strlen
   _Get_ADC
     _ADC_GetConversion
     _Display_Name
       _SPI_Write
         _SPI2_Exchange8bit
       _strlen
   _SYSTEM_Initialize
     _ADC_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PMD_Initialize
     _PWM1_Initialize
     _SPI2_Initialize
     _TMR2_Initialize
     _WDT_Initialize
   _enableGestureSensor
     _enablePower
       _setMode
         _getMode
           _wireReadDataByte
             _I2C_ReStart
               _i2c1_driver_restart
             _I2C_Read_Byte
               _i2c1_driver_getRXData
               _i2c1_driver_isBufferFull
               _i2c1_driver_startRX
             _I2C_Send_NACK
               _i2c1_driver_sendNACK
             _I2C_Start
               _i2c1_driver_start
             _I2C_Stop
               _i2c1_driver_stop
             _I2C_Write_Byte
               _i2c1_driver_TXData
         _wireWriteDataByte
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
     _resetGestureParameters
     _setGestureIntEnable
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureMode
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setLEDBoost
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setMode
       _getMode
         _wireReadDataByte
           _I2C_ReStart
             _i2c1_driver_restart
           _I2C_Read_Byte
             _i2c1_driver_getRXData
             _i2c1_driver_isBufferFull
             _i2c1_driver_startRX
           _I2C_Send_NACK
             _i2c1_driver_sendNACK
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _wireWriteDataByte
       _I2C_Start
         _i2c1_driver_start
       _I2C_Stop
         _i2c1_driver_stop
       _I2C_Write_Byte
         _i2c1_driver_TXData
   _handleGesture
     _Display_Name
       _SPI_Write
         _SPI2_Exchange8bit
       _strlen
     _readGesture
       _decodeGesture
       _getMode
         _wireReadDataByte
           _I2C_ReStart
             _i2c1_driver_restart
           _I2C_Read_Byte
             _i2c1_driver_getRXData
             _i2c1_driver_isBufferFull
             _i2c1_driver_startRX
           _I2C_Send_NACK
             _i2c1_driver_sendNACK
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
       _isGestureAvailable
         _wireReadDataByte
           _I2C_ReStart
             _i2c1_driver_restart
           _I2C_Read_Byte
             _i2c1_driver_getRXData
             _i2c1_driver_isBufferFull
             _i2c1_driver_startRX
           _I2C_Send_NACK
             _i2c1_driver_sendNACK
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
       _processGestureData
         ___awdiv
           ___wmul (ARG)
         ___wmul
       _resetGestureParameters
       _wireReadDataBlock
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
   _initialize
     _i2c1_driver_open
     _setAmbientLightGain
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureEnterThresh
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureExitThresh
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureGain
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureIntEnable
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureLEDDrive
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureWaitTime
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setLEDDrive
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setLightIntHighThreshold
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setLightIntLowThreshold
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setMode
       _getMode
         _wireReadDataByte
           _I2C_ReStart
             _i2c1_driver_restart
           _I2C_Read_Byte
             _i2c1_driver_getRXData
             _i2c1_driver_isBufferFull
             _i2c1_driver_startRX
           _I2C_Send_NACK
             _i2c1_driver_sendNACK
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setProxIntHighThresh
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setProxIntLowThresh
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setProximityGain
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _wireReadDataByte
       _I2C_ReStart
         _i2c1_driver_restart
       _I2C_Read_Byte
         _i2c1_driver_getRXData
         _i2c1_driver_isBufferFull
         _i2c1_driver_startRX
       _I2C_Send_NACK
         _i2c1_driver_sendNACK
       _I2C_Start
         _i2c1_driver_start
       _I2C_Stop
         _i2c1_driver_stop
       _I2C_Write_Byte
         _i2c1_driver_TXData
     _wireWriteDataByte
       _I2C_Start
         _i2c1_driver_start
       _I2C_Stop
         _i2c1_driver_stop
       _I2C_Write_Byte
         _i2c1_driver_TXData
   _isGestureAvailable
     _wireReadDataByte
       _I2C_ReStart
         _i2c1_driver_restart
       _I2C_Read_Byte
         _i2c1_driver_getRXData
         _i2c1_driver_isBufferFull
         _i2c1_driver_startRX
       _I2C_Send_NACK
         _i2c1_driver_sendNACK
       _I2C_Start
         _i2c1_driver_start
       _I2C_Stop
         _i2c1_driver_stop
       _I2C_Write_Byte
         _i2c1_driver_TXData

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _PIN_MANAGER_IOC *
   _i2c_ISR *
     _do_I2C_DO_ACK *
       _i2c1_driver_sendACK
     _do_I2C_DO_ADDRESS_NACK *
       _do_I2C_SEND_RESTART
         i1_i2c1_driver_restart
       _do_I2C_SEND_STOP
         i1_i2c1_driver_stop
       _returnReset *
       _returnStop *
     _do_I2C_DO_NACK_RESTART *
       i1_i2c1_driver_sendNACK
     _do_I2C_DO_NACK_STOP *
       i1_i2c1_driver_sendNACK
     _do_I2C_IDLE *
     _do_I2C_RCEN *
       i1_i2c1_driver_startRX
     _do_I2C_RESET *
       _i2c1_driver_resetBus
     _do_I2C_RX *
       _do_I2C_DO_NACK_RESTART
         i1_i2c1_driver_sendNACK
       _do_I2C_DO_NACK_STOP
         i1_i2c1_driver_sendNACK
       _i2c1_driver_sendACK
       _returnReset *
       _returnStop *
       i1_i2c1_driver_getRXData *
     _do_I2C_SEND_ADR_READ *
       i1_i2c1_driver_TXData
     _do_I2C_SEND_ADR_WRITE *
       i1_i2c1_driver_TXData
     _do_I2C_SEND_RESTART *
       i1_i2c1_driver_restart
     _do_I2C_SEND_RESTART_READ *
       i1_i2c1_driver_restart
     _do_I2C_SEND_RESTART_WRITE *
       i1_i2c1_driver_restart
     _do_I2C_SEND_STOP *
       i1_i2c1_driver_stop
     _do_I2C_TX *
       _do_I2C_SEND_RESTART_READ
         i1_i2c1_driver_restart
       _do_I2C_SEND_RESTART_WRITE
         i1_i2c1_driver_restart
       _do_I2C_SEND_STOP
         i1_i2c1_driver_stop
       _i2c1_driver_isNACK
       _returnReset *
       _returnStop *
       i1_i2c1_driver_TXData *
     _do_I2C_TX_EMPTY *
       _do_I2C_SEND_RESTART
         i1_i2c1_driver_restart
       _do_I2C_SEND_STOP
         i1_i2c1_driver_stop
       _mssp1_setIRQ
       _returnReset *
       _returnStop *
     _i2c1_driver_isNACK *
     _mssp1_clearIRQ *
   _i2c_busCollisionISR *
     _i2c1_driver_clearBusCollision

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       B       2       78.6%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     3C      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     42      48       7       90.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     40      4A       9       92.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      1D      11       36.3%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      44      13       85.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     14D      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     14D      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Mon Apr 15 15:14:02 2019

                          returnReset@p 0070                   ?_setGestureExitThresh 0070  
                    __size_of_I2C_Start 0003                             __CFG_CP$OFF 0000  
                          ___awdiv@sign 002C                    __size_of_do_I2C_IDLE 0005  
                   _do_I2C_SEND_RESTART 08BC                    __size_of_do_I2C_RCEN 0006  
                   ___wmul@multiplicand 0022                             __CFG_LVP$ON 0000  
                                   l532 098E                                     l623 0AC6  
      processGestureData@ud_ratio_first 0031                                     l779 0DBE  
                                   _PR2 001E                            __CFG_CPD$OFF 0000  
                 __end_of_decodeGesture 04CA                    __size_of_I2C_ReStart 0003  
                                   _val 007A                 __size_of_PMD_Initialize 0008  
                    I2C_Write_Byte@Byte 0023                         _TMR2_Initialize 093E  
                 __size_of_do_I2C_RESET 0007                                     wreg 0009  
                    i1_i2c1_driver_stop 087C                                    l1102 02E4  
                                  l1106 030D                                    l1107 0325  
                                  l1140 03FA                                    l1132 03C6  
                                  l1060 008A                                    l1231 0A86  
                                  l1152 044D                                    l1144 0417  
                                  l1128 03A9                                    l1083 0245  
                                  l1164 049C                                    l1156 046A  
                                  l1095 02C5                                    l1087 026E  
                                  l1168 04B9                                    l1089 0294  
                                  l1395 0AA2                                    l6101 0308  
                                  l6013 00F7                                    l6031 01E6  
                                  l6201 0465                                    l6041 020B  
                                  l6017 0145                                    l6123 0346  
                                  l6035 01F8                                    l6141 0368  
                                  l6133 035C                                    l6061 0269  
                                  l6045 021D                                    l6037 01FB  
                                  l6215 0497                                    l6207 0477  
                                  l6151 037C                                    l6135 035E  
                                  l6055 0240                                    l6047 0220  
                                  l6225 04C6                                    l6161 03A4  
                                  l6153 0382                                    l6145 0370  
                                  l6129 0352                                    l6073 028F  
                                  l6219 04B4                                    l6171 03D3  
                                  l6147 0372                                    l6139 0366  
                                  l6083 02B9                                    l6091 02C7  
                                  l6411 07A4                                    l6341 0ACB  
                                  l6165 03C1                                    l6229 04C8  
                                  l6069 0287                                    l6405 073A  
                                  l6183 0412                                    l6095 02DF  
                                  l6407 079B                                    l6505 0B9F  
                                  l6179 03F5                                    l6371 07A7  
                                  l7227 0F85                                    l7083 0C65  
                                  l5901 0EAF                                    l6197 0448  
                                  l6189 0424                                    l5805 0A9C  
                                  l6525 09CA                                    l6509 0BA1  
                                  l6359 0DA1                                    l5751 0964  
                                  l5911 0ED4                                    l6607 0C54  
                                  l5831 0F06                                    l6367 06F2  
                                  l6535 09DD                                    l5745 0A89  
                                  l6625 0CE5                                    l5841 0F0E  
                                  l5825 0EFB                                    l6393 072C  
                                  l6385 0709                                    l6377 06F6  
                                  l6553 0D17                                    l6465 0A03  
                                  l6713 04DF                                    l7089 0C77  
                                  l6643 0B60                                    l5843 0F1A  
                                  l6571 0D49                                    l6475 09F0  
                                  l5917 0EE0                                    l5909 0EC7  
                                  l6653 0984                                    l5853 0F35  
                                  l6485 0BC6                                    l6709 04DD  
                                  l5919 0EE1                                    l5951 0E18  
                                  l6913 0607                                    l6841 0FB2  
                                  l5873 09B7                                    l5857 0F3D  
                                  l5849 0F2C                                    l5953 0E47  
                                  l6489 0BC8                                    l5779 0993  
                                  l6931 065E                                    l5963 0079  
                                  l6925 0641                                    l6845 0FB4  
                                  l6589 0B87                                    l5887 0A1F  
                                  l6951 06A8                                    l6943 0682  
                                  l6919 0624                                    l5983 0086  
                                  l5967 007B                                    l5889 0A2B  
                                  l6945 068B                                    l5897 0EAD  
                                  l5985 00E0                                    l6963 06D4  
                                  l6859 0FB0                                    l6965 06E0  
                                  l5999 00FB                                    l6991 0F7C  
                                  l6993 0F99                                    l6977 0F56  
                                  l6969 0F43                                    l6987 0F6F  
                                  l6979 0F64                                    STR_1 103D  
                                  STR_2 1030                                    STR_3 1020  
                                  STR_4 1049                                    STR_5 1060  
                                  STR_6 1054                                    STR_7 1063  
                                  STR_8 105B                 __end_of_PWM1_Initialize 0978  
                                  _LATA 010C                                    _LATB 010D  
                                  _LATC 010E                                    u5105 02ED  
                                  u5115 02F9                                    u5035 029E  
                                  u5125 0316                                    u5045 02AC  
                                  u5305 03D0                                    u5155 032E  
                                  _PMD0 0911                                    u6205 064B  
                                  u5405 0474                                    _PMD1 0912  
                                  _PMD2 0913                                    u6215 0657  
                                  u5335 03E6                                    u5095 02D0  
                                  _PMD3 0914                                    _PMD4 0915  
                                  u6225 0668                                    u6145 05EA  
                                  u5345 0403                                    u4545 0F11  
                                  u6305 0F51                                    _PMD5 0916  
                                  u6235 0674                                    u6155 0602  
                                  u5435 0488                                    u5355 0421  
                                  u4715 0E21                                    u6165 0611  
                                  u5445 04A5                                    u5285 0395  
                                  u4565 0F1B                                    u4485 0AA3  
                                  u6255 0695                                    u6175 061D  
                                  u5455 04C3                                    u5295 03B2  
                                  u4575 0F25                                    u4495 0AA8  
                                  u4664 0EC0                                    u6265 06A1  
                                  u6185 062E                                    u4665 0EBF  
                                  u5385 0439                                    u4585 0F2D  
                                  u4905 01F0                                    u6417 07AB  
                                  u5705 0D2A                                    u4674 0ECC  
                                  u6275 06B2                                    u6195 063A  
                                  u4675 0ECB                                    u5395 0456  
                                  u4915 0204                                    u6427 07BE  
                                  u5555 0735                                    u5485 0DAB  
                                  u6437 0D89                                    u6285 06BE  
                                  u4925 0215                                    u5565 0744  
                                  u6447 099D                                    u6295 06CF  
                                  u6457 0A14                                    u5745 0CC6  
                                  u5585 0BE8                                    u4955 0231  
                                  u4795 0095                                    u5595 07E7  
                                  u4965 024E                                    u5685 0CF8  
                  ?_do_I2C_SEND_RESTART 0070                                    u4975 025A  
                                  u4895 01DF                                    u4985 0277  
                                  _TMR2 001D                                    _WPUA 020C  
                                  _WPUB 020D                                    _WPUC 020E  
                          __CFG_WRT$OFF 0000                           __CFG_FCMEN$ON 0000  
     __size_of_do_I2C_SEND_RESTART_READ 0004                     ?i1_i2c1_driver_stop 0070  
             ?_do_I2C_SEND_RESTART_READ 0070                                    _main 0C56  
                                  _name 005C               __size_of_do_I2C_SEND_STOP 0004  
                __size_of_do_I2C_DO_ACK 0004                                    fsr0h 0005  
                                  fsr1h 0007                                    indf0 0000  
                                  fsr0l 0004                                    indf1 0001  
                                  fsr1l 0006                                    btemp 007E  
                 ??_setGestureIntEnable 002A                        __end_of_I2C_Stop 08AC  
                         __CFG_BOREN$ON 0000                 i1_i2c1_driver_getRXData 0882  
                 ?_do_I2C_SEND_ADR_READ 0070                           __CFG_BORV$LOW 0000  
       ??_i2c1_driver_clearBusCollision 0070                                    start 002C  
                       __end_of_Get_ADC 06E3                     I2C_Write_Byte@count 0024  
                         __CFG_CSWEN$ON 0000                           __CFG_MCLRE$ON 0000  
                       __end_of_i2c_ISR 0B3B                ??_do_I2C_DO_NACK_RESTART 0070  
                          ?_readGesture 004F                            _do_I2C_RESET 08FA  
        __size_of_OSCILLATOR_Initialize 0008           __end_of_OSCILLATOR_Initialize 0936  
                  ??i1_i2c1_driver_stop 0070                                   _ADACT 009F  
              __end_of_i2c1_driver_open 0961                                   ?_main 0070  
                       __end_of___awdiv 0F42                __end_of_i2c1_driver_stop 08A9  
                       ___awdiv@divisor 0026                                   _T2CON 001F  
            __end_of_i2c1_driver_TXData 08EE                          __CFG_DEBUG$OFF 0000  
                                 i1l157 0E85                                   i1l173 0DDC  
                                 i1l253 002A                                   i1l245 0010  
                                 i1l248 001E                            ?_setLEDBoost 0070  
                       ___awdiv@counter 002B                            ?_setLEDDrive 0070  
                        _setGestureGain 0CE7                                   _OSCEN 091D  
                    wireReadDataBlock@j 0030                          _setGestureMode 0B3B  
                                 _TRISA 008C                                   _TRISB 008D  
                                 _TRISC 008E             __end_of_setProxIntLowThresh 0A05  
                       __end_of_getMode 0957                   isGestureAvailable@val 002A  
               __end_of_PIN_MANAGER_IOC 0875              __end_of_i2c1_driver_isNACK 091E  
                __size_of_I2C_Read_Byte 000B                          _WDT_Initialize 08D0  
                                 _names 0160                        _b_i2c_error_flag 0076  
          __end_of_setProxIntHighThresh 09F2              ?_do_I2C_SEND_RESTART_WRITE 0070  
                                 _state 0078                                   _start 006E  
                 ??_do_I2C_SEND_RESTART 0070                         __end_of_setMode 0EF0  
                     __end_of_I2C_Start 08A6                                   pclath 000A  
               __size_of_mssp1_clearIRQ 0003                    i1_i2c1_driver_TXData 08D8  
          __size_of_setAmbientLightGain 001E                  ?_do_I2C_SEND_ADR_WRITE 0070  
                __size_of_I2C_Send_NACK 0003                                   status 0003  
                                 wtemp0 007E                      __size_of_SPI_Write 0015  
              ?_setLightIntLowThreshold 002A              __end_of_setGestureLEDDrive 0D4B  
                 setGestureWaitTime@val 002C                           _fsmStateTable 1000  
                         _gesture_data_ 0220                         __initialization 002E  
                ??_setGestureExitThresh 002A                       _SPI2_Exchange8bit 0986  
            processGestureData@lr_delta 004B                              _i2c_status 01A0  
                          __end_of_main 0C84                       _handleGestureFlag 0077  
            processGestureData@ud_delta 0049                      ?_SPI2_Exchange8bit 0070  
               __end_of_TMR2_Initialize 0946             ?_INTERRUPT_InterruptManager 0070  
                __end_of_setGestureGain 0D19               __size_of_setProximityGain 0029  
                __end_of_setGestureMode 0B62                           _do_I2C_DO_ACK 08C4  
                                ??_main 005C           __size_of_i2c1_driver_sendNACK 0004  
              __size_of_SPI2_Initialize 0007                     ??_SPI2_Exchange8bit 0020  
     __size_of_setLightIntHighThreshold 0027           __size_of_i2c1_driver_resetBus 0001  
                __end_of_WDT_Initialize 08D4                 ?_do_I2C_DO_ADDRESS_NACK 0070  
             ?_setLightIntHighThreshold 002A       setLightIntHighThreshold@threshold 002A  
                  __end_of_Display_Name 0DC2                    __size_of_enablePower 000E  
                                _ADCON0 009D                                  _ADCON1 009E  
                                _ADRESH 009C                                  _ADRESL 009B  
                                _CCPR1H 0292                                  _CCPR1L 0291  
                      ___awdiv@dividend 0028                      _processGestureData 006B  
                                _ANSELA 018C                                  _ANSELB 018D  
                                _ANSELC 018E                      __CFG_RSTOSC$HFINT1 0000  
          setProxIntLowThresh@threshold 002B                   ?i1_i2c1_driver_TXData 0070  
                                _RC2PPS 0EA2                                  _RB5PPS 0E9D  
                                _RB6PPS 0E9E                        ?_PWM1_Initialize 0070  
                                _RB7PPS 0E9F                                  _ODCONA 028C  
                                _ODCONB 028D                                  _RC6PPS 0EA6  
                                _ODCONC 028E                                  i1l5037 0B25  
                                i1l4511 0E5B                                  i1l4521 0E61  
                                i1l4515 0E5E                                  i1l4507 0E58  
                                i1l4551 0DDE                                  i1l4529 0E9F  
                                i1l4561 0DE4                                  i1l4571 0C87  
                                i1l4555 0DE1                                  i1l4581 0C8E  
                                i1l4485 0C07                                  i1l4575 0C8A  
                                i1l4495 0C0D                                  i1l7231 0E77  
                                i1l7233 0C22                                  i1l4489 0C0A  
                                i1l7235 0CA6                                  i1l4587 0C91  
                                i1l7229 0DF9               ??i1_i2c1_driver_getRXData 0070  
                             ??_Get_ADC 002C                        _wireReadDataByte 0AF1  
                                _OSCFRQ 091F                 ?_resetGestureParameters 0070  
                ??_do_I2C_SEND_ADR_READ 0070                                  _WDTCON 0097  
                             ??_i2c_ISR 0073                     ?_processGestureData 0070  
                     _gesture_lr_delta_ 0066                          __CFG_PWRTE$OFF 0000  
         setProxIntHighThresh@threshold 002B               __end_of_SPI2_Exchange8bit 0995  
                     _gesture_lr_count_ 0062                     wireReadDataByte@reg 0027  
                 _i2c1_driver_getRXData 0897                     wireReadDataByte@val 0028  
                     _gesture_ud_delta_ 0068             __end_of_do_I2C_DO_NACK_STOP 08CC  
                         _I2C_Read_Byte 0961              __end_of_isGestureAvailable 09B9  
                     _gesture_ud_count_ 0064                                  ___wmul 0A99  
                             ??___awdiv 002A   __end_of_i2c1_driver_clearBusCollision 088E  
__size_of_i2c1_driver_clearBusCollision 0003           _i2c1_driver_clearBusCollision 088B  
            __end_of_setGestureWaitTime 0B89                          __CFG_STVREN$ON 0000  
       __size_of_do_I2C_DO_NACK_RESTART 0004                                  _button 0079  
                      ___awdiv@quotient 002D                          ?_do_I2C_DO_ACK 0070  
                       ?_setGestureGain 0070                           _I2C_Send_NACK 089D  
                             ??_getMode 0029                         ?_setGestureMode 0070  
                                _strlen 0A1A                 ??_setGestureEnterThresh 002A  
                  ??_processGestureData 002F                       __end_of_SPI_Write 0A1A  
           __end_of_i2c1_driver_sendACK 08B0                          _PMD_Initialize 0936  
        __end_of_do_I2C_DO_ADDRESS_NACK 0C2B                            __pdataCOMMON 007A  
                             ?_I2C_Stop 0070                      Display_Name@length 0028  
                             ??_setMode 002C                         ?_WDT_Initialize 0070  
           __end_of_i2c1_driver_restart 0894                            ?_returnReset 0070  
              ADC_GetConversion@channel 0023                       readGesture@motion 0053  
           __end_of_i2c1_driver_startRX 089D                        ?_PIN_MANAGER_IOC 0070  
        __end_of_resetGestureParameters 0A62                       _SYSTEM_Initialize 0A32  
               __end_of__initialization 0067                        _do_I2C_SEND_STOP 08C0  
                    __size_of_do_I2C_RX 0046                      __size_of_do_I2C_TX 004F  
                    ?_SYSTEM_Initialize 0070                  setGestureWaitTime@time 002B  
              __size_of_do_I2C_TX_EMPTY 0031                              _adcResult2 00E0  
                        ?_I2C_Read_Byte 0070                          __pcstackCOMMON 0070  
                          __pidataBANK0 0876                            __pidataBANK2 0946  
                   ??_SYSTEM_Initialize 0020                   i1i2c1_driver_TXData@d 0070  
                  _setProxIntHighThresh 09DF                          _gesture_state_ 005E  
                        ?_I2C_Send_NACK 0070                        ?_TMR2_Initialize 0070  
                 i1_i2c1_driver_restart 0879                  __end_of_PMD_Initialize 093E  
                 i1_i2c1_driver_startRX 087F                    __size_of_readGesture 00F3  
                 __end_of_handleGesture 0F9C       __size_of_i2c1_driver_isBufferFull 0007  
                            ??_I2C_Stop 0020               ?_i2c1_driver_isBufferFull 0070  
                    _gesture_far_count_ 00E2                    __size_of_setLEDBoost 0032  
                  __size_of_setLEDDrive 0029                  _do_I2C_DO_NACK_RESTART 08CC  
                ??i1_i2c1_driver_TXData 0070               __end_of_SYSTEM_Initialize 0A4A  
                     ??_SPI2_Initialize 0020                          _mssp1_clearIRQ 0888  
                            __pbssBANK0 005C                              __pbssBANK1 00E0  
                            __pbssBANK2 0168                              __pbssBANK3 01A0  
                            __pbssBANK4 0220                    wireWriteDataByte@reg 0029  
                  wireWriteDataByte@val 0026                     getMode@enable_value 002A  
              ??i1_i2c1_driver_sendNACK 0070                  ?_i2c1_driver_getRXData 0070  
            __size_of_SPI2_Exchange8bit 000F            __size_of_i2c_busCollisionISR 0003  
                            __pmaintext 0C56                   __end_of_Display_Clear 09A6  
                         ??_do_I2C_IDLE 0070                           ??_do_I2C_RCEN 0070  
               setGestureLEDDrive@drive 002D                                 ?___wmul 0020  
                       __CFG_PPS1WAY$ON 0000                         ??_do_I2C_DO_ACK 0070  
          __size_of_enableGestureSensor 0064                              __pintentry 0004  
                 ?_setProxIntHighThresh 0070                                 _CCP1CON 0293  
               __size_of_I2C_Write_Byte 001C                           ??_I2C_ReStart 0020  
                      _setProximityGain 07D6                             setMode@mode 002F  
                       ?_PMD_Initialize 0070                     _setAmbientLightGain 0AD3  
               __size_of_ADC_Initialize 0008                   __size_of_Display_Name 0041  
        ?_i2c1_driver_clearBusCollision 0070                                 ?_strlen 0020  
                     ?_i2c1_driver_open 0070                       __end_of_do_I2C_RX 0E08  
                     __end_of_do_I2C_TX 0EA1                       ?_i2c1_driver_stop 0070  
                     _wireReadDataBlock 0E08                      ??_i2c1_driver_open 0020  
                    ??_i2c1_driver_stop 0020                                 _OSCCON1 0919  
                               _OSCCON3 091B                           ?_mssp1_setIRQ 0070  
                               _OSCTUNE 091E                    wireReadDataBlock@len 0028  
                  wireReadDataBlock@reg 002F                    wireReadDataBlock@val 0026  
                               _SSP1ADD 0212                                 _SSP2ADD 021A  
                               _SLRCONA 030C                                 _SLRCONB 030D  
                               _SLRCONC 030E                                 _SSP1BUF 0211  
                __end_of_mssp1_clearIRQ 088B                                 _SSP2BUF 0219  
                    ?_wireReadDataBlock 0026                                 _SSP1MSK 0213  
                     SPI_Write@incoming 0022             __end_of_setGestureIntEnable 0C56  
               ??_do_I2C_SEND_ADR_WRITE 0070         processGestureData@lr_ratio_last 0037  
           ??_do_I2C_SEND_RESTART_WRITE 0070                            readGesture@i 0059  
                               _Get_ADC 05E0                      _i2c1_driver_TXData 08E8  
                  ?_setAmbientLightGain 0070                      _i2c1_driver_i2cISR 00E4  
                   ??_wireReadDataBlock 002A                                 _i2c_ISR 0B15  
                             _I2C_Start 08A3                         ??_I2C_Read_Byte 0021  
                         setMode@enable 002B                      _i2c1_driver_isNACK 0916  
                __size_of_decodeGesture 0190                     ?_i2c1_driver_TXData 0070  
                          _Display_Name 0D81                         ??_I2C_Send_NACK 0020  
                               ___awdiv 0EF0                         __size_of___wmul 001C  
                ?i1_i2c1_driver_restart 0070                       ??_do_I2C_TX_EMPTY 0070  
                   ?_i2c1_driver_isNACK 0070                  ?i1_i2c1_driver_startRX 0070  
              __end_of_wireReadDataByte 0B15                              _initialize 04CA  
                               _getMode 094E        __size_of_setLightIntLowThreshold 0027  
                    _setGestureLEDDrive 0D19                                 __ptext1 04CA  
                               __ptext2 07D6                                 __ptext3 09F2  
                               __ptext4 09DF                                 __ptext5 0BB0  
                               __ptext6 0B89                                 __ptext7 0BD7  
                               __ptext8 0B62                                 __ptext9 0D19  
           __size_ofi1_i2c1_driver_stop 0003                     __end_of_do_I2C_IDLE 08E2  
             __end_of_wireReadDataBlock 0E52                     __end_of_do_I2C_RCEN 08E8  
                       __size_of_strlen 0018                   _OSCILLATOR_Initialize 092E  
                             _T2CONbits 001F             __end_of_do_I2C_SEND_RESTART 08C0  
                        ??_mssp1_setIRQ 0070                    ??_i2c1_driver_TXData 0020  
                               _setMode 0EA1                ??_PIN_MANAGER_Initialize 0020  
                   __end_of_I2C_ReStart 0897                     ?_setGestureLEDDrive 0070  
                               _printed 006D                         ?_mssp1_clearIRQ 0070  
              _do_I2C_SEND_RESTART_READ 08B4              __size_of_SYSTEM_Initialize 0018  
                               clrloop0 08EF                    __size_of_returnReset 0002  
                  end_of_initialization 0067                    ??_i2c1_driver_isNACK 0070  
                 ??_setAmbientLightGain 002A            __size_of_setProxIntLowThresh 0013  
                               init_ram 08F4            __end_of_i2c1_driver_sendNACK 08D8  
                               initloop 08F5         __size_ofi1_i2c1_driver_sendNACK 0004  
                            ?_I2C_Start 0070           enableGestureSensor@interrupts 0031  
          __end_of_i2c1_driver_resetBus 0876           setGestureExitThresh@threshold 002B  
                  ??_setGestureLEDDrive 002A                      readGesture@gstatus 0055  
                          initialize@id 0031                        ??_setGestureGain 002A  
                ??_setProxIntHighThresh 002A                        ??_setGestureMode 002A  
             _do_I2C_SEND_RESTART_WRITE 08B8                     Display_Name@string1 0025  
         __size_of_setGestureExitThresh 0013                                 strlen@a 0023  
                               strlen@s 0020                        ??_WDT_Initialize 0020  
                     _wireWriteDataByte 0A62                              _returnStop 0877  
                             _PORTCbits 000E                __end_of_do_I2C_SEND_STOP 08C4  
                         ??_enablePower 0030                      ?_wireWriteDataByte 0026  
       setLightIntHighThreshold@val_low 002D          __size_of_setGestureEnterThresh 0013  
         __end_of_setGestureEnterThresh 09CC                           _decodeGesture 033A  
                    _isGestureAvailable 09A6                      _setGestureWaitTime 0B62  
                             _SPI_Write 0A05                       __size_of_I2C_Stop 0003  
                           returnStop@p 0070                     ??_wireWriteDataByte 0029  
                      __CFG_FEXTOSC$OFF 0000         processGestureData@ud_ratio_last 0035  
                   ?_isGestureAvailable 0070                     ?_setGestureWaitTime 0070  
                           _CCP1CONbits 0293                   SPI2_Exchange8bit@data 0020  
         __size_of_do_I2C_SEND_ADR_READ 0008                   setProximityGain@drive 002D  
              __size_of_PWM1_Initialize 000C        __end_of_i2c1_driver_isBufferFull 0916  
                           _do_I2C_IDLE 08DD                             _do_I2C_RCEN 08E2  
             __end_of_wireWriteDataByte 0A7D                          _I2C_Write_Byte 0A7D  
                  ??_isGestureAvailable 0029                          __end_of___wmul 0AB5  
                  ??_setGestureWaitTime 002A                           __pidataCOMMON 07FF  
                           ?_initialize 0070                             _I2C_ReStart 0894  
                        _ADC_Initialize 0926                  i1_i2c1_driver_sendNACK 08B0  
                ?_OSCILLATOR_Initialize 0070                _setLightIntHighThreshold 0B89  
            __size_of_wireReadDataBlock 004A                         _gesture_motion_ 0168  
                       _SPI2_Initialize 0908            __size_of_do_I2C_DO_NACK_STOP 0004  
           __size_of_processGestureData 02CF                          ?_decodeGesture 0070  
                        __end_of_strlen 0A32                 ?_do_I2C_DO_NACK_RESTART 0070  
                   start_initialization 002E                      setGestureGain@gain 002D  
                   _i2c_busCollisionISR 088E         __size_of_PIN_MANAGER_Initialize 0036  
              ?i1_i2c1_driver_getRXData 0070                              ?_SPI_Write 0070  
      setLightIntHighThreshold@val_high 002E                     _enableGestureSensor 0F9C  
                   __end_of_enablePower 0986            __size_of_i2c1_driver_sendACK 0004  
               ??_i2c1_driver_getRXData 0020                __end_of_setProximityGain 07FF  
          __size_of_i2c1_driver_restart 0003                processGestureData@d_last 0042  
          __size_of_i2c1_driver_startRX 0003                processGestureData@l_last 0043  
                           ??_I2C_Start 0020                processGestureData@r_last 0044  
              __size_of_PIN_MANAGER_IOC 0001                processGestureData@u_last 0041  
               _processGestureData$1535 0039                 _processGestureData$1536 003B  
               _processGestureData$1537 003D                 _processGestureData$1538 003F  
                  ?_i2c_busCollisionISR 0070                        __CFG_LPBOREN$OFF 0000  
                  __end_of_mssp1_setIRQ 0888                  __end_of_I2C_Write_Byte 0A99  
                      ??_PMD_Initialize 0020         setLightIntLowThreshold@val_high 002E  
                              ??___wmul 0024                    ?_enableGestureSensor 0070  
                           _CCPTMRSbits 029F                           ??_readGesture 0051  
                __end_of_ADC_Initialize 092E                           ?_do_I2C_RESET 0070  
                           __pdataBANK0 006E                             __pdataBANK2 0160  
                    setGestureMode@mode 002B                 _setLightIntLowThreshold 0BB0  
             setGestureIntEnable@enable 002C                setAmbientLightGain@drive 002B  
                           ?_returnStop 0070                                ??_strlen 0022  
        __end_of_do_I2C_DO_NACK_RESTART 08D0                           ??_setLEDBoost 002A  
                         ??_setLEDDrive 002A                    _i2c1_driver_sendNACK 08D4  
                setGestureIntEnable@val 002B                             __pbssCOMMON 0076  
                             ___latbits 0002                               _adcResult 006C  
                  _i2c1_driver_resetBus 0875                           __pcstackBANK0 0020  
                         __pcstackBANK1 00A0                           __pcstackBANK2 0120  
              __size_of_TMR2_Initialize 0008                               _do_I2C_RX 0DC2  
                             _do_I2C_TX 0E52          __size_of_do_I2C_SEND_ADR_WRITE 0007  
         __size_ofi1_i2c1_driver_TXData 0005           __end_of_do_I2C_SEND_ADR_WRITE 0908  
                              ?_Get_ADC 0070                   readGesture@fifo_data2 00A0  
             __size_of_i2c1_driver_open 000A                   readGesture@fifo_level 0058  
             __size_of_i2c1_driver_stop 0003                                ?_i2c_ISR 0070  
                   __size_of_initialize 0116                         _do_I2C_TX_EMPTY 0C84  
                __size_of_handleGesture 005A                   ??_i2c_busCollisionISR 0070  
                 __end_of_fsmStateTable 1020                  _PIN_MANAGER_Initialize 0D4B  
               ??i1_i2c1_driver_restart 0070                 ??i1_i2c1_driver_startRX 0070  
                       ?_I2C_Write_Byte 0070                   ??_enableGestureSensor 0030  
               __end_of_SPI2_Initialize 090F                          ??_do_I2C_RESET 0070  
                              ?___awdiv 0026              __size_of_wireWriteDataByte 001B  
              ??_do_I2C_DO_ADDRESS_NACK 0070                         ?_ADC_Initialize 0070  
           _i2c1_driver_busCollisionISR 006A                     _setProxIntLowThresh 09F2  
                 __end_of_do_I2C_DO_ACK 08C8                       ??_PWM1_Initialize 0020  
          ??_INTERRUPT_InterruptManager 0076                _i2c1_driver_isBufferFull 090F  
                              ?_getMode 0070                         ??_decodeGesture 0020  
                     ?_wireReadDataByte 0070              ??_do_I2C_SEND_RESTART_READ 0070  
                 ?_i2c1_driver_sendNACK 0070         __end_ofi1_i2c1_driver_getRXData 0885  
                      ??_mssp1_clearIRQ 0070                             _enablePower 0978  
                    ??_wireReadDataByte 0026                     __end_of_readGesture 07D6  
                 ?_i2c1_driver_resetBus 0070      __size_of_do_I2C_SEND_RESTART_WRITE 0004  
                              _I2C_Stop 08A9                ??_resetGestureParameters 0020  
                              ?_setMode 002B                              ?_do_I2C_RX 0070  
                            ?_do_I2C_TX 0070                        __CFG_WDTE$SWDTEN 0000  
                           ??_SPI_Write 0021                       _i2c1_driver_start 08A0  
                __size_of_Display_Clear 0011                     __end_of_setLEDBoost 0CE7  
                   __end_of_setLEDDrive 0C00                    ?_setProxIntLowThresh 0070  
                 readGesture@bytes_read 0056                      ?_i2c1_driver_start 0070  
                        ___wmul@product 0024                                _LATCbits 010E  
                   __size_of_returnStop 0002                               clear_ram0 08EE  
                              _PIE0bits 0090                                _PIE1bits 0091  
          __size_of_setGestureIntEnable 002B                     _gesture_near_count_ 0060  
                   ??_i2c1_driver_start 0020     __size_of_INTERRUPT_InterruptManager 0028  
                              _PIR0bits 0010                                _PIR1bits 0011  
                 __end_of_I2C_Read_Byte 096C               ??_setLightIntLowThreshold 002C  
                              _SSP1CON1 0215                                _SSP1CON2 0216  
                              _SSP2CON1 021D                          setLEDBoost@val 002C  
                              _SSP1STAT 0214                                _SSP2STAT 021C  
            __end_ofi1_i2c1_driver_stop 087F                       ??_PIN_MANAGER_IOC 0070  
                 __end_of_I2C_Send_NACK 08A0                          setLEDDrive@val 002C  
      processGestureData@lr_ratio_first 0033                              _ADCON0bits 009D  
                     ___wmul@multiplier 0020                       ?_do_I2C_SEND_STOP 0070  
             processGestureData@d_first 0046                           _handleGesture 0F42  
             __end_of_i2c1_driver_start 08A3                           ??_returnReset 0071  
                    ??_do_I2C_SEND_STOP 0070             __size_of_i2c1_driver_TXData 0006  
           __end_of_setAmbientLightGain 0AF1               processGestureData@l_first 0047  
     __end_of_do_I2C_SEND_RESTART_WRITE 08BC                 __end_of_do_I2C_TX_EMPTY 0CB5  
          __end_of_setGestureExitThresh 09DF               processGestureData@r_first 0048  
             processGestureData@u_first 0045                   ??_setProxIntLowThresh 002A  
          __size_of_do_I2C_SEND_RESTART 0004             __size_of_i2c1_driver_isNACK 0008  
                     setGestureGain@val 002C                   __size_of_mssp1_setIRQ 0003  
                     ??_TMR2_Initialize 0020                        __size_of_Get_ADC 0103  
                   _do_I2C_DO_NACK_STOP 08C8                        __size_of_i2c_ISR 0026  
            ??_setLightIntHighThreshold 002C                       _ADC_GetConversion 0AB5  
           __size_of_setGestureLEDDrive 0032                          setMode@reg_val 002E  
        setLightIntLowThreshold@val_low 002D                            ?_do_I2C_IDLE 0070  
                         _Display_Clear 0995                            ?_do_I2C_RCEN 0070  
                     setGestureMode@val 002C                        ?_SPI2_Initialize 0070  
               ?i1_i2c1_driver_sendNACK 0070                 ??_OSCILLATOR_Initialize 0020  
                    ?_ADC_GetConversion 0020                     _i2c1_driver_sendACK 08AC  
                      __size_of___awdiv 0052           __size_of_setProxIntHighThresh 0013  
                           _readGesture 06E3         __size_of_do_I2C_DO_ADDRESS_NACK 002B  
                   i2c1_driver_TXData@d 0020                  ??_i2c1_driver_sendNACK 0020  
                          ??_initialize 0030                            ?_I2C_ReStart 0070  
                   _i2c1_driver_restart 0891        setLightIntLowThreshold@threshold 002A  
                  ?_do_I2C_DO_NACK_STOP 0070                     _i2c1_driver_startRX 089A  
                        ?_handleGesture 0070            __end_of_do_I2C_SEND_ADR_READ 0926  
                      __size_of_getMode 0009                  ??_i2c1_driver_resetBus 0070  
                  readGesture@fifo_data 0120                             _setLEDBoost 0CB5  
                   ??_ADC_GetConversion 0022                             _setLEDDrive 0BD7  
       __size_of_resetGestureParameters 0018                            _mssp1_setIRQ 0885  
       __end_of_setLightIntLowThreshold 0BD7                             ??_do_I2C_RX 0070  
                           ??_do_I2C_TX 0070                   setGestureLEDDrive@val 002C  
                      __size_of_setMode 004F                                __ptext10 0CE7  
                              __ptext11 09CC                                __ptext20 0EF0  
                              __ptext12 09B9                                __ptext21 09A6  
                              __ptext13 0AD3                                __ptext30 0A62  
                              __ptext22 033A                                __ptext14 0957  
                              __ptext31 094E                                __ptext23 0F9C  
                              __ptext15 0F42                                __ptext40 08D4  
                              __ptext32 0AF1                                __ptext24 0CB5  
                              __ptext16 06E3                                __ptext41 0961  
                              __ptext33 0A7D                                __ptext25 0B3B  
                              __ptext17 0E08                                __ptext50 0908  
                              __ptext42 089A                                __ptext34 08E8  
                              __ptext26 0C2B                                __ptext18 006B  
                              __ptext51 096C                                __ptext43 090F  
                              __ptext35 08A9                                __ptext27 0A4A  
                              __ptext19 0A99                                __ptext60 0995  
                              __ptext52 0936                                __ptext44 0897  
                              __ptext36 08A6                                __ptext28 0978  
                              __ptext61 0A05                                __ptext53 0D4B  
                              __ptext45 0894                                __ptext37 08A3  
                              __ptext29 0EA1                                __ptext70 0C00  
                              __ptext62 0986                                __ptext54 092E  
                              __ptext46 0891                                __ptext38 08A0  
                              __ptext71 08CC                                __ptext55 0926  
                              __ptext47 0A32                                __ptext39 089D  
                              __ptext80 08B4                                __ptext72 08C8  
                              __ptext64 088E                                __ptext56 05E0  
                              __ptext48 08D0                                __ptext81 08DD  
                              __ptext73 08C4                                __ptext65 088B  
                              __ptext57 0D81                                __ptext49 093E  
                              __ptext90 087F                                __ptext82 08FA  
                              __ptext74 08E2                                __ptext66 0B15  
                              __ptext58 0A1A                                __ptext91 0002  
                              __ptext83 0C84                                __ptext75 0901  
                              __ptext67 0888                                __ptext59 0AB5  
                              __ptext92 0877                                __ptext84 0885  
                              __ptext76 091E                                __ptext68 0DC2  
                              __ptext93 087C                                __ptext85 0916  
                              __ptext77 08C0                                __ptext69 0E52  
                              __ptext94 0879                                __ptext86 08D8  
                              __ptext78 08BC                                __ptext95 08AC  
                              __ptext87 0882                                __ptext79 08B8  
                              __ptext96 0874                                __ptext88 08B0  
                              __ptext89 0875                   _setGestureEnterThresh 09B9  
                          _SSP1CON1bits 0215                            _SSP1CON2bits 0216  
        setGestureEnterThresh@threshold 002B                            _SSP2CON1bits 021D  
                  ?_i2c1_driver_sendACK 0070                    __end_of_do_I2C_RESET 0901  
                  ?_i2c1_driver_restart 0070                     __end_of_returnReset 0004  
                      _i2c1_driver_open 0957                        _i2c1_driver_stop 08A6  
                         __size_of_main 002E                    ?_i2c1_driver_startRX 0070  
                     ?_setProximityGain 0070          __size_of_i2c1_driver_getRXData 0003  
         __end_of_i2c1_driver_getRXData 089A                      __end_of_initialize 05E0  
             __end_of_ADC_GetConversion 0AD3                      ??_setProximityGain 002A  
      __size_ofi1_i2c1_driver_getRXData 0003                      _decodeGesture$1540 0022  
                    _decodeGesture$1541 0024                      _decodeGesture$1542 0026  
                    _decodeGesture$1543 0028                      _decodeGesture$1544 002A  
                    _decodeGesture$1545 002C                      _decodeGesture$1546 002E  
                    _decodeGesture$1547 0030                          ?_Display_Clear 0070  
        __end_ofi1_i2c1_driver_sendNACK 08B4                                int$flags 007E  
    __end_of_INTERRUPT_InterruptManager 002C              _INTERRUPT_InterruptManager 0004  
                          _SSP1STATbits 0214             __size_of_isGestureAvailable 0013  
                         Display_Name@i 002A                     setProximityGain@val 002C  
      __end_of_do_I2C_SEND_RESTART_READ 08B8             __size_of_setGestureWaitTime 0027  
            __end_of_processGestureData 033A                            ??_returnStop 0071  
                          _SSP2STATbits 021C                   ??_do_I2C_DO_NACK_STOP 0070  
                            Get_ADC@val 002F                 __size_of_setGestureGain 0032  
                            _INTCONbits 000B                 __size_of_setGestureMode 0027  
            __size_of_i2c1_driver_start 0003                  setAmbientLightGain@val 002C  
                 ??_i2c1_driver_sendACK 0070                        ?_do_I2C_TX_EMPTY 0070  
               __size_of_WDT_Initialize 0004                  _do_I2C_DO_ADDRESS_NACK 0C00  
                              intlevel1 0000                   ??_i2c1_driver_restart 0020  
                 ??_i2c1_driver_startRX 0020                 ?_PIN_MANAGER_Initialize 0070  
                      ??_I2C_Write_Byte 0021                       __CFG_CLKOUTEN$OFF 0000  
                    __end_of_returnStop 0879                         _PWM1_Initialize 096C  
                      ??_ADC_Initialize 0020                  _resetGestureParameters 0A4A  
            ??_i2c1_driver_isBufferFull 0020                           ?_Display_Name 0025  
        __size_ofi1_i2c1_driver_restart 0003           __end_ofi1_i2c1_driver_restart 087C  
        __size_ofi1_i2c1_driver_startRX 0003            __end_ofi1_i2c1_driver_TXData 08DD  
         __end_ofi1_i2c1_driver_startRX 0882                    _setGestureExitThresh 09CC  
                       ??_handleGesture 005B                           __pstringtext1 1000  
                         __pstringtext2 1030                           __pstringtext3 103D  
                         __pstringtext4 1049                           __pstringtext5 1054  
                         __pstringtext6 105B                           __pstringtext7 1060  
                         __pstringtext8 1063                           __pstringtext9 0000  
                            _SSP1DATPPS 0E21                            ?_enablePower 0070  
                            _SSP2DATPPS 0E1E                              _SSP1CLKPPS 0E20  
                   _setGestureIntEnable 0C2B                              _SSP2CLKPPS 0E1D  
                      setLEDBoost@boost 002D                  ?_setGestureEnterThresh 0070  
                           _returnReset 0002          __end_of_PIN_MANAGER_Initialize 0D81  
           __end_of_i2c_busCollisionISR 0891               __size_of_wireReadDataByte 0024  
                      setLEDDrive@drive 002D                     processGestureData@i 004D  
                       _PIN_MANAGER_IOC 0874             __end_of_enableGestureSensor 1000  
                 _do_I2C_SEND_ADR_WRITE 0901                    ?_setGestureIntEnable 0070  
            __size_of_ADC_GetConversion 001E                    _do_I2C_SEND_ADR_READ 091E  
                       ??_Display_Clear 0023        __end_of_setLightIntHighThreshold 0BB0  
                        ??_Display_Name 0027  
