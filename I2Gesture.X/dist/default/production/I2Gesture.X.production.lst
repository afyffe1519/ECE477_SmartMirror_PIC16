

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Mon Apr 15 14:13:19 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F18345
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	idataBANK2,global,class=CODE,delta=2
     7                           	psect	stringtext1,global,class=STRCODE,delta=2
     8                           	psect	stringtext2,global,class=STRCODE,delta=2
     9                           	psect	stringtext3,global,class=STRCODE,delta=2
    10                           	psect	stringtext4,global,class=STRCODE,delta=2
    11                           	psect	stringtext5,global,class=STRCODE,delta=2
    12                           	psect	cinit,global,class=CODE,merge=1,delta=2
    13                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    19                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    20                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    21                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    22                           	psect	inittext,global,class=CODE,delta=2
    23                           	psect	clrtext,global,class=CODE,delta=2
    24                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    25                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    26                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    27                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    28                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    29                           	psect	text1,local,class=CODE,merge=1,delta=2
    30                           	psect	text2,local,class=CODE,merge=1,delta=2
    31                           	psect	text3,local,class=CODE,merge=1,delta=2
    32                           	psect	text4,local,class=CODE,merge=1,delta=2
    33                           	psect	text5,local,class=CODE,merge=1,delta=2
    34                           	psect	text6,local,class=CODE,merge=1,delta=2
    35                           	psect	text7,local,class=CODE,merge=1,delta=2
    36                           	psect	text8,local,class=CODE,merge=1,delta=2
    37                           	psect	text9,local,class=CODE,merge=1,delta=2
    38                           	psect	text10,local,class=CODE,merge=1,delta=2
    39                           	psect	text11,local,class=CODE,merge=1,delta=2
    40                           	psect	text12,local,class=CODE,merge=1,delta=2
    41                           	psect	text13,local,class=CODE,merge=1,delta=2
    42                           	psect	text14,local,class=CODE,merge=1,delta=2
    43                           	psect	text15,local,class=CODE,merge=1,delta=2
    44                           	psect	text16,local,class=CODE,merge=1,delta=2
    45                           	psect	text17,local,class=CODE,merge=1,delta=2
    46                           	psect	text18,local,class=CODE,merge=1,delta=2
    47                           	psect	text19,local,class=CODE,merge=1,delta=2,group=1
    48                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    49                           	psect	text21,local,class=CODE,merge=1,delta=2
    50                           	psect	text22,local,class=CODE,merge=1,delta=2
    51                           	psect	text23,local,class=CODE,merge=1,delta=2
    52                           	psect	text24,local,class=CODE,merge=1,delta=2,group=2
    53                           	psect	text25,local,class=CODE,merge=1,delta=2
    54                           	psect	text26,local,class=CODE,merge=1,delta=2
    55                           	psect	text27,local,class=CODE,merge=1,delta=2
    56                           	psect	text28,local,class=CODE,merge=1,delta=2
    57                           	psect	text29,local,class=CODE,merge=1,delta=2
    58                           	psect	text30,local,class=CODE,merge=1,delta=2
    59                           	psect	text31,local,class=CODE,merge=1,delta=2
    60                           	psect	text32,local,class=CODE,merge=1,delta=2
    61                           	psect	text33,local,class=CODE,merge=1,delta=2
    62                           	psect	text34,local,class=CODE,merge=1,delta=2
    63                           	psect	text35,local,class=CODE,merge=1,delta=2
    64                           	psect	text36,local,class=CODE,merge=1,delta=2
    65                           	psect	text37,local,class=CODE,merge=1,delta=2
    66                           	psect	text38,local,class=CODE,merge=1,inline,delta=2
    67                           	psect	text39,local,class=CODE,merge=1,delta=2
    68                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    69                           	psect	text41,local,class=CODE,merge=1,delta=2
    70                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    71                           	psect	text43,local,class=CODE,merge=1,delta=2
    72                           	psect	text44,local,class=CODE,merge=1,inline,delta=2
    73                           	psect	text45,local,class=CODE,merge=1,delta=2
    74                           	psect	text46,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text47,local,class=CODE,merge=1,inline,delta=2
    76                           	psect	text48,local,class=CODE,merge=1,inline,delta=2
    77                           	psect	text49,local,class=CODE,merge=1,delta=2
    78                           	psect	text50,local,class=CODE,merge=1,inline,delta=2
    79                           	psect	text51,local,class=CODE,merge=1,delta=2
    80                           	psect	text52,local,class=CODE,merge=1,delta=2
    81                           	psect	text53,local,class=CODE,merge=1,delta=2
    82                           	psect	text54,local,class=CODE,merge=1,delta=2
    83                           	psect	text55,local,class=CODE,merge=1,delta=2
    84                           	psect	text56,local,class=CODE,merge=1,delta=2
    85                           	psect	text57,local,class=CODE,merge=1,delta=2
    86                           	psect	text58,local,class=CODE,merge=1,delta=2
    87                           	psect	text59,local,class=CODE,merge=1,delta=2
    88                           	psect	text60,local,class=CODE,merge=1,delta=2
    89                           	psect	text61,local,class=CODE,merge=1,delta=2
    90                           	psect	text62,local,class=CODE,merge=1,delta=2
    91                           	psect	intentry,global,class=CODE,delta=2
    92                           	psect	text64,local,class=CODE,merge=1,delta=2
    93                           	psect	text65,local,class=CODE,merge=1,inline,delta=2
    94                           	psect	text66,local,class=CODE,merge=1,delta=2
    95                           	psect	text67,local,class=CODE,merge=1,inline,delta=2
    96                           	psect	text68,local,class=CODE,merge=1,delta=2
    97                           	psect	text69,local,class=CODE,merge=1,delta=2
    98                           	psect	text70,local,class=CODE,merge=1,delta=2
    99                           	psect	text71,local,class=CODE,merge=1,delta=2
   100                           	psect	text72,local,class=CODE,merge=1,delta=2
   101                           	psect	text73,local,class=CODE,merge=1,delta=2
   102                           	psect	text74,local,class=CODE,merge=1,delta=2
   103                           	psect	text75,local,class=CODE,merge=1,delta=2
   104                           	psect	text76,local,class=CODE,merge=1,delta=2
   105                           	psect	text77,local,class=CODE,merge=1,delta=2
   106                           	psect	text78,local,class=CODE,merge=1,delta=2
   107                           	psect	text79,local,class=CODE,merge=1,delta=2
   108                           	psect	text80,local,class=CODE,merge=1,delta=2
   109                           	psect	text81,local,class=CODE,merge=1,delta=2
   110                           	psect	text82,local,class=CODE,merge=1,delta=2
   111                           	psect	text83,local,class=CODE,merge=1,delta=2
   112                           	psect	text84,local,class=CODE,merge=1,inline,delta=2
   113                           	psect	text85,local,class=CODE,merge=1,inline,delta=2
   114                           	psect	text86,local,class=CODE,merge=1,inline,delta=2
   115                           	psect	text87,local,class=CODE,merge=1,inline,delta=2
   116                           	psect	text88,local,class=CODE,merge=1,inline,delta=2
   117                           	psect	text89,local,class=CODE,merge=1,inline,delta=2
   118                           	psect	text90,local,class=CODE,merge=1,inline,delta=2
   119                           	psect	text91,local,class=CODE,merge=1,delta=2
   120                           	psect	text92,local,class=CODE,merge=1,delta=2
   121                           	psect	text93,local,class=CODE,merge=1,inline,delta=2
   122                           	psect	text94,local,class=CODE,merge=1,inline,delta=2
   123                           	psect	text95,local,class=CODE,merge=1,inline,delta=2
   124                           	psect	text96,local,class=CODE,merge=1,delta=2
   125                           	dabs	1,0x7E,2
   126  0000                     
   127                           ; Version 2.05
   128                           ; Generated 20/12/2018 GMT
   129                           ; 
   130                           ; Copyright © 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
   131                           ; All rights reserved.
   132                           ; 
   133                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   134                           ; 
   135                           ; Redistribution and use in source and binary forms, with or without modification, are
   136                           ; permitted provided that the following conditions are met:
   137                           ; 
   138                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   139                           ;        conditions and the following disclaimer.
   140                           ; 
   141                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   142                           ;        of conditions and the following disclaimer in the documentation and/or other
   143                           ;        materials provided with the distribution.
   144                           ; 
   145                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   146                           ;        software without specific prior written permission.
   147                           ; 
   148                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   149                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   150                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   151                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   152                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   153                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   154                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   155                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   156                           ; 
   157                           ; 
   158                           ; Code-generator required, PIC16F18345 Definitions
   159                           ; 
   160                           ; SFR Addresses
   161  0000                     	;# 
   162  0001                     	;# 
   163  0002                     	;# 
   164  0003                     	;# 
   165  0004                     	;# 
   166  0005                     	;# 
   167  0006                     	;# 
   168  0007                     	;# 
   169  0008                     	;# 
   170  0009                     	;# 
   171  000A                     	;# 
   172  000B                     	;# 
   173  000C                     	;# 
   174  000D                     	;# 
   175  000E                     	;# 
   176  0010                     	;# 
   177  0011                     	;# 
   178  0012                     	;# 
   179  0013                     	;# 
   180  0014                     	;# 
   181  0015                     	;# 
   182  0015                     	;# 
   183  0016                     	;# 
   184  0016                     	;# 
   185  0017                     	;# 
   186  0018                     	;# 
   187  0019                     	;# 
   188  0019                     	;# 
   189  001A                     	;# 
   190  001B                     	;# 
   191  001C                     	;# 
   192  001D                     	;# 
   193  001E                     	;# 
   194  001F                     	;# 
   195  008C                     	;# 
   196  008D                     	;# 
   197  008E                     	;# 
   198  0090                     	;# 
   199  0091                     	;# 
   200  0092                     	;# 
   201  0093                     	;# 
   202  0094                     	;# 
   203  0097                     	;# 
   204  009B                     	;# 
   205  009B                     	;# 
   206  009C                     	;# 
   207  009D                     	;# 
   208  009E                     	;# 
   209  009F                     	;# 
   210  010C                     	;# 
   211  010D                     	;# 
   212  010E                     	;# 
   213  0111                     	;# 
   214  0112                     	;# 
   215  0113                     	;# 
   216  0114                     	;# 
   217  0115                     	;# 
   218  0116                     	;# 
   219  0117                     	;# 
   220  0118                     	;# 
   221  0119                     	;# 
   222  018C                     	;# 
   223  018D                     	;# 
   224  018E                     	;# 
   225  0197                     	;# 
   226  0199                     	;# 
   227  0199                     	;# 
   228  0199                     	;# 
   229  019A                     	;# 
   230  019A                     	;# 
   231  019A                     	;# 
   232  019B                     	;# 
   233  019B                     	;# 
   234  019B                     	;# 
   235  019B                     	;# 
   236  019B                     	;# 
   237  019C                     	;# 
   238  019C                     	;# 
   239  019C                     	;# 
   240  019D                     	;# 
   241  019D                     	;# 
   242  019D                     	;# 
   243  019E                     	;# 
   244  019E                     	;# 
   245  019E                     	;# 
   246  019F                     	;# 
   247  019F                     	;# 
   248  019F                     	;# 
   249  019F                     	;# 
   250  019F                     	;# 
   251  020C                     	;# 
   252  020D                     	;# 
   253  020E                     	;# 
   254  0211                     	;# 
   255  0211                     	;# 
   256  0212                     	;# 
   257  0212                     	;# 
   258  0213                     	;# 
   259  0213                     	;# 
   260  0214                     	;# 
   261  0214                     	;# 
   262  0215                     	;# 
   263  0215                     	;# 
   264  0215                     	;# 
   265  0215                     	;# 
   266  0216                     	;# 
   267  0216                     	;# 
   268  0217                     	;# 
   269  0217                     	;# 
   270  0219                     	;# 
   271  021A                     	;# 
   272  021B                     	;# 
   273  021C                     	;# 
   274  021D                     	;# 
   275  021D                     	;# 
   276  021E                     	;# 
   277  021F                     	;# 
   278  028C                     	;# 
   279  028D                     	;# 
   280  028E                     	;# 
   281  0291                     	;# 
   282  0291                     	;# 
   283  0292                     	;# 
   284  0293                     	;# 
   285  0294                     	;# 
   286  0295                     	;# 
   287  0295                     	;# 
   288  0296                     	;# 
   289  0297                     	;# 
   290  0298                     	;# 
   291  029F                     	;# 
   292  030C                     	;# 
   293  030D                     	;# 
   294  030E                     	;# 
   295  0311                     	;# 
   296  0311                     	;# 
   297  0312                     	;# 
   298  0313                     	;# 
   299  0314                     	;# 
   300  0315                     	;# 
   301  0315                     	;# 
   302  0316                     	;# 
   303  0317                     	;# 
   304  0318                     	;# 
   305  038C                     	;# 
   306  038D                     	;# 
   307  038E                     	;# 
   308  0391                     	;# 
   309  0392                     	;# 
   310  0393                     	;# 
   311  0394                     	;# 
   312  0395                     	;# 
   313  0396                     	;# 
   314  0397                     	;# 
   315  0398                     	;# 
   316  0399                     	;# 
   317  039A                     	;# 
   318  039C                     	;# 
   319  039D                     	;# 
   320  039E                     	;# 
   321  039F                     	;# 
   322  0411                     	;# 
   323  0411                     	;# 
   324  0412                     	;# 
   325  0413                     	;# 
   326  0414                     	;# 
   327  0415                     	;# 
   328  0416                     	;# 
   329  0417                     	;# 
   330  0418                     	;# 
   331  0418                     	;# 
   332  0419                     	;# 
   333  041A                     	;# 
   334  041B                     	;# 
   335  041C                     	;# 
   336  041D                     	;# 
   337  041E                     	;# 
   338  041F                     	;# 
   339  0498                     	;# 
   340  0498                     	;# 
   341  0499                     	;# 
   342  049A                     	;# 
   343  049B                     	;# 
   344  049B                     	;# 
   345  049C                     	;# 
   346  049D                     	;# 
   347  049E                     	;# 
   348  049F                     	;# 
   349  0617                     	;# 
   350  0618                     	;# 
   351  0619                     	;# 
   352  0619                     	;# 
   353  061A                     	;# 
   354  061B                     	;# 
   355  061C                     	;# 
   356  061C                     	;# 
   357  061F                     	;# 
   358  0691                     	;# 
   359  0692                     	;# 
   360  0693                     	;# 
   361  0694                     	;# 
   362  0695                     	;# 
   363  0696                     	;# 
   364  0697                     	;# 
   365  0698                     	;# 
   366  0699                     	;# 
   367  0711                     	;# 
   368  0712                     	;# 
   369  0713                     	;# 
   370  0714                     	;# 
   371  0715                     	;# 
   372  0716                     	;# 
   373  0717                     	;# 
   374  0718                     	;# 
   375  0719                     	;# 
   376  0891                     	;# 
   377  0891                     	;# 
   378  0891                     	;# 
   379  0891                     	;# 
   380  0891                     	;# 
   381  0891                     	;# 
   382  0892                     	;# 
   383  0892                     	;# 
   384  0892                     	;# 
   385  0893                     	;# 
   386  0893                     	;# 
   387  0893                     	;# 
   388  0893                     	;# 
   389  0893                     	;# 
   390  0893                     	;# 
   391  0894                     	;# 
   392  0894                     	;# 
   393  0894                     	;# 
   394  0895                     	;# 
   395  0895                     	;# 
   396  0895                     	;# 
   397  0896                     	;# 
   398  0896                     	;# 
   399  0896                     	;# 
   400  089B                     	;# 
   401  0911                     	;# 
   402  0912                     	;# 
   403  0913                     	;# 
   404  0914                     	;# 
   405  0915                     	;# 
   406  0916                     	;# 
   407  0918                     	;# 
   408  0919                     	;# 
   409  091A                     	;# 
   410  091B                     	;# 
   411  091C                     	;# 
   412  091D                     	;# 
   413  091E                     	;# 
   414  091F                     	;# 
   415  0E0F                     	;# 
   416  0E10                     	;# 
   417  0E11                     	;# 
   418  0E12                     	;# 
   419  0E13                     	;# 
   420  0E14                     	;# 
   421  0E15                     	;# 
   422  0E16                     	;# 
   423  0E17                     	;# 
   424  0E18                     	;# 
   425  0E19                     	;# 
   426  0E1A                     	;# 
   427  0E1B                     	;# 
   428  0E1C                     	;# 
   429  0E1D                     	;# 
   430  0E1E                     	;# 
   431  0E1F                     	;# 
   432  0E20                     	;# 
   433  0E21                     	;# 
   434  0E22                     	;# 
   435  0E24                     	;# 
   436  0E25                     	;# 
   437  0E28                     	;# 
   438  0E29                     	;# 
   439  0E2A                     	;# 
   440  0E2B                     	;# 
   441  0E2C                     	;# 
   442  0E2D                     	;# 
   443  0E2E                     	;# 
   444  0E2F                     	;# 
   445  0E90                     	;# 
   446  0E91                     	;# 
   447  0E92                     	;# 
   448  0E94                     	;# 
   449  0E95                     	;# 
   450  0E9C                     	;# 
   451  0E9D                     	;# 
   452  0E9E                     	;# 
   453  0E9F                     	;# 
   454  0EA0                     	;# 
   455  0EA1                     	;# 
   456  0EA2                     	;# 
   457  0EA3                     	;# 
   458  0EA4                     	;# 
   459  0EA5                     	;# 
   460  0EA6                     	;# 
   461  0EA7                     	;# 
   462  0F0F                     	;# 
   463  0F10                     	;# 
   464  0F11                     	;# 
   465  0F12                     	;# 
   466  0F13                     	;# 
   467  0F14                     	;# 
   468  0F15                     	;# 
   469  0F16                     	;# 
   470  0F17                     	;# 
   471  0F18                     	;# 
   472  0F19                     	;# 
   473  0F1A                     	;# 
   474  0F1B                     	;# 
   475  0F1C                     	;# 
   476  0F1D                     	;# 
   477  0F1E                     	;# 
   478  0F1F                     	;# 
   479  0F20                     	;# 
   480  0F21                     	;# 
   481  0F22                     	;# 
   482  0F23                     	;# 
   483  0F24                     	;# 
   484  0F25                     	;# 
   485  0F26                     	;# 
   486  0F27                     	;# 
   487  0F28                     	;# 
   488  0F29                     	;# 
   489  0F2A                     	;# 
   490  0F2B                     	;# 
   491  0F2C                     	;# 
   492  0F2D                     	;# 
   493  0F2E                     	;# 
   494  0F2F                     	;# 
   495  0F30                     	;# 
   496  0F31                     	;# 
   497  0F32                     	;# 
   498  0F33                     	;# 
   499  0F34                     	;# 
   500  0F35                     	;# 
   501  0F36                     	;# 
   502  0F37                     	;# 
   503  0FE4                     	;# 
   504  0FE5                     	;# 
   505  0FE6                     	;# 
   506  0FE7                     	;# 
   507  0FE8                     	;# 
   508  0FE9                     	;# 
   509  0FEA                     	;# 
   510  0FEB                     	;# 
   511  0FED                     	;# 
   512  0FEE                     	;# 
   513  0FEF                     	;# 
   514  0000                     	;# 
   515  0001                     	;# 
   516  0002                     	;# 
   517  0003                     	;# 
   518  0004                     	;# 
   519  0005                     	;# 
   520  0006                     	;# 
   521  0007                     	;# 
   522  0008                     	;# 
   523  0009                     	;# 
   524  000A                     	;# 
   525  000B                     	;# 
   526  000C                     	;# 
   527  000D                     	;# 
   528  000E                     	;# 
   529  0010                     	;# 
   530  0011                     	;# 
   531  0012                     	;# 
   532  0013                     	;# 
   533  0014                     	;# 
   534  0015                     	;# 
   535  0015                     	;# 
   536  0016                     	;# 
   537  0016                     	;# 
   538  0017                     	;# 
   539  0018                     	;# 
   540  0019                     	;# 
   541  0019                     	;# 
   542  001A                     	;# 
   543  001B                     	;# 
   544  001C                     	;# 
   545  001D                     	;# 
   546  001E                     	;# 
   547  001F                     	;# 
   548  008C                     	;# 
   549  008D                     	;# 
   550  008E                     	;# 
   551  0090                     	;# 
   552  0091                     	;# 
   553  0092                     	;# 
   554  0093                     	;# 
   555  0094                     	;# 
   556  0097                     	;# 
   557  009B                     	;# 
   558  009B                     	;# 
   559  009C                     	;# 
   560  009D                     	;# 
   561  009E                     	;# 
   562  009F                     	;# 
   563  010C                     	;# 
   564  010D                     	;# 
   565  010E                     	;# 
   566  0111                     	;# 
   567  0112                     	;# 
   568  0113                     	;# 
   569  0114                     	;# 
   570  0115                     	;# 
   571  0116                     	;# 
   572  0117                     	;# 
   573  0118                     	;# 
   574  0119                     	;# 
   575  018C                     	;# 
   576  018D                     	;# 
   577  018E                     	;# 
   578  0197                     	;# 
   579  0199                     	;# 
   580  0199                     	;# 
   581  0199                     	;# 
   582  019A                     	;# 
   583  019A                     	;# 
   584  019A                     	;# 
   585  019B                     	;# 
   586  019B                     	;# 
   587  019B                     	;# 
   588  019B                     	;# 
   589  019B                     	;# 
   590  019C                     	;# 
   591  019C                     	;# 
   592  019C                     	;# 
   593  019D                     	;# 
   594  019D                     	;# 
   595  019D                     	;# 
   596  019E                     	;# 
   597  019E                     	;# 
   598  019E                     	;# 
   599  019F                     	;# 
   600  019F                     	;# 
   601  019F                     	;# 
   602  019F                     	;# 
   603  019F                     	;# 
   604  020C                     	;# 
   605  020D                     	;# 
   606  020E                     	;# 
   607  0211                     	;# 
   608  0211                     	;# 
   609  0212                     	;# 
   610  0212                     	;# 
   611  0213                     	;# 
   612  0213                     	;# 
   613  0214                     	;# 
   614  0214                     	;# 
   615  0215                     	;# 
   616  0215                     	;# 
   617  0215                     	;# 
   618  0215                     	;# 
   619  0216                     	;# 
   620  0216                     	;# 
   621  0217                     	;# 
   622  0217                     	;# 
   623  0219                     	;# 
   624  021A                     	;# 
   625  021B                     	;# 
   626  021C                     	;# 
   627  021D                     	;# 
   628  021D                     	;# 
   629  021E                     	;# 
   630  021F                     	;# 
   631  028C                     	;# 
   632  028D                     	;# 
   633  028E                     	;# 
   634  0291                     	;# 
   635  0291                     	;# 
   636  0292                     	;# 
   637  0293                     	;# 
   638  0294                     	;# 
   639  0295                     	;# 
   640  0295                     	;# 
   641  0296                     	;# 
   642  0297                     	;# 
   643  0298                     	;# 
   644  029F                     	;# 
   645  030C                     	;# 
   646  030D                     	;# 
   647  030E                     	;# 
   648  0311                     	;# 
   649  0311                     	;# 
   650  0312                     	;# 
   651  0313                     	;# 
   652  0314                     	;# 
   653  0315                     	;# 
   654  0315                     	;# 
   655  0316                     	;# 
   656  0317                     	;# 
   657  0318                     	;# 
   658  038C                     	;# 
   659  038D                     	;# 
   660  038E                     	;# 
   661  0391                     	;# 
   662  0392                     	;# 
   663  0393                     	;# 
   664  0394                     	;# 
   665  0395                     	;# 
   666  0396                     	;# 
   667  0397                     	;# 
   668  0398                     	;# 
   669  0399                     	;# 
   670  039A                     	;# 
   671  039C                     	;# 
   672  039D                     	;# 
   673  039E                     	;# 
   674  039F                     	;# 
   675  0411                     	;# 
   676  0411                     	;# 
   677  0412                     	;# 
   678  0413                     	;# 
   679  0414                     	;# 
   680  0415                     	;# 
   681  0416                     	;# 
   682  0417                     	;# 
   683  0418                     	;# 
   684  0418                     	;# 
   685  0419                     	;# 
   686  041A                     	;# 
   687  041B                     	;# 
   688  041C                     	;# 
   689  041D                     	;# 
   690  041E                     	;# 
   691  041F                     	;# 
   692  0498                     	;# 
   693  0498                     	;# 
   694  0499                     	;# 
   695  049A                     	;# 
   696  049B                     	;# 
   697  049B                     	;# 
   698  049C                     	;# 
   699  049D                     	;# 
   700  049E                     	;# 
   701  049F                     	;# 
   702  0617                     	;# 
   703  0618                     	;# 
   704  0619                     	;# 
   705  0619                     	;# 
   706  061A                     	;# 
   707  061B                     	;# 
   708  061C                     	;# 
   709  061C                     	;# 
   710  061F                     	;# 
   711  0691                     	;# 
   712  0692                     	;# 
   713  0693                     	;# 
   714  0694                     	;# 
   715  0695                     	;# 
   716  0696                     	;# 
   717  0697                     	;# 
   718  0698                     	;# 
   719  0699                     	;# 
   720  0711                     	;# 
   721  0712                     	;# 
   722  0713                     	;# 
   723  0714                     	;# 
   724  0715                     	;# 
   725  0716                     	;# 
   726  0717                     	;# 
   727  0718                     	;# 
   728  0719                     	;# 
   729  0891                     	;# 
   730  0891                     	;# 
   731  0891                     	;# 
   732  0891                     	;# 
   733  0891                     	;# 
   734  0891                     	;# 
   735  0892                     	;# 
   736  0892                     	;# 
   737  0892                     	;# 
   738  0893                     	;# 
   739  0893                     	;# 
   740  0893                     	;# 
   741  0893                     	;# 
   742  0893                     	;# 
   743  0893                     	;# 
   744  0894                     	;# 
   745  0894                     	;# 
   746  0894                     	;# 
   747  0895                     	;# 
   748  0895                     	;# 
   749  0895                     	;# 
   750  0896                     	;# 
   751  0896                     	;# 
   752  0896                     	;# 
   753  089B                     	;# 
   754  0911                     	;# 
   755  0912                     	;# 
   756  0913                     	;# 
   757  0914                     	;# 
   758  0915                     	;# 
   759  0916                     	;# 
   760  0918                     	;# 
   761  0919                     	;# 
   762  091A                     	;# 
   763  091B                     	;# 
   764  091C                     	;# 
   765  091D                     	;# 
   766  091E                     	;# 
   767  091F                     	;# 
   768  0E0F                     	;# 
   769  0E10                     	;# 
   770  0E11                     	;# 
   771  0E12                     	;# 
   772  0E13                     	;# 
   773  0E14                     	;# 
   774  0E15                     	;# 
   775  0E16                     	;# 
   776  0E17                     	;# 
   777  0E18                     	;# 
   778  0E19                     	;# 
   779  0E1A                     	;# 
   780  0E1B                     	;# 
   781  0E1C                     	;# 
   782  0E1D                     	;# 
   783  0E1E                     	;# 
   784  0E1F                     	;# 
   785  0E20                     	;# 
   786  0E21                     	;# 
   787  0E22                     	;# 
   788  0E24                     	;# 
   789  0E25                     	;# 
   790  0E28                     	;# 
   791  0E29                     	;# 
   792  0E2A                     	;# 
   793  0E2B                     	;# 
   794  0E2C                     	;# 
   795  0E2D                     	;# 
   796  0E2E                     	;# 
   797  0E2F                     	;# 
   798  0E90                     	;# 
   799  0E91                     	;# 
   800  0E92                     	;# 
   801  0E94                     	;# 
   802  0E95                     	;# 
   803  0E9C                     	;# 
   804  0E9D                     	;# 
   805  0E9E                     	;# 
   806  0E9F                     	;# 
   807  0EA0                     	;# 
   808  0EA1                     	;# 
   809  0EA2                     	;# 
   810  0EA3                     	;# 
   811  0EA4                     	;# 
   812  0EA5                     	;# 
   813  0EA6                     	;# 
   814  0EA7                     	;# 
   815  0F0F                     	;# 
   816  0F10                     	;# 
   817  0F11                     	;# 
   818  0F12                     	;# 
   819  0F13                     	;# 
   820  0F14                     	;# 
   821  0F15                     	;# 
   822  0F16                     	;# 
   823  0F17                     	;# 
   824  0F18                     	;# 
   825  0F19                     	;# 
   826  0F1A                     	;# 
   827  0F1B                     	;# 
   828  0F1C                     	;# 
   829  0F1D                     	;# 
   830  0F1E                     	;# 
   831  0F1F                     	;# 
   832  0F20                     	;# 
   833  0F21                     	;# 
   834  0F22                     	;# 
   835  0F23                     	;# 
   836  0F24                     	;# 
   837  0F25                     	;# 
   838  0F26                     	;# 
   839  0F27                     	;# 
   840  0F28                     	;# 
   841  0F29                     	;# 
   842  0F2A                     	;# 
   843  0F2B                     	;# 
   844  0F2C                     	;# 
   845  0F2D                     	;# 
   846  0F2E                     	;# 
   847  0F2F                     	;# 
   848  0F30                     	;# 
   849  0F31                     	;# 
   850  0F32                     	;# 
   851  0F33                     	;# 
   852  0F34                     	;# 
   853  0F35                     	;# 
   854  0F36                     	;# 
   855  0F37                     	;# 
   856  0FE4                     	;# 
   857  0FE5                     	;# 
   858  0FE6                     	;# 
   859  0FE7                     	;# 
   860  0FE8                     	;# 
   861  0FE9                     	;# 
   862  0FEA                     	;# 
   863  0FEB                     	;# 
   864  0FED                     	;# 
   865  0FEE                     	;# 
   866  0FEF                     	;# 
   867  0000                     	;# 
   868  0001                     	;# 
   869  0002                     	;# 
   870  0003                     	;# 
   871  0004                     	;# 
   872  0005                     	;# 
   873  0006                     	;# 
   874  0007                     	;# 
   875  0008                     	;# 
   876  0009                     	;# 
   877  000A                     	;# 
   878  000B                     	;# 
   879  000C                     	;# 
   880  000D                     	;# 
   881  000E                     	;# 
   882  0010                     	;# 
   883  0011                     	;# 
   884  0012                     	;# 
   885  0013                     	;# 
   886  0014                     	;# 
   887  0015                     	;# 
   888  0015                     	;# 
   889  0016                     	;# 
   890  0016                     	;# 
   891  0017                     	;# 
   892  0018                     	;# 
   893  0019                     	;# 
   894  0019                     	;# 
   895  001A                     	;# 
   896  001B                     	;# 
   897  001C                     	;# 
   898  001D                     	;# 
   899  001E                     	;# 
   900  001F                     	;# 
   901  008C                     	;# 
   902  008D                     	;# 
   903  008E                     	;# 
   904  0090                     	;# 
   905  0091                     	;# 
   906  0092                     	;# 
   907  0093                     	;# 
   908  0094                     	;# 
   909  0097                     	;# 
   910  009B                     	;# 
   911  009B                     	;# 
   912  009C                     	;# 
   913  009D                     	;# 
   914  009E                     	;# 
   915  009F                     	;# 
   916  010C                     	;# 
   917  010D                     	;# 
   918  010E                     	;# 
   919  0111                     	;# 
   920  0112                     	;# 
   921  0113                     	;# 
   922  0114                     	;# 
   923  0115                     	;# 
   924  0116                     	;# 
   925  0117                     	;# 
   926  0118                     	;# 
   927  0119                     	;# 
   928  018C                     	;# 
   929  018D                     	;# 
   930  018E                     	;# 
   931  0197                     	;# 
   932  0199                     	;# 
   933  0199                     	;# 
   934  0199                     	;# 
   935  019A                     	;# 
   936  019A                     	;# 
   937  019A                     	;# 
   938  019B                     	;# 
   939  019B                     	;# 
   940  019B                     	;# 
   941  019B                     	;# 
   942  019B                     	;# 
   943  019C                     	;# 
   944  019C                     	;# 
   945  019C                     	;# 
   946  019D                     	;# 
   947  019D                     	;# 
   948  019D                     	;# 
   949  019E                     	;# 
   950  019E                     	;# 
   951  019E                     	;# 
   952  019F                     	;# 
   953  019F                     	;# 
   954  019F                     	;# 
   955  019F                     	;# 
   956  019F                     	;# 
   957  020C                     	;# 
   958  020D                     	;# 
   959  020E                     	;# 
   960  0211                     	;# 
   961  0211                     	;# 
   962  0212                     	;# 
   963  0212                     	;# 
   964  0213                     	;# 
   965  0213                     	;# 
   966  0214                     	;# 
   967  0214                     	;# 
   968  0215                     	;# 
   969  0215                     	;# 
   970  0215                     	;# 
   971  0215                     	;# 
   972  0216                     	;# 
   973  0216                     	;# 
   974  0217                     	;# 
   975  0217                     	;# 
   976  0219                     	;# 
   977  021A                     	;# 
   978  021B                     	;# 
   979  021C                     	;# 
   980  021D                     	;# 
   981  021D                     	;# 
   982  021E                     	;# 
   983  021F                     	;# 
   984  028C                     	;# 
   985  028D                     	;# 
   986  028E                     	;# 
   987  0291                     	;# 
   988  0291                     	;# 
   989  0292                     	;# 
   990  0293                     	;# 
   991  0294                     	;# 
   992  0295                     	;# 
   993  0295                     	;# 
   994  0296                     	;# 
   995  0297                     	;# 
   996  0298                     	;# 
   997  029F                     	;# 
   998  030C                     	;# 
   999  030D                     	;# 
  1000  030E                     	;# 
  1001  0311                     	;# 
  1002  0311                     	;# 
  1003  0312                     	;# 
  1004  0313                     	;# 
  1005  0314                     	;# 
  1006  0315                     	;# 
  1007  0315                     	;# 
  1008  0316                     	;# 
  1009  0317                     	;# 
  1010  0318                     	;# 
  1011  038C                     	;# 
  1012  038D                     	;# 
  1013  038E                     	;# 
  1014  0391                     	;# 
  1015  0392                     	;# 
  1016  0393                     	;# 
  1017  0394                     	;# 
  1018  0395                     	;# 
  1019  0396                     	;# 
  1020  0397                     	;# 
  1021  0398                     	;# 
  1022  0399                     	;# 
  1023  039A                     	;# 
  1024  039C                     	;# 
  1025  039D                     	;# 
  1026  039E                     	;# 
  1027  039F                     	;# 
  1028  0411                     	;# 
  1029  0411                     	;# 
  1030  0412                     	;# 
  1031  0413                     	;# 
  1032  0414                     	;# 
  1033  0415                     	;# 
  1034  0416                     	;# 
  1035  0417                     	;# 
  1036  0418                     	;# 
  1037  0418                     	;# 
  1038  0419                     	;# 
  1039  041A                     	;# 
  1040  041B                     	;# 
  1041  041C                     	;# 
  1042  041D                     	;# 
  1043  041E                     	;# 
  1044  041F                     	;# 
  1045  0498                     	;# 
  1046  0498                     	;# 
  1047  0499                     	;# 
  1048  049A                     	;# 
  1049  049B                     	;# 
  1050  049B                     	;# 
  1051  049C                     	;# 
  1052  049D                     	;# 
  1053  049E                     	;# 
  1054  049F                     	;# 
  1055  0617                     	;# 
  1056  0618                     	;# 
  1057  0619                     	;# 
  1058  0619                     	;# 
  1059  061A                     	;# 
  1060  061B                     	;# 
  1061  061C                     	;# 
  1062  061C                     	;# 
  1063  061F                     	;# 
  1064  0691                     	;# 
  1065  0692                     	;# 
  1066  0693                     	;# 
  1067  0694                     	;# 
  1068  0695                     	;# 
  1069  0696                     	;# 
  1070  0697                     	;# 
  1071  0698                     	;# 
  1072  0699                     	;# 
  1073  0711                     	;# 
  1074  0712                     	;# 
  1075  0713                     	;# 
  1076  0714                     	;# 
  1077  0715                     	;# 
  1078  0716                     	;# 
  1079  0717                     	;# 
  1080  0718                     	;# 
  1081  0719                     	;# 
  1082  0891                     	;# 
  1083  0891                     	;# 
  1084  0891                     	;# 
  1085  0891                     	;# 
  1086  0891                     	;# 
  1087  0891                     	;# 
  1088  0892                     	;# 
  1089  0892                     	;# 
  1090  0892                     	;# 
  1091  0893                     	;# 
  1092  0893                     	;# 
  1093  0893                     	;# 
  1094  0893                     	;# 
  1095  0893                     	;# 
  1096  0893                     	;# 
  1097  0894                     	;# 
  1098  0894                     	;# 
  1099  0894                     	;# 
  1100  0895                     	;# 
  1101  0895                     	;# 
  1102  0895                     	;# 
  1103  0896                     	;# 
  1104  0896                     	;# 
  1105  0896                     	;# 
  1106  089B                     	;# 
  1107  0911                     	;# 
  1108  0912                     	;# 
  1109  0913                     	;# 
  1110  0914                     	;# 
  1111  0915                     	;# 
  1112  0916                     	;# 
  1113  0918                     	;# 
  1114  0919                     	;# 
  1115  091A                     	;# 
  1116  091B                     	;# 
  1117  091C                     	;# 
  1118  091D                     	;# 
  1119  091E                     	;# 
  1120  091F                     	;# 
  1121  0E0F                     	;# 
  1122  0E10                     	;# 
  1123  0E11                     	;# 
  1124  0E12                     	;# 
  1125  0E13                     	;# 
  1126  0E14                     	;# 
  1127  0E15                     	;# 
  1128  0E16                     	;# 
  1129  0E17                     	;# 
  1130  0E18                     	;# 
  1131  0E19                     	;# 
  1132  0E1A                     	;# 
  1133  0E1B                     	;# 
  1134  0E1C                     	;# 
  1135  0E1D                     	;# 
  1136  0E1E                     	;# 
  1137  0E1F                     	;# 
  1138  0E20                     	;# 
  1139  0E21                     	;# 
  1140  0E22                     	;# 
  1141  0E24                     	;# 
  1142  0E25                     	;# 
  1143  0E28                     	;# 
  1144  0E29                     	;# 
  1145  0E2A                     	;# 
  1146  0E2B                     	;# 
  1147  0E2C                     	;# 
  1148  0E2D                     	;# 
  1149  0E2E                     	;# 
  1150  0E2F                     	;# 
  1151  0E90                     	;# 
  1152  0E91                     	;# 
  1153  0E92                     	;# 
  1154  0E94                     	;# 
  1155  0E95                     	;# 
  1156  0E9C                     	;# 
  1157  0E9D                     	;# 
  1158  0E9E                     	;# 
  1159  0E9F                     	;# 
  1160  0EA0                     	;# 
  1161  0EA1                     	;# 
  1162  0EA2                     	;# 
  1163  0EA3                     	;# 
  1164  0EA4                     	;# 
  1165  0EA5                     	;# 
  1166  0EA6                     	;# 
  1167  0EA7                     	;# 
  1168  0F0F                     	;# 
  1169  0F10                     	;# 
  1170  0F11                     	;# 
  1171  0F12                     	;# 
  1172  0F13                     	;# 
  1173  0F14                     	;# 
  1174  0F15                     	;# 
  1175  0F16                     	;# 
  1176  0F17                     	;# 
  1177  0F18                     	;# 
  1178  0F19                     	;# 
  1179  0F1A                     	;# 
  1180  0F1B                     	;# 
  1181  0F1C                     	;# 
  1182  0F1D                     	;# 
  1183  0F1E                     	;# 
  1184  0F1F                     	;# 
  1185  0F20                     	;# 
  1186  0F21                     	;# 
  1187  0F22                     	;# 
  1188  0F23                     	;# 
  1189  0F24                     	;# 
  1190  0F25                     	;# 
  1191  0F26                     	;# 
  1192  0F27                     	;# 
  1193  0F28                     	;# 
  1194  0F29                     	;# 
  1195  0F2A                     	;# 
  1196  0F2B                     	;# 
  1197  0F2C                     	;# 
  1198  0F2D                     	;# 
  1199  0F2E                     	;# 
  1200  0F2F                     	;# 
  1201  0F30                     	;# 
  1202  0F31                     	;# 
  1203  0F32                     	;# 
  1204  0F33                     	;# 
  1205  0F34                     	;# 
  1206  0F35                     	;# 
  1207  0F36                     	;# 
  1208  0F37                     	;# 
  1209  0FE4                     	;# 
  1210  0FE5                     	;# 
  1211  0FE6                     	;# 
  1212  0FE7                     	;# 
  1213  0FE8                     	;# 
  1214  0FE9                     	;# 
  1215  0FEA                     	;# 
  1216  0FEB                     	;# 
  1217  0FED                     	;# 
  1218  0FEE                     	;# 
  1219  0FEF                     	;# 
  1220  0000                     	;# 
  1221  0001                     	;# 
  1222  0002                     	;# 
  1223  0003                     	;# 
  1224  0004                     	;# 
  1225  0005                     	;# 
  1226  0006                     	;# 
  1227  0007                     	;# 
  1228  0008                     	;# 
  1229  0009                     	;# 
  1230  000A                     	;# 
  1231  000B                     	;# 
  1232  000C                     	;# 
  1233  000D                     	;# 
  1234  000E                     	;# 
  1235  0010                     	;# 
  1236  0011                     	;# 
  1237  0012                     	;# 
  1238  0013                     	;# 
  1239  0014                     	;# 
  1240  0015                     	;# 
  1241  0015                     	;# 
  1242  0016                     	;# 
  1243  0016                     	;# 
  1244  0017                     	;# 
  1245  0018                     	;# 
  1246  0019                     	;# 
  1247  0019                     	;# 
  1248  001A                     	;# 
  1249  001B                     	;# 
  1250  001C                     	;# 
  1251  001D                     	;# 
  1252  001E                     	;# 
  1253  001F                     	;# 
  1254  008C                     	;# 
  1255  008D                     	;# 
  1256  008E                     	;# 
  1257  0090                     	;# 
  1258  0091                     	;# 
  1259  0092                     	;# 
  1260  0093                     	;# 
  1261  0094                     	;# 
  1262  0097                     	;# 
  1263  009B                     	;# 
  1264  009B                     	;# 
  1265  009C                     	;# 
  1266  009D                     	;# 
  1267  009E                     	;# 
  1268  009F                     	;# 
  1269  010C                     	;# 
  1270  010D                     	;# 
  1271  010E                     	;# 
  1272  0111                     	;# 
  1273  0112                     	;# 
  1274  0113                     	;# 
  1275  0114                     	;# 
  1276  0115                     	;# 
  1277  0116                     	;# 
  1278  0117                     	;# 
  1279  0118                     	;# 
  1280  0119                     	;# 
  1281  018C                     	;# 
  1282  018D                     	;# 
  1283  018E                     	;# 
  1284  0197                     	;# 
  1285  0199                     	;# 
  1286  0199                     	;# 
  1287  0199                     	;# 
  1288  019A                     	;# 
  1289  019A                     	;# 
  1290  019A                     	;# 
  1291  019B                     	;# 
  1292  019B                     	;# 
  1293  019B                     	;# 
  1294  019B                     	;# 
  1295  019B                     	;# 
  1296  019C                     	;# 
  1297  019C                     	;# 
  1298  019C                     	;# 
  1299  019D                     	;# 
  1300  019D                     	;# 
  1301  019D                     	;# 
  1302  019E                     	;# 
  1303  019E                     	;# 
  1304  019E                     	;# 
  1305  019F                     	;# 
  1306  019F                     	;# 
  1307  019F                     	;# 
  1308  019F                     	;# 
  1309  019F                     	;# 
  1310  020C                     	;# 
  1311  020D                     	;# 
  1312  020E                     	;# 
  1313  0211                     	;# 
  1314  0211                     	;# 
  1315  0212                     	;# 
  1316  0212                     	;# 
  1317  0213                     	;# 
  1318  0213                     	;# 
  1319  0214                     	;# 
  1320  0214                     	;# 
  1321  0215                     	;# 
  1322  0215                     	;# 
  1323  0215                     	;# 
  1324  0215                     	;# 
  1325  0216                     	;# 
  1326  0216                     	;# 
  1327  0217                     	;# 
  1328  0217                     	;# 
  1329  0219                     	;# 
  1330  021A                     	;# 
  1331  021B                     	;# 
  1332  021C                     	;# 
  1333  021D                     	;# 
  1334  021D                     	;# 
  1335  021E                     	;# 
  1336  021F                     	;# 
  1337  028C                     	;# 
  1338  028D                     	;# 
  1339  028E                     	;# 
  1340  0291                     	;# 
  1341  0291                     	;# 
  1342  0292                     	;# 
  1343  0293                     	;# 
  1344  0294                     	;# 
  1345  0295                     	;# 
  1346  0295                     	;# 
  1347  0296                     	;# 
  1348  0297                     	;# 
  1349  0298                     	;# 
  1350  029F                     	;# 
  1351  030C                     	;# 
  1352  030D                     	;# 
  1353  030E                     	;# 
  1354  0311                     	;# 
  1355  0311                     	;# 
  1356  0312                     	;# 
  1357  0313                     	;# 
  1358  0314                     	;# 
  1359  0315                     	;# 
  1360  0315                     	;# 
  1361  0316                     	;# 
  1362  0317                     	;# 
  1363  0318                     	;# 
  1364  038C                     	;# 
  1365  038D                     	;# 
  1366  038E                     	;# 
  1367  0391                     	;# 
  1368  0392                     	;# 
  1369  0393                     	;# 
  1370  0394                     	;# 
  1371  0395                     	;# 
  1372  0396                     	;# 
  1373  0397                     	;# 
  1374  0398                     	;# 
  1375  0399                     	;# 
  1376  039A                     	;# 
  1377  039C                     	;# 
  1378  039D                     	;# 
  1379  039E                     	;# 
  1380  039F                     	;# 
  1381  0411                     	;# 
  1382  0411                     	;# 
  1383  0412                     	;# 
  1384  0413                     	;# 
  1385  0414                     	;# 
  1386  0415                     	;# 
  1387  0416                     	;# 
  1388  0417                     	;# 
  1389  0418                     	;# 
  1390  0418                     	;# 
  1391  0419                     	;# 
  1392  041A                     	;# 
  1393  041B                     	;# 
  1394  041C                     	;# 
  1395  041D                     	;# 
  1396  041E                     	;# 
  1397  041F                     	;# 
  1398  0498                     	;# 
  1399  0498                     	;# 
  1400  0499                     	;# 
  1401  049A                     	;# 
  1402  049B                     	;# 
  1403  049B                     	;# 
  1404  049C                     	;# 
  1405  049D                     	;# 
  1406  049E                     	;# 
  1407  049F                     	;# 
  1408  0617                     	;# 
  1409  0618                     	;# 
  1410  0619                     	;# 
  1411  0619                     	;# 
  1412  061A                     	;# 
  1413  061B                     	;# 
  1414  061C                     	;# 
  1415  061C                     	;# 
  1416  061F                     	;# 
  1417  0691                     	;# 
  1418  0692                     	;# 
  1419  0693                     	;# 
  1420  0694                     	;# 
  1421  0695                     	;# 
  1422  0696                     	;# 
  1423  0697                     	;# 
  1424  0698                     	;# 
  1425  0699                     	;# 
  1426  0711                     	;# 
  1427  0712                     	;# 
  1428  0713                     	;# 
  1429  0714                     	;# 
  1430  0715                     	;# 
  1431  0716                     	;# 
  1432  0717                     	;# 
  1433  0718                     	;# 
  1434  0719                     	;# 
  1435  0891                     	;# 
  1436  0891                     	;# 
  1437  0891                     	;# 
  1438  0891                     	;# 
  1439  0891                     	;# 
  1440  0891                     	;# 
  1441  0892                     	;# 
  1442  0892                     	;# 
  1443  0892                     	;# 
  1444  0893                     	;# 
  1445  0893                     	;# 
  1446  0893                     	;# 
  1447  0893                     	;# 
  1448  0893                     	;# 
  1449  0893                     	;# 
  1450  0894                     	;# 
  1451  0894                     	;# 
  1452  0894                     	;# 
  1453  0895                     	;# 
  1454  0895                     	;# 
  1455  0895                     	;# 
  1456  0896                     	;# 
  1457  0896                     	;# 
  1458  0896                     	;# 
  1459  089B                     	;# 
  1460  0911                     	;# 
  1461  0912                     	;# 
  1462  0913                     	;# 
  1463  0914                     	;# 
  1464  0915                     	;# 
  1465  0916                     	;# 
  1466  0918                     	;# 
  1467  0919                     	;# 
  1468  091A                     	;# 
  1469  091B                     	;# 
  1470  091C                     	;# 
  1471  091D                     	;# 
  1472  091E                     	;# 
  1473  091F                     	;# 
  1474  0E0F                     	;# 
  1475  0E10                     	;# 
  1476  0E11                     	;# 
  1477  0E12                     	;# 
  1478  0E13                     	;# 
  1479  0E14                     	;# 
  1480  0E15                     	;# 
  1481  0E16                     	;# 
  1482  0E17                     	;# 
  1483  0E18                     	;# 
  1484  0E19                     	;# 
  1485  0E1A                     	;# 
  1486  0E1B                     	;# 
  1487  0E1C                     	;# 
  1488  0E1D                     	;# 
  1489  0E1E                     	;# 
  1490  0E1F                     	;# 
  1491  0E20                     	;# 
  1492  0E21                     	;# 
  1493  0E22                     	;# 
  1494  0E24                     	;# 
  1495  0E25                     	;# 
  1496  0E28                     	;# 
  1497  0E29                     	;# 
  1498  0E2A                     	;# 
  1499  0E2B                     	;# 
  1500  0E2C                     	;# 
  1501  0E2D                     	;# 
  1502  0E2E                     	;# 
  1503  0E2F                     	;# 
  1504  0E90                     	;# 
  1505  0E91                     	;# 
  1506  0E92                     	;# 
  1507  0E94                     	;# 
  1508  0E95                     	;# 
  1509  0E9C                     	;# 
  1510  0E9D                     	;# 
  1511  0E9E                     	;# 
  1512  0E9F                     	;# 
  1513  0EA0                     	;# 
  1514  0EA1                     	;# 
  1515  0EA2                     	;# 
  1516  0EA3                     	;# 
  1517  0EA4                     	;# 
  1518  0EA5                     	;# 
  1519  0EA6                     	;# 
  1520  0EA7                     	;# 
  1521  0F0F                     	;# 
  1522  0F10                     	;# 
  1523  0F11                     	;# 
  1524  0F12                     	;# 
  1525  0F13                     	;# 
  1526  0F14                     	;# 
  1527  0F15                     	;# 
  1528  0F16                     	;# 
  1529  0F17                     	;# 
  1530  0F18                     	;# 
  1531  0F19                     	;# 
  1532  0F1A                     	;# 
  1533  0F1B                     	;# 
  1534  0F1C                     	;# 
  1535  0F1D                     	;# 
  1536  0F1E                     	;# 
  1537  0F1F                     	;# 
  1538  0F20                     	;# 
  1539  0F21                     	;# 
  1540  0F22                     	;# 
  1541  0F23                     	;# 
  1542  0F24                     	;# 
  1543  0F25                     	;# 
  1544  0F26                     	;# 
  1545  0F27                     	;# 
  1546  0F28                     	;# 
  1547  0F29                     	;# 
  1548  0F2A                     	;# 
  1549  0F2B                     	;# 
  1550  0F2C                     	;# 
  1551  0F2D                     	;# 
  1552  0F2E                     	;# 
  1553  0F2F                     	;# 
  1554  0F30                     	;# 
  1555  0F31                     	;# 
  1556  0F32                     	;# 
  1557  0F33                     	;# 
  1558  0F34                     	;# 
  1559  0F35                     	;# 
  1560  0F36                     	;# 
  1561  0F37                     	;# 
  1562  0FE4                     	;# 
  1563  0FE5                     	;# 
  1564  0FE6                     	;# 
  1565  0FE7                     	;# 
  1566  0FE8                     	;# 
  1567  0FE9                     	;# 
  1568  0FEA                     	;# 
  1569  0FEB                     	;# 
  1570  0FED                     	;# 
  1571  0FEE                     	;# 
  1572  0FEF                     	;# 
  1573  0000                     	;# 
  1574  0001                     	;# 
  1575  0002                     	;# 
  1576  0003                     	;# 
  1577  0004                     	;# 
  1578  0005                     	;# 
  1579  0006                     	;# 
  1580  0007                     	;# 
  1581  0008                     	;# 
  1582  0009                     	;# 
  1583  000A                     	;# 
  1584  000B                     	;# 
  1585  000C                     	;# 
  1586  000D                     	;# 
  1587  000E                     	;# 
  1588  0010                     	;# 
  1589  0011                     	;# 
  1590  0012                     	;# 
  1591  0013                     	;# 
  1592  0014                     	;# 
  1593  0015                     	;# 
  1594  0015                     	;# 
  1595  0016                     	;# 
  1596  0016                     	;# 
  1597  0017                     	;# 
  1598  0018                     	;# 
  1599  0019                     	;# 
  1600  0019                     	;# 
  1601  001A                     	;# 
  1602  001B                     	;# 
  1603  001C                     	;# 
  1604  001D                     	;# 
  1605  001E                     	;# 
  1606  001F                     	;# 
  1607  008C                     	;# 
  1608  008D                     	;# 
  1609  008E                     	;# 
  1610  0090                     	;# 
  1611  0091                     	;# 
  1612  0092                     	;# 
  1613  0093                     	;# 
  1614  0094                     	;# 
  1615  0097                     	;# 
  1616  009B                     	;# 
  1617  009B                     	;# 
  1618  009C                     	;# 
  1619  009D                     	;# 
  1620  009E                     	;# 
  1621  009F                     	;# 
  1622  010C                     	;# 
  1623  010D                     	;# 
  1624  010E                     	;# 
  1625  0111                     	;# 
  1626  0112                     	;# 
  1627  0113                     	;# 
  1628  0114                     	;# 
  1629  0115                     	;# 
  1630  0116                     	;# 
  1631  0117                     	;# 
  1632  0118                     	;# 
  1633  0119                     	;# 
  1634  018C                     	;# 
  1635  018D                     	;# 
  1636  018E                     	;# 
  1637  0197                     	;# 
  1638  0199                     	;# 
  1639  0199                     	;# 
  1640  0199                     	;# 
  1641  019A                     	;# 
  1642  019A                     	;# 
  1643  019A                     	;# 
  1644  019B                     	;# 
  1645  019B                     	;# 
  1646  019B                     	;# 
  1647  019B                     	;# 
  1648  019B                     	;# 
  1649  019C                     	;# 
  1650  019C                     	;# 
  1651  019C                     	;# 
  1652  019D                     	;# 
  1653  019D                     	;# 
  1654  019D                     	;# 
  1655  019E                     	;# 
  1656  019E                     	;# 
  1657  019E                     	;# 
  1658  019F                     	;# 
  1659  019F                     	;# 
  1660  019F                     	;# 
  1661  019F                     	;# 
  1662  019F                     	;# 
  1663  020C                     	;# 
  1664  020D                     	;# 
  1665  020E                     	;# 
  1666  0211                     	;# 
  1667  0211                     	;# 
  1668  0212                     	;# 
  1669  0212                     	;# 
  1670  0213                     	;# 
  1671  0213                     	;# 
  1672  0214                     	;# 
  1673  0214                     	;# 
  1674  0215                     	;# 
  1675  0215                     	;# 
  1676  0215                     	;# 
  1677  0215                     	;# 
  1678  0216                     	;# 
  1679  0216                     	;# 
  1680  0217                     	;# 
  1681  0217                     	;# 
  1682  0219                     	;# 
  1683  021A                     	;# 
  1684  021B                     	;# 
  1685  021C                     	;# 
  1686  021D                     	;# 
  1687  021D                     	;# 
  1688  021E                     	;# 
  1689  021F                     	;# 
  1690  028C                     	;# 
  1691  028D                     	;# 
  1692  028E                     	;# 
  1693  0291                     	;# 
  1694  0291                     	;# 
  1695  0292                     	;# 
  1696  0293                     	;# 
  1697  0294                     	;# 
  1698  0295                     	;# 
  1699  0295                     	;# 
  1700  0296                     	;# 
  1701  0297                     	;# 
  1702  0298                     	;# 
  1703  029F                     	;# 
  1704  030C                     	;# 
  1705  030D                     	;# 
  1706  030E                     	;# 
  1707  0311                     	;# 
  1708  0311                     	;# 
  1709  0312                     	;# 
  1710  0313                     	;# 
  1711  0314                     	;# 
  1712  0315                     	;# 
  1713  0315                     	;# 
  1714  0316                     	;# 
  1715  0317                     	;# 
  1716  0318                     	;# 
  1717  038C                     	;# 
  1718  038D                     	;# 
  1719  038E                     	;# 
  1720  0391                     	;# 
  1721  0392                     	;# 
  1722  0393                     	;# 
  1723  0394                     	;# 
  1724  0395                     	;# 
  1725  0396                     	;# 
  1726  0397                     	;# 
  1727  0398                     	;# 
  1728  0399                     	;# 
  1729  039A                     	;# 
  1730  039C                     	;# 
  1731  039D                     	;# 
  1732  039E                     	;# 
  1733  039F                     	;# 
  1734  0411                     	;# 
  1735  0411                     	;# 
  1736  0412                     	;# 
  1737  0413                     	;# 
  1738  0414                     	;# 
  1739  0415                     	;# 
  1740  0416                     	;# 
  1741  0417                     	;# 
  1742  0418                     	;# 
  1743  0418                     	;# 
  1744  0419                     	;# 
  1745  041A                     	;# 
  1746  041B                     	;# 
  1747  041C                     	;# 
  1748  041D                     	;# 
  1749  041E                     	;# 
  1750  041F                     	;# 
  1751  0498                     	;# 
  1752  0498                     	;# 
  1753  0499                     	;# 
  1754  049A                     	;# 
  1755  049B                     	;# 
  1756  049B                     	;# 
  1757  049C                     	;# 
  1758  049D                     	;# 
  1759  049E                     	;# 
  1760  049F                     	;# 
  1761  0617                     	;# 
  1762  0618                     	;# 
  1763  0619                     	;# 
  1764  0619                     	;# 
  1765  061A                     	;# 
  1766  061B                     	;# 
  1767  061C                     	;# 
  1768  061C                     	;# 
  1769  061F                     	;# 
  1770  0691                     	;# 
  1771  0692                     	;# 
  1772  0693                     	;# 
  1773  0694                     	;# 
  1774  0695                     	;# 
  1775  0696                     	;# 
  1776  0697                     	;# 
  1777  0698                     	;# 
  1778  0699                     	;# 
  1779  0711                     	;# 
  1780  0712                     	;# 
  1781  0713                     	;# 
  1782  0714                     	;# 
  1783  0715                     	;# 
  1784  0716                     	;# 
  1785  0717                     	;# 
  1786  0718                     	;# 
  1787  0719                     	;# 
  1788  0891                     	;# 
  1789  0891                     	;# 
  1790  0891                     	;# 
  1791  0891                     	;# 
  1792  0891                     	;# 
  1793  0891                     	;# 
  1794  0892                     	;# 
  1795  0892                     	;# 
  1796  0892                     	;# 
  1797  0893                     	;# 
  1798  0893                     	;# 
  1799  0893                     	;# 
  1800  0893                     	;# 
  1801  0893                     	;# 
  1802  0893                     	;# 
  1803  0894                     	;# 
  1804  0894                     	;# 
  1805  0894                     	;# 
  1806  0895                     	;# 
  1807  0895                     	;# 
  1808  0895                     	;# 
  1809  0896                     	;# 
  1810  0896                     	;# 
  1811  0896                     	;# 
  1812  089B                     	;# 
  1813  0911                     	;# 
  1814  0912                     	;# 
  1815  0913                     	;# 
  1816  0914                     	;# 
  1817  0915                     	;# 
  1818  0916                     	;# 
  1819  0918                     	;# 
  1820  0919                     	;# 
  1821  091A                     	;# 
  1822  091B                     	;# 
  1823  091C                     	;# 
  1824  091D                     	;# 
  1825  091E                     	;# 
  1826  091F                     	;# 
  1827  0E0F                     	;# 
  1828  0E10                     	;# 
  1829  0E11                     	;# 
  1830  0E12                     	;# 
  1831  0E13                     	;# 
  1832  0E14                     	;# 
  1833  0E15                     	;# 
  1834  0E16                     	;# 
  1835  0E17                     	;# 
  1836  0E18                     	;# 
  1837  0E19                     	;# 
  1838  0E1A                     	;# 
  1839  0E1B                     	;# 
  1840  0E1C                     	;# 
  1841  0E1D                     	;# 
  1842  0E1E                     	;# 
  1843  0E1F                     	;# 
  1844  0E20                     	;# 
  1845  0E21                     	;# 
  1846  0E22                     	;# 
  1847  0E24                     	;# 
  1848  0E25                     	;# 
  1849  0E28                     	;# 
  1850  0E29                     	;# 
  1851  0E2A                     	;# 
  1852  0E2B                     	;# 
  1853  0E2C                     	;# 
  1854  0E2D                     	;# 
  1855  0E2E                     	;# 
  1856  0E2F                     	;# 
  1857  0E90                     	;# 
  1858  0E91                     	;# 
  1859  0E92                     	;# 
  1860  0E94                     	;# 
  1861  0E95                     	;# 
  1862  0E9C                     	;# 
  1863  0E9D                     	;# 
  1864  0E9E                     	;# 
  1865  0E9F                     	;# 
  1866  0EA0                     	;# 
  1867  0EA1                     	;# 
  1868  0EA2                     	;# 
  1869  0EA3                     	;# 
  1870  0EA4                     	;# 
  1871  0EA5                     	;# 
  1872  0EA6                     	;# 
  1873  0EA7                     	;# 
  1874  0F0F                     	;# 
  1875  0F10                     	;# 
  1876  0F11                     	;# 
  1877  0F12                     	;# 
  1878  0F13                     	;# 
  1879  0F14                     	;# 
  1880  0F15                     	;# 
  1881  0F16                     	;# 
  1882  0F17                     	;# 
  1883  0F18                     	;# 
  1884  0F19                     	;# 
  1885  0F1A                     	;# 
  1886  0F1B                     	;# 
  1887  0F1C                     	;# 
  1888  0F1D                     	;# 
  1889  0F1E                     	;# 
  1890  0F1F                     	;# 
  1891  0F20                     	;# 
  1892  0F21                     	;# 
  1893  0F22                     	;# 
  1894  0F23                     	;# 
  1895  0F24                     	;# 
  1896  0F25                     	;# 
  1897  0F26                     	;# 
  1898  0F27                     	;# 
  1899  0F28                     	;# 
  1900  0F29                     	;# 
  1901  0F2A                     	;# 
  1902  0F2B                     	;# 
  1903  0F2C                     	;# 
  1904  0F2D                     	;# 
  1905  0F2E                     	;# 
  1906  0F2F                     	;# 
  1907  0F30                     	;# 
  1908  0F31                     	;# 
  1909  0F32                     	;# 
  1910  0F33                     	;# 
  1911  0F34                     	;# 
  1912  0F35                     	;# 
  1913  0F36                     	;# 
  1914  0F37                     	;# 
  1915  0FE4                     	;# 
  1916  0FE5                     	;# 
  1917  0FE6                     	;# 
  1918  0FE7                     	;# 
  1919  0FE8                     	;# 
  1920  0FE9                     	;# 
  1921  0FEA                     	;# 
  1922  0FEB                     	;# 
  1923  0FED                     	;# 
  1924  0FEE                     	;# 
  1925  0FEF                     	;# 
  1926  0000                     	;# 
  1927  0001                     	;# 
  1928  0002                     	;# 
  1929  0003                     	;# 
  1930  0004                     	;# 
  1931  0005                     	;# 
  1932  0006                     	;# 
  1933  0007                     	;# 
  1934  0008                     	;# 
  1935  0009                     	;# 
  1936  000A                     	;# 
  1937  000B                     	;# 
  1938  000C                     	;# 
  1939  000D                     	;# 
  1940  000E                     	;# 
  1941  0010                     	;# 
  1942  0011                     	;# 
  1943  0012                     	;# 
  1944  0013                     	;# 
  1945  0014                     	;# 
  1946  0015                     	;# 
  1947  0015                     	;# 
  1948  0016                     	;# 
  1949  0016                     	;# 
  1950  0017                     	;# 
  1951  0018                     	;# 
  1952  0019                     	;# 
  1953  0019                     	;# 
  1954  001A                     	;# 
  1955  001B                     	;# 
  1956  001C                     	;# 
  1957  001D                     	;# 
  1958  001E                     	;# 
  1959  001F                     	;# 
  1960  008C                     	;# 
  1961  008D                     	;# 
  1962  008E                     	;# 
  1963  0090                     	;# 
  1964  0091                     	;# 
  1965  0092                     	;# 
  1966  0093                     	;# 
  1967  0094                     	;# 
  1968  0097                     	;# 
  1969  009B                     	;# 
  1970  009B                     	;# 
  1971  009C                     	;# 
  1972  009D                     	;# 
  1973  009E                     	;# 
  1974  009F                     	;# 
  1975  010C                     	;# 
  1976  010D                     	;# 
  1977  010E                     	;# 
  1978  0111                     	;# 
  1979  0112                     	;# 
  1980  0113                     	;# 
  1981  0114                     	;# 
  1982  0115                     	;# 
  1983  0116                     	;# 
  1984  0117                     	;# 
  1985  0118                     	;# 
  1986  0119                     	;# 
  1987  018C                     	;# 
  1988  018D                     	;# 
  1989  018E                     	;# 
  1990  0197                     	;# 
  1991  0199                     	;# 
  1992  0199                     	;# 
  1993  0199                     	;# 
  1994  019A                     	;# 
  1995  019A                     	;# 
  1996  019A                     	;# 
  1997  019B                     	;# 
  1998  019B                     	;# 
  1999  019B                     	;# 
  2000  019B                     	;# 
  2001  019B                     	;# 
  2002  019C                     	;# 
  2003  019C                     	;# 
  2004  019C                     	;# 
  2005  019D                     	;# 
  2006  019D                     	;# 
  2007  019D                     	;# 
  2008  019E                     	;# 
  2009  019E                     	;# 
  2010  019E                     	;# 
  2011  019F                     	;# 
  2012  019F                     	;# 
  2013  019F                     	;# 
  2014  019F                     	;# 
  2015  019F                     	;# 
  2016  020C                     	;# 
  2017  020D                     	;# 
  2018  020E                     	;# 
  2019  0211                     	;# 
  2020  0211                     	;# 
  2021  0212                     	;# 
  2022  0212                     	;# 
  2023  0213                     	;# 
  2024  0213                     	;# 
  2025  0214                     	;# 
  2026  0214                     	;# 
  2027  0215                     	;# 
  2028  0215                     	;# 
  2029  0215                     	;# 
  2030  0215                     	;# 
  2031  0216                     	;# 
  2032  0216                     	;# 
  2033  0217                     	;# 
  2034  0217                     	;# 
  2035  0219                     	;# 
  2036  021A                     	;# 
  2037  021B                     	;# 
  2038  021C                     	;# 
  2039  021D                     	;# 
  2040  021D                     	;# 
  2041  021E                     	;# 
  2042  021F                     	;# 
  2043  028C                     	;# 
  2044  028D                     	;# 
  2045  028E                     	;# 
  2046  0291                     	;# 
  2047  0291                     	;# 
  2048  0292                     	;# 
  2049  0293                     	;# 
  2050  0294                     	;# 
  2051  0295                     	;# 
  2052  0295                     	;# 
  2053  0296                     	;# 
  2054  0297                     	;# 
  2055  0298                     	;# 
  2056  029F                     	;# 
  2057  030C                     	;# 
  2058  030D                     	;# 
  2059  030E                     	;# 
  2060  0311                     	;# 
  2061  0311                     	;# 
  2062  0312                     	;# 
  2063  0313                     	;# 
  2064  0314                     	;# 
  2065  0315                     	;# 
  2066  0315                     	;# 
  2067  0316                     	;# 
  2068  0317                     	;# 
  2069  0318                     	;# 
  2070  038C                     	;# 
  2071  038D                     	;# 
  2072  038E                     	;# 
  2073  0391                     	;# 
  2074  0392                     	;# 
  2075  0393                     	;# 
  2076  0394                     	;# 
  2077  0395                     	;# 
  2078  0396                     	;# 
  2079  0397                     	;# 
  2080  0398                     	;# 
  2081  0399                     	;# 
  2082  039A                     	;# 
  2083  039C                     	;# 
  2084  039D                     	;# 
  2085  039E                     	;# 
  2086  039F                     	;# 
  2087  0411                     	;# 
  2088  0411                     	;# 
  2089  0412                     	;# 
  2090  0413                     	;# 
  2091  0414                     	;# 
  2092  0415                     	;# 
  2093  0416                     	;# 
  2094  0417                     	;# 
  2095  0418                     	;# 
  2096  0418                     	;# 
  2097  0419                     	;# 
  2098  041A                     	;# 
  2099  041B                     	;# 
  2100  041C                     	;# 
  2101  041D                     	;# 
  2102  041E                     	;# 
  2103  041F                     	;# 
  2104  0498                     	;# 
  2105  0498                     	;# 
  2106  0499                     	;# 
  2107  049A                     	;# 
  2108  049B                     	;# 
  2109  049B                     	;# 
  2110  049C                     	;# 
  2111  049D                     	;# 
  2112  049E                     	;# 
  2113  049F                     	;# 
  2114  0617                     	;# 
  2115  0618                     	;# 
  2116  0619                     	;# 
  2117  0619                     	;# 
  2118  061A                     	;# 
  2119  061B                     	;# 
  2120  061C                     	;# 
  2121  061C                     	;# 
  2122  061F                     	;# 
  2123  0691                     	;# 
  2124  0692                     	;# 
  2125  0693                     	;# 
  2126  0694                     	;# 
  2127  0695                     	;# 
  2128  0696                     	;# 
  2129  0697                     	;# 
  2130  0698                     	;# 
  2131  0699                     	;# 
  2132  0711                     	;# 
  2133  0712                     	;# 
  2134  0713                     	;# 
  2135  0714                     	;# 
  2136  0715                     	;# 
  2137  0716                     	;# 
  2138  0717                     	;# 
  2139  0718                     	;# 
  2140  0719                     	;# 
  2141  0891                     	;# 
  2142  0891                     	;# 
  2143  0891                     	;# 
  2144  0891                     	;# 
  2145  0891                     	;# 
  2146  0891                     	;# 
  2147  0892                     	;# 
  2148  0892                     	;# 
  2149  0892                     	;# 
  2150  0893                     	;# 
  2151  0893                     	;# 
  2152  0893                     	;# 
  2153  0893                     	;# 
  2154  0893                     	;# 
  2155  0893                     	;# 
  2156  0894                     	;# 
  2157  0894                     	;# 
  2158  0894                     	;# 
  2159  0895                     	;# 
  2160  0895                     	;# 
  2161  0895                     	;# 
  2162  0896                     	;# 
  2163  0896                     	;# 
  2164  0896                     	;# 
  2165  089B                     	;# 
  2166  0911                     	;# 
  2167  0912                     	;# 
  2168  0913                     	;# 
  2169  0914                     	;# 
  2170  0915                     	;# 
  2171  0916                     	;# 
  2172  0918                     	;# 
  2173  0919                     	;# 
  2174  091A                     	;# 
  2175  091B                     	;# 
  2176  091C                     	;# 
  2177  091D                     	;# 
  2178  091E                     	;# 
  2179  091F                     	;# 
  2180  0E0F                     	;# 
  2181  0E10                     	;# 
  2182  0E11                     	;# 
  2183  0E12                     	;# 
  2184  0E13                     	;# 
  2185  0E14                     	;# 
  2186  0E15                     	;# 
  2187  0E16                     	;# 
  2188  0E17                     	;# 
  2189  0E18                     	;# 
  2190  0E19                     	;# 
  2191  0E1A                     	;# 
  2192  0E1B                     	;# 
  2193  0E1C                     	;# 
  2194  0E1D                     	;# 
  2195  0E1E                     	;# 
  2196  0E1F                     	;# 
  2197  0E20                     	;# 
  2198  0E21                     	;# 
  2199  0E22                     	;# 
  2200  0E24                     	;# 
  2201  0E25                     	;# 
  2202  0E28                     	;# 
  2203  0E29                     	;# 
  2204  0E2A                     	;# 
  2205  0E2B                     	;# 
  2206  0E2C                     	;# 
  2207  0E2D                     	;# 
  2208  0E2E                     	;# 
  2209  0E2F                     	;# 
  2210  0E90                     	;# 
  2211  0E91                     	;# 
  2212  0E92                     	;# 
  2213  0E94                     	;# 
  2214  0E95                     	;# 
  2215  0E9C                     	;# 
  2216  0E9D                     	;# 
  2217  0E9E                     	;# 
  2218  0E9F                     	;# 
  2219  0EA0                     	;# 
  2220  0EA1                     	;# 
  2221  0EA2                     	;# 
  2222  0EA3                     	;# 
  2223  0EA4                     	;# 
  2224  0EA5                     	;# 
  2225  0EA6                     	;# 
  2226  0EA7                     	;# 
  2227  0F0F                     	;# 
  2228  0F10                     	;# 
  2229  0F11                     	;# 
  2230  0F12                     	;# 
  2231  0F13                     	;# 
  2232  0F14                     	;# 
  2233  0F15                     	;# 
  2234  0F16                     	;# 
  2235  0F17                     	;# 
  2236  0F18                     	;# 
  2237  0F19                     	;# 
  2238  0F1A                     	;# 
  2239  0F1B                     	;# 
  2240  0F1C                     	;# 
  2241  0F1D                     	;# 
  2242  0F1E                     	;# 
  2243  0F1F                     	;# 
  2244  0F20                     	;# 
  2245  0F21                     	;# 
  2246  0F22                     	;# 
  2247  0F23                     	;# 
  2248  0F24                     	;# 
  2249  0F25                     	;# 
  2250  0F26                     	;# 
  2251  0F27                     	;# 
  2252  0F28                     	;# 
  2253  0F29                     	;# 
  2254  0F2A                     	;# 
  2255  0F2B                     	;# 
  2256  0F2C                     	;# 
  2257  0F2D                     	;# 
  2258  0F2E                     	;# 
  2259  0F2F                     	;# 
  2260  0F30                     	;# 
  2261  0F31                     	;# 
  2262  0F32                     	;# 
  2263  0F33                     	;# 
  2264  0F34                     	;# 
  2265  0F35                     	;# 
  2266  0F36                     	;# 
  2267  0F37                     	;# 
  2268  0FE4                     	;# 
  2269  0FE5                     	;# 
  2270  0FE6                     	;# 
  2271  0FE7                     	;# 
  2272  0FE8                     	;# 
  2273  0FE9                     	;# 
  2274  0FEA                     	;# 
  2275  0FEB                     	;# 
  2276  0FED                     	;# 
  2277  0FEE                     	;# 
  2278  0FEF                     	;# 
  2279  0000                     	;# 
  2280  0001                     	;# 
  2281  0002                     	;# 
  2282  0003                     	;# 
  2283  0004                     	;# 
  2284  0005                     	;# 
  2285  0006                     	;# 
  2286  0007                     	;# 
  2287  0008                     	;# 
  2288  0009                     	;# 
  2289  000A                     	;# 
  2290  000B                     	;# 
  2291  000C                     	;# 
  2292  000D                     	;# 
  2293  000E                     	;# 
  2294  0010                     	;# 
  2295  0011                     	;# 
  2296  0012                     	;# 
  2297  0013                     	;# 
  2298  0014                     	;# 
  2299  0015                     	;# 
  2300  0015                     	;# 
  2301  0016                     	;# 
  2302  0016                     	;# 
  2303  0017                     	;# 
  2304  0018                     	;# 
  2305  0019                     	;# 
  2306  0019                     	;# 
  2307  001A                     	;# 
  2308  001B                     	;# 
  2309  001C                     	;# 
  2310  001D                     	;# 
  2311  001E                     	;# 
  2312  001F                     	;# 
  2313  008C                     	;# 
  2314  008D                     	;# 
  2315  008E                     	;# 
  2316  0090                     	;# 
  2317  0091                     	;# 
  2318  0092                     	;# 
  2319  0093                     	;# 
  2320  0094                     	;# 
  2321  0097                     	;# 
  2322  009B                     	;# 
  2323  009B                     	;# 
  2324  009C                     	;# 
  2325  009D                     	;# 
  2326  009E                     	;# 
  2327  009F                     	;# 
  2328  010C                     	;# 
  2329  010D                     	;# 
  2330  010E                     	;# 
  2331  0111                     	;# 
  2332  0112                     	;# 
  2333  0113                     	;# 
  2334  0114                     	;# 
  2335  0115                     	;# 
  2336  0116                     	;# 
  2337  0117                     	;# 
  2338  0118                     	;# 
  2339  0119                     	;# 
  2340  018C                     	;# 
  2341  018D                     	;# 
  2342  018E                     	;# 
  2343  0197                     	;# 
  2344  0199                     	;# 
  2345  0199                     	;# 
  2346  0199                     	;# 
  2347  019A                     	;# 
  2348  019A                     	;# 
  2349  019A                     	;# 
  2350  019B                     	;# 
  2351  019B                     	;# 
  2352  019B                     	;# 
  2353  019B                     	;# 
  2354  019B                     	;# 
  2355  019C                     	;# 
  2356  019C                     	;# 
  2357  019C                     	;# 
  2358  019D                     	;# 
  2359  019D                     	;# 
  2360  019D                     	;# 
  2361  019E                     	;# 
  2362  019E                     	;# 
  2363  019E                     	;# 
  2364  019F                     	;# 
  2365  019F                     	;# 
  2366  019F                     	;# 
  2367  019F                     	;# 
  2368  019F                     	;# 
  2369  020C                     	;# 
  2370  020D                     	;# 
  2371  020E                     	;# 
  2372  0211                     	;# 
  2373  0211                     	;# 
  2374  0212                     	;# 
  2375  0212                     	;# 
  2376  0213                     	;# 
  2377  0213                     	;# 
  2378  0214                     	;# 
  2379  0214                     	;# 
  2380  0215                     	;# 
  2381  0215                     	;# 
  2382  0215                     	;# 
  2383  0215                     	;# 
  2384  0216                     	;# 
  2385  0216                     	;# 
  2386  0217                     	;# 
  2387  0217                     	;# 
  2388  0219                     	;# 
  2389  021A                     	;# 
  2390  021B                     	;# 
  2391  021C                     	;# 
  2392  021D                     	;# 
  2393  021D                     	;# 
  2394  021E                     	;# 
  2395  021F                     	;# 
  2396  028C                     	;# 
  2397  028D                     	;# 
  2398  028E                     	;# 
  2399  0291                     	;# 
  2400  0291                     	;# 
  2401  0292                     	;# 
  2402  0293                     	;# 
  2403  0294                     	;# 
  2404  0295                     	;# 
  2405  0295                     	;# 
  2406  0296                     	;# 
  2407  0297                     	;# 
  2408  0298                     	;# 
  2409  029F                     	;# 
  2410  030C                     	;# 
  2411  030D                     	;# 
  2412  030E                     	;# 
  2413  0311                     	;# 
  2414  0311                     	;# 
  2415  0312                     	;# 
  2416  0313                     	;# 
  2417  0314                     	;# 
  2418  0315                     	;# 
  2419  0315                     	;# 
  2420  0316                     	;# 
  2421  0317                     	;# 
  2422  0318                     	;# 
  2423  038C                     	;# 
  2424  038D                     	;# 
  2425  038E                     	;# 
  2426  0391                     	;# 
  2427  0392                     	;# 
  2428  0393                     	;# 
  2429  0394                     	;# 
  2430  0395                     	;# 
  2431  0396                     	;# 
  2432  0397                     	;# 
  2433  0398                     	;# 
  2434  0399                     	;# 
  2435  039A                     	;# 
  2436  039C                     	;# 
  2437  039D                     	;# 
  2438  039E                     	;# 
  2439  039F                     	;# 
  2440  0411                     	;# 
  2441  0411                     	;# 
  2442  0412                     	;# 
  2443  0413                     	;# 
  2444  0414                     	;# 
  2445  0415                     	;# 
  2446  0416                     	;# 
  2447  0417                     	;# 
  2448  0418                     	;# 
  2449  0418                     	;# 
  2450  0419                     	;# 
  2451  041A                     	;# 
  2452  041B                     	;# 
  2453  041C                     	;# 
  2454  041D                     	;# 
  2455  041E                     	;# 
  2456  041F                     	;# 
  2457  0498                     	;# 
  2458  0498                     	;# 
  2459  0499                     	;# 
  2460  049A                     	;# 
  2461  049B                     	;# 
  2462  049B                     	;# 
  2463  049C                     	;# 
  2464  049D                     	;# 
  2465  049E                     	;# 
  2466  049F                     	;# 
  2467  0617                     	;# 
  2468  0618                     	;# 
  2469  0619                     	;# 
  2470  0619                     	;# 
  2471  061A                     	;# 
  2472  061B                     	;# 
  2473  061C                     	;# 
  2474  061C                     	;# 
  2475  061F                     	;# 
  2476  0691                     	;# 
  2477  0692                     	;# 
  2478  0693                     	;# 
  2479  0694                     	;# 
  2480  0695                     	;# 
  2481  0696                     	;# 
  2482  0697                     	;# 
  2483  0698                     	;# 
  2484  0699                     	;# 
  2485  0711                     	;# 
  2486  0712                     	;# 
  2487  0713                     	;# 
  2488  0714                     	;# 
  2489  0715                     	;# 
  2490  0716                     	;# 
  2491  0717                     	;# 
  2492  0718                     	;# 
  2493  0719                     	;# 
  2494  0891                     	;# 
  2495  0891                     	;# 
  2496  0891                     	;# 
  2497  0891                     	;# 
  2498  0891                     	;# 
  2499  0891                     	;# 
  2500  0892                     	;# 
  2501  0892                     	;# 
  2502  0892                     	;# 
  2503  0893                     	;# 
  2504  0893                     	;# 
  2505  0893                     	;# 
  2506  0893                     	;# 
  2507  0893                     	;# 
  2508  0893                     	;# 
  2509  0894                     	;# 
  2510  0894                     	;# 
  2511  0894                     	;# 
  2512  0895                     	;# 
  2513  0895                     	;# 
  2514  0895                     	;# 
  2515  0896                     	;# 
  2516  0896                     	;# 
  2517  0896                     	;# 
  2518  089B                     	;# 
  2519  0911                     	;# 
  2520  0912                     	;# 
  2521  0913                     	;# 
  2522  0914                     	;# 
  2523  0915                     	;# 
  2524  0916                     	;# 
  2525  0918                     	;# 
  2526  0919                     	;# 
  2527  091A                     	;# 
  2528  091B                     	;# 
  2529  091C                     	;# 
  2530  091D                     	;# 
  2531  091E                     	;# 
  2532  091F                     	;# 
  2533  0E0F                     	;# 
  2534  0E10                     	;# 
  2535  0E11                     	;# 
  2536  0E12                     	;# 
  2537  0E13                     	;# 
  2538  0E14                     	;# 
  2539  0E15                     	;# 
  2540  0E16                     	;# 
  2541  0E17                     	;# 
  2542  0E18                     	;# 
  2543  0E19                     	;# 
  2544  0E1A                     	;# 
  2545  0E1B                     	;# 
  2546  0E1C                     	;# 
  2547  0E1D                     	;# 
  2548  0E1E                     	;# 
  2549  0E1F                     	;# 
  2550  0E20                     	;# 
  2551  0E21                     	;# 
  2552  0E22                     	;# 
  2553  0E24                     	;# 
  2554  0E25                     	;# 
  2555  0E28                     	;# 
  2556  0E29                     	;# 
  2557  0E2A                     	;# 
  2558  0E2B                     	;# 
  2559  0E2C                     	;# 
  2560  0E2D                     	;# 
  2561  0E2E                     	;# 
  2562  0E2F                     	;# 
  2563  0E90                     	;# 
  2564  0E91                     	;# 
  2565  0E92                     	;# 
  2566  0E94                     	;# 
  2567  0E95                     	;# 
  2568  0E9C                     	;# 
  2569  0E9D                     	;# 
  2570  0E9E                     	;# 
  2571  0E9F                     	;# 
  2572  0EA0                     	;# 
  2573  0EA1                     	;# 
  2574  0EA2                     	;# 
  2575  0EA3                     	;# 
  2576  0EA4                     	;# 
  2577  0EA5                     	;# 
  2578  0EA6                     	;# 
  2579  0EA7                     	;# 
  2580  0F0F                     	;# 
  2581  0F10                     	;# 
  2582  0F11                     	;# 
  2583  0F12                     	;# 
  2584  0F13                     	;# 
  2585  0F14                     	;# 
  2586  0F15                     	;# 
  2587  0F16                     	;# 
  2588  0F17                     	;# 
  2589  0F18                     	;# 
  2590  0F19                     	;# 
  2591  0F1A                     	;# 
  2592  0F1B                     	;# 
  2593  0F1C                     	;# 
  2594  0F1D                     	;# 
  2595  0F1E                     	;# 
  2596  0F1F                     	;# 
  2597  0F20                     	;# 
  2598  0F21                     	;# 
  2599  0F22                     	;# 
  2600  0F23                     	;# 
  2601  0F24                     	;# 
  2602  0F25                     	;# 
  2603  0F26                     	;# 
  2604  0F27                     	;# 
  2605  0F28                     	;# 
  2606  0F29                     	;# 
  2607  0F2A                     	;# 
  2608  0F2B                     	;# 
  2609  0F2C                     	;# 
  2610  0F2D                     	;# 
  2611  0F2E                     	;# 
  2612  0F2F                     	;# 
  2613  0F30                     	;# 
  2614  0F31                     	;# 
  2615  0F32                     	;# 
  2616  0F33                     	;# 
  2617  0F34                     	;# 
  2618  0F35                     	;# 
  2619  0F36                     	;# 
  2620  0F37                     	;# 
  2621  0FE4                     	;# 
  2622  0FE5                     	;# 
  2623  0FE6                     	;# 
  2624  0FE7                     	;# 
  2625  0FE8                     	;# 
  2626  0FE9                     	;# 
  2627  0FEA                     	;# 
  2628  0FEB                     	;# 
  2629  0FED                     	;# 
  2630  0FEE                     	;# 
  2631  0FEF                     	;# 
  2632  0000                     	;# 
  2633  0001                     	;# 
  2634  0002                     	;# 
  2635  0003                     	;# 
  2636  0004                     	;# 
  2637  0005                     	;# 
  2638  0006                     	;# 
  2639  0007                     	;# 
  2640  0008                     	;# 
  2641  0009                     	;# 
  2642  000A                     	;# 
  2643  000B                     	;# 
  2644  000C                     	;# 
  2645  000D                     	;# 
  2646  000E                     	;# 
  2647  0010                     	;# 
  2648  0011                     	;# 
  2649  0012                     	;# 
  2650  0013                     	;# 
  2651  0014                     	;# 
  2652  0015                     	;# 
  2653  0015                     	;# 
  2654  0016                     	;# 
  2655  0016                     	;# 
  2656  0017                     	;# 
  2657  0018                     	;# 
  2658  0019                     	;# 
  2659  0019                     	;# 
  2660  001A                     	;# 
  2661  001B                     	;# 
  2662  001C                     	;# 
  2663  001D                     	;# 
  2664  001E                     	;# 
  2665  001F                     	;# 
  2666  008C                     	;# 
  2667  008D                     	;# 
  2668  008E                     	;# 
  2669  0090                     	;# 
  2670  0091                     	;# 
  2671  0092                     	;# 
  2672  0093                     	;# 
  2673  0094                     	;# 
  2674  0097                     	;# 
  2675  009B                     	;# 
  2676  009B                     	;# 
  2677  009C                     	;# 
  2678  009D                     	;# 
  2679  009E                     	;# 
  2680  009F                     	;# 
  2681  010C                     	;# 
  2682  010D                     	;# 
  2683  010E                     	;# 
  2684  0111                     	;# 
  2685  0112                     	;# 
  2686  0113                     	;# 
  2687  0114                     	;# 
  2688  0115                     	;# 
  2689  0116                     	;# 
  2690  0117                     	;# 
  2691  0118                     	;# 
  2692  0119                     	;# 
  2693  018C                     	;# 
  2694  018D                     	;# 
  2695  018E                     	;# 
  2696  0197                     	;# 
  2697  0199                     	;# 
  2698  0199                     	;# 
  2699  0199                     	;# 
  2700  019A                     	;# 
  2701  019A                     	;# 
  2702  019A                     	;# 
  2703  019B                     	;# 
  2704  019B                     	;# 
  2705  019B                     	;# 
  2706  019B                     	;# 
  2707  019B                     	;# 
  2708  019C                     	;# 
  2709  019C                     	;# 
  2710  019C                     	;# 
  2711  019D                     	;# 
  2712  019D                     	;# 
  2713  019D                     	;# 
  2714  019E                     	;# 
  2715  019E                     	;# 
  2716  019E                     	;# 
  2717  019F                     	;# 
  2718  019F                     	;# 
  2719  019F                     	;# 
  2720  019F                     	;# 
  2721  019F                     	;# 
  2722  020C                     	;# 
  2723  020D                     	;# 
  2724  020E                     	;# 
  2725  0211                     	;# 
  2726  0211                     	;# 
  2727  0212                     	;# 
  2728  0212                     	;# 
  2729  0213                     	;# 
  2730  0213                     	;# 
  2731  0214                     	;# 
  2732  0214                     	;# 
  2733  0215                     	;# 
  2734  0215                     	;# 
  2735  0215                     	;# 
  2736  0215                     	;# 
  2737  0216                     	;# 
  2738  0216                     	;# 
  2739  0217                     	;# 
  2740  0217                     	;# 
  2741  0219                     	;# 
  2742  021A                     	;# 
  2743  021B                     	;# 
  2744  021C                     	;# 
  2745  021D                     	;# 
  2746  021D                     	;# 
  2747  021E                     	;# 
  2748  021F                     	;# 
  2749  028C                     	;# 
  2750  028D                     	;# 
  2751  028E                     	;# 
  2752  0291                     	;# 
  2753  0291                     	;# 
  2754  0292                     	;# 
  2755  0293                     	;# 
  2756  0294                     	;# 
  2757  0295                     	;# 
  2758  0295                     	;# 
  2759  0296                     	;# 
  2760  0297                     	;# 
  2761  0298                     	;# 
  2762  029F                     	;# 
  2763  030C                     	;# 
  2764  030D                     	;# 
  2765  030E                     	;# 
  2766  0311                     	;# 
  2767  0311                     	;# 
  2768  0312                     	;# 
  2769  0313                     	;# 
  2770  0314                     	;# 
  2771  0315                     	;# 
  2772  0315                     	;# 
  2773  0316                     	;# 
  2774  0317                     	;# 
  2775  0318                     	;# 
  2776  038C                     	;# 
  2777  038D                     	;# 
  2778  038E                     	;# 
  2779  0391                     	;# 
  2780  0392                     	;# 
  2781  0393                     	;# 
  2782  0394                     	;# 
  2783  0395                     	;# 
  2784  0396                     	;# 
  2785  0397                     	;# 
  2786  0398                     	;# 
  2787  0399                     	;# 
  2788  039A                     	;# 
  2789  039C                     	;# 
  2790  039D                     	;# 
  2791  039E                     	;# 
  2792  039F                     	;# 
  2793  0411                     	;# 
  2794  0411                     	;# 
  2795  0412                     	;# 
  2796  0413                     	;# 
  2797  0414                     	;# 
  2798  0415                     	;# 
  2799  0416                     	;# 
  2800  0417                     	;# 
  2801  0418                     	;# 
  2802  0418                     	;# 
  2803  0419                     	;# 
  2804  041A                     	;# 
  2805  041B                     	;# 
  2806  041C                     	;# 
  2807  041D                     	;# 
  2808  041E                     	;# 
  2809  041F                     	;# 
  2810  0498                     	;# 
  2811  0498                     	;# 
  2812  0499                     	;# 
  2813  049A                     	;# 
  2814  049B                     	;# 
  2815  049B                     	;# 
  2816  049C                     	;# 
  2817  049D                     	;# 
  2818  049E                     	;# 
  2819  049F                     	;# 
  2820  0617                     	;# 
  2821  0618                     	;# 
  2822  0619                     	;# 
  2823  0619                     	;# 
  2824  061A                     	;# 
  2825  061B                     	;# 
  2826  061C                     	;# 
  2827  061C                     	;# 
  2828  061F                     	;# 
  2829  0691                     	;# 
  2830  0692                     	;# 
  2831  0693                     	;# 
  2832  0694                     	;# 
  2833  0695                     	;# 
  2834  0696                     	;# 
  2835  0697                     	;# 
  2836  0698                     	;# 
  2837  0699                     	;# 
  2838  0711                     	;# 
  2839  0712                     	;# 
  2840  0713                     	;# 
  2841  0714                     	;# 
  2842  0715                     	;# 
  2843  0716                     	;# 
  2844  0717                     	;# 
  2845  0718                     	;# 
  2846  0719                     	;# 
  2847  0891                     	;# 
  2848  0891                     	;# 
  2849  0891                     	;# 
  2850  0891                     	;# 
  2851  0891                     	;# 
  2852  0891                     	;# 
  2853  0892                     	;# 
  2854  0892                     	;# 
  2855  0892                     	;# 
  2856  0893                     	;# 
  2857  0893                     	;# 
  2858  0893                     	;# 
  2859  0893                     	;# 
  2860  0893                     	;# 
  2861  0893                     	;# 
  2862  0894                     	;# 
  2863  0894                     	;# 
  2864  0894                     	;# 
  2865  0895                     	;# 
  2866  0895                     	;# 
  2867  0895                     	;# 
  2868  0896                     	;# 
  2869  0896                     	;# 
  2870  0896                     	;# 
  2871  089B                     	;# 
  2872  0911                     	;# 
  2873  0912                     	;# 
  2874  0913                     	;# 
  2875  0914                     	;# 
  2876  0915                     	;# 
  2877  0916                     	;# 
  2878  0918                     	;# 
  2879  0919                     	;# 
  2880  091A                     	;# 
  2881  091B                     	;# 
  2882  091C                     	;# 
  2883  091D                     	;# 
  2884  091E                     	;# 
  2885  091F                     	;# 
  2886  0E0F                     	;# 
  2887  0E10                     	;# 
  2888  0E11                     	;# 
  2889  0E12                     	;# 
  2890  0E13                     	;# 
  2891  0E14                     	;# 
  2892  0E15                     	;# 
  2893  0E16                     	;# 
  2894  0E17                     	;# 
  2895  0E18                     	;# 
  2896  0E19                     	;# 
  2897  0E1A                     	;# 
  2898  0E1B                     	;# 
  2899  0E1C                     	;# 
  2900  0E1D                     	;# 
  2901  0E1E                     	;# 
  2902  0E1F                     	;# 
  2903  0E20                     	;# 
  2904  0E21                     	;# 
  2905  0E22                     	;# 
  2906  0E24                     	;# 
  2907  0E25                     	;# 
  2908  0E28                     	;# 
  2909  0E29                     	;# 
  2910  0E2A                     	;# 
  2911  0E2B                     	;# 
  2912  0E2C                     	;# 
  2913  0E2D                     	;# 
  2914  0E2E                     	;# 
  2915  0E2F                     	;# 
  2916  0E90                     	;# 
  2917  0E91                     	;# 
  2918  0E92                     	;# 
  2919  0E94                     	;# 
  2920  0E95                     	;# 
  2921  0E9C                     	;# 
  2922  0E9D                     	;# 
  2923  0E9E                     	;# 
  2924  0E9F                     	;# 
  2925  0EA0                     	;# 
  2926  0EA1                     	;# 
  2927  0EA2                     	;# 
  2928  0EA3                     	;# 
  2929  0EA4                     	;# 
  2930  0EA5                     	;# 
  2931  0EA6                     	;# 
  2932  0EA7                     	;# 
  2933  0F0F                     	;# 
  2934  0F10                     	;# 
  2935  0F11                     	;# 
  2936  0F12                     	;# 
  2937  0F13                     	;# 
  2938  0F14                     	;# 
  2939  0F15                     	;# 
  2940  0F16                     	;# 
  2941  0F17                     	;# 
  2942  0F18                     	;# 
  2943  0F19                     	;# 
  2944  0F1A                     	;# 
  2945  0F1B                     	;# 
  2946  0F1C                     	;# 
  2947  0F1D                     	;# 
  2948  0F1E                     	;# 
  2949  0F1F                     	;# 
  2950  0F20                     	;# 
  2951  0F21                     	;# 
  2952  0F22                     	;# 
  2953  0F23                     	;# 
  2954  0F24                     	;# 
  2955  0F25                     	;# 
  2956  0F26                     	;# 
  2957  0F27                     	;# 
  2958  0F28                     	;# 
  2959  0F29                     	;# 
  2960  0F2A                     	;# 
  2961  0F2B                     	;# 
  2962  0F2C                     	;# 
  2963  0F2D                     	;# 
  2964  0F2E                     	;# 
  2965  0F2F                     	;# 
  2966  0F30                     	;# 
  2967  0F31                     	;# 
  2968  0F32                     	;# 
  2969  0F33                     	;# 
  2970  0F34                     	;# 
  2971  0F35                     	;# 
  2972  0F36                     	;# 
  2973  0F37                     	;# 
  2974  0FE4                     	;# 
  2975  0FE5                     	;# 
  2976  0FE6                     	;# 
  2977  0FE7                     	;# 
  2978  0FE8                     	;# 
  2979  0FE9                     	;# 
  2980  0FEA                     	;# 
  2981  0FEB                     	;# 
  2982  0FED                     	;# 
  2983  0FEE                     	;# 
  2984  0FEF                     	;# 
  2985  0000                     	;# 
  2986  0001                     	;# 
  2987  0002                     	;# 
  2988  0003                     	;# 
  2989  0004                     	;# 
  2990  0005                     	;# 
  2991  0006                     	;# 
  2992  0007                     	;# 
  2993  0008                     	;# 
  2994  0009                     	;# 
  2995  000A                     	;# 
  2996  000B                     	;# 
  2997  000C                     	;# 
  2998  000D                     	;# 
  2999  000E                     	;# 
  3000  0010                     	;# 
  3001  0011                     	;# 
  3002  0012                     	;# 
  3003  0013                     	;# 
  3004  0014                     	;# 
  3005  0015                     	;# 
  3006  0015                     	;# 
  3007  0016                     	;# 
  3008  0016                     	;# 
  3009  0017                     	;# 
  3010  0018                     	;# 
  3011  0019                     	;# 
  3012  0019                     	;# 
  3013  001A                     	;# 
  3014  001B                     	;# 
  3015  001C                     	;# 
  3016  001D                     	;# 
  3017  001E                     	;# 
  3018  001F                     	;# 
  3019  008C                     	;# 
  3020  008D                     	;# 
  3021  008E                     	;# 
  3022  0090                     	;# 
  3023  0091                     	;# 
  3024  0092                     	;# 
  3025  0093                     	;# 
  3026  0094                     	;# 
  3027  0097                     	;# 
  3028  009B                     	;# 
  3029  009B                     	;# 
  3030  009C                     	;# 
  3031  009D                     	;# 
  3032  009E                     	;# 
  3033  009F                     	;# 
  3034  010C                     	;# 
  3035  010D                     	;# 
  3036  010E                     	;# 
  3037  0111                     	;# 
  3038  0112                     	;# 
  3039  0113                     	;# 
  3040  0114                     	;# 
  3041  0115                     	;# 
  3042  0116                     	;# 
  3043  0117                     	;# 
  3044  0118                     	;# 
  3045  0119                     	;# 
  3046  018C                     	;# 
  3047  018D                     	;# 
  3048  018E                     	;# 
  3049  0197                     	;# 
  3050  0199                     	;# 
  3051  0199                     	;# 
  3052  0199                     	;# 
  3053  019A                     	;# 
  3054  019A                     	;# 
  3055  019A                     	;# 
  3056  019B                     	;# 
  3057  019B                     	;# 
  3058  019B                     	;# 
  3059  019B                     	;# 
  3060  019B                     	;# 
  3061  019C                     	;# 
  3062  019C                     	;# 
  3063  019C                     	;# 
  3064  019D                     	;# 
  3065  019D                     	;# 
  3066  019D                     	;# 
  3067  019E                     	;# 
  3068  019E                     	;# 
  3069  019E                     	;# 
  3070  019F                     	;# 
  3071  019F                     	;# 
  3072  019F                     	;# 
  3073  019F                     	;# 
  3074  019F                     	;# 
  3075  020C                     	;# 
  3076  020D                     	;# 
  3077  020E                     	;# 
  3078  0211                     	;# 
  3079  0211                     	;# 
  3080  0212                     	;# 
  3081  0212                     	;# 
  3082  0213                     	;# 
  3083  0213                     	;# 
  3084  0214                     	;# 
  3085  0214                     	;# 
  3086  0215                     	;# 
  3087  0215                     	;# 
  3088  0215                     	;# 
  3089  0215                     	;# 
  3090  0216                     	;# 
  3091  0216                     	;# 
  3092  0217                     	;# 
  3093  0217                     	;# 
  3094  0219                     	;# 
  3095  021A                     	;# 
  3096  021B                     	;# 
  3097  021C                     	;# 
  3098  021D                     	;# 
  3099  021D                     	;# 
  3100  021E                     	;# 
  3101  021F                     	;# 
  3102  028C                     	;# 
  3103  028D                     	;# 
  3104  028E                     	;# 
  3105  0291                     	;# 
  3106  0291                     	;# 
  3107  0292                     	;# 
  3108  0293                     	;# 
  3109  0294                     	;# 
  3110  0295                     	;# 
  3111  0295                     	;# 
  3112  0296                     	;# 
  3113  0297                     	;# 
  3114  0298                     	;# 
  3115  029F                     	;# 
  3116  030C                     	;# 
  3117  030D                     	;# 
  3118  030E                     	;# 
  3119  0311                     	;# 
  3120  0311                     	;# 
  3121  0312                     	;# 
  3122  0313                     	;# 
  3123  0314                     	;# 
  3124  0315                     	;# 
  3125  0315                     	;# 
  3126  0316                     	;# 
  3127  0317                     	;# 
  3128  0318                     	;# 
  3129  038C                     	;# 
  3130  038D                     	;# 
  3131  038E                     	;# 
  3132  0391                     	;# 
  3133  0392                     	;# 
  3134  0393                     	;# 
  3135  0394                     	;# 
  3136  0395                     	;# 
  3137  0396                     	;# 
  3138  0397                     	;# 
  3139  0398                     	;# 
  3140  0399                     	;# 
  3141  039A                     	;# 
  3142  039C                     	;# 
  3143  039D                     	;# 
  3144  039E                     	;# 
  3145  039F                     	;# 
  3146  0411                     	;# 
  3147  0411                     	;# 
  3148  0412                     	;# 
  3149  0413                     	;# 
  3150  0414                     	;# 
  3151  0415                     	;# 
  3152  0416                     	;# 
  3153  0417                     	;# 
  3154  0418                     	;# 
  3155  0418                     	;# 
  3156  0419                     	;# 
  3157  041A                     	;# 
  3158  041B                     	;# 
  3159  041C                     	;# 
  3160  041D                     	;# 
  3161  041E                     	;# 
  3162  041F                     	;# 
  3163  0498                     	;# 
  3164  0498                     	;# 
  3165  0499                     	;# 
  3166  049A                     	;# 
  3167  049B                     	;# 
  3168  049B                     	;# 
  3169  049C                     	;# 
  3170  049D                     	;# 
  3171  049E                     	;# 
  3172  049F                     	;# 
  3173  0617                     	;# 
  3174  0618                     	;# 
  3175  0619                     	;# 
  3176  0619                     	;# 
  3177  061A                     	;# 
  3178  061B                     	;# 
  3179  061C                     	;# 
  3180  061C                     	;# 
  3181  061F                     	;# 
  3182  0691                     	;# 
  3183  0692                     	;# 
  3184  0693                     	;# 
  3185  0694                     	;# 
  3186  0695                     	;# 
  3187  0696                     	;# 
  3188  0697                     	;# 
  3189  0698                     	;# 
  3190  0699                     	;# 
  3191  0711                     	;# 
  3192  0712                     	;# 
  3193  0713                     	;# 
  3194  0714                     	;# 
  3195  0715                     	;# 
  3196  0716                     	;# 
  3197  0717                     	;# 
  3198  0718                     	;# 
  3199  0719                     	;# 
  3200  0891                     	;# 
  3201  0891                     	;# 
  3202  0891                     	;# 
  3203  0891                     	;# 
  3204  0891                     	;# 
  3205  0891                     	;# 
  3206  0892                     	;# 
  3207  0892                     	;# 
  3208  0892                     	;# 
  3209  0893                     	;# 
  3210  0893                     	;# 
  3211  0893                     	;# 
  3212  0893                     	;# 
  3213  0893                     	;# 
  3214  0893                     	;# 
  3215  0894                     	;# 
  3216  0894                     	;# 
  3217  0894                     	;# 
  3218  0895                     	;# 
  3219  0895                     	;# 
  3220  0895                     	;# 
  3221  0896                     	;# 
  3222  0896                     	;# 
  3223  0896                     	;# 
  3224  089B                     	;# 
  3225  0911                     	;# 
  3226  0912                     	;# 
  3227  0913                     	;# 
  3228  0914                     	;# 
  3229  0915                     	;# 
  3230  0916                     	;# 
  3231  0918                     	;# 
  3232  0919                     	;# 
  3233  091A                     	;# 
  3234  091B                     	;# 
  3235  091C                     	;# 
  3236  091D                     	;# 
  3237  091E                     	;# 
  3238  091F                     	;# 
  3239  0E0F                     	;# 
  3240  0E10                     	;# 
  3241  0E11                     	;# 
  3242  0E12                     	;# 
  3243  0E13                     	;# 
  3244  0E14                     	;# 
  3245  0E15                     	;# 
  3246  0E16                     	;# 
  3247  0E17                     	;# 
  3248  0E18                     	;# 
  3249  0E19                     	;# 
  3250  0E1A                     	;# 
  3251  0E1B                     	;# 
  3252  0E1C                     	;# 
  3253  0E1D                     	;# 
  3254  0E1E                     	;# 
  3255  0E1F                     	;# 
  3256  0E20                     	;# 
  3257  0E21                     	;# 
  3258  0E22                     	;# 
  3259  0E24                     	;# 
  3260  0E25                     	;# 
  3261  0E28                     	;# 
  3262  0E29                     	;# 
  3263  0E2A                     	;# 
  3264  0E2B                     	;# 
  3265  0E2C                     	;# 
  3266  0E2D                     	;# 
  3267  0E2E                     	;# 
  3268  0E2F                     	;# 
  3269  0E90                     	;# 
  3270  0E91                     	;# 
  3271  0E92                     	;# 
  3272  0E94                     	;# 
  3273  0E95                     	;# 
  3274  0E9C                     	;# 
  3275  0E9D                     	;# 
  3276  0E9E                     	;# 
  3277  0E9F                     	;# 
  3278  0EA0                     	;# 
  3279  0EA1                     	;# 
  3280  0EA2                     	;# 
  3281  0EA3                     	;# 
  3282  0EA4                     	;# 
  3283  0EA5                     	;# 
  3284  0EA6                     	;# 
  3285  0EA7                     	;# 
  3286  0F0F                     	;# 
  3287  0F10                     	;# 
  3288  0F11                     	;# 
  3289  0F12                     	;# 
  3290  0F13                     	;# 
  3291  0F14                     	;# 
  3292  0F15                     	;# 
  3293  0F16                     	;# 
  3294  0F17                     	;# 
  3295  0F18                     	;# 
  3296  0F19                     	;# 
  3297  0F1A                     	;# 
  3298  0F1B                     	;# 
  3299  0F1C                     	;# 
  3300  0F1D                     	;# 
  3301  0F1E                     	;# 
  3302  0F1F                     	;# 
  3303  0F20                     	;# 
  3304  0F21                     	;# 
  3305  0F22                     	;# 
  3306  0F23                     	;# 
  3307  0F24                     	;# 
  3308  0F25                     	;# 
  3309  0F26                     	;# 
  3310  0F27                     	;# 
  3311  0F28                     	;# 
  3312  0F29                     	;# 
  3313  0F2A                     	;# 
  3314  0F2B                     	;# 
  3315  0F2C                     	;# 
  3316  0F2D                     	;# 
  3317  0F2E                     	;# 
  3318  0F2F                     	;# 
  3319  0F30                     	;# 
  3320  0F31                     	;# 
  3321  0F32                     	;# 
  3322  0F33                     	;# 
  3323  0F34                     	;# 
  3324  0F35                     	;# 
  3325  0F36                     	;# 
  3326  0F37                     	;# 
  3327  0FE4                     	;# 
  3328  0FE5                     	;# 
  3329  0FE6                     	;# 
  3330  0FE7                     	;# 
  3331  0FE8                     	;# 
  3332  0FE9                     	;# 
  3333  0FEA                     	;# 
  3334  0FEB                     	;# 
  3335  0FED                     	;# 
  3336  0FEE                     	;# 
  3337  0FEF                     	;# 
  3338  0000                     	;# 
  3339  0001                     	;# 
  3340  0002                     	;# 
  3341  0003                     	;# 
  3342  0004                     	;# 
  3343  0005                     	;# 
  3344  0006                     	;# 
  3345  0007                     	;# 
  3346  0008                     	;# 
  3347  0009                     	;# 
  3348  000A                     	;# 
  3349  000B                     	;# 
  3350  000C                     	;# 
  3351  000D                     	;# 
  3352  000E                     	;# 
  3353  0010                     	;# 
  3354  0011                     	;# 
  3355  0012                     	;# 
  3356  0013                     	;# 
  3357  0014                     	;# 
  3358  0015                     	;# 
  3359  0015                     	;# 
  3360  0016                     	;# 
  3361  0016                     	;# 
  3362  0017                     	;# 
  3363  0018                     	;# 
  3364  0019                     	;# 
  3365  0019                     	;# 
  3366  001A                     	;# 
  3367  001B                     	;# 
  3368  001C                     	;# 
  3369  001D                     	;# 
  3370  001E                     	;# 
  3371  001F                     	;# 
  3372  008C                     	;# 
  3373  008D                     	;# 
  3374  008E                     	;# 
  3375  0090                     	;# 
  3376  0091                     	;# 
  3377  0092                     	;# 
  3378  0093                     	;# 
  3379  0094                     	;# 
  3380  0097                     	;# 
  3381  009B                     	;# 
  3382  009B                     	;# 
  3383  009C                     	;# 
  3384  009D                     	;# 
  3385  009E                     	;# 
  3386  009F                     	;# 
  3387  010C                     	;# 
  3388  010D                     	;# 
  3389  010E                     	;# 
  3390  0111                     	;# 
  3391  0112                     	;# 
  3392  0113                     	;# 
  3393  0114                     	;# 
  3394  0115                     	;# 
  3395  0116                     	;# 
  3396  0117                     	;# 
  3397  0118                     	;# 
  3398  0119                     	;# 
  3399  018C                     	;# 
  3400  018D                     	;# 
  3401  018E                     	;# 
  3402  0197                     	;# 
  3403  0199                     	;# 
  3404  0199                     	;# 
  3405  0199                     	;# 
  3406  019A                     	;# 
  3407  019A                     	;# 
  3408  019A                     	;# 
  3409  019B                     	;# 
  3410  019B                     	;# 
  3411  019B                     	;# 
  3412  019B                     	;# 
  3413  019B                     	;# 
  3414  019C                     	;# 
  3415  019C                     	;# 
  3416  019C                     	;# 
  3417  019D                     	;# 
  3418  019D                     	;# 
  3419  019D                     	;# 
  3420  019E                     	;# 
  3421  019E                     	;# 
  3422  019E                     	;# 
  3423  019F                     	;# 
  3424  019F                     	;# 
  3425  019F                     	;# 
  3426  019F                     	;# 
  3427  019F                     	;# 
  3428  020C                     	;# 
  3429  020D                     	;# 
  3430  020E                     	;# 
  3431  0211                     	;# 
  3432  0211                     	;# 
  3433  0212                     	;# 
  3434  0212                     	;# 
  3435  0213                     	;# 
  3436  0213                     	;# 
  3437  0214                     	;# 
  3438  0214                     	;# 
  3439  0215                     	;# 
  3440  0215                     	;# 
  3441  0215                     	;# 
  3442  0215                     	;# 
  3443  0216                     	;# 
  3444  0216                     	;# 
  3445  0217                     	;# 
  3446  0217                     	;# 
  3447  0219                     	;# 
  3448  021A                     	;# 
  3449  021B                     	;# 
  3450  021C                     	;# 
  3451  021D                     	;# 
  3452  021D                     	;# 
  3453  021E                     	;# 
  3454  021F                     	;# 
  3455  028C                     	;# 
  3456  028D                     	;# 
  3457  028E                     	;# 
  3458  0291                     	;# 
  3459  0291                     	;# 
  3460  0292                     	;# 
  3461  0293                     	;# 
  3462  0294                     	;# 
  3463  0295                     	;# 
  3464  0295                     	;# 
  3465  0296                     	;# 
  3466  0297                     	;# 
  3467  0298                     	;# 
  3468  029F                     	;# 
  3469  030C                     	;# 
  3470  030D                     	;# 
  3471  030E                     	;# 
  3472  0311                     	;# 
  3473  0311                     	;# 
  3474  0312                     	;# 
  3475  0313                     	;# 
  3476  0314                     	;# 
  3477  0315                     	;# 
  3478  0315                     	;# 
  3479  0316                     	;# 
  3480  0317                     	;# 
  3481  0318                     	;# 
  3482  038C                     	;# 
  3483  038D                     	;# 
  3484  038E                     	;# 
  3485  0391                     	;# 
  3486  0392                     	;# 
  3487  0393                     	;# 
  3488  0394                     	;# 
  3489  0395                     	;# 
  3490  0396                     	;# 
  3491  0397                     	;# 
  3492  0398                     	;# 
  3493  0399                     	;# 
  3494  039A                     	;# 
  3495  039C                     	;# 
  3496  039D                     	;# 
  3497  039E                     	;# 
  3498  039F                     	;# 
  3499  0411                     	;# 
  3500  0411                     	;# 
  3501  0412                     	;# 
  3502  0413                     	;# 
  3503  0414                     	;# 
  3504  0415                     	;# 
  3505  0416                     	;# 
  3506  0417                     	;# 
  3507  0418                     	;# 
  3508  0418                     	;# 
  3509  0419                     	;# 
  3510  041A                     	;# 
  3511  041B                     	;# 
  3512  041C                     	;# 
  3513  041D                     	;# 
  3514  041E                     	;# 
  3515  041F                     	;# 
  3516  0498                     	;# 
  3517  0498                     	;# 
  3518  0499                     	;# 
  3519  049A                     	;# 
  3520  049B                     	;# 
  3521  049B                     	;# 
  3522  049C                     	;# 
  3523  049D                     	;# 
  3524  049E                     	;# 
  3525  049F                     	;# 
  3526  0617                     	;# 
  3527  0618                     	;# 
  3528  0619                     	;# 
  3529  0619                     	;# 
  3530  061A                     	;# 
  3531  061B                     	;# 
  3532  061C                     	;# 
  3533  061C                     	;# 
  3534  061F                     	;# 
  3535  0691                     	;# 
  3536  0692                     	;# 
  3537  0693                     	;# 
  3538  0694                     	;# 
  3539  0695                     	;# 
  3540  0696                     	;# 
  3541  0697                     	;# 
  3542  0698                     	;# 
  3543  0699                     	;# 
  3544  0711                     	;# 
  3545  0712                     	;# 
  3546  0713                     	;# 
  3547  0714                     	;# 
  3548  0715                     	;# 
  3549  0716                     	;# 
  3550  0717                     	;# 
  3551  0718                     	;# 
  3552  0719                     	;# 
  3553  0891                     	;# 
  3554  0891                     	;# 
  3555  0891                     	;# 
  3556  0891                     	;# 
  3557  0891                     	;# 
  3558  0891                     	;# 
  3559  0892                     	;# 
  3560  0892                     	;# 
  3561  0892                     	;# 
  3562  0893                     	;# 
  3563  0893                     	;# 
  3564  0893                     	;# 
  3565  0893                     	;# 
  3566  0893                     	;# 
  3567  0893                     	;# 
  3568  0894                     	;# 
  3569  0894                     	;# 
  3570  0894                     	;# 
  3571  0895                     	;# 
  3572  0895                     	;# 
  3573  0895                     	;# 
  3574  0896                     	;# 
  3575  0896                     	;# 
  3576  0896                     	;# 
  3577  089B                     	;# 
  3578  0911                     	;# 
  3579  0912                     	;# 
  3580  0913                     	;# 
  3581  0914                     	;# 
  3582  0915                     	;# 
  3583  0916                     	;# 
  3584  0918                     	;# 
  3585  0919                     	;# 
  3586  091A                     	;# 
  3587  091B                     	;# 
  3588  091C                     	;# 
  3589  091D                     	;# 
  3590  091E                     	;# 
  3591  091F                     	;# 
  3592  0E0F                     	;# 
  3593  0E10                     	;# 
  3594  0E11                     	;# 
  3595  0E12                     	;# 
  3596  0E13                     	;# 
  3597  0E14                     	;# 
  3598  0E15                     	;# 
  3599  0E16                     	;# 
  3600  0E17                     	;# 
  3601  0E18                     	;# 
  3602  0E19                     	;# 
  3603  0E1A                     	;# 
  3604  0E1B                     	;# 
  3605  0E1C                     	;# 
  3606  0E1D                     	;# 
  3607  0E1E                     	;# 
  3608  0E1F                     	;# 
  3609  0E20                     	;# 
  3610  0E21                     	;# 
  3611  0E22                     	;# 
  3612  0E24                     	;# 
  3613  0E25                     	;# 
  3614  0E28                     	;# 
  3615  0E29                     	;# 
  3616  0E2A                     	;# 
  3617  0E2B                     	;# 
  3618  0E2C                     	;# 
  3619  0E2D                     	;# 
  3620  0E2E                     	;# 
  3621  0E2F                     	;# 
  3622  0E90                     	;# 
  3623  0E91                     	;# 
  3624  0E92                     	;# 
  3625  0E94                     	;# 
  3626  0E95                     	;# 
  3627  0E9C                     	;# 
  3628  0E9D                     	;# 
  3629  0E9E                     	;# 
  3630  0E9F                     	;# 
  3631  0EA0                     	;# 
  3632  0EA1                     	;# 
  3633  0EA2                     	;# 
  3634  0EA3                     	;# 
  3635  0EA4                     	;# 
  3636  0EA5                     	;# 
  3637  0EA6                     	;# 
  3638  0EA7                     	;# 
  3639  0F0F                     	;# 
  3640  0F10                     	;# 
  3641  0F11                     	;# 
  3642  0F12                     	;# 
  3643  0F13                     	;# 
  3644  0F14                     	;# 
  3645  0F15                     	;# 
  3646  0F16                     	;# 
  3647  0F17                     	;# 
  3648  0F18                     	;# 
  3649  0F19                     	;# 
  3650  0F1A                     	;# 
  3651  0F1B                     	;# 
  3652  0F1C                     	;# 
  3653  0F1D                     	;# 
  3654  0F1E                     	;# 
  3655  0F1F                     	;# 
  3656  0F20                     	;# 
  3657  0F21                     	;# 
  3658  0F22                     	;# 
  3659  0F23                     	;# 
  3660  0F24                     	;# 
  3661  0F25                     	;# 
  3662  0F26                     	;# 
  3663  0F27                     	;# 
  3664  0F28                     	;# 
  3665  0F29                     	;# 
  3666  0F2A                     	;# 
  3667  0F2B                     	;# 
  3668  0F2C                     	;# 
  3669  0F2D                     	;# 
  3670  0F2E                     	;# 
  3671  0F2F                     	;# 
  3672  0F30                     	;# 
  3673  0F31                     	;# 
  3674  0F32                     	;# 
  3675  0F33                     	;# 
  3676  0F34                     	;# 
  3677  0F35                     	;# 
  3678  0F36                     	;# 
  3679  0F37                     	;# 
  3680  0FE4                     	;# 
  3681  0FE5                     	;# 
  3682  0FE6                     	;# 
  3683  0FE7                     	;# 
  3684  0FE8                     	;# 
  3685  0FE9                     	;# 
  3686  0FEA                     	;# 
  3687  0FEB                     	;# 
  3688  0FED                     	;# 
  3689  0FEE                     	;# 
  3690  0FEF                     	;# 
  3691  0000                     	;# 
  3692  0001                     	;# 
  3693  0002                     	;# 
  3694  0003                     	;# 
  3695  0004                     	;# 
  3696  0005                     	;# 
  3697  0006                     	;# 
  3698  0007                     	;# 
  3699  0008                     	;# 
  3700  0009                     	;# 
  3701  000A                     	;# 
  3702  000B                     	;# 
  3703  000C                     	;# 
  3704  000D                     	;# 
  3705  000E                     	;# 
  3706  0010                     	;# 
  3707  0011                     	;# 
  3708  0012                     	;# 
  3709  0013                     	;# 
  3710  0014                     	;# 
  3711  0015                     	;# 
  3712  0015                     	;# 
  3713  0016                     	;# 
  3714  0016                     	;# 
  3715  0017                     	;# 
  3716  0018                     	;# 
  3717  0019                     	;# 
  3718  0019                     	;# 
  3719  001A                     	;# 
  3720  001B                     	;# 
  3721  001C                     	;# 
  3722  001D                     	;# 
  3723  001E                     	;# 
  3724  001F                     	;# 
  3725  008C                     	;# 
  3726  008D                     	;# 
  3727  008E                     	;# 
  3728  0090                     	;# 
  3729  0091                     	;# 
  3730  0092                     	;# 
  3731  0093                     	;# 
  3732  0094                     	;# 
  3733  0097                     	;# 
  3734  009B                     	;# 
  3735  009B                     	;# 
  3736  009C                     	;# 
  3737  009D                     	;# 
  3738  009E                     	;# 
  3739  009F                     	;# 
  3740  010C                     	;# 
  3741  010D                     	;# 
  3742  010E                     	;# 
  3743  0111                     	;# 
  3744  0112                     	;# 
  3745  0113                     	;# 
  3746  0114                     	;# 
  3747  0115                     	;# 
  3748  0116                     	;# 
  3749  0117                     	;# 
  3750  0118                     	;# 
  3751  0119                     	;# 
  3752  018C                     	;# 
  3753  018D                     	;# 
  3754  018E                     	;# 
  3755  0197                     	;# 
  3756  0199                     	;# 
  3757  0199                     	;# 
  3758  0199                     	;# 
  3759  019A                     	;# 
  3760  019A                     	;# 
  3761  019A                     	;# 
  3762  019B                     	;# 
  3763  019B                     	;# 
  3764  019B                     	;# 
  3765  019B                     	;# 
  3766  019B                     	;# 
  3767  019C                     	;# 
  3768  019C                     	;# 
  3769  019C                     	;# 
  3770  019D                     	;# 
  3771  019D                     	;# 
  3772  019D                     	;# 
  3773  019E                     	;# 
  3774  019E                     	;# 
  3775  019E                     	;# 
  3776  019F                     	;# 
  3777  019F                     	;# 
  3778  019F                     	;# 
  3779  019F                     	;# 
  3780  019F                     	;# 
  3781  020C                     	;# 
  3782  020D                     	;# 
  3783  020E                     	;# 
  3784  0211                     	;# 
  3785  0211                     	;# 
  3786  0212                     	;# 
  3787  0212                     	;# 
  3788  0213                     	;# 
  3789  0213                     	;# 
  3790  0214                     	;# 
  3791  0214                     	;# 
  3792  0215                     	;# 
  3793  0215                     	;# 
  3794  0215                     	;# 
  3795  0215                     	;# 
  3796  0216                     	;# 
  3797  0216                     	;# 
  3798  0217                     	;# 
  3799  0217                     	;# 
  3800  0219                     	;# 
  3801  021A                     	;# 
  3802  021B                     	;# 
  3803  021C                     	;# 
  3804  021D                     	;# 
  3805  021D                     	;# 
  3806  021E                     	;# 
  3807  021F                     	;# 
  3808  028C                     	;# 
  3809  028D                     	;# 
  3810  028E                     	;# 
  3811  0291                     	;# 
  3812  0291                     	;# 
  3813  0292                     	;# 
  3814  0293                     	;# 
  3815  0294                     	;# 
  3816  0295                     	;# 
  3817  0295                     	;# 
  3818  0296                     	;# 
  3819  0297                     	;# 
  3820  0298                     	;# 
  3821  029F                     	;# 
  3822  030C                     	;# 
  3823  030D                     	;# 
  3824  030E                     	;# 
  3825  0311                     	;# 
  3826  0311                     	;# 
  3827  0312                     	;# 
  3828  0313                     	;# 
  3829  0314                     	;# 
  3830  0315                     	;# 
  3831  0315                     	;# 
  3832  0316                     	;# 
  3833  0317                     	;# 
  3834  0318                     	;# 
  3835  038C                     	;# 
  3836  038D                     	;# 
  3837  038E                     	;# 
  3838  0391                     	;# 
  3839  0392                     	;# 
  3840  0393                     	;# 
  3841  0394                     	;# 
  3842  0395                     	;# 
  3843  0396                     	;# 
  3844  0397                     	;# 
  3845  0398                     	;# 
  3846  0399                     	;# 
  3847  039A                     	;# 
  3848  039C                     	;# 
  3849  039D                     	;# 
  3850  039E                     	;# 
  3851  039F                     	;# 
  3852  0411                     	;# 
  3853  0411                     	;# 
  3854  0412                     	;# 
  3855  0413                     	;# 
  3856  0414                     	;# 
  3857  0415                     	;# 
  3858  0416                     	;# 
  3859  0417                     	;# 
  3860  0418                     	;# 
  3861  0418                     	;# 
  3862  0419                     	;# 
  3863  041A                     	;# 
  3864  041B                     	;# 
  3865  041C                     	;# 
  3866  041D                     	;# 
  3867  041E                     	;# 
  3868  041F                     	;# 
  3869  0498                     	;# 
  3870  0498                     	;# 
  3871  0499                     	;# 
  3872  049A                     	;# 
  3873  049B                     	;# 
  3874  049B                     	;# 
  3875  049C                     	;# 
  3876  049D                     	;# 
  3877  049E                     	;# 
  3878  049F                     	;# 
  3879  0617                     	;# 
  3880  0618                     	;# 
  3881  0619                     	;# 
  3882  0619                     	;# 
  3883  061A                     	;# 
  3884  061B                     	;# 
  3885  061C                     	;# 
  3886  061C                     	;# 
  3887  061F                     	;# 
  3888  0691                     	;# 
  3889  0692                     	;# 
  3890  0693                     	;# 
  3891  0694                     	;# 
  3892  0695                     	;# 
  3893  0696                     	;# 
  3894  0697                     	;# 
  3895  0698                     	;# 
  3896  0699                     	;# 
  3897  0711                     	;# 
  3898  0712                     	;# 
  3899  0713                     	;# 
  3900  0714                     	;# 
  3901  0715                     	;# 
  3902  0716                     	;# 
  3903  0717                     	;# 
  3904  0718                     	;# 
  3905  0719                     	;# 
  3906  0891                     	;# 
  3907  0891                     	;# 
  3908  0891                     	;# 
  3909  0891                     	;# 
  3910  0891                     	;# 
  3911  0891                     	;# 
  3912  0892                     	;# 
  3913  0892                     	;# 
  3914  0892                     	;# 
  3915  0893                     	;# 
  3916  0893                     	;# 
  3917  0893                     	;# 
  3918  0893                     	;# 
  3919  0893                     	;# 
  3920  0893                     	;# 
  3921  0894                     	;# 
  3922  0894                     	;# 
  3923  0894                     	;# 
  3924  0895                     	;# 
  3925  0895                     	;# 
  3926  0895                     	;# 
  3927  0896                     	;# 
  3928  0896                     	;# 
  3929  0896                     	;# 
  3930  089B                     	;# 
  3931  0911                     	;# 
  3932  0912                     	;# 
  3933  0913                     	;# 
  3934  0914                     	;# 
  3935  0915                     	;# 
  3936  0916                     	;# 
  3937  0918                     	;# 
  3938  0919                     	;# 
  3939  091A                     	;# 
  3940  091B                     	;# 
  3941  091C                     	;# 
  3942  091D                     	;# 
  3943  091E                     	;# 
  3944  091F                     	;# 
  3945  0E0F                     	;# 
  3946  0E10                     	;# 
  3947  0E11                     	;# 
  3948  0E12                     	;# 
  3949  0E13                     	;# 
  3950  0E14                     	;# 
  3951  0E15                     	;# 
  3952  0E16                     	;# 
  3953  0E17                     	;# 
  3954  0E18                     	;# 
  3955  0E19                     	;# 
  3956  0E1A                     	;# 
  3957  0E1B                     	;# 
  3958  0E1C                     	;# 
  3959  0E1D                     	;# 
  3960  0E1E                     	;# 
  3961  0E1F                     	;# 
  3962  0E20                     	;# 
  3963  0E21                     	;# 
  3964  0E22                     	;# 
  3965  0E24                     	;# 
  3966  0E25                     	;# 
  3967  0E28                     	;# 
  3968  0E29                     	;# 
  3969  0E2A                     	;# 
  3970  0E2B                     	;# 
  3971  0E2C                     	;# 
  3972  0E2D                     	;# 
  3973  0E2E                     	;# 
  3974  0E2F                     	;# 
  3975  0E90                     	;# 
  3976  0E91                     	;# 
  3977  0E92                     	;# 
  3978  0E94                     	;# 
  3979  0E95                     	;# 
  3980  0E9C                     	;# 
  3981  0E9D                     	;# 
  3982  0E9E                     	;# 
  3983  0E9F                     	;# 
  3984  0EA0                     	;# 
  3985  0EA1                     	;# 
  3986  0EA2                     	;# 
  3987  0EA3                     	;# 
  3988  0EA4                     	;# 
  3989  0EA5                     	;# 
  3990  0EA6                     	;# 
  3991  0EA7                     	;# 
  3992  0F0F                     	;# 
  3993  0F10                     	;# 
  3994  0F11                     	;# 
  3995  0F12                     	;# 
  3996  0F13                     	;# 
  3997  0F14                     	;# 
  3998  0F15                     	;# 
  3999  0F16                     	;# 
  4000  0F17                     	;# 
  4001  0F18                     	;# 
  4002  0F19                     	;# 
  4003  0F1A                     	;# 
  4004  0F1B                     	;# 
  4005  0F1C                     	;# 
  4006  0F1D                     	;# 
  4007  0F1E                     	;# 
  4008  0F1F                     	;# 
  4009  0F20                     	;# 
  4010  0F21                     	;# 
  4011  0F22                     	;# 
  4012  0F23                     	;# 
  4013  0F24                     	;# 
  4014  0F25                     	;# 
  4015  0F26                     	;# 
  4016  0F27                     	;# 
  4017  0F28                     	;# 
  4018  0F29                     	;# 
  4019  0F2A                     	;# 
  4020  0F2B                     	;# 
  4021  0F2C                     	;# 
  4022  0F2D                     	;# 
  4023  0F2E                     	;# 
  4024  0F2F                     	;# 
  4025  0F30                     	;# 
  4026  0F31                     	;# 
  4027  0F32                     	;# 
  4028  0F33                     	;# 
  4029  0F34                     	;# 
  4030  0F35                     	;# 
  4031  0F36                     	;# 
  4032  0F37                     	;# 
  4033  0FE4                     	;# 
  4034  0FE5                     	;# 
  4035  0FE6                     	;# 
  4036  0FE7                     	;# 
  4037  0FE8                     	;# 
  4038  0FE9                     	;# 
  4039  0FEA                     	;# 
  4040  0FEB                     	;# 
  4041  0FED                     	;# 
  4042  0FEE                     	;# 
  4043  0FEF                     	;# 
  4044  0000                     	;# 
  4045  0001                     	;# 
  4046  0002                     	;# 
  4047  0003                     	;# 
  4048  0004                     	;# 
  4049  0005                     	;# 
  4050  0006                     	;# 
  4051  0007                     	;# 
  4052  0008                     	;# 
  4053  0009                     	;# 
  4054  000A                     	;# 
  4055  000B                     	;# 
  4056  000C                     	;# 
  4057  000D                     	;# 
  4058  000E                     	;# 
  4059  0010                     	;# 
  4060  0011                     	;# 
  4061  0012                     	;# 
  4062  0013                     	;# 
  4063  0014                     	;# 
  4064  0015                     	;# 
  4065  0015                     	;# 
  4066  0016                     	;# 
  4067  0016                     	;# 
  4068  0017                     	;# 
  4069  0018                     	;# 
  4070  0019                     	;# 
  4071  0019                     	;# 
  4072  001A                     	;# 
  4073  001B                     	;# 
  4074  001C                     	;# 
  4075  001D                     	;# 
  4076  001E                     	;# 
  4077  001F                     	;# 
  4078  008C                     	;# 
  4079  008D                     	;# 
  4080  008E                     	;# 
  4081  0090                     	;# 
  4082  0091                     	;# 
  4083  0092                     	;# 
  4084  0093                     	;# 
  4085  0094                     	;# 
  4086  0097                     	;# 
  4087  009B                     	;# 
  4088  009B                     	;# 
  4089  009C                     	;# 
  4090  009D                     	;# 
  4091  009E                     	;# 
  4092  009F                     	;# 
  4093  010C                     	;# 
  4094  010D                     	;# 
  4095  010E                     	;# 
  4096  0111                     	;# 
  4097  0112                     	;# 
  4098  0113                     	;# 
  4099  0114                     	;# 
  4100  0115                     	;# 
  4101  0116                     	;# 
  4102  0117                     	;# 
  4103  0118                     	;# 
  4104  0119                     	;# 
  4105  018C                     	;# 
  4106  018D                     	;# 
  4107  018E                     	;# 
  4108  0197                     	;# 
  4109  0199                     	;# 
  4110  0199                     	;# 
  4111  0199                     	;# 
  4112  019A                     	;# 
  4113  019A                     	;# 
  4114  019A                     	;# 
  4115  019B                     	;# 
  4116  019B                     	;# 
  4117  019B                     	;# 
  4118  019B                     	;# 
  4119  019B                     	;# 
  4120  019C                     	;# 
  4121  019C                     	;# 
  4122  019C                     	;# 
  4123  019D                     	;# 
  4124  019D                     	;# 
  4125  019D                     	;# 
  4126  019E                     	;# 
  4127  019E                     	;# 
  4128  019E                     	;# 
  4129  019F                     	;# 
  4130  019F                     	;# 
  4131  019F                     	;# 
  4132  019F                     	;# 
  4133  019F                     	;# 
  4134  020C                     	;# 
  4135  020D                     	;# 
  4136  020E                     	;# 
  4137  0211                     	;# 
  4138  0211                     	;# 
  4139  0212                     	;# 
  4140  0212                     	;# 
  4141  0213                     	;# 
  4142  0213                     	;# 
  4143  0214                     	;# 
  4144  0214                     	;# 
  4145  0215                     	;# 
  4146  0215                     	;# 
  4147  0215                     	;# 
  4148  0215                     	;# 
  4149  0216                     	;# 
  4150  0216                     	;# 
  4151  0217                     	;# 
  4152  0217                     	;# 
  4153  0219                     	;# 
  4154  021A                     	;# 
  4155  021B                     	;# 
  4156  021C                     	;# 
  4157  021D                     	;# 
  4158  021D                     	;# 
  4159  021E                     	;# 
  4160  021F                     	;# 
  4161  028C                     	;# 
  4162  028D                     	;# 
  4163  028E                     	;# 
  4164  0291                     	;# 
  4165  0291                     	;# 
  4166  0292                     	;# 
  4167  0293                     	;# 
  4168  0294                     	;# 
  4169  0295                     	;# 
  4170  0295                     	;# 
  4171  0296                     	;# 
  4172  0297                     	;# 
  4173  0298                     	;# 
  4174  029F                     	;# 
  4175  030C                     	;# 
  4176  030D                     	;# 
  4177  030E                     	;# 
  4178  0311                     	;# 
  4179  0311                     	;# 
  4180  0312                     	;# 
  4181  0313                     	;# 
  4182  0314                     	;# 
  4183  0315                     	;# 
  4184  0315                     	;# 
  4185  0316                     	;# 
  4186  0317                     	;# 
  4187  0318                     	;# 
  4188  038C                     	;# 
  4189  038D                     	;# 
  4190  038E                     	;# 
  4191  0391                     	;# 
  4192  0392                     	;# 
  4193  0393                     	;# 
  4194  0394                     	;# 
  4195  0395                     	;# 
  4196  0396                     	;# 
  4197  0397                     	;# 
  4198  0398                     	;# 
  4199  0399                     	;# 
  4200  039A                     	;# 
  4201  039C                     	;# 
  4202  039D                     	;# 
  4203  039E                     	;# 
  4204  039F                     	;# 
  4205  0411                     	;# 
  4206  0411                     	;# 
  4207  0412                     	;# 
  4208  0413                     	;# 
  4209  0414                     	;# 
  4210  0415                     	;# 
  4211  0416                     	;# 
  4212  0417                     	;# 
  4213  0418                     	;# 
  4214  0418                     	;# 
  4215  0419                     	;# 
  4216  041A                     	;# 
  4217  041B                     	;# 
  4218  041C                     	;# 
  4219  041D                     	;# 
  4220  041E                     	;# 
  4221  041F                     	;# 
  4222  0498                     	;# 
  4223  0498                     	;# 
  4224  0499                     	;# 
  4225  049A                     	;# 
  4226  049B                     	;# 
  4227  049B                     	;# 
  4228  049C                     	;# 
  4229  049D                     	;# 
  4230  049E                     	;# 
  4231  049F                     	;# 
  4232  0617                     	;# 
  4233  0618                     	;# 
  4234  0619                     	;# 
  4235  0619                     	;# 
  4236  061A                     	;# 
  4237  061B                     	;# 
  4238  061C                     	;# 
  4239  061C                     	;# 
  4240  061F                     	;# 
  4241  0691                     	;# 
  4242  0692                     	;# 
  4243  0693                     	;# 
  4244  0694                     	;# 
  4245  0695                     	;# 
  4246  0696                     	;# 
  4247  0697                     	;# 
  4248  0698                     	;# 
  4249  0699                     	;# 
  4250  0711                     	;# 
  4251  0712                     	;# 
  4252  0713                     	;# 
  4253  0714                     	;# 
  4254  0715                     	;# 
  4255  0716                     	;# 
  4256  0717                     	;# 
  4257  0718                     	;# 
  4258  0719                     	;# 
  4259  0891                     	;# 
  4260  0891                     	;# 
  4261  0891                     	;# 
  4262  0891                     	;# 
  4263  0891                     	;# 
  4264  0891                     	;# 
  4265  0892                     	;# 
  4266  0892                     	;# 
  4267  0892                     	;# 
  4268  0893                     	;# 
  4269  0893                     	;# 
  4270  0893                     	;# 
  4271  0893                     	;# 
  4272  0893                     	;# 
  4273  0893                     	;# 
  4274  0894                     	;# 
  4275  0894                     	;# 
  4276  0894                     	;# 
  4277  0895                     	;# 
  4278  0895                     	;# 
  4279  0895                     	;# 
  4280  0896                     	;# 
  4281  0896                     	;# 
  4282  0896                     	;# 
  4283  089B                     	;# 
  4284  0911                     	;# 
  4285  0912                     	;# 
  4286  0913                     	;# 
  4287  0914                     	;# 
  4288  0915                     	;# 
  4289  0916                     	;# 
  4290  0918                     	;# 
  4291  0919                     	;# 
  4292  091A                     	;# 
  4293  091B                     	;# 
  4294  091C                     	;# 
  4295  091D                     	;# 
  4296  091E                     	;# 
  4297  091F                     	;# 
  4298  0E0F                     	;# 
  4299  0E10                     	;# 
  4300  0E11                     	;# 
  4301  0E12                     	;# 
  4302  0E13                     	;# 
  4303  0E14                     	;# 
  4304  0E15                     	;# 
  4305  0E16                     	;# 
  4306  0E17                     	;# 
  4307  0E18                     	;# 
  4308  0E19                     	;# 
  4309  0E1A                     	;# 
  4310  0E1B                     	;# 
  4311  0E1C                     	;# 
  4312  0E1D                     	;# 
  4313  0E1E                     	;# 
  4314  0E1F                     	;# 
  4315  0E20                     	;# 
  4316  0E21                     	;# 
  4317  0E22                     	;# 
  4318  0E24                     	;# 
  4319  0E25                     	;# 
  4320  0E28                     	;# 
  4321  0E29                     	;# 
  4322  0E2A                     	;# 
  4323  0E2B                     	;# 
  4324  0E2C                     	;# 
  4325  0E2D                     	;# 
  4326  0E2E                     	;# 
  4327  0E2F                     	;# 
  4328  0E90                     	;# 
  4329  0E91                     	;# 
  4330  0E92                     	;# 
  4331  0E94                     	;# 
  4332  0E95                     	;# 
  4333  0E9C                     	;# 
  4334  0E9D                     	;# 
  4335  0E9E                     	;# 
  4336  0E9F                     	;# 
  4337  0EA0                     	;# 
  4338  0EA1                     	;# 
  4339  0EA2                     	;# 
  4340  0EA3                     	;# 
  4341  0EA4                     	;# 
  4342  0EA5                     	;# 
  4343  0EA6                     	;# 
  4344  0EA7                     	;# 
  4345  0F0F                     	;# 
  4346  0F10                     	;# 
  4347  0F11                     	;# 
  4348  0F12                     	;# 
  4349  0F13                     	;# 
  4350  0F14                     	;# 
  4351  0F15                     	;# 
  4352  0F16                     	;# 
  4353  0F17                     	;# 
  4354  0F18                     	;# 
  4355  0F19                     	;# 
  4356  0F1A                     	;# 
  4357  0F1B                     	;# 
  4358  0F1C                     	;# 
  4359  0F1D                     	;# 
  4360  0F1E                     	;# 
  4361  0F1F                     	;# 
  4362  0F20                     	;# 
  4363  0F21                     	;# 
  4364  0F22                     	;# 
  4365  0F23                     	;# 
  4366  0F24                     	;# 
  4367  0F25                     	;# 
  4368  0F26                     	;# 
  4369  0F27                     	;# 
  4370  0F28                     	;# 
  4371  0F29                     	;# 
  4372  0F2A                     	;# 
  4373  0F2B                     	;# 
  4374  0F2C                     	;# 
  4375  0F2D                     	;# 
  4376  0F2E                     	;# 
  4377  0F2F                     	;# 
  4378  0F30                     	;# 
  4379  0F31                     	;# 
  4380  0F32                     	;# 
  4381  0F33                     	;# 
  4382  0F34                     	;# 
  4383  0F35                     	;# 
  4384  0F36                     	;# 
  4385  0F37                     	;# 
  4386  0FE4                     	;# 
  4387  0FE5                     	;# 
  4388  0FE6                     	;# 
  4389  0FE7                     	;# 
  4390  0FE8                     	;# 
  4391  0FE9                     	;# 
  4392  0FEA                     	;# 
  4393  0FEB                     	;# 
  4394  0FED                     	;# 
  4395  0FEE                     	;# 
  4396  0FEF                     	;# 
  4397  0000                     	;# 
  4398  0001                     	;# 
  4399  0002                     	;# 
  4400  0003                     	;# 
  4401  0004                     	;# 
  4402  0005                     	;# 
  4403  0006                     	;# 
  4404  0007                     	;# 
  4405  0008                     	;# 
  4406  0009                     	;# 
  4407  000A                     	;# 
  4408  000B                     	;# 
  4409  000C                     	;# 
  4410  000D                     	;# 
  4411  000E                     	;# 
  4412  0010                     	;# 
  4413  0011                     	;# 
  4414  0012                     	;# 
  4415  0013                     	;# 
  4416  0014                     	;# 
  4417  0015                     	;# 
  4418  0015                     	;# 
  4419  0016                     	;# 
  4420  0016                     	;# 
  4421  0017                     	;# 
  4422  0018                     	;# 
  4423  0019                     	;# 
  4424  0019                     	;# 
  4425  001A                     	;# 
  4426  001B                     	;# 
  4427  001C                     	;# 
  4428  001D                     	;# 
  4429  001E                     	;# 
  4430  001F                     	;# 
  4431  008C                     	;# 
  4432  008D                     	;# 
  4433  008E                     	;# 
  4434  0090                     	;# 
  4435  0091                     	;# 
  4436  0092                     	;# 
  4437  0093                     	;# 
  4438  0094                     	;# 
  4439  0097                     	;# 
  4440  009B                     	;# 
  4441  009B                     	;# 
  4442  009C                     	;# 
  4443  009D                     	;# 
  4444  009E                     	;# 
  4445  009F                     	;# 
  4446  010C                     	;# 
  4447  010D                     	;# 
  4448  010E                     	;# 
  4449  0111                     	;# 
  4450  0112                     	;# 
  4451  0113                     	;# 
  4452  0114                     	;# 
  4453  0115                     	;# 
  4454  0116                     	;# 
  4455  0117                     	;# 
  4456  0118                     	;# 
  4457  0119                     	;# 
  4458  018C                     	;# 
  4459  018D                     	;# 
  4460  018E                     	;# 
  4461  0197                     	;# 
  4462  0199                     	;# 
  4463  0199                     	;# 
  4464  0199                     	;# 
  4465  019A                     	;# 
  4466  019A                     	;# 
  4467  019A                     	;# 
  4468  019B                     	;# 
  4469  019B                     	;# 
  4470  019B                     	;# 
  4471  019B                     	;# 
  4472  019B                     	;# 
  4473  019C                     	;# 
  4474  019C                     	;# 
  4475  019C                     	;# 
  4476  019D                     	;# 
  4477  019D                     	;# 
  4478  019D                     	;# 
  4479  019E                     	;# 
  4480  019E                     	;# 
  4481  019E                     	;# 
  4482  019F                     	;# 
  4483  019F                     	;# 
  4484  019F                     	;# 
  4485  019F                     	;# 
  4486  019F                     	;# 
  4487  020C                     	;# 
  4488  020D                     	;# 
  4489  020E                     	;# 
  4490  0211                     	;# 
  4491  0211                     	;# 
  4492  0212                     	;# 
  4493  0212                     	;# 
  4494  0213                     	;# 
  4495  0213                     	;# 
  4496  0214                     	;# 
  4497  0214                     	;# 
  4498  0215                     	;# 
  4499  0215                     	;# 
  4500  0215                     	;# 
  4501  0215                     	;# 
  4502  0216                     	;# 
  4503  0216                     	;# 
  4504  0217                     	;# 
  4505  0217                     	;# 
  4506  0219                     	;# 
  4507  021A                     	;# 
  4508  021B                     	;# 
  4509  021C                     	;# 
  4510  021D                     	;# 
  4511  021D                     	;# 
  4512  021E                     	;# 
  4513  021F                     	;# 
  4514  028C                     	;# 
  4515  028D                     	;# 
  4516  028E                     	;# 
  4517  0291                     	;# 
  4518  0291                     	;# 
  4519  0292                     	;# 
  4520  0293                     	;# 
  4521  0294                     	;# 
  4522  0295                     	;# 
  4523  0295                     	;# 
  4524  0296                     	;# 
  4525  0297                     	;# 
  4526  0298                     	;# 
  4527  029F                     	;# 
  4528  030C                     	;# 
  4529  030D                     	;# 
  4530  030E                     	;# 
  4531  0311                     	;# 
  4532  0311                     	;# 
  4533  0312                     	;# 
  4534  0313                     	;# 
  4535  0314                     	;# 
  4536  0315                     	;# 
  4537  0315                     	;# 
  4538  0316                     	;# 
  4539  0317                     	;# 
  4540  0318                     	;# 
  4541  038C                     	;# 
  4542  038D                     	;# 
  4543  038E                     	;# 
  4544  0391                     	;# 
  4545  0392                     	;# 
  4546  0393                     	;# 
  4547  0394                     	;# 
  4548  0395                     	;# 
  4549  0396                     	;# 
  4550  0397                     	;# 
  4551  0398                     	;# 
  4552  0399                     	;# 
  4553  039A                     	;# 
  4554  039C                     	;# 
  4555  039D                     	;# 
  4556  039E                     	;# 
  4557  039F                     	;# 
  4558  0411                     	;# 
  4559  0411                     	;# 
  4560  0412                     	;# 
  4561  0413                     	;# 
  4562  0414                     	;# 
  4563  0415                     	;# 
  4564  0416                     	;# 
  4565  0417                     	;# 
  4566  0418                     	;# 
  4567  0418                     	;# 
  4568  0419                     	;# 
  4569  041A                     	;# 
  4570  041B                     	;# 
  4571  041C                     	;# 
  4572  041D                     	;# 
  4573  041E                     	;# 
  4574  041F                     	;# 
  4575  0498                     	;# 
  4576  0498                     	;# 
  4577  0499                     	;# 
  4578  049A                     	;# 
  4579  049B                     	;# 
  4580  049B                     	;# 
  4581  049C                     	;# 
  4582  049D                     	;# 
  4583  049E                     	;# 
  4584  049F                     	;# 
  4585  0617                     	;# 
  4586  0618                     	;# 
  4587  0619                     	;# 
  4588  0619                     	;# 
  4589  061A                     	;# 
  4590  061B                     	;# 
  4591  061C                     	;# 
  4592  061C                     	;# 
  4593  061F                     	;# 
  4594  0691                     	;# 
  4595  0692                     	;# 
  4596  0693                     	;# 
  4597  0694                     	;# 
  4598  0695                     	;# 
  4599  0696                     	;# 
  4600  0697                     	;# 
  4601  0698                     	;# 
  4602  0699                     	;# 
  4603  0711                     	;# 
  4604  0712                     	;# 
  4605  0713                     	;# 
  4606  0714                     	;# 
  4607  0715                     	;# 
  4608  0716                     	;# 
  4609  0717                     	;# 
  4610  0718                     	;# 
  4611  0719                     	;# 
  4612  0891                     	;# 
  4613  0891                     	;# 
  4614  0891                     	;# 
  4615  0891                     	;# 
  4616  0891                     	;# 
  4617  0891                     	;# 
  4618  0892                     	;# 
  4619  0892                     	;# 
  4620  0892                     	;# 
  4621  0893                     	;# 
  4622  0893                     	;# 
  4623  0893                     	;# 
  4624  0893                     	;# 
  4625  0893                     	;# 
  4626  0893                     	;# 
  4627  0894                     	;# 
  4628  0894                     	;# 
  4629  0894                     	;# 
  4630  0895                     	;# 
  4631  0895                     	;# 
  4632  0895                     	;# 
  4633  0896                     	;# 
  4634  0896                     	;# 
  4635  0896                     	;# 
  4636  089B                     	;# 
  4637  0911                     	;# 
  4638  0912                     	;# 
  4639  0913                     	;# 
  4640  0914                     	;# 
  4641  0915                     	;# 
  4642  0916                     	;# 
  4643  0918                     	;# 
  4644  0919                     	;# 
  4645  091A                     	;# 
  4646  091B                     	;# 
  4647  091C                     	;# 
  4648  091D                     	;# 
  4649  091E                     	;# 
  4650  091F                     	;# 
  4651  0E0F                     	;# 
  4652  0E10                     	;# 
  4653  0E11                     	;# 
  4654  0E12                     	;# 
  4655  0E13                     	;# 
  4656  0E14                     	;# 
  4657  0E15                     	;# 
  4658  0E16                     	;# 
  4659  0E17                     	;# 
  4660  0E18                     	;# 
  4661  0E19                     	;# 
  4662  0E1A                     	;# 
  4663  0E1B                     	;# 
  4664  0E1C                     	;# 
  4665  0E1D                     	;# 
  4666  0E1E                     	;# 
  4667  0E1F                     	;# 
  4668  0E20                     	;# 
  4669  0E21                     	;# 
  4670  0E22                     	;# 
  4671  0E24                     	;# 
  4672  0E25                     	;# 
  4673  0E28                     	;# 
  4674  0E29                     	;# 
  4675  0E2A                     	;# 
  4676  0E2B                     	;# 
  4677  0E2C                     	;# 
  4678  0E2D                     	;# 
  4679  0E2E                     	;# 
  4680  0E2F                     	;# 
  4681  0E90                     	;# 
  4682  0E91                     	;# 
  4683  0E92                     	;# 
  4684  0E94                     	;# 
  4685  0E95                     	;# 
  4686  0E9C                     	;# 
  4687  0E9D                     	;# 
  4688  0E9E                     	;# 
  4689  0E9F                     	;# 
  4690  0EA0                     	;# 
  4691  0EA1                     	;# 
  4692  0EA2                     	;# 
  4693  0EA3                     	;# 
  4694  0EA4                     	;# 
  4695  0EA5                     	;# 
  4696  0EA6                     	;# 
  4697  0EA7                     	;# 
  4698  0F0F                     	;# 
  4699  0F10                     	;# 
  4700  0F11                     	;# 
  4701  0F12                     	;# 
  4702  0F13                     	;# 
  4703  0F14                     	;# 
  4704  0F15                     	;# 
  4705  0F16                     	;# 
  4706  0F17                     	;# 
  4707  0F18                     	;# 
  4708  0F19                     	;# 
  4709  0F1A                     	;# 
  4710  0F1B                     	;# 
  4711  0F1C                     	;# 
  4712  0F1D                     	;# 
  4713  0F1E                     	;# 
  4714  0F1F                     	;# 
  4715  0F20                     	;# 
  4716  0F21                     	;# 
  4717  0F22                     	;# 
  4718  0F23                     	;# 
  4719  0F24                     	;# 
  4720  0F25                     	;# 
  4721  0F26                     	;# 
  4722  0F27                     	;# 
  4723  0F28                     	;# 
  4724  0F29                     	;# 
  4725  0F2A                     	;# 
  4726  0F2B                     	;# 
  4727  0F2C                     	;# 
  4728  0F2D                     	;# 
  4729  0F2E                     	;# 
  4730  0F2F                     	;# 
  4731  0F30                     	;# 
  4732  0F31                     	;# 
  4733  0F32                     	;# 
  4734  0F33                     	;# 
  4735  0F34                     	;# 
  4736  0F35                     	;# 
  4737  0F36                     	;# 
  4738  0F37                     	;# 
  4739  0FE4                     	;# 
  4740  0FE5                     	;# 
  4741  0FE6                     	;# 
  4742  0FE7                     	;# 
  4743  0FE8                     	;# 
  4744  0FE9                     	;# 
  4745  0FEA                     	;# 
  4746  0FEB                     	;# 
  4747  0FED                     	;# 
  4748  0FEE                     	;# 
  4749  0FEF                     	;# 
  4750                           
  4751                           	psect	idataCOMMON
  4752  07FF                     __pidataCOMMON:	
  4753                           
  4754                           ;initializer for _val
  4755  07FF  3404               	retlw	4
  4756                           
  4757                           	psect	idataBANK0
  4758  0987                     __pidataBANK0:	
  4759                           
  4760                           ;initializer for _start
  4761  0987  3401               	retlw	1
  4762                           
  4763                           	psect	idataBANK2
  4764  0A5E                     __pidataBANK2:	
  4765                           
  4766                           ;initializer for _names
  4767  0A5E  343D               	retlw	low (STR_1| (0+32768))
  4768  0A5F  3490               	retlw	high (STR_1| (0+32768))
  4769  0A60  3430               	retlw	low (STR_2| (0+32768))
  4770  0A61  3490               	retlw	high (STR_2| (0+32768))
  4771  0A62  3420               	retlw	low (STR_3| (0+32768))
  4772  0A63  3490               	retlw	high (STR_3| (0+32768))
  4773  0A64  3449               	retlw	low (STR_4| (0+32768))
  4774  0A65  3490               	retlw	high (STR_4| (0+32768))
  4775                           
  4776                           	psect	stringtext1
  4777  1000                     __pstringtext1:	
  4778  1000                     _fsmStateTable:	
  4779  1000  34F5               	retlw	low _do_I2C_IDLE
  4780  1001  3409               	retlw	high _do_I2C_IDLE
  4781  1002  3436               	retlw	low _do_I2C_SEND_ADR_READ
  4782  1003  340A               	retlw	high _do_I2C_SEND_ADR_READ
  4783  1004  3419               	retlw	low _do_I2C_SEND_ADR_WRITE
  4784  1005  340A               	retlw	high _do_I2C_SEND_ADR_WRITE
  4785  1006  3412               	retlw	low _do_I2C_TX
  4786  1007  340F               	retlw	high _do_I2C_TX
  4787  1008  3482               	retlw	low _do_I2C_RX
  4788  1009  340E               	retlw	high _do_I2C_RX
  4789  100A  34FA               	retlw	low _do_I2C_RCEN
  4790  100B  3409               	retlw	high _do_I2C_RCEN
  4791  100C  3485               	retlw	low _do_I2C_TX_EMPTY
  4792  100D  340D               	retlw	high _do_I2C_TX_EMPTY
  4793  100E  34C8               	retlw	low _do_I2C_SEND_RESTART_READ
  4794  100F  3409               	retlw	high _do_I2C_SEND_RESTART_READ
  4795  1010  34CC               	retlw	low _do_I2C_SEND_RESTART_WRITE
  4796  1011  3409               	retlw	high _do_I2C_SEND_RESTART_WRITE
  4797  1012  34D0               	retlw	low _do_I2C_SEND_RESTART
  4798  1013  3409               	retlw	high _do_I2C_SEND_RESTART
  4799  1014  34D4               	retlw	low _do_I2C_SEND_STOP
  4800  1015  3409               	retlw	high _do_I2C_SEND_STOP
  4801  1016  34D8               	retlw	low _do_I2C_DO_ACK
  4802  1017  3409               	retlw	high _do_I2C_DO_ACK
  4803  1018  34DC               	retlw	low _do_I2C_DO_NACK_STOP
  4804  1019  3409               	retlw	high _do_I2C_DO_NACK_STOP
  4805  101A  34E0               	retlw	low _do_I2C_DO_NACK_RESTART
  4806  101B  3409               	retlw	high _do_I2C_DO_NACK_RESTART
  4807  101C  3412               	retlw	low _do_I2C_RESET
  4808  101D  340A               	retlw	high _do_I2C_RESET
  4809  101E  3404               	retlw	low _do_I2C_DO_ADDRESS_NACK
  4810  101F  340D               	retlw	high _do_I2C_DO_ADDRESS_NACK
  4811  1020                     __end_of_fsmStateTable:	
  4812  000E                     _PORTCbits	set	14
  4813  001F                     _T2CONbits	set	31
  4814  001F                     _T2CON	set	31
  4815  001D                     _TMR2	set	29
  4816  001E                     _PR2	set	30
  4817  0011                     _PIR1bits	set	17
  4818  000B                     _INTCONbits	set	11
  4819  0010                     _PIR0bits	set	16
  4820  009D                     _ADCON0bits	set	157
  4821  009C                     _ADRESH	set	156
  4822  009B                     _ADRESL	set	155
  4823  009F                     _ADACT	set	159
  4824  009E                     _ADCON1	set	158
  4825  009D                     _ADCON0	set	157
  4826  008E                     _TRISC	set	142
  4827  008D                     _TRISB	set	141
  4828  008C                     _TRISA	set	140
  4829  0097                     _WDTCON	set	151
  4830  0091                     _PIE1bits	set	145
  4831  0090                     _PIE0bits	set	144
  4832  010E                     _LATCbits	set	270
  4833  010E                     _LATC	set	270
  4834  010D                     _LATB	set	269
  4835  010C                     _LATA	set	268
  4836  018C                     _ANSELA	set	396
  4837  018D                     _ANSELB	set	397
  4838  018E                     _ANSELC	set	398
  4839  021C                     _SSP2STATbits	set	540
  4840  0219                     _SSP2BUF	set	537
  4841  021D                     _SSP2CON1bits	set	541
  4842  021A                     _SSP2ADD	set	538
  4843  021D                     _SSP2CON1	set	541
  4844  021C                     _SSP2STAT	set	540
  4845  0214                     _SSP1STATbits	set	532
  4846  0213                     _SSP1MSK	set	531
  4847  0211                     _SSP1BUF	set	529
  4848  0216                     _SSP1CON2bits	set	534
  4849  0212                     _SSP1ADD	set	530
  4850  0216                     _SSP1CON2	set	534
  4851  0215                     _SSP1CON1	set	533
  4852  0214                     _SSP1STAT	set	532
  4853  0215                     _SSP1CON1bits	set	533
  4854  020E                     _WPUC	set	526
  4855  020C                     _WPUA	set	524
  4856  020D                     _WPUB	set	525
  4857  0293                     _CCP1CONbits	set	659
  4858  029F                     _CCPTMRSbits	set	671
  4859  0291                     _CCPR1L	set	657
  4860  0292                     _CCPR1H	set	658
  4861  0293                     _CCP1CON	set	659
  4862  028E                     _ODCONC	set	654
  4863  028D                     _ODCONB	set	653
  4864  028C                     _ODCONA	set	652
  4865  030E                     _SLRCONC	set	782
  4866  030D                     _SLRCONB	set	781
  4867  030C                     _SLRCONA	set	780
  4868  0916                     _PMD5	set	2326
  4869  0915                     _PMD4	set	2325
  4870  0914                     _PMD3	set	2324
  4871  0913                     _PMD2	set	2323
  4872  0912                     _PMD1	set	2322
  4873  0911                     _PMD0	set	2321
  4874  091E                     _OSCTUNE	set	2334
  4875  091F                     _OSCFRQ	set	2335
  4876  091D                     _OSCEN	set	2333
  4877  091B                     _OSCCON3	set	2331
  4878  0919                     _OSCCON1	set	2329
  4879  0E1D                     _SSP2CLKPPS	set	3613
  4880  0E21                     _SSP1DATPPS	set	3617
  4881  0E20                     _SSP1CLKPPS	set	3616
  4882  0E1E                     _SSP2DATPPS	set	3614
  4883  0EA6                     _RC6PPS	set	3750
  4884  0EA2                     _RC2PPS	set	3746
  4885  0E9D                     _RB5PPS	set	3741
  4886  0E9F                     _RB7PPS	set	3743
  4887  0E9E                     _RB6PPS	set	3742
  4888  1020                     STR_3:	
  4889  1020  3441               	retlw	65	;'A'
  4890  1021  346C               	retlw	108	;'l'
  4891  1022  3465               	retlw	101	;'e'
  4892  1023  3478               	retlw	120	;'x'
  4893  1024  3461               	retlw	97	;'a'
  4894  1025  346E               	retlw	110	;'n'
  4895  1026  3464               	retlw	100	;'d'
  4896  1027  3472               	retlw	114	;'r'
  4897  1028  3461               	retlw	97	;'a'
  4898  1029  3420               	retlw	32	;' '
  4899  102A  3446               	retlw	70	;'F'
  4900  102B  3479               	retlw	121	;'y'
  4901  102C  3466               	retlw	102	;'f'
  4902  102D  3466               	retlw	102	;'f'
  4903  102E  3465               	retlw	101	;'e'
  4904  102F  3400               	retlw	0
  4905                           
  4906                           	psect	stringtext2
  4907  1030                     __pstringtext2:	
  4908  1030                     STR_2:	
  4909  1030  344E               	retlw	78	;'N'
  4910  1031  346F               	retlw	111	;'o'
  4911  1032  3465               	retlw	101	;'e'
  4912  1033  346C               	retlw	108	;'l'
  4913  1034  346C               	retlw	108	;'l'
  4914  1035  3465               	retlw	101	;'e'
  4915  1036  3420               	retlw	32	;' '
  4916  1037  3443               	retlw	67	;'C'
  4917  1038  3472               	retlw	114	;'r'
  4918  1039  3461               	retlw	97	;'a'
  4919  103A  346E               	retlw	110	;'n'
  4920  103B  3465               	retlw	101	;'e'
  4921  103C  3400               	retlw	0
  4922                           
  4923                           	psect	stringtext3
  4924  103D                     __pstringtext3:	
  4925  103D                     STR_1:	
  4926  103D  344A               	retlw	74	;'J'
  4927  103E  3475               	retlw	117	;'u'
  4928  103F  3473               	retlw	115	;'s'
  4929  1040  3474               	retlw	116	;'t'
  4930  1041  3469               	retlw	105	;'i'
  4931  1042  346E               	retlw	110	;'n'
  4932  1043  3420               	retlw	32	;' '
  4933  1044  3443               	retlw	67	;'C'
  4934  1045  3468               	retlw	104	;'h'
  4935  1046  3461               	retlw	97	;'a'
  4936  1047  346E               	retlw	110	;'n'
  4937  1048  3400               	retlw	0
  4938                           
  4939                           	psect	stringtext4
  4940  1049                     __pstringtext4:	
  4941  1049                     STR_4:	
  4942  1049  344A               	retlw	74	;'J'
  4943  104A  3465               	retlw	101	;'e'
  4944  104B  3466               	retlw	102	;'f'
  4945  104C  3466               	retlw	102	;'f'
  4946  104D  3420               	retlw	32	;' '
  4947  104E  3447               	retlw	71	;'G'
  4948  104F  3465               	retlw	101	;'e'
  4949  1050  3469               	retlw	105	;'i'
  4950  1051  3473               	retlw	115	;'s'
  4951  1052  3473               	retlw	115	;'s'
  4952  1053  3400               	retlw	0
  4953                           
  4954                           	psect	stringtext5
  4955  0000                     __pstringtext5:	
  4956                           
  4957                           ; #config settings
  4958  0000                     
  4959                           	psect	cinit
  4960  002D                     start_initialization:	
  4961  002D                     __initialization:	
  4962                           
  4963                           ; Initialize objects allocated to COMMON
  4964  002D  3187  27FF  3180   	fcall	__pidataCOMMON	;fetch initializer
  4965  0030  00FB               	movwf	__pdataCOMMON& (0+127)
  4966                           
  4967                           ; Initialize objects allocated to BANK0
  4968  0031  3189  2187  3180   	fcall	__pidataBANK0	;fetch initializer
  4969  0034  00EF               	movwf	__pdataBANK0& (0+127)
  4970                           
  4971                           ; Initialize objects allocated to BANK2
  4972  0035  305E               	movlw	low __pidataBANK2
  4973  0036  0084               	movwf	4
  4974  0037  308A               	movlw	(high __pidataBANK2)| (0+128)
  4975  0038  0085               	movwf	5
  4976  0039  3060               	movlw	low __pdataBANK2
  4977  003A  0086               	movwf	6
  4978  003B  3001               	movlw	high __pdataBANK2
  4979  003C  0087               	movwf	7
  4980  003D  3008               	movlw	8
  4981  003E  318A  220C  3180   	fcall	init_ram
  4982                           
  4983                           ; Clear objects allocated to COMMON
  4984  0041  01F6               	clrf	__pbssCOMMON& (0+127)
  4985  0042  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  4986  0043  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  4987  0044  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  4988  0045  01FA               	clrf	(__pbssCOMMON+4)& (0+127)
  4989                           
  4990                           ; Clear objects allocated to BANK0
  4991  0046  305C               	movlw	low __pbssBANK0
  4992  0047  0084               	movwf	4
  4993  0048  3000               	movlw	high __pbssBANK0
  4994  0049  0085               	movwf	5
  4995  004A  3013               	movlw	19
  4996  004B  318A  2206  3180   	fcall	clear_ram0
  4997                           
  4998                           ; Clear objects allocated to BANK1
  4999  004E  0021               	movlb	1	; select bank1
  5000  004F  01E0               	clrf	__pbssBANK1& (0+127)
  5001  0050  01E1               	clrf	(__pbssBANK1+1)& (0+127)
  5002  0051  01E2               	clrf	(__pbssBANK1+2)& (0+127)
  5003  0052  01E3               	clrf	(__pbssBANK1+3)& (0+127)
  5004                           
  5005                           ; Clear objects allocated to BANK2
  5006  0053  0022               	movlb	2	; select bank2
  5007  0054  01E8               	clrf	__pbssBANK2& (0+127)
  5008  0055  01E9               	clrf	(__pbssBANK2+1)& (0+127)
  5009                           
  5010                           ; Clear objects allocated to BANK3
  5011  0056  30A0               	movlw	low __pbssBANK3
  5012  0057  0084               	movwf	4
  5013  0058  3001               	movlw	high __pbssBANK3
  5014  0059  0085               	movwf	5
  5015  005A  301D               	movlw	29
  5016  005B  318A  2206  3180   	fcall	clear_ram0
  5017                           
  5018                           ; Clear objects allocated to BANK4
  5019  005E  3020               	movlw	low __pbssBANK4
  5020  005F  0084               	movwf	4
  5021  0060  3002               	movlw	high __pbssBANK4
  5022  0061  0085               	movwf	5
  5023  0062  3044               	movlw	68
  5024  0063  318A  2206         	fcall	clear_ram0
  5025  0065                     end_of_initialization:	
  5026                           ;End of C runtime variable initialization code
  5027                           
  5028  0065                     __end_of__initialization:	
  5029  0065  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  5030  0066  0020               	movlb	0
  5031  0067  318D  2D5A         	ljmp	_main	;jump to C main() function
  5032                           
  5033                           	psect	bssCOMMON
  5034  0076                     __pbssCOMMON:	
  5035  0076                     _b_i2c_error_flag:	
  5036  0076                     	ds	1
  5037  0077                     _handleGestureFlag:	
  5038  0077                     	ds	1
  5039  0078                     _state:	
  5040  0078                     	ds	1
  5041  0079                     _adcResult:	
  5042  0079                     	ds	1
  5043  007A                     _button:	
  5044  007A                     	ds	1
  5045                           
  5046                           	psect	dataCOMMON
  5047  007B                     __pdataCOMMON:	
  5048  007B                     _val:	
  5049  007B                     	ds	1
  5050                           
  5051                           	psect	bssBANK0
  5052  005C                     __pbssBANK0:	
  5053  005C                     _name:	
  5054  005C                     	ds	2
  5055  005E                     _gesture_state_:	
  5056  005E                     	ds	2
  5057  0060                     _gesture_near_count_:	
  5058  0060                     	ds	2
  5059  0062                     _gesture_lr_count_:	
  5060  0062                     	ds	2
  5061  0064                     _gesture_ud_count_:	
  5062  0064                     	ds	2
  5063  0066                     _gesture_lr_delta_:	
  5064  0066                     	ds	2
  5065  0068                     _gesture_ud_delta_:	
  5066  0068                     	ds	2
  5067  006A                     _i2c1_driver_i2cISR:	
  5068  006A                     	ds	2
  5069  006C                     _i2c1_driver_busCollisionISR:	
  5070  006C                     	ds	2
  5071  006E                     _printed:	
  5072  006E                     	ds	1
  5073                           
  5074                           	psect	dataBANK0
  5075  006F                     __pdataBANK0:	
  5076  006F                     _start:	
  5077  006F                     	ds	1
  5078                           
  5079                           	psect	bssBANK1
  5080  00E0                     __pbssBANK1:	
  5081  00E0                     _adcResult2:	
  5082  00E0                     	ds	2
  5083  00E2                     _gesture_far_count_:	
  5084  00E2                     	ds	2
  5085                           
  5086                           	psect	bssBANK2
  5087  0168                     __pbssBANK2:	
  5088  0168                     _gesture_motion_:	
  5089  0168                     	ds	2
  5090                           
  5091                           	psect	dataBANK2
  5092  0160                     __pdataBANK2:	
  5093  0160                     _names:	
  5094  0160                     	ds	8
  5095                           
  5096                           	psect	bssBANK3
  5097  01A0                     __pbssBANK3:	
  5098  01A0                     _i2c_status:	
  5099  01A0                     	ds	29
  5100                           
  5101                           	psect	bssBANK4
  5102  0220                     __pbssBANK4:	
  5103  0220                     _gesture_data_:	
  5104  0220                     	ds	68
  5105                           
  5106                           	psect	inittext
  5107  0A0C                     init_ram:	
  5108  0A0C  00FE               	movwf	126
  5109  0A0D                     initloop:	
  5110  0A0D  0012               	moviw fsr0++
  5111  0A0E  001E               	movwi fsr1++
  5112  0A0F  0BFE               	decfsz	126,f
  5113  0A10  2A0D               	goto	initloop
  5114  0A11  3400               	retlw	0
  5115                           
  5116                           	psect	clrtext
  5117  0A06                     clear_ram0:	
  5118                           ;	Called with FSR0 containing the base address, and
  5119                           ;	WREG with the size to clear
  5120                           
  5121  0A06  0064               	clrwdt	;clear the watchdog before getting into this loop
  5122  0A07                     clrloop0:	
  5123  0A07  0180               	clrf	0	;clear RAM location pointed to by FSR
  5124  0A08  3101               	addfsr 0,1
  5125  0A09  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  5126  0A0A  2A07               	goto	clrloop0	;have we reached the end yet?
  5127  0A0B  3400               	retlw	0	;all done for this memory range, return
  5128                           
  5129                           	psect	cstackBANK2
  5130  0120                     __pcstackBANK2:	
  5131  0120                     readGesture@fifo_data:	
  5132                           
  5133                           ; 64 bytes @ 0x0
  5134  0120                     	ds	64
  5135                           
  5136                           	psect	cstackBANK1
  5137  00A0                     __pcstackBANK1:	
  5138  00A0                     readGesture@fifo_data2:	
  5139                           
  5140                           ; 64 bytes @ 0x0
  5141  00A0                     	ds	64
  5142                           
  5143                           	psect	cstackCOMMON
  5144  0070                     __pcstackCOMMON:	
  5145  0070                     ?_i2c1_driver_open:	
  5146  0070                     ?_i2c1_driver_isNACK:	
  5147                           ; 1 bit 
  5148                           
  5149  0070                     ?_i2c1_driver_isBufferFull:	
  5150                           ; 1 bit 
  5151                           
  5152  0070                     ?_returnStop:	
  5153                           ; 1 bit 
  5154                           
  5155  0070                     ?_returnReset:	
  5156                           ; 1 bytes @ 0x0
  5157                           
  5158  0070                     ?_mssp1_clearIRQ:	
  5159                           ; 1 bytes @ 0x0
  5160                           
  5161  0070                     ??_mssp1_clearIRQ:	
  5162                           ; 1 bytes @ 0x0
  5163                           
  5164  0070                     ?_i2c_busCollisionISR:	
  5165                           ; 1 bytes @ 0x0
  5166                           
  5167  0070                     ??_i2c_busCollisionISR:	
  5168                           ; 1 bytes @ 0x0
  5169                           
  5170  0070                     ?_i2c_ISR:	
  5171                           ; 1 bytes @ 0x0
  5172                           
  5173  0070                     ?_i2c1_driver_start:	
  5174                           ; 1 bytes @ 0x0
  5175                           
  5176  0070                     ?_i2c1_driver_resetBus:	
  5177                           ; 1 bytes @ 0x0
  5178                           
  5179  0070                     ??_i2c1_driver_resetBus:	
  5180                           ; 1 bytes @ 0x0
  5181                           
  5182  0070                     ?_i2c1_driver_restart:	
  5183                           ; 1 bytes @ 0x0
  5184                           
  5185  0070                     ?_i2c1_driver_stop:	
  5186                           ; 1 bytes @ 0x0
  5187                           
  5188  0070                     ?_i2c1_driver_TXData:	
  5189                           ; 1 bytes @ 0x0
  5190                           
  5191  0070                     ?_i2c1_driver_startRX:	
  5192                           ; 1 bytes @ 0x0
  5193                           
  5194  0070                     ?_i2c1_driver_sendACK:	
  5195                           ; 1 bytes @ 0x0
  5196                           
  5197  0070                     ??_i2c1_driver_sendACK:	
  5198                           ; 1 bytes @ 0x0
  5199                           
  5200  0070                     ?_i2c1_driver_sendNACK:	
  5201                           ; 1 bytes @ 0x0
  5202                           
  5203  0070                     ??_i2c1_driver_isNACK:	
  5204                           ; 1 bytes @ 0x0
  5205                           
  5206  0070                     ?_i2c1_driver_getRXData:	
  5207                           ; 1 bytes @ 0x0
  5208                           
  5209  0070                     ?_mssp1_setIRQ:	
  5210                           ; 1 bytes @ 0x0
  5211                           
  5212  0070                     ??_mssp1_setIRQ:	
  5213                           ; 1 bytes @ 0x0
  5214                           
  5215  0070                     ?_i2c1_driver_clearBusCollision:	
  5216                           ; 1 bytes @ 0x0
  5217                           
  5218  0070                     ??_i2c1_driver_clearBusCollision:	
  5219                           ; 1 bytes @ 0x0
  5220                           
  5221  0070                     ?_PIN_MANAGER_IOC:	
  5222                           ; 1 bytes @ 0x0
  5223                           
  5224  0070                     ??_PIN_MANAGER_IOC:	
  5225                           ; 1 bytes @ 0x0
  5226                           
  5227  0070                     ?_PMD_Initialize:	
  5228                           ; 1 bytes @ 0x0
  5229                           
  5230  0070                     ?_PIN_MANAGER_Initialize:	
  5231                           ; 1 bytes @ 0x0
  5232                           
  5233  0070                     ?_OSCILLATOR_Initialize:	
  5234                           ; 1 bytes @ 0x0
  5235                           
  5236  0070                     ?_WDT_Initialize:	
  5237                           ; 1 bytes @ 0x0
  5238                           
  5239  0070                     ?_SPI2_Initialize:	
  5240                           ; 1 bytes @ 0x0
  5241                           
  5242  0070                     ?_PWM1_Initialize:	
  5243                           ; 1 bytes @ 0x0
  5244                           
  5245  0070                     ?_ADC_Initialize:	
  5246                           ; 1 bytes @ 0x0
  5247                           
  5248  0070                     ?_TMR2_Initialize:	
  5249                           ; 1 bytes @ 0x0
  5250                           
  5251  0070                     ?_Display_Clear:	
  5252                           ; 1 bytes @ 0x0
  5253                           
  5254  0070                     ?_initialize:	
  5255                           ; 1 bytes @ 0x0
  5256                           
  5257  0070                     ?_enableGestureSensor:	
  5258                           ; 1 bytes @ 0x0
  5259                           
  5260  0070                     ?_isGestureAvailable:	
  5261                           ; 1 bytes @ 0x0
  5262                           
  5263  0070                     ?_handleGesture:	
  5264                           ; 1 bytes @ 0x0
  5265                           
  5266  0070                     ?_PWM_Output_Enable:	
  5267                           ; 1 bytes @ 0x0
  5268                           
  5269  0070                     ?_PWM_Output_Disable:	
  5270                           ; 1 bytes @ 0x0
  5271                           
  5272  0070                     ?_wireReadDataByte:	
  5273                           ; 1 bytes @ 0x0
  5274                           
  5275  0070                     ?_setLEDDrive:	
  5276                           ; 1 bytes @ 0x0
  5277                           
  5278  0070                     ?_setProximityGain:	
  5279                           ; 1 bytes @ 0x0
  5280                           
  5281  0070                     ?_setAmbientLightGain:	
  5282                           ; 1 bytes @ 0x0
  5283                           
  5284  0070                     ?_setProxIntLowThresh:	
  5285                           ; 1 bytes @ 0x0
  5286                           
  5287  0070                     ?_setProxIntHighThresh:	
  5288                           ; 1 bytes @ 0x0
  5289                           
  5290  0070                     ?_setGestureEnterThresh:	
  5291                           ; 1 bytes @ 0x0
  5292                           
  5293  0070                     ?_setGestureExitThresh:	
  5294                           ; 1 bytes @ 0x0
  5295                           
  5296  0070                     ?_setGestureGain:	
  5297                           ; 1 bytes @ 0x0
  5298                           
  5299  0070                     ?_setGestureLEDDrive:	
  5300                           ; 1 bytes @ 0x0
  5301                           
  5302  0070                     ?_setGestureWaitTime:	
  5303                           ; 1 bytes @ 0x0
  5304                           
  5305  0070                     ?_setGestureIntEnable:	
  5306                           ; 1 bytes @ 0x0
  5307                           
  5308  0070                     ?_getMode:	
  5309                           ; 1 bytes @ 0x0
  5310                           
  5311  0070                     ?_resetGestureParameters:	
  5312                           ; 1 bytes @ 0x0
  5313                           
  5314  0070                     ?_setLEDBoost:	
  5315                           ; 1 bytes @ 0x0
  5316                           
  5317  0070                     ?_setGestureMode:	
  5318                           ; 1 bytes @ 0x0
  5319                           
  5320  0070                     ?_enablePower:	
  5321                           ; 1 bytes @ 0x0
  5322                           
  5323  0070                     ?_processGestureData:	
  5324                           ; 1 bytes @ 0x0
  5325                           
  5326  0070                     ?_decodeGesture:	
  5327                           ; 1 bytes @ 0x0
  5328                           
  5329  0070                     ?_I2C_Start:	
  5330                           ; 1 bytes @ 0x0
  5331                           
  5332  0070                     ?_I2C_Write_Byte:	
  5333                           ; 1 bytes @ 0x0
  5334                           
  5335  0070                     ?_I2C_ReStart:	
  5336                           ; 1 bytes @ 0x0
  5337                           
  5338  0070                     ?_I2C_Read_Byte:	
  5339                           ; 1 bytes @ 0x0
  5340                           
  5341  0070                     ?_I2C_Send_NACK:	
  5342                           ; 1 bytes @ 0x0
  5343                           
  5344  0070                     ?_I2C_Stop:	
  5345                           ; 1 bytes @ 0x0
  5346                           
  5347  0070                     ?_do_I2C_RESET:	
  5348                           ; 1 bytes @ 0x0
  5349                           
  5350  0070                     ??_do_I2C_RESET:	
  5351                           ; 1 bytes @ 0x0
  5352                           
  5353  0070                     ?_do_I2C_IDLE:	
  5354                           ; 1 bytes @ 0x0
  5355                           
  5356  0070                     ??_do_I2C_IDLE:	
  5357                           ; 1 bytes @ 0x0
  5358                           
  5359  0070                     ?_do_I2C_SEND_RESTART_READ:	
  5360                           ; 1 bytes @ 0x0
  5361                           
  5362  0070                     ??_do_I2C_SEND_RESTART_READ:	
  5363                           ; 1 bytes @ 0x0
  5364                           
  5365  0070                     ?_do_I2C_SEND_RESTART_WRITE:	
  5366                           ; 1 bytes @ 0x0
  5367                           
  5368  0070                     ??_do_I2C_SEND_RESTART_WRITE:	
  5369                           ; 1 bytes @ 0x0
  5370                           
  5371  0070                     ?_do_I2C_SEND_RESTART:	
  5372                           ; 1 bytes @ 0x0
  5373                           
  5374  0070                     ??_do_I2C_SEND_RESTART:	
  5375                           ; 1 bytes @ 0x0
  5376                           
  5377  0070                     ?_do_I2C_SEND_STOP:	
  5378                           ; 1 bytes @ 0x0
  5379                           
  5380  0070                     ??_do_I2C_SEND_STOP:	
  5381                           ; 1 bytes @ 0x0
  5382                           
  5383  0070                     ?_do_I2C_SEND_ADR_READ:	
  5384                           ; 1 bytes @ 0x0
  5385                           
  5386  0070                     ??_do_I2C_SEND_ADR_READ:	
  5387                           ; 1 bytes @ 0x0
  5388                           
  5389  0070                     ?_do_I2C_SEND_ADR_WRITE:	
  5390                           ; 1 bytes @ 0x0
  5391                           
  5392  0070                     ??_do_I2C_SEND_ADR_WRITE:	
  5393                           ; 1 bytes @ 0x0
  5394                           
  5395  0070                     ?_do_I2C_RCEN:	
  5396                           ; 1 bytes @ 0x0
  5397                           
  5398  0070                     ??_do_I2C_RCEN:	
  5399                           ; 1 bytes @ 0x0
  5400                           
  5401  0070                     ?_do_I2C_DO_ACK:	
  5402                           ; 1 bytes @ 0x0
  5403                           
  5404  0070                     ??_do_I2C_DO_ACK:	
  5405                           ; 1 bytes @ 0x0
  5406                           
  5407  0070                     ?_do_I2C_DO_NACK_STOP:	
  5408                           ; 1 bytes @ 0x0
  5409                           
  5410  0070                     ??_do_I2C_DO_NACK_STOP:	
  5411                           ; 1 bytes @ 0x0
  5412                           
  5413  0070                     ?_do_I2C_DO_NACK_RESTART:	
  5414                           ; 1 bytes @ 0x0
  5415                           
  5416  0070                     ??_do_I2C_DO_NACK_RESTART:	
  5417                           ; 1 bytes @ 0x0
  5418                           
  5419  0070                     ?_do_I2C_DO_ADDRESS_NACK:	
  5420                           ; 1 bytes @ 0x0
  5421                           
  5422  0070                     ??_do_I2C_DO_ADDRESS_NACK:	
  5423                           ; 1 bytes @ 0x0
  5424                           
  5425  0070                     ?_do_I2C_TX:	
  5426                           ; 1 bytes @ 0x0
  5427                           
  5428  0070                     ??_do_I2C_TX:	
  5429                           ; 1 bytes @ 0x0
  5430                           
  5431  0070                     ?_do_I2C_RX:	
  5432                           ; 1 bytes @ 0x0
  5433                           
  5434  0070                     ??_do_I2C_RX:	
  5435                           ; 1 bytes @ 0x0
  5436                           
  5437  0070                     ?_do_I2C_TX_EMPTY:	
  5438                           ; 1 bytes @ 0x0
  5439                           
  5440  0070                     ??_do_I2C_TX_EMPTY:	
  5441                           ; 1 bytes @ 0x0
  5442                           
  5443  0070                     ?_INTERRUPT_InterruptManager:	
  5444                           ; 1 bytes @ 0x0
  5445                           
  5446  0070                     ?_SYSTEM_Initialize:	
  5447                           ; 1 bytes @ 0x0
  5448                           
  5449  0070                     ?_SPI2_Exchange8bit:	
  5450                           ; 1 bytes @ 0x0
  5451                           
  5452  0070                     ?_main:	
  5453                           ; 1 bytes @ 0x0
  5454                           
  5455  0070                     ?_SPI_Write:	
  5456                           ; 1 bytes @ 0x0
  5457                           
  5458  0070                     ?i1_i2c1_driver_restart:	
  5459                           ; 1 bytes @ 0x0
  5460                           
  5461  0070                     ??i1_i2c1_driver_restart:	
  5462                           ; 1 bytes @ 0x0
  5463                           
  5464  0070                     ?i1_i2c1_driver_stop:	
  5465                           ; 1 bytes @ 0x0
  5466                           
  5467  0070                     ??i1_i2c1_driver_stop:	
  5468                           ; 1 bytes @ 0x0
  5469                           
  5470  0070                     ?i1_i2c1_driver_startRX:	
  5471                           ; 1 bytes @ 0x0
  5472                           
  5473  0070                     ??i1_i2c1_driver_startRX:	
  5474                           ; 1 bytes @ 0x0
  5475                           
  5476  0070                     ?i1_i2c1_driver_getRXData:	
  5477                           ; 1 bytes @ 0x0
  5478                           
  5479  0070                     ??i1_i2c1_driver_getRXData:	
  5480                           ; 1 bytes @ 0x0
  5481                           
  5482  0070                     ?i1_i2c1_driver_TXData:	
  5483                           ; 1 bytes @ 0x0
  5484                           
  5485  0070                     ??i1_i2c1_driver_TXData:	
  5486                           ; 1 bytes @ 0x0
  5487                           
  5488  0070                     ?i1_i2c1_driver_sendNACK:	
  5489                           ; 1 bytes @ 0x0
  5490                           
  5491  0070                     ??i1_i2c1_driver_sendNACK:	
  5492                           ; 1 bytes @ 0x0
  5493                           
  5494  0070                     returnStop@p:	
  5495                           ; 1 bytes @ 0x0
  5496                           
  5497  0070                     returnReset@p:	
  5498                           ; 1 bytes @ 0x0
  5499                           
  5500  0070                     i1i2c1_driver_TXData@d:	
  5501                           ; 1 bytes @ 0x0
  5502                           
  5503                           
  5504                           ; 1 bytes @ 0x0
  5505  0070                     	ds	1
  5506  0071                     ??_returnStop:	
  5507  0071                     ??_returnReset:	
  5508                           ; 1 bytes @ 0x1
  5509                           
  5510                           
  5511                           ; 1 bytes @ 0x1
  5512  0071                     	ds	2
  5513  0073                     ??_i2c_ISR:	
  5514                           
  5515                           ; 1 bytes @ 0x3
  5516  0073                     	ds	3
  5517  0076                     ??_INTERRUPT_InterruptManager:	
  5518                           
  5519                           	psect	cstackBANK0
  5520  0020                     __pcstackBANK0:	
  5521                           ; 1 bytes @ 0x6
  5522                           
  5523  0020                     ??_i2c1_driver_open:	
  5524  0020                     ??_i2c1_driver_start:	
  5525                           ; 1 bytes @ 0x0
  5526                           
  5527  0020                     ??_i2c1_driver_restart:	
  5528                           ; 1 bytes @ 0x0
  5529                           
  5530  0020                     ??_i2c1_driver_stop:	
  5531                           ; 1 bytes @ 0x0
  5532                           
  5533  0020                     ??_i2c1_driver_TXData:	
  5534                           ; 1 bytes @ 0x0
  5535                           
  5536  0020                     ??_i2c1_driver_startRX:	
  5537                           ; 1 bytes @ 0x0
  5538                           
  5539  0020                     ??_i2c1_driver_sendNACK:	
  5540                           ; 1 bytes @ 0x0
  5541                           
  5542  0020                     ??_i2c1_driver_getRXData:	
  5543                           ; 1 bytes @ 0x0
  5544                           
  5545  0020                     ??_PMD_Initialize:	
  5546                           ; 1 bytes @ 0x0
  5547                           
  5548  0020                     ??_PIN_MANAGER_Initialize:	
  5549                           ; 1 bytes @ 0x0
  5550                           
  5551  0020                     ??_OSCILLATOR_Initialize:	
  5552                           ; 1 bytes @ 0x0
  5553                           
  5554  0020                     ??_WDT_Initialize:	
  5555                           ; 1 bytes @ 0x0
  5556                           
  5557  0020                     ??_SPI2_Initialize:	
  5558                           ; 1 bytes @ 0x0
  5559                           
  5560  0020                     ??_PWM1_Initialize:	
  5561                           ; 1 bytes @ 0x0
  5562                           
  5563  0020                     ??_ADC_Initialize:	
  5564                           ; 1 bytes @ 0x0
  5565                           
  5566  0020                     ??_TMR2_Initialize:	
  5567                           ; 1 bytes @ 0x0
  5568                           
  5569  0020                     ??_PWM_Output_Enable:	
  5570                           ; 1 bytes @ 0x0
  5571                           
  5572  0020                     ??_PWM_Output_Disable:	
  5573                           ; 1 bytes @ 0x0
  5574                           
  5575  0020                     ??_resetGestureParameters:	
  5576                           ; 1 bytes @ 0x0
  5577                           
  5578  0020                     ??_decodeGesture:	
  5579                           ; 1 bytes @ 0x0
  5580                           
  5581  0020                     ??_I2C_Start:	
  5582                           ; 1 bytes @ 0x0
  5583                           
  5584  0020                     ??_I2C_ReStart:	
  5585                           ; 1 bytes @ 0x0
  5586                           
  5587  0020                     ??_I2C_Send_NACK:	
  5588                           ; 1 bytes @ 0x0
  5589                           
  5590  0020                     ??_I2C_Stop:	
  5591                           ; 1 bytes @ 0x0
  5592                           
  5593  0020                     ??_SYSTEM_Initialize:	
  5594                           ; 1 bytes @ 0x0
  5595                           
  5596  0020                     ??_i2c1_driver_isBufferFull:	
  5597                           ; 1 bytes @ 0x0
  5598                           
  5599  0020                     ??_SPI2_Exchange8bit:	
  5600                           ; 1 bytes @ 0x0
  5601                           
  5602  0020                     ?_strlen:	
  5603                           ; 1 bytes @ 0x0
  5604                           
  5605  0020                     ?___wmul:	
  5606                           ; 2 bytes @ 0x0
  5607                           
  5608  0020                     i2c1_driver_TXData@d:	
  5609                           ; 2 bytes @ 0x0
  5610                           
  5611  0020                     SPI2_Exchange8bit@data:	
  5612                           ; 1 bytes @ 0x0
  5613                           
  5614  0020                     ___wmul@multiplier:	
  5615                           ; 1 bytes @ 0x0
  5616                           
  5617  0020                     strlen@s:	
  5618                           ; 2 bytes @ 0x0
  5619                           
  5620                           
  5621                           ; 2 bytes @ 0x0
  5622  0020                     	ds	1
  5623  0021                     ??_I2C_Write_Byte:	
  5624  0021                     ??_I2C_Read_Byte:	
  5625                           ; 1 bytes @ 0x1
  5626                           
  5627  0021                     ??_SPI_Write:	
  5628                           ; 1 bytes @ 0x1
  5629                           
  5630                           
  5631                           ; 1 bytes @ 0x1
  5632  0021                     	ds	1
  5633  0022                     ??_strlen:	
  5634  0022                     SPI_Write@incoming:	
  5635                           ; 1 bytes @ 0x2
  5636                           
  5637  0022                     _decodeGesture$1532:	
  5638                           ; 1 bytes @ 0x2
  5639                           
  5640  0022                     ___wmul@multiplicand:	
  5641                           ; 2 bytes @ 0x2
  5642                           
  5643                           
  5644                           ; 2 bytes @ 0x2
  5645  0022                     	ds	1
  5646  0023                     ??_Display_Clear:	
  5647  0023                     I2C_Write_Byte@Byte:	
  5648                           ; 1 bytes @ 0x3
  5649                           
  5650  0023                     strlen@a:	
  5651                           ; 1 bytes @ 0x3
  5652                           
  5653                           
  5654                           ; 2 bytes @ 0x3
  5655  0023                     	ds	1
  5656  0024                     ??___wmul:	
  5657  0024                     _decodeGesture$1533:	
  5658                           ; 1 bytes @ 0x4
  5659                           
  5660  0024                     I2C_Write_Byte@count:	
  5661                           ; 2 bytes @ 0x4
  5662                           
  5663  0024                     ___wmul@product:	
  5664                           ; 2 bytes @ 0x4
  5665                           
  5666                           
  5667                           ; 2 bytes @ 0x4
  5668  0024                     	ds	1
  5669  0025                     ?_Display_Name:	
  5670  0025                     Display_Name@string1:	
  5671                           ; 1 bytes @ 0x5
  5672                           
  5673                           
  5674                           ; 2 bytes @ 0x5
  5675  0025                     	ds	1
  5676  0026                     ??_wireReadDataByte:	
  5677  0026                     ?_wireWriteDataByte:	
  5678                           ; 1 bytes @ 0x6
  5679                           
  5680  0026                     ?_wireReadDataBlock:	
  5681                           ; 2 bytes @ 0x6
  5682                           
  5683  0026                     ?___awdiv:	
  5684                           ; 2 bytes @ 0x6
  5685                           
  5686  0026                     wireWriteDataByte@val:	
  5687                           ; 2 bytes @ 0x6
  5688                           
  5689  0026                     _decodeGesture$1534:	
  5690                           ; 1 bytes @ 0x6
  5691                           
  5692  0026                     wireReadDataBlock@val:	
  5693                           ; 2 bytes @ 0x6
  5694                           
  5695  0026                     ___awdiv@divisor:	
  5696                           ; 2 bytes @ 0x6
  5697                           
  5698                           
  5699                           ; 2 bytes @ 0x6
  5700  0026                     	ds	1
  5701  0027                     ??_Display_Name:	
  5702  0027                     wireReadDataByte@reg:	
  5703                           ; 1 bytes @ 0x7
  5704                           
  5705                           
  5706                           ; 1 bytes @ 0x7
  5707  0027                     	ds	1
  5708  0028                     wireReadDataByte@val:	
  5709  0028                     Display_Name@length:	
  5710                           ; 1 bytes @ 0x8
  5711                           
  5712  0028                     _decodeGesture$1535:	
  5713                           ; 2 bytes @ 0x8
  5714                           
  5715  0028                     wireReadDataBlock@len:	
  5716                           ; 2 bytes @ 0x8
  5717                           
  5718  0028                     ___awdiv@dividend:	
  5719                           ; 2 bytes @ 0x8
  5720                           
  5721                           
  5722                           ; 2 bytes @ 0x8
  5723  0028                     	ds	1
  5724  0029                     ??_isGestureAvailable:	
  5725  0029                     ??_wireWriteDataByte:	
  5726                           ; 1 bytes @ 0x9
  5727                           
  5728  0029                     ??_getMode:	
  5729                           ; 1 bytes @ 0x9
  5730                           
  5731  0029                     wireWriteDataByte@reg:	
  5732                           ; 1 bytes @ 0x9
  5733                           
  5734                           
  5735                           ; 1 bytes @ 0x9
  5736  0029                     	ds	1
  5737  002A                     ??_setLEDDrive:	
  5738  002A                     ??_setProximityGain:	
  5739                           ; 1 bytes @ 0xA
  5740                           
  5741  002A                     ??_setAmbientLightGain:	
  5742                           ; 1 bytes @ 0xA
  5743                           
  5744  002A                     ??_setProxIntLowThresh:	
  5745                           ; 1 bytes @ 0xA
  5746                           
  5747  002A                     ??_setProxIntHighThresh:	
  5748                           ; 1 bytes @ 0xA
  5749                           
  5750  002A                     ?_setLightIntLowThreshold:	
  5751                           ; 1 bytes @ 0xA
  5752                           
  5753  002A                     ?_setLightIntHighThreshold:	
  5754                           ; 1 bytes @ 0xA
  5755                           
  5756  002A                     ??_setGestureEnterThresh:	
  5757                           ; 1 bytes @ 0xA
  5758                           
  5759  002A                     ??_setGestureExitThresh:	
  5760                           ; 1 bytes @ 0xA
  5761                           
  5762  002A                     ??_setGestureGain:	
  5763                           ; 1 bytes @ 0xA
  5764                           
  5765  002A                     ??_setGestureLEDDrive:	
  5766                           ; 1 bytes @ 0xA
  5767                           
  5768  002A                     ??_setGestureWaitTime:	
  5769                           ; 1 bytes @ 0xA
  5770                           
  5771  002A                     ??_setGestureIntEnable:	
  5772                           ; 1 bytes @ 0xA
  5773                           
  5774  002A                     ??_setLEDBoost:	
  5775                           ; 1 bytes @ 0xA
  5776                           
  5777  002A                     ??_setGestureMode:	
  5778                           ; 1 bytes @ 0xA
  5779                           
  5780  002A                     ??_wireReadDataBlock:	
  5781                           ; 1 bytes @ 0xA
  5782                           
  5783  002A                     ??___awdiv:	
  5784                           ; 1 bytes @ 0xA
  5785                           
  5786  002A                     getMode@enable_value:	
  5787                           ; 1 bytes @ 0xA
  5788                           
  5789  002A                     isGestureAvailable@val:	
  5790                           ; 1 bytes @ 0xA
  5791                           
  5792  002A                     Display_Name@i:	
  5793                           ; 1 bytes @ 0xA
  5794                           
  5795  002A                     setLightIntLowThreshold@threshold:	
  5796                           ; 2 bytes @ 0xA
  5797                           
  5798  002A                     setLightIntHighThreshold@threshold:	
  5799                           ; 2 bytes @ 0xA
  5800                           
  5801  002A                     _decodeGesture$1536:	
  5802                           ; 2 bytes @ 0xA
  5803                           
  5804                           
  5805                           ; 2 bytes @ 0xA
  5806  002A                     	ds	1
  5807  002B                     ?_setMode:	
  5808  002B                     setMode@enable:	
  5809                           ; 1 bytes @ 0xB
  5810                           
  5811  002B                     setAmbientLightGain@drive:	
  5812                           ; 1 bytes @ 0xB
  5813                           
  5814  002B                     setProxIntLowThresh@threshold:	
  5815                           ; 1 bytes @ 0xB
  5816                           
  5817  002B                     setProxIntHighThresh@threshold:	
  5818                           ; 1 bytes @ 0xB
  5819                           
  5820  002B                     setGestureEnterThresh@threshold:	
  5821                           ; 1 bytes @ 0xB
  5822                           
  5823  002B                     setGestureExitThresh@threshold:	
  5824                           ; 1 bytes @ 0xB
  5825                           
  5826  002B                     setGestureWaitTime@time:	
  5827                           ; 1 bytes @ 0xB
  5828                           
  5829  002B                     setGestureIntEnable@val:	
  5830                           ; 1 bytes @ 0xB
  5831                           
  5832  002B                     setGestureMode@mode:	
  5833                           ; 1 bytes @ 0xB
  5834                           
  5835  002B                     ___awdiv@counter:	
  5836                           ; 1 bytes @ 0xB
  5837                           
  5838                           
  5839                           ; 1 bytes @ 0xB
  5840  002B                     	ds	1
  5841  002C                     ??_setMode:	
  5842  002C                     ??_setLightIntLowThreshold:	
  5843                           ; 1 bytes @ 0xC
  5844                           
  5845  002C                     ??_setLightIntHighThreshold:	
  5846                           ; 1 bytes @ 0xC
  5847                           
  5848  002C                     setLEDDrive@val:	
  5849                           ; 1 bytes @ 0xC
  5850                           
  5851  002C                     setProximityGain@val:	
  5852                           ; 1 bytes @ 0xC
  5853                           
  5854  002C                     setAmbientLightGain@val:	
  5855                           ; 1 bytes @ 0xC
  5856                           
  5857  002C                     setGestureGain@val:	
  5858                           ; 1 bytes @ 0xC
  5859                           
  5860  002C                     setGestureLEDDrive@val:	
  5861                           ; 1 bytes @ 0xC
  5862                           
  5863  002C                     setGestureWaitTime@val:	
  5864                           ; 1 bytes @ 0xC
  5865                           
  5866  002C                     setGestureIntEnable@enable:	
  5867                           ; 1 bytes @ 0xC
  5868                           
  5869  002C                     setLEDBoost@val:	
  5870                           ; 1 bytes @ 0xC
  5871                           
  5872  002C                     setGestureMode@val:	
  5873                           ; 1 bytes @ 0xC
  5874                           
  5875  002C                     ___awdiv@sign:	
  5876                           ; 1 bytes @ 0xC
  5877                           
  5878  002C                     _decodeGesture$1537:	
  5879                           ; 1 bytes @ 0xC
  5880                           
  5881                           
  5882                           ; 2 bytes @ 0xC
  5883  002C                     	ds	1
  5884  002D                     setLEDDrive@drive:	
  5885  002D                     setProximityGain@drive:	
  5886                           ; 1 bytes @ 0xD
  5887                           
  5888  002D                     setLightIntLowThreshold@val_low:	
  5889                           ; 1 bytes @ 0xD
  5890                           
  5891  002D                     setLightIntHighThreshold@val_low:	
  5892                           ; 1 bytes @ 0xD
  5893                           
  5894  002D                     setGestureGain@gain:	
  5895                           ; 1 bytes @ 0xD
  5896                           
  5897  002D                     setGestureLEDDrive@drive:	
  5898                           ; 1 bytes @ 0xD
  5899                           
  5900  002D                     setLEDBoost@boost:	
  5901                           ; 1 bytes @ 0xD
  5902                           
  5903  002D                     ___awdiv@quotient:	
  5904                           ; 1 bytes @ 0xD
  5905                           
  5906                           
  5907                           ; 2 bytes @ 0xD
  5908  002D                     	ds	1
  5909  002E                     setMode@reg_val:	
  5910  002E                     setLightIntLowThreshold@val_high:	
  5911                           ; 1 bytes @ 0xE
  5912                           
  5913  002E                     setLightIntHighThreshold@val_high:	
  5914                           ; 1 bytes @ 0xE
  5915                           
  5916  002E                     _decodeGesture$1538:	
  5917                           ; 1 bytes @ 0xE
  5918                           
  5919                           
  5920                           ; 2 bytes @ 0xE
  5921  002E                     	ds	1
  5922  002F                     ??_processGestureData:	
  5923  002F                     setMode@mode:	
  5924                           ; 1 bytes @ 0xF
  5925                           
  5926  002F                     wireReadDataBlock@reg:	
  5927                           ; 1 bytes @ 0xF
  5928                           
  5929                           
  5930                           ; 1 bytes @ 0xF
  5931  002F                     	ds	1
  5932  0030                     ??_initialize:	
  5933  0030                     ??_enableGestureSensor:	
  5934                           ; 1 bytes @ 0x10
  5935                           
  5936  0030                     ??_enablePower:	
  5937                           ; 1 bytes @ 0x10
  5938                           
  5939  0030                     wireReadDataBlock@j:	
  5940                           ; 1 bytes @ 0x10
  5941                           
  5942  0030                     _decodeGesture$1539:	
  5943                           ; 1 bytes @ 0x10
  5944                           
  5945                           
  5946                           ; 2 bytes @ 0x10
  5947  0030                     	ds	1
  5948  0031                     initialize@id:	
  5949  0031                     enableGestureSensor@interrupts:	
  5950                           ; 1 bytes @ 0x11
  5951                           
  5952  0031                     processGestureData@ud_ratio_first:	
  5953                           ; 1 bytes @ 0x11
  5954                           
  5955                           
  5956                           ; 2 bytes @ 0x11
  5957  0031                     	ds	2
  5958  0033                     processGestureData@lr_ratio_first:	
  5959                           
  5960                           ; 2 bytes @ 0x13
  5961  0033                     	ds	2
  5962  0035                     processGestureData@ud_ratio_last:	
  5963                           
  5964                           ; 2 bytes @ 0x15
  5965  0035                     	ds	2
  5966  0037                     processGestureData@lr_ratio_last:	
  5967                           
  5968                           ; 2 bytes @ 0x17
  5969  0037                     	ds	2
  5970  0039                     _processGestureData$1527:	
  5971                           
  5972                           ; 2 bytes @ 0x19
  5973  0039                     	ds	2
  5974  003B                     _processGestureData$1528:	
  5975                           
  5976                           ; 2 bytes @ 0x1B
  5977  003B                     	ds	2
  5978  003D                     _processGestureData$1529:	
  5979                           
  5980                           ; 2 bytes @ 0x1D
  5981  003D                     	ds	2
  5982  003F                     _processGestureData$1530:	
  5983                           
  5984                           ; 2 bytes @ 0x1F
  5985  003F                     	ds	2
  5986  0041                     processGestureData@u_last:	
  5987                           
  5988                           ; 1 bytes @ 0x21
  5989  0041                     	ds	1
  5990  0042                     processGestureData@d_last:	
  5991                           
  5992                           ; 1 bytes @ 0x22
  5993  0042                     	ds	1
  5994  0043                     processGestureData@l_last:	
  5995                           
  5996                           ; 1 bytes @ 0x23
  5997  0043                     	ds	1
  5998  0044                     processGestureData@r_last:	
  5999                           
  6000                           ; 1 bytes @ 0x24
  6001  0044                     	ds	1
  6002  0045                     processGestureData@u_first:	
  6003                           
  6004                           ; 1 bytes @ 0x25
  6005  0045                     	ds	1
  6006  0046                     processGestureData@d_first:	
  6007                           
  6008                           ; 1 bytes @ 0x26
  6009  0046                     	ds	1
  6010  0047                     processGestureData@l_first:	
  6011                           
  6012                           ; 1 bytes @ 0x27
  6013  0047                     	ds	1
  6014  0048                     processGestureData@r_first:	
  6015                           
  6016                           ; 1 bytes @ 0x28
  6017  0048                     	ds	1
  6018  0049                     processGestureData@ud_delta:	
  6019                           
  6020                           ; 2 bytes @ 0x29
  6021  0049                     	ds	2
  6022  004B                     processGestureData@lr_delta:	
  6023                           
  6024                           ; 2 bytes @ 0x2B
  6025  004B                     	ds	2
  6026  004D                     processGestureData@i:	
  6027                           
  6028                           ; 2 bytes @ 0x2D
  6029  004D                     	ds	2
  6030  004F                     ?_readGesture:	
  6031                           
  6032                           ; 2 bytes @ 0x2F
  6033  004F                     	ds	2
  6034  0051                     ??_readGesture:	
  6035                           
  6036                           ; 1 bytes @ 0x31
  6037  0051                     	ds	2
  6038  0053                     readGesture@motion:	
  6039                           
  6040                           ; 2 bytes @ 0x33
  6041  0053                     	ds	2
  6042  0055                     readGesture@gstatus:	
  6043                           
  6044                           ; 1 bytes @ 0x35
  6045  0055                     	ds	1
  6046  0056                     readGesture@bytes_read:	
  6047                           
  6048                           ; 2 bytes @ 0x36
  6049  0056                     	ds	2
  6050  0058                     readGesture@fifo_level:	
  6051                           
  6052                           ; 1 bytes @ 0x38
  6053  0058                     	ds	1
  6054  0059                     readGesture@i:	
  6055                           
  6056                           ; 2 bytes @ 0x39
  6057  0059                     	ds	2
  6058  005B                     ??_handleGesture:	
  6059                           
  6060                           ; 1 bytes @ 0x3B
  6061  005B                     	ds	1
  6062  005C                     ??_main:	
  6063                           
  6064                           	psect	maintext
  6065  0D5A                     __pmaintext:	
  6066                           ; 1 bytes @ 0x3C
  6067 ;;
  6068 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  6069 ;;
  6070 ;; *************** function _main *****************
  6071 ;; Defined at:
  6072 ;;		line 111 in file "main.c"
  6073 ;; Parameters:    Size  Location     Type
  6074 ;;		None
  6075 ;; Auto vars:     Size  Location     Type
  6076 ;;  count           2    0        unsigned int 
  6077 ;;  temp            2    0        int 
  6078 ;;  startSystem     1    0        _Bool 
  6079 ;; Return value:  Size  Location     Type
  6080 ;;                  1    wreg      void 
  6081 ;; Registers used:
  6082 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6083 ;; Tracked objects:
  6084 ;;		On entry : B1F/0
  6085 ;;		On exit  : 0/0
  6086 ;;		Unchanged: 0/0
  6087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6088 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6089 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6090 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6091 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6092 ;;Total ram usage:        2 bytes
  6093 ;; Hardware stack levels required when called:   12
  6094 ;; This function calls:
  6095 ;;		_Display_Clear
  6096 ;;		_Display_Name
  6097 ;;		_SYSTEM_Initialize
  6098 ;;		_enableGestureSensor
  6099 ;;		_handleGesture
  6100 ;;		_initialize
  6101 ;;		_isGestureAvailable
  6102 ;; This function is called by:
  6103 ;;		Startup code after reset
  6104 ;; This function uses a non-reentrant model
  6105 ;;
  6106                           
  6107                           
  6108                           ;psect for function _main
  6109  0D5A                     _main:	
  6110                           
  6111                           ;main.c: 114:     SYSTEM_Initialize();
  6112                           
  6113                           ;incstack = 0
  6114                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6115  0D5A  318B  2331  318D   	fcall	_SYSTEM_Initialize
  6116                           
  6117                           ;main.c: 120:     (INTCONbits.GIE = 1);
  6118  0D5D  178B               	bsf	11,7	;volatile
  6119                           
  6120                           ;main.c: 123:     (INTCONbits.PEIE = 1);
  6121  0D5E  170B               	bsf	11,6	;volatile
  6122                           
  6123                           ;main.c: 126:     Display_Clear();
  6124  0D5F  318A  22AC  318D   	fcall	_Display_Clear
  6125                           
  6126                           ;main.c: 129:         if(initialize()){
  6127  0D62  3184  24C8  318D   	fcall	_initialize
  6128                           
  6129                           ;main.c: 132:         if(enableGestureSensor(0)){
  6130  0D65  3000               	movlw	0
  6131  0D66  3186  26D1  318D   	fcall	_enableGestureSensor
  6132  0D69                     l6998:	
  6133                           
  6134                           ;main.c: 140:     {;main.c: 146:             if(start == 1) {
  6135  0D69  0020               	movlb	0	; select bank0
  6136  0D6A  036F               	decf	_start,w
  6137  0D6B  1D03               	btfss	3,2
  6138  0D6C  2D7B               	goto	l7004
  6139                           
  6140                           ;main.c: 147:                 Display_Name(names[name]);
  6141  0D6D  355C               	lslf	_name,w
  6142  0D6E  3E60               	addlw	(low (_names| (0+256)))& (0+255)
  6143  0D6F  0086               	movwf	6
  6144  0D70  3001               	movlw	1	; select bank2/3
  6145  0D71  0087               	movwf	7
  6146  0D72  3F40               	moviw [0]fsr1
  6147  0D73  00A5               	movwf	Display_Name@string1
  6148  0D74  3F41               	moviw [1]fsr1
  6149  0D75  00A6               	movwf	Display_Name@string1+1
  6150  0D76  318F  27B0  318D   	fcall	_Display_Name
  6151                           
  6152                           ;main.c: 148:                 start = 0;
  6153  0D79  0020               	movlb	0	; select bank0
  6154  0D7A  01EF               	clrf	_start
  6155  0D7B                     l7004:	
  6156                           
  6157                           ;main.c: 152:             if( isGestureAvailable()){
  6158  0D7B  318A  22BD  318D   	fcall	_isGestureAvailable
  6159  0D7E  3A00               	xorlw	0
  6160  0D7F  1903               	skipnz
  6161  0D80  2D69               	goto	l6998
  6162                           
  6163                           ;main.c: 153:                 handleGesture();
  6164  0D81  3187  2735  318D   	fcall	_handleGesture
  6165  0D84  2D69               	goto	l6998
  6166  0D85                     __end_of_main:	
  6167                           
  6168                           	psect	text1
  6169  04C8                     __ptext1:	
  6170 ;; *************** function _initialize *****************
  6171 ;; Defined at:
  6172 ;;		line 20 in file "APDS9960.c"
  6173 ;; Parameters:    Size  Location     Type
  6174 ;;		None
  6175 ;; Auto vars:     Size  Location     Type
  6176 ;;  id              1   17[BANK0 ] unsigned char 
  6177 ;; Return value:  Size  Location     Type
  6178 ;;                  1    wreg      _Bool 
  6179 ;; Registers used:
  6180 ;;		wreg, status,2, status,0, pclath, cstack
  6181 ;; Tracked objects:
  6182 ;;		On entry : 0/0
  6183 ;;		On exit  : 0/0
  6184 ;;		Unchanged: 0/0
  6185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6186 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6187 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6188 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6189 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6190 ;;Total ram usage:        2 bytes
  6191 ;; Hardware stack levels used:    1
  6192 ;; Hardware stack levels required when called:   10
  6193 ;; This function calls:
  6194 ;;		_i2c1_driver_open
  6195 ;;		_setAmbientLightGain
  6196 ;;		_setGestureEnterThresh
  6197 ;;		_setGestureExitThresh
  6198 ;;		_setGestureGain
  6199 ;;		_setGestureIntEnable
  6200 ;;		_setGestureLEDDrive
  6201 ;;		_setGestureWaitTime
  6202 ;;		_setLEDDrive
  6203 ;;		_setLightIntHighThreshold
  6204 ;;		_setLightIntLowThreshold
  6205 ;;		_setMode
  6206 ;;		_setProxIntHighThresh
  6207 ;;		_setProxIntLowThresh
  6208 ;;		_setProximityGain
  6209 ;;		_wireReadDataByte
  6210 ;;		_wireWriteDataByte
  6211 ;; This function is called by:
  6212 ;;		_main
  6213 ;; This function uses a non-reentrant model
  6214 ;;
  6215                           
  6216                           
  6217                           ;psect for function _initialize
  6218  04C8                     _initialize:	
  6219                           
  6220                           ;APDS9960.c: 25:     i2c1_driver_open();
  6221                           
  6222                           ;incstack = 0
  6223                           ; Regs used in _initialize: [wreg+status,2+status,0+pclath+cstack]
  6224  04C8  318A  226F  3184   	fcall	_i2c1_driver_open
  6225                           
  6226                           ;APDS9960.c: 31:     id = wireReadDataByte(0x92);
  6227  04CB  3092               	movlw	146
  6228  04CC  318B  23CC  3184   	fcall	_wireReadDataByte
  6229  04CF  0020               	movlb	0	; select bank0
  6230  04D0  00B0               	movwf	??_initialize
  6231  04D1  0830               	movf	??_initialize,w
  6232  04D2  00B1               	movwf	initialize@id
  6233                           
  6234                           ;APDS9960.c: 33:     if( !(id == 0xAB ||id == 0x9C ) )
  6235  04D3  30AB               	movlw	171
  6236  04D4  0631               	xorwf	initialize@id,w
  6237  04D5  1903               	btfsc	3,2
  6238  04D6  2CDD               	goto	l6690
  6239  04D7  309C               	movlw	156
  6240  04D8  0631               	xorwf	initialize@id,w
  6241  04D9  1903               	btfsc	3,2
  6242  04DA  2CDD               	goto	l6690
  6243  04DB                     l6686:	
  6244                           
  6245                           ;APDS9960.c: 34:     {;APDS9960.c: 35:      return 0;
  6246  04DB  3000               	movlw	0
  6247  04DC  0008               	return
  6248  04DD                     l6690:	
  6249                           
  6250                           ;APDS9960.c: 39:     setMode(7, 0);
  6251  04DD  01AB               	clrf	setMode@enable
  6252  04DE  3007               	movlw	7
  6253  04DF  318F  2761  3184   	fcall	_setMode
  6254                           
  6255                           ;APDS9960.c: 41:     wireWriteDataByte(0x81, 219);
  6256  04E2  30DB               	movlw	219
  6257  04E3  0020               	movlb	0	; select bank0
  6258  04E4  00B0               	movwf	??_initialize
  6259  04E5  0830               	movf	??_initialize,w
  6260  04E6  00A6               	movwf	wireWriteDataByte@val
  6261  04E7  3081               	movlw	129
  6262  04E8  318B  2379  3184   	fcall	_wireWriteDataByte
  6263                           
  6264                           ;APDS9960.c: 42:     wireWriteDataByte(0x83, 246);
  6265  04EB  30F6               	movlw	246
  6266  04EC  0020               	movlb	0	; select bank0
  6267  04ED  00B0               	movwf	??_initialize
  6268  04EE  0830               	movf	??_initialize,w
  6269  04EF  00A6               	movwf	wireWriteDataByte@val
  6270  04F0  3083               	movlw	131
  6271  04F1  318B  2379  3184   	fcall	_wireWriteDataByte
  6272                           
  6273                           ;APDS9960.c: 43:     wireWriteDataByte(0x8E, 0x87);
  6274  04F4  3087               	movlw	135
  6275  04F5  0020               	movlb	0	; select bank0
  6276  04F6  00B0               	movwf	??_initialize
  6277  04F7  0830               	movf	??_initialize,w
  6278  04F8  00A6               	movwf	wireWriteDataByte@val
  6279  04F9  308E               	movlw	142
  6280  04FA  318B  2379  3184   	fcall	_wireWriteDataByte
  6281                           
  6282                           ;APDS9960.c: 44:     wireWriteDataByte(0x9D, 0) ;
  6283  04FD  0020               	movlb	0	; select bank0
  6284  04FE  01A6               	clrf	wireWriteDataByte@val
  6285  04FF  309D               	movlw	157
  6286  0500  318B  2379  3184   	fcall	_wireWriteDataByte
  6287                           
  6288                           ;APDS9960.c: 45:     wireWriteDataByte(0x9E, 0) ;
  6289  0503  0020               	movlb	0	; select bank0
  6290  0504  01A6               	clrf	wireWriteDataByte@val
  6291  0505  309E               	movlw	158
  6292  0506  318B  2379  3184   	fcall	_wireWriteDataByte
  6293                           
  6294                           ;APDS9960.c: 46:     wireWriteDataByte(0x8D, 0x60) ;
  6295  0509  3060               	movlw	96
  6296  050A  0020               	movlb	0	; select bank0
  6297  050B  00B0               	movwf	??_initialize
  6298  050C  0830               	movf	??_initialize,w
  6299  050D  00A6               	movwf	wireWriteDataByte@val
  6300  050E  308D               	movlw	141
  6301  050F  318B  2379  3184   	fcall	_wireWriteDataByte
  6302                           
  6303                           ;APDS9960.c: 47:     setLEDDrive(0);
  6304  0512  3000               	movlw	0
  6305  0513  318C  24B2  3184   	fcall	_setLEDDrive
  6306                           
  6307                           ;APDS9960.c: 48:     setProximityGain(2);
  6308  0516  3002               	movlw	2
  6309  0517  318C  24DB  3184   	fcall	_setProximityGain
  6310                           
  6311                           ;APDS9960.c: 49:     setAmbientLightGain(1);
  6312  051A  3001               	movlw	1
  6313  051B  3187  27E1  3184   	fcall	_setAmbientLightGain
  6314                           
  6315                           ;APDS9960.c: 51:     if( !setProxIntLowThresh(0) ) {
  6316  051E  3000               	movlw	0
  6317  051F  318B  2309  3184   	fcall	_setProxIntLowThresh
  6318  0522  3A00               	xorlw	0
  6319  0523  1903               	btfsc	3,2
  6320  0524  2CDB               	goto	l6686
  6321                           
  6322                           ;APDS9960.c: 54:     if( !setProxIntHighThresh(50) ) {
  6323  0525  3032               	movlw	50
  6324  0526  318A  22F6  3184   	fcall	_setProxIntHighThresh
  6325  0529  3A00               	xorlw	0
  6326  052A  1903               	btfsc	3,2
  6327  052B  2CDB               	goto	l6686
  6328                           
  6329                           ;APDS9960.c: 59:     if( !setLightIntLowThreshold(0xFFFF) ) {
  6330  052C  30FF               	movlw	255
  6331  052D  0020               	movlb	0	; select bank0
  6332  052E  00AA               	movwf	setLightIntLowThreshold@threshold
  6333  052F  30FF               	movlw	255
  6334  0530  00AB               	movwf	setLightIntLowThreshold@threshold+1
  6335  0531  318C  248B  3184   	fcall	_setLightIntLowThreshold
  6336  0534  3A00               	xorlw	0
  6337  0535  1903               	btfsc	3,2
  6338  0536  2CDB               	goto	l6686
  6339                           
  6340                           ;APDS9960.c: 62:     if( !setLightIntHighThreshold(0) ) {
  6341  0537  3000               	movlw	0
  6342  0538  0020               	movlb	0	; select bank0
  6343  0539  00AA               	movwf	setLightIntHighThreshold@threshold
  6344  053A  00AB               	movwf	setLightIntHighThreshold@threshold+1
  6345  053B  318C  2464  3184   	fcall	_setLightIntHighThreshold
  6346  053E  3A00               	xorlw	0
  6347  053F  1903               	btfsc	3,2
  6348  0540  2CDB               	goto	l6686
  6349                           
  6350                           ;APDS9960.c: 66:     if( !wireWriteDataByte(0x8C, 0x11) ) {
  6351  0541  3011               	movlw	17
  6352  0542  0020               	movlb	0	; select bank0
  6353  0543  00B0               	movwf	??_initialize
  6354  0544  0830               	movf	??_initialize,w
  6355  0545  00A6               	movwf	wireWriteDataByte@val
  6356  0546  308C               	movlw	140
  6357  0547  318B  2379  3184   	fcall	_wireWriteDataByte
  6358  054A  0020               	movlb	0	; select bank0
  6359  054B  0826               	movf	?_wireWriteDataByte,w
  6360  054C  0427               	iorwf	?_wireWriteDataByte+1,w
  6361  054D  1903               	btfsc	3,2
  6362  054E  2CDB               	goto	l6686
  6363                           
  6364                           ;APDS9960.c: 71:     if( !wireWriteDataByte(0x90, 0x01) ) {
  6365  054F  01A6               	clrf	wireWriteDataByte@val
  6366  0550  0AA6               	incf	wireWriteDataByte@val,f
  6367  0551  3090               	movlw	144
  6368  0552  318B  2379  3184   	fcall	_wireWriteDataByte
  6369  0555  0020               	movlb	0	; select bank0
  6370  0556  0826               	movf	?_wireWriteDataByte,w
  6371  0557  0427               	iorwf	?_wireWriteDataByte+1,w
  6372  0558  1903               	btfsc	3,2
  6373  0559  2CDB               	goto	l6686
  6374                           
  6375                           ;APDS9960.c: 74:     if( !wireWriteDataByte(0x9F, 0) ) {
  6376  055A  01A6               	clrf	wireWriteDataByte@val
  6377  055B  309F               	movlw	159
  6378  055C  318B  2379  3184   	fcall	_wireWriteDataByte
  6379  055F  0020               	movlb	0	; select bank0
  6380  0560  0826               	movf	?_wireWriteDataByte,w
  6381  0561  0427               	iorwf	?_wireWriteDataByte+1,w
  6382  0562  1903               	btfsc	3,2
  6383  0563  2CDB               	goto	l6686
  6384                           
  6385                           ;APDS9960.c: 78:     if( !setGestureEnterThresh(40) ) {
  6386  0564  3028               	movlw	40
  6387  0565  318A  22D0  3184   	fcall	_setGestureEnterThresh
  6388  0568  3A00               	xorlw	0
  6389  0569  1903               	btfsc	3,2
  6390  056A  2CDB               	goto	l6686
  6391                           
  6392                           ;APDS9960.c: 82:     if( !setGestureExitThresh(30) ) {
  6393  056B  301E               	movlw	30
  6394  056C  318A  22E3  3184   	fcall	_setGestureExitThresh
  6395  056F  3A00               	xorlw	0
  6396  0570  1903               	btfsc	3,2
  6397  0571  2CDB               	goto	l6686
  6398                           
  6399                           ;APDS9960.c: 85:     if( !wireWriteDataByte(0xA2, 0x40) ) {
  6400  0572  3040               	movlw	64
  6401  0573  0020               	movlb	0	; select bank0
  6402  0574  00B0               	movwf	??_initialize
  6403  0575  0830               	movf	??_initialize,w
  6404  0576  00A6               	movwf	wireWriteDataByte@val
  6405  0577  30A2               	movlw	162
  6406  0578  318B  2379  3184   	fcall	_wireWriteDataByte
  6407  057B  0020               	movlb	0	; select bank0
  6408  057C  0826               	movf	?_wireWriteDataByte,w
  6409  057D  0427               	iorwf	?_wireWriteDataByte+1,w
  6410  057E  1903               	btfsc	3,2
  6411  057F  2CDB               	goto	l6686
  6412                           
  6413                           ;APDS9960.c: 88:     if( !setGestureGain(2) ) {
  6414  0580  3002               	movlw	2
  6415  0581  318D  25E8  3184   	fcall	_setGestureGain
  6416  0584  3A00               	xorlw	0
  6417  0585  1903               	btfsc	3,2
  6418  0586  2CDB               	goto	l6686
  6419                           
  6420                           ;APDS9960.c: 91:     if( !setGestureLEDDrive(0) ) {
  6421  0587  3000               	movlw	0
  6422  0588  318E  261A  3184   	fcall	_setGestureLEDDrive
  6423  058B  3A00               	xorlw	0
  6424  058C  1903               	btfsc	3,2
  6425  058D  2CDB               	goto	l6686
  6426                           
  6427                           ;APDS9960.c: 95:     if( !setGestureWaitTime(1) ) {
  6428  058E  3001               	movlw	1
  6429  058F  318C  243D  3184   	fcall	_setGestureWaitTime
  6430  0592  3A00               	xorlw	0
  6431  0593  1903               	btfsc	3,2
  6432  0594  2CDB               	goto	l6686
  6433                           
  6434                           ;APDS9960.c: 98:     if( !wireWriteDataByte(0xA4, 0) ) {
  6435  0595  0020               	movlb	0	; select bank0
  6436  0596  01A6               	clrf	wireWriteDataByte@val
  6437  0597  30A4               	movlw	164
  6438  0598  318B  2379  3184   	fcall	_wireWriteDataByte
  6439  059B  0020               	movlb	0	; select bank0
  6440  059C  0826               	movf	?_wireWriteDataByte,w
  6441  059D  0427               	iorwf	?_wireWriteDataByte+1,w
  6442  059E  1903               	btfsc	3,2
  6443  059F  2CDB               	goto	l6686
  6444                           
  6445                           ;APDS9960.c: 101:     if( !wireWriteDataByte(0xA5, 0) ) {
  6446  05A0  01A6               	clrf	wireWriteDataByte@val
  6447  05A1  30A5               	movlw	165
  6448  05A2  318B  2379  3184   	fcall	_wireWriteDataByte
  6449  05A5  0020               	movlb	0	; select bank0
  6450  05A6  0826               	movf	?_wireWriteDataByte,w
  6451  05A7  0427               	iorwf	?_wireWriteDataByte+1,w
  6452  05A8  1903               	btfsc	3,2
  6453  05A9  2CDB               	goto	l6686
  6454                           
  6455                           ;APDS9960.c: 104:     if( !wireWriteDataByte(0xA7, 0) ) {
  6456  05AA  01A6               	clrf	wireWriteDataByte@val
  6457  05AB  30A7               	movlw	167
  6458  05AC  318B  2379  3184   	fcall	_wireWriteDataByte
  6459  05AF  0020               	movlb	0	; select bank0
  6460  05B0  0826               	movf	?_wireWriteDataByte,w
  6461  05B1  0427               	iorwf	?_wireWriteDataByte+1,w
  6462  05B2  1903               	btfsc	3,2
  6463  05B3  2CDB               	goto	l6686
  6464                           
  6465                           ;APDS9960.c: 107:     if( !wireWriteDataByte(0xA9, 0) ) {
  6466  05B4  01A6               	clrf	wireWriteDataByte@val
  6467  05B5  30A9               	movlw	169
  6468  05B6  318B  2379  3184   	fcall	_wireWriteDataByte
  6469  05B9  0020               	movlb	0	; select bank0
  6470  05BA  0826               	movf	?_wireWriteDataByte,w
  6471  05BB  0427               	iorwf	?_wireWriteDataByte+1,w
  6472  05BC  1903               	btfsc	3,2
  6473  05BD  2CDB               	goto	l6686
  6474                           
  6475                           ;APDS9960.c: 110:     if( !wireWriteDataByte(0xA6, 0xC9) ) {
  6476  05BE  30C9               	movlw	201
  6477  05BF  00B0               	movwf	??_initialize
  6478  05C0  0830               	movf	??_initialize,w
  6479  05C1  00A6               	movwf	wireWriteDataByte@val
  6480  05C2  30A6               	movlw	166
  6481  05C3  318B  2379  3184   	fcall	_wireWriteDataByte
  6482  05C6  0020               	movlb	0	; select bank0
  6483  05C7  0826               	movf	?_wireWriteDataByte,w
  6484  05C8  0427               	iorwf	?_wireWriteDataByte+1,w
  6485  05C9  1903               	btfsc	3,2
  6486  05CA  2CDB               	goto	l6686
  6487                           
  6488                           ;APDS9960.c: 113:     if( !wireWriteDataByte(0xAA, 0) ) {
  6489  05CB  01A6               	clrf	wireWriteDataByte@val
  6490  05CC  30AA               	movlw	170
  6491  05CD  318B  2379  3184   	fcall	_wireWriteDataByte
  6492  05D0  0020               	movlb	0	; select bank0
  6493  05D1  0826               	movf	?_wireWriteDataByte,w
  6494  05D2  0427               	iorwf	?_wireWriteDataByte+1,w
  6495  05D3  1903               	btfsc	3,2
  6496  05D4  2CDB               	goto	l6686
  6497                           
  6498                           ;APDS9960.c: 116:     if( !setGestureIntEnable(0) ) {
  6499  05D5  3000               	movlw	0
  6500  05D6  318D  252F  3184   	fcall	_setGestureIntEnable
  6501  05D9  3A00               	xorlw	0
  6502  05DA  1903               	btfsc	3,2
  6503  05DB  2CDB               	goto	l6686
  6504                           
  6505                           ;APDS9960.c: 120:     return 1;
  6506  05DC  3001               	movlw	1
  6507  05DD  0008               	return
  6508  05DE                     __end_of_initialize:	
  6509                           
  6510                           	psect	text2
  6511  0CDB                     __ptext2:	
  6512 ;; *************** function _setProximityGain *****************
  6513 ;; Defined at:
  6514 ;;		line 192 in file "APDS9960.c"
  6515 ;; Parameters:    Size  Location     Type
  6516 ;;  drive           1    wreg     unsigned char 
  6517 ;; Auto vars:     Size  Location     Type
  6518 ;;  drive           1   13[BANK0 ] unsigned char 
  6519 ;;  val             1   12[BANK0 ] unsigned char 
  6520 ;; Return value:  Size  Location     Type
  6521 ;;                  1    wreg      _Bool 
  6522 ;; Registers used:
  6523 ;;		wreg, status,2, status,0, pclath, cstack
  6524 ;; Tracked objects:
  6525 ;;		On entry : 0/0
  6526 ;;		On exit  : 0/0
  6527 ;;		Unchanged: 0/0
  6528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6530 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6531 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6532 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6533 ;;Total ram usage:        4 bytes
  6534 ;; Hardware stack levels used:    1
  6535 ;; Hardware stack levels required when called:    8
  6536 ;; This function calls:
  6537 ;;		_wireReadDataByte
  6538 ;;		_wireWriteDataByte
  6539 ;; This function is called by:
  6540 ;;		_initialize
  6541 ;; This function uses a non-reentrant model
  6542 ;;
  6543                           
  6544                           
  6545                           ;psect for function _setProximityGain
  6546  0CDB                     _setProximityGain:	
  6547                           
  6548                           ;incstack = 0
  6549                           ; Regs used in _setProximityGain: [wreg+status,2+status,0+pclath+cstack]
  6550                           ;setProximityGain@drive stored from wreg
  6551  0CDB  0020               	movlb	0	; select bank0
  6552  0CDC  00AD               	movwf	setProximityGain@drive
  6553                           
  6554                           ;APDS9960.c: 192: _Bool setProximityGain(uint8_t drive);APDS9960.c: 193: {;APDS9960.c: 1
      +                          94:     uint8_t val;;APDS9960.c: 197:     val=wireReadDataByte(0x8F);
  6555  0CDD  308F               	movlw	143
  6556  0CDE  318B  23CC  318C   	fcall	_wireReadDataByte
  6557  0CE1  0020               	movlb	0	; select bank0
  6558  0CE2  00AA               	movwf	??_setProximityGain
  6559  0CE3  082A               	movf	??_setProximityGain,w
  6560  0CE4  00AC               	movwf	setProximityGain@val
  6561                           
  6562                           ;APDS9960.c: 199:     drive &= 0b00000011;
  6563  0CE5  3003               	movlw	3
  6564  0CE6  00AA               	movwf	??_setProximityGain
  6565  0CE7  082A               	movf	??_setProximityGain,w
  6566  0CE8  05AD               	andwf	setProximityGain@drive,f
  6567                           
  6568                           ;APDS9960.c: 200:     drive = drive << 2;
  6569  0CE9  082D               	movf	setProximityGain@drive,w
  6570  0CEA  00AA               	movwf	??_setProximityGain
  6571  0CEB  3001               	movlw	1
  6572  0CEC                     u5545:	
  6573  0CEC  35AA               	lslf	??_setProximityGain,f
  6574  0CED  3EFF               	addlw	-1
  6575  0CEE  1D03               	skipz
  6576  0CEF  2CEC               	goto	u5545
  6577  0CF0  352A               	lslf	??_setProximityGain,w
  6578  0CF1  00AB               	movwf	??_setProximityGain+1
  6579  0CF2  082B               	movf	??_setProximityGain+1,w
  6580  0CF3  00AD               	movwf	setProximityGain@drive
  6581                           
  6582                           ;APDS9960.c: 201:     val &= 0b11110011;
  6583  0CF4  30F3               	movlw	243
  6584  0CF5  00AA               	movwf	??_setProximityGain
  6585  0CF6  082A               	movf	??_setProximityGain,w
  6586  0CF7  05AC               	andwf	setProximityGain@val,f
  6587                           
  6588                           ;APDS9960.c: 202:     val |= drive;
  6589  0CF8  082D               	movf	setProximityGain@drive,w
  6590  0CF9  00AA               	movwf	??_setProximityGain
  6591  0CFA  082A               	movf	??_setProximityGain,w
  6592  0CFB  04AC               	iorwf	setProximityGain@val,f
  6593                           
  6594                           ;APDS9960.c: 205:     if( !wireWriteDataByte(0x8F, val) ) {
  6595  0CFC  082C               	movf	setProximityGain@val,w
  6596  0CFD  00AA               	movwf	??_setProximityGain
  6597  0CFE  082A               	movf	??_setProximityGain,w
  6598  0CFF  00A6               	movwf	wireWriteDataByte@val
  6599  0D00  308F               	movlw	143
  6600  0D01  318B  2379         	fcall	_wireWriteDataByte
  6601  0D03  0008               	return
  6602  0D04                     __end_of_setProximityGain:	
  6603                           
  6604                           	psect	text3
  6605  0B09                     __ptext3:	
  6606 ;; *************** function _setProxIntLowThresh *****************
  6607 ;; Defined at:
  6608 ;;		line 234 in file "APDS9960.c"
  6609 ;; Parameters:    Size  Location     Type
  6610 ;;  threshold       1    wreg     unsigned char 
  6611 ;; Auto vars:     Size  Location     Type
  6612 ;;  threshold       1   11[BANK0 ] unsigned char 
  6613 ;; Return value:  Size  Location     Type
  6614 ;;                  1    wreg      _Bool 
  6615 ;; Registers used:
  6616 ;;		wreg, status,2, status,0, pclath, cstack
  6617 ;; Tracked objects:
  6618 ;;		On entry : 0/0
  6619 ;;		On exit  : 0/0
  6620 ;;		Unchanged: 0/0
  6621 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6622 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6623 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6624 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6625 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6626 ;;Total ram usage:        2 bytes
  6627 ;; Hardware stack levels used:    1
  6628 ;; Hardware stack levels required when called:    8
  6629 ;; This function calls:
  6630 ;;		_wireWriteDataByte
  6631 ;; This function is called by:
  6632 ;;		_initialize
  6633 ;; This function uses a non-reentrant model
  6634 ;;
  6635                           
  6636                           
  6637                           ;psect for function _setProxIntLowThresh
  6638  0B09                     _setProxIntLowThresh:	
  6639                           
  6640                           ;incstack = 0
  6641                           ; Regs used in _setProxIntLowThresh: [wreg+status,2+status,0+pclath+cstack]
  6642                           ;setProxIntLowThresh@threshold stored from wreg
  6643  0B09  0020               	movlb	0	; select bank0
  6644  0B0A  00AB               	movwf	setProxIntLowThresh@threshold
  6645                           
  6646                           ;APDS9960.c: 234: _Bool setProxIntLowThresh(uint8_t threshold);APDS9960.c: 235: {;APDS99
      +                          60.c: 236:     if( !wireWriteDataByte(0x89, threshold) ) {
  6647  0B0B  082B               	movf	setProxIntLowThresh@threshold,w
  6648  0B0C  00AA               	movwf	??_setProxIntLowThresh
  6649  0B0D  082A               	movf	??_setProxIntLowThresh,w
  6650  0B0E  00A6               	movwf	wireWriteDataByte@val
  6651  0B0F  3089               	movlw	137
  6652  0B10  318B  2379  318B   	fcall	_wireWriteDataByte
  6653  0B13  0020               	movlb	0	; select bank0
  6654  0B14  0826               	movf	?_wireWriteDataByte,w
  6655  0B15  0427               	iorwf	?_wireWriteDataByte+1,w
  6656  0B16  1D03               	btfss	3,2
  6657  0B17  2B1A               	goto	l6442
  6658                           
  6659                           ;APDS9960.c: 237:         return 0;
  6660  0B18  3000               	movlw	0
  6661  0B19  0008               	return
  6662  0B1A                     l6442:	
  6663                           
  6664                           ;APDS9960.c: 240:     return 1;
  6665  0B1A  3001               	movlw	1
  6666  0B1B  0008               	return
  6667  0B1C                     __end_of_setProxIntLowThresh:	
  6668                           
  6669                           	psect	text4
  6670  0AF6                     __ptext4:	
  6671 ;; *************** function _setProxIntHighThresh *****************
  6672 ;; Defined at:
  6673 ;;		line 244 in file "APDS9960.c"
  6674 ;; Parameters:    Size  Location     Type
  6675 ;;  threshold       1    wreg     unsigned char 
  6676 ;; Auto vars:     Size  Location     Type
  6677 ;;  threshold       1   11[BANK0 ] unsigned char 
  6678 ;; Return value:  Size  Location     Type
  6679 ;;                  1    wreg      _Bool 
  6680 ;; Registers used:
  6681 ;;		wreg, status,2, status,0, pclath, cstack
  6682 ;; Tracked objects:
  6683 ;;		On entry : 0/0
  6684 ;;		On exit  : 0/0
  6685 ;;		Unchanged: 0/0
  6686 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6688 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6689 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6690 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6691 ;;Total ram usage:        2 bytes
  6692 ;; Hardware stack levels used:    1
  6693 ;; Hardware stack levels required when called:    8
  6694 ;; This function calls:
  6695 ;;		_wireWriteDataByte
  6696 ;; This function is called by:
  6697 ;;		_initialize
  6698 ;; This function uses a non-reentrant model
  6699 ;;
  6700                           
  6701                           
  6702                           ;psect for function _setProxIntHighThresh
  6703  0AF6                     _setProxIntHighThresh:	
  6704                           
  6705                           ;incstack = 0
  6706                           ; Regs used in _setProxIntHighThresh: [wreg+status,2+status,0+pclath+cstack]
  6707                           ;setProxIntHighThresh@threshold stored from wreg
  6708  0AF6  0020               	movlb	0	; select bank0
  6709  0AF7  00AB               	movwf	setProxIntHighThresh@threshold
  6710                           
  6711                           ;APDS9960.c: 244: _Bool setProxIntHighThresh(uint8_t threshold);APDS9960.c: 245: {;APDS9
      +                          960.c: 246:     if( !wireWriteDataByte(0x8B, threshold) ) {
  6712  0AF8  082B               	movf	setProxIntHighThresh@threshold,w
  6713  0AF9  00AA               	movwf	??_setProxIntHighThresh
  6714  0AFA  082A               	movf	??_setProxIntHighThresh,w
  6715  0AFB  00A6               	movwf	wireWriteDataByte@val
  6716  0AFC  308B               	movlw	139
  6717  0AFD  318B  2379  318A   	fcall	_wireWriteDataByte
  6718  0B00  0020               	movlb	0	; select bank0
  6719  0B01  0826               	movf	?_wireWriteDataByte,w
  6720  0B02  0427               	iorwf	?_wireWriteDataByte+1,w
  6721  0B03  1D03               	btfss	3,2
  6722  0B04  2B07               	goto	l6452
  6723                           
  6724                           ;APDS9960.c: 247:         return 0;
  6725  0B05  3000               	movlw	0
  6726  0B06  0008               	return
  6727  0B07                     l6452:	
  6728                           
  6729                           ;APDS9960.c: 250:     return 1;
  6730  0B07  3001               	movlw	1
  6731  0B08  0008               	return
  6732  0B09                     __end_of_setProxIntHighThresh:	
  6733                           
  6734                           	psect	text5
  6735  0C8B                     __ptext5:	
  6736 ;; *************** function _setLightIntLowThreshold *****************
  6737 ;; Defined at:
  6738 ;;		line 254 in file "APDS9960.c"
  6739 ;; Parameters:    Size  Location     Type
  6740 ;;  threshold       2   10[BANK0 ] unsigned short 
  6741 ;; Auto vars:     Size  Location     Type
  6742 ;;  val_high        1   14[BANK0 ] unsigned char 
  6743 ;;  val_low         1   13[BANK0 ] unsigned char 
  6744 ;; Return value:  Size  Location     Type
  6745 ;;                  1    wreg      _Bool 
  6746 ;; Registers used:
  6747 ;;		wreg, status,2, status,0, pclath, cstack
  6748 ;; Tracked objects:
  6749 ;;		On entry : 0/0
  6750 ;;		On exit  : 0/0
  6751 ;;		Unchanged: 0/0
  6752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6753 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6754 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6755 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6756 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6757 ;;Total ram usage:        5 bytes
  6758 ;; Hardware stack levels used:    1
  6759 ;; Hardware stack levels required when called:    8
  6760 ;; This function calls:
  6761 ;;		_wireWriteDataByte
  6762 ;; This function is called by:
  6763 ;;		_initialize
  6764 ;; This function uses a non-reentrant model
  6765 ;;
  6766                           
  6767                           
  6768                           ;psect for function _setLightIntLowThreshold
  6769  0C8B                     _setLightIntLowThreshold:	
  6770                           
  6771                           ;APDS9960.c: 254: _Bool setLightIntLowThreshold(uint16_t threshold);APDS9960.c: 255: {;A
      +                          PDS9960.c: 256:     uint8_t val_low;;APDS9960.c: 257:     uint8_t val_high;;APDS9960.c: 
      +                          260:     val_low = threshold & 0x00FF;
  6772                           
  6773                           ;incstack = 0
  6774                           ; Regs used in _setLightIntLowThreshold: [wreg+status,2+status,0+pclath+cstack]
  6775  0C8B  0020               	movlb	0	; select bank0
  6776  0C8C  082A               	movf	setLightIntLowThreshold@threshold,w
  6777  0C8D  00AC               	movwf	??_setLightIntLowThreshold
  6778  0C8E  082C               	movf	??_setLightIntLowThreshold,w
  6779  0C8F  00AD               	movwf	setLightIntLowThreshold@val_low
  6780                           
  6781                           ;APDS9960.c: 261:     val_high = (threshold & 0xFF00) >> 8;
  6782  0C90  082B               	movf	setLightIntLowThreshold@threshold+1,w
  6783  0C91  00AC               	movwf	??_setLightIntLowThreshold
  6784  0C92  082C               	movf	??_setLightIntLowThreshold,w
  6785  0C93  00AE               	movwf	setLightIntLowThreshold@val_high
  6786                           
  6787                           ;APDS9960.c: 264:     if( !wireWriteDataByte(0x84, val_low) ) {
  6788  0C94  082D               	movf	setLightIntLowThreshold@val_low,w
  6789  0C95  00AC               	movwf	??_setLightIntLowThreshold
  6790  0C96  082C               	movf	??_setLightIntLowThreshold,w
  6791  0C97  00A6               	movwf	wireWriteDataByte@val
  6792  0C98  3084               	movlw	132
  6793  0C99  318B  2379  318C   	fcall	_wireWriteDataByte
  6794  0C9C  0020               	movlb	0	; select bank0
  6795  0C9D  0826               	movf	?_wireWriteDataByte,w
  6796  0C9E  0427               	iorwf	?_wireWriteDataByte+1,w
  6797  0C9F  1D03               	btfss	3,2
  6798  0CA0  2CA3               	goto	l6466
  6799  0CA1                     l6462:	
  6800                           
  6801                           ;APDS9960.c: 265:         return 0;
  6802  0CA1  3000               	movlw	0
  6803  0CA2  0008               	return
  6804  0CA3                     l6466:	
  6805                           
  6806                           ;APDS9960.c: 269:     if( !wireWriteDataByte(0x85, val_high) ) {
  6807  0CA3  082E               	movf	setLightIntLowThreshold@val_high,w
  6808  0CA4  00AC               	movwf	??_setLightIntLowThreshold
  6809  0CA5  082C               	movf	??_setLightIntLowThreshold,w
  6810  0CA6  00A6               	movwf	wireWriteDataByte@val
  6811  0CA7  3085               	movlw	133
  6812  0CA8  318B  2379  318C   	fcall	_wireWriteDataByte
  6813  0CAB  0020               	movlb	0	; select bank0
  6814  0CAC  0826               	movf	?_wireWriteDataByte,w
  6815  0CAD  0427               	iorwf	?_wireWriteDataByte+1,w
  6816  0CAE  1903               	btfsc	3,2
  6817  0CAF  2CA1               	goto	l6462
  6818                           
  6819                           ;APDS9960.c: 273:     return 1;
  6820  0CB0  3001               	movlw	1
  6821  0CB1  0008               	return
  6822  0CB2                     __end_of_setLightIntLowThreshold:	
  6823                           
  6824                           	psect	text6
  6825  0C64                     __ptext6:	
  6826 ;; *************** function _setLightIntHighThreshold *****************
  6827 ;; Defined at:
  6828 ;;		line 277 in file "APDS9960.c"
  6829 ;; Parameters:    Size  Location     Type
  6830 ;;  threshold       2   10[BANK0 ] unsigned short 
  6831 ;; Auto vars:     Size  Location     Type
  6832 ;;  val_high        1   14[BANK0 ] unsigned char 
  6833 ;;  val_low         1   13[BANK0 ] unsigned char 
  6834 ;; Return value:  Size  Location     Type
  6835 ;;                  1    wreg      _Bool 
  6836 ;; Registers used:
  6837 ;;		wreg, status,2, status,0, pclath, cstack
  6838 ;; Tracked objects:
  6839 ;;		On entry : 0/0
  6840 ;;		On exit  : 0/0
  6841 ;;		Unchanged: 0/0
  6842 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6843 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6844 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6845 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6846 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6847 ;;Total ram usage:        5 bytes
  6848 ;; Hardware stack levels used:    1
  6849 ;; Hardware stack levels required when called:    8
  6850 ;; This function calls:
  6851 ;;		_wireWriteDataByte
  6852 ;; This function is called by:
  6853 ;;		_initialize
  6854 ;; This function uses a non-reentrant model
  6855 ;;
  6856                           
  6857                           
  6858                           ;psect for function _setLightIntHighThreshold
  6859  0C64                     _setLightIntHighThreshold:	
  6860                           
  6861                           ;APDS9960.c: 277: _Bool setLightIntHighThreshold(uint16_t threshold);APDS9960.c: 278: {;
      +                          APDS9960.c: 279:     uint8_t val_low;;APDS9960.c: 280:     uint8_t val_high;;APDS9960.c:
      +                           283:     val_low = threshold & 0x00FF;
  6862                           
  6863                           ;incstack = 0
  6864                           ; Regs used in _setLightIntHighThreshold: [wreg+status,2+status,0+pclath+cstack]
  6865  0C64  0020               	movlb	0	; select bank0
  6866  0C65  082A               	movf	setLightIntHighThreshold@threshold,w
  6867  0C66  00AC               	movwf	??_setLightIntHighThreshold
  6868  0C67  082C               	movf	??_setLightIntHighThreshold,w
  6869  0C68  00AD               	movwf	setLightIntHighThreshold@val_low
  6870                           
  6871                           ;APDS9960.c: 284:     val_high = (threshold & 0xFF00) >> 8;
  6872  0C69  082B               	movf	setLightIntHighThreshold@threshold+1,w
  6873  0C6A  00AC               	movwf	??_setLightIntHighThreshold
  6874  0C6B  082C               	movf	??_setLightIntHighThreshold,w
  6875  0C6C  00AE               	movwf	setLightIntHighThreshold@val_high
  6876                           
  6877                           ;APDS9960.c: 287:     if( !wireWriteDataByte(0x86, val_low) ) {
  6878  0C6D  082D               	movf	setLightIntHighThreshold@val_low,w
  6879  0C6E  00AC               	movwf	??_setLightIntHighThreshold
  6880  0C6F  082C               	movf	??_setLightIntHighThreshold,w
  6881  0C70  00A6               	movwf	wireWriteDataByte@val
  6882  0C71  3086               	movlw	134
  6883  0C72  318B  2379  318C   	fcall	_wireWriteDataByte
  6884  0C75  0020               	movlb	0	; select bank0
  6885  0C76  0826               	movf	?_wireWriteDataByte,w
  6886  0C77  0427               	iorwf	?_wireWriteDataByte+1,w
  6887  0C78  1D03               	btfss	3,2
  6888  0C79  2C7C               	goto	l6486
  6889  0C7A                     l6482:	
  6890                           
  6891                           ;APDS9960.c: 288:         return 0;
  6892  0C7A  3000               	movlw	0
  6893  0C7B  0008               	return
  6894  0C7C                     l6486:	
  6895                           
  6896                           ;APDS9960.c: 292:     if( !wireWriteDataByte(0x87, val_high) ) {
  6897  0C7C  082E               	movf	setLightIntHighThreshold@val_high,w
  6898  0C7D  00AC               	movwf	??_setLightIntHighThreshold
  6899  0C7E  082C               	movf	??_setLightIntHighThreshold,w
  6900  0C7F  00A6               	movwf	wireWriteDataByte@val
  6901  0C80  3087               	movlw	135
  6902  0C81  318B  2379  318C   	fcall	_wireWriteDataByte
  6903  0C84  0020               	movlb	0	; select bank0
  6904  0C85  0826               	movf	?_wireWriteDataByte,w
  6905  0C86  0427               	iorwf	?_wireWriteDataByte+1,w
  6906  0C87  1903               	btfsc	3,2
  6907  0C88  2C7A               	goto	l6482
  6908                           
  6909                           ;APDS9960.c: 296:     return 1;
  6910  0C89  3001               	movlw	1
  6911  0C8A  0008               	return
  6912  0C8B                     __end_of_setLightIntHighThreshold:	
  6913                           
  6914                           	psect	text7
  6915  0CB2                     __ptext7:	
  6916 ;; *************** function _setLEDDrive *****************
  6917 ;; Defined at:
  6918 ;;		line 170 in file "APDS9960.c"
  6919 ;; Parameters:    Size  Location     Type
  6920 ;;  drive           1    wreg     unsigned char 
  6921 ;; Auto vars:     Size  Location     Type
  6922 ;;  drive           1   13[BANK0 ] unsigned char 
  6923 ;;  val             1   12[BANK0 ] unsigned char 
  6924 ;; Return value:  Size  Location     Type
  6925 ;;                  1    wreg      _Bool 
  6926 ;; Registers used:
  6927 ;;		wreg, status,2, status,0, pclath, cstack
  6928 ;; Tracked objects:
  6929 ;;		On entry : 0/0
  6930 ;;		On exit  : 0/0
  6931 ;;		Unchanged: 0/0
  6932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6933 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6934 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6935 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6936 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6937 ;;Total ram usage:        4 bytes
  6938 ;; Hardware stack levels used:    1
  6939 ;; Hardware stack levels required when called:    8
  6940 ;; This function calls:
  6941 ;;		_wireReadDataByte
  6942 ;;		_wireWriteDataByte
  6943 ;; This function is called by:
  6944 ;;		_initialize
  6945 ;; This function uses a non-reentrant model
  6946 ;;
  6947                           
  6948                           
  6949                           ;psect for function _setLEDDrive
  6950  0CB2                     _setLEDDrive:	
  6951                           
  6952                           ;incstack = 0
  6953                           ; Regs used in _setLEDDrive: [wreg+status,2+status,0+pclath+cstack]
  6954                           ;setLEDDrive@drive stored from wreg
  6955  0CB2  0020               	movlb	0	; select bank0
  6956  0CB3  00AD               	movwf	setLEDDrive@drive
  6957                           
  6958                           ;APDS9960.c: 170: _Bool setLEDDrive(uint8_t drive);APDS9960.c: 171: {;APDS9960.c: 172:  
      +                             uint8_t val;;APDS9960.c: 175:     val=wireReadDataByte(0x8F);
  6959  0CB4  308F               	movlw	143
  6960  0CB5  318B  23CC  318C   	fcall	_wireReadDataByte
  6961  0CB8  0020               	movlb	0	; select bank0
  6962  0CB9  00AA               	movwf	??_setLEDDrive
  6963  0CBA  082A               	movf	??_setLEDDrive,w
  6964  0CBB  00AC               	movwf	setLEDDrive@val
  6965                           
  6966                           ;APDS9960.c: 178:     drive &= 0b00000011;
  6967  0CBC  3003               	movlw	3
  6968  0CBD  00AA               	movwf	??_setLEDDrive
  6969  0CBE  082A               	movf	??_setLEDDrive,w
  6970  0CBF  05AD               	andwf	setLEDDrive@drive,f
  6971                           
  6972                           ;APDS9960.c: 179:     drive = drive << 6;
  6973  0CC0  082D               	movf	setLEDDrive@drive,w
  6974  0CC1  00AA               	movwf	??_setLEDDrive
  6975  0CC2  3005               	movlw	5
  6976  0CC3                     u5535:	
  6977  0CC3  35AA               	lslf	??_setLEDDrive,f
  6978  0CC4  3EFF               	addlw	-1
  6979  0CC5  1D03               	skipz
  6980  0CC6  2CC3               	goto	u5535
  6981  0CC7  352A               	lslf	??_setLEDDrive,w
  6982  0CC8  00AB               	movwf	??_setLEDDrive+1
  6983  0CC9  082B               	movf	??_setLEDDrive+1,w
  6984  0CCA  00AD               	movwf	setLEDDrive@drive
  6985                           
  6986                           ;APDS9960.c: 180:     val &= 0b00111111;
  6987  0CCB  303F               	movlw	63
  6988  0CCC  00AA               	movwf	??_setLEDDrive
  6989  0CCD  082A               	movf	??_setLEDDrive,w
  6990  0CCE  05AC               	andwf	setLEDDrive@val,f
  6991                           
  6992                           ;APDS9960.c: 181:     val |= drive;
  6993  0CCF  082D               	movf	setLEDDrive@drive,w
  6994  0CD0  00AA               	movwf	??_setLEDDrive
  6995  0CD1  082A               	movf	??_setLEDDrive,w
  6996  0CD2  04AC               	iorwf	setLEDDrive@val,f
  6997                           
  6998                           ;APDS9960.c: 184:     if( !wireWriteDataByte(0x8F, val) ) {
  6999  0CD3  082C               	movf	setLEDDrive@val,w
  7000  0CD4  00AA               	movwf	??_setLEDDrive
  7001  0CD5  082A               	movf	??_setLEDDrive,w
  7002  0CD6  00A6               	movwf	wireWriteDataByte@val
  7003  0CD7  308F               	movlw	143
  7004  0CD8  318B  2379         	fcall	_wireWriteDataByte
  7005  0CDA  0008               	return
  7006  0CDB                     __end_of_setLEDDrive:	
  7007                           
  7008                           	psect	text8
  7009  0C3D                     __ptext8:	
  7010 ;; *************** function _setGestureWaitTime *****************
  7011 ;; Defined at:
  7012 ;;		line 366 in file "APDS9960.c"
  7013 ;; Parameters:    Size  Location     Type
  7014 ;;  time            1    wreg     unsigned char 
  7015 ;; Auto vars:     Size  Location     Type
  7016 ;;  time            1   11[BANK0 ] unsigned char 
  7017 ;;  val             1   12[BANK0 ] unsigned char 
  7018 ;; Return value:  Size  Location     Type
  7019 ;;                  1    wreg      _Bool 
  7020 ;; Registers used:
  7021 ;;		wreg, status,2, status,0, pclath, cstack
  7022 ;; Tracked objects:
  7023 ;;		On entry : 0/0
  7024 ;;		On exit  : 0/0
  7025 ;;		Unchanged: 0/0
  7026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7027 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7028 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7029 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7030 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7031 ;;Total ram usage:        3 bytes
  7032 ;; Hardware stack levels used:    1
  7033 ;; Hardware stack levels required when called:    8
  7034 ;; This function calls:
  7035 ;;		_wireReadDataByte
  7036 ;;		_wireWriteDataByte
  7037 ;; This function is called by:
  7038 ;;		_initialize
  7039 ;; This function uses a non-reentrant model
  7040 ;;
  7041                           
  7042                           
  7043                           ;psect for function _setGestureWaitTime
  7044  0C3D                     _setGestureWaitTime:	
  7045                           
  7046                           ;incstack = 0
  7047                           ; Regs used in _setGestureWaitTime: [wreg+status,2+status,0+pclath+cstack]
  7048                           ;setGestureWaitTime@time stored from wreg
  7049  0C3D  0020               	movlb	0	; select bank0
  7050  0C3E  00AB               	movwf	setGestureWaitTime@time
  7051                           
  7052                           ;APDS9960.c: 366: _Bool setGestureWaitTime(uint8_t time);APDS9960.c: 367: {;APDS9960.c: 
      +                          368:     uint8_t val;;APDS9960.c: 371:     val = wireReadDataByte(0xA3);
  7053  0C3F  30A3               	movlw	163
  7054  0C40  318B  23CC  318C   	fcall	_wireReadDataByte
  7055  0C43  0020               	movlb	0	; select bank0
  7056  0C44  00AA               	movwf	??_setGestureWaitTime
  7057  0C45  082A               	movf	??_setGestureWaitTime,w
  7058  0C46  00AC               	movwf	setGestureWaitTime@val
  7059                           
  7060                           ;APDS9960.c: 374:     time &= 0b00000111;
  7061  0C47  3007               	movlw	7
  7062  0C48  00AA               	movwf	??_setGestureWaitTime
  7063  0C49  082A               	movf	??_setGestureWaitTime,w
  7064  0C4A  05AB               	andwf	setGestureWaitTime@time,f
  7065                           
  7066                           ;APDS9960.c: 375:     val &= 0b11111000;
  7067  0C4B  30F8               	movlw	248
  7068  0C4C  00AA               	movwf	??_setGestureWaitTime
  7069  0C4D  082A               	movf	??_setGestureWaitTime,w
  7070  0C4E  05AC               	andwf	setGestureWaitTime@val,f
  7071                           
  7072                           ;APDS9960.c: 376:     val |= time;
  7073  0C4F  082B               	movf	setGestureWaitTime@time,w
  7074  0C50  00AA               	movwf	??_setGestureWaitTime
  7075  0C51  082A               	movf	??_setGestureWaitTime,w
  7076  0C52  04AC               	iorwf	setGestureWaitTime@val,f
  7077                           
  7078                           ;APDS9960.c: 379:     if( !wireWriteDataByte(0xA3, val) ) {
  7079  0C53  082C               	movf	setGestureWaitTime@val,w
  7080  0C54  00AA               	movwf	??_setGestureWaitTime
  7081  0C55  082A               	movf	??_setGestureWaitTime,w
  7082  0C56  00A6               	movwf	wireWriteDataByte@val
  7083  0C57  30A3               	movlw	163
  7084  0C58  318B  2379  318C   	fcall	_wireWriteDataByte
  7085  0C5B  0020               	movlb	0	; select bank0
  7086  0C5C  0826               	movf	?_wireWriteDataByte,w
  7087  0C5D  0427               	iorwf	?_wireWriteDataByte+1,w
  7088  0C5E  1D03               	btfss	3,2
  7089  0C5F  2C62               	goto	l6566
  7090                           
  7091                           ;APDS9960.c: 380:         return 0;
  7092  0C60  3000               	movlw	0
  7093  0C61  0008               	return
  7094  0C62                     l6566:	
  7095                           
  7096                           ;APDS9960.c: 383:     return 1;
  7097  0C62  3001               	movlw	1
  7098  0C63  0008               	return
  7099  0C64                     __end_of_setGestureWaitTime:	
  7100                           
  7101                           	psect	text9
  7102  0E1A                     __ptext9:	
  7103 ;; *************** function _setGestureLEDDrive *****************
  7104 ;; Defined at:
  7105 ;;		line 343 in file "APDS9960.c"
  7106 ;; Parameters:    Size  Location     Type
  7107 ;;  drive           1    wreg     unsigned char 
  7108 ;; Auto vars:     Size  Location     Type
  7109 ;;  drive           1   13[BANK0 ] unsigned char 
  7110 ;;  val             1   12[BANK0 ] unsigned char 
  7111 ;; Return value:  Size  Location     Type
  7112 ;;                  1    wreg      _Bool 
  7113 ;; Registers used:
  7114 ;;		wreg, status,2, status,0, pclath, cstack
  7115 ;; Tracked objects:
  7116 ;;		On entry : 0/0
  7117 ;;		On exit  : 0/0
  7118 ;;		Unchanged: 0/0
  7119 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7121 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7122 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7123 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7124 ;;Total ram usage:        4 bytes
  7125 ;; Hardware stack levels used:    1
  7126 ;; Hardware stack levels required when called:    8
  7127 ;; This function calls:
  7128 ;;		_wireReadDataByte
  7129 ;;		_wireWriteDataByte
  7130 ;; This function is called by:
  7131 ;;		_initialize
  7132 ;; This function uses a non-reentrant model
  7133 ;;
  7134                           
  7135                           
  7136                           ;psect for function _setGestureLEDDrive
  7137  0E1A                     _setGestureLEDDrive:	
  7138                           
  7139                           ;incstack = 0
  7140                           ; Regs used in _setGestureLEDDrive: [wreg+status,2+status,0+pclath+cstack]
  7141                           ;setGestureLEDDrive@drive stored from wreg
  7142  0E1A  0020               	movlb	0	; select bank0
  7143  0E1B  00AD               	movwf	setGestureLEDDrive@drive
  7144                           
  7145                           ;APDS9960.c: 343: _Bool setGestureLEDDrive(uint8_t drive);APDS9960.c: 344: {;APDS9960.c:
      +                           345:     uint8_t val;;APDS9960.c: 348:     val = wireReadDataByte(0xA3);
  7146  0E1C  30A3               	movlw	163
  7147  0E1D  318B  23CC  318E   	fcall	_wireReadDataByte
  7148  0E20  0020               	movlb	0	; select bank0
  7149  0E21  00AA               	movwf	??_setGestureLEDDrive
  7150  0E22  082A               	movf	??_setGestureLEDDrive,w
  7151  0E23  00AC               	movwf	setGestureLEDDrive@val
  7152                           
  7153                           ;APDS9960.c: 352:     drive &= 0b00000011;
  7154  0E24  3003               	movlw	3
  7155  0E25  00AA               	movwf	??_setGestureLEDDrive
  7156  0E26  082A               	movf	??_setGestureLEDDrive,w
  7157  0E27  05AD               	andwf	setGestureLEDDrive@drive,f
  7158                           
  7159                           ;APDS9960.c: 353:     drive = drive << 3;
  7160  0E28  082D               	movf	setGestureLEDDrive@drive,w
  7161  0E29  00AA               	movwf	??_setGestureLEDDrive
  7162  0E2A  3002               	movlw	2
  7163  0E2B                     u5655:	
  7164  0E2B  35AA               	lslf	??_setGestureLEDDrive,f
  7165  0E2C  3EFF               	addlw	-1
  7166  0E2D  1D03               	skipz
  7167  0E2E  2E2B               	goto	u5655
  7168  0E2F  352A               	lslf	??_setGestureLEDDrive,w
  7169  0E30  00AB               	movwf	??_setGestureLEDDrive+1
  7170  0E31  082B               	movf	??_setGestureLEDDrive+1,w
  7171  0E32  00AD               	movwf	setGestureLEDDrive@drive
  7172                           
  7173                           ;APDS9960.c: 354:     val &= 0b11100111;
  7174  0E33  30E7               	movlw	231
  7175  0E34  00AA               	movwf	??_setGestureLEDDrive
  7176  0E35  082A               	movf	??_setGestureLEDDrive,w
  7177  0E36  05AC               	andwf	setGestureLEDDrive@val,f
  7178                           
  7179                           ;APDS9960.c: 355:     val |= drive;
  7180  0E37  082D               	movf	setGestureLEDDrive@drive,w
  7181  0E38  00AA               	movwf	??_setGestureLEDDrive
  7182  0E39  082A               	movf	??_setGestureLEDDrive,w
  7183  0E3A  04AC               	iorwf	setGestureLEDDrive@val,f
  7184                           
  7185                           ;APDS9960.c: 358:     if( !wireWriteDataByte(0xA3, val) ) {
  7186  0E3B  082C               	movf	setGestureLEDDrive@val,w
  7187  0E3C  00AA               	movwf	??_setGestureLEDDrive
  7188  0E3D  082A               	movf	??_setGestureLEDDrive,w
  7189  0E3E  00A6               	movwf	wireWriteDataByte@val
  7190  0E3F  30A3               	movlw	163
  7191  0E40  318B  2379  318E   	fcall	_wireWriteDataByte
  7192  0E43  0020               	movlb	0	; select bank0
  7193  0E44  0826               	movf	?_wireWriteDataByte,w
  7194  0E45  0427               	iorwf	?_wireWriteDataByte+1,w
  7195  0E46  1D03               	btfss	3,2
  7196  0E47  2E4A               	goto	l6548
  7197                           
  7198                           ;APDS9960.c: 359:         return 0;
  7199  0E48  3000               	movlw	0
  7200  0E49  0008               	return
  7201  0E4A                     l6548:	
  7202                           
  7203                           ;APDS9960.c: 362:     return 1;
  7204  0E4A  3001               	movlw	1
  7205  0E4B  0008               	return
  7206  0E4C                     __end_of_setGestureLEDDrive:	
  7207                           
  7208                           	psect	text10
  7209  0DE8                     __ptext10:	
  7210 ;; *************** function _setGestureGain *****************
  7211 ;; Defined at:
  7212 ;;		line 320 in file "APDS9960.c"
  7213 ;; Parameters:    Size  Location     Type
  7214 ;;  gain            1    wreg     unsigned char 
  7215 ;; Auto vars:     Size  Location     Type
  7216 ;;  gain            1   13[BANK0 ] unsigned char 
  7217 ;;  val             1   12[BANK0 ] unsigned char 
  7218 ;; Return value:  Size  Location     Type
  7219 ;;                  1    wreg      _Bool 
  7220 ;; Registers used:
  7221 ;;		wreg, status,2, status,0, pclath, cstack
  7222 ;; Tracked objects:
  7223 ;;		On entry : 0/0
  7224 ;;		On exit  : 0/0
  7225 ;;		Unchanged: 0/0
  7226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7227 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7228 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7229 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7230 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7231 ;;Total ram usage:        4 bytes
  7232 ;; Hardware stack levels used:    1
  7233 ;; Hardware stack levels required when called:    8
  7234 ;; This function calls:
  7235 ;;		_wireReadDataByte
  7236 ;;		_wireWriteDataByte
  7237 ;; This function is called by:
  7238 ;;		_initialize
  7239 ;; This function uses a non-reentrant model
  7240 ;;
  7241                           
  7242                           
  7243                           ;psect for function _setGestureGain
  7244  0DE8                     _setGestureGain:	
  7245                           
  7246                           ;incstack = 0
  7247                           ; Regs used in _setGestureGain: [wreg+status,2+status,0+pclath+cstack]
  7248                           ;setGestureGain@gain stored from wreg
  7249  0DE8  0020               	movlb	0	; select bank0
  7250  0DE9  00AD               	movwf	setGestureGain@gain
  7251                           
  7252                           ;APDS9960.c: 320: _Bool setGestureGain(uint8_t gain);APDS9960.c: 321: {;APDS9960.c: 322:
      +                               uint8_t val;;APDS9960.c: 325:     val = wireReadDataByte(0xA3);
  7253  0DEA  30A3               	movlw	163
  7254  0DEB  318B  23CC  318D   	fcall	_wireReadDataByte
  7255  0DEE  0020               	movlb	0	; select bank0
  7256  0DEF  00AA               	movwf	??_setGestureGain
  7257  0DF0  082A               	movf	??_setGestureGain,w
  7258  0DF1  00AC               	movwf	setGestureGain@val
  7259                           
  7260                           ;APDS9960.c: 329:     gain &= 0b00000011;
  7261  0DF2  3003               	movlw	3
  7262  0DF3  00AA               	movwf	??_setGestureGain
  7263  0DF4  082A               	movf	??_setGestureGain,w
  7264  0DF5  05AD               	andwf	setGestureGain@gain,f
  7265                           
  7266                           ;APDS9960.c: 330:     gain = gain << 5;
  7267  0DF6  082D               	movf	setGestureGain@gain,w
  7268  0DF7  00AA               	movwf	??_setGestureGain
  7269  0DF8  3004               	movlw	4
  7270  0DF9                     u5635:	
  7271  0DF9  35AA               	lslf	??_setGestureGain,f
  7272  0DFA  3EFF               	addlw	-1
  7273  0DFB  1D03               	skipz
  7274  0DFC  2DF9               	goto	u5635
  7275  0DFD  352A               	lslf	??_setGestureGain,w
  7276  0DFE  00AB               	movwf	??_setGestureGain+1
  7277  0DFF  082B               	movf	??_setGestureGain+1,w
  7278  0E00  00AD               	movwf	setGestureGain@gain
  7279                           
  7280                           ;APDS9960.c: 331:     val &= 0b10011111;
  7281  0E01  309F               	movlw	159
  7282  0E02  00AA               	movwf	??_setGestureGain
  7283  0E03  082A               	movf	??_setGestureGain,w
  7284  0E04  05AC               	andwf	setGestureGain@val,f
  7285                           
  7286                           ;APDS9960.c: 332:     val |= gain;
  7287  0E05  082D               	movf	setGestureGain@gain,w
  7288  0E06  00AA               	movwf	??_setGestureGain
  7289  0E07  082A               	movf	??_setGestureGain,w
  7290  0E08  04AC               	iorwf	setGestureGain@val,f
  7291                           
  7292                           ;APDS9960.c: 335:     if( !wireWriteDataByte(0xA3, val) ) {
  7293  0E09  082C               	movf	setGestureGain@val,w
  7294  0E0A  00AA               	movwf	??_setGestureGain
  7295  0E0B  082A               	movf	??_setGestureGain,w
  7296  0E0C  00A6               	movwf	wireWriteDataByte@val
  7297  0E0D  30A3               	movlw	163
  7298  0E0E  318B  2379  318D   	fcall	_wireWriteDataByte
  7299  0E11  0020               	movlb	0	; select bank0
  7300  0E12  0826               	movf	?_wireWriteDataByte,w
  7301  0E13  0427               	iorwf	?_wireWriteDataByte+1,w
  7302  0E14  1D03               	btfss	3,2
  7303  0E15  2E18               	goto	l6530
  7304                           
  7305                           ;APDS9960.c: 336:         return 0;
  7306  0E16  3000               	movlw	0
  7307  0E17  0008               	return
  7308  0E18                     l6530:	
  7309                           
  7310                           ;APDS9960.c: 339:     return 1;
  7311  0E18  3001               	movlw	1
  7312  0E19  0008               	return
  7313  0E1A                     __end_of_setGestureGain:	
  7314                           
  7315                           	psect	text11
  7316  0AE3                     __ptext11:	
  7317 ;; *************** function _setGestureExitThresh *****************
  7318 ;; Defined at:
  7319 ;;		line 310 in file "APDS9960.c"
  7320 ;; Parameters:    Size  Location     Type
  7321 ;;  threshold       1    wreg     unsigned char 
  7322 ;; Auto vars:     Size  Location     Type
  7323 ;;  threshold       1   11[BANK0 ] unsigned char 
  7324 ;; Return value:  Size  Location     Type
  7325 ;;                  1    wreg      _Bool 
  7326 ;; Registers used:
  7327 ;;		wreg, status,2, status,0, pclath, cstack
  7328 ;; Tracked objects:
  7329 ;;		On entry : 0/0
  7330 ;;		On exit  : 0/0
  7331 ;;		Unchanged: 0/0
  7332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7333 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7334 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7335 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7336 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7337 ;;Total ram usage:        2 bytes
  7338 ;; Hardware stack levels used:    1
  7339 ;; Hardware stack levels required when called:    8
  7340 ;; This function calls:
  7341 ;;		_wireWriteDataByte
  7342 ;; This function is called by:
  7343 ;;		_initialize
  7344 ;; This function uses a non-reentrant model
  7345 ;;
  7346                           
  7347                           
  7348                           ;psect for function _setGestureExitThresh
  7349  0AE3                     _setGestureExitThresh:	
  7350                           
  7351                           ;incstack = 0
  7352                           ; Regs used in _setGestureExitThresh: [wreg+status,2+status,0+pclath+cstack]
  7353                           ;setGestureExitThresh@threshold stored from wreg
  7354  0AE3  0020               	movlb	0	; select bank0
  7355  0AE4  00AB               	movwf	setGestureExitThresh@threshold
  7356                           
  7357                           ;APDS9960.c: 310: _Bool setGestureExitThresh(uint8_t threshold);APDS9960.c: 311: {;APDS9
      +                          960.c: 312:     if( !wireWriteDataByte(0xA1, threshold) ) {
  7358  0AE5  082B               	movf	setGestureExitThresh@threshold,w
  7359  0AE6  00AA               	movwf	??_setGestureExitThresh
  7360  0AE7  082A               	movf	??_setGestureExitThresh,w
  7361  0AE8  00A6               	movwf	wireWriteDataByte@val
  7362  0AE9  30A1               	movlw	161
  7363  0AEA  318B  2379  318A   	fcall	_wireWriteDataByte
  7364  0AED  0020               	movlb	0	; select bank0
  7365  0AEE  0826               	movf	?_wireWriteDataByte,w
  7366  0AEF  0427               	iorwf	?_wireWriteDataByte+1,w
  7367  0AF0  1D03               	btfss	3,2
  7368  0AF1  2AF4               	goto	l6512
  7369                           
  7370                           ;APDS9960.c: 313:         return 0;
  7371  0AF2  3000               	movlw	0
  7372  0AF3  0008               	return
  7373  0AF4                     l6512:	
  7374                           
  7375                           ;APDS9960.c: 316:     return 1;
  7376  0AF4  3001               	movlw	1
  7377  0AF5  0008               	return
  7378  0AF6                     __end_of_setGestureExitThresh:	
  7379                           
  7380                           	psect	text12
  7381  0AD0                     __ptext12:	
  7382 ;; *************** function _setGestureEnterThresh *****************
  7383 ;; Defined at:
  7384 ;;		line 300 in file "APDS9960.c"
  7385 ;; Parameters:    Size  Location     Type
  7386 ;;  threshold       1    wreg     unsigned char 
  7387 ;; Auto vars:     Size  Location     Type
  7388 ;;  threshold       1   11[BANK0 ] unsigned char 
  7389 ;; Return value:  Size  Location     Type
  7390 ;;                  1    wreg      _Bool 
  7391 ;; Registers used:
  7392 ;;		wreg, status,2, status,0, pclath, cstack
  7393 ;; Tracked objects:
  7394 ;;		On entry : 0/0
  7395 ;;		On exit  : 0/0
  7396 ;;		Unchanged: 0/0
  7397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7399 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7400 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7401 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7402 ;;Total ram usage:        2 bytes
  7403 ;; Hardware stack levels used:    1
  7404 ;; Hardware stack levels required when called:    8
  7405 ;; This function calls:
  7406 ;;		_wireWriteDataByte
  7407 ;; This function is called by:
  7408 ;;		_initialize
  7409 ;; This function uses a non-reentrant model
  7410 ;;
  7411                           
  7412                           
  7413                           ;psect for function _setGestureEnterThresh
  7414  0AD0                     _setGestureEnterThresh:	
  7415                           
  7416                           ;incstack = 0
  7417                           ; Regs used in _setGestureEnterThresh: [wreg+status,2+status,0+pclath+cstack]
  7418                           ;setGestureEnterThresh@threshold stored from wreg
  7419  0AD0  0020               	movlb	0	; select bank0
  7420  0AD1  00AB               	movwf	setGestureEnterThresh@threshold
  7421                           
  7422                           ;APDS9960.c: 300: _Bool setGestureEnterThresh(uint8_t threshold);APDS9960.c: 301: {;APDS
      +                          9960.c: 302:     if( !wireWriteDataByte(0xA0, threshold) ) {
  7423  0AD2  082B               	movf	setGestureEnterThresh@threshold,w
  7424  0AD3  00AA               	movwf	??_setGestureEnterThresh
  7425  0AD4  082A               	movf	??_setGestureEnterThresh,w
  7426  0AD5  00A6               	movwf	wireWriteDataByte@val
  7427  0AD6  30A0               	movlw	160
  7428  0AD7  318B  2379  318A   	fcall	_wireWriteDataByte
  7429  0ADA  0020               	movlb	0	; select bank0
  7430  0ADB  0826               	movf	?_wireWriteDataByte,w
  7431  0ADC  0427               	iorwf	?_wireWriteDataByte+1,w
  7432  0ADD  1D03               	btfss	3,2
  7433  0ADE  2AE1               	goto	l6502
  7434                           
  7435                           ;APDS9960.c: 303:         return 0;
  7436  0ADF  3000               	movlw	0
  7437  0AE0  0008               	return
  7438  0AE1                     l6502:	
  7439                           
  7440                           ;APDS9960.c: 306:     return 1;
  7441  0AE1  3001               	movlw	1
  7442  0AE2  0008               	return
  7443  0AE3                     __end_of_setGestureEnterThresh:	
  7444                           
  7445                           	psect	text13
  7446  07E1                     __ptext13:	
  7447 ;; *************** function _setAmbientLightGain *****************
  7448 ;; Defined at:
  7449 ;;		line 213 in file "APDS9960.c"
  7450 ;; Parameters:    Size  Location     Type
  7451 ;;  drive           1    wreg     unsigned char 
  7452 ;; Auto vars:     Size  Location     Type
  7453 ;;  drive           1   11[BANK0 ] unsigned char 
  7454 ;;  val             1   12[BANK0 ] unsigned char 
  7455 ;; Return value:  Size  Location     Type
  7456 ;;                  1    wreg      _Bool 
  7457 ;; Registers used:
  7458 ;;		wreg, status,2, status,0, pclath, cstack
  7459 ;; Tracked objects:
  7460 ;;		On entry : 0/0
  7461 ;;		On exit  : 0/0
  7462 ;;		Unchanged: 0/0
  7463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7464 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7465 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7466 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7467 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7468 ;;Total ram usage:        3 bytes
  7469 ;; Hardware stack levels used:    1
  7470 ;; Hardware stack levels required when called:    8
  7471 ;; This function calls:
  7472 ;;		_wireReadDataByte
  7473 ;;		_wireWriteDataByte
  7474 ;; This function is called by:
  7475 ;;		_initialize
  7476 ;; This function uses a non-reentrant model
  7477 ;;
  7478                           
  7479                           
  7480                           ;psect for function _setAmbientLightGain
  7481  07E1                     _setAmbientLightGain:	
  7482                           
  7483                           ;incstack = 0
  7484                           ; Regs used in _setAmbientLightGain: [wreg+status,2+status,0+pclath+cstack]
  7485                           ;setAmbientLightGain@drive stored from wreg
  7486  07E1  0020               	movlb	0	; select bank0
  7487  07E2  00AB               	movwf	setAmbientLightGain@drive
  7488                           
  7489                           ;APDS9960.c: 213: _Bool setAmbientLightGain(uint8_t drive);APDS9960.c: 214: {;APDS9960.c
      +                          : 215:     uint8_t val;;APDS9960.c: 218:     val= wireReadDataByte(0x8F);
  7490  07E3  308F               	movlw	143
  7491  07E4  318B  23CC  3187   	fcall	_wireReadDataByte
  7492  07E7  0020               	movlb	0	; select bank0
  7493  07E8  00AA               	movwf	??_setAmbientLightGain
  7494  07E9  082A               	movf	??_setAmbientLightGain,w
  7495  07EA  00AC               	movwf	setAmbientLightGain@val
  7496                           
  7497                           ;APDS9960.c: 221:     drive &= 0b00000011;
  7498  07EB  3003               	movlw	3
  7499  07EC  00AA               	movwf	??_setAmbientLightGain
  7500  07ED  082A               	movf	??_setAmbientLightGain,w
  7501  07EE  05AB               	andwf	setAmbientLightGain@drive,f
  7502                           
  7503                           ;APDS9960.c: 222:     val &= 0b11111100;
  7504  07EF  30FC               	movlw	252
  7505  07F0  00AA               	movwf	??_setAmbientLightGain
  7506  07F1  082A               	movf	??_setAmbientLightGain,w
  7507  07F2  05AC               	andwf	setAmbientLightGain@val,f
  7508                           
  7509                           ;APDS9960.c: 223:     val |= drive;
  7510  07F3  082B               	movf	setAmbientLightGain@drive,w
  7511  07F4  00AA               	movwf	??_setAmbientLightGain
  7512  07F5  082A               	movf	??_setAmbientLightGain,w
  7513  07F6  04AC               	iorwf	setAmbientLightGain@val,f
  7514                           
  7515                           ;APDS9960.c: 226:     if( !wireWriteDataByte(0x8F, val) ) {
  7516  07F7  082C               	movf	setAmbientLightGain@val,w
  7517  07F8  00AA               	movwf	??_setAmbientLightGain
  7518  07F9  082A               	movf	??_setAmbientLightGain,w
  7519  07FA  00A6               	movwf	wireWriteDataByte@val
  7520  07FB  308F               	movlw	143
  7521  07FC  318B  2379         	fcall	_wireWriteDataByte
  7522  07FE  0008               	return
  7523  07FF                     __end_of_setAmbientLightGain:	
  7524                           
  7525                           	psect	text14
  7526  0A6F                     __ptext14:	
  7527 ;; *************** function _i2c1_driver_open *****************
  7528 ;; Defined at:
  7529 ;;		line 83 in file "mcc_generated_files/i2c1_driver.c"
  7530 ;; Parameters:    Size  Location     Type
  7531 ;;		None
  7532 ;; Auto vars:     Size  Location     Type
  7533 ;;		None
  7534 ;; Return value:  Size  Location     Type
  7535 ;;		None               void
  7536 ;; Registers used:
  7537 ;;		wreg, status,2
  7538 ;; Tracked objects:
  7539 ;;		On entry : 0/0
  7540 ;;		On exit  : 0/0
  7541 ;;		Unchanged: 0/0
  7542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7543 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7544 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7545 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7546 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7547 ;;Total ram usage:        0 bytes
  7548 ;; Hardware stack levels used:    1
  7549 ;; Hardware stack levels required when called:    5
  7550 ;; This function calls:
  7551 ;;		Nothing
  7552 ;; This function is called by:
  7553 ;;		_initialize
  7554 ;;		_i2c_open
  7555 ;;		_InitI2C
  7556 ;; This function uses a non-reentrant model
  7557 ;;
  7558                           
  7559                           
  7560                           ;psect for function _i2c1_driver_open
  7561  0A6F                     _i2c1_driver_open:	
  7562                           
  7563                           ;incstack = 0
  7564                           ; Regs used in _i2c1_driver_open: [wreg+status,2]
  7565  0A6F  0024               	movlb	4	; select bank4
  7566  0A70  1A95               	btfsc	21,5	;volatile
  7567  0A71  0008               	return
  7568  0A72  0194               	clrf	20	;volatile
  7569  0A73  3028               	movlw	40
  7570  0A74  0095               	movwf	21	;volatile
  7571  0A75  0196               	clrf	22	;volatile
  7572  0A76  3003               	movlw	3
  7573  0A77  0092               	movwf	18	;volatile
  7574  0A78  0008               	return
  7575  0A79                     __end_of_i2c1_driver_open:	
  7576                           
  7577                           	psect	text15
  7578  0735                     __ptext15:	
  7579 ;; *************** function _handleGesture *****************
  7580 ;; Defined at:
  7581 ;;		line 162 in file "main.c"
  7582 ;; Parameters:    Size  Location     Type
  7583 ;;		None
  7584 ;; Auto vars:     Size  Location     Type
  7585 ;;		None
  7586 ;; Return value:  Size  Location     Type
  7587 ;;                  1    wreg      void 
  7588 ;; Registers used:
  7589 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7590 ;; Tracked objects:
  7591 ;;		On entry : 0/0
  7592 ;;		On exit  : 0/0
  7593 ;;		Unchanged: 0/0
  7594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7595 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7596 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7597 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7598 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7599 ;;Total ram usage:        1 bytes
  7600 ;; Hardware stack levels used:    1
  7601 ;; Hardware stack levels required when called:   10
  7602 ;; This function calls:
  7603 ;;		_Display_Name
  7604 ;;		_readGesture
  7605 ;; This function is called by:
  7606 ;;		_main
  7607 ;; This function uses a non-reentrant model
  7608 ;;
  7609                           
  7610                           
  7611                           ;psect for function _handleGesture
  7612  0735                     _handleGesture:	
  7613                           
  7614                           ;main.c: 168:     switch(readGesture()) {
  7615                           
  7616                           ;incstack = 0
  7617                           ; Regs used in _handleGesture: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7618  0735  2F6F               	goto	l6906
  7619  0736                     l6884:	
  7620                           
  7621                           ;main.c: 176:             printed = 0;
  7622  0736  01EE               	clrf	_printed
  7623                           
  7624                           ;main.c: 179:             name++;
  7625  0737  3001               	movlw	1
  7626  0738  07DC               	addwf	_name,f
  7627  0739  3000               	movlw	0
  7628  073A  3DDD               	addwfc	_name+1,f
  7629                           
  7630                           ;main.c: 180:             if(name > 3) {
  7631  073B  085D               	movf	_name+1,w
  7632  073C  3A80               	xorlw	128
  7633  073D  00DB               	movwf	??_handleGesture
  7634  073E  3080               	movlw	128
  7635  073F  025B               	subwf	??_handleGesture,w
  7636  0740  1D03               	skipz
  7637  0741  2F44               	goto	u6095
  7638  0742  3004               	movlw	4
  7639  0743  025C               	subwf	_name,w
  7640  0744                     u6095:	
  7641  0744  1C03               	skipc
  7642  0745  2F49               	goto	l6892
  7643                           
  7644                           ;main.c: 181:                 name = 0;
  7645  0746  0020               	movlb	0	; select bank0
  7646  0747  01DC               	clrf	_name
  7647  0748  01DD               	clrf	_name+1
  7648  0749                     l6892:	
  7649                           
  7650                           ;main.c: 183:             Display_Name(names[name]);
  7651  0749  0020               	movlb	0	; select bank0
  7652  074A  355C               	lslf	_name,w
  7653  074B  3E60               	addlw	(low (_names| (0+256)))& (0+255)
  7654  074C  0086               	movwf	6
  7655  074D  3001               	movlw	1	; select bank2/3
  7656  074E  0087               	movwf	7
  7657  074F  3F40               	moviw [0]fsr1
  7658  0750  00A5               	movwf	Display_Name@string1
  7659  0751  3F41               	moviw [1]fsr1
  7660  0752  00A6               	movwf	Display_Name@string1+1
  7661  0753  318F  27B0  3187   	fcall	_Display_Name
  7662                           
  7663                           ;main.c: 184:             break;
  7664  0756  2F8C               	goto	l6908
  7665  0757                     l6894:	
  7666                           
  7667                           ;main.c: 186:             printed = 0;
  7668  0757  01EE               	clrf	_printed
  7669                           
  7670                           ;main.c: 187:             --name;
  7671  0758  30FF               	movlw	255
  7672  0759  07DC               	addwf	_name,f
  7673  075A  30FF               	movlw	255
  7674  075B  3DDD               	addwfc	_name+1,f
  7675                           
  7676                           ;main.c: 188:             if(name < 0) {
  7677  075C  1FDD               	btfss	_name+1,7
  7678  075D  2F62               	goto	l6902
  7679                           
  7680                           ;main.c: 189:                 name = 3;
  7681  075E  3003               	movlw	3
  7682  075F  00DC               	movwf	_name
  7683  0760  3000               	movlw	0
  7684  0761  00DD               	movwf	_name+1
  7685  0762                     l6902:	
  7686                           
  7687                           ;main.c: 191:             Display_Name(names[name]);
  7688  0762  355C               	lslf	_name,w
  7689  0763  3E60               	addlw	(low (_names| (0+256)))& (0+255)
  7690  0764  0086               	movwf	6
  7691  0765  3001               	movlw	1	; select bank2/3
  7692  0766  0087               	movwf	7
  7693  0767  3F40               	moviw [0]fsr1
  7694  0768  00A5               	movwf	Display_Name@string1
  7695  0769  3F41               	moviw [1]fsr1
  7696  076A  00A6               	movwf	Display_Name@string1+1
  7697  076B  318F  27B0  3187   	fcall	_Display_Name
  7698                           
  7699                           ;main.c: 192:             break;
  7700  076E  2F8C               	goto	l6908
  7701  076F                     l6906:	
  7702  076F  3185  25DE  3187   	fcall	_readGesture
  7703                           
  7704                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7705                           ; Switch size 1, requested type "simple"
  7706                           ; Number of cases is 1, Range of values is 0 to 0
  7707                           ; switch strategies available:
  7708                           ; Name         Instructions Cycles
  7709                           ; simple_byte            4     3 (average)
  7710                           ; direct_byte            8     6 (fixed)
  7711                           ; jumptable            260     6 (fixed)
  7712                           ;	Chosen strategy is simple_byte
  7713  0772  0020               	movlb	0	; select bank0
  7714  0773  0850               	movf	?_readGesture+1,w
  7715  0774  3A00               	xorlw	0	; case 0
  7716  0775  1903               	skipnz
  7717  0776  2F78               	goto	l7220
  7718  0777  2F8C               	goto	l6908
  7719  0778                     l7220:	
  7720                           
  7721                           ; Switch size 1, requested type "simple"
  7722                           ; Number of cases is 6, Range of values is 1 to 6
  7723                           ; switch strategies available:
  7724                           ; Name         Instructions Cycles
  7725                           ; simple_byte           19    10 (average)
  7726                           ; direct_byte           21     9 (fixed)
  7727                           ; jumptable            263     9 (fixed)
  7728                           ;	Chosen strategy is simple_byte
  7729  0778  084F               	movf	?_readGesture,w
  7730  0779  3A01               	xorlw	1	; case 1
  7731  077A  1903               	skipnz
  7732  077B  2F36               	goto	l6884
  7733  077C  3A03               	xorlw	3	; case 2
  7734  077D  1903               	skipnz
  7735  077E  2F57               	goto	l6894
  7736  077F  3A01               	xorlw	1	; case 3
  7737  0780  1903               	skipnz
  7738  0781  2F8C               	goto	l6908
  7739  0782  3A07               	xorlw	7	; case 4
  7740  0783  1903               	skipnz
  7741  0784  2F8C               	goto	l6908
  7742  0785  3A01               	xorlw	1	; case 5
  7743  0786  1903               	skipnz
  7744  0787  2F8C               	goto	l6908
  7745  0788  3A03               	xorlw	3	; case 6
  7746  0789  1903               	skipnz
  7747  078A  2F8C               	goto	l6908
  7748  078B  2F8C               	goto	l6908
  7749  078C                     l6908:	
  7750                           
  7751                           ;main.c: 204:     printed = 0;
  7752  078C  0020               	movlb	0	; select bank0
  7753  078D  01EE               	clrf	_printed
  7754  078E  0008               	return
  7755  078F                     __end_of_handleGesture:	
  7756                           
  7757                           	psect	text16
  7758  05DE                     __ptext16:	
  7759 ;; *************** function _readGesture *****************
  7760 ;; Defined at:
  7761 ;;		line 556 in file "APDS9960.c"
  7762 ;; Parameters:    Size  Location     Type
  7763 ;;		None
  7764 ;; Auto vars:     Size  Location     Type
  7765 ;;  fifo_data      64    0[BANK2 ] unsigned char [64]
  7766 ;;  fifo_data2     64    0[BANK1 ] unsigned char [64]
  7767 ;;  i               2   57[BANK0 ] int 
  7768 ;;  bytes_read      2   54[BANK0 ] int 
  7769 ;;  motion          2   51[BANK0 ] int 
  7770 ;;  fifo_level      1   56[BANK0 ] unsigned char 
  7771 ;;  gstatus         1   53[BANK0 ] unsigned char 
  7772 ;; Return value:  Size  Location     Type
  7773 ;;                  2   47[BANK0 ] int 
  7774 ;; Registers used:
  7775 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7776 ;; Tracked objects:
  7777 ;;		On entry : 0/0
  7778 ;;		On exit  : 0/0
  7779 ;;		Unchanged: 0/0
  7780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7781 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7782 ;;      Locals:         0       8      64      64       0       0       0       0       0       0       0       0       
      +0       0
  7783 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7784 ;;      Totals:         0      12      64      64       0       0       0       0       0       0       0       0       
      +0       0
  7785 ;;Total ram usage:      140 bytes
  7786 ;; Hardware stack levels used:    1
  7787 ;; Hardware stack levels required when called:    9
  7788 ;; This function calls:
  7789 ;;		_decodeGesture
  7790 ;;		_getMode
  7791 ;;		_isGestureAvailable
  7792 ;;		_processGestureData
  7793 ;;		_resetGestureParameters
  7794 ;;		_wireReadDataBlock
  7795 ;;		_wireReadDataByte
  7796 ;; This function is called by:
  7797 ;;		_handleGesture
  7798 ;; This function uses a non-reentrant model
  7799 ;;
  7800                           
  7801                           
  7802                           ;psect for function _readGesture
  7803  05DE                     _readGesture:	
  7804                           
  7805                           ;APDS9960.c: 559:     int bytes_read = 0;
  7806                           
  7807                           ;incstack = 0
  7808                           ; Regs used in _readGesture: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7809  05DE  0020               	movlb	0	; select bank0
  7810  05DF  01D6               	clrf	readGesture@bytes_read
  7811  05E0  01D7               	clrf	readGesture@bytes_read+1
  7812                           
  7813                           ;APDS9960.c: 560:     uint8_t fifo_data[64];;APDS9960.c: 561:     uint8_t fifo_data2[64]
      +                          ;;APDS9960.c: 562:     uint8_t gstatus;;APDS9960.c: 563:     int motion;;APDS9960.c: 564
      +                          :     int i;;APDS9960.c: 567:     if( !isGestureAvailable() || !(getMode() & 0b01000001)
      +                           ) {
  7814  05E1  318A  22BD  3185   	fcall	_isGestureAvailable
  7815  05E4  3A00               	xorlw	0
  7816  05E5  1903               	skipnz
  7817  05E6  2DED               	goto	l6344
  7818  05E7  318A  2266  3185   	fcall	_getMode
  7819  05EA  3941               	andlw	65
  7820  05EB  1D03               	btfss	3,2
  7821  05EC  2EA2               	goto	l6348
  7822  05ED                     l6344:	
  7823                           
  7824                           ;APDS9960.c: 568:         return DIR_NONE;
  7825  05ED  0020               	movlb	0	; select bank0
  7826  05EE  01CF               	clrf	?_readGesture
  7827  05EF  01D0               	clrf	?_readGesture+1
  7828  05F0  0008               	return
  7829  05F1                     l6354:	
  7830                           ;APDS9960.c: 569:     }
  7831                           
  7832                           
  7833                           ;APDS9960.c: 584:         {;APDS9960.c: 586:          fifo_level= wireReadDataByte(0xAE)
      +                          ;
  7834  05F1  30AE               	movlw	174
  7835  05F2  318B  23CC  3185   	fcall	_wireReadDataByte
  7836  05F5  0020               	movlb	0	; select bank0
  7837  05F6  00D1               	movwf	??_readGesture
  7838  05F7  0851               	movf	??_readGesture,w
  7839  05F8  00D8               	movwf	readGesture@fifo_level
  7840                           
  7841                           ;APDS9960.c: 590:             if( fifo_level > 0) {
  7842  05F9  0858               	movf	readGesture@fifo_level,w
  7843  05FA  1903               	btfsc	3,2
  7844  05FB  2EA2               	goto	l6348
  7845                           
  7846                           ;APDS9960.c: 592:               if(fifo_level < 17)
  7847  05FC  3011               	movlw	17
  7848  05FD  0258               	subwf	readGesture@fifo_level,w
  7849  05FE  1803               	skipnc
  7850  05FF  2E04               	goto	l6362
  7851                           
  7852                           ;APDS9960.c: 593:               {;APDS9960.c: 594:                 bytes_read = wireRead
      +                          DataBlock( 0xFC,
  7853  0600  3020               	movlw	low readGesture@fifo_data
  7854  0601  00A6               	movwf	wireReadDataBlock@val
  7855  0602  3001               	movlw	high readGesture@fifo_data
  7856  0603  2E07               	goto	L1
  7857  0604                     l6362:	
  7858                           ;APDS9960.c: 597:               } else
  7859                           
  7860                           
  7861                           ;APDS9960.c: 598:               {;APDS9960.c: 599:                 bytes_read = wireRead
      +                          DataBlock( 0xFC,
  7862  0604  30A0               	movlw	low readGesture@fifo_data2
  7863  0605  00A6               	movwf	wireReadDataBlock@val
  7864  0606  3000               	movlw	high readGesture@fifo_data2
  7865  0607                     L1:	
  7866  0607  00A7               	movwf	wireReadDataBlock@val+1
  7867  0608  0858               	movf	readGesture@fifo_level,w
  7868  0609  00D1               	movwf	??_readGesture
  7869  060A  01D2               	clrf	??_readGesture+1
  7870  060B  35D1               	lslf	??_readGesture,f
  7871  060C  0DD2               	rlf	??_readGesture+1,f
  7872  060D  35D1               	lslf	??_readGesture,f
  7873  060E  0DD2               	rlf	??_readGesture+1,f
  7874  060F  0851               	movf	??_readGesture,w
  7875  0610  00A8               	movwf	wireReadDataBlock@len
  7876  0611  0852               	movf	??_readGesture+1,w
  7877  0612  00A9               	movwf	wireReadDataBlock@len+1
  7878  0613  30FC               	movlw	252
  7879  0614  318E  26C8  3185   	fcall	_wireReadDataBlock
  7880  0617  0020               	movlb	0	; select bank0
  7881  0618  0827               	movf	?_wireReadDataBlock+1,w
  7882  0619  00D7               	movwf	readGesture@bytes_read+1
  7883  061A  0826               	movf	?_wireReadDataBlock,w
  7884  061B  00D6               	movwf	readGesture@bytes_read
  7885                           
  7886                           ;APDS9960.c: 605:                 if( bytes_read == -1 )
  7887  061C  0A56               	incf	readGesture@bytes_read,w
  7888  061D  1D03               	skipz
  7889  061E  2E27               	goto	l6370
  7890  061F  0A57               	incf	readGesture@bytes_read+1,w
  7891  0620  1D03               	btfss	3,2
  7892  0621  2E27               	goto	l6370
  7893                           
  7894                           ;APDS9960.c: 606:                 {;APDS9960.c: 607:                     return 0xFF;
  7895  0622  30FF               	movlw	255
  7896  0623  00CF               	movwf	?_readGesture
  7897  0624  3000               	movlw	0
  7898  0625  00D0               	movwf	?_readGesture+1
  7899  0626  0008               	return
  7900  0627                     l6370:	
  7901                           
  7902                           ;APDS9960.c: 612:                 if( bytes_read >= 4 )
  7903  0627  0857               	movf	readGesture@bytes_read+1,w
  7904  0628  3A80               	xorlw	128
  7905  0629  00D1               	movwf	??_readGesture
  7906  062A  3080               	movlw	128
  7907  062B  0251               	subwf	??_readGesture,w
  7908  062C  1D03               	skipz
  7909  062D  2E30               	goto	u5505
  7910  062E  3004               	movlw	4
  7911  062F  0256               	subwf	readGesture@bytes_read,w
  7912  0630                     u5505:	
  7913  0630  1C03               	skipc
  7914  0631  2EA2               	goto	l6348
  7915                           
  7916                           ;APDS9960.c: 613:                 {;APDS9960.c: 615:                     for( i = 0; i <
      +                           bytes_read; i += 4 ) {
  7917  0632  0020               	movlb	0	; select bank0
  7918  0633  01D9               	clrf	readGesture@i
  7919  0634  01DA               	clrf	readGesture@i+1
  7920  0635                     l6382:	
  7921  0635  085A               	movf	readGesture@i+1,w
  7922  0636  3A80               	xorlw	128
  7923  0637  00D1               	movwf	??_readGesture
  7924  0638  0857               	movf	readGesture@bytes_read+1,w
  7925  0639  3A80               	xorlw	128
  7926  063A  0251               	subwf	??_readGesture,w
  7927  063B  1D03               	skipz
  7928  063C  2E3F               	goto	u5515
  7929  063D  0856               	movf	readGesture@bytes_read,w
  7930  063E  0259               	subwf	readGesture@i,w
  7931  063F                     u5515:	
  7932  063F  1803               	btfsc	3,0
  7933  0640  2E96               	goto	l6384
  7934                           
  7935                           ;APDS9960.c: 616:                         gesture_data_.u_data[gesture_data_.index] = fi
      +                          fo_data[i + 0];
  7936  0641  0020               	movlb	0	; select bank0
  7937  0642  0859               	movf	readGesture@i,w
  7938  0643  3E20               	addlw	(low (readGesture@fifo_data| (0+256)))& (0+255)
  7939  0644  0086               	movwf	6
  7940  0645  3001               	movlw	1	; select bank2/3
  7941  0646  0087               	movwf	7
  7942  0647  0801               	movf	1,w
  7943  0648  00D1               	movwf	??_readGesture
  7944  0649  0024               	movlb	4	; select bank4
  7945  064A  0860               	movf	(_gesture_data_^(0+512)+64),w
  7946  064B  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  7947  064C  0086               	movwf	6
  7948  064D  3002               	movlw	2	; select bank4/5
  7949  064E  0087               	movwf	7
  7950  064F  0020               	movlb	0	; select bank0
  7951  0650  0851               	movf	??_readGesture,w
  7952  0651  0081               	movwf	1
  7953                           
  7954                           ;APDS9960.c: 618:                         gesture_data_.d_data[gesture_data_.index] = fi
      +                          fo_data[i + 1];
  7955  0652  0859               	movf	readGesture@i,w
  7956  0653  3E01               	addlw	1
  7957  0654  3E20               	addlw	(low (readGesture@fifo_data| (0+256)))& (0+255)
  7958  0655  0086               	movwf	6
  7959  0656  3001               	movlw	1	; select bank2/3
  7960  0657  0087               	movwf	7
  7961  0658  0801               	movf	1,w
  7962  0659  00D1               	movwf	??_readGesture
  7963  065A  0024               	movlb	4	; select bank4
  7964  065B  0860               	movf	(_gesture_data_^(0+512)+64),w
  7965  065C  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  7966  065D  0086               	movwf	6
  7967  065E  3002               	movlw	2	; select bank4/5
  7968  065F  0087               	movwf	7
  7969  0660  0020               	movlb	0	; select bank0
  7970  0661  0851               	movf	??_readGesture,w
  7971  0662  0081               	movwf	1
  7972                           
  7973                           ;APDS9960.c: 620:                         gesture_data_.l_data[gesture_data_.index] = fi
      +                          fo_data[i + 2];
  7974  0663  0859               	movf	readGesture@i,w
  7975  0664  3E02               	addlw	2
  7976  0665  3E20               	addlw	(low (readGesture@fifo_data| (0+256)))& (0+255)
  7977  0666  0086               	movwf	6
  7978  0667  3001               	movlw	1	; select bank2/3
  7979  0668  0087               	movwf	7
  7980  0669  0801               	movf	1,w
  7981  066A  00D1               	movwf	??_readGesture
  7982  066B  0024               	movlb	4	; select bank4
  7983  066C  0860               	movf	(_gesture_data_^(0+512)+64),w
  7984  066D  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  7985  066E  0086               	movwf	6
  7986  066F  3002               	movlw	2	; select bank4/5
  7987  0670  0087               	movwf	7
  7988  0671  0020               	movlb	0	; select bank0
  7989  0672  0851               	movf	??_readGesture,w
  7990  0673  0081               	movwf	1
  7991                           
  7992                           ;APDS9960.c: 622:                         gesture_data_.r_data[gesture_data_.index] = fi
      +                          fo_data[i + 3];
  7993  0674  0859               	movf	readGesture@i,w
  7994  0675  3E03               	addlw	3
  7995  0676  3E20               	addlw	(low (readGesture@fifo_data| (0+256)))& (0+255)
  7996  0677  0086               	movwf	6
  7997  0678  3001               	movlw	1	; select bank2/3
  7998  0679  0087               	movwf	7
  7999  067A  0801               	movf	1,w
  8000  067B  00D1               	movwf	??_readGesture
  8001  067C  0024               	movlb	4	; select bank4
  8002  067D  0860               	movf	(_gesture_data_^(0+512)+64),w
  8003  067E  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  8004  067F  0086               	movwf	6
  8005  0680  3002               	movlw	2	; select bank4/5
  8006  0681  0087               	movwf	7
  8007  0682  0020               	movlb	0	; select bank0
  8008  0683  0851               	movf	??_readGesture,w
  8009  0684  0081               	movwf	1
  8010                           
  8011                           ;APDS9960.c: 624:                         gesture_data_.index++;
  8012  0685  3001               	movlw	1
  8013  0686  00D1               	movwf	??_readGesture
  8014  0687  0851               	movf	??_readGesture,w
  8015  0688  0024               	movlb	4	; select bank4
  8016  0689  07E0               	addwf	(_gesture_data_^(0+512)+64),f
  8017                           
  8018                           ;APDS9960.c: 625:                         gesture_data_.total_gestures++;
  8019  068A  3001               	movlw	1
  8020  068B  0020               	movlb	0	; select bank0
  8021  068C  00D1               	movwf	??_readGesture
  8022  068D  0851               	movf	??_readGesture,w
  8023  068E  0024               	movlb	4	; select bank4
  8024  068F  07E1               	addwf	(_gesture_data_^(0+512)+65),f
  8025                           
  8026                           ;APDS9960.c: 626:                     }
  8027  0690  3004               	movlw	4
  8028  0691  0020               	movlb	0	; select bank0
  8029  0692  07D9               	addwf	readGesture@i,f
  8030  0693  3000               	movlw	0
  8031  0694  3DDA               	addwfc	readGesture@i+1,f
  8032  0695  2E35               	goto	l6382
  8033  0696                     l6384:	
  8034                           
  8035                           ;APDS9960.c: 629:                     if( processGestureData() )
  8036  0696  3180  2069  3185   	fcall	_processGestureData
  8037  0699  3A00               	xorlw	0
  8038  069A  1903               	skipnz
  8039  069B  2E9F               	goto	l6388
  8040                           
  8041                           ;APDS9960.c: 630:                     {;APDS9960.c: 632:                         if( dec
      +                          odeGesture() ) {
  8042  069C  3183  2338  3185   	fcall	_decodeGesture
  8043  069F                     l6388:	
  8044                           
  8045                           ;APDS9960.c: 638:                     gesture_data_.index = 0;
  8046  069F  0024               	movlb	4	; select bank4
  8047  06A0  01E0               	clrf	(_gesture_data_^(0+512)+64)
  8048                           
  8049                           ;APDS9960.c: 639:                     gesture_data_.total_gestures = 0;
  8050  06A1  01E1               	clrf	(_gesture_data_^(0+512)+65)
  8051  06A2                     l6348:	
  8052                           
  8053                           ;APDS9960.c: 575:         _delay((unsigned long)((30)*(500000/4000.0)));
  8054  06A2  3005               	movlw	5
  8055  06A3  0020               	movlb	0	; select bank0
  8056  06A4  00D1               	movwf	??_readGesture
  8057  06A5  30DD               	movlw	221
  8058  06A6                     u6377:	
  8059  06A6  0B89               	decfsz	9,f
  8060  06A7  2EA6               	goto	u6377
  8061  06A8  0BD1               	decfsz	??_readGesture,f
  8062  06A9  2EA6               	goto	u6377
  8063  06AA  3200               	nop2
  8064                           
  8065                           ;APDS9960.c: 578:         gstatus = wireReadDataByte(0xAF);
  8066  06AB  30AF               	movlw	175
  8067  06AC  318B  23CC  3185   	fcall	_wireReadDataByte
  8068  06AF  0020               	movlb	0	; select bank0
  8069  06B0  00D1               	movwf	??_readGesture
  8070  06B1  0851               	movf	??_readGesture,w
  8071  06B2  00D5               	movwf	readGesture@gstatus
  8072                           
  8073                           ;APDS9960.c: 583:         if( (gstatus & 0b00000001) == 0b00000001 )
  8074  06B3  1855               	btfsc	readGesture@gstatus,0
  8075  06B4  2DF1               	goto	l6354
  8076                           
  8077                           ;APDS9960.c: 645:             _delay((unsigned long)((30)*(500000/4000.0)));
  8078  06B5  3005               	movlw	5
  8079  06B6  0020               	movlb	0	; select bank0
  8080  06B7  00D1               	movwf	??_readGesture
  8081  06B8  30DD               	movlw	221
  8082  06B9                     u6387:	
  8083  06B9  0B89               	decfsz	9,f
  8084  06BA  2EB9               	goto	u6387
  8085  06BB  0BD1               	decfsz	??_readGesture,f
  8086  06BC  2EB9               	goto	u6387
  8087  06BD  3200               	nop2
  8088                           
  8089                           ;APDS9960.c: 646:             decodeGesture();
  8090  06BE  3183  2338  3185   	fcall	_decodeGesture
  8091                           
  8092                           ;APDS9960.c: 647:             motion = gesture_motion_;
  8093  06C1  0022               	movlb	2	; select bank2
  8094  06C2  0869               	movf	(_gesture_motion_+1)^(0+256),w
  8095  06C3  0020               	movlb	0	; select bank0
  8096  06C4  00D4               	movwf	readGesture@motion+1
  8097  06C5  0022               	movlb	2	; select bank2
  8098  06C6  0868               	movf	_gesture_motion_^(0+256),w
  8099  06C7  0020               	movlb	0	; select bank0
  8100  06C8  00D3               	movwf	readGesture@motion
  8101                           
  8102                           ;APDS9960.c: 649:             resetGestureParameters();
  8103  06C9  318B  2349         	fcall	_resetGestureParameters
  8104                           
  8105                           ;APDS9960.c: 651:             return motion;
  8106  06CB  0020               	movlb	0	; select bank0
  8107  06CC  0854               	movf	readGesture@motion+1,w
  8108  06CD  00D0               	movwf	?_readGesture+1
  8109  06CE  0853               	movf	readGesture@motion,w
  8110  06CF  00CF               	movwf	?_readGesture
  8111  06D0  0008               	return
  8112  06D1                     __end_of_readGesture:	
  8113                           
  8114                           	psect	text17
  8115  0EC8                     __ptext17:	
  8116 ;; *************** function _wireReadDataBlock *****************
  8117 ;; Defined at:
  8118 ;;		line 847 in file "APDS9960.c"
  8119 ;; Parameters:    Size  Location     Type
  8120 ;;  reg             1    wreg     unsigned char 
  8121 ;;  val             2    6[BANK0 ] PTR unsigned char 
  8122 ;;		 -> readGesture@fifo_data2(64), readGesture@fifo_data(64), 
  8123 ;;  len             2    8[BANK0 ] unsigned int 
  8124 ;; Auto vars:     Size  Location     Type
  8125 ;;  reg             1   15[BANK0 ] unsigned char 
  8126 ;;  j               1   16[BANK0 ] unsigned char 
  8127 ;; Return value:  Size  Location     Type
  8128 ;;                  2    6[BANK0 ] int 
  8129 ;; Registers used:
  8130 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8131 ;; Tracked objects:
  8132 ;;		On entry : 0/0
  8133 ;;		On exit  : 0/0
  8134 ;;		Unchanged: 0/0
  8135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8136 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8137 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8138 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8139 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8140 ;;Total ram usage:       11 bytes
  8141 ;; Hardware stack levels used:    1
  8142 ;; Hardware stack levels required when called:    7
  8143 ;; This function calls:
  8144 ;;		_I2C_ReStart
  8145 ;;		_I2C_Read_Byte
  8146 ;;		_I2C_Send_NACK
  8147 ;;		_I2C_Start
  8148 ;;		_I2C_Stop
  8149 ;;		_I2C_Write_Byte
  8150 ;; This function is called by:
  8151 ;;		_readGesture
  8152 ;; This function uses a non-reentrant model
  8153 ;;
  8154                           
  8155                           
  8156                           ;psect for function _wireReadDataBlock
  8157  0EC8                     _wireReadDataBlock:	
  8158                           
  8159                           ;incstack = 0
  8160                           ; Regs used in _wireReadDataBlock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8161                           ;wireReadDataBlock@reg stored from wreg
  8162  0EC8  0020               	movlb	0	; select bank0
  8163  0EC9  00AF               	movwf	wireReadDataBlock@reg
  8164                           
  8165                           ;APDS9960.c: 851:     I2C_Start();
  8166  0ECA  3189  21B4  318E   	fcall	_I2C_Start
  8167                           
  8168                           ;APDS9960.c: 852:     I2C_Write_Byte((0x39 << 1 )| 0x00);
  8169  0ECD  3072               	movlw	114
  8170  0ECE  318B  2394  318E   	fcall	_I2C_Write_Byte
  8171                           
  8172                           ;APDS9960.c: 854:     I2C_Write_Byte(reg);
  8173  0ED1  0020               	movlb	0	; select bank0
  8174  0ED2  082F               	movf	wireReadDataBlock@reg,w
  8175  0ED3  318B  2394  318E   	fcall	_I2C_Write_Byte
  8176                           
  8177                           ;APDS9960.c: 856:     for(j= 0; j < len ; j++)
  8178  0ED6  0020               	movlb	0	; select bank0
  8179  0ED7  01B0               	clrf	wireReadDataBlock@j
  8180  0ED8                     l5934:	
  8181  0ED8  0830               	movf	wireReadDataBlock@j,w
  8182  0ED9  00AA               	movwf	??_wireReadDataBlock
  8183  0EDA  01AB               	clrf	??_wireReadDataBlock+1
  8184  0EDB  0829               	movf	wireReadDataBlock@len+1,w
  8185  0EDC  022B               	subwf	??_wireReadDataBlock+1,w
  8186  0EDD  1D03               	skipz
  8187  0EDE  2EE1               	goto	u4675
  8188  0EDF  0828               	movf	wireReadDataBlock@len,w
  8189  0EE0  022A               	subwf	??_wireReadDataBlock,w
  8190  0EE1                     u4675:	
  8191  0EE1  1803               	btfsc	3,0
  8192  0EE2  2F07               	goto	l5936
  8193                           
  8194                           ;APDS9960.c: 857:     {;APDS9960.c: 859:       I2C_ReStart();
  8195  0EE3  3189  21A5  318E   	fcall	_I2C_ReStart
  8196                           
  8197                           ;APDS9960.c: 860:       I2C_Write_Byte((0x39 << 1) | 0x01);
  8198  0EE6  3073               	movlw	115
  8199  0EE7  318B  2394  318E   	fcall	_I2C_Write_Byte
  8200                           
  8201                           ;APDS9960.c: 861:       val[j]=I2C_Read_Byte();
  8202  0EEA  318A  2284  318E   	fcall	_I2C_Read_Byte
  8203  0EED  0020               	movlb	0	; select bank0
  8204  0EEE  00AA               	movwf	??_wireReadDataBlock
  8205  0EEF  0830               	movf	wireReadDataBlock@j,w
  8206  0EF0  00AB               	movwf	??_wireReadDataBlock+1
  8207  0EF1  01AC               	clrf	??_wireReadDataBlock+2
  8208  0EF2  082B               	movf	??_wireReadDataBlock+1,w
  8209  0EF3  0726               	addwf	wireReadDataBlock@val,w
  8210  0EF4  00AD               	movwf	??_wireReadDataBlock+3
  8211  0EF5  082C               	movf	??_wireReadDataBlock+2,w
  8212  0EF6  3D27               	addwfc	wireReadDataBlock@val+1,w
  8213  0EF7  00AE               	movwf	??_wireReadDataBlock+4
  8214  0EF8  082D               	movf	??_wireReadDataBlock+3,w
  8215  0EF9  0086               	movwf	6
  8216  0EFA  082E               	movf	??_wireReadDataBlock+4,w
  8217  0EFB  0087               	movwf	7
  8218  0EFC  082A               	movf	??_wireReadDataBlock,w
  8219  0EFD  0081               	movwf	1
  8220                           
  8221                           ;APDS9960.c: 862:       I2C_Send_NACK();
  8222  0EFE  3189  21AE  318E   	fcall	_I2C_Send_NACK
  8223                           
  8224                           ;APDS9960.c: 864:     }
  8225  0F01  3001               	movlw	1
  8226  0F02  0020               	movlb	0	; select bank0
  8227  0F03  00AA               	movwf	??_wireReadDataBlock
  8228  0F04  082A               	movf	??_wireReadDataBlock,w
  8229  0F05  07B0               	addwf	wireReadDataBlock@j,f
  8230  0F06  2ED8               	goto	l5934
  8231  0F07                     l5936:	
  8232                           
  8233                           ;APDS9960.c: 866:     I2C_Stop();
  8234  0F07  3189  21BA         	fcall	_I2C_Stop
  8235                           
  8236                           ;APDS9960.c: 867:     return (int)j;
  8237  0F09  0020               	movlb	0	; select bank0
  8238  0F0A  0830               	movf	wireReadDataBlock@j,w
  8239  0F0B  00AA               	movwf	??_wireReadDataBlock
  8240  0F0C  01AB               	clrf	??_wireReadDataBlock+1
  8241  0F0D  082A               	movf	??_wireReadDataBlock,w
  8242  0F0E  00A6               	movwf	?_wireReadDataBlock
  8243  0F0F  082B               	movf	??_wireReadDataBlock+1,w
  8244  0F10  00A7               	movwf	?_wireReadDataBlock+1
  8245  0F11  0008               	return
  8246  0F12                     __end_of_wireReadDataBlock:	
  8247                           
  8248                           	psect	text18
  8249  0069                     __ptext18:	
  8250 ;; *************** function _processGestureData *****************
  8251 ;; Defined at:
  8252 ;;		line 657 in file "APDS9960.c"
  8253 ;; Parameters:    Size  Location     Type
  8254 ;;		None
  8255 ;; Auto vars:     Size  Location     Type
  8256 ;;  i               2   45[BANK0 ] int 
  8257 ;;  lr_delta        2   43[BANK0 ] int 
  8258 ;;  ud_delta        2   41[BANK0 ] int 
  8259 ;;  lr_ratio_las    2   23[BANK0 ] int 
  8260 ;;  ud_ratio_las    2   21[BANK0 ] int 
  8261 ;;  lr_ratio_fir    2   19[BANK0 ] int 
  8262 ;;  ud_ratio_fir    2   17[BANK0 ] int 
  8263 ;;  r_first         1   40[BANK0 ] unsigned char 
  8264 ;;  l_first         1   39[BANK0 ] unsigned char 
  8265 ;;  d_first         1   38[BANK0 ] unsigned char 
  8266 ;;  u_first         1   37[BANK0 ] unsigned char 
  8267 ;;  r_last          1   36[BANK0 ] unsigned char 
  8268 ;;  l_last          1   35[BANK0 ] unsigned char 
  8269 ;;  d_last          1   34[BANK0 ] unsigned char 
  8270 ;;  u_last          1   33[BANK0 ] unsigned char 
  8271 ;; Return value:  Size  Location     Type
  8272 ;;                  1    wreg      _Bool 
  8273 ;; Registers used:
  8274 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8275 ;; Tracked objects:
  8276 ;;		On entry : 0/0
  8277 ;;		On exit  : 0/0
  8278 ;;		Unchanged: 0/0
  8279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8280 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8281 ;;      Locals:         0      30       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8282 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8283 ;;      Totals:         0      32       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8284 ;;Total ram usage:       32 bytes
  8285 ;; Hardware stack levels used:    1
  8286 ;; Hardware stack levels required when called:    6
  8287 ;; This function calls:
  8288 ;;		___awdiv
  8289 ;;		___wmul
  8290 ;; This function is called by:
  8291 ;;		_readGesture
  8292 ;; This function uses a non-reentrant model
  8293 ;;
  8294                           
  8295                           
  8296                           ;psect for function _processGestureData
  8297  0069                     _processGestureData:	
  8298                           
  8299                           ;APDS9960.c: 659:     uint8_t u_first = 0;
  8300                           
  8301                           ;incstack = 0
  8302                           ; Regs used in _processGestureData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8303  0069  0020               	movlb	0	; select bank0
  8304  006A  01C5               	clrf	processGestureData@u_first
  8305                           
  8306                           ;APDS9960.c: 660:     uint8_t d_first = 0;
  8307  006B  01C6               	clrf	processGestureData@d_first
  8308                           
  8309                           ;APDS9960.c: 661:     uint8_t l_first = 0;
  8310  006C  01C7               	clrf	processGestureData@l_first
  8311                           
  8312                           ;APDS9960.c: 662:     uint8_t r_first = 0;
  8313  006D  01C8               	clrf	processGestureData@r_first
  8314                           
  8315                           ;APDS9960.c: 663:     uint8_t u_last = 0;
  8316  006E  01C1               	clrf	processGestureData@u_last
  8317                           
  8318                           ;APDS9960.c: 664:     uint8_t d_last = 0;
  8319  006F  01C2               	clrf	processGestureData@d_last
  8320                           
  8321                           ;APDS9960.c: 665:     uint8_t l_last = 0;
  8322  0070  01C3               	clrf	processGestureData@l_last
  8323                           
  8324                           ;APDS9960.c: 666:     uint8_t r_last = 0;
  8325  0071  01C4               	clrf	processGestureData@r_last
  8326                           
  8327                           ;APDS9960.c: 667:     int ud_ratio_first;;APDS9960.c: 668:     int lr_ratio_first;;APDS9
      +                          960.c: 669:     int ud_ratio_last;;APDS9960.c: 670:     int lr_ratio_last;;APDS9960.c: 6
      +                          71:     int ud_delta;;APDS9960.c: 672:     int lr_delta;;APDS9960.c: 673:     int i;;APD
      +                          S9960.c: 676:     if( gesture_data_.total_gestures <= 4 ) {
  8328  0072  3005               	movlw	5
  8329  0073  0024               	movlb	4	; select bank4
  8330  0074  0261               	subwf	(_gesture_data_^(0+512)+65),w
  8331  0075  1803               	skipnc
  8332  0076  2879               	goto	l5950
  8333  0077                     l5946:	
  8334                           
  8335                           ;APDS9960.c: 677:         return 0;
  8336  0077  3000               	movlw	0
  8337  0078  0008               	return
  8338  0079                     l5950:	
  8339                           
  8340                           ;APDS9960.c: 681:     if( (gesture_data_.total_gestures <= 32) && (gesture_data_.total_g
      +                          estures > 0) ) {
  8341  0079  3021               	movlw	33
  8342  007A  0261               	subwf	(_gesture_data_^(0+512)+65),w
  8343  007B  1803               	skipnc
  8344  007C  2943               	goto	l6000
  8345  007D  0861               	movf	(_gesture_data_^(0+512)+65),w
  8346  007E  1903               	btfsc	3,2
  8347  007F  2943               	goto	l6000
  8348                           
  8349                           ;APDS9960.c: 682: ;APDS9960.c: 685:         for( i = 0; i < gesture_data_.total_gestures
      +                          ; i++ ) {
  8350  0080  0020               	movlb	0	; select bank0
  8351  0081  01CD               	clrf	processGestureData@i
  8352  0082  01CE               	clrf	processGestureData@i+1
  8353  0083  2888               	goto	l1057
  8354  0084                     l5966:	
  8355                           ;APDS9960.c: 695:                 break;
  8356                           
  8357                           
  8358                           ;APDS9960.c: 697:         }
  8359  0084  3001               	movlw	1
  8360  0085  07CD               	addwf	processGestureData@i,f
  8361  0086  3000               	movlw	0
  8362  0087  3DCE               	addwfc	processGestureData@i+1,f
  8363  0088                     l1057:	
  8364  0088  084E               	movf	processGestureData@i+1,w
  8365  0089  3A80               	xorlw	128
  8366  008A  00AF               	movwf	??_processGestureData
  8367  008B  3080               	movlw	128
  8368  008C  022F               	subwf	??_processGestureData,w
  8369  008D  1D03               	skipz
  8370  008E  2893               	goto	u4755
  8371  008F  0024               	movlb	4	; select bank4
  8372  0090  0861               	movf	(_gesture_data_^(0+512)+65),w
  8373  0091  0020               	movlb	0	; select bank0
  8374  0092  024D               	subwf	processGestureData@i,w
  8375  0093                     u4755:	
  8376  0093  1803               	btfsc	3,0
  8377  0094  28DE               	goto	l5968
  8378                           
  8379                           ;APDS9960.c: 686:             if( (gesture_data_.u_data[i] > 10) &&
  8380  0095  0020               	movlb	0	; select bank0
  8381  0096  084D               	movf	processGestureData@i,w
  8382  0097  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  8383  0098  0086               	movwf	6
  8384  0099  3002               	movlw	2	; select bank4/5
  8385  009A  0087               	movwf	7
  8386  009B  300B               	movlw	11
  8387  009C  0201               	subwf	1,w
  8388  009D  1C03               	skipc
  8389  009E  2884               	goto	l5966
  8390  009F  084D               	movf	processGestureData@i,w
  8391  00A0  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  8392  00A1  0086               	movwf	6
  8393  00A2  3002               	movlw	2	; select bank4/5
  8394  00A3  0087               	movwf	7
  8395  00A4  300B               	movlw	11
  8396  00A5  0201               	subwf	1,w
  8397  00A6  1C03               	skipc
  8398  00A7  2884               	goto	l5966
  8399  00A8  084D               	movf	processGestureData@i,w
  8400  00A9  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  8401  00AA  0086               	movwf	6
  8402  00AB  3002               	movlw	2	; select bank4/5
  8403  00AC  0087               	movwf	7
  8404  00AD  300B               	movlw	11
  8405  00AE  0201               	subwf	1,w
  8406  00AF  1C03               	skipc
  8407  00B0  2884               	goto	l5966
  8408  00B1  084D               	movf	processGestureData@i,w
  8409  00B2  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  8410  00B3  0086               	movwf	6
  8411  00B4  3002               	movlw	2	; select bank4/5
  8412  00B5  0087               	movwf	7
  8413  00B6  300B               	movlw	11
  8414  00B7  0201               	subwf	1,w
  8415  00B8  1C03               	skipc
  8416  00B9  2884               	goto	l5966
  8417                           
  8418                           ;APDS9960.c: 689:                 (gesture_data_.r_data[i] > 10) ) {;APDS9960.c: 691:   
      +                                        u_first = gesture_data_.u_data[i];
  8419  00BA  084D               	movf	processGestureData@i,w
  8420  00BB  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  8421  00BC  0086               	movwf	6
  8422  00BD  3002               	movlw	2	; select bank4/5
  8423  00BE  0087               	movwf	7
  8424  00BF  0801               	movf	1,w
  8425  00C0  00AF               	movwf	??_processGestureData
  8426  00C1  082F               	movf	??_processGestureData,w
  8427  00C2  00C5               	movwf	processGestureData@u_first
  8428                           
  8429                           ;APDS9960.c: 692:                 d_first = gesture_data_.d_data[i];
  8430  00C3  084D               	movf	processGestureData@i,w
  8431  00C4  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  8432  00C5  0086               	movwf	6
  8433  00C6  3002               	movlw	2	; select bank4/5
  8434  00C7  0087               	movwf	7
  8435  00C8  0801               	movf	1,w
  8436  00C9  00AF               	movwf	??_processGestureData
  8437  00CA  082F               	movf	??_processGestureData,w
  8438  00CB  00C6               	movwf	processGestureData@d_first
  8439                           
  8440                           ;APDS9960.c: 693:                 l_first = gesture_data_.l_data[i];
  8441  00CC  084D               	movf	processGestureData@i,w
  8442  00CD  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  8443  00CE  0086               	movwf	6
  8444  00CF  3002               	movlw	2	; select bank4/5
  8445  00D0  0087               	movwf	7
  8446  00D1  0801               	movf	1,w
  8447  00D2  00AF               	movwf	??_processGestureData
  8448  00D3  082F               	movf	??_processGestureData,w
  8449  00D4  00C7               	movwf	processGestureData@l_first
  8450                           
  8451                           ;APDS9960.c: 694:                 r_first = gesture_data_.r_data[i];
  8452  00D5  084D               	movf	processGestureData@i,w
  8453  00D6  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  8454  00D7  0086               	movwf	6
  8455  00D8  3002               	movlw	2	; select bank4/5
  8456  00D9  0087               	movwf	7
  8457  00DA  0801               	movf	1,w
  8458  00DB  00AF               	movwf	??_processGestureData
  8459  00DC  082F               	movf	??_processGestureData,w
  8460  00DD  00C8               	movwf	processGestureData@r_first
  8461  00DE                     l5968:	
  8462                           
  8463                           ;APDS9960.c: 700:         if( (u_first == 0) || (d_first == 0) || (l_first == 0) || (r_f
      +                          irst == 0) ) {
  8464  00DE  0020               	movlb	0	; select bank0
  8465  00DF  0845               	movf	processGestureData@u_first,w
  8466  00E0  1903               	btfsc	3,2
  8467  00E1  2877               	goto	l5946
  8468  00E2  0846               	movf	processGestureData@d_first,w
  8469  00E3  1903               	btfsc	3,2
  8470  00E4  2877               	goto	l5946
  8471  00E5  0847               	movf	processGestureData@l_first,w
  8472  00E6  1903               	btfsc	3,2
  8473  00E7  2877               	goto	l5946
  8474  00E8  0848               	movf	processGestureData@r_first,w
  8475  00E9  1903               	btfsc	3,2
  8476  00EA  2877               	goto	l5946
  8477                           
  8478                           ;APDS9960.c: 706:         for( i = gesture_data_.total_gestures - 1; i >= 0; i-- ) {
  8479  00EB  0024               	movlb	4	; select bank4
  8480  00EC  0861               	movf	(_gesture_data_^(0+512)+65),w
  8481  00ED  3EFF               	addlw	255
  8482  00EE  0020               	movlb	0	; select bank0
  8483  00EF  00CD               	movwf	processGestureData@i
  8484  00F0  30FF               	movlw	255
  8485  00F1  1803               	skipnc
  8486  00F2  3000               	movlw	0
  8487  00F3  00CE               	movwf	processGestureData@i+1
  8488                           
  8489                           ;APDS9960.c: 717:                 break;
  8490  00F4  28F9               	goto	l5982
  8491  00F5                     l5996:	
  8492                           
  8493                           ;APDS9960.c: 719:         }
  8494  00F5  30FF               	movlw	255
  8495  00F6  07CD               	addwf	processGestureData@i,f
  8496  00F7  30FF               	movlw	255
  8497  00F8  3DCE               	addwfc	processGestureData@i+1,f
  8498  00F9                     l5982:	
  8499  00F9  1BCE               	btfsc	processGestureData@i+1,7
  8500  00FA  2943               	goto	l6000
  8501                           
  8502                           ;APDS9960.c: 708:             if( (gesture_data_.u_data[i] > 10) &&
  8503  00FB  084D               	movf	processGestureData@i,w
  8504  00FC  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  8505  00FD  0086               	movwf	6
  8506  00FE  3002               	movlw	2	; select bank4/5
  8507  00FF  0087               	movwf	7
  8508  0100  300B               	movlw	11
  8509  0101  0201               	subwf	1,w
  8510  0102  1C03               	skipc
  8511  0103  28F5               	goto	l5996
  8512  0104  084D               	movf	processGestureData@i,w
  8513  0105  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  8514  0106  0086               	movwf	6
  8515  0107  3002               	movlw	2	; select bank4/5
  8516  0108  0087               	movwf	7
  8517  0109  300B               	movlw	11
  8518  010A  0201               	subwf	1,w
  8519  010B  1C03               	skipc
  8520  010C  28F5               	goto	l5996
  8521  010D  084D               	movf	processGestureData@i,w
  8522  010E  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  8523  010F  0086               	movwf	6
  8524  0110  3002               	movlw	2	; select bank4/5
  8525  0111  0087               	movwf	7
  8526  0112  300B               	movlw	11
  8527  0113  0201               	subwf	1,w
  8528  0114  1C03               	skipc
  8529  0115  28F5               	goto	l5996
  8530  0116  084D               	movf	processGestureData@i,w
  8531  0117  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  8532  0118  0086               	movwf	6
  8533  0119  3002               	movlw	2	; select bank4/5
  8534  011A  0087               	movwf	7
  8535  011B  300B               	movlw	11
  8536  011C  0201               	subwf	1,w
  8537  011D  1C03               	skipc
  8538  011E  28F5               	goto	l5996
  8539                           
  8540                           ;APDS9960.c: 711:                 (gesture_data_.r_data[i] > 10) ) {;APDS9960.c: 713:   
      +                                        u_last = gesture_data_.u_data[i];
  8541  011F  084D               	movf	processGestureData@i,w
  8542  0120  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  8543  0121  0086               	movwf	6
  8544  0122  3002               	movlw	2	; select bank4/5
  8545  0123  0087               	movwf	7
  8546  0124  0801               	movf	1,w
  8547  0125  00AF               	movwf	??_processGestureData
  8548  0126  082F               	movf	??_processGestureData,w
  8549  0127  00C1               	movwf	processGestureData@u_last
  8550                           
  8551                           ;APDS9960.c: 714:                 d_last = gesture_data_.d_data[i];
  8552  0128  084D               	movf	processGestureData@i,w
  8553  0129  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  8554  012A  0086               	movwf	6
  8555  012B  3002               	movlw	2	; select bank4/5
  8556  012C  0087               	movwf	7
  8557  012D  0801               	movf	1,w
  8558  012E  00AF               	movwf	??_processGestureData
  8559  012F  082F               	movf	??_processGestureData,w
  8560  0130  00C2               	movwf	processGestureData@d_last
  8561                           
  8562                           ;APDS9960.c: 715:                 l_last = gesture_data_.l_data[i];
  8563  0131  084D               	movf	processGestureData@i,w
  8564  0132  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  8565  0133  0086               	movwf	6
  8566  0134  3002               	movlw	2	; select bank4/5
  8567  0135  0087               	movwf	7
  8568  0136  0801               	movf	1,w
  8569  0137  00AF               	movwf	??_processGestureData
  8570  0138  082F               	movf	??_processGestureData,w
  8571  0139  00C3               	movwf	processGestureData@l_last
  8572                           
  8573                           ;APDS9960.c: 716:                 r_last = gesture_data_.r_data[i];
  8574  013A  084D               	movf	processGestureData@i,w
  8575  013B  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  8576  013C  0086               	movwf	6
  8577  013D  3002               	movlw	2	; select bank4/5
  8578  013E  0087               	movwf	7
  8579  013F  0801               	movf	1,w
  8580  0140  00AF               	movwf	??_processGestureData
  8581  0141  082F               	movf	??_processGestureData,w
  8582  0142  00C4               	movwf	processGestureData@r_last
  8583  0143                     l6000:	
  8584                           
  8585                           ;APDS9960.c: 723:     ud_ratio_first = ((u_first - d_first) * 100) / (u_first + d_first)
      +                          ;
  8586  0143  0020               	movlb	0	; select bank0
  8587  0144  0845               	movf	processGestureData@u_first,w
  8588  0145  0746               	addwf	processGestureData@d_first,w
  8589  0146  00A6               	movwf	___awdiv@divisor
  8590  0147  01A7               	clrf	___awdiv@divisor+1
  8591  0148  0DA7               	rlf	___awdiv@divisor+1,f
  8592  0149  0846               	movf	processGestureData@d_first,w
  8593  014A  0245               	subwf	processGestureData@u_first,w
  8594  014B  00A0               	movwf	___wmul@multiplier
  8595  014C  01A1               	clrf	___wmul@multiplier+1
  8596  014D  1C03               	skipc
  8597  014E  03A1               	decf	___wmul@multiplier+1,f
  8598  014F  3064               	movlw	100
  8599  0150  00A2               	movwf	___wmul@multiplicand
  8600  0151  3000               	movlw	0
  8601  0152  00A3               	movwf	___wmul@multiplicand+1
  8602  0153  318B  23B0  3180   	fcall	___wmul
  8603  0156  0020               	movlb	0	; select bank0
  8604  0157  0821               	movf	?___wmul+1,w
  8605  0158  00A9               	movwf	___awdiv@dividend+1
  8606  0159  0820               	movf	?___wmul,w
  8607  015A  00A8               	movwf	___awdiv@dividend
  8608  015B  3187  278F  3180   	fcall	___awdiv
  8609  015E  0020               	movlb	0	; select bank0
  8610  015F  0827               	movf	?___awdiv+1,w
  8611  0160  00B2               	movwf	processGestureData@ud_ratio_first+1
  8612  0161  0826               	movf	?___awdiv,w
  8613  0162  00B1               	movwf	processGestureData@ud_ratio_first
  8614                           
  8615                           ;APDS9960.c: 724:     lr_ratio_first = ((l_first - r_first) * 100) / (l_first + r_first)
      +                          ;
  8616  0163  0847               	movf	processGestureData@l_first,w
  8617  0164  0748               	addwf	processGestureData@r_first,w
  8618  0165  00A6               	movwf	___awdiv@divisor
  8619  0166  01A7               	clrf	___awdiv@divisor+1
  8620  0167  0DA7               	rlf	___awdiv@divisor+1,f
  8621  0168  0848               	movf	processGestureData@r_first,w
  8622  0169  0247               	subwf	processGestureData@l_first,w
  8623  016A  00A0               	movwf	___wmul@multiplier
  8624  016B  01A1               	clrf	___wmul@multiplier+1
  8625  016C  1C03               	skipc
  8626  016D  03A1               	decf	___wmul@multiplier+1,f
  8627  016E  3064               	movlw	100
  8628  016F  00A2               	movwf	___wmul@multiplicand
  8629  0170  3000               	movlw	0
  8630  0171  00A3               	movwf	___wmul@multiplicand+1
  8631  0172  318B  23B0  3180   	fcall	___wmul
  8632  0175  0020               	movlb	0	; select bank0
  8633  0176  0821               	movf	?___wmul+1,w
  8634  0177  00A9               	movwf	___awdiv@dividend+1
  8635  0178  0820               	movf	?___wmul,w
  8636  0179  00A8               	movwf	___awdiv@dividend
  8637  017A  3187  278F  3180   	fcall	___awdiv
  8638  017D  0020               	movlb	0	; select bank0
  8639  017E  0827               	movf	?___awdiv+1,w
  8640  017F  00B4               	movwf	processGestureData@lr_ratio_first+1
  8641  0180  0826               	movf	?___awdiv,w
  8642  0181  00B3               	movwf	processGestureData@lr_ratio_first
  8643                           
  8644                           ;APDS9960.c: 725:     ud_ratio_last = ((u_last - d_last) * 100) / (u_last + d_last);
  8645  0182  0841               	movf	processGestureData@u_last,w
  8646  0183  0742               	addwf	processGestureData@d_last,w
  8647  0184  00A6               	movwf	___awdiv@divisor
  8648  0185  01A7               	clrf	___awdiv@divisor+1
  8649  0186  0DA7               	rlf	___awdiv@divisor+1,f
  8650  0187  0842               	movf	processGestureData@d_last,w
  8651  0188  0241               	subwf	processGestureData@u_last,w
  8652  0189  00A0               	movwf	___wmul@multiplier
  8653  018A  01A1               	clrf	___wmul@multiplier+1
  8654  018B  1C03               	skipc
  8655  018C  03A1               	decf	___wmul@multiplier+1,f
  8656  018D  3064               	movlw	100
  8657  018E  00A2               	movwf	___wmul@multiplicand
  8658  018F  3000               	movlw	0
  8659  0190  00A3               	movwf	___wmul@multiplicand+1
  8660  0191  318B  23B0  3180   	fcall	___wmul
  8661  0194  0020               	movlb	0	; select bank0
  8662  0195  0821               	movf	?___wmul+1,w
  8663  0196  00A9               	movwf	___awdiv@dividend+1
  8664  0197  0820               	movf	?___wmul,w
  8665  0198  00A8               	movwf	___awdiv@dividend
  8666  0199  3187  278F  3180   	fcall	___awdiv
  8667  019C  0020               	movlb	0	; select bank0
  8668  019D  0827               	movf	?___awdiv+1,w
  8669  019E  00B6               	movwf	processGestureData@ud_ratio_last+1
  8670  019F  0826               	movf	?___awdiv,w
  8671  01A0  00B5               	movwf	processGestureData@ud_ratio_last
  8672                           
  8673                           ;APDS9960.c: 726:     lr_ratio_last = ((l_last - r_last) * 100) / (l_last + r_last);
  8674  01A1  0843               	movf	processGestureData@l_last,w
  8675  01A2  0744               	addwf	processGestureData@r_last,w
  8676  01A3  00A6               	movwf	___awdiv@divisor
  8677  01A4  01A7               	clrf	___awdiv@divisor+1
  8678  01A5  0DA7               	rlf	___awdiv@divisor+1,f
  8679  01A6  0844               	movf	processGestureData@r_last,w
  8680  01A7  0243               	subwf	processGestureData@l_last,w
  8681  01A8  00A0               	movwf	___wmul@multiplier
  8682  01A9  01A1               	clrf	___wmul@multiplier+1
  8683  01AA  1C03               	skipc
  8684  01AB  03A1               	decf	___wmul@multiplier+1,f
  8685  01AC  3064               	movlw	100
  8686  01AD  00A2               	movwf	___wmul@multiplicand
  8687  01AE  3000               	movlw	0
  8688  01AF  00A3               	movwf	___wmul@multiplicand+1
  8689  01B0  318B  23B0  3180   	fcall	___wmul
  8690  01B3  0020               	movlb	0	; select bank0
  8691  01B4  0821               	movf	?___wmul+1,w
  8692  01B5  00A9               	movwf	___awdiv@dividend+1
  8693  01B6  0820               	movf	?___wmul,w
  8694  01B7  00A8               	movwf	___awdiv@dividend
  8695  01B8  3187  278F  3180   	fcall	___awdiv
  8696  01BB  0020               	movlb	0	; select bank0
  8697  01BC  0827               	movf	?___awdiv+1,w
  8698  01BD  00B8               	movwf	processGestureData@lr_ratio_last+1
  8699  01BE  0826               	movf	?___awdiv,w
  8700  01BF  00B7               	movwf	processGestureData@lr_ratio_last
  8701                           
  8702                           ;APDS9960.c: 729:     ud_delta = ud_ratio_last - ud_ratio_first;
  8703  01C0  0831               	movf	processGestureData@ud_ratio_first,w
  8704  01C1  0235               	subwf	processGestureData@ud_ratio_last,w
  8705  01C2  00C9               	movwf	processGestureData@ud_delta
  8706  01C3  0832               	movf	processGestureData@ud_ratio_first+1,w
  8707  01C4  3B36               	subwfb	processGestureData@ud_ratio_last+1,w
  8708  01C5  00CA               	movwf	processGestureData@ud_delta+1
  8709                           
  8710                           ;APDS9960.c: 730:     lr_delta = lr_ratio_last - lr_ratio_first;
  8711  01C6  0833               	movf	processGestureData@lr_ratio_first,w
  8712  01C7  0237               	subwf	processGestureData@lr_ratio_last,w
  8713  01C8  00CB               	movwf	processGestureData@lr_delta
  8714  01C9  0834               	movf	processGestureData@lr_ratio_first+1,w
  8715  01CA  3B38               	subwfb	processGestureData@lr_ratio_last+1,w
  8716  01CB  00CC               	movwf	processGestureData@lr_delta+1
  8717                           
  8718                           ;APDS9960.c: 733:     gesture_ud_delta_ += ud_delta;
  8719  01CC  0849               	movf	processGestureData@ud_delta,w
  8720  01CD  07E8               	addwf	_gesture_ud_delta_,f
  8721  01CE  084A               	movf	processGestureData@ud_delta+1,w
  8722  01CF  3DE9               	addwfc	_gesture_ud_delta_+1,f
  8723                           
  8724                           ;APDS9960.c: 734:     gesture_lr_delta_ += lr_delta;
  8725  01D0  084B               	movf	processGestureData@lr_delta,w
  8726  01D1  07E6               	addwf	_gesture_lr_delta_,f
  8727  01D2  084C               	movf	processGestureData@lr_delta+1,w
  8728  01D3  3DE7               	addwfc	_gesture_lr_delta_+1,f
  8729                           
  8730                           ;APDS9960.c: 737:     if( gesture_ud_delta_ >= 50 ) {
  8731  01D4  0869               	movf	_gesture_ud_delta_+1,w
  8732  01D5  3A80               	xorlw	128
  8733  01D6  00AF               	movwf	??_processGestureData
  8734  01D7  3080               	movlw	128
  8735  01D8  022F               	subwf	??_processGestureData,w
  8736  01D9  1D03               	skipz
  8737  01DA  29DD               	goto	u4855
  8738  01DB  3032               	movlw	50
  8739  01DC  0268               	subwf	_gesture_ud_delta_,w
  8740  01DD                     u4855:	
  8741  01DD  1C03               	skipc
  8742  01DE  29E4               	goto	l6014
  8743                           
  8744                           ;APDS9960.c: 738:         gesture_ud_count_ = 1;
  8745  01DF  3001               	movlw	1
  8746  01E0  0020               	movlb	0	; select bank0
  8747  01E1  00E4               	movwf	_gesture_ud_count_
  8748  01E2  3000               	movlw	0
  8749  01E3  29F4               	goto	L2
  8750  01E4                     l6014:	
  8751                           ;APDS9960.c: 739:     } else if( gesture_ud_delta_ <= -50 ) {
  8752                           
  8753  01E4  0020               	movlb	0	; select bank0
  8754  01E5  0869               	movf	_gesture_ud_delta_+1,w
  8755  01E6  3A80               	xorlw	128
  8756  01E7  00AF               	movwf	??_processGestureData
  8757  01E8  307F               	movlw	127
  8758  01E9  022F               	subwf	??_processGestureData,w
  8759  01EA  1D03               	skipz
  8760  01EB  29EE               	goto	u4865
  8761  01EC  30CF               	movlw	207
  8762  01ED  0268               	subwf	_gesture_ud_delta_,w
  8763  01EE                     u4865:	
  8764  01EE  1803               	skipnc
  8765  01EF  29F6               	goto	l6018
  8766                           
  8767                           ;APDS9960.c: 740:         gesture_ud_count_ = -1;
  8768  01F0  30FF               	movlw	255
  8769  01F1  0020               	movlb	0	; select bank0
  8770  01F2  00E4               	movwf	_gesture_ud_count_
  8771  01F3  30FF               	movlw	255
  8772  01F4                     L2:	
  8773  01F4  00E5               	movwf	_gesture_ud_count_+1
  8774                           
  8775                           ;APDS9960.c: 741:     } else {
  8776  01F5  29F9               	goto	l6020
  8777  01F6                     l6018:	
  8778                           
  8779                           ;APDS9960.c: 742:         gesture_ud_count_ = 0;
  8780  01F6  0020               	movlb	0	; select bank0
  8781  01F7  01E4               	clrf	_gesture_ud_count_
  8782  01F8  01E5               	clrf	_gesture_ud_count_+1
  8783  01F9                     l6020:	
  8784                           
  8785                           ;APDS9960.c: 746:     if( gesture_lr_delta_ >= 50 ) {
  8786  01F9  0867               	movf	_gesture_lr_delta_+1,w
  8787  01FA  3A80               	xorlw	128
  8788  01FB  00AF               	movwf	??_processGestureData
  8789  01FC  3080               	movlw	128
  8790  01FD  022F               	subwf	??_processGestureData,w
  8791  01FE  1D03               	skipz
  8792  01FF  2A02               	goto	u4875
  8793  0200  3032               	movlw	50
  8794  0201  0266               	subwf	_gesture_lr_delta_,w
  8795  0202                     u4875:	
  8796  0202  1C03               	skipc
  8797  0203  2A09               	goto	l6024
  8798                           
  8799                           ;APDS9960.c: 747:         gesture_lr_count_ = 1;
  8800  0204  3001               	movlw	1
  8801  0205  0020               	movlb	0	; select bank0
  8802  0206  00E2               	movwf	_gesture_lr_count_
  8803  0207  3000               	movlw	0
  8804  0208  2A19               	goto	L3
  8805  0209                     l6024:	
  8806                           ;APDS9960.c: 748:     } else if( gesture_lr_delta_ <= -50 ) {
  8807                           
  8808  0209  0020               	movlb	0	; select bank0
  8809  020A  0867               	movf	_gesture_lr_delta_+1,w
  8810  020B  3A80               	xorlw	128
  8811  020C  00AF               	movwf	??_processGestureData
  8812  020D  307F               	movlw	127
  8813  020E  022F               	subwf	??_processGestureData,w
  8814  020F  1D03               	skipz
  8815  0210  2A13               	goto	u4885
  8816  0211  30CF               	movlw	207
  8817  0212  0266               	subwf	_gesture_lr_delta_,w
  8818  0213                     u4885:	
  8819  0213  1803               	skipnc
  8820  0214  2A1B               	goto	l6028
  8821                           
  8822                           ;APDS9960.c: 749:         gesture_lr_count_ = -1;
  8823  0215  30FF               	movlw	255
  8824  0216  0020               	movlb	0	; select bank0
  8825  0217  00E2               	movwf	_gesture_lr_count_
  8826  0218  30FF               	movlw	255
  8827  0219                     L3:	
  8828  0219  00E3               	movwf	_gesture_lr_count_+1
  8829                           
  8830                           ;APDS9960.c: 750:     } else {
  8831  021A  2A1E               	goto	l6030
  8832  021B                     l6028:	
  8833                           
  8834                           ;APDS9960.c: 751:         gesture_lr_count_ = 0;
  8835  021B  0020               	movlb	0	; select bank0
  8836  021C  01E2               	clrf	_gesture_lr_count_
  8837  021D  01E3               	clrf	_gesture_lr_count_+1
  8838  021E                     l6030:	
  8839                           
  8840                           ;APDS9960.c: 755:     if( (gesture_ud_count_ == 0) && (gesture_lr_count_ == 0) ) {
  8841  021E  0864               	movf	_gesture_ud_count_,w
  8842  021F  0465               	iorwf	_gesture_ud_count_+1,w
  8843  0220  1D03               	btfss	3,2
  8844  0221  2AC5               	goto	l6074
  8845  0222  0862               	movf	_gesture_lr_count_,w
  8846  0223  0463               	iorwf	_gesture_lr_count_+1,w
  8847  0224  1D03               	btfss	3,2
  8848  0225  2AC5               	goto	l6074
  8849                           
  8850                           ;APDS9960.c: 756:         if( (((ud_delta) > 0 ? (ud_delta) : -(ud_delta)) < 20) && (((l
      +                          r_delta) > 0 ? (lr_delta) : -(lr_delta)) < 20) ) {
  8851  0226  084A               	movf	processGestureData@ud_delta+1,w
  8852  0227  3A80               	xorlw	128
  8853  0228  00AF               	movwf	??_processGestureData
  8854  0229  3080               	movlw	128
  8855  022A  022F               	subwf	??_processGestureData,w
  8856  022B  1D03               	skipz
  8857  022C  2A2F               	goto	u4915
  8858  022D  3001               	movlw	1
  8859  022E  0249               	subwf	processGestureData@ud_delta,w
  8860  022F                     u4915:	
  8861  022F  1803               	skipnc
  8862  0230  2A3E               	goto	l6038
  8863  0231  0020               	movlb	0	; select bank0
  8864  0232  0949               	comf	processGestureData@ud_delta,w
  8865  0233  00AF               	movwf	??_processGestureData
  8866  0234  094A               	comf	processGestureData@ud_delta+1,w
  8867  0235  00B0               	movwf	??_processGestureData+1
  8868  0236  0AAF               	incf	??_processGestureData,f
  8869  0237  1903               	skipnz
  8870  0238  0AB0               	incf	??_processGestureData+1,f
  8871  0239  082F               	movf	??_processGestureData,w
  8872  023A  00B9               	movwf	_processGestureData$1527
  8873  023B  0830               	movf	??_processGestureData+1,w
  8874  023C  00BA               	movwf	_processGestureData$1527+1
  8875  023D  2A43               	goto	l1080
  8876  023E                     l6038:	
  8877  023E  0020               	movlb	0	; select bank0
  8878  023F  084A               	movf	processGestureData@ud_delta+1,w
  8879  0240  00BA               	movwf	_processGestureData$1527+1
  8880  0241  0849               	movf	processGestureData@ud_delta,w
  8881  0242  00B9               	movwf	_processGestureData$1527
  8882  0243                     l1080:	
  8883  0243  083A               	movf	_processGestureData$1527+1,w
  8884  0244  3A80               	xorlw	128
  8885  0245  00AF               	movwf	??_processGestureData
  8886  0246  3080               	movlw	128
  8887  0247  022F               	subwf	??_processGestureData,w
  8888  0248  1D03               	skipz
  8889  0249  2A4C               	goto	u4925
  8890  024A  3014               	movlw	20
  8891  024B  0239               	subwf	_processGestureData$1527,w
  8892  024C                     u4925:	
  8893  024C  1803               	skipnc
  8894  024D  2877               	goto	l5946
  8895  024E  0020               	movlb	0	; select bank0
  8896  024F  084C               	movf	processGestureData@lr_delta+1,w
  8897  0250  3A80               	xorlw	128
  8898  0251  00AF               	movwf	??_processGestureData
  8899  0252  3080               	movlw	128
  8900  0253  022F               	subwf	??_processGestureData,w
  8901  0254  1D03               	skipz
  8902  0255  2A58               	goto	u4935
  8903  0256  3001               	movlw	1
  8904  0257  024B               	subwf	processGestureData@lr_delta,w
  8905  0258                     u4935:	
  8906  0258  1803               	skipnc
  8907  0259  2A67               	goto	l6044
  8908  025A  0020               	movlb	0	; select bank0
  8909  025B  094B               	comf	processGestureData@lr_delta,w
  8910  025C  00AF               	movwf	??_processGestureData
  8911  025D  094C               	comf	processGestureData@lr_delta+1,w
  8912  025E  00B0               	movwf	??_processGestureData+1
  8913  025F  0AAF               	incf	??_processGestureData,f
  8914  0260  1903               	skipnz
  8915  0261  0AB0               	incf	??_processGestureData+1,f
  8916  0262  082F               	movf	??_processGestureData,w
  8917  0263  00BB               	movwf	_processGestureData$1528
  8918  0264  0830               	movf	??_processGestureData+1,w
  8919  0265  00BC               	movwf	_processGestureData$1528+1
  8920  0266  2A6C               	goto	l1084
  8921  0267                     l6044:	
  8922  0267  0020               	movlb	0	; select bank0
  8923  0268  084C               	movf	processGestureData@lr_delta+1,w
  8924  0269  00BC               	movwf	_processGestureData$1528+1
  8925  026A  084B               	movf	processGestureData@lr_delta,w
  8926  026B  00BB               	movwf	_processGestureData$1528
  8927  026C                     l1084:	
  8928  026C  083C               	movf	_processGestureData$1528+1,w
  8929  026D  3A80               	xorlw	128
  8930  026E  00AF               	movwf	??_processGestureData
  8931  026F  3080               	movlw	128
  8932  0270  022F               	subwf	??_processGestureData,w
  8933  0271  1D03               	skipz
  8934  0272  2A75               	goto	u4945
  8935  0273  3014               	movlw	20
  8936  0274  023B               	subwf	_processGestureData$1528,w
  8937  0275                     u4945:	
  8938  0275  1803               	skipnc
  8939  0276  2877               	goto	l5946
  8940                           
  8941                           ;APDS9960.c: 757: ;APDS9960.c: 759:             if( (ud_delta == 0) && (lr_delta == 0) )
      +                           {
  8942  0277  0020               	movlb	0	; select bank0
  8943  0278  0849               	movf	processGestureData@ud_delta,w
  8944  0279  044A               	iorwf	processGestureData@ud_delta+1,w
  8945  027A  1D03               	btfss	3,2
  8946  027B  2A85               	goto	l6052
  8947  027C  084B               	movf	processGestureData@lr_delta,w
  8948  027D  044C               	iorwf	processGestureData@lr_delta+1,w
  8949  027E  1D03               	btfss	3,2
  8950  027F  2A85               	goto	l6052
  8951                           
  8952                           ;APDS9960.c: 760:                 gesture_near_count_++;
  8953  0280  3001               	movlw	1
  8954  0281  07E0               	addwf	_gesture_near_count_,f
  8955  0282  3000               	movlw	0
  8956  0283  3DE1               	addwfc	_gesture_near_count_+1,f
  8957                           
  8958                           ;APDS9960.c: 761:             } else if( (ud_delta != 0) || (lr_delta != 0) ) {
  8959  0284  2A92               	goto	l1086
  8960  0285                     l6052:	
  8961  0285  0849               	movf	processGestureData@ud_delta,w
  8962  0286  044A               	iorwf	processGestureData@ud_delta+1,w
  8963  0287  1D03               	btfss	3,2
  8964  0288  2A8D               	goto	l6056
  8965  0289  084B               	movf	processGestureData@lr_delta,w
  8966  028A  044C               	iorwf	processGestureData@lr_delta+1,w
  8967  028B  1903               	btfsc	3,2
  8968  028C  2A92               	goto	l1086
  8969  028D                     l6056:	
  8970                           
  8971                           ;APDS9960.c: 762:                 gesture_far_count_++;
  8972  028D  3001               	movlw	1
  8973  028E  0021               	movlb	1	; select bank1
  8974  028F  07E2               	addwf	_gesture_far_count_^(0+128),f
  8975  0290  3000               	movlw	0
  8976  0291  3DE3               	addwfc	(_gesture_far_count_+1)^(0+128),f
  8977  0292                     l1086:	
  8978                           
  8979                           ;APDS9960.c: 765:             if( (gesture_near_count_ >= 10) && (gesture_far_count_ >= 
      +                          2) ) {
  8980  0292  0020               	movlb	0	; select bank0
  8981  0293  0861               	movf	_gesture_near_count_+1,w
  8982  0294  3A80               	xorlw	128
  8983  0295  00AF               	movwf	??_processGestureData
  8984  0296  3080               	movlw	128
  8985  0297  022F               	subwf	??_processGestureData,w
  8986  0298  1D03               	skipz
  8987  0299  2A9C               	goto	u4995
  8988  029A  300A               	movlw	10
  8989  029B  0260               	subwf	_gesture_near_count_,w
  8990  029C                     u4995:	
  8991  029C  1C03               	skipc
  8992  029D  2877               	goto	l5946
  8993  029E  0021               	movlb	1	; select bank1
  8994  029F  0863               	movf	(_gesture_far_count_+1)^(0+128),w
  8995  02A0  3A80               	xorlw	128
  8996  02A1  0020               	movlb	0	; select bank0
  8997  02A2  00AF               	movwf	??_processGestureData
  8998  02A3  3080               	movlw	128
  8999  02A4  022F               	subwf	??_processGestureData,w
  9000  02A5  1D03               	skipz
  9001  02A6  2AAA               	goto	u5005
  9002  02A7  3002               	movlw	2
  9003  02A8  0021               	movlb	1	; select bank1
  9004  02A9  0262               	subwf	_gesture_far_count_^(0+128),w
  9005  02AA                     u5005:	
  9006  02AA  1C03               	skipc
  9007  02AB  2877               	goto	l5946
  9008                           
  9009                           ;APDS9960.c: 766:                 if( (ud_delta == 0) && (lr_delta == 0) ) {
  9010  02AC  0020               	movlb	0	; select bank0
  9011  02AD  0849               	movf	processGestureData@ud_delta,w
  9012  02AE  044A               	iorwf	processGestureData@ud_delta+1,w
  9013  02AF  1D03               	btfss	3,2
  9014  02B0  2AB7               	goto	l6066
  9015  02B1  084B               	movf	processGestureData@lr_delta,w
  9016  02B2  044C               	iorwf	processGestureData@lr_delta+1,w
  9017  02B3  1D03               	btfss	3,2
  9018  02B4  2AB7               	goto	l6066
  9019                           
  9020                           ;APDS9960.c: 767:                     gesture_state_ = NEAR_STATE;
  9021  02B5  3001               	movlw	1
  9022  02B6  2AC0               	goto	L4
  9023  02B7                     l6066:	
  9024                           ;APDS9960.c: 768:                 } else if( (ud_delta != 0) && (lr_delta != 0) ) {
  9025                           
  9026  02B7  0849               	movf	processGestureData@ud_delta,w
  9027  02B8  044A               	iorwf	processGestureData@ud_delta+1,w
  9028  02B9  1903               	btfsc	3,2
  9029  02BA  2AC3               	goto	l1092
  9030  02BB  084B               	movf	processGestureData@lr_delta,w
  9031  02BC  044C               	iorwf	processGestureData@lr_delta+1,w
  9032  02BD  1903               	btfsc	3,2
  9033  02BE  2AC3               	goto	l1092
  9034                           
  9035                           ;APDS9960.c: 769:                     gesture_state_ = FAR_STATE;
  9036  02BF  3002               	movlw	2
  9037  02C0                     L4:	
  9038  02C0  00DE               	movwf	_gesture_state_
  9039  02C1  3000               	movlw	0
  9040  02C2  00DF               	movwf	_gesture_state_+1
  9041  02C3                     l1092:	
  9042                           
  9043                           ;APDS9960.c: 771:                 return 1;
  9044  02C3  3001               	movlw	1
  9045  02C4  0008               	return
  9046  02C5                     l6074:	
  9047                           
  9048                           ;APDS9960.c: 775:         if( (((ud_delta) > 0 ? (ud_delta) : -(ud_delta)) < 20) && (((l
      +                          r_delta) > 0 ? (lr_delta) : -(lr_delta)) < 20) ) {
  9049  02C5  084A               	movf	processGestureData@ud_delta+1,w
  9050  02C6  3A80               	xorlw	128
  9051  02C7  00AF               	movwf	??_processGestureData
  9052  02C8  3080               	movlw	128
  9053  02C9  022F               	subwf	??_processGestureData,w
  9054  02CA  1D03               	skipz
  9055  02CB  2ACE               	goto	u5055
  9056  02CC  3001               	movlw	1
  9057  02CD  0249               	subwf	processGestureData@ud_delta,w
  9058  02CE                     u5055:	
  9059  02CE  1803               	skipnc
  9060  02CF  2ADD               	goto	l6078
  9061  02D0  0020               	movlb	0	; select bank0
  9062  02D1  0949               	comf	processGestureData@ud_delta,w
  9063  02D2  00AF               	movwf	??_processGestureData
  9064  02D3  094A               	comf	processGestureData@ud_delta+1,w
  9065  02D4  00B0               	movwf	??_processGestureData+1
  9066  02D5  0AAF               	incf	??_processGestureData,f
  9067  02D6  1903               	skipnz
  9068  02D7  0AB0               	incf	??_processGestureData+1,f
  9069  02D8  082F               	movf	??_processGestureData,w
  9070  02D9  00BD               	movwf	_processGestureData$1529
  9071  02DA  0830               	movf	??_processGestureData+1,w
  9072  02DB  00BE               	movwf	_processGestureData$1529+1
  9073  02DC  2AE2               	goto	l1099
  9074  02DD                     l6078:	
  9075  02DD  0020               	movlb	0	; select bank0
  9076  02DE  084A               	movf	processGestureData@ud_delta+1,w
  9077  02DF  00BE               	movwf	_processGestureData$1529+1
  9078  02E0  0849               	movf	processGestureData@ud_delta,w
  9079  02E1  00BD               	movwf	_processGestureData$1529
  9080  02E2                     l1099:	
  9081  02E2  083E               	movf	_processGestureData$1529+1,w
  9082  02E3  3A80               	xorlw	128
  9083  02E4  00AF               	movwf	??_processGestureData
  9084  02E5  3080               	movlw	128
  9085  02E6  022F               	subwf	??_processGestureData,w
  9086  02E7  1D03               	skipz
  9087  02E8  2AEB               	goto	u5065
  9088  02E9  3014               	movlw	20
  9089  02EA  023D               	subwf	_processGestureData$1529,w
  9090  02EB                     u5065:	
  9091  02EB  1803               	skipnc
  9092  02EC  2877               	goto	l5946
  9093  02ED  0020               	movlb	0	; select bank0
  9094  02EE  084C               	movf	processGestureData@lr_delta+1,w
  9095  02EF  3A80               	xorlw	128
  9096  02F0  00AF               	movwf	??_processGestureData
  9097  02F1  3080               	movlw	128
  9098  02F2  022F               	subwf	??_processGestureData,w
  9099  02F3  1D03               	skipz
  9100  02F4  2AF7               	goto	u5075
  9101  02F5  3001               	movlw	1
  9102  02F6  024B               	subwf	processGestureData@lr_delta,w
  9103  02F7                     u5075:	
  9104  02F7  1803               	skipnc
  9105  02F8  2B06               	goto	l6084
  9106  02F9  0020               	movlb	0	; select bank0
  9107  02FA  094B               	comf	processGestureData@lr_delta,w
  9108  02FB  00AF               	movwf	??_processGestureData
  9109  02FC  094C               	comf	processGestureData@lr_delta+1,w
  9110  02FD  00B0               	movwf	??_processGestureData+1
  9111  02FE  0AAF               	incf	??_processGestureData,f
  9112  02FF  1903               	skipnz
  9113  0300  0AB0               	incf	??_processGestureData+1,f
  9114  0301  082F               	movf	??_processGestureData,w
  9115  0302  00BF               	movwf	_processGestureData$1530
  9116  0303  0830               	movf	??_processGestureData+1,w
  9117  0304  00C0               	movwf	_processGestureData$1530+1
  9118  0305  2B0B               	goto	l1103
  9119  0306                     l6084:	
  9120  0306  0020               	movlb	0	; select bank0
  9121  0307  084C               	movf	processGestureData@lr_delta+1,w
  9122  0308  00C0               	movwf	_processGestureData$1530+1
  9123  0309  084B               	movf	processGestureData@lr_delta,w
  9124  030A  00BF               	movwf	_processGestureData$1530
  9125  030B                     l1103:	
  9126  030B  0840               	movf	_processGestureData$1530+1,w
  9127  030C  3A80               	xorlw	128
  9128  030D  00AF               	movwf	??_processGestureData
  9129  030E  3080               	movlw	128
  9130  030F  022F               	subwf	??_processGestureData,w
  9131  0310  1D03               	skipz
  9132  0311  2B14               	goto	u5085
  9133  0312  3014               	movlw	20
  9134  0313  023F               	subwf	_processGestureData$1530,w
  9135  0314                     u5085:	
  9136  0314  1803               	skipnc
  9137  0315  2877               	goto	l5946
  9138                           
  9139                           ;APDS9960.c: 776: ;APDS9960.c: 778:             if( (ud_delta == 0) && (lr_delta == 0) )
      +                           {
  9140  0316  0020               	movlb	0	; select bank0
  9141  0317  0849               	movf	processGestureData@ud_delta,w
  9142  0318  044A               	iorwf	processGestureData@ud_delta+1,w
  9143  0319  1D03               	btfss	3,2
  9144  031A  2B23               	goto	l1104
  9145  031B  084B               	movf	processGestureData@lr_delta,w
  9146  031C  044C               	iorwf	processGestureData@lr_delta+1,w
  9147  031D  1D03               	btfss	3,2
  9148  031E  2B23               	goto	l1104
  9149                           
  9150                           ;APDS9960.c: 779:                 gesture_near_count_++;
  9151  031F  3001               	movlw	1
  9152  0320  07E0               	addwf	_gesture_near_count_,f
  9153  0321  3000               	movlw	0
  9154  0322  3DE1               	addwfc	_gesture_near_count_+1,f
  9155  0323                     l1104:	
  9156                           ;APDS9960.c: 780:             }
  9157                           
  9158                           
  9159                           ;APDS9960.c: 782:             if( gesture_near_count_ >= 10 ) {
  9160  0323  0861               	movf	_gesture_near_count_+1,w
  9161  0324  3A80               	xorlw	128
  9162  0325  00AF               	movwf	??_processGestureData
  9163  0326  3080               	movlw	128
  9164  0327  022F               	subwf	??_processGestureData,w
  9165  0328  1D03               	skipz
  9166  0329  2B2C               	goto	u5115
  9167  032A  300A               	movlw	10
  9168  032B  0260               	subwf	_gesture_near_count_,w
  9169  032C                     u5115:	
  9170  032C  1C03               	skipc
  9171  032D  2877               	goto	l5946
  9172                           
  9173                           ;APDS9960.c: 783:                 gesture_ud_count_ = 0;
  9174  032E  0020               	movlb	0	; select bank0
  9175  032F  01E4               	clrf	_gesture_ud_count_
  9176  0330  01E5               	clrf	_gesture_ud_count_+1
  9177                           
  9178                           ;APDS9960.c: 784:                 gesture_lr_count_ = 0;
  9179  0331  01E2               	clrf	_gesture_lr_count_
  9180  0332  01E3               	clrf	_gesture_lr_count_+1
  9181                           
  9182                           ;APDS9960.c: 785:                 gesture_ud_delta_ = 0;
  9183  0333  01E8               	clrf	_gesture_ud_delta_
  9184  0334  01E9               	clrf	_gesture_ud_delta_+1
  9185                           
  9186                           ;APDS9960.c: 786:                 gesture_lr_delta_ = 0;
  9187  0335  01E6               	clrf	_gesture_lr_delta_
  9188  0336  01E7               	clrf	_gesture_lr_delta_+1
  9189  0337  2877               	goto	l5946
  9190  0338                     __end_of_processGestureData:	
  9191                           
  9192                           	psect	text19
  9193  0BB0                     __ptext19:	
  9194 ;; *************** function ___wmul *****************
  9195 ;; Defined at:
  9196 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
  9197 ;; Parameters:    Size  Location     Type
  9198 ;;  multiplier      2    0[BANK0 ] unsigned int 
  9199 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  9200 ;; Auto vars:     Size  Location     Type
  9201 ;;  product         2    4[BANK0 ] unsigned int 
  9202 ;; Return value:  Size  Location     Type
  9203 ;;                  2    0[BANK0 ] unsigned int 
  9204 ;; Registers used:
  9205 ;;		wreg, status,2, status,0
  9206 ;; Tracked objects:
  9207 ;;		On entry : 0/0
  9208 ;;		On exit  : 0/0
  9209 ;;		Unchanged: 0/0
  9210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9211 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9212 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9213 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9214 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9215 ;;Total ram usage:        6 bytes
  9216 ;; Hardware stack levels used:    1
  9217 ;; Hardware stack levels required when called:    5
  9218 ;; This function calls:
  9219 ;;		Nothing
  9220 ;; This function is called by:
  9221 ;;		_processGestureData
  9222 ;; This function uses a non-reentrant model
  9223 ;;
  9224                           
  9225                           
  9226                           ;psect for function ___wmul
  9227  0BB0                     ___wmul:	
  9228                           
  9229                           ;incstack = 0
  9230                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  9231  0BB0  0020               	movlb	0	; select bank0
  9232  0BB1  01A4               	clrf	___wmul@product
  9233  0BB2  01A5               	clrf	___wmul@product+1
  9234  0BB3                     l5784:	
  9235  0BB3  1C20               	btfss	___wmul@multiplier,0
  9236  0BB4  2BB9               	goto	l1392
  9237  0BB5  0822               	movf	___wmul@multiplicand,w
  9238  0BB6  07A4               	addwf	___wmul@product,f
  9239  0BB7  0823               	movf	___wmul@multiplicand+1,w
  9240  0BB8  3DA5               	addwfc	___wmul@product+1,f
  9241  0BB9                     l1392:	
  9242  0BB9  3001               	movlw	1
  9243  0BBA                     u4445:	
  9244  0BBA  35A2               	lslf	___wmul@multiplicand,f
  9245  0BBB  0DA3               	rlf	___wmul@multiplicand+1,f
  9246  0BBC  0B89               	decfsz	9,f
  9247  0BBD  2BBA               	goto	u4445
  9248  0BBE  3001               	movlw	1
  9249  0BBF                     u4455:	
  9250  0BBF  36A1               	lsrf	___wmul@multiplier+1,f
  9251  0BC0  0CA0               	rrf	___wmul@multiplier,f
  9252  0BC1  0B89               	decfsz	9,f
  9253  0BC2  2BBF               	goto	u4455
  9254  0BC3  0820               	movf	___wmul@multiplier,w
  9255  0BC4  0421               	iorwf	___wmul@multiplier+1,w
  9256  0BC5  1D03               	btfss	3,2
  9257  0BC6  2BB3               	goto	l5784
  9258  0BC7  0825               	movf	___wmul@product+1,w
  9259  0BC8  00A1               	movwf	?___wmul+1
  9260  0BC9  0824               	movf	___wmul@product,w
  9261  0BCA  00A0               	movwf	?___wmul
  9262  0BCB  0008               	return
  9263  0BCC                     __end_of___wmul:	
  9264                           
  9265                           	psect	text20
  9266  078F                     __ptext20:	
  9267 ;; *************** function ___awdiv *****************
  9268 ;; Defined at:
  9269 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awdiv.c"
  9270 ;; Parameters:    Size  Location     Type
  9271 ;;  divisor         2    6[BANK0 ] int 
  9272 ;;  dividend        2    8[BANK0 ] int 
  9273 ;; Auto vars:     Size  Location     Type
  9274 ;;  quotient        2   13[BANK0 ] int 
  9275 ;;  sign            1   12[BANK0 ] unsigned char 
  9276 ;;  counter         1   11[BANK0 ] unsigned char 
  9277 ;; Return value:  Size  Location     Type
  9278 ;;                  2    6[BANK0 ] int 
  9279 ;; Registers used:
  9280 ;;		wreg, status,2, status,0
  9281 ;; Tracked objects:
  9282 ;;		On entry : 0/0
  9283 ;;		On exit  : 0/0
  9284 ;;		Unchanged: 0/0
  9285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9286 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9287 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9288 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9289 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9290 ;;Total ram usage:        9 bytes
  9291 ;; Hardware stack levels used:    1
  9292 ;; Hardware stack levels required when called:    5
  9293 ;; This function calls:
  9294 ;;		Nothing
  9295 ;; This function is called by:
  9296 ;;		_processGestureData
  9297 ;; This function uses a non-reentrant model
  9298 ;;
  9299                           
  9300                           
  9301                           ;psect for function ___awdiv
  9302  078F                     ___awdiv:	
  9303                           
  9304                           ;incstack = 0
  9305                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  9306  078F  0020               	movlb	0	; select bank0
  9307  0790  01AC               	clrf	___awdiv@sign
  9308  0791  1FA7               	btfss	___awdiv@divisor+1,7
  9309  0792  2F9A               	goto	l5804
  9310  0793  09A6               	comf	___awdiv@divisor,f
  9311  0794  09A7               	comf	___awdiv@divisor+1,f
  9312  0795  0AA6               	incf	___awdiv@divisor,f
  9313  0796  1903               	skipnz
  9314  0797  0AA7               	incf	___awdiv@divisor+1,f
  9315  0798  01AC               	clrf	___awdiv@sign
  9316  0799  0AAC               	incf	___awdiv@sign,f
  9317  079A                     l5804:	
  9318  079A  1FA9               	btfss	___awdiv@dividend+1,7
  9319  079B  2FA5               	goto	l5810
  9320  079C  09A8               	comf	___awdiv@dividend,f
  9321  079D  09A9               	comf	___awdiv@dividend+1,f
  9322  079E  0AA8               	incf	___awdiv@dividend,f
  9323  079F  1903               	skipnz
  9324  07A0  0AA9               	incf	___awdiv@dividend+1,f
  9325  07A1  3001               	movlw	1
  9326  07A2  00AA               	movwf	??___awdiv
  9327  07A3  082A               	movf	??___awdiv,w
  9328  07A4  06AC               	xorwf	___awdiv@sign,f
  9329  07A5                     l5810:	
  9330  07A5  01AD               	clrf	___awdiv@quotient
  9331  07A6  01AE               	clrf	___awdiv@quotient+1
  9332  07A7  0826               	movf	___awdiv@divisor,w
  9333  07A8  0427               	iorwf	___awdiv@divisor+1,w
  9334  07A9  1903               	btfsc	3,2
  9335  07AA  2FD4               	goto	l5832
  9336  07AB  01AB               	clrf	___awdiv@counter
  9337  07AC  0AAB               	incf	___awdiv@counter,f
  9338  07AD                     l5820:	
  9339  07AD  1BA7               	btfsc	___awdiv@divisor+1,7
  9340  07AE  2FB9               	goto	l5822
  9341  07AF  3001               	movlw	1
  9342  07B0                     u4505:	
  9343  07B0  35A6               	lslf	___awdiv@divisor,f
  9344  07B1  0DA7               	rlf	___awdiv@divisor+1,f
  9345  07B2  0B89               	decfsz	9,f
  9346  07B3  2FB0               	goto	u4505
  9347  07B4  3001               	movlw	1
  9348  07B5  00AA               	movwf	??___awdiv
  9349  07B6  082A               	movf	??___awdiv,w
  9350  07B7  07AB               	addwf	___awdiv@counter,f
  9351  07B8  2FAD               	goto	l5820
  9352  07B9                     l5822:	
  9353  07B9  3001               	movlw	1
  9354  07BA                     u4525:	
  9355  07BA  35AD               	lslf	___awdiv@quotient,f
  9356  07BB  0DAE               	rlf	___awdiv@quotient+1,f
  9357  07BC  0B89               	decfsz	9,f
  9358  07BD  2FBA               	goto	u4525
  9359  07BE  0827               	movf	___awdiv@divisor+1,w
  9360  07BF  0229               	subwf	___awdiv@dividend+1,w
  9361  07C0  1D03               	skipz
  9362  07C1  2FC4               	goto	u4535
  9363  07C2  0826               	movf	___awdiv@divisor,w
  9364  07C3  0228               	subwf	___awdiv@dividend,w
  9365  07C4                     u4535:	
  9366  07C4  1C03               	skipc
  9367  07C5  2FCB               	goto	l5828
  9368  07C6  0826               	movf	___awdiv@divisor,w
  9369  07C7  02A8               	subwf	___awdiv@dividend,f
  9370  07C8  0827               	movf	___awdiv@divisor+1,w
  9371  07C9  3BA9               	subwfb	___awdiv@dividend+1,f
  9372  07CA  142D               	bsf	___awdiv@quotient,0
  9373  07CB                     l5828:	
  9374  07CB  3001               	movlw	1
  9375  07CC                     u4545:	
  9376  07CC  36A7               	lsrf	___awdiv@divisor+1,f
  9377  07CD  0CA6               	rrf	___awdiv@divisor,f
  9378  07CE  0B89               	decfsz	9,f
  9379  07CF  2FCC               	goto	u4545
  9380  07D0  3001               	movlw	1
  9381  07D1  02AB               	subwf	___awdiv@counter,f
  9382  07D2  1D03               	btfss	3,2
  9383  07D3  2FB9               	goto	l5822
  9384  07D4                     l5832:	
  9385  07D4  082C               	movf	___awdiv@sign,w
  9386  07D5  1903               	btfsc	3,2
  9387  07D6  2FDC               	goto	l5836
  9388  07D7  09AD               	comf	___awdiv@quotient,f
  9389  07D8  09AE               	comf	___awdiv@quotient+1,f
  9390  07D9  0AAD               	incf	___awdiv@quotient,f
  9391  07DA  1903               	skipnz
  9392  07DB  0AAE               	incf	___awdiv@quotient+1,f
  9393  07DC                     l5836:	
  9394  07DC  082E               	movf	___awdiv@quotient+1,w
  9395  07DD  00A7               	movwf	?___awdiv+1
  9396  07DE  082D               	movf	___awdiv@quotient,w
  9397  07DF  00A6               	movwf	?___awdiv
  9398  07E0  0008               	return
  9399  07E1                     __end_of___awdiv:	
  9400                           
  9401                           	psect	text21
  9402  0ABD                     __ptext21:	
  9403 ;; *************** function _isGestureAvailable *****************
  9404 ;; Defined at:
  9405 ;;		line 537 in file "APDS9960.c"
  9406 ;; Parameters:    Size  Location     Type
  9407 ;;		None
  9408 ;; Auto vars:     Size  Location     Type
  9409 ;;  val             1   10[BANK0 ] unsigned char 
  9410 ;; Return value:  Size  Location     Type
  9411 ;;                  1    wreg      _Bool 
  9412 ;; Registers used:
  9413 ;;		wreg, status,2, status,0, pclath, cstack
  9414 ;; Tracked objects:
  9415 ;;		On entry : 0/0
  9416 ;;		On exit  : 0/0
  9417 ;;		Unchanged: 0/0
  9418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9419 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9420 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9421 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9422 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9423 ;;Total ram usage:        2 bytes
  9424 ;; Hardware stack levels used:    1
  9425 ;; Hardware stack levels required when called:    8
  9426 ;; This function calls:
  9427 ;;		_wireReadDataByte
  9428 ;; This function is called by:
  9429 ;;		_main
  9430 ;;		_readGesture
  9431 ;; This function uses a non-reentrant model
  9432 ;;
  9433                           
  9434                           
  9435                           ;psect for function _isGestureAvailable
  9436  0ABD                     _isGestureAvailable:	
  9437                           
  9438                           ;APDS9960.c: 539:     uint8_t val;;APDS9960.c: 542:     val=wireReadDataByte(0xAF);
  9439                           
  9440                           ;incstack = 0
  9441                           ; Regs used in _isGestureAvailable: [wreg+status,2+status,0+pclath+cstack]
  9442  0ABD  30AF               	movlw	175
  9443  0ABE  318B  23CC  318A   	fcall	_wireReadDataByte
  9444  0AC1  0020               	movlb	0	; select bank0
  9445  0AC2  00A9               	movwf	??_isGestureAvailable
  9446  0AC3  0829               	movf	??_isGestureAvailable,w
  9447  0AC4  00AA               	movwf	isGestureAvailable@val
  9448                           
  9449                           ;APDS9960.c: 545:     val &= 0b00000001;
  9450  0AC5  3001               	movlw	1
  9451  0AC6  00A9               	movwf	??_isGestureAvailable
  9452  0AC7  0829               	movf	??_isGestureAvailable,w
  9453  0AC8  05AA               	andwf	isGestureAvailable@val,f
  9454                           
  9455                           ;APDS9960.c: 548:     if( val == 1) {
  9456  0AC9  032A               	decf	isGestureAvailable@val,w
  9457  0ACA  1D03               	btfss	3,2
  9458  0ACB  2ACE               	goto	l5852
  9459                           
  9460                           ;APDS9960.c: 549:         return 1;
  9461  0ACC  3001               	movlw	1
  9462  0ACD  0008               	return
  9463  0ACE                     l5852:	
  9464                           
  9465                           ;APDS9960.c: 551:         return 0;
  9466  0ACE  3000               	movlw	0
  9467  0ACF  0008               	return
  9468  0AD0                     __end_of_isGestureAvailable:	
  9469                           
  9470                           	psect	text22
  9471  0338                     __ptext22:	
  9472 ;; *************** function _decodeGesture *****************
  9473 ;; Defined at:
  9474 ;;		line 795 in file "APDS9960.c"
  9475 ;; Parameters:    Size  Location     Type
  9476 ;;		None
  9477 ;; Auto vars:     Size  Location     Type
  9478 ;;		None
  9479 ;; Return value:  Size  Location     Type
  9480 ;;                  1    wreg      _Bool 
  9481 ;; Registers used:
  9482 ;;		wreg, status,2, status,0
  9483 ;; Tracked objects:
  9484 ;;		On entry : 0/0
  9485 ;;		On exit  : 0/0
  9486 ;;		Unchanged: 0/0
  9487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9489 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9490 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9491 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9492 ;;Total ram usage:       18 bytes
  9493 ;; Hardware stack levels used:    1
  9494 ;; Hardware stack levels required when called:    5
  9495 ;; This function calls:
  9496 ;;		Nothing
  9497 ;; This function is called by:
  9498 ;;		_readGesture
  9499 ;; This function uses a non-reentrant model
  9500 ;;
  9501                           
  9502                           
  9503                           ;psect for function _decodeGesture
  9504  0338                     _decodeGesture:	
  9505                           
  9506                           ;APDS9960.c: 798:     if( gesture_state_ == NEAR_STATE ) {
  9507                           
  9508                           ;incstack = 0
  9509                           ; Regs used in _decodeGesture: [wreg+status,2+status,0]
  9510  0338  0020               	movlb	0	; select bank0
  9511  0339  035E               	decf	_gesture_state_,w
  9512  033A  045F               	iorwf	_gesture_state_+1,w
  9513  033B  1D03               	btfss	3,2
  9514  033C  2B44               	goto	l6106
  9515                           
  9516                           ;APDS9960.c: 799:         gesture_motion_ = DIR_NEAR;
  9517  033D  3005               	movlw	5
  9518  033E  0022               	movlb	2	; select bank2
  9519  033F  00E8               	movwf	_gesture_motion_^(0+256)
  9520  0340  3000               	movlw	0
  9521  0341  00E9               	movwf	(_gesture_motion_^(0+256)+1)
  9522                           
  9523                           ;APDS9960.c: 800:         return 1;
  9524  0342  3001               	movlw	1
  9525  0343  0008               	return
  9526  0344                     l6106:	
  9527  0344  3002               	movlw	2
  9528  0345  065E               	xorwf	_gesture_state_,w
  9529  0346  045F               	iorwf	_gesture_state_+1,w
  9530  0347  1D03               	btfss	3,2
  9531  0348  2B50               	goto	l6112
  9532                           
  9533                           ;APDS9960.c: 802:         gesture_motion_ = DIR_FAR;
  9534  0349  3006               	movlw	6
  9535  034A  0022               	movlb	2	; select bank2
  9536  034B  00E8               	movwf	_gesture_motion_^(0+256)
  9537  034C  3000               	movlw	0
  9538  034D  00E9               	movwf	(_gesture_motion_^(0+256)+1)
  9539                           
  9540                           ;APDS9960.c: 803:         return 1;
  9541  034E  3001               	movlw	1
  9542  034F  0008               	return
  9543  0350                     l6112:	
  9544                           
  9545                           ;APDS9960.c: 807:     if( (gesture_ud_count_ == -1) && (gesture_lr_count_ == 0) ) {
  9546  0350  0A64               	incf	_gesture_ud_count_,w
  9547  0351  1D03               	skipz
  9548  0352  2B5C               	goto	l6118
  9549  0353  0A65               	incf	_gesture_ud_count_+1,w
  9550  0354  1D03               	btfss	3,2
  9551  0355  2B5C               	goto	l6118
  9552  0356  0862               	movf	_gesture_lr_count_,w
  9553  0357  0463               	iorwf	_gesture_lr_count_+1,w
  9554  0358  1D03               	btfss	3,2
  9555  0359  2B5C               	goto	l6118
  9556  035A                     l6116:	
  9557                           
  9558                           ;APDS9960.c: 808:         gesture_motion_ = DIR_UP;
  9559  035A  3003               	movlw	3
  9560  035B  2B7B               	goto	L7
  9561  035C                     l6118:	
  9562                           ;APDS9960.c: 809:     } else if( (gesture_ud_count_ == 1) && (gesture_lr_count_ == 0) ) 
      +                          {
  9563                           
  9564  035C  0364               	decf	_gesture_ud_count_,w
  9565  035D  0465               	iorwf	_gesture_ud_count_+1,w
  9566  035E  1D03               	btfss	3,2
  9567  035F  2B66               	goto	l6124
  9568  0360  0862               	movf	_gesture_lr_count_,w
  9569  0361  0463               	iorwf	_gesture_lr_count_+1,w
  9570  0362  1D03               	btfss	3,2
  9571  0363  2B66               	goto	l6124
  9572  0364                     l6122:	
  9573                           
  9574                           ;APDS9960.c: 810:         gesture_motion_ = DIR_DOWN;
  9575  0364  3004               	movlw	4
  9576  0365  2B7B               	goto	L7
  9577  0366                     l6124:	
  9578                           ;APDS9960.c: 811:     } else if( (gesture_ud_count_ == 0) && (gesture_lr_count_ == 1) ) 
      +                          {
  9579                           
  9580  0366  0864               	movf	_gesture_ud_count_,w
  9581  0367  0465               	iorwf	_gesture_ud_count_+1,w
  9582  0368  1D03               	btfss	3,2
  9583  0369  2B70               	goto	l6130
  9584  036A  0362               	decf	_gesture_lr_count_,w
  9585  036B  0463               	iorwf	_gesture_lr_count_+1,w
  9586  036C  1D03               	btfss	3,2
  9587  036D  2B70               	goto	l6130
  9588  036E                     l6128:	
  9589                           
  9590                           ;APDS9960.c: 812:         gesture_motion_ = DIR_RIGHT;
  9591  036E  3002               	movlw	2
  9592  036F  2B7B               	goto	L7
  9593  0370                     l6130:	
  9594                           ;APDS9960.c: 813:     } else if( (gesture_ud_count_ == 0) && (gesture_lr_count_ == -1) )
      +                           {
  9595                           
  9596  0370  0864               	movf	_gesture_ud_count_,w
  9597  0371  0465               	iorwf	_gesture_ud_count_+1,w
  9598  0372  1D03               	btfss	3,2
  9599  0373  2B80               	goto	l6136
  9600  0374  0A62               	incf	_gesture_lr_count_,w
  9601  0375  1D03               	skipz
  9602  0376  2B80               	goto	l6136
  9603  0377  0A63               	incf	_gesture_lr_count_+1,w
  9604  0378  1D03               	btfss	3,2
  9605  0379  2B80               	goto	l6136
  9606  037A                     l6134:	
  9607                           
  9608                           ;APDS9960.c: 814:         gesture_motion_ = DIR_LEFT;
  9609  037A  3001               	movlw	1
  9610  037B                     L7:	
  9611  037B  0022               	movlb	2	; select bank2
  9612  037C  00E8               	movwf	_gesture_motion_^(0+256)
  9613  037D  3000               	movlw	0
  9614  037E  00E9               	movwf	(_gesture_motion_^(0+256)+1)
  9615                           
  9616                           ;APDS9960.c: 815:     } else if( (gesture_ud_count_ == -1) && (gesture_lr_count_ == 1) )
      +                           {
  9617  037F  2CC6               	goto	l6212
  9618  0380                     l6136:	
  9619  0380  0A64               	incf	_gesture_ud_count_,w
  9620  0381  1D03               	skipz
  9621  0382  2BD1               	goto	l6154
  9622  0383  0A65               	incf	_gesture_ud_count_+1,w
  9623  0384  1D03               	btfss	3,2
  9624  0385  2BD1               	goto	l6154
  9625  0386  0362               	decf	_gesture_lr_count_,w
  9626  0387  0463               	iorwf	_gesture_lr_count_+1,w
  9627  0388  1D03               	btfss	3,2
  9628  0389  2BD1               	goto	l6154
  9629                           
  9630                           ;APDS9960.c: 816:         if( ((gesture_ud_delta_) > 0 ? (gesture_ud_delta_) : -(gesture
      +                          _ud_delta_)) > ((gesture_lr_delta_) > 0 ? (gesture_lr_delta_) : -(gesture_lr_delta_)) ) 
      +                          {
  9631  038A  0869               	movf	_gesture_ud_delta_+1,w
  9632  038B  3A80               	xorlw	128
  9633  038C  00A0               	movwf	??_decodeGesture
  9634  038D  3080               	movlw	128
  9635  038E  0220               	subwf	??_decodeGesture,w
  9636  038F  1D03               	skipz
  9637  0390  2B93               	goto	u5245
  9638  0391  3001               	movlw	1
  9639  0392  0268               	subwf	_gesture_ud_delta_,w
  9640  0393                     u5245:	
  9641  0393  1803               	skipnc
  9642  0394  2BA2               	goto	l6144
  9643  0395  0020               	movlb	0	; select bank0
  9644  0396  0968               	comf	_gesture_ud_delta_,w
  9645  0397  00A0               	movwf	??_decodeGesture
  9646  0398  0969               	comf	_gesture_ud_delta_+1,w
  9647  0399  00A1               	movwf	??_decodeGesture+1
  9648  039A  0AA0               	incf	??_decodeGesture,f
  9649  039B  1903               	skipnz
  9650  039C  0AA1               	incf	??_decodeGesture+1,f
  9651  039D  0820               	movf	??_decodeGesture,w
  9652  039E  00A2               	movwf	_decodeGesture$1532
  9653  039F  0821               	movf	??_decodeGesture+1,w
  9654  03A0  00A3               	movwf	_decodeGesture$1532+1
  9655  03A1  2BA7               	goto	l1125
  9656  03A2                     l6144:	
  9657  03A2  0020               	movlb	0	; select bank0
  9658  03A3  0869               	movf	_gesture_ud_delta_+1,w
  9659  03A4  00A3               	movwf	_decodeGesture$1532+1
  9660  03A5  0868               	movf	_gesture_ud_delta_,w
  9661  03A6  00A2               	movwf	_decodeGesture$1532
  9662  03A7                     l1125:	
  9663  03A7  0867               	movf	_gesture_lr_delta_+1,w
  9664  03A8  3A80               	xorlw	128
  9665  03A9  00A0               	movwf	??_decodeGesture
  9666  03AA  3080               	movlw	128
  9667  03AB  0220               	subwf	??_decodeGesture,w
  9668  03AC  1D03               	skipz
  9669  03AD  2BB0               	goto	u5255
  9670  03AE  3001               	movlw	1
  9671  03AF  0266               	subwf	_gesture_lr_delta_,w
  9672  03B0                     u5255:	
  9673  03B0  1803               	skipnc
  9674  03B1  2BBF               	goto	l6148
  9675  03B2  0020               	movlb	0	; select bank0
  9676  03B3  0966               	comf	_gesture_lr_delta_,w
  9677  03B4  00A0               	movwf	??_decodeGesture
  9678  03B5  0967               	comf	_gesture_lr_delta_+1,w
  9679  03B6  00A1               	movwf	??_decodeGesture+1
  9680  03B7  0AA0               	incf	??_decodeGesture,f
  9681  03B8  1903               	skipnz
  9682  03B9  0AA1               	incf	??_decodeGesture+1,f
  9683  03BA  0820               	movf	??_decodeGesture,w
  9684  03BB  00A4               	movwf	_decodeGesture$1533
  9685  03BC  0821               	movf	??_decodeGesture+1,w
  9686  03BD  00A5               	movwf	_decodeGesture$1533+1
  9687  03BE  2BC4               	goto	l1129
  9688  03BF                     l6148:	
  9689  03BF  0020               	movlb	0	; select bank0
  9690  03C0  0867               	movf	_gesture_lr_delta_+1,w
  9691  03C1  00A5               	movwf	_decodeGesture$1533+1
  9692  03C2  0866               	movf	_gesture_lr_delta_,w
  9693  03C3  00A4               	movwf	_decodeGesture$1533
  9694  03C4                     l1129:	
  9695  03C4  0825               	movf	_decodeGesture$1533+1,w
  9696  03C5  3A80               	xorlw	128
  9697  03C6  00A0               	movwf	??_decodeGesture
  9698  03C7  0823               	movf	_decodeGesture$1532+1,w
  9699  03C8  3A80               	xorlw	128
  9700  03C9  0220               	subwf	??_decodeGesture,w
  9701  03CA  1D03               	skipz
  9702  03CB  2BCE               	goto	u5265
  9703  03CC  0822               	movf	_decodeGesture$1532,w
  9704  03CD  0224               	subwf	_decodeGesture$1533,w
  9705  03CE                     u5265:	
  9706  03CE  1C03               	btfss	3,0
  9707  03CF  2B5A               	goto	l6116
  9708  03D0  2B6E               	goto	l6128
  9709  03D1                     l6154:	
  9710  03D1  0364               	decf	_gesture_ud_count_,w
  9711  03D2  0465               	iorwf	_gesture_ud_count_+1,w
  9712  03D3  1D03               	btfss	3,2
  9713  03D4  2C22               	goto	l6172
  9714  03D5  0A62               	incf	_gesture_lr_count_,w
  9715  03D6  1D03               	skipz
  9716  03D7  2C22               	goto	l6172
  9717  03D8  0A63               	incf	_gesture_lr_count_+1,w
  9718  03D9  1D03               	btfss	3,2
  9719  03DA  2C22               	goto	l6172
  9720                           
  9721                           ;APDS9960.c: 822:         if( ((gesture_ud_delta_) > 0 ? (gesture_ud_delta_) : -(gesture
      +                          _ud_delta_)) > ((gesture_lr_delta_) > 0 ? (gesture_lr_delta_) : -(gesture_lr_delta_)) ) 
      +                          {
  9722  03DB  0869               	movf	_gesture_ud_delta_+1,w
  9723  03DC  3A80               	xorlw	128
  9724  03DD  00A0               	movwf	??_decodeGesture
  9725  03DE  3080               	movlw	128
  9726  03DF  0220               	subwf	??_decodeGesture,w
  9727  03E0  1D03               	skipz
  9728  03E1  2BE4               	goto	u5295
  9729  03E2  3001               	movlw	1
  9730  03E3  0268               	subwf	_gesture_ud_delta_,w
  9731  03E4                     u5295:	
  9732  03E4  1803               	skipnc
  9733  03E5  2BF3               	goto	l6162
  9734  03E6  0020               	movlb	0	; select bank0
  9735  03E7  0968               	comf	_gesture_ud_delta_,w
  9736  03E8  00A0               	movwf	??_decodeGesture
  9737  03E9  0969               	comf	_gesture_ud_delta_+1,w
  9738  03EA  00A1               	movwf	??_decodeGesture+1
  9739  03EB  0AA0               	incf	??_decodeGesture,f
  9740  03EC  1903               	skipnz
  9741  03ED  0AA1               	incf	??_decodeGesture+1,f
  9742  03EE  0820               	movf	??_decodeGesture,w
  9743  03EF  00A6               	movwf	_decodeGesture$1534
  9744  03F0  0821               	movf	??_decodeGesture+1,w
  9745  03F1  00A7               	movwf	_decodeGesture$1534+1
  9746  03F2  2BF8               	goto	l1137
  9747  03F3                     l6162:	
  9748  03F3  0020               	movlb	0	; select bank0
  9749  03F4  0869               	movf	_gesture_ud_delta_+1,w
  9750  03F5  00A7               	movwf	_decodeGesture$1534+1
  9751  03F6  0868               	movf	_gesture_ud_delta_,w
  9752  03F7  00A6               	movwf	_decodeGesture$1534
  9753  03F8                     l1137:	
  9754  03F8  0867               	movf	_gesture_lr_delta_+1,w
  9755  03F9  3A80               	xorlw	128
  9756  03FA  00A0               	movwf	??_decodeGesture
  9757  03FB  3080               	movlw	128
  9758  03FC  0220               	subwf	??_decodeGesture,w
  9759  03FD  1D03               	skipz
  9760  03FE  2C01               	goto	u5305
  9761  03FF  3001               	movlw	1
  9762  0400  0266               	subwf	_gesture_lr_delta_,w
  9763  0401                     u5305:	
  9764  0401  1803               	skipnc
  9765  0402  2C10               	goto	l6166
  9766  0403  0020               	movlb	0	; select bank0
  9767  0404  0966               	comf	_gesture_lr_delta_,w
  9768  0405  00A0               	movwf	??_decodeGesture
  9769  0406  0967               	comf	_gesture_lr_delta_+1,w
  9770  0407  00A1               	movwf	??_decodeGesture+1
  9771  0408  0AA0               	incf	??_decodeGesture,f
  9772  0409  1903               	skipnz
  9773  040A  0AA1               	incf	??_decodeGesture+1,f
  9774  040B  0820               	movf	??_decodeGesture,w
  9775  040C  00A8               	movwf	_decodeGesture$1535
  9776  040D  0821               	movf	??_decodeGesture+1,w
  9777  040E  00A9               	movwf	_decodeGesture$1535+1
  9778  040F  2C15               	goto	l1141
  9779  0410                     l6166:	
  9780  0410  0020               	movlb	0	; select bank0
  9781  0411  0867               	movf	_gesture_lr_delta_+1,w
  9782  0412  00A9               	movwf	_decodeGesture$1535+1
  9783  0413  0866               	movf	_gesture_lr_delta_,w
  9784  0414  00A8               	movwf	_decodeGesture$1535
  9785  0415                     l1141:	
  9786  0415  0829               	movf	_decodeGesture$1535+1,w
  9787  0416  3A80               	xorlw	128
  9788  0417  00A0               	movwf	??_decodeGesture
  9789  0418  0827               	movf	_decodeGesture$1534+1,w
  9790  0419  3A80               	xorlw	128
  9791  041A  0220               	subwf	??_decodeGesture,w
  9792  041B  1D03               	skipz
  9793  041C  2C1F               	goto	u5315
  9794  041D  0826               	movf	_decodeGesture$1534,w
  9795  041E  0228               	subwf	_decodeGesture$1535,w
  9796  041F                     u5315:	
  9797  041F  1C03               	btfss	3,0
  9798  0420  2B64               	goto	l6122
  9799  0421  2B7A               	goto	l6134
  9800  0422                     l6172:	
  9801  0422  0A64               	incf	_gesture_ud_count_,w
  9802  0423  1D03               	skipz
  9803  0424  2C75               	goto	l6190
  9804  0425  0A65               	incf	_gesture_ud_count_+1,w
  9805  0426  1D03               	btfss	3,2
  9806  0427  2C75               	goto	l6190
  9807  0428  0A62               	incf	_gesture_lr_count_,w
  9808  0429  1D03               	skipz
  9809  042A  2C75               	goto	l6190
  9810  042B  0A63               	incf	_gesture_lr_count_+1,w
  9811  042C  1D03               	btfss	3,2
  9812  042D  2C75               	goto	l6190
  9813                           
  9814                           ;APDS9960.c: 828:         if( ((gesture_ud_delta_) > 0 ? (gesture_ud_delta_) : -(gesture
      +                          _ud_delta_)) > ((gesture_lr_delta_) > 0 ? (gesture_lr_delta_) : -(gesture_lr_delta_)) ) 
      +                          {
  9815  042E  0869               	movf	_gesture_ud_delta_+1,w
  9816  042F  3A80               	xorlw	128
  9817  0430  00A0               	movwf	??_decodeGesture
  9818  0431  3080               	movlw	128
  9819  0432  0220               	subwf	??_decodeGesture,w
  9820  0433  1D03               	skipz
  9821  0434  2C37               	goto	u5345
  9822  0435  3001               	movlw	1
  9823  0436  0268               	subwf	_gesture_ud_delta_,w
  9824  0437                     u5345:	
  9825  0437  1803               	skipnc
  9826  0438  2C46               	goto	l6180
  9827  0439  0020               	movlb	0	; select bank0
  9828  043A  0968               	comf	_gesture_ud_delta_,w
  9829  043B  00A0               	movwf	??_decodeGesture
  9830  043C  0969               	comf	_gesture_ud_delta_+1,w
  9831  043D  00A1               	movwf	??_decodeGesture+1
  9832  043E  0AA0               	incf	??_decodeGesture,f
  9833  043F  1903               	skipnz
  9834  0440  0AA1               	incf	??_decodeGesture+1,f
  9835  0441  0820               	movf	??_decodeGesture,w
  9836  0442  00AA               	movwf	_decodeGesture$1536
  9837  0443  0821               	movf	??_decodeGesture+1,w
  9838  0444  00AB               	movwf	_decodeGesture$1536+1
  9839  0445  2C4B               	goto	l1149
  9840  0446                     l6180:	
  9841  0446  0020               	movlb	0	; select bank0
  9842  0447  0869               	movf	_gesture_ud_delta_+1,w
  9843  0448  00AB               	movwf	_decodeGesture$1536+1
  9844  0449  0868               	movf	_gesture_ud_delta_,w
  9845  044A  00AA               	movwf	_decodeGesture$1536
  9846  044B                     l1149:	
  9847  044B  0867               	movf	_gesture_lr_delta_+1,w
  9848  044C  3A80               	xorlw	128
  9849  044D  00A0               	movwf	??_decodeGesture
  9850  044E  3080               	movlw	128
  9851  044F  0220               	subwf	??_decodeGesture,w
  9852  0450  1D03               	skipz
  9853  0451  2C54               	goto	u5355
  9854  0452  3001               	movlw	1
  9855  0453  0266               	subwf	_gesture_lr_delta_,w
  9856  0454                     u5355:	
  9857  0454  1803               	skipnc
  9858  0455  2C63               	goto	l6184
  9859  0456  0020               	movlb	0	; select bank0
  9860  0457  0966               	comf	_gesture_lr_delta_,w
  9861  0458  00A0               	movwf	??_decodeGesture
  9862  0459  0967               	comf	_gesture_lr_delta_+1,w
  9863  045A  00A1               	movwf	??_decodeGesture+1
  9864  045B  0AA0               	incf	??_decodeGesture,f
  9865  045C  1903               	skipnz
  9866  045D  0AA1               	incf	??_decodeGesture+1,f
  9867  045E  0820               	movf	??_decodeGesture,w
  9868  045F  00AC               	movwf	_decodeGesture$1537
  9869  0460  0821               	movf	??_decodeGesture+1,w
  9870  0461  00AD               	movwf	_decodeGesture$1537+1
  9871  0462  2C68               	goto	l1153
  9872  0463                     l6184:	
  9873  0463  0020               	movlb	0	; select bank0
  9874  0464  0867               	movf	_gesture_lr_delta_+1,w
  9875  0465  00AD               	movwf	_decodeGesture$1537+1
  9876  0466  0866               	movf	_gesture_lr_delta_,w
  9877  0467  00AC               	movwf	_decodeGesture$1537
  9878  0468                     l1153:	
  9879  0468  082D               	movf	_decodeGesture$1537+1,w
  9880  0469  3A80               	xorlw	128
  9881  046A  00A0               	movwf	??_decodeGesture
  9882  046B  082B               	movf	_decodeGesture$1536+1,w
  9883  046C  3A80               	xorlw	128
  9884  046D  0220               	subwf	??_decodeGesture,w
  9885  046E  1D03               	skipz
  9886  046F  2C72               	goto	u5365
  9887  0470  082A               	movf	_decodeGesture$1536,w
  9888  0471  022C               	subwf	_decodeGesture$1537,w
  9889  0472                     u5365:	
  9890  0472  1C03               	btfss	3,0
  9891  0473  2B5A               	goto	l6116
  9892  0474  2B7A               	goto	l6134
  9893  0475                     l6190:	
  9894  0475  0364               	decf	_gesture_ud_count_,w
  9895  0476  0465               	iorwf	_gesture_ud_count_+1,w
  9896  0477  1D03               	btfss	3,2
  9897  0478  2CC4               	goto	l6208
  9898  0479  0362               	decf	_gesture_lr_count_,w
  9899  047A  0463               	iorwf	_gesture_lr_count_+1,w
  9900  047B  1D03               	btfss	3,2
  9901  047C  2CC4               	goto	l6208
  9902                           
  9903                           ;APDS9960.c: 834:         if( ((gesture_ud_delta_) > 0 ? (gesture_ud_delta_) : -(gesture
      +                          _ud_delta_)) > ((gesture_lr_delta_) > 0 ? (gesture_lr_delta_) : -(gesture_lr_delta_)) ) 
      +                          {
  9904  047D  0869               	movf	_gesture_ud_delta_+1,w
  9905  047E  3A80               	xorlw	128
  9906  047F  00A0               	movwf	??_decodeGesture
  9907  0480  3080               	movlw	128
  9908  0481  0220               	subwf	??_decodeGesture,w
  9909  0482  1D03               	skipz
  9910  0483  2C86               	goto	u5395
  9911  0484  3001               	movlw	1
  9912  0485  0268               	subwf	_gesture_ud_delta_,w
  9913  0486                     u5395:	
  9914  0486  1803               	skipnc
  9915  0487  2C95               	goto	l6198
  9916  0488  0020               	movlb	0	; select bank0
  9917  0489  0968               	comf	_gesture_ud_delta_,w
  9918  048A  00A0               	movwf	??_decodeGesture
  9919  048B  0969               	comf	_gesture_ud_delta_+1,w
  9920  048C  00A1               	movwf	??_decodeGesture+1
  9921  048D  0AA0               	incf	??_decodeGesture,f
  9922  048E  1903               	skipnz
  9923  048F  0AA1               	incf	??_decodeGesture+1,f
  9924  0490  0820               	movf	??_decodeGesture,w
  9925  0491  00AE               	movwf	_decodeGesture$1538
  9926  0492  0821               	movf	??_decodeGesture+1,w
  9927  0493  00AF               	movwf	_decodeGesture$1538+1
  9928  0494  2C9A               	goto	l1161
  9929  0495                     l6198:	
  9930  0495  0020               	movlb	0	; select bank0
  9931  0496  0869               	movf	_gesture_ud_delta_+1,w
  9932  0497  00AF               	movwf	_decodeGesture$1538+1
  9933  0498  0868               	movf	_gesture_ud_delta_,w
  9934  0499  00AE               	movwf	_decodeGesture$1538
  9935  049A                     l1161:	
  9936  049A  0867               	movf	_gesture_lr_delta_+1,w
  9937  049B  3A80               	xorlw	128
  9938  049C  00A0               	movwf	??_decodeGesture
  9939  049D  3080               	movlw	128
  9940  049E  0220               	subwf	??_decodeGesture,w
  9941  049F  1D03               	skipz
  9942  04A0  2CA3               	goto	u5405
  9943  04A1  3001               	movlw	1
  9944  04A2  0266               	subwf	_gesture_lr_delta_,w
  9945  04A3                     u5405:	
  9946  04A3  1803               	skipnc
  9947  04A4  2CB2               	goto	l6202
  9948  04A5  0020               	movlb	0	; select bank0
  9949  04A6  0966               	comf	_gesture_lr_delta_,w
  9950  04A7  00A0               	movwf	??_decodeGesture
  9951  04A8  0967               	comf	_gesture_lr_delta_+1,w
  9952  04A9  00A1               	movwf	??_decodeGesture+1
  9953  04AA  0AA0               	incf	??_decodeGesture,f
  9954  04AB  1903               	skipnz
  9955  04AC  0AA1               	incf	??_decodeGesture+1,f
  9956  04AD  0820               	movf	??_decodeGesture,w
  9957  04AE  00B0               	movwf	_decodeGesture$1539
  9958  04AF  0821               	movf	??_decodeGesture+1,w
  9959  04B0  00B1               	movwf	_decodeGesture$1539+1
  9960  04B1  2CB7               	goto	l1165
  9961  04B2                     l6202:	
  9962  04B2  0020               	movlb	0	; select bank0
  9963  04B3  0867               	movf	_gesture_lr_delta_+1,w
  9964  04B4  00B1               	movwf	_decodeGesture$1539+1
  9965  04B5  0866               	movf	_gesture_lr_delta_,w
  9966  04B6  00B0               	movwf	_decodeGesture$1539
  9967  04B7                     l1165:	
  9968  04B7  0831               	movf	_decodeGesture$1539+1,w
  9969  04B8  3A80               	xorlw	128
  9970  04B9  00A0               	movwf	??_decodeGesture
  9971  04BA  082F               	movf	_decodeGesture$1538+1,w
  9972  04BB  3A80               	xorlw	128
  9973  04BC  0220               	subwf	??_decodeGesture,w
  9974  04BD  1D03               	skipz
  9975  04BE  2CC1               	goto	u5415
  9976  04BF  082E               	movf	_decodeGesture$1538,w
  9977  04C0  0230               	subwf	_decodeGesture$1539,w
  9978  04C1                     u5415:	
  9979  04C1  1C03               	btfss	3,0
  9980  04C2  2B64               	goto	l6122
  9981  04C3  2B6E               	goto	l6128
  9982  04C4                     l6208:	
  9983                           
  9984                           ;APDS9960.c: 840:         return 0;
  9985  04C4  3000               	movlw	0
  9986  04C5  0008               	return
  9987  04C6                     l6212:	
  9988                           
  9989                           ;APDS9960.c: 843:     return 1;
  9990  04C6  3001               	movlw	1
  9991  04C7  0008               	return
  9992  04C8                     __end_of_decodeGesture:	
  9993                           
  9994                           	psect	text23
  9995  0FB0                     __ptext23:	
  9996 ;; *************** function _Display_Name *****************
  9997 ;; Defined at:
  9998 ;;		line 215 in file "main.c"
  9999 ;; Parameters:    Size  Location     Type
 10000 ;;  string1         2    5[BANK0 ] PTR unsigned char 
 10001 ;;		 -> STR_4(11), STR_3(16), STR_2(13), STR_1(12), 
 10002 ;; Auto vars:     Size  Location     Type
 10003 ;;  i               2   10[BANK0 ] int 
 10004 ;;  length          2    8[BANK0 ] int 
 10005 ;; Return value:  Size  Location     Type
 10006 ;;                  1    wreg      void 
 10007 ;; Registers used:
 10008 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10009 ;; Tracked objects:
 10010 ;;		On entry : 0/0
 10011 ;;		On exit  : 0/0
 10012 ;;		Unchanged: 0/0
 10013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10014 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10015 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10016 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10017 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10018 ;;Total ram usage:        7 bytes
 10019 ;; Hardware stack levels used:    1
 10020 ;; Hardware stack levels required when called:    7
 10021 ;; This function calls:
 10022 ;;		_PWM_Output_Disable
 10023 ;;		_PWM_Output_Enable
 10024 ;;		_SPI_Write
 10025 ;;		_strlen
 10026 ;; This function is called by:
 10027 ;;		_main
 10028 ;;		_handleGesture
 10029 ;;		_Get_ADC
 10030 ;; This function uses a non-reentrant model
 10031 ;;
 10032                           
 10033                           
 10034                           ;psect for function _Display_Name
 10035  0FB0                     _Display_Name:	
 10036                           
 10037                           ;main.c: 216:     int length;;main.c: 217:     int i;;main.c: 218:     PWM_Output_Enable
      +                          ();
 10038                           
 10039                           ;incstack = 0
 10040                           ; Regs used in _Display_Name: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10041  0FB0  3189  21EC  318F   	fcall	_PWM_Output_Enable
 10042                           
 10043                           ;main.c: 219:     _delay((unsigned long)((200)*(250000/4000.0)));
 10044  0FB3  3011               	movlw	17
 10045  0FB4  0020               	movlb	0	; select bank0
 10046  0FB5  00A7               	movwf	??_Display_Name
 10047  0FB6  303A               	movlw	58
 10048  0FB7                     u6397:	
 10049  0FB7  0B89               	decfsz	9,f
 10050  0FB8  2FB7               	goto	u6397
 10051  0FB9  0BA7               	decfsz	??_Display_Name,f
 10052  0FBA  2FB7               	goto	u6397
 10053  0FBB  0000               	nop
 10054                           
 10055                           ;main.c: 220:     PWM_Output_Disable();
 10056  0FBC  3189  21BD  318F   	fcall	_PWM_Output_Disable
 10057                           
 10058                           ;main.c: 222:         SPI_Write(0xFE);
 10059  0FBF  30FE               	movlw	254
 10060  0FC0  318B  231C  318F   	fcall	_SPI_Write
 10061                           
 10062                           ;main.c: 223:         _delay((unsigned long)((100)*(250000/4000.0)));
 10063  0FC3  3009               	movlw	9
 10064  0FC4  0020               	movlb	0	; select bank0
 10065  0FC5  00A7               	movwf	??_Display_Name
 10066  0FC6  301C               	movlw	28
 10067  0FC7                     u6407:	
 10068  0FC7  0B89               	decfsz	9,f
 10069  0FC8  2FC7               	goto	u6407
 10070  0FC9  0BA7               	decfsz	??_Display_Name,f
 10071  0FCA  2FC7               	goto	u6407
 10072  0FCB  0000               	nop
 10073                           
 10074                           ;main.c: 224:         SPI_Write(0x51);
 10075  0FCC  3051               	movlw	81
 10076  0FCD  318B  231C  318F   	fcall	_SPI_Write
 10077                           
 10078                           ;main.c: 225:         length = strlen(string1);
 10079  0FD0  0020               	movlb	0	; select bank0
 10080  0FD1  0826               	movf	Display_Name@string1+1,w
 10081  0FD2  00A1               	movwf	strlen@s+1
 10082  0FD3  0825               	movf	Display_Name@string1,w
 10083  0FD4  00A0               	movwf	strlen@s
 10084  0FD5  318B  2361  318F   	fcall	_strlen
 10085  0FD8  0020               	movlb	0	; select bank0
 10086  0FD9  0821               	movf	?_strlen+1,w
 10087  0FDA  00A9               	movwf	Display_Name@length+1
 10088  0FDB  0820               	movf	?_strlen,w
 10089  0FDC  00A8               	movwf	Display_Name@length
 10090                           
 10091                           ;main.c: 226:         for(i = 0; i < length; i++){
 10092  0FDD  01AA               	clrf	Display_Name@i
 10093  0FDE  01AB               	clrf	Display_Name@i+1
 10094  0FDF                     l6336:	
 10095  0FDF  082B               	movf	Display_Name@i+1,w
 10096  0FE0  3A80               	xorlw	128
 10097  0FE1  00A7               	movwf	??_Display_Name
 10098  0FE2  0829               	movf	Display_Name@length+1,w
 10099  0FE3  3A80               	xorlw	128
 10100  0FE4  0227               	subwf	??_Display_Name,w
 10101  0FE5  1D03               	skipz
 10102  0FE6  2FE9               	goto	u5435
 10103  0FE7  0828               	movf	Display_Name@length,w
 10104  0FE8  022A               	subwf	Display_Name@i,w
 10105  0FE9                     u5435:	
 10106  0FE9  1803               	btfsc	3,0
 10107  0FEA  2FFC               	goto	l777
 10108                           
 10109                           ;main.c: 227:             SPI_Write(string1[i]);
 10110  0FEB  0020               	movlb	0	; select bank0
 10111  0FEC  0825               	movf	Display_Name@string1,w
 10112  0FED  072A               	addwf	Display_Name@i,w
 10113  0FEE  0084               	movwf	4
 10114  0FEF  0826               	movf	Display_Name@string1+1,w
 10115  0FF0  3D2B               	addwfc	Display_Name@i+1,w
 10116  0FF1  0085               	movwf	5
 10117  0FF2  0800               	movf	0,w	;code access
 10118  0FF3  318B  231C  318F   	fcall	_SPI_Write
 10119                           
 10120                           ;main.c: 228:         }
 10121  0FF6  3001               	movlw	1
 10122  0FF7  0020               	movlb	0	; select bank0
 10123  0FF8  07AA               	addwf	Display_Name@i,f
 10124  0FF9  3000               	movlw	0
 10125  0FFA  3DAB               	addwfc	Display_Name@i+1,f
 10126  0FFB  2FDF               	goto	l6336
 10127  0FFC                     l777:	
 10128                           
 10129                           ;main.c: 230:     printed = 1;
 10130  0FFC  0020               	movlb	0	; select bank0
 10131  0FFD  01EE               	clrf	_printed
 10132  0FFE  0AEE               	incf	_printed,f
 10133  0FFF  0008               	return
 10134  1000                     __end_of_Display_Name:	
 10135                           
 10136                           	psect	text24
 10137  0B61                     __ptext24:	
 10138 ;; *************** function _strlen *****************
 10139 ;; Defined at:
 10140 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
 10141 ;; Parameters:    Size  Location     Type
 10142 ;;  s               2    0[BANK0 ] PTR const unsigned char 
 10143 ;;		 -> STR_4(11), STR_3(16), STR_2(13), STR_1(12), 
 10144 ;; Auto vars:     Size  Location     Type
 10145 ;;  a               2    3[BANK0 ] PTR const unsigned char 
 10146 ;;		 -> STR_4(11), STR_3(16), STR_2(13), STR_1(12), 
 10147 ;; Return value:  Size  Location     Type
 10148 ;;                  2    0[BANK0 ] unsigned int 
 10149 ;; Registers used:
 10150 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 10151 ;; Tracked objects:
 10152 ;;		On entry : 0/0
 10153 ;;		On exit  : 0/0
 10154 ;;		Unchanged: 0/0
 10155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10156 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10157 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10158 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10159 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10160 ;;Total ram usage:        5 bytes
 10161 ;; Hardware stack levels used:    1
 10162 ;; Hardware stack levels required when called:    5
 10163 ;; This function calls:
 10164 ;;		Nothing
 10165 ;; This function is called by:
 10166 ;;		_Display_Name
 10167 ;; This function uses a non-reentrant model
 10168 ;;
 10169                           
 10170                           
 10171                           ;psect for function _strlen
 10172  0B61                     _strlen:	
 10173                           
 10174                           ;incstack = 0
 10175                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0]
 10176  0B61  0020               	movlb	0	; select bank0
 10177  0B62  0821               	movf	strlen@s+1,w
 10178  0B63  00A4               	movwf	strlen@a+1
 10179  0B64  0820               	movf	strlen@s,w
 10180  0B65  00A3               	movwf	strlen@a
 10181  0B66                     l5870:	
 10182  0B66  0820               	movf	strlen@s,w
 10183  0B67  0084               	movwf	4
 10184  0B68  0821               	movf	strlen@s+1,w
 10185  0B69  0085               	movwf	5
 10186  0B6A  0012               	moviw fsr0++
 10187  0B6B  1903               	btfsc	3,2
 10188  0B6C  2B72               	goto	l5872
 10189  0B6D  3001               	movlw	1
 10190  0B6E  07A0               	addwf	strlen@s,f
 10191  0B6F  3000               	movlw	0
 10192  0B70  3DA1               	addwfc	strlen@s+1,f
 10193  0B71  2B66               	goto	l5870
 10194  0B72                     l5872:	
 10195  0B72  0823               	movf	strlen@a,w
 10196  0B73  0220               	subwf	strlen@s,w
 10197  0B74  00A0               	movwf	?_strlen
 10198  0B75  0824               	movf	strlen@a+1,w
 10199  0B76  3B21               	subwfb	strlen@s+1,w
 10200  0B77  00A1               	movwf	?_strlen+1
 10201  0B78  0008               	return
 10202  0B79                     __end_of_strlen:	
 10203                           
 10204                           	psect	text25
 10205  09EC                     __ptext25:	
 10206 ;; *************** function _PWM_Output_Enable *****************
 10207 ;; Defined at:
 10208 ;;		line 284 in file "main.c"
 10209 ;; Parameters:    Size  Location     Type
 10210 ;;		None
 10211 ;; Auto vars:     Size  Location     Type
 10212 ;;		None
 10213 ;; Return value:  Size  Location     Type
 10214 ;;                  1    wreg      void 
 10215 ;; Registers used:
 10216 ;;		wreg
 10217 ;; Tracked objects:
 10218 ;;		On entry : 0/0
 10219 ;;		On exit  : 0/0
 10220 ;;		Unchanged: 0/0
 10221 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10222 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10223 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10224 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10225 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10226 ;;Total ram usage:        0 bytes
 10227 ;; Hardware stack levels used:    1
 10228 ;; Hardware stack levels required when called:    5
 10229 ;; This function calls:
 10230 ;;		Nothing
 10231 ;; This function is called by:
 10232 ;;		_Display_Name
 10233 ;;		_PWM
 10234 ;; This function uses a non-reentrant model
 10235 ;;
 10236                           
 10237                           
 10238                           ;psect for function _PWM_Output_Enable
 10239  09EC                     _PWM_Output_Enable:	
 10240                           
 10241                           ;main.c: 285:     RC6PPS = 0x0C;
 10242                           
 10243                           ;incstack = 0
 10244                           ; Regs used in _PWM_Output_Enable: [wreg]
 10245  09EC  300C               	movlw	12
 10246  09ED  003D               	movlb	29	; select bank29
 10247  09EE  00A6               	movwf	38	;volatile
 10248  09EF  0008               	return
 10249  09F0                     __end_of_PWM_Output_Enable:	
 10250                           
 10251                           	psect	text26
 10252  09BD                     __ptext26:	
 10253 ;; *************** function _PWM_Output_Disable *****************
 10254 ;; Defined at:
 10255 ;;		line 288 in file "main.c"
 10256 ;; Parameters:    Size  Location     Type
 10257 ;;		None
 10258 ;; Auto vars:     Size  Location     Type
 10259 ;;		None
 10260 ;; Return value:  Size  Location     Type
 10261 ;;                  1    wreg      void 
 10262 ;; Registers used:
 10263 ;;		status,2
 10264 ;; Tracked objects:
 10265 ;;		On entry : 0/0
 10266 ;;		On exit  : 0/0
 10267 ;;		Unchanged: 0/0
 10268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10269 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10270 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10271 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10272 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10273 ;;Total ram usage:        0 bytes
 10274 ;; Hardware stack levels used:    1
 10275 ;; Hardware stack levels required when called:    5
 10276 ;; This function calls:
 10277 ;;		Nothing
 10278 ;; This function is called by:
 10279 ;;		_Display_Name
 10280 ;;		_PWM
 10281 ;; This function uses a non-reentrant model
 10282 ;;
 10283                           
 10284                           
 10285                           ;psect for function _PWM_Output_Disable
 10286  09BD                     _PWM_Output_Disable:	
 10287                           
 10288                           ;main.c: 289:     RC6PPS = 0x00;
 10289                           
 10290                           ;incstack = 0
 10291                           ; Regs used in _PWM_Output_Disable: [status,2]
 10292  09BD  003D               	movlb	29	; select bank29
 10293  09BE  01A6               	clrf	38	;volatile
 10294  09BF  0008               	return
 10295  09C0                     __end_of_PWM_Output_Disable:	
 10296                           
 10297                           	psect	text27
 10298  06D1                     __ptext27:	
 10299 ;; *************** function _enableGestureSensor *****************
 10300 ;; Defined at:
 10301 ;;		line 409 in file "APDS9960.c"
 10302 ;; Parameters:    Size  Location     Type
 10303 ;;  interrupts      1    wreg     _Bool 
 10304 ;; Auto vars:     Size  Location     Type
 10305 ;;  interrupts      1   17[BANK0 ] _Bool 
 10306 ;; Return value:  Size  Location     Type
 10307 ;;                  1    wreg      _Bool 
 10308 ;; Registers used:
 10309 ;;		wreg, status,2, status,0, pclath, cstack
 10310 ;; Tracked objects:
 10311 ;;		On entry : 0/0
 10312 ;;		On exit  : 0/0
 10313 ;;		Unchanged: 0/0
 10314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10315 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10316 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10317 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10318 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10319 ;;Total ram usage:        2 bytes
 10320 ;; Hardware stack levels used:    1
 10321 ;; Hardware stack levels required when called:   11
 10322 ;; This function calls:
 10323 ;;		_enablePower
 10324 ;;		_resetGestureParameters
 10325 ;;		_setGestureIntEnable
 10326 ;;		_setGestureMode
 10327 ;;		_setLEDBoost
 10328 ;;		_setMode
 10329 ;;		_wireWriteDataByte
 10330 ;; This function is called by:
 10331 ;;		_main
 10332 ;; This function uses a non-reentrant model
 10333 ;;
 10334                           
 10335                           
 10336                           ;psect for function _enableGestureSensor
 10337  06D1                     _enableGestureSensor:	
 10338                           
 10339                           ;incstack = 0
 10340                           ; Regs used in _enableGestureSensor: [wreg+status,2+status,0+pclath+cstack]
 10341                           ;enableGestureSensor@interrupts stored from wreg
 10342  06D1  0020               	movlb	0	; select bank0
 10343  06D2  00B1               	movwf	enableGestureSensor@interrupts
 10344                           
 10345                           ;APDS9960.c: 409: _Bool enableGestureSensor ( _Bool interrupts);APDS9960.c: 410: {;APDS9
      +                          960.c: 418:     resetGestureParameters();
 10346  06D3  318B  2349  3186   	fcall	_resetGestureParameters
 10347                           
 10348                           ;APDS9960.c: 419:     if( !wireWriteDataByte(0x83, 0xFF) ) {
 10349  06D6  30FF               	movlw	255
 10350  06D7  0020               	movlb	0	; select bank0
 10351  06D8  00B0               	movwf	??_enableGestureSensor
 10352  06D9  0830               	movf	??_enableGestureSensor,w
 10353  06DA  00A6               	movwf	wireWriteDataByte@val
 10354  06DB  3083               	movlw	131
 10355  06DC  318B  2379  3186   	fcall	_wireWriteDataByte
 10356  06DF  0020               	movlb	0	; select bank0
 10357  06E0  0826               	movf	?_wireWriteDataByte,w
 10358  06E1  0427               	iorwf	?_wireWriteDataByte+1,w
 10359  06E2  1903               	btfsc	3,2
 10360  06E3  2EE7               	goto	l6818
 10361  06E4  2EE9               	goto	l6822
 10362  06E5                     l6836:	
 10363                           
 10364                           ;APDS9960.c: 429:         if( !setGestureIntEnable(1) ) {
 10365  06E5  3001               	movlw	1
 10366  06E6  2F02               	goto	L8
 10367  06E7                     l6818:	
 10368                           
 10369                           ;APDS9960.c: 420:         return 0;
 10370  06E7  3000               	movlw	0
 10371  06E8  0008               	return
 10372  06E9                     l6822:	
 10373                           
 10374                           ;APDS9960.c: 422:     if( !wireWriteDataByte(0x8E, 0x89) ) {
 10375  06E9  3089               	movlw	137
 10376  06EA  00B0               	movwf	??_enableGestureSensor
 10377  06EB  0830               	movf	??_enableGestureSensor,w
 10378  06EC  00A6               	movwf	wireWriteDataByte@val
 10379  06ED  308E               	movlw	142
 10380  06EE  318B  2379  3186   	fcall	_wireWriteDataByte
 10381  06F1  0020               	movlb	0	; select bank0
 10382  06F2  0826               	movf	?_wireWriteDataByte,w
 10383  06F3  0427               	iorwf	?_wireWriteDataByte+1,w
 10384  06F4  1903               	btfsc	3,2
 10385  06F5  2EE7               	goto	l6818
 10386                           
 10387                           ;APDS9960.c: 425:     if( !setLEDBoost(3) ) {
 10388  06F6  3003               	movlw	3
 10389  06F7  318D  25B6  3186   	fcall	_setLEDBoost
 10390  06FA  3A00               	xorlw	0
 10391  06FB  1903               	btfsc	3,2
 10392  06FC  2EE7               	goto	l6818
 10393                           
 10394                           ;APDS9960.c: 428:     if( interrupts ) {
 10395  06FD  0020               	movlb	0	; select bank0
 10396  06FE  0831               	movf	enableGestureSensor@interrupts,w
 10397  06FF  1D03               	btfss	3,2
 10398  0700  2EE5               	goto	l6836
 10399                           
 10400                           ;APDS9960.c: 433:         if( !setGestureIntEnable(0) ) {
 10401  0701  3000               	movlw	0
 10402  0702                     L8:	
 10403  0702  318D  252F  3186   	fcall	_setGestureIntEnable
 10404  0705  3A00               	xorlw	0
 10405  0706  1903               	btfsc	3,2
 10406  0707  2EE7               	goto	l6818
 10407                           
 10408                           ;APDS9960.c: 437:     if( !setGestureMode(1) ) {
 10409  0708  3001               	movlw	1
 10410  0709  318C  2416  3186   	fcall	_setGestureMode
 10411  070C  3A00               	xorlw	0
 10412  070D  1903               	btfsc	3,2
 10413  070E  2EE7               	goto	l6818
 10414                           
 10415                           ;APDS9960.c: 440:     if( !enablePower() ){
 10416  070F  318A  228F  3186   	fcall	_enablePower
 10417  0712  3A00               	xorlw	0
 10418  0713  1903               	btfsc	3,2
 10419  0714  2EE7               	goto	l6818
 10420                           
 10421                           ;APDS9960.c: 443:     if( !setMode(3, 1) ) {
 10422  0715  0020               	movlb	0	; select bank0
 10423  0716  01AB               	clrf	setMode@enable
 10424  0717  0AAB               	incf	setMode@enable,f
 10425  0718  3003               	movlw	3
 10426  0719  318F  2761  3186   	fcall	_setMode
 10427  071C  3A00               	xorlw	0
 10428  071D  1903               	btfsc	3,2
 10429  071E  2EE7               	goto	l6818
 10430                           
 10431                           ;APDS9960.c: 446:     if( !setMode(2, 1) ) {
 10432  071F  0020               	movlb	0	; select bank0
 10433  0720  01AB               	clrf	setMode@enable
 10434  0721  0AAB               	incf	setMode@enable,f
 10435  0722  3002               	movlw	2
 10436  0723  318F  2761  3186   	fcall	_setMode
 10437  0726  3A00               	xorlw	0
 10438  0727  1903               	btfsc	3,2
 10439  0728  2EE7               	goto	l6818
 10440                           
 10441                           ;APDS9960.c: 449:     if( !setMode(6, 1) ) {
 10442  0729  0020               	movlb	0	; select bank0
 10443  072A  01AB               	clrf	setMode@enable
 10444  072B  0AAB               	incf	setMode@enable,f
 10445  072C  3006               	movlw	6
 10446  072D  318F  2761  3186   	fcall	_setMode
 10447  0730  3A00               	xorlw	0
 10448  0731  1903               	btfsc	3,2
 10449  0732  2EE7               	goto	l6818
 10450                           
 10451                           ;APDS9960.c: 453:     return 1;
 10452  0733  3001               	movlw	1
 10453  0734  0008               	return
 10454  0735                     __end_of_enableGestureSensor:	
 10455                           
 10456                           	psect	text28
 10457  0DB6                     __ptext28:	
 10458 ;; *************** function _setLEDBoost *****************
 10459 ;; Defined at:
 10460 ;;		line 484 in file "APDS9960.c"
 10461 ;; Parameters:    Size  Location     Type
 10462 ;;  boost           1    wreg     unsigned char 
 10463 ;; Auto vars:     Size  Location     Type
 10464 ;;  boost           1   13[BANK0 ] unsigned char 
 10465 ;;  val             1   12[BANK0 ] unsigned char 
 10466 ;; Return value:  Size  Location     Type
 10467 ;;                  1    wreg      _Bool 
 10468 ;; Registers used:
 10469 ;;		wreg, status,2, status,0, pclath, cstack
 10470 ;; Tracked objects:
 10471 ;;		On entry : 0/0
 10472 ;;		On exit  : 0/0
 10473 ;;		Unchanged: 0/0
 10474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10476 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10477 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10478 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10479 ;;Total ram usage:        4 bytes
 10480 ;; Hardware stack levels used:    1
 10481 ;; Hardware stack levels required when called:    8
 10482 ;; This function calls:
 10483 ;;		_wireReadDataByte
 10484 ;;		_wireWriteDataByte
 10485 ;; This function is called by:
 10486 ;;		_enableGestureSensor
 10487 ;; This function uses a non-reentrant model
 10488 ;;
 10489                           
 10490                           
 10491                           ;psect for function _setLEDBoost
 10492  0DB6                     _setLEDBoost:	
 10493                           
 10494                           ;incstack = 0
 10495                           ; Regs used in _setLEDBoost: [wreg+status,2+status,0+pclath+cstack]
 10496                           ;setLEDBoost@boost stored from wreg
 10497  0DB6  0020               	movlb	0	; select bank0
 10498  0DB7  00AD               	movwf	setLEDBoost@boost
 10499                           
 10500                           ;APDS9960.c: 484: _Bool setLEDBoost(uint8_t boost);APDS9960.c: 485: {;APDS9960.c: 486:  
      +                             uint8_t val;;APDS9960.c: 489:     val=wireReadDataByte(0x90);
 10501  0DB8  3090               	movlw	144
 10502  0DB9  318B  23CC  318D   	fcall	_wireReadDataByte
 10503  0DBC  0020               	movlb	0	; select bank0
 10504  0DBD  00AA               	movwf	??_setLEDBoost
 10505  0DBE  082A               	movf	??_setLEDBoost,w
 10506  0DBF  00AC               	movwf	setLEDBoost@val
 10507                           
 10508                           ;APDS9960.c: 492:     boost &= 0b00000011;
 10509  0DC0  3003               	movlw	3
 10510  0DC1  00AA               	movwf	??_setLEDBoost
 10511  0DC2  082A               	movf	??_setLEDBoost,w
 10512  0DC3  05AD               	andwf	setLEDBoost@boost,f
 10513                           
 10514                           ;APDS9960.c: 493:     boost = boost << 4;
 10515  0DC4  082D               	movf	setLEDBoost@boost,w
 10516  0DC5  00AA               	movwf	??_setLEDBoost
 10517  0DC6  3003               	movlw	3
 10518  0DC7                     u5695:	
 10519  0DC7  35AA               	lslf	??_setLEDBoost,f
 10520  0DC8  3EFF               	addlw	-1
 10521  0DC9  1D03               	skipz
 10522  0DCA  2DC7               	goto	u5695
 10523  0DCB  352A               	lslf	??_setLEDBoost,w
 10524  0DCC  00AB               	movwf	??_setLEDBoost+1
 10525  0DCD  082B               	movf	??_setLEDBoost+1,w
 10526  0DCE  00AD               	movwf	setLEDBoost@boost
 10527                           
 10528                           ;APDS9960.c: 494:     val &= 0b11001111;
 10529  0DCF  30CF               	movlw	207
 10530  0DD0  00AA               	movwf	??_setLEDBoost
 10531  0DD1  082A               	movf	??_setLEDBoost,w
 10532  0DD2  05AC               	andwf	setLEDBoost@val,f
 10533                           
 10534                           ;APDS9960.c: 495:     val |= boost;
 10535  0DD3  082D               	movf	setLEDBoost@boost,w
 10536  0DD4  00AA               	movwf	??_setLEDBoost
 10537  0DD5  082A               	movf	??_setLEDBoost,w
 10538  0DD6  04AC               	iorwf	setLEDBoost@val,f
 10539                           
 10540                           ;APDS9960.c: 498:     if( !wireWriteDataByte(0x90, val) ) {
 10541  0DD7  082C               	movf	setLEDBoost@val,w
 10542  0DD8  00AA               	movwf	??_setLEDBoost
 10543  0DD9  082A               	movf	??_setLEDBoost,w
 10544  0DDA  00A6               	movwf	wireWriteDataByte@val
 10545  0DDB  3090               	movlw	144
 10546  0DDC  318B  2379  318D   	fcall	_wireWriteDataByte
 10547  0DDF  0020               	movlb	0	; select bank0
 10548  0DE0  0826               	movf	?_wireWriteDataByte,w
 10549  0DE1  0427               	iorwf	?_wireWriteDataByte+1,w
 10550  0DE2  1D03               	btfss	3,2
 10551  0DE3  2DE6               	goto	l6602
 10552                           
 10553                           ;APDS9960.c: 499:         return 0;
 10554  0DE4  3000               	movlw	0
 10555  0DE5  0008               	return
 10556  0DE6                     l6602:	
 10557                           
 10558                           ;APDS9960.c: 502:     return 1;
 10559  0DE6  3001               	movlw	1
 10560  0DE7  0008               	return
 10561  0DE8                     __end_of_setLEDBoost:	
 10562                           
 10563                           	psect	text29
 10564  0C16                     __ptext29:	
 10565 ;; *************** function _setGestureMode *****************
 10566 ;; Defined at:
 10567 ;;		line 506 in file "APDS9960.c"
 10568 ;; Parameters:    Size  Location     Type
 10569 ;;  mode            1    wreg     unsigned char 
 10570 ;; Auto vars:     Size  Location     Type
 10571 ;;  mode            1   11[BANK0 ] unsigned char 
 10572 ;;  val             1   12[BANK0 ] unsigned char 
 10573 ;; Return value:  Size  Location     Type
 10574 ;;                  1    wreg      _Bool 
 10575 ;; Registers used:
 10576 ;;		wreg, status,2, status,0, pclath, cstack
 10577 ;; Tracked objects:
 10578 ;;		On entry : 0/0
 10579 ;;		On exit  : 0/0
 10580 ;;		Unchanged: 0/0
 10581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10582 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10583 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10584 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10585 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10586 ;;Total ram usage:        3 bytes
 10587 ;; Hardware stack levels used:    1
 10588 ;; Hardware stack levels required when called:    8
 10589 ;; This function calls:
 10590 ;;		_wireReadDataByte
 10591 ;;		_wireWriteDataByte
 10592 ;; This function is called by:
 10593 ;;		_enableGestureSensor
 10594 ;; This function uses a non-reentrant model
 10595 ;;
 10596                           
 10597                           
 10598                           ;psect for function _setGestureMode
 10599  0C16                     _setGestureMode:	
 10600                           
 10601                           ;incstack = 0
 10602                           ; Regs used in _setGestureMode: [wreg+status,2+status,0+pclath+cstack]
 10603                           ;setGestureMode@mode stored from wreg
 10604  0C16  0020               	movlb	0	; select bank0
 10605  0C17  00AB               	movwf	setGestureMode@mode
 10606                           
 10607                           ;APDS9960.c: 506: _Bool setGestureMode(uint8_t mode);APDS9960.c: 507: {;APDS9960.c: 508:
      +                               uint8_t val;;APDS9960.c: 511:     val = wireReadDataByte(0xAB);
 10608  0C18  30AB               	movlw	171
 10609  0C19  318B  23CC  318C   	fcall	_wireReadDataByte
 10610  0C1C  0020               	movlb	0	; select bank0
 10611  0C1D  00AA               	movwf	??_setGestureMode
 10612  0C1E  082A               	movf	??_setGestureMode,w
 10613  0C1F  00AC               	movwf	setGestureMode@val
 10614                           
 10615                           ;APDS9960.c: 514:     mode &= 0b00000001;
 10616  0C20  3001               	movlw	1
 10617  0C21  00AA               	movwf	??_setGestureMode
 10618  0C22  082A               	movf	??_setGestureMode,w
 10619  0C23  05AB               	andwf	setGestureMode@mode,f
 10620                           
 10621                           ;APDS9960.c: 515:     val &= 0b11111110;
 10622  0C24  30FE               	movlw	254
 10623  0C25  00AA               	movwf	??_setGestureMode
 10624  0C26  082A               	movf	??_setGestureMode,w
 10625  0C27  05AC               	andwf	setGestureMode@val,f
 10626                           
 10627                           ;APDS9960.c: 516:     val |= mode;
 10628  0C28  082B               	movf	setGestureMode@mode,w
 10629  0C29  00AA               	movwf	??_setGestureMode
 10630  0C2A  082A               	movf	??_setGestureMode,w
 10631  0C2B  04AC               	iorwf	setGestureMode@val,f
 10632                           
 10633                           ;APDS9960.c: 519:     if( !wireWriteDataByte(0xAB, val) ) {
 10634  0C2C  082C               	movf	setGestureMode@val,w
 10635  0C2D  00AA               	movwf	??_setGestureMode
 10636  0C2E  082A               	movf	??_setGestureMode,w
 10637  0C2F  00A6               	movwf	wireWriteDataByte@val
 10638  0C30  30AB               	movlw	171
 10639  0C31  318B  2379  318C   	fcall	_wireWriteDataByte
 10640  0C34  0020               	movlb	0	; select bank0
 10641  0C35  0826               	movf	?_wireWriteDataByte,w
 10642  0C36  0427               	iorwf	?_wireWriteDataByte+1,w
 10643  0C37  1D03               	btfss	3,2
 10644  0C38  2C3B               	goto	l6620
 10645                           
 10646                           ;APDS9960.c: 520:         return 0;
 10647  0C39  3000               	movlw	0
 10648  0C3A  0008               	return
 10649  0C3B                     l6620:	
 10650                           
 10651                           ;APDS9960.c: 523:     return 1;
 10652  0C3B  3001               	movlw	1
 10653  0C3C  0008               	return
 10654  0C3D                     __end_of_setGestureMode:	
 10655                           
 10656                           	psect	text30
 10657  0D2F                     __ptext30:	
 10658 ;; *************** function _setGestureIntEnable *****************
 10659 ;; Defined at:
 10660 ;;		line 387 in file "APDS9960.c"
 10661 ;; Parameters:    Size  Location     Type
 10662 ;;  enable          1    wreg     unsigned char 
 10663 ;; Auto vars:     Size  Location     Type
 10664 ;;  enable          1   12[BANK0 ] unsigned char 
 10665 ;;  val             1   11[BANK0 ] unsigned char 
 10666 ;; Return value:  Size  Location     Type
 10667 ;;                  1    wreg      _Bool 
 10668 ;; Registers used:
 10669 ;;		wreg, status,2, status,0, pclath, cstack
 10670 ;; Tracked objects:
 10671 ;;		On entry : 0/0
 10672 ;;		On exit  : 0/0
 10673 ;;		Unchanged: 0/0
 10674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10675 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10676 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10677 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10678 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10679 ;;Total ram usage:        3 bytes
 10680 ;; Hardware stack levels used:    1
 10681 ;; Hardware stack levels required when called:    8
 10682 ;; This function calls:
 10683 ;;		_wireReadDataByte
 10684 ;;		_wireWriteDataByte
 10685 ;; This function is called by:
 10686 ;;		_initialize
 10687 ;;		_enableGestureSensor
 10688 ;; This function uses a non-reentrant model
 10689 ;;
 10690                           
 10691                           
 10692                           ;psect for function _setGestureIntEnable
 10693  0D2F                     _setGestureIntEnable:	
 10694                           
 10695                           ;incstack = 0
 10696                           ; Regs used in _setGestureIntEnable: [wreg+status,2+status,0+pclath+cstack]
 10697                           ;setGestureIntEnable@enable stored from wreg
 10698  0D2F  0020               	movlb	0	; select bank0
 10699  0D30  00AC               	movwf	setGestureIntEnable@enable
 10700                           
 10701                           ;APDS9960.c: 387: _Bool setGestureIntEnable(uint8_t enable);APDS9960.c: 388: {;APDS9960.
      +                          c: 389:     uint8_t val;;APDS9960.c: 392:     val = wireReadDataByte(0xAB);
 10702  0D31  30AB               	movlw	171
 10703  0D32  318B  23CC  318D   	fcall	_wireReadDataByte
 10704  0D35  0020               	movlb	0	; select bank0
 10705  0D36  00AA               	movwf	??_setGestureIntEnable
 10706  0D37  082A               	movf	??_setGestureIntEnable,w
 10707  0D38  00AB               	movwf	setGestureIntEnable@val
 10708                           
 10709                           ;APDS9960.c: 395:     enable &= 0b00000001;
 10710  0D39  3001               	movlw	1
 10711  0D3A  00AA               	movwf	??_setGestureIntEnable
 10712  0D3B  082A               	movf	??_setGestureIntEnable,w
 10713  0D3C  05AC               	andwf	setGestureIntEnable@enable,f
 10714                           
 10715                           ;APDS9960.c: 396:     enable = enable << 1;
 10716  0D3D  352C               	lslf	setGestureIntEnable@enable,w
 10717  0D3E  00AA               	movwf	??_setGestureIntEnable
 10718  0D3F  082A               	movf	??_setGestureIntEnable,w
 10719  0D40  00AC               	movwf	setGestureIntEnable@enable
 10720                           
 10721                           ;APDS9960.c: 397:     val &= 0b11111101;
 10722  0D41  30FD               	movlw	253
 10723  0D42  00AA               	movwf	??_setGestureIntEnable
 10724  0D43  082A               	movf	??_setGestureIntEnable,w
 10725  0D44  05AB               	andwf	setGestureIntEnable@val,f
 10726                           
 10727                           ;APDS9960.c: 398:     val |= enable;
 10728  0D45  082C               	movf	setGestureIntEnable@enable,w
 10729  0D46  00AA               	movwf	??_setGestureIntEnable
 10730  0D47  082A               	movf	??_setGestureIntEnable,w
 10731  0D48  04AB               	iorwf	setGestureIntEnable@val,f
 10732                           
 10733                           ;APDS9960.c: 401:     if( !wireWriteDataByte(0xAB, val) ) {
 10734  0D49  082B               	movf	setGestureIntEnable@val,w
 10735  0D4A  00AA               	movwf	??_setGestureIntEnable
 10736  0D4B  082A               	movf	??_setGestureIntEnable,w
 10737  0D4C  00A6               	movwf	wireWriteDataByte@val
 10738  0D4D  30AB               	movlw	171
 10739  0D4E  318B  2379  318D   	fcall	_wireWriteDataByte
 10740  0D51  0020               	movlb	0	; select bank0
 10741  0D52  0826               	movf	?_wireWriteDataByte,w
 10742  0D53  0427               	iorwf	?_wireWriteDataByte+1,w
 10743  0D54  1D03               	btfss	3,2
 10744  0D55  2D58               	goto	l6584
 10745                           
 10746                           ;APDS9960.c: 402:         return 0;
 10747  0D56  3000               	movlw	0
 10748  0D57  0008               	return
 10749  0D58                     l6584:	
 10750                           
 10751                           ;APDS9960.c: 405:     return 1;
 10752  0D58  3001               	movlw	1
 10753  0D59  0008               	return
 10754  0D5A                     __end_of_setGestureIntEnable:	
 10755                           
 10756                           	psect	text31
 10757  0B49                     __ptext31:	
 10758 ;; *************** function _resetGestureParameters *****************
 10759 ;; Defined at:
 10760 ;;		line 457 in file "APDS9960.c"
 10761 ;; Parameters:    Size  Location     Type
 10762 ;;		None
 10763 ;; Auto vars:     Size  Location     Type
 10764 ;;		None
 10765 ;; Return value:  Size  Location     Type
 10766 ;;                  1    wreg      void 
 10767 ;; Registers used:
 10768 ;;		status,2
 10769 ;; Tracked objects:
 10770 ;;		On entry : 0/0
 10771 ;;		On exit  : 0/0
 10772 ;;		Unchanged: 0/0
 10773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10775 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10777 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10778 ;;Total ram usage:        0 bytes
 10779 ;; Hardware stack levels used:    1
 10780 ;; Hardware stack levels required when called:    5
 10781 ;; This function calls:
 10782 ;;		Nothing
 10783 ;; This function is called by:
 10784 ;;		_enableGestureSensor
 10785 ;;		_readGesture
 10786 ;; This function uses a non-reentrant model
 10787 ;;
 10788                           
 10789                           
 10790                           ;psect for function _resetGestureParameters
 10791  0B49                     _resetGestureParameters:	
 10792                           
 10793                           ;APDS9960.c: 460:     gesture_data_.index = 0;
 10794                           
 10795                           ;incstack = 0
 10796                           ; Regs used in _resetGestureParameters: [status,2]
 10797  0B49  0024               	movlb	4	; select bank4
 10798  0B4A  01E0               	clrf	(_gesture_data_^(0+512)+64)
 10799                           
 10800                           ;APDS9960.c: 461:     gesture_data_.total_gestures = 0;
 10801  0B4B  01E1               	clrf	(_gesture_data_^(0+512)+65)
 10802                           
 10803                           ;APDS9960.c: 463:     gesture_ud_delta_ = 0;
 10804  0B4C  0020               	movlb	0	; select bank0
 10805  0B4D  01E8               	clrf	_gesture_ud_delta_
 10806  0B4E  01E9               	clrf	_gesture_ud_delta_+1
 10807                           
 10808                           ;APDS9960.c: 464:     gesture_lr_delta_ = 0;
 10809  0B4F  01E6               	clrf	_gesture_lr_delta_
 10810  0B50  01E7               	clrf	_gesture_lr_delta_+1
 10811                           
 10812                           ;APDS9960.c: 466:     gesture_ud_count_ = 0;
 10813  0B51  01E4               	clrf	_gesture_ud_count_
 10814  0B52  01E5               	clrf	_gesture_ud_count_+1
 10815                           
 10816                           ;APDS9960.c: 467:     gesture_lr_count_ = 0;
 10817  0B53  01E2               	clrf	_gesture_lr_count_
 10818  0B54  01E3               	clrf	_gesture_lr_count_+1
 10819                           
 10820                           ;APDS9960.c: 469:     gesture_near_count_ = 0;
 10821  0B55  01E0               	clrf	_gesture_near_count_
 10822  0B56  01E1               	clrf	_gesture_near_count_+1
 10823                           
 10824                           ;APDS9960.c: 470:     gesture_far_count_ = 0;
 10825  0B57  0021               	movlb	1	; select bank1
 10826  0B58  01E2               	clrf	_gesture_far_count_^(0+128)
 10827  0B59  01E3               	clrf	(_gesture_far_count_+1)^(0+128)
 10828                           
 10829                           ;APDS9960.c: 472:     gesture_state_ = 0;
 10830  0B5A  0020               	movlb	0	; select bank0
 10831  0B5B  01DE               	clrf	_gesture_state_
 10832  0B5C  01DF               	clrf	_gesture_state_+1
 10833                           
 10834                           ;APDS9960.c: 473:     gesture_motion_ = DIR_NONE;
 10835  0B5D  0022               	movlb	2	; select bank2
 10836  0B5E  01E8               	clrf	_gesture_motion_^(0+256)
 10837  0B5F  01E9               	clrf	(_gesture_motion_+1)^(0+256)
 10838  0B60  0008               	return
 10839  0B61                     __end_of_resetGestureParameters:	
 10840                           
 10841                           	psect	text32
 10842  0A8F                     __ptext32:	
 10843 ;; *************** function _enablePower *****************
 10844 ;; Defined at:
 10845 ;;		line 527 in file "APDS9960.c"
 10846 ;; Parameters:    Size  Location     Type
 10847 ;;		None
 10848 ;; Auto vars:     Size  Location     Type
 10849 ;;		None
 10850 ;; Return value:  Size  Location     Type
 10851 ;;                  1    wreg      _Bool 
 10852 ;; Registers used:
 10853 ;;		wreg, status,2, status,0, pclath, cstack
 10854 ;; Tracked objects:
 10855 ;;		On entry : 0/0
 10856 ;;		On exit  : 0/0
 10857 ;;		Unchanged: 0/0
 10858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10860 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10861 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10862 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10863 ;;Total ram usage:        0 bytes
 10864 ;; Hardware stack levels used:    1
 10865 ;; Hardware stack levels required when called:   10
 10866 ;; This function calls:
 10867 ;;		_setMode
 10868 ;; This function is called by:
 10869 ;;		_enableGestureSensor
 10870 ;; This function uses a non-reentrant model
 10871 ;;
 10872                           
 10873                           
 10874                           ;psect for function _enablePower
 10875  0A8F                     _enablePower:	
 10876                           
 10877                           ;APDS9960.c: 529:     if( !setMode(0, 1) ) {
 10878                           
 10879                           ;incstack = 0
 10880                           ; Regs used in _enablePower: [wreg+status,2+status,0+pclath+cstack]
 10881  0A8F  0020               	movlb	0	; select bank0
 10882  0A90  01AB               	clrf	setMode@enable
 10883  0A91  0AAB               	incf	setMode@enable,f
 10884  0A92  3000               	movlw	0
 10885  0A93  318F  2761  318A   	fcall	_setMode
 10886  0A96  3A00               	xorlw	0
 10887  0A97  1D03               	skipz
 10888  0A98  2A9B               	goto	l6630
 10889                           
 10890                           ;APDS9960.c: 530:         return 0;
 10891  0A99  3000               	movlw	0
 10892  0A9A  0008               	return
 10893  0A9B                     l6630:	
 10894                           
 10895                           ;APDS9960.c: 533:     return 1;
 10896  0A9B  3001               	movlw	1
 10897  0A9C  0008               	return
 10898  0A9D                     __end_of_enablePower:	
 10899                           
 10900                           	psect	text33
 10901  0F61                     __ptext33:	
 10902 ;; *************** function _setMode *****************
 10903 ;; Defined at:
 10904 ;;		line 124 in file "APDS9960.c"
 10905 ;; Parameters:    Size  Location     Type
 10906 ;;  mode            1    wreg     unsigned char 
 10907 ;;  enable          1   11[BANK0 ] unsigned char 
 10908 ;; Auto vars:     Size  Location     Type
 10909 ;;  mode            1   15[BANK0 ] unsigned char 
 10910 ;;  reg_val         1   14[BANK0 ] unsigned char 
 10911 ;; Return value:  Size  Location     Type
 10912 ;;                  1    wreg      _Bool 
 10913 ;; Registers used:
 10914 ;;		wreg, status,2, status,0, pclath, cstack
 10915 ;; Tracked objects:
 10916 ;;		On entry : 0/0
 10917 ;;		On exit  : 0/0
 10918 ;;		Unchanged: 0/0
 10919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10920 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10921 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10922 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10923 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10924 ;;Total ram usage:        5 bytes
 10925 ;; Hardware stack levels used:    1
 10926 ;; Hardware stack levels required when called:    9
 10927 ;; This function calls:
 10928 ;;		_getMode
 10929 ;;		_wireWriteDataByte
 10930 ;; This function is called by:
 10931 ;;		_initialize
 10932 ;;		_enableGestureSensor
 10933 ;;		_enablePower
 10934 ;; This function uses a non-reentrant model
 10935 ;;
 10936                           
 10937                           
 10938                           ;psect for function _setMode
 10939  0F61                     _setMode:	
 10940                           
 10941                           ;incstack = 0
 10942                           ; Regs used in _setMode: [wreg+status,2+status,0+pclath+cstack]
 10943                           ;setMode@mode stored from wreg
 10944  0F61  0020               	movlb	0	; select bank0
 10945  0F62  00AF               	movwf	setMode@mode
 10946                           
 10947                           ;APDS9960.c: 124: _Bool setMode(uint8_t mode, uint8_t enable);APDS9960.c: 125: {;APDS996
      +                          0.c: 126:     uint8_t reg_val;;APDS9960.c: 129:     reg_val = getMode();
 10948  0F63  318A  2266  318F   	fcall	_getMode
 10949  0F66  0020               	movlb	0	; select bank0
 10950  0F67  00AC               	movwf	??_setMode
 10951  0F68  082C               	movf	??_setMode,w
 10952  0F69  00AE               	movwf	setMode@reg_val
 10953                           
 10954                           ;APDS9960.c: 130:     if( reg_val == 0xFF ) {
 10955  0F6A  0A2E               	incf	setMode@reg_val,w
 10956  0F6B  1D03               	btfss	3,2
 10957  0F6C  2F6F               	goto	l5884
 10958  0F6D                     l5880:	
 10959                           
 10960                           ;APDS9960.c: 131:         return 0;
 10961  0F6D  3000               	movlw	0
 10962  0F6E  0008               	return
 10963  0F6F                     l5884:	
 10964                           
 10965                           ;APDS9960.c: 135:     enable = enable & 0x01;
 10966  0F6F  082B               	movf	setMode@enable,w
 10967  0F70  3901               	andlw	1
 10968  0F71  00AC               	movwf	??_setMode
 10969  0F72  082C               	movf	??_setMode,w
 10970  0F73  00AB               	movwf	setMode@enable
 10971                           
 10972                           ;APDS9960.c: 136:     if( mode >= 0 && mode <= 6 ) {
 10973  0F74  3007               	movlw	7
 10974  0F75  022F               	subwf	setMode@mode,w
 10975  0F76  1803               	skipnc
 10976  0F77  2F94               	goto	l5894
 10977                           
 10978                           ;APDS9960.c: 137:         if (enable) {
 10979  0F78  082B               	movf	setMode@enable,w
 10980  0F79  1903               	btfsc	3,2
 10981  0F7A  2F87               	goto	l5892
 10982                           
 10983                           ;APDS9960.c: 138:             reg_val |= (1 << mode);
 10984  0F7B  3001               	movlw	1
 10985  0F7C  00AC               	movwf	??_setMode
 10986  0F7D  0A2F               	incf	setMode@mode,w
 10987  0F7E  2F80               	goto	u4624
 10988  0F7F                     u4625:	
 10989  0F7F  35AC               	lslf	??_setMode,f
 10990  0F80                     u4624:	
 10991  0F80  0B89               	decfsz	9,f
 10992  0F81  2F7F               	goto	u4625
 10993  0F82  082C               	movf	??_setMode,w
 10994  0F83  00AD               	movwf	??_setMode+1
 10995  0F84  082D               	movf	??_setMode+1,w
 10996  0F85  04AE               	iorwf	setMode@reg_val,f
 10997                           
 10998                           ;APDS9960.c: 139:         } else {
 10999  0F86  2FA1               	goto	l5902
 11000  0F87                     l5892:	
 11001                           
 11002                           ;APDS9960.c: 140:             reg_val &= ~(1 << mode);
 11003  0F87  3001               	movlw	1
 11004  0F88  00AC               	movwf	??_setMode
 11005  0F89  0A2F               	incf	setMode@mode,w
 11006  0F8A  2F8C               	goto	u4634
 11007  0F8B                     u4635:	
 11008  0F8B  35AC               	lslf	??_setMode,f
 11009  0F8C                     u4634:	
 11010  0F8C  0B89               	decfsz	9,f
 11011  0F8D  2F8B               	goto	u4635
 11012  0F8E  082C               	movf	??_setMode,w
 11013  0F8F  3AFF               	xorlw	255
 11014  0F90  00AD               	movwf	??_setMode+1
 11015  0F91  082D               	movf	??_setMode+1,w
 11016  0F92  05AE               	andwf	setMode@reg_val,f
 11017  0F93  2FA1               	goto	l5902
 11018  0F94                     l5894:	
 11019  0F94  3007               	movlw	7
 11020  0F95  062F               	xorwf	setMode@mode,w
 11021  0F96  1D03               	btfss	3,2
 11022  0F97  2FA1               	goto	l5902
 11023                           
 11024                           ;APDS9960.c: 143:         if (enable) {
 11025  0F98  082B               	movf	setMode@enable,w
 11026  0F99  1903               	btfsc	3,2
 11027  0F9A  2FA0               	goto	l5900
 11028                           
 11029                           ;APDS9960.c: 144:             reg_val = 0x7F;
 11030  0F9B  307F               	movlw	127
 11031  0F9C  00AC               	movwf	??_setMode
 11032  0F9D  082C               	movf	??_setMode,w
 11033  0F9E  00AE               	movwf	setMode@reg_val
 11034                           
 11035                           ;APDS9960.c: 145:         } else {
 11036  0F9F  2FA1               	goto	l5902
 11037  0FA0                     l5900:	
 11038                           
 11039                           ;APDS9960.c: 146:             reg_val = 0x00;
 11040  0FA0  01AE               	clrf	setMode@reg_val
 11041  0FA1                     l5902:	
 11042                           
 11043                           ;APDS9960.c: 151:     if( !wireWriteDataByte(0x80, reg_val) ) {
 11044  0FA1  082E               	movf	setMode@reg_val,w
 11045  0FA2  00AC               	movwf	??_setMode
 11046  0FA3  082C               	movf	??_setMode,w
 11047  0FA4  00A6               	movwf	wireWriteDataByte@val
 11048  0FA5  3080               	movlw	128
 11049  0FA6  318B  2379  318F   	fcall	_wireWriteDataByte
 11050  0FA9  0020               	movlb	0	; select bank0
 11051  0FAA  0826               	movf	?_wireWriteDataByte,w
 11052  0FAB  0427               	iorwf	?_wireWriteDataByte+1,w
 11053  0FAC  1903               	btfsc	3,2
 11054  0FAD  2F6D               	goto	l5880
 11055                           
 11056                           ;APDS9960.c: 155:     return 1;
 11057  0FAE  3001               	movlw	1
 11058  0FAF  0008               	return
 11059  0FB0                     __end_of_setMode:	
 11060                           
 11061                           	psect	text34
 11062  0B79                     __ptext34:	
 11063 ;; *************** function _wireWriteDataByte *****************
 11064 ;; Defined at:
 11065 ;;		line 871 in file "APDS9960.c"
 11066 ;; Parameters:    Size  Location     Type
 11067 ;;  reg             1    wreg     unsigned char 
 11068 ;;  val             1    6[BANK0 ] unsigned char 
 11069 ;; Auto vars:     Size  Location     Type
 11070 ;;  reg             1    9[BANK0 ] unsigned char 
 11071 ;; Return value:  Size  Location     Type
 11072 ;;                  2    6[BANK0 ] int 
 11073 ;; Registers used:
 11074 ;;		wreg, status,2, status,0, pclath, cstack
 11075 ;; Tracked objects:
 11076 ;;		On entry : 0/0
 11077 ;;		On exit  : 0/0
 11078 ;;		Unchanged: 0/0
 11079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11080 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11081 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11082 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11083 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11084 ;;Total ram usage:        4 bytes
 11085 ;; Hardware stack levels used:    1
 11086 ;; Hardware stack levels required when called:    7
 11087 ;; This function calls:
 11088 ;;		_I2C_Start
 11089 ;;		_I2C_Stop
 11090 ;;		_I2C_Write_Byte
 11091 ;; This function is called by:
 11092 ;;		_initialize
 11093 ;;		_setMode
 11094 ;;		_setLEDDrive
 11095 ;;		_setProximityGain
 11096 ;;		_setAmbientLightGain
 11097 ;;		_setProxIntLowThresh
 11098 ;;		_setProxIntHighThresh
 11099 ;;		_setLightIntLowThreshold
 11100 ;;		_setLightIntHighThreshold
 11101 ;;		_setGestureEnterThresh
 11102 ;;		_setGestureExitThresh
 11103 ;;		_setGestureGain
 11104 ;;		_setGestureLEDDrive
 11105 ;;		_setGestureWaitTime
 11106 ;;		_setGestureIntEnable
 11107 ;;		_enableGestureSensor
 11108 ;;		_setLEDBoost
 11109 ;;		_setGestureMode
 11110 ;; This function uses a non-reentrant model
 11111 ;;
 11112                           
 11113                           
 11114                           ;psect for function _wireWriteDataByte
 11115  0B79                     _wireWriteDataByte:	
 11116                           
 11117                           ;incstack = 0
 11118                           ; Regs used in _wireWriteDataByte: [wreg+status,2+status,0+pclath+cstack]
 11119                           ;wireWriteDataByte@reg stored from wreg
 11120  0B79  0020               	movlb	0	; select bank0
 11121  0B7A  00A9               	movwf	wireWriteDataByte@reg
 11122                           
 11123                           ;APDS9960.c: 871: int wireWriteDataByte(unsigned char reg, unsigned char val);APDS9960.c
      +                          : 872: {;APDS9960.c: 882:     I2C_Start();
 11124  0B7B  3189  21B4  318B   	fcall	_I2C_Start
 11125                           
 11126                           ;APDS9960.c: 883:     I2C_Write_Byte((0x39 << 1 )| 0x00);
 11127  0B7E  3072               	movlw	114
 11128  0B7F  318B  2394  318B   	fcall	_I2C_Write_Byte
 11129                           
 11130                           ;APDS9960.c: 884:     I2C_Write_Byte(reg);
 11131  0B82  0020               	movlb	0	; select bank0
 11132  0B83  0829               	movf	wireWriteDataByte@reg,w
 11133  0B84  318B  2394  318B   	fcall	_I2C_Write_Byte
 11134                           
 11135                           ;APDS9960.c: 885:     I2C_Write_Byte(val);
 11136  0B87  0020               	movlb	0	; select bank0
 11137  0B88  0826               	movf	wireWriteDataByte@val,w
 11138  0B89  318B  2394  318B   	fcall	_I2C_Write_Byte
 11139                           
 11140                           ;APDS9960.c: 886:     I2C_Stop();
 11141  0B8C  3189  21BA         	fcall	_I2C_Stop
 11142                           
 11143                           ;APDS9960.c: 889:     return 1;
 11144  0B8E  3001               	movlw	1
 11145  0B8F  0020               	movlb	0	; select bank0
 11146  0B90  00A6               	movwf	?_wireWriteDataByte
 11147  0B91  3000               	movlw	0
 11148  0B92  00A7               	movwf	?_wireWriteDataByte+1
 11149  0B93  0008               	return
 11150  0B94                     __end_of_wireWriteDataByte:	
 11151                           
 11152                           	psect	text35
 11153  0A66                     __ptext35:	
 11154 ;; *************** function _getMode *****************
 11155 ;; Defined at:
 11156 ;;		line 159 in file "APDS9960.c"
 11157 ;; Parameters:    Size  Location     Type
 11158 ;;		None
 11159 ;; Auto vars:     Size  Location     Type
 11160 ;;  enable_value    1   10[BANK0 ] unsigned char 
 11161 ;; Return value:  Size  Location     Type
 11162 ;;                  1    wreg      unsigned char 
 11163 ;; Registers used:
 11164 ;;		wreg, status,2, status,0, pclath, cstack
 11165 ;; Tracked objects:
 11166 ;;		On entry : 0/0
 11167 ;;		On exit  : 0/0
 11168 ;;		Unchanged: 0/0
 11169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11170 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11171 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11172 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11173 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11174 ;;Total ram usage:        2 bytes
 11175 ;; Hardware stack levels used:    1
 11176 ;; Hardware stack levels required when called:    8
 11177 ;; This function calls:
 11178 ;;		_wireReadDataByte
 11179 ;; This function is called by:
 11180 ;;		_setMode
 11181 ;;		_readGesture
 11182 ;; This function uses a non-reentrant model
 11183 ;;
 11184                           
 11185                           
 11186                           ;psect for function _getMode
 11187  0A66                     _getMode:	
 11188                           
 11189                           ;APDS9960.c: 161:     uint8_t enable_value;;APDS9960.c: 164:     enable_value = wireRead
      +                          DataByte(0x80);
 11190                           
 11191                           ;incstack = 0
 11192                           ; Regs used in _getMode: [wreg+status,2+status,0+pclath+cstack]
 11193  0A66  3080               	movlw	128
 11194  0A67  318B  23CC         	fcall	_wireReadDataByte
 11195  0A69  0020               	movlb	0	; select bank0
 11196  0A6A  00A9               	movwf	??_getMode
 11197  0A6B  0829               	movf	??_getMode,w
 11198  0A6C  00AA               	movwf	getMode@enable_value
 11199                           
 11200                           ;APDS9960.c: 166:     return enable_value;
 11201  0A6D  082A               	movf	getMode@enable_value,w
 11202  0A6E  0008               	return
 11203  0A6F                     __end_of_getMode:	
 11204                           
 11205                           	psect	text36
 11206  0BCC                     __ptext36:	
 11207 ;; *************** function _wireReadDataByte *****************
 11208 ;; Defined at:
 11209 ;;		line 893 in file "APDS9960.c"
 11210 ;; Parameters:    Size  Location     Type
 11211 ;;  reg             1    wreg     unsigned char 
 11212 ;; Auto vars:     Size  Location     Type
 11213 ;;  reg             1    7[BANK0 ] unsigned char 
 11214 ;;  val             1    8[BANK0 ] unsigned char 
 11215 ;; Return value:  Size  Location     Type
 11216 ;;                  1    wreg      unsigned char 
 11217 ;; Registers used:
 11218 ;;		wreg, status,2, status,0, pclath, cstack
 11219 ;; Tracked objects:
 11220 ;;		On entry : 0/0
 11221 ;;		On exit  : 0/0
 11222 ;;		Unchanged: 0/0
 11223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11225 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11226 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11227 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11228 ;;Total ram usage:        3 bytes
 11229 ;; Hardware stack levels used:    1
 11230 ;; Hardware stack levels required when called:    7
 11231 ;; This function calls:
 11232 ;;		_I2C_ReStart
 11233 ;;		_I2C_Read_Byte
 11234 ;;		_I2C_Send_NACK
 11235 ;;		_I2C_Start
 11236 ;;		_I2C_Stop
 11237 ;;		_I2C_Write_Byte
 11238 ;; This function is called by:
 11239 ;;		_initialize
 11240 ;;		_getMode
 11241 ;;		_setLEDDrive
 11242 ;;		_setProximityGain
 11243 ;;		_setAmbientLightGain
 11244 ;;		_setGestureGain
 11245 ;;		_setGestureLEDDrive
 11246 ;;		_setGestureWaitTime
 11247 ;;		_setGestureIntEnable
 11248 ;;		_setLEDBoost
 11249 ;;		_setGestureMode
 11250 ;;		_isGestureAvailable
 11251 ;;		_readGesture
 11252 ;; This function uses a non-reentrant model
 11253 ;;
 11254                           
 11255                           
 11256                           ;psect for function _wireReadDataByte
 11257  0BCC                     _wireReadDataByte:	
 11258                           
 11259                           ;incstack = 0
 11260                           ; Regs used in _wireReadDataByte: [wreg+status,2+status,0+pclath+cstack]
 11261                           ;wireReadDataByte@reg stored from wreg
 11262  0BCC  0020               	movlb	0	; select bank0
 11263  0BCD  00A7               	movwf	wireReadDataByte@reg
 11264                           
 11265                           ;APDS9960.c: 893:  unsigned char wireReadDataByte(unsigned char reg);APDS9960.c: 894: {;
      +                          APDS9960.c: 908:     unsigned char val;;APDS9960.c: 909:     I2C_Start();
 11266  0BCE  3189  21B4  318B   	fcall	_I2C_Start
 11267                           
 11268                           ;APDS9960.c: 910:     I2C_Write_Byte((0x39 << 1 )| 0x00);
 11269  0BD1  3072               	movlw	114
 11270  0BD2  318B  2394  318B   	fcall	_I2C_Write_Byte
 11271                           
 11272                           ;APDS9960.c: 911:     I2C_Write_Byte(reg);
 11273  0BD5  0020               	movlb	0	; select bank0
 11274  0BD6  0827               	movf	wireReadDataByte@reg,w
 11275  0BD7  318B  2394  318B   	fcall	_I2C_Write_Byte
 11276                           
 11277                           ;APDS9960.c: 912:     I2C_ReStart();
 11278  0BDA  3189  21A5  318B   	fcall	_I2C_ReStart
 11279                           
 11280                           ;APDS9960.c: 914:     I2C_Write_Byte((0x39 << 1) | 0x01);
 11281  0BDD  3073               	movlw	115
 11282  0BDE  318B  2394  318B   	fcall	_I2C_Write_Byte
 11283                           
 11284                           ;APDS9960.c: 915:     val=I2C_Read_Byte();
 11285  0BE1  318A  2284  318B   	fcall	_I2C_Read_Byte
 11286  0BE4  0020               	movlb	0	; select bank0
 11287  0BE5  00A6               	movwf	??_wireReadDataByte
 11288  0BE6  0826               	movf	??_wireReadDataByte,w
 11289  0BE7  00A8               	movwf	wireReadDataByte@val
 11290                           
 11291                           ;APDS9960.c: 916:     I2C_Send_NACK();
 11292  0BE8  3189  21AE  318B   	fcall	_I2C_Send_NACK
 11293                           
 11294                           ;APDS9960.c: 917:     I2C_Stop();
 11295  0BEB  3189  21BA         	fcall	_I2C_Stop
 11296                           
 11297                           ;APDS9960.c: 919:     return val;
 11298  0BED  0020               	movlb	0	; select bank0
 11299  0BEE  0828               	movf	wireReadDataByte@val,w
 11300  0BEF  0008               	return
 11301  0BF0                     __end_of_wireReadDataByte:	
 11302                           
 11303                           	psect	text37
 11304  0B94                     __ptext37:	
 11305 ;; *************** function _I2C_Write_Byte *****************
 11306 ;; Defined at:
 11307 ;;		line 75 in file "i2c.c"
 11308 ;; Parameters:    Size  Location     Type
 11309 ;;  Byte            1    wreg     unsigned char 
 11310 ;; Auto vars:     Size  Location     Type
 11311 ;;  Byte            1    3[BANK0 ] unsigned char 
 11312 ;;  count           2    4[BANK0 ] unsigned int 
 11313 ;; Return value:  Size  Location     Type
 11314 ;;                  1    wreg      void 
 11315 ;; Registers used:
 11316 ;;		wreg, status,2, status,0, pclath, cstack
 11317 ;; Tracked objects:
 11318 ;;		On entry : 0/0
 11319 ;;		On exit  : 0/0
 11320 ;;		Unchanged: 0/0
 11321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11323 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11324 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11325 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11326 ;;Total ram usage:        5 bytes
 11327 ;; Hardware stack levels used:    1
 11328 ;; Hardware stack levels required when called:    6
 11329 ;; This function calls:
 11330 ;;		_i2c1_driver_TXData
 11331 ;; This function is called by:
 11332 ;;		_wireReadDataBlock
 11333 ;;		_wireWriteDataByte
 11334 ;;		_wireReadDataByte
 11335 ;; This function uses a non-reentrant model
 11336 ;;
 11337                           
 11338                           
 11339                           ;psect for function _I2C_Write_Byte
 11340  0B94                     _I2C_Write_Byte:	
 11341                           
 11342                           ;incstack = 0
 11343                           ; Regs used in _I2C_Write_Byte: [wreg+status,2+status,0+pclath+cstack]
 11344                           ;I2C_Write_Byte@Byte stored from wreg
 11345  0B94  0020               	movlb	0	; select bank0
 11346  0B95  00A3               	movwf	I2C_Write_Byte@Byte
 11347                           
 11348                           ;i2c.c: 75: void I2C_Write_Byte(unsigned char Byte);i2c.c: 76: {;i2c.c: 80:     i2c1_dri
      +                          ver_TXData(Byte);
 11349  0B96  0823               	movf	I2C_Write_Byte@Byte,w
 11350  0B97  318A  2200  318B   	fcall	_i2c1_driver_TXData
 11351                           
 11352                           ;i2c.c: 83:     unsigned int count = 0;
 11353  0B9A  0020               	movlb	0	; select bank0
 11354  0B9B  01A4               	clrf	I2C_Write_Byte@count
 11355  0B9C  01A5               	clrf	I2C_Write_Byte@count+1
 11356  0B9D                     l1228:	
 11357                           ;i2c.c: 84:     while(SSP1CON2bits.ACKSTAT);
 11358                           
 11359  0B9D  0024               	movlb	4	; select bank4
 11360  0B9E  1B16               	btfsc	22,6	;volatile
 11361  0B9F  2B9D               	goto	l1228
 11362  0BA0                     l5724:	
 11363  0BA0  0020               	movlb	0	; select bank0
 11364  0BA1  0825               	movf	I2C_Write_Byte@count+1,w
 11365  0BA2  00A2               	movwf	??_I2C_Write_Byte+1
 11366  0BA3  0824               	movf	I2C_Write_Byte@count,w
 11367  0BA4  00A1               	movwf	??_I2C_Write_Byte
 11368  0BA5  0AA4               	incf	I2C_Write_Byte@count,f
 11369  0BA6  1903               	skipnz
 11370  0BA7  0AA5               	incf	I2C_Write_Byte@count+1,f
 11371  0BA8  3000               	movlw	0
 11372  0BA9  0222               	subwf	??_I2C_Write_Byte+1,w
 11373  0BAA  3005               	movlw	5
 11374  0BAB  1903               	skipnz
 11375  0BAC  0221               	subwf	??_I2C_Write_Byte,w
 11376  0BAD  1803               	btfsc	3,0
 11377  0BAE  0008               	return
 11378  0BAF  2BA0               	goto	l5724
 11379  0BB0                     __end_of_I2C_Write_Byte:	
 11380                           
 11381                           	psect	text38
 11382  0A00                     __ptext38:	
 11383 ;; *************** function _i2c1_driver_TXData *****************
 11384 ;; Defined at:
 11385 ;;		line 186 in file "mcc_generated_files/i2c1_driver.c"
 11386 ;; Parameters:    Size  Location     Type
 11387 ;;  d               1    wreg     unsigned char 
 11388 ;; Auto vars:     Size  Location     Type
 11389 ;;  d               1    0[BANK0 ] unsigned char 
 11390 ;; Return value:  Size  Location     Type
 11391 ;;                  1    wreg      void 
 11392 ;; Registers used:
 11393 ;;		wreg
 11394 ;; Tracked objects:
 11395 ;;		On entry : 0/0
 11396 ;;		On exit  : 0/0
 11397 ;;		Unchanged: 0/0
 11398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11400 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11402 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11403 ;;Total ram usage:        1 bytes
 11404 ;; Hardware stack levels used:    1
 11405 ;; Hardware stack levels required when called:    5
 11406 ;; This function calls:
 11407 ;;		Nothing
 11408 ;; This function is called by:
 11409 ;;		_I2C_Write_Byte
 11410 ;; This function uses a non-reentrant model
 11411 ;;
 11412                           
 11413                           
 11414                           ;psect for function _i2c1_driver_TXData
 11415  0A00                     _i2c1_driver_TXData:	
 11416                           
 11417                           ;incstack = 0
 11418                           ; Regs used in _i2c1_driver_TXData: [wreg]
 11419                           ;i2c1_driver_TXData@d stored from wreg
 11420  0A00  0020               	movlb	0	; select bank0
 11421  0A01  00A0               	movwf	i2c1_driver_TXData@d
 11422                           
 11423                           ;mcc_generated_files/i2c1_driver.c: 186: __attribute__((inline)) void i2c1_driver_TXData
      +                          (char d);mcc_generated_files/i2c1_driver.c: 187: {;mcc_generated_files/i2c1_driver.c: 18
      +                          8:     SSP1BUF = d;
 11424  0A02  0820               	movf	i2c1_driver_TXData@d,w
 11425  0A03  0024               	movlb	4	; select bank4
 11426  0A04  0091               	movwf	17	;volatile
 11427  0A05  0008               	return
 11428  0A06                     __end_of_i2c1_driver_TXData:	
 11429                           
 11430                           	psect	text39
 11431  09BA                     __ptext39:	
 11432 ;; *************** function _I2C_Stop *****************
 11433 ;; Defined at:
 11434 ;;		line 50 in file "i2c.c"
 11435 ;; Parameters:    Size  Location     Type
 11436 ;;		None
 11437 ;; Auto vars:     Size  Location     Type
 11438 ;;		None
 11439 ;; Return value:  Size  Location     Type
 11440 ;;                  1    wreg      void 
 11441 ;; Registers used:
 11442 ;;		status,2, status,0, pclath, cstack
 11443 ;; Tracked objects:
 11444 ;;		On entry : 0/0
 11445 ;;		On exit  : 0/0
 11446 ;;		Unchanged: 0/0
 11447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11449 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11450 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11451 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11452 ;;Total ram usage:        0 bytes
 11453 ;; Hardware stack levels used:    1
 11454 ;; Hardware stack levels required when called:    6
 11455 ;; This function calls:
 11456 ;;		_i2c1_driver_stop
 11457 ;; This function is called by:
 11458 ;;		_wireReadDataBlock
 11459 ;;		_wireWriteDataByte
 11460 ;;		_wireReadDataByte
 11461 ;; This function uses a non-reentrant model
 11462 ;;
 11463                           
 11464                           
 11465                           ;psect for function _I2C_Stop
 11466  09BA                     _I2C_Stop:	
 11467                           
 11468                           ;i2c.c: 52:  i2c1_driver_stop();
 11469                           
 11470                           ;incstack = 0
 11471                           ; Regs used in _I2C_Stop: [status,2+status,0+pclath+cstack]
 11472  09BA  3189  21B7         	fcall	_i2c1_driver_stop
 11473  09BC  0008               	return
 11474  09BD                     __end_of_I2C_Stop:	
 11475                           
 11476                           	psect	text40
 11477  09B7                     __ptext40:	
 11478 ;; *************** function _i2c1_driver_stop *****************
 11479 ;; Defined at:
 11480 ;;		line 156 in file "mcc_generated_files/i2c1_driver.c"
 11481 ;; Parameters:    Size  Location     Type
 11482 ;;		None
 11483 ;; Auto vars:     Size  Location     Type
 11484 ;;		None
 11485 ;; Return value:  Size  Location     Type
 11486 ;;                  1    wreg      void 
 11487 ;; Registers used:
 11488 ;;		None
 11489 ;; Tracked objects:
 11490 ;;		On entry : 0/0
 11491 ;;		On exit  : 0/0
 11492 ;;		Unchanged: 0/0
 11493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11494 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11495 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11496 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11497 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11498 ;;Total ram usage:        0 bytes
 11499 ;; Hardware stack levels used:    1
 11500 ;; Hardware stack levels required when called:    5
 11501 ;; This function calls:
 11502 ;;		Nothing
 11503 ;; This function is called by:
 11504 ;;		_I2C_Stop
 11505 ;; This function uses a non-reentrant model
 11506 ;;
 11507                           
 11508                           
 11509                           ;psect for function _i2c1_driver_stop
 11510  09B7                     _i2c1_driver_stop:	
 11511                           
 11512                           ;mcc_generated_files/i2c1_driver.c: 158:     SSP1CON2bits.PEN = 1;
 11513                           
 11514                           ;incstack = 0
 11515                           ; Regs used in _i2c1_driver_stop: []
 11516  09B7  0024               	movlb	4	; select bank4
 11517  09B8  1516               	bsf	22,2	;volatile
 11518  09B9  0008               	return
 11519  09BA                     __end_of_i2c1_driver_stop:	
 11520                           
 11521                           	psect	text41
 11522  09B4                     __ptext41:	
 11523 ;; *************** function _I2C_Start *****************
 11524 ;; Defined at:
 11525 ;;		line 35 in file "i2c.c"
 11526 ;; Parameters:    Size  Location     Type
 11527 ;;		None
 11528 ;; Auto vars:     Size  Location     Type
 11529 ;;		None
 11530 ;; Return value:  Size  Location     Type
 11531 ;;                  1    wreg      void 
 11532 ;; Registers used:
 11533 ;;		status,2, status,0, pclath, cstack
 11534 ;; Tracked objects:
 11535 ;;		On entry : 0/0
 11536 ;;		On exit  : 0/0
 11537 ;;		Unchanged: 0/0
 11538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11539 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11540 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11542 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11543 ;;Total ram usage:        0 bytes
 11544 ;; Hardware stack levels used:    1
 11545 ;; Hardware stack levels required when called:    6
 11546 ;; This function calls:
 11547 ;;		_i2c1_driver_start
 11548 ;; This function is called by:
 11549 ;;		_wireReadDataBlock
 11550 ;;		_wireWriteDataByte
 11551 ;;		_wireReadDataByte
 11552 ;; This function uses a non-reentrant model
 11553 ;;
 11554                           
 11555                           
 11556                           ;psect for function _I2C_Start
 11557  09B4                     _I2C_Start:	
 11558                           
 11559                           ;i2c.c: 37:  i2c1_driver_start();
 11560                           
 11561                           ;incstack = 0
 11562                           ; Regs used in _I2C_Start: [status,2+status,0+pclath+cstack]
 11563  09B4  3189  21B1         	fcall	_i2c1_driver_start
 11564  09B6  0008               	return
 11565  09B7                     __end_of_I2C_Start:	
 11566                           
 11567                           	psect	text42
 11568  09B1                     __ptext42:	
 11569 ;; *************** function _i2c1_driver_start *****************
 11570 ;; Defined at:
 11571 ;;		line 146 in file "mcc_generated_files/i2c1_driver.c"
 11572 ;; Parameters:    Size  Location     Type
 11573 ;;		None
 11574 ;; Auto vars:     Size  Location     Type
 11575 ;;		None
 11576 ;; Return value:  Size  Location     Type
 11577 ;;                  1    wreg      void 
 11578 ;; Registers used:
 11579 ;;		None
 11580 ;; Tracked objects:
 11581 ;;		On entry : 0/0
 11582 ;;		On exit  : 0/0
 11583 ;;		Unchanged: 0/0
 11584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11585 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11586 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11587 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11588 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11589 ;;Total ram usage:        0 bytes
 11590 ;; Hardware stack levels used:    1
 11591 ;; Hardware stack levels required when called:    5
 11592 ;; This function calls:
 11593 ;;		Nothing
 11594 ;; This function is called by:
 11595 ;;		_I2C_Start
 11596 ;;		_i2c_masterOperation
 11597 ;; This function uses a non-reentrant model
 11598 ;;
 11599                           
 11600                           
 11601                           ;psect for function _i2c1_driver_start
 11602  09B1                     _i2c1_driver_start:	
 11603                           
 11604                           ;mcc_generated_files/i2c1_driver.c: 148:     SSP1CON2bits.SEN = 1;
 11605                           
 11606                           ;incstack = 0
 11607                           ; Regs used in _i2c1_driver_start: []
 11608  09B1  0024               	movlb	4	; select bank4
 11609  09B2  1416               	bsf	22,0	;volatile
 11610  09B3  0008               	return
 11611  09B4                     __end_of_i2c1_driver_start:	
 11612                           
 11613                           	psect	text43
 11614  09AE                     __ptext43:	
 11615 ;; *************** function _I2C_Send_NACK *****************
 11616 ;; Defined at:
 11617 ;;		line 66 in file "i2c.c"
 11618 ;; Parameters:    Size  Location     Type
 11619 ;;		None
 11620 ;; Auto vars:     Size  Location     Type
 11621 ;;		None
 11622 ;; Return value:  Size  Location     Type
 11623 ;;                  1    wreg      void 
 11624 ;; Registers used:
 11625 ;;		status,2, status,0, pclath, cstack
 11626 ;; Tracked objects:
 11627 ;;		On entry : 0/0
 11628 ;;		On exit  : 0/0
 11629 ;;		Unchanged: 0/0
 11630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11631 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11632 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11633 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11634 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11635 ;;Total ram usage:        0 bytes
 11636 ;; Hardware stack levels used:    1
 11637 ;; Hardware stack levels required when called:    6
 11638 ;; This function calls:
 11639 ;;		_i2c1_driver_sendNACK
 11640 ;; This function is called by:
 11641 ;;		_wireReadDataBlock
 11642 ;;		_wireReadDataByte
 11643 ;; This function uses a non-reentrant model
 11644 ;;
 11645                           
 11646                           
 11647                           ;psect for function _I2C_Send_NACK
 11648  09AE                     _I2C_Send_NACK:	
 11649                           
 11650                           ;i2c.c: 68:     i2c1_driver_sendNACK();
 11651                           
 11652                           ;incstack = 0
 11653                           ; Regs used in _I2C_Send_NACK: [status,2+status,0+pclath+cstack]
 11654  09AE  3189  21E8         	fcall	_i2c1_driver_sendNACK
 11655  09B0  0008               	return
 11656  09B1                     __end_of_I2C_Send_NACK:	
 11657                           
 11658                           	psect	text44
 11659  09E8                     __ptext44:	
 11660 ;; *************** function _i2c1_driver_sendNACK *****************
 11661 ;; Defined at:
 11662 ;;		line 202 in file "mcc_generated_files/i2c1_driver.c"
 11663 ;; Parameters:    Size  Location     Type
 11664 ;;		None
 11665 ;; Auto vars:     Size  Location     Type
 11666 ;;		None
 11667 ;; Return value:  Size  Location     Type
 11668 ;;                  1    wreg      void 
 11669 ;; Registers used:
 11670 ;;		None
 11671 ;; Tracked objects:
 11672 ;;		On entry : 0/0
 11673 ;;		On exit  : 0/0
 11674 ;;		Unchanged: 0/0
 11675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11676 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11677 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11678 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11679 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11680 ;;Total ram usage:        0 bytes
 11681 ;; Hardware stack levels used:    1
 11682 ;; Hardware stack levels required when called:    5
 11683 ;; This function calls:
 11684 ;;		Nothing
 11685 ;; This function is called by:
 11686 ;;		_I2C_Send_NACK
 11687 ;; This function uses a non-reentrant model
 11688 ;;
 11689                           
 11690                           
 11691                           ;psect for function _i2c1_driver_sendNACK
 11692  09E8                     _i2c1_driver_sendNACK:	
 11693                           
 11694                           ;mcc_generated_files/i2c1_driver.c: 204:     SSP1CON2bits.ACKDT = 1;
 11695                           
 11696                           ;incstack = 0
 11697                           ; Regs used in _i2c1_driver_sendNACK: []
 11698  09E8  0024               	movlb	4	; select bank4
 11699  09E9  1696               	bsf	22,5	;volatile
 11700                           
 11701                           ;mcc_generated_files/i2c1_driver.c: 205:     SSP1CON2bits.ACKEN = 1;
 11702  09EA  1616               	bsf	22,4	;volatile
 11703  09EB  0008               	return
 11704  09EC                     __end_of_i2c1_driver_sendNACK:	
 11705                           
 11706                           	psect	text45
 11707  0A84                     __ptext45:	
 11708 ;; *************** function _I2C_Read_Byte *****************
 11709 ;; Defined at:
 11710 ;;		line 115 in file "i2c.c"
 11711 ;; Parameters:    Size  Location     Type
 11712 ;;		None
 11713 ;; Auto vars:     Size  Location     Type
 11714 ;;		None
 11715 ;; Return value:  Size  Location     Type
 11716 ;;                  1    wreg      unsigned char 
 11717 ;; Registers used:
 11718 ;;		wreg, status,2, status,0, pclath, cstack
 11719 ;; Tracked objects:
 11720 ;;		On entry : 0/0
 11721 ;;		On exit  : 0/0
 11722 ;;		Unchanged: 0/0
 11723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11724 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11725 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11726 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11727 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11728 ;;Total ram usage:        0 bytes
 11729 ;; Hardware stack levels used:    1
 11730 ;; Hardware stack levels required when called:    6
 11731 ;; This function calls:
 11732 ;;		_i2c1_driver_getRXData
 11733 ;;		_i2c1_driver_isBufferFull
 11734 ;;		_i2c1_driver_startRX
 11735 ;; This function is called by:
 11736 ;;		_wireReadDataBlock
 11737 ;;		_wireReadDataByte
 11738 ;; This function uses a non-reentrant model
 11739 ;;
 11740                           
 11741                           
 11742                           ;psect for function _I2C_Read_Byte
 11743  0A84                     _I2C_Read_Byte:	
 11744                           
 11745                           ;i2c.c: 117:     i2c1_driver_startRX();
 11746                           
 11747                           ;incstack = 0
 11748                           ; Regs used in _I2C_Read_Byte: [wreg+status,2+status,0+pclath+cstack]
 11749  0A84  3189  21AB  318A   	fcall	_i2c1_driver_startRX
 11750  0A87                     l5730:	
 11751                           ;i2c.c: 121:  while (i2c1_driver_isBufferFull() == 0) {
 11752                           
 11753                           
 11754                           ;i2c.c: 121:  while (i2c1_driver_isBufferFull() == 0) {
 11755  0A87  318A  2227  318A   	fcall	_i2c1_driver_isBufferFull
 11756  0A8A  1C03               	btfss	3,0
 11757  0A8B  2A87               	goto	l5730
 11758                           
 11759                           ;i2c.c: 137:   return i2c1_driver_getRXData();
 11760  0A8C  3189  21A8         	fcall	_i2c1_driver_getRXData
 11761  0A8E  0008               	return
 11762  0A8F                     __end_of_I2C_Read_Byte:	
 11763                           
 11764                           	psect	text46
 11765  09AB                     __ptext46:	
 11766 ;; *************** function _i2c1_driver_startRX *****************
 11767 ;; Defined at:
 11768 ;;		line 166 in file "mcc_generated_files/i2c1_driver.c"
 11769 ;; Parameters:    Size  Location     Type
 11770 ;;		None
 11771 ;; Auto vars:     Size  Location     Type
 11772 ;;		None
 11773 ;; Return value:  Size  Location     Type
 11774 ;;                  1    wreg      void 
 11775 ;; Registers used:
 11776 ;;		None
 11777 ;; Tracked objects:
 11778 ;;		On entry : 0/0
 11779 ;;		On exit  : 0/0
 11780 ;;		Unchanged: 0/0
 11781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11783 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11784 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11785 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11786 ;;Total ram usage:        0 bytes
 11787 ;; Hardware stack levels used:    1
 11788 ;; Hardware stack levels required when called:    5
 11789 ;; This function calls:
 11790 ;;		Nothing
 11791 ;; This function is called by:
 11792 ;;		_I2C_Read_Byte
 11793 ;; This function uses a non-reentrant model
 11794 ;;
 11795                           
 11796                           
 11797                           ;psect for function _i2c1_driver_startRX
 11798  09AB                     _i2c1_driver_startRX:	
 11799                           
 11800                           ;mcc_generated_files/i2c1_driver.c: 168:     SSP1CON2bits.RCEN = 1;
 11801                           
 11802                           ;incstack = 0
 11803                           ; Regs used in _i2c1_driver_startRX: []
 11804  09AB  0024               	movlb	4	; select bank4
 11805  09AC  1596               	bsf	22,3	;volatile
 11806  09AD  0008               	return
 11807  09AE                     __end_of_i2c1_driver_startRX:	
 11808                           
 11809                           	psect	text47
 11810  0A27                     __ptext47:	
 11811 ;; *************** function _i2c1_driver_isBufferFull *****************
 11812 ;; Defined at:
 11813 ;;		line 213 in file "mcc_generated_files/i2c1_driver.c"
 11814 ;; Parameters:    Size  Location     Type
 11815 ;;		None
 11816 ;; Auto vars:     Size  Location     Type
 11817 ;;		None
 11818 ;; Return value:  Size  Location     Type
 11819 ;;		None               void
 11820 ;; Registers used:
 11821 ;;		wreg, status,2, status,0
 11822 ;; Tracked objects:
 11823 ;;		On entry : 0/0
 11824 ;;		On exit  : 0/0
 11825 ;;		Unchanged: 0/0
 11826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11827 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11828 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11829 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11830 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11831 ;;Total ram usage:        1 bytes
 11832 ;; Hardware stack levels used:    1
 11833 ;; Hardware stack levels required when called:    5
 11834 ;; This function calls:
 11835 ;;		Nothing
 11836 ;; This function is called by:
 11837 ;;		_I2C_Read_Byte
 11838 ;; This function uses a non-reentrant model
 11839 ;;
 11840                           
 11841                           
 11842                           ;psect for function _i2c1_driver_isBufferFull
 11843  0A27                     _i2c1_driver_isBufferFull:	
 11844                           
 11845                           ;mcc_generated_files/i2c1_driver.c: 215:     return SSP1STATbits.BF;
 11846                           
 11847                           ;incstack = 0
 11848                           ; Regs used in _i2c1_driver_isBufferFull: [wreg+status,2+status,0]
 11849  0A27  0024               	movlb	4	; select bank4
 11850  0A28  0814               	movf	20,w	;volatile
 11851  0A29  3901               	andlw	1
 11852  0A2A  0020               	movlb	0	; select bank0
 11853  0A2B  00A0               	movwf	??_i2c1_driver_isBufferFull
 11854  0A2C  0C20               	rrf	??_i2c1_driver_isBufferFull,w
 11855  0A2D  0008               	return
 11856  0A2E                     __end_of_i2c1_driver_isBufferFull:	
 11857                           
 11858                           	psect	text48
 11859  09A8                     __ptext48:	
 11860 ;; *************** function _i2c1_driver_getRXData *****************
 11861 ;; Defined at:
 11862 ;;		line 171 in file "mcc_generated_files/i2c1_driver.c"
 11863 ;; Parameters:    Size  Location     Type
 11864 ;;		None
 11865 ;; Auto vars:     Size  Location     Type
 11866 ;;		None
 11867 ;; Return value:  Size  Location     Type
 11868 ;;                  1    wreg      unsigned char 
 11869 ;; Registers used:
 11870 ;;		wreg
 11871 ;; Tracked objects:
 11872 ;;		On entry : 0/0
 11873 ;;		On exit  : 0/0
 11874 ;;		Unchanged: 0/0
 11875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11876 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11877 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11878 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11879 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11880 ;;Total ram usage:        0 bytes
 11881 ;; Hardware stack levels used:    1
 11882 ;; Hardware stack levels required when called:    5
 11883 ;; This function calls:
 11884 ;;		Nothing
 11885 ;; This function is called by:
 11886 ;;		_I2C_Read_Byte
 11887 ;; This function uses a non-reentrant model
 11888 ;;
 11889                           
 11890                           
 11891                           ;psect for function _i2c1_driver_getRXData
 11892  09A8                     _i2c1_driver_getRXData:	
 11893                           
 11894                           ;mcc_generated_files/i2c1_driver.c: 173:     return SSP1BUF;
 11895                           
 11896                           ;incstack = 0
 11897                           ; Regs used in _i2c1_driver_getRXData: [wreg]
 11898  09A8  0024               	movlb	4	; select bank4
 11899  09A9  0811               	movf	17,w	;volatile
 11900  09AA  0008               	return
 11901  09AB                     __end_of_i2c1_driver_getRXData:	
 11902                           
 11903                           	psect	text49
 11904  09A5                     __ptext49:	
 11905 ;; *************** function _I2C_ReStart *****************
 11906 ;; Defined at:
 11907 ;;		line 43 in file "i2c.c"
 11908 ;; Parameters:    Size  Location     Type
 11909 ;;		None
 11910 ;; Auto vars:     Size  Location     Type
 11911 ;;		None
 11912 ;; Return value:  Size  Location     Type
 11913 ;;                  1    wreg      void 
 11914 ;; Registers used:
 11915 ;;		status,2, status,0, pclath, cstack
 11916 ;; Tracked objects:
 11917 ;;		On entry : 0/0
 11918 ;;		On exit  : 0/0
 11919 ;;		Unchanged: 0/0
 11920 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11921 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11922 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11923 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11924 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11925 ;;Total ram usage:        0 bytes
 11926 ;; Hardware stack levels used:    1
 11927 ;; Hardware stack levels required when called:    6
 11928 ;; This function calls:
 11929 ;;		_i2c1_driver_restart
 11930 ;; This function is called by:
 11931 ;;		_wireReadDataBlock
 11932 ;;		_wireReadDataByte
 11933 ;; This function uses a non-reentrant model
 11934 ;;
 11935                           
 11936                           
 11937                           ;psect for function _I2C_ReStart
 11938  09A5                     _I2C_ReStart:	
 11939                           
 11940                           ;i2c.c: 45:  i2c1_driver_restart();
 11941                           
 11942                           ;incstack = 0
 11943                           ; Regs used in _I2C_ReStart: [status,2+status,0+pclath+cstack]
 11944  09A5  3189  21A2         	fcall	_i2c1_driver_restart
 11945  09A7  0008               	return
 11946  09A8                     __end_of_I2C_ReStart:	
 11947                           
 11948                           	psect	text50
 11949  09A2                     __ptext50:	
 11950 ;; *************** function _i2c1_driver_restart *****************
 11951 ;; Defined at:
 11952 ;;		line 151 in file "mcc_generated_files/i2c1_driver.c"
 11953 ;; Parameters:    Size  Location     Type
 11954 ;;		None
 11955 ;; Auto vars:     Size  Location     Type
 11956 ;;		None
 11957 ;; Return value:  Size  Location     Type
 11958 ;;                  1    wreg      void 
 11959 ;; Registers used:
 11960 ;;		None
 11961 ;; Tracked objects:
 11962 ;;		On entry : 0/0
 11963 ;;		On exit  : 0/0
 11964 ;;		Unchanged: 0/0
 11965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11966 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11967 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11968 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11969 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11970 ;;Total ram usage:        0 bytes
 11971 ;; Hardware stack levels used:    1
 11972 ;; Hardware stack levels required when called:    5
 11973 ;; This function calls:
 11974 ;;		Nothing
 11975 ;; This function is called by:
 11976 ;;		_I2C_ReStart
 11977 ;; This function uses a non-reentrant model
 11978 ;;
 11979                           
 11980                           
 11981                           ;psect for function _i2c1_driver_restart
 11982  09A2                     _i2c1_driver_restart:	
 11983                           
 11984                           ;mcc_generated_files/i2c1_driver.c: 153:     SSP1CON2bits.RSEN = 1;
 11985                           
 11986                           ;incstack = 0
 11987                           ; Regs used in _i2c1_driver_restart: []
 11988  09A2  0024               	movlb	4	; select bank4
 11989  09A3  1496               	bsf	22,1	;volatile
 11990  09A4  0008               	return
 11991  09A5                     __end_of_i2c1_driver_restart:	
 11992                           
 11993                           	psect	text51
 11994  0B31                     __ptext51:	
 11995 ;; *************** function _SYSTEM_Initialize *****************
 11996 ;; Defined at:
 11997 ;;		line 50 in file "mcc_generated_files/mcc.c"
 11998 ;; Parameters:    Size  Location     Type
 11999 ;;		None
 12000 ;; Auto vars:     Size  Location     Type
 12001 ;;		None
 12002 ;; Return value:  Size  Location     Type
 12003 ;;                  1    wreg      void 
 12004 ;; Registers used:
 12005 ;;		wreg, status,2, status,0, pclath, cstack
 12006 ;; Tracked objects:
 12007 ;;		On entry : 0/0
 12008 ;;		On exit  : 0/0
 12009 ;;		Unchanged: 0/0
 12010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12011 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12012 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12013 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12014 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12015 ;;Total ram usage:        0 bytes
 12016 ;; Hardware stack levels used:    1
 12017 ;; Hardware stack levels required when called:    6
 12018 ;; This function calls:
 12019 ;;		_ADC_Initialize
 12020 ;;		_OSCILLATOR_Initialize
 12021 ;;		_PIN_MANAGER_Initialize
 12022 ;;		_PMD_Initialize
 12023 ;;		_PWM1_Initialize
 12024 ;;		_SPI2_Initialize
 12025 ;;		_TMR2_Initialize
 12026 ;;		_WDT_Initialize
 12027 ;; This function is called by:
 12028 ;;		_main
 12029 ;; This function uses a non-reentrant model
 12030 ;;
 12031                           
 12032                           
 12033                           ;psect for function _SYSTEM_Initialize
 12034  0B31                     _SYSTEM_Initialize:	
 12035                           
 12036                           ;mcc_generated_files/mcc.c: 53:     PMD_Initialize();
 12037                           
 12038                           ;incstack = 0
 12039                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
 12040  0B31  318A  224E  318B   	fcall	_PMD_Initialize
 12041                           
 12042                           ;mcc_generated_files/mcc.c: 54:     PIN_MANAGER_Initialize();
 12043  0B34  318E  264C  318B   	fcall	_PIN_MANAGER_Initialize
 12044                           
 12045                           ;mcc_generated_files/mcc.c: 55:     OSCILLATOR_Initialize();
 12046  0B37  318A  2246  318B   	fcall	_OSCILLATOR_Initialize
 12047                           
 12048                           ;mcc_generated_files/mcc.c: 56:     WDT_Initialize();
 12049  0B3A  3189  21E4  318B   	fcall	_WDT_Initialize
 12050                           
 12051                           ;mcc_generated_files/mcc.c: 57:     SPI2_Initialize();
 12052  0B3D  318A  2220  318B   	fcall	_SPI2_Initialize
 12053                           
 12054                           ;mcc_generated_files/mcc.c: 58:     PWM1_Initialize();
 12055  0B40  318A  2279  318B   	fcall	_PWM1_Initialize
 12056                           
 12057                           ;mcc_generated_files/mcc.c: 59:     ADC_Initialize();
 12058  0B43  318A  223E  318B   	fcall	_ADC_Initialize
 12059                           
 12060                           ;mcc_generated_files/mcc.c: 60:     TMR2_Initialize();
 12061  0B46  318A  2256         	fcall	_TMR2_Initialize
 12062  0B48  0008               	return
 12063  0B49                     __end_of_SYSTEM_Initialize:	
 12064                           
 12065                           	psect	text52
 12066  09E4                     __ptext52:	
 12067 ;; *************** function _WDT_Initialize *****************
 12068 ;; Defined at:
 12069 ;;		line 77 in file "mcc_generated_files/mcc.c"
 12070 ;; Parameters:    Size  Location     Type
 12071 ;;		None
 12072 ;; Auto vars:     Size  Location     Type
 12073 ;;		None
 12074 ;; Return value:  Size  Location     Type
 12075 ;;                  1    wreg      void 
 12076 ;; Registers used:
 12077 ;;		wreg
 12078 ;; Tracked objects:
 12079 ;;		On entry : 0/0
 12080 ;;		On exit  : 0/0
 12081 ;;		Unchanged: 0/0
 12082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12083 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12084 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12085 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12086 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12087 ;;Total ram usage:        0 bytes
 12088 ;; Hardware stack levels used:    1
 12089 ;; Hardware stack levels required when called:    5
 12090 ;; This function calls:
 12091 ;;		Nothing
 12092 ;; This function is called by:
 12093 ;;		_SYSTEM_Initialize
 12094 ;; This function uses a non-reentrant model
 12095 ;;
 12096                           
 12097                           
 12098                           ;psect for function _WDT_Initialize
 12099  09E4                     _WDT_Initialize:	
 12100                           
 12101                           ;mcc_generated_files/mcc.c: 80:     WDTCON = 0x18;
 12102                           
 12103                           ;incstack = 0
 12104                           ; Regs used in _WDT_Initialize: [wreg]
 12105  09E4  3018               	movlw	24
 12106  09E5  0021               	movlb	1	; select bank1
 12107  09E6  0097               	movwf	23	;volatile
 12108  09E7  0008               	return
 12109  09E8                     __end_of_WDT_Initialize:	
 12110                           
 12111                           	psect	text53
 12112  0A56                     __ptext53:	
 12113 ;; *************** function _TMR2_Initialize *****************
 12114 ;; Defined at:
 12115 ;;		line 62 in file "mcc_generated_files/tmr2.c"
 12116 ;; Parameters:    Size  Location     Type
 12117 ;;		None
 12118 ;; Auto vars:     Size  Location     Type
 12119 ;;		None
 12120 ;; Return value:  Size  Location     Type
 12121 ;;                  1    wreg      void 
 12122 ;; Registers used:
 12123 ;;		wreg, status,2
 12124 ;; Tracked objects:
 12125 ;;		On entry : 0/0
 12126 ;;		On exit  : 0/0
 12127 ;;		Unchanged: 0/0
 12128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12129 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12130 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12131 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12132 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12133 ;;Total ram usage:        0 bytes
 12134 ;; Hardware stack levels used:    1
 12135 ;; Hardware stack levels required when called:    5
 12136 ;; This function calls:
 12137 ;;		Nothing
 12138 ;; This function is called by:
 12139 ;;		_SYSTEM_Initialize
 12140 ;; This function uses a non-reentrant model
 12141 ;;
 12142                           
 12143                           
 12144                           ;psect for function _TMR2_Initialize
 12145  0A56                     _TMR2_Initialize:	
 12146                           
 12147                           ;mcc_generated_files/tmr2.c: 67:     PR2 = 0x7F;
 12148                           
 12149                           ;incstack = 0
 12150                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
 12151  0A56  307F               	movlw	127
 12152  0A57  0020               	movlb	0	; select bank0
 12153  0A58  009E               	movwf	30	;volatile
 12154                           
 12155                           ;mcc_generated_files/tmr2.c: 70:     TMR2 = 0x00;
 12156  0A59  019D               	clrf	29	;volatile
 12157                           
 12158                           ;mcc_generated_files/tmr2.c: 73:     PIR1bits.TMR2IF = 0;
 12159  0A5A  1091               	bcf	17,1	;volatile
 12160                           
 12161                           ;mcc_generated_files/tmr2.c: 76:     T2CON = 0x04;
 12162  0A5B  3004               	movlw	4
 12163  0A5C  009F               	movwf	31	;volatile
 12164  0A5D  0008               	return
 12165  0A5E                     __end_of_TMR2_Initialize:	
 12166                           
 12167                           	psect	text54
 12168  0A20                     __ptext54:	
 12169 ;; *************** function _SPI2_Initialize *****************
 12170 ;; Defined at:
 12171 ;;		line 65 in file "mcc_generated_files/spi2.c"
 12172 ;; Parameters:    Size  Location     Type
 12173 ;;		None
 12174 ;; Auto vars:     Size  Location     Type
 12175 ;;		None
 12176 ;; Return value:  Size  Location     Type
 12177 ;;                  1    wreg      void 
 12178 ;; Registers used:
 12179 ;;		wreg, status,2
 12180 ;; Tracked objects:
 12181 ;;		On entry : 0/0
 12182 ;;		On exit  : 0/0
 12183 ;;		Unchanged: 0/0
 12184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12185 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12186 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12187 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12188 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12189 ;;Total ram usage:        0 bytes
 12190 ;; Hardware stack levels used:    1
 12191 ;; Hardware stack levels required when called:    5
 12192 ;; This function calls:
 12193 ;;		Nothing
 12194 ;; This function is called by:
 12195 ;;		_SYSTEM_Initialize
 12196 ;; This function uses a non-reentrant model
 12197 ;;
 12198                           
 12199                           
 12200                           ;psect for function _SPI2_Initialize
 12201  0A20                     _SPI2_Initialize:	
 12202                           
 12203                           ;mcc_generated_files/spi2.c: 70:     SSP2STAT = 0x80;
 12204                           
 12205                           ;incstack = 0
 12206                           ; Regs used in _SPI2_Initialize: [wreg+status,2]
 12207  0A20  3080               	movlw	128
 12208  0A21  0024               	movlb	4	; select bank4
 12209  0A22  009C               	movwf	28	;volatile
 12210                           
 12211                           ;mcc_generated_files/spi2.c: 73:     SSP2CON1 = 0x30;
 12212  0A23  3030               	movlw	48
 12213  0A24  009D               	movwf	29	;volatile
 12214                           
 12215                           ;mcc_generated_files/spi2.c: 76:     SSP2ADD = 0x00;
 12216  0A25  019A               	clrf	26	;volatile
 12217  0A26  0008               	return
 12218  0A27                     __end_of_SPI2_Initialize:	
 12219                           
 12220                           	psect	text55
 12221  0A79                     __ptext55:	
 12222 ;; *************** function _PWM1_Initialize *****************
 12223 ;; Defined at:
 12224 ;;		line 64 in file "mcc_generated_files/pwm1.c"
 12225 ;; Parameters:    Size  Location     Type
 12226 ;;		None
 12227 ;; Auto vars:     Size  Location     Type
 12228 ;;		None
 12229 ;; Return value:  Size  Location     Type
 12230 ;;                  1    wreg      void 
 12231 ;; Registers used:
 12232 ;;		wreg, status,2, status,0
 12233 ;; Tracked objects:
 12234 ;;		On entry : 0/0
 12235 ;;		On exit  : 0/0
 12236 ;;		Unchanged: 0/0
 12237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12239 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12240 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12241 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12242 ;;Total ram usage:        0 bytes
 12243 ;; Hardware stack levels used:    1
 12244 ;; Hardware stack levels required when called:    5
 12245 ;; This function calls:
 12246 ;;		Nothing
 12247 ;; This function is called by:
 12248 ;;		_SYSTEM_Initialize
 12249 ;; This function uses a non-reentrant model
 12250 ;;
 12251                           
 12252                           
 12253                           ;psect for function _PWM1_Initialize
 12254  0A79                     _PWM1_Initialize:	
 12255                           
 12256                           ;mcc_generated_files/pwm1.c: 69:  CCP1CON = 0x8F;
 12257                           
 12258                           ;incstack = 0
 12259                           ; Regs used in _PWM1_Initialize: [wreg+status,2+status,0]
 12260  0A79  308F               	movlw	143
 12261  0A7A  0025               	movlb	5	; select bank5
 12262  0A7B  0093               	movwf	19	;volatile
 12263                           
 12264                           ;mcc_generated_files/pwm1.c: 72:  CCPR1H = 0x00;
 12265  0A7C  0192               	clrf	18	;volatile
 12266                           
 12267                           ;mcc_generated_files/pwm1.c: 75:  CCPR1L = 0xFF;
 12268  0A7D  30FF               	movlw	255
 12269  0A7E  0091               	movwf	17	;volatile
 12270                           
 12271                           ;mcc_generated_files/pwm1.c: 78:  CCPTMRSbits.C1TSEL = 0x1;
 12272  0A7F  081F               	movf	31,w	;volatile
 12273  0A80  39FC               	andlw	-4
 12274  0A81  3801               	iorlw	1
 12275  0A82  009F               	movwf	31	;volatile
 12276  0A83  0008               	return
 12277  0A84                     __end_of_PWM1_Initialize:	
 12278                           
 12279                           	psect	text56
 12280  0A4E                     __ptext56:	
 12281 ;; *************** function _PMD_Initialize *****************
 12282 ;; Defined at:
 12283 ;;		line 83 in file "mcc_generated_files/mcc.c"
 12284 ;; Parameters:    Size  Location     Type
 12285 ;;		None
 12286 ;; Auto vars:     Size  Location     Type
 12287 ;;		None
 12288 ;; Return value:  Size  Location     Type
 12289 ;;                  1    wreg      void 
 12290 ;; Registers used:
 12291 ;;		status,2
 12292 ;; Tracked objects:
 12293 ;;		On entry : 0/0
 12294 ;;		On exit  : 0/0
 12295 ;;		Unchanged: 0/0
 12296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12297 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12298 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12300 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12301 ;;Total ram usage:        0 bytes
 12302 ;; Hardware stack levels used:    1
 12303 ;; Hardware stack levels required when called:    5
 12304 ;; This function calls:
 12305 ;;		Nothing
 12306 ;; This function is called by:
 12307 ;;		_SYSTEM_Initialize
 12308 ;; This function uses a non-reentrant model
 12309 ;;
 12310                           
 12311                           
 12312                           ;psect for function _PMD_Initialize
 12313  0A4E                     _PMD_Initialize:	
 12314                           
 12315                           ;mcc_generated_files/mcc.c: 86:     PMD0 = 0x00;
 12316                           
 12317                           ;incstack = 0
 12318                           ; Regs used in _PMD_Initialize: [status,2]
 12319  0A4E  0032               	movlb	18	; select bank18
 12320  0A4F  0191               	clrf	17	;volatile
 12321                           
 12322                           ;mcc_generated_files/mcc.c: 88:     PMD1 = 0x00;
 12323  0A50  0192               	clrf	18	;volatile
 12324                           
 12325                           ;mcc_generated_files/mcc.c: 90:     PMD2 = 0x00;
 12326  0A51  0193               	clrf	19	;volatile
 12327                           
 12328                           ;mcc_generated_files/mcc.c: 92:     PMD3 = 0x00;
 12329  0A52  0194               	clrf	20	;volatile
 12330                           
 12331                           ;mcc_generated_files/mcc.c: 94:     PMD4 = 0x00;
 12332  0A53  0195               	clrf	21	;volatile
 12333                           
 12334                           ;mcc_generated_files/mcc.c: 96:     PMD5 = 0x00;
 12335  0A54  0196               	clrf	22	;volatile
 12336  0A55  0008               	return
 12337  0A56                     __end_of_PMD_Initialize:	
 12338                           
 12339                           	psect	text57
 12340  0E4C                     __ptext57:	
 12341 ;; *************** function _PIN_MANAGER_Initialize *****************
 12342 ;; Defined at:
 12343 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
 12344 ;; Parameters:    Size  Location     Type
 12345 ;;		None
 12346 ;; Auto vars:     Size  Location     Type
 12347 ;;		None
 12348 ;; Return value:  Size  Location     Type
 12349 ;;                  1    wreg      void 
 12350 ;; Registers used:
 12351 ;;		wreg, status,2
 12352 ;; Tracked objects:
 12353 ;;		On entry : 0/0
 12354 ;;		On exit  : 0/0
 12355 ;;		Unchanged: 0/0
 12356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12357 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12358 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12359 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12360 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12361 ;;Total ram usage:        0 bytes
 12362 ;; Hardware stack levels used:    1
 12363 ;; Hardware stack levels required when called:    5
 12364 ;; This function calls:
 12365 ;;		Nothing
 12366 ;; This function is called by:
 12367 ;;		_SYSTEM_Initialize
 12368 ;; This function uses a non-reentrant model
 12369 ;;
 12370                           
 12371                           
 12372                           ;psect for function _PIN_MANAGER_Initialize
 12373  0E4C                     _PIN_MANAGER_Initialize:	
 12374                           
 12375                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x00;
 12376                           
 12377                           ;incstack = 0
 12378                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
 12379  0E4C  0022               	movlb	2	; select bank2
 12380  0E4D  018C               	clrf	12	;volatile
 12381                           
 12382                           ;mcc_generated_files/pin_manager.c: 61:     LATB = 0x00;
 12383  0E4E  018D               	clrf	13	;volatile
 12384                           
 12385                           ;mcc_generated_files/pin_manager.c: 62:     LATC = 0x00;
 12386  0E4F  018E               	clrf	14	;volatile
 12387                           
 12388                           ;mcc_generated_files/pin_manager.c: 67:     TRISA = 0x37;
 12389  0E50  3037               	movlw	55
 12390  0E51  0021               	movlb	1	; select bank1
 12391  0E52  008C               	movwf	12	;volatile
 12392                           
 12393                           ;mcc_generated_files/pin_manager.c: 68:     TRISB = 0xB0;
 12394  0E53  30B0               	movlw	176
 12395  0E54  008D               	movwf	13	;volatile
 12396                           
 12397                           ;mcc_generated_files/pin_manager.c: 69:     TRISC = 0xBA;
 12398  0E55  30BA               	movlw	186
 12399  0E56  008E               	movwf	14	;volatile
 12400                           
 12401                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0xF4;
 12402  0E57  30F4               	movlw	244
 12403  0E58  0023               	movlb	3	; select bank3
 12404  0E59  008E               	movwf	14	;volatile
 12405                           
 12406                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0x00;
 12407  0E5A  018D               	clrf	13	;volatile
 12408                           
 12409                           ;mcc_generated_files/pin_manager.c: 76:     ANSELA = 0x11;
 12410  0E5B  3011               	movlw	17
 12411  0E5C  008C               	movwf	12	;volatile
 12412                           
 12413                           ;mcc_generated_files/pin_manager.c: 81:     WPUB = 0x00;
 12414  0E5D  0024               	movlb	4	; select bank4
 12415  0E5E  018D               	clrf	13	;volatile
 12416                           
 12417                           ;mcc_generated_files/pin_manager.c: 82:     WPUA = 0x00;
 12418  0E5F  018C               	clrf	12	;volatile
 12419                           
 12420                           ;mcc_generated_files/pin_manager.c: 83:     WPUC = 0x00;
 12421  0E60  018E               	clrf	14	;volatile
 12422                           
 12423                           ;mcc_generated_files/pin_manager.c: 88:     ODCONA = 0x00;
 12424  0E61  0025               	movlb	5	; select bank5
 12425  0E62  018C               	clrf	12	;volatile
 12426                           
 12427                           ;mcc_generated_files/pin_manager.c: 89:     ODCONB = 0x00;
 12428  0E63  018D               	clrf	13	;volatile
 12429                           
 12430                           ;mcc_generated_files/pin_manager.c: 90:     ODCONC = 0x00;
 12431  0E64  018E               	clrf	14	;volatile
 12432                           
 12433                           ;mcc_generated_files/pin_manager.c: 95:     SLRCONA = 0x37;
 12434  0E65  3037               	movlw	55
 12435  0E66  0026               	movlb	6	; select bank6
 12436  0E67  008C               	movwf	12	;volatile
 12437                           
 12438                           ;mcc_generated_files/pin_manager.c: 96:     SLRCONB = 0xF0;
 12439  0E68  30F0               	movlw	240
 12440  0E69  008D               	movwf	13	;volatile
 12441                           
 12442                           ;mcc_generated_files/pin_manager.c: 97:     SLRCONC = 0xFF;
 12443  0E6A  30FF               	movlw	255
 12444  0E6B  008E               	movwf	14	;volatile
 12445                           
 12446                           ;mcc_generated_files/pin_manager.c: 105:     PIE0bits.IOCIE = 1;
 12447  0E6C  0021               	movlb	1	; select bank1
 12448  0E6D  1610               	bsf	16,4	;volatile
 12449                           
 12450                           ;mcc_generated_files/pin_manager.c: 108:     SSP2DATPPS = 0x0C;
 12451  0E6E  300C               	movlw	12
 12452  0E6F  003C               	movlb	28	; select bank28
 12453  0E70  009E               	movwf	30	;volatile
 12454                           
 12455                           ;mcc_generated_files/pin_manager.c: 109:     SSP1CLKPPS = 0x0F;
 12456  0E71  300F               	movlw	15
 12457  0E72  00A0               	movwf	32	;volatile
 12458                           
 12459                           ;mcc_generated_files/pin_manager.c: 110:     RB6PPS = 0x1A;
 12460  0E73  301A               	movlw	26
 12461  0E74  003D               	movlb	29	; select bank29
 12462  0E75  009E               	movwf	30	;volatile
 12463                           
 12464                           ;mcc_generated_files/pin_manager.c: 111:     RB7PPS = 0x18;
 12465  0E76  3018               	movlw	24
 12466  0E77  009F               	movwf	31	;volatile
 12467                           
 12468                           ;mcc_generated_files/pin_manager.c: 112:     RB5PPS = 0x19;
 12469  0E78  3019               	movlw	25
 12470  0E79  009D               	movwf	29	;volatile
 12471                           
 12472                           ;mcc_generated_files/pin_manager.c: 113:     RC2PPS = 0x1B;
 12473  0E7A  301B               	movlw	27
 12474  0E7B  00A2               	movwf	34	;volatile
 12475                           
 12476                           ;mcc_generated_files/pin_manager.c: 114:     SSP1DATPPS = 0x0D;
 12477  0E7C  300D               	movlw	13
 12478  0E7D  003C               	movlb	28	; select bank28
 12479  0E7E  00A1               	movwf	33	;volatile
 12480                           
 12481                           ;mcc_generated_files/pin_manager.c: 115:     SSP2CLKPPS = 0x0E;
 12482  0E7F  300E               	movlw	14
 12483  0E80  009D               	movwf	29	;volatile
 12484  0E81  0008               	return
 12485  0E82                     __end_of_PIN_MANAGER_Initialize:	
 12486                           
 12487                           	psect	text58
 12488  0A46                     __ptext58:	
 12489 ;; *************** function _OSCILLATOR_Initialize *****************
 12490 ;; Defined at:
 12491 ;;		line 63 in file "mcc_generated_files/mcc.c"
 12492 ;; Parameters:    Size  Location     Type
 12493 ;;		None
 12494 ;; Auto vars:     Size  Location     Type
 12495 ;;		None
 12496 ;; Return value:  Size  Location     Type
 12497 ;;                  1    wreg      void 
 12498 ;; Registers used:
 12499 ;;		wreg, status,2
 12500 ;; Tracked objects:
 12501 ;;		On entry : 0/0
 12502 ;;		On exit  : 0/0
 12503 ;;		Unchanged: 0/0
 12504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12506 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12508 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12509 ;;Total ram usage:        0 bytes
 12510 ;; Hardware stack levels used:    1
 12511 ;; Hardware stack levels required when called:    5
 12512 ;; This function calls:
 12513 ;;		Nothing
 12514 ;; This function is called by:
 12515 ;;		_SYSTEM_Initialize
 12516 ;; This function uses a non-reentrant model
 12517 ;;
 12518                           
 12519                           
 12520                           ;psect for function _OSCILLATOR_Initialize
 12521  0A46                     _OSCILLATOR_Initialize:	
 12522                           
 12523                           ;mcc_generated_files/mcc.c: 66:     OSCCON1 = 0x61;
 12524                           
 12525                           ;incstack = 0
 12526                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 12527  0A46  3061               	movlw	97
 12528  0A47  0032               	movlb	18	; select bank18
 12529  0A48  0099               	movwf	25	;volatile
 12530                           
 12531                           ;mcc_generated_files/mcc.c: 68:     OSCCON3 = 0x00;
 12532  0A49  019B               	clrf	27	;volatile
 12533                           
 12534                           ;mcc_generated_files/mcc.c: 70:     OSCEN = 0x00;
 12535  0A4A  019D               	clrf	29	;volatile
 12536                           
 12537                           ;mcc_generated_files/mcc.c: 72:     OSCFRQ = 0x00;
 12538  0A4B  019F               	clrf	31	;volatile
 12539                           
 12540                           ;mcc_generated_files/mcc.c: 74:     OSCTUNE = 0x00;
 12541  0A4C  019E               	clrf	30	;volatile
 12542  0A4D  0008               	return
 12543  0A4E                     __end_of_OSCILLATOR_Initialize:	
 12544                           
 12545                           	psect	text59
 12546  0A3E                     __ptext59:	
 12547 ;; *************** function _ADC_Initialize *****************
 12548 ;; Defined at:
 12549 ;;		line 65 in file "mcc_generated_files/adc.c"
 12550 ;; Parameters:    Size  Location     Type
 12551 ;;		None
 12552 ;; Auto vars:     Size  Location     Type
 12553 ;;		None
 12554 ;; Return value:  Size  Location     Type
 12555 ;;                  1    wreg      void 
 12556 ;; Registers used:
 12557 ;;		wreg, status,2
 12558 ;; Tracked objects:
 12559 ;;		On entry : 0/0
 12560 ;;		On exit  : 0/0
 12561 ;;		Unchanged: 0/0
 12562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12563 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12564 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12565 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12566 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12567 ;;Total ram usage:        0 bytes
 12568 ;; Hardware stack levels used:    1
 12569 ;; Hardware stack levels required when called:    5
 12570 ;; This function calls:
 12571 ;;		Nothing
 12572 ;; This function is called by:
 12573 ;;		_SYSTEM_Initialize
 12574 ;; This function uses a non-reentrant model
 12575 ;;
 12576                           
 12577                           
 12578                           ;psect for function _ADC_Initialize
 12579  0A3E                     _ADC_Initialize:	
 12580                           
 12581                           ;mcc_generated_files/adc.c: 70:     ADCON0 = 0x01;
 12582                           
 12583                           ;incstack = 0
 12584                           ; Regs used in _ADC_Initialize: [wreg+status,2]
 12585  0A3E  3001               	movlw	1
 12586  0A3F  0021               	movlb	1	; select bank1
 12587  0A40  009D               	movwf	29	;volatile
 12588                           
 12589                           ;mcc_generated_files/adc.c: 73:     ADCON1 = 0x00;
 12590  0A41  019E               	clrf	30	;volatile
 12591                           
 12592                           ;mcc_generated_files/adc.c: 76:     ADACT = 0x00;
 12593  0A42  019F               	clrf	31	;volatile
 12594                           
 12595                           ;mcc_generated_files/adc.c: 79:     ADRESL = 0x00;
 12596  0A43  019B               	clrf	27	;volatile
 12597                           
 12598                           ;mcc_generated_files/adc.c: 82:     ADRESH = 0x00;
 12599  0A44  019C               	clrf	28	;volatile
 12600  0A45  0008               	return
 12601  0A46                     __end_of_ADC_Initialize:	
 12602                           
 12603                           	psect	text60
 12604  0AAC                     __ptext60:	
 12605 ;; *************** function _Display_Clear *****************
 12606 ;; Defined at:
 12607 ;;		line 251 in file "main.c"
 12608 ;; Parameters:    Size  Location     Type
 12609 ;;		None
 12610 ;; Auto vars:     Size  Location     Type
 12611 ;;		None
 12612 ;; Return value:  Size  Location     Type
 12613 ;;                  1    wreg      void 
 12614 ;; Registers used:
 12615 ;;		wreg, status,2, status,0, pclath, cstack
 12616 ;; Tracked objects:
 12617 ;;		On entry : 0/0
 12618 ;;		On exit  : 0/0
 12619 ;;		Unchanged: 0/0
 12620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12621 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12622 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12623 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12624 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12625 ;;Total ram usage:        1 bytes
 12626 ;; Hardware stack levels used:    1
 12627 ;; Hardware stack levels required when called:    7
 12628 ;; This function calls:
 12629 ;;		_SPI_Write
 12630 ;; This function is called by:
 12631 ;;		_main
 12632 ;; This function uses a non-reentrant model
 12633 ;;
 12634                           
 12635                           
 12636                           ;psect for function _Display_Clear
 12637  0AAC                     _Display_Clear:	
 12638                           
 12639                           ;main.c: 252:     SPI_Write(0xFE);
 12640                           
 12641                           ;incstack = 0
 12642                           ; Regs used in _Display_Clear: [wreg+status,2+status,0+pclath+cstack]
 12643  0AAC  30FE               	movlw	254
 12644  0AAD  318B  231C  318A   	fcall	_SPI_Write
 12645                           
 12646                           ;main.c: 253:     _delay((unsigned long)((100)*(250000/4000.0)));
 12647  0AB0  3009               	movlw	9
 12648  0AB1  0020               	movlb	0	; select bank0
 12649  0AB2  00A3               	movwf	??_Display_Clear
 12650  0AB3  301C               	movlw	28
 12651  0AB4                     u6417:	
 12652  0AB4  0B89               	decfsz	9,f
 12653  0AB5  2AB4               	goto	u6417
 12654  0AB6  0BA3               	decfsz	??_Display_Clear,f
 12655  0AB7  2AB4               	goto	u6417
 12656  0AB8  0000               	nop
 12657                           
 12658                           ;main.c: 254:     SPI_Write(0x51);
 12659  0AB9  3051               	movlw	81
 12660  0ABA  318B  231C         	fcall	_SPI_Write
 12661  0ABC  0008               	return
 12662  0ABD                     __end_of_Display_Clear:	
 12663                           
 12664                           	psect	text61
 12665  0B1C                     __ptext61:	
 12666 ;; *************** function _SPI_Write *****************
 12667 ;; Defined at:
 12668 ;;		line 208 in file "main.c"
 12669 ;; Parameters:    Size  Location     Type
 12670 ;;  incoming        1    wreg     unsigned char 
 12671 ;; Auto vars:     Size  Location     Type
 12672 ;;  incoming        1    2[BANK0 ] unsigned char 
 12673 ;; Return value:  Size  Location     Type
 12674 ;;                  1    wreg      void 
 12675 ;; Registers used:
 12676 ;;		wreg, status,2, status,0, pclath, cstack
 12677 ;; Tracked objects:
 12678 ;;		On entry : 0/0
 12679 ;;		On exit  : 0/0
 12680 ;;		Unchanged: 0/0
 12681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12683 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12684 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12685 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12686 ;;Total ram usage:        2 bytes
 12687 ;; Hardware stack levels used:    1
 12688 ;; Hardware stack levels required when called:    6
 12689 ;; This function calls:
 12690 ;;		_SPI2_Exchange8bit
 12691 ;; This function is called by:
 12692 ;;		_Display_Name
 12693 ;;		_Display_Clear
 12694 ;; This function uses a non-reentrant model
 12695 ;;
 12696                           
 12697                           
 12698                           ;psect for function _SPI_Write
 12699  0B1C                     _SPI_Write:	
 12700                           
 12701                           ;incstack = 0
 12702                           ; Regs used in _SPI_Write: [wreg+status,2+status,0+pclath+cstack]
 12703                           ;SPI_Write@incoming stored from wreg
 12704  0B1C  0020               	movlb	0	; select bank0
 12705  0B1D  00A2               	movwf	SPI_Write@incoming
 12706                           
 12707                           ;main.c: 209:     do { LATCbits.LATC0 = 0; } while(0);
 12708  0B1E  0022               	movlb	2	; select bank2
 12709  0B1F  100E               	bcf	14,0	;volatile
 12710                           
 12711                           ;main.c: 210:     SPI2_Exchange8bit(incoming);
 12712  0B20  0020               	movlb	0	; select bank0
 12713  0B21  0822               	movf	SPI_Write@incoming,w
 12714  0B22  318A  229D  318B   	fcall	_SPI2_Exchange8bit
 12715  0B25  0022               	movlb	2	; select bank2
 12716  0B26  140E               	bsf	14,0	;volatile
 12717                           
 12718                           ;main.c: 212:     _delay((unsigned long)((100)*(250000/4000.0)));
 12719  0B27  3009               	movlw	9
 12720  0B28  0020               	movlb	0	; select bank0
 12721  0B29  00A1               	movwf	??_SPI_Write
 12722  0B2A  301C               	movlw	28
 12723  0B2B                     u6427:	
 12724  0B2B  0B89               	decfsz	9,f
 12725  0B2C  2B2B               	goto	u6427
 12726  0B2D  0BA1               	decfsz	??_SPI_Write,f
 12727  0B2E  2B2B               	goto	u6427
 12728  0B2F  0000               	nop
 12729  0B30  0008               	return
 12730  0B31                     __end_of_SPI_Write:	
 12731                           
 12732                           	psect	text62
 12733  0A9D                     __ptext62:	
 12734 ;; *************** function _SPI2_Exchange8bit *****************
 12735 ;; Defined at:
 12736 ;;		line 79 in file "mcc_generated_files/spi2.c"
 12737 ;; Parameters:    Size  Location     Type
 12738 ;;  data            1    wreg     unsigned char 
 12739 ;; Auto vars:     Size  Location     Type
 12740 ;;  data            1    0[BANK0 ] unsigned char 
 12741 ;; Return value:  Size  Location     Type
 12742 ;;                  1    wreg      unsigned char 
 12743 ;; Registers used:
 12744 ;;		wreg
 12745 ;; Tracked objects:
 12746 ;;		On entry : 0/0
 12747 ;;		On exit  : 0/0
 12748 ;;		Unchanged: 0/0
 12749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12750 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12751 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12752 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12753 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12754 ;;Total ram usage:        1 bytes
 12755 ;; Hardware stack levels used:    1
 12756 ;; Hardware stack levels required when called:    5
 12757 ;; This function calls:
 12758 ;;		Nothing
 12759 ;; This function is called by:
 12760 ;;		_SPI_Write
 12761 ;;		_SPI2_Exchange8bitBuffer
 12762 ;; This function uses a non-reentrant model
 12763 ;;
 12764                           
 12765                           
 12766                           ;psect for function _SPI2_Exchange8bit
 12767  0A9D                     _SPI2_Exchange8bit:	
 12768                           
 12769                           ;incstack = 0
 12770                           ; Regs used in _SPI2_Exchange8bit: [wreg]
 12771                           ;SPI2_Exchange8bit@data stored from wreg
 12772  0A9D  0020               	movlb	0	; select bank0
 12773  0A9E  00A0               	movwf	SPI2_Exchange8bit@data
 12774                           
 12775                           ;mcc_generated_files/spi2.c: 79: uint8_t SPI2_Exchange8bit(uint8_t data);mcc_generated_f
      +                          iles/spi2.c: 80: {;mcc_generated_files/spi2.c: 82:     SSP2CON1bits.WCOL = 0;
 12776  0A9F  0024               	movlb	4	; select bank4
 12777  0AA0  139D               	bcf	29,7	;volatile
 12778                           
 12779                           ;mcc_generated_files/spi2.c: 84:     SSP2BUF = data;
 12780  0AA1  0020               	movlb	0	; select bank0
 12781  0AA2  0820               	movf	SPI2_Exchange8bit@data,w
 12782  0AA3  0024               	movlb	4	; select bank4
 12783  0AA4  0099               	movwf	25	;volatile
 12784  0AA5                     l532:	
 12785                           ;mcc_generated_files/spi2.c: 89:     }
 12786                           
 12787                           ;mcc_generated_files/spi2.c: 86:     while(SSP2STATbits.BF == 0x0)
 12788                           
 12789                           
 12790                           ;mcc_generated_files/spi2.c: 86:     while(SSP2STATbits.BF == 0x0)
 12791  0AA5  0024               	movlb	4	; select bank4
 12792  0AA6  181C               	btfsc	28,0	;volatile
 12793  0AA7  2AAA               	goto	l5758
 12794  0AA8  0064               	clrwdt	;# 
 12795  0AA9  2AA5               	goto	l532
 12796  0AAA                     l5758:	
 12797                           
 12798                           ;mcc_generated_files/spi2.c: 91:     return (SSP2BUF);
 12799  0AAA  0819               	movf	25,w	;volatile
 12800  0AAB  0008               	return
 12801  0AAC                     __end_of_SPI2_Exchange8bit:	
 12802                           
 12803                           	psect	intentry
 12804  0004                     __pintentry:	
 12805 ;; *************** function _INTERRUPT_InterruptManager *****************
 12806 ;; Defined at:
 12807 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 12808 ;; Parameters:    Size  Location     Type
 12809 ;;		None
 12810 ;; Auto vars:     Size  Location     Type
 12811 ;;		None
 12812 ;; Return value:  Size  Location     Type
 12813 ;;                  1    wreg      void 
 12814 ;; Registers used:
 12815 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12816 ;; Tracked objects:
 12817 ;;		On entry : 0/0
 12818 ;;		On exit  : 0/0
 12819 ;;		Unchanged: 0/0
 12820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12821 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12822 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12823 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12824 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12825 ;;Total ram usage:        0 bytes
 12826 ;; Hardware stack levels used:    1
 12827 ;; Hardware stack levels required when called:    4
 12828 ;; This function calls:
 12829 ;;		Absolute function
 12830 ;;		_PIN_MANAGER_IOC
 12831 ;;		_i2c_ISR
 12832 ;;		_i2c_busCollisionISR
 12833 ;; This function is called by:
 12834 ;;		Interrupt level 1
 12835 ;; This function uses a non-reentrant model
 12836 ;;
 12837                           
 12838  0004                     _INTERRUPT_InterruptManager:	
 12839                           
 12840                           ;incstack = 0
 12841  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 12842                           
 12843                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12844  0005  3180               	pagesel	$
 12845                           
 12846                           ;mcc_generated_files/interrupt_manager.c: 55:     if(PIE0bits.IOCIE == 1 && PIR0bits.IOC
      +                          IF == 1)
 12847  0006  0021               	movlb	1	; select bank1
 12848  0007  1E10               	btfss	16,4	;volatile
 12849  0008  2810               	goto	i1l245
 12850  0009  0020               	movlb	0	; select bank0
 12851  000A  1E10               	btfss	16,4	;volatile
 12852  000B  2810               	goto	i1l245
 12853                           
 12854                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         PIN_MANAGER_IOC();
 12855  000C  3189  2185  3180   	fcall	_PIN_MANAGER_IOC
 12856                           
 12857                           ;mcc_generated_files/interrupt_manager.c: 58:     }
 12858  000F  2829               	goto	i1l253
 12859  0010                     i1l245:	
 12860                           ;mcc_generated_files/interrupt_manager.c: 59:     else if(INTCONbits.PEIE == 1)
 12861                           
 12862  0010  1F0B               	btfss	11,6	;volatile
 12863  0011  2829               	goto	i1l253
 12864                           
 12865                           ;mcc_generated_files/interrupt_manager.c: 60:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 61:         if(PIE1bits.BCL1IE == 1 && PIR1bits.BCL1IF == 1)
 12866  0012  0021               	movlb	1	; select bank1
 12867  0013  1D11               	btfss	17,2	;volatile
 12868  0014  281E               	goto	i1l248
 12869  0015  0020               	movlb	0	; select bank0
 12870  0016  1D11               	btfss	17,2	;volatile
 12871  0017  281E               	goto	i1l248
 12872                           
 12873                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             i2c1_driver_busCollisionISR();
 12874  0018  086D               	movf	_i2c1_driver_busCollisionISR+1,w
 12875  0019  008A               	movwf	10
 12876  001A  086C               	movf	_i2c1_driver_busCollisionISR,w
 12877  001B  000A               	callw
 12878  001C  3180               	pagesel	$
 12879                           
 12880                           ;mcc_generated_files/interrupt_manager.c: 64:         }
 12881  001D  2829               	goto	i1l253
 12882  001E                     i1l248:	
 12883                           ;mcc_generated_files/interrupt_manager.c: 65:         else if(PIE1bits.SSP1IE == 1 && PI
      +                          R1bits.SSP1IF == 1)
 12884                           
 12885  001E  0021               	movlb	1	; select bank1
 12886  001F  1D91               	btfss	17,3	;volatile
 12887  0020  2829               	goto	i1l253
 12888  0021  0020               	movlb	0	; select bank0
 12889  0022  1D91               	btfss	17,3	;volatile
 12890  0023  2829               	goto	i1l253
 12891                           
 12892                           ;mcc_generated_files/interrupt_manager.c: 66:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 67:             i2c1_driver_i2cISR();
 12893  0024  086B               	movf	_i2c1_driver_i2cISR+1,w
 12894  0025  008A               	movwf	10
 12895  0026  086A               	movf	_i2c1_driver_i2cISR,w
 12896  0027  000A               	callw
 12897  0028  3180               	pagesel	$
 12898  0029                     i1l253:	
 12899                           ;mcc_generated_files/interrupt_manager.c: 75:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 77:     }
 12900                           
 12901                           ;mcc_generated_files/interrupt_manager.c: 68:         }
 12902                           
 12903  0029  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 12904  002A  0009               	retfie
 12905  002B                     __end_of_INTERRUPT_InterruptManager:	
 12906                           
 12907                           	psect	text64
 12908  099F                     __ptext64:	
 12909 ;; *************** function _i2c_busCollisionISR *****************
 12910 ;; Defined at:
 12911 ;;		line 435 in file "mcc_generated_files/drivers/i2c_master.c"
 12912 ;; Parameters:    Size  Location     Type
 12913 ;;		None
 12914 ;; Auto vars:     Size  Location     Type
 12915 ;;		None
 12916 ;; Return value:  Size  Location     Type
 12917 ;;                  1    wreg      void 
 12918 ;; Registers used:
 12919 ;;		status,2, status,0, pclath, cstack
 12920 ;; Tracked objects:
 12921 ;;		On entry : 0/0
 12922 ;;		On exit  : 0/0
 12923 ;;		Unchanged: 0/0
 12924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12925 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12926 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12928 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12929 ;;Total ram usage:        0 bytes
 12930 ;; Hardware stack levels used:    1
 12931 ;; Hardware stack levels required when called:    1
 12932 ;; This function calls:
 12933 ;;		_i2c1_driver_clearBusCollision
 12934 ;; This function is called by:
 12935 ;;		_i2c_open
 12936 ;;		_INTERRUPT_InterruptManager
 12937 ;; This function uses a non-reentrant model
 12938 ;;
 12939                           
 12940                           
 12941                           ;psect for function _i2c_busCollisionISR
 12942  099F                     _i2c_busCollisionISR:	
 12943                           
 12944                           ;mcc_generated_files/drivers/i2c_master.c: 437:     i2c1_driver_clearBusCollision();
 12945                           
 12946                           ;incstack = 0
 12947                           ; Regs used in _i2c_busCollisionISR: [status,2+status,0+pclath+cstack]
 12948  099F  3189  219C         	fcall	_i2c1_driver_clearBusCollision
 12949  09A1  0008               	return
 12950  09A2                     __end_of_i2c_busCollisionISR:	
 12951                           
 12952                           	psect	text65
 12953  099C                     __ptext65:	
 12954 ;; *************** function _i2c1_driver_clearBusCollision *****************
 12955 ;; Defined at:
 12956 ;;		line 253 in file "mcc_generated_files/i2c1_driver.c"
 12957 ;; Parameters:    Size  Location     Type
 12958 ;;		None
 12959 ;; Auto vars:     Size  Location     Type
 12960 ;;		None
 12961 ;; Return value:  Size  Location     Type
 12962 ;;                  1    wreg      void 
 12963 ;; Registers used:
 12964 ;;		None
 12965 ;; Tracked objects:
 12966 ;;		On entry : 0/0
 12967 ;;		On exit  : 0/0
 12968 ;;		Unchanged: 0/0
 12969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12970 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12971 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12972 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12973 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12974 ;;Total ram usage:        0 bytes
 12975 ;; Hardware stack levels used:    1
 12976 ;; This function calls:
 12977 ;;		Nothing
 12978 ;; This function is called by:
 12979 ;;		_i2c_busCollisionISR
 12980 ;; This function uses a non-reentrant model
 12981 ;;
 12982                           
 12983                           
 12984                           ;psect for function _i2c1_driver_clearBusCollision
 12985  099C                     _i2c1_driver_clearBusCollision:	
 12986                           
 12987                           ;mcc_generated_files/i2c1_driver.c: 255:     PIR1bits.BCL1IF = 0;
 12988                           
 12989                           ;incstack = 0
 12990                           ; Regs used in _i2c1_driver_clearBusCollision: []
 12991  099C  0020               	movlb	0	; select bank0
 12992  099D  1111               	bcf	17,2	;volatile
 12993  099E  0008               	return
 12994  099F                     __end_of_i2c1_driver_clearBusCollision:	
 12995                           
 12996                           	psect	text66
 12997  0BF0                     __ptext66:	
 12998 ;; *************** function _i2c_ISR *****************
 12999 ;; Defined at:
 13000 ;;		line 419 in file "mcc_generated_files/drivers/i2c_master.c"
 13001 ;; Parameters:    Size  Location     Type
 13002 ;;		None
 13003 ;; Auto vars:     Size  Location     Type
 13004 ;;		None
 13005 ;; Return value:  Size  Location     Type
 13006 ;;                  1    wreg      void 
 13007 ;; Registers used:
 13008 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13009 ;; Tracked objects:
 13010 ;;		On entry : 0/0
 13011 ;;		On exit  : 0/0
 13012 ;;		Unchanged: 0/0
 13013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13014 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13015 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13016 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13017 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13018 ;;Total ram usage:        3 bytes
 13019 ;; Hardware stack levels used:    1
 13020 ;; Hardware stack levels required when called:    3
 13021 ;; This function calls:
 13022 ;;		_do_I2C_DO_ACK
 13023 ;;		_do_I2C_DO_ADDRESS_NACK
 13024 ;;		_do_I2C_DO_NACK_RESTART
 13025 ;;		_do_I2C_DO_NACK_STOP
 13026 ;;		_do_I2C_IDLE
 13027 ;;		_do_I2C_RCEN
 13028 ;;		_do_I2C_RESET
 13029 ;;		_do_I2C_RX
 13030 ;;		_do_I2C_SEND_ADR_READ
 13031 ;;		_do_I2C_SEND_ADR_WRITE
 13032 ;;		_do_I2C_SEND_RESTART
 13033 ;;		_do_I2C_SEND_RESTART_READ
 13034 ;;		_do_I2C_SEND_RESTART_WRITE
 13035 ;;		_do_I2C_SEND_STOP
 13036 ;;		_do_I2C_TX
 13037 ;;		_do_I2C_TX_EMPTY
 13038 ;;		_i2c1_driver_isNACK
 13039 ;;		_mssp1_clearIRQ
 13040 ;; This function is called by:
 13041 ;;		_i2c_open
 13042 ;;		_i2c_poller
 13043 ;;		_INTERRUPT_InterruptManager
 13044 ;; This function uses a non-reentrant model
 13045 ;;
 13046                           
 13047                           
 13048                           ;psect for function _i2c_ISR
 13049  0BF0                     _i2c_ISR:	
 13050                           
 13051                           ;mcc_generated_files/drivers/i2c_master.c: 421:     mssp1_clearIRQ();
 13052                           
 13053                           ;incstack = 0
 13054                           ; Regs used in _i2c_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13055  0BF0  3189  2199  318B   	fcall	_mssp1_clearIRQ
 13056                           
 13057                           ;mcc_generated_files/drivers/i2c_master.c: 427:     if(i2c_status.addressNACKCheck && i2
      +                          c1_driver_isNACK())
 13058  0BF3  0023               	movlb	3	; select bank3
 13059  0BF4  1DA0               	btfss	_i2c_status^(0+384),3
 13060  0BF5  2C00               	goto	i1l5030
 13061  0BF6  318A  222E  318B   	fcall	_i2c1_driver_isNACK
 13062  0BF9  1C03               	btfss	3,0
 13063  0BFA  2C00               	goto	i1l5030
 13064                           
 13065                           ;mcc_generated_files/drivers/i2c_master.c: 428:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 429:         i2c_status.state = I2C_ADDRESS_NACK;
 13066  0BFB  300F               	movlw	15
 13067  0BFC  00F3               	movwf	??_i2c_ISR
 13068  0BFD  0873               	movf	??_i2c_ISR,w
 13069  0BFE  0023               	movlb	3	; select bank3
 13070  0BFF  00A9               	movwf	(_i2c_status^(0+384)+9)
 13071  0C00                     i1l5030:	
 13072                           
 13073                           ;mcc_generated_files/drivers/i2c_master.c: 432:     i2c_status.state = fsmStateTable[i2c
      +                          _status.state]();
 13074  0C00  0023               	movlb	3	; select bank3
 13075  0C01  0829               	movf	(_i2c_status^(0+384)+9),w
 13076  0C02  00F3               	movwf	??_i2c_ISR
 13077  0C03  01F4               	clrf	??_i2c_ISR+1
 13078  0C04  35F3               	lslf	??_i2c_ISR,f
 13079  0C05  0DF4               	rlf	??_i2c_ISR+1,f
 13080  0C06  3000               	movlw	low (_fsmStateTable| (0+32768))
 13081  0C07  0773               	addwf	??_i2c_ISR,w
 13082  0C08  0084               	movwf	4
 13083  0C09  3090               	movlw	high (_fsmStateTable| (0+32768))
 13084  0C0A  3D74               	addwfc	??_i2c_ISR+1,w
 13085  0C0B  0085               	movwf	5
 13086  0C0C  3F01               	moviw [1]fsr0
 13087  0C0D  008A               	movwf	10
 13088  0C0E  3F00               	moviw [0]fsr0
 13089  0C0F  000A               	callw
 13090  0C10  318B               	pagesel	$
 13091  0C11  00F5               	movwf	??_i2c_ISR+2
 13092  0C12  0875               	movf	??_i2c_ISR+2,w
 13093  0C13  0023               	movlb	3	; select bank3
 13094  0C14  00A9               	movwf	(_i2c_status^(0+384)+9)
 13095  0C15  0008               	return
 13096  0C16                     __end_of_i2c_ISR:	
 13097                           
 13098                           	psect	text67
 13099  0999                     __ptext67:	
 13100 ;; *************** function _mssp1_clearIRQ *****************
 13101 ;; Defined at:
 13102 ;;		line 53 in file "mcc_generated_files/i2c1_driver.c"
 13103 ;; Parameters:    Size  Location     Type
 13104 ;;		None
 13105 ;; Auto vars:     Size  Location     Type
 13106 ;;		None
 13107 ;; Return value:  Size  Location     Type
 13108 ;;                  1    wreg      void 
 13109 ;; Registers used:
 13110 ;;		None
 13111 ;; Tracked objects:
 13112 ;;		On entry : 0/0
 13113 ;;		On exit  : 0/0
 13114 ;;		Unchanged: 0/0
 13115 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13116 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13117 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13118 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13119 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13120 ;;Total ram usage:        0 bytes
 13121 ;; Hardware stack levels used:    1
 13122 ;; This function calls:
 13123 ;;		Nothing
 13124 ;; This function is called by:
 13125 ;;		_i2c_ISR
 13126 ;;		_i2c_open
 13127 ;;		_i2c_close
 13128 ;; This function uses a non-reentrant model
 13129 ;;
 13130                           
 13131                           
 13132                           ;psect for function _mssp1_clearIRQ
 13133  0999                     _mssp1_clearIRQ:	
 13134                           
 13135                           ;mcc_generated_files/i2c1_driver.c: 55:         SSP1STAT = 0x00;
 13136                           
 13137                           ;incstack = 0
 13138                           ; Regs used in _mssp1_clearIRQ: []
 13139  0999  0020               	movlb	0	; select bank0
 13140  099A  1191               	bcf	17,3	;volatile
 13141  099B  0008               	return
 13142  099C                     __end_of_mssp1_clearIRQ:	
 13143                           
 13144                           	psect	text68
 13145  0E82                     __ptext68:	
 13146 ;; *************** function _do_I2C_RX *****************
 13147 ;; Defined at:
 13148 ;;		line 357 in file "mcc_generated_files/drivers/i2c_master.c"
 13149 ;; Parameters:    Size  Location     Type
 13150 ;;		None
 13151 ;; Auto vars:     Size  Location     Type
 13152 ;;		None
 13153 ;; Return value:  Size  Location     Type
 13154 ;;                  1    wreg      enum E7120
 13155 ;; Registers used:
 13156 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13157 ;; Tracked objects:
 13158 ;;		On entry : 0/0
 13159 ;;		On exit  : 0/0
 13160 ;;		Unchanged: 0/0
 13161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13162 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13163 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13164 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13165 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13166 ;;Total ram usage:        3 bytes
 13167 ;; Hardware stack levels used:    1
 13168 ;; Hardware stack levels required when called:    2
 13169 ;; This function calls:
 13170 ;;		_do_I2C_DO_NACK_RESTART
 13171 ;;		_do_I2C_DO_NACK_STOP
 13172 ;;		_i2c1_driver_sendACK
 13173 ;;		_returnReset
 13174 ;;		_returnStop
 13175 ;;		i1_i2c1_driver_getRXData
 13176 ;; This function is called by:
 13177 ;;		_i2c_ISR
 13178 ;; This function uses a non-reentrant model
 13179 ;;
 13180                           
 13181                           
 13182                           ;psect for function _do_I2C_RX
 13183  0E82                     _do_I2C_RX:	
 13184                           
 13185                           ;mcc_generated_files/drivers/i2c_master.c: 359:     *i2c_status.data_ptr++ = i2c1_driver
      +                          _getRXData();
 13186                           
 13187                           ;incstack = 0
 13188                           ; Regs used in _do_I2C_RX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13189  0E82  3189  2193  318E   	fcall	i1_i2c1_driver_getRXData
 13190  0E85  00F0               	movwf	??_do_I2C_RX
 13191  0E86  0023               	movlb	3	; select bank3
 13192  0E87  0822               	movf	(low ((_i2c_status| (0+256)+2)))^(0+128),w
 13193  0E88  0086               	movwf	6
 13194  0E89  0187               	clrf	7
 13195  0E8A  0870               	movf	??_do_I2C_RX,w
 13196  0E8B  0081               	movwf	1
 13197  0E8C  3001               	movlw	1
 13198  0E8D  00F0               	movwf	??_do_I2C_RX
 13199  0E8E  0870               	movf	??_do_I2C_RX,w
 13200  0E8F  07A2               	addwf	(low ((_i2c_status| (0+256)+2)))^(0+128),f
 13201                           
 13202                           ;mcc_generated_files/drivers/i2c_master.c: 360:     if(--i2c_status.data_length)
 13203  0E90  3001               	movlw	1
 13204  0E91  02A3               	subwf	(_i2c_status^(0+384)+3),f
 13205  0E92  3000               	movlw	0
 13206  0E93  3BA4               	subwfb	((_i2c_status+1)^(0+384)+3),f
 13207  0E94  0823               	movf	(_i2c_status^(0+384)+3),w
 13208  0E95  0424               	iorwf	((_i2c_status+1)^(0+384)+3),w
 13209  0E96  1903               	btfsc	3,2
 13210  0E97  2E9C               	goto	i1l173
 13211                           
 13212                           ;mcc_generated_files/drivers/i2c_master.c: 361:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 362:         i2c1_driver_sendACK();
 13213  0E98  3189  21C0         	fcall	_i2c1_driver_sendACK
 13214                           
 13215                           ;mcc_generated_files/drivers/i2c_master.c: 363:         return I2C_RCEN;
 13216  0E9A  3005               	movlw	5
 13217  0E9B  0008               	return
 13218  0E9C                     i1l173:	
 13219                           ;mcc_generated_files/drivers/i2c_master.c: 365:     else
 13220                           
 13221                           
 13222                           ;mcc_generated_files/drivers/i2c_master.c: 366:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 367:         i2c_status.bufferFree = 1;
 13223  0E9C  1520               	bsf	_i2c_status^(0+384),2
 13224                           
 13225                           ;mcc_generated_files/drivers/i2c_master.c: 368:         switch(i2c_status.callbackTable[
      +                          i2c_dataComplete](i2c_status.callbackPayload[i2c_dataComplete]))
 13226  0E9D  2EA4               	goto	i1l4560
 13227  0E9E                     i1l4550:	
 13228                           
 13229                           ;mcc_generated_files/drivers/i2c_master.c: 372:                 return do_I2C_DO_NACK_RE
      +                          START();
 13230  0E9E  3189  21E0         	fcall	_do_I2C_DO_NACK_RESTART
 13231  0EA0  0008               	return
 13232  0EA1                     i1l4554:	
 13233                           
 13234                           ;mcc_generated_files/drivers/i2c_master.c: 376:                 return do_I2C_DO_NACK_ST
      +                          OP();
 13235  0EA1  3189  21DC         	fcall	_do_I2C_DO_NACK_STOP
 13236  0EA3  0008               	return
 13237  0EA4                     i1l4560:	
 13238  0EA4  0837               	movf	(low ((_i2c_status| (0+256)+23)))^(0+128),w
 13239  0EA5  00F0               	movwf	??_do_I2C_RX
 13240  0EA6  0870               	movf	??_do_I2C_RX,w
 13241  0EA7  00F0               	movwf	returnReset@p
 13242  0EA8  300B               	movlw	11
 13243  0EA9  3EA0               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 13244  0EAA  0086               	movwf	6
 13245  0EAB  3001               	movlw	1	; select bank3/4
 13246  0EAC  0087               	movwf	7
 13247  0EAD  3F41               	moviw [1]fsr1
 13248  0EAE  008A               	movwf	10
 13249  0EAF  3F40               	moviw [0]fsr1
 13250  0EB0  000A               	callw
 13251  0EB1  318E               	pagesel	$
 13252  0EB2  00F1               	movwf	??_do_I2C_RX+1
 13253  0EB3  01F2               	clrf	??_do_I2C_RX+2
 13254                           
 13255                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13256                           ; Switch size 1, requested type "simple"
 13257                           ; Number of cases is 1, Range of values is 0 to 0
 13258                           ; switch strategies available:
 13259                           ; Name         Instructions Cycles
 13260                           ; simple_byte            4     3 (average)
 13261                           ; direct_byte            8     6 (fixed)
 13262                           ; jumptable            260     6 (fixed)
 13263                           ;	Chosen strategy is simple_byte
 13264  0EB4  0872               	movf	??_do_I2C_RX+2,w
 13265  0EB5  3A00               	xorlw	0	; case 0
 13266  0EB6  1903               	skipnz
 13267  0EB7  2EB9               	goto	i1l7222
 13268  0EB8  2EA1               	goto	i1l4554
 13269  0EB9                     i1l7222:	
 13270                           
 13271                           ; Switch size 1, requested type "simple"
 13272                           ; Number of cases is 4, Range of values is 1 to 4
 13273                           ; switch strategies available:
 13274                           ; Name         Instructions Cycles
 13275                           ; simple_byte           13     7 (average)
 13276                           ; direct_byte           17     9 (fixed)
 13277                           ; jumptable            263     9 (fixed)
 13278                           ;	Chosen strategy is simple_byte
 13279  0EB9  0871               	movf	??_do_I2C_RX+1,w
 13280  0EBA  3A01               	xorlw	1	; case 1
 13281  0EBB  1903               	skipnz
 13282  0EBC  2EA1               	goto	i1l4554
 13283  0EBD  3A03               	xorlw	3	; case 2
 13284  0EBE  1903               	skipnz
 13285  0EBF  2E9E               	goto	i1l4550
 13286  0EC0  3A01               	xorlw	1	; case 3
 13287  0EC1  1903               	skipnz
 13288  0EC2  2E9E               	goto	i1l4550
 13289  0EC3  3A07               	xorlw	7	; case 4
 13290  0EC4  1903               	skipnz
 13291  0EC5  2EA1               	goto	i1l4554
 13292  0EC6  2EA1               	goto	i1l4554
 13293  0EC7  0008               	return
 13294  0EC8                     __end_of_do_I2C_RX:	
 13295                           
 13296                           	psect	text69
 13297  0F12                     __ptext69:	
 13298 ;; *************** function _do_I2C_TX *****************
 13299 ;; Defined at:
 13300 ;;		line 333 in file "mcc_generated_files/drivers/i2c_master.c"
 13301 ;; Parameters:    Size  Location     Type
 13302 ;;		None
 13303 ;; Auto vars:     Size  Location     Type
 13304 ;;		None
 13305 ;; Return value:  Size  Location     Type
 13306 ;;                  1    wreg      enum E7120
 13307 ;; Registers used:
 13308 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13309 ;; Tracked objects:
 13310 ;;		On entry : 0/0
 13311 ;;		On exit  : 0/0
 13312 ;;		Unchanged: 0/0
 13313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13314 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13315 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13316 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13317 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13318 ;;Total ram usage:        3 bytes
 13319 ;; Hardware stack levels used:    1
 13320 ;; Hardware stack levels required when called:    2
 13321 ;; This function calls:
 13322 ;;		_do_I2C_SEND_RESTART_READ
 13323 ;;		_do_I2C_SEND_RESTART_WRITE
 13324 ;;		_do_I2C_SEND_STOP
 13325 ;;		_i2c1_driver_isNACK
 13326 ;;		_returnReset
 13327 ;;		_returnStop
 13328 ;;		i1_i2c1_driver_TXData
 13329 ;; This function is called by:
 13330 ;;		_i2c_ISR
 13331 ;; This function uses a non-reentrant model
 13332 ;;
 13333                           
 13334                           
 13335                           ;psect for function _do_I2C_TX
 13336  0F12                     _do_I2C_TX:	
 13337                           
 13338                           ;mcc_generated_files/drivers/i2c_master.c: 335:     if(i2c1_driver_isNACK())
 13339                           
 13340                           ;incstack = 0
 13341                           ; Regs used in _do_I2C_TX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13342  0F12  318A  222E  318F   	fcall	_i2c1_driver_isNACK
 13343  0F15  1803               	btfsc	3,0
 13344  0F16  2F21               	goto	i1l4520
 13345  0F17  2F45               	goto	i1l157
 13346  0F18                     i1l4506:	
 13347                           
 13348                           ;mcc_generated_files/drivers/i2c_master.c: 340:                 return do_I2C_SEND_RESTA
      +                          RT_READ();
 13349  0F18  3189  21C8         	fcall	_do_I2C_SEND_RESTART_READ
 13350  0F1A  0008               	return
 13351  0F1B                     i1l4510:	
 13352                           
 13353                           ;mcc_generated_files/drivers/i2c_master.c: 342:                 return do_I2C_SEND_RESTA
      +                          RT_WRITE();
 13354  0F1B  3189  21CC         	fcall	_do_I2C_SEND_RESTART_WRITE
 13355  0F1D  0008               	return
 13356  0F1E                     i1l4514:	
 13357                           
 13358                           ;mcc_generated_files/drivers/i2c_master.c: 346:                 return do_I2C_SEND_STOP(
      +                          );
 13359  0F1E  3189  21D4         	fcall	_do_I2C_SEND_STOP
 13360  0F20  0008               	return
 13361  0F21                     i1l4520:	
 13362  0F21  0023               	movlb	3	; select bank3
 13363  0F22  083A               	movf	(low ((_i2c_status| (0+256)+26)))^(0+128),w
 13364  0F23  00F0               	movwf	??_do_I2C_TX
 13365  0F24  0870               	movf	??_do_I2C_TX,w
 13366  0F25  00F0               	movwf	returnReset@p
 13367  0F26  3011               	movlw	17
 13368  0F27  3EA0               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 13369  0F28  0086               	movwf	6
 13370  0F29  3001               	movlw	1	; select bank3/4
 13371  0F2A  0087               	movwf	7
 13372  0F2B  3F41               	moviw [1]fsr1
 13373  0F2C  008A               	movwf	10
 13374  0F2D  3F40               	moviw [0]fsr1
 13375  0F2E  000A               	callw
 13376  0F2F  318F               	pagesel	$
 13377  0F30  00F1               	movwf	??_do_I2C_TX+1
 13378  0F31  01F2               	clrf	??_do_I2C_TX+2
 13379                           
 13380                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13381                           ; Switch size 1, requested type "simple"
 13382                           ; Number of cases is 1, Range of values is 0 to 0
 13383                           ; switch strategies available:
 13384                           ; Name         Instructions Cycles
 13385                           ; simple_byte            4     3 (average)
 13386                           ; direct_byte            8     6 (fixed)
 13387                           ; jumptable            260     6 (fixed)
 13388                           ;	Chosen strategy is simple_byte
 13389  0F32  0872               	movf	??_do_I2C_TX+2,w
 13390  0F33  3A00               	xorlw	0	; case 0
 13391  0F34  1903               	skipnz
 13392  0F35  2F37               	goto	i1l7224
 13393  0F36  2F1E               	goto	i1l4514
 13394  0F37                     i1l7224:	
 13395                           
 13396                           ; Switch size 1, requested type "simple"
 13397                           ; Number of cases is 4, Range of values is 1 to 4
 13398                           ; switch strategies available:
 13399                           ; Name         Instructions Cycles
 13400                           ; simple_byte           13     7 (average)
 13401                           ; direct_byte           17     9 (fixed)
 13402                           ; jumptable            263     9 (fixed)
 13403                           ;	Chosen strategy is simple_byte
 13404  0F37  0871               	movf	??_do_I2C_TX+1,w
 13405  0F38  3A01               	xorlw	1	; case 1
 13406  0F39  1903               	skipnz
 13407  0F3A  2F1E               	goto	i1l4514
 13408  0F3B  3A03               	xorlw	3	; case 2
 13409  0F3C  1903               	skipnz
 13410  0F3D  2F18               	goto	i1l4506
 13411  0F3E  3A01               	xorlw	1	; case 3
 13412  0F3F  1903               	skipnz
 13413  0F40  2F1B               	goto	i1l4510
 13414  0F41  3A07               	xorlw	7	; case 4
 13415  0F42  1903               	skipnz
 13416  0F43  2F1E               	goto	i1l4514
 13417  0F44  2F1E               	goto	i1l4514
 13418  0F45                     i1l157:	
 13419                           ;mcc_generated_files/drivers/i2c_master.c: 349:     else
 13420                           
 13421                           
 13422                           ;mcc_generated_files/drivers/i2c_master.c: 350:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 351:         i2c_status.addressNACKCheck = 0;
 13423  0F45  0023               	movlb	3	; select bank3
 13424  0F46  11A0               	bcf	_i2c_status^(0+384),3
 13425                           
 13426                           ;mcc_generated_files/drivers/i2c_master.c: 352:         i2c1_driver_TXData(*i2c_status.d
      +                          ata_ptr++);
 13427  0F47  3002               	movlw	2
 13428  0F48  3EA0               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 13429  0F49  0086               	movwf	6
 13430  0F4A  3001               	movlw	1	; select bank3/4
 13431  0F4B  0087               	movwf	7
 13432  0F4C  3F40               	moviw [0]fsr1
 13433  0F4D  0084               	movwf	4
 13434  0F4E  0185               	clrf	5
 13435  0F4F  0A81               	incf	1,f
 13436  0F50  0800               	movf	0,w
 13437  0F51  3189  21F0  318F   	fcall	i1_i2c1_driver_TXData
 13438                           
 13439                           ;mcc_generated_files/drivers/i2c_master.c: 353:         return (--i2c_status.data_length
      +                          )?I2C_TX:I2C_TX_EMPTY;
 13440  0F54  3001               	movlw	1
 13441  0F55  0023               	movlb	3	; select bank3
 13442  0F56  02A3               	subwf	(_i2c_status^(0+384)+3),f
 13443  0F57  3000               	movlw	0
 13444  0F58  3BA4               	subwfb	((_i2c_status+1)^(0+384)+3),f
 13445  0F59  0823               	movf	(_i2c_status^(0+384)+3),w
 13446  0F5A  0424               	iorwf	((_i2c_status+1)^(0+384)+3),w
 13447  0F5B  1D03               	btfss	3,2
 13448  0F5C  2F5F               	goto	i1l4528
 13449  0F5D  3006               	movlw	6
 13450  0F5E  0008               	return
 13451  0F5F                     i1l4528:	
 13452  0F5F  3003               	movlw	3
 13453  0F60  0008               	return
 13454  0F61                     __end_of_do_I2C_TX:	
 13455                           
 13456                           	psect	text70
 13457  0D04                     __ptext70:	
 13458 ;; *************** function _do_I2C_DO_ADDRESS_NACK *****************
 13459 ;; Defined at:
 13460 ;;		line 319 in file "mcc_generated_files/drivers/i2c_master.c"
 13461 ;; Parameters:    Size  Location     Type
 13462 ;;		None
 13463 ;; Auto vars:     Size  Location     Type
 13464 ;;		None
 13465 ;; Return value:  Size  Location     Type
 13466 ;;                  1    wreg      enum E7120
 13467 ;; Registers used:
 13468 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13469 ;; Tracked objects:
 13470 ;;		On entry : 0/0
 13471 ;;		On exit  : 0/0
 13472 ;;		Unchanged: 0/0
 13473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13474 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13475 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13476 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13477 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13478 ;;Total ram usage:        3 bytes
 13479 ;; Hardware stack levels used:    1
 13480 ;; Hardware stack levels required when called:    2
 13481 ;; This function calls:
 13482 ;;		_do_I2C_SEND_RESTART
 13483 ;;		_do_I2C_SEND_STOP
 13484 ;;		_returnReset
 13485 ;;		_returnStop
 13486 ;; This function is called by:
 13487 ;;		_i2c_ISR
 13488 ;; This function uses a non-reentrant model
 13489 ;;
 13490                           
 13491                           
 13492                           ;psect for function _do_I2C_DO_ADDRESS_NACK
 13493  0D04                     _do_I2C_DO_ADDRESS_NACK:	
 13494                           
 13495                           ;mcc_generated_files/drivers/i2c_master.c: 321:     i2c_status.addressNACKCheck = 0;
 13496                           
 13497                           ;incstack = 0
 13498                           ; Regs used in _do_I2C_DO_ADDRESS_NACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13499  0D04  0023               	movlb	3	; select bank3
 13500  0D05  11A0               	bcf	_i2c_status^(0+384),3
 13501                           
 13502                           ;mcc_generated_files/drivers/i2c_master.c: 322:     i2c_status.error = I2C_FAIL;
 13503  0D06  3002               	movlw	2
 13504  0D07  00F0               	movwf	??_do_I2C_DO_ADDRESS_NACK
 13505  0D08  0870               	movf	??_do_I2C_DO_ADDRESS_NACK,w
 13506  0D09  00AA               	movwf	(_i2c_status^(0+384)+10)
 13507                           
 13508                           ;mcc_generated_files/drivers/i2c_master.c: 323:     switch(i2c_status.callbackTable[i2c_
      +                          addressNACK](i2c_status.callbackPayload[i2c_addressNACK]))
 13509  0D0A  2D11               	goto	i1l4494
 13510  0D0B                     i1l4484:	
 13511                           
 13512                           ;mcc_generated_files/drivers/i2c_master.c: 327:             return do_I2C_SEND_RESTART()
      +                          ;
 13513  0D0B  3189  21D0         	fcall	_do_I2C_SEND_RESTART
 13514  0D0D  0008               	return
 13515  0D0E                     i1l4488:	
 13516                           
 13517                           ;mcc_generated_files/drivers/i2c_master.c: 329:             return do_I2C_SEND_STOP();
 13518  0D0E  3189  21D4         	fcall	_do_I2C_SEND_STOP
 13519  0D10  0008               	return
 13520  0D11                     i1l4494:	
 13521  0D11  0839               	movf	(low ((_i2c_status| (0+256)+25)))^(0+128),w
 13522  0D12  00F0               	movwf	??_do_I2C_DO_ADDRESS_NACK
 13523  0D13  0870               	movf	??_do_I2C_DO_ADDRESS_NACK,w
 13524  0D14  00F0               	movwf	returnReset@p
 13525  0D15  300F               	movlw	15
 13526  0D16  3EA0               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 13527  0D17  0086               	movwf	6
 13528  0D18  3001               	movlw	1	; select bank3/4
 13529  0D19  0087               	movwf	7
 13530  0D1A  3F41               	moviw [1]fsr1
 13531  0D1B  008A               	movwf	10
 13532  0D1C  3F40               	moviw [0]fsr1
 13533  0D1D  000A               	callw
 13534  0D1E  318D               	pagesel	$
 13535  0D1F  00F1               	movwf	??_do_I2C_DO_ADDRESS_NACK+1
 13536  0D20  01F2               	clrf	??_do_I2C_DO_ADDRESS_NACK+2
 13537                           
 13538                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13539                           ; Switch size 1, requested type "simple"
 13540                           ; Number of cases is 1, Range of values is 0 to 0
 13541                           ; switch strategies available:
 13542                           ; Name         Instructions Cycles
 13543                           ; simple_byte            4     3 (average)
 13544                           ; direct_byte            8     6 (fixed)
 13545                           ; jumptable            260     6 (fixed)
 13546                           ;	Chosen strategy is simple_byte
 13547  0D21  0872               	movf	??_do_I2C_DO_ADDRESS_NACK+2,w
 13548  0D22  3A00               	xorlw	0	; case 0
 13549  0D23  1903               	skipnz
 13550  0D24  2D26               	goto	i1l7226
 13551  0D25  2D0E               	goto	i1l4488
 13552  0D26                     i1l7226:	
 13553                           
 13554                           ; Switch size 1, requested type "simple"
 13555                           ; Number of cases is 2, Range of values is 2 to 3
 13556                           ; switch strategies available:
 13557                           ; Name         Instructions Cycles
 13558                           ; simple_byte            7     4 (average)
 13559                           ; direct_byte           13     9 (fixed)
 13560                           ; jumptable            263     9 (fixed)
 13561                           ;	Chosen strategy is simple_byte
 13562  0D26  0871               	movf	??_do_I2C_DO_ADDRESS_NACK+1,w
 13563  0D27  3A02               	xorlw	2	; case 2
 13564  0D28  1903               	skipnz
 13565  0D29  2D0B               	goto	i1l4484
 13566  0D2A  3A01               	xorlw	1	; case 3
 13567  0D2B  1903               	skipnz
 13568  0D2C  2D0B               	goto	i1l4484
 13569  0D2D  2D0E               	goto	i1l4488
 13570  0D2E  0008               	return
 13571  0D2F                     __end_of_do_I2C_DO_ADDRESS_NACK:	
 13572                           
 13573                           	psect	text71
 13574  09E0                     __ptext71:	
 13575 ;; *************** function _do_I2C_DO_NACK_RESTART *****************
 13576 ;; Defined at:
 13577 ;;		line 311 in file "mcc_generated_files/drivers/i2c_master.c"
 13578 ;; Parameters:    Size  Location     Type
 13579 ;;		None
 13580 ;; Auto vars:     Size  Location     Type
 13581 ;;		None
 13582 ;; Return value:  Size  Location     Type
 13583 ;;                  1    wreg      enum E7120
 13584 ;; Registers used:
 13585 ;;		wreg, status,2, status,0, pclath, cstack
 13586 ;; Tracked objects:
 13587 ;;		On entry : 0/0
 13588 ;;		On exit  : 0/0
 13589 ;;		Unchanged: 0/0
 13590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13591 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13592 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13593 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13594 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13595 ;;Total ram usage:        0 bytes
 13596 ;; Hardware stack levels used:    1
 13597 ;; Hardware stack levels required when called:    1
 13598 ;; This function calls:
 13599 ;;		i1_i2c1_driver_sendNACK
 13600 ;; This function is called by:
 13601 ;;		_do_I2C_RX
 13602 ;;		_i2c_ISR
 13603 ;; This function uses a non-reentrant model
 13604 ;;
 13605                           
 13606                           
 13607                           ;psect for function _do_I2C_DO_NACK_RESTART
 13608  09E0                     _do_I2C_DO_NACK_RESTART:	
 13609                           
 13610                           ;mcc_generated_files/drivers/i2c_master.c: 313:     i2c1_driver_sendNACK();
 13611                           
 13612                           ;incstack = 0
 13613                           ; Regs used in _do_I2C_DO_NACK_RESTART: [wreg+status,2+status,0+pclath+cstack]
 13614  09E0  3189  21C4         	fcall	i1_i2c1_driver_sendNACK
 13615                           
 13616                           ;mcc_generated_files/drivers/i2c_master.c: 314:     return I2C_SEND_RESTART;
 13617  09E2  3009               	movlw	9
 13618  09E3  0008               	return
 13619  09E4                     __end_of_do_I2C_DO_NACK_RESTART:	
 13620                           
 13621                           	psect	text72
 13622  09DC                     __ptext72:	
 13623 ;; *************** function _do_I2C_DO_NACK_STOP *****************
 13624 ;; Defined at:
 13625 ;;		line 305 in file "mcc_generated_files/drivers/i2c_master.c"
 13626 ;; Parameters:    Size  Location     Type
 13627 ;;		None
 13628 ;; Auto vars:     Size  Location     Type
 13629 ;;		None
 13630 ;; Return value:  Size  Location     Type
 13631 ;;                  1    wreg      enum E7120
 13632 ;; Registers used:
 13633 ;;		wreg, status,2, status,0, pclath, cstack
 13634 ;; Tracked objects:
 13635 ;;		On entry : 0/0
 13636 ;;		On exit  : 0/0
 13637 ;;		Unchanged: 0/0
 13638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13639 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13640 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13641 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13642 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13643 ;;Total ram usage:        0 bytes
 13644 ;; Hardware stack levels used:    1
 13645 ;; Hardware stack levels required when called:    1
 13646 ;; This function calls:
 13647 ;;		i1_i2c1_driver_sendNACK
 13648 ;; This function is called by:
 13649 ;;		_do_I2C_RX
 13650 ;;		_i2c_ISR
 13651 ;; This function uses a non-reentrant model
 13652 ;;
 13653                           
 13654                           
 13655                           ;psect for function _do_I2C_DO_NACK_STOP
 13656  09DC                     _do_I2C_DO_NACK_STOP:	
 13657                           
 13658                           ;mcc_generated_files/drivers/i2c_master.c: 307:     i2c1_driver_sendNACK();
 13659                           
 13660                           ;incstack = 0
 13661                           ; Regs used in _do_I2C_DO_NACK_STOP: [wreg+status,2+status,0+pclath+cstack]
 13662  09DC  3189  21C4         	fcall	i1_i2c1_driver_sendNACK
 13663                           
 13664                           ;mcc_generated_files/drivers/i2c_master.c: 308:     return I2C_SEND_STOP;
 13665  09DE  300A               	movlw	10
 13666  09DF  0008               	return
 13667  09E0                     __end_of_do_I2C_DO_NACK_STOP:	
 13668                           
 13669                           	psect	text73
 13670  09D8                     __ptext73:	
 13671 ;; *************** function _do_I2C_DO_ACK *****************
 13672 ;; Defined at:
 13673 ;;		line 299 in file "mcc_generated_files/drivers/i2c_master.c"
 13674 ;; Parameters:    Size  Location     Type
 13675 ;;		None
 13676 ;; Auto vars:     Size  Location     Type
 13677 ;;		None
 13678 ;; Return value:  Size  Location     Type
 13679 ;;                  1    wreg      enum E7120
 13680 ;; Registers used:
 13681 ;;		wreg, status,2, status,0, pclath, cstack
 13682 ;; Tracked objects:
 13683 ;;		On entry : 0/0
 13684 ;;		On exit  : 0/0
 13685 ;;		Unchanged: 0/0
 13686 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13688 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13689 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13690 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13691 ;;Total ram usage:        0 bytes
 13692 ;; Hardware stack levels used:    1
 13693 ;; Hardware stack levels required when called:    1
 13694 ;; This function calls:
 13695 ;;		_i2c1_driver_sendACK
 13696 ;; This function is called by:
 13697 ;;		_i2c_ISR
 13698 ;; This function uses a non-reentrant model
 13699 ;;
 13700                           
 13701                           
 13702                           ;psect for function _do_I2C_DO_ACK
 13703  09D8                     _do_I2C_DO_ACK:	
 13704                           
 13705                           ;mcc_generated_files/drivers/i2c_master.c: 301:     i2c1_driver_sendACK();
 13706                           
 13707                           ;incstack = 0
 13708                           ; Regs used in _do_I2C_DO_ACK: [wreg+status,2+status,0+pclath+cstack]
 13709  09D8  3189  21C0         	fcall	_i2c1_driver_sendACK
 13710                           
 13711                           ;mcc_generated_files/drivers/i2c_master.c: 302:     return I2C_RCEN;
 13712  09DA  3005               	movlw	5
 13713  09DB  0008               	return
 13714  09DC                     __end_of_do_I2C_DO_ACK:	
 13715                           
 13716                           	psect	text74
 13717  09FA                     __ptext74:	
 13718 ;; *************** function _do_I2C_RCEN *****************
 13719 ;; Defined at:
 13720 ;;		line 292 in file "mcc_generated_files/drivers/i2c_master.c"
 13721 ;; Parameters:    Size  Location     Type
 13722 ;;		None
 13723 ;; Auto vars:     Size  Location     Type
 13724 ;;		None
 13725 ;; Return value:  Size  Location     Type
 13726 ;;                  1    wreg      enum E7120
 13727 ;; Registers used:
 13728 ;;		wreg, status,2, status,0, pclath, cstack
 13729 ;; Tracked objects:
 13730 ;;		On entry : 0/0
 13731 ;;		On exit  : 0/0
 13732 ;;		Unchanged: 0/0
 13733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13735 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13736 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13737 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13738 ;;Total ram usage:        0 bytes
 13739 ;; Hardware stack levels used:    1
 13740 ;; Hardware stack levels required when called:    1
 13741 ;; This function calls:
 13742 ;;		i1_i2c1_driver_startRX
 13743 ;; This function is called by:
 13744 ;;		_i2c_ISR
 13745 ;; This function uses a non-reentrant model
 13746 ;;
 13747                           
 13748                           
 13749                           ;psect for function _do_I2C_RCEN
 13750  09FA                     _do_I2C_RCEN:	
 13751                           
 13752                           ;mcc_generated_files/drivers/i2c_master.c: 294:     i2c_status.addressNACKCheck = 0;
 13753                           
 13754                           ;incstack = 0
 13755                           ; Regs used in _do_I2C_RCEN: [wreg+status,2+status,0+pclath+cstack]
 13756  09FA  0023               	movlb	3	; select bank3
 13757  09FB  11A0               	bcf	_i2c_status^(0+384),3
 13758                           
 13759                           ;mcc_generated_files/drivers/i2c_master.c: 295:     i2c1_driver_startRX();
 13760  09FC  3189  2190         	fcall	i1_i2c1_driver_startRX
 13761                           
 13762                           ;mcc_generated_files/drivers/i2c_master.c: 296:     return I2C_RX;
 13763  09FE  3004               	movlw	4
 13764  09FF  0008               	return
 13765  0A00                     __end_of_do_I2C_RCEN:	
 13766                           
 13767                           	psect	text75
 13768  0A19                     __ptext75:	
 13769 ;; *************** function _do_I2C_SEND_ADR_WRITE *****************
 13770 ;; Defined at:
 13771 ;;		line 285 in file "mcc_generated_files/drivers/i2c_master.c"
 13772 ;; Parameters:    Size  Location     Type
 13773 ;;		None
 13774 ;; Auto vars:     Size  Location     Type
 13775 ;;		None
 13776 ;; Return value:  Size  Location     Type
 13777 ;;                  1    wreg      enum E7120
 13778 ;; Registers used:
 13779 ;;		wreg, status,2, status,0, pclath, cstack
 13780 ;; Tracked objects:
 13781 ;;		On entry : 0/0
 13782 ;;		On exit  : 0/0
 13783 ;;		Unchanged: 0/0
 13784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13785 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13786 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13787 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13788 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13789 ;;Total ram usage:        0 bytes
 13790 ;; Hardware stack levels used:    1
 13791 ;; Hardware stack levels required when called:    1
 13792 ;; This function calls:
 13793 ;;		i1_i2c1_driver_TXData
 13794 ;; This function is called by:
 13795 ;;		_i2c_ISR
 13796 ;; This function uses a non-reentrant model
 13797 ;;
 13798                           
 13799                           
 13800                           ;psect for function _do_I2C_SEND_ADR_WRITE
 13801  0A19                     _do_I2C_SEND_ADR_WRITE:	
 13802                           
 13803                           ;mcc_generated_files/drivers/i2c_master.c: 287:     i2c_status.addressNACKCheck = 1;
 13804                           
 13805                           ;incstack = 0
 13806                           ; Regs used in _do_I2C_SEND_ADR_WRITE: [wreg+status,2+status,0+pclath+cstack]
 13807  0A19  0023               	movlb	3	; select bank3
 13808  0A1A  15A0               	bsf	_i2c_status^(0+384),3
 13809                           
 13810                           ;mcc_generated_files/drivers/i2c_master.c: 288:     i2c1_driver_TXData(i2c_status.addres
      +                          s << 1);
 13811  0A1B  3521               	lslf	(_i2c_status^(0+384)+1),w
 13812  0A1C  3189  21F0         	fcall	i1_i2c1_driver_TXData
 13813                           
 13814                           ;mcc_generated_files/drivers/i2c_master.c: 289:     return I2C_TX;
 13815  0A1E  3003               	movlw	3
 13816  0A1F  0008               	return
 13817  0A20                     __end_of_do_I2C_SEND_ADR_WRITE:	
 13818                           
 13819                           	psect	text76
 13820  0A36                     __ptext76:	
 13821 ;; *************** function _do_I2C_SEND_ADR_READ *****************
 13822 ;; Defined at:
 13823 ;;		line 278 in file "mcc_generated_files/drivers/i2c_master.c"
 13824 ;; Parameters:    Size  Location     Type
 13825 ;;		None
 13826 ;; Auto vars:     Size  Location     Type
 13827 ;;		None
 13828 ;; Return value:  Size  Location     Type
 13829 ;;                  1    wreg      enum E7120
 13830 ;; Registers used:
 13831 ;;		wreg, status,2, status,0, pclath, cstack
 13832 ;; Tracked objects:
 13833 ;;		On entry : 0/0
 13834 ;;		On exit  : 0/0
 13835 ;;		Unchanged: 0/0
 13836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13838 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13839 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13840 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13841 ;;Total ram usage:        0 bytes
 13842 ;; Hardware stack levels used:    1
 13843 ;; Hardware stack levels required when called:    1
 13844 ;; This function calls:
 13845 ;;		i1_i2c1_driver_TXData
 13846 ;; This function is called by:
 13847 ;;		_i2c_ISR
 13848 ;; This function uses a non-reentrant model
 13849 ;;
 13850                           
 13851                           
 13852                           ;psect for function _do_I2C_SEND_ADR_READ
 13853  0A36                     _do_I2C_SEND_ADR_READ:	
 13854                           
 13855                           ;mcc_generated_files/drivers/i2c_master.c: 280:     i2c_status.addressNACKCheck = 1;
 13856                           
 13857                           ;incstack = 0
 13858                           ; Regs used in _do_I2C_SEND_ADR_READ: [wreg+status,2+status,0+pclath+cstack]
 13859  0A36  0023               	movlb	3	; select bank3
 13860  0A37  15A0               	bsf	_i2c_status^(0+384),3
 13861                           
 13862                           ;mcc_generated_files/drivers/i2c_master.c: 281:     i2c1_driver_TXData(i2c_status.addres
      +                          s << 1 | 1);
 13863  0A38  1403               	setc
 13864  0A39  0D21               	rlf	(_i2c_status^(0+384)+1),w
 13865  0A3A  3189  21F0         	fcall	i1_i2c1_driver_TXData
 13866                           
 13867                           ;mcc_generated_files/drivers/i2c_master.c: 282:     return I2C_RCEN;
 13868  0A3C  3005               	movlw	5
 13869  0A3D  0008               	return
 13870  0A3E                     __end_of_do_I2C_SEND_ADR_READ:	
 13871                           
 13872                           	psect	text77
 13873  09D4                     __ptext77:	
 13874 ;; *************** function _do_I2C_SEND_STOP *****************
 13875 ;; Defined at:
 13876 ;;		line 272 in file "mcc_generated_files/drivers/i2c_master.c"
 13877 ;; Parameters:    Size  Location     Type
 13878 ;;		None
 13879 ;; Auto vars:     Size  Location     Type
 13880 ;;		None
 13881 ;; Return value:  Size  Location     Type
 13882 ;;                  1    wreg      enum E7120
 13883 ;; Registers used:
 13884 ;;		wreg, status,2, status,0, pclath, cstack
 13885 ;; Tracked objects:
 13886 ;;		On entry : 0/0
 13887 ;;		On exit  : 0/0
 13888 ;;		Unchanged: 0/0
 13889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13890 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13891 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13892 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13893 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13894 ;;Total ram usage:        0 bytes
 13895 ;; Hardware stack levels used:    1
 13896 ;; Hardware stack levels required when called:    1
 13897 ;; This function calls:
 13898 ;;		i1_i2c1_driver_stop
 13899 ;; This function is called by:
 13900 ;;		_do_I2C_DO_ADDRESS_NACK
 13901 ;;		_do_I2C_TX
 13902 ;;		_do_I2C_TX_EMPTY
 13903 ;;		_i2c_ISR
 13904 ;; This function uses a non-reentrant model
 13905 ;;
 13906                           
 13907                           
 13908                           ;psect for function _do_I2C_SEND_STOP
 13909  09D4                     _do_I2C_SEND_STOP:	
 13910                           
 13911                           ;mcc_generated_files/drivers/i2c_master.c: 274:     i2c1_driver_stop();
 13912                           
 13913                           ;incstack = 0
 13914                           ; Regs used in _do_I2C_SEND_STOP: [wreg+status,2+status,0+pclath+cstack]
 13915  09D4  3189  218D         	fcall	i1_i2c1_driver_stop
 13916                           
 13917                           ;mcc_generated_files/drivers/i2c_master.c: 275:     return I2C_IDLE;
 13918  09D6  3000               	movlw	0
 13919  09D7  0008               	return
 13920  09D8                     __end_of_do_I2C_SEND_STOP:	
 13921                           
 13922                           	psect	text78
 13923  09D0                     __ptext78:	
 13924 ;; *************** function _do_I2C_SEND_RESTART *****************
 13925 ;; Defined at:
 13926 ;;		line 266 in file "mcc_generated_files/drivers/i2c_master.c"
 13927 ;; Parameters:    Size  Location     Type
 13928 ;;		None
 13929 ;; Auto vars:     Size  Location     Type
 13930 ;;		None
 13931 ;; Return value:  Size  Location     Type
 13932 ;;                  1    wreg      enum E7120
 13933 ;; Registers used:
 13934 ;;		wreg, status,2, status,0, pclath, cstack
 13935 ;; Tracked objects:
 13936 ;;		On entry : 0/0
 13937 ;;		On exit  : 0/0
 13938 ;;		Unchanged: 0/0
 13939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13941 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13942 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13943 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13944 ;;Total ram usage:        0 bytes
 13945 ;; Hardware stack levels used:    1
 13946 ;; Hardware stack levels required when called:    1
 13947 ;; This function calls:
 13948 ;;		i1_i2c1_driver_restart
 13949 ;; This function is called by:
 13950 ;;		_do_I2C_DO_ADDRESS_NACK
 13951 ;;		_do_I2C_TX_EMPTY
 13952 ;;		_i2c_ISR
 13953 ;; This function uses a non-reentrant model
 13954 ;;
 13955                           
 13956                           
 13957                           ;psect for function _do_I2C_SEND_RESTART
 13958  09D0                     _do_I2C_SEND_RESTART:	
 13959                           
 13960                           ;mcc_generated_files/drivers/i2c_master.c: 268:     i2c1_driver_restart();
 13961                           
 13962                           ;incstack = 0
 13963                           ; Regs used in _do_I2C_SEND_RESTART: [wreg+status,2+status,0+pclath+cstack]
 13964  09D0  3189  218A         	fcall	i1_i2c1_driver_restart
 13965                           
 13966                           ;mcc_generated_files/drivers/i2c_master.c: 269:     return I2C_SEND_ADR_READ;
 13967  09D2  3001               	movlw	1
 13968  09D3  0008               	return
 13969  09D4                     __end_of_do_I2C_SEND_RESTART:	
 13970                           
 13971                           	psect	text79
 13972  09CC                     __ptext79:	
 13973 ;; *************** function _do_I2C_SEND_RESTART_WRITE *****************
 13974 ;; Defined at:
 13975 ;;		line 260 in file "mcc_generated_files/drivers/i2c_master.c"
 13976 ;; Parameters:    Size  Location     Type
 13977 ;;		None
 13978 ;; Auto vars:     Size  Location     Type
 13979 ;;		None
 13980 ;; Return value:  Size  Location     Type
 13981 ;;                  1    wreg      enum E7120
 13982 ;; Registers used:
 13983 ;;		wreg, status,2, status,0, pclath, cstack
 13984 ;; Tracked objects:
 13985 ;;		On entry : 0/0
 13986 ;;		On exit  : 0/0
 13987 ;;		Unchanged: 0/0
 13988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13989 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13990 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13991 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13992 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13993 ;;Total ram usage:        0 bytes
 13994 ;; Hardware stack levels used:    1
 13995 ;; Hardware stack levels required when called:    1
 13996 ;; This function calls:
 13997 ;;		i1_i2c1_driver_restart
 13998 ;; This function is called by:
 13999 ;;		_do_I2C_TX
 14000 ;;		_i2c_ISR
 14001 ;; This function uses a non-reentrant model
 14002 ;;
 14003                           
 14004                           
 14005                           ;psect for function _do_I2C_SEND_RESTART_WRITE
 14006  09CC                     _do_I2C_SEND_RESTART_WRITE:	
 14007                           
 14008                           ;mcc_generated_files/drivers/i2c_master.c: 262:     i2c1_driver_restart();
 14009                           
 14010                           ;incstack = 0
 14011                           ; Regs used in _do_I2C_SEND_RESTART_WRITE: [wreg+status,2+status,0+pclath+cstack]
 14012  09CC  3189  218A         	fcall	i1_i2c1_driver_restart
 14013                           
 14014                           ;mcc_generated_files/drivers/i2c_master.c: 263:     return I2C_SEND_ADR_WRITE;
 14015  09CE  3002               	movlw	2
 14016  09CF  0008               	return
 14017  09D0                     __end_of_do_I2C_SEND_RESTART_WRITE:	
 14018                           
 14019                           	psect	text80
 14020  09C8                     __ptext80:	
 14021 ;; *************** function _do_I2C_SEND_RESTART_READ *****************
 14022 ;; Defined at:
 14023 ;;		line 254 in file "mcc_generated_files/drivers/i2c_master.c"
 14024 ;; Parameters:    Size  Location     Type
 14025 ;;		None
 14026 ;; Auto vars:     Size  Location     Type
 14027 ;;		None
 14028 ;; Return value:  Size  Location     Type
 14029 ;;                  1    wreg      enum E7120
 14030 ;; Registers used:
 14031 ;;		wreg, status,2, status,0, pclath, cstack
 14032 ;; Tracked objects:
 14033 ;;		On entry : 0/0
 14034 ;;		On exit  : 0/0
 14035 ;;		Unchanged: 0/0
 14036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14037 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14038 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14039 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14040 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14041 ;;Total ram usage:        0 bytes
 14042 ;; Hardware stack levels used:    1
 14043 ;; Hardware stack levels required when called:    1
 14044 ;; This function calls:
 14045 ;;		i1_i2c1_driver_restart
 14046 ;; This function is called by:
 14047 ;;		_do_I2C_TX
 14048 ;;		_i2c_ISR
 14049 ;; This function uses a non-reentrant model
 14050 ;;
 14051                           
 14052                           
 14053                           ;psect for function _do_I2C_SEND_RESTART_READ
 14054  09C8                     _do_I2C_SEND_RESTART_READ:	
 14055                           
 14056                           ;mcc_generated_files/drivers/i2c_master.c: 256:     i2c1_driver_restart();
 14057                           
 14058                           ;incstack = 0
 14059                           ; Regs used in _do_I2C_SEND_RESTART_READ: [wreg+status,2+status,0+pclath+cstack]
 14060  09C8  3189  218A         	fcall	i1_i2c1_driver_restart
 14061                           
 14062                           ;mcc_generated_files/drivers/i2c_master.c: 257:     return I2C_SEND_ADR_READ;
 14063  09CA  3001               	movlw	1
 14064  09CB  0008               	return
 14065  09CC                     __end_of_do_I2C_SEND_RESTART_READ:	
 14066                           
 14067                           	psect	text81
 14068  09F5                     __ptext81:	
 14069 ;; *************** function _do_I2C_IDLE *****************
 14070 ;; Defined at:
 14071 ;;		line 247 in file "mcc_generated_files/drivers/i2c_master.c"
 14072 ;; Parameters:    Size  Location     Type
 14073 ;;		None
 14074 ;; Auto vars:     Size  Location     Type
 14075 ;;		None
 14076 ;; Return value:  Size  Location     Type
 14077 ;;                  1    wreg      enum E7120
 14078 ;; Registers used:
 14079 ;;		wreg, status,2
 14080 ;; Tracked objects:
 14081 ;;		On entry : 0/0
 14082 ;;		On exit  : 0/0
 14083 ;;		Unchanged: 0/0
 14084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14086 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14088 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14089 ;;Total ram usage:        0 bytes
 14090 ;; Hardware stack levels used:    1
 14091 ;; This function calls:
 14092 ;;		Nothing
 14093 ;; This function is called by:
 14094 ;;		_i2c_ISR
 14095 ;; This function uses a non-reentrant model
 14096 ;;
 14097                           
 14098                           
 14099                           ;psect for function _do_I2C_IDLE
 14100  09F5                     _do_I2C_IDLE:	
 14101                           
 14102                           ;mcc_generated_files/drivers/i2c_master.c: 249:     i2c_status.busy = 0;
 14103                           
 14104                           ;incstack = 0
 14105                           ; Regs used in _do_I2C_IDLE: [wreg+status,2]
 14106  09F5  0023               	movlb	3	; select bank3
 14107  09F6  1020               	bcf	_i2c_status^(0+384),0
 14108                           
 14109                           ;mcc_generated_files/drivers/i2c_master.c: 250:     i2c_status.error = I2C_NOERR;
 14110  09F7  01AA               	clrf	(_i2c_status^(0+384)+10)
 14111                           
 14112                           ;mcc_generated_files/drivers/i2c_master.c: 251:     return I2C_RESET;
 14113  09F8  300E               	movlw	14
 14114  09F9  0008               	return
 14115  09FA                     __end_of_do_I2C_IDLE:	
 14116                           
 14117                           	psect	text82
 14118  0A12                     __ptext82:	
 14119 ;; *************** function _do_I2C_RESET *****************
 14120 ;; Defined at:
 14121 ;;		line 239 in file "mcc_generated_files/drivers/i2c_master.c"
 14122 ;; Parameters:    Size  Location     Type
 14123 ;;		None
 14124 ;; Auto vars:     Size  Location     Type
 14125 ;;		None
 14126 ;; Return value:  Size  Location     Type
 14127 ;;                  1    wreg      enum E7120
 14128 ;; Registers used:
 14129 ;;		wreg, status,2, status,0, pclath, cstack
 14130 ;; Tracked objects:
 14131 ;;		On entry : 0/0
 14132 ;;		On exit  : 0/0
 14133 ;;		Unchanged: 0/0
 14134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14135 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14136 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14138 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14139 ;;Total ram usage:        0 bytes
 14140 ;; Hardware stack levels used:    1
 14141 ;; Hardware stack levels required when called:    1
 14142 ;; This function calls:
 14143 ;;		_i2c1_driver_resetBus
 14144 ;; This function is called by:
 14145 ;;		_i2c_ISR
 14146 ;; This function uses a non-reentrant model
 14147 ;;
 14148                           
 14149                           
 14150                           ;psect for function _do_I2C_RESET
 14151  0A12                     _do_I2C_RESET:	
 14152                           
 14153                           ;mcc_generated_files/drivers/i2c_master.c: 241:     i2c1_driver_resetBus();
 14154                           
 14155                           ;incstack = 0
 14156                           ; Regs used in _do_I2C_RESET: [wreg+status,2+status,0+pclath+cstack]
 14157  0A12  3189  2186         	fcall	_i2c1_driver_resetBus
 14158                           
 14159                           ;mcc_generated_files/drivers/i2c_master.c: 242:     i2c_status.busy = 0;
 14160  0A14  0023               	movlb	3	; select bank3
 14161  0A15  1020               	bcf	_i2c_status^(0+384),0
 14162                           
 14163                           ;mcc_generated_files/drivers/i2c_master.c: 243:     i2c_status.error = I2C_NOERR;
 14164  0A16  01AA               	clrf	(_i2c_status^(0+384)+10)
 14165                           
 14166                           ;mcc_generated_files/drivers/i2c_master.c: 244:     return I2C_RESET;
 14167  0A17  300E               	movlw	14
 14168  0A18  0008               	return
 14169  0A19                     __end_of_do_I2C_RESET:	
 14170                           
 14171                           	psect	text83
 14172  0D85                     __ptext83:	
 14173 ;; *************** function _do_I2C_TX_EMPTY *****************
 14174 ;; Defined at:
 14175 ;;		line 382 in file "mcc_generated_files/drivers/i2c_master.c"
 14176 ;; Parameters:    Size  Location     Type
 14177 ;;		None
 14178 ;; Auto vars:     Size  Location     Type
 14179 ;;		None
 14180 ;; Return value:  Size  Location     Type
 14181 ;;                  1    wreg      enum E7120
 14182 ;; Registers used:
 14183 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14184 ;; Tracked objects:
 14185 ;;		On entry : 0/0
 14186 ;;		On exit  : 0/0
 14187 ;;		Unchanged: 0/0
 14188 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14189 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14190 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14191 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14192 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14193 ;;Total ram usage:        3 bytes
 14194 ;; Hardware stack levels used:    1
 14195 ;; Hardware stack levels required when called:    2
 14196 ;; This function calls:
 14197 ;;		_do_I2C_SEND_RESTART
 14198 ;;		_do_I2C_SEND_STOP
 14199 ;;		_mssp1_setIRQ
 14200 ;;		_returnReset
 14201 ;;		_returnStop
 14202 ;; This function is called by:
 14203 ;;		_i2c_ISR
 14204 ;; This function uses a non-reentrant model
 14205 ;;
 14206                           
 14207                           
 14208                           ;psect for function _do_I2C_TX_EMPTY
 14209  0D85                     _do_I2C_TX_EMPTY:	
 14210                           
 14211                           ;mcc_generated_files/drivers/i2c_master.c: 384:     i2c_status.bufferFree = 1;
 14212                           
 14213                           ;incstack = 0
 14214                           ; Regs used in _do_I2C_TX_EMPTY: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14215  0D85  0023               	movlb	3	; select bank3
 14216  0D86  1520               	bsf	_i2c_status^(0+384),2
 14217                           
 14218                           ;mcc_generated_files/drivers/i2c_master.c: 385:     switch(i2c_status.callbackTable[i2c_
      +                          dataComplete](i2c_status.callbackPayload[i2c_dataComplete]))
 14219  0D87  2D92               	goto	i1l4586
 14220  0D88                     i1l4570:	
 14221                           
 14222                           ;mcc_generated_files/drivers/i2c_master.c: 389:             return do_I2C_SEND_RESTART()
      +                          ;
 14223  0D88  3189  21D0         	fcall	_do_I2C_SEND_RESTART
 14224  0D8A  0008               	return
 14225  0D8B                     i1l4574:	
 14226                           
 14227                           ;mcc_generated_files/drivers/i2c_master.c: 391:             mssp1_setIRQ();
 14228  0D8B  3189  2196         	fcall	_mssp1_setIRQ
 14229                           
 14230                           ;mcc_generated_files/drivers/i2c_master.c: 392:             return I2C_TX;
 14231  0D8D  3003               	movlw	3
 14232  0D8E  0008               	return
 14233  0D8F                     i1l4580:	
 14234                           
 14235                           ;mcc_generated_files/drivers/i2c_master.c: 395:             return do_I2C_SEND_STOP();
 14236  0D8F  3189  21D4         	fcall	_do_I2C_SEND_STOP
 14237  0D91  0008               	return
 14238  0D92                     i1l4586:	
 14239  0D92  0837               	movf	(low ((_i2c_status| (0+256)+23)))^(0+128),w
 14240  0D93  00F0               	movwf	??_do_I2C_TX_EMPTY
 14241  0D94  0870               	movf	??_do_I2C_TX_EMPTY,w
 14242  0D95  00F0               	movwf	returnReset@p
 14243  0D96  300B               	movlw	11
 14244  0D97  3EA0               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 14245  0D98  0086               	movwf	6
 14246  0D99  3001               	movlw	1	; select bank3/4
 14247  0D9A  0087               	movwf	7
 14248  0D9B  3F41               	moviw [1]fsr1
 14249  0D9C  008A               	movwf	10
 14250  0D9D  3F40               	moviw [0]fsr1
 14251  0D9E  000A               	callw
 14252  0D9F  318D               	pagesel	$
 14253  0DA0  00F1               	movwf	??_do_I2C_TX_EMPTY+1
 14254  0DA1  01F2               	clrf	??_do_I2C_TX_EMPTY+2
 14255                           
 14256                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14257                           ; Switch size 1, requested type "simple"
 14258                           ; Number of cases is 1, Range of values is 0 to 0
 14259                           ; switch strategies available:
 14260                           ; Name         Instructions Cycles
 14261                           ; simple_byte            4     3 (average)
 14262                           ; direct_byte            8     6 (fixed)
 14263                           ; jumptable            260     6 (fixed)
 14264                           ;	Chosen strategy is simple_byte
 14265  0DA2  0872               	movf	??_do_I2C_TX_EMPTY+2,w
 14266  0DA3  3A00               	xorlw	0	; case 0
 14267  0DA4  1903               	skipnz
 14268  0DA5  2DA7               	goto	i1l7228
 14269  0DA6  2D8F               	goto	i1l4580
 14270  0DA7                     i1l7228:	
 14271                           
 14272                           ; Switch size 1, requested type "simple"
 14273                           ; Number of cases is 4, Range of values is 1 to 4
 14274                           ; switch strategies available:
 14275                           ; Name         Instructions Cycles
 14276                           ; simple_byte           13     7 (average)
 14277                           ; direct_byte           17     9 (fixed)
 14278                           ; jumptable            263     9 (fixed)
 14279                           ;	Chosen strategy is simple_byte
 14280  0DA7  0871               	movf	??_do_I2C_TX_EMPTY+1,w
 14281  0DA8  3A01               	xorlw	1	; case 1
 14282  0DA9  1903               	skipnz
 14283  0DAA  2D8F               	goto	i1l4580
 14284  0DAB  3A03               	xorlw	3	; case 2
 14285  0DAC  1903               	skipnz
 14286  0DAD  2D88               	goto	i1l4570
 14287  0DAE  3A01               	xorlw	1	; case 3
 14288  0DAF  1903               	skipnz
 14289  0DB0  2D88               	goto	i1l4570
 14290  0DB1  3A07               	xorlw	7	; case 4
 14291  0DB2  1903               	skipnz
 14292  0DB3  2D8B               	goto	i1l4574
 14293  0DB4  2D8F               	goto	i1l4580
 14294  0DB5  0008               	return
 14295  0DB6                     __end_of_do_I2C_TX_EMPTY:	
 14296                           
 14297                           	psect	text84
 14298  0996                     __ptext84:	
 14299 ;; *************** function _mssp1_setIRQ *****************
 14300 ;; Defined at:
 14301 ;;		line 58 in file "mcc_generated_files/i2c1_driver.c"
 14302 ;; Parameters:    Size  Location     Type
 14303 ;;		None
 14304 ;; Auto vars:     Size  Location     Type
 14305 ;;		None
 14306 ;; Return value:  Size  Location     Type
 14307 ;;                  1    wreg      void 
 14308 ;; Registers used:
 14309 ;;		None
 14310 ;; Tracked objects:
 14311 ;;		On entry : 0/0
 14312 ;;		On exit  : 0/0
 14313 ;;		Unchanged: 0/0
 14314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14315 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14316 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14317 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14318 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14319 ;;Total ram usage:        0 bytes
 14320 ;; Hardware stack levels used:    1
 14321 ;; This function calls:
 14322 ;;		Nothing
 14323 ;; This function is called by:
 14324 ;;		_do_I2C_TX_EMPTY
 14325 ;; This function uses a non-reentrant model
 14326 ;;
 14327                           
 14328                           
 14329                           ;psect for function _mssp1_setIRQ
 14330  0996                     _mssp1_setIRQ:	
 14331                           
 14332                           ;mcc_generated_files/i2c1_driver.c: 60:     }
 14333                           
 14334                           ;incstack = 0
 14335                           ; Regs used in _mssp1_setIRQ: []
 14336  0996  0020               	movlb	0	; select bank0
 14337  0997  1591               	bsf	17,3	;volatile
 14338  0998  0008               	return
 14339  0999                     __end_of_mssp1_setIRQ:	
 14340                           
 14341                           	psect	text85
 14342  0A2E                     __ptext85:	
 14343 ;; *************** function _i2c1_driver_isNACK *****************
 14344 ;; Defined at:
 14345 ;;		line 161 in file "mcc_generated_files/i2c1_driver.c"
 14346 ;; Parameters:    Size  Location     Type
 14347 ;;		None
 14348 ;; Auto vars:     Size  Location     Type
 14349 ;;		None
 14350 ;; Return value:  Size  Location     Type
 14351 ;;		None               void
 14352 ;; Registers used:
 14353 ;;		wreg, status,2, status,0
 14354 ;; Tracked objects:
 14355 ;;		On entry : 0/0
 14356 ;;		On exit  : 0/0
 14357 ;;		Unchanged: 0/0
 14358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14359 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14360 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14361 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14362 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14363 ;;Total ram usage:        1 bytes
 14364 ;; Hardware stack levels used:    1
 14365 ;; This function calls:
 14366 ;;		Nothing
 14367 ;; This function is called by:
 14368 ;;		_do_I2C_TX
 14369 ;;		_i2c_ISR
 14370 ;; This function uses a non-reentrant model
 14371 ;;
 14372                           
 14373                           
 14374                           ;psect for function _i2c1_driver_isNACK
 14375  0A2E                     _i2c1_driver_isNACK:	
 14376                           
 14377                           ;mcc_generated_files/i2c1_driver.c: 163:     return SSP1CON2bits.ACKSTAT;
 14378                           
 14379                           ;incstack = 0
 14380                           ; Regs used in _i2c1_driver_isNACK: [wreg+status,2+status,0]
 14381  0A2E  0024               	movlb	4	; select bank4
 14382  0A2F  0E16               	swapf	22,w	;volatile
 14383  0A30  0C89               	rrf	9,f
 14384  0A31  0C89               	rrf	9,f
 14385  0A32  3901               	andlw	1
 14386  0A33  00F0               	movwf	??_i2c1_driver_isNACK
 14387  0A34  0C70               	rrf	??_i2c1_driver_isNACK,w
 14388  0A35  0008               	return
 14389  0A36                     __end_of_i2c1_driver_isNACK:	
 14390                           
 14391                           	psect	text86
 14392  09F0                     __ptext86:	
 14393 ;; *************** function i1_i2c1_driver_TXData *****************
 14394 ;; Defined at:
 14395 ;;		line 186 in file "mcc_generated_files/i2c1_driver.c"
 14396 ;; Parameters:    Size  Location     Type
 14397 ;;  d               1    wreg     unsigned char 
 14398 ;; Auto vars:     Size  Location     Type
 14399 ;;  d               1    0[COMMON] unsigned char 
 14400 ;; Return value:  Size  Location     Type
 14401 ;;                  1    wreg      void 
 14402 ;; Registers used:
 14403 ;;		wreg
 14404 ;; Tracked objects:
 14405 ;;		On entry : 0/0
 14406 ;;		On exit  : 0/0
 14407 ;;		Unchanged: 0/0
 14408 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14409 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14410 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14411 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14412 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14413 ;;Total ram usage:        1 bytes
 14414 ;; Hardware stack levels used:    1
 14415 ;; This function calls:
 14416 ;;		Nothing
 14417 ;; This function is called by:
 14418 ;;		_do_I2C_SEND_ADR_READ
 14419 ;;		_do_I2C_SEND_ADR_WRITE
 14420 ;;		_do_I2C_TX
 14421 ;; This function uses a non-reentrant model
 14422 ;;
 14423                           
 14424                           
 14425                           ;psect for function i1_i2c1_driver_TXData
 14426  09F0                     i1_i2c1_driver_TXData:	
 14427                           
 14428                           ;incstack = 0
 14429                           ; Regs used in i1_i2c1_driver_TXData: [wreg]
 14430                           ;i1i2c1_driver_TXData@d stored from wreg
 14431  09F0  00F0               	movwf	i1i2c1_driver_TXData@d
 14432                           
 14433                           ;mcc_generated_files/i2c1_driver.c: 186: __attribute__((inline)) void i2c1_driver_TXData
      +                          (char d);mcc_generated_files/i2c1_driver.c: 187: {;mcc_generated_files/i2c1_driver.c: 18
      +                          8:     SSP1BUF = d;
 14434  09F1  0870               	movf	i1i2c1_driver_TXData@d,w
 14435  09F2  0024               	movlb	4	; select bank4
 14436  09F3  0091               	movwf	17	;volatile
 14437  09F4  0008               	return
 14438  09F5                     __end_ofi1_i2c1_driver_TXData:	
 14439                           
 14440                           	psect	text87
 14441  0993                     __ptext87:	
 14442 ;; *************** function i1_i2c1_driver_getRXData *****************
 14443 ;; Defined at:
 14444 ;;		line 171 in file "mcc_generated_files/i2c1_driver.c"
 14445 ;; Parameters:    Size  Location     Type
 14446 ;;		None
 14447 ;; Auto vars:     Size  Location     Type
 14448 ;;		None
 14449 ;; Return value:  Size  Location     Type
 14450 ;;                  1    wreg      unsigned char 
 14451 ;; Registers used:
 14452 ;;		wreg
 14453 ;; Tracked objects:
 14454 ;;		On entry : 0/0
 14455 ;;		On exit  : 0/0
 14456 ;;		Unchanged: 0/0
 14457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14458 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14459 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14460 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14461 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14462 ;;Total ram usage:        0 bytes
 14463 ;; Hardware stack levels used:    1
 14464 ;; This function calls:
 14465 ;;		Nothing
 14466 ;; This function is called by:
 14467 ;;		_do_I2C_RX
 14468 ;; This function uses a non-reentrant model
 14469 ;;
 14470                           
 14471                           
 14472                           ;psect for function i1_i2c1_driver_getRXData
 14473  0993                     i1_i2c1_driver_getRXData:	
 14474                           
 14475                           ;mcc_generated_files/i2c1_driver.c: 173:     return SSP1BUF;
 14476                           
 14477                           ;incstack = 0
 14478                           ; Regs used in i1_i2c1_driver_getRXData: [wreg]
 14479  0993  0024               	movlb	4	; select bank4
 14480  0994  0811               	movf	17,w	;volatile
 14481  0995  0008               	return
 14482  0996                     __end_ofi1_i2c1_driver_getRXData:	
 14483                           
 14484                           	psect	text88
 14485  09C4                     __ptext88:	
 14486 ;; *************** function i1_i2c1_driver_sendNACK *****************
 14487 ;; Defined at:
 14488 ;;		line 202 in file "mcc_generated_files/i2c1_driver.c"
 14489 ;; Parameters:    Size  Location     Type
 14490 ;;		None
 14491 ;; Auto vars:     Size  Location     Type
 14492 ;;		None
 14493 ;; Return value:  Size  Location     Type
 14494 ;;                  1    wreg      void 
 14495 ;; Registers used:
 14496 ;;		None
 14497 ;; Tracked objects:
 14498 ;;		On entry : 0/0
 14499 ;;		On exit  : 0/0
 14500 ;;		Unchanged: 0/0
 14501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14502 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14503 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14504 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14505 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14506 ;;Total ram usage:        0 bytes
 14507 ;; Hardware stack levels used:    1
 14508 ;; This function calls:
 14509 ;;		Nothing
 14510 ;; This function is called by:
 14511 ;;		_do_I2C_DO_NACK_STOP
 14512 ;;		_do_I2C_DO_NACK_RESTART
 14513 ;; This function uses a non-reentrant model
 14514 ;;
 14515                           
 14516                           
 14517                           ;psect for function i1_i2c1_driver_sendNACK
 14518  09C4                     i1_i2c1_driver_sendNACK:	
 14519                           
 14520                           ;mcc_generated_files/i2c1_driver.c: 204:     SSP1CON2bits.ACKDT = 1;
 14521                           
 14522                           ;incstack = 0
 14523                           ; Regs used in i1_i2c1_driver_sendNACK: []
 14524  09C4  0024               	movlb	4	; select bank4
 14525  09C5  1696               	bsf	22,5	;volatile
 14526                           
 14527                           ;mcc_generated_files/i2c1_driver.c: 205:     SSP1CON2bits.ACKEN = 1;
 14528  09C6  1616               	bsf	22,4	;volatile
 14529  09C7  0008               	return
 14530  09C8                     __end_ofi1_i2c1_driver_sendNACK:	
 14531                           
 14532                           	psect	text89
 14533  0986                     __ptext89:	
 14534 ;; *************** function _i2c1_driver_resetBus *****************
 14535 ;; Defined at:
 14536 ;;		line 141 in file "mcc_generated_files/i2c1_driver.c"
 14537 ;; Parameters:    Size  Location     Type
 14538 ;;		None
 14539 ;; Auto vars:     Size  Location     Type
 14540 ;;		None
 14541 ;; Return value:  Size  Location     Type
 14542 ;;                  1    wreg      void 
 14543 ;; Registers used:
 14544 ;;		None
 14545 ;; Tracked objects:
 14546 ;;		On entry : 0/0
 14547 ;;		On exit  : 0/0
 14548 ;;		Unchanged: 0/0
 14549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14550 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14551 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14552 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14553 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14554 ;;Total ram usage:        0 bytes
 14555 ;; Hardware stack levels used:    1
 14556 ;; This function calls:
 14557 ;;		Nothing
 14558 ;; This function is called by:
 14559 ;;		_do_I2C_RESET
 14560 ;; This function uses a non-reentrant model
 14561 ;;
 14562                           
 14563                           
 14564                           ;psect for function _i2c1_driver_resetBus
 14565  0986                     _i2c1_driver_resetBus:	
 14566                           
 14567                           ;incstack = 0
 14568                           ; Regs used in _i2c1_driver_resetBus: []
 14569  0986  0008               	return
 14570  0987                     __end_of_i2c1_driver_resetBus:	
 14571                           
 14572                           	psect	text90
 14573  0990                     __ptext90:	
 14574 ;; *************** function i1_i2c1_driver_startRX *****************
 14575 ;; Defined at:
 14576 ;;		line 166 in file "mcc_generated_files/i2c1_driver.c"
 14577 ;; Parameters:    Size  Location     Type
 14578 ;;		None
 14579 ;; Auto vars:     Size  Location     Type
 14580 ;;		None
 14581 ;; Return value:  Size  Location     Type
 14582 ;;                  1    wreg      void 
 14583 ;; Registers used:
 14584 ;;		None
 14585 ;; Tracked objects:
 14586 ;;		On entry : 0/0
 14587 ;;		On exit  : 0/0
 14588 ;;		Unchanged: 0/0
 14589 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14590 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14591 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14592 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14593 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14594 ;;Total ram usage:        0 bytes
 14595 ;; Hardware stack levels used:    1
 14596 ;; This function calls:
 14597 ;;		Nothing
 14598 ;; This function is called by:
 14599 ;;		_do_I2C_RCEN
 14600 ;; This function uses a non-reentrant model
 14601 ;;
 14602                           
 14603                           
 14604                           ;psect for function i1_i2c1_driver_startRX
 14605  0990                     i1_i2c1_driver_startRX:	
 14606                           
 14607                           ;mcc_generated_files/i2c1_driver.c: 168:     SSP1CON2bits.RCEN = 1;
 14608                           
 14609                           ;incstack = 0
 14610                           ; Regs used in i1_i2c1_driver_startRX: []
 14611  0990  0024               	movlb	4	; select bank4
 14612  0991  1596               	bsf	22,3	;volatile
 14613  0992  0008               	return
 14614  0993                     __end_ofi1_i2c1_driver_startRX:	
 14615                           
 14616                           	psect	text91
 14617  0002                     __ptext91:	
 14618 ;; *************** function _returnReset *****************
 14619 ;; Defined at:
 14620 ;;		line 448 in file "mcc_generated_files/drivers/i2c_master.c"
 14621 ;; Parameters:    Size  Location     Type
 14622 ;;  p               1    0[COMMON] PTR void 
 14623 ;;		 -> NULL(0), 
 14624 ;; Auto vars:     Size  Location     Type
 14625 ;;		None
 14626 ;; Return value:  Size  Location     Type
 14627 ;;                  1    wreg      enum E6966
 14628 ;; Registers used:
 14629 ;;		wreg
 14630 ;; Tracked objects:
 14631 ;;		On entry : 0/0
 14632 ;;		On exit  : 0/0
 14633 ;;		Unchanged: 0/0
 14634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14635 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14636 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14637 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14638 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14639 ;;Total ram usage:        1 bytes
 14640 ;; Hardware stack levels used:    1
 14641 ;; This function calls:
 14642 ;;		Nothing
 14643 ;; This function is called by:
 14644 ;;		_i2c_open
 14645 ;;		_do_I2C_DO_ADDRESS_NACK
 14646 ;;		_do_I2C_TX
 14647 ;;		_do_I2C_RX
 14648 ;;		_do_I2C_TX_EMPTY
 14649 ;; This function uses a non-reentrant model
 14650 ;;
 14651                           
 14652                           
 14653                           ;psect for function _returnReset
 14654  0002                     _returnReset:	
 14655                           
 14656                           ;mcc_generated_files/drivers/i2c_master.c: 448: static i2c_operations_t returnReset(void
      +                           *p);mcc_generated_files/drivers/i2c_master.c: 449: {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 450:     return i2c_reset_link;
 14657                           
 14658                           ;incstack = 0
 14659                           ; Regs used in _returnReset: [wreg]
 14660  0002  3005               	movlw	5
 14661  0003  0008               	return
 14662  0004                     __end_of_returnReset:	
 14663                           
 14664                           	psect	text92
 14665  0988                     __ptext92:	
 14666 ;; *************** function _returnStop *****************
 14667 ;; Defined at:
 14668 ;;		line 443 in file "mcc_generated_files/drivers/i2c_master.c"
 14669 ;; Parameters:    Size  Location     Type
 14670 ;;  p               1    0[COMMON] PTR void 
 14671 ;;		 -> NULL(0), 
 14672 ;; Auto vars:     Size  Location     Type
 14673 ;;		None
 14674 ;; Return value:  Size  Location     Type
 14675 ;;                  1    wreg      enum E6966
 14676 ;; Registers used:
 14677 ;;		wreg
 14678 ;; Tracked objects:
 14679 ;;		On entry : 0/0
 14680 ;;		On exit  : 0/0
 14681 ;;		Unchanged: 0/0
 14682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14683 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14684 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14685 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14686 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14687 ;;Total ram usage:        1 bytes
 14688 ;; Hardware stack levels used:    1
 14689 ;; This function calls:
 14690 ;;		Nothing
 14691 ;; This function is called by:
 14692 ;;		_i2c_open
 14693 ;;		_setCallBack
 14694 ;;		_do_I2C_DO_ADDRESS_NACK
 14695 ;;		_do_I2C_TX
 14696 ;;		_do_I2C_RX
 14697 ;;		_do_I2C_TX_EMPTY
 14698 ;; This function uses a non-reentrant model
 14699 ;;
 14700                           
 14701                           
 14702                           ;psect for function _returnStop
 14703  0988                     _returnStop:	
 14704                           
 14705                           ;mcc_generated_files/drivers/i2c_master.c: 443: static i2c_operations_t returnStop(void 
      +                          *p);mcc_generated_files/drivers/i2c_master.c: 444: {;mcc_generated_files/drivers/i2c_mas
      +                          ter.c: 445:     return i2c_stop;
 14706                           
 14707                           ;incstack = 0
 14708                           ; Regs used in _returnStop: [wreg]
 14709  0988  3001               	movlw	1
 14710  0989  0008               	return
 14711  098A                     __end_of_returnStop:	
 14712                           
 14713                           	psect	text93
 14714  098D                     __ptext93:	
 14715 ;; *************** function i1_i2c1_driver_stop *****************
 14716 ;; Defined at:
 14717 ;;		line 156 in file "mcc_generated_files/i2c1_driver.c"
 14718 ;; Parameters:    Size  Location     Type
 14719 ;;		None
 14720 ;; Auto vars:     Size  Location     Type
 14721 ;;		None
 14722 ;; Return value:  Size  Location     Type
 14723 ;;                  1    wreg      void 
 14724 ;; Registers used:
 14725 ;;		None
 14726 ;; Tracked objects:
 14727 ;;		On entry : 0/0
 14728 ;;		On exit  : 0/0
 14729 ;;		Unchanged: 0/0
 14730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14731 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14732 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14733 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14734 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14735 ;;Total ram usage:        0 bytes
 14736 ;; Hardware stack levels used:    1
 14737 ;; This function calls:
 14738 ;;		Nothing
 14739 ;; This function is called by:
 14740 ;;		_do_I2C_SEND_STOP
 14741 ;; This function uses a non-reentrant model
 14742 ;;
 14743                           
 14744                           
 14745                           ;psect for function i1_i2c1_driver_stop
 14746  098D                     i1_i2c1_driver_stop:	
 14747                           
 14748                           ;mcc_generated_files/i2c1_driver.c: 158:     SSP1CON2bits.PEN = 1;
 14749                           
 14750                           ;incstack = 0
 14751                           ; Regs used in i1_i2c1_driver_stop: []
 14752  098D  0024               	movlb	4	; select bank4
 14753  098E  1516               	bsf	22,2	;volatile
 14754  098F  0008               	return
 14755  0990                     __end_ofi1_i2c1_driver_stop:	
 14756                           
 14757                           	psect	text94
 14758  098A                     __ptext94:	
 14759 ;; *************** function i1_i2c1_driver_restart *****************
 14760 ;; Defined at:
 14761 ;;		line 151 in file "mcc_generated_files/i2c1_driver.c"
 14762 ;; Parameters:    Size  Location     Type
 14763 ;;		None
 14764 ;; Auto vars:     Size  Location     Type
 14765 ;;		None
 14766 ;; Return value:  Size  Location     Type
 14767 ;;                  1    wreg      void 
 14768 ;; Registers used:
 14769 ;;		None
 14770 ;; Tracked objects:
 14771 ;;		On entry : 0/0
 14772 ;;		On exit  : 0/0
 14773 ;;		Unchanged: 0/0
 14774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14775 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14776 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14777 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14778 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14779 ;;Total ram usage:        0 bytes
 14780 ;; Hardware stack levels used:    1
 14781 ;; This function calls:
 14782 ;;		Nothing
 14783 ;; This function is called by:
 14784 ;;		_do_I2C_SEND_RESTART_READ
 14785 ;;		_do_I2C_SEND_RESTART_WRITE
 14786 ;;		_do_I2C_SEND_RESTART
 14787 ;; This function uses a non-reentrant model
 14788 ;;
 14789                           
 14790                           
 14791                           ;psect for function i1_i2c1_driver_restart
 14792  098A                     i1_i2c1_driver_restart:	
 14793                           
 14794                           ;mcc_generated_files/i2c1_driver.c: 153:     SSP1CON2bits.RSEN = 1;
 14795                           
 14796                           ;incstack = 0
 14797                           ; Regs used in i1_i2c1_driver_restart: []
 14798  098A  0024               	movlb	4	; select bank4
 14799  098B  1496               	bsf	22,1	;volatile
 14800  098C  0008               	return
 14801  098D                     __end_ofi1_i2c1_driver_restart:	
 14802                           
 14803                           	psect	text95
 14804  09C0                     __ptext95:	
 14805 ;; *************** function _i2c1_driver_sendACK *****************
 14806 ;; Defined at:
 14807 ;;		line 196 in file "mcc_generated_files/i2c1_driver.c"
 14808 ;; Parameters:    Size  Location     Type
 14809 ;;		None
 14810 ;; Auto vars:     Size  Location     Type
 14811 ;;		None
 14812 ;; Return value:  Size  Location     Type
 14813 ;;                  1    wreg      void 
 14814 ;; Registers used:
 14815 ;;		None
 14816 ;; Tracked objects:
 14817 ;;		On entry : 0/0
 14818 ;;		On exit  : 0/0
 14819 ;;		Unchanged: 0/0
 14820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14821 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14822 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14823 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14824 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14825 ;;Total ram usage:        0 bytes
 14826 ;; Hardware stack levels used:    1
 14827 ;; This function calls:
 14828 ;;		Nothing
 14829 ;; This function is called by:
 14830 ;;		_do_I2C_DO_ACK
 14831 ;;		_do_I2C_RX
 14832 ;;		_I2C_Send_ACK
 14833 ;; This function uses a non-reentrant model
 14834 ;;
 14835                           
 14836                           
 14837                           ;psect for function _i2c1_driver_sendACK
 14838  09C0                     _i2c1_driver_sendACK:	
 14839                           
 14840                           ;mcc_generated_files/i2c1_driver.c: 198:     SSP1CON2bits.ACKDT = 0;
 14841                           
 14842                           ;incstack = 0
 14843                           ; Regs used in _i2c1_driver_sendACK: []
 14844  09C0  0024               	movlb	4	; select bank4
 14845  09C1  1296               	bcf	22,5	;volatile
 14846                           
 14847                           ;mcc_generated_files/i2c1_driver.c: 199:     SSP1CON2bits.ACKEN = 1;
 14848  09C2  1616               	bsf	22,4	;volatile
 14849  09C3  0008               	return
 14850  09C4                     __end_of_i2c1_driver_sendACK:	
 14851                           
 14852                           	psect	text96
 14853  0985                     __ptext96:	
 14854 ;; *************** function _PIN_MANAGER_IOC *****************
 14855 ;; Defined at:
 14856 ;;		line 118 in file "mcc_generated_files/pin_manager.c"
 14857 ;; Parameters:    Size  Location     Type
 14858 ;;		None
 14859 ;; Auto vars:     Size  Location     Type
 14860 ;;		None
 14861 ;; Return value:  Size  Location     Type
 14862 ;;                  1    wreg      void 
 14863 ;; Registers used:
 14864 ;;		None
 14865 ;; Tracked objects:
 14866 ;;		On entry : 0/0
 14867 ;;		On exit  : 0/0
 14868 ;;		Unchanged: 0/0
 14869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14870 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14871 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14872 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14873 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14874 ;;Total ram usage:        0 bytes
 14875 ;; Hardware stack levels used:    1
 14876 ;; This function calls:
 14877 ;;		Nothing
 14878 ;; This function is called by:
 14879 ;;		_INTERRUPT_InterruptManager
 14880 ;; This function uses a non-reentrant model
 14881 ;;
 14882                           
 14883                           
 14884                           ;psect for function _PIN_MANAGER_IOC
 14885  0985                     _PIN_MANAGER_IOC:	
 14886                           
 14887                           ;incstack = 0
 14888                           ; Regs used in _PIN_MANAGER_IOC: []
 14889  0985  0008               	return
 14890  0986                     __end_of_PIN_MANAGER_IOC:	
 14891  007E                     btemp	set	126	;btemp
 14892  007E                     int$flags	set	126
 14893  007E                     wtemp0	set	126


Data Sizes:
    Strings     52
    Constant    32
    Data        10
    BSS         127
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      12
    BANK0            80     60      80
    BANK1            80     66      70
    BANK2            80     64      74
    BANK3            80      0      29
    BANK4            80      0      68
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    i2c_ISR$2413	const PTR FTN()enum E7120 size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_SEND_ADR_READ(), do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), 
		 -> do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), do_I2C_IDLE(), do_I2C_RESET(), 

    returnStop@p	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    returnReset@p	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    S52$11$0	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_4(CODE[11]), STR_3(CODE[16]), STR_2(CODE[13]), STR_1(CODE[12]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_4(CODE[11]), STR_3(CODE[16]), STR_2(CODE[13]), STR_1(CODE[12]), 

    wireReadDataBlock@val	PTR unsigned char  size(2) Largest target is 64
		 -> readGesture@fifo_data2(BANK1[64]), readGesture@fifo_data(BANK2[64]), 

    Display_Name@string1	PTR unsigned char  size(2) Largest target is 16
		 -> STR_4(CODE[11]), STR_3(CODE[16]), STR_2(CODE[13]), STR_1(CODE[12]), 

    names	PTR unsigned char [4] size(2) Largest target is 16
		 -> STR_4(CODE[11]), STR_3(CODE[16]), STR_2(CODE[13]), STR_1(CODE[12]), 

    i2c1_driver_i2cISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), i2c_ISR(), 

    i2c1_driver_busCollisionISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), i2c_busCollisionISR(), 

    fsmStateTable	const PTR FTN()enum E7120[16] size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_SEND_ADR_READ(), do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), 
		 -> do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), do_I2C_IDLE(), do_I2C_RESET(), 

    S52$callbackPayload	PTR void [6] size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    i2c_status.callbackPayload	PTR void [6] size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    S52$callbackTable	PTR FTN(PTR void ,)enum E6966[6] size(2) Largest target is 1
		 -> returnReset(), returnStop(), 

    i2c_status.callbackTable	PTR FTN(PTR void ,)enum E6966[6] size(2) Largest target is 1
		 -> returnReset(), returnStop(), 

    S52$data_ptr	PTR unsigned char  size(1) Largest target is 0

    i2c_status.data_ptr	PTR unsigned char  size(1) Largest target is 0


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_i2c_ISR
    _i2c_ISR->_do_I2C_DO_ADDRESS_NACK
    _i2c_ISR->_do_I2C_RX
    _i2c_ISR->_do_I2C_TX
    _i2c_ISR->_do_I2C_TX_EMPTY

Critical Paths under _main in BANK0

    _main->_handleGesture
    _initialize->_setMode
    _setProximityGain->_wireWriteDataByte
    _setProxIntLowThresh->_wireWriteDataByte
    _setProxIntHighThresh->_wireWriteDataByte
    _setLightIntLowThreshold->_wireWriteDataByte
    _setLightIntHighThreshold->_wireWriteDataByte
    _setLEDDrive->_wireWriteDataByte
    _setGestureWaitTime->_wireWriteDataByte
    _setGestureLEDDrive->_wireWriteDataByte
    _setGestureGain->_wireWriteDataByte
    _setGestureExitThresh->_wireWriteDataByte
    _setGestureEnterThresh->_wireWriteDataByte
    _setAmbientLightGain->_wireWriteDataByte
    _handleGesture->_readGesture
    _readGesture->_processGestureData
    _wireReadDataBlock->_I2C_Write_Byte
    _processGestureData->___awdiv
    ___awdiv->___wmul
    _isGestureAvailable->_wireReadDataByte
    _Display_Name->_strlen
    _enableGestureSensor->_setMode
    _setLEDBoost->_wireWriteDataByte
    _setGestureMode->_wireWriteDataByte
    _setGestureIntEnable->_wireWriteDataByte
    _enablePower->_setMode
    _setMode->_getMode
    _wireWriteDataByte->_I2C_Write_Byte
    _getMode->_wireReadDataByte
    _wireReadDataByte->_I2C_Write_Byte
    _I2C_Write_Byte->_i2c1_driver_TXData
    _I2C_Read_Byte->_i2c1_driver_isBufferFull
    _Display_Clear->_SPI_Write
    _SPI_Write->_SPI2_Exchange8bit

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _handleGesture->_readGesture

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    _handleGesture->_readGesture

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   87687
                                             64 BANK1      2     2      0
                      _Display_Clear
                       _Display_Name
                  _SYSTEM_Initialize
                _enableGestureSensor
                      _handleGesture
                         _initialize
                 _isGestureAvailable
 ---------------------------------------------------------------------------------
 (1) _initialize                                           2     2      0   54520
                                             16 BANK0      2     2      0
                   _i2c1_driver_open
                _setAmbientLightGain
              _setGestureEnterThresh
               _setGestureExitThresh
                     _setGestureGain
                _setGestureIntEnable
                 _setGestureLEDDrive
                 _setGestureWaitTime
                        _setLEDDrive
           _setLightIntHighThreshold
            _setLightIntLowThreshold
                            _setMode
               _setProxIntHighThresh
                _setProxIntLowThresh
                   _setProximityGain
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setProximityGain                                     4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setProxIntLowThresh                                  2     2      0    3429
                                             10 BANK0      2     2      0
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setProxIntHighThresh                                 2     2      0    3429
                                             10 BANK0      2     2      0
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setLightIntLowThreshold                              5     3      2    3618
                                             10 BANK0      5     3      2
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setLightIntHighThreshold                             5     3      2    3618
                                             10 BANK0      5     3      2
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setLEDDrive                                          4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureWaitTime                                   3     3      0    3633
                                             10 BANK0      3     3      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureLEDDrive                                   4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureGain                                       4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureExitThresh                                 2     2      0    3429
                                             10 BANK0      2     2      0
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureEnterThresh                                2     2      0    3429
                                             10 BANK0      2     2      0
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setAmbientLightGain                                  3     3      0    3633
                                             10 BANK0      3     3      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _i2c1_driver_open                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _handleGesture                                        1     1      0    8932
                                             59 BANK0      1     1      0
                       _Display_Name
                        _readGesture
 ---------------------------------------------------------------------------------
 (2) _readGesture                                        140   138      2    8036
                                             47 BANK0     12    10      2
                                              0 BANK1     64    64      0
                                              0 BANK2     64    64      0
                      _decodeGesture
                            _getMode
                 _isGestureAvailable
                 _processGestureData
             _resetGestureParameters
                  _wireReadDataBlock
                   _wireReadDataByte
 ---------------------------------------------------------------------------------
 (3) _wireReadDataBlock                                   11     7      4     651
                                              6 BANK0     11     7      4
                        _I2C_ReStart
                      _I2C_Read_Byte
                      _I2C_Send_NACK
                          _I2C_Start
                           _I2C_Stop
                     _I2C_Write_Byte
 ---------------------------------------------------------------------------------
 (3) _processGestureData                                  32    32      0    5864
                                             15 BANK0     32    32      0
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    2396
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              9     5      4    1165
                                              6 BANK0      9     5      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _isGestureAvailable                                   2     2      0     198
                                              9 BANK0      2     2      0
                   _wireReadDataByte
 ---------------------------------------------------------------------------------
 (3) _decodeGesture                                       18    18      0     296
                                              0 BANK0     18    18      0
 ---------------------------------------------------------------------------------
 (2) _Display_Name                                         7     5      2     896
                                              5 BANK0      7     5      2
                 _PWM_Output_Disable
                  _PWM_Output_Enable
                          _SPI_Write
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _strlen                                               5     3      2     220
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (3) _PWM_Output_Enable                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PWM_Output_Disable                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _enableGestureSensor                                  2     2      0   23076
                                             16 BANK0      2     2      0
                        _enablePower
             _resetGestureParameters
                _setGestureIntEnable
                     _setGestureMode
                        _setLEDBoost
                            _setMode
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setLEDBoost                                          4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureMode                                       3     3      0    3633
                                             10 BANK0      3     3      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureIntEnable                                  3     3      0    3667
                                             10 BANK0      3     3      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (3) _resetGestureParameters                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _enablePower                                          0     0      0    4340
                            _setMode
 ---------------------------------------------------------------------------------
 (2) _setMode                                              5     4      1    4340
                                             11 BANK0      5     4      1
                            _getMode
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _wireWriteDataByte                                    4     1      3    3398
                                              6 BANK0      4     1      3
                          _I2C_Start
                           _I2C_Stop
                     _I2C_Write_Byte
 ---------------------------------------------------------------------------------
 (3) _getMode                                              2     2      0     195
                                              9 BANK0      2     2      0
                   _wireReadDataByte
 ---------------------------------------------------------------------------------
 (2) _wireReadDataByte                                     3     3      0     161
                                              6 BANK0      3     3      0
                        _I2C_ReStart
                      _I2C_Read_Byte
                      _I2C_Send_NACK
                          _I2C_Start
                           _I2C_Stop
                     _I2C_Write_Byte
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Byte                                       5     5      0      96
                                              1 BANK0      5     5      0
                 _i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_TXData                                   1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _I2C_Stop                                             0     0      0       0
                   _i2c1_driver_stop
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_stop                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_Start                                            0     0      0       0
                  _i2c1_driver_start
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_start                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_Send_NACK                                        0     0      0       0
               _i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_sendNACK                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_Read_Byte                                        0     0      0       0
              _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
                _i2c1_driver_startRX
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_startRX                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_isBufferFull                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_getRXData                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_ReStart                                          0     0      0       0
                _i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_restart                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                     _ADC_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PMD_Initialize
                    _PWM1_Initialize
                    _SPI2_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SPI2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PMD_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Display_Clear                                        1     1      0      62
                                              3 BANK0      1     1      0
                          _SPI_Write
 ---------------------------------------------------------------------------------
 (3) _SPI_Write                                            2     2      0      62
                                              1 BANK0      2     2      0
                  _SPI2_Exchange8bit
 ---------------------------------------------------------------------------------
 (4) _SPI2_Exchange8bit                                    1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                           0     0      0     914
                   Absolute function *
                    _PIN_MANAGER_IOC
                            _i2c_ISR *
                _i2c_busCollisionISR *
 ---------------------------------------------------------------------------------
 (9) _i2c_busCollisionISR                                  0     0      0       0
      _i2c1_driver_clearBusCollision
 ---------------------------------------------------------------------------------
 (10) _i2c1_driver_clearBusCollision                       0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _i2c_ISR                                              3     3      0     914
                                              3 COMMON     3     3      0
                      _do_I2C_DO_ACK *
             _do_I2C_DO_ADDRESS_NACK *
             _do_I2C_DO_NACK_RESTART *
                _do_I2C_DO_NACK_STOP *
                        _do_I2C_IDLE *
                        _do_I2C_RCEN *
                       _do_I2C_RESET *
                          _do_I2C_RX *
               _do_I2C_SEND_ADR_READ *
              _do_I2C_SEND_ADR_WRITE *
                _do_I2C_SEND_RESTART *
           _do_I2C_SEND_RESTART_READ *
          _do_I2C_SEND_RESTART_WRITE *
                   _do_I2C_SEND_STOP *
                          _do_I2C_TX *
                    _do_I2C_TX_EMPTY *
                 _i2c1_driver_isNACK
                     _mssp1_clearIRQ
 ---------------------------------------------------------------------------------
 (10) _mssp1_clearIRQ                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_TX_EMPTY                                     3     3      0     212
                                              0 COMMON     3     3      0
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                       _mssp1_setIRQ
                        _returnReset *
                         _returnStop *
 ---------------------------------------------------------------------------------
 (11) _mssp1_setIRQ                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_TX                                           3     3      0     234
                                              0 COMMON     3     3      0
           _do_I2C_SEND_RESTART_READ
          _do_I2C_SEND_RESTART_WRITE
                   _do_I2C_SEND_STOP
                 _i2c1_driver_isNACK
                        _returnReset *
                         _returnStop *
               i1_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (10) _i2c1_driver_isNACK                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _do_I2C_SEND_RESTART_WRITE                           0     0      0       0
              i1_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (11) _do_I2C_SEND_RESTART_READ                            0     0      0       0
              i1_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (10) _do_I2C_SEND_ADR_WRITE                               0     0      0      22
               i1_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (10) _do_I2C_SEND_ADR_READ                                0     0      0      22
               i1_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (11) i1_i2c1_driver_TXData                                1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_RX                                           3     3      0     212
                                              0 COMMON     3     3      0
             _do_I2C_DO_NACK_RESTART
                _do_I2C_DO_NACK_STOP
                _i2c1_driver_sendACK
                        _returnReset *
                         _returnStop *
            i1_i2c1_driver_getRXData
 ---------------------------------------------------------------------------------
 (11) i1_i2c1_driver_getRXData                             0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _do_I2C_DO_NACK_STOP                                 0     0      0       0
             i1_i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (11) _do_I2C_DO_NACK_RESTART                              0     0      0       0
             i1_i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (12) i1_i2c1_driver_sendNACK                              0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_RESET                                        0     0      0       0
               _i2c1_driver_resetBus
 ---------------------------------------------------------------------------------
 (11) _i2c1_driver_resetBus                                0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_RCEN                                         0     0      0       0
              i1_i2c1_driver_startRX
 ---------------------------------------------------------------------------------
 (11) i1_i2c1_driver_startRX                               0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_IDLE                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_DO_ADDRESS_NACK                              3     3      0     212
                                              0 COMMON     3     3      0
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                        _returnReset *
                         _returnStop *
 ---------------------------------------------------------------------------------
 (11) _returnStop                                          1     0      1       0
                                              0 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (11) _returnReset                                         1     0      1     212
                                              0 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (11) _do_I2C_SEND_STOP                                    0     0      0       0
                 i1_i2c1_driver_stop
 ---------------------------------------------------------------------------------
 (12) i1_i2c1_driver_stop                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _do_I2C_SEND_RESTART                                 0     0      0       0
              i1_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (12) i1_i2c1_driver_restart                               0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_DO_ACK                                       0     0      0       0
                _i2c1_driver_sendACK
 ---------------------------------------------------------------------------------
 (11) _i2c1_driver_sendACK                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _PIN_MANAGER_IOC                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (9) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Display_Clear
     _SPI_Write
       _SPI2_Exchange8bit
   _Display_Name
     _PWM_Output_Disable
     _PWM_Output_Enable
     _SPI_Write
       _SPI2_Exchange8bit
     _strlen
   _SYSTEM_Initialize
     _ADC_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PMD_Initialize
     _PWM1_Initialize
     _SPI2_Initialize
     _TMR2_Initialize
     _WDT_Initialize
   _enableGestureSensor
     _enablePower
       _setMode
         _getMode
           _wireReadDataByte
             _I2C_ReStart
               _i2c1_driver_restart
             _I2C_Read_Byte
               _i2c1_driver_getRXData
               _i2c1_driver_isBufferFull
               _i2c1_driver_startRX
             _I2C_Send_NACK
               _i2c1_driver_sendNACK
             _I2C_Start
               _i2c1_driver_start
             _I2C_Stop
               _i2c1_driver_stop
             _I2C_Write_Byte
               _i2c1_driver_TXData
         _wireWriteDataByte
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
     _resetGestureParameters
     _setGestureIntEnable
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureMode
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setLEDBoost
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setMode
       _getMode
         _wireReadDataByte
           _I2C_ReStart
             _i2c1_driver_restart
           _I2C_Read_Byte
             _i2c1_driver_getRXData
             _i2c1_driver_isBufferFull
             _i2c1_driver_startRX
           _I2C_Send_NACK
             _i2c1_driver_sendNACK
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _wireWriteDataByte
       _I2C_Start
         _i2c1_driver_start
       _I2C_Stop
         _i2c1_driver_stop
       _I2C_Write_Byte
         _i2c1_driver_TXData
   _handleGesture
     _Display_Name
       _PWM_Output_Disable
       _PWM_Output_Enable
       _SPI_Write
         _SPI2_Exchange8bit
       _strlen
     _readGesture
       _decodeGesture
       _getMode
         _wireReadDataByte
           _I2C_ReStart
             _i2c1_driver_restart
           _I2C_Read_Byte
             _i2c1_driver_getRXData
             _i2c1_driver_isBufferFull
             _i2c1_driver_startRX
           _I2C_Send_NACK
             _i2c1_driver_sendNACK
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
       _isGestureAvailable
         _wireReadDataByte
           _I2C_ReStart
             _i2c1_driver_restart
           _I2C_Read_Byte
             _i2c1_driver_getRXData
             _i2c1_driver_isBufferFull
             _i2c1_driver_startRX
           _I2C_Send_NACK
             _i2c1_driver_sendNACK
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
       _processGestureData
         ___awdiv
           ___wmul (ARG)
         ___wmul
       _resetGestureParameters
       _wireReadDataBlock
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
   _initialize
     _i2c1_driver_open
     _setAmbientLightGain
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureEnterThresh
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureExitThresh
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureGain
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureIntEnable
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureLEDDrive
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureWaitTime
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setLEDDrive
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setLightIntHighThreshold
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setLightIntLowThreshold
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setMode
       _getMode
         _wireReadDataByte
           _I2C_ReStart
             _i2c1_driver_restart
           _I2C_Read_Byte
             _i2c1_driver_getRXData
             _i2c1_driver_isBufferFull
             _i2c1_driver_startRX
           _I2C_Send_NACK
             _i2c1_driver_sendNACK
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setProxIntHighThresh
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setProxIntLowThresh
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setProximityGain
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _wireReadDataByte
       _I2C_ReStart
         _i2c1_driver_restart
       _I2C_Read_Byte
         _i2c1_driver_getRXData
         _i2c1_driver_isBufferFull
         _i2c1_driver_startRX
       _I2C_Send_NACK
         _i2c1_driver_sendNACK
       _I2C_Start
         _i2c1_driver_start
       _I2C_Stop
         _i2c1_driver_stop
       _I2C_Write_Byte
         _i2c1_driver_TXData
     _wireWriteDataByte
       _I2C_Start
         _i2c1_driver_start
       _I2C_Stop
         _i2c1_driver_stop
       _I2C_Write_Byte
         _i2c1_driver_TXData
   _isGestureAvailable
     _wireReadDataByte
       _I2C_ReStart
         _i2c1_driver_restart
       _I2C_Read_Byte
         _i2c1_driver_getRXData
         _i2c1_driver_isBufferFull
         _i2c1_driver_startRX
       _I2C_Send_NACK
         _i2c1_driver_sendNACK
       _I2C_Start
         _i2c1_driver_start
       _I2C_Stop
         _i2c1_driver_stop
       _I2C_Write_Byte
         _i2c1_driver_TXData

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _PIN_MANAGER_IOC *
   _i2c_ISR *
     _do_I2C_DO_ACK *
       _i2c1_driver_sendACK
     _do_I2C_DO_ADDRESS_NACK *
       _do_I2C_SEND_RESTART
         i1_i2c1_driver_restart
       _do_I2C_SEND_STOP
         i1_i2c1_driver_stop
       _returnReset *
       _returnStop *
     _do_I2C_DO_NACK_RESTART *
       i1_i2c1_driver_sendNACK
     _do_I2C_DO_NACK_STOP *
       i1_i2c1_driver_sendNACK
     _do_I2C_IDLE *
     _do_I2C_RCEN *
       i1_i2c1_driver_startRX
     _do_I2C_RESET *
       _i2c1_driver_resetBus
     _do_I2C_RX *
       _do_I2C_DO_NACK_RESTART
         i1_i2c1_driver_sendNACK
       _do_I2C_DO_NACK_STOP
         i1_i2c1_driver_sendNACK
       _i2c1_driver_sendACK
       _returnReset *
       _returnStop *
       i1_i2c1_driver_getRXData *
     _do_I2C_SEND_ADR_READ *
       i1_i2c1_driver_TXData
     _do_I2C_SEND_ADR_WRITE *
       i1_i2c1_driver_TXData
     _do_I2C_SEND_RESTART *
       i1_i2c1_driver_restart
     _do_I2C_SEND_RESTART_READ *
       i1_i2c1_driver_restart
     _do_I2C_SEND_RESTART_WRITE *
       i1_i2c1_driver_restart
     _do_I2C_SEND_STOP *
       i1_i2c1_driver_stop
     _do_I2C_TX *
       _do_I2C_SEND_RESTART_READ
         i1_i2c1_driver_restart
       _do_I2C_SEND_RESTART_WRITE
         i1_i2c1_driver_restart
       _do_I2C_SEND_STOP
         i1_i2c1_driver_stop
       _i2c1_driver_isNACK
       _returnReset *
       _returnStop *
       i1_i2c1_driver_TXData *
     _do_I2C_TX_EMPTY *
       _do_I2C_SEND_RESTART
         i1_i2c1_driver_restart
       _do_I2C_SEND_STOP
         i1_i2c1_driver_stop
       _mssp1_setIRQ
       _returnReset *
       _returnStop *
     _i2c1_driver_isNACK *
     _mssp1_clearIRQ *
   _i2c_busCollisionISR *
     _i2c1_driver_clearBusCollision

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     3C      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     42      46       7       87.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     40      4A       9       92.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      1D      11       36.3%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      44      13       85.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     14D      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     14D      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Mon Apr 15 14:13:19 2019

                          returnReset@p 0070                   ?_setGestureExitThresh 0070  
                    __size_of_I2C_Start 0003                             __CFG_CP$OFF 0000  
                          ___awdiv@sign 002C                    __size_of_do_I2C_IDLE 0005  
                   _do_I2C_SEND_RESTART 09D0                    __size_of_do_I2C_RCEN 0006  
                   ___wmul@multiplicand 0022                      _PWM_Output_Disable 09BD  
                           __CFG_LVP$ON 0000                                     l532 0AA5  
      processGestureData@ud_ratio_first 0031                                     l777 0FFC  
                                   _PR2 001E                            __CFG_CPD$OFF 0000  
                 __end_of_decodeGesture 04C8                    __size_of_I2C_ReStart 0003  
                                   _val 007B                 __size_of_PMD_Initialize 0008  
                    I2C_Write_Byte@Byte 0023                         _TMR2_Initialize 0A56  
                 __size_of_do_I2C_RESET 0007                                     wreg 0009  
                   ?_PWM_Output_Disable 0070                      i1_i2c1_driver_stop 098D  
                                  l1103 030B                                    l1104 0323  
                                  l1141 0415                                    l1125 03A7  
                                  l1080 0243                                    l1161 049A  
                                  l1153 0468                                    l1137 03F8  
                                  l1129 03C4                                    l1057 0088  
                                  l1228 0B9D                                    l1092 02C3  
                                  l1084 026C                                    l1165 04B7  
                                  l1149 044B                                    l1086 0292  
                                  l1099 02E2                                    l1392 0BB9  
                                  l6000 0143                                    l6020 01F9  
                                  l6030 021E                                    l6014 01E4  
                                  l6112 0350                                    l6024 0209  
                                  l6202 04B2                                    l6130 0370  
                                  l6122 0364                                    l6106 0344  
                                  l6018 01F6                                    l6124 0366  
                                  l6212 04C6                                    l6116 035A  
                                  l6052 0285                                    l6044 0267  
                                  l6028 021B                                    l7004 0D7B  
                                  l6134 037A                                    l6118 035C  
                                  l6038 023E                                    l6208 04C4  
                                  l6144 03A2                                    l6136 0380  
                                  l6128 036E                                    l6056 028D  
                                  l6162 03F3                                    l6154 03D1  
                                  l6066 02B7                                    l6074 02C5  
                                  l6180 0446                                    l6172 0422  
                                  l6148 03BF                                    l6084 0306  
                                  l7220 0778                                    l6190 0475  
                                  l6166 0410                                    l6078 02DD  
                                  l6502 0AE1                                    l6336 0FDF  
                                  l6184 0463                                    l6344 05ED  
                                  l6512 0AF4                                    l5730 0A87  
                                  l6602 0DE6                                    l5810 07A5  
                                  l6370 0627                                    l6362 0604  
                                  l6354 05F1                                    l6530 0E18  
                                  l6442 0B1A                                    l5724 0BA0  
                                  l5900 0FA0                                    l6620 0C3B  
                                  l5820 07AD                                    l5804 079A  
                                  l6348 06A2                                    l6452 0B07  
                                  l5902 0FA1                                    l6630 0A9B  
                                  l6198 0495                                    l5822 07B9  
                                  l6382 0635                                    l6462 0CA1  
                                  l5832 07D4                                    l6384 0696  
                                  l6482 0C7A                                    l6466 0CA3  
                                  l5852 0ACE                                    l5836 07DC  
                                  l5828 07CB                                    l6388 069F  
                                  l6548 0E4A                                    l5758 0AAA  
                                  l6822 06E9                                    l5870 0B66  
                                  l5950 0079                                    l5934 0ED8  
                                  l6902 0762                                    l6566 0C62  
                                  l6486 0C7C                                    l5880 0F6D  
                                  l6584 0D58                                    l5872 0B72  
                                  l5784 0BB3                                    l5936 0F07  
                                  l6818 06E7                                    l5946 0077  
                                  l6906 076F                                    l6690 04DD  
                                  l5892 0F87                                    l5884 0F6F  
                                  l6836 06E5                                    l6908 078C  
                                  l5894 0F94                                    l5982 00F9  
                                  l5966 0084                                    l6686 04DB  
                                  l5968 00DE                                    l5996 00F5  
                                  l6892 0749                                    l6884 0736  
                                  l6894 0757                                    l6998 0D69  
                                  STR_1 103D                                    STR_2 1030  
                                  STR_3 1020                                    STR_4 1049  
               __end_of_PWM1_Initialize 0A84                                    _LATA 010C  
                                  _LATB 010D                                    _LATC 010E  
                                  u5005 02AA                                    u5115 032C  
                                  u5055 02CE                                    u5305 0401  
                                  u4505 07B0                                    u5065 02EB  
                                  u5315 041F                                    u5075 02F7  
                                  _PMD0 0911                                    u5405 04A3  
                                  u5245 0393                                    u4525 07BA  
                                  u4445 0BBA                                    u5085 0314  
                                  _PMD1 0912                                    _PMD2 0913  
                                  u5415 04C1                                    u5255 03B0  
                                  u4535 07C4                                    u4455 0BBF  
                                  _PMD3 0914                                    u4624 0F80  
                                  _PMD4 0915                                    u4625 0F7F  
                                  u5345 0437                                    u5265 03CE  
                                  u4545 07CC                                    u5505 0630  
                                  _PMD5 0916                                    u4634 0F8C  
                                  u4635 0F8B                                    u5435 0FE9  
                                  u5355 0454                                    u5515 063F  
                                  u5365 0472                                    u6407 0FC7  
                                  u5295 03E4                                    u6095 0744  
                                  u5535 0CC3                                    u6417 0AB4  
                                  u5545 0CEC                                    u6427 0B2B  
                                  u5395 0486                                    u4915 022F  
                                  u4755 0093                                    u4675 0EE1  
                                  u5635 0DF9                                    u4925 024C  
                                  u4935 0258                                    u4855 01DD  
                                  u5655 0E2B                                    u4945 0275  
                                  u4865 01EE                                    u6377 06A6  
                                  u4875 0202                                    u6387 06B9  
                                  u6397 0FB7                                    u4885 0213  
                  ?_do_I2C_SEND_RESTART 0070                                    u5695 0DC7  
                                  u4995 029C                                    _TMR2 001D  
                                  _WPUA 020C                                    _WPUB 020D  
                                  _WPUC 020E                            __CFG_WRT$OFF 0000  
                         __CFG_FCMEN$ON 0000       __size_of_do_I2C_SEND_RESTART_READ 0004  
                   ?i1_i2c1_driver_stop 0070               ?_do_I2C_SEND_RESTART_READ 0070  
                                  _main 0D5A                                    _name 005C  
             __size_of_do_I2C_SEND_STOP 0004                  __size_of_do_I2C_DO_ACK 0004  
                                  fsr0h 0005                                    fsr1h 0007  
                                  indf0 0000                                    fsr0l 0004  
                                  indf1 0001                                    fsr1l 0006  
                                  btemp 007E                   ??_setGestureIntEnable 002A  
                      __end_of_I2C_Stop 09BD                           __CFG_BOREN$ON 0000  
               i1_i2c1_driver_getRXData 0993                   ?_do_I2C_SEND_ADR_READ 0070  
                         __CFG_BORV$LOW 0000         ??_i2c1_driver_clearBusCollision 0070  
                                  start 002B                     I2C_Write_Byte@count 0024  
                         __CFG_CSWEN$ON 0000                           __CFG_MCLRE$ON 0000  
                  ??_PWM_Output_Disable 0020                         __end_of_i2c_ISR 0C16  
              ??_do_I2C_DO_NACK_RESTART 0070                            ?_readGesture 004F  
                          _do_I2C_RESET 0A12          __size_of_OSCILLATOR_Initialize 0008  
         __end_of_OSCILLATOR_Initialize 0A4E                    ??i1_i2c1_driver_stop 0070  
                                 _ADACT 009F                __end_of_i2c1_driver_open 0A79  
                                 ?_main 0070                         __end_of___awdiv 07E1  
              __end_of_i2c1_driver_stop 09BA                         ___awdiv@divisor 0026  
                                 _T2CON 001F              __end_of_i2c1_driver_TXData 0A06  
                        __CFG_DEBUG$OFF 0000                                   i1l157 0F45  
                                 i1l173 0E9C                                   i1l253 0029  
                                 i1l245 0010                                   i1l248 001E  
                          ?_setLEDBoost 0070                         ___awdiv@counter 002B  
                          ?_setLEDDrive 0070                          _setGestureGain 0DE8  
                                 _OSCEN 091D                      wireReadDataBlock@j 0030  
                        _setGestureMode 0C16                                   _TRISA 008C  
                                 _TRISB 008D                                   _TRISC 008E  
           __end_of_setProxIntLowThresh 0B1C                         __end_of_getMode 0A6F  
                 isGestureAvailable@val 002A                 __end_of_PIN_MANAGER_IOC 0986  
            __end_of_i2c1_driver_isNACK 0A36                  __size_of_I2C_Read_Byte 000B  
                        _WDT_Initialize 09E4                                   _names 0160  
                      _b_i2c_error_flag 0076            __end_of_setProxIntHighThresh 0B09  
            ?_do_I2C_SEND_RESTART_WRITE 0070                                   _state 0078  
                                 _start 006F                   ??_do_I2C_SEND_RESTART 0070  
                       __end_of_setMode 0FB0                       __end_of_I2C_Start 09B7  
                                 pclath 000A                 __size_of_mssp1_clearIRQ 0003  
                  i1_i2c1_driver_TXData 09F0            __size_of_setAmbientLightGain 001E  
                ?_do_I2C_SEND_ADR_WRITE 0070                  __size_of_I2C_Send_NACK 0003  
                                 status 0003                                   wtemp0 007E  
                    __size_of_SPI_Write 0015                ?_setLightIntLowThreshold 002A  
            __end_of_setGestureLEDDrive 0E4C                   setGestureWaitTime@val 002C  
                         _fsmStateTable 1000                           _gesture_data_ 0220  
                       __initialization 002D                  ??_setGestureExitThresh 002A  
                     _SPI2_Exchange8bit 0A9D              processGestureData@lr_delta 004B  
                            _i2c_status 01A0                            __end_of_main 0D85  
                     _handleGestureFlag 0077              processGestureData@ud_delta 0049  
                    ?_SPI2_Exchange8bit 0070                 __end_of_TMR2_Initialize 0A5E  
           ?_INTERRUPT_InterruptManager 0070                  __end_of_setGestureGain 0E1A  
             __size_of_setProximityGain 0029                  __end_of_setGestureMode 0C3D  
                         _do_I2C_DO_ACK 09D8                                  ??_main 005C  
         __size_of_i2c1_driver_sendNACK 0004                __size_of_SPI2_Initialize 0007  
                   ??_SPI2_Exchange8bit 0020       __size_of_setLightIntHighThreshold 0027  
         __size_of_i2c1_driver_resetBus 0001                  __end_of_WDT_Initialize 09E8  
               ?_do_I2C_DO_ADDRESS_NACK 0070               ?_setLightIntHighThreshold 002A  
     setLightIntHighThreshold@threshold 002A                    __end_of_Display_Name 1000  
                  __size_of_enablePower 000E                                  _ADCON0 009D  
                                _ADCON1 009E                                  _ADRESH 009C  
                                _ADRESL 009B                                  _CCPR1H 0292  
                                _CCPR1L 0291                        ___awdiv@dividend 0028  
                    _processGestureData 0069                                  _ANSELA 018C  
                                _ANSELB 018D                                  _ANSELC 018E  
                    __CFG_RSTOSC$HFINT1 0000            setProxIntLowThresh@threshold 002B  
                 ?i1_i2c1_driver_TXData 0070                                  _RC2PPS 0EA2  
                                _RB5PPS 0E9D                                  _RB6PPS 0E9E  
                      ?_PWM1_Initialize 0070                                  _RB7PPS 0E9F  
                                _ODCONA 028C                                  _ODCONB 028D  
                                _RC6PPS 0EA6                                  _ODCONC 028E  
                                i1l5030 0C00                                  i1l4510 0F1B  
                                i1l4520 0F21                                  i1l4514 0F1E  
                                i1l4506 0F18                                  i1l4550 0E9E  
                                i1l4528 0F5F                                  i1l4560 0EA4  
                                i1l4570 0D88                                  i1l4554 0EA1  
                                i1l4580 0D8F                                  i1l4484 0D0B  
                                i1l4574 0D8B                                  i1l4494 0D11  
                                i1l7222 0EB9                                  i1l4488 0D0E  
                                i1l7224 0F37                                  i1l4586 0D92  
                                i1l7226 0D26                                  i1l7228 0DA7  
             ??i1_i2c1_driver_getRXData 0070                        _wireReadDataByte 0BCC  
                                _OSCFRQ 091F                 ?_resetGestureParameters 0070  
                ??_do_I2C_SEND_ADR_READ 0070                                  _WDTCON 0097  
                             ??_i2c_ISR 0073                     ?_processGestureData 0070  
                     _gesture_lr_delta_ 0066                          __CFG_PWRTE$OFF 0000  
         setProxIntHighThresh@threshold 002B               __end_of_SPI2_Exchange8bit 0AAC  
                     _gesture_lr_count_ 0062                     wireReadDataByte@reg 0027  
                 _i2c1_driver_getRXData 09A8                     wireReadDataByte@val 0028  
                     _gesture_ud_delta_ 0068             __end_of_do_I2C_DO_NACK_STOP 09E0  
                         _I2C_Read_Byte 0A84              __end_of_isGestureAvailable 0AD0  
                     _gesture_ud_count_ 0064                                  ___wmul 0BB0  
                             ??___awdiv 002A   __end_of_i2c1_driver_clearBusCollision 099F  
__size_of_i2c1_driver_clearBusCollision 0003           _i2c1_driver_clearBusCollision 099C  
            __end_of_setGestureWaitTime 0C64                          __CFG_STVREN$ON 0000  
       __size_of_do_I2C_DO_NACK_RESTART 0004                                  _button 007A  
                      ___awdiv@quotient 002D                          ?_do_I2C_DO_ACK 0070  
                       ?_setGestureGain 0070                           _I2C_Send_NACK 09AE  
                             ??_getMode 0029                         ?_setGestureMode 0070  
                                _strlen 0B61                 ??_setGestureEnterThresh 002A  
                  ??_processGestureData 002F                       __end_of_SPI_Write 0B31  
           __end_of_i2c1_driver_sendACK 09C4                          _PMD_Initialize 0A4E  
        __end_of_do_I2C_DO_ADDRESS_NACK 0D2F                            __pdataCOMMON 007B  
                             ?_I2C_Stop 0070                      Display_Name@length 0028  
                             ??_setMode 002C                         ?_WDT_Initialize 0070  
           __end_of_i2c1_driver_restart 09A5                            ?_returnReset 0070  
                     readGesture@motion 0053             __end_of_i2c1_driver_startRX 09AE  
                      ?_PIN_MANAGER_IOC 0070          __end_of_resetGestureParameters 0B61  
                     _SYSTEM_Initialize 0B31                 __end_of__initialization 0065  
                      _do_I2C_SEND_STOP 09D4                      __size_of_do_I2C_RX 0046  
                    __size_of_do_I2C_TX 004F                      ?_SYSTEM_Initialize 0070  
                setGestureWaitTime@time 002B                __size_of_do_I2C_TX_EMPTY 0031  
                            _adcResult2 00E0                          ?_I2C_Read_Byte 0070  
                        __pcstackCOMMON 0070                            __pidataBANK0 0987  
                          __pidataBANK2 0A5E                     ??_SYSTEM_Initialize 0020  
                 i1i2c1_driver_TXData@d 0070                    _setProxIntHighThresh 0AF6  
                        _gesture_state_ 005E                          ?_I2C_Send_NACK 0070  
                      ?_TMR2_Initialize 0070                   i1_i2c1_driver_restart 098A  
                __end_of_PMD_Initialize 0A56                   i1_i2c1_driver_startRX 0990  
                  __size_of_readGesture 00F3                   __end_of_handleGesture 078F  
     __size_of_i2c1_driver_isBufferFull 0007                              ??_I2C_Stop 0020  
             ?_i2c1_driver_isBufferFull 0070                      _gesture_far_count_ 00E2  
                  __size_of_setLEDBoost 0032                    __size_of_setLEDDrive 0029  
                _do_I2C_DO_NACK_RESTART 09E0                  ??i1_i2c1_driver_TXData 0070  
             __end_of_SYSTEM_Initialize 0B49                       ??_SPI2_Initialize 0020  
                        _mssp1_clearIRQ 0999                              __pbssBANK0 005C  
                            __pbssBANK1 00E0                              __pbssBANK2 0168  
                            __pbssBANK3 01A0                              __pbssBANK4 0220  
                  wireWriteDataByte@reg 0029                    wireWriteDataByte@val 0026  
                   getMode@enable_value 002A                ??i1_i2c1_driver_sendNACK 0070  
                ?_i2c1_driver_getRXData 0070              __size_of_SPI2_Exchange8bit 000F  
          __size_of_i2c_busCollisionISR 0003                              __pmaintext 0D5A  
                 __end_of_Display_Clear 0ABD                           ??_do_I2C_IDLE 0070  
                         ??_do_I2C_RCEN 0070                 setGestureLEDDrive@drive 002D  
                               ?___wmul 0020                         __CFG_PPS1WAY$ON 0000  
                       ??_do_I2C_DO_ACK 0070            __size_of_enableGestureSensor 0064  
                            __pintentry 0004                   ?_setProxIntHighThresh 0070  
                               _CCP1CON 0293                 __size_of_I2C_Write_Byte 001C  
                         ??_I2C_ReStart 0020                        _setProximityGain 0CDB  
                           setMode@mode 002F                         ?_PMD_Initialize 0070  
                   _setAmbientLightGain 07E1                 __size_of_ADC_Initialize 0008  
                 __size_of_Display_Name 0050          ?_i2c1_driver_clearBusCollision 0070  
                               ?_strlen 0020                       ?_i2c1_driver_open 0070  
                     __end_of_do_I2C_RX 0EC8                       __end_of_do_I2C_TX 0F61  
                     ?_i2c1_driver_stop 0070                       _wireReadDataBlock 0EC8  
                    ??_i2c1_driver_open 0020                      ??_i2c1_driver_stop 0020  
                               _OSCCON1 0919                                 _OSCCON3 091B  
                         ?_mssp1_setIRQ 0070                                 _OSCTUNE 091E  
                  wireReadDataBlock@len 0028                    wireReadDataBlock@reg 002F  
                  wireReadDataBlock@val 0026                                 _SSP1ADD 0212  
                               _SSP2ADD 021A                                 _SLRCONA 030C  
                               _SLRCONB 030D                                 _SLRCONC 030E  
                               _SSP1BUF 0211                  __end_of_mssp1_clearIRQ 099C  
                               _SSP2BUF 0219                      ?_wireReadDataBlock 0026  
                               _SSP1MSK 0213                       SPI_Write@incoming 0022  
           __end_of_setGestureIntEnable 0D5A                 ??_do_I2C_SEND_ADR_WRITE 0070  
       processGestureData@lr_ratio_last 0037             ??_do_I2C_SEND_RESTART_WRITE 0070  
                          readGesture@i 0059                      _i2c1_driver_TXData 0A00  
                  ?_setAmbientLightGain 0070                      _i2c1_driver_i2cISR 006A  
                   ??_wireReadDataBlock 002A                                 _i2c_ISR 0BF0  
                             _I2C_Start 09B4                         ??_I2C_Read_Byte 0021  
                         setMode@enable 002B                      _i2c1_driver_isNACK 0A2E  
                __size_of_decodeGesture 0190                     ?_i2c1_driver_TXData 0070  
           __size_of_PWM_Output_Disable 0003                            _Display_Name 0FB0  
                       ??_I2C_Send_NACK 0020                                 ___awdiv 078F  
                       __size_of___wmul 001C                  ?i1_i2c1_driver_restart 0070  
                     ??_do_I2C_TX_EMPTY 0070                     ?_i2c1_driver_isNACK 0070  
                ?i1_i2c1_driver_startRX 0070                __end_of_wireReadDataByte 0BF0  
                            _initialize 04C8                                 _getMode 0A66  
      __size_of_setLightIntLowThreshold 0027                      _setGestureLEDDrive 0E1A  
                               __ptext1 04C8                                 __ptext2 0CDB  
                               __ptext3 0B09                                 __ptext4 0AF6  
                               __ptext5 0C8B                                 __ptext6 0C64  
                               __ptext7 0CB2                                 __ptext8 0C3D  
                               __ptext9 0E1A             __size_ofi1_i2c1_driver_stop 0003  
                   __end_of_do_I2C_IDLE 09FA               __end_of_wireReadDataBlock 0F12  
                   __end_of_do_I2C_RCEN 0A00                         __size_of_strlen 0018  
                 _OSCILLATOR_Initialize 0A46                               _T2CONbits 001F  
           __end_of_do_I2C_SEND_RESTART 09D4                          ??_mssp1_setIRQ 0070  
                  ??_i2c1_driver_TXData 0020                                 _setMode 0F61  
              ??_PIN_MANAGER_Initialize 0020                     __end_of_I2C_ReStart 09A8  
                   ?_setGestureLEDDrive 0070                                 _printed 006E  
                       ?_mssp1_clearIRQ 0070                _do_I2C_SEND_RESTART_READ 09C8  
            __size_of_SYSTEM_Initialize 0018                                 clrloop0 0A07  
                  __size_of_returnReset 0002                    end_of_initialization 0065  
                  ??_i2c1_driver_isNACK 0070                   ??_setAmbientLightGain 002A  
          __size_of_setProxIntLowThresh 0013                                 init_ram 0A0C  
          __end_of_i2c1_driver_sendNACK 09EC                                 initloop 0A0D  
       __size_ofi1_i2c1_driver_sendNACK 0004                              ?_I2C_Start 0070  
         enableGestureSensor@interrupts 0031            __end_of_i2c1_driver_resetBus 0987  
         setGestureExitThresh@threshold 002B                    ??_setGestureLEDDrive 002A  
                    readGesture@gstatus 0055                            initialize@id 0031  
                      ??_setGestureGain 002A                  ??_setProxIntHighThresh 002A  
                      ??_setGestureMode 002A               _do_I2C_SEND_RESTART_WRITE 09CC  
                   Display_Name@string1 0025           __size_of_setGestureExitThresh 0013  
                               strlen@a 0023                                 strlen@s 0020  
                      ??_WDT_Initialize 0020                       _wireWriteDataByte 0B79  
                            _returnStop 0988                               _PORTCbits 000E  
              __end_of_do_I2C_SEND_STOP 09D8                           ??_enablePower 0030  
                    ?_wireWriteDataByte 0026         setLightIntHighThreshold@val_low 002D  
        __size_of_setGestureEnterThresh 0013           __end_of_setGestureEnterThresh 0AE3  
                         _decodeGesture 0338                      _isGestureAvailable 0ABD  
                    _setGestureWaitTime 0C3D                               _SPI_Write 0B1C  
                     __size_of_I2C_Stop 0003                             returnStop@p 0070  
                   ??_wireWriteDataByte 0029                        __CFG_FEXTOSC$OFF 0000  
                     _PWM_Output_Enable 09EC         processGestureData@ud_ratio_last 0035  
                   ?_isGestureAvailable 0070                     ?_setGestureWaitTime 0070  
                    ?_PWM_Output_Enable 0070                             _CCP1CONbits 0293  
                 SPI2_Exchange8bit@data 0020           __size_of_do_I2C_SEND_ADR_READ 0008  
                 setProximityGain@drive 002D                __size_of_PWM1_Initialize 000B  
                   ??_PWM_Output_Enable 0020        __end_of_i2c1_driver_isBufferFull 0A2E  
                           _do_I2C_IDLE 09F5                             _do_I2C_RCEN 09FA  
             __end_of_wireWriteDataByte 0B94                          _I2C_Write_Byte 0B94  
                  ??_isGestureAvailable 0029                          __end_of___wmul 0BCC  
                  ??_setGestureWaitTime 002A                           __pidataCOMMON 07FF  
                           ?_initialize 0070                             _I2C_ReStart 09A5  
                        _ADC_Initialize 0A3E                  i1_i2c1_driver_sendNACK 09C4  
                ?_OSCILLATOR_Initialize 0070                _setLightIntHighThreshold 0C64  
            __size_of_wireReadDataBlock 004A                         _gesture_motion_ 0168  
                       _SPI2_Initialize 0A20            __size_of_do_I2C_DO_NACK_STOP 0004  
           __size_of_processGestureData 02CF                          ?_decodeGesture 0070  
                        __end_of_strlen 0B79                 ?_do_I2C_DO_NACK_RESTART 0070  
                   start_initialization 002D                      setGestureGain@gain 002D  
                   _i2c_busCollisionISR 099F         __size_of_PIN_MANAGER_Initialize 0036  
             __end_of_PWM_Output_Enable 09F0                ?i1_i2c1_driver_getRXData 0070  
                            ?_SPI_Write 0070        setLightIntHighThreshold@val_high 002E  
                   _enableGestureSensor 06D1                     __end_of_enablePower 0A9D  
          __size_of_i2c1_driver_sendACK 0004                 ??_i2c1_driver_getRXData 0020  
              __end_of_setProximityGain 0D04            __size_of_i2c1_driver_restart 0003  
              processGestureData@d_last 0042            __size_of_i2c1_driver_startRX 0003  
              processGestureData@l_last 0043                             ??_I2C_Start 0020  
              processGestureData@r_last 0044                __size_of_PIN_MANAGER_IOC 0001  
              processGestureData@u_last 0041                 _processGestureData$1530 003F  
               _processGestureData$1527 0039                 _processGestureData$1528 003B  
               _processGestureData$1529 003D                    ?_i2c_busCollisionISR 0070  
                      __CFG_LPBOREN$OFF 0000                    __end_of_mssp1_setIRQ 0999  
                __end_of_I2C_Write_Byte 0BB0                        ??_PMD_Initialize 0020  
       setLightIntLowThreshold@val_high 002E                                ??___wmul 0024  
                  ?_enableGestureSensor 0070                             _CCPTMRSbits 029F  
                         ??_readGesture 0051                  __end_of_ADC_Initialize 0A46  
                         ?_do_I2C_RESET 0070                             __pdataBANK0 006F  
                           __pdataBANK2 0160                      setGestureMode@mode 002B  
               _setLightIntLowThreshold 0C8B               setGestureIntEnable@enable 002C  
              setAmbientLightGain@drive 002B                             ?_returnStop 0070  
                              ??_strlen 0022          __end_of_do_I2C_DO_NACK_RESTART 09E4  
                         ??_setLEDBoost 002A                           ??_setLEDDrive 002A  
                  _i2c1_driver_sendNACK 09E8                  setGestureIntEnable@val 002B  
                           __pbssCOMMON 0076                               ___latbits 0002  
                             _adcResult 0079                    _i2c1_driver_resetBus 0986  
                         __pcstackBANK0 0020                           __pcstackBANK1 00A0  
                         __pcstackBANK2 0120                __size_of_TMR2_Initialize 0008  
                             _do_I2C_RX 0E82                               _do_I2C_TX 0F12  
        __size_of_do_I2C_SEND_ADR_WRITE 0007           __size_ofi1_i2c1_driver_TXData 0005  
         __end_of_do_I2C_SEND_ADR_WRITE 0A20                   readGesture@fifo_data2 00A0  
             __size_of_i2c1_driver_open 000A                   readGesture@fifo_level 0058  
             __size_of_i2c1_driver_stop 0003                                ?_i2c_ISR 0070  
                   __size_of_initialize 0116                         _do_I2C_TX_EMPTY 0D85  
                __size_of_handleGesture 005A                   ??_i2c_busCollisionISR 0070  
                 __end_of_fsmStateTable 1020                  _PIN_MANAGER_Initialize 0E4C  
               ??i1_i2c1_driver_restart 0070                 ??i1_i2c1_driver_startRX 0070  
                       ?_I2C_Write_Byte 0070                   ??_enableGestureSensor 0030  
               __end_of_SPI2_Initialize 0A27                          ??_do_I2C_RESET 0070  
                              ?___awdiv 0026              __size_of_wireWriteDataByte 001B  
              ??_do_I2C_DO_ADDRESS_NACK 0070                         ?_ADC_Initialize 0070  
           _i2c1_driver_busCollisionISR 006C                     _setProxIntLowThresh 0B09  
                 __end_of_do_I2C_DO_ACK 09DC                       ??_PWM1_Initialize 0020  
          ??_INTERRUPT_InterruptManager 0076                _i2c1_driver_isBufferFull 0A27  
                              ?_getMode 0070                         ??_decodeGesture 0020  
                     ?_wireReadDataByte 0070              ??_do_I2C_SEND_RESTART_READ 0070  
                 ?_i2c1_driver_sendNACK 0070         __end_ofi1_i2c1_driver_getRXData 0996  
                      ??_mssp1_clearIRQ 0070                             _enablePower 0A8F  
                    ??_wireReadDataByte 0026                     __end_of_readGesture 06D1  
                 ?_i2c1_driver_resetBus 0070      __size_of_do_I2C_SEND_RESTART_WRITE 0004  
                              _I2C_Stop 09BA                ??_resetGestureParameters 0020  
                              ?_setMode 002B              __size_of_PWM_Output_Enable 0004  
                            ?_do_I2C_RX 0070                              ?_do_I2C_TX 0070  
                      __CFG_WDTE$SWDTEN 0000                             ??_SPI_Write 0021  
                     _i2c1_driver_start 09B1                  __size_of_Display_Clear 0011  
                   __end_of_setLEDBoost 0DE8                     __end_of_setLEDDrive 0CDB  
                  ?_setProxIntLowThresh 0070                   readGesture@bytes_read 0056  
                    ?_i2c1_driver_start 0070                          ___wmul@product 0024  
                              _LATCbits 010E                     __size_of_returnStop 0002  
                             clear_ram0 0A06                                _PIE0bits 0090  
                              _PIE1bits 0091            __size_of_setGestureIntEnable 002B  
            __end_of_PWM_Output_Disable 09C0                     _gesture_near_count_ 0060  
                   ??_i2c1_driver_start 0020     __size_of_INTERRUPT_InterruptManager 0027  
                              _PIR0bits 0010                                _PIR1bits 0011  
                 __end_of_I2C_Read_Byte 0A8F               ??_setLightIntLowThreshold 002C  
                              _SSP1CON1 0215                                _SSP1CON2 0216  
                              _SSP2CON1 021D                          setLEDBoost@val 002C  
                              _SSP1STAT 0214                                _SSP2STAT 021C  
            __end_ofi1_i2c1_driver_stop 0990                       ??_PIN_MANAGER_IOC 0070  
                 __end_of_I2C_Send_NACK 09B1                          setLEDDrive@val 002C  
      processGestureData@lr_ratio_first 0033                              _ADCON0bits 009D  
                     ___wmul@multiplier 0020                       ?_do_I2C_SEND_STOP 0070  
             processGestureData@d_first 0046                           _handleGesture 0735  
             __end_of_i2c1_driver_start 09B4                           ??_returnReset 0071  
                    ??_do_I2C_SEND_STOP 0070             __size_of_i2c1_driver_TXData 0006  
           __end_of_setAmbientLightGain 07FF               processGestureData@l_first 0047  
     __end_of_do_I2C_SEND_RESTART_WRITE 09D0                 __end_of_do_I2C_TX_EMPTY 0DB6  
          __end_of_setGestureExitThresh 0AF6               processGestureData@r_first 0048  
             processGestureData@u_first 0045                   ??_setProxIntLowThresh 002A  
          __size_of_do_I2C_SEND_RESTART 0004             __size_of_i2c1_driver_isNACK 0008  
                     setGestureGain@val 002C                   __size_of_mssp1_setIRQ 0003  
                     ??_TMR2_Initialize 0020                     _do_I2C_DO_NACK_STOP 09DC  
                      __size_of_i2c_ISR 0026              ??_setLightIntHighThreshold 002C  
           __size_of_setGestureLEDDrive 0032                          setMode@reg_val 002E  
        setLightIntLowThreshold@val_low 002D                            ?_do_I2C_IDLE 0070  
                         _Display_Clear 0AAC                            ?_do_I2C_RCEN 0070  
                     setGestureMode@val 002C                        ?_SPI2_Initialize 0070  
               ?i1_i2c1_driver_sendNACK 0070                 ??_OSCILLATOR_Initialize 0020  
                   _i2c1_driver_sendACK 09C0                        __size_of___awdiv 0052  
         __size_of_setProxIntHighThresh 0013                             _readGesture 05DE  
       __size_of_do_I2C_DO_ADDRESS_NACK 002B                     i2c1_driver_TXData@d 0020  
                ??_i2c1_driver_sendNACK 0020                            ??_initialize 0030  
                          ?_I2C_ReStart 0070                     _i2c1_driver_restart 09A2  
      setLightIntLowThreshold@threshold 002A                    ?_do_I2C_DO_NACK_STOP 0070  
                   _i2c1_driver_startRX 09AB                          ?_handleGesture 0070  
          __end_of_do_I2C_SEND_ADR_READ 0A3E                        __size_of_getMode 0009  
                ??_i2c1_driver_resetBus 0070                    readGesture@fifo_data 0120  
                           _setLEDBoost 0DB6                             _setLEDDrive 0CB2  
       __size_of_resetGestureParameters 0018                            _mssp1_setIRQ 0996  
       __end_of_setLightIntLowThreshold 0CB2                             ??_do_I2C_RX 0070  
                           ??_do_I2C_TX 0070                   setGestureLEDDrive@val 002C  
                      __size_of_setMode 004F                                __ptext10 0DE8  
                              __ptext11 0AE3                                __ptext20 078F  
                              __ptext12 0AD0                                __ptext21 0ABD  
                              __ptext13 07E1                                __ptext30 0D2F  
                              __ptext22 0338                                __ptext14 0A6F  
                              __ptext31 0B49                                __ptext23 0FB0  
                              __ptext15 0735                                __ptext40 09B7  
                              __ptext32 0A8F                                __ptext24 0B61  
                              __ptext16 05DE                                __ptext41 09B4  
                              __ptext33 0F61                                __ptext25 09EC  
                              __ptext17 0EC8                                __ptext50 09A2  
                              __ptext42 09B1                                __ptext34 0B79  
                              __ptext26 09BD                                __ptext18 0069  
                              __ptext51 0B31                                __ptext43 09AE  
                              __ptext35 0A66                                __ptext27 06D1  
                              __ptext19 0BB0                                __ptext60 0AAC  
                              __ptext52 09E4                                __ptext44 09E8  
                              __ptext36 0BCC                                __ptext28 0DB6  
                              __ptext61 0B1C                                __ptext53 0A56  
                              __ptext45 0A84                                __ptext37 0B94  
                              __ptext29 0C16                                __ptext70 0D04  
                              __ptext62 0A9D                                __ptext54 0A20  
                              __ptext46 09AB                                __ptext38 0A00  
                              __ptext71 09E0                                __ptext55 0A79  
                              __ptext47 0A27                                __ptext39 09BA  
                              __ptext80 09C8                                __ptext72 09DC  
                              __ptext64 099F                                __ptext56 0A4E  
                              __ptext48 09A8                                __ptext81 09F5  
                              __ptext73 09D8                                __ptext65 099C  
                              __ptext57 0E4C                                __ptext49 09A5  
                              __ptext90 0990                                __ptext82 0A12  
                              __ptext74 09FA                                __ptext66 0BF0  
                              __ptext58 0A46                                __ptext91 0002  
                              __ptext83 0D85                                __ptext75 0A19  
                              __ptext67 0999                                __ptext59 0A3E  
                              __ptext92 0988                                __ptext84 0996  
                              __ptext76 0A36                                __ptext68 0E82  
                              __ptext93 098D                                __ptext85 0A2E  
                              __ptext77 09D4                                __ptext69 0F12  
                              __ptext94 098A                                __ptext86 09F0  
                              __ptext78 09D0                                __ptext95 09C0  
                              __ptext87 0993                                __ptext79 09CC  
                              __ptext96 0985                                __ptext88 09C4  
                              __ptext89 0986                   _setGestureEnterThresh 0AD0  
                          _SSP1CON1bits 0215                            _SSP1CON2bits 0216  
        setGestureEnterThresh@threshold 002B                            _SSP2CON1bits 021D  
                  ?_i2c1_driver_sendACK 0070                    __end_of_do_I2C_RESET 0A19  
                  ?_i2c1_driver_restart 0070                     __end_of_returnReset 0004  
                      _i2c1_driver_open 0A6F                        _i2c1_driver_stop 09B7  
                         __size_of_main 002B                    ?_i2c1_driver_startRX 0070  
                     ?_setProximityGain 0070          __size_of_i2c1_driver_getRXData 0003  
         __end_of_i2c1_driver_getRXData 09AB                      __end_of_initialize 05DE  
                    ??_setProximityGain 002A        __size_ofi1_i2c1_driver_getRXData 0003  
                    _decodeGesture$1532 0022                      _decodeGesture$1533 0024  
                    _decodeGesture$1534 0026                      _decodeGesture$1535 0028  
                    _decodeGesture$1536 002A                      _decodeGesture$1537 002C  
                    _decodeGesture$1538 002E                      _decodeGesture$1539 0030  
                        ?_Display_Clear 0070          __end_ofi1_i2c1_driver_sendNACK 09C8  
                              int$flags 007E      __end_of_INTERRUPT_InterruptManager 002B  
            _INTERRUPT_InterruptManager 0004                            _SSP1STATbits 0214  
           __size_of_isGestureAvailable 0013                           Display_Name@i 002A  
                   setProximityGain@val 002C        __end_of_do_I2C_SEND_RESTART_READ 09CC  
           __size_of_setGestureWaitTime 0027              __end_of_processGestureData 0338  
                          ??_returnStop 0071                            _SSP2STATbits 021C  
                 ??_do_I2C_DO_NACK_STOP 0070                 __size_of_setGestureGain 0032  
                            _INTCONbits 000B                 __size_of_setGestureMode 0027  
            __size_of_i2c1_driver_start 0003                  setAmbientLightGain@val 002C  
                 ??_i2c1_driver_sendACK 0070                        ?_do_I2C_TX_EMPTY 0070  
               __size_of_WDT_Initialize 0004                  _do_I2C_DO_ADDRESS_NACK 0D04  
                              intlevel1 0000                   ??_i2c1_driver_restart 0020  
                 ??_i2c1_driver_startRX 0020                 ?_PIN_MANAGER_Initialize 0070  
                      ??_I2C_Write_Byte 0021                       __CFG_CLKOUTEN$OFF 0000  
                    __end_of_returnStop 098A                         _PWM1_Initialize 0A79  
                      ??_ADC_Initialize 0020                  _resetGestureParameters 0B49  
            ??_i2c1_driver_isBufferFull 0020                           ?_Display_Name 0025  
        __size_ofi1_i2c1_driver_restart 0003           __end_ofi1_i2c1_driver_restart 098D  
        __size_ofi1_i2c1_driver_startRX 0003            __end_ofi1_i2c1_driver_TXData 09F5  
         __end_ofi1_i2c1_driver_startRX 0993                    _setGestureExitThresh 0AE3  
                       ??_handleGesture 005B                           __pstringtext1 1000  
                         __pstringtext2 1030                           __pstringtext3 103D  
                         __pstringtext4 1049                           __pstringtext5 0000  
                            _SSP1DATPPS 0E21                            ?_enablePower 0070  
                            _SSP2DATPPS 0E1E                              _SSP1CLKPPS 0E20  
                   _setGestureIntEnable 0D2F                              _SSP2CLKPPS 0E1D  
                      setLEDBoost@boost 002D                  ?_setGestureEnterThresh 0070  
                           _returnReset 0002          __end_of_PIN_MANAGER_Initialize 0E82  
           __end_of_i2c_busCollisionISR 09A2               __size_of_wireReadDataByte 0024  
                      setLEDDrive@drive 002D                     processGestureData@i 004D  
                       _PIN_MANAGER_IOC 0985             __end_of_enableGestureSensor 0735  
                 _do_I2C_SEND_ADR_WRITE 0A19                    ?_setGestureIntEnable 0070  
                  _do_I2C_SEND_ADR_READ 0A36                         ??_Display_Clear 0023  
      __end_of_setLightIntHighThreshold 0C8B                          ??_Display_Name 0027  
