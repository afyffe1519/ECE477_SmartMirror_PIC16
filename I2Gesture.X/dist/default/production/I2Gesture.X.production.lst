

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Wed Apr 17 09:58:54 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F18345
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1
    10                           	psect	nvBANK3,global,class=BANK3,space=1,delta=1
    11                           	psect	stringtext2,global,class=STRCODE,delta=2
    12                           	psect	stringtext3,global,class=STRCODE,delta=2
    13                           	psect	stringtext4,global,class=STRCODE,delta=2
    14                           	psect	stringtext5,global,class=STRCODE,delta=2
    15                           	psect	stringtext6,global,class=STRCODE,delta=2
    16                           	psect	cinit,global,class=CODE,merge=1,delta=2
    17                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    21                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    22                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    23                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    24                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    25                           	psect	inittext,global,class=CODE,delta=2
    26                           	psect	clrtext,global,class=CODE,delta=2
    27                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    28                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    29                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    30                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    31                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    32                           	psect	text1,local,class=CODE,merge=1,delta=2
    33                           	psect	text2,local,class=CODE,merge=1,delta=2
    34                           	psect	text3,local,class=CODE,merge=1,delta=2
    35                           	psect	text4,local,class=CODE,merge=1,delta=2
    36                           	psect	text5,local,class=CODE,merge=1,delta=2
    37                           	psect	text6,local,class=CODE,merge=1,delta=2
    38                           	psect	text7,local,class=CODE,merge=1,delta=2
    39                           	psect	text8,local,class=CODE,merge=1,delta=2
    40                           	psect	text9,local,class=CODE,merge=1,delta=2
    41                           	psect	text10,local,class=CODE,merge=1,delta=2
    42                           	psect	text11,local,class=CODE,merge=1,delta=2
    43                           	psect	text12,local,class=CODE,merge=1,delta=2
    44                           	psect	text13,local,class=CODE,merge=1,delta=2
    45                           	psect	text14,local,class=CODE,merge=1,delta=2
    46                           	psect	text15,local,class=CODE,merge=1,delta=2
    47                           	psect	text16,local,class=CODE,merge=1,delta=2
    48                           	psect	text17,local,class=CODE,merge=1,delta=2
    49                           	psect	text18,local,class=CODE,merge=1,delta=2
    50                           	psect	text19,local,class=CODE,merge=1,delta=2,group=1
    51                           	psect	text20,local,class=CODE,merge=1,delta=2,group=1
    52                           	psect	text21,local,class=CODE,merge=1,delta=2
    53                           	psect	text22,local,class=CODE,merge=1,delta=2
    54                           	psect	text23,local,class=CODE,merge=1,delta=2
    55                           	psect	text24,local,class=CODE,merge=1,delta=2
    56                           	psect	text25,local,class=CODE,merge=1,delta=2
    57                           	psect	text26,local,class=CODE,merge=1,delta=2
    58                           	psect	text27,local,class=CODE,merge=1,delta=2
    59                           	psect	text28,local,class=CODE,merge=1,delta=2
    60                           	psect	text29,local,class=CODE,merge=1,delta=2
    61                           	psect	text30,local,class=CODE,merge=1,delta=2
    62                           	psect	text31,local,class=CODE,merge=1,delta=2
    63                           	psect	text32,local,class=CODE,merge=1,delta=2
    64                           	psect	text33,local,class=CODE,merge=1,delta=2
    65                           	psect	text34,local,class=CODE,merge=1,inline,delta=2
    66                           	psect	text35,local,class=CODE,merge=1,delta=2
    67                           	psect	text36,local,class=CODE,merge=1,inline,delta=2
    68                           	psect	text37,local,class=CODE,merge=1,delta=2
    69                           	psect	text38,local,class=CODE,merge=1,inline,delta=2
    70                           	psect	text39,local,class=CODE,merge=1,delta=2
    71                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    72                           	psect	text41,local,class=CODE,merge=1,delta=2
    73                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text43,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text44,local,class=CODE,merge=1,inline,delta=2
    76                           	psect	text45,local,class=CODE,merge=1,delta=2
    77                           	psect	text46,local,class=CODE,merge=1,inline,delta=2
    78                           	psect	text47,local,class=CODE,merge=1,delta=2
    79                           	psect	text48,local,class=CODE,merge=1,delta=2
    80                           	psect	text49,local,class=CODE,merge=1,delta=2
    81                           	psect	text50,local,class=CODE,merge=1,delta=2
    82                           	psect	text51,local,class=CODE,merge=1,delta=2
    83                           	psect	text52,local,class=CODE,merge=1,delta=2
    84                           	psect	text53,local,class=CODE,merge=1,delta=2
    85                           	psect	text54,local,class=CODE,merge=1,delta=2
    86                           	psect	text55,local,class=CODE,merge=1,delta=2
    87                           	psect	text56,local,class=CODE,merge=1,delta=2
    88                           	psect	text57,local,class=CODE,merge=1,delta=2
    89                           	psect	text58,local,class=CODE,merge=1,delta=2
    90                           	psect	text59,local,class=CODE,merge=1,delta=2
    91                           	psect	text60,local,class=CODE,merge=1,delta=2
    92                           	psect	text61,local,class=CODE,merge=1,delta=2
    93                           	psect	text62,local,class=CODE,merge=1,delta=2
    94                           	psect	text63,local,class=CODE,merge=1,delta=2
    95                           	psect	text64,local,class=CODE,merge=1,delta=2
    96                           	psect	text65,local,class=CODE,merge=1,delta=2
    97                           	psect	text66,local,class=CODE,merge=1,delta=2
    98                           	psect	text67,local,class=CODE,merge=1,delta=2
    99                           	psect	text68,local,class=CODE,merge=1,delta=2
   100                           	psect	text69,local,class=CODE,merge=1,delta=2,group=2
   101                           	psect	text70,local,class=CODE,merge=1,delta=2
   102                           	psect	text71,local,class=CODE,merge=1,delta=2
   103                           	psect	text72,local,class=CODE,merge=1,delta=2
   104                           	psect	text73,local,class=CODE,merge=1,delta=2
   105                           	psect	intentry,global,class=CODE,delta=2
   106                           	psect	text75,local,class=CODE,merge=1,delta=2
   107                           	psect	text76,local,class=CODE,merge=1,inline,delta=2
   108                           	psect	text77,local,class=CODE,merge=1,delta=2
   109                           	psect	text78,local,class=CODE,merge=1,inline,delta=2
   110                           	psect	text79,local,class=CODE,merge=1,delta=2
   111                           	psect	text80,local,class=CODE,merge=1,delta=2
   112                           	psect	text81,local,class=CODE,merge=1,delta=2
   113                           	psect	text82,local,class=CODE,merge=1,delta=2
   114                           	psect	text83,local,class=CODE,merge=1,delta=2
   115                           	psect	text84,local,class=CODE,merge=1,delta=2
   116                           	psect	text85,local,class=CODE,merge=1,delta=2
   117                           	psect	text86,local,class=CODE,merge=1,delta=2
   118                           	psect	text87,local,class=CODE,merge=1,delta=2
   119                           	psect	text88,local,class=CODE,merge=1,delta=2
   120                           	psect	text89,local,class=CODE,merge=1,delta=2
   121                           	psect	text90,local,class=CODE,merge=1,delta=2
   122                           	psect	text91,local,class=CODE,merge=1,delta=2
   123                           	psect	text92,local,class=CODE,merge=1,delta=2
   124                           	psect	text93,local,class=CODE,merge=1,delta=2
   125                           	psect	text94,local,class=CODE,merge=1,delta=2
   126                           	psect	text95,local,class=CODE,merge=1,inline,delta=2
   127                           	psect	text96,local,class=CODE,merge=1,inline,delta=2
   128                           	psect	text97,local,class=CODE,merge=1,inline,delta=2
   129                           	psect	text98,local,class=CODE,merge=1,inline,delta=2
   130                           	psect	text99,local,class=CODE,merge=1,inline,delta=2
   131                           	psect	text100,local,class=CODE,merge=1,inline,delta=2
   132                           	psect	text101,local,class=CODE,merge=1,inline,delta=2
   133                           	psect	text102,local,class=CODE,merge=1,delta=2
   134                           	psect	text103,local,class=CODE,merge=1,delta=2
   135                           	psect	text104,local,class=CODE,merge=1,inline,delta=2
   136                           	psect	text105,local,class=CODE,merge=1,inline,delta=2
   137                           	psect	text106,local,class=CODE,merge=1,inline,delta=2
   138                           	psect	text107,local,class=CODE,merge=1,delta=2
   139                           	psect	text108,local,class=CODE,merge=1,delta=2
   140                           	psect	text109,local,class=CODE,merge=1,delta=2
   141                           	psect	text110,local,class=CODE,merge=1,delta=2
   142                           	psect	text111,local,class=CODE,merge=1,delta=2
   143                           	psect	text112,local,class=CODE,merge=1,delta=2
   144                           	psect	text113,local,class=CODE,merge=1,delta=2
   145                           	psect	text114,local,class=CODE,merge=1,delta=2
   146                           	psect	text115,local,class=CODE,merge=1,delta=2
   147                           	dabs	1,0x7E,2
   148  0000                     
   149                           ; Version 2.05
   150                           ; Generated 20/12/2018 GMT
   151                           ; 
   152                           ; Copyright © 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
   153                           ; All rights reserved.
   154                           ; 
   155                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   156                           ; 
   157                           ; Redistribution and use in source and binary forms, with or without modification, are
   158                           ; permitted provided that the following conditions are met:
   159                           ; 
   160                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   161                           ;        conditions and the following disclaimer.
   162                           ; 
   163                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   164                           ;        of conditions and the following disclaimer in the documentation and/or other
   165                           ;        materials provided with the distribution.
   166                           ; 
   167                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   168                           ;        software without specific prior written permission.
   169                           ; 
   170                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   171                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   172                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   173                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   174                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   175                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   176                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   177                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   178                           ; 
   179                           ; 
   180                           ; Code-generator required, PIC16F18345 Definitions
   181                           ; 
   182                           ; SFR Addresses
   183  0000                     	;# 
   184  0001                     	;# 
   185  0002                     	;# 
   186  0003                     	;# 
   187  0004                     	;# 
   188  0005                     	;# 
   189  0006                     	;# 
   190  0007                     	;# 
   191  0008                     	;# 
   192  0009                     	;# 
   193  000A                     	;# 
   194  000B                     	;# 
   195  000C                     	;# 
   196  000D                     	;# 
   197  000E                     	;# 
   198  0010                     	;# 
   199  0011                     	;# 
   200  0012                     	;# 
   201  0013                     	;# 
   202  0014                     	;# 
   203  0015                     	;# 
   204  0015                     	;# 
   205  0016                     	;# 
   206  0016                     	;# 
   207  0017                     	;# 
   208  0018                     	;# 
   209  0019                     	;# 
   210  0019                     	;# 
   211  001A                     	;# 
   212  001B                     	;# 
   213  001C                     	;# 
   214  001D                     	;# 
   215  001E                     	;# 
   216  001F                     	;# 
   217  008C                     	;# 
   218  008D                     	;# 
   219  008E                     	;# 
   220  0090                     	;# 
   221  0091                     	;# 
   222  0092                     	;# 
   223  0093                     	;# 
   224  0094                     	;# 
   225  0097                     	;# 
   226  009B                     	;# 
   227  009B                     	;# 
   228  009C                     	;# 
   229  009D                     	;# 
   230  009E                     	;# 
   231  009F                     	;# 
   232  010C                     	;# 
   233  010D                     	;# 
   234  010E                     	;# 
   235  0111                     	;# 
   236  0112                     	;# 
   237  0113                     	;# 
   238  0114                     	;# 
   239  0115                     	;# 
   240  0116                     	;# 
   241  0117                     	;# 
   242  0118                     	;# 
   243  0119                     	;# 
   244  018C                     	;# 
   245  018D                     	;# 
   246  018E                     	;# 
   247  0197                     	;# 
   248  0199                     	;# 
   249  0199                     	;# 
   250  0199                     	;# 
   251  019A                     	;# 
   252  019A                     	;# 
   253  019A                     	;# 
   254  019B                     	;# 
   255  019B                     	;# 
   256  019B                     	;# 
   257  019B                     	;# 
   258  019B                     	;# 
   259  019C                     	;# 
   260  019C                     	;# 
   261  019C                     	;# 
   262  019D                     	;# 
   263  019D                     	;# 
   264  019D                     	;# 
   265  019E                     	;# 
   266  019E                     	;# 
   267  019E                     	;# 
   268  019F                     	;# 
   269  019F                     	;# 
   270  019F                     	;# 
   271  019F                     	;# 
   272  019F                     	;# 
   273  020C                     	;# 
   274  020D                     	;# 
   275  020E                     	;# 
   276  0211                     	;# 
   277  0211                     	;# 
   278  0212                     	;# 
   279  0212                     	;# 
   280  0213                     	;# 
   281  0213                     	;# 
   282  0214                     	;# 
   283  0214                     	;# 
   284  0215                     	;# 
   285  0215                     	;# 
   286  0215                     	;# 
   287  0215                     	;# 
   288  0216                     	;# 
   289  0216                     	;# 
   290  0217                     	;# 
   291  0217                     	;# 
   292  0219                     	;# 
   293  021A                     	;# 
   294  021B                     	;# 
   295  021C                     	;# 
   296  021D                     	;# 
   297  021D                     	;# 
   298  021E                     	;# 
   299  021F                     	;# 
   300  028C                     	;# 
   301  028D                     	;# 
   302  028E                     	;# 
   303  0291                     	;# 
   304  0291                     	;# 
   305  0292                     	;# 
   306  0293                     	;# 
   307  0294                     	;# 
   308  0295                     	;# 
   309  0295                     	;# 
   310  0296                     	;# 
   311  0297                     	;# 
   312  0298                     	;# 
   313  029F                     	;# 
   314  030C                     	;# 
   315  030D                     	;# 
   316  030E                     	;# 
   317  0311                     	;# 
   318  0311                     	;# 
   319  0312                     	;# 
   320  0313                     	;# 
   321  0314                     	;# 
   322  0315                     	;# 
   323  0315                     	;# 
   324  0316                     	;# 
   325  0317                     	;# 
   326  0318                     	;# 
   327  038C                     	;# 
   328  038D                     	;# 
   329  038E                     	;# 
   330  0391                     	;# 
   331  0392                     	;# 
   332  0393                     	;# 
   333  0394                     	;# 
   334  0395                     	;# 
   335  0396                     	;# 
   336  0397                     	;# 
   337  0398                     	;# 
   338  0399                     	;# 
   339  039A                     	;# 
   340  039C                     	;# 
   341  039D                     	;# 
   342  039E                     	;# 
   343  039F                     	;# 
   344  0411                     	;# 
   345  0411                     	;# 
   346  0412                     	;# 
   347  0413                     	;# 
   348  0414                     	;# 
   349  0415                     	;# 
   350  0416                     	;# 
   351  0417                     	;# 
   352  0418                     	;# 
   353  0418                     	;# 
   354  0419                     	;# 
   355  041A                     	;# 
   356  041B                     	;# 
   357  041C                     	;# 
   358  041D                     	;# 
   359  041E                     	;# 
   360  041F                     	;# 
   361  0498                     	;# 
   362  0498                     	;# 
   363  0499                     	;# 
   364  049A                     	;# 
   365  049B                     	;# 
   366  049B                     	;# 
   367  049C                     	;# 
   368  049D                     	;# 
   369  049E                     	;# 
   370  049F                     	;# 
   371  0617                     	;# 
   372  0618                     	;# 
   373  0619                     	;# 
   374  0619                     	;# 
   375  061A                     	;# 
   376  061B                     	;# 
   377  061C                     	;# 
   378  061C                     	;# 
   379  061F                     	;# 
   380  0691                     	;# 
   381  0692                     	;# 
   382  0693                     	;# 
   383  0694                     	;# 
   384  0695                     	;# 
   385  0696                     	;# 
   386  0697                     	;# 
   387  0698                     	;# 
   388  0699                     	;# 
   389  0711                     	;# 
   390  0712                     	;# 
   391  0713                     	;# 
   392  0714                     	;# 
   393  0715                     	;# 
   394  0716                     	;# 
   395  0717                     	;# 
   396  0718                     	;# 
   397  0719                     	;# 
   398  0891                     	;# 
   399  0891                     	;# 
   400  0891                     	;# 
   401  0891                     	;# 
   402  0891                     	;# 
   403  0891                     	;# 
   404  0892                     	;# 
   405  0892                     	;# 
   406  0892                     	;# 
   407  0893                     	;# 
   408  0893                     	;# 
   409  0893                     	;# 
   410  0893                     	;# 
   411  0893                     	;# 
   412  0893                     	;# 
   413  0894                     	;# 
   414  0894                     	;# 
   415  0894                     	;# 
   416  0895                     	;# 
   417  0895                     	;# 
   418  0895                     	;# 
   419  0896                     	;# 
   420  0896                     	;# 
   421  0896                     	;# 
   422  089B                     	;# 
   423  0911                     	;# 
   424  0912                     	;# 
   425  0913                     	;# 
   426  0914                     	;# 
   427  0915                     	;# 
   428  0916                     	;# 
   429  0918                     	;# 
   430  0919                     	;# 
   431  091A                     	;# 
   432  091B                     	;# 
   433  091C                     	;# 
   434  091D                     	;# 
   435  091E                     	;# 
   436  091F                     	;# 
   437  0E0F                     	;# 
   438  0E10                     	;# 
   439  0E11                     	;# 
   440  0E12                     	;# 
   441  0E13                     	;# 
   442  0E14                     	;# 
   443  0E15                     	;# 
   444  0E16                     	;# 
   445  0E17                     	;# 
   446  0E18                     	;# 
   447  0E19                     	;# 
   448  0E1A                     	;# 
   449  0E1B                     	;# 
   450  0E1C                     	;# 
   451  0E1D                     	;# 
   452  0E1E                     	;# 
   453  0E1F                     	;# 
   454  0E20                     	;# 
   455  0E21                     	;# 
   456  0E22                     	;# 
   457  0E24                     	;# 
   458  0E25                     	;# 
   459  0E28                     	;# 
   460  0E29                     	;# 
   461  0E2A                     	;# 
   462  0E2B                     	;# 
   463  0E2C                     	;# 
   464  0E2D                     	;# 
   465  0E2E                     	;# 
   466  0E2F                     	;# 
   467  0E90                     	;# 
   468  0E91                     	;# 
   469  0E92                     	;# 
   470  0E94                     	;# 
   471  0E95                     	;# 
   472  0E9C                     	;# 
   473  0E9D                     	;# 
   474  0E9E                     	;# 
   475  0E9F                     	;# 
   476  0EA0                     	;# 
   477  0EA1                     	;# 
   478  0EA2                     	;# 
   479  0EA3                     	;# 
   480  0EA4                     	;# 
   481  0EA5                     	;# 
   482  0EA6                     	;# 
   483  0EA7                     	;# 
   484  0F0F                     	;# 
   485  0F10                     	;# 
   486  0F11                     	;# 
   487  0F12                     	;# 
   488  0F13                     	;# 
   489  0F14                     	;# 
   490  0F15                     	;# 
   491  0F16                     	;# 
   492  0F17                     	;# 
   493  0F18                     	;# 
   494  0F19                     	;# 
   495  0F1A                     	;# 
   496  0F1B                     	;# 
   497  0F1C                     	;# 
   498  0F1D                     	;# 
   499  0F1E                     	;# 
   500  0F1F                     	;# 
   501  0F20                     	;# 
   502  0F21                     	;# 
   503  0F22                     	;# 
   504  0F23                     	;# 
   505  0F24                     	;# 
   506  0F25                     	;# 
   507  0F26                     	;# 
   508  0F27                     	;# 
   509  0F28                     	;# 
   510  0F29                     	;# 
   511  0F2A                     	;# 
   512  0F2B                     	;# 
   513  0F2C                     	;# 
   514  0F2D                     	;# 
   515  0F2E                     	;# 
   516  0F2F                     	;# 
   517  0F30                     	;# 
   518  0F31                     	;# 
   519  0F32                     	;# 
   520  0F33                     	;# 
   521  0F34                     	;# 
   522  0F35                     	;# 
   523  0F36                     	;# 
   524  0F37                     	;# 
   525  0FE4                     	;# 
   526  0FE5                     	;# 
   527  0FE6                     	;# 
   528  0FE7                     	;# 
   529  0FE8                     	;# 
   530  0FE9                     	;# 
   531  0FEA                     	;# 
   532  0FEB                     	;# 
   533  0FED                     	;# 
   534  0FEE                     	;# 
   535  0FEF                     	;# 
   536  0000                     	;# 
   537  0001                     	;# 
   538  0002                     	;# 
   539  0003                     	;# 
   540  0004                     	;# 
   541  0005                     	;# 
   542  0006                     	;# 
   543  0007                     	;# 
   544  0008                     	;# 
   545  0009                     	;# 
   546  000A                     	;# 
   547  000B                     	;# 
   548  000C                     	;# 
   549  000D                     	;# 
   550  000E                     	;# 
   551  0010                     	;# 
   552  0011                     	;# 
   553  0012                     	;# 
   554  0013                     	;# 
   555  0014                     	;# 
   556  0015                     	;# 
   557  0015                     	;# 
   558  0016                     	;# 
   559  0016                     	;# 
   560  0017                     	;# 
   561  0018                     	;# 
   562  0019                     	;# 
   563  0019                     	;# 
   564  001A                     	;# 
   565  001B                     	;# 
   566  001C                     	;# 
   567  001D                     	;# 
   568  001E                     	;# 
   569  001F                     	;# 
   570  008C                     	;# 
   571  008D                     	;# 
   572  008E                     	;# 
   573  0090                     	;# 
   574  0091                     	;# 
   575  0092                     	;# 
   576  0093                     	;# 
   577  0094                     	;# 
   578  0097                     	;# 
   579  009B                     	;# 
   580  009B                     	;# 
   581  009C                     	;# 
   582  009D                     	;# 
   583  009E                     	;# 
   584  009F                     	;# 
   585  010C                     	;# 
   586  010D                     	;# 
   587  010E                     	;# 
   588  0111                     	;# 
   589  0112                     	;# 
   590  0113                     	;# 
   591  0114                     	;# 
   592  0115                     	;# 
   593  0116                     	;# 
   594  0117                     	;# 
   595  0118                     	;# 
   596  0119                     	;# 
   597  018C                     	;# 
   598  018D                     	;# 
   599  018E                     	;# 
   600  0197                     	;# 
   601  0199                     	;# 
   602  0199                     	;# 
   603  0199                     	;# 
   604  019A                     	;# 
   605  019A                     	;# 
   606  019A                     	;# 
   607  019B                     	;# 
   608  019B                     	;# 
   609  019B                     	;# 
   610  019B                     	;# 
   611  019B                     	;# 
   612  019C                     	;# 
   613  019C                     	;# 
   614  019C                     	;# 
   615  019D                     	;# 
   616  019D                     	;# 
   617  019D                     	;# 
   618  019E                     	;# 
   619  019E                     	;# 
   620  019E                     	;# 
   621  019F                     	;# 
   622  019F                     	;# 
   623  019F                     	;# 
   624  019F                     	;# 
   625  019F                     	;# 
   626  020C                     	;# 
   627  020D                     	;# 
   628  020E                     	;# 
   629  0211                     	;# 
   630  0211                     	;# 
   631  0212                     	;# 
   632  0212                     	;# 
   633  0213                     	;# 
   634  0213                     	;# 
   635  0214                     	;# 
   636  0214                     	;# 
   637  0215                     	;# 
   638  0215                     	;# 
   639  0215                     	;# 
   640  0215                     	;# 
   641  0216                     	;# 
   642  0216                     	;# 
   643  0217                     	;# 
   644  0217                     	;# 
   645  0219                     	;# 
   646  021A                     	;# 
   647  021B                     	;# 
   648  021C                     	;# 
   649  021D                     	;# 
   650  021D                     	;# 
   651  021E                     	;# 
   652  021F                     	;# 
   653  028C                     	;# 
   654  028D                     	;# 
   655  028E                     	;# 
   656  0291                     	;# 
   657  0291                     	;# 
   658  0292                     	;# 
   659  0293                     	;# 
   660  0294                     	;# 
   661  0295                     	;# 
   662  0295                     	;# 
   663  0296                     	;# 
   664  0297                     	;# 
   665  0298                     	;# 
   666  029F                     	;# 
   667  030C                     	;# 
   668  030D                     	;# 
   669  030E                     	;# 
   670  0311                     	;# 
   671  0311                     	;# 
   672  0312                     	;# 
   673  0313                     	;# 
   674  0314                     	;# 
   675  0315                     	;# 
   676  0315                     	;# 
   677  0316                     	;# 
   678  0317                     	;# 
   679  0318                     	;# 
   680  038C                     	;# 
   681  038D                     	;# 
   682  038E                     	;# 
   683  0391                     	;# 
   684  0392                     	;# 
   685  0393                     	;# 
   686  0394                     	;# 
   687  0395                     	;# 
   688  0396                     	;# 
   689  0397                     	;# 
   690  0398                     	;# 
   691  0399                     	;# 
   692  039A                     	;# 
   693  039C                     	;# 
   694  039D                     	;# 
   695  039E                     	;# 
   696  039F                     	;# 
   697  0411                     	;# 
   698  0411                     	;# 
   699  0412                     	;# 
   700  0413                     	;# 
   701  0414                     	;# 
   702  0415                     	;# 
   703  0416                     	;# 
   704  0417                     	;# 
   705  0418                     	;# 
   706  0418                     	;# 
   707  0419                     	;# 
   708  041A                     	;# 
   709  041B                     	;# 
   710  041C                     	;# 
   711  041D                     	;# 
   712  041E                     	;# 
   713  041F                     	;# 
   714  0498                     	;# 
   715  0498                     	;# 
   716  0499                     	;# 
   717  049A                     	;# 
   718  049B                     	;# 
   719  049B                     	;# 
   720  049C                     	;# 
   721  049D                     	;# 
   722  049E                     	;# 
   723  049F                     	;# 
   724  0617                     	;# 
   725  0618                     	;# 
   726  0619                     	;# 
   727  0619                     	;# 
   728  061A                     	;# 
   729  061B                     	;# 
   730  061C                     	;# 
   731  061C                     	;# 
   732  061F                     	;# 
   733  0691                     	;# 
   734  0692                     	;# 
   735  0693                     	;# 
   736  0694                     	;# 
   737  0695                     	;# 
   738  0696                     	;# 
   739  0697                     	;# 
   740  0698                     	;# 
   741  0699                     	;# 
   742  0711                     	;# 
   743  0712                     	;# 
   744  0713                     	;# 
   745  0714                     	;# 
   746  0715                     	;# 
   747  0716                     	;# 
   748  0717                     	;# 
   749  0718                     	;# 
   750  0719                     	;# 
   751  0891                     	;# 
   752  0891                     	;# 
   753  0891                     	;# 
   754  0891                     	;# 
   755  0891                     	;# 
   756  0891                     	;# 
   757  0892                     	;# 
   758  0892                     	;# 
   759  0892                     	;# 
   760  0893                     	;# 
   761  0893                     	;# 
   762  0893                     	;# 
   763  0893                     	;# 
   764  0893                     	;# 
   765  0893                     	;# 
   766  0894                     	;# 
   767  0894                     	;# 
   768  0894                     	;# 
   769  0895                     	;# 
   770  0895                     	;# 
   771  0895                     	;# 
   772  0896                     	;# 
   773  0896                     	;# 
   774  0896                     	;# 
   775  089B                     	;# 
   776  0911                     	;# 
   777  0912                     	;# 
   778  0913                     	;# 
   779  0914                     	;# 
   780  0915                     	;# 
   781  0916                     	;# 
   782  0918                     	;# 
   783  0919                     	;# 
   784  091A                     	;# 
   785  091B                     	;# 
   786  091C                     	;# 
   787  091D                     	;# 
   788  091E                     	;# 
   789  091F                     	;# 
   790  0E0F                     	;# 
   791  0E10                     	;# 
   792  0E11                     	;# 
   793  0E12                     	;# 
   794  0E13                     	;# 
   795  0E14                     	;# 
   796  0E15                     	;# 
   797  0E16                     	;# 
   798  0E17                     	;# 
   799  0E18                     	;# 
   800  0E19                     	;# 
   801  0E1A                     	;# 
   802  0E1B                     	;# 
   803  0E1C                     	;# 
   804  0E1D                     	;# 
   805  0E1E                     	;# 
   806  0E1F                     	;# 
   807  0E20                     	;# 
   808  0E21                     	;# 
   809  0E22                     	;# 
   810  0E24                     	;# 
   811  0E25                     	;# 
   812  0E28                     	;# 
   813  0E29                     	;# 
   814  0E2A                     	;# 
   815  0E2B                     	;# 
   816  0E2C                     	;# 
   817  0E2D                     	;# 
   818  0E2E                     	;# 
   819  0E2F                     	;# 
   820  0E90                     	;# 
   821  0E91                     	;# 
   822  0E92                     	;# 
   823  0E94                     	;# 
   824  0E95                     	;# 
   825  0E9C                     	;# 
   826  0E9D                     	;# 
   827  0E9E                     	;# 
   828  0E9F                     	;# 
   829  0EA0                     	;# 
   830  0EA1                     	;# 
   831  0EA2                     	;# 
   832  0EA3                     	;# 
   833  0EA4                     	;# 
   834  0EA5                     	;# 
   835  0EA6                     	;# 
   836  0EA7                     	;# 
   837  0F0F                     	;# 
   838  0F10                     	;# 
   839  0F11                     	;# 
   840  0F12                     	;# 
   841  0F13                     	;# 
   842  0F14                     	;# 
   843  0F15                     	;# 
   844  0F16                     	;# 
   845  0F17                     	;# 
   846  0F18                     	;# 
   847  0F19                     	;# 
   848  0F1A                     	;# 
   849  0F1B                     	;# 
   850  0F1C                     	;# 
   851  0F1D                     	;# 
   852  0F1E                     	;# 
   853  0F1F                     	;# 
   854  0F20                     	;# 
   855  0F21                     	;# 
   856  0F22                     	;# 
   857  0F23                     	;# 
   858  0F24                     	;# 
   859  0F25                     	;# 
   860  0F26                     	;# 
   861  0F27                     	;# 
   862  0F28                     	;# 
   863  0F29                     	;# 
   864  0F2A                     	;# 
   865  0F2B                     	;# 
   866  0F2C                     	;# 
   867  0F2D                     	;# 
   868  0F2E                     	;# 
   869  0F2F                     	;# 
   870  0F30                     	;# 
   871  0F31                     	;# 
   872  0F32                     	;# 
   873  0F33                     	;# 
   874  0F34                     	;# 
   875  0F35                     	;# 
   876  0F36                     	;# 
   877  0F37                     	;# 
   878  0FE4                     	;# 
   879  0FE5                     	;# 
   880  0FE6                     	;# 
   881  0FE7                     	;# 
   882  0FE8                     	;# 
   883  0FE9                     	;# 
   884  0FEA                     	;# 
   885  0FEB                     	;# 
   886  0FED                     	;# 
   887  0FEE                     	;# 
   888  0FEF                     	;# 
   889  0000                     	;# 
   890  0001                     	;# 
   891  0002                     	;# 
   892  0003                     	;# 
   893  0004                     	;# 
   894  0005                     	;# 
   895  0006                     	;# 
   896  0007                     	;# 
   897  0008                     	;# 
   898  0009                     	;# 
   899  000A                     	;# 
   900  000B                     	;# 
   901  000C                     	;# 
   902  000D                     	;# 
   903  000E                     	;# 
   904  0010                     	;# 
   905  0011                     	;# 
   906  0012                     	;# 
   907  0013                     	;# 
   908  0014                     	;# 
   909  0015                     	;# 
   910  0015                     	;# 
   911  0016                     	;# 
   912  0016                     	;# 
   913  0017                     	;# 
   914  0018                     	;# 
   915  0019                     	;# 
   916  0019                     	;# 
   917  001A                     	;# 
   918  001B                     	;# 
   919  001C                     	;# 
   920  001D                     	;# 
   921  001E                     	;# 
   922  001F                     	;# 
   923  008C                     	;# 
   924  008D                     	;# 
   925  008E                     	;# 
   926  0090                     	;# 
   927  0091                     	;# 
   928  0092                     	;# 
   929  0093                     	;# 
   930  0094                     	;# 
   931  0097                     	;# 
   932  009B                     	;# 
   933  009B                     	;# 
   934  009C                     	;# 
   935  009D                     	;# 
   936  009E                     	;# 
   937  009F                     	;# 
   938  010C                     	;# 
   939  010D                     	;# 
   940  010E                     	;# 
   941  0111                     	;# 
   942  0112                     	;# 
   943  0113                     	;# 
   944  0114                     	;# 
   945  0115                     	;# 
   946  0116                     	;# 
   947  0117                     	;# 
   948  0118                     	;# 
   949  0119                     	;# 
   950  018C                     	;# 
   951  018D                     	;# 
   952  018E                     	;# 
   953  0197                     	;# 
   954  0199                     	;# 
   955  0199                     	;# 
   956  0199                     	;# 
   957  019A                     	;# 
   958  019A                     	;# 
   959  019A                     	;# 
   960  019B                     	;# 
   961  019B                     	;# 
   962  019B                     	;# 
   963  019B                     	;# 
   964  019B                     	;# 
   965  019C                     	;# 
   966  019C                     	;# 
   967  019C                     	;# 
   968  019D                     	;# 
   969  019D                     	;# 
   970  019D                     	;# 
   971  019E                     	;# 
   972  019E                     	;# 
   973  019E                     	;# 
   974  019F                     	;# 
   975  019F                     	;# 
   976  019F                     	;# 
   977  019F                     	;# 
   978  019F                     	;# 
   979  020C                     	;# 
   980  020D                     	;# 
   981  020E                     	;# 
   982  0211                     	;# 
   983  0211                     	;# 
   984  0212                     	;# 
   985  0212                     	;# 
   986  0213                     	;# 
   987  0213                     	;# 
   988  0214                     	;# 
   989  0214                     	;# 
   990  0215                     	;# 
   991  0215                     	;# 
   992  0215                     	;# 
   993  0215                     	;# 
   994  0216                     	;# 
   995  0216                     	;# 
   996  0217                     	;# 
   997  0217                     	;# 
   998  0219                     	;# 
   999  021A                     	;# 
  1000  021B                     	;# 
  1001  021C                     	;# 
  1002  021D                     	;# 
  1003  021D                     	;# 
  1004  021E                     	;# 
  1005  021F                     	;# 
  1006  028C                     	;# 
  1007  028D                     	;# 
  1008  028E                     	;# 
  1009  0291                     	;# 
  1010  0291                     	;# 
  1011  0292                     	;# 
  1012  0293                     	;# 
  1013  0294                     	;# 
  1014  0295                     	;# 
  1015  0295                     	;# 
  1016  0296                     	;# 
  1017  0297                     	;# 
  1018  0298                     	;# 
  1019  029F                     	;# 
  1020  030C                     	;# 
  1021  030D                     	;# 
  1022  030E                     	;# 
  1023  0311                     	;# 
  1024  0311                     	;# 
  1025  0312                     	;# 
  1026  0313                     	;# 
  1027  0314                     	;# 
  1028  0315                     	;# 
  1029  0315                     	;# 
  1030  0316                     	;# 
  1031  0317                     	;# 
  1032  0318                     	;# 
  1033  038C                     	;# 
  1034  038D                     	;# 
  1035  038E                     	;# 
  1036  0391                     	;# 
  1037  0392                     	;# 
  1038  0393                     	;# 
  1039  0394                     	;# 
  1040  0395                     	;# 
  1041  0396                     	;# 
  1042  0397                     	;# 
  1043  0398                     	;# 
  1044  0399                     	;# 
  1045  039A                     	;# 
  1046  039C                     	;# 
  1047  039D                     	;# 
  1048  039E                     	;# 
  1049  039F                     	;# 
  1050  0411                     	;# 
  1051  0411                     	;# 
  1052  0412                     	;# 
  1053  0413                     	;# 
  1054  0414                     	;# 
  1055  0415                     	;# 
  1056  0416                     	;# 
  1057  0417                     	;# 
  1058  0418                     	;# 
  1059  0418                     	;# 
  1060  0419                     	;# 
  1061  041A                     	;# 
  1062  041B                     	;# 
  1063  041C                     	;# 
  1064  041D                     	;# 
  1065  041E                     	;# 
  1066  041F                     	;# 
  1067  0498                     	;# 
  1068  0498                     	;# 
  1069  0499                     	;# 
  1070  049A                     	;# 
  1071  049B                     	;# 
  1072  049B                     	;# 
  1073  049C                     	;# 
  1074  049D                     	;# 
  1075  049E                     	;# 
  1076  049F                     	;# 
  1077  0617                     	;# 
  1078  0618                     	;# 
  1079  0619                     	;# 
  1080  0619                     	;# 
  1081  061A                     	;# 
  1082  061B                     	;# 
  1083  061C                     	;# 
  1084  061C                     	;# 
  1085  061F                     	;# 
  1086  0691                     	;# 
  1087  0692                     	;# 
  1088  0693                     	;# 
  1089  0694                     	;# 
  1090  0695                     	;# 
  1091  0696                     	;# 
  1092  0697                     	;# 
  1093  0698                     	;# 
  1094  0699                     	;# 
  1095  0711                     	;# 
  1096  0712                     	;# 
  1097  0713                     	;# 
  1098  0714                     	;# 
  1099  0715                     	;# 
  1100  0716                     	;# 
  1101  0717                     	;# 
  1102  0718                     	;# 
  1103  0719                     	;# 
  1104  0891                     	;# 
  1105  0891                     	;# 
  1106  0891                     	;# 
  1107  0891                     	;# 
  1108  0891                     	;# 
  1109  0891                     	;# 
  1110  0892                     	;# 
  1111  0892                     	;# 
  1112  0892                     	;# 
  1113  0893                     	;# 
  1114  0893                     	;# 
  1115  0893                     	;# 
  1116  0893                     	;# 
  1117  0893                     	;# 
  1118  0893                     	;# 
  1119  0894                     	;# 
  1120  0894                     	;# 
  1121  0894                     	;# 
  1122  0895                     	;# 
  1123  0895                     	;# 
  1124  0895                     	;# 
  1125  0896                     	;# 
  1126  0896                     	;# 
  1127  0896                     	;# 
  1128  089B                     	;# 
  1129  0911                     	;# 
  1130  0912                     	;# 
  1131  0913                     	;# 
  1132  0914                     	;# 
  1133  0915                     	;# 
  1134  0916                     	;# 
  1135  0918                     	;# 
  1136  0919                     	;# 
  1137  091A                     	;# 
  1138  091B                     	;# 
  1139  091C                     	;# 
  1140  091D                     	;# 
  1141  091E                     	;# 
  1142  091F                     	;# 
  1143  0E0F                     	;# 
  1144  0E10                     	;# 
  1145  0E11                     	;# 
  1146  0E12                     	;# 
  1147  0E13                     	;# 
  1148  0E14                     	;# 
  1149  0E15                     	;# 
  1150  0E16                     	;# 
  1151  0E17                     	;# 
  1152  0E18                     	;# 
  1153  0E19                     	;# 
  1154  0E1A                     	;# 
  1155  0E1B                     	;# 
  1156  0E1C                     	;# 
  1157  0E1D                     	;# 
  1158  0E1E                     	;# 
  1159  0E1F                     	;# 
  1160  0E20                     	;# 
  1161  0E21                     	;# 
  1162  0E22                     	;# 
  1163  0E24                     	;# 
  1164  0E25                     	;# 
  1165  0E28                     	;# 
  1166  0E29                     	;# 
  1167  0E2A                     	;# 
  1168  0E2B                     	;# 
  1169  0E2C                     	;# 
  1170  0E2D                     	;# 
  1171  0E2E                     	;# 
  1172  0E2F                     	;# 
  1173  0E90                     	;# 
  1174  0E91                     	;# 
  1175  0E92                     	;# 
  1176  0E94                     	;# 
  1177  0E95                     	;# 
  1178  0E9C                     	;# 
  1179  0E9D                     	;# 
  1180  0E9E                     	;# 
  1181  0E9F                     	;# 
  1182  0EA0                     	;# 
  1183  0EA1                     	;# 
  1184  0EA2                     	;# 
  1185  0EA3                     	;# 
  1186  0EA4                     	;# 
  1187  0EA5                     	;# 
  1188  0EA6                     	;# 
  1189  0EA7                     	;# 
  1190  0F0F                     	;# 
  1191  0F10                     	;# 
  1192  0F11                     	;# 
  1193  0F12                     	;# 
  1194  0F13                     	;# 
  1195  0F14                     	;# 
  1196  0F15                     	;# 
  1197  0F16                     	;# 
  1198  0F17                     	;# 
  1199  0F18                     	;# 
  1200  0F19                     	;# 
  1201  0F1A                     	;# 
  1202  0F1B                     	;# 
  1203  0F1C                     	;# 
  1204  0F1D                     	;# 
  1205  0F1E                     	;# 
  1206  0F1F                     	;# 
  1207  0F20                     	;# 
  1208  0F21                     	;# 
  1209  0F22                     	;# 
  1210  0F23                     	;# 
  1211  0F24                     	;# 
  1212  0F25                     	;# 
  1213  0F26                     	;# 
  1214  0F27                     	;# 
  1215  0F28                     	;# 
  1216  0F29                     	;# 
  1217  0F2A                     	;# 
  1218  0F2B                     	;# 
  1219  0F2C                     	;# 
  1220  0F2D                     	;# 
  1221  0F2E                     	;# 
  1222  0F2F                     	;# 
  1223  0F30                     	;# 
  1224  0F31                     	;# 
  1225  0F32                     	;# 
  1226  0F33                     	;# 
  1227  0F34                     	;# 
  1228  0F35                     	;# 
  1229  0F36                     	;# 
  1230  0F37                     	;# 
  1231  0FE4                     	;# 
  1232  0FE5                     	;# 
  1233  0FE6                     	;# 
  1234  0FE7                     	;# 
  1235  0FE8                     	;# 
  1236  0FE9                     	;# 
  1237  0FEA                     	;# 
  1238  0FEB                     	;# 
  1239  0FED                     	;# 
  1240  0FEE                     	;# 
  1241  0FEF                     	;# 
  1242  0000                     	;# 
  1243  0001                     	;# 
  1244  0002                     	;# 
  1245  0003                     	;# 
  1246  0004                     	;# 
  1247  0005                     	;# 
  1248  0006                     	;# 
  1249  0007                     	;# 
  1250  0008                     	;# 
  1251  0009                     	;# 
  1252  000A                     	;# 
  1253  000B                     	;# 
  1254  000C                     	;# 
  1255  000D                     	;# 
  1256  000E                     	;# 
  1257  0010                     	;# 
  1258  0011                     	;# 
  1259  0012                     	;# 
  1260  0013                     	;# 
  1261  0014                     	;# 
  1262  0015                     	;# 
  1263  0015                     	;# 
  1264  0016                     	;# 
  1265  0016                     	;# 
  1266  0017                     	;# 
  1267  0018                     	;# 
  1268  0019                     	;# 
  1269  0019                     	;# 
  1270  001A                     	;# 
  1271  001B                     	;# 
  1272  001C                     	;# 
  1273  001D                     	;# 
  1274  001E                     	;# 
  1275  001F                     	;# 
  1276  008C                     	;# 
  1277  008D                     	;# 
  1278  008E                     	;# 
  1279  0090                     	;# 
  1280  0091                     	;# 
  1281  0092                     	;# 
  1282  0093                     	;# 
  1283  0094                     	;# 
  1284  0097                     	;# 
  1285  009B                     	;# 
  1286  009B                     	;# 
  1287  009C                     	;# 
  1288  009D                     	;# 
  1289  009E                     	;# 
  1290  009F                     	;# 
  1291  010C                     	;# 
  1292  010D                     	;# 
  1293  010E                     	;# 
  1294  0111                     	;# 
  1295  0112                     	;# 
  1296  0113                     	;# 
  1297  0114                     	;# 
  1298  0115                     	;# 
  1299  0116                     	;# 
  1300  0117                     	;# 
  1301  0118                     	;# 
  1302  0119                     	;# 
  1303  018C                     	;# 
  1304  018D                     	;# 
  1305  018E                     	;# 
  1306  0197                     	;# 
  1307  0199                     	;# 
  1308  0199                     	;# 
  1309  0199                     	;# 
  1310  019A                     	;# 
  1311  019A                     	;# 
  1312  019A                     	;# 
  1313  019B                     	;# 
  1314  019B                     	;# 
  1315  019B                     	;# 
  1316  019B                     	;# 
  1317  019B                     	;# 
  1318  019C                     	;# 
  1319  019C                     	;# 
  1320  019C                     	;# 
  1321  019D                     	;# 
  1322  019D                     	;# 
  1323  019D                     	;# 
  1324  019E                     	;# 
  1325  019E                     	;# 
  1326  019E                     	;# 
  1327  019F                     	;# 
  1328  019F                     	;# 
  1329  019F                     	;# 
  1330  019F                     	;# 
  1331  019F                     	;# 
  1332  020C                     	;# 
  1333  020D                     	;# 
  1334  020E                     	;# 
  1335  0211                     	;# 
  1336  0211                     	;# 
  1337  0212                     	;# 
  1338  0212                     	;# 
  1339  0213                     	;# 
  1340  0213                     	;# 
  1341  0214                     	;# 
  1342  0214                     	;# 
  1343  0215                     	;# 
  1344  0215                     	;# 
  1345  0215                     	;# 
  1346  0215                     	;# 
  1347  0216                     	;# 
  1348  0216                     	;# 
  1349  0217                     	;# 
  1350  0217                     	;# 
  1351  0219                     	;# 
  1352  021A                     	;# 
  1353  021B                     	;# 
  1354  021C                     	;# 
  1355  021D                     	;# 
  1356  021D                     	;# 
  1357  021E                     	;# 
  1358  021F                     	;# 
  1359  028C                     	;# 
  1360  028D                     	;# 
  1361  028E                     	;# 
  1362  0291                     	;# 
  1363  0291                     	;# 
  1364  0292                     	;# 
  1365  0293                     	;# 
  1366  0294                     	;# 
  1367  0295                     	;# 
  1368  0295                     	;# 
  1369  0296                     	;# 
  1370  0297                     	;# 
  1371  0298                     	;# 
  1372  029F                     	;# 
  1373  030C                     	;# 
  1374  030D                     	;# 
  1375  030E                     	;# 
  1376  0311                     	;# 
  1377  0311                     	;# 
  1378  0312                     	;# 
  1379  0313                     	;# 
  1380  0314                     	;# 
  1381  0315                     	;# 
  1382  0315                     	;# 
  1383  0316                     	;# 
  1384  0317                     	;# 
  1385  0318                     	;# 
  1386  038C                     	;# 
  1387  038D                     	;# 
  1388  038E                     	;# 
  1389  0391                     	;# 
  1390  0392                     	;# 
  1391  0393                     	;# 
  1392  0394                     	;# 
  1393  0395                     	;# 
  1394  0396                     	;# 
  1395  0397                     	;# 
  1396  0398                     	;# 
  1397  0399                     	;# 
  1398  039A                     	;# 
  1399  039C                     	;# 
  1400  039D                     	;# 
  1401  039E                     	;# 
  1402  039F                     	;# 
  1403  0411                     	;# 
  1404  0411                     	;# 
  1405  0412                     	;# 
  1406  0413                     	;# 
  1407  0414                     	;# 
  1408  0415                     	;# 
  1409  0416                     	;# 
  1410  0417                     	;# 
  1411  0418                     	;# 
  1412  0418                     	;# 
  1413  0419                     	;# 
  1414  041A                     	;# 
  1415  041B                     	;# 
  1416  041C                     	;# 
  1417  041D                     	;# 
  1418  041E                     	;# 
  1419  041F                     	;# 
  1420  0498                     	;# 
  1421  0498                     	;# 
  1422  0499                     	;# 
  1423  049A                     	;# 
  1424  049B                     	;# 
  1425  049B                     	;# 
  1426  049C                     	;# 
  1427  049D                     	;# 
  1428  049E                     	;# 
  1429  049F                     	;# 
  1430  0617                     	;# 
  1431  0618                     	;# 
  1432  0619                     	;# 
  1433  0619                     	;# 
  1434  061A                     	;# 
  1435  061B                     	;# 
  1436  061C                     	;# 
  1437  061C                     	;# 
  1438  061F                     	;# 
  1439  0691                     	;# 
  1440  0692                     	;# 
  1441  0693                     	;# 
  1442  0694                     	;# 
  1443  0695                     	;# 
  1444  0696                     	;# 
  1445  0697                     	;# 
  1446  0698                     	;# 
  1447  0699                     	;# 
  1448  0711                     	;# 
  1449  0712                     	;# 
  1450  0713                     	;# 
  1451  0714                     	;# 
  1452  0715                     	;# 
  1453  0716                     	;# 
  1454  0717                     	;# 
  1455  0718                     	;# 
  1456  0719                     	;# 
  1457  0891                     	;# 
  1458  0891                     	;# 
  1459  0891                     	;# 
  1460  0891                     	;# 
  1461  0891                     	;# 
  1462  0891                     	;# 
  1463  0892                     	;# 
  1464  0892                     	;# 
  1465  0892                     	;# 
  1466  0893                     	;# 
  1467  0893                     	;# 
  1468  0893                     	;# 
  1469  0893                     	;# 
  1470  0893                     	;# 
  1471  0893                     	;# 
  1472  0894                     	;# 
  1473  0894                     	;# 
  1474  0894                     	;# 
  1475  0895                     	;# 
  1476  0895                     	;# 
  1477  0895                     	;# 
  1478  0896                     	;# 
  1479  0896                     	;# 
  1480  0896                     	;# 
  1481  089B                     	;# 
  1482  0911                     	;# 
  1483  0912                     	;# 
  1484  0913                     	;# 
  1485  0914                     	;# 
  1486  0915                     	;# 
  1487  0916                     	;# 
  1488  0918                     	;# 
  1489  0919                     	;# 
  1490  091A                     	;# 
  1491  091B                     	;# 
  1492  091C                     	;# 
  1493  091D                     	;# 
  1494  091E                     	;# 
  1495  091F                     	;# 
  1496  0E0F                     	;# 
  1497  0E10                     	;# 
  1498  0E11                     	;# 
  1499  0E12                     	;# 
  1500  0E13                     	;# 
  1501  0E14                     	;# 
  1502  0E15                     	;# 
  1503  0E16                     	;# 
  1504  0E17                     	;# 
  1505  0E18                     	;# 
  1506  0E19                     	;# 
  1507  0E1A                     	;# 
  1508  0E1B                     	;# 
  1509  0E1C                     	;# 
  1510  0E1D                     	;# 
  1511  0E1E                     	;# 
  1512  0E1F                     	;# 
  1513  0E20                     	;# 
  1514  0E21                     	;# 
  1515  0E22                     	;# 
  1516  0E24                     	;# 
  1517  0E25                     	;# 
  1518  0E28                     	;# 
  1519  0E29                     	;# 
  1520  0E2A                     	;# 
  1521  0E2B                     	;# 
  1522  0E2C                     	;# 
  1523  0E2D                     	;# 
  1524  0E2E                     	;# 
  1525  0E2F                     	;# 
  1526  0E90                     	;# 
  1527  0E91                     	;# 
  1528  0E92                     	;# 
  1529  0E94                     	;# 
  1530  0E95                     	;# 
  1531  0E9C                     	;# 
  1532  0E9D                     	;# 
  1533  0E9E                     	;# 
  1534  0E9F                     	;# 
  1535  0EA0                     	;# 
  1536  0EA1                     	;# 
  1537  0EA2                     	;# 
  1538  0EA3                     	;# 
  1539  0EA4                     	;# 
  1540  0EA5                     	;# 
  1541  0EA6                     	;# 
  1542  0EA7                     	;# 
  1543  0F0F                     	;# 
  1544  0F10                     	;# 
  1545  0F11                     	;# 
  1546  0F12                     	;# 
  1547  0F13                     	;# 
  1548  0F14                     	;# 
  1549  0F15                     	;# 
  1550  0F16                     	;# 
  1551  0F17                     	;# 
  1552  0F18                     	;# 
  1553  0F19                     	;# 
  1554  0F1A                     	;# 
  1555  0F1B                     	;# 
  1556  0F1C                     	;# 
  1557  0F1D                     	;# 
  1558  0F1E                     	;# 
  1559  0F1F                     	;# 
  1560  0F20                     	;# 
  1561  0F21                     	;# 
  1562  0F22                     	;# 
  1563  0F23                     	;# 
  1564  0F24                     	;# 
  1565  0F25                     	;# 
  1566  0F26                     	;# 
  1567  0F27                     	;# 
  1568  0F28                     	;# 
  1569  0F29                     	;# 
  1570  0F2A                     	;# 
  1571  0F2B                     	;# 
  1572  0F2C                     	;# 
  1573  0F2D                     	;# 
  1574  0F2E                     	;# 
  1575  0F2F                     	;# 
  1576  0F30                     	;# 
  1577  0F31                     	;# 
  1578  0F32                     	;# 
  1579  0F33                     	;# 
  1580  0F34                     	;# 
  1581  0F35                     	;# 
  1582  0F36                     	;# 
  1583  0F37                     	;# 
  1584  0FE4                     	;# 
  1585  0FE5                     	;# 
  1586  0FE6                     	;# 
  1587  0FE7                     	;# 
  1588  0FE8                     	;# 
  1589  0FE9                     	;# 
  1590  0FEA                     	;# 
  1591  0FEB                     	;# 
  1592  0FED                     	;# 
  1593  0FEE                     	;# 
  1594  0FEF                     	;# 
  1595  0000                     	;# 
  1596  0001                     	;# 
  1597  0002                     	;# 
  1598  0003                     	;# 
  1599  0004                     	;# 
  1600  0005                     	;# 
  1601  0006                     	;# 
  1602  0007                     	;# 
  1603  0008                     	;# 
  1604  0009                     	;# 
  1605  000A                     	;# 
  1606  000B                     	;# 
  1607  000C                     	;# 
  1608  000D                     	;# 
  1609  000E                     	;# 
  1610  0010                     	;# 
  1611  0011                     	;# 
  1612  0012                     	;# 
  1613  0013                     	;# 
  1614  0014                     	;# 
  1615  0015                     	;# 
  1616  0015                     	;# 
  1617  0016                     	;# 
  1618  0016                     	;# 
  1619  0017                     	;# 
  1620  0018                     	;# 
  1621  0019                     	;# 
  1622  0019                     	;# 
  1623  001A                     	;# 
  1624  001B                     	;# 
  1625  001C                     	;# 
  1626  001D                     	;# 
  1627  001E                     	;# 
  1628  001F                     	;# 
  1629  008C                     	;# 
  1630  008D                     	;# 
  1631  008E                     	;# 
  1632  0090                     	;# 
  1633  0091                     	;# 
  1634  0092                     	;# 
  1635  0093                     	;# 
  1636  0094                     	;# 
  1637  0097                     	;# 
  1638  009B                     	;# 
  1639  009B                     	;# 
  1640  009C                     	;# 
  1641  009D                     	;# 
  1642  009E                     	;# 
  1643  009F                     	;# 
  1644  010C                     	;# 
  1645  010D                     	;# 
  1646  010E                     	;# 
  1647  0111                     	;# 
  1648  0112                     	;# 
  1649  0113                     	;# 
  1650  0114                     	;# 
  1651  0115                     	;# 
  1652  0116                     	;# 
  1653  0117                     	;# 
  1654  0118                     	;# 
  1655  0119                     	;# 
  1656  018C                     	;# 
  1657  018D                     	;# 
  1658  018E                     	;# 
  1659  0197                     	;# 
  1660  0199                     	;# 
  1661  0199                     	;# 
  1662  0199                     	;# 
  1663  019A                     	;# 
  1664  019A                     	;# 
  1665  019A                     	;# 
  1666  019B                     	;# 
  1667  019B                     	;# 
  1668  019B                     	;# 
  1669  019B                     	;# 
  1670  019B                     	;# 
  1671  019C                     	;# 
  1672  019C                     	;# 
  1673  019C                     	;# 
  1674  019D                     	;# 
  1675  019D                     	;# 
  1676  019D                     	;# 
  1677  019E                     	;# 
  1678  019E                     	;# 
  1679  019E                     	;# 
  1680  019F                     	;# 
  1681  019F                     	;# 
  1682  019F                     	;# 
  1683  019F                     	;# 
  1684  019F                     	;# 
  1685  020C                     	;# 
  1686  020D                     	;# 
  1687  020E                     	;# 
  1688  0211                     	;# 
  1689  0211                     	;# 
  1690  0212                     	;# 
  1691  0212                     	;# 
  1692  0213                     	;# 
  1693  0213                     	;# 
  1694  0214                     	;# 
  1695  0214                     	;# 
  1696  0215                     	;# 
  1697  0215                     	;# 
  1698  0215                     	;# 
  1699  0215                     	;# 
  1700  0216                     	;# 
  1701  0216                     	;# 
  1702  0217                     	;# 
  1703  0217                     	;# 
  1704  0219                     	;# 
  1705  021A                     	;# 
  1706  021B                     	;# 
  1707  021C                     	;# 
  1708  021D                     	;# 
  1709  021D                     	;# 
  1710  021E                     	;# 
  1711  021F                     	;# 
  1712  028C                     	;# 
  1713  028D                     	;# 
  1714  028E                     	;# 
  1715  0291                     	;# 
  1716  0291                     	;# 
  1717  0292                     	;# 
  1718  0293                     	;# 
  1719  0294                     	;# 
  1720  0295                     	;# 
  1721  0295                     	;# 
  1722  0296                     	;# 
  1723  0297                     	;# 
  1724  0298                     	;# 
  1725  029F                     	;# 
  1726  030C                     	;# 
  1727  030D                     	;# 
  1728  030E                     	;# 
  1729  0311                     	;# 
  1730  0311                     	;# 
  1731  0312                     	;# 
  1732  0313                     	;# 
  1733  0314                     	;# 
  1734  0315                     	;# 
  1735  0315                     	;# 
  1736  0316                     	;# 
  1737  0317                     	;# 
  1738  0318                     	;# 
  1739  038C                     	;# 
  1740  038D                     	;# 
  1741  038E                     	;# 
  1742  0391                     	;# 
  1743  0392                     	;# 
  1744  0393                     	;# 
  1745  0394                     	;# 
  1746  0395                     	;# 
  1747  0396                     	;# 
  1748  0397                     	;# 
  1749  0398                     	;# 
  1750  0399                     	;# 
  1751  039A                     	;# 
  1752  039C                     	;# 
  1753  039D                     	;# 
  1754  039E                     	;# 
  1755  039F                     	;# 
  1756  0411                     	;# 
  1757  0411                     	;# 
  1758  0412                     	;# 
  1759  0413                     	;# 
  1760  0414                     	;# 
  1761  0415                     	;# 
  1762  0416                     	;# 
  1763  0417                     	;# 
  1764  0418                     	;# 
  1765  0418                     	;# 
  1766  0419                     	;# 
  1767  041A                     	;# 
  1768  041B                     	;# 
  1769  041C                     	;# 
  1770  041D                     	;# 
  1771  041E                     	;# 
  1772  041F                     	;# 
  1773  0498                     	;# 
  1774  0498                     	;# 
  1775  0499                     	;# 
  1776  049A                     	;# 
  1777  049B                     	;# 
  1778  049B                     	;# 
  1779  049C                     	;# 
  1780  049D                     	;# 
  1781  049E                     	;# 
  1782  049F                     	;# 
  1783  0617                     	;# 
  1784  0618                     	;# 
  1785  0619                     	;# 
  1786  0619                     	;# 
  1787  061A                     	;# 
  1788  061B                     	;# 
  1789  061C                     	;# 
  1790  061C                     	;# 
  1791  061F                     	;# 
  1792  0691                     	;# 
  1793  0692                     	;# 
  1794  0693                     	;# 
  1795  0694                     	;# 
  1796  0695                     	;# 
  1797  0696                     	;# 
  1798  0697                     	;# 
  1799  0698                     	;# 
  1800  0699                     	;# 
  1801  0711                     	;# 
  1802  0712                     	;# 
  1803  0713                     	;# 
  1804  0714                     	;# 
  1805  0715                     	;# 
  1806  0716                     	;# 
  1807  0717                     	;# 
  1808  0718                     	;# 
  1809  0719                     	;# 
  1810  0891                     	;# 
  1811  0891                     	;# 
  1812  0891                     	;# 
  1813  0891                     	;# 
  1814  0891                     	;# 
  1815  0891                     	;# 
  1816  0892                     	;# 
  1817  0892                     	;# 
  1818  0892                     	;# 
  1819  0893                     	;# 
  1820  0893                     	;# 
  1821  0893                     	;# 
  1822  0893                     	;# 
  1823  0893                     	;# 
  1824  0893                     	;# 
  1825  0894                     	;# 
  1826  0894                     	;# 
  1827  0894                     	;# 
  1828  0895                     	;# 
  1829  0895                     	;# 
  1830  0895                     	;# 
  1831  0896                     	;# 
  1832  0896                     	;# 
  1833  0896                     	;# 
  1834  089B                     	;# 
  1835  0911                     	;# 
  1836  0912                     	;# 
  1837  0913                     	;# 
  1838  0914                     	;# 
  1839  0915                     	;# 
  1840  0916                     	;# 
  1841  0918                     	;# 
  1842  0919                     	;# 
  1843  091A                     	;# 
  1844  091B                     	;# 
  1845  091C                     	;# 
  1846  091D                     	;# 
  1847  091E                     	;# 
  1848  091F                     	;# 
  1849  0E0F                     	;# 
  1850  0E10                     	;# 
  1851  0E11                     	;# 
  1852  0E12                     	;# 
  1853  0E13                     	;# 
  1854  0E14                     	;# 
  1855  0E15                     	;# 
  1856  0E16                     	;# 
  1857  0E17                     	;# 
  1858  0E18                     	;# 
  1859  0E19                     	;# 
  1860  0E1A                     	;# 
  1861  0E1B                     	;# 
  1862  0E1C                     	;# 
  1863  0E1D                     	;# 
  1864  0E1E                     	;# 
  1865  0E1F                     	;# 
  1866  0E20                     	;# 
  1867  0E21                     	;# 
  1868  0E22                     	;# 
  1869  0E24                     	;# 
  1870  0E25                     	;# 
  1871  0E28                     	;# 
  1872  0E29                     	;# 
  1873  0E2A                     	;# 
  1874  0E2B                     	;# 
  1875  0E2C                     	;# 
  1876  0E2D                     	;# 
  1877  0E2E                     	;# 
  1878  0E2F                     	;# 
  1879  0E90                     	;# 
  1880  0E91                     	;# 
  1881  0E92                     	;# 
  1882  0E94                     	;# 
  1883  0E95                     	;# 
  1884  0E9C                     	;# 
  1885  0E9D                     	;# 
  1886  0E9E                     	;# 
  1887  0E9F                     	;# 
  1888  0EA0                     	;# 
  1889  0EA1                     	;# 
  1890  0EA2                     	;# 
  1891  0EA3                     	;# 
  1892  0EA4                     	;# 
  1893  0EA5                     	;# 
  1894  0EA6                     	;# 
  1895  0EA7                     	;# 
  1896  0F0F                     	;# 
  1897  0F10                     	;# 
  1898  0F11                     	;# 
  1899  0F12                     	;# 
  1900  0F13                     	;# 
  1901  0F14                     	;# 
  1902  0F15                     	;# 
  1903  0F16                     	;# 
  1904  0F17                     	;# 
  1905  0F18                     	;# 
  1906  0F19                     	;# 
  1907  0F1A                     	;# 
  1908  0F1B                     	;# 
  1909  0F1C                     	;# 
  1910  0F1D                     	;# 
  1911  0F1E                     	;# 
  1912  0F1F                     	;# 
  1913  0F20                     	;# 
  1914  0F21                     	;# 
  1915  0F22                     	;# 
  1916  0F23                     	;# 
  1917  0F24                     	;# 
  1918  0F25                     	;# 
  1919  0F26                     	;# 
  1920  0F27                     	;# 
  1921  0F28                     	;# 
  1922  0F29                     	;# 
  1923  0F2A                     	;# 
  1924  0F2B                     	;# 
  1925  0F2C                     	;# 
  1926  0F2D                     	;# 
  1927  0F2E                     	;# 
  1928  0F2F                     	;# 
  1929  0F30                     	;# 
  1930  0F31                     	;# 
  1931  0F32                     	;# 
  1932  0F33                     	;# 
  1933  0F34                     	;# 
  1934  0F35                     	;# 
  1935  0F36                     	;# 
  1936  0F37                     	;# 
  1937  0FE4                     	;# 
  1938  0FE5                     	;# 
  1939  0FE6                     	;# 
  1940  0FE7                     	;# 
  1941  0FE8                     	;# 
  1942  0FE9                     	;# 
  1943  0FEA                     	;# 
  1944  0FEB                     	;# 
  1945  0FED                     	;# 
  1946  0FEE                     	;# 
  1947  0FEF                     	;# 
  1948  0000                     	;# 
  1949  0001                     	;# 
  1950  0002                     	;# 
  1951  0003                     	;# 
  1952  0004                     	;# 
  1953  0005                     	;# 
  1954  0006                     	;# 
  1955  0007                     	;# 
  1956  0008                     	;# 
  1957  0009                     	;# 
  1958  000A                     	;# 
  1959  000B                     	;# 
  1960  000C                     	;# 
  1961  000D                     	;# 
  1962  000E                     	;# 
  1963  0010                     	;# 
  1964  0011                     	;# 
  1965  0012                     	;# 
  1966  0013                     	;# 
  1967  0014                     	;# 
  1968  0015                     	;# 
  1969  0015                     	;# 
  1970  0016                     	;# 
  1971  0016                     	;# 
  1972  0017                     	;# 
  1973  0018                     	;# 
  1974  0019                     	;# 
  1975  0019                     	;# 
  1976  001A                     	;# 
  1977  001B                     	;# 
  1978  001C                     	;# 
  1979  001D                     	;# 
  1980  001E                     	;# 
  1981  001F                     	;# 
  1982  008C                     	;# 
  1983  008D                     	;# 
  1984  008E                     	;# 
  1985  0090                     	;# 
  1986  0091                     	;# 
  1987  0092                     	;# 
  1988  0093                     	;# 
  1989  0094                     	;# 
  1990  0097                     	;# 
  1991  009B                     	;# 
  1992  009B                     	;# 
  1993  009C                     	;# 
  1994  009D                     	;# 
  1995  009E                     	;# 
  1996  009F                     	;# 
  1997  010C                     	;# 
  1998  010D                     	;# 
  1999  010E                     	;# 
  2000  0111                     	;# 
  2001  0112                     	;# 
  2002  0113                     	;# 
  2003  0114                     	;# 
  2004  0115                     	;# 
  2005  0116                     	;# 
  2006  0117                     	;# 
  2007  0118                     	;# 
  2008  0119                     	;# 
  2009  018C                     	;# 
  2010  018D                     	;# 
  2011  018E                     	;# 
  2012  0197                     	;# 
  2013  0199                     	;# 
  2014  0199                     	;# 
  2015  0199                     	;# 
  2016  019A                     	;# 
  2017  019A                     	;# 
  2018  019A                     	;# 
  2019  019B                     	;# 
  2020  019B                     	;# 
  2021  019B                     	;# 
  2022  019B                     	;# 
  2023  019B                     	;# 
  2024  019C                     	;# 
  2025  019C                     	;# 
  2026  019C                     	;# 
  2027  019D                     	;# 
  2028  019D                     	;# 
  2029  019D                     	;# 
  2030  019E                     	;# 
  2031  019E                     	;# 
  2032  019E                     	;# 
  2033  019F                     	;# 
  2034  019F                     	;# 
  2035  019F                     	;# 
  2036  019F                     	;# 
  2037  019F                     	;# 
  2038  020C                     	;# 
  2039  020D                     	;# 
  2040  020E                     	;# 
  2041  0211                     	;# 
  2042  0211                     	;# 
  2043  0212                     	;# 
  2044  0212                     	;# 
  2045  0213                     	;# 
  2046  0213                     	;# 
  2047  0214                     	;# 
  2048  0214                     	;# 
  2049  0215                     	;# 
  2050  0215                     	;# 
  2051  0215                     	;# 
  2052  0215                     	;# 
  2053  0216                     	;# 
  2054  0216                     	;# 
  2055  0217                     	;# 
  2056  0217                     	;# 
  2057  0219                     	;# 
  2058  021A                     	;# 
  2059  021B                     	;# 
  2060  021C                     	;# 
  2061  021D                     	;# 
  2062  021D                     	;# 
  2063  021E                     	;# 
  2064  021F                     	;# 
  2065  028C                     	;# 
  2066  028D                     	;# 
  2067  028E                     	;# 
  2068  0291                     	;# 
  2069  0291                     	;# 
  2070  0292                     	;# 
  2071  0293                     	;# 
  2072  0294                     	;# 
  2073  0295                     	;# 
  2074  0295                     	;# 
  2075  0296                     	;# 
  2076  0297                     	;# 
  2077  0298                     	;# 
  2078  029F                     	;# 
  2079  030C                     	;# 
  2080  030D                     	;# 
  2081  030E                     	;# 
  2082  0311                     	;# 
  2083  0311                     	;# 
  2084  0312                     	;# 
  2085  0313                     	;# 
  2086  0314                     	;# 
  2087  0315                     	;# 
  2088  0315                     	;# 
  2089  0316                     	;# 
  2090  0317                     	;# 
  2091  0318                     	;# 
  2092  038C                     	;# 
  2093  038D                     	;# 
  2094  038E                     	;# 
  2095  0391                     	;# 
  2096  0392                     	;# 
  2097  0393                     	;# 
  2098  0394                     	;# 
  2099  0395                     	;# 
  2100  0396                     	;# 
  2101  0397                     	;# 
  2102  0398                     	;# 
  2103  0399                     	;# 
  2104  039A                     	;# 
  2105  039C                     	;# 
  2106  039D                     	;# 
  2107  039E                     	;# 
  2108  039F                     	;# 
  2109  0411                     	;# 
  2110  0411                     	;# 
  2111  0412                     	;# 
  2112  0413                     	;# 
  2113  0414                     	;# 
  2114  0415                     	;# 
  2115  0416                     	;# 
  2116  0417                     	;# 
  2117  0418                     	;# 
  2118  0418                     	;# 
  2119  0419                     	;# 
  2120  041A                     	;# 
  2121  041B                     	;# 
  2122  041C                     	;# 
  2123  041D                     	;# 
  2124  041E                     	;# 
  2125  041F                     	;# 
  2126  0498                     	;# 
  2127  0498                     	;# 
  2128  0499                     	;# 
  2129  049A                     	;# 
  2130  049B                     	;# 
  2131  049B                     	;# 
  2132  049C                     	;# 
  2133  049D                     	;# 
  2134  049E                     	;# 
  2135  049F                     	;# 
  2136  0617                     	;# 
  2137  0618                     	;# 
  2138  0619                     	;# 
  2139  0619                     	;# 
  2140  061A                     	;# 
  2141  061B                     	;# 
  2142  061C                     	;# 
  2143  061C                     	;# 
  2144  061F                     	;# 
  2145  0691                     	;# 
  2146  0692                     	;# 
  2147  0693                     	;# 
  2148  0694                     	;# 
  2149  0695                     	;# 
  2150  0696                     	;# 
  2151  0697                     	;# 
  2152  0698                     	;# 
  2153  0699                     	;# 
  2154  0711                     	;# 
  2155  0712                     	;# 
  2156  0713                     	;# 
  2157  0714                     	;# 
  2158  0715                     	;# 
  2159  0716                     	;# 
  2160  0717                     	;# 
  2161  0718                     	;# 
  2162  0719                     	;# 
  2163  0891                     	;# 
  2164  0891                     	;# 
  2165  0891                     	;# 
  2166  0891                     	;# 
  2167  0891                     	;# 
  2168  0891                     	;# 
  2169  0892                     	;# 
  2170  0892                     	;# 
  2171  0892                     	;# 
  2172  0893                     	;# 
  2173  0893                     	;# 
  2174  0893                     	;# 
  2175  0893                     	;# 
  2176  0893                     	;# 
  2177  0893                     	;# 
  2178  0894                     	;# 
  2179  0894                     	;# 
  2180  0894                     	;# 
  2181  0895                     	;# 
  2182  0895                     	;# 
  2183  0895                     	;# 
  2184  0896                     	;# 
  2185  0896                     	;# 
  2186  0896                     	;# 
  2187  089B                     	;# 
  2188  0911                     	;# 
  2189  0912                     	;# 
  2190  0913                     	;# 
  2191  0914                     	;# 
  2192  0915                     	;# 
  2193  0916                     	;# 
  2194  0918                     	;# 
  2195  0919                     	;# 
  2196  091A                     	;# 
  2197  091B                     	;# 
  2198  091C                     	;# 
  2199  091D                     	;# 
  2200  091E                     	;# 
  2201  091F                     	;# 
  2202  0E0F                     	;# 
  2203  0E10                     	;# 
  2204  0E11                     	;# 
  2205  0E12                     	;# 
  2206  0E13                     	;# 
  2207  0E14                     	;# 
  2208  0E15                     	;# 
  2209  0E16                     	;# 
  2210  0E17                     	;# 
  2211  0E18                     	;# 
  2212  0E19                     	;# 
  2213  0E1A                     	;# 
  2214  0E1B                     	;# 
  2215  0E1C                     	;# 
  2216  0E1D                     	;# 
  2217  0E1E                     	;# 
  2218  0E1F                     	;# 
  2219  0E20                     	;# 
  2220  0E21                     	;# 
  2221  0E22                     	;# 
  2222  0E24                     	;# 
  2223  0E25                     	;# 
  2224  0E28                     	;# 
  2225  0E29                     	;# 
  2226  0E2A                     	;# 
  2227  0E2B                     	;# 
  2228  0E2C                     	;# 
  2229  0E2D                     	;# 
  2230  0E2E                     	;# 
  2231  0E2F                     	;# 
  2232  0E90                     	;# 
  2233  0E91                     	;# 
  2234  0E92                     	;# 
  2235  0E94                     	;# 
  2236  0E95                     	;# 
  2237  0E9C                     	;# 
  2238  0E9D                     	;# 
  2239  0E9E                     	;# 
  2240  0E9F                     	;# 
  2241  0EA0                     	;# 
  2242  0EA1                     	;# 
  2243  0EA2                     	;# 
  2244  0EA3                     	;# 
  2245  0EA4                     	;# 
  2246  0EA5                     	;# 
  2247  0EA6                     	;# 
  2248  0EA7                     	;# 
  2249  0F0F                     	;# 
  2250  0F10                     	;# 
  2251  0F11                     	;# 
  2252  0F12                     	;# 
  2253  0F13                     	;# 
  2254  0F14                     	;# 
  2255  0F15                     	;# 
  2256  0F16                     	;# 
  2257  0F17                     	;# 
  2258  0F18                     	;# 
  2259  0F19                     	;# 
  2260  0F1A                     	;# 
  2261  0F1B                     	;# 
  2262  0F1C                     	;# 
  2263  0F1D                     	;# 
  2264  0F1E                     	;# 
  2265  0F1F                     	;# 
  2266  0F20                     	;# 
  2267  0F21                     	;# 
  2268  0F22                     	;# 
  2269  0F23                     	;# 
  2270  0F24                     	;# 
  2271  0F25                     	;# 
  2272  0F26                     	;# 
  2273  0F27                     	;# 
  2274  0F28                     	;# 
  2275  0F29                     	;# 
  2276  0F2A                     	;# 
  2277  0F2B                     	;# 
  2278  0F2C                     	;# 
  2279  0F2D                     	;# 
  2280  0F2E                     	;# 
  2281  0F2F                     	;# 
  2282  0F30                     	;# 
  2283  0F31                     	;# 
  2284  0F32                     	;# 
  2285  0F33                     	;# 
  2286  0F34                     	;# 
  2287  0F35                     	;# 
  2288  0F36                     	;# 
  2289  0F37                     	;# 
  2290  0FE4                     	;# 
  2291  0FE5                     	;# 
  2292  0FE6                     	;# 
  2293  0FE7                     	;# 
  2294  0FE8                     	;# 
  2295  0FE9                     	;# 
  2296  0FEA                     	;# 
  2297  0FEB                     	;# 
  2298  0FED                     	;# 
  2299  0FEE                     	;# 
  2300  0FEF                     	;# 
  2301  0000                     	;# 
  2302  0001                     	;# 
  2303  0002                     	;# 
  2304  0003                     	;# 
  2305  0004                     	;# 
  2306  0005                     	;# 
  2307  0006                     	;# 
  2308  0007                     	;# 
  2309  0008                     	;# 
  2310  0009                     	;# 
  2311  000A                     	;# 
  2312  000B                     	;# 
  2313  000C                     	;# 
  2314  000D                     	;# 
  2315  000E                     	;# 
  2316  0010                     	;# 
  2317  0011                     	;# 
  2318  0012                     	;# 
  2319  0013                     	;# 
  2320  0014                     	;# 
  2321  0015                     	;# 
  2322  0015                     	;# 
  2323  0016                     	;# 
  2324  0016                     	;# 
  2325  0017                     	;# 
  2326  0018                     	;# 
  2327  0019                     	;# 
  2328  0019                     	;# 
  2329  001A                     	;# 
  2330  001B                     	;# 
  2331  001C                     	;# 
  2332  001D                     	;# 
  2333  001E                     	;# 
  2334  001F                     	;# 
  2335  008C                     	;# 
  2336  008D                     	;# 
  2337  008E                     	;# 
  2338  0090                     	;# 
  2339  0091                     	;# 
  2340  0092                     	;# 
  2341  0093                     	;# 
  2342  0094                     	;# 
  2343  0097                     	;# 
  2344  009B                     	;# 
  2345  009B                     	;# 
  2346  009C                     	;# 
  2347  009D                     	;# 
  2348  009E                     	;# 
  2349  009F                     	;# 
  2350  010C                     	;# 
  2351  010D                     	;# 
  2352  010E                     	;# 
  2353  0111                     	;# 
  2354  0112                     	;# 
  2355  0113                     	;# 
  2356  0114                     	;# 
  2357  0115                     	;# 
  2358  0116                     	;# 
  2359  0117                     	;# 
  2360  0118                     	;# 
  2361  0119                     	;# 
  2362  018C                     	;# 
  2363  018D                     	;# 
  2364  018E                     	;# 
  2365  0197                     	;# 
  2366  0199                     	;# 
  2367  0199                     	;# 
  2368  0199                     	;# 
  2369  019A                     	;# 
  2370  019A                     	;# 
  2371  019A                     	;# 
  2372  019B                     	;# 
  2373  019B                     	;# 
  2374  019B                     	;# 
  2375  019B                     	;# 
  2376  019B                     	;# 
  2377  019C                     	;# 
  2378  019C                     	;# 
  2379  019C                     	;# 
  2380  019D                     	;# 
  2381  019D                     	;# 
  2382  019D                     	;# 
  2383  019E                     	;# 
  2384  019E                     	;# 
  2385  019E                     	;# 
  2386  019F                     	;# 
  2387  019F                     	;# 
  2388  019F                     	;# 
  2389  019F                     	;# 
  2390  019F                     	;# 
  2391  020C                     	;# 
  2392  020D                     	;# 
  2393  020E                     	;# 
  2394  0211                     	;# 
  2395  0211                     	;# 
  2396  0212                     	;# 
  2397  0212                     	;# 
  2398  0213                     	;# 
  2399  0213                     	;# 
  2400  0214                     	;# 
  2401  0214                     	;# 
  2402  0215                     	;# 
  2403  0215                     	;# 
  2404  0215                     	;# 
  2405  0215                     	;# 
  2406  0216                     	;# 
  2407  0216                     	;# 
  2408  0217                     	;# 
  2409  0217                     	;# 
  2410  0219                     	;# 
  2411  021A                     	;# 
  2412  021B                     	;# 
  2413  021C                     	;# 
  2414  021D                     	;# 
  2415  021D                     	;# 
  2416  021E                     	;# 
  2417  021F                     	;# 
  2418  028C                     	;# 
  2419  028D                     	;# 
  2420  028E                     	;# 
  2421  0291                     	;# 
  2422  0291                     	;# 
  2423  0292                     	;# 
  2424  0293                     	;# 
  2425  0294                     	;# 
  2426  0295                     	;# 
  2427  0295                     	;# 
  2428  0296                     	;# 
  2429  0297                     	;# 
  2430  0298                     	;# 
  2431  029F                     	;# 
  2432  030C                     	;# 
  2433  030D                     	;# 
  2434  030E                     	;# 
  2435  0311                     	;# 
  2436  0311                     	;# 
  2437  0312                     	;# 
  2438  0313                     	;# 
  2439  0314                     	;# 
  2440  0315                     	;# 
  2441  0315                     	;# 
  2442  0316                     	;# 
  2443  0317                     	;# 
  2444  0318                     	;# 
  2445  038C                     	;# 
  2446  038D                     	;# 
  2447  038E                     	;# 
  2448  0391                     	;# 
  2449  0392                     	;# 
  2450  0393                     	;# 
  2451  0394                     	;# 
  2452  0395                     	;# 
  2453  0396                     	;# 
  2454  0397                     	;# 
  2455  0398                     	;# 
  2456  0399                     	;# 
  2457  039A                     	;# 
  2458  039C                     	;# 
  2459  039D                     	;# 
  2460  039E                     	;# 
  2461  039F                     	;# 
  2462  0411                     	;# 
  2463  0411                     	;# 
  2464  0412                     	;# 
  2465  0413                     	;# 
  2466  0414                     	;# 
  2467  0415                     	;# 
  2468  0416                     	;# 
  2469  0417                     	;# 
  2470  0418                     	;# 
  2471  0418                     	;# 
  2472  0419                     	;# 
  2473  041A                     	;# 
  2474  041B                     	;# 
  2475  041C                     	;# 
  2476  041D                     	;# 
  2477  041E                     	;# 
  2478  041F                     	;# 
  2479  0498                     	;# 
  2480  0498                     	;# 
  2481  0499                     	;# 
  2482  049A                     	;# 
  2483  049B                     	;# 
  2484  049B                     	;# 
  2485  049C                     	;# 
  2486  049D                     	;# 
  2487  049E                     	;# 
  2488  049F                     	;# 
  2489  0617                     	;# 
  2490  0618                     	;# 
  2491  0619                     	;# 
  2492  0619                     	;# 
  2493  061A                     	;# 
  2494  061B                     	;# 
  2495  061C                     	;# 
  2496  061C                     	;# 
  2497  061F                     	;# 
  2498  0691                     	;# 
  2499  0692                     	;# 
  2500  0693                     	;# 
  2501  0694                     	;# 
  2502  0695                     	;# 
  2503  0696                     	;# 
  2504  0697                     	;# 
  2505  0698                     	;# 
  2506  0699                     	;# 
  2507  0711                     	;# 
  2508  0712                     	;# 
  2509  0713                     	;# 
  2510  0714                     	;# 
  2511  0715                     	;# 
  2512  0716                     	;# 
  2513  0717                     	;# 
  2514  0718                     	;# 
  2515  0719                     	;# 
  2516  0891                     	;# 
  2517  0891                     	;# 
  2518  0891                     	;# 
  2519  0891                     	;# 
  2520  0891                     	;# 
  2521  0891                     	;# 
  2522  0892                     	;# 
  2523  0892                     	;# 
  2524  0892                     	;# 
  2525  0893                     	;# 
  2526  0893                     	;# 
  2527  0893                     	;# 
  2528  0893                     	;# 
  2529  0893                     	;# 
  2530  0893                     	;# 
  2531  0894                     	;# 
  2532  0894                     	;# 
  2533  0894                     	;# 
  2534  0895                     	;# 
  2535  0895                     	;# 
  2536  0895                     	;# 
  2537  0896                     	;# 
  2538  0896                     	;# 
  2539  0896                     	;# 
  2540  089B                     	;# 
  2541  0911                     	;# 
  2542  0912                     	;# 
  2543  0913                     	;# 
  2544  0914                     	;# 
  2545  0915                     	;# 
  2546  0916                     	;# 
  2547  0918                     	;# 
  2548  0919                     	;# 
  2549  091A                     	;# 
  2550  091B                     	;# 
  2551  091C                     	;# 
  2552  091D                     	;# 
  2553  091E                     	;# 
  2554  091F                     	;# 
  2555  0E0F                     	;# 
  2556  0E10                     	;# 
  2557  0E11                     	;# 
  2558  0E12                     	;# 
  2559  0E13                     	;# 
  2560  0E14                     	;# 
  2561  0E15                     	;# 
  2562  0E16                     	;# 
  2563  0E17                     	;# 
  2564  0E18                     	;# 
  2565  0E19                     	;# 
  2566  0E1A                     	;# 
  2567  0E1B                     	;# 
  2568  0E1C                     	;# 
  2569  0E1D                     	;# 
  2570  0E1E                     	;# 
  2571  0E1F                     	;# 
  2572  0E20                     	;# 
  2573  0E21                     	;# 
  2574  0E22                     	;# 
  2575  0E24                     	;# 
  2576  0E25                     	;# 
  2577  0E28                     	;# 
  2578  0E29                     	;# 
  2579  0E2A                     	;# 
  2580  0E2B                     	;# 
  2581  0E2C                     	;# 
  2582  0E2D                     	;# 
  2583  0E2E                     	;# 
  2584  0E2F                     	;# 
  2585  0E90                     	;# 
  2586  0E91                     	;# 
  2587  0E92                     	;# 
  2588  0E94                     	;# 
  2589  0E95                     	;# 
  2590  0E9C                     	;# 
  2591  0E9D                     	;# 
  2592  0E9E                     	;# 
  2593  0E9F                     	;# 
  2594  0EA0                     	;# 
  2595  0EA1                     	;# 
  2596  0EA2                     	;# 
  2597  0EA3                     	;# 
  2598  0EA4                     	;# 
  2599  0EA5                     	;# 
  2600  0EA6                     	;# 
  2601  0EA7                     	;# 
  2602  0F0F                     	;# 
  2603  0F10                     	;# 
  2604  0F11                     	;# 
  2605  0F12                     	;# 
  2606  0F13                     	;# 
  2607  0F14                     	;# 
  2608  0F15                     	;# 
  2609  0F16                     	;# 
  2610  0F17                     	;# 
  2611  0F18                     	;# 
  2612  0F19                     	;# 
  2613  0F1A                     	;# 
  2614  0F1B                     	;# 
  2615  0F1C                     	;# 
  2616  0F1D                     	;# 
  2617  0F1E                     	;# 
  2618  0F1F                     	;# 
  2619  0F20                     	;# 
  2620  0F21                     	;# 
  2621  0F22                     	;# 
  2622  0F23                     	;# 
  2623  0F24                     	;# 
  2624  0F25                     	;# 
  2625  0F26                     	;# 
  2626  0F27                     	;# 
  2627  0F28                     	;# 
  2628  0F29                     	;# 
  2629  0F2A                     	;# 
  2630  0F2B                     	;# 
  2631  0F2C                     	;# 
  2632  0F2D                     	;# 
  2633  0F2E                     	;# 
  2634  0F2F                     	;# 
  2635  0F30                     	;# 
  2636  0F31                     	;# 
  2637  0F32                     	;# 
  2638  0F33                     	;# 
  2639  0F34                     	;# 
  2640  0F35                     	;# 
  2641  0F36                     	;# 
  2642  0F37                     	;# 
  2643  0FE4                     	;# 
  2644  0FE5                     	;# 
  2645  0FE6                     	;# 
  2646  0FE7                     	;# 
  2647  0FE8                     	;# 
  2648  0FE9                     	;# 
  2649  0FEA                     	;# 
  2650  0FEB                     	;# 
  2651  0FED                     	;# 
  2652  0FEE                     	;# 
  2653  0FEF                     	;# 
  2654  0000                     	;# 
  2655  0001                     	;# 
  2656  0002                     	;# 
  2657  0003                     	;# 
  2658  0004                     	;# 
  2659  0005                     	;# 
  2660  0006                     	;# 
  2661  0007                     	;# 
  2662  0008                     	;# 
  2663  0009                     	;# 
  2664  000A                     	;# 
  2665  000B                     	;# 
  2666  000C                     	;# 
  2667  000D                     	;# 
  2668  000E                     	;# 
  2669  0010                     	;# 
  2670  0011                     	;# 
  2671  0012                     	;# 
  2672  0013                     	;# 
  2673  0014                     	;# 
  2674  0015                     	;# 
  2675  0015                     	;# 
  2676  0016                     	;# 
  2677  0016                     	;# 
  2678  0017                     	;# 
  2679  0018                     	;# 
  2680  0019                     	;# 
  2681  0019                     	;# 
  2682  001A                     	;# 
  2683  001B                     	;# 
  2684  001C                     	;# 
  2685  001D                     	;# 
  2686  001E                     	;# 
  2687  001F                     	;# 
  2688  008C                     	;# 
  2689  008D                     	;# 
  2690  008E                     	;# 
  2691  0090                     	;# 
  2692  0091                     	;# 
  2693  0092                     	;# 
  2694  0093                     	;# 
  2695  0094                     	;# 
  2696  0097                     	;# 
  2697  009B                     	;# 
  2698  009B                     	;# 
  2699  009C                     	;# 
  2700  009D                     	;# 
  2701  009E                     	;# 
  2702  009F                     	;# 
  2703  010C                     	;# 
  2704  010D                     	;# 
  2705  010E                     	;# 
  2706  0111                     	;# 
  2707  0112                     	;# 
  2708  0113                     	;# 
  2709  0114                     	;# 
  2710  0115                     	;# 
  2711  0116                     	;# 
  2712  0117                     	;# 
  2713  0118                     	;# 
  2714  0119                     	;# 
  2715  018C                     	;# 
  2716  018D                     	;# 
  2717  018E                     	;# 
  2718  0197                     	;# 
  2719  0199                     	;# 
  2720  0199                     	;# 
  2721  0199                     	;# 
  2722  019A                     	;# 
  2723  019A                     	;# 
  2724  019A                     	;# 
  2725  019B                     	;# 
  2726  019B                     	;# 
  2727  019B                     	;# 
  2728  019B                     	;# 
  2729  019B                     	;# 
  2730  019C                     	;# 
  2731  019C                     	;# 
  2732  019C                     	;# 
  2733  019D                     	;# 
  2734  019D                     	;# 
  2735  019D                     	;# 
  2736  019E                     	;# 
  2737  019E                     	;# 
  2738  019E                     	;# 
  2739  019F                     	;# 
  2740  019F                     	;# 
  2741  019F                     	;# 
  2742  019F                     	;# 
  2743  019F                     	;# 
  2744  020C                     	;# 
  2745  020D                     	;# 
  2746  020E                     	;# 
  2747  0211                     	;# 
  2748  0211                     	;# 
  2749  0212                     	;# 
  2750  0212                     	;# 
  2751  0213                     	;# 
  2752  0213                     	;# 
  2753  0214                     	;# 
  2754  0214                     	;# 
  2755  0215                     	;# 
  2756  0215                     	;# 
  2757  0215                     	;# 
  2758  0215                     	;# 
  2759  0216                     	;# 
  2760  0216                     	;# 
  2761  0217                     	;# 
  2762  0217                     	;# 
  2763  0219                     	;# 
  2764  021A                     	;# 
  2765  021B                     	;# 
  2766  021C                     	;# 
  2767  021D                     	;# 
  2768  021D                     	;# 
  2769  021E                     	;# 
  2770  021F                     	;# 
  2771  028C                     	;# 
  2772  028D                     	;# 
  2773  028E                     	;# 
  2774  0291                     	;# 
  2775  0291                     	;# 
  2776  0292                     	;# 
  2777  0293                     	;# 
  2778  0294                     	;# 
  2779  0295                     	;# 
  2780  0295                     	;# 
  2781  0296                     	;# 
  2782  0297                     	;# 
  2783  0298                     	;# 
  2784  029F                     	;# 
  2785  030C                     	;# 
  2786  030D                     	;# 
  2787  030E                     	;# 
  2788  0311                     	;# 
  2789  0311                     	;# 
  2790  0312                     	;# 
  2791  0313                     	;# 
  2792  0314                     	;# 
  2793  0315                     	;# 
  2794  0315                     	;# 
  2795  0316                     	;# 
  2796  0317                     	;# 
  2797  0318                     	;# 
  2798  038C                     	;# 
  2799  038D                     	;# 
  2800  038E                     	;# 
  2801  0391                     	;# 
  2802  0392                     	;# 
  2803  0393                     	;# 
  2804  0394                     	;# 
  2805  0395                     	;# 
  2806  0396                     	;# 
  2807  0397                     	;# 
  2808  0398                     	;# 
  2809  0399                     	;# 
  2810  039A                     	;# 
  2811  039C                     	;# 
  2812  039D                     	;# 
  2813  039E                     	;# 
  2814  039F                     	;# 
  2815  0411                     	;# 
  2816  0411                     	;# 
  2817  0412                     	;# 
  2818  0413                     	;# 
  2819  0414                     	;# 
  2820  0415                     	;# 
  2821  0416                     	;# 
  2822  0417                     	;# 
  2823  0418                     	;# 
  2824  0418                     	;# 
  2825  0419                     	;# 
  2826  041A                     	;# 
  2827  041B                     	;# 
  2828  041C                     	;# 
  2829  041D                     	;# 
  2830  041E                     	;# 
  2831  041F                     	;# 
  2832  0498                     	;# 
  2833  0498                     	;# 
  2834  0499                     	;# 
  2835  049A                     	;# 
  2836  049B                     	;# 
  2837  049B                     	;# 
  2838  049C                     	;# 
  2839  049D                     	;# 
  2840  049E                     	;# 
  2841  049F                     	;# 
  2842  0617                     	;# 
  2843  0618                     	;# 
  2844  0619                     	;# 
  2845  0619                     	;# 
  2846  061A                     	;# 
  2847  061B                     	;# 
  2848  061C                     	;# 
  2849  061C                     	;# 
  2850  061F                     	;# 
  2851  0691                     	;# 
  2852  0692                     	;# 
  2853  0693                     	;# 
  2854  0694                     	;# 
  2855  0695                     	;# 
  2856  0696                     	;# 
  2857  0697                     	;# 
  2858  0698                     	;# 
  2859  0699                     	;# 
  2860  0711                     	;# 
  2861  0712                     	;# 
  2862  0713                     	;# 
  2863  0714                     	;# 
  2864  0715                     	;# 
  2865  0716                     	;# 
  2866  0717                     	;# 
  2867  0718                     	;# 
  2868  0719                     	;# 
  2869  0891                     	;# 
  2870  0891                     	;# 
  2871  0891                     	;# 
  2872  0891                     	;# 
  2873  0891                     	;# 
  2874  0891                     	;# 
  2875  0892                     	;# 
  2876  0892                     	;# 
  2877  0892                     	;# 
  2878  0893                     	;# 
  2879  0893                     	;# 
  2880  0893                     	;# 
  2881  0893                     	;# 
  2882  0893                     	;# 
  2883  0893                     	;# 
  2884  0894                     	;# 
  2885  0894                     	;# 
  2886  0894                     	;# 
  2887  0895                     	;# 
  2888  0895                     	;# 
  2889  0895                     	;# 
  2890  0896                     	;# 
  2891  0896                     	;# 
  2892  0896                     	;# 
  2893  089B                     	;# 
  2894  0911                     	;# 
  2895  0912                     	;# 
  2896  0913                     	;# 
  2897  0914                     	;# 
  2898  0915                     	;# 
  2899  0916                     	;# 
  2900  0918                     	;# 
  2901  0919                     	;# 
  2902  091A                     	;# 
  2903  091B                     	;# 
  2904  091C                     	;# 
  2905  091D                     	;# 
  2906  091E                     	;# 
  2907  091F                     	;# 
  2908  0E0F                     	;# 
  2909  0E10                     	;# 
  2910  0E11                     	;# 
  2911  0E12                     	;# 
  2912  0E13                     	;# 
  2913  0E14                     	;# 
  2914  0E15                     	;# 
  2915  0E16                     	;# 
  2916  0E17                     	;# 
  2917  0E18                     	;# 
  2918  0E19                     	;# 
  2919  0E1A                     	;# 
  2920  0E1B                     	;# 
  2921  0E1C                     	;# 
  2922  0E1D                     	;# 
  2923  0E1E                     	;# 
  2924  0E1F                     	;# 
  2925  0E20                     	;# 
  2926  0E21                     	;# 
  2927  0E22                     	;# 
  2928  0E24                     	;# 
  2929  0E25                     	;# 
  2930  0E28                     	;# 
  2931  0E29                     	;# 
  2932  0E2A                     	;# 
  2933  0E2B                     	;# 
  2934  0E2C                     	;# 
  2935  0E2D                     	;# 
  2936  0E2E                     	;# 
  2937  0E2F                     	;# 
  2938  0E90                     	;# 
  2939  0E91                     	;# 
  2940  0E92                     	;# 
  2941  0E94                     	;# 
  2942  0E95                     	;# 
  2943  0E9C                     	;# 
  2944  0E9D                     	;# 
  2945  0E9E                     	;# 
  2946  0E9F                     	;# 
  2947  0EA0                     	;# 
  2948  0EA1                     	;# 
  2949  0EA2                     	;# 
  2950  0EA3                     	;# 
  2951  0EA4                     	;# 
  2952  0EA5                     	;# 
  2953  0EA6                     	;# 
  2954  0EA7                     	;# 
  2955  0F0F                     	;# 
  2956  0F10                     	;# 
  2957  0F11                     	;# 
  2958  0F12                     	;# 
  2959  0F13                     	;# 
  2960  0F14                     	;# 
  2961  0F15                     	;# 
  2962  0F16                     	;# 
  2963  0F17                     	;# 
  2964  0F18                     	;# 
  2965  0F19                     	;# 
  2966  0F1A                     	;# 
  2967  0F1B                     	;# 
  2968  0F1C                     	;# 
  2969  0F1D                     	;# 
  2970  0F1E                     	;# 
  2971  0F1F                     	;# 
  2972  0F20                     	;# 
  2973  0F21                     	;# 
  2974  0F22                     	;# 
  2975  0F23                     	;# 
  2976  0F24                     	;# 
  2977  0F25                     	;# 
  2978  0F26                     	;# 
  2979  0F27                     	;# 
  2980  0F28                     	;# 
  2981  0F29                     	;# 
  2982  0F2A                     	;# 
  2983  0F2B                     	;# 
  2984  0F2C                     	;# 
  2985  0F2D                     	;# 
  2986  0F2E                     	;# 
  2987  0F2F                     	;# 
  2988  0F30                     	;# 
  2989  0F31                     	;# 
  2990  0F32                     	;# 
  2991  0F33                     	;# 
  2992  0F34                     	;# 
  2993  0F35                     	;# 
  2994  0F36                     	;# 
  2995  0F37                     	;# 
  2996  0FE4                     	;# 
  2997  0FE5                     	;# 
  2998  0FE6                     	;# 
  2999  0FE7                     	;# 
  3000  0FE8                     	;# 
  3001  0FE9                     	;# 
  3002  0FEA                     	;# 
  3003  0FEB                     	;# 
  3004  0FED                     	;# 
  3005  0FEE                     	;# 
  3006  0FEF                     	;# 
  3007  0000                     	;# 
  3008  0001                     	;# 
  3009  0002                     	;# 
  3010  0003                     	;# 
  3011  0004                     	;# 
  3012  0005                     	;# 
  3013  0006                     	;# 
  3014  0007                     	;# 
  3015  0008                     	;# 
  3016  0009                     	;# 
  3017  000A                     	;# 
  3018  000B                     	;# 
  3019  000C                     	;# 
  3020  000D                     	;# 
  3021  000E                     	;# 
  3022  0010                     	;# 
  3023  0011                     	;# 
  3024  0012                     	;# 
  3025  0013                     	;# 
  3026  0014                     	;# 
  3027  0015                     	;# 
  3028  0015                     	;# 
  3029  0016                     	;# 
  3030  0016                     	;# 
  3031  0017                     	;# 
  3032  0018                     	;# 
  3033  0019                     	;# 
  3034  0019                     	;# 
  3035  001A                     	;# 
  3036  001B                     	;# 
  3037  001C                     	;# 
  3038  001D                     	;# 
  3039  001E                     	;# 
  3040  001F                     	;# 
  3041  008C                     	;# 
  3042  008D                     	;# 
  3043  008E                     	;# 
  3044  0090                     	;# 
  3045  0091                     	;# 
  3046  0092                     	;# 
  3047  0093                     	;# 
  3048  0094                     	;# 
  3049  0097                     	;# 
  3050  009B                     	;# 
  3051  009B                     	;# 
  3052  009C                     	;# 
  3053  009D                     	;# 
  3054  009E                     	;# 
  3055  009F                     	;# 
  3056  010C                     	;# 
  3057  010D                     	;# 
  3058  010E                     	;# 
  3059  0111                     	;# 
  3060  0112                     	;# 
  3061  0113                     	;# 
  3062  0114                     	;# 
  3063  0115                     	;# 
  3064  0116                     	;# 
  3065  0117                     	;# 
  3066  0118                     	;# 
  3067  0119                     	;# 
  3068  018C                     	;# 
  3069  018D                     	;# 
  3070  018E                     	;# 
  3071  0197                     	;# 
  3072  0199                     	;# 
  3073  0199                     	;# 
  3074  0199                     	;# 
  3075  019A                     	;# 
  3076  019A                     	;# 
  3077  019A                     	;# 
  3078  019B                     	;# 
  3079  019B                     	;# 
  3080  019B                     	;# 
  3081  019B                     	;# 
  3082  019B                     	;# 
  3083  019C                     	;# 
  3084  019C                     	;# 
  3085  019C                     	;# 
  3086  019D                     	;# 
  3087  019D                     	;# 
  3088  019D                     	;# 
  3089  019E                     	;# 
  3090  019E                     	;# 
  3091  019E                     	;# 
  3092  019F                     	;# 
  3093  019F                     	;# 
  3094  019F                     	;# 
  3095  019F                     	;# 
  3096  019F                     	;# 
  3097  020C                     	;# 
  3098  020D                     	;# 
  3099  020E                     	;# 
  3100  0211                     	;# 
  3101  0211                     	;# 
  3102  0212                     	;# 
  3103  0212                     	;# 
  3104  0213                     	;# 
  3105  0213                     	;# 
  3106  0214                     	;# 
  3107  0214                     	;# 
  3108  0215                     	;# 
  3109  0215                     	;# 
  3110  0215                     	;# 
  3111  0215                     	;# 
  3112  0216                     	;# 
  3113  0216                     	;# 
  3114  0217                     	;# 
  3115  0217                     	;# 
  3116  0219                     	;# 
  3117  021A                     	;# 
  3118  021B                     	;# 
  3119  021C                     	;# 
  3120  021D                     	;# 
  3121  021D                     	;# 
  3122  021E                     	;# 
  3123  021F                     	;# 
  3124  028C                     	;# 
  3125  028D                     	;# 
  3126  028E                     	;# 
  3127  0291                     	;# 
  3128  0291                     	;# 
  3129  0292                     	;# 
  3130  0293                     	;# 
  3131  0294                     	;# 
  3132  0295                     	;# 
  3133  0295                     	;# 
  3134  0296                     	;# 
  3135  0297                     	;# 
  3136  0298                     	;# 
  3137  029F                     	;# 
  3138  030C                     	;# 
  3139  030D                     	;# 
  3140  030E                     	;# 
  3141  0311                     	;# 
  3142  0311                     	;# 
  3143  0312                     	;# 
  3144  0313                     	;# 
  3145  0314                     	;# 
  3146  0315                     	;# 
  3147  0315                     	;# 
  3148  0316                     	;# 
  3149  0317                     	;# 
  3150  0318                     	;# 
  3151  038C                     	;# 
  3152  038D                     	;# 
  3153  038E                     	;# 
  3154  0391                     	;# 
  3155  0392                     	;# 
  3156  0393                     	;# 
  3157  0394                     	;# 
  3158  0395                     	;# 
  3159  0396                     	;# 
  3160  0397                     	;# 
  3161  0398                     	;# 
  3162  0399                     	;# 
  3163  039A                     	;# 
  3164  039C                     	;# 
  3165  039D                     	;# 
  3166  039E                     	;# 
  3167  039F                     	;# 
  3168  0411                     	;# 
  3169  0411                     	;# 
  3170  0412                     	;# 
  3171  0413                     	;# 
  3172  0414                     	;# 
  3173  0415                     	;# 
  3174  0416                     	;# 
  3175  0417                     	;# 
  3176  0418                     	;# 
  3177  0418                     	;# 
  3178  0419                     	;# 
  3179  041A                     	;# 
  3180  041B                     	;# 
  3181  041C                     	;# 
  3182  041D                     	;# 
  3183  041E                     	;# 
  3184  041F                     	;# 
  3185  0498                     	;# 
  3186  0498                     	;# 
  3187  0499                     	;# 
  3188  049A                     	;# 
  3189  049B                     	;# 
  3190  049B                     	;# 
  3191  049C                     	;# 
  3192  049D                     	;# 
  3193  049E                     	;# 
  3194  049F                     	;# 
  3195  0617                     	;# 
  3196  0618                     	;# 
  3197  0619                     	;# 
  3198  0619                     	;# 
  3199  061A                     	;# 
  3200  061B                     	;# 
  3201  061C                     	;# 
  3202  061C                     	;# 
  3203  061F                     	;# 
  3204  0691                     	;# 
  3205  0692                     	;# 
  3206  0693                     	;# 
  3207  0694                     	;# 
  3208  0695                     	;# 
  3209  0696                     	;# 
  3210  0697                     	;# 
  3211  0698                     	;# 
  3212  0699                     	;# 
  3213  0711                     	;# 
  3214  0712                     	;# 
  3215  0713                     	;# 
  3216  0714                     	;# 
  3217  0715                     	;# 
  3218  0716                     	;# 
  3219  0717                     	;# 
  3220  0718                     	;# 
  3221  0719                     	;# 
  3222  0891                     	;# 
  3223  0891                     	;# 
  3224  0891                     	;# 
  3225  0891                     	;# 
  3226  0891                     	;# 
  3227  0891                     	;# 
  3228  0892                     	;# 
  3229  0892                     	;# 
  3230  0892                     	;# 
  3231  0893                     	;# 
  3232  0893                     	;# 
  3233  0893                     	;# 
  3234  0893                     	;# 
  3235  0893                     	;# 
  3236  0893                     	;# 
  3237  0894                     	;# 
  3238  0894                     	;# 
  3239  0894                     	;# 
  3240  0895                     	;# 
  3241  0895                     	;# 
  3242  0895                     	;# 
  3243  0896                     	;# 
  3244  0896                     	;# 
  3245  0896                     	;# 
  3246  089B                     	;# 
  3247  0911                     	;# 
  3248  0912                     	;# 
  3249  0913                     	;# 
  3250  0914                     	;# 
  3251  0915                     	;# 
  3252  0916                     	;# 
  3253  0918                     	;# 
  3254  0919                     	;# 
  3255  091A                     	;# 
  3256  091B                     	;# 
  3257  091C                     	;# 
  3258  091D                     	;# 
  3259  091E                     	;# 
  3260  091F                     	;# 
  3261  0E0F                     	;# 
  3262  0E10                     	;# 
  3263  0E11                     	;# 
  3264  0E12                     	;# 
  3265  0E13                     	;# 
  3266  0E14                     	;# 
  3267  0E15                     	;# 
  3268  0E16                     	;# 
  3269  0E17                     	;# 
  3270  0E18                     	;# 
  3271  0E19                     	;# 
  3272  0E1A                     	;# 
  3273  0E1B                     	;# 
  3274  0E1C                     	;# 
  3275  0E1D                     	;# 
  3276  0E1E                     	;# 
  3277  0E1F                     	;# 
  3278  0E20                     	;# 
  3279  0E21                     	;# 
  3280  0E22                     	;# 
  3281  0E24                     	;# 
  3282  0E25                     	;# 
  3283  0E28                     	;# 
  3284  0E29                     	;# 
  3285  0E2A                     	;# 
  3286  0E2B                     	;# 
  3287  0E2C                     	;# 
  3288  0E2D                     	;# 
  3289  0E2E                     	;# 
  3290  0E2F                     	;# 
  3291  0E90                     	;# 
  3292  0E91                     	;# 
  3293  0E92                     	;# 
  3294  0E94                     	;# 
  3295  0E95                     	;# 
  3296  0E9C                     	;# 
  3297  0E9D                     	;# 
  3298  0E9E                     	;# 
  3299  0E9F                     	;# 
  3300  0EA0                     	;# 
  3301  0EA1                     	;# 
  3302  0EA2                     	;# 
  3303  0EA3                     	;# 
  3304  0EA4                     	;# 
  3305  0EA5                     	;# 
  3306  0EA6                     	;# 
  3307  0EA7                     	;# 
  3308  0F0F                     	;# 
  3309  0F10                     	;# 
  3310  0F11                     	;# 
  3311  0F12                     	;# 
  3312  0F13                     	;# 
  3313  0F14                     	;# 
  3314  0F15                     	;# 
  3315  0F16                     	;# 
  3316  0F17                     	;# 
  3317  0F18                     	;# 
  3318  0F19                     	;# 
  3319  0F1A                     	;# 
  3320  0F1B                     	;# 
  3321  0F1C                     	;# 
  3322  0F1D                     	;# 
  3323  0F1E                     	;# 
  3324  0F1F                     	;# 
  3325  0F20                     	;# 
  3326  0F21                     	;# 
  3327  0F22                     	;# 
  3328  0F23                     	;# 
  3329  0F24                     	;# 
  3330  0F25                     	;# 
  3331  0F26                     	;# 
  3332  0F27                     	;# 
  3333  0F28                     	;# 
  3334  0F29                     	;# 
  3335  0F2A                     	;# 
  3336  0F2B                     	;# 
  3337  0F2C                     	;# 
  3338  0F2D                     	;# 
  3339  0F2E                     	;# 
  3340  0F2F                     	;# 
  3341  0F30                     	;# 
  3342  0F31                     	;# 
  3343  0F32                     	;# 
  3344  0F33                     	;# 
  3345  0F34                     	;# 
  3346  0F35                     	;# 
  3347  0F36                     	;# 
  3348  0F37                     	;# 
  3349  0FE4                     	;# 
  3350  0FE5                     	;# 
  3351  0FE6                     	;# 
  3352  0FE7                     	;# 
  3353  0FE8                     	;# 
  3354  0FE9                     	;# 
  3355  0FEA                     	;# 
  3356  0FEB                     	;# 
  3357  0FED                     	;# 
  3358  0FEE                     	;# 
  3359  0FEF                     	;# 
  3360  0000                     	;# 
  3361  0001                     	;# 
  3362  0002                     	;# 
  3363  0003                     	;# 
  3364  0004                     	;# 
  3365  0005                     	;# 
  3366  0006                     	;# 
  3367  0007                     	;# 
  3368  0008                     	;# 
  3369  0009                     	;# 
  3370  000A                     	;# 
  3371  000B                     	;# 
  3372  000C                     	;# 
  3373  000D                     	;# 
  3374  000E                     	;# 
  3375  0010                     	;# 
  3376  0011                     	;# 
  3377  0012                     	;# 
  3378  0013                     	;# 
  3379  0014                     	;# 
  3380  0015                     	;# 
  3381  0015                     	;# 
  3382  0016                     	;# 
  3383  0016                     	;# 
  3384  0017                     	;# 
  3385  0018                     	;# 
  3386  0019                     	;# 
  3387  0019                     	;# 
  3388  001A                     	;# 
  3389  001B                     	;# 
  3390  001C                     	;# 
  3391  001D                     	;# 
  3392  001E                     	;# 
  3393  001F                     	;# 
  3394  008C                     	;# 
  3395  008D                     	;# 
  3396  008E                     	;# 
  3397  0090                     	;# 
  3398  0091                     	;# 
  3399  0092                     	;# 
  3400  0093                     	;# 
  3401  0094                     	;# 
  3402  0097                     	;# 
  3403  009B                     	;# 
  3404  009B                     	;# 
  3405  009C                     	;# 
  3406  009D                     	;# 
  3407  009E                     	;# 
  3408  009F                     	;# 
  3409  010C                     	;# 
  3410  010D                     	;# 
  3411  010E                     	;# 
  3412  0111                     	;# 
  3413  0112                     	;# 
  3414  0113                     	;# 
  3415  0114                     	;# 
  3416  0115                     	;# 
  3417  0116                     	;# 
  3418  0117                     	;# 
  3419  0118                     	;# 
  3420  0119                     	;# 
  3421  018C                     	;# 
  3422  018D                     	;# 
  3423  018E                     	;# 
  3424  0197                     	;# 
  3425  0199                     	;# 
  3426  0199                     	;# 
  3427  0199                     	;# 
  3428  019A                     	;# 
  3429  019A                     	;# 
  3430  019A                     	;# 
  3431  019B                     	;# 
  3432  019B                     	;# 
  3433  019B                     	;# 
  3434  019B                     	;# 
  3435  019B                     	;# 
  3436  019C                     	;# 
  3437  019C                     	;# 
  3438  019C                     	;# 
  3439  019D                     	;# 
  3440  019D                     	;# 
  3441  019D                     	;# 
  3442  019E                     	;# 
  3443  019E                     	;# 
  3444  019E                     	;# 
  3445  019F                     	;# 
  3446  019F                     	;# 
  3447  019F                     	;# 
  3448  019F                     	;# 
  3449  019F                     	;# 
  3450  020C                     	;# 
  3451  020D                     	;# 
  3452  020E                     	;# 
  3453  0211                     	;# 
  3454  0211                     	;# 
  3455  0212                     	;# 
  3456  0212                     	;# 
  3457  0213                     	;# 
  3458  0213                     	;# 
  3459  0214                     	;# 
  3460  0214                     	;# 
  3461  0215                     	;# 
  3462  0215                     	;# 
  3463  0215                     	;# 
  3464  0215                     	;# 
  3465  0216                     	;# 
  3466  0216                     	;# 
  3467  0217                     	;# 
  3468  0217                     	;# 
  3469  0219                     	;# 
  3470  021A                     	;# 
  3471  021B                     	;# 
  3472  021C                     	;# 
  3473  021D                     	;# 
  3474  021D                     	;# 
  3475  021E                     	;# 
  3476  021F                     	;# 
  3477  028C                     	;# 
  3478  028D                     	;# 
  3479  028E                     	;# 
  3480  0291                     	;# 
  3481  0291                     	;# 
  3482  0292                     	;# 
  3483  0293                     	;# 
  3484  0294                     	;# 
  3485  0295                     	;# 
  3486  0295                     	;# 
  3487  0296                     	;# 
  3488  0297                     	;# 
  3489  0298                     	;# 
  3490  029F                     	;# 
  3491  030C                     	;# 
  3492  030D                     	;# 
  3493  030E                     	;# 
  3494  0311                     	;# 
  3495  0311                     	;# 
  3496  0312                     	;# 
  3497  0313                     	;# 
  3498  0314                     	;# 
  3499  0315                     	;# 
  3500  0315                     	;# 
  3501  0316                     	;# 
  3502  0317                     	;# 
  3503  0318                     	;# 
  3504  038C                     	;# 
  3505  038D                     	;# 
  3506  038E                     	;# 
  3507  0391                     	;# 
  3508  0392                     	;# 
  3509  0393                     	;# 
  3510  0394                     	;# 
  3511  0395                     	;# 
  3512  0396                     	;# 
  3513  0397                     	;# 
  3514  0398                     	;# 
  3515  0399                     	;# 
  3516  039A                     	;# 
  3517  039C                     	;# 
  3518  039D                     	;# 
  3519  039E                     	;# 
  3520  039F                     	;# 
  3521  0411                     	;# 
  3522  0411                     	;# 
  3523  0412                     	;# 
  3524  0413                     	;# 
  3525  0414                     	;# 
  3526  0415                     	;# 
  3527  0416                     	;# 
  3528  0417                     	;# 
  3529  0418                     	;# 
  3530  0418                     	;# 
  3531  0419                     	;# 
  3532  041A                     	;# 
  3533  041B                     	;# 
  3534  041C                     	;# 
  3535  041D                     	;# 
  3536  041E                     	;# 
  3537  041F                     	;# 
  3538  0498                     	;# 
  3539  0498                     	;# 
  3540  0499                     	;# 
  3541  049A                     	;# 
  3542  049B                     	;# 
  3543  049B                     	;# 
  3544  049C                     	;# 
  3545  049D                     	;# 
  3546  049E                     	;# 
  3547  049F                     	;# 
  3548  0617                     	;# 
  3549  0618                     	;# 
  3550  0619                     	;# 
  3551  0619                     	;# 
  3552  061A                     	;# 
  3553  061B                     	;# 
  3554  061C                     	;# 
  3555  061C                     	;# 
  3556  061F                     	;# 
  3557  0691                     	;# 
  3558  0692                     	;# 
  3559  0693                     	;# 
  3560  0694                     	;# 
  3561  0695                     	;# 
  3562  0696                     	;# 
  3563  0697                     	;# 
  3564  0698                     	;# 
  3565  0699                     	;# 
  3566  0711                     	;# 
  3567  0712                     	;# 
  3568  0713                     	;# 
  3569  0714                     	;# 
  3570  0715                     	;# 
  3571  0716                     	;# 
  3572  0717                     	;# 
  3573  0718                     	;# 
  3574  0719                     	;# 
  3575  0891                     	;# 
  3576  0891                     	;# 
  3577  0891                     	;# 
  3578  0891                     	;# 
  3579  0891                     	;# 
  3580  0891                     	;# 
  3581  0892                     	;# 
  3582  0892                     	;# 
  3583  0892                     	;# 
  3584  0893                     	;# 
  3585  0893                     	;# 
  3586  0893                     	;# 
  3587  0893                     	;# 
  3588  0893                     	;# 
  3589  0893                     	;# 
  3590  0894                     	;# 
  3591  0894                     	;# 
  3592  0894                     	;# 
  3593  0895                     	;# 
  3594  0895                     	;# 
  3595  0895                     	;# 
  3596  0896                     	;# 
  3597  0896                     	;# 
  3598  0896                     	;# 
  3599  089B                     	;# 
  3600  0911                     	;# 
  3601  0912                     	;# 
  3602  0913                     	;# 
  3603  0914                     	;# 
  3604  0915                     	;# 
  3605  0916                     	;# 
  3606  0918                     	;# 
  3607  0919                     	;# 
  3608  091A                     	;# 
  3609  091B                     	;# 
  3610  091C                     	;# 
  3611  091D                     	;# 
  3612  091E                     	;# 
  3613  091F                     	;# 
  3614  0E0F                     	;# 
  3615  0E10                     	;# 
  3616  0E11                     	;# 
  3617  0E12                     	;# 
  3618  0E13                     	;# 
  3619  0E14                     	;# 
  3620  0E15                     	;# 
  3621  0E16                     	;# 
  3622  0E17                     	;# 
  3623  0E18                     	;# 
  3624  0E19                     	;# 
  3625  0E1A                     	;# 
  3626  0E1B                     	;# 
  3627  0E1C                     	;# 
  3628  0E1D                     	;# 
  3629  0E1E                     	;# 
  3630  0E1F                     	;# 
  3631  0E20                     	;# 
  3632  0E21                     	;# 
  3633  0E22                     	;# 
  3634  0E24                     	;# 
  3635  0E25                     	;# 
  3636  0E28                     	;# 
  3637  0E29                     	;# 
  3638  0E2A                     	;# 
  3639  0E2B                     	;# 
  3640  0E2C                     	;# 
  3641  0E2D                     	;# 
  3642  0E2E                     	;# 
  3643  0E2F                     	;# 
  3644  0E90                     	;# 
  3645  0E91                     	;# 
  3646  0E92                     	;# 
  3647  0E94                     	;# 
  3648  0E95                     	;# 
  3649  0E9C                     	;# 
  3650  0E9D                     	;# 
  3651  0E9E                     	;# 
  3652  0E9F                     	;# 
  3653  0EA0                     	;# 
  3654  0EA1                     	;# 
  3655  0EA2                     	;# 
  3656  0EA3                     	;# 
  3657  0EA4                     	;# 
  3658  0EA5                     	;# 
  3659  0EA6                     	;# 
  3660  0EA7                     	;# 
  3661  0F0F                     	;# 
  3662  0F10                     	;# 
  3663  0F11                     	;# 
  3664  0F12                     	;# 
  3665  0F13                     	;# 
  3666  0F14                     	;# 
  3667  0F15                     	;# 
  3668  0F16                     	;# 
  3669  0F17                     	;# 
  3670  0F18                     	;# 
  3671  0F19                     	;# 
  3672  0F1A                     	;# 
  3673  0F1B                     	;# 
  3674  0F1C                     	;# 
  3675  0F1D                     	;# 
  3676  0F1E                     	;# 
  3677  0F1F                     	;# 
  3678  0F20                     	;# 
  3679  0F21                     	;# 
  3680  0F22                     	;# 
  3681  0F23                     	;# 
  3682  0F24                     	;# 
  3683  0F25                     	;# 
  3684  0F26                     	;# 
  3685  0F27                     	;# 
  3686  0F28                     	;# 
  3687  0F29                     	;# 
  3688  0F2A                     	;# 
  3689  0F2B                     	;# 
  3690  0F2C                     	;# 
  3691  0F2D                     	;# 
  3692  0F2E                     	;# 
  3693  0F2F                     	;# 
  3694  0F30                     	;# 
  3695  0F31                     	;# 
  3696  0F32                     	;# 
  3697  0F33                     	;# 
  3698  0F34                     	;# 
  3699  0F35                     	;# 
  3700  0F36                     	;# 
  3701  0F37                     	;# 
  3702  0FE4                     	;# 
  3703  0FE5                     	;# 
  3704  0FE6                     	;# 
  3705  0FE7                     	;# 
  3706  0FE8                     	;# 
  3707  0FE9                     	;# 
  3708  0FEA                     	;# 
  3709  0FEB                     	;# 
  3710  0FED                     	;# 
  3711  0FEE                     	;# 
  3712  0FEF                     	;# 
  3713  0000                     	;# 
  3714  0001                     	;# 
  3715  0002                     	;# 
  3716  0003                     	;# 
  3717  0004                     	;# 
  3718  0005                     	;# 
  3719  0006                     	;# 
  3720  0007                     	;# 
  3721  0008                     	;# 
  3722  0009                     	;# 
  3723  000A                     	;# 
  3724  000B                     	;# 
  3725  000C                     	;# 
  3726  000D                     	;# 
  3727  000E                     	;# 
  3728  0010                     	;# 
  3729  0011                     	;# 
  3730  0012                     	;# 
  3731  0013                     	;# 
  3732  0014                     	;# 
  3733  0015                     	;# 
  3734  0015                     	;# 
  3735  0016                     	;# 
  3736  0016                     	;# 
  3737  0017                     	;# 
  3738  0018                     	;# 
  3739  0019                     	;# 
  3740  0019                     	;# 
  3741  001A                     	;# 
  3742  001B                     	;# 
  3743  001C                     	;# 
  3744  001D                     	;# 
  3745  001E                     	;# 
  3746  001F                     	;# 
  3747  008C                     	;# 
  3748  008D                     	;# 
  3749  008E                     	;# 
  3750  0090                     	;# 
  3751  0091                     	;# 
  3752  0092                     	;# 
  3753  0093                     	;# 
  3754  0094                     	;# 
  3755  0097                     	;# 
  3756  009B                     	;# 
  3757  009B                     	;# 
  3758  009C                     	;# 
  3759  009D                     	;# 
  3760  009E                     	;# 
  3761  009F                     	;# 
  3762  010C                     	;# 
  3763  010D                     	;# 
  3764  010E                     	;# 
  3765  0111                     	;# 
  3766  0112                     	;# 
  3767  0113                     	;# 
  3768  0114                     	;# 
  3769  0115                     	;# 
  3770  0116                     	;# 
  3771  0117                     	;# 
  3772  0118                     	;# 
  3773  0119                     	;# 
  3774  018C                     	;# 
  3775  018D                     	;# 
  3776  018E                     	;# 
  3777  0197                     	;# 
  3778  0199                     	;# 
  3779  0199                     	;# 
  3780  0199                     	;# 
  3781  019A                     	;# 
  3782  019A                     	;# 
  3783  019A                     	;# 
  3784  019B                     	;# 
  3785  019B                     	;# 
  3786  019B                     	;# 
  3787  019B                     	;# 
  3788  019B                     	;# 
  3789  019C                     	;# 
  3790  019C                     	;# 
  3791  019C                     	;# 
  3792  019D                     	;# 
  3793  019D                     	;# 
  3794  019D                     	;# 
  3795  019E                     	;# 
  3796  019E                     	;# 
  3797  019E                     	;# 
  3798  019F                     	;# 
  3799  019F                     	;# 
  3800  019F                     	;# 
  3801  019F                     	;# 
  3802  019F                     	;# 
  3803  020C                     	;# 
  3804  020D                     	;# 
  3805  020E                     	;# 
  3806  0211                     	;# 
  3807  0211                     	;# 
  3808  0212                     	;# 
  3809  0212                     	;# 
  3810  0213                     	;# 
  3811  0213                     	;# 
  3812  0214                     	;# 
  3813  0214                     	;# 
  3814  0215                     	;# 
  3815  0215                     	;# 
  3816  0215                     	;# 
  3817  0215                     	;# 
  3818  0216                     	;# 
  3819  0216                     	;# 
  3820  0217                     	;# 
  3821  0217                     	;# 
  3822  0219                     	;# 
  3823  021A                     	;# 
  3824  021B                     	;# 
  3825  021C                     	;# 
  3826  021D                     	;# 
  3827  021D                     	;# 
  3828  021E                     	;# 
  3829  021F                     	;# 
  3830  028C                     	;# 
  3831  028D                     	;# 
  3832  028E                     	;# 
  3833  0291                     	;# 
  3834  0291                     	;# 
  3835  0292                     	;# 
  3836  0293                     	;# 
  3837  0294                     	;# 
  3838  0295                     	;# 
  3839  0295                     	;# 
  3840  0296                     	;# 
  3841  0297                     	;# 
  3842  0298                     	;# 
  3843  029F                     	;# 
  3844  030C                     	;# 
  3845  030D                     	;# 
  3846  030E                     	;# 
  3847  0311                     	;# 
  3848  0311                     	;# 
  3849  0312                     	;# 
  3850  0313                     	;# 
  3851  0314                     	;# 
  3852  0315                     	;# 
  3853  0315                     	;# 
  3854  0316                     	;# 
  3855  0317                     	;# 
  3856  0318                     	;# 
  3857  038C                     	;# 
  3858  038D                     	;# 
  3859  038E                     	;# 
  3860  0391                     	;# 
  3861  0392                     	;# 
  3862  0393                     	;# 
  3863  0394                     	;# 
  3864  0395                     	;# 
  3865  0396                     	;# 
  3866  0397                     	;# 
  3867  0398                     	;# 
  3868  0399                     	;# 
  3869  039A                     	;# 
  3870  039C                     	;# 
  3871  039D                     	;# 
  3872  039E                     	;# 
  3873  039F                     	;# 
  3874  0411                     	;# 
  3875  0411                     	;# 
  3876  0412                     	;# 
  3877  0413                     	;# 
  3878  0414                     	;# 
  3879  0415                     	;# 
  3880  0416                     	;# 
  3881  0417                     	;# 
  3882  0418                     	;# 
  3883  0418                     	;# 
  3884  0419                     	;# 
  3885  041A                     	;# 
  3886  041B                     	;# 
  3887  041C                     	;# 
  3888  041D                     	;# 
  3889  041E                     	;# 
  3890  041F                     	;# 
  3891  0498                     	;# 
  3892  0498                     	;# 
  3893  0499                     	;# 
  3894  049A                     	;# 
  3895  049B                     	;# 
  3896  049B                     	;# 
  3897  049C                     	;# 
  3898  049D                     	;# 
  3899  049E                     	;# 
  3900  049F                     	;# 
  3901  0617                     	;# 
  3902  0618                     	;# 
  3903  0619                     	;# 
  3904  0619                     	;# 
  3905  061A                     	;# 
  3906  061B                     	;# 
  3907  061C                     	;# 
  3908  061C                     	;# 
  3909  061F                     	;# 
  3910  0691                     	;# 
  3911  0692                     	;# 
  3912  0693                     	;# 
  3913  0694                     	;# 
  3914  0695                     	;# 
  3915  0696                     	;# 
  3916  0697                     	;# 
  3917  0698                     	;# 
  3918  0699                     	;# 
  3919  0711                     	;# 
  3920  0712                     	;# 
  3921  0713                     	;# 
  3922  0714                     	;# 
  3923  0715                     	;# 
  3924  0716                     	;# 
  3925  0717                     	;# 
  3926  0718                     	;# 
  3927  0719                     	;# 
  3928  0891                     	;# 
  3929  0891                     	;# 
  3930  0891                     	;# 
  3931  0891                     	;# 
  3932  0891                     	;# 
  3933  0891                     	;# 
  3934  0892                     	;# 
  3935  0892                     	;# 
  3936  0892                     	;# 
  3937  0893                     	;# 
  3938  0893                     	;# 
  3939  0893                     	;# 
  3940  0893                     	;# 
  3941  0893                     	;# 
  3942  0893                     	;# 
  3943  0894                     	;# 
  3944  0894                     	;# 
  3945  0894                     	;# 
  3946  0895                     	;# 
  3947  0895                     	;# 
  3948  0895                     	;# 
  3949  0896                     	;# 
  3950  0896                     	;# 
  3951  0896                     	;# 
  3952  089B                     	;# 
  3953  0911                     	;# 
  3954  0912                     	;# 
  3955  0913                     	;# 
  3956  0914                     	;# 
  3957  0915                     	;# 
  3958  0916                     	;# 
  3959  0918                     	;# 
  3960  0919                     	;# 
  3961  091A                     	;# 
  3962  091B                     	;# 
  3963  091C                     	;# 
  3964  091D                     	;# 
  3965  091E                     	;# 
  3966  091F                     	;# 
  3967  0E0F                     	;# 
  3968  0E10                     	;# 
  3969  0E11                     	;# 
  3970  0E12                     	;# 
  3971  0E13                     	;# 
  3972  0E14                     	;# 
  3973  0E15                     	;# 
  3974  0E16                     	;# 
  3975  0E17                     	;# 
  3976  0E18                     	;# 
  3977  0E19                     	;# 
  3978  0E1A                     	;# 
  3979  0E1B                     	;# 
  3980  0E1C                     	;# 
  3981  0E1D                     	;# 
  3982  0E1E                     	;# 
  3983  0E1F                     	;# 
  3984  0E20                     	;# 
  3985  0E21                     	;# 
  3986  0E22                     	;# 
  3987  0E24                     	;# 
  3988  0E25                     	;# 
  3989  0E28                     	;# 
  3990  0E29                     	;# 
  3991  0E2A                     	;# 
  3992  0E2B                     	;# 
  3993  0E2C                     	;# 
  3994  0E2D                     	;# 
  3995  0E2E                     	;# 
  3996  0E2F                     	;# 
  3997  0E90                     	;# 
  3998  0E91                     	;# 
  3999  0E92                     	;# 
  4000  0E94                     	;# 
  4001  0E95                     	;# 
  4002  0E9C                     	;# 
  4003  0E9D                     	;# 
  4004  0E9E                     	;# 
  4005  0E9F                     	;# 
  4006  0EA0                     	;# 
  4007  0EA1                     	;# 
  4008  0EA2                     	;# 
  4009  0EA3                     	;# 
  4010  0EA4                     	;# 
  4011  0EA5                     	;# 
  4012  0EA6                     	;# 
  4013  0EA7                     	;# 
  4014  0F0F                     	;# 
  4015  0F10                     	;# 
  4016  0F11                     	;# 
  4017  0F12                     	;# 
  4018  0F13                     	;# 
  4019  0F14                     	;# 
  4020  0F15                     	;# 
  4021  0F16                     	;# 
  4022  0F17                     	;# 
  4023  0F18                     	;# 
  4024  0F19                     	;# 
  4025  0F1A                     	;# 
  4026  0F1B                     	;# 
  4027  0F1C                     	;# 
  4028  0F1D                     	;# 
  4029  0F1E                     	;# 
  4030  0F1F                     	;# 
  4031  0F20                     	;# 
  4032  0F21                     	;# 
  4033  0F22                     	;# 
  4034  0F23                     	;# 
  4035  0F24                     	;# 
  4036  0F25                     	;# 
  4037  0F26                     	;# 
  4038  0F27                     	;# 
  4039  0F28                     	;# 
  4040  0F29                     	;# 
  4041  0F2A                     	;# 
  4042  0F2B                     	;# 
  4043  0F2C                     	;# 
  4044  0F2D                     	;# 
  4045  0F2E                     	;# 
  4046  0F2F                     	;# 
  4047  0F30                     	;# 
  4048  0F31                     	;# 
  4049  0F32                     	;# 
  4050  0F33                     	;# 
  4051  0F34                     	;# 
  4052  0F35                     	;# 
  4053  0F36                     	;# 
  4054  0F37                     	;# 
  4055  0FE4                     	;# 
  4056  0FE5                     	;# 
  4057  0FE6                     	;# 
  4058  0FE7                     	;# 
  4059  0FE8                     	;# 
  4060  0FE9                     	;# 
  4061  0FEA                     	;# 
  4062  0FEB                     	;# 
  4063  0FED                     	;# 
  4064  0FEE                     	;# 
  4065  0FEF                     	;# 
  4066  0000                     	;# 
  4067  0001                     	;# 
  4068  0002                     	;# 
  4069  0003                     	;# 
  4070  0004                     	;# 
  4071  0005                     	;# 
  4072  0006                     	;# 
  4073  0007                     	;# 
  4074  0008                     	;# 
  4075  0009                     	;# 
  4076  000A                     	;# 
  4077  000B                     	;# 
  4078  000C                     	;# 
  4079  000D                     	;# 
  4080  000E                     	;# 
  4081  0010                     	;# 
  4082  0011                     	;# 
  4083  0012                     	;# 
  4084  0013                     	;# 
  4085  0014                     	;# 
  4086  0015                     	;# 
  4087  0015                     	;# 
  4088  0016                     	;# 
  4089  0016                     	;# 
  4090  0017                     	;# 
  4091  0018                     	;# 
  4092  0019                     	;# 
  4093  0019                     	;# 
  4094  001A                     	;# 
  4095  001B                     	;# 
  4096  001C                     	;# 
  4097  001D                     	;# 
  4098  001E                     	;# 
  4099  001F                     	;# 
  4100  008C                     	;# 
  4101  008D                     	;# 
  4102  008E                     	;# 
  4103  0090                     	;# 
  4104  0091                     	;# 
  4105  0092                     	;# 
  4106  0093                     	;# 
  4107  0094                     	;# 
  4108  0097                     	;# 
  4109  009B                     	;# 
  4110  009B                     	;# 
  4111  009C                     	;# 
  4112  009D                     	;# 
  4113  009E                     	;# 
  4114  009F                     	;# 
  4115  010C                     	;# 
  4116  010D                     	;# 
  4117  010E                     	;# 
  4118  0111                     	;# 
  4119  0112                     	;# 
  4120  0113                     	;# 
  4121  0114                     	;# 
  4122  0115                     	;# 
  4123  0116                     	;# 
  4124  0117                     	;# 
  4125  0118                     	;# 
  4126  0119                     	;# 
  4127  018C                     	;# 
  4128  018D                     	;# 
  4129  018E                     	;# 
  4130  0197                     	;# 
  4131  0199                     	;# 
  4132  0199                     	;# 
  4133  0199                     	;# 
  4134  019A                     	;# 
  4135  019A                     	;# 
  4136  019A                     	;# 
  4137  019B                     	;# 
  4138  019B                     	;# 
  4139  019B                     	;# 
  4140  019B                     	;# 
  4141  019B                     	;# 
  4142  019C                     	;# 
  4143  019C                     	;# 
  4144  019C                     	;# 
  4145  019D                     	;# 
  4146  019D                     	;# 
  4147  019D                     	;# 
  4148  019E                     	;# 
  4149  019E                     	;# 
  4150  019E                     	;# 
  4151  019F                     	;# 
  4152  019F                     	;# 
  4153  019F                     	;# 
  4154  019F                     	;# 
  4155  019F                     	;# 
  4156  020C                     	;# 
  4157  020D                     	;# 
  4158  020E                     	;# 
  4159  0211                     	;# 
  4160  0211                     	;# 
  4161  0212                     	;# 
  4162  0212                     	;# 
  4163  0213                     	;# 
  4164  0213                     	;# 
  4165  0214                     	;# 
  4166  0214                     	;# 
  4167  0215                     	;# 
  4168  0215                     	;# 
  4169  0215                     	;# 
  4170  0215                     	;# 
  4171  0216                     	;# 
  4172  0216                     	;# 
  4173  0217                     	;# 
  4174  0217                     	;# 
  4175  0219                     	;# 
  4176  021A                     	;# 
  4177  021B                     	;# 
  4178  021C                     	;# 
  4179  021D                     	;# 
  4180  021D                     	;# 
  4181  021E                     	;# 
  4182  021F                     	;# 
  4183  028C                     	;# 
  4184  028D                     	;# 
  4185  028E                     	;# 
  4186  0291                     	;# 
  4187  0291                     	;# 
  4188  0292                     	;# 
  4189  0293                     	;# 
  4190  0294                     	;# 
  4191  0295                     	;# 
  4192  0295                     	;# 
  4193  0296                     	;# 
  4194  0297                     	;# 
  4195  0298                     	;# 
  4196  029F                     	;# 
  4197  030C                     	;# 
  4198  030D                     	;# 
  4199  030E                     	;# 
  4200  0311                     	;# 
  4201  0311                     	;# 
  4202  0312                     	;# 
  4203  0313                     	;# 
  4204  0314                     	;# 
  4205  0315                     	;# 
  4206  0315                     	;# 
  4207  0316                     	;# 
  4208  0317                     	;# 
  4209  0318                     	;# 
  4210  038C                     	;# 
  4211  038D                     	;# 
  4212  038E                     	;# 
  4213  0391                     	;# 
  4214  0392                     	;# 
  4215  0393                     	;# 
  4216  0394                     	;# 
  4217  0395                     	;# 
  4218  0396                     	;# 
  4219  0397                     	;# 
  4220  0398                     	;# 
  4221  0399                     	;# 
  4222  039A                     	;# 
  4223  039C                     	;# 
  4224  039D                     	;# 
  4225  039E                     	;# 
  4226  039F                     	;# 
  4227  0411                     	;# 
  4228  0411                     	;# 
  4229  0412                     	;# 
  4230  0413                     	;# 
  4231  0414                     	;# 
  4232  0415                     	;# 
  4233  0416                     	;# 
  4234  0417                     	;# 
  4235  0418                     	;# 
  4236  0418                     	;# 
  4237  0419                     	;# 
  4238  041A                     	;# 
  4239  041B                     	;# 
  4240  041C                     	;# 
  4241  041D                     	;# 
  4242  041E                     	;# 
  4243  041F                     	;# 
  4244  0498                     	;# 
  4245  0498                     	;# 
  4246  0499                     	;# 
  4247  049A                     	;# 
  4248  049B                     	;# 
  4249  049B                     	;# 
  4250  049C                     	;# 
  4251  049D                     	;# 
  4252  049E                     	;# 
  4253  049F                     	;# 
  4254  0617                     	;# 
  4255  0618                     	;# 
  4256  0619                     	;# 
  4257  0619                     	;# 
  4258  061A                     	;# 
  4259  061B                     	;# 
  4260  061C                     	;# 
  4261  061C                     	;# 
  4262  061F                     	;# 
  4263  0691                     	;# 
  4264  0692                     	;# 
  4265  0693                     	;# 
  4266  0694                     	;# 
  4267  0695                     	;# 
  4268  0696                     	;# 
  4269  0697                     	;# 
  4270  0698                     	;# 
  4271  0699                     	;# 
  4272  0711                     	;# 
  4273  0712                     	;# 
  4274  0713                     	;# 
  4275  0714                     	;# 
  4276  0715                     	;# 
  4277  0716                     	;# 
  4278  0717                     	;# 
  4279  0718                     	;# 
  4280  0719                     	;# 
  4281  0891                     	;# 
  4282  0891                     	;# 
  4283  0891                     	;# 
  4284  0891                     	;# 
  4285  0891                     	;# 
  4286  0891                     	;# 
  4287  0892                     	;# 
  4288  0892                     	;# 
  4289  0892                     	;# 
  4290  0893                     	;# 
  4291  0893                     	;# 
  4292  0893                     	;# 
  4293  0893                     	;# 
  4294  0893                     	;# 
  4295  0893                     	;# 
  4296  0894                     	;# 
  4297  0894                     	;# 
  4298  0894                     	;# 
  4299  0895                     	;# 
  4300  0895                     	;# 
  4301  0895                     	;# 
  4302  0896                     	;# 
  4303  0896                     	;# 
  4304  0896                     	;# 
  4305  089B                     	;# 
  4306  0911                     	;# 
  4307  0912                     	;# 
  4308  0913                     	;# 
  4309  0914                     	;# 
  4310  0915                     	;# 
  4311  0916                     	;# 
  4312  0918                     	;# 
  4313  0919                     	;# 
  4314  091A                     	;# 
  4315  091B                     	;# 
  4316  091C                     	;# 
  4317  091D                     	;# 
  4318  091E                     	;# 
  4319  091F                     	;# 
  4320  0E0F                     	;# 
  4321  0E10                     	;# 
  4322  0E11                     	;# 
  4323  0E12                     	;# 
  4324  0E13                     	;# 
  4325  0E14                     	;# 
  4326  0E15                     	;# 
  4327  0E16                     	;# 
  4328  0E17                     	;# 
  4329  0E18                     	;# 
  4330  0E19                     	;# 
  4331  0E1A                     	;# 
  4332  0E1B                     	;# 
  4333  0E1C                     	;# 
  4334  0E1D                     	;# 
  4335  0E1E                     	;# 
  4336  0E1F                     	;# 
  4337  0E20                     	;# 
  4338  0E21                     	;# 
  4339  0E22                     	;# 
  4340  0E24                     	;# 
  4341  0E25                     	;# 
  4342  0E28                     	;# 
  4343  0E29                     	;# 
  4344  0E2A                     	;# 
  4345  0E2B                     	;# 
  4346  0E2C                     	;# 
  4347  0E2D                     	;# 
  4348  0E2E                     	;# 
  4349  0E2F                     	;# 
  4350  0E90                     	;# 
  4351  0E91                     	;# 
  4352  0E92                     	;# 
  4353  0E94                     	;# 
  4354  0E95                     	;# 
  4355  0E9C                     	;# 
  4356  0E9D                     	;# 
  4357  0E9E                     	;# 
  4358  0E9F                     	;# 
  4359  0EA0                     	;# 
  4360  0EA1                     	;# 
  4361  0EA2                     	;# 
  4362  0EA3                     	;# 
  4363  0EA4                     	;# 
  4364  0EA5                     	;# 
  4365  0EA6                     	;# 
  4366  0EA7                     	;# 
  4367  0F0F                     	;# 
  4368  0F10                     	;# 
  4369  0F11                     	;# 
  4370  0F12                     	;# 
  4371  0F13                     	;# 
  4372  0F14                     	;# 
  4373  0F15                     	;# 
  4374  0F16                     	;# 
  4375  0F17                     	;# 
  4376  0F18                     	;# 
  4377  0F19                     	;# 
  4378  0F1A                     	;# 
  4379  0F1B                     	;# 
  4380  0F1C                     	;# 
  4381  0F1D                     	;# 
  4382  0F1E                     	;# 
  4383  0F1F                     	;# 
  4384  0F20                     	;# 
  4385  0F21                     	;# 
  4386  0F22                     	;# 
  4387  0F23                     	;# 
  4388  0F24                     	;# 
  4389  0F25                     	;# 
  4390  0F26                     	;# 
  4391  0F27                     	;# 
  4392  0F28                     	;# 
  4393  0F29                     	;# 
  4394  0F2A                     	;# 
  4395  0F2B                     	;# 
  4396  0F2C                     	;# 
  4397  0F2D                     	;# 
  4398  0F2E                     	;# 
  4399  0F2F                     	;# 
  4400  0F30                     	;# 
  4401  0F31                     	;# 
  4402  0F32                     	;# 
  4403  0F33                     	;# 
  4404  0F34                     	;# 
  4405  0F35                     	;# 
  4406  0F36                     	;# 
  4407  0F37                     	;# 
  4408  0FE4                     	;# 
  4409  0FE5                     	;# 
  4410  0FE6                     	;# 
  4411  0FE7                     	;# 
  4412  0FE8                     	;# 
  4413  0FE9                     	;# 
  4414  0FEA                     	;# 
  4415  0FEB                     	;# 
  4416  0FED                     	;# 
  4417  0FEE                     	;# 
  4418  0FEF                     	;# 
  4419  0000                     	;# 
  4420  0001                     	;# 
  4421  0002                     	;# 
  4422  0003                     	;# 
  4423  0004                     	;# 
  4424  0005                     	;# 
  4425  0006                     	;# 
  4426  0007                     	;# 
  4427  0008                     	;# 
  4428  0009                     	;# 
  4429  000A                     	;# 
  4430  000B                     	;# 
  4431  000C                     	;# 
  4432  000D                     	;# 
  4433  000E                     	;# 
  4434  0010                     	;# 
  4435  0011                     	;# 
  4436  0012                     	;# 
  4437  0013                     	;# 
  4438  0014                     	;# 
  4439  0015                     	;# 
  4440  0015                     	;# 
  4441  0016                     	;# 
  4442  0016                     	;# 
  4443  0017                     	;# 
  4444  0018                     	;# 
  4445  0019                     	;# 
  4446  0019                     	;# 
  4447  001A                     	;# 
  4448  001B                     	;# 
  4449  001C                     	;# 
  4450  001D                     	;# 
  4451  001E                     	;# 
  4452  001F                     	;# 
  4453  008C                     	;# 
  4454  008D                     	;# 
  4455  008E                     	;# 
  4456  0090                     	;# 
  4457  0091                     	;# 
  4458  0092                     	;# 
  4459  0093                     	;# 
  4460  0094                     	;# 
  4461  0097                     	;# 
  4462  009B                     	;# 
  4463  009B                     	;# 
  4464  009C                     	;# 
  4465  009D                     	;# 
  4466  009E                     	;# 
  4467  009F                     	;# 
  4468  010C                     	;# 
  4469  010D                     	;# 
  4470  010E                     	;# 
  4471  0111                     	;# 
  4472  0112                     	;# 
  4473  0113                     	;# 
  4474  0114                     	;# 
  4475  0115                     	;# 
  4476  0116                     	;# 
  4477  0117                     	;# 
  4478  0118                     	;# 
  4479  0119                     	;# 
  4480  018C                     	;# 
  4481  018D                     	;# 
  4482  018E                     	;# 
  4483  0197                     	;# 
  4484  0199                     	;# 
  4485  0199                     	;# 
  4486  0199                     	;# 
  4487  019A                     	;# 
  4488  019A                     	;# 
  4489  019A                     	;# 
  4490  019B                     	;# 
  4491  019B                     	;# 
  4492  019B                     	;# 
  4493  019B                     	;# 
  4494  019B                     	;# 
  4495  019C                     	;# 
  4496  019C                     	;# 
  4497  019C                     	;# 
  4498  019D                     	;# 
  4499  019D                     	;# 
  4500  019D                     	;# 
  4501  019E                     	;# 
  4502  019E                     	;# 
  4503  019E                     	;# 
  4504  019F                     	;# 
  4505  019F                     	;# 
  4506  019F                     	;# 
  4507  019F                     	;# 
  4508  019F                     	;# 
  4509  020C                     	;# 
  4510  020D                     	;# 
  4511  020E                     	;# 
  4512  0211                     	;# 
  4513  0211                     	;# 
  4514  0212                     	;# 
  4515  0212                     	;# 
  4516  0213                     	;# 
  4517  0213                     	;# 
  4518  0214                     	;# 
  4519  0214                     	;# 
  4520  0215                     	;# 
  4521  0215                     	;# 
  4522  0215                     	;# 
  4523  0215                     	;# 
  4524  0216                     	;# 
  4525  0216                     	;# 
  4526  0217                     	;# 
  4527  0217                     	;# 
  4528  0219                     	;# 
  4529  021A                     	;# 
  4530  021B                     	;# 
  4531  021C                     	;# 
  4532  021D                     	;# 
  4533  021D                     	;# 
  4534  021E                     	;# 
  4535  021F                     	;# 
  4536  028C                     	;# 
  4537  028D                     	;# 
  4538  028E                     	;# 
  4539  0291                     	;# 
  4540  0291                     	;# 
  4541  0292                     	;# 
  4542  0293                     	;# 
  4543  0294                     	;# 
  4544  0295                     	;# 
  4545  0295                     	;# 
  4546  0296                     	;# 
  4547  0297                     	;# 
  4548  0298                     	;# 
  4549  029F                     	;# 
  4550  030C                     	;# 
  4551  030D                     	;# 
  4552  030E                     	;# 
  4553  0311                     	;# 
  4554  0311                     	;# 
  4555  0312                     	;# 
  4556  0313                     	;# 
  4557  0314                     	;# 
  4558  0315                     	;# 
  4559  0315                     	;# 
  4560  0316                     	;# 
  4561  0317                     	;# 
  4562  0318                     	;# 
  4563  038C                     	;# 
  4564  038D                     	;# 
  4565  038E                     	;# 
  4566  0391                     	;# 
  4567  0392                     	;# 
  4568  0393                     	;# 
  4569  0394                     	;# 
  4570  0395                     	;# 
  4571  0396                     	;# 
  4572  0397                     	;# 
  4573  0398                     	;# 
  4574  0399                     	;# 
  4575  039A                     	;# 
  4576  039C                     	;# 
  4577  039D                     	;# 
  4578  039E                     	;# 
  4579  039F                     	;# 
  4580  0411                     	;# 
  4581  0411                     	;# 
  4582  0412                     	;# 
  4583  0413                     	;# 
  4584  0414                     	;# 
  4585  0415                     	;# 
  4586  0416                     	;# 
  4587  0417                     	;# 
  4588  0418                     	;# 
  4589  0418                     	;# 
  4590  0419                     	;# 
  4591  041A                     	;# 
  4592  041B                     	;# 
  4593  041C                     	;# 
  4594  041D                     	;# 
  4595  041E                     	;# 
  4596  041F                     	;# 
  4597  0498                     	;# 
  4598  0498                     	;# 
  4599  0499                     	;# 
  4600  049A                     	;# 
  4601  049B                     	;# 
  4602  049B                     	;# 
  4603  049C                     	;# 
  4604  049D                     	;# 
  4605  049E                     	;# 
  4606  049F                     	;# 
  4607  0617                     	;# 
  4608  0618                     	;# 
  4609  0619                     	;# 
  4610  0619                     	;# 
  4611  061A                     	;# 
  4612  061B                     	;# 
  4613  061C                     	;# 
  4614  061C                     	;# 
  4615  061F                     	;# 
  4616  0691                     	;# 
  4617  0692                     	;# 
  4618  0693                     	;# 
  4619  0694                     	;# 
  4620  0695                     	;# 
  4621  0696                     	;# 
  4622  0697                     	;# 
  4623  0698                     	;# 
  4624  0699                     	;# 
  4625  0711                     	;# 
  4626  0712                     	;# 
  4627  0713                     	;# 
  4628  0714                     	;# 
  4629  0715                     	;# 
  4630  0716                     	;# 
  4631  0717                     	;# 
  4632  0718                     	;# 
  4633  0719                     	;# 
  4634  0891                     	;# 
  4635  0891                     	;# 
  4636  0891                     	;# 
  4637  0891                     	;# 
  4638  0891                     	;# 
  4639  0891                     	;# 
  4640  0892                     	;# 
  4641  0892                     	;# 
  4642  0892                     	;# 
  4643  0893                     	;# 
  4644  0893                     	;# 
  4645  0893                     	;# 
  4646  0893                     	;# 
  4647  0893                     	;# 
  4648  0893                     	;# 
  4649  0894                     	;# 
  4650  0894                     	;# 
  4651  0894                     	;# 
  4652  0895                     	;# 
  4653  0895                     	;# 
  4654  0895                     	;# 
  4655  0896                     	;# 
  4656  0896                     	;# 
  4657  0896                     	;# 
  4658  089B                     	;# 
  4659  0911                     	;# 
  4660  0912                     	;# 
  4661  0913                     	;# 
  4662  0914                     	;# 
  4663  0915                     	;# 
  4664  0916                     	;# 
  4665  0918                     	;# 
  4666  0919                     	;# 
  4667  091A                     	;# 
  4668  091B                     	;# 
  4669  091C                     	;# 
  4670  091D                     	;# 
  4671  091E                     	;# 
  4672  091F                     	;# 
  4673  0E0F                     	;# 
  4674  0E10                     	;# 
  4675  0E11                     	;# 
  4676  0E12                     	;# 
  4677  0E13                     	;# 
  4678  0E14                     	;# 
  4679  0E15                     	;# 
  4680  0E16                     	;# 
  4681  0E17                     	;# 
  4682  0E18                     	;# 
  4683  0E19                     	;# 
  4684  0E1A                     	;# 
  4685  0E1B                     	;# 
  4686  0E1C                     	;# 
  4687  0E1D                     	;# 
  4688  0E1E                     	;# 
  4689  0E1F                     	;# 
  4690  0E20                     	;# 
  4691  0E21                     	;# 
  4692  0E22                     	;# 
  4693  0E24                     	;# 
  4694  0E25                     	;# 
  4695  0E28                     	;# 
  4696  0E29                     	;# 
  4697  0E2A                     	;# 
  4698  0E2B                     	;# 
  4699  0E2C                     	;# 
  4700  0E2D                     	;# 
  4701  0E2E                     	;# 
  4702  0E2F                     	;# 
  4703  0E90                     	;# 
  4704  0E91                     	;# 
  4705  0E92                     	;# 
  4706  0E94                     	;# 
  4707  0E95                     	;# 
  4708  0E9C                     	;# 
  4709  0E9D                     	;# 
  4710  0E9E                     	;# 
  4711  0E9F                     	;# 
  4712  0EA0                     	;# 
  4713  0EA1                     	;# 
  4714  0EA2                     	;# 
  4715  0EA3                     	;# 
  4716  0EA4                     	;# 
  4717  0EA5                     	;# 
  4718  0EA6                     	;# 
  4719  0EA7                     	;# 
  4720  0F0F                     	;# 
  4721  0F10                     	;# 
  4722  0F11                     	;# 
  4723  0F12                     	;# 
  4724  0F13                     	;# 
  4725  0F14                     	;# 
  4726  0F15                     	;# 
  4727  0F16                     	;# 
  4728  0F17                     	;# 
  4729  0F18                     	;# 
  4730  0F19                     	;# 
  4731  0F1A                     	;# 
  4732  0F1B                     	;# 
  4733  0F1C                     	;# 
  4734  0F1D                     	;# 
  4735  0F1E                     	;# 
  4736  0F1F                     	;# 
  4737  0F20                     	;# 
  4738  0F21                     	;# 
  4739  0F22                     	;# 
  4740  0F23                     	;# 
  4741  0F24                     	;# 
  4742  0F25                     	;# 
  4743  0F26                     	;# 
  4744  0F27                     	;# 
  4745  0F28                     	;# 
  4746  0F29                     	;# 
  4747  0F2A                     	;# 
  4748  0F2B                     	;# 
  4749  0F2C                     	;# 
  4750  0F2D                     	;# 
  4751  0F2E                     	;# 
  4752  0F2F                     	;# 
  4753  0F30                     	;# 
  4754  0F31                     	;# 
  4755  0F32                     	;# 
  4756  0F33                     	;# 
  4757  0F34                     	;# 
  4758  0F35                     	;# 
  4759  0F36                     	;# 
  4760  0F37                     	;# 
  4761  0FE4                     	;# 
  4762  0FE5                     	;# 
  4763  0FE6                     	;# 
  4764  0FE7                     	;# 
  4765  0FE8                     	;# 
  4766  0FE9                     	;# 
  4767  0FEA                     	;# 
  4768  0FEB                     	;# 
  4769  0FED                     	;# 
  4770  0FEE                     	;# 
  4771  0FEF                     	;# 
  4772  0000                     	;# 
  4773  0001                     	;# 
  4774  0002                     	;# 
  4775  0003                     	;# 
  4776  0004                     	;# 
  4777  0005                     	;# 
  4778  0006                     	;# 
  4779  0007                     	;# 
  4780  0008                     	;# 
  4781  0009                     	;# 
  4782  000A                     	;# 
  4783  000B                     	;# 
  4784  000C                     	;# 
  4785  000D                     	;# 
  4786  000E                     	;# 
  4787  0010                     	;# 
  4788  0011                     	;# 
  4789  0012                     	;# 
  4790  0013                     	;# 
  4791  0014                     	;# 
  4792  0015                     	;# 
  4793  0015                     	;# 
  4794  0016                     	;# 
  4795  0016                     	;# 
  4796  0017                     	;# 
  4797  0018                     	;# 
  4798  0019                     	;# 
  4799  0019                     	;# 
  4800  001A                     	;# 
  4801  001B                     	;# 
  4802  001C                     	;# 
  4803  001D                     	;# 
  4804  001E                     	;# 
  4805  001F                     	;# 
  4806  008C                     	;# 
  4807  008D                     	;# 
  4808  008E                     	;# 
  4809  0090                     	;# 
  4810  0091                     	;# 
  4811  0092                     	;# 
  4812  0093                     	;# 
  4813  0094                     	;# 
  4814  0097                     	;# 
  4815  009B                     	;# 
  4816  009B                     	;# 
  4817  009C                     	;# 
  4818  009D                     	;# 
  4819  009E                     	;# 
  4820  009F                     	;# 
  4821  010C                     	;# 
  4822  010D                     	;# 
  4823  010E                     	;# 
  4824  0111                     	;# 
  4825  0112                     	;# 
  4826  0113                     	;# 
  4827  0114                     	;# 
  4828  0115                     	;# 
  4829  0116                     	;# 
  4830  0117                     	;# 
  4831  0118                     	;# 
  4832  0119                     	;# 
  4833  018C                     	;# 
  4834  018D                     	;# 
  4835  018E                     	;# 
  4836  0197                     	;# 
  4837  0199                     	;# 
  4838  0199                     	;# 
  4839  0199                     	;# 
  4840  019A                     	;# 
  4841  019A                     	;# 
  4842  019A                     	;# 
  4843  019B                     	;# 
  4844  019B                     	;# 
  4845  019B                     	;# 
  4846  019B                     	;# 
  4847  019B                     	;# 
  4848  019C                     	;# 
  4849  019C                     	;# 
  4850  019C                     	;# 
  4851  019D                     	;# 
  4852  019D                     	;# 
  4853  019D                     	;# 
  4854  019E                     	;# 
  4855  019E                     	;# 
  4856  019E                     	;# 
  4857  019F                     	;# 
  4858  019F                     	;# 
  4859  019F                     	;# 
  4860  019F                     	;# 
  4861  019F                     	;# 
  4862  020C                     	;# 
  4863  020D                     	;# 
  4864  020E                     	;# 
  4865  0211                     	;# 
  4866  0211                     	;# 
  4867  0212                     	;# 
  4868  0212                     	;# 
  4869  0213                     	;# 
  4870  0213                     	;# 
  4871  0214                     	;# 
  4872  0214                     	;# 
  4873  0215                     	;# 
  4874  0215                     	;# 
  4875  0215                     	;# 
  4876  0215                     	;# 
  4877  0216                     	;# 
  4878  0216                     	;# 
  4879  0217                     	;# 
  4880  0217                     	;# 
  4881  0219                     	;# 
  4882  021A                     	;# 
  4883  021B                     	;# 
  4884  021C                     	;# 
  4885  021D                     	;# 
  4886  021D                     	;# 
  4887  021E                     	;# 
  4888  021F                     	;# 
  4889  028C                     	;# 
  4890  028D                     	;# 
  4891  028E                     	;# 
  4892  0291                     	;# 
  4893  0291                     	;# 
  4894  0292                     	;# 
  4895  0293                     	;# 
  4896  0294                     	;# 
  4897  0295                     	;# 
  4898  0295                     	;# 
  4899  0296                     	;# 
  4900  0297                     	;# 
  4901  0298                     	;# 
  4902  029F                     	;# 
  4903  030C                     	;# 
  4904  030D                     	;# 
  4905  030E                     	;# 
  4906  0311                     	;# 
  4907  0311                     	;# 
  4908  0312                     	;# 
  4909  0313                     	;# 
  4910  0314                     	;# 
  4911  0315                     	;# 
  4912  0315                     	;# 
  4913  0316                     	;# 
  4914  0317                     	;# 
  4915  0318                     	;# 
  4916  038C                     	;# 
  4917  038D                     	;# 
  4918  038E                     	;# 
  4919  0391                     	;# 
  4920  0392                     	;# 
  4921  0393                     	;# 
  4922  0394                     	;# 
  4923  0395                     	;# 
  4924  0396                     	;# 
  4925  0397                     	;# 
  4926  0398                     	;# 
  4927  0399                     	;# 
  4928  039A                     	;# 
  4929  039C                     	;# 
  4930  039D                     	;# 
  4931  039E                     	;# 
  4932  039F                     	;# 
  4933  0411                     	;# 
  4934  0411                     	;# 
  4935  0412                     	;# 
  4936  0413                     	;# 
  4937  0414                     	;# 
  4938  0415                     	;# 
  4939  0416                     	;# 
  4940  0417                     	;# 
  4941  0418                     	;# 
  4942  0418                     	;# 
  4943  0419                     	;# 
  4944  041A                     	;# 
  4945  041B                     	;# 
  4946  041C                     	;# 
  4947  041D                     	;# 
  4948  041E                     	;# 
  4949  041F                     	;# 
  4950  0498                     	;# 
  4951  0498                     	;# 
  4952  0499                     	;# 
  4953  049A                     	;# 
  4954  049B                     	;# 
  4955  049B                     	;# 
  4956  049C                     	;# 
  4957  049D                     	;# 
  4958  049E                     	;# 
  4959  049F                     	;# 
  4960  0617                     	;# 
  4961  0618                     	;# 
  4962  0619                     	;# 
  4963  0619                     	;# 
  4964  061A                     	;# 
  4965  061B                     	;# 
  4966  061C                     	;# 
  4967  061C                     	;# 
  4968  061F                     	;# 
  4969  0691                     	;# 
  4970  0692                     	;# 
  4971  0693                     	;# 
  4972  0694                     	;# 
  4973  0695                     	;# 
  4974  0696                     	;# 
  4975  0697                     	;# 
  4976  0698                     	;# 
  4977  0699                     	;# 
  4978  0711                     	;# 
  4979  0712                     	;# 
  4980  0713                     	;# 
  4981  0714                     	;# 
  4982  0715                     	;# 
  4983  0716                     	;# 
  4984  0717                     	;# 
  4985  0718                     	;# 
  4986  0719                     	;# 
  4987  0891                     	;# 
  4988  0891                     	;# 
  4989  0891                     	;# 
  4990  0891                     	;# 
  4991  0891                     	;# 
  4992  0891                     	;# 
  4993  0892                     	;# 
  4994  0892                     	;# 
  4995  0892                     	;# 
  4996  0893                     	;# 
  4997  0893                     	;# 
  4998  0893                     	;# 
  4999  0893                     	;# 
  5000  0893                     	;# 
  5001  0893                     	;# 
  5002  0894                     	;# 
  5003  0894                     	;# 
  5004  0894                     	;# 
  5005  0895                     	;# 
  5006  0895                     	;# 
  5007  0895                     	;# 
  5008  0896                     	;# 
  5009  0896                     	;# 
  5010  0896                     	;# 
  5011  089B                     	;# 
  5012  0911                     	;# 
  5013  0912                     	;# 
  5014  0913                     	;# 
  5015  0914                     	;# 
  5016  0915                     	;# 
  5017  0916                     	;# 
  5018  0918                     	;# 
  5019  0919                     	;# 
  5020  091A                     	;# 
  5021  091B                     	;# 
  5022  091C                     	;# 
  5023  091D                     	;# 
  5024  091E                     	;# 
  5025  091F                     	;# 
  5026  0E0F                     	;# 
  5027  0E10                     	;# 
  5028  0E11                     	;# 
  5029  0E12                     	;# 
  5030  0E13                     	;# 
  5031  0E14                     	;# 
  5032  0E15                     	;# 
  5033  0E16                     	;# 
  5034  0E17                     	;# 
  5035  0E18                     	;# 
  5036  0E19                     	;# 
  5037  0E1A                     	;# 
  5038  0E1B                     	;# 
  5039  0E1C                     	;# 
  5040  0E1D                     	;# 
  5041  0E1E                     	;# 
  5042  0E1F                     	;# 
  5043  0E20                     	;# 
  5044  0E21                     	;# 
  5045  0E22                     	;# 
  5046  0E24                     	;# 
  5047  0E25                     	;# 
  5048  0E28                     	;# 
  5049  0E29                     	;# 
  5050  0E2A                     	;# 
  5051  0E2B                     	;# 
  5052  0E2C                     	;# 
  5053  0E2D                     	;# 
  5054  0E2E                     	;# 
  5055  0E2F                     	;# 
  5056  0E90                     	;# 
  5057  0E91                     	;# 
  5058  0E92                     	;# 
  5059  0E94                     	;# 
  5060  0E95                     	;# 
  5061  0E9C                     	;# 
  5062  0E9D                     	;# 
  5063  0E9E                     	;# 
  5064  0E9F                     	;# 
  5065  0EA0                     	;# 
  5066  0EA1                     	;# 
  5067  0EA2                     	;# 
  5068  0EA3                     	;# 
  5069  0EA4                     	;# 
  5070  0EA5                     	;# 
  5071  0EA6                     	;# 
  5072  0EA7                     	;# 
  5073  0F0F                     	;# 
  5074  0F10                     	;# 
  5075  0F11                     	;# 
  5076  0F12                     	;# 
  5077  0F13                     	;# 
  5078  0F14                     	;# 
  5079  0F15                     	;# 
  5080  0F16                     	;# 
  5081  0F17                     	;# 
  5082  0F18                     	;# 
  5083  0F19                     	;# 
  5084  0F1A                     	;# 
  5085  0F1B                     	;# 
  5086  0F1C                     	;# 
  5087  0F1D                     	;# 
  5088  0F1E                     	;# 
  5089  0F1F                     	;# 
  5090  0F20                     	;# 
  5091  0F21                     	;# 
  5092  0F22                     	;# 
  5093  0F23                     	;# 
  5094  0F24                     	;# 
  5095  0F25                     	;# 
  5096  0F26                     	;# 
  5097  0F27                     	;# 
  5098  0F28                     	;# 
  5099  0F29                     	;# 
  5100  0F2A                     	;# 
  5101  0F2B                     	;# 
  5102  0F2C                     	;# 
  5103  0F2D                     	;# 
  5104  0F2E                     	;# 
  5105  0F2F                     	;# 
  5106  0F30                     	;# 
  5107  0F31                     	;# 
  5108  0F32                     	;# 
  5109  0F33                     	;# 
  5110  0F34                     	;# 
  5111  0F35                     	;# 
  5112  0F36                     	;# 
  5113  0F37                     	;# 
  5114  0FE4                     	;# 
  5115  0FE5                     	;# 
  5116  0FE6                     	;# 
  5117  0FE7                     	;# 
  5118  0FE8                     	;# 
  5119  0FE9                     	;# 
  5120  0FEA                     	;# 
  5121  0FEB                     	;# 
  5122  0FED                     	;# 
  5123  0FEE                     	;# 
  5124  0FEF                     	;# 
  5125                           
  5126                           	psect	idataBANK0
  5127  1671                     __pidataBANK0:	
  5128                           
  5129                           ;initializer for _start
  5130  1671  3401               	retlw	1
  5131                           
  5132                           	psect	idataBANK2
  5133  174E                     __pidataBANK2:	
  5134                           
  5135                           ;initializer for _names
  5136  174E  341D               	retlw	low (STR_1| (0+32768))
  5137  174F  3498               	retlw	high (STR_1| (0+32768))
  5138  1750  3410               	retlw	low (STR_2| (0+32768))
  5139  1751  3498               	retlw	high (STR_2| (0+32768))
  5140  1752  3400               	retlw	low (STR_3| (0+32768))
  5141  1753  3498               	retlw	high (STR_3| (0+32768))
  5142  1754  3429               	retlw	low (STR_4| (0+32768))
  5143  1755  3498               	retlw	high (STR_4| (0+32768))
  5144                           
  5145                           	psect	stringtext1
  5146  1000                     __pstringtext1:	
  5147  1000                     _fsmStateTable:	
  5148  1000  34DF               	retlw	low _do_I2C_IDLE
  5149  1001  3416               	retlw	high _do_I2C_IDLE
  5150  1002  3426               	retlw	low _do_I2C_SEND_ADR_READ
  5151  1003  3417               	retlw	high _do_I2C_SEND_ADR_READ
  5152  1004  3409               	retlw	low _do_I2C_SEND_ADR_WRITE
  5153  1005  3417               	retlw	high _do_I2C_SEND_ADR_WRITE
  5154  1006  34C7               	retlw	low _do_I2C_TX
  5155  1007  340D               	retlw	high _do_I2C_TX
  5156  1008  34F0               	retlw	low _do_I2C_RX
  5157  1009  340C               	retlw	high _do_I2C_RX
  5158  100A  34EA               	retlw	low _do_I2C_RCEN
  5159  100B  3416               	retlw	high _do_I2C_RCEN
  5160  100C  342B               	retlw	low _do_I2C_TX_EMPTY
  5161  100D  340B               	retlw	high _do_I2C_TX_EMPTY
  5162  100E  34B6               	retlw	low _do_I2C_SEND_RESTART_READ
  5163  100F  3416               	retlw	high _do_I2C_SEND_RESTART_READ
  5164  1010  34BA               	retlw	low _do_I2C_SEND_RESTART_WRITE
  5165  1011  3416               	retlw	high _do_I2C_SEND_RESTART_WRITE
  5166  1012  34BE               	retlw	low _do_I2C_SEND_RESTART
  5167  1013  3416               	retlw	high _do_I2C_SEND_RESTART
  5168  1014  34C2               	retlw	low _do_I2C_SEND_STOP
  5169  1015  3416               	retlw	high _do_I2C_SEND_STOP
  5170  1016  34C6               	retlw	low _do_I2C_DO_ACK
  5171  1017  3416               	retlw	high _do_I2C_DO_ACK
  5172  1018  34CA               	retlw	low _do_I2C_DO_NACK_STOP
  5173  1019  3416               	retlw	high _do_I2C_DO_NACK_STOP
  5174  101A  34CE               	retlw	low _do_I2C_DO_NACK_RESTART
  5175  101B  3416               	retlw	high _do_I2C_DO_NACK_RESTART
  5176  101C  3402               	retlw	low _do_I2C_RESET
  5177  101D  3417               	retlw	high _do_I2C_RESET
  5178  101E  34D5               	retlw	low _do_I2C_DO_ADDRESS_NACK
  5179  101F  340A               	retlw	high _do_I2C_DO_ADDRESS_NACK
  5180  1020                     __end_of_fsmStateTable:	
  5181                           
  5182                           	psect	nvBANK0
  5183  006E                     __pnvBANK0:	
  5184  006E                     _eusartTxBufferRemaining:	
  5185  006E                     	ds	1
  5186                           
  5187                           	psect	nvBANK1
  5188  00EC                     __pnvBANK1:	
  5189  00EC                     _IOCAF4_InterruptHandler:	
  5190  00EC                     	ds	2
  5191  00EE                     _EUSART_TxDefaultInterruptHandler:	
  5192  00EE                     	ds	2
  5193                           
  5194                           	psect	nvBANK2
  5195  0168                     __pnvBANK2:	
  5196  0168                     _EUSART_OverrunErrorHandler:	
  5197  0168                     	ds	2
  5198  016A                     _EUSART_FramingErrorHandler:	
  5199  016A                     	ds	2
  5200  016C                     _EUSART_RxDefaultInterruptHandler:	
  5201  016C                     	ds	2
  5202                           
  5203                           	psect	nvBANK3
  5204  01DA                     __pnvBANK3:	
  5205  01DA                     _EUSART_ErrorHandler:	
  5206  01DA                     	ds	2
  5207  000E                     _PORTCbits	set	14
  5208  001F                     _T2CONbits	set	31
  5209  001F                     _T2CON	set	31
  5210  001D                     _TMR2	set	29
  5211  001E                     _PR2	set	30
  5212  0011                     _PIR1bits	set	17
  5213  000B                     _INTCONbits	set	11
  5214  0010                     _PIR0bits	set	16
  5215  009D                     _ADCON0bits	set	157
  5216  009C                     _ADRESH	set	156
  5217  009B                     _ADRESL	set	155
  5218  009F                     _ADACT	set	159
  5219  009E                     _ADCON1	set	158
  5220  009D                     _ADCON0	set	157
  5221  008E                     _TRISC	set	142
  5222  008D                     _TRISB	set	141
  5223  008C                     _TRISA	set	140
  5224  0097                     _WDTCON	set	151
  5225  0091                     _PIE1bits	set	145
  5226  0090                     _PIE0bits	set	144
  5227  010E                     _LATCbits	set	270
  5228  010E                     _LATC	set	270
  5229  010D                     _LATB	set	269
  5230  010C                     _LATA	set	268
  5231  0199                     _RC1REG	set	409
  5232  019D                     _RC1STAbits	set	413
  5233  019A                     _TX1REG	set	410
  5234  019E                     _TX1STAbits	set	414
  5235  019C                     _SP1BRGH	set	412
  5236  019B                     _SP1BRGL	set	411
  5237  019E                     _TX1STA	set	414
  5238  019D                     _RC1STA	set	413
  5239  019F                     _BAUD1CON	set	415
  5240  019A                     _TXREG1	set	410
  5241  019E                     _TXSTA1bits	set	414
  5242  018C                     _ANSELA	set	396
  5243  018D                     _ANSELB	set	397
  5244  018E                     _ANSELC	set	398
  5245  021C                     _SSP2STATbits	set	540
  5246  0219                     _SSP2BUF	set	537
  5247  021D                     _SSP2CON1bits	set	541
  5248  021A                     _SSP2ADD	set	538
  5249  021D                     _SSP2CON1	set	541
  5250  021C                     _SSP2STAT	set	540
  5251  0214                     _SSP1STATbits	set	532
  5252  0213                     _SSP1MSK	set	531
  5253  0211                     _SSP1BUF	set	529
  5254  0216                     _SSP1CON2bits	set	534
  5255  0212                     _SSP1ADD	set	530
  5256  0216                     _SSP1CON2	set	534
  5257  0215                     _SSP1CON1	set	533
  5258  0214                     _SSP1STAT	set	532
  5259  0215                     _SSP1CON1bits	set	533
  5260  020E                     _WPUC	set	526
  5261  020C                     _WPUA	set	524
  5262  020D                     _WPUB	set	525
  5263  0293                     _CCP1CONbits	set	659
  5264  029F                     _CCPTMRSbits	set	671
  5265  0291                     _CCPR1L	set	657
  5266  0292                     _CCPR1H	set	658
  5267  0293                     _CCP1CON	set	659
  5268  028E                     _ODCONC	set	654
  5269  028D                     _ODCONB	set	653
  5270  028C                     _ODCONA	set	652
  5271  030E                     _SLRCONC	set	782
  5272  030D                     _SLRCONB	set	781
  5273  030C                     _SLRCONA	set	780
  5274  0391                     _IOCAPbits	set	913
  5275  0392                     _IOCANbits	set	914
  5276  0393                     _IOCAFbits	set	915
  5277  0916                     _PMD5	set	2326
  5278  0915                     _PMD4	set	2325
  5279  0914                     _PMD3	set	2324
  5280  0913                     _PMD2	set	2323
  5281  0912                     _PMD1	set	2322
  5282  0911                     _PMD0	set	2321
  5283  091E                     _OSCTUNE	set	2334
  5284  091F                     _OSCFRQ	set	2335
  5285  091D                     _OSCEN	set	2333
  5286  091B                     _OSCCON3	set	2331
  5287  0919                     _OSCCON1	set	2329
  5288  0E1D                     _SSP2CLKPPS	set	3613
  5289  0E21                     _SSP1DATPPS	set	3617
  5290  0E20                     _SSP1CLKPPS	set	3616
  5291  0E1E                     _SSP2DATPPS	set	3614
  5292  0EA6                     _RC6PPS	set	3750
  5293  0EA5                     _RC5PPS	set	3749
  5294  0EA2                     _RC2PPS	set	3746
  5295  0E9F                     _RB7PPS	set	3743
  5296  0E9E                     _RB6PPS	set	3742
  5297  0E94                     _RA4PPS	set	3732
  5298                           
  5299                           	psect	stringtext2
  5300  1800                     __pstringtext2:	
  5301  1800                     STR_3:	
  5302  1800  3441               	retlw	65	;'A'
  5303  1801  346C               	retlw	108	;'l'
  5304  1802  3465               	retlw	101	;'e'
  5305  1803  3478               	retlw	120	;'x'
  5306  1804  3461               	retlw	97	;'a'
  5307  1805  346E               	retlw	110	;'n'
  5308  1806  3464               	retlw	100	;'d'
  5309  1807  3472               	retlw	114	;'r'
  5310  1808  3461               	retlw	97	;'a'
  5311  1809  3420               	retlw	32	;' '
  5312  180A  3446               	retlw	70	;'F'
  5313  180B  3479               	retlw	121	;'y'
  5314  180C  3466               	retlw	102	;'f'
  5315  180D  3466               	retlw	102	;'f'
  5316  180E  3465               	retlw	101	;'e'
  5317  180F  3400               	retlw	0
  5318                           
  5319                           	psect	stringtext3
  5320  1810                     __pstringtext3:	
  5321  1810                     STR_2:	
  5322  1810  344E               	retlw	78	;'N'
  5323  1811  346F               	retlw	111	;'o'
  5324  1812  3465               	retlw	101	;'e'
  5325  1813  346C               	retlw	108	;'l'
  5326  1814  346C               	retlw	108	;'l'
  5327  1815  3465               	retlw	101	;'e'
  5328  1816  3420               	retlw	32	;' '
  5329  1817  3443               	retlw	67	;'C'
  5330  1818  3472               	retlw	114	;'r'
  5331  1819  3461               	retlw	97	;'a'
  5332  181A  346E               	retlw	110	;'n'
  5333  181B  3465               	retlw	101	;'e'
  5334  181C  3400               	retlw	0
  5335                           
  5336                           	psect	stringtext4
  5337  181D                     __pstringtext4:	
  5338  181D                     STR_1:	
  5339  181D  344A               	retlw	74	;'J'
  5340  181E  3475               	retlw	117	;'u'
  5341  181F  3473               	retlw	115	;'s'
  5342  1820  3474               	retlw	116	;'t'
  5343  1821  3469               	retlw	105	;'i'
  5344  1822  346E               	retlw	110	;'n'
  5345  1823  3420               	retlw	32	;' '
  5346  1824  3443               	retlw	67	;'C'
  5347  1825  3468               	retlw	104	;'h'
  5348  1826  3461               	retlw	97	;'a'
  5349  1827  346E               	retlw	110	;'n'
  5350  1828  3400               	retlw	0
  5351                           
  5352                           	psect	stringtext5
  5353  1829                     __pstringtext5:	
  5354  1829                     STR_4:	
  5355  1829  344A               	retlw	74	;'J'
  5356  182A  3465               	retlw	101	;'e'
  5357  182B  3466               	retlw	102	;'f'
  5358  182C  3466               	retlw	102	;'f'
  5359  182D  3420               	retlw	32	;' '
  5360  182E  3447               	retlw	71	;'G'
  5361  182F  3465               	retlw	101	;'e'
  5362  1830  3469               	retlw	105	;'i'
  5363  1831  3473               	retlw	115	;'s'
  5364  1832  3473               	retlw	115	;'s'
  5365  1833  3400               	retlw	0
  5366                           
  5367                           	psect	stringtext6
  5368  0000                     __pstringtext6:	
  5369                           
  5370                           ; #config settings
  5371  0000                     
  5372                           	psect	cinit
  5373  0049                     start_initialization:	
  5374  0049                     __initialization:	
  5375                           
  5376                           ; Initialize objects allocated to BANK0
  5377  0049  3196  2671  3180   	fcall	__pidataBANK0	;fetch initializer
  5378  004C  00EF               	movwf	__pdataBANK0& (0+127)
  5379                           
  5380                           ; Initialize objects allocated to BANK2
  5381  004D  304E               	movlw	low __pidataBANK2
  5382  004E  0084               	movwf	4
  5383  004F  3097               	movlw	(high __pidataBANK2)| (0+128)
  5384  0050  0085               	movwf	5
  5385  0051  3060               	movlw	low __pdataBANK2
  5386  0052  0086               	movwf	6
  5387  0053  3001               	movlw	high __pdataBANK2
  5388  0054  0087               	movwf	7
  5389  0055  3008               	movlw	8
  5390  0056  3196  26FC  3180   	fcall	init_ram
  5391                           
  5392                           ; Clear objects allocated to COMMON
  5393  0059  01F0               	clrf	__pbssCOMMON& (0+127)
  5394  005A  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
  5395  005B  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
  5396  005C  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
  5397  005D  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
  5398  005E  01F5               	clrf	(__pbssCOMMON+5)& (0+127)
  5399                           
  5400                           ; Clear objects allocated to BANK0
  5401  005F  305C               	movlw	low __pbssBANK0
  5402  0060  0084               	movwf	4
  5403  0061  3000               	movlw	high __pbssBANK0
  5404  0062  0085               	movwf	5
  5405  0063  3012               	movlw	18
  5406  0064  3196  26F6  3180   	fcall	clear_ram0
  5407                           
  5408                           ; Clear objects allocated to BANK1
  5409  0067  30E0               	movlw	low __pbssBANK1
  5410  0068  0084               	movwf	4
  5411  0069  3000               	movlw	high __pbssBANK1
  5412  006A  0085               	movwf	5
  5413  006B  300C               	movlw	12
  5414  006C  3196  26F6  3180   	fcall	clear_ram0
  5415                           
  5416                           ; Clear objects allocated to BANK2
  5417  006F  0022               	movlb	2	; select bank2
  5418  0070  01EE               	clrf	__pbssBANK2& (0+127)
  5419  0071  01EF               	clrf	(__pbssBANK2+1)& (0+127)
  5420                           
  5421                           ; Clear objects allocated to BANK3
  5422  0072  30A0               	movlw	low __pbssBANK3
  5423  0073  0084               	movwf	4
  5424  0074  3001               	movlw	high __pbssBANK3
  5425  0075  0085               	movwf	5
  5426  0076  303A               	movlw	58
  5427  0077  3196  26F6  3180   	fcall	clear_ram0
  5428                           
  5429                           ; Clear objects allocated to BANK4
  5430  007A  3020               	movlw	low __pbssBANK4
  5431  007B  0084               	movwf	4
  5432  007C  3002               	movlw	high __pbssBANK4
  5433  007D  0085               	movwf	5
  5434  007E  3044               	movlw	68
  5435  007F  3196  26F6         	fcall	clear_ram0
  5436  0081                     end_of_initialization:	
  5437                           ;End of C runtime variable initialization code
  5438                           
  5439  0081                     __end_of__initialization:	
  5440  0081  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  5441  0082  0020               	movlb	0
  5442  0083  318D  2D36         	ljmp	_main	;jump to C main() function
  5443                           
  5444                           	psect	bssCOMMON
  5445  0070                     __pbssCOMMON:	
  5446  0070                     _eusartRxCount:	
  5447  0070                     	ds	1
  5448  0071                     _eusartRxTail:	
  5449  0071                     	ds	1
  5450  0072                     _eusartRxHead:	
  5451  0072                     	ds	1
  5452  0073                     _eusartTxTail:	
  5453  0073                     	ds	1
  5454  0074                     _eusartTxHead:	
  5455  0074                     	ds	1
  5456  0075                     _handleGestureFlag:	
  5457  0075                     	ds	1
  5458                           
  5459                           	psect	bssBANK0
  5460  005C                     __pbssBANK0:	
  5461  005C                     _on:	
  5462  005C                     	ds	2
  5463  005E                     _brightness:	
  5464  005E                     	ds	2
  5465  0060                     _name:	
  5466  0060                     	ds	2
  5467  0062                     _gesture_lr_count_:	
  5468  0062                     	ds	2
  5469  0064                     _gesture_ud_count_:	
  5470  0064                     	ds	2
  5471  0066                     _gesture_lr_delta_:	
  5472  0066                     	ds	2
  5473  0068                     _gesture_ud_delta_:	
  5474  0068                     	ds	2
  5475  006A                     _eusartRxLastError:	
  5476  006A                     	ds	1
  5477  006B                     _b_i2c_error_flag:	
  5478  006B                     	ds	1
  5479  006C                     _adcResult:	
  5480  006C                     	ds	1
  5481  006D                     _printed:	
  5482  006D                     	ds	1
  5483                           
  5484                           	psect	dataBANK0
  5485  006F                     __pdataBANK0:	
  5486  006F                     _start:	
  5487  006F                     	ds	1
  5488                           
  5489                           	psect	bssBANK1
  5490  00E0                     __pbssBANK1:	
  5491  00E0                     _prox:	
  5492  00E0                     	ds	2
  5493  00E2                     _gesture_state_:	
  5494  00E2                     	ds	2
  5495  00E4                     _gesture_far_count_:	
  5496  00E4                     	ds	2
  5497  00E6                     _gesture_near_count_:	
  5498  00E6                     	ds	2
  5499  00E8                     _i2c1_driver_i2cISR:	
  5500  00E8                     	ds	2
  5501  00EA                     _i2c1_driver_busCollisionISR:	
  5502  00EA                     	ds	2
  5503                           
  5504                           	psect	bssBANK2
  5505  016E                     __pbssBANK2:	
  5506  016E                     _gesture_motion_:	
  5507  016E                     	ds	2
  5508                           
  5509                           	psect	dataBANK2
  5510  0160                     __pdataBANK2:	
  5511  0160                     _names:	
  5512  0160                     	ds	8
  5513                           
  5514                           	psect	bssBANK3
  5515  01A0                     __pbssBANK3:	
  5516  01A0                     _i2c_status:	
  5517  01A0                     	ds	29
  5518  01BD                     _eusartRxStatusBuffer:	
  5519  01BD                     	ds	8
  5520  01C5                     _eusartRxBuffer:	
  5521  01C5                     	ds	8
  5522  01CD                     _eusartTxBuffer:	
  5523  01CD                     	ds	8
  5524  01D5                     UART_Byte@F7545:	
  5525  01D5                     	ds	5
  5526                           
  5527                           	psect	bssBANK4
  5528  0220                     __pbssBANK4:	
  5529  0220                     _gesture_data_:	
  5530  0220                     	ds	68
  5531                           
  5532                           	psect	inittext
  5533  16FC                     init_ram:	
  5534  16FC  00FE               	movwf	126
  5535  16FD                     initloop:	
  5536  16FD  0012               	moviw fsr0++
  5537  16FE  001E               	movwi fsr1++
  5538  16FF  0BFE               	decfsz	126,f
  5539  1700  2EFD               	goto	initloop
  5540  1701  3400               	retlw	0
  5541                           
  5542                           	psect	clrtext
  5543  16F6                     clear_ram0:	
  5544                           ;	Called with FSR0 containing the base address, and
  5545                           ;	WREG with the size to clear
  5546                           
  5547  16F6  0064               	clrwdt	;clear the watchdog before getting into this loop
  5548  16F7                     clrloop0:	
  5549  16F7  0180               	clrf	0	;clear RAM location pointed to by FSR
  5550  16F8  3101               	addfsr 0,1
  5551  16F9  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  5552  16FA  2EF7               	goto	clrloop0	;have we reached the end yet?
  5553  16FB  3400               	retlw	0	;all done for this memory range, return
  5554                           
  5555                           	psect	cstackBANK2
  5556  0120                     __pcstackBANK2:	
  5557  0120                     readGesture@fifo_data:	
  5558                           
  5559                           ; 64 bytes @ 0x0
  5560  0120                     	ds	64
  5561                           
  5562                           	psect	cstackBANK1
  5563  00A0                     __pcstackBANK1:	
  5564  00A0                     readGesture@fifo_data2:	
  5565                           
  5566                           ; 64 bytes @ 0x0
  5567  00A0                     	ds	64
  5568                           
  5569                           	psect	cstackCOMMON
  5570  0076                     __pcstackCOMMON:	
  5571  0076                     ?_i2c1_driver_open:	
  5572  0076                     ?_i2c1_driver_isNACK:	
  5573                           ; 1 bit 
  5574                           
  5575  0076                     ?_i2c1_driver_isBufferFull:	
  5576                           ; 1 bit 
  5577                           
  5578  0076                     ?_returnStop:	
  5579                           ; 1 bit 
  5580                           
  5581  0076                     ?_returnReset:	
  5582                           ; 1 bytes @ 0x0
  5583                           
  5584  0076                     ?_mssp1_clearIRQ:	
  5585                           ; 1 bytes @ 0x0
  5586                           
  5587  0076                     ??_mssp1_clearIRQ:	
  5588                           ; 1 bytes @ 0x0
  5589                           
  5590  0076                     ?_i2c_busCollisionISR:	
  5591                           ; 1 bytes @ 0x0
  5592                           
  5593  0076                     ??_i2c_busCollisionISR:	
  5594                           ; 1 bytes @ 0x0
  5595                           
  5596  0076                     ?_i2c_ISR:	
  5597                           ; 1 bytes @ 0x0
  5598                           
  5599  0076                     ?_i2c1_driver_start:	
  5600                           ; 1 bytes @ 0x0
  5601                           
  5602  0076                     ?_i2c1_driver_resetBus:	
  5603                           ; 1 bytes @ 0x0
  5604                           
  5605  0076                     ??_i2c1_driver_resetBus:	
  5606                           ; 1 bytes @ 0x0
  5607                           
  5608  0076                     ?_i2c1_driver_restart:	
  5609                           ; 1 bytes @ 0x0
  5610                           
  5611  0076                     ?_i2c1_driver_stop:	
  5612                           ; 1 bytes @ 0x0
  5613                           
  5614  0076                     ?_i2c1_driver_TXData:	
  5615                           ; 1 bytes @ 0x0
  5616                           
  5617  0076                     ?_i2c1_driver_startRX:	
  5618                           ; 1 bytes @ 0x0
  5619                           
  5620  0076                     ?_i2c1_driver_sendACK:	
  5621                           ; 1 bytes @ 0x0
  5622                           
  5623  0076                     ??_i2c1_driver_sendACK:	
  5624                           ; 1 bytes @ 0x0
  5625                           
  5626  0076                     ?_i2c1_driver_sendNACK:	
  5627                           ; 1 bytes @ 0x0
  5628                           
  5629  0076                     ??_i2c1_driver_isNACK:	
  5630                           ; 1 bytes @ 0x0
  5631                           
  5632  0076                     ?_i2c1_driver_getRXData:	
  5633                           ; 1 bytes @ 0x0
  5634                           
  5635  0076                     ?_mssp1_setIRQ:	
  5636                           ; 1 bytes @ 0x0
  5637                           
  5638  0076                     ??_mssp1_setIRQ:	
  5639                           ; 1 bytes @ 0x0
  5640                           
  5641  0076                     ?_i2c1_driver_clearBusCollision:	
  5642                           ; 1 bytes @ 0x0
  5643                           
  5644  0076                     ??_i2c1_driver_clearBusCollision:	
  5645                           ; 1 bytes @ 0x0
  5646                           
  5647  0076                     ?_PIN_MANAGER_IOC:	
  5648                           ; 1 bytes @ 0x0
  5649                           
  5650  0076                     ??_PIN_MANAGER_IOC:	
  5651                           ; 1 bytes @ 0x0
  5652                           
  5653  0076                     ?_PMD_Initialize:	
  5654                           ; 1 bytes @ 0x0
  5655                           
  5656  0076                     ?_PIN_MANAGER_Initialize:	
  5657                           ; 1 bytes @ 0x0
  5658                           
  5659  0076                     ?_OSCILLATOR_Initialize:	
  5660                           ; 1 bytes @ 0x0
  5661                           
  5662  0076                     ?_WDT_Initialize:	
  5663                           ; 1 bytes @ 0x0
  5664                           
  5665  0076                     ?_SPI2_Initialize:	
  5666                           ; 1 bytes @ 0x0
  5667                           
  5668  0076                     ?_PWM1_Initialize:	
  5669                           ; 1 bytes @ 0x0
  5670                           
  5671  0076                     ?_ADC_Initialize:	
  5672                           ; 1 bytes @ 0x0
  5673                           
  5674  0076                     ?_TMR2_Initialize:	
  5675                           ; 1 bytes @ 0x0
  5676                           
  5677  0076                     ?_EUSART_Initialize:	
  5678                           ; 1 bytes @ 0x0
  5679                           
  5680  0076                     ?_IOCAF4_DefaultInterruptHandler:	
  5681                           ; 1 bytes @ 0x0
  5682                           
  5683  0076                     ??_IOCAF4_DefaultInterruptHandler:	
  5684                           ; 1 bytes @ 0x0
  5685                           
  5686  0076                     ?_IOCAF4_ISR:	
  5687                           ; 1 bytes @ 0x0
  5688                           
  5689  0076                     ??_IOCAF4_ISR:	
  5690                           ; 1 bytes @ 0x0
  5691                           
  5692  0076                     ?_Display_Clear:	
  5693                           ; 1 bytes @ 0x0
  5694                           
  5695  0076                     ?_PIR_Sensor:	
  5696                           ; 1 bytes @ 0x0
  5697                           
  5698  0076                     ?_initialize:	
  5699                           ; 1 bytes @ 0x0
  5700                           
  5701  0076                     ?_enableGestureSensor:	
  5702                           ; 1 bytes @ 0x0
  5703                           
  5704  0076                     ?_UART_Byte:	
  5705                           ; 1 bytes @ 0x0
  5706                           
  5707  0076                     ?_Get_ADC:	
  5708                           ; 1 bytes @ 0x0
  5709                           
  5710  0076                     ?_isGestureAvailable:	
  5711                           ; 1 bytes @ 0x0
  5712                           
  5713  0076                     ?_handleGesture:	
  5714                           ; 1 bytes @ 0x0
  5715                           
  5716  0076                     ?_Noise:	
  5717                           ; 1 bytes @ 0x0
  5718                           
  5719  0076                     ?_wireReadDataByte:	
  5720                           ; 1 bytes @ 0x0
  5721                           
  5722  0076                     ?_setLEDDrive:	
  5723                           ; 1 bytes @ 0x0
  5724                           
  5725  0076                     ?_setProximityGain:	
  5726                           ; 1 bytes @ 0x0
  5727                           
  5728  0076                     ?_setAmbientLightGain:	
  5729                           ; 1 bytes @ 0x0
  5730                           
  5731  0076                     ?_setProxIntLowThresh:	
  5732                           ; 1 bytes @ 0x0
  5733                           
  5734  0076                     ?_setProxIntHighThresh:	
  5735                           ; 1 bytes @ 0x0
  5736                           
  5737  0076                     ?_setGestureEnterThresh:	
  5738                           ; 1 bytes @ 0x0
  5739                           
  5740  0076                     ?_setGestureExitThresh:	
  5741                           ; 1 bytes @ 0x0
  5742                           
  5743  0076                     ?_setGestureGain:	
  5744                           ; 1 bytes @ 0x0
  5745                           
  5746  0076                     ?_setGestureLEDDrive:	
  5747                           ; 1 bytes @ 0x0
  5748                           
  5749  0076                     ?_setGestureWaitTime:	
  5750                           ; 1 bytes @ 0x0
  5751                           
  5752  0076                     ?_setGestureIntEnable:	
  5753                           ; 1 bytes @ 0x0
  5754                           
  5755  0076                     ?_getMode:	
  5756                           ; 1 bytes @ 0x0
  5757                           
  5758  0076                     ?_resetGestureParameters:	
  5759                           ; 1 bytes @ 0x0
  5760                           
  5761  0076                     ?_setLEDBoost:	
  5762                           ; 1 bytes @ 0x0
  5763                           
  5764  0076                     ?_setGestureMode:	
  5765                           ; 1 bytes @ 0x0
  5766                           
  5767  0076                     ?_enablePower:	
  5768                           ; 1 bytes @ 0x0
  5769                           
  5770  0076                     ?_processGestureData:	
  5771                           ; 1 bytes @ 0x0
  5772                           
  5773  0076                     ?_decodeGesture:	
  5774                           ; 1 bytes @ 0x0
  5775                           
  5776  0076                     ?_I2C_Start:	
  5777                           ; 1 bytes @ 0x0
  5778                           
  5779  0076                     ?_I2C_Write_Byte:	
  5780                           ; 1 bytes @ 0x0
  5781                           
  5782  0076                     ?_I2C_ReStart:	
  5783                           ; 1 bytes @ 0x0
  5784                           
  5785  0076                     ?_I2C_Read_Byte:	
  5786                           ; 1 bytes @ 0x0
  5787                           
  5788  0076                     ?_I2C_Send_NACK:	
  5789                           ; 1 bytes @ 0x0
  5790                           
  5791  0076                     ?_I2C_Stop:	
  5792                           ; 1 bytes @ 0x0
  5793                           
  5794  0076                     ?_EUSART_Receive_ISR:	
  5795                           ; 1 bytes @ 0x0
  5796                           
  5797  0076                     ?_EUSART_Transmit_ISR:	
  5798                           ; 1 bytes @ 0x0
  5799                           
  5800  0076                     ??_EUSART_Transmit_ISR:	
  5801                           ; 1 bytes @ 0x0
  5802                           
  5803  0076                     ?_EUSART_DefaultFramingErrorHandler:	
  5804                           ; 1 bytes @ 0x0
  5805                           
  5806  0076                     ??_EUSART_DefaultFramingErrorHandler:	
  5807                           ; 1 bytes @ 0x0
  5808                           
  5809  0076                     ?_EUSART_DefaultOverrunErrorHandler:	
  5810                           ; 1 bytes @ 0x0
  5811                           
  5812  0076                     ??_EUSART_DefaultOverrunErrorHandler:	
  5813                           ; 1 bytes @ 0x0
  5814                           
  5815  0076                     ?_EUSART_DefaultErrorHandler:	
  5816                           ; 1 bytes @ 0x0
  5817                           
  5818  0076                     ?_EUSART_RxDataHandler:	
  5819                           ; 1 bytes @ 0x0
  5820                           
  5821  0076                     ??_EUSART_RxDataHandler:	
  5822                           ; 1 bytes @ 0x0
  5823                           
  5824  0076                     ?_do_I2C_RESET:	
  5825                           ; 1 bytes @ 0x0
  5826                           
  5827  0076                     ??_do_I2C_RESET:	
  5828                           ; 1 bytes @ 0x0
  5829                           
  5830  0076                     ?_do_I2C_IDLE:	
  5831                           ; 1 bytes @ 0x0
  5832                           
  5833  0076                     ??_do_I2C_IDLE:	
  5834                           ; 1 bytes @ 0x0
  5835                           
  5836  0076                     ?_do_I2C_SEND_RESTART_READ:	
  5837                           ; 1 bytes @ 0x0
  5838                           
  5839  0076                     ??_do_I2C_SEND_RESTART_READ:	
  5840                           ; 1 bytes @ 0x0
  5841                           
  5842  0076                     ?_do_I2C_SEND_RESTART_WRITE:	
  5843                           ; 1 bytes @ 0x0
  5844                           
  5845  0076                     ??_do_I2C_SEND_RESTART_WRITE:	
  5846                           ; 1 bytes @ 0x0
  5847                           
  5848  0076                     ?_do_I2C_SEND_RESTART:	
  5849                           ; 1 bytes @ 0x0
  5850                           
  5851  0076                     ??_do_I2C_SEND_RESTART:	
  5852                           ; 1 bytes @ 0x0
  5853                           
  5854  0076                     ?_do_I2C_SEND_STOP:	
  5855                           ; 1 bytes @ 0x0
  5856                           
  5857  0076                     ??_do_I2C_SEND_STOP:	
  5858                           ; 1 bytes @ 0x0
  5859                           
  5860  0076                     ?_do_I2C_SEND_ADR_READ:	
  5861                           ; 1 bytes @ 0x0
  5862                           
  5863  0076                     ??_do_I2C_SEND_ADR_READ:	
  5864                           ; 1 bytes @ 0x0
  5865                           
  5866  0076                     ?_do_I2C_SEND_ADR_WRITE:	
  5867                           ; 1 bytes @ 0x0
  5868                           
  5869  0076                     ??_do_I2C_SEND_ADR_WRITE:	
  5870                           ; 1 bytes @ 0x0
  5871                           
  5872  0076                     ?_do_I2C_RCEN:	
  5873                           ; 1 bytes @ 0x0
  5874                           
  5875  0076                     ??_do_I2C_RCEN:	
  5876                           ; 1 bytes @ 0x0
  5877                           
  5878  0076                     ?_do_I2C_DO_ACK:	
  5879                           ; 1 bytes @ 0x0
  5880                           
  5881  0076                     ??_do_I2C_DO_ACK:	
  5882                           ; 1 bytes @ 0x0
  5883                           
  5884  0076                     ?_do_I2C_DO_NACK_STOP:	
  5885                           ; 1 bytes @ 0x0
  5886                           
  5887  0076                     ??_do_I2C_DO_NACK_STOP:	
  5888                           ; 1 bytes @ 0x0
  5889                           
  5890  0076                     ?_do_I2C_DO_NACK_RESTART:	
  5891                           ; 1 bytes @ 0x0
  5892                           
  5893  0076                     ??_do_I2C_DO_NACK_RESTART:	
  5894                           ; 1 bytes @ 0x0
  5895                           
  5896  0076                     ?_do_I2C_DO_ADDRESS_NACK:	
  5897                           ; 1 bytes @ 0x0
  5898                           
  5899  0076                     ??_do_I2C_DO_ADDRESS_NACK:	
  5900                           ; 1 bytes @ 0x0
  5901                           
  5902  0076                     ?_do_I2C_TX:	
  5903                           ; 1 bytes @ 0x0
  5904                           
  5905  0076                     ??_do_I2C_TX:	
  5906                           ; 1 bytes @ 0x0
  5907                           
  5908  0076                     ?_do_I2C_RX:	
  5909                           ; 1 bytes @ 0x0
  5910                           
  5911  0076                     ??_do_I2C_RX:	
  5912                           ; 1 bytes @ 0x0
  5913                           
  5914  0076                     ?_do_I2C_TX_EMPTY:	
  5915                           ; 1 bytes @ 0x0
  5916                           
  5917  0076                     ??_do_I2C_TX_EMPTY:	
  5918                           ; 1 bytes @ 0x0
  5919                           
  5920  0076                     ?_INTERRUPT_InterruptManager:	
  5921                           ; 1 bytes @ 0x0
  5922                           
  5923  0076                     ?_SYSTEM_Initialize:	
  5924                           ; 1 bytes @ 0x0
  5925                           
  5926  0076                     ?_SPI2_Exchange8bit:	
  5927                           ; 1 bytes @ 0x0
  5928                           
  5929  0076                     ?_main:	
  5930                           ; 1 bytes @ 0x0
  5931                           
  5932  0076                     ?_SPI_Write:	
  5933                           ; 1 bytes @ 0x0
  5934                           
  5935  0076                     ?i1_i2c1_driver_restart:	
  5936                           ; 1 bytes @ 0x0
  5937                           
  5938  0076                     ??i1_i2c1_driver_restart:	
  5939                           ; 1 bytes @ 0x0
  5940                           
  5941  0076                     ?i1_i2c1_driver_stop:	
  5942                           ; 1 bytes @ 0x0
  5943                           
  5944  0076                     ??i1_i2c1_driver_stop:	
  5945                           ; 1 bytes @ 0x0
  5946                           
  5947  0076                     ?i1_i2c1_driver_startRX:	
  5948                           ; 1 bytes @ 0x0
  5949                           
  5950  0076                     ??i1_i2c1_driver_startRX:	
  5951                           ; 1 bytes @ 0x0
  5952                           
  5953  0076                     ?i1_i2c1_driver_getRXData:	
  5954                           ; 1 bytes @ 0x0
  5955                           
  5956  0076                     ??i1_i2c1_driver_getRXData:	
  5957                           ; 1 bytes @ 0x0
  5958                           
  5959  0076                     ?i1_i2c1_driver_TXData:	
  5960                           ; 1 bytes @ 0x0
  5961                           
  5962  0076                     ??i1_i2c1_driver_TXData:	
  5963                           ; 1 bytes @ 0x0
  5964                           
  5965  0076                     ?i1_i2c1_driver_sendNACK:	
  5966                           ; 1 bytes @ 0x0
  5967                           
  5968  0076                     ??i1_i2c1_driver_sendNACK:	
  5969                           ; 1 bytes @ 0x0
  5970                           
  5971  0076                     returnStop@p:	
  5972                           ; 1 bytes @ 0x0
  5973                           
  5974  0076                     returnReset@p:	
  5975                           ; 1 bytes @ 0x0
  5976                           
  5977  0076                     i1i2c1_driver_TXData@d:	
  5978                           ; 1 bytes @ 0x0
  5979                           
  5980                           
  5981                           ; 1 bytes @ 0x0
  5982  0076                     	ds	1
  5983  0077                     ??_returnStop:	
  5984  0077                     ??_returnReset:	
  5985                           ; 1 bytes @ 0x1
  5986                           
  5987  0077                     ??_EUSART_Receive_ISR:	
  5988                           ; 1 bytes @ 0x1
  5989                           
  5990  0077                     ??_EUSART_DefaultErrorHandler:	
  5991                           ; 1 bytes @ 0x1
  5992                           
  5993                           
  5994                           ; 1 bytes @ 0x1
  5995  0077                     	ds	2
  5996  0079                     ??_i2c_ISR:	
  5997                           
  5998                           ; 1 bytes @ 0x3
  5999  0079                     	ds	3
  6000  007C                     ??_INTERRUPT_InterruptManager:	
  6001                           
  6002                           	psect	cstackBANK0
  6003  0020                     __pcstackBANK0:	
  6004                           ; 1 bytes @ 0x6
  6005                           
  6006  0020                     ??_i2c1_driver_open:	
  6007  0020                     ??_i2c1_driver_start:	
  6008                           ; 1 bytes @ 0x0
  6009                           
  6010  0020                     ??_i2c1_driver_restart:	
  6011                           ; 1 bytes @ 0x0
  6012                           
  6013  0020                     ??_i2c1_driver_stop:	
  6014                           ; 1 bytes @ 0x0
  6015                           
  6016  0020                     ??_i2c1_driver_TXData:	
  6017                           ; 1 bytes @ 0x0
  6018                           
  6019  0020                     ??_i2c1_driver_startRX:	
  6020                           ; 1 bytes @ 0x0
  6021                           
  6022  0020                     ??_i2c1_driver_sendNACK:	
  6023                           ; 1 bytes @ 0x0
  6024                           
  6025  0020                     ??_i2c1_driver_getRXData:	
  6026                           ; 1 bytes @ 0x0
  6027                           
  6028  0020                     ??_PMD_Initialize:	
  6029                           ; 1 bytes @ 0x0
  6030                           
  6031  0020                     ??_OSCILLATOR_Initialize:	
  6032                           ; 1 bytes @ 0x0
  6033                           
  6034  0020                     ??_WDT_Initialize:	
  6035                           ; 1 bytes @ 0x0
  6036                           
  6037  0020                     ??_SPI2_Initialize:	
  6038                           ; 1 bytes @ 0x0
  6039                           
  6040  0020                     ??_PWM1_Initialize:	
  6041                           ; 1 bytes @ 0x0
  6042                           
  6043  0020                     ??_ADC_Initialize:	
  6044                           ; 1 bytes @ 0x0
  6045                           
  6046  0020                     ??_TMR2_Initialize:	
  6047                           ; 1 bytes @ 0x0
  6048                           
  6049  0020                     ?_IOCAF4_SetInterruptHandler:	
  6050                           ; 1 bytes @ 0x0
  6051                           
  6052  0020                     ??_PIR_Sensor:	
  6053                           ; 1 bytes @ 0x0
  6054                           
  6055  0020                     ??_resetGestureParameters:	
  6056                           ; 1 bytes @ 0x0
  6057                           
  6058  0020                     ??_decodeGesture:	
  6059                           ; 1 bytes @ 0x0
  6060                           
  6061  0020                     ??_I2C_Start:	
  6062                           ; 1 bytes @ 0x0
  6063                           
  6064  0020                     ??_I2C_ReStart:	
  6065                           ; 1 bytes @ 0x0
  6066                           
  6067  0020                     ??_I2C_Send_NACK:	
  6068                           ; 1 bytes @ 0x0
  6069                           
  6070  0020                     ??_I2C_Stop:	
  6071                           ; 1 bytes @ 0x0
  6072                           
  6073  0020                     ?_EUSART_SetRxInterruptHandler:	
  6074                           ; 1 bytes @ 0x0
  6075                           
  6076  0020                     ?_EUSART_SetTxInterruptHandler:	
  6077                           ; 1 bytes @ 0x0
  6078                           
  6079  0020                     ?_EUSART_SetFramingErrorHandler:	
  6080                           ; 1 bytes @ 0x0
  6081                           
  6082  0020                     ?_EUSART_SetOverrunErrorHandler:	
  6083                           ; 1 bytes @ 0x0
  6084                           
  6085  0020                     ?_EUSART_SetErrorHandler:	
  6086                           ; 1 bytes @ 0x0
  6087                           
  6088  0020                     ??_i2c1_driver_isBufferFull:	
  6089                           ; 1 bytes @ 0x0
  6090                           
  6091  0020                     ??_SPI2_Exchange8bit:	
  6092                           ; 1 bytes @ 0x0
  6093                           
  6094  0020                     ?_PWM1_LoadDutyValue:	
  6095                           ; 1 bytes @ 0x0
  6096                           
  6097  0020                     ?_strlen:	
  6098                           ; 1 bytes @ 0x0
  6099                           
  6100  0020                     ?_ADC_GetConversion:	
  6101                           ; 2 bytes @ 0x0
  6102                           
  6103  0020                     ?___wmul:	
  6104                           ; 2 bytes @ 0x0
  6105                           
  6106  0020                     i2c1_driver_TXData@d:	
  6107                           ; 2 bytes @ 0x0
  6108                           
  6109  0020                     SPI2_Exchange8bit@data:	
  6110                           ; 1 bytes @ 0x0
  6111                           
  6112  0020                     IOCAF4_SetInterruptHandler@InterruptHandler:	
  6113                           ; 1 bytes @ 0x0
  6114                           
  6115  0020                     PWM1_LoadDutyValue@dutyValue:	
  6116                           ; 2 bytes @ 0x0
  6117                           
  6118  0020                     EUSART_SetFramingErrorHandler@interruptHandler:	
  6119                           ; 2 bytes @ 0x0
  6120                           
  6121  0020                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  6122                           ; 2 bytes @ 0x0
  6123                           
  6124  0020                     EUSART_SetErrorHandler@interruptHandler:	
  6125                           ; 2 bytes @ 0x0
  6126                           
  6127  0020                     EUSART_SetTxInterruptHandler@interruptHandler:	
  6128                           ; 2 bytes @ 0x0
  6129                           
  6130  0020                     EUSART_SetRxInterruptHandler@interruptHandler:	
  6131                           ; 2 bytes @ 0x0
  6132                           
  6133  0020                     ___wmul@multiplier:	
  6134                           ; 2 bytes @ 0x0
  6135                           
  6136  0020                     strlen@s:	
  6137                           ; 2 bytes @ 0x0
  6138                           
  6139                           
  6140                           ; 2 bytes @ 0x0
  6141  0020                     	ds	1
  6142  0021                     ??_I2C_Write_Byte:	
  6143  0021                     ??_I2C_Read_Byte:	
  6144                           ; 1 bytes @ 0x1
  6145                           
  6146  0021                     ??_SPI_Write:	
  6147                           ; 1 bytes @ 0x1
  6148                           
  6149                           
  6150                           ; 1 bytes @ 0x1
  6151  0021                     	ds	1
  6152  0022                     ??_PIN_MANAGER_Initialize:	
  6153  0022                     ??_EUSART_Initialize:	
  6154                           ; 1 bytes @ 0x2
  6155                           
  6156  0022                     ??_IOCAF4_SetInterruptHandler:	
  6157                           ; 1 bytes @ 0x2
  6158                           
  6159  0022                     ??_Noise:	
  6160                           ; 1 bytes @ 0x2
  6161                           
  6162  0022                     ??_strlen:	
  6163                           ; 1 bytes @ 0x2
  6164                           
  6165  0022                     ??_EUSART_SetRxInterruptHandler:	
  6166                           ; 1 bytes @ 0x2
  6167                           
  6168  0022                     ??_EUSART_SetTxInterruptHandler:	
  6169                           ; 1 bytes @ 0x2
  6170                           
  6171  0022                     ??_EUSART_SetFramingErrorHandler:	
  6172                           ; 1 bytes @ 0x2
  6173                           
  6174  0022                     ??_EUSART_SetOverrunErrorHandler:	
  6175                           ; 1 bytes @ 0x2
  6176                           
  6177  0022                     ??_EUSART_SetErrorHandler:	
  6178                           ; 1 bytes @ 0x2
  6179                           
  6180  0022                     ??_ADC_GetConversion:	
  6181                           ; 1 bytes @ 0x2
  6182                           
  6183  0022                     ??_PWM1_LoadDutyValue:	
  6184                           ; 1 bytes @ 0x2
  6185                           
  6186  0022                     SPI_Write@incoming:	
  6187                           ; 1 bytes @ 0x2
  6188                           
  6189  0022                     _decodeGesture$1692:	
  6190                           ; 1 bytes @ 0x2
  6191                           
  6192  0022                     ___wmul@multiplicand:	
  6193                           ; 2 bytes @ 0x2
  6194                           
  6195                           
  6196                           ; 2 bytes @ 0x2
  6197  0022                     	ds	1
  6198  0023                     ??_Display_Clear:	
  6199  0023                     ??_SYSTEM_Initialize:	
  6200                           ; 1 bytes @ 0x3
  6201                           
  6202  0023                     ADC_GetConversion@channel:	
  6203                           ; 1 bytes @ 0x3
  6204                           
  6205  0023                     I2C_Write_Byte@Byte:	
  6206                           ; 1 bytes @ 0x3
  6207                           
  6208  0023                     strlen@a:	
  6209                           ; 1 bytes @ 0x3
  6210                           
  6211                           
  6212                           ; 2 bytes @ 0x3
  6213  0023                     	ds	1
  6214  0024                     ??___wmul:	
  6215  0024                     _decodeGesture$1693:	
  6216                           ; 1 bytes @ 0x4
  6217                           
  6218  0024                     I2C_Write_Byte@count:	
  6219                           ; 2 bytes @ 0x4
  6220                           
  6221  0024                     ___wmul@product:	
  6222                           ; 2 bytes @ 0x4
  6223                           
  6224                           
  6225                           ; 2 bytes @ 0x4
  6226  0024                     	ds	1
  6227  0025                     ??_UART_Byte:	
  6228  0025                     ?_Display_Name:	
  6229                           ; 1 bytes @ 0x5
  6230                           
  6231  0025                     Display_Name@string1:	
  6232                           ; 1 bytes @ 0x5
  6233                           
  6234                           
  6235                           ; 2 bytes @ 0x5
  6236  0025                     	ds	1
  6237  0026                     ??_wireReadDataByte:	
  6238  0026                     ?_wireWriteDataByte:	
  6239                           ; 1 bytes @ 0x6
  6240                           
  6241  0026                     ?_wireReadDataBlock:	
  6242                           ; 2 bytes @ 0x6
  6243                           
  6244  0026                     ?___awdiv:	
  6245                           ; 2 bytes @ 0x6
  6246                           
  6247  0026                     wireWriteDataByte@val:	
  6248                           ; 2 bytes @ 0x6
  6249                           
  6250  0026                     UART_Byte@tempOn:	
  6251                           ; 1 bytes @ 0x6
  6252                           
  6253  0026                     _decodeGesture$1694:	
  6254                           ; 2 bytes @ 0x6
  6255                           
  6256  0026                     wireReadDataBlock@val:	
  6257                           ; 2 bytes @ 0x6
  6258                           
  6259  0026                     ___awdiv@divisor:	
  6260                           ; 2 bytes @ 0x6
  6261                           
  6262                           
  6263                           ; 2 bytes @ 0x6
  6264  0026                     	ds	1
  6265  0027                     ??_Display_Name:	
  6266  0027                     wireReadDataByte@reg:	
  6267                           ; 1 bytes @ 0x7
  6268                           
  6269                           
  6270                           ; 1 bytes @ 0x7
  6271  0027                     	ds	1
  6272  0028                     wireReadDataByte@val:	
  6273  0028                     Display_Name@length:	
  6274                           ; 1 bytes @ 0x8
  6275                           
  6276  0028                     UART_Byte@tempProx:	
  6277                           ; 2 bytes @ 0x8
  6278                           
  6279  0028                     _decodeGesture$1695:	
  6280                           ; 2 bytes @ 0x8
  6281                           
  6282  0028                     wireReadDataBlock@len:	
  6283                           ; 2 bytes @ 0x8
  6284                           
  6285  0028                     ___awdiv@dividend:	
  6286                           ; 2 bytes @ 0x8
  6287                           
  6288                           
  6289                           ; 2 bytes @ 0x8
  6290  0028                     	ds	1
  6291  0029                     ??_isGestureAvailable:	
  6292  0029                     ??_wireWriteDataByte:	
  6293                           ; 1 bytes @ 0x9
  6294                           
  6295  0029                     ??_getMode:	
  6296                           ; 1 bytes @ 0x9
  6297                           
  6298  0029                     wireWriteDataByte@reg:	
  6299                           ; 1 bytes @ 0x9
  6300                           
  6301                           
  6302                           ; 1 bytes @ 0x9
  6303  0029                     	ds	1
  6304  002A                     ??_setLEDDrive:	
  6305  002A                     ??_setProximityGain:	
  6306                           ; 1 bytes @ 0xA
  6307                           
  6308  002A                     ??_setAmbientLightGain:	
  6309                           ; 1 bytes @ 0xA
  6310                           
  6311  002A                     ??_setProxIntLowThresh:	
  6312                           ; 1 bytes @ 0xA
  6313                           
  6314  002A                     ??_setProxIntHighThresh:	
  6315                           ; 1 bytes @ 0xA
  6316                           
  6317  002A                     ?_setLightIntLowThreshold:	
  6318                           ; 1 bytes @ 0xA
  6319                           
  6320  002A                     ?_setLightIntHighThreshold:	
  6321                           ; 1 bytes @ 0xA
  6322                           
  6323  002A                     ??_setGestureEnterThresh:	
  6324                           ; 1 bytes @ 0xA
  6325                           
  6326  002A                     ??_setGestureExitThresh:	
  6327                           ; 1 bytes @ 0xA
  6328                           
  6329  002A                     ??_setGestureGain:	
  6330                           ; 1 bytes @ 0xA
  6331                           
  6332  002A                     ??_setGestureLEDDrive:	
  6333                           ; 1 bytes @ 0xA
  6334                           
  6335  002A                     ??_setGestureWaitTime:	
  6336                           ; 1 bytes @ 0xA
  6337                           
  6338  002A                     ??_setGestureIntEnable:	
  6339                           ; 1 bytes @ 0xA
  6340                           
  6341  002A                     ??_setLEDBoost:	
  6342                           ; 1 bytes @ 0xA
  6343                           
  6344  002A                     ??_setGestureMode:	
  6345                           ; 1 bytes @ 0xA
  6346                           
  6347  002A                     ??_wireReadDataBlock:	
  6348                           ; 1 bytes @ 0xA
  6349                           
  6350  002A                     ??___awdiv:	
  6351                           ; 1 bytes @ 0xA
  6352                           
  6353  002A                     getMode@enable_value:	
  6354                           ; 1 bytes @ 0xA
  6355                           
  6356  002A                     isGestureAvailable@val:	
  6357                           ; 1 bytes @ 0xA
  6358                           
  6359  002A                     Display_Name@i:	
  6360                           ; 1 bytes @ 0xA
  6361                           
  6362  002A                     UART_Byte@tempName:	
  6363                           ; 2 bytes @ 0xA
  6364                           
  6365  002A                     setLightIntLowThreshold@threshold:	
  6366                           ; 2 bytes @ 0xA
  6367                           
  6368  002A                     setLightIntHighThreshold@threshold:	
  6369                           ; 2 bytes @ 0xA
  6370                           
  6371  002A                     _decodeGesture$1696:	
  6372                           ; 2 bytes @ 0xA
  6373                           
  6374                           
  6375                           ; 2 bytes @ 0xA
  6376  002A                     	ds	1
  6377  002B                     ?_setMode:	
  6378  002B                     setMode@enable:	
  6379                           ; 1 bytes @ 0xB
  6380                           
  6381  002B                     setAmbientLightGain@drive:	
  6382                           ; 1 bytes @ 0xB
  6383                           
  6384  002B                     setProxIntLowThresh@threshold:	
  6385                           ; 1 bytes @ 0xB
  6386                           
  6387  002B                     setProxIntHighThresh@threshold:	
  6388                           ; 1 bytes @ 0xB
  6389                           
  6390  002B                     setGestureEnterThresh@threshold:	
  6391                           ; 1 bytes @ 0xB
  6392                           
  6393  002B                     setGestureExitThresh@threshold:	
  6394                           ; 1 bytes @ 0xB
  6395                           
  6396  002B                     setGestureWaitTime@time:	
  6397                           ; 1 bytes @ 0xB
  6398                           
  6399  002B                     setGestureIntEnable@val:	
  6400                           ; 1 bytes @ 0xB
  6401                           
  6402  002B                     setGestureMode@mode:	
  6403                           ; 1 bytes @ 0xB
  6404                           
  6405  002B                     ___awdiv@counter:	
  6406                           ; 1 bytes @ 0xB
  6407                           
  6408                           
  6409                           ; 1 bytes @ 0xB
  6410  002B                     	ds	1
  6411  002C                     ??_Get_ADC:	
  6412  002C                     ??_setMode:	
  6413                           ; 1 bytes @ 0xC
  6414                           
  6415  002C                     ??_setLightIntLowThreshold:	
  6416                           ; 1 bytes @ 0xC
  6417                           
  6418  002C                     ??_setLightIntHighThreshold:	
  6419                           ; 1 bytes @ 0xC
  6420                           
  6421  002C                     setLEDDrive@val:	
  6422                           ; 1 bytes @ 0xC
  6423                           
  6424  002C                     setProximityGain@val:	
  6425                           ; 1 bytes @ 0xC
  6426                           
  6427  002C                     setAmbientLightGain@val:	
  6428                           ; 1 bytes @ 0xC
  6429                           
  6430  002C                     setGestureGain@val:	
  6431                           ; 1 bytes @ 0xC
  6432                           
  6433  002C                     setGestureLEDDrive@val:	
  6434                           ; 1 bytes @ 0xC
  6435                           
  6436  002C                     setGestureWaitTime@val:	
  6437                           ; 1 bytes @ 0xC
  6438                           
  6439  002C                     setGestureIntEnable@enable:	
  6440                           ; 1 bytes @ 0xC
  6441                           
  6442  002C                     setLEDBoost@val:	
  6443                           ; 1 bytes @ 0xC
  6444                           
  6445  002C                     setGestureMode@val:	
  6446                           ; 1 bytes @ 0xC
  6447                           
  6448  002C                     ___awdiv@sign:	
  6449                           ; 1 bytes @ 0xC
  6450                           
  6451  002C                     UART_Byte@tempBright:	
  6452                           ; 1 bytes @ 0xC
  6453                           
  6454  002C                     _decodeGesture$1697:	
  6455                           ; 2 bytes @ 0xC
  6456                           
  6457                           
  6458                           ; 2 bytes @ 0xC
  6459  002C                     	ds	1
  6460  002D                     setLEDDrive@drive:	
  6461  002D                     setProximityGain@drive:	
  6462                           ; 1 bytes @ 0xD
  6463                           
  6464  002D                     setLightIntLowThreshold@val_low:	
  6465                           ; 1 bytes @ 0xD
  6466                           
  6467  002D                     setLightIntHighThreshold@val_low:	
  6468                           ; 1 bytes @ 0xD
  6469                           
  6470  002D                     setGestureGain@gain:	
  6471                           ; 1 bytes @ 0xD
  6472                           
  6473  002D                     setGestureLEDDrive@drive:	
  6474                           ; 1 bytes @ 0xD
  6475                           
  6476  002D                     setLEDBoost@boost:	
  6477                           ; 1 bytes @ 0xD
  6478                           
  6479  002D                     ___awdiv@quotient:	
  6480                           ; 1 bytes @ 0xD
  6481                           
  6482                           
  6483                           ; 2 bytes @ 0xD
  6484  002D                     	ds	1
  6485  002E                     setMode@reg_val:	
  6486  002E                     setLightIntLowThreshold@val_high:	
  6487                           ; 1 bytes @ 0xE
  6488                           
  6489  002E                     setLightIntHighThreshold@val_high:	
  6490                           ; 1 bytes @ 0xE
  6491                           
  6492  002E                     _decodeGesture$1698:	
  6493                           ; 1 bytes @ 0xE
  6494                           
  6495  002E                     UART_Byte@bits:	
  6496                           ; 2 bytes @ 0xE
  6497                           
  6498                           
  6499                           ; 5 bytes @ 0xE
  6500  002E                     	ds	1
  6501  002F                     ??_processGestureData:	
  6502  002F                     setMode@mode:	
  6503                           ; 1 bytes @ 0xF
  6504                           
  6505  002F                     wireReadDataBlock@reg:	
  6506                           ; 1 bytes @ 0xF
  6507                           
  6508  002F                     Get_ADC@val:	
  6509                           ; 1 bytes @ 0xF
  6510                           
  6511                           
  6512                           ; 2 bytes @ 0xF
  6513  002F                     	ds	1
  6514  0030                     ??_initialize:	
  6515  0030                     ??_enableGestureSensor:	
  6516                           ; 1 bytes @ 0x10
  6517                           
  6518  0030                     ??_enablePower:	
  6519                           ; 1 bytes @ 0x10
  6520                           
  6521  0030                     wireReadDataBlock@j:	
  6522                           ; 1 bytes @ 0x10
  6523                           
  6524  0030                     _decodeGesture$1699:	
  6525                           ; 1 bytes @ 0x10
  6526                           
  6527                           
  6528                           ; 2 bytes @ 0x10
  6529  0030                     	ds	1
  6530  0031                     initialize@id:	
  6531  0031                     enableGestureSensor@interrupts:	
  6532                           ; 1 bytes @ 0x11
  6533                           
  6534  0031                     processGestureData@ud_ratio_first:	
  6535                           ; 1 bytes @ 0x11
  6536                           
  6537                           
  6538                           ; 2 bytes @ 0x11
  6539  0031                     	ds	2
  6540  0033                     UART_Byte@i:	
  6541  0033                     processGestureData@lr_ratio_first:	
  6542                           ; 2 bytes @ 0x13
  6543                           
  6544                           
  6545                           ; 2 bytes @ 0x13
  6546  0033                     	ds	2
  6547  0035                     processGestureData@ud_ratio_last:	
  6548                           
  6549                           ; 2 bytes @ 0x15
  6550  0035                     	ds	2
  6551  0037                     processGestureData@lr_ratio_last:	
  6552                           
  6553                           ; 2 bytes @ 0x17
  6554  0037                     	ds	2
  6555  0039                     _processGestureData$1687:	
  6556                           
  6557                           ; 2 bytes @ 0x19
  6558  0039                     	ds	2
  6559  003B                     _processGestureData$1688:	
  6560                           
  6561                           ; 2 bytes @ 0x1B
  6562  003B                     	ds	2
  6563  003D                     _processGestureData$1689:	
  6564                           
  6565                           ; 2 bytes @ 0x1D
  6566  003D                     	ds	2
  6567  003F                     _processGestureData$1690:	
  6568                           
  6569                           ; 2 bytes @ 0x1F
  6570  003F                     	ds	2
  6571  0041                     processGestureData@u_last:	
  6572                           
  6573                           ; 1 bytes @ 0x21
  6574  0041                     	ds	1
  6575  0042                     processGestureData@d_last:	
  6576                           
  6577                           ; 1 bytes @ 0x22
  6578  0042                     	ds	1
  6579  0043                     processGestureData@l_last:	
  6580                           
  6581                           ; 1 bytes @ 0x23
  6582  0043                     	ds	1
  6583  0044                     processGestureData@r_last:	
  6584                           
  6585                           ; 1 bytes @ 0x24
  6586  0044                     	ds	1
  6587  0045                     processGestureData@u_first:	
  6588                           
  6589                           ; 1 bytes @ 0x25
  6590  0045                     	ds	1
  6591  0046                     processGestureData@d_first:	
  6592                           
  6593                           ; 1 bytes @ 0x26
  6594  0046                     	ds	1
  6595  0047                     processGestureData@l_first:	
  6596                           
  6597                           ; 1 bytes @ 0x27
  6598  0047                     	ds	1
  6599  0048                     processGestureData@r_first:	
  6600                           
  6601                           ; 1 bytes @ 0x28
  6602  0048                     	ds	1
  6603  0049                     processGestureData@ud_delta:	
  6604                           
  6605                           ; 2 bytes @ 0x29
  6606  0049                     	ds	2
  6607  004B                     processGestureData@lr_delta:	
  6608                           
  6609                           ; 2 bytes @ 0x2B
  6610  004B                     	ds	2
  6611  004D                     processGestureData@i:	
  6612                           
  6613                           ; 2 bytes @ 0x2D
  6614  004D                     	ds	2
  6615  004F                     ?_readGesture:	
  6616                           
  6617                           ; 2 bytes @ 0x2F
  6618  004F                     	ds	2
  6619  0051                     ??_readGesture:	
  6620                           
  6621                           ; 1 bytes @ 0x31
  6622  0051                     	ds	2
  6623  0053                     readGesture@motion:	
  6624                           
  6625                           ; 2 bytes @ 0x33
  6626  0053                     	ds	2
  6627  0055                     readGesture@gstatus:	
  6628                           
  6629                           ; 1 bytes @ 0x35
  6630  0055                     	ds	1
  6631  0056                     readGesture@bytes_read:	
  6632                           
  6633                           ; 2 bytes @ 0x36
  6634  0056                     	ds	2
  6635  0058                     readGesture@fifo_level:	
  6636                           
  6637                           ; 1 bytes @ 0x38
  6638  0058                     	ds	1
  6639  0059                     readGesture@i:	
  6640                           
  6641                           ; 2 bytes @ 0x39
  6642  0059                     	ds	2
  6643  005B                     ??_handleGesture:	
  6644                           
  6645                           ; 1 bytes @ 0x3B
  6646  005B                     	ds	1
  6647  005C                     ??_main:	
  6648                           
  6649                           	psect	maintext
  6650  0D36                     __pmaintext:	
  6651                           ; 1 bytes @ 0x3C
  6652 ;;
  6653 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  6654 ;;
  6655 ;; *************** function _main *****************
  6656 ;; Defined at:
  6657 ;;		line 382 in file "main.c"
  6658 ;; Parameters:    Size  Location     Type
  6659 ;;		None
  6660 ;; Auto vars:     Size  Location     Type
  6661 ;;  count           2    0        unsigned int 
  6662 ;;  temp            2    0        int 
  6663 ;;  startSystem     1    0        _Bool 
  6664 ;; Return value:  Size  Location     Type
  6665 ;;                  1    wreg      void 
  6666 ;; Registers used:
  6667 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6668 ;; Tracked objects:
  6669 ;;		On entry : B1F/0
  6670 ;;		On exit  : 0/0
  6671 ;;		Unchanged: 0/0
  6672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6673 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6674 ;;      Locals:         0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0
  6675 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6676 ;;      Totals:         0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0
  6677 ;;Total ram usage:        2 bytes
  6678 ;; Hardware stack levels required when called:   12
  6679 ;; This function calls:
  6680 ;;		_Display_Clear
  6681 ;;		_Display_Name
  6682 ;;		_Get_ADC
  6683 ;;		_PIR_Sensor
  6684 ;;		_SYSTEM_Initialize
  6685 ;;		_UART_Byte
  6686 ;;		_enableGestureSensor
  6687 ;;		_handleGesture
  6688 ;;		_initialize
  6689 ;;		_isGestureAvailable
  6690 ;; This function is called by:
  6691 ;;		Startup code after reset
  6692 ;; This function uses a non-reentrant model
  6693 ;;
  6694                           
  6695                           
  6696                           ;psect for function _main
  6697  0D36                     _main:	
  6698                           
  6699                           ;main.c: 385:     SYSTEM_Initialize();
  6700                           
  6701                           ;incstack = 0
  6702                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6703  0D36  3188  20D5  318D   	fcall	_SYSTEM_Initialize
  6704                           
  6705                           ;main.c: 391:     (INTCONbits.GIE = 1);
  6706  0D39  178B               	bsf	11,7	;volatile
  6707                           
  6708                           ;main.c: 394:     (INTCONbits.PEIE = 1);
  6709  0D3A  170B               	bsf	11,6	;volatile
  6710                           
  6711                           ;main.c: 397:     Display_Clear();
  6712  0D3B  3197  27EF  318D   	fcall	_Display_Clear
  6713                           
  6714                           ;main.c: 399:     if(PIR_Sensor()) {
  6715  0D3E  3197  27E0  318D   	fcall	_PIR_Sensor
  6716  0D41  3A00               	xorlw	0
  6717  0D42  1903               	skipnz
  6718  0D43  2D4B               	goto	l7894
  6719                           
  6720                           ;main.c: 400:         if(initialize()){
  6721  0D44  3184  24ED  318D   	fcall	_initialize
  6722                           
  6723                           ;main.c: 402:         if(enableGestureSensor(0)){
  6724  0D47  3000               	movlw	0
  6725  0D48  318F  2715  318D   	fcall	_enableGestureSensor
  6726  0D4B                     l7894:	
  6727                           
  6728                           ;main.c: 407:     _Bool startSystem;;main.c: 408:     int temp;;main.c: 409:     on = 1;
  6729  0D4B  3001               	movlw	1
  6730  0D4C  0020               	movlb	0	; select bank0
  6731  0D4D  00DC               	movwf	_on
  6732  0D4E  3000               	movlw	0
  6733  0D4F  00DD               	movwf	_on+1
  6734  0D50                     l7896:	
  6735                           
  6736                           ;main.c: 413:         UART_Byte();
  6737  0D50  318E  26B7  318D   	fcall	_UART_Byte
  6738                           
  6739                           ;main.c: 414:         if(on) {
  6740  0D53  0020               	movlb	0	; select bank0
  6741  0D54  085C               	movf	_on,w
  6742  0D55  045D               	iorwf	_on+1,w
  6743  0D56  1903               	btfsc	3,2
  6744  0D57  2D50               	goto	l7896
  6745                           
  6746                           ;main.c: 415:             if(PIR_Sensor()) {
  6747  0D58  3197  27E0  318D   	fcall	_PIR_Sensor
  6748  0D5B  3A00               	xorlw	0
  6749  0D5C  1903               	skipnz
  6750  0D5D  2D50               	goto	l7896
  6751                           
  6752                           ;main.c: 416:                 if(start == 1) {
  6753  0D5E  0020               	movlb	0	; select bank0
  6754  0D5F  036F               	decf	_start,w
  6755  0D60  1D03               	btfss	3,2
  6756  0D61  2D70               	goto	l7908
  6757                           
  6758                           ;main.c: 417:                     Display_Name(names[name]);
  6759  0D62  3560               	lslf	_name,w
  6760  0D63  3E60               	addlw	(low (_names| (0+256)))& (0+255)
  6761  0D64  0086               	movwf	6
  6762  0D65  3001               	movlw	1	; select bank2/3
  6763  0D66  0087               	movwf	7
  6764  0D67  3F40               	moviw [0]fsr1
  6765  0D68  00A5               	movwf	Display_Name@string1
  6766  0D69  3F41               	moviw [1]fsr1
  6767  0D6A  00A6               	movwf	Display_Name@string1+1
  6768  0D6B  318C  2428  318D   	fcall	_Display_Name
  6769                           
  6770                           ;main.c: 418:                     start = 0;
  6771  0D6E  0020               	movlb	0	; select bank0
  6772  0D6F  01EF               	clrf	_start
  6773  0D70                     l7908:	
  6774                           
  6775                           ;main.c: 420:                 Get_ADC();
  6776  0D70  3186  2603  318D   	fcall	_Get_ADC
  6777                           
  6778                           ;main.c: 422:                 if( isGestureAvailable()){
  6779  0D73  3188  2000  318D   	fcall	_isGestureAvailable
  6780  0D76  3A00               	xorlw	0
  6781  0D77  1903               	skipnz
  6782  0D78  2D50               	goto	l7896
  6783                           
  6784                           ;main.c: 423:                     handleGesture();
  6785  0D79  318F  2779  318D   	fcall	_handleGesture
  6786                           
  6787                           ;main.c: 426:         }
  6788  0D7C  2D50               	goto	l7896
  6789  0D7D                     __end_of_main:	
  6790                           
  6791                           	psect	text1
  6792  04ED                     __ptext1:	
  6793 ;; *************** function _initialize *****************
  6794 ;; Defined at:
  6795 ;;		line 20 in file "APDS9960.c"
  6796 ;; Parameters:    Size  Location     Type
  6797 ;;		None
  6798 ;; Auto vars:     Size  Location     Type
  6799 ;;  id              1   17[BANK0 ] unsigned char 
  6800 ;; Return value:  Size  Location     Type
  6801 ;;                  1    wreg      _Bool 
  6802 ;; Registers used:
  6803 ;;		wreg, status,2, status,0, pclath, cstack
  6804 ;; Tracked objects:
  6805 ;;		On entry : 0/0
  6806 ;;		On exit  : 0/0
  6807 ;;		Unchanged: 0/0
  6808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6810 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6811 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6812 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6813 ;;Total ram usage:        2 bytes
  6814 ;; Hardware stack levels used:    1
  6815 ;; Hardware stack levels required when called:   10
  6816 ;; This function calls:
  6817 ;;		_i2c1_driver_open
  6818 ;;		_setAmbientLightGain
  6819 ;;		_setGestureEnterThresh
  6820 ;;		_setGestureExitThresh
  6821 ;;		_setGestureGain
  6822 ;;		_setGestureIntEnable
  6823 ;;		_setGestureLEDDrive
  6824 ;;		_setGestureWaitTime
  6825 ;;		_setLEDDrive
  6826 ;;		_setLightIntHighThreshold
  6827 ;;		_setLightIntLowThreshold
  6828 ;;		_setMode
  6829 ;;		_setProxIntHighThresh
  6830 ;;		_setProxIntLowThresh
  6831 ;;		_setProximityGain
  6832 ;;		_wireReadDataByte
  6833 ;;		_wireWriteDataByte
  6834 ;; This function is called by:
  6835 ;;		_main
  6836 ;; This function uses a non-reentrant model
  6837 ;;
  6838                           
  6839                           
  6840                           ;psect for function _initialize
  6841  04ED                     _initialize:	
  6842                           
  6843                           ;APDS9960.c: 25:     i2c1_driver_open();
  6844                           
  6845                           ;incstack = 0
  6846                           ; Regs used in _initialize: [wreg+status,2+status,0+pclath+cstack]
  6847  04ED  3197  2795  3184   	fcall	_i2c1_driver_open
  6848                           
  6849                           ;APDS9960.c: 31:     id = wireReadDataByte(0x92);
  6850  04F0  3092               	movlw	146
  6851  04F1  3189  219D  3184   	fcall	_wireReadDataByte
  6852  04F4  0020               	movlb	0	; select bank0
  6853  04F5  00B0               	movwf	??_initialize
  6854  04F6  0830               	movf	??_initialize,w
  6855  04F7  00B1               	movwf	initialize@id
  6856                           
  6857                           ;APDS9960.c: 33:     if( !(id == 0xAB ||id == 0x9C ) )
  6858  04F8  30AB               	movlw	171
  6859  04F9  0631               	xorwf	initialize@id,w
  6860  04FA  1903               	btfsc	3,2
  6861  04FB  2D02               	goto	l7474
  6862  04FC  309C               	movlw	156
  6863  04FD  0631               	xorwf	initialize@id,w
  6864  04FE  1903               	btfsc	3,2
  6865  04FF  2D02               	goto	l7474
  6866  0500                     l7470:	
  6867                           
  6868                           ;APDS9960.c: 34:     {;APDS9960.c: 35:      return 0;
  6869  0500  3000               	movlw	0
  6870  0501  0008               	return
  6871  0502                     l7474:	
  6872                           
  6873                           ;APDS9960.c: 39:     setMode(7, 0);
  6874  0502  01AB               	clrf	setMode@enable
  6875  0503  3007               	movlw	7
  6876  0504  318E  2616  3184   	fcall	_setMode
  6877                           
  6878                           ;APDS9960.c: 41:     wireWriteDataByte(0x81, 219);
  6879  0507  30DB               	movlw	219
  6880  0508  0020               	movlb	0	; select bank0
  6881  0509  00B0               	movwf	??_initialize
  6882  050A  0830               	movf	??_initialize,w
  6883  050B  00A6               	movwf	wireWriteDataByte@val
  6884  050C  3081               	movlw	129
  6885  050D  3188  20F0  3184   	fcall	_wireWriteDataByte
  6886                           
  6887                           ;APDS9960.c: 42:     wireWriteDataByte(0x83, 246);
  6888  0510  30F6               	movlw	246
  6889  0511  0020               	movlb	0	; select bank0
  6890  0512  00B0               	movwf	??_initialize
  6891  0513  0830               	movf	??_initialize,w
  6892  0514  00A6               	movwf	wireWriteDataByte@val
  6893  0515  3083               	movlw	131
  6894  0516  3188  20F0  3184   	fcall	_wireWriteDataByte
  6895                           
  6896                           ;APDS9960.c: 43:     wireWriteDataByte(0x8E, 0x87);
  6897  0519  3087               	movlw	135
  6898  051A  0020               	movlb	0	; select bank0
  6899  051B  00B0               	movwf	??_initialize
  6900  051C  0830               	movf	??_initialize,w
  6901  051D  00A6               	movwf	wireWriteDataByte@val
  6902  051E  308E               	movlw	142
  6903  051F  3188  20F0  3184   	fcall	_wireWriteDataByte
  6904                           
  6905                           ;APDS9960.c: 44:     wireWriteDataByte(0x9D, 0) ;
  6906  0522  0020               	movlb	0	; select bank0
  6907  0523  01A6               	clrf	wireWriteDataByte@val
  6908  0524  309D               	movlw	157
  6909  0525  3188  20F0  3184   	fcall	_wireWriteDataByte
  6910                           
  6911                           ;APDS9960.c: 45:     wireWriteDataByte(0x9E, 0) ;
  6912  0528  0020               	movlb	0	; select bank0
  6913  0529  01A6               	clrf	wireWriteDataByte@val
  6914  052A  309E               	movlw	158
  6915  052B  3188  20F0  3184   	fcall	_wireWriteDataByte
  6916                           
  6917                           ;APDS9960.c: 46:     wireWriteDataByte(0x8D, 0x60) ;
  6918  052E  3060               	movlw	96
  6919  052F  0020               	movlb	0	; select bank0
  6920  0530  00B0               	movwf	??_initialize
  6921  0531  0830               	movf	??_initialize,w
  6922  0532  00A6               	movwf	wireWriteDataByte@val
  6923  0533  308D               	movlw	141
  6924  0534  3188  20F0  3184   	fcall	_wireWriteDataByte
  6925                           
  6926                           ;APDS9960.c: 47:     setLEDDrive(0);
  6927  0537  3000               	movlw	0
  6928  0538  318A  2283  3184   	fcall	_setLEDDrive
  6929                           
  6930                           ;APDS9960.c: 48:     setProximityGain(2);
  6931  053B  3002               	movlw	2
  6932  053C  318A  22AC  3184   	fcall	_setProximityGain
  6933                           
  6934                           ;APDS9960.c: 49:     setAmbientLightGain(1);
  6935  053F  3001               	movlw	1
  6936  0540  3189  217F  3184   	fcall	_setAmbientLightGain
  6937                           
  6938                           ;APDS9960.c: 51:     if( !setProxIntLowThresh(0) ) {
  6939  0543  3000               	movlw	0
  6940  0544  3187  27ED  3184   	fcall	_setProxIntLowThresh
  6941  0547  3A00               	xorlw	0
  6942  0548  1903               	btfsc	3,2
  6943  0549  2D00               	goto	l7470
  6944                           
  6945                           ;APDS9960.c: 54:     if( !setProxIntHighThresh(50) ) {
  6946  054A  3032               	movlw	50
  6947  054B  3188  2039  3184   	fcall	_setProxIntHighThresh
  6948  054E  3A00               	xorlw	0
  6949  054F  1903               	btfsc	3,2
  6950  0550  2D00               	goto	l7470
  6951                           
  6952                           ;APDS9960.c: 59:     if( !setLightIntLowThreshold(0xFFFF) ) {
  6953  0551  30FF               	movlw	255
  6954  0552  0020               	movlb	0	; select bank0
  6955  0553  00AA               	movwf	setLightIntLowThreshold@threshold
  6956  0554  30FF               	movlw	255
  6957  0555  00AB               	movwf	setLightIntLowThreshold@threshold+1
  6958  0556  318A  225C  3184   	fcall	_setLightIntLowThreshold
  6959  0559  3A00               	xorlw	0
  6960  055A  1903               	btfsc	3,2
  6961  055B  2D00               	goto	l7470
  6962                           
  6963                           ;APDS9960.c: 62:     if( !setLightIntHighThreshold(0) ) {
  6964  055C  3000               	movlw	0
  6965  055D  0020               	movlb	0	; select bank0
  6966  055E  00AA               	movwf	setLightIntHighThreshold@threshold
  6967  055F  00AB               	movwf	setLightIntHighThreshold@threshold+1
  6968  0560  318A  2235  3184   	fcall	_setLightIntHighThreshold
  6969  0563  3A00               	xorlw	0
  6970  0564  1903               	btfsc	3,2
  6971  0565  2D00               	goto	l7470
  6972                           
  6973                           ;APDS9960.c: 66:     if( !wireWriteDataByte(0x8C, 0x11) ) {
  6974  0566  3011               	movlw	17
  6975  0567  0020               	movlb	0	; select bank0
  6976  0568  00B0               	movwf	??_initialize
  6977  0569  0830               	movf	??_initialize,w
  6978  056A  00A6               	movwf	wireWriteDataByte@val
  6979  056B  308C               	movlw	140
  6980  056C  3188  20F0  3184   	fcall	_wireWriteDataByte
  6981  056F  0020               	movlb	0	; select bank0
  6982  0570  0826               	movf	?_wireWriteDataByte,w
  6983  0571  0427               	iorwf	?_wireWriteDataByte+1,w
  6984  0572  1903               	btfsc	3,2
  6985  0573  2D00               	goto	l7470
  6986                           
  6987                           ;APDS9960.c: 71:     if( !wireWriteDataByte(0x90, 0x01) ) {
  6988  0574  01A6               	clrf	wireWriteDataByte@val
  6989  0575  0AA6               	incf	wireWriteDataByte@val,f
  6990  0576  3090               	movlw	144
  6991  0577  3188  20F0  3184   	fcall	_wireWriteDataByte
  6992  057A  0020               	movlb	0	; select bank0
  6993  057B  0826               	movf	?_wireWriteDataByte,w
  6994  057C  0427               	iorwf	?_wireWriteDataByte+1,w
  6995  057D  1903               	btfsc	3,2
  6996  057E  2D00               	goto	l7470
  6997                           
  6998                           ;APDS9960.c: 74:     if( !wireWriteDataByte(0x9F, 0) ) {
  6999  057F  01A6               	clrf	wireWriteDataByte@val
  7000  0580  309F               	movlw	159
  7001  0581  3188  20F0  3184   	fcall	_wireWriteDataByte
  7002  0584  0020               	movlb	0	; select bank0
  7003  0585  0826               	movf	?_wireWriteDataByte,w
  7004  0586  0427               	iorwf	?_wireWriteDataByte+1,w
  7005  0587  1903               	btfsc	3,2
  7006  0588  2D00               	goto	l7470
  7007                           
  7008                           ;APDS9960.c: 78:     if( !setGestureEnterThresh(40) ) {
  7009  0589  3028               	movlw	40
  7010  058A  3188  2013  3184   	fcall	_setGestureEnterThresh
  7011  058D  3A00               	xorlw	0
  7012  058E  1903               	btfsc	3,2
  7013  058F  2D00               	goto	l7470
  7014                           
  7015                           ;APDS9960.c: 82:     if( !setGestureExitThresh(30) ) {
  7016  0590  301E               	movlw	30
  7017  0591  3188  2026  3184   	fcall	_setGestureExitThresh
  7018  0594  3A00               	xorlw	0
  7019  0595  1903               	btfsc	3,2
  7020  0596  2D00               	goto	l7470
  7021                           
  7022                           ;APDS9960.c: 85:     if( !wireWriteDataByte(0xA2, 0x40) ) {
  7023  0597  3040               	movlw	64
  7024  0598  0020               	movlb	0	; select bank0
  7025  0599  00B0               	movwf	??_initialize
  7026  059A  0830               	movf	??_initialize,w
  7027  059B  00A6               	movwf	wireWriteDataByte@val
  7028  059C  30A2               	movlw	162
  7029  059D  3188  20F0  3184   	fcall	_wireWriteDataByte
  7030  05A0  0020               	movlb	0	; select bank0
  7031  05A1  0826               	movf	?_wireWriteDataByte,w
  7032  05A2  0427               	iorwf	?_wireWriteDataByte+1,w
  7033  05A3  1903               	btfsc	3,2
  7034  05A4  2D00               	goto	l7470
  7035                           
  7036                           ;APDS9960.c: 88:     if( !setGestureGain(2) ) {
  7037  05A5  3002               	movlw	2
  7038  05A6  318B  238E  3184   	fcall	_setGestureGain
  7039  05A9  3A00               	xorlw	0
  7040  05AA  1903               	btfsc	3,2
  7041  05AB  2D00               	goto	l7470
  7042                           
  7043                           ;APDS9960.c: 91:     if( !setGestureLEDDrive(0) ) {
  7044  05AC  3000               	movlw	0
  7045  05AD  318B  23C0  3184   	fcall	_setGestureLEDDrive
  7046  05B0  3A00               	xorlw	0
  7047  05B1  1903               	btfsc	3,2
  7048  05B2  2D00               	goto	l7470
  7049                           
  7050                           ;APDS9960.c: 95:     if( !setGestureWaitTime(1) ) {
  7051  05B3  3001               	movlw	1
  7052  05B4  318A  220E  3184   	fcall	_setGestureWaitTime
  7053  05B7  3A00               	xorlw	0
  7054  05B8  1903               	btfsc	3,2
  7055  05B9  2D00               	goto	l7470
  7056                           
  7057                           ;APDS9960.c: 98:     if( !wireWriteDataByte(0xA4, 0) ) {
  7058  05BA  0020               	movlb	0	; select bank0
  7059  05BB  01A6               	clrf	wireWriteDataByte@val
  7060  05BC  30A4               	movlw	164
  7061  05BD  3188  20F0  3184   	fcall	_wireWriteDataByte
  7062  05C0  0020               	movlb	0	; select bank0
  7063  05C1  0826               	movf	?_wireWriteDataByte,w
  7064  05C2  0427               	iorwf	?_wireWriteDataByte+1,w
  7065  05C3  1903               	btfsc	3,2
  7066  05C4  2D00               	goto	l7470
  7067                           
  7068                           ;APDS9960.c: 101:     if( !wireWriteDataByte(0xA5, 0) ) {
  7069  05C5  01A6               	clrf	wireWriteDataByte@val
  7070  05C6  30A5               	movlw	165
  7071  05C7  3188  20F0  3184   	fcall	_wireWriteDataByte
  7072  05CA  0020               	movlb	0	; select bank0
  7073  05CB  0826               	movf	?_wireWriteDataByte,w
  7074  05CC  0427               	iorwf	?_wireWriteDataByte+1,w
  7075  05CD  1903               	btfsc	3,2
  7076  05CE  2D00               	goto	l7470
  7077                           
  7078                           ;APDS9960.c: 104:     if( !wireWriteDataByte(0xA7, 0) ) {
  7079  05CF  01A6               	clrf	wireWriteDataByte@val
  7080  05D0  30A7               	movlw	167
  7081  05D1  3188  20F0  3184   	fcall	_wireWriteDataByte
  7082  05D4  0020               	movlb	0	; select bank0
  7083  05D5  0826               	movf	?_wireWriteDataByte,w
  7084  05D6  0427               	iorwf	?_wireWriteDataByte+1,w
  7085  05D7  1903               	btfsc	3,2
  7086  05D8  2D00               	goto	l7470
  7087                           
  7088                           ;APDS9960.c: 107:     if( !wireWriteDataByte(0xA9, 0) ) {
  7089  05D9  01A6               	clrf	wireWriteDataByte@val
  7090  05DA  30A9               	movlw	169
  7091  05DB  3188  20F0  3184   	fcall	_wireWriteDataByte
  7092  05DE  0020               	movlb	0	; select bank0
  7093  05DF  0826               	movf	?_wireWriteDataByte,w
  7094  05E0  0427               	iorwf	?_wireWriteDataByte+1,w
  7095  05E1  1903               	btfsc	3,2
  7096  05E2  2D00               	goto	l7470
  7097                           
  7098                           ;APDS9960.c: 110:     if( !wireWriteDataByte(0xA6, 0xC9) ) {
  7099  05E3  30C9               	movlw	201
  7100  05E4  00B0               	movwf	??_initialize
  7101  05E5  0830               	movf	??_initialize,w
  7102  05E6  00A6               	movwf	wireWriteDataByte@val
  7103  05E7  30A6               	movlw	166
  7104  05E8  3188  20F0  3184   	fcall	_wireWriteDataByte
  7105  05EB  0020               	movlb	0	; select bank0
  7106  05EC  0826               	movf	?_wireWriteDataByte,w
  7107  05ED  0427               	iorwf	?_wireWriteDataByte+1,w
  7108  05EE  1903               	btfsc	3,2
  7109  05EF  2D00               	goto	l7470
  7110                           
  7111                           ;APDS9960.c: 113:     if( !wireWriteDataByte(0xAA, 0) ) {
  7112  05F0  01A6               	clrf	wireWriteDataByte@val
  7113  05F1  30AA               	movlw	170
  7114  05F2  3188  20F0  3184   	fcall	_wireWriteDataByte
  7115  05F5  0020               	movlb	0	; select bank0
  7116  05F6  0826               	movf	?_wireWriteDataByte,w
  7117  05F7  0427               	iorwf	?_wireWriteDataByte+1,w
  7118  05F8  1903               	btfsc	3,2
  7119  05F9  2D00               	goto	l7470
  7120                           
  7121                           ;APDS9960.c: 116:     if( !setGestureIntEnable(0) ) {
  7122  05FA  3000               	movlw	0
  7123  05FB  318B  2300  3184   	fcall	_setGestureIntEnable
  7124  05FE  3A00               	xorlw	0
  7125  05FF  1903               	btfsc	3,2
  7126  0600  2D00               	goto	l7470
  7127                           
  7128                           ;APDS9960.c: 120:     return 1;
  7129  0601  3001               	movlw	1
  7130  0602  0008               	return
  7131  0603                     __end_of_initialize:	
  7132                           
  7133                           	psect	text2
  7134  0AAC                     __ptext2:	
  7135 ;; *************** function _setProximityGain *****************
  7136 ;; Defined at:
  7137 ;;		line 192 in file "APDS9960.c"
  7138 ;; Parameters:    Size  Location     Type
  7139 ;;  drive           1    wreg     unsigned char 
  7140 ;; Auto vars:     Size  Location     Type
  7141 ;;  drive           1   13[BANK0 ] unsigned char 
  7142 ;;  val             1   12[BANK0 ] unsigned char 
  7143 ;; Return value:  Size  Location     Type
  7144 ;;                  1    wreg      _Bool 
  7145 ;; Registers used:
  7146 ;;		wreg, status,2, status,0, pclath, cstack
  7147 ;; Tracked objects:
  7148 ;;		On entry : 0/0
  7149 ;;		On exit  : 0/0
  7150 ;;		Unchanged: 0/0
  7151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7152 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7153 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7154 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7155 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7156 ;;Total ram usage:        4 bytes
  7157 ;; Hardware stack levels used:    1
  7158 ;; Hardware stack levels required when called:    8
  7159 ;; This function calls:
  7160 ;;		_wireReadDataByte
  7161 ;;		_wireWriteDataByte
  7162 ;; This function is called by:
  7163 ;;		_initialize
  7164 ;; This function uses a non-reentrant model
  7165 ;;
  7166                           
  7167                           
  7168                           ;psect for function _setProximityGain
  7169  0AAC                     _setProximityGain:	
  7170                           
  7171                           ;incstack = 0
  7172                           ; Regs used in _setProximityGain: [wreg+status,2+status,0+pclath+cstack]
  7173                           ;setProximityGain@drive stored from wreg
  7174  0AAC  0020               	movlb	0	; select bank0
  7175  0AAD  00AD               	movwf	setProximityGain@drive
  7176                           
  7177                           ;APDS9960.c: 192: _Bool setProximityGain(uint8_t drive);APDS9960.c: 193: {;APDS9960.c: 1
      +                          94:     uint8_t val;;APDS9960.c: 197:     val=wireReadDataByte(0x8F);
  7178  0AAE  308F               	movlw	143
  7179  0AAF  3189  219D  318A   	fcall	_wireReadDataByte
  7180  0AB2  0020               	movlb	0	; select bank0
  7181  0AB3  00AA               	movwf	??_setProximityGain
  7182  0AB4  082A               	movf	??_setProximityGain,w
  7183  0AB5  00AC               	movwf	setProximityGain@val
  7184                           
  7185                           ;APDS9960.c: 199:     drive &= 0b00000011;
  7186  0AB6  3003               	movlw	3
  7187  0AB7  00AA               	movwf	??_setProximityGain
  7188  0AB8  082A               	movf	??_setProximityGain,w
  7189  0AB9  05AD               	andwf	setProximityGain@drive,f
  7190                           
  7191                           ;APDS9960.c: 200:     drive = drive << 2;
  7192  0ABA  082D               	movf	setProximityGain@drive,w
  7193  0ABB  00AA               	movwf	??_setProximityGain
  7194  0ABC  3001               	movlw	1
  7195  0ABD                     u6155:	
  7196  0ABD  35AA               	lslf	??_setProximityGain,f
  7197  0ABE  3EFF               	addlw	-1
  7198  0ABF  1D03               	skipz
  7199  0AC0  2ABD               	goto	u6155
  7200  0AC1  352A               	lslf	??_setProximityGain,w
  7201  0AC2  00AB               	movwf	??_setProximityGain+1
  7202  0AC3  082B               	movf	??_setProximityGain+1,w
  7203  0AC4  00AD               	movwf	setProximityGain@drive
  7204                           
  7205                           ;APDS9960.c: 201:     val &= 0b11110011;
  7206  0AC5  30F3               	movlw	243
  7207  0AC6  00AA               	movwf	??_setProximityGain
  7208  0AC7  082A               	movf	??_setProximityGain,w
  7209  0AC8  05AC               	andwf	setProximityGain@val,f
  7210                           
  7211                           ;APDS9960.c: 202:     val |= drive;
  7212  0AC9  082D               	movf	setProximityGain@drive,w
  7213  0ACA  00AA               	movwf	??_setProximityGain
  7214  0ACB  082A               	movf	??_setProximityGain,w
  7215  0ACC  04AC               	iorwf	setProximityGain@val,f
  7216                           
  7217                           ;APDS9960.c: 205:     if( !wireWriteDataByte(0x8F, val) ) {
  7218  0ACD  082C               	movf	setProximityGain@val,w
  7219  0ACE  00AA               	movwf	??_setProximityGain
  7220  0ACF  082A               	movf	??_setProximityGain,w
  7221  0AD0  00A6               	movwf	wireWriteDataByte@val
  7222  0AD1  308F               	movlw	143
  7223  0AD2  3188  20F0         	fcall	_wireWriteDataByte
  7224  0AD4  0008               	return
  7225  0AD5                     __end_of_setProximityGain:	
  7226                           
  7227                           	psect	text3
  7228  07ED                     __ptext3:	
  7229 ;; *************** function _setProxIntLowThresh *****************
  7230 ;; Defined at:
  7231 ;;		line 234 in file "APDS9960.c"
  7232 ;; Parameters:    Size  Location     Type
  7233 ;;  threshold       1    wreg     unsigned char 
  7234 ;; Auto vars:     Size  Location     Type
  7235 ;;  threshold       1   11[BANK0 ] unsigned char 
  7236 ;; Return value:  Size  Location     Type
  7237 ;;                  1    wreg      _Bool 
  7238 ;; Registers used:
  7239 ;;		wreg, status,2, status,0, pclath, cstack
  7240 ;; Tracked objects:
  7241 ;;		On entry : 0/0
  7242 ;;		On exit  : 0/0
  7243 ;;		Unchanged: 0/0
  7244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7246 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7247 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7248 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7249 ;;Total ram usage:        2 bytes
  7250 ;; Hardware stack levels used:    1
  7251 ;; Hardware stack levels required when called:    8
  7252 ;; This function calls:
  7253 ;;		_wireWriteDataByte
  7254 ;; This function is called by:
  7255 ;;		_initialize
  7256 ;; This function uses a non-reentrant model
  7257 ;;
  7258                           
  7259                           
  7260                           ;psect for function _setProxIntLowThresh
  7261  07ED                     _setProxIntLowThresh:	
  7262                           
  7263                           ;incstack = 0
  7264                           ; Regs used in _setProxIntLowThresh: [wreg+status,2+status,0+pclath+cstack]
  7265                           ;setProxIntLowThresh@threshold stored from wreg
  7266  07ED  0020               	movlb	0	; select bank0
  7267  07EE  00AB               	movwf	setProxIntLowThresh@threshold
  7268                           
  7269                           ;APDS9960.c: 234: _Bool setProxIntLowThresh(uint8_t threshold);APDS9960.c: 235: {;APDS99
      +                          60.c: 236:     if( !wireWriteDataByte(0x89, threshold) ) {
  7270  07EF  082B               	movf	setProxIntLowThresh@threshold,w
  7271  07F0  00AA               	movwf	??_setProxIntLowThresh
  7272  07F1  082A               	movf	??_setProxIntLowThresh,w
  7273  07F2  00A6               	movwf	wireWriteDataByte@val
  7274  07F3  3089               	movlw	137
  7275  07F4  3188  20F0  3187   	fcall	_wireWriteDataByte
  7276  07F7  0020               	movlb	0	; select bank0
  7277  07F8  0826               	movf	?_wireWriteDataByte,w
  7278  07F9  0427               	iorwf	?_wireWriteDataByte+1,w
  7279  07FA  1D03               	btfss	3,2
  7280  07FB  2FFE               	goto	l7210
  7281                           
  7282                           ;APDS9960.c: 237:         return 0;
  7283  07FC  3000               	movlw	0
  7284  07FD  0008               	return
  7285  07FE                     l7210:	
  7286                           
  7287                           ;APDS9960.c: 240:     return 1;
  7288  07FE  3001               	movlw	1
  7289  07FF  0008               	return
  7290  0800                     __end_of_setProxIntLowThresh:	
  7291                           
  7292                           	psect	text4
  7293  0839                     __ptext4:	
  7294 ;; *************** function _setProxIntHighThresh *****************
  7295 ;; Defined at:
  7296 ;;		line 244 in file "APDS9960.c"
  7297 ;; Parameters:    Size  Location     Type
  7298 ;;  threshold       1    wreg     unsigned char 
  7299 ;; Auto vars:     Size  Location     Type
  7300 ;;  threshold       1   11[BANK0 ] unsigned char 
  7301 ;; Return value:  Size  Location     Type
  7302 ;;                  1    wreg      _Bool 
  7303 ;; Registers used:
  7304 ;;		wreg, status,2, status,0, pclath, cstack
  7305 ;; Tracked objects:
  7306 ;;		On entry : 0/0
  7307 ;;		On exit  : 0/0
  7308 ;;		Unchanged: 0/0
  7309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7310 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7311 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7312 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7313 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7314 ;;Total ram usage:        2 bytes
  7315 ;; Hardware stack levels used:    1
  7316 ;; Hardware stack levels required when called:    8
  7317 ;; This function calls:
  7318 ;;		_wireWriteDataByte
  7319 ;; This function is called by:
  7320 ;;		_initialize
  7321 ;; This function uses a non-reentrant model
  7322 ;;
  7323                           
  7324                           
  7325                           ;psect for function _setProxIntHighThresh
  7326  0839                     _setProxIntHighThresh:	
  7327                           
  7328                           ;incstack = 0
  7329                           ; Regs used in _setProxIntHighThresh: [wreg+status,2+status,0+pclath+cstack]
  7330                           ;setProxIntHighThresh@threshold stored from wreg
  7331  0839  0020               	movlb	0	; select bank0
  7332  083A  00AB               	movwf	setProxIntHighThresh@threshold
  7333                           
  7334                           ;APDS9960.c: 244: _Bool setProxIntHighThresh(uint8_t threshold);APDS9960.c: 245: {;APDS9
      +                          960.c: 246:     if( !wireWriteDataByte(0x8B, threshold) ) {
  7335  083B  082B               	movf	setProxIntHighThresh@threshold,w
  7336  083C  00AA               	movwf	??_setProxIntHighThresh
  7337  083D  082A               	movf	??_setProxIntHighThresh,w
  7338  083E  00A6               	movwf	wireWriteDataByte@val
  7339  083F  308B               	movlw	139
  7340  0840  3188  20F0  3188   	fcall	_wireWriteDataByte
  7341  0843  0020               	movlb	0	; select bank0
  7342  0844  0826               	movf	?_wireWriteDataByte,w
  7343  0845  0427               	iorwf	?_wireWriteDataByte+1,w
  7344  0846  1D03               	btfss	3,2
  7345  0847  284A               	goto	l7220
  7346                           
  7347                           ;APDS9960.c: 247:         return 0;
  7348  0848  3000               	movlw	0
  7349  0849  0008               	return
  7350  084A                     l7220:	
  7351                           
  7352                           ;APDS9960.c: 250:     return 1;
  7353  084A  3001               	movlw	1
  7354  084B  0008               	return
  7355  084C                     __end_of_setProxIntHighThresh:	
  7356                           
  7357                           	psect	text5
  7358  0A5C                     __ptext5:	
  7359 ;; *************** function _setLightIntLowThreshold *****************
  7360 ;; Defined at:
  7361 ;;		line 254 in file "APDS9960.c"
  7362 ;; Parameters:    Size  Location     Type
  7363 ;;  threshold       2   10[BANK0 ] unsigned short 
  7364 ;; Auto vars:     Size  Location     Type
  7365 ;;  val_high        1   14[BANK0 ] unsigned char 
  7366 ;;  val_low         1   13[BANK0 ] unsigned char 
  7367 ;; Return value:  Size  Location     Type
  7368 ;;                  1    wreg      _Bool 
  7369 ;; Registers used:
  7370 ;;		wreg, status,2, status,0, pclath, cstack
  7371 ;; Tracked objects:
  7372 ;;		On entry : 0/0
  7373 ;;		On exit  : 0/0
  7374 ;;		Unchanged: 0/0
  7375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7376 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7377 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7378 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7379 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7380 ;;Total ram usage:        5 bytes
  7381 ;; Hardware stack levels used:    1
  7382 ;; Hardware stack levels required when called:    8
  7383 ;; This function calls:
  7384 ;;		_wireWriteDataByte
  7385 ;; This function is called by:
  7386 ;;		_initialize
  7387 ;; This function uses a non-reentrant model
  7388 ;;
  7389                           
  7390                           
  7391                           ;psect for function _setLightIntLowThreshold
  7392  0A5C                     _setLightIntLowThreshold:	
  7393                           
  7394                           ;APDS9960.c: 254: _Bool setLightIntLowThreshold(uint16_t threshold);APDS9960.c: 255: {;A
      +                          PDS9960.c: 256:     uint8_t val_low;;APDS9960.c: 257:     uint8_t val_high;;APDS9960.c: 
      +                          260:     val_low = threshold & 0x00FF;
  7395                           
  7396                           ;incstack = 0
  7397                           ; Regs used in _setLightIntLowThreshold: [wreg+status,2+status,0+pclath+cstack]
  7398  0A5C  0020               	movlb	0	; select bank0
  7399  0A5D  082A               	movf	setLightIntLowThreshold@threshold,w
  7400  0A5E  00AC               	movwf	??_setLightIntLowThreshold
  7401  0A5F  082C               	movf	??_setLightIntLowThreshold,w
  7402  0A60  00AD               	movwf	setLightIntLowThreshold@val_low
  7403                           
  7404                           ;APDS9960.c: 261:     val_high = (threshold & 0xFF00) >> 8;
  7405  0A61  082B               	movf	setLightIntLowThreshold@threshold+1,w
  7406  0A62  00AC               	movwf	??_setLightIntLowThreshold
  7407  0A63  082C               	movf	??_setLightIntLowThreshold,w
  7408  0A64  00AE               	movwf	setLightIntLowThreshold@val_high
  7409                           
  7410                           ;APDS9960.c: 264:     if( !wireWriteDataByte(0x84, val_low) ) {
  7411  0A65  082D               	movf	setLightIntLowThreshold@val_low,w
  7412  0A66  00AC               	movwf	??_setLightIntLowThreshold
  7413  0A67  082C               	movf	??_setLightIntLowThreshold,w
  7414  0A68  00A6               	movwf	wireWriteDataByte@val
  7415  0A69  3084               	movlw	132
  7416  0A6A  3188  20F0  318A   	fcall	_wireWriteDataByte
  7417  0A6D  0020               	movlb	0	; select bank0
  7418  0A6E  0826               	movf	?_wireWriteDataByte,w
  7419  0A6F  0427               	iorwf	?_wireWriteDataByte+1,w
  7420  0A70  1D03               	btfss	3,2
  7421  0A71  2A74               	goto	l7234
  7422  0A72                     l7230:	
  7423                           
  7424                           ;APDS9960.c: 265:         return 0;
  7425  0A72  3000               	movlw	0
  7426  0A73  0008               	return
  7427  0A74                     l7234:	
  7428                           
  7429                           ;APDS9960.c: 269:     if( !wireWriteDataByte(0x85, val_high) ) {
  7430  0A74  082E               	movf	setLightIntLowThreshold@val_high,w
  7431  0A75  00AC               	movwf	??_setLightIntLowThreshold
  7432  0A76  082C               	movf	??_setLightIntLowThreshold,w
  7433  0A77  00A6               	movwf	wireWriteDataByte@val
  7434  0A78  3085               	movlw	133
  7435  0A79  3188  20F0  318A   	fcall	_wireWriteDataByte
  7436  0A7C  0020               	movlb	0	; select bank0
  7437  0A7D  0826               	movf	?_wireWriteDataByte,w
  7438  0A7E  0427               	iorwf	?_wireWriteDataByte+1,w
  7439  0A7F  1903               	btfsc	3,2
  7440  0A80  2A72               	goto	l7230
  7441                           
  7442                           ;APDS9960.c: 273:     return 1;
  7443  0A81  3001               	movlw	1
  7444  0A82  0008               	return
  7445  0A83                     __end_of_setLightIntLowThreshold:	
  7446                           
  7447                           	psect	text6
  7448  0A35                     __ptext6:	
  7449 ;; *************** function _setLightIntHighThreshold *****************
  7450 ;; Defined at:
  7451 ;;		line 277 in file "APDS9960.c"
  7452 ;; Parameters:    Size  Location     Type
  7453 ;;  threshold       2   10[BANK0 ] unsigned short 
  7454 ;; Auto vars:     Size  Location     Type
  7455 ;;  val_high        1   14[BANK0 ] unsigned char 
  7456 ;;  val_low         1   13[BANK0 ] unsigned char 
  7457 ;; Return value:  Size  Location     Type
  7458 ;;                  1    wreg      _Bool 
  7459 ;; Registers used:
  7460 ;;		wreg, status,2, status,0, pclath, cstack
  7461 ;; Tracked objects:
  7462 ;;		On entry : 0/0
  7463 ;;		On exit  : 0/0
  7464 ;;		Unchanged: 0/0
  7465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7466 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7467 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7468 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7469 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7470 ;;Total ram usage:        5 bytes
  7471 ;; Hardware stack levels used:    1
  7472 ;; Hardware stack levels required when called:    8
  7473 ;; This function calls:
  7474 ;;		_wireWriteDataByte
  7475 ;; This function is called by:
  7476 ;;		_initialize
  7477 ;; This function uses a non-reentrant model
  7478 ;;
  7479                           
  7480                           
  7481                           ;psect for function _setLightIntHighThreshold
  7482  0A35                     _setLightIntHighThreshold:	
  7483                           
  7484                           ;APDS9960.c: 277: _Bool setLightIntHighThreshold(uint16_t threshold);APDS9960.c: 278: {;
      +                          APDS9960.c: 279:     uint8_t val_low;;APDS9960.c: 280:     uint8_t val_high;;APDS9960.c:
      +                           283:     val_low = threshold & 0x00FF;
  7485                           
  7486                           ;incstack = 0
  7487                           ; Regs used in _setLightIntHighThreshold: [wreg+status,2+status,0+pclath+cstack]
  7488  0A35  0020               	movlb	0	; select bank0
  7489  0A36  082A               	movf	setLightIntHighThreshold@threshold,w
  7490  0A37  00AC               	movwf	??_setLightIntHighThreshold
  7491  0A38  082C               	movf	??_setLightIntHighThreshold,w
  7492  0A39  00AD               	movwf	setLightIntHighThreshold@val_low
  7493                           
  7494                           ;APDS9960.c: 284:     val_high = (threshold & 0xFF00) >> 8;
  7495  0A3A  082B               	movf	setLightIntHighThreshold@threshold+1,w
  7496  0A3B  00AC               	movwf	??_setLightIntHighThreshold
  7497  0A3C  082C               	movf	??_setLightIntHighThreshold,w
  7498  0A3D  00AE               	movwf	setLightIntHighThreshold@val_high
  7499                           
  7500                           ;APDS9960.c: 287:     if( !wireWriteDataByte(0x86, val_low) ) {
  7501  0A3E  082D               	movf	setLightIntHighThreshold@val_low,w
  7502  0A3F  00AC               	movwf	??_setLightIntHighThreshold
  7503  0A40  082C               	movf	??_setLightIntHighThreshold,w
  7504  0A41  00A6               	movwf	wireWriteDataByte@val
  7505  0A42  3086               	movlw	134
  7506  0A43  3188  20F0  318A   	fcall	_wireWriteDataByte
  7507  0A46  0020               	movlb	0	; select bank0
  7508  0A47  0826               	movf	?_wireWriteDataByte,w
  7509  0A48  0427               	iorwf	?_wireWriteDataByte+1,w
  7510  0A49  1D03               	btfss	3,2
  7511  0A4A  2A4D               	goto	l7254
  7512  0A4B                     l7250:	
  7513                           
  7514                           ;APDS9960.c: 288:         return 0;
  7515  0A4B  3000               	movlw	0
  7516  0A4C  0008               	return
  7517  0A4D                     l7254:	
  7518                           
  7519                           ;APDS9960.c: 292:     if( !wireWriteDataByte(0x87, val_high) ) {
  7520  0A4D  082E               	movf	setLightIntHighThreshold@val_high,w
  7521  0A4E  00AC               	movwf	??_setLightIntHighThreshold
  7522  0A4F  082C               	movf	??_setLightIntHighThreshold,w
  7523  0A50  00A6               	movwf	wireWriteDataByte@val
  7524  0A51  3087               	movlw	135
  7525  0A52  3188  20F0  318A   	fcall	_wireWriteDataByte
  7526  0A55  0020               	movlb	0	; select bank0
  7527  0A56  0826               	movf	?_wireWriteDataByte,w
  7528  0A57  0427               	iorwf	?_wireWriteDataByte+1,w
  7529  0A58  1903               	btfsc	3,2
  7530  0A59  2A4B               	goto	l7250
  7531                           
  7532                           ;APDS9960.c: 296:     return 1;
  7533  0A5A  3001               	movlw	1
  7534  0A5B  0008               	return
  7535  0A5C                     __end_of_setLightIntHighThreshold:	
  7536                           
  7537                           	psect	text7
  7538  0A83                     __ptext7:	
  7539 ;; *************** function _setLEDDrive *****************
  7540 ;; Defined at:
  7541 ;;		line 170 in file "APDS9960.c"
  7542 ;; Parameters:    Size  Location     Type
  7543 ;;  drive           1    wreg     unsigned char 
  7544 ;; Auto vars:     Size  Location     Type
  7545 ;;  drive           1   13[BANK0 ] unsigned char 
  7546 ;;  val             1   12[BANK0 ] unsigned char 
  7547 ;; Return value:  Size  Location     Type
  7548 ;;                  1    wreg      _Bool 
  7549 ;; Registers used:
  7550 ;;		wreg, status,2, status,0, pclath, cstack
  7551 ;; Tracked objects:
  7552 ;;		On entry : 0/0
  7553 ;;		On exit  : 0/0
  7554 ;;		Unchanged: 0/0
  7555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7556 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7557 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7558 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7559 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7560 ;;Total ram usage:        4 bytes
  7561 ;; Hardware stack levels used:    1
  7562 ;; Hardware stack levels required when called:    8
  7563 ;; This function calls:
  7564 ;;		_wireReadDataByte
  7565 ;;		_wireWriteDataByte
  7566 ;; This function is called by:
  7567 ;;		_initialize
  7568 ;; This function uses a non-reentrant model
  7569 ;;
  7570                           
  7571                           
  7572                           ;psect for function _setLEDDrive
  7573  0A83                     _setLEDDrive:	
  7574                           
  7575                           ;incstack = 0
  7576                           ; Regs used in _setLEDDrive: [wreg+status,2+status,0+pclath+cstack]
  7577                           ;setLEDDrive@drive stored from wreg
  7578  0A83  0020               	movlb	0	; select bank0
  7579  0A84  00AD               	movwf	setLEDDrive@drive
  7580                           
  7581                           ;APDS9960.c: 170: _Bool setLEDDrive(uint8_t drive);APDS9960.c: 171: {;APDS9960.c: 172:  
      +                             uint8_t val;;APDS9960.c: 175:     val=wireReadDataByte(0x8F);
  7582  0A85  308F               	movlw	143
  7583  0A86  3189  219D  318A   	fcall	_wireReadDataByte
  7584  0A89  0020               	movlb	0	; select bank0
  7585  0A8A  00AA               	movwf	??_setLEDDrive
  7586  0A8B  082A               	movf	??_setLEDDrive,w
  7587  0A8C  00AC               	movwf	setLEDDrive@val
  7588                           
  7589                           ;APDS9960.c: 178:     drive &= 0b00000011;
  7590  0A8D  3003               	movlw	3
  7591  0A8E  00AA               	movwf	??_setLEDDrive
  7592  0A8F  082A               	movf	??_setLEDDrive,w
  7593  0A90  05AD               	andwf	setLEDDrive@drive,f
  7594                           
  7595                           ;APDS9960.c: 179:     drive = drive << 6;
  7596  0A91  082D               	movf	setLEDDrive@drive,w
  7597  0A92  00AA               	movwf	??_setLEDDrive
  7598  0A93  3005               	movlw	5
  7599  0A94                     u6145:	
  7600  0A94  35AA               	lslf	??_setLEDDrive,f
  7601  0A95  3EFF               	addlw	-1
  7602  0A96  1D03               	skipz
  7603  0A97  2A94               	goto	u6145
  7604  0A98  352A               	lslf	??_setLEDDrive,w
  7605  0A99  00AB               	movwf	??_setLEDDrive+1
  7606  0A9A  082B               	movf	??_setLEDDrive+1,w
  7607  0A9B  00AD               	movwf	setLEDDrive@drive
  7608                           
  7609                           ;APDS9960.c: 180:     val &= 0b00111111;
  7610  0A9C  303F               	movlw	63
  7611  0A9D  00AA               	movwf	??_setLEDDrive
  7612  0A9E  082A               	movf	??_setLEDDrive,w
  7613  0A9F  05AC               	andwf	setLEDDrive@val,f
  7614                           
  7615                           ;APDS9960.c: 181:     val |= drive;
  7616  0AA0  082D               	movf	setLEDDrive@drive,w
  7617  0AA1  00AA               	movwf	??_setLEDDrive
  7618  0AA2  082A               	movf	??_setLEDDrive,w
  7619  0AA3  04AC               	iorwf	setLEDDrive@val,f
  7620                           
  7621                           ;APDS9960.c: 184:     if( !wireWriteDataByte(0x8F, val) ) {
  7622  0AA4  082C               	movf	setLEDDrive@val,w
  7623  0AA5  00AA               	movwf	??_setLEDDrive
  7624  0AA6  082A               	movf	??_setLEDDrive,w
  7625  0AA7  00A6               	movwf	wireWriteDataByte@val
  7626  0AA8  308F               	movlw	143
  7627  0AA9  3188  20F0         	fcall	_wireWriteDataByte
  7628  0AAB  0008               	return
  7629  0AAC                     __end_of_setLEDDrive:	
  7630                           
  7631                           	psect	text8
  7632  0A0E                     __ptext8:	
  7633 ;; *************** function _setGestureWaitTime *****************
  7634 ;; Defined at:
  7635 ;;		line 366 in file "APDS9960.c"
  7636 ;; Parameters:    Size  Location     Type
  7637 ;;  time            1    wreg     unsigned char 
  7638 ;; Auto vars:     Size  Location     Type
  7639 ;;  time            1   11[BANK0 ] unsigned char 
  7640 ;;  val             1   12[BANK0 ] unsigned char 
  7641 ;; Return value:  Size  Location     Type
  7642 ;;                  1    wreg      _Bool 
  7643 ;; Registers used:
  7644 ;;		wreg, status,2, status,0, pclath, cstack
  7645 ;; Tracked objects:
  7646 ;;		On entry : 0/0
  7647 ;;		On exit  : 0/0
  7648 ;;		Unchanged: 0/0
  7649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7650 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7651 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7652 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7653 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7654 ;;Total ram usage:        3 bytes
  7655 ;; Hardware stack levels used:    1
  7656 ;; Hardware stack levels required when called:    8
  7657 ;; This function calls:
  7658 ;;		_wireReadDataByte
  7659 ;;		_wireWriteDataByte
  7660 ;; This function is called by:
  7661 ;;		_initialize
  7662 ;; This function uses a non-reentrant model
  7663 ;;
  7664                           
  7665                           
  7666                           ;psect for function _setGestureWaitTime
  7667  0A0E                     _setGestureWaitTime:	
  7668                           
  7669                           ;incstack = 0
  7670                           ; Regs used in _setGestureWaitTime: [wreg+status,2+status,0+pclath+cstack]
  7671                           ;setGestureWaitTime@time stored from wreg
  7672  0A0E  0020               	movlb	0	; select bank0
  7673  0A0F  00AB               	movwf	setGestureWaitTime@time
  7674                           
  7675                           ;APDS9960.c: 366: _Bool setGestureWaitTime(uint8_t time);APDS9960.c: 367: {;APDS9960.c: 
      +                          368:     uint8_t val;;APDS9960.c: 371:     val = wireReadDataByte(0xA3);
  7676  0A10  30A3               	movlw	163
  7677  0A11  3189  219D  318A   	fcall	_wireReadDataByte
  7678  0A14  0020               	movlb	0	; select bank0
  7679  0A15  00AA               	movwf	??_setGestureWaitTime
  7680  0A16  082A               	movf	??_setGestureWaitTime,w
  7681  0A17  00AC               	movwf	setGestureWaitTime@val
  7682                           
  7683                           ;APDS9960.c: 374:     time &= 0b00000111;
  7684  0A18  3007               	movlw	7
  7685  0A19  00AA               	movwf	??_setGestureWaitTime
  7686  0A1A  082A               	movf	??_setGestureWaitTime,w
  7687  0A1B  05AB               	andwf	setGestureWaitTime@time,f
  7688                           
  7689                           ;APDS9960.c: 375:     val &= 0b11111000;
  7690  0A1C  30F8               	movlw	248
  7691  0A1D  00AA               	movwf	??_setGestureWaitTime
  7692  0A1E  082A               	movf	??_setGestureWaitTime,w
  7693  0A1F  05AC               	andwf	setGestureWaitTime@val,f
  7694                           
  7695                           ;APDS9960.c: 376:     val |= time;
  7696  0A20  082B               	movf	setGestureWaitTime@time,w
  7697  0A21  00AA               	movwf	??_setGestureWaitTime
  7698  0A22  082A               	movf	??_setGestureWaitTime,w
  7699  0A23  04AC               	iorwf	setGestureWaitTime@val,f
  7700                           
  7701                           ;APDS9960.c: 379:     if( !wireWriteDataByte(0xA3, val) ) {
  7702  0A24  082C               	movf	setGestureWaitTime@val,w
  7703  0A25  00AA               	movwf	??_setGestureWaitTime
  7704  0A26  082A               	movf	??_setGestureWaitTime,w
  7705  0A27  00A6               	movwf	wireWriteDataByte@val
  7706  0A28  30A3               	movlw	163
  7707  0A29  3188  20F0  318A   	fcall	_wireWriteDataByte
  7708  0A2C  0020               	movlb	0	; select bank0
  7709  0A2D  0826               	movf	?_wireWriteDataByte,w
  7710  0A2E  0427               	iorwf	?_wireWriteDataByte+1,w
  7711  0A2F  1D03               	btfss	3,2
  7712  0A30  2A33               	goto	l7334
  7713                           
  7714                           ;APDS9960.c: 380:         return 0;
  7715  0A31  3000               	movlw	0
  7716  0A32  0008               	return
  7717  0A33                     l7334:	
  7718                           
  7719                           ;APDS9960.c: 383:     return 1;
  7720  0A33  3001               	movlw	1
  7721  0A34  0008               	return
  7722  0A35                     __end_of_setGestureWaitTime:	
  7723                           
  7724                           	psect	text9
  7725  0BC0                     __ptext9:	
  7726 ;; *************** function _setGestureLEDDrive *****************
  7727 ;; Defined at:
  7728 ;;		line 343 in file "APDS9960.c"
  7729 ;; Parameters:    Size  Location     Type
  7730 ;;  drive           1    wreg     unsigned char 
  7731 ;; Auto vars:     Size  Location     Type
  7732 ;;  drive           1   13[BANK0 ] unsigned char 
  7733 ;;  val             1   12[BANK0 ] unsigned char 
  7734 ;; Return value:  Size  Location     Type
  7735 ;;                  1    wreg      _Bool 
  7736 ;; Registers used:
  7737 ;;		wreg, status,2, status,0, pclath, cstack
  7738 ;; Tracked objects:
  7739 ;;		On entry : 0/0
  7740 ;;		On exit  : 0/0
  7741 ;;		Unchanged: 0/0
  7742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7743 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7744 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7745 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7746 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7747 ;;Total ram usage:        4 bytes
  7748 ;; Hardware stack levels used:    1
  7749 ;; Hardware stack levels required when called:    8
  7750 ;; This function calls:
  7751 ;;		_wireReadDataByte
  7752 ;;		_wireWriteDataByte
  7753 ;; This function is called by:
  7754 ;;		_initialize
  7755 ;; This function uses a non-reentrant model
  7756 ;;
  7757                           
  7758                           
  7759                           ;psect for function _setGestureLEDDrive
  7760  0BC0                     _setGestureLEDDrive:	
  7761                           
  7762                           ;incstack = 0
  7763                           ; Regs used in _setGestureLEDDrive: [wreg+status,2+status,0+pclath+cstack]
  7764                           ;setGestureLEDDrive@drive stored from wreg
  7765  0BC0  0020               	movlb	0	; select bank0
  7766  0BC1  00AD               	movwf	setGestureLEDDrive@drive
  7767                           
  7768                           ;APDS9960.c: 343: _Bool setGestureLEDDrive(uint8_t drive);APDS9960.c: 344: {;APDS9960.c:
      +                           345:     uint8_t val;;APDS9960.c: 348:     val = wireReadDataByte(0xA3);
  7769  0BC2  30A3               	movlw	163
  7770  0BC3  3189  219D  318B   	fcall	_wireReadDataByte
  7771  0BC6  0020               	movlb	0	; select bank0
  7772  0BC7  00AA               	movwf	??_setGestureLEDDrive
  7773  0BC8  082A               	movf	??_setGestureLEDDrive,w
  7774  0BC9  00AC               	movwf	setGestureLEDDrive@val
  7775                           
  7776                           ;APDS9960.c: 352:     drive &= 0b00000011;
  7777  0BCA  3003               	movlw	3
  7778  0BCB  00AA               	movwf	??_setGestureLEDDrive
  7779  0BCC  082A               	movf	??_setGestureLEDDrive,w
  7780  0BCD  05AD               	andwf	setGestureLEDDrive@drive,f
  7781                           
  7782                           ;APDS9960.c: 353:     drive = drive << 3;
  7783  0BCE  082D               	movf	setGestureLEDDrive@drive,w
  7784  0BCF  00AA               	movwf	??_setGestureLEDDrive
  7785  0BD0  3002               	movlw	2
  7786  0BD1                     u6265:	
  7787  0BD1  35AA               	lslf	??_setGestureLEDDrive,f
  7788  0BD2  3EFF               	addlw	-1
  7789  0BD3  1D03               	skipz
  7790  0BD4  2BD1               	goto	u6265
  7791  0BD5  352A               	lslf	??_setGestureLEDDrive,w
  7792  0BD6  00AB               	movwf	??_setGestureLEDDrive+1
  7793  0BD7  082B               	movf	??_setGestureLEDDrive+1,w
  7794  0BD8  00AD               	movwf	setGestureLEDDrive@drive
  7795                           
  7796                           ;APDS9960.c: 354:     val &= 0b11100111;
  7797  0BD9  30E7               	movlw	231
  7798  0BDA  00AA               	movwf	??_setGestureLEDDrive
  7799  0BDB  082A               	movf	??_setGestureLEDDrive,w
  7800  0BDC  05AC               	andwf	setGestureLEDDrive@val,f
  7801                           
  7802                           ;APDS9960.c: 355:     val |= drive;
  7803  0BDD  082D               	movf	setGestureLEDDrive@drive,w
  7804  0BDE  00AA               	movwf	??_setGestureLEDDrive
  7805  0BDF  082A               	movf	??_setGestureLEDDrive,w
  7806  0BE0  04AC               	iorwf	setGestureLEDDrive@val,f
  7807                           
  7808                           ;APDS9960.c: 358:     if( !wireWriteDataByte(0xA3, val) ) {
  7809  0BE1  082C               	movf	setGestureLEDDrive@val,w
  7810  0BE2  00AA               	movwf	??_setGestureLEDDrive
  7811  0BE3  082A               	movf	??_setGestureLEDDrive,w
  7812  0BE4  00A6               	movwf	wireWriteDataByte@val
  7813  0BE5  30A3               	movlw	163
  7814  0BE6  3188  20F0  318B   	fcall	_wireWriteDataByte
  7815  0BE9  0020               	movlb	0	; select bank0
  7816  0BEA  0826               	movf	?_wireWriteDataByte,w
  7817  0BEB  0427               	iorwf	?_wireWriteDataByte+1,w
  7818  0BEC  1D03               	btfss	3,2
  7819  0BED  2BF0               	goto	l7316
  7820                           
  7821                           ;APDS9960.c: 359:         return 0;
  7822  0BEE  3000               	movlw	0
  7823  0BEF  0008               	return
  7824  0BF0                     l7316:	
  7825                           
  7826                           ;APDS9960.c: 362:     return 1;
  7827  0BF0  3001               	movlw	1
  7828  0BF1  0008               	return
  7829  0BF2                     __end_of_setGestureLEDDrive:	
  7830                           
  7831                           	psect	text10
  7832  0B8E                     __ptext10:	
  7833 ;; *************** function _setGestureGain *****************
  7834 ;; Defined at:
  7835 ;;		line 320 in file "APDS9960.c"
  7836 ;; Parameters:    Size  Location     Type
  7837 ;;  gain            1    wreg     unsigned char 
  7838 ;; Auto vars:     Size  Location     Type
  7839 ;;  gain            1   13[BANK0 ] unsigned char 
  7840 ;;  val             1   12[BANK0 ] unsigned char 
  7841 ;; Return value:  Size  Location     Type
  7842 ;;                  1    wreg      _Bool 
  7843 ;; Registers used:
  7844 ;;		wreg, status,2, status,0, pclath, cstack
  7845 ;; Tracked objects:
  7846 ;;		On entry : 0/0
  7847 ;;		On exit  : 0/0
  7848 ;;		Unchanged: 0/0
  7849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7851 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7852 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7853 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7854 ;;Total ram usage:        4 bytes
  7855 ;; Hardware stack levels used:    1
  7856 ;; Hardware stack levels required when called:    8
  7857 ;; This function calls:
  7858 ;;		_wireReadDataByte
  7859 ;;		_wireWriteDataByte
  7860 ;; This function is called by:
  7861 ;;		_initialize
  7862 ;; This function uses a non-reentrant model
  7863 ;;
  7864                           
  7865                           
  7866                           ;psect for function _setGestureGain
  7867  0B8E                     _setGestureGain:	
  7868                           
  7869                           ;incstack = 0
  7870                           ; Regs used in _setGestureGain: [wreg+status,2+status,0+pclath+cstack]
  7871                           ;setGestureGain@gain stored from wreg
  7872  0B8E  0020               	movlb	0	; select bank0
  7873  0B8F  00AD               	movwf	setGestureGain@gain
  7874                           
  7875                           ;APDS9960.c: 320: _Bool setGestureGain(uint8_t gain);APDS9960.c: 321: {;APDS9960.c: 322:
      +                               uint8_t val;;APDS9960.c: 325:     val = wireReadDataByte(0xA3);
  7876  0B90  30A3               	movlw	163
  7877  0B91  3189  219D  318B   	fcall	_wireReadDataByte
  7878  0B94  0020               	movlb	0	; select bank0
  7879  0B95  00AA               	movwf	??_setGestureGain
  7880  0B96  082A               	movf	??_setGestureGain,w
  7881  0B97  00AC               	movwf	setGestureGain@val
  7882                           
  7883                           ;APDS9960.c: 329:     gain &= 0b00000011;
  7884  0B98  3003               	movlw	3
  7885  0B99  00AA               	movwf	??_setGestureGain
  7886  0B9A  082A               	movf	??_setGestureGain,w
  7887  0B9B  05AD               	andwf	setGestureGain@gain,f
  7888                           
  7889                           ;APDS9960.c: 330:     gain = gain << 5;
  7890  0B9C  082D               	movf	setGestureGain@gain,w
  7891  0B9D  00AA               	movwf	??_setGestureGain
  7892  0B9E  3004               	movlw	4
  7893  0B9F                     u6245:	
  7894  0B9F  35AA               	lslf	??_setGestureGain,f
  7895  0BA0  3EFF               	addlw	-1
  7896  0BA1  1D03               	skipz
  7897  0BA2  2B9F               	goto	u6245
  7898  0BA3  352A               	lslf	??_setGestureGain,w
  7899  0BA4  00AB               	movwf	??_setGestureGain+1
  7900  0BA5  082B               	movf	??_setGestureGain+1,w
  7901  0BA6  00AD               	movwf	setGestureGain@gain
  7902                           
  7903                           ;APDS9960.c: 331:     val &= 0b10011111;
  7904  0BA7  309F               	movlw	159
  7905  0BA8  00AA               	movwf	??_setGestureGain
  7906  0BA9  082A               	movf	??_setGestureGain,w
  7907  0BAA  05AC               	andwf	setGestureGain@val,f
  7908                           
  7909                           ;APDS9960.c: 332:     val |= gain;
  7910  0BAB  082D               	movf	setGestureGain@gain,w
  7911  0BAC  00AA               	movwf	??_setGestureGain
  7912  0BAD  082A               	movf	??_setGestureGain,w
  7913  0BAE  04AC               	iorwf	setGestureGain@val,f
  7914                           
  7915                           ;APDS9960.c: 335:     if( !wireWriteDataByte(0xA3, val) ) {
  7916  0BAF  082C               	movf	setGestureGain@val,w
  7917  0BB0  00AA               	movwf	??_setGestureGain
  7918  0BB1  082A               	movf	??_setGestureGain,w
  7919  0BB2  00A6               	movwf	wireWriteDataByte@val
  7920  0BB3  30A3               	movlw	163
  7921  0BB4  3188  20F0  318B   	fcall	_wireWriteDataByte
  7922  0BB7  0020               	movlb	0	; select bank0
  7923  0BB8  0826               	movf	?_wireWriteDataByte,w
  7924  0BB9  0427               	iorwf	?_wireWriteDataByte+1,w
  7925  0BBA  1D03               	btfss	3,2
  7926  0BBB  2BBE               	goto	l7298
  7927                           
  7928                           ;APDS9960.c: 336:         return 0;
  7929  0BBC  3000               	movlw	0
  7930  0BBD  0008               	return
  7931  0BBE                     l7298:	
  7932                           
  7933                           ;APDS9960.c: 339:     return 1;
  7934  0BBE  3001               	movlw	1
  7935  0BBF  0008               	return
  7936  0BC0                     __end_of_setGestureGain:	
  7937                           
  7938                           	psect	text11
  7939  0826                     __ptext11:	
  7940 ;; *************** function _setGestureExitThresh *****************
  7941 ;; Defined at:
  7942 ;;		line 310 in file "APDS9960.c"
  7943 ;; Parameters:    Size  Location     Type
  7944 ;;  threshold       1    wreg     unsigned char 
  7945 ;; Auto vars:     Size  Location     Type
  7946 ;;  threshold       1   11[BANK0 ] unsigned char 
  7947 ;; Return value:  Size  Location     Type
  7948 ;;                  1    wreg      _Bool 
  7949 ;; Registers used:
  7950 ;;		wreg, status,2, status,0, pclath, cstack
  7951 ;; Tracked objects:
  7952 ;;		On entry : 0/0
  7953 ;;		On exit  : 0/0
  7954 ;;		Unchanged: 0/0
  7955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7956 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7957 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7958 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7959 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7960 ;;Total ram usage:        2 bytes
  7961 ;; Hardware stack levels used:    1
  7962 ;; Hardware stack levels required when called:    8
  7963 ;; This function calls:
  7964 ;;		_wireWriteDataByte
  7965 ;; This function is called by:
  7966 ;;		_initialize
  7967 ;; This function uses a non-reentrant model
  7968 ;;
  7969                           
  7970                           
  7971                           ;psect for function _setGestureExitThresh
  7972  0826                     _setGestureExitThresh:	
  7973                           
  7974                           ;incstack = 0
  7975                           ; Regs used in _setGestureExitThresh: [wreg+status,2+status,0+pclath+cstack]
  7976                           ;setGestureExitThresh@threshold stored from wreg
  7977  0826  0020               	movlb	0	; select bank0
  7978  0827  00AB               	movwf	setGestureExitThresh@threshold
  7979                           
  7980                           ;APDS9960.c: 310: _Bool setGestureExitThresh(uint8_t threshold);APDS9960.c: 311: {;APDS9
      +                          960.c: 312:     if( !wireWriteDataByte(0xA1, threshold) ) {
  7981  0828  082B               	movf	setGestureExitThresh@threshold,w
  7982  0829  00AA               	movwf	??_setGestureExitThresh
  7983  082A  082A               	movf	??_setGestureExitThresh,w
  7984  082B  00A6               	movwf	wireWriteDataByte@val
  7985  082C  30A1               	movlw	161
  7986  082D  3188  20F0  3188   	fcall	_wireWriteDataByte
  7987  0830  0020               	movlb	0	; select bank0
  7988  0831  0826               	movf	?_wireWriteDataByte,w
  7989  0832  0427               	iorwf	?_wireWriteDataByte+1,w
  7990  0833  1D03               	btfss	3,2
  7991  0834  2837               	goto	l7280
  7992                           
  7993                           ;APDS9960.c: 313:         return 0;
  7994  0835  3000               	movlw	0
  7995  0836  0008               	return
  7996  0837                     l7280:	
  7997                           
  7998                           ;APDS9960.c: 316:     return 1;
  7999  0837  3001               	movlw	1
  8000  0838  0008               	return
  8001  0839                     __end_of_setGestureExitThresh:	
  8002                           
  8003                           	psect	text12
  8004  0813                     __ptext12:	
  8005 ;; *************** function _setGestureEnterThresh *****************
  8006 ;; Defined at:
  8007 ;;		line 300 in file "APDS9960.c"
  8008 ;; Parameters:    Size  Location     Type
  8009 ;;  threshold       1    wreg     unsigned char 
  8010 ;; Auto vars:     Size  Location     Type
  8011 ;;  threshold       1   11[BANK0 ] unsigned char 
  8012 ;; Return value:  Size  Location     Type
  8013 ;;                  1    wreg      _Bool 
  8014 ;; Registers used:
  8015 ;;		wreg, status,2, status,0, pclath, cstack
  8016 ;; Tracked objects:
  8017 ;;		On entry : 0/0
  8018 ;;		On exit  : 0/0
  8019 ;;		Unchanged: 0/0
  8020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8022 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8023 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8024 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8025 ;;Total ram usage:        2 bytes
  8026 ;; Hardware stack levels used:    1
  8027 ;; Hardware stack levels required when called:    8
  8028 ;; This function calls:
  8029 ;;		_wireWriteDataByte
  8030 ;; This function is called by:
  8031 ;;		_initialize
  8032 ;; This function uses a non-reentrant model
  8033 ;;
  8034                           
  8035                           
  8036                           ;psect for function _setGestureEnterThresh
  8037  0813                     _setGestureEnterThresh:	
  8038                           
  8039                           ;incstack = 0
  8040                           ; Regs used in _setGestureEnterThresh: [wreg+status,2+status,0+pclath+cstack]
  8041                           ;setGestureEnterThresh@threshold stored from wreg
  8042  0813  0020               	movlb	0	; select bank0
  8043  0814  00AB               	movwf	setGestureEnterThresh@threshold
  8044                           
  8045                           ;APDS9960.c: 300: _Bool setGestureEnterThresh(uint8_t threshold);APDS9960.c: 301: {;APDS
      +                          9960.c: 302:     if( !wireWriteDataByte(0xA0, threshold) ) {
  8046  0815  082B               	movf	setGestureEnterThresh@threshold,w
  8047  0816  00AA               	movwf	??_setGestureEnterThresh
  8048  0817  082A               	movf	??_setGestureEnterThresh,w
  8049  0818  00A6               	movwf	wireWriteDataByte@val
  8050  0819  30A0               	movlw	160
  8051  081A  3188  20F0  3188   	fcall	_wireWriteDataByte
  8052  081D  0020               	movlb	0	; select bank0
  8053  081E  0826               	movf	?_wireWriteDataByte,w
  8054  081F  0427               	iorwf	?_wireWriteDataByte+1,w
  8055  0820  1D03               	btfss	3,2
  8056  0821  2824               	goto	l7270
  8057                           
  8058                           ;APDS9960.c: 303:         return 0;
  8059  0822  3000               	movlw	0
  8060  0823  0008               	return
  8061  0824                     l7270:	
  8062                           
  8063                           ;APDS9960.c: 306:     return 1;
  8064  0824  3001               	movlw	1
  8065  0825  0008               	return
  8066  0826                     __end_of_setGestureEnterThresh:	
  8067                           
  8068                           	psect	text13
  8069  097F                     __ptext13:	
  8070 ;; *************** function _setAmbientLightGain *****************
  8071 ;; Defined at:
  8072 ;;		line 213 in file "APDS9960.c"
  8073 ;; Parameters:    Size  Location     Type
  8074 ;;  drive           1    wreg     unsigned char 
  8075 ;; Auto vars:     Size  Location     Type
  8076 ;;  drive           1   11[BANK0 ] unsigned char 
  8077 ;;  val             1   12[BANK0 ] unsigned char 
  8078 ;; Return value:  Size  Location     Type
  8079 ;;                  1    wreg      _Bool 
  8080 ;; Registers used:
  8081 ;;		wreg, status,2, status,0, pclath, cstack
  8082 ;; Tracked objects:
  8083 ;;		On entry : 0/0
  8084 ;;		On exit  : 0/0
  8085 ;;		Unchanged: 0/0
  8086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8087 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8088 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8089 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8090 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8091 ;;Total ram usage:        3 bytes
  8092 ;; Hardware stack levels used:    1
  8093 ;; Hardware stack levels required when called:    8
  8094 ;; This function calls:
  8095 ;;		_wireReadDataByte
  8096 ;;		_wireWriteDataByte
  8097 ;; This function is called by:
  8098 ;;		_initialize
  8099 ;; This function uses a non-reentrant model
  8100 ;;
  8101                           
  8102                           
  8103                           ;psect for function _setAmbientLightGain
  8104  097F                     _setAmbientLightGain:	
  8105                           
  8106                           ;incstack = 0
  8107                           ; Regs used in _setAmbientLightGain: [wreg+status,2+status,0+pclath+cstack]
  8108                           ;setAmbientLightGain@drive stored from wreg
  8109  097F  0020               	movlb	0	; select bank0
  8110  0980  00AB               	movwf	setAmbientLightGain@drive
  8111                           
  8112                           ;APDS9960.c: 213: _Bool setAmbientLightGain(uint8_t drive);APDS9960.c: 214: {;APDS9960.c
      +                          : 215:     uint8_t val;;APDS9960.c: 218:     val= wireReadDataByte(0x8F);
  8113  0981  308F               	movlw	143
  8114  0982  3189  219D  3189   	fcall	_wireReadDataByte
  8115  0985  0020               	movlb	0	; select bank0
  8116  0986  00AA               	movwf	??_setAmbientLightGain
  8117  0987  082A               	movf	??_setAmbientLightGain,w
  8118  0988  00AC               	movwf	setAmbientLightGain@val
  8119                           
  8120                           ;APDS9960.c: 221:     drive &= 0b00000011;
  8121  0989  3003               	movlw	3
  8122  098A  00AA               	movwf	??_setAmbientLightGain
  8123  098B  082A               	movf	??_setAmbientLightGain,w
  8124  098C  05AB               	andwf	setAmbientLightGain@drive,f
  8125                           
  8126                           ;APDS9960.c: 222:     val &= 0b11111100;
  8127  098D  30FC               	movlw	252
  8128  098E  00AA               	movwf	??_setAmbientLightGain
  8129  098F  082A               	movf	??_setAmbientLightGain,w
  8130  0990  05AC               	andwf	setAmbientLightGain@val,f
  8131                           
  8132                           ;APDS9960.c: 223:     val |= drive;
  8133  0991  082B               	movf	setAmbientLightGain@drive,w
  8134  0992  00AA               	movwf	??_setAmbientLightGain
  8135  0993  082A               	movf	??_setAmbientLightGain,w
  8136  0994  04AC               	iorwf	setAmbientLightGain@val,f
  8137                           
  8138                           ;APDS9960.c: 226:     if( !wireWriteDataByte(0x8F, val) ) {
  8139  0995  082C               	movf	setAmbientLightGain@val,w
  8140  0996  00AA               	movwf	??_setAmbientLightGain
  8141  0997  082A               	movf	??_setAmbientLightGain,w
  8142  0998  00A6               	movwf	wireWriteDataByte@val
  8143  0999  308F               	movlw	143
  8144  099A  3188  20F0         	fcall	_wireWriteDataByte
  8145  099C  0008               	return
  8146  099D                     __end_of_setAmbientLightGain:	
  8147                           
  8148                           	psect	text14
  8149  1795                     __ptext14:	
  8150 ;; *************** function _i2c1_driver_open *****************
  8151 ;; Defined at:
  8152 ;;		line 83 in file "mcc_generated_files/i2c1_driver.c"
  8153 ;; Parameters:    Size  Location     Type
  8154 ;;		None
  8155 ;; Auto vars:     Size  Location     Type
  8156 ;;		None
  8157 ;; Return value:  Size  Location     Type
  8158 ;;		None               void
  8159 ;; Registers used:
  8160 ;;		wreg, status,2
  8161 ;; Tracked objects:
  8162 ;;		On entry : 0/0
  8163 ;;		On exit  : 0/0
  8164 ;;		Unchanged: 0/0
  8165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8166 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8167 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8168 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8169 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8170 ;;Total ram usage:        0 bytes
  8171 ;; Hardware stack levels used:    1
  8172 ;; Hardware stack levels required when called:    5
  8173 ;; This function calls:
  8174 ;;		Nothing
  8175 ;; This function is called by:
  8176 ;;		_initialize
  8177 ;;		_i2c_open
  8178 ;;		_InitI2C
  8179 ;; This function uses a non-reentrant model
  8180 ;;
  8181                           
  8182                           
  8183                           ;psect for function _i2c1_driver_open
  8184  1795                     _i2c1_driver_open:	
  8185                           
  8186                           ;incstack = 0
  8187                           ; Regs used in _i2c1_driver_open: [wreg+status,2]
  8188  1795  0024               	movlb	4	; select bank4
  8189  1796  1A95               	btfsc	21,5	;volatile
  8190  1797  0008               	return
  8191  1798  0194               	clrf	20	;volatile
  8192  1799  3028               	movlw	40
  8193  179A  0095               	movwf	21	;volatile
  8194  179B  0196               	clrf	22	;volatile
  8195  179C  3003               	movlw	3
  8196  179D  0092               	movwf	18	;volatile
  8197  179E  0008               	return
  8198  179F                     __end_of_i2c1_driver_open:	
  8199                           
  8200                           	psect	text15
  8201  0F79                     __ptext15:	
  8202 ;; *************** function _handleGesture *****************
  8203 ;; Defined at:
  8204 ;;		line 432 in file "main.c"
  8205 ;; Parameters:    Size  Location     Type
  8206 ;;		None
  8207 ;; Auto vars:     Size  Location     Type
  8208 ;;		None
  8209 ;; Return value:  Size  Location     Type
  8210 ;;                  1    wreg      void 
  8211 ;; Registers used:
  8212 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8213 ;; Tracked objects:
  8214 ;;		On entry : 0/0
  8215 ;;		On exit  : 0/0
  8216 ;;		Unchanged: 0/0
  8217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8219 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8220 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8221 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8222 ;;Total ram usage:        1 bytes
  8223 ;; Hardware stack levels used:    1
  8224 ;; Hardware stack levels required when called:   10
  8225 ;; This function calls:
  8226 ;;		_Display_Name
  8227 ;;		_Noise
  8228 ;;		_readGesture
  8229 ;; This function is called by:
  8230 ;;		_main
  8231 ;; This function uses a non-reentrant model
  8232 ;;
  8233                           
  8234                           
  8235                           ;psect for function _handleGesture
  8236  0F79                     _handleGesture:	
  8237                           
  8238                           ;main.c: 433:     switch(readGesture()) {
  8239                           
  8240                           ;incstack = 0
  8241                           ; Regs used in _handleGesture: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8242  0F79  2FE0               	goto	l7800
  8243  0F7A                     l7758:	
  8244                           
  8245                           ;main.c: 435:             Noise();
  8246  0F7A  3188  208F  318F   	fcall	_Noise
  8247                           
  8248                           ;main.c: 436:             brightness++;
  8249  0F7D  3001               	movlw	1
  8250  0F7E  0020               	movlb	0	; select bank0
  8251  0F7F  07DE               	addwf	_brightness,f
  8252  0F80  3000               	movlw	0
  8253  0F81  3DDF               	addwfc	_brightness+1,f
  8254                           
  8255                           ;main.c: 437:             if(brightness > 7) {
  8256  0F82  085F               	movf	_brightness+1,w
  8257  0F83  3A80               	xorlw	128
  8258  0F84  00DB               	movwf	??_handleGesture
  8259  0F85  3080               	movlw	128
  8260  0F86  025B               	subwf	??_handleGesture,w
  8261  0F87  3008               	movlw	8
  8262  0F88  1903               	btfsc	3,2
  8263  0F89  025E               	subwf	_brightness,w
  8264  0F8A  1C03               	skipc
  8265  0F8B  2FFD               	goto	l7802
  8266                           
  8267                           ;main.c: 438:                 brightness = 7;
  8268  0F8C  3007               	movlw	7
  8269  0F8D  0020               	movlb	0	; select bank0
  8270  0F8E  00DE               	movwf	_brightness
  8271  0F8F  3000               	movlw	0
  8272  0F90  00DF               	movwf	_brightness+1
  8273  0F91  2FFD               	goto	l7802
  8274  0F92                     l7766:	
  8275                           
  8276                           ;main.c: 443:             Noise();
  8277  0F92  3188  208F  318F   	fcall	_Noise
  8278                           
  8279                           ;main.c: 444:             --brightness;
  8280  0F95  30FF               	movlw	255
  8281  0F96  0020               	movlb	0	; select bank0
  8282  0F97  07DE               	addwf	_brightness,f
  8283  0F98  30FF               	movlw	255
  8284  0F99  3DDF               	addwfc	_brightness+1,f
  8285                           
  8286                           ;main.c: 445:             if(brightness < 0) {
  8287  0F9A  1FDF               	btfss	_brightness+1,7
  8288  0F9B  2FFD               	goto	l7802
  8289                           
  8290                           ;main.c: 446:                 brightness = 0;
  8291  0F9C  01DE               	clrf	_brightness
  8292  0F9D  01DF               	clrf	_brightness+1
  8293  0F9E  2FFD               	goto	l7802
  8294  0F9F                     l7774:	
  8295                           
  8296                           ;main.c: 451:             Noise();
  8297  0F9F  3188  208F  318F   	fcall	_Noise
  8298                           
  8299                           ;main.c: 452:             printed = 0;
  8300  0FA2  0020               	movlb	0	; select bank0
  8301  0FA3  01ED               	clrf	_printed
  8302                           
  8303                           ;main.c: 455:             name++;
  8304  0FA4  3001               	movlw	1
  8305  0FA5  07E0               	addwf	_name,f
  8306  0FA6  3000               	movlw	0
  8307  0FA7  3DE1               	addwfc	_name+1,f
  8308                           
  8309                           ;main.c: 456:             if(name > 3) {
  8310  0FA8  0861               	movf	_name+1,w
  8311  0FA9  3A80               	xorlw	128
  8312  0FAA  00DB               	movwf	??_handleGesture
  8313  0FAB  3080               	movlw	128
  8314  0FAC  025B               	subwf	??_handleGesture,w
  8315  0FAD  1D03               	skipz
  8316  0FAE  2FB1               	goto	u6915
  8317  0FAF  3004               	movlw	4
  8318  0FB0  0260               	subwf	_name,w
  8319  0FB1                     u6915:	
  8320  0FB1  1C03               	skipc
  8321  0FB2  2FB6               	goto	l7784
  8322                           
  8323                           ;main.c: 457:                 name = 0;
  8324  0FB3  0020               	movlb	0	; select bank0
  8325  0FB4  01E0               	clrf	_name
  8326  0FB5  01E1               	clrf	_name+1
  8327  0FB6                     l7784:	
  8328                           
  8329                           ;main.c: 459:             Display_Name(names[name]);
  8330  0FB6  0020               	movlb	0	; select bank0
  8331  0FB7  3560               	lslf	_name,w
  8332  0FB8  3E60               	addlw	(low (_names| (0+256)))& (0+255)
  8333  0FB9  0086               	movwf	6
  8334  0FBA  3001               	movlw	1	; select bank2/3
  8335  0FBB  0087               	movwf	7
  8336  0FBC  3F40               	moviw [0]fsr1
  8337  0FBD  00A5               	movwf	Display_Name@string1
  8338  0FBE  3F41               	moviw [1]fsr1
  8339  0FBF  00A6               	movwf	Display_Name@string1+1
  8340  0FC0  318C  2428  318F   	fcall	_Display_Name
  8341                           
  8342                           ;main.c: 460:             break;
  8343  0FC3  2FFD               	goto	l7802
  8344  0FC4                     l7786:	
  8345                           
  8346                           ;main.c: 462:             Noise();
  8347  0FC4  3188  208F  318F   	fcall	_Noise
  8348                           
  8349                           ;main.c: 463:             printed = 0;
  8350  0FC7  0020               	movlb	0	; select bank0
  8351  0FC8  01ED               	clrf	_printed
  8352                           
  8353                           ;main.c: 464:             --name;
  8354  0FC9  30FF               	movlw	255
  8355  0FCA  07E0               	addwf	_name,f
  8356  0FCB  30FF               	movlw	255
  8357  0FCC  3DE1               	addwfc	_name+1,f
  8358                           
  8359                           ;main.c: 465:             if(name < 0) {
  8360  0FCD  1FE1               	btfss	_name+1,7
  8361  0FCE  2FD3               	goto	l7796
  8362                           
  8363                           ;main.c: 466:                 name = 3;
  8364  0FCF  3003               	movlw	3
  8365  0FD0  00E0               	movwf	_name
  8366  0FD1  3000               	movlw	0
  8367  0FD2  00E1               	movwf	_name+1
  8368  0FD3                     l7796:	
  8369                           
  8370                           ;main.c: 468:             Display_Name(names[name]);
  8371  0FD3  3560               	lslf	_name,w
  8372  0FD4  3E60               	addlw	(low (_names| (0+256)))& (0+255)
  8373  0FD5  0086               	movwf	6
  8374  0FD6  3001               	movlw	1	; select bank2/3
  8375  0FD7  0087               	movwf	7
  8376  0FD8  3F40               	moviw [0]fsr1
  8377  0FD9  00A5               	movwf	Display_Name@string1
  8378  0FDA  3F41               	moviw [1]fsr1
  8379  0FDB  00A6               	movwf	Display_Name@string1+1
  8380  0FDC  318C  2428  318F   	fcall	_Display_Name
  8381                           
  8382                           ;main.c: 469:             break;
  8383  0FDF  2FFD               	goto	l7802
  8384  0FE0                     l7800:	
  8385  0FE0  3186  26FA  318F   	fcall	_readGesture
  8386                           
  8387                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8388                           ; Switch size 1, requested type "simple"
  8389                           ; Number of cases is 1, Range of values is 0 to 0
  8390                           ; switch strategies available:
  8391                           ; Name         Instructions Cycles
  8392                           ; simple_byte            4     3 (average)
  8393                           ; direct_byte            8     6 (fixed)
  8394                           ; jumptable            260     6 (fixed)
  8395                           ;	Chosen strategy is simple_byte
  8396  0FE3  0020               	movlb	0	; select bank0
  8397  0FE4  0850               	movf	?_readGesture+1,w
  8398  0FE5  3A00               	xorlw	0	; case 0
  8399  0FE6  1903               	skipnz
  8400  0FE7  2FE9               	goto	l8074
  8401  0FE8  2FFD               	goto	l7802
  8402  0FE9                     l8074:	
  8403                           
  8404                           ; Switch size 1, requested type "simple"
  8405                           ; Number of cases is 6, Range of values is 1 to 6
  8406                           ; switch strategies available:
  8407                           ; Name         Instructions Cycles
  8408                           ; simple_byte           19    10 (average)
  8409                           ; direct_byte           21     9 (fixed)
  8410                           ; jumptable            263     9 (fixed)
  8411                           ;	Chosen strategy is simple_byte
  8412  0FE9  084F               	movf	?_readGesture,w
  8413  0FEA  3A01               	xorlw	1	; case 1
  8414  0FEB  1903               	skipnz
  8415  0FEC  2F9F               	goto	l7774
  8416  0FED  3A03               	xorlw	3	; case 2
  8417  0FEE  1903               	skipnz
  8418  0FEF  2FC4               	goto	l7786
  8419  0FF0  3A01               	xorlw	1	; case 3
  8420  0FF1  1903               	skipnz
  8421  0FF2  2F7A               	goto	l7758
  8422  0FF3  3A07               	xorlw	7	; case 4
  8423  0FF4  1903               	skipnz
  8424  0FF5  2F92               	goto	l7766
  8425  0FF6  3A01               	xorlw	1	; case 5
  8426  0FF7  1903               	skipnz
  8427  0FF8  2FFD               	goto	l7802
  8428  0FF9  3A03               	xorlw	3	; case 6
  8429  0FFA  1903               	skipnz
  8430  0FFB  2FFD               	goto	l7802
  8431  0FFC  2FFD               	goto	l7802
  8432  0FFD                     l7802:	
  8433                           
  8434                           ;main.c: 480:     printed = 0;
  8435  0FFD  0020               	movlb	0	; select bank0
  8436  0FFE  01ED               	clrf	_printed
  8437  0FFF  0008               	return
  8438  1000                     __end_of_handleGesture:	
  8439                           
  8440                           	psect	text16
  8441  06FA                     __ptext16:	
  8442 ;; *************** function _readGesture *****************
  8443 ;; Defined at:
  8444 ;;		line 556 in file "APDS9960.c"
  8445 ;; Parameters:    Size  Location     Type
  8446 ;;		None
  8447 ;; Auto vars:     Size  Location     Type
  8448 ;;  fifo_data      64    0[BANK2 ] unsigned char [64]
  8449 ;;  fifo_data2     64    0[BANK1 ] unsigned char [64]
  8450 ;;  i               2   57[BANK0 ] int 
  8451 ;;  bytes_read      2   54[BANK0 ] int 
  8452 ;;  motion          2   51[BANK0 ] int 
  8453 ;;  fifo_level      1   56[BANK0 ] unsigned char 
  8454 ;;  gstatus         1   53[BANK0 ] unsigned char 
  8455 ;; Return value:  Size  Location     Type
  8456 ;;                  2   47[BANK0 ] int 
  8457 ;; Registers used:
  8458 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8459 ;; Tracked objects:
  8460 ;;		On entry : 0/0
  8461 ;;		On exit  : 0/0
  8462 ;;		Unchanged: 0/0
  8463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8464 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8465 ;;      Locals:         0       8      64      64       0       0       0       0       0       0       0       0       
      +0       0
  8466 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8467 ;;      Totals:         0      12      64      64       0       0       0       0       0       0       0       0       
      +0       0
  8468 ;;Total ram usage:      140 bytes
  8469 ;; Hardware stack levels used:    1
  8470 ;; Hardware stack levels required when called:    9
  8471 ;; This function calls:
  8472 ;;		_decodeGesture
  8473 ;;		_getMode
  8474 ;;		_isGestureAvailable
  8475 ;;		_processGestureData
  8476 ;;		_resetGestureParameters
  8477 ;;		_wireReadDataBlock
  8478 ;;		_wireReadDataByte
  8479 ;; This function is called by:
  8480 ;;		_handleGesture
  8481 ;; This function uses a non-reentrant model
  8482 ;;
  8483                           
  8484                           
  8485                           ;psect for function _readGesture
  8486  06FA                     _readGesture:	
  8487                           
  8488                           ;APDS9960.c: 559:     int bytes_read = 0;
  8489                           
  8490                           ;incstack = 0
  8491                           ; Regs used in _readGesture: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8492  06FA  0020               	movlb	0	; select bank0
  8493  06FB  01D6               	clrf	readGesture@bytes_read
  8494  06FC  01D7               	clrf	readGesture@bytes_read+1
  8495                           
  8496                           ;APDS9960.c: 560:     uint8_t fifo_data[64];;APDS9960.c: 561:     uint8_t fifo_data2[64]
      +                          ;;APDS9960.c: 562:     uint8_t gstatus;;APDS9960.c: 563:     int motion;;APDS9960.c: 564
      +                          :     int i;;APDS9960.c: 567:     if( !isGestureAvailable() || !(getMode() & 0b01000001)
      +                           ) {
  8497  06FD  3188  2000  3186   	fcall	_isGestureAvailable
  8498  0700  3A00               	xorlw	0
  8499  0701  1903               	skipnz
  8500  0702  2F09               	goto	l7112
  8501  0703  3197  278C  3186   	fcall	_getMode
  8502  0706  3941               	andlw	65
  8503  0707  1D03               	btfss	3,2
  8504  0708  2FBE               	goto	l7116
  8505  0709                     l7112:	
  8506                           
  8507                           ;APDS9960.c: 568:         return DIR_NONE;
  8508  0709  0020               	movlb	0	; select bank0
  8509  070A  01CF               	clrf	?_readGesture
  8510  070B  01D0               	clrf	?_readGesture+1
  8511  070C  0008               	return
  8512  070D                     l7122:	
  8513                           ;APDS9960.c: 569:     }
  8514                           
  8515                           
  8516                           ;APDS9960.c: 584:         {;APDS9960.c: 586:          fifo_level= wireReadDataByte(0xAE)
      +                          ;
  8517  070D  30AE               	movlw	174
  8518  070E  3189  219D  3186   	fcall	_wireReadDataByte
  8519  0711  0020               	movlb	0	; select bank0
  8520  0712  00D1               	movwf	??_readGesture
  8521  0713  0851               	movf	??_readGesture,w
  8522  0714  00D8               	movwf	readGesture@fifo_level
  8523                           
  8524                           ;APDS9960.c: 590:             if( fifo_level > 0) {
  8525  0715  0858               	movf	readGesture@fifo_level,w
  8526  0716  1903               	btfsc	3,2
  8527  0717  2FBE               	goto	l7116
  8528                           
  8529                           ;APDS9960.c: 592:               if(fifo_level < 17)
  8530  0718  3011               	movlw	17
  8531  0719  0258               	subwf	readGesture@fifo_level,w
  8532  071A  1803               	skipnc
  8533  071B  2F20               	goto	l7130
  8534                           
  8535                           ;APDS9960.c: 593:               {;APDS9960.c: 594:                 bytes_read = wireRead
      +                          DataBlock( 0xFC,
  8536  071C  3020               	movlw	low readGesture@fifo_data
  8537  071D  00A6               	movwf	wireReadDataBlock@val
  8538  071E  3001               	movlw	high readGesture@fifo_data
  8539  071F  2F23               	goto	L1
  8540  0720                     l7130:	
  8541                           ;APDS9960.c: 597:               } else
  8542                           
  8543                           
  8544                           ;APDS9960.c: 598:               {;APDS9960.c: 599:                 bytes_read = wireRead
      +                          DataBlock( 0xFC,
  8545  0720  30A0               	movlw	low readGesture@fifo_data2
  8546  0721  00A6               	movwf	wireReadDataBlock@val
  8547  0722  3000               	movlw	high readGesture@fifo_data2
  8548  0723                     L1:	
  8549  0723  00A7               	movwf	wireReadDataBlock@val+1
  8550  0724  0858               	movf	readGesture@fifo_level,w
  8551  0725  00D1               	movwf	??_readGesture
  8552  0726  01D2               	clrf	??_readGesture+1
  8553  0727  35D1               	lslf	??_readGesture,f
  8554  0728  0DD2               	rlf	??_readGesture+1,f
  8555  0729  35D1               	lslf	??_readGesture,f
  8556  072A  0DD2               	rlf	??_readGesture+1,f
  8557  072B  0851               	movf	??_readGesture,w
  8558  072C  00A8               	movwf	wireReadDataBlock@len
  8559  072D  0852               	movf	??_readGesture+1,w
  8560  072E  00A9               	movwf	wireReadDataBlock@len+1
  8561  072F  30FC               	movlw	252
  8562  0730  318D  257D  3186   	fcall	_wireReadDataBlock
  8563  0733  0020               	movlb	0	; select bank0
  8564  0734  0827               	movf	?_wireReadDataBlock+1,w
  8565  0735  00D7               	movwf	readGesture@bytes_read+1
  8566  0736  0826               	movf	?_wireReadDataBlock,w
  8567  0737  00D6               	movwf	readGesture@bytes_read
  8568                           
  8569                           ;APDS9960.c: 605:                 if( bytes_read == -1 )
  8570  0738  0A56               	incf	readGesture@bytes_read,w
  8571  0739  1D03               	skipz
  8572  073A  2F43               	goto	l7138
  8573  073B  0A57               	incf	readGesture@bytes_read+1,w
  8574  073C  1D03               	btfss	3,2
  8575  073D  2F43               	goto	l7138
  8576                           
  8577                           ;APDS9960.c: 606:                 {;APDS9960.c: 607:                     return 0xFF;
  8578  073E  30FF               	movlw	255
  8579  073F  00CF               	movwf	?_readGesture
  8580  0740  3000               	movlw	0
  8581  0741  00D0               	movwf	?_readGesture+1
  8582  0742  0008               	return
  8583  0743                     l7138:	
  8584                           
  8585                           ;APDS9960.c: 612:                 if( bytes_read >= 4 )
  8586  0743  0857               	movf	readGesture@bytes_read+1,w
  8587  0744  3A80               	xorlw	128
  8588  0745  00D1               	movwf	??_readGesture
  8589  0746  3080               	movlw	128
  8590  0747  0251               	subwf	??_readGesture,w
  8591  0748  1D03               	skipz
  8592  0749  2F4C               	goto	u6115
  8593  074A  3004               	movlw	4
  8594  074B  0256               	subwf	readGesture@bytes_read,w
  8595  074C                     u6115:	
  8596  074C  1C03               	skipc
  8597  074D  2FBE               	goto	l7116
  8598                           
  8599                           ;APDS9960.c: 613:                 {;APDS9960.c: 615:                     for( i = 0; i <
      +                           bytes_read; i += 4 ) {
  8600  074E  0020               	movlb	0	; select bank0
  8601  074F  01D9               	clrf	readGesture@i
  8602  0750  01DA               	clrf	readGesture@i+1
  8603  0751                     l7150:	
  8604  0751  085A               	movf	readGesture@i+1,w
  8605  0752  3A80               	xorlw	128
  8606  0753  00D1               	movwf	??_readGesture
  8607  0754  0857               	movf	readGesture@bytes_read+1,w
  8608  0755  3A80               	xorlw	128
  8609  0756  0251               	subwf	??_readGesture,w
  8610  0757  1D03               	skipz
  8611  0758  2F5B               	goto	u6125
  8612  0759  0856               	movf	readGesture@bytes_read,w
  8613  075A  0259               	subwf	readGesture@i,w
  8614  075B                     u6125:	
  8615  075B  1803               	btfsc	3,0
  8616  075C  2FB2               	goto	l7152
  8617                           
  8618                           ;APDS9960.c: 616:                         gesture_data_.u_data[gesture_data_.index] = fi
      +                          fo_data[i + 0];
  8619  075D  0020               	movlb	0	; select bank0
  8620  075E  0859               	movf	readGesture@i,w
  8621  075F  3E20               	addlw	(low (readGesture@fifo_data| (0+256)))& (0+255)
  8622  0760  0086               	movwf	6
  8623  0761  3001               	movlw	1	; select bank2/3
  8624  0762  0087               	movwf	7
  8625  0763  0801               	movf	1,w
  8626  0764  00D1               	movwf	??_readGesture
  8627  0765  0024               	movlb	4	; select bank4
  8628  0766  0860               	movf	(_gesture_data_^(0+512)+64),w
  8629  0767  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  8630  0768  0086               	movwf	6
  8631  0769  3002               	movlw	2	; select bank4/5
  8632  076A  0087               	movwf	7
  8633  076B  0020               	movlb	0	; select bank0
  8634  076C  0851               	movf	??_readGesture,w
  8635  076D  0081               	movwf	1
  8636                           
  8637                           ;APDS9960.c: 618:                         gesture_data_.d_data[gesture_data_.index] = fi
      +                          fo_data[i + 1];
  8638  076E  0859               	movf	readGesture@i,w
  8639  076F  3E01               	addlw	1
  8640  0770  3E20               	addlw	(low (readGesture@fifo_data| (0+256)))& (0+255)
  8641  0771  0086               	movwf	6
  8642  0772  3001               	movlw	1	; select bank2/3
  8643  0773  0087               	movwf	7
  8644  0774  0801               	movf	1,w
  8645  0775  00D1               	movwf	??_readGesture
  8646  0776  0024               	movlb	4	; select bank4
  8647  0777  0860               	movf	(_gesture_data_^(0+512)+64),w
  8648  0778  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  8649  0779  0086               	movwf	6
  8650  077A  3002               	movlw	2	; select bank4/5
  8651  077B  0087               	movwf	7
  8652  077C  0020               	movlb	0	; select bank0
  8653  077D  0851               	movf	??_readGesture,w
  8654  077E  0081               	movwf	1
  8655                           
  8656                           ;APDS9960.c: 620:                         gesture_data_.l_data[gesture_data_.index] = fi
      +                          fo_data[i + 2];
  8657  077F  0859               	movf	readGesture@i,w
  8658  0780  3E02               	addlw	2
  8659  0781  3E20               	addlw	(low (readGesture@fifo_data| (0+256)))& (0+255)
  8660  0782  0086               	movwf	6
  8661  0783  3001               	movlw	1	; select bank2/3
  8662  0784  0087               	movwf	7
  8663  0785  0801               	movf	1,w
  8664  0786  00D1               	movwf	??_readGesture
  8665  0787  0024               	movlb	4	; select bank4
  8666  0788  0860               	movf	(_gesture_data_^(0+512)+64),w
  8667  0789  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  8668  078A  0086               	movwf	6
  8669  078B  3002               	movlw	2	; select bank4/5
  8670  078C  0087               	movwf	7
  8671  078D  0020               	movlb	0	; select bank0
  8672  078E  0851               	movf	??_readGesture,w
  8673  078F  0081               	movwf	1
  8674                           
  8675                           ;APDS9960.c: 622:                         gesture_data_.r_data[gesture_data_.index] = fi
      +                          fo_data[i + 3];
  8676  0790  0859               	movf	readGesture@i,w
  8677  0791  3E03               	addlw	3
  8678  0792  3E20               	addlw	(low (readGesture@fifo_data| (0+256)))& (0+255)
  8679  0793  0086               	movwf	6
  8680  0794  3001               	movlw	1	; select bank2/3
  8681  0795  0087               	movwf	7
  8682  0796  0801               	movf	1,w
  8683  0797  00D1               	movwf	??_readGesture
  8684  0798  0024               	movlb	4	; select bank4
  8685  0799  0860               	movf	(_gesture_data_^(0+512)+64),w
  8686  079A  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  8687  079B  0086               	movwf	6
  8688  079C  3002               	movlw	2	; select bank4/5
  8689  079D  0087               	movwf	7
  8690  079E  0020               	movlb	0	; select bank0
  8691  079F  0851               	movf	??_readGesture,w
  8692  07A0  0081               	movwf	1
  8693                           
  8694                           ;APDS9960.c: 624:                         gesture_data_.index++;
  8695  07A1  3001               	movlw	1
  8696  07A2  00D1               	movwf	??_readGesture
  8697  07A3  0851               	movf	??_readGesture,w
  8698  07A4  0024               	movlb	4	; select bank4
  8699  07A5  07E0               	addwf	(_gesture_data_^(0+512)+64),f
  8700                           
  8701                           ;APDS9960.c: 625:                         gesture_data_.total_gestures++;
  8702  07A6  3001               	movlw	1
  8703  07A7  0020               	movlb	0	; select bank0
  8704  07A8  00D1               	movwf	??_readGesture
  8705  07A9  0851               	movf	??_readGesture,w
  8706  07AA  0024               	movlb	4	; select bank4
  8707  07AB  07E1               	addwf	(_gesture_data_^(0+512)+65),f
  8708                           
  8709                           ;APDS9960.c: 626:                     }
  8710  07AC  3004               	movlw	4
  8711  07AD  0020               	movlb	0	; select bank0
  8712  07AE  07D9               	addwf	readGesture@i,f
  8713  07AF  3000               	movlw	0
  8714  07B0  3DDA               	addwfc	readGesture@i+1,f
  8715  07B1  2F51               	goto	l7150
  8716  07B2                     l7152:	
  8717                           
  8718                           ;APDS9960.c: 629:                     if( processGestureData() )
  8719  07B2  3180  2085  3186   	fcall	_processGestureData
  8720  07B5  3A00               	xorlw	0
  8721  07B6  1903               	skipnz
  8722  07B7  2FBB               	goto	l7156
  8723                           
  8724                           ;APDS9960.c: 630:                     {;APDS9960.c: 632:                         if( dec
      +                          odeGesture() ) {
  8725  07B8  3183  235C  3186   	fcall	_decodeGesture
  8726  07BB                     l7156:	
  8727                           
  8728                           ;APDS9960.c: 638:                     gesture_data_.index = 0;
  8729  07BB  0024               	movlb	4	; select bank4
  8730  07BC  01E0               	clrf	(_gesture_data_^(0+512)+64)
  8731                           
  8732                           ;APDS9960.c: 639:                     gesture_data_.total_gestures = 0;
  8733  07BD  01E1               	clrf	(_gesture_data_^(0+512)+65)
  8734  07BE                     l7116:	
  8735                           
  8736                           ;APDS9960.c: 575:         _delay((unsigned long)((30)*(500000/4000.0)));
  8737  07BE  3005               	movlw	5
  8738  07BF  0020               	movlb	0	; select bank0
  8739  07C0  00D1               	movwf	??_readGesture
  8740  07C1  30DD               	movlw	221
  8741  07C2                     u7097:	
  8742  07C2  0B89               	decfsz	9,f
  8743  07C3  2FC2               	goto	u7097
  8744  07C4  0BD1               	decfsz	??_readGesture,f
  8745  07C5  2FC2               	goto	u7097
  8746  07C6  3200               	nop2
  8747                           
  8748                           ;APDS9960.c: 578:         gstatus = wireReadDataByte(0xAF);
  8749  07C7  30AF               	movlw	175
  8750  07C8  3189  219D  3186   	fcall	_wireReadDataByte
  8751  07CB  0020               	movlb	0	; select bank0
  8752  07CC  00D1               	movwf	??_readGesture
  8753  07CD  0851               	movf	??_readGesture,w
  8754  07CE  00D5               	movwf	readGesture@gstatus
  8755                           
  8756                           ;APDS9960.c: 583:         if( (gstatus & 0b00000001) == 0b00000001 )
  8757  07CF  1855               	btfsc	readGesture@gstatus,0
  8758  07D0  2F0D               	goto	l7122
  8759                           
  8760                           ;APDS9960.c: 645:             _delay((unsigned long)((30)*(500000/4000.0)));
  8761  07D1  3005               	movlw	5
  8762  07D2  0020               	movlb	0	; select bank0
  8763  07D3  00D1               	movwf	??_readGesture
  8764  07D4  30DD               	movlw	221
  8765  07D5                     u7107:	
  8766  07D5  0B89               	decfsz	9,f
  8767  07D6  2FD5               	goto	u7107
  8768  07D7  0BD1               	decfsz	??_readGesture,f
  8769  07D8  2FD5               	goto	u7107
  8770  07D9  3200               	nop2
  8771                           
  8772                           ;APDS9960.c: 646:             decodeGesture();
  8773  07DA  3183  235C  3186   	fcall	_decodeGesture
  8774                           
  8775                           ;APDS9960.c: 647:             motion = gesture_motion_;
  8776  07DD  0022               	movlb	2	; select bank2
  8777  07DE  086F               	movf	(_gesture_motion_+1)^(0+256),w
  8778  07DF  0020               	movlb	0	; select bank0
  8779  07E0  00D4               	movwf	readGesture@motion+1
  8780  07E1  0022               	movlb	2	; select bank2
  8781  07E2  086E               	movf	_gesture_motion_^(0+256),w
  8782  07E3  0020               	movlb	0	; select bank0
  8783  07E4  00D3               	movwf	readGesture@motion
  8784                           
  8785                           ;APDS9960.c: 649:             resetGestureParameters();
  8786  07E5  3188  20A6         	fcall	_resetGestureParameters
  8787                           
  8788                           ;APDS9960.c: 651:             return motion;
  8789  07E7  0020               	movlb	0	; select bank0
  8790  07E8  0854               	movf	readGesture@motion+1,w
  8791  07E9  00D0               	movwf	?_readGesture+1
  8792  07EA  0853               	movf	readGesture@motion,w
  8793  07EB  00CF               	movwf	?_readGesture
  8794  07EC  0008               	return
  8795  07ED                     __end_of_readGesture:	
  8796                           
  8797                           	psect	text17
  8798  0D7D                     __ptext17:	
  8799 ;; *************** function _wireReadDataBlock *****************
  8800 ;; Defined at:
  8801 ;;		line 847 in file "APDS9960.c"
  8802 ;; Parameters:    Size  Location     Type
  8803 ;;  reg             1    wreg     unsigned char 
  8804 ;;  val             2    6[BANK0 ] PTR unsigned char 
  8805 ;;		 -> readGesture@fifo_data2(64), readGesture@fifo_data(64), 
  8806 ;;  len             2    8[BANK0 ] unsigned int 
  8807 ;; Auto vars:     Size  Location     Type
  8808 ;;  reg             1   15[BANK0 ] unsigned char 
  8809 ;;  j               1   16[BANK0 ] unsigned char 
  8810 ;; Return value:  Size  Location     Type
  8811 ;;                  2    6[BANK0 ] int 
  8812 ;; Registers used:
  8813 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8814 ;; Tracked objects:
  8815 ;;		On entry : 0/0
  8816 ;;		On exit  : 0/0
  8817 ;;		Unchanged: 0/0
  8818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8819 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8820 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8821 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8822 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8823 ;;Total ram usage:       11 bytes
  8824 ;; Hardware stack levels used:    1
  8825 ;; Hardware stack levels required when called:    7
  8826 ;; This function calls:
  8827 ;;		_I2C_ReStart
  8828 ;;		_I2C_Read_Byte
  8829 ;;		_I2C_Send_NACK
  8830 ;;		_I2C_Start
  8831 ;;		_I2C_Stop
  8832 ;;		_I2C_Write_Byte
  8833 ;; This function is called by:
  8834 ;;		_readGesture
  8835 ;; This function uses a non-reentrant model
  8836 ;;
  8837                           
  8838                           
  8839                           ;psect for function _wireReadDataBlock
  8840  0D7D                     _wireReadDataBlock:	
  8841                           
  8842                           ;incstack = 0
  8843                           ; Regs used in _wireReadDataBlock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8844                           ;wireReadDataBlock@reg stored from wreg
  8845  0D7D  0020               	movlb	0	; select bank0
  8846  0D7E  00AF               	movwf	wireReadDataBlock@reg
  8847                           
  8848                           ;APDS9960.c: 851:     I2C_Start();
  8849  0D7F  3196  26A1  318D   	fcall	_I2C_Start
  8850                           
  8851                           ;APDS9960.c: 852:     I2C_Write_Byte((0x39 << 1 )| 0x00);
  8852  0D82  3072               	movlw	114
  8853  0D83  3189  210B  318D   	fcall	_I2C_Write_Byte
  8854                           
  8855                           ;APDS9960.c: 854:     I2C_Write_Byte(reg);
  8856  0D86  0020               	movlb	0	; select bank0
  8857  0D87  082F               	movf	wireReadDataBlock@reg,w
  8858  0D88  3189  210B  318D   	fcall	_I2C_Write_Byte
  8859                           
  8860                           ;APDS9960.c: 856:     for(j= 0; j < len ; j++)
  8861  0D8B  0020               	movlb	0	; select bank0
  8862  0D8C  01B0               	clrf	wireReadDataBlock@j
  8863  0D8D                     l6646:	
  8864  0D8D  0830               	movf	wireReadDataBlock@j,w
  8865  0D8E  00AA               	movwf	??_wireReadDataBlock
  8866  0D8F  01AB               	clrf	??_wireReadDataBlock+1
  8867  0D90  0829               	movf	wireReadDataBlock@len+1,w
  8868  0D91  022B               	subwf	??_wireReadDataBlock+1,w
  8869  0D92  1D03               	skipz
  8870  0D93  2D96               	goto	u5275
  8871  0D94  0828               	movf	wireReadDataBlock@len,w
  8872  0D95  022A               	subwf	??_wireReadDataBlock,w
  8873  0D96                     u5275:	
  8874  0D96  1803               	btfsc	3,0
  8875  0D97  2DBC               	goto	l6648
  8876                           
  8877                           ;APDS9960.c: 857:     {;APDS9960.c: 859:       I2C_ReStart();
  8878  0D98  3196  2692  318D   	fcall	_I2C_ReStart
  8879                           
  8880                           ;APDS9960.c: 860:       I2C_Write_Byte((0x39 << 1) | 0x01);
  8881  0D9B  3073               	movlw	115
  8882  0D9C  3189  210B  318D   	fcall	_I2C_Write_Byte
  8883                           
  8884                           ;APDS9960.c: 861:       val[j]=I2C_Read_Byte();
  8885  0D9F  3197  279F  318D   	fcall	_I2C_Read_Byte
  8886  0DA2  0020               	movlb	0	; select bank0
  8887  0DA3  00AA               	movwf	??_wireReadDataBlock
  8888  0DA4  0830               	movf	wireReadDataBlock@j,w
  8889  0DA5  00AB               	movwf	??_wireReadDataBlock+1
  8890  0DA6  01AC               	clrf	??_wireReadDataBlock+2
  8891  0DA7  082B               	movf	??_wireReadDataBlock+1,w
  8892  0DA8  0726               	addwf	wireReadDataBlock@val,w
  8893  0DA9  00AD               	movwf	??_wireReadDataBlock+3
  8894  0DAA  082C               	movf	??_wireReadDataBlock+2,w
  8895  0DAB  3D27               	addwfc	wireReadDataBlock@val+1,w
  8896  0DAC  00AE               	movwf	??_wireReadDataBlock+4
  8897  0DAD  082D               	movf	??_wireReadDataBlock+3,w
  8898  0DAE  0086               	movwf	6
  8899  0DAF  082E               	movf	??_wireReadDataBlock+4,w
  8900  0DB0  0087               	movwf	7
  8901  0DB1  082A               	movf	??_wireReadDataBlock,w
  8902  0DB2  0081               	movwf	1
  8903                           
  8904                           ;APDS9960.c: 862:       I2C_Send_NACK();
  8905  0DB3  3196  269B  318D   	fcall	_I2C_Send_NACK
  8906                           
  8907                           ;APDS9960.c: 864:     }
  8908  0DB6  3001               	movlw	1
  8909  0DB7  0020               	movlb	0	; select bank0
  8910  0DB8  00AA               	movwf	??_wireReadDataBlock
  8911  0DB9  082A               	movf	??_wireReadDataBlock,w
  8912  0DBA  07B0               	addwf	wireReadDataBlock@j,f
  8913  0DBB  2D8D               	goto	l6646
  8914  0DBC                     l6648:	
  8915                           
  8916                           ;APDS9960.c: 866:     I2C_Stop();
  8917  0DBC  3196  26A7         	fcall	_I2C_Stop
  8918                           
  8919                           ;APDS9960.c: 867:     return (int)j;
  8920  0DBE  0020               	movlb	0	; select bank0
  8921  0DBF  0830               	movf	wireReadDataBlock@j,w
  8922  0DC0  00AA               	movwf	??_wireReadDataBlock
  8923  0DC1  01AB               	clrf	??_wireReadDataBlock+1
  8924  0DC2  082A               	movf	??_wireReadDataBlock,w
  8925  0DC3  00A6               	movwf	?_wireReadDataBlock
  8926  0DC4  082B               	movf	??_wireReadDataBlock+1,w
  8927  0DC5  00A7               	movwf	?_wireReadDataBlock+1
  8928  0DC6  0008               	return
  8929  0DC7                     __end_of_wireReadDataBlock:	
  8930                           
  8931                           	psect	text18
  8932  0085                     __ptext18:	
  8933 ;; *************** function _processGestureData *****************
  8934 ;; Defined at:
  8935 ;;		line 657 in file "APDS9960.c"
  8936 ;; Parameters:    Size  Location     Type
  8937 ;;		None
  8938 ;; Auto vars:     Size  Location     Type
  8939 ;;  i               2   45[BANK0 ] int 
  8940 ;;  lr_delta        2   43[BANK0 ] int 
  8941 ;;  ud_delta        2   41[BANK0 ] int 
  8942 ;;  lr_ratio_las    2   23[BANK0 ] int 
  8943 ;;  ud_ratio_las    2   21[BANK0 ] int 
  8944 ;;  lr_ratio_fir    2   19[BANK0 ] int 
  8945 ;;  ud_ratio_fir    2   17[BANK0 ] int 
  8946 ;;  r_first         1   40[BANK0 ] unsigned char 
  8947 ;;  l_first         1   39[BANK0 ] unsigned char 
  8948 ;;  d_first         1   38[BANK0 ] unsigned char 
  8949 ;;  u_first         1   37[BANK0 ] unsigned char 
  8950 ;;  r_last          1   36[BANK0 ] unsigned char 
  8951 ;;  l_last          1   35[BANK0 ] unsigned char 
  8952 ;;  d_last          1   34[BANK0 ] unsigned char 
  8953 ;;  u_last          1   33[BANK0 ] unsigned char 
  8954 ;; Return value:  Size  Location     Type
  8955 ;;                  1    wreg      _Bool 
  8956 ;; Registers used:
  8957 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8958 ;; Tracked objects:
  8959 ;;		On entry : 0/0
  8960 ;;		On exit  : 0/0
  8961 ;;		Unchanged: 0/0
  8962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8963 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8964 ;;      Locals:         0      30       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8965 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8966 ;;      Totals:         0      32       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8967 ;;Total ram usage:       32 bytes
  8968 ;; Hardware stack levels used:    1
  8969 ;; Hardware stack levels required when called:    6
  8970 ;; This function calls:
  8971 ;;		___awdiv
  8972 ;;		___wmul
  8973 ;; This function is called by:
  8974 ;;		_readGesture
  8975 ;; This function uses a non-reentrant model
  8976 ;;
  8977                           
  8978                           
  8979                           ;psect for function _processGestureData
  8980  0085                     _processGestureData:	
  8981                           
  8982                           ;APDS9960.c: 659:     uint8_t u_first = 0;
  8983                           
  8984                           ;incstack = 0
  8985                           ; Regs used in _processGestureData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8986  0085  0020               	movlb	0	; select bank0
  8987  0086  01C5               	clrf	processGestureData@u_first
  8988                           
  8989                           ;APDS9960.c: 660:     uint8_t d_first = 0;
  8990  0087  01C6               	clrf	processGestureData@d_first
  8991                           
  8992                           ;APDS9960.c: 661:     uint8_t l_first = 0;
  8993  0088  01C7               	clrf	processGestureData@l_first
  8994                           
  8995                           ;APDS9960.c: 662:     uint8_t r_first = 0;
  8996  0089  01C8               	clrf	processGestureData@r_first
  8997                           
  8998                           ;APDS9960.c: 663:     uint8_t u_last = 0;
  8999  008A  01C1               	clrf	processGestureData@u_last
  9000                           
  9001                           ;APDS9960.c: 664:     uint8_t d_last = 0;
  9002  008B  01C2               	clrf	processGestureData@d_last
  9003                           
  9004                           ;APDS9960.c: 665:     uint8_t l_last = 0;
  9005  008C  01C3               	clrf	processGestureData@l_last
  9006                           
  9007                           ;APDS9960.c: 666:     uint8_t r_last = 0;
  9008  008D  01C4               	clrf	processGestureData@r_last
  9009                           
  9010                           ;APDS9960.c: 667:     int ud_ratio_first;;APDS9960.c: 668:     int lr_ratio_first;;APDS9
      +                          960.c: 669:     int ud_ratio_last;;APDS9960.c: 670:     int lr_ratio_last;;APDS9960.c: 6
      +                          71:     int ud_delta;;APDS9960.c: 672:     int lr_delta;;APDS9960.c: 673:     int i;;APD
      +                          S9960.c: 676:     if( gesture_data_.total_gestures <= 4 ) {
  9011  008E  3005               	movlw	5
  9012  008F  0024               	movlb	4	; select bank4
  9013  0090  0261               	subwf	(_gesture_data_^(0+512)+65),w
  9014  0091  1803               	skipnc
  9015  0092  2895               	goto	l6662
  9016  0093                     l6658:	
  9017                           
  9018                           ;APDS9960.c: 677:         return 0;
  9019  0093  3000               	movlw	0
  9020  0094  0008               	return
  9021  0095                     l6662:	
  9022                           
  9023                           ;APDS9960.c: 681:     if( (gesture_data_.total_gestures <= 32) && (gesture_data_.total_g
      +                          estures > 0) ) {
  9024  0095  3021               	movlw	33
  9025  0096  0261               	subwf	(_gesture_data_^(0+512)+65),w
  9026  0097  1803               	skipnc
  9027  0098  295F               	goto	l6712
  9028  0099  0861               	movf	(_gesture_data_^(0+512)+65),w
  9029  009A  1903               	btfsc	3,2
  9030  009B  295F               	goto	l6712
  9031                           
  9032                           ;APDS9960.c: 682: ;APDS9960.c: 685:         for( i = 0; i < gesture_data_.total_gestures
      +                          ; i++ ) {
  9033  009C  0020               	movlb	0	; select bank0
  9034  009D  01CD               	clrf	processGestureData@i
  9035  009E  01CE               	clrf	processGestureData@i+1
  9036  009F  28A4               	goto	l1121
  9037  00A0                     l6678:	
  9038                           ;APDS9960.c: 695:                 break;
  9039                           
  9040                           
  9041                           ;APDS9960.c: 697:         }
  9042  00A0  3001               	movlw	1
  9043  00A1  07CD               	addwf	processGestureData@i,f
  9044  00A2  3000               	movlw	0
  9045  00A3  3DCE               	addwfc	processGestureData@i+1,f
  9046  00A4                     l1121:	
  9047  00A4  084E               	movf	processGestureData@i+1,w
  9048  00A5  3A80               	xorlw	128
  9049  00A6  00AF               	movwf	??_processGestureData
  9050  00A7  3080               	movlw	128
  9051  00A8  022F               	subwf	??_processGestureData,w
  9052  00A9  1D03               	skipz
  9053  00AA  28AF               	goto	u5355
  9054  00AB  0024               	movlb	4	; select bank4
  9055  00AC  0861               	movf	(_gesture_data_^(0+512)+65),w
  9056  00AD  0020               	movlb	0	; select bank0
  9057  00AE  024D               	subwf	processGestureData@i,w
  9058  00AF                     u5355:	
  9059  00AF  1803               	btfsc	3,0
  9060  00B0  28FA               	goto	l6680
  9061                           
  9062                           ;APDS9960.c: 686:             if( (gesture_data_.u_data[i] > 10) &&
  9063  00B1  0020               	movlb	0	; select bank0
  9064  00B2  084D               	movf	processGestureData@i,w
  9065  00B3  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  9066  00B4  0086               	movwf	6
  9067  00B5  3002               	movlw	2	; select bank4/5
  9068  00B6  0087               	movwf	7
  9069  00B7  300B               	movlw	11
  9070  00B8  0201               	subwf	1,w
  9071  00B9  1C03               	skipc
  9072  00BA  28A0               	goto	l6678
  9073  00BB  084D               	movf	processGestureData@i,w
  9074  00BC  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  9075  00BD  0086               	movwf	6
  9076  00BE  3002               	movlw	2	; select bank4/5
  9077  00BF  0087               	movwf	7
  9078  00C0  300B               	movlw	11
  9079  00C1  0201               	subwf	1,w
  9080  00C2  1C03               	skipc
  9081  00C3  28A0               	goto	l6678
  9082  00C4  084D               	movf	processGestureData@i,w
  9083  00C5  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  9084  00C6  0086               	movwf	6
  9085  00C7  3002               	movlw	2	; select bank4/5
  9086  00C8  0087               	movwf	7
  9087  00C9  300B               	movlw	11
  9088  00CA  0201               	subwf	1,w
  9089  00CB  1C03               	skipc
  9090  00CC  28A0               	goto	l6678
  9091  00CD  084D               	movf	processGestureData@i,w
  9092  00CE  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  9093  00CF  0086               	movwf	6
  9094  00D0  3002               	movlw	2	; select bank4/5
  9095  00D1  0087               	movwf	7
  9096  00D2  300B               	movlw	11
  9097  00D3  0201               	subwf	1,w
  9098  00D4  1C03               	skipc
  9099  00D5  28A0               	goto	l6678
  9100                           
  9101                           ;APDS9960.c: 689:                 (gesture_data_.r_data[i] > 10) ) {;APDS9960.c: 691:   
      +                                        u_first = gesture_data_.u_data[i];
  9102  00D6  084D               	movf	processGestureData@i,w
  9103  00D7  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  9104  00D8  0086               	movwf	6
  9105  00D9  3002               	movlw	2	; select bank4/5
  9106  00DA  0087               	movwf	7
  9107  00DB  0801               	movf	1,w
  9108  00DC  00AF               	movwf	??_processGestureData
  9109  00DD  082F               	movf	??_processGestureData,w
  9110  00DE  00C5               	movwf	processGestureData@u_first
  9111                           
  9112                           ;APDS9960.c: 692:                 d_first = gesture_data_.d_data[i];
  9113  00DF  084D               	movf	processGestureData@i,w
  9114  00E0  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  9115  00E1  0086               	movwf	6
  9116  00E2  3002               	movlw	2	; select bank4/5
  9117  00E3  0087               	movwf	7
  9118  00E4  0801               	movf	1,w
  9119  00E5  00AF               	movwf	??_processGestureData
  9120  00E6  082F               	movf	??_processGestureData,w
  9121  00E7  00C6               	movwf	processGestureData@d_first
  9122                           
  9123                           ;APDS9960.c: 693:                 l_first = gesture_data_.l_data[i];
  9124  00E8  084D               	movf	processGestureData@i,w
  9125  00E9  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  9126  00EA  0086               	movwf	6
  9127  00EB  3002               	movlw	2	; select bank4/5
  9128  00EC  0087               	movwf	7
  9129  00ED  0801               	movf	1,w
  9130  00EE  00AF               	movwf	??_processGestureData
  9131  00EF  082F               	movf	??_processGestureData,w
  9132  00F0  00C7               	movwf	processGestureData@l_first
  9133                           
  9134                           ;APDS9960.c: 694:                 r_first = gesture_data_.r_data[i];
  9135  00F1  084D               	movf	processGestureData@i,w
  9136  00F2  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  9137  00F3  0086               	movwf	6
  9138  00F4  3002               	movlw	2	; select bank4/5
  9139  00F5  0087               	movwf	7
  9140  00F6  0801               	movf	1,w
  9141  00F7  00AF               	movwf	??_processGestureData
  9142  00F8  082F               	movf	??_processGestureData,w
  9143  00F9  00C8               	movwf	processGestureData@r_first
  9144  00FA                     l6680:	
  9145                           
  9146                           ;APDS9960.c: 700:         if( (u_first == 0) || (d_first == 0) || (l_first == 0) || (r_f
      +                          irst == 0) ) {
  9147  00FA  0020               	movlb	0	; select bank0
  9148  00FB  0845               	movf	processGestureData@u_first,w
  9149  00FC  1903               	btfsc	3,2
  9150  00FD  2893               	goto	l6658
  9151  00FE  0846               	movf	processGestureData@d_first,w
  9152  00FF  1903               	btfsc	3,2
  9153  0100  2893               	goto	l6658
  9154  0101  0847               	movf	processGestureData@l_first,w
  9155  0102  1903               	btfsc	3,2
  9156  0103  2893               	goto	l6658
  9157  0104  0848               	movf	processGestureData@r_first,w
  9158  0105  1903               	btfsc	3,2
  9159  0106  2893               	goto	l6658
  9160                           
  9161                           ;APDS9960.c: 706:         for( i = gesture_data_.total_gestures - 1; i >= 0; i-- ) {
  9162  0107  0024               	movlb	4	; select bank4
  9163  0108  0861               	movf	(_gesture_data_^(0+512)+65),w
  9164  0109  3EFF               	addlw	255
  9165  010A  0020               	movlb	0	; select bank0
  9166  010B  00CD               	movwf	processGestureData@i
  9167  010C  30FF               	movlw	255
  9168  010D  1803               	skipnc
  9169  010E  3000               	movlw	0
  9170  010F  00CE               	movwf	processGestureData@i+1
  9171                           
  9172                           ;APDS9960.c: 717:                 break;
  9173  0110  2915               	goto	l6694
  9174  0111                     l6708:	
  9175                           
  9176                           ;APDS9960.c: 719:         }
  9177  0111  30FF               	movlw	255
  9178  0112  07CD               	addwf	processGestureData@i,f
  9179  0113  30FF               	movlw	255
  9180  0114  3DCE               	addwfc	processGestureData@i+1,f
  9181  0115                     l6694:	
  9182  0115  1BCE               	btfsc	processGestureData@i+1,7
  9183  0116  295F               	goto	l6712
  9184                           
  9185                           ;APDS9960.c: 708:             if( (gesture_data_.u_data[i] > 10) &&
  9186  0117  084D               	movf	processGestureData@i,w
  9187  0118  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  9188  0119  0086               	movwf	6
  9189  011A  3002               	movlw	2	; select bank4/5
  9190  011B  0087               	movwf	7
  9191  011C  300B               	movlw	11
  9192  011D  0201               	subwf	1,w
  9193  011E  1C03               	skipc
  9194  011F  2911               	goto	l6708
  9195  0120  084D               	movf	processGestureData@i,w
  9196  0121  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  9197  0122  0086               	movwf	6
  9198  0123  3002               	movlw	2	; select bank4/5
  9199  0124  0087               	movwf	7
  9200  0125  300B               	movlw	11
  9201  0126  0201               	subwf	1,w
  9202  0127  1C03               	skipc
  9203  0128  2911               	goto	l6708
  9204  0129  084D               	movf	processGestureData@i,w
  9205  012A  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  9206  012B  0086               	movwf	6
  9207  012C  3002               	movlw	2	; select bank4/5
  9208  012D  0087               	movwf	7
  9209  012E  300B               	movlw	11
  9210  012F  0201               	subwf	1,w
  9211  0130  1C03               	skipc
  9212  0131  2911               	goto	l6708
  9213  0132  084D               	movf	processGestureData@i,w
  9214  0133  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  9215  0134  0086               	movwf	6
  9216  0135  3002               	movlw	2	; select bank4/5
  9217  0136  0087               	movwf	7
  9218  0137  300B               	movlw	11
  9219  0138  0201               	subwf	1,w
  9220  0139  1C03               	skipc
  9221  013A  2911               	goto	l6708
  9222                           
  9223                           ;APDS9960.c: 711:                 (gesture_data_.r_data[i] > 10) ) {;APDS9960.c: 713:   
      +                                        u_last = gesture_data_.u_data[i];
  9224  013B  084D               	movf	processGestureData@i,w
  9225  013C  3E20               	addlw	(low (_gesture_data_| (0+512)))& (0+255)
  9226  013D  0086               	movwf	6
  9227  013E  3002               	movlw	2	; select bank4/5
  9228  013F  0087               	movwf	7
  9229  0140  0801               	movf	1,w
  9230  0141  00AF               	movwf	??_processGestureData
  9231  0142  082F               	movf	??_processGestureData,w
  9232  0143  00C1               	movwf	processGestureData@u_last
  9233                           
  9234                           ;APDS9960.c: 714:                 d_last = gesture_data_.d_data[i];
  9235  0144  084D               	movf	processGestureData@i,w
  9236  0145  3E30               	addlw	(low ((_gesture_data_| (0+512)+16)))& (0+255)
  9237  0146  0086               	movwf	6
  9238  0147  3002               	movlw	2	; select bank4/5
  9239  0148  0087               	movwf	7
  9240  0149  0801               	movf	1,w
  9241  014A  00AF               	movwf	??_processGestureData
  9242  014B  082F               	movf	??_processGestureData,w
  9243  014C  00C2               	movwf	processGestureData@d_last
  9244                           
  9245                           ;APDS9960.c: 715:                 l_last = gesture_data_.l_data[i];
  9246  014D  084D               	movf	processGestureData@i,w
  9247  014E  3E40               	addlw	(low ((_gesture_data_| (0+512)+32)))& (0+255)
  9248  014F  0086               	movwf	6
  9249  0150  3002               	movlw	2	; select bank4/5
  9250  0151  0087               	movwf	7
  9251  0152  0801               	movf	1,w
  9252  0153  00AF               	movwf	??_processGestureData
  9253  0154  082F               	movf	??_processGestureData,w
  9254  0155  00C3               	movwf	processGestureData@l_last
  9255                           
  9256                           ;APDS9960.c: 716:                 r_last = gesture_data_.r_data[i];
  9257  0156  084D               	movf	processGestureData@i,w
  9258  0157  3E50               	addlw	(low ((_gesture_data_| (0+512)+48)))& (0+255)
  9259  0158  0086               	movwf	6
  9260  0159  3002               	movlw	2	; select bank4/5
  9261  015A  0087               	movwf	7
  9262  015B  0801               	movf	1,w
  9263  015C  00AF               	movwf	??_processGestureData
  9264  015D  082F               	movf	??_processGestureData,w
  9265  015E  00C4               	movwf	processGestureData@r_last
  9266  015F                     l6712:	
  9267                           
  9268                           ;APDS9960.c: 723:     ud_ratio_first = ((u_first - d_first) * 100) / (u_first + d_first)
      +                          ;
  9269  015F  0020               	movlb	0	; select bank0
  9270  0160  0845               	movf	processGestureData@u_first,w
  9271  0161  0746               	addwf	processGestureData@d_first,w
  9272  0162  00A6               	movwf	___awdiv@divisor
  9273  0163  01A7               	clrf	___awdiv@divisor+1
  9274  0164  0DA7               	rlf	___awdiv@divisor+1,f
  9275  0165  0846               	movf	processGestureData@d_first,w
  9276  0166  0245               	subwf	processGestureData@u_first,w
  9277  0167  00A0               	movwf	___wmul@multiplier
  9278  0168  01A1               	clrf	___wmul@multiplier+1
  9279  0169  1C03               	skipc
  9280  016A  03A1               	decf	___wmul@multiplier+1,f
  9281  016B  3064               	movlw	100
  9282  016C  00A2               	movwf	___wmul@multiplicand
  9283  016D  3000               	movlw	0
  9284  016E  00A3               	movwf	___wmul@multiplicand+1
  9285  016F  3189  2127  3180   	fcall	___wmul
  9286  0172  0020               	movlb	0	; select bank0
  9287  0173  0821               	movf	?___wmul+1,w
  9288  0174  00A9               	movwf	___awdiv@dividend+1
  9289  0175  0820               	movf	?___wmul,w
  9290  0176  00A8               	movwf	___awdiv@dividend
  9291  0177  318E  2665  3180   	fcall	___awdiv
  9292  017A  0020               	movlb	0	; select bank0
  9293  017B  0827               	movf	?___awdiv+1,w
  9294  017C  00B2               	movwf	processGestureData@ud_ratio_first+1
  9295  017D  0826               	movf	?___awdiv,w
  9296  017E  00B1               	movwf	processGestureData@ud_ratio_first
  9297                           
  9298                           ;APDS9960.c: 724:     lr_ratio_first = ((l_first - r_first) * 100) / (l_first + r_first)
      +                          ;
  9299  017F  0847               	movf	processGestureData@l_first,w
  9300  0180  0748               	addwf	processGestureData@r_first,w
  9301  0181  00A6               	movwf	___awdiv@divisor
  9302  0182  01A7               	clrf	___awdiv@divisor+1
  9303  0183  0DA7               	rlf	___awdiv@divisor+1,f
  9304  0184  0848               	movf	processGestureData@r_first,w
  9305  0185  0247               	subwf	processGestureData@l_first,w
  9306  0186  00A0               	movwf	___wmul@multiplier
  9307  0187  01A1               	clrf	___wmul@multiplier+1
  9308  0188  1C03               	skipc
  9309  0189  03A1               	decf	___wmul@multiplier+1,f
  9310  018A  3064               	movlw	100
  9311  018B  00A2               	movwf	___wmul@multiplicand
  9312  018C  3000               	movlw	0
  9313  018D  00A3               	movwf	___wmul@multiplicand+1
  9314  018E  3189  2127  3180   	fcall	___wmul
  9315  0191  0020               	movlb	0	; select bank0
  9316  0192  0821               	movf	?___wmul+1,w
  9317  0193  00A9               	movwf	___awdiv@dividend+1
  9318  0194  0820               	movf	?___wmul,w
  9319  0195  00A8               	movwf	___awdiv@dividend
  9320  0196  318E  2665  3180   	fcall	___awdiv
  9321  0199  0020               	movlb	0	; select bank0
  9322  019A  0827               	movf	?___awdiv+1,w
  9323  019B  00B4               	movwf	processGestureData@lr_ratio_first+1
  9324  019C  0826               	movf	?___awdiv,w
  9325  019D  00B3               	movwf	processGestureData@lr_ratio_first
  9326                           
  9327                           ;APDS9960.c: 725:     ud_ratio_last = ((u_last - d_last) * 100) / (u_last + d_last);
  9328  019E  0841               	movf	processGestureData@u_last,w
  9329  019F  0742               	addwf	processGestureData@d_last,w
  9330  01A0  00A6               	movwf	___awdiv@divisor
  9331  01A1  01A7               	clrf	___awdiv@divisor+1
  9332  01A2  0DA7               	rlf	___awdiv@divisor+1,f
  9333  01A3  0842               	movf	processGestureData@d_last,w
  9334  01A4  0241               	subwf	processGestureData@u_last,w
  9335  01A5  00A0               	movwf	___wmul@multiplier
  9336  01A6  01A1               	clrf	___wmul@multiplier+1
  9337  01A7  1C03               	skipc
  9338  01A8  03A1               	decf	___wmul@multiplier+1,f
  9339  01A9  3064               	movlw	100
  9340  01AA  00A2               	movwf	___wmul@multiplicand
  9341  01AB  3000               	movlw	0
  9342  01AC  00A3               	movwf	___wmul@multiplicand+1
  9343  01AD  3189  2127  3180   	fcall	___wmul
  9344  01B0  0020               	movlb	0	; select bank0
  9345  01B1  0821               	movf	?___wmul+1,w
  9346  01B2  00A9               	movwf	___awdiv@dividend+1
  9347  01B3  0820               	movf	?___wmul,w
  9348  01B4  00A8               	movwf	___awdiv@dividend
  9349  01B5  318E  2665  3180   	fcall	___awdiv
  9350  01B8  0020               	movlb	0	; select bank0
  9351  01B9  0827               	movf	?___awdiv+1,w
  9352  01BA  00B6               	movwf	processGestureData@ud_ratio_last+1
  9353  01BB  0826               	movf	?___awdiv,w
  9354  01BC  00B5               	movwf	processGestureData@ud_ratio_last
  9355                           
  9356                           ;APDS9960.c: 726:     lr_ratio_last = ((l_last - r_last) * 100) / (l_last + r_last);
  9357  01BD  0843               	movf	processGestureData@l_last,w
  9358  01BE  0744               	addwf	processGestureData@r_last,w
  9359  01BF  00A6               	movwf	___awdiv@divisor
  9360  01C0  01A7               	clrf	___awdiv@divisor+1
  9361  01C1  0DA7               	rlf	___awdiv@divisor+1,f
  9362  01C2  0844               	movf	processGestureData@r_last,w
  9363  01C3  0243               	subwf	processGestureData@l_last,w
  9364  01C4  00A0               	movwf	___wmul@multiplier
  9365  01C5  01A1               	clrf	___wmul@multiplier+1
  9366  01C6  1C03               	skipc
  9367  01C7  03A1               	decf	___wmul@multiplier+1,f
  9368  01C8  3064               	movlw	100
  9369  01C9  00A2               	movwf	___wmul@multiplicand
  9370  01CA  3000               	movlw	0
  9371  01CB  00A3               	movwf	___wmul@multiplicand+1
  9372  01CC  3189  2127  3180   	fcall	___wmul
  9373  01CF  0020               	movlb	0	; select bank0
  9374  01D0  0821               	movf	?___wmul+1,w
  9375  01D1  00A9               	movwf	___awdiv@dividend+1
  9376  01D2  0820               	movf	?___wmul,w
  9377  01D3  00A8               	movwf	___awdiv@dividend
  9378  01D4  318E  2665  3180   	fcall	___awdiv
  9379  01D7  0020               	movlb	0	; select bank0
  9380  01D8  0827               	movf	?___awdiv+1,w
  9381  01D9  00B8               	movwf	processGestureData@lr_ratio_last+1
  9382  01DA  0826               	movf	?___awdiv,w
  9383  01DB  00B7               	movwf	processGestureData@lr_ratio_last
  9384                           
  9385                           ;APDS9960.c: 729:     ud_delta = ud_ratio_last - ud_ratio_first;
  9386  01DC  0831               	movf	processGestureData@ud_ratio_first,w
  9387  01DD  0235               	subwf	processGestureData@ud_ratio_last,w
  9388  01DE  00C9               	movwf	processGestureData@ud_delta
  9389  01DF  0832               	movf	processGestureData@ud_ratio_first+1,w
  9390  01E0  3B36               	subwfb	processGestureData@ud_ratio_last+1,w
  9391  01E1  00CA               	movwf	processGestureData@ud_delta+1
  9392                           
  9393                           ;APDS9960.c: 730:     lr_delta = lr_ratio_last - lr_ratio_first;
  9394  01E2  0833               	movf	processGestureData@lr_ratio_first,w
  9395  01E3  0237               	subwf	processGestureData@lr_ratio_last,w
  9396  01E4  00CB               	movwf	processGestureData@lr_delta
  9397  01E5  0834               	movf	processGestureData@lr_ratio_first+1,w
  9398  01E6  3B38               	subwfb	processGestureData@lr_ratio_last+1,w
  9399  01E7  00CC               	movwf	processGestureData@lr_delta+1
  9400                           
  9401                           ;APDS9960.c: 733:     gesture_ud_delta_ += ud_delta;
  9402  01E8  0849               	movf	processGestureData@ud_delta,w
  9403  01E9  07E8               	addwf	_gesture_ud_delta_,f
  9404  01EA  084A               	movf	processGestureData@ud_delta+1,w
  9405  01EB  3DE9               	addwfc	_gesture_ud_delta_+1,f
  9406                           
  9407                           ;APDS9960.c: 734:     gesture_lr_delta_ += lr_delta;
  9408  01EC  084B               	movf	processGestureData@lr_delta,w
  9409  01ED  07E6               	addwf	_gesture_lr_delta_,f
  9410  01EE  084C               	movf	processGestureData@lr_delta+1,w
  9411  01EF  3DE7               	addwfc	_gesture_lr_delta_+1,f
  9412                           
  9413                           ;APDS9960.c: 737:     if( gesture_ud_delta_ >= 50 ) {
  9414  01F0  0869               	movf	_gesture_ud_delta_+1,w
  9415  01F1  3A80               	xorlw	128
  9416  01F2  00AF               	movwf	??_processGestureData
  9417  01F3  3080               	movlw	128
  9418  01F4  022F               	subwf	??_processGestureData,w
  9419  01F5  1D03               	skipz
  9420  01F6  29F9               	goto	u5455
  9421  01F7  3032               	movlw	50
  9422  01F8  0268               	subwf	_gesture_ud_delta_,w
  9423  01F9                     u5455:	
  9424  01F9  1C03               	skipc
  9425  01FA  2A00               	goto	l6726
  9426                           
  9427                           ;APDS9960.c: 738:         gesture_ud_count_ = 1;
  9428  01FB  3001               	movlw	1
  9429  01FC  0020               	movlb	0	; select bank0
  9430  01FD  00E4               	movwf	_gesture_ud_count_
  9431  01FE  3000               	movlw	0
  9432  01FF  2A10               	goto	L2
  9433  0200                     l6726:	
  9434                           ;APDS9960.c: 739:     } else if( gesture_ud_delta_ <= -50 ) {
  9435                           
  9436  0200  0020               	movlb	0	; select bank0
  9437  0201  0869               	movf	_gesture_ud_delta_+1,w
  9438  0202  3A80               	xorlw	128
  9439  0203  00AF               	movwf	??_processGestureData
  9440  0204  307F               	movlw	127
  9441  0205  022F               	subwf	??_processGestureData,w
  9442  0206  1D03               	skipz
  9443  0207  2A0A               	goto	u5465
  9444  0208  30CF               	movlw	207
  9445  0209  0268               	subwf	_gesture_ud_delta_,w
  9446  020A                     u5465:	
  9447  020A  1803               	skipnc
  9448  020B  2A12               	goto	l6730
  9449                           
  9450                           ;APDS9960.c: 740:         gesture_ud_count_ = -1;
  9451  020C  30FF               	movlw	255
  9452  020D  0020               	movlb	0	; select bank0
  9453  020E  00E4               	movwf	_gesture_ud_count_
  9454  020F  30FF               	movlw	255
  9455  0210                     L2:	
  9456  0210  00E5               	movwf	_gesture_ud_count_+1
  9457                           
  9458                           ;APDS9960.c: 741:     } else {
  9459  0211  2A15               	goto	l6732
  9460  0212                     l6730:	
  9461                           
  9462                           ;APDS9960.c: 742:         gesture_ud_count_ = 0;
  9463  0212  0020               	movlb	0	; select bank0
  9464  0213  01E4               	clrf	_gesture_ud_count_
  9465  0214  01E5               	clrf	_gesture_ud_count_+1
  9466  0215                     l6732:	
  9467                           
  9468                           ;APDS9960.c: 746:     if( gesture_lr_delta_ >= 50 ) {
  9469  0215  0867               	movf	_gesture_lr_delta_+1,w
  9470  0216  3A80               	xorlw	128
  9471  0217  00AF               	movwf	??_processGestureData
  9472  0218  3080               	movlw	128
  9473  0219  022F               	subwf	??_processGestureData,w
  9474  021A  1D03               	skipz
  9475  021B  2A1E               	goto	u5475
  9476  021C  3032               	movlw	50
  9477  021D  0266               	subwf	_gesture_lr_delta_,w
  9478  021E                     u5475:	
  9479  021E  1C03               	skipc
  9480  021F  2A25               	goto	l6736
  9481                           
  9482                           ;APDS9960.c: 747:         gesture_lr_count_ = 1;
  9483  0220  3001               	movlw	1
  9484  0221  0020               	movlb	0	; select bank0
  9485  0222  00E2               	movwf	_gesture_lr_count_
  9486  0223  3000               	movlw	0
  9487  0224  2A35               	goto	L3
  9488  0225                     l6736:	
  9489                           ;APDS9960.c: 748:     } else if( gesture_lr_delta_ <= -50 ) {
  9490                           
  9491  0225  0020               	movlb	0	; select bank0
  9492  0226  0867               	movf	_gesture_lr_delta_+1,w
  9493  0227  3A80               	xorlw	128
  9494  0228  00AF               	movwf	??_processGestureData
  9495  0229  307F               	movlw	127
  9496  022A  022F               	subwf	??_processGestureData,w
  9497  022B  1D03               	skipz
  9498  022C  2A2F               	goto	u5485
  9499  022D  30CF               	movlw	207
  9500  022E  0266               	subwf	_gesture_lr_delta_,w
  9501  022F                     u5485:	
  9502  022F  1803               	skipnc
  9503  0230  2A37               	goto	l6740
  9504                           
  9505                           ;APDS9960.c: 749:         gesture_lr_count_ = -1;
  9506  0231  30FF               	movlw	255
  9507  0232  0020               	movlb	0	; select bank0
  9508  0233  00E2               	movwf	_gesture_lr_count_
  9509  0234  30FF               	movlw	255
  9510  0235                     L3:	
  9511  0235  00E3               	movwf	_gesture_lr_count_+1
  9512                           
  9513                           ;APDS9960.c: 750:     } else {
  9514  0236  2A3A               	goto	l6742
  9515  0237                     l6740:	
  9516                           
  9517                           ;APDS9960.c: 751:         gesture_lr_count_ = 0;
  9518  0237  0020               	movlb	0	; select bank0
  9519  0238  01E2               	clrf	_gesture_lr_count_
  9520  0239  01E3               	clrf	_gesture_lr_count_+1
  9521  023A                     l6742:	
  9522                           
  9523                           ;APDS9960.c: 755:     if( (gesture_ud_count_ == 0) && (gesture_lr_count_ == 0) ) {
  9524  023A  0864               	movf	_gesture_ud_count_,w
  9525  023B  0465               	iorwf	_gesture_ud_count_+1,w
  9526  023C  1D03               	btfss	3,2
  9527  023D  2AE5               	goto	l6786
  9528  023E  0862               	movf	_gesture_lr_count_,w
  9529  023F  0463               	iorwf	_gesture_lr_count_+1,w
  9530  0240  1D03               	btfss	3,2
  9531  0241  2AE5               	goto	l6786
  9532                           
  9533                           ;APDS9960.c: 756:         if( (((ud_delta) > 0 ? (ud_delta) : -(ud_delta)) < 20) && (((l
      +                          r_delta) > 0 ? (lr_delta) : -(lr_delta)) < 20) ) {
  9534  0242  084A               	movf	processGestureData@ud_delta+1,w
  9535  0243  3A80               	xorlw	128
  9536  0244  00AF               	movwf	??_processGestureData
  9537  0245  3080               	movlw	128
  9538  0246  022F               	subwf	??_processGestureData,w
  9539  0247  1D03               	skipz
  9540  0248  2A4B               	goto	u5515
  9541  0249  3001               	movlw	1
  9542  024A  0249               	subwf	processGestureData@ud_delta,w
  9543  024B                     u5515:	
  9544  024B  1803               	skipnc
  9545  024C  2A5A               	goto	l6750
  9546  024D  0020               	movlb	0	; select bank0
  9547  024E  0949               	comf	processGestureData@ud_delta,w
  9548  024F  00AF               	movwf	??_processGestureData
  9549  0250  094A               	comf	processGestureData@ud_delta+1,w
  9550  0251  00B0               	movwf	??_processGestureData+1
  9551  0252  0AAF               	incf	??_processGestureData,f
  9552  0253  1903               	skipnz
  9553  0254  0AB0               	incf	??_processGestureData+1,f
  9554  0255  082F               	movf	??_processGestureData,w
  9555  0256  00B9               	movwf	_processGestureData$1687
  9556  0257  0830               	movf	??_processGestureData+1,w
  9557  0258  00BA               	movwf	_processGestureData$1687+1
  9558  0259  2A5F               	goto	l1144
  9559  025A                     l6750:	
  9560  025A  0020               	movlb	0	; select bank0
  9561  025B  084A               	movf	processGestureData@ud_delta+1,w
  9562  025C  00BA               	movwf	_processGestureData$1687+1
  9563  025D  0849               	movf	processGestureData@ud_delta,w
  9564  025E  00B9               	movwf	_processGestureData$1687
  9565  025F                     l1144:	
  9566  025F  083A               	movf	_processGestureData$1687+1,w
  9567  0260  3A80               	xorlw	128
  9568  0261  00AF               	movwf	??_processGestureData
  9569  0262  3080               	movlw	128
  9570  0263  022F               	subwf	??_processGestureData,w
  9571  0264  1D03               	skipz
  9572  0265  2A68               	goto	u5525
  9573  0266  3014               	movlw	20
  9574  0267  0239               	subwf	_processGestureData$1687,w
  9575  0268                     u5525:	
  9576  0268  1803               	skipnc
  9577  0269  2893               	goto	l6658
  9578  026A  0020               	movlb	0	; select bank0
  9579  026B  084C               	movf	processGestureData@lr_delta+1,w
  9580  026C  3A80               	xorlw	128
  9581  026D  00AF               	movwf	??_processGestureData
  9582  026E  3080               	movlw	128
  9583  026F  022F               	subwf	??_processGestureData,w
  9584  0270  1D03               	skipz
  9585  0271  2A74               	goto	u5535
  9586  0272  3001               	movlw	1
  9587  0273  024B               	subwf	processGestureData@lr_delta,w
  9588  0274                     u5535:	
  9589  0274  1803               	skipnc
  9590  0275  2A83               	goto	l6756
  9591  0276  0020               	movlb	0	; select bank0
  9592  0277  094B               	comf	processGestureData@lr_delta,w
  9593  0278  00AF               	movwf	??_processGestureData
  9594  0279  094C               	comf	processGestureData@lr_delta+1,w
  9595  027A  00B0               	movwf	??_processGestureData+1
  9596  027B  0AAF               	incf	??_processGestureData,f
  9597  027C  1903               	skipnz
  9598  027D  0AB0               	incf	??_processGestureData+1,f
  9599  027E  082F               	movf	??_processGestureData,w
  9600  027F  00BB               	movwf	_processGestureData$1688
  9601  0280  0830               	movf	??_processGestureData+1,w
  9602  0281  00BC               	movwf	_processGestureData$1688+1
  9603  0282  2A88               	goto	l1148
  9604  0283                     l6756:	
  9605  0283  0020               	movlb	0	; select bank0
  9606  0284  084C               	movf	processGestureData@lr_delta+1,w
  9607  0285  00BC               	movwf	_processGestureData$1688+1
  9608  0286  084B               	movf	processGestureData@lr_delta,w
  9609  0287  00BB               	movwf	_processGestureData$1688
  9610  0288                     l1148:	
  9611  0288  083C               	movf	_processGestureData$1688+1,w
  9612  0289  3A80               	xorlw	128
  9613  028A  00AF               	movwf	??_processGestureData
  9614  028B  3080               	movlw	128
  9615  028C  022F               	subwf	??_processGestureData,w
  9616  028D  1D03               	skipz
  9617  028E  2A91               	goto	u5545
  9618  028F  3014               	movlw	20
  9619  0290  023B               	subwf	_processGestureData$1688,w
  9620  0291                     u5545:	
  9621  0291  1803               	skipnc
  9622  0292  2893               	goto	l6658
  9623                           
  9624                           ;APDS9960.c: 757: ;APDS9960.c: 759:             if( (ud_delta == 0) && (lr_delta == 0) )
      +                           {
  9625  0293  0020               	movlb	0	; select bank0
  9626  0294  0849               	movf	processGestureData@ud_delta,w
  9627  0295  044A               	iorwf	processGestureData@ud_delta+1,w
  9628  0296  1D03               	btfss	3,2
  9629  0297  2AA2               	goto	l6764
  9630  0298  084B               	movf	processGestureData@lr_delta,w
  9631  0299  044C               	iorwf	processGestureData@lr_delta+1,w
  9632  029A  1D03               	btfss	3,2
  9633  029B  2AA2               	goto	l6764
  9634                           
  9635                           ;APDS9960.c: 760:                 gesture_near_count_++;
  9636  029C  3001               	movlw	1
  9637  029D  0021               	movlb	1	; select bank1
  9638  029E  07E6               	addwf	_gesture_near_count_^(0+128),f
  9639  029F  3000               	movlw	0
  9640  02A0  3DE7               	addwfc	(_gesture_near_count_+1)^(0+128),f
  9641                           
  9642                           ;APDS9960.c: 761:             } else if( (ud_delta != 0) || (lr_delta != 0) ) {
  9643  02A1  2AAF               	goto	l1150
  9644  02A2                     l6764:	
  9645  02A2  0849               	movf	processGestureData@ud_delta,w
  9646  02A3  044A               	iorwf	processGestureData@ud_delta+1,w
  9647  02A4  1D03               	btfss	3,2
  9648  02A5  2AAA               	goto	l6768
  9649  02A6  084B               	movf	processGestureData@lr_delta,w
  9650  02A7  044C               	iorwf	processGestureData@lr_delta+1,w
  9651  02A8  1903               	btfsc	3,2
  9652  02A9  2AAF               	goto	l1150
  9653  02AA                     l6768:	
  9654                           
  9655                           ;APDS9960.c: 762:                 gesture_far_count_++;
  9656  02AA  3001               	movlw	1
  9657  02AB  0021               	movlb	1	; select bank1
  9658  02AC  07E4               	addwf	_gesture_far_count_^(0+128),f
  9659  02AD  3000               	movlw	0
  9660  02AE  3DE5               	addwfc	(_gesture_far_count_+1)^(0+128),f
  9661  02AF                     l1150:	
  9662                           
  9663                           ;APDS9960.c: 765:             if( (gesture_near_count_ >= 10) && (gesture_far_count_ >= 
      +                          2) ) {
  9664  02AF  0021               	movlb	1	; select bank1
  9665  02B0  0867               	movf	(_gesture_near_count_+1)^(0+128),w
  9666  02B1  3A80               	xorlw	128
  9667  02B2  0020               	movlb	0	; select bank0
  9668  02B3  00AF               	movwf	??_processGestureData
  9669  02B4  3080               	movlw	128
  9670  02B5  022F               	subwf	??_processGestureData,w
  9671  02B6  1D03               	skipz
  9672  02B7  2ABB               	goto	u5595
  9673  02B8  300A               	movlw	10
  9674  02B9  0021               	movlb	1	; select bank1
  9675  02BA  0266               	subwf	_gesture_near_count_^(0+128),w
  9676  02BB                     u5595:	
  9677  02BB  1C03               	skipc
  9678  02BC  2893               	goto	l6658
  9679  02BD  0021               	movlb	1	; select bank1
  9680  02BE  0865               	movf	(_gesture_far_count_+1)^(0+128),w
  9681  02BF  3A80               	xorlw	128
  9682  02C0  0020               	movlb	0	; select bank0
  9683  02C1  00AF               	movwf	??_processGestureData
  9684  02C2  3080               	movlw	128
  9685  02C3  022F               	subwf	??_processGestureData,w
  9686  02C4  1D03               	skipz
  9687  02C5  2AC9               	goto	u5605
  9688  02C6  3002               	movlw	2
  9689  02C7  0021               	movlb	1	; select bank1
  9690  02C8  0264               	subwf	_gesture_far_count_^(0+128),w
  9691  02C9                     u5605:	
  9692  02C9  1C03               	skipc
  9693  02CA  2893               	goto	l6658
  9694                           
  9695                           ;APDS9960.c: 766:                 if( (ud_delta == 0) && (lr_delta == 0) ) {
  9696  02CB  0020               	movlb	0	; select bank0
  9697  02CC  0849               	movf	processGestureData@ud_delta,w
  9698  02CD  044A               	iorwf	processGestureData@ud_delta+1,w
  9699  02CE  1D03               	btfss	3,2
  9700  02CF  2AD6               	goto	l6778
  9701  02D0  084B               	movf	processGestureData@lr_delta,w
  9702  02D1  044C               	iorwf	processGestureData@lr_delta+1,w
  9703  02D2  1D03               	btfss	3,2
  9704  02D3  2AD6               	goto	l6778
  9705                           
  9706                           ;APDS9960.c: 767:                     gesture_state_ = NEAR_STATE;
  9707  02D4  3001               	movlw	1
  9708  02D5  2ADF               	goto	L4
  9709  02D6                     l6778:	
  9710                           ;APDS9960.c: 768:                 } else if( (ud_delta != 0) && (lr_delta != 0) ) {
  9711                           
  9712  02D6  0849               	movf	processGestureData@ud_delta,w
  9713  02D7  044A               	iorwf	processGestureData@ud_delta+1,w
  9714  02D8  1903               	btfsc	3,2
  9715  02D9  2AE3               	goto	l1156
  9716  02DA  084B               	movf	processGestureData@lr_delta,w
  9717  02DB  044C               	iorwf	processGestureData@lr_delta+1,w
  9718  02DC  1903               	btfsc	3,2
  9719  02DD  2AE3               	goto	l1156
  9720                           
  9721                           ;APDS9960.c: 769:                     gesture_state_ = FAR_STATE;
  9722  02DE  3002               	movlw	2
  9723  02DF                     L4:	
  9724  02DF  0021               	movlb	1	; select bank1
  9725  02E0  00E2               	movwf	_gesture_state_^(0+128)
  9726  02E1  3000               	movlw	0
  9727  02E2  00E3               	movwf	(_gesture_state_^(0+128)+1)
  9728  02E3                     l1156:	
  9729                           
  9730                           ;APDS9960.c: 771:                 return 1;
  9731  02E3  3001               	movlw	1
  9732  02E4  0008               	return
  9733  02E5                     l6786:	
  9734                           
  9735                           ;APDS9960.c: 775:         if( (((ud_delta) > 0 ? (ud_delta) : -(ud_delta)) < 20) && (((l
      +                          r_delta) > 0 ? (lr_delta) : -(lr_delta)) < 20) ) {
  9736  02E5  084A               	movf	processGestureData@ud_delta+1,w
  9737  02E6  3A80               	xorlw	128
  9738  02E7  00AF               	movwf	??_processGestureData
  9739  02E8  3080               	movlw	128
  9740  02E9  022F               	subwf	??_processGestureData,w
  9741  02EA  1D03               	skipz
  9742  02EB  2AEE               	goto	u5655
  9743  02EC  3001               	movlw	1
  9744  02ED  0249               	subwf	processGestureData@ud_delta,w
  9745  02EE                     u5655:	
  9746  02EE  1803               	skipnc
  9747  02EF  2AFD               	goto	l6790
  9748  02F0  0020               	movlb	0	; select bank0
  9749  02F1  0949               	comf	processGestureData@ud_delta,w
  9750  02F2  00AF               	movwf	??_processGestureData
  9751  02F3  094A               	comf	processGestureData@ud_delta+1,w
  9752  02F4  00B0               	movwf	??_processGestureData+1
  9753  02F5  0AAF               	incf	??_processGestureData,f
  9754  02F6  1903               	skipnz
  9755  02F7  0AB0               	incf	??_processGestureData+1,f
  9756  02F8  082F               	movf	??_processGestureData,w
  9757  02F9  00BD               	movwf	_processGestureData$1689
  9758  02FA  0830               	movf	??_processGestureData+1,w
  9759  02FB  00BE               	movwf	_processGestureData$1689+1
  9760  02FC  2B02               	goto	l1163
  9761  02FD                     l6790:	
  9762  02FD  0020               	movlb	0	; select bank0
  9763  02FE  084A               	movf	processGestureData@ud_delta+1,w
  9764  02FF  00BE               	movwf	_processGestureData$1689+1
  9765  0300  0849               	movf	processGestureData@ud_delta,w
  9766  0301  00BD               	movwf	_processGestureData$1689
  9767  0302                     l1163:	
  9768  0302  083E               	movf	_processGestureData$1689+1,w
  9769  0303  3A80               	xorlw	128
  9770  0304  00AF               	movwf	??_processGestureData
  9771  0305  3080               	movlw	128
  9772  0306  022F               	subwf	??_processGestureData,w
  9773  0307  1D03               	skipz
  9774  0308  2B0B               	goto	u5665
  9775  0309  3014               	movlw	20
  9776  030A  023D               	subwf	_processGestureData$1689,w
  9777  030B                     u5665:	
  9778  030B  1803               	skipnc
  9779  030C  2893               	goto	l6658
  9780  030D  0020               	movlb	0	; select bank0
  9781  030E  084C               	movf	processGestureData@lr_delta+1,w
  9782  030F  3A80               	xorlw	128
  9783  0310  00AF               	movwf	??_processGestureData
  9784  0311  3080               	movlw	128
  9785  0312  022F               	subwf	??_processGestureData,w
  9786  0313  1D03               	skipz
  9787  0314  2B17               	goto	u5675
  9788  0315  3001               	movlw	1
  9789  0316  024B               	subwf	processGestureData@lr_delta,w
  9790  0317                     u5675:	
  9791  0317  1803               	skipnc
  9792  0318  2B26               	goto	l6796
  9793  0319  0020               	movlb	0	; select bank0
  9794  031A  094B               	comf	processGestureData@lr_delta,w
  9795  031B  00AF               	movwf	??_processGestureData
  9796  031C  094C               	comf	processGestureData@lr_delta+1,w
  9797  031D  00B0               	movwf	??_processGestureData+1
  9798  031E  0AAF               	incf	??_processGestureData,f
  9799  031F  1903               	skipnz
  9800  0320  0AB0               	incf	??_processGestureData+1,f
  9801  0321  082F               	movf	??_processGestureData,w
  9802  0322  00BF               	movwf	_processGestureData$1690
  9803  0323  0830               	movf	??_processGestureData+1,w
  9804  0324  00C0               	movwf	_processGestureData$1690+1
  9805  0325  2B2B               	goto	l1167
  9806  0326                     l6796:	
  9807  0326  0020               	movlb	0	; select bank0
  9808  0327  084C               	movf	processGestureData@lr_delta+1,w
  9809  0328  00C0               	movwf	_processGestureData$1690+1
  9810  0329  084B               	movf	processGestureData@lr_delta,w
  9811  032A  00BF               	movwf	_processGestureData$1690
  9812  032B                     l1167:	
  9813  032B  0840               	movf	_processGestureData$1690+1,w
  9814  032C  3A80               	xorlw	128
  9815  032D  00AF               	movwf	??_processGestureData
  9816  032E  3080               	movlw	128
  9817  032F  022F               	subwf	??_processGestureData,w
  9818  0330  1D03               	skipz
  9819  0331  2B34               	goto	u5685
  9820  0332  3014               	movlw	20
  9821  0333  023F               	subwf	_processGestureData$1690,w
  9822  0334                     u5685:	
  9823  0334  1803               	skipnc
  9824  0335  2893               	goto	l6658
  9825                           
  9826                           ;APDS9960.c: 776: ;APDS9960.c: 778:             if( (ud_delta == 0) && (lr_delta == 0) )
      +                           {
  9827  0336  0020               	movlb	0	; select bank0
  9828  0337  0849               	movf	processGestureData@ud_delta,w
  9829  0338  044A               	iorwf	processGestureData@ud_delta+1,w
  9830  0339  1D03               	btfss	3,2
  9831  033A  2B44               	goto	l1168
  9832  033B  084B               	movf	processGestureData@lr_delta,w
  9833  033C  044C               	iorwf	processGestureData@lr_delta+1,w
  9834  033D  1D03               	btfss	3,2
  9835  033E  2B44               	goto	l1168
  9836                           
  9837                           ;APDS9960.c: 779:                 gesture_near_count_++;
  9838  033F  3001               	movlw	1
  9839  0340  0021               	movlb	1	; select bank1
  9840  0341  07E6               	addwf	_gesture_near_count_^(0+128),f
  9841  0342  3000               	movlw	0
  9842  0343  3DE7               	addwfc	(_gesture_near_count_+1)^(0+128),f
  9843  0344                     l1168:	
  9844                           ;APDS9960.c: 780:             }
  9845                           
  9846                           
  9847                           ;APDS9960.c: 782:             if( gesture_near_count_ >= 10 ) {
  9848  0344  0021               	movlb	1	; select bank1
  9849  0345  0867               	movf	(_gesture_near_count_+1)^(0+128),w
  9850  0346  3A80               	xorlw	128
  9851  0347  0020               	movlb	0	; select bank0
  9852  0348  00AF               	movwf	??_processGestureData
  9853  0349  3080               	movlw	128
  9854  034A  022F               	subwf	??_processGestureData,w
  9855  034B  1D03               	skipz
  9856  034C  2B50               	goto	u5715
  9857  034D  300A               	movlw	10
  9858  034E  0021               	movlb	1	; select bank1
  9859  034F  0266               	subwf	_gesture_near_count_^(0+128),w
  9860  0350                     u5715:	
  9861  0350  1C03               	skipc
  9862  0351  2893               	goto	l6658
  9863                           
  9864                           ;APDS9960.c: 783:                 gesture_ud_count_ = 0;
  9865  0352  0020               	movlb	0	; select bank0
  9866  0353  01E4               	clrf	_gesture_ud_count_
  9867  0354  01E5               	clrf	_gesture_ud_count_+1
  9868                           
  9869                           ;APDS9960.c: 784:                 gesture_lr_count_ = 0;
  9870  0355  01E2               	clrf	_gesture_lr_count_
  9871  0356  01E3               	clrf	_gesture_lr_count_+1
  9872                           
  9873                           ;APDS9960.c: 785:                 gesture_ud_delta_ = 0;
  9874  0357  01E8               	clrf	_gesture_ud_delta_
  9875  0358  01E9               	clrf	_gesture_ud_delta_+1
  9876                           
  9877                           ;APDS9960.c: 786:                 gesture_lr_delta_ = 0;
  9878  0359  01E6               	clrf	_gesture_lr_delta_
  9879  035A  01E7               	clrf	_gesture_lr_delta_+1
  9880  035B  2893               	goto	l6658
  9881  035C                     __end_of_processGestureData:	
  9882                           
  9883                           	psect	text19
  9884  0927                     __ptext19:	
  9885 ;; *************** function ___wmul *****************
  9886 ;; Defined at:
  9887 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
  9888 ;; Parameters:    Size  Location     Type
  9889 ;;  multiplier      2    0[BANK0 ] unsigned int 
  9890 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  9891 ;; Auto vars:     Size  Location     Type
  9892 ;;  product         2    4[BANK0 ] unsigned int 
  9893 ;; Return value:  Size  Location     Type
  9894 ;;                  2    0[BANK0 ] unsigned int 
  9895 ;; Registers used:
  9896 ;;		wreg, status,2, status,0
  9897 ;; Tracked objects:
  9898 ;;		On entry : 0/0
  9899 ;;		On exit  : 0/0
  9900 ;;		Unchanged: 0/0
  9901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9902 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9903 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9904 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9905 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9906 ;;Total ram usage:        6 bytes
  9907 ;; Hardware stack levels used:    1
  9908 ;; Hardware stack levels required when called:    5
  9909 ;; This function calls:
  9910 ;;		Nothing
  9911 ;; This function is called by:
  9912 ;;		_processGestureData
  9913 ;; This function uses a non-reentrant model
  9914 ;;
  9915                           
  9916                           
  9917                           ;psect for function ___wmul
  9918  0927                     ___wmul:	
  9919                           
  9920                           ;incstack = 0
  9921                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  9922  0927  0020               	movlb	0	; select bank0
  9923  0928  01A4               	clrf	___wmul@product
  9924  0929  01A5               	clrf	___wmul@product+1
  9925  092A                     l6484:	
  9926  092A  1C20               	btfss	___wmul@multiplier,0
  9927  092B  2930               	goto	l1610
  9928  092C  0822               	movf	___wmul@multiplicand,w
  9929  092D  07A4               	addwf	___wmul@product,f
  9930  092E  0823               	movf	___wmul@multiplicand+1,w
  9931  092F  3DA5               	addwfc	___wmul@product+1,f
  9932  0930                     l1610:	
  9933  0930  3001               	movlw	1
  9934  0931                     u5025:	
  9935  0931  35A2               	lslf	___wmul@multiplicand,f
  9936  0932  0DA3               	rlf	___wmul@multiplicand+1,f
  9937  0933  0B89               	decfsz	9,f
  9938  0934  2931               	goto	u5025
  9939  0935  3001               	movlw	1
  9940  0936                     u5035:	
  9941  0936  36A1               	lsrf	___wmul@multiplier+1,f
  9942  0937  0CA0               	rrf	___wmul@multiplier,f
  9943  0938  0B89               	decfsz	9,f
  9944  0939  2936               	goto	u5035
  9945  093A  0820               	movf	___wmul@multiplier,w
  9946  093B  0421               	iorwf	___wmul@multiplier+1,w
  9947  093C  1D03               	btfss	3,2
  9948  093D  292A               	goto	l6484
  9949  093E  0825               	movf	___wmul@product+1,w
  9950  093F  00A1               	movwf	?___wmul+1
  9951  0940  0824               	movf	___wmul@product,w
  9952  0941  00A0               	movwf	?___wmul
  9953  0942  0008               	return
  9954  0943                     __end_of___wmul:	
  9955                           
  9956                           	psect	text20
  9957  0E65                     __ptext20:	
  9958 ;; *************** function ___awdiv *****************
  9959 ;; Defined at:
  9960 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\awdiv.c"
  9961 ;; Parameters:    Size  Location     Type
  9962 ;;  divisor         2    6[BANK0 ] int 
  9963 ;;  dividend        2    8[BANK0 ] int 
  9964 ;; Auto vars:     Size  Location     Type
  9965 ;;  quotient        2   13[BANK0 ] int 
  9966 ;;  sign            1   12[BANK0 ] unsigned char 
  9967 ;;  counter         1   11[BANK0 ] unsigned char 
  9968 ;; Return value:  Size  Location     Type
  9969 ;;                  2    6[BANK0 ] int 
  9970 ;; Registers used:
  9971 ;;		wreg, status,2, status,0
  9972 ;; Tracked objects:
  9973 ;;		On entry : 0/0
  9974 ;;		On exit  : 0/0
  9975 ;;		Unchanged: 0/0
  9976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9977 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9978 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9979 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9980 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9981 ;;Total ram usage:        9 bytes
  9982 ;; Hardware stack levels used:    1
  9983 ;; Hardware stack levels required when called:    5
  9984 ;; This function calls:
  9985 ;;		Nothing
  9986 ;; This function is called by:
  9987 ;;		_processGestureData
  9988 ;; This function uses a non-reentrant model
  9989 ;;
  9990                           
  9991                           
  9992                           ;psect for function ___awdiv
  9993  0E65                     ___awdiv:	
  9994                           
  9995                           ;incstack = 0
  9996                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  9997  0E65  0020               	movlb	0	; select bank0
  9998  0E66  01AC               	clrf	___awdiv@sign
  9999  0E67  1FA7               	btfss	___awdiv@divisor+1,7
 10000  0E68  2E70               	goto	l6504
 10001  0E69  09A6               	comf	___awdiv@divisor,f
 10002  0E6A  09A7               	comf	___awdiv@divisor+1,f
 10003  0E6B  0AA6               	incf	___awdiv@divisor,f
 10004  0E6C  1903               	skipnz
 10005  0E6D  0AA7               	incf	___awdiv@divisor+1,f
 10006  0E6E  01AC               	clrf	___awdiv@sign
 10007  0E6F  0AAC               	incf	___awdiv@sign,f
 10008  0E70                     l6504:	
 10009  0E70  1FA9               	btfss	___awdiv@dividend+1,7
 10010  0E71  2E7B               	goto	l6510
 10011  0E72  09A8               	comf	___awdiv@dividend,f
 10012  0E73  09A9               	comf	___awdiv@dividend+1,f
 10013  0E74  0AA8               	incf	___awdiv@dividend,f
 10014  0E75  1903               	skipnz
 10015  0E76  0AA9               	incf	___awdiv@dividend+1,f
 10016  0E77  3001               	movlw	1
 10017  0E78  00AA               	movwf	??___awdiv
 10018  0E79  082A               	movf	??___awdiv,w
 10019  0E7A  06AC               	xorwf	___awdiv@sign,f
 10020  0E7B                     l6510:	
 10021  0E7B  01AD               	clrf	___awdiv@quotient
 10022  0E7C  01AE               	clrf	___awdiv@quotient+1
 10023  0E7D  0826               	movf	___awdiv@divisor,w
 10024  0E7E  0427               	iorwf	___awdiv@divisor+1,w
 10025  0E7F  1903               	btfsc	3,2
 10026  0E80  2EAA               	goto	l6532
 10027  0E81  01AB               	clrf	___awdiv@counter
 10028  0E82  0AAB               	incf	___awdiv@counter,f
 10029  0E83                     l6520:	
 10030  0E83  1BA7               	btfsc	___awdiv@divisor+1,7
 10031  0E84  2E8F               	goto	l6522
 10032  0E85  3001               	movlw	1
 10033  0E86                     u5085:	
 10034  0E86  35A6               	lslf	___awdiv@divisor,f
 10035  0E87  0DA7               	rlf	___awdiv@divisor+1,f
 10036  0E88  0B89               	decfsz	9,f
 10037  0E89  2E86               	goto	u5085
 10038  0E8A  3001               	movlw	1
 10039  0E8B  00AA               	movwf	??___awdiv
 10040  0E8C  082A               	movf	??___awdiv,w
 10041  0E8D  07AB               	addwf	___awdiv@counter,f
 10042  0E8E  2E83               	goto	l6520
 10043  0E8F                     l6522:	
 10044  0E8F  3001               	movlw	1
 10045  0E90                     u5105:	
 10046  0E90  35AD               	lslf	___awdiv@quotient,f
 10047  0E91  0DAE               	rlf	___awdiv@quotient+1,f
 10048  0E92  0B89               	decfsz	9,f
 10049  0E93  2E90               	goto	u5105
 10050  0E94  0827               	movf	___awdiv@divisor+1,w
 10051  0E95  0229               	subwf	___awdiv@dividend+1,w
 10052  0E96  1D03               	skipz
 10053  0E97  2E9A               	goto	u5115
 10054  0E98  0826               	movf	___awdiv@divisor,w
 10055  0E99  0228               	subwf	___awdiv@dividend,w
 10056  0E9A                     u5115:	
 10057  0E9A  1C03               	skipc
 10058  0E9B  2EA1               	goto	l6528
 10059  0E9C  0826               	movf	___awdiv@divisor,w
 10060  0E9D  02A8               	subwf	___awdiv@dividend,f
 10061  0E9E  0827               	movf	___awdiv@divisor+1,w
 10062  0E9F  3BA9               	subwfb	___awdiv@dividend+1,f
 10063  0EA0  142D               	bsf	___awdiv@quotient,0
 10064  0EA1                     l6528:	
 10065  0EA1  3001               	movlw	1
 10066  0EA2                     u5125:	
 10067  0EA2  36A7               	lsrf	___awdiv@divisor+1,f
 10068  0EA3  0CA6               	rrf	___awdiv@divisor,f
 10069  0EA4  0B89               	decfsz	9,f
 10070  0EA5  2EA2               	goto	u5125
 10071  0EA6  3001               	movlw	1
 10072  0EA7  02AB               	subwf	___awdiv@counter,f
 10073  0EA8  1D03               	btfss	3,2
 10074  0EA9  2E8F               	goto	l6522
 10075  0EAA                     l6532:	
 10076  0EAA  082C               	movf	___awdiv@sign,w
 10077  0EAB  1903               	btfsc	3,2
 10078  0EAC  2EB2               	goto	l6536
 10079  0EAD  09AD               	comf	___awdiv@quotient,f
 10080  0EAE  09AE               	comf	___awdiv@quotient+1,f
 10081  0EAF  0AAD               	incf	___awdiv@quotient,f
 10082  0EB0  1903               	skipnz
 10083  0EB1  0AAE               	incf	___awdiv@quotient+1,f
 10084  0EB2                     l6536:	
 10085  0EB2  082E               	movf	___awdiv@quotient+1,w
 10086  0EB3  00A7               	movwf	?___awdiv+1
 10087  0EB4  082D               	movf	___awdiv@quotient,w
 10088  0EB5  00A6               	movwf	?___awdiv
 10089  0EB6  0008               	return
 10090  0EB7                     __end_of___awdiv:	
 10091                           
 10092                           	psect	text21
 10093  0800                     __ptext21:	
 10094 ;; *************** function _isGestureAvailable *****************
 10095 ;; Defined at:
 10096 ;;		line 537 in file "APDS9960.c"
 10097 ;; Parameters:    Size  Location     Type
 10098 ;;		None
 10099 ;; Auto vars:     Size  Location     Type
 10100 ;;  val             1   10[BANK0 ] unsigned char 
 10101 ;; Return value:  Size  Location     Type
 10102 ;;                  1    wreg      _Bool 
 10103 ;; Registers used:
 10104 ;;		wreg, status,2, status,0, pclath, cstack
 10105 ;; Tracked objects:
 10106 ;;		On entry : 0/0
 10107 ;;		On exit  : 0/0
 10108 ;;		Unchanged: 0/0
 10109 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10110 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10111 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10112 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10113 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10114 ;;Total ram usage:        2 bytes
 10115 ;; Hardware stack levels used:    1
 10116 ;; Hardware stack levels required when called:    8
 10117 ;; This function calls:
 10118 ;;		_wireReadDataByte
 10119 ;; This function is called by:
 10120 ;;		_main
 10121 ;;		_readGesture
 10122 ;; This function uses a non-reentrant model
 10123 ;;
 10124                           
 10125                           
 10126                           ;psect for function _isGestureAvailable
 10127  0800                     _isGestureAvailable:	
 10128                           
 10129                           ;APDS9960.c: 539:     uint8_t val;;APDS9960.c: 542:     val=wireReadDataByte(0xAF);
 10130                           
 10131                           ;incstack = 0
 10132                           ; Regs used in _isGestureAvailable: [wreg+status,2+status,0+pclath+cstack]
 10133  0800  30AF               	movlw	175
 10134  0801  3189  219D  3188   	fcall	_wireReadDataByte
 10135  0804  0020               	movlb	0	; select bank0
 10136  0805  00A9               	movwf	??_isGestureAvailable
 10137  0806  0829               	movf	??_isGestureAvailable,w
 10138  0807  00AA               	movwf	isGestureAvailable@val
 10139                           
 10140                           ;APDS9960.c: 545:     val &= 0b00000001;
 10141  0808  3001               	movlw	1
 10142  0809  00A9               	movwf	??_isGestureAvailable
 10143  080A  0829               	movf	??_isGestureAvailable,w
 10144  080B  05AA               	andwf	isGestureAvailable@val,f
 10145                           
 10146                           ;APDS9960.c: 548:     if( val == 1) {
 10147  080C  032A               	decf	isGestureAvailable@val,w
 10148  080D  1D03               	btfss	3,2
 10149  080E  2811               	goto	l6568
 10150                           
 10151                           ;APDS9960.c: 549:         return 1;
 10152  080F  3001               	movlw	1
 10153  0810  0008               	return
 10154  0811                     l6568:	
 10155                           
 10156                           ;APDS9960.c: 551:         return 0;
 10157  0811  3000               	movlw	0
 10158  0812  0008               	return
 10159  0813                     __end_of_isGestureAvailable:	
 10160                           
 10161                           	psect	text22
 10162  035C                     __ptext22:	
 10163 ;; *************** function _decodeGesture *****************
 10164 ;; Defined at:
 10165 ;;		line 795 in file "APDS9960.c"
 10166 ;; Parameters:    Size  Location     Type
 10167 ;;		None
 10168 ;; Auto vars:     Size  Location     Type
 10169 ;;		None
 10170 ;; Return value:  Size  Location     Type
 10171 ;;                  1    wreg      _Bool 
 10172 ;; Registers used:
 10173 ;;		wreg, status,2, status,0
 10174 ;; Tracked objects:
 10175 ;;		On entry : 0/0
 10176 ;;		On exit  : 0/0
 10177 ;;		Unchanged: 0/0
 10178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10179 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10180 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10181 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10182 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10183 ;;Total ram usage:       18 bytes
 10184 ;; Hardware stack levels used:    1
 10185 ;; Hardware stack levels required when called:    5
 10186 ;; This function calls:
 10187 ;;		Nothing
 10188 ;; This function is called by:
 10189 ;;		_readGesture
 10190 ;; This function uses a non-reentrant model
 10191 ;;
 10192                           
 10193                           
 10194                           ;psect for function _decodeGesture
 10195  035C                     _decodeGesture:	
 10196                           
 10197                           ;APDS9960.c: 798:     if( gesture_state_ == NEAR_STATE ) {
 10198                           
 10199                           ;incstack = 0
 10200                           ; Regs used in _decodeGesture: [wreg+status,2+status,0]
 10201  035C  0021               	movlb	1	; select bank1
 10202  035D  0362               	decf	_gesture_state_^(0+128),w
 10203  035E  0463               	iorwf	(_gesture_state_+1)^(0+128),w
 10204  035F  1D03               	btfss	3,2
 10205  0360  2B68               	goto	l6818
 10206                           
 10207                           ;APDS9960.c: 799:         gesture_motion_ = DIR_NEAR;
 10208  0361  3005               	movlw	5
 10209  0362  0022               	movlb	2	; select bank2
 10210  0363  00EE               	movwf	_gesture_motion_^(0+256)
 10211  0364  3000               	movlw	0
 10212  0365  00EF               	movwf	(_gesture_motion_^(0+256)+1)
 10213                           
 10214                           ;APDS9960.c: 800:         return 1;
 10215  0366  3001               	movlw	1
 10216  0367  0008               	return
 10217  0368                     l6818:	
 10218  0368  3002               	movlw	2
 10219  0369  0662               	xorwf	_gesture_state_^(0+128),w
 10220  036A  0463               	iorwf	(_gesture_state_+1)^(0+128),w
 10221  036B  1D03               	btfss	3,2
 10222  036C  2B74               	goto	l6824
 10223                           
 10224                           ;APDS9960.c: 802:         gesture_motion_ = DIR_FAR;
 10225  036D  3006               	movlw	6
 10226  036E  0022               	movlb	2	; select bank2
 10227  036F  00EE               	movwf	_gesture_motion_^(0+256)
 10228  0370  3000               	movlw	0
 10229  0371  00EF               	movwf	(_gesture_motion_^(0+256)+1)
 10230                           
 10231                           ;APDS9960.c: 803:         return 1;
 10232  0372  3001               	movlw	1
 10233  0373  0008               	return
 10234  0374                     l6824:	
 10235                           
 10236                           ;APDS9960.c: 807:     if( (gesture_ud_count_ == -1) && (gesture_lr_count_ == 0) ) {
 10237  0374  0020               	movlb	0	; select bank0
 10238  0375  0A64               	incf	_gesture_ud_count_,w
 10239  0376  1D03               	skipz
 10240  0377  2B81               	goto	l6830
 10241  0378  0A65               	incf	_gesture_ud_count_+1,w
 10242  0379  1D03               	btfss	3,2
 10243  037A  2B81               	goto	l6830
 10244  037B  0862               	movf	_gesture_lr_count_,w
 10245  037C  0463               	iorwf	_gesture_lr_count_+1,w
 10246  037D  1D03               	btfss	3,2
 10247  037E  2B81               	goto	l6830
 10248  037F                     l6828:	
 10249                           
 10250                           ;APDS9960.c: 808:         gesture_motion_ = DIR_UP;
 10251  037F  3003               	movlw	3
 10252  0380  2BA0               	goto	L7
 10253  0381                     l6830:	
 10254                           ;APDS9960.c: 809:     } else if( (gesture_ud_count_ == 1) && (gesture_lr_count_ == 0) ) 
      +                          {
 10255                           
 10256  0381  0364               	decf	_gesture_ud_count_,w
 10257  0382  0465               	iorwf	_gesture_ud_count_+1,w
 10258  0383  1D03               	btfss	3,2
 10259  0384  2B8B               	goto	l6836
 10260  0385  0862               	movf	_gesture_lr_count_,w
 10261  0386  0463               	iorwf	_gesture_lr_count_+1,w
 10262  0387  1D03               	btfss	3,2
 10263  0388  2B8B               	goto	l6836
 10264  0389                     l6834:	
 10265                           
 10266                           ;APDS9960.c: 810:         gesture_motion_ = DIR_DOWN;
 10267  0389  3004               	movlw	4
 10268  038A  2BA0               	goto	L7
 10269  038B                     l6836:	
 10270                           ;APDS9960.c: 811:     } else if( (gesture_ud_count_ == 0) && (gesture_lr_count_ == 1) ) 
      +                          {
 10271                           
 10272  038B  0864               	movf	_gesture_ud_count_,w
 10273  038C  0465               	iorwf	_gesture_ud_count_+1,w
 10274  038D  1D03               	btfss	3,2
 10275  038E  2B95               	goto	l6842
 10276  038F  0362               	decf	_gesture_lr_count_,w
 10277  0390  0463               	iorwf	_gesture_lr_count_+1,w
 10278  0391  1D03               	btfss	3,2
 10279  0392  2B95               	goto	l6842
 10280  0393                     l6840:	
 10281                           
 10282                           ;APDS9960.c: 812:         gesture_motion_ = DIR_RIGHT;
 10283  0393  3002               	movlw	2
 10284  0394  2BA0               	goto	L7
 10285  0395                     l6842:	
 10286                           ;APDS9960.c: 813:     } else if( (gesture_ud_count_ == 0) && (gesture_lr_count_ == -1) )
      +                           {
 10287                           
 10288  0395  0864               	movf	_gesture_ud_count_,w
 10289  0396  0465               	iorwf	_gesture_ud_count_+1,w
 10290  0397  1D03               	btfss	3,2
 10291  0398  2BA5               	goto	l6848
 10292  0399  0A62               	incf	_gesture_lr_count_,w
 10293  039A  1D03               	skipz
 10294  039B  2BA5               	goto	l6848
 10295  039C  0A63               	incf	_gesture_lr_count_+1,w
 10296  039D  1D03               	btfss	3,2
 10297  039E  2BA5               	goto	l6848
 10298  039F                     l6846:	
 10299                           
 10300                           ;APDS9960.c: 814:         gesture_motion_ = DIR_LEFT;
 10301  039F  3001               	movlw	1
 10302  03A0                     L7:	
 10303  03A0  0022               	movlb	2	; select bank2
 10304  03A1  00EE               	movwf	_gesture_motion_^(0+256)
 10305  03A2  3000               	movlw	0
 10306  03A3  00EF               	movwf	(_gesture_motion_^(0+256)+1)
 10307                           
 10308                           ;APDS9960.c: 815:     } else if( (gesture_ud_count_ == -1) && (gesture_lr_count_ == 1) )
      +                           {
 10309  03A4  2CEB               	goto	l6924
 10310  03A5                     l6848:	
 10311  03A5  0A64               	incf	_gesture_ud_count_,w
 10312  03A6  1D03               	skipz
 10313  03A7  2BF6               	goto	l6866
 10314  03A8  0A65               	incf	_gesture_ud_count_+1,w
 10315  03A9  1D03               	btfss	3,2
 10316  03AA  2BF6               	goto	l6866
 10317  03AB  0362               	decf	_gesture_lr_count_,w
 10318  03AC  0463               	iorwf	_gesture_lr_count_+1,w
 10319  03AD  1D03               	btfss	3,2
 10320  03AE  2BF6               	goto	l6866
 10321                           
 10322                           ;APDS9960.c: 816:         if( ((gesture_ud_delta_) > 0 ? (gesture_ud_delta_) : -(gesture
      +                          _ud_delta_)) > ((gesture_lr_delta_) > 0 ? (gesture_lr_delta_) : -(gesture_lr_delta_)) ) 
      +                          {
 10323  03AF  0869               	movf	_gesture_ud_delta_+1,w
 10324  03B0  3A80               	xorlw	128
 10325  03B1  00A0               	movwf	??_decodeGesture
 10326  03B2  3080               	movlw	128
 10327  03B3  0220               	subwf	??_decodeGesture,w
 10328  03B4  1D03               	skipz
 10329  03B5  2BB8               	goto	u5845
 10330  03B6  3001               	movlw	1
 10331  03B7  0268               	subwf	_gesture_ud_delta_,w
 10332  03B8                     u5845:	
 10333  03B8  1803               	skipnc
 10334  03B9  2BC7               	goto	l6856
 10335  03BA  0020               	movlb	0	; select bank0
 10336  03BB  0968               	comf	_gesture_ud_delta_,w
 10337  03BC  00A0               	movwf	??_decodeGesture
 10338  03BD  0969               	comf	_gesture_ud_delta_+1,w
 10339  03BE  00A1               	movwf	??_decodeGesture+1
 10340  03BF  0AA0               	incf	??_decodeGesture,f
 10341  03C0  1903               	skipnz
 10342  03C1  0AA1               	incf	??_decodeGesture+1,f
 10343  03C2  0820               	movf	??_decodeGesture,w
 10344  03C3  00A2               	movwf	_decodeGesture$1692
 10345  03C4  0821               	movf	??_decodeGesture+1,w
 10346  03C5  00A3               	movwf	_decodeGesture$1692+1
 10347  03C6  2BCC               	goto	l1189
 10348  03C7                     l6856:	
 10349  03C7  0020               	movlb	0	; select bank0
 10350  03C8  0869               	movf	_gesture_ud_delta_+1,w
 10351  03C9  00A3               	movwf	_decodeGesture$1692+1
 10352  03CA  0868               	movf	_gesture_ud_delta_,w
 10353  03CB  00A2               	movwf	_decodeGesture$1692
 10354  03CC                     l1189:	
 10355  03CC  0867               	movf	_gesture_lr_delta_+1,w
 10356  03CD  3A80               	xorlw	128
 10357  03CE  00A0               	movwf	??_decodeGesture
 10358  03CF  3080               	movlw	128
 10359  03D0  0220               	subwf	??_decodeGesture,w
 10360  03D1  1D03               	skipz
 10361  03D2  2BD5               	goto	u5855
 10362  03D3  3001               	movlw	1
 10363  03D4  0266               	subwf	_gesture_lr_delta_,w
 10364  03D5                     u5855:	
 10365  03D5  1803               	skipnc
 10366  03D6  2BE4               	goto	l6860
 10367  03D7  0020               	movlb	0	; select bank0
 10368  03D8  0966               	comf	_gesture_lr_delta_,w
 10369  03D9  00A0               	movwf	??_decodeGesture
 10370  03DA  0967               	comf	_gesture_lr_delta_+1,w
 10371  03DB  00A1               	movwf	??_decodeGesture+1
 10372  03DC  0AA0               	incf	??_decodeGesture,f
 10373  03DD  1903               	skipnz
 10374  03DE  0AA1               	incf	??_decodeGesture+1,f
 10375  03DF  0820               	movf	??_decodeGesture,w
 10376  03E0  00A4               	movwf	_decodeGesture$1693
 10377  03E1  0821               	movf	??_decodeGesture+1,w
 10378  03E2  00A5               	movwf	_decodeGesture$1693+1
 10379  03E3  2BE9               	goto	l1193
 10380  03E4                     l6860:	
 10381  03E4  0020               	movlb	0	; select bank0
 10382  03E5  0867               	movf	_gesture_lr_delta_+1,w
 10383  03E6  00A5               	movwf	_decodeGesture$1693+1
 10384  03E7  0866               	movf	_gesture_lr_delta_,w
 10385  03E8  00A4               	movwf	_decodeGesture$1693
 10386  03E9                     l1193:	
 10387  03E9  0825               	movf	_decodeGesture$1693+1,w
 10388  03EA  3A80               	xorlw	128
 10389  03EB  00A0               	movwf	??_decodeGesture
 10390  03EC  0823               	movf	_decodeGesture$1692+1,w
 10391  03ED  3A80               	xorlw	128
 10392  03EE  0220               	subwf	??_decodeGesture,w
 10393  03EF  1D03               	skipz
 10394  03F0  2BF3               	goto	u5865
 10395  03F1  0822               	movf	_decodeGesture$1692,w
 10396  03F2  0224               	subwf	_decodeGesture$1693,w
 10397  03F3                     u5865:	
 10398  03F3  1C03               	btfss	3,0
 10399  03F4  2B7F               	goto	l6828
 10400  03F5  2B93               	goto	l6840
 10401  03F6                     l6866:	
 10402  03F6  0364               	decf	_gesture_ud_count_,w
 10403  03F7  0465               	iorwf	_gesture_ud_count_+1,w
 10404  03F8  1D03               	btfss	3,2
 10405  03F9  2C47               	goto	l6884
 10406  03FA  0A62               	incf	_gesture_lr_count_,w
 10407  03FB  1D03               	skipz
 10408  03FC  2C47               	goto	l6884
 10409  03FD  0A63               	incf	_gesture_lr_count_+1,w
 10410  03FE  1D03               	btfss	3,2
 10411  03FF  2C47               	goto	l6884
 10412                           
 10413                           ;APDS9960.c: 822:         if( ((gesture_ud_delta_) > 0 ? (gesture_ud_delta_) : -(gesture
      +                          _ud_delta_)) > ((gesture_lr_delta_) > 0 ? (gesture_lr_delta_) : -(gesture_lr_delta_)) ) 
      +                          {
 10414  0400  0869               	movf	_gesture_ud_delta_+1,w
 10415  0401  3A80               	xorlw	128
 10416  0402  00A0               	movwf	??_decodeGesture
 10417  0403  3080               	movlw	128
 10418  0404  0220               	subwf	??_decodeGesture,w
 10419  0405  1D03               	skipz
 10420  0406  2C09               	goto	u5895
 10421  0407  3001               	movlw	1
 10422  0408  0268               	subwf	_gesture_ud_delta_,w
 10423  0409                     u5895:	
 10424  0409  1803               	skipnc
 10425  040A  2C18               	goto	l6874
 10426  040B  0020               	movlb	0	; select bank0
 10427  040C  0968               	comf	_gesture_ud_delta_,w
 10428  040D  00A0               	movwf	??_decodeGesture
 10429  040E  0969               	comf	_gesture_ud_delta_+1,w
 10430  040F  00A1               	movwf	??_decodeGesture+1
 10431  0410  0AA0               	incf	??_decodeGesture,f
 10432  0411  1903               	skipnz
 10433  0412  0AA1               	incf	??_decodeGesture+1,f
 10434  0413  0820               	movf	??_decodeGesture,w
 10435  0414  00A6               	movwf	_decodeGesture$1694
 10436  0415  0821               	movf	??_decodeGesture+1,w
 10437  0416  00A7               	movwf	_decodeGesture$1694+1
 10438  0417  2C1D               	goto	l1201
 10439  0418                     l6874:	
 10440  0418  0020               	movlb	0	; select bank0
 10441  0419  0869               	movf	_gesture_ud_delta_+1,w
 10442  041A  00A7               	movwf	_decodeGesture$1694+1
 10443  041B  0868               	movf	_gesture_ud_delta_,w
 10444  041C  00A6               	movwf	_decodeGesture$1694
 10445  041D                     l1201:	
 10446  041D  0867               	movf	_gesture_lr_delta_+1,w
 10447  041E  3A80               	xorlw	128
 10448  041F  00A0               	movwf	??_decodeGesture
 10449  0420  3080               	movlw	128
 10450  0421  0220               	subwf	??_decodeGesture,w
 10451  0422  1D03               	skipz
 10452  0423  2C26               	goto	u5905
 10453  0424  3001               	movlw	1
 10454  0425  0266               	subwf	_gesture_lr_delta_,w
 10455  0426                     u5905:	
 10456  0426  1803               	skipnc
 10457  0427  2C35               	goto	l6878
 10458  0428  0020               	movlb	0	; select bank0
 10459  0429  0966               	comf	_gesture_lr_delta_,w
 10460  042A  00A0               	movwf	??_decodeGesture
 10461  042B  0967               	comf	_gesture_lr_delta_+1,w
 10462  042C  00A1               	movwf	??_decodeGesture+1
 10463  042D  0AA0               	incf	??_decodeGesture,f
 10464  042E  1903               	skipnz
 10465  042F  0AA1               	incf	??_decodeGesture+1,f
 10466  0430  0820               	movf	??_decodeGesture,w
 10467  0431  00A8               	movwf	_decodeGesture$1695
 10468  0432  0821               	movf	??_decodeGesture+1,w
 10469  0433  00A9               	movwf	_decodeGesture$1695+1
 10470  0434  2C3A               	goto	l1205
 10471  0435                     l6878:	
 10472  0435  0020               	movlb	0	; select bank0
 10473  0436  0867               	movf	_gesture_lr_delta_+1,w
 10474  0437  00A9               	movwf	_decodeGesture$1695+1
 10475  0438  0866               	movf	_gesture_lr_delta_,w
 10476  0439  00A8               	movwf	_decodeGesture$1695
 10477  043A                     l1205:	
 10478  043A  0829               	movf	_decodeGesture$1695+1,w
 10479  043B  3A80               	xorlw	128
 10480  043C  00A0               	movwf	??_decodeGesture
 10481  043D  0827               	movf	_decodeGesture$1694+1,w
 10482  043E  3A80               	xorlw	128
 10483  043F  0220               	subwf	??_decodeGesture,w
 10484  0440  1D03               	skipz
 10485  0441  2C44               	goto	u5915
 10486  0442  0826               	movf	_decodeGesture$1694,w
 10487  0443  0228               	subwf	_decodeGesture$1695,w
 10488  0444                     u5915:	
 10489  0444  1C03               	btfss	3,0
 10490  0445  2B89               	goto	l6834
 10491  0446  2B9F               	goto	l6846
 10492  0447                     l6884:	
 10493  0447  0A64               	incf	_gesture_ud_count_,w
 10494  0448  1D03               	skipz
 10495  0449  2C9A               	goto	l6902
 10496  044A  0A65               	incf	_gesture_ud_count_+1,w
 10497  044B  1D03               	btfss	3,2
 10498  044C  2C9A               	goto	l6902
 10499  044D  0A62               	incf	_gesture_lr_count_,w
 10500  044E  1D03               	skipz
 10501  044F  2C9A               	goto	l6902
 10502  0450  0A63               	incf	_gesture_lr_count_+1,w
 10503  0451  1D03               	btfss	3,2
 10504  0452  2C9A               	goto	l6902
 10505                           
 10506                           ;APDS9960.c: 828:         if( ((gesture_ud_delta_) > 0 ? (gesture_ud_delta_) : -(gesture
      +                          _ud_delta_)) > ((gesture_lr_delta_) > 0 ? (gesture_lr_delta_) : -(gesture_lr_delta_)) ) 
      +                          {
 10507  0453  0869               	movf	_gesture_ud_delta_+1,w
 10508  0454  3A80               	xorlw	128
 10509  0455  00A0               	movwf	??_decodeGesture
 10510  0456  3080               	movlw	128
 10511  0457  0220               	subwf	??_decodeGesture,w
 10512  0458  1D03               	skipz
 10513  0459  2C5C               	goto	u5945
 10514  045A  3001               	movlw	1
 10515  045B  0268               	subwf	_gesture_ud_delta_,w
 10516  045C                     u5945:	
 10517  045C  1803               	skipnc
 10518  045D  2C6B               	goto	l6892
 10519  045E  0020               	movlb	0	; select bank0
 10520  045F  0968               	comf	_gesture_ud_delta_,w
 10521  0460  00A0               	movwf	??_decodeGesture
 10522  0461  0969               	comf	_gesture_ud_delta_+1,w
 10523  0462  00A1               	movwf	??_decodeGesture+1
 10524  0463  0AA0               	incf	??_decodeGesture,f
 10525  0464  1903               	skipnz
 10526  0465  0AA1               	incf	??_decodeGesture+1,f
 10527  0466  0820               	movf	??_decodeGesture,w
 10528  0467  00AA               	movwf	_decodeGesture$1696
 10529  0468  0821               	movf	??_decodeGesture+1,w
 10530  0469  00AB               	movwf	_decodeGesture$1696+1
 10531  046A  2C70               	goto	l1213
 10532  046B                     l6892:	
 10533  046B  0020               	movlb	0	; select bank0
 10534  046C  0869               	movf	_gesture_ud_delta_+1,w
 10535  046D  00AB               	movwf	_decodeGesture$1696+1
 10536  046E  0868               	movf	_gesture_ud_delta_,w
 10537  046F  00AA               	movwf	_decodeGesture$1696
 10538  0470                     l1213:	
 10539  0470  0867               	movf	_gesture_lr_delta_+1,w
 10540  0471  3A80               	xorlw	128
 10541  0472  00A0               	movwf	??_decodeGesture
 10542  0473  3080               	movlw	128
 10543  0474  0220               	subwf	??_decodeGesture,w
 10544  0475  1D03               	skipz
 10545  0476  2C79               	goto	u5955
 10546  0477  3001               	movlw	1
 10547  0478  0266               	subwf	_gesture_lr_delta_,w
 10548  0479                     u5955:	
 10549  0479  1803               	skipnc
 10550  047A  2C88               	goto	l6896
 10551  047B  0020               	movlb	0	; select bank0
 10552  047C  0966               	comf	_gesture_lr_delta_,w
 10553  047D  00A0               	movwf	??_decodeGesture
 10554  047E  0967               	comf	_gesture_lr_delta_+1,w
 10555  047F  00A1               	movwf	??_decodeGesture+1
 10556  0480  0AA0               	incf	??_decodeGesture,f
 10557  0481  1903               	skipnz
 10558  0482  0AA1               	incf	??_decodeGesture+1,f
 10559  0483  0820               	movf	??_decodeGesture,w
 10560  0484  00AC               	movwf	_decodeGesture$1697
 10561  0485  0821               	movf	??_decodeGesture+1,w
 10562  0486  00AD               	movwf	_decodeGesture$1697+1
 10563  0487  2C8D               	goto	l1217
 10564  0488                     l6896:	
 10565  0488  0020               	movlb	0	; select bank0
 10566  0489  0867               	movf	_gesture_lr_delta_+1,w
 10567  048A  00AD               	movwf	_decodeGesture$1697+1
 10568  048B  0866               	movf	_gesture_lr_delta_,w
 10569  048C  00AC               	movwf	_decodeGesture$1697
 10570  048D                     l1217:	
 10571  048D  082D               	movf	_decodeGesture$1697+1,w
 10572  048E  3A80               	xorlw	128
 10573  048F  00A0               	movwf	??_decodeGesture
 10574  0490  082B               	movf	_decodeGesture$1696+1,w
 10575  0491  3A80               	xorlw	128
 10576  0492  0220               	subwf	??_decodeGesture,w
 10577  0493  1D03               	skipz
 10578  0494  2C97               	goto	u5965
 10579  0495  082A               	movf	_decodeGesture$1696,w
 10580  0496  022C               	subwf	_decodeGesture$1697,w
 10581  0497                     u5965:	
 10582  0497  1C03               	btfss	3,0
 10583  0498  2B7F               	goto	l6828
 10584  0499  2B9F               	goto	l6846
 10585  049A                     l6902:	
 10586  049A  0364               	decf	_gesture_ud_count_,w
 10587  049B  0465               	iorwf	_gesture_ud_count_+1,w
 10588  049C  1D03               	btfss	3,2
 10589  049D  2CE9               	goto	l6920
 10590  049E  0362               	decf	_gesture_lr_count_,w
 10591  049F  0463               	iorwf	_gesture_lr_count_+1,w
 10592  04A0  1D03               	btfss	3,2
 10593  04A1  2CE9               	goto	l6920
 10594                           
 10595                           ;APDS9960.c: 834:         if( ((gesture_ud_delta_) > 0 ? (gesture_ud_delta_) : -(gesture
      +                          _ud_delta_)) > ((gesture_lr_delta_) > 0 ? (gesture_lr_delta_) : -(gesture_lr_delta_)) ) 
      +                          {
 10596  04A2  0869               	movf	_gesture_ud_delta_+1,w
 10597  04A3  3A80               	xorlw	128
 10598  04A4  00A0               	movwf	??_decodeGesture
 10599  04A5  3080               	movlw	128
 10600  04A6  0220               	subwf	??_decodeGesture,w
 10601  04A7  1D03               	skipz
 10602  04A8  2CAB               	goto	u5995
 10603  04A9  3001               	movlw	1
 10604  04AA  0268               	subwf	_gesture_ud_delta_,w
 10605  04AB                     u5995:	
 10606  04AB  1803               	skipnc
 10607  04AC  2CBA               	goto	l6910
 10608  04AD  0020               	movlb	0	; select bank0
 10609  04AE  0968               	comf	_gesture_ud_delta_,w
 10610  04AF  00A0               	movwf	??_decodeGesture
 10611  04B0  0969               	comf	_gesture_ud_delta_+1,w
 10612  04B1  00A1               	movwf	??_decodeGesture+1
 10613  04B2  0AA0               	incf	??_decodeGesture,f
 10614  04B3  1903               	skipnz
 10615  04B4  0AA1               	incf	??_decodeGesture+1,f
 10616  04B5  0820               	movf	??_decodeGesture,w
 10617  04B6  00AE               	movwf	_decodeGesture$1698
 10618  04B7  0821               	movf	??_decodeGesture+1,w
 10619  04B8  00AF               	movwf	_decodeGesture$1698+1
 10620  04B9  2CBF               	goto	l1225
 10621  04BA                     l6910:	
 10622  04BA  0020               	movlb	0	; select bank0
 10623  04BB  0869               	movf	_gesture_ud_delta_+1,w
 10624  04BC  00AF               	movwf	_decodeGesture$1698+1
 10625  04BD  0868               	movf	_gesture_ud_delta_,w
 10626  04BE  00AE               	movwf	_decodeGesture$1698
 10627  04BF                     l1225:	
 10628  04BF  0867               	movf	_gesture_lr_delta_+1,w
 10629  04C0  3A80               	xorlw	128
 10630  04C1  00A0               	movwf	??_decodeGesture
 10631  04C2  3080               	movlw	128
 10632  04C3  0220               	subwf	??_decodeGesture,w
 10633  04C4  1D03               	skipz
 10634  04C5  2CC8               	goto	u6005
 10635  04C6  3001               	movlw	1
 10636  04C7  0266               	subwf	_gesture_lr_delta_,w
 10637  04C8                     u6005:	
 10638  04C8  1803               	skipnc
 10639  04C9  2CD7               	goto	l6914
 10640  04CA  0020               	movlb	0	; select bank0
 10641  04CB  0966               	comf	_gesture_lr_delta_,w
 10642  04CC  00A0               	movwf	??_decodeGesture
 10643  04CD  0967               	comf	_gesture_lr_delta_+1,w
 10644  04CE  00A1               	movwf	??_decodeGesture+1
 10645  04CF  0AA0               	incf	??_decodeGesture,f
 10646  04D0  1903               	skipnz
 10647  04D1  0AA1               	incf	??_decodeGesture+1,f
 10648  04D2  0820               	movf	??_decodeGesture,w
 10649  04D3  00B0               	movwf	_decodeGesture$1699
 10650  04D4  0821               	movf	??_decodeGesture+1,w
 10651  04D5  00B1               	movwf	_decodeGesture$1699+1
 10652  04D6  2CDC               	goto	l1229
 10653  04D7                     l6914:	
 10654  04D7  0020               	movlb	0	; select bank0
 10655  04D8  0867               	movf	_gesture_lr_delta_+1,w
 10656  04D9  00B1               	movwf	_decodeGesture$1699+1
 10657  04DA  0866               	movf	_gesture_lr_delta_,w
 10658  04DB  00B0               	movwf	_decodeGesture$1699
 10659  04DC                     l1229:	
 10660  04DC  0831               	movf	_decodeGesture$1699+1,w
 10661  04DD  3A80               	xorlw	128
 10662  04DE  00A0               	movwf	??_decodeGesture
 10663  04DF  082F               	movf	_decodeGesture$1698+1,w
 10664  04E0  3A80               	xorlw	128
 10665  04E1  0220               	subwf	??_decodeGesture,w
 10666  04E2  1D03               	skipz
 10667  04E3  2CE6               	goto	u6015
 10668  04E4  082E               	movf	_decodeGesture$1698,w
 10669  04E5  0230               	subwf	_decodeGesture$1699,w
 10670  04E6                     u6015:	
 10671  04E6  1C03               	btfss	3,0
 10672  04E7  2B89               	goto	l6834
 10673  04E8  2B93               	goto	l6840
 10674  04E9                     l6920:	
 10675                           
 10676                           ;APDS9960.c: 840:         return 0;
 10677  04E9  3000               	movlw	0
 10678  04EA  0008               	return
 10679  04EB                     l6924:	
 10680                           
 10681                           ;APDS9960.c: 843:     return 1;
 10682  04EB  3001               	movlw	1
 10683  04EC  0008               	return
 10684  04ED                     __end_of_decodeGesture:	
 10685                           
 10686                           	psect	text23
 10687  0F15                     __ptext23:	
 10688 ;; *************** function _enableGestureSensor *****************
 10689 ;; Defined at:
 10690 ;;		line 409 in file "APDS9960.c"
 10691 ;; Parameters:    Size  Location     Type
 10692 ;;  interrupts      1    wreg     _Bool 
 10693 ;; Auto vars:     Size  Location     Type
 10694 ;;  interrupts      1   17[BANK0 ] _Bool 
 10695 ;; Return value:  Size  Location     Type
 10696 ;;                  1    wreg      _Bool 
 10697 ;; Registers used:
 10698 ;;		wreg, status,2, status,0, pclath, cstack
 10699 ;; Tracked objects:
 10700 ;;		On entry : 0/0
 10701 ;;		On exit  : 0/0
 10702 ;;		Unchanged: 0/0
 10703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10704 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10705 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10706 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10707 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10708 ;;Total ram usage:        2 bytes
 10709 ;; Hardware stack levels used:    1
 10710 ;; Hardware stack levels required when called:   11
 10711 ;; This function calls:
 10712 ;;		_enablePower
 10713 ;;		_resetGestureParameters
 10714 ;;		_setGestureIntEnable
 10715 ;;		_setGestureMode
 10716 ;;		_setLEDBoost
 10717 ;;		_setMode
 10718 ;;		_wireWriteDataByte
 10719 ;; This function is called by:
 10720 ;;		_main
 10721 ;; This function uses a non-reentrant model
 10722 ;;
 10723                           
 10724                           
 10725                           ;psect for function _enableGestureSensor
 10726  0F15                     _enableGestureSensor:	
 10727                           
 10728                           ;incstack = 0
 10729                           ; Regs used in _enableGestureSensor: [wreg+status,2+status,0+pclath+cstack]
 10730                           ;enableGestureSensor@interrupts stored from wreg
 10731  0F15  0020               	movlb	0	; select bank0
 10732  0F16  00B1               	movwf	enableGestureSensor@interrupts
 10733                           
 10734                           ;APDS9960.c: 409: _Bool enableGestureSensor ( _Bool interrupts);APDS9960.c: 410: {;APDS9
      +                          960.c: 418:     resetGestureParameters();
 10735  0F17  3188  20A6  318F   	fcall	_resetGestureParameters
 10736                           
 10737                           ;APDS9960.c: 419:     if( !wireWriteDataByte(0x83, 0xFF) ) {
 10738  0F1A  30FF               	movlw	255
 10739  0F1B  0020               	movlb	0	; select bank0
 10740  0F1C  00B0               	movwf	??_enableGestureSensor
 10741  0F1D  0830               	movf	??_enableGestureSensor,w
 10742  0F1E  00A6               	movwf	wireWriteDataByte@val
 10743  0F1F  3083               	movlw	131
 10744  0F20  3188  20F0  318F   	fcall	_wireWriteDataByte
 10745  0F23  0020               	movlb	0	; select bank0
 10746  0F24  0826               	movf	?_wireWriteDataByte,w
 10747  0F25  0427               	iorwf	?_wireWriteDataByte+1,w
 10748  0F26  1903               	btfsc	3,2
 10749  0F27  2F2B               	goto	l7602
 10750  0F28  2F2D               	goto	l7606
 10751  0F29                     l7620:	
 10752                           
 10753                           ;APDS9960.c: 429:         if( !setGestureIntEnable(1) ) {
 10754  0F29  3001               	movlw	1
 10755  0F2A  2F46               	goto	L8
 10756  0F2B                     l7602:	
 10757                           
 10758                           ;APDS9960.c: 420:         return 0;
 10759  0F2B  3000               	movlw	0
 10760  0F2C  0008               	return
 10761  0F2D                     l7606:	
 10762                           
 10763                           ;APDS9960.c: 422:     if( !wireWriteDataByte(0x8E, 0x89) ) {
 10764  0F2D  3089               	movlw	137
 10765  0F2E  00B0               	movwf	??_enableGestureSensor
 10766  0F2F  0830               	movf	??_enableGestureSensor,w
 10767  0F30  00A6               	movwf	wireWriteDataByte@val
 10768  0F31  308E               	movlw	142
 10769  0F32  3188  20F0  318F   	fcall	_wireWriteDataByte
 10770  0F35  0020               	movlb	0	; select bank0
 10771  0F36  0826               	movf	?_wireWriteDataByte,w
 10772  0F37  0427               	iorwf	?_wireWriteDataByte+1,w
 10773  0F38  1903               	btfsc	3,2
 10774  0F39  2F2B               	goto	l7602
 10775                           
 10776                           ;APDS9960.c: 425:     if( !setLEDBoost(3) ) {
 10777  0F3A  3003               	movlw	3
 10778  0F3B  318B  235C  318F   	fcall	_setLEDBoost
 10779  0F3E  3A00               	xorlw	0
 10780  0F3F  1903               	btfsc	3,2
 10781  0F40  2F2B               	goto	l7602
 10782                           
 10783                           ;APDS9960.c: 428:     if( interrupts ) {
 10784  0F41  0020               	movlb	0	; select bank0
 10785  0F42  0831               	movf	enableGestureSensor@interrupts,w
 10786  0F43  1D03               	btfss	3,2
 10787  0F44  2F29               	goto	l7620
 10788                           
 10789                           ;APDS9960.c: 433:         if( !setGestureIntEnable(0) ) {
 10790  0F45  3000               	movlw	0
 10791  0F46                     L8:	
 10792  0F46  318B  2300  318F   	fcall	_setGestureIntEnable
 10793  0F49  3A00               	xorlw	0
 10794  0F4A  1903               	btfsc	3,2
 10795  0F4B  2F2B               	goto	l7602
 10796                           
 10797                           ;APDS9960.c: 437:     if( !setGestureMode(1) ) {
 10798  0F4C  3001               	movlw	1
 10799  0F4D  3189  21E7  318F   	fcall	_setGestureMode
 10800  0F50  3A00               	xorlw	0
 10801  0F51  1903               	btfsc	3,2
 10802  0F52  2F2B               	goto	l7602
 10803                           
 10804                           ;APDS9960.c: 440:     if( !enablePower() ){
 10805  0F53  3197  27C3  318F   	fcall	_enablePower
 10806  0F56  3A00               	xorlw	0
 10807  0F57  1903               	btfsc	3,2
 10808  0F58  2F2B               	goto	l7602
 10809                           
 10810                           ;APDS9960.c: 443:     if( !setMode(3, 1) ) {
 10811  0F59  0020               	movlb	0	; select bank0
 10812  0F5A  01AB               	clrf	setMode@enable
 10813  0F5B  0AAB               	incf	setMode@enable,f
 10814  0F5C  3003               	movlw	3
 10815  0F5D  318E  2616  318F   	fcall	_setMode
 10816  0F60  3A00               	xorlw	0
 10817  0F61  1903               	btfsc	3,2
 10818  0F62  2F2B               	goto	l7602
 10819                           
 10820                           ;APDS9960.c: 446:     if( !setMode(2, 1) ) {
 10821  0F63  0020               	movlb	0	; select bank0
 10822  0F64  01AB               	clrf	setMode@enable
 10823  0F65  0AAB               	incf	setMode@enable,f
 10824  0F66  3002               	movlw	2
 10825  0F67  318E  2616  318F   	fcall	_setMode
 10826  0F6A  3A00               	xorlw	0
 10827  0F6B  1903               	btfsc	3,2
 10828  0F6C  2F2B               	goto	l7602
 10829                           
 10830                           ;APDS9960.c: 449:     if( !setMode(6, 1) ) {
 10831  0F6D  0020               	movlb	0	; select bank0
 10832  0F6E  01AB               	clrf	setMode@enable
 10833  0F6F  0AAB               	incf	setMode@enable,f
 10834  0F70  3006               	movlw	6
 10835  0F71  318E  2616  318F   	fcall	_setMode
 10836  0F74  3A00               	xorlw	0
 10837  0F75  1903               	btfsc	3,2
 10838  0F76  2F2B               	goto	l7602
 10839                           
 10840                           ;APDS9960.c: 453:     return 1;
 10841  0F77  3001               	movlw	1
 10842  0F78  0008               	return
 10843  0F79                     __end_of_enableGestureSensor:	
 10844                           
 10845                           	psect	text24
 10846  0B5C                     __ptext24:	
 10847 ;; *************** function _setLEDBoost *****************
 10848 ;; Defined at:
 10849 ;;		line 484 in file "APDS9960.c"
 10850 ;; Parameters:    Size  Location     Type
 10851 ;;  boost           1    wreg     unsigned char 
 10852 ;; Auto vars:     Size  Location     Type
 10853 ;;  boost           1   13[BANK0 ] unsigned char 
 10854 ;;  val             1   12[BANK0 ] unsigned char 
 10855 ;; Return value:  Size  Location     Type
 10856 ;;                  1    wreg      _Bool 
 10857 ;; Registers used:
 10858 ;;		wreg, status,2, status,0, pclath, cstack
 10859 ;; Tracked objects:
 10860 ;;		On entry : 0/0
 10861 ;;		On exit  : 0/0
 10862 ;;		Unchanged: 0/0
 10863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10864 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10865 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10866 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10867 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10868 ;;Total ram usage:        4 bytes
 10869 ;; Hardware stack levels used:    1
 10870 ;; Hardware stack levels required when called:    8
 10871 ;; This function calls:
 10872 ;;		_wireReadDataByte
 10873 ;;		_wireWriteDataByte
 10874 ;; This function is called by:
 10875 ;;		_enableGestureSensor
 10876 ;; This function uses a non-reentrant model
 10877 ;;
 10878                           
 10879                           
 10880                           ;psect for function _setLEDBoost
 10881  0B5C                     _setLEDBoost:	
 10882                           
 10883                           ;incstack = 0
 10884                           ; Regs used in _setLEDBoost: [wreg+status,2+status,0+pclath+cstack]
 10885                           ;setLEDBoost@boost stored from wreg
 10886  0B5C  0020               	movlb	0	; select bank0
 10887  0B5D  00AD               	movwf	setLEDBoost@boost
 10888                           
 10889                           ;APDS9960.c: 484: _Bool setLEDBoost(uint8_t boost);APDS9960.c: 485: {;APDS9960.c: 486:  
      +                             uint8_t val;;APDS9960.c: 489:     val=wireReadDataByte(0x90);
 10890  0B5E  3090               	movlw	144
 10891  0B5F  3189  219D  318B   	fcall	_wireReadDataByte
 10892  0B62  0020               	movlb	0	; select bank0
 10893  0B63  00AA               	movwf	??_setLEDBoost
 10894  0B64  082A               	movf	??_setLEDBoost,w
 10895  0B65  00AC               	movwf	setLEDBoost@val
 10896                           
 10897                           ;APDS9960.c: 492:     boost &= 0b00000011;
 10898  0B66  3003               	movlw	3
 10899  0B67  00AA               	movwf	??_setLEDBoost
 10900  0B68  082A               	movf	??_setLEDBoost,w
 10901  0B69  05AD               	andwf	setLEDBoost@boost,f
 10902                           
 10903                           ;APDS9960.c: 493:     boost = boost << 4;
 10904  0B6A  082D               	movf	setLEDBoost@boost,w
 10905  0B6B  00AA               	movwf	??_setLEDBoost
 10906  0B6C  3003               	movlw	3
 10907  0B6D                     u6305:	
 10908  0B6D  35AA               	lslf	??_setLEDBoost,f
 10909  0B6E  3EFF               	addlw	-1
 10910  0B6F  1D03               	skipz
 10911  0B70  2B6D               	goto	u6305
 10912  0B71  352A               	lslf	??_setLEDBoost,w
 10913  0B72  00AB               	movwf	??_setLEDBoost+1
 10914  0B73  082B               	movf	??_setLEDBoost+1,w
 10915  0B74  00AD               	movwf	setLEDBoost@boost
 10916                           
 10917                           ;APDS9960.c: 494:     val &= 0b11001111;
 10918  0B75  30CF               	movlw	207
 10919  0B76  00AA               	movwf	??_setLEDBoost
 10920  0B77  082A               	movf	??_setLEDBoost,w
 10921  0B78  05AC               	andwf	setLEDBoost@val,f
 10922                           
 10923                           ;APDS9960.c: 495:     val |= boost;
 10924  0B79  082D               	movf	setLEDBoost@boost,w
 10925  0B7A  00AA               	movwf	??_setLEDBoost
 10926  0B7B  082A               	movf	??_setLEDBoost,w
 10927  0B7C  04AC               	iorwf	setLEDBoost@val,f
 10928                           
 10929                           ;APDS9960.c: 498:     if( !wireWriteDataByte(0x90, val) ) {
 10930  0B7D  082C               	movf	setLEDBoost@val,w
 10931  0B7E  00AA               	movwf	??_setLEDBoost
 10932  0B7F  082A               	movf	??_setLEDBoost,w
 10933  0B80  00A6               	movwf	wireWriteDataByte@val
 10934  0B81  3090               	movlw	144
 10935  0B82  3188  20F0  318B   	fcall	_wireWriteDataByte
 10936  0B85  0020               	movlb	0	; select bank0
 10937  0B86  0826               	movf	?_wireWriteDataByte,w
 10938  0B87  0427               	iorwf	?_wireWriteDataByte+1,w
 10939  0B88  1D03               	btfss	3,2
 10940  0B89  2B8C               	goto	l7370
 10941                           
 10942                           ;APDS9960.c: 499:         return 0;
 10943  0B8A  3000               	movlw	0
 10944  0B8B  0008               	return
 10945  0B8C                     l7370:	
 10946                           
 10947                           ;APDS9960.c: 502:     return 1;
 10948  0B8C  3001               	movlw	1
 10949  0B8D  0008               	return
 10950  0B8E                     __end_of_setLEDBoost:	
 10951                           
 10952                           	psect	text25
 10953  09E7                     __ptext25:	
 10954 ;; *************** function _setGestureMode *****************
 10955 ;; Defined at:
 10956 ;;		line 506 in file "APDS9960.c"
 10957 ;; Parameters:    Size  Location     Type
 10958 ;;  mode            1    wreg     unsigned char 
 10959 ;; Auto vars:     Size  Location     Type
 10960 ;;  mode            1   11[BANK0 ] unsigned char 
 10961 ;;  val             1   12[BANK0 ] unsigned char 
 10962 ;; Return value:  Size  Location     Type
 10963 ;;                  1    wreg      _Bool 
 10964 ;; Registers used:
 10965 ;;		wreg, status,2, status,0, pclath, cstack
 10966 ;; Tracked objects:
 10967 ;;		On entry : 0/0
 10968 ;;		On exit  : 0/0
 10969 ;;		Unchanged: 0/0
 10970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10971 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10972 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10973 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10974 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10975 ;;Total ram usage:        3 bytes
 10976 ;; Hardware stack levels used:    1
 10977 ;; Hardware stack levels required when called:    8
 10978 ;; This function calls:
 10979 ;;		_wireReadDataByte
 10980 ;;		_wireWriteDataByte
 10981 ;; This function is called by:
 10982 ;;		_enableGestureSensor
 10983 ;; This function uses a non-reentrant model
 10984 ;;
 10985                           
 10986                           
 10987                           ;psect for function _setGestureMode
 10988  09E7                     _setGestureMode:	
 10989                           
 10990                           ;incstack = 0
 10991                           ; Regs used in _setGestureMode: [wreg+status,2+status,0+pclath+cstack]
 10992                           ;setGestureMode@mode stored from wreg
 10993  09E7  0020               	movlb	0	; select bank0
 10994  09E8  00AB               	movwf	setGestureMode@mode
 10995                           
 10996                           ;APDS9960.c: 506: _Bool setGestureMode(uint8_t mode);APDS9960.c: 507: {;APDS9960.c: 508:
      +                               uint8_t val;;APDS9960.c: 511:     val = wireReadDataByte(0xAB);
 10997  09E9  30AB               	movlw	171
 10998  09EA  3189  219D  3189   	fcall	_wireReadDataByte
 10999  09ED  0020               	movlb	0	; select bank0
 11000  09EE  00AA               	movwf	??_setGestureMode
 11001  09EF  082A               	movf	??_setGestureMode,w
 11002  09F0  00AC               	movwf	setGestureMode@val
 11003                           
 11004                           ;APDS9960.c: 514:     mode &= 0b00000001;
 11005  09F1  3001               	movlw	1
 11006  09F2  00AA               	movwf	??_setGestureMode
 11007  09F3  082A               	movf	??_setGestureMode,w
 11008  09F4  05AB               	andwf	setGestureMode@mode,f
 11009                           
 11010                           ;APDS9960.c: 515:     val &= 0b11111110;
 11011  09F5  30FE               	movlw	254
 11012  09F6  00AA               	movwf	??_setGestureMode
 11013  09F7  082A               	movf	??_setGestureMode,w
 11014  09F8  05AC               	andwf	setGestureMode@val,f
 11015                           
 11016                           ;APDS9960.c: 516:     val |= mode;
 11017  09F9  082B               	movf	setGestureMode@mode,w
 11018  09FA  00AA               	movwf	??_setGestureMode
 11019  09FB  082A               	movf	??_setGestureMode,w
 11020  09FC  04AC               	iorwf	setGestureMode@val,f
 11021                           
 11022                           ;APDS9960.c: 519:     if( !wireWriteDataByte(0xAB, val) ) {
 11023  09FD  082C               	movf	setGestureMode@val,w
 11024  09FE  00AA               	movwf	??_setGestureMode
 11025  09FF  082A               	movf	??_setGestureMode,w
 11026  0A00  00A6               	movwf	wireWriteDataByte@val
 11027  0A01  30AB               	movlw	171
 11028  0A02  3188  20F0  3189   	fcall	_wireWriteDataByte
 11029  0A05  0020               	movlb	0	; select bank0
 11030  0A06  0826               	movf	?_wireWriteDataByte,w
 11031  0A07  0427               	iorwf	?_wireWriteDataByte+1,w
 11032  0A08  1D03               	btfss	3,2
 11033  0A09  2A0C               	goto	l7388
 11034                           
 11035                           ;APDS9960.c: 520:         return 0;
 11036  0A0A  3000               	movlw	0
 11037  0A0B  0008               	return
 11038  0A0C                     l7388:	
 11039                           
 11040                           ;APDS9960.c: 523:     return 1;
 11041  0A0C  3001               	movlw	1
 11042  0A0D  0008               	return
 11043  0A0E                     __end_of_setGestureMode:	
 11044                           
 11045                           	psect	text26
 11046  0B00                     __ptext26:	
 11047 ;; *************** function _setGestureIntEnable *****************
 11048 ;; Defined at:
 11049 ;;		line 387 in file "APDS9960.c"
 11050 ;; Parameters:    Size  Location     Type
 11051 ;;  enable          1    wreg     unsigned char 
 11052 ;; Auto vars:     Size  Location     Type
 11053 ;;  enable          1   12[BANK0 ] unsigned char 
 11054 ;;  val             1   11[BANK0 ] unsigned char 
 11055 ;; Return value:  Size  Location     Type
 11056 ;;                  1    wreg      _Bool 
 11057 ;; Registers used:
 11058 ;;		wreg, status,2, status,0, pclath, cstack
 11059 ;; Tracked objects:
 11060 ;;		On entry : 0/0
 11061 ;;		On exit  : 0/0
 11062 ;;		Unchanged: 0/0
 11063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11064 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11065 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11066 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11067 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11068 ;;Total ram usage:        3 bytes
 11069 ;; Hardware stack levels used:    1
 11070 ;; Hardware stack levels required when called:    8
 11071 ;; This function calls:
 11072 ;;		_wireReadDataByte
 11073 ;;		_wireWriteDataByte
 11074 ;; This function is called by:
 11075 ;;		_initialize
 11076 ;;		_enableGestureSensor
 11077 ;; This function uses a non-reentrant model
 11078 ;;
 11079                           
 11080                           
 11081                           ;psect for function _setGestureIntEnable
 11082  0B00                     _setGestureIntEnable:	
 11083                           
 11084                           ;incstack = 0
 11085                           ; Regs used in _setGestureIntEnable: [wreg+status,2+status,0+pclath+cstack]
 11086                           ;setGestureIntEnable@enable stored from wreg
 11087  0B00  0020               	movlb	0	; select bank0
 11088  0B01  00AC               	movwf	setGestureIntEnable@enable
 11089                           
 11090                           ;APDS9960.c: 387: _Bool setGestureIntEnable(uint8_t enable);APDS9960.c: 388: {;APDS9960.
      +                          c: 389:     uint8_t val;;APDS9960.c: 392:     val = wireReadDataByte(0xAB);
 11091  0B02  30AB               	movlw	171
 11092  0B03  3189  219D  318B   	fcall	_wireReadDataByte
 11093  0B06  0020               	movlb	0	; select bank0
 11094  0B07  00AA               	movwf	??_setGestureIntEnable
 11095  0B08  082A               	movf	??_setGestureIntEnable,w
 11096  0B09  00AB               	movwf	setGestureIntEnable@val
 11097                           
 11098                           ;APDS9960.c: 395:     enable &= 0b00000001;
 11099  0B0A  3001               	movlw	1
 11100  0B0B  00AA               	movwf	??_setGestureIntEnable
 11101  0B0C  082A               	movf	??_setGestureIntEnable,w
 11102  0B0D  05AC               	andwf	setGestureIntEnable@enable,f
 11103                           
 11104                           ;APDS9960.c: 396:     enable = enable << 1;
 11105  0B0E  352C               	lslf	setGestureIntEnable@enable,w
 11106  0B0F  00AA               	movwf	??_setGestureIntEnable
 11107  0B10  082A               	movf	??_setGestureIntEnable,w
 11108  0B11  00AC               	movwf	setGestureIntEnable@enable
 11109                           
 11110                           ;APDS9960.c: 397:     val &= 0b11111101;
 11111  0B12  30FD               	movlw	253
 11112  0B13  00AA               	movwf	??_setGestureIntEnable
 11113  0B14  082A               	movf	??_setGestureIntEnable,w
 11114  0B15  05AB               	andwf	setGestureIntEnable@val,f
 11115                           
 11116                           ;APDS9960.c: 398:     val |= enable;
 11117  0B16  082C               	movf	setGestureIntEnable@enable,w
 11118  0B17  00AA               	movwf	??_setGestureIntEnable
 11119  0B18  082A               	movf	??_setGestureIntEnable,w
 11120  0B19  04AB               	iorwf	setGestureIntEnable@val,f
 11121                           
 11122                           ;APDS9960.c: 401:     if( !wireWriteDataByte(0xAB, val) ) {
 11123  0B1A  082B               	movf	setGestureIntEnable@val,w
 11124  0B1B  00AA               	movwf	??_setGestureIntEnable
 11125  0B1C  082A               	movf	??_setGestureIntEnable,w
 11126  0B1D  00A6               	movwf	wireWriteDataByte@val
 11127  0B1E  30AB               	movlw	171
 11128  0B1F  3188  20F0  318B   	fcall	_wireWriteDataByte
 11129  0B22  0020               	movlb	0	; select bank0
 11130  0B23  0826               	movf	?_wireWriteDataByte,w
 11131  0B24  0427               	iorwf	?_wireWriteDataByte+1,w
 11132  0B25  1D03               	btfss	3,2
 11133  0B26  2B29               	goto	l7352
 11134                           
 11135                           ;APDS9960.c: 402:         return 0;
 11136  0B27  3000               	movlw	0
 11137  0B28  0008               	return
 11138  0B29                     l7352:	
 11139                           
 11140                           ;APDS9960.c: 405:     return 1;
 11141  0B29  3001               	movlw	1
 11142  0B2A  0008               	return
 11143  0B2B                     __end_of_setGestureIntEnable:	
 11144                           
 11145                           	psect	text27
 11146  08A6                     __ptext27:	
 11147 ;; *************** function _resetGestureParameters *****************
 11148 ;; Defined at:
 11149 ;;		line 457 in file "APDS9960.c"
 11150 ;; Parameters:    Size  Location     Type
 11151 ;;		None
 11152 ;; Auto vars:     Size  Location     Type
 11153 ;;		None
 11154 ;; Return value:  Size  Location     Type
 11155 ;;                  1    wreg      void 
 11156 ;; Registers used:
 11157 ;;		status,2
 11158 ;; Tracked objects:
 11159 ;;		On entry : 0/0
 11160 ;;		On exit  : 0/0
 11161 ;;		Unchanged: 0/0
 11162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11163 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11164 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11165 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11166 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11167 ;;Total ram usage:        0 bytes
 11168 ;; Hardware stack levels used:    1
 11169 ;; Hardware stack levels required when called:    5
 11170 ;; This function calls:
 11171 ;;		Nothing
 11172 ;; This function is called by:
 11173 ;;		_enableGestureSensor
 11174 ;;		_readGesture
 11175 ;; This function uses a non-reentrant model
 11176 ;;
 11177                           
 11178                           
 11179                           ;psect for function _resetGestureParameters
 11180  08A6                     _resetGestureParameters:	
 11181                           
 11182                           ;APDS9960.c: 460:     gesture_data_.index = 0;
 11183                           
 11184                           ;incstack = 0
 11185                           ; Regs used in _resetGestureParameters: [status,2]
 11186  08A6  0024               	movlb	4	; select bank4
 11187  08A7  01E0               	clrf	(_gesture_data_^(0+512)+64)
 11188                           
 11189                           ;APDS9960.c: 461:     gesture_data_.total_gestures = 0;
 11190  08A8  01E1               	clrf	(_gesture_data_^(0+512)+65)
 11191                           
 11192                           ;APDS9960.c: 463:     gesture_ud_delta_ = 0;
 11193  08A9  0020               	movlb	0	; select bank0
 11194  08AA  01E8               	clrf	_gesture_ud_delta_
 11195  08AB  01E9               	clrf	_gesture_ud_delta_+1
 11196                           
 11197                           ;APDS9960.c: 464:     gesture_lr_delta_ = 0;
 11198  08AC  01E6               	clrf	_gesture_lr_delta_
 11199  08AD  01E7               	clrf	_gesture_lr_delta_+1
 11200                           
 11201                           ;APDS9960.c: 466:     gesture_ud_count_ = 0;
 11202  08AE  01E4               	clrf	_gesture_ud_count_
 11203  08AF  01E5               	clrf	_gesture_ud_count_+1
 11204                           
 11205                           ;APDS9960.c: 467:     gesture_lr_count_ = 0;
 11206  08B0  01E2               	clrf	_gesture_lr_count_
 11207  08B1  01E3               	clrf	_gesture_lr_count_+1
 11208                           
 11209                           ;APDS9960.c: 469:     gesture_near_count_ = 0;
 11210  08B2  0021               	movlb	1	; select bank1
 11211  08B3  01E6               	clrf	_gesture_near_count_^(0+128)
 11212  08B4  01E7               	clrf	(_gesture_near_count_+1)^(0+128)
 11213                           
 11214                           ;APDS9960.c: 470:     gesture_far_count_ = 0;
 11215  08B5  01E4               	clrf	_gesture_far_count_^(0+128)
 11216  08B6  01E5               	clrf	(_gesture_far_count_+1)^(0+128)
 11217                           
 11218                           ;APDS9960.c: 472:     gesture_state_ = 0;
 11219  08B7  01E2               	clrf	_gesture_state_^(0+128)
 11220  08B8  01E3               	clrf	(_gesture_state_+1)^(0+128)
 11221                           
 11222                           ;APDS9960.c: 473:     gesture_motion_ = DIR_NONE;
 11223  08B9  0022               	movlb	2	; select bank2
 11224  08BA  01EE               	clrf	_gesture_motion_^(0+256)
 11225  08BB  01EF               	clrf	(_gesture_motion_+1)^(0+256)
 11226  08BC  0008               	return
 11227  08BD                     __end_of_resetGestureParameters:	
 11228                           
 11229                           	psect	text28
 11230  17C3                     __ptext28:	
 11231 ;; *************** function _enablePower *****************
 11232 ;; Defined at:
 11233 ;;		line 527 in file "APDS9960.c"
 11234 ;; Parameters:    Size  Location     Type
 11235 ;;		None
 11236 ;; Auto vars:     Size  Location     Type
 11237 ;;		None
 11238 ;; Return value:  Size  Location     Type
 11239 ;;                  1    wreg      _Bool 
 11240 ;; Registers used:
 11241 ;;		wreg, status,2, status,0, pclath, cstack
 11242 ;; Tracked objects:
 11243 ;;		On entry : 0/0
 11244 ;;		On exit  : 0/0
 11245 ;;		Unchanged: 0/0
 11246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11247 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11248 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11249 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11250 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11251 ;;Total ram usage:        0 bytes
 11252 ;; Hardware stack levels used:    1
 11253 ;; Hardware stack levels required when called:   10
 11254 ;; This function calls:
 11255 ;;		_setMode
 11256 ;; This function is called by:
 11257 ;;		_enableGestureSensor
 11258 ;; This function uses a non-reentrant model
 11259 ;;
 11260                           
 11261                           
 11262                           ;psect for function _enablePower
 11263  17C3                     _enablePower:	
 11264                           
 11265                           ;APDS9960.c: 529:     if( !setMode(0, 1) ) {
 11266                           
 11267                           ;incstack = 0
 11268                           ; Regs used in _enablePower: [wreg+status,2+status,0+pclath+cstack]
 11269  17C3  0020               	movlb	0	; select bank0
 11270  17C4  01AB               	clrf	setMode@enable
 11271  17C5  0AAB               	incf	setMode@enable,f
 11272  17C6  3000               	movlw	0
 11273  17C7  318E  2616  3197   	fcall	_setMode
 11274  17CA  3A00               	xorlw	0
 11275  17CB  1D03               	skipz
 11276  17CC  2FCF               	goto	l7398
 11277                           
 11278                           ;APDS9960.c: 530:         return 0;
 11279  17CD  3000               	movlw	0
 11280  17CE  0008               	return
 11281  17CF                     l7398:	
 11282                           
 11283                           ;APDS9960.c: 533:     return 1;
 11284  17CF  3001               	movlw	1
 11285  17D0  0008               	return
 11286  17D1                     __end_of_enablePower:	
 11287                           
 11288                           	psect	text29
 11289  0E16                     __ptext29:	
 11290 ;; *************** function _setMode *****************
 11291 ;; Defined at:
 11292 ;;		line 124 in file "APDS9960.c"
 11293 ;; Parameters:    Size  Location     Type
 11294 ;;  mode            1    wreg     unsigned char 
 11295 ;;  enable          1   11[BANK0 ] unsigned char 
 11296 ;; Auto vars:     Size  Location     Type
 11297 ;;  mode            1   15[BANK0 ] unsigned char 
 11298 ;;  reg_val         1   14[BANK0 ] unsigned char 
 11299 ;; Return value:  Size  Location     Type
 11300 ;;                  1    wreg      _Bool 
 11301 ;; Registers used:
 11302 ;;		wreg, status,2, status,0, pclath, cstack
 11303 ;; Tracked objects:
 11304 ;;		On entry : 0/0
 11305 ;;		On exit  : 0/0
 11306 ;;		Unchanged: 0/0
 11307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11308 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11309 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11310 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11311 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11312 ;;Total ram usage:        5 bytes
 11313 ;; Hardware stack levels used:    1
 11314 ;; Hardware stack levels required when called:    9
 11315 ;; This function calls:
 11316 ;;		_getMode
 11317 ;;		_wireWriteDataByte
 11318 ;; This function is called by:
 11319 ;;		_initialize
 11320 ;;		_enableGestureSensor
 11321 ;;		_enablePower
 11322 ;; This function uses a non-reentrant model
 11323 ;;
 11324                           
 11325                           
 11326                           ;psect for function _setMode
 11327  0E16                     _setMode:	
 11328                           
 11329                           ;incstack = 0
 11330                           ; Regs used in _setMode: [wreg+status,2+status,0+pclath+cstack]
 11331                           ;setMode@mode stored from wreg
 11332  0E16  0020               	movlb	0	; select bank0
 11333  0E17  00AF               	movwf	setMode@mode
 11334                           
 11335                           ;APDS9960.c: 124: _Bool setMode(uint8_t mode, uint8_t enable);APDS9960.c: 125: {;APDS996
      +                          0.c: 126:     uint8_t reg_val;;APDS9960.c: 129:     reg_val = getMode();
 11336  0E18  3197  278C  318E   	fcall	_getMode
 11337  0E1B  0020               	movlb	0	; select bank0
 11338  0E1C  00AC               	movwf	??_setMode
 11339  0E1D  082C               	movf	??_setMode,w
 11340  0E1E  00AE               	movwf	setMode@reg_val
 11341                           
 11342                           ;APDS9960.c: 130:     if( reg_val == 0xFF ) {
 11343  0E1F  0A2E               	incf	setMode@reg_val,w
 11344  0E20  1D03               	btfss	3,2
 11345  0E21  2E24               	goto	l6596
 11346  0E22                     l6592:	
 11347                           
 11348                           ;APDS9960.c: 131:         return 0;
 11349  0E22  3000               	movlw	0
 11350  0E23  0008               	return
 11351  0E24                     l6596:	
 11352                           
 11353                           ;APDS9960.c: 135:     enable = enable & 0x01;
 11354  0E24  082B               	movf	setMode@enable,w
 11355  0E25  3901               	andlw	1
 11356  0E26  00AC               	movwf	??_setMode
 11357  0E27  082C               	movf	??_setMode,w
 11358  0E28  00AB               	movwf	setMode@enable
 11359                           
 11360                           ;APDS9960.c: 136:     if( mode >= 0 && mode <= 6 ) {
 11361  0E29  3007               	movlw	7
 11362  0E2A  022F               	subwf	setMode@mode,w
 11363  0E2B  1803               	skipnc
 11364  0E2C  2E49               	goto	l6606
 11365                           
 11366                           ;APDS9960.c: 137:         if (enable) {
 11367  0E2D  082B               	movf	setMode@enable,w
 11368  0E2E  1903               	btfsc	3,2
 11369  0E2F  2E3C               	goto	l6604
 11370                           
 11371                           ;APDS9960.c: 138:             reg_val |= (1 << mode);
 11372  0E30  3001               	movlw	1
 11373  0E31  00AC               	movwf	??_setMode
 11374  0E32  0A2F               	incf	setMode@mode,w
 11375  0E33  2E35               	goto	u5224
 11376  0E34                     u5225:	
 11377  0E34  35AC               	lslf	??_setMode,f
 11378  0E35                     u5224:	
 11379  0E35  0B89               	decfsz	9,f
 11380  0E36  2E34               	goto	u5225
 11381  0E37  082C               	movf	??_setMode,w
 11382  0E38  00AD               	movwf	??_setMode+1
 11383  0E39  082D               	movf	??_setMode+1,w
 11384  0E3A  04AE               	iorwf	setMode@reg_val,f
 11385                           
 11386                           ;APDS9960.c: 139:         } else {
 11387  0E3B  2E56               	goto	l6614
 11388  0E3C                     l6604:	
 11389                           
 11390                           ;APDS9960.c: 140:             reg_val &= ~(1 << mode);
 11391  0E3C  3001               	movlw	1
 11392  0E3D  00AC               	movwf	??_setMode
 11393  0E3E  0A2F               	incf	setMode@mode,w
 11394  0E3F  2E41               	goto	u5234
 11395  0E40                     u5235:	
 11396  0E40  35AC               	lslf	??_setMode,f
 11397  0E41                     u5234:	
 11398  0E41  0B89               	decfsz	9,f
 11399  0E42  2E40               	goto	u5235
 11400  0E43  082C               	movf	??_setMode,w
 11401  0E44  3AFF               	xorlw	255
 11402  0E45  00AD               	movwf	??_setMode+1
 11403  0E46  082D               	movf	??_setMode+1,w
 11404  0E47  05AE               	andwf	setMode@reg_val,f
 11405  0E48  2E56               	goto	l6614
 11406  0E49                     l6606:	
 11407  0E49  3007               	movlw	7
 11408  0E4A  062F               	xorwf	setMode@mode,w
 11409  0E4B  1D03               	btfss	3,2
 11410  0E4C  2E56               	goto	l6614
 11411                           
 11412                           ;APDS9960.c: 143:         if (enable) {
 11413  0E4D  082B               	movf	setMode@enable,w
 11414  0E4E  1903               	btfsc	3,2
 11415  0E4F  2E55               	goto	l6612
 11416                           
 11417                           ;APDS9960.c: 144:             reg_val = 0x7F;
 11418  0E50  307F               	movlw	127
 11419  0E51  00AC               	movwf	??_setMode
 11420  0E52  082C               	movf	??_setMode,w
 11421  0E53  00AE               	movwf	setMode@reg_val
 11422                           
 11423                           ;APDS9960.c: 145:         } else {
 11424  0E54  2E56               	goto	l6614
 11425  0E55                     l6612:	
 11426                           
 11427                           ;APDS9960.c: 146:             reg_val = 0x00;
 11428  0E55  01AE               	clrf	setMode@reg_val
 11429  0E56                     l6614:	
 11430                           
 11431                           ;APDS9960.c: 151:     if( !wireWriteDataByte(0x80, reg_val) ) {
 11432  0E56  082E               	movf	setMode@reg_val,w
 11433  0E57  00AC               	movwf	??_setMode
 11434  0E58  082C               	movf	??_setMode,w
 11435  0E59  00A6               	movwf	wireWriteDataByte@val
 11436  0E5A  3080               	movlw	128
 11437  0E5B  3188  20F0  318E   	fcall	_wireWriteDataByte
 11438  0E5E  0020               	movlb	0	; select bank0
 11439  0E5F  0826               	movf	?_wireWriteDataByte,w
 11440  0E60  0427               	iorwf	?_wireWriteDataByte+1,w
 11441  0E61  1903               	btfsc	3,2
 11442  0E62  2E22               	goto	l6592
 11443                           
 11444                           ;APDS9960.c: 155:     return 1;
 11445  0E63  3001               	movlw	1
 11446  0E64  0008               	return
 11447  0E65                     __end_of_setMode:	
 11448                           
 11449                           	psect	text30
 11450  08F0                     __ptext30:	
 11451 ;; *************** function _wireWriteDataByte *****************
 11452 ;; Defined at:
 11453 ;;		line 871 in file "APDS9960.c"
 11454 ;; Parameters:    Size  Location     Type
 11455 ;;  reg             1    wreg     unsigned char 
 11456 ;;  val             1    6[BANK0 ] unsigned char 
 11457 ;; Auto vars:     Size  Location     Type
 11458 ;;  reg             1    9[BANK0 ] unsigned char 
 11459 ;; Return value:  Size  Location     Type
 11460 ;;                  2    6[BANK0 ] int 
 11461 ;; Registers used:
 11462 ;;		wreg, status,2, status,0, pclath, cstack
 11463 ;; Tracked objects:
 11464 ;;		On entry : 0/0
 11465 ;;		On exit  : 0/0
 11466 ;;		Unchanged: 0/0
 11467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11468 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11469 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11470 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11471 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11472 ;;Total ram usage:        4 bytes
 11473 ;; Hardware stack levels used:    1
 11474 ;; Hardware stack levels required when called:    7
 11475 ;; This function calls:
 11476 ;;		_I2C_Start
 11477 ;;		_I2C_Stop
 11478 ;;		_I2C_Write_Byte
 11479 ;; This function is called by:
 11480 ;;		_initialize
 11481 ;;		_setMode
 11482 ;;		_setLEDDrive
 11483 ;;		_setProximityGain
 11484 ;;		_setAmbientLightGain
 11485 ;;		_setProxIntLowThresh
 11486 ;;		_setProxIntHighThresh
 11487 ;;		_setLightIntLowThreshold
 11488 ;;		_setLightIntHighThreshold
 11489 ;;		_setGestureEnterThresh
 11490 ;;		_setGestureExitThresh
 11491 ;;		_setGestureGain
 11492 ;;		_setGestureLEDDrive
 11493 ;;		_setGestureWaitTime
 11494 ;;		_setGestureIntEnable
 11495 ;;		_enableGestureSensor
 11496 ;;		_setLEDBoost
 11497 ;;		_setGestureMode
 11498 ;; This function uses a non-reentrant model
 11499 ;;
 11500                           
 11501                           
 11502                           ;psect for function _wireWriteDataByte
 11503  08F0                     _wireWriteDataByte:	
 11504                           
 11505                           ;incstack = 0
 11506                           ; Regs used in _wireWriteDataByte: [wreg+status,2+status,0+pclath+cstack]
 11507                           ;wireWriteDataByte@reg stored from wreg
 11508  08F0  0020               	movlb	0	; select bank0
 11509  08F1  00A9               	movwf	wireWriteDataByte@reg
 11510                           
 11511                           ;APDS9960.c: 871: int wireWriteDataByte(unsigned char reg, unsigned char val);APDS9960.c
      +                          : 872: {;APDS9960.c: 882:     I2C_Start();
 11512  08F2  3196  26A1  3188   	fcall	_I2C_Start
 11513                           
 11514                           ;APDS9960.c: 883:     I2C_Write_Byte((0x39 << 1 )| 0x00);
 11515  08F5  3072               	movlw	114
 11516  08F6  3189  210B  3188   	fcall	_I2C_Write_Byte
 11517                           
 11518                           ;APDS9960.c: 884:     I2C_Write_Byte(reg);
 11519  08F9  0020               	movlb	0	; select bank0
 11520  08FA  0829               	movf	wireWriteDataByte@reg,w
 11521  08FB  3189  210B  3188   	fcall	_I2C_Write_Byte
 11522                           
 11523                           ;APDS9960.c: 885:     I2C_Write_Byte(val);
 11524  08FE  0020               	movlb	0	; select bank0
 11525  08FF  0826               	movf	wireWriteDataByte@val,w
 11526  0900  3189  210B  3188   	fcall	_I2C_Write_Byte
 11527                           
 11528                           ;APDS9960.c: 886:     I2C_Stop();
 11529  0903  3196  26A7         	fcall	_I2C_Stop
 11530                           
 11531                           ;APDS9960.c: 889:     return 1;
 11532  0905  3001               	movlw	1
 11533  0906  0020               	movlb	0	; select bank0
 11534  0907  00A6               	movwf	?_wireWriteDataByte
 11535  0908  3000               	movlw	0
 11536  0909  00A7               	movwf	?_wireWriteDataByte+1
 11537  090A  0008               	return
 11538  090B                     __end_of_wireWriteDataByte:	
 11539                           
 11540                           	psect	text31
 11541  178C                     __ptext31:	
 11542 ;; *************** function _getMode *****************
 11543 ;; Defined at:
 11544 ;;		line 159 in file "APDS9960.c"
 11545 ;; Parameters:    Size  Location     Type
 11546 ;;		None
 11547 ;; Auto vars:     Size  Location     Type
 11548 ;;  enable_value    1   10[BANK0 ] unsigned char 
 11549 ;; Return value:  Size  Location     Type
 11550 ;;                  1    wreg      unsigned char 
 11551 ;; Registers used:
 11552 ;;		wreg, status,2, status,0, pclath, cstack
 11553 ;; Tracked objects:
 11554 ;;		On entry : 0/0
 11555 ;;		On exit  : 0/0
 11556 ;;		Unchanged: 0/0
 11557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11558 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11559 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11560 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11561 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11562 ;;Total ram usage:        2 bytes
 11563 ;; Hardware stack levels used:    1
 11564 ;; Hardware stack levels required when called:    8
 11565 ;; This function calls:
 11566 ;;		_wireReadDataByte
 11567 ;; This function is called by:
 11568 ;;		_setMode
 11569 ;;		_readGesture
 11570 ;; This function uses a non-reentrant model
 11571 ;;
 11572                           
 11573                           
 11574                           ;psect for function _getMode
 11575  178C                     _getMode:	
 11576                           
 11577                           ;APDS9960.c: 161:     uint8_t enable_value;;APDS9960.c: 164:     enable_value = wireRead
      +                          DataByte(0x80);
 11578                           
 11579                           ;incstack = 0
 11580                           ; Regs used in _getMode: [wreg+status,2+status,0+pclath+cstack]
 11581  178C  3080               	movlw	128
 11582  178D  3189  219D         	fcall	_wireReadDataByte
 11583  178F  0020               	movlb	0	; select bank0
 11584  1790  00A9               	movwf	??_getMode
 11585  1791  0829               	movf	??_getMode,w
 11586  1792  00AA               	movwf	getMode@enable_value
 11587                           
 11588                           ;APDS9960.c: 166:     return enable_value;
 11589  1793  082A               	movf	getMode@enable_value,w
 11590  1794  0008               	return
 11591  1795                     __end_of_getMode:	
 11592                           
 11593                           	psect	text32
 11594  099D                     __ptext32:	
 11595 ;; *************** function _wireReadDataByte *****************
 11596 ;; Defined at:
 11597 ;;		line 893 in file "APDS9960.c"
 11598 ;; Parameters:    Size  Location     Type
 11599 ;;  reg             1    wreg     unsigned char 
 11600 ;; Auto vars:     Size  Location     Type
 11601 ;;  reg             1    7[BANK0 ] unsigned char 
 11602 ;;  val             1    8[BANK0 ] unsigned char 
 11603 ;; Return value:  Size  Location     Type
 11604 ;;                  1    wreg      unsigned char 
 11605 ;; Registers used:
 11606 ;;		wreg, status,2, status,0, pclath, cstack
 11607 ;; Tracked objects:
 11608 ;;		On entry : 0/0
 11609 ;;		On exit  : 0/0
 11610 ;;		Unchanged: 0/0
 11611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11612 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11613 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11614 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11615 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11616 ;;Total ram usage:        3 bytes
 11617 ;; Hardware stack levels used:    1
 11618 ;; Hardware stack levels required when called:    7
 11619 ;; This function calls:
 11620 ;;		_I2C_ReStart
 11621 ;;		_I2C_Read_Byte
 11622 ;;		_I2C_Send_NACK
 11623 ;;		_I2C_Start
 11624 ;;		_I2C_Stop
 11625 ;;		_I2C_Write_Byte
 11626 ;; This function is called by:
 11627 ;;		_initialize
 11628 ;;		_getMode
 11629 ;;		_setLEDDrive
 11630 ;;		_setProximityGain
 11631 ;;		_setAmbientLightGain
 11632 ;;		_setGestureGain
 11633 ;;		_setGestureLEDDrive
 11634 ;;		_setGestureWaitTime
 11635 ;;		_setGestureIntEnable
 11636 ;;		_setLEDBoost
 11637 ;;		_setGestureMode
 11638 ;;		_isGestureAvailable
 11639 ;;		_readGesture
 11640 ;; This function uses a non-reentrant model
 11641 ;;
 11642                           
 11643                           
 11644                           ;psect for function _wireReadDataByte
 11645  099D                     _wireReadDataByte:	
 11646                           
 11647                           ;incstack = 0
 11648                           ; Regs used in _wireReadDataByte: [wreg+status,2+status,0+pclath+cstack]
 11649                           ;wireReadDataByte@reg stored from wreg
 11650  099D  0020               	movlb	0	; select bank0
 11651  099E  00A7               	movwf	wireReadDataByte@reg
 11652                           
 11653                           ;APDS9960.c: 893:  unsigned char wireReadDataByte(unsigned char reg);APDS9960.c: 894: {;
      +                          APDS9960.c: 908:     unsigned char val;;APDS9960.c: 909:     I2C_Start();
 11654  099F  3196  26A1  3189   	fcall	_I2C_Start
 11655                           
 11656                           ;APDS9960.c: 910:     I2C_Write_Byte((0x39 << 1 )| 0x00);
 11657  09A2  3072               	movlw	114
 11658  09A3  3189  210B  3189   	fcall	_I2C_Write_Byte
 11659                           
 11660                           ;APDS9960.c: 911:     I2C_Write_Byte(reg);
 11661  09A6  0020               	movlb	0	; select bank0
 11662  09A7  0827               	movf	wireReadDataByte@reg,w
 11663  09A8  3189  210B  3189   	fcall	_I2C_Write_Byte
 11664                           
 11665                           ;APDS9960.c: 912:     I2C_ReStart();
 11666  09AB  3196  2692  3189   	fcall	_I2C_ReStart
 11667                           
 11668                           ;APDS9960.c: 914:     I2C_Write_Byte((0x39 << 1) | 0x01);
 11669  09AE  3073               	movlw	115
 11670  09AF  3189  210B  3189   	fcall	_I2C_Write_Byte
 11671                           
 11672                           ;APDS9960.c: 915:     val=I2C_Read_Byte();
 11673  09B2  3197  279F  3189   	fcall	_I2C_Read_Byte
 11674  09B5  0020               	movlb	0	; select bank0
 11675  09B6  00A6               	movwf	??_wireReadDataByte
 11676  09B7  0826               	movf	??_wireReadDataByte,w
 11677  09B8  00A8               	movwf	wireReadDataByte@val
 11678                           
 11679                           ;APDS9960.c: 916:     I2C_Send_NACK();
 11680  09B9  3196  269B  3189   	fcall	_I2C_Send_NACK
 11681                           
 11682                           ;APDS9960.c: 917:     I2C_Stop();
 11683  09BC  3196  26A7         	fcall	_I2C_Stop
 11684                           
 11685                           ;APDS9960.c: 919:     return val;
 11686  09BE  0020               	movlb	0	; select bank0
 11687  09BF  0828               	movf	wireReadDataByte@val,w
 11688  09C0  0008               	return
 11689  09C1                     __end_of_wireReadDataByte:	
 11690                           
 11691                           	psect	text33
 11692  090B                     __ptext33:	
 11693 ;; *************** function _I2C_Write_Byte *****************
 11694 ;; Defined at:
 11695 ;;		line 75 in file "i2c.c"
 11696 ;; Parameters:    Size  Location     Type
 11697 ;;  Byte            1    wreg     unsigned char 
 11698 ;; Auto vars:     Size  Location     Type
 11699 ;;  Byte            1    3[BANK0 ] unsigned char 
 11700 ;;  count           2    4[BANK0 ] unsigned int 
 11701 ;; Return value:  Size  Location     Type
 11702 ;;                  1    wreg      void 
 11703 ;; Registers used:
 11704 ;;		wreg, status,2, status,0, pclath, cstack
 11705 ;; Tracked objects:
 11706 ;;		On entry : 0/0
 11707 ;;		On exit  : 0/0
 11708 ;;		Unchanged: 0/0
 11709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11710 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11711 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11712 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11713 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11714 ;;Total ram usage:        5 bytes
 11715 ;; Hardware stack levels used:    1
 11716 ;; Hardware stack levels required when called:    6
 11717 ;; This function calls:
 11718 ;;		_i2c1_driver_TXData
 11719 ;; This function is called by:
 11720 ;;		_wireReadDataBlock
 11721 ;;		_wireWriteDataByte
 11722 ;;		_wireReadDataByte
 11723 ;; This function uses a non-reentrant model
 11724 ;;
 11725                           
 11726                           
 11727                           ;psect for function _I2C_Write_Byte
 11728  090B                     _I2C_Write_Byte:	
 11729                           
 11730                           ;incstack = 0
 11731                           ; Regs used in _I2C_Write_Byte: [wreg+status,2+status,0+pclath+cstack]
 11732                           ;I2C_Write_Byte@Byte stored from wreg
 11733  090B  0020               	movlb	0	; select bank0
 11734  090C  00A3               	movwf	I2C_Write_Byte@Byte
 11735                           
 11736                           ;i2c.c: 75: void I2C_Write_Byte(unsigned char Byte);i2c.c: 76: {;i2c.c: 80:     i2c1_dri
      +                          ver_TXData(Byte);
 11737  090D  0823               	movf	I2C_Write_Byte@Byte,w
 11738  090E  3196  26F0  3189   	fcall	_i2c1_driver_TXData
 11739                           
 11740                           ;i2c.c: 83:     unsigned int count = 0;
 11741  0911  0020               	movlb	0	; select bank0
 11742  0912  01A4               	clrf	I2C_Write_Byte@count
 11743  0913  01A5               	clrf	I2C_Write_Byte@count+1
 11744  0914                     l1296:	
 11745                           ;i2c.c: 84:     while(SSP1CON2bits.ACKSTAT);
 11746                           
 11747  0914  0024               	movlb	4	; select bank4
 11748  0915  1B16               	btfsc	22,6	;volatile
 11749  0916  2914               	goto	l1296
 11750  0917                     l6424:	
 11751  0917  0020               	movlb	0	; select bank0
 11752  0918  0825               	movf	I2C_Write_Byte@count+1,w
 11753  0919  00A2               	movwf	??_I2C_Write_Byte+1
 11754  091A  0824               	movf	I2C_Write_Byte@count,w
 11755  091B  00A1               	movwf	??_I2C_Write_Byte
 11756  091C  0AA4               	incf	I2C_Write_Byte@count,f
 11757  091D  1903               	skipnz
 11758  091E  0AA5               	incf	I2C_Write_Byte@count+1,f
 11759  091F  3000               	movlw	0
 11760  0920  0222               	subwf	??_I2C_Write_Byte+1,w
 11761  0921  3005               	movlw	5
 11762  0922  1903               	skipnz
 11763  0923  0221               	subwf	??_I2C_Write_Byte,w
 11764  0924  1803               	btfsc	3,0
 11765  0925  0008               	return
 11766  0926  2917               	goto	l6424
 11767  0927                     __end_of_I2C_Write_Byte:	
 11768                           
 11769                           	psect	text34
 11770  16F0                     __ptext34:	
 11771 ;; *************** function _i2c1_driver_TXData *****************
 11772 ;; Defined at:
 11773 ;;		line 186 in file "mcc_generated_files/i2c1_driver.c"
 11774 ;; Parameters:    Size  Location     Type
 11775 ;;  d               1    wreg     unsigned char 
 11776 ;; Auto vars:     Size  Location     Type
 11777 ;;  d               1    0[BANK0 ] unsigned char 
 11778 ;; Return value:  Size  Location     Type
 11779 ;;                  1    wreg      void 
 11780 ;; Registers used:
 11781 ;;		wreg
 11782 ;; Tracked objects:
 11783 ;;		On entry : 0/0
 11784 ;;		On exit  : 0/0
 11785 ;;		Unchanged: 0/0
 11786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11787 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11788 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11789 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11790 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11791 ;;Total ram usage:        1 bytes
 11792 ;; Hardware stack levels used:    1
 11793 ;; Hardware stack levels required when called:    5
 11794 ;; This function calls:
 11795 ;;		Nothing
 11796 ;; This function is called by:
 11797 ;;		_I2C_Write_Byte
 11798 ;; This function uses a non-reentrant model
 11799 ;;
 11800                           
 11801                           
 11802                           ;psect for function _i2c1_driver_TXData
 11803  16F0                     _i2c1_driver_TXData:	
 11804                           
 11805                           ;incstack = 0
 11806                           ; Regs used in _i2c1_driver_TXData: [wreg]
 11807                           ;i2c1_driver_TXData@d stored from wreg
 11808  16F0  0020               	movlb	0	; select bank0
 11809  16F1  00A0               	movwf	i2c1_driver_TXData@d
 11810                           
 11811                           ;mcc_generated_files/i2c1_driver.c: 186: __attribute__((inline)) void i2c1_driver_TXData
      +                          (char d);mcc_generated_files/i2c1_driver.c: 187: {;mcc_generated_files/i2c1_driver.c: 18
      +                          8:     SSP1BUF = d;
 11812  16F2  0820               	movf	i2c1_driver_TXData@d,w
 11813  16F3  0024               	movlb	4	; select bank4
 11814  16F4  0091               	movwf	17	;volatile
 11815  16F5  0008               	return
 11816  16F6                     __end_of_i2c1_driver_TXData:	
 11817                           
 11818                           	psect	text35
 11819  16A7                     __ptext35:	
 11820 ;; *************** function _I2C_Stop *****************
 11821 ;; Defined at:
 11822 ;;		line 50 in file "i2c.c"
 11823 ;; Parameters:    Size  Location     Type
 11824 ;;		None
 11825 ;; Auto vars:     Size  Location     Type
 11826 ;;		None
 11827 ;; Return value:  Size  Location     Type
 11828 ;;                  1    wreg      void 
 11829 ;; Registers used:
 11830 ;;		status,2, status,0, pclath, cstack
 11831 ;; Tracked objects:
 11832 ;;		On entry : 0/0
 11833 ;;		On exit  : 0/0
 11834 ;;		Unchanged: 0/0
 11835 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11836 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11837 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11838 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11839 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11840 ;;Total ram usage:        0 bytes
 11841 ;; Hardware stack levels used:    1
 11842 ;; Hardware stack levels required when called:    6
 11843 ;; This function calls:
 11844 ;;		_i2c1_driver_stop
 11845 ;; This function is called by:
 11846 ;;		_wireReadDataBlock
 11847 ;;		_wireWriteDataByte
 11848 ;;		_wireReadDataByte
 11849 ;; This function uses a non-reentrant model
 11850 ;;
 11851                           
 11852                           
 11853                           ;psect for function _I2C_Stop
 11854  16A7                     _I2C_Stop:	
 11855                           
 11856                           ;i2c.c: 52:  i2c1_driver_stop();
 11857                           
 11858                           ;incstack = 0
 11859                           ; Regs used in _I2C_Stop: [status,2+status,0+pclath+cstack]
 11860  16A7  3196  26A4         	fcall	_i2c1_driver_stop
 11861  16A9  0008               	return
 11862  16AA                     __end_of_I2C_Stop:	
 11863                           
 11864                           	psect	text36
 11865  16A4                     __ptext36:	
 11866 ;; *************** function _i2c1_driver_stop *****************
 11867 ;; Defined at:
 11868 ;;		line 156 in file "mcc_generated_files/i2c1_driver.c"
 11869 ;; Parameters:    Size  Location     Type
 11870 ;;		None
 11871 ;; Auto vars:     Size  Location     Type
 11872 ;;		None
 11873 ;; Return value:  Size  Location     Type
 11874 ;;                  1    wreg      void 
 11875 ;; Registers used:
 11876 ;;		None
 11877 ;; Tracked objects:
 11878 ;;		On entry : 0/0
 11879 ;;		On exit  : 0/0
 11880 ;;		Unchanged: 0/0
 11881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11882 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11883 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11884 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11885 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11886 ;;Total ram usage:        0 bytes
 11887 ;; Hardware stack levels used:    1
 11888 ;; Hardware stack levels required when called:    5
 11889 ;; This function calls:
 11890 ;;		Nothing
 11891 ;; This function is called by:
 11892 ;;		_I2C_Stop
 11893 ;; This function uses a non-reentrant model
 11894 ;;
 11895                           
 11896                           
 11897                           ;psect for function _i2c1_driver_stop
 11898  16A4                     _i2c1_driver_stop:	
 11899                           
 11900                           ;mcc_generated_files/i2c1_driver.c: 158:     SSP1CON2bits.PEN = 1;
 11901                           
 11902                           ;incstack = 0
 11903                           ; Regs used in _i2c1_driver_stop: []
 11904  16A4  0024               	movlb	4	; select bank4
 11905  16A5  1516               	bsf	22,2	;volatile
 11906  16A6  0008               	return
 11907  16A7                     __end_of_i2c1_driver_stop:	
 11908                           
 11909                           	psect	text37
 11910  16A1                     __ptext37:	
 11911 ;; *************** function _I2C_Start *****************
 11912 ;; Defined at:
 11913 ;;		line 35 in file "i2c.c"
 11914 ;; Parameters:    Size  Location     Type
 11915 ;;		None
 11916 ;; Auto vars:     Size  Location     Type
 11917 ;;		None
 11918 ;; Return value:  Size  Location     Type
 11919 ;;                  1    wreg      void 
 11920 ;; Registers used:
 11921 ;;		status,2, status,0, pclath, cstack
 11922 ;; Tracked objects:
 11923 ;;		On entry : 0/0
 11924 ;;		On exit  : 0/0
 11925 ;;		Unchanged: 0/0
 11926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11927 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11928 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11929 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11930 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11931 ;;Total ram usage:        0 bytes
 11932 ;; Hardware stack levels used:    1
 11933 ;; Hardware stack levels required when called:    6
 11934 ;; This function calls:
 11935 ;;		_i2c1_driver_start
 11936 ;; This function is called by:
 11937 ;;		_wireReadDataBlock
 11938 ;;		_wireWriteDataByte
 11939 ;;		_wireReadDataByte
 11940 ;; This function uses a non-reentrant model
 11941 ;;
 11942                           
 11943                           
 11944                           ;psect for function _I2C_Start
 11945  16A1                     _I2C_Start:	
 11946                           
 11947                           ;i2c.c: 37:  i2c1_driver_start();
 11948                           
 11949                           ;incstack = 0
 11950                           ; Regs used in _I2C_Start: [status,2+status,0+pclath+cstack]
 11951  16A1  3196  269E         	fcall	_i2c1_driver_start
 11952  16A3  0008               	return
 11953  16A4                     __end_of_I2C_Start:	
 11954                           
 11955                           	psect	text38
 11956  169E                     __ptext38:	
 11957 ;; *************** function _i2c1_driver_start *****************
 11958 ;; Defined at:
 11959 ;;		line 146 in file "mcc_generated_files/i2c1_driver.c"
 11960 ;; Parameters:    Size  Location     Type
 11961 ;;		None
 11962 ;; Auto vars:     Size  Location     Type
 11963 ;;		None
 11964 ;; Return value:  Size  Location     Type
 11965 ;;                  1    wreg      void 
 11966 ;; Registers used:
 11967 ;;		None
 11968 ;; Tracked objects:
 11969 ;;		On entry : 0/0
 11970 ;;		On exit  : 0/0
 11971 ;;		Unchanged: 0/0
 11972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11974 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11975 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11976 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11977 ;;Total ram usage:        0 bytes
 11978 ;; Hardware stack levels used:    1
 11979 ;; Hardware stack levels required when called:    5
 11980 ;; This function calls:
 11981 ;;		Nothing
 11982 ;; This function is called by:
 11983 ;;		_I2C_Start
 11984 ;;		_i2c_masterOperation
 11985 ;; This function uses a non-reentrant model
 11986 ;;
 11987                           
 11988                           
 11989                           ;psect for function _i2c1_driver_start
 11990  169E                     _i2c1_driver_start:	
 11991                           
 11992                           ;mcc_generated_files/i2c1_driver.c: 148:     SSP1CON2bits.SEN = 1;
 11993                           
 11994                           ;incstack = 0
 11995                           ; Regs used in _i2c1_driver_start: []
 11996  169E  0024               	movlb	4	; select bank4
 11997  169F  1416               	bsf	22,0	;volatile
 11998  16A0  0008               	return
 11999  16A1                     __end_of_i2c1_driver_start:	
 12000                           
 12001                           	psect	text39
 12002  169B                     __ptext39:	
 12003 ;; *************** function _I2C_Send_NACK *****************
 12004 ;; Defined at:
 12005 ;;		line 66 in file "i2c.c"
 12006 ;; Parameters:    Size  Location     Type
 12007 ;;		None
 12008 ;; Auto vars:     Size  Location     Type
 12009 ;;		None
 12010 ;; Return value:  Size  Location     Type
 12011 ;;                  1    wreg      void 
 12012 ;; Registers used:
 12013 ;;		status,2, status,0, pclath, cstack
 12014 ;; Tracked objects:
 12015 ;;		On entry : 0/0
 12016 ;;		On exit  : 0/0
 12017 ;;		Unchanged: 0/0
 12018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12019 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12020 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12021 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12022 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12023 ;;Total ram usage:        0 bytes
 12024 ;; Hardware stack levels used:    1
 12025 ;; Hardware stack levels required when called:    6
 12026 ;; This function calls:
 12027 ;;		_i2c1_driver_sendNACK
 12028 ;; This function is called by:
 12029 ;;		_wireReadDataBlock
 12030 ;;		_wireReadDataByte
 12031 ;; This function uses a non-reentrant model
 12032 ;;
 12033                           
 12034                           
 12035                           ;psect for function _I2C_Send_NACK
 12036  169B                     _I2C_Send_NACK:	
 12037                           
 12038                           ;i2c.c: 68:     i2c1_driver_sendNACK();
 12039                           
 12040                           ;incstack = 0
 12041                           ; Regs used in _I2C_Send_NACK: [status,2+status,0+pclath+cstack]
 12042  169B  3196  26D6         	fcall	_i2c1_driver_sendNACK
 12043  169D  0008               	return
 12044  169E                     __end_of_I2C_Send_NACK:	
 12045                           
 12046                           	psect	text40
 12047  16D6                     __ptext40:	
 12048 ;; *************** function _i2c1_driver_sendNACK *****************
 12049 ;; Defined at:
 12050 ;;		line 202 in file "mcc_generated_files/i2c1_driver.c"
 12051 ;; Parameters:    Size  Location     Type
 12052 ;;		None
 12053 ;; Auto vars:     Size  Location     Type
 12054 ;;		None
 12055 ;; Return value:  Size  Location     Type
 12056 ;;                  1    wreg      void 
 12057 ;; Registers used:
 12058 ;;		None
 12059 ;; Tracked objects:
 12060 ;;		On entry : 0/0
 12061 ;;		On exit  : 0/0
 12062 ;;		Unchanged: 0/0
 12063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12064 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12065 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12066 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12067 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12068 ;;Total ram usage:        0 bytes
 12069 ;; Hardware stack levels used:    1
 12070 ;; Hardware stack levels required when called:    5
 12071 ;; This function calls:
 12072 ;;		Nothing
 12073 ;; This function is called by:
 12074 ;;		_I2C_Send_NACK
 12075 ;; This function uses a non-reentrant model
 12076 ;;
 12077                           
 12078                           
 12079                           ;psect for function _i2c1_driver_sendNACK
 12080  16D6                     _i2c1_driver_sendNACK:	
 12081                           
 12082                           ;mcc_generated_files/i2c1_driver.c: 204:     SSP1CON2bits.ACKDT = 1;
 12083                           
 12084                           ;incstack = 0
 12085                           ; Regs used in _i2c1_driver_sendNACK: []
 12086  16D6  0024               	movlb	4	; select bank4
 12087  16D7  1696               	bsf	22,5	;volatile
 12088                           
 12089                           ;mcc_generated_files/i2c1_driver.c: 205:     SSP1CON2bits.ACKEN = 1;
 12090  16D8  1616               	bsf	22,4	;volatile
 12091  16D9  0008               	return
 12092  16DA                     __end_of_i2c1_driver_sendNACK:	
 12093                           
 12094                           	psect	text41
 12095  179F                     __ptext41:	
 12096 ;; *************** function _I2C_Read_Byte *****************
 12097 ;; Defined at:
 12098 ;;		line 115 in file "i2c.c"
 12099 ;; Parameters:    Size  Location     Type
 12100 ;;		None
 12101 ;; Auto vars:     Size  Location     Type
 12102 ;;		None
 12103 ;; Return value:  Size  Location     Type
 12104 ;;                  1    wreg      unsigned char 
 12105 ;; Registers used:
 12106 ;;		wreg, status,2, status,0, pclath, cstack
 12107 ;; Tracked objects:
 12108 ;;		On entry : 0/0
 12109 ;;		On exit  : 0/0
 12110 ;;		Unchanged: 0/0
 12111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12112 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12113 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12114 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12115 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12116 ;;Total ram usage:        0 bytes
 12117 ;; Hardware stack levels used:    1
 12118 ;; Hardware stack levels required when called:    6
 12119 ;; This function calls:
 12120 ;;		_i2c1_driver_getRXData
 12121 ;;		_i2c1_driver_isBufferFull
 12122 ;;		_i2c1_driver_startRX
 12123 ;; This function is called by:
 12124 ;;		_wireReadDataBlock
 12125 ;;		_wireReadDataByte
 12126 ;; This function uses a non-reentrant model
 12127 ;;
 12128                           
 12129                           
 12130                           ;psect for function _I2C_Read_Byte
 12131  179F                     _I2C_Read_Byte:	
 12132                           
 12133                           ;i2c.c: 117:     i2c1_driver_startRX();
 12134                           
 12135                           ;incstack = 0
 12136                           ; Regs used in _I2C_Read_Byte: [wreg+status,2+status,0+pclath+cstack]
 12137  179F  3196  2698  3197   	fcall	_i2c1_driver_startRX
 12138  17A2                     l6430:	
 12139                           ;i2c.c: 121:  while (i2c1_driver_isBufferFull() == 0) {
 12140                           
 12141                           
 12142                           ;i2c.c: 121:  while (i2c1_driver_isBufferFull() == 0) {
 12143  17A2  3197  2717  3197   	fcall	_i2c1_driver_isBufferFull
 12144  17A5  1C03               	btfss	3,0
 12145  17A6  2FA2               	goto	l6430
 12146                           
 12147                           ;i2c.c: 137:   return i2c1_driver_getRXData();
 12148  17A7  3196  2695         	fcall	_i2c1_driver_getRXData
 12149  17A9  0008               	return
 12150  17AA                     __end_of_I2C_Read_Byte:	
 12151                           
 12152                           	psect	text42
 12153  1698                     __ptext42:	
 12154 ;; *************** function _i2c1_driver_startRX *****************
 12155 ;; Defined at:
 12156 ;;		line 166 in file "mcc_generated_files/i2c1_driver.c"
 12157 ;; Parameters:    Size  Location     Type
 12158 ;;		None
 12159 ;; Auto vars:     Size  Location     Type
 12160 ;;		None
 12161 ;; Return value:  Size  Location     Type
 12162 ;;                  1    wreg      void 
 12163 ;; Registers used:
 12164 ;;		None
 12165 ;; Tracked objects:
 12166 ;;		On entry : 0/0
 12167 ;;		On exit  : 0/0
 12168 ;;		Unchanged: 0/0
 12169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12170 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12171 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12172 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12173 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12174 ;;Total ram usage:        0 bytes
 12175 ;; Hardware stack levels used:    1
 12176 ;; Hardware stack levels required when called:    5
 12177 ;; This function calls:
 12178 ;;		Nothing
 12179 ;; This function is called by:
 12180 ;;		_I2C_Read_Byte
 12181 ;; This function uses a non-reentrant model
 12182 ;;
 12183                           
 12184                           
 12185                           ;psect for function _i2c1_driver_startRX
 12186  1698                     _i2c1_driver_startRX:	
 12187                           
 12188                           ;mcc_generated_files/i2c1_driver.c: 168:     SSP1CON2bits.RCEN = 1;
 12189                           
 12190                           ;incstack = 0
 12191                           ; Regs used in _i2c1_driver_startRX: []
 12192  1698  0024               	movlb	4	; select bank4
 12193  1699  1596               	bsf	22,3	;volatile
 12194  169A  0008               	return
 12195  169B                     __end_of_i2c1_driver_startRX:	
 12196                           
 12197                           	psect	text43
 12198  1717                     __ptext43:	
 12199 ;; *************** function _i2c1_driver_isBufferFull *****************
 12200 ;; Defined at:
 12201 ;;		line 213 in file "mcc_generated_files/i2c1_driver.c"
 12202 ;; Parameters:    Size  Location     Type
 12203 ;;		None
 12204 ;; Auto vars:     Size  Location     Type
 12205 ;;		None
 12206 ;; Return value:  Size  Location     Type
 12207 ;;		None               void
 12208 ;; Registers used:
 12209 ;;		wreg, status,2, status,0
 12210 ;; Tracked objects:
 12211 ;;		On entry : 0/0
 12212 ;;		On exit  : 0/0
 12213 ;;		Unchanged: 0/0
 12214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12215 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12216 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12217 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12218 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12219 ;;Total ram usage:        1 bytes
 12220 ;; Hardware stack levels used:    1
 12221 ;; Hardware stack levels required when called:    5
 12222 ;; This function calls:
 12223 ;;		Nothing
 12224 ;; This function is called by:
 12225 ;;		_I2C_Read_Byte
 12226 ;; This function uses a non-reentrant model
 12227 ;;
 12228                           
 12229                           
 12230                           ;psect for function _i2c1_driver_isBufferFull
 12231  1717                     _i2c1_driver_isBufferFull:	
 12232                           
 12233                           ;mcc_generated_files/i2c1_driver.c: 215:     return SSP1STATbits.BF;
 12234                           
 12235                           ;incstack = 0
 12236                           ; Regs used in _i2c1_driver_isBufferFull: [wreg+status,2+status,0]
 12237  1717  0024               	movlb	4	; select bank4
 12238  1718  0814               	movf	20,w	;volatile
 12239  1719  3901               	andlw	1
 12240  171A  0020               	movlb	0	; select bank0
 12241  171B  00A0               	movwf	??_i2c1_driver_isBufferFull
 12242  171C  0C20               	rrf	??_i2c1_driver_isBufferFull,w
 12243  171D  0008               	return
 12244  171E                     __end_of_i2c1_driver_isBufferFull:	
 12245                           
 12246                           	psect	text44
 12247  1695                     __ptext44:	
 12248 ;; *************** function _i2c1_driver_getRXData *****************
 12249 ;; Defined at:
 12250 ;;		line 171 in file "mcc_generated_files/i2c1_driver.c"
 12251 ;; Parameters:    Size  Location     Type
 12252 ;;		None
 12253 ;; Auto vars:     Size  Location     Type
 12254 ;;		None
 12255 ;; Return value:  Size  Location     Type
 12256 ;;                  1    wreg      unsigned char 
 12257 ;; Registers used:
 12258 ;;		wreg
 12259 ;; Tracked objects:
 12260 ;;		On entry : 0/0
 12261 ;;		On exit  : 0/0
 12262 ;;		Unchanged: 0/0
 12263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12265 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12267 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12268 ;;Total ram usage:        0 bytes
 12269 ;; Hardware stack levels used:    1
 12270 ;; Hardware stack levels required when called:    5
 12271 ;; This function calls:
 12272 ;;		Nothing
 12273 ;; This function is called by:
 12274 ;;		_I2C_Read_Byte
 12275 ;; This function uses a non-reentrant model
 12276 ;;
 12277                           
 12278                           
 12279                           ;psect for function _i2c1_driver_getRXData
 12280  1695                     _i2c1_driver_getRXData:	
 12281                           
 12282                           ;mcc_generated_files/i2c1_driver.c: 173:     return SSP1BUF;
 12283                           
 12284                           ;incstack = 0
 12285                           ; Regs used in _i2c1_driver_getRXData: [wreg]
 12286  1695  0024               	movlb	4	; select bank4
 12287  1696  0811               	movf	17,w	;volatile
 12288  1697  0008               	return
 12289  1698                     __end_of_i2c1_driver_getRXData:	
 12290                           
 12291                           	psect	text45
 12292  1692                     __ptext45:	
 12293 ;; *************** function _I2C_ReStart *****************
 12294 ;; Defined at:
 12295 ;;		line 43 in file "i2c.c"
 12296 ;; Parameters:    Size  Location     Type
 12297 ;;		None
 12298 ;; Auto vars:     Size  Location     Type
 12299 ;;		None
 12300 ;; Return value:  Size  Location     Type
 12301 ;;                  1    wreg      void 
 12302 ;; Registers used:
 12303 ;;		status,2, status,0, pclath, cstack
 12304 ;; Tracked objects:
 12305 ;;		On entry : 0/0
 12306 ;;		On exit  : 0/0
 12307 ;;		Unchanged: 0/0
 12308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12310 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12311 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12312 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12313 ;;Total ram usage:        0 bytes
 12314 ;; Hardware stack levels used:    1
 12315 ;; Hardware stack levels required when called:    6
 12316 ;; This function calls:
 12317 ;;		_i2c1_driver_restart
 12318 ;; This function is called by:
 12319 ;;		_wireReadDataBlock
 12320 ;;		_wireReadDataByte
 12321 ;; This function uses a non-reentrant model
 12322 ;;
 12323                           
 12324                           
 12325                           ;psect for function _I2C_ReStart
 12326  1692                     _I2C_ReStart:	
 12327                           
 12328                           ;i2c.c: 45:  i2c1_driver_restart();
 12329                           
 12330                           ;incstack = 0
 12331                           ; Regs used in _I2C_ReStart: [status,2+status,0+pclath+cstack]
 12332  1692  3196  268F         	fcall	_i2c1_driver_restart
 12333  1694  0008               	return
 12334  1695                     __end_of_I2C_ReStart:	
 12335                           
 12336                           	psect	text46
 12337  168F                     __ptext46:	
 12338 ;; *************** function _i2c1_driver_restart *****************
 12339 ;; Defined at:
 12340 ;;		line 151 in file "mcc_generated_files/i2c1_driver.c"
 12341 ;; Parameters:    Size  Location     Type
 12342 ;;		None
 12343 ;; Auto vars:     Size  Location     Type
 12344 ;;		None
 12345 ;; Return value:  Size  Location     Type
 12346 ;;                  1    wreg      void 
 12347 ;; Registers used:
 12348 ;;		None
 12349 ;; Tracked objects:
 12350 ;;		On entry : 0/0
 12351 ;;		On exit  : 0/0
 12352 ;;		Unchanged: 0/0
 12353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12354 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12355 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12357 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12358 ;;Total ram usage:        0 bytes
 12359 ;; Hardware stack levels used:    1
 12360 ;; Hardware stack levels required when called:    5
 12361 ;; This function calls:
 12362 ;;		Nothing
 12363 ;; This function is called by:
 12364 ;;		_I2C_ReStart
 12365 ;; This function uses a non-reentrant model
 12366 ;;
 12367                           
 12368                           
 12369                           ;psect for function _i2c1_driver_restart
 12370  168F                     _i2c1_driver_restart:	
 12371                           
 12372                           ;mcc_generated_files/i2c1_driver.c: 153:     SSP1CON2bits.RSEN = 1;
 12373                           
 12374                           ;incstack = 0
 12375                           ; Regs used in _i2c1_driver_restart: []
 12376  168F  0024               	movlb	4	; select bank4
 12377  1690  1496               	bsf	22,1	;volatile
 12378  1691  0008               	return
 12379  1692                     __end_of_i2c1_driver_restart:	
 12380                           
 12381                           	psect	text47
 12382  0EB7                     __ptext47:	
 12383 ;; *************** function _UART_Byte *****************
 12384 ;; Defined at:
 12385 ;;		line 607 in file "main.c"
 12386 ;; Parameters:    Size  Location     Type
 12387 ;;		None
 12388 ;; Auto vars:     Size  Location     Type
 12389 ;;  i               2   19[BANK0 ] int 
 12390 ;;  bits            5   14[BANK0 ] unsigned char [5]
 12391 ;;  tempBright      2   12[BANK0 ] int 
 12392 ;;  tempName        2   10[BANK0 ] int 
 12393 ;;  tempProx        2    8[BANK0 ] int 
 12394 ;;  tempOn          2    6[BANK0 ] int 
 12395 ;; Return value:  Size  Location     Type
 12396 ;;                  1    wreg      void 
 12397 ;; Registers used:
 12398 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12399 ;; Tracked objects:
 12400 ;;		On entry : 0/0
 12401 ;;		On exit  : 0/0
 12402 ;;		Unchanged: 0/0
 12403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12405 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12406 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12407 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12408 ;;Total ram usage:       16 bytes
 12409 ;; Hardware stack levels used:    1
 12410 ;; Hardware stack levels required when called:    6
 12411 ;; This function calls:
 12412 ;;		_strlen
 12413 ;; This function is called by:
 12414 ;;		_main
 12415 ;; This function uses a non-reentrant model
 12416 ;;
 12417                           
 12418                           
 12419                           ;psect for function _UART_Byte
 12420  0EB7                     _UART_Byte:	
 12421                           
 12422                           ;main.c: 608:     int tempOn = on + 1;
 12423                           
 12424                           ;incstack = 0
 12425                           ; Regs used in _UART_Byte: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12426  0EB7  0020               	movlb	0	; select bank0
 12427  0EB8  085C               	movf	_on,w
 12428  0EB9  3E01               	addlw	1
 12429  0EBA  00A6               	movwf	UART_Byte@tempOn
 12430  0EBB  3000               	movlw	0
 12431  0EBC  3D5D               	addwfc	_on+1,w
 12432  0EBD  00A7               	movwf	UART_Byte@tempOn+1
 12433                           
 12434                           ;main.c: 609:     int tempProx = prox + 1;
 12435  0EBE  0021               	movlb	1	; select bank1
 12436  0EBF  0860               	movf	_prox^(0+128),w
 12437  0EC0  3E01               	addlw	1
 12438  0EC1  0020               	movlb	0	; select bank0
 12439  0EC2  00A8               	movwf	UART_Byte@tempProx
 12440  0EC3  3000               	movlw	0
 12441  0EC4  0021               	movlb	1	; select bank1
 12442  0EC5  3D61               	addwfc	(_prox+1)^(0+128),w
 12443  0EC6  0020               	movlb	0	; select bank0
 12444  0EC7  00A9               	movwf	UART_Byte@tempProx+1
 12445                           
 12446                           ;main.c: 610:     int tempName = name + 1;
 12447  0EC8  0860               	movf	_name,w
 12448  0EC9  3E01               	addlw	1
 12449  0ECA  00AA               	movwf	UART_Byte@tempName
 12450  0ECB  3000               	movlw	0
 12451  0ECC  3D61               	addwfc	_name+1,w
 12452  0ECD  00AB               	movwf	UART_Byte@tempName+1
 12453                           
 12454                           ;main.c: 611:     int tempBright = brightness + 1;
 12455  0ECE  085E               	movf	_brightness,w
 12456  0ECF  3E01               	addlw	1
 12457  0ED0  00AC               	movwf	UART_Byte@tempBright
 12458  0ED1  3000               	movlw	0
 12459  0ED2  3D5F               	addwfc	_brightness+1,w
 12460  0ED3  00AD               	movwf	UART_Byte@tempBright+1
 12461                           
 12462                           ;main.c: 612:     char bits[5] = {'A', tempOn, tempProx, tempName, tempBright};
 12463  0ED4  302E               	movlw	low UART_Byte@bits
 12464  0ED5  0086               	movwf	6
 12465  0ED6  3000               	movlw	high UART_Byte@bits
 12466  0ED7  0087               	movwf	7
 12467  0ED8  3005               	movlw	5
 12468  0ED9  00A5               	movwf	??_UART_Byte
 12469  0EDA  3000               	movlw	0
 12470  0EDB                     u6710:	
 12471  0EDB  001E               	movwi fsr1++
 12472  0EDC  0BA5               	decfsz	??_UART_Byte,f
 12473  0EDD  2EDB               	goto	u6710
 12474  0EDE  3041               	movlw	65
 12475  0EDF  00A5               	movwf	??_UART_Byte
 12476  0EE0  0825               	movf	??_UART_Byte,w
 12477  0EE1  00AE               	movwf	UART_Byte@bits
 12478  0EE2  0826               	movf	UART_Byte@tempOn,w
 12479  0EE3  00A5               	movwf	??_UART_Byte
 12480  0EE4  0825               	movf	??_UART_Byte,w
 12481  0EE5  00AF               	movwf	UART_Byte@bits+1
 12482  0EE6  0828               	movf	UART_Byte@tempProx,w
 12483  0EE7  00A5               	movwf	??_UART_Byte
 12484  0EE8  0825               	movf	??_UART_Byte,w
 12485  0EE9  00B0               	movwf	UART_Byte@bits+2
 12486  0EEA  082A               	movf	UART_Byte@tempName,w
 12487  0EEB  00A5               	movwf	??_UART_Byte
 12488  0EEC  0825               	movf	??_UART_Byte,w
 12489  0EED  00B1               	movwf	UART_Byte@bits+3
 12490  0EEE  082C               	movf	UART_Byte@tempBright,w
 12491  0EEF  00A5               	movwf	??_UART_Byte
 12492  0EF0  0825               	movf	??_UART_Byte,w
 12493  0EF1  00B2               	movwf	UART_Byte@bits+4
 12494                           
 12495                           ;main.c: 613:     for(int i = 0; i < strlen(bits); i++) {
 12496  0EF2  01B3               	clrf	UART_Byte@i
 12497  0EF3  01B4               	clrf	UART_Byte@i+1
 12498  0EF4                     l7686:	
 12499  0EF4  302E               	movlw	low UART_Byte@bits
 12500  0EF5  00A0               	movwf	strlen@s
 12501  0EF6  3000               	movlw	high UART_Byte@bits
 12502  0EF7  00A1               	movwf	strlen@s+1
 12503  0EF8  3188  20BD  318E   	fcall	_strlen
 12504  0EFB  0020               	movlb	0	; select bank0
 12505  0EFC  0821               	movf	?_strlen+1,w
 12506  0EFD  0234               	subwf	UART_Byte@i+1,w
 12507  0EFE  1D03               	skipz
 12508  0EFF  2F02               	goto	u6735
 12509  0F00  0820               	movf	?_strlen,w
 12510  0F01  0233               	subwf	UART_Byte@i,w
 12511  0F02                     u6735:	
 12512  0F02  1803               	btfsc	3,0
 12513  0F03  0008               	return
 12514  0F04                     l872:	
 12515  0F04  0023               	movlb	3	; select bank3
 12516  0F05  1C9E               	btfss	30,1	;volatile
 12517  0F06  2F04               	goto	l872
 12518                           
 12519                           ;main.c: 615:         TXREG1 = bits[i];
 12520  0F07  0020               	movlb	0	; select bank0
 12521  0F08  0833               	movf	UART_Byte@i,w
 12522  0F09  3E2E               	addlw	(low (UART_Byte@bits| 0))& (0+255)
 12523  0F0A  0086               	movwf	6
 12524  0F0B  0187               	clrf	7
 12525  0F0C  0801               	movf	1,w
 12526  0F0D  0023               	movlb	3	; select bank3
 12527  0F0E  009A               	movwf	26	;volatile
 12528                           
 12529                           ;main.c: 616:     }
 12530  0F0F  3001               	movlw	1
 12531  0F10  0020               	movlb	0	; select bank0
 12532  0F11  07B3               	addwf	UART_Byte@i,f
 12533  0F12  3000               	movlw	0
 12534  0F13  3DB4               	addwfc	UART_Byte@i+1,f
 12535  0F14  2EF4               	goto	l7686
 12536  0F15                     __end_of_UART_Byte:	
 12537                           
 12538                           	psect	text48
 12539  08D5                     __ptext48:	
 12540 ;; *************** function _SYSTEM_Initialize *****************
 12541 ;; Defined at:
 12542 ;;		line 50 in file "mcc_generated_files/mcc.c"
 12543 ;; Parameters:    Size  Location     Type
 12544 ;;		None
 12545 ;; Auto vars:     Size  Location     Type
 12546 ;;		None
 12547 ;; Return value:  Size  Location     Type
 12548 ;;                  1    wreg      void 
 12549 ;; Registers used:
 12550 ;;		wreg, status,2, status,0, pclath, cstack
 12551 ;; Tracked objects:
 12552 ;;		On entry : 0/0
 12553 ;;		On exit  : 0/0
 12554 ;;		Unchanged: 0/0
 12555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12556 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12557 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12558 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12559 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12560 ;;Total ram usage:        0 bytes
 12561 ;; Hardware stack levels used:    1
 12562 ;; Hardware stack levels required when called:    7
 12563 ;; This function calls:
 12564 ;;		_ADC_Initialize
 12565 ;;		_EUSART_Initialize
 12566 ;;		_OSCILLATOR_Initialize
 12567 ;;		_PIN_MANAGER_Initialize
 12568 ;;		_PMD_Initialize
 12569 ;;		_PWM1_Initialize
 12570 ;;		_SPI2_Initialize
 12571 ;;		_TMR2_Initialize
 12572 ;;		_WDT_Initialize
 12573 ;; This function is called by:
 12574 ;;		_main
 12575 ;; This function uses a non-reentrant model
 12576 ;;
 12577                           
 12578                           
 12579                           ;psect for function _SYSTEM_Initialize
 12580  08D5                     _SYSTEM_Initialize:	
 12581                           
 12582                           ;mcc_generated_files/mcc.c: 53:     PMD_Initialize();
 12583                           
 12584                           ;incstack = 0
 12585                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
 12586  08D5  3197  273E  3188   	fcall	_PMD_Initialize
 12587                           
 12588                           ;mcc_generated_files/mcc.c: 54:     PIN_MANAGER_Initialize();
 12589  08D8  318C  24AC  3188   	fcall	_PIN_MANAGER_Initialize
 12590                           
 12591                           ;mcc_generated_files/mcc.c: 55:     OSCILLATOR_Initialize();
 12592  08DB  3197  2736  3188   	fcall	_OSCILLATOR_Initialize
 12593                           
 12594                           ;mcc_generated_files/mcc.c: 56:     WDT_Initialize();
 12595  08DE  3196  26D2  3188   	fcall	_WDT_Initialize
 12596                           
 12597                           ;mcc_generated_files/mcc.c: 57:     SPI2_Initialize();
 12598  08E1  3197  2710  3188   	fcall	_SPI2_Initialize
 12599                           
 12600                           ;mcc_generated_files/mcc.c: 58:     PWM1_Initialize();
 12601  08E4  3197  27AA  3188   	fcall	_PWM1_Initialize
 12602                           
 12603                           ;mcc_generated_files/mcc.c: 59:     ADC_Initialize();
 12604  08E7  3197  272E  3188   	fcall	_ADC_Initialize
 12605                           
 12606                           ;mcc_generated_files/mcc.c: 60:     TMR2_Initialize();
 12607  08EA  3197  2746  3188   	fcall	_TMR2_Initialize
 12608                           
 12609                           ;mcc_generated_files/mcc.c: 61:     EUSART_Initialize();
 12610  08ED  318C  2469         	fcall	_EUSART_Initialize
 12611  08EF  0008               	return
 12612  08F0                     __end_of_SYSTEM_Initialize:	
 12613                           
 12614                           	psect	text49
 12615  16D2                     __ptext49:	
 12616 ;; *************** function _WDT_Initialize *****************
 12617 ;; Defined at:
 12618 ;;		line 78 in file "mcc_generated_files/mcc.c"
 12619 ;; Parameters:    Size  Location     Type
 12620 ;;		None
 12621 ;; Auto vars:     Size  Location     Type
 12622 ;;		None
 12623 ;; Return value:  Size  Location     Type
 12624 ;;                  1    wreg      void 
 12625 ;; Registers used:
 12626 ;;		wreg
 12627 ;; Tracked objects:
 12628 ;;		On entry : 0/0
 12629 ;;		On exit  : 0/0
 12630 ;;		Unchanged: 0/0
 12631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12632 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12633 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12634 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12635 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12636 ;;Total ram usage:        0 bytes
 12637 ;; Hardware stack levels used:    1
 12638 ;; Hardware stack levels required when called:    5
 12639 ;; This function calls:
 12640 ;;		Nothing
 12641 ;; This function is called by:
 12642 ;;		_SYSTEM_Initialize
 12643 ;; This function uses a non-reentrant model
 12644 ;;
 12645                           
 12646                           
 12647                           ;psect for function _WDT_Initialize
 12648  16D2                     _WDT_Initialize:	
 12649                           
 12650                           ;mcc_generated_files/mcc.c: 81:     WDTCON = 0x18;
 12651                           
 12652                           ;incstack = 0
 12653                           ; Regs used in _WDT_Initialize: [wreg]
 12654  16D2  3018               	movlw	24
 12655  16D3  0021               	movlb	1	; select bank1
 12656  16D4  0097               	movwf	23	;volatile
 12657  16D5  0008               	return
 12658  16D6                     __end_of_WDT_Initialize:	
 12659                           
 12660                           	psect	text50
 12661  1746                     __ptext50:	
 12662 ;; *************** function _TMR2_Initialize *****************
 12663 ;; Defined at:
 12664 ;;		line 62 in file "mcc_generated_files/tmr2.c"
 12665 ;; Parameters:    Size  Location     Type
 12666 ;;		None
 12667 ;; Auto vars:     Size  Location     Type
 12668 ;;		None
 12669 ;; Return value:  Size  Location     Type
 12670 ;;                  1    wreg      void 
 12671 ;; Registers used:
 12672 ;;		wreg, status,2
 12673 ;; Tracked objects:
 12674 ;;		On entry : 0/0
 12675 ;;		On exit  : 0/0
 12676 ;;		Unchanged: 0/0
 12677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12678 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12679 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12680 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12681 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12682 ;;Total ram usage:        0 bytes
 12683 ;; Hardware stack levels used:    1
 12684 ;; Hardware stack levels required when called:    5
 12685 ;; This function calls:
 12686 ;;		Nothing
 12687 ;; This function is called by:
 12688 ;;		_SYSTEM_Initialize
 12689 ;; This function uses a non-reentrant model
 12690 ;;
 12691                           
 12692                           
 12693                           ;psect for function _TMR2_Initialize
 12694  1746                     _TMR2_Initialize:	
 12695                           
 12696                           ;mcc_generated_files/tmr2.c: 67:     PR2 = 0xFF;
 12697                           
 12698                           ;incstack = 0
 12699                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
 12700  1746  30FF               	movlw	255
 12701  1747  0020               	movlb	0	; select bank0
 12702  1748  009E               	movwf	30	;volatile
 12703                           
 12704                           ;mcc_generated_files/tmr2.c: 70:     TMR2 = 0x00;
 12705  1749  019D               	clrf	29	;volatile
 12706                           
 12707                           ;mcc_generated_files/tmr2.c: 73:     PIR1bits.TMR2IF = 0;
 12708  174A  1091               	bcf	17,1	;volatile
 12709                           
 12710                           ;mcc_generated_files/tmr2.c: 76:     T2CON = 0x04;
 12711  174B  3004               	movlw	4
 12712  174C  009F               	movwf	31	;volatile
 12713  174D  0008               	return
 12714  174E                     __end_of_TMR2_Initialize:	
 12715                           
 12716                           	psect	text51
 12717  1710                     __ptext51:	
 12718 ;; *************** function _SPI2_Initialize *****************
 12719 ;; Defined at:
 12720 ;;		line 65 in file "mcc_generated_files/spi2.c"
 12721 ;; Parameters:    Size  Location     Type
 12722 ;;		None
 12723 ;; Auto vars:     Size  Location     Type
 12724 ;;		None
 12725 ;; Return value:  Size  Location     Type
 12726 ;;                  1    wreg      void 
 12727 ;; Registers used:
 12728 ;;		wreg, status,2
 12729 ;; Tracked objects:
 12730 ;;		On entry : 0/0
 12731 ;;		On exit  : 0/0
 12732 ;;		Unchanged: 0/0
 12733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12735 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12736 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12737 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12738 ;;Total ram usage:        0 bytes
 12739 ;; Hardware stack levels used:    1
 12740 ;; Hardware stack levels required when called:    5
 12741 ;; This function calls:
 12742 ;;		Nothing
 12743 ;; This function is called by:
 12744 ;;		_SYSTEM_Initialize
 12745 ;; This function uses a non-reentrant model
 12746 ;;
 12747                           
 12748                           
 12749                           ;psect for function _SPI2_Initialize
 12750  1710                     _SPI2_Initialize:	
 12751                           
 12752                           ;mcc_generated_files/spi2.c: 70:     SSP2STAT = 0x80;
 12753                           
 12754                           ;incstack = 0
 12755                           ; Regs used in _SPI2_Initialize: [wreg+status,2]
 12756  1710  3080               	movlw	128
 12757  1711  0024               	movlb	4	; select bank4
 12758  1712  009C               	movwf	28	;volatile
 12759                           
 12760                           ;mcc_generated_files/spi2.c: 73:     SSP2CON1 = 0x31;
 12761  1713  3031               	movlw	49
 12762  1714  009D               	movwf	29	;volatile
 12763                           
 12764                           ;mcc_generated_files/spi2.c: 76:     SSP2ADD = 0x00;
 12765  1715  019A               	clrf	26	;volatile
 12766  1716  0008               	return
 12767  1717                     __end_of_SPI2_Initialize:	
 12768                           
 12769                           	psect	text52
 12770  17AA                     __ptext52:	
 12771 ;; *************** function _PWM1_Initialize *****************
 12772 ;; Defined at:
 12773 ;;		line 64 in file "mcc_generated_files/pwm1.c"
 12774 ;; Parameters:    Size  Location     Type
 12775 ;;		None
 12776 ;; Auto vars:     Size  Location     Type
 12777 ;;		None
 12778 ;; Return value:  Size  Location     Type
 12779 ;;                  1    wreg      void 
 12780 ;; Registers used:
 12781 ;;		wreg, status,2, status,0
 12782 ;; Tracked objects:
 12783 ;;		On entry : 0/0
 12784 ;;		On exit  : 0/0
 12785 ;;		Unchanged: 0/0
 12786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12787 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12788 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12789 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12790 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12791 ;;Total ram usage:        0 bytes
 12792 ;; Hardware stack levels used:    1
 12793 ;; Hardware stack levels required when called:    5
 12794 ;; This function calls:
 12795 ;;		Nothing
 12796 ;; This function is called by:
 12797 ;;		_SYSTEM_Initialize
 12798 ;; This function uses a non-reentrant model
 12799 ;;
 12800                           
 12801                           
 12802                           ;psect for function _PWM1_Initialize
 12803  17AA                     _PWM1_Initialize:	
 12804                           
 12805                           ;mcc_generated_files/pwm1.c: 69:  CCP1CON = 0x8F;
 12806                           
 12807                           ;incstack = 0
 12808                           ; Regs used in _PWM1_Initialize: [wreg+status,2+status,0]
 12809  17AA  308F               	movlw	143
 12810  17AB  0025               	movlb	5	; select bank5
 12811  17AC  0093               	movwf	19	;volatile
 12812                           
 12813                           ;mcc_generated_files/pwm1.c: 72:  CCPR1H = 0x03;
 12814  17AD  3003               	movlw	3
 12815  17AE  0092               	movwf	18	;volatile
 12816                           
 12817                           ;mcc_generated_files/pwm1.c: 75:  CCPR1L = 0x32;
 12818  17AF  3032               	movlw	50
 12819  17B0  0091               	movwf	17	;volatile
 12820                           
 12821                           ;mcc_generated_files/pwm1.c: 78:  CCPTMRSbits.C1TSEL = 0x1;
 12822  17B1  081F               	movf	31,w	;volatile
 12823  17B2  39FC               	andlw	-4
 12824  17B3  3801               	iorlw	1
 12825  17B4  009F               	movwf	31	;volatile
 12826  17B5  0008               	return
 12827  17B6                     __end_of_PWM1_Initialize:	
 12828                           
 12829                           	psect	text53
 12830  173E                     __ptext53:	
 12831 ;; *************** function _PMD_Initialize *****************
 12832 ;; Defined at:
 12833 ;;		line 84 in file "mcc_generated_files/mcc.c"
 12834 ;; Parameters:    Size  Location     Type
 12835 ;;		None
 12836 ;; Auto vars:     Size  Location     Type
 12837 ;;		None
 12838 ;; Return value:  Size  Location     Type
 12839 ;;                  1    wreg      void 
 12840 ;; Registers used:
 12841 ;;		status,2
 12842 ;; Tracked objects:
 12843 ;;		On entry : 0/0
 12844 ;;		On exit  : 0/0
 12845 ;;		Unchanged: 0/0
 12846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12847 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12848 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12849 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12850 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12851 ;;Total ram usage:        0 bytes
 12852 ;; Hardware stack levels used:    1
 12853 ;; Hardware stack levels required when called:    5
 12854 ;; This function calls:
 12855 ;;		Nothing
 12856 ;; This function is called by:
 12857 ;;		_SYSTEM_Initialize
 12858 ;; This function uses a non-reentrant model
 12859 ;;
 12860                           
 12861                           
 12862                           ;psect for function _PMD_Initialize
 12863  173E                     _PMD_Initialize:	
 12864                           
 12865                           ;mcc_generated_files/mcc.c: 87:     PMD0 = 0x00;
 12866                           
 12867                           ;incstack = 0
 12868                           ; Regs used in _PMD_Initialize: [status,2]
 12869  173E  0032               	movlb	18	; select bank18
 12870  173F  0191               	clrf	17	;volatile
 12871                           
 12872                           ;mcc_generated_files/mcc.c: 89:     PMD1 = 0x00;
 12873  1740  0192               	clrf	18	;volatile
 12874                           
 12875                           ;mcc_generated_files/mcc.c: 91:     PMD2 = 0x00;
 12876  1741  0193               	clrf	19	;volatile
 12877                           
 12878                           ;mcc_generated_files/mcc.c: 93:     PMD3 = 0x00;
 12879  1742  0194               	clrf	20	;volatile
 12880                           
 12881                           ;mcc_generated_files/mcc.c: 95:     PMD4 = 0x00;
 12882  1743  0195               	clrf	21	;volatile
 12883                           
 12884                           ;mcc_generated_files/mcc.c: 97:     PMD5 = 0x00;
 12885  1744  0196               	clrf	22	;volatile
 12886  1745  0008               	return
 12887  1746                     __end_of_PMD_Initialize:	
 12888                           
 12889                           	psect	text54
 12890  0CAC                     __ptext54:	
 12891 ;; *************** function _PIN_MANAGER_Initialize *****************
 12892 ;; Defined at:
 12893 ;;		line 57 in file "mcc_generated_files/pin_manager.c"
 12894 ;; Parameters:    Size  Location     Type
 12895 ;;		None
 12896 ;; Auto vars:     Size  Location     Type
 12897 ;;		None
 12898 ;; Return value:  Size  Location     Type
 12899 ;;                  1    wreg      void 
 12900 ;; Registers used:
 12901 ;;		wreg, status,2, status,0, pclath, cstack
 12902 ;; Tracked objects:
 12903 ;;		On entry : 0/0
 12904 ;;		On exit  : 0/0
 12905 ;;		Unchanged: 0/0
 12906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12907 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12908 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12909 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12910 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12911 ;;Total ram usage:        0 bytes
 12912 ;; Hardware stack levels used:    1
 12913 ;; Hardware stack levels required when called:    6
 12914 ;; This function calls:
 12915 ;;		_IOCAF4_SetInterruptHandler
 12916 ;; This function is called by:
 12917 ;;		_SYSTEM_Initialize
 12918 ;; This function uses a non-reentrant model
 12919 ;;
 12920                           
 12921                           
 12922                           ;psect for function _PIN_MANAGER_Initialize
 12923  0CAC                     _PIN_MANAGER_Initialize:	
 12924                           
 12925                           ;mcc_generated_files/pin_manager.c: 62:     LATA = 0x00;
 12926                           
 12927                           ;incstack = 0
 12928                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0+pclath+cstack]
 12929  0CAC  0022               	movlb	2	; select bank2
 12930  0CAD  018C               	clrf	12	;volatile
 12931                           
 12932                           ;mcc_generated_files/pin_manager.c: 63:     LATB = 0x00;
 12933  0CAE  018D               	clrf	13	;volatile
 12934                           
 12935                           ;mcc_generated_files/pin_manager.c: 64:     LATC = 0x00;
 12936  0CAF  018E               	clrf	14	;volatile
 12937                           
 12938                           ;mcc_generated_files/pin_manager.c: 69:     TRISA = 0x33;
 12939  0CB0  3033               	movlw	51
 12940  0CB1  0021               	movlb	1	; select bank1
 12941  0CB2  008C               	movwf	12	;volatile
 12942                           
 12943                           ;mcc_generated_files/pin_manager.c: 70:     TRISB = 0xB0;
 12944  0CB3  30B0               	movlw	176
 12945  0CB4  008D               	movwf	13	;volatile
 12946                           
 12947                           ;mcc_generated_files/pin_manager.c: 71:     TRISC = 0x9A;
 12948  0CB5  309A               	movlw	154
 12949  0CB6  008E               	movwf	14	;volatile
 12950                           
 12951                           ;mcc_generated_files/pin_manager.c: 76:     ANSELC = 0xF4;
 12952  0CB7  30F4               	movlw	244
 12953  0CB8  0023               	movlb	3	; select bank3
 12954  0CB9  008E               	movwf	14	;volatile
 12955                           
 12956                           ;mcc_generated_files/pin_manager.c: 77:     ANSELB = 0x20;
 12957  0CBA  3020               	movlw	32
 12958  0CBB  008D               	movwf	13	;volatile
 12959                           
 12960                           ;mcc_generated_files/pin_manager.c: 78:     ANSELA = 0x01;
 12961  0CBC  3001               	movlw	1
 12962  0CBD  008C               	movwf	12	;volatile
 12963                           
 12964                           ;mcc_generated_files/pin_manager.c: 83:     WPUB = 0x00;
 12965  0CBE  0024               	movlb	4	; select bank4
 12966  0CBF  018D               	clrf	13	;volatile
 12967                           
 12968                           ;mcc_generated_files/pin_manager.c: 84:     WPUA = 0x00;
 12969  0CC0  018C               	clrf	12	;volatile
 12970                           
 12971                           ;mcc_generated_files/pin_manager.c: 85:     WPUC = 0x00;
 12972  0CC1  018E               	clrf	14	;volatile
 12973                           
 12974                           ;mcc_generated_files/pin_manager.c: 90:     ODCONA = 0x00;
 12975  0CC2  0025               	movlb	5	; select bank5
 12976  0CC3  018C               	clrf	12	;volatile
 12977                           
 12978                           ;mcc_generated_files/pin_manager.c: 91:     ODCONB = 0x00;
 12979  0CC4  018D               	clrf	13	;volatile
 12980                           
 12981                           ;mcc_generated_files/pin_manager.c: 92:     ODCONC = 0x00;
 12982  0CC5  018E               	clrf	14	;volatile
 12983                           
 12984                           ;mcc_generated_files/pin_manager.c: 97:     SLRCONA = 0x37;
 12985  0CC6  3037               	movlw	55
 12986  0CC7  0026               	movlb	6	; select bank6
 12987  0CC8  008C               	movwf	12	;volatile
 12988                           
 12989                           ;mcc_generated_files/pin_manager.c: 98:     SLRCONB = 0xF0;
 12990  0CC9  30F0               	movlw	240
 12991  0CCA  008D               	movwf	13	;volatile
 12992                           
 12993                           ;mcc_generated_files/pin_manager.c: 99:     SLRCONC = 0xFF;
 12994  0CCB  30FF               	movlw	255
 12995  0CCC  008E               	movwf	14	;volatile
 12996                           
 12997                           ;mcc_generated_files/pin_manager.c: 106:     IOCAFbits.IOCAF4 = 0;
 12998  0CCD  0027               	movlb	7	; select bank7
 12999  0CCE  1213               	bcf	19,4	;volatile
 13000                           
 13001                           ;mcc_generated_files/pin_manager.c: 108:     IOCANbits.IOCAN4 = 1;
 13002  0CCF  1612               	bsf	18,4	;volatile
 13003                           
 13004                           ;mcc_generated_files/pin_manager.c: 110:     IOCAPbits.IOCAP4 = 0;
 13005  0CD0  1211               	bcf	17,4	;volatile
 13006                           
 13007                           ;mcc_generated_files/pin_manager.c: 115:     IOCAF4_SetInterruptHandler(IOCAF4_DefaultIn
      +                          terruptHandler);
 13008  0CD1  306F               	movlw	low _IOCAF4_DefaultInterruptHandler
 13009  0CD2  0020               	movlb	0	; select bank0
 13010  0CD3  00A0               	movwf	IOCAF4_SetInterruptHandler@InterruptHandler
 13011  0CD4  3016               	movlw	high _IOCAF4_DefaultInterruptHandler
 13012  0CD5  00A1               	movwf	IOCAF4_SetInterruptHandler@InterruptHandler+1
 13013  0CD6  3197  2783         	fcall	_IOCAF4_SetInterruptHandler
 13014                           
 13015                           ;mcc_generated_files/pin_manager.c: 118:     PIE0bits.IOCIE = 1;
 13016  0CD8  0021               	movlb	1	; select bank1
 13017  0CD9  1610               	bsf	16,4	;volatile
 13018                           
 13019                           ;mcc_generated_files/pin_manager.c: 121:     SSP2DATPPS = 0x0C;
 13020  0CDA  300C               	movlw	12
 13021  0CDB  003C               	movlb	28	; select bank28
 13022  0CDC  009E               	movwf	30	;volatile
 13023                           
 13024                           ;mcc_generated_files/pin_manager.c: 122:     SSP1CLKPPS = 0x0F;
 13025  0CDD  300F               	movlw	15
 13026  0CDE  00A0               	movwf	32	;volatile
 13027                           
 13028                           ;mcc_generated_files/pin_manager.c: 123:     RA4PPS = 0x19;
 13029  0CDF  3019               	movlw	25
 13030  0CE0  003D               	movlb	29	; select bank29
 13031  0CE1  0094               	movwf	20	;volatile
 13032                           
 13033                           ;mcc_generated_files/pin_manager.c: 124:     RB6PPS = 0x1A;
 13034  0CE2  301A               	movlw	26
 13035  0CE3  009E               	movwf	30	;volatile
 13036                           
 13037                           ;mcc_generated_files/pin_manager.c: 125:     RB7PPS = 0x18;
 13038  0CE4  3018               	movlw	24
 13039  0CE5  009F               	movwf	31	;volatile
 13040                           
 13041                           ;mcc_generated_files/pin_manager.c: 126:     RC2PPS = 0x1B;
 13042  0CE6  301B               	movlw	27
 13043  0CE7  00A2               	movwf	34	;volatile
 13044                           
 13045                           ;mcc_generated_files/pin_manager.c: 127:     RC5PPS = 0x14;
 13046  0CE8  3014               	movlw	20
 13047  0CE9  00A5               	movwf	37	;volatile
 13048                           
 13049                           ;mcc_generated_files/pin_manager.c: 128:     SSP1DATPPS = 0x04;
 13050  0CEA  3004               	movlw	4
 13051  0CEB  003C               	movlb	28	; select bank28
 13052  0CEC  00A1               	movwf	33	;volatile
 13053                           
 13054                           ;mcc_generated_files/pin_manager.c: 129:     SSP2CLKPPS = 0x0E;
 13055  0CED  300E               	movlw	14
 13056  0CEE  009D               	movwf	29	;volatile
 13057  0CEF  0008               	return
 13058  0CF0                     __end_of_PIN_MANAGER_Initialize:	
 13059                           
 13060                           	psect	text55
 13061  1783                     __ptext55:	
 13062 ;; *************** function _IOCAF4_SetInterruptHandler *****************
 13063 ;; Defined at:
 13064 ;;		line 159 in file "mcc_generated_files/pin_manager.c"
 13065 ;; Parameters:    Size  Location     Type
 13066 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
 13067 ;;		 -> IOCAF4_DefaultInterruptHandler(1), 
 13068 ;; Auto vars:     Size  Location     Type
 13069 ;;		None
 13070 ;; Return value:  Size  Location     Type
 13071 ;;                  1    wreg      void 
 13072 ;; Registers used:
 13073 ;;		wreg
 13074 ;; Tracked objects:
 13075 ;;		On entry : 0/0
 13076 ;;		On exit  : 0/0
 13077 ;;		Unchanged: 0/0
 13078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13079 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13080 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13082 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13083 ;;Total ram usage:        2 bytes
 13084 ;; Hardware stack levels used:    1
 13085 ;; Hardware stack levels required when called:    5
 13086 ;; This function calls:
 13087 ;;		Nothing
 13088 ;; This function is called by:
 13089 ;;		_PIN_MANAGER_Initialize
 13090 ;; This function uses a non-reentrant model
 13091 ;;
 13092                           
 13093                           
 13094                           ;psect for function _IOCAF4_SetInterruptHandler
 13095  1783                     _IOCAF4_SetInterruptHandler:	
 13096                           
 13097                           ;mcc_generated_files/pin_manager.c: 160:     IOCAF4_InterruptHandler = InterruptHandler;
 13098                           
 13099                           ;incstack = 0
 13100                           ; Regs used in _IOCAF4_SetInterruptHandler: [wreg]
 13101  1783  0020               	movlb	0	; select bank0
 13102  1784  0821               	movf	IOCAF4_SetInterruptHandler@InterruptHandler+1,w
 13103  1785  0021               	movlb	1	; select bank1
 13104  1786  00ED               	movwf	(_IOCAF4_InterruptHandler+1)^(0+128)
 13105  1787  0020               	movlb	0	; select bank0
 13106  1788  0820               	movf	IOCAF4_SetInterruptHandler@InterruptHandler,w
 13107  1789  0021               	movlb	1	; select bank1
 13108  178A  00EC               	movwf	_IOCAF4_InterruptHandler^(0+128)
 13109  178B  0008               	return
 13110  178C                     __end_of_IOCAF4_SetInterruptHandler:	
 13111                           
 13112                           	psect	text56
 13113  1736                     __ptext56:	
 13114 ;; *************** function _OSCILLATOR_Initialize *****************
 13115 ;; Defined at:
 13116 ;;		line 64 in file "mcc_generated_files/mcc.c"
 13117 ;; Parameters:    Size  Location     Type
 13118 ;;		None
 13119 ;; Auto vars:     Size  Location     Type
 13120 ;;		None
 13121 ;; Return value:  Size  Location     Type
 13122 ;;                  1    wreg      void 
 13123 ;; Registers used:
 13124 ;;		wreg, status,2
 13125 ;; Tracked objects:
 13126 ;;		On entry : 0/0
 13127 ;;		On exit  : 0/0
 13128 ;;		Unchanged: 0/0
 13129 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13130 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13131 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13132 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13133 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13134 ;;Total ram usage:        0 bytes
 13135 ;; Hardware stack levels used:    1
 13136 ;; Hardware stack levels required when called:    5
 13137 ;; This function calls:
 13138 ;;		Nothing
 13139 ;; This function is called by:
 13140 ;;		_SYSTEM_Initialize
 13141 ;; This function uses a non-reentrant model
 13142 ;;
 13143                           
 13144                           
 13145                           ;psect for function _OSCILLATOR_Initialize
 13146  1736                     _OSCILLATOR_Initialize:	
 13147                           
 13148                           ;mcc_generated_files/mcc.c: 67:     OSCCON1 = 0x61;
 13149                           
 13150                           ;incstack = 0
 13151                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 13152  1736  3061               	movlw	97
 13153  1737  0032               	movlb	18	; select bank18
 13154  1738  0099               	movwf	25	;volatile
 13155                           
 13156                           ;mcc_generated_files/mcc.c: 69:     OSCCON3 = 0x00;
 13157  1739  019B               	clrf	27	;volatile
 13158                           
 13159                           ;mcc_generated_files/mcc.c: 71:     OSCEN = 0x00;
 13160  173A  019D               	clrf	29	;volatile
 13161                           
 13162                           ;mcc_generated_files/mcc.c: 73:     OSCFRQ = 0x00;
 13163  173B  019F               	clrf	31	;volatile
 13164                           
 13165                           ;mcc_generated_files/mcc.c: 75:     OSCTUNE = 0x00;
 13166  173C  019E               	clrf	30	;volatile
 13167  173D  0008               	return
 13168  173E                     __end_of_OSCILLATOR_Initialize:	
 13169                           
 13170                           	psect	text57
 13171  0C69                     __ptext57:	
 13172 ;; *************** function _EUSART_Initialize *****************
 13173 ;; Defined at:
 13174 ;;		line 85 in file "mcc_generated_files/eusart.c"
 13175 ;; Parameters:    Size  Location     Type
 13176 ;;		None
 13177 ;; Auto vars:     Size  Location     Type
 13178 ;;		None
 13179 ;; Return value:  Size  Location     Type
 13180 ;;                  1    wreg      void 
 13181 ;; Registers used:
 13182 ;;		wreg, status,2, status,0, pclath, cstack
 13183 ;; Tracked objects:
 13184 ;;		On entry : 0/0
 13185 ;;		On exit  : 0/0
 13186 ;;		Unchanged: 0/0
 13187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13188 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13189 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13190 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13191 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13192 ;;Total ram usage:        1 bytes
 13193 ;; Hardware stack levels used:    1
 13194 ;; Hardware stack levels required when called:    6
 13195 ;; This function calls:
 13196 ;;		_EUSART_SetErrorHandler
 13197 ;;		_EUSART_SetFramingErrorHandler
 13198 ;;		_EUSART_SetOverrunErrorHandler
 13199 ;;		_EUSART_SetRxInterruptHandler
 13200 ;;		_EUSART_SetTxInterruptHandler
 13201 ;; This function is called by:
 13202 ;;		_SYSTEM_Initialize
 13203 ;; This function uses a non-reentrant model
 13204 ;;
 13205                           
 13206                           
 13207                           ;psect for function _EUSART_Initialize
 13208  0C69                     _EUSART_Initialize:	
 13209                           
 13210                           ;mcc_generated_files/eusart.c: 88:     PIE1bits.RCIE = 0;
 13211                           
 13212                           ;incstack = 0
 13213                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
 13214  0C69  0021               	movlb	1	; select bank1
 13215  0C6A  1291               	bcf	17,5	;volatile
 13216                           
 13217                           ;mcc_generated_files/eusart.c: 89:     EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
 13218  0C6B  30F2               	movlw	low _EUSART_Receive_ISR
 13219  0C6C  0020               	movlb	0	; select bank0
 13220  0C6D  00A0               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
 13221  0C6E  300B               	movlw	high _EUSART_Receive_ISR
 13222  0C6F  00A1               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
 13223  0C70  3197  2771  318C   	fcall	_EUSART_SetRxInterruptHandler
 13224                           
 13225                           ;mcc_generated_files/eusart.c: 90:     PIE1bits.TXIE = 0;
 13226  0C73  0021               	movlb	1	; select bank1
 13227  0C74  1211               	bcf	17,4	;volatile
 13228                           
 13229                           ;mcc_generated_files/eusart.c: 91:     EUSART_SetTxInterruptHandler(EUSART_Transmit_ISR)
      +                          ;
 13230  0C75  3043               	movlw	low _EUSART_Transmit_ISR
 13231  0C76  0020               	movlb	0	; select bank0
 13232  0C77  00A0               	movwf	EUSART_SetTxInterruptHandler@interruptHandler
 13233  0C78  3009               	movlw	high _EUSART_Transmit_ISR
 13234  0C79  00A1               	movwf	EUSART_SetTxInterruptHandler@interruptHandler+1
 13235  0C7A  3197  277A  318C   	fcall	_EUSART_SetTxInterruptHandler
 13236                           
 13237                           ;mcc_generated_files/eusart.c: 95:     BAUD1CON = 0x0A;
 13238  0C7D  300A               	movlw	10
 13239  0C7E  0023               	movlb	3	; select bank3
 13240  0C7F  009F               	movwf	31	;volatile
 13241                           
 13242                           ;mcc_generated_files/eusart.c: 98:     RC1STA = 0x80;
 13243  0C80  3080               	movlw	128
 13244  0C81  009D               	movwf	29	;volatile
 13245                           
 13246                           ;mcc_generated_files/eusart.c: 101:     TX1STA = 0x24;
 13247  0C82  3024               	movlw	36
 13248  0C83  009E               	movwf	30	;volatile
 13249                           
 13250                           ;mcc_generated_files/eusart.c: 104:     SP1BRGL = 0x0C;
 13251  0C84  300C               	movlw	12
 13252  0C85  009B               	movwf	27	;volatile
 13253                           
 13254                           ;mcc_generated_files/eusart.c: 107:     SP1BRGH = 0x00;
 13255  0C86  019C               	clrf	28	;volatile
 13256                           
 13257                           ;mcc_generated_files/eusart.c: 110:     EUSART_SetFramingErrorHandler(EUSART_DefaultFram
      +                          ingErrorHandler);
 13258  0C87  306E               	movlw	low _EUSART_DefaultFramingErrorHandler
 13259  0C88  0020               	movlb	0	; select bank0
 13260  0C89  00A0               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
 13261  0C8A  3016               	movlw	high _EUSART_DefaultFramingErrorHandler
 13262  0C8B  00A1               	movwf	EUSART_SetFramingErrorHandler@interruptHandler+1
 13263  0C8C  3197  275F  318C   	fcall	_EUSART_SetFramingErrorHandler
 13264                           
 13265                           ;mcc_generated_files/eusart.c: 111:     EUSART_SetOverrunErrorHandler(EUSART_DefaultOver
      +                          runErrorHandler);
 13266  0C8F  30AA               	movlw	low _EUSART_DefaultOverrunErrorHandler
 13267  0C90  0020               	movlb	0	; select bank0
 13268  0C91  00A0               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
 13269  0C92  3016               	movlw	high _EUSART_DefaultOverrunErrorHandler
 13270  0C93  00A1               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler+1
 13271  0C94  3197  2768  318C   	fcall	_EUSART_SetOverrunErrorHandler
 13272                           
 13273                           ;mcc_generated_files/eusart.c: 112:     EUSART_SetErrorHandler(EUSART_DefaultErrorHandle
      +                          r);
 13274  0C97  3074               	movlw	low _EUSART_DefaultErrorHandler
 13275  0C98  0020               	movlb	0	; select bank0
 13276  0C99  00A0               	movwf	EUSART_SetErrorHandler@interruptHandler
 13277  0C9A  3016               	movlw	high _EUSART_DefaultErrorHandler
 13278  0C9B  00A1               	movwf	EUSART_SetErrorHandler@interruptHandler+1
 13279  0C9C  3197  2756         	fcall	_EUSART_SetErrorHandler
 13280                           
 13281                           ;mcc_generated_files/eusart.c: 114:     eusartRxLastError.status = 0;
 13282  0C9E  0020               	movlb	0	; select bank0
 13283  0C9F  01EA               	clrf	_eusartRxLastError	;volatile
 13284                           
 13285                           ;mcc_generated_files/eusart.c: 117:     eusartTxHead = 0;
 13286  0CA0  01F4               	clrf	_eusartTxHead	;volatile
 13287                           
 13288                           ;mcc_generated_files/eusart.c: 118:     eusartTxTail = 0;
 13289  0CA1  01F3               	clrf	_eusartTxTail	;volatile
 13290                           
 13291                           ;mcc_generated_files/eusart.c: 119:     eusartTxBufferRemaining = sizeof(eusartTxBuffer)
      +                          ;
 13292  0CA2  3008               	movlw	8
 13293  0CA3  00A2               	movwf	??_EUSART_Initialize
 13294  0CA4  0822               	movf	??_EUSART_Initialize,w
 13295  0CA5  00EE               	movwf	_eusartTxBufferRemaining	;volatile
 13296                           
 13297                           ;mcc_generated_files/eusart.c: 121:     eusartRxHead = 0;
 13298  0CA6  01F2               	clrf	_eusartRxHead	;volatile
 13299                           
 13300                           ;mcc_generated_files/eusart.c: 122:     eusartRxTail = 0;
 13301  0CA7  01F1               	clrf	_eusartRxTail	;volatile
 13302                           
 13303                           ;mcc_generated_files/eusart.c: 123:     eusartRxCount = 0;
 13304  0CA8  01F0               	clrf	_eusartRxCount	;volatile
 13305                           
 13306                           ;mcc_generated_files/eusart.c: 126:     PIE1bits.RCIE = 1;
 13307  0CA9  0021               	movlb	1	; select bank1
 13308  0CAA  1691               	bsf	17,5	;volatile
 13309  0CAB  0008               	return
 13310  0CAC                     __end_of_EUSART_Initialize:	
 13311                           
 13312                           	psect	text58
 13313  177A                     __ptext58:	
 13314 ;; *************** function _EUSART_SetTxInterruptHandler *****************
 13315 ;; Defined at:
 13316 ;;		line 284 in file "mcc_generated_files/eusart.c"
 13317 ;; Parameters:    Size  Location     Type
 13318 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
 13319 ;;		 -> EUSART_Transmit_ISR(1), 
 13320 ;; Auto vars:     Size  Location     Type
 13321 ;;		None
 13322 ;; Return value:  Size  Location     Type
 13323 ;;                  1    wreg      void 
 13324 ;; Registers used:
 13325 ;;		wreg
 13326 ;; Tracked objects:
 13327 ;;		On entry : 0/0
 13328 ;;		On exit  : 0/0
 13329 ;;		Unchanged: 0/0
 13330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13331 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13332 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13333 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13334 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13335 ;;Total ram usage:        2 bytes
 13336 ;; Hardware stack levels used:    1
 13337 ;; Hardware stack levels required when called:    5
 13338 ;; This function calls:
 13339 ;;		Nothing
 13340 ;; This function is called by:
 13341 ;;		_EUSART_Initialize
 13342 ;; This function uses a non-reentrant model
 13343 ;;
 13344                           
 13345                           
 13346                           ;psect for function _EUSART_SetTxInterruptHandler
 13347  177A                     _EUSART_SetTxInterruptHandler:	
 13348                           
 13349                           ;mcc_generated_files/eusart.c: 285:     EUSART_TxDefaultInterruptHandler = interruptHand
      +                          ler;
 13350                           
 13351                           ;incstack = 0
 13352                           ; Regs used in _EUSART_SetTxInterruptHandler: [wreg]
 13353  177A  0020               	movlb	0	; select bank0
 13354  177B  0821               	movf	EUSART_SetTxInterruptHandler@interruptHandler+1,w
 13355  177C  0021               	movlb	1	; select bank1
 13356  177D  00EF               	movwf	(_EUSART_TxDefaultInterruptHandler+1)^(0+128)
 13357  177E  0020               	movlb	0	; select bank0
 13358  177F  0820               	movf	EUSART_SetTxInterruptHandler@interruptHandler,w
 13359  1780  0021               	movlb	1	; select bank1
 13360  1781  00EE               	movwf	_EUSART_TxDefaultInterruptHandler^(0+128)
 13361  1782  0008               	return
 13362  1783                     __end_of_EUSART_SetTxInterruptHandler:	
 13363                           
 13364                           	psect	text59
 13365  1771                     __ptext59:	
 13366 ;; *************** function _EUSART_SetRxInterruptHandler *****************
 13367 ;; Defined at:
 13368 ;;		line 288 in file "mcc_generated_files/eusart.c"
 13369 ;; Parameters:    Size  Location     Type
 13370 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
 13371 ;;		 -> EUSART_Receive_ISR(1), 
 13372 ;; Auto vars:     Size  Location     Type
 13373 ;;		None
 13374 ;; Return value:  Size  Location     Type
 13375 ;;                  1    wreg      void 
 13376 ;; Registers used:
 13377 ;;		wreg
 13378 ;; Tracked objects:
 13379 ;;		On entry : 0/0
 13380 ;;		On exit  : 0/0
 13381 ;;		Unchanged: 0/0
 13382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13383 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13384 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13385 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13386 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13387 ;;Total ram usage:        2 bytes
 13388 ;; Hardware stack levels used:    1
 13389 ;; Hardware stack levels required when called:    5
 13390 ;; This function calls:
 13391 ;;		Nothing
 13392 ;; This function is called by:
 13393 ;;		_EUSART_Initialize
 13394 ;; This function uses a non-reentrant model
 13395 ;;
 13396                           
 13397                           
 13398                           ;psect for function _EUSART_SetRxInterruptHandler
 13399  1771                     _EUSART_SetRxInterruptHandler:	
 13400                           
 13401                           ;mcc_generated_files/eusart.c: 289:     EUSART_RxDefaultInterruptHandler = interruptHand
      +                          ler;
 13402                           
 13403                           ;incstack = 0
 13404                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
 13405  1771  0020               	movlb	0	; select bank0
 13406  1772  0821               	movf	EUSART_SetRxInterruptHandler@interruptHandler+1,w
 13407  1773  0022               	movlb	2	; select bank2
 13408  1774  00ED               	movwf	(_EUSART_RxDefaultInterruptHandler+1)^(0+256)
 13409  1775  0020               	movlb	0	; select bank0
 13410  1776  0820               	movf	EUSART_SetRxInterruptHandler@interruptHandler,w
 13411  1777  0022               	movlb	2	; select bank2
 13412  1778  00EC               	movwf	_EUSART_RxDefaultInterruptHandler^(0+256)
 13413  1779  0008               	return
 13414  177A                     __end_of_EUSART_SetRxInterruptHandler:	
 13415                           
 13416                           	psect	text60
 13417  1768                     __ptext60:	
 13418 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
 13419 ;; Defined at:
 13420 ;;		line 276 in file "mcc_generated_files/eusart.c"
 13421 ;; Parameters:    Size  Location     Type
 13422 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
 13423 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
 13424 ;; Auto vars:     Size  Location     Type
 13425 ;;		None
 13426 ;; Return value:  Size  Location     Type
 13427 ;;                  1    wreg      void 
 13428 ;; Registers used:
 13429 ;;		wreg
 13430 ;; Tracked objects:
 13431 ;;		On entry : 0/0
 13432 ;;		On exit  : 0/0
 13433 ;;		Unchanged: 0/0
 13434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13435 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13436 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13437 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13438 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13439 ;;Total ram usage:        2 bytes
 13440 ;; Hardware stack levels used:    1
 13441 ;; Hardware stack levels required when called:    5
 13442 ;; This function calls:
 13443 ;;		Nothing
 13444 ;; This function is called by:
 13445 ;;		_EUSART_Initialize
 13446 ;; This function uses a non-reentrant model
 13447 ;;
 13448                           
 13449                           
 13450                           ;psect for function _EUSART_SetOverrunErrorHandler
 13451  1768                     _EUSART_SetOverrunErrorHandler:	
 13452                           
 13453                           ;mcc_generated_files/eusart.c: 277:     EUSART_OverrunErrorHandler = interruptHandler;
 13454                           
 13455                           ;incstack = 0
 13456                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
 13457  1768  0020               	movlb	0	; select bank0
 13458  1769  0821               	movf	EUSART_SetOverrunErrorHandler@interruptHandler+1,w
 13459  176A  0022               	movlb	2	; select bank2
 13460  176B  00E9               	movwf	(_EUSART_OverrunErrorHandler+1)^(0+256)
 13461  176C  0020               	movlb	0	; select bank0
 13462  176D  0820               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
 13463  176E  0022               	movlb	2	; select bank2
 13464  176F  00E8               	movwf	_EUSART_OverrunErrorHandler^(0+256)
 13465  1770  0008               	return
 13466  1771                     __end_of_EUSART_SetOverrunErrorHandler:	
 13467                           
 13468                           	psect	text61
 13469  175F                     __ptext61:	
 13470 ;; *************** function _EUSART_SetFramingErrorHandler *****************
 13471 ;; Defined at:
 13472 ;;		line 272 in file "mcc_generated_files/eusart.c"
 13473 ;; Parameters:    Size  Location     Type
 13474 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
 13475 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
 13476 ;; Auto vars:     Size  Location     Type
 13477 ;;		None
 13478 ;; Return value:  Size  Location     Type
 13479 ;;                  1    wreg      void 
 13480 ;; Registers used:
 13481 ;;		wreg
 13482 ;; Tracked objects:
 13483 ;;		On entry : 0/0
 13484 ;;		On exit  : 0/0
 13485 ;;		Unchanged: 0/0
 13486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13487 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13488 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13489 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13490 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13491 ;;Total ram usage:        2 bytes
 13492 ;; Hardware stack levels used:    1
 13493 ;; Hardware stack levels required when called:    5
 13494 ;; This function calls:
 13495 ;;		Nothing
 13496 ;; This function is called by:
 13497 ;;		_EUSART_Initialize
 13498 ;; This function uses a non-reentrant model
 13499 ;;
 13500                           
 13501                           
 13502                           ;psect for function _EUSART_SetFramingErrorHandler
 13503  175F                     _EUSART_SetFramingErrorHandler:	
 13504                           
 13505                           ;mcc_generated_files/eusart.c: 273:     EUSART_FramingErrorHandler = interruptHandler;
 13506                           
 13507                           ;incstack = 0
 13508                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
 13509  175F  0020               	movlb	0	; select bank0
 13510  1760  0821               	movf	EUSART_SetFramingErrorHandler@interruptHandler+1,w
 13511  1761  0022               	movlb	2	; select bank2
 13512  1762  00EB               	movwf	(_EUSART_FramingErrorHandler+1)^(0+256)
 13513  1763  0020               	movlb	0	; select bank0
 13514  1764  0820               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
 13515  1765  0022               	movlb	2	; select bank2
 13516  1766  00EA               	movwf	_EUSART_FramingErrorHandler^(0+256)
 13517  1767  0008               	return
 13518  1768                     __end_of_EUSART_SetFramingErrorHandler:	
 13519                           
 13520                           	psect	text62
 13521  1756                     __ptext62:	
 13522 ;; *************** function _EUSART_SetErrorHandler *****************
 13523 ;; Defined at:
 13524 ;;		line 280 in file "mcc_generated_files/eusart.c"
 13525 ;; Parameters:    Size  Location     Type
 13526 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
 13527 ;;		 -> EUSART_DefaultErrorHandler(1), 
 13528 ;; Auto vars:     Size  Location     Type
 13529 ;;		None
 13530 ;; Return value:  Size  Location     Type
 13531 ;;                  1    wreg      void 
 13532 ;; Registers used:
 13533 ;;		wreg
 13534 ;; Tracked objects:
 13535 ;;		On entry : 0/0
 13536 ;;		On exit  : 0/0
 13537 ;;		Unchanged: 0/0
 13538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13539 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13540 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13542 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13543 ;;Total ram usage:        2 bytes
 13544 ;; Hardware stack levels used:    1
 13545 ;; Hardware stack levels required when called:    5
 13546 ;; This function calls:
 13547 ;;		Nothing
 13548 ;; This function is called by:
 13549 ;;		_EUSART_Initialize
 13550 ;; This function uses a non-reentrant model
 13551 ;;
 13552                           
 13553                           
 13554                           ;psect for function _EUSART_SetErrorHandler
 13555  1756                     _EUSART_SetErrorHandler:	
 13556                           
 13557                           ;mcc_generated_files/eusart.c: 281:     EUSART_ErrorHandler = interruptHandler;
 13558                           
 13559                           ;incstack = 0
 13560                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
 13561  1756  0020               	movlb	0	; select bank0
 13562  1757  0821               	movf	EUSART_SetErrorHandler@interruptHandler+1,w
 13563  1758  0023               	movlb	3	; select bank3
 13564  1759  00DB               	movwf	(_EUSART_ErrorHandler+1)^(0+384)
 13565  175A  0020               	movlb	0	; select bank0
 13566  175B  0820               	movf	EUSART_SetErrorHandler@interruptHandler,w
 13567  175C  0023               	movlb	3	; select bank3
 13568  175D  00DA               	movwf	_EUSART_ErrorHandler^(0+384)
 13569  175E  0008               	return
 13570  175F                     __end_of_EUSART_SetErrorHandler:	
 13571                           
 13572                           	psect	text63
 13573  172E                     __ptext63:	
 13574 ;; *************** function _ADC_Initialize *****************
 13575 ;; Defined at:
 13576 ;;		line 65 in file "mcc_generated_files/adc.c"
 13577 ;; Parameters:    Size  Location     Type
 13578 ;;		None
 13579 ;; Auto vars:     Size  Location     Type
 13580 ;;		None
 13581 ;; Return value:  Size  Location     Type
 13582 ;;                  1    wreg      void 
 13583 ;; Registers used:
 13584 ;;		wreg, status,2
 13585 ;; Tracked objects:
 13586 ;;		On entry : 0/0
 13587 ;;		On exit  : 0/0
 13588 ;;		Unchanged: 0/0
 13589 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13590 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13591 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13592 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13593 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13594 ;;Total ram usage:        0 bytes
 13595 ;; Hardware stack levels used:    1
 13596 ;; Hardware stack levels required when called:    5
 13597 ;; This function calls:
 13598 ;;		Nothing
 13599 ;; This function is called by:
 13600 ;;		_SYSTEM_Initialize
 13601 ;; This function uses a non-reentrant model
 13602 ;;
 13603                           
 13604                           
 13605                           ;psect for function _ADC_Initialize
 13606  172E                     _ADC_Initialize:	
 13607                           
 13608                           ;mcc_generated_files/adc.c: 70:     ADCON0 = 0x01;
 13609                           
 13610                           ;incstack = 0
 13611                           ; Regs used in _ADC_Initialize: [wreg+status,2]
 13612  172E  3001               	movlw	1
 13613  172F  0021               	movlb	1	; select bank1
 13614  1730  009D               	movwf	29	;volatile
 13615                           
 13616                           ;mcc_generated_files/adc.c: 73:     ADCON1 = 0x00;
 13617  1731  019E               	clrf	30	;volatile
 13618                           
 13619                           ;mcc_generated_files/adc.c: 76:     ADACT = 0x00;
 13620  1732  019F               	clrf	31	;volatile
 13621                           
 13622                           ;mcc_generated_files/adc.c: 79:     ADRESL = 0x00;
 13623  1733  019B               	clrf	27	;volatile
 13624                           
 13625                           ;mcc_generated_files/adc.c: 82:     ADRESH = 0x00;
 13626  1734  019C               	clrf	28	;volatile
 13627  1735  0008               	return
 13628  1736                     __end_of_ADC_Initialize:	
 13629                           
 13630                           	psect	text64
 13631  17E0                     __ptext64:	
 13632 ;; *************** function _PIR_Sensor *****************
 13633 ;; Defined at:
 13634 ;;		line 595 in file "main.c"
 13635 ;; Parameters:    Size  Location     Type
 13636 ;;		None
 13637 ;; Auto vars:     Size  Location     Type
 13638 ;;		None
 13639 ;; Return value:  Size  Location     Type
 13640 ;;                  1    wreg      _Bool 
 13641 ;; Registers used:
 13642 ;;		wreg, status,2
 13643 ;; Tracked objects:
 13644 ;;		On entry : 0/0
 13645 ;;		On exit  : 0/0
 13646 ;;		Unchanged: 0/0
 13647 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13648 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13649 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13650 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13651 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13652 ;;Total ram usage:        0 bytes
 13653 ;; Hardware stack levels used:    1
 13654 ;; Hardware stack levels required when called:    5
 13655 ;; This function calls:
 13656 ;;		Nothing
 13657 ;; This function is called by:
 13658 ;;		_main
 13659 ;; This function uses a non-reentrant model
 13660 ;;
 13661                           
 13662                           
 13663                           ;psect for function _PIR_Sensor
 13664  17E0                     _PIR_Sensor:	
 13665                           
 13666                           ;main.c: 597:     if(PORTCbits.RC3 >= 1){
 13667                           
 13668                           ;incstack = 0
 13669                           ; Regs used in _PIR_Sensor: [wreg+status,2]
 13670  17E0  0020               	movlb	0	; select bank0
 13671  17E1  1D8E               	btfss	14,3	;volatile
 13672  17E2  2FEA               	goto	l7454
 13673                           
 13674                           ;main.c: 598:         prox = 1;
 13675  17E3  3001               	movlw	1
 13676  17E4  0021               	movlb	1	; select bank1
 13677  17E5  00E0               	movwf	_prox^(0+128)
 13678  17E6  3000               	movlw	0
 13679  17E7  00E1               	movwf	(_prox^(0+128)+1)
 13680                           
 13681                           ;main.c: 599:         return 1;
 13682  17E8  3001               	movlw	1
 13683  17E9  0008               	return
 13684  17EA                     l7454:	
 13685                           
 13686                           ;main.c: 602:         prox = 0;
 13687  17EA  0021               	movlb	1	; select bank1
 13688  17EB  01E0               	clrf	_prox^(0+128)
 13689  17EC  01E1               	clrf	(_prox+1)^(0+128)
 13690                           
 13691                           ;main.c: 603:         return 0;
 13692  17ED  3000               	movlw	0
 13693  17EE  0008               	return
 13694  17EF                     __end_of_PIR_Sensor:	
 13695                           
 13696                           	psect	text65
 13697  0603                     __ptext65:	
 13698 ;; *************** function _Get_ADC *****************
 13699 ;; Defined at:
 13700 ;;		line 518 in file "main.c"
 13701 ;; Parameters:    Size  Location     Type
 13702 ;;		None
 13703 ;; Auto vars:     Size  Location     Type
 13704 ;;  val             2   15[BANK0 ] int 
 13705 ;; Return value:  Size  Location     Type
 13706 ;;                  1    wreg      void 
 13707 ;; Registers used:
 13708 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13709 ;; Tracked objects:
 13710 ;;		On entry : 0/0
 13711 ;;		On exit  : 0/0
 13712 ;;		Unchanged: 0/0
 13713 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13714 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13715 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13716 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13717 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13718 ;;Total ram usage:        5 bytes
 13719 ;; Hardware stack levels used:    1
 13720 ;; Hardware stack levels required when called:    8
 13721 ;; This function calls:
 13722 ;;		_ADC_GetConversion
 13723 ;;		_Display_Name
 13724 ;;		_Noise
 13725 ;; This function is called by:
 13726 ;;		_main
 13727 ;; This function uses a non-reentrant model
 13728 ;;
 13729                           
 13730                           
 13731                           ;psect for function _Get_ADC
 13732  0603                     _Get_ADC:	
 13733                           
 13734                           ;main.c: 519:     adcResult = ADC_GetConversion(BTN) >> 6;
 13735                           
 13736                           ;incstack = 0
 13737                           ; Regs used in _Get_ADC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13738  0603  3017               	movlw	23
 13739  0604  3189  2161  3186   	fcall	_ADC_GetConversion
 13740  0607  0020               	movlb	0	; select bank0
 13741  0608  0820               	movf	?_ADC_GetConversion,w
 13742  0609  00AC               	movwf	??_Get_ADC
 13743  060A  0821               	movf	?_ADC_GetConversion+1,w
 13744  060B  00AD               	movwf	??_Get_ADC+1
 13745  060C  3006               	movlw	6
 13746  060D                     u6745:	
 13747  060D  36AD               	lsrf	??_Get_ADC+1,f
 13748  060E  0CAC               	rrf	??_Get_ADC,f
 13749  060F  0B89               	decfsz	9,f
 13750  0610  2E0D               	goto	u6745
 13751  0611  082C               	movf	??_Get_ADC,w
 13752  0612  00AE               	movwf	??_Get_ADC+2
 13753  0613  082E               	movf	??_Get_ADC+2,w
 13754  0614  00EC               	movwf	_adcResult
 13755                           
 13756                           ;main.c: 520:     int val = adcResult;
 13757  0615  086C               	movf	_adcResult,w
 13758  0616  00AC               	movwf	??_Get_ADC
 13759  0617  01AD               	clrf	??_Get_ADC+1
 13760  0618  082C               	movf	??_Get_ADC,w
 13761  0619  00AF               	movwf	Get_ADC@val
 13762  061A  082D               	movf	??_Get_ADC+1,w
 13763  061B  00B0               	movwf	Get_ADC@val+1
 13764                           
 13765                           ;main.c: 532:     if(val >= 230 && val <= 239) {
 13766  061C  0830               	movf	Get_ADC@val+1,w
 13767  061D  3A80               	xorlw	128
 13768  061E  00AC               	movwf	??_Get_ADC
 13769  061F  3080               	movlw	128
 13770  0620  022C               	subwf	??_Get_ADC,w
 13771  0621  1D03               	skipz
 13772  0622  2E25               	goto	u6755
 13773  0623  30E6               	movlw	230
 13774  0624  022F               	subwf	Get_ADC@val,w
 13775  0625                     u6755:	
 13776  0625  1C03               	skipc
 13777  0626  2E37               	goto	l7698
 13778  0627  0020               	movlb	0	; select bank0
 13779  0628  0830               	movf	Get_ADC@val+1,w
 13780  0629  3A80               	xorlw	128
 13781  062A  00AC               	movwf	??_Get_ADC
 13782  062B  3080               	movlw	128
 13783  062C  022C               	subwf	??_Get_ADC,w
 13784  062D  1D03               	skipz
 13785  062E  2E31               	goto	u6765
 13786  062F  30F0               	movlw	240
 13787  0630  022F               	subwf	Get_ADC@val,w
 13788  0631                     u6765:	
 13789  0631  1803               	skipnc
 13790  0632  2E37               	goto	l7698
 13791                           
 13792                           ;main.c: 533:         Noise();
 13793  0633  3188  208F  3186   	fcall	_Noise
 13794                           
 13795                           ;main.c: 535:     }
 13796  0636  2EF7               	goto	l7754
 13797  0637                     l7698:	
 13798  0637  0020               	movlb	0	; select bank0
 13799  0638  0830               	movf	Get_ADC@val+1,w
 13800  0639  3A80               	xorlw	128
 13801  063A  00AC               	movwf	??_Get_ADC
 13802  063B  3080               	movlw	128
 13803  063C  022C               	subwf	??_Get_ADC,w
 13804  063D  1D03               	skipz
 13805  063E  2E41               	goto	u6775
 13806  063F  30C8               	movlw	200
 13807  0640  022F               	subwf	Get_ADC@val,w
 13808  0641                     u6775:	
 13809  0641  1C03               	skipc
 13810  0642  2E67               	goto	l7710
 13811  0643  0020               	movlb	0	; select bank0
 13812  0644  0830               	movf	Get_ADC@val+1,w
 13813  0645  3A80               	xorlw	128
 13814  0646  00AC               	movwf	??_Get_ADC
 13815  0647  3080               	movlw	128
 13816  0648  022C               	subwf	??_Get_ADC,w
 13817  0649  1D03               	skipz
 13818  064A  2E4D               	goto	u6785
 13819  064B  30D3               	movlw	211
 13820  064C  022F               	subwf	Get_ADC@val,w
 13821  064D                     u6785:	
 13822  064D  1803               	skipnc
 13823  064E  2E67               	goto	l7710
 13824                           
 13825                           ;main.c: 537:         Noise();
 13826  064F  3188  208F  3186   	fcall	_Noise
 13827                           
 13828                           ;main.c: 538:         brightness++;
 13829  0652  3001               	movlw	1
 13830  0653  0020               	movlb	0	; select bank0
 13831  0654  07DE               	addwf	_brightness,f
 13832  0655  3000               	movlw	0
 13833  0656  3DDF               	addwfc	_brightness+1,f
 13834                           
 13835                           ;main.c: 539:         if(brightness > 7) {
 13836  0657  085F               	movf	_brightness+1,w
 13837  0658  3A80               	xorlw	128
 13838  0659  00AC               	movwf	??_Get_ADC
 13839  065A  3080               	movlw	128
 13840  065B  022C               	subwf	??_Get_ADC,w
 13841  065C  3008               	movlw	8
 13842  065D  1903               	btfsc	3,2
 13843  065E  025E               	subwf	_brightness,w
 13844  065F  1C03               	skipc
 13845  0660  2EF7               	goto	l7754
 13846                           
 13847                           ;main.c: 540:            brightness = 7;
 13848  0661  3007               	movlw	7
 13849  0662  0020               	movlb	0	; select bank0
 13850  0663  00DE               	movwf	_brightness
 13851  0664  3000               	movlw	0
 13852  0665  00DF               	movwf	_brightness+1
 13853  0666  2EF7               	goto	l7754
 13854  0667                     l7710:	
 13855  0667  0020               	movlb	0	; select bank0
 13856  0668  0830               	movf	Get_ADC@val+1,w
 13857  0669  3A80               	xorlw	128
 13858  066A  00AC               	movwf	??_Get_ADC
 13859  066B  3080               	movlw	128
 13860  066C  022C               	subwf	??_Get_ADC,w
 13861  066D  1D03               	skipz
 13862  066E  2E71               	goto	u6805
 13863  066F  30B4               	movlw	180
 13864  0670  022F               	subwf	Get_ADC@val,w
 13865  0671                     u6805:	
 13866  0671  1C03               	skipc
 13867  0672  2E97               	goto	l7726
 13868  0673  0020               	movlb	0	; select bank0
 13869  0674  0830               	movf	Get_ADC@val+1,w
 13870  0675  3A80               	xorlw	128
 13871  0676  00AC               	movwf	??_Get_ADC
 13872  0677  3080               	movlw	128
 13873  0678  022C               	subwf	??_Get_ADC,w
 13874  0679  1D03               	skipz
 13875  067A  2E7D               	goto	u6815
 13876  067B  30BF               	movlw	191
 13877  067C  022F               	subwf	Get_ADC@val,w
 13878  067D                     u6815:	
 13879  067D  1803               	skipnc
 13880  067E  2E97               	goto	l7726
 13881                           
 13882                           ;main.c: 545:         Noise();
 13883  067F  3188  208F  3186   	fcall	_Noise
 13884                           
 13885                           ;main.c: 546:         printed = 0;
 13886  0682  0020               	movlb	0	; select bank0
 13887  0683  01ED               	clrf	_printed
 13888                           
 13889                           ;main.c: 547:         --name;
 13890  0684  30FF               	movlw	255
 13891  0685  07E0               	addwf	_name,f
 13892  0686  30FF               	movlw	255
 13893  0687  3DE1               	addwfc	_name+1,f
 13894                           
 13895                           ;main.c: 548:         if(name < 0) {
 13896  0688  1FE1               	btfss	_name+1,7
 13897  0689  2E8E               	goto	l7724
 13898                           
 13899                           ;main.c: 549:             name = 3;
 13900  068A  3003               	movlw	3
 13901  068B  00E0               	movwf	_name
 13902  068C  3000               	movlw	0
 13903  068D  00E1               	movwf	_name+1
 13904  068E                     l7724:	
 13905                           
 13906                           ;main.c: 551:         Display_Name(names[name]);
 13907  068E  3560               	lslf	_name,w
 13908  068F  3E60               	addlw	(low (_names| (0+256)))& (0+255)
 13909  0690  0086               	movwf	6
 13910  0691  3001               	movlw	1	; select bank2/3
 13911  0692  0087               	movwf	7
 13912  0693  3F40               	moviw [0]fsr1
 13913  0694  00A5               	movwf	Display_Name@string1
 13914  0695  3F41               	moviw [1]fsr1
 13915  0696  2EF4               	goto	L9
 13916  0697                     l7726:	
 13917                           ;main.c: 552:     }
 13918                           
 13919  0697  0020               	movlb	0	; select bank0
 13920  0698  0830               	movf	Get_ADC@val+1,w
 13921  0699  3A80               	xorlw	128
 13922  069A  00AC               	movwf	??_Get_ADC
 13923  069B  3080               	movlw	128
 13924  069C  022C               	subwf	??_Get_ADC,w
 13925  069D  1D03               	skipz
 13926  069E  2EA1               	goto	u6835
 13927  069F  3096               	movlw	150
 13928  06A0  022F               	subwf	Get_ADC@val,w
 13929  06A1                     u6835:	
 13930  06A1  1C03               	skipc
 13931  06A2  2EBC               	goto	l7738
 13932  06A3  0020               	movlb	0	; select bank0
 13933  06A4  0830               	movf	Get_ADC@val+1,w
 13934  06A5  3A80               	xorlw	128
 13935  06A6  00AC               	movwf	??_Get_ADC
 13936  06A7  3080               	movlw	128
 13937  06A8  022C               	subwf	??_Get_ADC,w
 13938  06A9  1D03               	skipz
 13939  06AA  2EAD               	goto	u6845
 13940  06AB  30A1               	movlw	161
 13941  06AC  022F               	subwf	Get_ADC@val,w
 13942  06AD                     u6845:	
 13943  06AD  1803               	skipnc
 13944  06AE  2EBC               	goto	l7738
 13945                           
 13946                           ;main.c: 554:         Noise();
 13947  06AF  3188  208F  3186   	fcall	_Noise
 13948                           
 13949                           ;main.c: 555:         --brightness;
 13950  06B2  30FF               	movlw	255
 13951  06B3  0020               	movlb	0	; select bank0
 13952  06B4  07DE               	addwf	_brightness,f
 13953  06B5  30FF               	movlw	255
 13954  06B6  3DDF               	addwfc	_brightness+1,f
 13955                           
 13956                           ;main.c: 556:         if(brightness < 0) {
 13957  06B7  1FDF               	btfss	_brightness+1,7
 13958  06B8  2EF7               	goto	l7754
 13959                           
 13960                           ;main.c: 557:             brightness = 0;
 13961  06B9  01DE               	clrf	_brightness
 13962  06BA  01DF               	clrf	_brightness+1
 13963  06BB  2EF7               	goto	l7754
 13964  06BC                     l7738:	
 13965  06BC  0020               	movlb	0	; select bank0
 13966  06BD  0830               	movf	Get_ADC@val+1,w
 13967  06BE  3A80               	xorlw	128
 13968  06BF  00AC               	movwf	??_Get_ADC
 13969  06C0  3080               	movlw	128
 13970  06C1  022C               	subwf	??_Get_ADC,w
 13971  06C2  1D03               	skipz
 13972  06C3  2EC6               	goto	u6865
 13973  06C4  3014               	movlw	20
 13974  06C5  022F               	subwf	Get_ADC@val,w
 13975  06C6                     u6865:	
 13976  06C6  1C03               	skipc
 13977  06C7  2EF7               	goto	l7754
 13978  06C8  0020               	movlb	0	; select bank0
 13979  06C9  0830               	movf	Get_ADC@val+1,w
 13980  06CA  3A80               	xorlw	128
 13981  06CB  00AC               	movwf	??_Get_ADC
 13982  06CC  3080               	movlw	128
 13983  06CD  022C               	subwf	??_Get_ADC,w
 13984  06CE  1D03               	skipz
 13985  06CF  2ED2               	goto	u6875
 13986  06D0  3018               	movlw	24
 13987  06D1  022F               	subwf	Get_ADC@val,w
 13988  06D2                     u6875:	
 13989  06D2  1803               	skipnc
 13990  06D3  2EF7               	goto	l7754
 13991                           
 13992                           ;main.c: 562:         Noise();
 13993  06D4  3188  208F  3186   	fcall	_Noise
 13994                           
 13995                           ;main.c: 563:         printed = 0;
 13996  06D7  0020               	movlb	0	; select bank0
 13997  06D8  01ED               	clrf	_printed
 13998                           
 13999                           ;main.c: 564:         name++;
 14000  06D9  3001               	movlw	1
 14001  06DA  07E0               	addwf	_name,f
 14002  06DB  3000               	movlw	0
 14003  06DC  3DE1               	addwfc	_name+1,f
 14004                           
 14005                           ;main.c: 565:         if(name > 3) {
 14006  06DD  0861               	movf	_name+1,w
 14007  06DE  3A80               	xorlw	128
 14008  06DF  00AC               	movwf	??_Get_ADC
 14009  06E0  3080               	movlw	128
 14010  06E1  022C               	subwf	??_Get_ADC,w
 14011  06E2  1D03               	skipz
 14012  06E3  2EE6               	goto	u6885
 14013  06E4  3004               	movlw	4
 14014  06E5  0260               	subwf	_name,w
 14015  06E6                     u6885:	
 14016  06E6  1C03               	skipc
 14017  06E7  2EEB               	goto	l7752
 14018                           
 14019                           ;main.c: 566:            name = 0;
 14020  06E8  0020               	movlb	0	; select bank0
 14021  06E9  01E0               	clrf	_name
 14022  06EA  01E1               	clrf	_name+1
 14023  06EB                     l7752:	
 14024                           
 14025                           ;main.c: 568:         Display_Name(names[name]);
 14026  06EB  0020               	movlb	0	; select bank0
 14027  06EC  3560               	lslf	_name,w
 14028  06ED  3E60               	addlw	(low (_names| (0+256)))& (0+255)
 14029  06EE  0086               	movwf	6
 14030  06EF  3001               	movlw	1	; select bank2/3
 14031  06F0  0087               	movwf	7
 14032  06F1  3F40               	moviw [0]fsr1
 14033  06F2  00A5               	movwf	Display_Name@string1
 14034  06F3  3F41               	moviw [1]fsr1
 14035  06F4                     L9:	
 14036  06F4  00A6               	movwf	Display_Name@string1+1
 14037  06F5  318C  2428         	fcall	_Display_Name
 14038  06F7                     l7754:	
 14039                           
 14040                           ;main.c: 570:     adcResult = 0;
 14041  06F7  0020               	movlb	0	; select bank0
 14042  06F8  01EC               	clrf	_adcResult
 14043  06F9  0008               	return
 14044  06FA                     __end_of_Get_ADC:	
 14045                           
 14046                           	psect	text66
 14047  088F                     __ptext66:	
 14048 ;; *************** function _Noise *****************
 14049 ;; Defined at:
 14050 ;;		line 511 in file "main.c"
 14051 ;; Parameters:    Size  Location     Type
 14052 ;;		None
 14053 ;; Auto vars:     Size  Location     Type
 14054 ;;		None
 14055 ;; Return value:  Size  Location     Type
 14056 ;;                  1    wreg      void 
 14057 ;; Registers used:
 14058 ;;		wreg, status,2, status,0, pclath, cstack
 14059 ;; Tracked objects:
 14060 ;;		On entry : 0/0
 14061 ;;		On exit  : 0/0
 14062 ;;		Unchanged: 0/0
 14063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14064 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14065 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14066 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14067 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14068 ;;Total ram usage:        1 bytes
 14069 ;; Hardware stack levels used:    1
 14070 ;; Hardware stack levels required when called:    6
 14071 ;; This function calls:
 14072 ;;		_PWM1_LoadDutyValue
 14073 ;; This function is called by:
 14074 ;;		_handleGesture
 14075 ;;		_Get_ADC
 14076 ;;		_On_Off
 14077 ;; This function uses a non-reentrant model
 14078 ;;
 14079                           
 14080                           
 14081                           ;psect for function _Noise
 14082  088F                     _Noise:	
 14083                           
 14084                           ;main.c: 512:     PWM1_LoadDutyValue(80);
 14085                           
 14086                           ;incstack = 0
 14087                           ; Regs used in _Noise: [wreg+status,2+status,0+pclath+cstack]
 14088  088F  3050               	movlw	80
 14089  0890  0020               	movlb	0	; select bank0
 14090  0891  00A0               	movwf	PWM1_LoadDutyValue@dutyValue
 14091  0892  3000               	movlw	0
 14092  0893  00A1               	movwf	PWM1_LoadDutyValue@dutyValue+1
 14093  0894  3188  2078  3188   	fcall	_PWM1_LoadDutyValue
 14094                           
 14095                           ;main.c: 513:     RC6PPS = 0x0C;
 14096  0897  300C               	movlw	12
 14097  0898  003D               	movlb	29	; select bank29
 14098  0899  00A6               	movwf	38	;volatile
 14099                           
 14100                           ;main.c: 514:     _delay((unsigned long)((100)*(500000/4000.0)));
 14101  089A  3011               	movlw	17
 14102  089B  0020               	movlb	0	; select bank0
 14103  089C  00A2               	movwf	??_Noise
 14104  089D  303A               	movlw	58
 14105  089E                     u7117:	
 14106  089E  0B89               	decfsz	9,f
 14107  089F  289E               	goto	u7117
 14108  08A0  0BA2               	decfsz	??_Noise,f
 14109  08A1  289E               	goto	u7117
 14110  08A2  0000               	nop
 14111                           
 14112                           ;main.c: 515:     RC6PPS = 0x00;
 14113  08A3  003D               	movlb	29	; select bank29
 14114  08A4  01A6               	clrf	38	;volatile
 14115  08A5  0008               	return
 14116  08A6                     __end_of_Noise:	
 14117                           
 14118                           	psect	text67
 14119  0878                     __ptext67:	
 14120 ;; *************** function _PWM1_LoadDutyValue *****************
 14121 ;; Defined at:
 14122 ;;		line 82 in file "mcc_generated_files/pwm1.c"
 14123 ;; Parameters:    Size  Location     Type
 14124 ;;  dutyValue       2    0[BANK0 ] unsigned short 
 14125 ;; Auto vars:     Size  Location     Type
 14126 ;;		None
 14127 ;; Return value:  Size  Location     Type
 14128 ;;                  1    wreg      void 
 14129 ;; Registers used:
 14130 ;;		wreg, status,2
 14131 ;; Tracked objects:
 14132 ;;		On entry : 0/0
 14133 ;;		On exit  : 0/0
 14134 ;;		Unchanged: 0/0
 14135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14136 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14137 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14139 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14140 ;;Total ram usage:        2 bytes
 14141 ;; Hardware stack levels used:    1
 14142 ;; Hardware stack levels required when called:    5
 14143 ;; This function calls:
 14144 ;;		Nothing
 14145 ;; This function is called by:
 14146 ;;		_Noise
 14147 ;; This function uses a non-reentrant model
 14148 ;;
 14149                           
 14150                           
 14151                           ;psect for function _PWM1_LoadDutyValue
 14152  0878                     _PWM1_LoadDutyValue:	
 14153                           
 14154                           ;mcc_generated_files/pwm1.c: 82: void PWM1_LoadDutyValue(uint16_t dutyValue);mcc_generat
      +                          ed_files/pwm1.c: 83: {;mcc_generated_files/pwm1.c: 84:     dutyValue &= 0x03FF;
 14155                           
 14156                           ;incstack = 0
 14157                           ; Regs used in _PWM1_LoadDutyValue: [wreg+status,2]
 14158  0878  30FF               	movlw	255
 14159  0879  0020               	movlb	0	; select bank0
 14160  087A  05A0               	andwf	PWM1_LoadDutyValue@dutyValue,f
 14161  087B  3003               	movlw	3
 14162  087C  05A1               	andwf	PWM1_LoadDutyValue@dutyValue+1,f
 14163                           
 14164                           ;mcc_generated_files/pwm1.c: 87:     if(CCP1CONbits.CCP1FMT)
 14165  087D  0025               	movlb	5	; select bank5
 14166  087E  1E13               	btfss	19,4	;volatile
 14167  087F  2886               	goto	l6548
 14168                           
 14169                           ;mcc_generated_files/pwm1.c: 88:     {;mcc_generated_files/pwm1.c: 89:         dutyValue
      +                           <<= 6;
 14170  0880  3006               	movlw	6
 14171  0881  0020               	movlb	0	; select bank0
 14172  0882                     u5165:	
 14173  0882  35A0               	lslf	PWM1_LoadDutyValue@dutyValue,f
 14174  0883  0DA1               	rlf	PWM1_LoadDutyValue@dutyValue+1,f
 14175  0884  0B89               	decfsz	9,f
 14176  0885  2882               	goto	u5165
 14177  0886                     l6548:	
 14178                           
 14179                           ;mcc_generated_files/pwm1.c: 90:         CCPR1H = dutyValue >> 8;
 14180  0886  0020               	movlb	0	; select bank0
 14181  0887  0821               	movf	PWM1_LoadDutyValue@dutyValue+1,w
 14182  0888  0025               	movlb	5	; select bank5
 14183  0889  0092               	movwf	18	;volatile
 14184                           
 14185                           ;mcc_generated_files/pwm1.c: 91:         CCPR1L = dutyValue;
 14186  088A  0020               	movlb	0	; select bank0
 14187  088B  0820               	movf	PWM1_LoadDutyValue@dutyValue,w
 14188  088C  0025               	movlb	5	; select bank5
 14189  088D  0091               	movwf	17	;volatile
 14190                           
 14191                           ;mcc_generated_files/pwm1.c: 92:     }
 14192  088E  0008               	return
 14193  088F                     __end_of_PWM1_LoadDutyValue:	
 14194                           
 14195                           	psect	text68
 14196  0C28                     __ptext68:	
 14197 ;; *************** function _Display_Name *****************
 14198 ;; Defined at:
 14199 ;;		line 491 in file "main.c"
 14200 ;; Parameters:    Size  Location     Type
 14201 ;;  string1         2    5[BANK0 ] PTR unsigned char 
 14202 ;;		 -> STR_4(11), STR_3(16), STR_2(13), STR_1(12), 
 14203 ;; Auto vars:     Size  Location     Type
 14204 ;;  i               2   10[BANK0 ] int 
 14205 ;;  length          2    8[BANK0 ] int 
 14206 ;; Return value:  Size  Location     Type
 14207 ;;                  1    wreg      void 
 14208 ;; Registers used:
 14209 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 14210 ;; Tracked objects:
 14211 ;;		On entry : 0/0
 14212 ;;		On exit  : 0/0
 14213 ;;		Unchanged: 0/0
 14214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14215 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14216 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14217 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14218 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14219 ;;Total ram usage:        7 bytes
 14220 ;; Hardware stack levels used:    1
 14221 ;; Hardware stack levels required when called:    7
 14222 ;; This function calls:
 14223 ;;		_SPI_Write
 14224 ;;		_strlen
 14225 ;; This function is called by:
 14226 ;;		_main
 14227 ;;		_handleGesture
 14228 ;;		_Get_ADC
 14229 ;; This function uses a non-reentrant model
 14230 ;;
 14231                           
 14232                           
 14233                           ;psect for function _Display_Name
 14234  0C28                     _Display_Name:	
 14235                           
 14236                           ;main.c: 492:     int length;;main.c: 493:     int i;;main.c: 494:     SPI_Write(0xFE);
 14237                           
 14238                           ;incstack = 0
 14239                           ; Regs used in _Display_Name: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 14240  0C28  30FE               	movlw	254
 14241  0C29  3188  204C  318C   	fcall	_SPI_Write
 14242                           
 14243                           ;main.c: 495:     _delay((unsigned long)((100)*(500000/4000.0)));
 14244  0C2C  3011               	movlw	17
 14245  0C2D  0020               	movlb	0	; select bank0
 14246  0C2E  00A7               	movwf	??_Display_Name
 14247  0C2F  303A               	movlw	58
 14248  0C30                     u7127:	
 14249  0C30  0B89               	decfsz	9,f
 14250  0C31  2C30               	goto	u7127
 14251  0C32  0BA7               	decfsz	??_Display_Name,f
 14252  0C33  2C30               	goto	u7127
 14253  0C34  0000               	nop
 14254                           
 14255                           ;main.c: 496:     SPI_Write(0x51);
 14256  0C35  3051               	movlw	81
 14257  0C36  3188  204C  318C   	fcall	_SPI_Write
 14258                           
 14259                           ;main.c: 497:     length = strlen(string1);
 14260  0C39  0020               	movlb	0	; select bank0
 14261  0C3A  0826               	movf	Display_Name@string1+1,w
 14262  0C3B  00A1               	movwf	strlen@s+1
 14263  0C3C  0825               	movf	Display_Name@string1,w
 14264  0C3D  00A0               	movwf	strlen@s
 14265  0C3E  3188  20BD  318C   	fcall	_strlen
 14266  0C41  0020               	movlb	0	; select bank0
 14267  0C42  0821               	movf	?_strlen+1,w
 14268  0C43  00A9               	movwf	Display_Name@length+1
 14269  0C44  0820               	movf	?_strlen,w
 14270  0C45  00A8               	movwf	Display_Name@length
 14271                           
 14272                           ;main.c: 498:     for(i = 0; i < length; i++){
 14273  0C46  01AA               	clrf	Display_Name@i
 14274  0C47  01AB               	clrf	Display_Name@i+1
 14275  0C48                     l7096:	
 14276  0C48  082B               	movf	Display_Name@i+1,w
 14277  0C49  3A80               	xorlw	128
 14278  0C4A  00A7               	movwf	??_Display_Name
 14279  0C4B  0829               	movf	Display_Name@length+1,w
 14280  0C4C  3A80               	xorlw	128
 14281  0C4D  0227               	subwf	??_Display_Name,w
 14282  0C4E  1D03               	skipz
 14283  0C4F  2C52               	goto	u6045
 14284  0C50  0828               	movf	Display_Name@length,w
 14285  0C51  022A               	subwf	Display_Name@i,w
 14286  0C52                     u6045:	
 14287  0C52  1803               	btfsc	3,0
 14288  0C53  2C65               	goto	l831
 14289                           
 14290                           ;main.c: 499:         SPI_Write(string1[i]);
 14291  0C54  0020               	movlb	0	; select bank0
 14292  0C55  0825               	movf	Display_Name@string1,w
 14293  0C56  072A               	addwf	Display_Name@i,w
 14294  0C57  0084               	movwf	4
 14295  0C58  0826               	movf	Display_Name@string1+1,w
 14296  0C59  3D2B               	addwfc	Display_Name@i+1,w
 14297  0C5A  0085               	movwf	5
 14298  0C5B  0800               	movf	0,w	;code access
 14299  0C5C  3188  204C  318C   	fcall	_SPI_Write
 14300                           
 14301                           ;main.c: 500:     }
 14302  0C5F  3001               	movlw	1
 14303  0C60  0020               	movlb	0	; select bank0
 14304  0C61  07AA               	addwf	Display_Name@i,f
 14305  0C62  3000               	movlw	0
 14306  0C63  3DAB               	addwfc	Display_Name@i+1,f
 14307  0C64  2C48               	goto	l7096
 14308  0C65                     l831:	
 14309                           
 14310                           ;main.c: 501:     printed = 1;
 14311  0C65  0020               	movlb	0	; select bank0
 14312  0C66  01ED               	clrf	_printed
 14313  0C67  0AED               	incf	_printed,f
 14314  0C68  0008               	return
 14315  0C69                     __end_of_Display_Name:	
 14316                           
 14317                           	psect	text69
 14318  08BD                     __ptext69:	
 14319 ;; *************** function _strlen *****************
 14320 ;; Defined at:
 14321 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
 14322 ;; Parameters:    Size  Location     Type
 14323 ;;  s               2    0[BANK0 ] PTR const unsigned char 
 14324 ;;		 -> UART_Byte@bits(5), STR_4(11), STR_3(16), STR_2(13), 
 14325 ;;		 -> STR_1(12), 
 14326 ;; Auto vars:     Size  Location     Type
 14327 ;;  a               2    3[BANK0 ] PTR const unsigned char 
 14328 ;;		 -> UART_Byte@bits(5), STR_4(11), STR_3(16), STR_2(13), 
 14329 ;;		 -> STR_1(12), 
 14330 ;; Return value:  Size  Location     Type
 14331 ;;                  2    0[BANK0 ] unsigned int 
 14332 ;; Registers used:
 14333 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 14334 ;; Tracked objects:
 14335 ;;		On entry : 0/0
 14336 ;;		On exit  : 0/0
 14337 ;;		Unchanged: 0/0
 14338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14339 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14340 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14341 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14342 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14343 ;;Total ram usage:        5 bytes
 14344 ;; Hardware stack levels used:    1
 14345 ;; Hardware stack levels required when called:    5
 14346 ;; This function calls:
 14347 ;;		Nothing
 14348 ;; This function is called by:
 14349 ;;		_Display_Name
 14350 ;;		_UART_Byte
 14351 ;; This function uses a non-reentrant model
 14352 ;;
 14353                           
 14354                           
 14355                           ;psect for function _strlen
 14356  08BD                     _strlen:	
 14357                           
 14358                           ;incstack = 0
 14359                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0]
 14360  08BD  0020               	movlb	0	; select bank0
 14361  08BE  0821               	movf	strlen@s+1,w
 14362  08BF  00A4               	movwf	strlen@a+1
 14363  08C0  0820               	movf	strlen@s,w
 14364  08C1  00A3               	movwf	strlen@a
 14365  08C2                     l6582:	
 14366  08C2  0820               	movf	strlen@s,w
 14367  08C3  0084               	movwf	4
 14368  08C4  0821               	movf	strlen@s+1,w
 14369  08C5  0085               	movwf	5
 14370  08C6  0012               	moviw fsr0++
 14371  08C7  1903               	btfsc	3,2
 14372  08C8  28CE               	goto	l6584
 14373  08C9  3001               	movlw	1
 14374  08CA  07A0               	addwf	strlen@s,f
 14375  08CB  3000               	movlw	0
 14376  08CC  3DA1               	addwfc	strlen@s+1,f
 14377  08CD  28C2               	goto	l6582
 14378  08CE                     l6584:	
 14379  08CE  0823               	movf	strlen@a,w
 14380  08CF  0220               	subwf	strlen@s,w
 14381  08D0  00A0               	movwf	?_strlen
 14382  08D1  0824               	movf	strlen@a+1,w
 14383  08D2  3B21               	subwfb	strlen@s+1,w
 14384  08D3  00A1               	movwf	?_strlen+1
 14385  08D4  0008               	return
 14386  08D5                     __end_of_strlen:	
 14387                           
 14388                           	psect	text70
 14389  0961                     __ptext70:	
 14390 ;; *************** function _ADC_GetConversion *****************
 14391 ;; Defined at:
 14392 ;;		line 113 in file "mcc_generated_files/adc.c"
 14393 ;; Parameters:    Size  Location     Type
 14394 ;;  channel         1    wreg     enum E6648
 14395 ;; Auto vars:     Size  Location     Type
 14396 ;;  channel         1    3[BANK0 ] enum E6648
 14397 ;; Return value:  Size  Location     Type
 14398 ;;                  2    0[BANK0 ] unsigned short 
 14399 ;; Registers used:
 14400 ;;		wreg, status,2, status,0
 14401 ;; Tracked objects:
 14402 ;;		On entry : 0/0
 14403 ;;		On exit  : 0/0
 14404 ;;		Unchanged: 0/0
 14405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14406 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14407 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14408 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14409 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14410 ;;Total ram usage:        4 bytes
 14411 ;; Hardware stack levels used:    1
 14412 ;; Hardware stack levels required when called:    5
 14413 ;; This function calls:
 14414 ;;		Nothing
 14415 ;; This function is called by:
 14416 ;;		_Get_ADC
 14417 ;;		_On_Off
 14418 ;; This function uses a non-reentrant model
 14419 ;;
 14420                           
 14421                           
 14422                           ;psect for function _ADC_GetConversion
 14423  0961                     _ADC_GetConversion:	
 14424                           
 14425                           ;incstack = 0
 14426                           ; Regs used in _ADC_GetConversion: [wreg+status,2+status,0]
 14427                           ;ADC_GetConversion@channel stored from wreg
 14428  0961  0020               	movlb	0	; select bank0
 14429  0962  00A3               	movwf	ADC_GetConversion@channel
 14430                           
 14431                           ;mcc_generated_files/adc.c: 113: adc_result_t ADC_GetConversion(adc_channel_t channel);m
      +                          cc_generated_files/adc.c: 114: {;mcc_generated_files/adc.c: 116:     ADCON0bits.CHS = ch
      +                          annel;
 14432  0963  0823               	movf	ADC_GetConversion@channel,w
 14433  0964  00A2               	movwf	??_ADC_GetConversion
 14434  0965  0DA2               	rlf	??_ADC_GetConversion,f
 14435  0966  0DA2               	rlf	??_ADC_GetConversion,f
 14436  0967  0021               	movlb	1	; select bank1
 14437  0968  081D               	movf	29,w	;volatile
 14438  0969  0020               	movlb	0	; select bank0
 14439  096A  0622               	xorwf	??_ADC_GetConversion,w
 14440  096B  3903               	andlw	-253
 14441  096C  0622               	xorwf	??_ADC_GetConversion,w
 14442  096D  0021               	movlb	1	; select bank1
 14443  096E  009D               	movwf	29	;volatile
 14444                           
 14445                           ;mcc_generated_files/adc.c: 119:     ADCON0bits.ADON = 1;
 14446  096F  141D               	bsf	29,0	;volatile
 14447                           
 14448                           ;mcc_generated_files/adc.c: 125:     ADCON0bits.ADGO = 1;
 14449                           
 14450                           ;mcc_generated_files/adc.c: 122:     _delay((unsigned long)((5)*(500000/4000000.0)));
 14451  0970  0021               	movlb	1	; select bank1
 14452  0971  149D               	bsf	29,1	;volatile
 14453  0972                     l668:	
 14454                           ;mcc_generated_files/adc.c: 131:     }
 14455                           
 14456                           ;mcc_generated_files/adc.c: 128:     while (ADCON0bits.ADGO)
 14457                           
 14458                           
 14459                           ;mcc_generated_files/adc.c: 128:     while (ADCON0bits.ADGO)
 14460  0972  0021               	movlb	1	; select bank1
 14461  0973  1C9D               	btfss	29,1	;volatile
 14462  0974  2977               	goto	l7078
 14463  0975  0064               	clrwdt	;# 
 14464  0976  2972               	goto	l668
 14465  0977                     l7078:	
 14466                           
 14467                           ;mcc_generated_files/adc.c: 134:     return ((adc_result_t)((ADRESH << 8) + ADRESL));
 14468  0977  081C               	movf	28,w	;volatile
 14469  0978  0020               	movlb	0	; select bank0
 14470  0979  00A1               	movwf	?_ADC_GetConversion+1
 14471  097A  0021               	movlb	1	; select bank1
 14472  097B  081B               	movf	27,w	;volatile
 14473  097C  0020               	movlb	0	; select bank0
 14474  097D  00A0               	movwf	?_ADC_GetConversion
 14475  097E  0008               	return
 14476  097F                     __end_of_ADC_GetConversion:	
 14477                           
 14478                           	psect	text71
 14479  17EF                     __ptext71:	
 14480 ;; *************** function _Display_Clear *****************
 14481 ;; Defined at:
 14482 ;;		line 504 in file "main.c"
 14483 ;; Parameters:    Size  Location     Type
 14484 ;;		None
 14485 ;; Auto vars:     Size  Location     Type
 14486 ;;		None
 14487 ;; Return value:  Size  Location     Type
 14488 ;;                  1    wreg      void 
 14489 ;; Registers used:
 14490 ;;		wreg, status,2, status,0, pclath, cstack
 14491 ;; Tracked objects:
 14492 ;;		On entry : 0/0
 14493 ;;		On exit  : 0/0
 14494 ;;		Unchanged: 0/0
 14495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14497 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14498 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14499 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14500 ;;Total ram usage:        1 bytes
 14501 ;; Hardware stack levels used:    1
 14502 ;; Hardware stack levels required when called:    7
 14503 ;; This function calls:
 14504 ;;		_SPI_Write
 14505 ;; This function is called by:
 14506 ;;		_main
 14507 ;;		_On_Off
 14508 ;; This function uses a non-reentrant model
 14509 ;;
 14510                           
 14511                           
 14512                           ;psect for function _Display_Clear
 14513  17EF                     _Display_Clear:	
 14514                           
 14515                           ;main.c: 505:     SPI_Write(0xFE);
 14516                           
 14517                           ;incstack = 0
 14518                           ; Regs used in _Display_Clear: [wreg+status,2+status,0+pclath+cstack]
 14519  17EF  30FE               	movlw	254
 14520  17F0  3188  204C  3197   	fcall	_SPI_Write
 14521                           
 14522                           ;main.c: 506:     _delay((unsigned long)((100)*(500000/4000.0)));
 14523  17F3  3011               	movlw	17
 14524  17F4  0020               	movlb	0	; select bank0
 14525  17F5  00A3               	movwf	??_Display_Clear
 14526  17F6  303A               	movlw	58
 14527  17F7                     u7137:	
 14528  17F7  0B89               	decfsz	9,f
 14529  17F8  2FF7               	goto	u7137
 14530  17F9  0BA3               	decfsz	??_Display_Clear,f
 14531  17FA  2FF7               	goto	u7137
 14532  17FB  0000               	nop
 14533                           
 14534                           ;main.c: 507:     SPI_Write(0x51);
 14535  17FC  3051               	movlw	81
 14536  17FD  3188  204C         	fcall	_SPI_Write
 14537  17FF  0008               	return
 14538  1800                     __end_of_Display_Clear:	
 14539                           
 14540                           	psect	text72
 14541  084C                     __ptext72:	
 14542 ;; *************** function _SPI_Write *****************
 14543 ;; Defined at:
 14544 ;;		line 484 in file "main.c"
 14545 ;; Parameters:    Size  Location     Type
 14546 ;;  incoming        1    wreg     unsigned char 
 14547 ;; Auto vars:     Size  Location     Type
 14548 ;;  incoming        1    2[BANK0 ] unsigned char 
 14549 ;; Return value:  Size  Location     Type
 14550 ;;                  1    wreg      void 
 14551 ;; Registers used:
 14552 ;;		wreg, status,2, status,0, pclath, cstack
 14553 ;; Tracked objects:
 14554 ;;		On entry : 0/0
 14555 ;;		On exit  : 0/0
 14556 ;;		Unchanged: 0/0
 14557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14558 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14559 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14560 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14561 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14562 ;;Total ram usage:        2 bytes
 14563 ;; Hardware stack levels used:    1
 14564 ;; Hardware stack levels required when called:    6
 14565 ;; This function calls:
 14566 ;;		_SPI2_Exchange8bit
 14567 ;; This function is called by:
 14568 ;;		_Display_Name
 14569 ;;		_Display_Clear
 14570 ;; This function uses a non-reentrant model
 14571 ;;
 14572                           
 14573                           
 14574                           ;psect for function _SPI_Write
 14575  084C                     _SPI_Write:	
 14576                           
 14577                           ;incstack = 0
 14578                           ; Regs used in _SPI_Write: [wreg+status,2+status,0+pclath+cstack]
 14579                           ;SPI_Write@incoming stored from wreg
 14580  084C  0020               	movlb	0	; select bank0
 14581  084D  00A2               	movwf	SPI_Write@incoming
 14582                           
 14583                           ;main.c: 485:     do { LATCbits.LATC0 = 0; } while(0);
 14584  084E  0022               	movlb	2	; select bank2
 14585  084F  100E               	bcf	14,0	;volatile
 14586                           
 14587                           ;main.c: 486:     SPI2_Exchange8bit(incoming);
 14588  0850  0020               	movlb	0	; select bank0
 14589  0851  0822               	movf	SPI_Write@incoming,w
 14590  0852  3197  27D1  3188   	fcall	_SPI2_Exchange8bit
 14591  0855  0022               	movlb	2	; select bank2
 14592  0856  140E               	bsf	14,0	;volatile
 14593                           
 14594                           ;main.c: 488:     _delay((unsigned long)((100)*(500000/4000.0)));
 14595  0857  3011               	movlw	17
 14596  0858  0020               	movlb	0	; select bank0
 14597  0859  00A1               	movwf	??_SPI_Write
 14598  085A  303A               	movlw	58
 14599  085B                     u7147:	
 14600  085B  0B89               	decfsz	9,f
 14601  085C  285B               	goto	u7147
 14602  085D  0BA1               	decfsz	??_SPI_Write,f
 14603  085E  285B               	goto	u7147
 14604  085F  0000               	nop
 14605  0860  0008               	return
 14606  0861                     __end_of_SPI_Write:	
 14607                           
 14608                           	psect	text73
 14609  17D1                     __ptext73:	
 14610 ;; *************** function _SPI2_Exchange8bit *****************
 14611 ;; Defined at:
 14612 ;;		line 79 in file "mcc_generated_files/spi2.c"
 14613 ;; Parameters:    Size  Location     Type
 14614 ;;  data            1    wreg     unsigned char 
 14615 ;; Auto vars:     Size  Location     Type
 14616 ;;  data            1    0[BANK0 ] unsigned char 
 14617 ;; Return value:  Size  Location     Type
 14618 ;;                  1    wreg      unsigned char 
 14619 ;; Registers used:
 14620 ;;		wreg
 14621 ;; Tracked objects:
 14622 ;;		On entry : 0/0
 14623 ;;		On exit  : 0/0
 14624 ;;		Unchanged: 0/0
 14625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14627 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14628 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14629 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14630 ;;Total ram usage:        1 bytes
 14631 ;; Hardware stack levels used:    1
 14632 ;; Hardware stack levels required when called:    5
 14633 ;; This function calls:
 14634 ;;		Nothing
 14635 ;; This function is called by:
 14636 ;;		_SPI_Write
 14637 ;;		_SPI2_Exchange8bitBuffer
 14638 ;; This function uses a non-reentrant model
 14639 ;;
 14640                           
 14641                           
 14642                           ;psect for function _SPI2_Exchange8bit
 14643  17D1                     _SPI2_Exchange8bit:	
 14644                           
 14645                           ;incstack = 0
 14646                           ; Regs used in _SPI2_Exchange8bit: [wreg]
 14647                           ;SPI2_Exchange8bit@data stored from wreg
 14648  17D1  0020               	movlb	0	; select bank0
 14649  17D2  00A0               	movwf	SPI2_Exchange8bit@data
 14650                           
 14651                           ;mcc_generated_files/spi2.c: 79: uint8_t SPI2_Exchange8bit(uint8_t data);mcc_generated_f
      +                          iles/spi2.c: 80: {;mcc_generated_files/spi2.c: 82:     SSP2CON1bits.WCOL = 0;
 14652  17D3  0024               	movlb	4	; select bank4
 14653  17D4  139D               	bcf	29,7	;volatile
 14654                           
 14655                           ;mcc_generated_files/spi2.c: 84:     SSP2BUF = data;
 14656  17D5  0020               	movlb	0	; select bank0
 14657  17D6  0820               	movf	SPI2_Exchange8bit@data,w
 14658  17D7  0024               	movlb	4	; select bank4
 14659  17D8  0099               	movwf	25	;volatile
 14660  17D9                     l577:	
 14661                           ;mcc_generated_files/spi2.c: 89:     }
 14662                           
 14663                           ;mcc_generated_files/spi2.c: 86:     while(SSP2STATbits.BF == 0x0)
 14664                           
 14665                           
 14666                           ;mcc_generated_files/spi2.c: 86:     while(SSP2STATbits.BF == 0x0)
 14667  17D9  0024               	movlb	4	; select bank4
 14668  17DA  181C               	btfsc	28,0	;volatile
 14669  17DB  2FDE               	goto	l6458
 14670  17DC  0064               	clrwdt	;# 
 14671  17DD  2FD9               	goto	l577
 14672  17DE                     l6458:	
 14673                           
 14674                           ;mcc_generated_files/spi2.c: 91:     return (SSP2BUF);
 14675  17DE  0819               	movf	25,w	;volatile
 14676  17DF  0008               	return
 14677  17E0                     __end_of_SPI2_Exchange8bit:	
 14678                           
 14679                           	psect	intentry
 14680  0004                     __pintentry:	
 14681 ;; *************** function _INTERRUPT_InterruptManager *****************
 14682 ;; Defined at:
 14683 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 14684 ;; Parameters:    Size  Location     Type
 14685 ;;		None
 14686 ;; Auto vars:     Size  Location     Type
 14687 ;;		None
 14688 ;; Return value:  Size  Location     Type
 14689 ;;                  1    wreg      void 
 14690 ;; Registers used:
 14691 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14692 ;; Tracked objects:
 14693 ;;		On entry : 0/0
 14694 ;;		On exit  : 0/0
 14695 ;;		Unchanged: 0/0
 14696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14698 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14699 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14700 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14701 ;;Total ram usage:        0 bytes
 14702 ;; Hardware stack levels used:    1
 14703 ;; Hardware stack levels required when called:    4
 14704 ;; This function calls:
 14705 ;;		Absolute function
 14706 ;;		_EUSART_Receive_ISR
 14707 ;;		_EUSART_Transmit_ISR
 14708 ;;		_PIN_MANAGER_IOC
 14709 ;;		_i2c_ISR
 14710 ;;		_i2c_busCollisionISR
 14711 ;; This function is called by:
 14712 ;;		Interrupt level 1
 14713 ;; This function uses a non-reentrant model
 14714 ;;
 14715                           
 14716  0004                     _INTERRUPT_InterruptManager:	
 14717                           
 14718                           ;incstack = 0
 14719  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 14720                           
 14721                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14722  0005  3180               	pagesel	$
 14723                           
 14724                           ;mcc_generated_files/interrupt_manager.c: 55:     if(PIE0bits.IOCIE == 1 && PIR0bits.IOC
      +                          IF == 1)
 14725  0006  0021               	movlb	1	; select bank1
 14726  0007  1E10               	btfss	16,4	;volatile
 14727  0008  2810               	goto	i1l249
 14728  0009  0020               	movlb	0	; select bank0
 14729  000A  1E10               	btfss	16,4	;volatile
 14730  000B  2810               	goto	i1l249
 14731                           
 14732                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         PIN_MANAGER_IOC();
 14733  000C  3196  26E4  3180   	fcall	_PIN_MANAGER_IOC
 14734                           
 14735                           ;mcc_generated_files/interrupt_manager.c: 58:     }
 14736  000F  2845               	goto	i1l261
 14737  0010                     i1l249:	
 14738                           ;mcc_generated_files/interrupt_manager.c: 59:     else if(INTCONbits.PEIE == 1)
 14739                           
 14740  0010  1F0B               	btfss	11,6	;volatile
 14741  0011  2845               	goto	i1l261
 14742                           
 14743                           ;mcc_generated_files/interrupt_manager.c: 60:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 61:         if(PIE1bits.TXIE == 1 && PIR1bits.TXIF == 1)
 14744  0012  0021               	movlb	1	; select bank1
 14745  0013  1E11               	btfss	17,4	;volatile
 14746  0014  281F               	goto	i1l252
 14747  0015  0020               	movlb	0	; select bank0
 14748  0016  1E11               	btfss	17,4	;volatile
 14749  0017  281F               	goto	i1l252
 14750                           
 14751                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             EUSART_TxDefaultInterruptHandler();
 14752  0018  0021               	movlb	1	; select bank1
 14753  0019  086F               	movf	(_EUSART_TxDefaultInterruptHandler+1)^(0+128),w
 14754  001A  008A               	movwf	10
 14755  001B  086E               	movf	_EUSART_TxDefaultInterruptHandler^(0+128),w
 14756  001C  000A               	callw
 14757  001D  3180               	pagesel	$
 14758                           
 14759                           ;mcc_generated_files/interrupt_manager.c: 64:         }
 14760  001E  2845               	goto	i1l261
 14761  001F                     i1l252:	
 14762                           ;mcc_generated_files/interrupt_manager.c: 65:         else if(PIE1bits.RCIE == 1 && PIR1
      +                          bits.RCIF == 1)
 14763                           
 14764  001F  0021               	movlb	1	; select bank1
 14765  0020  1E91               	btfss	17,5	;volatile
 14766  0021  282C               	goto	i1l254
 14767  0022  0020               	movlb	0	; select bank0
 14768  0023  1E91               	btfss	17,5	;volatile
 14769  0024  282C               	goto	i1l254
 14770                           
 14771                           ;mcc_generated_files/interrupt_manager.c: 66:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 67:             EUSART_RxDefaultInterruptHandler();
 14772  0025  0022               	movlb	2	; select bank2
 14773  0026  086D               	movf	(_EUSART_RxDefaultInterruptHandler+1)^(0+256),w
 14774  0027  008A               	movwf	10
 14775  0028  086C               	movf	_EUSART_RxDefaultInterruptHandler^(0+256),w
 14776  0029  000A               	callw
 14777  002A  3180               	pagesel	$
 14778                           
 14779                           ;mcc_generated_files/interrupt_manager.c: 68:         }
 14780  002B  2845               	goto	i1l261
 14781  002C                     i1l254:	
 14782                           ;mcc_generated_files/interrupt_manager.c: 69:         else if(PIE1bits.BCL1IE == 1 && PI
      +                          R1bits.BCL1IF == 1)
 14783                           
 14784  002C  0021               	movlb	1	; select bank1
 14785  002D  1D11               	btfss	17,2	;volatile
 14786  002E  2839               	goto	i1l256
 14787  002F  0020               	movlb	0	; select bank0
 14788  0030  1D11               	btfss	17,2	;volatile
 14789  0031  2839               	goto	i1l256
 14790                           
 14791                           ;mcc_generated_files/interrupt_manager.c: 70:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 71:             i2c1_driver_busCollisionISR();
 14792  0032  0021               	movlb	1	; select bank1
 14793  0033  086B               	movf	(_i2c1_driver_busCollisionISR+1)^(0+128),w
 14794  0034  008A               	movwf	10
 14795  0035  086A               	movf	_i2c1_driver_busCollisionISR^(0+128),w
 14796  0036  000A               	callw
 14797  0037  3180               	pagesel	$
 14798                           
 14799                           ;mcc_generated_files/interrupt_manager.c: 72:         }
 14800  0038  2845               	goto	i1l261
 14801  0039                     i1l256:	
 14802                           ;mcc_generated_files/interrupt_manager.c: 73:         else if(PIE1bits.SSP1IE == 1 && PI
      +                          R1bits.SSP1IF == 1)
 14803                           
 14804  0039  0021               	movlb	1	; select bank1
 14805  003A  1D91               	btfss	17,3	;volatile
 14806  003B  2845               	goto	i1l261
 14807  003C  0020               	movlb	0	; select bank0
 14808  003D  1D91               	btfss	17,3	;volatile
 14809  003E  2845               	goto	i1l261
 14810                           
 14811                           ;mcc_generated_files/interrupt_manager.c: 74:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 75:             i2c1_driver_i2cISR();
 14812  003F  0021               	movlb	1	; select bank1
 14813  0040  0869               	movf	(_i2c1_driver_i2cISR+1)^(0+128),w
 14814  0041  008A               	movwf	10
 14815  0042  0868               	movf	_i2c1_driver_i2cISR^(0+128),w
 14816  0043  000A               	callw
 14817  0044  3180               	pagesel	$
 14818  0045                     i1l261:	
 14819                           ;mcc_generated_files/interrupt_manager.c: 76:         }
 14820                           
 14821  0045  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 14822  0046  0009               	retfie
 14823  0047                     __end_of_INTERRUPT_InterruptManager:	
 14824                           
 14825                           	psect	text75
 14826  168C                     __ptext75:	
 14827 ;; *************** function _i2c_busCollisionISR *****************
 14828 ;; Defined at:
 14829 ;;		line 435 in file "mcc_generated_files/drivers/i2c_master.c"
 14830 ;; Parameters:    Size  Location     Type
 14831 ;;		None
 14832 ;; Auto vars:     Size  Location     Type
 14833 ;;		None
 14834 ;; Return value:  Size  Location     Type
 14835 ;;                  1    wreg      void 
 14836 ;; Registers used:
 14837 ;;		status,2, status,0, pclath, cstack
 14838 ;; Tracked objects:
 14839 ;;		On entry : 0/0
 14840 ;;		On exit  : 0/0
 14841 ;;		Unchanged: 0/0
 14842 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14843 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14844 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14845 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14846 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14847 ;;Total ram usage:        0 bytes
 14848 ;; Hardware stack levels used:    1
 14849 ;; Hardware stack levels required when called:    1
 14850 ;; This function calls:
 14851 ;;		_i2c1_driver_clearBusCollision
 14852 ;; This function is called by:
 14853 ;;		_i2c_open
 14854 ;;		_INTERRUPT_InterruptManager
 14855 ;; This function uses a non-reentrant model
 14856 ;;
 14857                           
 14858                           
 14859                           ;psect for function _i2c_busCollisionISR
 14860  168C                     _i2c_busCollisionISR:	
 14861                           
 14862                           ;mcc_generated_files/drivers/i2c_master.c: 437:     i2c1_driver_clearBusCollision();
 14863                           
 14864                           ;incstack = 0
 14865                           ; Regs used in _i2c_busCollisionISR: [status,2+status,0+pclath+cstack]
 14866  168C  3196  2689         	fcall	_i2c1_driver_clearBusCollision
 14867  168E  0008               	return
 14868  168F                     __end_of_i2c_busCollisionISR:	
 14869                           
 14870                           	psect	text76
 14871  1689                     __ptext76:	
 14872 ;; *************** function _i2c1_driver_clearBusCollision *****************
 14873 ;; Defined at:
 14874 ;;		line 253 in file "mcc_generated_files/i2c1_driver.c"
 14875 ;; Parameters:    Size  Location     Type
 14876 ;;		None
 14877 ;; Auto vars:     Size  Location     Type
 14878 ;;		None
 14879 ;; Return value:  Size  Location     Type
 14880 ;;                  1    wreg      void 
 14881 ;; Registers used:
 14882 ;;		None
 14883 ;; Tracked objects:
 14884 ;;		On entry : 0/0
 14885 ;;		On exit  : 0/0
 14886 ;;		Unchanged: 0/0
 14887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14888 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14889 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14890 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14891 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14892 ;;Total ram usage:        0 bytes
 14893 ;; Hardware stack levels used:    1
 14894 ;; This function calls:
 14895 ;;		Nothing
 14896 ;; This function is called by:
 14897 ;;		_i2c_busCollisionISR
 14898 ;; This function uses a non-reentrant model
 14899 ;;
 14900                           
 14901                           
 14902                           ;psect for function _i2c1_driver_clearBusCollision
 14903  1689                     _i2c1_driver_clearBusCollision:	
 14904                           
 14905                           ;mcc_generated_files/i2c1_driver.c: 255:     PIR1bits.BCL1IF = 0;
 14906                           
 14907                           ;incstack = 0
 14908                           ; Regs used in _i2c1_driver_clearBusCollision: []
 14909  1689  0020               	movlb	0	; select bank0
 14910  168A  1111               	bcf	17,2	;volatile
 14911  168B  0008               	return
 14912  168C                     __end_of_i2c1_driver_clearBusCollision:	
 14913                           
 14914                           	psect	text77
 14915  09C1                     __ptext77:	
 14916 ;; *************** function _i2c_ISR *****************
 14917 ;; Defined at:
 14918 ;;		line 419 in file "mcc_generated_files/drivers/i2c_master.c"
 14919 ;; Parameters:    Size  Location     Type
 14920 ;;		None
 14921 ;; Auto vars:     Size  Location     Type
 14922 ;;		None
 14923 ;; Return value:  Size  Location     Type
 14924 ;;                  1    wreg      void 
 14925 ;; Registers used:
 14926 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14927 ;; Tracked objects:
 14928 ;;		On entry : 0/0
 14929 ;;		On exit  : 0/0
 14930 ;;		Unchanged: 0/0
 14931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14932 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14933 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14934 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14935 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14936 ;;Total ram usage:        3 bytes
 14937 ;; Hardware stack levels used:    1
 14938 ;; Hardware stack levels required when called:    3
 14939 ;; This function calls:
 14940 ;;		_do_I2C_DO_ACK
 14941 ;;		_do_I2C_DO_ADDRESS_NACK
 14942 ;;		_do_I2C_DO_NACK_RESTART
 14943 ;;		_do_I2C_DO_NACK_STOP
 14944 ;;		_do_I2C_IDLE
 14945 ;;		_do_I2C_RCEN
 14946 ;;		_do_I2C_RESET
 14947 ;;		_do_I2C_RX
 14948 ;;		_do_I2C_SEND_ADR_READ
 14949 ;;		_do_I2C_SEND_ADR_WRITE
 14950 ;;		_do_I2C_SEND_RESTART
 14951 ;;		_do_I2C_SEND_RESTART_READ
 14952 ;;		_do_I2C_SEND_RESTART_WRITE
 14953 ;;		_do_I2C_SEND_STOP
 14954 ;;		_do_I2C_TX
 14955 ;;		_do_I2C_TX_EMPTY
 14956 ;;		_i2c1_driver_isNACK
 14957 ;;		_mssp1_clearIRQ
 14958 ;; This function is called by:
 14959 ;;		_i2c_open
 14960 ;;		_i2c_poller
 14961 ;;		_INTERRUPT_InterruptManager
 14962 ;; This function uses a non-reentrant model
 14963 ;;
 14964                           
 14965                           
 14966                           ;psect for function _i2c_ISR
 14967  09C1                     _i2c_ISR:	
 14968                           
 14969                           ;mcc_generated_files/drivers/i2c_master.c: 421:     mssp1_clearIRQ();
 14970                           
 14971                           ;incstack = 0
 14972                           ; Regs used in _i2c_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14973  09C1  3196  2686  3189   	fcall	_mssp1_clearIRQ
 14974                           
 14975                           ;mcc_generated_files/drivers/i2c_master.c: 427:     if(i2c_status.addressNACKCheck && i2
      +                          c1_driver_isNACK())
 14976  09C4  0023               	movlb	3	; select bank3
 14977  09C5  1DA0               	btfss	_i2c_status^(0+384),3
 14978  09C6  29D1               	goto	i1l5566
 14979  09C7  3197  271E  3189   	fcall	_i2c1_driver_isNACK
 14980  09CA  1C03               	btfss	3,0
 14981  09CB  29D1               	goto	i1l5566
 14982                           
 14983                           ;mcc_generated_files/drivers/i2c_master.c: 428:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 429:         i2c_status.state = I2C_ADDRESS_NACK;
 14984  09CC  300F               	movlw	15
 14985  09CD  00F9               	movwf	??_i2c_ISR
 14986  09CE  0879               	movf	??_i2c_ISR,w
 14987  09CF  0023               	movlb	3	; select bank3
 14988  09D0  00A9               	movwf	(_i2c_status^(0+384)+9)
 14989  09D1                     i1l5566:	
 14990                           
 14991                           ;mcc_generated_files/drivers/i2c_master.c: 432:     i2c_status.state = fsmStateTable[i2c
      +                          _status.state]();
 14992  09D1  0023               	movlb	3	; select bank3
 14993  09D2  0829               	movf	(_i2c_status^(0+384)+9),w
 14994  09D3  00F9               	movwf	??_i2c_ISR
 14995  09D4  01FA               	clrf	??_i2c_ISR+1
 14996  09D5  35F9               	lslf	??_i2c_ISR,f
 14997  09D6  0DFA               	rlf	??_i2c_ISR+1,f
 14998  09D7  3000               	movlw	low (_fsmStateTable| (0+32768))
 14999  09D8  0779               	addwf	??_i2c_ISR,w
 15000  09D9  0084               	movwf	4
 15001  09DA  3090               	movlw	high (_fsmStateTable| (0+32768))
 15002  09DB  3D7A               	addwfc	??_i2c_ISR+1,w
 15003  09DC  0085               	movwf	5
 15004  09DD  3F01               	moviw [1]fsr0
 15005  09DE  008A               	movwf	10
 15006  09DF  3F00               	moviw [0]fsr0
 15007  09E0  000A               	callw
 15008  09E1  3189               	pagesel	$
 15009  09E2  00FB               	movwf	??_i2c_ISR+2
 15010  09E3  087B               	movf	??_i2c_ISR+2,w
 15011  09E4  0023               	movlb	3	; select bank3
 15012  09E5  00A9               	movwf	(_i2c_status^(0+384)+9)
 15013  09E6  0008               	return
 15014  09E7                     __end_of_i2c_ISR:	
 15015                           
 15016                           	psect	text78
 15017  1686                     __ptext78:	
 15018 ;; *************** function _mssp1_clearIRQ *****************
 15019 ;; Defined at:
 15020 ;;		line 53 in file "mcc_generated_files/i2c1_driver.c"
 15021 ;; Parameters:    Size  Location     Type
 15022 ;;		None
 15023 ;; Auto vars:     Size  Location     Type
 15024 ;;		None
 15025 ;; Return value:  Size  Location     Type
 15026 ;;                  1    wreg      void 
 15027 ;; Registers used:
 15028 ;;		None
 15029 ;; Tracked objects:
 15030 ;;		On entry : 0/0
 15031 ;;		On exit  : 0/0
 15032 ;;		Unchanged: 0/0
 15033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15034 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15035 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15036 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15037 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15038 ;;Total ram usage:        0 bytes
 15039 ;; Hardware stack levels used:    1
 15040 ;; This function calls:
 15041 ;;		Nothing
 15042 ;; This function is called by:
 15043 ;;		_i2c_ISR
 15044 ;;		_i2c_open
 15045 ;;		_i2c_close
 15046 ;; This function uses a non-reentrant model
 15047 ;;
 15048                           
 15049                           
 15050                           ;psect for function _mssp1_clearIRQ
 15051  1686                     _mssp1_clearIRQ:	
 15052                           
 15053                           ;mcc_generated_files/i2c1_driver.c: 55:         SSP1STAT = 0x00;
 15054                           
 15055                           ;incstack = 0
 15056                           ; Regs used in _mssp1_clearIRQ: []
 15057  1686  0020               	movlb	0	; select bank0
 15058  1687  1191               	bcf	17,3	;volatile
 15059  1688  0008               	return
 15060  1689                     __end_of_mssp1_clearIRQ:	
 15061                           
 15062                           	psect	text79
 15063  0CF0                     __ptext79:	
 15064 ;; *************** function _do_I2C_RX *****************
 15065 ;; Defined at:
 15066 ;;		line 357 in file "mcc_generated_files/drivers/i2c_master.c"
 15067 ;; Parameters:    Size  Location     Type
 15068 ;;		None
 15069 ;; Auto vars:     Size  Location     Type
 15070 ;;		None
 15071 ;; Return value:  Size  Location     Type
 15072 ;;                  1    wreg      enum E7120
 15073 ;; Registers used:
 15074 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15075 ;; Tracked objects:
 15076 ;;		On entry : 0/0
 15077 ;;		On exit  : 0/0
 15078 ;;		Unchanged: 0/0
 15079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15080 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15081 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15082 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15083 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15084 ;;Total ram usage:        3 bytes
 15085 ;; Hardware stack levels used:    1
 15086 ;; Hardware stack levels required when called:    2
 15087 ;; This function calls:
 15088 ;;		_do_I2C_DO_NACK_RESTART
 15089 ;;		_do_I2C_DO_NACK_STOP
 15090 ;;		_i2c1_driver_sendACK
 15091 ;;		_returnReset
 15092 ;;		_returnStop
 15093 ;;		i1_i2c1_driver_getRXData
 15094 ;; This function is called by:
 15095 ;;		_i2c_ISR
 15096 ;; This function uses a non-reentrant model
 15097 ;;
 15098                           
 15099                           
 15100                           ;psect for function _do_I2C_RX
 15101  0CF0                     _do_I2C_RX:	
 15102                           
 15103                           ;mcc_generated_files/drivers/i2c_master.c: 359:     *i2c_status.data_ptr++ = i2c1_driver
      +                          _getRXData();
 15104                           
 15105                           ;incstack = 0
 15106                           ; Regs used in _do_I2C_RX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15107  0CF0  3196  2680  318C   	fcall	i1_i2c1_driver_getRXData
 15108  0CF3  00F6               	movwf	??_do_I2C_RX
 15109  0CF4  0023               	movlb	3	; select bank3
 15110  0CF5  0822               	movf	(low ((_i2c_status| (0+256)+2)))^(0+128),w
 15111  0CF6  0086               	movwf	6
 15112  0CF7  0187               	clrf	7
 15113  0CF8  0876               	movf	??_do_I2C_RX,w
 15114  0CF9  0081               	movwf	1
 15115  0CFA  3001               	movlw	1
 15116  0CFB  00F6               	movwf	??_do_I2C_RX
 15117  0CFC  0876               	movf	??_do_I2C_RX,w
 15118  0CFD  07A2               	addwf	(low ((_i2c_status| (0+256)+2)))^(0+128),f
 15119                           
 15120                           ;mcc_generated_files/drivers/i2c_master.c: 360:     if(--i2c_status.data_length)
 15121  0CFE  3001               	movlw	1
 15122  0CFF  02A3               	subwf	(_i2c_status^(0+384)+3),f
 15123  0D00  3000               	movlw	0
 15124  0D01  3BA4               	subwfb	((_i2c_status+1)^(0+384)+3),f
 15125  0D02  0823               	movf	(_i2c_status^(0+384)+3),w
 15126  0D03  0424               	iorwf	((_i2c_status+1)^(0+384)+3),w
 15127  0D04  1903               	btfsc	3,2
 15128  0D05  2D0A               	goto	i1l173
 15129                           
 15130                           ;mcc_generated_files/drivers/i2c_master.c: 361:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 362:         i2c1_driver_sendACK();
 15131  0D06  3196  26AE         	fcall	_i2c1_driver_sendACK
 15132                           
 15133                           ;mcc_generated_files/drivers/i2c_master.c: 363:         return I2C_RCEN;
 15134  0D08  3005               	movlw	5
 15135  0D09  0008               	return
 15136  0D0A                     i1l173:	
 15137                           ;mcc_generated_files/drivers/i2c_master.c: 365:     else
 15138                           
 15139                           
 15140                           ;mcc_generated_files/drivers/i2c_master.c: 366:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 367:         i2c_status.bufferFree = 1;
 15141  0D0A  1520               	bsf	_i2c_status^(0+384),2
 15142                           
 15143                           ;mcc_generated_files/drivers/i2c_master.c: 368:         switch(i2c_status.callbackTable[
      +                          i2c_dataComplete](i2c_status.callbackPayload[i2c_dataComplete]))
 15144  0D0B  2D12               	goto	i1l5040
 15145  0D0C                     i1l5030:	
 15146                           
 15147                           ;mcc_generated_files/drivers/i2c_master.c: 372:                 return do_I2C_DO_NACK_RE
      +                          START();
 15148  0D0C  3196  26CE         	fcall	_do_I2C_DO_NACK_RESTART
 15149  0D0E  0008               	return
 15150  0D0F                     i1l5034:	
 15151                           
 15152                           ;mcc_generated_files/drivers/i2c_master.c: 376:                 return do_I2C_DO_NACK_ST
      +                          OP();
 15153  0D0F  3196  26CA         	fcall	_do_I2C_DO_NACK_STOP
 15154  0D11  0008               	return
 15155  0D12                     i1l5040:	
 15156  0D12  0837               	movf	(low ((_i2c_status| (0+256)+23)))^(0+128),w
 15157  0D13  00F6               	movwf	??_do_I2C_RX
 15158  0D14  0876               	movf	??_do_I2C_RX,w
 15159  0D15  00F6               	movwf	returnReset@p
 15160  0D16  300B               	movlw	11
 15161  0D17  3EA0               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 15162  0D18  0086               	movwf	6
 15163  0D19  3001               	movlw	1	; select bank3/4
 15164  0D1A  0087               	movwf	7
 15165  0D1B  3F41               	moviw [1]fsr1
 15166  0D1C  008A               	movwf	10
 15167  0D1D  3F40               	moviw [0]fsr1
 15168  0D1E  000A               	callw
 15169  0D1F  318C               	pagesel	$
 15170  0D20  00F7               	movwf	??_do_I2C_RX+1
 15171  0D21  01F8               	clrf	??_do_I2C_RX+2
 15172                           
 15173                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15174                           ; Switch size 1, requested type "simple"
 15175                           ; Number of cases is 1, Range of values is 0 to 0
 15176                           ; switch strategies available:
 15177                           ; Name         Instructions Cycles
 15178                           ; simple_byte            4     3 (average)
 15179                           ; direct_byte            8     6 (fixed)
 15180                           ; jumptable            260     6 (fixed)
 15181                           ;	Chosen strategy is simple_byte
 15182  0D22  0878               	movf	??_do_I2C_RX+2,w
 15183  0D23  3A00               	xorlw	0	; case 0
 15184  0D24  1903               	skipnz
 15185  0D25  2D27               	goto	i1l8076
 15186  0D26  2D0F               	goto	i1l5034
 15187  0D27                     i1l8076:	
 15188                           
 15189                           ; Switch size 1, requested type "simple"
 15190                           ; Number of cases is 4, Range of values is 1 to 4
 15191                           ; switch strategies available:
 15192                           ; Name         Instructions Cycles
 15193                           ; simple_byte           13     7 (average)
 15194                           ; direct_byte           17     9 (fixed)
 15195                           ; jumptable            263     9 (fixed)
 15196                           ;	Chosen strategy is simple_byte
 15197  0D27  0877               	movf	??_do_I2C_RX+1,w
 15198  0D28  3A01               	xorlw	1	; case 1
 15199  0D29  1903               	skipnz
 15200  0D2A  2D0F               	goto	i1l5034
 15201  0D2B  3A03               	xorlw	3	; case 2
 15202  0D2C  1903               	skipnz
 15203  0D2D  2D0C               	goto	i1l5030
 15204  0D2E  3A01               	xorlw	1	; case 3
 15205  0D2F  1903               	skipnz
 15206  0D30  2D0C               	goto	i1l5030
 15207  0D31  3A07               	xorlw	7	; case 4
 15208  0D32  1903               	skipnz
 15209  0D33  2D0F               	goto	i1l5034
 15210  0D34  2D0F               	goto	i1l5034
 15211  0D35  0008               	return
 15212  0D36                     __end_of_do_I2C_RX:	
 15213                           
 15214                           	psect	text80
 15215  0DC7                     __ptext80:	
 15216 ;; *************** function _do_I2C_TX *****************
 15217 ;; Defined at:
 15218 ;;		line 333 in file "mcc_generated_files/drivers/i2c_master.c"
 15219 ;; Parameters:    Size  Location     Type
 15220 ;;		None
 15221 ;; Auto vars:     Size  Location     Type
 15222 ;;		None
 15223 ;; Return value:  Size  Location     Type
 15224 ;;                  1    wreg      enum E7120
 15225 ;; Registers used:
 15226 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15227 ;; Tracked objects:
 15228 ;;		On entry : 0/0
 15229 ;;		On exit  : 0/0
 15230 ;;		Unchanged: 0/0
 15231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15232 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15233 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15234 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15235 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15236 ;;Total ram usage:        3 bytes
 15237 ;; Hardware stack levels used:    1
 15238 ;; Hardware stack levels required when called:    2
 15239 ;; This function calls:
 15240 ;;		_do_I2C_SEND_RESTART_READ
 15241 ;;		_do_I2C_SEND_RESTART_WRITE
 15242 ;;		_do_I2C_SEND_STOP
 15243 ;;		_i2c1_driver_isNACK
 15244 ;;		_returnReset
 15245 ;;		_returnStop
 15246 ;;		i1_i2c1_driver_TXData
 15247 ;; This function is called by:
 15248 ;;		_i2c_ISR
 15249 ;; This function uses a non-reentrant model
 15250 ;;
 15251                           
 15252                           
 15253                           ;psect for function _do_I2C_TX
 15254  0DC7                     _do_I2C_TX:	
 15255                           
 15256                           ;mcc_generated_files/drivers/i2c_master.c: 335:     if(i2c1_driver_isNACK())
 15257                           
 15258                           ;incstack = 0
 15259                           ; Regs used in _do_I2C_TX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15260  0DC7  3197  271E  318D   	fcall	_i2c1_driver_isNACK
 15261  0DCA  1803               	btfsc	3,0
 15262  0DCB  2DD6               	goto	i1l5000
 15263  0DCC  2DFA               	goto	i1l157
 15264  0DCD                     i1l4986:	
 15265                           
 15266                           ;mcc_generated_files/drivers/i2c_master.c: 340:                 return do_I2C_SEND_RESTA
      +                          RT_READ();
 15267  0DCD  3196  26B6         	fcall	_do_I2C_SEND_RESTART_READ
 15268  0DCF  0008               	return
 15269  0DD0                     i1l4990:	
 15270                           
 15271                           ;mcc_generated_files/drivers/i2c_master.c: 342:                 return do_I2C_SEND_RESTA
      +                          RT_WRITE();
 15272  0DD0  3196  26BA         	fcall	_do_I2C_SEND_RESTART_WRITE
 15273  0DD2  0008               	return
 15274  0DD3                     i1l4994:	
 15275                           
 15276                           ;mcc_generated_files/drivers/i2c_master.c: 346:                 return do_I2C_SEND_STOP(
      +                          );
 15277  0DD3  3196  26C2         	fcall	_do_I2C_SEND_STOP
 15278  0DD5  0008               	return
 15279  0DD6                     i1l5000:	
 15280  0DD6  0023               	movlb	3	; select bank3
 15281  0DD7  083A               	movf	(low ((_i2c_status| (0+256)+26)))^(0+128),w
 15282  0DD8  00F6               	movwf	??_do_I2C_TX
 15283  0DD9  0876               	movf	??_do_I2C_TX,w
 15284  0DDA  00F6               	movwf	returnReset@p
 15285  0DDB  3011               	movlw	17
 15286  0DDC  3EA0               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 15287  0DDD  0086               	movwf	6
 15288  0DDE  3001               	movlw	1	; select bank3/4
 15289  0DDF  0087               	movwf	7
 15290  0DE0  3F41               	moviw [1]fsr1
 15291  0DE1  008A               	movwf	10
 15292  0DE2  3F40               	moviw [0]fsr1
 15293  0DE3  000A               	callw
 15294  0DE4  318D               	pagesel	$
 15295  0DE5  00F7               	movwf	??_do_I2C_TX+1
 15296  0DE6  01F8               	clrf	??_do_I2C_TX+2
 15297                           
 15298                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15299                           ; Switch size 1, requested type "simple"
 15300                           ; Number of cases is 1, Range of values is 0 to 0
 15301                           ; switch strategies available:
 15302                           ; Name         Instructions Cycles
 15303                           ; simple_byte            4     3 (average)
 15304                           ; direct_byte            8     6 (fixed)
 15305                           ; jumptable            260     6 (fixed)
 15306                           ;	Chosen strategy is simple_byte
 15307  0DE7  0878               	movf	??_do_I2C_TX+2,w
 15308  0DE8  3A00               	xorlw	0	; case 0
 15309  0DE9  1903               	skipnz
 15310  0DEA  2DEC               	goto	i1l8078
 15311  0DEB  2DD3               	goto	i1l4994
 15312  0DEC                     i1l8078:	
 15313                           
 15314                           ; Switch size 1, requested type "simple"
 15315                           ; Number of cases is 4, Range of values is 1 to 4
 15316                           ; switch strategies available:
 15317                           ; Name         Instructions Cycles
 15318                           ; simple_byte           13     7 (average)
 15319                           ; direct_byte           17     9 (fixed)
 15320                           ; jumptable            263     9 (fixed)
 15321                           ;	Chosen strategy is simple_byte
 15322  0DEC  0877               	movf	??_do_I2C_TX+1,w
 15323  0DED  3A01               	xorlw	1	; case 1
 15324  0DEE  1903               	skipnz
 15325  0DEF  2DD3               	goto	i1l4994
 15326  0DF0  3A03               	xorlw	3	; case 2
 15327  0DF1  1903               	skipnz
 15328  0DF2  2DCD               	goto	i1l4986
 15329  0DF3  3A01               	xorlw	1	; case 3
 15330  0DF4  1903               	skipnz
 15331  0DF5  2DD0               	goto	i1l4990
 15332  0DF6  3A07               	xorlw	7	; case 4
 15333  0DF7  1903               	skipnz
 15334  0DF8  2DD3               	goto	i1l4994
 15335  0DF9  2DD3               	goto	i1l4994
 15336  0DFA                     i1l157:	
 15337                           ;mcc_generated_files/drivers/i2c_master.c: 349:     else
 15338                           
 15339                           
 15340                           ;mcc_generated_files/drivers/i2c_master.c: 350:     {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 351:         i2c_status.addressNACKCheck = 0;
 15341  0DFA  0023               	movlb	3	; select bank3
 15342  0DFB  11A0               	bcf	_i2c_status^(0+384),3
 15343                           
 15344                           ;mcc_generated_files/drivers/i2c_master.c: 352:         i2c1_driver_TXData(*i2c_status.d
      +                          ata_ptr++);
 15345  0DFC  3002               	movlw	2
 15346  0DFD  3EA0               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 15347  0DFE  0086               	movwf	6
 15348  0DFF  3001               	movlw	1	; select bank3/4
 15349  0E00  0087               	movwf	7
 15350  0E01  3F40               	moviw [0]fsr1
 15351  0E02  0084               	movwf	4
 15352  0E03  0185               	clrf	5
 15353  0E04  0A81               	incf	1,f
 15354  0E05  0800               	movf	0,w
 15355  0E06  3196  26DA  318D   	fcall	i1_i2c1_driver_TXData
 15356                           
 15357                           ;mcc_generated_files/drivers/i2c_master.c: 353:         return (--i2c_status.data_length
      +                          )?I2C_TX:I2C_TX_EMPTY;
 15358  0E09  3001               	movlw	1
 15359  0E0A  0023               	movlb	3	; select bank3
 15360  0E0B  02A3               	subwf	(_i2c_status^(0+384)+3),f
 15361  0E0C  3000               	movlw	0
 15362  0E0D  3BA4               	subwfb	((_i2c_status+1)^(0+384)+3),f
 15363  0E0E  0823               	movf	(_i2c_status^(0+384)+3),w
 15364  0E0F  0424               	iorwf	((_i2c_status+1)^(0+384)+3),w
 15365  0E10  1D03               	btfss	3,2
 15366  0E11  2E14               	goto	i1l5008
 15367  0E12  3006               	movlw	6
 15368  0E13  0008               	return
 15369  0E14                     i1l5008:	
 15370  0E14  3003               	movlw	3
 15371  0E15  0008               	return
 15372  0E16                     __end_of_do_I2C_TX:	
 15373                           
 15374                           	psect	text81
 15375  0AD5                     __ptext81:	
 15376 ;; *************** function _do_I2C_DO_ADDRESS_NACK *****************
 15377 ;; Defined at:
 15378 ;;		line 319 in file "mcc_generated_files/drivers/i2c_master.c"
 15379 ;; Parameters:    Size  Location     Type
 15380 ;;		None
 15381 ;; Auto vars:     Size  Location     Type
 15382 ;;		None
 15383 ;; Return value:  Size  Location     Type
 15384 ;;                  1    wreg      enum E7120
 15385 ;; Registers used:
 15386 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15387 ;; Tracked objects:
 15388 ;;		On entry : 0/0
 15389 ;;		On exit  : 0/0
 15390 ;;		Unchanged: 0/0
 15391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15393 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15394 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15395 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15396 ;;Total ram usage:        3 bytes
 15397 ;; Hardware stack levels used:    1
 15398 ;; Hardware stack levels required when called:    2
 15399 ;; This function calls:
 15400 ;;		_do_I2C_SEND_RESTART
 15401 ;;		_do_I2C_SEND_STOP
 15402 ;;		_returnReset
 15403 ;;		_returnStop
 15404 ;; This function is called by:
 15405 ;;		_i2c_ISR
 15406 ;; This function uses a non-reentrant model
 15407 ;;
 15408                           
 15409                           
 15410                           ;psect for function _do_I2C_DO_ADDRESS_NACK
 15411  0AD5                     _do_I2C_DO_ADDRESS_NACK:	
 15412                           
 15413                           ;mcc_generated_files/drivers/i2c_master.c: 321:     i2c_status.addressNACKCheck = 0;
 15414                           
 15415                           ;incstack = 0
 15416                           ; Regs used in _do_I2C_DO_ADDRESS_NACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15417  0AD5  0023               	movlb	3	; select bank3
 15418  0AD6  11A0               	bcf	_i2c_status^(0+384),3
 15419                           
 15420                           ;mcc_generated_files/drivers/i2c_master.c: 322:     i2c_status.error = I2C_FAIL;
 15421  0AD7  3002               	movlw	2
 15422  0AD8  00F6               	movwf	??_do_I2C_DO_ADDRESS_NACK
 15423  0AD9  0876               	movf	??_do_I2C_DO_ADDRESS_NACK,w
 15424  0ADA  00AA               	movwf	(_i2c_status^(0+384)+10)
 15425                           
 15426                           ;mcc_generated_files/drivers/i2c_master.c: 323:     switch(i2c_status.callbackTable[i2c_
      +                          addressNACK](i2c_status.callbackPayload[i2c_addressNACK]))
 15427  0ADB  2AE2               	goto	i1l4974
 15428  0ADC                     i1l4964:	
 15429                           
 15430                           ;mcc_generated_files/drivers/i2c_master.c: 327:             return do_I2C_SEND_RESTART()
      +                          ;
 15431  0ADC  3196  26BE         	fcall	_do_I2C_SEND_RESTART
 15432  0ADE  0008               	return
 15433  0ADF                     i1l4968:	
 15434                           
 15435                           ;mcc_generated_files/drivers/i2c_master.c: 329:             return do_I2C_SEND_STOP();
 15436  0ADF  3196  26C2         	fcall	_do_I2C_SEND_STOP
 15437  0AE1  0008               	return
 15438  0AE2                     i1l4974:	
 15439  0AE2  0839               	movf	(low ((_i2c_status| (0+256)+25)))^(0+128),w
 15440  0AE3  00F6               	movwf	??_do_I2C_DO_ADDRESS_NACK
 15441  0AE4  0876               	movf	??_do_I2C_DO_ADDRESS_NACK,w
 15442  0AE5  00F6               	movwf	returnReset@p
 15443  0AE6  300F               	movlw	15
 15444  0AE7  3EA0               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 15445  0AE8  0086               	movwf	6
 15446  0AE9  3001               	movlw	1	; select bank3/4
 15447  0AEA  0087               	movwf	7
 15448  0AEB  3F41               	moviw [1]fsr1
 15449  0AEC  008A               	movwf	10
 15450  0AED  3F40               	moviw [0]fsr1
 15451  0AEE  000A               	callw
 15452  0AEF  318A               	pagesel	$
 15453  0AF0  00F7               	movwf	??_do_I2C_DO_ADDRESS_NACK+1
 15454  0AF1  01F8               	clrf	??_do_I2C_DO_ADDRESS_NACK+2
 15455                           
 15456                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15457                           ; Switch size 1, requested type "simple"
 15458                           ; Number of cases is 1, Range of values is 0 to 0
 15459                           ; switch strategies available:
 15460                           ; Name         Instructions Cycles
 15461                           ; simple_byte            4     3 (average)
 15462                           ; direct_byte            8     6 (fixed)
 15463                           ; jumptable            260     6 (fixed)
 15464                           ;	Chosen strategy is simple_byte
 15465  0AF2  0878               	movf	??_do_I2C_DO_ADDRESS_NACK+2,w
 15466  0AF3  3A00               	xorlw	0	; case 0
 15467  0AF4  1903               	skipnz
 15468  0AF5  2AF7               	goto	i1l8080
 15469  0AF6  2ADF               	goto	i1l4968
 15470  0AF7                     i1l8080:	
 15471                           
 15472                           ; Switch size 1, requested type "simple"
 15473                           ; Number of cases is 2, Range of values is 2 to 3
 15474                           ; switch strategies available:
 15475                           ; Name         Instructions Cycles
 15476                           ; simple_byte            7     4 (average)
 15477                           ; direct_byte           13     9 (fixed)
 15478                           ; jumptable            263     9 (fixed)
 15479                           ;	Chosen strategy is simple_byte
 15480  0AF7  0877               	movf	??_do_I2C_DO_ADDRESS_NACK+1,w
 15481  0AF8  3A02               	xorlw	2	; case 2
 15482  0AF9  1903               	skipnz
 15483  0AFA  2ADC               	goto	i1l4964
 15484  0AFB  3A01               	xorlw	1	; case 3
 15485  0AFC  1903               	skipnz
 15486  0AFD  2ADC               	goto	i1l4964
 15487  0AFE  2ADF               	goto	i1l4968
 15488  0AFF  0008               	return
 15489  0B00                     __end_of_do_I2C_DO_ADDRESS_NACK:	
 15490                           
 15491                           	psect	text82
 15492  16CE                     __ptext82:	
 15493 ;; *************** function _do_I2C_DO_NACK_RESTART *****************
 15494 ;; Defined at:
 15495 ;;		line 311 in file "mcc_generated_files/drivers/i2c_master.c"
 15496 ;; Parameters:    Size  Location     Type
 15497 ;;		None
 15498 ;; Auto vars:     Size  Location     Type
 15499 ;;		None
 15500 ;; Return value:  Size  Location     Type
 15501 ;;                  1    wreg      enum E7120
 15502 ;; Registers used:
 15503 ;;		wreg, status,2, status,0, pclath, cstack
 15504 ;; Tracked objects:
 15505 ;;		On entry : 0/0
 15506 ;;		On exit  : 0/0
 15507 ;;		Unchanged: 0/0
 15508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15509 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15510 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15511 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15512 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15513 ;;Total ram usage:        0 bytes
 15514 ;; Hardware stack levels used:    1
 15515 ;; Hardware stack levels required when called:    1
 15516 ;; This function calls:
 15517 ;;		i1_i2c1_driver_sendNACK
 15518 ;; This function is called by:
 15519 ;;		_do_I2C_RX
 15520 ;;		_i2c_ISR
 15521 ;; This function uses a non-reentrant model
 15522 ;;
 15523                           
 15524                           
 15525                           ;psect for function _do_I2C_DO_NACK_RESTART
 15526  16CE                     _do_I2C_DO_NACK_RESTART:	
 15527                           
 15528                           ;mcc_generated_files/drivers/i2c_master.c: 313:     i2c1_driver_sendNACK();
 15529                           
 15530                           ;incstack = 0
 15531                           ; Regs used in _do_I2C_DO_NACK_RESTART: [wreg+status,2+status,0+pclath+cstack]
 15532  16CE  3196  26B2         	fcall	i1_i2c1_driver_sendNACK
 15533                           
 15534                           ;mcc_generated_files/drivers/i2c_master.c: 314:     return I2C_SEND_RESTART;
 15535  16D0  3009               	movlw	9
 15536  16D1  0008               	return
 15537  16D2                     __end_of_do_I2C_DO_NACK_RESTART:	
 15538                           
 15539                           	psect	text83
 15540  16CA                     __ptext83:	
 15541 ;; *************** function _do_I2C_DO_NACK_STOP *****************
 15542 ;; Defined at:
 15543 ;;		line 305 in file "mcc_generated_files/drivers/i2c_master.c"
 15544 ;; Parameters:    Size  Location     Type
 15545 ;;		None
 15546 ;; Auto vars:     Size  Location     Type
 15547 ;;		None
 15548 ;; Return value:  Size  Location     Type
 15549 ;;                  1    wreg      enum E7120
 15550 ;; Registers used:
 15551 ;;		wreg, status,2, status,0, pclath, cstack
 15552 ;; Tracked objects:
 15553 ;;		On entry : 0/0
 15554 ;;		On exit  : 0/0
 15555 ;;		Unchanged: 0/0
 15556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15557 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15558 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15560 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15561 ;;Total ram usage:        0 bytes
 15562 ;; Hardware stack levels used:    1
 15563 ;; Hardware stack levels required when called:    1
 15564 ;; This function calls:
 15565 ;;		i1_i2c1_driver_sendNACK
 15566 ;; This function is called by:
 15567 ;;		_do_I2C_RX
 15568 ;;		_i2c_ISR
 15569 ;; This function uses a non-reentrant model
 15570 ;;
 15571                           
 15572                           
 15573                           ;psect for function _do_I2C_DO_NACK_STOP
 15574  16CA                     _do_I2C_DO_NACK_STOP:	
 15575                           
 15576                           ;mcc_generated_files/drivers/i2c_master.c: 307:     i2c1_driver_sendNACK();
 15577                           
 15578                           ;incstack = 0
 15579                           ; Regs used in _do_I2C_DO_NACK_STOP: [wreg+status,2+status,0+pclath+cstack]
 15580  16CA  3196  26B2         	fcall	i1_i2c1_driver_sendNACK
 15581                           
 15582                           ;mcc_generated_files/drivers/i2c_master.c: 308:     return I2C_SEND_STOP;
 15583  16CC  300A               	movlw	10
 15584  16CD  0008               	return
 15585  16CE                     __end_of_do_I2C_DO_NACK_STOP:	
 15586                           
 15587                           	psect	text84
 15588  16C6                     __ptext84:	
 15589 ;; *************** function _do_I2C_DO_ACK *****************
 15590 ;; Defined at:
 15591 ;;		line 299 in file "mcc_generated_files/drivers/i2c_master.c"
 15592 ;; Parameters:    Size  Location     Type
 15593 ;;		None
 15594 ;; Auto vars:     Size  Location     Type
 15595 ;;		None
 15596 ;; Return value:  Size  Location     Type
 15597 ;;                  1    wreg      enum E7120
 15598 ;; Registers used:
 15599 ;;		wreg, status,2, status,0, pclath, cstack
 15600 ;; Tracked objects:
 15601 ;;		On entry : 0/0
 15602 ;;		On exit  : 0/0
 15603 ;;		Unchanged: 0/0
 15604 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15605 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15606 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15607 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15608 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15609 ;;Total ram usage:        0 bytes
 15610 ;; Hardware stack levels used:    1
 15611 ;; Hardware stack levels required when called:    1
 15612 ;; This function calls:
 15613 ;;		_i2c1_driver_sendACK
 15614 ;; This function is called by:
 15615 ;;		_i2c_ISR
 15616 ;; This function uses a non-reentrant model
 15617 ;;
 15618                           
 15619                           
 15620                           ;psect for function _do_I2C_DO_ACK
 15621  16C6                     _do_I2C_DO_ACK:	
 15622                           
 15623                           ;mcc_generated_files/drivers/i2c_master.c: 301:     i2c1_driver_sendACK();
 15624                           
 15625                           ;incstack = 0
 15626                           ; Regs used in _do_I2C_DO_ACK: [wreg+status,2+status,0+pclath+cstack]
 15627  16C6  3196  26AE         	fcall	_i2c1_driver_sendACK
 15628                           
 15629                           ;mcc_generated_files/drivers/i2c_master.c: 302:     return I2C_RCEN;
 15630  16C8  3005               	movlw	5
 15631  16C9  0008               	return
 15632  16CA                     __end_of_do_I2C_DO_ACK:	
 15633                           
 15634                           	psect	text85
 15635  16EA                     __ptext85:	
 15636 ;; *************** function _do_I2C_RCEN *****************
 15637 ;; Defined at:
 15638 ;;		line 292 in file "mcc_generated_files/drivers/i2c_master.c"
 15639 ;; Parameters:    Size  Location     Type
 15640 ;;		None
 15641 ;; Auto vars:     Size  Location     Type
 15642 ;;		None
 15643 ;; Return value:  Size  Location     Type
 15644 ;;                  1    wreg      enum E7120
 15645 ;; Registers used:
 15646 ;;		wreg, status,2, status,0, pclath, cstack
 15647 ;; Tracked objects:
 15648 ;;		On entry : 0/0
 15649 ;;		On exit  : 0/0
 15650 ;;		Unchanged: 0/0
 15651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15652 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15653 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15654 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15655 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15656 ;;Total ram usage:        0 bytes
 15657 ;; Hardware stack levels used:    1
 15658 ;; Hardware stack levels required when called:    1
 15659 ;; This function calls:
 15660 ;;		i1_i2c1_driver_startRX
 15661 ;; This function is called by:
 15662 ;;		_i2c_ISR
 15663 ;; This function uses a non-reentrant model
 15664 ;;
 15665                           
 15666                           
 15667                           ;psect for function _do_I2C_RCEN
 15668  16EA                     _do_I2C_RCEN:	
 15669                           
 15670                           ;mcc_generated_files/drivers/i2c_master.c: 294:     i2c_status.addressNACKCheck = 0;
 15671                           
 15672                           ;incstack = 0
 15673                           ; Regs used in _do_I2C_RCEN: [wreg+status,2+status,0+pclath+cstack]
 15674  16EA  0023               	movlb	3	; select bank3
 15675  16EB  11A0               	bcf	_i2c_status^(0+384),3
 15676                           
 15677                           ;mcc_generated_files/drivers/i2c_master.c: 295:     i2c1_driver_startRX();
 15678  16EC  3196  267D         	fcall	i1_i2c1_driver_startRX
 15679                           
 15680                           ;mcc_generated_files/drivers/i2c_master.c: 296:     return I2C_RX;
 15681  16EE  3004               	movlw	4
 15682  16EF  0008               	return
 15683  16F0                     __end_of_do_I2C_RCEN:	
 15684                           
 15685                           	psect	text86
 15686  1709                     __ptext86:	
 15687 ;; *************** function _do_I2C_SEND_ADR_WRITE *****************
 15688 ;; Defined at:
 15689 ;;		line 285 in file "mcc_generated_files/drivers/i2c_master.c"
 15690 ;; Parameters:    Size  Location     Type
 15691 ;;		None
 15692 ;; Auto vars:     Size  Location     Type
 15693 ;;		None
 15694 ;; Return value:  Size  Location     Type
 15695 ;;                  1    wreg      enum E7120
 15696 ;; Registers used:
 15697 ;;		wreg, status,2, status,0, pclath, cstack
 15698 ;; Tracked objects:
 15699 ;;		On entry : 0/0
 15700 ;;		On exit  : 0/0
 15701 ;;		Unchanged: 0/0
 15702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15703 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15704 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15705 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15706 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15707 ;;Total ram usage:        0 bytes
 15708 ;; Hardware stack levels used:    1
 15709 ;; Hardware stack levels required when called:    1
 15710 ;; This function calls:
 15711 ;;		i1_i2c1_driver_TXData
 15712 ;; This function is called by:
 15713 ;;		_i2c_ISR
 15714 ;; This function uses a non-reentrant model
 15715 ;;
 15716                           
 15717                           
 15718                           ;psect for function _do_I2C_SEND_ADR_WRITE
 15719  1709                     _do_I2C_SEND_ADR_WRITE:	
 15720                           
 15721                           ;mcc_generated_files/drivers/i2c_master.c: 287:     i2c_status.addressNACKCheck = 1;
 15722                           
 15723                           ;incstack = 0
 15724                           ; Regs used in _do_I2C_SEND_ADR_WRITE: [wreg+status,2+status,0+pclath+cstack]
 15725  1709  0023               	movlb	3	; select bank3
 15726  170A  15A0               	bsf	_i2c_status^(0+384),3
 15727                           
 15728                           ;mcc_generated_files/drivers/i2c_master.c: 288:     i2c1_driver_TXData(i2c_status.addres
      +                          s << 1);
 15729  170B  3521               	lslf	(_i2c_status^(0+384)+1),w
 15730  170C  3196  26DA         	fcall	i1_i2c1_driver_TXData
 15731                           
 15732                           ;mcc_generated_files/drivers/i2c_master.c: 289:     return I2C_TX;
 15733  170E  3003               	movlw	3
 15734  170F  0008               	return
 15735  1710                     __end_of_do_I2C_SEND_ADR_WRITE:	
 15736                           
 15737                           	psect	text87
 15738  1726                     __ptext87:	
 15739 ;; *************** function _do_I2C_SEND_ADR_READ *****************
 15740 ;; Defined at:
 15741 ;;		line 278 in file "mcc_generated_files/drivers/i2c_master.c"
 15742 ;; Parameters:    Size  Location     Type
 15743 ;;		None
 15744 ;; Auto vars:     Size  Location     Type
 15745 ;;		None
 15746 ;; Return value:  Size  Location     Type
 15747 ;;                  1    wreg      enum E7120
 15748 ;; Registers used:
 15749 ;;		wreg, status,2, status,0, pclath, cstack
 15750 ;; Tracked objects:
 15751 ;;		On entry : 0/0
 15752 ;;		On exit  : 0/0
 15753 ;;		Unchanged: 0/0
 15754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15756 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15757 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15758 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15759 ;;Total ram usage:        0 bytes
 15760 ;; Hardware stack levels used:    1
 15761 ;; Hardware stack levels required when called:    1
 15762 ;; This function calls:
 15763 ;;		i1_i2c1_driver_TXData
 15764 ;; This function is called by:
 15765 ;;		_i2c_ISR
 15766 ;; This function uses a non-reentrant model
 15767 ;;
 15768                           
 15769                           
 15770                           ;psect for function _do_I2C_SEND_ADR_READ
 15771  1726                     _do_I2C_SEND_ADR_READ:	
 15772                           
 15773                           ;mcc_generated_files/drivers/i2c_master.c: 280:     i2c_status.addressNACKCheck = 1;
 15774                           
 15775                           ;incstack = 0
 15776                           ; Regs used in _do_I2C_SEND_ADR_READ: [wreg+status,2+status,0+pclath+cstack]
 15777  1726  0023               	movlb	3	; select bank3
 15778  1727  15A0               	bsf	_i2c_status^(0+384),3
 15779                           
 15780                           ;mcc_generated_files/drivers/i2c_master.c: 281:     i2c1_driver_TXData(i2c_status.addres
      +                          s << 1 | 1);
 15781  1728  1403               	setc
 15782  1729  0D21               	rlf	(_i2c_status^(0+384)+1),w
 15783  172A  3196  26DA         	fcall	i1_i2c1_driver_TXData
 15784                           
 15785                           ;mcc_generated_files/drivers/i2c_master.c: 282:     return I2C_RCEN;
 15786  172C  3005               	movlw	5
 15787  172D  0008               	return
 15788  172E                     __end_of_do_I2C_SEND_ADR_READ:	
 15789                           
 15790                           	psect	text88
 15791  16C2                     __ptext88:	
 15792 ;; *************** function _do_I2C_SEND_STOP *****************
 15793 ;; Defined at:
 15794 ;;		line 272 in file "mcc_generated_files/drivers/i2c_master.c"
 15795 ;; Parameters:    Size  Location     Type
 15796 ;;		None
 15797 ;; Auto vars:     Size  Location     Type
 15798 ;;		None
 15799 ;; Return value:  Size  Location     Type
 15800 ;;                  1    wreg      enum E7120
 15801 ;; Registers used:
 15802 ;;		wreg, status,2, status,0, pclath, cstack
 15803 ;; Tracked objects:
 15804 ;;		On entry : 0/0
 15805 ;;		On exit  : 0/0
 15806 ;;		Unchanged: 0/0
 15807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15808 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15809 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15810 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15811 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15812 ;;Total ram usage:        0 bytes
 15813 ;; Hardware stack levels used:    1
 15814 ;; Hardware stack levels required when called:    1
 15815 ;; This function calls:
 15816 ;;		i1_i2c1_driver_stop
 15817 ;; This function is called by:
 15818 ;;		_do_I2C_DO_ADDRESS_NACK
 15819 ;;		_do_I2C_TX
 15820 ;;		_do_I2C_TX_EMPTY
 15821 ;;		_i2c_ISR
 15822 ;; This function uses a non-reentrant model
 15823 ;;
 15824                           
 15825                           
 15826                           ;psect for function _do_I2C_SEND_STOP
 15827  16C2                     _do_I2C_SEND_STOP:	
 15828                           
 15829                           ;mcc_generated_files/drivers/i2c_master.c: 274:     i2c1_driver_stop();
 15830                           
 15831                           ;incstack = 0
 15832                           ; Regs used in _do_I2C_SEND_STOP: [wreg+status,2+status,0+pclath+cstack]
 15833  16C2  3196  267A         	fcall	i1_i2c1_driver_stop
 15834                           
 15835                           ;mcc_generated_files/drivers/i2c_master.c: 275:     return I2C_IDLE;
 15836  16C4  3000               	movlw	0
 15837  16C5  0008               	return
 15838  16C6                     __end_of_do_I2C_SEND_STOP:	
 15839                           
 15840                           	psect	text89
 15841  16BE                     __ptext89:	
 15842 ;; *************** function _do_I2C_SEND_RESTART *****************
 15843 ;; Defined at:
 15844 ;;		line 266 in file "mcc_generated_files/drivers/i2c_master.c"
 15845 ;; Parameters:    Size  Location     Type
 15846 ;;		None
 15847 ;; Auto vars:     Size  Location     Type
 15848 ;;		None
 15849 ;; Return value:  Size  Location     Type
 15850 ;;                  1    wreg      enum E7120
 15851 ;; Registers used:
 15852 ;;		wreg, status,2, status,0, pclath, cstack
 15853 ;; Tracked objects:
 15854 ;;		On entry : 0/0
 15855 ;;		On exit  : 0/0
 15856 ;;		Unchanged: 0/0
 15857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15858 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15859 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15860 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15861 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15862 ;;Total ram usage:        0 bytes
 15863 ;; Hardware stack levels used:    1
 15864 ;; Hardware stack levels required when called:    1
 15865 ;; This function calls:
 15866 ;;		i1_i2c1_driver_restart
 15867 ;; This function is called by:
 15868 ;;		_do_I2C_DO_ADDRESS_NACK
 15869 ;;		_do_I2C_TX_EMPTY
 15870 ;;		_i2c_ISR
 15871 ;; This function uses a non-reentrant model
 15872 ;;
 15873                           
 15874                           
 15875                           ;psect for function _do_I2C_SEND_RESTART
 15876  16BE                     _do_I2C_SEND_RESTART:	
 15877                           
 15878                           ;mcc_generated_files/drivers/i2c_master.c: 268:     i2c1_driver_restart();
 15879                           
 15880                           ;incstack = 0
 15881                           ; Regs used in _do_I2C_SEND_RESTART: [wreg+status,2+status,0+pclath+cstack]
 15882  16BE  3196  2677         	fcall	i1_i2c1_driver_restart
 15883                           
 15884                           ;mcc_generated_files/drivers/i2c_master.c: 269:     return I2C_SEND_ADR_READ;
 15885  16C0  3001               	movlw	1
 15886  16C1  0008               	return
 15887  16C2                     __end_of_do_I2C_SEND_RESTART:	
 15888                           
 15889                           	psect	text90
 15890  16BA                     __ptext90:	
 15891 ;; *************** function _do_I2C_SEND_RESTART_WRITE *****************
 15892 ;; Defined at:
 15893 ;;		line 260 in file "mcc_generated_files/drivers/i2c_master.c"
 15894 ;; Parameters:    Size  Location     Type
 15895 ;;		None
 15896 ;; Auto vars:     Size  Location     Type
 15897 ;;		None
 15898 ;; Return value:  Size  Location     Type
 15899 ;;                  1    wreg      enum E7120
 15900 ;; Registers used:
 15901 ;;		wreg, status,2, status,0, pclath, cstack
 15902 ;; Tracked objects:
 15903 ;;		On entry : 0/0
 15904 ;;		On exit  : 0/0
 15905 ;;		Unchanged: 0/0
 15906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15907 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15908 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15909 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15910 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15911 ;;Total ram usage:        0 bytes
 15912 ;; Hardware stack levels used:    1
 15913 ;; Hardware stack levels required when called:    1
 15914 ;; This function calls:
 15915 ;;		i1_i2c1_driver_restart
 15916 ;; This function is called by:
 15917 ;;		_do_I2C_TX
 15918 ;;		_i2c_ISR
 15919 ;; This function uses a non-reentrant model
 15920 ;;
 15921                           
 15922                           
 15923                           ;psect for function _do_I2C_SEND_RESTART_WRITE
 15924  16BA                     _do_I2C_SEND_RESTART_WRITE:	
 15925                           
 15926                           ;mcc_generated_files/drivers/i2c_master.c: 262:     i2c1_driver_restart();
 15927                           
 15928                           ;incstack = 0
 15929                           ; Regs used in _do_I2C_SEND_RESTART_WRITE: [wreg+status,2+status,0+pclath+cstack]
 15930  16BA  3196  2677         	fcall	i1_i2c1_driver_restart
 15931                           
 15932                           ;mcc_generated_files/drivers/i2c_master.c: 263:     return I2C_SEND_ADR_WRITE;
 15933  16BC  3002               	movlw	2
 15934  16BD  0008               	return
 15935  16BE                     __end_of_do_I2C_SEND_RESTART_WRITE:	
 15936                           
 15937                           	psect	text91
 15938  16B6                     __ptext91:	
 15939 ;; *************** function _do_I2C_SEND_RESTART_READ *****************
 15940 ;; Defined at:
 15941 ;;		line 254 in file "mcc_generated_files/drivers/i2c_master.c"
 15942 ;; Parameters:    Size  Location     Type
 15943 ;;		None
 15944 ;; Auto vars:     Size  Location     Type
 15945 ;;		None
 15946 ;; Return value:  Size  Location     Type
 15947 ;;                  1    wreg      enum E7120
 15948 ;; Registers used:
 15949 ;;		wreg, status,2, status,0, pclath, cstack
 15950 ;; Tracked objects:
 15951 ;;		On entry : 0/0
 15952 ;;		On exit  : 0/0
 15953 ;;		Unchanged: 0/0
 15954 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15955 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15956 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15957 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15958 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15959 ;;Total ram usage:        0 bytes
 15960 ;; Hardware stack levels used:    1
 15961 ;; Hardware stack levels required when called:    1
 15962 ;; This function calls:
 15963 ;;		i1_i2c1_driver_restart
 15964 ;; This function is called by:
 15965 ;;		_do_I2C_TX
 15966 ;;		_i2c_ISR
 15967 ;; This function uses a non-reentrant model
 15968 ;;
 15969                           
 15970                           
 15971                           ;psect for function _do_I2C_SEND_RESTART_READ
 15972  16B6                     _do_I2C_SEND_RESTART_READ:	
 15973                           
 15974                           ;mcc_generated_files/drivers/i2c_master.c: 256:     i2c1_driver_restart();
 15975                           
 15976                           ;incstack = 0
 15977                           ; Regs used in _do_I2C_SEND_RESTART_READ: [wreg+status,2+status,0+pclath+cstack]
 15978  16B6  3196  2677         	fcall	i1_i2c1_driver_restart
 15979                           
 15980                           ;mcc_generated_files/drivers/i2c_master.c: 257:     return I2C_SEND_ADR_READ;
 15981  16B8  3001               	movlw	1
 15982  16B9  0008               	return
 15983  16BA                     __end_of_do_I2C_SEND_RESTART_READ:	
 15984                           
 15985                           	psect	text92
 15986  16DF                     __ptext92:	
 15987 ;; *************** function _do_I2C_IDLE *****************
 15988 ;; Defined at:
 15989 ;;		line 247 in file "mcc_generated_files/drivers/i2c_master.c"
 15990 ;; Parameters:    Size  Location     Type
 15991 ;;		None
 15992 ;; Auto vars:     Size  Location     Type
 15993 ;;		None
 15994 ;; Return value:  Size  Location     Type
 15995 ;;                  1    wreg      enum E7120
 15996 ;; Registers used:
 15997 ;;		wreg, status,2
 15998 ;; Tracked objects:
 15999 ;;		On entry : 0/0
 16000 ;;		On exit  : 0/0
 16001 ;;		Unchanged: 0/0
 16002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16003 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16004 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16005 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16006 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16007 ;;Total ram usage:        0 bytes
 16008 ;; Hardware stack levels used:    1
 16009 ;; This function calls:
 16010 ;;		Nothing
 16011 ;; This function is called by:
 16012 ;;		_i2c_ISR
 16013 ;; This function uses a non-reentrant model
 16014 ;;
 16015                           
 16016                           
 16017                           ;psect for function _do_I2C_IDLE
 16018  16DF                     _do_I2C_IDLE:	
 16019                           
 16020                           ;mcc_generated_files/drivers/i2c_master.c: 249:     i2c_status.busy = 0;
 16021                           
 16022                           ;incstack = 0
 16023                           ; Regs used in _do_I2C_IDLE: [wreg+status,2]
 16024  16DF  0023               	movlb	3	; select bank3
 16025  16E0  1020               	bcf	_i2c_status^(0+384),0
 16026                           
 16027                           ;mcc_generated_files/drivers/i2c_master.c: 250:     i2c_status.error = I2C_NOERR;
 16028  16E1  01AA               	clrf	(_i2c_status^(0+384)+10)
 16029                           
 16030                           ;mcc_generated_files/drivers/i2c_master.c: 251:     return I2C_RESET;
 16031  16E2  300E               	movlw	14
 16032  16E3  0008               	return
 16033  16E4                     __end_of_do_I2C_IDLE:	
 16034                           
 16035                           	psect	text93
 16036  1702                     __ptext93:	
 16037 ;; *************** function _do_I2C_RESET *****************
 16038 ;; Defined at:
 16039 ;;		line 239 in file "mcc_generated_files/drivers/i2c_master.c"
 16040 ;; Parameters:    Size  Location     Type
 16041 ;;		None
 16042 ;; Auto vars:     Size  Location     Type
 16043 ;;		None
 16044 ;; Return value:  Size  Location     Type
 16045 ;;                  1    wreg      enum E7120
 16046 ;; Registers used:
 16047 ;;		wreg, status,2, status,0, pclath, cstack
 16048 ;; Tracked objects:
 16049 ;;		On entry : 0/0
 16050 ;;		On exit  : 0/0
 16051 ;;		Unchanged: 0/0
 16052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16053 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16054 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16055 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16056 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16057 ;;Total ram usage:        0 bytes
 16058 ;; Hardware stack levels used:    1
 16059 ;; Hardware stack levels required when called:    1
 16060 ;; This function calls:
 16061 ;;		_i2c1_driver_resetBus
 16062 ;; This function is called by:
 16063 ;;		_i2c_ISR
 16064 ;; This function uses a non-reentrant model
 16065 ;;
 16066                           
 16067                           
 16068                           ;psect for function _do_I2C_RESET
 16069  1702                     _do_I2C_RESET:	
 16070                           
 16071                           ;mcc_generated_files/drivers/i2c_master.c: 241:     i2c1_driver_resetBus();
 16072                           
 16073                           ;incstack = 0
 16074                           ; Regs used in _do_I2C_RESET: [wreg+status,2+status,0+pclath+cstack]
 16075  1702  3196  2670         	fcall	_i2c1_driver_resetBus
 16076                           
 16077                           ;mcc_generated_files/drivers/i2c_master.c: 242:     i2c_status.busy = 0;
 16078  1704  0023               	movlb	3	; select bank3
 16079  1705  1020               	bcf	_i2c_status^(0+384),0
 16080                           
 16081                           ;mcc_generated_files/drivers/i2c_master.c: 243:     i2c_status.error = I2C_NOERR;
 16082  1706  01AA               	clrf	(_i2c_status^(0+384)+10)
 16083                           
 16084                           ;mcc_generated_files/drivers/i2c_master.c: 244:     return I2C_RESET;
 16085  1707  300E               	movlw	14
 16086  1708  0008               	return
 16087  1709                     __end_of_do_I2C_RESET:	
 16088                           
 16089                           	psect	text94
 16090  0B2B                     __ptext94:	
 16091 ;; *************** function _do_I2C_TX_EMPTY *****************
 16092 ;; Defined at:
 16093 ;;		line 382 in file "mcc_generated_files/drivers/i2c_master.c"
 16094 ;; Parameters:    Size  Location     Type
 16095 ;;		None
 16096 ;; Auto vars:     Size  Location     Type
 16097 ;;		None
 16098 ;; Return value:  Size  Location     Type
 16099 ;;                  1    wreg      enum E7120
 16100 ;; Registers used:
 16101 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16102 ;; Tracked objects:
 16103 ;;		On entry : 0/0
 16104 ;;		On exit  : 0/0
 16105 ;;		Unchanged: 0/0
 16106 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16107 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16108 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16109 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16110 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16111 ;;Total ram usage:        3 bytes
 16112 ;; Hardware stack levels used:    1
 16113 ;; Hardware stack levels required when called:    2
 16114 ;; This function calls:
 16115 ;;		_do_I2C_SEND_RESTART
 16116 ;;		_do_I2C_SEND_STOP
 16117 ;;		_mssp1_setIRQ
 16118 ;;		_returnReset
 16119 ;;		_returnStop
 16120 ;; This function is called by:
 16121 ;;		_i2c_ISR
 16122 ;; This function uses a non-reentrant model
 16123 ;;
 16124                           
 16125                           
 16126                           ;psect for function _do_I2C_TX_EMPTY
 16127  0B2B                     _do_I2C_TX_EMPTY:	
 16128                           
 16129                           ;mcc_generated_files/drivers/i2c_master.c: 384:     i2c_status.bufferFree = 1;
 16130                           
 16131                           ;incstack = 0
 16132                           ; Regs used in _do_I2C_TX_EMPTY: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16133  0B2B  0023               	movlb	3	; select bank3
 16134  0B2C  1520               	bsf	_i2c_status^(0+384),2
 16135                           
 16136                           ;mcc_generated_files/drivers/i2c_master.c: 385:     switch(i2c_status.callbackTable[i2c_
      +                          dataComplete](i2c_status.callbackPayload[i2c_dataComplete]))
 16137  0B2D  2B38               	goto	i1l5066
 16138  0B2E                     i1l5050:	
 16139                           
 16140                           ;mcc_generated_files/drivers/i2c_master.c: 389:             return do_I2C_SEND_RESTART()
      +                          ;
 16141  0B2E  3196  26BE         	fcall	_do_I2C_SEND_RESTART
 16142  0B30  0008               	return
 16143  0B31                     i1l5054:	
 16144                           
 16145                           ;mcc_generated_files/drivers/i2c_master.c: 391:             mssp1_setIRQ();
 16146  0B31  3196  2683         	fcall	_mssp1_setIRQ
 16147                           
 16148                           ;mcc_generated_files/drivers/i2c_master.c: 392:             return I2C_TX;
 16149  0B33  3003               	movlw	3
 16150  0B34  0008               	return
 16151  0B35                     i1l5060:	
 16152                           
 16153                           ;mcc_generated_files/drivers/i2c_master.c: 395:             return do_I2C_SEND_STOP();
 16154  0B35  3196  26C2         	fcall	_do_I2C_SEND_STOP
 16155  0B37  0008               	return
 16156  0B38                     i1l5066:	
 16157  0B38  0837               	movf	(low ((_i2c_status| (0+256)+23)))^(0+128),w
 16158  0B39  00F6               	movwf	??_do_I2C_TX_EMPTY
 16159  0B3A  0876               	movf	??_do_I2C_TX_EMPTY,w
 16160  0B3B  00F6               	movwf	returnReset@p
 16161  0B3C  300B               	movlw	11
 16162  0B3D  3EA0               	addlw	(low (_i2c_status| (0+256)))& (0+255)
 16163  0B3E  0086               	movwf	6
 16164  0B3F  3001               	movlw	1	; select bank3/4
 16165  0B40  0087               	movwf	7
 16166  0B41  3F41               	moviw [1]fsr1
 16167  0B42  008A               	movwf	10
 16168  0B43  3F40               	moviw [0]fsr1
 16169  0B44  000A               	callw
 16170  0B45  318B               	pagesel	$
 16171  0B46  00F7               	movwf	??_do_I2C_TX_EMPTY+1
 16172  0B47  01F8               	clrf	??_do_I2C_TX_EMPTY+2
 16173                           
 16174                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 16175                           ; Switch size 1, requested type "simple"
 16176                           ; Number of cases is 1, Range of values is 0 to 0
 16177                           ; switch strategies available:
 16178                           ; Name         Instructions Cycles
 16179                           ; simple_byte            4     3 (average)
 16180                           ; direct_byte            8     6 (fixed)
 16181                           ; jumptable            260     6 (fixed)
 16182                           ;	Chosen strategy is simple_byte
 16183  0B48  0878               	movf	??_do_I2C_TX_EMPTY+2,w
 16184  0B49  3A00               	xorlw	0	; case 0
 16185  0B4A  1903               	skipnz
 16186  0B4B  2B4D               	goto	i1l8082
 16187  0B4C  2B35               	goto	i1l5060
 16188  0B4D                     i1l8082:	
 16189                           
 16190                           ; Switch size 1, requested type "simple"
 16191                           ; Number of cases is 4, Range of values is 1 to 4
 16192                           ; switch strategies available:
 16193                           ; Name         Instructions Cycles
 16194                           ; simple_byte           13     7 (average)
 16195                           ; direct_byte           17     9 (fixed)
 16196                           ; jumptable            263     9 (fixed)
 16197                           ;	Chosen strategy is simple_byte
 16198  0B4D  0877               	movf	??_do_I2C_TX_EMPTY+1,w
 16199  0B4E  3A01               	xorlw	1	; case 1
 16200  0B4F  1903               	skipnz
 16201  0B50  2B35               	goto	i1l5060
 16202  0B51  3A03               	xorlw	3	; case 2
 16203  0B52  1903               	skipnz
 16204  0B53  2B2E               	goto	i1l5050
 16205  0B54  3A01               	xorlw	1	; case 3
 16206  0B55  1903               	skipnz
 16207  0B56  2B2E               	goto	i1l5050
 16208  0B57  3A07               	xorlw	7	; case 4
 16209  0B58  1903               	skipnz
 16210  0B59  2B31               	goto	i1l5054
 16211  0B5A  2B35               	goto	i1l5060
 16212  0B5B  0008               	return
 16213  0B5C                     __end_of_do_I2C_TX_EMPTY:	
 16214                           
 16215                           	psect	text95
 16216  1683                     __ptext95:	
 16217 ;; *************** function _mssp1_setIRQ *****************
 16218 ;; Defined at:
 16219 ;;		line 58 in file "mcc_generated_files/i2c1_driver.c"
 16220 ;; Parameters:    Size  Location     Type
 16221 ;;		None
 16222 ;; Auto vars:     Size  Location     Type
 16223 ;;		None
 16224 ;; Return value:  Size  Location     Type
 16225 ;;                  1    wreg      void 
 16226 ;; Registers used:
 16227 ;;		None
 16228 ;; Tracked objects:
 16229 ;;		On entry : 0/0
 16230 ;;		On exit  : 0/0
 16231 ;;		Unchanged: 0/0
 16232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16233 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16234 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16235 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16236 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16237 ;;Total ram usage:        0 bytes
 16238 ;; Hardware stack levels used:    1
 16239 ;; This function calls:
 16240 ;;		Nothing
 16241 ;; This function is called by:
 16242 ;;		_do_I2C_TX_EMPTY
 16243 ;; This function uses a non-reentrant model
 16244 ;;
 16245                           
 16246                           
 16247                           ;psect for function _mssp1_setIRQ
 16248  1683                     _mssp1_setIRQ:	
 16249                           
 16250                           ;mcc_generated_files/i2c1_driver.c: 60:     }
 16251                           
 16252                           ;incstack = 0
 16253                           ; Regs used in _mssp1_setIRQ: []
 16254  1683  0020               	movlb	0	; select bank0
 16255  1684  1591               	bsf	17,3	;volatile
 16256  1685  0008               	return
 16257  1686                     __end_of_mssp1_setIRQ:	
 16258                           
 16259                           	psect	text96
 16260  171E                     __ptext96:	
 16261 ;; *************** function _i2c1_driver_isNACK *****************
 16262 ;; Defined at:
 16263 ;;		line 161 in file "mcc_generated_files/i2c1_driver.c"
 16264 ;; Parameters:    Size  Location     Type
 16265 ;;		None
 16266 ;; Auto vars:     Size  Location     Type
 16267 ;;		None
 16268 ;; Return value:  Size  Location     Type
 16269 ;;		None               void
 16270 ;; Registers used:
 16271 ;;		wreg, status,2, status,0
 16272 ;; Tracked objects:
 16273 ;;		On entry : 0/0
 16274 ;;		On exit  : 0/0
 16275 ;;		Unchanged: 0/0
 16276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16277 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16278 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16279 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16280 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16281 ;;Total ram usage:        1 bytes
 16282 ;; Hardware stack levels used:    1
 16283 ;; This function calls:
 16284 ;;		Nothing
 16285 ;; This function is called by:
 16286 ;;		_do_I2C_TX
 16287 ;;		_i2c_ISR
 16288 ;; This function uses a non-reentrant model
 16289 ;;
 16290                           
 16291                           
 16292                           ;psect for function _i2c1_driver_isNACK
 16293  171E                     _i2c1_driver_isNACK:	
 16294                           
 16295                           ;mcc_generated_files/i2c1_driver.c: 163:     return SSP1CON2bits.ACKSTAT;
 16296                           
 16297                           ;incstack = 0
 16298                           ; Regs used in _i2c1_driver_isNACK: [wreg+status,2+status,0]
 16299  171E  0024               	movlb	4	; select bank4
 16300  171F  0E16               	swapf	22,w	;volatile
 16301  1720  0C89               	rrf	9,f
 16302  1721  0C89               	rrf	9,f
 16303  1722  3901               	andlw	1
 16304  1723  00F6               	movwf	??_i2c1_driver_isNACK
 16305  1724  0C76               	rrf	??_i2c1_driver_isNACK,w
 16306  1725  0008               	return
 16307  1726                     __end_of_i2c1_driver_isNACK:	
 16308                           
 16309                           	psect	text97
 16310  16DA                     __ptext97:	
 16311 ;; *************** function i1_i2c1_driver_TXData *****************
 16312 ;; Defined at:
 16313 ;;		line 186 in file "mcc_generated_files/i2c1_driver.c"
 16314 ;; Parameters:    Size  Location     Type
 16315 ;;  d               1    wreg     unsigned char 
 16316 ;; Auto vars:     Size  Location     Type
 16317 ;;  d               1    0[COMMON] unsigned char 
 16318 ;; Return value:  Size  Location     Type
 16319 ;;                  1    wreg      void 
 16320 ;; Registers used:
 16321 ;;		wreg
 16322 ;; Tracked objects:
 16323 ;;		On entry : 0/0
 16324 ;;		On exit  : 0/0
 16325 ;;		Unchanged: 0/0
 16326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16328 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16329 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16330 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16331 ;;Total ram usage:        1 bytes
 16332 ;; Hardware stack levels used:    1
 16333 ;; This function calls:
 16334 ;;		Nothing
 16335 ;; This function is called by:
 16336 ;;		_do_I2C_SEND_ADR_READ
 16337 ;;		_do_I2C_SEND_ADR_WRITE
 16338 ;;		_do_I2C_TX
 16339 ;; This function uses a non-reentrant model
 16340 ;;
 16341                           
 16342                           
 16343                           ;psect for function i1_i2c1_driver_TXData
 16344  16DA                     i1_i2c1_driver_TXData:	
 16345                           
 16346                           ;incstack = 0
 16347                           ; Regs used in i1_i2c1_driver_TXData: [wreg]
 16348                           ;i1i2c1_driver_TXData@d stored from wreg
 16349  16DA  00F6               	movwf	i1i2c1_driver_TXData@d
 16350                           
 16351                           ;mcc_generated_files/i2c1_driver.c: 186: __attribute__((inline)) void i2c1_driver_TXData
      +                          (char d);mcc_generated_files/i2c1_driver.c: 187: {;mcc_generated_files/i2c1_driver.c: 18
      +                          8:     SSP1BUF = d;
 16352  16DB  0876               	movf	i1i2c1_driver_TXData@d,w
 16353  16DC  0024               	movlb	4	; select bank4
 16354  16DD  0091               	movwf	17	;volatile
 16355  16DE  0008               	return
 16356  16DF                     __end_ofi1_i2c1_driver_TXData:	
 16357                           
 16358                           	psect	text98
 16359  1680                     __ptext98:	
 16360 ;; *************** function i1_i2c1_driver_getRXData *****************
 16361 ;; Defined at:
 16362 ;;		line 171 in file "mcc_generated_files/i2c1_driver.c"
 16363 ;; Parameters:    Size  Location     Type
 16364 ;;		None
 16365 ;; Auto vars:     Size  Location     Type
 16366 ;;		None
 16367 ;; Return value:  Size  Location     Type
 16368 ;;                  1    wreg      unsigned char 
 16369 ;; Registers used:
 16370 ;;		wreg
 16371 ;; Tracked objects:
 16372 ;;		On entry : 0/0
 16373 ;;		On exit  : 0/0
 16374 ;;		Unchanged: 0/0
 16375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16376 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16377 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16378 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16379 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16380 ;;Total ram usage:        0 bytes
 16381 ;; Hardware stack levels used:    1
 16382 ;; This function calls:
 16383 ;;		Nothing
 16384 ;; This function is called by:
 16385 ;;		_do_I2C_RX
 16386 ;; This function uses a non-reentrant model
 16387 ;;
 16388                           
 16389                           
 16390                           ;psect for function i1_i2c1_driver_getRXData
 16391  1680                     i1_i2c1_driver_getRXData:	
 16392                           
 16393                           ;mcc_generated_files/i2c1_driver.c: 173:     return SSP1BUF;
 16394                           
 16395                           ;incstack = 0
 16396                           ; Regs used in i1_i2c1_driver_getRXData: [wreg]
 16397  1680  0024               	movlb	4	; select bank4
 16398  1681  0811               	movf	17,w	;volatile
 16399  1682  0008               	return
 16400  1683                     __end_ofi1_i2c1_driver_getRXData:	
 16401                           
 16402                           	psect	text99
 16403  16B2                     __ptext99:	
 16404 ;; *************** function i1_i2c1_driver_sendNACK *****************
 16405 ;; Defined at:
 16406 ;;		line 202 in file "mcc_generated_files/i2c1_driver.c"
 16407 ;; Parameters:    Size  Location     Type
 16408 ;;		None
 16409 ;; Auto vars:     Size  Location     Type
 16410 ;;		None
 16411 ;; Return value:  Size  Location     Type
 16412 ;;                  1    wreg      void 
 16413 ;; Registers used:
 16414 ;;		None
 16415 ;; Tracked objects:
 16416 ;;		On entry : 0/0
 16417 ;;		On exit  : 0/0
 16418 ;;		Unchanged: 0/0
 16419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16420 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16421 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16422 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16423 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16424 ;;Total ram usage:        0 bytes
 16425 ;; Hardware stack levels used:    1
 16426 ;; This function calls:
 16427 ;;		Nothing
 16428 ;; This function is called by:
 16429 ;;		_do_I2C_DO_NACK_STOP
 16430 ;;		_do_I2C_DO_NACK_RESTART
 16431 ;; This function uses a non-reentrant model
 16432 ;;
 16433                           
 16434                           
 16435                           ;psect for function i1_i2c1_driver_sendNACK
 16436  16B2                     i1_i2c1_driver_sendNACK:	
 16437                           
 16438                           ;mcc_generated_files/i2c1_driver.c: 204:     SSP1CON2bits.ACKDT = 1;
 16439                           
 16440                           ;incstack = 0
 16441                           ; Regs used in i1_i2c1_driver_sendNACK: []
 16442  16B2  0024               	movlb	4	; select bank4
 16443  16B3  1696               	bsf	22,5	;volatile
 16444                           
 16445                           ;mcc_generated_files/i2c1_driver.c: 205:     SSP1CON2bits.ACKEN = 1;
 16446  16B4  1616               	bsf	22,4	;volatile
 16447  16B5  0008               	return
 16448  16B6                     __end_ofi1_i2c1_driver_sendNACK:	
 16449                           
 16450                           	psect	text100
 16451  1670                     __ptext100:	
 16452 ;; *************** function _i2c1_driver_resetBus *****************
 16453 ;; Defined at:
 16454 ;;		line 141 in file "mcc_generated_files/i2c1_driver.c"
 16455 ;; Parameters:    Size  Location     Type
 16456 ;;		None
 16457 ;; Auto vars:     Size  Location     Type
 16458 ;;		None
 16459 ;; Return value:  Size  Location     Type
 16460 ;;                  1    wreg      void 
 16461 ;; Registers used:
 16462 ;;		None
 16463 ;; Tracked objects:
 16464 ;;		On entry : 0/0
 16465 ;;		On exit  : 0/0
 16466 ;;		Unchanged: 0/0
 16467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16468 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16469 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16470 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16471 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16472 ;;Total ram usage:        0 bytes
 16473 ;; Hardware stack levels used:    1
 16474 ;; This function calls:
 16475 ;;		Nothing
 16476 ;; This function is called by:
 16477 ;;		_do_I2C_RESET
 16478 ;; This function uses a non-reentrant model
 16479 ;;
 16480                           
 16481                           
 16482                           ;psect for function _i2c1_driver_resetBus
 16483  1670                     _i2c1_driver_resetBus:	
 16484                           
 16485                           ;incstack = 0
 16486                           ; Regs used in _i2c1_driver_resetBus: []
 16487  1670  0008               	return
 16488  1671                     __end_of_i2c1_driver_resetBus:	
 16489                           
 16490                           	psect	text101
 16491  167D                     __ptext101:	
 16492 ;; *************** function i1_i2c1_driver_startRX *****************
 16493 ;; Defined at:
 16494 ;;		line 166 in file "mcc_generated_files/i2c1_driver.c"
 16495 ;; Parameters:    Size  Location     Type
 16496 ;;		None
 16497 ;; Auto vars:     Size  Location     Type
 16498 ;;		None
 16499 ;; Return value:  Size  Location     Type
 16500 ;;                  1    wreg      void 
 16501 ;; Registers used:
 16502 ;;		None
 16503 ;; Tracked objects:
 16504 ;;		On entry : 0/0
 16505 ;;		On exit  : 0/0
 16506 ;;		Unchanged: 0/0
 16507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16508 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16509 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16510 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16511 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16512 ;;Total ram usage:        0 bytes
 16513 ;; Hardware stack levels used:    1
 16514 ;; This function calls:
 16515 ;;		Nothing
 16516 ;; This function is called by:
 16517 ;;		_do_I2C_RCEN
 16518 ;; This function uses a non-reentrant model
 16519 ;;
 16520                           
 16521                           
 16522                           ;psect for function i1_i2c1_driver_startRX
 16523  167D                     i1_i2c1_driver_startRX:	
 16524                           
 16525                           ;mcc_generated_files/i2c1_driver.c: 168:     SSP1CON2bits.RCEN = 1;
 16526                           
 16527                           ;incstack = 0
 16528                           ; Regs used in i1_i2c1_driver_startRX: []
 16529  167D  0024               	movlb	4	; select bank4
 16530  167E  1596               	bsf	22,3	;volatile
 16531  167F  0008               	return
 16532  1680                     __end_ofi1_i2c1_driver_startRX:	
 16533                           
 16534                           	psect	text102
 16535  0002                     __ptext102:	
 16536 ;; *************** function _returnReset *****************
 16537 ;; Defined at:
 16538 ;;		line 448 in file "mcc_generated_files/drivers/i2c_master.c"
 16539 ;; Parameters:    Size  Location     Type
 16540 ;;  p               1    0[COMMON] PTR void 
 16541 ;;		 -> NULL(0), 
 16542 ;; Auto vars:     Size  Location     Type
 16543 ;;		None
 16544 ;; Return value:  Size  Location     Type
 16545 ;;                  1    wreg      enum E6966
 16546 ;; Registers used:
 16547 ;;		wreg
 16548 ;; Tracked objects:
 16549 ;;		On entry : 0/0
 16550 ;;		On exit  : 0/0
 16551 ;;		Unchanged: 0/0
 16552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16553 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16554 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16555 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16556 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16557 ;;Total ram usage:        1 bytes
 16558 ;; Hardware stack levels used:    1
 16559 ;; This function calls:
 16560 ;;		Nothing
 16561 ;; This function is called by:
 16562 ;;		_i2c_open
 16563 ;;		_do_I2C_DO_ADDRESS_NACK
 16564 ;;		_do_I2C_TX
 16565 ;;		_do_I2C_RX
 16566 ;;		_do_I2C_TX_EMPTY
 16567 ;; This function uses a non-reentrant model
 16568 ;;
 16569                           
 16570                           
 16571                           ;psect for function _returnReset
 16572  0002                     _returnReset:	
 16573                           
 16574                           ;mcc_generated_files/drivers/i2c_master.c: 448: static i2c_operations_t returnReset(void
      +                           *p);mcc_generated_files/drivers/i2c_master.c: 449: {;mcc_generated_files/drivers/i2c_ma
      +                          ster.c: 450:     return i2c_reset_link;
 16575                           
 16576                           ;incstack = 0
 16577                           ; Regs used in _returnReset: [wreg]
 16578  0002  3005               	movlw	5
 16579  0003  0008               	return
 16580  0004                     __end_of_returnReset:	
 16581                           
 16582                           	psect	text103
 16583  1672                     __ptext103:	
 16584 ;; *************** function _returnStop *****************
 16585 ;; Defined at:
 16586 ;;		line 443 in file "mcc_generated_files/drivers/i2c_master.c"
 16587 ;; Parameters:    Size  Location     Type
 16588 ;;  p               1    0[COMMON] PTR void 
 16589 ;;		 -> NULL(0), 
 16590 ;; Auto vars:     Size  Location     Type
 16591 ;;		None
 16592 ;; Return value:  Size  Location     Type
 16593 ;;                  1    wreg      enum E6966
 16594 ;; Registers used:
 16595 ;;		wreg
 16596 ;; Tracked objects:
 16597 ;;		On entry : 0/0
 16598 ;;		On exit  : 0/0
 16599 ;;		Unchanged: 0/0
 16600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16601 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16602 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16603 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16604 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16605 ;;Total ram usage:        1 bytes
 16606 ;; Hardware stack levels used:    1
 16607 ;; This function calls:
 16608 ;;		Nothing
 16609 ;; This function is called by:
 16610 ;;		_i2c_open
 16611 ;;		_setCallBack
 16612 ;;		_do_I2C_DO_ADDRESS_NACK
 16613 ;;		_do_I2C_TX
 16614 ;;		_do_I2C_RX
 16615 ;;		_do_I2C_TX_EMPTY
 16616 ;; This function uses a non-reentrant model
 16617 ;;
 16618                           
 16619                           
 16620                           ;psect for function _returnStop
 16621  1672                     _returnStop:	
 16622                           
 16623                           ;mcc_generated_files/drivers/i2c_master.c: 443: static i2c_operations_t returnStop(void 
      +                          *p);mcc_generated_files/drivers/i2c_master.c: 444: {;mcc_generated_files/drivers/i2c_mas
      +                          ter.c: 445:     return i2c_stop;
 16624                           
 16625                           ;incstack = 0
 16626                           ; Regs used in _returnStop: [wreg]
 16627  1672  3001               	movlw	1
 16628  1673  0008               	return
 16629  1674                     __end_of_returnStop:	
 16630                           
 16631                           	psect	text104
 16632  167A                     __ptext104:	
 16633 ;; *************** function i1_i2c1_driver_stop *****************
 16634 ;; Defined at:
 16635 ;;		line 156 in file "mcc_generated_files/i2c1_driver.c"
 16636 ;; Parameters:    Size  Location     Type
 16637 ;;		None
 16638 ;; Auto vars:     Size  Location     Type
 16639 ;;		None
 16640 ;; Return value:  Size  Location     Type
 16641 ;;                  1    wreg      void 
 16642 ;; Registers used:
 16643 ;;		None
 16644 ;; Tracked objects:
 16645 ;;		On entry : 0/0
 16646 ;;		On exit  : 0/0
 16647 ;;		Unchanged: 0/0
 16648 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16649 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16650 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16651 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16652 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16653 ;;Total ram usage:        0 bytes
 16654 ;; Hardware stack levels used:    1
 16655 ;; This function calls:
 16656 ;;		Nothing
 16657 ;; This function is called by:
 16658 ;;		_do_I2C_SEND_STOP
 16659 ;; This function uses a non-reentrant model
 16660 ;;
 16661                           
 16662                           
 16663                           ;psect for function i1_i2c1_driver_stop
 16664  167A                     i1_i2c1_driver_stop:	
 16665                           
 16666                           ;mcc_generated_files/i2c1_driver.c: 158:     SSP1CON2bits.PEN = 1;
 16667                           
 16668                           ;incstack = 0
 16669                           ; Regs used in i1_i2c1_driver_stop: []
 16670  167A  0024               	movlb	4	; select bank4
 16671  167B  1516               	bsf	22,2	;volatile
 16672  167C  0008               	return
 16673  167D                     __end_ofi1_i2c1_driver_stop:	
 16674                           
 16675                           	psect	text105
 16676  1677                     __ptext105:	
 16677 ;; *************** function i1_i2c1_driver_restart *****************
 16678 ;; Defined at:
 16679 ;;		line 151 in file "mcc_generated_files/i2c1_driver.c"
 16680 ;; Parameters:    Size  Location     Type
 16681 ;;		None
 16682 ;; Auto vars:     Size  Location     Type
 16683 ;;		None
 16684 ;; Return value:  Size  Location     Type
 16685 ;;                  1    wreg      void 
 16686 ;; Registers used:
 16687 ;;		None
 16688 ;; Tracked objects:
 16689 ;;		On entry : 0/0
 16690 ;;		On exit  : 0/0
 16691 ;;		Unchanged: 0/0
 16692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16693 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16694 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16695 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16696 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16697 ;;Total ram usage:        0 bytes
 16698 ;; Hardware stack levels used:    1
 16699 ;; This function calls:
 16700 ;;		Nothing
 16701 ;; This function is called by:
 16702 ;;		_do_I2C_SEND_RESTART_READ
 16703 ;;		_do_I2C_SEND_RESTART_WRITE
 16704 ;;		_do_I2C_SEND_RESTART
 16705 ;; This function uses a non-reentrant model
 16706 ;;
 16707                           
 16708                           
 16709                           ;psect for function i1_i2c1_driver_restart
 16710  1677                     i1_i2c1_driver_restart:	
 16711                           
 16712                           ;mcc_generated_files/i2c1_driver.c: 153:     SSP1CON2bits.RSEN = 1;
 16713                           
 16714                           ;incstack = 0
 16715                           ; Regs used in i1_i2c1_driver_restart: []
 16716  1677  0024               	movlb	4	; select bank4
 16717  1678  1496               	bsf	22,1	;volatile
 16718  1679  0008               	return
 16719  167A                     __end_ofi1_i2c1_driver_restart:	
 16720                           
 16721                           	psect	text106
 16722  16AE                     __ptext106:	
 16723 ;; *************** function _i2c1_driver_sendACK *****************
 16724 ;; Defined at:
 16725 ;;		line 196 in file "mcc_generated_files/i2c1_driver.c"
 16726 ;; Parameters:    Size  Location     Type
 16727 ;;		None
 16728 ;; Auto vars:     Size  Location     Type
 16729 ;;		None
 16730 ;; Return value:  Size  Location     Type
 16731 ;;                  1    wreg      void 
 16732 ;; Registers used:
 16733 ;;		None
 16734 ;; Tracked objects:
 16735 ;;		On entry : 0/0
 16736 ;;		On exit  : 0/0
 16737 ;;		Unchanged: 0/0
 16738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16740 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16741 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16742 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16743 ;;Total ram usage:        0 bytes
 16744 ;; Hardware stack levels used:    1
 16745 ;; This function calls:
 16746 ;;		Nothing
 16747 ;; This function is called by:
 16748 ;;		_do_I2C_DO_ACK
 16749 ;;		_do_I2C_RX
 16750 ;;		_I2C_Send_ACK
 16751 ;; This function uses a non-reentrant model
 16752 ;;
 16753                           
 16754                           
 16755                           ;psect for function _i2c1_driver_sendACK
 16756  16AE                     _i2c1_driver_sendACK:	
 16757                           
 16758                           ;mcc_generated_files/i2c1_driver.c: 198:     SSP1CON2bits.ACKDT = 0;
 16759                           
 16760                           ;incstack = 0
 16761                           ; Regs used in _i2c1_driver_sendACK: []
 16762  16AE  0024               	movlb	4	; select bank4
 16763  16AF  1296               	bcf	22,5	;volatile
 16764                           
 16765                           ;mcc_generated_files/i2c1_driver.c: 199:     SSP1CON2bits.ACKEN = 1;
 16766  16B0  1616               	bsf	22,4	;volatile
 16767  16B1  0008               	return
 16768  16B2                     __end_of_i2c1_driver_sendACK:	
 16769                           
 16770                           	psect	text107
 16771  16E4                     __ptext107:	
 16772 ;; *************** function _PIN_MANAGER_IOC *****************
 16773 ;; Defined at:
 16774 ;;		line 132 in file "mcc_generated_files/pin_manager.c"
 16775 ;; Parameters:    Size  Location     Type
 16776 ;;		None
 16777 ;; Auto vars:     Size  Location     Type
 16778 ;;		None
 16779 ;; Return value:  Size  Location     Type
 16780 ;;                  1    wreg      void 
 16781 ;; Registers used:
 16782 ;;		wreg, status,2, status,0, pclath, cstack
 16783 ;; Tracked objects:
 16784 ;;		On entry : 0/0
 16785 ;;		On exit  : 0/0
 16786 ;;		Unchanged: 0/0
 16787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16788 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16789 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16790 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16791 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16792 ;;Total ram usage:        0 bytes
 16793 ;; Hardware stack levels used:    1
 16794 ;; Hardware stack levels required when called:    2
 16795 ;; This function calls:
 16796 ;;		_IOCAF4_ISR
 16797 ;; This function is called by:
 16798 ;;		_INTERRUPT_InterruptManager
 16799 ;; This function uses a non-reentrant model
 16800 ;;
 16801                           
 16802                           
 16803                           ;psect for function _PIN_MANAGER_IOC
 16804  16E4                     _PIN_MANAGER_IOC:	
 16805                           
 16806                           ;mcc_generated_files/pin_manager.c: 135:     if(IOCAFbits.IOCAF4 == 1)
 16807                           
 16808                           ;incstack = 0
 16809                           ; Regs used in _PIN_MANAGER_IOC: [wreg+status,2+status,0+pclath+cstack]
 16810  16E4  0027               	movlb	7	; select bank7
 16811  16E5  1E13               	btfss	19,4	;volatile
 16812  16E6  0008               	return
 16813                           
 16814                           ;mcc_generated_files/pin_manager.c: 136:     {;mcc_generated_files/pin_manager.c: 137:  
      +                                 IOCAF4_ISR();
 16815  16E7  3197  27B6         	fcall	_IOCAF4_ISR
 16816  16E9  0008               	return
 16817  16EA                     __end_of_PIN_MANAGER_IOC:	
 16818                           
 16819                           	psect	text108
 16820  17B6                     __ptext108:	
 16821 ;; *************** function _IOCAF4_ISR *****************
 16822 ;; Defined at:
 16823 ;;		line 144 in file "mcc_generated_files/pin_manager.c"
 16824 ;; Parameters:    Size  Location     Type
 16825 ;;		None
 16826 ;; Auto vars:     Size  Location     Type
 16827 ;;		None
 16828 ;; Return value:  Size  Location     Type
 16829 ;;                  1    wreg      void 
 16830 ;; Registers used:
 16831 ;;		wreg, status,2, status,0, pclath, cstack
 16832 ;; Tracked objects:
 16833 ;;		On entry : 0/0
 16834 ;;		On exit  : 0/0
 16835 ;;		Unchanged: 0/0
 16836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16838 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16839 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16840 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16841 ;;Total ram usage:        0 bytes
 16842 ;; Hardware stack levels used:    1
 16843 ;; Hardware stack levels required when called:    1
 16844 ;; This function calls:
 16845 ;;		Absolute function
 16846 ;;		_IOCAF4_DefaultInterruptHandler
 16847 ;; This function is called by:
 16848 ;;		_PIN_MANAGER_IOC
 16849 ;; This function uses a non-reentrant model
 16850 ;;
 16851                           
 16852                           
 16853                           ;psect for function _IOCAF4_ISR
 16854  17B6                     _IOCAF4_ISR:	
 16855                           
 16856                           ;mcc_generated_files/pin_manager.c: 149:     if(IOCAF4_InterruptHandler)
 16857                           
 16858                           ;incstack = 0
 16859                           ; Regs used in _IOCAF4_ISR: [wreg+status,2+status,0+pclath+cstack]
 16860  17B6  0021               	movlb	1	; select bank1
 16861  17B7  086C               	movf	_IOCAF4_InterruptHandler^(0+128),w
 16862  17B8  046D               	iorwf	(_IOCAF4_InterruptHandler+1)^(0+128),w
 16863  17B9  1903               	btfsc	3,2
 16864  17BA  2FC0               	goto	i1l5200
 16865                           
 16866                           ;mcc_generated_files/pin_manager.c: 150:     {;mcc_generated_files/pin_manager.c: 151:  
      +                                 IOCAF4_InterruptHandler();
 16867  17BB  086D               	movf	(_IOCAF4_InterruptHandler+1)^(0+128),w
 16868  17BC  008A               	movwf	10
 16869  17BD  086C               	movf	_IOCAF4_InterruptHandler^(0+128),w
 16870  17BE  000A               	callw
 16871  17BF  3197               	pagesel	$
 16872  17C0                     i1l5200:	
 16873                           
 16874                           ;mcc_generated_files/pin_manager.c: 153:     IOCAFbits.IOCAF4 = 0;
 16875  17C0  0027               	movlb	7	; select bank7
 16876  17C1  1213               	bcf	19,4	;volatile
 16877  17C2  0008               	return
 16878  17C3                     __end_of_IOCAF4_ISR:	
 16879                           
 16880                           	psect	text109
 16881  166F                     __ptext109:	
 16882 ;; *************** function _IOCAF4_DefaultInterruptHandler *****************
 16883 ;; Defined at:
 16884 ;;		line 166 in file "mcc_generated_files/pin_manager.c"
 16885 ;; Parameters:    Size  Location     Type
 16886 ;;		None
 16887 ;; Auto vars:     Size  Location     Type
 16888 ;;		None
 16889 ;; Return value:  Size  Location     Type
 16890 ;;                  1    wreg      void 
 16891 ;; Registers used:
 16892 ;;		None
 16893 ;; Tracked objects:
 16894 ;;		On entry : 0/0
 16895 ;;		On exit  : 0/0
 16896 ;;		Unchanged: 0/0
 16897 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16898 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16899 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16900 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16901 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16902 ;;Total ram usage:        0 bytes
 16903 ;; Hardware stack levels used:    1
 16904 ;; This function calls:
 16905 ;;		Nothing
 16906 ;; This function is called by:
 16907 ;;		_PIN_MANAGER_Initialize
 16908 ;;		_IOCAF4_ISR
 16909 ;; This function uses a non-reentrant model
 16910 ;;
 16911                           
 16912                           
 16913                           ;psect for function _IOCAF4_DefaultInterruptHandler
 16914  166F                     _IOCAF4_DefaultInterruptHandler:	
 16915                           
 16916                           ;incstack = 0
 16917                           ; Regs used in _IOCAF4_DefaultInterruptHandler: []
 16918  166F  0008               	return
 16919  1670                     __end_of_IOCAF4_DefaultInterruptHandler:	
 16920                           
 16921                           	psect	text110
 16922  0943                     __ptext110:	
 16923 ;; *************** function _EUSART_Transmit_ISR *****************
 16924 ;; Defined at:
 16925 ;;		line 205 in file "mcc_generated_files/eusart.c"
 16926 ;; Parameters:    Size  Location     Type
 16927 ;;		None
 16928 ;; Auto vars:     Size  Location     Type
 16929 ;;		None
 16930 ;; Return value:  Size  Location     Type
 16931 ;;                  1    wreg      void 
 16932 ;; Registers used:
 16933 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16934 ;; Tracked objects:
 16935 ;;		On entry : 0/0
 16936 ;;		On exit  : 0/0
 16937 ;;		Unchanged: 0/0
 16938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16939 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16940 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16941 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16942 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16943 ;;Total ram usage:        1 bytes
 16944 ;; Hardware stack levels used:    1
 16945 ;; This function calls:
 16946 ;;		Nothing
 16947 ;; This function is called by:
 16948 ;;		_EUSART_Initialize
 16949 ;;		_INTERRUPT_InterruptManager
 16950 ;; This function uses a non-reentrant model
 16951 ;;
 16952                           
 16953                           
 16954                           ;psect for function _EUSART_Transmit_ISR
 16955  0943                     _EUSART_Transmit_ISR:	
 16956                           
 16957                           ;mcc_generated_files/eusart.c: 209:     if(sizeof(eusartTxBuffer) > eusartTxBufferRemain
      +                          ing)
 16958                           
 16959                           ;incstack = 0
 16960                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 16961  0943  3008               	movlw	8
 16962  0944  0020               	movlb	0	; select bank0
 16963  0945  026E               	subwf	_eusartTxBufferRemaining,w	;volatile
 16964  0946  1803               	skipnc
 16965  0947  295E               	goto	i1l1420
 16966                           
 16967                           ;mcc_generated_files/eusart.c: 210:     {;mcc_generated_files/eusart.c: 211:         TX1
      +                          REG = eusartTxBuffer[eusartTxTail++];
 16968  0948  0873               	movf	_eusartTxTail,w
 16969  0949  3ECD               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
 16970  094A  0086               	movwf	6
 16971  094B  3001               	movlw	1	; select bank3/4
 16972  094C  0087               	movwf	7
 16973  094D  0801               	movf	1,w
 16974  094E  0023               	movlb	3	; select bank3
 16975  094F  009A               	movwf	26	;volatile
 16976  0950  3001               	movlw	1
 16977  0951  00F6               	movwf	??_EUSART_Transmit_ISR
 16978  0952  0876               	movf	??_EUSART_Transmit_ISR,w
 16979  0953  07F3               	addwf	_eusartTxTail,f	;volatile
 16980                           
 16981                           ;mcc_generated_files/eusart.c: 212:         if(sizeof(eusartTxBuffer) <= eusartTxTail)
 16982  0954  3008               	movlw	8
 16983  0955  0273               	subwf	_eusartTxTail,w	;volatile
 16984  0956  1803               	btfsc	3,0
 16985                           
 16986                           ;mcc_generated_files/eusart.c: 213:         {;mcc_generated_files/eusart.c: 214:        
      +                               eusartTxTail = 0;
 16987  0957  01F3               	clrf	_eusartTxTail	;volatile
 16988                           
 16989                           ;mcc_generated_files/eusart.c: 216:         eusartTxBufferRemaining++;
 16990  0958  3001               	movlw	1
 16991  0959  00F6               	movwf	??_EUSART_Transmit_ISR
 16992  095A  0876               	movf	??_EUSART_Transmit_ISR,w
 16993  095B  0020               	movlb	0	; select bank0
 16994  095C  07EE               	addwf	_eusartTxBufferRemaining,f	;volatile
 16995                           
 16996                           ;mcc_generated_files/eusart.c: 217:     }
 16997  095D  0008               	return
 16998  095E                     i1l1420:	
 16999                           ;mcc_generated_files/eusart.c: 218:     else
 17000                           
 17001                           
 17002                           ;mcc_generated_files/eusart.c: 219:     {;mcc_generated_files/eusart.c: 220:         PIE
      +                          1bits.TXIE = 0;
 17003  095E  0021               	movlb	1	; select bank1
 17004  095F  1211               	bcf	17,4	;volatile
 17005  0960  0008               	return
 17006  0961                     __end_of_EUSART_Transmit_ISR:	
 17007                           
 17008                           	psect	text111
 17009  0BF2                     __ptext111:	
 17010 ;; *************** function _EUSART_Receive_ISR *****************
 17011 ;; Defined at:
 17012 ;;		line 224 in file "mcc_generated_files/eusart.c"
 17013 ;; Parameters:    Size  Location     Type
 17014 ;;		None
 17015 ;; Auto vars:     Size  Location     Type
 17016 ;;		None
 17017 ;; Return value:  Size  Location     Type
 17018 ;;                  1    wreg      void 
 17019 ;; Registers used:
 17020 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17021 ;; Tracked objects:
 17022 ;;		On entry : 0/0
 17023 ;;		On exit  : 0/0
 17024 ;;		Unchanged: 0/0
 17025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17026 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17027 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17029 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17030 ;;Total ram usage:        0 bytes
 17031 ;; Hardware stack levels used:    1
 17032 ;; Hardware stack levels required when called:    2
 17033 ;; This function calls:
 17034 ;;		Absolute function
 17035 ;;		_EUSART_DefaultErrorHandler
 17036 ;;		_EUSART_DefaultFramingErrorHandler
 17037 ;;		_EUSART_DefaultOverrunErrorHandler
 17038 ;;		_EUSART_RxDataHandler
 17039 ;; This function is called by:
 17040 ;;		_EUSART_Initialize
 17041 ;;		_INTERRUPT_InterruptManager
 17042 ;; This function uses a non-reentrant model
 17043 ;;
 17044                           
 17045                           
 17046                           ;psect for function _EUSART_Receive_ISR
 17047  0BF2                     _EUSART_Receive_ISR:	
 17048                           
 17049                           ;mcc_generated_files/eusart.c: 227:     eusartRxStatusBuffer[eusartRxHead].status = 0;
 17050                           
 17051                           ;incstack = 0
 17052                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17053  0BF2  0872               	movf	_eusartRxHead,w	;volatile
 17054  0BF3  3EBD               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 17055  0BF4  0086               	movwf	6
 17056  0BF5  3001               	movlw	1	; select bank3/4
 17057  0BF6  0087               	movwf	7
 17058  0BF7  0181               	clrf	1
 17059                           
 17060                           ;mcc_generated_files/eusart.c: 229:     if(RC1STAbits.FERR){
 17061  0BF8  0023               	movlb	3	; select bank3
 17062  0BF9  1D1D               	btfss	29,2	;volatile
 17063  0BFA  2C07               	goto	i1l6020
 17064                           
 17065                           ;mcc_generated_files/eusart.c: 230:         eusartRxStatusBuffer[eusartRxHead].ferr = 1;
 17066  0BFB  0872               	movf	_eusartRxHead,w	;volatile
 17067  0BFC  3EBD               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 17068  0BFD  0086               	movwf	6
 17069  0BFE  3001               	movlw	1	; select bank3/4
 17070  0BFF  0087               	movwf	7
 17071  0C00  1481               	bsf	1,1
 17072                           
 17073                           ;mcc_generated_files/eusart.c: 231:         EUSART_FramingErrorHandler();
 17074  0C01  0022               	movlb	2	; select bank2
 17075  0C02  086B               	movf	(_EUSART_FramingErrorHandler+1)^(0+256),w
 17076  0C03  008A               	movwf	10
 17077  0C04  086A               	movf	_EUSART_FramingErrorHandler^(0+256),w
 17078  0C05  000A               	callw
 17079  0C06  318B               	pagesel	$
 17080  0C07                     i1l6020:	
 17081                           
 17082                           ;mcc_generated_files/eusart.c: 234:     if(RC1STAbits.OERR){
 17083  0C07  0023               	movlb	3	; select bank3
 17084  0C08  1C9D               	btfss	29,1	;volatile
 17085  0C09  2C16               	goto	i1l6026
 17086                           
 17087                           ;mcc_generated_files/eusart.c: 235:         eusartRxStatusBuffer[eusartRxHead].oerr = 1;
 17088  0C0A  0872               	movf	_eusartRxHead,w	;volatile
 17089  0C0B  3EBD               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 17090  0C0C  0086               	movwf	6
 17091  0C0D  3001               	movlw	1	; select bank3/4
 17092  0C0E  0087               	movwf	7
 17093  0C0F  1501               	bsf	1,2
 17094                           
 17095                           ;mcc_generated_files/eusart.c: 236:         EUSART_OverrunErrorHandler();
 17096  0C10  0022               	movlb	2	; select bank2
 17097  0C11  0869               	movf	(_EUSART_OverrunErrorHandler+1)^(0+256),w
 17098  0C12  008A               	movwf	10
 17099  0C13  0868               	movf	_EUSART_OverrunErrorHandler^(0+256),w
 17100  0C14  000A               	callw
 17101  0C15  318B               	pagesel	$
 17102  0C16                     i1l6026:	
 17103                           
 17104                           ;mcc_generated_files/eusart.c: 239:     if(eusartRxStatusBuffer[eusartRxHead].status){
 17105  0C16  0872               	movf	_eusartRxHead,w	;volatile
 17106  0C17  3EBD               	addlw	(low (_eusartRxStatusBuffer| (0+256)))& (0+255)
 17107  0C18  0086               	movwf	6
 17108  0C19  3001               	movlw	1	; select bank3/4
 17109  0C1A  0087               	movwf	7
 17110  0C1B  0801               	movf	1,w
 17111  0C1C  1903               	btfsc	3,2
 17112  0C1D  2C25               	goto	i1l6030
 17113                           
 17114                           ;mcc_generated_files/eusart.c: 240:         EUSART_ErrorHandler();
 17115  0C1E  0023               	movlb	3	; select bank3
 17116  0C1F  085B               	movf	(_EUSART_ErrorHandler+1)^(0+384),w
 17117  0C20  008A               	movwf	10
 17118  0C21  085A               	movf	_EUSART_ErrorHandler^(0+384),w
 17119  0C22  000A               	callw
 17120  0C23  318B               	pagesel	$
 17121                           
 17122                           ;mcc_generated_files/eusart.c: 241:     } else {
 17123  0C24  0008               	return
 17124  0C25                     i1l6030:	
 17125                           
 17126                           ;mcc_generated_files/eusart.c: 242:         EUSART_RxDataHandler();
 17127  0C25  3188  2061         	fcall	_EUSART_RxDataHandler
 17128  0C27  0008               	return
 17129  0C28                     __end_of_EUSART_Receive_ISR:	
 17130                           
 17131                           	psect	text112
 17132  16AA                     __ptext112:	
 17133 ;; *************** function _EUSART_DefaultOverrunErrorHandler *****************
 17134 ;; Defined at:
 17135 ;;		line 260 in file "mcc_generated_files/eusart.c"
 17136 ;; Parameters:    Size  Location     Type
 17137 ;;		None
 17138 ;; Auto vars:     Size  Location     Type
 17139 ;;		None
 17140 ;; Return value:  Size  Location     Type
 17141 ;;                  1    wreg      void 
 17142 ;; Registers used:
 17143 ;;		None
 17144 ;; Tracked objects:
 17145 ;;		On entry : 0/0
 17146 ;;		On exit  : 0/0
 17147 ;;		Unchanged: 0/0
 17148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17149 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17150 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17151 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17152 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17153 ;;Total ram usage:        0 bytes
 17154 ;; Hardware stack levels used:    1
 17155 ;; This function calls:
 17156 ;;		Nothing
 17157 ;; This function is called by:
 17158 ;;		_EUSART_Initialize
 17159 ;;		_EUSART_Receive_ISR
 17160 ;; This function uses a non-reentrant model
 17161 ;;
 17162                           
 17163                           
 17164                           ;psect for function _EUSART_DefaultOverrunErrorHandler
 17165  16AA                     _EUSART_DefaultOverrunErrorHandler:	
 17166                           
 17167                           ;mcc_generated_files/eusart.c: 263:     RC1STAbits.CREN = 0;
 17168                           
 17169                           ;incstack = 0
 17170                           ; Regs used in _EUSART_DefaultOverrunErrorHandler: []
 17171  16AA  0023               	movlb	3	; select bank3
 17172  16AB  121D               	bcf	29,4	;volatile
 17173                           
 17174                           ;mcc_generated_files/eusart.c: 264:     RC1STAbits.CREN = 1;
 17175  16AC  161D               	bsf	29,4	;volatile
 17176  16AD  0008               	return
 17177  16AE                     __end_of_EUSART_DefaultOverrunErrorHandler:	
 17178                           
 17179                           	psect	text113
 17180  166E                     __ptext113:	
 17181 ;; *************** function _EUSART_DefaultFramingErrorHandler *****************
 17182 ;; Defined at:
 17183 ;;		line 258 in file "mcc_generated_files/eusart.c"
 17184 ;; Parameters:    Size  Location     Type
 17185 ;;		None
 17186 ;; Auto vars:     Size  Location     Type
 17187 ;;		None
 17188 ;; Return value:  Size  Location     Type
 17189 ;;                  1    wreg      void 
 17190 ;; Registers used:
 17191 ;;		None
 17192 ;; Tracked objects:
 17193 ;;		On entry : 0/0
 17194 ;;		On exit  : 0/0
 17195 ;;		Unchanged: 0/0
 17196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17197 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17198 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17199 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17200 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17201 ;;Total ram usage:        0 bytes
 17202 ;; Hardware stack levels used:    1
 17203 ;; This function calls:
 17204 ;;		Nothing
 17205 ;; This function is called by:
 17206 ;;		_EUSART_Initialize
 17207 ;;		_EUSART_Receive_ISR
 17208 ;; This function uses a non-reentrant model
 17209 ;;
 17210                           
 17211                           
 17212                           ;psect for function _EUSART_DefaultFramingErrorHandler
 17213  166E                     _EUSART_DefaultFramingErrorHandler:	
 17214                           
 17215                           ;incstack = 0
 17216                           ; Regs used in _EUSART_DefaultFramingErrorHandler: []
 17217  166E  0008               	return
 17218  166F                     __end_of_EUSART_DefaultFramingErrorHandler:	
 17219                           
 17220                           	psect	text114
 17221  1674                     __ptext114:	
 17222 ;; *************** function _EUSART_DefaultErrorHandler *****************
 17223 ;; Defined at:
 17224 ;;		line 268 in file "mcc_generated_files/eusart.c"
 17225 ;; Parameters:    Size  Location     Type
 17226 ;;		None
 17227 ;; Auto vars:     Size  Location     Type
 17228 ;;		None
 17229 ;; Return value:  Size  Location     Type
 17230 ;;                  1    wreg      void 
 17231 ;; Registers used:
 17232 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17233 ;; Tracked objects:
 17234 ;;		On entry : 0/0
 17235 ;;		On exit  : 0/0
 17236 ;;		Unchanged: 0/0
 17237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17239 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17240 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17241 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17242 ;;Total ram usage:        0 bytes
 17243 ;; Hardware stack levels used:    1
 17244 ;; Hardware stack levels required when called:    1
 17245 ;; This function calls:
 17246 ;;		_EUSART_RxDataHandler
 17247 ;; This function is called by:
 17248 ;;		_EUSART_Initialize
 17249 ;;		_EUSART_Receive_ISR
 17250 ;; This function uses a non-reentrant model
 17251 ;;
 17252                           
 17253                           
 17254                           ;psect for function _EUSART_DefaultErrorHandler
 17255  1674                     _EUSART_DefaultErrorHandler:	
 17256                           
 17257                           ;mcc_generated_files/eusart.c: 269:     EUSART_RxDataHandler();
 17258                           
 17259                           ;incstack = 0
 17260                           ; Regs used in _EUSART_DefaultErrorHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 17261  1674  3188  2061         	fcall	_EUSART_RxDataHandler
 17262  1676  0008               	return
 17263  1677                     __end_of_EUSART_DefaultErrorHandler:	
 17264                           
 17265                           	psect	text115
 17266  0861                     __ptext115:	
 17267 ;; *************** function _EUSART_RxDataHandler *****************
 17268 ;; Defined at:
 17269 ;;		line 248 in file "mcc_generated_files/eusart.c"
 17270 ;; Parameters:    Size  Location     Type
 17271 ;;		None
 17272 ;; Auto vars:     Size  Location     Type
 17273 ;;		None
 17274 ;; Return value:  Size  Location     Type
 17275 ;;                  1    wreg      void 
 17276 ;; Registers used:
 17277 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 17278 ;; Tracked objects:
 17279 ;;		On entry : 0/0
 17280 ;;		On exit  : 0/0
 17281 ;;		Unchanged: 0/0
 17282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17283 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17284 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17285 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17286 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17287 ;;Total ram usage:        1 bytes
 17288 ;; Hardware stack levels used:    1
 17289 ;; This function calls:
 17290 ;;		Nothing
 17291 ;; This function is called by:
 17292 ;;		_EUSART_Receive_ISR
 17293 ;;		_EUSART_DefaultErrorHandler
 17294 ;; This function uses a non-reentrant model
 17295 ;;
 17296                           
 17297                           
 17298                           ;psect for function _EUSART_RxDataHandler
 17299  0861                     _EUSART_RxDataHandler:	
 17300                           
 17301                           ;mcc_generated_files/eusart.c: 250:     eusartRxBuffer[eusartRxHead++] = RC1REG;
 17302                           
 17303                           ;incstack = 0
 17304                           ; Regs used in _EUSART_RxDataHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
 17305  0861  0023               	movlb	3	; select bank3
 17306  0862  0819               	movf	25,w	;volatile
 17307  0863  00F6               	movwf	??_EUSART_RxDataHandler
 17308  0864  0872               	movf	_eusartRxHead,w
 17309  0865  3EC5               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
 17310  0866  0086               	movwf	6
 17311  0867  3001               	movlw	1	; select bank3/4
 17312  0868  0087               	movwf	7
 17313  0869  0876               	movf	??_EUSART_RxDataHandler,w
 17314  086A  0081               	movwf	1
 17315  086B  3001               	movlw	1
 17316  086C  00F6               	movwf	??_EUSART_RxDataHandler
 17317  086D  0876               	movf	??_EUSART_RxDataHandler,w
 17318  086E  07F2               	addwf	_eusartRxHead,f	;volatile
 17319                           
 17320                           ;mcc_generated_files/eusart.c: 251:     if(sizeof(eusartRxBuffer) <= eusartRxHead)
 17321  086F  3008               	movlw	8
 17322  0870  0272               	subwf	_eusartRxHead,w	;volatile
 17323  0871  1803               	btfsc	3,0
 17324                           
 17325                           ;mcc_generated_files/eusart.c: 252:     {;mcc_generated_files/eusart.c: 253:         eus
      +                          artRxHead = 0;
 17326  0872  01F2               	clrf	_eusartRxHead	;volatile
 17327                           
 17328                           ;mcc_generated_files/eusart.c: 255:     eusartRxCount++;
 17329  0873  3001               	movlw	1
 17330  0874  00F6               	movwf	??_EUSART_RxDataHandler
 17331  0875  0876               	movf	??_EUSART_RxDataHandler,w
 17332  0876  07F0               	addwf	_eusartRxCount,f	;volatile
 17333  0877  0008               	return
 17334  0878                     __end_of_EUSART_RxDataHandler:	
 17335  007E                     btemp	set	126	;btemp
 17336  007E                     int$flags	set	126
 17337  007E                     wtemp0	set	126


Data Sizes:
    Strings     52
    Constant    32
    Data        9
    BSS         164
    Persistent  45
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      12
    BANK0            80     60      80
    BANK1            80     64      80
    BANK2            80     64      80
    BANK3            80      2      62
    BANK4            80      0      68
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    i2c_ISR$2806	const PTR FTN()enum E7120 size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_SEND_ADR_READ(), do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), 
		 -> do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), do_I2C_IDLE(), do_I2C_RESET(), 

    returnStop@p	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    returnReset@p	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    S52$11$0	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 16
		 -> UART_Byte@bits(BANK0[5]), STR_4(CODE[11]), STR_3(CODE[16]), STR_2(CODE[13]), 
		 -> STR_1(CODE[12]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 16
		 -> UART_Byte@bits(BANK0[5]), STR_4(CODE[11]), STR_3(CODE[16]), STR_2(CODE[13]), 
		 -> STR_1(CODE[12]), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    EUSART_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), Absolute function(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), Absolute function(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), Absolute function(), 

    wireReadDataBlock@val	PTR unsigned char  size(2) Largest target is 64
		 -> readGesture@fifo_data2(BANK1[64]), readGesture@fifo_data(BANK2[64]), 

    Display_Name@string1	PTR unsigned char  size(2) Largest target is 16
		 -> STR_4(CODE[11]), STR_3(CODE[16]), STR_2(CODE[13]), STR_1(CODE[12]), 

    names	PTR unsigned char [4] size(2) Largest target is 16
		 -> STR_4(CODE[11]), STR_3(CODE[16]), STR_2(CODE[13]), STR_1(CODE[12]), 

    IOCAF4_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCAF4_DefaultInterruptHandler(), 

    IOCAF4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCAF4_DefaultInterruptHandler(), Absolute function(), 

    i2c1_driver_i2cISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), i2c_ISR(), 

    i2c1_driver_busCollisionISR	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), i2c_busCollisionISR(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), Absolute function(), 

    EUSART_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), Absolute function(), 

    fsmStateTable	const PTR FTN()enum E7120[16] size(2) Largest target is 1
		 -> do_I2C_TX_EMPTY(), do_I2C_RX(), do_I2C_TX(), do_I2C_DO_ADDRESS_NACK(), 
		 -> do_I2C_DO_NACK_RESTART(), do_I2C_DO_NACK_STOP(), do_I2C_DO_ACK(), do_I2C_RCEN(), 
		 -> do_I2C_SEND_ADR_WRITE(), do_I2C_SEND_ADR_READ(), do_I2C_SEND_STOP(), do_I2C_SEND_RESTART(), 
		 -> do_I2C_SEND_RESTART_WRITE(), do_I2C_SEND_RESTART_READ(), do_I2C_IDLE(), do_I2C_RESET(), 

    S52$callbackPayload	PTR void [6] size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    i2c_status.callbackPayload	PTR void [6] size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    S52$callbackTable	PTR FTN(PTR void ,)enum E6966[6] size(2) Largest target is 1
		 -> returnReset(), returnStop(), 

    i2c_status.callbackTable	PTR FTN(PTR void ,)enum E6966[6] size(2) Largest target is 1
		 -> returnReset(), returnStop(), 

    S52$data_ptr	PTR unsigned char  size(1) Largest target is 0

    i2c_status.data_ptr	PTR unsigned char  size(1) Largest target is 0


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_i2c_ISR
    _i2c_ISR->_do_I2C_DO_ADDRESS_NACK
    _i2c_ISR->_do_I2C_RX
    _i2c_ISR->_do_I2C_TX
    _i2c_ISR->_do_I2C_TX_EMPTY
    _EUSART_Receive_ISR->_EUSART_RxDataHandler
    _EUSART_DefaultErrorHandler->_EUSART_RxDataHandler

Critical Paths under _main in BANK0

    _main->_handleGesture
    _initialize->_setMode
    _setProximityGain->_wireWriteDataByte
    _setProxIntLowThresh->_wireWriteDataByte
    _setProxIntHighThresh->_wireWriteDataByte
    _setLightIntLowThreshold->_wireWriteDataByte
    _setLightIntHighThreshold->_wireWriteDataByte
    _setLEDDrive->_wireWriteDataByte
    _setGestureWaitTime->_wireWriteDataByte
    _setGestureLEDDrive->_wireWriteDataByte
    _setGestureGain->_wireWriteDataByte
    _setGestureExitThresh->_wireWriteDataByte
    _setGestureEnterThresh->_wireWriteDataByte
    _setAmbientLightGain->_wireWriteDataByte
    _handleGesture->_readGesture
    _readGesture->_processGestureData
    _wireReadDataBlock->_I2C_Write_Byte
    _processGestureData->___awdiv
    ___awdiv->___wmul
    _isGestureAvailable->_wireReadDataByte
    _enableGestureSensor->_setMode
    _setLEDBoost->_wireWriteDataByte
    _setGestureMode->_wireWriteDataByte
    _setGestureIntEnable->_wireWriteDataByte
    _enablePower->_setMode
    _setMode->_getMode
    _wireWriteDataByte->_I2C_Write_Byte
    _getMode->_wireReadDataByte
    _wireReadDataByte->_I2C_Write_Byte
    _I2C_Write_Byte->_i2c1_driver_TXData
    _I2C_Read_Byte->_i2c1_driver_isBufferFull
    _UART_Byte->_strlen
    _SYSTEM_Initialize->_EUSART_Initialize
    _PIN_MANAGER_Initialize->_IOCAF4_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _EUSART_Initialize->_EUSART_SetTxInterruptHandler
    _Get_ADC->_Display_Name
    _Noise->_PWM1_LoadDutyValue
    _Display_Name->_strlen
    _Display_Clear->_SPI_Write
    _SPI_Write->_SPI2_Exchange8bit

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _handleGesture->_readGesture

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    _handleGesture->_readGesture

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   91099
                                              0 BANK3      2     2      0
                      _Display_Clear
                       _Display_Name
                            _Get_ADC
                         _PIR_Sensor
                  _SYSTEM_Initialize
                          _UART_Byte
                _enableGestureSensor
                      _handleGesture
                         _initialize
                 _isGestureAvailable
 ---------------------------------------------------------------------------------
 (1) _initialize                                           2     2      0   54520
                                             16 BANK0      2     2      0
                   _i2c1_driver_open
                _setAmbientLightGain
              _setGestureEnterThresh
               _setGestureExitThresh
                     _setGestureGain
                _setGestureIntEnable
                 _setGestureLEDDrive
                 _setGestureWaitTime
                        _setLEDDrive
           _setLightIntHighThreshold
            _setLightIntLowThreshold
                            _setMode
               _setProxIntHighThresh
                _setProxIntLowThresh
                   _setProximityGain
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setProximityGain                                     4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setProxIntLowThresh                                  2     2      0    3429
                                             10 BANK0      2     2      0
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setProxIntHighThresh                                 2     2      0    3429
                                             10 BANK0      2     2      0
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setLightIntLowThreshold                              5     3      2    3618
                                             10 BANK0      5     3      2
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setLightIntHighThreshold                             5     3      2    3618
                                             10 BANK0      5     3      2
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setLEDDrive                                          4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureWaitTime                                   3     3      0    3633
                                             10 BANK0      3     3      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureLEDDrive                                   4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureGain                                       4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureExitThresh                                 2     2      0    3429
                                             10 BANK0      2     2      0
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureEnterThresh                                2     2      0    3429
                                             10 BANK0      2     2      0
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setAmbientLightGain                                  3     3      0    3633
                                             10 BANK0      3     3      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _i2c1_driver_open                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _handleGesture                                        1     1      0    9242
                                             59 BANK0      1     1      0
                       _Display_Name
                              _Noise
                        _readGesture
 ---------------------------------------------------------------------------------
 (2) _readGesture                                        140   138      2    8036
                                             47 BANK0     12    10      2
                                              0 BANK1     64    64      0
                                              0 BANK2     64    64      0
                      _decodeGesture
                            _getMode
                 _isGestureAvailable
                 _processGestureData
             _resetGestureParameters
                  _wireReadDataBlock
                   _wireReadDataByte
 ---------------------------------------------------------------------------------
 (3) _wireReadDataBlock                                   11     7      4     651
                                              6 BANK0     11     7      4
                        _I2C_ReStart
                      _I2C_Read_Byte
                      _I2C_Send_NACK
                          _I2C_Start
                           _I2C_Stop
                     _I2C_Write_Byte
 ---------------------------------------------------------------------------------
 (3) _processGestureData                                  32    32      0    5864
                                             15 BANK0     32    32      0
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    2396
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              9     5      4    1165
                                              6 BANK0      9     5      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _isGestureAvailable                                   2     2      0     198
                                              9 BANK0      2     2      0
                   _wireReadDataByte
 ---------------------------------------------------------------------------------
 (3) _decodeGesture                                       18    18      0     296
                                              0 BANK0     18    18      0
 ---------------------------------------------------------------------------------
 (1) _enableGestureSensor                                  2     2      0   23076
                                             16 BANK0      2     2      0
                        _enablePower
             _resetGestureParameters
                _setGestureIntEnable
                     _setGestureMode
                        _setLEDBoost
                            _setMode
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setLEDBoost                                          4     4      0    3667
                                             10 BANK0      4     4      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureMode                                       3     3      0    3633
                                             10 BANK0      3     3      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _setGestureIntEnable                                  3     3      0    3667
                                             10 BANK0      3     3      0
                   _wireReadDataByte
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (3) _resetGestureParameters                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _enablePower                                          0     0      0    4340
                            _setMode
 ---------------------------------------------------------------------------------
 (2) _setMode                                              5     4      1    4340
                                             11 BANK0      5     4      1
                            _getMode
                  _wireWriteDataByte
 ---------------------------------------------------------------------------------
 (2) _wireWriteDataByte                                    4     1      3    3398
                                              6 BANK0      4     1      3
                          _I2C_Start
                           _I2C_Stop
                     _I2C_Write_Byte
 ---------------------------------------------------------------------------------
 (3) _getMode                                              2     2      0     195
                                              9 BANK0      2     2      0
                   _wireReadDataByte
 ---------------------------------------------------------------------------------
 (2) _wireReadDataByte                                     3     3      0     161
                                              6 BANK0      3     3      0
                        _I2C_ReStart
                      _I2C_Read_Byte
                      _I2C_Send_NACK
                          _I2C_Start
                           _I2C_Stop
                     _I2C_Write_Byte
 ---------------------------------------------------------------------------------
 (3) _I2C_Write_Byte                                       5     5      0      96
                                              1 BANK0      5     5      0
                 _i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_TXData                                   1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _I2C_Stop                                             0     0      0       0
                   _i2c1_driver_stop
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_stop                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_Start                                            0     0      0       0
                  _i2c1_driver_start
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_start                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_Send_NACK                                        0     0      0       0
               _i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_sendNACK                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_Read_Byte                                        0     0      0       0
              _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
                _i2c1_driver_startRX
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_startRX                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_isBufferFull                             1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_getRXData                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2C_ReStart                                          0     0      0       0
                _i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (4) _i2c1_driver_restart                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UART_Byte                                           16    16      0     736
                                              5 BANK0     16    16      0
                             _strlen
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     726
                     _ADC_Initialize
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PMD_Initialize
                    _PWM1_Initialize
                    _SPI2_Initialize
                    _TMR2_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SPI2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PMD_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0     121
         _IOCAF4_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _IOCAF4_SetInterruptHandler                           2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0     605
                                              2 BANK0      1     1      0
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetTxInterruptHandler                         2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PIR_Sensor                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Get_ADC                                              5     5      0    1550
                                             12 BANK0      5     5      0
                  _ADC_GetConversion
                       _Display_Name
                              _Noise
 ---------------------------------------------------------------------------------
 (2) _Noise                                                1     1      0     220
                                              2 BANK0      1     1      0
                 _PWM1_LoadDutyValue
 ---------------------------------------------------------------------------------
 (3) _PWM1_LoadDutyValue                                   2     0      2     220
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _Display_Name                                         7     5      2     986
                                              5 BANK0      7     5      2
                          _SPI_Write
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _strlen                                               5     3      2     310
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _ADC_GetConversion                                    4     2      2      31
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _Display_Clear                                        1     1      0      62
                                              3 BANK0      1     1      0
                          _SPI_Write
 ---------------------------------------------------------------------------------
 (3) _SPI_Write                                            2     2      0      62
                                              1 BANK0      2     2      0
                  _SPI2_Exchange8bit
 ---------------------------------------------------------------------------------
 (4) _SPI2_Exchange8bit                                    1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                           0     0      0     914
                   Absolute function *
                 _EUSART_Receive_ISR *
                _EUSART_Transmit_ISR *
                    _PIN_MANAGER_IOC
                            _i2c_ISR *
                _i2c_busCollisionISR *
 ---------------------------------------------------------------------------------
 (9) _i2c_busCollisionISR                                  0     0      0       0
      _i2c1_driver_clearBusCollision
 ---------------------------------------------------------------------------------
 (10) _i2c1_driver_clearBusCollision                       0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _i2c_ISR                                              3     3      0     914
                                              3 COMMON     3     3      0
                      _do_I2C_DO_ACK *
             _do_I2C_DO_ADDRESS_NACK *
             _do_I2C_DO_NACK_RESTART *
                _do_I2C_DO_NACK_STOP *
                        _do_I2C_IDLE *
                        _do_I2C_RCEN *
                       _do_I2C_RESET *
                          _do_I2C_RX *
               _do_I2C_SEND_ADR_READ *
              _do_I2C_SEND_ADR_WRITE *
                _do_I2C_SEND_RESTART *
           _do_I2C_SEND_RESTART_READ *
          _do_I2C_SEND_RESTART_WRITE *
                   _do_I2C_SEND_STOP *
                          _do_I2C_TX *
                    _do_I2C_TX_EMPTY *
                 _i2c1_driver_isNACK
                     _mssp1_clearIRQ
 ---------------------------------------------------------------------------------
 (10) _mssp1_clearIRQ                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_TX_EMPTY                                     3     3      0     212
                                              0 COMMON     3     3      0
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                       _mssp1_setIRQ
                        _returnReset *
                         _returnStop *
 ---------------------------------------------------------------------------------
 (11) _mssp1_setIRQ                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_TX                                           3     3      0     234
                                              0 COMMON     3     3      0
           _do_I2C_SEND_RESTART_READ
          _do_I2C_SEND_RESTART_WRITE
                   _do_I2C_SEND_STOP
                 _i2c1_driver_isNACK
                        _returnReset *
                         _returnStop *
               i1_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (10) _i2c1_driver_isNACK                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _do_I2C_SEND_RESTART_WRITE                           0     0      0       0
              i1_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (11) _do_I2C_SEND_RESTART_READ                            0     0      0       0
              i1_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (10) _do_I2C_SEND_ADR_WRITE                               0     0      0      22
               i1_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (10) _do_I2C_SEND_ADR_READ                                0     0      0      22
               i1_i2c1_driver_TXData
 ---------------------------------------------------------------------------------
 (11) i1_i2c1_driver_TXData                                1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_RX                                           3     3      0     212
                                              0 COMMON     3     3      0
             _do_I2C_DO_NACK_RESTART
                _do_I2C_DO_NACK_STOP
                _i2c1_driver_sendACK
                        _returnReset *
                         _returnStop *
            i1_i2c1_driver_getRXData
 ---------------------------------------------------------------------------------
 (11) i1_i2c1_driver_getRXData                             0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _do_I2C_DO_NACK_STOP                                 0     0      0       0
             i1_i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (11) _do_I2C_DO_NACK_RESTART                              0     0      0       0
             i1_i2c1_driver_sendNACK
 ---------------------------------------------------------------------------------
 (12) i1_i2c1_driver_sendNACK                              0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_RESET                                        0     0      0       0
               _i2c1_driver_resetBus
 ---------------------------------------------------------------------------------
 (11) _i2c1_driver_resetBus                                0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_RCEN                                         0     0      0       0
              i1_i2c1_driver_startRX
 ---------------------------------------------------------------------------------
 (11) i1_i2c1_driver_startRX                               0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_IDLE                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_DO_ADDRESS_NACK                              3     3      0     212
                                              0 COMMON     3     3      0
                _do_I2C_SEND_RESTART
                   _do_I2C_SEND_STOP
                        _returnReset *
                         _returnStop *
 ---------------------------------------------------------------------------------
 (11) _returnStop                                          1     0      1       0
                                              0 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (11) _returnReset                                         1     0      1     212
                                              0 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (11) _do_I2C_SEND_STOP                                    0     0      0       0
                 i1_i2c1_driver_stop
 ---------------------------------------------------------------------------------
 (12) i1_i2c1_driver_stop                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _do_I2C_SEND_RESTART                                 0     0      0       0
              i1_i2c1_driver_restart
 ---------------------------------------------------------------------------------
 (12) i1_i2c1_driver_restart                               0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _do_I2C_DO_ACK                                       0     0      0       0
                _i2c1_driver_sendACK
 ---------------------------------------------------------------------------------
 (11) _i2c1_driver_sendACK                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _PIN_MANAGER_IOC                                      0     0      0       0
                         _IOCAF4_ISR
 ---------------------------------------------------------------------------------
 (10) _IOCAF4_ISR                                          0     0      0       0
                   Absolute function *
     _IOCAF4_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (11) _IOCAF4_DefaultInterruptHandler                      0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (9) _EUSART_Receive_ISR                                   0     0      0       0
                   Absolute function *
         _EUSART_DefaultErrorHandler *
  _EUSART_DefaultFramingErrorHandler *
  _EUSART_DefaultOverrunErrorHandler *
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (10) _EUSART_DefaultOverrunErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _EUSART_DefaultFramingErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _EUSART_DefaultErrorHandler                          0     0      0       0
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (10) _EUSART_RxDataHandler                                1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Display_Clear
     _SPI_Write
       _SPI2_Exchange8bit
   _Display_Name
     _SPI_Write
       _SPI2_Exchange8bit
     _strlen
   _Get_ADC
     _ADC_GetConversion
     _Display_Name
       _SPI_Write
         _SPI2_Exchange8bit
       _strlen
     _Noise
       _PWM1_LoadDutyValue
   _PIR_Sensor
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
       _IOCAF4_SetInterruptHandler
     _PMD_Initialize
     _PWM1_Initialize
     _SPI2_Initialize
     _TMR2_Initialize
     _WDT_Initialize
   _UART_Byte
     _strlen
   _enableGestureSensor
     _enablePower
       _setMode
         _getMode
           _wireReadDataByte
             _I2C_ReStart
               _i2c1_driver_restart
             _I2C_Read_Byte
               _i2c1_driver_getRXData
               _i2c1_driver_isBufferFull
               _i2c1_driver_startRX
             _I2C_Send_NACK
               _i2c1_driver_sendNACK
             _I2C_Start
               _i2c1_driver_start
             _I2C_Stop
               _i2c1_driver_stop
             _I2C_Write_Byte
               _i2c1_driver_TXData
         _wireWriteDataByte
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
     _resetGestureParameters
     _setGestureIntEnable
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureMode
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setLEDBoost
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setMode
       _getMode
         _wireReadDataByte
           _I2C_ReStart
             _i2c1_driver_restart
           _I2C_Read_Byte
             _i2c1_driver_getRXData
             _i2c1_driver_isBufferFull
             _i2c1_driver_startRX
           _I2C_Send_NACK
             _i2c1_driver_sendNACK
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _wireWriteDataByte
       _I2C_Start
         _i2c1_driver_start
       _I2C_Stop
         _i2c1_driver_stop
       _I2C_Write_Byte
         _i2c1_driver_TXData
   _handleGesture
     _Display_Name
       _SPI_Write
         _SPI2_Exchange8bit
       _strlen
     _Noise
       _PWM1_LoadDutyValue
     _readGesture
       _decodeGesture
       _getMode
         _wireReadDataByte
           _I2C_ReStart
             _i2c1_driver_restart
           _I2C_Read_Byte
             _i2c1_driver_getRXData
             _i2c1_driver_isBufferFull
             _i2c1_driver_startRX
           _I2C_Send_NACK
             _i2c1_driver_sendNACK
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
       _isGestureAvailable
         _wireReadDataByte
           _I2C_ReStart
             _i2c1_driver_restart
           _I2C_Read_Byte
             _i2c1_driver_getRXData
             _i2c1_driver_isBufferFull
             _i2c1_driver_startRX
           _I2C_Send_NACK
             _i2c1_driver_sendNACK
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
       _processGestureData
         ___awdiv
           ___wmul (ARG)
         ___wmul
       _resetGestureParameters
       _wireReadDataBlock
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
   _initialize
     _i2c1_driver_open
     _setAmbientLightGain
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureEnterThresh
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureExitThresh
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureGain
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureIntEnable
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureLEDDrive
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setGestureWaitTime
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setLEDDrive
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setLightIntHighThreshold
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setLightIntLowThreshold
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setMode
       _getMode
         _wireReadDataByte
           _I2C_ReStart
             _i2c1_driver_restart
           _I2C_Read_Byte
             _i2c1_driver_getRXData
             _i2c1_driver_isBufferFull
             _i2c1_driver_startRX
           _I2C_Send_NACK
             _i2c1_driver_sendNACK
           _I2C_Start
             _i2c1_driver_start
           _I2C_Stop
             _i2c1_driver_stop
           _I2C_Write_Byte
             _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setProxIntHighThresh
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setProxIntLowThresh
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _setProximityGain
       _wireReadDataByte
         _I2C_ReStart
           _i2c1_driver_restart
         _I2C_Read_Byte
           _i2c1_driver_getRXData
           _i2c1_driver_isBufferFull
           _i2c1_driver_startRX
         _I2C_Send_NACK
           _i2c1_driver_sendNACK
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
       _wireWriteDataByte
         _I2C_Start
           _i2c1_driver_start
         _I2C_Stop
           _i2c1_driver_stop
         _I2C_Write_Byte
           _i2c1_driver_TXData
     _wireReadDataByte
       _I2C_ReStart
         _i2c1_driver_restart
       _I2C_Read_Byte
         _i2c1_driver_getRXData
         _i2c1_driver_isBufferFull
         _i2c1_driver_startRX
       _I2C_Send_NACK
         _i2c1_driver_sendNACK
       _I2C_Start
         _i2c1_driver_start
       _I2C_Stop
         _i2c1_driver_stop
       _I2C_Write_Byte
         _i2c1_driver_TXData
     _wireWriteDataByte
       _I2C_Start
         _i2c1_driver_start
       _I2C_Stop
         _i2c1_driver_stop
       _I2C_Write_Byte
         _i2c1_driver_TXData
   _isGestureAvailable
     _wireReadDataByte
       _I2C_ReStart
         _i2c1_driver_restart
       _I2C_Read_Byte
         _i2c1_driver_getRXData
         _i2c1_driver_isBufferFull
         _i2c1_driver_startRX
       _I2C_Send_NACK
         _i2c1_driver_sendNACK
       _I2C_Start
         _i2c1_driver_start
       _I2C_Stop
         _i2c1_driver_stop
       _I2C_Write_Byte
         _i2c1_driver_TXData

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART_Receive_ISR *
     Absolute function(Fake) *
     _EUSART_DefaultErrorHandler *
       _EUSART_RxDataHandler
     _EUSART_DefaultFramingErrorHandler *
     _EUSART_DefaultOverrunErrorHandler *
     _EUSART_RxDataHandler *
   _EUSART_Transmit_ISR *
   _PIN_MANAGER_IOC *
     _IOCAF4_ISR
       Absolute function(Fake) *
       _IOCAF4_DefaultInterruptHandler *
   _i2c_ISR *
     _do_I2C_DO_ACK *
       _i2c1_driver_sendACK
     _do_I2C_DO_ADDRESS_NACK *
       _do_I2C_SEND_RESTART
         i1_i2c1_driver_restart
       _do_I2C_SEND_STOP
         i1_i2c1_driver_stop
       _returnReset *
       _returnStop *
     _do_I2C_DO_NACK_RESTART *
       i1_i2c1_driver_sendNACK
     _do_I2C_DO_NACK_STOP *
       i1_i2c1_driver_sendNACK
     _do_I2C_IDLE *
     _do_I2C_RCEN *
       i1_i2c1_driver_startRX
     _do_I2C_RESET *
       _i2c1_driver_resetBus
     _do_I2C_RX *
       _do_I2C_DO_NACK_RESTART
         i1_i2c1_driver_sendNACK
       _do_I2C_DO_NACK_STOP
         i1_i2c1_driver_sendNACK
       _i2c1_driver_sendACK
       _returnReset *
       _returnStop *
       i1_i2c1_driver_getRXData *
     _do_I2C_SEND_ADR_READ *
       i1_i2c1_driver_TXData
     _do_I2C_SEND_ADR_WRITE *
       i1_i2c1_driver_TXData
     _do_I2C_SEND_RESTART *
       i1_i2c1_driver_restart
     _do_I2C_SEND_RESTART_READ *
       i1_i2c1_driver_restart
     _do_I2C_SEND_RESTART_WRITE *
       i1_i2c1_driver_restart
     _do_I2C_SEND_STOP *
       i1_i2c1_driver_stop
     _do_I2C_TX *
       _do_I2C_SEND_RESTART_READ
         i1_i2c1_driver_restart
       _do_I2C_SEND_RESTART_WRITE
         i1_i2c1_driver_restart
       _do_I2C_SEND_STOP
         i1_i2c1_driver_stop
       _i2c1_driver_isNACK
       _returnReset *
       _returnStop *
       i1_i2c1_driver_TXData *
     _do_I2C_TX_EMPTY *
       _do_I2C_SEND_RESTART
         i1_i2c1_driver_restart
       _do_I2C_SEND_STOP
         i1_i2c1_driver_stop
       _mssp1_setIRQ
       _returnReset *
       _returnStop *
     _i2c1_driver_isNACK *
     _mssp1_clearIRQ *
   _i2c_busCollisionISR *
     _i2c1_driver_clearBusCollision

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     3C      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     40      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     40      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      2      3E      11       77.5%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      44      13       85.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     17E      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     17E      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Wed Apr 17 09:58:54 2019

                ?_EUSART_SetRxInterruptHandler 0020                                   returnReset@p 0076  
                        ?_setGestureExitThresh 0076                             __size_of_I2C_Start 0003  
                                  __CFG_CP$OFF 0000                                   ___awdiv@sign 002C  
                         __size_of_do_I2C_IDLE 0005                                             _on 005C  
                          _do_I2C_SEND_RESTART 16BE                           __size_of_do_I2C_RCEN 0006  
                          ___wmul@multiplicand 0022                                    __CFG_LVP$ON 0000  
                                          l831 0C65                                            l577 17D9  
             processGestureData@ud_ratio_first 0031                                            l668 0972  
                                          l872 0F04                                            _PR2 001E  
                                 __CFG_CPD$OFF 0000                         ??_EUSART_RxDataHandler 0076  
                        __end_of_decodeGesture 04ED                           __size_of_I2C_ReStart 0003  
               ?_EUSART_SetFramingErrorHandler 0020                        __size_of_PMD_Initialize 0008  
                           I2C_Write_Byte@Byte 0023                                _TMR2_Initialize 1746  
                        __size_of_do_I2C_RESET 0007                                            wreg 0009  
                                   _TXSTA1bits 019E                             i1_i2c1_driver_stop 167A  
                                         l1201 041D                                           l1121 00A4  
                                         l1213 0470                                           l1205 043A  
                                         l1150 02AF                                           l1144 025F  
                                         l1225 04BF                                           l1217 048D  
                                         l1163 0302                                           l1156 02E3  
                                         l1148 0288                                           l1229 04DC  
                                         l1167 032B                                           l1168 0344  
                                         l1193 03E9                                           l1610 0930  
                                         l1189 03CC                                           l1296 0914  
                                         l7112 0709                                           l7130 0720  
                                         l7122 070D                                           l7210 07FE  
                                         l7116 07BE                                           l7220 084A  
                                         l6430 17A2                                           l6510 0E7B  
                                         l7150 0751                                           l7230 0A72  
                                         l6424 0917                                           l6520 0E83  
                                         l6504 0E70                                           l7152 07B2  
                                         l6522 0E8F                                           l7138 0743  
                                         l7250 0A4B                                           l7234 0A74  
                                         l6612 0E55                                           l6604 0E3C  
                                         l6532 0EAA                                           l7156 07BB  
                                         l7316 0BF0                                           l7078 0977  
                                         l6614 0E56                                           l6606 0E49  
                                         l7270 0824                                           l7334 0A33  
                                         l7254 0A4D                                           l7096 0C48  
                                         l7352 0B29                                           l6536 0EB2  
                                         l6528 0EA1                                           l6712 015F  
                                         l7280 0837                                           l6458 17DE  
                                         l7370 0B8C                                           l7602 0F2B  
                                         l6730 0212                                           l8074 0FE9  
                                         l6548 0886                                           l7620 0F29  
                                         l6484 092A                                           l6740 0237  
                                         l6732 0215                                           l6708 0111  
                                         l6582 08C2                                           l7710 0667  
                                         l7454 17EA                                           l7606 0F2D  
                                         l6910 04BA                                           l6902 049A  
                                         l6830 0381                                           l6750 025A  
                                         l6742 023A                                           l6726 0200  
                                         l6662 0095                                           l6646 0D8D  
                                         l7470 0500                                           l6584 08CE  
                                         l6592 0E22                                           l6920 04E9  
                                         l6840 0393                                           l6824 0374  
                                         l6568 0811                                           l6736 0225  
                                         l6680 00FA                                           l6648 0DBC  
                                         l7800 0FE0                                           l6914 04D7  
                                         l6842 0395                                           l6834 0389  
                                         l6818 0368                                           l6658 0093  
                                         l7802 0FFD                                           l7298 0BBE  
                                         l7474 0502                                           l7724 068E  
                                         l6596 0E24                                           l7388 0A0C  
                                         l6860 03E4                                           l6836 038B  
                                         l6924 04EB                                           l6828 037F  
                                         l6764 02A2                                           l6756 0283  
                                         l7726 0697                                           l7398 17CF  
                                         l6846 039F                                           l6790 02FD  
                                         l6694 0115                                           l6678 00A0  
                                         l7752 06EB                                           l6856 03C7  
                                         l6848 03A5                                           l6768 02AA  
                                         l7738 06BC                                           l7754 06F7  
                                         l6874 0418                                           l6866 03F6  
                                         l6778 02D6                                           l6786 02E5  
                                         l6892 046B                                           l6884 0447  
                                         l6796 0326                                           l7908 0D70  
                                         l7686 0EF4                                           l6878 0435  
                                         l7774 0F9F                                           l7766 0F92  
                                         l7758 0F7A                                           l6896 0488  
                                         l7784 0FB6                                           l7698 0637  
                                         l7786 0FC4                                           l7796 0FD3  
                                         l7894 0D4B                                           l7896 0D50  
                                         STR_1 181D                                           STR_2 1810  
                                         STR_3 1800                                           STR_4 1829  
                      __end_of_PWM1_Initialize 17B6                                           _LATA 010C  
                                         _LATB 010D                                           _LATC 010E  
                                         u5105 0E90                                           u5025 0931  
                                         u5115 0E9A                                           u5035 0936  
                                         u6005 04C8                                           u5125 0EA2  
                                         u6015 04E6                                           u5224 0E35  
                                         u5225 0E34                                           u5234 0E41  
                                         u5235 0E40                                           u6115 074C  
                                         _PMD0 0911                                           u6045 0C52  
                                         u5165 0882                                           u5085 0E86  
                                         u6125 075B                                           _PMD1 0912  
                                         _PMD2 0913                                           _PMD3 0914  
                                         _PMD4 0915                                           u6305 0B6D  
                                         u6145 0A94                                           _PMD5 0916  
                                         u5515 024B                                           u5355 00AF  
                                         u5275 0D96                                           u7107 07D5  
                                         u6155 0ABD                                           u7117 089E  
                                         u5605 02C9                                           u5525 0268  
                                         u6245 0B9F                                           u7127 0C30  
                                         u5535 0274                                           u5455 01F9  
                                         u7137 17F7                                           u5545 0291  
                                         u5465 020A                                           u6265 0BD1  
                                         u7147 085B                                           u5715 0350  
                                         u5475 021E                                           u5485 022F  
                                         u6710 0EDB                                           u5655 02EE  
                                         u5905 0426                                           u5665 030B  
                                         u7097 07C2                                           u5915 0444  
                                         u5675 0317                                           u5595 02BB  
                                         u6805 0671                                           u5845 03B8  
                                         u5685 0334                           ?_do_I2C_SEND_RESTART 0076  
                                         u6815 067D                                           u6735 0F02  
                                         u5855 03D5                                           u6745 060D  
                                         u5945 045C                                           u5865 03F3  
                                         u6835 06A1                                           u6755 0625  
                                         u5955 0479                                           u6915 0FB1  
                                         u6845 06AD                                           u6765 0631  
                                         u5965 0497                                           u6775 0641  
                                         u5895 0409                                           u6865 06C6  
                                         u6785 064D                                           u6875 06D2  
                                         u5995 04AB                                           u6885 06E6  
                                         _TMR2 001D                                           _WPUA 020C  
                                         _WPUB 020D                                           _WPUC 020E  
                                 __CFG_WRT$OFF 0000                                  __CFG_FCMEN$ON 0000  
            __size_of_do_I2C_SEND_RESTART_READ 0004                            ?i1_i2c1_driver_stop 0076  
                    ?_do_I2C_SEND_RESTART_READ 0076                                           _main 0D36  
                                         _name 0060                      __size_of_do_I2C_SEND_STOP 0004  
                       __size_of_do_I2C_DO_ACK 0004                                           fsr0h 0005  
                                         fsr1h 0007                                           indf0 0000  
                                         fsr0l 0004                                           indf1 0001  
                                         _prox 00E0                                           fsr1l 0006  
                                         btemp 007E                          ??_setGestureIntEnable 002A  
                             __end_of_I2C_Stop 16AA                                  __CFG_BOREN$ON 0000  
                      i1_i2c1_driver_getRXData 1680                          ?_do_I2C_SEND_ADR_READ 0076  
                                __CFG_BORV$LOW 0000                ??_i2c1_driver_clearBusCollision 0076  
                                         start 0047                                __end_of_Get_ADC 06FA  
                          I2C_Write_Byte@count 0024                                  __CFG_CSWEN$ON 0000  
                                __CFG_MCLRE$ON 0000                                __end_of_i2c_ISR 09E7  
                     ??_do_I2C_DO_NACK_RESTART 0076                                   ?_readGesture 004F  
                                 _do_I2C_RESET 1702                 __size_of_OSCILLATOR_Initialize 0008  
                          __size_of_IOCAF4_ISR 000D                  __end_of_OSCILLATOR_Initialize 173E  
                         ??i1_i2c1_driver_stop 0076                                          _ADACT 009F  
                     __end_of_i2c1_driver_open 179F                                          ?_main 0076  
                              __end_of___awdiv 0EB7                       __end_of_i2c1_driver_stop 16A7  
                              ___awdiv@divisor 0026                                          _T2CON 001F  
                   __end_of_i2c1_driver_TXData 16F6                                 __CFG_DEBUG$OFF 0000  
                                        i1l252 001F                                          i1l157 0DFA  
                                        i1l173 0D0A                                          i1l261 0045  
                                        i1l254 002C                                          i1l256 0039  
                                        i1l249 0010                                   ?_setLEDBoost 0076  
                              ___awdiv@counter 002B                                   ?_setLEDDrive 0076  
                               _setGestureGain 0B8E                                          _OSCEN 091D  
                           wireReadDataBlock@j 0030                                 _setGestureMode 09E7  
                                        _TRISA 008C                                          _TRISB 008D  
                                        _TRISC 008E                    __end_of_setProxIntLowThresh 0800  
                              __end_of_getMode 1795                                          _Noise 088F  
                           __size_of_UART_Byte 005E                                    ?_PIR_Sensor 0076  
                        isGestureAvailable@val 002A                        __end_of_PIN_MANAGER_IOC 16EA  
                   __end_of_i2c1_driver_isNACK 1726                         __size_of_I2C_Read_Byte 000B  
                               _WDT_Initialize 16D2                                          _names 0160  
                             _b_i2c_error_flag 006B                   __end_of_setProxIntHighThresh 084C  
                   ?_do_I2C_SEND_RESTART_WRITE 0076                                          _start 006F  
                        ??_do_I2C_SEND_RESTART 0076                                __end_of_setMode 0E65  
                            __end_of_I2C_Start 16A4                                          pclath 000A  
                      __size_of_mssp1_clearIRQ 0003                           i1_i2c1_driver_TXData 16DA  
                 __size_of_setAmbientLightGain 001E                         ?_do_I2C_SEND_ADR_WRITE 0076  
                       __size_of_I2C_Send_NACK 0003                                          status 0003  
                                        wtemp0 007E                             __size_of_SPI_Write 0015  
                     ?_setLightIntLowThreshold 002A                     __end_of_setGestureLEDDrive 0BF2  
                        setGestureWaitTime@val 002C                                  _fsmStateTable 1000  
                                _gesture_data_ 0220                                __initialization 0049  
                       ??_setGestureExitThresh 002A                              _SPI2_Exchange8bit 17D1  
                   processGestureData@lr_delta 004B                                     _i2c_status 01A0  
                                 __end_of_main 0D7D                              _handleGestureFlag 0075  
                   processGestureData@ud_delta 0049                             ?_SPI2_Exchange8bit 0076  
                      __end_of_TMR2_Initialize 174E                    ?_INTERRUPT_InterruptManager 0076  
                       __end_of_setGestureGain 0BC0                      __size_of_setProximityGain 0029  
               ??_EUSART_SetRxInterruptHandler 0022                         __end_of_setGestureMode 0A0E  
                                _do_I2C_DO_ACK 16C6                                         ??_main 005C  
                __size_of_i2c1_driver_sendNACK 0004                       __size_of_SPI2_Initialize 0007  
                          ??_SPI2_Exchange8bit 0020                        _IOCAF4_InterruptHandler 00EC  
            __size_of_setLightIntHighThreshold 0027                  __size_of_i2c1_driver_resetBus 0001  
                       __end_of_WDT_Initialize 16D6                        ?_do_I2C_DO_ADDRESS_NACK 0076  
                    ?_setLightIntHighThreshold 002A                                         ?_Noise 0076  
            setLightIntHighThreshold@threshold 002A                           __end_of_Display_Name 0C69  
                         __size_of_enablePower 000E      __end_of_EUSART_DefaultFramingErrorHandler 166F  
   __size_of_EUSART_DefaultFramingErrorHandler 0001            ??_EUSART_DefaultFramingErrorHandler 0076  
           ?_EUSART_DefaultFramingErrorHandler 0076              _EUSART_DefaultFramingErrorHandler 166E  
                                       _ADCON0 009D                                         _ADCON1 009E  
                   _EUSART_OverrunErrorHandler 0168                                         _ADRESH 009C  
                                       _ADRESL 009B                                         _CCPR1H 0292  
                                       _CCPR1L 0291                               ___awdiv@dividend 0028  
                           _processGestureData 0085                                         _ANSELA 018C  
                                       _ANSELB 018D                                         _ANSELC 018E  
                           __CFG_RSTOSC$HFINT1 0000                   setProxIntLowThresh@threshold 002B  
                        ?i1_i2c1_driver_TXData 0076                                         _RC1REG 0199  
                                       _RA4PPS 0E94                                         _RC1STA 019D  
                                       _RC2PPS 0EA2                                         _RB6PPS 0E9E  
                             ?_PWM1_Initialize 0076                                         _RB7PPS 0E9F  
                                       _RC5PPS 0EA5                                         i1l1420 095E  
                                       _ODCONA 028C                                         _ODCONB 028D  
                                       _RC6PPS 0EA6                                         _ODCONC 028E  
                                       i1l5000 0DD6                                         i1l5030 0D0C  
                                       i1l5200 17C0                                         i1l5008 0E14  
                                       i1l5040 0D12                                         i1l5050 0B2E  
                                       i1l5034 0D0F                                         i1l6020 0C07  
                                       i1l5060 0B35                                         i1l6030 0C25  
                                       i1l5054 0B31                                         i1l6026 0C16  
                                       i1l5066 0B38                                         i1l5566 09D1  
                    ??i1_i2c1_driver_getRXData 0076                                         i1l8080 0AF7  
                                       i1l8082 0B4D                                         i1l4964 0ADC  
                                       i1l8076 0D27                                         i1l4974 0AE2  
                                       i1l8078 0DEC                                         i1l4990 0DD0  
                                       i1l4968 0ADF                                         i1l4994 0DD3  
                                       i1l4986 0DCD                                      ??_Get_ADC 002C  
                             _wireReadDataByte 099D                                         _OSCFRQ 091F  
                      ?_resetGestureParameters 0076                         ??_do_I2C_SEND_ADR_READ 0076  
                                       _TX1REG 019A                                         _WDTCON 0097  
                                       _TX1STA 019E                                      ??_i2c_ISR 0079  
                                       _TXREG1 019A                            ?_processGestureData 0076  
                            _gesture_lr_delta_ 0066                                 __CFG_PWRTE$OFF 0000  
                setProxIntHighThresh@threshold 002B                      __end_of_SPI2_Exchange8bit 17E0  
                            _gesture_lr_count_ 0062                            wireReadDataByte@reg 0027  
                        _i2c1_driver_getRXData 1695                            wireReadDataByte@val 0028  
                            _gesture_ud_delta_ 0068                              __end_of_UART_Byte 0F15  
                  __end_of_do_I2C_DO_NACK_STOP 16CE                                  _I2C_Read_Byte 179F  
                   __end_of_isGestureAvailable 0813                              _gesture_ud_count_ 0064  
                          __size_of_PIR_Sensor 000F                                         ___wmul 0927  
                                    ??___awdiv 002A          __end_of_i2c1_driver_clearBusCollision 168C  
       __size_of_i2c1_driver_clearBusCollision 0003                  _i2c1_driver_clearBusCollision 1689  
                   __end_of_setGestureWaitTime 0A35                                 __CFG_STVREN$ON 0000  
              __size_of_do_I2C_DO_NACK_RESTART 0004                            _EUSART_Transmit_ISR 0943  
                             ___awdiv@quotient 002D                                 ?_do_I2C_DO_ACK 0076  
                              ?_setGestureGain 0076                                  _I2C_Send_NACK 169B  
                                    ??_getMode 0029                                ?_setGestureMode 0076  
                                       _strlen 08BD                        ??_setGestureEnterThresh 002A  
                         ??_processGestureData 002F                              __end_of_SPI_Write 0861  
                  __end_of_i2c1_driver_sendACK 16B2                                 _PMD_Initialize 173E  
               __end_of_do_I2C_DO_ADDRESS_NACK 0B00                                      ?_I2C_Stop 0076  
                           Display_Name@length 0028                                      ??_setMode 002C  
                              ?_WDT_Initialize 0076                    __end_of_i2c1_driver_restart 1692  
                                 ?_returnReset 0076                       ADC_GetConversion@channel 0023  
                            readGesture@motion 0053                    __end_of_i2c1_driver_startRX 169B  
   IOCAF4_SetInterruptHandler@InterruptHandler 0020                               ?_PIN_MANAGER_IOC 0076  
                                 ??_IOCAF4_ISR 0076                           ?_EUSART_Transmit_ISR 0076  
               __end_of_resetGestureParameters 08BD                              _SYSTEM_Initialize 08D5  
                      __end_of__initialization 0081                               _do_I2C_SEND_STOP 16C2  
                           __size_of_do_I2C_RX 0046                             __size_of_do_I2C_TX 004F  
                           ?_SYSTEM_Initialize 0076                         setGestureWaitTime@time 002B  
                     __size_of_do_I2C_TX_EMPTY 0031                    PWM1_LoadDutyValue@dutyValue 0020  
         __end_of_EUSART_SetTxInterruptHandler 1783          __size_of_EUSART_SetTxInterruptHandler 0009  
                 _EUSART_SetTxInterruptHandler 177A                                 ?_I2C_Read_Byte 0076  
                               __pcstackCOMMON 0076                                  __end_of_Noise 08A6  
                                 __pidataBANK0 1671                                   __pidataBANK2 174E  
                          ??_SYSTEM_Initialize 0023                          i1i2c1_driver_TXData@d 0076  
       __end_of_IOCAF4_DefaultInterruptHandler 1670        __size_of_IOCAF4_DefaultInterruptHandler 0001  
               _IOCAF4_DefaultInterruptHandler 166F                           _setProxIntHighThresh 0839  
                               _gesture_state_ 00E2                             _PWM1_LoadDutyValue 0878  
                               ?_I2C_Send_NACK 0076                               ?_TMR2_Initialize 0076  
                        i1_i2c1_driver_restart 1677                         __end_of_PMD_Initialize 1746  
                           __end_of_IOCAF4_ISR 17C3                          i1_i2c1_driver_startRX 167D  
                         __size_of_readGesture 00F3                          __end_of_handleGesture 1000  
            __size_of_i2c1_driver_isBufferFull 0007                                     ??_I2C_Stop 0020  
                         _eusartRxStatusBuffer 01BD                            ?_PWM1_LoadDutyValue 0020  
                    ?_i2c1_driver_isBufferFull 0076                                        ??_Noise 0022  
                           _gesture_far_count_ 00E4                           __size_of_setLEDBoost 0032  
                         __size_of_setLEDDrive 0029                ??_EUSART_SetOverrunErrorHandler 0022  
                       _do_I2C_DO_NACK_RESTART 16CE                         ??i1_i2c1_driver_TXData 0076  
                    __end_of_SYSTEM_Initialize 08F0                          ??_EUSART_Transmit_ISR 0076  
                            ??_SPI2_Initialize 0020                                 _mssp1_clearIRQ 1686  
                                   __pbssBANK0 005C                                     __pbssBANK1 00E0  
                                   __pbssBANK2 016E                                     __pbssBANK3 01A0  
                                   __pbssBANK4 0220                           wireWriteDataByte@reg 0029  
                         wireWriteDataByte@val 0026                            getMode@enable_value 002A  
                               UART_Byte@F7545 01D5                       ??i1_i2c1_driver_sendNACK 0076  
                  __size_of_EUSART_Receive_ISR 0036                         ?_i2c1_driver_getRXData 0076  
                         ??_PWM1_LoadDutyValue 0022                     __size_of_SPI2_Exchange8bit 000F  
                 __size_of_i2c_busCollisionISR 0003                                     __pmaintext 0D36  
                        __end_of_Display_Clear 1800                                  ??_do_I2C_IDLE 0076  
                                ??_do_I2C_RCEN 0076                  ?_EUSART_SetTxInterruptHandler 0020  
             _EUSART_TxDefaultInterruptHandler 00EE                        setGestureLEDDrive@drive 002D  
                                      ?___wmul 0020                                __CFG_PPS1WAY$ON 0000  
                              ??_do_I2C_DO_ACK 0076                   __size_of_enableGestureSensor 0064  
                                   __pintentry 0004                          ?_setProxIntHighThresh 0076  
                                      _CCP1CON 0293                        __size_of_I2C_Write_Byte 001C  
                                ??_I2C_ReStart 0020                               _setProximityGain 0AAC  
                                  setMode@mode 002F                   ??_EUSART_DefaultErrorHandler 0077  
                              ?_PMD_Initialize 0076                            _setAmbientLightGain 097F  
                      __size_of_ADC_Initialize 0008                          __size_of_Display_Name 0041  
               ?_i2c1_driver_clearBusCollision 0076                                        ?_strlen 0020  
                            ?_i2c1_driver_open 0076                              __end_of_do_I2C_RX 0D36  
                            __end_of_do_I2C_TX 0E16                              ?_i2c1_driver_stop 0076  
                                _eusartRxCount 0070                              _wireReadDataBlock 0D7D  
                                      _SP1BRGH 019C                                        _SP1BRGL 019B  
                           ??_i2c1_driver_open 0020                             ??_i2c1_driver_stop 0020  
                                      _OSCCON1 0919                                        _OSCCON3 091B  
                                   _brightness 005E                                  ?_mssp1_setIRQ 0076  
                                 ??_PIR_Sensor 0020                  __size_of_EUSART_RxDataHandler 0017  
                                      _OSCTUNE 091E                           wireReadDataBlock@len 0028  
                         wireReadDataBlock@reg 002F                           wireReadDataBlock@val 0026  
                                      _SSP1ADD 0212                                        _SSP2ADD 021A  
                                      _SLRCONA 030C                                        _SLRCONB 030D  
                                      _SLRCONC 030E                                        _SSP1BUF 0211  
                       __end_of_mssp1_clearIRQ 1689                                        _SSP2BUF 0219  
                           ?_wireReadDataBlock 0026                                        _SSP1MSK 0213  
                     ??_EUSART_SetErrorHandler 0022                              SPI_Write@incoming 0022  
                  __end_of_setGestureIntEnable 0B2B                        ??_do_I2C_SEND_ADR_WRITE 0076  
              processGestureData@lr_ratio_last 0037                    ??_do_I2C_SEND_RESTART_WRITE 0076  
                                 readGesture@i 0059                                        _Get_ADC 0603  
                           _i2c1_driver_TXData 16F0                           ?_setAmbientLightGain 0076  
                           _i2c1_driver_i2cISR 00E8                            ??_wireReadDataBlock 002A  
                                      _i2c_ISR 09C1                                      _I2C_Start 16A1  
                              ??_I2C_Read_Byte 0021                                  setMode@enable 002B  
          __size_of_EUSART_DefaultErrorHandler 0003                             _i2c1_driver_isNACK 171E  
                       __size_of_decodeGesture 0191                            ?_i2c1_driver_TXData 0076  
                                 _Display_Name 0C28                                ??_I2C_Send_NACK 0020  
                                      ___awdiv 0E65                                __size_of___wmul 001C  
                           __end_of_PIR_Sensor 17EF                         ?i1_i2c1_driver_restart 0076  
                            ??_do_I2C_TX_EMPTY 0076                            ?_i2c1_driver_isNACK 0076  
                       ?i1_i2c1_driver_startRX 0076                       __end_of_wireReadDataByte 09C1  
                                   _initialize 04ED                                        _getMode 178C  
             __size_of_setLightIntLowThreshold 0027                             _setGestureLEDDrive 0BC0  
                                      __ptext1 04ED                                        __ptext2 0AAC  
                                      __ptext3 07ED                                        __ptext4 0839  
                                      __ptext5 0A5C                                        __ptext6 0A35  
                                      __ptext7 0A83                                        __ptext8 0A0E  
                                      __ptext9 0BC0                    __size_ofi1_i2c1_driver_stop 0003  
                          __end_of_do_I2C_IDLE 16E4                      __end_of_wireReadDataBlock 0DC7  
                          __end_of_do_I2C_RCEN 16F0                                __size_of_strlen 0018  
                        _OSCILLATOR_Initialize 1736                                      _T2CONbits 001F  
                  __end_of_do_I2C_SEND_RESTART 16C2                                 ??_mssp1_setIRQ 0076  
                         ??_i2c1_driver_TXData 0020                                        _setMode 0E16  
                     ??_PIN_MANAGER_Initialize 0022                                      _IOCAFbits 0393  
                          __end_of_I2C_ReStart 1695                                      _IOCANbits 0392  
                                    _IOCAPbits 0391                            ?_setGestureLEDDrive 0076  
                                      _printed 006D                                ?_mssp1_clearIRQ 0076  
                     _do_I2C_SEND_RESTART_READ 16B6                     __size_of_SYSTEM_Initialize 001B  
                                      clrloop0 16F7                           __size_of_returnReset 0002  
                         end_of_initialization 0081                           ??_i2c1_driver_isNACK 0076  
                        ??_setAmbientLightGain 002A                   __size_of_setProxIntLowThresh 0013  
        __end_of_EUSART_SetOverrunErrorHandler 1771         __size_of_EUSART_SetOverrunErrorHandler 0009  
                _EUSART_SetOverrunErrorHandler 1768                                        init_ram 16FC  
                 __end_of_i2c1_driver_sendNACK 16DA                                        initloop 16FD  
              __size_ofi1_i2c1_driver_sendNACK 0004                                     ?_I2C_Start 0076  
                enableGestureSensor@interrupts 0031                              _EUSART_Initialize 0C69  
                 __end_of_i2c1_driver_resetBus 1671                  setGestureExitThresh@threshold 002B  
                         ??_setGestureLEDDrive 002A                             readGesture@gstatus 0055  
                           ?_EUSART_Initialize 0076                                   initialize@id 0031  
                             ??_setGestureGain 002A                         ??_setProxIntHighThresh 002A  
                             ??_setGestureMode 002A                      _do_I2C_SEND_RESTART_WRITE 16BA  
                          Display_Name@string1 0025                  __size_of_setGestureExitThresh 0013  
                                      strlen@a 0023                                        strlen@s 0020  
                                    _UART_Byte 0EB7                            ??_EUSART_Initialize 0022  
                             ??_WDT_Initialize 0020                              _wireWriteDataByte 08F0  
               ??_EUSART_SetTxInterruptHandler 0022                                     _returnStop 1672  
                                    _PORTCbits 000E                       __end_of_do_I2C_SEND_STOP 16C6  
                                ??_enablePower 0030                             ?_wireWriteDataByte 0026  
              setLightIntHighThreshold@val_low 002D                 __size_of_setGestureEnterThresh 0013  
                __end_of_setGestureEnterThresh 0826                                  _decodeGesture 035C  
                           _isGestureAvailable 0800                             _setGestureWaitTime 0A0E  
                 ??_IOCAF4_SetInterruptHandler 0022                                      _SPI_Write 084C  
                            __size_of_I2C_Stop 0003                                    returnStop@p 0076  
                          ??_wireWriteDataByte 0029                               __CFG_FEXTOSC$OFF 0000  
              __size_of_EUSART_SetErrorHandler 0009                processGestureData@ud_ratio_last 0035  
                          ?_isGestureAvailable 0076                            ?_setGestureWaitTime 0076  
                    __end_of_EUSART_Initialize 0CAC                                    _CCP1CONbits 0293  
                        SPI2_Exchange8bit@data 0020                  __size_of_do_I2C_SEND_ADR_READ 0008  
                        setProximityGain@drive 002D                       __size_of_PWM1_Initialize 000C  
             __end_of_i2c1_driver_isBufferFull 171E                                    _do_I2C_IDLE 16DF  
                                  _do_I2C_RCEN 16EA                      __end_of_wireWriteDataByte 090B  
                               _I2C_Write_Byte 090B             __end_of_EUSART_DefaultErrorHandler 1677  
                   _EUSART_DefaultErrorHandler 1674                           ??_isGestureAvailable 0029  
                               __end_of___wmul 0943                           ??_setGestureWaitTime 002A  
                                   ?_UART_Byte 0076                                    ?_initialize 0076  
                                  _I2C_ReStart 1692                                 _ADC_Initialize 172E  
          __size_of_IOCAF4_SetInterruptHandler 0009                         i1_i2c1_driver_sendNACK 16B2  
                       ?_OSCILLATOR_Initialize 0076                       _setLightIntHighThreshold 0A35  
                   __size_of_wireReadDataBlock 004A                                _gesture_motion_ 016E  
                              _SPI2_Initialize 1710                   __size_of_do_I2C_DO_NACK_STOP 0004  
                  __size_of_processGestureData 02D7                                 ?_decodeGesture 0076  
                               __end_of_strlen 08D5                        ?_do_I2C_DO_NACK_RESTART 0076  
                          start_initialization 0049                             setGestureGain@gain 002D  
                          _i2c_busCollisionISR 168C                __size_of_PIN_MANAGER_Initialize 0044  
                     ?i1_i2c1_driver_getRXData 0076                                     ?_SPI_Write 0076  
 EUSART_SetRxInterruptHandler@interruptHandler 0020   EUSART_SetTxInterruptHandler@interruptHandler 0020  
             setLightIntHighThreshold@val_high 002E                            _enableGestureSensor 0F15  
                          __end_of_enablePower 17D1                   __size_of_i2c1_driver_sendACK 0004  
                      ??_i2c1_driver_getRXData 0020                       __end_of_setProximityGain 0AD5  
                 __size_of_i2c1_driver_restart 0003                       processGestureData@d_last 0042  
                 __size_of_i2c1_driver_startRX 0003                       processGestureData@l_last 0043  
                                  ??_I2C_Start 0020                       processGestureData@r_last 0044  
                     __size_of_PIN_MANAGER_IOC 0006                       processGestureData@u_last 0041  
                      _processGestureData$1690 003F                        _processGestureData$1687 0039  
                      _processGestureData$1688 003B                        _processGestureData$1689 003D  
               ?_EUSART_SetOverrunErrorHandler 0020                           ?_i2c_busCollisionISR 0076  
                             __CFG_LPBOREN$OFF 0000                           __end_of_mssp1_setIRQ 1686  
                       __end_of_I2C_Write_Byte 0927                     _EUSART_FramingErrorHandler 016A  
                             ??_PMD_Initialize 0020                setLightIntLowThreshold@val_high 002E  
                                     ??___wmul 0024                         _EUSART_SetErrorHandler 1756  
                         ?_enableGestureSensor 0076                                    _CCPTMRSbits 029F  
                                ??_readGesture 0051                         __end_of_ADC_Initialize 1736  
                                ?_do_I2C_RESET 0076                                    __pdataBANK0 006F  
                                  __pdataBANK2 0160                             setGestureMode@mode 002B  
                      _setLightIntLowThreshold 0A5C                      setGestureIntEnable@enable 002C  
                     setAmbientLightGain@drive 002B                                    ?_returnStop 0076  
                                     ??_strlen 0022                 __end_of_do_I2C_DO_NACK_RESTART 16D2  
                                ??_setLEDBoost 002A                                  ??_setLEDDrive 002A  
                         _i2c1_driver_sendNACK 16D6                    __end_of_EUSART_Transmit_ISR 0961  
                       setGestureIntEnable@val 002B                                    __pbssCOMMON 0070  
                                    ___latbits 0002                                      _adcResult 006C  
                         _i2c1_driver_resetBus 1670                                  __pcstackBANK0 0020  
                                __pcstackBANK1 00A0                                  __pcstackBANK2 0120  
                     __size_of_TMR2_Initialize 0008                                      _do_I2C_RX 0CF0  
                                    _do_I2C_TX 0DC7                 __size_of_do_I2C_SEND_ADR_WRITE 0007  
                __size_ofi1_i2c1_driver_TXData 0005                     __end_of_EUSART_Receive_ISR 0C28  
                __end_of_do_I2C_SEND_ADR_WRITE 1710                                       ?_Get_ADC 0076  
                        readGesture@fifo_data2 00A0                     __size_of_EUSART_Initialize 0043  
                    __size_of_i2c1_driver_open 000A                          readGesture@fifo_level 0058  
                    __size_of_i2c1_driver_stop 0003               _EUSART_RxDefaultInterruptHandler 016C  
                                     ?_i2c_ISR 0076                            __size_of_initialize 0116  
                              _do_I2C_TX_EMPTY 0B2B                                      __pnvBANK0 006E  
                                    __pnvBANK1 00EC                                      __pnvBANK2 0168  
                                    __pnvBANK3 01DA                         __size_of_handleGesture 0087  
                        ??_i2c_busCollisionISR 0076                          __end_of_fsmStateTable 1020  
                  __size_of_PWM1_LoadDutyValue 0017                   __end_of_EUSART_RxDataHandler 0878  
                       _PIN_MANAGER_Initialize 0CAC                        ??i1_i2c1_driver_restart 0076  
                      ??i1_i2c1_driver_startRX 0076                                ?_I2C_Write_Byte 0076  
                                UART_Byte@bits 002E                          ??_enableGestureSensor 0030  
                      __end_of_SPI2_Initialize 1717                                 ??_do_I2C_RESET 0076  
                                     ?___awdiv 0026                                      __ptext100 1670  
                                    __ptext101 167D                                      __ptext110 0943  
                                    __ptext102 0002                                      __ptext111 0BF2  
                                    __ptext103 1672                                      __ptext112 16AA  
                                    __ptext104 167A                                      __ptext113 166E  
                                    __ptext105 1677                                      __ptext114 1674  
                                    __ptext106 16AE                                      __ptext115 0861  
                                    __ptext107 16E4                                      __ptext108 17B6  
                                    __ptext109 166F                     __size_of_wireWriteDataByte 001B  
                     ??_do_I2C_DO_ADDRESS_NACK 0076                                ?_ADC_Initialize 0076  
                  _i2c1_driver_busCollisionISR 00EA                                   _eusartRxHead 0072  
                                 _eusartTxHead 0074                                   _eusartRxTail 0071  
                                 _eusartTxTail 0073                                    ??_UART_Byte 0025  
                          _setProxIntLowThresh 07ED                          __end_of_do_I2C_DO_ACK 16CA  
                            ??_PWM1_Initialize 0020                   ??_INTERRUPT_InterruptManager 007C  
                     _i2c1_driver_isBufferFull 1717                                       ?_getMode 0076  
                              ??_decodeGesture 0020                                UART_Byte@tempOn 0026  
                            ?_wireReadDataByte 0076                     ??_do_I2C_SEND_RESTART_READ 0076  
                        ?_i2c1_driver_sendNACK 0076                __end_ofi1_i2c1_driver_getRXData 1683  
                      _eusartTxBufferRemaining 006E                               ??_mssp1_clearIRQ 0076  
                                     _BAUD1CON 019F                                    _enablePower 17C3  
                           ??_wireReadDataByte 0026                            __end_of_readGesture 07ED  
                        ?_i2c1_driver_resetBus 0076             __size_of_do_I2C_SEND_RESTART_WRITE 0004  
                                     _I2C_Stop 16A7                       ??_resetGestureParameters 0020  
                                     ?_setMode 002B             __end_of_IOCAF4_SetInterruptHandler 178C  
                   _IOCAF4_SetInterruptHandler 1783                                 __size_of_Noise 0017  
                                   ?_do_I2C_RX 0076                                     ?_do_I2C_TX 0076  
                             __CFG_WDTE$SWDTEN 0000                                    ??_SPI_Write 0021  
                            _i2c1_driver_start 169E                         __size_of_Display_Clear 0011  
                          __end_of_setLEDBoost 0B8E                            __end_of_setLEDDrive 0AAC  
                                   UART_Byte@i 0033                           ?_setProxIntLowThresh 0076  
                        readGesture@bytes_read 0056                             ?_i2c1_driver_start 0076  
                               _eusartRxBuffer 01C5                                 _eusartTxBuffer 01CD  
                               ___wmul@product 0024         EUSART_SetErrorHandler@interruptHandler 0020  
                                     _LATCbits 010E                            __size_of_returnStop 0002  
                                    clear_ram0 16F6                                       _PIE0bits 0090  
                                     _PIE1bits 0091                   __size_of_setGestureIntEnable 002B  
                            _eusartRxLastError 006A                            _gesture_near_count_ 00E6  
                          ??_i2c1_driver_start 0020            __size_of_INTERRUPT_InterruptManager 0043  
                                     _PIR0bits 0010                                       _PIR1bits 0011  
              ??_EUSART_SetFramingErrorHandler 0022                          __end_of_I2C_Read_Byte 17AA  
                    ??_setLightIntLowThreshold 002C                                       _SSP1CON1 0215  
                                     _SSP1CON2 0216                                       _SSP2CON1 021D  
    __end_of_EUSART_DefaultOverrunErrorHandler 16AE     __size_of_EUSART_DefaultOverrunErrorHandler 0004  
          ??_EUSART_DefaultOverrunErrorHandler 0076             ?_EUSART_DefaultOverrunErrorHandler 0076  
            _EUSART_DefaultOverrunErrorHandler 16AA                                 setLEDBoost@val 002C  
                            UART_Byte@tempName 002A                                       _SSP1STAT 0214  
                                     _SSP2STAT 021C                     __end_ofi1_i2c1_driver_stop 167D  
                            ??_PIN_MANAGER_IOC 0076                              UART_Byte@tempProx 0028  
                        __end_of_I2C_Send_NACK 169E                                 setLEDDrive@val 002C  
             processGestureData@lr_ratio_first 0033                                     _ADCON0bits 009D  
                            ___wmul@multiplier 0020                              ?_do_I2C_SEND_STOP 0076  
                    processGestureData@d_first 0046                                  _handleGesture 0F79  
                    __end_of_i2c1_driver_start 16A1                                  ??_returnReset 0077  
                           ??_do_I2C_SEND_STOP 0076                    __size_of_i2c1_driver_TXData 0006  
                  __end_of_setAmbientLightGain 099D                      processGestureData@l_first 0047  
            __end_of_do_I2C_SEND_RESTART_WRITE 16BE                        __end_of_do_I2C_TX_EMPTY 0B5C  
                 __end_of_setGestureExitThresh 0839                      processGestureData@r_first 0048  
                    processGestureData@u_first 0045                          ??_setProxIntLowThresh 002A  
                 __size_of_do_I2C_SEND_RESTART 0004                    __size_of_i2c1_driver_isNACK 0008  
                            setGestureGain@val 002C                          __size_of_mssp1_setIRQ 0003  
                            ??_TMR2_Initialize 0020                               __size_of_Get_ADC 00F7  
                          _do_I2C_DO_NACK_STOP 16CA                               __size_of_i2c_ISR 0026  
                   ??_setLightIntHighThreshold 002C                              _ADC_GetConversion 0961  
                  __size_of_setGestureLEDDrive 0032                                 setMode@reg_val 002E  
               setLightIntLowThreshold@val_low 002D                                   ?_do_I2C_IDLE 0076  
                                _Display_Clear 17EF                                   ?_do_I2C_RCEN 0076  
                            setGestureMode@val 002C                               ?_SPI2_Initialize 0076  
                      ?i1_i2c1_driver_sendNACK 0076                        ??_OSCILLATOR_Initialize 0020  
                          _EUSART_ErrorHandler 01DA                             ?_ADC_GetConversion 0020  
                          _i2c1_driver_sendACK 16AE                               __size_of___awdiv 0052  
                __size_of_setProxIntHighThresh 0013                                    _readGesture 06FA  
              __size_of_do_I2C_DO_ADDRESS_NACK 002B                    ?_EUSART_DefaultErrorHandler 0076  
                          i2c1_driver_TXData@d 0020                         ??_i2c1_driver_sendNACK 0020  
                                 ??_initialize 0030                                   ?_I2C_ReStart 0076  
                          _i2c1_driver_restart 168F               setLightIntLowThreshold@threshold 002A  
                         ?_do_I2C_DO_NACK_STOP 0076                            _i2c1_driver_startRX 1698  
                               ?_handleGesture 0076                   __end_of_do_I2C_SEND_ADR_READ 172E  
                             __size_of_getMode 0009                         ??_i2c1_driver_resetBus 0076  
                         readGesture@fifo_data 0120                                    _setLEDBoost 0B5C  
                          ??_ADC_GetConversion 0022                                    _setLEDDrive 0A83  
              __size_of_resetGestureParameters 0017                           _EUSART_RxDataHandler 0861  
                                 _mssp1_setIRQ 1683                __end_of_setLightIntLowThreshold 0A83  
                                  ??_do_I2C_RX 0076                                    ??_do_I2C_TX 0076  
                        setGestureLEDDrive@val 002C                               __size_of_setMode 004F  
                                     __ptext10 0B8E                                       __ptext11 0826  
                                     __ptext20 0E65                                       __ptext12 0813  
                                     __ptext21 0800                                       __ptext13 097F  
                                     __ptext30 08F0                                       __ptext22 035C  
                                     __ptext14 1795                                       __ptext31 178C  
                                     __ptext23 0F15                                       __ptext15 0F79  
                                     __ptext40 16D6                                       __ptext32 099D  
                                     __ptext24 0B5C                                       __ptext16 06FA  
                                     __ptext41 179F                                       __ptext33 090B  
                                     __ptext25 09E7                                       __ptext17 0D7D  
                                     __ptext50 1746                                       __ptext42 1698  
                                     __ptext34 16F0                                       __ptext26 0B00  
                                     __ptext18 0085                                       __ptext51 1710  
                                     __ptext43 1717                                       __ptext35 16A7  
                                     __ptext27 08A6                                       __ptext19 0927  
                                     __ptext60 1768                                       __ptext52 17AA  
                                     __ptext44 1695                                       __ptext36 16A4  
                                     __ptext28 17C3                                       __ptext61 175F  
                                     __ptext53 173E                                       __ptext45 1692  
                                     __ptext37 16A1                                       __ptext29 0E16  
                                     __ptext70 0961                                       __ptext62 1756  
                                     __ptext54 0CAC                                       __ptext46 168F  
                                     __ptext38 169E                                       __ptext71 17EF  
                                     __ptext63 172E                                       __ptext55 1783  
                                     __ptext47 0EB7                                       __ptext39 169B  
                                     __ptext80 0DC7                                       __ptext72 084C  
                                     __ptext64 17E0                                       __ptext56 1736  
                                     __ptext48 08D5                                       __ptext81 0AD5  
                                     __ptext73 17D1                                       __ptext65 0603  
                                     __ptext57 0C69                                       __ptext49 16D2  
                                     __ptext90 16BA                                       __ptext82 16CE  
                                     __ptext66 088F                                       __ptext58 177A  
                                     __ptext91 16B6                                       __ptext83 16CA  
                                     __ptext75 168C                                       __ptext67 0878  
                                     __ptext59 1771                                       __ptext92 16DF  
                                     __ptext84 16C6                                       __ptext76 1689  
                                     __ptext68 0C28                                       __ptext93 1702  
                                     __ptext85 16EA                                       __ptext77 09C1  
                                     __ptext69 08BD                                       __ptext94 0B2B  
                                     __ptext86 1709                                       __ptext78 1686  
                                     __ptext95 1683                                       __ptext87 1726  
                                     __ptext79 0CF0                                       __ptext96 171E  
                                     __ptext88 16C2                                       __ptext97 16DA  
                                     __ptext89 16BE                                       __ptext98 1680  
                                     __ptext99 16B2                          _setGestureEnterThresh 0813  
                                 _SSP1CON1bits 0215                                   _SSP1CON2bits 0216  
               setGestureEnterThresh@threshold 002B                                   _SSP2CON1bits 021D  
                         ?_i2c1_driver_sendACK 0076                           __end_of_do_I2C_RESET 1709  
                                   _IOCAF4_ISR 17B6                           ?_i2c1_driver_restart 0076  
                          __end_of_returnReset 0004                               _i2c1_driver_open 1795  
                             _i2c1_driver_stop 16A4                                  __size_of_main 0047  
                         ?_i2c1_driver_startRX 0076                              ?_setProximityGain 0076  
               __size_of_i2c1_driver_getRXData 0003                  __end_of_i2c1_driver_getRXData 1698  
                           __end_of_initialize 0603                      __end_of_ADC_GetConversion 097F  
                      ?_EUSART_SetErrorHandler 0020                             ??_setProximityGain 002A  
             __size_ofi1_i2c1_driver_getRXData 0003                             _decodeGesture$1692 0022  
                           _decodeGesture$1693 0024                             _decodeGesture$1694 0026  
                           _decodeGesture$1695 0028                             _decodeGesture$1696 002A  
                           _decodeGesture$1697 002C                             _decodeGesture$1698 002E  
                           _decodeGesture$1699 0030                                     _RC1STAbits 019D  
                               ?_Display_Clear 0076                 __end_ofi1_i2c1_driver_sendNACK 16B6  
EUSART_SetOverrunErrorHandler@interruptHandler 0020                                       int$flags 007E  
           __end_of_INTERRUPT_InterruptManager 0047                     _INTERRUPT_InterruptManager 0004  
        __end_of_EUSART_SetFramingErrorHandler 1768         __size_of_EUSART_SetFramingErrorHandler 0009  
                _EUSART_SetFramingErrorHandler 175F                                   _SSP1STATbits 0214  
                  __size_of_isGestureAvailable 0013                                  Display_Name@i 002A  
                          setProximityGain@val 002C               __end_of_do_I2C_SEND_RESTART_READ 16BA  
                  __size_of_setGestureWaitTime 0027                     __end_of_processGestureData 035C  
                                 ??_returnStop 0077                                   _SSP2STATbits 021C  
                        ??_do_I2C_DO_NACK_STOP 0076                                     Get_ADC@val 002F  
                      __size_of_setGestureGain 0032                                     _INTCONbits 000B  
                      __size_of_setGestureMode 0027                     __size_of_i2c1_driver_start 0003  
                        ?_EUSART_RxDataHandler 0076                         setAmbientLightGain@val 002C  
                        ??_i2c1_driver_sendACK 0076                               ?_do_I2C_TX_EMPTY 0076  
                      __size_of_WDT_Initialize 0004                         _do_I2C_DO_ADDRESS_NACK 0AD5  
                                     intlevel1 0000                          ??_i2c1_driver_restart 0020  
                        ??_i2c1_driver_startRX 0020                        ?_PIN_MANAGER_Initialize 0076  
                             ??_I2C_Write_Byte 0021                 __end_of_EUSART_SetErrorHandler 175F  
                            __CFG_CLKOUTEN$OFF 0000                             __end_of_returnStop 1674  
                              _PWM1_Initialize 17AA                               ??_ADC_Initialize 0020  
         __end_of_EUSART_SetRxInterruptHandler 177A          __size_of_EUSART_SetRxInterruptHandler 0009  
                 _EUSART_SetRxInterruptHandler 1771                         _resetGestureParameters 08A6  
                   ??_i2c1_driver_isBufferFull 0020                                  ?_Display_Name 0025  
               __size_ofi1_i2c1_driver_restart 0003                  __end_ofi1_i2c1_driver_restart 167A  
                           _EUSART_Receive_ISR 0BF2  EUSART_SetFramingErrorHandler@interruptHandler 0020  
               __size_ofi1_i2c1_driver_startRX 0003                   __end_ofi1_i2c1_driver_TXData 16DF  
                __end_ofi1_i2c1_driver_startRX 1680                           _setGestureExitThresh 0826  
                              ??_handleGesture 005B                                  __pstringtext1 1000  
                                __pstringtext2 1800                                  __pstringtext3 1810  
                                __pstringtext4 181D                                  __pstringtext5 1829  
                                __pstringtext6 0000                            ?_EUSART_Receive_ISR 0076  
                                   _SSP1DATPPS 0E21                                   ?_enablePower 0076  
                                   _SSP2DATPPS 0E1E                                     _SSP1CLKPPS 0E20  
                          _setGestureIntEnable 0B00                                     _SSP2CLKPPS 0E1D  
                             setLEDBoost@boost 002D                         ?_setGestureEnterThresh 0076  
                          UART_Byte@tempBright 002C                    ?_IOCAF4_SetInterruptHandler 0020  
                                  _returnReset 0002                                     _PIR_Sensor 17E0  
                                   _TX1STAbits 019E                                    ?_IOCAF4_ISR 0076  
                 __size_of_EUSART_Transmit_ISR 001E                 __end_of_PIN_MANAGER_Initialize 0CF0  
                  __end_of_i2c_busCollisionISR 168F                      __size_of_wireReadDataByte 0024  
             ??_IOCAF4_DefaultInterruptHandler 0076                ?_IOCAF4_DefaultInterruptHandler 0076  
                             setLEDDrive@drive 002D                     __end_of_PWM1_LoadDutyValue 088F  
                          processGestureData@i 004D                                _PIN_MANAGER_IOC 16E4  
                         ??_EUSART_Receive_ISR 0077                    __end_of_enableGestureSensor 0F79  
                        _do_I2C_SEND_ADR_WRITE 1709                           ?_setGestureIntEnable 0076  
                   __size_of_ADC_GetConversion 001E                           _do_I2C_SEND_ADR_READ 1726  
                              ??_Display_Clear 0023               __end_of_setLightIntHighThreshold 0A5C  
                               ??_Display_Name 0027  
